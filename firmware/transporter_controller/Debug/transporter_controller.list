
transporter_controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001ca84  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001c4c  0801cc68  0801cc68  0001dc68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801e8b4  0801e8b4  00020488  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0801e8b4  0801e8b4  0001f8b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801e8bc  0801e8bc  00020488  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  0801e8bc  0801e8bc  0001f8bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801e8c8  0801e8c8  0001f8c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000488  20000000  0801e8cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000b184  20000488  0801ed54  00020488  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000b60c  0801ed54  0002060c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020488  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002b207  00000000  00000000  000204b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005f89  00000000  00000000  0004b6bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001e10  00000000  00000000  00051648  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000016f7  00000000  00000000  00053458  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002f3fd  00000000  00000000  00054b4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00028d77  00000000  00000000  00083f4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00117109  00000000  00000000  000accc3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000076  00000000  00000000  001c3dcc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008e28  00000000  00000000  001c3e44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  001ccc6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000488 	.word	0x20000488
 80001fc:	00000000 	.word	0x00000000
 8000200:	0801cc4c 	.word	0x0801cc4c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000048c 	.word	0x2000048c
 800021c:	0801cc4c 	.word	0x0801cc4c

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr

08000234 <strlen>:
 8000234:	4603      	mov	r3, r0
 8000236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023a:	2a00      	cmp	r2, #0
 800023c:	d1fb      	bne.n	8000236 <strlen+0x2>
 800023e:	1a18      	subs	r0, r3, r0
 8000240:	3801      	subs	r0, #1
 8000242:	4770      	bx	lr
	...

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	@ 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_dmul>:
 8000668:	b570      	push	{r4, r5, r6, lr}
 800066a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800066e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000672:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000676:	bf1d      	ittte	ne
 8000678:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800067c:	ea94 0f0c 	teqne	r4, ip
 8000680:	ea95 0f0c 	teqne	r5, ip
 8000684:	f000 f8de 	bleq	8000844 <__aeabi_dmul+0x1dc>
 8000688:	442c      	add	r4, r5
 800068a:	ea81 0603 	eor.w	r6, r1, r3
 800068e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000692:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000696:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800069a:	bf18      	it	ne
 800069c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006a0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006a4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80006a8:	d038      	beq.n	800071c <__aeabi_dmul+0xb4>
 80006aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80006ae:	f04f 0500 	mov.w	r5, #0
 80006b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006b6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006be:	f04f 0600 	mov.w	r6, #0
 80006c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006c6:	f09c 0f00 	teq	ip, #0
 80006ca:	bf18      	it	ne
 80006cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006d0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006d4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006d8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006dc:	d204      	bcs.n	80006e8 <__aeabi_dmul+0x80>
 80006de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006e2:	416d      	adcs	r5, r5
 80006e4:	eb46 0606 	adc.w	r6, r6, r6
 80006e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006fc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000700:	bf88      	it	hi
 8000702:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000706:	d81e      	bhi.n	8000746 <__aeabi_dmul+0xde>
 8000708:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800070c:	bf08      	it	eq
 800070e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000712:	f150 0000 	adcs.w	r0, r0, #0
 8000716:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000720:	ea46 0101 	orr.w	r1, r6, r1
 8000724:	ea40 0002 	orr.w	r0, r0, r2
 8000728:	ea81 0103 	eor.w	r1, r1, r3
 800072c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000730:	bfc2      	ittt	gt
 8000732:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000736:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800073a:	bd70      	popgt	{r4, r5, r6, pc}
 800073c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000740:	f04f 0e00 	mov.w	lr, #0
 8000744:	3c01      	subs	r4, #1
 8000746:	f300 80ab 	bgt.w	80008a0 <__aeabi_dmul+0x238>
 800074a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800074e:	bfde      	ittt	le
 8000750:	2000      	movle	r0, #0
 8000752:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000756:	bd70      	pople	{r4, r5, r6, pc}
 8000758:	f1c4 0400 	rsb	r4, r4, #0
 800075c:	3c20      	subs	r4, #32
 800075e:	da35      	bge.n	80007cc <__aeabi_dmul+0x164>
 8000760:	340c      	adds	r4, #12
 8000762:	dc1b      	bgt.n	800079c <__aeabi_dmul+0x134>
 8000764:	f104 0414 	add.w	r4, r4, #20
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f305 	lsl.w	r3, r0, r5
 8000770:	fa20 f004 	lsr.w	r0, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000780:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000784:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000788:	fa21 f604 	lsr.w	r6, r1, r4
 800078c:	eb42 0106 	adc.w	r1, r2, r6
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 040c 	rsb	r4, r4, #12
 80007a0:	f1c4 0520 	rsb	r5, r4, #32
 80007a4:	fa00 f304 	lsl.w	r3, r0, r4
 80007a8:	fa20 f005 	lsr.w	r0, r0, r5
 80007ac:	fa01 f204 	lsl.w	r2, r1, r4
 80007b0:	ea40 0002 	orr.w	r0, r0, r2
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007bc:	f141 0100 	adc.w	r1, r1, #0
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f1c4 0520 	rsb	r5, r4, #32
 80007d0:	fa00 f205 	lsl.w	r2, r0, r5
 80007d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007d8:	fa20 f304 	lsr.w	r3, r0, r4
 80007dc:	fa01 f205 	lsl.w	r2, r1, r5
 80007e0:	ea43 0302 	orr.w	r3, r3, r2
 80007e4:	fa21 f004 	lsr.w	r0, r1, r4
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ec:	fa21 f204 	lsr.w	r2, r1, r4
 80007f0:	ea20 0002 	bic.w	r0, r0, r2
 80007f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007fc:	bf08      	it	eq
 80007fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000802:	bd70      	pop	{r4, r5, r6, pc}
 8000804:	f094 0f00 	teq	r4, #0
 8000808:	d10f      	bne.n	800082a <__aeabi_dmul+0x1c2>
 800080a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800080e:	0040      	lsls	r0, r0, #1
 8000810:	eb41 0101 	adc.w	r1, r1, r1
 8000814:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3c01      	subeq	r4, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1a6>
 800081e:	ea41 0106 	orr.w	r1, r1, r6
 8000822:	f095 0f00 	teq	r5, #0
 8000826:	bf18      	it	ne
 8000828:	4770      	bxne	lr
 800082a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800082e:	0052      	lsls	r2, r2, #1
 8000830:	eb43 0303 	adc.w	r3, r3, r3
 8000834:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000838:	bf08      	it	eq
 800083a:	3d01      	subeq	r5, #1
 800083c:	d0f7      	beq.n	800082e <__aeabi_dmul+0x1c6>
 800083e:	ea43 0306 	orr.w	r3, r3, r6
 8000842:	4770      	bx	lr
 8000844:	ea94 0f0c 	teq	r4, ip
 8000848:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800084c:	bf18      	it	ne
 800084e:	ea95 0f0c 	teqne	r5, ip
 8000852:	d00c      	beq.n	800086e <__aeabi_dmul+0x206>
 8000854:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000858:	bf18      	it	ne
 800085a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085e:	d1d1      	bne.n	8000804 <__aeabi_dmul+0x19c>
 8000860:	ea81 0103 	eor.w	r1, r1, r3
 8000864:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000868:	f04f 0000 	mov.w	r0, #0
 800086c:	bd70      	pop	{r4, r5, r6, pc}
 800086e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000872:	bf06      	itte	eq
 8000874:	4610      	moveq	r0, r2
 8000876:	4619      	moveq	r1, r3
 8000878:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800087c:	d019      	beq.n	80008b2 <__aeabi_dmul+0x24a>
 800087e:	ea94 0f0c 	teq	r4, ip
 8000882:	d102      	bne.n	800088a <__aeabi_dmul+0x222>
 8000884:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000888:	d113      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800088a:	ea95 0f0c 	teq	r5, ip
 800088e:	d105      	bne.n	800089c <__aeabi_dmul+0x234>
 8000890:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000894:	bf1c      	itt	ne
 8000896:	4610      	movne	r0, r2
 8000898:	4619      	movne	r1, r3
 800089a:	d10a      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800089c:	ea81 0103 	eor.w	r1, r1, r3
 80008a0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80008a4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008a8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80008ac:	f04f 0000 	mov.w	r0, #0
 80008b0:	bd70      	pop	{r4, r5, r6, pc}
 80008b2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008b6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008ba:	bd70      	pop	{r4, r5, r6, pc}

080008bc <__aeabi_ddiv>:
 80008bc:	b570      	push	{r4, r5, r6, lr}
 80008be:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008c2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ca:	bf1d      	ittte	ne
 80008cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008d0:	ea94 0f0c 	teqne	r4, ip
 80008d4:	ea95 0f0c 	teqne	r5, ip
 80008d8:	f000 f8a7 	bleq	8000a2a <__aeabi_ddiv+0x16e>
 80008dc:	eba4 0405 	sub.w	r4, r4, r5
 80008e0:	ea81 0e03 	eor.w	lr, r1, r3
 80008e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ec:	f000 8088 	beq.w	8000a00 <__aeabi_ddiv+0x144>
 80008f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008f4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000900:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000904:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000908:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800090c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000910:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000914:	429d      	cmp	r5, r3
 8000916:	bf08      	it	eq
 8000918:	4296      	cmpeq	r6, r2
 800091a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800091e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000922:	d202      	bcs.n	800092a <__aeabi_ddiv+0x6e>
 8000924:	085b      	lsrs	r3, r3, #1
 8000926:	ea4f 0232 	mov.w	r2, r2, rrx
 800092a:	1ab6      	subs	r6, r6, r2
 800092c:	eb65 0503 	sbc.w	r5, r5, r3
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800093a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000968:	085b      	lsrs	r3, r3, #1
 800096a:	ea4f 0232 	mov.w	r2, r2, rrx
 800096e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000972:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000976:	bf22      	ittt	cs
 8000978:	1ab6      	subcs	r6, r6, r2
 800097a:	4675      	movcs	r5, lr
 800097c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000980:	085b      	lsrs	r3, r3, #1
 8000982:	ea4f 0232 	mov.w	r2, r2, rrx
 8000986:	ebb6 0e02 	subs.w	lr, r6, r2
 800098a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800098e:	bf22      	ittt	cs
 8000990:	1ab6      	subcs	r6, r6, r2
 8000992:	4675      	movcs	r5, lr
 8000994:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000998:	ea55 0e06 	orrs.w	lr, r5, r6
 800099c:	d018      	beq.n	80009d0 <__aeabi_ddiv+0x114>
 800099e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009ba:	d1c0      	bne.n	800093e <__aeabi_ddiv+0x82>
 80009bc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009c0:	d10b      	bne.n	80009da <__aeabi_ddiv+0x11e>
 80009c2:	ea41 0100 	orr.w	r1, r1, r0
 80009c6:	f04f 0000 	mov.w	r0, #0
 80009ca:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ce:	e7b6      	b.n	800093e <__aeabi_ddiv+0x82>
 80009d0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009d4:	bf04      	itt	eq
 80009d6:	4301      	orreq	r1, r0
 80009d8:	2000      	moveq	r0, #0
 80009da:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009de:	bf88      	it	hi
 80009e0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009e4:	f63f aeaf 	bhi.w	8000746 <__aeabi_dmul+0xde>
 80009e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ec:	bf04      	itt	eq
 80009ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009f6:	f150 0000 	adcs.w	r0, r0, #0
 80009fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009fe:	bd70      	pop	{r4, r5, r6, pc}
 8000a00:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000a04:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a08:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a0c:	bfc2      	ittt	gt
 8000a0e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a12:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a16:	bd70      	popgt	{r4, r5, r6, pc}
 8000a18:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a1c:	f04f 0e00 	mov.w	lr, #0
 8000a20:	3c01      	subs	r4, #1
 8000a22:	e690      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a24:	ea45 0e06 	orr.w	lr, r5, r6
 8000a28:	e68d      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a2a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a2e:	ea94 0f0c 	teq	r4, ip
 8000a32:	bf08      	it	eq
 8000a34:	ea95 0f0c 	teqeq	r5, ip
 8000a38:	f43f af3b 	beq.w	80008b2 <__aeabi_dmul+0x24a>
 8000a3c:	ea94 0f0c 	teq	r4, ip
 8000a40:	d10a      	bne.n	8000a58 <__aeabi_ddiv+0x19c>
 8000a42:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a46:	f47f af34 	bne.w	80008b2 <__aeabi_dmul+0x24a>
 8000a4a:	ea95 0f0c 	teq	r5, ip
 8000a4e:	f47f af25 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a52:	4610      	mov	r0, r2
 8000a54:	4619      	mov	r1, r3
 8000a56:	e72c      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a58:	ea95 0f0c 	teq	r5, ip
 8000a5c:	d106      	bne.n	8000a6c <__aeabi_ddiv+0x1b0>
 8000a5e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a62:	f43f aefd 	beq.w	8000860 <__aeabi_dmul+0x1f8>
 8000a66:	4610      	mov	r0, r2
 8000a68:	4619      	mov	r1, r3
 8000a6a:	e722      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a6c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a76:	f47f aec5 	bne.w	8000804 <__aeabi_dmul+0x19c>
 8000a7a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a7e:	f47f af0d 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a82:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a86:	f47f aeeb 	bne.w	8000860 <__aeabi_dmul+0x1f8>
 8000a8a:	e712      	b.n	80008b2 <__aeabi_dmul+0x24a>

08000a8c <__aeabi_d2uiz>:
 8000a8c:	004a      	lsls	r2, r1, #1
 8000a8e:	d211      	bcs.n	8000ab4 <__aeabi_d2uiz+0x28>
 8000a90:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a94:	d211      	bcs.n	8000aba <__aeabi_d2uiz+0x2e>
 8000a96:	d50d      	bpl.n	8000ab4 <__aeabi_d2uiz+0x28>
 8000a98:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a9c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000aa0:	d40e      	bmi.n	8000ac0 <__aeabi_d2uiz+0x34>
 8000aa2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aaa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aae:	fa23 f002 	lsr.w	r0, r3, r2
 8000ab2:	4770      	bx	lr
 8000ab4:	f04f 0000 	mov.w	r0, #0
 8000ab8:	4770      	bx	lr
 8000aba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000abe:	d102      	bne.n	8000ac6 <__aeabi_d2uiz+0x3a>
 8000ac0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000ac4:	4770      	bx	lr
 8000ac6:	f04f 0000 	mov.w	r0, #0
 8000aca:	4770      	bx	lr

08000acc <__aeabi_d2f>:
 8000acc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ad0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ad4:	bf24      	itt	cs
 8000ad6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ada:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ade:	d90d      	bls.n	8000afc <__aeabi_d2f+0x30>
 8000ae0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ae4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aec:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000af0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af4:	bf08      	it	eq
 8000af6:	f020 0001 	biceq.w	r0, r0, #1
 8000afa:	4770      	bx	lr
 8000afc:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b00:	d121      	bne.n	8000b46 <__aeabi_d2f+0x7a>
 8000b02:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b06:	bfbc      	itt	lt
 8000b08:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b0c:	4770      	bxlt	lr
 8000b0e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b12:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b16:	f1c2 0218 	rsb	r2, r2, #24
 8000b1a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b22:	fa20 f002 	lsr.w	r0, r0, r2
 8000b26:	bf18      	it	ne
 8000b28:	f040 0001 	orrne.w	r0, r0, #1
 8000b2c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b30:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b34:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b38:	ea40 000c 	orr.w	r0, r0, ip
 8000b3c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b40:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b44:	e7cc      	b.n	8000ae0 <__aeabi_d2f+0x14>
 8000b46:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b4a:	d107      	bne.n	8000b5c <__aeabi_d2f+0x90>
 8000b4c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b50:	bf1e      	ittt	ne
 8000b52:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b56:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b5a:	4770      	bxne	lr
 8000b5c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b60:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b64:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop

08000b6c <__aeabi_ldivmod>:
 8000b6c:	b97b      	cbnz	r3, 8000b8e <__aeabi_ldivmod+0x22>
 8000b6e:	b972      	cbnz	r2, 8000b8e <__aeabi_ldivmod+0x22>
 8000b70:	2900      	cmp	r1, #0
 8000b72:	bfbe      	ittt	lt
 8000b74:	2000      	movlt	r0, #0
 8000b76:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000b7a:	e006      	blt.n	8000b8a <__aeabi_ldivmod+0x1e>
 8000b7c:	bf08      	it	eq
 8000b7e:	2800      	cmpeq	r0, #0
 8000b80:	bf1c      	itt	ne
 8000b82:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000b86:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000b8a:	f000 b9d3 	b.w	8000f34 <__aeabi_idiv0>
 8000b8e:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b92:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b96:	2900      	cmp	r1, #0
 8000b98:	db09      	blt.n	8000bae <__aeabi_ldivmod+0x42>
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	db1a      	blt.n	8000bd4 <__aeabi_ldivmod+0x68>
 8000b9e:	f000 f84d 	bl	8000c3c <__udivmoddi4>
 8000ba2:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ba6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000baa:	b004      	add	sp, #16
 8000bac:	4770      	bx	lr
 8000bae:	4240      	negs	r0, r0
 8000bb0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	db1b      	blt.n	8000bf0 <__aeabi_ldivmod+0x84>
 8000bb8:	f000 f840 	bl	8000c3c <__udivmoddi4>
 8000bbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bc4:	b004      	add	sp, #16
 8000bc6:	4240      	negs	r0, r0
 8000bc8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bcc:	4252      	negs	r2, r2
 8000bce:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000bd2:	4770      	bx	lr
 8000bd4:	4252      	negs	r2, r2
 8000bd6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000bda:	f000 f82f 	bl	8000c3c <__udivmoddi4>
 8000bde:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be6:	b004      	add	sp, #16
 8000be8:	4240      	negs	r0, r0
 8000bea:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bee:	4770      	bx	lr
 8000bf0:	4252      	negs	r2, r2
 8000bf2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000bf6:	f000 f821 	bl	8000c3c <__udivmoddi4>
 8000bfa:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bfe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c02:	b004      	add	sp, #16
 8000c04:	4252      	negs	r2, r2
 8000c06:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c0a:	4770      	bx	lr

08000c0c <__aeabi_uldivmod>:
 8000c0c:	b953      	cbnz	r3, 8000c24 <__aeabi_uldivmod+0x18>
 8000c0e:	b94a      	cbnz	r2, 8000c24 <__aeabi_uldivmod+0x18>
 8000c10:	2900      	cmp	r1, #0
 8000c12:	bf08      	it	eq
 8000c14:	2800      	cmpeq	r0, #0
 8000c16:	bf1c      	itt	ne
 8000c18:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000c1c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c20:	f000 b988 	b.w	8000f34 <__aeabi_idiv0>
 8000c24:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c28:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c2c:	f000 f806 	bl	8000c3c <__udivmoddi4>
 8000c30:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c38:	b004      	add	sp, #16
 8000c3a:	4770      	bx	lr

08000c3c <__udivmoddi4>:
 8000c3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c40:	9d08      	ldr	r5, [sp, #32]
 8000c42:	468e      	mov	lr, r1
 8000c44:	4604      	mov	r4, r0
 8000c46:	4688      	mov	r8, r1
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d14a      	bne.n	8000ce2 <__udivmoddi4+0xa6>
 8000c4c:	428a      	cmp	r2, r1
 8000c4e:	4617      	mov	r7, r2
 8000c50:	d962      	bls.n	8000d18 <__udivmoddi4+0xdc>
 8000c52:	fab2 f682 	clz	r6, r2
 8000c56:	b14e      	cbz	r6, 8000c6c <__udivmoddi4+0x30>
 8000c58:	f1c6 0320 	rsb	r3, r6, #32
 8000c5c:	fa01 f806 	lsl.w	r8, r1, r6
 8000c60:	fa20 f303 	lsr.w	r3, r0, r3
 8000c64:	40b7      	lsls	r7, r6
 8000c66:	ea43 0808 	orr.w	r8, r3, r8
 8000c6a:	40b4      	lsls	r4, r6
 8000c6c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c70:	fa1f fc87 	uxth.w	ip, r7
 8000c74:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c78:	0c23      	lsrs	r3, r4, #16
 8000c7a:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c7e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c82:	fb01 f20c 	mul.w	r2, r1, ip
 8000c86:	429a      	cmp	r2, r3
 8000c88:	d909      	bls.n	8000c9e <__udivmoddi4+0x62>
 8000c8a:	18fb      	adds	r3, r7, r3
 8000c8c:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000c90:	f080 80ea 	bcs.w	8000e68 <__udivmoddi4+0x22c>
 8000c94:	429a      	cmp	r2, r3
 8000c96:	f240 80e7 	bls.w	8000e68 <__udivmoddi4+0x22c>
 8000c9a:	3902      	subs	r1, #2
 8000c9c:	443b      	add	r3, r7
 8000c9e:	1a9a      	subs	r2, r3, r2
 8000ca0:	b2a3      	uxth	r3, r4
 8000ca2:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ca6:	fb0e 2210 	mls	r2, lr, r0, r2
 8000caa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cae:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cb2:	459c      	cmp	ip, r3
 8000cb4:	d909      	bls.n	8000cca <__udivmoddi4+0x8e>
 8000cb6:	18fb      	adds	r3, r7, r3
 8000cb8:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000cbc:	f080 80d6 	bcs.w	8000e6c <__udivmoddi4+0x230>
 8000cc0:	459c      	cmp	ip, r3
 8000cc2:	f240 80d3 	bls.w	8000e6c <__udivmoddi4+0x230>
 8000cc6:	443b      	add	r3, r7
 8000cc8:	3802      	subs	r0, #2
 8000cca:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cce:	eba3 030c 	sub.w	r3, r3, ip
 8000cd2:	2100      	movs	r1, #0
 8000cd4:	b11d      	cbz	r5, 8000cde <__udivmoddi4+0xa2>
 8000cd6:	40f3      	lsrs	r3, r6
 8000cd8:	2200      	movs	r2, #0
 8000cda:	e9c5 3200 	strd	r3, r2, [r5]
 8000cde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce2:	428b      	cmp	r3, r1
 8000ce4:	d905      	bls.n	8000cf2 <__udivmoddi4+0xb6>
 8000ce6:	b10d      	cbz	r5, 8000cec <__udivmoddi4+0xb0>
 8000ce8:	e9c5 0100 	strd	r0, r1, [r5]
 8000cec:	2100      	movs	r1, #0
 8000cee:	4608      	mov	r0, r1
 8000cf0:	e7f5      	b.n	8000cde <__udivmoddi4+0xa2>
 8000cf2:	fab3 f183 	clz	r1, r3
 8000cf6:	2900      	cmp	r1, #0
 8000cf8:	d146      	bne.n	8000d88 <__udivmoddi4+0x14c>
 8000cfa:	4573      	cmp	r3, lr
 8000cfc:	d302      	bcc.n	8000d04 <__udivmoddi4+0xc8>
 8000cfe:	4282      	cmp	r2, r0
 8000d00:	f200 8105 	bhi.w	8000f0e <__udivmoddi4+0x2d2>
 8000d04:	1a84      	subs	r4, r0, r2
 8000d06:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d0a:	2001      	movs	r0, #1
 8000d0c:	4690      	mov	r8, r2
 8000d0e:	2d00      	cmp	r5, #0
 8000d10:	d0e5      	beq.n	8000cde <__udivmoddi4+0xa2>
 8000d12:	e9c5 4800 	strd	r4, r8, [r5]
 8000d16:	e7e2      	b.n	8000cde <__udivmoddi4+0xa2>
 8000d18:	2a00      	cmp	r2, #0
 8000d1a:	f000 8090 	beq.w	8000e3e <__udivmoddi4+0x202>
 8000d1e:	fab2 f682 	clz	r6, r2
 8000d22:	2e00      	cmp	r6, #0
 8000d24:	f040 80a4 	bne.w	8000e70 <__udivmoddi4+0x234>
 8000d28:	1a8a      	subs	r2, r1, r2
 8000d2a:	0c03      	lsrs	r3, r0, #16
 8000d2c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d30:	b280      	uxth	r0, r0
 8000d32:	b2bc      	uxth	r4, r7
 8000d34:	2101      	movs	r1, #1
 8000d36:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d3a:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d3e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d42:	fb04 f20c 	mul.w	r2, r4, ip
 8000d46:	429a      	cmp	r2, r3
 8000d48:	d907      	bls.n	8000d5a <__udivmoddi4+0x11e>
 8000d4a:	18fb      	adds	r3, r7, r3
 8000d4c:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000d50:	d202      	bcs.n	8000d58 <__udivmoddi4+0x11c>
 8000d52:	429a      	cmp	r2, r3
 8000d54:	f200 80e0 	bhi.w	8000f18 <__udivmoddi4+0x2dc>
 8000d58:	46c4      	mov	ip, r8
 8000d5a:	1a9b      	subs	r3, r3, r2
 8000d5c:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d60:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d64:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d68:	fb02 f404 	mul.w	r4, r2, r4
 8000d6c:	429c      	cmp	r4, r3
 8000d6e:	d907      	bls.n	8000d80 <__udivmoddi4+0x144>
 8000d70:	18fb      	adds	r3, r7, r3
 8000d72:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000d76:	d202      	bcs.n	8000d7e <__udivmoddi4+0x142>
 8000d78:	429c      	cmp	r4, r3
 8000d7a:	f200 80ca 	bhi.w	8000f12 <__udivmoddi4+0x2d6>
 8000d7e:	4602      	mov	r2, r0
 8000d80:	1b1b      	subs	r3, r3, r4
 8000d82:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d86:	e7a5      	b.n	8000cd4 <__udivmoddi4+0x98>
 8000d88:	f1c1 0620 	rsb	r6, r1, #32
 8000d8c:	408b      	lsls	r3, r1
 8000d8e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d92:	431f      	orrs	r7, r3
 8000d94:	fa0e f401 	lsl.w	r4, lr, r1
 8000d98:	fa20 f306 	lsr.w	r3, r0, r6
 8000d9c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000da0:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000da4:	4323      	orrs	r3, r4
 8000da6:	fa00 f801 	lsl.w	r8, r0, r1
 8000daa:	fa1f fc87 	uxth.w	ip, r7
 8000dae:	fbbe f0f9 	udiv	r0, lr, r9
 8000db2:	0c1c      	lsrs	r4, r3, #16
 8000db4:	fb09 ee10 	mls	lr, r9, r0, lr
 8000db8:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000dbc:	fb00 fe0c 	mul.w	lr, r0, ip
 8000dc0:	45a6      	cmp	lr, r4
 8000dc2:	fa02 f201 	lsl.w	r2, r2, r1
 8000dc6:	d909      	bls.n	8000ddc <__udivmoddi4+0x1a0>
 8000dc8:	193c      	adds	r4, r7, r4
 8000dca:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000dce:	f080 809c 	bcs.w	8000f0a <__udivmoddi4+0x2ce>
 8000dd2:	45a6      	cmp	lr, r4
 8000dd4:	f240 8099 	bls.w	8000f0a <__udivmoddi4+0x2ce>
 8000dd8:	3802      	subs	r0, #2
 8000dda:	443c      	add	r4, r7
 8000ddc:	eba4 040e 	sub.w	r4, r4, lr
 8000de0:	fa1f fe83 	uxth.w	lr, r3
 8000de4:	fbb4 f3f9 	udiv	r3, r4, r9
 8000de8:	fb09 4413 	mls	r4, r9, r3, r4
 8000dec:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000df0:	fb03 fc0c 	mul.w	ip, r3, ip
 8000df4:	45a4      	cmp	ip, r4
 8000df6:	d908      	bls.n	8000e0a <__udivmoddi4+0x1ce>
 8000df8:	193c      	adds	r4, r7, r4
 8000dfa:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000dfe:	f080 8082 	bcs.w	8000f06 <__udivmoddi4+0x2ca>
 8000e02:	45a4      	cmp	ip, r4
 8000e04:	d97f      	bls.n	8000f06 <__udivmoddi4+0x2ca>
 8000e06:	3b02      	subs	r3, #2
 8000e08:	443c      	add	r4, r7
 8000e0a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e0e:	eba4 040c 	sub.w	r4, r4, ip
 8000e12:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e16:	4564      	cmp	r4, ip
 8000e18:	4673      	mov	r3, lr
 8000e1a:	46e1      	mov	r9, ip
 8000e1c:	d362      	bcc.n	8000ee4 <__udivmoddi4+0x2a8>
 8000e1e:	d05f      	beq.n	8000ee0 <__udivmoddi4+0x2a4>
 8000e20:	b15d      	cbz	r5, 8000e3a <__udivmoddi4+0x1fe>
 8000e22:	ebb8 0203 	subs.w	r2, r8, r3
 8000e26:	eb64 0409 	sbc.w	r4, r4, r9
 8000e2a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e2e:	fa22 f301 	lsr.w	r3, r2, r1
 8000e32:	431e      	orrs	r6, r3
 8000e34:	40cc      	lsrs	r4, r1
 8000e36:	e9c5 6400 	strd	r6, r4, [r5]
 8000e3a:	2100      	movs	r1, #0
 8000e3c:	e74f      	b.n	8000cde <__udivmoddi4+0xa2>
 8000e3e:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e42:	0c01      	lsrs	r1, r0, #16
 8000e44:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e48:	b280      	uxth	r0, r0
 8000e4a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e4e:	463b      	mov	r3, r7
 8000e50:	4638      	mov	r0, r7
 8000e52:	463c      	mov	r4, r7
 8000e54:	46b8      	mov	r8, r7
 8000e56:	46be      	mov	lr, r7
 8000e58:	2620      	movs	r6, #32
 8000e5a:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e5e:	eba2 0208 	sub.w	r2, r2, r8
 8000e62:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e66:	e766      	b.n	8000d36 <__udivmoddi4+0xfa>
 8000e68:	4601      	mov	r1, r0
 8000e6a:	e718      	b.n	8000c9e <__udivmoddi4+0x62>
 8000e6c:	4610      	mov	r0, r2
 8000e6e:	e72c      	b.n	8000cca <__udivmoddi4+0x8e>
 8000e70:	f1c6 0220 	rsb	r2, r6, #32
 8000e74:	fa2e f302 	lsr.w	r3, lr, r2
 8000e78:	40b7      	lsls	r7, r6
 8000e7a:	40b1      	lsls	r1, r6
 8000e7c:	fa20 f202 	lsr.w	r2, r0, r2
 8000e80:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e84:	430a      	orrs	r2, r1
 8000e86:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e8a:	b2bc      	uxth	r4, r7
 8000e8c:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e90:	0c11      	lsrs	r1, r2, #16
 8000e92:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e96:	fb08 f904 	mul.w	r9, r8, r4
 8000e9a:	40b0      	lsls	r0, r6
 8000e9c:	4589      	cmp	r9, r1
 8000e9e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000ea2:	b280      	uxth	r0, r0
 8000ea4:	d93e      	bls.n	8000f24 <__udivmoddi4+0x2e8>
 8000ea6:	1879      	adds	r1, r7, r1
 8000ea8:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000eac:	d201      	bcs.n	8000eb2 <__udivmoddi4+0x276>
 8000eae:	4589      	cmp	r9, r1
 8000eb0:	d81f      	bhi.n	8000ef2 <__udivmoddi4+0x2b6>
 8000eb2:	eba1 0109 	sub.w	r1, r1, r9
 8000eb6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eba:	fb09 f804 	mul.w	r8, r9, r4
 8000ebe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ec2:	b292      	uxth	r2, r2
 8000ec4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ec8:	4542      	cmp	r2, r8
 8000eca:	d229      	bcs.n	8000f20 <__udivmoddi4+0x2e4>
 8000ecc:	18ba      	adds	r2, r7, r2
 8000ece:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000ed2:	d2c4      	bcs.n	8000e5e <__udivmoddi4+0x222>
 8000ed4:	4542      	cmp	r2, r8
 8000ed6:	d2c2      	bcs.n	8000e5e <__udivmoddi4+0x222>
 8000ed8:	f1a9 0102 	sub.w	r1, r9, #2
 8000edc:	443a      	add	r2, r7
 8000ede:	e7be      	b.n	8000e5e <__udivmoddi4+0x222>
 8000ee0:	45f0      	cmp	r8, lr
 8000ee2:	d29d      	bcs.n	8000e20 <__udivmoddi4+0x1e4>
 8000ee4:	ebbe 0302 	subs.w	r3, lr, r2
 8000ee8:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000eec:	3801      	subs	r0, #1
 8000eee:	46e1      	mov	r9, ip
 8000ef0:	e796      	b.n	8000e20 <__udivmoddi4+0x1e4>
 8000ef2:	eba7 0909 	sub.w	r9, r7, r9
 8000ef6:	4449      	add	r1, r9
 8000ef8:	f1a8 0c02 	sub.w	ip, r8, #2
 8000efc:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f00:	fb09 f804 	mul.w	r8, r9, r4
 8000f04:	e7db      	b.n	8000ebe <__udivmoddi4+0x282>
 8000f06:	4673      	mov	r3, lr
 8000f08:	e77f      	b.n	8000e0a <__udivmoddi4+0x1ce>
 8000f0a:	4650      	mov	r0, sl
 8000f0c:	e766      	b.n	8000ddc <__udivmoddi4+0x1a0>
 8000f0e:	4608      	mov	r0, r1
 8000f10:	e6fd      	b.n	8000d0e <__udivmoddi4+0xd2>
 8000f12:	443b      	add	r3, r7
 8000f14:	3a02      	subs	r2, #2
 8000f16:	e733      	b.n	8000d80 <__udivmoddi4+0x144>
 8000f18:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f1c:	443b      	add	r3, r7
 8000f1e:	e71c      	b.n	8000d5a <__udivmoddi4+0x11e>
 8000f20:	4649      	mov	r1, r9
 8000f22:	e79c      	b.n	8000e5e <__udivmoddi4+0x222>
 8000f24:	eba1 0109 	sub.w	r1, r1, r9
 8000f28:	46c4      	mov	ip, r8
 8000f2a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f2e:	fb09 f804 	mul.w	r8, r9, r4
 8000f32:	e7c4      	b.n	8000ebe <__udivmoddi4+0x282>

08000f34 <__aeabi_idiv0>:
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop

08000f38 <PWM_Satuation>:
 *  Created on: Apr 14, 2024
 *      Author: beamk
 */
#include "Controller.h"

int32_t PWM_Satuation(float _u, int32_t _upper_limit, int32_t _lower_limit) {
 8000f38:	b480      	push	{r7}
 8000f3a:	b085      	sub	sp, #20
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	ed87 0a03 	vstr	s0, [r7, #12]
 8000f42:	60b8      	str	r0, [r7, #8]
 8000f44:	6079      	str	r1, [r7, #4]
  if (_u > _upper_limit) return _upper_limit;
 8000f46:	68bb      	ldr	r3, [r7, #8]
 8000f48:	ee07 3a90 	vmov	s15, r3
 8000f4c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f50:	ed97 7a03 	vldr	s14, [r7, #12]
 8000f54:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000f58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f5c:	dd01      	ble.n	8000f62 <PWM_Satuation+0x2a>
 8000f5e:	68bb      	ldr	r3, [r7, #8]
 8000f60:	e013      	b.n	8000f8a <PWM_Satuation+0x52>
  else if (_u < _lower_limit) return _lower_limit;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	ee07 3a90 	vmov	s15, r3
 8000f68:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f6c:	ed97 7a03 	vldr	s14, [r7, #12]
 8000f70:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000f74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f78:	d501      	bpl.n	8000f7e <PWM_Satuation+0x46>
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	e005      	b.n	8000f8a <PWM_Satuation+0x52>
  return (int32_t)_u;
 8000f7e:	edd7 7a03 	vldr	s15, [r7, #12]
 8000f82:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f86:	ee17 3a90 	vmov	r3, s15
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	3714      	adds	r7, #20
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr

08000f96 <PID_CONTROLLER_Init>:

void PID_CONTROLLER_Init(PID_CONTROLLER *controller, float _Kp, float _Ki, float _Kd, float _u_max) {
 8000f96:	b480      	push	{r7}
 8000f98:	b087      	sub	sp, #28
 8000f9a:	af00      	add	r7, sp, #0
 8000f9c:	6178      	str	r0, [r7, #20]
 8000f9e:	ed87 0a04 	vstr	s0, [r7, #16]
 8000fa2:	edc7 0a03 	vstr	s1, [r7, #12]
 8000fa6:	ed87 1a02 	vstr	s2, [r7, #8]
 8000faa:	edc7 1a01 	vstr	s3, [r7, #4]
  controller->Kp = _Kp;
 8000fae:	697b      	ldr	r3, [r7, #20]
 8000fb0:	693a      	ldr	r2, [r7, #16]
 8000fb2:	601a      	str	r2, [r3, #0]
  controller->Ki = _Ki;
 8000fb4:	697b      	ldr	r3, [r7, #20]
 8000fb6:	68fa      	ldr	r2, [r7, #12]
 8000fb8:	605a      	str	r2, [r3, #4]
  controller->Kd = _Kd;
 8000fba:	697b      	ldr	r3, [r7, #20]
 8000fbc:	68ba      	ldr	r2, [r7, #8]
 8000fbe:	609a      	str	r2, [r3, #8]
  controller->u_max = _u_max;
 8000fc0:	697b      	ldr	r3, [r7, #20]
 8000fc2:	687a      	ldr	r2, [r7, #4]
 8000fc4:	60da      	str	r2, [r3, #12]
  controller->ek_1 = 0;
 8000fc6:	697b      	ldr	r3, [r7, #20]
 8000fc8:	f04f 0200 	mov.w	r2, #0
 8000fcc:	611a      	str	r2, [r3, #16]
  controller->ek_2 = 0;
 8000fce:	697b      	ldr	r3, [r7, #20]
 8000fd0:	f04f 0200 	mov.w	r2, #0
 8000fd4:	615a      	str	r2, [r3, #20]
  controller->u = 0;
 8000fd6:	697b      	ldr	r3, [r7, #20]
 8000fd8:	f04f 0200 	mov.w	r2, #0
 8000fdc:	619a      	str	r2, [r3, #24]

}
 8000fde:	bf00      	nop
 8000fe0:	371c      	adds	r7, #28
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr

08000fea <PID_CONTROLLER_Compute>:

float PID_CONTROLLER_Compute(PID_CONTROLLER *controller, float ek) {
 8000fea:	b480      	push	{r7}
 8000fec:	b083      	sub	sp, #12
 8000fee:	af00      	add	r7, sp, #0
 8000ff0:	6078      	str	r0, [r7, #4]
 8000ff2:	ed87 0a00 	vstr	s0, [r7]
    if (!((controller->u >= controller->u_max && ek > 0) || (controller->u <= -controller->u_max && ek < 0))) {
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	ed93 7a06 	vldr	s14, [r3, #24]
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	edd3 7a03 	vldr	s15, [r3, #12]
 8001002:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001006:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800100a:	bfac      	ite	ge
 800100c:	2301      	movge	r3, #1
 800100e:	2300      	movlt	r3, #0
 8001010:	b2db      	uxtb	r3, r3
 8001012:	f083 0301 	eor.w	r3, r3, #1
 8001016:	b2db      	uxtb	r3, r3
 8001018:	2b00      	cmp	r3, #0
 800101a:	d10e      	bne.n	800103a <PID_CONTROLLER_Compute+0x50>
 800101c:	edd7 7a00 	vldr	s15, [r7]
 8001020:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001024:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001028:	bfcc      	ite	gt
 800102a:	2301      	movgt	r3, #1
 800102c:	2300      	movle	r3, #0
 800102e:	b2db      	uxtb	r3, r3
 8001030:	f083 0301 	eor.w	r3, r3, #1
 8001034:	b2db      	uxtb	r3, r3
 8001036:	2b00      	cmp	r3, #0
 8001038:	d057      	beq.n	80010ea <PID_CONTROLLER_Compute+0x100>
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	ed93 7a06 	vldr	s14, [r3, #24]
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	edd3 7a03 	vldr	s15, [r3, #12]
 8001046:	eef1 7a67 	vneg.f32	s15, s15
 800104a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800104e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001052:	bf94      	ite	ls
 8001054:	2301      	movls	r3, #1
 8001056:	2300      	movhi	r3, #0
 8001058:	b2db      	uxtb	r3, r3
 800105a:	f083 0301 	eor.w	r3, r3, #1
 800105e:	b2db      	uxtb	r3, r3
 8001060:	2b00      	cmp	r3, #0
 8001062:	d10e      	bne.n	8001082 <PID_CONTROLLER_Compute+0x98>
 8001064:	edd7 7a00 	vldr	s15, [r7]
 8001068:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800106c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001070:	bf4c      	ite	mi
 8001072:	2301      	movmi	r3, #1
 8001074:	2300      	movpl	r3, #0
 8001076:	b2db      	uxtb	r3, r3
 8001078:	f083 0301 	eor.w	r3, r3, #1
 800107c:	b2db      	uxtb	r3, r3
 800107e:	2b00      	cmp	r3, #0
 8001080:	d033      	beq.n	80010ea <PID_CONTROLLER_Compute+0x100>
        controller->u += ((controller->Kp + controller->Ki + controller->Kd) * ek)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	ed93 7a06 	vldr	s14, [r3, #24]
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	edd3 6a00 	vldr	s13, [r3]
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	edd3 7a01 	vldr	s15, [r3, #4]
 8001094:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	edd3 7a02 	vldr	s15, [r3, #8]
 800109e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80010a2:	edd7 7a00 	vldr	s15, [r7]
 80010a6:	ee66 6aa7 	vmul.f32	s13, s13, s15
                         - ((controller->Kp + (2 * controller->Kd)) * controller->ek_1)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	ed93 6a00 	vldr	s12, [r3]
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	edd3 7a02 	vldr	s15, [r3, #8]
 80010b6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80010ba:	ee36 6a27 	vadd.f32	s12, s12, s15
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	edd3 7a04 	vldr	s15, [r3, #16]
 80010c4:	ee66 7a27 	vmul.f32	s15, s12, s15
 80010c8:	ee76 6ae7 	vsub.f32	s13, s13, s15
                         + (controller->Kd * controller->ek_2);
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	ed93 6a02 	vldr	s12, [r3, #8]
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	edd3 7a05 	vldr	s15, [r3, #20]
 80010d8:	ee66 7a27 	vmul.f32	s15, s12, s15
 80010dc:	ee76 7aa7 	vadd.f32	s15, s13, s15
        controller->u += ((controller->Kp + controller->Ki + controller->Kd) * ek)
 80010e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	edc3 7a06 	vstr	s15, [r3, #24]
    }
    controller->ek_2 = controller->ek_1;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	691a      	ldr	r2, [r3, #16]
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	615a      	str	r2, [r3, #20]
    controller->ek_1 = ek;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	683a      	ldr	r2, [r7, #0]
 80010f6:	611a      	str	r2, [r3, #16]
    return controller->u;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	699b      	ldr	r3, [r3, #24]
 80010fc:	ee07 3a90 	vmov	s15, r3
}
 8001100:	eeb0 0a67 	vmov.f32	s0, s15
 8001104:	370c      	adds	r7, #12
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr

0800110e <MDXX_GPIO_init>:
	PWM_init(&(mdxx->pwm), htimp, timp_chx);
	mdxx->mode = 0;
}

void MDXX_GPIO_init(MDXX *mdxx, TIM_HandleTypeDef *htimp, uint16_t timp_chx,
		GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 800110e:	b580      	push	{r7, lr}
 8001110:	b084      	sub	sp, #16
 8001112:	af00      	add	r7, sp, #0
 8001114:	60f8      	str	r0, [r7, #12]
 8001116:	60b9      	str	r1, [r7, #8]
 8001118:	603b      	str	r3, [r7, #0]
 800111a:	4613      	mov	r3, r2
 800111c:	80fb      	strh	r3, [r7, #6]
	mdxx->htimp = htimp;
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	68ba      	ldr	r2, [r7, #8]
 8001122:	609a      	str	r2, [r3, #8]
	mdxx->timp_chx = timp_chx;
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	88fa      	ldrh	r2, [r7, #6]
 8001128:	819a      	strh	r2, [r3, #12]
	PWM_init(&(mdxx->pwm), htimp, timp_chx);
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	3328      	adds	r3, #40	@ 0x28
 800112e:	88fa      	ldrh	r2, [r7, #6]
 8001130:	68b9      	ldr	r1, [r7, #8]
 8001132:	4618      	mov	r0, r3
 8001134:	f000 fa64 	bl	8001600 <PWM_init>
	mdxx->GPIOx = GPIOx;
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	683a      	ldr	r2, [r7, #0]
 800113c:	645a      	str	r2, [r3, #68]	@ 0x44
	mdxx->GPIO_Pin = GPIO_Pin;
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	8b3a      	ldrh	r2, [r7, #24]
 8001142:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
	mdxx->mode = 1;
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	2201      	movs	r2, #1
 800114a:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
}
 800114e:	bf00      	nop
 8001150:	3710      	adds	r7, #16
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
	...

08001158 <MDXX_set_range>:
			mdxx->cmd = fabs(duty);
		}
	}
}

void MDXX_set_range(MDXX *mdxx, float freq, float duty) {
 8001158:	b580      	push	{r7, lr}
 800115a:	b084      	sub	sp, #16
 800115c:	af00      	add	r7, sp, #0
 800115e:	60f8      	str	r0, [r7, #12]
 8001160:	ed87 0a02 	vstr	s0, [r7, #8]
 8001164:	edc7 0a01 	vstr	s1, [r7, #4]
	if (mdxx->mode == 0) {
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 800116e:	2b00      	cmp	r3, #0
 8001170:	d15f      	bne.n	8001232 <MDXX_set_range+0xda>
		if (duty == 0) {
 8001172:	edd7 7a01 	vldr	s15, [r7, #4]
 8001176:	eef5 7a40 	vcmp.f32	s15, #0.0
 800117a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800117e:	d115      	bne.n	80011ac <MDXX_set_range+0x54>
			PWM_write_range(&(mdxx->dir), freq, 0);
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	3310      	adds	r3, #16
 8001184:	eddf 0a5f 	vldr	s1, [pc, #380]	@ 8001304 <MDXX_set_range+0x1ac>
 8001188:	ed97 0a02 	vldr	s0, [r7, #8]
 800118c:	4618      	mov	r0, r3
 800118e:	f000 fa5b 	bl	8001648 <PWM_write_range>
			PWM_write_range(&(mdxx->pwm), freq, 0);
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	3328      	adds	r3, #40	@ 0x28
 8001196:	eddf 0a5b 	vldr	s1, [pc, #364]	@ 8001304 <MDXX_set_range+0x1ac>
 800119a:	ed97 0a02 	vldr	s0, [r7, #8]
 800119e:	4618      	mov	r0, r3
 80011a0:	f000 fa52 	bl	8001648 <PWM_write_range>
			mdxx->cmd = 0;
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	2200      	movs	r2, #0
 80011a8:	641a      	str	r2, [r3, #64]	@ 0x40
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 1);
			PWM_write_range(&(mdxx->pwm), freq, fabs(duty));
			mdxx->cmd = fabs(duty);
		}
	}
}
 80011aa:	e0a6      	b.n	80012fa <MDXX_set_range+0x1a2>
		} else if (duty > 0) {
 80011ac:	edd7 7a01 	vldr	s15, [r7, #4]
 80011b0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80011b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011b8:	dd1a      	ble.n	80011f0 <MDXX_set_range+0x98>
			PWM_write_range(&(mdxx->dir), freq, 0);
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	3310      	adds	r3, #16
 80011be:	eddf 0a51 	vldr	s1, [pc, #324]	@ 8001304 <MDXX_set_range+0x1ac>
 80011c2:	ed97 0a02 	vldr	s0, [r7, #8]
 80011c6:	4618      	mov	r0, r3
 80011c8:	f000 fa3e 	bl	8001648 <PWM_write_range>
			PWM_write_range(&(mdxx->pwm), freq, duty);
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	3328      	adds	r3, #40	@ 0x28
 80011d0:	edd7 0a01 	vldr	s1, [r7, #4]
 80011d4:	ed97 0a02 	vldr	s0, [r7, #8]
 80011d8:	4618      	mov	r0, r3
 80011da:	f000 fa35 	bl	8001648 <PWM_write_range>
			mdxx->cmd = duty;
 80011de:	edd7 7a01 	vldr	s15, [r7, #4]
 80011e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011e6:	ee17 2a90 	vmov	r2, s15
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80011ee:	e084      	b.n	80012fa <MDXX_set_range+0x1a2>
			PWM_write_range(&(mdxx->dir), freq, 100);
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	3310      	adds	r3, #16
 80011f4:	eddf 0a44 	vldr	s1, [pc, #272]	@ 8001308 <MDXX_set_range+0x1b0>
 80011f8:	ed97 0a02 	vldr	s0, [r7, #8]
 80011fc:	4618      	mov	r0, r3
 80011fe:	f000 fa23 	bl	8001648 <PWM_write_range>
			PWM_write_range(&(mdxx->pwm), freq, fabs(duty));
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	3328      	adds	r3, #40	@ 0x28
 8001206:	edd7 7a01 	vldr	s15, [r7, #4]
 800120a:	eef0 7ae7 	vabs.f32	s15, s15
 800120e:	eef0 0a67 	vmov.f32	s1, s15
 8001212:	ed97 0a02 	vldr	s0, [r7, #8]
 8001216:	4618      	mov	r0, r3
 8001218:	f000 fa16 	bl	8001648 <PWM_write_range>
			mdxx->cmd = fabs(duty);
 800121c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001220:	eef0 7ae7 	vabs.f32	s15, s15
 8001224:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001228:	ee17 2a90 	vmov	r2, s15
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001230:	e063      	b.n	80012fa <MDXX_set_range+0x1a2>
	} else if (mdxx->mode == 1) {
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 8001238:	2b01      	cmp	r3, #1
 800123a:	d15e      	bne.n	80012fa <MDXX_set_range+0x1a2>
		if (duty == 0) {
 800123c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001240:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001244:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001248:	d115      	bne.n	8001276 <MDXX_set_range+0x11e>
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 0);
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8001254:	2200      	movs	r2, #0
 8001256:	4619      	mov	r1, r3
 8001258:	f003 fe34 	bl	8004ec4 <HAL_GPIO_WritePin>
			PWM_write_range(&(mdxx->pwm), freq, 0);
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	3328      	adds	r3, #40	@ 0x28
 8001260:	eddf 0a28 	vldr	s1, [pc, #160]	@ 8001304 <MDXX_set_range+0x1ac>
 8001264:	ed97 0a02 	vldr	s0, [r7, #8]
 8001268:	4618      	mov	r0, r3
 800126a:	f000 f9ed 	bl	8001648 <PWM_write_range>
			mdxx->cmd = 0;
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	2200      	movs	r2, #0
 8001272:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001274:	e041      	b.n	80012fa <MDXX_set_range+0x1a2>
		} else if (duty > 0) {
 8001276:	edd7 7a01 	vldr	s15, [r7, #4]
 800127a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800127e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001282:	dd1a      	ble.n	80012ba <MDXX_set_range+0x162>
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 0);
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800128e:	2200      	movs	r2, #0
 8001290:	4619      	mov	r1, r3
 8001292:	f003 fe17 	bl	8004ec4 <HAL_GPIO_WritePin>
			PWM_write_range(&(mdxx->pwm), freq, duty);
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	3328      	adds	r3, #40	@ 0x28
 800129a:	edd7 0a01 	vldr	s1, [r7, #4]
 800129e:	ed97 0a02 	vldr	s0, [r7, #8]
 80012a2:	4618      	mov	r0, r3
 80012a4:	f000 f9d0 	bl	8001648 <PWM_write_range>
			mdxx->cmd = duty;
 80012a8:	edd7 7a01 	vldr	s15, [r7, #4]
 80012ac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012b0:	ee17 2a90 	vmov	r2, s15
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80012b8:	e01f      	b.n	80012fa <MDXX_set_range+0x1a2>
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 1);
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80012c4:	2201      	movs	r2, #1
 80012c6:	4619      	mov	r1, r3
 80012c8:	f003 fdfc 	bl	8004ec4 <HAL_GPIO_WritePin>
			PWM_write_range(&(mdxx->pwm), freq, fabs(duty));
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	3328      	adds	r3, #40	@ 0x28
 80012d0:	edd7 7a01 	vldr	s15, [r7, #4]
 80012d4:	eef0 7ae7 	vabs.f32	s15, s15
 80012d8:	eef0 0a67 	vmov.f32	s1, s15
 80012dc:	ed97 0a02 	vldr	s0, [r7, #8]
 80012e0:	4618      	mov	r0, r3
 80012e2:	f000 f9b1 	bl	8001648 <PWM_write_range>
			mdxx->cmd = fabs(duty);
 80012e6:	edd7 7a01 	vldr	s15, [r7, #4]
 80012ea:	eef0 7ae7 	vabs.f32	s15, s15
 80012ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012f2:	ee17 2a90 	vmov	r2, s15
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80012fa:	bf00      	nop
 80012fc:	3710      	adds	r7, #16
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	00000000 	.word	0x00000000
 8001308:	42c80000 	.word	0x42c80000

0800130c <FIR_init>:
 *      Author: transporter
 */
#include "FIR.h"
#include "arm_math.h"

void FIR_init(FIR *fir, uint16_t numTaps, float cutoffFreq, float samplingFreq) {
 800130c:	b580      	push	{r7, lr}
 800130e:	ed2d 8b02 	vpush	{d8}
 8001312:	b08a      	sub	sp, #40	@ 0x28
 8001314:	af00      	add	r7, sp, #0
 8001316:	60f8      	str	r0, [r7, #12]
 8001318:	460b      	mov	r3, r1
 800131a:	ed87 0a01 	vstr	s0, [r7, #4]
 800131e:	edc7 0a00 	vstr	s1, [r7]
 8001322:	817b      	strh	r3, [r7, #10]
    // Make sure numTaps is odd
    if (numTaps % 2 == 0) {
 8001324:	897b      	ldrh	r3, [r7, #10]
 8001326:	f003 0301 	and.w	r3, r3, #1
 800132a:	b29b      	uxth	r3, r3
 800132c:	2b00      	cmp	r3, #0
 800132e:	d102      	bne.n	8001336 <FIR_init+0x2a>
        numTaps += 1;
 8001330:	897b      	ldrh	r3, [r7, #10]
 8001332:	3301      	adds	r3, #1
 8001334:	817b      	strh	r3, [r7, #10]
    }

    fir->numTaps = numTaps;
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	897a      	ldrh	r2, [r7, #10]
 800133a:	811a      	strh	r2, [r3, #8]
    fir->bufferIndex = 0;
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	2200      	movs	r2, #0
 8001340:	815a      	strh	r2, [r3, #10]

    // Allocate memory for coefficients and buffer
    fir->coeffs = (float*)malloc(numTaps * sizeof(float));
 8001342:	897b      	ldrh	r3, [r7, #10]
 8001344:	009b      	lsls	r3, r3, #2
 8001346:	4618      	mov	r0, r3
 8001348:	f018 ff8e 	bl	801a268 <malloc>
 800134c:	4603      	mov	r3, r0
 800134e:	461a      	mov	r2, r3
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	601a      	str	r2, [r3, #0]
    fir->buffer = (float*)malloc(numTaps * sizeof(float));
 8001354:	897b      	ldrh	r3, [r7, #10]
 8001356:	009b      	lsls	r3, r3, #2
 8001358:	4618      	mov	r0, r3
 800135a:	f018 ff85 	bl	801a268 <malloc>
 800135e:	4603      	mov	r3, r0
 8001360:	461a      	mov	r2, r3
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	605a      	str	r2, [r3, #4]

    if (fir->coeffs != NULL && fir->buffer != NULL) {
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	2b00      	cmp	r3, #0
 800136c:	f000 80e0 	beq.w	8001530 <FIR_init+0x224>
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	2b00      	cmp	r3, #0
 8001376:	f000 80db 	beq.w	8001530 <FIR_init+0x224>
        // Clear buffer
        for (uint16_t i = 0; i < numTaps; i++) {
 800137a:	2300      	movs	r3, #0
 800137c:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800137e:	e00a      	b.n	8001396 <FIR_init+0x8a>
            fir->buffer[i] = 0.0f;
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	685a      	ldr	r2, [r3, #4]
 8001384:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001386:	009b      	lsls	r3, r3, #2
 8001388:	4413      	add	r3, r2
 800138a:	f04f 0200 	mov.w	r2, #0
 800138e:	601a      	str	r2, [r3, #0]
        for (uint16_t i = 0; i < numTaps; i++) {
 8001390:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001392:	3301      	adds	r3, #1
 8001394:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8001396:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8001398:	897b      	ldrh	r3, [r7, #10]
 800139a:	429a      	cmp	r2, r3
 800139c:	d3f0      	bcc.n	8001380 <FIR_init+0x74>
        }

        // Calculate normalized cutoff frequency (0 to 0.5)
        float omega = cutoffFreq / samplingFreq;
 800139e:	edd7 6a01 	vldr	s13, [r7, #4]
 80013a2:	ed97 7a00 	vldr	s14, [r7]
 80013a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013aa:	edc7 7a06 	vstr	s15, [r7, #24]

        // Calculate filter coefficients (low-pass)
        int16_t half_taps = numTaps / 2;
 80013ae:	897b      	ldrh	r3, [r7, #10]
 80013b0:	085b      	lsrs	r3, r3, #1
 80013b2:	b29b      	uxth	r3, r3
 80013b4:	82fb      	strh	r3, [r7, #22]
        for (int16_t i = 0; i < numTaps; i++) {
 80013b6:	2300      	movs	r3, #0
 80013b8:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80013ba:	e077      	b.n	80014ac <FIR_init+0x1a0>
            if (i == half_taps) {
 80013bc:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 80013c0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80013c4:	429a      	cmp	r2, r3
 80013c6:	d10c      	bne.n	80013e2 <FIR_init+0xd6>
                // Center tap
                fir->coeffs[i] = 2.0f * omega;
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	681a      	ldr	r2, [r3, #0]
 80013cc:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 80013d0:	009b      	lsls	r3, r3, #2
 80013d2:	4413      	add	r3, r2
 80013d4:	edd7 7a06 	vldr	s15, [r7, #24]
 80013d8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80013dc:	edc3 7a00 	vstr	s15, [r3]
 80013e0:	e02c      	b.n	800143c <FIR_init+0x130>
            } else {
                // Side taps
                int16_t n = i - half_taps;
 80013e2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80013e4:	8afb      	ldrh	r3, [r7, #22]
 80013e6:	1ad3      	subs	r3, r2, r3
 80013e8:	b29b      	uxth	r3, r3
 80013ea:	82bb      	strh	r3, [r7, #20]
                fir->coeffs[i] = sinf(2.0f * PI * omega * n) / (PI * n);
 80013ec:	edd7 7a06 	vldr	s15, [r7, #24]
 80013f0:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 800153c <FIR_init+0x230>
 80013f4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80013f8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80013fc:	ee07 3a90 	vmov	s15, r3
 8001400:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001404:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001408:	eeb0 0a67 	vmov.f32	s0, s15
 800140c:	f01a fb6a 	bl	801bae4 <sinf>
 8001410:	eef0 6a40 	vmov.f32	s13, s0
 8001414:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001418:	ee07 3a90 	vmov	s15, r3
 800141c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001420:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 8001540 <FIR_init+0x234>
 8001424:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	681a      	ldr	r2, [r3, #0]
 800142c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001430:	009b      	lsls	r3, r3, #2
 8001432:	4413      	add	r3, r2
 8001434:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001438:	edc3 7a00 	vstr	s15, [r3]
            }

            // Apply Hamming window
            fir->coeffs[i] *= (0.54f - 0.46f * cosf(2.0f * PI * i / (numTaps - 1)));
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	681a      	ldr	r2, [r3, #0]
 8001440:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001444:	009b      	lsls	r3, r3, #2
 8001446:	4413      	add	r3, r2
 8001448:	ed93 8a00 	vldr	s16, [r3]
 800144c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001450:	ee07 3a90 	vmov	s15, r3
 8001454:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001458:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 800153c <FIR_init+0x230>
 800145c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001460:	897b      	ldrh	r3, [r7, #10]
 8001462:	3b01      	subs	r3, #1
 8001464:	ee07 3a90 	vmov	s15, r3
 8001468:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800146c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001470:	eeb0 0a66 	vmov.f32	s0, s13
 8001474:	f01a faf2 	bl	801ba5c <cosf>
 8001478:	eef0 7a40 	vmov.f32	s15, s0
 800147c:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8001544 <FIR_init+0x238>
 8001480:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001484:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8001548 <FIR_init+0x23c>
 8001488:	ee77 7a67 	vsub.f32	s15, s14, s15
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	681a      	ldr	r2, [r3, #0]
 8001490:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001494:	009b      	lsls	r3, r3, #2
 8001496:	4413      	add	r3, r2
 8001498:	ee68 7a27 	vmul.f32	s15, s16, s15
 800149c:	edc3 7a00 	vstr	s15, [r3]
        for (int16_t i = 0; i < numTaps; i++) {
 80014a0:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 80014a4:	b29b      	uxth	r3, r3
 80014a6:	3301      	adds	r3, #1
 80014a8:	b29b      	uxth	r3, r3
 80014aa:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80014ac:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 80014b0:	897b      	ldrh	r3, [r7, #10]
 80014b2:	429a      	cmp	r2, r3
 80014b4:	db82      	blt.n	80013bc <FIR_init+0xb0>
        }

        // Normalize gain
        float sum = 0.0f;
 80014b6:	f04f 0300 	mov.w	r3, #0
 80014ba:	623b      	str	r3, [r7, #32]
        for (uint16_t i = 0; i < numTaps; i++) {
 80014bc:	2300      	movs	r3, #0
 80014be:	83fb      	strh	r3, [r7, #30]
 80014c0:	e00f      	b.n	80014e2 <FIR_init+0x1d6>
            sum += fir->coeffs[i];
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	681a      	ldr	r2, [r3, #0]
 80014c6:	8bfb      	ldrh	r3, [r7, #30]
 80014c8:	009b      	lsls	r3, r3, #2
 80014ca:	4413      	add	r3, r2
 80014cc:	edd3 7a00 	vldr	s15, [r3]
 80014d0:	ed97 7a08 	vldr	s14, [r7, #32]
 80014d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014d8:	edc7 7a08 	vstr	s15, [r7, #32]
        for (uint16_t i = 0; i < numTaps; i++) {
 80014dc:	8bfb      	ldrh	r3, [r7, #30]
 80014de:	3301      	adds	r3, #1
 80014e0:	83fb      	strh	r3, [r7, #30]
 80014e2:	8bfa      	ldrh	r2, [r7, #30]
 80014e4:	897b      	ldrh	r3, [r7, #10]
 80014e6:	429a      	cmp	r2, r3
 80014e8:	d3eb      	bcc.n	80014c2 <FIR_init+0x1b6>
        }

        if (sum != 0.0f) {
 80014ea:	edd7 7a08 	vldr	s15, [r7, #32]
 80014ee:	eef5 7a40 	vcmp.f32	s15, #0.0
 80014f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014f6:	d01b      	beq.n	8001530 <FIR_init+0x224>
            for (uint16_t i = 0; i < numTaps; i++) {
 80014f8:	2300      	movs	r3, #0
 80014fa:	83bb      	strh	r3, [r7, #28]
 80014fc:	e014      	b.n	8001528 <FIR_init+0x21c>
                fir->coeffs[i] /= sum;
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	681a      	ldr	r2, [r3, #0]
 8001502:	8bbb      	ldrh	r3, [r7, #28]
 8001504:	009b      	lsls	r3, r3, #2
 8001506:	4413      	add	r3, r2
 8001508:	edd3 6a00 	vldr	s13, [r3]
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	681a      	ldr	r2, [r3, #0]
 8001510:	8bbb      	ldrh	r3, [r7, #28]
 8001512:	009b      	lsls	r3, r3, #2
 8001514:	4413      	add	r3, r2
 8001516:	ed97 7a08 	vldr	s14, [r7, #32]
 800151a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800151e:	edc3 7a00 	vstr	s15, [r3]
            for (uint16_t i = 0; i < numTaps; i++) {
 8001522:	8bbb      	ldrh	r3, [r7, #28]
 8001524:	3301      	adds	r3, #1
 8001526:	83bb      	strh	r3, [r7, #28]
 8001528:	8bba      	ldrh	r2, [r7, #28]
 800152a:	897b      	ldrh	r3, [r7, #10]
 800152c:	429a      	cmp	r2, r3
 800152e:	d3e6      	bcc.n	80014fe <FIR_init+0x1f2>
            }
        }
    }
}
 8001530:	bf00      	nop
 8001532:	3728      	adds	r7, #40	@ 0x28
 8001534:	46bd      	mov	sp, r7
 8001536:	ecbd 8b02 	vpop	{d8}
 800153a:	bd80      	pop	{r7, pc}
 800153c:	40c90fdb 	.word	0x40c90fdb
 8001540:	40490fdb 	.word	0x40490fdb
 8001544:	3eeb851f 	.word	0x3eeb851f
 8001548:	3f0a3d71 	.word	0x3f0a3d71

0800154c <FIR_process>:

float FIR_process(FIR *fir, float input) {
 800154c:	b480      	push	{r7}
 800154e:	b085      	sub	sp, #20
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
 8001554:	ed87 0a00 	vstr	s0, [r7]
    // Update circular buffer with new input
    fir->buffer[fir->bufferIndex] = input;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	685a      	ldr	r2, [r3, #4]
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	895b      	ldrh	r3, [r3, #10]
 8001560:	009b      	lsls	r3, r3, #2
 8001562:	4413      	add	r3, r2
 8001564:	683a      	ldr	r2, [r7, #0]
 8001566:	601a      	str	r2, [r3, #0]

    // Compute output (convolution)
    float output = 0.0f;
 8001568:	f04f 0300 	mov.w	r3, #0
 800156c:	60fb      	str	r3, [r7, #12]
    uint16_t index = fir->bufferIndex;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	895b      	ldrh	r3, [r3, #10]
 8001572:	817b      	strh	r3, [r7, #10]

    for (uint16_t i = 0; i < fir->numTaps; i++) {
 8001574:	2300      	movs	r3, #0
 8001576:	813b      	strh	r3, [r7, #8]
 8001578:	e023      	b.n	80015c2 <FIR_process+0x76>
        output += fir->buffer[index] * fir->coeffs[i];
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	685a      	ldr	r2, [r3, #4]
 800157e:	897b      	ldrh	r3, [r7, #10]
 8001580:	009b      	lsls	r3, r3, #2
 8001582:	4413      	add	r3, r2
 8001584:	ed93 7a00 	vldr	s14, [r3]
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681a      	ldr	r2, [r3, #0]
 800158c:	893b      	ldrh	r3, [r7, #8]
 800158e:	009b      	lsls	r3, r3, #2
 8001590:	4413      	add	r3, r2
 8001592:	edd3 7a00 	vldr	s15, [r3]
 8001596:	ee67 7a27 	vmul.f32	s15, s14, s15
 800159a:	ed97 7a03 	vldr	s14, [r7, #12]
 800159e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015a2:	edc7 7a03 	vstr	s15, [r7, #12]

        // Move back in circular buffer
        if (index == 0) {
 80015a6:	897b      	ldrh	r3, [r7, #10]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d104      	bne.n	80015b6 <FIR_process+0x6a>
            index = fir->numTaps - 1;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	891b      	ldrh	r3, [r3, #8]
 80015b0:	3b01      	subs	r3, #1
 80015b2:	817b      	strh	r3, [r7, #10]
 80015b4:	e002      	b.n	80015bc <FIR_process+0x70>
        } else {
            index--;
 80015b6:	897b      	ldrh	r3, [r7, #10]
 80015b8:	3b01      	subs	r3, #1
 80015ba:	817b      	strh	r3, [r7, #10]
    for (uint16_t i = 0; i < fir->numTaps; i++) {
 80015bc:	893b      	ldrh	r3, [r7, #8]
 80015be:	3301      	adds	r3, #1
 80015c0:	813b      	strh	r3, [r7, #8]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	891b      	ldrh	r3, [r3, #8]
 80015c6:	893a      	ldrh	r2, [r7, #8]
 80015c8:	429a      	cmp	r2, r3
 80015ca:	d3d6      	bcc.n	800157a <FIR_process+0x2e>
        }
    }

    // Update buffer index for next input
    fir->bufferIndex++;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	895b      	ldrh	r3, [r3, #10]
 80015d0:	3301      	adds	r3, #1
 80015d2:	b29a      	uxth	r2, r3
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	815a      	strh	r2, [r3, #10]
    if (fir->bufferIndex >= fir->numTaps) {
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	895a      	ldrh	r2, [r3, #10]
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	891b      	ldrh	r3, [r3, #8]
 80015e0:	429a      	cmp	r2, r3
 80015e2:	d302      	bcc.n	80015ea <FIR_process+0x9e>
        fir->bufferIndex = 0;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2200      	movs	r2, #0
 80015e8:	815a      	strh	r2, [r3, #10]
    }

    return output;
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	ee07 3a90 	vmov	s15, r3
}
 80015f0:	eeb0 0a67 	vmov.f32	s0, s15
 80015f4:	3714      	adds	r7, #20
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr
	...

08001600 <PWM_init>:
 *      Author: beamk
 */

#include "PWM.h"

void PWM_init(PWM* pwm, TIM_HandleTypeDef* htimx, uint16_t tim_chx){
 8001600:	b580      	push	{r7, lr}
 8001602:	b084      	sub	sp, #16
 8001604:	af00      	add	r7, sp, #0
 8001606:	60f8      	str	r0, [r7, #12]
 8001608:	60b9      	str	r1, [r7, #8]
 800160a:	4613      	mov	r3, r2
 800160c:	80fb      	strh	r3, [r7, #6]
	pwm->CPU_FREQ = 170e6;
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	4a0b      	ldr	r2, [pc, #44]	@ (8001640 <PWM_init+0x40>)
 8001612:	611a      	str	r2, [r3, #16]
	pwm->htimx = htimx;
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	68ba      	ldr	r2, [r7, #8]
 8001618:	601a      	str	r2, [r3, #0]
	pwm->tim_chx = tim_chx;
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	88fa      	ldrh	r2, [r7, #6]
 800161e:	809a      	strh	r2, [r3, #4]
	pwm->OC = 0;
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	2200      	movs	r2, #0
 8001624:	615a      	str	r2, [r3, #20]
	HAL_TIM_Base_Start(htimx);
 8001626:	68b8      	ldr	r0, [r7, #8]
 8001628:	f004 fdaa 	bl	8006180 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(htimx, tim_chx);
 800162c:	88fb      	ldrh	r3, [r7, #6]
 800162e:	4619      	mov	r1, r3
 8001630:	68b8      	ldr	r0, [r7, #8]
 8001632:	f004 fee5 	bl	8006400 <HAL_TIM_PWM_Start>
}
 8001636:	bf00      	nop
 8001638:	3710      	adds	r7, #16
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	0a21fe80 	.word	0x0a21fe80
 8001644:	00000000 	.word	0x00000000

08001648 <PWM_write_range>:
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
    }
}

void PWM_write_range(PWM* pwm, float freq, float duty){
 8001648:	b5b0      	push	{r4, r5, r7, lr}
 800164a:	b084      	sub	sp, #16
 800164c:	af00      	add	r7, sp, #0
 800164e:	60f8      	str	r0, [r7, #12]
 8001650:	ed87 0a02 	vstr	s0, [r7, #8]
 8001654:	edc7 0a01 	vstr	s1, [r7, #4]
    if (freq == 0) {
 8001658:	edd7 7a02 	vldr	s15, [r7, #8]
 800165c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001660:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001664:	d137      	bne.n	80016d6 <PWM_write_range+0x8e>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, 0);
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	889b      	ldrh	r3, [r3, #4]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d105      	bne.n	800167a <PWM_write_range+0x32>
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	2200      	movs	r2, #0
 8001676:	635a      	str	r2, [r3, #52]	@ 0x34
    	pwm->OC = (uint16_t) (pwm->overflow * fabs(duty) / 65535.0);
        __HAL_TIM_SET_PRESCALER(pwm->htimx, pwm->prescaler);
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
    }
}
 8001678:	e0e1      	b.n	800183e <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, 0);
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	889b      	ldrh	r3, [r3, #4]
 800167e:	2b04      	cmp	r3, #4
 8001680:	d105      	bne.n	800168e <PWM_write_range+0x46>
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	681a      	ldr	r2, [r3, #0]
 8001688:	2300      	movs	r3, #0
 800168a:	6393      	str	r3, [r2, #56]	@ 0x38
 800168c:	e0d7      	b.n	800183e <PWM_write_range+0x1f6>
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	889b      	ldrh	r3, [r3, #4]
 8001692:	2b08      	cmp	r3, #8
 8001694:	d105      	bne.n	80016a2 <PWM_write_range+0x5a>
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	681a      	ldr	r2, [r3, #0]
 800169c:	2300      	movs	r3, #0
 800169e:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80016a0:	e0cd      	b.n	800183e <PWM_write_range+0x1f6>
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	889b      	ldrh	r3, [r3, #4]
 80016a6:	2b0c      	cmp	r3, #12
 80016a8:	d105      	bne.n	80016b6 <PWM_write_range+0x6e>
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	681a      	ldr	r2, [r3, #0]
 80016b0:	2300      	movs	r3, #0
 80016b2:	6413      	str	r3, [r2, #64]	@ 0x40
 80016b4:	e0c3      	b.n	800183e <PWM_write_range+0x1f6>
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	889b      	ldrh	r3, [r3, #4]
 80016ba:	2b10      	cmp	r3, #16
 80016bc:	d105      	bne.n	80016ca <PWM_write_range+0x82>
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	681a      	ldr	r2, [r3, #0]
 80016c4:	2300      	movs	r3, #0
 80016c6:	6493      	str	r3, [r2, #72]	@ 0x48
 80016c8:	e0b9      	b.n	800183e <PWM_write_range+0x1f6>
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	681a      	ldr	r2, [r3, #0]
 80016d0:	2300      	movs	r3, #0
 80016d2:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80016d4:	e0b3      	b.n	800183e <PWM_write_range+0x1f6>
    	pwm->period_cyc = (uint32_t) (pwm->CPU_FREQ / freq);
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	691b      	ldr	r3, [r3, #16]
 80016da:	ee07 3a90 	vmov	s15, r3
 80016de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80016e2:	ed97 7a02 	vldr	s14, [r7, #8]
 80016e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80016ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80016ee:	ee17 2a90 	vmov	r2, s15
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	609a      	str	r2, [r3, #8]
    	pwm->prescaler = (uint16_t) ((pwm->period_cyc + 65535 - 1) / 65535) - 1; // Subtracting 1 since prescaler is zero-based
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	689b      	ldr	r3, [r3, #8]
 80016fa:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 80016fe:	33fe      	adds	r3, #254	@ 0xfe
 8001700:	4a53      	ldr	r2, [pc, #332]	@ (8001850 <PWM_write_range+0x208>)
 8001702:	fba2 2303 	umull	r2, r3, r2, r3
 8001706:	0bdb      	lsrs	r3, r3, #15
 8001708:	b29b      	uxth	r3, r3
 800170a:	3b01      	subs	r3, #1
 800170c:	b29a      	uxth	r2, r3
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	819a      	strh	r2, [r3, #12]
    	pwm->overflow = (uint16_t) ((pwm->CPU_FREQ / (float)(pwm->prescaler + 1) / freq) - 1);
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	691b      	ldr	r3, [r3, #16]
 8001716:	ee07 3a90 	vmov	s15, r3
 800171a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	899b      	ldrh	r3, [r3, #12]
 8001722:	3301      	adds	r3, #1
 8001724:	ee07 3a90 	vmov	s15, r3
 8001728:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800172c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001730:	ed97 7a02 	vldr	s14, [r7, #8]
 8001734:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001738:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800173c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001740:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001744:	ee17 3a90 	vmov	r3, s15
 8001748:	b29a      	uxth	r2, r3
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	81da      	strh	r2, [r3, #14]
    	pwm->OC = (uint16_t) (pwm->overflow * fabs(duty) / 65535.0);
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	89db      	ldrh	r3, [r3, #14]
 8001752:	4618      	mov	r0, r3
 8001754:	f7fe ff1e 	bl	8000594 <__aeabi_i2d>
 8001758:	4604      	mov	r4, r0
 800175a:	460d      	mov	r5, r1
 800175c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001760:	eef0 7ae7 	vabs.f32	s15, s15
 8001764:	ee17 0a90 	vmov	r0, s15
 8001768:	f7fe ff26 	bl	80005b8 <__aeabi_f2d>
 800176c:	4602      	mov	r2, r0
 800176e:	460b      	mov	r3, r1
 8001770:	4620      	mov	r0, r4
 8001772:	4629      	mov	r1, r5
 8001774:	f7fe ff78 	bl	8000668 <__aeabi_dmul>
 8001778:	4602      	mov	r2, r0
 800177a:	460b      	mov	r3, r1
 800177c:	4610      	mov	r0, r2
 800177e:	4619      	mov	r1, r3
 8001780:	a331      	add	r3, pc, #196	@ (adr r3, 8001848 <PWM_write_range+0x200>)
 8001782:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001786:	f7ff f899 	bl	80008bc <__aeabi_ddiv>
 800178a:	4602      	mov	r2, r0
 800178c:	460b      	mov	r3, r1
 800178e:	4610      	mov	r0, r2
 8001790:	4619      	mov	r1, r3
 8001792:	f7ff f97b 	bl	8000a8c <__aeabi_d2uiz>
 8001796:	4603      	mov	r3, r0
 8001798:	b29b      	uxth	r3, r3
 800179a:	461a      	mov	r2, r3
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	615a      	str	r2, [r3, #20]
        __HAL_TIM_SET_PRESCALER(pwm->htimx, pwm->prescaler);
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	899a      	ldrh	r2, [r3, #12]
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	629a      	str	r2, [r3, #40]	@ 0x28
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	89da      	ldrh	r2, [r3, #14]
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	62da      	str	r2, [r3, #44]	@ 0x2c
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	89da      	ldrh	r2, [r3, #14]
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	60da      	str	r2, [r3, #12]
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	889b      	ldrh	r3, [r3, #4]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d106      	bne.n	80017d8 <PWM_write_range+0x190>
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	68fa      	ldr	r2, [r7, #12]
 80017d2:	6952      	ldr	r2, [r2, #20]
 80017d4:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80017d6:	e032      	b.n	800183e <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	889b      	ldrh	r3, [r3, #4]
 80017dc:	2b04      	cmp	r3, #4
 80017de:	d106      	bne.n	80017ee <PWM_write_range+0x1a6>
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	681a      	ldr	r2, [r3, #0]
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	695b      	ldr	r3, [r3, #20]
 80017ea:	6393      	str	r3, [r2, #56]	@ 0x38
}
 80017ec:	e027      	b.n	800183e <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	889b      	ldrh	r3, [r3, #4]
 80017f2:	2b08      	cmp	r3, #8
 80017f4:	d106      	bne.n	8001804 <PWM_write_range+0x1bc>
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	681a      	ldr	r2, [r3, #0]
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	695b      	ldr	r3, [r3, #20]
 8001800:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8001802:	e01c      	b.n	800183e <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	889b      	ldrh	r3, [r3, #4]
 8001808:	2b0c      	cmp	r3, #12
 800180a:	d106      	bne.n	800181a <PWM_write_range+0x1d2>
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	681a      	ldr	r2, [r3, #0]
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	695b      	ldr	r3, [r3, #20]
 8001816:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8001818:	e011      	b.n	800183e <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	889b      	ldrh	r3, [r3, #4]
 800181e:	2b10      	cmp	r3, #16
 8001820:	d106      	bne.n	8001830 <PWM_write_range+0x1e8>
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	681a      	ldr	r2, [r3, #0]
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	695b      	ldr	r3, [r3, #20]
 800182c:	6493      	str	r3, [r2, #72]	@ 0x48
}
 800182e:	e006      	b.n	800183e <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	681a      	ldr	r2, [r3, #0]
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	695b      	ldr	r3, [r3, #20]
 800183a:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 800183c:	e7ff      	b.n	800183e <PWM_write_range+0x1f6>
 800183e:	bf00      	nop
 8001840:	3710      	adds	r7, #16
 8001842:	46bd      	mov	sp, r7
 8001844:	bdb0      	pop	{r4, r5, r7, pc}
 8001846:	bf00      	nop
 8001848:	00000000 	.word	0x00000000
 800184c:	40efffe0 	.word	0x40efffe0
 8001850:	80008001 	.word	0x80008001

08001854 <QEI_init>:
* Created on: Mar 30, 2024
* Author: beamk
*/
#include "QEI.h"

void QEI_init(QEI *qei, TIM_HandleTypeDef *htimx, int32_t ppr, uint32_t freq, float ratio) {
 8001854:	b580      	push	{r7, lr}
 8001856:	b086      	sub	sp, #24
 8001858:	af00      	add	r7, sp, #0
 800185a:	6178      	str	r0, [r7, #20]
 800185c:	6139      	str	r1, [r7, #16]
 800185e:	60fa      	str	r2, [r7, #12]
 8001860:	60bb      	str	r3, [r7, #8]
 8001862:	ed87 0a01 	vstr	s0, [r7, #4]
    qei->htimx = htimx;
 8001866:	697b      	ldr	r3, [r7, #20]
 8001868:	693a      	ldr	r2, [r7, #16]
 800186a:	611a      	str	r2, [r3, #16]
    qei->ppr = ppr;
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	68fa      	ldr	r2, [r7, #12]
 8001870:	619a      	str	r2, [r3, #24]
    qei->freq = freq;
 8001872:	697b      	ldr	r3, [r7, #20]
 8001874:	68ba      	ldr	r2, [r7, #8]
 8001876:	621a      	str	r2, [r3, #32]
    qei->c[NOW] = 0;
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	2200      	movs	r2, #0
 800187c:	601a      	str	r2, [r3, #0]
    qei->c[PREV] = 0;
 800187e:	697b      	ldr	r3, [r7, #20]
 8001880:	2200      	movs	r2, #0
 8001882:	605a      	str	r2, [r3, #4]
    qei->pps = 0;
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	f04f 0200 	mov.w	r2, #0
 800188a:	625a      	str	r2, [r3, #36]	@ 0x24
    qei->rpm = 0;
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	f04f 0200 	mov.w	r2, #0
 8001892:	629a      	str	r2, [r3, #40]	@ 0x28
    qei->radps = 0;
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	f04f 0200 	mov.w	r2, #0
 800189a:	62da      	str	r2, [r3, #44]	@ 0x2c
    qei->enc_period = 65536 - (65536 % ppr);
 800189c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80018a0:	68fa      	ldr	r2, [r7, #12]
 80018a2:	fb93 f2f2 	sdiv	r2, r3, r2
 80018a6:	68f9      	ldr	r1, [r7, #12]
 80018a8:	fb01 f202 	mul.w	r2, r1, r2
 80018ac:	1a9b      	subs	r3, r3, r2
 80018ae:	f5c3 3280 	rsb	r2, r3, #65536	@ 0x10000
 80018b2:	697b      	ldr	r3, [r7, #20]
 80018b4:	615a      	str	r2, [r3, #20]
    qei->pulses = 0;
 80018b6:	697b      	ldr	r3, [r7, #20]
 80018b8:	2200      	movs	r2, #0
 80018ba:	631a      	str	r2, [r3, #48]	@ 0x30
    //qei->pulsesf = 0;
    qei->revs = 0;
 80018bc:	697b      	ldr	r3, [r7, #20]
 80018be:	f04f 0200 	mov.w	r2, #0
 80018c2:	635a      	str	r2, [r3, #52]	@ 0x34
    qei->rads = 0;
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	f04f 0200 	mov.w	r2, #0
 80018ca:	639a      	str	r2, [r3, #56]	@ 0x38
    qei->mm = 0;
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	f04f 0200 	mov.w	r2, #0
 80018d2:	641a      	str	r2, [r3, #64]	@ 0x40
    qei->mmps = 0;
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	f04f 0200 	mov.w	r2, #0
 80018da:	645a      	str	r2, [r3, #68]	@ 0x44

    qei->ratio = ratio;  // Gear ratio or scaling factor
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	687a      	ldr	r2, [r7, #4]
 80018e0:	649a      	str	r2, [r3, #72]	@ 0x48
    HAL_TIM_Encoder_Start(htimx, TIM_CHANNEL_ALL);
 80018e2:	213c      	movs	r1, #60	@ 0x3c
 80018e4:	6938      	ldr	r0, [r7, #16]
 80018e6:	f004 ff43 	bl	8006770 <HAL_TIM_Encoder_Start>
}
 80018ea:	bf00      	nop
 80018ec:	3718      	adds	r7, #24
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	0000      	movs	r0, r0
 80018f4:	0000      	movs	r0, r0
	...

080018f8 <QEI_get_diff_count>:

void QEI_get_diff_count(QEI *qei) {
 80018f8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80018fc:	b084      	sub	sp, #16
 80018fe:	af00      	add	r7, sp, #0
 8001900:	6078      	str	r0, [r7, #4]
    qei->c[NOW] = __HAL_TIM_GET_COUNTER(qei->htimx); // Update the current count
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	691b      	ldr	r3, [r3, #16]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	601a      	str	r2, [r3, #0]

    // Calculate the difference in counts
    int32_t diff_counts = qei->c[NOW] - qei->c[PREV];
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681a      	ldr	r2, [r3, #0]
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	1ad3      	subs	r3, r2, r3
 8001918:	60fb      	str	r3, [r7, #12]

    //Unwrap
    if (diff_counts > qei->enc_period / 2) {
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	695b      	ldr	r3, [r3, #20]
 800191e:	0fda      	lsrs	r2, r3, #31
 8001920:	4413      	add	r3, r2
 8001922:	105b      	asrs	r3, r3, #1
 8001924:	461a      	mov	r2, r3
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	4293      	cmp	r3, r2
 800192a:	dd05      	ble.n	8001938 <QEI_get_diff_count+0x40>
        diff_counts -= qei->enc_period;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	695b      	ldr	r3, [r3, #20]
 8001930:	68fa      	ldr	r2, [r7, #12]
 8001932:	1ad3      	subs	r3, r2, r3
 8001934:	60fb      	str	r3, [r7, #12]
 8001936:	e00e      	b.n	8001956 <QEI_get_diff_count+0x5e>
    } else if (diff_counts < -(qei->enc_period) / 2) {
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	695b      	ldr	r3, [r3, #20]
 800193c:	425b      	negs	r3, r3
 800193e:	0fda      	lsrs	r2, r3, #31
 8001940:	4413      	add	r3, r2
 8001942:	105b      	asrs	r3, r3, #1
 8001944:	461a      	mov	r2, r3
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	4293      	cmp	r3, r2
 800194a:	da04      	bge.n	8001956 <QEI_get_diff_count+0x5e>
        diff_counts += qei->enc_period;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	695b      	ldr	r3, [r3, #20]
 8001950:	68fa      	ldr	r2, [r7, #12]
 8001952:	4413      	add	r3, r2
 8001954:	60fb      	str	r3, [r7, #12]
    }

    qei->diff_counts = diff_counts;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	68fa      	ldr	r2, [r7, #12]
 800195a:	61da      	str	r2, [r3, #28]
    //qei->diff_countsf = (float)diff_counts*1.25;

    // Calculate Position with ratio adjustment
    qei->pulses += qei->diff_counts;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	69db      	ldr	r3, [r3, #28]
 8001964:	441a      	add	r2, r3
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	631a      	str	r2, [r3, #48]	@ 0x30
    //qei->pulsesf += qei->diff_countsf;

    // Apply ratio to all position calculations
    qei->revs += (qei->diff_counts / (float)(qei->ppr)) * qei->ratio;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	69db      	ldr	r3, [r3, #28]
 8001974:	ee07 3a90 	vmov	s15, r3
 8001978:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	699b      	ldr	r3, [r3, #24]
 8001980:	ee07 3a90 	vmov	s15, r3
 8001984:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001988:	eec6 6a27 	vdiv.f32	s13, s12, s15
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 8001992:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001996:	ee77 7a27 	vadd.f32	s15, s14, s15
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
    qei->mm += (qei->diff_counts / (float)(qei->ppr)) * 10.0 * qei->ratio;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019a4:	4618      	mov	r0, r3
 80019a6:	f7fe fe07 	bl	80005b8 <__aeabi_f2d>
 80019aa:	4604      	mov	r4, r0
 80019ac:	460d      	mov	r5, r1
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	69db      	ldr	r3, [r3, #28]
 80019b2:	ee07 3a90 	vmov	s15, r3
 80019b6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	699b      	ldr	r3, [r3, #24]
 80019be:	ee07 3a90 	vmov	s15, r3
 80019c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019c6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80019ca:	ee16 0a90 	vmov	r0, s13
 80019ce:	f7fe fdf3 	bl	80005b8 <__aeabi_f2d>
 80019d2:	f04f 0200 	mov.w	r2, #0
 80019d6:	4b36      	ldr	r3, [pc, #216]	@ (8001ab0 <QEI_get_diff_count+0x1b8>)
 80019d8:	f7fe fe46 	bl	8000668 <__aeabi_dmul>
 80019dc:	4602      	mov	r2, r0
 80019de:	460b      	mov	r3, r1
 80019e0:	4690      	mov	r8, r2
 80019e2:	4699      	mov	r9, r3
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80019e8:	4618      	mov	r0, r3
 80019ea:	f7fe fde5 	bl	80005b8 <__aeabi_f2d>
 80019ee:	4602      	mov	r2, r0
 80019f0:	460b      	mov	r3, r1
 80019f2:	4640      	mov	r0, r8
 80019f4:	4649      	mov	r1, r9
 80019f6:	f7fe fe37 	bl	8000668 <__aeabi_dmul>
 80019fa:	4602      	mov	r2, r0
 80019fc:	460b      	mov	r3, r1
 80019fe:	4620      	mov	r0, r4
 8001a00:	4629      	mov	r1, r5
 8001a02:	f7fe fc7b 	bl	80002fc <__adddf3>
 8001a06:	4602      	mov	r2, r0
 8001a08:	460b      	mov	r3, r1
 8001a0a:	4610      	mov	r0, r2
 8001a0c:	4619      	mov	r1, r3
 8001a0e:	f7ff f85d 	bl	8000acc <__aeabi_d2f>
 8001a12:	4602      	mov	r2, r0
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	641a      	str	r2, [r3, #64]	@ 0x40
    qei->rads += (qei->diff_counts / (float)(qei->ppr)) * 2 * M_PI * qei->ratio;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f7fe fdcb 	bl	80005b8 <__aeabi_f2d>
 8001a22:	4604      	mov	r4, r0
 8001a24:	460d      	mov	r5, r1
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	69db      	ldr	r3, [r3, #28]
 8001a2a:	ee07 3a90 	vmov	s15, r3
 8001a2e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	699b      	ldr	r3, [r3, #24]
 8001a36:	ee07 3a90 	vmov	s15, r3
 8001a3a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a42:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001a46:	ee17 0a90 	vmov	r0, s15
 8001a4a:	f7fe fdb5 	bl	80005b8 <__aeabi_f2d>
 8001a4e:	a316      	add	r3, pc, #88	@ (adr r3, 8001aa8 <QEI_get_diff_count+0x1b0>)
 8001a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a54:	f7fe fe08 	bl	8000668 <__aeabi_dmul>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	460b      	mov	r3, r1
 8001a5c:	4690      	mov	r8, r2
 8001a5e:	4699      	mov	r9, r3
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001a64:	4618      	mov	r0, r3
 8001a66:	f7fe fda7 	bl	80005b8 <__aeabi_f2d>
 8001a6a:	4602      	mov	r2, r0
 8001a6c:	460b      	mov	r3, r1
 8001a6e:	4640      	mov	r0, r8
 8001a70:	4649      	mov	r1, r9
 8001a72:	f7fe fdf9 	bl	8000668 <__aeabi_dmul>
 8001a76:	4602      	mov	r2, r0
 8001a78:	460b      	mov	r3, r1
 8001a7a:	4620      	mov	r0, r4
 8001a7c:	4629      	mov	r1, r5
 8001a7e:	f7fe fc3d 	bl	80002fc <__adddf3>
 8001a82:	4602      	mov	r2, r0
 8001a84:	460b      	mov	r3, r1
 8001a86:	4610      	mov	r0, r2
 8001a88:	4619      	mov	r1, r3
 8001a8a:	f7ff f81f 	bl	8000acc <__aeabi_d2f>
 8001a8e:	4602      	mov	r2, r0
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	639a      	str	r2, [r3, #56]	@ 0x38

    qei->c[PREV] = qei->c[NOW]; // Store the previous count
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681a      	ldr	r2, [r3, #0]
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	605a      	str	r2, [r3, #4]
}
 8001a9c:	bf00      	nop
 8001a9e:	3710      	adds	r7, #16
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001aa6:	bf00      	nop
 8001aa8:	54442d18 	.word	0x54442d18
 8001aac:	400921fb 	.word	0x400921fb
 8001ab0:	40240000 	.word	0x40240000
 8001ab4:	00000000 	.word	0x00000000

08001ab8 <QEI_compute_data>:

void QEI_compute_data(QEI *qei) {
 8001ab8:	b5b0      	push	{r4, r5, r7, lr}
 8001aba:	b084      	sub	sp, #16
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
    // Calculate Velocity with ratio adjustment
    qei->pps = qei->diff_counts * ((int)(qei->freq));
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	69db      	ldr	r3, [r3, #28]
 8001ac4:	687a      	ldr	r2, [r7, #4]
 8001ac6:	6a12      	ldr	r2, [r2, #32]
 8001ac8:	fb02 f303 	mul.w	r3, r2, r3
 8001acc:	ee07 3a90 	vmov	s15, r3
 8001ad0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

    // Apply ratio to all velocity calculations
    qei->rpm = qei->pps * 60.0 / (float)(qei->ppr) * qei->ratio;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f7fe fd6a 	bl	80005b8 <__aeabi_f2d>
 8001ae4:	f04f 0200 	mov.w	r2, #0
 8001ae8:	4b6b      	ldr	r3, [pc, #428]	@ (8001c98 <QEI_compute_data+0x1e0>)
 8001aea:	f7fe fdbd 	bl	8000668 <__aeabi_dmul>
 8001aee:	4602      	mov	r2, r0
 8001af0:	460b      	mov	r3, r1
 8001af2:	4614      	mov	r4, r2
 8001af4:	461d      	mov	r5, r3
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	699b      	ldr	r3, [r3, #24]
 8001afa:	ee07 3a90 	vmov	s15, r3
 8001afe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b02:	ee17 0a90 	vmov	r0, s15
 8001b06:	f7fe fd57 	bl	80005b8 <__aeabi_f2d>
 8001b0a:	4602      	mov	r2, r0
 8001b0c:	460b      	mov	r3, r1
 8001b0e:	4620      	mov	r0, r4
 8001b10:	4629      	mov	r1, r5
 8001b12:	f7fe fed3 	bl	80008bc <__aeabi_ddiv>
 8001b16:	4602      	mov	r2, r0
 8001b18:	460b      	mov	r3, r1
 8001b1a:	4614      	mov	r4, r2
 8001b1c:	461d      	mov	r5, r3
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b22:	4618      	mov	r0, r3
 8001b24:	f7fe fd48 	bl	80005b8 <__aeabi_f2d>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	460b      	mov	r3, r1
 8001b2c:	4620      	mov	r0, r4
 8001b2e:	4629      	mov	r1, r5
 8001b30:	f7fe fd9a 	bl	8000668 <__aeabi_dmul>
 8001b34:	4602      	mov	r2, r0
 8001b36:	460b      	mov	r3, r1
 8001b38:	4610      	mov	r0, r2
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	f7fe ffc6 	bl	8000acc <__aeabi_d2f>
 8001b40:	4602      	mov	r2, r0
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	629a      	str	r2, [r3, #40]	@ 0x28
    qei->radps = qei->pps * 2 * M_PI / (float)(qei->ppr) * qei->ratio;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8001b4c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001b50:	ee17 0a90 	vmov	r0, s15
 8001b54:	f7fe fd30 	bl	80005b8 <__aeabi_f2d>
 8001b58:	a34d      	add	r3, pc, #308	@ (adr r3, 8001c90 <QEI_compute_data+0x1d8>)
 8001b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b5e:	f7fe fd83 	bl	8000668 <__aeabi_dmul>
 8001b62:	4602      	mov	r2, r0
 8001b64:	460b      	mov	r3, r1
 8001b66:	4614      	mov	r4, r2
 8001b68:	461d      	mov	r5, r3
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	699b      	ldr	r3, [r3, #24]
 8001b6e:	ee07 3a90 	vmov	s15, r3
 8001b72:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b76:	ee17 0a90 	vmov	r0, s15
 8001b7a:	f7fe fd1d 	bl	80005b8 <__aeabi_f2d>
 8001b7e:	4602      	mov	r2, r0
 8001b80:	460b      	mov	r3, r1
 8001b82:	4620      	mov	r0, r4
 8001b84:	4629      	mov	r1, r5
 8001b86:	f7fe fe99 	bl	80008bc <__aeabi_ddiv>
 8001b8a:	4602      	mov	r2, r0
 8001b8c:	460b      	mov	r3, r1
 8001b8e:	4614      	mov	r4, r2
 8001b90:	461d      	mov	r5, r3
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b96:	4618      	mov	r0, r3
 8001b98:	f7fe fd0e 	bl	80005b8 <__aeabi_f2d>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	460b      	mov	r3, r1
 8001ba0:	4620      	mov	r0, r4
 8001ba2:	4629      	mov	r1, r5
 8001ba4:	f7fe fd60 	bl	8000668 <__aeabi_dmul>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	460b      	mov	r3, r1
 8001bac:	4610      	mov	r0, r2
 8001bae:	4619      	mov	r1, r3
 8001bb0:	f7fe ff8c 	bl	8000acc <__aeabi_d2f>
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	62da      	str	r2, [r3, #44]	@ 0x2c
    qei->mmps = qei->pps * 10.0 / (float)(qei->ppr) * qei->ratio;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f7fe fcfa 	bl	80005b8 <__aeabi_f2d>
 8001bc4:	f04f 0200 	mov.w	r2, #0
 8001bc8:	4b34      	ldr	r3, [pc, #208]	@ (8001c9c <QEI_compute_data+0x1e4>)
 8001bca:	f7fe fd4d 	bl	8000668 <__aeabi_dmul>
 8001bce:	4602      	mov	r2, r0
 8001bd0:	460b      	mov	r3, r1
 8001bd2:	4614      	mov	r4, r2
 8001bd4:	461d      	mov	r5, r3
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	699b      	ldr	r3, [r3, #24]
 8001bda:	ee07 3a90 	vmov	s15, r3
 8001bde:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001be2:	ee17 0a90 	vmov	r0, s15
 8001be6:	f7fe fce7 	bl	80005b8 <__aeabi_f2d>
 8001bea:	4602      	mov	r2, r0
 8001bec:	460b      	mov	r3, r1
 8001bee:	4620      	mov	r0, r4
 8001bf0:	4629      	mov	r1, r5
 8001bf2:	f7fe fe63 	bl	80008bc <__aeabi_ddiv>
 8001bf6:	4602      	mov	r2, r0
 8001bf8:	460b      	mov	r3, r1
 8001bfa:	4614      	mov	r4, r2
 8001bfc:	461d      	mov	r5, r3
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c02:	4618      	mov	r0, r3
 8001c04:	f7fe fcd8 	bl	80005b8 <__aeabi_f2d>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	460b      	mov	r3, r1
 8001c0c:	4620      	mov	r0, r4
 8001c0e:	4629      	mov	r1, r5
 8001c10:	f7fe fd2a 	bl	8000668 <__aeabi_dmul>
 8001c14:	4602      	mov	r2, r0
 8001c16:	460b      	mov	r3, r1
 8001c18:	4610      	mov	r0, r2
 8001c1a:	4619      	mov	r1, r3
 8001c1c:	f7fe ff56 	bl	8000acc <__aeabi_d2f>
 8001c20:	4602      	mov	r2, r0
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	645a      	str	r2, [r3, #68]	@ 0x44

    // Calculate Acceleration with ratio adjustment
    qei->r[NOW] = qei->radps;  // radps already has ratio applied
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	609a      	str	r2, [r3, #8]
    float diff_velocity = (qei->r[NOW] - qei->r[PREV]);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	ed93 7a02 	vldr	s14, [r3, #8]
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	edd3 7a03 	vldr	s15, [r3, #12]
 8001c3a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c3e:	edc7 7a03 	vstr	s15, [r7, #12]
    if (diff_velocity == 0) {
 8001c42:	edd7 7a03 	vldr	s15, [r7, #12]
 8001c46:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001c4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c4e:	d104      	bne.n	8001c5a <QEI_compute_data+0x1a2>
        qei->radpss = 0;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	f04f 0200 	mov.w	r2, #0
 8001c56:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001c58:	e00f      	b.n	8001c7a <QEI_compute_data+0x1c2>
    } else {
        qei->radpss = diff_velocity / (1 / (qei->freq));
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6a1b      	ldr	r3, [r3, #32]
 8001c5e:	2b01      	cmp	r3, #1
 8001c60:	d102      	bne.n	8001c68 <QEI_compute_data+0x1b0>
 8001c62:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001c66:	e001      	b.n	8001c6c <QEI_compute_data+0x1b4>
 8001c68:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8001ca0 <QEI_compute_data+0x1e8>
 8001c6c:	edd7 6a03 	vldr	s13, [r7, #12]
 8001c70:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
        // No need to multiply by ratio again since diff_velocity already includes it
    }
    qei->r[PREV] = qei->r[NOW]; // Store the previous count
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	689a      	ldr	r2, [r3, #8]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	60da      	str	r2, [r3, #12]
}
 8001c82:	bf00      	nop
 8001c84:	3710      	adds	r7, #16
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bdb0      	pop	{r4, r5, r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	f3af 8000 	nop.w
 8001c90:	54442d18 	.word	0x54442d18
 8001c94:	400921fb 	.word	0x400921fb
 8001c98:	404e0000 	.word	0x404e0000
 8001c9c:	40240000 	.word	0x40240000
 8001ca0:	00000000 	.word	0x00000000

08001ca4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001ca8:	4a04      	ldr	r2, [pc, #16]	@ (8001cbc <MX_FREERTOS_Init+0x18>)
 8001caa:	2100      	movs	r1, #0
 8001cac:	4804      	ldr	r0, [pc, #16]	@ (8001cc0 <MX_FREERTOS_Init+0x1c>)
 8001cae:	f007 fe93 	bl	80099d8 <osThreadNew>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	4a03      	ldr	r2, [pc, #12]	@ (8001cc4 <MX_FREERTOS_Init+0x20>)
 8001cb6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8001cb8:	bf00      	nop
 8001cba:	bd80      	pop	{r7, pc}
 8001cbc:	0801cd08 	.word	0x0801cd08
 8001cc0:	080024f1 	.word	0x080024f1
 8001cc4:	200004a4 	.word	0x200004a4

08001cc8 <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b08a      	sub	sp, #40	@ 0x28
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8001cd4:	f008 ff54 	bl	800ab80 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8001cd8:	4b5a      	ldr	r3, [pc, #360]	@ (8001e44 <pvPortMallocMicroROS+0x17c>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d101      	bne.n	8001ce4 <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 8001ce0:	f000 f986 	bl	8001ff0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8001ce4:	4b58      	ldr	r3, [pc, #352]	@ (8001e48 <pvPortMallocMicroROS+0x180>)
 8001ce6:	681a      	ldr	r2, [r3, #0]
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	4013      	ands	r3, r2
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	f040 8090 	bne.w	8001e12 <pvPortMallocMicroROS+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d01e      	beq.n	8001d36 <pvPortMallocMicroROS+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8001cf8:	2208      	movs	r2, #8
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	4413      	add	r3, r2
 8001cfe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	f003 0307 	and.w	r3, r3, #7
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d015      	beq.n	8001d36 <pvPortMallocMicroROS+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	f023 0307 	bic.w	r3, r3, #7
 8001d10:	3308      	adds	r3, #8
 8001d12:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	f003 0307 	and.w	r3, r3, #7
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d00b      	beq.n	8001d36 <pvPortMallocMicroROS+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001d1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001d22:	f383 8811 	msr	BASEPRI, r3
 8001d26:	f3bf 8f6f 	isb	sy
 8001d2a:	f3bf 8f4f 	dsb	sy
 8001d2e:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001d30:	bf00      	nop
 8001d32:	bf00      	nop
 8001d34:	e7fd      	b.n	8001d32 <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d06a      	beq.n	8001e12 <pvPortMallocMicroROS+0x14a>
 8001d3c:	4b43      	ldr	r3, [pc, #268]	@ (8001e4c <pvPortMallocMicroROS+0x184>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	687a      	ldr	r2, [r7, #4]
 8001d42:	429a      	cmp	r2, r3
 8001d44:	d865      	bhi.n	8001e12 <pvPortMallocMicroROS+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8001d46:	4b42      	ldr	r3, [pc, #264]	@ (8001e50 <pvPortMallocMicroROS+0x188>)
 8001d48:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8001d4a:	4b41      	ldr	r3, [pc, #260]	@ (8001e50 <pvPortMallocMicroROS+0x188>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001d50:	e004      	b.n	8001d5c <pvPortMallocMicroROS+0x94>
				{
					pxPreviousBlock = pxBlock;
 8001d52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d54:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8001d56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001d5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	687a      	ldr	r2, [r7, #4]
 8001d62:	429a      	cmp	r2, r3
 8001d64:	d903      	bls.n	8001d6e <pvPortMallocMicroROS+0xa6>
 8001d66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d1f1      	bne.n	8001d52 <pvPortMallocMicroROS+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8001d6e:	4b35      	ldr	r3, [pc, #212]	@ (8001e44 <pvPortMallocMicroROS+0x17c>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d74:	429a      	cmp	r2, r3
 8001d76:	d04c      	beq.n	8001e12 <pvPortMallocMicroROS+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001d78:	6a3b      	ldr	r3, [r7, #32]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	2208      	movs	r2, #8
 8001d7e:	4413      	add	r3, r2
 8001d80:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8001d82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d84:	681a      	ldr	r2, [r3, #0]
 8001d86:	6a3b      	ldr	r3, [r7, #32]
 8001d88:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8001d8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d8c:	685a      	ldr	r2, [r3, #4]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	1ad2      	subs	r2, r2, r3
 8001d92:	2308      	movs	r3, #8
 8001d94:	005b      	lsls	r3, r3, #1
 8001d96:	429a      	cmp	r2, r3
 8001d98:	d920      	bls.n	8001ddc <pvPortMallocMicroROS+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8001d9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	4413      	add	r3, r2
 8001da0:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001da2:	69bb      	ldr	r3, [r7, #24]
 8001da4:	f003 0307 	and.w	r3, r3, #7
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d00b      	beq.n	8001dc4 <pvPortMallocMicroROS+0xfc>
	__asm volatile
 8001dac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001db0:	f383 8811 	msr	BASEPRI, r3
 8001db4:	f3bf 8f6f 	isb	sy
 8001db8:	f3bf 8f4f 	dsb	sy
 8001dbc:	613b      	str	r3, [r7, #16]
}
 8001dbe:	bf00      	nop
 8001dc0:	bf00      	nop
 8001dc2:	e7fd      	b.n	8001dc0 <pvPortMallocMicroROS+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8001dc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dc6:	685a      	ldr	r2, [r3, #4]
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	1ad2      	subs	r2, r2, r3
 8001dcc:	69bb      	ldr	r3, [r7, #24]
 8001dce:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8001dd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dd2:	687a      	ldr	r2, [r7, #4]
 8001dd4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8001dd6:	69b8      	ldr	r0, [r7, #24]
 8001dd8:	f000 f96c 	bl	80020b4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001ddc:	4b1b      	ldr	r3, [pc, #108]	@ (8001e4c <pvPortMallocMicroROS+0x184>)
 8001dde:	681a      	ldr	r2, [r3, #0]
 8001de0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	1ad3      	subs	r3, r2, r3
 8001de6:	4a19      	ldr	r2, [pc, #100]	@ (8001e4c <pvPortMallocMicroROS+0x184>)
 8001de8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001dea:	4b18      	ldr	r3, [pc, #96]	@ (8001e4c <pvPortMallocMicroROS+0x184>)
 8001dec:	681a      	ldr	r2, [r3, #0]
 8001dee:	4b19      	ldr	r3, [pc, #100]	@ (8001e54 <pvPortMallocMicroROS+0x18c>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	429a      	cmp	r2, r3
 8001df4:	d203      	bcs.n	8001dfe <pvPortMallocMicroROS+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8001df6:	4b15      	ldr	r3, [pc, #84]	@ (8001e4c <pvPortMallocMicroROS+0x184>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4a16      	ldr	r2, [pc, #88]	@ (8001e54 <pvPortMallocMicroROS+0x18c>)
 8001dfc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8001dfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e00:	685a      	ldr	r2, [r3, #4]
 8001e02:	4b11      	ldr	r3, [pc, #68]	@ (8001e48 <pvPortMallocMicroROS+0x180>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	431a      	orrs	r2, r3
 8001e08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e0a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8001e0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e0e:	2200      	movs	r2, #0
 8001e10:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8001e12:	f008 fec3 	bl	800ab9c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8001e16:	69fb      	ldr	r3, [r7, #28]
 8001e18:	f003 0307 	and.w	r3, r3, #7
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d00b      	beq.n	8001e38 <pvPortMallocMicroROS+0x170>
	__asm volatile
 8001e20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001e24:	f383 8811 	msr	BASEPRI, r3
 8001e28:	f3bf 8f6f 	isb	sy
 8001e2c:	f3bf 8f4f 	dsb	sy
 8001e30:	60fb      	str	r3, [r7, #12]
}
 8001e32:	bf00      	nop
 8001e34:	bf00      	nop
 8001e36:	e7fd      	b.n	8001e34 <pvPortMallocMicroROS+0x16c>
	return pvReturn;
 8001e38:	69fb      	ldr	r3, [r7, #28]
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	3728      	adds	r7, #40	@ 0x28
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	20003fec 	.word	0x20003fec
 8001e48:	20003ff8 	.word	0x20003ff8
 8001e4c:	20003ff0 	.word	0x20003ff0
 8001e50:	20003fe4 	.word	0x20003fe4
 8001e54:	20003ff4 	.word	0x20003ff4

08001e58 <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b086      	sub	sp, #24
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d04a      	beq.n	8001f00 <vPortFreeMicroROS+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8001e6a:	2308      	movs	r3, #8
 8001e6c:	425b      	negs	r3, r3
 8001e6e:	697a      	ldr	r2, [r7, #20]
 8001e70:	4413      	add	r3, r2
 8001e72:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8001e78:	693b      	ldr	r3, [r7, #16]
 8001e7a:	685a      	ldr	r2, [r3, #4]
 8001e7c:	4b22      	ldr	r3, [pc, #136]	@ (8001f08 <vPortFreeMicroROS+0xb0>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4013      	ands	r3, r2
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d10b      	bne.n	8001e9e <vPortFreeMicroROS+0x46>
	__asm volatile
 8001e86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001e8a:	f383 8811 	msr	BASEPRI, r3
 8001e8e:	f3bf 8f6f 	isb	sy
 8001e92:	f3bf 8f4f 	dsb	sy
 8001e96:	60fb      	str	r3, [r7, #12]
}
 8001e98:	bf00      	nop
 8001e9a:	bf00      	nop
 8001e9c:	e7fd      	b.n	8001e9a <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d00b      	beq.n	8001ebe <vPortFreeMicroROS+0x66>
	__asm volatile
 8001ea6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001eaa:	f383 8811 	msr	BASEPRI, r3
 8001eae:	f3bf 8f6f 	isb	sy
 8001eb2:	f3bf 8f4f 	dsb	sy
 8001eb6:	60bb      	str	r3, [r7, #8]
}
 8001eb8:	bf00      	nop
 8001eba:	bf00      	nop
 8001ebc:	e7fd      	b.n	8001eba <vPortFreeMicroROS+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	685a      	ldr	r2, [r3, #4]
 8001ec2:	4b11      	ldr	r3, [pc, #68]	@ (8001f08 <vPortFreeMicroROS+0xb0>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4013      	ands	r3, r2
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d019      	beq.n	8001f00 <vPortFreeMicroROS+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8001ecc:	693b      	ldr	r3, [r7, #16]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d115      	bne.n	8001f00 <vPortFreeMicroROS+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8001ed4:	693b      	ldr	r3, [r7, #16]
 8001ed6:	685a      	ldr	r2, [r3, #4]
 8001ed8:	4b0b      	ldr	r3, [pc, #44]	@ (8001f08 <vPortFreeMicroROS+0xb0>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	43db      	mvns	r3, r3
 8001ede:	401a      	ands	r2, r3
 8001ee0:	693b      	ldr	r3, [r7, #16]
 8001ee2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8001ee4:	f008 fe4c 	bl	800ab80 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8001ee8:	693b      	ldr	r3, [r7, #16]
 8001eea:	685a      	ldr	r2, [r3, #4]
 8001eec:	4b07      	ldr	r3, [pc, #28]	@ (8001f0c <vPortFreeMicroROS+0xb4>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4413      	add	r3, r2
 8001ef2:	4a06      	ldr	r2, [pc, #24]	@ (8001f0c <vPortFreeMicroROS+0xb4>)
 8001ef4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8001ef6:	6938      	ldr	r0, [r7, #16]
 8001ef8:	f000 f8dc 	bl	80020b4 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8001efc:	f008 fe4e 	bl	800ab9c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8001f00:	bf00      	nop
 8001f02:	3718      	adds	r7, #24
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}
 8001f08:	20003ff8 	.word	0x20003ff8
 8001f0c:	20003ff0 	.word	0x20003ff0

08001f10 <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 8001f10:	b480      	push	{r7}
 8001f12:	b087      	sub	sp, #28
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 8001f1c:	2308      	movs	r3, #8
 8001f1e:	425b      	negs	r3, r3
 8001f20:	697a      	ldr	r2, [r7, #20]
 8001f22:	4413      	add	r3, r2
 8001f24:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 8001f26:	697b      	ldr	r3, [r7, #20]
 8001f28:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 8001f2a:	693b      	ldr	r3, [r7, #16]
 8001f2c:	685a      	ldr	r2, [r3, #4]
 8001f2e:	4b06      	ldr	r3, [pc, #24]	@ (8001f48 <getBlockSize+0x38>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	43db      	mvns	r3, r3
 8001f34:	4013      	ands	r3, r2
 8001f36:	60fb      	str	r3, [r7, #12]

	return count;
 8001f38:	68fb      	ldr	r3, [r7, #12]
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	371c      	adds	r7, #28
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f44:	4770      	bx	lr
 8001f46:	bf00      	nop
 8001f48:	20003ff8 	.word	0x20003ff8

08001f4c <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b084      	sub	sp, #16
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
 8001f54:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8001f56:	f008 fe13 	bl	800ab80 <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 8001f5a:	6838      	ldr	r0, [r7, #0]
 8001f5c:	f7ff feb4 	bl	8001cc8 <pvPortMallocMicroROS>
 8001f60:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 8001f62:	68bb      	ldr	r3, [r7, #8]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d017      	beq.n	8001f98 <pvPortReallocMicroROS+0x4c>
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d014      	beq.n	8001f98 <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 8001f6e:	6878      	ldr	r0, [r7, #4]
 8001f70:	f7ff ffce 	bl	8001f10 <getBlockSize>
 8001f74:	4603      	mov	r3, r0
 8001f76:	2208      	movs	r2, #8
 8001f78:	1a9b      	subs	r3, r3, r2
 8001f7a:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 8001f7c:	683a      	ldr	r2, [r7, #0]
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	429a      	cmp	r2, r3
 8001f82:	d201      	bcs.n	8001f88 <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 8001f88:	68fa      	ldr	r2, [r7, #12]
 8001f8a:	6879      	ldr	r1, [r7, #4]
 8001f8c:	68b8      	ldr	r0, [r7, #8]
 8001f8e:	f018 feae 	bl	801acee <memcpy>

		vPortFreeMicroROS(pv);
 8001f92:	6878      	ldr	r0, [r7, #4]
 8001f94:	f7ff ff60 	bl	8001e58 <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 8001f98:	f008 fe00 	bl	800ab9c <xTaskResumeAll>

	return newmem;
 8001f9c:	68bb      	ldr	r3, [r7, #8]
}
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	3710      	adds	r7, #16
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}

08001fa6 <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 8001fa6:	b580      	push	{r7, lr}
 8001fa8:	b086      	sub	sp, #24
 8001faa:	af00      	add	r7, sp, #0
 8001fac:	6078      	str	r0, [r7, #4]
 8001fae:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8001fb0:	f008 fde6 	bl	800ab80 <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	687a      	ldr	r2, [r7, #4]
 8001fb8:	fb02 f303 	mul.w	r3, r2, r3
 8001fbc:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 8001fbe:	6978      	ldr	r0, [r7, #20]
 8001fc0:	f7ff fe82 	bl	8001cc8 <pvPortMallocMicroROS>
 8001fc4:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	613b      	str	r3, [r7, #16]

  	while(count--)
 8001fca:	e004      	b.n	8001fd6 <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 8001fcc:	693b      	ldr	r3, [r7, #16]
 8001fce:	1c5a      	adds	r2, r3, #1
 8001fd0:	613a      	str	r2, [r7, #16]
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	701a      	strb	r2, [r3, #0]
  	while(count--)
 8001fd6:	697b      	ldr	r3, [r7, #20]
 8001fd8:	1e5a      	subs	r2, r3, #1
 8001fda:	617a      	str	r2, [r7, #20]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d1f5      	bne.n	8001fcc <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 8001fe0:	f008 fddc 	bl	800ab9c <xTaskResumeAll>
  	return mem;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
}
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	3718      	adds	r7, #24
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}
	...

08001ff0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b085      	sub	sp, #20
 8001ff4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8001ff6:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001ffa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8001ffc:	4b27      	ldr	r3, [pc, #156]	@ (800209c <prvHeapInit+0xac>)
 8001ffe:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	f003 0307 	and.w	r3, r3, #7
 8002006:	2b00      	cmp	r3, #0
 8002008:	d00c      	beq.n	8002024 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	3307      	adds	r3, #7
 800200e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	f023 0307 	bic.w	r3, r3, #7
 8002016:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8002018:	68ba      	ldr	r2, [r7, #8]
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	1ad3      	subs	r3, r2, r3
 800201e:	4a1f      	ldr	r2, [pc, #124]	@ (800209c <prvHeapInit+0xac>)
 8002020:	4413      	add	r3, r2
 8002022:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002028:	4a1d      	ldr	r2, [pc, #116]	@ (80020a0 <prvHeapInit+0xb0>)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800202e:	4b1c      	ldr	r3, [pc, #112]	@ (80020a0 <prvHeapInit+0xb0>)
 8002030:	2200      	movs	r2, #0
 8002032:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	68ba      	ldr	r2, [r7, #8]
 8002038:	4413      	add	r3, r2
 800203a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800203c:	2208      	movs	r2, #8
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	1a9b      	subs	r3, r3, r2
 8002042:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	f023 0307 	bic.w	r3, r3, #7
 800204a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	4a15      	ldr	r2, [pc, #84]	@ (80020a4 <prvHeapInit+0xb4>)
 8002050:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8002052:	4b14      	ldr	r3, [pc, #80]	@ (80020a4 <prvHeapInit+0xb4>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	2200      	movs	r2, #0
 8002058:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800205a:	4b12      	ldr	r3, [pc, #72]	@ (80020a4 <prvHeapInit+0xb4>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	2200      	movs	r2, #0
 8002060:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	68fa      	ldr	r2, [r7, #12]
 800206a:	1ad2      	subs	r2, r2, r3
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002070:	4b0c      	ldr	r3, [pc, #48]	@ (80020a4 <prvHeapInit+0xb4>)
 8002072:	681a      	ldr	r2, [r3, #0]
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	4a0a      	ldr	r2, [pc, #40]	@ (80020a8 <prvHeapInit+0xb8>)
 800207e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	4a09      	ldr	r2, [pc, #36]	@ (80020ac <prvHeapInit+0xbc>)
 8002086:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8002088:	4b09      	ldr	r3, [pc, #36]	@ (80020b0 <prvHeapInit+0xc0>)
 800208a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800208e:	601a      	str	r2, [r3, #0]
}
 8002090:	bf00      	nop
 8002092:	3714      	adds	r7, #20
 8002094:	46bd      	mov	sp, r7
 8002096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209a:	4770      	bx	lr
 800209c:	200033e4 	.word	0x200033e4
 80020a0:	20003fe4 	.word	0x20003fe4
 80020a4:	20003fec 	.word	0x20003fec
 80020a8:	20003ff4 	.word	0x20003ff4
 80020ac:	20003ff0 	.word	0x20003ff0
 80020b0:	20003ff8 	.word	0x20003ff8

080020b4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80020b4:	b480      	push	{r7}
 80020b6:	b085      	sub	sp, #20
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80020bc:	4b28      	ldr	r3, [pc, #160]	@ (8002160 <prvInsertBlockIntoFreeList+0xac>)
 80020be:	60fb      	str	r3, [r7, #12]
 80020c0:	e002      	b.n	80020c8 <prvInsertBlockIntoFreeList+0x14>
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	60fb      	str	r3, [r7, #12]
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	687a      	ldr	r2, [r7, #4]
 80020ce:	429a      	cmp	r2, r3
 80020d0:	d8f7      	bhi.n	80020c2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	68ba      	ldr	r2, [r7, #8]
 80020dc:	4413      	add	r3, r2
 80020de:	687a      	ldr	r2, [r7, #4]
 80020e0:	429a      	cmp	r2, r3
 80020e2:	d108      	bne.n	80020f6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	685a      	ldr	r2, [r3, #4]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	441a      	add	r2, r3
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	68ba      	ldr	r2, [r7, #8]
 8002100:	441a      	add	r2, r3
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	429a      	cmp	r2, r3
 8002108:	d118      	bne.n	800213c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681a      	ldr	r2, [r3, #0]
 800210e:	4b15      	ldr	r3, [pc, #84]	@ (8002164 <prvInsertBlockIntoFreeList+0xb0>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	429a      	cmp	r2, r3
 8002114:	d00d      	beq.n	8002132 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	685a      	ldr	r2, [r3, #4]
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	441a      	add	r2, r3
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	681a      	ldr	r2, [r3, #0]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	601a      	str	r2, [r3, #0]
 8002130:	e008      	b.n	8002144 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8002132:	4b0c      	ldr	r3, [pc, #48]	@ (8002164 <prvInsertBlockIntoFreeList+0xb0>)
 8002134:	681a      	ldr	r2, [r3, #0]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	601a      	str	r2, [r3, #0]
 800213a:	e003      	b.n	8002144 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681a      	ldr	r2, [r3, #0]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8002144:	68fa      	ldr	r2, [r7, #12]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	429a      	cmp	r2, r3
 800214a:	d002      	beq.n	8002152 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	687a      	ldr	r2, [r7, #4]
 8002150:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002152:	bf00      	nop
 8002154:	3714      	adds	r7, #20
 8002156:	46bd      	mov	sp, r7
 8002158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215c:	4770      	bx	lr
 800215e:	bf00      	nop
 8002160:	20003fe4 	.word	0x20003fe4
 8002164:	20003fec 	.word	0x20003fec

08002168 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b082      	sub	sp, #8
 800216c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800216e:	4b16      	ldr	r3, [pc, #88]	@ (80021c8 <MX_DMA_Init+0x60>)
 8002170:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002172:	4a15      	ldr	r2, [pc, #84]	@ (80021c8 <MX_DMA_Init+0x60>)
 8002174:	f043 0304 	orr.w	r3, r3, #4
 8002178:	6493      	str	r3, [r2, #72]	@ 0x48
 800217a:	4b13      	ldr	r3, [pc, #76]	@ (80021c8 <MX_DMA_Init+0x60>)
 800217c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800217e:	f003 0304 	and.w	r3, r3, #4
 8002182:	607b      	str	r3, [r7, #4]
 8002184:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002186:	4b10      	ldr	r3, [pc, #64]	@ (80021c8 <MX_DMA_Init+0x60>)
 8002188:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800218a:	4a0f      	ldr	r2, [pc, #60]	@ (80021c8 <MX_DMA_Init+0x60>)
 800218c:	f043 0301 	orr.w	r3, r3, #1
 8002190:	6493      	str	r3, [r2, #72]	@ 0x48
 8002192:	4b0d      	ldr	r3, [pc, #52]	@ (80021c8 <MX_DMA_Init+0x60>)
 8002194:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002196:	f003 0301 	and.w	r3, r3, #1
 800219a:	603b      	str	r3, [r7, #0]
 800219c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 800219e:	2200      	movs	r2, #0
 80021a0:	2105      	movs	r1, #5
 80021a2:	200b      	movs	r0, #11
 80021a4:	f002 f9a6 	bl	80044f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80021a8:	200b      	movs	r0, #11
 80021aa:	f002 f9bd 	bl	8004528 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 80021ae:	2200      	movs	r2, #0
 80021b0:	2105      	movs	r1, #5
 80021b2:	200c      	movs	r0, #12
 80021b4:	f002 f99e 	bl	80044f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80021b8:	200c      	movs	r0, #12
 80021ba:	f002 f9b5 	bl	8004528 <HAL_NVIC_EnableIRQ>

}
 80021be:	bf00      	nop
 80021c0:	3708      	adds	r7, #8
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	bf00      	nop
 80021c8:	40021000 	.word	0x40021000

080021cc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b08a      	sub	sp, #40	@ 0x28
 80021d0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021d2:	f107 0314 	add.w	r3, r7, #20
 80021d6:	2200      	movs	r2, #0
 80021d8:	601a      	str	r2, [r3, #0]
 80021da:	605a      	str	r2, [r3, #4]
 80021dc:	609a      	str	r2, [r3, #8]
 80021de:	60da      	str	r2, [r3, #12]
 80021e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80021e2:	4b3b      	ldr	r3, [pc, #236]	@ (80022d0 <MX_GPIO_Init+0x104>)
 80021e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021e6:	4a3a      	ldr	r2, [pc, #232]	@ (80022d0 <MX_GPIO_Init+0x104>)
 80021e8:	f043 0304 	orr.w	r3, r3, #4
 80021ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80021ee:	4b38      	ldr	r3, [pc, #224]	@ (80022d0 <MX_GPIO_Init+0x104>)
 80021f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021f2:	f003 0304 	and.w	r3, r3, #4
 80021f6:	613b      	str	r3, [r7, #16]
 80021f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80021fa:	4b35      	ldr	r3, [pc, #212]	@ (80022d0 <MX_GPIO_Init+0x104>)
 80021fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021fe:	4a34      	ldr	r2, [pc, #208]	@ (80022d0 <MX_GPIO_Init+0x104>)
 8002200:	f043 0320 	orr.w	r3, r3, #32
 8002204:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002206:	4b32      	ldr	r3, [pc, #200]	@ (80022d0 <MX_GPIO_Init+0x104>)
 8002208:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800220a:	f003 0320 	and.w	r3, r3, #32
 800220e:	60fb      	str	r3, [r7, #12]
 8002210:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002212:	4b2f      	ldr	r3, [pc, #188]	@ (80022d0 <MX_GPIO_Init+0x104>)
 8002214:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002216:	4a2e      	ldr	r2, [pc, #184]	@ (80022d0 <MX_GPIO_Init+0x104>)
 8002218:	f043 0301 	orr.w	r3, r3, #1
 800221c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800221e:	4b2c      	ldr	r3, [pc, #176]	@ (80022d0 <MX_GPIO_Init+0x104>)
 8002220:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002222:	f003 0301 	and.w	r3, r3, #1
 8002226:	60bb      	str	r3, [r7, #8]
 8002228:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800222a:	4b29      	ldr	r3, [pc, #164]	@ (80022d0 <MX_GPIO_Init+0x104>)
 800222c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800222e:	4a28      	ldr	r2, [pc, #160]	@ (80022d0 <MX_GPIO_Init+0x104>)
 8002230:	f043 0302 	orr.w	r3, r3, #2
 8002234:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002236:	4b26      	ldr	r3, [pc, #152]	@ (80022d0 <MX_GPIO_Init+0x104>)
 8002238:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800223a:	f003 0302 	and.w	r3, r3, #2
 800223e:	607b      	str	r3, [r7, #4]
 8002240:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_8, GPIO_PIN_RESET);
 8002242:	2200      	movs	r2, #0
 8002244:	f44f 7190 	mov.w	r1, #288	@ 0x120
 8002248:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800224c:	f002 fe3a 	bl	8004ec4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8002250:	2200      	movs	r2, #0
 8002252:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002256:	481f      	ldr	r0, [pc, #124]	@ (80022d4 <MX_GPIO_Init+0x108>)
 8002258:	f002 fe34 	bl	8004ec4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800225c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002260:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002262:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002266:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002268:	2300      	movs	r3, #0
 800226a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800226c:	f107 0314 	add.w	r3, r7, #20
 8002270:	4619      	mov	r1, r3
 8002272:	4819      	ldr	r0, [pc, #100]	@ (80022d8 <MX_GPIO_Init+0x10c>)
 8002274:	f002 fca4 	bl	8004bc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA8 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_8;
 8002278:	f44f 7390 	mov.w	r3, #288	@ 0x120
 800227c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800227e:	2301      	movs	r3, #1
 8002280:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002282:	2300      	movs	r3, #0
 8002284:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002286:	2300      	movs	r3, #0
 8002288:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800228a:	f107 0314 	add.w	r3, r7, #20
 800228e:	4619      	mov	r1, r3
 8002290:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002294:	f002 fc94 	bl	8004bc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002298:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800229c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800229e:	2301      	movs	r3, #1
 80022a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022a2:	2300      	movs	r3, #0
 80022a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022a6:	2300      	movs	r3, #0
 80022a8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022aa:	f107 0314 	add.w	r3, r7, #20
 80022ae:	4619      	mov	r1, r3
 80022b0:	4808      	ldr	r0, [pc, #32]	@ (80022d4 <MX_GPIO_Init+0x108>)
 80022b2:	f002 fc85 	bl	8004bc0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80022b6:	2200      	movs	r2, #0
 80022b8:	2105      	movs	r1, #5
 80022ba:	2028      	movs	r0, #40	@ 0x28
 80022bc:	f002 f91a 	bl	80044f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80022c0:	2028      	movs	r0, #40	@ 0x28
 80022c2:	f002 f931 	bl	8004528 <HAL_NVIC_EnableIRQ>

}
 80022c6:	bf00      	nop
 80022c8:	3728      	adds	r7, #40	@ 0x28
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	bf00      	nop
 80022d0:	40021000 	.word	0x40021000
 80022d4:	48000400 	.word	0x48000400
 80022d8:	48000800 	.word	0x48000800

080022dc <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 80022e0:	4b0b      	ldr	r3, [pc, #44]	@ (8002310 <MX_IWDG_Init+0x34>)
 80022e2:	4a0c      	ldr	r2, [pc, #48]	@ (8002314 <MX_IWDG_Init+0x38>)
 80022e4:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
 80022e6:	4b0a      	ldr	r3, [pc, #40]	@ (8002310 <MX_IWDG_Init+0x34>)
 80022e8:	2200      	movs	r2, #0
 80022ea:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 80022ec:	4b08      	ldr	r3, [pc, #32]	@ (8002310 <MX_IWDG_Init+0x34>)
 80022ee:	f640 72ff 	movw	r2, #4095	@ 0xfff
 80022f2:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 2499;
 80022f4:	4b06      	ldr	r3, [pc, #24]	@ (8002310 <MX_IWDG_Init+0x34>)
 80022f6:	f640 12c3 	movw	r2, #2499	@ 0x9c3
 80022fa:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 80022fc:	4804      	ldr	r0, [pc, #16]	@ (8002310 <MX_IWDG_Init+0x34>)
 80022fe:	f002 fe36 	bl	8004f6e <HAL_IWDG_Init>
 8002302:	4603      	mov	r3, r0
 8002304:	2b00      	cmp	r3, #0
 8002306:	d001      	beq.n	800230c <MX_IWDG_Init+0x30>
  {
    Error_Handler();
 8002308:	f000 fba8 	bl	8002a5c <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 800230c:	bf00      	nop
 800230e:	bd80      	pop	{r7, pc}
 8002310:	20003ffc 	.word	0x20003ffc
 8002314:	40003000 	.word	0x40003000

08002318 <timer_callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void timer_callback(rcl_timer_t * timer, int64_t last_call_time)
{
 8002318:	b590      	push	{r4, r7, lr}
 800231a:	b085      	sub	sp, #20
 800231c:	af00      	add	r7, sp, #0
 800231e:	60f8      	str	r0, [r7, #12]
 8002320:	e9c7 2300 	strd	r2, r3, [r7]
    static uint8_t cnt = 0;

    if (timer != NULL) {
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d075      	beq.n	8002416 <timer_callback+0xfe>
        // Sync micro-ROS session
        rmw_uros_sync_session(timeout_ms);
 800232a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800232e:	4618      	mov	r0, r3
 8002330:	f00d feda 	bl	80100e8 <rmw_uros_sync_session>

        // Toggle LED every 50 cycles (approximately every 0.5 seconds)
		if(cnt == 0) HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8002334:	4b3a      	ldr	r3, [pc, #232]	@ (8002420 <timer_callback+0x108>)
 8002336:	781b      	ldrb	r3, [r3, #0]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d104      	bne.n	8002346 <timer_callback+0x2e>
 800233c:	2120      	movs	r1, #32
 800233e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002342:	f002 fdd7 	bl	8004ef4 <HAL_GPIO_TogglePin>
		cnt = (cnt + 1)%50;
 8002346:	4b36      	ldr	r3, [pc, #216]	@ (8002420 <timer_callback+0x108>)
 8002348:	781b      	ldrb	r3, [r3, #0]
 800234a:	3301      	adds	r3, #1
 800234c:	4a35      	ldr	r2, [pc, #212]	@ (8002424 <timer_callback+0x10c>)
 800234e:	fb82 1203 	smull	r1, r2, r2, r3
 8002352:	1111      	asrs	r1, r2, #4
 8002354:	17da      	asrs	r2, r3, #31
 8002356:	1a8a      	subs	r2, r1, r2
 8002358:	2132      	movs	r1, #50	@ 0x32
 800235a:	fb01 f202 	mul.w	r2, r1, r2
 800235e:	1a9a      	subs	r2, r3, r2
 8002360:	b2d2      	uxtb	r2, r2
 8002362:	4b2f      	ldr	r3, [pc, #188]	@ (8002420 <timer_callback+0x108>)
 8002364:	701a      	strb	r2, [r3, #0]

        // Prepare and publish multi-array message with latest Twist data
        if (pub_msg.data.data != NULL) {
 8002366:	4b30      	ldr	r3, [pc, #192]	@ (8002428 <timer_callback+0x110>)
 8002368:	691b      	ldr	r3, [r3, #16]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d050      	beq.n	8002410 <timer_callback+0xf8>
            pub_msg.data.data[0] = linear_x;
 800236e:	4b2f      	ldr	r3, [pc, #188]	@ (800242c <timer_callback+0x114>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a2d      	ldr	r2, [pc, #180]	@ (8002428 <timer_callback+0x110>)
 8002374:	6914      	ldr	r4, [r2, #16]
 8002376:	4618      	mov	r0, r3
 8002378:	f7fe f91e 	bl	80005b8 <__aeabi_f2d>
 800237c:	4602      	mov	r2, r0
 800237e:	460b      	mov	r3, r1
 8002380:	e9c4 2300 	strd	r2, r3, [r4]
            pub_msg.data.data[1] = linear_y;
 8002384:	4b2a      	ldr	r3, [pc, #168]	@ (8002430 <timer_callback+0x118>)
 8002386:	681a      	ldr	r2, [r3, #0]
 8002388:	4b27      	ldr	r3, [pc, #156]	@ (8002428 <timer_callback+0x110>)
 800238a:	691b      	ldr	r3, [r3, #16]
 800238c:	f103 0408 	add.w	r4, r3, #8
 8002390:	4610      	mov	r0, r2
 8002392:	f7fe f911 	bl	80005b8 <__aeabi_f2d>
 8002396:	4602      	mov	r2, r0
 8002398:	460b      	mov	r3, r1
 800239a:	e9c4 2300 	strd	r2, r3, [r4]
            pub_msg.data.data[2] = linear_z;
 800239e:	4b25      	ldr	r3, [pc, #148]	@ (8002434 <timer_callback+0x11c>)
 80023a0:	681a      	ldr	r2, [r3, #0]
 80023a2:	4b21      	ldr	r3, [pc, #132]	@ (8002428 <timer_callback+0x110>)
 80023a4:	691b      	ldr	r3, [r3, #16]
 80023a6:	f103 0410 	add.w	r4, r3, #16
 80023aa:	4610      	mov	r0, r2
 80023ac:	f7fe f904 	bl	80005b8 <__aeabi_f2d>
 80023b0:	4602      	mov	r2, r0
 80023b2:	460b      	mov	r3, r1
 80023b4:	e9c4 2300 	strd	r2, r3, [r4]
            pub_msg.data.data[3] = angular_x;
 80023b8:	4b1f      	ldr	r3, [pc, #124]	@ (8002438 <timer_callback+0x120>)
 80023ba:	681a      	ldr	r2, [r3, #0]
 80023bc:	4b1a      	ldr	r3, [pc, #104]	@ (8002428 <timer_callback+0x110>)
 80023be:	691b      	ldr	r3, [r3, #16]
 80023c0:	f103 0418 	add.w	r4, r3, #24
 80023c4:	4610      	mov	r0, r2
 80023c6:	f7fe f8f7 	bl	80005b8 <__aeabi_f2d>
 80023ca:	4602      	mov	r2, r0
 80023cc:	460b      	mov	r3, r1
 80023ce:	e9c4 2300 	strd	r2, r3, [r4]
            pub_msg.data.data[4] = angular_y;
 80023d2:	4b1a      	ldr	r3, [pc, #104]	@ (800243c <timer_callback+0x124>)
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	4b14      	ldr	r3, [pc, #80]	@ (8002428 <timer_callback+0x110>)
 80023d8:	691b      	ldr	r3, [r3, #16]
 80023da:	f103 0420 	add.w	r4, r3, #32
 80023de:	4610      	mov	r0, r2
 80023e0:	f7fe f8ea 	bl	80005b8 <__aeabi_f2d>
 80023e4:	4602      	mov	r2, r0
 80023e6:	460b      	mov	r3, r1
 80023e8:	e9c4 2300 	strd	r2, r3, [r4]
            pub_msg.data.data[5] = angular_z;
 80023ec:	4b14      	ldr	r3, [pc, #80]	@ (8002440 <timer_callback+0x128>)
 80023ee:	681a      	ldr	r2, [r3, #0]
 80023f0:	4b0d      	ldr	r3, [pc, #52]	@ (8002428 <timer_callback+0x110>)
 80023f2:	691b      	ldr	r3, [r3, #16]
 80023f4:	f103 0428 	add.w	r4, r3, #40	@ 0x28
 80023f8:	4610      	mov	r0, r2
 80023fa:	f7fe f8dd 	bl	80005b8 <__aeabi_f2d>
 80023fe:	4602      	mov	r2, r0
 8002400:	460b      	mov	r3, r1
 8002402:	e9c4 2300 	strd	r2, r3, [r4]

            // Publish the multi-array message
            RCLSOFTCHECK(rcl_publish(&publisher, &pub_msg, NULL));
 8002406:	2200      	movs	r2, #0
 8002408:	4907      	ldr	r1, [pc, #28]	@ (8002428 <timer_callback+0x110>)
 800240a:	480e      	ldr	r0, [pc, #56]	@ (8002444 <timer_callback+0x12c>)
 800240c:	f00b fed0 	bl	800e1b0 <rcl_publish>
        }

        // Reinitialize watchdog timer
        HAL_IWDG_Init(&hiwdg);
 8002410:	480d      	ldr	r0, [pc, #52]	@ (8002448 <timer_callback+0x130>)
 8002412:	f002 fdac 	bl	8004f6e <HAL_IWDG_Init>
    }
}
 8002416:	bf00      	nop
 8002418:	3714      	adds	r7, #20
 800241a:	46bd      	mov	sp, r7
 800241c:	bd90      	pop	{r4, r7, pc}
 800241e:	bf00      	nop
 8002420:	200042d4 	.word	0x200042d4
 8002424:	51eb851f 	.word	0x51eb851f
 8002428:	20004268 	.word	0x20004268
 800242c:	200042bc 	.word	0x200042bc
 8002430:	200042c0 	.word	0x200042c0
 8002434:	200042c4 	.word	0x200042c4
 8002438:	200042c8 	.word	0x200042c8
 800243c:	200042cc 	.word	0x200042cc
 8002440:	200042d0 	.word	0x200042d0
 8002444:	20004260 	.word	0x20004260
 8002448:	20003ffc 	.word	0x20003ffc

0800244c <subscription_callback>:

void subscription_callback(const void * msgin){
 800244c:	b580      	push	{r7, lr}
 800244e:	b084      	sub	sp, #16
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
    const geometry_msgs__msg__Twist * twist_msg = (const geometry_msgs__msg__Twist *)msgin;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	60fb      	str	r3, [r7, #12]

    linear_x = twist_msg->linear.x;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800245e:	4610      	mov	r0, r2
 8002460:	4619      	mov	r1, r3
 8002462:	f7fe fb33 	bl	8000acc <__aeabi_d2f>
 8002466:	4603      	mov	r3, r0
 8002468:	4a1b      	ldr	r2, [pc, #108]	@ (80024d8 <subscription_callback+0x8c>)
 800246a:	6013      	str	r3, [r2, #0]
    linear_y = twist_msg->linear.y;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002472:	4610      	mov	r0, r2
 8002474:	4619      	mov	r1, r3
 8002476:	f7fe fb29 	bl	8000acc <__aeabi_d2f>
 800247a:	4603      	mov	r3, r0
 800247c:	4a17      	ldr	r2, [pc, #92]	@ (80024dc <subscription_callback+0x90>)
 800247e:	6013      	str	r3, [r2, #0]
    linear_z = twist_msg->linear.z;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002486:	4610      	mov	r0, r2
 8002488:	4619      	mov	r1, r3
 800248a:	f7fe fb1f 	bl	8000acc <__aeabi_d2f>
 800248e:	4603      	mov	r3, r0
 8002490:	4a13      	ldr	r2, [pc, #76]	@ (80024e0 <subscription_callback+0x94>)
 8002492:	6013      	str	r3, [r2, #0]

    angular_x = twist_msg->angular.x;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800249a:	4610      	mov	r0, r2
 800249c:	4619      	mov	r1, r3
 800249e:	f7fe fb15 	bl	8000acc <__aeabi_d2f>
 80024a2:	4603      	mov	r3, r0
 80024a4:	4a0f      	ldr	r2, [pc, #60]	@ (80024e4 <subscription_callback+0x98>)
 80024a6:	6013      	str	r3, [r2, #0]
    angular_y = twist_msg->angular.y;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80024ae:	4610      	mov	r0, r2
 80024b0:	4619      	mov	r1, r3
 80024b2:	f7fe fb0b 	bl	8000acc <__aeabi_d2f>
 80024b6:	4603      	mov	r3, r0
 80024b8:	4a0b      	ldr	r2, [pc, #44]	@ (80024e8 <subscription_callback+0x9c>)
 80024ba:	6013      	str	r3, [r2, #0]
    angular_z = twist_msg->angular.z;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 80024c2:	4610      	mov	r0, r2
 80024c4:	4619      	mov	r1, r3
 80024c6:	f7fe fb01 	bl	8000acc <__aeabi_d2f>
 80024ca:	4603      	mov	r3, r0
 80024cc:	4a07      	ldr	r2, [pc, #28]	@ (80024ec <subscription_callback+0xa0>)
 80024ce:	6013      	str	r3, [r2, #0]
}
 80024d0:	bf00      	nop
 80024d2:	3710      	adds	r7, #16
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}
 80024d8:	200042bc 	.word	0x200042bc
 80024dc:	200042c0 	.word	0x200042c0
 80024e0:	200042c4 	.word	0x200042c4
 80024e4:	200042c8 	.word	0x200042c8
 80024e8:	200042cc 	.word	0x200042cc
 80024ec:	200042d0 	.word	0x200042d0

080024f0 <StartDefaultTask>:

void StartDefaultTask(void *argument) {
 80024f0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80024f4:	b0b2      	sub	sp, #200	@ 0xc8
 80024f6:	af02      	add	r7, sp, #8
 80024f8:	f8c7 00a4 	str.w	r0, [r7, #164]	@ 0xa4

  // micro-ROS configuration
  rmw_uros_set_custom_transport(true, (void*) &hlpuart1, cubemx_transport_open, cubemx_transport_close, cubemx_transport_write, cubemx_transport_read);
 80024fc:	4b69      	ldr	r3, [pc, #420]	@ (80026a4 <StartDefaultTask+0x1b4>)
 80024fe:	9301      	str	r3, [sp, #4]
 8002500:	4b69      	ldr	r3, [pc, #420]	@ (80026a8 <StartDefaultTask+0x1b8>)
 8002502:	9300      	str	r3, [sp, #0]
 8002504:	4b69      	ldr	r3, [pc, #420]	@ (80026ac <StartDefaultTask+0x1bc>)
 8002506:	4a6a      	ldr	r2, [pc, #424]	@ (80026b0 <StartDefaultTask+0x1c0>)
 8002508:	496a      	ldr	r1, [pc, #424]	@ (80026b4 <StartDefaultTask+0x1c4>)
 800250a:	2001      	movs	r0, #1
 800250c:	f00c fed8 	bl	800f2c0 <rmw_uros_set_custom_transport>

  rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 8002510:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8002514:	4618      	mov	r0, r3
 8002516:	f00c fdef 	bl	800f0f8 <rcutils_get_zero_initialized_allocator>
  freeRTOS_allocator.allocate = microros_allocate;
 800251a:	4b67      	ldr	r3, [pc, #412]	@ (80026b8 <StartDefaultTask+0x1c8>)
 800251c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  freeRTOS_allocator.deallocate = microros_deallocate;
 8002520:	4b66      	ldr	r3, [pc, #408]	@ (80026bc <StartDefaultTask+0x1cc>)
 8002522:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  freeRTOS_allocator.reallocate = microros_reallocate;
 8002526:	4b66      	ldr	r3, [pc, #408]	@ (80026c0 <StartDefaultTask+0x1d0>)
 8002528:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 800252c:	4b65      	ldr	r3, [pc, #404]	@ (80026c4 <StartDefaultTask+0x1d4>)
 800252e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8

  if (!rcutils_set_default_allocator(&freeRTOS_allocator)) {
 8002532:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8002536:	4618      	mov	r0, r3
 8002538:	f00c fdec 	bl	800f114 <rcutils_set_default_allocator>
 800253c:	4603      	mov	r3, r0
 800253e:	f083 0301 	eor.w	r3, r3, #1
 8002542:	b2db      	uxtb	r3, r3
 8002544:	2b00      	cmp	r3, #0
 8002546:	d003      	beq.n	8002550 <StartDefaultTask+0x60>
	  printf("Error on default allocators (line %d)\n", __LINE__);
 8002548:	21b0      	movs	r1, #176	@ 0xb0
 800254a:	485f      	ldr	r0, [pc, #380]	@ (80026c8 <StartDefaultTask+0x1d8>)
 800254c:	f018 f980 	bl	801a850 <iprintf>
  }
  allocator = rcl_get_default_allocator();
 8002550:	4c5e      	ldr	r4, [pc, #376]	@ (80026cc <StartDefaultTask+0x1dc>)
 8002552:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8002556:	4618      	mov	r0, r3
 8002558:	f00c fdfa 	bl	800f150 <rcutils_get_default_allocator>
 800255c:	4625      	mov	r5, r4
 800255e:	f107 0488 	add.w	r4, r7, #136	@ 0x88
 8002562:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002564:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002566:	6823      	ldr	r3, [r4, #0]
 8002568:	602b      	str	r3, [r5, #0]

  //create init
  init_options = rcl_get_zero_initialized_init_options();
 800256a:	f00b fc51 	bl	800de10 <rcl_get_zero_initialized_init_options>
 800256e:	4603      	mov	r3, r0
 8002570:	4a57      	ldr	r2, [pc, #348]	@ (80026d0 <StartDefaultTask+0x1e0>)
 8002572:	6013      	str	r3, [r2, #0]
  RCLSOFTCHECK(rcl_init_options_init(&init_options, allocator));
 8002574:	4b55      	ldr	r3, [pc, #340]	@ (80026cc <StartDefaultTask+0x1dc>)
 8002576:	466c      	mov	r4, sp
 8002578:	f103 020c 	add.w	r2, r3, #12
 800257c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002580:	e884 0003 	stmia.w	r4, {r0, r1}
 8002584:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002586:	4852      	ldr	r0, [pc, #328]	@ (80026d0 <StartDefaultTask+0x1e0>)
 8002588:	f00b fc44 	bl	800de14 <rcl_init_options_init>
  RCLSOFTCHECK(rcl_init_options_set_domain_id(&init_options, 99));
 800258c:	2163      	movs	r1, #99	@ 0x63
 800258e:	4850      	ldr	r0, [pc, #320]	@ (80026d0 <StartDefaultTask+0x1e0>)
 8002590:	f00b fd3c 	bl	800e00c <rcl_init_options_set_domain_id>

  //create support
  rclc_support_init_with_options(&support, 0, NULL, &init_options, &allocator);
 8002594:	4b4d      	ldr	r3, [pc, #308]	@ (80026cc <StartDefaultTask+0x1dc>)
 8002596:	9300      	str	r3, [sp, #0]
 8002598:	4b4d      	ldr	r3, [pc, #308]	@ (80026d0 <StartDefaultTask+0x1e0>)
 800259a:	2200      	movs	r2, #0
 800259c:	2100      	movs	r1, #0
 800259e:	484d      	ldr	r0, [pc, #308]	@ (80026d4 <StartDefaultTask+0x1e4>)
 80025a0:	f00c fc9a 	bl	800eed8 <rclc_support_init_with_options>

  // create node
  rclc_node_init_default(&node, "uros_motor_node", "", &support);
 80025a4:	4b4b      	ldr	r3, [pc, #300]	@ (80026d4 <StartDefaultTask+0x1e4>)
 80025a6:	4a4c      	ldr	r2, [pc, #304]	@ (80026d8 <StartDefaultTask+0x1e8>)
 80025a8:	494c      	ldr	r1, [pc, #304]	@ (80026dc <StartDefaultTask+0x1ec>)
 80025aa:	484d      	ldr	r0, [pc, #308]	@ (80026e0 <StartDefaultTask+0x1f0>)
 80025ac:	f00c fcc8 	bl	800ef40 <rclc_node_init_default>

  pub_msg.layout.dim.capacity = 1;
 80025b0:	4b4c      	ldr	r3, [pc, #304]	@ (80026e4 <StartDefaultTask+0x1f4>)
 80025b2:	2201      	movs	r2, #1
 80025b4:	609a      	str	r2, [r3, #8]
  pub_msg.layout.dim.size = 1;
 80025b6:	4b4b      	ldr	r3, [pc, #300]	@ (80026e4 <StartDefaultTask+0x1f4>)
 80025b8:	2201      	movs	r2, #1
 80025ba:	605a      	str	r2, [r3, #4]
  pub_msg.layout.dim.data = malloc(sizeof(std_msgs__msg__MultiArrayDimension) * 1);
 80025bc:	2014      	movs	r0, #20
 80025be:	f017 fe53 	bl	801a268 <malloc>
 80025c2:	4603      	mov	r3, r0
 80025c4:	461a      	mov	r2, r3
 80025c6:	4b47      	ldr	r3, [pc, #284]	@ (80026e4 <StartDefaultTask+0x1f4>)
 80025c8:	601a      	str	r2, [r3, #0]

  pub_msg.layout.dim.data[0].label.data = malloc(10);
 80025ca:	4b46      	ldr	r3, [pc, #280]	@ (80026e4 <StartDefaultTask+0x1f4>)
 80025cc:	681c      	ldr	r4, [r3, #0]
 80025ce:	200a      	movs	r0, #10
 80025d0:	f017 fe4a 	bl	801a268 <malloc>
 80025d4:	4603      	mov	r3, r0
 80025d6:	6023      	str	r3, [r4, #0]
  pub_msg.layout.dim.data[0].label.capacity = 10;
 80025d8:	4b42      	ldr	r3, [pc, #264]	@ (80026e4 <StartDefaultTask+0x1f4>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	220a      	movs	r2, #10
 80025de:	609a      	str	r2, [r3, #8]
  pub_msg.layout.dim.data[0].label.size = strlen("twist_data");
 80025e0:	4b40      	ldr	r3, [pc, #256]	@ (80026e4 <StartDefaultTask+0x1f4>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	220a      	movs	r2, #10
 80025e6:	605a      	str	r2, [r3, #4]
  strcpy(pub_msg.layout.dim.data[0].label.data, "twist_data");
 80025e8:	4b3e      	ldr	r3, [pc, #248]	@ (80026e4 <StartDefaultTask+0x1f4>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	493e      	ldr	r1, [pc, #248]	@ (80026e8 <StartDefaultTask+0x1f8>)
 80025f0:	461a      	mov	r2, r3
 80025f2:	460b      	mov	r3, r1
 80025f4:	cb03      	ldmia	r3!, {r0, r1}
 80025f6:	6010      	str	r0, [r2, #0]
 80025f8:	6051      	str	r1, [r2, #4]
 80025fa:	8819      	ldrh	r1, [r3, #0]
 80025fc:	789b      	ldrb	r3, [r3, #2]
 80025fe:	8111      	strh	r1, [r2, #8]
 8002600:	7293      	strb	r3, [r2, #10]

  pub_msg.layout.data_offset = 0;
 8002602:	4b38      	ldr	r3, [pc, #224]	@ (80026e4 <StartDefaultTask+0x1f4>)
 8002604:	2200      	movs	r2, #0
 8002606:	60da      	str	r2, [r3, #12]

  pub_msg.data.capacity = 6;
 8002608:	4b36      	ldr	r3, [pc, #216]	@ (80026e4 <StartDefaultTask+0x1f4>)
 800260a:	2206      	movs	r2, #6
 800260c:	619a      	str	r2, [r3, #24]
  pub_msg.data.size = 6;
 800260e:	4b35      	ldr	r3, [pc, #212]	@ (80026e4 <StartDefaultTask+0x1f4>)
 8002610:	2206      	movs	r2, #6
 8002612:	615a      	str	r2, [r3, #20]
  pub_msg.data.data = malloc(6 * sizeof(double));
 8002614:	2030      	movs	r0, #48	@ 0x30
 8002616:	f017 fe27 	bl	801a268 <malloc>
 800261a:	4603      	mov	r3, r0
 800261c:	461a      	mov	r2, r3
 800261e:	4b31      	ldr	r3, [pc, #196]	@ (80026e4 <StartDefaultTask+0x1f4>)
 8002620:	611a      	str	r2, [r3, #16]

  // Create publisher
  rclc_publisher_init_default(
 8002622:	f00e f913 	bl	801084c <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray>
 8002626:	4602      	mov	r2, r0
 8002628:	4b30      	ldr	r3, [pc, #192]	@ (80026ec <StartDefaultTask+0x1fc>)
 800262a:	492d      	ldr	r1, [pc, #180]	@ (80026e0 <StartDefaultTask+0x1f0>)
 800262c:	4830      	ldr	r0, [pc, #192]	@ (80026f0 <StartDefaultTask+0x200>)
 800262e:	f00c fcc3 	bl	800efb8 <rclc_publisher_init_default>
      ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Float64MultiArray),
      "dummy_sub"
  );

  // Create subscriber
  rclc_subscription_init_best_effort(
 8002632:	f009 ff31 	bl	800c498 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist>
 8002636:	4602      	mov	r2, r0
 8002638:	4b2e      	ldr	r3, [pc, #184]	@ (80026f4 <StartDefaultTask+0x204>)
 800263a:	4929      	ldr	r1, [pc, #164]	@ (80026e0 <StartDefaultTask+0x1f0>)
 800263c:	482e      	ldr	r0, [pc, #184]	@ (80026f8 <StartDefaultTask+0x208>)
 800263e:	f00c fcef 	bl	800f020 <rclc_subscription_init_best_effort>
      ROSIDL_GET_MSG_TYPE_SUPPORT(geometry_msgs, msg, Twist),
      "dummy_pub"
  );

  //create timer
  rclc_timer_init_default(&timer, &support, timer_period, timer_callback);
 8002642:	4a2e      	ldr	r2, [pc, #184]	@ (80026fc <StartDefaultTask+0x20c>)
 8002644:	2300      	movs	r3, #0
 8002646:	4690      	mov	r8, r2
 8002648:	4699      	mov	r9, r3
 800264a:	4b2d      	ldr	r3, [pc, #180]	@ (8002700 <StartDefaultTask+0x210>)
 800264c:	9300      	str	r3, [sp, #0]
 800264e:	4642      	mov	r2, r8
 8002650:	464b      	mov	r3, r9
 8002652:	4920      	ldr	r1, [pc, #128]	@ (80026d4 <StartDefaultTask+0x1e4>)
 8002654:	482b      	ldr	r0, [pc, #172]	@ (8002704 <StartDefaultTask+0x214>)
 8002656:	f00c fd17 	bl	800f088 <rclc_timer_init_default>

  //create executor
  executor = rclc_executor_get_zero_initialized_executor();
 800265a:	4c2b      	ldr	r4, [pc, #172]	@ (8002708 <StartDefaultTask+0x218>)
 800265c:	463b      	mov	r3, r7
 800265e:	4618      	mov	r0, r3
 8002660:	f00c f934 	bl	800e8cc <rclc_executor_get_zero_initialized_executor>
 8002664:	4620      	mov	r0, r4
 8002666:	463b      	mov	r3, r7
 8002668:	2288      	movs	r2, #136	@ 0x88
 800266a:	4619      	mov	r1, r3
 800266c:	f018 fb3f 	bl	801acee <memcpy>
  rclc_executor_init(&executor, &support.context, 2, &allocator); // total number of handles = #subscriptions + #timers
 8002670:	4b16      	ldr	r3, [pc, #88]	@ (80026cc <StartDefaultTask+0x1dc>)
 8002672:	2202      	movs	r2, #2
 8002674:	4917      	ldr	r1, [pc, #92]	@ (80026d4 <StartDefaultTask+0x1e4>)
 8002676:	4824      	ldr	r0, [pc, #144]	@ (8002708 <StartDefaultTask+0x218>)
 8002678:	f00c f932 	bl	800e8e0 <rclc_executor_init>
  rclc_executor_add_timer(&executor, &timer);
 800267c:	4921      	ldr	r1, [pc, #132]	@ (8002704 <StartDefaultTask+0x214>)
 800267e:	4822      	ldr	r0, [pc, #136]	@ (8002708 <StartDefaultTask+0x218>)
 8002680:	f00c f9d2 	bl	800ea28 <rclc_executor_add_timer>
  rclc_executor_add_subscription(&executor, &subscriber, &sub_msg, &subscription_callback, ON_NEW_DATA);
 8002684:	2300      	movs	r3, #0
 8002686:	9300      	str	r3, [sp, #0]
 8002688:	4b20      	ldr	r3, [pc, #128]	@ (800270c <StartDefaultTask+0x21c>)
 800268a:	4a21      	ldr	r2, [pc, #132]	@ (8002710 <StartDefaultTask+0x220>)
 800268c:	491a      	ldr	r1, [pc, #104]	@ (80026f8 <StartDefaultTask+0x208>)
 800268e:	481e      	ldr	r0, [pc, #120]	@ (8002708 <StartDefaultTask+0x218>)
 8002690:	f00c f996 	bl	800e9c0 <rclc_executor_add_subscription>
  rclc_executor_spin(&executor);
 8002694:	481c      	ldr	r0, [pc, #112]	@ (8002708 <StartDefaultTask+0x218>)
 8002696:	f00c fbdd 	bl	800ee54 <rclc_executor_spin>
}
 800269a:	bf00      	nop
 800269c:	37c0      	adds	r7, #192	@ 0xc0
 800269e:	46bd      	mov	sp, r7
 80026a0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80026a4:	0800421d 	.word	0x0800421d
 80026a8:	080041b9 	.word	0x080041b9
 80026ac:	08004199 	.word	0x08004199
 80026b0:	0800416d 	.word	0x0800416d
 80026b4:	20004690 	.word	0x20004690
 80026b8:	08002a69 	.word	0x08002a69
 80026bc:	08002aad 	.word	0x08002aad
 80026c0:	08002ae5 	.word	0x08002ae5
 80026c4:	08002b51 	.word	0x08002b51
 80026c8:	0801cc74 	.word	0x0801cc74
 80026cc:	200041bc 	.word	0x200041bc
 80026d0:	200041d0 	.word	0x200041d0
 80026d4:	20004188 	.word	0x20004188
 80026d8:	0801cc9c 	.word	0x0801cc9c
 80026dc:	0801cca0 	.word	0x0801cca0
 80026e0:	20004180 	.word	0x20004180
 80026e4:	20004268 	.word	0x20004268
 80026e8:	0801ccb0 	.word	0x0801ccb0
 80026ec:	0801ccbc 	.word	0x0801ccbc
 80026f0:	20004260 	.word	0x20004260
 80026f4:	0801ccc8 	.word	0x0801ccc8
 80026f8:	20004264 	.word	0x20004264
 80026fc:	00989680 	.word	0x00989680
 8002700:	08002319 	.word	0x08002319
 8002704:	200042b8 	.word	0x200042b8
 8002708:	200041d8 	.word	0x200041d8
 800270c:	0800244d 	.word	0x0800244d
 8002710:	20004288 	.word	0x20004288

08002714 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002718:	f001 fdfd 	bl	8004316 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800271c:	f000 f898 	bl	8002850 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002720:	f7ff fd54 	bl	80021cc <MX_GPIO_Init>
  MX_DMA_Init();
 8002724:	f7ff fd20 	bl	8002168 <MX_DMA_Init>
  MX_TIM3_Init();
 8002728:	f001 f80e 	bl	8003748 <MX_TIM3_Init>
  MX_TIM4_Init();
 800272c:	f001 f862 	bl	80037f4 <MX_TIM4_Init>
  MX_TIM5_Init();
 8002730:	f001 f8b6 	bl	80038a0 <MX_TIM5_Init>
  MX_TIM20_Init();
 8002734:	f001 f9c2 	bl	8003abc <MX_TIM20_Init>
  MX_TIM8_Init();
 8002738:	f001 f908 	bl	800394c <MX_TIM8_Init>
  MX_TIM2_Init();
 800273c:	f000 ffb6 	bl	80036ac <MX_TIM2_Init>
  MX_LPUART1_UART_Init();
 8002740:	f001 fc0c 	bl	8003f5c <MX_LPUART1_UART_Init>
  MX_IWDG_Init();
 8002744:	f7ff fdca 	bl	80022dc <MX_IWDG_Init>
  /* USER CODE BEGIN 2 */
	transporter_begin();
 8002748:	f001 fb84 	bl	8003e54 <transporter_begin>

	  // 1. Sine Wave Example
	  SIGNAL_init(&sine_sg, SIGNAL_SINE);
 800274c:	2100      	movs	r1, #0
 800274e:	4837      	ldr	r0, [pc, #220]	@ (800282c <main+0x118>)
 8002750:	f000 fb54 	bl	8002dfc <SIGNAL_init>
	  SIGNAL_config_sine(&sine_sg,
 8002754:	eddf 2a36 	vldr	s5, [pc, #216]	@ 8002830 <main+0x11c>
 8002758:	ed9f 2a36 	vldr	s4, [pc, #216]	@ 8002834 <main+0x120>
 800275c:	eddf 1a36 	vldr	s3, [pc, #216]	@ 8002838 <main+0x124>
 8002760:	ed9f 1a35 	vldr	s2, [pc, #212]	@ 8002838 <main+0x124>
 8002764:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8002768:	ed9f 0a31 	vldr	s0, [pc, #196]	@ 8002830 <main+0x11c>
 800276c:	482f      	ldr	r0, [pc, #188]	@ (800282c <main+0x118>)
 800276e:	f000 fba3 	bl	8002eb8 <SIGNAL_config_sine>
	      -0.7f/3.0f,   // Min Setpoint
	      0.7f/3.0f     // Max Setpoint
	  );

	  // 2. Chirp Wave Example (Linear)
	  SIGNAL_init(&chirp_linear_sg, SIGNAL_CHIRP);
 8002772:	2101      	movs	r1, #1
 8002774:	4831      	ldr	r0, [pc, #196]	@ (800283c <main+0x128>)
 8002776:	f000 fb41 	bl	8002dfc <SIGNAL_init>
	  SIGNAL_config_chirp(&chirp_linear_sg,
 800277a:	eddf 2a2d 	vldr	s5, [pc, #180]	@ 8002830 <main+0x11c>
 800277e:	ed9f 2a2d 	vldr	s4, [pc, #180]	@ 8002834 <main+0x120>
 8002782:	2100      	movs	r1, #0
 8002784:	eef1 1a04 	vmov.f32	s3, #20	@ 0x40a00000  5.0
 8002788:	eeb2 1a04 	vmov.f32	s2, #36	@ 0x41200000  10.0
 800278c:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8002790:	ed9f 0a27 	vldr	s0, [pc, #156]	@ 8002830 <main+0x11c>
 8002794:	4829      	ldr	r0, [pc, #164]	@ (800283c <main+0x128>)
 8002796:	f000 fbba 	bl	8002f0e <SIGNAL_config_chirp>
	      -0.7f/3.0f,       // Min Setpoint
	      0.7f/3.0f         // Max Setpoint
	  );

	  // 3. Chirp Wave Example (Logarithmic)
	  SIGNAL_init(&chirp_log_sg, SIGNAL_CHIRP);
 800279a:	2101      	movs	r1, #1
 800279c:	4828      	ldr	r0, [pc, #160]	@ (8002840 <main+0x12c>)
 800279e:	f000 fb2d 	bl	8002dfc <SIGNAL_init>
	  SIGNAL_config_chirp(&chirp_log_sg,
 80027a2:	eddf 2a23 	vldr	s5, [pc, #140]	@ 8002830 <main+0x11c>
 80027a6:	ed9f 2a23 	vldr	s4, [pc, #140]	@ 8002834 <main+0x120>
 80027aa:	2101      	movs	r1, #1
 80027ac:	eef1 1a04 	vmov.f32	s3, #20	@ 0x40a00000  5.0
 80027b0:	eeb2 1a04 	vmov.f32	s2, #36	@ 0x41200000  10.0
 80027b4:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 80027b8:	ed9f 0a1d 	vldr	s0, [pc, #116]	@ 8002830 <main+0x11c>
 80027bc:	4820      	ldr	r0, [pc, #128]	@ (8002840 <main+0x12c>)
 80027be:	f000 fba6 	bl	8002f0e <SIGNAL_config_chirp>
	      -0.7f/3.0f,           // Min Setpoint
	      0.7f/3.0f             // Max Setpoint
	  );

	  // 4. Square Wave Example
	  SIGNAL_init(&square_sg, SIGNAL_SQUARE);
 80027c2:	2102      	movs	r1, #2
 80027c4:	481f      	ldr	r0, [pc, #124]	@ (8002844 <main+0x130>)
 80027c6:	f000 fb19 	bl	8002dfc <SIGNAL_init>
	  SIGNAL_config_square(&square_sg,
 80027ca:	ed9f 3a19 	vldr	s6, [pc, #100]	@ 8002830 <main+0x11c>
 80027ce:	eddf 2a19 	vldr	s5, [pc, #100]	@ 8002834 <main+0x120>
 80027d2:	ed9f 2a19 	vldr	s4, [pc, #100]	@ 8002838 <main+0x124>
 80027d6:	eddf 1a18 	vldr	s3, [pc, #96]	@ 8002838 <main+0x124>
 80027da:	ed9f 1a1b 	vldr	s2, [pc, #108]	@ 8002848 <main+0x134>
 80027de:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 80027e2:	ed9f 0a13 	vldr	s0, [pc, #76]	@ 8002830 <main+0x11c>
 80027e6:	4817      	ldr	r0, [pc, #92]	@ (8002844 <main+0x130>)
 80027e8:	f000 fbc5 	bl	8002f76 <SIGNAL_config_square>
	      -0.7f/3.0f,   // Min Setpoint
	      0.7f/3.0f     // Max Setpoint
	  );

	  // 5. Ramp Wave Example
	  SIGNAL_init(&ramp_sg, SIGNAL_RAMP);
 80027ec:	2103      	movs	r1, #3
 80027ee:	4817      	ldr	r0, [pc, #92]	@ (800284c <main+0x138>)
 80027f0:	f000 fb04 	bl	8002dfc <SIGNAL_init>
	  SIGNAL_config_ramp(&ramp_sg,
 80027f4:	eddf 3a0e 	vldr	s7, [pc, #56]	@ 8002830 <main+0x11c>
 80027f8:	ed9f 3a0e 	vldr	s6, [pc, #56]	@ 8002834 <main+0x120>
 80027fc:	eddf 2a0e 	vldr	s5, [pc, #56]	@ 8002838 <main+0x124>
 8002800:	ed9f 2a0d 	vldr	s4, [pc, #52]	@ 8002838 <main+0x124>
 8002804:	eddf 1a0a 	vldr	s3, [pc, #40]	@ 8002830 <main+0x11c>
 8002808:	ed9f 1a0a 	vldr	s2, [pc, #40]	@ 8002834 <main+0x120>
 800280c:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8002810:	ed9f 0a07 	vldr	s0, [pc, #28]	@ 8002830 <main+0x11c>
 8002814:	480d      	ldr	r0, [pc, #52]	@ (800284c <main+0x138>)
 8002816:	f000 fbde 	bl	8002fd6 <SIGNAL_config_ramp>
	  );

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800281a:	f007 f893 	bl	8009944 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 800281e:	f7ff fa41 	bl	8001ca4 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8002822:	f007 f8b3 	bl	800998c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8002826:	bf00      	nop
 8002828:	e7fd      	b.n	8002826 <main+0x112>
 800282a:	bf00      	nop
 800282c:	20004018 	.word	0x20004018
 8002830:	3e6eeeef 	.word	0x3e6eeeef
 8002834:	be6eeeef 	.word	0xbe6eeeef
 8002838:	00000000 	.word	0x00000000
 800283c:	2000405c 	.word	0x2000405c
 8002840:	200040a0 	.word	0x200040a0
 8002844:	200040e4 	.word	0x200040e4
 8002848:	3e99999a 	.word	0x3e99999a
 800284c:	20004128 	.word	0x20004128

08002850 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b094      	sub	sp, #80	@ 0x50
 8002854:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002856:	f107 0318 	add.w	r3, r7, #24
 800285a:	2238      	movs	r2, #56	@ 0x38
 800285c:	2100      	movs	r1, #0
 800285e:	4618      	mov	r0, r3
 8002860:	f018 f97c 	bl	801ab5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002864:	1d3b      	adds	r3, r7, #4
 8002866:	2200      	movs	r2, #0
 8002868:	601a      	str	r2, [r3, #0]
 800286a:	605a      	str	r2, [r3, #4]
 800286c:	609a      	str	r2, [r3, #8]
 800286e:	60da      	str	r2, [r3, #12]
 8002870:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8002872:	2000      	movs	r0, #0
 8002874:	f002 fbca 	bl	800500c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8002878:	230a      	movs	r3, #10
 800287a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800287c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002880:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002882:	2340      	movs	r3, #64	@ 0x40
 8002884:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002886:	2301      	movs	r3, #1
 8002888:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800288a:	2302      	movs	r3, #2
 800288c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800288e:	2302      	movs	r3, #2
 8002890:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8002892:	2304      	movs	r3, #4
 8002894:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8002896:	2355      	movs	r3, #85	@ 0x55
 8002898:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800289a:	2302      	movs	r3, #2
 800289c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800289e:	2302      	movs	r3, #2
 80028a0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80028a2:	2302      	movs	r3, #2
 80028a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80028a6:	f107 0318 	add.w	r3, r7, #24
 80028aa:	4618      	mov	r0, r3
 80028ac:	f002 fc62 	bl	8005174 <HAL_RCC_OscConfig>
 80028b0:	4603      	mov	r3, r0
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d001      	beq.n	80028ba <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80028b6:	f000 f8d1 	bl	8002a5c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80028ba:	230f      	movs	r3, #15
 80028bc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80028be:	2303      	movs	r3, #3
 80028c0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80028c2:	2300      	movs	r3, #0
 80028c4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80028c6:	2300      	movs	r3, #0
 80028c8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80028ca:	2300      	movs	r3, #0
 80028cc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80028ce:	1d3b      	adds	r3, r7, #4
 80028d0:	2104      	movs	r1, #4
 80028d2:	4618      	mov	r0, r3
 80028d4:	f002 ff60 	bl	8005798 <HAL_RCC_ClockConfig>
 80028d8:	4603      	mov	r3, r0
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d001      	beq.n	80028e2 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80028de:	f000 f8bd 	bl	8002a5c <Error_Handler>
  }
}
 80028e2:	bf00      	nop
 80028e4:	3750      	adds	r7, #80	@ 0x50
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}
	...

080028ec <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b082      	sub	sp, #8
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a41      	ldr	r2, [pc, #260]	@ (8002a00 <HAL_TIM_PeriodElapsedCallback+0x114>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d101      	bne.n	8002902 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 80028fe:	f001 fd23 	bl	8004348 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if (htim == &htim2) {
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	4a3f      	ldr	r2, [pc, #252]	@ (8002a04 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d175      	bne.n	80029f6 <HAL_TIM_PeriodElapsedCallback+0x10a>
      QEI_get_diff_count(&encoder3);
 800290a:	483f      	ldr	r0, [pc, #252]	@ (8002a08 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 800290c:	f7fe fff4 	bl	80018f8 <QEI_get_diff_count>
      QEI_compute_data(&encoder3);
 8002910:	483d      	ldr	r0, [pc, #244]	@ (8002a08 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8002912:	f7ff f8d1 	bl	8001ab8 <QEI_compute_data>

      QEI_get_diff_count(&encoder4);
 8002916:	483d      	ldr	r0, [pc, #244]	@ (8002a0c <HAL_TIM_PeriodElapsedCallback+0x120>)
 8002918:	f7fe ffee 	bl	80018f8 <QEI_get_diff_count>
      QEI_compute_data(&encoder4);
 800291c:	483b      	ldr	r0, [pc, #236]	@ (8002a0c <HAL_TIM_PeriodElapsedCallback+0x120>)
 800291e:	f7ff f8cb 	bl	8001ab8 <QEI_compute_data>

      sine_sample = SIGNAL_generate(&sine_sg, 0.001f);
 8002922:	ed9f 0a3b 	vldr	s0, [pc, #236]	@ 8002a10 <HAL_TIM_PeriodElapsedCallback+0x124>
 8002926:	483b      	ldr	r0, [pc, #236]	@ (8002a14 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8002928:	f000 fb8a 	bl	8003040 <SIGNAL_generate>
 800292c:	eef0 7a40 	vmov.f32	s15, s0
 8002930:	4b39      	ldr	r3, [pc, #228]	@ (8002a18 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8002932:	edc3 7a00 	vstr	s15, [r3]
      chirp_Linear_sample = SIGNAL_generate(&chirp_linear_sg, 0.001f);
 8002936:	ed9f 0a36 	vldr	s0, [pc, #216]	@ 8002a10 <HAL_TIM_PeriodElapsedCallback+0x124>
 800293a:	4838      	ldr	r0, [pc, #224]	@ (8002a1c <HAL_TIM_PeriodElapsedCallback+0x130>)
 800293c:	f000 fb80 	bl	8003040 <SIGNAL_generate>
 8002940:	eef0 7a40 	vmov.f32	s15, s0
 8002944:	4b36      	ldr	r3, [pc, #216]	@ (8002a20 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8002946:	edc3 7a00 	vstr	s15, [r3]
      chirp_log_sample = SIGNAL_generate(&chirp_log_sg, 0.001f);
 800294a:	ed9f 0a31 	vldr	s0, [pc, #196]	@ 8002a10 <HAL_TIM_PeriodElapsedCallback+0x124>
 800294e:	4835      	ldr	r0, [pc, #212]	@ (8002a24 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8002950:	f000 fb76 	bl	8003040 <SIGNAL_generate>
 8002954:	eef0 7a40 	vmov.f32	s15, s0
 8002958:	4b33      	ldr	r3, [pc, #204]	@ (8002a28 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 800295a:	edc3 7a00 	vstr	s15, [r3]
		square_sample = SIGNAL_generate(&square_sg, 0.001f);
 800295e:	ed9f 0a2c 	vldr	s0, [pc, #176]	@ 8002a10 <HAL_TIM_PeriodElapsedCallback+0x124>
 8002962:	4832      	ldr	r0, [pc, #200]	@ (8002a2c <HAL_TIM_PeriodElapsedCallback+0x140>)
 8002964:	f000 fb6c 	bl	8003040 <SIGNAL_generate>
 8002968:	eef0 7a40 	vmov.f32	s15, s0
 800296c:	4b30      	ldr	r3, [pc, #192]	@ (8002a30 <HAL_TIM_PeriodElapsedCallback+0x144>)
 800296e:	edc3 7a00 	vstr	s15, [r3]
		ramp_sample = SIGNAL_generate(&ramp_sg, 0.001f);
 8002972:	ed9f 0a27 	vldr	s0, [pc, #156]	@ 8002a10 <HAL_TIM_PeriodElapsedCallback+0x124>
 8002976:	482f      	ldr	r0, [pc, #188]	@ (8002a34 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8002978:	f000 fb62 	bl	8003040 <SIGNAL_generate>
 800297c:	eef0 7a40 	vmov.f32	s15, s0
 8002980:	4b2d      	ldr	r3, [pc, #180]	@ (8002a38 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8002982:	edc3 7a00 	vstr	s15, [r3]

		setpoint = sine_sample;
 8002986:	4b24      	ldr	r3, [pc, #144]	@ (8002a18 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a2c      	ldr	r2, [pc, #176]	@ (8002a3c <HAL_TIM_PeriodElapsedCallback+0x150>)
 800298c:	6013      	str	r3, [r2, #0]

      filteredValue = FIR_process(&lowPassFilter, encoder4.radps);
 800298e:	4b1f      	ldr	r3, [pc, #124]	@ (8002a0c <HAL_TIM_PeriodElapsedCallback+0x120>)
 8002990:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8002994:	eeb0 0a67 	vmov.f32	s0, s15
 8002998:	4829      	ldr	r0, [pc, #164]	@ (8002a40 <HAL_TIM_PeriodElapsedCallback+0x154>)
 800299a:	f7fe fdd7 	bl	800154c <FIR_process>
 800299e:	eef0 7a40 	vmov.f32	s15, s0
 80029a2:	4b28      	ldr	r3, [pc, #160]	@ (8002a44 <HAL_TIM_PeriodElapsedCallback+0x158>)
 80029a4:	edc3 7a00 	vstr	s15, [r3]
      cmd_vel = PWM_Satuation(PID_CONTROLLER_Compute(&pid4, setpoint - filteredValue), 65535, -65535);
 80029a8:	4b24      	ldr	r3, [pc, #144]	@ (8002a3c <HAL_TIM_PeriodElapsedCallback+0x150>)
 80029aa:	ed93 7a00 	vldr	s14, [r3]
 80029ae:	4b25      	ldr	r3, [pc, #148]	@ (8002a44 <HAL_TIM_PeriodElapsedCallback+0x158>)
 80029b0:	edd3 7a00 	vldr	s15, [r3]
 80029b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029b8:	eeb0 0a67 	vmov.f32	s0, s15
 80029bc:	4822      	ldr	r0, [pc, #136]	@ (8002a48 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 80029be:	f7fe fb14 	bl	8000fea <PID_CONTROLLER_Compute>
 80029c2:	eef0 7a40 	vmov.f32	s15, s0
 80029c6:	4921      	ldr	r1, [pc, #132]	@ (8002a4c <HAL_TIM_PeriodElapsedCallback+0x160>)
 80029c8:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80029cc:	eeb0 0a67 	vmov.f32	s0, s15
 80029d0:	f7fe fab2 	bl	8000f38 <PWM_Satuation>
 80029d4:	ee07 0a90 	vmov	s15, r0
 80029d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80029dc:	4b1c      	ldr	r3, [pc, #112]	@ (8002a50 <HAL_TIM_PeriodElapsedCallback+0x164>)
 80029de:	edc3 7a00 	vstr	s15, [r3]
      MDXX_set_range(&motor4, 2000, cmd_vel);
 80029e2:	4b1b      	ldr	r3, [pc, #108]	@ (8002a50 <HAL_TIM_PeriodElapsedCallback+0x164>)
 80029e4:	edd3 7a00 	vldr	s15, [r3]
 80029e8:	eef0 0a67 	vmov.f32	s1, s15
 80029ec:	ed9f 0a19 	vldr	s0, [pc, #100]	@ 8002a54 <HAL_TIM_PeriodElapsedCallback+0x168>
 80029f0:	4819      	ldr	r0, [pc, #100]	@ (8002a58 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 80029f2:	f7fe fbb1 	bl	8001158 <MDXX_set_range>
  }
  /* USER CODE END Callback 1 */
}
 80029f6:	bf00      	nop
 80029f8:	3708      	adds	r7, #8
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}
 80029fe:	bf00      	nop
 8002a00:	40012c00 	.word	0x40012c00
 8002a04:	20004334 	.word	0x20004334
 8002a08:	20004594 	.word	0x20004594
 8002a0c:	200045e0 	.word	0x200045e0
 8002a10:	3a83126f 	.word	0x3a83126f
 8002a14:	20004018 	.word	0x20004018
 8002a18:	2000416c 	.word	0x2000416c
 8002a1c:	2000405c 	.word	0x2000405c
 8002a20:	20004170 	.word	0x20004170
 8002a24:	200040a0 	.word	0x200040a0
 8002a28:	20004174 	.word	0x20004174
 8002a2c:	200040e4 	.word	0x200040e4
 8002a30:	20004178 	.word	0x20004178
 8002a34:	20004128 	.word	0x20004128
 8002a38:	2000417c 	.word	0x2000417c
 8002a3c:	2000400c 	.word	0x2000400c
 8002a40:	20004684 	.word	0x20004684
 8002a44:	20004010 	.word	0x20004010
 8002a48:	20004658 	.word	0x20004658
 8002a4c:	ffff0001 	.word	0xffff0001
 8002a50:	20004014 	.word	0x20004014
 8002a54:	44fa0000 	.word	0x44fa0000
 8002a58:	20004548 	.word	0x20004548

08002a5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002a60:	b672      	cpsid	i
}
 8002a62:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002a64:	bf00      	nop
 8002a66:	e7fd      	b.n	8002a64 <Error_Handler+0x8>

08002a68 <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b082      	sub	sp, #8
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
 8002a70:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8002a72:	4b0c      	ldr	r3, [pc, #48]	@ (8002aa4 <microros_allocate+0x3c>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	461a      	mov	r2, r3
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	4413      	add	r3, r2
 8002a7c:	461a      	mov	r2, r3
 8002a7e:	4b09      	ldr	r3, [pc, #36]	@ (8002aa4 <microros_allocate+0x3c>)
 8002a80:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8002a82:	4b09      	ldr	r3, [pc, #36]	@ (8002aa8 <microros_allocate+0x40>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	461a      	mov	r2, r3
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	4413      	add	r3, r2
 8002a8c:	461a      	mov	r2, r3
 8002a8e:	4b06      	ldr	r3, [pc, #24]	@ (8002aa8 <microros_allocate+0x40>)
 8002a90:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 8002a92:	6878      	ldr	r0, [r7, #4]
 8002a94:	f7ff f918 	bl	8001cc8 <pvPortMallocMicroROS>
 8002a98:	4603      	mov	r3, r0
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	3708      	adds	r7, #8
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}
 8002aa2:	bf00      	nop
 8002aa4:	200042d8 	.word	0x200042d8
 8002aa8:	200042dc 	.word	0x200042dc

08002aac <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b082      	sub	sp, #8
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
 8002ab4:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d00c      	beq.n	8002ad6 <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 8002abc:	6878      	ldr	r0, [r7, #4]
 8002abe:	f7ff fa27 	bl	8001f10 <getBlockSize>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	4a06      	ldr	r2, [pc, #24]	@ (8002ae0 <microros_deallocate+0x34>)
 8002ac6:	6812      	ldr	r2, [r2, #0]
 8002ac8:	1ad3      	subs	r3, r2, r3
 8002aca:	461a      	mov	r2, r3
 8002acc:	4b04      	ldr	r3, [pc, #16]	@ (8002ae0 <microros_deallocate+0x34>)
 8002ace:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 8002ad0:	6878      	ldr	r0, [r7, #4]
 8002ad2:	f7ff f9c1 	bl	8001e58 <vPortFreeMicroROS>
  }
}
 8002ad6:	bf00      	nop
 8002ad8:	3708      	adds	r7, #8
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}
 8002ade:	bf00      	nop
 8002ae0:	200042dc 	.word	0x200042dc

08002ae4 <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b084      	sub	sp, #16
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	60f8      	str	r0, [r7, #12]
 8002aec:	60b9      	str	r1, [r7, #8]
 8002aee:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8002af0:	4b15      	ldr	r3, [pc, #84]	@ (8002b48 <microros_reallocate+0x64>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	461a      	mov	r2, r3
 8002af6:	68bb      	ldr	r3, [r7, #8]
 8002af8:	4413      	add	r3, r2
 8002afa:	461a      	mov	r2, r3
 8002afc:	4b12      	ldr	r3, [pc, #72]	@ (8002b48 <microros_reallocate+0x64>)
 8002afe:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8002b00:	4b12      	ldr	r3, [pc, #72]	@ (8002b4c <microros_reallocate+0x68>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	461a      	mov	r2, r3
 8002b06:	68bb      	ldr	r3, [r7, #8]
 8002b08:	4413      	add	r3, r2
 8002b0a:	461a      	mov	r2, r3
 8002b0c:	4b0f      	ldr	r3, [pc, #60]	@ (8002b4c <microros_reallocate+0x68>)
 8002b0e:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d104      	bne.n	8002b20 <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 8002b16:	68b8      	ldr	r0, [r7, #8]
 8002b18:	f7ff f8d6 	bl	8001cc8 <pvPortMallocMicroROS>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	e00e      	b.n	8002b3e <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 8002b20:	68f8      	ldr	r0, [r7, #12]
 8002b22:	f7ff f9f5 	bl	8001f10 <getBlockSize>
 8002b26:	4603      	mov	r3, r0
 8002b28:	4a08      	ldr	r2, [pc, #32]	@ (8002b4c <microros_reallocate+0x68>)
 8002b2a:	6812      	ldr	r2, [r2, #0]
 8002b2c:	1ad3      	subs	r3, r2, r3
 8002b2e:	461a      	mov	r2, r3
 8002b30:	4b06      	ldr	r3, [pc, #24]	@ (8002b4c <microros_reallocate+0x68>)
 8002b32:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 8002b34:	68b9      	ldr	r1, [r7, #8]
 8002b36:	68f8      	ldr	r0, [r7, #12]
 8002b38:	f7ff fa08 	bl	8001f4c <pvPortReallocMicroROS>
 8002b3c:	4603      	mov	r3, r0
  }
}
 8002b3e:	4618      	mov	r0, r3
 8002b40:	3710      	adds	r7, #16
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}
 8002b46:	bf00      	nop
 8002b48:	200042d8 	.word	0x200042d8
 8002b4c:	200042dc 	.word	0x200042dc

08002b50 <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b084      	sub	sp, #16
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	60f8      	str	r0, [r7, #12]
 8002b58:	60b9      	str	r1, [r7, #8]
 8002b5a:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	68ba      	ldr	r2, [r7, #8]
 8002b60:	fb02 f303 	mul.w	r3, r2, r3
 8002b64:	4a0c      	ldr	r2, [pc, #48]	@ (8002b98 <microros_zero_allocate+0x48>)
 8002b66:	6812      	ldr	r2, [r2, #0]
 8002b68:	4413      	add	r3, r2
 8002b6a:	461a      	mov	r2, r3
 8002b6c:	4b0a      	ldr	r3, [pc, #40]	@ (8002b98 <microros_zero_allocate+0x48>)
 8002b6e:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	68ba      	ldr	r2, [r7, #8]
 8002b74:	fb02 f303 	mul.w	r3, r2, r3
 8002b78:	4a08      	ldr	r2, [pc, #32]	@ (8002b9c <microros_zero_allocate+0x4c>)
 8002b7a:	6812      	ldr	r2, [r2, #0]
 8002b7c:	4413      	add	r3, r2
 8002b7e:	461a      	mov	r2, r3
 8002b80:	4b06      	ldr	r3, [pc, #24]	@ (8002b9c <microros_zero_allocate+0x4c>)
 8002b82:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 8002b84:	68b9      	ldr	r1, [r7, #8]
 8002b86:	68f8      	ldr	r0, [r7, #12]
 8002b88:	f7ff fa0d 	bl	8001fa6 <pvPortCallocMicroROS>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	4618      	mov	r0, r3
 8002b90:	3710      	adds	r7, #16
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}
 8002b96:	bf00      	nop
 8002b98:	200042d8 	.word	0x200042d8
 8002b9c:	200042dc 	.word	0x200042dc

08002ba0 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 8002ba0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002ba4:	b086      	sub	sp, #24
 8002ba6:	af00      	add	r7, sp, #0
 8002ba8:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8002bac:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 8002bb2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002bb6:	a320      	add	r3, pc, #128	@ (adr r3, 8002c38 <UTILS_NanosecondsToTimespec+0x98>)
 8002bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bbc:	f7fd ffd6 	bl	8000b6c <__aeabi_ldivmod>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	460b      	mov	r3, r1
 8002bc4:	6879      	ldr	r1, [r7, #4]
 8002bc6:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 8002bca:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002bce:	a31a      	add	r3, pc, #104	@ (adr r3, 8002c38 <UTILS_NanosecondsToTimespec+0x98>)
 8002bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bd4:	f7fd ffca 	bl	8000b6c <__aeabi_ldivmod>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	689b      	ldr	r3, [r3, #8]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	da20      	bge.n	8002c26 <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	4a11      	ldr	r2, [pc, #68]	@ (8002c30 <UTILS_NanosecondsToTimespec+0x90>)
 8002bea:	fb82 1203 	smull	r1, r2, r2, r3
 8002bee:	1712      	asrs	r2, r2, #28
 8002bf0:	17db      	asrs	r3, r3, #31
 8002bf2:	1ad3      	subs	r3, r2, r3
 8002bf4:	3301      	adds	r3, #1
 8002bf6:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bfe:	6979      	ldr	r1, [r7, #20]
 8002c00:	17c8      	asrs	r0, r1, #31
 8002c02:	460c      	mov	r4, r1
 8002c04:	4605      	mov	r5, r0
 8002c06:	ebb2 0804 	subs.w	r8, r2, r4
 8002c0a:	eb63 0905 	sbc.w	r9, r3, r5
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	689a      	ldr	r2, [r3, #8]
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	4906      	ldr	r1, [pc, #24]	@ (8002c34 <UTILS_NanosecondsToTimespec+0x94>)
 8002c1c:	fb01 f303 	mul.w	r3, r1, r3
 8002c20:	441a      	add	r2, r3
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	609a      	str	r2, [r3, #8]
    }
}
 8002c26:	bf00      	nop
 8002c28:	3718      	adds	r7, #24
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002c30:	44b82fa1 	.word	0x44b82fa1
 8002c34:	3b9aca00 	.word	0x3b9aca00
 8002c38:	3b9aca00 	.word	0x3b9aca00
 8002c3c:	00000000 	.word	0x00000000

08002c40 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 8002c40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c44:	b08e      	sub	sp, #56	@ 0x38
 8002c46:	af00      	add	r7, sp, #0
 8002c48:	6278      	str	r0, [r7, #36]	@ 0x24
 8002c4a:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 8002c4c:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8002c50:	2300      	movs	r3, #0
 8002c52:	6013      	str	r3, [r2, #0]
 8002c54:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 8002c56:	f04f 0200 	mov.w	r2, #0
 8002c5a:	f04f 0300 	mov.w	r3, #0
 8002c5e:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 8002c62:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002c66:	4618      	mov	r0, r3
 8002c68:	f008 fa14 	bl	800b094 <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 8002c6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c6e:	17da      	asrs	r2, r3, #31
 8002c70:	61bb      	str	r3, [r7, #24]
 8002c72:	61fa      	str	r2, [r7, #28]
 8002c74:	f04f 0200 	mov.w	r2, #0
 8002c78:	f04f 0300 	mov.w	r3, #0
 8002c7c:	69b9      	ldr	r1, [r7, #24]
 8002c7e:	000b      	movs	r3, r1
 8002c80:	2200      	movs	r2, #0
 8002c82:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 8002c86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c88:	2200      	movs	r2, #0
 8002c8a:	461c      	mov	r4, r3
 8002c8c:	4615      	mov	r5, r2
 8002c8e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8002c92:	1911      	adds	r1, r2, r4
 8002c94:	60b9      	str	r1, [r7, #8]
 8002c96:	416b      	adcs	r3, r5
 8002c98:	60fb      	str	r3, [r7, #12]
 8002c9a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8002c9e:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 8002ca2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8002ca6:	4602      	mov	r2, r0
 8002ca8:	460b      	mov	r3, r1
 8002caa:	f04f 0400 	mov.w	r4, #0
 8002cae:	f04f 0500 	mov.w	r5, #0
 8002cb2:	015d      	lsls	r5, r3, #5
 8002cb4:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8002cb8:	0154      	lsls	r4, r2, #5
 8002cba:	4622      	mov	r2, r4
 8002cbc:	462b      	mov	r3, r5
 8002cbe:	ebb2 0800 	subs.w	r8, r2, r0
 8002cc2:	eb63 0901 	sbc.w	r9, r3, r1
 8002cc6:	f04f 0200 	mov.w	r2, #0
 8002cca:	f04f 0300 	mov.w	r3, #0
 8002cce:	ea4f 2349 	mov.w	r3, r9, lsl #9
 8002cd2:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 8002cd6:	ea4f 2248 	mov.w	r2, r8, lsl #9
 8002cda:	4690      	mov	r8, r2
 8002cdc:	4699      	mov	r9, r3
 8002cde:	eb18 0a00 	adds.w	sl, r8, r0
 8002ce2:	eb49 0b01 	adc.w	fp, r9, r1
 8002ce6:	f04f 0200 	mov.w	r2, #0
 8002cea:	f04f 0300 	mov.w	r3, #0
 8002cee:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002cf2:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002cf6:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002cfa:	ebb2 040a 	subs.w	r4, r2, sl
 8002cfe:	603c      	str	r4, [r7, #0]
 8002d00:	eb63 030b 	sbc.w	r3, r3, fp
 8002d04:	607b      	str	r3, [r7, #4]
 8002d06:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002d0a:	4623      	mov	r3, r4
 8002d0c:	181b      	adds	r3, r3, r0
 8002d0e:	613b      	str	r3, [r7, #16]
 8002d10:	462b      	mov	r3, r5
 8002d12:	eb41 0303 	adc.w	r3, r1, r3
 8002d16:	617b      	str	r3, [r7, #20]
 8002d18:	6a3a      	ldr	r2, [r7, #32]
 8002d1a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002d1e:	f7ff ff3f 	bl	8002ba0 <UTILS_NanosecondsToTimespec>

    return 0;
 8002d22:	2300      	movs	r3, #0
 8002d24:	4618      	mov	r0, r3
 8002d26:	3738      	adds	r7, #56	@ 0x38
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08002d30 <wrap_phase>:

// CMSIS-specific constants
#define ARM_PI_F32 3.14159265358979323846f

// Internal helper functions
static float32_t wrap_phase(float32_t phase) {
 8002d30:	b480      	push	{r7}
 8002d32:	b085      	sub	sp, #20
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	ed87 0a01 	vstr	s0, [r7, #4]
    phase = fabsf(phase);
 8002d3a:	edd7 7a01 	vldr	s15, [r7, #4]
 8002d3e:	eef0 7ae7 	vabs.f32	s15, s15
 8002d42:	edc7 7a01 	vstr	s15, [r7, #4]
    float32_t two_pi = 2.0f * ARM_PI_F32;
 8002d46:	4b17      	ldr	r3, [pc, #92]	@ (8002da4 <wrap_phase+0x74>)
 8002d48:	60fb      	str	r3, [r7, #12]
    while (phase > two_pi) {
 8002d4a:	e007      	b.n	8002d5c <wrap_phase+0x2c>
        phase -= two_pi;
 8002d4c:	ed97 7a01 	vldr	s14, [r7, #4]
 8002d50:	edd7 7a03 	vldr	s15, [r7, #12]
 8002d54:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d58:	edc7 7a01 	vstr	s15, [r7, #4]
    while (phase > two_pi) {
 8002d5c:	ed97 7a01 	vldr	s14, [r7, #4]
 8002d60:	edd7 7a03 	vldr	s15, [r7, #12]
 8002d64:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002d68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d6c:	dcee      	bgt.n	8002d4c <wrap_phase+0x1c>
    }
    while (phase < 0.0f) {
 8002d6e:	e007      	b.n	8002d80 <wrap_phase+0x50>
        phase += two_pi;
 8002d70:	ed97 7a01 	vldr	s14, [r7, #4]
 8002d74:	edd7 7a03 	vldr	s15, [r7, #12]
 8002d78:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d7c:	edc7 7a01 	vstr	s15, [r7, #4]
    while (phase < 0.0f) {
 8002d80:	edd7 7a01 	vldr	s15, [r7, #4]
 8002d84:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002d88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d8c:	d4f0      	bmi.n	8002d70 <wrap_phase+0x40>
    }
    return phase;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	ee07 3a90 	vmov	s15, r3
}
 8002d94:	eeb0 0a67 	vmov.f32	s0, s15
 8002d98:	3714      	adds	r7, #20
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da0:	4770      	bx	lr
 8002da2:	bf00      	nop
 8002da4:	40c90fdb 	.word	0x40c90fdb

08002da8 <limit_setpoint>:

// Limit output to specified setpoint range
static float32_t limit_setpoint(float32_t value, float32_t min_setpoint, float32_t max_setpoint) {
 8002da8:	b480      	push	{r7}
 8002daa:	b085      	sub	sp, #20
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	ed87 0a03 	vstr	s0, [r7, #12]
 8002db2:	edc7 0a02 	vstr	s1, [r7, #8]
 8002db6:	ed87 1a01 	vstr	s2, [r7, #4]
    if (value < min_setpoint) return min_setpoint;
 8002dba:	ed97 7a03 	vldr	s14, [r7, #12]
 8002dbe:	edd7 7a02 	vldr	s15, [r7, #8]
 8002dc2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002dc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dca:	d501      	bpl.n	8002dd0 <limit_setpoint+0x28>
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	e00b      	b.n	8002de8 <limit_setpoint+0x40>
    if (value > max_setpoint) return max_setpoint;
 8002dd0:	ed97 7a03 	vldr	s14, [r7, #12]
 8002dd4:	edd7 7a01 	vldr	s15, [r7, #4]
 8002dd8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002ddc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002de0:	dd01      	ble.n	8002de6 <limit_setpoint+0x3e>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	e000      	b.n	8002de8 <limit_setpoint+0x40>
    return value;
 8002de6:	68fb      	ldr	r3, [r7, #12]
}
 8002de8:	ee07 3a90 	vmov	s15, r3
 8002dec:	eeb0 0a67 	vmov.f32	s0, s15
 8002df0:	3714      	adds	r7, #20
 8002df2:	46bd      	mov	sp, r7
 8002df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df8:	4770      	bx	lr
	...

08002dfc <SIGNAL_init>:

// Initialization function
void SIGNAL_init(SignalGenerator* sg, SignalType type) {
 8002dfc:	b480      	push	{r7}
 8002dfe:	b083      	sub	sp, #12
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
 8002e04:	460b      	mov	r3, r1
 8002e06:	70fb      	strb	r3, [r7, #3]
    // Reset all parameters
    sg->type = type;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	78fa      	ldrb	r2, [r7, #3]
 8002e0c:	701a      	strb	r2, [r3, #0]
    sg->amplitude = 1.0f;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002e14:	605a      	str	r2, [r3, #4]
    sg->frequency = 1.0f;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002e1c:	609a      	str	r2, [r3, #8]
    sg->phase = 0.0f;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	f04f 0200 	mov.w	r2, #0
 8002e24:	60da      	str	r2, [r3, #12]
    sg->offset = 0.0f;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	f04f 0200 	mov.w	r2, #0
 8002e2c:	611a      	str	r2, [r3, #16]
    sg->current_phase = 0.0f;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	f04f 0200 	mov.w	r2, #0
 8002e34:	635a      	str	r2, [r3, #52]	@ 0x34
    sg->time_elapsed = 0.0f;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	f04f 0200 	mov.w	r2, #0
 8002e3c:	639a      	str	r2, [r3, #56]	@ 0x38
    sg->min_setpoint = -1.0f;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	4a1b      	ldr	r2, [pc, #108]	@ (8002eb0 <SIGNAL_init+0xb4>)
 8002e42:	63da      	str	r2, [r3, #60]	@ 0x3c
    sg->max_setpoint = 1.0f;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002e4a:	641a      	str	r2, [r3, #64]	@ 0x40

    // Type-specific initializations
    switch (type) {
 8002e4c:	78fb      	ldrb	r3, [r7, #3]
 8002e4e:	2b03      	cmp	r3, #3
 8002e50:	d828      	bhi.n	8002ea4 <SIGNAL_init+0xa8>
 8002e52:	a201      	add	r2, pc, #4	@ (adr r2, 8002e58 <SIGNAL_init+0x5c>)
 8002e54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e58:	08002ea3 	.word	0x08002ea3
 8002e5c:	08002e69 	.word	0x08002e69
 8002e60:	08002e87 	.word	0x08002e87
 8002e64:	08002e91 	.word	0x08002e91
        case SIGNAL_SINE:
            break;
        case SIGNAL_CHIRP:
            sg->chirp_type = CHIRP_LINEAR;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	751a      	strb	r2, [r3, #20]
            sg->f_start = 1.0f;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002e74:	619a      	str	r2, [r3, #24]
            sg->f_end = 10.0f;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	4a0e      	ldr	r2, [pc, #56]	@ (8002eb4 <SIGNAL_init+0xb8>)
 8002e7a:	61da      	str	r2, [r3, #28]
            sg->duration = 1.0f;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002e82:	621a      	str	r2, [r3, #32]
            break;
 8002e84:	e00e      	b.n	8002ea4 <SIGNAL_init+0xa8>
        case SIGNAL_SQUARE:
            sg->duty_cycle = 0.5f;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 8002e8c:	629a      	str	r2, [r3, #40]	@ 0x28
            break;
 8002e8e:	e009      	b.n	8002ea4 <SIGNAL_init+0xa8>
        case SIGNAL_RAMP:
            sg->ramp_start = 0.0f;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	f04f 0200 	mov.w	r2, #0
 8002e96:	62da      	str	r2, [r3, #44]	@ 0x2c
            sg->ramp_end = 1.0f;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002e9e:	631a      	str	r2, [r3, #48]	@ 0x30
            break;
 8002ea0:	e000      	b.n	8002ea4 <SIGNAL_init+0xa8>
            break;
 8002ea2:	bf00      	nop
    }
}
 8002ea4:	bf00      	nop
 8002ea6:	370c      	adds	r7, #12
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eae:	4770      	bx	lr
 8002eb0:	bf800000 	.word	0xbf800000
 8002eb4:	41200000 	.word	0x41200000

08002eb8 <SIGNAL_config_sine>:
                        float32_t amplitude,
                        float32_t frequency,
                        float32_t phase,
                        float32_t offset,
                        float32_t min_setpoint,
                        float32_t max_setpoint) {
 8002eb8:	b480      	push	{r7}
 8002eba:	b089      	sub	sp, #36	@ 0x24
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	61f8      	str	r0, [r7, #28]
 8002ec0:	ed87 0a06 	vstr	s0, [r7, #24]
 8002ec4:	edc7 0a05 	vstr	s1, [r7, #20]
 8002ec8:	ed87 1a04 	vstr	s2, [r7, #16]
 8002ecc:	edc7 1a03 	vstr	s3, [r7, #12]
 8002ed0:	ed87 2a02 	vstr	s4, [r7, #8]
 8002ed4:	edc7 2a01 	vstr	s5, [r7, #4]
    sg->type = SIGNAL_SINE;
 8002ed8:	69fb      	ldr	r3, [r7, #28]
 8002eda:	2200      	movs	r2, #0
 8002edc:	701a      	strb	r2, [r3, #0]
    sg->amplitude = amplitude;
 8002ede:	69fb      	ldr	r3, [r7, #28]
 8002ee0:	69ba      	ldr	r2, [r7, #24]
 8002ee2:	605a      	str	r2, [r3, #4]
    sg->frequency = frequency;
 8002ee4:	69fb      	ldr	r3, [r7, #28]
 8002ee6:	697a      	ldr	r2, [r7, #20]
 8002ee8:	609a      	str	r2, [r3, #8]
    sg->phase = phase;
 8002eea:	69fb      	ldr	r3, [r7, #28]
 8002eec:	693a      	ldr	r2, [r7, #16]
 8002eee:	60da      	str	r2, [r3, #12]
    sg->offset = offset;
 8002ef0:	69fb      	ldr	r3, [r7, #28]
 8002ef2:	68fa      	ldr	r2, [r7, #12]
 8002ef4:	611a      	str	r2, [r3, #16]
    sg->min_setpoint = min_setpoint;
 8002ef6:	69fb      	ldr	r3, [r7, #28]
 8002ef8:	68ba      	ldr	r2, [r7, #8]
 8002efa:	63da      	str	r2, [r3, #60]	@ 0x3c
    sg->max_setpoint = max_setpoint;
 8002efc:	69fb      	ldr	r3, [r7, #28]
 8002efe:	687a      	ldr	r2, [r7, #4]
 8002f00:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8002f02:	bf00      	nop
 8002f04:	3724      	adds	r7, #36	@ 0x24
 8002f06:	46bd      	mov	sp, r7
 8002f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0c:	4770      	bx	lr

08002f0e <SIGNAL_config_chirp>:
                         float32_t f_start,
                         float32_t f_end,
                         float32_t duration,
                         ChirpType chirp_type,
                         float32_t min_setpoint,
                         float32_t max_setpoint) {
 8002f0e:	b480      	push	{r7}
 8002f10:	b089      	sub	sp, #36	@ 0x24
 8002f12:	af00      	add	r7, sp, #0
 8002f14:	61f8      	str	r0, [r7, #28]
 8002f16:	ed87 0a06 	vstr	s0, [r7, #24]
 8002f1a:	edc7 0a05 	vstr	s1, [r7, #20]
 8002f1e:	ed87 1a04 	vstr	s2, [r7, #16]
 8002f22:	edc7 1a03 	vstr	s3, [r7, #12]
 8002f26:	460b      	mov	r3, r1
 8002f28:	ed87 2a01 	vstr	s4, [r7, #4]
 8002f2c:	edc7 2a00 	vstr	s5, [r7]
 8002f30:	72fb      	strb	r3, [r7, #11]
    sg->type = SIGNAL_CHIRP;
 8002f32:	69fb      	ldr	r3, [r7, #28]
 8002f34:	2201      	movs	r2, #1
 8002f36:	701a      	strb	r2, [r3, #0]
    sg->amplitude = amplitude;
 8002f38:	69fb      	ldr	r3, [r7, #28]
 8002f3a:	69ba      	ldr	r2, [r7, #24]
 8002f3c:	605a      	str	r2, [r3, #4]
    sg->f_start = f_start;
 8002f3e:	69fb      	ldr	r3, [r7, #28]
 8002f40:	697a      	ldr	r2, [r7, #20]
 8002f42:	619a      	str	r2, [r3, #24]
    sg->f_end = f_end;
 8002f44:	69fb      	ldr	r3, [r7, #28]
 8002f46:	693a      	ldr	r2, [r7, #16]
 8002f48:	61da      	str	r2, [r3, #28]
    sg->duration = duration;
 8002f4a:	69fb      	ldr	r3, [r7, #28]
 8002f4c:	68fa      	ldr	r2, [r7, #12]
 8002f4e:	621a      	str	r2, [r3, #32]
    sg->chirp_type = chirp_type;
 8002f50:	69fb      	ldr	r3, [r7, #28]
 8002f52:	7afa      	ldrb	r2, [r7, #11]
 8002f54:	751a      	strb	r2, [r3, #20]
    sg->t = 0.0f;
 8002f56:	69fb      	ldr	r3, [r7, #28]
 8002f58:	f04f 0200 	mov.w	r2, #0
 8002f5c:	625a      	str	r2, [r3, #36]	@ 0x24
    sg->min_setpoint = min_setpoint;
 8002f5e:	69fb      	ldr	r3, [r7, #28]
 8002f60:	687a      	ldr	r2, [r7, #4]
 8002f62:	63da      	str	r2, [r3, #60]	@ 0x3c
    sg->max_setpoint = max_setpoint;
 8002f64:	69fb      	ldr	r3, [r7, #28]
 8002f66:	683a      	ldr	r2, [r7, #0]
 8002f68:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8002f6a:	bf00      	nop
 8002f6c:	3724      	adds	r7, #36	@ 0x24
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f74:	4770      	bx	lr

08002f76 <SIGNAL_config_square>:
                          float32_t frequency,
                          float32_t duty_cycle,
                          float32_t phase,
                          float32_t offset,
                          float32_t min_setpoint,
                          float32_t max_setpoint) {
 8002f76:	b480      	push	{r7}
 8002f78:	b089      	sub	sp, #36	@ 0x24
 8002f7a:	af00      	add	r7, sp, #0
 8002f7c:	61f8      	str	r0, [r7, #28]
 8002f7e:	ed87 0a06 	vstr	s0, [r7, #24]
 8002f82:	edc7 0a05 	vstr	s1, [r7, #20]
 8002f86:	ed87 1a04 	vstr	s2, [r7, #16]
 8002f8a:	edc7 1a03 	vstr	s3, [r7, #12]
 8002f8e:	ed87 2a02 	vstr	s4, [r7, #8]
 8002f92:	edc7 2a01 	vstr	s5, [r7, #4]
 8002f96:	ed87 3a00 	vstr	s6, [r7]
    sg->type = SIGNAL_SQUARE;
 8002f9a:	69fb      	ldr	r3, [r7, #28]
 8002f9c:	2202      	movs	r2, #2
 8002f9e:	701a      	strb	r2, [r3, #0]
    sg->amplitude = amplitude;
 8002fa0:	69fb      	ldr	r3, [r7, #28]
 8002fa2:	69ba      	ldr	r2, [r7, #24]
 8002fa4:	605a      	str	r2, [r3, #4]
    sg->frequency = frequency;
 8002fa6:	69fb      	ldr	r3, [r7, #28]
 8002fa8:	697a      	ldr	r2, [r7, #20]
 8002faa:	609a      	str	r2, [r3, #8]
    sg->duty_cycle = duty_cycle;
 8002fac:	69fb      	ldr	r3, [r7, #28]
 8002fae:	693a      	ldr	r2, [r7, #16]
 8002fb0:	629a      	str	r2, [r3, #40]	@ 0x28
    sg->phase = phase;
 8002fb2:	69fb      	ldr	r3, [r7, #28]
 8002fb4:	68fa      	ldr	r2, [r7, #12]
 8002fb6:	60da      	str	r2, [r3, #12]
    sg->offset = offset;
 8002fb8:	69fb      	ldr	r3, [r7, #28]
 8002fba:	68ba      	ldr	r2, [r7, #8]
 8002fbc:	611a      	str	r2, [r3, #16]
    sg->min_setpoint = min_setpoint;
 8002fbe:	69fb      	ldr	r3, [r7, #28]
 8002fc0:	687a      	ldr	r2, [r7, #4]
 8002fc2:	63da      	str	r2, [r3, #60]	@ 0x3c
    sg->max_setpoint = max_setpoint;
 8002fc4:	69fb      	ldr	r3, [r7, #28]
 8002fc6:	683a      	ldr	r2, [r7, #0]
 8002fc8:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8002fca:	bf00      	nop
 8002fcc:	3724      	adds	r7, #36	@ 0x24
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd4:	4770      	bx	lr

08002fd6 <SIGNAL_config_ramp>:
                        float32_t ramp_start,
                        float32_t ramp_end,
                        float32_t phase,
                        float32_t offset,
                        float32_t min_setpoint,
                        float32_t max_setpoint) {
 8002fd6:	b480      	push	{r7}
 8002fd8:	b08b      	sub	sp, #44	@ 0x2c
 8002fda:	af00      	add	r7, sp, #0
 8002fdc:	6278      	str	r0, [r7, #36]	@ 0x24
 8002fde:	ed87 0a08 	vstr	s0, [r7, #32]
 8002fe2:	edc7 0a07 	vstr	s1, [r7, #28]
 8002fe6:	ed87 1a06 	vstr	s2, [r7, #24]
 8002fea:	edc7 1a05 	vstr	s3, [r7, #20]
 8002fee:	ed87 2a04 	vstr	s4, [r7, #16]
 8002ff2:	edc7 2a03 	vstr	s5, [r7, #12]
 8002ff6:	ed87 3a02 	vstr	s6, [r7, #8]
 8002ffa:	edc7 3a01 	vstr	s7, [r7, #4]
    sg->type = SIGNAL_RAMP;
 8002ffe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003000:	2203      	movs	r2, #3
 8003002:	701a      	strb	r2, [r3, #0]
    sg->amplitude = amplitude;
 8003004:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003006:	6a3a      	ldr	r2, [r7, #32]
 8003008:	605a      	str	r2, [r3, #4]
    sg->frequency = frequency;
 800300a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800300c:	69fa      	ldr	r2, [r7, #28]
 800300e:	609a      	str	r2, [r3, #8]
    sg->ramp_start = ramp_start;
 8003010:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003012:	69ba      	ldr	r2, [r7, #24]
 8003014:	62da      	str	r2, [r3, #44]	@ 0x2c
    sg->ramp_end = ramp_end;
 8003016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003018:	697a      	ldr	r2, [r7, #20]
 800301a:	631a      	str	r2, [r3, #48]	@ 0x30
    sg->phase = phase;
 800301c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800301e:	693a      	ldr	r2, [r7, #16]
 8003020:	60da      	str	r2, [r3, #12]
    sg->offset = offset;
 8003022:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003024:	68fa      	ldr	r2, [r7, #12]
 8003026:	611a      	str	r2, [r3, #16]
    sg->min_setpoint = min_setpoint;
 8003028:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800302a:	68ba      	ldr	r2, [r7, #8]
 800302c:	63da      	str	r2, [r3, #60]	@ 0x3c
    sg->max_setpoint = max_setpoint;
 800302e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003030:	687a      	ldr	r2, [r7, #4]
 8003032:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8003034:	bf00      	nop
 8003036:	372c      	adds	r7, #44	@ 0x2c
 8003038:	46bd      	mov	sp, r7
 800303a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303e:	4770      	bx	lr

08003040 <SIGNAL_generate>:

// Signal generation function
float32_t SIGNAL_generate(SignalGenerator* sg, float32_t sample_time) {
 8003040:	b580      	push	{r7, lr}
 8003042:	ed2d 8b02 	vpush	{d8}
 8003046:	b08c      	sub	sp, #48	@ 0x30
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
 800304c:	ed87 0a00 	vstr	s0, [r7]
    float32_t output = 0.0f;
 8003050:	f04f 0300 	mov.w	r3, #0
 8003054:	62fb      	str	r3, [r7, #44]	@ 0x2c
    float32_t two_pi = 2.0f * ARM_PI_F32;
 8003056:	4bb2      	ldr	r3, [pc, #712]	@ (8003320 <SIGNAL_generate+0x2e0>)
 8003058:	627b      	str	r3, [r7, #36]	@ 0x24

    // Update phase and time
    sg->current_phase = wrap_phase(sg->current_phase + two_pi * sg->frequency * sample_time);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	edd3 6a02 	vldr	s13, [r3, #8]
 8003066:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800306a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800306e:	edd7 7a00 	vldr	s15, [r7]
 8003072:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003076:	ee77 7a27 	vadd.f32	s15, s14, s15
 800307a:	eeb0 0a67 	vmov.f32	s0, s15
 800307e:	f7ff fe57 	bl	8002d30 <wrap_phase>
 8003082:	eef0 7a40 	vmov.f32	s15, s0
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
    sg->time_elapsed += sample_time;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 8003092:	edd7 7a00 	vldr	s15, [r7]
 8003096:	ee77 7a27 	vadd.f32	s15, s14, s15
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38

    switch (sg->type) {
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	781b      	ldrb	r3, [r3, #0]
 80030a4:	2b03      	cmp	r3, #3
 80030a6:	f200 8123 	bhi.w	80032f0 <SIGNAL_generate+0x2b0>
 80030aa:	a201      	add	r2, pc, #4	@ (adr r2, 80030b0 <SIGNAL_generate+0x70>)
 80030ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030b0:	080030c1 	.word	0x080030c1
 80030b4:	080030ff 	.word	0x080030ff
 80030b8:	08003219 	.word	0x08003219
 80030bc:	08003285 	.word	0x08003285
        case SIGNAL_SINE: {
            // Sine wave generation
            float32_t phase_input = sg->current_phase + sg->phase;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	edd3 7a03 	vldr	s15, [r3, #12]
 80030cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030d0:	edc7 7a02 	vstr	s15, [r7, #8]
            output = arm_sin_f32(phase_input);
 80030d4:	ed97 0a02 	vldr	s0, [r7, #8]
 80030d8:	f006 fb6e 	bl	80097b8 <arm_sin_f32>
 80030dc:	ed87 0a0b 	vstr	s0, [r7, #44]	@ 0x2c
            output = sg->amplitude * output + sg->offset;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	ed93 7a01 	vldr	s14, [r3, #4]
 80030e6:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80030ea:	ee27 7a27 	vmul.f32	s14, s14, s15
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	edd3 7a04 	vldr	s15, [r3, #16]
 80030f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030f8:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
            break;
 80030fc:	e0f8      	b.n	80032f0 <SIGNAL_generate+0x2b0>
        }

        case SIGNAL_CHIRP: {
            // Chirp signal generation
            float32_t inst_freq;
            float32_t progress = sg->time_elapsed / sg->duration;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	edd3 6a0e 	vldr	s13, [r3, #56]	@ 0x38
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	ed93 7a08 	vldr	s14, [r3, #32]
 800310a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800310e:	edc7 7a04 	vstr	s15, [r7, #16]

            // Calculate instantaneous frequency based on chirp type
            switch (sg->chirp_type) {
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	7d1b      	ldrb	r3, [r3, #20]
 8003116:	2b02      	cmp	r3, #2
 8003118:	d032      	beq.n	8003180 <SIGNAL_generate+0x140>
 800311a:	2b02      	cmp	r3, #2
 800311c:	dc48      	bgt.n	80031b0 <SIGNAL_generate+0x170>
 800311e:	2b00      	cmp	r3, #0
 8003120:	d002      	beq.n	8003128 <SIGNAL_generate+0xe8>
 8003122:	2b01      	cmp	r3, #1
 8003124:	d014      	beq.n	8003150 <SIGNAL_generate+0x110>
 8003126:	e043      	b.n	80031b0 <SIGNAL_generate+0x170>
                case CHIRP_LINEAR:
                    // Linear frequency sweep
                    inst_freq = sg->f_start + (sg->f_end - sg->f_start) * progress;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	ed93 7a06 	vldr	s14, [r3, #24]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	edd3 6a07 	vldr	s13, [r3, #28]
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	edd3 7a06 	vldr	s15, [r3, #24]
 800313a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800313e:	edd7 7a04 	vldr	s15, [r7, #16]
 8003142:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003146:	ee77 7a27 	vadd.f32	s15, s14, s15
 800314a:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
                    break;
 800314e:	e02f      	b.n	80031b0 <SIGNAL_generate+0x170>
                case CHIRP_LOGARITHMIC:
                    // Logarithmic frequency sweep
                    inst_freq = sg->f_start * powf(sg->f_end / sg->f_start, progress);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	ed93 8a06 	vldr	s16, [r3, #24]
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	ed93 7a07 	vldr	s14, [r3, #28]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	edd3 7a06 	vldr	s15, [r3, #24]
 8003162:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003166:	edd7 0a04 	vldr	s1, [r7, #16]
 800316a:	eeb0 0a66 	vmov.f32	s0, s13
 800316e:	f018 fc1d 	bl	801b9ac <powf>
 8003172:	eef0 7a40 	vmov.f32	s15, s0
 8003176:	ee68 7a27 	vmul.f32	s15, s16, s15
 800317a:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
                    break;
 800317e:	e017      	b.n	80031b0 <SIGNAL_generate+0x170>
                case CHIRP_QUADRATIC:
                    // Quadratic frequency sweep
                    inst_freq = sg->f_start + (sg->f_end - sg->f_start) * progress * progress;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	ed93 7a06 	vldr	s14, [r3, #24]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	edd3 6a07 	vldr	s13, [r3, #28]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	edd3 7a06 	vldr	s15, [r3, #24]
 8003192:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003196:	edd7 7a04 	vldr	s15, [r7, #16]
 800319a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800319e:	edd7 7a04 	vldr	s15, [r7, #16]
 80031a2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80031a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031aa:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
                    break;
 80031ae:	bf00      	nop
            }

            // Integrate instantaneous frequency
            float32_t chirp_phase = two_pi * inst_freq * sg->time_elapsed;
 80031b0:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80031b4:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80031b8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 80031c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031c6:	edc7 7a03 	vstr	s15, [r7, #12]
            output = arm_sin_f32(chirp_phase + sg->phase);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	ed93 7a03 	vldr	s14, [r3, #12]
 80031d0:	edd7 7a03 	vldr	s15, [r7, #12]
 80031d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031d8:	eeb0 0a67 	vmov.f32	s0, s15
 80031dc:	f006 faec 	bl	80097b8 <arm_sin_f32>
 80031e0:	ed87 0a0b 	vstr	s0, [r7, #44]	@ 0x2c
            output *= sg->amplitude;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	edd3 7a01 	vldr	s15, [r3, #4]
 80031ea:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80031ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031f2:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

            // Reset if duration exceeded
            if (sg->time_elapsed >= sg->duration) {
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	edd3 7a08 	vldr	s15, [r3, #32]
 8003202:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003206:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800320a:	da00      	bge.n	800320e <SIGNAL_generate+0x1ce>
                sg->time_elapsed = 0.0f;
            }
            break;
 800320c:	e070      	b.n	80032f0 <SIGNAL_generate+0x2b0>
                sg->time_elapsed = 0.0f;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	f04f 0200 	mov.w	r2, #0
 8003214:	639a      	str	r2, [r3, #56]	@ 0x38
            break;
 8003216:	e06b      	b.n	80032f0 <SIGNAL_generate+0x2b0>
        }

        case SIGNAL_SQUARE: {
            // Square wave generation
            float32_t phase_normalized = fmodf(sg->current_phase + sg->phase, two_pi);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	edd3 7a03 	vldr	s15, [r3, #12]
 8003224:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003228:	edd7 0a09 	vldr	s1, [r7, #36]	@ 0x24
 800322c:	eeb0 0a67 	vmov.f32	s0, s15
 8003230:	f018 fb9c 	bl	801b96c <fmodf>
 8003234:	ed87 0a06 	vstr	s0, [r7, #24]

            float32_t threshold = two_pi * sg->duty_cycle;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800323e:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8003242:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003246:	edc7 7a05 	vstr	s15, [r7, #20]
            output = (phase_normalized < threshold) ?
                     sg->amplitude + sg->offset :
 800324a:	ed97 7a06 	vldr	s14, [r7, #24]
 800324e:	edd7 7a05 	vldr	s15, [r7, #20]
 8003252:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003256:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800325a:	d508      	bpl.n	800326e <SIGNAL_generate+0x22e>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	ed93 7a01 	vldr	s14, [r3, #4]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	edd3 7a04 	vldr	s15, [r3, #16]
 8003268:	ee77 7a27 	vadd.f32	s15, s14, s15
 800326c:	e007      	b.n	800327e <SIGNAL_generate+0x23e>
                     -sg->amplitude + sg->offset;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	ed93 7a04 	vldr	s14, [r3, #16]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	edd3 7a01 	vldr	s15, [r3, #4]
                     sg->amplitude + sg->offset :
 800327a:	ee77 7a67 	vsub.f32	s15, s14, s15
            output = (phase_normalized < threshold) ?
 800327e:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
            break;
 8003282:	e035      	b.n	80032f0 <SIGNAL_generate+0x2b0>
        }

        case SIGNAL_RAMP: {
            // Ramp signal generation
            float32_t phase_normalized = fmodf(sg->current_phase + sg->phase, two_pi);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	edd3 7a03 	vldr	s15, [r3, #12]
 8003290:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003294:	edd7 0a09 	vldr	s1, [r7, #36]	@ 0x24
 8003298:	eeb0 0a67 	vmov.f32	s0, s15
 800329c:	f018 fb66 	bl	801b96c <fmodf>
 80032a0:	ed87 0a08 	vstr	s0, [r7, #32]
            float32_t ramp_ratio = phase_normalized / two_pi;
 80032a4:	edd7 6a08 	vldr	s13, [r7, #32]
 80032a8:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80032ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80032b0:	edc7 7a07 	vstr	s15, [r7, #28]

            output = sg->ramp_start +
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
                     (sg->ramp_end - sg->ramp_start) * ramp_ratio * sg->amplitude +
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 80032c6:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80032ca:	edd7 7a07 	vldr	s15, [r7, #28]
 80032ce:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	edd3 7a01 	vldr	s15, [r3, #4]
 80032d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
            output = sg->ramp_start +
 80032dc:	ee37 7a27 	vadd.f32	s14, s14, s15
                     sg->offset;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	edd3 7a04 	vldr	s15, [r3, #16]
            output = sg->ramp_start +
 80032e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032ea:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
            break;
 80032ee:	bf00      	nop
        }
    }

    // Limit output to specified setpoint range
    return limit_setpoint(output, sg->min_setpoint, sg->max_setpoint);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 80032fc:	eeb0 1a47 	vmov.f32	s2, s14
 8003300:	eef0 0a67 	vmov.f32	s1, s15
 8003304:	ed97 0a0b 	vldr	s0, [r7, #44]	@ 0x2c
 8003308:	f7ff fd4e 	bl	8002da8 <limit_setpoint>
 800330c:	eef0 7a40 	vmov.f32	s15, s0
}
 8003310:	eeb0 0a67 	vmov.f32	s0, s15
 8003314:	3730      	adds	r7, #48	@ 0x30
 8003316:	46bd      	mov	sp, r7
 8003318:	ecbd 8b02 	vpop	{d8}
 800331c:	bd80      	pop	{r7, pc}
 800331e:	bf00      	nop
 8003320:	40c90fdb 	.word	0x40c90fdb

08003324 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b082      	sub	sp, #8
 8003328:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800332a:	4b12      	ldr	r3, [pc, #72]	@ (8003374 <HAL_MspInit+0x50>)
 800332c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800332e:	4a11      	ldr	r2, [pc, #68]	@ (8003374 <HAL_MspInit+0x50>)
 8003330:	f043 0301 	orr.w	r3, r3, #1
 8003334:	6613      	str	r3, [r2, #96]	@ 0x60
 8003336:	4b0f      	ldr	r3, [pc, #60]	@ (8003374 <HAL_MspInit+0x50>)
 8003338:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800333a:	f003 0301 	and.w	r3, r3, #1
 800333e:	607b      	str	r3, [r7, #4]
 8003340:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003342:	4b0c      	ldr	r3, [pc, #48]	@ (8003374 <HAL_MspInit+0x50>)
 8003344:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003346:	4a0b      	ldr	r2, [pc, #44]	@ (8003374 <HAL_MspInit+0x50>)
 8003348:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800334c:	6593      	str	r3, [r2, #88]	@ 0x58
 800334e:	4b09      	ldr	r3, [pc, #36]	@ (8003374 <HAL_MspInit+0x50>)
 8003350:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003352:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003356:	603b      	str	r3, [r7, #0]
 8003358:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800335a:	2200      	movs	r2, #0
 800335c:	210f      	movs	r1, #15
 800335e:	f06f 0001 	mvn.w	r0, #1
 8003362:	f001 f8c7 	bl	80044f4 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8003366:	f001 fef5 	bl	8005154 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800336a:	bf00      	nop
 800336c:	3708      	adds	r7, #8
 800336e:	46bd      	mov	sp, r7
 8003370:	bd80      	pop	{r7, pc}
 8003372:	bf00      	nop
 8003374:	40021000 	.word	0x40021000

08003378 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b08c      	sub	sp, #48	@ 0x30
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8003380:	2300      	movs	r3, #0
 8003382:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 8003384:	2300      	movs	r3, #0
 8003386:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8003388:	4b2c      	ldr	r3, [pc, #176]	@ (800343c <HAL_InitTick+0xc4>)
 800338a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800338c:	4a2b      	ldr	r2, [pc, #172]	@ (800343c <HAL_InitTick+0xc4>)
 800338e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003392:	6613      	str	r3, [r2, #96]	@ 0x60
 8003394:	4b29      	ldr	r3, [pc, #164]	@ (800343c <HAL_InitTick+0xc4>)
 8003396:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003398:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800339c:	60bb      	str	r3, [r7, #8]
 800339e:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80033a0:	f107 020c 	add.w	r2, r7, #12
 80033a4:	f107 0310 	add.w	r3, r7, #16
 80033a8:	4611      	mov	r1, r2
 80033aa:	4618      	mov	r0, r3
 80033ac:	f002 fbca 	bl	8005b44 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80033b0:	f002 fbb2 	bl	8005b18 <HAL_RCC_GetPCLK2Freq>
 80033b4:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80033b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033b8:	4a21      	ldr	r2, [pc, #132]	@ (8003440 <HAL_InitTick+0xc8>)
 80033ba:	fba2 2303 	umull	r2, r3, r2, r3
 80033be:	0c9b      	lsrs	r3, r3, #18
 80033c0:	3b01      	subs	r3, #1
 80033c2:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80033c4:	4b1f      	ldr	r3, [pc, #124]	@ (8003444 <HAL_InitTick+0xcc>)
 80033c6:	4a20      	ldr	r2, [pc, #128]	@ (8003448 <HAL_InitTick+0xd0>)
 80033c8:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80033ca:	4b1e      	ldr	r3, [pc, #120]	@ (8003444 <HAL_InitTick+0xcc>)
 80033cc:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80033d0:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80033d2:	4a1c      	ldr	r2, [pc, #112]	@ (8003444 <HAL_InitTick+0xcc>)
 80033d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033d6:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80033d8:	4b1a      	ldr	r3, [pc, #104]	@ (8003444 <HAL_InitTick+0xcc>)
 80033da:	2200      	movs	r2, #0
 80033dc:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80033de:	4b19      	ldr	r3, [pc, #100]	@ (8003444 <HAL_InitTick+0xcc>)
 80033e0:	2200      	movs	r2, #0
 80033e2:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim1);
 80033e4:	4817      	ldr	r0, [pc, #92]	@ (8003444 <HAL_InitTick+0xcc>)
 80033e6:	f002 fe73 	bl	80060d0 <HAL_TIM_Base_Init>
 80033ea:	4603      	mov	r3, r0
 80033ec:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 80033f0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d11b      	bne.n	8003430 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80033f8:	4812      	ldr	r0, [pc, #72]	@ (8003444 <HAL_InitTick+0xcc>)
 80033fa:	f002 ff31 	bl	8006260 <HAL_TIM_Base_Start_IT>
 80033fe:	4603      	mov	r3, r0
 8003400:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8003404:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003408:	2b00      	cmp	r3, #0
 800340a:	d111      	bne.n	8003430 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800340c:	2019      	movs	r0, #25
 800340e:	f001 f88b 	bl	8004528 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2b0f      	cmp	r3, #15
 8003416:	d808      	bhi.n	800342a <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8003418:	2200      	movs	r2, #0
 800341a:	6879      	ldr	r1, [r7, #4]
 800341c:	2019      	movs	r0, #25
 800341e:	f001 f869 	bl	80044f4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003422:	4a0a      	ldr	r2, [pc, #40]	@ (800344c <HAL_InitTick+0xd4>)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6013      	str	r3, [r2, #0]
 8003428:	e002      	b.n	8003430 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 800342a:	2301      	movs	r3, #1
 800342c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8003430:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8003434:	4618      	mov	r0, r3
 8003436:	3730      	adds	r7, #48	@ 0x30
 8003438:	46bd      	mov	sp, r7
 800343a:	bd80      	pop	{r7, pc}
 800343c:	40021000 	.word	0x40021000
 8003440:	431bde83 	.word	0x431bde83
 8003444:	200042e0 	.word	0x200042e0
 8003448:	40012c00 	.word	0x40012c00
 800344c:	20000008 	.word	0x20000008

08003450 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003450:	b480      	push	{r7}
 8003452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003454:	bf00      	nop
 8003456:	e7fd      	b.n	8003454 <NMI_Handler+0x4>

08003458 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003458:	b480      	push	{r7}
 800345a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800345c:	bf00      	nop
 800345e:	e7fd      	b.n	800345c <HardFault_Handler+0x4>

08003460 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003460:	b480      	push	{r7}
 8003462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003464:	bf00      	nop
 8003466:	e7fd      	b.n	8003464 <MemManage_Handler+0x4>

08003468 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003468:	b480      	push	{r7}
 800346a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800346c:	bf00      	nop
 800346e:	e7fd      	b.n	800346c <BusFault_Handler+0x4>

08003470 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003470:	b480      	push	{r7}
 8003472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003474:	bf00      	nop
 8003476:	e7fd      	b.n	8003474 <UsageFault_Handler+0x4>

08003478 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003478:	b480      	push	{r7}
 800347a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800347c:	bf00      	nop
 800347e:	46bd      	mov	sp, r7
 8003480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003484:	4770      	bx	lr
	...

08003488 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 800348c:	4802      	ldr	r0, [pc, #8]	@ (8003498 <DMA1_Channel1_IRQHandler+0x10>)
 800348e:	f001 fa3c 	bl	800490a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003492:	bf00      	nop
 8003494:	bd80      	pop	{r7, pc}
 8003496:	bf00      	nop
 8003498:	20004724 	.word	0x20004724

0800349c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 80034a0:	4802      	ldr	r0, [pc, #8]	@ (80034ac <DMA1_Channel2_IRQHandler+0x10>)
 80034a2:	f001 fa32 	bl	800490a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80034a6:	bf00      	nop
 80034a8:	bd80      	pop	{r7, pc}
 80034aa:	bf00      	nop
 80034ac:	20004784 	.word	0x20004784

080034b0 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80034b4:	4802      	ldr	r0, [pc, #8]	@ (80034c0 <TIM1_UP_TIM16_IRQHandler+0x10>)
 80034b6:	f003 f9e9 	bl	800688c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80034ba:	bf00      	nop
 80034bc:	bd80      	pop	{r7, pc}
 80034be:	bf00      	nop
 80034c0:	200042e0 	.word	0x200042e0

080034c4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80034c8:	4802      	ldr	r0, [pc, #8]	@ (80034d4 <TIM2_IRQHandler+0x10>)
 80034ca:	f003 f9df 	bl	800688c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80034ce:	bf00      	nop
 80034d0:	bd80      	pop	{r7, pc}
 80034d2:	bf00      	nop
 80034d4:	20004334 	.word	0x20004334

080034d8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80034dc:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80034e0:	f001 fd22 	bl	8004f28 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80034e4:	bf00      	nop
 80034e6:	bd80      	pop	{r7, pc}

080034e8 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 80034ec:	4802      	ldr	r0, [pc, #8]	@ (80034f8 <LPUART1_IRQHandler+0x10>)
 80034ee:	f004 fd31 	bl	8007f54 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 80034f2:	bf00      	nop
 80034f4:	bd80      	pop	{r7, pc}
 80034f6:	bf00      	nop
 80034f8:	20004690 	.word	0x20004690

080034fc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80034fc:	b480      	push	{r7}
 80034fe:	af00      	add	r7, sp, #0
  return 1;
 8003500:	2301      	movs	r3, #1
}
 8003502:	4618      	mov	r0, r3
 8003504:	46bd      	mov	sp, r7
 8003506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350a:	4770      	bx	lr

0800350c <_kill>:

int _kill(int pid, int sig)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b082      	sub	sp, #8
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
 8003514:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003516:	f017 fbb5 	bl	801ac84 <__errno>
 800351a:	4603      	mov	r3, r0
 800351c:	2216      	movs	r2, #22
 800351e:	601a      	str	r2, [r3, #0]
  return -1;
 8003520:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8003524:	4618      	mov	r0, r3
 8003526:	3708      	adds	r7, #8
 8003528:	46bd      	mov	sp, r7
 800352a:	bd80      	pop	{r7, pc}

0800352c <_exit>:

void _exit (int status)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b082      	sub	sp, #8
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003534:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003538:	6878      	ldr	r0, [r7, #4]
 800353a:	f7ff ffe7 	bl	800350c <_kill>
  while (1) {}    /* Make sure we hang here */
 800353e:	bf00      	nop
 8003540:	e7fd      	b.n	800353e <_exit+0x12>

08003542 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003542:	b580      	push	{r7, lr}
 8003544:	b086      	sub	sp, #24
 8003546:	af00      	add	r7, sp, #0
 8003548:	60f8      	str	r0, [r7, #12]
 800354a:	60b9      	str	r1, [r7, #8]
 800354c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800354e:	2300      	movs	r3, #0
 8003550:	617b      	str	r3, [r7, #20]
 8003552:	e00a      	b.n	800356a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003554:	f3af 8000 	nop.w
 8003558:	4601      	mov	r1, r0
 800355a:	68bb      	ldr	r3, [r7, #8]
 800355c:	1c5a      	adds	r2, r3, #1
 800355e:	60ba      	str	r2, [r7, #8]
 8003560:	b2ca      	uxtb	r2, r1
 8003562:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	3301      	adds	r3, #1
 8003568:	617b      	str	r3, [r7, #20]
 800356a:	697a      	ldr	r2, [r7, #20]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	429a      	cmp	r2, r3
 8003570:	dbf0      	blt.n	8003554 <_read+0x12>
  }

  return len;
 8003572:	687b      	ldr	r3, [r7, #4]
}
 8003574:	4618      	mov	r0, r3
 8003576:	3718      	adds	r7, #24
 8003578:	46bd      	mov	sp, r7
 800357a:	bd80      	pop	{r7, pc}

0800357c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b086      	sub	sp, #24
 8003580:	af00      	add	r7, sp, #0
 8003582:	60f8      	str	r0, [r7, #12]
 8003584:	60b9      	str	r1, [r7, #8]
 8003586:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003588:	2300      	movs	r3, #0
 800358a:	617b      	str	r3, [r7, #20]
 800358c:	e009      	b.n	80035a2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800358e:	68bb      	ldr	r3, [r7, #8]
 8003590:	1c5a      	adds	r2, r3, #1
 8003592:	60ba      	str	r2, [r7, #8]
 8003594:	781b      	ldrb	r3, [r3, #0]
 8003596:	4618      	mov	r0, r3
 8003598:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800359c:	697b      	ldr	r3, [r7, #20]
 800359e:	3301      	adds	r3, #1
 80035a0:	617b      	str	r3, [r7, #20]
 80035a2:	697a      	ldr	r2, [r7, #20]
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	429a      	cmp	r2, r3
 80035a8:	dbf1      	blt.n	800358e <_write+0x12>
  }
  return len;
 80035aa:	687b      	ldr	r3, [r7, #4]
}
 80035ac:	4618      	mov	r0, r3
 80035ae:	3718      	adds	r7, #24
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd80      	pop	{r7, pc}

080035b4 <_close>:

int _close(int file)
{
 80035b4:	b480      	push	{r7}
 80035b6:	b083      	sub	sp, #12
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80035bc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80035c0:	4618      	mov	r0, r3
 80035c2:	370c      	adds	r7, #12
 80035c4:	46bd      	mov	sp, r7
 80035c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ca:	4770      	bx	lr

080035cc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80035cc:	b480      	push	{r7}
 80035ce:	b083      	sub	sp, #12
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
 80035d4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80035dc:	605a      	str	r2, [r3, #4]
  return 0;
 80035de:	2300      	movs	r3, #0
}
 80035e0:	4618      	mov	r0, r3
 80035e2:	370c      	adds	r7, #12
 80035e4:	46bd      	mov	sp, r7
 80035e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ea:	4770      	bx	lr

080035ec <_isatty>:

int _isatty(int file)
{
 80035ec:	b480      	push	{r7}
 80035ee:	b083      	sub	sp, #12
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80035f4:	2301      	movs	r3, #1
}
 80035f6:	4618      	mov	r0, r3
 80035f8:	370c      	adds	r7, #12
 80035fa:	46bd      	mov	sp, r7
 80035fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003600:	4770      	bx	lr

08003602 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003602:	b480      	push	{r7}
 8003604:	b085      	sub	sp, #20
 8003606:	af00      	add	r7, sp, #0
 8003608:	60f8      	str	r0, [r7, #12]
 800360a:	60b9      	str	r1, [r7, #8]
 800360c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800360e:	2300      	movs	r3, #0
}
 8003610:	4618      	mov	r0, r3
 8003612:	3714      	adds	r7, #20
 8003614:	46bd      	mov	sp, r7
 8003616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361a:	4770      	bx	lr

0800361c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b086      	sub	sp, #24
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003624:	4a14      	ldr	r2, [pc, #80]	@ (8003678 <_sbrk+0x5c>)
 8003626:	4b15      	ldr	r3, [pc, #84]	@ (800367c <_sbrk+0x60>)
 8003628:	1ad3      	subs	r3, r2, r3
 800362a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800362c:	697b      	ldr	r3, [r7, #20]
 800362e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003630:	4b13      	ldr	r3, [pc, #76]	@ (8003680 <_sbrk+0x64>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d102      	bne.n	800363e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003638:	4b11      	ldr	r3, [pc, #68]	@ (8003680 <_sbrk+0x64>)
 800363a:	4a12      	ldr	r2, [pc, #72]	@ (8003684 <_sbrk+0x68>)
 800363c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800363e:	4b10      	ldr	r3, [pc, #64]	@ (8003680 <_sbrk+0x64>)
 8003640:	681a      	ldr	r2, [r3, #0]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	4413      	add	r3, r2
 8003646:	693a      	ldr	r2, [r7, #16]
 8003648:	429a      	cmp	r2, r3
 800364a:	d207      	bcs.n	800365c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800364c:	f017 fb1a 	bl	801ac84 <__errno>
 8003650:	4603      	mov	r3, r0
 8003652:	220c      	movs	r2, #12
 8003654:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003656:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800365a:	e009      	b.n	8003670 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800365c:	4b08      	ldr	r3, [pc, #32]	@ (8003680 <_sbrk+0x64>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003662:	4b07      	ldr	r3, [pc, #28]	@ (8003680 <_sbrk+0x64>)
 8003664:	681a      	ldr	r2, [r3, #0]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	4413      	add	r3, r2
 800366a:	4a05      	ldr	r2, [pc, #20]	@ (8003680 <_sbrk+0x64>)
 800366c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800366e:	68fb      	ldr	r3, [r7, #12]
}
 8003670:	4618      	mov	r0, r3
 8003672:	3718      	adds	r7, #24
 8003674:	46bd      	mov	sp, r7
 8003676:	bd80      	pop	{r7, pc}
 8003678:	20020000 	.word	0x20020000
 800367c:	00000400 	.word	0x00000400
 8003680:	20004330 	.word	0x20004330
 8003684:	2000b610 	.word	0x2000b610

08003688 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8003688:	b480      	push	{r7}
 800368a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800368c:	4b06      	ldr	r3, [pc, #24]	@ (80036a8 <SystemInit+0x20>)
 800368e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003692:	4a05      	ldr	r2, [pc, #20]	@ (80036a8 <SystemInit+0x20>)
 8003694:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003698:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800369c:	bf00      	nop
 800369e:	46bd      	mov	sp, r7
 80036a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a4:	4770      	bx	lr
 80036a6:	bf00      	nop
 80036a8:	e000ed00 	.word	0xe000ed00

080036ac <MX_TIM2_Init>:
TIM_HandleTypeDef htim8;
TIM_HandleTypeDef htim20;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b088      	sub	sp, #32
 80036b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80036b2:	f107 0310 	add.w	r3, r7, #16
 80036b6:	2200      	movs	r2, #0
 80036b8:	601a      	str	r2, [r3, #0]
 80036ba:	605a      	str	r2, [r3, #4]
 80036bc:	609a      	str	r2, [r3, #8]
 80036be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80036c0:	1d3b      	adds	r3, r7, #4
 80036c2:	2200      	movs	r2, #0
 80036c4:	601a      	str	r2, [r3, #0]
 80036c6:	605a      	str	r2, [r3, #4]
 80036c8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80036ca:	4b1e      	ldr	r3, [pc, #120]	@ (8003744 <MX_TIM2_Init+0x98>)
 80036cc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80036d0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 169;
 80036d2:	4b1c      	ldr	r3, [pc, #112]	@ (8003744 <MX_TIM2_Init+0x98>)
 80036d4:	22a9      	movs	r2, #169	@ 0xa9
 80036d6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80036d8:	4b1a      	ldr	r3, [pc, #104]	@ (8003744 <MX_TIM2_Init+0x98>)
 80036da:	2200      	movs	r2, #0
 80036dc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 80036de:	4b19      	ldr	r3, [pc, #100]	@ (8003744 <MX_TIM2_Init+0x98>)
 80036e0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80036e4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80036e6:	4b17      	ldr	r3, [pc, #92]	@ (8003744 <MX_TIM2_Init+0x98>)
 80036e8:	2200      	movs	r2, #0
 80036ea:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80036ec:	4b15      	ldr	r3, [pc, #84]	@ (8003744 <MX_TIM2_Init+0x98>)
 80036ee:	2200      	movs	r2, #0
 80036f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80036f2:	4814      	ldr	r0, [pc, #80]	@ (8003744 <MX_TIM2_Init+0x98>)
 80036f4:	f002 fcec 	bl	80060d0 <HAL_TIM_Base_Init>
 80036f8:	4603      	mov	r3, r0
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d001      	beq.n	8003702 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80036fe:	f7ff f9ad 	bl	8002a5c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003702:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003706:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003708:	f107 0310 	add.w	r3, r7, #16
 800370c:	4619      	mov	r1, r3
 800370e:	480d      	ldr	r0, [pc, #52]	@ (8003744 <MX_TIM2_Init+0x98>)
 8003710:	f003 fb20 	bl	8006d54 <HAL_TIM_ConfigClockSource>
 8003714:	4603      	mov	r3, r0
 8003716:	2b00      	cmp	r3, #0
 8003718:	d001      	beq.n	800371e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800371a:	f7ff f99f 	bl	8002a5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800371e:	2320      	movs	r3, #32
 8003720:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003722:	2300      	movs	r3, #0
 8003724:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003726:	1d3b      	adds	r3, r7, #4
 8003728:	4619      	mov	r1, r3
 800372a:	4806      	ldr	r0, [pc, #24]	@ (8003744 <MX_TIM2_Init+0x98>)
 800372c:	f004 f8f0 	bl	8007910 <HAL_TIMEx_MasterConfigSynchronization>
 8003730:	4603      	mov	r3, r0
 8003732:	2b00      	cmp	r3, #0
 8003734:	d001      	beq.n	800373a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8003736:	f7ff f991 	bl	8002a5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800373a:	bf00      	nop
 800373c:	3720      	adds	r7, #32
 800373e:	46bd      	mov	sp, r7
 8003740:	bd80      	pop	{r7, pc}
 8003742:	bf00      	nop
 8003744:	20004334 	.word	0x20004334

08003748 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b08c      	sub	sp, #48	@ 0x30
 800374c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800374e:	f107 030c 	add.w	r3, r7, #12
 8003752:	2224      	movs	r2, #36	@ 0x24
 8003754:	2100      	movs	r1, #0
 8003756:	4618      	mov	r0, r3
 8003758:	f017 fa00 	bl	801ab5c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800375c:	463b      	mov	r3, r7
 800375e:	2200      	movs	r2, #0
 8003760:	601a      	str	r2, [r3, #0]
 8003762:	605a      	str	r2, [r3, #4]
 8003764:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003766:	4b21      	ldr	r3, [pc, #132]	@ (80037ec <MX_TIM3_Init+0xa4>)
 8003768:	4a21      	ldr	r2, [pc, #132]	@ (80037f0 <MX_TIM3_Init+0xa8>)
 800376a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800376c:	4b1f      	ldr	r3, [pc, #124]	@ (80037ec <MX_TIM3_Init+0xa4>)
 800376e:	2200      	movs	r2, #0
 8003770:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003772:	4b1e      	ldr	r3, [pc, #120]	@ (80037ec <MX_TIM3_Init+0xa4>)
 8003774:	2200      	movs	r2, #0
 8003776:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8003778:	4b1c      	ldr	r3, [pc, #112]	@ (80037ec <MX_TIM3_Init+0xa4>)
 800377a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800377e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003780:	4b1a      	ldr	r3, [pc, #104]	@ (80037ec <MX_TIM3_Init+0xa4>)
 8003782:	2200      	movs	r2, #0
 8003784:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003786:	4b19      	ldr	r3, [pc, #100]	@ (80037ec <MX_TIM3_Init+0xa4>)
 8003788:	2200      	movs	r2, #0
 800378a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800378c:	2303      	movs	r3, #3
 800378e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003790:	2300      	movs	r3, #0
 8003792:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003794:	2301      	movs	r3, #1
 8003796:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003798:	2300      	movs	r3, #0
 800379a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800379c:	2300      	movs	r3, #0
 800379e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80037a0:	2300      	movs	r3, #0
 80037a2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80037a4:	2301      	movs	r3, #1
 80037a6:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80037a8:	2300      	movs	r3, #0
 80037aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80037ac:	2300      	movs	r3, #0
 80037ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80037b0:	f107 030c 	add.w	r3, r7, #12
 80037b4:	4619      	mov	r1, r3
 80037b6:	480d      	ldr	r0, [pc, #52]	@ (80037ec <MX_TIM3_Init+0xa4>)
 80037b8:	f002 ff34 	bl	8006624 <HAL_TIM_Encoder_Init>
 80037bc:	4603      	mov	r3, r0
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d001      	beq.n	80037c6 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 80037c2:	f7ff f94b 	bl	8002a5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80037c6:	2300      	movs	r3, #0
 80037c8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80037ca:	2300      	movs	r3, #0
 80037cc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80037ce:	463b      	mov	r3, r7
 80037d0:	4619      	mov	r1, r3
 80037d2:	4806      	ldr	r0, [pc, #24]	@ (80037ec <MX_TIM3_Init+0xa4>)
 80037d4:	f004 f89c 	bl	8007910 <HAL_TIMEx_MasterConfigSynchronization>
 80037d8:	4603      	mov	r3, r0
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d001      	beq.n	80037e2 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 80037de:	f7ff f93d 	bl	8002a5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80037e2:	bf00      	nop
 80037e4:	3730      	adds	r7, #48	@ 0x30
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bd80      	pop	{r7, pc}
 80037ea:	bf00      	nop
 80037ec:	20004380 	.word	0x20004380
 80037f0:	40000400 	.word	0x40000400

080037f4 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b08c      	sub	sp, #48	@ 0x30
 80037f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80037fa:	f107 030c 	add.w	r3, r7, #12
 80037fe:	2224      	movs	r2, #36	@ 0x24
 8003800:	2100      	movs	r1, #0
 8003802:	4618      	mov	r0, r3
 8003804:	f017 f9aa 	bl	801ab5c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003808:	463b      	mov	r3, r7
 800380a:	2200      	movs	r2, #0
 800380c:	601a      	str	r2, [r3, #0]
 800380e:	605a      	str	r2, [r3, #4]
 8003810:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003812:	4b21      	ldr	r3, [pc, #132]	@ (8003898 <MX_TIM4_Init+0xa4>)
 8003814:	4a21      	ldr	r2, [pc, #132]	@ (800389c <MX_TIM4_Init+0xa8>)
 8003816:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8003818:	4b1f      	ldr	r3, [pc, #124]	@ (8003898 <MX_TIM4_Init+0xa4>)
 800381a:	2200      	movs	r2, #0
 800381c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800381e:	4b1e      	ldr	r3, [pc, #120]	@ (8003898 <MX_TIM4_Init+0xa4>)
 8003820:	2200      	movs	r2, #0
 8003822:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8003824:	4b1c      	ldr	r3, [pc, #112]	@ (8003898 <MX_TIM4_Init+0xa4>)
 8003826:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800382a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800382c:	4b1a      	ldr	r3, [pc, #104]	@ (8003898 <MX_TIM4_Init+0xa4>)
 800382e:	2200      	movs	r2, #0
 8003830:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003832:	4b19      	ldr	r3, [pc, #100]	@ (8003898 <MX_TIM4_Init+0xa4>)
 8003834:	2200      	movs	r2, #0
 8003836:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003838:	2303      	movs	r3, #3
 800383a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800383c:	2300      	movs	r3, #0
 800383e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003840:	2301      	movs	r3, #1
 8003842:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003844:	2300      	movs	r3, #0
 8003846:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003848:	2300      	movs	r3, #0
 800384a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800384c:	2300      	movs	r3, #0
 800384e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003850:	2301      	movs	r3, #1
 8003852:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003854:	2300      	movs	r3, #0
 8003856:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8003858:	2300      	movs	r3, #0
 800385a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800385c:	f107 030c 	add.w	r3, r7, #12
 8003860:	4619      	mov	r1, r3
 8003862:	480d      	ldr	r0, [pc, #52]	@ (8003898 <MX_TIM4_Init+0xa4>)
 8003864:	f002 fede 	bl	8006624 <HAL_TIM_Encoder_Init>
 8003868:	4603      	mov	r3, r0
 800386a:	2b00      	cmp	r3, #0
 800386c:	d001      	beq.n	8003872 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 800386e:	f7ff f8f5 	bl	8002a5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003872:	2300      	movs	r3, #0
 8003874:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003876:	2300      	movs	r3, #0
 8003878:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800387a:	463b      	mov	r3, r7
 800387c:	4619      	mov	r1, r3
 800387e:	4806      	ldr	r0, [pc, #24]	@ (8003898 <MX_TIM4_Init+0xa4>)
 8003880:	f004 f846 	bl	8007910 <HAL_TIMEx_MasterConfigSynchronization>
 8003884:	4603      	mov	r3, r0
 8003886:	2b00      	cmp	r3, #0
 8003888:	d001      	beq.n	800388e <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 800388a:	f7ff f8e7 	bl	8002a5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800388e:	bf00      	nop
 8003890:	3730      	adds	r7, #48	@ 0x30
 8003892:	46bd      	mov	sp, r7
 8003894:	bd80      	pop	{r7, pc}
 8003896:	bf00      	nop
 8003898:	200043cc 	.word	0x200043cc
 800389c:	40000800 	.word	0x40000800

080038a0 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b08c      	sub	sp, #48	@ 0x30
 80038a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80038a6:	f107 030c 	add.w	r3, r7, #12
 80038aa:	2224      	movs	r2, #36	@ 0x24
 80038ac:	2100      	movs	r1, #0
 80038ae:	4618      	mov	r0, r3
 80038b0:	f017 f954 	bl	801ab5c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80038b4:	463b      	mov	r3, r7
 80038b6:	2200      	movs	r2, #0
 80038b8:	601a      	str	r2, [r3, #0]
 80038ba:	605a      	str	r2, [r3, #4]
 80038bc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80038be:	4b21      	ldr	r3, [pc, #132]	@ (8003944 <MX_TIM5_Init+0xa4>)
 80038c0:	4a21      	ldr	r2, [pc, #132]	@ (8003948 <MX_TIM5_Init+0xa8>)
 80038c2:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80038c4:	4b1f      	ldr	r3, [pc, #124]	@ (8003944 <MX_TIM5_Init+0xa4>)
 80038c6:	2200      	movs	r2, #0
 80038c8:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80038ca:	4b1e      	ldr	r3, [pc, #120]	@ (8003944 <MX_TIM5_Init+0xa4>)
 80038cc:	2200      	movs	r2, #0
 80038ce:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80038d0:	4b1c      	ldr	r3, [pc, #112]	@ (8003944 <MX_TIM5_Init+0xa4>)
 80038d2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80038d6:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80038d8:	4b1a      	ldr	r3, [pc, #104]	@ (8003944 <MX_TIM5_Init+0xa4>)
 80038da:	2200      	movs	r2, #0
 80038dc:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80038de:	4b19      	ldr	r3, [pc, #100]	@ (8003944 <MX_TIM5_Init+0xa4>)
 80038e0:	2200      	movs	r2, #0
 80038e2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80038e4:	2303      	movs	r3, #3
 80038e6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80038e8:	2300      	movs	r3, #0
 80038ea:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80038ec:	2301      	movs	r3, #1
 80038ee:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80038f0:	2300      	movs	r3, #0
 80038f2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80038f4:	2300      	movs	r3, #0
 80038f6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80038f8:	2300      	movs	r3, #0
 80038fa:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80038fc:	2301      	movs	r3, #1
 80038fe:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003900:	2300      	movs	r3, #0
 8003902:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8003904:	2300      	movs	r3, #0
 8003906:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8003908:	f107 030c 	add.w	r3, r7, #12
 800390c:	4619      	mov	r1, r3
 800390e:	480d      	ldr	r0, [pc, #52]	@ (8003944 <MX_TIM5_Init+0xa4>)
 8003910:	f002 fe88 	bl	8006624 <HAL_TIM_Encoder_Init>
 8003914:	4603      	mov	r3, r0
 8003916:	2b00      	cmp	r3, #0
 8003918:	d001      	beq.n	800391e <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 800391a:	f7ff f89f 	bl	8002a5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800391e:	2300      	movs	r3, #0
 8003920:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003922:	2300      	movs	r3, #0
 8003924:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8003926:	463b      	mov	r3, r7
 8003928:	4619      	mov	r1, r3
 800392a:	4806      	ldr	r0, [pc, #24]	@ (8003944 <MX_TIM5_Init+0xa4>)
 800392c:	f003 fff0 	bl	8007910 <HAL_TIMEx_MasterConfigSynchronization>
 8003930:	4603      	mov	r3, r0
 8003932:	2b00      	cmp	r3, #0
 8003934:	d001      	beq.n	800393a <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 8003936:	f7ff f891 	bl	8002a5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800393a:	bf00      	nop
 800393c:	3730      	adds	r7, #48	@ 0x30
 800393e:	46bd      	mov	sp, r7
 8003940:	bd80      	pop	{r7, pc}
 8003942:	bf00      	nop
 8003944:	20004418 	.word	0x20004418
 8003948:	40000c00 	.word	0x40000c00

0800394c <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b098      	sub	sp, #96	@ 0x60
 8003950:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003952:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003956:	2200      	movs	r2, #0
 8003958:	601a      	str	r2, [r3, #0]
 800395a:	605a      	str	r2, [r3, #4]
 800395c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800395e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003962:	2200      	movs	r2, #0
 8003964:	601a      	str	r2, [r3, #0]
 8003966:	605a      	str	r2, [r3, #4]
 8003968:	609a      	str	r2, [r3, #8]
 800396a:	60da      	str	r2, [r3, #12]
 800396c:	611a      	str	r2, [r3, #16]
 800396e:	615a      	str	r2, [r3, #20]
 8003970:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003972:	1d3b      	adds	r3, r7, #4
 8003974:	2234      	movs	r2, #52	@ 0x34
 8003976:	2100      	movs	r1, #0
 8003978:	4618      	mov	r0, r3
 800397a:	f017 f8ef 	bl	801ab5c <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800397e:	4b4d      	ldr	r3, [pc, #308]	@ (8003ab4 <MX_TIM8_Init+0x168>)
 8003980:	4a4d      	ldr	r2, [pc, #308]	@ (8003ab8 <MX_TIM8_Init+0x16c>)
 8003982:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8003984:	4b4b      	ldr	r3, [pc, #300]	@ (8003ab4 <MX_TIM8_Init+0x168>)
 8003986:	2200      	movs	r2, #0
 8003988:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800398a:	4b4a      	ldr	r3, [pc, #296]	@ (8003ab4 <MX_TIM8_Init+0x168>)
 800398c:	2200      	movs	r2, #0
 800398e:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8003990:	4b48      	ldr	r3, [pc, #288]	@ (8003ab4 <MX_TIM8_Init+0x168>)
 8003992:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003996:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003998:	4b46      	ldr	r3, [pc, #280]	@ (8003ab4 <MX_TIM8_Init+0x168>)
 800399a:	2200      	movs	r2, #0
 800399c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800399e:	4b45      	ldr	r3, [pc, #276]	@ (8003ab4 <MX_TIM8_Init+0x168>)
 80039a0:	2200      	movs	r2, #0
 80039a2:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80039a4:	4b43      	ldr	r3, [pc, #268]	@ (8003ab4 <MX_TIM8_Init+0x168>)
 80039a6:	2200      	movs	r2, #0
 80039a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80039aa:	4842      	ldr	r0, [pc, #264]	@ (8003ab4 <MX_TIM8_Init+0x168>)
 80039ac:	f002 fcd0 	bl	8006350 <HAL_TIM_PWM_Init>
 80039b0:	4603      	mov	r3, r0
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d001      	beq.n	80039ba <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 80039b6:	f7ff f851 	bl	8002a5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80039ba:	2300      	movs	r3, #0
 80039bc:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80039be:	2300      	movs	r3, #0
 80039c0:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80039c2:	2300      	movs	r3, #0
 80039c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80039c6:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80039ca:	4619      	mov	r1, r3
 80039cc:	4839      	ldr	r0, [pc, #228]	@ (8003ab4 <MX_TIM8_Init+0x168>)
 80039ce:	f003 ff9f 	bl	8007910 <HAL_TIMEx_MasterConfigSynchronization>
 80039d2:	4603      	mov	r3, r0
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d001      	beq.n	80039dc <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 80039d8:	f7ff f840 	bl	8002a5c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80039dc:	2360      	movs	r3, #96	@ 0x60
 80039de:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 80039e0:	2300      	movs	r3, #0
 80039e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80039e4:	2300      	movs	r3, #0
 80039e6:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80039e8:	2300      	movs	r3, #0
 80039ea:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80039ec:	2300      	movs	r3, #0
 80039ee:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80039f0:	2300      	movs	r3, #0
 80039f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80039f4:	2300      	movs	r3, #0
 80039f6:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80039f8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80039fc:	2200      	movs	r2, #0
 80039fe:	4619      	mov	r1, r3
 8003a00:	482c      	ldr	r0, [pc, #176]	@ (8003ab4 <MX_TIM8_Init+0x168>)
 8003a02:	f003 f893 	bl	8006b2c <HAL_TIM_PWM_ConfigChannel>
 8003a06:	4603      	mov	r3, r0
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d001      	beq.n	8003a10 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8003a0c:	f7ff f826 	bl	8002a5c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003a10:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003a14:	2204      	movs	r2, #4
 8003a16:	4619      	mov	r1, r3
 8003a18:	4826      	ldr	r0, [pc, #152]	@ (8003ab4 <MX_TIM8_Init+0x168>)
 8003a1a:	f003 f887 	bl	8006b2c <HAL_TIM_PWM_ConfigChannel>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d001      	beq.n	8003a28 <MX_TIM8_Init+0xdc>
  {
    Error_Handler();
 8003a24:	f7ff f81a 	bl	8002a5c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003a28:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003a2c:	2208      	movs	r2, #8
 8003a2e:	4619      	mov	r1, r3
 8003a30:	4820      	ldr	r0, [pc, #128]	@ (8003ab4 <MX_TIM8_Init+0x168>)
 8003a32:	f003 f87b 	bl	8006b2c <HAL_TIM_PWM_ConfigChannel>
 8003a36:	4603      	mov	r3, r0
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d001      	beq.n	8003a40 <MX_TIM8_Init+0xf4>
  {
    Error_Handler();
 8003a3c:	f7ff f80e 	bl	8002a5c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003a40:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003a44:	220c      	movs	r2, #12
 8003a46:	4619      	mov	r1, r3
 8003a48:	481a      	ldr	r0, [pc, #104]	@ (8003ab4 <MX_TIM8_Init+0x168>)
 8003a4a:	f003 f86f 	bl	8006b2c <HAL_TIM_PWM_ConfigChannel>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d001      	beq.n	8003a58 <MX_TIM8_Init+0x10c>
  {
    Error_Handler();
 8003a54:	f7ff f802 	bl	8002a5c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003a58:	2300      	movs	r3, #0
 8003a5a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003a60:	2300      	movs	r3, #0
 8003a62:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003a64:	2300      	movs	r3, #0
 8003a66:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003a68:	2300      	movs	r3, #0
 8003a6a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003a6c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003a70:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8003a72:	2300      	movs	r3, #0
 8003a74:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8003a76:	2300      	movs	r3, #0
 8003a78:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8003a7e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003a82:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8003a84:	2300      	movs	r3, #0
 8003a86:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8003a88:	2300      	movs	r3, #0
 8003a8a:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8003a90:	1d3b      	adds	r3, r7, #4
 8003a92:	4619      	mov	r1, r3
 8003a94:	4807      	ldr	r0, [pc, #28]	@ (8003ab4 <MX_TIM8_Init+0x168>)
 8003a96:	f003 ffd1 	bl	8007a3c <HAL_TIMEx_ConfigBreakDeadTime>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d001      	beq.n	8003aa4 <MX_TIM8_Init+0x158>
  {
    Error_Handler();
 8003aa0:	f7fe ffdc 	bl	8002a5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8003aa4:	4803      	ldr	r0, [pc, #12]	@ (8003ab4 <MX_TIM8_Init+0x168>)
 8003aa6:	f000 f99d 	bl	8003de4 <HAL_TIM_MspPostInit>

}
 8003aaa:	bf00      	nop
 8003aac:	3760      	adds	r7, #96	@ 0x60
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bd80      	pop	{r7, pc}
 8003ab2:	bf00      	nop
 8003ab4:	20004464 	.word	0x20004464
 8003ab8:	40013400 	.word	0x40013400

08003abc <MX_TIM20_Init>:
/* TIM20 init function */
void MX_TIM20_Init(void)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b08c      	sub	sp, #48	@ 0x30
 8003ac0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM20_Init 0 */

  /* USER CODE END TIM20_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003ac2:	f107 030c 	add.w	r3, r7, #12
 8003ac6:	2224      	movs	r2, #36	@ 0x24
 8003ac8:	2100      	movs	r1, #0
 8003aca:	4618      	mov	r0, r3
 8003acc:	f017 f846 	bl	801ab5c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003ad0:	463b      	mov	r3, r7
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	601a      	str	r2, [r3, #0]
 8003ad6:	605a      	str	r2, [r3, #4]
 8003ad8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM20_Init 1 */

  /* USER CODE END TIM20_Init 1 */
  htim20.Instance = TIM20;
 8003ada:	4b23      	ldr	r3, [pc, #140]	@ (8003b68 <MX_TIM20_Init+0xac>)
 8003adc:	4a23      	ldr	r2, [pc, #140]	@ (8003b6c <MX_TIM20_Init+0xb0>)
 8003ade:	601a      	str	r2, [r3, #0]
  htim20.Init.Prescaler = 0;
 8003ae0:	4b21      	ldr	r3, [pc, #132]	@ (8003b68 <MX_TIM20_Init+0xac>)
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	605a      	str	r2, [r3, #4]
  htim20.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003ae6:	4b20      	ldr	r3, [pc, #128]	@ (8003b68 <MX_TIM20_Init+0xac>)
 8003ae8:	2200      	movs	r2, #0
 8003aea:	609a      	str	r2, [r3, #8]
  htim20.Init.Period = 65535;
 8003aec:	4b1e      	ldr	r3, [pc, #120]	@ (8003b68 <MX_TIM20_Init+0xac>)
 8003aee:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003af2:	60da      	str	r2, [r3, #12]
  htim20.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003af4:	4b1c      	ldr	r3, [pc, #112]	@ (8003b68 <MX_TIM20_Init+0xac>)
 8003af6:	2200      	movs	r2, #0
 8003af8:	611a      	str	r2, [r3, #16]
  htim20.Init.RepetitionCounter = 0;
 8003afa:	4b1b      	ldr	r3, [pc, #108]	@ (8003b68 <MX_TIM20_Init+0xac>)
 8003afc:	2200      	movs	r2, #0
 8003afe:	615a      	str	r2, [r3, #20]
  htim20.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003b00:	4b19      	ldr	r3, [pc, #100]	@ (8003b68 <MX_TIM20_Init+0xac>)
 8003b02:	2200      	movs	r2, #0
 8003b04:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003b06:	2303      	movs	r3, #3
 8003b08:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003b12:	2300      	movs	r3, #0
 8003b14:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003b16:	2300      	movs	r3, #0
 8003b18:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003b22:	2300      	movs	r3, #0
 8003b24:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8003b26:	2300      	movs	r3, #0
 8003b28:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim20, &sConfig) != HAL_OK)
 8003b2a:	f107 030c 	add.w	r3, r7, #12
 8003b2e:	4619      	mov	r1, r3
 8003b30:	480d      	ldr	r0, [pc, #52]	@ (8003b68 <MX_TIM20_Init+0xac>)
 8003b32:	f002 fd77 	bl	8006624 <HAL_TIM_Encoder_Init>
 8003b36:	4603      	mov	r3, r0
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d001      	beq.n	8003b40 <MX_TIM20_Init+0x84>
  {
    Error_Handler();
 8003b3c:	f7fe ff8e 	bl	8002a5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003b40:	2300      	movs	r3, #0
 8003b42:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003b44:	2300      	movs	r3, #0
 8003b46:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003b48:	2300      	movs	r3, #0
 8003b4a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim20, &sMasterConfig) != HAL_OK)
 8003b4c:	463b      	mov	r3, r7
 8003b4e:	4619      	mov	r1, r3
 8003b50:	4805      	ldr	r0, [pc, #20]	@ (8003b68 <MX_TIM20_Init+0xac>)
 8003b52:	f003 fedd 	bl	8007910 <HAL_TIMEx_MasterConfigSynchronization>
 8003b56:	4603      	mov	r3, r0
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d001      	beq.n	8003b60 <MX_TIM20_Init+0xa4>
  {
    Error_Handler();
 8003b5c:	f7fe ff7e 	bl	8002a5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM20_Init 2 */

  /* USER CODE END TIM20_Init 2 */

}
 8003b60:	bf00      	nop
 8003b62:	3730      	adds	r7, #48	@ 0x30
 8003b64:	46bd      	mov	sp, r7
 8003b66:	bd80      	pop	{r7, pc}
 8003b68:	200044b0 	.word	0x200044b0
 8003b6c:	40015000 	.word	0x40015000

08003b70 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b084      	sub	sp, #16
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b80:	d113      	bne.n	8003baa <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003b82:	4b0c      	ldr	r3, [pc, #48]	@ (8003bb4 <HAL_TIM_Base_MspInit+0x44>)
 8003b84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b86:	4a0b      	ldr	r2, [pc, #44]	@ (8003bb4 <HAL_TIM_Base_MspInit+0x44>)
 8003b88:	f043 0301 	orr.w	r3, r3, #1
 8003b8c:	6593      	str	r3, [r2, #88]	@ 0x58
 8003b8e:	4b09      	ldr	r3, [pc, #36]	@ (8003bb4 <HAL_TIM_Base_MspInit+0x44>)
 8003b90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b92:	f003 0301 	and.w	r3, r3, #1
 8003b96:	60fb      	str	r3, [r7, #12]
 8003b98:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	2105      	movs	r1, #5
 8003b9e:	201c      	movs	r0, #28
 8003ba0:	f000 fca8 	bl	80044f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003ba4:	201c      	movs	r0, #28
 8003ba6:	f000 fcbf 	bl	8004528 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8003baa:	bf00      	nop
 8003bac:	3710      	adds	r7, #16
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}
 8003bb2:	bf00      	nop
 8003bb4:	40021000 	.word	0x40021000

08003bb8 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b090      	sub	sp, #64	@ 0x40
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bc0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	601a      	str	r2, [r3, #0]
 8003bc8:	605a      	str	r2, [r3, #4]
 8003bca:	609a      	str	r2, [r3, #8]
 8003bcc:	60da      	str	r2, [r3, #12]
 8003bce:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4a6c      	ldr	r2, [pc, #432]	@ (8003d88 <HAL_TIM_Encoder_MspInit+0x1d0>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d129      	bne.n	8003c2e <HAL_TIM_Encoder_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003bda:	4b6c      	ldr	r3, [pc, #432]	@ (8003d8c <HAL_TIM_Encoder_MspInit+0x1d4>)
 8003bdc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bde:	4a6b      	ldr	r2, [pc, #428]	@ (8003d8c <HAL_TIM_Encoder_MspInit+0x1d4>)
 8003be0:	f043 0302 	orr.w	r3, r3, #2
 8003be4:	6593      	str	r3, [r2, #88]	@ 0x58
 8003be6:	4b69      	ldr	r3, [pc, #420]	@ (8003d8c <HAL_TIM_Encoder_MspInit+0x1d4>)
 8003be8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bea:	f003 0302 	and.w	r3, r3, #2
 8003bee:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003bf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003bf2:	4b66      	ldr	r3, [pc, #408]	@ (8003d8c <HAL_TIM_Encoder_MspInit+0x1d4>)
 8003bf4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003bf6:	4a65      	ldr	r2, [pc, #404]	@ (8003d8c <HAL_TIM_Encoder_MspInit+0x1d4>)
 8003bf8:	f043 0301 	orr.w	r3, r3, #1
 8003bfc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003bfe:	4b63      	ldr	r3, [pc, #396]	@ (8003d8c <HAL_TIM_Encoder_MspInit+0x1d4>)
 8003c00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c02:	f003 0301 	and.w	r3, r3, #1
 8003c06:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**TIM3 GPIO Configuration
    PA4     ------> TIM3_CH2
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8003c0a:	2350      	movs	r3, #80	@ 0x50
 8003c0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c0e:	2302      	movs	r3, #2
 8003c10:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c12:	2300      	movs	r3, #0
 8003c14:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c16:	2300      	movs	r3, #0
 8003c18:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003c1a:	2302      	movs	r3, #2
 8003c1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c1e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003c22:	4619      	mov	r1, r3
 8003c24:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003c28:	f000 ffca 	bl	8004bc0 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM20_MspInit 1 */

  /* USER CODE END TIM20_MspInit 1 */
  }
}
 8003c2c:	e0a7      	b.n	8003d7e <HAL_TIM_Encoder_MspInit+0x1c6>
  else if(tim_encoderHandle->Instance==TIM4)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4a57      	ldr	r2, [pc, #348]	@ (8003d90 <HAL_TIM_Encoder_MspInit+0x1d8>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d12a      	bne.n	8003c8e <HAL_TIM_Encoder_MspInit+0xd6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003c38:	4b54      	ldr	r3, [pc, #336]	@ (8003d8c <HAL_TIM_Encoder_MspInit+0x1d4>)
 8003c3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c3c:	4a53      	ldr	r2, [pc, #332]	@ (8003d8c <HAL_TIM_Encoder_MspInit+0x1d4>)
 8003c3e:	f043 0304 	orr.w	r3, r3, #4
 8003c42:	6593      	str	r3, [r2, #88]	@ 0x58
 8003c44:	4b51      	ldr	r3, [pc, #324]	@ (8003d8c <HAL_TIM_Encoder_MspInit+0x1d4>)
 8003c46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c48:	f003 0304 	and.w	r3, r3, #4
 8003c4c:	623b      	str	r3, [r7, #32]
 8003c4e:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c50:	4b4e      	ldr	r3, [pc, #312]	@ (8003d8c <HAL_TIM_Encoder_MspInit+0x1d4>)
 8003c52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c54:	4a4d      	ldr	r2, [pc, #308]	@ (8003d8c <HAL_TIM_Encoder_MspInit+0x1d4>)
 8003c56:	f043 0301 	orr.w	r3, r3, #1
 8003c5a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003c5c:	4b4b      	ldr	r3, [pc, #300]	@ (8003d8c <HAL_TIM_Encoder_MspInit+0x1d4>)
 8003c5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c60:	f003 0301 	and.w	r3, r3, #1
 8003c64:	61fb      	str	r3, [r7, #28]
 8003c66:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8003c68:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8003c6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c6e:	2302      	movs	r3, #2
 8003c70:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c72:	2300      	movs	r3, #0
 8003c74:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c76:	2300      	movs	r3, #0
 8003c78:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8003c7a:	230a      	movs	r3, #10
 8003c7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c7e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003c82:	4619      	mov	r1, r3
 8003c84:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003c88:	f000 ff9a 	bl	8004bc0 <HAL_GPIO_Init>
}
 8003c8c:	e077      	b.n	8003d7e <HAL_TIM_Encoder_MspInit+0x1c6>
  else if(tim_encoderHandle->Instance==TIM5)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4a40      	ldr	r2, [pc, #256]	@ (8003d94 <HAL_TIM_Encoder_MspInit+0x1dc>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d129      	bne.n	8003cec <HAL_TIM_Encoder_MspInit+0x134>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003c98:	4b3c      	ldr	r3, [pc, #240]	@ (8003d8c <HAL_TIM_Encoder_MspInit+0x1d4>)
 8003c9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c9c:	4a3b      	ldr	r2, [pc, #236]	@ (8003d8c <HAL_TIM_Encoder_MspInit+0x1d4>)
 8003c9e:	f043 0308 	orr.w	r3, r3, #8
 8003ca2:	6593      	str	r3, [r2, #88]	@ 0x58
 8003ca4:	4b39      	ldr	r3, [pc, #228]	@ (8003d8c <HAL_TIM_Encoder_MspInit+0x1d4>)
 8003ca6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ca8:	f003 0308 	and.w	r3, r3, #8
 8003cac:	61bb      	str	r3, [r7, #24]
 8003cae:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003cb0:	4b36      	ldr	r3, [pc, #216]	@ (8003d8c <HAL_TIM_Encoder_MspInit+0x1d4>)
 8003cb2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003cb4:	4a35      	ldr	r2, [pc, #212]	@ (8003d8c <HAL_TIM_Encoder_MspInit+0x1d4>)
 8003cb6:	f043 0301 	orr.w	r3, r3, #1
 8003cba:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003cbc:	4b33      	ldr	r3, [pc, #204]	@ (8003d8c <HAL_TIM_Encoder_MspInit+0x1d4>)
 8003cbe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003cc0:	f003 0301 	and.w	r3, r3, #1
 8003cc4:	617b      	str	r3, [r7, #20]
 8003cc6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003cc8:	2303      	movs	r3, #3
 8003cca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ccc:	2302      	movs	r3, #2
 8003cce:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8003cd8:	2302      	movs	r3, #2
 8003cda:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003cdc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003ce0:	4619      	mov	r1, r3
 8003ce2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003ce6:	f000 ff6b 	bl	8004bc0 <HAL_GPIO_Init>
}
 8003cea:	e048      	b.n	8003d7e <HAL_TIM_Encoder_MspInit+0x1c6>
  else if(tim_encoderHandle->Instance==TIM20)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a29      	ldr	r2, [pc, #164]	@ (8003d98 <HAL_TIM_Encoder_MspInit+0x1e0>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d143      	bne.n	8003d7e <HAL_TIM_Encoder_MspInit+0x1c6>
    __HAL_RCC_TIM20_CLK_ENABLE();
 8003cf6:	4b25      	ldr	r3, [pc, #148]	@ (8003d8c <HAL_TIM_Encoder_MspInit+0x1d4>)
 8003cf8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003cfa:	4a24      	ldr	r2, [pc, #144]	@ (8003d8c <HAL_TIM_Encoder_MspInit+0x1d4>)
 8003cfc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003d00:	6613      	str	r3, [r2, #96]	@ 0x60
 8003d02:	4b22      	ldr	r3, [pc, #136]	@ (8003d8c <HAL_TIM_Encoder_MspInit+0x1d4>)
 8003d04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d06:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003d0a:	613b      	str	r3, [r7, #16]
 8003d0c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003d0e:	4b1f      	ldr	r3, [pc, #124]	@ (8003d8c <HAL_TIM_Encoder_MspInit+0x1d4>)
 8003d10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d12:	4a1e      	ldr	r2, [pc, #120]	@ (8003d8c <HAL_TIM_Encoder_MspInit+0x1d4>)
 8003d14:	f043 0304 	orr.w	r3, r3, #4
 8003d18:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003d1a:	4b1c      	ldr	r3, [pc, #112]	@ (8003d8c <HAL_TIM_Encoder_MspInit+0x1d4>)
 8003d1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d1e:	f003 0304 	and.w	r3, r3, #4
 8003d22:	60fb      	str	r3, [r7, #12]
 8003d24:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d26:	4b19      	ldr	r3, [pc, #100]	@ (8003d8c <HAL_TIM_Encoder_MspInit+0x1d4>)
 8003d28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d2a:	4a18      	ldr	r2, [pc, #96]	@ (8003d8c <HAL_TIM_Encoder_MspInit+0x1d4>)
 8003d2c:	f043 0302 	orr.w	r3, r3, #2
 8003d30:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003d32:	4b16      	ldr	r3, [pc, #88]	@ (8003d8c <HAL_TIM_Encoder_MspInit+0x1d4>)
 8003d34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d36:	f003 0302 	and.w	r3, r3, #2
 8003d3a:	60bb      	str	r3, [r7, #8]
 8003d3c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003d3e:	2304      	movs	r3, #4
 8003d40:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d42:	2302      	movs	r3, #2
 8003d44:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d46:	2300      	movs	r3, #0
 8003d48:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM20;
 8003d4e:	2306      	movs	r3, #6
 8003d50:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003d52:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003d56:	4619      	mov	r1, r3
 8003d58:	4810      	ldr	r0, [pc, #64]	@ (8003d9c <HAL_TIM_Encoder_MspInit+0x1e4>)
 8003d5a:	f000 ff31 	bl	8004bc0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003d5e:	2304      	movs	r3, #4
 8003d60:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d62:	2302      	movs	r3, #2
 8003d64:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d66:	2300      	movs	r3, #0
 8003d68:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM20;
 8003d6e:	2303      	movs	r3, #3
 8003d70:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d72:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003d76:	4619      	mov	r1, r3
 8003d78:	4809      	ldr	r0, [pc, #36]	@ (8003da0 <HAL_TIM_Encoder_MspInit+0x1e8>)
 8003d7a:	f000 ff21 	bl	8004bc0 <HAL_GPIO_Init>
}
 8003d7e:	bf00      	nop
 8003d80:	3740      	adds	r7, #64	@ 0x40
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd80      	pop	{r7, pc}
 8003d86:	bf00      	nop
 8003d88:	40000400 	.word	0x40000400
 8003d8c:	40021000 	.word	0x40021000
 8003d90:	40000800 	.word	0x40000800
 8003d94:	40000c00 	.word	0x40000c00
 8003d98:	40015000 	.word	0x40015000
 8003d9c:	48000800 	.word	0x48000800
 8003da0:	48000400 	.word	0x48000400

08003da4 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8003da4:	b480      	push	{r7}
 8003da6:	b085      	sub	sp, #20
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM8)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a0a      	ldr	r2, [pc, #40]	@ (8003ddc <HAL_TIM_PWM_MspInit+0x38>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d10b      	bne.n	8003dce <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* TIM8 clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003db6:	4b0a      	ldr	r3, [pc, #40]	@ (8003de0 <HAL_TIM_PWM_MspInit+0x3c>)
 8003db8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003dba:	4a09      	ldr	r2, [pc, #36]	@ (8003de0 <HAL_TIM_PWM_MspInit+0x3c>)
 8003dbc:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003dc0:	6613      	str	r3, [r2, #96]	@ 0x60
 8003dc2:	4b07      	ldr	r3, [pc, #28]	@ (8003de0 <HAL_TIM_PWM_MspInit+0x3c>)
 8003dc4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003dc6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003dca:	60fb      	str	r3, [r7, #12]
 8003dcc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8003dce:	bf00      	nop
 8003dd0:	3714      	adds	r7, #20
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd8:	4770      	bx	lr
 8003dda:	bf00      	nop
 8003ddc:	40013400 	.word	0x40013400
 8003de0:	40021000 	.word	0x40021000

08003de4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b088      	sub	sp, #32
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003dec:	f107 030c 	add.w	r3, r7, #12
 8003df0:	2200      	movs	r2, #0
 8003df2:	601a      	str	r2, [r3, #0]
 8003df4:	605a      	str	r2, [r3, #4]
 8003df6:	609a      	str	r2, [r3, #8]
 8003df8:	60da      	str	r2, [r3, #12]
 8003dfa:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM8)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a11      	ldr	r2, [pc, #68]	@ (8003e48 <HAL_TIM_MspPostInit+0x64>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d11c      	bne.n	8003e40 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003e06:	4b11      	ldr	r3, [pc, #68]	@ (8003e4c <HAL_TIM_MspPostInit+0x68>)
 8003e08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e0a:	4a10      	ldr	r2, [pc, #64]	@ (8003e4c <HAL_TIM_MspPostInit+0x68>)
 8003e0c:	f043 0304 	orr.w	r3, r3, #4
 8003e10:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003e12:	4b0e      	ldr	r3, [pc, #56]	@ (8003e4c <HAL_TIM_MspPostInit+0x68>)
 8003e14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e16:	f003 0304 	and.w	r3, r3, #4
 8003e1a:	60bb      	str	r3, [r7, #8]
 8003e1c:	68bb      	ldr	r3, [r7, #8]
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    PC8     ------> TIM8_CH3
    PC9     ------> TIM8_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8003e1e:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8003e22:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e24:	2302      	movs	r3, #2
 8003e26:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e28:	2300      	movs	r3, #0
 8003e2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8003e30:	2304      	movs	r3, #4
 8003e32:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003e34:	f107 030c 	add.w	r3, r7, #12
 8003e38:	4619      	mov	r1, r3
 8003e3a:	4805      	ldr	r0, [pc, #20]	@ (8003e50 <HAL_TIM_MspPostInit+0x6c>)
 8003e3c:	f000 fec0 	bl	8004bc0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8003e40:	bf00      	nop
 8003e42:	3720      	adds	r7, #32
 8003e44:	46bd      	mov	sp, r7
 8003e46:	bd80      	pop	{r7, pc}
 8003e48:	40013400 	.word	0x40013400
 8003e4c:	40021000 	.word	0x40021000
 8003e50:	48000800 	.word	0x48000800

08003e54 <transporter_begin>:
PID_CONTROLLER pid3;
PID_CONTROLLER pid4;

FIR lowPassFilter;

void transporter_begin() {
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b082      	sub	sp, #8
 8003e58:	af02      	add	r7, sp, #8
//	QEI_init(&encoder1, ENC_TIM1, ENC_PPR, ENC_FREQ);
//	QEI_init(&encoder2, ENC_TIM2, ENC_PPR, ENC_FREQ);
	QEI_init(&encoder3, ENC_TIM3, ENC_PPR, ENC_FREQ, MOTOR_RATIO);
 8003e5a:	ed9f 0a2c 	vldr	s0, [pc, #176]	@ 8003f0c <transporter_begin+0xb8>
 8003e5e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003e62:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003e66:	492a      	ldr	r1, [pc, #168]	@ (8003f10 <transporter_begin+0xbc>)
 8003e68:	482a      	ldr	r0, [pc, #168]	@ (8003f14 <transporter_begin+0xc0>)
 8003e6a:	f7fd fcf3 	bl	8001854 <QEI_init>
	QEI_init(&encoder4, ENC_TIM4, ENC_PPR, ENC_FREQ, MOTOR_RATIO);
 8003e6e:	ed9f 0a27 	vldr	s0, [pc, #156]	@ 8003f0c <transporter_begin+0xb8>
 8003e72:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003e76:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003e7a:	4927      	ldr	r1, [pc, #156]	@ (8003f18 <transporter_begin+0xc4>)
 8003e7c:	4827      	ldr	r0, [pc, #156]	@ (8003f1c <transporter_begin+0xc8>)
 8003e7e:	f7fd fce9 	bl	8001854 <QEI_init>

//	MDXX_GPIO_init(&motor1, MOTOR1_TIM, MOTOR1_TIM_CH, MOTOR1_GPIOx, MOTOR1_GPIO_Pin);
//	MDXX_GPIO_init(&motor2, MOTOR2_TIM, MOTOR2_TIM_CH, MOTOR2_GPIOx, MOTOR2_GPIO_Pin);
	MDXX_GPIO_init(&motor3, MOTOR3_TIM, MOTOR3_TIM_CH, MOTOR3_GPIOx, MOTOR3_GPIO_Pin);
 8003e82:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003e86:	9300      	str	r3, [sp, #0]
 8003e88:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8003e8c:	2208      	movs	r2, #8
 8003e8e:	4924      	ldr	r1, [pc, #144]	@ (8003f20 <transporter_begin+0xcc>)
 8003e90:	4824      	ldr	r0, [pc, #144]	@ (8003f24 <transporter_begin+0xd0>)
 8003e92:	f7fd f93c 	bl	800110e <MDXX_GPIO_init>
	MDXX_GPIO_init(&motor4, MOTOR4_TIM, MOTOR4_TIM_CH, MOTOR4_GPIOx, MOTOR4_GPIO_Pin);
 8003e96:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003e9a:	9300      	str	r3, [sp, #0]
 8003e9c:	4b22      	ldr	r3, [pc, #136]	@ (8003f28 <transporter_begin+0xd4>)
 8003e9e:	220c      	movs	r2, #12
 8003ea0:	491f      	ldr	r1, [pc, #124]	@ (8003f20 <transporter_begin+0xcc>)
 8003ea2:	4822      	ldr	r0, [pc, #136]	@ (8003f2c <transporter_begin+0xd8>)
 8003ea4:	f7fd f933 	bl	800110e <MDXX_GPIO_init>

//	MDXX_set_range(&motor1, 2000, 0);
//	MDXX_set_range(&motor2, 2000, 0);
	MDXX_set_range(&motor3, 2000, 0);
 8003ea8:	eddf 0a21 	vldr	s1, [pc, #132]	@ 8003f30 <transporter_begin+0xdc>
 8003eac:	ed9f 0a21 	vldr	s0, [pc, #132]	@ 8003f34 <transporter_begin+0xe0>
 8003eb0:	481c      	ldr	r0, [pc, #112]	@ (8003f24 <transporter_begin+0xd0>)
 8003eb2:	f7fd f951 	bl	8001158 <MDXX_set_range>
	MDXX_set_range(&motor4, 2000, 0);
 8003eb6:	eddf 0a1e 	vldr	s1, [pc, #120]	@ 8003f30 <transporter_begin+0xdc>
 8003eba:	ed9f 0a1e 	vldr	s0, [pc, #120]	@ 8003f34 <transporter_begin+0xe0>
 8003ebe:	481b      	ldr	r0, [pc, #108]	@ (8003f2c <transporter_begin+0xd8>)
 8003ec0:	f7fd f94a 	bl	8001158 <MDXX_set_range>

//	PID_CONTROLLER_Init(&pid1, 1000, 100, 0, 65535);
//	PID_CONTROLLER_Init(&pid2, 1000, 100, 0, 65535);
	PID_CONTROLLER_Init(&pid3, 1000, 100, 0, 65535);
 8003ec4:	eddf 1a1c 	vldr	s3, [pc, #112]	@ 8003f38 <transporter_begin+0xe4>
 8003ec8:	ed9f 1a19 	vldr	s2, [pc, #100]	@ 8003f30 <transporter_begin+0xdc>
 8003ecc:	eddf 0a1b 	vldr	s1, [pc, #108]	@ 8003f3c <transporter_begin+0xe8>
 8003ed0:	ed9f 0a1b 	vldr	s0, [pc, #108]	@ 8003f40 <transporter_begin+0xec>
 8003ed4:	481b      	ldr	r0, [pc, #108]	@ (8003f44 <transporter_begin+0xf0>)
 8003ed6:	f7fd f85e 	bl	8000f96 <PID_CONTROLLER_Init>
	PID_CONTROLLER_Init(&pid4, 500000, 7500, 0, 65535);
 8003eda:	eddf 1a17 	vldr	s3, [pc, #92]	@ 8003f38 <transporter_begin+0xe4>
 8003ede:	ed9f 1a14 	vldr	s2, [pc, #80]	@ 8003f30 <transporter_begin+0xdc>
 8003ee2:	eddf 0a19 	vldr	s1, [pc, #100]	@ 8003f48 <transporter_begin+0xf4>
 8003ee6:	ed9f 0a19 	vldr	s0, [pc, #100]	@ 8003f4c <transporter_begin+0xf8>
 8003eea:	4819      	ldr	r0, [pc, #100]	@ (8003f50 <transporter_begin+0xfc>)
 8003eec:	f7fd f853 	bl	8000f96 <PID_CONTROLLER_Init>

	FIR_init(&lowPassFilter, NUM_TAPS, CUTOFF_FREQ, SAMPLE_RATE);
 8003ef0:	eddf 0a13 	vldr	s1, [pc, #76]	@ 8003f40 <transporter_begin+0xec>
 8003ef4:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 8003ef8:	211f      	movs	r1, #31
 8003efa:	4816      	ldr	r0, [pc, #88]	@ (8003f54 <transporter_begin+0x100>)
 8003efc:	f7fd fa06 	bl	800130c <FIR_init>

	HAL_TIM_Base_Start_IT(CONTROL_TIM);
 8003f00:	4815      	ldr	r0, [pc, #84]	@ (8003f58 <transporter_begin+0x104>)
 8003f02:	f002 f9ad 	bl	8006260 <HAL_TIM_Base_Start_IT>
}
 8003f06:	bf00      	nop
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	bd80      	pop	{r7, pc}
 8003f0c:	3ea8f5c3 	.word	0x3ea8f5c3
 8003f10:	20004418 	.word	0x20004418
 8003f14:	20004594 	.word	0x20004594
 8003f18:	200044b0 	.word	0x200044b0
 8003f1c:	200045e0 	.word	0x200045e0
 8003f20:	20004464 	.word	0x20004464
 8003f24:	200044fc 	.word	0x200044fc
 8003f28:	48000400 	.word	0x48000400
 8003f2c:	20004548 	.word	0x20004548
 8003f30:	00000000 	.word	0x00000000
 8003f34:	44fa0000 	.word	0x44fa0000
 8003f38:	477fff00 	.word	0x477fff00
 8003f3c:	42c80000 	.word	0x42c80000
 8003f40:	447a0000 	.word	0x447a0000
 8003f44:	2000462c 	.word	0x2000462c
 8003f48:	45ea6000 	.word	0x45ea6000
 8003f4c:	48f42400 	.word	0x48f42400
 8003f50:	20004658 	.word	0x20004658
 8003f54:	20004684 	.word	0x20004684
 8003f58:	20004334 	.word	0x20004334

08003f5c <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_lpuart1_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8003f60:	4b20      	ldr	r3, [pc, #128]	@ (8003fe4 <MX_LPUART1_UART_Init+0x88>)
 8003f62:	4a21      	ldr	r2, [pc, #132]	@ (8003fe8 <MX_LPUART1_UART_Init+0x8c>)
 8003f64:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 2000000;
 8003f66:	4b1f      	ldr	r3, [pc, #124]	@ (8003fe4 <MX_LPUART1_UART_Init+0x88>)
 8003f68:	4a20      	ldr	r2, [pc, #128]	@ (8003fec <MX_LPUART1_UART_Init+0x90>)
 8003f6a:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003f6c:	4b1d      	ldr	r3, [pc, #116]	@ (8003fe4 <MX_LPUART1_UART_Init+0x88>)
 8003f6e:	2200      	movs	r2, #0
 8003f70:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8003f72:	4b1c      	ldr	r3, [pc, #112]	@ (8003fe4 <MX_LPUART1_UART_Init+0x88>)
 8003f74:	2200      	movs	r2, #0
 8003f76:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8003f78:	4b1a      	ldr	r3, [pc, #104]	@ (8003fe4 <MX_LPUART1_UART_Init+0x88>)
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8003f7e:	4b19      	ldr	r3, [pc, #100]	@ (8003fe4 <MX_LPUART1_UART_Init+0x88>)
 8003f80:	220c      	movs	r2, #12
 8003f82:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003f84:	4b17      	ldr	r3, [pc, #92]	@ (8003fe4 <MX_LPUART1_UART_Init+0x88>)
 8003f86:	2200      	movs	r2, #0
 8003f88:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003f8a:	4b16      	ldr	r3, [pc, #88]	@ (8003fe4 <MX_LPUART1_UART_Init+0x88>)
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003f90:	4b14      	ldr	r3, [pc, #80]	@ (8003fe4 <MX_LPUART1_UART_Init+0x88>)
 8003f92:	2200      	movs	r2, #0
 8003f94:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003f96:	4b13      	ldr	r3, [pc, #76]	@ (8003fe4 <MX_LPUART1_UART_Init+0x88>)
 8003f98:	2200      	movs	r2, #0
 8003f9a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8003f9c:	4811      	ldr	r0, [pc, #68]	@ (8003fe4 <MX_LPUART1_UART_Init+0x88>)
 8003f9e:	f003 fe27 	bl	8007bf0 <HAL_UART_Init>
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d001      	beq.n	8003fac <MX_LPUART1_UART_Init+0x50>
  {
    Error_Handler();
 8003fa8:	f7fe fd58 	bl	8002a5c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003fac:	2100      	movs	r1, #0
 8003fae:	480d      	ldr	r0, [pc, #52]	@ (8003fe4 <MX_LPUART1_UART_Init+0x88>)
 8003fb0:	f005 fb37 	bl	8009622 <HAL_UARTEx_SetTxFifoThreshold>
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d001      	beq.n	8003fbe <MX_LPUART1_UART_Init+0x62>
  {
    Error_Handler();
 8003fba:	f7fe fd4f 	bl	8002a5c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003fbe:	2100      	movs	r1, #0
 8003fc0:	4808      	ldr	r0, [pc, #32]	@ (8003fe4 <MX_LPUART1_UART_Init+0x88>)
 8003fc2:	f005 fb6c 	bl	800969e <HAL_UARTEx_SetRxFifoThreshold>
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d001      	beq.n	8003fd0 <MX_LPUART1_UART_Init+0x74>
  {
    Error_Handler();
 8003fcc:	f7fe fd46 	bl	8002a5c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8003fd0:	4804      	ldr	r0, [pc, #16]	@ (8003fe4 <MX_LPUART1_UART_Init+0x88>)
 8003fd2:	f005 faed 	bl	80095b0 <HAL_UARTEx_DisableFifoMode>
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d001      	beq.n	8003fe0 <MX_LPUART1_UART_Init+0x84>
  {
    Error_Handler();
 8003fdc:	f7fe fd3e 	bl	8002a5c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8003fe0:	bf00      	nop
 8003fe2:	bd80      	pop	{r7, pc}
 8003fe4:	20004690 	.word	0x20004690
 8003fe8:	40008000 	.word	0x40008000
 8003fec:	001e8480 	.word	0x001e8480

08003ff0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b09e      	sub	sp, #120	@ 0x78
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ff8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	601a      	str	r2, [r3, #0]
 8004000:	605a      	str	r2, [r3, #4]
 8004002:	609a      	str	r2, [r3, #8]
 8004004:	60da      	str	r2, [r3, #12]
 8004006:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004008:	f107 0310 	add.w	r3, r7, #16
 800400c:	2254      	movs	r2, #84	@ 0x54
 800400e:	2100      	movs	r1, #0
 8004010:	4618      	mov	r0, r3
 8004012:	f016 fda3 	bl	801ab5c <memset>
  if(uartHandle->Instance==LPUART1)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4a4e      	ldr	r2, [pc, #312]	@ (8004154 <HAL_UART_MspInit+0x164>)
 800401c:	4293      	cmp	r3, r2
 800401e:	f040 8094 	bne.w	800414a <HAL_UART_MspInit+0x15a>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8004022:	2320      	movs	r3, #32
 8004024:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8004026:	2300      	movs	r3, #0
 8004028:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800402a:	f107 0310 	add.w	r3, r7, #16
 800402e:	4618      	mov	r0, r3
 8004030:	f001 fe00 	bl	8005c34 <HAL_RCCEx_PeriphCLKConfig>
 8004034:	4603      	mov	r3, r0
 8004036:	2b00      	cmp	r3, #0
 8004038:	d001      	beq.n	800403e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800403a:	f7fe fd0f 	bl	8002a5c <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800403e:	4b46      	ldr	r3, [pc, #280]	@ (8004158 <HAL_UART_MspInit+0x168>)
 8004040:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004042:	4a45      	ldr	r2, [pc, #276]	@ (8004158 <HAL_UART_MspInit+0x168>)
 8004044:	f043 0301 	orr.w	r3, r3, #1
 8004048:	65d3      	str	r3, [r2, #92]	@ 0x5c
 800404a:	4b43      	ldr	r3, [pc, #268]	@ (8004158 <HAL_UART_MspInit+0x168>)
 800404c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800404e:	f003 0301 	and.w	r3, r3, #1
 8004052:	60fb      	str	r3, [r7, #12]
 8004054:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004056:	4b40      	ldr	r3, [pc, #256]	@ (8004158 <HAL_UART_MspInit+0x168>)
 8004058:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800405a:	4a3f      	ldr	r2, [pc, #252]	@ (8004158 <HAL_UART_MspInit+0x168>)
 800405c:	f043 0301 	orr.w	r3, r3, #1
 8004060:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004062:	4b3d      	ldr	r3, [pc, #244]	@ (8004158 <HAL_UART_MspInit+0x168>)
 8004064:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004066:	f003 0301 	and.w	r3, r3, #1
 800406a:	60bb      	str	r3, [r7, #8]
 800406c:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 800406e:	230c      	movs	r3, #12
 8004070:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004072:	2302      	movs	r3, #2
 8004074:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004076:	2300      	movs	r3, #0
 8004078:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800407a:	2300      	movs	r3, #0
 800407c:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 800407e:	230c      	movs	r3, #12
 8004080:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004082:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8004086:	4619      	mov	r1, r3
 8004088:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800408c:	f000 fd98 	bl	8004bc0 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel1;
 8004090:	4b32      	ldr	r3, [pc, #200]	@ (800415c <HAL_UART_MspInit+0x16c>)
 8004092:	4a33      	ldr	r2, [pc, #204]	@ (8004160 <HAL_UART_MspInit+0x170>)
 8004094:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 8004096:	4b31      	ldr	r3, [pc, #196]	@ (800415c <HAL_UART_MspInit+0x16c>)
 8004098:	2222      	movs	r2, #34	@ 0x22
 800409a:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800409c:	4b2f      	ldr	r3, [pc, #188]	@ (800415c <HAL_UART_MspInit+0x16c>)
 800409e:	2200      	movs	r2, #0
 80040a0:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80040a2:	4b2e      	ldr	r3, [pc, #184]	@ (800415c <HAL_UART_MspInit+0x16c>)
 80040a4:	2200      	movs	r2, #0
 80040a6:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80040a8:	4b2c      	ldr	r3, [pc, #176]	@ (800415c <HAL_UART_MspInit+0x16c>)
 80040aa:	2280      	movs	r2, #128	@ 0x80
 80040ac:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80040ae:	4b2b      	ldr	r3, [pc, #172]	@ (800415c <HAL_UART_MspInit+0x16c>)
 80040b0:	2200      	movs	r2, #0
 80040b2:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80040b4:	4b29      	ldr	r3, [pc, #164]	@ (800415c <HAL_UART_MspInit+0x16c>)
 80040b6:	2200      	movs	r2, #0
 80040b8:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_CIRCULAR;
 80040ba:	4b28      	ldr	r3, [pc, #160]	@ (800415c <HAL_UART_MspInit+0x16c>)
 80040bc:	2220      	movs	r2, #32
 80040be:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80040c0:	4b26      	ldr	r3, [pc, #152]	@ (800415c <HAL_UART_MspInit+0x16c>)
 80040c2:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 80040c6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 80040c8:	4824      	ldr	r0, [pc, #144]	@ (800415c <HAL_UART_MspInit+0x16c>)
 80040ca:	f000 fa3b 	bl	8004544 <HAL_DMA_Init>
 80040ce:	4603      	mov	r3, r0
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d001      	beq.n	80040d8 <HAL_UART_MspInit+0xe8>
    {
      Error_Handler();
 80040d4:	f7fe fcc2 	bl	8002a5c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	4a20      	ldr	r2, [pc, #128]	@ (800415c <HAL_UART_MspInit+0x16c>)
 80040dc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80040e0:	4a1e      	ldr	r2, [pc, #120]	@ (800415c <HAL_UART_MspInit+0x16c>)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel2;
 80040e6:	4b1f      	ldr	r3, [pc, #124]	@ (8004164 <HAL_UART_MspInit+0x174>)
 80040e8:	4a1f      	ldr	r2, [pc, #124]	@ (8004168 <HAL_UART_MspInit+0x178>)
 80040ea:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 80040ec:	4b1d      	ldr	r3, [pc, #116]	@ (8004164 <HAL_UART_MspInit+0x174>)
 80040ee:	2223      	movs	r2, #35	@ 0x23
 80040f0:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80040f2:	4b1c      	ldr	r3, [pc, #112]	@ (8004164 <HAL_UART_MspInit+0x174>)
 80040f4:	2210      	movs	r2, #16
 80040f6:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80040f8:	4b1a      	ldr	r3, [pc, #104]	@ (8004164 <HAL_UART_MspInit+0x174>)
 80040fa:	2200      	movs	r2, #0
 80040fc:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80040fe:	4b19      	ldr	r3, [pc, #100]	@ (8004164 <HAL_UART_MspInit+0x174>)
 8004100:	2280      	movs	r2, #128	@ 0x80
 8004102:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004104:	4b17      	ldr	r3, [pc, #92]	@ (8004164 <HAL_UART_MspInit+0x174>)
 8004106:	2200      	movs	r2, #0
 8004108:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800410a:	4b16      	ldr	r3, [pc, #88]	@ (8004164 <HAL_UART_MspInit+0x174>)
 800410c:	2200      	movs	r2, #0
 800410e:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 8004110:	4b14      	ldr	r3, [pc, #80]	@ (8004164 <HAL_UART_MspInit+0x174>)
 8004112:	2200      	movs	r2, #0
 8004114:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8004116:	4b13      	ldr	r3, [pc, #76]	@ (8004164 <HAL_UART_MspInit+0x174>)
 8004118:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 800411c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 800411e:	4811      	ldr	r0, [pc, #68]	@ (8004164 <HAL_UART_MspInit+0x174>)
 8004120:	f000 fa10 	bl	8004544 <HAL_DMA_Init>
 8004124:	4603      	mov	r3, r0
 8004126:	2b00      	cmp	r3, #0
 8004128:	d001      	beq.n	800412e <HAL_UART_MspInit+0x13e>
    {
      Error_Handler();
 800412a:	f7fe fc97 	bl	8002a5c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_lpuart1_tx);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	4a0c      	ldr	r2, [pc, #48]	@ (8004164 <HAL_UART_MspInit+0x174>)
 8004132:	67da      	str	r2, [r3, #124]	@ 0x7c
 8004134:	4a0b      	ldr	r2, [pc, #44]	@ (8004164 <HAL_UART_MspInit+0x174>)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 5, 0);
 800413a:	2200      	movs	r2, #0
 800413c:	2105      	movs	r1, #5
 800413e:	205b      	movs	r0, #91	@ 0x5b
 8004140:	f000 f9d8 	bl	80044f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8004144:	205b      	movs	r0, #91	@ 0x5b
 8004146:	f000 f9ef 	bl	8004528 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 800414a:	bf00      	nop
 800414c:	3778      	adds	r7, #120	@ 0x78
 800414e:	46bd      	mov	sp, r7
 8004150:	bd80      	pop	{r7, pc}
 8004152:	bf00      	nop
 8004154:	40008000 	.word	0x40008000
 8004158:	40021000 	.word	0x40021000
 800415c:	20004724 	.word	0x20004724
 8004160:	40020008 	.word	0x40020008
 8004164:	20004784 	.word	0x20004784
 8004168:	4002001c 	.word	0x4002001c

0800416c <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 800416c:	b580      	push	{r7, lr}
 800416e:	b084      	sub	sp, #16
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 800417a:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 800417c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004180:	4904      	ldr	r1, [pc, #16]	@ (8004194 <cubemx_transport_open+0x28>)
 8004182:	68f8      	ldr	r0, [r7, #12]
 8004184:	f003 fe04 	bl	8007d90 <HAL_UART_Receive_DMA>
    return true;
 8004188:	2301      	movs	r3, #1
}
 800418a:	4618      	mov	r0, r3
 800418c:	3710      	adds	r7, #16
 800418e:	46bd      	mov	sp, r7
 8004190:	bd80      	pop	{r7, pc}
 8004192:	bf00      	nop
 8004194:	200047e4 	.word	0x200047e4

08004198 <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 8004198:	b580      	push	{r7, lr}
 800419a:	b084      	sub	sp, #16
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 80041a6:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 80041a8:	68f8      	ldr	r0, [r7, #12]
 80041aa:	f003 fe3d 	bl	8007e28 <HAL_UART_DMAStop>
    return true;
 80041ae:	2301      	movs	r3, #1
}
 80041b0:	4618      	mov	r0, r3
 80041b2:	3710      	adds	r7, #16
 80041b4:	46bd      	mov	sp, r7
 80041b6:	bd80      	pop	{r7, pc}

080041b8 <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b086      	sub	sp, #24
 80041bc:	af00      	add	r7, sp, #0
 80041be:	60f8      	str	r0, [r7, #12]
 80041c0:	60b9      	str	r1, [r7, #8]
 80041c2:	607a      	str	r2, [r7, #4]
 80041c4:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 80041cc:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 80041ce:	697b      	ldr	r3, [r7, #20]
 80041d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041d4:	2b20      	cmp	r3, #32
 80041d6:	d11b      	bne.n	8004210 <cubemx_transport_write+0x58>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	b29b      	uxth	r3, r3
 80041dc:	461a      	mov	r2, r3
 80041de:	68b9      	ldr	r1, [r7, #8]
 80041e0:	6978      	ldr	r0, [r7, #20]
 80041e2:	f003 fd55 	bl	8007c90 <HAL_UART_Transmit_DMA>
 80041e6:	4603      	mov	r3, r0
 80041e8:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 80041ea:	e002      	b.n	80041f2 <cubemx_transport_write+0x3a>
            osDelay(1);
 80041ec:	2001      	movs	r0, #1
 80041ee:	f005 fc85 	bl	8009afc <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 80041f2:	7cfb      	ldrb	r3, [r7, #19]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d104      	bne.n	8004202 <cubemx_transport_write+0x4a>
 80041f8:	697b      	ldr	r3, [r7, #20]
 80041fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041fe:	2b20      	cmp	r3, #32
 8004200:	d1f4      	bne.n	80041ec <cubemx_transport_write+0x34>
        }

        return (ret == HAL_OK) ? len : 0;
 8004202:	7cfb      	ldrb	r3, [r7, #19]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d101      	bne.n	800420c <cubemx_transport_write+0x54>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	e002      	b.n	8004212 <cubemx_transport_write+0x5a>
 800420c:	2300      	movs	r3, #0
 800420e:	e000      	b.n	8004212 <cubemx_transport_write+0x5a>
    }else{
        return 0;
 8004210:	2300      	movs	r3, #0
    }
}
 8004212:	4618      	mov	r0, r3
 8004214:	3718      	adds	r7, #24
 8004216:	46bd      	mov	sp, r7
 8004218:	bd80      	pop	{r7, pc}
	...

0800421c <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 800421c:	b580      	push	{r7, lr}
 800421e:	b088      	sub	sp, #32
 8004220:	af00      	add	r7, sp, #0
 8004222:	60f8      	str	r0, [r7, #12]
 8004224:	60b9      	str	r1, [r7, #8]
 8004226:	607a      	str	r2, [r7, #4]
 8004228:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8004230:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 8004232:	2300      	movs	r3, #0
 8004234:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8004236:	b672      	cpsid	i
}
 8004238:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 800423a:	697b      	ldr	r3, [r7, #20]
 800423c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 8004248:	4a1b      	ldr	r2, [pc, #108]	@ (80042b8 <cubemx_transport_read+0x9c>)
 800424a:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800424c:	b662      	cpsie	i
}
 800424e:	bf00      	nop
        __enable_irq();
        ms_used++;
 8004250:	69fb      	ldr	r3, [r7, #28]
 8004252:	3301      	adds	r3, #1
 8004254:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 8004256:	2001      	movs	r0, #1
 8004258:	f005 fc50 	bl	8009afc <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 800425c:	4b17      	ldr	r3, [pc, #92]	@ (80042bc <cubemx_transport_read+0xa0>)
 800425e:	681a      	ldr	r2, [r3, #0]
 8004260:	4b15      	ldr	r3, [pc, #84]	@ (80042b8 <cubemx_transport_read+0x9c>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	429a      	cmp	r2, r3
 8004266:	d103      	bne.n	8004270 <cubemx_transport_read+0x54>
 8004268:	69fa      	ldr	r2, [r7, #28]
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	429a      	cmp	r2, r3
 800426e:	dbe2      	blt.n	8004236 <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 8004270:	2300      	movs	r3, #0
 8004272:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8004274:	e011      	b.n	800429a <cubemx_transport_read+0x7e>
        buf[wrote] = dma_buffer[dma_head];
 8004276:	4b11      	ldr	r3, [pc, #68]	@ (80042bc <cubemx_transport_read+0xa0>)
 8004278:	681a      	ldr	r2, [r3, #0]
 800427a:	68b9      	ldr	r1, [r7, #8]
 800427c:	69bb      	ldr	r3, [r7, #24]
 800427e:	440b      	add	r3, r1
 8004280:	490f      	ldr	r1, [pc, #60]	@ (80042c0 <cubemx_transport_read+0xa4>)
 8004282:	5c8a      	ldrb	r2, [r1, r2]
 8004284:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 8004286:	4b0d      	ldr	r3, [pc, #52]	@ (80042bc <cubemx_transport_read+0xa0>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	3301      	adds	r3, #1
 800428c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004290:	4a0a      	ldr	r2, [pc, #40]	@ (80042bc <cubemx_transport_read+0xa0>)
 8004292:	6013      	str	r3, [r2, #0]
        wrote++;
 8004294:	69bb      	ldr	r3, [r7, #24]
 8004296:	3301      	adds	r3, #1
 8004298:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 800429a:	4b08      	ldr	r3, [pc, #32]	@ (80042bc <cubemx_transport_read+0xa0>)
 800429c:	681a      	ldr	r2, [r3, #0]
 800429e:	4b06      	ldr	r3, [pc, #24]	@ (80042b8 <cubemx_transport_read+0x9c>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	429a      	cmp	r2, r3
 80042a4:	d003      	beq.n	80042ae <cubemx_transport_read+0x92>
 80042a6:	69ba      	ldr	r2, [r7, #24]
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	429a      	cmp	r2, r3
 80042ac:	d3e3      	bcc.n	8004276 <cubemx_transport_read+0x5a>
    }
    
    return wrote;
 80042ae:	69bb      	ldr	r3, [r7, #24]
}
 80042b0:	4618      	mov	r0, r3
 80042b2:	3720      	adds	r7, #32
 80042b4:	46bd      	mov	sp, r7
 80042b6:	bd80      	pop	{r7, pc}
 80042b8:	20004fe8 	.word	0x20004fe8
 80042bc:	20004fe4 	.word	0x20004fe4
 80042c0:	200047e4 	.word	0x200047e4

080042c4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80042c4:	480d      	ldr	r0, [pc, #52]	@ (80042fc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80042c6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80042c8:	f7ff f9de 	bl	8003688 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80042cc:	480c      	ldr	r0, [pc, #48]	@ (8004300 <LoopForever+0x6>)
  ldr r1, =_edata
 80042ce:	490d      	ldr	r1, [pc, #52]	@ (8004304 <LoopForever+0xa>)
  ldr r2, =_sidata
 80042d0:	4a0d      	ldr	r2, [pc, #52]	@ (8004308 <LoopForever+0xe>)
  movs r3, #0
 80042d2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80042d4:	e002      	b.n	80042dc <LoopCopyDataInit>

080042d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80042d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80042d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80042da:	3304      	adds	r3, #4

080042dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80042dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80042de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80042e0:	d3f9      	bcc.n	80042d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80042e2:	4a0a      	ldr	r2, [pc, #40]	@ (800430c <LoopForever+0x12>)
  ldr r4, =_ebss
 80042e4:	4c0a      	ldr	r4, [pc, #40]	@ (8004310 <LoopForever+0x16>)
  movs r3, #0
 80042e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80042e8:	e001      	b.n	80042ee <LoopFillZerobss>

080042ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80042ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80042ec:	3204      	adds	r2, #4

080042ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80042ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80042f0:	d3fb      	bcc.n	80042ea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80042f2:	f016 fccd 	bl	801ac90 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80042f6:	f7fe fa0d 	bl	8002714 <main>

080042fa <LoopForever>:

LoopForever:
    b LoopForever
 80042fa:	e7fe      	b.n	80042fa <LoopForever>
  ldr   r0, =_estack
 80042fc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004300:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004304:	20000488 	.word	0x20000488
  ldr r2, =_sidata
 8004308:	0801e8cc 	.word	0x0801e8cc
  ldr r2, =_sbss
 800430c:	20000488 	.word	0x20000488
  ldr r4, =_ebss
 8004310:	2000b60c 	.word	0x2000b60c

08004314 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004314:	e7fe      	b.n	8004314 <ADC1_2_IRQHandler>

08004316 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004316:	b580      	push	{r7, lr}
 8004318:	b082      	sub	sp, #8
 800431a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800431c:	2300      	movs	r3, #0
 800431e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004320:	2003      	movs	r0, #3
 8004322:	f000 f8dc 	bl	80044de <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004326:	200f      	movs	r0, #15
 8004328:	f7ff f826 	bl	8003378 <HAL_InitTick>
 800432c:	4603      	mov	r3, r0
 800432e:	2b00      	cmp	r3, #0
 8004330:	d002      	beq.n	8004338 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8004332:	2301      	movs	r3, #1
 8004334:	71fb      	strb	r3, [r7, #7]
 8004336:	e001      	b.n	800433c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004338:	f7fe fff4 	bl	8003324 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800433c:	79fb      	ldrb	r3, [r7, #7]

}
 800433e:	4618      	mov	r0, r3
 8004340:	3708      	adds	r7, #8
 8004342:	46bd      	mov	sp, r7
 8004344:	bd80      	pop	{r7, pc}
	...

08004348 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004348:	b480      	push	{r7}
 800434a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800434c:	4b05      	ldr	r3, [pc, #20]	@ (8004364 <HAL_IncTick+0x1c>)
 800434e:	681a      	ldr	r2, [r3, #0]
 8004350:	4b05      	ldr	r3, [pc, #20]	@ (8004368 <HAL_IncTick+0x20>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4413      	add	r3, r2
 8004356:	4a03      	ldr	r2, [pc, #12]	@ (8004364 <HAL_IncTick+0x1c>)
 8004358:	6013      	str	r3, [r2, #0]
}
 800435a:	bf00      	nop
 800435c:	46bd      	mov	sp, r7
 800435e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004362:	4770      	bx	lr
 8004364:	20004fec 	.word	0x20004fec
 8004368:	2000000c 	.word	0x2000000c

0800436c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800436c:	b480      	push	{r7}
 800436e:	af00      	add	r7, sp, #0
  return uwTick;
 8004370:	4b03      	ldr	r3, [pc, #12]	@ (8004380 <HAL_GetTick+0x14>)
 8004372:	681b      	ldr	r3, [r3, #0]
}
 8004374:	4618      	mov	r0, r3
 8004376:	46bd      	mov	sp, r7
 8004378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437c:	4770      	bx	lr
 800437e:	bf00      	nop
 8004380:	20004fec 	.word	0x20004fec

08004384 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004384:	b480      	push	{r7}
 8004386:	b085      	sub	sp, #20
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	f003 0307 	and.w	r3, r3, #7
 8004392:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004394:	4b0c      	ldr	r3, [pc, #48]	@ (80043c8 <__NVIC_SetPriorityGrouping+0x44>)
 8004396:	68db      	ldr	r3, [r3, #12]
 8004398:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800439a:	68ba      	ldr	r2, [r7, #8]
 800439c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80043a0:	4013      	ands	r3, r2
 80043a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80043a8:	68bb      	ldr	r3, [r7, #8]
 80043aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80043ac:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80043b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80043b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80043b6:	4a04      	ldr	r2, [pc, #16]	@ (80043c8 <__NVIC_SetPriorityGrouping+0x44>)
 80043b8:	68bb      	ldr	r3, [r7, #8]
 80043ba:	60d3      	str	r3, [r2, #12]
}
 80043bc:	bf00      	nop
 80043be:	3714      	adds	r7, #20
 80043c0:	46bd      	mov	sp, r7
 80043c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c6:	4770      	bx	lr
 80043c8:	e000ed00 	.word	0xe000ed00

080043cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80043cc:	b480      	push	{r7}
 80043ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80043d0:	4b04      	ldr	r3, [pc, #16]	@ (80043e4 <__NVIC_GetPriorityGrouping+0x18>)
 80043d2:	68db      	ldr	r3, [r3, #12]
 80043d4:	0a1b      	lsrs	r3, r3, #8
 80043d6:	f003 0307 	and.w	r3, r3, #7
}
 80043da:	4618      	mov	r0, r3
 80043dc:	46bd      	mov	sp, r7
 80043de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e2:	4770      	bx	lr
 80043e4:	e000ed00 	.word	0xe000ed00

080043e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80043e8:	b480      	push	{r7}
 80043ea:	b083      	sub	sp, #12
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	4603      	mov	r3, r0
 80043f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80043f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	db0b      	blt.n	8004412 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80043fa:	79fb      	ldrb	r3, [r7, #7]
 80043fc:	f003 021f 	and.w	r2, r3, #31
 8004400:	4907      	ldr	r1, [pc, #28]	@ (8004420 <__NVIC_EnableIRQ+0x38>)
 8004402:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004406:	095b      	lsrs	r3, r3, #5
 8004408:	2001      	movs	r0, #1
 800440a:	fa00 f202 	lsl.w	r2, r0, r2
 800440e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004412:	bf00      	nop
 8004414:	370c      	adds	r7, #12
 8004416:	46bd      	mov	sp, r7
 8004418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441c:	4770      	bx	lr
 800441e:	bf00      	nop
 8004420:	e000e100 	.word	0xe000e100

08004424 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004424:	b480      	push	{r7}
 8004426:	b083      	sub	sp, #12
 8004428:	af00      	add	r7, sp, #0
 800442a:	4603      	mov	r3, r0
 800442c:	6039      	str	r1, [r7, #0]
 800442e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004430:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004434:	2b00      	cmp	r3, #0
 8004436:	db0a      	blt.n	800444e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	b2da      	uxtb	r2, r3
 800443c:	490c      	ldr	r1, [pc, #48]	@ (8004470 <__NVIC_SetPriority+0x4c>)
 800443e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004442:	0112      	lsls	r2, r2, #4
 8004444:	b2d2      	uxtb	r2, r2
 8004446:	440b      	add	r3, r1
 8004448:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800444c:	e00a      	b.n	8004464 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	b2da      	uxtb	r2, r3
 8004452:	4908      	ldr	r1, [pc, #32]	@ (8004474 <__NVIC_SetPriority+0x50>)
 8004454:	79fb      	ldrb	r3, [r7, #7]
 8004456:	f003 030f 	and.w	r3, r3, #15
 800445a:	3b04      	subs	r3, #4
 800445c:	0112      	lsls	r2, r2, #4
 800445e:	b2d2      	uxtb	r2, r2
 8004460:	440b      	add	r3, r1
 8004462:	761a      	strb	r2, [r3, #24]
}
 8004464:	bf00      	nop
 8004466:	370c      	adds	r7, #12
 8004468:	46bd      	mov	sp, r7
 800446a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446e:	4770      	bx	lr
 8004470:	e000e100 	.word	0xe000e100
 8004474:	e000ed00 	.word	0xe000ed00

08004478 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004478:	b480      	push	{r7}
 800447a:	b089      	sub	sp, #36	@ 0x24
 800447c:	af00      	add	r7, sp, #0
 800447e:	60f8      	str	r0, [r7, #12]
 8004480:	60b9      	str	r1, [r7, #8]
 8004482:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	f003 0307 	and.w	r3, r3, #7
 800448a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800448c:	69fb      	ldr	r3, [r7, #28]
 800448e:	f1c3 0307 	rsb	r3, r3, #7
 8004492:	2b04      	cmp	r3, #4
 8004494:	bf28      	it	cs
 8004496:	2304      	movcs	r3, #4
 8004498:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800449a:	69fb      	ldr	r3, [r7, #28]
 800449c:	3304      	adds	r3, #4
 800449e:	2b06      	cmp	r3, #6
 80044a0:	d902      	bls.n	80044a8 <NVIC_EncodePriority+0x30>
 80044a2:	69fb      	ldr	r3, [r7, #28]
 80044a4:	3b03      	subs	r3, #3
 80044a6:	e000      	b.n	80044aa <NVIC_EncodePriority+0x32>
 80044a8:	2300      	movs	r3, #0
 80044aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80044ac:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80044b0:	69bb      	ldr	r3, [r7, #24]
 80044b2:	fa02 f303 	lsl.w	r3, r2, r3
 80044b6:	43da      	mvns	r2, r3
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	401a      	ands	r2, r3
 80044bc:	697b      	ldr	r3, [r7, #20]
 80044be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80044c0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80044c4:	697b      	ldr	r3, [r7, #20]
 80044c6:	fa01 f303 	lsl.w	r3, r1, r3
 80044ca:	43d9      	mvns	r1, r3
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80044d0:	4313      	orrs	r3, r2
         );
}
 80044d2:	4618      	mov	r0, r3
 80044d4:	3724      	adds	r7, #36	@ 0x24
 80044d6:	46bd      	mov	sp, r7
 80044d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044dc:	4770      	bx	lr

080044de <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80044de:	b580      	push	{r7, lr}
 80044e0:	b082      	sub	sp, #8
 80044e2:	af00      	add	r7, sp, #0
 80044e4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80044e6:	6878      	ldr	r0, [r7, #4]
 80044e8:	f7ff ff4c 	bl	8004384 <__NVIC_SetPriorityGrouping>
}
 80044ec:	bf00      	nop
 80044ee:	3708      	adds	r7, #8
 80044f0:	46bd      	mov	sp, r7
 80044f2:	bd80      	pop	{r7, pc}

080044f4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b086      	sub	sp, #24
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	4603      	mov	r3, r0
 80044fc:	60b9      	str	r1, [r7, #8]
 80044fe:	607a      	str	r2, [r7, #4]
 8004500:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004502:	f7ff ff63 	bl	80043cc <__NVIC_GetPriorityGrouping>
 8004506:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004508:	687a      	ldr	r2, [r7, #4]
 800450a:	68b9      	ldr	r1, [r7, #8]
 800450c:	6978      	ldr	r0, [r7, #20]
 800450e:	f7ff ffb3 	bl	8004478 <NVIC_EncodePriority>
 8004512:	4602      	mov	r2, r0
 8004514:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004518:	4611      	mov	r1, r2
 800451a:	4618      	mov	r0, r3
 800451c:	f7ff ff82 	bl	8004424 <__NVIC_SetPriority>
}
 8004520:	bf00      	nop
 8004522:	3718      	adds	r7, #24
 8004524:	46bd      	mov	sp, r7
 8004526:	bd80      	pop	{r7, pc}

08004528 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b082      	sub	sp, #8
 800452c:	af00      	add	r7, sp, #0
 800452e:	4603      	mov	r3, r0
 8004530:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004532:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004536:	4618      	mov	r0, r3
 8004538:	f7ff ff56 	bl	80043e8 <__NVIC_EnableIRQ>
}
 800453c:	bf00      	nop
 800453e:	3708      	adds	r7, #8
 8004540:	46bd      	mov	sp, r7
 8004542:	bd80      	pop	{r7, pc}

08004544 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b084      	sub	sp, #16
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d101      	bne.n	8004556 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004552:	2301      	movs	r3, #1
 8004554:	e08d      	b.n	8004672 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	461a      	mov	r2, r3
 800455c:	4b47      	ldr	r3, [pc, #284]	@ (800467c <HAL_DMA_Init+0x138>)
 800455e:	429a      	cmp	r2, r3
 8004560:	d80f      	bhi.n	8004582 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	461a      	mov	r2, r3
 8004568:	4b45      	ldr	r3, [pc, #276]	@ (8004680 <HAL_DMA_Init+0x13c>)
 800456a:	4413      	add	r3, r2
 800456c:	4a45      	ldr	r2, [pc, #276]	@ (8004684 <HAL_DMA_Init+0x140>)
 800456e:	fba2 2303 	umull	r2, r3, r2, r3
 8004572:	091b      	lsrs	r3, r3, #4
 8004574:	009a      	lsls	r2, r3, #2
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	4a42      	ldr	r2, [pc, #264]	@ (8004688 <HAL_DMA_Init+0x144>)
 800457e:	641a      	str	r2, [r3, #64]	@ 0x40
 8004580:	e00e      	b.n	80045a0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	461a      	mov	r2, r3
 8004588:	4b40      	ldr	r3, [pc, #256]	@ (800468c <HAL_DMA_Init+0x148>)
 800458a:	4413      	add	r3, r2
 800458c:	4a3d      	ldr	r2, [pc, #244]	@ (8004684 <HAL_DMA_Init+0x140>)
 800458e:	fba2 2303 	umull	r2, r3, r2, r3
 8004592:	091b      	lsrs	r3, r3, #4
 8004594:	009a      	lsls	r2, r3, #2
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	4a3c      	ldr	r2, [pc, #240]	@ (8004690 <HAL_DMA_Init+0x14c>)
 800459e:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2202      	movs	r2, #2
 80045a4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80045b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80045ba:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80045c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	691b      	ldr	r3, [r3, #16]
 80045ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80045d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	699b      	ldr	r3, [r3, #24]
 80045d6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80045dc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6a1b      	ldr	r3, [r3, #32]
 80045e2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80045e4:	68fa      	ldr	r2, [r7, #12]
 80045e6:	4313      	orrs	r3, r2
 80045e8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	68fa      	ldr	r2, [r7, #12]
 80045f0:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80045f2:	6878      	ldr	r0, [r7, #4]
 80045f4:	f000 fa82 	bl	8004afc <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	689b      	ldr	r3, [r3, #8]
 80045fc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004600:	d102      	bne.n	8004608 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2200      	movs	r2, #0
 8004606:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	685a      	ldr	r2, [r3, #4]
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004610:	b2d2      	uxtb	r2, r2
 8004612:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004618:	687a      	ldr	r2, [r7, #4]
 800461a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800461c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d010      	beq.n	8004648 <HAL_DMA_Init+0x104>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	2b04      	cmp	r3, #4
 800462c:	d80c      	bhi.n	8004648 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800462e:	6878      	ldr	r0, [r7, #4]
 8004630:	f000 faa2 	bl	8004b78 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004638:	2200      	movs	r2, #0
 800463a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004640:	687a      	ldr	r2, [r7, #4]
 8004642:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004644:	605a      	str	r2, [r3, #4]
 8004646:	e008      	b.n	800465a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2200      	movs	r2, #0
 800464c:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2200      	movs	r2, #0
 8004652:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2200      	movs	r2, #0
 8004658:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2200      	movs	r2, #0
 800465e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2201      	movs	r2, #1
 8004664:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2200      	movs	r2, #0
 800466c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004670:	2300      	movs	r3, #0
}
 8004672:	4618      	mov	r0, r3
 8004674:	3710      	adds	r7, #16
 8004676:	46bd      	mov	sp, r7
 8004678:	bd80      	pop	{r7, pc}
 800467a:	bf00      	nop
 800467c:	40020407 	.word	0x40020407
 8004680:	bffdfff8 	.word	0xbffdfff8
 8004684:	cccccccd 	.word	0xcccccccd
 8004688:	40020000 	.word	0x40020000
 800468c:	bffdfbf8 	.word	0xbffdfbf8
 8004690:	40020400 	.word	0x40020400

08004694 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b086      	sub	sp, #24
 8004698:	af00      	add	r7, sp, #0
 800469a:	60f8      	str	r0, [r7, #12]
 800469c:	60b9      	str	r1, [r7, #8]
 800469e:	607a      	str	r2, [r7, #4]
 80046a0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80046a2:	2300      	movs	r3, #0
 80046a4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80046ac:	2b01      	cmp	r3, #1
 80046ae:	d101      	bne.n	80046b4 <HAL_DMA_Start_IT+0x20>
 80046b0:	2302      	movs	r3, #2
 80046b2:	e066      	b.n	8004782 <HAL_DMA_Start_IT+0xee>
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	2201      	movs	r2, #1
 80046b8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80046c2:	b2db      	uxtb	r3, r3
 80046c4:	2b01      	cmp	r3, #1
 80046c6:	d155      	bne.n	8004774 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	2202      	movs	r2, #2
 80046cc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	2200      	movs	r2, #0
 80046d4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	681a      	ldr	r2, [r3, #0]
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f022 0201 	bic.w	r2, r2, #1
 80046e4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	687a      	ldr	r2, [r7, #4]
 80046ea:	68b9      	ldr	r1, [r7, #8]
 80046ec:	68f8      	ldr	r0, [r7, #12]
 80046ee:	f000 f9c7 	bl	8004a80 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d008      	beq.n	800470c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	681a      	ldr	r2, [r3, #0]
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f042 020e 	orr.w	r2, r2, #14
 8004708:	601a      	str	r2, [r3, #0]
 800470a:	e00f      	b.n	800472c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	681a      	ldr	r2, [r3, #0]
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f022 0204 	bic.w	r2, r2, #4
 800471a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	681a      	ldr	r2, [r3, #0]
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f042 020a 	orr.w	r2, r2, #10
 800472a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004736:	2b00      	cmp	r3, #0
 8004738:	d007      	beq.n	800474a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800473e:	681a      	ldr	r2, [r3, #0]
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004744:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004748:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800474e:	2b00      	cmp	r3, #0
 8004750:	d007      	beq.n	8004762 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004756:	681a      	ldr	r2, [r3, #0]
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800475c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004760:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	681a      	ldr	r2, [r3, #0]
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f042 0201 	orr.w	r2, r2, #1
 8004770:	601a      	str	r2, [r3, #0]
 8004772:	e005      	b.n	8004780 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	2200      	movs	r2, #0
 8004778:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800477c:	2302      	movs	r3, #2
 800477e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004780:	7dfb      	ldrb	r3, [r7, #23]
}
 8004782:	4618      	mov	r0, r3
 8004784:	3718      	adds	r7, #24
 8004786:	46bd      	mov	sp, r7
 8004788:	bd80      	pop	{r7, pc}

0800478a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800478a:	b480      	push	{r7}
 800478c:	b085      	sub	sp, #20
 800478e:	af00      	add	r7, sp, #0
 8004790:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004792:	2300      	movs	r3, #0
 8004794:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800479c:	b2db      	uxtb	r3, r3
 800479e:	2b02      	cmp	r3, #2
 80047a0:	d005      	beq.n	80047ae <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2204      	movs	r2, #4
 80047a6:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80047a8:	2301      	movs	r3, #1
 80047aa:	73fb      	strb	r3, [r7, #15]
 80047ac:	e037      	b.n	800481e <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	681a      	ldr	r2, [r3, #0]
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f022 020e 	bic.w	r2, r2, #14
 80047bc:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80047c2:	681a      	ldr	r2, [r3, #0]
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80047c8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80047cc:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	681a      	ldr	r2, [r3, #0]
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f022 0201 	bic.w	r2, r2, #1
 80047dc:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047e2:	f003 021f 	and.w	r2, r3, #31
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047ea:	2101      	movs	r1, #1
 80047ec:	fa01 f202 	lsl.w	r2, r1, r2
 80047f0:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80047f6:	687a      	ldr	r2, [r7, #4]
 80047f8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80047fa:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004800:	2b00      	cmp	r3, #0
 8004802:	d00c      	beq.n	800481e <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004808:	681a      	ldr	r2, [r3, #0]
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800480e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004812:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004818:	687a      	ldr	r2, [r7, #4]
 800481a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800481c:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2201      	movs	r2, #1
 8004822:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2200      	movs	r2, #0
 800482a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 800482e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004830:	4618      	mov	r0, r3
 8004832:	3714      	adds	r7, #20
 8004834:	46bd      	mov	sp, r7
 8004836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483a:	4770      	bx	lr

0800483c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b084      	sub	sp, #16
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004844:	2300      	movs	r3, #0
 8004846:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800484e:	b2db      	uxtb	r3, r3
 8004850:	2b02      	cmp	r3, #2
 8004852:	d00d      	beq.n	8004870 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2204      	movs	r2, #4
 8004858:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2201      	movs	r2, #1
 800485e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2200      	movs	r2, #0
 8004866:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 800486a:	2301      	movs	r3, #1
 800486c:	73fb      	strb	r3, [r7, #15]
 800486e:	e047      	b.n	8004900 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	681a      	ldr	r2, [r3, #0]
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f022 020e 	bic.w	r2, r2, #14
 800487e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	681a      	ldr	r2, [r3, #0]
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f022 0201 	bic.w	r2, r2, #1
 800488e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004894:	681a      	ldr	r2, [r3, #0]
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800489a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800489e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048a4:	f003 021f 	and.w	r2, r3, #31
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048ac:	2101      	movs	r1, #1
 80048ae:	fa01 f202 	lsl.w	r2, r1, r2
 80048b2:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80048b8:	687a      	ldr	r2, [r7, #4]
 80048ba:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80048bc:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d00c      	beq.n	80048e0 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048ca:	681a      	ldr	r2, [r3, #0]
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048d0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80048d4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048da:	687a      	ldr	r2, [r7, #4]
 80048dc:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80048de:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2201      	movs	r2, #1
 80048e4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2200      	movs	r2, #0
 80048ec:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d003      	beq.n	8004900 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048fc:	6878      	ldr	r0, [r7, #4]
 80048fe:	4798      	blx	r3
    }
  }
  return status;
 8004900:	7bfb      	ldrb	r3, [r7, #15]
}
 8004902:	4618      	mov	r0, r3
 8004904:	3710      	adds	r7, #16
 8004906:	46bd      	mov	sp, r7
 8004908:	bd80      	pop	{r7, pc}

0800490a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800490a:	b580      	push	{r7, lr}
 800490c:	b084      	sub	sp, #16
 800490e:	af00      	add	r7, sp, #0
 8004910:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004926:	f003 031f 	and.w	r3, r3, #31
 800492a:	2204      	movs	r2, #4
 800492c:	409a      	lsls	r2, r3
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	4013      	ands	r3, r2
 8004932:	2b00      	cmp	r3, #0
 8004934:	d026      	beq.n	8004984 <HAL_DMA_IRQHandler+0x7a>
 8004936:	68bb      	ldr	r3, [r7, #8]
 8004938:	f003 0304 	and.w	r3, r3, #4
 800493c:	2b00      	cmp	r3, #0
 800493e:	d021      	beq.n	8004984 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f003 0320 	and.w	r3, r3, #32
 800494a:	2b00      	cmp	r3, #0
 800494c:	d107      	bne.n	800495e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	681a      	ldr	r2, [r3, #0]
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f022 0204 	bic.w	r2, r2, #4
 800495c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004962:	f003 021f 	and.w	r2, r3, #31
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800496a:	2104      	movs	r1, #4
 800496c:	fa01 f202 	lsl.w	r2, r1, r2
 8004970:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004976:	2b00      	cmp	r3, #0
 8004978:	d071      	beq.n	8004a5e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800497e:	6878      	ldr	r0, [r7, #4]
 8004980:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004982:	e06c      	b.n	8004a5e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004988:	f003 031f 	and.w	r3, r3, #31
 800498c:	2202      	movs	r2, #2
 800498e:	409a      	lsls	r2, r3
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	4013      	ands	r3, r2
 8004994:	2b00      	cmp	r3, #0
 8004996:	d02e      	beq.n	80049f6 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8004998:	68bb      	ldr	r3, [r7, #8]
 800499a:	f003 0302 	and.w	r3, r3, #2
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d029      	beq.n	80049f6 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f003 0320 	and.w	r3, r3, #32
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d10b      	bne.n	80049c8 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	681a      	ldr	r2, [r3, #0]
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f022 020a 	bic.w	r2, r2, #10
 80049be:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2201      	movs	r2, #1
 80049c4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049cc:	f003 021f 	and.w	r2, r3, #31
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049d4:	2102      	movs	r1, #2
 80049d6:	fa01 f202 	lsl.w	r2, r1, r2
 80049da:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2200      	movs	r2, #0
 80049e0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d038      	beq.n	8004a5e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049f0:	6878      	ldr	r0, [r7, #4]
 80049f2:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80049f4:	e033      	b.n	8004a5e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049fa:	f003 031f 	and.w	r3, r3, #31
 80049fe:	2208      	movs	r2, #8
 8004a00:	409a      	lsls	r2, r3
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	4013      	ands	r3, r2
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d02a      	beq.n	8004a60 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8004a0a:	68bb      	ldr	r3, [r7, #8]
 8004a0c:	f003 0308 	and.w	r3, r3, #8
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d025      	beq.n	8004a60 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	681a      	ldr	r2, [r3, #0]
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f022 020e 	bic.w	r2, r2, #14
 8004a22:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a28:	f003 021f 	and.w	r2, r3, #31
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a30:	2101      	movs	r1, #1
 8004a32:	fa01 f202 	lsl.w	r2, r1, r2
 8004a36:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2201      	movs	r2, #1
 8004a3c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2201      	movs	r2, #1
 8004a42:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2200      	movs	r2, #0
 8004a4a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d004      	beq.n	8004a60 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a5a:	6878      	ldr	r0, [r7, #4]
 8004a5c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004a5e:	bf00      	nop
 8004a60:	bf00      	nop
}
 8004a62:	3710      	adds	r7, #16
 8004a64:	46bd      	mov	sp, r7
 8004a66:	bd80      	pop	{r7, pc}

08004a68 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8004a68:	b480      	push	{r7}
 8004a6a:	b083      	sub	sp, #12
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 8004a74:	4618      	mov	r0, r3
 8004a76:	370c      	adds	r7, #12
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7e:	4770      	bx	lr

08004a80 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004a80:	b480      	push	{r7}
 8004a82:	b085      	sub	sp, #20
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	60f8      	str	r0, [r7, #12]
 8004a88:	60b9      	str	r1, [r7, #8]
 8004a8a:	607a      	str	r2, [r7, #4]
 8004a8c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a92:	68fa      	ldr	r2, [r7, #12]
 8004a94:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004a96:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d004      	beq.n	8004aaa <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004aa4:	68fa      	ldr	r2, [r7, #12]
 8004aa6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004aa8:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004aae:	f003 021f 	and.w	r2, r3, #31
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ab6:	2101      	movs	r1, #1
 8004ab8:	fa01 f202 	lsl.w	r2, r1, r2
 8004abc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	683a      	ldr	r2, [r7, #0]
 8004ac4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	689b      	ldr	r3, [r3, #8]
 8004aca:	2b10      	cmp	r3, #16
 8004acc:	d108      	bne.n	8004ae0 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	687a      	ldr	r2, [r7, #4]
 8004ad4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	68ba      	ldr	r2, [r7, #8]
 8004adc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004ade:	e007      	b.n	8004af0 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	68ba      	ldr	r2, [r7, #8]
 8004ae6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	687a      	ldr	r2, [r7, #4]
 8004aee:	60da      	str	r2, [r3, #12]
}
 8004af0:	bf00      	nop
 8004af2:	3714      	adds	r7, #20
 8004af4:	46bd      	mov	sp, r7
 8004af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afa:	4770      	bx	lr

08004afc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004afc:	b480      	push	{r7}
 8004afe:	b087      	sub	sp, #28
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	461a      	mov	r2, r3
 8004b0a:	4b16      	ldr	r3, [pc, #88]	@ (8004b64 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8004b0c:	429a      	cmp	r2, r3
 8004b0e:	d802      	bhi.n	8004b16 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8004b10:	4b15      	ldr	r3, [pc, #84]	@ (8004b68 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8004b12:	617b      	str	r3, [r7, #20]
 8004b14:	e001      	b.n	8004b1a <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8004b16:	4b15      	ldr	r3, [pc, #84]	@ (8004b6c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004b18:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8004b1a:	697b      	ldr	r3, [r7, #20]
 8004b1c:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	b2db      	uxtb	r3, r3
 8004b24:	3b08      	subs	r3, #8
 8004b26:	4a12      	ldr	r2, [pc, #72]	@ (8004b70 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004b28:	fba2 2303 	umull	r2, r3, r2, r3
 8004b2c:	091b      	lsrs	r3, r3, #4
 8004b2e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b34:	089b      	lsrs	r3, r3, #2
 8004b36:	009a      	lsls	r2, r3, #2
 8004b38:	693b      	ldr	r3, [r7, #16]
 8004b3a:	4413      	add	r3, r2
 8004b3c:	461a      	mov	r2, r3
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	4a0b      	ldr	r2, [pc, #44]	@ (8004b74 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8004b46:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	f003 031f 	and.w	r3, r3, #31
 8004b4e:	2201      	movs	r2, #1
 8004b50:	409a      	lsls	r2, r3
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004b56:	bf00      	nop
 8004b58:	371c      	adds	r7, #28
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b60:	4770      	bx	lr
 8004b62:	bf00      	nop
 8004b64:	40020407 	.word	0x40020407
 8004b68:	40020800 	.word	0x40020800
 8004b6c:	40020820 	.word	0x40020820
 8004b70:	cccccccd 	.word	0xcccccccd
 8004b74:	40020880 	.word	0x40020880

08004b78 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004b78:	b480      	push	{r7}
 8004b7a:	b085      	sub	sp, #20
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	685b      	ldr	r3, [r3, #4]
 8004b84:	b2db      	uxtb	r3, r3
 8004b86:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004b88:	68fa      	ldr	r2, [r7, #12]
 8004b8a:	4b0b      	ldr	r3, [pc, #44]	@ (8004bb8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004b8c:	4413      	add	r3, r2
 8004b8e:	009b      	lsls	r3, r3, #2
 8004b90:	461a      	mov	r2, r3
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	4a08      	ldr	r2, [pc, #32]	@ (8004bbc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004b9a:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	3b01      	subs	r3, #1
 8004ba0:	f003 031f 	and.w	r3, r3, #31
 8004ba4:	2201      	movs	r2, #1
 8004ba6:	409a      	lsls	r2, r3
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8004bac:	bf00      	nop
 8004bae:	3714      	adds	r7, #20
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb6:	4770      	bx	lr
 8004bb8:	1000823f 	.word	0x1000823f
 8004bbc:	40020940 	.word	0x40020940

08004bc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004bc0:	b480      	push	{r7}
 8004bc2:	b087      	sub	sp, #28
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
 8004bc8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004bca:	2300      	movs	r3, #0
 8004bcc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004bce:	e15a      	b.n	8004e86 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	681a      	ldr	r2, [r3, #0]
 8004bd4:	2101      	movs	r1, #1
 8004bd6:	697b      	ldr	r3, [r7, #20]
 8004bd8:	fa01 f303 	lsl.w	r3, r1, r3
 8004bdc:	4013      	ands	r3, r2
 8004bde:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	f000 814c 	beq.w	8004e80 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	685b      	ldr	r3, [r3, #4]
 8004bec:	f003 0303 	and.w	r3, r3, #3
 8004bf0:	2b01      	cmp	r3, #1
 8004bf2:	d005      	beq.n	8004c00 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	685b      	ldr	r3, [r3, #4]
 8004bf8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004bfc:	2b02      	cmp	r3, #2
 8004bfe:	d130      	bne.n	8004c62 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	689b      	ldr	r3, [r3, #8]
 8004c04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004c06:	697b      	ldr	r3, [r7, #20]
 8004c08:	005b      	lsls	r3, r3, #1
 8004c0a:	2203      	movs	r2, #3
 8004c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c10:	43db      	mvns	r3, r3
 8004c12:	693a      	ldr	r2, [r7, #16]
 8004c14:	4013      	ands	r3, r2
 8004c16:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	68da      	ldr	r2, [r3, #12]
 8004c1c:	697b      	ldr	r3, [r7, #20]
 8004c1e:	005b      	lsls	r3, r3, #1
 8004c20:	fa02 f303 	lsl.w	r3, r2, r3
 8004c24:	693a      	ldr	r2, [r7, #16]
 8004c26:	4313      	orrs	r3, r2
 8004c28:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	693a      	ldr	r2, [r7, #16]
 8004c2e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	685b      	ldr	r3, [r3, #4]
 8004c34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004c36:	2201      	movs	r2, #1
 8004c38:	697b      	ldr	r3, [r7, #20]
 8004c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c3e:	43db      	mvns	r3, r3
 8004c40:	693a      	ldr	r2, [r7, #16]
 8004c42:	4013      	ands	r3, r2
 8004c44:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	685b      	ldr	r3, [r3, #4]
 8004c4a:	091b      	lsrs	r3, r3, #4
 8004c4c:	f003 0201 	and.w	r2, r3, #1
 8004c50:	697b      	ldr	r3, [r7, #20]
 8004c52:	fa02 f303 	lsl.w	r3, r2, r3
 8004c56:	693a      	ldr	r2, [r7, #16]
 8004c58:	4313      	orrs	r3, r2
 8004c5a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	693a      	ldr	r2, [r7, #16]
 8004c60:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	f003 0303 	and.w	r3, r3, #3
 8004c6a:	2b03      	cmp	r3, #3
 8004c6c:	d017      	beq.n	8004c9e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	68db      	ldr	r3, [r3, #12]
 8004c72:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004c74:	697b      	ldr	r3, [r7, #20]
 8004c76:	005b      	lsls	r3, r3, #1
 8004c78:	2203      	movs	r2, #3
 8004c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c7e:	43db      	mvns	r3, r3
 8004c80:	693a      	ldr	r2, [r7, #16]
 8004c82:	4013      	ands	r3, r2
 8004c84:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	689a      	ldr	r2, [r3, #8]
 8004c8a:	697b      	ldr	r3, [r7, #20]
 8004c8c:	005b      	lsls	r3, r3, #1
 8004c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c92:	693a      	ldr	r2, [r7, #16]
 8004c94:	4313      	orrs	r3, r2
 8004c96:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	693a      	ldr	r2, [r7, #16]
 8004c9c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	685b      	ldr	r3, [r3, #4]
 8004ca2:	f003 0303 	and.w	r3, r3, #3
 8004ca6:	2b02      	cmp	r3, #2
 8004ca8:	d123      	bne.n	8004cf2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004caa:	697b      	ldr	r3, [r7, #20]
 8004cac:	08da      	lsrs	r2, r3, #3
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	3208      	adds	r2, #8
 8004cb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004cb6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004cb8:	697b      	ldr	r3, [r7, #20]
 8004cba:	f003 0307 	and.w	r3, r3, #7
 8004cbe:	009b      	lsls	r3, r3, #2
 8004cc0:	220f      	movs	r2, #15
 8004cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8004cc6:	43db      	mvns	r3, r3
 8004cc8:	693a      	ldr	r2, [r7, #16]
 8004cca:	4013      	ands	r3, r2
 8004ccc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	691a      	ldr	r2, [r3, #16]
 8004cd2:	697b      	ldr	r3, [r7, #20]
 8004cd4:	f003 0307 	and.w	r3, r3, #7
 8004cd8:	009b      	lsls	r3, r3, #2
 8004cda:	fa02 f303 	lsl.w	r3, r2, r3
 8004cde:	693a      	ldr	r2, [r7, #16]
 8004ce0:	4313      	orrs	r3, r2
 8004ce2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004ce4:	697b      	ldr	r3, [r7, #20]
 8004ce6:	08da      	lsrs	r2, r3, #3
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	3208      	adds	r2, #8
 8004cec:	6939      	ldr	r1, [r7, #16]
 8004cee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004cf8:	697b      	ldr	r3, [r7, #20]
 8004cfa:	005b      	lsls	r3, r3, #1
 8004cfc:	2203      	movs	r2, #3
 8004cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8004d02:	43db      	mvns	r3, r3
 8004d04:	693a      	ldr	r2, [r7, #16]
 8004d06:	4013      	ands	r3, r2
 8004d08:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	f003 0203 	and.w	r2, r3, #3
 8004d12:	697b      	ldr	r3, [r7, #20]
 8004d14:	005b      	lsls	r3, r3, #1
 8004d16:	fa02 f303 	lsl.w	r3, r2, r3
 8004d1a:	693a      	ldr	r2, [r7, #16]
 8004d1c:	4313      	orrs	r3, r2
 8004d1e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	693a      	ldr	r2, [r7, #16]
 8004d24:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	685b      	ldr	r3, [r3, #4]
 8004d2a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	f000 80a6 	beq.w	8004e80 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004d34:	4b5b      	ldr	r3, [pc, #364]	@ (8004ea4 <HAL_GPIO_Init+0x2e4>)
 8004d36:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d38:	4a5a      	ldr	r2, [pc, #360]	@ (8004ea4 <HAL_GPIO_Init+0x2e4>)
 8004d3a:	f043 0301 	orr.w	r3, r3, #1
 8004d3e:	6613      	str	r3, [r2, #96]	@ 0x60
 8004d40:	4b58      	ldr	r3, [pc, #352]	@ (8004ea4 <HAL_GPIO_Init+0x2e4>)
 8004d42:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d44:	f003 0301 	and.w	r3, r3, #1
 8004d48:	60bb      	str	r3, [r7, #8]
 8004d4a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004d4c:	4a56      	ldr	r2, [pc, #344]	@ (8004ea8 <HAL_GPIO_Init+0x2e8>)
 8004d4e:	697b      	ldr	r3, [r7, #20]
 8004d50:	089b      	lsrs	r3, r3, #2
 8004d52:	3302      	adds	r3, #2
 8004d54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d58:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004d5a:	697b      	ldr	r3, [r7, #20]
 8004d5c:	f003 0303 	and.w	r3, r3, #3
 8004d60:	009b      	lsls	r3, r3, #2
 8004d62:	220f      	movs	r2, #15
 8004d64:	fa02 f303 	lsl.w	r3, r2, r3
 8004d68:	43db      	mvns	r3, r3
 8004d6a:	693a      	ldr	r2, [r7, #16]
 8004d6c:	4013      	ands	r3, r2
 8004d6e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004d76:	d01f      	beq.n	8004db8 <HAL_GPIO_Init+0x1f8>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	4a4c      	ldr	r2, [pc, #304]	@ (8004eac <HAL_GPIO_Init+0x2ec>)
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d019      	beq.n	8004db4 <HAL_GPIO_Init+0x1f4>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	4a4b      	ldr	r2, [pc, #300]	@ (8004eb0 <HAL_GPIO_Init+0x2f0>)
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d013      	beq.n	8004db0 <HAL_GPIO_Init+0x1f0>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	4a4a      	ldr	r2, [pc, #296]	@ (8004eb4 <HAL_GPIO_Init+0x2f4>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d00d      	beq.n	8004dac <HAL_GPIO_Init+0x1ec>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	4a49      	ldr	r2, [pc, #292]	@ (8004eb8 <HAL_GPIO_Init+0x2f8>)
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d007      	beq.n	8004da8 <HAL_GPIO_Init+0x1e8>
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	4a48      	ldr	r2, [pc, #288]	@ (8004ebc <HAL_GPIO_Init+0x2fc>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d101      	bne.n	8004da4 <HAL_GPIO_Init+0x1e4>
 8004da0:	2305      	movs	r3, #5
 8004da2:	e00a      	b.n	8004dba <HAL_GPIO_Init+0x1fa>
 8004da4:	2306      	movs	r3, #6
 8004da6:	e008      	b.n	8004dba <HAL_GPIO_Init+0x1fa>
 8004da8:	2304      	movs	r3, #4
 8004daa:	e006      	b.n	8004dba <HAL_GPIO_Init+0x1fa>
 8004dac:	2303      	movs	r3, #3
 8004dae:	e004      	b.n	8004dba <HAL_GPIO_Init+0x1fa>
 8004db0:	2302      	movs	r3, #2
 8004db2:	e002      	b.n	8004dba <HAL_GPIO_Init+0x1fa>
 8004db4:	2301      	movs	r3, #1
 8004db6:	e000      	b.n	8004dba <HAL_GPIO_Init+0x1fa>
 8004db8:	2300      	movs	r3, #0
 8004dba:	697a      	ldr	r2, [r7, #20]
 8004dbc:	f002 0203 	and.w	r2, r2, #3
 8004dc0:	0092      	lsls	r2, r2, #2
 8004dc2:	4093      	lsls	r3, r2
 8004dc4:	693a      	ldr	r2, [r7, #16]
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004dca:	4937      	ldr	r1, [pc, #220]	@ (8004ea8 <HAL_GPIO_Init+0x2e8>)
 8004dcc:	697b      	ldr	r3, [r7, #20]
 8004dce:	089b      	lsrs	r3, r3, #2
 8004dd0:	3302      	adds	r3, #2
 8004dd2:	693a      	ldr	r2, [r7, #16]
 8004dd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004dd8:	4b39      	ldr	r3, [pc, #228]	@ (8004ec0 <HAL_GPIO_Init+0x300>)
 8004dda:	689b      	ldr	r3, [r3, #8]
 8004ddc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	43db      	mvns	r3, r3
 8004de2:	693a      	ldr	r2, [r7, #16]
 8004de4:	4013      	ands	r3, r2
 8004de6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	685b      	ldr	r3, [r3, #4]
 8004dec:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d003      	beq.n	8004dfc <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004df4:	693a      	ldr	r2, [r7, #16]
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	4313      	orrs	r3, r2
 8004dfa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004dfc:	4a30      	ldr	r2, [pc, #192]	@ (8004ec0 <HAL_GPIO_Init+0x300>)
 8004dfe:	693b      	ldr	r3, [r7, #16]
 8004e00:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004e02:	4b2f      	ldr	r3, [pc, #188]	@ (8004ec0 <HAL_GPIO_Init+0x300>)
 8004e04:	68db      	ldr	r3, [r3, #12]
 8004e06:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	43db      	mvns	r3, r3
 8004e0c:	693a      	ldr	r2, [r7, #16]
 8004e0e:	4013      	ands	r3, r2
 8004e10:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	685b      	ldr	r3, [r3, #4]
 8004e16:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d003      	beq.n	8004e26 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004e1e:	693a      	ldr	r2, [r7, #16]
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	4313      	orrs	r3, r2
 8004e24:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004e26:	4a26      	ldr	r2, [pc, #152]	@ (8004ec0 <HAL_GPIO_Init+0x300>)
 8004e28:	693b      	ldr	r3, [r7, #16]
 8004e2a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004e2c:	4b24      	ldr	r3, [pc, #144]	@ (8004ec0 <HAL_GPIO_Init+0x300>)
 8004e2e:	685b      	ldr	r3, [r3, #4]
 8004e30:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	43db      	mvns	r3, r3
 8004e36:	693a      	ldr	r2, [r7, #16]
 8004e38:	4013      	ands	r3, r2
 8004e3a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d003      	beq.n	8004e50 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004e48:	693a      	ldr	r2, [r7, #16]
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	4313      	orrs	r3, r2
 8004e4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004e50:	4a1b      	ldr	r2, [pc, #108]	@ (8004ec0 <HAL_GPIO_Init+0x300>)
 8004e52:	693b      	ldr	r3, [r7, #16]
 8004e54:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004e56:	4b1a      	ldr	r3, [pc, #104]	@ (8004ec0 <HAL_GPIO_Init+0x300>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	43db      	mvns	r3, r3
 8004e60:	693a      	ldr	r2, [r7, #16]
 8004e62:	4013      	ands	r3, r2
 8004e64:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	685b      	ldr	r3, [r3, #4]
 8004e6a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d003      	beq.n	8004e7a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004e72:	693a      	ldr	r2, [r7, #16]
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	4313      	orrs	r3, r2
 8004e78:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004e7a:	4a11      	ldr	r2, [pc, #68]	@ (8004ec0 <HAL_GPIO_Init+0x300>)
 8004e7c:	693b      	ldr	r3, [r7, #16]
 8004e7e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004e80:	697b      	ldr	r3, [r7, #20]
 8004e82:	3301      	adds	r3, #1
 8004e84:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	681a      	ldr	r2, [r3, #0]
 8004e8a:	697b      	ldr	r3, [r7, #20]
 8004e8c:	fa22 f303 	lsr.w	r3, r2, r3
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	f47f ae9d 	bne.w	8004bd0 <HAL_GPIO_Init+0x10>
  }
}
 8004e96:	bf00      	nop
 8004e98:	bf00      	nop
 8004e9a:	371c      	adds	r7, #28
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea2:	4770      	bx	lr
 8004ea4:	40021000 	.word	0x40021000
 8004ea8:	40010000 	.word	0x40010000
 8004eac:	48000400 	.word	0x48000400
 8004eb0:	48000800 	.word	0x48000800
 8004eb4:	48000c00 	.word	0x48000c00
 8004eb8:	48001000 	.word	0x48001000
 8004ebc:	48001400 	.word	0x48001400
 8004ec0:	40010400 	.word	0x40010400

08004ec4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	b083      	sub	sp, #12
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
 8004ecc:	460b      	mov	r3, r1
 8004ece:	807b      	strh	r3, [r7, #2]
 8004ed0:	4613      	mov	r3, r2
 8004ed2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004ed4:	787b      	ldrb	r3, [r7, #1]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d003      	beq.n	8004ee2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004eda:	887a      	ldrh	r2, [r7, #2]
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004ee0:	e002      	b.n	8004ee8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004ee2:	887a      	ldrh	r2, [r7, #2]
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004ee8:	bf00      	nop
 8004eea:	370c      	adds	r7, #12
 8004eec:	46bd      	mov	sp, r7
 8004eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef2:	4770      	bx	lr

08004ef4 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004ef4:	b480      	push	{r7}
 8004ef6:	b085      	sub	sp, #20
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
 8004efc:	460b      	mov	r3, r1
 8004efe:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	695b      	ldr	r3, [r3, #20]
 8004f04:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004f06:	887a      	ldrh	r2, [r7, #2]
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	4013      	ands	r3, r2
 8004f0c:	041a      	lsls	r2, r3, #16
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	43d9      	mvns	r1, r3
 8004f12:	887b      	ldrh	r3, [r7, #2]
 8004f14:	400b      	ands	r3, r1
 8004f16:	431a      	orrs	r2, r3
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	619a      	str	r2, [r3, #24]
}
 8004f1c:	bf00      	nop
 8004f1e:	3714      	adds	r7, #20
 8004f20:	46bd      	mov	sp, r7
 8004f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f26:	4770      	bx	lr

08004f28 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b082      	sub	sp, #8
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	4603      	mov	r3, r0
 8004f30:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004f32:	4b08      	ldr	r3, [pc, #32]	@ (8004f54 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004f34:	695a      	ldr	r2, [r3, #20]
 8004f36:	88fb      	ldrh	r3, [r7, #6]
 8004f38:	4013      	ands	r3, r2
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d006      	beq.n	8004f4c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004f3e:	4a05      	ldr	r2, [pc, #20]	@ (8004f54 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004f40:	88fb      	ldrh	r3, [r7, #6]
 8004f42:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004f44:	88fb      	ldrh	r3, [r7, #6]
 8004f46:	4618      	mov	r0, r3
 8004f48:	f000 f806 	bl	8004f58 <HAL_GPIO_EXTI_Callback>
  }
}
 8004f4c:	bf00      	nop
 8004f4e:	3708      	adds	r7, #8
 8004f50:	46bd      	mov	sp, r7
 8004f52:	bd80      	pop	{r7, pc}
 8004f54:	40010400 	.word	0x40010400

08004f58 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004f58:	b480      	push	{r7}
 8004f5a:	b083      	sub	sp, #12
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	4603      	mov	r3, r0
 8004f60:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004f62:	bf00      	nop
 8004f64:	370c      	adds	r7, #12
 8004f66:	46bd      	mov	sp, r7
 8004f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6c:	4770      	bx	lr

08004f6e <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8004f6e:	b580      	push	{r7, lr}
 8004f70:	b084      	sub	sp, #16
 8004f72:	af00      	add	r7, sp, #0
 8004f74:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d101      	bne.n	8004f80 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8004f7c:	2301      	movs	r3, #1
 8004f7e:	e041      	b.n	8005004 <HAL_IWDG_Init+0x96>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f64c 42cc 	movw	r2, #52428	@ 0xcccc
 8004f88:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f245 5255 	movw	r2, #21845	@ 0x5555
 8004f92:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	687a      	ldr	r2, [r7, #4]
 8004f9a:	6852      	ldr	r2, [r2, #4]
 8004f9c:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	687a      	ldr	r2, [r7, #4]
 8004fa4:	6892      	ldr	r2, [r2, #8]
 8004fa6:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8004fa8:	f7ff f9e0 	bl	800436c <HAL_GetTick>
 8004fac:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8004fae:	e00f      	b.n	8004fd0 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8004fb0:	f7ff f9dc 	bl	800436c <HAL_GetTick>
 8004fb4:	4602      	mov	r2, r0
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	1ad3      	subs	r3, r2, r3
 8004fba:	2b31      	cmp	r3, #49	@ 0x31
 8004fbc:	d908      	bls.n	8004fd0 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	68db      	ldr	r3, [r3, #12]
 8004fc4:	f003 0307 	and.w	r3, r3, #7
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d001      	beq.n	8004fd0 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8004fcc:	2303      	movs	r3, #3
 8004fce:	e019      	b.n	8005004 <HAL_IWDG_Init+0x96>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	68db      	ldr	r3, [r3, #12]
 8004fd6:	f003 0307 	and.w	r3, r3, #7
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d1e8      	bne.n	8004fb0 <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	691a      	ldr	r2, [r3, #16]
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	68db      	ldr	r3, [r3, #12]
 8004fe8:	429a      	cmp	r2, r3
 8004fea:	d005      	beq.n	8004ff8 <HAL_IWDG_Init+0x8a>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	687a      	ldr	r2, [r7, #4]
 8004ff2:	68d2      	ldr	r2, [r2, #12]
 8004ff4:	611a      	str	r2, [r3, #16]
 8004ff6:	e004      	b.n	8005002 <HAL_IWDG_Init+0x94>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 8005000:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005002:	2300      	movs	r3, #0
}
 8005004:	4618      	mov	r0, r3
 8005006:	3710      	adds	r7, #16
 8005008:	46bd      	mov	sp, r7
 800500a:	bd80      	pop	{r7, pc}

0800500c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800500c:	b480      	push	{r7}
 800500e:	b085      	sub	sp, #20
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d141      	bne.n	800509e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800501a:	4b4b      	ldr	r3, [pc, #300]	@ (8005148 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005022:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005026:	d131      	bne.n	800508c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005028:	4b47      	ldr	r3, [pc, #284]	@ (8005148 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800502a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800502e:	4a46      	ldr	r2, [pc, #280]	@ (8005148 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005030:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005034:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005038:	4b43      	ldr	r3, [pc, #268]	@ (8005148 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005040:	4a41      	ldr	r2, [pc, #260]	@ (8005148 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005042:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005046:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005048:	4b40      	ldr	r3, [pc, #256]	@ (800514c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	2232      	movs	r2, #50	@ 0x32
 800504e:	fb02 f303 	mul.w	r3, r2, r3
 8005052:	4a3f      	ldr	r2, [pc, #252]	@ (8005150 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005054:	fba2 2303 	umull	r2, r3, r2, r3
 8005058:	0c9b      	lsrs	r3, r3, #18
 800505a:	3301      	adds	r3, #1
 800505c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800505e:	e002      	b.n	8005066 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	3b01      	subs	r3, #1
 8005064:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005066:	4b38      	ldr	r3, [pc, #224]	@ (8005148 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005068:	695b      	ldr	r3, [r3, #20]
 800506a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800506e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005072:	d102      	bne.n	800507a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d1f2      	bne.n	8005060 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800507a:	4b33      	ldr	r3, [pc, #204]	@ (8005148 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800507c:	695b      	ldr	r3, [r3, #20]
 800507e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005082:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005086:	d158      	bne.n	800513a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005088:	2303      	movs	r3, #3
 800508a:	e057      	b.n	800513c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800508c:	4b2e      	ldr	r3, [pc, #184]	@ (8005148 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800508e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005092:	4a2d      	ldr	r2, [pc, #180]	@ (8005148 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005094:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005098:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800509c:	e04d      	b.n	800513a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80050a4:	d141      	bne.n	800512a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80050a6:	4b28      	ldr	r3, [pc, #160]	@ (8005148 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80050ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80050b2:	d131      	bne.n	8005118 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80050b4:	4b24      	ldr	r3, [pc, #144]	@ (8005148 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80050ba:	4a23      	ldr	r2, [pc, #140]	@ (8005148 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80050c0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80050c4:	4b20      	ldr	r3, [pc, #128]	@ (8005148 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80050cc:	4a1e      	ldr	r2, [pc, #120]	@ (8005148 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050ce:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80050d2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80050d4:	4b1d      	ldr	r3, [pc, #116]	@ (800514c <HAL_PWREx_ControlVoltageScaling+0x140>)
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	2232      	movs	r2, #50	@ 0x32
 80050da:	fb02 f303 	mul.w	r3, r2, r3
 80050de:	4a1c      	ldr	r2, [pc, #112]	@ (8005150 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80050e0:	fba2 2303 	umull	r2, r3, r2, r3
 80050e4:	0c9b      	lsrs	r3, r3, #18
 80050e6:	3301      	adds	r3, #1
 80050e8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80050ea:	e002      	b.n	80050f2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	3b01      	subs	r3, #1
 80050f0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80050f2:	4b15      	ldr	r3, [pc, #84]	@ (8005148 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050f4:	695b      	ldr	r3, [r3, #20]
 80050f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80050fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80050fe:	d102      	bne.n	8005106 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d1f2      	bne.n	80050ec <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005106:	4b10      	ldr	r3, [pc, #64]	@ (8005148 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005108:	695b      	ldr	r3, [r3, #20]
 800510a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800510e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005112:	d112      	bne.n	800513a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005114:	2303      	movs	r3, #3
 8005116:	e011      	b.n	800513c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005118:	4b0b      	ldr	r3, [pc, #44]	@ (8005148 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800511a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800511e:	4a0a      	ldr	r2, [pc, #40]	@ (8005148 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005120:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005124:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005128:	e007      	b.n	800513a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800512a:	4b07      	ldr	r3, [pc, #28]	@ (8005148 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005132:	4a05      	ldr	r2, [pc, #20]	@ (8005148 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005134:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005138:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800513a:	2300      	movs	r3, #0
}
 800513c:	4618      	mov	r0, r3
 800513e:	3714      	adds	r7, #20
 8005140:	46bd      	mov	sp, r7
 8005142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005146:	4770      	bx	lr
 8005148:	40007000 	.word	0x40007000
 800514c:	20000004 	.word	0x20000004
 8005150:	431bde83 	.word	0x431bde83

08005154 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8005154:	b480      	push	{r7}
 8005156:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8005158:	4b05      	ldr	r3, [pc, #20]	@ (8005170 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800515a:	689b      	ldr	r3, [r3, #8]
 800515c:	4a04      	ldr	r2, [pc, #16]	@ (8005170 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800515e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005162:	6093      	str	r3, [r2, #8]
}
 8005164:	bf00      	nop
 8005166:	46bd      	mov	sp, r7
 8005168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516c:	4770      	bx	lr
 800516e:	bf00      	nop
 8005170:	40007000 	.word	0x40007000

08005174 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005174:	b580      	push	{r7, lr}
 8005176:	b088      	sub	sp, #32
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d101      	bne.n	8005186 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005182:	2301      	movs	r3, #1
 8005184:	e2fe      	b.n	8005784 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f003 0301 	and.w	r3, r3, #1
 800518e:	2b00      	cmp	r3, #0
 8005190:	d075      	beq.n	800527e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005192:	4b97      	ldr	r3, [pc, #604]	@ (80053f0 <HAL_RCC_OscConfig+0x27c>)
 8005194:	689b      	ldr	r3, [r3, #8]
 8005196:	f003 030c 	and.w	r3, r3, #12
 800519a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800519c:	4b94      	ldr	r3, [pc, #592]	@ (80053f0 <HAL_RCC_OscConfig+0x27c>)
 800519e:	68db      	ldr	r3, [r3, #12]
 80051a0:	f003 0303 	and.w	r3, r3, #3
 80051a4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80051a6:	69bb      	ldr	r3, [r7, #24]
 80051a8:	2b0c      	cmp	r3, #12
 80051aa:	d102      	bne.n	80051b2 <HAL_RCC_OscConfig+0x3e>
 80051ac:	697b      	ldr	r3, [r7, #20]
 80051ae:	2b03      	cmp	r3, #3
 80051b0:	d002      	beq.n	80051b8 <HAL_RCC_OscConfig+0x44>
 80051b2:	69bb      	ldr	r3, [r7, #24]
 80051b4:	2b08      	cmp	r3, #8
 80051b6:	d10b      	bne.n	80051d0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80051b8:	4b8d      	ldr	r3, [pc, #564]	@ (80053f0 <HAL_RCC_OscConfig+0x27c>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d05b      	beq.n	800527c <HAL_RCC_OscConfig+0x108>
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	685b      	ldr	r3, [r3, #4]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d157      	bne.n	800527c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80051cc:	2301      	movs	r3, #1
 80051ce:	e2d9      	b.n	8005784 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	685b      	ldr	r3, [r3, #4]
 80051d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80051d8:	d106      	bne.n	80051e8 <HAL_RCC_OscConfig+0x74>
 80051da:	4b85      	ldr	r3, [pc, #532]	@ (80053f0 <HAL_RCC_OscConfig+0x27c>)
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	4a84      	ldr	r2, [pc, #528]	@ (80053f0 <HAL_RCC_OscConfig+0x27c>)
 80051e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80051e4:	6013      	str	r3, [r2, #0]
 80051e6:	e01d      	b.n	8005224 <HAL_RCC_OscConfig+0xb0>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	685b      	ldr	r3, [r3, #4]
 80051ec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80051f0:	d10c      	bne.n	800520c <HAL_RCC_OscConfig+0x98>
 80051f2:	4b7f      	ldr	r3, [pc, #508]	@ (80053f0 <HAL_RCC_OscConfig+0x27c>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	4a7e      	ldr	r2, [pc, #504]	@ (80053f0 <HAL_RCC_OscConfig+0x27c>)
 80051f8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80051fc:	6013      	str	r3, [r2, #0]
 80051fe:	4b7c      	ldr	r3, [pc, #496]	@ (80053f0 <HAL_RCC_OscConfig+0x27c>)
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	4a7b      	ldr	r2, [pc, #492]	@ (80053f0 <HAL_RCC_OscConfig+0x27c>)
 8005204:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005208:	6013      	str	r3, [r2, #0]
 800520a:	e00b      	b.n	8005224 <HAL_RCC_OscConfig+0xb0>
 800520c:	4b78      	ldr	r3, [pc, #480]	@ (80053f0 <HAL_RCC_OscConfig+0x27c>)
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4a77      	ldr	r2, [pc, #476]	@ (80053f0 <HAL_RCC_OscConfig+0x27c>)
 8005212:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005216:	6013      	str	r3, [r2, #0]
 8005218:	4b75      	ldr	r3, [pc, #468]	@ (80053f0 <HAL_RCC_OscConfig+0x27c>)
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4a74      	ldr	r2, [pc, #464]	@ (80053f0 <HAL_RCC_OscConfig+0x27c>)
 800521e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005222:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	685b      	ldr	r3, [r3, #4]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d013      	beq.n	8005254 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800522c:	f7ff f89e 	bl	800436c <HAL_GetTick>
 8005230:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005232:	e008      	b.n	8005246 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005234:	f7ff f89a 	bl	800436c <HAL_GetTick>
 8005238:	4602      	mov	r2, r0
 800523a:	693b      	ldr	r3, [r7, #16]
 800523c:	1ad3      	subs	r3, r2, r3
 800523e:	2b64      	cmp	r3, #100	@ 0x64
 8005240:	d901      	bls.n	8005246 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005242:	2303      	movs	r3, #3
 8005244:	e29e      	b.n	8005784 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005246:	4b6a      	ldr	r3, [pc, #424]	@ (80053f0 <HAL_RCC_OscConfig+0x27c>)
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800524e:	2b00      	cmp	r3, #0
 8005250:	d0f0      	beq.n	8005234 <HAL_RCC_OscConfig+0xc0>
 8005252:	e014      	b.n	800527e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005254:	f7ff f88a 	bl	800436c <HAL_GetTick>
 8005258:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800525a:	e008      	b.n	800526e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800525c:	f7ff f886 	bl	800436c <HAL_GetTick>
 8005260:	4602      	mov	r2, r0
 8005262:	693b      	ldr	r3, [r7, #16]
 8005264:	1ad3      	subs	r3, r2, r3
 8005266:	2b64      	cmp	r3, #100	@ 0x64
 8005268:	d901      	bls.n	800526e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800526a:	2303      	movs	r3, #3
 800526c:	e28a      	b.n	8005784 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800526e:	4b60      	ldr	r3, [pc, #384]	@ (80053f0 <HAL_RCC_OscConfig+0x27c>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005276:	2b00      	cmp	r3, #0
 8005278:	d1f0      	bne.n	800525c <HAL_RCC_OscConfig+0xe8>
 800527a:	e000      	b.n	800527e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800527c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f003 0302 	and.w	r3, r3, #2
 8005286:	2b00      	cmp	r3, #0
 8005288:	d075      	beq.n	8005376 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800528a:	4b59      	ldr	r3, [pc, #356]	@ (80053f0 <HAL_RCC_OscConfig+0x27c>)
 800528c:	689b      	ldr	r3, [r3, #8]
 800528e:	f003 030c 	and.w	r3, r3, #12
 8005292:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005294:	4b56      	ldr	r3, [pc, #344]	@ (80053f0 <HAL_RCC_OscConfig+0x27c>)
 8005296:	68db      	ldr	r3, [r3, #12]
 8005298:	f003 0303 	and.w	r3, r3, #3
 800529c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800529e:	69bb      	ldr	r3, [r7, #24]
 80052a0:	2b0c      	cmp	r3, #12
 80052a2:	d102      	bne.n	80052aa <HAL_RCC_OscConfig+0x136>
 80052a4:	697b      	ldr	r3, [r7, #20]
 80052a6:	2b02      	cmp	r3, #2
 80052a8:	d002      	beq.n	80052b0 <HAL_RCC_OscConfig+0x13c>
 80052aa:	69bb      	ldr	r3, [r7, #24]
 80052ac:	2b04      	cmp	r3, #4
 80052ae:	d11f      	bne.n	80052f0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80052b0:	4b4f      	ldr	r3, [pc, #316]	@ (80053f0 <HAL_RCC_OscConfig+0x27c>)
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d005      	beq.n	80052c8 <HAL_RCC_OscConfig+0x154>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	68db      	ldr	r3, [r3, #12]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d101      	bne.n	80052c8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80052c4:	2301      	movs	r3, #1
 80052c6:	e25d      	b.n	8005784 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80052c8:	4b49      	ldr	r3, [pc, #292]	@ (80053f0 <HAL_RCC_OscConfig+0x27c>)
 80052ca:	685b      	ldr	r3, [r3, #4]
 80052cc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	691b      	ldr	r3, [r3, #16]
 80052d4:	061b      	lsls	r3, r3, #24
 80052d6:	4946      	ldr	r1, [pc, #280]	@ (80053f0 <HAL_RCC_OscConfig+0x27c>)
 80052d8:	4313      	orrs	r3, r2
 80052da:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80052dc:	4b45      	ldr	r3, [pc, #276]	@ (80053f4 <HAL_RCC_OscConfig+0x280>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	4618      	mov	r0, r3
 80052e2:	f7fe f849 	bl	8003378 <HAL_InitTick>
 80052e6:	4603      	mov	r3, r0
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d043      	beq.n	8005374 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80052ec:	2301      	movs	r3, #1
 80052ee:	e249      	b.n	8005784 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	68db      	ldr	r3, [r3, #12]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d023      	beq.n	8005340 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80052f8:	4b3d      	ldr	r3, [pc, #244]	@ (80053f0 <HAL_RCC_OscConfig+0x27c>)
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	4a3c      	ldr	r2, [pc, #240]	@ (80053f0 <HAL_RCC_OscConfig+0x27c>)
 80052fe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005302:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005304:	f7ff f832 	bl	800436c <HAL_GetTick>
 8005308:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800530a:	e008      	b.n	800531e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800530c:	f7ff f82e 	bl	800436c <HAL_GetTick>
 8005310:	4602      	mov	r2, r0
 8005312:	693b      	ldr	r3, [r7, #16]
 8005314:	1ad3      	subs	r3, r2, r3
 8005316:	2b02      	cmp	r3, #2
 8005318:	d901      	bls.n	800531e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800531a:	2303      	movs	r3, #3
 800531c:	e232      	b.n	8005784 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800531e:	4b34      	ldr	r3, [pc, #208]	@ (80053f0 <HAL_RCC_OscConfig+0x27c>)
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005326:	2b00      	cmp	r3, #0
 8005328:	d0f0      	beq.n	800530c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800532a:	4b31      	ldr	r3, [pc, #196]	@ (80053f0 <HAL_RCC_OscConfig+0x27c>)
 800532c:	685b      	ldr	r3, [r3, #4]
 800532e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	691b      	ldr	r3, [r3, #16]
 8005336:	061b      	lsls	r3, r3, #24
 8005338:	492d      	ldr	r1, [pc, #180]	@ (80053f0 <HAL_RCC_OscConfig+0x27c>)
 800533a:	4313      	orrs	r3, r2
 800533c:	604b      	str	r3, [r1, #4]
 800533e:	e01a      	b.n	8005376 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005340:	4b2b      	ldr	r3, [pc, #172]	@ (80053f0 <HAL_RCC_OscConfig+0x27c>)
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	4a2a      	ldr	r2, [pc, #168]	@ (80053f0 <HAL_RCC_OscConfig+0x27c>)
 8005346:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800534a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800534c:	f7ff f80e 	bl	800436c <HAL_GetTick>
 8005350:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005352:	e008      	b.n	8005366 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005354:	f7ff f80a 	bl	800436c <HAL_GetTick>
 8005358:	4602      	mov	r2, r0
 800535a:	693b      	ldr	r3, [r7, #16]
 800535c:	1ad3      	subs	r3, r2, r3
 800535e:	2b02      	cmp	r3, #2
 8005360:	d901      	bls.n	8005366 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8005362:	2303      	movs	r3, #3
 8005364:	e20e      	b.n	8005784 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005366:	4b22      	ldr	r3, [pc, #136]	@ (80053f0 <HAL_RCC_OscConfig+0x27c>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800536e:	2b00      	cmp	r3, #0
 8005370:	d1f0      	bne.n	8005354 <HAL_RCC_OscConfig+0x1e0>
 8005372:	e000      	b.n	8005376 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005374:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f003 0308 	and.w	r3, r3, #8
 800537e:	2b00      	cmp	r3, #0
 8005380:	d041      	beq.n	8005406 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	695b      	ldr	r3, [r3, #20]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d01c      	beq.n	80053c4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800538a:	4b19      	ldr	r3, [pc, #100]	@ (80053f0 <HAL_RCC_OscConfig+0x27c>)
 800538c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005390:	4a17      	ldr	r2, [pc, #92]	@ (80053f0 <HAL_RCC_OscConfig+0x27c>)
 8005392:	f043 0301 	orr.w	r3, r3, #1
 8005396:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800539a:	f7fe ffe7 	bl	800436c <HAL_GetTick>
 800539e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80053a0:	e008      	b.n	80053b4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80053a2:	f7fe ffe3 	bl	800436c <HAL_GetTick>
 80053a6:	4602      	mov	r2, r0
 80053a8:	693b      	ldr	r3, [r7, #16]
 80053aa:	1ad3      	subs	r3, r2, r3
 80053ac:	2b02      	cmp	r3, #2
 80053ae:	d901      	bls.n	80053b4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80053b0:	2303      	movs	r3, #3
 80053b2:	e1e7      	b.n	8005784 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80053b4:	4b0e      	ldr	r3, [pc, #56]	@ (80053f0 <HAL_RCC_OscConfig+0x27c>)
 80053b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80053ba:	f003 0302 	and.w	r3, r3, #2
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d0ef      	beq.n	80053a2 <HAL_RCC_OscConfig+0x22e>
 80053c2:	e020      	b.n	8005406 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80053c4:	4b0a      	ldr	r3, [pc, #40]	@ (80053f0 <HAL_RCC_OscConfig+0x27c>)
 80053c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80053ca:	4a09      	ldr	r2, [pc, #36]	@ (80053f0 <HAL_RCC_OscConfig+0x27c>)
 80053cc:	f023 0301 	bic.w	r3, r3, #1
 80053d0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053d4:	f7fe ffca 	bl	800436c <HAL_GetTick>
 80053d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80053da:	e00d      	b.n	80053f8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80053dc:	f7fe ffc6 	bl	800436c <HAL_GetTick>
 80053e0:	4602      	mov	r2, r0
 80053e2:	693b      	ldr	r3, [r7, #16]
 80053e4:	1ad3      	subs	r3, r2, r3
 80053e6:	2b02      	cmp	r3, #2
 80053e8:	d906      	bls.n	80053f8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80053ea:	2303      	movs	r3, #3
 80053ec:	e1ca      	b.n	8005784 <HAL_RCC_OscConfig+0x610>
 80053ee:	bf00      	nop
 80053f0:	40021000 	.word	0x40021000
 80053f4:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80053f8:	4b8c      	ldr	r3, [pc, #560]	@ (800562c <HAL_RCC_OscConfig+0x4b8>)
 80053fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80053fe:	f003 0302 	and.w	r3, r3, #2
 8005402:	2b00      	cmp	r3, #0
 8005404:	d1ea      	bne.n	80053dc <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f003 0304 	and.w	r3, r3, #4
 800540e:	2b00      	cmp	r3, #0
 8005410:	f000 80a6 	beq.w	8005560 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005414:	2300      	movs	r3, #0
 8005416:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005418:	4b84      	ldr	r3, [pc, #528]	@ (800562c <HAL_RCC_OscConfig+0x4b8>)
 800541a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800541c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005420:	2b00      	cmp	r3, #0
 8005422:	d101      	bne.n	8005428 <HAL_RCC_OscConfig+0x2b4>
 8005424:	2301      	movs	r3, #1
 8005426:	e000      	b.n	800542a <HAL_RCC_OscConfig+0x2b6>
 8005428:	2300      	movs	r3, #0
 800542a:	2b00      	cmp	r3, #0
 800542c:	d00d      	beq.n	800544a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800542e:	4b7f      	ldr	r3, [pc, #508]	@ (800562c <HAL_RCC_OscConfig+0x4b8>)
 8005430:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005432:	4a7e      	ldr	r2, [pc, #504]	@ (800562c <HAL_RCC_OscConfig+0x4b8>)
 8005434:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005438:	6593      	str	r3, [r2, #88]	@ 0x58
 800543a:	4b7c      	ldr	r3, [pc, #496]	@ (800562c <HAL_RCC_OscConfig+0x4b8>)
 800543c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800543e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005442:	60fb      	str	r3, [r7, #12]
 8005444:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005446:	2301      	movs	r3, #1
 8005448:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800544a:	4b79      	ldr	r3, [pc, #484]	@ (8005630 <HAL_RCC_OscConfig+0x4bc>)
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005452:	2b00      	cmp	r3, #0
 8005454:	d118      	bne.n	8005488 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005456:	4b76      	ldr	r3, [pc, #472]	@ (8005630 <HAL_RCC_OscConfig+0x4bc>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	4a75      	ldr	r2, [pc, #468]	@ (8005630 <HAL_RCC_OscConfig+0x4bc>)
 800545c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005460:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005462:	f7fe ff83 	bl	800436c <HAL_GetTick>
 8005466:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005468:	e008      	b.n	800547c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800546a:	f7fe ff7f 	bl	800436c <HAL_GetTick>
 800546e:	4602      	mov	r2, r0
 8005470:	693b      	ldr	r3, [r7, #16]
 8005472:	1ad3      	subs	r3, r2, r3
 8005474:	2b02      	cmp	r3, #2
 8005476:	d901      	bls.n	800547c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8005478:	2303      	movs	r3, #3
 800547a:	e183      	b.n	8005784 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800547c:	4b6c      	ldr	r3, [pc, #432]	@ (8005630 <HAL_RCC_OscConfig+0x4bc>)
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005484:	2b00      	cmp	r3, #0
 8005486:	d0f0      	beq.n	800546a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	689b      	ldr	r3, [r3, #8]
 800548c:	2b01      	cmp	r3, #1
 800548e:	d108      	bne.n	80054a2 <HAL_RCC_OscConfig+0x32e>
 8005490:	4b66      	ldr	r3, [pc, #408]	@ (800562c <HAL_RCC_OscConfig+0x4b8>)
 8005492:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005496:	4a65      	ldr	r2, [pc, #404]	@ (800562c <HAL_RCC_OscConfig+0x4b8>)
 8005498:	f043 0301 	orr.w	r3, r3, #1
 800549c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80054a0:	e024      	b.n	80054ec <HAL_RCC_OscConfig+0x378>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	689b      	ldr	r3, [r3, #8]
 80054a6:	2b05      	cmp	r3, #5
 80054a8:	d110      	bne.n	80054cc <HAL_RCC_OscConfig+0x358>
 80054aa:	4b60      	ldr	r3, [pc, #384]	@ (800562c <HAL_RCC_OscConfig+0x4b8>)
 80054ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054b0:	4a5e      	ldr	r2, [pc, #376]	@ (800562c <HAL_RCC_OscConfig+0x4b8>)
 80054b2:	f043 0304 	orr.w	r3, r3, #4
 80054b6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80054ba:	4b5c      	ldr	r3, [pc, #368]	@ (800562c <HAL_RCC_OscConfig+0x4b8>)
 80054bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054c0:	4a5a      	ldr	r2, [pc, #360]	@ (800562c <HAL_RCC_OscConfig+0x4b8>)
 80054c2:	f043 0301 	orr.w	r3, r3, #1
 80054c6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80054ca:	e00f      	b.n	80054ec <HAL_RCC_OscConfig+0x378>
 80054cc:	4b57      	ldr	r3, [pc, #348]	@ (800562c <HAL_RCC_OscConfig+0x4b8>)
 80054ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054d2:	4a56      	ldr	r2, [pc, #344]	@ (800562c <HAL_RCC_OscConfig+0x4b8>)
 80054d4:	f023 0301 	bic.w	r3, r3, #1
 80054d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80054dc:	4b53      	ldr	r3, [pc, #332]	@ (800562c <HAL_RCC_OscConfig+0x4b8>)
 80054de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054e2:	4a52      	ldr	r2, [pc, #328]	@ (800562c <HAL_RCC_OscConfig+0x4b8>)
 80054e4:	f023 0304 	bic.w	r3, r3, #4
 80054e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	689b      	ldr	r3, [r3, #8]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d016      	beq.n	8005522 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054f4:	f7fe ff3a 	bl	800436c <HAL_GetTick>
 80054f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80054fa:	e00a      	b.n	8005512 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80054fc:	f7fe ff36 	bl	800436c <HAL_GetTick>
 8005500:	4602      	mov	r2, r0
 8005502:	693b      	ldr	r3, [r7, #16]
 8005504:	1ad3      	subs	r3, r2, r3
 8005506:	f241 3288 	movw	r2, #5000	@ 0x1388
 800550a:	4293      	cmp	r3, r2
 800550c:	d901      	bls.n	8005512 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800550e:	2303      	movs	r3, #3
 8005510:	e138      	b.n	8005784 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005512:	4b46      	ldr	r3, [pc, #280]	@ (800562c <HAL_RCC_OscConfig+0x4b8>)
 8005514:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005518:	f003 0302 	and.w	r3, r3, #2
 800551c:	2b00      	cmp	r3, #0
 800551e:	d0ed      	beq.n	80054fc <HAL_RCC_OscConfig+0x388>
 8005520:	e015      	b.n	800554e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005522:	f7fe ff23 	bl	800436c <HAL_GetTick>
 8005526:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005528:	e00a      	b.n	8005540 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800552a:	f7fe ff1f 	bl	800436c <HAL_GetTick>
 800552e:	4602      	mov	r2, r0
 8005530:	693b      	ldr	r3, [r7, #16]
 8005532:	1ad3      	subs	r3, r2, r3
 8005534:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005538:	4293      	cmp	r3, r2
 800553a:	d901      	bls.n	8005540 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800553c:	2303      	movs	r3, #3
 800553e:	e121      	b.n	8005784 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005540:	4b3a      	ldr	r3, [pc, #232]	@ (800562c <HAL_RCC_OscConfig+0x4b8>)
 8005542:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005546:	f003 0302 	and.w	r3, r3, #2
 800554a:	2b00      	cmp	r3, #0
 800554c:	d1ed      	bne.n	800552a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800554e:	7ffb      	ldrb	r3, [r7, #31]
 8005550:	2b01      	cmp	r3, #1
 8005552:	d105      	bne.n	8005560 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005554:	4b35      	ldr	r3, [pc, #212]	@ (800562c <HAL_RCC_OscConfig+0x4b8>)
 8005556:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005558:	4a34      	ldr	r2, [pc, #208]	@ (800562c <HAL_RCC_OscConfig+0x4b8>)
 800555a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800555e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f003 0320 	and.w	r3, r3, #32
 8005568:	2b00      	cmp	r3, #0
 800556a:	d03c      	beq.n	80055e6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	699b      	ldr	r3, [r3, #24]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d01c      	beq.n	80055ae <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005574:	4b2d      	ldr	r3, [pc, #180]	@ (800562c <HAL_RCC_OscConfig+0x4b8>)
 8005576:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800557a:	4a2c      	ldr	r2, [pc, #176]	@ (800562c <HAL_RCC_OscConfig+0x4b8>)
 800557c:	f043 0301 	orr.w	r3, r3, #1
 8005580:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005584:	f7fe fef2 	bl	800436c <HAL_GetTick>
 8005588:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800558a:	e008      	b.n	800559e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800558c:	f7fe feee 	bl	800436c <HAL_GetTick>
 8005590:	4602      	mov	r2, r0
 8005592:	693b      	ldr	r3, [r7, #16]
 8005594:	1ad3      	subs	r3, r2, r3
 8005596:	2b02      	cmp	r3, #2
 8005598:	d901      	bls.n	800559e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800559a:	2303      	movs	r3, #3
 800559c:	e0f2      	b.n	8005784 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800559e:	4b23      	ldr	r3, [pc, #140]	@ (800562c <HAL_RCC_OscConfig+0x4b8>)
 80055a0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80055a4:	f003 0302 	and.w	r3, r3, #2
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d0ef      	beq.n	800558c <HAL_RCC_OscConfig+0x418>
 80055ac:	e01b      	b.n	80055e6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80055ae:	4b1f      	ldr	r3, [pc, #124]	@ (800562c <HAL_RCC_OscConfig+0x4b8>)
 80055b0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80055b4:	4a1d      	ldr	r2, [pc, #116]	@ (800562c <HAL_RCC_OscConfig+0x4b8>)
 80055b6:	f023 0301 	bic.w	r3, r3, #1
 80055ba:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055be:	f7fe fed5 	bl	800436c <HAL_GetTick>
 80055c2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80055c4:	e008      	b.n	80055d8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80055c6:	f7fe fed1 	bl	800436c <HAL_GetTick>
 80055ca:	4602      	mov	r2, r0
 80055cc:	693b      	ldr	r3, [r7, #16]
 80055ce:	1ad3      	subs	r3, r2, r3
 80055d0:	2b02      	cmp	r3, #2
 80055d2:	d901      	bls.n	80055d8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80055d4:	2303      	movs	r3, #3
 80055d6:	e0d5      	b.n	8005784 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80055d8:	4b14      	ldr	r3, [pc, #80]	@ (800562c <HAL_RCC_OscConfig+0x4b8>)
 80055da:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80055de:	f003 0302 	and.w	r3, r3, #2
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d1ef      	bne.n	80055c6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	69db      	ldr	r3, [r3, #28]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	f000 80c9 	beq.w	8005782 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80055f0:	4b0e      	ldr	r3, [pc, #56]	@ (800562c <HAL_RCC_OscConfig+0x4b8>)
 80055f2:	689b      	ldr	r3, [r3, #8]
 80055f4:	f003 030c 	and.w	r3, r3, #12
 80055f8:	2b0c      	cmp	r3, #12
 80055fa:	f000 8083 	beq.w	8005704 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	69db      	ldr	r3, [r3, #28]
 8005602:	2b02      	cmp	r3, #2
 8005604:	d15e      	bne.n	80056c4 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005606:	4b09      	ldr	r3, [pc, #36]	@ (800562c <HAL_RCC_OscConfig+0x4b8>)
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	4a08      	ldr	r2, [pc, #32]	@ (800562c <HAL_RCC_OscConfig+0x4b8>)
 800560c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005610:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005612:	f7fe feab 	bl	800436c <HAL_GetTick>
 8005616:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005618:	e00c      	b.n	8005634 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800561a:	f7fe fea7 	bl	800436c <HAL_GetTick>
 800561e:	4602      	mov	r2, r0
 8005620:	693b      	ldr	r3, [r7, #16]
 8005622:	1ad3      	subs	r3, r2, r3
 8005624:	2b02      	cmp	r3, #2
 8005626:	d905      	bls.n	8005634 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8005628:	2303      	movs	r3, #3
 800562a:	e0ab      	b.n	8005784 <HAL_RCC_OscConfig+0x610>
 800562c:	40021000 	.word	0x40021000
 8005630:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005634:	4b55      	ldr	r3, [pc, #340]	@ (800578c <HAL_RCC_OscConfig+0x618>)
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800563c:	2b00      	cmp	r3, #0
 800563e:	d1ec      	bne.n	800561a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005640:	4b52      	ldr	r3, [pc, #328]	@ (800578c <HAL_RCC_OscConfig+0x618>)
 8005642:	68da      	ldr	r2, [r3, #12]
 8005644:	4b52      	ldr	r3, [pc, #328]	@ (8005790 <HAL_RCC_OscConfig+0x61c>)
 8005646:	4013      	ands	r3, r2
 8005648:	687a      	ldr	r2, [r7, #4]
 800564a:	6a11      	ldr	r1, [r2, #32]
 800564c:	687a      	ldr	r2, [r7, #4]
 800564e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005650:	3a01      	subs	r2, #1
 8005652:	0112      	lsls	r2, r2, #4
 8005654:	4311      	orrs	r1, r2
 8005656:	687a      	ldr	r2, [r7, #4]
 8005658:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800565a:	0212      	lsls	r2, r2, #8
 800565c:	4311      	orrs	r1, r2
 800565e:	687a      	ldr	r2, [r7, #4]
 8005660:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005662:	0852      	lsrs	r2, r2, #1
 8005664:	3a01      	subs	r2, #1
 8005666:	0552      	lsls	r2, r2, #21
 8005668:	4311      	orrs	r1, r2
 800566a:	687a      	ldr	r2, [r7, #4]
 800566c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800566e:	0852      	lsrs	r2, r2, #1
 8005670:	3a01      	subs	r2, #1
 8005672:	0652      	lsls	r2, r2, #25
 8005674:	4311      	orrs	r1, r2
 8005676:	687a      	ldr	r2, [r7, #4]
 8005678:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800567a:	06d2      	lsls	r2, r2, #27
 800567c:	430a      	orrs	r2, r1
 800567e:	4943      	ldr	r1, [pc, #268]	@ (800578c <HAL_RCC_OscConfig+0x618>)
 8005680:	4313      	orrs	r3, r2
 8005682:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005684:	4b41      	ldr	r3, [pc, #260]	@ (800578c <HAL_RCC_OscConfig+0x618>)
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	4a40      	ldr	r2, [pc, #256]	@ (800578c <HAL_RCC_OscConfig+0x618>)
 800568a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800568e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005690:	4b3e      	ldr	r3, [pc, #248]	@ (800578c <HAL_RCC_OscConfig+0x618>)
 8005692:	68db      	ldr	r3, [r3, #12]
 8005694:	4a3d      	ldr	r2, [pc, #244]	@ (800578c <HAL_RCC_OscConfig+0x618>)
 8005696:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800569a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800569c:	f7fe fe66 	bl	800436c <HAL_GetTick>
 80056a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80056a2:	e008      	b.n	80056b6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80056a4:	f7fe fe62 	bl	800436c <HAL_GetTick>
 80056a8:	4602      	mov	r2, r0
 80056aa:	693b      	ldr	r3, [r7, #16]
 80056ac:	1ad3      	subs	r3, r2, r3
 80056ae:	2b02      	cmp	r3, #2
 80056b0:	d901      	bls.n	80056b6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80056b2:	2303      	movs	r3, #3
 80056b4:	e066      	b.n	8005784 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80056b6:	4b35      	ldr	r3, [pc, #212]	@ (800578c <HAL_RCC_OscConfig+0x618>)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d0f0      	beq.n	80056a4 <HAL_RCC_OscConfig+0x530>
 80056c2:	e05e      	b.n	8005782 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80056c4:	4b31      	ldr	r3, [pc, #196]	@ (800578c <HAL_RCC_OscConfig+0x618>)
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	4a30      	ldr	r2, [pc, #192]	@ (800578c <HAL_RCC_OscConfig+0x618>)
 80056ca:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80056ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056d0:	f7fe fe4c 	bl	800436c <HAL_GetTick>
 80056d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80056d6:	e008      	b.n	80056ea <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80056d8:	f7fe fe48 	bl	800436c <HAL_GetTick>
 80056dc:	4602      	mov	r2, r0
 80056de:	693b      	ldr	r3, [r7, #16]
 80056e0:	1ad3      	subs	r3, r2, r3
 80056e2:	2b02      	cmp	r3, #2
 80056e4:	d901      	bls.n	80056ea <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80056e6:	2303      	movs	r3, #3
 80056e8:	e04c      	b.n	8005784 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80056ea:	4b28      	ldr	r3, [pc, #160]	@ (800578c <HAL_RCC_OscConfig+0x618>)
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d1f0      	bne.n	80056d8 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80056f6:	4b25      	ldr	r3, [pc, #148]	@ (800578c <HAL_RCC_OscConfig+0x618>)
 80056f8:	68da      	ldr	r2, [r3, #12]
 80056fa:	4924      	ldr	r1, [pc, #144]	@ (800578c <HAL_RCC_OscConfig+0x618>)
 80056fc:	4b25      	ldr	r3, [pc, #148]	@ (8005794 <HAL_RCC_OscConfig+0x620>)
 80056fe:	4013      	ands	r3, r2
 8005700:	60cb      	str	r3, [r1, #12]
 8005702:	e03e      	b.n	8005782 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	69db      	ldr	r3, [r3, #28]
 8005708:	2b01      	cmp	r3, #1
 800570a:	d101      	bne.n	8005710 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800570c:	2301      	movs	r3, #1
 800570e:	e039      	b.n	8005784 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005710:	4b1e      	ldr	r3, [pc, #120]	@ (800578c <HAL_RCC_OscConfig+0x618>)
 8005712:	68db      	ldr	r3, [r3, #12]
 8005714:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005716:	697b      	ldr	r3, [r7, #20]
 8005718:	f003 0203 	and.w	r2, r3, #3
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6a1b      	ldr	r3, [r3, #32]
 8005720:	429a      	cmp	r2, r3
 8005722:	d12c      	bne.n	800577e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005724:	697b      	ldr	r3, [r7, #20]
 8005726:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800572e:	3b01      	subs	r3, #1
 8005730:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005732:	429a      	cmp	r2, r3
 8005734:	d123      	bne.n	800577e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005736:	697b      	ldr	r3, [r7, #20]
 8005738:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005740:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005742:	429a      	cmp	r2, r3
 8005744:	d11b      	bne.n	800577e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005746:	697b      	ldr	r3, [r7, #20]
 8005748:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005750:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005752:	429a      	cmp	r2, r3
 8005754:	d113      	bne.n	800577e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005756:	697b      	ldr	r3, [r7, #20]
 8005758:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005760:	085b      	lsrs	r3, r3, #1
 8005762:	3b01      	subs	r3, #1
 8005764:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005766:	429a      	cmp	r2, r3
 8005768:	d109      	bne.n	800577e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800576a:	697b      	ldr	r3, [r7, #20]
 800576c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005774:	085b      	lsrs	r3, r3, #1
 8005776:	3b01      	subs	r3, #1
 8005778:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800577a:	429a      	cmp	r2, r3
 800577c:	d001      	beq.n	8005782 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800577e:	2301      	movs	r3, #1
 8005780:	e000      	b.n	8005784 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8005782:	2300      	movs	r3, #0
}
 8005784:	4618      	mov	r0, r3
 8005786:	3720      	adds	r7, #32
 8005788:	46bd      	mov	sp, r7
 800578a:	bd80      	pop	{r7, pc}
 800578c:	40021000 	.word	0x40021000
 8005790:	019f800c 	.word	0x019f800c
 8005794:	feeefffc 	.word	0xfeeefffc

08005798 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b086      	sub	sp, #24
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
 80057a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80057a2:	2300      	movs	r3, #0
 80057a4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d101      	bne.n	80057b0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80057ac:	2301      	movs	r3, #1
 80057ae:	e11e      	b.n	80059ee <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80057b0:	4b91      	ldr	r3, [pc, #580]	@ (80059f8 <HAL_RCC_ClockConfig+0x260>)
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f003 030f 	and.w	r3, r3, #15
 80057b8:	683a      	ldr	r2, [r7, #0]
 80057ba:	429a      	cmp	r2, r3
 80057bc:	d910      	bls.n	80057e0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057be:	4b8e      	ldr	r3, [pc, #568]	@ (80059f8 <HAL_RCC_ClockConfig+0x260>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f023 020f 	bic.w	r2, r3, #15
 80057c6:	498c      	ldr	r1, [pc, #560]	@ (80059f8 <HAL_RCC_ClockConfig+0x260>)
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	4313      	orrs	r3, r2
 80057cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80057ce:	4b8a      	ldr	r3, [pc, #552]	@ (80059f8 <HAL_RCC_ClockConfig+0x260>)
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f003 030f 	and.w	r3, r3, #15
 80057d6:	683a      	ldr	r2, [r7, #0]
 80057d8:	429a      	cmp	r2, r3
 80057da:	d001      	beq.n	80057e0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80057dc:	2301      	movs	r3, #1
 80057de:	e106      	b.n	80059ee <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f003 0301 	and.w	r3, r3, #1
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d073      	beq.n	80058d4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	685b      	ldr	r3, [r3, #4]
 80057f0:	2b03      	cmp	r3, #3
 80057f2:	d129      	bne.n	8005848 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80057f4:	4b81      	ldr	r3, [pc, #516]	@ (80059fc <HAL_RCC_ClockConfig+0x264>)
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d101      	bne.n	8005804 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005800:	2301      	movs	r3, #1
 8005802:	e0f4      	b.n	80059ee <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005804:	f000 f9d0 	bl	8005ba8 <RCC_GetSysClockFreqFromPLLSource>
 8005808:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800580a:	693b      	ldr	r3, [r7, #16]
 800580c:	4a7c      	ldr	r2, [pc, #496]	@ (8005a00 <HAL_RCC_ClockConfig+0x268>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d93f      	bls.n	8005892 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005812:	4b7a      	ldr	r3, [pc, #488]	@ (80059fc <HAL_RCC_ClockConfig+0x264>)
 8005814:	689b      	ldr	r3, [r3, #8]
 8005816:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800581a:	2b00      	cmp	r3, #0
 800581c:	d009      	beq.n	8005832 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005826:	2b00      	cmp	r3, #0
 8005828:	d033      	beq.n	8005892 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800582e:	2b00      	cmp	r3, #0
 8005830:	d12f      	bne.n	8005892 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005832:	4b72      	ldr	r3, [pc, #456]	@ (80059fc <HAL_RCC_ClockConfig+0x264>)
 8005834:	689b      	ldr	r3, [r3, #8]
 8005836:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800583a:	4a70      	ldr	r2, [pc, #448]	@ (80059fc <HAL_RCC_ClockConfig+0x264>)
 800583c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005840:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005842:	2380      	movs	r3, #128	@ 0x80
 8005844:	617b      	str	r3, [r7, #20]
 8005846:	e024      	b.n	8005892 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	685b      	ldr	r3, [r3, #4]
 800584c:	2b02      	cmp	r3, #2
 800584e:	d107      	bne.n	8005860 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005850:	4b6a      	ldr	r3, [pc, #424]	@ (80059fc <HAL_RCC_ClockConfig+0x264>)
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005858:	2b00      	cmp	r3, #0
 800585a:	d109      	bne.n	8005870 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800585c:	2301      	movs	r3, #1
 800585e:	e0c6      	b.n	80059ee <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005860:	4b66      	ldr	r3, [pc, #408]	@ (80059fc <HAL_RCC_ClockConfig+0x264>)
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005868:	2b00      	cmp	r3, #0
 800586a:	d101      	bne.n	8005870 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800586c:	2301      	movs	r3, #1
 800586e:	e0be      	b.n	80059ee <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005870:	f000 f8ce 	bl	8005a10 <HAL_RCC_GetSysClockFreq>
 8005874:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8005876:	693b      	ldr	r3, [r7, #16]
 8005878:	4a61      	ldr	r2, [pc, #388]	@ (8005a00 <HAL_RCC_ClockConfig+0x268>)
 800587a:	4293      	cmp	r3, r2
 800587c:	d909      	bls.n	8005892 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800587e:	4b5f      	ldr	r3, [pc, #380]	@ (80059fc <HAL_RCC_ClockConfig+0x264>)
 8005880:	689b      	ldr	r3, [r3, #8]
 8005882:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005886:	4a5d      	ldr	r2, [pc, #372]	@ (80059fc <HAL_RCC_ClockConfig+0x264>)
 8005888:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800588c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800588e:	2380      	movs	r3, #128	@ 0x80
 8005890:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005892:	4b5a      	ldr	r3, [pc, #360]	@ (80059fc <HAL_RCC_ClockConfig+0x264>)
 8005894:	689b      	ldr	r3, [r3, #8]
 8005896:	f023 0203 	bic.w	r2, r3, #3
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	685b      	ldr	r3, [r3, #4]
 800589e:	4957      	ldr	r1, [pc, #348]	@ (80059fc <HAL_RCC_ClockConfig+0x264>)
 80058a0:	4313      	orrs	r3, r2
 80058a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80058a4:	f7fe fd62 	bl	800436c <HAL_GetTick>
 80058a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80058aa:	e00a      	b.n	80058c2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80058ac:	f7fe fd5e 	bl	800436c <HAL_GetTick>
 80058b0:	4602      	mov	r2, r0
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	1ad3      	subs	r3, r2, r3
 80058b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d901      	bls.n	80058c2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80058be:	2303      	movs	r3, #3
 80058c0:	e095      	b.n	80059ee <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80058c2:	4b4e      	ldr	r3, [pc, #312]	@ (80059fc <HAL_RCC_ClockConfig+0x264>)
 80058c4:	689b      	ldr	r3, [r3, #8]
 80058c6:	f003 020c 	and.w	r2, r3, #12
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	685b      	ldr	r3, [r3, #4]
 80058ce:	009b      	lsls	r3, r3, #2
 80058d0:	429a      	cmp	r2, r3
 80058d2:	d1eb      	bne.n	80058ac <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f003 0302 	and.w	r3, r3, #2
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d023      	beq.n	8005928 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f003 0304 	and.w	r3, r3, #4
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d005      	beq.n	80058f8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80058ec:	4b43      	ldr	r3, [pc, #268]	@ (80059fc <HAL_RCC_ClockConfig+0x264>)
 80058ee:	689b      	ldr	r3, [r3, #8]
 80058f0:	4a42      	ldr	r2, [pc, #264]	@ (80059fc <HAL_RCC_ClockConfig+0x264>)
 80058f2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80058f6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f003 0308 	and.w	r3, r3, #8
 8005900:	2b00      	cmp	r3, #0
 8005902:	d007      	beq.n	8005914 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005904:	4b3d      	ldr	r3, [pc, #244]	@ (80059fc <HAL_RCC_ClockConfig+0x264>)
 8005906:	689b      	ldr	r3, [r3, #8]
 8005908:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800590c:	4a3b      	ldr	r2, [pc, #236]	@ (80059fc <HAL_RCC_ClockConfig+0x264>)
 800590e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005912:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005914:	4b39      	ldr	r3, [pc, #228]	@ (80059fc <HAL_RCC_ClockConfig+0x264>)
 8005916:	689b      	ldr	r3, [r3, #8]
 8005918:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	689b      	ldr	r3, [r3, #8]
 8005920:	4936      	ldr	r1, [pc, #216]	@ (80059fc <HAL_RCC_ClockConfig+0x264>)
 8005922:	4313      	orrs	r3, r2
 8005924:	608b      	str	r3, [r1, #8]
 8005926:	e008      	b.n	800593a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005928:	697b      	ldr	r3, [r7, #20]
 800592a:	2b80      	cmp	r3, #128	@ 0x80
 800592c:	d105      	bne.n	800593a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800592e:	4b33      	ldr	r3, [pc, #204]	@ (80059fc <HAL_RCC_ClockConfig+0x264>)
 8005930:	689b      	ldr	r3, [r3, #8]
 8005932:	4a32      	ldr	r2, [pc, #200]	@ (80059fc <HAL_RCC_ClockConfig+0x264>)
 8005934:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005938:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800593a:	4b2f      	ldr	r3, [pc, #188]	@ (80059f8 <HAL_RCC_ClockConfig+0x260>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f003 030f 	and.w	r3, r3, #15
 8005942:	683a      	ldr	r2, [r7, #0]
 8005944:	429a      	cmp	r2, r3
 8005946:	d21d      	bcs.n	8005984 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005948:	4b2b      	ldr	r3, [pc, #172]	@ (80059f8 <HAL_RCC_ClockConfig+0x260>)
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f023 020f 	bic.w	r2, r3, #15
 8005950:	4929      	ldr	r1, [pc, #164]	@ (80059f8 <HAL_RCC_ClockConfig+0x260>)
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	4313      	orrs	r3, r2
 8005956:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005958:	f7fe fd08 	bl	800436c <HAL_GetTick>
 800595c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800595e:	e00a      	b.n	8005976 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005960:	f7fe fd04 	bl	800436c <HAL_GetTick>
 8005964:	4602      	mov	r2, r0
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	1ad3      	subs	r3, r2, r3
 800596a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800596e:	4293      	cmp	r3, r2
 8005970:	d901      	bls.n	8005976 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8005972:	2303      	movs	r3, #3
 8005974:	e03b      	b.n	80059ee <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005976:	4b20      	ldr	r3, [pc, #128]	@ (80059f8 <HAL_RCC_ClockConfig+0x260>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f003 030f 	and.w	r3, r3, #15
 800597e:	683a      	ldr	r2, [r7, #0]
 8005980:	429a      	cmp	r2, r3
 8005982:	d1ed      	bne.n	8005960 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f003 0304 	and.w	r3, r3, #4
 800598c:	2b00      	cmp	r3, #0
 800598e:	d008      	beq.n	80059a2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005990:	4b1a      	ldr	r3, [pc, #104]	@ (80059fc <HAL_RCC_ClockConfig+0x264>)
 8005992:	689b      	ldr	r3, [r3, #8]
 8005994:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	68db      	ldr	r3, [r3, #12]
 800599c:	4917      	ldr	r1, [pc, #92]	@ (80059fc <HAL_RCC_ClockConfig+0x264>)
 800599e:	4313      	orrs	r3, r2
 80059a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f003 0308 	and.w	r3, r3, #8
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d009      	beq.n	80059c2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80059ae:	4b13      	ldr	r3, [pc, #76]	@ (80059fc <HAL_RCC_ClockConfig+0x264>)
 80059b0:	689b      	ldr	r3, [r3, #8]
 80059b2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	691b      	ldr	r3, [r3, #16]
 80059ba:	00db      	lsls	r3, r3, #3
 80059bc:	490f      	ldr	r1, [pc, #60]	@ (80059fc <HAL_RCC_ClockConfig+0x264>)
 80059be:	4313      	orrs	r3, r2
 80059c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80059c2:	f000 f825 	bl	8005a10 <HAL_RCC_GetSysClockFreq>
 80059c6:	4602      	mov	r2, r0
 80059c8:	4b0c      	ldr	r3, [pc, #48]	@ (80059fc <HAL_RCC_ClockConfig+0x264>)
 80059ca:	689b      	ldr	r3, [r3, #8]
 80059cc:	091b      	lsrs	r3, r3, #4
 80059ce:	f003 030f 	and.w	r3, r3, #15
 80059d2:	490c      	ldr	r1, [pc, #48]	@ (8005a04 <HAL_RCC_ClockConfig+0x26c>)
 80059d4:	5ccb      	ldrb	r3, [r1, r3]
 80059d6:	f003 031f 	and.w	r3, r3, #31
 80059da:	fa22 f303 	lsr.w	r3, r2, r3
 80059de:	4a0a      	ldr	r2, [pc, #40]	@ (8005a08 <HAL_RCC_ClockConfig+0x270>)
 80059e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80059e2:	4b0a      	ldr	r3, [pc, #40]	@ (8005a0c <HAL_RCC_ClockConfig+0x274>)
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	4618      	mov	r0, r3
 80059e8:	f7fd fcc6 	bl	8003378 <HAL_InitTick>
 80059ec:	4603      	mov	r3, r0
}
 80059ee:	4618      	mov	r0, r3
 80059f0:	3718      	adds	r7, #24
 80059f2:	46bd      	mov	sp, r7
 80059f4:	bd80      	pop	{r7, pc}
 80059f6:	bf00      	nop
 80059f8:	40022000 	.word	0x40022000
 80059fc:	40021000 	.word	0x40021000
 8005a00:	04c4b400 	.word	0x04c4b400
 8005a04:	0801cd2c 	.word	0x0801cd2c
 8005a08:	20000004 	.word	0x20000004
 8005a0c:	20000008 	.word	0x20000008

08005a10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005a10:	b480      	push	{r7}
 8005a12:	b087      	sub	sp, #28
 8005a14:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005a16:	4b2c      	ldr	r3, [pc, #176]	@ (8005ac8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005a18:	689b      	ldr	r3, [r3, #8]
 8005a1a:	f003 030c 	and.w	r3, r3, #12
 8005a1e:	2b04      	cmp	r3, #4
 8005a20:	d102      	bne.n	8005a28 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005a22:	4b2a      	ldr	r3, [pc, #168]	@ (8005acc <HAL_RCC_GetSysClockFreq+0xbc>)
 8005a24:	613b      	str	r3, [r7, #16]
 8005a26:	e047      	b.n	8005ab8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005a28:	4b27      	ldr	r3, [pc, #156]	@ (8005ac8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005a2a:	689b      	ldr	r3, [r3, #8]
 8005a2c:	f003 030c 	and.w	r3, r3, #12
 8005a30:	2b08      	cmp	r3, #8
 8005a32:	d102      	bne.n	8005a3a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005a34:	4b26      	ldr	r3, [pc, #152]	@ (8005ad0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005a36:	613b      	str	r3, [r7, #16]
 8005a38:	e03e      	b.n	8005ab8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005a3a:	4b23      	ldr	r3, [pc, #140]	@ (8005ac8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005a3c:	689b      	ldr	r3, [r3, #8]
 8005a3e:	f003 030c 	and.w	r3, r3, #12
 8005a42:	2b0c      	cmp	r3, #12
 8005a44:	d136      	bne.n	8005ab4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005a46:	4b20      	ldr	r3, [pc, #128]	@ (8005ac8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005a48:	68db      	ldr	r3, [r3, #12]
 8005a4a:	f003 0303 	and.w	r3, r3, #3
 8005a4e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005a50:	4b1d      	ldr	r3, [pc, #116]	@ (8005ac8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005a52:	68db      	ldr	r3, [r3, #12]
 8005a54:	091b      	lsrs	r3, r3, #4
 8005a56:	f003 030f 	and.w	r3, r3, #15
 8005a5a:	3301      	adds	r3, #1
 8005a5c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	2b03      	cmp	r3, #3
 8005a62:	d10c      	bne.n	8005a7e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005a64:	4a1a      	ldr	r2, [pc, #104]	@ (8005ad0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005a66:	68bb      	ldr	r3, [r7, #8]
 8005a68:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a6c:	4a16      	ldr	r2, [pc, #88]	@ (8005ac8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005a6e:	68d2      	ldr	r2, [r2, #12]
 8005a70:	0a12      	lsrs	r2, r2, #8
 8005a72:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005a76:	fb02 f303 	mul.w	r3, r2, r3
 8005a7a:	617b      	str	r3, [r7, #20]
      break;
 8005a7c:	e00c      	b.n	8005a98 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005a7e:	4a13      	ldr	r2, [pc, #76]	@ (8005acc <HAL_RCC_GetSysClockFreq+0xbc>)
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a86:	4a10      	ldr	r2, [pc, #64]	@ (8005ac8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005a88:	68d2      	ldr	r2, [r2, #12]
 8005a8a:	0a12      	lsrs	r2, r2, #8
 8005a8c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005a90:	fb02 f303 	mul.w	r3, r2, r3
 8005a94:	617b      	str	r3, [r7, #20]
      break;
 8005a96:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005a98:	4b0b      	ldr	r3, [pc, #44]	@ (8005ac8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005a9a:	68db      	ldr	r3, [r3, #12]
 8005a9c:	0e5b      	lsrs	r3, r3, #25
 8005a9e:	f003 0303 	and.w	r3, r3, #3
 8005aa2:	3301      	adds	r3, #1
 8005aa4:	005b      	lsls	r3, r3, #1
 8005aa6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005aa8:	697a      	ldr	r2, [r7, #20]
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ab0:	613b      	str	r3, [r7, #16]
 8005ab2:	e001      	b.n	8005ab8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005ab8:	693b      	ldr	r3, [r7, #16]
}
 8005aba:	4618      	mov	r0, r3
 8005abc:	371c      	adds	r7, #28
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac4:	4770      	bx	lr
 8005ac6:	bf00      	nop
 8005ac8:	40021000 	.word	0x40021000
 8005acc:	00f42400 	.word	0x00f42400
 8005ad0:	016e3600 	.word	0x016e3600

08005ad4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005ad4:	b480      	push	{r7}
 8005ad6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005ad8:	4b03      	ldr	r3, [pc, #12]	@ (8005ae8 <HAL_RCC_GetHCLKFreq+0x14>)
 8005ada:	681b      	ldr	r3, [r3, #0]
}
 8005adc:	4618      	mov	r0, r3
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae4:	4770      	bx	lr
 8005ae6:	bf00      	nop
 8005ae8:	20000004 	.word	0x20000004

08005aec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005af0:	f7ff fff0 	bl	8005ad4 <HAL_RCC_GetHCLKFreq>
 8005af4:	4602      	mov	r2, r0
 8005af6:	4b06      	ldr	r3, [pc, #24]	@ (8005b10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005af8:	689b      	ldr	r3, [r3, #8]
 8005afa:	0a1b      	lsrs	r3, r3, #8
 8005afc:	f003 0307 	and.w	r3, r3, #7
 8005b00:	4904      	ldr	r1, [pc, #16]	@ (8005b14 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005b02:	5ccb      	ldrb	r3, [r1, r3]
 8005b04:	f003 031f 	and.w	r3, r3, #31
 8005b08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	bd80      	pop	{r7, pc}
 8005b10:	40021000 	.word	0x40021000
 8005b14:	0801cd3c 	.word	0x0801cd3c

08005b18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005b1c:	f7ff ffda 	bl	8005ad4 <HAL_RCC_GetHCLKFreq>
 8005b20:	4602      	mov	r2, r0
 8005b22:	4b06      	ldr	r3, [pc, #24]	@ (8005b3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005b24:	689b      	ldr	r3, [r3, #8]
 8005b26:	0adb      	lsrs	r3, r3, #11
 8005b28:	f003 0307 	and.w	r3, r3, #7
 8005b2c:	4904      	ldr	r1, [pc, #16]	@ (8005b40 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005b2e:	5ccb      	ldrb	r3, [r1, r3]
 8005b30:	f003 031f 	and.w	r3, r3, #31
 8005b34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b38:	4618      	mov	r0, r3
 8005b3a:	bd80      	pop	{r7, pc}
 8005b3c:	40021000 	.word	0x40021000
 8005b40:	0801cd3c 	.word	0x0801cd3c

08005b44 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005b44:	b480      	push	{r7}
 8005b46:	b083      	sub	sp, #12
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
 8005b4c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	220f      	movs	r2, #15
 8005b52:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8005b54:	4b12      	ldr	r3, [pc, #72]	@ (8005ba0 <HAL_RCC_GetClockConfig+0x5c>)
 8005b56:	689b      	ldr	r3, [r3, #8]
 8005b58:	f003 0203 	and.w	r2, r3, #3
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8005b60:	4b0f      	ldr	r3, [pc, #60]	@ (8005ba0 <HAL_RCC_GetClockConfig+0x5c>)
 8005b62:	689b      	ldr	r3, [r3, #8]
 8005b64:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8005b6c:	4b0c      	ldr	r3, [pc, #48]	@ (8005ba0 <HAL_RCC_GetClockConfig+0x5c>)
 8005b6e:	689b      	ldr	r3, [r3, #8]
 8005b70:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8005b78:	4b09      	ldr	r3, [pc, #36]	@ (8005ba0 <HAL_RCC_GetClockConfig+0x5c>)
 8005b7a:	689b      	ldr	r3, [r3, #8]
 8005b7c:	08db      	lsrs	r3, r3, #3
 8005b7e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8005b86:	4b07      	ldr	r3, [pc, #28]	@ (8005ba4 <HAL_RCC_GetClockConfig+0x60>)
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f003 020f 	and.w	r2, r3, #15
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	601a      	str	r2, [r3, #0]
}
 8005b92:	bf00      	nop
 8005b94:	370c      	adds	r7, #12
 8005b96:	46bd      	mov	sp, r7
 8005b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9c:	4770      	bx	lr
 8005b9e:	bf00      	nop
 8005ba0:	40021000 	.word	0x40021000
 8005ba4:	40022000 	.word	0x40022000

08005ba8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005ba8:	b480      	push	{r7}
 8005baa:	b087      	sub	sp, #28
 8005bac:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005bae:	4b1e      	ldr	r3, [pc, #120]	@ (8005c28 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005bb0:	68db      	ldr	r3, [r3, #12]
 8005bb2:	f003 0303 	and.w	r3, r3, #3
 8005bb6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005bb8:	4b1b      	ldr	r3, [pc, #108]	@ (8005c28 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005bba:	68db      	ldr	r3, [r3, #12]
 8005bbc:	091b      	lsrs	r3, r3, #4
 8005bbe:	f003 030f 	and.w	r3, r3, #15
 8005bc2:	3301      	adds	r3, #1
 8005bc4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005bc6:	693b      	ldr	r3, [r7, #16]
 8005bc8:	2b03      	cmp	r3, #3
 8005bca:	d10c      	bne.n	8005be6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005bcc:	4a17      	ldr	r2, [pc, #92]	@ (8005c2c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bd4:	4a14      	ldr	r2, [pc, #80]	@ (8005c28 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005bd6:	68d2      	ldr	r2, [r2, #12]
 8005bd8:	0a12      	lsrs	r2, r2, #8
 8005bda:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005bde:	fb02 f303 	mul.w	r3, r2, r3
 8005be2:	617b      	str	r3, [r7, #20]
    break;
 8005be4:	e00c      	b.n	8005c00 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005be6:	4a12      	ldr	r2, [pc, #72]	@ (8005c30 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bee:	4a0e      	ldr	r2, [pc, #56]	@ (8005c28 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005bf0:	68d2      	ldr	r2, [r2, #12]
 8005bf2:	0a12      	lsrs	r2, r2, #8
 8005bf4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005bf8:	fb02 f303 	mul.w	r3, r2, r3
 8005bfc:	617b      	str	r3, [r7, #20]
    break;
 8005bfe:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005c00:	4b09      	ldr	r3, [pc, #36]	@ (8005c28 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005c02:	68db      	ldr	r3, [r3, #12]
 8005c04:	0e5b      	lsrs	r3, r3, #25
 8005c06:	f003 0303 	and.w	r3, r3, #3
 8005c0a:	3301      	adds	r3, #1
 8005c0c:	005b      	lsls	r3, r3, #1
 8005c0e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005c10:	697a      	ldr	r2, [r7, #20]
 8005c12:	68bb      	ldr	r3, [r7, #8]
 8005c14:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c18:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005c1a:	687b      	ldr	r3, [r7, #4]
}
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	371c      	adds	r7, #28
 8005c20:	46bd      	mov	sp, r7
 8005c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c26:	4770      	bx	lr
 8005c28:	40021000 	.word	0x40021000
 8005c2c:	016e3600 	.word	0x016e3600
 8005c30:	00f42400 	.word	0x00f42400

08005c34 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b086      	sub	sp, #24
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005c40:	2300      	movs	r3, #0
 8005c42:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	f000 8098 	beq.w	8005d82 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005c52:	2300      	movs	r3, #0
 8005c54:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005c56:	4b43      	ldr	r3, [pc, #268]	@ (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d10d      	bne.n	8005c7e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005c62:	4b40      	ldr	r3, [pc, #256]	@ (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c66:	4a3f      	ldr	r2, [pc, #252]	@ (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c68:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005c6c:	6593      	str	r3, [r2, #88]	@ 0x58
 8005c6e:	4b3d      	ldr	r3, [pc, #244]	@ (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005c76:	60bb      	str	r3, [r7, #8]
 8005c78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005c7a:	2301      	movs	r3, #1
 8005c7c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005c7e:	4b3a      	ldr	r3, [pc, #232]	@ (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	4a39      	ldr	r2, [pc, #228]	@ (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005c84:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005c88:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005c8a:	f7fe fb6f 	bl	800436c <HAL_GetTick>
 8005c8e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005c90:	e009      	b.n	8005ca6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c92:	f7fe fb6b 	bl	800436c <HAL_GetTick>
 8005c96:	4602      	mov	r2, r0
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	1ad3      	subs	r3, r2, r3
 8005c9c:	2b02      	cmp	r3, #2
 8005c9e:	d902      	bls.n	8005ca6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005ca0:	2303      	movs	r3, #3
 8005ca2:	74fb      	strb	r3, [r7, #19]
        break;
 8005ca4:	e005      	b.n	8005cb2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005ca6:	4b30      	ldr	r3, [pc, #192]	@ (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d0ef      	beq.n	8005c92 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8005cb2:	7cfb      	ldrb	r3, [r7, #19]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d159      	bne.n	8005d6c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005cb8:	4b2a      	ldr	r3, [pc, #168]	@ (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005cba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005cbe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005cc2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005cc4:	697b      	ldr	r3, [r7, #20]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d01e      	beq.n	8005d08 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005cce:	697a      	ldr	r2, [r7, #20]
 8005cd0:	429a      	cmp	r2, r3
 8005cd2:	d019      	beq.n	8005d08 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005cd4:	4b23      	ldr	r3, [pc, #140]	@ (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005cd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005cda:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005cde:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005ce0:	4b20      	ldr	r3, [pc, #128]	@ (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005ce2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ce6:	4a1f      	ldr	r2, [pc, #124]	@ (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005ce8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005cec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005cf0:	4b1c      	ldr	r3, [pc, #112]	@ (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005cf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005cf6:	4a1b      	ldr	r2, [pc, #108]	@ (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005cf8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005cfc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005d00:	4a18      	ldr	r2, [pc, #96]	@ (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005d02:	697b      	ldr	r3, [r7, #20]
 8005d04:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005d08:	697b      	ldr	r3, [r7, #20]
 8005d0a:	f003 0301 	and.w	r3, r3, #1
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d016      	beq.n	8005d40 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d12:	f7fe fb2b 	bl	800436c <HAL_GetTick>
 8005d16:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005d18:	e00b      	b.n	8005d32 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d1a:	f7fe fb27 	bl	800436c <HAL_GetTick>
 8005d1e:	4602      	mov	r2, r0
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	1ad3      	subs	r3, r2, r3
 8005d24:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005d28:	4293      	cmp	r3, r2
 8005d2a:	d902      	bls.n	8005d32 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005d2c:	2303      	movs	r3, #3
 8005d2e:	74fb      	strb	r3, [r7, #19]
            break;
 8005d30:	e006      	b.n	8005d40 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005d32:	4b0c      	ldr	r3, [pc, #48]	@ (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005d34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d38:	f003 0302 	and.w	r3, r3, #2
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d0ec      	beq.n	8005d1a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005d40:	7cfb      	ldrb	r3, [r7, #19]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d10b      	bne.n	8005d5e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005d46:	4b07      	ldr	r3, [pc, #28]	@ (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005d48:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d4c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d54:	4903      	ldr	r1, [pc, #12]	@ (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005d56:	4313      	orrs	r3, r2
 8005d58:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005d5c:	e008      	b.n	8005d70 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005d5e:	7cfb      	ldrb	r3, [r7, #19]
 8005d60:	74bb      	strb	r3, [r7, #18]
 8005d62:	e005      	b.n	8005d70 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005d64:	40021000 	.word	0x40021000
 8005d68:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d6c:	7cfb      	ldrb	r3, [r7, #19]
 8005d6e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005d70:	7c7b      	ldrb	r3, [r7, #17]
 8005d72:	2b01      	cmp	r3, #1
 8005d74:	d105      	bne.n	8005d82 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005d76:	4ba7      	ldr	r3, [pc, #668]	@ (8006014 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d7a:	4aa6      	ldr	r2, [pc, #664]	@ (8006014 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d7c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005d80:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f003 0301 	and.w	r3, r3, #1
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d00a      	beq.n	8005da4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005d8e:	4ba1      	ldr	r3, [pc, #644]	@ (8006014 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d94:	f023 0203 	bic.w	r2, r3, #3
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	685b      	ldr	r3, [r3, #4]
 8005d9c:	499d      	ldr	r1, [pc, #628]	@ (8006014 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d9e:	4313      	orrs	r3, r2
 8005da0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f003 0302 	and.w	r3, r3, #2
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d00a      	beq.n	8005dc6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005db0:	4b98      	ldr	r3, [pc, #608]	@ (8006014 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005db2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005db6:	f023 020c 	bic.w	r2, r3, #12
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	689b      	ldr	r3, [r3, #8]
 8005dbe:	4995      	ldr	r1, [pc, #596]	@ (8006014 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005dc0:	4313      	orrs	r3, r2
 8005dc2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f003 0304 	and.w	r3, r3, #4
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d00a      	beq.n	8005de8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005dd2:	4b90      	ldr	r3, [pc, #576]	@ (8006014 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005dd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005dd8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	68db      	ldr	r3, [r3, #12]
 8005de0:	498c      	ldr	r1, [pc, #560]	@ (8006014 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005de2:	4313      	orrs	r3, r2
 8005de4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f003 0308 	and.w	r3, r3, #8
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d00a      	beq.n	8005e0a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005df4:	4b87      	ldr	r3, [pc, #540]	@ (8006014 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005df6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005dfa:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	691b      	ldr	r3, [r3, #16]
 8005e02:	4984      	ldr	r1, [pc, #528]	@ (8006014 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e04:	4313      	orrs	r3, r2
 8005e06:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f003 0310 	and.w	r3, r3, #16
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d00a      	beq.n	8005e2c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005e16:	4b7f      	ldr	r3, [pc, #508]	@ (8006014 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e1c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	695b      	ldr	r3, [r3, #20]
 8005e24:	497b      	ldr	r1, [pc, #492]	@ (8006014 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e26:	4313      	orrs	r3, r2
 8005e28:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f003 0320 	and.w	r3, r3, #32
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d00a      	beq.n	8005e4e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005e38:	4b76      	ldr	r3, [pc, #472]	@ (8006014 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e3e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	699b      	ldr	r3, [r3, #24]
 8005e46:	4973      	ldr	r1, [pc, #460]	@ (8006014 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e48:	4313      	orrs	r3, r2
 8005e4a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d00a      	beq.n	8005e70 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005e5a:	4b6e      	ldr	r3, [pc, #440]	@ (8006014 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e60:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	69db      	ldr	r3, [r3, #28]
 8005e68:	496a      	ldr	r1, [pc, #424]	@ (8006014 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e6a:	4313      	orrs	r3, r2
 8005e6c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d00a      	beq.n	8005e92 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005e7c:	4b65      	ldr	r3, [pc, #404]	@ (8006014 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e82:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6a1b      	ldr	r3, [r3, #32]
 8005e8a:	4962      	ldr	r1, [pc, #392]	@ (8006014 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e8c:	4313      	orrs	r3, r2
 8005e8e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d00a      	beq.n	8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005e9e:	4b5d      	ldr	r3, [pc, #372]	@ (8006014 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ea0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ea4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005eac:	4959      	ldr	r1, [pc, #356]	@ (8006014 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005eae:	4313      	orrs	r3, r2
 8005eb0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d00a      	beq.n	8005ed6 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005ec0:	4b54      	ldr	r3, [pc, #336]	@ (8006014 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ec2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005ec6:	f023 0203 	bic.w	r2, r3, #3
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ece:	4951      	ldr	r1, [pc, #324]	@ (8006014 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ed0:	4313      	orrs	r3, r2
 8005ed2:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d00a      	beq.n	8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005ee2:	4b4c      	ldr	r3, [pc, #304]	@ (8006014 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ee4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ee8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ef0:	4948      	ldr	r1, [pc, #288]	@ (8006014 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ef2:	4313      	orrs	r3, r2
 8005ef4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d015      	beq.n	8005f30 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005f04:	4b43      	ldr	r3, [pc, #268]	@ (8006014 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f0a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f12:	4940      	ldr	r1, [pc, #256]	@ (8006014 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f14:	4313      	orrs	r3, r2
 8005f16:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f1e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005f22:	d105      	bne.n	8005f30 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005f24:	4b3b      	ldr	r3, [pc, #236]	@ (8006014 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f26:	68db      	ldr	r3, [r3, #12]
 8005f28:	4a3a      	ldr	r2, [pc, #232]	@ (8006014 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f2a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005f2e:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d015      	beq.n	8005f68 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005f3c:	4b35      	ldr	r3, [pc, #212]	@ (8006014 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f42:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f4a:	4932      	ldr	r1, [pc, #200]	@ (8006014 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f4c:	4313      	orrs	r3, r2
 8005f4e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f56:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005f5a:	d105      	bne.n	8005f68 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005f5c:	4b2d      	ldr	r3, [pc, #180]	@ (8006014 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f5e:	68db      	ldr	r3, [r3, #12]
 8005f60:	4a2c      	ldr	r2, [pc, #176]	@ (8006014 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f62:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005f66:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d015      	beq.n	8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005f74:	4b27      	ldr	r3, [pc, #156]	@ (8006014 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f7a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f82:	4924      	ldr	r1, [pc, #144]	@ (8006014 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f84:	4313      	orrs	r3, r2
 8005f86:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f8e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005f92:	d105      	bne.n	8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005f94:	4b1f      	ldr	r3, [pc, #124]	@ (8006014 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f96:	68db      	ldr	r3, [r3, #12]
 8005f98:	4a1e      	ldr	r2, [pc, #120]	@ (8006014 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f9a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005f9e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d015      	beq.n	8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005fac:	4b19      	ldr	r3, [pc, #100]	@ (8006014 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005fae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005fb2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005fba:	4916      	ldr	r1, [pc, #88]	@ (8006014 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005fbc:	4313      	orrs	r3, r2
 8005fbe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005fc6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005fca:	d105      	bne.n	8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005fcc:	4b11      	ldr	r3, [pc, #68]	@ (8006014 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005fce:	68db      	ldr	r3, [r3, #12]
 8005fd0:	4a10      	ldr	r2, [pc, #64]	@ (8006014 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005fd2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005fd6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d019      	beq.n	8006018 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005fe4:	4b0b      	ldr	r3, [pc, #44]	@ (8006014 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005fe6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005fea:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ff2:	4908      	ldr	r1, [pc, #32]	@ (8006014 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ff4:	4313      	orrs	r3, r2
 8005ff6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ffe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006002:	d109      	bne.n	8006018 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006004:	4b03      	ldr	r3, [pc, #12]	@ (8006014 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006006:	68db      	ldr	r3, [r3, #12]
 8006008:	4a02      	ldr	r2, [pc, #8]	@ (8006014 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800600a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800600e:	60d3      	str	r3, [r2, #12]
 8006010:	e002      	b.n	8006018 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8006012:	bf00      	nop
 8006014:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006020:	2b00      	cmp	r3, #0
 8006022:	d015      	beq.n	8006050 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006024:	4b29      	ldr	r3, [pc, #164]	@ (80060cc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006026:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800602a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006032:	4926      	ldr	r1, [pc, #152]	@ (80060cc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006034:	4313      	orrs	r3, r2
 8006036:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800603e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006042:	d105      	bne.n	8006050 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006044:	4b21      	ldr	r3, [pc, #132]	@ (80060cc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006046:	68db      	ldr	r3, [r3, #12]
 8006048:	4a20      	ldr	r2, [pc, #128]	@ (80060cc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800604a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800604e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006058:	2b00      	cmp	r3, #0
 800605a:	d015      	beq.n	8006088 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800605c:	4b1b      	ldr	r3, [pc, #108]	@ (80060cc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800605e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006062:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800606a:	4918      	ldr	r1, [pc, #96]	@ (80060cc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800606c:	4313      	orrs	r3, r2
 800606e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006076:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800607a:	d105      	bne.n	8006088 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800607c:	4b13      	ldr	r3, [pc, #76]	@ (80060cc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800607e:	68db      	ldr	r3, [r3, #12]
 8006080:	4a12      	ldr	r2, [pc, #72]	@ (80060cc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006082:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006086:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006090:	2b00      	cmp	r3, #0
 8006092:	d015      	beq.n	80060c0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006094:	4b0d      	ldr	r3, [pc, #52]	@ (80060cc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006096:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800609a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80060a2:	490a      	ldr	r1, [pc, #40]	@ (80060cc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80060a4:	4313      	orrs	r3, r2
 80060a6:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80060ae:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80060b2:	d105      	bne.n	80060c0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80060b4:	4b05      	ldr	r3, [pc, #20]	@ (80060cc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80060b6:	68db      	ldr	r3, [r3, #12]
 80060b8:	4a04      	ldr	r2, [pc, #16]	@ (80060cc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80060ba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80060be:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80060c0:	7cbb      	ldrb	r3, [r7, #18]
}
 80060c2:	4618      	mov	r0, r3
 80060c4:	3718      	adds	r7, #24
 80060c6:	46bd      	mov	sp, r7
 80060c8:	bd80      	pop	{r7, pc}
 80060ca:	bf00      	nop
 80060cc:	40021000 	.word	0x40021000

080060d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b082      	sub	sp, #8
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d101      	bne.n	80060e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80060de:	2301      	movs	r3, #1
 80060e0:	e049      	b.n	8006176 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80060e8:	b2db      	uxtb	r3, r3
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d106      	bne.n	80060fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	2200      	movs	r2, #0
 80060f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80060f6:	6878      	ldr	r0, [r7, #4]
 80060f8:	f7fd fd3a 	bl	8003b70 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2202      	movs	r2, #2
 8006100:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681a      	ldr	r2, [r3, #0]
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	3304      	adds	r3, #4
 800610c:	4619      	mov	r1, r3
 800610e:	4610      	mov	r0, r2
 8006110:	f000 ff5e 	bl	8006fd0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2201      	movs	r2, #1
 8006118:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2201      	movs	r2, #1
 8006120:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2201      	movs	r2, #1
 8006128:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2201      	movs	r2, #1
 8006130:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2201      	movs	r2, #1
 8006138:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2201      	movs	r2, #1
 8006140:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2201      	movs	r2, #1
 8006148:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2201      	movs	r2, #1
 8006150:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2201      	movs	r2, #1
 8006158:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2201      	movs	r2, #1
 8006160:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2201      	movs	r2, #1
 8006168:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2201      	movs	r2, #1
 8006170:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006174:	2300      	movs	r3, #0
}
 8006176:	4618      	mov	r0, r3
 8006178:	3708      	adds	r7, #8
 800617a:	46bd      	mov	sp, r7
 800617c:	bd80      	pop	{r7, pc}
	...

08006180 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006180:	b480      	push	{r7}
 8006182:	b085      	sub	sp, #20
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800618e:	b2db      	uxtb	r3, r3
 8006190:	2b01      	cmp	r3, #1
 8006192:	d001      	beq.n	8006198 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006194:	2301      	movs	r3, #1
 8006196:	e04c      	b.n	8006232 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2202      	movs	r2, #2
 800619c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	4a26      	ldr	r2, [pc, #152]	@ (8006240 <HAL_TIM_Base_Start+0xc0>)
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d022      	beq.n	80061f0 <HAL_TIM_Base_Start+0x70>
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80061b2:	d01d      	beq.n	80061f0 <HAL_TIM_Base_Start+0x70>
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	4a22      	ldr	r2, [pc, #136]	@ (8006244 <HAL_TIM_Base_Start+0xc4>)
 80061ba:	4293      	cmp	r3, r2
 80061bc:	d018      	beq.n	80061f0 <HAL_TIM_Base_Start+0x70>
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	4a21      	ldr	r2, [pc, #132]	@ (8006248 <HAL_TIM_Base_Start+0xc8>)
 80061c4:	4293      	cmp	r3, r2
 80061c6:	d013      	beq.n	80061f0 <HAL_TIM_Base_Start+0x70>
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	4a1f      	ldr	r2, [pc, #124]	@ (800624c <HAL_TIM_Base_Start+0xcc>)
 80061ce:	4293      	cmp	r3, r2
 80061d0:	d00e      	beq.n	80061f0 <HAL_TIM_Base_Start+0x70>
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	4a1e      	ldr	r2, [pc, #120]	@ (8006250 <HAL_TIM_Base_Start+0xd0>)
 80061d8:	4293      	cmp	r3, r2
 80061da:	d009      	beq.n	80061f0 <HAL_TIM_Base_Start+0x70>
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	4a1c      	ldr	r2, [pc, #112]	@ (8006254 <HAL_TIM_Base_Start+0xd4>)
 80061e2:	4293      	cmp	r3, r2
 80061e4:	d004      	beq.n	80061f0 <HAL_TIM_Base_Start+0x70>
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	4a1b      	ldr	r2, [pc, #108]	@ (8006258 <HAL_TIM_Base_Start+0xd8>)
 80061ec:	4293      	cmp	r3, r2
 80061ee:	d115      	bne.n	800621c <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	689a      	ldr	r2, [r3, #8]
 80061f6:	4b19      	ldr	r3, [pc, #100]	@ (800625c <HAL_TIM_Base_Start+0xdc>)
 80061f8:	4013      	ands	r3, r2
 80061fa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	2b06      	cmp	r3, #6
 8006200:	d015      	beq.n	800622e <HAL_TIM_Base_Start+0xae>
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006208:	d011      	beq.n	800622e <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	681a      	ldr	r2, [r3, #0]
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f042 0201 	orr.w	r2, r2, #1
 8006218:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800621a:	e008      	b.n	800622e <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	681a      	ldr	r2, [r3, #0]
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f042 0201 	orr.w	r2, r2, #1
 800622a:	601a      	str	r2, [r3, #0]
 800622c:	e000      	b.n	8006230 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800622e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006230:	2300      	movs	r3, #0
}
 8006232:	4618      	mov	r0, r3
 8006234:	3714      	adds	r7, #20
 8006236:	46bd      	mov	sp, r7
 8006238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623c:	4770      	bx	lr
 800623e:	bf00      	nop
 8006240:	40012c00 	.word	0x40012c00
 8006244:	40000400 	.word	0x40000400
 8006248:	40000800 	.word	0x40000800
 800624c:	40000c00 	.word	0x40000c00
 8006250:	40013400 	.word	0x40013400
 8006254:	40014000 	.word	0x40014000
 8006258:	40015000 	.word	0x40015000
 800625c:	00010007 	.word	0x00010007

08006260 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006260:	b480      	push	{r7}
 8006262:	b085      	sub	sp, #20
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800626e:	b2db      	uxtb	r3, r3
 8006270:	2b01      	cmp	r3, #1
 8006272:	d001      	beq.n	8006278 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006274:	2301      	movs	r3, #1
 8006276:	e054      	b.n	8006322 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2202      	movs	r2, #2
 800627c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	68da      	ldr	r2, [r3, #12]
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f042 0201 	orr.w	r2, r2, #1
 800628e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	4a26      	ldr	r2, [pc, #152]	@ (8006330 <HAL_TIM_Base_Start_IT+0xd0>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d022      	beq.n	80062e0 <HAL_TIM_Base_Start_IT+0x80>
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80062a2:	d01d      	beq.n	80062e0 <HAL_TIM_Base_Start_IT+0x80>
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	4a22      	ldr	r2, [pc, #136]	@ (8006334 <HAL_TIM_Base_Start_IT+0xd4>)
 80062aa:	4293      	cmp	r3, r2
 80062ac:	d018      	beq.n	80062e0 <HAL_TIM_Base_Start_IT+0x80>
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	4a21      	ldr	r2, [pc, #132]	@ (8006338 <HAL_TIM_Base_Start_IT+0xd8>)
 80062b4:	4293      	cmp	r3, r2
 80062b6:	d013      	beq.n	80062e0 <HAL_TIM_Base_Start_IT+0x80>
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	4a1f      	ldr	r2, [pc, #124]	@ (800633c <HAL_TIM_Base_Start_IT+0xdc>)
 80062be:	4293      	cmp	r3, r2
 80062c0:	d00e      	beq.n	80062e0 <HAL_TIM_Base_Start_IT+0x80>
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	4a1e      	ldr	r2, [pc, #120]	@ (8006340 <HAL_TIM_Base_Start_IT+0xe0>)
 80062c8:	4293      	cmp	r3, r2
 80062ca:	d009      	beq.n	80062e0 <HAL_TIM_Base_Start_IT+0x80>
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	4a1c      	ldr	r2, [pc, #112]	@ (8006344 <HAL_TIM_Base_Start_IT+0xe4>)
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d004      	beq.n	80062e0 <HAL_TIM_Base_Start_IT+0x80>
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	4a1b      	ldr	r2, [pc, #108]	@ (8006348 <HAL_TIM_Base_Start_IT+0xe8>)
 80062dc:	4293      	cmp	r3, r2
 80062de:	d115      	bne.n	800630c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	689a      	ldr	r2, [r3, #8]
 80062e6:	4b19      	ldr	r3, [pc, #100]	@ (800634c <HAL_TIM_Base_Start_IT+0xec>)
 80062e8:	4013      	ands	r3, r2
 80062ea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	2b06      	cmp	r3, #6
 80062f0:	d015      	beq.n	800631e <HAL_TIM_Base_Start_IT+0xbe>
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80062f8:	d011      	beq.n	800631e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	681a      	ldr	r2, [r3, #0]
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f042 0201 	orr.w	r2, r2, #1
 8006308:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800630a:	e008      	b.n	800631e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	681a      	ldr	r2, [r3, #0]
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f042 0201 	orr.w	r2, r2, #1
 800631a:	601a      	str	r2, [r3, #0]
 800631c:	e000      	b.n	8006320 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800631e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006320:	2300      	movs	r3, #0
}
 8006322:	4618      	mov	r0, r3
 8006324:	3714      	adds	r7, #20
 8006326:	46bd      	mov	sp, r7
 8006328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632c:	4770      	bx	lr
 800632e:	bf00      	nop
 8006330:	40012c00 	.word	0x40012c00
 8006334:	40000400 	.word	0x40000400
 8006338:	40000800 	.word	0x40000800
 800633c:	40000c00 	.word	0x40000c00
 8006340:	40013400 	.word	0x40013400
 8006344:	40014000 	.word	0x40014000
 8006348:	40015000 	.word	0x40015000
 800634c:	00010007 	.word	0x00010007

08006350 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006350:	b580      	push	{r7, lr}
 8006352:	b082      	sub	sp, #8
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d101      	bne.n	8006362 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800635e:	2301      	movs	r3, #1
 8006360:	e049      	b.n	80063f6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006368:	b2db      	uxtb	r3, r3
 800636a:	2b00      	cmp	r3, #0
 800636c:	d106      	bne.n	800637c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	2200      	movs	r2, #0
 8006372:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006376:	6878      	ldr	r0, [r7, #4]
 8006378:	f7fd fd14 	bl	8003da4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2202      	movs	r2, #2
 8006380:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681a      	ldr	r2, [r3, #0]
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	3304      	adds	r3, #4
 800638c:	4619      	mov	r1, r3
 800638e:	4610      	mov	r0, r2
 8006390:	f000 fe1e 	bl	8006fd0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2201      	movs	r2, #1
 8006398:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2201      	movs	r2, #1
 80063a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2201      	movs	r2, #1
 80063a8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2201      	movs	r2, #1
 80063b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2201      	movs	r2, #1
 80063b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2201      	movs	r2, #1
 80063c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2201      	movs	r2, #1
 80063c8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2201      	movs	r2, #1
 80063d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2201      	movs	r2, #1
 80063d8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2201      	movs	r2, #1
 80063e0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2201      	movs	r2, #1
 80063e8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2201      	movs	r2, #1
 80063f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80063f4:	2300      	movs	r3, #0
}
 80063f6:	4618      	mov	r0, r3
 80063f8:	3708      	adds	r7, #8
 80063fa:	46bd      	mov	sp, r7
 80063fc:	bd80      	pop	{r7, pc}
	...

08006400 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006400:	b580      	push	{r7, lr}
 8006402:	b084      	sub	sp, #16
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
 8006408:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d109      	bne.n	8006424 <HAL_TIM_PWM_Start+0x24>
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006416:	b2db      	uxtb	r3, r3
 8006418:	2b01      	cmp	r3, #1
 800641a:	bf14      	ite	ne
 800641c:	2301      	movne	r3, #1
 800641e:	2300      	moveq	r3, #0
 8006420:	b2db      	uxtb	r3, r3
 8006422:	e03c      	b.n	800649e <HAL_TIM_PWM_Start+0x9e>
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	2b04      	cmp	r3, #4
 8006428:	d109      	bne.n	800643e <HAL_TIM_PWM_Start+0x3e>
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006430:	b2db      	uxtb	r3, r3
 8006432:	2b01      	cmp	r3, #1
 8006434:	bf14      	ite	ne
 8006436:	2301      	movne	r3, #1
 8006438:	2300      	moveq	r3, #0
 800643a:	b2db      	uxtb	r3, r3
 800643c:	e02f      	b.n	800649e <HAL_TIM_PWM_Start+0x9e>
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	2b08      	cmp	r3, #8
 8006442:	d109      	bne.n	8006458 <HAL_TIM_PWM_Start+0x58>
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800644a:	b2db      	uxtb	r3, r3
 800644c:	2b01      	cmp	r3, #1
 800644e:	bf14      	ite	ne
 8006450:	2301      	movne	r3, #1
 8006452:	2300      	moveq	r3, #0
 8006454:	b2db      	uxtb	r3, r3
 8006456:	e022      	b.n	800649e <HAL_TIM_PWM_Start+0x9e>
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	2b0c      	cmp	r3, #12
 800645c:	d109      	bne.n	8006472 <HAL_TIM_PWM_Start+0x72>
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006464:	b2db      	uxtb	r3, r3
 8006466:	2b01      	cmp	r3, #1
 8006468:	bf14      	ite	ne
 800646a:	2301      	movne	r3, #1
 800646c:	2300      	moveq	r3, #0
 800646e:	b2db      	uxtb	r3, r3
 8006470:	e015      	b.n	800649e <HAL_TIM_PWM_Start+0x9e>
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	2b10      	cmp	r3, #16
 8006476:	d109      	bne.n	800648c <HAL_TIM_PWM_Start+0x8c>
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800647e:	b2db      	uxtb	r3, r3
 8006480:	2b01      	cmp	r3, #1
 8006482:	bf14      	ite	ne
 8006484:	2301      	movne	r3, #1
 8006486:	2300      	moveq	r3, #0
 8006488:	b2db      	uxtb	r3, r3
 800648a:	e008      	b.n	800649e <HAL_TIM_PWM_Start+0x9e>
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8006492:	b2db      	uxtb	r3, r3
 8006494:	2b01      	cmp	r3, #1
 8006496:	bf14      	ite	ne
 8006498:	2301      	movne	r3, #1
 800649a:	2300      	moveq	r3, #0
 800649c:	b2db      	uxtb	r3, r3
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d001      	beq.n	80064a6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80064a2:	2301      	movs	r3, #1
 80064a4:	e0a6      	b.n	80065f4 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d104      	bne.n	80064b6 <HAL_TIM_PWM_Start+0xb6>
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2202      	movs	r2, #2
 80064b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80064b4:	e023      	b.n	80064fe <HAL_TIM_PWM_Start+0xfe>
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	2b04      	cmp	r3, #4
 80064ba:	d104      	bne.n	80064c6 <HAL_TIM_PWM_Start+0xc6>
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2202      	movs	r2, #2
 80064c0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80064c4:	e01b      	b.n	80064fe <HAL_TIM_PWM_Start+0xfe>
 80064c6:	683b      	ldr	r3, [r7, #0]
 80064c8:	2b08      	cmp	r3, #8
 80064ca:	d104      	bne.n	80064d6 <HAL_TIM_PWM_Start+0xd6>
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2202      	movs	r2, #2
 80064d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80064d4:	e013      	b.n	80064fe <HAL_TIM_PWM_Start+0xfe>
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	2b0c      	cmp	r3, #12
 80064da:	d104      	bne.n	80064e6 <HAL_TIM_PWM_Start+0xe6>
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2202      	movs	r2, #2
 80064e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80064e4:	e00b      	b.n	80064fe <HAL_TIM_PWM_Start+0xfe>
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	2b10      	cmp	r3, #16
 80064ea:	d104      	bne.n	80064f6 <HAL_TIM_PWM_Start+0xf6>
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2202      	movs	r2, #2
 80064f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80064f4:	e003      	b.n	80064fe <HAL_TIM_PWM_Start+0xfe>
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	2202      	movs	r2, #2
 80064fa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	2201      	movs	r2, #1
 8006504:	6839      	ldr	r1, [r7, #0]
 8006506:	4618      	mov	r0, r3
 8006508:	f001 f9dc 	bl	80078c4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	4a3a      	ldr	r2, [pc, #232]	@ (80065fc <HAL_TIM_PWM_Start+0x1fc>)
 8006512:	4293      	cmp	r3, r2
 8006514:	d018      	beq.n	8006548 <HAL_TIM_PWM_Start+0x148>
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	4a39      	ldr	r2, [pc, #228]	@ (8006600 <HAL_TIM_PWM_Start+0x200>)
 800651c:	4293      	cmp	r3, r2
 800651e:	d013      	beq.n	8006548 <HAL_TIM_PWM_Start+0x148>
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	4a37      	ldr	r2, [pc, #220]	@ (8006604 <HAL_TIM_PWM_Start+0x204>)
 8006526:	4293      	cmp	r3, r2
 8006528:	d00e      	beq.n	8006548 <HAL_TIM_PWM_Start+0x148>
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	4a36      	ldr	r2, [pc, #216]	@ (8006608 <HAL_TIM_PWM_Start+0x208>)
 8006530:	4293      	cmp	r3, r2
 8006532:	d009      	beq.n	8006548 <HAL_TIM_PWM_Start+0x148>
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	4a34      	ldr	r2, [pc, #208]	@ (800660c <HAL_TIM_PWM_Start+0x20c>)
 800653a:	4293      	cmp	r3, r2
 800653c:	d004      	beq.n	8006548 <HAL_TIM_PWM_Start+0x148>
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	4a33      	ldr	r2, [pc, #204]	@ (8006610 <HAL_TIM_PWM_Start+0x210>)
 8006544:	4293      	cmp	r3, r2
 8006546:	d101      	bne.n	800654c <HAL_TIM_PWM_Start+0x14c>
 8006548:	2301      	movs	r3, #1
 800654a:	e000      	b.n	800654e <HAL_TIM_PWM_Start+0x14e>
 800654c:	2300      	movs	r3, #0
 800654e:	2b00      	cmp	r3, #0
 8006550:	d007      	beq.n	8006562 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006560:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	4a25      	ldr	r2, [pc, #148]	@ (80065fc <HAL_TIM_PWM_Start+0x1fc>)
 8006568:	4293      	cmp	r3, r2
 800656a:	d022      	beq.n	80065b2 <HAL_TIM_PWM_Start+0x1b2>
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006574:	d01d      	beq.n	80065b2 <HAL_TIM_PWM_Start+0x1b2>
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	4a26      	ldr	r2, [pc, #152]	@ (8006614 <HAL_TIM_PWM_Start+0x214>)
 800657c:	4293      	cmp	r3, r2
 800657e:	d018      	beq.n	80065b2 <HAL_TIM_PWM_Start+0x1b2>
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	4a24      	ldr	r2, [pc, #144]	@ (8006618 <HAL_TIM_PWM_Start+0x218>)
 8006586:	4293      	cmp	r3, r2
 8006588:	d013      	beq.n	80065b2 <HAL_TIM_PWM_Start+0x1b2>
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	4a23      	ldr	r2, [pc, #140]	@ (800661c <HAL_TIM_PWM_Start+0x21c>)
 8006590:	4293      	cmp	r3, r2
 8006592:	d00e      	beq.n	80065b2 <HAL_TIM_PWM_Start+0x1b2>
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	4a19      	ldr	r2, [pc, #100]	@ (8006600 <HAL_TIM_PWM_Start+0x200>)
 800659a:	4293      	cmp	r3, r2
 800659c:	d009      	beq.n	80065b2 <HAL_TIM_PWM_Start+0x1b2>
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	4a18      	ldr	r2, [pc, #96]	@ (8006604 <HAL_TIM_PWM_Start+0x204>)
 80065a4:	4293      	cmp	r3, r2
 80065a6:	d004      	beq.n	80065b2 <HAL_TIM_PWM_Start+0x1b2>
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	4a18      	ldr	r2, [pc, #96]	@ (8006610 <HAL_TIM_PWM_Start+0x210>)
 80065ae:	4293      	cmp	r3, r2
 80065b0:	d115      	bne.n	80065de <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	689a      	ldr	r2, [r3, #8]
 80065b8:	4b19      	ldr	r3, [pc, #100]	@ (8006620 <HAL_TIM_PWM_Start+0x220>)
 80065ba:	4013      	ands	r3, r2
 80065bc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	2b06      	cmp	r3, #6
 80065c2:	d015      	beq.n	80065f0 <HAL_TIM_PWM_Start+0x1f0>
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80065ca:	d011      	beq.n	80065f0 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	681a      	ldr	r2, [r3, #0]
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f042 0201 	orr.w	r2, r2, #1
 80065da:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065dc:	e008      	b.n	80065f0 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	681a      	ldr	r2, [r3, #0]
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f042 0201 	orr.w	r2, r2, #1
 80065ec:	601a      	str	r2, [r3, #0]
 80065ee:	e000      	b.n	80065f2 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065f0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80065f2:	2300      	movs	r3, #0
}
 80065f4:	4618      	mov	r0, r3
 80065f6:	3710      	adds	r7, #16
 80065f8:	46bd      	mov	sp, r7
 80065fa:	bd80      	pop	{r7, pc}
 80065fc:	40012c00 	.word	0x40012c00
 8006600:	40013400 	.word	0x40013400
 8006604:	40014000 	.word	0x40014000
 8006608:	40014400 	.word	0x40014400
 800660c:	40014800 	.word	0x40014800
 8006610:	40015000 	.word	0x40015000
 8006614:	40000400 	.word	0x40000400
 8006618:	40000800 	.word	0x40000800
 800661c:	40000c00 	.word	0x40000c00
 8006620:	00010007 	.word	0x00010007

08006624 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8006624:	b580      	push	{r7, lr}
 8006626:	b086      	sub	sp, #24
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
 800662c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d101      	bne.n	8006638 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006634:	2301      	movs	r3, #1
 8006636:	e097      	b.n	8006768 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800663e:	b2db      	uxtb	r3, r3
 8006640:	2b00      	cmp	r3, #0
 8006642:	d106      	bne.n	8006652 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2200      	movs	r2, #0
 8006648:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800664c:	6878      	ldr	r0, [r7, #4]
 800664e:	f7fd fab3 	bl	8003bb8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	2202      	movs	r2, #2
 8006656:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	689b      	ldr	r3, [r3, #8]
 8006660:	687a      	ldr	r2, [r7, #4]
 8006662:	6812      	ldr	r2, [r2, #0]
 8006664:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8006668:	f023 0307 	bic.w	r3, r3, #7
 800666c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681a      	ldr	r2, [r3, #0]
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	3304      	adds	r3, #4
 8006676:	4619      	mov	r1, r3
 8006678:	4610      	mov	r0, r2
 800667a:	f000 fca9 	bl	8006fd0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	689b      	ldr	r3, [r3, #8]
 8006684:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	699b      	ldr	r3, [r3, #24]
 800668c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	6a1b      	ldr	r3, [r3, #32]
 8006694:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	697a      	ldr	r2, [r7, #20]
 800669c:	4313      	orrs	r3, r2
 800669e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80066a0:	693b      	ldr	r3, [r7, #16]
 80066a2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80066a6:	f023 0303 	bic.w	r3, r3, #3
 80066aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	689a      	ldr	r2, [r3, #8]
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	699b      	ldr	r3, [r3, #24]
 80066b4:	021b      	lsls	r3, r3, #8
 80066b6:	4313      	orrs	r3, r2
 80066b8:	693a      	ldr	r2, [r7, #16]
 80066ba:	4313      	orrs	r3, r2
 80066bc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80066be:	693b      	ldr	r3, [r7, #16]
 80066c0:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80066c4:	f023 030c 	bic.w	r3, r3, #12
 80066c8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80066ca:	693b      	ldr	r3, [r7, #16]
 80066cc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80066d0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80066d4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	68da      	ldr	r2, [r3, #12]
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	69db      	ldr	r3, [r3, #28]
 80066de:	021b      	lsls	r3, r3, #8
 80066e0:	4313      	orrs	r3, r2
 80066e2:	693a      	ldr	r2, [r7, #16]
 80066e4:	4313      	orrs	r3, r2
 80066e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	691b      	ldr	r3, [r3, #16]
 80066ec:	011a      	lsls	r2, r3, #4
 80066ee:	683b      	ldr	r3, [r7, #0]
 80066f0:	6a1b      	ldr	r3, [r3, #32]
 80066f2:	031b      	lsls	r3, r3, #12
 80066f4:	4313      	orrs	r3, r2
 80066f6:	693a      	ldr	r2, [r7, #16]
 80066f8:	4313      	orrs	r3, r2
 80066fa:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8006702:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800670a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800670c:	683b      	ldr	r3, [r7, #0]
 800670e:	685a      	ldr	r2, [r3, #4]
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	695b      	ldr	r3, [r3, #20]
 8006714:	011b      	lsls	r3, r3, #4
 8006716:	4313      	orrs	r3, r2
 8006718:	68fa      	ldr	r2, [r7, #12]
 800671a:	4313      	orrs	r3, r2
 800671c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	697a      	ldr	r2, [r7, #20]
 8006724:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	693a      	ldr	r2, [r7, #16]
 800672c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	68fa      	ldr	r2, [r7, #12]
 8006734:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	2201      	movs	r2, #1
 800673a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	2201      	movs	r2, #1
 8006742:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2201      	movs	r2, #1
 800674a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	2201      	movs	r2, #1
 8006752:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	2201      	movs	r2, #1
 800675a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	2201      	movs	r2, #1
 8006762:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006766:	2300      	movs	r3, #0
}
 8006768:	4618      	mov	r0, r3
 800676a:	3718      	adds	r7, #24
 800676c:	46bd      	mov	sp, r7
 800676e:	bd80      	pop	{r7, pc}

08006770 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006770:	b580      	push	{r7, lr}
 8006772:	b084      	sub	sp, #16
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
 8006778:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006780:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006788:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006790:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006798:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d110      	bne.n	80067c2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80067a0:	7bfb      	ldrb	r3, [r7, #15]
 80067a2:	2b01      	cmp	r3, #1
 80067a4:	d102      	bne.n	80067ac <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80067a6:	7b7b      	ldrb	r3, [r7, #13]
 80067a8:	2b01      	cmp	r3, #1
 80067aa:	d001      	beq.n	80067b0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80067ac:	2301      	movs	r3, #1
 80067ae:	e069      	b.n	8006884 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2202      	movs	r2, #2
 80067b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2202      	movs	r2, #2
 80067bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80067c0:	e031      	b.n	8006826 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	2b04      	cmp	r3, #4
 80067c6:	d110      	bne.n	80067ea <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80067c8:	7bbb      	ldrb	r3, [r7, #14]
 80067ca:	2b01      	cmp	r3, #1
 80067cc:	d102      	bne.n	80067d4 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80067ce:	7b3b      	ldrb	r3, [r7, #12]
 80067d0:	2b01      	cmp	r3, #1
 80067d2:	d001      	beq.n	80067d8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80067d4:	2301      	movs	r3, #1
 80067d6:	e055      	b.n	8006884 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2202      	movs	r2, #2
 80067dc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2202      	movs	r2, #2
 80067e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80067e8:	e01d      	b.n	8006826 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80067ea:	7bfb      	ldrb	r3, [r7, #15]
 80067ec:	2b01      	cmp	r3, #1
 80067ee:	d108      	bne.n	8006802 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80067f0:	7bbb      	ldrb	r3, [r7, #14]
 80067f2:	2b01      	cmp	r3, #1
 80067f4:	d105      	bne.n	8006802 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80067f6:	7b7b      	ldrb	r3, [r7, #13]
 80067f8:	2b01      	cmp	r3, #1
 80067fa:	d102      	bne.n	8006802 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80067fc:	7b3b      	ldrb	r3, [r7, #12]
 80067fe:	2b01      	cmp	r3, #1
 8006800:	d001      	beq.n	8006806 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8006802:	2301      	movs	r3, #1
 8006804:	e03e      	b.n	8006884 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	2202      	movs	r2, #2
 800680a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	2202      	movs	r2, #2
 8006812:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	2202      	movs	r2, #2
 800681a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	2202      	movs	r2, #2
 8006822:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8006826:	683b      	ldr	r3, [r7, #0]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d003      	beq.n	8006834 <HAL_TIM_Encoder_Start+0xc4>
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	2b04      	cmp	r3, #4
 8006830:	d008      	beq.n	8006844 <HAL_TIM_Encoder_Start+0xd4>
 8006832:	e00f      	b.n	8006854 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	2201      	movs	r2, #1
 800683a:	2100      	movs	r1, #0
 800683c:	4618      	mov	r0, r3
 800683e:	f001 f841 	bl	80078c4 <TIM_CCxChannelCmd>
      break;
 8006842:	e016      	b.n	8006872 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	2201      	movs	r2, #1
 800684a:	2104      	movs	r1, #4
 800684c:	4618      	mov	r0, r3
 800684e:	f001 f839 	bl	80078c4 <TIM_CCxChannelCmd>
      break;
 8006852:	e00e      	b.n	8006872 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	2201      	movs	r2, #1
 800685a:	2100      	movs	r1, #0
 800685c:	4618      	mov	r0, r3
 800685e:	f001 f831 	bl	80078c4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	2201      	movs	r2, #1
 8006868:	2104      	movs	r1, #4
 800686a:	4618      	mov	r0, r3
 800686c:	f001 f82a 	bl	80078c4 <TIM_CCxChannelCmd>
      break;
 8006870:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	681a      	ldr	r2, [r3, #0]
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	f042 0201 	orr.w	r2, r2, #1
 8006880:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006882:	2300      	movs	r3, #0
}
 8006884:	4618      	mov	r0, r3
 8006886:	3710      	adds	r7, #16
 8006888:	46bd      	mov	sp, r7
 800688a:	bd80      	pop	{r7, pc}

0800688c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800688c:	b580      	push	{r7, lr}
 800688e:	b084      	sub	sp, #16
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	68db      	ldr	r3, [r3, #12]
 800689a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	691b      	ldr	r3, [r3, #16]
 80068a2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80068a4:	68bb      	ldr	r3, [r7, #8]
 80068a6:	f003 0302 	and.w	r3, r3, #2
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d020      	beq.n	80068f0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	f003 0302 	and.w	r3, r3, #2
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d01b      	beq.n	80068f0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f06f 0202 	mvn.w	r2, #2
 80068c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	2201      	movs	r2, #1
 80068c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	699b      	ldr	r3, [r3, #24]
 80068ce:	f003 0303 	and.w	r3, r3, #3
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d003      	beq.n	80068de <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80068d6:	6878      	ldr	r0, [r7, #4]
 80068d8:	f000 fb5c 	bl	8006f94 <HAL_TIM_IC_CaptureCallback>
 80068dc:	e005      	b.n	80068ea <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80068de:	6878      	ldr	r0, [r7, #4]
 80068e0:	f000 fb4e 	bl	8006f80 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068e4:	6878      	ldr	r0, [r7, #4]
 80068e6:	f000 fb5f 	bl	8006fa8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	2200      	movs	r2, #0
 80068ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80068f0:	68bb      	ldr	r3, [r7, #8]
 80068f2:	f003 0304 	and.w	r3, r3, #4
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d020      	beq.n	800693c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	f003 0304 	and.w	r3, r3, #4
 8006900:	2b00      	cmp	r3, #0
 8006902:	d01b      	beq.n	800693c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f06f 0204 	mvn.w	r2, #4
 800690c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	2202      	movs	r2, #2
 8006912:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	699b      	ldr	r3, [r3, #24]
 800691a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800691e:	2b00      	cmp	r3, #0
 8006920:	d003      	beq.n	800692a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006922:	6878      	ldr	r0, [r7, #4]
 8006924:	f000 fb36 	bl	8006f94 <HAL_TIM_IC_CaptureCallback>
 8006928:	e005      	b.n	8006936 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800692a:	6878      	ldr	r0, [r7, #4]
 800692c:	f000 fb28 	bl	8006f80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006930:	6878      	ldr	r0, [r7, #4]
 8006932:	f000 fb39 	bl	8006fa8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	2200      	movs	r2, #0
 800693a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800693c:	68bb      	ldr	r3, [r7, #8]
 800693e:	f003 0308 	and.w	r3, r3, #8
 8006942:	2b00      	cmp	r3, #0
 8006944:	d020      	beq.n	8006988 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	f003 0308 	and.w	r3, r3, #8
 800694c:	2b00      	cmp	r3, #0
 800694e:	d01b      	beq.n	8006988 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	f06f 0208 	mvn.w	r2, #8
 8006958:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	2204      	movs	r2, #4
 800695e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	69db      	ldr	r3, [r3, #28]
 8006966:	f003 0303 	and.w	r3, r3, #3
 800696a:	2b00      	cmp	r3, #0
 800696c:	d003      	beq.n	8006976 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800696e:	6878      	ldr	r0, [r7, #4]
 8006970:	f000 fb10 	bl	8006f94 <HAL_TIM_IC_CaptureCallback>
 8006974:	e005      	b.n	8006982 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006976:	6878      	ldr	r0, [r7, #4]
 8006978:	f000 fb02 	bl	8006f80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800697c:	6878      	ldr	r0, [r7, #4]
 800697e:	f000 fb13 	bl	8006fa8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	2200      	movs	r2, #0
 8006986:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006988:	68bb      	ldr	r3, [r7, #8]
 800698a:	f003 0310 	and.w	r3, r3, #16
 800698e:	2b00      	cmp	r3, #0
 8006990:	d020      	beq.n	80069d4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	f003 0310 	and.w	r3, r3, #16
 8006998:	2b00      	cmp	r3, #0
 800699a:	d01b      	beq.n	80069d4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	f06f 0210 	mvn.w	r2, #16
 80069a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	2208      	movs	r2, #8
 80069aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	69db      	ldr	r3, [r3, #28]
 80069b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d003      	beq.n	80069c2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80069ba:	6878      	ldr	r0, [r7, #4]
 80069bc:	f000 faea 	bl	8006f94 <HAL_TIM_IC_CaptureCallback>
 80069c0:	e005      	b.n	80069ce <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80069c2:	6878      	ldr	r0, [r7, #4]
 80069c4:	f000 fadc 	bl	8006f80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069c8:	6878      	ldr	r0, [r7, #4]
 80069ca:	f000 faed 	bl	8006fa8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	2200      	movs	r2, #0
 80069d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80069d4:	68bb      	ldr	r3, [r7, #8]
 80069d6:	f003 0301 	and.w	r3, r3, #1
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d00c      	beq.n	80069f8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	f003 0301 	and.w	r3, r3, #1
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d007      	beq.n	80069f8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f06f 0201 	mvn.w	r2, #1
 80069f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80069f2:	6878      	ldr	r0, [r7, #4]
 80069f4:	f7fb ff7a 	bl	80028ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80069f8:	68bb      	ldr	r3, [r7, #8]
 80069fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d104      	bne.n	8006a0c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8006a02:	68bb      	ldr	r3, [r7, #8]
 8006a04:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d00c      	beq.n	8006a26 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d007      	beq.n	8006a26 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8006a1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006a20:	6878      	ldr	r0, [r7, #4]
 8006a22:	f001 f8a9 	bl	8007b78 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006a26:	68bb      	ldr	r3, [r7, #8]
 8006a28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d00c      	beq.n	8006a4a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d007      	beq.n	8006a4a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8006a42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006a44:	6878      	ldr	r0, [r7, #4]
 8006a46:	f001 f8a1 	bl	8007b8c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006a4a:	68bb      	ldr	r3, [r7, #8]
 8006a4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d00c      	beq.n	8006a6e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d007      	beq.n	8006a6e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006a66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006a68:	6878      	ldr	r0, [r7, #4]
 8006a6a:	f000 faa7 	bl	8006fbc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006a6e:	68bb      	ldr	r3, [r7, #8]
 8006a70:	f003 0320 	and.w	r3, r3, #32
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d00c      	beq.n	8006a92 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	f003 0320 	and.w	r3, r3, #32
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d007      	beq.n	8006a92 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	f06f 0220 	mvn.w	r2, #32
 8006a8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006a8c:	6878      	ldr	r0, [r7, #4]
 8006a8e:	f001 f869 	bl	8007b64 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8006a92:	68bb      	ldr	r3, [r7, #8]
 8006a94:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d00c      	beq.n	8006ab6 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d007      	beq.n	8006ab6 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8006aae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8006ab0:	6878      	ldr	r0, [r7, #4]
 8006ab2:	f001 f875 	bl	8007ba0 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8006ab6:	68bb      	ldr	r3, [r7, #8]
 8006ab8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d00c      	beq.n	8006ada <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d007      	beq.n	8006ada <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8006ad2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8006ad4:	6878      	ldr	r0, [r7, #4]
 8006ad6:	f001 f86d 	bl	8007bb4 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8006ada:	68bb      	ldr	r3, [r7, #8]
 8006adc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d00c      	beq.n	8006afe <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d007      	beq.n	8006afe <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8006af6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8006af8:	6878      	ldr	r0, [r7, #4]
 8006afa:	f001 f865 	bl	8007bc8 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8006afe:	68bb      	ldr	r3, [r7, #8]
 8006b00:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d00c      	beq.n	8006b22 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d007      	beq.n	8006b22 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8006b1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8006b1c:	6878      	ldr	r0, [r7, #4]
 8006b1e:	f001 f85d 	bl	8007bdc <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006b22:	bf00      	nop
 8006b24:	3710      	adds	r7, #16
 8006b26:	46bd      	mov	sp, r7
 8006b28:	bd80      	pop	{r7, pc}
	...

08006b2c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b086      	sub	sp, #24
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	60f8      	str	r0, [r7, #12]
 8006b34:	60b9      	str	r1, [r7, #8]
 8006b36:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006b38:	2300      	movs	r3, #0
 8006b3a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006b42:	2b01      	cmp	r3, #1
 8006b44:	d101      	bne.n	8006b4a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006b46:	2302      	movs	r3, #2
 8006b48:	e0ff      	b.n	8006d4a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	2201      	movs	r2, #1
 8006b4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	2b14      	cmp	r3, #20
 8006b56:	f200 80f0 	bhi.w	8006d3a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006b5a:	a201      	add	r2, pc, #4	@ (adr r2, 8006b60 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006b5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b60:	08006bb5 	.word	0x08006bb5
 8006b64:	08006d3b 	.word	0x08006d3b
 8006b68:	08006d3b 	.word	0x08006d3b
 8006b6c:	08006d3b 	.word	0x08006d3b
 8006b70:	08006bf5 	.word	0x08006bf5
 8006b74:	08006d3b 	.word	0x08006d3b
 8006b78:	08006d3b 	.word	0x08006d3b
 8006b7c:	08006d3b 	.word	0x08006d3b
 8006b80:	08006c37 	.word	0x08006c37
 8006b84:	08006d3b 	.word	0x08006d3b
 8006b88:	08006d3b 	.word	0x08006d3b
 8006b8c:	08006d3b 	.word	0x08006d3b
 8006b90:	08006c77 	.word	0x08006c77
 8006b94:	08006d3b 	.word	0x08006d3b
 8006b98:	08006d3b 	.word	0x08006d3b
 8006b9c:	08006d3b 	.word	0x08006d3b
 8006ba0:	08006cb9 	.word	0x08006cb9
 8006ba4:	08006d3b 	.word	0x08006d3b
 8006ba8:	08006d3b 	.word	0x08006d3b
 8006bac:	08006d3b 	.word	0x08006d3b
 8006bb0:	08006cf9 	.word	0x08006cf9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	68b9      	ldr	r1, [r7, #8]
 8006bba:	4618      	mov	r0, r3
 8006bbc:	f000 fabc 	bl	8007138 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	699a      	ldr	r2, [r3, #24]
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f042 0208 	orr.w	r2, r2, #8
 8006bce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	699a      	ldr	r2, [r3, #24]
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f022 0204 	bic.w	r2, r2, #4
 8006bde:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	6999      	ldr	r1, [r3, #24]
 8006be6:	68bb      	ldr	r3, [r7, #8]
 8006be8:	691a      	ldr	r2, [r3, #16]
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	430a      	orrs	r2, r1
 8006bf0:	619a      	str	r2, [r3, #24]
      break;
 8006bf2:	e0a5      	b.n	8006d40 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	68b9      	ldr	r1, [r7, #8]
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	f000 fb36 	bl	800726c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	699a      	ldr	r2, [r3, #24]
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006c0e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	699a      	ldr	r2, [r3, #24]
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006c1e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	6999      	ldr	r1, [r3, #24]
 8006c26:	68bb      	ldr	r3, [r7, #8]
 8006c28:	691b      	ldr	r3, [r3, #16]
 8006c2a:	021a      	lsls	r2, r3, #8
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	430a      	orrs	r2, r1
 8006c32:	619a      	str	r2, [r3, #24]
      break;
 8006c34:	e084      	b.n	8006d40 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	68b9      	ldr	r1, [r7, #8]
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	f000 fba9 	bl	8007394 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	69da      	ldr	r2, [r3, #28]
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	f042 0208 	orr.w	r2, r2, #8
 8006c50:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	69da      	ldr	r2, [r3, #28]
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f022 0204 	bic.w	r2, r2, #4
 8006c60:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	69d9      	ldr	r1, [r3, #28]
 8006c68:	68bb      	ldr	r3, [r7, #8]
 8006c6a:	691a      	ldr	r2, [r3, #16]
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	430a      	orrs	r2, r1
 8006c72:	61da      	str	r2, [r3, #28]
      break;
 8006c74:	e064      	b.n	8006d40 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	68b9      	ldr	r1, [r7, #8]
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	f000 fc1b 	bl	80074b8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	69da      	ldr	r2, [r3, #28]
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006c90:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	69da      	ldr	r2, [r3, #28]
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006ca0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	69d9      	ldr	r1, [r3, #28]
 8006ca8:	68bb      	ldr	r3, [r7, #8]
 8006caa:	691b      	ldr	r3, [r3, #16]
 8006cac:	021a      	lsls	r2, r3, #8
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	430a      	orrs	r2, r1
 8006cb4:	61da      	str	r2, [r3, #28]
      break;
 8006cb6:	e043      	b.n	8006d40 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	68b9      	ldr	r1, [r7, #8]
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	f000 fc8e 	bl	80075e0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f042 0208 	orr.w	r2, r2, #8
 8006cd2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	f022 0204 	bic.w	r2, r2, #4
 8006ce2:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8006cea:	68bb      	ldr	r3, [r7, #8]
 8006cec:	691a      	ldr	r2, [r3, #16]
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	430a      	orrs	r2, r1
 8006cf4:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8006cf6:	e023      	b.n	8006d40 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	68b9      	ldr	r1, [r7, #8]
 8006cfe:	4618      	mov	r0, r3
 8006d00:	f000 fcd8 	bl	80076b4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006d12:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006d22:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8006d2a:	68bb      	ldr	r3, [r7, #8]
 8006d2c:	691b      	ldr	r3, [r3, #16]
 8006d2e:	021a      	lsls	r2, r3, #8
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	430a      	orrs	r2, r1
 8006d36:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8006d38:	e002      	b.n	8006d40 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006d3a:	2301      	movs	r3, #1
 8006d3c:	75fb      	strb	r3, [r7, #23]
      break;
 8006d3e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	2200      	movs	r2, #0
 8006d44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006d48:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	3718      	adds	r7, #24
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	bd80      	pop	{r7, pc}
 8006d52:	bf00      	nop

08006d54 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006d54:	b580      	push	{r7, lr}
 8006d56:	b084      	sub	sp, #16
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	6078      	str	r0, [r7, #4]
 8006d5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006d5e:	2300      	movs	r3, #0
 8006d60:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006d68:	2b01      	cmp	r3, #1
 8006d6a:	d101      	bne.n	8006d70 <HAL_TIM_ConfigClockSource+0x1c>
 8006d6c:	2302      	movs	r3, #2
 8006d6e:	e0f6      	b.n	8006f5e <HAL_TIM_ConfigClockSource+0x20a>
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2201      	movs	r2, #1
 8006d74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2202      	movs	r2, #2
 8006d7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	689b      	ldr	r3, [r3, #8]
 8006d86:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006d88:	68bb      	ldr	r3, [r7, #8]
 8006d8a:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8006d8e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006d92:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006d94:	68bb      	ldr	r3, [r7, #8]
 8006d96:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006d9a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	68ba      	ldr	r2, [r7, #8]
 8006da2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	4a6f      	ldr	r2, [pc, #444]	@ (8006f68 <HAL_TIM_ConfigClockSource+0x214>)
 8006daa:	4293      	cmp	r3, r2
 8006dac:	f000 80c1 	beq.w	8006f32 <HAL_TIM_ConfigClockSource+0x1de>
 8006db0:	4a6d      	ldr	r2, [pc, #436]	@ (8006f68 <HAL_TIM_ConfigClockSource+0x214>)
 8006db2:	4293      	cmp	r3, r2
 8006db4:	f200 80c6 	bhi.w	8006f44 <HAL_TIM_ConfigClockSource+0x1f0>
 8006db8:	4a6c      	ldr	r2, [pc, #432]	@ (8006f6c <HAL_TIM_ConfigClockSource+0x218>)
 8006dba:	4293      	cmp	r3, r2
 8006dbc:	f000 80b9 	beq.w	8006f32 <HAL_TIM_ConfigClockSource+0x1de>
 8006dc0:	4a6a      	ldr	r2, [pc, #424]	@ (8006f6c <HAL_TIM_ConfigClockSource+0x218>)
 8006dc2:	4293      	cmp	r3, r2
 8006dc4:	f200 80be 	bhi.w	8006f44 <HAL_TIM_ConfigClockSource+0x1f0>
 8006dc8:	4a69      	ldr	r2, [pc, #420]	@ (8006f70 <HAL_TIM_ConfigClockSource+0x21c>)
 8006dca:	4293      	cmp	r3, r2
 8006dcc:	f000 80b1 	beq.w	8006f32 <HAL_TIM_ConfigClockSource+0x1de>
 8006dd0:	4a67      	ldr	r2, [pc, #412]	@ (8006f70 <HAL_TIM_ConfigClockSource+0x21c>)
 8006dd2:	4293      	cmp	r3, r2
 8006dd4:	f200 80b6 	bhi.w	8006f44 <HAL_TIM_ConfigClockSource+0x1f0>
 8006dd8:	4a66      	ldr	r2, [pc, #408]	@ (8006f74 <HAL_TIM_ConfigClockSource+0x220>)
 8006dda:	4293      	cmp	r3, r2
 8006ddc:	f000 80a9 	beq.w	8006f32 <HAL_TIM_ConfigClockSource+0x1de>
 8006de0:	4a64      	ldr	r2, [pc, #400]	@ (8006f74 <HAL_TIM_ConfigClockSource+0x220>)
 8006de2:	4293      	cmp	r3, r2
 8006de4:	f200 80ae 	bhi.w	8006f44 <HAL_TIM_ConfigClockSource+0x1f0>
 8006de8:	4a63      	ldr	r2, [pc, #396]	@ (8006f78 <HAL_TIM_ConfigClockSource+0x224>)
 8006dea:	4293      	cmp	r3, r2
 8006dec:	f000 80a1 	beq.w	8006f32 <HAL_TIM_ConfigClockSource+0x1de>
 8006df0:	4a61      	ldr	r2, [pc, #388]	@ (8006f78 <HAL_TIM_ConfigClockSource+0x224>)
 8006df2:	4293      	cmp	r3, r2
 8006df4:	f200 80a6 	bhi.w	8006f44 <HAL_TIM_ConfigClockSource+0x1f0>
 8006df8:	4a60      	ldr	r2, [pc, #384]	@ (8006f7c <HAL_TIM_ConfigClockSource+0x228>)
 8006dfa:	4293      	cmp	r3, r2
 8006dfc:	f000 8099 	beq.w	8006f32 <HAL_TIM_ConfigClockSource+0x1de>
 8006e00:	4a5e      	ldr	r2, [pc, #376]	@ (8006f7c <HAL_TIM_ConfigClockSource+0x228>)
 8006e02:	4293      	cmp	r3, r2
 8006e04:	f200 809e 	bhi.w	8006f44 <HAL_TIM_ConfigClockSource+0x1f0>
 8006e08:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8006e0c:	f000 8091 	beq.w	8006f32 <HAL_TIM_ConfigClockSource+0x1de>
 8006e10:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8006e14:	f200 8096 	bhi.w	8006f44 <HAL_TIM_ConfigClockSource+0x1f0>
 8006e18:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006e1c:	f000 8089 	beq.w	8006f32 <HAL_TIM_ConfigClockSource+0x1de>
 8006e20:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006e24:	f200 808e 	bhi.w	8006f44 <HAL_TIM_ConfigClockSource+0x1f0>
 8006e28:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006e2c:	d03e      	beq.n	8006eac <HAL_TIM_ConfigClockSource+0x158>
 8006e2e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006e32:	f200 8087 	bhi.w	8006f44 <HAL_TIM_ConfigClockSource+0x1f0>
 8006e36:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006e3a:	f000 8086 	beq.w	8006f4a <HAL_TIM_ConfigClockSource+0x1f6>
 8006e3e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006e42:	d87f      	bhi.n	8006f44 <HAL_TIM_ConfigClockSource+0x1f0>
 8006e44:	2b70      	cmp	r3, #112	@ 0x70
 8006e46:	d01a      	beq.n	8006e7e <HAL_TIM_ConfigClockSource+0x12a>
 8006e48:	2b70      	cmp	r3, #112	@ 0x70
 8006e4a:	d87b      	bhi.n	8006f44 <HAL_TIM_ConfigClockSource+0x1f0>
 8006e4c:	2b60      	cmp	r3, #96	@ 0x60
 8006e4e:	d050      	beq.n	8006ef2 <HAL_TIM_ConfigClockSource+0x19e>
 8006e50:	2b60      	cmp	r3, #96	@ 0x60
 8006e52:	d877      	bhi.n	8006f44 <HAL_TIM_ConfigClockSource+0x1f0>
 8006e54:	2b50      	cmp	r3, #80	@ 0x50
 8006e56:	d03c      	beq.n	8006ed2 <HAL_TIM_ConfigClockSource+0x17e>
 8006e58:	2b50      	cmp	r3, #80	@ 0x50
 8006e5a:	d873      	bhi.n	8006f44 <HAL_TIM_ConfigClockSource+0x1f0>
 8006e5c:	2b40      	cmp	r3, #64	@ 0x40
 8006e5e:	d058      	beq.n	8006f12 <HAL_TIM_ConfigClockSource+0x1be>
 8006e60:	2b40      	cmp	r3, #64	@ 0x40
 8006e62:	d86f      	bhi.n	8006f44 <HAL_TIM_ConfigClockSource+0x1f0>
 8006e64:	2b30      	cmp	r3, #48	@ 0x30
 8006e66:	d064      	beq.n	8006f32 <HAL_TIM_ConfigClockSource+0x1de>
 8006e68:	2b30      	cmp	r3, #48	@ 0x30
 8006e6a:	d86b      	bhi.n	8006f44 <HAL_TIM_ConfigClockSource+0x1f0>
 8006e6c:	2b20      	cmp	r3, #32
 8006e6e:	d060      	beq.n	8006f32 <HAL_TIM_ConfigClockSource+0x1de>
 8006e70:	2b20      	cmp	r3, #32
 8006e72:	d867      	bhi.n	8006f44 <HAL_TIM_ConfigClockSource+0x1f0>
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d05c      	beq.n	8006f32 <HAL_TIM_ConfigClockSource+0x1de>
 8006e78:	2b10      	cmp	r3, #16
 8006e7a:	d05a      	beq.n	8006f32 <HAL_TIM_ConfigClockSource+0x1de>
 8006e7c:	e062      	b.n	8006f44 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006e86:	683b      	ldr	r3, [r7, #0]
 8006e88:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006e8e:	f000 fcf9 	bl	8007884 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	689b      	ldr	r3, [r3, #8]
 8006e98:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006e9a:	68bb      	ldr	r3, [r7, #8]
 8006e9c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006ea0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	68ba      	ldr	r2, [r7, #8]
 8006ea8:	609a      	str	r2, [r3, #8]
      break;
 8006eaa:	e04f      	b.n	8006f4c <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006eb0:	683b      	ldr	r3, [r7, #0]
 8006eb2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006eb4:	683b      	ldr	r3, [r7, #0]
 8006eb6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006ebc:	f000 fce2 	bl	8007884 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	689a      	ldr	r2, [r3, #8]
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006ece:	609a      	str	r2, [r3, #8]
      break;
 8006ed0:	e03c      	b.n	8006f4c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006ed6:	683b      	ldr	r3, [r7, #0]
 8006ed8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006eda:	683b      	ldr	r3, [r7, #0]
 8006edc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006ede:	461a      	mov	r2, r3
 8006ee0:	f000 fc54 	bl	800778c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	2150      	movs	r1, #80	@ 0x50
 8006eea:	4618      	mov	r0, r3
 8006eec:	f000 fcad 	bl	800784a <TIM_ITRx_SetConfig>
      break;
 8006ef0:	e02c      	b.n	8006f4c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006ef6:	683b      	ldr	r3, [r7, #0]
 8006ef8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006efa:	683b      	ldr	r3, [r7, #0]
 8006efc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006efe:	461a      	mov	r2, r3
 8006f00:	f000 fc73 	bl	80077ea <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	2160      	movs	r1, #96	@ 0x60
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	f000 fc9d 	bl	800784a <TIM_ITRx_SetConfig>
      break;
 8006f10:	e01c      	b.n	8006f4c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006f16:	683b      	ldr	r3, [r7, #0]
 8006f18:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006f1a:	683b      	ldr	r3, [r7, #0]
 8006f1c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006f1e:	461a      	mov	r2, r3
 8006f20:	f000 fc34 	bl	800778c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	2140      	movs	r1, #64	@ 0x40
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	f000 fc8d 	bl	800784a <TIM_ITRx_SetConfig>
      break;
 8006f30:	e00c      	b.n	8006f4c <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681a      	ldr	r2, [r3, #0]
 8006f36:	683b      	ldr	r3, [r7, #0]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	4619      	mov	r1, r3
 8006f3c:	4610      	mov	r0, r2
 8006f3e:	f000 fc84 	bl	800784a <TIM_ITRx_SetConfig>
      break;
 8006f42:	e003      	b.n	8006f4c <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8006f44:	2301      	movs	r3, #1
 8006f46:	73fb      	strb	r3, [r7, #15]
      break;
 8006f48:	e000      	b.n	8006f4c <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8006f4a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2201      	movs	r2, #1
 8006f50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	2200      	movs	r2, #0
 8006f58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006f5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f5e:	4618      	mov	r0, r3
 8006f60:	3710      	adds	r7, #16
 8006f62:	46bd      	mov	sp, r7
 8006f64:	bd80      	pop	{r7, pc}
 8006f66:	bf00      	nop
 8006f68:	00100070 	.word	0x00100070
 8006f6c:	00100060 	.word	0x00100060
 8006f70:	00100050 	.word	0x00100050
 8006f74:	00100040 	.word	0x00100040
 8006f78:	00100030 	.word	0x00100030
 8006f7c:	00100020 	.word	0x00100020

08006f80 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006f80:	b480      	push	{r7}
 8006f82:	b083      	sub	sp, #12
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006f88:	bf00      	nop
 8006f8a:	370c      	adds	r7, #12
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f92:	4770      	bx	lr

08006f94 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006f94:	b480      	push	{r7}
 8006f96:	b083      	sub	sp, #12
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006f9c:	bf00      	nop
 8006f9e:	370c      	adds	r7, #12
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa6:	4770      	bx	lr

08006fa8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006fa8:	b480      	push	{r7}
 8006faa:	b083      	sub	sp, #12
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006fb0:	bf00      	nop
 8006fb2:	370c      	adds	r7, #12
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fba:	4770      	bx	lr

08006fbc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006fbc:	b480      	push	{r7}
 8006fbe:	b083      	sub	sp, #12
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006fc4:	bf00      	nop
 8006fc6:	370c      	adds	r7, #12
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fce:	4770      	bx	lr

08006fd0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006fd0:	b480      	push	{r7}
 8006fd2:	b085      	sub	sp, #20
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	6078      	str	r0, [r7, #4]
 8006fd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	4a4c      	ldr	r2, [pc, #304]	@ (8007114 <TIM_Base_SetConfig+0x144>)
 8006fe4:	4293      	cmp	r3, r2
 8006fe6:	d017      	beq.n	8007018 <TIM_Base_SetConfig+0x48>
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006fee:	d013      	beq.n	8007018 <TIM_Base_SetConfig+0x48>
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	4a49      	ldr	r2, [pc, #292]	@ (8007118 <TIM_Base_SetConfig+0x148>)
 8006ff4:	4293      	cmp	r3, r2
 8006ff6:	d00f      	beq.n	8007018 <TIM_Base_SetConfig+0x48>
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	4a48      	ldr	r2, [pc, #288]	@ (800711c <TIM_Base_SetConfig+0x14c>)
 8006ffc:	4293      	cmp	r3, r2
 8006ffe:	d00b      	beq.n	8007018 <TIM_Base_SetConfig+0x48>
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	4a47      	ldr	r2, [pc, #284]	@ (8007120 <TIM_Base_SetConfig+0x150>)
 8007004:	4293      	cmp	r3, r2
 8007006:	d007      	beq.n	8007018 <TIM_Base_SetConfig+0x48>
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	4a46      	ldr	r2, [pc, #280]	@ (8007124 <TIM_Base_SetConfig+0x154>)
 800700c:	4293      	cmp	r3, r2
 800700e:	d003      	beq.n	8007018 <TIM_Base_SetConfig+0x48>
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	4a45      	ldr	r2, [pc, #276]	@ (8007128 <TIM_Base_SetConfig+0x158>)
 8007014:	4293      	cmp	r3, r2
 8007016:	d108      	bne.n	800702a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800701e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	685b      	ldr	r3, [r3, #4]
 8007024:	68fa      	ldr	r2, [r7, #12]
 8007026:	4313      	orrs	r3, r2
 8007028:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	4a39      	ldr	r2, [pc, #228]	@ (8007114 <TIM_Base_SetConfig+0x144>)
 800702e:	4293      	cmp	r3, r2
 8007030:	d023      	beq.n	800707a <TIM_Base_SetConfig+0xaa>
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007038:	d01f      	beq.n	800707a <TIM_Base_SetConfig+0xaa>
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	4a36      	ldr	r2, [pc, #216]	@ (8007118 <TIM_Base_SetConfig+0x148>)
 800703e:	4293      	cmp	r3, r2
 8007040:	d01b      	beq.n	800707a <TIM_Base_SetConfig+0xaa>
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	4a35      	ldr	r2, [pc, #212]	@ (800711c <TIM_Base_SetConfig+0x14c>)
 8007046:	4293      	cmp	r3, r2
 8007048:	d017      	beq.n	800707a <TIM_Base_SetConfig+0xaa>
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	4a34      	ldr	r2, [pc, #208]	@ (8007120 <TIM_Base_SetConfig+0x150>)
 800704e:	4293      	cmp	r3, r2
 8007050:	d013      	beq.n	800707a <TIM_Base_SetConfig+0xaa>
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	4a33      	ldr	r2, [pc, #204]	@ (8007124 <TIM_Base_SetConfig+0x154>)
 8007056:	4293      	cmp	r3, r2
 8007058:	d00f      	beq.n	800707a <TIM_Base_SetConfig+0xaa>
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	4a33      	ldr	r2, [pc, #204]	@ (800712c <TIM_Base_SetConfig+0x15c>)
 800705e:	4293      	cmp	r3, r2
 8007060:	d00b      	beq.n	800707a <TIM_Base_SetConfig+0xaa>
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	4a32      	ldr	r2, [pc, #200]	@ (8007130 <TIM_Base_SetConfig+0x160>)
 8007066:	4293      	cmp	r3, r2
 8007068:	d007      	beq.n	800707a <TIM_Base_SetConfig+0xaa>
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	4a31      	ldr	r2, [pc, #196]	@ (8007134 <TIM_Base_SetConfig+0x164>)
 800706e:	4293      	cmp	r3, r2
 8007070:	d003      	beq.n	800707a <TIM_Base_SetConfig+0xaa>
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	4a2c      	ldr	r2, [pc, #176]	@ (8007128 <TIM_Base_SetConfig+0x158>)
 8007076:	4293      	cmp	r3, r2
 8007078:	d108      	bne.n	800708c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007080:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007082:	683b      	ldr	r3, [r7, #0]
 8007084:	68db      	ldr	r3, [r3, #12]
 8007086:	68fa      	ldr	r2, [r7, #12]
 8007088:	4313      	orrs	r3, r2
 800708a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007092:	683b      	ldr	r3, [r7, #0]
 8007094:	695b      	ldr	r3, [r3, #20]
 8007096:	4313      	orrs	r3, r2
 8007098:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	68fa      	ldr	r2, [r7, #12]
 800709e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80070a0:	683b      	ldr	r3, [r7, #0]
 80070a2:	689a      	ldr	r2, [r3, #8]
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80070a8:	683b      	ldr	r3, [r7, #0]
 80070aa:	681a      	ldr	r2, [r3, #0]
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	4a18      	ldr	r2, [pc, #96]	@ (8007114 <TIM_Base_SetConfig+0x144>)
 80070b4:	4293      	cmp	r3, r2
 80070b6:	d013      	beq.n	80070e0 <TIM_Base_SetConfig+0x110>
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	4a1a      	ldr	r2, [pc, #104]	@ (8007124 <TIM_Base_SetConfig+0x154>)
 80070bc:	4293      	cmp	r3, r2
 80070be:	d00f      	beq.n	80070e0 <TIM_Base_SetConfig+0x110>
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	4a1a      	ldr	r2, [pc, #104]	@ (800712c <TIM_Base_SetConfig+0x15c>)
 80070c4:	4293      	cmp	r3, r2
 80070c6:	d00b      	beq.n	80070e0 <TIM_Base_SetConfig+0x110>
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	4a19      	ldr	r2, [pc, #100]	@ (8007130 <TIM_Base_SetConfig+0x160>)
 80070cc:	4293      	cmp	r3, r2
 80070ce:	d007      	beq.n	80070e0 <TIM_Base_SetConfig+0x110>
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	4a18      	ldr	r2, [pc, #96]	@ (8007134 <TIM_Base_SetConfig+0x164>)
 80070d4:	4293      	cmp	r3, r2
 80070d6:	d003      	beq.n	80070e0 <TIM_Base_SetConfig+0x110>
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	4a13      	ldr	r2, [pc, #76]	@ (8007128 <TIM_Base_SetConfig+0x158>)
 80070dc:	4293      	cmp	r3, r2
 80070de:	d103      	bne.n	80070e8 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80070e0:	683b      	ldr	r3, [r7, #0]
 80070e2:	691a      	ldr	r2, [r3, #16]
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2201      	movs	r2, #1
 80070ec:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	691b      	ldr	r3, [r3, #16]
 80070f2:	f003 0301 	and.w	r3, r3, #1
 80070f6:	2b01      	cmp	r3, #1
 80070f8:	d105      	bne.n	8007106 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	691b      	ldr	r3, [r3, #16]
 80070fe:	f023 0201 	bic.w	r2, r3, #1
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	611a      	str	r2, [r3, #16]
  }
}
 8007106:	bf00      	nop
 8007108:	3714      	adds	r7, #20
 800710a:	46bd      	mov	sp, r7
 800710c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007110:	4770      	bx	lr
 8007112:	bf00      	nop
 8007114:	40012c00 	.word	0x40012c00
 8007118:	40000400 	.word	0x40000400
 800711c:	40000800 	.word	0x40000800
 8007120:	40000c00 	.word	0x40000c00
 8007124:	40013400 	.word	0x40013400
 8007128:	40015000 	.word	0x40015000
 800712c:	40014000 	.word	0x40014000
 8007130:	40014400 	.word	0x40014400
 8007134:	40014800 	.word	0x40014800

08007138 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007138:	b480      	push	{r7}
 800713a:	b087      	sub	sp, #28
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
 8007140:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	6a1b      	ldr	r3, [r3, #32]
 8007146:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	6a1b      	ldr	r3, [r3, #32]
 800714c:	f023 0201 	bic.w	r2, r3, #1
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	685b      	ldr	r3, [r3, #4]
 8007158:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	699b      	ldr	r3, [r3, #24]
 800715e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007166:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800716a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	f023 0303 	bic.w	r3, r3, #3
 8007172:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	68fa      	ldr	r2, [r7, #12]
 800717a:	4313      	orrs	r3, r2
 800717c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800717e:	697b      	ldr	r3, [r7, #20]
 8007180:	f023 0302 	bic.w	r3, r3, #2
 8007184:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007186:	683b      	ldr	r3, [r7, #0]
 8007188:	689b      	ldr	r3, [r3, #8]
 800718a:	697a      	ldr	r2, [r7, #20]
 800718c:	4313      	orrs	r3, r2
 800718e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	4a30      	ldr	r2, [pc, #192]	@ (8007254 <TIM_OC1_SetConfig+0x11c>)
 8007194:	4293      	cmp	r3, r2
 8007196:	d013      	beq.n	80071c0 <TIM_OC1_SetConfig+0x88>
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	4a2f      	ldr	r2, [pc, #188]	@ (8007258 <TIM_OC1_SetConfig+0x120>)
 800719c:	4293      	cmp	r3, r2
 800719e:	d00f      	beq.n	80071c0 <TIM_OC1_SetConfig+0x88>
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	4a2e      	ldr	r2, [pc, #184]	@ (800725c <TIM_OC1_SetConfig+0x124>)
 80071a4:	4293      	cmp	r3, r2
 80071a6:	d00b      	beq.n	80071c0 <TIM_OC1_SetConfig+0x88>
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	4a2d      	ldr	r2, [pc, #180]	@ (8007260 <TIM_OC1_SetConfig+0x128>)
 80071ac:	4293      	cmp	r3, r2
 80071ae:	d007      	beq.n	80071c0 <TIM_OC1_SetConfig+0x88>
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	4a2c      	ldr	r2, [pc, #176]	@ (8007264 <TIM_OC1_SetConfig+0x12c>)
 80071b4:	4293      	cmp	r3, r2
 80071b6:	d003      	beq.n	80071c0 <TIM_OC1_SetConfig+0x88>
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	4a2b      	ldr	r2, [pc, #172]	@ (8007268 <TIM_OC1_SetConfig+0x130>)
 80071bc:	4293      	cmp	r3, r2
 80071be:	d10c      	bne.n	80071da <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80071c0:	697b      	ldr	r3, [r7, #20]
 80071c2:	f023 0308 	bic.w	r3, r3, #8
 80071c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80071c8:	683b      	ldr	r3, [r7, #0]
 80071ca:	68db      	ldr	r3, [r3, #12]
 80071cc:	697a      	ldr	r2, [r7, #20]
 80071ce:	4313      	orrs	r3, r2
 80071d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80071d2:	697b      	ldr	r3, [r7, #20]
 80071d4:	f023 0304 	bic.w	r3, r3, #4
 80071d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	4a1d      	ldr	r2, [pc, #116]	@ (8007254 <TIM_OC1_SetConfig+0x11c>)
 80071de:	4293      	cmp	r3, r2
 80071e0:	d013      	beq.n	800720a <TIM_OC1_SetConfig+0xd2>
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	4a1c      	ldr	r2, [pc, #112]	@ (8007258 <TIM_OC1_SetConfig+0x120>)
 80071e6:	4293      	cmp	r3, r2
 80071e8:	d00f      	beq.n	800720a <TIM_OC1_SetConfig+0xd2>
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	4a1b      	ldr	r2, [pc, #108]	@ (800725c <TIM_OC1_SetConfig+0x124>)
 80071ee:	4293      	cmp	r3, r2
 80071f0:	d00b      	beq.n	800720a <TIM_OC1_SetConfig+0xd2>
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	4a1a      	ldr	r2, [pc, #104]	@ (8007260 <TIM_OC1_SetConfig+0x128>)
 80071f6:	4293      	cmp	r3, r2
 80071f8:	d007      	beq.n	800720a <TIM_OC1_SetConfig+0xd2>
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	4a19      	ldr	r2, [pc, #100]	@ (8007264 <TIM_OC1_SetConfig+0x12c>)
 80071fe:	4293      	cmp	r3, r2
 8007200:	d003      	beq.n	800720a <TIM_OC1_SetConfig+0xd2>
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	4a18      	ldr	r2, [pc, #96]	@ (8007268 <TIM_OC1_SetConfig+0x130>)
 8007206:	4293      	cmp	r3, r2
 8007208:	d111      	bne.n	800722e <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800720a:	693b      	ldr	r3, [r7, #16]
 800720c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007210:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007212:	693b      	ldr	r3, [r7, #16]
 8007214:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007218:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800721a:	683b      	ldr	r3, [r7, #0]
 800721c:	695b      	ldr	r3, [r3, #20]
 800721e:	693a      	ldr	r2, [r7, #16]
 8007220:	4313      	orrs	r3, r2
 8007222:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007224:	683b      	ldr	r3, [r7, #0]
 8007226:	699b      	ldr	r3, [r3, #24]
 8007228:	693a      	ldr	r2, [r7, #16]
 800722a:	4313      	orrs	r3, r2
 800722c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	693a      	ldr	r2, [r7, #16]
 8007232:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	68fa      	ldr	r2, [r7, #12]
 8007238:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800723a:	683b      	ldr	r3, [r7, #0]
 800723c:	685a      	ldr	r2, [r3, #4]
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	697a      	ldr	r2, [r7, #20]
 8007246:	621a      	str	r2, [r3, #32]
}
 8007248:	bf00      	nop
 800724a:	371c      	adds	r7, #28
 800724c:	46bd      	mov	sp, r7
 800724e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007252:	4770      	bx	lr
 8007254:	40012c00 	.word	0x40012c00
 8007258:	40013400 	.word	0x40013400
 800725c:	40014000 	.word	0x40014000
 8007260:	40014400 	.word	0x40014400
 8007264:	40014800 	.word	0x40014800
 8007268:	40015000 	.word	0x40015000

0800726c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800726c:	b480      	push	{r7}
 800726e:	b087      	sub	sp, #28
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]
 8007274:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	6a1b      	ldr	r3, [r3, #32]
 800727a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	6a1b      	ldr	r3, [r3, #32]
 8007280:	f023 0210 	bic.w	r2, r3, #16
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	685b      	ldr	r3, [r3, #4]
 800728c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	699b      	ldr	r3, [r3, #24]
 8007292:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800729a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800729e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80072a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80072a8:	683b      	ldr	r3, [r7, #0]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	021b      	lsls	r3, r3, #8
 80072ae:	68fa      	ldr	r2, [r7, #12]
 80072b0:	4313      	orrs	r3, r2
 80072b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80072b4:	697b      	ldr	r3, [r7, #20]
 80072b6:	f023 0320 	bic.w	r3, r3, #32
 80072ba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80072bc:	683b      	ldr	r3, [r7, #0]
 80072be:	689b      	ldr	r3, [r3, #8]
 80072c0:	011b      	lsls	r3, r3, #4
 80072c2:	697a      	ldr	r2, [r7, #20]
 80072c4:	4313      	orrs	r3, r2
 80072c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	4a2c      	ldr	r2, [pc, #176]	@ (800737c <TIM_OC2_SetConfig+0x110>)
 80072cc:	4293      	cmp	r3, r2
 80072ce:	d007      	beq.n	80072e0 <TIM_OC2_SetConfig+0x74>
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	4a2b      	ldr	r2, [pc, #172]	@ (8007380 <TIM_OC2_SetConfig+0x114>)
 80072d4:	4293      	cmp	r3, r2
 80072d6:	d003      	beq.n	80072e0 <TIM_OC2_SetConfig+0x74>
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	4a2a      	ldr	r2, [pc, #168]	@ (8007384 <TIM_OC2_SetConfig+0x118>)
 80072dc:	4293      	cmp	r3, r2
 80072de:	d10d      	bne.n	80072fc <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80072e0:	697b      	ldr	r3, [r7, #20]
 80072e2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80072e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80072e8:	683b      	ldr	r3, [r7, #0]
 80072ea:	68db      	ldr	r3, [r3, #12]
 80072ec:	011b      	lsls	r3, r3, #4
 80072ee:	697a      	ldr	r2, [r7, #20]
 80072f0:	4313      	orrs	r3, r2
 80072f2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80072f4:	697b      	ldr	r3, [r7, #20]
 80072f6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80072fa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	4a1f      	ldr	r2, [pc, #124]	@ (800737c <TIM_OC2_SetConfig+0x110>)
 8007300:	4293      	cmp	r3, r2
 8007302:	d013      	beq.n	800732c <TIM_OC2_SetConfig+0xc0>
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	4a1e      	ldr	r2, [pc, #120]	@ (8007380 <TIM_OC2_SetConfig+0x114>)
 8007308:	4293      	cmp	r3, r2
 800730a:	d00f      	beq.n	800732c <TIM_OC2_SetConfig+0xc0>
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	4a1e      	ldr	r2, [pc, #120]	@ (8007388 <TIM_OC2_SetConfig+0x11c>)
 8007310:	4293      	cmp	r3, r2
 8007312:	d00b      	beq.n	800732c <TIM_OC2_SetConfig+0xc0>
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	4a1d      	ldr	r2, [pc, #116]	@ (800738c <TIM_OC2_SetConfig+0x120>)
 8007318:	4293      	cmp	r3, r2
 800731a:	d007      	beq.n	800732c <TIM_OC2_SetConfig+0xc0>
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	4a1c      	ldr	r2, [pc, #112]	@ (8007390 <TIM_OC2_SetConfig+0x124>)
 8007320:	4293      	cmp	r3, r2
 8007322:	d003      	beq.n	800732c <TIM_OC2_SetConfig+0xc0>
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	4a17      	ldr	r2, [pc, #92]	@ (8007384 <TIM_OC2_SetConfig+0x118>)
 8007328:	4293      	cmp	r3, r2
 800732a:	d113      	bne.n	8007354 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800732c:	693b      	ldr	r3, [r7, #16]
 800732e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007332:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007334:	693b      	ldr	r3, [r7, #16]
 8007336:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800733a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800733c:	683b      	ldr	r3, [r7, #0]
 800733e:	695b      	ldr	r3, [r3, #20]
 8007340:	009b      	lsls	r3, r3, #2
 8007342:	693a      	ldr	r2, [r7, #16]
 8007344:	4313      	orrs	r3, r2
 8007346:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	699b      	ldr	r3, [r3, #24]
 800734c:	009b      	lsls	r3, r3, #2
 800734e:	693a      	ldr	r2, [r7, #16]
 8007350:	4313      	orrs	r3, r2
 8007352:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	693a      	ldr	r2, [r7, #16]
 8007358:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	68fa      	ldr	r2, [r7, #12]
 800735e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007360:	683b      	ldr	r3, [r7, #0]
 8007362:	685a      	ldr	r2, [r3, #4]
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	697a      	ldr	r2, [r7, #20]
 800736c:	621a      	str	r2, [r3, #32]
}
 800736e:	bf00      	nop
 8007370:	371c      	adds	r7, #28
 8007372:	46bd      	mov	sp, r7
 8007374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007378:	4770      	bx	lr
 800737a:	bf00      	nop
 800737c:	40012c00 	.word	0x40012c00
 8007380:	40013400 	.word	0x40013400
 8007384:	40015000 	.word	0x40015000
 8007388:	40014000 	.word	0x40014000
 800738c:	40014400 	.word	0x40014400
 8007390:	40014800 	.word	0x40014800

08007394 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007394:	b480      	push	{r7}
 8007396:	b087      	sub	sp, #28
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
 800739c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	6a1b      	ldr	r3, [r3, #32]
 80073a2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	6a1b      	ldr	r3, [r3, #32]
 80073a8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	685b      	ldr	r3, [r3, #4]
 80073b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	69db      	ldr	r3, [r3, #28]
 80073ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80073c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80073c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	f023 0303 	bic.w	r3, r3, #3
 80073ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80073d0:	683b      	ldr	r3, [r7, #0]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	68fa      	ldr	r2, [r7, #12]
 80073d6:	4313      	orrs	r3, r2
 80073d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80073da:	697b      	ldr	r3, [r7, #20]
 80073dc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80073e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80073e2:	683b      	ldr	r3, [r7, #0]
 80073e4:	689b      	ldr	r3, [r3, #8]
 80073e6:	021b      	lsls	r3, r3, #8
 80073e8:	697a      	ldr	r2, [r7, #20]
 80073ea:	4313      	orrs	r3, r2
 80073ec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	4a2b      	ldr	r2, [pc, #172]	@ (80074a0 <TIM_OC3_SetConfig+0x10c>)
 80073f2:	4293      	cmp	r3, r2
 80073f4:	d007      	beq.n	8007406 <TIM_OC3_SetConfig+0x72>
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	4a2a      	ldr	r2, [pc, #168]	@ (80074a4 <TIM_OC3_SetConfig+0x110>)
 80073fa:	4293      	cmp	r3, r2
 80073fc:	d003      	beq.n	8007406 <TIM_OC3_SetConfig+0x72>
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	4a29      	ldr	r2, [pc, #164]	@ (80074a8 <TIM_OC3_SetConfig+0x114>)
 8007402:	4293      	cmp	r3, r2
 8007404:	d10d      	bne.n	8007422 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007406:	697b      	ldr	r3, [r7, #20]
 8007408:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800740c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800740e:	683b      	ldr	r3, [r7, #0]
 8007410:	68db      	ldr	r3, [r3, #12]
 8007412:	021b      	lsls	r3, r3, #8
 8007414:	697a      	ldr	r2, [r7, #20]
 8007416:	4313      	orrs	r3, r2
 8007418:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800741a:	697b      	ldr	r3, [r7, #20]
 800741c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007420:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	4a1e      	ldr	r2, [pc, #120]	@ (80074a0 <TIM_OC3_SetConfig+0x10c>)
 8007426:	4293      	cmp	r3, r2
 8007428:	d013      	beq.n	8007452 <TIM_OC3_SetConfig+0xbe>
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	4a1d      	ldr	r2, [pc, #116]	@ (80074a4 <TIM_OC3_SetConfig+0x110>)
 800742e:	4293      	cmp	r3, r2
 8007430:	d00f      	beq.n	8007452 <TIM_OC3_SetConfig+0xbe>
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	4a1d      	ldr	r2, [pc, #116]	@ (80074ac <TIM_OC3_SetConfig+0x118>)
 8007436:	4293      	cmp	r3, r2
 8007438:	d00b      	beq.n	8007452 <TIM_OC3_SetConfig+0xbe>
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	4a1c      	ldr	r2, [pc, #112]	@ (80074b0 <TIM_OC3_SetConfig+0x11c>)
 800743e:	4293      	cmp	r3, r2
 8007440:	d007      	beq.n	8007452 <TIM_OC3_SetConfig+0xbe>
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	4a1b      	ldr	r2, [pc, #108]	@ (80074b4 <TIM_OC3_SetConfig+0x120>)
 8007446:	4293      	cmp	r3, r2
 8007448:	d003      	beq.n	8007452 <TIM_OC3_SetConfig+0xbe>
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	4a16      	ldr	r2, [pc, #88]	@ (80074a8 <TIM_OC3_SetConfig+0x114>)
 800744e:	4293      	cmp	r3, r2
 8007450:	d113      	bne.n	800747a <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007452:	693b      	ldr	r3, [r7, #16]
 8007454:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007458:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800745a:	693b      	ldr	r3, [r7, #16]
 800745c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007460:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007462:	683b      	ldr	r3, [r7, #0]
 8007464:	695b      	ldr	r3, [r3, #20]
 8007466:	011b      	lsls	r3, r3, #4
 8007468:	693a      	ldr	r2, [r7, #16]
 800746a:	4313      	orrs	r3, r2
 800746c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800746e:	683b      	ldr	r3, [r7, #0]
 8007470:	699b      	ldr	r3, [r3, #24]
 8007472:	011b      	lsls	r3, r3, #4
 8007474:	693a      	ldr	r2, [r7, #16]
 8007476:	4313      	orrs	r3, r2
 8007478:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	693a      	ldr	r2, [r7, #16]
 800747e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	68fa      	ldr	r2, [r7, #12]
 8007484:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	685a      	ldr	r2, [r3, #4]
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	697a      	ldr	r2, [r7, #20]
 8007492:	621a      	str	r2, [r3, #32]
}
 8007494:	bf00      	nop
 8007496:	371c      	adds	r7, #28
 8007498:	46bd      	mov	sp, r7
 800749a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749e:	4770      	bx	lr
 80074a0:	40012c00 	.word	0x40012c00
 80074a4:	40013400 	.word	0x40013400
 80074a8:	40015000 	.word	0x40015000
 80074ac:	40014000 	.word	0x40014000
 80074b0:	40014400 	.word	0x40014400
 80074b4:	40014800 	.word	0x40014800

080074b8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80074b8:	b480      	push	{r7}
 80074ba:	b087      	sub	sp, #28
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
 80074c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	6a1b      	ldr	r3, [r3, #32]
 80074c6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	6a1b      	ldr	r3, [r3, #32]
 80074cc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	685b      	ldr	r3, [r3, #4]
 80074d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	69db      	ldr	r3, [r3, #28]
 80074de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80074e6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80074ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80074f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80074f4:	683b      	ldr	r3, [r7, #0]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	021b      	lsls	r3, r3, #8
 80074fa:	68fa      	ldr	r2, [r7, #12]
 80074fc:	4313      	orrs	r3, r2
 80074fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007500:	697b      	ldr	r3, [r7, #20]
 8007502:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007506:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007508:	683b      	ldr	r3, [r7, #0]
 800750a:	689b      	ldr	r3, [r3, #8]
 800750c:	031b      	lsls	r3, r3, #12
 800750e:	697a      	ldr	r2, [r7, #20]
 8007510:	4313      	orrs	r3, r2
 8007512:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	4a2c      	ldr	r2, [pc, #176]	@ (80075c8 <TIM_OC4_SetConfig+0x110>)
 8007518:	4293      	cmp	r3, r2
 800751a:	d007      	beq.n	800752c <TIM_OC4_SetConfig+0x74>
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	4a2b      	ldr	r2, [pc, #172]	@ (80075cc <TIM_OC4_SetConfig+0x114>)
 8007520:	4293      	cmp	r3, r2
 8007522:	d003      	beq.n	800752c <TIM_OC4_SetConfig+0x74>
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	4a2a      	ldr	r2, [pc, #168]	@ (80075d0 <TIM_OC4_SetConfig+0x118>)
 8007528:	4293      	cmp	r3, r2
 800752a:	d10d      	bne.n	8007548 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800752c:	697b      	ldr	r3, [r7, #20]
 800752e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007532:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8007534:	683b      	ldr	r3, [r7, #0]
 8007536:	68db      	ldr	r3, [r3, #12]
 8007538:	031b      	lsls	r3, r3, #12
 800753a:	697a      	ldr	r2, [r7, #20]
 800753c:	4313      	orrs	r3, r2
 800753e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8007540:	697b      	ldr	r3, [r7, #20]
 8007542:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007546:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	4a1f      	ldr	r2, [pc, #124]	@ (80075c8 <TIM_OC4_SetConfig+0x110>)
 800754c:	4293      	cmp	r3, r2
 800754e:	d013      	beq.n	8007578 <TIM_OC4_SetConfig+0xc0>
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	4a1e      	ldr	r2, [pc, #120]	@ (80075cc <TIM_OC4_SetConfig+0x114>)
 8007554:	4293      	cmp	r3, r2
 8007556:	d00f      	beq.n	8007578 <TIM_OC4_SetConfig+0xc0>
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	4a1e      	ldr	r2, [pc, #120]	@ (80075d4 <TIM_OC4_SetConfig+0x11c>)
 800755c:	4293      	cmp	r3, r2
 800755e:	d00b      	beq.n	8007578 <TIM_OC4_SetConfig+0xc0>
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	4a1d      	ldr	r2, [pc, #116]	@ (80075d8 <TIM_OC4_SetConfig+0x120>)
 8007564:	4293      	cmp	r3, r2
 8007566:	d007      	beq.n	8007578 <TIM_OC4_SetConfig+0xc0>
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	4a1c      	ldr	r2, [pc, #112]	@ (80075dc <TIM_OC4_SetConfig+0x124>)
 800756c:	4293      	cmp	r3, r2
 800756e:	d003      	beq.n	8007578 <TIM_OC4_SetConfig+0xc0>
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	4a17      	ldr	r2, [pc, #92]	@ (80075d0 <TIM_OC4_SetConfig+0x118>)
 8007574:	4293      	cmp	r3, r2
 8007576:	d113      	bne.n	80075a0 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007578:	693b      	ldr	r3, [r7, #16]
 800757a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800757e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8007580:	693b      	ldr	r3, [r7, #16]
 8007582:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007586:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007588:	683b      	ldr	r3, [r7, #0]
 800758a:	695b      	ldr	r3, [r3, #20]
 800758c:	019b      	lsls	r3, r3, #6
 800758e:	693a      	ldr	r2, [r7, #16]
 8007590:	4313      	orrs	r3, r2
 8007592:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8007594:	683b      	ldr	r3, [r7, #0]
 8007596:	699b      	ldr	r3, [r3, #24]
 8007598:	019b      	lsls	r3, r3, #6
 800759a:	693a      	ldr	r2, [r7, #16]
 800759c:	4313      	orrs	r3, r2
 800759e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	693a      	ldr	r2, [r7, #16]
 80075a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	68fa      	ldr	r2, [r7, #12]
 80075aa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80075ac:	683b      	ldr	r3, [r7, #0]
 80075ae:	685a      	ldr	r2, [r3, #4]
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	697a      	ldr	r2, [r7, #20]
 80075b8:	621a      	str	r2, [r3, #32]
}
 80075ba:	bf00      	nop
 80075bc:	371c      	adds	r7, #28
 80075be:	46bd      	mov	sp, r7
 80075c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c4:	4770      	bx	lr
 80075c6:	bf00      	nop
 80075c8:	40012c00 	.word	0x40012c00
 80075cc:	40013400 	.word	0x40013400
 80075d0:	40015000 	.word	0x40015000
 80075d4:	40014000 	.word	0x40014000
 80075d8:	40014400 	.word	0x40014400
 80075dc:	40014800 	.word	0x40014800

080075e0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80075e0:	b480      	push	{r7}
 80075e2:	b087      	sub	sp, #28
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	6078      	str	r0, [r7, #4]
 80075e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	6a1b      	ldr	r3, [r3, #32]
 80075ee:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	6a1b      	ldr	r3, [r3, #32]
 80075f4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	685b      	ldr	r3, [r3, #4]
 8007600:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007606:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800760e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007612:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007614:	683b      	ldr	r3, [r7, #0]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	68fa      	ldr	r2, [r7, #12]
 800761a:	4313      	orrs	r3, r2
 800761c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800761e:	693b      	ldr	r3, [r7, #16]
 8007620:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8007624:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007626:	683b      	ldr	r3, [r7, #0]
 8007628:	689b      	ldr	r3, [r3, #8]
 800762a:	041b      	lsls	r3, r3, #16
 800762c:	693a      	ldr	r2, [r7, #16]
 800762e:	4313      	orrs	r3, r2
 8007630:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	4a19      	ldr	r2, [pc, #100]	@ (800769c <TIM_OC5_SetConfig+0xbc>)
 8007636:	4293      	cmp	r3, r2
 8007638:	d013      	beq.n	8007662 <TIM_OC5_SetConfig+0x82>
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	4a18      	ldr	r2, [pc, #96]	@ (80076a0 <TIM_OC5_SetConfig+0xc0>)
 800763e:	4293      	cmp	r3, r2
 8007640:	d00f      	beq.n	8007662 <TIM_OC5_SetConfig+0x82>
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	4a17      	ldr	r2, [pc, #92]	@ (80076a4 <TIM_OC5_SetConfig+0xc4>)
 8007646:	4293      	cmp	r3, r2
 8007648:	d00b      	beq.n	8007662 <TIM_OC5_SetConfig+0x82>
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	4a16      	ldr	r2, [pc, #88]	@ (80076a8 <TIM_OC5_SetConfig+0xc8>)
 800764e:	4293      	cmp	r3, r2
 8007650:	d007      	beq.n	8007662 <TIM_OC5_SetConfig+0x82>
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	4a15      	ldr	r2, [pc, #84]	@ (80076ac <TIM_OC5_SetConfig+0xcc>)
 8007656:	4293      	cmp	r3, r2
 8007658:	d003      	beq.n	8007662 <TIM_OC5_SetConfig+0x82>
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	4a14      	ldr	r2, [pc, #80]	@ (80076b0 <TIM_OC5_SetConfig+0xd0>)
 800765e:	4293      	cmp	r3, r2
 8007660:	d109      	bne.n	8007676 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007662:	697b      	ldr	r3, [r7, #20]
 8007664:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007668:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800766a:	683b      	ldr	r3, [r7, #0]
 800766c:	695b      	ldr	r3, [r3, #20]
 800766e:	021b      	lsls	r3, r3, #8
 8007670:	697a      	ldr	r2, [r7, #20]
 8007672:	4313      	orrs	r3, r2
 8007674:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	697a      	ldr	r2, [r7, #20]
 800767a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	68fa      	ldr	r2, [r7, #12]
 8007680:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007682:	683b      	ldr	r3, [r7, #0]
 8007684:	685a      	ldr	r2, [r3, #4]
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	693a      	ldr	r2, [r7, #16]
 800768e:	621a      	str	r2, [r3, #32]
}
 8007690:	bf00      	nop
 8007692:	371c      	adds	r7, #28
 8007694:	46bd      	mov	sp, r7
 8007696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769a:	4770      	bx	lr
 800769c:	40012c00 	.word	0x40012c00
 80076a0:	40013400 	.word	0x40013400
 80076a4:	40014000 	.word	0x40014000
 80076a8:	40014400 	.word	0x40014400
 80076ac:	40014800 	.word	0x40014800
 80076b0:	40015000 	.word	0x40015000

080076b4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80076b4:	b480      	push	{r7}
 80076b6:	b087      	sub	sp, #28
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
 80076bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	6a1b      	ldr	r3, [r3, #32]
 80076c2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	6a1b      	ldr	r3, [r3, #32]
 80076c8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	685b      	ldr	r3, [r3, #4]
 80076d4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80076da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80076e2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80076e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80076e8:	683b      	ldr	r3, [r7, #0]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	021b      	lsls	r3, r3, #8
 80076ee:	68fa      	ldr	r2, [r7, #12]
 80076f0:	4313      	orrs	r3, r2
 80076f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80076f4:	693b      	ldr	r3, [r7, #16]
 80076f6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80076fa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80076fc:	683b      	ldr	r3, [r7, #0]
 80076fe:	689b      	ldr	r3, [r3, #8]
 8007700:	051b      	lsls	r3, r3, #20
 8007702:	693a      	ldr	r2, [r7, #16]
 8007704:	4313      	orrs	r3, r2
 8007706:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	4a1a      	ldr	r2, [pc, #104]	@ (8007774 <TIM_OC6_SetConfig+0xc0>)
 800770c:	4293      	cmp	r3, r2
 800770e:	d013      	beq.n	8007738 <TIM_OC6_SetConfig+0x84>
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	4a19      	ldr	r2, [pc, #100]	@ (8007778 <TIM_OC6_SetConfig+0xc4>)
 8007714:	4293      	cmp	r3, r2
 8007716:	d00f      	beq.n	8007738 <TIM_OC6_SetConfig+0x84>
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	4a18      	ldr	r2, [pc, #96]	@ (800777c <TIM_OC6_SetConfig+0xc8>)
 800771c:	4293      	cmp	r3, r2
 800771e:	d00b      	beq.n	8007738 <TIM_OC6_SetConfig+0x84>
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	4a17      	ldr	r2, [pc, #92]	@ (8007780 <TIM_OC6_SetConfig+0xcc>)
 8007724:	4293      	cmp	r3, r2
 8007726:	d007      	beq.n	8007738 <TIM_OC6_SetConfig+0x84>
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	4a16      	ldr	r2, [pc, #88]	@ (8007784 <TIM_OC6_SetConfig+0xd0>)
 800772c:	4293      	cmp	r3, r2
 800772e:	d003      	beq.n	8007738 <TIM_OC6_SetConfig+0x84>
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	4a15      	ldr	r2, [pc, #84]	@ (8007788 <TIM_OC6_SetConfig+0xd4>)
 8007734:	4293      	cmp	r3, r2
 8007736:	d109      	bne.n	800774c <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007738:	697b      	ldr	r3, [r7, #20]
 800773a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800773e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007740:	683b      	ldr	r3, [r7, #0]
 8007742:	695b      	ldr	r3, [r3, #20]
 8007744:	029b      	lsls	r3, r3, #10
 8007746:	697a      	ldr	r2, [r7, #20]
 8007748:	4313      	orrs	r3, r2
 800774a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	697a      	ldr	r2, [r7, #20]
 8007750:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	68fa      	ldr	r2, [r7, #12]
 8007756:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007758:	683b      	ldr	r3, [r7, #0]
 800775a:	685a      	ldr	r2, [r3, #4]
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	693a      	ldr	r2, [r7, #16]
 8007764:	621a      	str	r2, [r3, #32]
}
 8007766:	bf00      	nop
 8007768:	371c      	adds	r7, #28
 800776a:	46bd      	mov	sp, r7
 800776c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007770:	4770      	bx	lr
 8007772:	bf00      	nop
 8007774:	40012c00 	.word	0x40012c00
 8007778:	40013400 	.word	0x40013400
 800777c:	40014000 	.word	0x40014000
 8007780:	40014400 	.word	0x40014400
 8007784:	40014800 	.word	0x40014800
 8007788:	40015000 	.word	0x40015000

0800778c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800778c:	b480      	push	{r7}
 800778e:	b087      	sub	sp, #28
 8007790:	af00      	add	r7, sp, #0
 8007792:	60f8      	str	r0, [r7, #12]
 8007794:	60b9      	str	r1, [r7, #8]
 8007796:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	6a1b      	ldr	r3, [r3, #32]
 800779c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	6a1b      	ldr	r3, [r3, #32]
 80077a2:	f023 0201 	bic.w	r2, r3, #1
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	699b      	ldr	r3, [r3, #24]
 80077ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80077b0:	693b      	ldr	r3, [r7, #16]
 80077b2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80077b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	011b      	lsls	r3, r3, #4
 80077bc:	693a      	ldr	r2, [r7, #16]
 80077be:	4313      	orrs	r3, r2
 80077c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80077c2:	697b      	ldr	r3, [r7, #20]
 80077c4:	f023 030a 	bic.w	r3, r3, #10
 80077c8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80077ca:	697a      	ldr	r2, [r7, #20]
 80077cc:	68bb      	ldr	r3, [r7, #8]
 80077ce:	4313      	orrs	r3, r2
 80077d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	693a      	ldr	r2, [r7, #16]
 80077d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	697a      	ldr	r2, [r7, #20]
 80077dc:	621a      	str	r2, [r3, #32]
}
 80077de:	bf00      	nop
 80077e0:	371c      	adds	r7, #28
 80077e2:	46bd      	mov	sp, r7
 80077e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e8:	4770      	bx	lr

080077ea <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80077ea:	b480      	push	{r7}
 80077ec:	b087      	sub	sp, #28
 80077ee:	af00      	add	r7, sp, #0
 80077f0:	60f8      	str	r0, [r7, #12]
 80077f2:	60b9      	str	r1, [r7, #8]
 80077f4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	6a1b      	ldr	r3, [r3, #32]
 80077fa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	6a1b      	ldr	r3, [r3, #32]
 8007800:	f023 0210 	bic.w	r2, r3, #16
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	699b      	ldr	r3, [r3, #24]
 800780c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800780e:	693b      	ldr	r3, [r7, #16]
 8007810:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007814:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	031b      	lsls	r3, r3, #12
 800781a:	693a      	ldr	r2, [r7, #16]
 800781c:	4313      	orrs	r3, r2
 800781e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007820:	697b      	ldr	r3, [r7, #20]
 8007822:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007826:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007828:	68bb      	ldr	r3, [r7, #8]
 800782a:	011b      	lsls	r3, r3, #4
 800782c:	697a      	ldr	r2, [r7, #20]
 800782e:	4313      	orrs	r3, r2
 8007830:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	693a      	ldr	r2, [r7, #16]
 8007836:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	697a      	ldr	r2, [r7, #20]
 800783c:	621a      	str	r2, [r3, #32]
}
 800783e:	bf00      	nop
 8007840:	371c      	adds	r7, #28
 8007842:	46bd      	mov	sp, r7
 8007844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007848:	4770      	bx	lr

0800784a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800784a:	b480      	push	{r7}
 800784c:	b085      	sub	sp, #20
 800784e:	af00      	add	r7, sp, #0
 8007850:	6078      	str	r0, [r7, #4]
 8007852:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	689b      	ldr	r3, [r3, #8]
 8007858:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8007860:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007864:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007866:	683a      	ldr	r2, [r7, #0]
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	4313      	orrs	r3, r2
 800786c:	f043 0307 	orr.w	r3, r3, #7
 8007870:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	68fa      	ldr	r2, [r7, #12]
 8007876:	609a      	str	r2, [r3, #8]
}
 8007878:	bf00      	nop
 800787a:	3714      	adds	r7, #20
 800787c:	46bd      	mov	sp, r7
 800787e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007882:	4770      	bx	lr

08007884 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007884:	b480      	push	{r7}
 8007886:	b087      	sub	sp, #28
 8007888:	af00      	add	r7, sp, #0
 800788a:	60f8      	str	r0, [r7, #12]
 800788c:	60b9      	str	r1, [r7, #8]
 800788e:	607a      	str	r2, [r7, #4]
 8007890:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	689b      	ldr	r3, [r3, #8]
 8007896:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007898:	697b      	ldr	r3, [r7, #20]
 800789a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800789e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80078a0:	683b      	ldr	r3, [r7, #0]
 80078a2:	021a      	lsls	r2, r3, #8
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	431a      	orrs	r2, r3
 80078a8:	68bb      	ldr	r3, [r7, #8]
 80078aa:	4313      	orrs	r3, r2
 80078ac:	697a      	ldr	r2, [r7, #20]
 80078ae:	4313      	orrs	r3, r2
 80078b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	697a      	ldr	r2, [r7, #20]
 80078b6:	609a      	str	r2, [r3, #8]
}
 80078b8:	bf00      	nop
 80078ba:	371c      	adds	r7, #28
 80078bc:	46bd      	mov	sp, r7
 80078be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c2:	4770      	bx	lr

080078c4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80078c4:	b480      	push	{r7}
 80078c6:	b087      	sub	sp, #28
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	60f8      	str	r0, [r7, #12]
 80078cc:	60b9      	str	r1, [r7, #8]
 80078ce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80078d0:	68bb      	ldr	r3, [r7, #8]
 80078d2:	f003 031f 	and.w	r3, r3, #31
 80078d6:	2201      	movs	r2, #1
 80078d8:	fa02 f303 	lsl.w	r3, r2, r3
 80078dc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	6a1a      	ldr	r2, [r3, #32]
 80078e2:	697b      	ldr	r3, [r7, #20]
 80078e4:	43db      	mvns	r3, r3
 80078e6:	401a      	ands	r2, r3
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	6a1a      	ldr	r2, [r3, #32]
 80078f0:	68bb      	ldr	r3, [r7, #8]
 80078f2:	f003 031f 	and.w	r3, r3, #31
 80078f6:	6879      	ldr	r1, [r7, #4]
 80078f8:	fa01 f303 	lsl.w	r3, r1, r3
 80078fc:	431a      	orrs	r2, r3
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	621a      	str	r2, [r3, #32]
}
 8007902:	bf00      	nop
 8007904:	371c      	adds	r7, #28
 8007906:	46bd      	mov	sp, r7
 8007908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790c:	4770      	bx	lr
	...

08007910 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007910:	b480      	push	{r7}
 8007912:	b085      	sub	sp, #20
 8007914:	af00      	add	r7, sp, #0
 8007916:	6078      	str	r0, [r7, #4]
 8007918:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007920:	2b01      	cmp	r3, #1
 8007922:	d101      	bne.n	8007928 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007924:	2302      	movs	r3, #2
 8007926:	e074      	b.n	8007a12 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	2201      	movs	r2, #1
 800792c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	2202      	movs	r2, #2
 8007934:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	685b      	ldr	r3, [r3, #4]
 800793e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	689b      	ldr	r3, [r3, #8]
 8007946:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	4a34      	ldr	r2, [pc, #208]	@ (8007a20 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800794e:	4293      	cmp	r3, r2
 8007950:	d009      	beq.n	8007966 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	4a33      	ldr	r2, [pc, #204]	@ (8007a24 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007958:	4293      	cmp	r3, r2
 800795a:	d004      	beq.n	8007966 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	4a31      	ldr	r2, [pc, #196]	@ (8007a28 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007962:	4293      	cmp	r3, r2
 8007964:	d108      	bne.n	8007978 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800796c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800796e:	683b      	ldr	r3, [r7, #0]
 8007970:	685b      	ldr	r3, [r3, #4]
 8007972:	68fa      	ldr	r2, [r7, #12]
 8007974:	4313      	orrs	r3, r2
 8007976:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800797e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007982:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007984:	683b      	ldr	r3, [r7, #0]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	68fa      	ldr	r2, [r7, #12]
 800798a:	4313      	orrs	r3, r2
 800798c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	68fa      	ldr	r2, [r7, #12]
 8007994:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	4a21      	ldr	r2, [pc, #132]	@ (8007a20 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800799c:	4293      	cmp	r3, r2
 800799e:	d022      	beq.n	80079e6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80079a8:	d01d      	beq.n	80079e6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	4a1f      	ldr	r2, [pc, #124]	@ (8007a2c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80079b0:	4293      	cmp	r3, r2
 80079b2:	d018      	beq.n	80079e6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	4a1d      	ldr	r2, [pc, #116]	@ (8007a30 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80079ba:	4293      	cmp	r3, r2
 80079bc:	d013      	beq.n	80079e6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	4a1c      	ldr	r2, [pc, #112]	@ (8007a34 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80079c4:	4293      	cmp	r3, r2
 80079c6:	d00e      	beq.n	80079e6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	4a15      	ldr	r2, [pc, #84]	@ (8007a24 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80079ce:	4293      	cmp	r3, r2
 80079d0:	d009      	beq.n	80079e6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	4a18      	ldr	r2, [pc, #96]	@ (8007a38 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80079d8:	4293      	cmp	r3, r2
 80079da:	d004      	beq.n	80079e6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	4a11      	ldr	r2, [pc, #68]	@ (8007a28 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80079e2:	4293      	cmp	r3, r2
 80079e4:	d10c      	bne.n	8007a00 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80079e6:	68bb      	ldr	r3, [r7, #8]
 80079e8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80079ec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80079ee:	683b      	ldr	r3, [r7, #0]
 80079f0:	689b      	ldr	r3, [r3, #8]
 80079f2:	68ba      	ldr	r2, [r7, #8]
 80079f4:	4313      	orrs	r3, r2
 80079f6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	68ba      	ldr	r2, [r7, #8]
 80079fe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	2201      	movs	r2, #1
 8007a04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	2200      	movs	r2, #0
 8007a0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007a10:	2300      	movs	r3, #0
}
 8007a12:	4618      	mov	r0, r3
 8007a14:	3714      	adds	r7, #20
 8007a16:	46bd      	mov	sp, r7
 8007a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1c:	4770      	bx	lr
 8007a1e:	bf00      	nop
 8007a20:	40012c00 	.word	0x40012c00
 8007a24:	40013400 	.word	0x40013400
 8007a28:	40015000 	.word	0x40015000
 8007a2c:	40000400 	.word	0x40000400
 8007a30:	40000800 	.word	0x40000800
 8007a34:	40000c00 	.word	0x40000c00
 8007a38:	40014000 	.word	0x40014000

08007a3c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007a3c:	b480      	push	{r7}
 8007a3e:	b085      	sub	sp, #20
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	6078      	str	r0, [r7, #4]
 8007a44:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007a46:	2300      	movs	r3, #0
 8007a48:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007a50:	2b01      	cmp	r3, #1
 8007a52:	d101      	bne.n	8007a58 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007a54:	2302      	movs	r3, #2
 8007a56:	e078      	b.n	8007b4a <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	2201      	movs	r2, #1
 8007a5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8007a66:	683b      	ldr	r3, [r7, #0]
 8007a68:	68db      	ldr	r3, [r3, #12]
 8007a6a:	4313      	orrs	r3, r2
 8007a6c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007a74:	683b      	ldr	r3, [r7, #0]
 8007a76:	689b      	ldr	r3, [r3, #8]
 8007a78:	4313      	orrs	r3, r2
 8007a7a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8007a82:	683b      	ldr	r3, [r7, #0]
 8007a84:	685b      	ldr	r3, [r3, #4]
 8007a86:	4313      	orrs	r3, r2
 8007a88:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8007a90:	683b      	ldr	r3, [r7, #0]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	4313      	orrs	r3, r2
 8007a96:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007a9e:	683b      	ldr	r3, [r7, #0]
 8007aa0:	691b      	ldr	r3, [r3, #16]
 8007aa2:	4313      	orrs	r3, r2
 8007aa4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8007aac:	683b      	ldr	r3, [r7, #0]
 8007aae:	695b      	ldr	r3, [r3, #20]
 8007ab0:	4313      	orrs	r3, r2
 8007ab2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8007aba:	683b      	ldr	r3, [r7, #0]
 8007abc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007abe:	4313      	orrs	r3, r2
 8007ac0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8007ac8:	683b      	ldr	r3, [r7, #0]
 8007aca:	699b      	ldr	r3, [r3, #24]
 8007acc:	041b      	lsls	r3, r3, #16
 8007ace:	4313      	orrs	r3, r2
 8007ad0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8007ad8:	683b      	ldr	r3, [r7, #0]
 8007ada:	69db      	ldr	r3, [r3, #28]
 8007adc:	4313      	orrs	r3, r2
 8007ade:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	4a1c      	ldr	r2, [pc, #112]	@ (8007b58 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8007ae6:	4293      	cmp	r3, r2
 8007ae8:	d009      	beq.n	8007afe <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	4a1b      	ldr	r2, [pc, #108]	@ (8007b5c <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8007af0:	4293      	cmp	r3, r2
 8007af2:	d004      	beq.n	8007afe <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	4a19      	ldr	r2, [pc, #100]	@ (8007b60 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8007afa:	4293      	cmp	r3, r2
 8007afc:	d11c      	bne.n	8007b38 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8007b04:	683b      	ldr	r3, [r7, #0]
 8007b06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b08:	051b      	lsls	r3, r3, #20
 8007b0a:	4313      	orrs	r3, r2
 8007b0c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8007b14:	683b      	ldr	r3, [r7, #0]
 8007b16:	6a1b      	ldr	r3, [r3, #32]
 8007b18:	4313      	orrs	r3, r2
 8007b1a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8007b22:	683b      	ldr	r3, [r7, #0]
 8007b24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b26:	4313      	orrs	r3, r2
 8007b28:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8007b30:	683b      	ldr	r3, [r7, #0]
 8007b32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b34:	4313      	orrs	r3, r2
 8007b36:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	68fa      	ldr	r2, [r7, #12]
 8007b3e:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	2200      	movs	r2, #0
 8007b44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007b48:	2300      	movs	r3, #0
}
 8007b4a:	4618      	mov	r0, r3
 8007b4c:	3714      	adds	r7, #20
 8007b4e:	46bd      	mov	sp, r7
 8007b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b54:	4770      	bx	lr
 8007b56:	bf00      	nop
 8007b58:	40012c00 	.word	0x40012c00
 8007b5c:	40013400 	.word	0x40013400
 8007b60:	40015000 	.word	0x40015000

08007b64 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007b64:	b480      	push	{r7}
 8007b66:	b083      	sub	sp, #12
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007b6c:	bf00      	nop
 8007b6e:	370c      	adds	r7, #12
 8007b70:	46bd      	mov	sp, r7
 8007b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b76:	4770      	bx	lr

08007b78 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007b78:	b480      	push	{r7}
 8007b7a:	b083      	sub	sp, #12
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007b80:	bf00      	nop
 8007b82:	370c      	adds	r7, #12
 8007b84:	46bd      	mov	sp, r7
 8007b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8a:	4770      	bx	lr

08007b8c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007b8c:	b480      	push	{r7}
 8007b8e:	b083      	sub	sp, #12
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007b94:	bf00      	nop
 8007b96:	370c      	adds	r7, #12
 8007b98:	46bd      	mov	sp, r7
 8007b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b9e:	4770      	bx	lr

08007ba0 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8007ba0:	b480      	push	{r7}
 8007ba2:	b083      	sub	sp, #12
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8007ba8:	bf00      	nop
 8007baa:	370c      	adds	r7, #12
 8007bac:	46bd      	mov	sp, r7
 8007bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb2:	4770      	bx	lr

08007bb4 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8007bb4:	b480      	push	{r7}
 8007bb6:	b083      	sub	sp, #12
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8007bbc:	bf00      	nop
 8007bbe:	370c      	adds	r7, #12
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc6:	4770      	bx	lr

08007bc8 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8007bc8:	b480      	push	{r7}
 8007bca:	b083      	sub	sp, #12
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8007bd0:	bf00      	nop
 8007bd2:	370c      	adds	r7, #12
 8007bd4:	46bd      	mov	sp, r7
 8007bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bda:	4770      	bx	lr

08007bdc <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8007bdc:	b480      	push	{r7}
 8007bde:	b083      	sub	sp, #12
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8007be4:	bf00      	nop
 8007be6:	370c      	adds	r7, #12
 8007be8:	46bd      	mov	sp, r7
 8007bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bee:	4770      	bx	lr

08007bf0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007bf0:	b580      	push	{r7, lr}
 8007bf2:	b082      	sub	sp, #8
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d101      	bne.n	8007c02 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007bfe:	2301      	movs	r3, #1
 8007c00:	e042      	b.n	8007c88 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d106      	bne.n	8007c1a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	2200      	movs	r2, #0
 8007c10:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007c14:	6878      	ldr	r0, [r7, #4]
 8007c16:	f7fc f9eb 	bl	8003ff0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	2224      	movs	r2, #36	@ 0x24
 8007c1e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	681a      	ldr	r2, [r3, #0]
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	f022 0201 	bic.w	r2, r2, #1
 8007c30:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d002      	beq.n	8007c40 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8007c3a:	6878      	ldr	r0, [r7, #4]
 8007c3c:	f001 f806 	bl	8008c4c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007c40:	6878      	ldr	r0, [r7, #4]
 8007c42:	f000 fd07 	bl	8008654 <UART_SetConfig>
 8007c46:	4603      	mov	r3, r0
 8007c48:	2b01      	cmp	r3, #1
 8007c4a:	d101      	bne.n	8007c50 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007c4c:	2301      	movs	r3, #1
 8007c4e:	e01b      	b.n	8007c88 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	685a      	ldr	r2, [r3, #4]
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007c5e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	689a      	ldr	r2, [r3, #8]
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007c6e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	681a      	ldr	r2, [r3, #0]
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	f042 0201 	orr.w	r2, r2, #1
 8007c7e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007c80:	6878      	ldr	r0, [r7, #4]
 8007c82:	f001 f885 	bl	8008d90 <UART_CheckIdleState>
 8007c86:	4603      	mov	r3, r0
}
 8007c88:	4618      	mov	r0, r3
 8007c8a:	3708      	adds	r7, #8
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	bd80      	pop	{r7, pc}

08007c90 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007c90:	b580      	push	{r7, lr}
 8007c92:	b08a      	sub	sp, #40	@ 0x28
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	60f8      	str	r0, [r7, #12]
 8007c98:	60b9      	str	r1, [r7, #8]
 8007c9a:	4613      	mov	r3, r2
 8007c9c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007ca4:	2b20      	cmp	r3, #32
 8007ca6:	d167      	bne.n	8007d78 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8007ca8:	68bb      	ldr	r3, [r7, #8]
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d002      	beq.n	8007cb4 <HAL_UART_Transmit_DMA+0x24>
 8007cae:	88fb      	ldrh	r3, [r7, #6]
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d101      	bne.n	8007cb8 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8007cb4:	2301      	movs	r3, #1
 8007cb6:	e060      	b.n	8007d7a <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	68ba      	ldr	r2, [r7, #8]
 8007cbc:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	88fa      	ldrh	r2, [r7, #6]
 8007cc2:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	88fa      	ldrh	r2, [r7, #6]
 8007cca:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	2200      	movs	r2, #0
 8007cd2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	2221      	movs	r2, #33	@ 0x21
 8007cda:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d028      	beq.n	8007d38 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007cea:	4a26      	ldr	r2, [pc, #152]	@ (8007d84 <HAL_UART_Transmit_DMA+0xf4>)
 8007cec:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007cf2:	4a25      	ldr	r2, [pc, #148]	@ (8007d88 <HAL_UART_Transmit_DMA+0xf8>)
 8007cf4:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007cfa:	4a24      	ldr	r2, [pc, #144]	@ (8007d8c <HAL_UART_Transmit_DMA+0xfc>)
 8007cfc:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007d02:	2200      	movs	r2, #0
 8007d04:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007d0e:	4619      	mov	r1, r3
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	3328      	adds	r3, #40	@ 0x28
 8007d16:	461a      	mov	r2, r3
 8007d18:	88fb      	ldrh	r3, [r7, #6]
 8007d1a:	f7fc fcbb 	bl	8004694 <HAL_DMA_Start_IT>
 8007d1e:	4603      	mov	r3, r0
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d009      	beq.n	8007d38 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	2210      	movs	r2, #16
 8007d28:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	2220      	movs	r2, #32
 8007d30:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 8007d34:	2301      	movs	r3, #1
 8007d36:	e020      	b.n	8007d7a <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	2240      	movs	r2, #64	@ 0x40
 8007d3e:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	3308      	adds	r3, #8
 8007d46:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d48:	697b      	ldr	r3, [r7, #20]
 8007d4a:	e853 3f00 	ldrex	r3, [r3]
 8007d4e:	613b      	str	r3, [r7, #16]
   return(result);
 8007d50:	693b      	ldr	r3, [r7, #16]
 8007d52:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007d56:	627b      	str	r3, [r7, #36]	@ 0x24
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	3308      	adds	r3, #8
 8007d5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007d60:	623a      	str	r2, [r7, #32]
 8007d62:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d64:	69f9      	ldr	r1, [r7, #28]
 8007d66:	6a3a      	ldr	r2, [r7, #32]
 8007d68:	e841 2300 	strex	r3, r2, [r1]
 8007d6c:	61bb      	str	r3, [r7, #24]
   return(result);
 8007d6e:	69bb      	ldr	r3, [r7, #24]
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d1e5      	bne.n	8007d40 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8007d74:	2300      	movs	r3, #0
 8007d76:	e000      	b.n	8007d7a <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8007d78:	2302      	movs	r3, #2
  }
}
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	3728      	adds	r7, #40	@ 0x28
 8007d7e:	46bd      	mov	sp, r7
 8007d80:	bd80      	pop	{r7, pc}
 8007d82:	bf00      	nop
 8007d84:	0800925b 	.word	0x0800925b
 8007d88:	080092f5 	.word	0x080092f5
 8007d8c:	0800947b 	.word	0x0800947b

08007d90 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007d90:	b580      	push	{r7, lr}
 8007d92:	b08a      	sub	sp, #40	@ 0x28
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	60f8      	str	r0, [r7, #12]
 8007d98:	60b9      	str	r1, [r7, #8]
 8007d9a:	4613      	mov	r3, r2
 8007d9c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007da4:	2b20      	cmp	r3, #32
 8007da6:	d137      	bne.n	8007e18 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8007da8:	68bb      	ldr	r3, [r7, #8]
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d002      	beq.n	8007db4 <HAL_UART_Receive_DMA+0x24>
 8007dae:	88fb      	ldrh	r3, [r7, #6]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d101      	bne.n	8007db8 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8007db4:	2301      	movs	r3, #1
 8007db6:	e030      	b.n	8007e1a <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	2200      	movs	r2, #0
 8007dbc:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	4a18      	ldr	r2, [pc, #96]	@ (8007e24 <HAL_UART_Receive_DMA+0x94>)
 8007dc4:	4293      	cmp	r3, r2
 8007dc6:	d01f      	beq.n	8007e08 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	685b      	ldr	r3, [r3, #4]
 8007dce:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d018      	beq.n	8007e08 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ddc:	697b      	ldr	r3, [r7, #20]
 8007dde:	e853 3f00 	ldrex	r3, [r3]
 8007de2:	613b      	str	r3, [r7, #16]
   return(result);
 8007de4:	693b      	ldr	r3, [r7, #16]
 8007de6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007dea:	627b      	str	r3, [r7, #36]	@ 0x24
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	461a      	mov	r2, r3
 8007df2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007df4:	623b      	str	r3, [r7, #32]
 8007df6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007df8:	69f9      	ldr	r1, [r7, #28]
 8007dfa:	6a3a      	ldr	r2, [r7, #32]
 8007dfc:	e841 2300 	strex	r3, r2, [r1]
 8007e00:	61bb      	str	r3, [r7, #24]
   return(result);
 8007e02:	69bb      	ldr	r3, [r7, #24]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d1e6      	bne.n	8007dd6 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8007e08:	88fb      	ldrh	r3, [r7, #6]
 8007e0a:	461a      	mov	r2, r3
 8007e0c:	68b9      	ldr	r1, [r7, #8]
 8007e0e:	68f8      	ldr	r0, [r7, #12]
 8007e10:	f001 f8d6 	bl	8008fc0 <UART_Start_Receive_DMA>
 8007e14:	4603      	mov	r3, r0
 8007e16:	e000      	b.n	8007e1a <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007e18:	2302      	movs	r3, #2
  }
}
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	3728      	adds	r7, #40	@ 0x28
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	bd80      	pop	{r7, pc}
 8007e22:	bf00      	nop
 8007e24:	40008000 	.word	0x40008000

08007e28 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8007e28:	b580      	push	{r7, lr}
 8007e2a:	b090      	sub	sp, #64	@ 0x40
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007e36:	63fb      	str	r3, [r7, #60]	@ 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007e3e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	689b      	ldr	r3, [r3, #8]
 8007e46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007e4a:	2b80      	cmp	r3, #128	@ 0x80
 8007e4c:	d139      	bne.n	8007ec2 <HAL_UART_DMAStop+0x9a>
 8007e4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007e50:	2b21      	cmp	r3, #33	@ 0x21
 8007e52:	d136      	bne.n	8007ec2 <HAL_UART_DMAStop+0x9a>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	3308      	adds	r3, #8
 8007e5a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e5c:	6a3b      	ldr	r3, [r7, #32]
 8007e5e:	e853 3f00 	ldrex	r3, [r3]
 8007e62:	61fb      	str	r3, [r7, #28]
   return(result);
 8007e64:	69fb      	ldr	r3, [r7, #28]
 8007e66:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007e6a:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	3308      	adds	r3, #8
 8007e72:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007e74:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007e76:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e78:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007e7a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007e7c:	e841 2300 	strex	r3, r2, [r1]
 8007e80:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007e82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d1e5      	bne.n	8007e54 <HAL_UART_DMAStop+0x2c>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d015      	beq.n	8007ebc <HAL_UART_DMAStop+0x94>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007e94:	4618      	mov	r0, r3
 8007e96:	f7fc fc78 	bl	800478a <HAL_DMA_Abort>
 8007e9a:	4603      	mov	r3, r0
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d00d      	beq.n	8007ebc <HAL_UART_DMAStop+0x94>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	f7fc fddf 	bl	8004a68 <HAL_DMA_GetError>
 8007eaa:	4603      	mov	r3, r0
 8007eac:	2b20      	cmp	r3, #32
 8007eae:	d105      	bne.n	8007ebc <HAL_UART_DMAStop+0x94>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	2210      	movs	r2, #16
 8007eb4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 8007eb8:	2303      	movs	r3, #3
 8007eba:	e047      	b.n	8007f4c <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndTxTransfer(huart);
 8007ebc:	6878      	ldr	r0, [r7, #4]
 8007ebe:	f001 f925 	bl	800910c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	689b      	ldr	r3, [r3, #8]
 8007ec8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ecc:	2b40      	cmp	r3, #64	@ 0x40
 8007ece:	d13c      	bne.n	8007f4a <HAL_UART_DMAStop+0x122>
 8007ed0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ed2:	2b22      	cmp	r3, #34	@ 0x22
 8007ed4:	d139      	bne.n	8007f4a <HAL_UART_DMAStop+0x122>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	3308      	adds	r3, #8
 8007edc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	e853 3f00 	ldrex	r3, [r3]
 8007ee4:	60bb      	str	r3, [r7, #8]
   return(result);
 8007ee6:	68bb      	ldr	r3, [r7, #8]
 8007ee8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007eec:	633b      	str	r3, [r7, #48]	@ 0x30
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	3308      	adds	r3, #8
 8007ef4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007ef6:	61ba      	str	r2, [r7, #24]
 8007ef8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007efa:	6979      	ldr	r1, [r7, #20]
 8007efc:	69ba      	ldr	r2, [r7, #24]
 8007efe:	e841 2300 	strex	r3, r2, [r1]
 8007f02:	613b      	str	r3, [r7, #16]
   return(result);
 8007f04:	693b      	ldr	r3, [r7, #16]
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d1e5      	bne.n	8007ed6 <HAL_UART_DMAStop+0xae>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d017      	beq.n	8007f44 <HAL_UART_DMAStop+0x11c>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	f7fc fc35 	bl	800478a <HAL_DMA_Abort>
 8007f20:	4603      	mov	r3, r0
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d00e      	beq.n	8007f44 <HAL_UART_DMAStop+0x11c>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007f2c:	4618      	mov	r0, r3
 8007f2e:	f7fc fd9b 	bl	8004a68 <HAL_DMA_GetError>
 8007f32:	4603      	mov	r3, r0
 8007f34:	2b20      	cmp	r3, #32
 8007f36:	d105      	bne.n	8007f44 <HAL_UART_DMAStop+0x11c>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	2210      	movs	r2, #16
 8007f3c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 8007f40:	2303      	movs	r3, #3
 8007f42:	e003      	b.n	8007f4c <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndRxTransfer(huart);
 8007f44:	6878      	ldr	r0, [r7, #4]
 8007f46:	f001 f922 	bl	800918e <UART_EndRxTransfer>
  }

  return HAL_OK;
 8007f4a:	2300      	movs	r3, #0
}
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	3740      	adds	r7, #64	@ 0x40
 8007f50:	46bd      	mov	sp, r7
 8007f52:	bd80      	pop	{r7, pc}

08007f54 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007f54:	b580      	push	{r7, lr}
 8007f56:	b0ba      	sub	sp, #232	@ 0xe8
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	69db      	ldr	r3, [r3, #28]
 8007f62:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	689b      	ldr	r3, [r3, #8]
 8007f76:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007f7a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8007f7e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8007f82:	4013      	ands	r3, r2
 8007f84:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8007f88:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d11b      	bne.n	8007fc8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007f90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007f94:	f003 0320 	and.w	r3, r3, #32
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d015      	beq.n	8007fc8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007f9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007fa0:	f003 0320 	and.w	r3, r3, #32
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d105      	bne.n	8007fb4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007fa8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007fac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d009      	beq.n	8007fc8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	f000 8300 	beq.w	80085be <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007fc2:	6878      	ldr	r0, [r7, #4]
 8007fc4:	4798      	blx	r3
      }
      return;
 8007fc6:	e2fa      	b.n	80085be <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007fc8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	f000 8123 	beq.w	8008218 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007fd2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8007fd6:	4b8d      	ldr	r3, [pc, #564]	@ (800820c <HAL_UART_IRQHandler+0x2b8>)
 8007fd8:	4013      	ands	r3, r2
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d106      	bne.n	8007fec <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007fde:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8007fe2:	4b8b      	ldr	r3, [pc, #556]	@ (8008210 <HAL_UART_IRQHandler+0x2bc>)
 8007fe4:	4013      	ands	r3, r2
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	f000 8116 	beq.w	8008218 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007fec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007ff0:	f003 0301 	and.w	r3, r3, #1
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d011      	beq.n	800801c <HAL_UART_IRQHandler+0xc8>
 8007ff8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007ffc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008000:	2b00      	cmp	r3, #0
 8008002:	d00b      	beq.n	800801c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	2201      	movs	r2, #1
 800800a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008012:	f043 0201 	orr.w	r2, r3, #1
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800801c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008020:	f003 0302 	and.w	r3, r3, #2
 8008024:	2b00      	cmp	r3, #0
 8008026:	d011      	beq.n	800804c <HAL_UART_IRQHandler+0xf8>
 8008028:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800802c:	f003 0301 	and.w	r3, r3, #1
 8008030:	2b00      	cmp	r3, #0
 8008032:	d00b      	beq.n	800804c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	2202      	movs	r2, #2
 800803a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008042:	f043 0204 	orr.w	r2, r3, #4
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800804c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008050:	f003 0304 	and.w	r3, r3, #4
 8008054:	2b00      	cmp	r3, #0
 8008056:	d011      	beq.n	800807c <HAL_UART_IRQHandler+0x128>
 8008058:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800805c:	f003 0301 	and.w	r3, r3, #1
 8008060:	2b00      	cmp	r3, #0
 8008062:	d00b      	beq.n	800807c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	2204      	movs	r2, #4
 800806a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008072:	f043 0202 	orr.w	r2, r3, #2
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800807c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008080:	f003 0308 	and.w	r3, r3, #8
 8008084:	2b00      	cmp	r3, #0
 8008086:	d017      	beq.n	80080b8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008088:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800808c:	f003 0320 	and.w	r3, r3, #32
 8008090:	2b00      	cmp	r3, #0
 8008092:	d105      	bne.n	80080a0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008094:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8008098:	4b5c      	ldr	r3, [pc, #368]	@ (800820c <HAL_UART_IRQHandler+0x2b8>)
 800809a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800809c:	2b00      	cmp	r3, #0
 800809e:	d00b      	beq.n	80080b8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	2208      	movs	r2, #8
 80080a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80080ae:	f043 0208 	orr.w	r2, r3, #8
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80080b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80080bc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d012      	beq.n	80080ea <HAL_UART_IRQHandler+0x196>
 80080c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80080c8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d00c      	beq.n	80080ea <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80080d8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80080e0:	f043 0220 	orr.w	r2, r3, #32
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	f000 8266 	beq.w	80085c2 <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80080f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80080fa:	f003 0320 	and.w	r3, r3, #32
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d013      	beq.n	800812a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008102:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008106:	f003 0320 	and.w	r3, r3, #32
 800810a:	2b00      	cmp	r3, #0
 800810c:	d105      	bne.n	800811a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800810e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008112:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008116:	2b00      	cmp	r3, #0
 8008118:	d007      	beq.n	800812a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800811e:	2b00      	cmp	r3, #0
 8008120:	d003      	beq.n	800812a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008126:	6878      	ldr	r0, [r7, #4]
 8008128:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008130:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	689b      	ldr	r3, [r3, #8]
 800813a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800813e:	2b40      	cmp	r3, #64	@ 0x40
 8008140:	d005      	beq.n	800814e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008142:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008146:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800814a:	2b00      	cmp	r3, #0
 800814c:	d054      	beq.n	80081f8 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800814e:	6878      	ldr	r0, [r7, #4]
 8008150:	f001 f81d 	bl	800918e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	689b      	ldr	r3, [r3, #8]
 800815a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800815e:	2b40      	cmp	r3, #64	@ 0x40
 8008160:	d146      	bne.n	80081f0 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	3308      	adds	r3, #8
 8008168:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800816c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008170:	e853 3f00 	ldrex	r3, [r3]
 8008174:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008178:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800817c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008180:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	3308      	adds	r3, #8
 800818a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800818e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8008192:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008196:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800819a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800819e:	e841 2300 	strex	r3, r2, [r1]
 80081a2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80081a6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d1d9      	bne.n	8008162 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d017      	beq.n	80081e8 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80081be:	4a15      	ldr	r2, [pc, #84]	@ (8008214 <HAL_UART_IRQHandler+0x2c0>)
 80081c0:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80081c8:	4618      	mov	r0, r3
 80081ca:	f7fc fb37 	bl	800483c <HAL_DMA_Abort_IT>
 80081ce:	4603      	mov	r3, r0
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d019      	beq.n	8008208 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80081da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081dc:	687a      	ldr	r2, [r7, #4]
 80081de:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80081e2:	4610      	mov	r0, r2
 80081e4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80081e6:	e00f      	b.n	8008208 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80081e8:	6878      	ldr	r0, [r7, #4]
 80081ea:	f000 fa1d 	bl	8008628 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80081ee:	e00b      	b.n	8008208 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80081f0:	6878      	ldr	r0, [r7, #4]
 80081f2:	f000 fa19 	bl	8008628 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80081f6:	e007      	b.n	8008208 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80081f8:	6878      	ldr	r0, [r7, #4]
 80081fa:	f000 fa15 	bl	8008628 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	2200      	movs	r2, #0
 8008202:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8008206:	e1dc      	b.n	80085c2 <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008208:	bf00      	nop
    return;
 800820a:	e1da      	b.n	80085c2 <HAL_UART_IRQHandler+0x66e>
 800820c:	10000001 	.word	0x10000001
 8008210:	04000120 	.word	0x04000120
 8008214:	080094fb 	.word	0x080094fb

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800821c:	2b01      	cmp	r3, #1
 800821e:	f040 8170 	bne.w	8008502 <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008222:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008226:	f003 0310 	and.w	r3, r3, #16
 800822a:	2b00      	cmp	r3, #0
 800822c:	f000 8169 	beq.w	8008502 <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008230:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008234:	f003 0310 	and.w	r3, r3, #16
 8008238:	2b00      	cmp	r3, #0
 800823a:	f000 8162 	beq.w	8008502 <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	2210      	movs	r2, #16
 8008244:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	689b      	ldr	r3, [r3, #8]
 800824c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008250:	2b40      	cmp	r3, #64	@ 0x40
 8008252:	f040 80d8 	bne.w	8008406 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	685b      	ldr	r3, [r3, #4]
 8008260:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008264:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008268:	2b00      	cmp	r3, #0
 800826a:	f000 80af 	beq.w	80083cc <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008274:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008278:	429a      	cmp	r2, r3
 800827a:	f080 80a7 	bcs.w	80083cc <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008284:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	f003 0320 	and.w	r3, r3, #32
 8008296:	2b00      	cmp	r3, #0
 8008298:	f040 8087 	bne.w	80083aa <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082a4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80082a8:	e853 3f00 	ldrex	r3, [r3]
 80082ac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80082b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80082b4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80082b8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	461a      	mov	r2, r3
 80082c2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80082c6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80082ca:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082ce:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80082d2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80082d6:	e841 2300 	strex	r3, r2, [r1]
 80082da:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80082de:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d1da      	bne.n	800829c <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	3308      	adds	r3, #8
 80082ec:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082ee:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80082f0:	e853 3f00 	ldrex	r3, [r3]
 80082f4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80082f6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80082f8:	f023 0301 	bic.w	r3, r3, #1
 80082fc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	3308      	adds	r3, #8
 8008306:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800830a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800830e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008310:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008312:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008316:	e841 2300 	strex	r3, r2, [r1]
 800831a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800831c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800831e:	2b00      	cmp	r3, #0
 8008320:	d1e1      	bne.n	80082e6 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	3308      	adds	r3, #8
 8008328:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800832a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800832c:	e853 3f00 	ldrex	r3, [r3]
 8008330:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008332:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008334:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008338:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	3308      	adds	r3, #8
 8008342:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008346:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008348:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800834a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800834c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800834e:	e841 2300 	strex	r3, r2, [r1]
 8008352:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008354:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008356:	2b00      	cmp	r3, #0
 8008358:	d1e3      	bne.n	8008322 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	2220      	movs	r2, #32
 800835e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	2200      	movs	r2, #0
 8008366:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800836e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008370:	e853 3f00 	ldrex	r3, [r3]
 8008374:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008376:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008378:	f023 0310 	bic.w	r3, r3, #16
 800837c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	461a      	mov	r2, r3
 8008386:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800838a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800838c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800838e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008390:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008392:	e841 2300 	strex	r3, r2, [r1]
 8008396:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008398:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800839a:	2b00      	cmp	r3, #0
 800839c:	d1e4      	bne.n	8008368 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80083a4:	4618      	mov	r0, r3
 80083a6:	f7fc f9f0 	bl	800478a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	2202      	movs	r2, #2
 80083ae:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80083bc:	b29b      	uxth	r3, r3
 80083be:	1ad3      	subs	r3, r2, r3
 80083c0:	b29b      	uxth	r3, r3
 80083c2:	4619      	mov	r1, r3
 80083c4:	6878      	ldr	r0, [r7, #4]
 80083c6:	f000 f939 	bl	800863c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80083ca:	e0fc      	b.n	80085c6 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80083d2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80083d6:	429a      	cmp	r2, r3
 80083d8:	f040 80f5 	bne.w	80085c6 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	f003 0320 	and.w	r3, r3, #32
 80083ea:	2b20      	cmp	r3, #32
 80083ec:	f040 80eb 	bne.w	80085c6 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	2202      	movs	r2, #2
 80083f4:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80083fc:	4619      	mov	r1, r3
 80083fe:	6878      	ldr	r0, [r7, #4]
 8008400:	f000 f91c 	bl	800863c <HAL_UARTEx_RxEventCallback>
      return;
 8008404:	e0df      	b.n	80085c6 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008412:	b29b      	uxth	r3, r3
 8008414:	1ad3      	subs	r3, r2, r3
 8008416:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008420:	b29b      	uxth	r3, r3
 8008422:	2b00      	cmp	r3, #0
 8008424:	f000 80d1 	beq.w	80085ca <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8008428:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800842c:	2b00      	cmp	r3, #0
 800842e:	f000 80cc 	beq.w	80085ca <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008438:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800843a:	e853 3f00 	ldrex	r3, [r3]
 800843e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008440:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008442:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008446:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	461a      	mov	r2, r3
 8008450:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008454:	647b      	str	r3, [r7, #68]	@ 0x44
 8008456:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008458:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800845a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800845c:	e841 2300 	strex	r3, r2, [r1]
 8008460:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008462:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008464:	2b00      	cmp	r3, #0
 8008466:	d1e4      	bne.n	8008432 <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	3308      	adds	r3, #8
 800846e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008470:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008472:	e853 3f00 	ldrex	r3, [r3]
 8008476:	623b      	str	r3, [r7, #32]
   return(result);
 8008478:	6a3b      	ldr	r3, [r7, #32]
 800847a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800847e:	f023 0301 	bic.w	r3, r3, #1
 8008482:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	3308      	adds	r3, #8
 800848c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008490:	633a      	str	r2, [r7, #48]	@ 0x30
 8008492:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008494:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008496:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008498:	e841 2300 	strex	r3, r2, [r1]
 800849c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800849e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d1e1      	bne.n	8008468 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	2220      	movs	r2, #32
 80084a8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	2200      	movs	r2, #0
 80084b0:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	2200      	movs	r2, #0
 80084b6:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084be:	693b      	ldr	r3, [r7, #16]
 80084c0:	e853 3f00 	ldrex	r3, [r3]
 80084c4:	60fb      	str	r3, [r7, #12]
   return(result);
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	f023 0310 	bic.w	r3, r3, #16
 80084cc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	461a      	mov	r2, r3
 80084d6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80084da:	61fb      	str	r3, [r7, #28]
 80084dc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084de:	69b9      	ldr	r1, [r7, #24]
 80084e0:	69fa      	ldr	r2, [r7, #28]
 80084e2:	e841 2300 	strex	r3, r2, [r1]
 80084e6:	617b      	str	r3, [r7, #20]
   return(result);
 80084e8:	697b      	ldr	r3, [r7, #20]
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d1e4      	bne.n	80084b8 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	2202      	movs	r2, #2
 80084f2:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80084f4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80084f8:	4619      	mov	r1, r3
 80084fa:	6878      	ldr	r0, [r7, #4]
 80084fc:	f000 f89e 	bl	800863c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008500:	e063      	b.n	80085ca <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008502:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008506:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800850a:	2b00      	cmp	r3, #0
 800850c:	d00e      	beq.n	800852c <HAL_UART_IRQHandler+0x5d8>
 800850e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008512:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008516:	2b00      	cmp	r3, #0
 8008518:	d008      	beq.n	800852c <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8008522:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008524:	6878      	ldr	r0, [r7, #4]
 8008526:	f001 f825 	bl	8009574 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800852a:	e051      	b.n	80085d0 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800852c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008530:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008534:	2b00      	cmp	r3, #0
 8008536:	d014      	beq.n	8008562 <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008538:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800853c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008540:	2b00      	cmp	r3, #0
 8008542:	d105      	bne.n	8008550 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008544:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008548:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800854c:	2b00      	cmp	r3, #0
 800854e:	d008      	beq.n	8008562 <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008554:	2b00      	cmp	r3, #0
 8008556:	d03a      	beq.n	80085ce <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800855c:	6878      	ldr	r0, [r7, #4]
 800855e:	4798      	blx	r3
    }
    return;
 8008560:	e035      	b.n	80085ce <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008562:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008566:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800856a:	2b00      	cmp	r3, #0
 800856c:	d009      	beq.n	8008582 <HAL_UART_IRQHandler+0x62e>
 800856e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008572:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008576:	2b00      	cmp	r3, #0
 8008578:	d003      	beq.n	8008582 <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 800857a:	6878      	ldr	r0, [r7, #4]
 800857c:	f000 ffcf 	bl	800951e <UART_EndTransmit_IT>
    return;
 8008580:	e026      	b.n	80085d0 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008582:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008586:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800858a:	2b00      	cmp	r3, #0
 800858c:	d009      	beq.n	80085a2 <HAL_UART_IRQHandler+0x64e>
 800858e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008592:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8008596:	2b00      	cmp	r3, #0
 8008598:	d003      	beq.n	80085a2 <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800859a:	6878      	ldr	r0, [r7, #4]
 800859c:	f000 fffe 	bl	800959c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80085a0:	e016      	b.n	80085d0 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80085a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80085a6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d010      	beq.n	80085d0 <HAL_UART_IRQHandler+0x67c>
 80085ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	da0c      	bge.n	80085d0 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80085b6:	6878      	ldr	r0, [r7, #4]
 80085b8:	f000 ffe6 	bl	8009588 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80085bc:	e008      	b.n	80085d0 <HAL_UART_IRQHandler+0x67c>
      return;
 80085be:	bf00      	nop
 80085c0:	e006      	b.n	80085d0 <HAL_UART_IRQHandler+0x67c>
    return;
 80085c2:	bf00      	nop
 80085c4:	e004      	b.n	80085d0 <HAL_UART_IRQHandler+0x67c>
      return;
 80085c6:	bf00      	nop
 80085c8:	e002      	b.n	80085d0 <HAL_UART_IRQHandler+0x67c>
      return;
 80085ca:	bf00      	nop
 80085cc:	e000      	b.n	80085d0 <HAL_UART_IRQHandler+0x67c>
    return;
 80085ce:	bf00      	nop
  }
}
 80085d0:	37e8      	adds	r7, #232	@ 0xe8
 80085d2:	46bd      	mov	sp, r7
 80085d4:	bd80      	pop	{r7, pc}
 80085d6:	bf00      	nop

080085d8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80085d8:	b480      	push	{r7}
 80085da:	b083      	sub	sp, #12
 80085dc:	af00      	add	r7, sp, #0
 80085de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80085e0:	bf00      	nop
 80085e2:	370c      	adds	r7, #12
 80085e4:	46bd      	mov	sp, r7
 80085e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ea:	4770      	bx	lr

080085ec <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80085ec:	b480      	push	{r7}
 80085ee:	b083      	sub	sp, #12
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80085f4:	bf00      	nop
 80085f6:	370c      	adds	r7, #12
 80085f8:	46bd      	mov	sp, r7
 80085fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fe:	4770      	bx	lr

08008600 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008600:	b480      	push	{r7}
 8008602:	b083      	sub	sp, #12
 8008604:	af00      	add	r7, sp, #0
 8008606:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8008608:	bf00      	nop
 800860a:	370c      	adds	r7, #12
 800860c:	46bd      	mov	sp, r7
 800860e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008612:	4770      	bx	lr

08008614 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008614:	b480      	push	{r7}
 8008616:	b083      	sub	sp, #12
 8008618:	af00      	add	r7, sp, #0
 800861a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800861c:	bf00      	nop
 800861e:	370c      	adds	r7, #12
 8008620:	46bd      	mov	sp, r7
 8008622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008626:	4770      	bx	lr

08008628 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008628:	b480      	push	{r7}
 800862a:	b083      	sub	sp, #12
 800862c:	af00      	add	r7, sp, #0
 800862e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008630:	bf00      	nop
 8008632:	370c      	adds	r7, #12
 8008634:	46bd      	mov	sp, r7
 8008636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800863a:	4770      	bx	lr

0800863c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800863c:	b480      	push	{r7}
 800863e:	b083      	sub	sp, #12
 8008640:	af00      	add	r7, sp, #0
 8008642:	6078      	str	r0, [r7, #4]
 8008644:	460b      	mov	r3, r1
 8008646:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008648:	bf00      	nop
 800864a:	370c      	adds	r7, #12
 800864c:	46bd      	mov	sp, r7
 800864e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008652:	4770      	bx	lr

08008654 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008654:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008658:	b08c      	sub	sp, #48	@ 0x30
 800865a:	af00      	add	r7, sp, #0
 800865c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800865e:	2300      	movs	r3, #0
 8008660:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008664:	697b      	ldr	r3, [r7, #20]
 8008666:	689a      	ldr	r2, [r3, #8]
 8008668:	697b      	ldr	r3, [r7, #20]
 800866a:	691b      	ldr	r3, [r3, #16]
 800866c:	431a      	orrs	r2, r3
 800866e:	697b      	ldr	r3, [r7, #20]
 8008670:	695b      	ldr	r3, [r3, #20]
 8008672:	431a      	orrs	r2, r3
 8008674:	697b      	ldr	r3, [r7, #20]
 8008676:	69db      	ldr	r3, [r3, #28]
 8008678:	4313      	orrs	r3, r2
 800867a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800867c:	697b      	ldr	r3, [r7, #20]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	681a      	ldr	r2, [r3, #0]
 8008682:	4baa      	ldr	r3, [pc, #680]	@ (800892c <UART_SetConfig+0x2d8>)
 8008684:	4013      	ands	r3, r2
 8008686:	697a      	ldr	r2, [r7, #20]
 8008688:	6812      	ldr	r2, [r2, #0]
 800868a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800868c:	430b      	orrs	r3, r1
 800868e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008690:	697b      	ldr	r3, [r7, #20]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	685b      	ldr	r3, [r3, #4]
 8008696:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800869a:	697b      	ldr	r3, [r7, #20]
 800869c:	68da      	ldr	r2, [r3, #12]
 800869e:	697b      	ldr	r3, [r7, #20]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	430a      	orrs	r2, r1
 80086a4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80086a6:	697b      	ldr	r3, [r7, #20]
 80086a8:	699b      	ldr	r3, [r3, #24]
 80086aa:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80086ac:	697b      	ldr	r3, [r7, #20]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	4a9f      	ldr	r2, [pc, #636]	@ (8008930 <UART_SetConfig+0x2dc>)
 80086b2:	4293      	cmp	r3, r2
 80086b4:	d004      	beq.n	80086c0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80086b6:	697b      	ldr	r3, [r7, #20]
 80086b8:	6a1b      	ldr	r3, [r3, #32]
 80086ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80086bc:	4313      	orrs	r3, r2
 80086be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80086c0:	697b      	ldr	r3, [r7, #20]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	689b      	ldr	r3, [r3, #8]
 80086c6:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80086ca:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80086ce:	697a      	ldr	r2, [r7, #20]
 80086d0:	6812      	ldr	r2, [r2, #0]
 80086d2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80086d4:	430b      	orrs	r3, r1
 80086d6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80086d8:	697b      	ldr	r3, [r7, #20]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086de:	f023 010f 	bic.w	r1, r3, #15
 80086e2:	697b      	ldr	r3, [r7, #20]
 80086e4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80086e6:	697b      	ldr	r3, [r7, #20]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	430a      	orrs	r2, r1
 80086ec:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80086ee:	697b      	ldr	r3, [r7, #20]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	4a90      	ldr	r2, [pc, #576]	@ (8008934 <UART_SetConfig+0x2e0>)
 80086f4:	4293      	cmp	r3, r2
 80086f6:	d125      	bne.n	8008744 <UART_SetConfig+0xf0>
 80086f8:	4b8f      	ldr	r3, [pc, #572]	@ (8008938 <UART_SetConfig+0x2e4>)
 80086fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80086fe:	f003 0303 	and.w	r3, r3, #3
 8008702:	2b03      	cmp	r3, #3
 8008704:	d81a      	bhi.n	800873c <UART_SetConfig+0xe8>
 8008706:	a201      	add	r2, pc, #4	@ (adr r2, 800870c <UART_SetConfig+0xb8>)
 8008708:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800870c:	0800871d 	.word	0x0800871d
 8008710:	0800872d 	.word	0x0800872d
 8008714:	08008725 	.word	0x08008725
 8008718:	08008735 	.word	0x08008735
 800871c:	2301      	movs	r3, #1
 800871e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008722:	e116      	b.n	8008952 <UART_SetConfig+0x2fe>
 8008724:	2302      	movs	r3, #2
 8008726:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800872a:	e112      	b.n	8008952 <UART_SetConfig+0x2fe>
 800872c:	2304      	movs	r3, #4
 800872e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008732:	e10e      	b.n	8008952 <UART_SetConfig+0x2fe>
 8008734:	2308      	movs	r3, #8
 8008736:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800873a:	e10a      	b.n	8008952 <UART_SetConfig+0x2fe>
 800873c:	2310      	movs	r3, #16
 800873e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008742:	e106      	b.n	8008952 <UART_SetConfig+0x2fe>
 8008744:	697b      	ldr	r3, [r7, #20]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	4a7c      	ldr	r2, [pc, #496]	@ (800893c <UART_SetConfig+0x2e8>)
 800874a:	4293      	cmp	r3, r2
 800874c:	d138      	bne.n	80087c0 <UART_SetConfig+0x16c>
 800874e:	4b7a      	ldr	r3, [pc, #488]	@ (8008938 <UART_SetConfig+0x2e4>)
 8008750:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008754:	f003 030c 	and.w	r3, r3, #12
 8008758:	2b0c      	cmp	r3, #12
 800875a:	d82d      	bhi.n	80087b8 <UART_SetConfig+0x164>
 800875c:	a201      	add	r2, pc, #4	@ (adr r2, 8008764 <UART_SetConfig+0x110>)
 800875e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008762:	bf00      	nop
 8008764:	08008799 	.word	0x08008799
 8008768:	080087b9 	.word	0x080087b9
 800876c:	080087b9 	.word	0x080087b9
 8008770:	080087b9 	.word	0x080087b9
 8008774:	080087a9 	.word	0x080087a9
 8008778:	080087b9 	.word	0x080087b9
 800877c:	080087b9 	.word	0x080087b9
 8008780:	080087b9 	.word	0x080087b9
 8008784:	080087a1 	.word	0x080087a1
 8008788:	080087b9 	.word	0x080087b9
 800878c:	080087b9 	.word	0x080087b9
 8008790:	080087b9 	.word	0x080087b9
 8008794:	080087b1 	.word	0x080087b1
 8008798:	2300      	movs	r3, #0
 800879a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800879e:	e0d8      	b.n	8008952 <UART_SetConfig+0x2fe>
 80087a0:	2302      	movs	r3, #2
 80087a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80087a6:	e0d4      	b.n	8008952 <UART_SetConfig+0x2fe>
 80087a8:	2304      	movs	r3, #4
 80087aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80087ae:	e0d0      	b.n	8008952 <UART_SetConfig+0x2fe>
 80087b0:	2308      	movs	r3, #8
 80087b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80087b6:	e0cc      	b.n	8008952 <UART_SetConfig+0x2fe>
 80087b8:	2310      	movs	r3, #16
 80087ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80087be:	e0c8      	b.n	8008952 <UART_SetConfig+0x2fe>
 80087c0:	697b      	ldr	r3, [r7, #20]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	4a5e      	ldr	r2, [pc, #376]	@ (8008940 <UART_SetConfig+0x2ec>)
 80087c6:	4293      	cmp	r3, r2
 80087c8:	d125      	bne.n	8008816 <UART_SetConfig+0x1c2>
 80087ca:	4b5b      	ldr	r3, [pc, #364]	@ (8008938 <UART_SetConfig+0x2e4>)
 80087cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80087d0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80087d4:	2b30      	cmp	r3, #48	@ 0x30
 80087d6:	d016      	beq.n	8008806 <UART_SetConfig+0x1b2>
 80087d8:	2b30      	cmp	r3, #48	@ 0x30
 80087da:	d818      	bhi.n	800880e <UART_SetConfig+0x1ba>
 80087dc:	2b20      	cmp	r3, #32
 80087de:	d00a      	beq.n	80087f6 <UART_SetConfig+0x1a2>
 80087e0:	2b20      	cmp	r3, #32
 80087e2:	d814      	bhi.n	800880e <UART_SetConfig+0x1ba>
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d002      	beq.n	80087ee <UART_SetConfig+0x19a>
 80087e8:	2b10      	cmp	r3, #16
 80087ea:	d008      	beq.n	80087fe <UART_SetConfig+0x1aa>
 80087ec:	e00f      	b.n	800880e <UART_SetConfig+0x1ba>
 80087ee:	2300      	movs	r3, #0
 80087f0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80087f4:	e0ad      	b.n	8008952 <UART_SetConfig+0x2fe>
 80087f6:	2302      	movs	r3, #2
 80087f8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80087fc:	e0a9      	b.n	8008952 <UART_SetConfig+0x2fe>
 80087fe:	2304      	movs	r3, #4
 8008800:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008804:	e0a5      	b.n	8008952 <UART_SetConfig+0x2fe>
 8008806:	2308      	movs	r3, #8
 8008808:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800880c:	e0a1      	b.n	8008952 <UART_SetConfig+0x2fe>
 800880e:	2310      	movs	r3, #16
 8008810:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008814:	e09d      	b.n	8008952 <UART_SetConfig+0x2fe>
 8008816:	697b      	ldr	r3, [r7, #20]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	4a4a      	ldr	r2, [pc, #296]	@ (8008944 <UART_SetConfig+0x2f0>)
 800881c:	4293      	cmp	r3, r2
 800881e:	d125      	bne.n	800886c <UART_SetConfig+0x218>
 8008820:	4b45      	ldr	r3, [pc, #276]	@ (8008938 <UART_SetConfig+0x2e4>)
 8008822:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008826:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800882a:	2bc0      	cmp	r3, #192	@ 0xc0
 800882c:	d016      	beq.n	800885c <UART_SetConfig+0x208>
 800882e:	2bc0      	cmp	r3, #192	@ 0xc0
 8008830:	d818      	bhi.n	8008864 <UART_SetConfig+0x210>
 8008832:	2b80      	cmp	r3, #128	@ 0x80
 8008834:	d00a      	beq.n	800884c <UART_SetConfig+0x1f8>
 8008836:	2b80      	cmp	r3, #128	@ 0x80
 8008838:	d814      	bhi.n	8008864 <UART_SetConfig+0x210>
 800883a:	2b00      	cmp	r3, #0
 800883c:	d002      	beq.n	8008844 <UART_SetConfig+0x1f0>
 800883e:	2b40      	cmp	r3, #64	@ 0x40
 8008840:	d008      	beq.n	8008854 <UART_SetConfig+0x200>
 8008842:	e00f      	b.n	8008864 <UART_SetConfig+0x210>
 8008844:	2300      	movs	r3, #0
 8008846:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800884a:	e082      	b.n	8008952 <UART_SetConfig+0x2fe>
 800884c:	2302      	movs	r3, #2
 800884e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008852:	e07e      	b.n	8008952 <UART_SetConfig+0x2fe>
 8008854:	2304      	movs	r3, #4
 8008856:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800885a:	e07a      	b.n	8008952 <UART_SetConfig+0x2fe>
 800885c:	2308      	movs	r3, #8
 800885e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008862:	e076      	b.n	8008952 <UART_SetConfig+0x2fe>
 8008864:	2310      	movs	r3, #16
 8008866:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800886a:	e072      	b.n	8008952 <UART_SetConfig+0x2fe>
 800886c:	697b      	ldr	r3, [r7, #20]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	4a35      	ldr	r2, [pc, #212]	@ (8008948 <UART_SetConfig+0x2f4>)
 8008872:	4293      	cmp	r3, r2
 8008874:	d12a      	bne.n	80088cc <UART_SetConfig+0x278>
 8008876:	4b30      	ldr	r3, [pc, #192]	@ (8008938 <UART_SetConfig+0x2e4>)
 8008878:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800887c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008880:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008884:	d01a      	beq.n	80088bc <UART_SetConfig+0x268>
 8008886:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800888a:	d81b      	bhi.n	80088c4 <UART_SetConfig+0x270>
 800888c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008890:	d00c      	beq.n	80088ac <UART_SetConfig+0x258>
 8008892:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008896:	d815      	bhi.n	80088c4 <UART_SetConfig+0x270>
 8008898:	2b00      	cmp	r3, #0
 800889a:	d003      	beq.n	80088a4 <UART_SetConfig+0x250>
 800889c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80088a0:	d008      	beq.n	80088b4 <UART_SetConfig+0x260>
 80088a2:	e00f      	b.n	80088c4 <UART_SetConfig+0x270>
 80088a4:	2300      	movs	r3, #0
 80088a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80088aa:	e052      	b.n	8008952 <UART_SetConfig+0x2fe>
 80088ac:	2302      	movs	r3, #2
 80088ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80088b2:	e04e      	b.n	8008952 <UART_SetConfig+0x2fe>
 80088b4:	2304      	movs	r3, #4
 80088b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80088ba:	e04a      	b.n	8008952 <UART_SetConfig+0x2fe>
 80088bc:	2308      	movs	r3, #8
 80088be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80088c2:	e046      	b.n	8008952 <UART_SetConfig+0x2fe>
 80088c4:	2310      	movs	r3, #16
 80088c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80088ca:	e042      	b.n	8008952 <UART_SetConfig+0x2fe>
 80088cc:	697b      	ldr	r3, [r7, #20]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	4a17      	ldr	r2, [pc, #92]	@ (8008930 <UART_SetConfig+0x2dc>)
 80088d2:	4293      	cmp	r3, r2
 80088d4:	d13a      	bne.n	800894c <UART_SetConfig+0x2f8>
 80088d6:	4b18      	ldr	r3, [pc, #96]	@ (8008938 <UART_SetConfig+0x2e4>)
 80088d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80088dc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80088e0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80088e4:	d01a      	beq.n	800891c <UART_SetConfig+0x2c8>
 80088e6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80088ea:	d81b      	bhi.n	8008924 <UART_SetConfig+0x2d0>
 80088ec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80088f0:	d00c      	beq.n	800890c <UART_SetConfig+0x2b8>
 80088f2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80088f6:	d815      	bhi.n	8008924 <UART_SetConfig+0x2d0>
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d003      	beq.n	8008904 <UART_SetConfig+0x2b0>
 80088fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008900:	d008      	beq.n	8008914 <UART_SetConfig+0x2c0>
 8008902:	e00f      	b.n	8008924 <UART_SetConfig+0x2d0>
 8008904:	2300      	movs	r3, #0
 8008906:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800890a:	e022      	b.n	8008952 <UART_SetConfig+0x2fe>
 800890c:	2302      	movs	r3, #2
 800890e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008912:	e01e      	b.n	8008952 <UART_SetConfig+0x2fe>
 8008914:	2304      	movs	r3, #4
 8008916:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800891a:	e01a      	b.n	8008952 <UART_SetConfig+0x2fe>
 800891c:	2308      	movs	r3, #8
 800891e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008922:	e016      	b.n	8008952 <UART_SetConfig+0x2fe>
 8008924:	2310      	movs	r3, #16
 8008926:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800892a:	e012      	b.n	8008952 <UART_SetConfig+0x2fe>
 800892c:	cfff69f3 	.word	0xcfff69f3
 8008930:	40008000 	.word	0x40008000
 8008934:	40013800 	.word	0x40013800
 8008938:	40021000 	.word	0x40021000
 800893c:	40004400 	.word	0x40004400
 8008940:	40004800 	.word	0x40004800
 8008944:	40004c00 	.word	0x40004c00
 8008948:	40005000 	.word	0x40005000
 800894c:	2310      	movs	r3, #16
 800894e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008952:	697b      	ldr	r3, [r7, #20]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	4aae      	ldr	r2, [pc, #696]	@ (8008c10 <UART_SetConfig+0x5bc>)
 8008958:	4293      	cmp	r3, r2
 800895a:	f040 8097 	bne.w	8008a8c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800895e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008962:	2b08      	cmp	r3, #8
 8008964:	d823      	bhi.n	80089ae <UART_SetConfig+0x35a>
 8008966:	a201      	add	r2, pc, #4	@ (adr r2, 800896c <UART_SetConfig+0x318>)
 8008968:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800896c:	08008991 	.word	0x08008991
 8008970:	080089af 	.word	0x080089af
 8008974:	08008999 	.word	0x08008999
 8008978:	080089af 	.word	0x080089af
 800897c:	0800899f 	.word	0x0800899f
 8008980:	080089af 	.word	0x080089af
 8008984:	080089af 	.word	0x080089af
 8008988:	080089af 	.word	0x080089af
 800898c:	080089a7 	.word	0x080089a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008990:	f7fd f8ac 	bl	8005aec <HAL_RCC_GetPCLK1Freq>
 8008994:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008996:	e010      	b.n	80089ba <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008998:	4b9e      	ldr	r3, [pc, #632]	@ (8008c14 <UART_SetConfig+0x5c0>)
 800899a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800899c:	e00d      	b.n	80089ba <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800899e:	f7fd f837 	bl	8005a10 <HAL_RCC_GetSysClockFreq>
 80089a2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80089a4:	e009      	b.n	80089ba <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80089a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80089aa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80089ac:	e005      	b.n	80089ba <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80089ae:	2300      	movs	r3, #0
 80089b0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80089b2:	2301      	movs	r3, #1
 80089b4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80089b8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80089ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089bc:	2b00      	cmp	r3, #0
 80089be:	f000 8130 	beq.w	8008c22 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80089c2:	697b      	ldr	r3, [r7, #20]
 80089c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089c6:	4a94      	ldr	r2, [pc, #592]	@ (8008c18 <UART_SetConfig+0x5c4>)
 80089c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80089cc:	461a      	mov	r2, r3
 80089ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089d0:	fbb3 f3f2 	udiv	r3, r3, r2
 80089d4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80089d6:	697b      	ldr	r3, [r7, #20]
 80089d8:	685a      	ldr	r2, [r3, #4]
 80089da:	4613      	mov	r3, r2
 80089dc:	005b      	lsls	r3, r3, #1
 80089de:	4413      	add	r3, r2
 80089e0:	69ba      	ldr	r2, [r7, #24]
 80089e2:	429a      	cmp	r2, r3
 80089e4:	d305      	bcc.n	80089f2 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80089e6:	697b      	ldr	r3, [r7, #20]
 80089e8:	685b      	ldr	r3, [r3, #4]
 80089ea:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80089ec:	69ba      	ldr	r2, [r7, #24]
 80089ee:	429a      	cmp	r2, r3
 80089f0:	d903      	bls.n	80089fa <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80089f2:	2301      	movs	r3, #1
 80089f4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80089f8:	e113      	b.n	8008c22 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80089fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089fc:	2200      	movs	r2, #0
 80089fe:	60bb      	str	r3, [r7, #8]
 8008a00:	60fa      	str	r2, [r7, #12]
 8008a02:	697b      	ldr	r3, [r7, #20]
 8008a04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a06:	4a84      	ldr	r2, [pc, #528]	@ (8008c18 <UART_SetConfig+0x5c4>)
 8008a08:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008a0c:	b29b      	uxth	r3, r3
 8008a0e:	2200      	movs	r2, #0
 8008a10:	603b      	str	r3, [r7, #0]
 8008a12:	607a      	str	r2, [r7, #4]
 8008a14:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008a18:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008a1c:	f7f8 f8f6 	bl	8000c0c <__aeabi_uldivmod>
 8008a20:	4602      	mov	r2, r0
 8008a22:	460b      	mov	r3, r1
 8008a24:	4610      	mov	r0, r2
 8008a26:	4619      	mov	r1, r3
 8008a28:	f04f 0200 	mov.w	r2, #0
 8008a2c:	f04f 0300 	mov.w	r3, #0
 8008a30:	020b      	lsls	r3, r1, #8
 8008a32:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008a36:	0202      	lsls	r2, r0, #8
 8008a38:	6979      	ldr	r1, [r7, #20]
 8008a3a:	6849      	ldr	r1, [r1, #4]
 8008a3c:	0849      	lsrs	r1, r1, #1
 8008a3e:	2000      	movs	r0, #0
 8008a40:	460c      	mov	r4, r1
 8008a42:	4605      	mov	r5, r0
 8008a44:	eb12 0804 	adds.w	r8, r2, r4
 8008a48:	eb43 0905 	adc.w	r9, r3, r5
 8008a4c:	697b      	ldr	r3, [r7, #20]
 8008a4e:	685b      	ldr	r3, [r3, #4]
 8008a50:	2200      	movs	r2, #0
 8008a52:	469a      	mov	sl, r3
 8008a54:	4693      	mov	fp, r2
 8008a56:	4652      	mov	r2, sl
 8008a58:	465b      	mov	r3, fp
 8008a5a:	4640      	mov	r0, r8
 8008a5c:	4649      	mov	r1, r9
 8008a5e:	f7f8 f8d5 	bl	8000c0c <__aeabi_uldivmod>
 8008a62:	4602      	mov	r2, r0
 8008a64:	460b      	mov	r3, r1
 8008a66:	4613      	mov	r3, r2
 8008a68:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008a6a:	6a3b      	ldr	r3, [r7, #32]
 8008a6c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008a70:	d308      	bcc.n	8008a84 <UART_SetConfig+0x430>
 8008a72:	6a3b      	ldr	r3, [r7, #32]
 8008a74:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008a78:	d204      	bcs.n	8008a84 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8008a7a:	697b      	ldr	r3, [r7, #20]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	6a3a      	ldr	r2, [r7, #32]
 8008a80:	60da      	str	r2, [r3, #12]
 8008a82:	e0ce      	b.n	8008c22 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8008a84:	2301      	movs	r3, #1
 8008a86:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008a8a:	e0ca      	b.n	8008c22 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008a8c:	697b      	ldr	r3, [r7, #20]
 8008a8e:	69db      	ldr	r3, [r3, #28]
 8008a90:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008a94:	d166      	bne.n	8008b64 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8008a96:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008a9a:	2b08      	cmp	r3, #8
 8008a9c:	d827      	bhi.n	8008aee <UART_SetConfig+0x49a>
 8008a9e:	a201      	add	r2, pc, #4	@ (adr r2, 8008aa4 <UART_SetConfig+0x450>)
 8008aa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008aa4:	08008ac9 	.word	0x08008ac9
 8008aa8:	08008ad1 	.word	0x08008ad1
 8008aac:	08008ad9 	.word	0x08008ad9
 8008ab0:	08008aef 	.word	0x08008aef
 8008ab4:	08008adf 	.word	0x08008adf
 8008ab8:	08008aef 	.word	0x08008aef
 8008abc:	08008aef 	.word	0x08008aef
 8008ac0:	08008aef 	.word	0x08008aef
 8008ac4:	08008ae7 	.word	0x08008ae7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008ac8:	f7fd f810 	bl	8005aec <HAL_RCC_GetPCLK1Freq>
 8008acc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008ace:	e014      	b.n	8008afa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008ad0:	f7fd f822 	bl	8005b18 <HAL_RCC_GetPCLK2Freq>
 8008ad4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008ad6:	e010      	b.n	8008afa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008ad8:	4b4e      	ldr	r3, [pc, #312]	@ (8008c14 <UART_SetConfig+0x5c0>)
 8008ada:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008adc:	e00d      	b.n	8008afa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008ade:	f7fc ff97 	bl	8005a10 <HAL_RCC_GetSysClockFreq>
 8008ae2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008ae4:	e009      	b.n	8008afa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008ae6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008aea:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008aec:	e005      	b.n	8008afa <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8008aee:	2300      	movs	r3, #0
 8008af0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008af2:	2301      	movs	r3, #1
 8008af4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008af8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008afa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	f000 8090 	beq.w	8008c22 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008b02:	697b      	ldr	r3, [r7, #20]
 8008b04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b06:	4a44      	ldr	r2, [pc, #272]	@ (8008c18 <UART_SetConfig+0x5c4>)
 8008b08:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008b0c:	461a      	mov	r2, r3
 8008b0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b10:	fbb3 f3f2 	udiv	r3, r3, r2
 8008b14:	005a      	lsls	r2, r3, #1
 8008b16:	697b      	ldr	r3, [r7, #20]
 8008b18:	685b      	ldr	r3, [r3, #4]
 8008b1a:	085b      	lsrs	r3, r3, #1
 8008b1c:	441a      	add	r2, r3
 8008b1e:	697b      	ldr	r3, [r7, #20]
 8008b20:	685b      	ldr	r3, [r3, #4]
 8008b22:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b26:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008b28:	6a3b      	ldr	r3, [r7, #32]
 8008b2a:	2b0f      	cmp	r3, #15
 8008b2c:	d916      	bls.n	8008b5c <UART_SetConfig+0x508>
 8008b2e:	6a3b      	ldr	r3, [r7, #32]
 8008b30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008b34:	d212      	bcs.n	8008b5c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008b36:	6a3b      	ldr	r3, [r7, #32]
 8008b38:	b29b      	uxth	r3, r3
 8008b3a:	f023 030f 	bic.w	r3, r3, #15
 8008b3e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008b40:	6a3b      	ldr	r3, [r7, #32]
 8008b42:	085b      	lsrs	r3, r3, #1
 8008b44:	b29b      	uxth	r3, r3
 8008b46:	f003 0307 	and.w	r3, r3, #7
 8008b4a:	b29a      	uxth	r2, r3
 8008b4c:	8bfb      	ldrh	r3, [r7, #30]
 8008b4e:	4313      	orrs	r3, r2
 8008b50:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8008b52:	697b      	ldr	r3, [r7, #20]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	8bfa      	ldrh	r2, [r7, #30]
 8008b58:	60da      	str	r2, [r3, #12]
 8008b5a:	e062      	b.n	8008c22 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8008b5c:	2301      	movs	r3, #1
 8008b5e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008b62:	e05e      	b.n	8008c22 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008b64:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008b68:	2b08      	cmp	r3, #8
 8008b6a:	d828      	bhi.n	8008bbe <UART_SetConfig+0x56a>
 8008b6c:	a201      	add	r2, pc, #4	@ (adr r2, 8008b74 <UART_SetConfig+0x520>)
 8008b6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b72:	bf00      	nop
 8008b74:	08008b99 	.word	0x08008b99
 8008b78:	08008ba1 	.word	0x08008ba1
 8008b7c:	08008ba9 	.word	0x08008ba9
 8008b80:	08008bbf 	.word	0x08008bbf
 8008b84:	08008baf 	.word	0x08008baf
 8008b88:	08008bbf 	.word	0x08008bbf
 8008b8c:	08008bbf 	.word	0x08008bbf
 8008b90:	08008bbf 	.word	0x08008bbf
 8008b94:	08008bb7 	.word	0x08008bb7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008b98:	f7fc ffa8 	bl	8005aec <HAL_RCC_GetPCLK1Freq>
 8008b9c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008b9e:	e014      	b.n	8008bca <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008ba0:	f7fc ffba 	bl	8005b18 <HAL_RCC_GetPCLK2Freq>
 8008ba4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008ba6:	e010      	b.n	8008bca <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008ba8:	4b1a      	ldr	r3, [pc, #104]	@ (8008c14 <UART_SetConfig+0x5c0>)
 8008baa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008bac:	e00d      	b.n	8008bca <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008bae:	f7fc ff2f 	bl	8005a10 <HAL_RCC_GetSysClockFreq>
 8008bb2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008bb4:	e009      	b.n	8008bca <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008bb6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008bba:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008bbc:	e005      	b.n	8008bca <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8008bbe:	2300      	movs	r3, #0
 8008bc0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008bc2:	2301      	movs	r3, #1
 8008bc4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008bc8:	bf00      	nop
    }

    if (pclk != 0U)
 8008bca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d028      	beq.n	8008c22 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008bd0:	697b      	ldr	r3, [r7, #20]
 8008bd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008bd4:	4a10      	ldr	r2, [pc, #64]	@ (8008c18 <UART_SetConfig+0x5c4>)
 8008bd6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008bda:	461a      	mov	r2, r3
 8008bdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bde:	fbb3 f2f2 	udiv	r2, r3, r2
 8008be2:	697b      	ldr	r3, [r7, #20]
 8008be4:	685b      	ldr	r3, [r3, #4]
 8008be6:	085b      	lsrs	r3, r3, #1
 8008be8:	441a      	add	r2, r3
 8008bea:	697b      	ldr	r3, [r7, #20]
 8008bec:	685b      	ldr	r3, [r3, #4]
 8008bee:	fbb2 f3f3 	udiv	r3, r2, r3
 8008bf2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008bf4:	6a3b      	ldr	r3, [r7, #32]
 8008bf6:	2b0f      	cmp	r3, #15
 8008bf8:	d910      	bls.n	8008c1c <UART_SetConfig+0x5c8>
 8008bfa:	6a3b      	ldr	r3, [r7, #32]
 8008bfc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008c00:	d20c      	bcs.n	8008c1c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008c02:	6a3b      	ldr	r3, [r7, #32]
 8008c04:	b29a      	uxth	r2, r3
 8008c06:	697b      	ldr	r3, [r7, #20]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	60da      	str	r2, [r3, #12]
 8008c0c:	e009      	b.n	8008c22 <UART_SetConfig+0x5ce>
 8008c0e:	bf00      	nop
 8008c10:	40008000 	.word	0x40008000
 8008c14:	00f42400 	.word	0x00f42400
 8008c18:	0801cd44 	.word	0x0801cd44
      }
      else
      {
        ret = HAL_ERROR;
 8008c1c:	2301      	movs	r3, #1
 8008c1e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008c22:	697b      	ldr	r3, [r7, #20]
 8008c24:	2201      	movs	r2, #1
 8008c26:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8008c2a:	697b      	ldr	r3, [r7, #20]
 8008c2c:	2201      	movs	r2, #1
 8008c2e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008c32:	697b      	ldr	r3, [r7, #20]
 8008c34:	2200      	movs	r2, #0
 8008c36:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8008c38:	697b      	ldr	r3, [r7, #20]
 8008c3a:	2200      	movs	r2, #0
 8008c3c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8008c3e:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8008c42:	4618      	mov	r0, r3
 8008c44:	3730      	adds	r7, #48	@ 0x30
 8008c46:	46bd      	mov	sp, r7
 8008c48:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08008c4c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008c4c:	b480      	push	{r7}
 8008c4e:	b083      	sub	sp, #12
 8008c50:	af00      	add	r7, sp, #0
 8008c52:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c58:	f003 0308 	and.w	r3, r3, #8
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d00a      	beq.n	8008c76 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	685b      	ldr	r3, [r3, #4]
 8008c66:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	430a      	orrs	r2, r1
 8008c74:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c7a:	f003 0301 	and.w	r3, r3, #1
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d00a      	beq.n	8008c98 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	685b      	ldr	r3, [r3, #4]
 8008c88:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	430a      	orrs	r2, r1
 8008c96:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c9c:	f003 0302 	and.w	r3, r3, #2
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d00a      	beq.n	8008cba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	685b      	ldr	r3, [r3, #4]
 8008caa:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	430a      	orrs	r2, r1
 8008cb8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008cbe:	f003 0304 	and.w	r3, r3, #4
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d00a      	beq.n	8008cdc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	685b      	ldr	r3, [r3, #4]
 8008ccc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	430a      	orrs	r2, r1
 8008cda:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ce0:	f003 0310 	and.w	r3, r3, #16
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d00a      	beq.n	8008cfe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	689b      	ldr	r3, [r3, #8]
 8008cee:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	430a      	orrs	r2, r1
 8008cfc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d02:	f003 0320 	and.w	r3, r3, #32
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d00a      	beq.n	8008d20 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	689b      	ldr	r3, [r3, #8]
 8008d10:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	430a      	orrs	r2, r1
 8008d1e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d01a      	beq.n	8008d62 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	685b      	ldr	r3, [r3, #4]
 8008d32:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	430a      	orrs	r2, r1
 8008d40:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008d46:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008d4a:	d10a      	bne.n	8008d62 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	685b      	ldr	r3, [r3, #4]
 8008d52:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	430a      	orrs	r2, r1
 8008d60:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d00a      	beq.n	8008d84 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	685b      	ldr	r3, [r3, #4]
 8008d74:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	430a      	orrs	r2, r1
 8008d82:	605a      	str	r2, [r3, #4]
  }
}
 8008d84:	bf00      	nop
 8008d86:	370c      	adds	r7, #12
 8008d88:	46bd      	mov	sp, r7
 8008d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d8e:	4770      	bx	lr

08008d90 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008d90:	b580      	push	{r7, lr}
 8008d92:	b098      	sub	sp, #96	@ 0x60
 8008d94:	af02      	add	r7, sp, #8
 8008d96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	2200      	movs	r2, #0
 8008d9c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008da0:	f7fb fae4 	bl	800436c <HAL_GetTick>
 8008da4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	f003 0308 	and.w	r3, r3, #8
 8008db0:	2b08      	cmp	r3, #8
 8008db2:	d12f      	bne.n	8008e14 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008db4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008db8:	9300      	str	r3, [sp, #0]
 8008dba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008dbc:	2200      	movs	r2, #0
 8008dbe:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008dc2:	6878      	ldr	r0, [r7, #4]
 8008dc4:	f000 f88e 	bl	8008ee4 <UART_WaitOnFlagUntilTimeout>
 8008dc8:	4603      	mov	r3, r0
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d022      	beq.n	8008e14 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008dd6:	e853 3f00 	ldrex	r3, [r3]
 8008dda:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008ddc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008dde:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008de2:	653b      	str	r3, [r7, #80]	@ 0x50
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	461a      	mov	r2, r3
 8008dea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008dec:	647b      	str	r3, [r7, #68]	@ 0x44
 8008dee:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008df0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008df2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008df4:	e841 2300 	strex	r3, r2, [r1]
 8008df8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008dfa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d1e6      	bne.n	8008dce <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	2220      	movs	r2, #32
 8008e04:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	2200      	movs	r2, #0
 8008e0c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008e10:	2303      	movs	r3, #3
 8008e12:	e063      	b.n	8008edc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	f003 0304 	and.w	r3, r3, #4
 8008e1e:	2b04      	cmp	r3, #4
 8008e20:	d149      	bne.n	8008eb6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008e22:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008e26:	9300      	str	r3, [sp, #0]
 8008e28:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008e2a:	2200      	movs	r2, #0
 8008e2c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008e30:	6878      	ldr	r0, [r7, #4]
 8008e32:	f000 f857 	bl	8008ee4 <UART_WaitOnFlagUntilTimeout>
 8008e36:	4603      	mov	r3, r0
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d03c      	beq.n	8008eb6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e44:	e853 3f00 	ldrex	r3, [r3]
 8008e48:	623b      	str	r3, [r7, #32]
   return(result);
 8008e4a:	6a3b      	ldr	r3, [r7, #32]
 8008e4c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008e50:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	461a      	mov	r2, r3
 8008e58:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008e5a:	633b      	str	r3, [r7, #48]	@ 0x30
 8008e5c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e5e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008e60:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008e62:	e841 2300 	strex	r3, r2, [r1]
 8008e66:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008e68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d1e6      	bne.n	8008e3c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	3308      	adds	r3, #8
 8008e74:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e76:	693b      	ldr	r3, [r7, #16]
 8008e78:	e853 3f00 	ldrex	r3, [r3]
 8008e7c:	60fb      	str	r3, [r7, #12]
   return(result);
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	f023 0301 	bic.w	r3, r3, #1
 8008e84:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	3308      	adds	r3, #8
 8008e8c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008e8e:	61fa      	str	r2, [r7, #28]
 8008e90:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e92:	69b9      	ldr	r1, [r7, #24]
 8008e94:	69fa      	ldr	r2, [r7, #28]
 8008e96:	e841 2300 	strex	r3, r2, [r1]
 8008e9a:	617b      	str	r3, [r7, #20]
   return(result);
 8008e9c:	697b      	ldr	r3, [r7, #20]
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d1e5      	bne.n	8008e6e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	2220      	movs	r2, #32
 8008ea6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	2200      	movs	r2, #0
 8008eae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008eb2:	2303      	movs	r3, #3
 8008eb4:	e012      	b.n	8008edc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	2220      	movs	r2, #32
 8008eba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	2220      	movs	r2, #32
 8008ec2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	2200      	movs	r2, #0
 8008eca:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	2200      	movs	r2, #0
 8008ed0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	2200      	movs	r2, #0
 8008ed6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008eda:	2300      	movs	r3, #0
}
 8008edc:	4618      	mov	r0, r3
 8008ede:	3758      	adds	r7, #88	@ 0x58
 8008ee0:	46bd      	mov	sp, r7
 8008ee2:	bd80      	pop	{r7, pc}

08008ee4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008ee4:	b580      	push	{r7, lr}
 8008ee6:	b084      	sub	sp, #16
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	60f8      	str	r0, [r7, #12]
 8008eec:	60b9      	str	r1, [r7, #8]
 8008eee:	603b      	str	r3, [r7, #0]
 8008ef0:	4613      	mov	r3, r2
 8008ef2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008ef4:	e04f      	b.n	8008f96 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008ef6:	69bb      	ldr	r3, [r7, #24]
 8008ef8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008efc:	d04b      	beq.n	8008f96 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008efe:	f7fb fa35 	bl	800436c <HAL_GetTick>
 8008f02:	4602      	mov	r2, r0
 8008f04:	683b      	ldr	r3, [r7, #0]
 8008f06:	1ad3      	subs	r3, r2, r3
 8008f08:	69ba      	ldr	r2, [r7, #24]
 8008f0a:	429a      	cmp	r2, r3
 8008f0c:	d302      	bcc.n	8008f14 <UART_WaitOnFlagUntilTimeout+0x30>
 8008f0e:	69bb      	ldr	r3, [r7, #24]
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d101      	bne.n	8008f18 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008f14:	2303      	movs	r3, #3
 8008f16:	e04e      	b.n	8008fb6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	f003 0304 	and.w	r3, r3, #4
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d037      	beq.n	8008f96 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008f26:	68bb      	ldr	r3, [r7, #8]
 8008f28:	2b80      	cmp	r3, #128	@ 0x80
 8008f2a:	d034      	beq.n	8008f96 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008f2c:	68bb      	ldr	r3, [r7, #8]
 8008f2e:	2b40      	cmp	r3, #64	@ 0x40
 8008f30:	d031      	beq.n	8008f96 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	69db      	ldr	r3, [r3, #28]
 8008f38:	f003 0308 	and.w	r3, r3, #8
 8008f3c:	2b08      	cmp	r3, #8
 8008f3e:	d110      	bne.n	8008f62 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	2208      	movs	r2, #8
 8008f46:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008f48:	68f8      	ldr	r0, [r7, #12]
 8008f4a:	f000 f920 	bl	800918e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	2208      	movs	r2, #8
 8008f52:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	2200      	movs	r2, #0
 8008f5a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8008f5e:	2301      	movs	r3, #1
 8008f60:	e029      	b.n	8008fb6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	69db      	ldr	r3, [r3, #28]
 8008f68:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008f6c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008f70:	d111      	bne.n	8008f96 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008f7a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008f7c:	68f8      	ldr	r0, [r7, #12]
 8008f7e:	f000 f906 	bl	800918e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	2220      	movs	r2, #32
 8008f86:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	2200      	movs	r2, #0
 8008f8e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8008f92:	2303      	movs	r3, #3
 8008f94:	e00f      	b.n	8008fb6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	69da      	ldr	r2, [r3, #28]
 8008f9c:	68bb      	ldr	r3, [r7, #8]
 8008f9e:	4013      	ands	r3, r2
 8008fa0:	68ba      	ldr	r2, [r7, #8]
 8008fa2:	429a      	cmp	r2, r3
 8008fa4:	bf0c      	ite	eq
 8008fa6:	2301      	moveq	r3, #1
 8008fa8:	2300      	movne	r3, #0
 8008faa:	b2db      	uxtb	r3, r3
 8008fac:	461a      	mov	r2, r3
 8008fae:	79fb      	ldrb	r3, [r7, #7]
 8008fb0:	429a      	cmp	r2, r3
 8008fb2:	d0a0      	beq.n	8008ef6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008fb4:	2300      	movs	r3, #0
}
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	3710      	adds	r7, #16
 8008fba:	46bd      	mov	sp, r7
 8008fbc:	bd80      	pop	{r7, pc}
	...

08008fc0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008fc0:	b580      	push	{r7, lr}
 8008fc2:	b096      	sub	sp, #88	@ 0x58
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	60f8      	str	r0, [r7, #12]
 8008fc8:	60b9      	str	r1, [r7, #8]
 8008fca:	4613      	mov	r3, r2
 8008fcc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	68ba      	ldr	r2, [r7, #8]
 8008fd2:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	88fa      	ldrh	r2, [r7, #6]
 8008fd8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	2200      	movs	r2, #0
 8008fe0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	2222      	movs	r2, #34	@ 0x22
 8008fe8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d02d      	beq.n	8009052 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008ffc:	4a40      	ldr	r2, [pc, #256]	@ (8009100 <UART_Start_Receive_DMA+0x140>)
 8008ffe:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009006:	4a3f      	ldr	r2, [pc, #252]	@ (8009104 <UART_Start_Receive_DMA+0x144>)
 8009008:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009010:	4a3d      	ldr	r2, [pc, #244]	@ (8009108 <UART_Start_Receive_DMA+0x148>)
 8009012:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800901a:	2200      	movs	r2, #0
 800901c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	3324      	adds	r3, #36	@ 0x24
 800902a:	4619      	mov	r1, r3
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009030:	461a      	mov	r2, r3
 8009032:	88fb      	ldrh	r3, [r7, #6]
 8009034:	f7fb fb2e 	bl	8004694 <HAL_DMA_Start_IT>
 8009038:	4603      	mov	r3, r0
 800903a:	2b00      	cmp	r3, #0
 800903c:	d009      	beq.n	8009052 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	2210      	movs	r2, #16
 8009042:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	2220      	movs	r2, #32
 800904a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800904e:	2301      	movs	r3, #1
 8009050:	e051      	b.n	80090f6 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	691b      	ldr	r3, [r3, #16]
 8009056:	2b00      	cmp	r3, #0
 8009058:	d018      	beq.n	800908c <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009060:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009062:	e853 3f00 	ldrex	r3, [r3]
 8009066:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009068:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800906a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800906e:	657b      	str	r3, [r7, #84]	@ 0x54
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	461a      	mov	r2, r3
 8009076:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009078:	64bb      	str	r3, [r7, #72]	@ 0x48
 800907a:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800907c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800907e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009080:	e841 2300 	strex	r3, r2, [r1]
 8009084:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8009086:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009088:	2b00      	cmp	r3, #0
 800908a:	d1e6      	bne.n	800905a <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	3308      	adds	r3, #8
 8009092:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009094:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009096:	e853 3f00 	ldrex	r3, [r3]
 800909a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800909c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800909e:	f043 0301 	orr.w	r3, r3, #1
 80090a2:	653b      	str	r3, [r7, #80]	@ 0x50
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	3308      	adds	r3, #8
 80090aa:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80090ac:	637a      	str	r2, [r7, #52]	@ 0x34
 80090ae:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090b0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80090b2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80090b4:	e841 2300 	strex	r3, r2, [r1]
 80090b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80090ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d1e5      	bne.n	800908c <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	3308      	adds	r3, #8
 80090c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090c8:	697b      	ldr	r3, [r7, #20]
 80090ca:	e853 3f00 	ldrex	r3, [r3]
 80090ce:	613b      	str	r3, [r7, #16]
   return(result);
 80090d0:	693b      	ldr	r3, [r7, #16]
 80090d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80090d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	3308      	adds	r3, #8
 80090de:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80090e0:	623a      	str	r2, [r7, #32]
 80090e2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090e4:	69f9      	ldr	r1, [r7, #28]
 80090e6:	6a3a      	ldr	r2, [r7, #32]
 80090e8:	e841 2300 	strex	r3, r2, [r1]
 80090ec:	61bb      	str	r3, [r7, #24]
   return(result);
 80090ee:	69bb      	ldr	r3, [r7, #24]
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d1e5      	bne.n	80090c0 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 80090f4:	2300      	movs	r3, #0
}
 80090f6:	4618      	mov	r0, r3
 80090f8:	3758      	adds	r7, #88	@ 0x58
 80090fa:	46bd      	mov	sp, r7
 80090fc:	bd80      	pop	{r7, pc}
 80090fe:	bf00      	nop
 8009100:	08009311 	.word	0x08009311
 8009104:	0800943d 	.word	0x0800943d
 8009108:	0800947b 	.word	0x0800947b

0800910c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800910c:	b480      	push	{r7}
 800910e:	b08f      	sub	sp, #60	@ 0x3c
 8009110:	af00      	add	r7, sp, #0
 8009112:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800911a:	6a3b      	ldr	r3, [r7, #32]
 800911c:	e853 3f00 	ldrex	r3, [r3]
 8009120:	61fb      	str	r3, [r7, #28]
   return(result);
 8009122:	69fb      	ldr	r3, [r7, #28]
 8009124:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8009128:	637b      	str	r3, [r7, #52]	@ 0x34
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	461a      	mov	r2, r3
 8009130:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009132:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009134:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009136:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009138:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800913a:	e841 2300 	strex	r3, r2, [r1]
 800913e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009140:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009142:	2b00      	cmp	r3, #0
 8009144:	d1e6      	bne.n	8009114 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	3308      	adds	r3, #8
 800914c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	e853 3f00 	ldrex	r3, [r3]
 8009154:	60bb      	str	r3, [r7, #8]
   return(result);
 8009156:	68bb      	ldr	r3, [r7, #8]
 8009158:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800915c:	633b      	str	r3, [r7, #48]	@ 0x30
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	3308      	adds	r3, #8
 8009164:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009166:	61ba      	str	r2, [r7, #24]
 8009168:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800916a:	6979      	ldr	r1, [r7, #20]
 800916c:	69ba      	ldr	r2, [r7, #24]
 800916e:	e841 2300 	strex	r3, r2, [r1]
 8009172:	613b      	str	r3, [r7, #16]
   return(result);
 8009174:	693b      	ldr	r3, [r7, #16]
 8009176:	2b00      	cmp	r3, #0
 8009178:	d1e5      	bne.n	8009146 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	2220      	movs	r2, #32
 800917e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8009182:	bf00      	nop
 8009184:	373c      	adds	r7, #60	@ 0x3c
 8009186:	46bd      	mov	sp, r7
 8009188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800918c:	4770      	bx	lr

0800918e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800918e:	b480      	push	{r7}
 8009190:	b095      	sub	sp, #84	@ 0x54
 8009192:	af00      	add	r7, sp, #0
 8009194:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800919c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800919e:	e853 3f00 	ldrex	r3, [r3]
 80091a2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80091a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091a6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80091aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	461a      	mov	r2, r3
 80091b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80091b4:	643b      	str	r3, [r7, #64]	@ 0x40
 80091b6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091b8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80091ba:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80091bc:	e841 2300 	strex	r3, r2, [r1]
 80091c0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80091c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d1e6      	bne.n	8009196 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	3308      	adds	r3, #8
 80091ce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091d0:	6a3b      	ldr	r3, [r7, #32]
 80091d2:	e853 3f00 	ldrex	r3, [r3]
 80091d6:	61fb      	str	r3, [r7, #28]
   return(result);
 80091d8:	69fb      	ldr	r3, [r7, #28]
 80091da:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80091de:	f023 0301 	bic.w	r3, r3, #1
 80091e2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	3308      	adds	r3, #8
 80091ea:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80091ec:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80091ee:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091f0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80091f2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80091f4:	e841 2300 	strex	r3, r2, [r1]
 80091f8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80091fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d1e3      	bne.n	80091c8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009204:	2b01      	cmp	r3, #1
 8009206:	d118      	bne.n	800923a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	e853 3f00 	ldrex	r3, [r3]
 8009214:	60bb      	str	r3, [r7, #8]
   return(result);
 8009216:	68bb      	ldr	r3, [r7, #8]
 8009218:	f023 0310 	bic.w	r3, r3, #16
 800921c:	647b      	str	r3, [r7, #68]	@ 0x44
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	461a      	mov	r2, r3
 8009224:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009226:	61bb      	str	r3, [r7, #24]
 8009228:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800922a:	6979      	ldr	r1, [r7, #20]
 800922c:	69ba      	ldr	r2, [r7, #24]
 800922e:	e841 2300 	strex	r3, r2, [r1]
 8009232:	613b      	str	r3, [r7, #16]
   return(result);
 8009234:	693b      	ldr	r3, [r7, #16]
 8009236:	2b00      	cmp	r3, #0
 8009238:	d1e6      	bne.n	8009208 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	2220      	movs	r2, #32
 800923e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	2200      	movs	r2, #0
 8009246:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	2200      	movs	r2, #0
 800924c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800924e:	bf00      	nop
 8009250:	3754      	adds	r7, #84	@ 0x54
 8009252:	46bd      	mov	sp, r7
 8009254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009258:	4770      	bx	lr

0800925a <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800925a:	b580      	push	{r7, lr}
 800925c:	b090      	sub	sp, #64	@ 0x40
 800925e:	af00      	add	r7, sp, #0
 8009260:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009266:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	f003 0320 	and.w	r3, r3, #32
 8009272:	2b00      	cmp	r3, #0
 8009274:	d137      	bne.n	80092e6 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8009276:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009278:	2200      	movs	r2, #0
 800927a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800927e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	3308      	adds	r3, #8
 8009284:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009288:	e853 3f00 	ldrex	r3, [r3]
 800928c:	623b      	str	r3, [r7, #32]
   return(result);
 800928e:	6a3b      	ldr	r3, [r7, #32]
 8009290:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009294:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009296:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	3308      	adds	r3, #8
 800929c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800929e:	633a      	str	r2, [r7, #48]	@ 0x30
 80092a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092a2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80092a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80092a6:	e841 2300 	strex	r3, r2, [r1]
 80092aa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80092ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d1e5      	bne.n	800927e <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80092b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092b8:	693b      	ldr	r3, [r7, #16]
 80092ba:	e853 3f00 	ldrex	r3, [r3]
 80092be:	60fb      	str	r3, [r7, #12]
   return(result);
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80092c6:	637b      	str	r3, [r7, #52]	@ 0x34
 80092c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	461a      	mov	r2, r3
 80092ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80092d0:	61fb      	str	r3, [r7, #28]
 80092d2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092d4:	69b9      	ldr	r1, [r7, #24]
 80092d6:	69fa      	ldr	r2, [r7, #28]
 80092d8:	e841 2300 	strex	r3, r2, [r1]
 80092dc:	617b      	str	r3, [r7, #20]
   return(result);
 80092de:	697b      	ldr	r3, [r7, #20]
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d1e6      	bne.n	80092b2 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80092e4:	e002      	b.n	80092ec <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80092e6:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80092e8:	f7ff f976 	bl	80085d8 <HAL_UART_TxCpltCallback>
}
 80092ec:	bf00      	nop
 80092ee:	3740      	adds	r7, #64	@ 0x40
 80092f0:	46bd      	mov	sp, r7
 80092f2:	bd80      	pop	{r7, pc}

080092f4 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80092f4:	b580      	push	{r7, lr}
 80092f6:	b084      	sub	sp, #16
 80092f8:	af00      	add	r7, sp, #0
 80092fa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009300:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8009302:	68f8      	ldr	r0, [r7, #12]
 8009304:	f7ff f972 	bl	80085ec <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009308:	bf00      	nop
 800930a:	3710      	adds	r7, #16
 800930c:	46bd      	mov	sp, r7
 800930e:	bd80      	pop	{r7, pc}

08009310 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009310:	b580      	push	{r7, lr}
 8009312:	b09c      	sub	sp, #112	@ 0x70
 8009314:	af00      	add	r7, sp, #0
 8009316:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800931c:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	f003 0320 	and.w	r3, r3, #32
 8009328:	2b00      	cmp	r3, #0
 800932a:	d171      	bne.n	8009410 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800932c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800932e:	2200      	movs	r2, #0
 8009330:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009334:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800933a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800933c:	e853 3f00 	ldrex	r3, [r3]
 8009340:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009342:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009344:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009348:	66bb      	str	r3, [r7, #104]	@ 0x68
 800934a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	461a      	mov	r2, r3
 8009350:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009352:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009354:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009356:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009358:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800935a:	e841 2300 	strex	r3, r2, [r1]
 800935e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009360:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009362:	2b00      	cmp	r3, #0
 8009364:	d1e6      	bne.n	8009334 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009366:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	3308      	adds	r3, #8
 800936c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800936e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009370:	e853 3f00 	ldrex	r3, [r3]
 8009374:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009376:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009378:	f023 0301 	bic.w	r3, r3, #1
 800937c:	667b      	str	r3, [r7, #100]	@ 0x64
 800937e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	3308      	adds	r3, #8
 8009384:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8009386:	647a      	str	r2, [r7, #68]	@ 0x44
 8009388:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800938a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800938c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800938e:	e841 2300 	strex	r3, r2, [r1]
 8009392:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009394:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009396:	2b00      	cmp	r3, #0
 8009398:	d1e5      	bne.n	8009366 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800939a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	3308      	adds	r3, #8
 80093a0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093a4:	e853 3f00 	ldrex	r3, [r3]
 80093a8:	623b      	str	r3, [r7, #32]
   return(result);
 80093aa:	6a3b      	ldr	r3, [r7, #32]
 80093ac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80093b0:	663b      	str	r3, [r7, #96]	@ 0x60
 80093b2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	3308      	adds	r3, #8
 80093b8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80093ba:	633a      	str	r2, [r7, #48]	@ 0x30
 80093bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093be:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80093c0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80093c2:	e841 2300 	strex	r3, r2, [r1]
 80093c6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80093c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d1e5      	bne.n	800939a <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80093ce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80093d0:	2220      	movs	r2, #32
 80093d2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80093d6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80093d8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80093da:	2b01      	cmp	r3, #1
 80093dc:	d118      	bne.n	8009410 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80093de:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093e4:	693b      	ldr	r3, [r7, #16]
 80093e6:	e853 3f00 	ldrex	r3, [r3]
 80093ea:	60fb      	str	r3, [r7, #12]
   return(result);
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	f023 0310 	bic.w	r3, r3, #16
 80093f2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80093f4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	461a      	mov	r2, r3
 80093fa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80093fc:	61fb      	str	r3, [r7, #28]
 80093fe:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009400:	69b9      	ldr	r1, [r7, #24]
 8009402:	69fa      	ldr	r2, [r7, #28]
 8009404:	e841 2300 	strex	r3, r2, [r1]
 8009408:	617b      	str	r3, [r7, #20]
   return(result);
 800940a:	697b      	ldr	r3, [r7, #20]
 800940c:	2b00      	cmp	r3, #0
 800940e:	d1e6      	bne.n	80093de <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009410:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009412:	2200      	movs	r2, #0
 8009414:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009416:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009418:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800941a:	2b01      	cmp	r3, #1
 800941c:	d107      	bne.n	800942e <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800941e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009420:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009424:	4619      	mov	r1, r3
 8009426:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8009428:	f7ff f908 	bl	800863c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800942c:	e002      	b.n	8009434 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800942e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8009430:	f7ff f8e6 	bl	8008600 <HAL_UART_RxCpltCallback>
}
 8009434:	bf00      	nop
 8009436:	3770      	adds	r7, #112	@ 0x70
 8009438:	46bd      	mov	sp, r7
 800943a:	bd80      	pop	{r7, pc}

0800943c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800943c:	b580      	push	{r7, lr}
 800943e:	b084      	sub	sp, #16
 8009440:	af00      	add	r7, sp, #0
 8009442:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009448:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	2201      	movs	r2, #1
 800944e:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009454:	2b01      	cmp	r3, #1
 8009456:	d109      	bne.n	800946c <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800945e:	085b      	lsrs	r3, r3, #1
 8009460:	b29b      	uxth	r3, r3
 8009462:	4619      	mov	r1, r3
 8009464:	68f8      	ldr	r0, [r7, #12]
 8009466:	f7ff f8e9 	bl	800863c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800946a:	e002      	b.n	8009472 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800946c:	68f8      	ldr	r0, [r7, #12]
 800946e:	f7ff f8d1 	bl	8008614 <HAL_UART_RxHalfCpltCallback>
}
 8009472:	bf00      	nop
 8009474:	3710      	adds	r7, #16
 8009476:	46bd      	mov	sp, r7
 8009478:	bd80      	pop	{r7, pc}

0800947a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800947a:	b580      	push	{r7, lr}
 800947c:	b086      	sub	sp, #24
 800947e:	af00      	add	r7, sp, #0
 8009480:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009486:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8009488:	697b      	ldr	r3, [r7, #20]
 800948a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800948e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8009490:	697b      	ldr	r3, [r7, #20]
 8009492:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009496:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8009498:	697b      	ldr	r3, [r7, #20]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	689b      	ldr	r3, [r3, #8]
 800949e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80094a2:	2b80      	cmp	r3, #128	@ 0x80
 80094a4:	d109      	bne.n	80094ba <UART_DMAError+0x40>
 80094a6:	693b      	ldr	r3, [r7, #16]
 80094a8:	2b21      	cmp	r3, #33	@ 0x21
 80094aa:	d106      	bne.n	80094ba <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80094ac:	697b      	ldr	r3, [r7, #20]
 80094ae:	2200      	movs	r2, #0
 80094b0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 80094b4:	6978      	ldr	r0, [r7, #20]
 80094b6:	f7ff fe29 	bl	800910c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80094ba:	697b      	ldr	r3, [r7, #20]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	689b      	ldr	r3, [r3, #8]
 80094c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80094c4:	2b40      	cmp	r3, #64	@ 0x40
 80094c6:	d109      	bne.n	80094dc <UART_DMAError+0x62>
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	2b22      	cmp	r3, #34	@ 0x22
 80094cc:	d106      	bne.n	80094dc <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80094ce:	697b      	ldr	r3, [r7, #20]
 80094d0:	2200      	movs	r2, #0
 80094d2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 80094d6:	6978      	ldr	r0, [r7, #20]
 80094d8:	f7ff fe59 	bl	800918e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80094dc:	697b      	ldr	r3, [r7, #20]
 80094de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80094e2:	f043 0210 	orr.w	r2, r3, #16
 80094e6:	697b      	ldr	r3, [r7, #20]
 80094e8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80094ec:	6978      	ldr	r0, [r7, #20]
 80094ee:	f7ff f89b 	bl	8008628 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80094f2:	bf00      	nop
 80094f4:	3718      	adds	r7, #24
 80094f6:	46bd      	mov	sp, r7
 80094f8:	bd80      	pop	{r7, pc}

080094fa <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80094fa:	b580      	push	{r7, lr}
 80094fc:	b084      	sub	sp, #16
 80094fe:	af00      	add	r7, sp, #0
 8009500:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009506:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	2200      	movs	r2, #0
 800950c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009510:	68f8      	ldr	r0, [r7, #12]
 8009512:	f7ff f889 	bl	8008628 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009516:	bf00      	nop
 8009518:	3710      	adds	r7, #16
 800951a:	46bd      	mov	sp, r7
 800951c:	bd80      	pop	{r7, pc}

0800951e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800951e:	b580      	push	{r7, lr}
 8009520:	b088      	sub	sp, #32
 8009522:	af00      	add	r7, sp, #0
 8009524:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	e853 3f00 	ldrex	r3, [r3]
 8009532:	60bb      	str	r3, [r7, #8]
   return(result);
 8009534:	68bb      	ldr	r3, [r7, #8]
 8009536:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800953a:	61fb      	str	r3, [r7, #28]
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	461a      	mov	r2, r3
 8009542:	69fb      	ldr	r3, [r7, #28]
 8009544:	61bb      	str	r3, [r7, #24]
 8009546:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009548:	6979      	ldr	r1, [r7, #20]
 800954a:	69ba      	ldr	r2, [r7, #24]
 800954c:	e841 2300 	strex	r3, r2, [r1]
 8009550:	613b      	str	r3, [r7, #16]
   return(result);
 8009552:	693b      	ldr	r3, [r7, #16]
 8009554:	2b00      	cmp	r3, #0
 8009556:	d1e6      	bne.n	8009526 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	2220      	movs	r2, #32
 800955c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	2200      	movs	r2, #0
 8009564:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009566:	6878      	ldr	r0, [r7, #4]
 8009568:	f7ff f836 	bl	80085d8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800956c:	bf00      	nop
 800956e:	3720      	adds	r7, #32
 8009570:	46bd      	mov	sp, r7
 8009572:	bd80      	pop	{r7, pc}

08009574 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009574:	b480      	push	{r7}
 8009576:	b083      	sub	sp, #12
 8009578:	af00      	add	r7, sp, #0
 800957a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800957c:	bf00      	nop
 800957e:	370c      	adds	r7, #12
 8009580:	46bd      	mov	sp, r7
 8009582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009586:	4770      	bx	lr

08009588 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009588:	b480      	push	{r7}
 800958a:	b083      	sub	sp, #12
 800958c:	af00      	add	r7, sp, #0
 800958e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009590:	bf00      	nop
 8009592:	370c      	adds	r7, #12
 8009594:	46bd      	mov	sp, r7
 8009596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800959a:	4770      	bx	lr

0800959c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800959c:	b480      	push	{r7}
 800959e:	b083      	sub	sp, #12
 80095a0:	af00      	add	r7, sp, #0
 80095a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80095a4:	bf00      	nop
 80095a6:	370c      	adds	r7, #12
 80095a8:	46bd      	mov	sp, r7
 80095aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ae:	4770      	bx	lr

080095b0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80095b0:	b480      	push	{r7}
 80095b2:	b085      	sub	sp, #20
 80095b4:	af00      	add	r7, sp, #0
 80095b6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80095be:	2b01      	cmp	r3, #1
 80095c0:	d101      	bne.n	80095c6 <HAL_UARTEx_DisableFifoMode+0x16>
 80095c2:	2302      	movs	r3, #2
 80095c4:	e027      	b.n	8009616 <HAL_UARTEx_DisableFifoMode+0x66>
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	2201      	movs	r2, #1
 80095ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	2224      	movs	r2, #36	@ 0x24
 80095d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	681a      	ldr	r2, [r3, #0]
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	f022 0201 	bic.w	r2, r2, #1
 80095ec:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80095f4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	2200      	movs	r2, #0
 80095fa:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	68fa      	ldr	r2, [r7, #12]
 8009602:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	2220      	movs	r2, #32
 8009608:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	2200      	movs	r2, #0
 8009610:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009614:	2300      	movs	r3, #0
}
 8009616:	4618      	mov	r0, r3
 8009618:	3714      	adds	r7, #20
 800961a:	46bd      	mov	sp, r7
 800961c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009620:	4770      	bx	lr

08009622 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009622:	b580      	push	{r7, lr}
 8009624:	b084      	sub	sp, #16
 8009626:	af00      	add	r7, sp, #0
 8009628:	6078      	str	r0, [r7, #4]
 800962a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009632:	2b01      	cmp	r3, #1
 8009634:	d101      	bne.n	800963a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009636:	2302      	movs	r3, #2
 8009638:	e02d      	b.n	8009696 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	2201      	movs	r2, #1
 800963e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	2224      	movs	r2, #36	@ 0x24
 8009646:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	681a      	ldr	r2, [r3, #0]
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	f022 0201 	bic.w	r2, r2, #1
 8009660:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	689b      	ldr	r3, [r3, #8]
 8009668:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	683a      	ldr	r2, [r7, #0]
 8009672:	430a      	orrs	r2, r1
 8009674:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009676:	6878      	ldr	r0, [r7, #4]
 8009678:	f000 f850 	bl	800971c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	68fa      	ldr	r2, [r7, #12]
 8009682:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	2220      	movs	r2, #32
 8009688:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	2200      	movs	r2, #0
 8009690:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009694:	2300      	movs	r3, #0
}
 8009696:	4618      	mov	r0, r3
 8009698:	3710      	adds	r7, #16
 800969a:	46bd      	mov	sp, r7
 800969c:	bd80      	pop	{r7, pc}

0800969e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800969e:	b580      	push	{r7, lr}
 80096a0:	b084      	sub	sp, #16
 80096a2:	af00      	add	r7, sp, #0
 80096a4:	6078      	str	r0, [r7, #4]
 80096a6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80096ae:	2b01      	cmp	r3, #1
 80096b0:	d101      	bne.n	80096b6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80096b2:	2302      	movs	r3, #2
 80096b4:	e02d      	b.n	8009712 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	2201      	movs	r2, #1
 80096ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	2224      	movs	r2, #36	@ 0x24
 80096c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	681a      	ldr	r2, [r3, #0]
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	f022 0201 	bic.w	r2, r2, #1
 80096dc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	689b      	ldr	r3, [r3, #8]
 80096e4:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	683a      	ldr	r2, [r7, #0]
 80096ee:	430a      	orrs	r2, r1
 80096f0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80096f2:	6878      	ldr	r0, [r7, #4]
 80096f4:	f000 f812 	bl	800971c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	68fa      	ldr	r2, [r7, #12]
 80096fe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	2220      	movs	r2, #32
 8009704:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	2200      	movs	r2, #0
 800970c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009710:	2300      	movs	r3, #0
}
 8009712:	4618      	mov	r0, r3
 8009714:	3710      	adds	r7, #16
 8009716:	46bd      	mov	sp, r7
 8009718:	bd80      	pop	{r7, pc}
	...

0800971c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800971c:	b480      	push	{r7}
 800971e:	b085      	sub	sp, #20
 8009720:	af00      	add	r7, sp, #0
 8009722:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009728:	2b00      	cmp	r3, #0
 800972a:	d108      	bne.n	800973e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	2201      	movs	r2, #1
 8009730:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	2201      	movs	r2, #1
 8009738:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800973c:	e031      	b.n	80097a2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800973e:	2308      	movs	r3, #8
 8009740:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009742:	2308      	movs	r3, #8
 8009744:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	689b      	ldr	r3, [r3, #8]
 800974c:	0e5b      	lsrs	r3, r3, #25
 800974e:	b2db      	uxtb	r3, r3
 8009750:	f003 0307 	and.w	r3, r3, #7
 8009754:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	689b      	ldr	r3, [r3, #8]
 800975c:	0f5b      	lsrs	r3, r3, #29
 800975e:	b2db      	uxtb	r3, r3
 8009760:	f003 0307 	and.w	r3, r3, #7
 8009764:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009766:	7bbb      	ldrb	r3, [r7, #14]
 8009768:	7b3a      	ldrb	r2, [r7, #12]
 800976a:	4911      	ldr	r1, [pc, #68]	@ (80097b0 <UARTEx_SetNbDataToProcess+0x94>)
 800976c:	5c8a      	ldrb	r2, [r1, r2]
 800976e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009772:	7b3a      	ldrb	r2, [r7, #12]
 8009774:	490f      	ldr	r1, [pc, #60]	@ (80097b4 <UARTEx_SetNbDataToProcess+0x98>)
 8009776:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009778:	fb93 f3f2 	sdiv	r3, r3, r2
 800977c:	b29a      	uxth	r2, r3
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009784:	7bfb      	ldrb	r3, [r7, #15]
 8009786:	7b7a      	ldrb	r2, [r7, #13]
 8009788:	4909      	ldr	r1, [pc, #36]	@ (80097b0 <UARTEx_SetNbDataToProcess+0x94>)
 800978a:	5c8a      	ldrb	r2, [r1, r2]
 800978c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009790:	7b7a      	ldrb	r2, [r7, #13]
 8009792:	4908      	ldr	r1, [pc, #32]	@ (80097b4 <UARTEx_SetNbDataToProcess+0x98>)
 8009794:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009796:	fb93 f3f2 	sdiv	r3, r3, r2
 800979a:	b29a      	uxth	r2, r3
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80097a2:	bf00      	nop
 80097a4:	3714      	adds	r7, #20
 80097a6:	46bd      	mov	sp, r7
 80097a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ac:	4770      	bx	lr
 80097ae:	bf00      	nop
 80097b0:	0801cd5c 	.word	0x0801cd5c
 80097b4:	0801cd64 	.word	0x0801cd64

080097b8 <arm_sin_f32>:
  @return        sin(x)
 */

float32_t arm_sin_f32(
  float32_t x)
{
 80097b8:	b480      	push	{r7}
 80097ba:	b08b      	sub	sp, #44	@ 0x2c
 80097bc:	af00      	add	r7, sp, #0
 80097be:	ed87 0a01 	vstr	s0, [r7, #4]
  int32_t n;
  float32_t findex;

  /* input x is in radians */
  /* Scale input to [0 1] range from [0 2*PI] , divide input by 2*pi */
  in = x * 0.159154943092f;
 80097c2:	edd7 7a01 	vldr	s15, [r7, #4]
 80097c6:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 80098b0 <arm_sin_f32+0xf8>
 80097ca:	ee67 7a87 	vmul.f32	s15, s15, s14
 80097ce:	edc7 7a06 	vstr	s15, [r7, #24]

  /* Calculation of floor value of input */
  n = (int32_t) in;
 80097d2:	edd7 7a06 	vldr	s15, [r7, #24]
 80097d6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80097da:	ee17 3a90 	vmov	r3, s15
 80097de:	623b      	str	r3, [r7, #32]

  /* Make negative values towards -infinity */
  if (in < 0.0f)
 80097e0:	edd7 7a06 	vldr	s15, [r7, #24]
 80097e4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80097e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80097ec:	d502      	bpl.n	80097f4 <arm_sin_f32+0x3c>
  {
    n--;
 80097ee:	6a3b      	ldr	r3, [r7, #32]
 80097f0:	3b01      	subs	r3, #1
 80097f2:	623b      	str	r3, [r7, #32]
  }

  /* Map input value to [0 1] */
  in = in - (float32_t) n;
 80097f4:	6a3b      	ldr	r3, [r7, #32]
 80097f6:	ee07 3a90 	vmov	s15, r3
 80097fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80097fe:	ed97 7a06 	vldr	s14, [r7, #24]
 8009802:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009806:	edc7 7a06 	vstr	s15, [r7, #24]

  /* Calculation of index of the table */
  findex = (float32_t)FAST_MATH_TABLE_SIZE * in;
 800980a:	edd7 7a06 	vldr	s15, [r7, #24]
 800980e:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 80098b4 <arm_sin_f32+0xfc>
 8009812:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009816:	edc7 7a07 	vstr	s15, [r7, #28]
  index = (uint16_t)findex;
 800981a:	edd7 7a07 	vldr	s15, [r7, #28]
 800981e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009822:	ee17 3a90 	vmov	r3, s15
 8009826:	84fb      	strh	r3, [r7, #38]	@ 0x26

  /* when "in" is exactly 1, we need to rotate the index down to 0 */
  if (index >= FAST_MATH_TABLE_SIZE) {
 8009828:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800982a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800982e:	d309      	bcc.n	8009844 <arm_sin_f32+0x8c>
    index = 0;
 8009830:	2300      	movs	r3, #0
 8009832:	84fb      	strh	r3, [r7, #38]	@ 0x26
    findex -= (float32_t)FAST_MATH_TABLE_SIZE;
 8009834:	edd7 7a07 	vldr	s15, [r7, #28]
 8009838:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 80098b4 <arm_sin_f32+0xfc>
 800983c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009840:	edc7 7a07 	vstr	s15, [r7, #28]
  }

  /* fractional value calculation */
  fract = findex - (float32_t) index;
 8009844:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8009846:	ee07 3a90 	vmov	s15, r3
 800984a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800984e:	ed97 7a07 	vldr	s14, [r7, #28]
 8009852:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009856:	edc7 7a05 	vstr	s15, [r7, #20]

  /* Read two nearest values of input value from the sin table */
  a = sinTable_f32[index];
 800985a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800985c:	4a16      	ldr	r2, [pc, #88]	@ (80098b8 <arm_sin_f32+0x100>)
 800985e:	009b      	lsls	r3, r3, #2
 8009860:	4413      	add	r3, r2
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	613b      	str	r3, [r7, #16]
  b = sinTable_f32[index+1];
 8009866:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8009868:	3301      	adds	r3, #1
 800986a:	4a13      	ldr	r2, [pc, #76]	@ (80098b8 <arm_sin_f32+0x100>)
 800986c:	009b      	lsls	r3, r3, #2
 800986e:	4413      	add	r3, r2
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	60fb      	str	r3, [r7, #12]

  /* Linear interpolation process */
  sinVal = (1.0f - fract) * a + fract * b;
 8009874:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009878:	edd7 7a05 	vldr	s15, [r7, #20]
 800987c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009880:	edd7 7a04 	vldr	s15, [r7, #16]
 8009884:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009888:	edd7 6a05 	vldr	s13, [r7, #20]
 800988c:	edd7 7a03 	vldr	s15, [r7, #12]
 8009890:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009894:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009898:	edc7 7a02 	vstr	s15, [r7, #8]

  /* Return output value */
  return (sinVal);
 800989c:	68bb      	ldr	r3, [r7, #8]
 800989e:	ee07 3a90 	vmov	s15, r3
}
 80098a2:	eeb0 0a67 	vmov.f32	s0, s15
 80098a6:	372c      	adds	r7, #44	@ 0x2c
 80098a8:	46bd      	mov	sp, r7
 80098aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ae:	4770      	bx	lr
 80098b0:	3e22f983 	.word	0x3e22f983
 80098b4:	44000000 	.word	0x44000000
 80098b8:	0801cd6c 	.word	0x0801cd6c

080098bc <__NVIC_SetPriority>:
{
 80098bc:	b480      	push	{r7}
 80098be:	b083      	sub	sp, #12
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	4603      	mov	r3, r0
 80098c4:	6039      	str	r1, [r7, #0]
 80098c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80098c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	db0a      	blt.n	80098e6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80098d0:	683b      	ldr	r3, [r7, #0]
 80098d2:	b2da      	uxtb	r2, r3
 80098d4:	490c      	ldr	r1, [pc, #48]	@ (8009908 <__NVIC_SetPriority+0x4c>)
 80098d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80098da:	0112      	lsls	r2, r2, #4
 80098dc:	b2d2      	uxtb	r2, r2
 80098de:	440b      	add	r3, r1
 80098e0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80098e4:	e00a      	b.n	80098fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80098e6:	683b      	ldr	r3, [r7, #0]
 80098e8:	b2da      	uxtb	r2, r3
 80098ea:	4908      	ldr	r1, [pc, #32]	@ (800990c <__NVIC_SetPriority+0x50>)
 80098ec:	79fb      	ldrb	r3, [r7, #7]
 80098ee:	f003 030f 	and.w	r3, r3, #15
 80098f2:	3b04      	subs	r3, #4
 80098f4:	0112      	lsls	r2, r2, #4
 80098f6:	b2d2      	uxtb	r2, r2
 80098f8:	440b      	add	r3, r1
 80098fa:	761a      	strb	r2, [r3, #24]
}
 80098fc:	bf00      	nop
 80098fe:	370c      	adds	r7, #12
 8009900:	46bd      	mov	sp, r7
 8009902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009906:	4770      	bx	lr
 8009908:	e000e100 	.word	0xe000e100
 800990c:	e000ed00 	.word	0xe000ed00

08009910 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8009910:	b580      	push	{r7, lr}
 8009912:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8009914:	4b05      	ldr	r3, [pc, #20]	@ (800992c <SysTick_Handler+0x1c>)
 8009916:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8009918:	f001 fd40 	bl	800b39c <xTaskGetSchedulerState>
 800991c:	4603      	mov	r3, r0
 800991e:	2b01      	cmp	r3, #1
 8009920:	d001      	beq.n	8009926 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8009922:	f002 fb39 	bl	800bf98 <xPortSysTickHandler>
  }
}
 8009926:	bf00      	nop
 8009928:	bd80      	pop	{r7, pc}
 800992a:	bf00      	nop
 800992c:	e000e010 	.word	0xe000e010

08009930 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8009930:	b580      	push	{r7, lr}
 8009932:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8009934:	2100      	movs	r1, #0
 8009936:	f06f 0004 	mvn.w	r0, #4
 800993a:	f7ff ffbf 	bl	80098bc <__NVIC_SetPriority>
#endif
}
 800993e:	bf00      	nop
 8009940:	bd80      	pop	{r7, pc}
	...

08009944 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009944:	b480      	push	{r7}
 8009946:	b083      	sub	sp, #12
 8009948:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800994a:	f3ef 8305 	mrs	r3, IPSR
 800994e:	603b      	str	r3, [r7, #0]
  return(result);
 8009950:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009952:	2b00      	cmp	r3, #0
 8009954:	d003      	beq.n	800995e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8009956:	f06f 0305 	mvn.w	r3, #5
 800995a:	607b      	str	r3, [r7, #4]
 800995c:	e00c      	b.n	8009978 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800995e:	4b0a      	ldr	r3, [pc, #40]	@ (8009988 <osKernelInitialize+0x44>)
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	2b00      	cmp	r3, #0
 8009964:	d105      	bne.n	8009972 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8009966:	4b08      	ldr	r3, [pc, #32]	@ (8009988 <osKernelInitialize+0x44>)
 8009968:	2201      	movs	r2, #1
 800996a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800996c:	2300      	movs	r3, #0
 800996e:	607b      	str	r3, [r7, #4]
 8009970:	e002      	b.n	8009978 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8009972:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009976:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009978:	687b      	ldr	r3, [r7, #4]
}
 800997a:	4618      	mov	r0, r3
 800997c:	370c      	adds	r7, #12
 800997e:	46bd      	mov	sp, r7
 8009980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009984:	4770      	bx	lr
 8009986:	bf00      	nop
 8009988:	20004ff0 	.word	0x20004ff0

0800998c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800998c:	b580      	push	{r7, lr}
 800998e:	b082      	sub	sp, #8
 8009990:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009992:	f3ef 8305 	mrs	r3, IPSR
 8009996:	603b      	str	r3, [r7, #0]
  return(result);
 8009998:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800999a:	2b00      	cmp	r3, #0
 800999c:	d003      	beq.n	80099a6 <osKernelStart+0x1a>
    stat = osErrorISR;
 800999e:	f06f 0305 	mvn.w	r3, #5
 80099a2:	607b      	str	r3, [r7, #4]
 80099a4:	e010      	b.n	80099c8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80099a6:	4b0b      	ldr	r3, [pc, #44]	@ (80099d4 <osKernelStart+0x48>)
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	2b01      	cmp	r3, #1
 80099ac:	d109      	bne.n	80099c2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80099ae:	f7ff ffbf 	bl	8009930 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80099b2:	4b08      	ldr	r3, [pc, #32]	@ (80099d4 <osKernelStart+0x48>)
 80099b4:	2202      	movs	r2, #2
 80099b6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80099b8:	f001 f87a 	bl	800aab0 <vTaskStartScheduler>
      stat = osOK;
 80099bc:	2300      	movs	r3, #0
 80099be:	607b      	str	r3, [r7, #4]
 80099c0:	e002      	b.n	80099c8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80099c2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80099c6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80099c8:	687b      	ldr	r3, [r7, #4]
}
 80099ca:	4618      	mov	r0, r3
 80099cc:	3708      	adds	r7, #8
 80099ce:	46bd      	mov	sp, r7
 80099d0:	bd80      	pop	{r7, pc}
 80099d2:	bf00      	nop
 80099d4:	20004ff0 	.word	0x20004ff0

080099d8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80099d8:	b580      	push	{r7, lr}
 80099da:	b08e      	sub	sp, #56	@ 0x38
 80099dc:	af04      	add	r7, sp, #16
 80099de:	60f8      	str	r0, [r7, #12]
 80099e0:	60b9      	str	r1, [r7, #8]
 80099e2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80099e4:	2300      	movs	r3, #0
 80099e6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80099e8:	f3ef 8305 	mrs	r3, IPSR
 80099ec:	617b      	str	r3, [r7, #20]
  return(result);
 80099ee:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d17e      	bne.n	8009af2 <osThreadNew+0x11a>
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d07b      	beq.n	8009af2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80099fa:	2380      	movs	r3, #128	@ 0x80
 80099fc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80099fe:	2318      	movs	r3, #24
 8009a00:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8009a02:	2300      	movs	r3, #0
 8009a04:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8009a06:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009a0a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d045      	beq.n	8009a9e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d002      	beq.n	8009a20 <osThreadNew+0x48>
        name = attr->name;
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	699b      	ldr	r3, [r3, #24]
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d002      	beq.n	8009a2e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	699b      	ldr	r3, [r3, #24]
 8009a2c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8009a2e:	69fb      	ldr	r3, [r7, #28]
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d008      	beq.n	8009a46 <osThreadNew+0x6e>
 8009a34:	69fb      	ldr	r3, [r7, #28]
 8009a36:	2b38      	cmp	r3, #56	@ 0x38
 8009a38:	d805      	bhi.n	8009a46 <osThreadNew+0x6e>
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	685b      	ldr	r3, [r3, #4]
 8009a3e:	f003 0301 	and.w	r3, r3, #1
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d001      	beq.n	8009a4a <osThreadNew+0x72>
        return (NULL);
 8009a46:	2300      	movs	r3, #0
 8009a48:	e054      	b.n	8009af4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	695b      	ldr	r3, [r3, #20]
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d003      	beq.n	8009a5a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	695b      	ldr	r3, [r3, #20]
 8009a56:	089b      	lsrs	r3, r3, #2
 8009a58:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	689b      	ldr	r3, [r3, #8]
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d00e      	beq.n	8009a80 <osThreadNew+0xa8>
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	68db      	ldr	r3, [r3, #12]
 8009a66:	2b5b      	cmp	r3, #91	@ 0x5b
 8009a68:	d90a      	bls.n	8009a80 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d006      	beq.n	8009a80 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	695b      	ldr	r3, [r3, #20]
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d002      	beq.n	8009a80 <osThreadNew+0xa8>
        mem = 1;
 8009a7a:	2301      	movs	r3, #1
 8009a7c:	61bb      	str	r3, [r7, #24]
 8009a7e:	e010      	b.n	8009aa2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	689b      	ldr	r3, [r3, #8]
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d10c      	bne.n	8009aa2 <osThreadNew+0xca>
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	68db      	ldr	r3, [r3, #12]
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d108      	bne.n	8009aa2 <osThreadNew+0xca>
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	691b      	ldr	r3, [r3, #16]
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d104      	bne.n	8009aa2 <osThreadNew+0xca>
          mem = 0;
 8009a98:	2300      	movs	r3, #0
 8009a9a:	61bb      	str	r3, [r7, #24]
 8009a9c:	e001      	b.n	8009aa2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8009a9e:	2300      	movs	r3, #0
 8009aa0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009aa2:	69bb      	ldr	r3, [r7, #24]
 8009aa4:	2b01      	cmp	r3, #1
 8009aa6:	d110      	bne.n	8009aca <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8009aac:	687a      	ldr	r2, [r7, #4]
 8009aae:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009ab0:	9202      	str	r2, [sp, #8]
 8009ab2:	9301      	str	r3, [sp, #4]
 8009ab4:	69fb      	ldr	r3, [r7, #28]
 8009ab6:	9300      	str	r3, [sp, #0]
 8009ab8:	68bb      	ldr	r3, [r7, #8]
 8009aba:	6a3a      	ldr	r2, [r7, #32]
 8009abc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009abe:	68f8      	ldr	r0, [r7, #12]
 8009ac0:	f000 fe1a 	bl	800a6f8 <xTaskCreateStatic>
 8009ac4:	4603      	mov	r3, r0
 8009ac6:	613b      	str	r3, [r7, #16]
 8009ac8:	e013      	b.n	8009af2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8009aca:	69bb      	ldr	r3, [r7, #24]
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d110      	bne.n	8009af2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009ad0:	6a3b      	ldr	r3, [r7, #32]
 8009ad2:	b29a      	uxth	r2, r3
 8009ad4:	f107 0310 	add.w	r3, r7, #16
 8009ad8:	9301      	str	r3, [sp, #4]
 8009ada:	69fb      	ldr	r3, [r7, #28]
 8009adc:	9300      	str	r3, [sp, #0]
 8009ade:	68bb      	ldr	r3, [r7, #8]
 8009ae0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009ae2:	68f8      	ldr	r0, [r7, #12]
 8009ae4:	f000 fe68 	bl	800a7b8 <xTaskCreate>
 8009ae8:	4603      	mov	r3, r0
 8009aea:	2b01      	cmp	r3, #1
 8009aec:	d001      	beq.n	8009af2 <osThreadNew+0x11a>
            hTask = NULL;
 8009aee:	2300      	movs	r3, #0
 8009af0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8009af2:	693b      	ldr	r3, [r7, #16]
}
 8009af4:	4618      	mov	r0, r3
 8009af6:	3728      	adds	r7, #40	@ 0x28
 8009af8:	46bd      	mov	sp, r7
 8009afa:	bd80      	pop	{r7, pc}

08009afc <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8009afc:	b580      	push	{r7, lr}
 8009afe:	b084      	sub	sp, #16
 8009b00:	af00      	add	r7, sp, #0
 8009b02:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009b04:	f3ef 8305 	mrs	r3, IPSR
 8009b08:	60bb      	str	r3, [r7, #8]
  return(result);
 8009b0a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d003      	beq.n	8009b18 <osDelay+0x1c>
    stat = osErrorISR;
 8009b10:	f06f 0305 	mvn.w	r3, #5
 8009b14:	60fb      	str	r3, [r7, #12]
 8009b16:	e007      	b.n	8009b28 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8009b18:	2300      	movs	r3, #0
 8009b1a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d002      	beq.n	8009b28 <osDelay+0x2c>
      vTaskDelay(ticks);
 8009b22:	6878      	ldr	r0, [r7, #4]
 8009b24:	f000 ff8e 	bl	800aa44 <vTaskDelay>
    }
  }

  return (stat);
 8009b28:	68fb      	ldr	r3, [r7, #12]
}
 8009b2a:	4618      	mov	r0, r3
 8009b2c:	3710      	adds	r7, #16
 8009b2e:	46bd      	mov	sp, r7
 8009b30:	bd80      	pop	{r7, pc}
	...

08009b34 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009b34:	b480      	push	{r7}
 8009b36:	b085      	sub	sp, #20
 8009b38:	af00      	add	r7, sp, #0
 8009b3a:	60f8      	str	r0, [r7, #12]
 8009b3c:	60b9      	str	r1, [r7, #8]
 8009b3e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	4a07      	ldr	r2, [pc, #28]	@ (8009b60 <vApplicationGetIdleTaskMemory+0x2c>)
 8009b44:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009b46:	68bb      	ldr	r3, [r7, #8]
 8009b48:	4a06      	ldr	r2, [pc, #24]	@ (8009b64 <vApplicationGetIdleTaskMemory+0x30>)
 8009b4a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	2280      	movs	r2, #128	@ 0x80
 8009b50:	601a      	str	r2, [r3, #0]
}
 8009b52:	bf00      	nop
 8009b54:	3714      	adds	r7, #20
 8009b56:	46bd      	mov	sp, r7
 8009b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b5c:	4770      	bx	lr
 8009b5e:	bf00      	nop
 8009b60:	20004ff4 	.word	0x20004ff4
 8009b64:	20005050 	.word	0x20005050

08009b68 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009b68:	b480      	push	{r7}
 8009b6a:	b085      	sub	sp, #20
 8009b6c:	af00      	add	r7, sp, #0
 8009b6e:	60f8      	str	r0, [r7, #12]
 8009b70:	60b9      	str	r1, [r7, #8]
 8009b72:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	4a07      	ldr	r2, [pc, #28]	@ (8009b94 <vApplicationGetTimerTaskMemory+0x2c>)
 8009b78:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009b7a:	68bb      	ldr	r3, [r7, #8]
 8009b7c:	4a06      	ldr	r2, [pc, #24]	@ (8009b98 <vApplicationGetTimerTaskMemory+0x30>)
 8009b7e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009b86:	601a      	str	r2, [r3, #0]
}
 8009b88:	bf00      	nop
 8009b8a:	3714      	adds	r7, #20
 8009b8c:	46bd      	mov	sp, r7
 8009b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b92:	4770      	bx	lr
 8009b94:	20005250 	.word	0x20005250
 8009b98:	200052ac 	.word	0x200052ac

08009b9c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009b9c:	b480      	push	{r7}
 8009b9e:	b083      	sub	sp, #12
 8009ba0:	af00      	add	r7, sp, #0
 8009ba2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	f103 0208 	add.w	r2, r3, #8
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009bb4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	f103 0208 	add.w	r2, r3, #8
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	f103 0208 	add.w	r2, r3, #8
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	2200      	movs	r2, #0
 8009bce:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009bd0:	bf00      	nop
 8009bd2:	370c      	adds	r7, #12
 8009bd4:	46bd      	mov	sp, r7
 8009bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bda:	4770      	bx	lr

08009bdc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009bdc:	b480      	push	{r7}
 8009bde:	b083      	sub	sp, #12
 8009be0:	af00      	add	r7, sp, #0
 8009be2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	2200      	movs	r2, #0
 8009be8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009bea:	bf00      	nop
 8009bec:	370c      	adds	r7, #12
 8009bee:	46bd      	mov	sp, r7
 8009bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf4:	4770      	bx	lr

08009bf6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009bf6:	b480      	push	{r7}
 8009bf8:	b085      	sub	sp, #20
 8009bfa:	af00      	add	r7, sp, #0
 8009bfc:	6078      	str	r0, [r7, #4]
 8009bfe:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	685b      	ldr	r3, [r3, #4]
 8009c04:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009c06:	683b      	ldr	r3, [r7, #0]
 8009c08:	68fa      	ldr	r2, [r7, #12]
 8009c0a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	689a      	ldr	r2, [r3, #8]
 8009c10:	683b      	ldr	r3, [r7, #0]
 8009c12:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	689b      	ldr	r3, [r3, #8]
 8009c18:	683a      	ldr	r2, [r7, #0]
 8009c1a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	683a      	ldr	r2, [r7, #0]
 8009c20:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009c22:	683b      	ldr	r3, [r7, #0]
 8009c24:	687a      	ldr	r2, [r7, #4]
 8009c26:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	1c5a      	adds	r2, r3, #1
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	601a      	str	r2, [r3, #0]
}
 8009c32:	bf00      	nop
 8009c34:	3714      	adds	r7, #20
 8009c36:	46bd      	mov	sp, r7
 8009c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c3c:	4770      	bx	lr

08009c3e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009c3e:	b480      	push	{r7}
 8009c40:	b085      	sub	sp, #20
 8009c42:	af00      	add	r7, sp, #0
 8009c44:	6078      	str	r0, [r7, #4]
 8009c46:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009c48:	683b      	ldr	r3, [r7, #0]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009c4e:	68bb      	ldr	r3, [r7, #8]
 8009c50:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009c54:	d103      	bne.n	8009c5e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	691b      	ldr	r3, [r3, #16]
 8009c5a:	60fb      	str	r3, [r7, #12]
 8009c5c:	e00c      	b.n	8009c78 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	3308      	adds	r3, #8
 8009c62:	60fb      	str	r3, [r7, #12]
 8009c64:	e002      	b.n	8009c6c <vListInsert+0x2e>
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	685b      	ldr	r3, [r3, #4]
 8009c6a:	60fb      	str	r3, [r7, #12]
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	685b      	ldr	r3, [r3, #4]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	68ba      	ldr	r2, [r7, #8]
 8009c74:	429a      	cmp	r2, r3
 8009c76:	d2f6      	bcs.n	8009c66 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	685a      	ldr	r2, [r3, #4]
 8009c7c:	683b      	ldr	r3, [r7, #0]
 8009c7e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009c80:	683b      	ldr	r3, [r7, #0]
 8009c82:	685b      	ldr	r3, [r3, #4]
 8009c84:	683a      	ldr	r2, [r7, #0]
 8009c86:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009c88:	683b      	ldr	r3, [r7, #0]
 8009c8a:	68fa      	ldr	r2, [r7, #12]
 8009c8c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	683a      	ldr	r2, [r7, #0]
 8009c92:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009c94:	683b      	ldr	r3, [r7, #0]
 8009c96:	687a      	ldr	r2, [r7, #4]
 8009c98:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	1c5a      	adds	r2, r3, #1
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	601a      	str	r2, [r3, #0]
}
 8009ca4:	bf00      	nop
 8009ca6:	3714      	adds	r7, #20
 8009ca8:	46bd      	mov	sp, r7
 8009caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cae:	4770      	bx	lr

08009cb0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009cb0:	b480      	push	{r7}
 8009cb2:	b085      	sub	sp, #20
 8009cb4:	af00      	add	r7, sp, #0
 8009cb6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	691b      	ldr	r3, [r3, #16]
 8009cbc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	685b      	ldr	r3, [r3, #4]
 8009cc2:	687a      	ldr	r2, [r7, #4]
 8009cc4:	6892      	ldr	r2, [r2, #8]
 8009cc6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	689b      	ldr	r3, [r3, #8]
 8009ccc:	687a      	ldr	r2, [r7, #4]
 8009cce:	6852      	ldr	r2, [r2, #4]
 8009cd0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	685b      	ldr	r3, [r3, #4]
 8009cd6:	687a      	ldr	r2, [r7, #4]
 8009cd8:	429a      	cmp	r2, r3
 8009cda:	d103      	bne.n	8009ce4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	689a      	ldr	r2, [r3, #8]
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	2200      	movs	r2, #0
 8009ce8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	1e5a      	subs	r2, r3, #1
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	681b      	ldr	r3, [r3, #0]
}
 8009cf8:	4618      	mov	r0, r3
 8009cfa:	3714      	adds	r7, #20
 8009cfc:	46bd      	mov	sp, r7
 8009cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d02:	4770      	bx	lr

08009d04 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009d04:	b580      	push	{r7, lr}
 8009d06:	b084      	sub	sp, #16
 8009d08:	af00      	add	r7, sp, #0
 8009d0a:	6078      	str	r0, [r7, #4]
 8009d0c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d10b      	bne.n	8009d30 <xQueueGenericReset+0x2c>
	__asm volatile
 8009d18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d1c:	f383 8811 	msr	BASEPRI, r3
 8009d20:	f3bf 8f6f 	isb	sy
 8009d24:	f3bf 8f4f 	dsb	sy
 8009d28:	60bb      	str	r3, [r7, #8]
}
 8009d2a:	bf00      	nop
 8009d2c:	bf00      	nop
 8009d2e:	e7fd      	b.n	8009d2c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009d30:	f002 f8a2 	bl	800be78 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	681a      	ldr	r2, [r3, #0]
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009d3c:	68f9      	ldr	r1, [r7, #12]
 8009d3e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8009d40:	fb01 f303 	mul.w	r3, r1, r3
 8009d44:	441a      	add	r2, r3
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	2200      	movs	r2, #0
 8009d4e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	681a      	ldr	r2, [r3, #0]
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	681a      	ldr	r2, [r3, #0]
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009d60:	3b01      	subs	r3, #1
 8009d62:	68f9      	ldr	r1, [r7, #12]
 8009d64:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8009d66:	fb01 f303 	mul.w	r3, r1, r3
 8009d6a:	441a      	add	r2, r3
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	22ff      	movs	r2, #255	@ 0xff
 8009d74:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	22ff      	movs	r2, #255	@ 0xff
 8009d7c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8009d80:	683b      	ldr	r3, [r7, #0]
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d114      	bne.n	8009db0 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	691b      	ldr	r3, [r3, #16]
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d01a      	beq.n	8009dc4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	3310      	adds	r3, #16
 8009d92:	4618      	mov	r0, r3
 8009d94:	f001 f91a 	bl	800afcc <xTaskRemoveFromEventList>
 8009d98:	4603      	mov	r3, r0
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d012      	beq.n	8009dc4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009d9e:	4b0d      	ldr	r3, [pc, #52]	@ (8009dd4 <xQueueGenericReset+0xd0>)
 8009da0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009da4:	601a      	str	r2, [r3, #0]
 8009da6:	f3bf 8f4f 	dsb	sy
 8009daa:	f3bf 8f6f 	isb	sy
 8009dae:	e009      	b.n	8009dc4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	3310      	adds	r3, #16
 8009db4:	4618      	mov	r0, r3
 8009db6:	f7ff fef1 	bl	8009b9c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	3324      	adds	r3, #36	@ 0x24
 8009dbe:	4618      	mov	r0, r3
 8009dc0:	f7ff feec 	bl	8009b9c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009dc4:	f002 f88a 	bl	800bedc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009dc8:	2301      	movs	r3, #1
}
 8009dca:	4618      	mov	r0, r3
 8009dcc:	3710      	adds	r7, #16
 8009dce:	46bd      	mov	sp, r7
 8009dd0:	bd80      	pop	{r7, pc}
 8009dd2:	bf00      	nop
 8009dd4:	e000ed04 	.word	0xe000ed04

08009dd8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009dd8:	b580      	push	{r7, lr}
 8009dda:	b08e      	sub	sp, #56	@ 0x38
 8009ddc:	af02      	add	r7, sp, #8
 8009dde:	60f8      	str	r0, [r7, #12]
 8009de0:	60b9      	str	r1, [r7, #8]
 8009de2:	607a      	str	r2, [r7, #4]
 8009de4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d10b      	bne.n	8009e04 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8009dec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009df0:	f383 8811 	msr	BASEPRI, r3
 8009df4:	f3bf 8f6f 	isb	sy
 8009df8:	f3bf 8f4f 	dsb	sy
 8009dfc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8009dfe:	bf00      	nop
 8009e00:	bf00      	nop
 8009e02:	e7fd      	b.n	8009e00 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009e04:	683b      	ldr	r3, [r7, #0]
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d10b      	bne.n	8009e22 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8009e0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e0e:	f383 8811 	msr	BASEPRI, r3
 8009e12:	f3bf 8f6f 	isb	sy
 8009e16:	f3bf 8f4f 	dsb	sy
 8009e1a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009e1c:	bf00      	nop
 8009e1e:	bf00      	nop
 8009e20:	e7fd      	b.n	8009e1e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d002      	beq.n	8009e2e <xQueueGenericCreateStatic+0x56>
 8009e28:	68bb      	ldr	r3, [r7, #8]
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d001      	beq.n	8009e32 <xQueueGenericCreateStatic+0x5a>
 8009e2e:	2301      	movs	r3, #1
 8009e30:	e000      	b.n	8009e34 <xQueueGenericCreateStatic+0x5c>
 8009e32:	2300      	movs	r3, #0
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d10b      	bne.n	8009e50 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8009e38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e3c:	f383 8811 	msr	BASEPRI, r3
 8009e40:	f3bf 8f6f 	isb	sy
 8009e44:	f3bf 8f4f 	dsb	sy
 8009e48:	623b      	str	r3, [r7, #32]
}
 8009e4a:	bf00      	nop
 8009e4c:	bf00      	nop
 8009e4e:	e7fd      	b.n	8009e4c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d102      	bne.n	8009e5c <xQueueGenericCreateStatic+0x84>
 8009e56:	68bb      	ldr	r3, [r7, #8]
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d101      	bne.n	8009e60 <xQueueGenericCreateStatic+0x88>
 8009e5c:	2301      	movs	r3, #1
 8009e5e:	e000      	b.n	8009e62 <xQueueGenericCreateStatic+0x8a>
 8009e60:	2300      	movs	r3, #0
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d10b      	bne.n	8009e7e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8009e66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e6a:	f383 8811 	msr	BASEPRI, r3
 8009e6e:	f3bf 8f6f 	isb	sy
 8009e72:	f3bf 8f4f 	dsb	sy
 8009e76:	61fb      	str	r3, [r7, #28]
}
 8009e78:	bf00      	nop
 8009e7a:	bf00      	nop
 8009e7c:	e7fd      	b.n	8009e7a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009e7e:	2350      	movs	r3, #80	@ 0x50
 8009e80:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009e82:	697b      	ldr	r3, [r7, #20]
 8009e84:	2b50      	cmp	r3, #80	@ 0x50
 8009e86:	d00b      	beq.n	8009ea0 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8009e88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e8c:	f383 8811 	msr	BASEPRI, r3
 8009e90:	f3bf 8f6f 	isb	sy
 8009e94:	f3bf 8f4f 	dsb	sy
 8009e98:	61bb      	str	r3, [r7, #24]
}
 8009e9a:	bf00      	nop
 8009e9c:	bf00      	nop
 8009e9e:	e7fd      	b.n	8009e9c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009ea0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009ea2:	683b      	ldr	r3, [r7, #0]
 8009ea4:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8009ea6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d00d      	beq.n	8009ec8 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009eac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009eae:	2201      	movs	r2, #1
 8009eb0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009eb4:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8009eb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009eba:	9300      	str	r3, [sp, #0]
 8009ebc:	4613      	mov	r3, r2
 8009ebe:	687a      	ldr	r2, [r7, #4]
 8009ec0:	68b9      	ldr	r1, [r7, #8]
 8009ec2:	68f8      	ldr	r0, [r7, #12]
 8009ec4:	f000 f805 	bl	8009ed2 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009ec8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8009eca:	4618      	mov	r0, r3
 8009ecc:	3730      	adds	r7, #48	@ 0x30
 8009ece:	46bd      	mov	sp, r7
 8009ed0:	bd80      	pop	{r7, pc}

08009ed2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009ed2:	b580      	push	{r7, lr}
 8009ed4:	b084      	sub	sp, #16
 8009ed6:	af00      	add	r7, sp, #0
 8009ed8:	60f8      	str	r0, [r7, #12]
 8009eda:	60b9      	str	r1, [r7, #8]
 8009edc:	607a      	str	r2, [r7, #4]
 8009ede:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009ee0:	68bb      	ldr	r3, [r7, #8]
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d103      	bne.n	8009eee <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009ee6:	69bb      	ldr	r3, [r7, #24]
 8009ee8:	69ba      	ldr	r2, [r7, #24]
 8009eea:	601a      	str	r2, [r3, #0]
 8009eec:	e002      	b.n	8009ef4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009eee:	69bb      	ldr	r3, [r7, #24]
 8009ef0:	687a      	ldr	r2, [r7, #4]
 8009ef2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009ef4:	69bb      	ldr	r3, [r7, #24]
 8009ef6:	68fa      	ldr	r2, [r7, #12]
 8009ef8:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009efa:	69bb      	ldr	r3, [r7, #24]
 8009efc:	68ba      	ldr	r2, [r7, #8]
 8009efe:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009f00:	2101      	movs	r1, #1
 8009f02:	69b8      	ldr	r0, [r7, #24]
 8009f04:	f7ff fefe 	bl	8009d04 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8009f08:	69bb      	ldr	r3, [r7, #24]
 8009f0a:	78fa      	ldrb	r2, [r7, #3]
 8009f0c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009f10:	bf00      	nop
 8009f12:	3710      	adds	r7, #16
 8009f14:	46bd      	mov	sp, r7
 8009f16:	bd80      	pop	{r7, pc}

08009f18 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009f18:	b580      	push	{r7, lr}
 8009f1a:	b08e      	sub	sp, #56	@ 0x38
 8009f1c:	af00      	add	r7, sp, #0
 8009f1e:	60f8      	str	r0, [r7, #12]
 8009f20:	60b9      	str	r1, [r7, #8]
 8009f22:	607a      	str	r2, [r7, #4]
 8009f24:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009f26:	2300      	movs	r3, #0
 8009f28:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8009f2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d10b      	bne.n	8009f4c <xQueueGenericSend+0x34>
	__asm volatile
 8009f34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f38:	f383 8811 	msr	BASEPRI, r3
 8009f3c:	f3bf 8f6f 	isb	sy
 8009f40:	f3bf 8f4f 	dsb	sy
 8009f44:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8009f46:	bf00      	nop
 8009f48:	bf00      	nop
 8009f4a:	e7fd      	b.n	8009f48 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009f4c:	68bb      	ldr	r3, [r7, #8]
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d103      	bne.n	8009f5a <xQueueGenericSend+0x42>
 8009f52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d101      	bne.n	8009f5e <xQueueGenericSend+0x46>
 8009f5a:	2301      	movs	r3, #1
 8009f5c:	e000      	b.n	8009f60 <xQueueGenericSend+0x48>
 8009f5e:	2300      	movs	r3, #0
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d10b      	bne.n	8009f7c <xQueueGenericSend+0x64>
	__asm volatile
 8009f64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f68:	f383 8811 	msr	BASEPRI, r3
 8009f6c:	f3bf 8f6f 	isb	sy
 8009f70:	f3bf 8f4f 	dsb	sy
 8009f74:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009f76:	bf00      	nop
 8009f78:	bf00      	nop
 8009f7a:	e7fd      	b.n	8009f78 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009f7c:	683b      	ldr	r3, [r7, #0]
 8009f7e:	2b02      	cmp	r3, #2
 8009f80:	d103      	bne.n	8009f8a <xQueueGenericSend+0x72>
 8009f82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009f86:	2b01      	cmp	r3, #1
 8009f88:	d101      	bne.n	8009f8e <xQueueGenericSend+0x76>
 8009f8a:	2301      	movs	r3, #1
 8009f8c:	e000      	b.n	8009f90 <xQueueGenericSend+0x78>
 8009f8e:	2300      	movs	r3, #0
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d10b      	bne.n	8009fac <xQueueGenericSend+0x94>
	__asm volatile
 8009f94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f98:	f383 8811 	msr	BASEPRI, r3
 8009f9c:	f3bf 8f6f 	isb	sy
 8009fa0:	f3bf 8f4f 	dsb	sy
 8009fa4:	623b      	str	r3, [r7, #32]
}
 8009fa6:	bf00      	nop
 8009fa8:	bf00      	nop
 8009faa:	e7fd      	b.n	8009fa8 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009fac:	f001 f9f6 	bl	800b39c <xTaskGetSchedulerState>
 8009fb0:	4603      	mov	r3, r0
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d102      	bne.n	8009fbc <xQueueGenericSend+0xa4>
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d101      	bne.n	8009fc0 <xQueueGenericSend+0xa8>
 8009fbc:	2301      	movs	r3, #1
 8009fbe:	e000      	b.n	8009fc2 <xQueueGenericSend+0xaa>
 8009fc0:	2300      	movs	r3, #0
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d10b      	bne.n	8009fde <xQueueGenericSend+0xc6>
	__asm volatile
 8009fc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fca:	f383 8811 	msr	BASEPRI, r3
 8009fce:	f3bf 8f6f 	isb	sy
 8009fd2:	f3bf 8f4f 	dsb	sy
 8009fd6:	61fb      	str	r3, [r7, #28]
}
 8009fd8:	bf00      	nop
 8009fda:	bf00      	nop
 8009fdc:	e7fd      	b.n	8009fda <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009fde:	f001 ff4b 	bl	800be78 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009fe2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fe4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009fe6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fe8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009fea:	429a      	cmp	r2, r3
 8009fec:	d302      	bcc.n	8009ff4 <xQueueGenericSend+0xdc>
 8009fee:	683b      	ldr	r3, [r7, #0]
 8009ff0:	2b02      	cmp	r3, #2
 8009ff2:	d129      	bne.n	800a048 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009ff4:	683a      	ldr	r2, [r7, #0]
 8009ff6:	68b9      	ldr	r1, [r7, #8]
 8009ff8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009ffa:	f000 fa0f 	bl	800a41c <prvCopyDataToQueue>
 8009ffe:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a000:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a002:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a004:	2b00      	cmp	r3, #0
 800a006:	d010      	beq.n	800a02a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a008:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a00a:	3324      	adds	r3, #36	@ 0x24
 800a00c:	4618      	mov	r0, r3
 800a00e:	f000 ffdd 	bl	800afcc <xTaskRemoveFromEventList>
 800a012:	4603      	mov	r3, r0
 800a014:	2b00      	cmp	r3, #0
 800a016:	d013      	beq.n	800a040 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a018:	4b3f      	ldr	r3, [pc, #252]	@ (800a118 <xQueueGenericSend+0x200>)
 800a01a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a01e:	601a      	str	r2, [r3, #0]
 800a020:	f3bf 8f4f 	dsb	sy
 800a024:	f3bf 8f6f 	isb	sy
 800a028:	e00a      	b.n	800a040 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a02a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d007      	beq.n	800a040 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a030:	4b39      	ldr	r3, [pc, #228]	@ (800a118 <xQueueGenericSend+0x200>)
 800a032:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a036:	601a      	str	r2, [r3, #0]
 800a038:	f3bf 8f4f 	dsb	sy
 800a03c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a040:	f001 ff4c 	bl	800bedc <vPortExitCritical>
				return pdPASS;
 800a044:	2301      	movs	r3, #1
 800a046:	e063      	b.n	800a110 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d103      	bne.n	800a056 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a04e:	f001 ff45 	bl	800bedc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a052:	2300      	movs	r3, #0
 800a054:	e05c      	b.n	800a110 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a056:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d106      	bne.n	800a06a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a05c:	f107 0314 	add.w	r3, r7, #20
 800a060:	4618      	mov	r0, r3
 800a062:	f001 f83f 	bl	800b0e4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a066:	2301      	movs	r3, #1
 800a068:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a06a:	f001 ff37 	bl	800bedc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a06e:	f000 fd87 	bl	800ab80 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a072:	f001 ff01 	bl	800be78 <vPortEnterCritical>
 800a076:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a078:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a07c:	b25b      	sxtb	r3, r3
 800a07e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a082:	d103      	bne.n	800a08c <xQueueGenericSend+0x174>
 800a084:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a086:	2200      	movs	r2, #0
 800a088:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a08c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a08e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a092:	b25b      	sxtb	r3, r3
 800a094:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a098:	d103      	bne.n	800a0a2 <xQueueGenericSend+0x18a>
 800a09a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a09c:	2200      	movs	r2, #0
 800a09e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a0a2:	f001 ff1b 	bl	800bedc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a0a6:	1d3a      	adds	r2, r7, #4
 800a0a8:	f107 0314 	add.w	r3, r7, #20
 800a0ac:	4611      	mov	r1, r2
 800a0ae:	4618      	mov	r0, r3
 800a0b0:	f001 f82e 	bl	800b110 <xTaskCheckForTimeOut>
 800a0b4:	4603      	mov	r3, r0
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d124      	bne.n	800a104 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a0ba:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a0bc:	f000 faa6 	bl	800a60c <prvIsQueueFull>
 800a0c0:	4603      	mov	r3, r0
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d018      	beq.n	800a0f8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a0c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0c8:	3310      	adds	r3, #16
 800a0ca:	687a      	ldr	r2, [r7, #4]
 800a0cc:	4611      	mov	r1, r2
 800a0ce:	4618      	mov	r0, r3
 800a0d0:	f000 ff2a 	bl	800af28 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a0d4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a0d6:	f000 fa31 	bl	800a53c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a0da:	f000 fd5f 	bl	800ab9c <xTaskResumeAll>
 800a0de:	4603      	mov	r3, r0
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	f47f af7c 	bne.w	8009fde <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800a0e6:	4b0c      	ldr	r3, [pc, #48]	@ (800a118 <xQueueGenericSend+0x200>)
 800a0e8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a0ec:	601a      	str	r2, [r3, #0]
 800a0ee:	f3bf 8f4f 	dsb	sy
 800a0f2:	f3bf 8f6f 	isb	sy
 800a0f6:	e772      	b.n	8009fde <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a0f8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a0fa:	f000 fa1f 	bl	800a53c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a0fe:	f000 fd4d 	bl	800ab9c <xTaskResumeAll>
 800a102:	e76c      	b.n	8009fde <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a104:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a106:	f000 fa19 	bl	800a53c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a10a:	f000 fd47 	bl	800ab9c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a10e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a110:	4618      	mov	r0, r3
 800a112:	3738      	adds	r7, #56	@ 0x38
 800a114:	46bd      	mov	sp, r7
 800a116:	bd80      	pop	{r7, pc}
 800a118:	e000ed04 	.word	0xe000ed04

0800a11c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a11c:	b580      	push	{r7, lr}
 800a11e:	b090      	sub	sp, #64	@ 0x40
 800a120:	af00      	add	r7, sp, #0
 800a122:	60f8      	str	r0, [r7, #12]
 800a124:	60b9      	str	r1, [r7, #8]
 800a126:	607a      	str	r2, [r7, #4]
 800a128:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800a12e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a130:	2b00      	cmp	r3, #0
 800a132:	d10b      	bne.n	800a14c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800a134:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a138:	f383 8811 	msr	BASEPRI, r3
 800a13c:	f3bf 8f6f 	isb	sy
 800a140:	f3bf 8f4f 	dsb	sy
 800a144:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a146:	bf00      	nop
 800a148:	bf00      	nop
 800a14a:	e7fd      	b.n	800a148 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a14c:	68bb      	ldr	r3, [r7, #8]
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d103      	bne.n	800a15a <xQueueGenericSendFromISR+0x3e>
 800a152:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a154:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a156:	2b00      	cmp	r3, #0
 800a158:	d101      	bne.n	800a15e <xQueueGenericSendFromISR+0x42>
 800a15a:	2301      	movs	r3, #1
 800a15c:	e000      	b.n	800a160 <xQueueGenericSendFromISR+0x44>
 800a15e:	2300      	movs	r3, #0
 800a160:	2b00      	cmp	r3, #0
 800a162:	d10b      	bne.n	800a17c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800a164:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a168:	f383 8811 	msr	BASEPRI, r3
 800a16c:	f3bf 8f6f 	isb	sy
 800a170:	f3bf 8f4f 	dsb	sy
 800a174:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a176:	bf00      	nop
 800a178:	bf00      	nop
 800a17a:	e7fd      	b.n	800a178 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a17c:	683b      	ldr	r3, [r7, #0]
 800a17e:	2b02      	cmp	r3, #2
 800a180:	d103      	bne.n	800a18a <xQueueGenericSendFromISR+0x6e>
 800a182:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a184:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a186:	2b01      	cmp	r3, #1
 800a188:	d101      	bne.n	800a18e <xQueueGenericSendFromISR+0x72>
 800a18a:	2301      	movs	r3, #1
 800a18c:	e000      	b.n	800a190 <xQueueGenericSendFromISR+0x74>
 800a18e:	2300      	movs	r3, #0
 800a190:	2b00      	cmp	r3, #0
 800a192:	d10b      	bne.n	800a1ac <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800a194:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a198:	f383 8811 	msr	BASEPRI, r3
 800a19c:	f3bf 8f6f 	isb	sy
 800a1a0:	f3bf 8f4f 	dsb	sy
 800a1a4:	623b      	str	r3, [r7, #32]
}
 800a1a6:	bf00      	nop
 800a1a8:	bf00      	nop
 800a1aa:	e7fd      	b.n	800a1a8 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a1ac:	f001 ff44 	bl	800c038 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a1b0:	f3ef 8211 	mrs	r2, BASEPRI
 800a1b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1b8:	f383 8811 	msr	BASEPRI, r3
 800a1bc:	f3bf 8f6f 	isb	sy
 800a1c0:	f3bf 8f4f 	dsb	sy
 800a1c4:	61fa      	str	r2, [r7, #28]
 800a1c6:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a1c8:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a1ca:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a1cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1ce:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a1d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a1d4:	429a      	cmp	r2, r3
 800a1d6:	d302      	bcc.n	800a1de <xQueueGenericSendFromISR+0xc2>
 800a1d8:	683b      	ldr	r3, [r7, #0]
 800a1da:	2b02      	cmp	r3, #2
 800a1dc:	d12f      	bne.n	800a23e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a1de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1e0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a1e4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a1e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a1ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a1ee:	683a      	ldr	r2, [r7, #0]
 800a1f0:	68b9      	ldr	r1, [r7, #8]
 800a1f2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800a1f4:	f000 f912 	bl	800a41c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a1f8:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800a1fc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a200:	d112      	bne.n	800a228 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a202:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a204:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a206:	2b00      	cmp	r3, #0
 800a208:	d016      	beq.n	800a238 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a20a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a20c:	3324      	adds	r3, #36	@ 0x24
 800a20e:	4618      	mov	r0, r3
 800a210:	f000 fedc 	bl	800afcc <xTaskRemoveFromEventList>
 800a214:	4603      	mov	r3, r0
 800a216:	2b00      	cmp	r3, #0
 800a218:	d00e      	beq.n	800a238 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d00b      	beq.n	800a238 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	2201      	movs	r2, #1
 800a224:	601a      	str	r2, [r3, #0]
 800a226:	e007      	b.n	800a238 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a228:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800a22c:	3301      	adds	r3, #1
 800a22e:	b2db      	uxtb	r3, r3
 800a230:	b25a      	sxtb	r2, r3
 800a232:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a234:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800a238:	2301      	movs	r3, #1
 800a23a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800a23c:	e001      	b.n	800a242 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a23e:	2300      	movs	r3, #0
 800a240:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a242:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a244:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a246:	697b      	ldr	r3, [r7, #20]
 800a248:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a24c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a24e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800a250:	4618      	mov	r0, r3
 800a252:	3740      	adds	r7, #64	@ 0x40
 800a254:	46bd      	mov	sp, r7
 800a256:	bd80      	pop	{r7, pc}

0800a258 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a258:	b580      	push	{r7, lr}
 800a25a:	b08c      	sub	sp, #48	@ 0x30
 800a25c:	af00      	add	r7, sp, #0
 800a25e:	60f8      	str	r0, [r7, #12]
 800a260:	60b9      	str	r1, [r7, #8]
 800a262:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a264:	2300      	movs	r3, #0
 800a266:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a26c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d10b      	bne.n	800a28a <xQueueReceive+0x32>
	__asm volatile
 800a272:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a276:	f383 8811 	msr	BASEPRI, r3
 800a27a:	f3bf 8f6f 	isb	sy
 800a27e:	f3bf 8f4f 	dsb	sy
 800a282:	623b      	str	r3, [r7, #32]
}
 800a284:	bf00      	nop
 800a286:	bf00      	nop
 800a288:	e7fd      	b.n	800a286 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a28a:	68bb      	ldr	r3, [r7, #8]
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d103      	bne.n	800a298 <xQueueReceive+0x40>
 800a290:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a292:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a294:	2b00      	cmp	r3, #0
 800a296:	d101      	bne.n	800a29c <xQueueReceive+0x44>
 800a298:	2301      	movs	r3, #1
 800a29a:	e000      	b.n	800a29e <xQueueReceive+0x46>
 800a29c:	2300      	movs	r3, #0
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d10b      	bne.n	800a2ba <xQueueReceive+0x62>
	__asm volatile
 800a2a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2a6:	f383 8811 	msr	BASEPRI, r3
 800a2aa:	f3bf 8f6f 	isb	sy
 800a2ae:	f3bf 8f4f 	dsb	sy
 800a2b2:	61fb      	str	r3, [r7, #28]
}
 800a2b4:	bf00      	nop
 800a2b6:	bf00      	nop
 800a2b8:	e7fd      	b.n	800a2b6 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a2ba:	f001 f86f 	bl	800b39c <xTaskGetSchedulerState>
 800a2be:	4603      	mov	r3, r0
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d102      	bne.n	800a2ca <xQueueReceive+0x72>
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d101      	bne.n	800a2ce <xQueueReceive+0x76>
 800a2ca:	2301      	movs	r3, #1
 800a2cc:	e000      	b.n	800a2d0 <xQueueReceive+0x78>
 800a2ce:	2300      	movs	r3, #0
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d10b      	bne.n	800a2ec <xQueueReceive+0x94>
	__asm volatile
 800a2d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2d8:	f383 8811 	msr	BASEPRI, r3
 800a2dc:	f3bf 8f6f 	isb	sy
 800a2e0:	f3bf 8f4f 	dsb	sy
 800a2e4:	61bb      	str	r3, [r7, #24]
}
 800a2e6:	bf00      	nop
 800a2e8:	bf00      	nop
 800a2ea:	e7fd      	b.n	800a2e8 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a2ec:	f001 fdc4 	bl	800be78 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a2f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a2f4:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a2f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d01f      	beq.n	800a33c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a2fc:	68b9      	ldr	r1, [r7, #8]
 800a2fe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a300:	f000 f8f6 	bl	800a4f0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a304:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a306:	1e5a      	subs	r2, r3, #1
 800a308:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a30a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a30c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a30e:	691b      	ldr	r3, [r3, #16]
 800a310:	2b00      	cmp	r3, #0
 800a312:	d00f      	beq.n	800a334 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a314:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a316:	3310      	adds	r3, #16
 800a318:	4618      	mov	r0, r3
 800a31a:	f000 fe57 	bl	800afcc <xTaskRemoveFromEventList>
 800a31e:	4603      	mov	r3, r0
 800a320:	2b00      	cmp	r3, #0
 800a322:	d007      	beq.n	800a334 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a324:	4b3c      	ldr	r3, [pc, #240]	@ (800a418 <xQueueReceive+0x1c0>)
 800a326:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a32a:	601a      	str	r2, [r3, #0]
 800a32c:	f3bf 8f4f 	dsb	sy
 800a330:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a334:	f001 fdd2 	bl	800bedc <vPortExitCritical>
				return pdPASS;
 800a338:	2301      	movs	r3, #1
 800a33a:	e069      	b.n	800a410 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d103      	bne.n	800a34a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a342:	f001 fdcb 	bl	800bedc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a346:	2300      	movs	r3, #0
 800a348:	e062      	b.n	800a410 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a34a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d106      	bne.n	800a35e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a350:	f107 0310 	add.w	r3, r7, #16
 800a354:	4618      	mov	r0, r3
 800a356:	f000 fec5 	bl	800b0e4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a35a:	2301      	movs	r3, #1
 800a35c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a35e:	f001 fdbd 	bl	800bedc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a362:	f000 fc0d 	bl	800ab80 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a366:	f001 fd87 	bl	800be78 <vPortEnterCritical>
 800a36a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a36c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a370:	b25b      	sxtb	r3, r3
 800a372:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a376:	d103      	bne.n	800a380 <xQueueReceive+0x128>
 800a378:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a37a:	2200      	movs	r2, #0
 800a37c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a380:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a382:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a386:	b25b      	sxtb	r3, r3
 800a388:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a38c:	d103      	bne.n	800a396 <xQueueReceive+0x13e>
 800a38e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a390:	2200      	movs	r2, #0
 800a392:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a396:	f001 fda1 	bl	800bedc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a39a:	1d3a      	adds	r2, r7, #4
 800a39c:	f107 0310 	add.w	r3, r7, #16
 800a3a0:	4611      	mov	r1, r2
 800a3a2:	4618      	mov	r0, r3
 800a3a4:	f000 feb4 	bl	800b110 <xTaskCheckForTimeOut>
 800a3a8:	4603      	mov	r3, r0
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d123      	bne.n	800a3f6 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a3ae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a3b0:	f000 f916 	bl	800a5e0 <prvIsQueueEmpty>
 800a3b4:	4603      	mov	r3, r0
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d017      	beq.n	800a3ea <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a3ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3bc:	3324      	adds	r3, #36	@ 0x24
 800a3be:	687a      	ldr	r2, [r7, #4]
 800a3c0:	4611      	mov	r1, r2
 800a3c2:	4618      	mov	r0, r3
 800a3c4:	f000 fdb0 	bl	800af28 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a3c8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a3ca:	f000 f8b7 	bl	800a53c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a3ce:	f000 fbe5 	bl	800ab9c <xTaskResumeAll>
 800a3d2:	4603      	mov	r3, r0
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d189      	bne.n	800a2ec <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800a3d8:	4b0f      	ldr	r3, [pc, #60]	@ (800a418 <xQueueReceive+0x1c0>)
 800a3da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a3de:	601a      	str	r2, [r3, #0]
 800a3e0:	f3bf 8f4f 	dsb	sy
 800a3e4:	f3bf 8f6f 	isb	sy
 800a3e8:	e780      	b.n	800a2ec <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a3ea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a3ec:	f000 f8a6 	bl	800a53c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a3f0:	f000 fbd4 	bl	800ab9c <xTaskResumeAll>
 800a3f4:	e77a      	b.n	800a2ec <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a3f6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a3f8:	f000 f8a0 	bl	800a53c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a3fc:	f000 fbce 	bl	800ab9c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a400:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a402:	f000 f8ed 	bl	800a5e0 <prvIsQueueEmpty>
 800a406:	4603      	mov	r3, r0
 800a408:	2b00      	cmp	r3, #0
 800a40a:	f43f af6f 	beq.w	800a2ec <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a40e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a410:	4618      	mov	r0, r3
 800a412:	3730      	adds	r7, #48	@ 0x30
 800a414:	46bd      	mov	sp, r7
 800a416:	bd80      	pop	{r7, pc}
 800a418:	e000ed04 	.word	0xe000ed04

0800a41c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a41c:	b580      	push	{r7, lr}
 800a41e:	b086      	sub	sp, #24
 800a420:	af00      	add	r7, sp, #0
 800a422:	60f8      	str	r0, [r7, #12]
 800a424:	60b9      	str	r1, [r7, #8]
 800a426:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a428:	2300      	movs	r3, #0
 800a42a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a430:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a436:	2b00      	cmp	r3, #0
 800a438:	d10d      	bne.n	800a456 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d14d      	bne.n	800a4de <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	689b      	ldr	r3, [r3, #8]
 800a446:	4618      	mov	r0, r3
 800a448:	f000 ffc6 	bl	800b3d8 <xTaskPriorityDisinherit>
 800a44c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	2200      	movs	r2, #0
 800a452:	609a      	str	r2, [r3, #8]
 800a454:	e043      	b.n	800a4de <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d119      	bne.n	800a490 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	6858      	ldr	r0, [r3, #4]
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a464:	461a      	mov	r2, r3
 800a466:	68b9      	ldr	r1, [r7, #8]
 800a468:	f010 fc41 	bl	801acee <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	685a      	ldr	r2, [r3, #4]
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a474:	441a      	add	r2, r3
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	685a      	ldr	r2, [r3, #4]
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	689b      	ldr	r3, [r3, #8]
 800a482:	429a      	cmp	r2, r3
 800a484:	d32b      	bcc.n	800a4de <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	681a      	ldr	r2, [r3, #0]
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	605a      	str	r2, [r3, #4]
 800a48e:	e026      	b.n	800a4de <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	68d8      	ldr	r0, [r3, #12]
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a498:	461a      	mov	r2, r3
 800a49a:	68b9      	ldr	r1, [r7, #8]
 800a49c:	f010 fc27 	bl	801acee <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	68da      	ldr	r2, [r3, #12]
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a4a8:	425b      	negs	r3, r3
 800a4aa:	441a      	add	r2, r3
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	68da      	ldr	r2, [r3, #12]
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	429a      	cmp	r2, r3
 800a4ba:	d207      	bcs.n	800a4cc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	689a      	ldr	r2, [r3, #8]
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a4c4:	425b      	negs	r3, r3
 800a4c6:	441a      	add	r2, r3
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	2b02      	cmp	r3, #2
 800a4d0:	d105      	bne.n	800a4de <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a4d2:	693b      	ldr	r3, [r7, #16]
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d002      	beq.n	800a4de <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a4d8:	693b      	ldr	r3, [r7, #16]
 800a4da:	3b01      	subs	r3, #1
 800a4dc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a4de:	693b      	ldr	r3, [r7, #16]
 800a4e0:	1c5a      	adds	r2, r3, #1
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800a4e6:	697b      	ldr	r3, [r7, #20]
}
 800a4e8:	4618      	mov	r0, r3
 800a4ea:	3718      	adds	r7, #24
 800a4ec:	46bd      	mov	sp, r7
 800a4ee:	bd80      	pop	{r7, pc}

0800a4f0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a4f0:	b580      	push	{r7, lr}
 800a4f2:	b082      	sub	sp, #8
 800a4f4:	af00      	add	r7, sp, #0
 800a4f6:	6078      	str	r0, [r7, #4]
 800a4f8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d018      	beq.n	800a534 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	68da      	ldr	r2, [r3, #12]
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a50a:	441a      	add	r2, r3
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	68da      	ldr	r2, [r3, #12]
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	689b      	ldr	r3, [r3, #8]
 800a518:	429a      	cmp	r2, r3
 800a51a:	d303      	bcc.n	800a524 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	681a      	ldr	r2, [r3, #0]
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	68d9      	ldr	r1, [r3, #12]
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a52c:	461a      	mov	r2, r3
 800a52e:	6838      	ldr	r0, [r7, #0]
 800a530:	f010 fbdd 	bl	801acee <memcpy>
	}
}
 800a534:	bf00      	nop
 800a536:	3708      	adds	r7, #8
 800a538:	46bd      	mov	sp, r7
 800a53a:	bd80      	pop	{r7, pc}

0800a53c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a53c:	b580      	push	{r7, lr}
 800a53e:	b084      	sub	sp, #16
 800a540:	af00      	add	r7, sp, #0
 800a542:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a544:	f001 fc98 	bl	800be78 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a54e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a550:	e011      	b.n	800a576 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a556:	2b00      	cmp	r3, #0
 800a558:	d012      	beq.n	800a580 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	3324      	adds	r3, #36	@ 0x24
 800a55e:	4618      	mov	r0, r3
 800a560:	f000 fd34 	bl	800afcc <xTaskRemoveFromEventList>
 800a564:	4603      	mov	r3, r0
 800a566:	2b00      	cmp	r3, #0
 800a568:	d001      	beq.n	800a56e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a56a:	f000 fe35 	bl	800b1d8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a56e:	7bfb      	ldrb	r3, [r7, #15]
 800a570:	3b01      	subs	r3, #1
 800a572:	b2db      	uxtb	r3, r3
 800a574:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a576:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	dce9      	bgt.n	800a552 <prvUnlockQueue+0x16>
 800a57e:	e000      	b.n	800a582 <prvUnlockQueue+0x46>
					break;
 800a580:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	22ff      	movs	r2, #255	@ 0xff
 800a586:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800a58a:	f001 fca7 	bl	800bedc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a58e:	f001 fc73 	bl	800be78 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a598:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a59a:	e011      	b.n	800a5c0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	691b      	ldr	r3, [r3, #16]
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d012      	beq.n	800a5ca <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	3310      	adds	r3, #16
 800a5a8:	4618      	mov	r0, r3
 800a5aa:	f000 fd0f 	bl	800afcc <xTaskRemoveFromEventList>
 800a5ae:	4603      	mov	r3, r0
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d001      	beq.n	800a5b8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a5b4:	f000 fe10 	bl	800b1d8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a5b8:	7bbb      	ldrb	r3, [r7, #14]
 800a5ba:	3b01      	subs	r3, #1
 800a5bc:	b2db      	uxtb	r3, r3
 800a5be:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a5c0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	dce9      	bgt.n	800a59c <prvUnlockQueue+0x60>
 800a5c8:	e000      	b.n	800a5cc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a5ca:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	22ff      	movs	r2, #255	@ 0xff
 800a5d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800a5d4:	f001 fc82 	bl	800bedc <vPortExitCritical>
}
 800a5d8:	bf00      	nop
 800a5da:	3710      	adds	r7, #16
 800a5dc:	46bd      	mov	sp, r7
 800a5de:	bd80      	pop	{r7, pc}

0800a5e0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a5e0:	b580      	push	{r7, lr}
 800a5e2:	b084      	sub	sp, #16
 800a5e4:	af00      	add	r7, sp, #0
 800a5e6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a5e8:	f001 fc46 	bl	800be78 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d102      	bne.n	800a5fa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a5f4:	2301      	movs	r3, #1
 800a5f6:	60fb      	str	r3, [r7, #12]
 800a5f8:	e001      	b.n	800a5fe <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a5fa:	2300      	movs	r3, #0
 800a5fc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a5fe:	f001 fc6d 	bl	800bedc <vPortExitCritical>

	return xReturn;
 800a602:	68fb      	ldr	r3, [r7, #12]
}
 800a604:	4618      	mov	r0, r3
 800a606:	3710      	adds	r7, #16
 800a608:	46bd      	mov	sp, r7
 800a60a:	bd80      	pop	{r7, pc}

0800a60c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a60c:	b580      	push	{r7, lr}
 800a60e:	b084      	sub	sp, #16
 800a610:	af00      	add	r7, sp, #0
 800a612:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a614:	f001 fc30 	bl	800be78 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a620:	429a      	cmp	r2, r3
 800a622:	d102      	bne.n	800a62a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a624:	2301      	movs	r3, #1
 800a626:	60fb      	str	r3, [r7, #12]
 800a628:	e001      	b.n	800a62e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a62a:	2300      	movs	r3, #0
 800a62c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a62e:	f001 fc55 	bl	800bedc <vPortExitCritical>

	return xReturn;
 800a632:	68fb      	ldr	r3, [r7, #12]
}
 800a634:	4618      	mov	r0, r3
 800a636:	3710      	adds	r7, #16
 800a638:	46bd      	mov	sp, r7
 800a63a:	bd80      	pop	{r7, pc}

0800a63c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a63c:	b480      	push	{r7}
 800a63e:	b085      	sub	sp, #20
 800a640:	af00      	add	r7, sp, #0
 800a642:	6078      	str	r0, [r7, #4]
 800a644:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a646:	2300      	movs	r3, #0
 800a648:	60fb      	str	r3, [r7, #12]
 800a64a:	e014      	b.n	800a676 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a64c:	4a0f      	ldr	r2, [pc, #60]	@ (800a68c <vQueueAddToRegistry+0x50>)
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a654:	2b00      	cmp	r3, #0
 800a656:	d10b      	bne.n	800a670 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a658:	490c      	ldr	r1, [pc, #48]	@ (800a68c <vQueueAddToRegistry+0x50>)
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	683a      	ldr	r2, [r7, #0]
 800a65e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a662:	4a0a      	ldr	r2, [pc, #40]	@ (800a68c <vQueueAddToRegistry+0x50>)
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	00db      	lsls	r3, r3, #3
 800a668:	4413      	add	r3, r2
 800a66a:	687a      	ldr	r2, [r7, #4]
 800a66c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a66e:	e006      	b.n	800a67e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	3301      	adds	r3, #1
 800a674:	60fb      	str	r3, [r7, #12]
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	2b07      	cmp	r3, #7
 800a67a:	d9e7      	bls.n	800a64c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a67c:	bf00      	nop
 800a67e:	bf00      	nop
 800a680:	3714      	adds	r7, #20
 800a682:	46bd      	mov	sp, r7
 800a684:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a688:	4770      	bx	lr
 800a68a:	bf00      	nop
 800a68c:	200056ac 	.word	0x200056ac

0800a690 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a690:	b580      	push	{r7, lr}
 800a692:	b086      	sub	sp, #24
 800a694:	af00      	add	r7, sp, #0
 800a696:	60f8      	str	r0, [r7, #12]
 800a698:	60b9      	str	r1, [r7, #8]
 800a69a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a6a0:	f001 fbea 	bl	800be78 <vPortEnterCritical>
 800a6a4:	697b      	ldr	r3, [r7, #20]
 800a6a6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a6aa:	b25b      	sxtb	r3, r3
 800a6ac:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a6b0:	d103      	bne.n	800a6ba <vQueueWaitForMessageRestricted+0x2a>
 800a6b2:	697b      	ldr	r3, [r7, #20]
 800a6b4:	2200      	movs	r2, #0
 800a6b6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a6ba:	697b      	ldr	r3, [r7, #20]
 800a6bc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a6c0:	b25b      	sxtb	r3, r3
 800a6c2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a6c6:	d103      	bne.n	800a6d0 <vQueueWaitForMessageRestricted+0x40>
 800a6c8:	697b      	ldr	r3, [r7, #20]
 800a6ca:	2200      	movs	r2, #0
 800a6cc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a6d0:	f001 fc04 	bl	800bedc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a6d4:	697b      	ldr	r3, [r7, #20]
 800a6d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d106      	bne.n	800a6ea <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a6dc:	697b      	ldr	r3, [r7, #20]
 800a6de:	3324      	adds	r3, #36	@ 0x24
 800a6e0:	687a      	ldr	r2, [r7, #4]
 800a6e2:	68b9      	ldr	r1, [r7, #8]
 800a6e4:	4618      	mov	r0, r3
 800a6e6:	f000 fc45 	bl	800af74 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a6ea:	6978      	ldr	r0, [r7, #20]
 800a6ec:	f7ff ff26 	bl	800a53c <prvUnlockQueue>
	}
 800a6f0:	bf00      	nop
 800a6f2:	3718      	adds	r7, #24
 800a6f4:	46bd      	mov	sp, r7
 800a6f6:	bd80      	pop	{r7, pc}

0800a6f8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a6f8:	b580      	push	{r7, lr}
 800a6fa:	b08e      	sub	sp, #56	@ 0x38
 800a6fc:	af04      	add	r7, sp, #16
 800a6fe:	60f8      	str	r0, [r7, #12]
 800a700:	60b9      	str	r1, [r7, #8]
 800a702:	607a      	str	r2, [r7, #4]
 800a704:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a706:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d10b      	bne.n	800a724 <xTaskCreateStatic+0x2c>
	__asm volatile
 800a70c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a710:	f383 8811 	msr	BASEPRI, r3
 800a714:	f3bf 8f6f 	isb	sy
 800a718:	f3bf 8f4f 	dsb	sy
 800a71c:	623b      	str	r3, [r7, #32]
}
 800a71e:	bf00      	nop
 800a720:	bf00      	nop
 800a722:	e7fd      	b.n	800a720 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a724:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a726:	2b00      	cmp	r3, #0
 800a728:	d10b      	bne.n	800a742 <xTaskCreateStatic+0x4a>
	__asm volatile
 800a72a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a72e:	f383 8811 	msr	BASEPRI, r3
 800a732:	f3bf 8f6f 	isb	sy
 800a736:	f3bf 8f4f 	dsb	sy
 800a73a:	61fb      	str	r3, [r7, #28]
}
 800a73c:	bf00      	nop
 800a73e:	bf00      	nop
 800a740:	e7fd      	b.n	800a73e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a742:	235c      	movs	r3, #92	@ 0x5c
 800a744:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a746:	693b      	ldr	r3, [r7, #16]
 800a748:	2b5c      	cmp	r3, #92	@ 0x5c
 800a74a:	d00b      	beq.n	800a764 <xTaskCreateStatic+0x6c>
	__asm volatile
 800a74c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a750:	f383 8811 	msr	BASEPRI, r3
 800a754:	f3bf 8f6f 	isb	sy
 800a758:	f3bf 8f4f 	dsb	sy
 800a75c:	61bb      	str	r3, [r7, #24]
}
 800a75e:	bf00      	nop
 800a760:	bf00      	nop
 800a762:	e7fd      	b.n	800a760 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a764:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a766:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d01e      	beq.n	800a7aa <xTaskCreateStatic+0xb2>
 800a76c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d01b      	beq.n	800a7aa <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a772:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a774:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a776:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a778:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a77a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a77c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a77e:	2202      	movs	r2, #2
 800a780:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a784:	2300      	movs	r3, #0
 800a786:	9303      	str	r3, [sp, #12]
 800a788:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a78a:	9302      	str	r3, [sp, #8]
 800a78c:	f107 0314 	add.w	r3, r7, #20
 800a790:	9301      	str	r3, [sp, #4]
 800a792:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a794:	9300      	str	r3, [sp, #0]
 800a796:	683b      	ldr	r3, [r7, #0]
 800a798:	687a      	ldr	r2, [r7, #4]
 800a79a:	68b9      	ldr	r1, [r7, #8]
 800a79c:	68f8      	ldr	r0, [r7, #12]
 800a79e:	f000 f850 	bl	800a842 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a7a2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a7a4:	f000 f8de 	bl	800a964 <prvAddNewTaskToReadyList>
 800a7a8:	e001      	b.n	800a7ae <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800a7aa:	2300      	movs	r3, #0
 800a7ac:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a7ae:	697b      	ldr	r3, [r7, #20]
	}
 800a7b0:	4618      	mov	r0, r3
 800a7b2:	3728      	adds	r7, #40	@ 0x28
 800a7b4:	46bd      	mov	sp, r7
 800a7b6:	bd80      	pop	{r7, pc}

0800a7b8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a7b8:	b580      	push	{r7, lr}
 800a7ba:	b08c      	sub	sp, #48	@ 0x30
 800a7bc:	af04      	add	r7, sp, #16
 800a7be:	60f8      	str	r0, [r7, #12]
 800a7c0:	60b9      	str	r1, [r7, #8]
 800a7c2:	603b      	str	r3, [r7, #0]
 800a7c4:	4613      	mov	r3, r2
 800a7c6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a7c8:	88fb      	ldrh	r3, [r7, #6]
 800a7ca:	009b      	lsls	r3, r3, #2
 800a7cc:	4618      	mov	r0, r3
 800a7ce:	f001 fc75 	bl	800c0bc <pvPortMalloc>
 800a7d2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a7d4:	697b      	ldr	r3, [r7, #20]
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d00e      	beq.n	800a7f8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a7da:	205c      	movs	r0, #92	@ 0x5c
 800a7dc:	f001 fc6e 	bl	800c0bc <pvPortMalloc>
 800a7e0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a7e2:	69fb      	ldr	r3, [r7, #28]
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d003      	beq.n	800a7f0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a7e8:	69fb      	ldr	r3, [r7, #28]
 800a7ea:	697a      	ldr	r2, [r7, #20]
 800a7ec:	631a      	str	r2, [r3, #48]	@ 0x30
 800a7ee:	e005      	b.n	800a7fc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a7f0:	6978      	ldr	r0, [r7, #20]
 800a7f2:	f001 fd31 	bl	800c258 <vPortFree>
 800a7f6:	e001      	b.n	800a7fc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a7f8:	2300      	movs	r3, #0
 800a7fa:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a7fc:	69fb      	ldr	r3, [r7, #28]
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d017      	beq.n	800a832 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a802:	69fb      	ldr	r3, [r7, #28]
 800a804:	2200      	movs	r2, #0
 800a806:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a80a:	88fa      	ldrh	r2, [r7, #6]
 800a80c:	2300      	movs	r3, #0
 800a80e:	9303      	str	r3, [sp, #12]
 800a810:	69fb      	ldr	r3, [r7, #28]
 800a812:	9302      	str	r3, [sp, #8]
 800a814:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a816:	9301      	str	r3, [sp, #4]
 800a818:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a81a:	9300      	str	r3, [sp, #0]
 800a81c:	683b      	ldr	r3, [r7, #0]
 800a81e:	68b9      	ldr	r1, [r7, #8]
 800a820:	68f8      	ldr	r0, [r7, #12]
 800a822:	f000 f80e 	bl	800a842 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a826:	69f8      	ldr	r0, [r7, #28]
 800a828:	f000 f89c 	bl	800a964 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a82c:	2301      	movs	r3, #1
 800a82e:	61bb      	str	r3, [r7, #24]
 800a830:	e002      	b.n	800a838 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a832:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a836:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a838:	69bb      	ldr	r3, [r7, #24]
	}
 800a83a:	4618      	mov	r0, r3
 800a83c:	3720      	adds	r7, #32
 800a83e:	46bd      	mov	sp, r7
 800a840:	bd80      	pop	{r7, pc}

0800a842 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a842:	b580      	push	{r7, lr}
 800a844:	b088      	sub	sp, #32
 800a846:	af00      	add	r7, sp, #0
 800a848:	60f8      	str	r0, [r7, #12]
 800a84a:	60b9      	str	r1, [r7, #8]
 800a84c:	607a      	str	r2, [r7, #4]
 800a84e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a850:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a852:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	009b      	lsls	r3, r3, #2
 800a858:	461a      	mov	r2, r3
 800a85a:	21a5      	movs	r1, #165	@ 0xa5
 800a85c:	f010 f97e 	bl	801ab5c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a860:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a862:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800a86a:	3b01      	subs	r3, #1
 800a86c:	009b      	lsls	r3, r3, #2
 800a86e:	4413      	add	r3, r2
 800a870:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a872:	69bb      	ldr	r3, [r7, #24]
 800a874:	f023 0307 	bic.w	r3, r3, #7
 800a878:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a87a:	69bb      	ldr	r3, [r7, #24]
 800a87c:	f003 0307 	and.w	r3, r3, #7
 800a880:	2b00      	cmp	r3, #0
 800a882:	d00b      	beq.n	800a89c <prvInitialiseNewTask+0x5a>
	__asm volatile
 800a884:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a888:	f383 8811 	msr	BASEPRI, r3
 800a88c:	f3bf 8f6f 	isb	sy
 800a890:	f3bf 8f4f 	dsb	sy
 800a894:	617b      	str	r3, [r7, #20]
}
 800a896:	bf00      	nop
 800a898:	bf00      	nop
 800a89a:	e7fd      	b.n	800a898 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a89c:	68bb      	ldr	r3, [r7, #8]
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d01f      	beq.n	800a8e2 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a8a2:	2300      	movs	r3, #0
 800a8a4:	61fb      	str	r3, [r7, #28]
 800a8a6:	e012      	b.n	800a8ce <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a8a8:	68ba      	ldr	r2, [r7, #8]
 800a8aa:	69fb      	ldr	r3, [r7, #28]
 800a8ac:	4413      	add	r3, r2
 800a8ae:	7819      	ldrb	r1, [r3, #0]
 800a8b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a8b2:	69fb      	ldr	r3, [r7, #28]
 800a8b4:	4413      	add	r3, r2
 800a8b6:	3334      	adds	r3, #52	@ 0x34
 800a8b8:	460a      	mov	r2, r1
 800a8ba:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a8bc:	68ba      	ldr	r2, [r7, #8]
 800a8be:	69fb      	ldr	r3, [r7, #28]
 800a8c0:	4413      	add	r3, r2
 800a8c2:	781b      	ldrb	r3, [r3, #0]
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d006      	beq.n	800a8d6 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a8c8:	69fb      	ldr	r3, [r7, #28]
 800a8ca:	3301      	adds	r3, #1
 800a8cc:	61fb      	str	r3, [r7, #28]
 800a8ce:	69fb      	ldr	r3, [r7, #28]
 800a8d0:	2b0f      	cmp	r3, #15
 800a8d2:	d9e9      	bls.n	800a8a8 <prvInitialiseNewTask+0x66>
 800a8d4:	e000      	b.n	800a8d8 <prvInitialiseNewTask+0x96>
			{
				break;
 800a8d6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a8d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8da:	2200      	movs	r2, #0
 800a8dc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800a8e0:	e003      	b.n	800a8ea <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a8e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8e4:	2200      	movs	r2, #0
 800a8e6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a8ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8ec:	2b37      	cmp	r3, #55	@ 0x37
 800a8ee:	d901      	bls.n	800a8f4 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a8f0:	2337      	movs	r3, #55	@ 0x37
 800a8f2:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a8f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8f6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a8f8:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a8fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8fc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a8fe:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800a900:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a902:	2200      	movs	r2, #0
 800a904:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a906:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a908:	3304      	adds	r3, #4
 800a90a:	4618      	mov	r0, r3
 800a90c:	f7ff f966 	bl	8009bdc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a910:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a912:	3318      	adds	r3, #24
 800a914:	4618      	mov	r0, r3
 800a916:	f7ff f961 	bl	8009bdc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a91a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a91c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a91e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a920:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a922:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800a926:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a928:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a92a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a92c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a92e:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a930:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a932:	2200      	movs	r2, #0
 800a934:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a936:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a938:	2200      	movs	r2, #0
 800a93a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a93e:	683a      	ldr	r2, [r7, #0]
 800a940:	68f9      	ldr	r1, [r7, #12]
 800a942:	69b8      	ldr	r0, [r7, #24]
 800a944:	f001 f966 	bl	800bc14 <pxPortInitialiseStack>
 800a948:	4602      	mov	r2, r0
 800a94a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a94c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a94e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a950:	2b00      	cmp	r3, #0
 800a952:	d002      	beq.n	800a95a <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a954:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a956:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a958:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a95a:	bf00      	nop
 800a95c:	3720      	adds	r7, #32
 800a95e:	46bd      	mov	sp, r7
 800a960:	bd80      	pop	{r7, pc}
	...

0800a964 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a964:	b580      	push	{r7, lr}
 800a966:	b082      	sub	sp, #8
 800a968:	af00      	add	r7, sp, #0
 800a96a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a96c:	f001 fa84 	bl	800be78 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a970:	4b2d      	ldr	r3, [pc, #180]	@ (800aa28 <prvAddNewTaskToReadyList+0xc4>)
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	3301      	adds	r3, #1
 800a976:	4a2c      	ldr	r2, [pc, #176]	@ (800aa28 <prvAddNewTaskToReadyList+0xc4>)
 800a978:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a97a:	4b2c      	ldr	r3, [pc, #176]	@ (800aa2c <prvAddNewTaskToReadyList+0xc8>)
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d109      	bne.n	800a996 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a982:	4a2a      	ldr	r2, [pc, #168]	@ (800aa2c <prvAddNewTaskToReadyList+0xc8>)
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a988:	4b27      	ldr	r3, [pc, #156]	@ (800aa28 <prvAddNewTaskToReadyList+0xc4>)
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	2b01      	cmp	r3, #1
 800a98e:	d110      	bne.n	800a9b2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a990:	f000 fc46 	bl	800b220 <prvInitialiseTaskLists>
 800a994:	e00d      	b.n	800a9b2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a996:	4b26      	ldr	r3, [pc, #152]	@ (800aa30 <prvAddNewTaskToReadyList+0xcc>)
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d109      	bne.n	800a9b2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a99e:	4b23      	ldr	r3, [pc, #140]	@ (800aa2c <prvAddNewTaskToReadyList+0xc8>)
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a9a8:	429a      	cmp	r2, r3
 800a9aa:	d802      	bhi.n	800a9b2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a9ac:	4a1f      	ldr	r2, [pc, #124]	@ (800aa2c <prvAddNewTaskToReadyList+0xc8>)
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a9b2:	4b20      	ldr	r3, [pc, #128]	@ (800aa34 <prvAddNewTaskToReadyList+0xd0>)
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	3301      	adds	r3, #1
 800a9b8:	4a1e      	ldr	r2, [pc, #120]	@ (800aa34 <prvAddNewTaskToReadyList+0xd0>)
 800a9ba:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a9bc:	4b1d      	ldr	r3, [pc, #116]	@ (800aa34 <prvAddNewTaskToReadyList+0xd0>)
 800a9be:	681a      	ldr	r2, [r3, #0]
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a9c8:	4b1b      	ldr	r3, [pc, #108]	@ (800aa38 <prvAddNewTaskToReadyList+0xd4>)
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	429a      	cmp	r2, r3
 800a9ce:	d903      	bls.n	800a9d8 <prvAddNewTaskToReadyList+0x74>
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a9d4:	4a18      	ldr	r2, [pc, #96]	@ (800aa38 <prvAddNewTaskToReadyList+0xd4>)
 800a9d6:	6013      	str	r3, [r2, #0]
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a9dc:	4613      	mov	r3, r2
 800a9de:	009b      	lsls	r3, r3, #2
 800a9e0:	4413      	add	r3, r2
 800a9e2:	009b      	lsls	r3, r3, #2
 800a9e4:	4a15      	ldr	r2, [pc, #84]	@ (800aa3c <prvAddNewTaskToReadyList+0xd8>)
 800a9e6:	441a      	add	r2, r3
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	3304      	adds	r3, #4
 800a9ec:	4619      	mov	r1, r3
 800a9ee:	4610      	mov	r0, r2
 800a9f0:	f7ff f901 	bl	8009bf6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a9f4:	f001 fa72 	bl	800bedc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a9f8:	4b0d      	ldr	r3, [pc, #52]	@ (800aa30 <prvAddNewTaskToReadyList+0xcc>)
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d00e      	beq.n	800aa1e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800aa00:	4b0a      	ldr	r3, [pc, #40]	@ (800aa2c <prvAddNewTaskToReadyList+0xc8>)
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aa0a:	429a      	cmp	r2, r3
 800aa0c:	d207      	bcs.n	800aa1e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800aa0e:	4b0c      	ldr	r3, [pc, #48]	@ (800aa40 <prvAddNewTaskToReadyList+0xdc>)
 800aa10:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800aa14:	601a      	str	r2, [r3, #0]
 800aa16:	f3bf 8f4f 	dsb	sy
 800aa1a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800aa1e:	bf00      	nop
 800aa20:	3708      	adds	r7, #8
 800aa22:	46bd      	mov	sp, r7
 800aa24:	bd80      	pop	{r7, pc}
 800aa26:	bf00      	nop
 800aa28:	20005bc0 	.word	0x20005bc0
 800aa2c:	200056ec 	.word	0x200056ec
 800aa30:	20005bcc 	.word	0x20005bcc
 800aa34:	20005bdc 	.word	0x20005bdc
 800aa38:	20005bc8 	.word	0x20005bc8
 800aa3c:	200056f0 	.word	0x200056f0
 800aa40:	e000ed04 	.word	0xe000ed04

0800aa44 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800aa44:	b580      	push	{r7, lr}
 800aa46:	b084      	sub	sp, #16
 800aa48:	af00      	add	r7, sp, #0
 800aa4a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800aa4c:	2300      	movs	r3, #0
 800aa4e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d018      	beq.n	800aa88 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800aa56:	4b14      	ldr	r3, [pc, #80]	@ (800aaa8 <vTaskDelay+0x64>)
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d00b      	beq.n	800aa76 <vTaskDelay+0x32>
	__asm volatile
 800aa5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa62:	f383 8811 	msr	BASEPRI, r3
 800aa66:	f3bf 8f6f 	isb	sy
 800aa6a:	f3bf 8f4f 	dsb	sy
 800aa6e:	60bb      	str	r3, [r7, #8]
}
 800aa70:	bf00      	nop
 800aa72:	bf00      	nop
 800aa74:	e7fd      	b.n	800aa72 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800aa76:	f000 f883 	bl	800ab80 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800aa7a:	2100      	movs	r1, #0
 800aa7c:	6878      	ldr	r0, [r7, #4]
 800aa7e:	f000 fd1b 	bl	800b4b8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800aa82:	f000 f88b 	bl	800ab9c <xTaskResumeAll>
 800aa86:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d107      	bne.n	800aa9e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800aa8e:	4b07      	ldr	r3, [pc, #28]	@ (800aaac <vTaskDelay+0x68>)
 800aa90:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800aa94:	601a      	str	r2, [r3, #0]
 800aa96:	f3bf 8f4f 	dsb	sy
 800aa9a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800aa9e:	bf00      	nop
 800aaa0:	3710      	adds	r7, #16
 800aaa2:	46bd      	mov	sp, r7
 800aaa4:	bd80      	pop	{r7, pc}
 800aaa6:	bf00      	nop
 800aaa8:	20005be8 	.word	0x20005be8
 800aaac:	e000ed04 	.word	0xe000ed04

0800aab0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800aab0:	b580      	push	{r7, lr}
 800aab2:	b08a      	sub	sp, #40	@ 0x28
 800aab4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800aab6:	2300      	movs	r3, #0
 800aab8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800aaba:	2300      	movs	r3, #0
 800aabc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800aabe:	463a      	mov	r2, r7
 800aac0:	1d39      	adds	r1, r7, #4
 800aac2:	f107 0308 	add.w	r3, r7, #8
 800aac6:	4618      	mov	r0, r3
 800aac8:	f7ff f834 	bl	8009b34 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800aacc:	6839      	ldr	r1, [r7, #0]
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	68ba      	ldr	r2, [r7, #8]
 800aad2:	9202      	str	r2, [sp, #8]
 800aad4:	9301      	str	r3, [sp, #4]
 800aad6:	2300      	movs	r3, #0
 800aad8:	9300      	str	r3, [sp, #0]
 800aada:	2300      	movs	r3, #0
 800aadc:	460a      	mov	r2, r1
 800aade:	4922      	ldr	r1, [pc, #136]	@ (800ab68 <vTaskStartScheduler+0xb8>)
 800aae0:	4822      	ldr	r0, [pc, #136]	@ (800ab6c <vTaskStartScheduler+0xbc>)
 800aae2:	f7ff fe09 	bl	800a6f8 <xTaskCreateStatic>
 800aae6:	4603      	mov	r3, r0
 800aae8:	4a21      	ldr	r2, [pc, #132]	@ (800ab70 <vTaskStartScheduler+0xc0>)
 800aaea:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800aaec:	4b20      	ldr	r3, [pc, #128]	@ (800ab70 <vTaskStartScheduler+0xc0>)
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d002      	beq.n	800aafa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800aaf4:	2301      	movs	r3, #1
 800aaf6:	617b      	str	r3, [r7, #20]
 800aaf8:	e001      	b.n	800aafe <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800aafa:	2300      	movs	r3, #0
 800aafc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800aafe:	697b      	ldr	r3, [r7, #20]
 800ab00:	2b01      	cmp	r3, #1
 800ab02:	d102      	bne.n	800ab0a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800ab04:	f000 fd2c 	bl	800b560 <xTimerCreateTimerTask>
 800ab08:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800ab0a:	697b      	ldr	r3, [r7, #20]
 800ab0c:	2b01      	cmp	r3, #1
 800ab0e:	d116      	bne.n	800ab3e <vTaskStartScheduler+0x8e>
	__asm volatile
 800ab10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab14:	f383 8811 	msr	BASEPRI, r3
 800ab18:	f3bf 8f6f 	isb	sy
 800ab1c:	f3bf 8f4f 	dsb	sy
 800ab20:	613b      	str	r3, [r7, #16]
}
 800ab22:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ab24:	4b13      	ldr	r3, [pc, #76]	@ (800ab74 <vTaskStartScheduler+0xc4>)
 800ab26:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ab2a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800ab2c:	4b12      	ldr	r3, [pc, #72]	@ (800ab78 <vTaskStartScheduler+0xc8>)
 800ab2e:	2201      	movs	r2, #1
 800ab30:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800ab32:	4b12      	ldr	r3, [pc, #72]	@ (800ab7c <vTaskStartScheduler+0xcc>)
 800ab34:	2200      	movs	r2, #0
 800ab36:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800ab38:	f001 f8fa 	bl	800bd30 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800ab3c:	e00f      	b.n	800ab5e <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ab3e:	697b      	ldr	r3, [r7, #20]
 800ab40:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ab44:	d10b      	bne.n	800ab5e <vTaskStartScheduler+0xae>
	__asm volatile
 800ab46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab4a:	f383 8811 	msr	BASEPRI, r3
 800ab4e:	f3bf 8f6f 	isb	sy
 800ab52:	f3bf 8f4f 	dsb	sy
 800ab56:	60fb      	str	r3, [r7, #12]
}
 800ab58:	bf00      	nop
 800ab5a:	bf00      	nop
 800ab5c:	e7fd      	b.n	800ab5a <vTaskStartScheduler+0xaa>
}
 800ab5e:	bf00      	nop
 800ab60:	3718      	adds	r7, #24
 800ab62:	46bd      	mov	sp, r7
 800ab64:	bd80      	pop	{r7, pc}
 800ab66:	bf00      	nop
 800ab68:	0801ccd4 	.word	0x0801ccd4
 800ab6c:	0800b1f1 	.word	0x0800b1f1
 800ab70:	20005be4 	.word	0x20005be4
 800ab74:	20005be0 	.word	0x20005be0
 800ab78:	20005bcc 	.word	0x20005bcc
 800ab7c:	20005bc4 	.word	0x20005bc4

0800ab80 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800ab80:	b480      	push	{r7}
 800ab82:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800ab84:	4b04      	ldr	r3, [pc, #16]	@ (800ab98 <vTaskSuspendAll+0x18>)
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	3301      	adds	r3, #1
 800ab8a:	4a03      	ldr	r2, [pc, #12]	@ (800ab98 <vTaskSuspendAll+0x18>)
 800ab8c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800ab8e:	bf00      	nop
 800ab90:	46bd      	mov	sp, r7
 800ab92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab96:	4770      	bx	lr
 800ab98:	20005be8 	.word	0x20005be8

0800ab9c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800ab9c:	b580      	push	{r7, lr}
 800ab9e:	b084      	sub	sp, #16
 800aba0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800aba2:	2300      	movs	r3, #0
 800aba4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800aba6:	2300      	movs	r3, #0
 800aba8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800abaa:	4b42      	ldr	r3, [pc, #264]	@ (800acb4 <xTaskResumeAll+0x118>)
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d10b      	bne.n	800abca <xTaskResumeAll+0x2e>
	__asm volatile
 800abb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800abb6:	f383 8811 	msr	BASEPRI, r3
 800abba:	f3bf 8f6f 	isb	sy
 800abbe:	f3bf 8f4f 	dsb	sy
 800abc2:	603b      	str	r3, [r7, #0]
}
 800abc4:	bf00      	nop
 800abc6:	bf00      	nop
 800abc8:	e7fd      	b.n	800abc6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800abca:	f001 f955 	bl	800be78 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800abce:	4b39      	ldr	r3, [pc, #228]	@ (800acb4 <xTaskResumeAll+0x118>)
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	3b01      	subs	r3, #1
 800abd4:	4a37      	ldr	r2, [pc, #220]	@ (800acb4 <xTaskResumeAll+0x118>)
 800abd6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800abd8:	4b36      	ldr	r3, [pc, #216]	@ (800acb4 <xTaskResumeAll+0x118>)
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d162      	bne.n	800aca6 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800abe0:	4b35      	ldr	r3, [pc, #212]	@ (800acb8 <xTaskResumeAll+0x11c>)
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d05e      	beq.n	800aca6 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800abe8:	e02f      	b.n	800ac4a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800abea:	4b34      	ldr	r3, [pc, #208]	@ (800acbc <xTaskResumeAll+0x120>)
 800abec:	68db      	ldr	r3, [r3, #12]
 800abee:	68db      	ldr	r3, [r3, #12]
 800abf0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	3318      	adds	r3, #24
 800abf6:	4618      	mov	r0, r3
 800abf8:	f7ff f85a 	bl	8009cb0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	3304      	adds	r3, #4
 800ac00:	4618      	mov	r0, r3
 800ac02:	f7ff f855 	bl	8009cb0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ac0a:	4b2d      	ldr	r3, [pc, #180]	@ (800acc0 <xTaskResumeAll+0x124>)
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	429a      	cmp	r2, r3
 800ac10:	d903      	bls.n	800ac1a <xTaskResumeAll+0x7e>
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac16:	4a2a      	ldr	r2, [pc, #168]	@ (800acc0 <xTaskResumeAll+0x124>)
 800ac18:	6013      	str	r3, [r2, #0]
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ac1e:	4613      	mov	r3, r2
 800ac20:	009b      	lsls	r3, r3, #2
 800ac22:	4413      	add	r3, r2
 800ac24:	009b      	lsls	r3, r3, #2
 800ac26:	4a27      	ldr	r2, [pc, #156]	@ (800acc4 <xTaskResumeAll+0x128>)
 800ac28:	441a      	add	r2, r3
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	3304      	adds	r3, #4
 800ac2e:	4619      	mov	r1, r3
 800ac30:	4610      	mov	r0, r2
 800ac32:	f7fe ffe0 	bl	8009bf6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ac3a:	4b23      	ldr	r3, [pc, #140]	@ (800acc8 <xTaskResumeAll+0x12c>)
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac40:	429a      	cmp	r2, r3
 800ac42:	d302      	bcc.n	800ac4a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800ac44:	4b21      	ldr	r3, [pc, #132]	@ (800accc <xTaskResumeAll+0x130>)
 800ac46:	2201      	movs	r2, #1
 800ac48:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ac4a:	4b1c      	ldr	r3, [pc, #112]	@ (800acbc <xTaskResumeAll+0x120>)
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d1cb      	bne.n	800abea <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d001      	beq.n	800ac5c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800ac58:	f000 fb80 	bl	800b35c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800ac5c:	4b1c      	ldr	r3, [pc, #112]	@ (800acd0 <xTaskResumeAll+0x134>)
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d010      	beq.n	800ac8a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800ac68:	f000 f846 	bl	800acf8 <xTaskIncrementTick>
 800ac6c:	4603      	mov	r3, r0
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d002      	beq.n	800ac78 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800ac72:	4b16      	ldr	r3, [pc, #88]	@ (800accc <xTaskResumeAll+0x130>)
 800ac74:	2201      	movs	r2, #1
 800ac76:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	3b01      	subs	r3, #1
 800ac7c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d1f1      	bne.n	800ac68 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800ac84:	4b12      	ldr	r3, [pc, #72]	@ (800acd0 <xTaskResumeAll+0x134>)
 800ac86:	2200      	movs	r2, #0
 800ac88:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800ac8a:	4b10      	ldr	r3, [pc, #64]	@ (800accc <xTaskResumeAll+0x130>)
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d009      	beq.n	800aca6 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800ac92:	2301      	movs	r3, #1
 800ac94:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800ac96:	4b0f      	ldr	r3, [pc, #60]	@ (800acd4 <xTaskResumeAll+0x138>)
 800ac98:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ac9c:	601a      	str	r2, [r3, #0]
 800ac9e:	f3bf 8f4f 	dsb	sy
 800aca2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800aca6:	f001 f919 	bl	800bedc <vPortExitCritical>

	return xAlreadyYielded;
 800acaa:	68bb      	ldr	r3, [r7, #8]
}
 800acac:	4618      	mov	r0, r3
 800acae:	3710      	adds	r7, #16
 800acb0:	46bd      	mov	sp, r7
 800acb2:	bd80      	pop	{r7, pc}
 800acb4:	20005be8 	.word	0x20005be8
 800acb8:	20005bc0 	.word	0x20005bc0
 800acbc:	20005b80 	.word	0x20005b80
 800acc0:	20005bc8 	.word	0x20005bc8
 800acc4:	200056f0 	.word	0x200056f0
 800acc8:	200056ec 	.word	0x200056ec
 800accc:	20005bd4 	.word	0x20005bd4
 800acd0:	20005bd0 	.word	0x20005bd0
 800acd4:	e000ed04 	.word	0xe000ed04

0800acd8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800acd8:	b480      	push	{r7}
 800acda:	b083      	sub	sp, #12
 800acdc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800acde:	4b05      	ldr	r3, [pc, #20]	@ (800acf4 <xTaskGetTickCount+0x1c>)
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800ace4:	687b      	ldr	r3, [r7, #4]
}
 800ace6:	4618      	mov	r0, r3
 800ace8:	370c      	adds	r7, #12
 800acea:	46bd      	mov	sp, r7
 800acec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acf0:	4770      	bx	lr
 800acf2:	bf00      	nop
 800acf4:	20005bc4 	.word	0x20005bc4

0800acf8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800acf8:	b580      	push	{r7, lr}
 800acfa:	b086      	sub	sp, #24
 800acfc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800acfe:	2300      	movs	r3, #0
 800ad00:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ad02:	4b4f      	ldr	r3, [pc, #316]	@ (800ae40 <xTaskIncrementTick+0x148>)
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	f040 8090 	bne.w	800ae2c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ad0c:	4b4d      	ldr	r3, [pc, #308]	@ (800ae44 <xTaskIncrementTick+0x14c>)
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	3301      	adds	r3, #1
 800ad12:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800ad14:	4a4b      	ldr	r2, [pc, #300]	@ (800ae44 <xTaskIncrementTick+0x14c>)
 800ad16:	693b      	ldr	r3, [r7, #16]
 800ad18:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ad1a:	693b      	ldr	r3, [r7, #16]
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d121      	bne.n	800ad64 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800ad20:	4b49      	ldr	r3, [pc, #292]	@ (800ae48 <xTaskIncrementTick+0x150>)
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d00b      	beq.n	800ad42 <xTaskIncrementTick+0x4a>
	__asm volatile
 800ad2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad2e:	f383 8811 	msr	BASEPRI, r3
 800ad32:	f3bf 8f6f 	isb	sy
 800ad36:	f3bf 8f4f 	dsb	sy
 800ad3a:	603b      	str	r3, [r7, #0]
}
 800ad3c:	bf00      	nop
 800ad3e:	bf00      	nop
 800ad40:	e7fd      	b.n	800ad3e <xTaskIncrementTick+0x46>
 800ad42:	4b41      	ldr	r3, [pc, #260]	@ (800ae48 <xTaskIncrementTick+0x150>)
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	60fb      	str	r3, [r7, #12]
 800ad48:	4b40      	ldr	r3, [pc, #256]	@ (800ae4c <xTaskIncrementTick+0x154>)
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	4a3e      	ldr	r2, [pc, #248]	@ (800ae48 <xTaskIncrementTick+0x150>)
 800ad4e:	6013      	str	r3, [r2, #0]
 800ad50:	4a3e      	ldr	r2, [pc, #248]	@ (800ae4c <xTaskIncrementTick+0x154>)
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	6013      	str	r3, [r2, #0]
 800ad56:	4b3e      	ldr	r3, [pc, #248]	@ (800ae50 <xTaskIncrementTick+0x158>)
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	3301      	adds	r3, #1
 800ad5c:	4a3c      	ldr	r2, [pc, #240]	@ (800ae50 <xTaskIncrementTick+0x158>)
 800ad5e:	6013      	str	r3, [r2, #0]
 800ad60:	f000 fafc 	bl	800b35c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800ad64:	4b3b      	ldr	r3, [pc, #236]	@ (800ae54 <xTaskIncrementTick+0x15c>)
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	693a      	ldr	r2, [r7, #16]
 800ad6a:	429a      	cmp	r2, r3
 800ad6c:	d349      	bcc.n	800ae02 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ad6e:	4b36      	ldr	r3, [pc, #216]	@ (800ae48 <xTaskIncrementTick+0x150>)
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d104      	bne.n	800ad82 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ad78:	4b36      	ldr	r3, [pc, #216]	@ (800ae54 <xTaskIncrementTick+0x15c>)
 800ad7a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ad7e:	601a      	str	r2, [r3, #0]
					break;
 800ad80:	e03f      	b.n	800ae02 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ad82:	4b31      	ldr	r3, [pc, #196]	@ (800ae48 <xTaskIncrementTick+0x150>)
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	68db      	ldr	r3, [r3, #12]
 800ad88:	68db      	ldr	r3, [r3, #12]
 800ad8a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800ad8c:	68bb      	ldr	r3, [r7, #8]
 800ad8e:	685b      	ldr	r3, [r3, #4]
 800ad90:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800ad92:	693a      	ldr	r2, [r7, #16]
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	429a      	cmp	r2, r3
 800ad98:	d203      	bcs.n	800ada2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800ad9a:	4a2e      	ldr	r2, [pc, #184]	@ (800ae54 <xTaskIncrementTick+0x15c>)
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800ada0:	e02f      	b.n	800ae02 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ada2:	68bb      	ldr	r3, [r7, #8]
 800ada4:	3304      	adds	r3, #4
 800ada6:	4618      	mov	r0, r3
 800ada8:	f7fe ff82 	bl	8009cb0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800adac:	68bb      	ldr	r3, [r7, #8]
 800adae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d004      	beq.n	800adbe <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800adb4:	68bb      	ldr	r3, [r7, #8]
 800adb6:	3318      	adds	r3, #24
 800adb8:	4618      	mov	r0, r3
 800adba:	f7fe ff79 	bl	8009cb0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800adbe:	68bb      	ldr	r3, [r7, #8]
 800adc0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800adc2:	4b25      	ldr	r3, [pc, #148]	@ (800ae58 <xTaskIncrementTick+0x160>)
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	429a      	cmp	r2, r3
 800adc8:	d903      	bls.n	800add2 <xTaskIncrementTick+0xda>
 800adca:	68bb      	ldr	r3, [r7, #8]
 800adcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800adce:	4a22      	ldr	r2, [pc, #136]	@ (800ae58 <xTaskIncrementTick+0x160>)
 800add0:	6013      	str	r3, [r2, #0]
 800add2:	68bb      	ldr	r3, [r7, #8]
 800add4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800add6:	4613      	mov	r3, r2
 800add8:	009b      	lsls	r3, r3, #2
 800adda:	4413      	add	r3, r2
 800addc:	009b      	lsls	r3, r3, #2
 800adde:	4a1f      	ldr	r2, [pc, #124]	@ (800ae5c <xTaskIncrementTick+0x164>)
 800ade0:	441a      	add	r2, r3
 800ade2:	68bb      	ldr	r3, [r7, #8]
 800ade4:	3304      	adds	r3, #4
 800ade6:	4619      	mov	r1, r3
 800ade8:	4610      	mov	r0, r2
 800adea:	f7fe ff04 	bl	8009bf6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800adee:	68bb      	ldr	r3, [r7, #8]
 800adf0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800adf2:	4b1b      	ldr	r3, [pc, #108]	@ (800ae60 <xTaskIncrementTick+0x168>)
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800adf8:	429a      	cmp	r2, r3
 800adfa:	d3b8      	bcc.n	800ad6e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800adfc:	2301      	movs	r3, #1
 800adfe:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ae00:	e7b5      	b.n	800ad6e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800ae02:	4b17      	ldr	r3, [pc, #92]	@ (800ae60 <xTaskIncrementTick+0x168>)
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ae08:	4914      	ldr	r1, [pc, #80]	@ (800ae5c <xTaskIncrementTick+0x164>)
 800ae0a:	4613      	mov	r3, r2
 800ae0c:	009b      	lsls	r3, r3, #2
 800ae0e:	4413      	add	r3, r2
 800ae10:	009b      	lsls	r3, r3, #2
 800ae12:	440b      	add	r3, r1
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	2b01      	cmp	r3, #1
 800ae18:	d901      	bls.n	800ae1e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800ae1a:	2301      	movs	r3, #1
 800ae1c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800ae1e:	4b11      	ldr	r3, [pc, #68]	@ (800ae64 <xTaskIncrementTick+0x16c>)
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d007      	beq.n	800ae36 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800ae26:	2301      	movs	r3, #1
 800ae28:	617b      	str	r3, [r7, #20]
 800ae2a:	e004      	b.n	800ae36 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800ae2c:	4b0e      	ldr	r3, [pc, #56]	@ (800ae68 <xTaskIncrementTick+0x170>)
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	3301      	adds	r3, #1
 800ae32:	4a0d      	ldr	r2, [pc, #52]	@ (800ae68 <xTaskIncrementTick+0x170>)
 800ae34:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800ae36:	697b      	ldr	r3, [r7, #20]
}
 800ae38:	4618      	mov	r0, r3
 800ae3a:	3718      	adds	r7, #24
 800ae3c:	46bd      	mov	sp, r7
 800ae3e:	bd80      	pop	{r7, pc}
 800ae40:	20005be8 	.word	0x20005be8
 800ae44:	20005bc4 	.word	0x20005bc4
 800ae48:	20005b78 	.word	0x20005b78
 800ae4c:	20005b7c 	.word	0x20005b7c
 800ae50:	20005bd8 	.word	0x20005bd8
 800ae54:	20005be0 	.word	0x20005be0
 800ae58:	20005bc8 	.word	0x20005bc8
 800ae5c:	200056f0 	.word	0x200056f0
 800ae60:	200056ec 	.word	0x200056ec
 800ae64:	20005bd4 	.word	0x20005bd4
 800ae68:	20005bd0 	.word	0x20005bd0

0800ae6c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800ae6c:	b480      	push	{r7}
 800ae6e:	b085      	sub	sp, #20
 800ae70:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ae72:	4b28      	ldr	r3, [pc, #160]	@ (800af14 <vTaskSwitchContext+0xa8>)
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d003      	beq.n	800ae82 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800ae7a:	4b27      	ldr	r3, [pc, #156]	@ (800af18 <vTaskSwitchContext+0xac>)
 800ae7c:	2201      	movs	r2, #1
 800ae7e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800ae80:	e042      	b.n	800af08 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800ae82:	4b25      	ldr	r3, [pc, #148]	@ (800af18 <vTaskSwitchContext+0xac>)
 800ae84:	2200      	movs	r2, #0
 800ae86:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ae88:	4b24      	ldr	r3, [pc, #144]	@ (800af1c <vTaskSwitchContext+0xb0>)
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	60fb      	str	r3, [r7, #12]
 800ae8e:	e011      	b.n	800aeb4 <vTaskSwitchContext+0x48>
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d10b      	bne.n	800aeae <vTaskSwitchContext+0x42>
	__asm volatile
 800ae96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae9a:	f383 8811 	msr	BASEPRI, r3
 800ae9e:	f3bf 8f6f 	isb	sy
 800aea2:	f3bf 8f4f 	dsb	sy
 800aea6:	607b      	str	r3, [r7, #4]
}
 800aea8:	bf00      	nop
 800aeaa:	bf00      	nop
 800aeac:	e7fd      	b.n	800aeaa <vTaskSwitchContext+0x3e>
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	3b01      	subs	r3, #1
 800aeb2:	60fb      	str	r3, [r7, #12]
 800aeb4:	491a      	ldr	r1, [pc, #104]	@ (800af20 <vTaskSwitchContext+0xb4>)
 800aeb6:	68fa      	ldr	r2, [r7, #12]
 800aeb8:	4613      	mov	r3, r2
 800aeba:	009b      	lsls	r3, r3, #2
 800aebc:	4413      	add	r3, r2
 800aebe:	009b      	lsls	r3, r3, #2
 800aec0:	440b      	add	r3, r1
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d0e3      	beq.n	800ae90 <vTaskSwitchContext+0x24>
 800aec8:	68fa      	ldr	r2, [r7, #12]
 800aeca:	4613      	mov	r3, r2
 800aecc:	009b      	lsls	r3, r3, #2
 800aece:	4413      	add	r3, r2
 800aed0:	009b      	lsls	r3, r3, #2
 800aed2:	4a13      	ldr	r2, [pc, #76]	@ (800af20 <vTaskSwitchContext+0xb4>)
 800aed4:	4413      	add	r3, r2
 800aed6:	60bb      	str	r3, [r7, #8]
 800aed8:	68bb      	ldr	r3, [r7, #8]
 800aeda:	685b      	ldr	r3, [r3, #4]
 800aedc:	685a      	ldr	r2, [r3, #4]
 800aede:	68bb      	ldr	r3, [r7, #8]
 800aee0:	605a      	str	r2, [r3, #4]
 800aee2:	68bb      	ldr	r3, [r7, #8]
 800aee4:	685a      	ldr	r2, [r3, #4]
 800aee6:	68bb      	ldr	r3, [r7, #8]
 800aee8:	3308      	adds	r3, #8
 800aeea:	429a      	cmp	r2, r3
 800aeec:	d104      	bne.n	800aef8 <vTaskSwitchContext+0x8c>
 800aeee:	68bb      	ldr	r3, [r7, #8]
 800aef0:	685b      	ldr	r3, [r3, #4]
 800aef2:	685a      	ldr	r2, [r3, #4]
 800aef4:	68bb      	ldr	r3, [r7, #8]
 800aef6:	605a      	str	r2, [r3, #4]
 800aef8:	68bb      	ldr	r3, [r7, #8]
 800aefa:	685b      	ldr	r3, [r3, #4]
 800aefc:	68db      	ldr	r3, [r3, #12]
 800aefe:	4a09      	ldr	r2, [pc, #36]	@ (800af24 <vTaskSwitchContext+0xb8>)
 800af00:	6013      	str	r3, [r2, #0]
 800af02:	4a06      	ldr	r2, [pc, #24]	@ (800af1c <vTaskSwitchContext+0xb0>)
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	6013      	str	r3, [r2, #0]
}
 800af08:	bf00      	nop
 800af0a:	3714      	adds	r7, #20
 800af0c:	46bd      	mov	sp, r7
 800af0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af12:	4770      	bx	lr
 800af14:	20005be8 	.word	0x20005be8
 800af18:	20005bd4 	.word	0x20005bd4
 800af1c:	20005bc8 	.word	0x20005bc8
 800af20:	200056f0 	.word	0x200056f0
 800af24:	200056ec 	.word	0x200056ec

0800af28 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800af28:	b580      	push	{r7, lr}
 800af2a:	b084      	sub	sp, #16
 800af2c:	af00      	add	r7, sp, #0
 800af2e:	6078      	str	r0, [r7, #4]
 800af30:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	2b00      	cmp	r3, #0
 800af36:	d10b      	bne.n	800af50 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800af38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af3c:	f383 8811 	msr	BASEPRI, r3
 800af40:	f3bf 8f6f 	isb	sy
 800af44:	f3bf 8f4f 	dsb	sy
 800af48:	60fb      	str	r3, [r7, #12]
}
 800af4a:	bf00      	nop
 800af4c:	bf00      	nop
 800af4e:	e7fd      	b.n	800af4c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800af50:	4b07      	ldr	r3, [pc, #28]	@ (800af70 <vTaskPlaceOnEventList+0x48>)
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	3318      	adds	r3, #24
 800af56:	4619      	mov	r1, r3
 800af58:	6878      	ldr	r0, [r7, #4]
 800af5a:	f7fe fe70 	bl	8009c3e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800af5e:	2101      	movs	r1, #1
 800af60:	6838      	ldr	r0, [r7, #0]
 800af62:	f000 faa9 	bl	800b4b8 <prvAddCurrentTaskToDelayedList>
}
 800af66:	bf00      	nop
 800af68:	3710      	adds	r7, #16
 800af6a:	46bd      	mov	sp, r7
 800af6c:	bd80      	pop	{r7, pc}
 800af6e:	bf00      	nop
 800af70:	200056ec 	.word	0x200056ec

0800af74 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800af74:	b580      	push	{r7, lr}
 800af76:	b086      	sub	sp, #24
 800af78:	af00      	add	r7, sp, #0
 800af7a:	60f8      	str	r0, [r7, #12]
 800af7c:	60b9      	str	r1, [r7, #8]
 800af7e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	2b00      	cmp	r3, #0
 800af84:	d10b      	bne.n	800af9e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800af86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af8a:	f383 8811 	msr	BASEPRI, r3
 800af8e:	f3bf 8f6f 	isb	sy
 800af92:	f3bf 8f4f 	dsb	sy
 800af96:	617b      	str	r3, [r7, #20]
}
 800af98:	bf00      	nop
 800af9a:	bf00      	nop
 800af9c:	e7fd      	b.n	800af9a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800af9e:	4b0a      	ldr	r3, [pc, #40]	@ (800afc8 <vTaskPlaceOnEventListRestricted+0x54>)
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	3318      	adds	r3, #24
 800afa4:	4619      	mov	r1, r3
 800afa6:	68f8      	ldr	r0, [r7, #12]
 800afa8:	f7fe fe25 	bl	8009bf6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d002      	beq.n	800afb8 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800afb2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800afb6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800afb8:	6879      	ldr	r1, [r7, #4]
 800afba:	68b8      	ldr	r0, [r7, #8]
 800afbc:	f000 fa7c 	bl	800b4b8 <prvAddCurrentTaskToDelayedList>
	}
 800afc0:	bf00      	nop
 800afc2:	3718      	adds	r7, #24
 800afc4:	46bd      	mov	sp, r7
 800afc6:	bd80      	pop	{r7, pc}
 800afc8:	200056ec 	.word	0x200056ec

0800afcc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800afcc:	b580      	push	{r7, lr}
 800afce:	b086      	sub	sp, #24
 800afd0:	af00      	add	r7, sp, #0
 800afd2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	68db      	ldr	r3, [r3, #12]
 800afd8:	68db      	ldr	r3, [r3, #12]
 800afda:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800afdc:	693b      	ldr	r3, [r7, #16]
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d10b      	bne.n	800affa <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800afe2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800afe6:	f383 8811 	msr	BASEPRI, r3
 800afea:	f3bf 8f6f 	isb	sy
 800afee:	f3bf 8f4f 	dsb	sy
 800aff2:	60fb      	str	r3, [r7, #12]
}
 800aff4:	bf00      	nop
 800aff6:	bf00      	nop
 800aff8:	e7fd      	b.n	800aff6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800affa:	693b      	ldr	r3, [r7, #16]
 800affc:	3318      	adds	r3, #24
 800affe:	4618      	mov	r0, r3
 800b000:	f7fe fe56 	bl	8009cb0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b004:	4b1d      	ldr	r3, [pc, #116]	@ (800b07c <xTaskRemoveFromEventList+0xb0>)
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d11d      	bne.n	800b048 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b00c:	693b      	ldr	r3, [r7, #16]
 800b00e:	3304      	adds	r3, #4
 800b010:	4618      	mov	r0, r3
 800b012:	f7fe fe4d 	bl	8009cb0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b016:	693b      	ldr	r3, [r7, #16]
 800b018:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b01a:	4b19      	ldr	r3, [pc, #100]	@ (800b080 <xTaskRemoveFromEventList+0xb4>)
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	429a      	cmp	r2, r3
 800b020:	d903      	bls.n	800b02a <xTaskRemoveFromEventList+0x5e>
 800b022:	693b      	ldr	r3, [r7, #16]
 800b024:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b026:	4a16      	ldr	r2, [pc, #88]	@ (800b080 <xTaskRemoveFromEventList+0xb4>)
 800b028:	6013      	str	r3, [r2, #0]
 800b02a:	693b      	ldr	r3, [r7, #16]
 800b02c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b02e:	4613      	mov	r3, r2
 800b030:	009b      	lsls	r3, r3, #2
 800b032:	4413      	add	r3, r2
 800b034:	009b      	lsls	r3, r3, #2
 800b036:	4a13      	ldr	r2, [pc, #76]	@ (800b084 <xTaskRemoveFromEventList+0xb8>)
 800b038:	441a      	add	r2, r3
 800b03a:	693b      	ldr	r3, [r7, #16]
 800b03c:	3304      	adds	r3, #4
 800b03e:	4619      	mov	r1, r3
 800b040:	4610      	mov	r0, r2
 800b042:	f7fe fdd8 	bl	8009bf6 <vListInsertEnd>
 800b046:	e005      	b.n	800b054 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b048:	693b      	ldr	r3, [r7, #16]
 800b04a:	3318      	adds	r3, #24
 800b04c:	4619      	mov	r1, r3
 800b04e:	480e      	ldr	r0, [pc, #56]	@ (800b088 <xTaskRemoveFromEventList+0xbc>)
 800b050:	f7fe fdd1 	bl	8009bf6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b054:	693b      	ldr	r3, [r7, #16]
 800b056:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b058:	4b0c      	ldr	r3, [pc, #48]	@ (800b08c <xTaskRemoveFromEventList+0xc0>)
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b05e:	429a      	cmp	r2, r3
 800b060:	d905      	bls.n	800b06e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b062:	2301      	movs	r3, #1
 800b064:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b066:	4b0a      	ldr	r3, [pc, #40]	@ (800b090 <xTaskRemoveFromEventList+0xc4>)
 800b068:	2201      	movs	r2, #1
 800b06a:	601a      	str	r2, [r3, #0]
 800b06c:	e001      	b.n	800b072 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800b06e:	2300      	movs	r3, #0
 800b070:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b072:	697b      	ldr	r3, [r7, #20]
}
 800b074:	4618      	mov	r0, r3
 800b076:	3718      	adds	r7, #24
 800b078:	46bd      	mov	sp, r7
 800b07a:	bd80      	pop	{r7, pc}
 800b07c:	20005be8 	.word	0x20005be8
 800b080:	20005bc8 	.word	0x20005bc8
 800b084:	200056f0 	.word	0x200056f0
 800b088:	20005b80 	.word	0x20005b80
 800b08c:	200056ec 	.word	0x200056ec
 800b090:	20005bd4 	.word	0x20005bd4

0800b094 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b094:	b580      	push	{r7, lr}
 800b096:	b084      	sub	sp, #16
 800b098:	af00      	add	r7, sp, #0
 800b09a:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d10b      	bne.n	800b0ba <vTaskSetTimeOutState+0x26>
	__asm volatile
 800b0a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b0a6:	f383 8811 	msr	BASEPRI, r3
 800b0aa:	f3bf 8f6f 	isb	sy
 800b0ae:	f3bf 8f4f 	dsb	sy
 800b0b2:	60fb      	str	r3, [r7, #12]
}
 800b0b4:	bf00      	nop
 800b0b6:	bf00      	nop
 800b0b8:	e7fd      	b.n	800b0b6 <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 800b0ba:	f000 fedd 	bl	800be78 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b0be:	4b07      	ldr	r3, [pc, #28]	@ (800b0dc <vTaskSetTimeOutState+0x48>)
 800b0c0:	681a      	ldr	r2, [r3, #0]
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 800b0c6:	4b06      	ldr	r3, [pc, #24]	@ (800b0e0 <vTaskSetTimeOutState+0x4c>)
 800b0c8:	681a      	ldr	r2, [r3, #0]
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 800b0ce:	f000 ff05 	bl	800bedc <vPortExitCritical>
}
 800b0d2:	bf00      	nop
 800b0d4:	3710      	adds	r7, #16
 800b0d6:	46bd      	mov	sp, r7
 800b0d8:	bd80      	pop	{r7, pc}
 800b0da:	bf00      	nop
 800b0dc:	20005bd8 	.word	0x20005bd8
 800b0e0:	20005bc4 	.word	0x20005bc4

0800b0e4 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b0e4:	b480      	push	{r7}
 800b0e6:	b083      	sub	sp, #12
 800b0e8:	af00      	add	r7, sp, #0
 800b0ea:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b0ec:	4b06      	ldr	r3, [pc, #24]	@ (800b108 <vTaskInternalSetTimeOutState+0x24>)
 800b0ee:	681a      	ldr	r2, [r3, #0]
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b0f4:	4b05      	ldr	r3, [pc, #20]	@ (800b10c <vTaskInternalSetTimeOutState+0x28>)
 800b0f6:	681a      	ldr	r2, [r3, #0]
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	605a      	str	r2, [r3, #4]
}
 800b0fc:	bf00      	nop
 800b0fe:	370c      	adds	r7, #12
 800b100:	46bd      	mov	sp, r7
 800b102:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b106:	4770      	bx	lr
 800b108:	20005bd8 	.word	0x20005bd8
 800b10c:	20005bc4 	.word	0x20005bc4

0800b110 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b110:	b580      	push	{r7, lr}
 800b112:	b088      	sub	sp, #32
 800b114:	af00      	add	r7, sp, #0
 800b116:	6078      	str	r0, [r7, #4]
 800b118:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d10b      	bne.n	800b138 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800b120:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b124:	f383 8811 	msr	BASEPRI, r3
 800b128:	f3bf 8f6f 	isb	sy
 800b12c:	f3bf 8f4f 	dsb	sy
 800b130:	613b      	str	r3, [r7, #16]
}
 800b132:	bf00      	nop
 800b134:	bf00      	nop
 800b136:	e7fd      	b.n	800b134 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b138:	683b      	ldr	r3, [r7, #0]
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d10b      	bne.n	800b156 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800b13e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b142:	f383 8811 	msr	BASEPRI, r3
 800b146:	f3bf 8f6f 	isb	sy
 800b14a:	f3bf 8f4f 	dsb	sy
 800b14e:	60fb      	str	r3, [r7, #12]
}
 800b150:	bf00      	nop
 800b152:	bf00      	nop
 800b154:	e7fd      	b.n	800b152 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800b156:	f000 fe8f 	bl	800be78 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b15a:	4b1d      	ldr	r3, [pc, #116]	@ (800b1d0 <xTaskCheckForTimeOut+0xc0>)
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	685b      	ldr	r3, [r3, #4]
 800b164:	69ba      	ldr	r2, [r7, #24]
 800b166:	1ad3      	subs	r3, r2, r3
 800b168:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b16a:	683b      	ldr	r3, [r7, #0]
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b172:	d102      	bne.n	800b17a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b174:	2300      	movs	r3, #0
 800b176:	61fb      	str	r3, [r7, #28]
 800b178:	e023      	b.n	800b1c2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	681a      	ldr	r2, [r3, #0]
 800b17e:	4b15      	ldr	r3, [pc, #84]	@ (800b1d4 <xTaskCheckForTimeOut+0xc4>)
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	429a      	cmp	r2, r3
 800b184:	d007      	beq.n	800b196 <xTaskCheckForTimeOut+0x86>
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	685b      	ldr	r3, [r3, #4]
 800b18a:	69ba      	ldr	r2, [r7, #24]
 800b18c:	429a      	cmp	r2, r3
 800b18e:	d302      	bcc.n	800b196 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b190:	2301      	movs	r3, #1
 800b192:	61fb      	str	r3, [r7, #28]
 800b194:	e015      	b.n	800b1c2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b196:	683b      	ldr	r3, [r7, #0]
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	697a      	ldr	r2, [r7, #20]
 800b19c:	429a      	cmp	r2, r3
 800b19e:	d20b      	bcs.n	800b1b8 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b1a0:	683b      	ldr	r3, [r7, #0]
 800b1a2:	681a      	ldr	r2, [r3, #0]
 800b1a4:	697b      	ldr	r3, [r7, #20]
 800b1a6:	1ad2      	subs	r2, r2, r3
 800b1a8:	683b      	ldr	r3, [r7, #0]
 800b1aa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b1ac:	6878      	ldr	r0, [r7, #4]
 800b1ae:	f7ff ff99 	bl	800b0e4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b1b2:	2300      	movs	r3, #0
 800b1b4:	61fb      	str	r3, [r7, #28]
 800b1b6:	e004      	b.n	800b1c2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800b1b8:	683b      	ldr	r3, [r7, #0]
 800b1ba:	2200      	movs	r2, #0
 800b1bc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b1be:	2301      	movs	r3, #1
 800b1c0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b1c2:	f000 fe8b 	bl	800bedc <vPortExitCritical>

	return xReturn;
 800b1c6:	69fb      	ldr	r3, [r7, #28]
}
 800b1c8:	4618      	mov	r0, r3
 800b1ca:	3720      	adds	r7, #32
 800b1cc:	46bd      	mov	sp, r7
 800b1ce:	bd80      	pop	{r7, pc}
 800b1d0:	20005bc4 	.word	0x20005bc4
 800b1d4:	20005bd8 	.word	0x20005bd8

0800b1d8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b1d8:	b480      	push	{r7}
 800b1da:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b1dc:	4b03      	ldr	r3, [pc, #12]	@ (800b1ec <vTaskMissedYield+0x14>)
 800b1de:	2201      	movs	r2, #1
 800b1e0:	601a      	str	r2, [r3, #0]
}
 800b1e2:	bf00      	nop
 800b1e4:	46bd      	mov	sp, r7
 800b1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ea:	4770      	bx	lr
 800b1ec:	20005bd4 	.word	0x20005bd4

0800b1f0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b1f0:	b580      	push	{r7, lr}
 800b1f2:	b082      	sub	sp, #8
 800b1f4:	af00      	add	r7, sp, #0
 800b1f6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b1f8:	f000 f852 	bl	800b2a0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b1fc:	4b06      	ldr	r3, [pc, #24]	@ (800b218 <prvIdleTask+0x28>)
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	2b01      	cmp	r3, #1
 800b202:	d9f9      	bls.n	800b1f8 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b204:	4b05      	ldr	r3, [pc, #20]	@ (800b21c <prvIdleTask+0x2c>)
 800b206:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b20a:	601a      	str	r2, [r3, #0]
 800b20c:	f3bf 8f4f 	dsb	sy
 800b210:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b214:	e7f0      	b.n	800b1f8 <prvIdleTask+0x8>
 800b216:	bf00      	nop
 800b218:	200056f0 	.word	0x200056f0
 800b21c:	e000ed04 	.word	0xe000ed04

0800b220 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b220:	b580      	push	{r7, lr}
 800b222:	b082      	sub	sp, #8
 800b224:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b226:	2300      	movs	r3, #0
 800b228:	607b      	str	r3, [r7, #4]
 800b22a:	e00c      	b.n	800b246 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b22c:	687a      	ldr	r2, [r7, #4]
 800b22e:	4613      	mov	r3, r2
 800b230:	009b      	lsls	r3, r3, #2
 800b232:	4413      	add	r3, r2
 800b234:	009b      	lsls	r3, r3, #2
 800b236:	4a12      	ldr	r2, [pc, #72]	@ (800b280 <prvInitialiseTaskLists+0x60>)
 800b238:	4413      	add	r3, r2
 800b23a:	4618      	mov	r0, r3
 800b23c:	f7fe fcae 	bl	8009b9c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	3301      	adds	r3, #1
 800b244:	607b      	str	r3, [r7, #4]
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	2b37      	cmp	r3, #55	@ 0x37
 800b24a:	d9ef      	bls.n	800b22c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b24c:	480d      	ldr	r0, [pc, #52]	@ (800b284 <prvInitialiseTaskLists+0x64>)
 800b24e:	f7fe fca5 	bl	8009b9c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b252:	480d      	ldr	r0, [pc, #52]	@ (800b288 <prvInitialiseTaskLists+0x68>)
 800b254:	f7fe fca2 	bl	8009b9c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b258:	480c      	ldr	r0, [pc, #48]	@ (800b28c <prvInitialiseTaskLists+0x6c>)
 800b25a:	f7fe fc9f 	bl	8009b9c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b25e:	480c      	ldr	r0, [pc, #48]	@ (800b290 <prvInitialiseTaskLists+0x70>)
 800b260:	f7fe fc9c 	bl	8009b9c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b264:	480b      	ldr	r0, [pc, #44]	@ (800b294 <prvInitialiseTaskLists+0x74>)
 800b266:	f7fe fc99 	bl	8009b9c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b26a:	4b0b      	ldr	r3, [pc, #44]	@ (800b298 <prvInitialiseTaskLists+0x78>)
 800b26c:	4a05      	ldr	r2, [pc, #20]	@ (800b284 <prvInitialiseTaskLists+0x64>)
 800b26e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b270:	4b0a      	ldr	r3, [pc, #40]	@ (800b29c <prvInitialiseTaskLists+0x7c>)
 800b272:	4a05      	ldr	r2, [pc, #20]	@ (800b288 <prvInitialiseTaskLists+0x68>)
 800b274:	601a      	str	r2, [r3, #0]
}
 800b276:	bf00      	nop
 800b278:	3708      	adds	r7, #8
 800b27a:	46bd      	mov	sp, r7
 800b27c:	bd80      	pop	{r7, pc}
 800b27e:	bf00      	nop
 800b280:	200056f0 	.word	0x200056f0
 800b284:	20005b50 	.word	0x20005b50
 800b288:	20005b64 	.word	0x20005b64
 800b28c:	20005b80 	.word	0x20005b80
 800b290:	20005b94 	.word	0x20005b94
 800b294:	20005bac 	.word	0x20005bac
 800b298:	20005b78 	.word	0x20005b78
 800b29c:	20005b7c 	.word	0x20005b7c

0800b2a0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b2a0:	b580      	push	{r7, lr}
 800b2a2:	b082      	sub	sp, #8
 800b2a4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b2a6:	e019      	b.n	800b2dc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b2a8:	f000 fde6 	bl	800be78 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b2ac:	4b10      	ldr	r3, [pc, #64]	@ (800b2f0 <prvCheckTasksWaitingTermination+0x50>)
 800b2ae:	68db      	ldr	r3, [r3, #12]
 800b2b0:	68db      	ldr	r3, [r3, #12]
 800b2b2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	3304      	adds	r3, #4
 800b2b8:	4618      	mov	r0, r3
 800b2ba:	f7fe fcf9 	bl	8009cb0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b2be:	4b0d      	ldr	r3, [pc, #52]	@ (800b2f4 <prvCheckTasksWaitingTermination+0x54>)
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	3b01      	subs	r3, #1
 800b2c4:	4a0b      	ldr	r2, [pc, #44]	@ (800b2f4 <prvCheckTasksWaitingTermination+0x54>)
 800b2c6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b2c8:	4b0b      	ldr	r3, [pc, #44]	@ (800b2f8 <prvCheckTasksWaitingTermination+0x58>)
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	3b01      	subs	r3, #1
 800b2ce:	4a0a      	ldr	r2, [pc, #40]	@ (800b2f8 <prvCheckTasksWaitingTermination+0x58>)
 800b2d0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b2d2:	f000 fe03 	bl	800bedc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b2d6:	6878      	ldr	r0, [r7, #4]
 800b2d8:	f000 f810 	bl	800b2fc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b2dc:	4b06      	ldr	r3, [pc, #24]	@ (800b2f8 <prvCheckTasksWaitingTermination+0x58>)
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d1e1      	bne.n	800b2a8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b2e4:	bf00      	nop
 800b2e6:	bf00      	nop
 800b2e8:	3708      	adds	r7, #8
 800b2ea:	46bd      	mov	sp, r7
 800b2ec:	bd80      	pop	{r7, pc}
 800b2ee:	bf00      	nop
 800b2f0:	20005b94 	.word	0x20005b94
 800b2f4:	20005bc0 	.word	0x20005bc0
 800b2f8:	20005ba8 	.word	0x20005ba8

0800b2fc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b2fc:	b580      	push	{r7, lr}
 800b2fe:	b084      	sub	sp, #16
 800b300:	af00      	add	r7, sp, #0
 800b302:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d108      	bne.n	800b320 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b312:	4618      	mov	r0, r3
 800b314:	f000 ffa0 	bl	800c258 <vPortFree>
				vPortFree( pxTCB );
 800b318:	6878      	ldr	r0, [r7, #4]
 800b31a:	f000 ff9d 	bl	800c258 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b31e:	e019      	b.n	800b354 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800b326:	2b01      	cmp	r3, #1
 800b328:	d103      	bne.n	800b332 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800b32a:	6878      	ldr	r0, [r7, #4]
 800b32c:	f000 ff94 	bl	800c258 <vPortFree>
	}
 800b330:	e010      	b.n	800b354 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800b338:	2b02      	cmp	r3, #2
 800b33a:	d00b      	beq.n	800b354 <prvDeleteTCB+0x58>
	__asm volatile
 800b33c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b340:	f383 8811 	msr	BASEPRI, r3
 800b344:	f3bf 8f6f 	isb	sy
 800b348:	f3bf 8f4f 	dsb	sy
 800b34c:	60fb      	str	r3, [r7, #12]
}
 800b34e:	bf00      	nop
 800b350:	bf00      	nop
 800b352:	e7fd      	b.n	800b350 <prvDeleteTCB+0x54>
	}
 800b354:	bf00      	nop
 800b356:	3710      	adds	r7, #16
 800b358:	46bd      	mov	sp, r7
 800b35a:	bd80      	pop	{r7, pc}

0800b35c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b35c:	b480      	push	{r7}
 800b35e:	b083      	sub	sp, #12
 800b360:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b362:	4b0c      	ldr	r3, [pc, #48]	@ (800b394 <prvResetNextTaskUnblockTime+0x38>)
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d104      	bne.n	800b376 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b36c:	4b0a      	ldr	r3, [pc, #40]	@ (800b398 <prvResetNextTaskUnblockTime+0x3c>)
 800b36e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b372:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b374:	e008      	b.n	800b388 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b376:	4b07      	ldr	r3, [pc, #28]	@ (800b394 <prvResetNextTaskUnblockTime+0x38>)
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	68db      	ldr	r3, [r3, #12]
 800b37c:	68db      	ldr	r3, [r3, #12]
 800b37e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	685b      	ldr	r3, [r3, #4]
 800b384:	4a04      	ldr	r2, [pc, #16]	@ (800b398 <prvResetNextTaskUnblockTime+0x3c>)
 800b386:	6013      	str	r3, [r2, #0]
}
 800b388:	bf00      	nop
 800b38a:	370c      	adds	r7, #12
 800b38c:	46bd      	mov	sp, r7
 800b38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b392:	4770      	bx	lr
 800b394:	20005b78 	.word	0x20005b78
 800b398:	20005be0 	.word	0x20005be0

0800b39c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b39c:	b480      	push	{r7}
 800b39e:	b083      	sub	sp, #12
 800b3a0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b3a2:	4b0b      	ldr	r3, [pc, #44]	@ (800b3d0 <xTaskGetSchedulerState+0x34>)
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d102      	bne.n	800b3b0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b3aa:	2301      	movs	r3, #1
 800b3ac:	607b      	str	r3, [r7, #4]
 800b3ae:	e008      	b.n	800b3c2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b3b0:	4b08      	ldr	r3, [pc, #32]	@ (800b3d4 <xTaskGetSchedulerState+0x38>)
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d102      	bne.n	800b3be <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b3b8:	2302      	movs	r3, #2
 800b3ba:	607b      	str	r3, [r7, #4]
 800b3bc:	e001      	b.n	800b3c2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b3be:	2300      	movs	r3, #0
 800b3c0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b3c2:	687b      	ldr	r3, [r7, #4]
	}
 800b3c4:	4618      	mov	r0, r3
 800b3c6:	370c      	adds	r7, #12
 800b3c8:	46bd      	mov	sp, r7
 800b3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ce:	4770      	bx	lr
 800b3d0:	20005bcc 	.word	0x20005bcc
 800b3d4:	20005be8 	.word	0x20005be8

0800b3d8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b3d8:	b580      	push	{r7, lr}
 800b3da:	b086      	sub	sp, #24
 800b3dc:	af00      	add	r7, sp, #0
 800b3de:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b3e4:	2300      	movs	r3, #0
 800b3e6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d058      	beq.n	800b4a0 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b3ee:	4b2f      	ldr	r3, [pc, #188]	@ (800b4ac <xTaskPriorityDisinherit+0xd4>)
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	693a      	ldr	r2, [r7, #16]
 800b3f4:	429a      	cmp	r2, r3
 800b3f6:	d00b      	beq.n	800b410 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800b3f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b3fc:	f383 8811 	msr	BASEPRI, r3
 800b400:	f3bf 8f6f 	isb	sy
 800b404:	f3bf 8f4f 	dsb	sy
 800b408:	60fb      	str	r3, [r7, #12]
}
 800b40a:	bf00      	nop
 800b40c:	bf00      	nop
 800b40e:	e7fd      	b.n	800b40c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b410:	693b      	ldr	r3, [r7, #16]
 800b412:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b414:	2b00      	cmp	r3, #0
 800b416:	d10b      	bne.n	800b430 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800b418:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b41c:	f383 8811 	msr	BASEPRI, r3
 800b420:	f3bf 8f6f 	isb	sy
 800b424:	f3bf 8f4f 	dsb	sy
 800b428:	60bb      	str	r3, [r7, #8]
}
 800b42a:	bf00      	nop
 800b42c:	bf00      	nop
 800b42e:	e7fd      	b.n	800b42c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800b430:	693b      	ldr	r3, [r7, #16]
 800b432:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b434:	1e5a      	subs	r2, r3, #1
 800b436:	693b      	ldr	r3, [r7, #16]
 800b438:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b43a:	693b      	ldr	r3, [r7, #16]
 800b43c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b43e:	693b      	ldr	r3, [r7, #16]
 800b440:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b442:	429a      	cmp	r2, r3
 800b444:	d02c      	beq.n	800b4a0 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b446:	693b      	ldr	r3, [r7, #16]
 800b448:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d128      	bne.n	800b4a0 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b44e:	693b      	ldr	r3, [r7, #16]
 800b450:	3304      	adds	r3, #4
 800b452:	4618      	mov	r0, r3
 800b454:	f7fe fc2c 	bl	8009cb0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b458:	693b      	ldr	r3, [r7, #16]
 800b45a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b45c:	693b      	ldr	r3, [r7, #16]
 800b45e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b460:	693b      	ldr	r3, [r7, #16]
 800b462:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b464:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800b468:	693b      	ldr	r3, [r7, #16]
 800b46a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b46c:	693b      	ldr	r3, [r7, #16]
 800b46e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b470:	4b0f      	ldr	r3, [pc, #60]	@ (800b4b0 <xTaskPriorityDisinherit+0xd8>)
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	429a      	cmp	r2, r3
 800b476:	d903      	bls.n	800b480 <xTaskPriorityDisinherit+0xa8>
 800b478:	693b      	ldr	r3, [r7, #16]
 800b47a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b47c:	4a0c      	ldr	r2, [pc, #48]	@ (800b4b0 <xTaskPriorityDisinherit+0xd8>)
 800b47e:	6013      	str	r3, [r2, #0]
 800b480:	693b      	ldr	r3, [r7, #16]
 800b482:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b484:	4613      	mov	r3, r2
 800b486:	009b      	lsls	r3, r3, #2
 800b488:	4413      	add	r3, r2
 800b48a:	009b      	lsls	r3, r3, #2
 800b48c:	4a09      	ldr	r2, [pc, #36]	@ (800b4b4 <xTaskPriorityDisinherit+0xdc>)
 800b48e:	441a      	add	r2, r3
 800b490:	693b      	ldr	r3, [r7, #16]
 800b492:	3304      	adds	r3, #4
 800b494:	4619      	mov	r1, r3
 800b496:	4610      	mov	r0, r2
 800b498:	f7fe fbad 	bl	8009bf6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b49c:	2301      	movs	r3, #1
 800b49e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b4a0:	697b      	ldr	r3, [r7, #20]
	}
 800b4a2:	4618      	mov	r0, r3
 800b4a4:	3718      	adds	r7, #24
 800b4a6:	46bd      	mov	sp, r7
 800b4a8:	bd80      	pop	{r7, pc}
 800b4aa:	bf00      	nop
 800b4ac:	200056ec 	.word	0x200056ec
 800b4b0:	20005bc8 	.word	0x20005bc8
 800b4b4:	200056f0 	.word	0x200056f0

0800b4b8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b4b8:	b580      	push	{r7, lr}
 800b4ba:	b084      	sub	sp, #16
 800b4bc:	af00      	add	r7, sp, #0
 800b4be:	6078      	str	r0, [r7, #4]
 800b4c0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b4c2:	4b21      	ldr	r3, [pc, #132]	@ (800b548 <prvAddCurrentTaskToDelayedList+0x90>)
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b4c8:	4b20      	ldr	r3, [pc, #128]	@ (800b54c <prvAddCurrentTaskToDelayedList+0x94>)
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	3304      	adds	r3, #4
 800b4ce:	4618      	mov	r0, r3
 800b4d0:	f7fe fbee 	bl	8009cb0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b4da:	d10a      	bne.n	800b4f2 <prvAddCurrentTaskToDelayedList+0x3a>
 800b4dc:	683b      	ldr	r3, [r7, #0]
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d007      	beq.n	800b4f2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b4e2:	4b1a      	ldr	r3, [pc, #104]	@ (800b54c <prvAddCurrentTaskToDelayedList+0x94>)
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	3304      	adds	r3, #4
 800b4e8:	4619      	mov	r1, r3
 800b4ea:	4819      	ldr	r0, [pc, #100]	@ (800b550 <prvAddCurrentTaskToDelayedList+0x98>)
 800b4ec:	f7fe fb83 	bl	8009bf6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b4f0:	e026      	b.n	800b540 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b4f2:	68fa      	ldr	r2, [r7, #12]
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	4413      	add	r3, r2
 800b4f8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b4fa:	4b14      	ldr	r3, [pc, #80]	@ (800b54c <prvAddCurrentTaskToDelayedList+0x94>)
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	68ba      	ldr	r2, [r7, #8]
 800b500:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b502:	68ba      	ldr	r2, [r7, #8]
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	429a      	cmp	r2, r3
 800b508:	d209      	bcs.n	800b51e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b50a:	4b12      	ldr	r3, [pc, #72]	@ (800b554 <prvAddCurrentTaskToDelayedList+0x9c>)
 800b50c:	681a      	ldr	r2, [r3, #0]
 800b50e:	4b0f      	ldr	r3, [pc, #60]	@ (800b54c <prvAddCurrentTaskToDelayedList+0x94>)
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	3304      	adds	r3, #4
 800b514:	4619      	mov	r1, r3
 800b516:	4610      	mov	r0, r2
 800b518:	f7fe fb91 	bl	8009c3e <vListInsert>
}
 800b51c:	e010      	b.n	800b540 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b51e:	4b0e      	ldr	r3, [pc, #56]	@ (800b558 <prvAddCurrentTaskToDelayedList+0xa0>)
 800b520:	681a      	ldr	r2, [r3, #0]
 800b522:	4b0a      	ldr	r3, [pc, #40]	@ (800b54c <prvAddCurrentTaskToDelayedList+0x94>)
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	3304      	adds	r3, #4
 800b528:	4619      	mov	r1, r3
 800b52a:	4610      	mov	r0, r2
 800b52c:	f7fe fb87 	bl	8009c3e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b530:	4b0a      	ldr	r3, [pc, #40]	@ (800b55c <prvAddCurrentTaskToDelayedList+0xa4>)
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	68ba      	ldr	r2, [r7, #8]
 800b536:	429a      	cmp	r2, r3
 800b538:	d202      	bcs.n	800b540 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800b53a:	4a08      	ldr	r2, [pc, #32]	@ (800b55c <prvAddCurrentTaskToDelayedList+0xa4>)
 800b53c:	68bb      	ldr	r3, [r7, #8]
 800b53e:	6013      	str	r3, [r2, #0]
}
 800b540:	bf00      	nop
 800b542:	3710      	adds	r7, #16
 800b544:	46bd      	mov	sp, r7
 800b546:	bd80      	pop	{r7, pc}
 800b548:	20005bc4 	.word	0x20005bc4
 800b54c:	200056ec 	.word	0x200056ec
 800b550:	20005bac 	.word	0x20005bac
 800b554:	20005b7c 	.word	0x20005b7c
 800b558:	20005b78 	.word	0x20005b78
 800b55c:	20005be0 	.word	0x20005be0

0800b560 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b560:	b580      	push	{r7, lr}
 800b562:	b08a      	sub	sp, #40	@ 0x28
 800b564:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b566:	2300      	movs	r3, #0
 800b568:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b56a:	f000 fb13 	bl	800bb94 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b56e:	4b1d      	ldr	r3, [pc, #116]	@ (800b5e4 <xTimerCreateTimerTask+0x84>)
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	2b00      	cmp	r3, #0
 800b574:	d021      	beq.n	800b5ba <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b576:	2300      	movs	r3, #0
 800b578:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b57a:	2300      	movs	r3, #0
 800b57c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b57e:	1d3a      	adds	r2, r7, #4
 800b580:	f107 0108 	add.w	r1, r7, #8
 800b584:	f107 030c 	add.w	r3, r7, #12
 800b588:	4618      	mov	r0, r3
 800b58a:	f7fe faed 	bl	8009b68 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b58e:	6879      	ldr	r1, [r7, #4]
 800b590:	68bb      	ldr	r3, [r7, #8]
 800b592:	68fa      	ldr	r2, [r7, #12]
 800b594:	9202      	str	r2, [sp, #8]
 800b596:	9301      	str	r3, [sp, #4]
 800b598:	2302      	movs	r3, #2
 800b59a:	9300      	str	r3, [sp, #0]
 800b59c:	2300      	movs	r3, #0
 800b59e:	460a      	mov	r2, r1
 800b5a0:	4911      	ldr	r1, [pc, #68]	@ (800b5e8 <xTimerCreateTimerTask+0x88>)
 800b5a2:	4812      	ldr	r0, [pc, #72]	@ (800b5ec <xTimerCreateTimerTask+0x8c>)
 800b5a4:	f7ff f8a8 	bl	800a6f8 <xTaskCreateStatic>
 800b5a8:	4603      	mov	r3, r0
 800b5aa:	4a11      	ldr	r2, [pc, #68]	@ (800b5f0 <xTimerCreateTimerTask+0x90>)
 800b5ac:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b5ae:	4b10      	ldr	r3, [pc, #64]	@ (800b5f0 <xTimerCreateTimerTask+0x90>)
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d001      	beq.n	800b5ba <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800b5b6:	2301      	movs	r3, #1
 800b5b8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b5ba:	697b      	ldr	r3, [r7, #20]
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d10b      	bne.n	800b5d8 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800b5c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b5c4:	f383 8811 	msr	BASEPRI, r3
 800b5c8:	f3bf 8f6f 	isb	sy
 800b5cc:	f3bf 8f4f 	dsb	sy
 800b5d0:	613b      	str	r3, [r7, #16]
}
 800b5d2:	bf00      	nop
 800b5d4:	bf00      	nop
 800b5d6:	e7fd      	b.n	800b5d4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800b5d8:	697b      	ldr	r3, [r7, #20]
}
 800b5da:	4618      	mov	r0, r3
 800b5dc:	3718      	adds	r7, #24
 800b5de:	46bd      	mov	sp, r7
 800b5e0:	bd80      	pop	{r7, pc}
 800b5e2:	bf00      	nop
 800b5e4:	20005c1c 	.word	0x20005c1c
 800b5e8:	0801ccdc 	.word	0x0801ccdc
 800b5ec:	0800b72d 	.word	0x0800b72d
 800b5f0:	20005c20 	.word	0x20005c20

0800b5f4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b5f4:	b580      	push	{r7, lr}
 800b5f6:	b08a      	sub	sp, #40	@ 0x28
 800b5f8:	af00      	add	r7, sp, #0
 800b5fa:	60f8      	str	r0, [r7, #12]
 800b5fc:	60b9      	str	r1, [r7, #8]
 800b5fe:	607a      	str	r2, [r7, #4]
 800b600:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b602:	2300      	movs	r3, #0
 800b604:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b606:	68fb      	ldr	r3, [r7, #12]
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d10b      	bne.n	800b624 <xTimerGenericCommand+0x30>
	__asm volatile
 800b60c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b610:	f383 8811 	msr	BASEPRI, r3
 800b614:	f3bf 8f6f 	isb	sy
 800b618:	f3bf 8f4f 	dsb	sy
 800b61c:	623b      	str	r3, [r7, #32]
}
 800b61e:	bf00      	nop
 800b620:	bf00      	nop
 800b622:	e7fd      	b.n	800b620 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b624:	4b19      	ldr	r3, [pc, #100]	@ (800b68c <xTimerGenericCommand+0x98>)
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d02a      	beq.n	800b682 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b62c:	68bb      	ldr	r3, [r7, #8]
 800b62e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b638:	68bb      	ldr	r3, [r7, #8]
 800b63a:	2b05      	cmp	r3, #5
 800b63c:	dc18      	bgt.n	800b670 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b63e:	f7ff fead 	bl	800b39c <xTaskGetSchedulerState>
 800b642:	4603      	mov	r3, r0
 800b644:	2b02      	cmp	r3, #2
 800b646:	d109      	bne.n	800b65c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b648:	4b10      	ldr	r3, [pc, #64]	@ (800b68c <xTimerGenericCommand+0x98>)
 800b64a:	6818      	ldr	r0, [r3, #0]
 800b64c:	f107 0110 	add.w	r1, r7, #16
 800b650:	2300      	movs	r3, #0
 800b652:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b654:	f7fe fc60 	bl	8009f18 <xQueueGenericSend>
 800b658:	6278      	str	r0, [r7, #36]	@ 0x24
 800b65a:	e012      	b.n	800b682 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b65c:	4b0b      	ldr	r3, [pc, #44]	@ (800b68c <xTimerGenericCommand+0x98>)
 800b65e:	6818      	ldr	r0, [r3, #0]
 800b660:	f107 0110 	add.w	r1, r7, #16
 800b664:	2300      	movs	r3, #0
 800b666:	2200      	movs	r2, #0
 800b668:	f7fe fc56 	bl	8009f18 <xQueueGenericSend>
 800b66c:	6278      	str	r0, [r7, #36]	@ 0x24
 800b66e:	e008      	b.n	800b682 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b670:	4b06      	ldr	r3, [pc, #24]	@ (800b68c <xTimerGenericCommand+0x98>)
 800b672:	6818      	ldr	r0, [r3, #0]
 800b674:	f107 0110 	add.w	r1, r7, #16
 800b678:	2300      	movs	r3, #0
 800b67a:	683a      	ldr	r2, [r7, #0]
 800b67c:	f7fe fd4e 	bl	800a11c <xQueueGenericSendFromISR>
 800b680:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800b682:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800b684:	4618      	mov	r0, r3
 800b686:	3728      	adds	r7, #40	@ 0x28
 800b688:	46bd      	mov	sp, r7
 800b68a:	bd80      	pop	{r7, pc}
 800b68c:	20005c1c 	.word	0x20005c1c

0800b690 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800b690:	b580      	push	{r7, lr}
 800b692:	b088      	sub	sp, #32
 800b694:	af02      	add	r7, sp, #8
 800b696:	6078      	str	r0, [r7, #4]
 800b698:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b69a:	4b23      	ldr	r3, [pc, #140]	@ (800b728 <prvProcessExpiredTimer+0x98>)
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	68db      	ldr	r3, [r3, #12]
 800b6a0:	68db      	ldr	r3, [r3, #12]
 800b6a2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b6a4:	697b      	ldr	r3, [r7, #20]
 800b6a6:	3304      	adds	r3, #4
 800b6a8:	4618      	mov	r0, r3
 800b6aa:	f7fe fb01 	bl	8009cb0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b6ae:	697b      	ldr	r3, [r7, #20]
 800b6b0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b6b4:	f003 0304 	and.w	r3, r3, #4
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d023      	beq.n	800b704 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b6bc:	697b      	ldr	r3, [r7, #20]
 800b6be:	699a      	ldr	r2, [r3, #24]
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	18d1      	adds	r1, r2, r3
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	683a      	ldr	r2, [r7, #0]
 800b6c8:	6978      	ldr	r0, [r7, #20]
 800b6ca:	f000 f8d5 	bl	800b878 <prvInsertTimerInActiveList>
 800b6ce:	4603      	mov	r3, r0
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d020      	beq.n	800b716 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b6d4:	2300      	movs	r3, #0
 800b6d6:	9300      	str	r3, [sp, #0]
 800b6d8:	2300      	movs	r3, #0
 800b6da:	687a      	ldr	r2, [r7, #4]
 800b6dc:	2100      	movs	r1, #0
 800b6de:	6978      	ldr	r0, [r7, #20]
 800b6e0:	f7ff ff88 	bl	800b5f4 <xTimerGenericCommand>
 800b6e4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800b6e6:	693b      	ldr	r3, [r7, #16]
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d114      	bne.n	800b716 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800b6ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b6f0:	f383 8811 	msr	BASEPRI, r3
 800b6f4:	f3bf 8f6f 	isb	sy
 800b6f8:	f3bf 8f4f 	dsb	sy
 800b6fc:	60fb      	str	r3, [r7, #12]
}
 800b6fe:	bf00      	nop
 800b700:	bf00      	nop
 800b702:	e7fd      	b.n	800b700 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b704:	697b      	ldr	r3, [r7, #20]
 800b706:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b70a:	f023 0301 	bic.w	r3, r3, #1
 800b70e:	b2da      	uxtb	r2, r3
 800b710:	697b      	ldr	r3, [r7, #20]
 800b712:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b716:	697b      	ldr	r3, [r7, #20]
 800b718:	6a1b      	ldr	r3, [r3, #32]
 800b71a:	6978      	ldr	r0, [r7, #20]
 800b71c:	4798      	blx	r3
}
 800b71e:	bf00      	nop
 800b720:	3718      	adds	r7, #24
 800b722:	46bd      	mov	sp, r7
 800b724:	bd80      	pop	{r7, pc}
 800b726:	bf00      	nop
 800b728:	20005c14 	.word	0x20005c14

0800b72c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800b72c:	b580      	push	{r7, lr}
 800b72e:	b084      	sub	sp, #16
 800b730:	af00      	add	r7, sp, #0
 800b732:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b734:	f107 0308 	add.w	r3, r7, #8
 800b738:	4618      	mov	r0, r3
 800b73a:	f000 f859 	bl	800b7f0 <prvGetNextExpireTime>
 800b73e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b740:	68bb      	ldr	r3, [r7, #8]
 800b742:	4619      	mov	r1, r3
 800b744:	68f8      	ldr	r0, [r7, #12]
 800b746:	f000 f805 	bl	800b754 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800b74a:	f000 f8d7 	bl	800b8fc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b74e:	bf00      	nop
 800b750:	e7f0      	b.n	800b734 <prvTimerTask+0x8>
	...

0800b754 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800b754:	b580      	push	{r7, lr}
 800b756:	b084      	sub	sp, #16
 800b758:	af00      	add	r7, sp, #0
 800b75a:	6078      	str	r0, [r7, #4]
 800b75c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800b75e:	f7ff fa0f 	bl	800ab80 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b762:	f107 0308 	add.w	r3, r7, #8
 800b766:	4618      	mov	r0, r3
 800b768:	f000 f866 	bl	800b838 <prvSampleTimeNow>
 800b76c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800b76e:	68bb      	ldr	r3, [r7, #8]
 800b770:	2b00      	cmp	r3, #0
 800b772:	d130      	bne.n	800b7d6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b774:	683b      	ldr	r3, [r7, #0]
 800b776:	2b00      	cmp	r3, #0
 800b778:	d10a      	bne.n	800b790 <prvProcessTimerOrBlockTask+0x3c>
 800b77a:	687a      	ldr	r2, [r7, #4]
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	429a      	cmp	r2, r3
 800b780:	d806      	bhi.n	800b790 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800b782:	f7ff fa0b 	bl	800ab9c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b786:	68f9      	ldr	r1, [r7, #12]
 800b788:	6878      	ldr	r0, [r7, #4]
 800b78a:	f7ff ff81 	bl	800b690 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b78e:	e024      	b.n	800b7da <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800b790:	683b      	ldr	r3, [r7, #0]
 800b792:	2b00      	cmp	r3, #0
 800b794:	d008      	beq.n	800b7a8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b796:	4b13      	ldr	r3, [pc, #76]	@ (800b7e4 <prvProcessTimerOrBlockTask+0x90>)
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d101      	bne.n	800b7a4 <prvProcessTimerOrBlockTask+0x50>
 800b7a0:	2301      	movs	r3, #1
 800b7a2:	e000      	b.n	800b7a6 <prvProcessTimerOrBlockTask+0x52>
 800b7a4:	2300      	movs	r3, #0
 800b7a6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b7a8:	4b0f      	ldr	r3, [pc, #60]	@ (800b7e8 <prvProcessTimerOrBlockTask+0x94>)
 800b7aa:	6818      	ldr	r0, [r3, #0]
 800b7ac:	687a      	ldr	r2, [r7, #4]
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	1ad3      	subs	r3, r2, r3
 800b7b2:	683a      	ldr	r2, [r7, #0]
 800b7b4:	4619      	mov	r1, r3
 800b7b6:	f7fe ff6b 	bl	800a690 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b7ba:	f7ff f9ef 	bl	800ab9c <xTaskResumeAll>
 800b7be:	4603      	mov	r3, r0
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d10a      	bne.n	800b7da <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800b7c4:	4b09      	ldr	r3, [pc, #36]	@ (800b7ec <prvProcessTimerOrBlockTask+0x98>)
 800b7c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b7ca:	601a      	str	r2, [r3, #0]
 800b7cc:	f3bf 8f4f 	dsb	sy
 800b7d0:	f3bf 8f6f 	isb	sy
}
 800b7d4:	e001      	b.n	800b7da <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b7d6:	f7ff f9e1 	bl	800ab9c <xTaskResumeAll>
}
 800b7da:	bf00      	nop
 800b7dc:	3710      	adds	r7, #16
 800b7de:	46bd      	mov	sp, r7
 800b7e0:	bd80      	pop	{r7, pc}
 800b7e2:	bf00      	nop
 800b7e4:	20005c18 	.word	0x20005c18
 800b7e8:	20005c1c 	.word	0x20005c1c
 800b7ec:	e000ed04 	.word	0xe000ed04

0800b7f0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b7f0:	b480      	push	{r7}
 800b7f2:	b085      	sub	sp, #20
 800b7f4:	af00      	add	r7, sp, #0
 800b7f6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b7f8:	4b0e      	ldr	r3, [pc, #56]	@ (800b834 <prvGetNextExpireTime+0x44>)
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d101      	bne.n	800b806 <prvGetNextExpireTime+0x16>
 800b802:	2201      	movs	r2, #1
 800b804:	e000      	b.n	800b808 <prvGetNextExpireTime+0x18>
 800b806:	2200      	movs	r2, #0
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	2b00      	cmp	r3, #0
 800b812:	d105      	bne.n	800b820 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b814:	4b07      	ldr	r3, [pc, #28]	@ (800b834 <prvGetNextExpireTime+0x44>)
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	68db      	ldr	r3, [r3, #12]
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	60fb      	str	r3, [r7, #12]
 800b81e:	e001      	b.n	800b824 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b820:	2300      	movs	r3, #0
 800b822:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b824:	68fb      	ldr	r3, [r7, #12]
}
 800b826:	4618      	mov	r0, r3
 800b828:	3714      	adds	r7, #20
 800b82a:	46bd      	mov	sp, r7
 800b82c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b830:	4770      	bx	lr
 800b832:	bf00      	nop
 800b834:	20005c14 	.word	0x20005c14

0800b838 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b838:	b580      	push	{r7, lr}
 800b83a:	b084      	sub	sp, #16
 800b83c:	af00      	add	r7, sp, #0
 800b83e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b840:	f7ff fa4a 	bl	800acd8 <xTaskGetTickCount>
 800b844:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b846:	4b0b      	ldr	r3, [pc, #44]	@ (800b874 <prvSampleTimeNow+0x3c>)
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	68fa      	ldr	r2, [r7, #12]
 800b84c:	429a      	cmp	r2, r3
 800b84e:	d205      	bcs.n	800b85c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b850:	f000 f93a 	bl	800bac8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	2201      	movs	r2, #1
 800b858:	601a      	str	r2, [r3, #0]
 800b85a:	e002      	b.n	800b862 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	2200      	movs	r2, #0
 800b860:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b862:	4a04      	ldr	r2, [pc, #16]	@ (800b874 <prvSampleTimeNow+0x3c>)
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b868:	68fb      	ldr	r3, [r7, #12]
}
 800b86a:	4618      	mov	r0, r3
 800b86c:	3710      	adds	r7, #16
 800b86e:	46bd      	mov	sp, r7
 800b870:	bd80      	pop	{r7, pc}
 800b872:	bf00      	nop
 800b874:	20005c24 	.word	0x20005c24

0800b878 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b878:	b580      	push	{r7, lr}
 800b87a:	b086      	sub	sp, #24
 800b87c:	af00      	add	r7, sp, #0
 800b87e:	60f8      	str	r0, [r7, #12]
 800b880:	60b9      	str	r1, [r7, #8]
 800b882:	607a      	str	r2, [r7, #4]
 800b884:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b886:	2300      	movs	r3, #0
 800b888:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	68ba      	ldr	r2, [r7, #8]
 800b88e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b890:	68fb      	ldr	r3, [r7, #12]
 800b892:	68fa      	ldr	r2, [r7, #12]
 800b894:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b896:	68ba      	ldr	r2, [r7, #8]
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	429a      	cmp	r2, r3
 800b89c:	d812      	bhi.n	800b8c4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b89e:	687a      	ldr	r2, [r7, #4]
 800b8a0:	683b      	ldr	r3, [r7, #0]
 800b8a2:	1ad2      	subs	r2, r2, r3
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	699b      	ldr	r3, [r3, #24]
 800b8a8:	429a      	cmp	r2, r3
 800b8aa:	d302      	bcc.n	800b8b2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b8ac:	2301      	movs	r3, #1
 800b8ae:	617b      	str	r3, [r7, #20]
 800b8b0:	e01b      	b.n	800b8ea <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b8b2:	4b10      	ldr	r3, [pc, #64]	@ (800b8f4 <prvInsertTimerInActiveList+0x7c>)
 800b8b4:	681a      	ldr	r2, [r3, #0]
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	3304      	adds	r3, #4
 800b8ba:	4619      	mov	r1, r3
 800b8bc:	4610      	mov	r0, r2
 800b8be:	f7fe f9be 	bl	8009c3e <vListInsert>
 800b8c2:	e012      	b.n	800b8ea <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b8c4:	687a      	ldr	r2, [r7, #4]
 800b8c6:	683b      	ldr	r3, [r7, #0]
 800b8c8:	429a      	cmp	r2, r3
 800b8ca:	d206      	bcs.n	800b8da <prvInsertTimerInActiveList+0x62>
 800b8cc:	68ba      	ldr	r2, [r7, #8]
 800b8ce:	683b      	ldr	r3, [r7, #0]
 800b8d0:	429a      	cmp	r2, r3
 800b8d2:	d302      	bcc.n	800b8da <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b8d4:	2301      	movs	r3, #1
 800b8d6:	617b      	str	r3, [r7, #20]
 800b8d8:	e007      	b.n	800b8ea <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b8da:	4b07      	ldr	r3, [pc, #28]	@ (800b8f8 <prvInsertTimerInActiveList+0x80>)
 800b8dc:	681a      	ldr	r2, [r3, #0]
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	3304      	adds	r3, #4
 800b8e2:	4619      	mov	r1, r3
 800b8e4:	4610      	mov	r0, r2
 800b8e6:	f7fe f9aa 	bl	8009c3e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b8ea:	697b      	ldr	r3, [r7, #20]
}
 800b8ec:	4618      	mov	r0, r3
 800b8ee:	3718      	adds	r7, #24
 800b8f0:	46bd      	mov	sp, r7
 800b8f2:	bd80      	pop	{r7, pc}
 800b8f4:	20005c18 	.word	0x20005c18
 800b8f8:	20005c14 	.word	0x20005c14

0800b8fc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b8fc:	b580      	push	{r7, lr}
 800b8fe:	b08e      	sub	sp, #56	@ 0x38
 800b900:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b902:	e0ce      	b.n	800baa2 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	2b00      	cmp	r3, #0
 800b908:	da19      	bge.n	800b93e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800b90a:	1d3b      	adds	r3, r7, #4
 800b90c:	3304      	adds	r3, #4
 800b90e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800b910:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b912:	2b00      	cmp	r3, #0
 800b914:	d10b      	bne.n	800b92e <prvProcessReceivedCommands+0x32>
	__asm volatile
 800b916:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b91a:	f383 8811 	msr	BASEPRI, r3
 800b91e:	f3bf 8f6f 	isb	sy
 800b922:	f3bf 8f4f 	dsb	sy
 800b926:	61fb      	str	r3, [r7, #28]
}
 800b928:	bf00      	nop
 800b92a:	bf00      	nop
 800b92c:	e7fd      	b.n	800b92a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b92e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b934:	6850      	ldr	r0, [r2, #4]
 800b936:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b938:	6892      	ldr	r2, [r2, #8]
 800b93a:	4611      	mov	r1, r2
 800b93c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	2b00      	cmp	r3, #0
 800b942:	f2c0 80ae 	blt.w	800baa2 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b94a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b94c:	695b      	ldr	r3, [r3, #20]
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d004      	beq.n	800b95c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b952:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b954:	3304      	adds	r3, #4
 800b956:	4618      	mov	r0, r3
 800b958:	f7fe f9aa 	bl	8009cb0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b95c:	463b      	mov	r3, r7
 800b95e:	4618      	mov	r0, r3
 800b960:	f7ff ff6a 	bl	800b838 <prvSampleTimeNow>
 800b964:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	2b09      	cmp	r3, #9
 800b96a:	f200 8097 	bhi.w	800ba9c <prvProcessReceivedCommands+0x1a0>
 800b96e:	a201      	add	r2, pc, #4	@ (adr r2, 800b974 <prvProcessReceivedCommands+0x78>)
 800b970:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b974:	0800b99d 	.word	0x0800b99d
 800b978:	0800b99d 	.word	0x0800b99d
 800b97c:	0800b99d 	.word	0x0800b99d
 800b980:	0800ba13 	.word	0x0800ba13
 800b984:	0800ba27 	.word	0x0800ba27
 800b988:	0800ba73 	.word	0x0800ba73
 800b98c:	0800b99d 	.word	0x0800b99d
 800b990:	0800b99d 	.word	0x0800b99d
 800b994:	0800ba13 	.word	0x0800ba13
 800b998:	0800ba27 	.word	0x0800ba27
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b99c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b99e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b9a2:	f043 0301 	orr.w	r3, r3, #1
 800b9a6:	b2da      	uxtb	r2, r3
 800b9a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b9aa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b9ae:	68ba      	ldr	r2, [r7, #8]
 800b9b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b9b2:	699b      	ldr	r3, [r3, #24]
 800b9b4:	18d1      	adds	r1, r2, r3
 800b9b6:	68bb      	ldr	r3, [r7, #8]
 800b9b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b9ba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b9bc:	f7ff ff5c 	bl	800b878 <prvInsertTimerInActiveList>
 800b9c0:	4603      	mov	r3, r0
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d06c      	beq.n	800baa0 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b9c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b9c8:	6a1b      	ldr	r3, [r3, #32]
 800b9ca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b9cc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b9ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b9d0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b9d4:	f003 0304 	and.w	r3, r3, #4
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d061      	beq.n	800baa0 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b9dc:	68ba      	ldr	r2, [r7, #8]
 800b9de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b9e0:	699b      	ldr	r3, [r3, #24]
 800b9e2:	441a      	add	r2, r3
 800b9e4:	2300      	movs	r3, #0
 800b9e6:	9300      	str	r3, [sp, #0]
 800b9e8:	2300      	movs	r3, #0
 800b9ea:	2100      	movs	r1, #0
 800b9ec:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b9ee:	f7ff fe01 	bl	800b5f4 <xTimerGenericCommand>
 800b9f2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800b9f4:	6a3b      	ldr	r3, [r7, #32]
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d152      	bne.n	800baa0 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800b9fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b9fe:	f383 8811 	msr	BASEPRI, r3
 800ba02:	f3bf 8f6f 	isb	sy
 800ba06:	f3bf 8f4f 	dsb	sy
 800ba0a:	61bb      	str	r3, [r7, #24]
}
 800ba0c:	bf00      	nop
 800ba0e:	bf00      	nop
 800ba10:	e7fd      	b.n	800ba0e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ba12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba14:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ba18:	f023 0301 	bic.w	r3, r3, #1
 800ba1c:	b2da      	uxtb	r2, r3
 800ba1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba20:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800ba24:	e03d      	b.n	800baa2 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ba26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba28:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ba2c:	f043 0301 	orr.w	r3, r3, #1
 800ba30:	b2da      	uxtb	r2, r3
 800ba32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba34:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800ba38:	68ba      	ldr	r2, [r7, #8]
 800ba3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba3c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800ba3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba40:	699b      	ldr	r3, [r3, #24]
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d10b      	bne.n	800ba5e <prvProcessReceivedCommands+0x162>
	__asm volatile
 800ba46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba4a:	f383 8811 	msr	BASEPRI, r3
 800ba4e:	f3bf 8f6f 	isb	sy
 800ba52:	f3bf 8f4f 	dsb	sy
 800ba56:	617b      	str	r3, [r7, #20]
}
 800ba58:	bf00      	nop
 800ba5a:	bf00      	nop
 800ba5c:	e7fd      	b.n	800ba5a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800ba5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba60:	699a      	ldr	r2, [r3, #24]
 800ba62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba64:	18d1      	adds	r1, r2, r3
 800ba66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba68:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ba6a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ba6c:	f7ff ff04 	bl	800b878 <prvInsertTimerInActiveList>
					break;
 800ba70:	e017      	b.n	800baa2 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800ba72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba74:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ba78:	f003 0302 	and.w	r3, r3, #2
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d103      	bne.n	800ba88 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800ba80:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ba82:	f000 fbe9 	bl	800c258 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800ba86:	e00c      	b.n	800baa2 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ba88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba8a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ba8e:	f023 0301 	bic.w	r3, r3, #1
 800ba92:	b2da      	uxtb	r2, r3
 800ba94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba96:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800ba9a:	e002      	b.n	800baa2 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800ba9c:	bf00      	nop
 800ba9e:	e000      	b.n	800baa2 <prvProcessReceivedCommands+0x1a6>
					break;
 800baa0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800baa2:	4b08      	ldr	r3, [pc, #32]	@ (800bac4 <prvProcessReceivedCommands+0x1c8>)
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	1d39      	adds	r1, r7, #4
 800baa8:	2200      	movs	r2, #0
 800baaa:	4618      	mov	r0, r3
 800baac:	f7fe fbd4 	bl	800a258 <xQueueReceive>
 800bab0:	4603      	mov	r3, r0
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	f47f af26 	bne.w	800b904 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800bab8:	bf00      	nop
 800baba:	bf00      	nop
 800babc:	3730      	adds	r7, #48	@ 0x30
 800babe:	46bd      	mov	sp, r7
 800bac0:	bd80      	pop	{r7, pc}
 800bac2:	bf00      	nop
 800bac4:	20005c1c 	.word	0x20005c1c

0800bac8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800bac8:	b580      	push	{r7, lr}
 800baca:	b088      	sub	sp, #32
 800bacc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bace:	e049      	b.n	800bb64 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bad0:	4b2e      	ldr	r3, [pc, #184]	@ (800bb8c <prvSwitchTimerLists+0xc4>)
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	68db      	ldr	r3, [r3, #12]
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bada:	4b2c      	ldr	r3, [pc, #176]	@ (800bb8c <prvSwitchTimerLists+0xc4>)
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	68db      	ldr	r3, [r3, #12]
 800bae0:	68db      	ldr	r3, [r3, #12]
 800bae2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	3304      	adds	r3, #4
 800bae8:	4618      	mov	r0, r3
 800baea:	f7fe f8e1 	bl	8009cb0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	6a1b      	ldr	r3, [r3, #32]
 800baf2:	68f8      	ldr	r0, [r7, #12]
 800baf4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800baf6:	68fb      	ldr	r3, [r7, #12]
 800baf8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bafc:	f003 0304 	and.w	r3, r3, #4
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d02f      	beq.n	800bb64 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	699b      	ldr	r3, [r3, #24]
 800bb08:	693a      	ldr	r2, [r7, #16]
 800bb0a:	4413      	add	r3, r2
 800bb0c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800bb0e:	68ba      	ldr	r2, [r7, #8]
 800bb10:	693b      	ldr	r3, [r7, #16]
 800bb12:	429a      	cmp	r2, r3
 800bb14:	d90e      	bls.n	800bb34 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	68ba      	ldr	r2, [r7, #8]
 800bb1a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	68fa      	ldr	r2, [r7, #12]
 800bb20:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bb22:	4b1a      	ldr	r3, [pc, #104]	@ (800bb8c <prvSwitchTimerLists+0xc4>)
 800bb24:	681a      	ldr	r2, [r3, #0]
 800bb26:	68fb      	ldr	r3, [r7, #12]
 800bb28:	3304      	adds	r3, #4
 800bb2a:	4619      	mov	r1, r3
 800bb2c:	4610      	mov	r0, r2
 800bb2e:	f7fe f886 	bl	8009c3e <vListInsert>
 800bb32:	e017      	b.n	800bb64 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bb34:	2300      	movs	r3, #0
 800bb36:	9300      	str	r3, [sp, #0]
 800bb38:	2300      	movs	r3, #0
 800bb3a:	693a      	ldr	r2, [r7, #16]
 800bb3c:	2100      	movs	r1, #0
 800bb3e:	68f8      	ldr	r0, [r7, #12]
 800bb40:	f7ff fd58 	bl	800b5f4 <xTimerGenericCommand>
 800bb44:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d10b      	bne.n	800bb64 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800bb4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb50:	f383 8811 	msr	BASEPRI, r3
 800bb54:	f3bf 8f6f 	isb	sy
 800bb58:	f3bf 8f4f 	dsb	sy
 800bb5c:	603b      	str	r3, [r7, #0]
}
 800bb5e:	bf00      	nop
 800bb60:	bf00      	nop
 800bb62:	e7fd      	b.n	800bb60 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bb64:	4b09      	ldr	r3, [pc, #36]	@ (800bb8c <prvSwitchTimerLists+0xc4>)
 800bb66:	681b      	ldr	r3, [r3, #0]
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d1b0      	bne.n	800bad0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800bb6e:	4b07      	ldr	r3, [pc, #28]	@ (800bb8c <prvSwitchTimerLists+0xc4>)
 800bb70:	681b      	ldr	r3, [r3, #0]
 800bb72:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800bb74:	4b06      	ldr	r3, [pc, #24]	@ (800bb90 <prvSwitchTimerLists+0xc8>)
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	4a04      	ldr	r2, [pc, #16]	@ (800bb8c <prvSwitchTimerLists+0xc4>)
 800bb7a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800bb7c:	4a04      	ldr	r2, [pc, #16]	@ (800bb90 <prvSwitchTimerLists+0xc8>)
 800bb7e:	697b      	ldr	r3, [r7, #20]
 800bb80:	6013      	str	r3, [r2, #0]
}
 800bb82:	bf00      	nop
 800bb84:	3718      	adds	r7, #24
 800bb86:	46bd      	mov	sp, r7
 800bb88:	bd80      	pop	{r7, pc}
 800bb8a:	bf00      	nop
 800bb8c:	20005c14 	.word	0x20005c14
 800bb90:	20005c18 	.word	0x20005c18

0800bb94 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800bb94:	b580      	push	{r7, lr}
 800bb96:	b082      	sub	sp, #8
 800bb98:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800bb9a:	f000 f96d 	bl	800be78 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800bb9e:	4b15      	ldr	r3, [pc, #84]	@ (800bbf4 <prvCheckForValidListAndQueue+0x60>)
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d120      	bne.n	800bbe8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800bba6:	4814      	ldr	r0, [pc, #80]	@ (800bbf8 <prvCheckForValidListAndQueue+0x64>)
 800bba8:	f7fd fff8 	bl	8009b9c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800bbac:	4813      	ldr	r0, [pc, #76]	@ (800bbfc <prvCheckForValidListAndQueue+0x68>)
 800bbae:	f7fd fff5 	bl	8009b9c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800bbb2:	4b13      	ldr	r3, [pc, #76]	@ (800bc00 <prvCheckForValidListAndQueue+0x6c>)
 800bbb4:	4a10      	ldr	r2, [pc, #64]	@ (800bbf8 <prvCheckForValidListAndQueue+0x64>)
 800bbb6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800bbb8:	4b12      	ldr	r3, [pc, #72]	@ (800bc04 <prvCheckForValidListAndQueue+0x70>)
 800bbba:	4a10      	ldr	r2, [pc, #64]	@ (800bbfc <prvCheckForValidListAndQueue+0x68>)
 800bbbc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800bbbe:	2300      	movs	r3, #0
 800bbc0:	9300      	str	r3, [sp, #0]
 800bbc2:	4b11      	ldr	r3, [pc, #68]	@ (800bc08 <prvCheckForValidListAndQueue+0x74>)
 800bbc4:	4a11      	ldr	r2, [pc, #68]	@ (800bc0c <prvCheckForValidListAndQueue+0x78>)
 800bbc6:	2110      	movs	r1, #16
 800bbc8:	200a      	movs	r0, #10
 800bbca:	f7fe f905 	bl	8009dd8 <xQueueGenericCreateStatic>
 800bbce:	4603      	mov	r3, r0
 800bbd0:	4a08      	ldr	r2, [pc, #32]	@ (800bbf4 <prvCheckForValidListAndQueue+0x60>)
 800bbd2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800bbd4:	4b07      	ldr	r3, [pc, #28]	@ (800bbf4 <prvCheckForValidListAndQueue+0x60>)
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d005      	beq.n	800bbe8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800bbdc:	4b05      	ldr	r3, [pc, #20]	@ (800bbf4 <prvCheckForValidListAndQueue+0x60>)
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	490b      	ldr	r1, [pc, #44]	@ (800bc10 <prvCheckForValidListAndQueue+0x7c>)
 800bbe2:	4618      	mov	r0, r3
 800bbe4:	f7fe fd2a 	bl	800a63c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bbe8:	f000 f978 	bl	800bedc <vPortExitCritical>
}
 800bbec:	bf00      	nop
 800bbee:	46bd      	mov	sp, r7
 800bbf0:	bd80      	pop	{r7, pc}
 800bbf2:	bf00      	nop
 800bbf4:	20005c1c 	.word	0x20005c1c
 800bbf8:	20005bec 	.word	0x20005bec
 800bbfc:	20005c00 	.word	0x20005c00
 800bc00:	20005c14 	.word	0x20005c14
 800bc04:	20005c18 	.word	0x20005c18
 800bc08:	20005cc8 	.word	0x20005cc8
 800bc0c:	20005c28 	.word	0x20005c28
 800bc10:	0801cce4 	.word	0x0801cce4

0800bc14 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800bc14:	b480      	push	{r7}
 800bc16:	b085      	sub	sp, #20
 800bc18:	af00      	add	r7, sp, #0
 800bc1a:	60f8      	str	r0, [r7, #12]
 800bc1c:	60b9      	str	r1, [r7, #8]
 800bc1e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800bc20:	68fb      	ldr	r3, [r7, #12]
 800bc22:	3b04      	subs	r3, #4
 800bc24:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800bc26:	68fb      	ldr	r3, [r7, #12]
 800bc28:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800bc2c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bc2e:	68fb      	ldr	r3, [r7, #12]
 800bc30:	3b04      	subs	r3, #4
 800bc32:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800bc34:	68bb      	ldr	r3, [r7, #8]
 800bc36:	f023 0201 	bic.w	r2, r3, #1
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bc3e:	68fb      	ldr	r3, [r7, #12]
 800bc40:	3b04      	subs	r3, #4
 800bc42:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800bc44:	4a0c      	ldr	r2, [pc, #48]	@ (800bc78 <pxPortInitialiseStack+0x64>)
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800bc4a:	68fb      	ldr	r3, [r7, #12]
 800bc4c:	3b14      	subs	r3, #20
 800bc4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800bc50:	687a      	ldr	r2, [r7, #4]
 800bc52:	68fb      	ldr	r3, [r7, #12]
 800bc54:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	3b04      	subs	r3, #4
 800bc5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	f06f 0202 	mvn.w	r2, #2
 800bc62:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	3b20      	subs	r3, #32
 800bc68:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800bc6a:	68fb      	ldr	r3, [r7, #12]
}
 800bc6c:	4618      	mov	r0, r3
 800bc6e:	3714      	adds	r7, #20
 800bc70:	46bd      	mov	sp, r7
 800bc72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc76:	4770      	bx	lr
 800bc78:	0800bc7d 	.word	0x0800bc7d

0800bc7c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800bc7c:	b480      	push	{r7}
 800bc7e:	b085      	sub	sp, #20
 800bc80:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800bc82:	2300      	movs	r3, #0
 800bc84:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800bc86:	4b13      	ldr	r3, [pc, #76]	@ (800bcd4 <prvTaskExitError+0x58>)
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800bc8e:	d00b      	beq.n	800bca8 <prvTaskExitError+0x2c>
	__asm volatile
 800bc90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc94:	f383 8811 	msr	BASEPRI, r3
 800bc98:	f3bf 8f6f 	isb	sy
 800bc9c:	f3bf 8f4f 	dsb	sy
 800bca0:	60fb      	str	r3, [r7, #12]
}
 800bca2:	bf00      	nop
 800bca4:	bf00      	nop
 800bca6:	e7fd      	b.n	800bca4 <prvTaskExitError+0x28>
	__asm volatile
 800bca8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bcac:	f383 8811 	msr	BASEPRI, r3
 800bcb0:	f3bf 8f6f 	isb	sy
 800bcb4:	f3bf 8f4f 	dsb	sy
 800bcb8:	60bb      	str	r3, [r7, #8]
}
 800bcba:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800bcbc:	bf00      	nop
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	d0fc      	beq.n	800bcbe <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800bcc4:	bf00      	nop
 800bcc6:	bf00      	nop
 800bcc8:	3714      	adds	r7, #20
 800bcca:	46bd      	mov	sp, r7
 800bccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcd0:	4770      	bx	lr
 800bcd2:	bf00      	nop
 800bcd4:	20000010 	.word	0x20000010
	...

0800bce0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800bce0:	4b07      	ldr	r3, [pc, #28]	@ (800bd00 <pxCurrentTCBConst2>)
 800bce2:	6819      	ldr	r1, [r3, #0]
 800bce4:	6808      	ldr	r0, [r1, #0]
 800bce6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcea:	f380 8809 	msr	PSP, r0
 800bcee:	f3bf 8f6f 	isb	sy
 800bcf2:	f04f 0000 	mov.w	r0, #0
 800bcf6:	f380 8811 	msr	BASEPRI, r0
 800bcfa:	4770      	bx	lr
 800bcfc:	f3af 8000 	nop.w

0800bd00 <pxCurrentTCBConst2>:
 800bd00:	200056ec 	.word	0x200056ec
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800bd04:	bf00      	nop
 800bd06:	bf00      	nop

0800bd08 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800bd08:	4808      	ldr	r0, [pc, #32]	@ (800bd2c <prvPortStartFirstTask+0x24>)
 800bd0a:	6800      	ldr	r0, [r0, #0]
 800bd0c:	6800      	ldr	r0, [r0, #0]
 800bd0e:	f380 8808 	msr	MSP, r0
 800bd12:	f04f 0000 	mov.w	r0, #0
 800bd16:	f380 8814 	msr	CONTROL, r0
 800bd1a:	b662      	cpsie	i
 800bd1c:	b661      	cpsie	f
 800bd1e:	f3bf 8f4f 	dsb	sy
 800bd22:	f3bf 8f6f 	isb	sy
 800bd26:	df00      	svc	0
 800bd28:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800bd2a:	bf00      	nop
 800bd2c:	e000ed08 	.word	0xe000ed08

0800bd30 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800bd30:	b580      	push	{r7, lr}
 800bd32:	b086      	sub	sp, #24
 800bd34:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800bd36:	4b47      	ldr	r3, [pc, #284]	@ (800be54 <xPortStartScheduler+0x124>)
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	4a47      	ldr	r2, [pc, #284]	@ (800be58 <xPortStartScheduler+0x128>)
 800bd3c:	4293      	cmp	r3, r2
 800bd3e:	d10b      	bne.n	800bd58 <xPortStartScheduler+0x28>
	__asm volatile
 800bd40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd44:	f383 8811 	msr	BASEPRI, r3
 800bd48:	f3bf 8f6f 	isb	sy
 800bd4c:	f3bf 8f4f 	dsb	sy
 800bd50:	60fb      	str	r3, [r7, #12]
}
 800bd52:	bf00      	nop
 800bd54:	bf00      	nop
 800bd56:	e7fd      	b.n	800bd54 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800bd58:	4b3e      	ldr	r3, [pc, #248]	@ (800be54 <xPortStartScheduler+0x124>)
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	4a3f      	ldr	r2, [pc, #252]	@ (800be5c <xPortStartScheduler+0x12c>)
 800bd5e:	4293      	cmp	r3, r2
 800bd60:	d10b      	bne.n	800bd7a <xPortStartScheduler+0x4a>
	__asm volatile
 800bd62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd66:	f383 8811 	msr	BASEPRI, r3
 800bd6a:	f3bf 8f6f 	isb	sy
 800bd6e:	f3bf 8f4f 	dsb	sy
 800bd72:	613b      	str	r3, [r7, #16]
}
 800bd74:	bf00      	nop
 800bd76:	bf00      	nop
 800bd78:	e7fd      	b.n	800bd76 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800bd7a:	4b39      	ldr	r3, [pc, #228]	@ (800be60 <xPortStartScheduler+0x130>)
 800bd7c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800bd7e:	697b      	ldr	r3, [r7, #20]
 800bd80:	781b      	ldrb	r3, [r3, #0]
 800bd82:	b2db      	uxtb	r3, r3
 800bd84:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800bd86:	697b      	ldr	r3, [r7, #20]
 800bd88:	22ff      	movs	r2, #255	@ 0xff
 800bd8a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800bd8c:	697b      	ldr	r3, [r7, #20]
 800bd8e:	781b      	ldrb	r3, [r3, #0]
 800bd90:	b2db      	uxtb	r3, r3
 800bd92:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800bd94:	78fb      	ldrb	r3, [r7, #3]
 800bd96:	b2db      	uxtb	r3, r3
 800bd98:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800bd9c:	b2da      	uxtb	r2, r3
 800bd9e:	4b31      	ldr	r3, [pc, #196]	@ (800be64 <xPortStartScheduler+0x134>)
 800bda0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800bda2:	4b31      	ldr	r3, [pc, #196]	@ (800be68 <xPortStartScheduler+0x138>)
 800bda4:	2207      	movs	r2, #7
 800bda6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bda8:	e009      	b.n	800bdbe <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800bdaa:	4b2f      	ldr	r3, [pc, #188]	@ (800be68 <xPortStartScheduler+0x138>)
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	3b01      	subs	r3, #1
 800bdb0:	4a2d      	ldr	r2, [pc, #180]	@ (800be68 <xPortStartScheduler+0x138>)
 800bdb2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800bdb4:	78fb      	ldrb	r3, [r7, #3]
 800bdb6:	b2db      	uxtb	r3, r3
 800bdb8:	005b      	lsls	r3, r3, #1
 800bdba:	b2db      	uxtb	r3, r3
 800bdbc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bdbe:	78fb      	ldrb	r3, [r7, #3]
 800bdc0:	b2db      	uxtb	r3, r3
 800bdc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bdc6:	2b80      	cmp	r3, #128	@ 0x80
 800bdc8:	d0ef      	beq.n	800bdaa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800bdca:	4b27      	ldr	r3, [pc, #156]	@ (800be68 <xPortStartScheduler+0x138>)
 800bdcc:	681b      	ldr	r3, [r3, #0]
 800bdce:	f1c3 0307 	rsb	r3, r3, #7
 800bdd2:	2b04      	cmp	r3, #4
 800bdd4:	d00b      	beq.n	800bdee <xPortStartScheduler+0xbe>
	__asm volatile
 800bdd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bdda:	f383 8811 	msr	BASEPRI, r3
 800bdde:	f3bf 8f6f 	isb	sy
 800bde2:	f3bf 8f4f 	dsb	sy
 800bde6:	60bb      	str	r3, [r7, #8]
}
 800bde8:	bf00      	nop
 800bdea:	bf00      	nop
 800bdec:	e7fd      	b.n	800bdea <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800bdee:	4b1e      	ldr	r3, [pc, #120]	@ (800be68 <xPortStartScheduler+0x138>)
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	021b      	lsls	r3, r3, #8
 800bdf4:	4a1c      	ldr	r2, [pc, #112]	@ (800be68 <xPortStartScheduler+0x138>)
 800bdf6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800bdf8:	4b1b      	ldr	r3, [pc, #108]	@ (800be68 <xPortStartScheduler+0x138>)
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800be00:	4a19      	ldr	r2, [pc, #100]	@ (800be68 <xPortStartScheduler+0x138>)
 800be02:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	b2da      	uxtb	r2, r3
 800be08:	697b      	ldr	r3, [r7, #20]
 800be0a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800be0c:	4b17      	ldr	r3, [pc, #92]	@ (800be6c <xPortStartScheduler+0x13c>)
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	4a16      	ldr	r2, [pc, #88]	@ (800be6c <xPortStartScheduler+0x13c>)
 800be12:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800be16:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800be18:	4b14      	ldr	r3, [pc, #80]	@ (800be6c <xPortStartScheduler+0x13c>)
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	4a13      	ldr	r2, [pc, #76]	@ (800be6c <xPortStartScheduler+0x13c>)
 800be1e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800be22:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800be24:	f000 f8da 	bl	800bfdc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800be28:	4b11      	ldr	r3, [pc, #68]	@ (800be70 <xPortStartScheduler+0x140>)
 800be2a:	2200      	movs	r2, #0
 800be2c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800be2e:	f000 f8f9 	bl	800c024 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800be32:	4b10      	ldr	r3, [pc, #64]	@ (800be74 <xPortStartScheduler+0x144>)
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	4a0f      	ldr	r2, [pc, #60]	@ (800be74 <xPortStartScheduler+0x144>)
 800be38:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800be3c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800be3e:	f7ff ff63 	bl	800bd08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800be42:	f7ff f813 	bl	800ae6c <vTaskSwitchContext>
	prvTaskExitError();
 800be46:	f7ff ff19 	bl	800bc7c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800be4a:	2300      	movs	r3, #0
}
 800be4c:	4618      	mov	r0, r3
 800be4e:	3718      	adds	r7, #24
 800be50:	46bd      	mov	sp, r7
 800be52:	bd80      	pop	{r7, pc}
 800be54:	e000ed00 	.word	0xe000ed00
 800be58:	410fc271 	.word	0x410fc271
 800be5c:	410fc270 	.word	0x410fc270
 800be60:	e000e400 	.word	0xe000e400
 800be64:	20005d18 	.word	0x20005d18
 800be68:	20005d1c 	.word	0x20005d1c
 800be6c:	e000ed20 	.word	0xe000ed20
 800be70:	20000010 	.word	0x20000010
 800be74:	e000ef34 	.word	0xe000ef34

0800be78 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800be78:	b480      	push	{r7}
 800be7a:	b083      	sub	sp, #12
 800be7c:	af00      	add	r7, sp, #0
	__asm volatile
 800be7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be82:	f383 8811 	msr	BASEPRI, r3
 800be86:	f3bf 8f6f 	isb	sy
 800be8a:	f3bf 8f4f 	dsb	sy
 800be8e:	607b      	str	r3, [r7, #4]
}
 800be90:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800be92:	4b10      	ldr	r3, [pc, #64]	@ (800bed4 <vPortEnterCritical+0x5c>)
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	3301      	adds	r3, #1
 800be98:	4a0e      	ldr	r2, [pc, #56]	@ (800bed4 <vPortEnterCritical+0x5c>)
 800be9a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800be9c:	4b0d      	ldr	r3, [pc, #52]	@ (800bed4 <vPortEnterCritical+0x5c>)
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	2b01      	cmp	r3, #1
 800bea2:	d110      	bne.n	800bec6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800bea4:	4b0c      	ldr	r3, [pc, #48]	@ (800bed8 <vPortEnterCritical+0x60>)
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	b2db      	uxtb	r3, r3
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d00b      	beq.n	800bec6 <vPortEnterCritical+0x4e>
	__asm volatile
 800beae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800beb2:	f383 8811 	msr	BASEPRI, r3
 800beb6:	f3bf 8f6f 	isb	sy
 800beba:	f3bf 8f4f 	dsb	sy
 800bebe:	603b      	str	r3, [r7, #0]
}
 800bec0:	bf00      	nop
 800bec2:	bf00      	nop
 800bec4:	e7fd      	b.n	800bec2 <vPortEnterCritical+0x4a>
	}
}
 800bec6:	bf00      	nop
 800bec8:	370c      	adds	r7, #12
 800beca:	46bd      	mov	sp, r7
 800becc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bed0:	4770      	bx	lr
 800bed2:	bf00      	nop
 800bed4:	20000010 	.word	0x20000010
 800bed8:	e000ed04 	.word	0xe000ed04

0800bedc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800bedc:	b480      	push	{r7}
 800bede:	b083      	sub	sp, #12
 800bee0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800bee2:	4b12      	ldr	r3, [pc, #72]	@ (800bf2c <vPortExitCritical+0x50>)
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d10b      	bne.n	800bf02 <vPortExitCritical+0x26>
	__asm volatile
 800beea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800beee:	f383 8811 	msr	BASEPRI, r3
 800bef2:	f3bf 8f6f 	isb	sy
 800bef6:	f3bf 8f4f 	dsb	sy
 800befa:	607b      	str	r3, [r7, #4]
}
 800befc:	bf00      	nop
 800befe:	bf00      	nop
 800bf00:	e7fd      	b.n	800befe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800bf02:	4b0a      	ldr	r3, [pc, #40]	@ (800bf2c <vPortExitCritical+0x50>)
 800bf04:	681b      	ldr	r3, [r3, #0]
 800bf06:	3b01      	subs	r3, #1
 800bf08:	4a08      	ldr	r2, [pc, #32]	@ (800bf2c <vPortExitCritical+0x50>)
 800bf0a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800bf0c:	4b07      	ldr	r3, [pc, #28]	@ (800bf2c <vPortExitCritical+0x50>)
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	d105      	bne.n	800bf20 <vPortExitCritical+0x44>
 800bf14:	2300      	movs	r3, #0
 800bf16:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bf18:	683b      	ldr	r3, [r7, #0]
 800bf1a:	f383 8811 	msr	BASEPRI, r3
}
 800bf1e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800bf20:	bf00      	nop
 800bf22:	370c      	adds	r7, #12
 800bf24:	46bd      	mov	sp, r7
 800bf26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf2a:	4770      	bx	lr
 800bf2c:	20000010 	.word	0x20000010

0800bf30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800bf30:	f3ef 8009 	mrs	r0, PSP
 800bf34:	f3bf 8f6f 	isb	sy
 800bf38:	4b15      	ldr	r3, [pc, #84]	@ (800bf90 <pxCurrentTCBConst>)
 800bf3a:	681a      	ldr	r2, [r3, #0]
 800bf3c:	f01e 0f10 	tst.w	lr, #16
 800bf40:	bf08      	it	eq
 800bf42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800bf46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf4a:	6010      	str	r0, [r2, #0]
 800bf4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800bf50:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800bf54:	f380 8811 	msr	BASEPRI, r0
 800bf58:	f3bf 8f4f 	dsb	sy
 800bf5c:	f3bf 8f6f 	isb	sy
 800bf60:	f7fe ff84 	bl	800ae6c <vTaskSwitchContext>
 800bf64:	f04f 0000 	mov.w	r0, #0
 800bf68:	f380 8811 	msr	BASEPRI, r0
 800bf6c:	bc09      	pop	{r0, r3}
 800bf6e:	6819      	ldr	r1, [r3, #0]
 800bf70:	6808      	ldr	r0, [r1, #0]
 800bf72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf76:	f01e 0f10 	tst.w	lr, #16
 800bf7a:	bf08      	it	eq
 800bf7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800bf80:	f380 8809 	msr	PSP, r0
 800bf84:	f3bf 8f6f 	isb	sy
 800bf88:	4770      	bx	lr
 800bf8a:	bf00      	nop
 800bf8c:	f3af 8000 	nop.w

0800bf90 <pxCurrentTCBConst>:
 800bf90:	200056ec 	.word	0x200056ec
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800bf94:	bf00      	nop
 800bf96:	bf00      	nop

0800bf98 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800bf98:	b580      	push	{r7, lr}
 800bf9a:	b082      	sub	sp, #8
 800bf9c:	af00      	add	r7, sp, #0
	__asm volatile
 800bf9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bfa2:	f383 8811 	msr	BASEPRI, r3
 800bfa6:	f3bf 8f6f 	isb	sy
 800bfaa:	f3bf 8f4f 	dsb	sy
 800bfae:	607b      	str	r3, [r7, #4]
}
 800bfb0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800bfb2:	f7fe fea1 	bl	800acf8 <xTaskIncrementTick>
 800bfb6:	4603      	mov	r3, r0
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d003      	beq.n	800bfc4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800bfbc:	4b06      	ldr	r3, [pc, #24]	@ (800bfd8 <xPortSysTickHandler+0x40>)
 800bfbe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bfc2:	601a      	str	r2, [r3, #0]
 800bfc4:	2300      	movs	r3, #0
 800bfc6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bfc8:	683b      	ldr	r3, [r7, #0]
 800bfca:	f383 8811 	msr	BASEPRI, r3
}
 800bfce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800bfd0:	bf00      	nop
 800bfd2:	3708      	adds	r7, #8
 800bfd4:	46bd      	mov	sp, r7
 800bfd6:	bd80      	pop	{r7, pc}
 800bfd8:	e000ed04 	.word	0xe000ed04

0800bfdc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800bfdc:	b480      	push	{r7}
 800bfde:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800bfe0:	4b0b      	ldr	r3, [pc, #44]	@ (800c010 <vPortSetupTimerInterrupt+0x34>)
 800bfe2:	2200      	movs	r2, #0
 800bfe4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800bfe6:	4b0b      	ldr	r3, [pc, #44]	@ (800c014 <vPortSetupTimerInterrupt+0x38>)
 800bfe8:	2200      	movs	r2, #0
 800bfea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800bfec:	4b0a      	ldr	r3, [pc, #40]	@ (800c018 <vPortSetupTimerInterrupt+0x3c>)
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	4a0a      	ldr	r2, [pc, #40]	@ (800c01c <vPortSetupTimerInterrupt+0x40>)
 800bff2:	fba2 2303 	umull	r2, r3, r2, r3
 800bff6:	099b      	lsrs	r3, r3, #6
 800bff8:	4a09      	ldr	r2, [pc, #36]	@ (800c020 <vPortSetupTimerInterrupt+0x44>)
 800bffa:	3b01      	subs	r3, #1
 800bffc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800bffe:	4b04      	ldr	r3, [pc, #16]	@ (800c010 <vPortSetupTimerInterrupt+0x34>)
 800c000:	2207      	movs	r2, #7
 800c002:	601a      	str	r2, [r3, #0]
}
 800c004:	bf00      	nop
 800c006:	46bd      	mov	sp, r7
 800c008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c00c:	4770      	bx	lr
 800c00e:	bf00      	nop
 800c010:	e000e010 	.word	0xe000e010
 800c014:	e000e018 	.word	0xe000e018
 800c018:	20000004 	.word	0x20000004
 800c01c:	10624dd3 	.word	0x10624dd3
 800c020:	e000e014 	.word	0xe000e014

0800c024 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c024:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800c034 <vPortEnableVFP+0x10>
 800c028:	6801      	ldr	r1, [r0, #0]
 800c02a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800c02e:	6001      	str	r1, [r0, #0]
 800c030:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c032:	bf00      	nop
 800c034:	e000ed88 	.word	0xe000ed88

0800c038 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c038:	b480      	push	{r7}
 800c03a:	b085      	sub	sp, #20
 800c03c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c03e:	f3ef 8305 	mrs	r3, IPSR
 800c042:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c044:	68fb      	ldr	r3, [r7, #12]
 800c046:	2b0f      	cmp	r3, #15
 800c048:	d915      	bls.n	800c076 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c04a:	4a18      	ldr	r2, [pc, #96]	@ (800c0ac <vPortValidateInterruptPriority+0x74>)
 800c04c:	68fb      	ldr	r3, [r7, #12]
 800c04e:	4413      	add	r3, r2
 800c050:	781b      	ldrb	r3, [r3, #0]
 800c052:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c054:	4b16      	ldr	r3, [pc, #88]	@ (800c0b0 <vPortValidateInterruptPriority+0x78>)
 800c056:	781b      	ldrb	r3, [r3, #0]
 800c058:	7afa      	ldrb	r2, [r7, #11]
 800c05a:	429a      	cmp	r2, r3
 800c05c:	d20b      	bcs.n	800c076 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800c05e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c062:	f383 8811 	msr	BASEPRI, r3
 800c066:	f3bf 8f6f 	isb	sy
 800c06a:	f3bf 8f4f 	dsb	sy
 800c06e:	607b      	str	r3, [r7, #4]
}
 800c070:	bf00      	nop
 800c072:	bf00      	nop
 800c074:	e7fd      	b.n	800c072 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c076:	4b0f      	ldr	r3, [pc, #60]	@ (800c0b4 <vPortValidateInterruptPriority+0x7c>)
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800c07e:	4b0e      	ldr	r3, [pc, #56]	@ (800c0b8 <vPortValidateInterruptPriority+0x80>)
 800c080:	681b      	ldr	r3, [r3, #0]
 800c082:	429a      	cmp	r2, r3
 800c084:	d90b      	bls.n	800c09e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800c086:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c08a:	f383 8811 	msr	BASEPRI, r3
 800c08e:	f3bf 8f6f 	isb	sy
 800c092:	f3bf 8f4f 	dsb	sy
 800c096:	603b      	str	r3, [r7, #0]
}
 800c098:	bf00      	nop
 800c09a:	bf00      	nop
 800c09c:	e7fd      	b.n	800c09a <vPortValidateInterruptPriority+0x62>
	}
 800c09e:	bf00      	nop
 800c0a0:	3714      	adds	r7, #20
 800c0a2:	46bd      	mov	sp, r7
 800c0a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0a8:	4770      	bx	lr
 800c0aa:	bf00      	nop
 800c0ac:	e000e3f0 	.word	0xe000e3f0
 800c0b0:	20005d18 	.word	0x20005d18
 800c0b4:	e000ed0c 	.word	0xe000ed0c
 800c0b8:	20005d1c 	.word	0x20005d1c

0800c0bc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c0bc:	b580      	push	{r7, lr}
 800c0be:	b08a      	sub	sp, #40	@ 0x28
 800c0c0:	af00      	add	r7, sp, #0
 800c0c2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c0c4:	2300      	movs	r3, #0
 800c0c6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c0c8:	f7fe fd5a 	bl	800ab80 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c0cc:	4b5c      	ldr	r3, [pc, #368]	@ (800c240 <pvPortMalloc+0x184>)
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	d101      	bne.n	800c0d8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c0d4:	f000 f924 	bl	800c320 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c0d8:	4b5a      	ldr	r3, [pc, #360]	@ (800c244 <pvPortMalloc+0x188>)
 800c0da:	681a      	ldr	r2, [r3, #0]
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	4013      	ands	r3, r2
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	f040 8095 	bne.w	800c210 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	d01e      	beq.n	800c12a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800c0ec:	2208      	movs	r2, #8
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	4413      	add	r3, r2
 800c0f2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	f003 0307 	and.w	r3, r3, #7
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	d015      	beq.n	800c12a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	f023 0307 	bic.w	r3, r3, #7
 800c104:	3308      	adds	r3, #8
 800c106:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	f003 0307 	and.w	r3, r3, #7
 800c10e:	2b00      	cmp	r3, #0
 800c110:	d00b      	beq.n	800c12a <pvPortMalloc+0x6e>
	__asm volatile
 800c112:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c116:	f383 8811 	msr	BASEPRI, r3
 800c11a:	f3bf 8f6f 	isb	sy
 800c11e:	f3bf 8f4f 	dsb	sy
 800c122:	617b      	str	r3, [r7, #20]
}
 800c124:	bf00      	nop
 800c126:	bf00      	nop
 800c128:	e7fd      	b.n	800c126 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d06f      	beq.n	800c210 <pvPortMalloc+0x154>
 800c130:	4b45      	ldr	r3, [pc, #276]	@ (800c248 <pvPortMalloc+0x18c>)
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	687a      	ldr	r2, [r7, #4]
 800c136:	429a      	cmp	r2, r3
 800c138:	d86a      	bhi.n	800c210 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c13a:	4b44      	ldr	r3, [pc, #272]	@ (800c24c <pvPortMalloc+0x190>)
 800c13c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c13e:	4b43      	ldr	r3, [pc, #268]	@ (800c24c <pvPortMalloc+0x190>)
 800c140:	681b      	ldr	r3, [r3, #0]
 800c142:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c144:	e004      	b.n	800c150 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800c146:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c148:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c14a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c150:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c152:	685b      	ldr	r3, [r3, #4]
 800c154:	687a      	ldr	r2, [r7, #4]
 800c156:	429a      	cmp	r2, r3
 800c158:	d903      	bls.n	800c162 <pvPortMalloc+0xa6>
 800c15a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	2b00      	cmp	r3, #0
 800c160:	d1f1      	bne.n	800c146 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c162:	4b37      	ldr	r3, [pc, #220]	@ (800c240 <pvPortMalloc+0x184>)
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c168:	429a      	cmp	r2, r3
 800c16a:	d051      	beq.n	800c210 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c16c:	6a3b      	ldr	r3, [r7, #32]
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	2208      	movs	r2, #8
 800c172:	4413      	add	r3, r2
 800c174:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c176:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c178:	681a      	ldr	r2, [r3, #0]
 800c17a:	6a3b      	ldr	r3, [r7, #32]
 800c17c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c17e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c180:	685a      	ldr	r2, [r3, #4]
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	1ad2      	subs	r2, r2, r3
 800c186:	2308      	movs	r3, #8
 800c188:	005b      	lsls	r3, r3, #1
 800c18a:	429a      	cmp	r2, r3
 800c18c:	d920      	bls.n	800c1d0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c18e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	4413      	add	r3, r2
 800c194:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c196:	69bb      	ldr	r3, [r7, #24]
 800c198:	f003 0307 	and.w	r3, r3, #7
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	d00b      	beq.n	800c1b8 <pvPortMalloc+0xfc>
	__asm volatile
 800c1a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1a4:	f383 8811 	msr	BASEPRI, r3
 800c1a8:	f3bf 8f6f 	isb	sy
 800c1ac:	f3bf 8f4f 	dsb	sy
 800c1b0:	613b      	str	r3, [r7, #16]
}
 800c1b2:	bf00      	nop
 800c1b4:	bf00      	nop
 800c1b6:	e7fd      	b.n	800c1b4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c1b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1ba:	685a      	ldr	r2, [r3, #4]
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	1ad2      	subs	r2, r2, r3
 800c1c0:	69bb      	ldr	r3, [r7, #24]
 800c1c2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c1c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1c6:	687a      	ldr	r2, [r7, #4]
 800c1c8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c1ca:	69b8      	ldr	r0, [r7, #24]
 800c1cc:	f000 f90a 	bl	800c3e4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c1d0:	4b1d      	ldr	r3, [pc, #116]	@ (800c248 <pvPortMalloc+0x18c>)
 800c1d2:	681a      	ldr	r2, [r3, #0]
 800c1d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1d6:	685b      	ldr	r3, [r3, #4]
 800c1d8:	1ad3      	subs	r3, r2, r3
 800c1da:	4a1b      	ldr	r2, [pc, #108]	@ (800c248 <pvPortMalloc+0x18c>)
 800c1dc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c1de:	4b1a      	ldr	r3, [pc, #104]	@ (800c248 <pvPortMalloc+0x18c>)
 800c1e0:	681a      	ldr	r2, [r3, #0]
 800c1e2:	4b1b      	ldr	r3, [pc, #108]	@ (800c250 <pvPortMalloc+0x194>)
 800c1e4:	681b      	ldr	r3, [r3, #0]
 800c1e6:	429a      	cmp	r2, r3
 800c1e8:	d203      	bcs.n	800c1f2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c1ea:	4b17      	ldr	r3, [pc, #92]	@ (800c248 <pvPortMalloc+0x18c>)
 800c1ec:	681b      	ldr	r3, [r3, #0]
 800c1ee:	4a18      	ldr	r2, [pc, #96]	@ (800c250 <pvPortMalloc+0x194>)
 800c1f0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c1f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1f4:	685a      	ldr	r2, [r3, #4]
 800c1f6:	4b13      	ldr	r3, [pc, #76]	@ (800c244 <pvPortMalloc+0x188>)
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	431a      	orrs	r2, r3
 800c1fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1fe:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c200:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c202:	2200      	movs	r2, #0
 800c204:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c206:	4b13      	ldr	r3, [pc, #76]	@ (800c254 <pvPortMalloc+0x198>)
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	3301      	adds	r3, #1
 800c20c:	4a11      	ldr	r2, [pc, #68]	@ (800c254 <pvPortMalloc+0x198>)
 800c20e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c210:	f7fe fcc4 	bl	800ab9c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c214:	69fb      	ldr	r3, [r7, #28]
 800c216:	f003 0307 	and.w	r3, r3, #7
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d00b      	beq.n	800c236 <pvPortMalloc+0x17a>
	__asm volatile
 800c21e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c222:	f383 8811 	msr	BASEPRI, r3
 800c226:	f3bf 8f6f 	isb	sy
 800c22a:	f3bf 8f4f 	dsb	sy
 800c22e:	60fb      	str	r3, [r7, #12]
}
 800c230:	bf00      	nop
 800c232:	bf00      	nop
 800c234:	e7fd      	b.n	800c232 <pvPortMalloc+0x176>
	return pvReturn;
 800c236:	69fb      	ldr	r3, [r7, #28]
}
 800c238:	4618      	mov	r0, r3
 800c23a:	3728      	adds	r7, #40	@ 0x28
 800c23c:	46bd      	mov	sp, r7
 800c23e:	bd80      	pop	{r7, pc}
 800c240:	20006928 	.word	0x20006928
 800c244:	2000693c 	.word	0x2000693c
 800c248:	2000692c 	.word	0x2000692c
 800c24c:	20006920 	.word	0x20006920
 800c250:	20006930 	.word	0x20006930
 800c254:	20006934 	.word	0x20006934

0800c258 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c258:	b580      	push	{r7, lr}
 800c25a:	b086      	sub	sp, #24
 800c25c:	af00      	add	r7, sp, #0
 800c25e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	2b00      	cmp	r3, #0
 800c268:	d04f      	beq.n	800c30a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c26a:	2308      	movs	r3, #8
 800c26c:	425b      	negs	r3, r3
 800c26e:	697a      	ldr	r2, [r7, #20]
 800c270:	4413      	add	r3, r2
 800c272:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c274:	697b      	ldr	r3, [r7, #20]
 800c276:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c278:	693b      	ldr	r3, [r7, #16]
 800c27a:	685a      	ldr	r2, [r3, #4]
 800c27c:	4b25      	ldr	r3, [pc, #148]	@ (800c314 <vPortFree+0xbc>)
 800c27e:	681b      	ldr	r3, [r3, #0]
 800c280:	4013      	ands	r3, r2
 800c282:	2b00      	cmp	r3, #0
 800c284:	d10b      	bne.n	800c29e <vPortFree+0x46>
	__asm volatile
 800c286:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c28a:	f383 8811 	msr	BASEPRI, r3
 800c28e:	f3bf 8f6f 	isb	sy
 800c292:	f3bf 8f4f 	dsb	sy
 800c296:	60fb      	str	r3, [r7, #12]
}
 800c298:	bf00      	nop
 800c29a:	bf00      	nop
 800c29c:	e7fd      	b.n	800c29a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c29e:	693b      	ldr	r3, [r7, #16]
 800c2a0:	681b      	ldr	r3, [r3, #0]
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d00b      	beq.n	800c2be <vPortFree+0x66>
	__asm volatile
 800c2a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c2aa:	f383 8811 	msr	BASEPRI, r3
 800c2ae:	f3bf 8f6f 	isb	sy
 800c2b2:	f3bf 8f4f 	dsb	sy
 800c2b6:	60bb      	str	r3, [r7, #8]
}
 800c2b8:	bf00      	nop
 800c2ba:	bf00      	nop
 800c2bc:	e7fd      	b.n	800c2ba <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c2be:	693b      	ldr	r3, [r7, #16]
 800c2c0:	685a      	ldr	r2, [r3, #4]
 800c2c2:	4b14      	ldr	r3, [pc, #80]	@ (800c314 <vPortFree+0xbc>)
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	4013      	ands	r3, r2
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	d01e      	beq.n	800c30a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c2cc:	693b      	ldr	r3, [r7, #16]
 800c2ce:	681b      	ldr	r3, [r3, #0]
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	d11a      	bne.n	800c30a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c2d4:	693b      	ldr	r3, [r7, #16]
 800c2d6:	685a      	ldr	r2, [r3, #4]
 800c2d8:	4b0e      	ldr	r3, [pc, #56]	@ (800c314 <vPortFree+0xbc>)
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	43db      	mvns	r3, r3
 800c2de:	401a      	ands	r2, r3
 800c2e0:	693b      	ldr	r3, [r7, #16]
 800c2e2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c2e4:	f7fe fc4c 	bl	800ab80 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c2e8:	693b      	ldr	r3, [r7, #16]
 800c2ea:	685a      	ldr	r2, [r3, #4]
 800c2ec:	4b0a      	ldr	r3, [pc, #40]	@ (800c318 <vPortFree+0xc0>)
 800c2ee:	681b      	ldr	r3, [r3, #0]
 800c2f0:	4413      	add	r3, r2
 800c2f2:	4a09      	ldr	r2, [pc, #36]	@ (800c318 <vPortFree+0xc0>)
 800c2f4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c2f6:	6938      	ldr	r0, [r7, #16]
 800c2f8:	f000 f874 	bl	800c3e4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c2fc:	4b07      	ldr	r3, [pc, #28]	@ (800c31c <vPortFree+0xc4>)
 800c2fe:	681b      	ldr	r3, [r3, #0]
 800c300:	3301      	adds	r3, #1
 800c302:	4a06      	ldr	r2, [pc, #24]	@ (800c31c <vPortFree+0xc4>)
 800c304:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c306:	f7fe fc49 	bl	800ab9c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c30a:	bf00      	nop
 800c30c:	3718      	adds	r7, #24
 800c30e:	46bd      	mov	sp, r7
 800c310:	bd80      	pop	{r7, pc}
 800c312:	bf00      	nop
 800c314:	2000693c 	.word	0x2000693c
 800c318:	2000692c 	.word	0x2000692c
 800c31c:	20006938 	.word	0x20006938

0800c320 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c320:	b480      	push	{r7}
 800c322:	b085      	sub	sp, #20
 800c324:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c326:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800c32a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c32c:	4b27      	ldr	r3, [pc, #156]	@ (800c3cc <prvHeapInit+0xac>)
 800c32e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c330:	68fb      	ldr	r3, [r7, #12]
 800c332:	f003 0307 	and.w	r3, r3, #7
 800c336:	2b00      	cmp	r3, #0
 800c338:	d00c      	beq.n	800c354 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c33a:	68fb      	ldr	r3, [r7, #12]
 800c33c:	3307      	adds	r3, #7
 800c33e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c340:	68fb      	ldr	r3, [r7, #12]
 800c342:	f023 0307 	bic.w	r3, r3, #7
 800c346:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c348:	68ba      	ldr	r2, [r7, #8]
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	1ad3      	subs	r3, r2, r3
 800c34e:	4a1f      	ldr	r2, [pc, #124]	@ (800c3cc <prvHeapInit+0xac>)
 800c350:	4413      	add	r3, r2
 800c352:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c354:	68fb      	ldr	r3, [r7, #12]
 800c356:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c358:	4a1d      	ldr	r2, [pc, #116]	@ (800c3d0 <prvHeapInit+0xb0>)
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c35e:	4b1c      	ldr	r3, [pc, #112]	@ (800c3d0 <prvHeapInit+0xb0>)
 800c360:	2200      	movs	r2, #0
 800c362:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	68ba      	ldr	r2, [r7, #8]
 800c368:	4413      	add	r3, r2
 800c36a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c36c:	2208      	movs	r2, #8
 800c36e:	68fb      	ldr	r3, [r7, #12]
 800c370:	1a9b      	subs	r3, r3, r2
 800c372:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c374:	68fb      	ldr	r3, [r7, #12]
 800c376:	f023 0307 	bic.w	r3, r3, #7
 800c37a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c37c:	68fb      	ldr	r3, [r7, #12]
 800c37e:	4a15      	ldr	r2, [pc, #84]	@ (800c3d4 <prvHeapInit+0xb4>)
 800c380:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c382:	4b14      	ldr	r3, [pc, #80]	@ (800c3d4 <prvHeapInit+0xb4>)
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	2200      	movs	r2, #0
 800c388:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c38a:	4b12      	ldr	r3, [pc, #72]	@ (800c3d4 <prvHeapInit+0xb4>)
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	2200      	movs	r2, #0
 800c390:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c396:	683b      	ldr	r3, [r7, #0]
 800c398:	68fa      	ldr	r2, [r7, #12]
 800c39a:	1ad2      	subs	r2, r2, r3
 800c39c:	683b      	ldr	r3, [r7, #0]
 800c39e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c3a0:	4b0c      	ldr	r3, [pc, #48]	@ (800c3d4 <prvHeapInit+0xb4>)
 800c3a2:	681a      	ldr	r2, [r3, #0]
 800c3a4:	683b      	ldr	r3, [r7, #0]
 800c3a6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c3a8:	683b      	ldr	r3, [r7, #0]
 800c3aa:	685b      	ldr	r3, [r3, #4]
 800c3ac:	4a0a      	ldr	r2, [pc, #40]	@ (800c3d8 <prvHeapInit+0xb8>)
 800c3ae:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c3b0:	683b      	ldr	r3, [r7, #0]
 800c3b2:	685b      	ldr	r3, [r3, #4]
 800c3b4:	4a09      	ldr	r2, [pc, #36]	@ (800c3dc <prvHeapInit+0xbc>)
 800c3b6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c3b8:	4b09      	ldr	r3, [pc, #36]	@ (800c3e0 <prvHeapInit+0xc0>)
 800c3ba:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800c3be:	601a      	str	r2, [r3, #0]
}
 800c3c0:	bf00      	nop
 800c3c2:	3714      	adds	r7, #20
 800c3c4:	46bd      	mov	sp, r7
 800c3c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ca:	4770      	bx	lr
 800c3cc:	20005d20 	.word	0x20005d20
 800c3d0:	20006920 	.word	0x20006920
 800c3d4:	20006928 	.word	0x20006928
 800c3d8:	20006930 	.word	0x20006930
 800c3dc:	2000692c 	.word	0x2000692c
 800c3e0:	2000693c 	.word	0x2000693c

0800c3e4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c3e4:	b480      	push	{r7}
 800c3e6:	b085      	sub	sp, #20
 800c3e8:	af00      	add	r7, sp, #0
 800c3ea:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c3ec:	4b28      	ldr	r3, [pc, #160]	@ (800c490 <prvInsertBlockIntoFreeList+0xac>)
 800c3ee:	60fb      	str	r3, [r7, #12]
 800c3f0:	e002      	b.n	800c3f8 <prvInsertBlockIntoFreeList+0x14>
 800c3f2:	68fb      	ldr	r3, [r7, #12]
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	60fb      	str	r3, [r7, #12]
 800c3f8:	68fb      	ldr	r3, [r7, #12]
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	687a      	ldr	r2, [r7, #4]
 800c3fe:	429a      	cmp	r2, r3
 800c400:	d8f7      	bhi.n	800c3f2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c402:	68fb      	ldr	r3, [r7, #12]
 800c404:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c406:	68fb      	ldr	r3, [r7, #12]
 800c408:	685b      	ldr	r3, [r3, #4]
 800c40a:	68ba      	ldr	r2, [r7, #8]
 800c40c:	4413      	add	r3, r2
 800c40e:	687a      	ldr	r2, [r7, #4]
 800c410:	429a      	cmp	r2, r3
 800c412:	d108      	bne.n	800c426 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c414:	68fb      	ldr	r3, [r7, #12]
 800c416:	685a      	ldr	r2, [r3, #4]
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	685b      	ldr	r3, [r3, #4]
 800c41c:	441a      	add	r2, r3
 800c41e:	68fb      	ldr	r3, [r7, #12]
 800c420:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c422:	68fb      	ldr	r3, [r7, #12]
 800c424:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	685b      	ldr	r3, [r3, #4]
 800c42e:	68ba      	ldr	r2, [r7, #8]
 800c430:	441a      	add	r2, r3
 800c432:	68fb      	ldr	r3, [r7, #12]
 800c434:	681b      	ldr	r3, [r3, #0]
 800c436:	429a      	cmp	r2, r3
 800c438:	d118      	bne.n	800c46c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c43a:	68fb      	ldr	r3, [r7, #12]
 800c43c:	681a      	ldr	r2, [r3, #0]
 800c43e:	4b15      	ldr	r3, [pc, #84]	@ (800c494 <prvInsertBlockIntoFreeList+0xb0>)
 800c440:	681b      	ldr	r3, [r3, #0]
 800c442:	429a      	cmp	r2, r3
 800c444:	d00d      	beq.n	800c462 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	685a      	ldr	r2, [r3, #4]
 800c44a:	68fb      	ldr	r3, [r7, #12]
 800c44c:	681b      	ldr	r3, [r3, #0]
 800c44e:	685b      	ldr	r3, [r3, #4]
 800c450:	441a      	add	r2, r3
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c456:	68fb      	ldr	r3, [r7, #12]
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	681a      	ldr	r2, [r3, #0]
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	601a      	str	r2, [r3, #0]
 800c460:	e008      	b.n	800c474 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c462:	4b0c      	ldr	r3, [pc, #48]	@ (800c494 <prvInsertBlockIntoFreeList+0xb0>)
 800c464:	681a      	ldr	r2, [r3, #0]
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	601a      	str	r2, [r3, #0]
 800c46a:	e003      	b.n	800c474 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c46c:	68fb      	ldr	r3, [r7, #12]
 800c46e:	681a      	ldr	r2, [r3, #0]
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c474:	68fa      	ldr	r2, [r7, #12]
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	429a      	cmp	r2, r3
 800c47a:	d002      	beq.n	800c482 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c47c:	68fb      	ldr	r3, [r7, #12]
 800c47e:	687a      	ldr	r2, [r7, #4]
 800c480:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c482:	bf00      	nop
 800c484:	3714      	adds	r7, #20
 800c486:	46bd      	mov	sp, r7
 800c488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c48c:	4770      	bx	lr
 800c48e:	bf00      	nop
 800c490:	20006920 	.word	0x20006920
 800c494:	20006928 	.word	0x20006928

0800c498 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 800c498:	4b04      	ldr	r3, [pc, #16]	@ (800c4ac <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x14>)
 800c49a:	681a      	ldr	r2, [r3, #0]
 800c49c:	b10a      	cbz	r2, 800c4a2 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0xa>
 800c49e:	4803      	ldr	r0, [pc, #12]	@ (800c4ac <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x14>)
 800c4a0:	4770      	bx	lr
 800c4a2:	4a03      	ldr	r2, [pc, #12]	@ (800c4b0 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x18>)
 800c4a4:	4801      	ldr	r0, [pc, #4]	@ (800c4ac <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x14>)
 800c4a6:	6812      	ldr	r2, [r2, #0]
 800c4a8:	601a      	str	r2, [r3, #0]
 800c4aa:	4770      	bx	lr
 800c4ac:	2000001c 	.word	0x2000001c
 800c4b0:	200001d0 	.word	0x200001d0

0800c4b4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 800c4b4:	4a02      	ldr	r2, [pc, #8]	@ (800c4c0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0xc>)
 800c4b6:	4b03      	ldr	r3, [pc, #12]	@ (800c4c4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x10>)
 800c4b8:	6812      	ldr	r2, [r2, #0]
 800c4ba:	601a      	str	r2, [r3, #0]
 800c4bc:	4770      	bx	lr
 800c4be:	bf00      	nop
 800c4c0:	200001d0 	.word	0x200001d0
 800c4c4:	2000001c 	.word	0x2000001c

0800c4c8 <geometry_msgs__msg__Twist__rosidl_typesupport_introspection_c__Twist_init_function>:
 800c4c8:	f004 bba8 	b.w	8010c1c <geometry_msgs__msg__Twist__init>

0800c4cc <geometry_msgs__msg__Twist__rosidl_typesupport_introspection_c__Twist_fini_function>:
 800c4cc:	f004 bbca 	b.w	8010c64 <geometry_msgs__msg__Twist__fini>

0800c4d0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 800c4d0:	b510      	push	{r4, lr}
 800c4d2:	f000 f819 	bl	800c508 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800c4d6:	4c07      	ldr	r4, [pc, #28]	@ (800c4f4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x24>)
 800c4d8:	60e0      	str	r0, [r4, #12]
 800c4da:	f000 f815 	bl	800c508 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800c4de:	4b06      	ldr	r3, [pc, #24]	@ (800c4f8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x28>)
 800c4e0:	64a0      	str	r0, [r4, #72]	@ 0x48
 800c4e2:	681a      	ldr	r2, [r3, #0]
 800c4e4:	b10a      	cbz	r2, 800c4ea <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x1a>
 800c4e6:	4804      	ldr	r0, [pc, #16]	@ (800c4f8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x28>)
 800c4e8:	bd10      	pop	{r4, pc}
 800c4ea:	4a04      	ldr	r2, [pc, #16]	@ (800c4fc <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x2c>)
 800c4ec:	4802      	ldr	r0, [pc, #8]	@ (800c4f8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x28>)
 800c4ee:	6812      	ldr	r2, [r2, #0]
 800c4f0:	601a      	str	r2, [r3, #0]
 800c4f2:	bd10      	pop	{r4, pc}
 800c4f4:	20000028 	.word	0x20000028
 800c4f8:	200000a0 	.word	0x200000a0
 800c4fc:	200001d4 	.word	0x200001d4

0800c500 <geometry_msgs__msg__Vector3__rosidl_typesupport_introspection_c__Vector3_init_function>:
 800c500:	f004 bbbc 	b.w	8010c7c <geometry_msgs__msg__Vector3__init>

0800c504 <geometry_msgs__msg__Vector3__rosidl_typesupport_introspection_c__Vector3_fini_function>:
 800c504:	f004 bbbe 	b.w	8010c84 <geometry_msgs__msg__Vector3__fini>

0800c508 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>:
 800c508:	4b04      	ldr	r3, [pc, #16]	@ (800c51c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 800c50a:	681a      	ldr	r2, [r3, #0]
 800c50c:	b10a      	cbz	r2, 800c512 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0xa>
 800c50e:	4803      	ldr	r0, [pc, #12]	@ (800c51c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 800c510:	4770      	bx	lr
 800c512:	4a03      	ldr	r2, [pc, #12]	@ (800c520 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x18>)
 800c514:	4801      	ldr	r0, [pc, #4]	@ (800c51c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 800c516:	6812      	ldr	r2, [r2, #0]
 800c518:	601a      	str	r2, [r3, #0]
 800c51a:	4770      	bx	lr
 800c51c:	20000160 	.word	0x20000160
 800c520:	200001d4 	.word	0x200001d4

0800c524 <get_serialized_size_geometry_msgs__msg__Twist>:
 800c524:	b570      	push	{r4, r5, r6, lr}
 800c526:	4604      	mov	r4, r0
 800c528:	b148      	cbz	r0, 800c53e <get_serialized_size_geometry_msgs__msg__Twist+0x1a>
 800c52a:	460d      	mov	r5, r1
 800c52c:	f000 f860 	bl	800c5f0 <get_serialized_size_geometry_msgs__msg__Vector3>
 800c530:	4606      	mov	r6, r0
 800c532:	1829      	adds	r1, r5, r0
 800c534:	f104 0018 	add.w	r0, r4, #24
 800c538:	f000 f85a 	bl	800c5f0 <get_serialized_size_geometry_msgs__msg__Vector3>
 800c53c:	4430      	add	r0, r6
 800c53e:	bd70      	pop	{r4, r5, r6, pc}

0800c540 <_Twist__cdr_deserialize>:
 800c540:	b570      	push	{r4, r5, r6, lr}
 800c542:	460c      	mov	r4, r1
 800c544:	b189      	cbz	r1, 800c56a <_Twist__cdr_deserialize+0x2a>
 800c546:	4605      	mov	r5, r0
 800c548:	f000 f8de 	bl	800c708 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800c54c:	6843      	ldr	r3, [r0, #4]
 800c54e:	4621      	mov	r1, r4
 800c550:	68db      	ldr	r3, [r3, #12]
 800c552:	4628      	mov	r0, r5
 800c554:	4798      	blx	r3
 800c556:	f000 f8d7 	bl	800c708 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800c55a:	6843      	ldr	r3, [r0, #4]
 800c55c:	f104 0118 	add.w	r1, r4, #24
 800c560:	4628      	mov	r0, r5
 800c562:	68db      	ldr	r3, [r3, #12]
 800c564:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c568:	4718      	bx	r3
 800c56a:	4608      	mov	r0, r1
 800c56c:	bd70      	pop	{r4, r5, r6, pc}
 800c56e:	bf00      	nop

0800c570 <_Twist__cdr_serialize>:
 800c570:	b510      	push	{r4, lr}
 800c572:	b082      	sub	sp, #8
 800c574:	9101      	str	r1, [sp, #4]
 800c576:	b190      	cbz	r0, 800c59e <_Twist__cdr_serialize+0x2e>
 800c578:	4604      	mov	r4, r0
 800c57a:	f000 f8c5 	bl	800c708 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800c57e:	6843      	ldr	r3, [r0, #4]
 800c580:	9901      	ldr	r1, [sp, #4]
 800c582:	689b      	ldr	r3, [r3, #8]
 800c584:	4620      	mov	r0, r4
 800c586:	4798      	blx	r3
 800c588:	f000 f8be 	bl	800c708 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800c58c:	6843      	ldr	r3, [r0, #4]
 800c58e:	9901      	ldr	r1, [sp, #4]
 800c590:	689b      	ldr	r3, [r3, #8]
 800c592:	f104 0018 	add.w	r0, r4, #24
 800c596:	b002      	add	sp, #8
 800c598:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c59c:	4718      	bx	r3
 800c59e:	b002      	add	sp, #8
 800c5a0:	bd10      	pop	{r4, pc}
 800c5a2:	bf00      	nop

0800c5a4 <_Twist__get_serialized_size>:
 800c5a4:	b538      	push	{r3, r4, r5, lr}
 800c5a6:	4604      	mov	r4, r0
 800c5a8:	b148      	cbz	r0, 800c5be <_Twist__get_serialized_size+0x1a>
 800c5aa:	2100      	movs	r1, #0
 800c5ac:	f000 f820 	bl	800c5f0 <get_serialized_size_geometry_msgs__msg__Vector3>
 800c5b0:	4605      	mov	r5, r0
 800c5b2:	4601      	mov	r1, r0
 800c5b4:	f104 0018 	add.w	r0, r4, #24
 800c5b8:	f000 f81a 	bl	800c5f0 <get_serialized_size_geometry_msgs__msg__Vector3>
 800c5bc:	4428      	add	r0, r5
 800c5be:	bd38      	pop	{r3, r4, r5, pc}

0800c5c0 <_Twist__max_serialized_size>:
 800c5c0:	b510      	push	{r4, lr}
 800c5c2:	b082      	sub	sp, #8
 800c5c4:	2301      	movs	r3, #1
 800c5c6:	2100      	movs	r1, #0
 800c5c8:	f10d 0007 	add.w	r0, sp, #7
 800c5cc:	f88d 3007 	strb.w	r3, [sp, #7]
 800c5d0:	f000 f87e 	bl	800c6d0 <max_serialized_size_geometry_msgs__msg__Vector3>
 800c5d4:	4604      	mov	r4, r0
 800c5d6:	4601      	mov	r1, r0
 800c5d8:	f10d 0007 	add.w	r0, sp, #7
 800c5dc:	f000 f878 	bl	800c6d0 <max_serialized_size_geometry_msgs__msg__Vector3>
 800c5e0:	4420      	add	r0, r4
 800c5e2:	b002      	add	sp, #8
 800c5e4:	bd10      	pop	{r4, pc}
 800c5e6:	bf00      	nop

0800c5e8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 800c5e8:	4800      	ldr	r0, [pc, #0]	@ (800c5ec <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x4>)
 800c5ea:	4770      	bx	lr
 800c5ec:	2000016c 	.word	0x2000016c

0800c5f0 <get_serialized_size_geometry_msgs__msg__Vector3>:
 800c5f0:	b1b8      	cbz	r0, 800c622 <get_serialized_size_geometry_msgs__msg__Vector3+0x32>
 800c5f2:	b538      	push	{r3, r4, r5, lr}
 800c5f4:	460d      	mov	r5, r1
 800c5f6:	4628      	mov	r0, r5
 800c5f8:	2108      	movs	r1, #8
 800c5fa:	f001 fb9d 	bl	800dd38 <ucdr_alignment>
 800c5fe:	f105 0308 	add.w	r3, r5, #8
 800c602:	181c      	adds	r4, r3, r0
 800c604:	2108      	movs	r1, #8
 800c606:	4620      	mov	r0, r4
 800c608:	f001 fb96 	bl	800dd38 <ucdr_alignment>
 800c60c:	3008      	adds	r0, #8
 800c60e:	4404      	add	r4, r0
 800c610:	2108      	movs	r1, #8
 800c612:	4620      	mov	r0, r4
 800c614:	f001 fb90 	bl	800dd38 <ucdr_alignment>
 800c618:	f1c5 0508 	rsb	r5, r5, #8
 800c61c:	4428      	add	r0, r5
 800c61e:	4420      	add	r0, r4
 800c620:	bd38      	pop	{r3, r4, r5, pc}
 800c622:	4770      	bx	lr

0800c624 <_Vector3__cdr_deserialize>:
 800c624:	b538      	push	{r3, r4, r5, lr}
 800c626:	460c      	mov	r4, r1
 800c628:	b171      	cbz	r1, 800c648 <_Vector3__cdr_deserialize+0x24>
 800c62a:	4605      	mov	r5, r0
 800c62c:	f001 f998 	bl	800d960 <ucdr_deserialize_double>
 800c630:	f104 0108 	add.w	r1, r4, #8
 800c634:	4628      	mov	r0, r5
 800c636:	f001 f993 	bl	800d960 <ucdr_deserialize_double>
 800c63a:	f104 0110 	add.w	r1, r4, #16
 800c63e:	4628      	mov	r0, r5
 800c640:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c644:	f001 b98c 	b.w	800d960 <ucdr_deserialize_double>
 800c648:	4608      	mov	r0, r1
 800c64a:	bd38      	pop	{r3, r4, r5, pc}

0800c64c <_Vector3__cdr_serialize>:
 800c64c:	b198      	cbz	r0, 800c676 <_Vector3__cdr_serialize+0x2a>
 800c64e:	b538      	push	{r3, r4, r5, lr}
 800c650:	ed90 0b00 	vldr	d0, [r0]
 800c654:	460d      	mov	r5, r1
 800c656:	4604      	mov	r4, r0
 800c658:	4608      	mov	r0, r1
 800c65a:	f000 ffdf 	bl	800d61c <ucdr_serialize_double>
 800c65e:	ed94 0b02 	vldr	d0, [r4, #8]
 800c662:	4628      	mov	r0, r5
 800c664:	f000 ffda 	bl	800d61c <ucdr_serialize_double>
 800c668:	ed94 0b04 	vldr	d0, [r4, #16]
 800c66c:	4628      	mov	r0, r5
 800c66e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c672:	f000 bfd3 	b.w	800d61c <ucdr_serialize_double>
 800c676:	4770      	bx	lr

0800c678 <_Vector3__get_serialized_size>:
 800c678:	b198      	cbz	r0, 800c6a2 <_Vector3__get_serialized_size+0x2a>
 800c67a:	b510      	push	{r4, lr}
 800c67c:	2108      	movs	r1, #8
 800c67e:	2000      	movs	r0, #0
 800c680:	f001 fb5a 	bl	800dd38 <ucdr_alignment>
 800c684:	f100 0408 	add.w	r4, r0, #8
 800c688:	2108      	movs	r1, #8
 800c68a:	4620      	mov	r0, r4
 800c68c:	f001 fb54 	bl	800dd38 <ucdr_alignment>
 800c690:	3008      	adds	r0, #8
 800c692:	4404      	add	r4, r0
 800c694:	2108      	movs	r1, #8
 800c696:	4620      	mov	r0, r4
 800c698:	f001 fb4e 	bl	800dd38 <ucdr_alignment>
 800c69c:	3008      	adds	r0, #8
 800c69e:	4420      	add	r0, r4
 800c6a0:	bd10      	pop	{r4, pc}
 800c6a2:	4770      	bx	lr

0800c6a4 <_Vector3__max_serialized_size>:
 800c6a4:	b538      	push	{r3, r4, r5, lr}
 800c6a6:	2108      	movs	r1, #8
 800c6a8:	2000      	movs	r0, #0
 800c6aa:	f001 fb45 	bl	800dd38 <ucdr_alignment>
 800c6ae:	f100 0508 	add.w	r5, r0, #8
 800c6b2:	2108      	movs	r1, #8
 800c6b4:	4628      	mov	r0, r5
 800c6b6:	f001 fb3f 	bl	800dd38 <ucdr_alignment>
 800c6ba:	f100 0408 	add.w	r4, r0, #8
 800c6be:	442c      	add	r4, r5
 800c6c0:	2108      	movs	r1, #8
 800c6c2:	4620      	mov	r0, r4
 800c6c4:	f001 fb38 	bl	800dd38 <ucdr_alignment>
 800c6c8:	3008      	adds	r0, #8
 800c6ca:	4420      	add	r0, r4
 800c6cc:	bd38      	pop	{r3, r4, r5, pc}
 800c6ce:	bf00      	nop

0800c6d0 <max_serialized_size_geometry_msgs__msg__Vector3>:
 800c6d0:	b570      	push	{r4, r5, r6, lr}
 800c6d2:	2301      	movs	r3, #1
 800c6d4:	460c      	mov	r4, r1
 800c6d6:	7003      	strb	r3, [r0, #0]
 800c6d8:	2108      	movs	r1, #8
 800c6da:	4620      	mov	r0, r4
 800c6dc:	f001 fb2c 	bl	800dd38 <ucdr_alignment>
 800c6e0:	f104 0508 	add.w	r5, r4, #8
 800c6e4:	1946      	adds	r6, r0, r5
 800c6e6:	2108      	movs	r1, #8
 800c6e8:	4630      	mov	r0, r6
 800c6ea:	f001 fb25 	bl	800dd38 <ucdr_alignment>
 800c6ee:	f100 0508 	add.w	r5, r0, #8
 800c6f2:	4435      	add	r5, r6
 800c6f4:	2108      	movs	r1, #8
 800c6f6:	4628      	mov	r0, r5
 800c6f8:	f001 fb1e 	bl	800dd38 <ucdr_alignment>
 800c6fc:	f1c4 0408 	rsb	r4, r4, #8
 800c700:	4420      	add	r0, r4
 800c702:	4428      	add	r0, r5
 800c704:	bd70      	pop	{r4, r5, r6, pc}
 800c706:	bf00      	nop

0800c708 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>:
 800c708:	4800      	ldr	r0, [pc, #0]	@ (800c70c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x4>)
 800c70a:	4770      	bx	lr
 800c70c:	20000194 	.word	0x20000194

0800c710 <ucdr_serialize_bool>:
 800c710:	b538      	push	{r3, r4, r5, lr}
 800c712:	460d      	mov	r5, r1
 800c714:	2101      	movs	r1, #1
 800c716:	4604      	mov	r4, r0
 800c718:	f001 fac2 	bl	800dca0 <ucdr_check_final_buffer_behavior>
 800c71c:	b148      	cbz	r0, 800c732 <ucdr_serialize_bool+0x22>
 800c71e:	68a3      	ldr	r3, [r4, #8]
 800c720:	701d      	strb	r5, [r3, #0]
 800c722:	68a2      	ldr	r2, [r4, #8]
 800c724:	6923      	ldr	r3, [r4, #16]
 800c726:	2101      	movs	r1, #1
 800c728:	440a      	add	r2, r1
 800c72a:	440b      	add	r3, r1
 800c72c:	60a2      	str	r2, [r4, #8]
 800c72e:	6123      	str	r3, [r4, #16]
 800c730:	7561      	strb	r1, [r4, #21]
 800c732:	7da0      	ldrb	r0, [r4, #22]
 800c734:	f080 0001 	eor.w	r0, r0, #1
 800c738:	bd38      	pop	{r3, r4, r5, pc}
 800c73a:	bf00      	nop

0800c73c <ucdr_deserialize_bool>:
 800c73c:	b538      	push	{r3, r4, r5, lr}
 800c73e:	460d      	mov	r5, r1
 800c740:	2101      	movs	r1, #1
 800c742:	4604      	mov	r4, r0
 800c744:	f001 faac 	bl	800dca0 <ucdr_check_final_buffer_behavior>
 800c748:	b160      	cbz	r0, 800c764 <ucdr_deserialize_bool+0x28>
 800c74a:	68a2      	ldr	r2, [r4, #8]
 800c74c:	6923      	ldr	r3, [r4, #16]
 800c74e:	f812 1b01 	ldrb.w	r1, [r2], #1
 800c752:	3900      	subs	r1, #0
 800c754:	bf18      	it	ne
 800c756:	2101      	movne	r1, #1
 800c758:	7029      	strb	r1, [r5, #0]
 800c75a:	3301      	adds	r3, #1
 800c75c:	2101      	movs	r1, #1
 800c75e:	60a2      	str	r2, [r4, #8]
 800c760:	6123      	str	r3, [r4, #16]
 800c762:	7561      	strb	r1, [r4, #21]
 800c764:	7da0      	ldrb	r0, [r4, #22]
 800c766:	f080 0001 	eor.w	r0, r0, #1
 800c76a:	bd38      	pop	{r3, r4, r5, pc}

0800c76c <ucdr_serialize_uint8_t>:
 800c76c:	b538      	push	{r3, r4, r5, lr}
 800c76e:	460d      	mov	r5, r1
 800c770:	2101      	movs	r1, #1
 800c772:	4604      	mov	r4, r0
 800c774:	f001 fa94 	bl	800dca0 <ucdr_check_final_buffer_behavior>
 800c778:	b148      	cbz	r0, 800c78e <ucdr_serialize_uint8_t+0x22>
 800c77a:	68a3      	ldr	r3, [r4, #8]
 800c77c:	701d      	strb	r5, [r3, #0]
 800c77e:	68a2      	ldr	r2, [r4, #8]
 800c780:	6923      	ldr	r3, [r4, #16]
 800c782:	2101      	movs	r1, #1
 800c784:	440a      	add	r2, r1
 800c786:	440b      	add	r3, r1
 800c788:	60a2      	str	r2, [r4, #8]
 800c78a:	6123      	str	r3, [r4, #16]
 800c78c:	7561      	strb	r1, [r4, #21]
 800c78e:	7da0      	ldrb	r0, [r4, #22]
 800c790:	f080 0001 	eor.w	r0, r0, #1
 800c794:	bd38      	pop	{r3, r4, r5, pc}
 800c796:	bf00      	nop

0800c798 <ucdr_deserialize_uint8_t>:
 800c798:	b538      	push	{r3, r4, r5, lr}
 800c79a:	460d      	mov	r5, r1
 800c79c:	2101      	movs	r1, #1
 800c79e:	4604      	mov	r4, r0
 800c7a0:	f001 fa7e 	bl	800dca0 <ucdr_check_final_buffer_behavior>
 800c7a4:	b150      	cbz	r0, 800c7bc <ucdr_deserialize_uint8_t+0x24>
 800c7a6:	68a3      	ldr	r3, [r4, #8]
 800c7a8:	781b      	ldrb	r3, [r3, #0]
 800c7aa:	702b      	strb	r3, [r5, #0]
 800c7ac:	68a2      	ldr	r2, [r4, #8]
 800c7ae:	6923      	ldr	r3, [r4, #16]
 800c7b0:	2101      	movs	r1, #1
 800c7b2:	440a      	add	r2, r1
 800c7b4:	440b      	add	r3, r1
 800c7b6:	60a2      	str	r2, [r4, #8]
 800c7b8:	6123      	str	r3, [r4, #16]
 800c7ba:	7561      	strb	r1, [r4, #21]
 800c7bc:	7da0      	ldrb	r0, [r4, #22]
 800c7be:	f080 0001 	eor.w	r0, r0, #1
 800c7c2:	bd38      	pop	{r3, r4, r5, pc}

0800c7c4 <ucdr_serialize_uint16_t>:
 800c7c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c7c8:	b082      	sub	sp, #8
 800c7ca:	460b      	mov	r3, r1
 800c7cc:	2102      	movs	r1, #2
 800c7ce:	4604      	mov	r4, r0
 800c7d0:	f8ad 3006 	strh.w	r3, [sp, #6]
 800c7d4:	f001 fab8 	bl	800dd48 <ucdr_buffer_alignment>
 800c7d8:	4601      	mov	r1, r0
 800c7da:	4620      	mov	r0, r4
 800c7dc:	7d67      	ldrb	r7, [r4, #21]
 800c7de:	f001 faf7 	bl	800ddd0 <ucdr_advance_buffer>
 800c7e2:	2102      	movs	r1, #2
 800c7e4:	4620      	mov	r0, r4
 800c7e6:	f001 fa4f 	bl	800dc88 <ucdr_check_buffer_available_for>
 800c7ea:	bb78      	cbnz	r0, 800c84c <ucdr_serialize_uint16_t+0x88>
 800c7ec:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800c7f0:	42ab      	cmp	r3, r5
 800c7f2:	d926      	bls.n	800c842 <ucdr_serialize_uint16_t+0x7e>
 800c7f4:	1b5e      	subs	r6, r3, r5
 800c7f6:	60a3      	str	r3, [r4, #8]
 800c7f8:	6923      	ldr	r3, [r4, #16]
 800c7fa:	f1c6 0802 	rsb	r8, r6, #2
 800c7fe:	4433      	add	r3, r6
 800c800:	6123      	str	r3, [r4, #16]
 800c802:	4641      	mov	r1, r8
 800c804:	4620      	mov	r0, r4
 800c806:	f001 fa4b 	bl	800dca0 <ucdr_check_final_buffer_behavior>
 800c80a:	2800      	cmp	r0, #0
 800c80c:	d03b      	beq.n	800c886 <ucdr_serialize_uint16_t+0xc2>
 800c80e:	7d23      	ldrb	r3, [r4, #20]
 800c810:	2b01      	cmp	r3, #1
 800c812:	d04a      	beq.n	800c8aa <ucdr_serialize_uint16_t+0xe6>
 800c814:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800c818:	702b      	strb	r3, [r5, #0]
 800c81a:	2e00      	cmp	r6, #0
 800c81c:	d040      	beq.n	800c8a0 <ucdr_serialize_uint16_t+0xdc>
 800c81e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800c822:	706b      	strb	r3, [r5, #1]
 800c824:	6923      	ldr	r3, [r4, #16]
 800c826:	68a2      	ldr	r2, [r4, #8]
 800c828:	7da0      	ldrb	r0, [r4, #22]
 800c82a:	3302      	adds	r3, #2
 800c82c:	1b9e      	subs	r6, r3, r6
 800c82e:	4442      	add	r2, r8
 800c830:	2302      	movs	r3, #2
 800c832:	f080 0001 	eor.w	r0, r0, #1
 800c836:	60a2      	str	r2, [r4, #8]
 800c838:	6126      	str	r6, [r4, #16]
 800c83a:	7563      	strb	r3, [r4, #21]
 800c83c:	b002      	add	sp, #8
 800c83e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c842:	2102      	movs	r1, #2
 800c844:	4620      	mov	r0, r4
 800c846:	f001 fa2b 	bl	800dca0 <ucdr_check_final_buffer_behavior>
 800c84a:	b190      	cbz	r0, 800c872 <ucdr_serialize_uint16_t+0xae>
 800c84c:	7d23      	ldrb	r3, [r4, #20]
 800c84e:	2b01      	cmp	r3, #1
 800c850:	68a3      	ldr	r3, [r4, #8]
 800c852:	d014      	beq.n	800c87e <ucdr_serialize_uint16_t+0xba>
 800c854:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800c858:	701a      	strb	r2, [r3, #0]
 800c85a:	68a3      	ldr	r3, [r4, #8]
 800c85c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800c860:	705a      	strb	r2, [r3, #1]
 800c862:	68a2      	ldr	r2, [r4, #8]
 800c864:	6923      	ldr	r3, [r4, #16]
 800c866:	3202      	adds	r2, #2
 800c868:	3302      	adds	r3, #2
 800c86a:	2102      	movs	r1, #2
 800c86c:	60a2      	str	r2, [r4, #8]
 800c86e:	6123      	str	r3, [r4, #16]
 800c870:	7561      	strb	r1, [r4, #21]
 800c872:	7da0      	ldrb	r0, [r4, #22]
 800c874:	f080 0001 	eor.w	r0, r0, #1
 800c878:	b002      	add	sp, #8
 800c87a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c87e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800c882:	801a      	strh	r2, [r3, #0]
 800c884:	e7ed      	b.n	800c862 <ucdr_serialize_uint16_t+0x9e>
 800c886:	68a2      	ldr	r2, [r4, #8]
 800c888:	6923      	ldr	r3, [r4, #16]
 800c88a:	7da0      	ldrb	r0, [r4, #22]
 800c88c:	7567      	strb	r7, [r4, #21]
 800c88e:	1b92      	subs	r2, r2, r6
 800c890:	1b9b      	subs	r3, r3, r6
 800c892:	f080 0001 	eor.w	r0, r0, #1
 800c896:	60a2      	str	r2, [r4, #8]
 800c898:	6123      	str	r3, [r4, #16]
 800c89a:	b002      	add	sp, #8
 800c89c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c8a0:	68a3      	ldr	r3, [r4, #8]
 800c8a2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800c8a6:	701a      	strb	r2, [r3, #0]
 800c8a8:	e7bc      	b.n	800c824 <ucdr_serialize_uint16_t+0x60>
 800c8aa:	4628      	mov	r0, r5
 800c8ac:	f10d 0506 	add.w	r5, sp, #6
 800c8b0:	4629      	mov	r1, r5
 800c8b2:	4632      	mov	r2, r6
 800c8b4:	f00e fa1b 	bl	801acee <memcpy>
 800c8b8:	68a0      	ldr	r0, [r4, #8]
 800c8ba:	4642      	mov	r2, r8
 800c8bc:	19a9      	adds	r1, r5, r6
 800c8be:	f00e fa16 	bl	801acee <memcpy>
 800c8c2:	e7af      	b.n	800c824 <ucdr_serialize_uint16_t+0x60>

0800c8c4 <ucdr_serialize_endian_uint16_t>:
 800c8c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c8c8:	b083      	sub	sp, #12
 800c8ca:	460d      	mov	r5, r1
 800c8cc:	2102      	movs	r1, #2
 800c8ce:	4604      	mov	r4, r0
 800c8d0:	f8ad 2006 	strh.w	r2, [sp, #6]
 800c8d4:	f001 fa38 	bl	800dd48 <ucdr_buffer_alignment>
 800c8d8:	4601      	mov	r1, r0
 800c8da:	4620      	mov	r0, r4
 800c8dc:	f894 8015 	ldrb.w	r8, [r4, #21]
 800c8e0:	f001 fa76 	bl	800ddd0 <ucdr_advance_buffer>
 800c8e4:	2102      	movs	r1, #2
 800c8e6:	4620      	mov	r0, r4
 800c8e8:	f001 f9ce 	bl	800dc88 <ucdr_check_buffer_available_for>
 800c8ec:	bb70      	cbnz	r0, 800c94c <ucdr_serialize_endian_uint16_t+0x88>
 800c8ee:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800c8f2:	42be      	cmp	r6, r7
 800c8f4:	d925      	bls.n	800c942 <ucdr_serialize_endian_uint16_t+0x7e>
 800c8f6:	6923      	ldr	r3, [r4, #16]
 800c8f8:	60a6      	str	r6, [r4, #8]
 800c8fa:	1bf6      	subs	r6, r6, r7
 800c8fc:	4433      	add	r3, r6
 800c8fe:	f1c6 0902 	rsb	r9, r6, #2
 800c902:	6123      	str	r3, [r4, #16]
 800c904:	4649      	mov	r1, r9
 800c906:	4620      	mov	r0, r4
 800c908:	f001 f9ca 	bl	800dca0 <ucdr_check_final_buffer_behavior>
 800c90c:	2800      	cmp	r0, #0
 800c90e:	d039      	beq.n	800c984 <ucdr_serialize_endian_uint16_t+0xc0>
 800c910:	2d01      	cmp	r5, #1
 800c912:	d04a      	beq.n	800c9aa <ucdr_serialize_endian_uint16_t+0xe6>
 800c914:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800c918:	703b      	strb	r3, [r7, #0]
 800c91a:	2e00      	cmp	r6, #0
 800c91c:	d040      	beq.n	800c9a0 <ucdr_serialize_endian_uint16_t+0xdc>
 800c91e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800c922:	707b      	strb	r3, [r7, #1]
 800c924:	6923      	ldr	r3, [r4, #16]
 800c926:	68a2      	ldr	r2, [r4, #8]
 800c928:	7da0      	ldrb	r0, [r4, #22]
 800c92a:	3302      	adds	r3, #2
 800c92c:	444a      	add	r2, r9
 800c92e:	1b9b      	subs	r3, r3, r6
 800c930:	2102      	movs	r1, #2
 800c932:	f080 0001 	eor.w	r0, r0, #1
 800c936:	60a2      	str	r2, [r4, #8]
 800c938:	6123      	str	r3, [r4, #16]
 800c93a:	7561      	strb	r1, [r4, #21]
 800c93c:	b003      	add	sp, #12
 800c93e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c942:	2102      	movs	r1, #2
 800c944:	4620      	mov	r0, r4
 800c946:	f001 f9ab 	bl	800dca0 <ucdr_check_final_buffer_behavior>
 800c94a:	b188      	cbz	r0, 800c970 <ucdr_serialize_endian_uint16_t+0xac>
 800c94c:	2d01      	cmp	r5, #1
 800c94e:	68a3      	ldr	r3, [r4, #8]
 800c950:	d014      	beq.n	800c97c <ucdr_serialize_endian_uint16_t+0xb8>
 800c952:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800c956:	701a      	strb	r2, [r3, #0]
 800c958:	68a3      	ldr	r3, [r4, #8]
 800c95a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800c95e:	705a      	strb	r2, [r3, #1]
 800c960:	68a2      	ldr	r2, [r4, #8]
 800c962:	6923      	ldr	r3, [r4, #16]
 800c964:	3202      	adds	r2, #2
 800c966:	3302      	adds	r3, #2
 800c968:	2102      	movs	r1, #2
 800c96a:	60a2      	str	r2, [r4, #8]
 800c96c:	6123      	str	r3, [r4, #16]
 800c96e:	7561      	strb	r1, [r4, #21]
 800c970:	7da0      	ldrb	r0, [r4, #22]
 800c972:	f080 0001 	eor.w	r0, r0, #1
 800c976:	b003      	add	sp, #12
 800c978:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c97c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800c980:	801a      	strh	r2, [r3, #0]
 800c982:	e7ed      	b.n	800c960 <ucdr_serialize_endian_uint16_t+0x9c>
 800c984:	68a2      	ldr	r2, [r4, #8]
 800c986:	6923      	ldr	r3, [r4, #16]
 800c988:	7da0      	ldrb	r0, [r4, #22]
 800c98a:	f884 8015 	strb.w	r8, [r4, #21]
 800c98e:	1b92      	subs	r2, r2, r6
 800c990:	1b9b      	subs	r3, r3, r6
 800c992:	f080 0001 	eor.w	r0, r0, #1
 800c996:	60a2      	str	r2, [r4, #8]
 800c998:	6123      	str	r3, [r4, #16]
 800c99a:	b003      	add	sp, #12
 800c99c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c9a0:	68a3      	ldr	r3, [r4, #8]
 800c9a2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800c9a6:	701a      	strb	r2, [r3, #0]
 800c9a8:	e7bc      	b.n	800c924 <ucdr_serialize_endian_uint16_t+0x60>
 800c9aa:	f10d 0506 	add.w	r5, sp, #6
 800c9ae:	4629      	mov	r1, r5
 800c9b0:	4632      	mov	r2, r6
 800c9b2:	4638      	mov	r0, r7
 800c9b4:	f00e f99b 	bl	801acee <memcpy>
 800c9b8:	68a0      	ldr	r0, [r4, #8]
 800c9ba:	464a      	mov	r2, r9
 800c9bc:	19a9      	adds	r1, r5, r6
 800c9be:	f00e f996 	bl	801acee <memcpy>
 800c9c2:	e7af      	b.n	800c924 <ucdr_serialize_endian_uint16_t+0x60>

0800c9c4 <ucdr_deserialize_uint16_t>:
 800c9c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c9c8:	460d      	mov	r5, r1
 800c9ca:	2102      	movs	r1, #2
 800c9cc:	4604      	mov	r4, r0
 800c9ce:	f001 f9bb 	bl	800dd48 <ucdr_buffer_alignment>
 800c9d2:	4601      	mov	r1, r0
 800c9d4:	4620      	mov	r0, r4
 800c9d6:	f894 8015 	ldrb.w	r8, [r4, #21]
 800c9da:	f001 f9f9 	bl	800ddd0 <ucdr_advance_buffer>
 800c9de:	2102      	movs	r1, #2
 800c9e0:	4620      	mov	r0, r4
 800c9e2:	f001 f951 	bl	800dc88 <ucdr_check_buffer_available_for>
 800c9e6:	bb60      	cbnz	r0, 800ca42 <ucdr_deserialize_uint16_t+0x7e>
 800c9e8:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800c9ec:	42be      	cmp	r6, r7
 800c9ee:	d923      	bls.n	800ca38 <ucdr_deserialize_uint16_t+0x74>
 800c9f0:	6923      	ldr	r3, [r4, #16]
 800c9f2:	60a6      	str	r6, [r4, #8]
 800c9f4:	1bf6      	subs	r6, r6, r7
 800c9f6:	4433      	add	r3, r6
 800c9f8:	f1c6 0902 	rsb	r9, r6, #2
 800c9fc:	6123      	str	r3, [r4, #16]
 800c9fe:	4649      	mov	r1, r9
 800ca00:	4620      	mov	r0, r4
 800ca02:	f001 f94d 	bl	800dca0 <ucdr_check_final_buffer_behavior>
 800ca06:	2800      	cmp	r0, #0
 800ca08:	d034      	beq.n	800ca74 <ucdr_deserialize_uint16_t+0xb0>
 800ca0a:	7d23      	ldrb	r3, [r4, #20]
 800ca0c:	2b01      	cmp	r3, #1
 800ca0e:	d042      	beq.n	800ca96 <ucdr_deserialize_uint16_t+0xd2>
 800ca10:	787b      	ldrb	r3, [r7, #1]
 800ca12:	702b      	strb	r3, [r5, #0]
 800ca14:	2e00      	cmp	r6, #0
 800ca16:	d03a      	beq.n	800ca8e <ucdr_deserialize_uint16_t+0xca>
 800ca18:	783b      	ldrb	r3, [r7, #0]
 800ca1a:	706b      	strb	r3, [r5, #1]
 800ca1c:	6923      	ldr	r3, [r4, #16]
 800ca1e:	68a2      	ldr	r2, [r4, #8]
 800ca20:	7da0      	ldrb	r0, [r4, #22]
 800ca22:	2102      	movs	r1, #2
 800ca24:	3302      	adds	r3, #2
 800ca26:	444a      	add	r2, r9
 800ca28:	1b9b      	subs	r3, r3, r6
 800ca2a:	7561      	strb	r1, [r4, #21]
 800ca2c:	60a2      	str	r2, [r4, #8]
 800ca2e:	6123      	str	r3, [r4, #16]
 800ca30:	f080 0001 	eor.w	r0, r0, #1
 800ca34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ca38:	2102      	movs	r1, #2
 800ca3a:	4620      	mov	r0, r4
 800ca3c:	f001 f930 	bl	800dca0 <ucdr_check_final_buffer_behavior>
 800ca40:	b180      	cbz	r0, 800ca64 <ucdr_deserialize_uint16_t+0xa0>
 800ca42:	7d23      	ldrb	r3, [r4, #20]
 800ca44:	2b01      	cmp	r3, #1
 800ca46:	68a3      	ldr	r3, [r4, #8]
 800ca48:	d011      	beq.n	800ca6e <ucdr_deserialize_uint16_t+0xaa>
 800ca4a:	785b      	ldrb	r3, [r3, #1]
 800ca4c:	702b      	strb	r3, [r5, #0]
 800ca4e:	68a3      	ldr	r3, [r4, #8]
 800ca50:	781b      	ldrb	r3, [r3, #0]
 800ca52:	706b      	strb	r3, [r5, #1]
 800ca54:	68a2      	ldr	r2, [r4, #8]
 800ca56:	6923      	ldr	r3, [r4, #16]
 800ca58:	3202      	adds	r2, #2
 800ca5a:	3302      	adds	r3, #2
 800ca5c:	2102      	movs	r1, #2
 800ca5e:	60a2      	str	r2, [r4, #8]
 800ca60:	6123      	str	r3, [r4, #16]
 800ca62:	7561      	strb	r1, [r4, #21]
 800ca64:	7da0      	ldrb	r0, [r4, #22]
 800ca66:	f080 0001 	eor.w	r0, r0, #1
 800ca6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ca6e:	881b      	ldrh	r3, [r3, #0]
 800ca70:	802b      	strh	r3, [r5, #0]
 800ca72:	e7ef      	b.n	800ca54 <ucdr_deserialize_uint16_t+0x90>
 800ca74:	68a2      	ldr	r2, [r4, #8]
 800ca76:	6923      	ldr	r3, [r4, #16]
 800ca78:	7da0      	ldrb	r0, [r4, #22]
 800ca7a:	f884 8015 	strb.w	r8, [r4, #21]
 800ca7e:	1b92      	subs	r2, r2, r6
 800ca80:	1b9b      	subs	r3, r3, r6
 800ca82:	60a2      	str	r2, [r4, #8]
 800ca84:	6123      	str	r3, [r4, #16]
 800ca86:	f080 0001 	eor.w	r0, r0, #1
 800ca8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ca8e:	68a3      	ldr	r3, [r4, #8]
 800ca90:	781b      	ldrb	r3, [r3, #0]
 800ca92:	706b      	strb	r3, [r5, #1]
 800ca94:	e7c2      	b.n	800ca1c <ucdr_deserialize_uint16_t+0x58>
 800ca96:	4639      	mov	r1, r7
 800ca98:	4632      	mov	r2, r6
 800ca9a:	4628      	mov	r0, r5
 800ca9c:	f00e f927 	bl	801acee <memcpy>
 800caa0:	68a1      	ldr	r1, [r4, #8]
 800caa2:	464a      	mov	r2, r9
 800caa4:	19a8      	adds	r0, r5, r6
 800caa6:	f00e f922 	bl	801acee <memcpy>
 800caaa:	e7b7      	b.n	800ca1c <ucdr_deserialize_uint16_t+0x58>

0800caac <ucdr_deserialize_endian_uint16_t>:
 800caac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cab0:	460e      	mov	r6, r1
 800cab2:	2102      	movs	r1, #2
 800cab4:	4604      	mov	r4, r0
 800cab6:	4615      	mov	r5, r2
 800cab8:	f001 f946 	bl	800dd48 <ucdr_buffer_alignment>
 800cabc:	4601      	mov	r1, r0
 800cabe:	4620      	mov	r0, r4
 800cac0:	f894 9015 	ldrb.w	r9, [r4, #21]
 800cac4:	f001 f984 	bl	800ddd0 <ucdr_advance_buffer>
 800cac8:	2102      	movs	r1, #2
 800caca:	4620      	mov	r0, r4
 800cacc:	f001 f8dc 	bl	800dc88 <ucdr_check_buffer_available_for>
 800cad0:	bb70      	cbnz	r0, 800cb30 <ucdr_deserialize_endian_uint16_t+0x84>
 800cad2:	e9d4 7801 	ldrd	r7, r8, [r4, #4]
 800cad6:	4547      	cmp	r7, r8
 800cad8:	d925      	bls.n	800cb26 <ucdr_deserialize_endian_uint16_t+0x7a>
 800cada:	6923      	ldr	r3, [r4, #16]
 800cadc:	60a7      	str	r7, [r4, #8]
 800cade:	eba7 0708 	sub.w	r7, r7, r8
 800cae2:	443b      	add	r3, r7
 800cae4:	f1c7 0a02 	rsb	sl, r7, #2
 800cae8:	6123      	str	r3, [r4, #16]
 800caea:	4651      	mov	r1, sl
 800caec:	4620      	mov	r0, r4
 800caee:	f001 f8d7 	bl	800dca0 <ucdr_check_final_buffer_behavior>
 800caf2:	2800      	cmp	r0, #0
 800caf4:	d034      	beq.n	800cb60 <ucdr_deserialize_endian_uint16_t+0xb4>
 800caf6:	2e01      	cmp	r6, #1
 800caf8:	d043      	beq.n	800cb82 <ucdr_deserialize_endian_uint16_t+0xd6>
 800cafa:	f898 3001 	ldrb.w	r3, [r8, #1]
 800cafe:	702b      	strb	r3, [r5, #0]
 800cb00:	2f00      	cmp	r7, #0
 800cb02:	d03a      	beq.n	800cb7a <ucdr_deserialize_endian_uint16_t+0xce>
 800cb04:	f898 3000 	ldrb.w	r3, [r8]
 800cb08:	706b      	strb	r3, [r5, #1]
 800cb0a:	6923      	ldr	r3, [r4, #16]
 800cb0c:	68a2      	ldr	r2, [r4, #8]
 800cb0e:	7da0      	ldrb	r0, [r4, #22]
 800cb10:	2102      	movs	r1, #2
 800cb12:	3302      	adds	r3, #2
 800cb14:	4452      	add	r2, sl
 800cb16:	1bdb      	subs	r3, r3, r7
 800cb18:	7561      	strb	r1, [r4, #21]
 800cb1a:	60a2      	str	r2, [r4, #8]
 800cb1c:	6123      	str	r3, [r4, #16]
 800cb1e:	f080 0001 	eor.w	r0, r0, #1
 800cb22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cb26:	2102      	movs	r1, #2
 800cb28:	4620      	mov	r0, r4
 800cb2a:	f001 f8b9 	bl	800dca0 <ucdr_check_final_buffer_behavior>
 800cb2e:	b178      	cbz	r0, 800cb50 <ucdr_deserialize_endian_uint16_t+0xa4>
 800cb30:	2e01      	cmp	r6, #1
 800cb32:	68a3      	ldr	r3, [r4, #8]
 800cb34:	d011      	beq.n	800cb5a <ucdr_deserialize_endian_uint16_t+0xae>
 800cb36:	785b      	ldrb	r3, [r3, #1]
 800cb38:	702b      	strb	r3, [r5, #0]
 800cb3a:	68a3      	ldr	r3, [r4, #8]
 800cb3c:	781b      	ldrb	r3, [r3, #0]
 800cb3e:	706b      	strb	r3, [r5, #1]
 800cb40:	68a2      	ldr	r2, [r4, #8]
 800cb42:	6923      	ldr	r3, [r4, #16]
 800cb44:	3202      	adds	r2, #2
 800cb46:	3302      	adds	r3, #2
 800cb48:	2102      	movs	r1, #2
 800cb4a:	60a2      	str	r2, [r4, #8]
 800cb4c:	6123      	str	r3, [r4, #16]
 800cb4e:	7561      	strb	r1, [r4, #21]
 800cb50:	7da0      	ldrb	r0, [r4, #22]
 800cb52:	f080 0001 	eor.w	r0, r0, #1
 800cb56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cb5a:	881b      	ldrh	r3, [r3, #0]
 800cb5c:	802b      	strh	r3, [r5, #0]
 800cb5e:	e7ef      	b.n	800cb40 <ucdr_deserialize_endian_uint16_t+0x94>
 800cb60:	68a2      	ldr	r2, [r4, #8]
 800cb62:	6923      	ldr	r3, [r4, #16]
 800cb64:	7da0      	ldrb	r0, [r4, #22]
 800cb66:	f884 9015 	strb.w	r9, [r4, #21]
 800cb6a:	1bd2      	subs	r2, r2, r7
 800cb6c:	1bdb      	subs	r3, r3, r7
 800cb6e:	60a2      	str	r2, [r4, #8]
 800cb70:	6123      	str	r3, [r4, #16]
 800cb72:	f080 0001 	eor.w	r0, r0, #1
 800cb76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cb7a:	68a3      	ldr	r3, [r4, #8]
 800cb7c:	781b      	ldrb	r3, [r3, #0]
 800cb7e:	706b      	strb	r3, [r5, #1]
 800cb80:	e7c3      	b.n	800cb0a <ucdr_deserialize_endian_uint16_t+0x5e>
 800cb82:	4641      	mov	r1, r8
 800cb84:	463a      	mov	r2, r7
 800cb86:	4628      	mov	r0, r5
 800cb88:	f00e f8b1 	bl	801acee <memcpy>
 800cb8c:	68a1      	ldr	r1, [r4, #8]
 800cb8e:	4652      	mov	r2, sl
 800cb90:	19e8      	adds	r0, r5, r7
 800cb92:	f00e f8ac 	bl	801acee <memcpy>
 800cb96:	e7b8      	b.n	800cb0a <ucdr_deserialize_endian_uint16_t+0x5e>

0800cb98 <ucdr_serialize_uint32_t>:
 800cb98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb9c:	b082      	sub	sp, #8
 800cb9e:	4604      	mov	r4, r0
 800cba0:	9101      	str	r1, [sp, #4]
 800cba2:	2104      	movs	r1, #4
 800cba4:	f001 f8d0 	bl	800dd48 <ucdr_buffer_alignment>
 800cba8:	4601      	mov	r1, r0
 800cbaa:	4620      	mov	r0, r4
 800cbac:	7d67      	ldrb	r7, [r4, #21]
 800cbae:	f001 f90f 	bl	800ddd0 <ucdr_advance_buffer>
 800cbb2:	2104      	movs	r1, #4
 800cbb4:	4620      	mov	r0, r4
 800cbb6:	f001 f867 	bl	800dc88 <ucdr_check_buffer_available_for>
 800cbba:	2800      	cmp	r0, #0
 800cbbc:	d139      	bne.n	800cc32 <ucdr_serialize_uint32_t+0x9a>
 800cbbe:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800cbc2:	42ab      	cmp	r3, r5
 800cbc4:	d930      	bls.n	800cc28 <ucdr_serialize_uint32_t+0x90>
 800cbc6:	1b5e      	subs	r6, r3, r5
 800cbc8:	60a3      	str	r3, [r4, #8]
 800cbca:	6923      	ldr	r3, [r4, #16]
 800cbcc:	f1c6 0804 	rsb	r8, r6, #4
 800cbd0:	4433      	add	r3, r6
 800cbd2:	6123      	str	r3, [r4, #16]
 800cbd4:	4641      	mov	r1, r8
 800cbd6:	4620      	mov	r0, r4
 800cbd8:	f001 f862 	bl	800dca0 <ucdr_check_final_buffer_behavior>
 800cbdc:	2800      	cmp	r0, #0
 800cbde:	d04c      	beq.n	800cc7a <ucdr_serialize_uint32_t+0xe2>
 800cbe0:	7d23      	ldrb	r3, [r4, #20]
 800cbe2:	2b01      	cmp	r3, #1
 800cbe4:	d063      	beq.n	800ccae <ucdr_serialize_uint32_t+0x116>
 800cbe6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800cbea:	702b      	strb	r3, [r5, #0]
 800cbec:	2e00      	cmp	r6, #0
 800cbee:	d051      	beq.n	800cc94 <ucdr_serialize_uint32_t+0xfc>
 800cbf0:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800cbf4:	706b      	strb	r3, [r5, #1]
 800cbf6:	2e01      	cmp	r6, #1
 800cbf8:	d050      	beq.n	800cc9c <ucdr_serialize_uint32_t+0x104>
 800cbfa:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800cbfe:	70ab      	strb	r3, [r5, #2]
 800cc00:	2e02      	cmp	r6, #2
 800cc02:	d04f      	beq.n	800cca4 <ucdr_serialize_uint32_t+0x10c>
 800cc04:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800cc08:	70eb      	strb	r3, [r5, #3]
 800cc0a:	6923      	ldr	r3, [r4, #16]
 800cc0c:	68a2      	ldr	r2, [r4, #8]
 800cc0e:	7da0      	ldrb	r0, [r4, #22]
 800cc10:	3304      	adds	r3, #4
 800cc12:	1b9e      	subs	r6, r3, r6
 800cc14:	4442      	add	r2, r8
 800cc16:	2304      	movs	r3, #4
 800cc18:	f080 0001 	eor.w	r0, r0, #1
 800cc1c:	60a2      	str	r2, [r4, #8]
 800cc1e:	6126      	str	r6, [r4, #16]
 800cc20:	7563      	strb	r3, [r4, #21]
 800cc22:	b002      	add	sp, #8
 800cc24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc28:	2104      	movs	r1, #4
 800cc2a:	4620      	mov	r0, r4
 800cc2c:	f001 f838 	bl	800dca0 <ucdr_check_final_buffer_behavior>
 800cc30:	b1d0      	cbz	r0, 800cc68 <ucdr_serialize_uint32_t+0xd0>
 800cc32:	7d23      	ldrb	r3, [r4, #20]
 800cc34:	2b01      	cmp	r3, #1
 800cc36:	68a3      	ldr	r3, [r4, #8]
 800cc38:	d01c      	beq.n	800cc74 <ucdr_serialize_uint32_t+0xdc>
 800cc3a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800cc3e:	701a      	strb	r2, [r3, #0]
 800cc40:	68a3      	ldr	r3, [r4, #8]
 800cc42:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800cc46:	705a      	strb	r2, [r3, #1]
 800cc48:	68a3      	ldr	r3, [r4, #8]
 800cc4a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800cc4e:	709a      	strb	r2, [r3, #2]
 800cc50:	68a3      	ldr	r3, [r4, #8]
 800cc52:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800cc56:	70da      	strb	r2, [r3, #3]
 800cc58:	68a2      	ldr	r2, [r4, #8]
 800cc5a:	6923      	ldr	r3, [r4, #16]
 800cc5c:	3204      	adds	r2, #4
 800cc5e:	3304      	adds	r3, #4
 800cc60:	2104      	movs	r1, #4
 800cc62:	60a2      	str	r2, [r4, #8]
 800cc64:	6123      	str	r3, [r4, #16]
 800cc66:	7561      	strb	r1, [r4, #21]
 800cc68:	7da0      	ldrb	r0, [r4, #22]
 800cc6a:	f080 0001 	eor.w	r0, r0, #1
 800cc6e:	b002      	add	sp, #8
 800cc70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc74:	9a01      	ldr	r2, [sp, #4]
 800cc76:	601a      	str	r2, [r3, #0]
 800cc78:	e7ee      	b.n	800cc58 <ucdr_serialize_uint32_t+0xc0>
 800cc7a:	68a2      	ldr	r2, [r4, #8]
 800cc7c:	6923      	ldr	r3, [r4, #16]
 800cc7e:	7da0      	ldrb	r0, [r4, #22]
 800cc80:	7567      	strb	r7, [r4, #21]
 800cc82:	1b92      	subs	r2, r2, r6
 800cc84:	1b9b      	subs	r3, r3, r6
 800cc86:	f080 0001 	eor.w	r0, r0, #1
 800cc8a:	60a2      	str	r2, [r4, #8]
 800cc8c:	6123      	str	r3, [r4, #16]
 800cc8e:	b002      	add	sp, #8
 800cc90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc94:	68a3      	ldr	r3, [r4, #8]
 800cc96:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800cc9a:	701a      	strb	r2, [r3, #0]
 800cc9c:	68a3      	ldr	r3, [r4, #8]
 800cc9e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800cca2:	701a      	strb	r2, [r3, #0]
 800cca4:	68a3      	ldr	r3, [r4, #8]
 800cca6:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800ccaa:	701a      	strb	r2, [r3, #0]
 800ccac:	e7ad      	b.n	800cc0a <ucdr_serialize_uint32_t+0x72>
 800ccae:	4628      	mov	r0, r5
 800ccb0:	ad01      	add	r5, sp, #4
 800ccb2:	4629      	mov	r1, r5
 800ccb4:	4632      	mov	r2, r6
 800ccb6:	f00e f81a 	bl	801acee <memcpy>
 800ccba:	68a0      	ldr	r0, [r4, #8]
 800ccbc:	4642      	mov	r2, r8
 800ccbe:	19a9      	adds	r1, r5, r6
 800ccc0:	f00e f815 	bl	801acee <memcpy>
 800ccc4:	e7a1      	b.n	800cc0a <ucdr_serialize_uint32_t+0x72>
 800ccc6:	bf00      	nop

0800ccc8 <ucdr_serialize_endian_uint32_t>:
 800ccc8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cccc:	b083      	sub	sp, #12
 800ccce:	460d      	mov	r5, r1
 800ccd0:	2104      	movs	r1, #4
 800ccd2:	4604      	mov	r4, r0
 800ccd4:	9201      	str	r2, [sp, #4]
 800ccd6:	f001 f837 	bl	800dd48 <ucdr_buffer_alignment>
 800ccda:	4601      	mov	r1, r0
 800ccdc:	4620      	mov	r0, r4
 800ccde:	f894 8015 	ldrb.w	r8, [r4, #21]
 800cce2:	f001 f875 	bl	800ddd0 <ucdr_advance_buffer>
 800cce6:	2104      	movs	r1, #4
 800cce8:	4620      	mov	r0, r4
 800ccea:	f000 ffcd 	bl	800dc88 <ucdr_check_buffer_available_for>
 800ccee:	2800      	cmp	r0, #0
 800ccf0:	d138      	bne.n	800cd64 <ucdr_serialize_endian_uint32_t+0x9c>
 800ccf2:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800ccf6:	42b7      	cmp	r7, r6
 800ccf8:	d92f      	bls.n	800cd5a <ucdr_serialize_endian_uint32_t+0x92>
 800ccfa:	6923      	ldr	r3, [r4, #16]
 800ccfc:	60a7      	str	r7, [r4, #8]
 800ccfe:	1bbf      	subs	r7, r7, r6
 800cd00:	443b      	add	r3, r7
 800cd02:	f1c7 0904 	rsb	r9, r7, #4
 800cd06:	6123      	str	r3, [r4, #16]
 800cd08:	4649      	mov	r1, r9
 800cd0a:	4620      	mov	r0, r4
 800cd0c:	f000 ffc8 	bl	800dca0 <ucdr_check_final_buffer_behavior>
 800cd10:	2800      	cmp	r0, #0
 800cd12:	d04a      	beq.n	800cdaa <ucdr_serialize_endian_uint32_t+0xe2>
 800cd14:	2d01      	cmp	r5, #1
 800cd16:	d063      	beq.n	800cde0 <ucdr_serialize_endian_uint32_t+0x118>
 800cd18:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800cd1c:	7033      	strb	r3, [r6, #0]
 800cd1e:	2f00      	cmp	r7, #0
 800cd20:	d051      	beq.n	800cdc6 <ucdr_serialize_endian_uint32_t+0xfe>
 800cd22:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800cd26:	7073      	strb	r3, [r6, #1]
 800cd28:	2f01      	cmp	r7, #1
 800cd2a:	d050      	beq.n	800cdce <ucdr_serialize_endian_uint32_t+0x106>
 800cd2c:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800cd30:	70b3      	strb	r3, [r6, #2]
 800cd32:	2f02      	cmp	r7, #2
 800cd34:	d04f      	beq.n	800cdd6 <ucdr_serialize_endian_uint32_t+0x10e>
 800cd36:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800cd3a:	70f3      	strb	r3, [r6, #3]
 800cd3c:	6923      	ldr	r3, [r4, #16]
 800cd3e:	68a2      	ldr	r2, [r4, #8]
 800cd40:	7da0      	ldrb	r0, [r4, #22]
 800cd42:	3304      	adds	r3, #4
 800cd44:	444a      	add	r2, r9
 800cd46:	1bdb      	subs	r3, r3, r7
 800cd48:	2104      	movs	r1, #4
 800cd4a:	f080 0001 	eor.w	r0, r0, #1
 800cd4e:	60a2      	str	r2, [r4, #8]
 800cd50:	6123      	str	r3, [r4, #16]
 800cd52:	7561      	strb	r1, [r4, #21]
 800cd54:	b003      	add	sp, #12
 800cd56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cd5a:	2104      	movs	r1, #4
 800cd5c:	4620      	mov	r0, r4
 800cd5e:	f000 ff9f 	bl	800dca0 <ucdr_check_final_buffer_behavior>
 800cd62:	b1c8      	cbz	r0, 800cd98 <ucdr_serialize_endian_uint32_t+0xd0>
 800cd64:	2d01      	cmp	r5, #1
 800cd66:	68a3      	ldr	r3, [r4, #8]
 800cd68:	d01c      	beq.n	800cda4 <ucdr_serialize_endian_uint32_t+0xdc>
 800cd6a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800cd6e:	701a      	strb	r2, [r3, #0]
 800cd70:	68a3      	ldr	r3, [r4, #8]
 800cd72:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800cd76:	705a      	strb	r2, [r3, #1]
 800cd78:	68a3      	ldr	r3, [r4, #8]
 800cd7a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800cd7e:	709a      	strb	r2, [r3, #2]
 800cd80:	68a3      	ldr	r3, [r4, #8]
 800cd82:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800cd86:	70da      	strb	r2, [r3, #3]
 800cd88:	68a2      	ldr	r2, [r4, #8]
 800cd8a:	6923      	ldr	r3, [r4, #16]
 800cd8c:	3204      	adds	r2, #4
 800cd8e:	3304      	adds	r3, #4
 800cd90:	2104      	movs	r1, #4
 800cd92:	60a2      	str	r2, [r4, #8]
 800cd94:	6123      	str	r3, [r4, #16]
 800cd96:	7561      	strb	r1, [r4, #21]
 800cd98:	7da0      	ldrb	r0, [r4, #22]
 800cd9a:	f080 0001 	eor.w	r0, r0, #1
 800cd9e:	b003      	add	sp, #12
 800cda0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cda4:	9a01      	ldr	r2, [sp, #4]
 800cda6:	601a      	str	r2, [r3, #0]
 800cda8:	e7ee      	b.n	800cd88 <ucdr_serialize_endian_uint32_t+0xc0>
 800cdaa:	68a2      	ldr	r2, [r4, #8]
 800cdac:	6923      	ldr	r3, [r4, #16]
 800cdae:	7da0      	ldrb	r0, [r4, #22]
 800cdb0:	f884 8015 	strb.w	r8, [r4, #21]
 800cdb4:	1bd2      	subs	r2, r2, r7
 800cdb6:	1bdb      	subs	r3, r3, r7
 800cdb8:	f080 0001 	eor.w	r0, r0, #1
 800cdbc:	60a2      	str	r2, [r4, #8]
 800cdbe:	6123      	str	r3, [r4, #16]
 800cdc0:	b003      	add	sp, #12
 800cdc2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cdc6:	68a3      	ldr	r3, [r4, #8]
 800cdc8:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800cdcc:	701a      	strb	r2, [r3, #0]
 800cdce:	68a3      	ldr	r3, [r4, #8]
 800cdd0:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800cdd4:	701a      	strb	r2, [r3, #0]
 800cdd6:	68a3      	ldr	r3, [r4, #8]
 800cdd8:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800cddc:	701a      	strb	r2, [r3, #0]
 800cdde:	e7ad      	b.n	800cd3c <ucdr_serialize_endian_uint32_t+0x74>
 800cde0:	ad01      	add	r5, sp, #4
 800cde2:	4629      	mov	r1, r5
 800cde4:	463a      	mov	r2, r7
 800cde6:	4630      	mov	r0, r6
 800cde8:	f00d ff81 	bl	801acee <memcpy>
 800cdec:	68a0      	ldr	r0, [r4, #8]
 800cdee:	464a      	mov	r2, r9
 800cdf0:	19e9      	adds	r1, r5, r7
 800cdf2:	f00d ff7c 	bl	801acee <memcpy>
 800cdf6:	e7a1      	b.n	800cd3c <ucdr_serialize_endian_uint32_t+0x74>

0800cdf8 <ucdr_deserialize_uint32_t>:
 800cdf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cdfc:	460d      	mov	r5, r1
 800cdfe:	2104      	movs	r1, #4
 800ce00:	4604      	mov	r4, r0
 800ce02:	f000 ffa1 	bl	800dd48 <ucdr_buffer_alignment>
 800ce06:	4601      	mov	r1, r0
 800ce08:	4620      	mov	r0, r4
 800ce0a:	f894 8015 	ldrb.w	r8, [r4, #21]
 800ce0e:	f000 ffdf 	bl	800ddd0 <ucdr_advance_buffer>
 800ce12:	2104      	movs	r1, #4
 800ce14:	4620      	mov	r0, r4
 800ce16:	f000 ff37 	bl	800dc88 <ucdr_check_buffer_available_for>
 800ce1a:	2800      	cmp	r0, #0
 800ce1c:	d138      	bne.n	800ce90 <ucdr_deserialize_uint32_t+0x98>
 800ce1e:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800ce22:	42b7      	cmp	r7, r6
 800ce24:	d92f      	bls.n	800ce86 <ucdr_deserialize_uint32_t+0x8e>
 800ce26:	6923      	ldr	r3, [r4, #16]
 800ce28:	60a7      	str	r7, [r4, #8]
 800ce2a:	1bbf      	subs	r7, r7, r6
 800ce2c:	443b      	add	r3, r7
 800ce2e:	f1c7 0904 	rsb	r9, r7, #4
 800ce32:	6123      	str	r3, [r4, #16]
 800ce34:	4649      	mov	r1, r9
 800ce36:	4620      	mov	r0, r4
 800ce38:	f000 ff32 	bl	800dca0 <ucdr_check_final_buffer_behavior>
 800ce3c:	2800      	cmp	r0, #0
 800ce3e:	d046      	beq.n	800cece <ucdr_deserialize_uint32_t+0xd6>
 800ce40:	7d23      	ldrb	r3, [r4, #20]
 800ce42:	2b01      	cmp	r3, #1
 800ce44:	d05c      	beq.n	800cf00 <ucdr_deserialize_uint32_t+0x108>
 800ce46:	78f3      	ldrb	r3, [r6, #3]
 800ce48:	702b      	strb	r3, [r5, #0]
 800ce4a:	2f00      	cmp	r7, #0
 800ce4c:	d04c      	beq.n	800cee8 <ucdr_deserialize_uint32_t+0xf0>
 800ce4e:	78b3      	ldrb	r3, [r6, #2]
 800ce50:	706b      	strb	r3, [r5, #1]
 800ce52:	2f01      	cmp	r7, #1
 800ce54:	f105 0302 	add.w	r3, r5, #2
 800ce58:	d04a      	beq.n	800cef0 <ucdr_deserialize_uint32_t+0xf8>
 800ce5a:	7873      	ldrb	r3, [r6, #1]
 800ce5c:	70ab      	strb	r3, [r5, #2]
 800ce5e:	2f02      	cmp	r7, #2
 800ce60:	f105 0303 	add.w	r3, r5, #3
 800ce64:	d048      	beq.n	800cef8 <ucdr_deserialize_uint32_t+0x100>
 800ce66:	7833      	ldrb	r3, [r6, #0]
 800ce68:	70eb      	strb	r3, [r5, #3]
 800ce6a:	6923      	ldr	r3, [r4, #16]
 800ce6c:	68a2      	ldr	r2, [r4, #8]
 800ce6e:	7da0      	ldrb	r0, [r4, #22]
 800ce70:	2104      	movs	r1, #4
 800ce72:	3304      	adds	r3, #4
 800ce74:	444a      	add	r2, r9
 800ce76:	1bdb      	subs	r3, r3, r7
 800ce78:	7561      	strb	r1, [r4, #21]
 800ce7a:	60a2      	str	r2, [r4, #8]
 800ce7c:	6123      	str	r3, [r4, #16]
 800ce7e:	f080 0001 	eor.w	r0, r0, #1
 800ce82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ce86:	2104      	movs	r1, #4
 800ce88:	4620      	mov	r0, r4
 800ce8a:	f000 ff09 	bl	800dca0 <ucdr_check_final_buffer_behavior>
 800ce8e:	b1b0      	cbz	r0, 800cebe <ucdr_deserialize_uint32_t+0xc6>
 800ce90:	7d23      	ldrb	r3, [r4, #20]
 800ce92:	2b01      	cmp	r3, #1
 800ce94:	68a3      	ldr	r3, [r4, #8]
 800ce96:	d017      	beq.n	800cec8 <ucdr_deserialize_uint32_t+0xd0>
 800ce98:	78db      	ldrb	r3, [r3, #3]
 800ce9a:	702b      	strb	r3, [r5, #0]
 800ce9c:	68a3      	ldr	r3, [r4, #8]
 800ce9e:	789b      	ldrb	r3, [r3, #2]
 800cea0:	706b      	strb	r3, [r5, #1]
 800cea2:	68a3      	ldr	r3, [r4, #8]
 800cea4:	785b      	ldrb	r3, [r3, #1]
 800cea6:	70ab      	strb	r3, [r5, #2]
 800cea8:	68a3      	ldr	r3, [r4, #8]
 800ceaa:	781b      	ldrb	r3, [r3, #0]
 800ceac:	70eb      	strb	r3, [r5, #3]
 800ceae:	68a2      	ldr	r2, [r4, #8]
 800ceb0:	6923      	ldr	r3, [r4, #16]
 800ceb2:	3204      	adds	r2, #4
 800ceb4:	3304      	adds	r3, #4
 800ceb6:	2104      	movs	r1, #4
 800ceb8:	60a2      	str	r2, [r4, #8]
 800ceba:	6123      	str	r3, [r4, #16]
 800cebc:	7561      	strb	r1, [r4, #21]
 800cebe:	7da0      	ldrb	r0, [r4, #22]
 800cec0:	f080 0001 	eor.w	r0, r0, #1
 800cec4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cec8:	681b      	ldr	r3, [r3, #0]
 800ceca:	602b      	str	r3, [r5, #0]
 800cecc:	e7ef      	b.n	800ceae <ucdr_deserialize_uint32_t+0xb6>
 800cece:	68a2      	ldr	r2, [r4, #8]
 800ced0:	6923      	ldr	r3, [r4, #16]
 800ced2:	7da0      	ldrb	r0, [r4, #22]
 800ced4:	f884 8015 	strb.w	r8, [r4, #21]
 800ced8:	1bd2      	subs	r2, r2, r7
 800ceda:	1bdb      	subs	r3, r3, r7
 800cedc:	60a2      	str	r2, [r4, #8]
 800cede:	6123      	str	r3, [r4, #16]
 800cee0:	f080 0001 	eor.w	r0, r0, #1
 800cee4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cee8:	68a3      	ldr	r3, [r4, #8]
 800ceea:	789b      	ldrb	r3, [r3, #2]
 800ceec:	706b      	strb	r3, [r5, #1]
 800ceee:	1cab      	adds	r3, r5, #2
 800cef0:	68a2      	ldr	r2, [r4, #8]
 800cef2:	7852      	ldrb	r2, [r2, #1]
 800cef4:	f803 2b01 	strb.w	r2, [r3], #1
 800cef8:	68a2      	ldr	r2, [r4, #8]
 800cefa:	7812      	ldrb	r2, [r2, #0]
 800cefc:	701a      	strb	r2, [r3, #0]
 800cefe:	e7b4      	b.n	800ce6a <ucdr_deserialize_uint32_t+0x72>
 800cf00:	4631      	mov	r1, r6
 800cf02:	463a      	mov	r2, r7
 800cf04:	4628      	mov	r0, r5
 800cf06:	f00d fef2 	bl	801acee <memcpy>
 800cf0a:	68a1      	ldr	r1, [r4, #8]
 800cf0c:	464a      	mov	r2, r9
 800cf0e:	19e8      	adds	r0, r5, r7
 800cf10:	f00d feed 	bl	801acee <memcpy>
 800cf14:	e7a9      	b.n	800ce6a <ucdr_deserialize_uint32_t+0x72>
 800cf16:	bf00      	nop

0800cf18 <ucdr_deserialize_endian_uint32_t>:
 800cf18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cf1c:	460e      	mov	r6, r1
 800cf1e:	2104      	movs	r1, #4
 800cf20:	4604      	mov	r4, r0
 800cf22:	4615      	mov	r5, r2
 800cf24:	f000 ff10 	bl	800dd48 <ucdr_buffer_alignment>
 800cf28:	4601      	mov	r1, r0
 800cf2a:	4620      	mov	r0, r4
 800cf2c:	f894 9015 	ldrb.w	r9, [r4, #21]
 800cf30:	f000 ff4e 	bl	800ddd0 <ucdr_advance_buffer>
 800cf34:	2104      	movs	r1, #4
 800cf36:	4620      	mov	r0, r4
 800cf38:	f000 fea6 	bl	800dc88 <ucdr_check_buffer_available_for>
 800cf3c:	2800      	cmp	r0, #0
 800cf3e:	d13c      	bne.n	800cfba <ucdr_deserialize_endian_uint32_t+0xa2>
 800cf40:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 800cf44:	42bb      	cmp	r3, r7
 800cf46:	d933      	bls.n	800cfb0 <ucdr_deserialize_endian_uint32_t+0x98>
 800cf48:	eba3 0807 	sub.w	r8, r3, r7
 800cf4c:	60a3      	str	r3, [r4, #8]
 800cf4e:	6923      	ldr	r3, [r4, #16]
 800cf50:	f1c8 0a04 	rsb	sl, r8, #4
 800cf54:	4443      	add	r3, r8
 800cf56:	6123      	str	r3, [r4, #16]
 800cf58:	4651      	mov	r1, sl
 800cf5a:	4620      	mov	r0, r4
 800cf5c:	f000 fea0 	bl	800dca0 <ucdr_check_final_buffer_behavior>
 800cf60:	2800      	cmp	r0, #0
 800cf62:	d048      	beq.n	800cff6 <ucdr_deserialize_endian_uint32_t+0xde>
 800cf64:	2e01      	cmp	r6, #1
 800cf66:	d061      	beq.n	800d02c <ucdr_deserialize_endian_uint32_t+0x114>
 800cf68:	78fb      	ldrb	r3, [r7, #3]
 800cf6a:	702b      	strb	r3, [r5, #0]
 800cf6c:	f1b8 0f00 	cmp.w	r8, #0
 800cf70:	d050      	beq.n	800d014 <ucdr_deserialize_endian_uint32_t+0xfc>
 800cf72:	78bb      	ldrb	r3, [r7, #2]
 800cf74:	706b      	strb	r3, [r5, #1]
 800cf76:	f1b8 0f01 	cmp.w	r8, #1
 800cf7a:	f105 0302 	add.w	r3, r5, #2
 800cf7e:	d04d      	beq.n	800d01c <ucdr_deserialize_endian_uint32_t+0x104>
 800cf80:	787b      	ldrb	r3, [r7, #1]
 800cf82:	70ab      	strb	r3, [r5, #2]
 800cf84:	f1b8 0f02 	cmp.w	r8, #2
 800cf88:	f105 0303 	add.w	r3, r5, #3
 800cf8c:	d04a      	beq.n	800d024 <ucdr_deserialize_endian_uint32_t+0x10c>
 800cf8e:	783b      	ldrb	r3, [r7, #0]
 800cf90:	70eb      	strb	r3, [r5, #3]
 800cf92:	6923      	ldr	r3, [r4, #16]
 800cf94:	68a2      	ldr	r2, [r4, #8]
 800cf96:	7da0      	ldrb	r0, [r4, #22]
 800cf98:	2104      	movs	r1, #4
 800cf9a:	3304      	adds	r3, #4
 800cf9c:	4452      	add	r2, sl
 800cf9e:	eba3 0308 	sub.w	r3, r3, r8
 800cfa2:	7561      	strb	r1, [r4, #21]
 800cfa4:	60a2      	str	r2, [r4, #8]
 800cfa6:	6123      	str	r3, [r4, #16]
 800cfa8:	f080 0001 	eor.w	r0, r0, #1
 800cfac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cfb0:	2104      	movs	r1, #4
 800cfb2:	4620      	mov	r0, r4
 800cfb4:	f000 fe74 	bl	800dca0 <ucdr_check_final_buffer_behavior>
 800cfb8:	b1a8      	cbz	r0, 800cfe6 <ucdr_deserialize_endian_uint32_t+0xce>
 800cfba:	2e01      	cmp	r6, #1
 800cfbc:	68a3      	ldr	r3, [r4, #8]
 800cfbe:	d017      	beq.n	800cff0 <ucdr_deserialize_endian_uint32_t+0xd8>
 800cfc0:	78db      	ldrb	r3, [r3, #3]
 800cfc2:	702b      	strb	r3, [r5, #0]
 800cfc4:	68a3      	ldr	r3, [r4, #8]
 800cfc6:	789b      	ldrb	r3, [r3, #2]
 800cfc8:	706b      	strb	r3, [r5, #1]
 800cfca:	68a3      	ldr	r3, [r4, #8]
 800cfcc:	785b      	ldrb	r3, [r3, #1]
 800cfce:	70ab      	strb	r3, [r5, #2]
 800cfd0:	68a3      	ldr	r3, [r4, #8]
 800cfd2:	781b      	ldrb	r3, [r3, #0]
 800cfd4:	70eb      	strb	r3, [r5, #3]
 800cfd6:	68a2      	ldr	r2, [r4, #8]
 800cfd8:	6923      	ldr	r3, [r4, #16]
 800cfda:	3204      	adds	r2, #4
 800cfdc:	3304      	adds	r3, #4
 800cfde:	2104      	movs	r1, #4
 800cfe0:	60a2      	str	r2, [r4, #8]
 800cfe2:	6123      	str	r3, [r4, #16]
 800cfe4:	7561      	strb	r1, [r4, #21]
 800cfe6:	7da0      	ldrb	r0, [r4, #22]
 800cfe8:	f080 0001 	eor.w	r0, r0, #1
 800cfec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cff0:	681b      	ldr	r3, [r3, #0]
 800cff2:	602b      	str	r3, [r5, #0]
 800cff4:	e7ef      	b.n	800cfd6 <ucdr_deserialize_endian_uint32_t+0xbe>
 800cff6:	68a2      	ldr	r2, [r4, #8]
 800cff8:	6923      	ldr	r3, [r4, #16]
 800cffa:	7da0      	ldrb	r0, [r4, #22]
 800cffc:	f884 9015 	strb.w	r9, [r4, #21]
 800d000:	eba2 0208 	sub.w	r2, r2, r8
 800d004:	eba3 0308 	sub.w	r3, r3, r8
 800d008:	60a2      	str	r2, [r4, #8]
 800d00a:	6123      	str	r3, [r4, #16]
 800d00c:	f080 0001 	eor.w	r0, r0, #1
 800d010:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d014:	68a3      	ldr	r3, [r4, #8]
 800d016:	789b      	ldrb	r3, [r3, #2]
 800d018:	706b      	strb	r3, [r5, #1]
 800d01a:	1cab      	adds	r3, r5, #2
 800d01c:	68a2      	ldr	r2, [r4, #8]
 800d01e:	7852      	ldrb	r2, [r2, #1]
 800d020:	f803 2b01 	strb.w	r2, [r3], #1
 800d024:	68a2      	ldr	r2, [r4, #8]
 800d026:	7812      	ldrb	r2, [r2, #0]
 800d028:	701a      	strb	r2, [r3, #0]
 800d02a:	e7b2      	b.n	800cf92 <ucdr_deserialize_endian_uint32_t+0x7a>
 800d02c:	4639      	mov	r1, r7
 800d02e:	4642      	mov	r2, r8
 800d030:	4628      	mov	r0, r5
 800d032:	f00d fe5c 	bl	801acee <memcpy>
 800d036:	68a1      	ldr	r1, [r4, #8]
 800d038:	4652      	mov	r2, sl
 800d03a:	eb05 0008 	add.w	r0, r5, r8
 800d03e:	f00d fe56 	bl	801acee <memcpy>
 800d042:	e7a6      	b.n	800cf92 <ucdr_deserialize_endian_uint32_t+0x7a>

0800d044 <ucdr_serialize_uint64_t>:
 800d044:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d048:	2108      	movs	r1, #8
 800d04a:	b082      	sub	sp, #8
 800d04c:	4604      	mov	r4, r0
 800d04e:	e9cd 2300 	strd	r2, r3, [sp]
 800d052:	f000 fe79 	bl	800dd48 <ucdr_buffer_alignment>
 800d056:	4601      	mov	r1, r0
 800d058:	4620      	mov	r0, r4
 800d05a:	7d67      	ldrb	r7, [r4, #21]
 800d05c:	f000 feb8 	bl	800ddd0 <ucdr_advance_buffer>
 800d060:	2108      	movs	r1, #8
 800d062:	4620      	mov	r0, r4
 800d064:	f000 fe10 	bl	800dc88 <ucdr_check_buffer_available_for>
 800d068:	2800      	cmp	r0, #0
 800d06a:	d14e      	bne.n	800d10a <ucdr_serialize_uint64_t+0xc6>
 800d06c:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800d070:	42ab      	cmp	r3, r5
 800d072:	d945      	bls.n	800d100 <ucdr_serialize_uint64_t+0xbc>
 800d074:	1b5e      	subs	r6, r3, r5
 800d076:	60a3      	str	r3, [r4, #8]
 800d078:	6923      	ldr	r3, [r4, #16]
 800d07a:	f1c6 0808 	rsb	r8, r6, #8
 800d07e:	4433      	add	r3, r6
 800d080:	6123      	str	r3, [r4, #16]
 800d082:	4641      	mov	r1, r8
 800d084:	4620      	mov	r0, r4
 800d086:	f000 fe0b 	bl	800dca0 <ucdr_check_final_buffer_behavior>
 800d08a:	2800      	cmp	r0, #0
 800d08c:	d074      	beq.n	800d178 <ucdr_serialize_uint64_t+0x134>
 800d08e:	7d23      	ldrb	r3, [r4, #20]
 800d090:	2b01      	cmp	r3, #1
 800d092:	f000 809b 	beq.w	800d1cc <ucdr_serialize_uint64_t+0x188>
 800d096:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800d09a:	702b      	strb	r3, [r5, #0]
 800d09c:	2e00      	cmp	r6, #0
 800d09e:	d078      	beq.n	800d192 <ucdr_serialize_uint64_t+0x14e>
 800d0a0:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800d0a4:	706b      	strb	r3, [r5, #1]
 800d0a6:	2e01      	cmp	r6, #1
 800d0a8:	d077      	beq.n	800d19a <ucdr_serialize_uint64_t+0x156>
 800d0aa:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800d0ae:	70ab      	strb	r3, [r5, #2]
 800d0b0:	2e02      	cmp	r6, #2
 800d0b2:	d076      	beq.n	800d1a2 <ucdr_serialize_uint64_t+0x15e>
 800d0b4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800d0b8:	70eb      	strb	r3, [r5, #3]
 800d0ba:	2e03      	cmp	r6, #3
 800d0bc:	d075      	beq.n	800d1aa <ucdr_serialize_uint64_t+0x166>
 800d0be:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800d0c2:	712b      	strb	r3, [r5, #4]
 800d0c4:	2e04      	cmp	r6, #4
 800d0c6:	d074      	beq.n	800d1b2 <ucdr_serialize_uint64_t+0x16e>
 800d0c8:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800d0cc:	716b      	strb	r3, [r5, #5]
 800d0ce:	2e05      	cmp	r6, #5
 800d0d0:	d073      	beq.n	800d1ba <ucdr_serialize_uint64_t+0x176>
 800d0d2:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800d0d6:	71ab      	strb	r3, [r5, #6]
 800d0d8:	2e06      	cmp	r6, #6
 800d0da:	d072      	beq.n	800d1c2 <ucdr_serialize_uint64_t+0x17e>
 800d0dc:	f89d 3000 	ldrb.w	r3, [sp]
 800d0e0:	71eb      	strb	r3, [r5, #7]
 800d0e2:	6923      	ldr	r3, [r4, #16]
 800d0e4:	68a2      	ldr	r2, [r4, #8]
 800d0e6:	7da0      	ldrb	r0, [r4, #22]
 800d0e8:	3308      	adds	r3, #8
 800d0ea:	1b9e      	subs	r6, r3, r6
 800d0ec:	4442      	add	r2, r8
 800d0ee:	2308      	movs	r3, #8
 800d0f0:	f080 0001 	eor.w	r0, r0, #1
 800d0f4:	60a2      	str	r2, [r4, #8]
 800d0f6:	6126      	str	r6, [r4, #16]
 800d0f8:	7563      	strb	r3, [r4, #21]
 800d0fa:	b002      	add	sp, #8
 800d0fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d100:	2108      	movs	r1, #8
 800d102:	4620      	mov	r0, r4
 800d104:	f000 fdcc 	bl	800dca0 <ucdr_check_final_buffer_behavior>
 800d108:	b350      	cbz	r0, 800d160 <ucdr_serialize_uint64_t+0x11c>
 800d10a:	7d23      	ldrb	r3, [r4, #20]
 800d10c:	2b01      	cmp	r3, #1
 800d10e:	d02d      	beq.n	800d16c <ucdr_serialize_uint64_t+0x128>
 800d110:	68a3      	ldr	r3, [r4, #8]
 800d112:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800d116:	701a      	strb	r2, [r3, #0]
 800d118:	68a3      	ldr	r3, [r4, #8]
 800d11a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d11e:	705a      	strb	r2, [r3, #1]
 800d120:	68a3      	ldr	r3, [r4, #8]
 800d122:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800d126:	709a      	strb	r2, [r3, #2]
 800d128:	68a3      	ldr	r3, [r4, #8]
 800d12a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800d12e:	70da      	strb	r2, [r3, #3]
 800d130:	68a3      	ldr	r3, [r4, #8]
 800d132:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800d136:	711a      	strb	r2, [r3, #4]
 800d138:	68a3      	ldr	r3, [r4, #8]
 800d13a:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800d13e:	715a      	strb	r2, [r3, #5]
 800d140:	68a3      	ldr	r3, [r4, #8]
 800d142:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800d146:	719a      	strb	r2, [r3, #6]
 800d148:	68a3      	ldr	r3, [r4, #8]
 800d14a:	f89d 2000 	ldrb.w	r2, [sp]
 800d14e:	71da      	strb	r2, [r3, #7]
 800d150:	68a2      	ldr	r2, [r4, #8]
 800d152:	6923      	ldr	r3, [r4, #16]
 800d154:	3208      	adds	r2, #8
 800d156:	3308      	adds	r3, #8
 800d158:	2108      	movs	r1, #8
 800d15a:	60a2      	str	r2, [r4, #8]
 800d15c:	6123      	str	r3, [r4, #16]
 800d15e:	7561      	strb	r1, [r4, #21]
 800d160:	7da0      	ldrb	r0, [r4, #22]
 800d162:	f080 0001 	eor.w	r0, r0, #1
 800d166:	b002      	add	sp, #8
 800d168:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d16c:	466b      	mov	r3, sp
 800d16e:	cb03      	ldmia	r3!, {r0, r1}
 800d170:	68a3      	ldr	r3, [r4, #8]
 800d172:	6018      	str	r0, [r3, #0]
 800d174:	6059      	str	r1, [r3, #4]
 800d176:	e7eb      	b.n	800d150 <ucdr_serialize_uint64_t+0x10c>
 800d178:	68a2      	ldr	r2, [r4, #8]
 800d17a:	6923      	ldr	r3, [r4, #16]
 800d17c:	7da0      	ldrb	r0, [r4, #22]
 800d17e:	7567      	strb	r7, [r4, #21]
 800d180:	1b92      	subs	r2, r2, r6
 800d182:	1b9b      	subs	r3, r3, r6
 800d184:	f080 0001 	eor.w	r0, r0, #1
 800d188:	60a2      	str	r2, [r4, #8]
 800d18a:	6123      	str	r3, [r4, #16]
 800d18c:	b002      	add	sp, #8
 800d18e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d192:	68a3      	ldr	r3, [r4, #8]
 800d194:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d198:	701a      	strb	r2, [r3, #0]
 800d19a:	68a3      	ldr	r3, [r4, #8]
 800d19c:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800d1a0:	701a      	strb	r2, [r3, #0]
 800d1a2:	68a3      	ldr	r3, [r4, #8]
 800d1a4:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800d1a8:	701a      	strb	r2, [r3, #0]
 800d1aa:	68a3      	ldr	r3, [r4, #8]
 800d1ac:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800d1b0:	701a      	strb	r2, [r3, #0]
 800d1b2:	68a3      	ldr	r3, [r4, #8]
 800d1b4:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800d1b8:	701a      	strb	r2, [r3, #0]
 800d1ba:	68a3      	ldr	r3, [r4, #8]
 800d1bc:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800d1c0:	701a      	strb	r2, [r3, #0]
 800d1c2:	68a3      	ldr	r3, [r4, #8]
 800d1c4:	f89d 2000 	ldrb.w	r2, [sp]
 800d1c8:	701a      	strb	r2, [r3, #0]
 800d1ca:	e78a      	b.n	800d0e2 <ucdr_serialize_uint64_t+0x9e>
 800d1cc:	4628      	mov	r0, r5
 800d1ce:	466d      	mov	r5, sp
 800d1d0:	4629      	mov	r1, r5
 800d1d2:	4632      	mov	r2, r6
 800d1d4:	f00d fd8b 	bl	801acee <memcpy>
 800d1d8:	68a0      	ldr	r0, [r4, #8]
 800d1da:	4642      	mov	r2, r8
 800d1dc:	19a9      	adds	r1, r5, r6
 800d1de:	f00d fd86 	bl	801acee <memcpy>
 800d1e2:	e77e      	b.n	800d0e2 <ucdr_serialize_uint64_t+0x9e>

0800d1e4 <ucdr_serialize_int16_t>:
 800d1e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d1e8:	b082      	sub	sp, #8
 800d1ea:	460b      	mov	r3, r1
 800d1ec:	2102      	movs	r1, #2
 800d1ee:	4604      	mov	r4, r0
 800d1f0:	f8ad 3006 	strh.w	r3, [sp, #6]
 800d1f4:	f000 fda8 	bl	800dd48 <ucdr_buffer_alignment>
 800d1f8:	4601      	mov	r1, r0
 800d1fa:	4620      	mov	r0, r4
 800d1fc:	7d67      	ldrb	r7, [r4, #21]
 800d1fe:	f000 fde7 	bl	800ddd0 <ucdr_advance_buffer>
 800d202:	2102      	movs	r1, #2
 800d204:	4620      	mov	r0, r4
 800d206:	f000 fd3f 	bl	800dc88 <ucdr_check_buffer_available_for>
 800d20a:	bb78      	cbnz	r0, 800d26c <ucdr_serialize_int16_t+0x88>
 800d20c:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800d210:	42ab      	cmp	r3, r5
 800d212:	d926      	bls.n	800d262 <ucdr_serialize_int16_t+0x7e>
 800d214:	1b5e      	subs	r6, r3, r5
 800d216:	60a3      	str	r3, [r4, #8]
 800d218:	6923      	ldr	r3, [r4, #16]
 800d21a:	f1c6 0802 	rsb	r8, r6, #2
 800d21e:	4433      	add	r3, r6
 800d220:	6123      	str	r3, [r4, #16]
 800d222:	4641      	mov	r1, r8
 800d224:	4620      	mov	r0, r4
 800d226:	f000 fd3b 	bl	800dca0 <ucdr_check_final_buffer_behavior>
 800d22a:	2800      	cmp	r0, #0
 800d22c:	d03b      	beq.n	800d2a6 <ucdr_serialize_int16_t+0xc2>
 800d22e:	7d23      	ldrb	r3, [r4, #20]
 800d230:	2b01      	cmp	r3, #1
 800d232:	d04a      	beq.n	800d2ca <ucdr_serialize_int16_t+0xe6>
 800d234:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800d238:	702b      	strb	r3, [r5, #0]
 800d23a:	2e00      	cmp	r6, #0
 800d23c:	d040      	beq.n	800d2c0 <ucdr_serialize_int16_t+0xdc>
 800d23e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800d242:	706b      	strb	r3, [r5, #1]
 800d244:	6923      	ldr	r3, [r4, #16]
 800d246:	68a2      	ldr	r2, [r4, #8]
 800d248:	7da0      	ldrb	r0, [r4, #22]
 800d24a:	3302      	adds	r3, #2
 800d24c:	1b9e      	subs	r6, r3, r6
 800d24e:	4442      	add	r2, r8
 800d250:	2302      	movs	r3, #2
 800d252:	f080 0001 	eor.w	r0, r0, #1
 800d256:	60a2      	str	r2, [r4, #8]
 800d258:	6126      	str	r6, [r4, #16]
 800d25a:	7563      	strb	r3, [r4, #21]
 800d25c:	b002      	add	sp, #8
 800d25e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d262:	2102      	movs	r1, #2
 800d264:	4620      	mov	r0, r4
 800d266:	f000 fd1b 	bl	800dca0 <ucdr_check_final_buffer_behavior>
 800d26a:	b190      	cbz	r0, 800d292 <ucdr_serialize_int16_t+0xae>
 800d26c:	7d23      	ldrb	r3, [r4, #20]
 800d26e:	2b01      	cmp	r3, #1
 800d270:	68a3      	ldr	r3, [r4, #8]
 800d272:	d014      	beq.n	800d29e <ucdr_serialize_int16_t+0xba>
 800d274:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800d278:	701a      	strb	r2, [r3, #0]
 800d27a:	68a3      	ldr	r3, [r4, #8]
 800d27c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d280:	705a      	strb	r2, [r3, #1]
 800d282:	68a2      	ldr	r2, [r4, #8]
 800d284:	6923      	ldr	r3, [r4, #16]
 800d286:	3202      	adds	r2, #2
 800d288:	3302      	adds	r3, #2
 800d28a:	2102      	movs	r1, #2
 800d28c:	60a2      	str	r2, [r4, #8]
 800d28e:	6123      	str	r3, [r4, #16]
 800d290:	7561      	strb	r1, [r4, #21]
 800d292:	7da0      	ldrb	r0, [r4, #22]
 800d294:	f080 0001 	eor.w	r0, r0, #1
 800d298:	b002      	add	sp, #8
 800d29a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d29e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800d2a2:	801a      	strh	r2, [r3, #0]
 800d2a4:	e7ed      	b.n	800d282 <ucdr_serialize_int16_t+0x9e>
 800d2a6:	68a2      	ldr	r2, [r4, #8]
 800d2a8:	6923      	ldr	r3, [r4, #16]
 800d2aa:	7da0      	ldrb	r0, [r4, #22]
 800d2ac:	7567      	strb	r7, [r4, #21]
 800d2ae:	1b92      	subs	r2, r2, r6
 800d2b0:	1b9b      	subs	r3, r3, r6
 800d2b2:	f080 0001 	eor.w	r0, r0, #1
 800d2b6:	60a2      	str	r2, [r4, #8]
 800d2b8:	6123      	str	r3, [r4, #16]
 800d2ba:	b002      	add	sp, #8
 800d2bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d2c0:	68a3      	ldr	r3, [r4, #8]
 800d2c2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d2c6:	701a      	strb	r2, [r3, #0]
 800d2c8:	e7bc      	b.n	800d244 <ucdr_serialize_int16_t+0x60>
 800d2ca:	4628      	mov	r0, r5
 800d2cc:	f10d 0506 	add.w	r5, sp, #6
 800d2d0:	4629      	mov	r1, r5
 800d2d2:	4632      	mov	r2, r6
 800d2d4:	f00d fd0b 	bl	801acee <memcpy>
 800d2d8:	68a0      	ldr	r0, [r4, #8]
 800d2da:	4642      	mov	r2, r8
 800d2dc:	19a9      	adds	r1, r5, r6
 800d2de:	f00d fd06 	bl	801acee <memcpy>
 800d2e2:	e7af      	b.n	800d244 <ucdr_serialize_int16_t+0x60>

0800d2e4 <ucdr_deserialize_int16_t>:
 800d2e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d2e8:	460d      	mov	r5, r1
 800d2ea:	2102      	movs	r1, #2
 800d2ec:	4604      	mov	r4, r0
 800d2ee:	f000 fd2b 	bl	800dd48 <ucdr_buffer_alignment>
 800d2f2:	4601      	mov	r1, r0
 800d2f4:	4620      	mov	r0, r4
 800d2f6:	f894 8015 	ldrb.w	r8, [r4, #21]
 800d2fa:	f000 fd69 	bl	800ddd0 <ucdr_advance_buffer>
 800d2fe:	2102      	movs	r1, #2
 800d300:	4620      	mov	r0, r4
 800d302:	f000 fcc1 	bl	800dc88 <ucdr_check_buffer_available_for>
 800d306:	bb60      	cbnz	r0, 800d362 <ucdr_deserialize_int16_t+0x7e>
 800d308:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800d30c:	42be      	cmp	r6, r7
 800d30e:	d923      	bls.n	800d358 <ucdr_deserialize_int16_t+0x74>
 800d310:	6923      	ldr	r3, [r4, #16]
 800d312:	60a6      	str	r6, [r4, #8]
 800d314:	1bf6      	subs	r6, r6, r7
 800d316:	4433      	add	r3, r6
 800d318:	f1c6 0902 	rsb	r9, r6, #2
 800d31c:	6123      	str	r3, [r4, #16]
 800d31e:	4649      	mov	r1, r9
 800d320:	4620      	mov	r0, r4
 800d322:	f000 fcbd 	bl	800dca0 <ucdr_check_final_buffer_behavior>
 800d326:	2800      	cmp	r0, #0
 800d328:	d034      	beq.n	800d394 <ucdr_deserialize_int16_t+0xb0>
 800d32a:	7d23      	ldrb	r3, [r4, #20]
 800d32c:	2b01      	cmp	r3, #1
 800d32e:	d042      	beq.n	800d3b6 <ucdr_deserialize_int16_t+0xd2>
 800d330:	787b      	ldrb	r3, [r7, #1]
 800d332:	702b      	strb	r3, [r5, #0]
 800d334:	2e00      	cmp	r6, #0
 800d336:	d03a      	beq.n	800d3ae <ucdr_deserialize_int16_t+0xca>
 800d338:	783b      	ldrb	r3, [r7, #0]
 800d33a:	706b      	strb	r3, [r5, #1]
 800d33c:	6923      	ldr	r3, [r4, #16]
 800d33e:	68a2      	ldr	r2, [r4, #8]
 800d340:	7da0      	ldrb	r0, [r4, #22]
 800d342:	2102      	movs	r1, #2
 800d344:	3302      	adds	r3, #2
 800d346:	444a      	add	r2, r9
 800d348:	1b9b      	subs	r3, r3, r6
 800d34a:	7561      	strb	r1, [r4, #21]
 800d34c:	60a2      	str	r2, [r4, #8]
 800d34e:	6123      	str	r3, [r4, #16]
 800d350:	f080 0001 	eor.w	r0, r0, #1
 800d354:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d358:	2102      	movs	r1, #2
 800d35a:	4620      	mov	r0, r4
 800d35c:	f000 fca0 	bl	800dca0 <ucdr_check_final_buffer_behavior>
 800d360:	b180      	cbz	r0, 800d384 <ucdr_deserialize_int16_t+0xa0>
 800d362:	7d23      	ldrb	r3, [r4, #20]
 800d364:	2b01      	cmp	r3, #1
 800d366:	68a3      	ldr	r3, [r4, #8]
 800d368:	d011      	beq.n	800d38e <ucdr_deserialize_int16_t+0xaa>
 800d36a:	785b      	ldrb	r3, [r3, #1]
 800d36c:	702b      	strb	r3, [r5, #0]
 800d36e:	68a3      	ldr	r3, [r4, #8]
 800d370:	781b      	ldrb	r3, [r3, #0]
 800d372:	706b      	strb	r3, [r5, #1]
 800d374:	68a2      	ldr	r2, [r4, #8]
 800d376:	6923      	ldr	r3, [r4, #16]
 800d378:	3202      	adds	r2, #2
 800d37a:	3302      	adds	r3, #2
 800d37c:	2102      	movs	r1, #2
 800d37e:	60a2      	str	r2, [r4, #8]
 800d380:	6123      	str	r3, [r4, #16]
 800d382:	7561      	strb	r1, [r4, #21]
 800d384:	7da0      	ldrb	r0, [r4, #22]
 800d386:	f080 0001 	eor.w	r0, r0, #1
 800d38a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d38e:	881b      	ldrh	r3, [r3, #0]
 800d390:	802b      	strh	r3, [r5, #0]
 800d392:	e7ef      	b.n	800d374 <ucdr_deserialize_int16_t+0x90>
 800d394:	68a2      	ldr	r2, [r4, #8]
 800d396:	6923      	ldr	r3, [r4, #16]
 800d398:	7da0      	ldrb	r0, [r4, #22]
 800d39a:	f884 8015 	strb.w	r8, [r4, #21]
 800d39e:	1b92      	subs	r2, r2, r6
 800d3a0:	1b9b      	subs	r3, r3, r6
 800d3a2:	60a2      	str	r2, [r4, #8]
 800d3a4:	6123      	str	r3, [r4, #16]
 800d3a6:	f080 0001 	eor.w	r0, r0, #1
 800d3aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d3ae:	68a3      	ldr	r3, [r4, #8]
 800d3b0:	781b      	ldrb	r3, [r3, #0]
 800d3b2:	706b      	strb	r3, [r5, #1]
 800d3b4:	e7c2      	b.n	800d33c <ucdr_deserialize_int16_t+0x58>
 800d3b6:	4639      	mov	r1, r7
 800d3b8:	4632      	mov	r2, r6
 800d3ba:	4628      	mov	r0, r5
 800d3bc:	f00d fc97 	bl	801acee <memcpy>
 800d3c0:	68a1      	ldr	r1, [r4, #8]
 800d3c2:	464a      	mov	r2, r9
 800d3c4:	19a8      	adds	r0, r5, r6
 800d3c6:	f00d fc92 	bl	801acee <memcpy>
 800d3ca:	e7b7      	b.n	800d33c <ucdr_deserialize_int16_t+0x58>

0800d3cc <ucdr_serialize_int32_t>:
 800d3cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d3d0:	b082      	sub	sp, #8
 800d3d2:	4604      	mov	r4, r0
 800d3d4:	9101      	str	r1, [sp, #4]
 800d3d6:	2104      	movs	r1, #4
 800d3d8:	f000 fcb6 	bl	800dd48 <ucdr_buffer_alignment>
 800d3dc:	4601      	mov	r1, r0
 800d3de:	4620      	mov	r0, r4
 800d3e0:	7d67      	ldrb	r7, [r4, #21]
 800d3e2:	f000 fcf5 	bl	800ddd0 <ucdr_advance_buffer>
 800d3e6:	2104      	movs	r1, #4
 800d3e8:	4620      	mov	r0, r4
 800d3ea:	f000 fc4d 	bl	800dc88 <ucdr_check_buffer_available_for>
 800d3ee:	2800      	cmp	r0, #0
 800d3f0:	d139      	bne.n	800d466 <ucdr_serialize_int32_t+0x9a>
 800d3f2:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800d3f6:	42ab      	cmp	r3, r5
 800d3f8:	d930      	bls.n	800d45c <ucdr_serialize_int32_t+0x90>
 800d3fa:	1b5e      	subs	r6, r3, r5
 800d3fc:	60a3      	str	r3, [r4, #8]
 800d3fe:	6923      	ldr	r3, [r4, #16]
 800d400:	f1c6 0804 	rsb	r8, r6, #4
 800d404:	4433      	add	r3, r6
 800d406:	6123      	str	r3, [r4, #16]
 800d408:	4641      	mov	r1, r8
 800d40a:	4620      	mov	r0, r4
 800d40c:	f000 fc48 	bl	800dca0 <ucdr_check_final_buffer_behavior>
 800d410:	2800      	cmp	r0, #0
 800d412:	d04c      	beq.n	800d4ae <ucdr_serialize_int32_t+0xe2>
 800d414:	7d23      	ldrb	r3, [r4, #20]
 800d416:	2b01      	cmp	r3, #1
 800d418:	d063      	beq.n	800d4e2 <ucdr_serialize_int32_t+0x116>
 800d41a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800d41e:	702b      	strb	r3, [r5, #0]
 800d420:	2e00      	cmp	r6, #0
 800d422:	d051      	beq.n	800d4c8 <ucdr_serialize_int32_t+0xfc>
 800d424:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800d428:	706b      	strb	r3, [r5, #1]
 800d42a:	2e01      	cmp	r6, #1
 800d42c:	d050      	beq.n	800d4d0 <ucdr_serialize_int32_t+0x104>
 800d42e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800d432:	70ab      	strb	r3, [r5, #2]
 800d434:	2e02      	cmp	r6, #2
 800d436:	d04f      	beq.n	800d4d8 <ucdr_serialize_int32_t+0x10c>
 800d438:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800d43c:	70eb      	strb	r3, [r5, #3]
 800d43e:	6923      	ldr	r3, [r4, #16]
 800d440:	68a2      	ldr	r2, [r4, #8]
 800d442:	7da0      	ldrb	r0, [r4, #22]
 800d444:	3304      	adds	r3, #4
 800d446:	1b9e      	subs	r6, r3, r6
 800d448:	4442      	add	r2, r8
 800d44a:	2304      	movs	r3, #4
 800d44c:	f080 0001 	eor.w	r0, r0, #1
 800d450:	60a2      	str	r2, [r4, #8]
 800d452:	6126      	str	r6, [r4, #16]
 800d454:	7563      	strb	r3, [r4, #21]
 800d456:	b002      	add	sp, #8
 800d458:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d45c:	2104      	movs	r1, #4
 800d45e:	4620      	mov	r0, r4
 800d460:	f000 fc1e 	bl	800dca0 <ucdr_check_final_buffer_behavior>
 800d464:	b1d0      	cbz	r0, 800d49c <ucdr_serialize_int32_t+0xd0>
 800d466:	7d23      	ldrb	r3, [r4, #20]
 800d468:	2b01      	cmp	r3, #1
 800d46a:	68a3      	ldr	r3, [r4, #8]
 800d46c:	d01c      	beq.n	800d4a8 <ucdr_serialize_int32_t+0xdc>
 800d46e:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800d472:	701a      	strb	r2, [r3, #0]
 800d474:	68a3      	ldr	r3, [r4, #8]
 800d476:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d47a:	705a      	strb	r2, [r3, #1]
 800d47c:	68a3      	ldr	r3, [r4, #8]
 800d47e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800d482:	709a      	strb	r2, [r3, #2]
 800d484:	68a3      	ldr	r3, [r4, #8]
 800d486:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800d48a:	70da      	strb	r2, [r3, #3]
 800d48c:	68a2      	ldr	r2, [r4, #8]
 800d48e:	6923      	ldr	r3, [r4, #16]
 800d490:	3204      	adds	r2, #4
 800d492:	3304      	adds	r3, #4
 800d494:	2104      	movs	r1, #4
 800d496:	60a2      	str	r2, [r4, #8]
 800d498:	6123      	str	r3, [r4, #16]
 800d49a:	7561      	strb	r1, [r4, #21]
 800d49c:	7da0      	ldrb	r0, [r4, #22]
 800d49e:	f080 0001 	eor.w	r0, r0, #1
 800d4a2:	b002      	add	sp, #8
 800d4a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d4a8:	9a01      	ldr	r2, [sp, #4]
 800d4aa:	601a      	str	r2, [r3, #0]
 800d4ac:	e7ee      	b.n	800d48c <ucdr_serialize_int32_t+0xc0>
 800d4ae:	68a2      	ldr	r2, [r4, #8]
 800d4b0:	6923      	ldr	r3, [r4, #16]
 800d4b2:	7da0      	ldrb	r0, [r4, #22]
 800d4b4:	7567      	strb	r7, [r4, #21]
 800d4b6:	1b92      	subs	r2, r2, r6
 800d4b8:	1b9b      	subs	r3, r3, r6
 800d4ba:	f080 0001 	eor.w	r0, r0, #1
 800d4be:	60a2      	str	r2, [r4, #8]
 800d4c0:	6123      	str	r3, [r4, #16]
 800d4c2:	b002      	add	sp, #8
 800d4c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d4c8:	68a3      	ldr	r3, [r4, #8]
 800d4ca:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d4ce:	701a      	strb	r2, [r3, #0]
 800d4d0:	68a3      	ldr	r3, [r4, #8]
 800d4d2:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800d4d6:	701a      	strb	r2, [r3, #0]
 800d4d8:	68a3      	ldr	r3, [r4, #8]
 800d4da:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800d4de:	701a      	strb	r2, [r3, #0]
 800d4e0:	e7ad      	b.n	800d43e <ucdr_serialize_int32_t+0x72>
 800d4e2:	4628      	mov	r0, r5
 800d4e4:	ad01      	add	r5, sp, #4
 800d4e6:	4629      	mov	r1, r5
 800d4e8:	4632      	mov	r2, r6
 800d4ea:	f00d fc00 	bl	801acee <memcpy>
 800d4ee:	68a0      	ldr	r0, [r4, #8]
 800d4f0:	4642      	mov	r2, r8
 800d4f2:	19a9      	adds	r1, r5, r6
 800d4f4:	f00d fbfb 	bl	801acee <memcpy>
 800d4f8:	e7a1      	b.n	800d43e <ucdr_serialize_int32_t+0x72>
 800d4fa:	bf00      	nop

0800d4fc <ucdr_deserialize_int32_t>:
 800d4fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d500:	460d      	mov	r5, r1
 800d502:	2104      	movs	r1, #4
 800d504:	4604      	mov	r4, r0
 800d506:	f000 fc1f 	bl	800dd48 <ucdr_buffer_alignment>
 800d50a:	4601      	mov	r1, r0
 800d50c:	4620      	mov	r0, r4
 800d50e:	f894 8015 	ldrb.w	r8, [r4, #21]
 800d512:	f000 fc5d 	bl	800ddd0 <ucdr_advance_buffer>
 800d516:	2104      	movs	r1, #4
 800d518:	4620      	mov	r0, r4
 800d51a:	f000 fbb5 	bl	800dc88 <ucdr_check_buffer_available_for>
 800d51e:	2800      	cmp	r0, #0
 800d520:	d138      	bne.n	800d594 <ucdr_deserialize_int32_t+0x98>
 800d522:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800d526:	42b7      	cmp	r7, r6
 800d528:	d92f      	bls.n	800d58a <ucdr_deserialize_int32_t+0x8e>
 800d52a:	6923      	ldr	r3, [r4, #16]
 800d52c:	60a7      	str	r7, [r4, #8]
 800d52e:	1bbf      	subs	r7, r7, r6
 800d530:	443b      	add	r3, r7
 800d532:	f1c7 0904 	rsb	r9, r7, #4
 800d536:	6123      	str	r3, [r4, #16]
 800d538:	4649      	mov	r1, r9
 800d53a:	4620      	mov	r0, r4
 800d53c:	f000 fbb0 	bl	800dca0 <ucdr_check_final_buffer_behavior>
 800d540:	2800      	cmp	r0, #0
 800d542:	d046      	beq.n	800d5d2 <ucdr_deserialize_int32_t+0xd6>
 800d544:	7d23      	ldrb	r3, [r4, #20]
 800d546:	2b01      	cmp	r3, #1
 800d548:	d05c      	beq.n	800d604 <ucdr_deserialize_int32_t+0x108>
 800d54a:	78f3      	ldrb	r3, [r6, #3]
 800d54c:	702b      	strb	r3, [r5, #0]
 800d54e:	2f00      	cmp	r7, #0
 800d550:	d04c      	beq.n	800d5ec <ucdr_deserialize_int32_t+0xf0>
 800d552:	78b3      	ldrb	r3, [r6, #2]
 800d554:	706b      	strb	r3, [r5, #1]
 800d556:	2f01      	cmp	r7, #1
 800d558:	f105 0302 	add.w	r3, r5, #2
 800d55c:	d04a      	beq.n	800d5f4 <ucdr_deserialize_int32_t+0xf8>
 800d55e:	7873      	ldrb	r3, [r6, #1]
 800d560:	70ab      	strb	r3, [r5, #2]
 800d562:	2f02      	cmp	r7, #2
 800d564:	f105 0303 	add.w	r3, r5, #3
 800d568:	d048      	beq.n	800d5fc <ucdr_deserialize_int32_t+0x100>
 800d56a:	7833      	ldrb	r3, [r6, #0]
 800d56c:	70eb      	strb	r3, [r5, #3]
 800d56e:	6923      	ldr	r3, [r4, #16]
 800d570:	68a2      	ldr	r2, [r4, #8]
 800d572:	7da0      	ldrb	r0, [r4, #22]
 800d574:	2104      	movs	r1, #4
 800d576:	3304      	adds	r3, #4
 800d578:	444a      	add	r2, r9
 800d57a:	1bdb      	subs	r3, r3, r7
 800d57c:	7561      	strb	r1, [r4, #21]
 800d57e:	60a2      	str	r2, [r4, #8]
 800d580:	6123      	str	r3, [r4, #16]
 800d582:	f080 0001 	eor.w	r0, r0, #1
 800d586:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d58a:	2104      	movs	r1, #4
 800d58c:	4620      	mov	r0, r4
 800d58e:	f000 fb87 	bl	800dca0 <ucdr_check_final_buffer_behavior>
 800d592:	b1b0      	cbz	r0, 800d5c2 <ucdr_deserialize_int32_t+0xc6>
 800d594:	7d23      	ldrb	r3, [r4, #20]
 800d596:	2b01      	cmp	r3, #1
 800d598:	68a3      	ldr	r3, [r4, #8]
 800d59a:	d017      	beq.n	800d5cc <ucdr_deserialize_int32_t+0xd0>
 800d59c:	78db      	ldrb	r3, [r3, #3]
 800d59e:	702b      	strb	r3, [r5, #0]
 800d5a0:	68a3      	ldr	r3, [r4, #8]
 800d5a2:	789b      	ldrb	r3, [r3, #2]
 800d5a4:	706b      	strb	r3, [r5, #1]
 800d5a6:	68a3      	ldr	r3, [r4, #8]
 800d5a8:	785b      	ldrb	r3, [r3, #1]
 800d5aa:	70ab      	strb	r3, [r5, #2]
 800d5ac:	68a3      	ldr	r3, [r4, #8]
 800d5ae:	781b      	ldrb	r3, [r3, #0]
 800d5b0:	70eb      	strb	r3, [r5, #3]
 800d5b2:	68a2      	ldr	r2, [r4, #8]
 800d5b4:	6923      	ldr	r3, [r4, #16]
 800d5b6:	3204      	adds	r2, #4
 800d5b8:	3304      	adds	r3, #4
 800d5ba:	2104      	movs	r1, #4
 800d5bc:	60a2      	str	r2, [r4, #8]
 800d5be:	6123      	str	r3, [r4, #16]
 800d5c0:	7561      	strb	r1, [r4, #21]
 800d5c2:	7da0      	ldrb	r0, [r4, #22]
 800d5c4:	f080 0001 	eor.w	r0, r0, #1
 800d5c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d5cc:	681b      	ldr	r3, [r3, #0]
 800d5ce:	602b      	str	r3, [r5, #0]
 800d5d0:	e7ef      	b.n	800d5b2 <ucdr_deserialize_int32_t+0xb6>
 800d5d2:	68a2      	ldr	r2, [r4, #8]
 800d5d4:	6923      	ldr	r3, [r4, #16]
 800d5d6:	7da0      	ldrb	r0, [r4, #22]
 800d5d8:	f884 8015 	strb.w	r8, [r4, #21]
 800d5dc:	1bd2      	subs	r2, r2, r7
 800d5de:	1bdb      	subs	r3, r3, r7
 800d5e0:	60a2      	str	r2, [r4, #8]
 800d5e2:	6123      	str	r3, [r4, #16]
 800d5e4:	f080 0001 	eor.w	r0, r0, #1
 800d5e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d5ec:	68a3      	ldr	r3, [r4, #8]
 800d5ee:	789b      	ldrb	r3, [r3, #2]
 800d5f0:	706b      	strb	r3, [r5, #1]
 800d5f2:	1cab      	adds	r3, r5, #2
 800d5f4:	68a2      	ldr	r2, [r4, #8]
 800d5f6:	7852      	ldrb	r2, [r2, #1]
 800d5f8:	f803 2b01 	strb.w	r2, [r3], #1
 800d5fc:	68a2      	ldr	r2, [r4, #8]
 800d5fe:	7812      	ldrb	r2, [r2, #0]
 800d600:	701a      	strb	r2, [r3, #0]
 800d602:	e7b4      	b.n	800d56e <ucdr_deserialize_int32_t+0x72>
 800d604:	4631      	mov	r1, r6
 800d606:	463a      	mov	r2, r7
 800d608:	4628      	mov	r0, r5
 800d60a:	f00d fb70 	bl	801acee <memcpy>
 800d60e:	68a1      	ldr	r1, [r4, #8]
 800d610:	464a      	mov	r2, r9
 800d612:	19e8      	adds	r0, r5, r7
 800d614:	f00d fb6b 	bl	801acee <memcpy>
 800d618:	e7a9      	b.n	800d56e <ucdr_deserialize_int32_t+0x72>
 800d61a:	bf00      	nop

0800d61c <ucdr_serialize_double>:
 800d61c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d620:	2108      	movs	r1, #8
 800d622:	b082      	sub	sp, #8
 800d624:	4604      	mov	r4, r0
 800d626:	ed8d 0b00 	vstr	d0, [sp]
 800d62a:	f000 fb8d 	bl	800dd48 <ucdr_buffer_alignment>
 800d62e:	4601      	mov	r1, r0
 800d630:	4620      	mov	r0, r4
 800d632:	7d67      	ldrb	r7, [r4, #21]
 800d634:	f000 fbcc 	bl	800ddd0 <ucdr_advance_buffer>
 800d638:	2108      	movs	r1, #8
 800d63a:	4620      	mov	r0, r4
 800d63c:	f000 fb24 	bl	800dc88 <ucdr_check_buffer_available_for>
 800d640:	2800      	cmp	r0, #0
 800d642:	d14e      	bne.n	800d6e2 <ucdr_serialize_double+0xc6>
 800d644:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800d648:	42ab      	cmp	r3, r5
 800d64a:	d945      	bls.n	800d6d8 <ucdr_serialize_double+0xbc>
 800d64c:	1b5e      	subs	r6, r3, r5
 800d64e:	60a3      	str	r3, [r4, #8]
 800d650:	6923      	ldr	r3, [r4, #16]
 800d652:	f1c6 0808 	rsb	r8, r6, #8
 800d656:	4433      	add	r3, r6
 800d658:	6123      	str	r3, [r4, #16]
 800d65a:	4641      	mov	r1, r8
 800d65c:	4620      	mov	r0, r4
 800d65e:	f000 fb1f 	bl	800dca0 <ucdr_check_final_buffer_behavior>
 800d662:	2800      	cmp	r0, #0
 800d664:	d074      	beq.n	800d750 <ucdr_serialize_double+0x134>
 800d666:	7d23      	ldrb	r3, [r4, #20]
 800d668:	2b01      	cmp	r3, #1
 800d66a:	f000 809b 	beq.w	800d7a4 <ucdr_serialize_double+0x188>
 800d66e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800d672:	702b      	strb	r3, [r5, #0]
 800d674:	2e00      	cmp	r6, #0
 800d676:	d078      	beq.n	800d76a <ucdr_serialize_double+0x14e>
 800d678:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800d67c:	706b      	strb	r3, [r5, #1]
 800d67e:	2e01      	cmp	r6, #1
 800d680:	d077      	beq.n	800d772 <ucdr_serialize_double+0x156>
 800d682:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800d686:	70ab      	strb	r3, [r5, #2]
 800d688:	2e02      	cmp	r6, #2
 800d68a:	d076      	beq.n	800d77a <ucdr_serialize_double+0x15e>
 800d68c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800d690:	70eb      	strb	r3, [r5, #3]
 800d692:	2e03      	cmp	r6, #3
 800d694:	d075      	beq.n	800d782 <ucdr_serialize_double+0x166>
 800d696:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800d69a:	712b      	strb	r3, [r5, #4]
 800d69c:	2e04      	cmp	r6, #4
 800d69e:	d074      	beq.n	800d78a <ucdr_serialize_double+0x16e>
 800d6a0:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800d6a4:	716b      	strb	r3, [r5, #5]
 800d6a6:	2e05      	cmp	r6, #5
 800d6a8:	d073      	beq.n	800d792 <ucdr_serialize_double+0x176>
 800d6aa:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800d6ae:	71ab      	strb	r3, [r5, #6]
 800d6b0:	2e06      	cmp	r6, #6
 800d6b2:	d072      	beq.n	800d79a <ucdr_serialize_double+0x17e>
 800d6b4:	f89d 3000 	ldrb.w	r3, [sp]
 800d6b8:	71eb      	strb	r3, [r5, #7]
 800d6ba:	6923      	ldr	r3, [r4, #16]
 800d6bc:	68a2      	ldr	r2, [r4, #8]
 800d6be:	7da0      	ldrb	r0, [r4, #22]
 800d6c0:	3308      	adds	r3, #8
 800d6c2:	1b9e      	subs	r6, r3, r6
 800d6c4:	4442      	add	r2, r8
 800d6c6:	2308      	movs	r3, #8
 800d6c8:	f080 0001 	eor.w	r0, r0, #1
 800d6cc:	60a2      	str	r2, [r4, #8]
 800d6ce:	6126      	str	r6, [r4, #16]
 800d6d0:	7563      	strb	r3, [r4, #21]
 800d6d2:	b002      	add	sp, #8
 800d6d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d6d8:	2108      	movs	r1, #8
 800d6da:	4620      	mov	r0, r4
 800d6dc:	f000 fae0 	bl	800dca0 <ucdr_check_final_buffer_behavior>
 800d6e0:	b350      	cbz	r0, 800d738 <ucdr_serialize_double+0x11c>
 800d6e2:	7d23      	ldrb	r3, [r4, #20]
 800d6e4:	2b01      	cmp	r3, #1
 800d6e6:	d02d      	beq.n	800d744 <ucdr_serialize_double+0x128>
 800d6e8:	68a3      	ldr	r3, [r4, #8]
 800d6ea:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800d6ee:	701a      	strb	r2, [r3, #0]
 800d6f0:	68a3      	ldr	r3, [r4, #8]
 800d6f2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d6f6:	705a      	strb	r2, [r3, #1]
 800d6f8:	68a3      	ldr	r3, [r4, #8]
 800d6fa:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800d6fe:	709a      	strb	r2, [r3, #2]
 800d700:	68a3      	ldr	r3, [r4, #8]
 800d702:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800d706:	70da      	strb	r2, [r3, #3]
 800d708:	68a3      	ldr	r3, [r4, #8]
 800d70a:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800d70e:	711a      	strb	r2, [r3, #4]
 800d710:	68a3      	ldr	r3, [r4, #8]
 800d712:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800d716:	715a      	strb	r2, [r3, #5]
 800d718:	68a3      	ldr	r3, [r4, #8]
 800d71a:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800d71e:	719a      	strb	r2, [r3, #6]
 800d720:	68a3      	ldr	r3, [r4, #8]
 800d722:	f89d 2000 	ldrb.w	r2, [sp]
 800d726:	71da      	strb	r2, [r3, #7]
 800d728:	68a2      	ldr	r2, [r4, #8]
 800d72a:	6923      	ldr	r3, [r4, #16]
 800d72c:	3208      	adds	r2, #8
 800d72e:	3308      	adds	r3, #8
 800d730:	2108      	movs	r1, #8
 800d732:	60a2      	str	r2, [r4, #8]
 800d734:	6123      	str	r3, [r4, #16]
 800d736:	7561      	strb	r1, [r4, #21]
 800d738:	7da0      	ldrb	r0, [r4, #22]
 800d73a:	f080 0001 	eor.w	r0, r0, #1
 800d73e:	b002      	add	sp, #8
 800d740:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d744:	466b      	mov	r3, sp
 800d746:	cb03      	ldmia	r3!, {r0, r1}
 800d748:	68a3      	ldr	r3, [r4, #8]
 800d74a:	6018      	str	r0, [r3, #0]
 800d74c:	6059      	str	r1, [r3, #4]
 800d74e:	e7eb      	b.n	800d728 <ucdr_serialize_double+0x10c>
 800d750:	68a2      	ldr	r2, [r4, #8]
 800d752:	6923      	ldr	r3, [r4, #16]
 800d754:	7da0      	ldrb	r0, [r4, #22]
 800d756:	7567      	strb	r7, [r4, #21]
 800d758:	1b92      	subs	r2, r2, r6
 800d75a:	1b9b      	subs	r3, r3, r6
 800d75c:	f080 0001 	eor.w	r0, r0, #1
 800d760:	60a2      	str	r2, [r4, #8]
 800d762:	6123      	str	r3, [r4, #16]
 800d764:	b002      	add	sp, #8
 800d766:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d76a:	68a3      	ldr	r3, [r4, #8]
 800d76c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d770:	701a      	strb	r2, [r3, #0]
 800d772:	68a3      	ldr	r3, [r4, #8]
 800d774:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800d778:	701a      	strb	r2, [r3, #0]
 800d77a:	68a3      	ldr	r3, [r4, #8]
 800d77c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800d780:	701a      	strb	r2, [r3, #0]
 800d782:	68a3      	ldr	r3, [r4, #8]
 800d784:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800d788:	701a      	strb	r2, [r3, #0]
 800d78a:	68a3      	ldr	r3, [r4, #8]
 800d78c:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800d790:	701a      	strb	r2, [r3, #0]
 800d792:	68a3      	ldr	r3, [r4, #8]
 800d794:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800d798:	701a      	strb	r2, [r3, #0]
 800d79a:	68a3      	ldr	r3, [r4, #8]
 800d79c:	f89d 2000 	ldrb.w	r2, [sp]
 800d7a0:	701a      	strb	r2, [r3, #0]
 800d7a2:	e78a      	b.n	800d6ba <ucdr_serialize_double+0x9e>
 800d7a4:	4628      	mov	r0, r5
 800d7a6:	466d      	mov	r5, sp
 800d7a8:	4629      	mov	r1, r5
 800d7aa:	4632      	mov	r2, r6
 800d7ac:	f00d fa9f 	bl	801acee <memcpy>
 800d7b0:	68a0      	ldr	r0, [r4, #8]
 800d7b2:	4642      	mov	r2, r8
 800d7b4:	19a9      	adds	r1, r5, r6
 800d7b6:	f00d fa9a 	bl	801acee <memcpy>
 800d7ba:	e77e      	b.n	800d6ba <ucdr_serialize_double+0x9e>

0800d7bc <ucdr_serialize_endian_double>:
 800d7bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d7c0:	460e      	mov	r6, r1
 800d7c2:	b083      	sub	sp, #12
 800d7c4:	2108      	movs	r1, #8
 800d7c6:	4604      	mov	r4, r0
 800d7c8:	ed8d 0b00 	vstr	d0, [sp]
 800d7cc:	f000 fabc 	bl	800dd48 <ucdr_buffer_alignment>
 800d7d0:	4601      	mov	r1, r0
 800d7d2:	4620      	mov	r0, r4
 800d7d4:	f894 8015 	ldrb.w	r8, [r4, #21]
 800d7d8:	f000 fafa 	bl	800ddd0 <ucdr_advance_buffer>
 800d7dc:	2108      	movs	r1, #8
 800d7de:	4620      	mov	r0, r4
 800d7e0:	f000 fa52 	bl	800dc88 <ucdr_check_buffer_available_for>
 800d7e4:	2800      	cmp	r0, #0
 800d7e6:	d14d      	bne.n	800d884 <ucdr_serialize_endian_double+0xc8>
 800d7e8:	e9d4 5701 	ldrd	r5, r7, [r4, #4]
 800d7ec:	42bd      	cmp	r5, r7
 800d7ee:	d944      	bls.n	800d87a <ucdr_serialize_endian_double+0xbe>
 800d7f0:	6923      	ldr	r3, [r4, #16]
 800d7f2:	60a5      	str	r5, [r4, #8]
 800d7f4:	1bed      	subs	r5, r5, r7
 800d7f6:	442b      	add	r3, r5
 800d7f8:	f1c5 0908 	rsb	r9, r5, #8
 800d7fc:	6123      	str	r3, [r4, #16]
 800d7fe:	4649      	mov	r1, r9
 800d800:	4620      	mov	r0, r4
 800d802:	f000 fa4d 	bl	800dca0 <ucdr_check_final_buffer_behavior>
 800d806:	2800      	cmp	r0, #0
 800d808:	d072      	beq.n	800d8f0 <ucdr_serialize_endian_double+0x134>
 800d80a:	2e01      	cmp	r6, #1
 800d80c:	f000 809b 	beq.w	800d946 <ucdr_serialize_endian_double+0x18a>
 800d810:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800d814:	703b      	strb	r3, [r7, #0]
 800d816:	2d00      	cmp	r5, #0
 800d818:	d078      	beq.n	800d90c <ucdr_serialize_endian_double+0x150>
 800d81a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800d81e:	707b      	strb	r3, [r7, #1]
 800d820:	2d01      	cmp	r5, #1
 800d822:	d077      	beq.n	800d914 <ucdr_serialize_endian_double+0x158>
 800d824:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800d828:	70bb      	strb	r3, [r7, #2]
 800d82a:	2d02      	cmp	r5, #2
 800d82c:	d076      	beq.n	800d91c <ucdr_serialize_endian_double+0x160>
 800d82e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800d832:	70fb      	strb	r3, [r7, #3]
 800d834:	2d03      	cmp	r5, #3
 800d836:	d075      	beq.n	800d924 <ucdr_serialize_endian_double+0x168>
 800d838:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800d83c:	713b      	strb	r3, [r7, #4]
 800d83e:	2d04      	cmp	r5, #4
 800d840:	d074      	beq.n	800d92c <ucdr_serialize_endian_double+0x170>
 800d842:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800d846:	717b      	strb	r3, [r7, #5]
 800d848:	2d05      	cmp	r5, #5
 800d84a:	d073      	beq.n	800d934 <ucdr_serialize_endian_double+0x178>
 800d84c:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800d850:	71bb      	strb	r3, [r7, #6]
 800d852:	2d06      	cmp	r5, #6
 800d854:	d072      	beq.n	800d93c <ucdr_serialize_endian_double+0x180>
 800d856:	f89d 3000 	ldrb.w	r3, [sp]
 800d85a:	71fb      	strb	r3, [r7, #7]
 800d85c:	6923      	ldr	r3, [r4, #16]
 800d85e:	68a2      	ldr	r2, [r4, #8]
 800d860:	7da0      	ldrb	r0, [r4, #22]
 800d862:	3308      	adds	r3, #8
 800d864:	1b5d      	subs	r5, r3, r5
 800d866:	444a      	add	r2, r9
 800d868:	2308      	movs	r3, #8
 800d86a:	f080 0001 	eor.w	r0, r0, #1
 800d86e:	60a2      	str	r2, [r4, #8]
 800d870:	6125      	str	r5, [r4, #16]
 800d872:	7563      	strb	r3, [r4, #21]
 800d874:	b003      	add	sp, #12
 800d876:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d87a:	2108      	movs	r1, #8
 800d87c:	4620      	mov	r0, r4
 800d87e:	f000 fa0f 	bl	800dca0 <ucdr_check_final_buffer_behavior>
 800d882:	b348      	cbz	r0, 800d8d8 <ucdr_serialize_endian_double+0x11c>
 800d884:	2e01      	cmp	r6, #1
 800d886:	d02d      	beq.n	800d8e4 <ucdr_serialize_endian_double+0x128>
 800d888:	68a3      	ldr	r3, [r4, #8]
 800d88a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800d88e:	701a      	strb	r2, [r3, #0]
 800d890:	68a3      	ldr	r3, [r4, #8]
 800d892:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d896:	705a      	strb	r2, [r3, #1]
 800d898:	68a3      	ldr	r3, [r4, #8]
 800d89a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800d89e:	709a      	strb	r2, [r3, #2]
 800d8a0:	68a3      	ldr	r3, [r4, #8]
 800d8a2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800d8a6:	70da      	strb	r2, [r3, #3]
 800d8a8:	68a3      	ldr	r3, [r4, #8]
 800d8aa:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800d8ae:	711a      	strb	r2, [r3, #4]
 800d8b0:	68a3      	ldr	r3, [r4, #8]
 800d8b2:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800d8b6:	715a      	strb	r2, [r3, #5]
 800d8b8:	68a3      	ldr	r3, [r4, #8]
 800d8ba:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800d8be:	719a      	strb	r2, [r3, #6]
 800d8c0:	68a3      	ldr	r3, [r4, #8]
 800d8c2:	f89d 2000 	ldrb.w	r2, [sp]
 800d8c6:	71da      	strb	r2, [r3, #7]
 800d8c8:	68a2      	ldr	r2, [r4, #8]
 800d8ca:	6923      	ldr	r3, [r4, #16]
 800d8cc:	3208      	adds	r2, #8
 800d8ce:	3308      	adds	r3, #8
 800d8d0:	2108      	movs	r1, #8
 800d8d2:	60a2      	str	r2, [r4, #8]
 800d8d4:	6123      	str	r3, [r4, #16]
 800d8d6:	7561      	strb	r1, [r4, #21]
 800d8d8:	7da0      	ldrb	r0, [r4, #22]
 800d8da:	f080 0001 	eor.w	r0, r0, #1
 800d8de:	b003      	add	sp, #12
 800d8e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d8e4:	466b      	mov	r3, sp
 800d8e6:	cb03      	ldmia	r3!, {r0, r1}
 800d8e8:	68a3      	ldr	r3, [r4, #8]
 800d8ea:	6018      	str	r0, [r3, #0]
 800d8ec:	6059      	str	r1, [r3, #4]
 800d8ee:	e7eb      	b.n	800d8c8 <ucdr_serialize_endian_double+0x10c>
 800d8f0:	68a2      	ldr	r2, [r4, #8]
 800d8f2:	6923      	ldr	r3, [r4, #16]
 800d8f4:	7da0      	ldrb	r0, [r4, #22]
 800d8f6:	f884 8015 	strb.w	r8, [r4, #21]
 800d8fa:	1b52      	subs	r2, r2, r5
 800d8fc:	1b5b      	subs	r3, r3, r5
 800d8fe:	f080 0001 	eor.w	r0, r0, #1
 800d902:	60a2      	str	r2, [r4, #8]
 800d904:	6123      	str	r3, [r4, #16]
 800d906:	b003      	add	sp, #12
 800d908:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d90c:	68a3      	ldr	r3, [r4, #8]
 800d90e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d912:	701a      	strb	r2, [r3, #0]
 800d914:	68a3      	ldr	r3, [r4, #8]
 800d916:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800d91a:	701a      	strb	r2, [r3, #0]
 800d91c:	68a3      	ldr	r3, [r4, #8]
 800d91e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800d922:	701a      	strb	r2, [r3, #0]
 800d924:	68a3      	ldr	r3, [r4, #8]
 800d926:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800d92a:	701a      	strb	r2, [r3, #0]
 800d92c:	68a3      	ldr	r3, [r4, #8]
 800d92e:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800d932:	701a      	strb	r2, [r3, #0]
 800d934:	68a3      	ldr	r3, [r4, #8]
 800d936:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800d93a:	701a      	strb	r2, [r3, #0]
 800d93c:	68a3      	ldr	r3, [r4, #8]
 800d93e:	f89d 2000 	ldrb.w	r2, [sp]
 800d942:	701a      	strb	r2, [r3, #0]
 800d944:	e78a      	b.n	800d85c <ucdr_serialize_endian_double+0xa0>
 800d946:	466e      	mov	r6, sp
 800d948:	4631      	mov	r1, r6
 800d94a:	462a      	mov	r2, r5
 800d94c:	4638      	mov	r0, r7
 800d94e:	f00d f9ce 	bl	801acee <memcpy>
 800d952:	68a0      	ldr	r0, [r4, #8]
 800d954:	464a      	mov	r2, r9
 800d956:	1971      	adds	r1, r6, r5
 800d958:	f00d f9c9 	bl	801acee <memcpy>
 800d95c:	e77e      	b.n	800d85c <ucdr_serialize_endian_double+0xa0>
 800d95e:	bf00      	nop

0800d960 <ucdr_deserialize_double>:
 800d960:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d964:	460d      	mov	r5, r1
 800d966:	2108      	movs	r1, #8
 800d968:	4604      	mov	r4, r0
 800d96a:	f000 f9ed 	bl	800dd48 <ucdr_buffer_alignment>
 800d96e:	4601      	mov	r1, r0
 800d970:	4620      	mov	r0, r4
 800d972:	f894 9015 	ldrb.w	r9, [r4, #21]
 800d976:	f000 fa2b 	bl	800ddd0 <ucdr_advance_buffer>
 800d97a:	2108      	movs	r1, #8
 800d97c:	4620      	mov	r0, r4
 800d97e:	f000 f983 	bl	800dc88 <ucdr_check_buffer_available_for>
 800d982:	2800      	cmp	r0, #0
 800d984:	d151      	bne.n	800da2a <ucdr_deserialize_double+0xca>
 800d986:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800d98a:	42be      	cmp	r6, r7
 800d98c:	d948      	bls.n	800da20 <ucdr_deserialize_double+0xc0>
 800d98e:	6923      	ldr	r3, [r4, #16]
 800d990:	60a6      	str	r6, [r4, #8]
 800d992:	1bf6      	subs	r6, r6, r7
 800d994:	4433      	add	r3, r6
 800d996:	f1c6 0808 	rsb	r8, r6, #8
 800d99a:	6123      	str	r3, [r4, #16]
 800d99c:	4641      	mov	r1, r8
 800d99e:	4620      	mov	r0, r4
 800d9a0:	f000 f97e 	bl	800dca0 <ucdr_check_final_buffer_behavior>
 800d9a4:	2800      	cmp	r0, #0
 800d9a6:	d06d      	beq.n	800da84 <ucdr_deserialize_double+0x124>
 800d9a8:	7d23      	ldrb	r3, [r4, #20]
 800d9aa:	2b01      	cmp	r3, #1
 800d9ac:	f000 8093 	beq.w	800dad6 <ucdr_deserialize_double+0x176>
 800d9b0:	79fb      	ldrb	r3, [r7, #7]
 800d9b2:	702b      	strb	r3, [r5, #0]
 800d9b4:	2e00      	cmp	r6, #0
 800d9b6:	d072      	beq.n	800da9e <ucdr_deserialize_double+0x13e>
 800d9b8:	79bb      	ldrb	r3, [r7, #6]
 800d9ba:	706b      	strb	r3, [r5, #1]
 800d9bc:	2e01      	cmp	r6, #1
 800d9be:	f105 0302 	add.w	r3, r5, #2
 800d9c2:	d070      	beq.n	800daa6 <ucdr_deserialize_double+0x146>
 800d9c4:	797b      	ldrb	r3, [r7, #5]
 800d9c6:	70ab      	strb	r3, [r5, #2]
 800d9c8:	2e02      	cmp	r6, #2
 800d9ca:	f105 0303 	add.w	r3, r5, #3
 800d9ce:	d06e      	beq.n	800daae <ucdr_deserialize_double+0x14e>
 800d9d0:	793b      	ldrb	r3, [r7, #4]
 800d9d2:	70eb      	strb	r3, [r5, #3]
 800d9d4:	2e03      	cmp	r6, #3
 800d9d6:	f105 0304 	add.w	r3, r5, #4
 800d9da:	d06c      	beq.n	800dab6 <ucdr_deserialize_double+0x156>
 800d9dc:	78fb      	ldrb	r3, [r7, #3]
 800d9de:	712b      	strb	r3, [r5, #4]
 800d9e0:	2e04      	cmp	r6, #4
 800d9e2:	f105 0305 	add.w	r3, r5, #5
 800d9e6:	d06a      	beq.n	800dabe <ucdr_deserialize_double+0x15e>
 800d9e8:	78bb      	ldrb	r3, [r7, #2]
 800d9ea:	716b      	strb	r3, [r5, #5]
 800d9ec:	2e05      	cmp	r6, #5
 800d9ee:	f105 0306 	add.w	r3, r5, #6
 800d9f2:	d068      	beq.n	800dac6 <ucdr_deserialize_double+0x166>
 800d9f4:	787b      	ldrb	r3, [r7, #1]
 800d9f6:	71ab      	strb	r3, [r5, #6]
 800d9f8:	2e06      	cmp	r6, #6
 800d9fa:	f105 0307 	add.w	r3, r5, #7
 800d9fe:	d066      	beq.n	800dace <ucdr_deserialize_double+0x16e>
 800da00:	783b      	ldrb	r3, [r7, #0]
 800da02:	71eb      	strb	r3, [r5, #7]
 800da04:	6923      	ldr	r3, [r4, #16]
 800da06:	68a2      	ldr	r2, [r4, #8]
 800da08:	7da0      	ldrb	r0, [r4, #22]
 800da0a:	3308      	adds	r3, #8
 800da0c:	1b9e      	subs	r6, r3, r6
 800da0e:	2308      	movs	r3, #8
 800da10:	4442      	add	r2, r8
 800da12:	7563      	strb	r3, [r4, #21]
 800da14:	60a2      	str	r2, [r4, #8]
 800da16:	6126      	str	r6, [r4, #16]
 800da18:	f080 0001 	eor.w	r0, r0, #1
 800da1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800da20:	2108      	movs	r1, #8
 800da22:	4620      	mov	r0, r4
 800da24:	f000 f93c 	bl	800dca0 <ucdr_check_final_buffer_behavior>
 800da28:	b310      	cbz	r0, 800da70 <ucdr_deserialize_double+0x110>
 800da2a:	7d23      	ldrb	r3, [r4, #20]
 800da2c:	2b01      	cmp	r3, #1
 800da2e:	68a3      	ldr	r3, [r4, #8]
 800da30:	d023      	beq.n	800da7a <ucdr_deserialize_double+0x11a>
 800da32:	79db      	ldrb	r3, [r3, #7]
 800da34:	702b      	strb	r3, [r5, #0]
 800da36:	68a3      	ldr	r3, [r4, #8]
 800da38:	799b      	ldrb	r3, [r3, #6]
 800da3a:	706b      	strb	r3, [r5, #1]
 800da3c:	68a3      	ldr	r3, [r4, #8]
 800da3e:	795b      	ldrb	r3, [r3, #5]
 800da40:	70ab      	strb	r3, [r5, #2]
 800da42:	68a3      	ldr	r3, [r4, #8]
 800da44:	791b      	ldrb	r3, [r3, #4]
 800da46:	70eb      	strb	r3, [r5, #3]
 800da48:	68a3      	ldr	r3, [r4, #8]
 800da4a:	78db      	ldrb	r3, [r3, #3]
 800da4c:	712b      	strb	r3, [r5, #4]
 800da4e:	68a3      	ldr	r3, [r4, #8]
 800da50:	789b      	ldrb	r3, [r3, #2]
 800da52:	716b      	strb	r3, [r5, #5]
 800da54:	68a3      	ldr	r3, [r4, #8]
 800da56:	785b      	ldrb	r3, [r3, #1]
 800da58:	71ab      	strb	r3, [r5, #6]
 800da5a:	68a3      	ldr	r3, [r4, #8]
 800da5c:	781b      	ldrb	r3, [r3, #0]
 800da5e:	71eb      	strb	r3, [r5, #7]
 800da60:	68a2      	ldr	r2, [r4, #8]
 800da62:	6923      	ldr	r3, [r4, #16]
 800da64:	3208      	adds	r2, #8
 800da66:	3308      	adds	r3, #8
 800da68:	2108      	movs	r1, #8
 800da6a:	60a2      	str	r2, [r4, #8]
 800da6c:	6123      	str	r3, [r4, #16]
 800da6e:	7561      	strb	r1, [r4, #21]
 800da70:	7da0      	ldrb	r0, [r4, #22]
 800da72:	f080 0001 	eor.w	r0, r0, #1
 800da76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800da7a:	681a      	ldr	r2, [r3, #0]
 800da7c:	685b      	ldr	r3, [r3, #4]
 800da7e:	606b      	str	r3, [r5, #4]
 800da80:	602a      	str	r2, [r5, #0]
 800da82:	e7ed      	b.n	800da60 <ucdr_deserialize_double+0x100>
 800da84:	68a2      	ldr	r2, [r4, #8]
 800da86:	6923      	ldr	r3, [r4, #16]
 800da88:	7da0      	ldrb	r0, [r4, #22]
 800da8a:	f884 9015 	strb.w	r9, [r4, #21]
 800da8e:	1b92      	subs	r2, r2, r6
 800da90:	1b9b      	subs	r3, r3, r6
 800da92:	60a2      	str	r2, [r4, #8]
 800da94:	6123      	str	r3, [r4, #16]
 800da96:	f080 0001 	eor.w	r0, r0, #1
 800da9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800da9e:	68a3      	ldr	r3, [r4, #8]
 800daa0:	799b      	ldrb	r3, [r3, #6]
 800daa2:	706b      	strb	r3, [r5, #1]
 800daa4:	1cab      	adds	r3, r5, #2
 800daa6:	68a2      	ldr	r2, [r4, #8]
 800daa8:	7952      	ldrb	r2, [r2, #5]
 800daaa:	f803 2b01 	strb.w	r2, [r3], #1
 800daae:	68a2      	ldr	r2, [r4, #8]
 800dab0:	7912      	ldrb	r2, [r2, #4]
 800dab2:	f803 2b01 	strb.w	r2, [r3], #1
 800dab6:	68a2      	ldr	r2, [r4, #8]
 800dab8:	78d2      	ldrb	r2, [r2, #3]
 800daba:	f803 2b01 	strb.w	r2, [r3], #1
 800dabe:	68a2      	ldr	r2, [r4, #8]
 800dac0:	7892      	ldrb	r2, [r2, #2]
 800dac2:	f803 2b01 	strb.w	r2, [r3], #1
 800dac6:	68a2      	ldr	r2, [r4, #8]
 800dac8:	7852      	ldrb	r2, [r2, #1]
 800daca:	f803 2b01 	strb.w	r2, [r3], #1
 800dace:	68a2      	ldr	r2, [r4, #8]
 800dad0:	7812      	ldrb	r2, [r2, #0]
 800dad2:	701a      	strb	r2, [r3, #0]
 800dad4:	e796      	b.n	800da04 <ucdr_deserialize_double+0xa4>
 800dad6:	4639      	mov	r1, r7
 800dad8:	4632      	mov	r2, r6
 800dada:	4628      	mov	r0, r5
 800dadc:	f00d f907 	bl	801acee <memcpy>
 800dae0:	68a1      	ldr	r1, [r4, #8]
 800dae2:	4642      	mov	r2, r8
 800dae4:	19a8      	adds	r0, r5, r6
 800dae6:	f00d f902 	bl	801acee <memcpy>
 800daea:	e78b      	b.n	800da04 <ucdr_deserialize_double+0xa4>

0800daec <ucdr_deserialize_endian_double>:
 800daec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800daf0:	460f      	mov	r7, r1
 800daf2:	2108      	movs	r1, #8
 800daf4:	4604      	mov	r4, r0
 800daf6:	4615      	mov	r5, r2
 800daf8:	f000 f926 	bl	800dd48 <ucdr_buffer_alignment>
 800dafc:	4601      	mov	r1, r0
 800dafe:	4620      	mov	r0, r4
 800db00:	f894 9015 	ldrb.w	r9, [r4, #21]
 800db04:	f000 f964 	bl	800ddd0 <ucdr_advance_buffer>
 800db08:	2108      	movs	r1, #8
 800db0a:	4620      	mov	r0, r4
 800db0c:	f000 f8bc 	bl	800dc88 <ucdr_check_buffer_available_for>
 800db10:	2800      	cmp	r0, #0
 800db12:	d159      	bne.n	800dbc8 <ucdr_deserialize_endian_double+0xdc>
 800db14:	e9d4 6801 	ldrd	r6, r8, [r4, #4]
 800db18:	4546      	cmp	r6, r8
 800db1a:	d950      	bls.n	800dbbe <ucdr_deserialize_endian_double+0xd2>
 800db1c:	6923      	ldr	r3, [r4, #16]
 800db1e:	60a6      	str	r6, [r4, #8]
 800db20:	eba6 0608 	sub.w	r6, r6, r8
 800db24:	4433      	add	r3, r6
 800db26:	f1c6 0a08 	rsb	sl, r6, #8
 800db2a:	6123      	str	r3, [r4, #16]
 800db2c:	4651      	mov	r1, sl
 800db2e:	4620      	mov	r0, r4
 800db30:	f000 f8b6 	bl	800dca0 <ucdr_check_final_buffer_behavior>
 800db34:	2800      	cmp	r0, #0
 800db36:	d073      	beq.n	800dc20 <ucdr_deserialize_endian_double+0x134>
 800db38:	2f01      	cmp	r7, #1
 800db3a:	f000 809a 	beq.w	800dc72 <ucdr_deserialize_endian_double+0x186>
 800db3e:	f898 3007 	ldrb.w	r3, [r8, #7]
 800db42:	702b      	strb	r3, [r5, #0]
 800db44:	2e00      	cmp	r6, #0
 800db46:	d078      	beq.n	800dc3a <ucdr_deserialize_endian_double+0x14e>
 800db48:	f898 3006 	ldrb.w	r3, [r8, #6]
 800db4c:	706b      	strb	r3, [r5, #1]
 800db4e:	2e01      	cmp	r6, #1
 800db50:	f105 0302 	add.w	r3, r5, #2
 800db54:	d075      	beq.n	800dc42 <ucdr_deserialize_endian_double+0x156>
 800db56:	f898 3005 	ldrb.w	r3, [r8, #5]
 800db5a:	70ab      	strb	r3, [r5, #2]
 800db5c:	2e02      	cmp	r6, #2
 800db5e:	f105 0303 	add.w	r3, r5, #3
 800db62:	d072      	beq.n	800dc4a <ucdr_deserialize_endian_double+0x15e>
 800db64:	f898 3004 	ldrb.w	r3, [r8, #4]
 800db68:	70eb      	strb	r3, [r5, #3]
 800db6a:	2e03      	cmp	r6, #3
 800db6c:	f105 0304 	add.w	r3, r5, #4
 800db70:	d06f      	beq.n	800dc52 <ucdr_deserialize_endian_double+0x166>
 800db72:	f898 3003 	ldrb.w	r3, [r8, #3]
 800db76:	712b      	strb	r3, [r5, #4]
 800db78:	2e04      	cmp	r6, #4
 800db7a:	f105 0305 	add.w	r3, r5, #5
 800db7e:	d06c      	beq.n	800dc5a <ucdr_deserialize_endian_double+0x16e>
 800db80:	f898 3002 	ldrb.w	r3, [r8, #2]
 800db84:	716b      	strb	r3, [r5, #5]
 800db86:	2e05      	cmp	r6, #5
 800db88:	f105 0306 	add.w	r3, r5, #6
 800db8c:	d069      	beq.n	800dc62 <ucdr_deserialize_endian_double+0x176>
 800db8e:	f898 3001 	ldrb.w	r3, [r8, #1]
 800db92:	71ab      	strb	r3, [r5, #6]
 800db94:	2e06      	cmp	r6, #6
 800db96:	f105 0307 	add.w	r3, r5, #7
 800db9a:	d066      	beq.n	800dc6a <ucdr_deserialize_endian_double+0x17e>
 800db9c:	f898 3000 	ldrb.w	r3, [r8]
 800dba0:	71eb      	strb	r3, [r5, #7]
 800dba2:	6923      	ldr	r3, [r4, #16]
 800dba4:	68a2      	ldr	r2, [r4, #8]
 800dba6:	7da0      	ldrb	r0, [r4, #22]
 800dba8:	3308      	adds	r3, #8
 800dbaa:	1b9e      	subs	r6, r3, r6
 800dbac:	2308      	movs	r3, #8
 800dbae:	4452      	add	r2, sl
 800dbb0:	7563      	strb	r3, [r4, #21]
 800dbb2:	60a2      	str	r2, [r4, #8]
 800dbb4:	6126      	str	r6, [r4, #16]
 800dbb6:	f080 0001 	eor.w	r0, r0, #1
 800dbba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dbbe:	2108      	movs	r1, #8
 800dbc0:	4620      	mov	r0, r4
 800dbc2:	f000 f86d 	bl	800dca0 <ucdr_check_final_buffer_behavior>
 800dbc6:	b308      	cbz	r0, 800dc0c <ucdr_deserialize_endian_double+0x120>
 800dbc8:	2f01      	cmp	r7, #1
 800dbca:	68a3      	ldr	r3, [r4, #8]
 800dbcc:	d023      	beq.n	800dc16 <ucdr_deserialize_endian_double+0x12a>
 800dbce:	79db      	ldrb	r3, [r3, #7]
 800dbd0:	702b      	strb	r3, [r5, #0]
 800dbd2:	68a3      	ldr	r3, [r4, #8]
 800dbd4:	799b      	ldrb	r3, [r3, #6]
 800dbd6:	706b      	strb	r3, [r5, #1]
 800dbd8:	68a3      	ldr	r3, [r4, #8]
 800dbda:	795b      	ldrb	r3, [r3, #5]
 800dbdc:	70ab      	strb	r3, [r5, #2]
 800dbde:	68a3      	ldr	r3, [r4, #8]
 800dbe0:	791b      	ldrb	r3, [r3, #4]
 800dbe2:	70eb      	strb	r3, [r5, #3]
 800dbe4:	68a3      	ldr	r3, [r4, #8]
 800dbe6:	78db      	ldrb	r3, [r3, #3]
 800dbe8:	712b      	strb	r3, [r5, #4]
 800dbea:	68a3      	ldr	r3, [r4, #8]
 800dbec:	789b      	ldrb	r3, [r3, #2]
 800dbee:	716b      	strb	r3, [r5, #5]
 800dbf0:	68a3      	ldr	r3, [r4, #8]
 800dbf2:	785b      	ldrb	r3, [r3, #1]
 800dbf4:	71ab      	strb	r3, [r5, #6]
 800dbf6:	68a3      	ldr	r3, [r4, #8]
 800dbf8:	781b      	ldrb	r3, [r3, #0]
 800dbfa:	71eb      	strb	r3, [r5, #7]
 800dbfc:	68a2      	ldr	r2, [r4, #8]
 800dbfe:	6923      	ldr	r3, [r4, #16]
 800dc00:	3208      	adds	r2, #8
 800dc02:	3308      	adds	r3, #8
 800dc04:	2108      	movs	r1, #8
 800dc06:	60a2      	str	r2, [r4, #8]
 800dc08:	6123      	str	r3, [r4, #16]
 800dc0a:	7561      	strb	r1, [r4, #21]
 800dc0c:	7da0      	ldrb	r0, [r4, #22]
 800dc0e:	f080 0001 	eor.w	r0, r0, #1
 800dc12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dc16:	681a      	ldr	r2, [r3, #0]
 800dc18:	685b      	ldr	r3, [r3, #4]
 800dc1a:	606b      	str	r3, [r5, #4]
 800dc1c:	602a      	str	r2, [r5, #0]
 800dc1e:	e7ed      	b.n	800dbfc <ucdr_deserialize_endian_double+0x110>
 800dc20:	68a2      	ldr	r2, [r4, #8]
 800dc22:	6923      	ldr	r3, [r4, #16]
 800dc24:	7da0      	ldrb	r0, [r4, #22]
 800dc26:	f884 9015 	strb.w	r9, [r4, #21]
 800dc2a:	1b92      	subs	r2, r2, r6
 800dc2c:	1b9b      	subs	r3, r3, r6
 800dc2e:	60a2      	str	r2, [r4, #8]
 800dc30:	6123      	str	r3, [r4, #16]
 800dc32:	f080 0001 	eor.w	r0, r0, #1
 800dc36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dc3a:	68a3      	ldr	r3, [r4, #8]
 800dc3c:	799b      	ldrb	r3, [r3, #6]
 800dc3e:	706b      	strb	r3, [r5, #1]
 800dc40:	1cab      	adds	r3, r5, #2
 800dc42:	68a2      	ldr	r2, [r4, #8]
 800dc44:	7952      	ldrb	r2, [r2, #5]
 800dc46:	f803 2b01 	strb.w	r2, [r3], #1
 800dc4a:	68a2      	ldr	r2, [r4, #8]
 800dc4c:	7912      	ldrb	r2, [r2, #4]
 800dc4e:	f803 2b01 	strb.w	r2, [r3], #1
 800dc52:	68a2      	ldr	r2, [r4, #8]
 800dc54:	78d2      	ldrb	r2, [r2, #3]
 800dc56:	f803 2b01 	strb.w	r2, [r3], #1
 800dc5a:	68a2      	ldr	r2, [r4, #8]
 800dc5c:	7892      	ldrb	r2, [r2, #2]
 800dc5e:	f803 2b01 	strb.w	r2, [r3], #1
 800dc62:	68a2      	ldr	r2, [r4, #8]
 800dc64:	7852      	ldrb	r2, [r2, #1]
 800dc66:	f803 2b01 	strb.w	r2, [r3], #1
 800dc6a:	68a2      	ldr	r2, [r4, #8]
 800dc6c:	7812      	ldrb	r2, [r2, #0]
 800dc6e:	701a      	strb	r2, [r3, #0]
 800dc70:	e797      	b.n	800dba2 <ucdr_deserialize_endian_double+0xb6>
 800dc72:	4641      	mov	r1, r8
 800dc74:	4632      	mov	r2, r6
 800dc76:	4628      	mov	r0, r5
 800dc78:	f00d f839 	bl	801acee <memcpy>
 800dc7c:	68a1      	ldr	r1, [r4, #8]
 800dc7e:	4652      	mov	r2, sl
 800dc80:	19a8      	adds	r0, r5, r6
 800dc82:	f00d f834 	bl	801acee <memcpy>
 800dc86:	e78c      	b.n	800dba2 <ucdr_deserialize_endian_double+0xb6>

0800dc88 <ucdr_check_buffer_available_for>:
 800dc88:	7d83      	ldrb	r3, [r0, #22]
 800dc8a:	b93b      	cbnz	r3, 800dc9c <ucdr_check_buffer_available_for+0x14>
 800dc8c:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 800dc90:	4419      	add	r1, r3
 800dc92:	4288      	cmp	r0, r1
 800dc94:	bf34      	ite	cc
 800dc96:	2000      	movcc	r0, #0
 800dc98:	2001      	movcs	r0, #1
 800dc9a:	4770      	bx	lr
 800dc9c:	2000      	movs	r0, #0
 800dc9e:	4770      	bx	lr

0800dca0 <ucdr_check_final_buffer_behavior>:
 800dca0:	7d83      	ldrb	r3, [r0, #22]
 800dca2:	b943      	cbnz	r3, 800dcb6 <ucdr_check_final_buffer_behavior+0x16>
 800dca4:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 800dca8:	4291      	cmp	r1, r2
 800dcaa:	b510      	push	{r4, lr}
 800dcac:	4604      	mov	r4, r0
 800dcae:	d205      	bcs.n	800dcbc <ucdr_check_final_buffer_behavior+0x1c>
 800dcb0:	2301      	movs	r3, #1
 800dcb2:	4618      	mov	r0, r3
 800dcb4:	bd10      	pop	{r4, pc}
 800dcb6:	2300      	movs	r3, #0
 800dcb8:	4618      	mov	r0, r3
 800dcba:	4770      	bx	lr
 800dcbc:	6982      	ldr	r2, [r0, #24]
 800dcbe:	b13a      	cbz	r2, 800dcd0 <ucdr_check_final_buffer_behavior+0x30>
 800dcc0:	69c1      	ldr	r1, [r0, #28]
 800dcc2:	4790      	blx	r2
 800dcc4:	f080 0301 	eor.w	r3, r0, #1
 800dcc8:	b2db      	uxtb	r3, r3
 800dcca:	75a0      	strb	r0, [r4, #22]
 800dccc:	4618      	mov	r0, r3
 800dcce:	bd10      	pop	{r4, pc}
 800dcd0:	2001      	movs	r0, #1
 800dcd2:	75a0      	strb	r0, [r4, #22]
 800dcd4:	e7fa      	b.n	800dccc <ucdr_check_final_buffer_behavior+0x2c>
 800dcd6:	bf00      	nop

0800dcd8 <ucdr_set_on_full_buffer_callback>:
 800dcd8:	e9c0 1206 	strd	r1, r2, [r0, #24]
 800dcdc:	4770      	bx	lr
 800dcde:	bf00      	nop

0800dce0 <ucdr_init_buffer_origin_offset_endian>:
 800dce0:	b410      	push	{r4}
 800dce2:	9c01      	ldr	r4, [sp, #4]
 800dce4:	6001      	str	r1, [r0, #0]
 800dce6:	440a      	add	r2, r1
 800dce8:	6042      	str	r2, [r0, #4]
 800dcea:	190a      	adds	r2, r1, r4
 800dcec:	441c      	add	r4, r3
 800dcee:	e9c0 3403 	strd	r3, r4, [r0, #12]
 800dcf2:	6082      	str	r2, [r0, #8]
 800dcf4:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800dcf8:	7503      	strb	r3, [r0, #20]
 800dcfa:	2200      	movs	r2, #0
 800dcfc:	e9c0 2206 	strd	r2, r2, [r0, #24]
 800dd00:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dd04:	7542      	strb	r2, [r0, #21]
 800dd06:	7582      	strb	r2, [r0, #22]
 800dd08:	4770      	bx	lr
 800dd0a:	bf00      	nop

0800dd0c <ucdr_init_buffer_origin_offset>:
 800dd0c:	b510      	push	{r4, lr}
 800dd0e:	b082      	sub	sp, #8
 800dd10:	9c04      	ldr	r4, [sp, #16]
 800dd12:	9400      	str	r4, [sp, #0]
 800dd14:	2401      	movs	r4, #1
 800dd16:	9401      	str	r4, [sp, #4]
 800dd18:	f7ff ffe2 	bl	800dce0 <ucdr_init_buffer_origin_offset_endian>
 800dd1c:	b002      	add	sp, #8
 800dd1e:	bd10      	pop	{r4, pc}

0800dd20 <ucdr_init_buffer_origin>:
 800dd20:	b510      	push	{r4, lr}
 800dd22:	b082      	sub	sp, #8
 800dd24:	2400      	movs	r4, #0
 800dd26:	9400      	str	r4, [sp, #0]
 800dd28:	f7ff fff0 	bl	800dd0c <ucdr_init_buffer_origin_offset>
 800dd2c:	b002      	add	sp, #8
 800dd2e:	bd10      	pop	{r4, pc}

0800dd30 <ucdr_init_buffer>:
 800dd30:	2300      	movs	r3, #0
 800dd32:	f7ff bff5 	b.w	800dd20 <ucdr_init_buffer_origin>
 800dd36:	bf00      	nop

0800dd38 <ucdr_alignment>:
 800dd38:	fbb0 f3f1 	udiv	r3, r0, r1
 800dd3c:	fb03 0011 	mls	r0, r3, r1, r0
 800dd40:	1a08      	subs	r0, r1, r0
 800dd42:	3901      	subs	r1, #1
 800dd44:	4008      	ands	r0, r1
 800dd46:	4770      	bx	lr

0800dd48 <ucdr_buffer_alignment>:
 800dd48:	7d43      	ldrb	r3, [r0, #21]
 800dd4a:	428b      	cmp	r3, r1
 800dd4c:	d208      	bcs.n	800dd60 <ucdr_buffer_alignment+0x18>
 800dd4e:	6900      	ldr	r0, [r0, #16]
 800dd50:	fbb0 f3f1 	udiv	r3, r0, r1
 800dd54:	fb01 0013 	mls	r0, r1, r3, r0
 800dd58:	1a08      	subs	r0, r1, r0
 800dd5a:	3901      	subs	r1, #1
 800dd5c:	4008      	ands	r0, r1
 800dd5e:	4770      	bx	lr
 800dd60:	2000      	movs	r0, #0
 800dd62:	4770      	bx	lr

0800dd64 <ucdr_align_to>:
 800dd64:	b538      	push	{r3, r4, r5, lr}
 800dd66:	4604      	mov	r4, r0
 800dd68:	460d      	mov	r5, r1
 800dd6a:	f7ff ffed 	bl	800dd48 <ucdr_buffer_alignment>
 800dd6e:	68a3      	ldr	r3, [r4, #8]
 800dd70:	6921      	ldr	r1, [r4, #16]
 800dd72:	7565      	strb	r5, [r4, #21]
 800dd74:	181a      	adds	r2, r3, r0
 800dd76:	6863      	ldr	r3, [r4, #4]
 800dd78:	4293      	cmp	r3, r2
 800dd7a:	4408      	add	r0, r1
 800dd7c:	bf28      	it	cs
 800dd7e:	4613      	movcs	r3, r2
 800dd80:	6120      	str	r0, [r4, #16]
 800dd82:	60a3      	str	r3, [r4, #8]
 800dd84:	bd38      	pop	{r3, r4, r5, pc}
 800dd86:	bf00      	nop

0800dd88 <ucdr_buffer_length>:
 800dd88:	6882      	ldr	r2, [r0, #8]
 800dd8a:	6800      	ldr	r0, [r0, #0]
 800dd8c:	1a10      	subs	r0, r2, r0
 800dd8e:	4770      	bx	lr

0800dd90 <ucdr_buffer_remaining>:
 800dd90:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 800dd94:	1a10      	subs	r0, r2, r0
 800dd96:	4770      	bx	lr

0800dd98 <ucdr_check_final_buffer_behavior_array>:
 800dd98:	b538      	push	{r3, r4, r5, lr}
 800dd9a:	7d83      	ldrb	r3, [r0, #22]
 800dd9c:	b963      	cbnz	r3, 800ddb8 <ucdr_check_final_buffer_behavior_array+0x20>
 800dd9e:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 800dda2:	429a      	cmp	r2, r3
 800dda4:	4604      	mov	r4, r0
 800dda6:	460d      	mov	r5, r1
 800dda8:	d308      	bcc.n	800ddbc <ucdr_check_final_buffer_behavior_array+0x24>
 800ddaa:	b139      	cbz	r1, 800ddbc <ucdr_check_final_buffer_behavior_array+0x24>
 800ddac:	6983      	ldr	r3, [r0, #24]
 800ddae:	b163      	cbz	r3, 800ddca <ucdr_check_final_buffer_behavior_array+0x32>
 800ddb0:	69c1      	ldr	r1, [r0, #28]
 800ddb2:	4798      	blx	r3
 800ddb4:	75a0      	strb	r0, [r4, #22]
 800ddb6:	b108      	cbz	r0, 800ddbc <ucdr_check_final_buffer_behavior_array+0x24>
 800ddb8:	2000      	movs	r0, #0
 800ddba:	bd38      	pop	{r3, r4, r5, pc}
 800ddbc:	4620      	mov	r0, r4
 800ddbe:	f7ff ffe7 	bl	800dd90 <ucdr_buffer_remaining>
 800ddc2:	42a8      	cmp	r0, r5
 800ddc4:	bf28      	it	cs
 800ddc6:	4628      	movcs	r0, r5
 800ddc8:	bd38      	pop	{r3, r4, r5, pc}
 800ddca:	2301      	movs	r3, #1
 800ddcc:	7583      	strb	r3, [r0, #22]
 800ddce:	e7f3      	b.n	800ddb8 <ucdr_check_final_buffer_behavior_array+0x20>

0800ddd0 <ucdr_advance_buffer>:
 800ddd0:	b538      	push	{r3, r4, r5, lr}
 800ddd2:	4604      	mov	r4, r0
 800ddd4:	460d      	mov	r5, r1
 800ddd6:	f7ff ff57 	bl	800dc88 <ucdr_check_buffer_available_for>
 800ddda:	b178      	cbz	r0, 800ddfc <ucdr_advance_buffer+0x2c>
 800dddc:	6923      	ldr	r3, [r4, #16]
 800ddde:	68a2      	ldr	r2, [r4, #8]
 800dde0:	442b      	add	r3, r5
 800dde2:	6123      	str	r3, [r4, #16]
 800dde4:	2301      	movs	r3, #1
 800dde6:	442a      	add	r2, r5
 800dde8:	7563      	strb	r3, [r4, #21]
 800ddea:	60a2      	str	r2, [r4, #8]
 800ddec:	bd38      	pop	{r3, r4, r5, pc}
 800ddee:	68a2      	ldr	r2, [r4, #8]
 800ddf0:	6923      	ldr	r3, [r4, #16]
 800ddf2:	4402      	add	r2, r0
 800ddf4:	4403      	add	r3, r0
 800ddf6:	1a2d      	subs	r5, r5, r0
 800ddf8:	60a2      	str	r2, [r4, #8]
 800ddfa:	6123      	str	r3, [r4, #16]
 800ddfc:	4629      	mov	r1, r5
 800ddfe:	2201      	movs	r2, #1
 800de00:	4620      	mov	r0, r4
 800de02:	f7ff ffc9 	bl	800dd98 <ucdr_check_final_buffer_behavior_array>
 800de06:	2800      	cmp	r0, #0
 800de08:	d1f1      	bne.n	800ddee <ucdr_advance_buffer+0x1e>
 800de0a:	2301      	movs	r3, #1
 800de0c:	7563      	strb	r3, [r4, #21]
 800de0e:	bd38      	pop	{r3, r4, r5, pc}

0800de10 <rcl_get_zero_initialized_init_options>:
 800de10:	2000      	movs	r0, #0
 800de12:	4770      	bx	lr

0800de14 <rcl_init_options_init>:
 800de14:	b084      	sub	sp, #16
 800de16:	b5f0      	push	{r4, r5, r6, r7, lr}
 800de18:	b097      	sub	sp, #92	@ 0x5c
 800de1a:	ae1d      	add	r6, sp, #116	@ 0x74
 800de1c:	e886 000e 	stmia.w	r6, {r1, r2, r3}
 800de20:	2800      	cmp	r0, #0
 800de22:	d058      	beq.n	800ded6 <rcl_init_options_init+0xc2>
 800de24:	6803      	ldr	r3, [r0, #0]
 800de26:	4605      	mov	r5, r0
 800de28:	b133      	cbz	r3, 800de38 <rcl_init_options_init+0x24>
 800de2a:	2464      	movs	r4, #100	@ 0x64
 800de2c:	4620      	mov	r0, r4
 800de2e:	b017      	add	sp, #92	@ 0x5c
 800de30:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800de34:	b004      	add	sp, #16
 800de36:	4770      	bx	lr
 800de38:	4630      	mov	r0, r6
 800de3a:	f001 f997 	bl	800f16c <rcutils_allocator_is_valid>
 800de3e:	2800      	cmp	r0, #0
 800de40:	d049      	beq.n	800ded6 <rcl_init_options_init+0xc2>
 800de42:	46b4      	mov	ip, r6
 800de44:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800de48:	ac11      	add	r4, sp, #68	@ 0x44
 800de4a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800de4c:	f8dc 3000 	ldr.w	r3, [ip]
 800de50:	6023      	str	r3, [r4, #0]
 800de52:	9921      	ldr	r1, [sp, #132]	@ 0x84
 800de54:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800de56:	2050      	movs	r0, #80	@ 0x50
 800de58:	4798      	blx	r3
 800de5a:	4604      	mov	r4, r0
 800de5c:	6028      	str	r0, [r5, #0]
 800de5e:	2800      	cmp	r0, #0
 800de60:	d03b      	beq.n	800deda <rcl_init_options_init+0xc6>
 800de62:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 800de66:	4686      	mov	lr, r0
 800de68:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800de6c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800de70:	f8dc 3000 	ldr.w	r3, [ip]
 800de74:	f8ce 3000 	str.w	r3, [lr]
 800de78:	a802      	add	r0, sp, #8
 800de7a:	f001 fa09 	bl	800f290 <rmw_get_zero_initialized_init_options>
 800de7e:	f10d 0e08 	add.w	lr, sp, #8
 800de82:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800de86:	f104 0c18 	add.w	ip, r4, #24
 800de8a:	682f      	ldr	r7, [r5, #0]
 800de8c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800de90:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800de94:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800de98:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800de9c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800dea0:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800dea4:	ac20      	add	r4, sp, #128	@ 0x80
 800dea6:	e88c 0003 	stmia.w	ip, {r0, r1}
 800deaa:	e894 0003 	ldmia.w	r4, {r0, r1}
 800deae:	e88d 0003 	stmia.w	sp, {r0, r1}
 800deb2:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800deb6:	f107 0018 	add.w	r0, r7, #24
 800deba:	f001 fa17 	bl	800f2ec <rmw_init_options_init>
 800debe:	4604      	mov	r4, r0
 800dec0:	2800      	cmp	r0, #0
 800dec2:	d0b3      	beq.n	800de2c <rcl_init_options_init+0x18>
 800dec4:	9921      	ldr	r1, [sp, #132]	@ 0x84
 800dec6:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800dec8:	6828      	ldr	r0, [r5, #0]
 800deca:	4798      	blx	r3
 800decc:	4620      	mov	r0, r4
 800dece:	f006 fd59 	bl	8014984 <rcl_convert_rmw_ret_to_rcl_ret>
 800ded2:	4604      	mov	r4, r0
 800ded4:	e7aa      	b.n	800de2c <rcl_init_options_init+0x18>
 800ded6:	240b      	movs	r4, #11
 800ded8:	e7a8      	b.n	800de2c <rcl_init_options_init+0x18>
 800deda:	240a      	movs	r4, #10
 800dedc:	e7a6      	b.n	800de2c <rcl_init_options_init+0x18>
 800dede:	bf00      	nop

0800dee0 <rcl_init_options_fini>:
 800dee0:	b530      	push	{r4, r5, lr}
 800dee2:	b087      	sub	sp, #28
 800dee4:	b1f0      	cbz	r0, 800df24 <rcl_init_options_fini+0x44>
 800dee6:	6803      	ldr	r3, [r0, #0]
 800dee8:	4604      	mov	r4, r0
 800deea:	b1db      	cbz	r3, 800df24 <rcl_init_options_fini+0x44>
 800deec:	469c      	mov	ip, r3
 800deee:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800def2:	f10d 0e04 	add.w	lr, sp, #4
 800def6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800defa:	f8dc 3000 	ldr.w	r3, [ip]
 800defe:	f8ce 3000 	str.w	r3, [lr]
 800df02:	a801      	add	r0, sp, #4
 800df04:	f001 f932 	bl	800f16c <rcutils_allocator_is_valid>
 800df08:	b160      	cbz	r0, 800df24 <rcl_init_options_fini+0x44>
 800df0a:	6820      	ldr	r0, [r4, #0]
 800df0c:	3018      	adds	r0, #24
 800df0e:	f001 fac3 	bl	800f498 <rmw_init_options_fini>
 800df12:	4605      	mov	r5, r0
 800df14:	b950      	cbnz	r0, 800df2c <rcl_init_options_fini+0x4c>
 800df16:	6820      	ldr	r0, [r4, #0]
 800df18:	9b02      	ldr	r3, [sp, #8]
 800df1a:	9905      	ldr	r1, [sp, #20]
 800df1c:	4798      	blx	r3
 800df1e:	4628      	mov	r0, r5
 800df20:	b007      	add	sp, #28
 800df22:	bd30      	pop	{r4, r5, pc}
 800df24:	250b      	movs	r5, #11
 800df26:	4628      	mov	r0, r5
 800df28:	b007      	add	sp, #28
 800df2a:	bd30      	pop	{r4, r5, pc}
 800df2c:	f006 fd2a 	bl	8014984 <rcl_convert_rmw_ret_to_rcl_ret>
 800df30:	4605      	mov	r5, r0
 800df32:	e7f8      	b.n	800df26 <rcl_init_options_fini+0x46>

0800df34 <rcl_init_options_copy>:
 800df34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800df38:	b094      	sub	sp, #80	@ 0x50
 800df3a:	2800      	cmp	r0, #0
 800df3c:	d058      	beq.n	800dff0 <rcl_init_options_copy+0xbc>
 800df3e:	4604      	mov	r4, r0
 800df40:	6800      	ldr	r0, [r0, #0]
 800df42:	2800      	cmp	r0, #0
 800df44:	d054      	beq.n	800dff0 <rcl_init_options_copy+0xbc>
 800df46:	460e      	mov	r6, r1
 800df48:	f001 f910 	bl	800f16c <rcutils_allocator_is_valid>
 800df4c:	2800      	cmp	r0, #0
 800df4e:	d04f      	beq.n	800dff0 <rcl_init_options_copy+0xbc>
 800df50:	2e00      	cmp	r6, #0
 800df52:	d04d      	beq.n	800dff0 <rcl_init_options_copy+0xbc>
 800df54:	6833      	ldr	r3, [r6, #0]
 800df56:	b123      	cbz	r3, 800df62 <rcl_init_options_copy+0x2e>
 800df58:	2464      	movs	r4, #100	@ 0x64
 800df5a:	4620      	mov	r0, r4
 800df5c:	b014      	add	sp, #80	@ 0x50
 800df5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800df62:	6827      	ldr	r7, [r4, #0]
 800df64:	46bc      	mov	ip, r7
 800df66:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800df6a:	ad0f      	add	r5, sp, #60	@ 0x3c
 800df6c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800df6e:	f8dc 3000 	ldr.w	r3, [ip]
 800df72:	f8d7 8000 	ldr.w	r8, [r7]
 800df76:	602b      	str	r3, [r5, #0]
 800df78:	4619      	mov	r1, r3
 800df7a:	2050      	movs	r0, #80	@ 0x50
 800df7c:	47c0      	blx	r8
 800df7e:	4605      	mov	r5, r0
 800df80:	6030      	str	r0, [r6, #0]
 800df82:	b3d0      	cbz	r0, 800dffa <rcl_init_options_copy+0xc6>
 800df84:	f10d 0c3c 	add.w	ip, sp, #60	@ 0x3c
 800df88:	4686      	mov	lr, r0
 800df8a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800df8e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800df92:	f8dc 3000 	ldr.w	r3, [ip]
 800df96:	f8ce 3000 	str.w	r3, [lr]
 800df9a:	4668      	mov	r0, sp
 800df9c:	f001 f978 	bl	800f290 <rmw_get_zero_initialized_init_options>
 800dfa0:	46ee      	mov	lr, sp
 800dfa2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800dfa6:	f105 0c18 	add.w	ip, r5, #24
 800dfaa:	6824      	ldr	r4, [r4, #0]
 800dfac:	6835      	ldr	r5, [r6, #0]
 800dfae:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800dfb2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800dfb6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800dfba:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800dfbe:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800dfc2:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800dfc6:	e88c 0003 	stmia.w	ip, {r0, r1}
 800dfca:	f104 0018 	add.w	r0, r4, #24
 800dfce:	f105 0118 	add.w	r1, r5, #24
 800dfd2:	f001 f9ed 	bl	800f3b0 <rmw_init_options_copy>
 800dfd6:	4604      	mov	r4, r0
 800dfd8:	2800      	cmp	r0, #0
 800dfda:	d0be      	beq.n	800df5a <rcl_init_options_copy+0x26>
 800dfdc:	f001 f8d4 	bl	800f188 <rcutils_get_error_string>
 800dfe0:	f001 f8ea 	bl	800f1b8 <rcutils_reset_error>
 800dfe4:	4630      	mov	r0, r6
 800dfe6:	f7ff ff7b 	bl	800dee0 <rcl_init_options_fini>
 800dfea:	b140      	cbz	r0, 800dffe <rcl_init_options_copy+0xca>
 800dfec:	4604      	mov	r4, r0
 800dfee:	e7b4      	b.n	800df5a <rcl_init_options_copy+0x26>
 800dff0:	240b      	movs	r4, #11
 800dff2:	4620      	mov	r0, r4
 800dff4:	b014      	add	sp, #80	@ 0x50
 800dff6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dffa:	240a      	movs	r4, #10
 800dffc:	e7ad      	b.n	800df5a <rcl_init_options_copy+0x26>
 800dffe:	4620      	mov	r0, r4
 800e000:	b014      	add	sp, #80	@ 0x50
 800e002:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e006:	f006 bcbd 	b.w	8014984 <rcl_convert_rmw_ret_to_rcl_ret>
 800e00a:	bf00      	nop

0800e00c <rcl_init_options_set_domain_id>:
 800e00c:	b120      	cbz	r0, 800e018 <rcl_init_options_set_domain_id+0xc>
 800e00e:	6803      	ldr	r3, [r0, #0]
 800e010:	b113      	cbz	r3, 800e018 <rcl_init_options_set_domain_id+0xc>
 800e012:	6259      	str	r1, [r3, #36]	@ 0x24
 800e014:	2000      	movs	r0, #0
 800e016:	4770      	bx	lr
 800e018:	200b      	movs	r0, #11
 800e01a:	4770      	bx	lr

0800e01c <rcl_get_zero_initialized_publisher>:
 800e01c:	4b01      	ldr	r3, [pc, #4]	@ (800e024 <rcl_get_zero_initialized_publisher+0x8>)
 800e01e:	6818      	ldr	r0, [r3, #0]
 800e020:	4770      	bx	lr
 800e022:	bf00      	nop
 800e024:	0801dd4c 	.word	0x0801dd4c

0800e028 <rcl_publisher_init>:
 800e028:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e02c:	b088      	sub	sp, #32
 800e02e:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 800e030:	2d00      	cmp	r5, #0
 800e032:	d069      	beq.n	800e108 <rcl_publisher_init+0xe0>
 800e034:	f105 0950 	add.w	r9, r5, #80	@ 0x50
 800e038:	4604      	mov	r4, r0
 800e03a:	4648      	mov	r0, r9
 800e03c:	460e      	mov	r6, r1
 800e03e:	4690      	mov	r8, r2
 800e040:	461f      	mov	r7, r3
 800e042:	f001 f893 	bl	800f16c <rcutils_allocator_is_valid>
 800e046:	2800      	cmp	r0, #0
 800e048:	d05e      	beq.n	800e108 <rcl_publisher_init+0xe0>
 800e04a:	2c00      	cmp	r4, #0
 800e04c:	d05c      	beq.n	800e108 <rcl_publisher_init+0xe0>
 800e04e:	f8d4 a000 	ldr.w	sl, [r4]
 800e052:	f1ba 0f00 	cmp.w	sl, #0
 800e056:	d004      	beq.n	800e062 <rcl_publisher_init+0x3a>
 800e058:	2764      	movs	r7, #100	@ 0x64
 800e05a:	4638      	mov	r0, r7
 800e05c:	b008      	add	sp, #32
 800e05e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e062:	4630      	mov	r0, r6
 800e064:	f006 ff72 	bl	8014f4c <rcl_node_is_valid>
 800e068:	2800      	cmp	r0, #0
 800e06a:	d052      	beq.n	800e112 <rcl_publisher_init+0xea>
 800e06c:	f1b8 0f00 	cmp.w	r8, #0
 800e070:	d04a      	beq.n	800e108 <rcl_publisher_init+0xe0>
 800e072:	2f00      	cmp	r7, #0
 800e074:	d048      	beq.n	800e108 <rcl_publisher_init+0xe0>
 800e076:	e9cd aa03 	strd	sl, sl, [sp, #12]
 800e07a:	aa07      	add	r2, sp, #28
 800e07c:	9205      	str	r2, [sp, #20]
 800e07e:	f105 0358 	add.w	r3, r5, #88	@ 0x58
 800e082:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800e086:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800e08a:	f8cd a01c 	str.w	sl, [sp, #28]
 800e08e:	4639      	mov	r1, r7
 800e090:	e899 000c 	ldmia.w	r9, {r2, r3}
 800e094:	4630      	mov	r0, r6
 800e096:	f006 ffad 	bl	8014ff4 <rcl_node_resolve_name>
 800e09a:	4607      	mov	r7, r0
 800e09c:	2800      	cmp	r0, #0
 800e09e:	d14f      	bne.n	800e140 <rcl_publisher_init+0x118>
 800e0a0:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 800e0a2:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800e0a4:	20c8      	movs	r0, #200	@ 0xc8
 800e0a6:	4798      	blx	r3
 800e0a8:	6020      	str	r0, [r4, #0]
 800e0aa:	2800      	cmp	r0, #0
 800e0ac:	d04e      	beq.n	800e14c <rcl_publisher_init+0x124>
 800e0ae:	4630      	mov	r0, r6
 800e0b0:	f006 ff6e 	bl	8014f90 <rcl_node_get_rmw_handle>
 800e0b4:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 800e0b8:	9300      	str	r3, [sp, #0]
 800e0ba:	9a07      	ldr	r2, [sp, #28]
 800e0bc:	6827      	ldr	r7, [r4, #0]
 800e0be:	462b      	mov	r3, r5
 800e0c0:	4641      	mov	r1, r8
 800e0c2:	f001 fd15 	bl	800faf0 <rmw_create_publisher>
 800e0c6:	6823      	ldr	r3, [r4, #0]
 800e0c8:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
 800e0cc:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800e0d0:	b370      	cbz	r0, 800e130 <rcl_publisher_init+0x108>
 800e0d2:	f103 0170 	add.w	r1, r3, #112	@ 0x70
 800e0d6:	f001 fde9 	bl	800fcac <rmw_publisher_get_actual_qos>
 800e0da:	6823      	ldr	r3, [r4, #0]
 800e0dc:	4607      	mov	r7, r0
 800e0de:	b9d0      	cbnz	r0, 800e116 <rcl_publisher_init+0xee>
 800e0e0:	f895 2048 	ldrb.w	r2, [r5, #72]	@ 0x48
 800e0e4:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
 800e0e8:	4629      	mov	r1, r5
 800e0ea:	2270      	movs	r2, #112	@ 0x70
 800e0ec:	4618      	mov	r0, r3
 800e0ee:	f00c fdfe 	bl	801acee <memcpy>
 800e0f2:	6832      	ldr	r2, [r6, #0]
 800e0f4:	f8c0 20c0 	str.w	r2, [r0, #192]	@ 0xc0
 800e0f8:	9807      	ldr	r0, [sp, #28]
 800e0fa:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 800e0fc:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800e0fe:	4798      	blx	r3
 800e100:	4638      	mov	r0, r7
 800e102:	b008      	add	sp, #32
 800e104:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e108:	270b      	movs	r7, #11
 800e10a:	4638      	mov	r0, r7
 800e10c:	b008      	add	sp, #32
 800e10e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e112:	27c8      	movs	r7, #200	@ 0xc8
 800e114:	e7a1      	b.n	800e05a <rcl_publisher_init+0x32>
 800e116:	b18b      	cbz	r3, 800e13c <rcl_publisher_init+0x114>
 800e118:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800e11c:	b142      	cbz	r2, 800e130 <rcl_publisher_init+0x108>
 800e11e:	4630      	mov	r0, r6
 800e120:	f006 ff36 	bl	8014f90 <rcl_node_get_rmw_handle>
 800e124:	6823      	ldr	r3, [r4, #0]
 800e126:	f8d3 10c4 	ldr.w	r1, [r3, #196]	@ 0xc4
 800e12a:	f001 fdcf 	bl	800fccc <rmw_destroy_publisher>
 800e12e:	6823      	ldr	r3, [r4, #0]
 800e130:	6d6a      	ldr	r2, [r5, #84]	@ 0x54
 800e132:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800e134:	4618      	mov	r0, r3
 800e136:	4790      	blx	r2
 800e138:	2300      	movs	r3, #0
 800e13a:	6023      	str	r3, [r4, #0]
 800e13c:	2701      	movs	r7, #1
 800e13e:	e7db      	b.n	800e0f8 <rcl_publisher_init+0xd0>
 800e140:	2867      	cmp	r0, #103	@ 0x67
 800e142:	d0d9      	beq.n	800e0f8 <rcl_publisher_init+0xd0>
 800e144:	2869      	cmp	r0, #105	@ 0x69
 800e146:	d003      	beq.n	800e150 <rcl_publisher_init+0x128>
 800e148:	280a      	cmp	r0, #10
 800e14a:	d1f7      	bne.n	800e13c <rcl_publisher_init+0x114>
 800e14c:	270a      	movs	r7, #10
 800e14e:	e7d3      	b.n	800e0f8 <rcl_publisher_init+0xd0>
 800e150:	2767      	movs	r7, #103	@ 0x67
 800e152:	e7d1      	b.n	800e0f8 <rcl_publisher_init+0xd0>

0800e154 <rcl_publisher_get_default_options>:
 800e154:	b570      	push	{r4, r5, r6, lr}
 800e156:	4d14      	ldr	r5, [pc, #80]	@ (800e1a8 <rcl_publisher_get_default_options+0x54>)
 800e158:	4914      	ldr	r1, [pc, #80]	@ (800e1ac <rcl_publisher_get_default_options+0x58>)
 800e15a:	b088      	sub	sp, #32
 800e15c:	4604      	mov	r4, r0
 800e15e:	2250      	movs	r2, #80	@ 0x50
 800e160:	4628      	mov	r0, r5
 800e162:	f00c fdc4 	bl	801acee <memcpy>
 800e166:	a802      	add	r0, sp, #8
 800e168:	f000 fff2 	bl	800f150 <rcutils_get_default_allocator>
 800e16c:	f10d 0c08 	add.w	ip, sp, #8
 800e170:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e174:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 800e178:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800e17c:	466e      	mov	r6, sp
 800e17e:	f8dc 3000 	ldr.w	r3, [ip]
 800e182:	f8ce 3000 	str.w	r3, [lr]
 800e186:	4630      	mov	r0, r6
 800e188:	f001 f892 	bl	800f2b0 <rmw_get_default_publisher_options>
 800e18c:	e896 0003 	ldmia.w	r6, {r0, r1}
 800e190:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 800e194:	e883 0003 	stmia.w	r3, {r0, r1}
 800e198:	2270      	movs	r2, #112	@ 0x70
 800e19a:	4629      	mov	r1, r5
 800e19c:	4620      	mov	r0, r4
 800e19e:	f00c fda6 	bl	801acee <memcpy>
 800e1a2:	4620      	mov	r0, r4
 800e1a4:	b008      	add	sp, #32
 800e1a6:	bd70      	pop	{r4, r5, r6, pc}
 800e1a8:	20006940 	.word	0x20006940
 800e1ac:	0801dd50 	.word	0x0801dd50

0800e1b0 <rcl_publish>:
 800e1b0:	b1f8      	cbz	r0, 800e1f2 <rcl_publish+0x42>
 800e1b2:	6803      	ldr	r3, [r0, #0]
 800e1b4:	b570      	push	{r4, r5, r6, lr}
 800e1b6:	4604      	mov	r4, r0
 800e1b8:	b1b3      	cbz	r3, 800e1e8 <rcl_publish+0x38>
 800e1ba:	4616      	mov	r6, r2
 800e1bc:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800e1c0:	b192      	cbz	r2, 800e1e8 <rcl_publish+0x38>
 800e1c2:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 800e1c6:	460d      	mov	r5, r1
 800e1c8:	f006 fbfa 	bl	80149c0 <rcl_context_is_valid>
 800e1cc:	b160      	cbz	r0, 800e1e8 <rcl_publish+0x38>
 800e1ce:	6823      	ldr	r3, [r4, #0]
 800e1d0:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800e1d4:	b140      	cbz	r0, 800e1e8 <rcl_publish+0x38>
 800e1d6:	b155      	cbz	r5, 800e1ee <rcl_publish+0x3e>
 800e1d8:	4632      	mov	r2, r6
 800e1da:	4629      	mov	r1, r5
 800e1dc:	f001 fc28 	bl	800fa30 <rmw_publish>
 800e1e0:	3800      	subs	r0, #0
 800e1e2:	bf18      	it	ne
 800e1e4:	2001      	movne	r0, #1
 800e1e6:	bd70      	pop	{r4, r5, r6, pc}
 800e1e8:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800e1ec:	bd70      	pop	{r4, r5, r6, pc}
 800e1ee:	200b      	movs	r0, #11
 800e1f0:	bd70      	pop	{r4, r5, r6, pc}
 800e1f2:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800e1f6:	4770      	bx	lr

0800e1f8 <rcl_publisher_is_valid>:
 800e1f8:	b1a0      	cbz	r0, 800e224 <rcl_publisher_is_valid+0x2c>
 800e1fa:	6803      	ldr	r3, [r0, #0]
 800e1fc:	b510      	push	{r4, lr}
 800e1fe:	4604      	mov	r4, r0
 800e200:	b173      	cbz	r3, 800e220 <rcl_publisher_is_valid+0x28>
 800e202:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800e206:	b15a      	cbz	r2, 800e220 <rcl_publisher_is_valid+0x28>
 800e208:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 800e20c:	f006 fbd8 	bl	80149c0 <rcl_context_is_valid>
 800e210:	b130      	cbz	r0, 800e220 <rcl_publisher_is_valid+0x28>
 800e212:	6823      	ldr	r3, [r4, #0]
 800e214:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800e218:	3800      	subs	r0, #0
 800e21a:	bf18      	it	ne
 800e21c:	2001      	movne	r0, #1
 800e21e:	bd10      	pop	{r4, pc}
 800e220:	2000      	movs	r0, #0
 800e222:	bd10      	pop	{r4, pc}
 800e224:	2000      	movs	r0, #0
 800e226:	4770      	bx	lr

0800e228 <rcl_publisher_is_valid_except_context>:
 800e228:	b130      	cbz	r0, 800e238 <rcl_publisher_is_valid_except_context+0x10>
 800e22a:	6800      	ldr	r0, [r0, #0]
 800e22c:	b120      	cbz	r0, 800e238 <rcl_publisher_is_valid_except_context+0x10>
 800e22e:	f8d0 00c4 	ldr.w	r0, [r0, #196]	@ 0xc4
 800e232:	3800      	subs	r0, #0
 800e234:	bf18      	it	ne
 800e236:	2001      	movne	r0, #1
 800e238:	4770      	bx	lr
 800e23a:	bf00      	nop

0800e23c <_rclc_check_for_new_data>:
 800e23c:	2800      	cmp	r0, #0
 800e23e:	d046      	beq.n	800e2ce <_rclc_check_for_new_data+0x92>
 800e240:	b510      	push	{r4, lr}
 800e242:	7802      	ldrb	r2, [r0, #0]
 800e244:	b084      	sub	sp, #16
 800e246:	4603      	mov	r3, r0
 800e248:	2a0a      	cmp	r2, #10
 800e24a:	d842      	bhi.n	800e2d2 <_rclc_check_for_new_data+0x96>
 800e24c:	e8df f002 	tbb	[pc, r2]
 800e250:	14181212 	.word	0x14181212
 800e254:	06060614 	.word	0x06060614
 800e258:	2e1a      	.short	0x2e1a
 800e25a:	16          	.byte	0x16
 800e25b:	00          	.byte	0x00
 800e25c:	6a0a      	ldr	r2, [r1, #32]
 800e25e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800e260:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800e264:	2000      	movs	r0, #0
 800e266:	1a12      	subs	r2, r2, r0
 800e268:	bf18      	it	ne
 800e26a:	2201      	movne	r2, #1
 800e26c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 800e270:	b004      	add	sp, #16
 800e272:	bd10      	pop	{r4, pc}
 800e274:	680a      	ldr	r2, [r1, #0]
 800e276:	e7f2      	b.n	800e25e <_rclc_check_for_new_data+0x22>
 800e278:	698a      	ldr	r2, [r1, #24]
 800e27a:	e7f0      	b.n	800e25e <_rclc_check_for_new_data+0x22>
 800e27c:	688a      	ldr	r2, [r1, #8]
 800e27e:	e7ee      	b.n	800e25e <_rclc_check_for_new_data+0x22>
 800e280:	690a      	ldr	r2, [r1, #16]
 800e282:	e7ec      	b.n	800e25e <_rclc_check_for_new_data+0x22>
 800e284:	685c      	ldr	r4, [r3, #4]
 800e286:	4608      	mov	r0, r1
 800e288:	f104 0244 	add.w	r2, r4, #68	@ 0x44
 800e28c:	f104 0143 	add.w	r1, r4, #67	@ 0x43
 800e290:	f104 0342 	add.w	r3, r4, #66	@ 0x42
 800e294:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800e298:	9300      	str	r3, [sp, #0]
 800e29a:	f104 0240 	add.w	r2, r4, #64	@ 0x40
 800e29e:	f104 0341 	add.w	r3, r4, #65	@ 0x41
 800e2a2:	f104 0110 	add.w	r1, r4, #16
 800e2a6:	f008 fc17 	bl	8016ad8 <rcl_action_client_wait_set_get_entities_ready>
 800e2aa:	e7e1      	b.n	800e270 <_rclc_check_for_new_data+0x34>
 800e2ac:	685c      	ldr	r4, [r3, #4]
 800e2ae:	f104 0223 	add.w	r2, r4, #35	@ 0x23
 800e2b2:	f104 0322 	add.w	r3, r4, #34	@ 0x22
 800e2b6:	e9cd 3200 	strd	r3, r2, [sp]
 800e2ba:	4608      	mov	r0, r1
 800e2bc:	f104 0321 	add.w	r3, r4, #33	@ 0x21
 800e2c0:	f104 0220 	add.w	r2, r4, #32
 800e2c4:	f104 0110 	add.w	r1, r4, #16
 800e2c8:	f008 fe1e 	bl	8016f08 <rcl_action_server_wait_set_get_entities_ready>
 800e2cc:	e7d0      	b.n	800e270 <_rclc_check_for_new_data+0x34>
 800e2ce:	200b      	movs	r0, #11
 800e2d0:	4770      	bx	lr
 800e2d2:	2001      	movs	r0, #1
 800e2d4:	e7cc      	b.n	800e270 <_rclc_check_for_new_data+0x34>
 800e2d6:	bf00      	nop

0800e2d8 <_rclc_take_new_data>:
 800e2d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e2da:	b09b      	sub	sp, #108	@ 0x6c
 800e2dc:	2800      	cmp	r0, #0
 800e2de:	f000 8088 	beq.w	800e3f2 <_rclc_take_new_data+0x11a>
 800e2e2:	7803      	ldrb	r3, [r0, #0]
 800e2e4:	4604      	mov	r4, r0
 800e2e6:	2b0a      	cmp	r3, #10
 800e2e8:	f200 8167 	bhi.w	800e5ba <_rclc_take_new_data+0x2e2>
 800e2ec:	e8df f003 	tbb	[pc, r3]
 800e2f0:	44152d2d 	.word	0x44152d2d
 800e2f4:	19191944 	.word	0x19191944
 800e2f8:	065a      	.short	0x065a
 800e2fa:	15          	.byte	0x15
 800e2fb:	00          	.byte	0x00
 800e2fc:	6840      	ldr	r0, [r0, #4]
 800e2fe:	f890 3020 	ldrb.w	r3, [r0, #32]
 800e302:	2b00      	cmp	r3, #0
 800e304:	f040 80b2 	bne.w	800e46c <_rclc_take_new_data+0x194>
 800e308:	f890 3022 	ldrb.w	r3, [r0, #34]	@ 0x22
 800e30c:	2b00      	cmp	r3, #0
 800e30e:	f040 80e4 	bne.w	800e4da <_rclc_take_new_data+0x202>
 800e312:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 800e316:	2b00      	cmp	r3, #0
 800e318:	d16f      	bne.n	800e3fa <_rclc_take_new_data+0x122>
 800e31a:	2500      	movs	r5, #0
 800e31c:	4628      	mov	r0, r5
 800e31e:	b01b      	add	sp, #108	@ 0x6c
 800e320:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e322:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800e324:	6a0b      	ldr	r3, [r1, #32]
 800e326:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e32a:	2b00      	cmp	r3, #0
 800e32c:	d0f5      	beq.n	800e31a <_rclc_take_new_data+0x42>
 800e32e:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800e332:	f104 0110 	add.w	r1, r4, #16
 800e336:	f006 ff0b 	bl	8015150 <rcl_take_request>
 800e33a:	4605      	mov	r5, r0
 800e33c:	2800      	cmp	r0, #0
 800e33e:	d0ec      	beq.n	800e31a <_rclc_take_new_data+0x42>
 800e340:	f240 2359 	movw	r3, #601	@ 0x259
 800e344:	4298      	cmp	r0, r3
 800e346:	d013      	beq.n	800e370 <_rclc_take_new_data+0x98>
 800e348:	e029      	b.n	800e39e <_rclc_take_new_data+0xc6>
 800e34a:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800e34c:	680b      	ldr	r3, [r1, #0]
 800e34e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e352:	2b00      	cmp	r3, #0
 800e354:	d0e1      	beq.n	800e31a <_rclc_take_new_data+0x42>
 800e356:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 800e35a:	2300      	movs	r3, #0
 800e35c:	aa0a      	add	r2, sp, #40	@ 0x28
 800e35e:	f007 f835 	bl	80153cc <rcl_take>
 800e362:	4605      	mov	r5, r0
 800e364:	2800      	cmp	r0, #0
 800e366:	d0d9      	beq.n	800e31c <_rclc_take_new_data+0x44>
 800e368:	f240 1391 	movw	r3, #401	@ 0x191
 800e36c:	4298      	cmp	r0, r3
 800e36e:	d116      	bne.n	800e39e <_rclc_take_new_data+0xc6>
 800e370:	2300      	movs	r3, #0
 800e372:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
 800e376:	e7d1      	b.n	800e31c <_rclc_take_new_data+0x44>
 800e378:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800e37a:	698b      	ldr	r3, [r1, #24]
 800e37c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e380:	2b00      	cmp	r3, #0
 800e382:	d0ca      	beq.n	800e31a <_rclc_take_new_data+0x42>
 800e384:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800e388:	f104 0110 	add.w	r1, r4, #16
 800e38c:	f006 faa8 	bl	80148e0 <rcl_take_response>
 800e390:	4605      	mov	r5, r0
 800e392:	2800      	cmp	r0, #0
 800e394:	d0c1      	beq.n	800e31a <_rclc_take_new_data+0x42>
 800e396:	f240 13f5 	movw	r3, #501	@ 0x1f5
 800e39a:	4298      	cmp	r0, r3
 800e39c:	d0be      	beq.n	800e31c <_rclc_take_new_data+0x44>
 800e39e:	f000 ff0b 	bl	800f1b8 <rcutils_reset_error>
 800e3a2:	e7bb      	b.n	800e31c <_rclc_take_new_data+0x44>
 800e3a4:	6840      	ldr	r0, [r0, #4]
 800e3a6:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800e3aa:	2b00      	cmp	r3, #0
 800e3ac:	d17d      	bne.n	800e4aa <_rclc_take_new_data+0x1d2>
 800e3ae:	69c3      	ldr	r3, [r0, #28]
 800e3b0:	b11b      	cbz	r3, 800e3ba <_rclc_take_new_data+0xe2>
 800e3b2:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800e3b6:	2b00      	cmp	r3, #0
 800e3b8:	d144      	bne.n	800e444 <_rclc_take_new_data+0x16c>
 800e3ba:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800e3be:	2b00      	cmp	r3, #0
 800e3c0:	f040 80ac 	bne.w	800e51c <_rclc_take_new_data+0x244>
 800e3c4:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800e3c8:	2b00      	cmp	r3, #0
 800e3ca:	d0a6      	beq.n	800e31a <_rclc_take_new_data+0x42>
 800e3cc:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 800e3ce:	a90a      	add	r1, sp, #40	@ 0x28
 800e3d0:	3010      	adds	r0, #16
 800e3d2:	f008 fa59 	bl	8016888 <rcl_action_take_result_response>
 800e3d6:	4605      	mov	r5, r0
 800e3d8:	2800      	cmp	r0, #0
 800e3da:	d1e0      	bne.n	800e39e <_rclc_take_new_data+0xc6>
 800e3dc:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800e3e0:	6860      	ldr	r0, [r4, #4]
 800e3e2:	f008 feb5 	bl	8017150 <rclc_action_find_handle_by_result_request_sequence_number>
 800e3e6:	2800      	cmp	r0, #0
 800e3e8:	d098      	beq.n	800e31c <_rclc_take_new_data+0x44>
 800e3ea:	2301      	movs	r3, #1
 800e3ec:	f880 3023 	strb.w	r3, [r0, #35]	@ 0x23
 800e3f0:	e794      	b.n	800e31c <_rclc_take_new_data+0x44>
 800e3f2:	250b      	movs	r5, #11
 800e3f4:	4628      	mov	r0, r5
 800e3f6:	b01b      	add	sp, #108	@ 0x6c
 800e3f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e3fa:	ae04      	add	r6, sp, #16
 800e3fc:	aa0a      	add	r2, sp, #40	@ 0x28
 800e3fe:	3010      	adds	r0, #16
 800e400:	4631      	mov	r1, r6
 800e402:	f008 fcb5 	bl	8016d70 <rcl_action_take_cancel_request>
 800e406:	4605      	mov	r5, r0
 800e408:	2800      	cmp	r0, #0
 800e40a:	d1c8      	bne.n	800e39e <_rclc_take_new_data+0xc6>
 800e40c:	6860      	ldr	r0, [r4, #4]
 800e40e:	a90a      	add	r1, sp, #40	@ 0x28
 800e410:	f008 fe5c 	bl	80170cc <rclc_action_find_goal_handle_by_uuid>
 800e414:	4607      	mov	r7, r0
 800e416:	2800      	cmp	r0, #0
 800e418:	f000 80bb 	beq.w	800e592 <_rclc_take_new_data+0x2ba>
 800e41c:	f990 0008 	ldrsb.w	r0, [r0, #8]
 800e420:	2101      	movs	r1, #1
 800e422:	f008 fddd 	bl	8016fe0 <rcl_action_transition_goal_state>
 800e426:	2803      	cmp	r0, #3
 800e428:	4684      	mov	ip, r0
 800e42a:	f040 80a7 	bne.w	800e57c <_rclc_take_new_data+0x2a4>
 800e42e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800e430:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 800e434:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e436:	e896 0003 	ldmia.w	r6, {r0, r1}
 800e43a:	e884 0003 	stmia.w	r4, {r0, r1}
 800e43e:	f887 c008 	strb.w	ip, [r7, #8]
 800e442:	e76b      	b.n	800e31c <_rclc_take_new_data+0x44>
 800e444:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800e446:	3010      	adds	r0, #16
 800e448:	f008 fa9e 	bl	8016988 <rcl_action_take_feedback>
 800e44c:	4605      	mov	r5, r0
 800e44e:	2800      	cmp	r0, #0
 800e450:	d1a5      	bne.n	800e39e <_rclc_take_new_data+0xc6>
 800e452:	6860      	ldr	r0, [r4, #4]
 800e454:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800e456:	f008 fe39 	bl	80170cc <rclc_action_find_goal_handle_by_uuid>
 800e45a:	4603      	mov	r3, r0
 800e45c:	2800      	cmp	r0, #0
 800e45e:	f000 80a3 	beq.w	800e5a8 <_rclc_take_new_data+0x2d0>
 800e462:	2201      	movs	r2, #1
 800e464:	6860      	ldr	r0, [r4, #4]
 800e466:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 800e46a:	e7a6      	b.n	800e3ba <_rclc_take_new_data+0xe2>
 800e46c:	f008 fe08 	bl	8017080 <rclc_action_take_goal_handle>
 800e470:	4606      	mov	r6, r0
 800e472:	6860      	ldr	r0, [r4, #4]
 800e474:	2e00      	cmp	r6, #0
 800e476:	f43f af47 	beq.w	800e308 <_rclc_take_new_data+0x30>
 800e47a:	6070      	str	r0, [r6, #4]
 800e47c:	69f2      	ldr	r2, [r6, #28]
 800e47e:	f106 0128 	add.w	r1, r6, #40	@ 0x28
 800e482:	3010      	adds	r0, #16
 800e484:	f008 fbbc 	bl	8016c00 <rcl_action_take_goal_request>
 800e488:	4605      	mov	r5, r0
 800e48a:	2800      	cmp	r0, #0
 800e48c:	f040 808e 	bne.w	800e5ac <_rclc_take_new_data+0x2d4>
 800e490:	69f7      	ldr	r7, [r6, #28]
 800e492:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800e494:	7235      	strb	r5, [r6, #8]
 800e496:	f8c6 0009 	str.w	r0, [r6, #9]
 800e49a:	f8c6 100d 	str.w	r1, [r6, #13]
 800e49e:	6860      	ldr	r0, [r4, #4]
 800e4a0:	f8c6 2011 	str.w	r2, [r6, #17]
 800e4a4:	f8c6 3015 	str.w	r3, [r6, #21]
 800e4a8:	e72e      	b.n	800e308 <_rclc_take_new_data+0x30>
 800e4aa:	aa04      	add	r2, sp, #16
 800e4ac:	a90a      	add	r1, sp, #40	@ 0x28
 800e4ae:	3010      	adds	r0, #16
 800e4b0:	f008 f972 	bl	8016798 <rcl_action_take_goal_response>
 800e4b4:	4605      	mov	r5, r0
 800e4b6:	2800      	cmp	r0, #0
 800e4b8:	f47f af71 	bne.w	800e39e <_rclc_take_new_data+0xc6>
 800e4bc:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800e4c0:	6860      	ldr	r0, [r4, #4]
 800e4c2:	f008 fe33 	bl	801712c <rclc_action_find_handle_by_goal_request_sequence_number>
 800e4c6:	b130      	cbz	r0, 800e4d6 <_rclc_take_new_data+0x1fe>
 800e4c8:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800e4cc:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 800e4d0:	2201      	movs	r2, #1
 800e4d2:	f880 2020 	strb.w	r2, [r0, #32]
 800e4d6:	6860      	ldr	r0, [r4, #4]
 800e4d8:	e769      	b.n	800e3ae <_rclc_take_new_data+0xd6>
 800e4da:	aa04      	add	r2, sp, #16
 800e4dc:	3010      	adds	r0, #16
 800e4de:	a90a      	add	r1, sp, #40	@ 0x28
 800e4e0:	f008 fc06 	bl	8016cf0 <rcl_action_take_result_request>
 800e4e4:	4605      	mov	r5, r0
 800e4e6:	2800      	cmp	r0, #0
 800e4e8:	f47f af59 	bne.w	800e39e <_rclc_take_new_data+0xc6>
 800e4ec:	6860      	ldr	r0, [r4, #4]
 800e4ee:	a904      	add	r1, sp, #16
 800e4f0:	f008 fdec 	bl	80170cc <rclc_action_find_goal_handle_by_uuid>
 800e4f4:	4607      	mov	r7, r0
 800e4f6:	b160      	cbz	r0, 800e512 <_rclc_take_new_data+0x23a>
 800e4f8:	ad0a      	add	r5, sp, #40	@ 0x28
 800e4fa:	f100 0640 	add.w	r6, r0, #64	@ 0x40
 800e4fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e500:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800e502:	e895 0003 	ldmia.w	r5, {r0, r1}
 800e506:	f04f 0c02 	mov.w	ip, #2
 800e50a:	e886 0003 	stmia.w	r6, {r0, r1}
 800e50e:	f887 c008 	strb.w	ip, [r7, #8]
 800e512:	6860      	ldr	r0, [r4, #4]
 800e514:	2300      	movs	r3, #0
 800e516:	f880 3022 	strb.w	r3, [r0, #34]	@ 0x22
 800e51a:	e6fa      	b.n	800e312 <_rclc_take_new_data+0x3a>
 800e51c:	f100 0230 	add.w	r2, r0, #48	@ 0x30
 800e520:	a90a      	add	r1, sp, #40	@ 0x28
 800e522:	3010      	adds	r0, #16
 800e524:	f008 f9f0 	bl	8016908 <rcl_action_take_cancel_response>
 800e528:	4605      	mov	r5, r0
 800e52a:	2800      	cmp	r0, #0
 800e52c:	f47f af37 	bne.w	800e39e <_rclc_take_new_data+0xc6>
 800e530:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800e534:	6860      	ldr	r0, [r4, #4]
 800e536:	f008 fe1d 	bl	8017174 <rclc_action_find_handle_by_cancel_request_sequence_number>
 800e53a:	4606      	mov	r6, r0
 800e53c:	6860      	ldr	r0, [r4, #4]
 800e53e:	2e00      	cmp	r6, #0
 800e540:	f43f af40 	beq.w	800e3c4 <_rclc_take_new_data+0xec>
 800e544:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800e546:	2701      	movs	r7, #1
 800e548:	84b7      	strh	r7, [r6, #36]	@ 0x24
 800e54a:	2b00      	cmp	r3, #0
 800e54c:	f43f af3a 	beq.w	800e3c4 <_rclc_take_new_data+0xec>
 800e550:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800e552:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 800e556:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800e55a:	f008 fdb7 	bl	80170cc <rclc_action_find_goal_handle_by_uuid>
 800e55e:	b138      	cbz	r0, 800e570 <_rclc_take_new_data+0x298>
 800e560:	6860      	ldr	r0, [r4, #4]
 800e562:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800e564:	f886 7025 	strb.w	r7, [r6, #37]	@ 0x25
 800e568:	3501      	adds	r5, #1
 800e56a:	42ab      	cmp	r3, r5
 800e56c:	d8f0      	bhi.n	800e550 <_rclc_take_new_data+0x278>
 800e56e:	e729      	b.n	800e3c4 <_rclc_take_new_data+0xec>
 800e570:	6860      	ldr	r0, [r4, #4]
 800e572:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800e574:	3501      	adds	r5, #1
 800e576:	42ab      	cmp	r3, r5
 800e578:	d8ea      	bhi.n	800e550 <_rclc_take_new_data+0x278>
 800e57a:	e723      	b.n	800e3c4 <_rclc_take_new_data+0xec>
 800e57c:	ab06      	add	r3, sp, #24
 800e57e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e580:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800e584:	2103      	movs	r1, #3
 800e586:	e896 000c 	ldmia.w	r6, {r2, r3}
 800e58a:	6860      	ldr	r0, [r4, #4]
 800e58c:	f008 fe68 	bl	8017260 <rclc_action_server_goal_cancel_reject>
 800e590:	e6c4      	b.n	800e31c <_rclc_take_new_data+0x44>
 800e592:	ab06      	add	r3, sp, #24
 800e594:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e596:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800e59a:	2102      	movs	r1, #2
 800e59c:	e896 000c 	ldmia.w	r6, {r2, r3}
 800e5a0:	6860      	ldr	r0, [r4, #4]
 800e5a2:	f008 fe5d 	bl	8017260 <rclc_action_server_goal_cancel_reject>
 800e5a6:	e6b9      	b.n	800e31c <_rclc_take_new_data+0x44>
 800e5a8:	6860      	ldr	r0, [r4, #4]
 800e5aa:	e706      	b.n	800e3ba <_rclc_take_new_data+0xe2>
 800e5ac:	6860      	ldr	r0, [r4, #4]
 800e5ae:	4631      	mov	r1, r6
 800e5b0:	f008 fd76 	bl	80170a0 <rclc_action_remove_used_goal_handle>
 800e5b4:	f000 fe00 	bl	800f1b8 <rcutils_reset_error>
 800e5b8:	e6b0      	b.n	800e31c <_rclc_take_new_data+0x44>
 800e5ba:	2501      	movs	r5, #1
 800e5bc:	e6ae      	b.n	800e31c <_rclc_take_new_data+0x44>
 800e5be:	bf00      	nop

0800e5c0 <_rclc_execute.part.0>:
 800e5c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e5c2:	7803      	ldrb	r3, [r0, #0]
 800e5c4:	b087      	sub	sp, #28
 800e5c6:	4604      	mov	r4, r0
 800e5c8:	2b0a      	cmp	r3, #10
 800e5ca:	f200 8136 	bhi.w	800e83a <_rclc_execute.part.0+0x27a>
 800e5ce:	e8df f003 	tbb	[pc, r3]
 800e5d2:	435e      	.short	0x435e
 800e5d4:	06a1664f 	.word	0x06a1664f
 800e5d8:	6c1e0606 	.word	0x6c1e0606
 800e5dc:	59          	.byte	0x59
 800e5dd:	00          	.byte	0x00
 800e5de:	2b06      	cmp	r3, #6
 800e5e0:	f000 8122 	beq.w	800e828 <_rclc_execute.part.0+0x268>
 800e5e4:	2b07      	cmp	r3, #7
 800e5e6:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800e5e8:	f040 8118 	bne.w	800e81c <_rclc_execute.part.0+0x25c>
 800e5ec:	e9d0 120a 	ldrd	r1, r2, [r0, #40]	@ 0x28
 800e5f0:	6880      	ldr	r0, [r0, #8]
 800e5f2:	4798      	blx	r3
 800e5f4:	f104 0110 	add.w	r1, r4, #16
 800e5f8:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800e5fa:	6860      	ldr	r0, [r4, #4]
 800e5fc:	f006 fde8 	bl	80151d0 <rcl_send_response>
 800e600:	2800      	cmp	r0, #0
 800e602:	d033      	beq.n	800e66c <_rclc_execute.part.0+0xac>
 800e604:	9005      	str	r0, [sp, #20]
 800e606:	f000 fdd7 	bl	800f1b8 <rcutils_reset_error>
 800e60a:	9805      	ldr	r0, [sp, #20]
 800e60c:	e02e      	b.n	800e66c <_rclc_execute.part.0+0xac>
 800e60e:	6840      	ldr	r0, [r0, #4]
 800e610:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800e614:	2b00      	cmp	r3, #0
 800e616:	f000 8086 	beq.w	800e726 <_rclc_execute.part.0+0x166>
 800e61a:	2600      	movs	r6, #0
 800e61c:	2701      	movs	r7, #1
 800e61e:	e004      	b.n	800e62a <_rclc_execute.part.0+0x6a>
 800e620:	f008 fd08 	bl	8017034 <rclc_action_send_result_request>
 800e624:	b998      	cbnz	r0, 800e64e <_rclc_execute.part.0+0x8e>
 800e626:	722f      	strb	r7, [r5, #8]
 800e628:	6860      	ldr	r0, [r4, #4]
 800e62a:	f008 fdb5 	bl	8017198 <rclc_action_find_first_handle_with_goal_response>
 800e62e:	4605      	mov	r5, r0
 800e630:	2800      	cmp	r0, #0
 800e632:	d077      	beq.n	800e724 <_rclc_execute.part.0+0x164>
 800e634:	6863      	ldr	r3, [r4, #4]
 800e636:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800e638:	699b      	ldr	r3, [r3, #24]
 800e63a:	f895 1021 	ldrb.w	r1, [r5, #33]	@ 0x21
 800e63e:	f885 6020 	strb.w	r6, [r5, #32]
 800e642:	4798      	blx	r3
 800e644:	f895 3021 	ldrb.w	r3, [r5, #33]	@ 0x21
 800e648:	4628      	mov	r0, r5
 800e64a:	2b00      	cmp	r3, #0
 800e64c:	d1e8      	bne.n	800e620 <_rclc_execute.part.0+0x60>
 800e64e:	6860      	ldr	r0, [r4, #4]
 800e650:	4629      	mov	r1, r5
 800e652:	f008 fd25 	bl	80170a0 <rclc_action_remove_used_goal_handle>
 800e656:	e7e7      	b.n	800e628 <_rclc_execute.part.0+0x68>
 800e658:	f890 5039 	ldrb.w	r5, [r0, #57]	@ 0x39
 800e65c:	e9d0 130b 	ldrd	r1, r3, [r0, #44]	@ 0x2c
 800e660:	2d00      	cmp	r5, #0
 800e662:	f000 80c9 	beq.w	800e7f8 <_rclc_execute.part.0+0x238>
 800e666:	6880      	ldr	r0, [r0, #8]
 800e668:	4798      	blx	r3
 800e66a:	2000      	movs	r0, #0
 800e66c:	b007      	add	sp, #28
 800e66e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e670:	6840      	ldr	r0, [r0, #4]
 800e672:	f007 f9bb 	bl	80159ec <rcl_timer_call>
 800e676:	f240 3321 	movw	r3, #801	@ 0x321
 800e67a:	4298      	cmp	r0, r3
 800e67c:	d004      	beq.n	800e688 <_rclc_execute.part.0+0xc8>
 800e67e:	2800      	cmp	r0, #0
 800e680:	d0f4      	beq.n	800e66c <_rclc_execute.part.0+0xac>
 800e682:	e7bf      	b.n	800e604 <_rclc_execute.part.0+0x44>
 800e684:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800e686:	4798      	blx	r3
 800e688:	2000      	movs	r0, #0
 800e68a:	b007      	add	sp, #28
 800e68c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e68e:	f890 5039 	ldrb.w	r5, [r0, #57]	@ 0x39
 800e692:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800e694:	b925      	cbnz	r5, 800e6a0 <_rclc_execute.part.0+0xe0>
 800e696:	4628      	mov	r0, r5
 800e698:	4798      	blx	r3
 800e69a:	4628      	mov	r0, r5
 800e69c:	e7e6      	b.n	800e66c <_rclc_execute.part.0+0xac>
 800e69e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800e6a0:	68a0      	ldr	r0, [r4, #8]
 800e6a2:	4798      	blx	r3
 800e6a4:	2000      	movs	r0, #0
 800e6a6:	b007      	add	sp, #28
 800e6a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e6aa:	6840      	ldr	r0, [r0, #4]
 800e6ac:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 800e6b0:	bb3b      	cbnz	r3, 800e702 <_rclc_execute.part.0+0x142>
 800e6b2:	f890 3020 	ldrb.w	r3, [r0, #32]
 800e6b6:	2b00      	cmp	r3, #0
 800e6b8:	d07b      	beq.n	800e7b2 <_rclc_execute.part.0+0x1f2>
 800e6ba:	f640 0634 	movw	r6, #2100	@ 0x834
 800e6be:	2701      	movs	r7, #1
 800e6c0:	e007      	b.n	800e6d2 <_rclc_execute.part.0+0x112>
 800e6c2:	4628      	mov	r0, r5
 800e6c4:	f008 fd80 	bl	80171c8 <rclc_action_server_response_goal_request>
 800e6c8:	6860      	ldr	r0, [r4, #4]
 800e6ca:	4629      	mov	r1, r5
 800e6cc:	f008 fce8 	bl	80170a0 <rclc_action_remove_used_goal_handle>
 800e6d0:	6860      	ldr	r0, [r4, #4]
 800e6d2:	2100      	movs	r1, #0
 800e6d4:	f008 fd12 	bl	80170fc <rclc_action_find_first_handle_by_status>
 800e6d8:	4605      	mov	r5, r0
 800e6da:	2800      	cmp	r0, #0
 800e6dc:	d066      	beq.n	800e7ac <_rclc_execute.part.0+0x1ec>
 800e6de:	6863      	ldr	r3, [r4, #4]
 800e6e0:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800e6e2:	699b      	ldr	r3, [r3, #24]
 800e6e4:	4798      	blx	r3
 800e6e6:	42b0      	cmp	r0, r6
 800e6e8:	f04f 0100 	mov.w	r1, #0
 800e6ec:	d1e9      	bne.n	800e6c2 <_rclc_execute.part.0+0x102>
 800e6ee:	2101      	movs	r1, #1
 800e6f0:	4628      	mov	r0, r5
 800e6f2:	f008 fd69 	bl	80171c8 <rclc_action_server_response_goal_request>
 800e6f6:	722f      	strb	r7, [r5, #8]
 800e6f8:	e7ea      	b.n	800e6d0 <_rclc_execute.part.0+0x110>
 800e6fa:	6848      	ldr	r0, [r1, #4]
 800e6fc:	f008 fcd0 	bl	80170a0 <rclc_action_remove_used_goal_handle>
 800e700:	6860      	ldr	r0, [r4, #4]
 800e702:	f008 fd07 	bl	8017114 <rclc_action_find_first_terminated_handle>
 800e706:	4601      	mov	r1, r0
 800e708:	2800      	cmp	r0, #0
 800e70a:	d1f6      	bne.n	800e6fa <_rclc_execute.part.0+0x13a>
 800e70c:	6860      	ldr	r0, [r4, #4]
 800e70e:	f880 1024 	strb.w	r1, [r0, #36]	@ 0x24
 800e712:	e7ce      	b.n	800e6b2 <_rclc_execute.part.0+0xf2>
 800e714:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800e716:	6880      	ldr	r0, [r0, #8]
 800e718:	f104 0110 	add.w	r1, r4, #16
 800e71c:	4798      	blx	r3
 800e71e:	2000      	movs	r0, #0
 800e720:	b007      	add	sp, #28
 800e722:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e724:	6860      	ldr	r0, [r4, #4]
 800e726:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800e72a:	b18b      	cbz	r3, 800e750 <_rclc_execute.part.0+0x190>
 800e72c:	68c5      	ldr	r5, [r0, #12]
 800e72e:	b32d      	cbz	r5, 800e77c <_rclc_execute.part.0+0x1bc>
 800e730:	2600      	movs	r6, #0
 800e732:	f895 3022 	ldrb.w	r3, [r5, #34]	@ 0x22
 800e736:	b143      	cbz	r3, 800e74a <_rclc_execute.part.0+0x18a>
 800e738:	69c3      	ldr	r3, [r0, #28]
 800e73a:	f885 6022 	strb.w	r6, [r5, #34]	@ 0x22
 800e73e:	b123      	cbz	r3, 800e74a <_rclc_execute.part.0+0x18a>
 800e740:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800e742:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800e744:	4628      	mov	r0, r5
 800e746:	4798      	blx	r3
 800e748:	6860      	ldr	r0, [r4, #4]
 800e74a:	682d      	ldr	r5, [r5, #0]
 800e74c:	2d00      	cmp	r5, #0
 800e74e:	d1f0      	bne.n	800e732 <_rclc_execute.part.0+0x172>
 800e750:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800e754:	b193      	cbz	r3, 800e77c <_rclc_execute.part.0+0x1bc>
 800e756:	68c5      	ldr	r5, [r0, #12]
 800e758:	b185      	cbz	r5, 800e77c <_rclc_execute.part.0+0x1bc>
 800e75a:	2600      	movs	r6, #0
 800e75c:	f895 3024 	ldrb.w	r3, [r5, #36]	@ 0x24
 800e760:	b14b      	cbz	r3, 800e776 <_rclc_execute.part.0+0x1b6>
 800e762:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800e764:	f885 6024 	strb.w	r6, [r5, #36]	@ 0x24
 800e768:	b12b      	cbz	r3, 800e776 <_rclc_execute.part.0+0x1b6>
 800e76a:	4628      	mov	r0, r5
 800e76c:	f895 1025 	ldrb.w	r1, [r5, #37]	@ 0x25
 800e770:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800e772:	4798      	blx	r3
 800e774:	6860      	ldr	r0, [r4, #4]
 800e776:	682d      	ldr	r5, [r5, #0]
 800e778:	2d00      	cmp	r5, #0
 800e77a:	d1ef      	bne.n	800e75c <_rclc_execute.part.0+0x19c>
 800e77c:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800e780:	2b00      	cmp	r3, #0
 800e782:	d081      	beq.n	800e688 <_rclc_execute.part.0+0xc8>
 800e784:	2700      	movs	r7, #0
 800e786:	e00b      	b.n	800e7a0 <_rclc_execute.part.0+0x1e0>
 800e788:	6863      	ldr	r3, [r4, #4]
 800e78a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800e78c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800e78e:	6a1e      	ldr	r6, [r3, #32]
 800e790:	f885 7023 	strb.w	r7, [r5, #35]	@ 0x23
 800e794:	47b0      	blx	r6
 800e796:	6860      	ldr	r0, [r4, #4]
 800e798:	4629      	mov	r1, r5
 800e79a:	f008 fc81 	bl	80170a0 <rclc_action_remove_used_goal_handle>
 800e79e:	6860      	ldr	r0, [r4, #4]
 800e7a0:	f008 fd06 	bl	80171b0 <rclc_action_find_first_handle_with_result_response>
 800e7a4:	4605      	mov	r5, r0
 800e7a6:	2800      	cmp	r0, #0
 800e7a8:	d1ee      	bne.n	800e788 <_rclc_execute.part.0+0x1c8>
 800e7aa:	e76d      	b.n	800e688 <_rclc_execute.part.0+0xc8>
 800e7ac:	6860      	ldr	r0, [r4, #4]
 800e7ae:	f880 5020 	strb.w	r5, [r0, #32]
 800e7b2:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 800e7b6:	2b00      	cmp	r3, #0
 800e7b8:	f43f af66 	beq.w	800e688 <_rclc_execute.part.0+0xc8>
 800e7bc:	68c5      	ldr	r5, [r0, #12]
 800e7be:	b1b5      	cbz	r5, 800e7ee <_rclc_execute.part.0+0x22e>
 800e7c0:	2602      	movs	r6, #2
 800e7c2:	e001      	b.n	800e7c8 <_rclc_execute.part.0+0x208>
 800e7c4:	682d      	ldr	r5, [r5, #0]
 800e7c6:	b195      	cbz	r5, 800e7ee <_rclc_execute.part.0+0x22e>
 800e7c8:	f995 3008 	ldrsb.w	r3, [r5, #8]
 800e7cc:	2b03      	cmp	r3, #3
 800e7ce:	d1f9      	bne.n	800e7c4 <_rclc_execute.part.0+0x204>
 800e7d0:	69c3      	ldr	r3, [r0, #28]
 800e7d2:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800e7d4:	4628      	mov	r0, r5
 800e7d6:	4798      	blx	r3
 800e7d8:	4603      	mov	r3, r0
 800e7da:	f105 0260 	add.w	r2, r5, #96	@ 0x60
 800e7de:	4628      	mov	r0, r5
 800e7e0:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 800e7e4:	b163      	cbz	r3, 800e800 <_rclc_execute.part.0+0x240>
 800e7e6:	f008 fd0f 	bl	8017208 <rclc_action_server_goal_cancel_accept>
 800e7ea:	6860      	ldr	r0, [r4, #4]
 800e7ec:	e7ea      	b.n	800e7c4 <_rclc_execute.part.0+0x204>
 800e7ee:	2300      	movs	r3, #0
 800e7f0:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 800e7f4:	4618      	mov	r0, r3
 800e7f6:	e739      	b.n	800e66c <_rclc_execute.part.0+0xac>
 800e7f8:	4628      	mov	r0, r5
 800e7fa:	4798      	blx	r3
 800e7fc:	4628      	mov	r0, r5
 800e7fe:	e735      	b.n	800e66c <_rclc_execute.part.0+0xac>
 800e800:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 800e802:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800e806:	f105 0758 	add.w	r7, r5, #88	@ 0x58
 800e80a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e80e:	6860      	ldr	r0, [r4, #4]
 800e810:	2101      	movs	r1, #1
 800e812:	f008 fd25 	bl	8017260 <rclc_action_server_goal_cancel_reject>
 800e816:	722e      	strb	r6, [r5, #8]
 800e818:	6860      	ldr	r0, [r4, #4]
 800e81a:	e7d3      	b.n	800e7c4 <_rclc_execute.part.0+0x204>
 800e81c:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800e81e:	6880      	ldr	r0, [r0, #8]
 800e820:	4798      	blx	r3
 800e822:	f104 0110 	add.w	r1, r4, #16
 800e826:	e6e7      	b.n	800e5f8 <_rclc_execute.part.0+0x38>
 800e828:	f100 0110 	add.w	r1, r0, #16
 800e82c:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800e82e:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 800e830:	6880      	ldr	r0, [r0, #8]
 800e832:	9105      	str	r1, [sp, #20]
 800e834:	4798      	blx	r3
 800e836:	9905      	ldr	r1, [sp, #20]
 800e838:	e6de      	b.n	800e5f8 <_rclc_execute.part.0+0x38>
 800e83a:	2001      	movs	r0, #1
 800e83c:	e716      	b.n	800e66c <_rclc_execute.part.0+0xac>
 800e83e:	bf00      	nop

0800e840 <rclc_executor_trigger_any>:
 800e840:	2800      	cmp	r0, #0
 800e842:	d03f      	beq.n	800e8c4 <rclc_executor_trigger_any+0x84>
 800e844:	2900      	cmp	r1, #0
 800e846:	d03e      	beq.n	800e8c6 <rclc_executor_trigger_any+0x86>
 800e848:	4603      	mov	r3, r0
 800e84a:	f890 0038 	ldrb.w	r0, [r0, #56]	@ 0x38
 800e84e:	2200      	movs	r2, #0
 800e850:	2800      	cmp	r0, #0
 800e852:	d037      	beq.n	800e8c4 <rclc_executor_trigger_any+0x84>
 800e854:	b430      	push	{r4, r5}
 800e856:	f893 c000 	ldrb.w	ip, [r3]
 800e85a:	f1bc 0f08 	cmp.w	ip, #8
 800e85e:	d11e      	bne.n	800e89e <rclc_executor_trigger_any+0x5e>
 800e860:	685c      	ldr	r4, [r3, #4]
 800e862:	6c25      	ldr	r5, [r4, #64]	@ 0x40
 800e864:	f035 457f 	bics.w	r5, r5, #4278190080	@ 0xff000000
 800e868:	d105      	bne.n	800e876 <rclc_executor_trigger_any+0x36>
 800e86a:	f894 0044 	ldrb.w	r0, [r4, #68]	@ 0x44
 800e86e:	b910      	cbnz	r0, 800e876 <rclc_executor_trigger_any+0x36>
 800e870:	f894 0043 	ldrb.w	r0, [r4, #67]	@ 0x43
 800e874:	b128      	cbz	r0, 800e882 <rclc_executor_trigger_any+0x42>
 800e876:	bc30      	pop	{r4, r5}
 800e878:	4770      	bx	lr
 800e87a:	f893 0039 	ldrb.w	r0, [r3, #57]	@ 0x39
 800e87e:	2800      	cmp	r0, #0
 800e880:	d1f9      	bne.n	800e876 <rclc_executor_trigger_any+0x36>
 800e882:	3201      	adds	r2, #1
 800e884:	4291      	cmp	r1, r2
 800e886:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 800e88a:	d018      	beq.n	800e8be <rclc_executor_trigger_any+0x7e>
 800e88c:	f893 0038 	ldrb.w	r0, [r3, #56]	@ 0x38
 800e890:	2800      	cmp	r0, #0
 800e892:	d0f0      	beq.n	800e876 <rclc_executor_trigger_any+0x36>
 800e894:	f893 c000 	ldrb.w	ip, [r3]
 800e898:	f1bc 0f08 	cmp.w	ip, #8
 800e89c:	d0e0      	beq.n	800e860 <rclc_executor_trigger_any+0x20>
 800e89e:	f1bc 0f09 	cmp.w	ip, #9
 800e8a2:	d1ea      	bne.n	800e87a <rclc_executor_trigger_any+0x3a>
 800e8a4:	685c      	ldr	r4, [r3, #4]
 800e8a6:	6a25      	ldr	r5, [r4, #32]
 800e8a8:	2d00      	cmp	r5, #0
 800e8aa:	d1e4      	bne.n	800e876 <rclc_executor_trigger_any+0x36>
 800e8ac:	f894 0024 	ldrb.w	r0, [r4, #36]	@ 0x24
 800e8b0:	2800      	cmp	r0, #0
 800e8b2:	d1e0      	bne.n	800e876 <rclc_executor_trigger_any+0x36>
 800e8b4:	3201      	adds	r2, #1
 800e8b6:	4291      	cmp	r1, r2
 800e8b8:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 800e8bc:	d1e6      	bne.n	800e88c <rclc_executor_trigger_any+0x4c>
 800e8be:	2000      	movs	r0, #0
 800e8c0:	bc30      	pop	{r4, r5}
 800e8c2:	4770      	bx	lr
 800e8c4:	4770      	bx	lr
 800e8c6:	4608      	mov	r0, r1
 800e8c8:	4770      	bx	lr
 800e8ca:	bf00      	nop

0800e8cc <rclc_executor_get_zero_initialized_executor>:
 800e8cc:	b510      	push	{r4, lr}
 800e8ce:	4903      	ldr	r1, [pc, #12]	@ (800e8dc <rclc_executor_get_zero_initialized_executor+0x10>)
 800e8d0:	4604      	mov	r4, r0
 800e8d2:	2288      	movs	r2, #136	@ 0x88
 800e8d4:	f00c fa0b 	bl	801acee <memcpy>
 800e8d8:	4620      	mov	r0, r4
 800e8da:	bd10      	pop	{r4, pc}
 800e8dc:	0801dda0 	.word	0x0801dda0

0800e8e0 <rclc_executor_init>:
 800e8e0:	2800      	cmp	r0, #0
 800e8e2:	d05f      	beq.n	800e9a4 <rclc_executor_init+0xc4>
 800e8e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e8e8:	460c      	mov	r4, r1
 800e8ea:	b0b0      	sub	sp, #192	@ 0xc0
 800e8ec:	2900      	cmp	r1, #0
 800e8ee:	d051      	beq.n	800e994 <rclc_executor_init+0xb4>
 800e8f0:	4605      	mov	r5, r0
 800e8f2:	4618      	mov	r0, r3
 800e8f4:	4616      	mov	r6, r2
 800e8f6:	461f      	mov	r7, r3
 800e8f8:	f000 fc38 	bl	800f16c <rcutils_allocator_is_valid>
 800e8fc:	2800      	cmp	r0, #0
 800e8fe:	d049      	beq.n	800e994 <rclc_executor_init+0xb4>
 800e900:	2e00      	cmp	r6, #0
 800e902:	d047      	beq.n	800e994 <rclc_executor_init+0xb4>
 800e904:	492c      	ldr	r1, [pc, #176]	@ (800e9b8 <rclc_executor_init+0xd8>)
 800e906:	2288      	movs	r2, #136	@ 0x88
 800e908:	a80e      	add	r0, sp, #56	@ 0x38
 800e90a:	f00c f9f0 	bl	801acee <memcpy>
 800e90e:	a90e      	add	r1, sp, #56	@ 0x38
 800e910:	2288      	movs	r2, #136	@ 0x88
 800e912:	4628      	mov	r0, r5
 800e914:	f00c f9eb 	bl	801acee <memcpy>
 800e918:	602c      	str	r4, [r5, #0]
 800e91a:	4668      	mov	r0, sp
 800e91c:	60ae      	str	r6, [r5, #8]
 800e91e:	466c      	mov	r4, sp
 800e920:	f007 f96c 	bl	8015bfc <rcl_get_zero_initialized_wait_set>
 800e924:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e926:	f105 0c14 	add.w	ip, r5, #20
 800e92a:	f8d7 8000 	ldr.w	r8, [r7]
 800e92e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e932:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e934:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e938:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e93a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e93e:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 800e9b0 <rclc_executor_init+0xd0>
 800e942:	6823      	ldr	r3, [r4, #0]
 800e944:	f8cc 3000 	str.w	r3, [ip]
 800e948:	6939      	ldr	r1, [r7, #16]
 800e94a:	612f      	str	r7, [r5, #16]
 800e94c:	ed85 7b1a 	vstr	d7, [r5, #104]	@ 0x68
 800e950:	01b0      	lsls	r0, r6, #6
 800e952:	47c0      	blx	r8
 800e954:	6068      	str	r0, [r5, #4]
 800e956:	b338      	cbz	r0, 800e9a8 <rclc_executor_init+0xc8>
 800e958:	2400      	movs	r4, #0
 800e95a:	e000      	b.n	800e95e <rclc_executor_init+0x7e>
 800e95c:	6868      	ldr	r0, [r5, #4]
 800e95e:	eb00 1084 	add.w	r0, r0, r4, lsl #6
 800e962:	4631      	mov	r1, r6
 800e964:	3401      	adds	r4, #1
 800e966:	f000 fa9f 	bl	800eea8 <rclc_executor_handle_init>
 800e96a:	42a6      	cmp	r6, r4
 800e96c:	d1f6      	bne.n	800e95c <rclc_executor_init+0x7c>
 800e96e:	f105 0048 	add.w	r0, r5, #72	@ 0x48
 800e972:	f000 fa8d 	bl	800ee90 <rclc_executor_handle_counters_zero_init>
 800e976:	4a11      	ldr	r2, [pc, #68]	@ (800e9bc <rclc_executor_init+0xdc>)
 800e978:	686b      	ldr	r3, [r5, #4]
 800e97a:	2000      	movs	r0, #0
 800e97c:	e9c5 201e 	strd	r2, r0, [r5, #120]	@ 0x78
 800e980:	b163      	cbz	r3, 800e99c <rclc_executor_init+0xbc>
 800e982:	692b      	ldr	r3, [r5, #16]
 800e984:	b153      	cbz	r3, 800e99c <rclc_executor_init+0xbc>
 800e986:	68ab      	ldr	r3, [r5, #8]
 800e988:	b143      	cbz	r3, 800e99c <rclc_executor_init+0xbc>
 800e98a:	f885 0080 	strb.w	r0, [r5, #128]	@ 0x80
 800e98e:	b030      	add	sp, #192	@ 0xc0
 800e990:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e994:	200b      	movs	r0, #11
 800e996:	b030      	add	sp, #192	@ 0xc0
 800e998:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e99c:	4618      	mov	r0, r3
 800e99e:	b030      	add	sp, #192	@ 0xc0
 800e9a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e9a4:	200b      	movs	r0, #11
 800e9a6:	4770      	bx	lr
 800e9a8:	200a      	movs	r0, #10
 800e9aa:	e7f4      	b.n	800e996 <rclc_executor_init+0xb6>
 800e9ac:	f3af 8000 	nop.w
 800e9b0:	3b9aca00 	.word	0x3b9aca00
 800e9b4:	00000000 	.word	0x00000000
 800e9b8:	0801dda0 	.word	0x0801dda0
 800e9bc:	0800e841 	.word	0x0800e841

0800e9c0 <rclc_executor_add_subscription>:
 800e9c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e9c2:	f89d e018 	ldrb.w	lr, [sp, #24]
 800e9c6:	b338      	cbz	r0, 800ea18 <rclc_executor_add_subscription+0x58>
 800e9c8:	b331      	cbz	r1, 800ea18 <rclc_executor_add_subscription+0x58>
 800e9ca:	b32a      	cbz	r2, 800ea18 <rclc_executor_add_subscription+0x58>
 800e9cc:	b323      	cbz	r3, 800ea18 <rclc_executor_add_subscription+0x58>
 800e9ce:	4604      	mov	r4, r0
 800e9d0:	e9d0 5002 	ldrd	r5, r0, [r0, #8]
 800e9d4:	42a8      	cmp	r0, r5
 800e9d6:	d301      	bcc.n	800e9dc <rclc_executor_add_subscription+0x1c>
 800e9d8:	2001      	movs	r0, #1
 800e9da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e9dc:	6866      	ldr	r6, [r4, #4]
 800e9de:	0187      	lsls	r7, r0, #6
 800e9e0:	eb06 1c80 	add.w	ip, r6, r0, lsl #6
 800e9e4:	2500      	movs	r5, #0
 800e9e6:	55f5      	strb	r5, [r6, r7]
 800e9e8:	3001      	adds	r0, #1
 800e9ea:	f8cc 3030 	str.w	r3, [ip, #48]	@ 0x30
 800e9ee:	f8cc 502c 	str.w	r5, [ip, #44]	@ 0x2c
 800e9f2:	2301      	movs	r3, #1
 800e9f4:	f104 0514 	add.w	r5, r4, #20
 800e9f8:	e9cc 1201 	strd	r1, r2, [ip, #4]
 800e9fc:	f88c e001 	strb.w	lr, [ip, #1]
 800ea00:	f8ac 3038 	strh.w	r3, [ip, #56]	@ 0x38
 800ea04:	60e0      	str	r0, [r4, #12]
 800ea06:	4628      	mov	r0, r5
 800ea08:	f007 f90c 	bl	8015c24 <rcl_wait_set_is_valid>
 800ea0c:	b930      	cbnz	r0, 800ea1c <rclc_executor_add_subscription+0x5c>
 800ea0e:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 800ea10:	3301      	adds	r3, #1
 800ea12:	2000      	movs	r0, #0
 800ea14:	64a3      	str	r3, [r4, #72]	@ 0x48
 800ea16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ea18:	200b      	movs	r0, #11
 800ea1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ea1c:	4628      	mov	r0, r5
 800ea1e:	f007 f907 	bl	8015c30 <rcl_wait_set_fini>
 800ea22:	2800      	cmp	r0, #0
 800ea24:	d0f3      	beq.n	800ea0e <rclc_executor_add_subscription+0x4e>
 800ea26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ea28 <rclc_executor_add_timer>:
 800ea28:	b300      	cbz	r0, 800ea6c <rclc_executor_add_timer+0x44>
 800ea2a:	b1f9      	cbz	r1, 800ea6c <rclc_executor_add_timer+0x44>
 800ea2c:	b538      	push	{r3, r4, r5, lr}
 800ea2e:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
 800ea32:	4293      	cmp	r3, r2
 800ea34:	4604      	mov	r4, r0
 800ea36:	d301      	bcc.n	800ea3c <rclc_executor_add_timer+0x14>
 800ea38:	2001      	movs	r0, #1
 800ea3a:	bd38      	pop	{r3, r4, r5, pc}
 800ea3c:	6840      	ldr	r0, [r0, #4]
 800ea3e:	eb00 1283 	add.w	r2, r0, r3, lsl #6
 800ea42:	019d      	lsls	r5, r3, #6
 800ea44:	6051      	str	r1, [r2, #4]
 800ea46:	2102      	movs	r1, #2
 800ea48:	5341      	strh	r1, [r0, r5]
 800ea4a:	3301      	adds	r3, #1
 800ea4c:	2000      	movs	r0, #0
 800ea4e:	2101      	movs	r1, #1
 800ea50:	f104 0514 	add.w	r5, r4, #20
 800ea54:	62d0      	str	r0, [r2, #44]	@ 0x2c
 800ea56:	8711      	strh	r1, [r2, #56]	@ 0x38
 800ea58:	4628      	mov	r0, r5
 800ea5a:	60e3      	str	r3, [r4, #12]
 800ea5c:	f007 f8e2 	bl	8015c24 <rcl_wait_set_is_valid>
 800ea60:	b930      	cbnz	r0, 800ea70 <rclc_executor_add_timer+0x48>
 800ea62:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800ea64:	3301      	adds	r3, #1
 800ea66:	2000      	movs	r0, #0
 800ea68:	64e3      	str	r3, [r4, #76]	@ 0x4c
 800ea6a:	bd38      	pop	{r3, r4, r5, pc}
 800ea6c:	200b      	movs	r0, #11
 800ea6e:	4770      	bx	lr
 800ea70:	4628      	mov	r0, r5
 800ea72:	f007 f8dd 	bl	8015c30 <rcl_wait_set_fini>
 800ea76:	2800      	cmp	r0, #0
 800ea78:	d0f3      	beq.n	800ea62 <rclc_executor_add_timer+0x3a>
 800ea7a:	bd38      	pop	{r3, r4, r5, pc}

0800ea7c <rclc_executor_prepare>:
 800ea7c:	2800      	cmp	r0, #0
 800ea7e:	d044      	beq.n	800eb0a <rclc_executor_prepare+0x8e>
 800ea80:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ea82:	f100 0514 	add.w	r5, r0, #20
 800ea86:	b09b      	sub	sp, #108	@ 0x6c
 800ea88:	4604      	mov	r4, r0
 800ea8a:	4628      	mov	r0, r5
 800ea8c:	f007 f8ca 	bl	8015c24 <rcl_wait_set_is_valid>
 800ea90:	b110      	cbz	r0, 800ea98 <rclc_executor_prepare+0x1c>
 800ea92:	2000      	movs	r0, #0
 800ea94:	b01b      	add	sp, #108	@ 0x6c
 800ea96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ea98:	4628      	mov	r0, r5
 800ea9a:	f007 f8c9 	bl	8015c30 <rcl_wait_set_fini>
 800ea9e:	2800      	cmp	r0, #0
 800eaa0:	d130      	bne.n	800eb04 <rclc_executor_prepare+0x88>
 800eaa2:	a80c      	add	r0, sp, #48	@ 0x30
 800eaa4:	f007 f8aa 	bl	8015bfc <rcl_get_zero_initialized_wait_set>
 800eaa8:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 800eaac:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800eab0:	46ae      	mov	lr, r5
 800eab2:	6927      	ldr	r7, [r4, #16]
 800eab4:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800eab8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800eabc:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800eac0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800eac4:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800eac8:	f8dc 3000 	ldr.w	r3, [ip]
 800eacc:	f8ce 3000 	str.w	r3, [lr]
 800ead0:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800ead2:	ae04      	add	r6, sp, #16
 800ead4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800ead6:	683b      	ldr	r3, [r7, #0]
 800ead8:	6822      	ldr	r2, [r4, #0]
 800eada:	6033      	str	r3, [r6, #0]
 800eadc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800eade:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 800eae0:	e9cd 3202 	strd	r3, r2, [sp, #8]
 800eae4:	e9d4 3213 	ldrd	r3, r2, [r4, #76]	@ 0x4c
 800eae8:	e9cd 2100 	strd	r2, r1, [sp]
 800eaec:	4628      	mov	r0, r5
 800eaee:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 800eaf0:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800eaf2:	f007 fb9b 	bl	801622c <rcl_wait_set_init>
 800eaf6:	2800      	cmp	r0, #0
 800eaf8:	d0cc      	beq.n	800ea94 <rclc_executor_prepare+0x18>
 800eafa:	900b      	str	r0, [sp, #44]	@ 0x2c
 800eafc:	f000 fb5c 	bl	800f1b8 <rcutils_reset_error>
 800eb00:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800eb02:	e7c7      	b.n	800ea94 <rclc_executor_prepare+0x18>
 800eb04:	f000 fb58 	bl	800f1b8 <rcutils_reset_error>
 800eb08:	e7cb      	b.n	800eaa2 <rclc_executor_prepare+0x26>
 800eb0a:	200b      	movs	r0, #11
 800eb0c:	4770      	bx	lr
 800eb0e:	bf00      	nop

0800eb10 <rclc_executor_spin_some.part.0>:
 800eb10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb14:	f100 0614 	add.w	r6, r0, #20
 800eb18:	b083      	sub	sp, #12
 800eb1a:	4691      	mov	r9, r2
 800eb1c:	4698      	mov	r8, r3
 800eb1e:	4605      	mov	r5, r0
 800eb20:	f7ff ffac 	bl	800ea7c <rclc_executor_prepare>
 800eb24:	4630      	mov	r0, r6
 800eb26:	f007 f94f 	bl	8015dc8 <rcl_wait_set_clear>
 800eb2a:	4607      	mov	r7, r0
 800eb2c:	2800      	cmp	r0, #0
 800eb2e:	f040 80ed 	bne.w	800ed0c <rclc_executor_spin_some.part.0+0x1fc>
 800eb32:	68ab      	ldr	r3, [r5, #8]
 800eb34:	4604      	mov	r4, r0
 800eb36:	b303      	cbz	r3, 800eb7a <rclc_executor_spin_some.part.0+0x6a>
 800eb38:	6869      	ldr	r1, [r5, #4]
 800eb3a:	eb01 1c84 	add.w	ip, r1, r4, lsl #6
 800eb3e:	01a2      	lsls	r2, r4, #6
 800eb40:	f89c 3038 	ldrb.w	r3, [ip, #56]	@ 0x38
 800eb44:	b1cb      	cbz	r3, 800eb7a <rclc_executor_spin_some.part.0+0x6a>
 800eb46:	5c8b      	ldrb	r3, [r1, r2]
 800eb48:	2b0a      	cmp	r3, #10
 800eb4a:	f200 80d8 	bhi.w	800ecfe <rclc_executor_spin_some.part.0+0x1ee>
 800eb4e:	e8df f003 	tbb	[pc, r3]
 800eb52:	9c9c      	.short	0x9c9c
 800eb54:	068c8ca7 	.word	0x068c8ca7
 800eb58:	bdc90606 	.word	0xbdc90606
 800eb5c:	b2          	.byte	0xb2
 800eb5d:	00          	.byte	0x00
 800eb5e:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800eb62:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800eb66:	4630      	mov	r0, r6
 800eb68:	f007 fc76 	bl	8016458 <rcl_wait_set_add_service>
 800eb6c:	2800      	cmp	r0, #0
 800eb6e:	f040 8086 	bne.w	800ec7e <rclc_executor_spin_some.part.0+0x16e>
 800eb72:	68ab      	ldr	r3, [r5, #8]
 800eb74:	3401      	adds	r4, #1
 800eb76:	429c      	cmp	r4, r3
 800eb78:	d3de      	bcc.n	800eb38 <rclc_executor_spin_some.part.0+0x28>
 800eb7a:	4643      	mov	r3, r8
 800eb7c:	464a      	mov	r2, r9
 800eb7e:	4630      	mov	r0, r6
 800eb80:	f007 fc96 	bl	80164b0 <rcl_wait>
 800eb84:	f895 3080 	ldrb.w	r3, [r5, #128]	@ 0x80
 800eb88:	2b00      	cmp	r3, #0
 800eb8a:	f000 80c7 	beq.w	800ed1c <rclc_executor_spin_some.part.0+0x20c>
 800eb8e:	2b01      	cmp	r3, #1
 800eb90:	f040 80b5 	bne.w	800ecfe <rclc_executor_spin_some.part.0+0x1ee>
 800eb94:	68ab      	ldr	r3, [r5, #8]
 800eb96:	2b00      	cmp	r3, #0
 800eb98:	f000 8159 	beq.w	800ee4e <rclc_executor_spin_some.part.0+0x33e>
 800eb9c:	2400      	movs	r4, #0
 800eb9e:	46a0      	mov	r8, r4
 800eba0:	f240 1991 	movw	r9, #401	@ 0x191
 800eba4:	e00a      	b.n	800ebbc <rclc_executor_spin_some.part.0+0xac>
 800eba6:	f7ff fb49 	bl	800e23c <_rclc_check_for_new_data>
 800ebaa:	4604      	mov	r4, r0
 800ebac:	b110      	cbz	r0, 800ebb4 <rclc_executor_spin_some.part.0+0xa4>
 800ebae:	4548      	cmp	r0, r9
 800ebb0:	f040 80b2 	bne.w	800ed18 <rclc_executor_spin_some.part.0+0x208>
 800ebb4:	68ab      	ldr	r3, [r5, #8]
 800ebb6:	4598      	cmp	r8, r3
 800ebb8:	f080 8126 	bcs.w	800ee08 <rclc_executor_spin_some.part.0+0x2f8>
 800ebbc:	686a      	ldr	r2, [r5, #4]
 800ebbe:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 800ebc2:	4631      	mov	r1, r6
 800ebc4:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 800ebc8:	f108 0801 	add.w	r8, r8, #1
 800ebcc:	f1bc 0f00 	cmp.w	ip, #0
 800ebd0:	d1e9      	bne.n	800eba6 <rclc_executor_spin_some.part.0+0x96>
 800ebd2:	4619      	mov	r1, r3
 800ebd4:	4610      	mov	r0, r2
 800ebd6:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 800ebda:	4798      	blx	r3
 800ebdc:	2800      	cmp	r0, #0
 800ebde:	f000 809b 	beq.w	800ed18 <rclc_executor_spin_some.part.0+0x208>
 800ebe2:	68ab      	ldr	r3, [r5, #8]
 800ebe4:	2b00      	cmp	r3, #0
 800ebe6:	f000 8097 	beq.w	800ed18 <rclc_executor_spin_some.part.0+0x208>
 800ebea:	f04f 0800 	mov.w	r8, #0
 800ebee:	f240 1991 	movw	r9, #401	@ 0x191
 800ebf2:	e009      	b.n	800ec08 <rclc_executor_spin_some.part.0+0xf8>
 800ebf4:	f7ff fb70 	bl	800e2d8 <_rclc_take_new_data>
 800ebf8:	4604      	mov	r4, r0
 800ebfa:	b110      	cbz	r0, 800ec02 <rclc_executor_spin_some.part.0+0xf2>
 800ebfc:	4548      	cmp	r0, r9
 800ebfe:	f040 808b 	bne.w	800ed18 <rclc_executor_spin_some.part.0+0x208>
 800ec02:	68ab      	ldr	r3, [r5, #8]
 800ec04:	4598      	cmp	r8, r3
 800ec06:	d209      	bcs.n	800ec1c <rclc_executor_spin_some.part.0+0x10c>
 800ec08:	6868      	ldr	r0, [r5, #4]
 800ec0a:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 800ec0e:	4631      	mov	r1, r6
 800ec10:	f890 2038 	ldrb.w	r2, [r0, #56]	@ 0x38
 800ec14:	f108 0801 	add.w	r8, r8, #1
 800ec18:	2a00      	cmp	r2, #0
 800ec1a:	d1eb      	bne.n	800ebf4 <rclc_executor_spin_some.part.0+0xe4>
 800ec1c:	2600      	movs	r6, #0
 800ec1e:	b97b      	cbnz	r3, 800ec40 <rclc_executor_spin_some.part.0+0x130>
 800ec20:	e07a      	b.n	800ed18 <rclc_executor_spin_some.part.0+0x208>
 800ec22:	f812 200c 	ldrb.w	r2, [r2, ip]
 800ec26:	2a08      	cmp	r2, #8
 800ec28:	f000 80fd 	beq.w	800ee26 <rclc_executor_spin_some.part.0+0x316>
 800ec2c:	2a09      	cmp	r2, #9
 800ec2e:	f000 80ef 	beq.w	800ee10 <rclc_executor_spin_some.part.0+0x300>
 800ec32:	f890 2039 	ldrb.w	r2, [r0, #57]	@ 0x39
 800ec36:	b98a      	cbnz	r2, 800ec5c <rclc_executor_spin_some.part.0+0x14c>
 800ec38:	3601      	adds	r6, #1
 800ec3a:	429e      	cmp	r6, r3
 800ec3c:	d262      	bcs.n	800ed04 <rclc_executor_spin_some.part.0+0x1f4>
 800ec3e:	2400      	movs	r4, #0
 800ec40:	686a      	ldr	r2, [r5, #4]
 800ec42:	eb02 1086 	add.w	r0, r2, r6, lsl #6
 800ec46:	ea4f 1c86 	mov.w	ip, r6, lsl #6
 800ec4a:	f890 1038 	ldrb.w	r1, [r0, #56]	@ 0x38
 800ec4e:	2900      	cmp	r1, #0
 800ec50:	d062      	beq.n	800ed18 <rclc_executor_spin_some.part.0+0x208>
 800ec52:	7841      	ldrb	r1, [r0, #1]
 800ec54:	2900      	cmp	r1, #0
 800ec56:	d0e4      	beq.n	800ec22 <rclc_executor_spin_some.part.0+0x112>
 800ec58:	2901      	cmp	r1, #1
 800ec5a:	d1ed      	bne.n	800ec38 <rclc_executor_spin_some.part.0+0x128>
 800ec5c:	f7ff fcb0 	bl	800e5c0 <_rclc_execute.part.0>
 800ec60:	2800      	cmp	r0, #0
 800ec62:	f040 80b6 	bne.w	800edd2 <rclc_executor_spin_some.part.0+0x2c2>
 800ec66:	68ab      	ldr	r3, [r5, #8]
 800ec68:	e7e6      	b.n	800ec38 <rclc_executor_spin_some.part.0+0x128>
 800ec6a:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800ec6e:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800ec72:	4630      	mov	r0, r6
 800ec74:	f007 fbc4 	bl	8016400 <rcl_wait_set_add_client>
 800ec78:	2800      	cmp	r0, #0
 800ec7a:	f43f af7a 	beq.w	800eb72 <rclc_executor_spin_some.part.0+0x62>
 800ec7e:	9001      	str	r0, [sp, #4]
 800ec80:	f000 fa9a 	bl	800f1b8 <rcutils_reset_error>
 800ec84:	9801      	ldr	r0, [sp, #4]
 800ec86:	4607      	mov	r7, r0
 800ec88:	e03c      	b.n	800ed04 <rclc_executor_spin_some.part.0+0x1f4>
 800ec8a:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800ec8e:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800ec92:	4630      	mov	r0, r6
 800ec94:	f007 f86c 	bl	8015d70 <rcl_wait_set_add_subscription>
 800ec98:	2800      	cmp	r0, #0
 800ec9a:	f43f af6a 	beq.w	800eb72 <rclc_executor_spin_some.part.0+0x62>
 800ec9e:	e7ee      	b.n	800ec7e <rclc_executor_spin_some.part.0+0x16e>
 800eca0:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800eca4:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800eca8:	4630      	mov	r0, r6
 800ecaa:	f007 fb79 	bl	80163a0 <rcl_wait_set_add_timer>
 800ecae:	2800      	cmp	r0, #0
 800ecb0:	f43f af5f 	beq.w	800eb72 <rclc_executor_spin_some.part.0+0x62>
 800ecb4:	e7e3      	b.n	800ec7e <rclc_executor_spin_some.part.0+0x16e>
 800ecb6:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800ecba:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800ecbe:	4630      	mov	r0, r6
 800ecc0:	f007 fb42 	bl	8016348 <rcl_wait_set_add_guard_condition>
 800ecc4:	2800      	cmp	r0, #0
 800ecc6:	f43f af54 	beq.w	800eb72 <rclc_executor_spin_some.part.0+0x62>
 800ecca:	e7d8      	b.n	800ec7e <rclc_executor_spin_some.part.0+0x16e>
 800eccc:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800ecd0:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800ecd4:	3110      	adds	r1, #16
 800ecd6:	4630      	mov	r0, r6
 800ecd8:	f008 f8c2 	bl	8016e60 <rcl_action_wait_set_add_action_server>
 800ecdc:	2800      	cmp	r0, #0
 800ecde:	f43f af48 	beq.w	800eb72 <rclc_executor_spin_some.part.0+0x62>
 800ece2:	e7cc      	b.n	800ec7e <rclc_executor_spin_some.part.0+0x16e>
 800ece4:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800ece8:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800ecec:	3110      	adds	r1, #16
 800ecee:	2300      	movs	r3, #0
 800ecf0:	4630      	mov	r0, r6
 800ecf2:	f007 fe8d 	bl	8016a10 <rcl_action_wait_set_add_action_client>
 800ecf6:	2800      	cmp	r0, #0
 800ecf8:	f43f af3b 	beq.w	800eb72 <rclc_executor_spin_some.part.0+0x62>
 800ecfc:	e7bf      	b.n	800ec7e <rclc_executor_spin_some.part.0+0x16e>
 800ecfe:	f000 fa5b 	bl	800f1b8 <rcutils_reset_error>
 800ed02:	2701      	movs	r7, #1
 800ed04:	4638      	mov	r0, r7
 800ed06:	b003      	add	sp, #12
 800ed08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed0c:	f000 fa54 	bl	800f1b8 <rcutils_reset_error>
 800ed10:	4638      	mov	r0, r7
 800ed12:	b003      	add	sp, #12
 800ed14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed18:	4627      	mov	r7, r4
 800ed1a:	e7f3      	b.n	800ed04 <rclc_executor_spin_some.part.0+0x1f4>
 800ed1c:	68ab      	ldr	r3, [r5, #8]
 800ed1e:	2b00      	cmp	r3, #0
 800ed20:	f000 8092 	beq.w	800ee48 <rclc_executor_spin_some.part.0+0x338>
 800ed24:	2400      	movs	r4, #0
 800ed26:	46a0      	mov	r8, r4
 800ed28:	f240 1991 	movw	r9, #401	@ 0x191
 800ed2c:	e008      	b.n	800ed40 <rclc_executor_spin_some.part.0+0x230>
 800ed2e:	f7ff fa85 	bl	800e23c <_rclc_check_for_new_data>
 800ed32:	4604      	mov	r4, r0
 800ed34:	b108      	cbz	r0, 800ed3a <rclc_executor_spin_some.part.0+0x22a>
 800ed36:	4548      	cmp	r0, r9
 800ed38:	d1ee      	bne.n	800ed18 <rclc_executor_spin_some.part.0+0x208>
 800ed3a:	68ab      	ldr	r3, [r5, #8]
 800ed3c:	4598      	cmp	r8, r3
 800ed3e:	d265      	bcs.n	800ee0c <rclc_executor_spin_some.part.0+0x2fc>
 800ed40:	686a      	ldr	r2, [r5, #4]
 800ed42:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 800ed46:	4631      	mov	r1, r6
 800ed48:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 800ed4c:	f108 0801 	add.w	r8, r8, #1
 800ed50:	f1bc 0f00 	cmp.w	ip, #0
 800ed54:	d1eb      	bne.n	800ed2e <rclc_executor_spin_some.part.0+0x21e>
 800ed56:	4619      	mov	r1, r3
 800ed58:	4610      	mov	r0, r2
 800ed5a:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 800ed5e:	4798      	blx	r3
 800ed60:	2800      	cmp	r0, #0
 800ed62:	d0d9      	beq.n	800ed18 <rclc_executor_spin_some.part.0+0x208>
 800ed64:	68ab      	ldr	r3, [r5, #8]
 800ed66:	2b00      	cmp	r3, #0
 800ed68:	d0d6      	beq.n	800ed18 <rclc_executor_spin_some.part.0+0x208>
 800ed6a:	f04f 0800 	mov.w	r8, #0
 800ed6e:	f240 1991 	movw	r9, #401	@ 0x191
 800ed72:	f240 2a59 	movw	sl, #601	@ 0x259
 800ed76:	e00e      	b.n	800ed96 <rclc_executor_spin_some.part.0+0x286>
 800ed78:	f813 300b 	ldrb.w	r3, [r3, fp]
 800ed7c:	2b08      	cmp	r3, #8
 800ed7e:	d033      	beq.n	800ede8 <rclc_executor_spin_some.part.0+0x2d8>
 800ed80:	2b09      	cmp	r3, #9
 800ed82:	d028      	beq.n	800edd6 <rclc_executor_spin_some.part.0+0x2c6>
 800ed84:	f890 3039 	ldrb.w	r3, [r0, #57]	@ 0x39
 800ed88:	b9fb      	cbnz	r3, 800edca <rclc_executor_spin_some.part.0+0x2ba>
 800ed8a:	68ab      	ldr	r3, [r5, #8]
 800ed8c:	f108 0801 	add.w	r8, r8, #1
 800ed90:	4598      	cmp	r8, r3
 800ed92:	d2b7      	bcs.n	800ed04 <rclc_executor_spin_some.part.0+0x1f4>
 800ed94:	2400      	movs	r4, #0
 800ed96:	6868      	ldr	r0, [r5, #4]
 800ed98:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 800ed9c:	ea4f 1b88 	mov.w	fp, r8, lsl #6
 800eda0:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 800eda4:	2b00      	cmp	r3, #0
 800eda6:	d0b7      	beq.n	800ed18 <rclc_executor_spin_some.part.0+0x208>
 800eda8:	4631      	mov	r1, r6
 800edaa:	f7ff fa95 	bl	800e2d8 <_rclc_take_new_data>
 800edae:	b118      	cbz	r0, 800edb8 <rclc_executor_spin_some.part.0+0x2a8>
 800edb0:	4548      	cmp	r0, r9
 800edb2:	d001      	beq.n	800edb8 <rclc_executor_spin_some.part.0+0x2a8>
 800edb4:	4550      	cmp	r0, sl
 800edb6:	d10c      	bne.n	800edd2 <rclc_executor_spin_some.part.0+0x2c2>
 800edb8:	686b      	ldr	r3, [r5, #4]
 800edba:	eb13 000b 	adds.w	r0, r3, fp
 800edbe:	d021      	beq.n	800ee04 <rclc_executor_spin_some.part.0+0x2f4>
 800edc0:	7842      	ldrb	r2, [r0, #1]
 800edc2:	2a00      	cmp	r2, #0
 800edc4:	d0d8      	beq.n	800ed78 <rclc_executor_spin_some.part.0+0x268>
 800edc6:	2a01      	cmp	r2, #1
 800edc8:	d1df      	bne.n	800ed8a <rclc_executor_spin_some.part.0+0x27a>
 800edca:	f7ff fbf9 	bl	800e5c0 <_rclc_execute.part.0>
 800edce:	2800      	cmp	r0, #0
 800edd0:	d0db      	beq.n	800ed8a <rclc_executor_spin_some.part.0+0x27a>
 800edd2:	4607      	mov	r7, r0
 800edd4:	e796      	b.n	800ed04 <rclc_executor_spin_some.part.0+0x1f4>
 800edd6:	6843      	ldr	r3, [r0, #4]
 800edd8:	6a1a      	ldr	r2, [r3, #32]
 800edda:	2a00      	cmp	r2, #0
 800eddc:	d1f5      	bne.n	800edca <rclc_executor_spin_some.part.0+0x2ba>
 800edde:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800ede2:	2b00      	cmp	r3, #0
 800ede4:	d0d1      	beq.n	800ed8a <rclc_executor_spin_some.part.0+0x27a>
 800ede6:	e7f0      	b.n	800edca <rclc_executor_spin_some.part.0+0x2ba>
 800ede8:	6843      	ldr	r3, [r0, #4]
 800edea:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800edec:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800edf0:	d1eb      	bne.n	800edca <rclc_executor_spin_some.part.0+0x2ba>
 800edf2:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800edf6:	2a00      	cmp	r2, #0
 800edf8:	d1e7      	bne.n	800edca <rclc_executor_spin_some.part.0+0x2ba>
 800edfa:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800edfe:	2b00      	cmp	r3, #0
 800ee00:	d0c3      	beq.n	800ed8a <rclc_executor_spin_some.part.0+0x27a>
 800ee02:	e7e2      	b.n	800edca <rclc_executor_spin_some.part.0+0x2ba>
 800ee04:	270b      	movs	r7, #11
 800ee06:	e77d      	b.n	800ed04 <rclc_executor_spin_some.part.0+0x1f4>
 800ee08:	686a      	ldr	r2, [r5, #4]
 800ee0a:	e6e2      	b.n	800ebd2 <rclc_executor_spin_some.part.0+0xc2>
 800ee0c:	686a      	ldr	r2, [r5, #4]
 800ee0e:	e7a2      	b.n	800ed56 <rclc_executor_spin_some.part.0+0x246>
 800ee10:	6842      	ldr	r2, [r0, #4]
 800ee12:	6a11      	ldr	r1, [r2, #32]
 800ee14:	2900      	cmp	r1, #0
 800ee16:	f47f af21 	bne.w	800ec5c <rclc_executor_spin_some.part.0+0x14c>
 800ee1a:	f892 2024 	ldrb.w	r2, [r2, #36]	@ 0x24
 800ee1e:	2a00      	cmp	r2, #0
 800ee20:	f43f af0a 	beq.w	800ec38 <rclc_executor_spin_some.part.0+0x128>
 800ee24:	e71a      	b.n	800ec5c <rclc_executor_spin_some.part.0+0x14c>
 800ee26:	6842      	ldr	r2, [r0, #4]
 800ee28:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 800ee2a:	f031 417f 	bics.w	r1, r1, #4278190080	@ 0xff000000
 800ee2e:	f47f af15 	bne.w	800ec5c <rclc_executor_spin_some.part.0+0x14c>
 800ee32:	f892 1044 	ldrb.w	r1, [r2, #68]	@ 0x44
 800ee36:	2900      	cmp	r1, #0
 800ee38:	f47f af10 	bne.w	800ec5c <rclc_executor_spin_some.part.0+0x14c>
 800ee3c:	f892 2043 	ldrb.w	r2, [r2, #67]	@ 0x43
 800ee40:	2a00      	cmp	r2, #0
 800ee42:	f43f aef9 	beq.w	800ec38 <rclc_executor_spin_some.part.0+0x128>
 800ee46:	e709      	b.n	800ec5c <rclc_executor_spin_some.part.0+0x14c>
 800ee48:	686a      	ldr	r2, [r5, #4]
 800ee4a:	461c      	mov	r4, r3
 800ee4c:	e783      	b.n	800ed56 <rclc_executor_spin_some.part.0+0x246>
 800ee4e:	686a      	ldr	r2, [r5, #4]
 800ee50:	461c      	mov	r4, r3
 800ee52:	e6be      	b.n	800ebd2 <rclc_executor_spin_some.part.0+0xc2>

0800ee54 <rclc_executor_spin>:
 800ee54:	b1d0      	cbz	r0, 800ee8c <rclc_executor_spin+0x38>
 800ee56:	b510      	push	{r4, lr}
 800ee58:	4604      	mov	r4, r0
 800ee5a:	b082      	sub	sp, #8
 800ee5c:	e9d4 231a 	ldrd	r2, r3, [r4, #104]	@ 0x68
 800ee60:	6820      	ldr	r0, [r4, #0]
 800ee62:	e9cd 2300 	strd	r2, r3, [sp]
 800ee66:	f005 fdab 	bl	80149c0 <rcl_context_is_valid>
 800ee6a:	4601      	mov	r1, r0
 800ee6c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ee70:	4620      	mov	r0, r4
 800ee72:	b131      	cbz	r1, 800ee82 <rclc_executor_spin+0x2e>
 800ee74:	f7ff fe4c 	bl	800eb10 <rclc_executor_spin_some.part.0>
 800ee78:	f030 0302 	bics.w	r3, r0, #2
 800ee7c:	d0ee      	beq.n	800ee5c <rclc_executor_spin+0x8>
 800ee7e:	b002      	add	sp, #8
 800ee80:	bd10      	pop	{r4, pc}
 800ee82:	f000 f999 	bl	800f1b8 <rcutils_reset_error>
 800ee86:	2001      	movs	r0, #1
 800ee88:	b002      	add	sp, #8
 800ee8a:	bd10      	pop	{r4, pc}
 800ee8c:	200b      	movs	r0, #11
 800ee8e:	4770      	bx	lr

0800ee90 <rclc_executor_handle_counters_zero_init>:
 800ee90:	b130      	cbz	r0, 800eea0 <rclc_executor_handle_counters_zero_init+0x10>
 800ee92:	b508      	push	{r3, lr}
 800ee94:	2220      	movs	r2, #32
 800ee96:	2100      	movs	r1, #0
 800ee98:	f00b fe60 	bl	801ab5c <memset>
 800ee9c:	2000      	movs	r0, #0
 800ee9e:	bd08      	pop	{r3, pc}
 800eea0:	200b      	movs	r0, #11
 800eea2:	4770      	bx	lr
 800eea4:	0000      	movs	r0, r0
	...

0800eea8 <rclc_executor_handle_init>:
 800eea8:	b168      	cbz	r0, 800eec6 <rclc_executor_handle_init+0x1e>
 800eeaa:	ed9f 7b09 	vldr	d7, [pc, #36]	@ 800eed0 <rclc_executor_handle_init+0x28>
 800eeae:	2300      	movs	r3, #0
 800eeb0:	220b      	movs	r2, #11
 800eeb2:	ed80 7b0a 	vstr	d7, [r0, #40]	@ 0x28
 800eeb6:	e9c0 3301 	strd	r3, r3, [r0, #4]
 800eeba:	e9c0 310c 	strd	r3, r1, [r0, #48]	@ 0x30
 800eebe:	8002      	strh	r2, [r0, #0]
 800eec0:	8703      	strh	r3, [r0, #56]	@ 0x38
 800eec2:	4618      	mov	r0, r3
 800eec4:	4770      	bx	lr
 800eec6:	200b      	movs	r0, #11
 800eec8:	4770      	bx	lr
 800eeca:	bf00      	nop
 800eecc:	f3af 8000 	nop.w
	...

0800eed8 <rclc_support_init_with_options>:
 800eed8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800eedc:	b083      	sub	sp, #12
 800eede:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800eee0:	b340      	cbz	r0, 800ef34 <rclc_support_init_with_options+0x5c>
 800eee2:	461d      	mov	r5, r3
 800eee4:	b333      	cbz	r3, 800ef34 <rclc_support_init_with_options+0x5c>
 800eee6:	b32e      	cbz	r6, 800ef34 <rclc_support_init_with_options+0x5c>
 800eee8:	46e9      	mov	r9, sp
 800eeea:	4604      	mov	r4, r0
 800eeec:	4648      	mov	r0, r9
 800eeee:	460f      	mov	r7, r1
 800eef0:	4690      	mov	r8, r2
 800eef2:	f005 fd5b 	bl	80149ac <rcl_get_zero_initialized_context>
 800eef6:	e899 0003 	ldmia.w	r9, {r0, r1}
 800eefa:	462a      	mov	r2, r5
 800eefc:	e884 0003 	stmia.w	r4, {r0, r1}
 800ef00:	4623      	mov	r3, r4
 800ef02:	4641      	mov	r1, r8
 800ef04:	4638      	mov	r0, r7
 800ef06:	f005 fdc1 	bl	8014a8c <rcl_init>
 800ef0a:	4605      	mov	r5, r0
 800ef0c:	b960      	cbnz	r0, 800ef28 <rclc_support_init_with_options+0x50>
 800ef0e:	60a6      	str	r6, [r4, #8]
 800ef10:	4632      	mov	r2, r6
 800ef12:	f104 010c 	add.w	r1, r4, #12
 800ef16:	2003      	movs	r0, #3
 800ef18:	f006 fad8 	bl	80154cc <rcl_clock_init>
 800ef1c:	4605      	mov	r5, r0
 800ef1e:	b918      	cbnz	r0, 800ef28 <rclc_support_init_with_options+0x50>
 800ef20:	4628      	mov	r0, r5
 800ef22:	b003      	add	sp, #12
 800ef24:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ef28:	f000 f946 	bl	800f1b8 <rcutils_reset_error>
 800ef2c:	4628      	mov	r0, r5
 800ef2e:	b003      	add	sp, #12
 800ef30:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ef34:	250b      	movs	r5, #11
 800ef36:	4628      	mov	r0, r5
 800ef38:	b003      	add	sp, #12
 800ef3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ef3e:	bf00      	nop

0800ef40 <rclc_node_init_default>:
 800ef40:	b3b8      	cbz	r0, 800efb2 <rclc_node_init_default+0x72>
 800ef42:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ef46:	460d      	mov	r5, r1
 800ef48:	b0a1      	sub	sp, #132	@ 0x84
 800ef4a:	b329      	cbz	r1, 800ef98 <rclc_node_init_default+0x58>
 800ef4c:	4616      	mov	r6, r2
 800ef4e:	b31a      	cbz	r2, 800ef98 <rclc_node_init_default+0x58>
 800ef50:	461f      	mov	r7, r3
 800ef52:	b30b      	cbz	r3, 800ef98 <rclc_node_init_default+0x58>
 800ef54:	f10d 0810 	add.w	r8, sp, #16
 800ef58:	4604      	mov	r4, r0
 800ef5a:	4640      	mov	r0, r8
 800ef5c:	f005 fea6 	bl	8014cac <rcl_get_zero_initialized_node>
 800ef60:	e898 0003 	ldmia.w	r8, {r0, r1}
 800ef64:	f10d 0918 	add.w	r9, sp, #24
 800ef68:	e884 0003 	stmia.w	r4, {r0, r1}
 800ef6c:	4648      	mov	r0, r9
 800ef6e:	f006 f815 	bl	8014f9c <rcl_node_get_default_options>
 800ef72:	4640      	mov	r0, r8
 800ef74:	f005 fe9a 	bl	8014cac <rcl_get_zero_initialized_node>
 800ef78:	f8cd 9000 	str.w	r9, [sp]
 800ef7c:	e898 0003 	ldmia.w	r8, {r0, r1}
 800ef80:	463b      	mov	r3, r7
 800ef82:	e884 0003 	stmia.w	r4, {r0, r1}
 800ef86:	4632      	mov	r2, r6
 800ef88:	4629      	mov	r1, r5
 800ef8a:	4620      	mov	r0, r4
 800ef8c:	f005 fe98 	bl	8014cc0 <rcl_node_init>
 800ef90:	b930      	cbnz	r0, 800efa0 <rclc_node_init_default+0x60>
 800ef92:	b021      	add	sp, #132	@ 0x84
 800ef94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ef98:	200b      	movs	r0, #11
 800ef9a:	b021      	add	sp, #132	@ 0x84
 800ef9c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800efa0:	9003      	str	r0, [sp, #12]
 800efa2:	f000 f909 	bl	800f1b8 <rcutils_reset_error>
 800efa6:	f000 f907 	bl	800f1b8 <rcutils_reset_error>
 800efaa:	9803      	ldr	r0, [sp, #12]
 800efac:	b021      	add	sp, #132	@ 0x84
 800efae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800efb2:	200b      	movs	r0, #11
 800efb4:	4770      	bx	lr
 800efb6:	bf00      	nop

0800efb8 <rclc_publisher_init_default>:
 800efb8:	b368      	cbz	r0, 800f016 <rclc_publisher_init_default+0x5e>
 800efba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800efbe:	460d      	mov	r5, r1
 800efc0:	b0a0      	sub	sp, #128	@ 0x80
 800efc2:	b321      	cbz	r1, 800f00e <rclc_publisher_init_default+0x56>
 800efc4:	4616      	mov	r6, r2
 800efc6:	b312      	cbz	r2, 800f00e <rclc_publisher_init_default+0x56>
 800efc8:	461f      	mov	r7, r3
 800efca:	b303      	cbz	r3, 800f00e <rclc_publisher_init_default+0x56>
 800efcc:	4604      	mov	r4, r0
 800efce:	f7ff f825 	bl	800e01c <rcl_get_zero_initialized_publisher>
 800efd2:	f10d 0810 	add.w	r8, sp, #16
 800efd6:	6020      	str	r0, [r4, #0]
 800efd8:	4640      	mov	r0, r8
 800efda:	f7ff f8bb 	bl	800e154 <rcl_publisher_get_default_options>
 800efde:	490f      	ldr	r1, [pc, #60]	@ (800f01c <rclc_publisher_init_default+0x64>)
 800efe0:	2250      	movs	r2, #80	@ 0x50
 800efe2:	4640      	mov	r0, r8
 800efe4:	f00b fe83 	bl	801acee <memcpy>
 800efe8:	f8cd 8000 	str.w	r8, [sp]
 800efec:	463b      	mov	r3, r7
 800efee:	4632      	mov	r2, r6
 800eff0:	4629      	mov	r1, r5
 800eff2:	4620      	mov	r0, r4
 800eff4:	f7ff f818 	bl	800e028 <rcl_publisher_init>
 800eff8:	b910      	cbnz	r0, 800f000 <rclc_publisher_init_default+0x48>
 800effa:	b020      	add	sp, #128	@ 0x80
 800effc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f000:	9003      	str	r0, [sp, #12]
 800f002:	f000 f8d9 	bl	800f1b8 <rcutils_reset_error>
 800f006:	9803      	ldr	r0, [sp, #12]
 800f008:	b020      	add	sp, #128	@ 0x80
 800f00a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f00e:	200b      	movs	r0, #11
 800f010:	b020      	add	sp, #128	@ 0x80
 800f012:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f016:	200b      	movs	r0, #11
 800f018:	4770      	bx	lr
 800f01a:	bf00      	nop
 800f01c:	0801de28 	.word	0x0801de28

0800f020 <rclc_subscription_init_best_effort>:
 800f020:	b368      	cbz	r0, 800f07e <rclc_subscription_init_best_effort+0x5e>
 800f022:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f026:	460d      	mov	r5, r1
 800f028:	b0a0      	sub	sp, #128	@ 0x80
 800f02a:	b321      	cbz	r1, 800f076 <rclc_subscription_init_best_effort+0x56>
 800f02c:	4616      	mov	r6, r2
 800f02e:	b312      	cbz	r2, 800f076 <rclc_subscription_init_best_effort+0x56>
 800f030:	461f      	mov	r7, r3
 800f032:	b303      	cbz	r3, 800f076 <rclc_subscription_init_best_effort+0x56>
 800f034:	4604      	mov	r4, r0
 800f036:	f006 f8ed 	bl	8015214 <rcl_get_zero_initialized_subscription>
 800f03a:	f10d 0810 	add.w	r8, sp, #16
 800f03e:	6020      	str	r0, [r4, #0]
 800f040:	4640      	mov	r0, r8
 800f042:	f006 f995 	bl	8015370 <rcl_subscription_get_default_options>
 800f046:	490f      	ldr	r1, [pc, #60]	@ (800f084 <rclc_subscription_init_best_effort+0x64>)
 800f048:	2250      	movs	r2, #80	@ 0x50
 800f04a:	4640      	mov	r0, r8
 800f04c:	f00b fe4f 	bl	801acee <memcpy>
 800f050:	f8cd 8000 	str.w	r8, [sp]
 800f054:	463b      	mov	r3, r7
 800f056:	4632      	mov	r2, r6
 800f058:	4629      	mov	r1, r5
 800f05a:	4620      	mov	r0, r4
 800f05c:	f006 f8e0 	bl	8015220 <rcl_subscription_init>
 800f060:	b910      	cbnz	r0, 800f068 <rclc_subscription_init_best_effort+0x48>
 800f062:	b020      	add	sp, #128	@ 0x80
 800f064:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f068:	9003      	str	r0, [sp, #12]
 800f06a:	f000 f8a5 	bl	800f1b8 <rcutils_reset_error>
 800f06e:	9803      	ldr	r0, [sp, #12]
 800f070:	b020      	add	sp, #128	@ 0x80
 800f072:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f076:	200b      	movs	r0, #11
 800f078:	b020      	add	sp, #128	@ 0x80
 800f07a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f07e:	200b      	movs	r0, #11
 800f080:	4770      	bx	lr
 800f082:	bf00      	nop
 800f084:	0801de78 	.word	0x0801de78

0800f088 <rclc_timer_init_default>:
 800f088:	b360      	cbz	r0, 800f0e4 <rclc_timer_init_default+0x5c>
 800f08a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f08e:	460e      	mov	r6, r1
 800f090:	b08a      	sub	sp, #40	@ 0x28
 800f092:	b319      	cbz	r1, 800f0dc <rclc_timer_init_default+0x54>
 800f094:	4690      	mov	r8, r2
 800f096:	461f      	mov	r7, r3
 800f098:	4605      	mov	r5, r0
 800f09a:	f006 fbf5 	bl	8015888 <rcl_get_zero_initialized_timer>
 800f09e:	68b4      	ldr	r4, [r6, #8]
 800f0a0:	6028      	str	r0, [r5, #0]
 800f0a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f0a4:	f10d 0c0c 	add.w	ip, sp, #12
 800f0a8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f0ac:	6823      	ldr	r3, [r4, #0]
 800f0ae:	f8cc 3000 	str.w	r3, [ip]
 800f0b2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800f0b4:	9302      	str	r3, [sp, #8]
 800f0b6:	e9cd 8700 	strd	r8, r7, [sp]
 800f0ba:	4628      	mov	r0, r5
 800f0bc:	4632      	mov	r2, r6
 800f0be:	f106 010c 	add.w	r1, r6, #12
 800f0c2:	f006 fbe9 	bl	8015898 <rcl_timer_init>
 800f0c6:	b910      	cbnz	r0, 800f0ce <rclc_timer_init_default+0x46>
 800f0c8:	b00a      	add	sp, #40	@ 0x28
 800f0ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f0ce:	9009      	str	r0, [sp, #36]	@ 0x24
 800f0d0:	f000 f872 	bl	800f1b8 <rcutils_reset_error>
 800f0d4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f0d6:	b00a      	add	sp, #40	@ 0x28
 800f0d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f0dc:	200b      	movs	r0, #11
 800f0de:	b00a      	add	sp, #40	@ 0x28
 800f0e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f0e4:	200b      	movs	r0, #11
 800f0e6:	4770      	bx	lr

0800f0e8 <__default_zero_allocate>:
 800f0e8:	f00b b848 	b.w	801a17c <calloc>

0800f0ec <__default_reallocate>:
 800f0ec:	f00b b9e6 	b.w	801a4bc <realloc>

0800f0f0 <__default_deallocate>:
 800f0f0:	f00b b8c2 	b.w	801a278 <free>

0800f0f4 <__default_allocate>:
 800f0f4:	f00b b8b8 	b.w	801a268 <malloc>

0800f0f8 <rcutils_get_zero_initialized_allocator>:
 800f0f8:	b510      	push	{r4, lr}
 800f0fa:	4c05      	ldr	r4, [pc, #20]	@ (800f110 <rcutils_get_zero_initialized_allocator+0x18>)
 800f0fc:	4686      	mov	lr, r0
 800f0fe:	4684      	mov	ip, r0
 800f100:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f102:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f106:	6823      	ldr	r3, [r4, #0]
 800f108:	f8cc 3000 	str.w	r3, [ip]
 800f10c:	4670      	mov	r0, lr
 800f10e:	bd10      	pop	{r4, pc}
 800f110:	0801dec8 	.word	0x0801dec8

0800f114 <rcutils_set_default_allocator>:
 800f114:	b1a8      	cbz	r0, 800f142 <rcutils_set_default_allocator+0x2e>
 800f116:	6802      	ldr	r2, [r0, #0]
 800f118:	b1a2      	cbz	r2, 800f144 <rcutils_set_default_allocator+0x30>
 800f11a:	6841      	ldr	r1, [r0, #4]
 800f11c:	b1a1      	cbz	r1, 800f148 <rcutils_set_default_allocator+0x34>
 800f11e:	b410      	push	{r4}
 800f120:	68c4      	ldr	r4, [r0, #12]
 800f122:	b164      	cbz	r4, 800f13e <rcutils_set_default_allocator+0x2a>
 800f124:	6880      	ldr	r0, [r0, #8]
 800f126:	b138      	cbz	r0, 800f138 <rcutils_set_default_allocator+0x24>
 800f128:	4b08      	ldr	r3, [pc, #32]	@ (800f14c <rcutils_set_default_allocator+0x38>)
 800f12a:	601a      	str	r2, [r3, #0]
 800f12c:	2200      	movs	r2, #0
 800f12e:	e9c3 4203 	strd	r4, r2, [r3, #12]
 800f132:	e9c3 1001 	strd	r1, r0, [r3, #4]
 800f136:	2001      	movs	r0, #1
 800f138:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f13c:	4770      	bx	lr
 800f13e:	4620      	mov	r0, r4
 800f140:	e7fa      	b.n	800f138 <rcutils_set_default_allocator+0x24>
 800f142:	4770      	bx	lr
 800f144:	4610      	mov	r0, r2
 800f146:	4770      	bx	lr
 800f148:	4608      	mov	r0, r1
 800f14a:	4770      	bx	lr
 800f14c:	200001bc 	.word	0x200001bc

0800f150 <rcutils_get_default_allocator>:
 800f150:	b510      	push	{r4, lr}
 800f152:	4c05      	ldr	r4, [pc, #20]	@ (800f168 <rcutils_get_default_allocator+0x18>)
 800f154:	4686      	mov	lr, r0
 800f156:	4684      	mov	ip, r0
 800f158:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f15a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f15e:	6823      	ldr	r3, [r4, #0]
 800f160:	f8cc 3000 	str.w	r3, [ip]
 800f164:	4670      	mov	r0, lr
 800f166:	bd10      	pop	{r4, pc}
 800f168:	200001bc 	.word	0x200001bc

0800f16c <rcutils_allocator_is_valid>:
 800f16c:	b158      	cbz	r0, 800f186 <rcutils_allocator_is_valid+0x1a>
 800f16e:	6803      	ldr	r3, [r0, #0]
 800f170:	b143      	cbz	r3, 800f184 <rcutils_allocator_is_valid+0x18>
 800f172:	6843      	ldr	r3, [r0, #4]
 800f174:	b133      	cbz	r3, 800f184 <rcutils_allocator_is_valid+0x18>
 800f176:	68c3      	ldr	r3, [r0, #12]
 800f178:	b123      	cbz	r3, 800f184 <rcutils_allocator_is_valid+0x18>
 800f17a:	6880      	ldr	r0, [r0, #8]
 800f17c:	3800      	subs	r0, #0
 800f17e:	bf18      	it	ne
 800f180:	2001      	movne	r0, #1
 800f182:	4770      	bx	lr
 800f184:	4618      	mov	r0, r3
 800f186:	4770      	bx	lr

0800f188 <rcutils_get_error_string>:
 800f188:	4b06      	ldr	r3, [pc, #24]	@ (800f1a4 <rcutils_get_error_string+0x1c>)
 800f18a:	781b      	ldrb	r3, [r3, #0]
 800f18c:	b13b      	cbz	r3, 800f19e <rcutils_get_error_string+0x16>
 800f18e:	4b06      	ldr	r3, [pc, #24]	@ (800f1a8 <rcutils_get_error_string+0x20>)
 800f190:	781a      	ldrb	r2, [r3, #0]
 800f192:	b90a      	cbnz	r2, 800f198 <rcutils_get_error_string+0x10>
 800f194:	2201      	movs	r2, #1
 800f196:	701a      	strb	r2, [r3, #0]
 800f198:	4b04      	ldr	r3, [pc, #16]	@ (800f1ac <rcutils_get_error_string+0x24>)
 800f19a:	7818      	ldrb	r0, [r3, #0]
 800f19c:	4770      	bx	lr
 800f19e:	4b04      	ldr	r3, [pc, #16]	@ (800f1b0 <rcutils_get_error_string+0x28>)
 800f1a0:	7818      	ldrb	r0, [r3, #0]
 800f1a2:	4770      	bx	lr
 800f1a4:	200069b0 	.word	0x200069b0
 800f1a8:	200069c9 	.word	0x200069c9
 800f1ac:	200069c8 	.word	0x200069c8
 800f1b0:	0801d6d0 	.word	0x0801d6d0
 800f1b4:	00000000 	.word	0x00000000

0800f1b8 <rcutils_reset_error>:
 800f1b8:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 800f1d8 <rcutils_reset_error+0x20>
 800f1bc:	4a08      	ldr	r2, [pc, #32]	@ (800f1e0 <rcutils_reset_error+0x28>)
 800f1be:	4809      	ldr	r0, [pc, #36]	@ (800f1e4 <rcutils_reset_error+0x2c>)
 800f1c0:	4909      	ldr	r1, [pc, #36]	@ (800f1e8 <rcutils_reset_error+0x30>)
 800f1c2:	2300      	movs	r3, #0
 800f1c4:	8013      	strh	r3, [r2, #0]
 800f1c6:	ed82 7b02 	vstr	d7, [r2, #8]
 800f1ca:	4a08      	ldr	r2, [pc, #32]	@ (800f1ec <rcutils_reset_error+0x34>)
 800f1cc:	7003      	strb	r3, [r0, #0]
 800f1ce:	700b      	strb	r3, [r1, #0]
 800f1d0:	7013      	strb	r3, [r2, #0]
 800f1d2:	4770      	bx	lr
 800f1d4:	f3af 8000 	nop.w
	...
 800f1e0:	200069b8 	.word	0x200069b8
 800f1e4:	200069c9 	.word	0x200069c9
 800f1e8:	200069c8 	.word	0x200069c8
 800f1ec:	200069b0 	.word	0x200069b0

0800f1f0 <rcutils_system_time_now>:
 800f1f0:	b308      	cbz	r0, 800f236 <rcutils_system_time_now+0x46>
 800f1f2:	b570      	push	{r4, r5, r6, lr}
 800f1f4:	b084      	sub	sp, #16
 800f1f6:	4604      	mov	r4, r0
 800f1f8:	4669      	mov	r1, sp
 800f1fa:	2001      	movs	r0, #1
 800f1fc:	f7f3 fd20 	bl	8002c40 <clock_gettime>
 800f200:	e9dd 3500 	ldrd	r3, r5, [sp]
 800f204:	2d00      	cmp	r5, #0
 800f206:	db13      	blt.n	800f230 <rcutils_system_time_now+0x40>
 800f208:	9902      	ldr	r1, [sp, #8]
 800f20a:	2900      	cmp	r1, #0
 800f20c:	db0d      	blt.n	800f22a <rcutils_system_time_now+0x3a>
 800f20e:	4e0b      	ldr	r6, [pc, #44]	@ (800f23c <rcutils_system_time_now+0x4c>)
 800f210:	fba3 3206 	umull	r3, r2, r3, r6
 800f214:	185b      	adds	r3, r3, r1
 800f216:	fb06 2205 	mla	r2, r6, r5, r2
 800f21a:	f04f 0000 	mov.w	r0, #0
 800f21e:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 800f222:	e9c4 3200 	strd	r3, r2, [r4]
 800f226:	b004      	add	sp, #16
 800f228:	bd70      	pop	{r4, r5, r6, pc}
 800f22a:	ea53 0205 	orrs.w	r2, r3, r5
 800f22e:	d1ee      	bne.n	800f20e <rcutils_system_time_now+0x1e>
 800f230:	2002      	movs	r0, #2
 800f232:	b004      	add	sp, #16
 800f234:	bd70      	pop	{r4, r5, r6, pc}
 800f236:	200b      	movs	r0, #11
 800f238:	4770      	bx	lr
 800f23a:	bf00      	nop
 800f23c:	3b9aca00 	.word	0x3b9aca00

0800f240 <rcutils_steady_time_now>:
 800f240:	b308      	cbz	r0, 800f286 <rcutils_steady_time_now+0x46>
 800f242:	b570      	push	{r4, r5, r6, lr}
 800f244:	b084      	sub	sp, #16
 800f246:	4604      	mov	r4, r0
 800f248:	4669      	mov	r1, sp
 800f24a:	2000      	movs	r0, #0
 800f24c:	f7f3 fcf8 	bl	8002c40 <clock_gettime>
 800f250:	e9dd 3500 	ldrd	r3, r5, [sp]
 800f254:	2d00      	cmp	r5, #0
 800f256:	db13      	blt.n	800f280 <rcutils_steady_time_now+0x40>
 800f258:	9902      	ldr	r1, [sp, #8]
 800f25a:	2900      	cmp	r1, #0
 800f25c:	db0d      	blt.n	800f27a <rcutils_steady_time_now+0x3a>
 800f25e:	4e0b      	ldr	r6, [pc, #44]	@ (800f28c <rcutils_steady_time_now+0x4c>)
 800f260:	fba3 3206 	umull	r3, r2, r3, r6
 800f264:	185b      	adds	r3, r3, r1
 800f266:	fb06 2205 	mla	r2, r6, r5, r2
 800f26a:	f04f 0000 	mov.w	r0, #0
 800f26e:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 800f272:	e9c4 3200 	strd	r3, r2, [r4]
 800f276:	b004      	add	sp, #16
 800f278:	bd70      	pop	{r4, r5, r6, pc}
 800f27a:	ea53 0205 	orrs.w	r2, r3, r5
 800f27e:	d1ee      	bne.n	800f25e <rcutils_steady_time_now+0x1e>
 800f280:	2002      	movs	r0, #2
 800f282:	b004      	add	sp, #16
 800f284:	bd70      	pop	{r4, r5, r6, pc}
 800f286:	200b      	movs	r0, #11
 800f288:	4770      	bx	lr
 800f28a:	bf00      	nop
 800f28c:	3b9aca00 	.word	0x3b9aca00

0800f290 <rmw_get_zero_initialized_init_options>:
 800f290:	b510      	push	{r4, lr}
 800f292:	2238      	movs	r2, #56	@ 0x38
 800f294:	4604      	mov	r4, r0
 800f296:	2100      	movs	r1, #0
 800f298:	f00b fc60 	bl	801ab5c <memset>
 800f29c:	f104 0010 	add.w	r0, r4, #16
 800f2a0:	f000 f80a 	bl	800f2b8 <rmw_get_default_security_options>
 800f2a4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800f2a8:	60e3      	str	r3, [r4, #12]
 800f2aa:	4620      	mov	r0, r4
 800f2ac:	bd10      	pop	{r4, pc}
 800f2ae:	bf00      	nop

0800f2b0 <rmw_get_default_publisher_options>:
 800f2b0:	2200      	movs	r2, #0
 800f2b2:	6002      	str	r2, [r0, #0]
 800f2b4:	7102      	strb	r2, [r0, #4]
 800f2b6:	4770      	bx	lr

0800f2b8 <rmw_get_default_security_options>:
 800f2b8:	2200      	movs	r2, #0
 800f2ba:	7002      	strb	r2, [r0, #0]
 800f2bc:	6042      	str	r2, [r0, #4]
 800f2be:	4770      	bx	lr

0800f2c0 <rmw_uros_set_custom_transport>:
 800f2c0:	b470      	push	{r4, r5, r6}
 800f2c2:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 800f2c6:	b162      	cbz	r2, 800f2e2 <rmw_uros_set_custom_transport+0x22>
 800f2c8:	b15b      	cbz	r3, 800f2e2 <rmw_uros_set_custom_transport+0x22>
 800f2ca:	b155      	cbz	r5, 800f2e2 <rmw_uros_set_custom_transport+0x22>
 800f2cc:	b14e      	cbz	r6, 800f2e2 <rmw_uros_set_custom_transport+0x22>
 800f2ce:	4c06      	ldr	r4, [pc, #24]	@ (800f2e8 <rmw_uros_set_custom_transport+0x28>)
 800f2d0:	7020      	strb	r0, [r4, #0]
 800f2d2:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800f2d6:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800f2da:	6166      	str	r6, [r4, #20]
 800f2dc:	2000      	movs	r0, #0
 800f2de:	bc70      	pop	{r4, r5, r6}
 800f2e0:	4770      	bx	lr
 800f2e2:	200b      	movs	r0, #11
 800f2e4:	bc70      	pop	{r4, r5, r6}
 800f2e6:	4770      	bx	lr
 800f2e8:	200069cc 	.word	0x200069cc

0800f2ec <rmw_init_options_init>:
 800f2ec:	b084      	sub	sp, #16
 800f2ee:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f2f0:	b083      	sub	sp, #12
 800f2f2:	ad09      	add	r5, sp, #36	@ 0x24
 800f2f4:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 800f2f8:	b130      	cbz	r0, 800f308 <rmw_init_options_init+0x1c>
 800f2fa:	4604      	mov	r4, r0
 800f2fc:	4628      	mov	r0, r5
 800f2fe:	f7ff ff35 	bl	800f16c <rcutils_allocator_is_valid>
 800f302:	b108      	cbz	r0, 800f308 <rmw_init_options_init+0x1c>
 800f304:	68a6      	ldr	r6, [r4, #8]
 800f306:	b12e      	cbz	r6, 800f314 <rmw_init_options_init+0x28>
 800f308:	200b      	movs	r0, #11
 800f30a:	b003      	add	sp, #12
 800f30c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800f310:	b004      	add	sp, #16
 800f312:	4770      	bx	lr
 800f314:	2200      	movs	r2, #0
 800f316:	2300      	movs	r3, #0
 800f318:	e9c4 2300 	strd	r2, r3, [r4]
 800f31c:	4b20      	ldr	r3, [pc, #128]	@ (800f3a0 <rmw_init_options_init+0xb4>)
 800f31e:	681b      	ldr	r3, [r3, #0]
 800f320:	60a3      	str	r3, [r4, #8]
 800f322:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f324:	f104 0c20 	add.w	ip, r4, #32
 800f328:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f32c:	466f      	mov	r7, sp
 800f32e:	682b      	ldr	r3, [r5, #0]
 800f330:	f8cc 3000 	str.w	r3, [ip]
 800f334:	4638      	mov	r0, r7
 800f336:	61e6      	str	r6, [r4, #28]
 800f338:	60e6      	str	r6, [r4, #12]
 800f33a:	f7ff ffbd 	bl	800f2b8 <rmw_get_default_security_options>
 800f33e:	e897 0003 	ldmia.w	r7, {r0, r1}
 800f342:	f104 0310 	add.w	r3, r4, #16
 800f346:	e883 0003 	stmia.w	r3, {r0, r1}
 800f34a:	2203      	movs	r2, #3
 800f34c:	4815      	ldr	r0, [pc, #84]	@ (800f3a4 <rmw_init_options_init+0xb8>)
 800f34e:	4916      	ldr	r1, [pc, #88]	@ (800f3a8 <rmw_init_options_init+0xbc>)
 800f350:	7626      	strb	r6, [r4, #24]
 800f352:	f000 ffdb 	bl	801030c <rmw_uxrce_init_init_options_impl_memory>
 800f356:	4813      	ldr	r0, [pc, #76]	@ (800f3a4 <rmw_init_options_init+0xb8>)
 800f358:	f008 fdc6 	bl	8017ee8 <get_memory>
 800f35c:	b1f0      	cbz	r0, 800f39c <rmw_init_options_init+0xb0>
 800f35e:	4a13      	ldr	r2, [pc, #76]	@ (800f3ac <rmw_init_options_init+0xc0>)
 800f360:	6883      	ldr	r3, [r0, #8]
 800f362:	6851      	ldr	r1, [r2, #4]
 800f364:	7810      	ldrb	r0, [r2, #0]
 800f366:	6363      	str	r3, [r4, #52]	@ 0x34
 800f368:	7418      	strb	r0, [r3, #16]
 800f36a:	6159      	str	r1, [r3, #20]
 800f36c:	68d1      	ldr	r1, [r2, #12]
 800f36e:	61d9      	str	r1, [r3, #28]
 800f370:	6911      	ldr	r1, [r2, #16]
 800f372:	6219      	str	r1, [r3, #32]
 800f374:	6951      	ldr	r1, [r2, #20]
 800f376:	6892      	ldr	r2, [r2, #8]
 800f378:	619a      	str	r2, [r3, #24]
 800f37a:	6259      	str	r1, [r3, #36]	@ 0x24
 800f37c:	f004 f83e 	bl	80133fc <uxr_nanos>
 800f380:	f00b f830 	bl	801a3e4 <srand>
 800f384:	f00b f85c 	bl	801a440 <rand>
 800f388:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800f38a:	6298      	str	r0, [r3, #40]	@ 0x28
 800f38c:	2800      	cmp	r0, #0
 800f38e:	d0f9      	beq.n	800f384 <rmw_init_options_init+0x98>
 800f390:	2000      	movs	r0, #0
 800f392:	b003      	add	sp, #12
 800f394:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800f398:	b004      	add	sp, #16
 800f39a:	4770      	bx	lr
 800f39c:	2001      	movs	r0, #1
 800f39e:	e7b4      	b.n	800f30a <rmw_init_options_init+0x1e>
 800f3a0:	0801e2bc 	.word	0x0801e2bc
 800f3a4:	2000b2e4 	.word	0x2000b2e4
 800f3a8:	20006b80 	.word	0x20006b80
 800f3ac:	200069cc 	.word	0x200069cc

0800f3b0 <rmw_init_options_copy>:
 800f3b0:	b570      	push	{r4, r5, r6, lr}
 800f3b2:	b088      	sub	sp, #32
 800f3b4:	b160      	cbz	r0, 800f3d0 <rmw_init_options_copy+0x20>
 800f3b6:	460d      	mov	r5, r1
 800f3b8:	b151      	cbz	r1, 800f3d0 <rmw_init_options_copy+0x20>
 800f3ba:	4604      	mov	r4, r0
 800f3bc:	6880      	ldr	r0, [r0, #8]
 800f3be:	b128      	cbz	r0, 800f3cc <rmw_init_options_copy+0x1c>
 800f3c0:	4b33      	ldr	r3, [pc, #204]	@ (800f490 <rmw_init_options_copy+0xe0>)
 800f3c2:	6819      	ldr	r1, [r3, #0]
 800f3c4:	f7f0 ff2c 	bl	8000220 <strcmp>
 800f3c8:	2800      	cmp	r0, #0
 800f3ca:	d154      	bne.n	800f476 <rmw_init_options_copy+0xc6>
 800f3cc:	68ab      	ldr	r3, [r5, #8]
 800f3ce:	b11b      	cbz	r3, 800f3d8 <rmw_init_options_copy+0x28>
 800f3d0:	240b      	movs	r4, #11
 800f3d2:	4620      	mov	r0, r4
 800f3d4:	b008      	add	sp, #32
 800f3d6:	bd70      	pop	{r4, r5, r6, pc}
 800f3d8:	4623      	mov	r3, r4
 800f3da:	462a      	mov	r2, r5
 800f3dc:	f104 0630 	add.w	r6, r4, #48	@ 0x30
 800f3e0:	f8d3 c000 	ldr.w	ip, [r3]
 800f3e4:	6858      	ldr	r0, [r3, #4]
 800f3e6:	6899      	ldr	r1, [r3, #8]
 800f3e8:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 800f3ec:	f8c2 e00c 	str.w	lr, [r2, #12]
 800f3f0:	3310      	adds	r3, #16
 800f3f2:	42b3      	cmp	r3, r6
 800f3f4:	f8c2 c000 	str.w	ip, [r2]
 800f3f8:	6050      	str	r0, [r2, #4]
 800f3fa:	6091      	str	r1, [r2, #8]
 800f3fc:	f102 0210 	add.w	r2, r2, #16
 800f400:	d1ee      	bne.n	800f3e0 <rmw_init_options_copy+0x30>
 800f402:	6819      	ldr	r1, [r3, #0]
 800f404:	685b      	ldr	r3, [r3, #4]
 800f406:	6053      	str	r3, [r2, #4]
 800f408:	6011      	str	r1, [r2, #0]
 800f40a:	f104 0e20 	add.w	lr, r4, #32
 800f40e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800f412:	f10d 0c0c 	add.w	ip, sp, #12
 800f416:	4666      	mov	r6, ip
 800f418:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f41c:	f8de 3000 	ldr.w	r3, [lr]
 800f420:	f8cc 3000 	str.w	r3, [ip]
 800f424:	4630      	mov	r0, r6
 800f426:	f7ff fea1 	bl	800f16c <rcutils_allocator_is_valid>
 800f42a:	2800      	cmp	r0, #0
 800f42c:	d0d0      	beq.n	800f3d0 <rmw_init_options_copy+0x20>
 800f42e:	ab08      	add	r3, sp, #32
 800f430:	e913 0003 	ldmdb	r3, {r0, r1}
 800f434:	e88d 0003 	stmia.w	sp, {r0, r1}
 800f438:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800f43c:	69e0      	ldr	r0, [r4, #28]
 800f43e:	f008 f905 	bl	801764c <rcutils_strdup>
 800f442:	61e8      	str	r0, [r5, #28]
 800f444:	69e3      	ldr	r3, [r4, #28]
 800f446:	b103      	cbz	r3, 800f44a <rmw_init_options_copy+0x9a>
 800f448:	b1f8      	cbz	r0, 800f48a <rmw_init_options_copy+0xda>
 800f44a:	4812      	ldr	r0, [pc, #72]	@ (800f494 <rmw_init_options_copy+0xe4>)
 800f44c:	f008 fd4c 	bl	8017ee8 <get_memory>
 800f450:	b1a8      	cbz	r0, 800f47e <rmw_init_options_copy+0xce>
 800f452:	6883      	ldr	r3, [r0, #8]
 800f454:	636b      	str	r3, [r5, #52]	@ 0x34
 800f456:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800f458:	f102 0c10 	add.w	ip, r2, #16
 800f45c:	f103 0510 	add.w	r5, r3, #16
 800f460:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f464:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800f466:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 800f46a:	2400      	movs	r4, #0
 800f46c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800f470:	4620      	mov	r0, r4
 800f472:	b008      	add	sp, #32
 800f474:	bd70      	pop	{r4, r5, r6, pc}
 800f476:	240c      	movs	r4, #12
 800f478:	4620      	mov	r0, r4
 800f47a:	b008      	add	sp, #32
 800f47c:	bd70      	pop	{r4, r5, r6, pc}
 800f47e:	9b04      	ldr	r3, [sp, #16]
 800f480:	9907      	ldr	r1, [sp, #28]
 800f482:	69e8      	ldr	r0, [r5, #28]
 800f484:	4798      	blx	r3
 800f486:	2401      	movs	r4, #1
 800f488:	e7a3      	b.n	800f3d2 <rmw_init_options_copy+0x22>
 800f48a:	240a      	movs	r4, #10
 800f48c:	e7a1      	b.n	800f3d2 <rmw_init_options_copy+0x22>
 800f48e:	bf00      	nop
 800f490:	0801e2bc 	.word	0x0801e2bc
 800f494:	2000b2e4 	.word	0x2000b2e4

0800f498 <rmw_init_options_fini>:
 800f498:	2800      	cmp	r0, #0
 800f49a:	d041      	beq.n	800f520 <rmw_init_options_fini+0x88>
 800f49c:	b510      	push	{r4, lr}
 800f49e:	4604      	mov	r4, r0
 800f4a0:	b08e      	sub	sp, #56	@ 0x38
 800f4a2:	3020      	adds	r0, #32
 800f4a4:	f7ff fe62 	bl	800f16c <rcutils_allocator_is_valid>
 800f4a8:	b380      	cbz	r0, 800f50c <rmw_init_options_fini+0x74>
 800f4aa:	68a0      	ldr	r0, [r4, #8]
 800f4ac:	b120      	cbz	r0, 800f4b8 <rmw_init_options_fini+0x20>
 800f4ae:	4b1e      	ldr	r3, [pc, #120]	@ (800f528 <rmw_init_options_fini+0x90>)
 800f4b0:	6819      	ldr	r1, [r3, #0]
 800f4b2:	f7f0 feb5 	bl	8000220 <strcmp>
 800f4b6:	bb88      	cbnz	r0, 800f51c <rmw_init_options_fini+0x84>
 800f4b8:	4b1c      	ldr	r3, [pc, #112]	@ (800f52c <rmw_init_options_fini+0x94>)
 800f4ba:	6819      	ldr	r1, [r3, #0]
 800f4bc:	b351      	cbz	r1, 800f514 <rmw_init_options_fini+0x7c>
 800f4be:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800f4c0:	e001      	b.n	800f4c6 <rmw_init_options_fini+0x2e>
 800f4c2:	6849      	ldr	r1, [r1, #4]
 800f4c4:	b331      	cbz	r1, 800f514 <rmw_init_options_fini+0x7c>
 800f4c6:	688b      	ldr	r3, [r1, #8]
 800f4c8:	429a      	cmp	r2, r3
 800f4ca:	d1fa      	bne.n	800f4c2 <rmw_init_options_fini+0x2a>
 800f4cc:	4817      	ldr	r0, [pc, #92]	@ (800f52c <rmw_init_options_fini+0x94>)
 800f4ce:	f008 fd1b 	bl	8017f08 <put_memory>
 800f4d2:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800f4d4:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800f4d6:	69e0      	ldr	r0, [r4, #28]
 800f4d8:	4798      	blx	r3
 800f4da:	4668      	mov	r0, sp
 800f4dc:	f7ff fed8 	bl	800f290 <rmw_get_zero_initialized_init_options>
 800f4e0:	46ee      	mov	lr, sp
 800f4e2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800f4e6:	46a4      	mov	ip, r4
 800f4e8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f4ec:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800f4f0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f4f4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800f4f8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f4fc:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800f500:	e88c 0003 	stmia.w	ip, {r0, r1}
 800f504:	2300      	movs	r3, #0
 800f506:	4618      	mov	r0, r3
 800f508:	b00e      	add	sp, #56	@ 0x38
 800f50a:	bd10      	pop	{r4, pc}
 800f50c:	230b      	movs	r3, #11
 800f50e:	4618      	mov	r0, r3
 800f510:	b00e      	add	sp, #56	@ 0x38
 800f512:	bd10      	pop	{r4, pc}
 800f514:	2301      	movs	r3, #1
 800f516:	4618      	mov	r0, r3
 800f518:	b00e      	add	sp, #56	@ 0x38
 800f51a:	bd10      	pop	{r4, pc}
 800f51c:	230c      	movs	r3, #12
 800f51e:	e7f2      	b.n	800f506 <rmw_init_options_fini+0x6e>
 800f520:	230b      	movs	r3, #11
 800f522:	4618      	mov	r0, r3
 800f524:	4770      	bx	lr
 800f526:	bf00      	nop
 800f528:	0801e2bc 	.word	0x0801e2bc
 800f52c:	2000b2e4 	.word	0x2000b2e4

0800f530 <rmw_init>:
 800f530:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f534:	b083      	sub	sp, #12
 800f536:	2800      	cmp	r0, #0
 800f538:	f000 80d3 	beq.w	800f6e2 <rmw_init+0x1b2>
 800f53c:	460e      	mov	r6, r1
 800f53e:	2900      	cmp	r1, #0
 800f540:	f000 80cf 	beq.w	800f6e2 <rmw_init+0x1b2>
 800f544:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800f546:	4605      	mov	r5, r0
 800f548:	2b00      	cmp	r3, #0
 800f54a:	f000 80ca 	beq.w	800f6e2 <rmw_init+0x1b2>
 800f54e:	4b78      	ldr	r3, [pc, #480]	@ (800f730 <rmw_init+0x200>)
 800f550:	6880      	ldr	r0, [r0, #8]
 800f552:	681f      	ldr	r7, [r3, #0]
 800f554:	b128      	cbz	r0, 800f562 <rmw_init+0x32>
 800f556:	4639      	mov	r1, r7
 800f558:	f7f0 fe62 	bl	8000220 <strcmp>
 800f55c:	2800      	cmp	r0, #0
 800f55e:	f040 80ca 	bne.w	800f6f6 <rmw_init+0x1c6>
 800f562:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f566:	4c73      	ldr	r4, [pc, #460]	@ (800f734 <rmw_init+0x204>)
 800f568:	4973      	ldr	r1, [pc, #460]	@ (800f738 <rmw_init+0x208>)
 800f56a:	4874      	ldr	r0, [pc, #464]	@ (800f73c <rmw_init+0x20c>)
 800f56c:	60b7      	str	r7, [r6, #8]
 800f56e:	e9c6 2300 	strd	r2, r3, [r6]
 800f572:	68eb      	ldr	r3, [r5, #12]
 800f574:	64b3      	str	r3, [r6, #72]	@ 0x48
 800f576:	2201      	movs	r2, #1
 800f578:	f000 fe68 	bl	801024c <rmw_uxrce_init_session_memory>
 800f57c:	4620      	mov	r0, r4
 800f57e:	4970      	ldr	r1, [pc, #448]	@ (800f740 <rmw_init+0x210>)
 800f580:	2204      	movs	r2, #4
 800f582:	f000 fea3 	bl	80102cc <rmw_uxrce_init_static_input_buffer_memory>
 800f586:	f04f 0800 	mov.w	r8, #0
 800f58a:	486c      	ldr	r0, [pc, #432]	@ (800f73c <rmw_init+0x20c>)
 800f58c:	f884 800d 	strb.w	r8, [r4, #13]
 800f590:	f008 fcaa 	bl	8017ee8 <get_memory>
 800f594:	2800      	cmp	r0, #0
 800f596:	f000 80a9 	beq.w	800f6ec <rmw_init+0x1bc>
 800f59a:	6884      	ldr	r4, [r0, #8]
 800f59c:	6b68      	ldr	r0, [r5, #52]	@ 0x34
 800f59e:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 800f5a0:	f890 c010 	ldrb.w	ip, [r0, #16]
 800f5a4:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 800f5a8:	9101      	str	r1, [sp, #4]
 800f5aa:	6a00      	ldr	r0, [r0, #32]
 800f5ac:	9000      	str	r0, [sp, #0]
 800f5ae:	f104 0910 	add.w	r9, r4, #16
 800f5b2:	4661      	mov	r1, ip
 800f5b4:	4648      	mov	r0, r9
 800f5b6:	f001 fe69 	bl	801128c <uxr_set_custom_transport_callbacks>
 800f5ba:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
 800f5be:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800f5c2:	e9c4 22e3 	strd	r2, r2, [r4, #908]	@ 0x38c
 800f5c6:	f504 725e 	add.w	r2, r4, #888	@ 0x378
 800f5ca:	e9c4 22e1 	strd	r2, r2, [r4, #900]	@ 0x384
 800f5ce:	495d      	ldr	r1, [pc, #372]	@ (800f744 <rmw_init+0x214>)
 800f5d0:	f8c3 8594 	str.w	r8, [r3, #1428]	@ 0x594
 800f5d4:	f8c3 8598 	str.w	r8, [r3, #1432]	@ 0x598
 800f5d8:	f8c3 859c 	str.w	r8, [r3, #1436]	@ 0x59c
 800f5dc:	f8c3 85a0 	str.w	r8, [r3, #1440]	@ 0x5a0
 800f5e0:	4859      	ldr	r0, [pc, #356]	@ (800f748 <rmw_init+0x218>)
 800f5e2:	e9c4 78da 	strd	r7, r8, [r4, #872]	@ 0x368
 800f5e6:	2201      	movs	r2, #1
 800f5e8:	64f4      	str	r4, [r6, #76]	@ 0x4c
 800f5ea:	f000 fe0f 	bl	801020c <rmw_uxrce_init_node_memory>
 800f5ee:	4957      	ldr	r1, [pc, #348]	@ (800f74c <rmw_init+0x21c>)
 800f5f0:	4857      	ldr	r0, [pc, #348]	@ (800f750 <rmw_init+0x220>)
 800f5f2:	2205      	movs	r2, #5
 800f5f4:	f000 fdea 	bl	80101cc <rmw_uxrce_init_subscription_memory>
 800f5f8:	4956      	ldr	r1, [pc, #344]	@ (800f754 <rmw_init+0x224>)
 800f5fa:	4857      	ldr	r0, [pc, #348]	@ (800f758 <rmw_init+0x228>)
 800f5fc:	220a      	movs	r2, #10
 800f5fe:	f000 fdc5 	bl	801018c <rmw_uxrce_init_publisher_memory>
 800f602:	4956      	ldr	r1, [pc, #344]	@ (800f75c <rmw_init+0x22c>)
 800f604:	4856      	ldr	r0, [pc, #344]	@ (800f760 <rmw_init+0x230>)
 800f606:	2201      	movs	r2, #1
 800f608:	f000 fd80 	bl	801010c <rmw_uxrce_init_service_memory>
 800f60c:	4955      	ldr	r1, [pc, #340]	@ (800f764 <rmw_init+0x234>)
 800f60e:	4856      	ldr	r0, [pc, #344]	@ (800f768 <rmw_init+0x238>)
 800f610:	2201      	movs	r2, #1
 800f612:	f000 fd9b 	bl	801014c <rmw_uxrce_init_client_memory>
 800f616:	4955      	ldr	r1, [pc, #340]	@ (800f76c <rmw_init+0x23c>)
 800f618:	4855      	ldr	r0, [pc, #340]	@ (800f770 <rmw_init+0x240>)
 800f61a:	220f      	movs	r2, #15
 800f61c:	f000 fe36 	bl	801028c <rmw_uxrce_init_topic_memory>
 800f620:	4954      	ldr	r1, [pc, #336]	@ (800f774 <rmw_init+0x244>)
 800f622:	4855      	ldr	r0, [pc, #340]	@ (800f778 <rmw_init+0x248>)
 800f624:	2203      	movs	r2, #3
 800f626:	f000 fe71 	bl	801030c <rmw_uxrce_init_init_options_impl_memory>
 800f62a:	4954      	ldr	r1, [pc, #336]	@ (800f77c <rmw_init+0x24c>)
 800f62c:	4854      	ldr	r0, [pc, #336]	@ (800f780 <rmw_init+0x250>)
 800f62e:	2204      	movs	r2, #4
 800f630:	f000 fe8c 	bl	801034c <rmw_uxrce_init_wait_set_memory>
 800f634:	4953      	ldr	r1, [pc, #332]	@ (800f784 <rmw_init+0x254>)
 800f636:	4854      	ldr	r0, [pc, #336]	@ (800f788 <rmw_init+0x258>)
 800f638:	2204      	movs	r2, #4
 800f63a:	f000 fea7 	bl	801038c <rmw_uxrce_init_guard_condition_memory>
 800f63e:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 800f640:	6cf0      	ldr	r0, [r6, #76]	@ 0x4c
 800f642:	4642      	mov	r2, r8
 800f644:	f000 fd2a 	bl	801009c <rmw_uxrce_transport_init>
 800f648:	4607      	mov	r7, r0
 800f64a:	2800      	cmp	r0, #0
 800f64c:	d158      	bne.n	800f700 <rmw_init+0x1d0>
 800f64e:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 800f650:	f504 7528 	add.w	r5, r4, #672	@ 0x2a0
 800f654:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800f656:	f504 7122 	add.w	r1, r4, #648	@ 0x288
 800f65a:	4628      	mov	r0, r5
 800f65c:	f002 f84c 	bl	80116f8 <uxr_init_session>
 800f660:	494a      	ldr	r1, [pc, #296]	@ (800f78c <rmw_init+0x25c>)
 800f662:	4622      	mov	r2, r4
 800f664:	4628      	mov	r0, r5
 800f666:	f002 f86b 	bl	8011740 <uxr_set_topic_callback>
 800f66a:	4949      	ldr	r1, [pc, #292]	@ (800f790 <rmw_init+0x260>)
 800f66c:	463a      	mov	r2, r7
 800f66e:	4628      	mov	r0, r5
 800f670:	f002 f862 	bl	8011738 <uxr_set_status_callback>
 800f674:	4947      	ldr	r1, [pc, #284]	@ (800f794 <rmw_init+0x264>)
 800f676:	463a      	mov	r2, r7
 800f678:	4628      	mov	r0, r5
 800f67a:	f002 f865 	bl	8011748 <uxr_set_request_callback>
 800f67e:	4946      	ldr	r1, [pc, #280]	@ (800f798 <rmw_init+0x268>)
 800f680:	463a      	mov	r2, r7
 800f682:	4628      	mov	r0, r5
 800f684:	f002 f864 	bl	8011750 <uxr_set_reply_callback>
 800f688:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 800f68c:	2304      	movs	r3, #4
 800f68e:	0092      	lsls	r2, r2, #2
 800f690:	f504 7165 	add.w	r1, r4, #916	@ 0x394
 800f694:	4628      	mov	r0, r5
 800f696:	f002 f899 	bl	80117cc <uxr_create_input_reliable_stream>
 800f69a:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 800f69e:	f8c4 0374 	str.w	r0, [r4, #884]	@ 0x374
 800f6a2:	0092      	lsls	r2, r2, #2
 800f6a4:	2304      	movs	r3, #4
 800f6a6:	f604 3194 	addw	r1, r4, #2964	@ 0xb94
 800f6aa:	4628      	mov	r0, r5
 800f6ac:	f002 f866 	bl	801177c <uxr_create_output_reliable_stream>
 800f6b0:	f8c4 0378 	str.w	r0, [r4, #888]	@ 0x378
 800f6b4:	4628      	mov	r0, r5
 800f6b6:	f002 f883 	bl	80117c0 <uxr_create_input_best_effort_stream>
 800f6ba:	f504 519c 	add.w	r1, r4, #4992	@ 0x1380
 800f6be:	f8c4 0380 	str.w	r0, [r4, #896]	@ 0x380
 800f6c2:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 800f6c6:	3114      	adds	r1, #20
 800f6c8:	4628      	mov	r0, r5
 800f6ca:	f002 f845 	bl	8011758 <uxr_create_output_best_effort_stream>
 800f6ce:	f8c4 037c 	str.w	r0, [r4, #892]	@ 0x37c
 800f6d2:	4628      	mov	r0, r5
 800f6d4:	f002 fe24 	bl	8012320 <uxr_create_session>
 800f6d8:	b1f8      	cbz	r0, 800f71a <rmw_init+0x1ea>
 800f6da:	4638      	mov	r0, r7
 800f6dc:	b003      	add	sp, #12
 800f6de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f6e2:	270b      	movs	r7, #11
 800f6e4:	4638      	mov	r0, r7
 800f6e6:	b003      	add	sp, #12
 800f6e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f6ec:	2701      	movs	r7, #1
 800f6ee:	4638      	mov	r0, r7
 800f6f0:	b003      	add	sp, #12
 800f6f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f6f6:	270c      	movs	r7, #12
 800f6f8:	4638      	mov	r0, r7
 800f6fa:	b003      	add	sp, #12
 800f6fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f700:	4648      	mov	r0, r9
 800f702:	f001 fe05 	bl	8011310 <uxr_close_custom_transport>
 800f706:	480d      	ldr	r0, [pc, #52]	@ (800f73c <rmw_init+0x20c>)
 800f708:	4621      	mov	r1, r4
 800f70a:	f008 fbfd 	bl	8017f08 <put_memory>
 800f70e:	4638      	mov	r0, r7
 800f710:	f8c6 804c 	str.w	r8, [r6, #76]	@ 0x4c
 800f714:	b003      	add	sp, #12
 800f716:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f71a:	4648      	mov	r0, r9
 800f71c:	f001 fdf8 	bl	8011310 <uxr_close_custom_transport>
 800f720:	4806      	ldr	r0, [pc, #24]	@ (800f73c <rmw_init+0x20c>)
 800f722:	4621      	mov	r1, r4
 800f724:	f008 fbf0 	bl	8017f08 <put_memory>
 800f728:	64f7      	str	r7, [r6, #76]	@ 0x4c
 800f72a:	2701      	movs	r7, #1
 800f72c:	e7d5      	b.n	800f6da <rmw_init+0x1aa>
 800f72e:	bf00      	nop
 800f730:	0801e2bc 	.word	0x0801e2bc
 800f734:	2000b334 	.word	0x2000b334
 800f738:	200075e0 	.word	0x200075e0
 800f73c:	2000b324 	.word	0x2000b324
 800f740:	20008b88 	.word	0x20008b88
 800f744:	20006c04 	.word	0x20006c04
 800f748:	2000b2f4 	.word	0x2000b2f4
 800f74c:	2000ac88 	.word	0x2000ac88
 800f750:	2000b344 	.word	0x2000b344
 800f754:	20006ca8 	.word	0x20006ca8
 800f758:	2000b304 	.word	0x2000b304
 800f75c:	20007518 	.word	0x20007518
 800f760:	2000b314 	.word	0x2000b314
 800f764:	20006a38 	.word	0x20006a38
 800f768:	20006a24 	.word	0x20006a24
 800f76c:	2000b0c0 	.word	0x2000b0c0
 800f770:	2000b354 	.word	0x2000b354
 800f774:	20006b80 	.word	0x20006b80
 800f778:	2000b2e4 	.word	0x2000b2e4
 800f77c:	2000b264 	.word	0x2000b264
 800f780:	2000b364 	.word	0x2000b364
 800f784:	20006b00 	.word	0x20006b00
 800f788:	2000b2d4 	.word	0x2000b2d4
 800f78c:	08017d21 	.word	0x08017d21
 800f790:	08017d19 	.word	0x08017d19
 800f794:	08017db9 	.word	0x08017db9
 800f798:	08017e55 	.word	0x08017e55

0800f79c <rmw_context_fini>:
 800f79c:	4b17      	ldr	r3, [pc, #92]	@ (800f7fc <rmw_context_fini+0x60>)
 800f79e:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 800f7a0:	b570      	push	{r4, r5, r6, lr}
 800f7a2:	681c      	ldr	r4, [r3, #0]
 800f7a4:	4605      	mov	r5, r0
 800f7a6:	b334      	cbz	r4, 800f7f6 <rmw_context_fini+0x5a>
 800f7a8:	2600      	movs	r6, #0
 800f7aa:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 800f7ae:	6902      	ldr	r2, [r0, #16]
 800f7b0:	428a      	cmp	r2, r1
 800f7b2:	d018      	beq.n	800f7e6 <rmw_context_fini+0x4a>
 800f7b4:	2c00      	cmp	r4, #0
 800f7b6:	d1f8      	bne.n	800f7aa <rmw_context_fini+0xe>
 800f7b8:	b189      	cbz	r1, 800f7de <rmw_context_fini+0x42>
 800f7ba:	f8d1 3388 	ldr.w	r3, [r1, #904]	@ 0x388
 800f7be:	789b      	ldrb	r3, [r3, #2]
 800f7c0:	2b01      	cmp	r3, #1
 800f7c2:	f501 7028 	add.w	r0, r1, #672	@ 0x2a0
 800f7c6:	bf14      	ite	ne
 800f7c8:	210a      	movne	r1, #10
 800f7ca:	2100      	moveq	r1, #0
 800f7cc:	f002 fd80 	bl	80122d0 <uxr_delete_session_retries>
 800f7d0:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 800f7d2:	f000 fdfb 	bl	80103cc <rmw_uxrce_fini_session_memory>
 800f7d6:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 800f7d8:	3010      	adds	r0, #16
 800f7da:	f001 fd99 	bl	8011310 <uxr_close_custom_transport>
 800f7de:	2300      	movs	r3, #0
 800f7e0:	64eb      	str	r3, [r5, #76]	@ 0x4c
 800f7e2:	4630      	mov	r0, r6
 800f7e4:	bd70      	pop	{r4, r5, r6, pc}
 800f7e6:	3018      	adds	r0, #24
 800f7e8:	f000 f89c 	bl	800f924 <rmw_destroy_node>
 800f7ec:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800f7ee:	4606      	mov	r6, r0
 800f7f0:	2c00      	cmp	r4, #0
 800f7f2:	d1da      	bne.n	800f7aa <rmw_context_fini+0xe>
 800f7f4:	e7e0      	b.n	800f7b8 <rmw_context_fini+0x1c>
 800f7f6:	4626      	mov	r6, r4
 800f7f8:	e7de      	b.n	800f7b8 <rmw_context_fini+0x1c>
 800f7fa:	bf00      	nop
 800f7fc:	2000b2f4 	.word	0x2000b2f4

0800f800 <create_node>:
 800f800:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f804:	b083      	sub	sp, #12
 800f806:	2b00      	cmp	r3, #0
 800f808:	d05f      	beq.n	800f8ca <create_node+0xca>
 800f80a:	4606      	mov	r6, r0
 800f80c:	4835      	ldr	r0, [pc, #212]	@ (800f8e4 <create_node+0xe4>)
 800f80e:	460f      	mov	r7, r1
 800f810:	4690      	mov	r8, r2
 800f812:	461d      	mov	r5, r3
 800f814:	f008 fb68 	bl	8017ee8 <get_memory>
 800f818:	2800      	cmp	r0, #0
 800f81a:	d056      	beq.n	800f8ca <create_node+0xca>
 800f81c:	6884      	ldr	r4, [r0, #8]
 800f81e:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 800f820:	6123      	str	r3, [r4, #16]
 800f822:	f008 fbc9 	bl	8017fb8 <rmw_get_implementation_identifier>
 800f826:	f104 092c 	add.w	r9, r4, #44	@ 0x2c
 800f82a:	e9c4 0406 	strd	r0, r4, [r4, #24]
 800f82e:	f8c4 9020 	str.w	r9, [r4, #32]
 800f832:	4630      	mov	r0, r6
 800f834:	f7f0 fcfe 	bl	8000234 <strlen>
 800f838:	1c42      	adds	r2, r0, #1
 800f83a:	2a3c      	cmp	r2, #60	@ 0x3c
 800f83c:	f104 0518 	add.w	r5, r4, #24
 800f840:	d840      	bhi.n	800f8c4 <create_node+0xc4>
 800f842:	4648      	mov	r0, r9
 800f844:	4631      	mov	r1, r6
 800f846:	f104 0968 	add.w	r9, r4, #104	@ 0x68
 800f84a:	f00b fa50 	bl	801acee <memcpy>
 800f84e:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
 800f852:	4638      	mov	r0, r7
 800f854:	f7f0 fcee 	bl	8000234 <strlen>
 800f858:	1c42      	adds	r2, r0, #1
 800f85a:	2a3c      	cmp	r2, #60	@ 0x3c
 800f85c:	d832      	bhi.n	800f8c4 <create_node+0xc4>
 800f85e:	4639      	mov	r1, r7
 800f860:	4648      	mov	r0, r9
 800f862:	f00b fa44 	bl	801acee <memcpy>
 800f866:	6923      	ldr	r3, [r4, #16]
 800f868:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800f86c:	2101      	movs	r1, #1
 800f86e:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	@ 0x594
 800f872:	1842      	adds	r2, r0, r1
 800f874:	f8a3 2594 	strh.w	r2, [r3, #1428]	@ 0x594
 800f878:	f001 fd4e 	bl	8011318 <uxr_object_id>
 800f87c:	6160      	str	r0, [r4, #20]
 800f87e:	783b      	ldrb	r3, [r7, #0]
 800f880:	2b2f      	cmp	r3, #47	@ 0x2f
 800f882:	d127      	bne.n	800f8d4 <create_node+0xd4>
 800f884:	787b      	ldrb	r3, [r7, #1]
 800f886:	bb2b      	cbnz	r3, 800f8d4 <create_node+0xd4>
 800f888:	4a17      	ldr	r2, [pc, #92]	@ (800f8e8 <create_node+0xe8>)
 800f88a:	4818      	ldr	r0, [pc, #96]	@ (800f8ec <create_node+0xec>)
 800f88c:	4633      	mov	r3, r6
 800f88e:	213c      	movs	r1, #60	@ 0x3c
 800f890:	f00a fff0 	bl	801a874 <sniprintf>
 800f894:	6920      	ldr	r0, [r4, #16]
 800f896:	4915      	ldr	r1, [pc, #84]	@ (800f8ec <create_node+0xec>)
 800f898:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 800f89c:	9100      	str	r1, [sp, #0]
 800f89e:	2106      	movs	r1, #6
 800f8a0:	9101      	str	r1, [sp, #4]
 800f8a2:	6811      	ldr	r1, [r2, #0]
 800f8a4:	6962      	ldr	r2, [r4, #20]
 800f8a6:	fa1f f388 	uxth.w	r3, r8
 800f8aa:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800f8ae:	f001 fabb 	bl	8010e28 <uxr_buffer_create_participant_bin>
 800f8b2:	4602      	mov	r2, r0
 800f8b4:	6920      	ldr	r0, [r4, #16]
 800f8b6:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800f8ba:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800f8be:	f000 fefd 	bl	80106bc <run_xrce_session>
 800f8c2:	b918      	cbnz	r0, 800f8cc <create_node+0xcc>
 800f8c4:	4628      	mov	r0, r5
 800f8c6:	f000 fd87 	bl	80103d8 <rmw_uxrce_fini_node_memory>
 800f8ca:	2500      	movs	r5, #0
 800f8cc:	4628      	mov	r0, r5
 800f8ce:	b003      	add	sp, #12
 800f8d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f8d4:	4a06      	ldr	r2, [pc, #24]	@ (800f8f0 <create_node+0xf0>)
 800f8d6:	9600      	str	r6, [sp, #0]
 800f8d8:	463b      	mov	r3, r7
 800f8da:	213c      	movs	r1, #60	@ 0x3c
 800f8dc:	4803      	ldr	r0, [pc, #12]	@ (800f8ec <create_node+0xec>)
 800f8de:	f00a ffc9 	bl	801a874 <sniprintf>
 800f8e2:	e7d7      	b.n	800f894 <create_node+0x94>
 800f8e4:	2000b2f4 	.word	0x2000b2f4
 800f8e8:	0801d6ec 	.word	0x0801d6ec
 800f8ec:	200069e8 	.word	0x200069e8
 800f8f0:	0801d6d4 	.word	0x0801d6d4

0800f8f4 <rmw_create_node>:
 800f8f4:	b199      	cbz	r1, 800f91e <rmw_create_node+0x2a>
 800f8f6:	780b      	ldrb	r3, [r1, #0]
 800f8f8:	468c      	mov	ip, r1
 800f8fa:	b183      	cbz	r3, 800f91e <rmw_create_node+0x2a>
 800f8fc:	b410      	push	{r4}
 800f8fe:	4614      	mov	r4, r2
 800f900:	b14a      	cbz	r2, 800f916 <rmw_create_node+0x22>
 800f902:	7813      	ldrb	r3, [r2, #0]
 800f904:	b13b      	cbz	r3, 800f916 <rmw_create_node+0x22>
 800f906:	6c82      	ldr	r2, [r0, #72]	@ 0x48
 800f908:	4603      	mov	r3, r0
 800f90a:	4621      	mov	r1, r4
 800f90c:	4660      	mov	r0, ip
 800f90e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f912:	f7ff bf75 	b.w	800f800 <create_node>
 800f916:	2000      	movs	r0, #0
 800f918:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f91c:	4770      	bx	lr
 800f91e:	2000      	movs	r0, #0
 800f920:	4770      	bx	lr
 800f922:	bf00      	nop

0800f924 <rmw_destroy_node>:
 800f924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f926:	b328      	cbz	r0, 800f974 <rmw_destroy_node+0x50>
 800f928:	4607      	mov	r7, r0
 800f92a:	6800      	ldr	r0, [r0, #0]
 800f92c:	b120      	cbz	r0, 800f938 <rmw_destroy_node+0x14>
 800f92e:	4b36      	ldr	r3, [pc, #216]	@ (800fa08 <rmw_destroy_node+0xe4>)
 800f930:	6819      	ldr	r1, [r3, #0]
 800f932:	f7f0 fc75 	bl	8000220 <strcmp>
 800f936:	b9e8      	cbnz	r0, 800f974 <rmw_destroy_node+0x50>
 800f938:	687d      	ldr	r5, [r7, #4]
 800f93a:	b1dd      	cbz	r5, 800f974 <rmw_destroy_node+0x50>
 800f93c:	4b33      	ldr	r3, [pc, #204]	@ (800fa0c <rmw_destroy_node+0xe8>)
 800f93e:	681c      	ldr	r4, [r3, #0]
 800f940:	2c00      	cmp	r4, #0
 800f942:	d05f      	beq.n	800fa04 <rmw_destroy_node+0xe0>
 800f944:	2600      	movs	r6, #0
 800f946:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800f94a:	f8d1 3080 	ldr.w	r3, [r1, #128]	@ 0x80
 800f94e:	429d      	cmp	r5, r3
 800f950:	d013      	beq.n	800f97a <rmw_destroy_node+0x56>
 800f952:	2c00      	cmp	r4, #0
 800f954:	d1f7      	bne.n	800f946 <rmw_destroy_node+0x22>
 800f956:	4b2e      	ldr	r3, [pc, #184]	@ (800fa10 <rmw_destroy_node+0xec>)
 800f958:	681c      	ldr	r4, [r3, #0]
 800f95a:	b1c4      	cbz	r4, 800f98e <rmw_destroy_node+0x6a>
 800f95c:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800f960:	6a0b      	ldr	r3, [r1, #32]
 800f962:	429d      	cmp	r5, r3
 800f964:	d1f9      	bne.n	800f95a <rmw_destroy_node+0x36>
 800f966:	317c      	adds	r1, #124	@ 0x7c
 800f968:	4638      	mov	r0, r7
 800f96a:	f000 fb37 	bl	800ffdc <rmw_destroy_subscription>
 800f96e:	2801      	cmp	r0, #1
 800f970:	4606      	mov	r6, r0
 800f972:	d1f2      	bne.n	800f95a <rmw_destroy_node+0x36>
 800f974:	2601      	movs	r6, #1
 800f976:	4630      	mov	r0, r6
 800f978:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f97a:	3184      	adds	r1, #132	@ 0x84
 800f97c:	4638      	mov	r0, r7
 800f97e:	f000 f9a5 	bl	800fccc <rmw_destroy_publisher>
 800f982:	2801      	cmp	r0, #1
 800f984:	4606      	mov	r6, r0
 800f986:	d0f5      	beq.n	800f974 <rmw_destroy_node+0x50>
 800f988:	2c00      	cmp	r4, #0
 800f98a:	d1dc      	bne.n	800f946 <rmw_destroy_node+0x22>
 800f98c:	e7e3      	b.n	800f956 <rmw_destroy_node+0x32>
 800f98e:	4b21      	ldr	r3, [pc, #132]	@ (800fa14 <rmw_destroy_node+0xf0>)
 800f990:	681c      	ldr	r4, [r3, #0]
 800f992:	b16c      	cbz	r4, 800f9b0 <rmw_destroy_node+0x8c>
 800f994:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800f998:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 800f99a:	429d      	cmp	r5, r3
 800f99c:	d1f9      	bne.n	800f992 <rmw_destroy_node+0x6e>
 800f99e:	317c      	adds	r1, #124	@ 0x7c
 800f9a0:	4638      	mov	r0, r7
 800f9a2:	f000 f9e5 	bl	800fd70 <rmw_destroy_service>
 800f9a6:	2801      	cmp	r0, #1
 800f9a8:	4606      	mov	r6, r0
 800f9aa:	d0e3      	beq.n	800f974 <rmw_destroy_node+0x50>
 800f9ac:	2c00      	cmp	r4, #0
 800f9ae:	d1f1      	bne.n	800f994 <rmw_destroy_node+0x70>
 800f9b0:	4b19      	ldr	r3, [pc, #100]	@ (800fa18 <rmw_destroy_node+0xf4>)
 800f9b2:	681c      	ldr	r4, [r3, #0]
 800f9b4:	b16c      	cbz	r4, 800f9d2 <rmw_destroy_node+0xae>
 800f9b6:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800f9ba:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 800f9bc:	429d      	cmp	r5, r3
 800f9be:	d1f9      	bne.n	800f9b4 <rmw_destroy_node+0x90>
 800f9c0:	317c      	adds	r1, #124	@ 0x7c
 800f9c2:	4638      	mov	r0, r7
 800f9c4:	f008 fab4 	bl	8017f30 <rmw_destroy_client>
 800f9c8:	2801      	cmp	r0, #1
 800f9ca:	4606      	mov	r6, r0
 800f9cc:	d0d2      	beq.n	800f974 <rmw_destroy_node+0x50>
 800f9ce:	2c00      	cmp	r4, #0
 800f9d0:	d1f1      	bne.n	800f9b6 <rmw_destroy_node+0x92>
 800f9d2:	6928      	ldr	r0, [r5, #16]
 800f9d4:	696a      	ldr	r2, [r5, #20]
 800f9d6:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800f9da:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800f9de:	6819      	ldr	r1, [r3, #0]
 800f9e0:	f001 f9d6 	bl	8010d90 <uxr_buffer_delete_entity>
 800f9e4:	4602      	mov	r2, r0
 800f9e6:	6928      	ldr	r0, [r5, #16]
 800f9e8:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800f9ec:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800f9f0:	f000 fe64 	bl	80106bc <run_xrce_session>
 800f9f4:	2800      	cmp	r0, #0
 800f9f6:	bf08      	it	eq
 800f9f8:	2602      	moveq	r6, #2
 800f9fa:	4638      	mov	r0, r7
 800f9fc:	f000 fcec 	bl	80103d8 <rmw_uxrce_fini_node_memory>
 800fa00:	4630      	mov	r0, r6
 800fa02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fa04:	4626      	mov	r6, r4
 800fa06:	e7a6      	b.n	800f956 <rmw_destroy_node+0x32>
 800fa08:	0801e2bc 	.word	0x0801e2bc
 800fa0c:	2000b304 	.word	0x2000b304
 800fa10:	2000b344 	.word	0x2000b344
 800fa14:	2000b314 	.word	0x2000b314
 800fa18:	20006a24 	.word	0x20006a24

0800fa1c <rmw_node_get_graph_guard_condition>:
 800fa1c:	6843      	ldr	r3, [r0, #4]
 800fa1e:	6918      	ldr	r0, [r3, #16]
 800fa20:	f500 705a 	add.w	r0, r0, #872	@ 0x368
 800fa24:	4770      	bx	lr
 800fa26:	bf00      	nop

0800fa28 <flush_session>:
 800fa28:	6fc9      	ldr	r1, [r1, #124]	@ 0x7c
 800fa2a:	f002 bab5 	b.w	8011f98 <uxr_run_session_until_confirm_delivery>
 800fa2e:	bf00      	nop

0800fa30 <rmw_publish>:
 800fa30:	2800      	cmp	r0, #0
 800fa32:	d053      	beq.n	800fadc <rmw_publish+0xac>
 800fa34:	b570      	push	{r4, r5, r6, lr}
 800fa36:	460d      	mov	r5, r1
 800fa38:	b08e      	sub	sp, #56	@ 0x38
 800fa3a:	2900      	cmp	r1, #0
 800fa3c:	d04b      	beq.n	800fad6 <rmw_publish+0xa6>
 800fa3e:	4604      	mov	r4, r0
 800fa40:	6800      	ldr	r0, [r0, #0]
 800fa42:	f000 febb 	bl	80107bc <is_uxrce_rmw_identifier_valid>
 800fa46:	2800      	cmp	r0, #0
 800fa48:	d045      	beq.n	800fad6 <rmw_publish+0xa6>
 800fa4a:	6866      	ldr	r6, [r4, #4]
 800fa4c:	2e00      	cmp	r6, #0
 800fa4e:	d042      	beq.n	800fad6 <rmw_publish+0xa6>
 800fa50:	69b4      	ldr	r4, [r6, #24]
 800fa52:	4628      	mov	r0, r5
 800fa54:	6923      	ldr	r3, [r4, #16]
 800fa56:	4798      	blx	r3
 800fa58:	69f3      	ldr	r3, [r6, #28]
 800fa5a:	9005      	str	r0, [sp, #20]
 800fa5c:	b113      	cbz	r3, 800fa64 <rmw_publish+0x34>
 800fa5e:	a805      	add	r0, sp, #20
 800fa60:	4798      	blx	r3
 800fa62:	9805      	ldr	r0, [sp, #20]
 800fa64:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800fa68:	691b      	ldr	r3, [r3, #16]
 800fa6a:	9000      	str	r0, [sp, #0]
 800fa6c:	6972      	ldr	r2, [r6, #20]
 800fa6e:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 800fa70:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800fa74:	ab06      	add	r3, sp, #24
 800fa76:	f003 fd61 	bl	801353c <uxr_prepare_output_stream>
 800fa7a:	b1d8      	cbz	r0, 800fab4 <rmw_publish+0x84>
 800fa7c:	68a3      	ldr	r3, [r4, #8]
 800fa7e:	a906      	add	r1, sp, #24
 800fa80:	4628      	mov	r0, r5
 800fa82:	4798      	blx	r3
 800fa84:	6a33      	ldr	r3, [r6, #32]
 800fa86:	4604      	mov	r4, r0
 800fa88:	b10b      	cbz	r3, 800fa8e <rmw_publish+0x5e>
 800fa8a:	a806      	add	r0, sp, #24
 800fa8c:	4798      	blx	r3
 800fa8e:	f896 307a 	ldrb.w	r3, [r6, #122]	@ 0x7a
 800fa92:	2b01      	cmp	r3, #1
 800fa94:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800fa98:	d022      	beq.n	800fae0 <rmw_publish+0xb0>
 800fa9a:	6918      	ldr	r0, [r3, #16]
 800fa9c:	6ff1      	ldr	r1, [r6, #124]	@ 0x7c
 800fa9e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800faa2:	f002 fa79 	bl	8011f98 <uxr_run_session_until_confirm_delivery>
 800faa6:	4020      	ands	r0, r4
 800faa8:	b2c4      	uxtb	r4, r0
 800faaa:	f084 0001 	eor.w	r0, r4, #1
 800faae:	b2c0      	uxtb	r0, r0
 800fab0:	b00e      	add	sp, #56	@ 0x38
 800fab2:	bd70      	pop	{r4, r5, r6, pc}
 800fab4:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800fab8:	6918      	ldr	r0, [r3, #16]
 800faba:	9b05      	ldr	r3, [sp, #20]
 800fabc:	9300      	str	r3, [sp, #0]
 800fabe:	4b0b      	ldr	r3, [pc, #44]	@ (800faec <rmw_publish+0xbc>)
 800fac0:	9301      	str	r3, [sp, #4]
 800fac2:	9602      	str	r6, [sp, #8]
 800fac4:	6972      	ldr	r2, [r6, #20]
 800fac6:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 800fac8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800facc:	ab06      	add	r3, sp, #24
 800face:	f003 fd65 	bl	801359c <uxr_prepare_output_stream_fragmented>
 800fad2:	2800      	cmp	r0, #0
 800fad4:	d1d2      	bne.n	800fa7c <rmw_publish+0x4c>
 800fad6:	2001      	movs	r0, #1
 800fad8:	b00e      	add	sp, #56	@ 0x38
 800fada:	bd70      	pop	{r4, r5, r6, pc}
 800fadc:	2001      	movs	r0, #1
 800fade:	4770      	bx	lr
 800fae0:	6918      	ldr	r0, [r3, #16]
 800fae2:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800fae6:	f001 fe97 	bl	8011818 <uxr_flash_output_streams>
 800faea:	e7de      	b.n	800faaa <rmw_publish+0x7a>
 800faec:	0800fa29 	.word	0x0800fa29

0800faf0 <rmw_create_publisher>:
 800faf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800faf4:	b087      	sub	sp, #28
 800faf6:	2800      	cmp	r0, #0
 800faf8:	f000 80cc 	beq.w	800fc94 <rmw_create_publisher+0x1a4>
 800fafc:	460e      	mov	r6, r1
 800fafe:	2900      	cmp	r1, #0
 800fb00:	f000 80c8 	beq.w	800fc94 <rmw_create_publisher+0x1a4>
 800fb04:	4604      	mov	r4, r0
 800fb06:	6800      	ldr	r0, [r0, #0]
 800fb08:	4615      	mov	r5, r2
 800fb0a:	4698      	mov	r8, r3
 800fb0c:	f000 fe56 	bl	80107bc <is_uxrce_rmw_identifier_valid>
 800fb10:	2800      	cmp	r0, #0
 800fb12:	f000 80bf 	beq.w	800fc94 <rmw_create_publisher+0x1a4>
 800fb16:	2d00      	cmp	r5, #0
 800fb18:	f000 80bc 	beq.w	800fc94 <rmw_create_publisher+0x1a4>
 800fb1c:	782b      	ldrb	r3, [r5, #0]
 800fb1e:	2b00      	cmp	r3, #0
 800fb20:	f000 80b8 	beq.w	800fc94 <rmw_create_publisher+0x1a4>
 800fb24:	f1b8 0f00 	cmp.w	r8, #0
 800fb28:	f000 80b4 	beq.w	800fc94 <rmw_create_publisher+0x1a4>
 800fb2c:	485c      	ldr	r0, [pc, #368]	@ (800fca0 <rmw_create_publisher+0x1b0>)
 800fb2e:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800fb32:	f008 f9d9 	bl	8017ee8 <get_memory>
 800fb36:	2800      	cmp	r0, #0
 800fb38:	f000 80ac 	beq.w	800fc94 <rmw_create_publisher+0x1a4>
 800fb3c:	6884      	ldr	r4, [r0, #8]
 800fb3e:	f8c4 4088 	str.w	r4, [r4, #136]	@ 0x88
 800fb42:	f008 fa39 	bl	8017fb8 <rmw_get_implementation_identifier>
 800fb46:	f104 0a9c 	add.w	sl, r4, #156	@ 0x9c
 800fb4a:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
 800fb4e:	f8c4 a08c 	str.w	sl, [r4, #140]	@ 0x8c
 800fb52:	4628      	mov	r0, r5
 800fb54:	f7f0 fb6e 	bl	8000234 <strlen>
 800fb58:	3001      	adds	r0, #1
 800fb5a:	283c      	cmp	r0, #60	@ 0x3c
 800fb5c:	f104 0784 	add.w	r7, r4, #132	@ 0x84
 800fb60:	f200 8091 	bhi.w	800fc86 <rmw_create_publisher+0x196>
 800fb64:	4a4f      	ldr	r2, [pc, #316]	@ (800fca4 <rmw_create_publisher+0x1b4>)
 800fb66:	462b      	mov	r3, r5
 800fb68:	213c      	movs	r1, #60	@ 0x3c
 800fb6a:	4650      	mov	r0, sl
 800fb6c:	f00a fe82 	bl	801a874 <sniprintf>
 800fb70:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800fb74:	67e3      	str	r3, [r4, #124]	@ 0x7c
 800fb76:	4641      	mov	r1, r8
 800fb78:	f8c4 9080 	str.w	r9, [r4, #128]	@ 0x80
 800fb7c:	2250      	movs	r2, #80	@ 0x50
 800fb7e:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800fb82:	f00b f8b4 	bl	801acee <memcpy>
 800fb86:	f898 3008 	ldrb.w	r3, [r8, #8]
 800fb8a:	4947      	ldr	r1, [pc, #284]	@ (800fca8 <rmw_create_publisher+0x1b8>)
 800fb8c:	2b02      	cmp	r3, #2
 800fb8e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800fb92:	bf0c      	ite	eq
 800fb94:	f8d3 337c 	ldreq.w	r3, [r3, #892]	@ 0x37c
 800fb98:	f8d3 3378 	ldrne.w	r3, [r3, #888]	@ 0x378
 800fb9c:	67a3      	str	r3, [r4, #120]	@ 0x78
 800fb9e:	2300      	movs	r3, #0
 800fba0:	e9c4 3307 	strd	r3, r3, [r4, #28]
 800fba4:	4630      	mov	r0, r6
 800fba6:	f000 fe17 	bl	80107d8 <get_message_typesupport_handle>
 800fbaa:	2800      	cmp	r0, #0
 800fbac:	d06b      	beq.n	800fc86 <rmw_create_publisher+0x196>
 800fbae:	6842      	ldr	r2, [r0, #4]
 800fbb0:	61a2      	str	r2, [r4, #24]
 800fbb2:	2a00      	cmp	r2, #0
 800fbb4:	d067      	beq.n	800fc86 <rmw_create_publisher+0x196>
 800fbb6:	4629      	mov	r1, r5
 800fbb8:	4643      	mov	r3, r8
 800fbba:	4648      	mov	r0, r9
 800fbbc:	f008 fa02 	bl	8017fc4 <create_topic>
 800fbc0:	6260      	str	r0, [r4, #36]	@ 0x24
 800fbc2:	2800      	cmp	r0, #0
 800fbc4:	d063      	beq.n	800fc8e <rmw_create_publisher+0x19e>
 800fbc6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800fbca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800fbce:	2103      	movs	r1, #3
 800fbd0:	f8b3 0598 	ldrh.w	r0, [r3, #1432]	@ 0x598
 800fbd4:	1c42      	adds	r2, r0, #1
 800fbd6:	f8a3 2598 	strh.w	r2, [r3, #1432]	@ 0x598
 800fbda:	f001 fb9d 	bl	8011318 <uxr_object_id>
 800fbde:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 800fbe2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800fbe6:	6120      	str	r0, [r4, #16]
 800fbe8:	f8d3 3384 	ldr.w	r3, [r3, #900]	@ 0x384
 800fbec:	6910      	ldr	r0, [r2, #16]
 800fbee:	2506      	movs	r5, #6
 800fbf0:	9500      	str	r5, [sp, #0]
 800fbf2:	6819      	ldr	r1, [r3, #0]
 800fbf4:	6922      	ldr	r2, [r4, #16]
 800fbf6:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800fbfa:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800fbfe:	f001 f97b 	bl	8010ef8 <uxr_buffer_create_publisher_bin>
 800fc02:	4602      	mov	r2, r0
 800fc04:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800fc08:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800fc0c:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800fc10:	f000 fd54 	bl	80106bc <run_xrce_session>
 800fc14:	b3b8      	cbz	r0, 800fc86 <rmw_create_publisher+0x196>
 800fc16:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800fc1a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800fc1e:	2105      	movs	r1, #5
 800fc20:	f8b3 059a 	ldrh.w	r0, [r3, #1434]	@ 0x59a
 800fc24:	1c42      	adds	r2, r0, #1
 800fc26:	f8a3 259a 	strh.w	r2, [r3, #1434]	@ 0x59a
 800fc2a:	f001 fb75 	bl	8011318 <uxr_object_id>
 800fc2e:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800fc32:	6160      	str	r0, [r4, #20]
 800fc34:	691e      	ldr	r6, [r3, #16]
 800fc36:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800fc3a:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
 800fc3e:	f10d 0a10 	add.w	sl, sp, #16
 800fc42:	4641      	mov	r1, r8
 800fc44:	4650      	mov	r0, sl
 800fc46:	f8d3 8384 	ldr.w	r8, [r3, #900]	@ 0x384
 800fc4a:	f000 fd53 	bl	80106f4 <convert_qos_profile>
 800fc4e:	9503      	str	r5, [sp, #12]
 800fc50:	e89a 0003 	ldmia.w	sl, {r0, r1}
 800fc54:	9001      	str	r0, [sp, #4]
 800fc56:	f8ad 1008 	strh.w	r1, [sp, #8]
 800fc5a:	f8db 3010 	ldr.w	r3, [fp, #16]
 800fc5e:	9300      	str	r3, [sp, #0]
 800fc60:	f506 7628 	add.w	r6, r6, #672	@ 0x2a0
 800fc64:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 800fc68:	f8d8 1000 	ldr.w	r1, [r8]
 800fc6c:	4630      	mov	r0, r6
 800fc6e:	f001 f9a3 	bl	8010fb8 <uxr_buffer_create_datawriter_bin>
 800fc72:	4602      	mov	r2, r0
 800fc74:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800fc78:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800fc7c:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800fc80:	f000 fd1c 	bl	80106bc <run_xrce_session>
 800fc84:	b938      	cbnz	r0, 800fc96 <rmw_create_publisher+0x1a6>
 800fc86:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800fc88:	b108      	cbz	r0, 800fc8e <rmw_create_publisher+0x19e>
 800fc8a:	f000 fc15 	bl	80104b8 <rmw_uxrce_fini_topic_memory>
 800fc8e:	4638      	mov	r0, r7
 800fc90:	f000 fbba 	bl	8010408 <rmw_uxrce_fini_publisher_memory>
 800fc94:	2700      	movs	r7, #0
 800fc96:	4638      	mov	r0, r7
 800fc98:	b007      	add	sp, #28
 800fc9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc9e:	bf00      	nop
 800fca0:	2000b304 	.word	0x2000b304
 800fca4:	0801d6ec 	.word	0x0801d6ec
 800fca8:	0801d664 	.word	0x0801d664

0800fcac <rmw_publisher_get_actual_qos>:
 800fcac:	b150      	cbz	r0, 800fcc4 <rmw_publisher_get_actual_qos+0x18>
 800fcae:	b508      	push	{r3, lr}
 800fcb0:	460b      	mov	r3, r1
 800fcb2:	b149      	cbz	r1, 800fcc8 <rmw_publisher_get_actual_qos+0x1c>
 800fcb4:	6841      	ldr	r1, [r0, #4]
 800fcb6:	2250      	movs	r2, #80	@ 0x50
 800fcb8:	3128      	adds	r1, #40	@ 0x28
 800fcba:	4618      	mov	r0, r3
 800fcbc:	f00b f817 	bl	801acee <memcpy>
 800fcc0:	2000      	movs	r0, #0
 800fcc2:	bd08      	pop	{r3, pc}
 800fcc4:	200b      	movs	r0, #11
 800fcc6:	4770      	bx	lr
 800fcc8:	200b      	movs	r0, #11
 800fcca:	bd08      	pop	{r3, pc}

0800fccc <rmw_destroy_publisher>:
 800fccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fcce:	b128      	cbz	r0, 800fcdc <rmw_destroy_publisher+0x10>
 800fcd0:	4604      	mov	r4, r0
 800fcd2:	6800      	ldr	r0, [r0, #0]
 800fcd4:	460d      	mov	r5, r1
 800fcd6:	f000 fd71 	bl	80107bc <is_uxrce_rmw_identifier_valid>
 800fcda:	b910      	cbnz	r0, 800fce2 <rmw_destroy_publisher+0x16>
 800fcdc:	2401      	movs	r4, #1
 800fcde:	4620      	mov	r0, r4
 800fce0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fce2:	6863      	ldr	r3, [r4, #4]
 800fce4:	2b00      	cmp	r3, #0
 800fce6:	d0f9      	beq.n	800fcdc <rmw_destroy_publisher+0x10>
 800fce8:	2d00      	cmp	r5, #0
 800fcea:	d0f7      	beq.n	800fcdc <rmw_destroy_publisher+0x10>
 800fcec:	6828      	ldr	r0, [r5, #0]
 800fcee:	f000 fd65 	bl	80107bc <is_uxrce_rmw_identifier_valid>
 800fcf2:	2800      	cmp	r0, #0
 800fcf4:	d0f2      	beq.n	800fcdc <rmw_destroy_publisher+0x10>
 800fcf6:	686c      	ldr	r4, [r5, #4]
 800fcf8:	2c00      	cmp	r4, #0
 800fcfa:	d0ef      	beq.n	800fcdc <rmw_destroy_publisher+0x10>
 800fcfc:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800fcfe:	f8d4 7080 	ldr.w	r7, [r4, #128]	@ 0x80
 800fd02:	f008 f9af 	bl	8018064 <destroy_topic>
 800fd06:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800fd0a:	6962      	ldr	r2, [r4, #20]
 800fd0c:	6918      	ldr	r0, [r3, #16]
 800fd0e:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800fd12:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800fd16:	6819      	ldr	r1, [r3, #0]
 800fd18:	f001 f83a 	bl	8010d90 <uxr_buffer_delete_entity>
 800fd1c:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800fd20:	6922      	ldr	r2, [r4, #16]
 800fd22:	691b      	ldr	r3, [r3, #16]
 800fd24:	f8d3 1388 	ldr.w	r1, [r3, #904]	@ 0x388
 800fd28:	4604      	mov	r4, r0
 800fd2a:	6809      	ldr	r1, [r1, #0]
 800fd2c:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800fd30:	f001 f82e 	bl	8010d90 <uxr_buffer_delete_entity>
 800fd34:	693e      	ldr	r6, [r7, #16]
 800fd36:	4622      	mov	r2, r4
 800fd38:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800fd3c:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800fd40:	4604      	mov	r4, r0
 800fd42:	4630      	mov	r0, r6
 800fd44:	f000 fcba 	bl	80106bc <run_xrce_session>
 800fd48:	693e      	ldr	r6, [r7, #16]
 800fd4a:	4622      	mov	r2, r4
 800fd4c:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800fd50:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800fd54:	4604      	mov	r4, r0
 800fd56:	4630      	mov	r0, r6
 800fd58:	f000 fcb0 	bl	80106bc <run_xrce_session>
 800fd5c:	b12c      	cbz	r4, 800fd6a <rmw_destroy_publisher+0x9e>
 800fd5e:	b120      	cbz	r0, 800fd6a <rmw_destroy_publisher+0x9e>
 800fd60:	2400      	movs	r4, #0
 800fd62:	4628      	mov	r0, r5
 800fd64:	f000 fb50 	bl	8010408 <rmw_uxrce_fini_publisher_memory>
 800fd68:	e7b9      	b.n	800fcde <rmw_destroy_publisher+0x12>
 800fd6a:	2402      	movs	r4, #2
 800fd6c:	e7f9      	b.n	800fd62 <rmw_destroy_publisher+0x96>
 800fd6e:	bf00      	nop

0800fd70 <rmw_destroy_service>:
 800fd70:	b570      	push	{r4, r5, r6, lr}
 800fd72:	b128      	cbz	r0, 800fd80 <rmw_destroy_service+0x10>
 800fd74:	4604      	mov	r4, r0
 800fd76:	6800      	ldr	r0, [r0, #0]
 800fd78:	460d      	mov	r5, r1
 800fd7a:	f000 fd1f 	bl	80107bc <is_uxrce_rmw_identifier_valid>
 800fd7e:	b910      	cbnz	r0, 800fd86 <rmw_destroy_service+0x16>
 800fd80:	2401      	movs	r4, #1
 800fd82:	4620      	mov	r0, r4
 800fd84:	bd70      	pop	{r4, r5, r6, pc}
 800fd86:	6863      	ldr	r3, [r4, #4]
 800fd88:	2b00      	cmp	r3, #0
 800fd8a:	d0f9      	beq.n	800fd80 <rmw_destroy_service+0x10>
 800fd8c:	2d00      	cmp	r5, #0
 800fd8e:	d0f7      	beq.n	800fd80 <rmw_destroy_service+0x10>
 800fd90:	6828      	ldr	r0, [r5, #0]
 800fd92:	f000 fd13 	bl	80107bc <is_uxrce_rmw_identifier_valid>
 800fd96:	2800      	cmp	r0, #0
 800fd98:	d0f2      	beq.n	800fd80 <rmw_destroy_service+0x10>
 800fd9a:	686e      	ldr	r6, [r5, #4]
 800fd9c:	2e00      	cmp	r6, #0
 800fd9e:	d0ef      	beq.n	800fd80 <rmw_destroy_service+0x10>
 800fda0:	6864      	ldr	r4, [r4, #4]
 800fda2:	6932      	ldr	r2, [r6, #16]
 800fda4:	6920      	ldr	r0, [r4, #16]
 800fda6:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800fdaa:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800fdae:	6819      	ldr	r1, [r3, #0]
 800fdb0:	f001 fb1c 	bl	80113ec <uxr_buffer_cancel_data>
 800fdb4:	4602      	mov	r2, r0
 800fdb6:	6920      	ldr	r0, [r4, #16]
 800fdb8:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800fdbc:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800fdc0:	f000 fc7c 	bl	80106bc <run_xrce_session>
 800fdc4:	6920      	ldr	r0, [r4, #16]
 800fdc6:	6932      	ldr	r2, [r6, #16]
 800fdc8:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800fdcc:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800fdd0:	6819      	ldr	r1, [r3, #0]
 800fdd2:	f000 ffdd 	bl	8010d90 <uxr_buffer_delete_entity>
 800fdd6:	4602      	mov	r2, r0
 800fdd8:	6920      	ldr	r0, [r4, #16]
 800fdda:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800fdde:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800fde2:	f000 fc6b 	bl	80106bc <run_xrce_session>
 800fde6:	2800      	cmp	r0, #0
 800fde8:	4628      	mov	r0, r5
 800fdea:	bf14      	ite	ne
 800fdec:	2400      	movne	r4, #0
 800fdee:	2402      	moveq	r4, #2
 800fdf0:	f000 fb36 	bl	8010460 <rmw_uxrce_fini_service_memory>
 800fdf4:	e7c5      	b.n	800fd82 <rmw_destroy_service+0x12>
 800fdf6:	bf00      	nop

0800fdf8 <rmw_create_subscription>:
 800fdf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fdfc:	b08d      	sub	sp, #52	@ 0x34
 800fdfe:	2800      	cmp	r0, #0
 800fe00:	f000 80d1 	beq.w	800ffa6 <rmw_create_subscription+0x1ae>
 800fe04:	460e      	mov	r6, r1
 800fe06:	2900      	cmp	r1, #0
 800fe08:	f000 80cd 	beq.w	800ffa6 <rmw_create_subscription+0x1ae>
 800fe0c:	4604      	mov	r4, r0
 800fe0e:	6800      	ldr	r0, [r0, #0]
 800fe10:	4615      	mov	r5, r2
 800fe12:	4698      	mov	r8, r3
 800fe14:	f000 fcd2 	bl	80107bc <is_uxrce_rmw_identifier_valid>
 800fe18:	2800      	cmp	r0, #0
 800fe1a:	f000 80c4 	beq.w	800ffa6 <rmw_create_subscription+0x1ae>
 800fe1e:	2d00      	cmp	r5, #0
 800fe20:	f000 80c1 	beq.w	800ffa6 <rmw_create_subscription+0x1ae>
 800fe24:	782b      	ldrb	r3, [r5, #0]
 800fe26:	2b00      	cmp	r3, #0
 800fe28:	f000 80bd 	beq.w	800ffa6 <rmw_create_subscription+0x1ae>
 800fe2c:	f1b8 0f00 	cmp.w	r8, #0
 800fe30:	f000 80b9 	beq.w	800ffa6 <rmw_create_subscription+0x1ae>
 800fe34:	485e      	ldr	r0, [pc, #376]	@ (800ffb0 <rmw_create_subscription+0x1b8>)
 800fe36:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800fe3a:	f008 f855 	bl	8017ee8 <get_memory>
 800fe3e:	4604      	mov	r4, r0
 800fe40:	2800      	cmp	r0, #0
 800fe42:	f000 80b1 	beq.w	800ffa8 <rmw_create_subscription+0x1b0>
 800fe46:	6887      	ldr	r7, [r0, #8]
 800fe48:	f8c7 7080 	str.w	r7, [r7, #128]	@ 0x80
 800fe4c:	f008 f8b4 	bl	8017fb8 <rmw_get_implementation_identifier>
 800fe50:	f107 0a98 	add.w	sl, r7, #152	@ 0x98
 800fe54:	67f8      	str	r0, [r7, #124]	@ 0x7c
 800fe56:	f8c7 a084 	str.w	sl, [r7, #132]	@ 0x84
 800fe5a:	4628      	mov	r0, r5
 800fe5c:	f7f0 f9ea 	bl	8000234 <strlen>
 800fe60:	3001      	adds	r0, #1
 800fe62:	283c      	cmp	r0, #60	@ 0x3c
 800fe64:	f107 047c 	add.w	r4, r7, #124	@ 0x7c
 800fe68:	f200 8096 	bhi.w	800ff98 <rmw_create_subscription+0x1a0>
 800fe6c:	4a51      	ldr	r2, [pc, #324]	@ (800ffb4 <rmw_create_subscription+0x1bc>)
 800fe6e:	462b      	mov	r3, r5
 800fe70:	213c      	movs	r1, #60	@ 0x3c
 800fe72:	4650      	mov	r0, sl
 800fe74:	f00a fcfe 	bl	801a874 <sniprintf>
 800fe78:	4641      	mov	r1, r8
 800fe7a:	f8c7 9020 	str.w	r9, [r7, #32]
 800fe7e:	2250      	movs	r2, #80	@ 0x50
 800fe80:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 800fe84:	f00a ff33 	bl	801acee <memcpy>
 800fe88:	494b      	ldr	r1, [pc, #300]	@ (800ffb8 <rmw_create_subscription+0x1c0>)
 800fe8a:	4630      	mov	r0, r6
 800fe8c:	f000 fca4 	bl	80107d8 <get_message_typesupport_handle>
 800fe90:	2800      	cmp	r0, #0
 800fe92:	f000 8081 	beq.w	800ff98 <rmw_create_subscription+0x1a0>
 800fe96:	6842      	ldr	r2, [r0, #4]
 800fe98:	61ba      	str	r2, [r7, #24]
 800fe9a:	2a00      	cmp	r2, #0
 800fe9c:	d07c      	beq.n	800ff98 <rmw_create_subscription+0x1a0>
 800fe9e:	4629      	mov	r1, r5
 800fea0:	4643      	mov	r3, r8
 800fea2:	4648      	mov	r0, r9
 800fea4:	f008 f88e 	bl	8017fc4 <create_topic>
 800fea8:	61f8      	str	r0, [r7, #28]
 800feaa:	2800      	cmp	r0, #0
 800feac:	d078      	beq.n	800ffa0 <rmw_create_subscription+0x1a8>
 800feae:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800feb2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800feb6:	2104      	movs	r1, #4
 800feb8:	f8b3 059c 	ldrh.w	r0, [r3, #1436]	@ 0x59c
 800febc:	1c42      	adds	r2, r0, #1
 800febe:	f8a3 259c 	strh.w	r2, [r3, #1436]	@ 0x59c
 800fec2:	f001 fa29 	bl	8011318 <uxr_object_id>
 800fec6:	6138      	str	r0, [r7, #16]
 800fec8:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800fecc:	2506      	movs	r5, #6
 800fece:	f8d0 3384 	ldr.w	r3, [r0, #900]	@ 0x384
 800fed2:	9500      	str	r5, [sp, #0]
 800fed4:	6819      	ldr	r1, [r3, #0]
 800fed6:	693a      	ldr	r2, [r7, #16]
 800fed8:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800fedc:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800fee0:	f001 f83a 	bl	8010f58 <uxr_buffer_create_subscriber_bin>
 800fee4:	4602      	mov	r2, r0
 800fee6:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800feea:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800feee:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800fef2:	f000 fbe3 	bl	80106bc <run_xrce_session>
 800fef6:	2800      	cmp	r0, #0
 800fef8:	d04e      	beq.n	800ff98 <rmw_create_subscription+0x1a0>
 800fefa:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800fefe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ff02:	4629      	mov	r1, r5
 800ff04:	f8b3 059e 	ldrh.w	r0, [r3, #1438]	@ 0x59e
 800ff08:	1c42      	adds	r2, r0, #1
 800ff0a:	f8a3 259e 	strh.w	r2, [r3, #1438]	@ 0x59e
 800ff0e:	f001 fa03 	bl	8011318 <uxr_object_id>
 800ff12:	ae08      	add	r6, sp, #32
 800ff14:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ff18:	69fb      	ldr	r3, [r7, #28]
 800ff1a:	6178      	str	r0, [r7, #20]
 800ff1c:	4641      	mov	r1, r8
 800ff1e:	4630      	mov	r0, r6
 800ff20:	f8da b384 	ldr.w	fp, [sl, #900]	@ 0x384
 800ff24:	9305      	str	r3, [sp, #20]
 800ff26:	f000 fbe5 	bl	80106f4 <convert_qos_profile>
 800ff2a:	9503      	str	r5, [sp, #12]
 800ff2c:	e896 0003 	ldmia.w	r6, {r0, r1}
 800ff30:	9b05      	ldr	r3, [sp, #20]
 800ff32:	9001      	str	r0, [sp, #4]
 800ff34:	f8ad 1008 	strh.w	r1, [sp, #8]
 800ff38:	691b      	ldr	r3, [r3, #16]
 800ff3a:	9300      	str	r3, [sp, #0]
 800ff3c:	e9d7 3204 	ldrd	r3, r2, [r7, #16]
 800ff40:	f8db 1000 	ldr.w	r1, [fp]
 800ff44:	f50a 7028 	add.w	r0, sl, #672	@ 0x2a0
 800ff48:	f001 f8ac 	bl	80110a4 <uxr_buffer_create_datareader_bin>
 800ff4c:	4602      	mov	r2, r0
 800ff4e:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800ff52:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800ff56:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800ff5a:	f000 fbaf 	bl	80106bc <run_xrce_session>
 800ff5e:	b1d8      	cbz	r0, 800ff98 <rmw_create_subscription+0x1a0>
 800ff60:	f898 3008 	ldrb.w	r3, [r8, #8]
 800ff64:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800ff68:	2b02      	cmp	r3, #2
 800ff6a:	bf0c      	ite	eq
 800ff6c:	f8d0 3380 	ldreq.w	r3, [r0, #896]	@ 0x380
 800ff70:	f8d0 3374 	ldrne.w	r3, [r0, #884]	@ 0x374
 800ff74:	9307      	str	r3, [sp, #28]
 800ff76:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800ff7a:	2200      	movs	r2, #0
 800ff7c:	e9cd 120a 	strd	r1, r2, [sp, #40]	@ 0x28
 800ff80:	ab0a      	add	r3, sp, #40	@ 0x28
 800ff82:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800ff86:	9300      	str	r3, [sp, #0]
 800ff88:	697a      	ldr	r2, [r7, #20]
 800ff8a:	9b07      	ldr	r3, [sp, #28]
 800ff8c:	6809      	ldr	r1, [r1, #0]
 800ff8e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800ff92:	f001 f9f1 	bl	8011378 <uxr_buffer_request_data>
 800ff96:	e007      	b.n	800ffa8 <rmw_create_subscription+0x1b0>
 800ff98:	69f8      	ldr	r0, [r7, #28]
 800ff9a:	b108      	cbz	r0, 800ffa0 <rmw_create_subscription+0x1a8>
 800ff9c:	f000 fa8c 	bl	80104b8 <rmw_uxrce_fini_topic_memory>
 800ffa0:	4620      	mov	r0, r4
 800ffa2:	f000 fa47 	bl	8010434 <rmw_uxrce_fini_subscription_memory>
 800ffa6:	2400      	movs	r4, #0
 800ffa8:	4620      	mov	r0, r4
 800ffaa:	b00d      	add	sp, #52	@ 0x34
 800ffac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ffb0:	2000b344 	.word	0x2000b344
 800ffb4:	0801d6ec 	.word	0x0801d6ec
 800ffb8:	0801d664 	.word	0x0801d664

0800ffbc <rmw_subscription_get_actual_qos>:
 800ffbc:	b150      	cbz	r0, 800ffd4 <rmw_subscription_get_actual_qos+0x18>
 800ffbe:	b508      	push	{r3, lr}
 800ffc0:	460b      	mov	r3, r1
 800ffc2:	b149      	cbz	r1, 800ffd8 <rmw_subscription_get_actual_qos+0x1c>
 800ffc4:	6841      	ldr	r1, [r0, #4]
 800ffc6:	2250      	movs	r2, #80	@ 0x50
 800ffc8:	3128      	adds	r1, #40	@ 0x28
 800ffca:	4618      	mov	r0, r3
 800ffcc:	f00a fe8f 	bl	801acee <memcpy>
 800ffd0:	2000      	movs	r0, #0
 800ffd2:	bd08      	pop	{r3, pc}
 800ffd4:	200b      	movs	r0, #11
 800ffd6:	4770      	bx	lr
 800ffd8:	200b      	movs	r0, #11
 800ffda:	bd08      	pop	{r3, pc}

0800ffdc <rmw_destroy_subscription>:
 800ffdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ffde:	b128      	cbz	r0, 800ffec <rmw_destroy_subscription+0x10>
 800ffe0:	4604      	mov	r4, r0
 800ffe2:	6800      	ldr	r0, [r0, #0]
 800ffe4:	460d      	mov	r5, r1
 800ffe6:	f000 fbe9 	bl	80107bc <is_uxrce_rmw_identifier_valid>
 800ffea:	b910      	cbnz	r0, 800fff2 <rmw_destroy_subscription+0x16>
 800ffec:	2401      	movs	r4, #1
 800ffee:	4620      	mov	r0, r4
 800fff0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fff2:	6863      	ldr	r3, [r4, #4]
 800fff4:	2b00      	cmp	r3, #0
 800fff6:	d0f9      	beq.n	800ffec <rmw_destroy_subscription+0x10>
 800fff8:	2d00      	cmp	r5, #0
 800fffa:	d0f7      	beq.n	800ffec <rmw_destroy_subscription+0x10>
 800fffc:	6828      	ldr	r0, [r5, #0]
 800fffe:	f000 fbdd 	bl	80107bc <is_uxrce_rmw_identifier_valid>
 8010002:	2800      	cmp	r0, #0
 8010004:	d0f2      	beq.n	800ffec <rmw_destroy_subscription+0x10>
 8010006:	686c      	ldr	r4, [r5, #4]
 8010008:	2c00      	cmp	r4, #0
 801000a:	d0ef      	beq.n	800ffec <rmw_destroy_subscription+0x10>
 801000c:	6a26      	ldr	r6, [r4, #32]
 801000e:	6962      	ldr	r2, [r4, #20]
 8010010:	6930      	ldr	r0, [r6, #16]
 8010012:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8010016:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801001a:	6819      	ldr	r1, [r3, #0]
 801001c:	f001 f9e6 	bl	80113ec <uxr_buffer_cancel_data>
 8010020:	4602      	mov	r2, r0
 8010022:	6930      	ldr	r0, [r6, #16]
 8010024:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8010028:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801002c:	f000 fb46 	bl	80106bc <run_xrce_session>
 8010030:	69e0      	ldr	r0, [r4, #28]
 8010032:	f008 f817 	bl	8018064 <destroy_topic>
 8010036:	6a23      	ldr	r3, [r4, #32]
 8010038:	6962      	ldr	r2, [r4, #20]
 801003a:	6918      	ldr	r0, [r3, #16]
 801003c:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8010040:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8010044:	6819      	ldr	r1, [r3, #0]
 8010046:	f000 fea3 	bl	8010d90 <uxr_buffer_delete_entity>
 801004a:	6a23      	ldr	r3, [r4, #32]
 801004c:	6922      	ldr	r2, [r4, #16]
 801004e:	691b      	ldr	r3, [r3, #16]
 8010050:	f8d3 1388 	ldr.w	r1, [r3, #904]	@ 0x388
 8010054:	4604      	mov	r4, r0
 8010056:	6809      	ldr	r1, [r1, #0]
 8010058:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 801005c:	f000 fe98 	bl	8010d90 <uxr_buffer_delete_entity>
 8010060:	6937      	ldr	r7, [r6, #16]
 8010062:	4622      	mov	r2, r4
 8010064:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 8010068:	f8d7 1388 	ldr.w	r1, [r7, #904]	@ 0x388
 801006c:	4604      	mov	r4, r0
 801006e:	4638      	mov	r0, r7
 8010070:	f000 fb24 	bl	80106bc <run_xrce_session>
 8010074:	6936      	ldr	r6, [r6, #16]
 8010076:	4622      	mov	r2, r4
 8010078:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 801007c:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 8010080:	4604      	mov	r4, r0
 8010082:	4630      	mov	r0, r6
 8010084:	f000 fb1a 	bl	80106bc <run_xrce_session>
 8010088:	b12c      	cbz	r4, 8010096 <rmw_destroy_subscription+0xba>
 801008a:	b120      	cbz	r0, 8010096 <rmw_destroy_subscription+0xba>
 801008c:	2400      	movs	r4, #0
 801008e:	4628      	mov	r0, r5
 8010090:	f000 f9d0 	bl	8010434 <rmw_uxrce_fini_subscription_memory>
 8010094:	e7ab      	b.n	800ffee <rmw_destroy_subscription+0x12>
 8010096:	2402      	movs	r4, #2
 8010098:	e7f9      	b.n	801008e <rmw_destroy_subscription+0xb2>
 801009a:	bf00      	nop

0801009c <rmw_uxrce_transport_init>:
 801009c:	b508      	push	{r3, lr}
 801009e:	b108      	cbz	r0, 80100a4 <rmw_uxrce_transport_init+0x8>
 80100a0:	f100 0210 	add.w	r2, r0, #16
 80100a4:	b139      	cbz	r1, 80100b6 <rmw_uxrce_transport_init+0x1a>
 80100a6:	6949      	ldr	r1, [r1, #20]
 80100a8:	4610      	mov	r0, r2
 80100aa:	f001 f8fd 	bl	80112a8 <uxr_init_custom_transport>
 80100ae:	f080 0001 	eor.w	r0, r0, #1
 80100b2:	b2c0      	uxtb	r0, r0
 80100b4:	bd08      	pop	{r3, pc}
 80100b6:	4b04      	ldr	r3, [pc, #16]	@ (80100c8 <rmw_uxrce_transport_init+0x2c>)
 80100b8:	4610      	mov	r0, r2
 80100ba:	6859      	ldr	r1, [r3, #4]
 80100bc:	f001 f8f4 	bl	80112a8 <uxr_init_custom_transport>
 80100c0:	f080 0001 	eor.w	r0, r0, #1
 80100c4:	b2c0      	uxtb	r0, r0
 80100c6:	bd08      	pop	{r3, pc}
 80100c8:	200069cc 	.word	0x200069cc

080100cc <rmw_uros_epoch_nanos>:
 80100cc:	4b05      	ldr	r3, [pc, #20]	@ (80100e4 <rmw_uros_epoch_nanos+0x18>)
 80100ce:	681b      	ldr	r3, [r3, #0]
 80100d0:	b123      	cbz	r3, 80100dc <rmw_uros_epoch_nanos+0x10>
 80100d2:	6898      	ldr	r0, [r3, #8]
 80100d4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80100d8:	f001 bb94 	b.w	8011804 <uxr_epoch_nanos>
 80100dc:	2000      	movs	r0, #0
 80100de:	2100      	movs	r1, #0
 80100e0:	4770      	bx	lr
 80100e2:	bf00      	nop
 80100e4:	2000b324 	.word	0x2000b324

080100e8 <rmw_uros_sync_session>:
 80100e8:	b508      	push	{r3, lr}
 80100ea:	4b07      	ldr	r3, [pc, #28]	@ (8010108 <rmw_uros_sync_session+0x20>)
 80100ec:	681b      	ldr	r3, [r3, #0]
 80100ee:	b14b      	cbz	r3, 8010104 <rmw_uros_sync_session+0x1c>
 80100f0:	4601      	mov	r1, r0
 80100f2:	6898      	ldr	r0, [r3, #8]
 80100f4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80100f8:	f001 ffc6 	bl	8012088 <uxr_sync_session>
 80100fc:	f080 0001 	eor.w	r0, r0, #1
 8010100:	b2c0      	uxtb	r0, r0
 8010102:	bd08      	pop	{r3, pc}
 8010104:	2001      	movs	r0, #1
 8010106:	bd08      	pop	{r3, pc}
 8010108:	2000b324 	.word	0x2000b324

0801010c <rmw_uxrce_init_service_memory>:
 801010c:	b1e2      	cbz	r2, 8010148 <rmw_uxrce_init_service_memory+0x3c>
 801010e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010112:	7b05      	ldrb	r5, [r0, #12]
 8010114:	4606      	mov	r6, r0
 8010116:	b9ad      	cbnz	r5, 8010144 <rmw_uxrce_init_service_memory+0x38>
 8010118:	23c8      	movs	r3, #200	@ 0xc8
 801011a:	e9c0 5500 	strd	r5, r5, [r0]
 801011e:	6083      	str	r3, [r0, #8]
 8010120:	f240 1301 	movw	r3, #257	@ 0x101
 8010124:	4617      	mov	r7, r2
 8010126:	8183      	strh	r3, [r0, #12]
 8010128:	460c      	mov	r4, r1
 801012a:	46a8      	mov	r8, r5
 801012c:	4621      	mov	r1, r4
 801012e:	4630      	mov	r0, r6
 8010130:	3501      	adds	r5, #1
 8010132:	f007 fee9 	bl	8017f08 <put_memory>
 8010136:	42af      	cmp	r7, r5
 8010138:	60a4      	str	r4, [r4, #8]
 801013a:	f884 800c 	strb.w	r8, [r4, #12]
 801013e:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 8010142:	d1f3      	bne.n	801012c <rmw_uxrce_init_service_memory+0x20>
 8010144:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010148:	4770      	bx	lr
 801014a:	bf00      	nop

0801014c <rmw_uxrce_init_client_memory>:
 801014c:	b1e2      	cbz	r2, 8010188 <rmw_uxrce_init_client_memory+0x3c>
 801014e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010152:	7b05      	ldrb	r5, [r0, #12]
 8010154:	4606      	mov	r6, r0
 8010156:	b9ad      	cbnz	r5, 8010184 <rmw_uxrce_init_client_memory+0x38>
 8010158:	23c8      	movs	r3, #200	@ 0xc8
 801015a:	e9c0 5500 	strd	r5, r5, [r0]
 801015e:	6083      	str	r3, [r0, #8]
 8010160:	f240 1301 	movw	r3, #257	@ 0x101
 8010164:	4617      	mov	r7, r2
 8010166:	8183      	strh	r3, [r0, #12]
 8010168:	460c      	mov	r4, r1
 801016a:	46a8      	mov	r8, r5
 801016c:	4621      	mov	r1, r4
 801016e:	4630      	mov	r0, r6
 8010170:	3501      	adds	r5, #1
 8010172:	f007 fec9 	bl	8017f08 <put_memory>
 8010176:	42af      	cmp	r7, r5
 8010178:	60a4      	str	r4, [r4, #8]
 801017a:	f884 800c 	strb.w	r8, [r4, #12]
 801017e:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 8010182:	d1f3      	bne.n	801016c <rmw_uxrce_init_client_memory+0x20>
 8010184:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010188:	4770      	bx	lr
 801018a:	bf00      	nop

0801018c <rmw_uxrce_init_publisher_memory>:
 801018c:	b1e2      	cbz	r2, 80101c8 <rmw_uxrce_init_publisher_memory+0x3c>
 801018e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010192:	7b05      	ldrb	r5, [r0, #12]
 8010194:	4606      	mov	r6, r0
 8010196:	b9ad      	cbnz	r5, 80101c4 <rmw_uxrce_init_publisher_memory+0x38>
 8010198:	23d8      	movs	r3, #216	@ 0xd8
 801019a:	e9c0 5500 	strd	r5, r5, [r0]
 801019e:	6083      	str	r3, [r0, #8]
 80101a0:	f240 1301 	movw	r3, #257	@ 0x101
 80101a4:	4617      	mov	r7, r2
 80101a6:	8183      	strh	r3, [r0, #12]
 80101a8:	460c      	mov	r4, r1
 80101aa:	46a8      	mov	r8, r5
 80101ac:	4621      	mov	r1, r4
 80101ae:	4630      	mov	r0, r6
 80101b0:	3501      	adds	r5, #1
 80101b2:	f007 fea9 	bl	8017f08 <put_memory>
 80101b6:	42af      	cmp	r7, r5
 80101b8:	60a4      	str	r4, [r4, #8]
 80101ba:	f884 800c 	strb.w	r8, [r4, #12]
 80101be:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 80101c2:	d1f3      	bne.n	80101ac <rmw_uxrce_init_publisher_memory+0x20>
 80101c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80101c8:	4770      	bx	lr
 80101ca:	bf00      	nop

080101cc <rmw_uxrce_init_subscription_memory>:
 80101cc:	b1e2      	cbz	r2, 8010208 <rmw_uxrce_init_subscription_memory+0x3c>
 80101ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80101d2:	7b05      	ldrb	r5, [r0, #12]
 80101d4:	4606      	mov	r6, r0
 80101d6:	b9ad      	cbnz	r5, 8010204 <rmw_uxrce_init_subscription_memory+0x38>
 80101d8:	23d8      	movs	r3, #216	@ 0xd8
 80101da:	e9c0 5500 	strd	r5, r5, [r0]
 80101de:	6083      	str	r3, [r0, #8]
 80101e0:	f240 1301 	movw	r3, #257	@ 0x101
 80101e4:	4617      	mov	r7, r2
 80101e6:	8183      	strh	r3, [r0, #12]
 80101e8:	460c      	mov	r4, r1
 80101ea:	46a8      	mov	r8, r5
 80101ec:	4621      	mov	r1, r4
 80101ee:	4630      	mov	r0, r6
 80101f0:	3501      	adds	r5, #1
 80101f2:	f007 fe89 	bl	8017f08 <put_memory>
 80101f6:	42af      	cmp	r7, r5
 80101f8:	60a4      	str	r4, [r4, #8]
 80101fa:	f884 800c 	strb.w	r8, [r4, #12]
 80101fe:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 8010202:	d1f3      	bne.n	80101ec <rmw_uxrce_init_subscription_memory+0x20>
 8010204:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010208:	4770      	bx	lr
 801020a:	bf00      	nop

0801020c <rmw_uxrce_init_node_memory>:
 801020c:	b1e2      	cbz	r2, 8010248 <rmw_uxrce_init_node_memory+0x3c>
 801020e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010212:	7b05      	ldrb	r5, [r0, #12]
 8010214:	4606      	mov	r6, r0
 8010216:	b9ad      	cbnz	r5, 8010244 <rmw_uxrce_init_node_memory+0x38>
 8010218:	23a4      	movs	r3, #164	@ 0xa4
 801021a:	e9c0 5500 	strd	r5, r5, [r0]
 801021e:	6083      	str	r3, [r0, #8]
 8010220:	f240 1301 	movw	r3, #257	@ 0x101
 8010224:	4617      	mov	r7, r2
 8010226:	8183      	strh	r3, [r0, #12]
 8010228:	460c      	mov	r4, r1
 801022a:	46a8      	mov	r8, r5
 801022c:	4621      	mov	r1, r4
 801022e:	4630      	mov	r0, r6
 8010230:	3501      	adds	r5, #1
 8010232:	f007 fe69 	bl	8017f08 <put_memory>
 8010236:	42af      	cmp	r7, r5
 8010238:	60a4      	str	r4, [r4, #8]
 801023a:	f884 800c 	strb.w	r8, [r4, #12]
 801023e:	f104 04a4 	add.w	r4, r4, #164	@ 0xa4
 8010242:	d1f3      	bne.n	801022c <rmw_uxrce_init_node_memory+0x20>
 8010244:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010248:	4770      	bx	lr
 801024a:	bf00      	nop

0801024c <rmw_uxrce_init_session_memory>:
 801024c:	b1ea      	cbz	r2, 801028a <rmw_uxrce_init_session_memory+0x3e>
 801024e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010252:	7b05      	ldrb	r5, [r0, #12]
 8010254:	4606      	mov	r6, r0
 8010256:	b9b5      	cbnz	r5, 8010286 <rmw_uxrce_init_session_memory+0x3a>
 8010258:	e9c0 5500 	strd	r5, r5, [r0]
 801025c:	f241 58a8 	movw	r8, #5544	@ 0x15a8
 8010260:	f240 1301 	movw	r3, #257	@ 0x101
 8010264:	4617      	mov	r7, r2
 8010266:	f8c0 8008 	str.w	r8, [r0, #8]
 801026a:	460c      	mov	r4, r1
 801026c:	8183      	strh	r3, [r0, #12]
 801026e:	46a9      	mov	r9, r5
 8010270:	4621      	mov	r1, r4
 8010272:	4630      	mov	r0, r6
 8010274:	3501      	adds	r5, #1
 8010276:	f007 fe47 	bl	8017f08 <put_memory>
 801027a:	42af      	cmp	r7, r5
 801027c:	60a4      	str	r4, [r4, #8]
 801027e:	f884 900c 	strb.w	r9, [r4, #12]
 8010282:	4444      	add	r4, r8
 8010284:	d1f4      	bne.n	8010270 <rmw_uxrce_init_session_memory+0x24>
 8010286:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801028a:	4770      	bx	lr

0801028c <rmw_uxrce_init_topic_memory>:
 801028c:	b1e2      	cbz	r2, 80102c8 <rmw_uxrce_init_topic_memory+0x3c>
 801028e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010292:	7b05      	ldrb	r5, [r0, #12]
 8010294:	4606      	mov	r6, r0
 8010296:	b9ad      	cbnz	r5, 80102c4 <rmw_uxrce_init_topic_memory+0x38>
 8010298:	231c      	movs	r3, #28
 801029a:	e9c0 5500 	strd	r5, r5, [r0]
 801029e:	6083      	str	r3, [r0, #8]
 80102a0:	f240 1301 	movw	r3, #257	@ 0x101
 80102a4:	4617      	mov	r7, r2
 80102a6:	8183      	strh	r3, [r0, #12]
 80102a8:	460c      	mov	r4, r1
 80102aa:	46a8      	mov	r8, r5
 80102ac:	4621      	mov	r1, r4
 80102ae:	4630      	mov	r0, r6
 80102b0:	3501      	adds	r5, #1
 80102b2:	f007 fe29 	bl	8017f08 <put_memory>
 80102b6:	42af      	cmp	r7, r5
 80102b8:	60a4      	str	r4, [r4, #8]
 80102ba:	f884 800c 	strb.w	r8, [r4, #12]
 80102be:	f104 041c 	add.w	r4, r4, #28
 80102c2:	d1f3      	bne.n	80102ac <rmw_uxrce_init_topic_memory+0x20>
 80102c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80102c8:	4770      	bx	lr
 80102ca:	bf00      	nop

080102cc <rmw_uxrce_init_static_input_buffer_memory>:
 80102cc:	b1ea      	cbz	r2, 801030a <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 80102ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80102d2:	7b05      	ldrb	r5, [r0, #12]
 80102d4:	4606      	mov	r6, r0
 80102d6:	b9b5      	cbnz	r5, 8010306 <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 80102d8:	f44f 6304 	mov.w	r3, #2112	@ 0x840
 80102dc:	e9c0 5500 	strd	r5, r5, [r0]
 80102e0:	6083      	str	r3, [r0, #8]
 80102e2:	f240 1301 	movw	r3, #257	@ 0x101
 80102e6:	4617      	mov	r7, r2
 80102e8:	8183      	strh	r3, [r0, #12]
 80102ea:	460c      	mov	r4, r1
 80102ec:	46a8      	mov	r8, r5
 80102ee:	4621      	mov	r1, r4
 80102f0:	4630      	mov	r0, r6
 80102f2:	3501      	adds	r5, #1
 80102f4:	f007 fe08 	bl	8017f08 <put_memory>
 80102f8:	42af      	cmp	r7, r5
 80102fa:	60a4      	str	r4, [r4, #8]
 80102fc:	f884 800c 	strb.w	r8, [r4, #12]
 8010300:	f504 6404 	add.w	r4, r4, #2112	@ 0x840
 8010304:	d1f3      	bne.n	80102ee <rmw_uxrce_init_static_input_buffer_memory+0x22>
 8010306:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801030a:	4770      	bx	lr

0801030c <rmw_uxrce_init_init_options_impl_memory>:
 801030c:	b1e2      	cbz	r2, 8010348 <rmw_uxrce_init_init_options_impl_memory+0x3c>
 801030e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010312:	7b05      	ldrb	r5, [r0, #12]
 8010314:	4606      	mov	r6, r0
 8010316:	b9ad      	cbnz	r5, 8010344 <rmw_uxrce_init_init_options_impl_memory+0x38>
 8010318:	232c      	movs	r3, #44	@ 0x2c
 801031a:	e9c0 5500 	strd	r5, r5, [r0]
 801031e:	6083      	str	r3, [r0, #8]
 8010320:	f240 1301 	movw	r3, #257	@ 0x101
 8010324:	4617      	mov	r7, r2
 8010326:	8183      	strh	r3, [r0, #12]
 8010328:	460c      	mov	r4, r1
 801032a:	46a8      	mov	r8, r5
 801032c:	4621      	mov	r1, r4
 801032e:	4630      	mov	r0, r6
 8010330:	3501      	adds	r5, #1
 8010332:	f007 fde9 	bl	8017f08 <put_memory>
 8010336:	42af      	cmp	r7, r5
 8010338:	60a4      	str	r4, [r4, #8]
 801033a:	f884 800c 	strb.w	r8, [r4, #12]
 801033e:	f104 042c 	add.w	r4, r4, #44	@ 0x2c
 8010342:	d1f3      	bne.n	801032c <rmw_uxrce_init_init_options_impl_memory+0x20>
 8010344:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010348:	4770      	bx	lr
 801034a:	bf00      	nop

0801034c <rmw_uxrce_init_wait_set_memory>:
 801034c:	b1e2      	cbz	r2, 8010388 <rmw_uxrce_init_wait_set_memory+0x3c>
 801034e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010352:	7b05      	ldrb	r5, [r0, #12]
 8010354:	4606      	mov	r6, r0
 8010356:	b9ad      	cbnz	r5, 8010384 <rmw_uxrce_init_wait_set_memory+0x38>
 8010358:	231c      	movs	r3, #28
 801035a:	e9c0 5500 	strd	r5, r5, [r0]
 801035e:	6083      	str	r3, [r0, #8]
 8010360:	f240 1301 	movw	r3, #257	@ 0x101
 8010364:	4617      	mov	r7, r2
 8010366:	8183      	strh	r3, [r0, #12]
 8010368:	460c      	mov	r4, r1
 801036a:	46a8      	mov	r8, r5
 801036c:	4621      	mov	r1, r4
 801036e:	4630      	mov	r0, r6
 8010370:	3501      	adds	r5, #1
 8010372:	f007 fdc9 	bl	8017f08 <put_memory>
 8010376:	42af      	cmp	r7, r5
 8010378:	60a4      	str	r4, [r4, #8]
 801037a:	f884 800c 	strb.w	r8, [r4, #12]
 801037e:	f104 041c 	add.w	r4, r4, #28
 8010382:	d1f3      	bne.n	801036c <rmw_uxrce_init_wait_set_memory+0x20>
 8010384:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010388:	4770      	bx	lr
 801038a:	bf00      	nop

0801038c <rmw_uxrce_init_guard_condition_memory>:
 801038c:	b1e2      	cbz	r2, 80103c8 <rmw_uxrce_init_guard_condition_memory+0x3c>
 801038e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010392:	7b05      	ldrb	r5, [r0, #12]
 8010394:	4606      	mov	r6, r0
 8010396:	b9ad      	cbnz	r5, 80103c4 <rmw_uxrce_init_guard_condition_memory+0x38>
 8010398:	2320      	movs	r3, #32
 801039a:	e9c0 5500 	strd	r5, r5, [r0]
 801039e:	6083      	str	r3, [r0, #8]
 80103a0:	f240 1301 	movw	r3, #257	@ 0x101
 80103a4:	4617      	mov	r7, r2
 80103a6:	8183      	strh	r3, [r0, #12]
 80103a8:	460c      	mov	r4, r1
 80103aa:	46a8      	mov	r8, r5
 80103ac:	4621      	mov	r1, r4
 80103ae:	4630      	mov	r0, r6
 80103b0:	3501      	adds	r5, #1
 80103b2:	f007 fda9 	bl	8017f08 <put_memory>
 80103b6:	42af      	cmp	r7, r5
 80103b8:	60a4      	str	r4, [r4, #8]
 80103ba:	f884 800c 	strb.w	r8, [r4, #12]
 80103be:	f104 0420 	add.w	r4, r4, #32
 80103c2:	d1f3      	bne.n	80103ac <rmw_uxrce_init_guard_condition_memory+0x20>
 80103c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80103c8:	4770      	bx	lr
 80103ca:	bf00      	nop

080103cc <rmw_uxrce_fini_session_memory>:
 80103cc:	4601      	mov	r1, r0
 80103ce:	4801      	ldr	r0, [pc, #4]	@ (80103d4 <rmw_uxrce_fini_session_memory+0x8>)
 80103d0:	f007 bd9a 	b.w	8017f08 <put_memory>
 80103d4:	2000b324 	.word	0x2000b324

080103d8 <rmw_uxrce_fini_node_memory>:
 80103d8:	b538      	push	{r3, r4, r5, lr}
 80103da:	4604      	mov	r4, r0
 80103dc:	6800      	ldr	r0, [r0, #0]
 80103de:	b128      	cbz	r0, 80103ec <rmw_uxrce_fini_node_memory+0x14>
 80103e0:	4b07      	ldr	r3, [pc, #28]	@ (8010400 <rmw_uxrce_fini_node_memory+0x28>)
 80103e2:	6819      	ldr	r1, [r3, #0]
 80103e4:	f7ef ff1c 	bl	8000220 <strcmp>
 80103e8:	b940      	cbnz	r0, 80103fc <rmw_uxrce_fini_node_memory+0x24>
 80103ea:	6020      	str	r0, [r4, #0]
 80103ec:	6861      	ldr	r1, [r4, #4]
 80103ee:	b129      	cbz	r1, 80103fc <rmw_uxrce_fini_node_memory+0x24>
 80103f0:	2500      	movs	r5, #0
 80103f2:	4804      	ldr	r0, [pc, #16]	@ (8010404 <rmw_uxrce_fini_node_memory+0x2c>)
 80103f4:	610d      	str	r5, [r1, #16]
 80103f6:	f007 fd87 	bl	8017f08 <put_memory>
 80103fa:	6065      	str	r5, [r4, #4]
 80103fc:	bd38      	pop	{r3, r4, r5, pc}
 80103fe:	bf00      	nop
 8010400:	0801e2bc 	.word	0x0801e2bc
 8010404:	2000b2f4 	.word	0x2000b2f4

08010408 <rmw_uxrce_fini_publisher_memory>:
 8010408:	b510      	push	{r4, lr}
 801040a:	4604      	mov	r4, r0
 801040c:	6800      	ldr	r0, [r0, #0]
 801040e:	b128      	cbz	r0, 801041c <rmw_uxrce_fini_publisher_memory+0x14>
 8010410:	4b06      	ldr	r3, [pc, #24]	@ (801042c <rmw_uxrce_fini_publisher_memory+0x24>)
 8010412:	6819      	ldr	r1, [r3, #0]
 8010414:	f7ef ff04 	bl	8000220 <strcmp>
 8010418:	b938      	cbnz	r0, 801042a <rmw_uxrce_fini_publisher_memory+0x22>
 801041a:	6020      	str	r0, [r4, #0]
 801041c:	6861      	ldr	r1, [r4, #4]
 801041e:	b121      	cbz	r1, 801042a <rmw_uxrce_fini_publisher_memory+0x22>
 8010420:	4803      	ldr	r0, [pc, #12]	@ (8010430 <rmw_uxrce_fini_publisher_memory+0x28>)
 8010422:	f007 fd71 	bl	8017f08 <put_memory>
 8010426:	2300      	movs	r3, #0
 8010428:	6063      	str	r3, [r4, #4]
 801042a:	bd10      	pop	{r4, pc}
 801042c:	0801e2bc 	.word	0x0801e2bc
 8010430:	2000b304 	.word	0x2000b304

08010434 <rmw_uxrce_fini_subscription_memory>:
 8010434:	b510      	push	{r4, lr}
 8010436:	4604      	mov	r4, r0
 8010438:	6800      	ldr	r0, [r0, #0]
 801043a:	b128      	cbz	r0, 8010448 <rmw_uxrce_fini_subscription_memory+0x14>
 801043c:	4b06      	ldr	r3, [pc, #24]	@ (8010458 <rmw_uxrce_fini_subscription_memory+0x24>)
 801043e:	6819      	ldr	r1, [r3, #0]
 8010440:	f7ef feee 	bl	8000220 <strcmp>
 8010444:	b938      	cbnz	r0, 8010456 <rmw_uxrce_fini_subscription_memory+0x22>
 8010446:	6020      	str	r0, [r4, #0]
 8010448:	6861      	ldr	r1, [r4, #4]
 801044a:	b121      	cbz	r1, 8010456 <rmw_uxrce_fini_subscription_memory+0x22>
 801044c:	4803      	ldr	r0, [pc, #12]	@ (801045c <rmw_uxrce_fini_subscription_memory+0x28>)
 801044e:	f007 fd5b 	bl	8017f08 <put_memory>
 8010452:	2300      	movs	r3, #0
 8010454:	6063      	str	r3, [r4, #4]
 8010456:	bd10      	pop	{r4, pc}
 8010458:	0801e2bc 	.word	0x0801e2bc
 801045c:	2000b344 	.word	0x2000b344

08010460 <rmw_uxrce_fini_service_memory>:
 8010460:	b510      	push	{r4, lr}
 8010462:	4604      	mov	r4, r0
 8010464:	6800      	ldr	r0, [r0, #0]
 8010466:	b128      	cbz	r0, 8010474 <rmw_uxrce_fini_service_memory+0x14>
 8010468:	4b06      	ldr	r3, [pc, #24]	@ (8010484 <rmw_uxrce_fini_service_memory+0x24>)
 801046a:	6819      	ldr	r1, [r3, #0]
 801046c:	f7ef fed8 	bl	8000220 <strcmp>
 8010470:	b938      	cbnz	r0, 8010482 <rmw_uxrce_fini_service_memory+0x22>
 8010472:	6020      	str	r0, [r4, #0]
 8010474:	6861      	ldr	r1, [r4, #4]
 8010476:	b121      	cbz	r1, 8010482 <rmw_uxrce_fini_service_memory+0x22>
 8010478:	4803      	ldr	r0, [pc, #12]	@ (8010488 <rmw_uxrce_fini_service_memory+0x28>)
 801047a:	f007 fd45 	bl	8017f08 <put_memory>
 801047e:	2300      	movs	r3, #0
 8010480:	6063      	str	r3, [r4, #4]
 8010482:	bd10      	pop	{r4, pc}
 8010484:	0801e2bc 	.word	0x0801e2bc
 8010488:	2000b314 	.word	0x2000b314

0801048c <rmw_uxrce_fini_client_memory>:
 801048c:	b510      	push	{r4, lr}
 801048e:	4604      	mov	r4, r0
 8010490:	6800      	ldr	r0, [r0, #0]
 8010492:	b128      	cbz	r0, 80104a0 <rmw_uxrce_fini_client_memory+0x14>
 8010494:	4b06      	ldr	r3, [pc, #24]	@ (80104b0 <rmw_uxrce_fini_client_memory+0x24>)
 8010496:	6819      	ldr	r1, [r3, #0]
 8010498:	f7ef fec2 	bl	8000220 <strcmp>
 801049c:	b938      	cbnz	r0, 80104ae <rmw_uxrce_fini_client_memory+0x22>
 801049e:	6020      	str	r0, [r4, #0]
 80104a0:	6861      	ldr	r1, [r4, #4]
 80104a2:	b121      	cbz	r1, 80104ae <rmw_uxrce_fini_client_memory+0x22>
 80104a4:	4803      	ldr	r0, [pc, #12]	@ (80104b4 <rmw_uxrce_fini_client_memory+0x28>)
 80104a6:	f007 fd2f 	bl	8017f08 <put_memory>
 80104aa:	2300      	movs	r3, #0
 80104ac:	6063      	str	r3, [r4, #4]
 80104ae:	bd10      	pop	{r4, pc}
 80104b0:	0801e2bc 	.word	0x0801e2bc
 80104b4:	20006a24 	.word	0x20006a24

080104b8 <rmw_uxrce_fini_topic_memory>:
 80104b8:	b510      	push	{r4, lr}
 80104ba:	4604      	mov	r4, r0
 80104bc:	4621      	mov	r1, r4
 80104be:	4803      	ldr	r0, [pc, #12]	@ (80104cc <rmw_uxrce_fini_topic_memory+0x14>)
 80104c0:	f007 fd22 	bl	8017f08 <put_memory>
 80104c4:	2300      	movs	r3, #0
 80104c6:	61a3      	str	r3, [r4, #24]
 80104c8:	bd10      	pop	{r4, pc}
 80104ca:	bf00      	nop
 80104cc:	2000b354 	.word	0x2000b354

080104d0 <rmw_uxrce_get_static_input_buffer_for_entity>:
 80104d0:	b082      	sub	sp, #8
 80104d2:	b530      	push	{r4, r5, lr}
 80104d4:	4925      	ldr	r1, [pc, #148]	@ (801056c <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 80104d6:	680d      	ldr	r5, [r1, #0]
 80104d8:	ac03      	add	r4, sp, #12
 80104da:	e884 000c 	stmia.w	r4, {r2, r3}
 80104de:	461c      	mov	r4, r3
 80104e0:	2d00      	cmp	r5, #0
 80104e2:	d041      	beq.n	8010568 <rmw_uxrce_get_static_input_buffer_for_entity+0x98>
 80104e4:	462b      	mov	r3, r5
 80104e6:	2100      	movs	r1, #0
 80104e8:	689a      	ldr	r2, [r3, #8]
 80104ea:	685b      	ldr	r3, [r3, #4]
 80104ec:	f8d2 2814 	ldr.w	r2, [r2, #2068]	@ 0x814
 80104f0:	4290      	cmp	r0, r2
 80104f2:	bf08      	it	eq
 80104f4:	3101      	addeq	r1, #1
 80104f6:	2b00      	cmp	r3, #0
 80104f8:	d1f6      	bne.n	80104e8 <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 80104fa:	f89d 300c 	ldrb.w	r3, [sp, #12]
 80104fe:	2b02      	cmp	r3, #2
 8010500:	d029      	beq.n	8010556 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 8010502:	d907      	bls.n	8010514 <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 8010504:	2b03      	cmp	r3, #3
 8010506:	d005      	beq.n	8010514 <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 8010508:	2100      	movs	r1, #0
 801050a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801050e:	4608      	mov	r0, r1
 8010510:	b002      	add	sp, #8
 8010512:	4770      	bx	lr
 8010514:	b314      	cbz	r4, 801055c <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 8010516:	428c      	cmp	r4, r1
 8010518:	d820      	bhi.n	801055c <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 801051a:	2d00      	cmp	r5, #0
 801051c:	d0f4      	beq.n	8010508 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 801051e:	2100      	movs	r1, #0
 8010520:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8010524:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 8010528:	e002      	b.n	8010530 <rmw_uxrce_get_static_input_buffer_for_entity+0x60>
 801052a:	686d      	ldr	r5, [r5, #4]
 801052c:	2d00      	cmp	r5, #0
 801052e:	d0ec      	beq.n	801050a <rmw_uxrce_get_static_input_buffer_for_entity+0x3a>
 8010530:	68ab      	ldr	r3, [r5, #8]
 8010532:	f8d3 2814 	ldr.w	r2, [r3, #2068]	@ 0x814
 8010536:	4290      	cmp	r0, r2
 8010538:	d1f7      	bne.n	801052a <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 801053a:	f8d3 2818 	ldr.w	r2, [r3, #2072]	@ 0x818
 801053e:	f503 6302 	add.w	r3, r3, #2080	@ 0x820
 8010542:	4562      	cmp	r2, ip
 8010544:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8010548:	eb73 0e04 	sbcs.w	lr, r3, r4
 801054c:	daed      	bge.n	801052a <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 801054e:	4694      	mov	ip, r2
 8010550:	461c      	mov	r4, r3
 8010552:	4629      	mov	r1, r5
 8010554:	e7e9      	b.n	801052a <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 8010556:	b10c      	cbz	r4, 801055c <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 8010558:	428c      	cmp	r4, r1
 801055a:	d9d5      	bls.n	8010508 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 801055c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010560:	4802      	ldr	r0, [pc, #8]	@ (801056c <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 8010562:	b002      	add	sp, #8
 8010564:	f007 bcc0 	b.w	8017ee8 <get_memory>
 8010568:	4629      	mov	r1, r5
 801056a:	e7c6      	b.n	80104fa <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 801056c:	2000b334 	.word	0x2000b334

08010570 <rmw_uxrce_find_static_input_buffer_by_owner>:
 8010570:	4b11      	ldr	r3, [pc, #68]	@ (80105b8 <rmw_uxrce_find_static_input_buffer_by_owner+0x48>)
 8010572:	681b      	ldr	r3, [r3, #0]
 8010574:	b530      	push	{r4, r5, lr}
 8010576:	b1e3      	cbz	r3, 80105b2 <rmw_uxrce_find_static_input_buffer_by_owner+0x42>
 8010578:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 801057c:	f06f 4c00 	mvn.w	ip, #2147483648	@ 0x80000000
 8010580:	2400      	movs	r4, #0
 8010582:	e001      	b.n	8010588 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 8010584:	685b      	ldr	r3, [r3, #4]
 8010586:	b193      	cbz	r3, 80105ae <rmw_uxrce_find_static_input_buffer_by_owner+0x3e>
 8010588:	689a      	ldr	r2, [r3, #8]
 801058a:	f8d2 1814 	ldr.w	r1, [r2, #2068]	@ 0x814
 801058e:	4288      	cmp	r0, r1
 8010590:	d1f8      	bne.n	8010584 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 8010592:	f8d2 1818 	ldr.w	r1, [r2, #2072]	@ 0x818
 8010596:	f8d2 281c 	ldr.w	r2, [r2, #2076]	@ 0x81c
 801059a:	4571      	cmp	r1, lr
 801059c:	eb72 050c 	sbcs.w	r5, r2, ip
 80105a0:	daf0      	bge.n	8010584 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 80105a2:	461c      	mov	r4, r3
 80105a4:	685b      	ldr	r3, [r3, #4]
 80105a6:	468e      	mov	lr, r1
 80105a8:	4694      	mov	ip, r2
 80105aa:	2b00      	cmp	r3, #0
 80105ac:	d1ec      	bne.n	8010588 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 80105ae:	4620      	mov	r0, r4
 80105b0:	bd30      	pop	{r4, r5, pc}
 80105b2:	461c      	mov	r4, r3
 80105b4:	4620      	mov	r0, r4
 80105b6:	bd30      	pop	{r4, r5, pc}
 80105b8:	2000b334 	.word	0x2000b334
 80105bc:	00000000 	.word	0x00000000

080105c0 <rmw_uxrce_clean_expired_static_input_buffer>:
 80105c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80105c4:	4b3c      	ldr	r3, [pc, #240]	@ (80106b8 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 80105c6:	ed2d 8b06 	vpush	{d8-d10}
 80105ca:	681f      	ldr	r7, [r3, #0]
 80105cc:	b08d      	sub	sp, #52	@ 0x34
 80105ce:	f7ff fd7d 	bl	80100cc <rmw_uros_epoch_nanos>
 80105d2:	2f00      	cmp	r7, #0
 80105d4:	d05d      	beq.n	8010692 <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 80105d6:	46b8      	mov	r8, r7
 80105d8:	ed9f 8b31 	vldr	d8, [pc, #196]	@ 80106a0 <rmw_uxrce_clean_expired_static_input_buffer+0xe0>
 80105dc:	f8d8 5008 	ldr.w	r5, [r8, #8]
 80105e0:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 80105e4:	2b04      	cmp	r3, #4
 80105e6:	ed9f ab30 	vldr	d10, [pc, #192]	@ 80106a8 <rmw_uxrce_clean_expired_static_input_buffer+0xe8>
 80105ea:	ed9f 9b31 	vldr	d9, [pc, #196]	@ 80106b0 <rmw_uxrce_clean_expired_static_input_buffer+0xf0>
 80105ee:	4681      	mov	r9, r0
 80105f0:	468a      	mov	sl, r1
 80105f2:	ac04      	add	r4, sp, #16
 80105f4:	d03f      	beq.n	8010676 <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 80105f6:	2b05      	cmp	r3, #5
 80105f8:	d044      	beq.n	8010684 <rmw_uxrce_clean_expired_static_input_buffer+0xc4>
 80105fa:	2b03      	cmp	r3, #3
 80105fc:	d03b      	beq.n	8010676 <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 80105fe:	ed8d 8b04 	vstr	d8, [sp, #16]
 8010602:	ed8d ab06 	vstr	d10, [sp, #24]
 8010606:	ed8d 8b08 	vstr	d8, [sp, #32]
 801060a:	ed8d 8b0a 	vstr	d8, [sp, #40]	@ 0x28
 801060e:	ab08      	add	r3, sp, #32
 8010610:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8010612:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8010616:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801061a:	f007 f9b1 	bl	8017980 <rmw_time_equal>
 801061e:	b118      	cbz	r0, 8010628 <rmw_uxrce_clean_expired_static_input_buffer+0x68>
 8010620:	ed8d 9b04 	vstr	d9, [sp, #16]
 8010624:	ed8d 8b06 	vstr	d8, [sp, #24]
 8010628:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801062c:	f8d5 6818 	ldr.w	r6, [r5, #2072]	@ 0x818
 8010630:	f8d5 781c 	ldr.w	r7, [r5, #2076]	@ 0x81c
 8010634:	f8d8 b004 	ldr.w	fp, [r8, #4]
 8010638:	f007 f9f6 	bl	8017a28 <rmw_time_total_nsec>
 801063c:	1830      	adds	r0, r6, r0
 801063e:	eb47 0101 	adc.w	r1, r7, r1
 8010642:	4548      	cmp	r0, r9
 8010644:	eb71 030a 	sbcs.w	r3, r1, sl
 8010648:	f505 6502 	add.w	r5, r5, #2080	@ 0x820
 801064c:	db05      	blt.n	801065a <rmw_uxrce_clean_expired_static_input_buffer+0x9a>
 801064e:	e955 2302 	ldrd	r2, r3, [r5, #-8]
 8010652:	4591      	cmp	r9, r2
 8010654:	eb7a 0303 	sbcs.w	r3, sl, r3
 8010658:	da03      	bge.n	8010662 <rmw_uxrce_clean_expired_static_input_buffer+0xa2>
 801065a:	4817      	ldr	r0, [pc, #92]	@ (80106b8 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 801065c:	4641      	mov	r1, r8
 801065e:	f007 fc53 	bl	8017f08 <put_memory>
 8010662:	f1bb 0f00 	cmp.w	fp, #0
 8010666:	d014      	beq.n	8010692 <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 8010668:	46d8      	mov	r8, fp
 801066a:	f8d8 5008 	ldr.w	r5, [r8, #8]
 801066e:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 8010672:	2b04      	cmp	r3, #4
 8010674:	d1bf      	bne.n	80105f6 <rmw_uxrce_clean_expired_static_input_buffer+0x36>
 8010676:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 801067a:	3340      	adds	r3, #64	@ 0x40
 801067c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801067e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8010682:	e7c0      	b.n	8010606 <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 8010684:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 8010688:	3348      	adds	r3, #72	@ 0x48
 801068a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801068c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8010690:	e7b9      	b.n	8010606 <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 8010692:	b00d      	add	sp, #52	@ 0x34
 8010694:	ecbd 8b06 	vpop	{d8-d10}
 8010698:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801069c:	f3af 8000 	nop.w
	...
 80106a8:	00000001 	.word	0x00000001
 80106ac:	00000000 	.word	0x00000000
 80106b0:	0000001e 	.word	0x0000001e
 80106b4:	00000000 	.word	0x00000000
 80106b8:	2000b334 	.word	0x2000b334

080106bc <run_xrce_session>:
 80106bc:	b510      	push	{r4, lr}
 80106be:	788c      	ldrb	r4, [r1, #2]
 80106c0:	b086      	sub	sp, #24
 80106c2:	2c01      	cmp	r4, #1
 80106c4:	f8ad 200e 	strh.w	r2, [sp, #14]
 80106c8:	d00c      	beq.n	80106e4 <run_xrce_session+0x28>
 80106ca:	4619      	mov	r1, r3
 80106cc:	2301      	movs	r3, #1
 80106ce:	9300      	str	r3, [sp, #0]
 80106d0:	f10d 020e 	add.w	r2, sp, #14
 80106d4:	f10d 0317 	add.w	r3, sp, #23
 80106d8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80106dc:	f001 fc82 	bl	8011fe4 <uxr_run_session_until_all_status>
 80106e0:	b006      	add	sp, #24
 80106e2:	bd10      	pop	{r4, pc}
 80106e4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80106e8:	f001 f896 	bl	8011818 <uxr_flash_output_streams>
 80106ec:	4620      	mov	r0, r4
 80106ee:	b006      	add	sp, #24
 80106f0:	bd10      	pop	{r4, pc}
 80106f2:	bf00      	nop

080106f4 <convert_qos_profile>:
 80106f4:	7a4a      	ldrb	r2, [r1, #9]
 80106f6:	f891 c008 	ldrb.w	ip, [r1, #8]
 80106fa:	2a02      	cmp	r2, #2
 80106fc:	bf18      	it	ne
 80106fe:	2200      	movne	r2, #0
 8010700:	7002      	strb	r2, [r0, #0]
 8010702:	780a      	ldrb	r2, [r1, #0]
 8010704:	8889      	ldrh	r1, [r1, #4]
 8010706:	8081      	strh	r1, [r0, #4]
 8010708:	f1ac 0c02 	sub.w	ip, ip, #2
 801070c:	f1a2 0202 	sub.w	r2, r2, #2
 8010710:	fabc fc8c 	clz	ip, ip
 8010714:	fab2 f282 	clz	r2, r2
 8010718:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 801071c:	0952      	lsrs	r2, r2, #5
 801071e:	f880 c001 	strb.w	ip, [r0, #1]
 8010722:	7082      	strb	r2, [r0, #2]
 8010724:	4770      	bx	lr
 8010726:	bf00      	nop

08010728 <generate_type_name>:
 8010728:	b530      	push	{r4, r5, lr}
 801072a:	2300      	movs	r3, #0
 801072c:	700b      	strb	r3, [r1, #0]
 801072e:	6803      	ldr	r3, [r0, #0]
 8010730:	b087      	sub	sp, #28
 8010732:	4614      	mov	r4, r2
 8010734:	b1d3      	cbz	r3, 801076c <generate_type_name+0x44>
 8010736:	4a0f      	ldr	r2, [pc, #60]	@ (8010774 <generate_type_name+0x4c>)
 8010738:	4615      	mov	r5, r2
 801073a:	9203      	str	r2, [sp, #12]
 801073c:	9500      	str	r5, [sp, #0]
 801073e:	6842      	ldr	r2, [r0, #4]
 8010740:	480d      	ldr	r0, [pc, #52]	@ (8010778 <generate_type_name+0x50>)
 8010742:	9001      	str	r0, [sp, #4]
 8010744:	4608      	mov	r0, r1
 8010746:	490d      	ldr	r1, [pc, #52]	@ (801077c <generate_type_name+0x54>)
 8010748:	9204      	str	r2, [sp, #16]
 801074a:	9105      	str	r1, [sp, #20]
 801074c:	9102      	str	r1, [sp, #8]
 801074e:	4a0c      	ldr	r2, [pc, #48]	@ (8010780 <generate_type_name+0x58>)
 8010750:	4621      	mov	r1, r4
 8010752:	f00a f88f 	bl	801a874 <sniprintf>
 8010756:	2800      	cmp	r0, #0
 8010758:	db05      	blt.n	8010766 <generate_type_name+0x3e>
 801075a:	4284      	cmp	r4, r0
 801075c:	bfd4      	ite	le
 801075e:	2000      	movle	r0, #0
 8010760:	2001      	movgt	r0, #1
 8010762:	b007      	add	sp, #28
 8010764:	bd30      	pop	{r4, r5, pc}
 8010766:	2000      	movs	r0, #0
 8010768:	b007      	add	sp, #28
 801076a:	bd30      	pop	{r4, r5, pc}
 801076c:	4b05      	ldr	r3, [pc, #20]	@ (8010784 <generate_type_name+0x5c>)
 801076e:	4a01      	ldr	r2, [pc, #4]	@ (8010774 <generate_type_name+0x4c>)
 8010770:	461d      	mov	r5, r3
 8010772:	e7e2      	b.n	801073a <generate_type_name+0x12>
 8010774:	0801d6dc 	.word	0x0801d6dc
 8010778:	0801d6f4 	.word	0x0801d6f4
 801077c:	0801d6f0 	.word	0x0801d6f0
 8010780:	0801d6e0 	.word	0x0801d6e0
 8010784:	0801dc48 	.word	0x0801dc48

08010788 <generate_topic_name>:
 8010788:	b510      	push	{r4, lr}
 801078a:	b082      	sub	sp, #8
 801078c:	4614      	mov	r4, r2
 801078e:	9000      	str	r0, [sp, #0]
 8010790:	4b08      	ldr	r3, [pc, #32]	@ (80107b4 <generate_topic_name+0x2c>)
 8010792:	4a09      	ldr	r2, [pc, #36]	@ (80107b8 <generate_topic_name+0x30>)
 8010794:	4608      	mov	r0, r1
 8010796:	4621      	mov	r1, r4
 8010798:	f00a f86c 	bl	801a874 <sniprintf>
 801079c:	2800      	cmp	r0, #0
 801079e:	db05      	blt.n	80107ac <generate_topic_name+0x24>
 80107a0:	4284      	cmp	r4, r0
 80107a2:	bfd4      	ite	le
 80107a4:	2000      	movle	r0, #0
 80107a6:	2001      	movgt	r0, #1
 80107a8:	b002      	add	sp, #8
 80107aa:	bd10      	pop	{r4, pc}
 80107ac:	2000      	movs	r0, #0
 80107ae:	b002      	add	sp, #8
 80107b0:	bd10      	pop	{r4, pc}
 80107b2:	bf00      	nop
 80107b4:	0801dedc 	.word	0x0801dedc
 80107b8:	0801d6f8 	.word	0x0801d6f8

080107bc <is_uxrce_rmw_identifier_valid>:
 80107bc:	b510      	push	{r4, lr}
 80107be:	4604      	mov	r4, r0
 80107c0:	b140      	cbz	r0, 80107d4 <is_uxrce_rmw_identifier_valid+0x18>
 80107c2:	f007 fbf9 	bl	8017fb8 <rmw_get_implementation_identifier>
 80107c6:	4601      	mov	r1, r0
 80107c8:	4620      	mov	r0, r4
 80107ca:	f7ef fd29 	bl	8000220 <strcmp>
 80107ce:	fab0 f080 	clz	r0, r0
 80107d2:	0940      	lsrs	r0, r0, #5
 80107d4:	bd10      	pop	{r4, pc}
 80107d6:	bf00      	nop

080107d8 <get_message_typesupport_handle>:
 80107d8:	6883      	ldr	r3, [r0, #8]
 80107da:	4718      	bx	r3

080107dc <get_message_typesupport_handle_function>:
 80107dc:	b510      	push	{r4, lr}
 80107de:	4604      	mov	r4, r0
 80107e0:	6800      	ldr	r0, [r0, #0]
 80107e2:	f7ef fd1d 	bl	8000220 <strcmp>
 80107e6:	2800      	cmp	r0, #0
 80107e8:	bf0c      	ite	eq
 80107ea:	4620      	moveq	r0, r4
 80107ec:	2000      	movne	r0, #0
 80107ee:	bd10      	pop	{r4, pc}

080107f0 <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 80107f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80107f4:	6805      	ldr	r5, [r0, #0]
 80107f6:	4604      	mov	r4, r0
 80107f8:	4628      	mov	r0, r5
 80107fa:	460e      	mov	r6, r1
 80107fc:	f7ef fd10 	bl	8000220 <strcmp>
 8010800:	b1c8      	cbz	r0, 8010836 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x46>
 8010802:	4b11      	ldr	r3, [pc, #68]	@ (8010848 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x58>)
 8010804:	681b      	ldr	r3, [r3, #0]
 8010806:	429d      	cmp	r5, r3
 8010808:	d112      	bne.n	8010830 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 801080a:	f8d4 8004 	ldr.w	r8, [r4, #4]
 801080e:	f8d8 4000 	ldr.w	r4, [r8]
 8010812:	b16c      	cbz	r4, 8010830 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 8010814:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8010818:	2700      	movs	r7, #0
 801081a:	3d04      	subs	r5, #4
 801081c:	f855 0f04 	ldr.w	r0, [r5, #4]!
 8010820:	4631      	mov	r1, r6
 8010822:	f7ef fcfd 	bl	8000220 <strcmp>
 8010826:	00bb      	lsls	r3, r7, #2
 8010828:	b140      	cbz	r0, 801083c <rosidl_typesupport_c__get_message_typesupport_handle_function+0x4c>
 801082a:	3701      	adds	r7, #1
 801082c:	42bc      	cmp	r4, r7
 801082e:	d1f5      	bne.n	801081c <rosidl_typesupport_c__get_message_typesupport_handle_function+0x2c>
 8010830:	2000      	movs	r0, #0
 8010832:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010836:	4620      	mov	r0, r4
 8010838:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801083c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8010840:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010844:	58d3      	ldr	r3, [r2, r3]
 8010846:	4718      	bx	r3
 8010848:	200001d0 	.word	0x200001d0

0801084c <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray>:
 801084c:	4b04      	ldr	r3, [pc, #16]	@ (8010860 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray+0x14>)
 801084e:	681a      	ldr	r2, [r3, #0]
 8010850:	b10a      	cbz	r2, 8010856 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray+0xa>
 8010852:	4803      	ldr	r0, [pc, #12]	@ (8010860 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray+0x14>)
 8010854:	4770      	bx	lr
 8010856:	4a03      	ldr	r2, [pc, #12]	@ (8010864 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray+0x18>)
 8010858:	4801      	ldr	r0, [pc, #4]	@ (8010860 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray+0x14>)
 801085a:	6812      	ldr	r2, [r2, #0]
 801085c:	601a      	str	r2, [r3, #0]
 801085e:	4770      	bx	lr
 8010860:	200001e0 	.word	0x200001e0
 8010864:	200001d0 	.word	0x200001d0

08010868 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray>:
 8010868:	4a02      	ldr	r2, [pc, #8]	@ (8010874 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray+0xc>)
 801086a:	4b03      	ldr	r3, [pc, #12]	@ (8010878 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray+0x10>)
 801086c:	6812      	ldr	r2, [r2, #0]
 801086e:	601a      	str	r2, [r3, #0]
 8010870:	4770      	bx	lr
 8010872:	bf00      	nop
 8010874:	200001d0 	.word	0x200001d0
 8010878:	200001e0 	.word	0x200001e0

0801087c <std_msgs__msg__Float64MultiArray__rosidl_typesupport_introspection_c__size_function__Float64MultiArray__data>:
 801087c:	6840      	ldr	r0, [r0, #4]
 801087e:	4770      	bx	lr

08010880 <std_msgs__msg__Float64MultiArray__rosidl_typesupport_introspection_c__get_const_function__Float64MultiArray__data>:
 8010880:	6800      	ldr	r0, [r0, #0]
 8010882:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 8010886:	4770      	bx	lr

08010888 <std_msgs__msg__Float64MultiArray__rosidl_typesupport_introspection_c__fetch_function__Float64MultiArray__data>:
 8010888:	6803      	ldr	r3, [r0, #0]
 801088a:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 801088e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010892:	e9c2 0100 	strd	r0, r1, [r2]
 8010896:	4770      	bx	lr

08010898 <std_msgs__msg__Float64MultiArray__rosidl_typesupport_introspection_c__assign_function__Float64MultiArray__data>:
 8010898:	6803      	ldr	r3, [r0, #0]
 801089a:	ed92 7b00 	vldr	d7, [r2]
 801089e:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 80108a2:	ed81 7b00 	vstr	d7, [r1]
 80108a6:	4770      	bx	lr

080108a8 <std_msgs__msg__Float64MultiArray__rosidl_typesupport_introspection_c__Float64MultiArray_init_function>:
 80108a8:	f007 bf66 	b.w	8018778 <std_msgs__msg__Float64MultiArray__init>

080108ac <std_msgs__msg__Float64MultiArray__rosidl_typesupport_introspection_c__Float64MultiArray_fini_function>:
 80108ac:	f007 bf88 	b.w	80187c0 <std_msgs__msg__Float64MultiArray__fini>

080108b0 <std_msgs__msg__Float64MultiArray__rosidl_typesupport_introspection_c__resize_function__Float64MultiArray__data>:
 80108b0:	b510      	push	{r4, lr}
 80108b2:	b082      	sub	sp, #8
 80108b4:	4604      	mov	r4, r0
 80108b6:	9101      	str	r1, [sp, #4]
 80108b8:	f007 ff4a 	bl	8018750 <rosidl_runtime_c__double__Sequence__fini>
 80108bc:	9901      	ldr	r1, [sp, #4]
 80108be:	4620      	mov	r0, r4
 80108c0:	b002      	add	sp, #8
 80108c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80108c6:	f007 bf2b 	b.w	8018720 <rosidl_runtime_c__double__Sequence__init>
 80108ca:	bf00      	nop

080108cc <std_msgs__msg__Float64MultiArray__rosidl_typesupport_introspection_c__get_function__Float64MultiArray__data>:
 80108cc:	6800      	ldr	r0, [r0, #0]
 80108ce:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 80108d2:	4770      	bx	lr

080108d4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray>:
 80108d4:	b508      	push	{r3, lr}
 80108d6:	f000 f857 	bl	8010988 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout>
 80108da:	4b06      	ldr	r3, [pc, #24]	@ (80108f4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray+0x20>)
 80108dc:	4906      	ldr	r1, [pc, #24]	@ (80108f8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray+0x24>)
 80108de:	681a      	ldr	r2, [r3, #0]
 80108e0:	60c8      	str	r0, [r1, #12]
 80108e2:	b10a      	cbz	r2, 80108e8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray+0x14>
 80108e4:	4803      	ldr	r0, [pc, #12]	@ (80108f4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray+0x20>)
 80108e6:	bd08      	pop	{r3, pc}
 80108e8:	4a04      	ldr	r2, [pc, #16]	@ (80108fc <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray+0x28>)
 80108ea:	4802      	ldr	r0, [pc, #8]	@ (80108f4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray+0x20>)
 80108ec:	6812      	ldr	r2, [r2, #0]
 80108ee:	601a      	str	r2, [r3, #0]
 80108f0:	bd08      	pop	{r3, pc}
 80108f2:	bf00      	nop
 80108f4:	20000264 	.word	0x20000264
 80108f8:	200001ec 	.word	0x200001ec
 80108fc:	200001d4 	.word	0x200001d4

08010900 <std_msgs__msg__MultiArrayLayout__rosidl_typesupport_introspection_c__size_function__MultiArrayLayout__dim>:
 8010900:	6840      	ldr	r0, [r0, #4]
 8010902:	4770      	bx	lr

08010904 <std_msgs__msg__MultiArrayLayout__rosidl_typesupport_introspection_c__get_const_function__MultiArrayLayout__dim>:
 8010904:	6800      	ldr	r0, [r0, #0]
 8010906:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 801090a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 801090e:	4770      	bx	lr

08010910 <std_msgs__msg__MultiArrayLayout__rosidl_typesupport_introspection_c__fetch_function__MultiArrayLayout__dim>:
 8010910:	6803      	ldr	r3, [r0, #0]
 8010912:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8010916:	b500      	push	{lr}
 8010918:	eb03 0e81 	add.w	lr, r3, r1, lsl #2
 801091c:	4694      	mov	ip, r2
 801091e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8010922:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010926:	f8de 3000 	ldr.w	r3, [lr]
 801092a:	f8cc 3000 	str.w	r3, [ip]
 801092e:	f85d fb04 	ldr.w	pc, [sp], #4
 8010932:	bf00      	nop

08010934 <std_msgs__msg__MultiArrayLayout__rosidl_typesupport_introspection_c__assign_function__MultiArrayLayout__dim>:
 8010934:	6803      	ldr	r3, [r0, #0]
 8010936:	b500      	push	{lr}
 8010938:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 801093c:	4696      	mov	lr, r2
 801093e:	eb03 0c81 	add.w	ip, r3, r1, lsl #2
 8010942:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8010946:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801094a:	f8de 3000 	ldr.w	r3, [lr]
 801094e:	f8cc 3000 	str.w	r3, [ip]
 8010952:	f85d fb04 	ldr.w	pc, [sp], #4
 8010956:	bf00      	nop

08010958 <std_msgs__msg__MultiArrayLayout__rosidl_typesupport_introspection_c__MultiArrayLayout_init_function>:
 8010958:	f007 bfc8 	b.w	80188ec <std_msgs__msg__MultiArrayLayout__init>

0801095c <std_msgs__msg__MultiArrayLayout__rosidl_typesupport_introspection_c__MultiArrayLayout_fini_function>:
 801095c:	f007 bfd8 	b.w	8018910 <std_msgs__msg__MultiArrayLayout__fini>

08010960 <std_msgs__msg__MultiArrayLayout__rosidl_typesupport_introspection_c__resize_function__MultiArrayLayout__dim>:
 8010960:	b510      	push	{r4, lr}
 8010962:	b082      	sub	sp, #8
 8010964:	4604      	mov	r4, r0
 8010966:	9101      	str	r1, [sp, #4]
 8010968:	f007 ff98 	bl	801889c <std_msgs__msg__MultiArrayDimension__Sequence__fini>
 801096c:	9901      	ldr	r1, [sp, #4]
 801096e:	4620      	mov	r0, r4
 8010970:	b002      	add	sp, #8
 8010972:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010976:	f007 bf8d 	b.w	8018894 <std_msgs__msg__MultiArrayDimension__Sequence__init>
 801097a:	bf00      	nop

0801097c <std_msgs__msg__MultiArrayLayout__rosidl_typesupport_introspection_c__get_function__MultiArrayLayout__dim>:
 801097c:	6800      	ldr	r0, [r0, #0]
 801097e:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8010982:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8010986:	4770      	bx	lr

08010988 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout>:
 8010988:	b508      	push	{r3, lr}
 801098a:	f007 ffc9 	bl	8018920 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension>
 801098e:	4b06      	ldr	r3, [pc, #24]	@ (80109a8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout+0x20>)
 8010990:	4906      	ldr	r1, [pc, #24]	@ (80109ac <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout+0x24>)
 8010992:	681a      	ldr	r2, [r3, #0]
 8010994:	60c8      	str	r0, [r1, #12]
 8010996:	b10a      	cbz	r2, 801099c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout+0x14>
 8010998:	4803      	ldr	r0, [pc, #12]	@ (80109a8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout+0x20>)
 801099a:	bd08      	pop	{r3, pc}
 801099c:	4a04      	ldr	r2, [pc, #16]	@ (80109b0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout+0x28>)
 801099e:	4802      	ldr	r0, [pc, #8]	@ (80109a8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout+0x20>)
 80109a0:	6812      	ldr	r2, [r2, #0]
 80109a2:	601a      	str	r2, [r3, #0]
 80109a4:	bd08      	pop	{r3, pc}
 80109a6:	bf00      	nop
 80109a8:	200002e8 	.word	0x200002e8
 80109ac:	20000270 	.word	0x20000270
 80109b0:	200001d4 	.word	0x200001d4

080109b4 <_Float64MultiArray__max_serialized_size>:
 80109b4:	b500      	push	{lr}
 80109b6:	b083      	sub	sp, #12
 80109b8:	2301      	movs	r3, #1
 80109ba:	2100      	movs	r1, #0
 80109bc:	f10d 0007 	add.w	r0, sp, #7
 80109c0:	f88d 3007 	strb.w	r3, [sp, #7]
 80109c4:	f000 f91c 	bl	8010c00 <max_serialized_size_std_msgs__msg__MultiArrayLayout>
 80109c8:	b003      	add	sp, #12
 80109ca:	f85d fb04 	ldr.w	pc, [sp], #4
 80109ce:	bf00      	nop

080109d0 <get_serialized_size_std_msgs__msg__Float64MultiArray>:
 80109d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80109d2:	4604      	mov	r4, r0
 80109d4:	b160      	cbz	r0, 80109f0 <get_serialized_size_std_msgs__msg__Float64MultiArray+0x20>
 80109d6:	460d      	mov	r5, r1
 80109d8:	f000 f8b6 	bl	8010b48 <get_serialized_size_std_msgs__msg__MultiArrayLayout>
 80109dc:	182e      	adds	r6, r5, r0
 80109de:	4630      	mov	r0, r6
 80109e0:	2104      	movs	r1, #4
 80109e2:	6967      	ldr	r7, [r4, #20]
 80109e4:	f7fd f9a8 	bl	800dd38 <ucdr_alignment>
 80109e8:	1d03      	adds	r3, r0, #4
 80109ea:	441e      	add	r6, r3
 80109ec:	b90f      	cbnz	r7, 80109f2 <get_serialized_size_std_msgs__msg__Float64MultiArray+0x22>
 80109ee:	1b70      	subs	r0, r6, r5
 80109f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80109f2:	4630      	mov	r0, r6
 80109f4:	2108      	movs	r1, #8
 80109f6:	f7fd f99f 	bl	800dd38 <ucdr_alignment>
 80109fa:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 80109fe:	181e      	adds	r6, r3, r0
 8010a00:	1b70      	subs	r0, r6, r5
 8010a02:	e7f5      	b.n	80109f0 <get_serialized_size_std_msgs__msg__Float64MultiArray+0x20>

08010a04 <_Float64MultiArray__cdr_deserialize>:
 8010a04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010a06:	460c      	mov	r4, r1
 8010a08:	b083      	sub	sp, #12
 8010a0a:	b1d1      	cbz	r1, 8010a42 <_Float64MultiArray__cdr_deserialize+0x3e>
 8010a0c:	4606      	mov	r6, r0
 8010a0e:	f000 f901 	bl	8010c14 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout>
 8010a12:	6843      	ldr	r3, [r0, #4]
 8010a14:	4621      	mov	r1, r4
 8010a16:	68db      	ldr	r3, [r3, #12]
 8010a18:	4630      	mov	r0, r6
 8010a1a:	4798      	blx	r3
 8010a1c:	69a7      	ldr	r7, [r4, #24]
 8010a1e:	6921      	ldr	r1, [r4, #16]
 8010a20:	ab01      	add	r3, sp, #4
 8010a22:	463a      	mov	r2, r7
 8010a24:	4630      	mov	r0, r6
 8010a26:	f000 f999 	bl	8010d5c <ucdr_deserialize_sequence_double>
 8010a2a:	9b01      	ldr	r3, [sp, #4]
 8010a2c:	4605      	mov	r5, r0
 8010a2e:	b920      	cbnz	r0, 8010a3a <_Float64MultiArray__cdr_deserialize+0x36>
 8010a30:	429f      	cmp	r7, r3
 8010a32:	d30a      	bcc.n	8010a4a <_Float64MultiArray__cdr_deserialize+0x46>
 8010a34:	4628      	mov	r0, r5
 8010a36:	b003      	add	sp, #12
 8010a38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010a3a:	4628      	mov	r0, r5
 8010a3c:	6163      	str	r3, [r4, #20]
 8010a3e:	b003      	add	sp, #12
 8010a40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010a42:	460d      	mov	r5, r1
 8010a44:	4628      	mov	r0, r5
 8010a46:	b003      	add	sp, #12
 8010a48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010a4a:	2301      	movs	r3, #1
 8010a4c:	75b0      	strb	r0, [r6, #22]
 8010a4e:	7573      	strb	r3, [r6, #21]
 8010a50:	4630      	mov	r0, r6
 8010a52:	6165      	str	r5, [r4, #20]
 8010a54:	2108      	movs	r1, #8
 8010a56:	f7fd f985 	bl	800dd64 <ucdr_align_to>
 8010a5a:	9901      	ldr	r1, [sp, #4]
 8010a5c:	4630      	mov	r0, r6
 8010a5e:	00c9      	lsls	r1, r1, #3
 8010a60:	f7fd f9b6 	bl	800ddd0 <ucdr_advance_buffer>
 8010a64:	4628      	mov	r0, r5
 8010a66:	b003      	add	sp, #12
 8010a68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010a6a:	bf00      	nop

08010a6c <_Float64MultiArray__cdr_serialize>:
 8010a6c:	b180      	cbz	r0, 8010a90 <_Float64MultiArray__cdr_serialize+0x24>
 8010a6e:	b538      	push	{r3, r4, r5, lr}
 8010a70:	460d      	mov	r5, r1
 8010a72:	4604      	mov	r4, r0
 8010a74:	f000 f8ce 	bl	8010c14 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout>
 8010a78:	6843      	ldr	r3, [r0, #4]
 8010a7a:	4629      	mov	r1, r5
 8010a7c:	689b      	ldr	r3, [r3, #8]
 8010a7e:	4620      	mov	r0, r4
 8010a80:	4798      	blx	r3
 8010a82:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
 8010a86:	4628      	mov	r0, r5
 8010a88:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010a8c:	f000 b954 	b.w	8010d38 <ucdr_serialize_sequence_double>
 8010a90:	4770      	bx	lr
 8010a92:	bf00      	nop

08010a94 <_Float64MultiArray__get_serialized_size>:
 8010a94:	b570      	push	{r4, r5, r6, lr}
 8010a96:	4604      	mov	r4, r0
 8010a98:	b150      	cbz	r0, 8010ab0 <_Float64MultiArray__get_serialized_size+0x1c>
 8010a9a:	2100      	movs	r1, #0
 8010a9c:	f000 f854 	bl	8010b48 <get_serialized_size_std_msgs__msg__MultiArrayLayout>
 8010aa0:	2104      	movs	r1, #4
 8010aa2:	6966      	ldr	r6, [r4, #20]
 8010aa4:	4605      	mov	r5, r0
 8010aa6:	f7fd f947 	bl	800dd38 <ucdr_alignment>
 8010aaa:	4428      	add	r0, r5
 8010aac:	1d04      	adds	r4, r0, #4
 8010aae:	b90e      	cbnz	r6, 8010ab4 <_Float64MultiArray__get_serialized_size+0x20>
 8010ab0:	4620      	mov	r0, r4
 8010ab2:	bd70      	pop	{r4, r5, r6, pc}
 8010ab4:	4620      	mov	r0, r4
 8010ab6:	2108      	movs	r1, #8
 8010ab8:	f7fd f93e 	bl	800dd38 <ucdr_alignment>
 8010abc:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8010ac0:	4404      	add	r4, r0
 8010ac2:	4620      	mov	r0, r4
 8010ac4:	bd70      	pop	{r4, r5, r6, pc}
 8010ac6:	bf00      	nop

08010ac8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray>:
 8010ac8:	4800      	ldr	r0, [pc, #0]	@ (8010acc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray+0x4>)
 8010aca:	4770      	bx	lr
 8010acc:	200002f4 	.word	0x200002f4

08010ad0 <_MultiArrayLayout__max_serialized_size>:
 8010ad0:	b508      	push	{r3, lr}
 8010ad2:	2104      	movs	r1, #4
 8010ad4:	2000      	movs	r0, #0
 8010ad6:	f7fd f92f 	bl	800dd38 <ucdr_alignment>
 8010ada:	3004      	adds	r0, #4
 8010adc:	bd08      	pop	{r3, pc}
 8010ade:	bf00      	nop

08010ae0 <get_serialized_size_std_msgs__msg__MultiArrayLayout.part.0>:
 8010ae0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010ae4:	4689      	mov	r9, r1
 8010ae6:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8010aea:	4607      	mov	r7, r0
 8010aec:	2104      	movs	r1, #4
 8010aee:	4648      	mov	r0, r9
 8010af0:	f7fd f922 	bl	800dd38 <ucdr_alignment>
 8010af4:	f109 0304 	add.w	r3, r9, #4
 8010af8:	18c6      	adds	r6, r0, r3
 8010afa:	f1b8 0f00 	cmp.w	r8, #0
 8010afe:	d018      	beq.n	8010b32 <get_serialized_size_std_msgs__msg__MultiArrayLayout.part.0+0x52>
 8010b00:	2500      	movs	r5, #0
 8010b02:	f007 ffab 	bl	8018a5c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension>
 8010b06:	683a      	ldr	r2, [r7, #0]
 8010b08:	6843      	ldr	r3, [r0, #4]
 8010b0a:	eb05 0085 	add.w	r0, r5, r5, lsl #2
 8010b0e:	4631      	mov	r1, r6
 8010b10:	695b      	ldr	r3, [r3, #20]
 8010b12:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 8010b16:	4798      	blx	r3
 8010b18:	4604      	mov	r4, r0
 8010b1a:	2c04      	cmp	r4, #4
 8010b1c:	4621      	mov	r1, r4
 8010b1e:	4630      	mov	r0, r6
 8010b20:	bf28      	it	cs
 8010b22:	2104      	movcs	r1, #4
 8010b24:	f7fd f908 	bl	800dd38 <ucdr_alignment>
 8010b28:	3501      	adds	r5, #1
 8010b2a:	4404      	add	r4, r0
 8010b2c:	45a8      	cmp	r8, r5
 8010b2e:	4426      	add	r6, r4
 8010b30:	d1e7      	bne.n	8010b02 <get_serialized_size_std_msgs__msg__MultiArrayLayout.part.0+0x22>
 8010b32:	2104      	movs	r1, #4
 8010b34:	4630      	mov	r0, r6
 8010b36:	f7fd f8ff 	bl	800dd38 <ucdr_alignment>
 8010b3a:	f1c9 0904 	rsb	r9, r9, #4
 8010b3e:	444e      	add	r6, r9
 8010b40:	4430      	add	r0, r6
 8010b42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010b46:	bf00      	nop

08010b48 <get_serialized_size_std_msgs__msg__MultiArrayLayout>:
 8010b48:	b108      	cbz	r0, 8010b4e <get_serialized_size_std_msgs__msg__MultiArrayLayout+0x6>
 8010b4a:	f7ff bfc9 	b.w	8010ae0 <get_serialized_size_std_msgs__msg__MultiArrayLayout.part.0>
 8010b4e:	4770      	bx	lr

08010b50 <_MultiArrayLayout__get_serialized_size>:
 8010b50:	b110      	cbz	r0, 8010b58 <_MultiArrayLayout__get_serialized_size+0x8>
 8010b52:	2100      	movs	r1, #0
 8010b54:	f7ff bfc4 	b.w	8010ae0 <get_serialized_size_std_msgs__msg__MultiArrayLayout.part.0>
 8010b58:	4770      	bx	lr
 8010b5a:	bf00      	nop

08010b5c <_MultiArrayLayout__cdr_deserialize>:
 8010b5c:	b349      	cbz	r1, 8010bb2 <_MultiArrayLayout__cdr_deserialize+0x56>
 8010b5e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010b60:	460e      	mov	r6, r1
 8010b62:	b083      	sub	sp, #12
 8010b64:	a901      	add	r1, sp, #4
 8010b66:	4607      	mov	r7, r0
 8010b68:	f7fc f946 	bl	800cdf8 <ucdr_deserialize_uint32_t>
 8010b6c:	9b01      	ldr	r3, [sp, #4]
 8010b6e:	68b2      	ldr	r2, [r6, #8]
 8010b70:	429a      	cmp	r2, r3
 8010b72:	d31b      	bcc.n	8010bac <_MultiArrayLayout__cdr_deserialize+0x50>
 8010b74:	6073      	str	r3, [r6, #4]
 8010b76:	b18b      	cbz	r3, 8010b9c <_MultiArrayLayout__cdr_deserialize+0x40>
 8010b78:	2400      	movs	r4, #0
 8010b7a:	4625      	mov	r5, r4
 8010b7c:	e002      	b.n	8010b84 <_MultiArrayLayout__cdr_deserialize+0x28>
 8010b7e:	9b01      	ldr	r3, [sp, #4]
 8010b80:	429d      	cmp	r5, r3
 8010b82:	d20b      	bcs.n	8010b9c <_MultiArrayLayout__cdr_deserialize+0x40>
 8010b84:	f007 ff6a 	bl	8018a5c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension>
 8010b88:	6831      	ldr	r1, [r6, #0]
 8010b8a:	6843      	ldr	r3, [r0, #4]
 8010b8c:	4421      	add	r1, r4
 8010b8e:	68db      	ldr	r3, [r3, #12]
 8010b90:	4638      	mov	r0, r7
 8010b92:	4798      	blx	r3
 8010b94:	3501      	adds	r5, #1
 8010b96:	3414      	adds	r4, #20
 8010b98:	2800      	cmp	r0, #0
 8010b9a:	d1f0      	bne.n	8010b7e <_MultiArrayLayout__cdr_deserialize+0x22>
 8010b9c:	f106 010c 	add.w	r1, r6, #12
 8010ba0:	4638      	mov	r0, r7
 8010ba2:	b003      	add	sp, #12
 8010ba4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8010ba8:	f7fc b926 	b.w	800cdf8 <ucdr_deserialize_uint32_t>
 8010bac:	2000      	movs	r0, #0
 8010bae:	b003      	add	sp, #12
 8010bb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010bb2:	2000      	movs	r0, #0
 8010bb4:	4770      	bx	lr
 8010bb6:	bf00      	nop

08010bb8 <_MultiArrayLayout__cdr_serialize>:
 8010bb8:	b308      	cbz	r0, 8010bfe <_MultiArrayLayout__cdr_serialize+0x46>
 8010bba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010bbc:	6847      	ldr	r7, [r0, #4]
 8010bbe:	460e      	mov	r6, r1
 8010bc0:	4605      	mov	r5, r0
 8010bc2:	4608      	mov	r0, r1
 8010bc4:	4639      	mov	r1, r7
 8010bc6:	f7fb ffe7 	bl	800cb98 <ucdr_serialize_uint32_t>
 8010bca:	b190      	cbz	r0, 8010bf2 <_MultiArrayLayout__cdr_serialize+0x3a>
 8010bcc:	b18f      	cbz	r7, 8010bf2 <_MultiArrayLayout__cdr_serialize+0x3a>
 8010bce:	2400      	movs	r4, #0
 8010bd0:	e001      	b.n	8010bd6 <_MultiArrayLayout__cdr_serialize+0x1e>
 8010bd2:	42a7      	cmp	r7, r4
 8010bd4:	d00d      	beq.n	8010bf2 <_MultiArrayLayout__cdr_serialize+0x3a>
 8010bd6:	f007 ff41 	bl	8018a5c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension>
 8010bda:	682a      	ldr	r2, [r5, #0]
 8010bdc:	6843      	ldr	r3, [r0, #4]
 8010bde:	eb04 0084 	add.w	r0, r4, r4, lsl #2
 8010be2:	689b      	ldr	r3, [r3, #8]
 8010be4:	4631      	mov	r1, r6
 8010be6:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 8010bea:	3401      	adds	r4, #1
 8010bec:	4798      	blx	r3
 8010bee:	2800      	cmp	r0, #0
 8010bf0:	d1ef      	bne.n	8010bd2 <_MultiArrayLayout__cdr_serialize+0x1a>
 8010bf2:	68e9      	ldr	r1, [r5, #12]
 8010bf4:	4630      	mov	r0, r6
 8010bf6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8010bfa:	f7fb bfcd 	b.w	800cb98 <ucdr_serialize_uint32_t>
 8010bfe:	4770      	bx	lr

08010c00 <max_serialized_size_std_msgs__msg__MultiArrayLayout>:
 8010c00:	b508      	push	{r3, lr}
 8010c02:	4603      	mov	r3, r0
 8010c04:	2200      	movs	r2, #0
 8010c06:	4608      	mov	r0, r1
 8010c08:	701a      	strb	r2, [r3, #0]
 8010c0a:	2104      	movs	r1, #4
 8010c0c:	f7fd f894 	bl	800dd38 <ucdr_alignment>
 8010c10:	3004      	adds	r0, #4
 8010c12:	bd08      	pop	{r3, pc}

08010c14 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout>:
 8010c14:	4800      	ldr	r0, [pc, #0]	@ (8010c18 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout+0x4>)
 8010c16:	4770      	bx	lr
 8010c18:	2000031c 	.word	0x2000031c

08010c1c <geometry_msgs__msg__Twist__init>:
 8010c1c:	b570      	push	{r4, r5, r6, lr}
 8010c1e:	4605      	mov	r5, r0
 8010c20:	b1a8      	cbz	r0, 8010c4e <geometry_msgs__msg__Twist__init+0x32>
 8010c22:	f000 f82b 	bl	8010c7c <geometry_msgs__msg__Vector3__init>
 8010c26:	4604      	mov	r4, r0
 8010c28:	b140      	cbz	r0, 8010c3c <geometry_msgs__msg__Twist__init+0x20>
 8010c2a:	f105 0618 	add.w	r6, r5, #24
 8010c2e:	4630      	mov	r0, r6
 8010c30:	f000 f824 	bl	8010c7c <geometry_msgs__msg__Vector3__init>
 8010c34:	4604      	mov	r4, r0
 8010c36:	b168      	cbz	r0, 8010c54 <geometry_msgs__msg__Twist__init+0x38>
 8010c38:	4620      	mov	r0, r4
 8010c3a:	bd70      	pop	{r4, r5, r6, pc}
 8010c3c:	4628      	mov	r0, r5
 8010c3e:	f000 f821 	bl	8010c84 <geometry_msgs__msg__Vector3__fini>
 8010c42:	f105 0018 	add.w	r0, r5, #24
 8010c46:	f000 f81d 	bl	8010c84 <geometry_msgs__msg__Vector3__fini>
 8010c4a:	4620      	mov	r0, r4
 8010c4c:	bd70      	pop	{r4, r5, r6, pc}
 8010c4e:	4604      	mov	r4, r0
 8010c50:	4620      	mov	r0, r4
 8010c52:	bd70      	pop	{r4, r5, r6, pc}
 8010c54:	4628      	mov	r0, r5
 8010c56:	f000 f815 	bl	8010c84 <geometry_msgs__msg__Vector3__fini>
 8010c5a:	4630      	mov	r0, r6
 8010c5c:	f000 f812 	bl	8010c84 <geometry_msgs__msg__Vector3__fini>
 8010c60:	e7ea      	b.n	8010c38 <geometry_msgs__msg__Twist__init+0x1c>
 8010c62:	bf00      	nop

08010c64 <geometry_msgs__msg__Twist__fini>:
 8010c64:	b148      	cbz	r0, 8010c7a <geometry_msgs__msg__Twist__fini+0x16>
 8010c66:	b510      	push	{r4, lr}
 8010c68:	4604      	mov	r4, r0
 8010c6a:	f000 f80b 	bl	8010c84 <geometry_msgs__msg__Vector3__fini>
 8010c6e:	f104 0018 	add.w	r0, r4, #24
 8010c72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010c76:	f000 b805 	b.w	8010c84 <geometry_msgs__msg__Vector3__fini>
 8010c7a:	4770      	bx	lr

08010c7c <geometry_msgs__msg__Vector3__init>:
 8010c7c:	3800      	subs	r0, #0
 8010c7e:	bf18      	it	ne
 8010c80:	2001      	movne	r0, #1
 8010c82:	4770      	bx	lr

08010c84 <geometry_msgs__msg__Vector3__fini>:
 8010c84:	4770      	bx	lr
 8010c86:	bf00      	nop

08010c88 <ucdr_serialize_sequence_char>:
 8010c88:	b570      	push	{r4, r5, r6, lr}
 8010c8a:	4615      	mov	r5, r2
 8010c8c:	460e      	mov	r6, r1
 8010c8e:	7d01      	ldrb	r1, [r0, #20]
 8010c90:	4604      	mov	r4, r0
 8010c92:	f7fc f819 	bl	800ccc8 <ucdr_serialize_endian_uint32_t>
 8010c96:	b90d      	cbnz	r5, 8010c9c <ucdr_serialize_sequence_char+0x14>
 8010c98:	2001      	movs	r0, #1
 8010c9a:	bd70      	pop	{r4, r5, r6, pc}
 8010c9c:	7d21      	ldrb	r1, [r4, #20]
 8010c9e:	462b      	mov	r3, r5
 8010ca0:	4632      	mov	r2, r6
 8010ca2:	4620      	mov	r0, r4
 8010ca4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010ca8:	f007 bedc 	b.w	8018a64 <ucdr_serialize_endian_array_char>

08010cac <ucdr_deserialize_sequence_char>:
 8010cac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010cb0:	461d      	mov	r5, r3
 8010cb2:	4616      	mov	r6, r2
 8010cb4:	460f      	mov	r7, r1
 8010cb6:	461a      	mov	r2, r3
 8010cb8:	7d01      	ldrb	r1, [r0, #20]
 8010cba:	4604      	mov	r4, r0
 8010cbc:	f7fc f92c 	bl	800cf18 <ucdr_deserialize_endian_uint32_t>
 8010cc0:	682b      	ldr	r3, [r5, #0]
 8010cc2:	429e      	cmp	r6, r3
 8010cc4:	bf3c      	itt	cc
 8010cc6:	2201      	movcc	r2, #1
 8010cc8:	75a2      	strbcc	r2, [r4, #22]
 8010cca:	b913      	cbnz	r3, 8010cd2 <ucdr_deserialize_sequence_char+0x26>
 8010ccc:	2001      	movs	r0, #1
 8010cce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010cd2:	7d21      	ldrb	r1, [r4, #20]
 8010cd4:	463a      	mov	r2, r7
 8010cd6:	4620      	mov	r0, r4
 8010cd8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010cdc:	f007 bef4 	b.w	8018ac8 <ucdr_deserialize_endian_array_char>

08010ce0 <ucdr_serialize_sequence_uint8_t>:
 8010ce0:	b570      	push	{r4, r5, r6, lr}
 8010ce2:	4615      	mov	r5, r2
 8010ce4:	460e      	mov	r6, r1
 8010ce6:	7d01      	ldrb	r1, [r0, #20]
 8010ce8:	4604      	mov	r4, r0
 8010cea:	f7fb ffed 	bl	800ccc8 <ucdr_serialize_endian_uint32_t>
 8010cee:	b90d      	cbnz	r5, 8010cf4 <ucdr_serialize_sequence_uint8_t+0x14>
 8010cf0:	2001      	movs	r0, #1
 8010cf2:	bd70      	pop	{r4, r5, r6, pc}
 8010cf4:	7d21      	ldrb	r1, [r4, #20]
 8010cf6:	462b      	mov	r3, r5
 8010cf8:	4632      	mov	r2, r6
 8010cfa:	4620      	mov	r0, r4
 8010cfc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010d00:	f007 bf46 	b.w	8018b90 <ucdr_serialize_endian_array_uint8_t>

08010d04 <ucdr_deserialize_sequence_uint8_t>:
 8010d04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010d08:	461d      	mov	r5, r3
 8010d0a:	4616      	mov	r6, r2
 8010d0c:	460f      	mov	r7, r1
 8010d0e:	461a      	mov	r2, r3
 8010d10:	7d01      	ldrb	r1, [r0, #20]
 8010d12:	4604      	mov	r4, r0
 8010d14:	f7fc f900 	bl	800cf18 <ucdr_deserialize_endian_uint32_t>
 8010d18:	682b      	ldr	r3, [r5, #0]
 8010d1a:	429e      	cmp	r6, r3
 8010d1c:	bf3c      	itt	cc
 8010d1e:	2201      	movcc	r2, #1
 8010d20:	75a2      	strbcc	r2, [r4, #22]
 8010d22:	b913      	cbnz	r3, 8010d2a <ucdr_deserialize_sequence_uint8_t+0x26>
 8010d24:	2001      	movs	r0, #1
 8010d26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010d2a:	7d21      	ldrb	r1, [r4, #20]
 8010d2c:	463a      	mov	r2, r7
 8010d2e:	4620      	mov	r0, r4
 8010d30:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010d34:	f007 bf90 	b.w	8018c58 <ucdr_deserialize_endian_array_uint8_t>

08010d38 <ucdr_serialize_sequence_double>:
 8010d38:	b570      	push	{r4, r5, r6, lr}
 8010d3a:	4615      	mov	r5, r2
 8010d3c:	460e      	mov	r6, r1
 8010d3e:	7d01      	ldrb	r1, [r0, #20]
 8010d40:	4604      	mov	r4, r0
 8010d42:	f7fb ffc1 	bl	800ccc8 <ucdr_serialize_endian_uint32_t>
 8010d46:	b90d      	cbnz	r5, 8010d4c <ucdr_serialize_sequence_double+0x14>
 8010d48:	2001      	movs	r0, #1
 8010d4a:	bd70      	pop	{r4, r5, r6, pc}
 8010d4c:	7d21      	ldrb	r1, [r4, #20]
 8010d4e:	462b      	mov	r3, r5
 8010d50:	4632      	mov	r2, r6
 8010d52:	4620      	mov	r0, r4
 8010d54:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010d58:	f007 bfb0 	b.w	8018cbc <ucdr_serialize_endian_array_double>

08010d5c <ucdr_deserialize_sequence_double>:
 8010d5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010d60:	461d      	mov	r5, r3
 8010d62:	4616      	mov	r6, r2
 8010d64:	460f      	mov	r7, r1
 8010d66:	461a      	mov	r2, r3
 8010d68:	7d01      	ldrb	r1, [r0, #20]
 8010d6a:	4604      	mov	r4, r0
 8010d6c:	f7fc f8d4 	bl	800cf18 <ucdr_deserialize_endian_uint32_t>
 8010d70:	682b      	ldr	r3, [r5, #0]
 8010d72:	429e      	cmp	r6, r3
 8010d74:	bf3c      	itt	cc
 8010d76:	2201      	movcc	r2, #1
 8010d78:	75a2      	strbcc	r2, [r4, #22]
 8010d7a:	b913      	cbnz	r3, 8010d82 <ucdr_deserialize_sequence_double+0x26>
 8010d7c:	2001      	movs	r0, #1
 8010d7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010d82:	7d21      	ldrb	r1, [r4, #20]
 8010d84:	463a      	mov	r2, r7
 8010d86:	4620      	mov	r0, r4
 8010d88:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010d8c:	f007 bfea 	b.w	8018d64 <ucdr_deserialize_endian_array_double>

08010d90 <uxr_buffer_delete_entity>:
 8010d90:	b510      	push	{r4, lr}
 8010d92:	2300      	movs	r3, #0
 8010d94:	b08e      	sub	sp, #56	@ 0x38
 8010d96:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8010d9a:	2303      	movs	r3, #3
 8010d9c:	9300      	str	r3, [sp, #0]
 8010d9e:	2204      	movs	r2, #4
 8010da0:	ab06      	add	r3, sp, #24
 8010da2:	4604      	mov	r4, r0
 8010da4:	9103      	str	r1, [sp, #12]
 8010da6:	f001 fb99 	bl	80124dc <uxr_prepare_stream_to_write_submessage>
 8010daa:	b918      	cbnz	r0, 8010db4 <uxr_buffer_delete_entity+0x24>
 8010dac:	4604      	mov	r4, r0
 8010dae:	4620      	mov	r0, r4
 8010db0:	b00e      	add	sp, #56	@ 0x38
 8010db2:	bd10      	pop	{r4, pc}
 8010db4:	9902      	ldr	r1, [sp, #8]
 8010db6:	aa05      	add	r2, sp, #20
 8010db8:	4620      	mov	r0, r4
 8010dba:	f001 fcc5 	bl	8012748 <uxr_init_base_object_request>
 8010dbe:	a905      	add	r1, sp, #20
 8010dc0:	4604      	mov	r4, r0
 8010dc2:	a806      	add	r0, sp, #24
 8010dc4:	f003 fba8 	bl	8014518 <uxr_serialize_DELETE_Payload>
 8010dc8:	4620      	mov	r0, r4
 8010dca:	b00e      	add	sp, #56	@ 0x38
 8010dcc:	bd10      	pop	{r4, pc}
 8010dce:	bf00      	nop

08010dd0 <uxr_common_create_entity>:
 8010dd0:	b510      	push	{r4, lr}
 8010dd2:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 8010dd6:	b08c      	sub	sp, #48	@ 0x30
 8010dd8:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8010ddc:	f1bc 0f01 	cmp.w	ip, #1
 8010de0:	bf0c      	ite	eq
 8010de2:	f003 0201 	andeq.w	r2, r3, #1
 8010de6:	2200      	movne	r2, #0
 8010de8:	330e      	adds	r3, #14
 8010dea:	f89d 1038 	ldrb.w	r1, [sp, #56]	@ 0x38
 8010dee:	9101      	str	r1, [sp, #4]
 8010df0:	441a      	add	r2, r3
 8010df2:	2301      	movs	r3, #1
 8010df4:	9300      	str	r3, [sp, #0]
 8010df6:	9903      	ldr	r1, [sp, #12]
 8010df8:	ab04      	add	r3, sp, #16
 8010dfa:	b292      	uxth	r2, r2
 8010dfc:	4604      	mov	r4, r0
 8010dfe:	f001 fb6d 	bl	80124dc <uxr_prepare_stream_to_write_submessage>
 8010e02:	b918      	cbnz	r0, 8010e0c <uxr_common_create_entity+0x3c>
 8010e04:	4604      	mov	r4, r0
 8010e06:	4620      	mov	r0, r4
 8010e08:	b00c      	add	sp, #48	@ 0x30
 8010e0a:	bd10      	pop	{r4, pc}
 8010e0c:	9902      	ldr	r1, [sp, #8]
 8010e0e:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8010e10:	4620      	mov	r0, r4
 8010e12:	f001 fc99 	bl	8012748 <uxr_init_base_object_request>
 8010e16:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8010e18:	4604      	mov	r4, r0
 8010e1a:	a804      	add	r0, sp, #16
 8010e1c:	f003 fad8 	bl	80143d0 <uxr_serialize_CREATE_Payload>
 8010e20:	4620      	mov	r0, r4
 8010e22:	b00c      	add	sp, #48	@ 0x30
 8010e24:	bd10      	pop	{r4, pc}
 8010e26:	bf00      	nop

08010e28 <uxr_buffer_create_participant_bin>:
 8010e28:	b570      	push	{r4, r5, r6, lr}
 8010e2a:	f5ad 7d16 	sub.w	sp, sp, #600	@ 0x258
 8010e2e:	ac11      	add	r4, sp, #68	@ 0x44
 8010e30:	f8ad 3254 	strh.w	r3, [sp, #596]	@ 0x254
 8010e34:	2303      	movs	r3, #3
 8010e36:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8010e3a:	7223      	strb	r3, [r4, #8]
 8010e3c:	9b9a      	ldr	r3, [sp, #616]	@ 0x268
 8010e3e:	f89d 626c 	ldrb.w	r6, [sp, #620]	@ 0x26c
 8010e42:	2201      	movs	r2, #1
 8010e44:	2100      	movs	r1, #0
 8010e46:	4605      	mov	r5, r0
 8010e48:	7122      	strb	r2, [r4, #4]
 8010e4a:	f88d 1014 	strb.w	r1, [sp, #20]
 8010e4e:	b1cb      	cbz	r3, 8010e84 <uxr_buffer_create_participant_bin+0x5c>
 8010e50:	f88d 201c 	strb.w	r2, [sp, #28]
 8010e54:	9308      	str	r3, [sp, #32]
 8010e56:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010e5a:	a915      	add	r1, sp, #84	@ 0x54
 8010e5c:	a809      	add	r0, sp, #36	@ 0x24
 8010e5e:	f7fc ff67 	bl	800dd30 <ucdr_init_buffer>
 8010e62:	a905      	add	r1, sp, #20
 8010e64:	a809      	add	r0, sp, #36	@ 0x24
 8010e66:	f002 fe95 	bl	8013b94 <uxr_serialize_OBJK_DomainParticipant_Binary>
 8010e6a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010e6c:	9600      	str	r6, [sp, #0]
 8010e6e:	9401      	str	r4, [sp, #4]
 8010e70:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8010e74:	60e3      	str	r3, [r4, #12]
 8010e76:	4628      	mov	r0, r5
 8010e78:	b29b      	uxth	r3, r3
 8010e7a:	f7ff ffa9 	bl	8010dd0 <uxr_common_create_entity>
 8010e7e:	f50d 7d16 	add.w	sp, sp, #600	@ 0x258
 8010e82:	bd70      	pop	{r4, r5, r6, pc}
 8010e84:	f88d 301c 	strb.w	r3, [sp, #28]
 8010e88:	e7e5      	b.n	8010e56 <uxr_buffer_create_participant_bin+0x2e>
 8010e8a:	bf00      	nop

08010e8c <uxr_buffer_create_topic_bin>:
 8010e8c:	b570      	push	{r4, r5, r6, lr}
 8010e8e:	f5ad 7d18 	sub.w	sp, sp, #608	@ 0x260
 8010e92:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8010e96:	9105      	str	r1, [sp, #20]
 8010e98:	4605      	mov	r5, r0
 8010e9a:	a997      	add	r1, sp, #604	@ 0x25c
 8010e9c:	4618      	mov	r0, r3
 8010e9e:	2302      	movs	r3, #2
 8010ea0:	f89d 6278 	ldrb.w	r6, [sp, #632]	@ 0x278
 8010ea4:	f88d 3050 	strb.w	r3, [sp, #80]	@ 0x50
 8010ea8:	f000 fa58 	bl	801135c <uxr_object_id_to_raw>
 8010eac:	9b9c      	ldr	r3, [sp, #624]	@ 0x270
 8010eae:	9306      	str	r3, [sp, #24]
 8010eb0:	9b9d      	ldr	r3, [sp, #628]	@ 0x274
 8010eb2:	930a      	str	r3, [sp, #40]	@ 0x28
 8010eb4:	2303      	movs	r3, #3
 8010eb6:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 8010eba:	2301      	movs	r3, #1
 8010ebc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010ec0:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 8010ec4:	a917      	add	r1, sp, #92	@ 0x5c
 8010ec6:	2300      	movs	r3, #0
 8010ec8:	a80b      	add	r0, sp, #44	@ 0x2c
 8010eca:	f88d 301c 	strb.w	r3, [sp, #28]
 8010ece:	f7fc ff2f 	bl	800dd30 <ucdr_init_buffer>
 8010ed2:	a906      	add	r1, sp, #24
 8010ed4:	a80b      	add	r0, sp, #44	@ 0x2c
 8010ed6:	f002 fe7f 	bl	8013bd8 <uxr_serialize_OBJK_Topic_Binary>
 8010eda:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010edc:	9316      	str	r3, [sp, #88]	@ 0x58
 8010ede:	ac13      	add	r4, sp, #76	@ 0x4c
 8010ee0:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8010ee4:	9600      	str	r6, [sp, #0]
 8010ee6:	9401      	str	r4, [sp, #4]
 8010ee8:	b29b      	uxth	r3, r3
 8010eea:	4628      	mov	r0, r5
 8010eec:	f7ff ff70 	bl	8010dd0 <uxr_common_create_entity>
 8010ef0:	f50d 7d18 	add.w	sp, sp, #608	@ 0x260
 8010ef4:	bd70      	pop	{r4, r5, r6, pc}
 8010ef6:	bf00      	nop

08010ef8 <uxr_buffer_create_publisher_bin>:
 8010ef8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010efa:	f2ad 4d8c 	subw	sp, sp, #1164	@ 0x48c
 8010efe:	4605      	mov	r5, r0
 8010f00:	9105      	str	r1, [sp, #20]
 8010f02:	4618      	mov	r0, r3
 8010f04:	2603      	movs	r6, #3
 8010f06:	a992      	add	r1, sp, #584	@ 0x248
 8010f08:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8010f0c:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	@ 0x4a0
 8010f10:	f88d 603c 	strb.w	r6, [sp, #60]	@ 0x3c
 8010f14:	f000 fa22 	bl	801135c <uxr_object_id_to_raw>
 8010f18:	2300      	movs	r3, #0
 8010f1a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010f1e:	a912      	add	r1, sp, #72	@ 0x48
 8010f20:	a806      	add	r0, sp, #24
 8010f22:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 8010f26:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 8010f2a:	f88d 6040 	strb.w	r6, [sp, #64]	@ 0x40
 8010f2e:	f7fc feff 	bl	800dd30 <ucdr_init_buffer>
 8010f32:	a993      	add	r1, sp, #588	@ 0x24c
 8010f34:	a806      	add	r0, sp, #24
 8010f36:	f002 ff03 	bl	8013d40 <uxr_serialize_OBJK_Publisher_Binary>
 8010f3a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010f3c:	9311      	str	r3, [sp, #68]	@ 0x44
 8010f3e:	ac0e      	add	r4, sp, #56	@ 0x38
 8010f40:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8010f44:	9700      	str	r7, [sp, #0]
 8010f46:	9401      	str	r4, [sp, #4]
 8010f48:	b29b      	uxth	r3, r3
 8010f4a:	4628      	mov	r0, r5
 8010f4c:	f7ff ff40 	bl	8010dd0 <uxr_common_create_entity>
 8010f50:	f20d 4d8c 	addw	sp, sp, #1164	@ 0x48c
 8010f54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010f56:	bf00      	nop

08010f58 <uxr_buffer_create_subscriber_bin>:
 8010f58:	b570      	push	{r4, r5, r6, lr}
 8010f5a:	f5ad 6d91 	sub.w	sp, sp, #1160	@ 0x488
 8010f5e:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8010f62:	9105      	str	r1, [sp, #20]
 8010f64:	4605      	mov	r5, r0
 8010f66:	a992      	add	r1, sp, #584	@ 0x248
 8010f68:	4618      	mov	r0, r3
 8010f6a:	2304      	movs	r3, #4
 8010f6c:	f89d 6498 	ldrb.w	r6, [sp, #1176]	@ 0x498
 8010f70:	f88d 303c 	strb.w	r3, [sp, #60]	@ 0x3c
 8010f74:	f000 f9f2 	bl	801135c <uxr_object_id_to_raw>
 8010f78:	2300      	movs	r3, #0
 8010f7a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010f7e:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 8010f82:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 8010f86:	a912      	add	r1, sp, #72	@ 0x48
 8010f88:	2303      	movs	r3, #3
 8010f8a:	a806      	add	r0, sp, #24
 8010f8c:	f88d 3040 	strb.w	r3, [sp, #64]	@ 0x40
 8010f90:	f7fc fece 	bl	800dd30 <ucdr_init_buffer>
 8010f94:	a993      	add	r1, sp, #588	@ 0x24c
 8010f96:	a806      	add	r0, sp, #24
 8010f98:	f002 ff82 	bl	8013ea0 <uxr_serialize_OBJK_Subscriber_Binary>
 8010f9c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010f9e:	9311      	str	r3, [sp, #68]	@ 0x44
 8010fa0:	ac0e      	add	r4, sp, #56	@ 0x38
 8010fa2:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8010fa6:	9600      	str	r6, [sp, #0]
 8010fa8:	9401      	str	r4, [sp, #4]
 8010faa:	b29b      	uxth	r3, r3
 8010fac:	4628      	mov	r0, r5
 8010fae:	f7ff ff0f 	bl	8010dd0 <uxr_common_create_entity>
 8010fb2:	f50d 6d91 	add.w	sp, sp, #1160	@ 0x488
 8010fb6:	bd70      	pop	{r4, r5, r6, pc}

08010fb8 <uxr_buffer_create_datawriter_bin>:
 8010fb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010fbc:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 8010fc0:	ac1d      	add	r4, sp, #116	@ 0x74
 8010fc2:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8010fc6:	f8bd 52a8 	ldrh.w	r5, [sp, #680]	@ 0x2a8
 8010fca:	9105      	str	r1, [sp, #20]
 8010fcc:	4606      	mov	r6, r0
 8010fce:	a9a1      	add	r1, sp, #644	@ 0x284
 8010fd0:	4618      	mov	r0, r3
 8010fd2:	2305      	movs	r3, #5
 8010fd4:	7123      	strb	r3, [r4, #4]
 8010fd6:	f89d 82ac 	ldrb.w	r8, [sp, #684]	@ 0x2ac
 8010fda:	2703      	movs	r7, #3
 8010fdc:	f000 f9be 	bl	801135c <uxr_object_id_to_raw>
 8010fe0:	98a8      	ldr	r0, [sp, #672]	@ 0x2a0
 8010fe2:	7227      	strb	r7, [r4, #8]
 8010fe4:	a90e      	add	r1, sp, #56	@ 0x38
 8010fe6:	f000 f9b9 	bl	801135c <uxr_object_id_to_raw>
 8010fea:	2300      	movs	r3, #0
 8010fec:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 8010ff0:	f89d 22a5 	ldrb.w	r2, [sp, #677]	@ 0x2a5
 8010ff4:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 8010ff8:	3d00      	subs	r5, #0
 8010ffa:	bf18      	it	ne
 8010ffc:	2501      	movne	r5, #1
 8010ffe:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 8011002:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 8011006:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 801100a:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 801100e:	2301      	movs	r3, #1
 8011010:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 8011014:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 8011018:	bb8a      	cbnz	r2, 801107e <uxr_buffer_create_datawriter_bin+0xc6>
 801101a:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 801101e:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 8011022:	f04f 0c13 	mov.w	ip, #19
 8011026:	250b      	movs	r5, #11
 8011028:	2221      	movs	r2, #33	@ 0x21
 801102a:	2111      	movs	r1, #17
 801102c:	2009      	movs	r0, #9
 801102e:	f89d 32a6 	ldrb.w	r3, [sp, #678]	@ 0x2a6
 8011032:	b923      	cbnz	r3, 801103e <uxr_buffer_create_datawriter_bin+0x86>
 8011034:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 8011038:	4672      	mov	r2, lr
 801103a:	4661      	mov	r1, ip
 801103c:	4628      	mov	r0, r5
 801103e:	f89d 32a4 	ldrb.w	r3, [sp, #676]	@ 0x2a4
 8011042:	2b01      	cmp	r3, #1
 8011044:	d025      	beq.n	8011092 <uxr_buffer_create_datawriter_bin+0xda>
 8011046:	2b03      	cmp	r3, #3
 8011048:	d029      	beq.n	801109e <uxr_buffer_create_datawriter_bin+0xe6>
 801104a:	b32b      	cbz	r3, 8011098 <uxr_buffer_create_datawriter_bin+0xe0>
 801104c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011050:	a921      	add	r1, sp, #132	@ 0x84
 8011052:	a806      	add	r0, sp, #24
 8011054:	f7fc fe6c 	bl	800dd30 <ucdr_init_buffer>
 8011058:	a90e      	add	r1, sp, #56	@ 0x38
 801105a:	a806      	add	r0, sp, #24
 801105c:	f002 ffd2 	bl	8014004 <uxr_serialize_OBJK_DataWriter_Binary>
 8011060:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011062:	f8cd 8000 	str.w	r8, [sp]
 8011066:	9401      	str	r4, [sp, #4]
 8011068:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 801106c:	60e3      	str	r3, [r4, #12]
 801106e:	4630      	mov	r0, r6
 8011070:	b29b      	uxth	r3, r3
 8011072:	f7ff fead 	bl	8010dd0 <uxr_common_create_entity>
 8011076:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 801107a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801107e:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 8011082:	f04f 0c12 	mov.w	ip, #18
 8011086:	250a      	movs	r5, #10
 8011088:	2220      	movs	r2, #32
 801108a:	2110      	movs	r1, #16
 801108c:	2008      	movs	r0, #8
 801108e:	2702      	movs	r7, #2
 8011090:	e7cd      	b.n	801102e <uxr_buffer_create_datawriter_bin+0x76>
 8011092:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 8011096:	e7d9      	b.n	801104c <uxr_buffer_create_datawriter_bin+0x94>
 8011098:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 801109c:	e7d6      	b.n	801104c <uxr_buffer_create_datawriter_bin+0x94>
 801109e:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 80110a2:	e7d3      	b.n	801104c <uxr_buffer_create_datawriter_bin+0x94>

080110a4 <uxr_buffer_create_datareader_bin>:
 80110a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80110a8:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 80110ac:	ac1f      	add	r4, sp, #124	@ 0x7c
 80110ae:	e9cd 3203 	strd	r3, r2, [sp, #12]
 80110b2:	f8bd 52b0 	ldrh.w	r5, [sp, #688]	@ 0x2b0
 80110b6:	9105      	str	r1, [sp, #20]
 80110b8:	4606      	mov	r6, r0
 80110ba:	a9a3      	add	r1, sp, #652	@ 0x28c
 80110bc:	4618      	mov	r0, r3
 80110be:	2306      	movs	r3, #6
 80110c0:	7123      	strb	r3, [r4, #4]
 80110c2:	f89d 82b4 	ldrb.w	r8, [sp, #692]	@ 0x2b4
 80110c6:	2703      	movs	r7, #3
 80110c8:	f000 f948 	bl	801135c <uxr_object_id_to_raw>
 80110cc:	98aa      	ldr	r0, [sp, #680]	@ 0x2a8
 80110ce:	7227      	strb	r7, [r4, #8]
 80110d0:	a90e      	add	r1, sp, #56	@ 0x38
 80110d2:	f000 f943 	bl	801135c <uxr_object_id_to_raw>
 80110d6:	2300      	movs	r3, #0
 80110d8:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 80110dc:	f89d 22ad 	ldrb.w	r2, [sp, #685]	@ 0x2ad
 80110e0:	f88d 3070 	strb.w	r3, [sp, #112]	@ 0x70
 80110e4:	3d00      	subs	r5, #0
 80110e6:	bf18      	it	ne
 80110e8:	2501      	movne	r5, #1
 80110ea:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 80110ee:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 80110f2:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 80110f6:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 80110fa:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 80110fe:	2301      	movs	r3, #1
 8011100:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 8011104:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 8011108:	bb8a      	cbnz	r2, 801116e <uxr_buffer_create_datareader_bin+0xca>
 801110a:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 801110e:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 8011112:	f04f 0c13 	mov.w	ip, #19
 8011116:	250b      	movs	r5, #11
 8011118:	2221      	movs	r2, #33	@ 0x21
 801111a:	2111      	movs	r1, #17
 801111c:	2009      	movs	r0, #9
 801111e:	f89d 32ae 	ldrb.w	r3, [sp, #686]	@ 0x2ae
 8011122:	b923      	cbnz	r3, 801112e <uxr_buffer_create_datareader_bin+0x8a>
 8011124:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 8011128:	4672      	mov	r2, lr
 801112a:	4661      	mov	r1, ip
 801112c:	4628      	mov	r0, r5
 801112e:	f89d 32ac 	ldrb.w	r3, [sp, #684]	@ 0x2ac
 8011132:	2b01      	cmp	r3, #1
 8011134:	d025      	beq.n	8011182 <uxr_buffer_create_datareader_bin+0xde>
 8011136:	2b03      	cmp	r3, #3
 8011138:	d029      	beq.n	801118e <uxr_buffer_create_datareader_bin+0xea>
 801113a:	b32b      	cbz	r3, 8011188 <uxr_buffer_create_datareader_bin+0xe4>
 801113c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011140:	a923      	add	r1, sp, #140	@ 0x8c
 8011142:	a806      	add	r0, sp, #24
 8011144:	f7fc fdf4 	bl	800dd30 <ucdr_init_buffer>
 8011148:	a90e      	add	r1, sp, #56	@ 0x38
 801114a:	a806      	add	r0, sp, #24
 801114c:	f002 ff1e 	bl	8013f8c <uxr_serialize_OBJK_DataReader_Binary>
 8011150:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011152:	f8cd 8000 	str.w	r8, [sp]
 8011156:	9401      	str	r4, [sp, #4]
 8011158:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 801115c:	60e3      	str	r3, [r4, #12]
 801115e:	4630      	mov	r0, r6
 8011160:	b29b      	uxth	r3, r3
 8011162:	f7ff fe35 	bl	8010dd0 <uxr_common_create_entity>
 8011166:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 801116a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801116e:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 8011172:	f04f 0c12 	mov.w	ip, #18
 8011176:	250a      	movs	r5, #10
 8011178:	2220      	movs	r2, #32
 801117a:	2110      	movs	r1, #16
 801117c:	2008      	movs	r0, #8
 801117e:	2702      	movs	r7, #2
 8011180:	e7cd      	b.n	801111e <uxr_buffer_create_datareader_bin+0x7a>
 8011182:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 8011186:	e7d9      	b.n	801113c <uxr_buffer_create_datareader_bin+0x98>
 8011188:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 801118c:	e7d6      	b.n	801113c <uxr_buffer_create_datareader_bin+0x98>
 801118e:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 8011192:	e7d3      	b.n	801113c <uxr_buffer_create_datareader_bin+0x98>

08011194 <get_custom_error>:
 8011194:	4b01      	ldr	r3, [pc, #4]	@ (801119c <get_custom_error+0x8>)
 8011196:	7818      	ldrb	r0, [r3, #0]
 8011198:	4770      	bx	lr
 801119a:	bf00      	nop
 801119c:	2000b374 	.word	0x2000b374

080111a0 <recv_custom_msg>:
 80111a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80111a4:	4693      	mov	fp, r2
 80111a6:	b089      	sub	sp, #36	@ 0x24
 80111a8:	f890 2200 	ldrb.w	r2, [r0, #512]	@ 0x200
 80111ac:	9305      	str	r3, [sp, #20]
 80111ae:	468a      	mov	sl, r1
 80111b0:	2100      	movs	r1, #0
 80111b2:	4604      	mov	r4, r0
 80111b4:	f88d 101e 	strb.w	r1, [sp, #30]
 80111b8:	b322      	cbz	r2, 8011204 <recv_custom_msg+0x64>
 80111ba:	f200 2902 	addw	r9, r0, #514	@ 0x202
 80111be:	f10d 081f 	add.w	r8, sp, #31
 80111c2:	af05      	add	r7, sp, #20
 80111c4:	f10d 061e 	add.w	r6, sp, #30
 80111c8:	f44f 7500 	mov.w	r5, #512	@ 0x200
 80111cc:	e002      	b.n	80111d4 <recv_custom_msg+0x34>
 80111ce:	9b05      	ldr	r3, [sp, #20]
 80111d0:	2b00      	cmp	r3, #0
 80111d2:	dd0f      	ble.n	80111f4 <recv_custom_msg+0x54>
 80111d4:	f8d4 1274 	ldr.w	r1, [r4, #628]	@ 0x274
 80111d8:	4623      	mov	r3, r4
 80111da:	e9cd 7802 	strd	r7, r8, [sp, #8]
 80111de:	e9cd 5600 	strd	r5, r6, [sp]
 80111e2:	4622      	mov	r2, r4
 80111e4:	4648      	mov	r0, r9
 80111e6:	f001 fcdd 	bl	8012ba4 <uxr_read_framed_msg>
 80111ea:	2800      	cmp	r0, #0
 80111ec:	d0ef      	beq.n	80111ce <recv_custom_msg+0x2e>
 80111ee:	f89d 301e 	ldrb.w	r3, [sp, #30]
 80111f2:	b1b3      	cbz	r3, 8011222 <recv_custom_msg+0x82>
 80111f4:	4b0f      	ldr	r3, [pc, #60]	@ (8011234 <recv_custom_msg+0x94>)
 80111f6:	f89d 201f 	ldrb.w	r2, [sp, #31]
 80111fa:	701a      	strb	r2, [r3, #0]
 80111fc:	2000      	movs	r0, #0
 80111fe:	b009      	add	sp, #36	@ 0x24
 8011200:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011204:	f10d 021f 	add.w	r2, sp, #31
 8011208:	9200      	str	r2, [sp, #0]
 801120a:	f8d0 5274 	ldr.w	r5, [r0, #628]	@ 0x274
 801120e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011212:	4601      	mov	r1, r0
 8011214:	47a8      	blx	r5
 8011216:	2800      	cmp	r0, #0
 8011218:	d0ec      	beq.n	80111f4 <recv_custom_msg+0x54>
 801121a:	f89d 301e 	ldrb.w	r3, [sp, #30]
 801121e:	2b00      	cmp	r3, #0
 8011220:	d1e8      	bne.n	80111f4 <recv_custom_msg+0x54>
 8011222:	f8cb 0000 	str.w	r0, [fp]
 8011226:	2001      	movs	r0, #1
 8011228:	f8ca 4000 	str.w	r4, [sl]
 801122c:	b009      	add	sp, #36	@ 0x24
 801122e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011232:	bf00      	nop
 8011234:	2000b374 	.word	0x2000b374

08011238 <send_custom_msg>:
 8011238:	b530      	push	{r4, r5, lr}
 801123a:	f890 4200 	ldrb.w	r4, [r0, #512]	@ 0x200
 801123e:	b087      	sub	sp, #28
 8011240:	4615      	mov	r5, r2
 8011242:	b974      	cbnz	r4, 8011262 <send_custom_msg+0x2a>
 8011244:	f8d0 4270 	ldr.w	r4, [r0, #624]	@ 0x270
 8011248:	f10d 0317 	add.w	r3, sp, #23
 801124c:	47a0      	blx	r4
 801124e:	b108      	cbz	r0, 8011254 <send_custom_msg+0x1c>
 8011250:	42a8      	cmp	r0, r5
 8011252:	d015      	beq.n	8011280 <send_custom_msg+0x48>
 8011254:	4b0c      	ldr	r3, [pc, #48]	@ (8011288 <send_custom_msg+0x50>)
 8011256:	f89d 2017 	ldrb.w	r2, [sp, #23]
 801125a:	701a      	strb	r2, [r3, #0]
 801125c:	2000      	movs	r0, #0
 801125e:	b007      	add	sp, #28
 8011260:	bd30      	pop	{r4, r5, pc}
 8011262:	460b      	mov	r3, r1
 8011264:	2200      	movs	r2, #0
 8011266:	f10d 0117 	add.w	r1, sp, #23
 801126a:	e9cd 2101 	strd	r2, r1, [sp, #4]
 801126e:	4602      	mov	r2, r0
 8011270:	f8d0 1270 	ldr.w	r1, [r0, #624]	@ 0x270
 8011274:	9500      	str	r5, [sp, #0]
 8011276:	f200 2002 	addw	r0, r0, #514	@ 0x202
 801127a:	f001 fa9b 	bl	80127b4 <uxr_write_framed_msg>
 801127e:	e7e6      	b.n	801124e <send_custom_msg+0x16>
 8011280:	2001      	movs	r0, #1
 8011282:	b007      	add	sp, #28
 8011284:	bd30      	pop	{r4, r5, pc}
 8011286:	bf00      	nop
 8011288:	2000b374 	.word	0x2000b374

0801128c <uxr_set_custom_transport_callbacks>:
 801128c:	b410      	push	{r4}
 801128e:	9c01      	ldr	r4, [sp, #4]
 8011290:	f8c0 4270 	str.w	r4, [r0, #624]	@ 0x270
 8011294:	e9c0 239a 	strd	r2, r3, [r0, #616]	@ 0x268
 8011298:	9b02      	ldr	r3, [sp, #8]
 801129a:	f880 1200 	strb.w	r1, [r0, #512]	@ 0x200
 801129e:	f85d 4b04 	ldr.w	r4, [sp], #4
 80112a2:	f8c0 3274 	str.w	r3, [r0, #628]	@ 0x274
 80112a6:	4770      	bx	lr

080112a8 <uxr_init_custom_transport>:
 80112a8:	b538      	push	{r3, r4, r5, lr}
 80112aa:	f8d0 3268 	ldr.w	r3, [r0, #616]	@ 0x268
 80112ae:	b303      	cbz	r3, 80112f2 <uxr_init_custom_transport+0x4a>
 80112b0:	f8d0 226c 	ldr.w	r2, [r0, #620]	@ 0x26c
 80112b4:	4604      	mov	r4, r0
 80112b6:	b1e2      	cbz	r2, 80112f2 <uxr_init_custom_transport+0x4a>
 80112b8:	f8d0 2270 	ldr.w	r2, [r0, #624]	@ 0x270
 80112bc:	b1ca      	cbz	r2, 80112f2 <uxr_init_custom_transport+0x4a>
 80112be:	f8d0 2274 	ldr.w	r2, [r0, #628]	@ 0x274
 80112c2:	b1b2      	cbz	r2, 80112f2 <uxr_init_custom_transport+0x4a>
 80112c4:	f8c0 128c 	str.w	r1, [r0, #652]	@ 0x28c
 80112c8:	4798      	blx	r3
 80112ca:	4605      	mov	r5, r0
 80112cc:	b188      	cbz	r0, 80112f2 <uxr_init_custom_transport+0x4a>
 80112ce:	f894 3200 	ldrb.w	r3, [r4, #512]	@ 0x200
 80112d2:	b98b      	cbnz	r3, 80112f8 <uxr_init_custom_transport+0x50>
 80112d4:	490b      	ldr	r1, [pc, #44]	@ (8011304 <uxr_init_custom_transport+0x5c>)
 80112d6:	4b0c      	ldr	r3, [pc, #48]	@ (8011308 <uxr_init_custom_transport+0x60>)
 80112d8:	4a0c      	ldr	r2, [pc, #48]	@ (801130c <uxr_init_custom_transport+0x64>)
 80112da:	f8c4 3280 	str.w	r3, [r4, #640]	@ 0x280
 80112de:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80112e2:	e9c4 419e 	strd	r4, r1, [r4, #632]	@ 0x278
 80112e6:	f8c4 2284 	str.w	r2, [r4, #644]	@ 0x284
 80112ea:	f8a4 3288 	strh.w	r3, [r4, #648]	@ 0x288
 80112ee:	4628      	mov	r0, r5
 80112f0:	bd38      	pop	{r3, r4, r5, pc}
 80112f2:	2500      	movs	r5, #0
 80112f4:	4628      	mov	r0, r5
 80112f6:	bd38      	pop	{r3, r4, r5, pc}
 80112f8:	2100      	movs	r1, #0
 80112fa:	f204 2002 	addw	r0, r4, #514	@ 0x202
 80112fe:	f001 fa53 	bl	80127a8 <uxr_init_framing_io>
 8011302:	e7e7      	b.n	80112d4 <uxr_init_custom_transport+0x2c>
 8011304:	08011239 	.word	0x08011239
 8011308:	080111a1 	.word	0x080111a1
 801130c:	08011195 	.word	0x08011195

08011310 <uxr_close_custom_transport>:
 8011310:	f8d0 326c 	ldr.w	r3, [r0, #620]	@ 0x26c
 8011314:	4718      	bx	r3
 8011316:	bf00      	nop

08011318 <uxr_object_id>:
 8011318:	b082      	sub	sp, #8
 801131a:	2300      	movs	r3, #0
 801131c:	f88d 1006 	strb.w	r1, [sp, #6]
 8011320:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8011324:	f360 030f 	bfi	r3, r0, #0, #16
 8011328:	f362 431f 	bfi	r3, r2, #16, #16
 801132c:	4618      	mov	r0, r3
 801132e:	b002      	add	sp, #8
 8011330:	4770      	bx	lr
 8011332:	bf00      	nop

08011334 <uxr_object_id_from_raw>:
 8011334:	7843      	ldrb	r3, [r0, #1]
 8011336:	7801      	ldrb	r1, [r0, #0]
 8011338:	b082      	sub	sp, #8
 801133a:	f003 020f 	and.w	r2, r3, #15
 801133e:	f88d 2006 	strb.w	r2, [sp, #6]
 8011342:	091b      	lsrs	r3, r3, #4
 8011344:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8011348:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 801134c:	2000      	movs	r0, #0
 801134e:	f363 000f 	bfi	r0, r3, #0, #16
 8011352:	f362 401f 	bfi	r0, r2, #16, #16
 8011356:	b002      	add	sp, #8
 8011358:	4770      	bx	lr
 801135a:	bf00      	nop

0801135c <uxr_object_id_to_raw>:
 801135c:	4602      	mov	r2, r0
 801135e:	f3c0 4303 	ubfx	r3, r0, #16, #4
 8011362:	b082      	sub	sp, #8
 8011364:	f3c2 1c0b 	ubfx	ip, r2, #4, #12
 8011368:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 801136c:	f881 c000 	strb.w	ip, [r1]
 8011370:	7048      	strb	r0, [r1, #1]
 8011372:	b002      	add	sp, #8
 8011374:	4770      	bx	lr
 8011376:	bf00      	nop

08011378 <uxr_buffer_request_data>:
 8011378:	b530      	push	{r4, r5, lr}
 801137a:	b095      	sub	sp, #84	@ 0x54
 801137c:	e9cd 2104 	strd	r2, r1, [sp, #16]
 8011380:	9d18      	ldr	r5, [sp, #96]	@ 0x60
 8011382:	9303      	str	r3, [sp, #12]
 8011384:	2200      	movs	r2, #0
 8011386:	2d00      	cmp	r5, #0
 8011388:	bf14      	ite	ne
 801138a:	2101      	movne	r1, #1
 801138c:	4611      	moveq	r1, r2
 801138e:	4604      	mov	r4, r0
 8011390:	f88d 301c 	strb.w	r3, [sp, #28]
 8011394:	f88d 201d 	strb.w	r2, [sp, #29]
 8011398:	f88d 201e 	strb.w	r2, [sp, #30]
 801139c:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 80113a0:	d021      	beq.n	80113e6 <uxr_buffer_request_data+0x6e>
 80113a2:	682a      	ldr	r2, [r5, #0]
 80113a4:	686b      	ldr	r3, [r5, #4]
 80113a6:	f8cd 2026 	str.w	r2, [sp, #38]	@ 0x26
 80113aa:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 80113ae:	2210      	movs	r2, #16
 80113b0:	2308      	movs	r3, #8
 80113b2:	2100      	movs	r1, #0
 80113b4:	e9cd 3100 	strd	r3, r1, [sp]
 80113b8:	4620      	mov	r0, r4
 80113ba:	9905      	ldr	r1, [sp, #20]
 80113bc:	ab0c      	add	r3, sp, #48	@ 0x30
 80113be:	f001 f88d 	bl	80124dc <uxr_prepare_stream_to_write_submessage>
 80113c2:	b918      	cbnz	r0, 80113cc <uxr_buffer_request_data+0x54>
 80113c4:	4604      	mov	r4, r0
 80113c6:	4620      	mov	r0, r4
 80113c8:	b015      	add	sp, #84	@ 0x54
 80113ca:	bd30      	pop	{r4, r5, pc}
 80113cc:	9904      	ldr	r1, [sp, #16]
 80113ce:	aa06      	add	r2, sp, #24
 80113d0:	4620      	mov	r0, r4
 80113d2:	f001 f9b9 	bl	8012748 <uxr_init_base_object_request>
 80113d6:	a906      	add	r1, sp, #24
 80113d8:	4604      	mov	r4, r0
 80113da:	a80c      	add	r0, sp, #48	@ 0x30
 80113dc:	f003 f946 	bl	801466c <uxr_serialize_READ_DATA_Payload>
 80113e0:	4620      	mov	r0, r4
 80113e2:	b015      	add	sp, #84	@ 0x54
 80113e4:	bd30      	pop	{r4, r5, pc}
 80113e6:	2208      	movs	r2, #8
 80113e8:	e7e2      	b.n	80113b0 <uxr_buffer_request_data+0x38>
 80113ea:	bf00      	nop

080113ec <uxr_buffer_cancel_data>:
 80113ec:	b510      	push	{r4, lr}
 80113ee:	b094      	sub	sp, #80	@ 0x50
 80113f0:	2300      	movs	r3, #0
 80113f2:	9202      	str	r2, [sp, #8]
 80113f4:	9205      	str	r2, [sp, #20]
 80113f6:	9301      	str	r3, [sp, #4]
 80113f8:	2201      	movs	r2, #1
 80113fa:	f8ad 301c 	strh.w	r3, [sp, #28]
 80113fe:	f88d 301e 	strb.w	r3, [sp, #30]
 8011402:	f8cd 3026 	str.w	r3, [sp, #38]	@ 0x26
 8011406:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 801140a:	2308      	movs	r3, #8
 801140c:	f88d 2024 	strb.w	r2, [sp, #36]	@ 0x24
 8011410:	9300      	str	r3, [sp, #0]
 8011412:	2210      	movs	r2, #16
 8011414:	ab0c      	add	r3, sp, #48	@ 0x30
 8011416:	4604      	mov	r4, r0
 8011418:	9103      	str	r1, [sp, #12]
 801141a:	f001 f85f 	bl	80124dc <uxr_prepare_stream_to_write_submessage>
 801141e:	b918      	cbnz	r0, 8011428 <uxr_buffer_cancel_data+0x3c>
 8011420:	4604      	mov	r4, r0
 8011422:	4620      	mov	r0, r4
 8011424:	b014      	add	sp, #80	@ 0x50
 8011426:	bd10      	pop	{r4, pc}
 8011428:	9905      	ldr	r1, [sp, #20]
 801142a:	aa06      	add	r2, sp, #24
 801142c:	4620      	mov	r0, r4
 801142e:	f001 f98b 	bl	8012748 <uxr_init_base_object_request>
 8011432:	a906      	add	r1, sp, #24
 8011434:	4604      	mov	r4, r0
 8011436:	a80c      	add	r0, sp, #48	@ 0x30
 8011438:	f003 f918 	bl	801466c <uxr_serialize_READ_DATA_Payload>
 801143c:	4620      	mov	r0, r4
 801143e:	b014      	add	sp, #80	@ 0x50
 8011440:	bd10      	pop	{r4, pc}
 8011442:	bf00      	nop

08011444 <read_submessage_format>:
 8011444:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011448:	b095      	sub	sp, #84	@ 0x54
 801144a:	f8bd 6078 	ldrh.w	r6, [sp, #120]	@ 0x78
 801144e:	b113      	cbz	r3, 8011456 <read_submessage_format+0x12>
 8011450:	b015      	add	sp, #84	@ 0x54
 8011452:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011456:	460c      	mov	r4, r1
 8011458:	4615      	mov	r5, r2
 801145a:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 801145e:	4607      	mov	r7, r0
 8011460:	981c      	ldr	r0, [sp, #112]	@ 0x70
 8011462:	9004      	str	r0, [sp, #16]
 8011464:	981d      	ldr	r0, [sp, #116]	@ 0x74
 8011466:	9005      	str	r0, [sp, #20]
 8011468:	1a52      	subs	r2, r2, r1
 801146a:	a80c      	add	r0, sp, #48	@ 0x30
 801146c:	4699      	mov	r9, r3
 801146e:	f89d 8076 	ldrb.w	r8, [sp, #118]	@ 0x76
 8011472:	f7fc fc5d 	bl	800dd30 <ucdr_init_buffer>
 8011476:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 801147a:	a80c      	add	r0, sp, #48	@ 0x30
 801147c:	f7fc fc2c 	bl	800dcd8 <ucdr_set_on_full_buffer_callback>
 8011480:	69e2      	ldr	r2, [r4, #28]
 8011482:	b19a      	cbz	r2, 80114ac <read_submessage_format+0x68>
 8011484:	f1b8 0f07 	cmp.w	r8, #7
 8011488:	f882 9014 	strb.w	r9, [r2, #20]
 801148c:	d040      	beq.n	8011510 <read_submessage_format+0xcc>
 801148e:	f1b8 0f08 	cmp.w	r8, #8
 8011492:	d02e      	beq.n	80114f2 <read_submessage_format+0xae>
 8011494:	f1b8 0f06 	cmp.w	r8, #6
 8011498:	d011      	beq.n	80114be <read_submessage_format+0x7a>
 801149a:	2301      	movs	r3, #1
 801149c:	7513      	strb	r3, [r2, #20]
 801149e:	4629      	mov	r1, r5
 80114a0:	4620      	mov	r0, r4
 80114a2:	f7fc fc95 	bl	800ddd0 <ucdr_advance_buffer>
 80114a6:	b015      	add	sp, #84	@ 0x54
 80114a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80114ac:	f1b8 0f07 	cmp.w	r8, #7
 80114b0:	d02e      	beq.n	8011510 <read_submessage_format+0xcc>
 80114b2:	f1b8 0f08 	cmp.w	r8, #8
 80114b6:	d01c      	beq.n	80114f2 <read_submessage_format+0xae>
 80114b8:	f1b8 0f06 	cmp.w	r8, #6
 80114bc:	d1ef      	bne.n	801149e <read_submessage_format+0x5a>
 80114be:	f8d7 8088 	ldr.w	r8, [r7, #136]	@ 0x88
 80114c2:	f1b8 0f00 	cmp.w	r8, #0
 80114c6:	d011      	beq.n	80114ec <read_submessage_format+0xa8>
 80114c8:	ab0c      	add	r3, sp, #48	@ 0x30
 80114ca:	e9cd 3500 	strd	r3, r5, [sp]
 80114ce:	2306      	movs	r3, #6
 80114d0:	f88d 3016 	strb.w	r3, [sp, #22]
 80114d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80114d8:	9302      	str	r3, [sp, #8]
 80114da:	4632      	mov	r2, r6
 80114dc:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 80114e0:	4638      	mov	r0, r7
 80114e2:	47c0      	blx	r8
 80114e4:	2301      	movs	r3, #1
 80114e6:	69e2      	ldr	r2, [r4, #28]
 80114e8:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 80114ec:	2a00      	cmp	r2, #0
 80114ee:	d1d4      	bne.n	801149a <read_submessage_format+0x56>
 80114f0:	e7d5      	b.n	801149e <read_submessage_format+0x5a>
 80114f2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80114f6:	2b00      	cmp	r3, #0
 80114f8:	d0f8      	beq.n	80114ec <read_submessage_format+0xa8>
 80114fa:	a906      	add	r1, sp, #24
 80114fc:	a80c      	add	r0, sp, #48	@ 0x30
 80114fe:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 8011502:	f003 f987 	bl	8014814 <uxr_deserialize_SampleIdentity>
 8011506:	b9a0      	cbnz	r0, 8011532 <read_submessage_format+0xee>
 8011508:	69e2      	ldr	r2, [r4, #28]
 801150a:	2a00      	cmp	r2, #0
 801150c:	d1c5      	bne.n	801149a <read_submessage_format+0x56>
 801150e:	e7c6      	b.n	801149e <read_submessage_format+0x5a>
 8011510:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011514:	b13b      	cbz	r3, 8011526 <read_submessage_format+0xe2>
 8011516:	a906      	add	r1, sp, #24
 8011518:	a80c      	add	r0, sp, #48	@ 0x30
 801151a:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 801151e:	f002 fe3f 	bl	80141a0 <uxr_deserialize_BaseObjectRequest>
 8011522:	bb60      	cbnz	r0, 801157e <read_submessage_format+0x13a>
 8011524:	69e2      	ldr	r2, [r4, #28]
 8011526:	68a3      	ldr	r3, [r4, #8]
 8011528:	442b      	add	r3, r5
 801152a:	60a3      	str	r3, [r4, #8]
 801152c:	2a00      	cmp	r2, #0
 801152e:	d1b4      	bne.n	801149a <read_submessage_format+0x56>
 8011530:	e7b5      	b.n	801149e <read_submessage_format+0x5a>
 8011532:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 8011536:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8011538:	1a52      	subs	r2, r2, r1
 801153a:	eba8 0803 	sub.w	r8, r8, r3
 801153e:	a80c      	add	r0, sp, #48	@ 0x30
 8011540:	f7fc fbf6 	bl	800dd30 <ucdr_init_buffer>
 8011544:	44a8      	add	r8, r5
 8011546:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 801154a:	a80c      	add	r0, sp, #48	@ 0x30
 801154c:	f7fc fbc4 	bl	800dcd8 <ucdr_set_on_full_buffer_callback>
 8011550:	fa1f f888 	uxth.w	r8, r8
 8011554:	ab0c      	add	r3, sp, #48	@ 0x30
 8011556:	9300      	str	r3, [sp, #0]
 8011558:	f8cd 8004 	str.w	r8, [sp, #4]
 801155c:	2108      	movs	r1, #8
 801155e:	f88d 1016 	strb.w	r1, [sp, #22]
 8011562:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 8011566:	9102      	str	r1, [sp, #8]
 8011568:	ab06      	add	r3, sp, #24
 801156a:	4632      	mov	r2, r6
 801156c:	9905      	ldr	r1, [sp, #20]
 801156e:	f8d7 60a4 	ldr.w	r6, [r7, #164]	@ 0xa4
 8011572:	4638      	mov	r0, r7
 8011574:	47b0      	blx	r6
 8011576:	2301      	movs	r3, #1
 8011578:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 801157c:	e7c4      	b.n	8011508 <read_submessage_format+0xc4>
 801157e:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 8011582:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8011584:	1a52      	subs	r2, r2, r1
 8011586:	a80c      	add	r0, sp, #48	@ 0x30
 8011588:	eba8 0803 	sub.w	r8, r8, r3
 801158c:	f7fc fbd0 	bl	800dd30 <ucdr_init_buffer>
 8011590:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8011594:	a80c      	add	r0, sp, #48	@ 0x30
 8011596:	f7fc fb9f 	bl	800dcd8 <ucdr_set_on_full_buffer_callback>
 801159a:	ab0c      	add	r3, sp, #48	@ 0x30
 801159c:	9300      	str	r3, [sp, #0]
 801159e:	f89d 1018 	ldrb.w	r1, [sp, #24]
 80115a2:	f89d 3019 	ldrb.w	r3, [sp, #25]
 80115a6:	44a8      	add	r8, r5
 80115a8:	fa1f f888 	uxth.w	r8, r8
 80115ac:	f8cd 8004 	str.w	r8, [sp, #4]
 80115b0:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 80115b4:	2107      	movs	r1, #7
 80115b6:	f88d 1016 	strb.w	r1, [sp, #22]
 80115ba:	f8d7 10b0 	ldr.w	r1, [r7, #176]	@ 0xb0
 80115be:	9102      	str	r1, [sp, #8]
 80115c0:	4632      	mov	r2, r6
 80115c2:	b29b      	uxth	r3, r3
 80115c4:	f8d7 60ac 	ldr.w	r6, [r7, #172]	@ 0xac
 80115c8:	9905      	ldr	r1, [sp, #20]
 80115ca:	4638      	mov	r0, r7
 80115cc:	47b0      	blx	r6
 80115ce:	2301      	movs	r3, #1
 80115d0:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 80115d4:	e7a6      	b.n	8011524 <read_submessage_format+0xe0>
 80115d6:	bf00      	nop

080115d8 <on_get_fragmentation_info>:
 80115d8:	b500      	push	{lr}
 80115da:	b08b      	sub	sp, #44	@ 0x2c
 80115dc:	4601      	mov	r1, r0
 80115de:	2204      	movs	r2, #4
 80115e0:	a802      	add	r0, sp, #8
 80115e2:	f7fc fba5 	bl	800dd30 <ucdr_init_buffer>
 80115e6:	f10d 0305 	add.w	r3, sp, #5
 80115ea:	f10d 0206 	add.w	r2, sp, #6
 80115ee:	a901      	add	r1, sp, #4
 80115f0:	a802      	add	r0, sp, #8
 80115f2:	f001 febd 	bl	8013370 <uxr_read_submessage_header>
 80115f6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80115fa:	2b0d      	cmp	r3, #13
 80115fc:	d003      	beq.n	8011606 <on_get_fragmentation_info+0x2e>
 80115fe:	2000      	movs	r0, #0
 8011600:	b00b      	add	sp, #44	@ 0x2c
 8011602:	f85d fb04 	ldr.w	pc, [sp], #4
 8011606:	f89d 3005 	ldrb.w	r3, [sp, #5]
 801160a:	f013 0f02 	tst.w	r3, #2
 801160e:	bf14      	ite	ne
 8011610:	2002      	movne	r0, #2
 8011612:	2001      	moveq	r0, #1
 8011614:	b00b      	add	sp, #44	@ 0x2c
 8011616:	f85d fb04 	ldr.w	pc, [sp], #4
 801161a:	bf00      	nop

0801161c <read_submessage_get_info>:
 801161c:	b570      	push	{r4, r5, r6, lr}
 801161e:	2500      	movs	r5, #0
 8011620:	f5ad 7d34 	sub.w	sp, sp, #720	@ 0x2d0
 8011624:	4604      	mov	r4, r0
 8011626:	f44f 7224 	mov.w	r2, #656	@ 0x290
 801162a:	460e      	mov	r6, r1
 801162c:	a810      	add	r0, sp, #64	@ 0x40
 801162e:	4629      	mov	r1, r5
 8011630:	e9cd 5503 	strd	r5, r5, [sp, #12]
 8011634:	f009 fa92 	bl	801ab5c <memset>
 8011638:	a903      	add	r1, sp, #12
 801163a:	4630      	mov	r0, r6
 801163c:	f002 ff58 	bl	80144f0 <uxr_deserialize_GET_INFO_Payload>
 8011640:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8011644:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8011648:	4620      	mov	r0, r4
 801164a:	f001 f875 	bl	8012738 <uxr_session_header_offset>
 801164e:	462b      	mov	r3, r5
 8011650:	9000      	str	r0, [sp, #0]
 8011652:	220c      	movs	r2, #12
 8011654:	a905      	add	r1, sp, #20
 8011656:	a808      	add	r0, sp, #32
 8011658:	f7fc fb58 	bl	800dd0c <ucdr_init_buffer_origin_offset>
 801165c:	a910      	add	r1, sp, #64	@ 0x40
 801165e:	a808      	add	r0, sp, #32
 8011660:	f002 ffb8 	bl	80145d4 <uxr_serialize_INFO_Payload>
 8011664:	9b08      	ldr	r3, [sp, #32]
 8011666:	462a      	mov	r2, r5
 8011668:	4629      	mov	r1, r5
 801166a:	4620      	mov	r0, r4
 801166c:	f001 f80e 	bl	801268c <uxr_stamp_session_header>
 8011670:	a808      	add	r0, sp, #32
 8011672:	f7fc fb89 	bl	800dd88 <ucdr_buffer_length>
 8011676:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8011678:	4602      	mov	r2, r0
 801167a:	a905      	add	r1, sp, #20
 801167c:	e9d3 0400 	ldrd	r0, r4, [r3]
 8011680:	47a0      	blx	r4
 8011682:	f50d 7d34 	add.w	sp, sp, #720	@ 0x2d0
 8011686:	bd70      	pop	{r4, r5, r6, pc}

08011688 <write_submessage_acknack.isra.0>:
 8011688:	b570      	push	{r4, r5, r6, lr}
 801168a:	b092      	sub	sp, #72	@ 0x48
 801168c:	4605      	mov	r5, r0
 801168e:	460e      	mov	r6, r1
 8011690:	4614      	mov	r4, r2
 8011692:	f001 f851 	bl	8012738 <uxr_session_header_offset>
 8011696:	a905      	add	r1, sp, #20
 8011698:	9000      	str	r0, [sp, #0]
 801169a:	2300      	movs	r3, #0
 801169c:	a80a      	add	r0, sp, #40	@ 0x28
 801169e:	2211      	movs	r2, #17
 80116a0:	f7fc fb34 	bl	800dd0c <ucdr_init_buffer_origin_offset>
 80116a4:	2218      	movs	r2, #24
 80116a6:	fb02 5404 	mla	r4, r2, r4, r5
 80116aa:	2300      	movs	r3, #0
 80116ac:	2205      	movs	r2, #5
 80116ae:	3450      	adds	r4, #80	@ 0x50
 80116b0:	210a      	movs	r1, #10
 80116b2:	a80a      	add	r0, sp, #40	@ 0x28
 80116b4:	f001 fe42 	bl	801333c <uxr_buffer_submessage_header>
 80116b8:	a903      	add	r1, sp, #12
 80116ba:	4620      	mov	r0, r4
 80116bc:	f007 fd62 	bl	8019184 <uxr_compute_acknack>
 80116c0:	ba40      	rev16	r0, r0
 80116c2:	f8ad 000e 	strh.w	r0, [sp, #14]
 80116c6:	a903      	add	r1, sp, #12
 80116c8:	a80a      	add	r0, sp, #40	@ 0x28
 80116ca:	f88d 6010 	strb.w	r6, [sp, #16]
 80116ce:	f002 fff1 	bl	80146b4 <uxr_serialize_ACKNACK_Payload>
 80116d2:	2200      	movs	r2, #0
 80116d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80116d6:	4611      	mov	r1, r2
 80116d8:	4628      	mov	r0, r5
 80116da:	f000 ffd7 	bl	801268c <uxr_stamp_session_header>
 80116de:	a80a      	add	r0, sp, #40	@ 0x28
 80116e0:	f7fc fb52 	bl	800dd88 <ucdr_buffer_length>
 80116e4:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 80116e6:	4602      	mov	r2, r0
 80116e8:	a905      	add	r1, sp, #20
 80116ea:	e9d3 0400 	ldrd	r0, r4, [r3]
 80116ee:	47a0      	blx	r4
 80116f0:	b012      	add	sp, #72	@ 0x48
 80116f2:	bd70      	pop	{r4, r5, r6, pc}
 80116f4:	0000      	movs	r0, r0
	...

080116f8 <uxr_init_session>:
 80116f8:	b510      	push	{r4, lr}
 80116fa:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 8011730 <uxr_init_session+0x38>
 80116fe:	2300      	movs	r3, #0
 8011700:	e9c0 131c 	strd	r1, r3, [r0, #112]	@ 0x70
 8011704:	4604      	mov	r4, r0
 8011706:	e9c0 331e 	strd	r3, r3, [r0, #120]	@ 0x78
 801170a:	e9c0 3320 	strd	r3, r3, [r0, #128]	@ 0x80
 801170e:	e9c0 3322 	strd	r3, r3, [r0, #136]	@ 0x88
 8011712:	e9c0 3324 	strd	r3, r3, [r0, #144]	@ 0x90
 8011716:	ed80 7b26 	vstr	d7, [r0, #152]	@ 0x98
 801171a:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
 801171e:	2181      	movs	r1, #129	@ 0x81
 8011720:	f000 ff20 	bl	8012564 <uxr_init_session_info>
 8011724:	f104 0008 	add.w	r0, r4, #8
 8011728:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801172c:	f001 bd22 	b.w	8013174 <uxr_init_stream_storage>
	...

08011738 <uxr_set_status_callback>:
 8011738:	e9c0 1220 	strd	r1, r2, [r0, #128]	@ 0x80
 801173c:	4770      	bx	lr
 801173e:	bf00      	nop

08011740 <uxr_set_topic_callback>:
 8011740:	e9c0 1222 	strd	r1, r2, [r0, #136]	@ 0x88
 8011744:	4770      	bx	lr
 8011746:	bf00      	nop

08011748 <uxr_set_request_callback>:
 8011748:	e9c0 1229 	strd	r1, r2, [r0, #164]	@ 0xa4
 801174c:	4770      	bx	lr
 801174e:	bf00      	nop

08011750 <uxr_set_reply_callback>:
 8011750:	e9c0 122b 	strd	r1, r2, [r0, #172]	@ 0xac
 8011754:	4770      	bx	lr
 8011756:	bf00      	nop

08011758 <uxr_create_output_best_effort_stream>:
 8011758:	b510      	push	{r4, lr}
 801175a:	b084      	sub	sp, #16
 801175c:	e9cd 2100 	strd	r2, r1, [sp]
 8011760:	4604      	mov	r4, r0
 8011762:	f000 ffe9 	bl	8012738 <uxr_session_header_offset>
 8011766:	e9dd 2100 	ldrd	r2, r1, [sp]
 801176a:	4603      	mov	r3, r0
 801176c:	f104 0008 	add.w	r0, r4, #8
 8011770:	b004      	add	sp, #16
 8011772:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011776:	f001 bd47 	b.w	8013208 <uxr_add_output_best_effort_buffer>
 801177a:	bf00      	nop

0801177c <uxr_create_output_reliable_stream>:
 801177c:	b510      	push	{r4, lr}
 801177e:	b088      	sub	sp, #32
 8011780:	e9cd 2104 	strd	r2, r1, [sp, #16]
 8011784:	4604      	mov	r4, r0
 8011786:	9303      	str	r3, [sp, #12]
 8011788:	f000 ffd6 	bl	8012738 <uxr_session_header_offset>
 801178c:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 8011790:	9000      	str	r0, [sp, #0]
 8011792:	9905      	ldr	r1, [sp, #20]
 8011794:	f104 0008 	add.w	r0, r4, #8
 8011798:	f001 fd4a 	bl	8013230 <uxr_add_output_reliable_buffer>
 801179c:	2200      	movs	r2, #0
 801179e:	b2c3      	uxtb	r3, r0
 80117a0:	f363 0207 	bfi	r2, r3, #0, #8
 80117a4:	f3c0 2307 	ubfx	r3, r0, #8, #8
 80117a8:	f363 220f 	bfi	r2, r3, #8, #8
 80117ac:	f3c0 4307 	ubfx	r3, r0, #16, #8
 80117b0:	f363 4217 	bfi	r2, r3, #16, #8
 80117b4:	0e03      	lsrs	r3, r0, #24
 80117b6:	f363 621f 	bfi	r2, r3, #24, #8
 80117ba:	4610      	mov	r0, r2
 80117bc:	b008      	add	sp, #32
 80117be:	bd10      	pop	{r4, pc}

080117c0 <uxr_create_input_best_effort_stream>:
 80117c0:	b082      	sub	sp, #8
 80117c2:	3008      	adds	r0, #8
 80117c4:	b002      	add	sp, #8
 80117c6:	f001 bd4d 	b.w	8013264 <uxr_add_input_best_effort_buffer>
 80117ca:	bf00      	nop

080117cc <uxr_create_input_reliable_stream>:
 80117cc:	b510      	push	{r4, lr}
 80117ce:	b084      	sub	sp, #16
 80117d0:	4c0b      	ldr	r4, [pc, #44]	@ (8011800 <uxr_create_input_reliable_stream+0x34>)
 80117d2:	9400      	str	r4, [sp, #0]
 80117d4:	3008      	adds	r0, #8
 80117d6:	f001 fd5b 	bl	8013290 <uxr_add_input_reliable_buffer>
 80117da:	2200      	movs	r2, #0
 80117dc:	b2c3      	uxtb	r3, r0
 80117de:	f363 0207 	bfi	r2, r3, #0, #8
 80117e2:	f3c0 2307 	ubfx	r3, r0, #8, #8
 80117e6:	f363 220f 	bfi	r2, r3, #8, #8
 80117ea:	f3c0 4307 	ubfx	r3, r0, #16, #8
 80117ee:	f363 4217 	bfi	r2, r3, #16, #8
 80117f2:	0e03      	lsrs	r3, r0, #24
 80117f4:	f363 621f 	bfi	r2, r3, #24, #8
 80117f8:	4610      	mov	r0, r2
 80117fa:	b004      	add	sp, #16
 80117fc:	bd10      	pop	{r4, pc}
 80117fe:	bf00      	nop
 8011800:	080115d9 	.word	0x080115d9

08011804 <uxr_epoch_nanos>:
 8011804:	b510      	push	{r4, lr}
 8011806:	4604      	mov	r4, r0
 8011808:	f001 fdf8 	bl	80133fc <uxr_nanos>
 801180c:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	@ 0x98
 8011810:	1ac0      	subs	r0, r0, r3
 8011812:	eb61 0102 	sbc.w	r1, r1, r2
 8011816:	bd10      	pop	{r4, pc}

08011818 <uxr_flash_output_streams>:
 8011818:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801181c:	7e03      	ldrb	r3, [r0, #24]
 801181e:	b084      	sub	sp, #16
 8011820:	4604      	mov	r4, r0
 8011822:	2b00      	cmp	r3, #0
 8011824:	d035      	beq.n	8011892 <uxr_flash_output_streams+0x7a>
 8011826:	f04f 0900 	mov.w	r9, #0
 801182a:	4648      	mov	r0, r9
 801182c:	f10d 0802 	add.w	r8, sp, #2
 8011830:	af03      	add	r7, sp, #12
 8011832:	ae02      	add	r6, sp, #8
 8011834:	e006      	b.n	8011844 <uxr_flash_output_streams+0x2c>
 8011836:	7e23      	ldrb	r3, [r4, #24]
 8011838:	f109 0901 	add.w	r9, r9, #1
 801183c:	fa5f f089 	uxtb.w	r0, r9
 8011840:	4283      	cmp	r3, r0
 8011842:	d926      	bls.n	8011892 <uxr_flash_output_streams+0x7a>
 8011844:	2201      	movs	r2, #1
 8011846:	4611      	mov	r1, r2
 8011848:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 801184c:	f001 fc3e 	bl	80130cc <uxr_stream_id>
 8011850:	3508      	adds	r5, #8
 8011852:	4684      	mov	ip, r0
 8011854:	4643      	mov	r3, r8
 8011856:	463a      	mov	r2, r7
 8011858:	4631      	mov	r1, r6
 801185a:	4628      	mov	r0, r5
 801185c:	f8cd c004 	str.w	ip, [sp, #4]
 8011860:	f007 fd16 	bl	8019290 <uxr_prepare_best_effort_buffer_to_send>
 8011864:	2800      	cmp	r0, #0
 8011866:	d0e6      	beq.n	8011836 <uxr_flash_output_streams+0x1e>
 8011868:	9b02      	ldr	r3, [sp, #8]
 801186a:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 801186e:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8011872:	4620      	mov	r0, r4
 8011874:	f000 ff0a 	bl	801268c <uxr_stamp_session_header>
 8011878:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801187a:	9a03      	ldr	r2, [sp, #12]
 801187c:	685d      	ldr	r5, [r3, #4]
 801187e:	6818      	ldr	r0, [r3, #0]
 8011880:	9902      	ldr	r1, [sp, #8]
 8011882:	47a8      	blx	r5
 8011884:	f109 0901 	add.w	r9, r9, #1
 8011888:	7e23      	ldrb	r3, [r4, #24]
 801188a:	fa5f f089 	uxtb.w	r0, r9
 801188e:	4283      	cmp	r3, r0
 8011890:	d8d8      	bhi.n	8011844 <uxr_flash_output_streams+0x2c>
 8011892:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 8011896:	b38b      	cbz	r3, 80118fc <uxr_flash_output_streams+0xe4>
 8011898:	f04f 0900 	mov.w	r9, #0
 801189c:	f10d 0802 	add.w	r8, sp, #2
 80118a0:	af03      	add	r7, sp, #12
 80118a2:	ae02      	add	r6, sp, #8
 80118a4:	4648      	mov	r0, r9
 80118a6:	2201      	movs	r2, #1
 80118a8:	2102      	movs	r1, #2
 80118aa:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 80118ae:	f001 fc0d 	bl	80130cc <uxr_stream_id>
 80118b2:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 80118b6:	3520      	adds	r5, #32
 80118b8:	9001      	str	r0, [sp, #4]
 80118ba:	e00d      	b.n	80118d8 <uxr_flash_output_streams+0xc0>
 80118bc:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 80118c0:	f89d 1004 	ldrb.w	r1, [sp, #4]
 80118c4:	9b02      	ldr	r3, [sp, #8]
 80118c6:	f000 fee1 	bl	801268c <uxr_stamp_session_header>
 80118ca:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 80118cc:	9a03      	ldr	r2, [sp, #12]
 80118ce:	f8d3 a004 	ldr.w	sl, [r3, #4]
 80118d2:	9902      	ldr	r1, [sp, #8]
 80118d4:	6818      	ldr	r0, [r3, #0]
 80118d6:	47d0      	blx	sl
 80118d8:	4643      	mov	r3, r8
 80118da:	463a      	mov	r2, r7
 80118dc:	4631      	mov	r1, r6
 80118de:	4628      	mov	r0, r5
 80118e0:	f007 fef4 	bl	80196cc <uxr_prepare_next_reliable_buffer_to_send>
 80118e4:	4603      	mov	r3, r0
 80118e6:	4620      	mov	r0, r4
 80118e8:	2b00      	cmp	r3, #0
 80118ea:	d1e7      	bne.n	80118bc <uxr_flash_output_streams+0xa4>
 80118ec:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 80118f0:	f109 0901 	add.w	r9, r9, #1
 80118f4:	fa5f f089 	uxtb.w	r0, r9
 80118f8:	4283      	cmp	r3, r0
 80118fa:	d8d4      	bhi.n	80118a6 <uxr_flash_output_streams+0x8e>
 80118fc:	b004      	add	sp, #16
 80118fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011902:	bf00      	nop

08011904 <read_submessage_info>:
 8011904:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011908:	460d      	mov	r5, r1
 801190a:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 801190e:	4669      	mov	r1, sp
 8011910:	4607      	mov	r7, r0
 8011912:	4628      	mov	r0, r5
 8011914:	f002 fcfa 	bl	801430c <uxr_deserialize_BaseObjectReply>
 8011918:	a902      	add	r1, sp, #8
 801191a:	4604      	mov	r4, r0
 801191c:	4628      	mov	r0, r5
 801191e:	f89d 8005 	ldrb.w	r8, [sp, #5]
 8011922:	f7fa ff0b 	bl	800c73c <ucdr_deserialize_bool>
 8011926:	f89d 3008 	ldrb.w	r3, [sp, #8]
 801192a:	4004      	ands	r4, r0
 801192c:	b2e4      	uxtb	r4, r4
 801192e:	b95b      	cbnz	r3, 8011948 <read_submessage_info+0x44>
 8011930:	a987      	add	r1, sp, #540	@ 0x21c
 8011932:	4628      	mov	r0, r5
 8011934:	f7fa ff02 	bl	800c73c <ucdr_deserialize_bool>
 8011938:	f89d 321c 	ldrb.w	r3, [sp, #540]	@ 0x21c
 801193c:	4606      	mov	r6, r0
 801193e:	b94b      	cbnz	r3, 8011954 <read_submessage_info+0x50>
 8011940:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 8011944:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011948:	a903      	add	r1, sp, #12
 801194a:	4628      	mov	r0, r5
 801194c:	f002 fb86 	bl	801405c <uxr_deserialize_ObjectVariant>
 8011950:	4004      	ands	r4, r0
 8011952:	e7ed      	b.n	8011930 <read_submessage_info+0x2c>
 8011954:	a988      	add	r1, sp, #544	@ 0x220
 8011956:	4628      	mov	r0, r5
 8011958:	f7fa ff1e 	bl	800c798 <ucdr_deserialize_uint8_t>
 801195c:	4234      	tst	r4, r6
 801195e:	d0ef      	beq.n	8011940 <read_submessage_info+0x3c>
 8011960:	2800      	cmp	r0, #0
 8011962:	d0ed      	beq.n	8011940 <read_submessage_info+0x3c>
 8011964:	f89d 3220 	ldrb.w	r3, [sp, #544]	@ 0x220
 8011968:	2b0d      	cmp	r3, #13
 801196a:	d1e9      	bne.n	8011940 <read_submessage_info+0x3c>
 801196c:	a98a      	add	r1, sp, #552	@ 0x228
 801196e:	4628      	mov	r0, r5
 8011970:	f7fb fcb8 	bl	800d2e4 <ucdr_deserialize_int16_t>
 8011974:	b140      	cbz	r0, 8011988 <read_submessage_info+0x84>
 8011976:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	@ 0x228
 801197a:	2b00      	cmp	r3, #0
 801197c:	dd07      	ble.n	801198e <read_submessage_info+0x8a>
 801197e:	f1b8 0f00 	cmp.w	r8, #0
 8011982:	bf14      	ite	ne
 8011984:	2001      	movne	r0, #1
 8011986:	2002      	moveq	r0, #2
 8011988:	f887 00b5 	strb.w	r0, [r7, #181]	@ 0xb5
 801198c:	e7d8      	b.n	8011940 <read_submessage_info+0x3c>
 801198e:	2000      	movs	r0, #0
 8011990:	e7fa      	b.n	8011988 <read_submessage_info+0x84>
 8011992:	bf00      	nop

08011994 <read_submessage_list>:
 8011994:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011998:	b097      	sub	sp, #92	@ 0x5c
 801199a:	4ec1      	ldr	r6, [pc, #772]	@ (8011ca0 <read_submessage_list+0x30c>)
 801199c:	9209      	str	r2, [sp, #36]	@ 0x24
 801199e:	4604      	mov	r4, r0
 80119a0:	460d      	mov	r5, r1
 80119a2:	f04f 0801 	mov.w	r8, #1
 80119a6:	f10d 032f 	add.w	r3, sp, #47	@ 0x2f
 80119aa:	aa0c      	add	r2, sp, #48	@ 0x30
 80119ac:	f10d 012e 	add.w	r1, sp, #46	@ 0x2e
 80119b0:	4628      	mov	r0, r5
 80119b2:	f001 fcdd 	bl	8013370 <uxr_read_submessage_header>
 80119b6:	2800      	cmp	r0, #0
 80119b8:	f000 813e 	beq.w	8011c38 <read_submessage_list+0x2a4>
 80119bc:	f89d 302e 	ldrb.w	r3, [sp, #46]	@ 0x2e
 80119c0:	f89d 2026 	ldrb.w	r2, [sp, #38]	@ 0x26
 80119c4:	3b02      	subs	r3, #2
 80119c6:	2b0d      	cmp	r3, #13
 80119c8:	d8ed      	bhi.n	80119a6 <read_submessage_list+0x12>
 80119ca:	a101      	add	r1, pc, #4	@ (adr r1, 80119d0 <read_submessage_list+0x3c>)
 80119cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80119d0:	08011c2f 	.word	0x08011c2f
 80119d4:	080119a7 	.word	0x080119a7
 80119d8:	08011c1f 	.word	0x08011c1f
 80119dc:	08011bbd 	.word	0x08011bbd
 80119e0:	08011bb3 	.word	0x08011bb3
 80119e4:	080119a7 	.word	0x080119a7
 80119e8:	080119a7 	.word	0x080119a7
 80119ec:	08011b13 	.word	0x08011b13
 80119f0:	08011aa3 	.word	0x08011aa3
 80119f4:	08011a63 	.word	0x08011a63
 80119f8:	080119a7 	.word	0x080119a7
 80119fc:	080119a7 	.word	0x080119a7
 8011a00:	080119a7 	.word	0x080119a7
 8011a04:	08011a09 	.word	0x08011a09
 8011a08:	a910      	add	r1, sp, #64	@ 0x40
 8011a0a:	4628      	mov	r0, r5
 8011a0c:	f002 feb0 	bl	8014770 <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 8011a10:	f8d4 9090 	ldr.w	r9, [r4, #144]	@ 0x90
 8011a14:	f1b9 0f00 	cmp.w	r9, #0
 8011a18:	f000 8116 	beq.w	8011c48 <read_submessage_list+0x2b4>
 8011a1c:	f001 fcee 	bl	80133fc <uxr_nanos>
 8011a20:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 8011a22:	4602      	mov	r2, r0
 8011a24:	460b      	mov	r3, r1
 8011a26:	9814      	ldr	r0, [sp, #80]	@ 0x50
 8011a28:	2100      	movs	r1, #0
 8011a2a:	468c      	mov	ip, r1
 8011a2c:	fbc0 7c06 	smlal	r7, ip, r0, r6
 8011a30:	e9cd 7c04 	strd	r7, ip, [sp, #16]
 8011a34:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8011a36:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 8011a38:	468c      	mov	ip, r1
 8011a3a:	fbc0 7c06 	smlal	r7, ip, r0, r6
 8011a3e:	46e2      	mov	sl, ip
 8011a40:	46bc      	mov	ip, r7
 8011a42:	e9dd 0712 	ldrd	r0, r7, [sp, #72]	@ 0x48
 8011a46:	fbc0 7106 	smlal	r7, r1, r0, r6
 8011a4a:	e9cd ca02 	strd	ip, sl, [sp, #8]
 8011a4e:	e9cd 7100 	strd	r7, r1, [sp]
 8011a52:	f8d4 1094 	ldr.w	r1, [r4, #148]	@ 0x94
 8011a56:	9106      	str	r1, [sp, #24]
 8011a58:	4620      	mov	r0, r4
 8011a5a:	47c8      	blx	r9
 8011a5c:	f884 80a0 	strb.w	r8, [r4, #160]	@ 0xa0
 8011a60:	e7a1      	b.n	80119a6 <read_submessage_list+0x12>
 8011a62:	a910      	add	r1, sp, #64	@ 0x40
 8011a64:	4628      	mov	r0, r5
 8011a66:	f002 fe63 	bl	8014730 <uxr_deserialize_HEARTBEAT_Payload>
 8011a6a:	2100      	movs	r1, #0
 8011a6c:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 8011a70:	f001 fb56 	bl	8013120 <uxr_stream_id_from_raw>
 8011a74:	f3c0 2707 	ubfx	r7, r0, #8, #8
 8011a78:	900f      	str	r0, [sp, #60]	@ 0x3c
 8011a7a:	4639      	mov	r1, r7
 8011a7c:	f104 0008 	add.w	r0, r4, #8
 8011a80:	f001 fc3c 	bl	80132fc <uxr_get_input_reliable_stream>
 8011a84:	2800      	cmp	r0, #0
 8011a86:	d08e      	beq.n	80119a6 <read_submessage_list+0x12>
 8011a88:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 8011a8c:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
 8011a90:	f007 fb6c 	bl	801916c <uxr_process_heartbeat>
 8011a94:	f89d 103c 	ldrb.w	r1, [sp, #60]	@ 0x3c
 8011a98:	463a      	mov	r2, r7
 8011a9a:	4620      	mov	r0, r4
 8011a9c:	f7ff fdf4 	bl	8011688 <write_submessage_acknack.isra.0>
 8011aa0:	e781      	b.n	80119a6 <read_submessage_list+0x12>
 8011aa2:	a910      	add	r1, sp, #64	@ 0x40
 8011aa4:	4628      	mov	r0, r5
 8011aa6:	f002 fe1b 	bl	80146e0 <uxr_deserialize_ACKNACK_Payload>
 8011aaa:	2100      	movs	r1, #0
 8011aac:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 8011ab0:	f001 fb36 	bl	8013120 <uxr_stream_id_from_raw>
 8011ab4:	900d      	str	r0, [sp, #52]	@ 0x34
 8011ab6:	f3c0 2107 	ubfx	r1, r0, #8, #8
 8011aba:	f104 0008 	add.w	r0, r4, #8
 8011abe:	f001 fc09 	bl	80132d4 <uxr_get_output_reliable_stream>
 8011ac2:	4607      	mov	r7, r0
 8011ac4:	2800      	cmp	r0, #0
 8011ac6:	f43f af6e 	beq.w	80119a6 <read_submessage_list+0x12>
 8011aca:	f89d 3042 	ldrb.w	r3, [sp, #66]	@ 0x42
 8011ace:	f89d 1043 	ldrb.w	r1, [sp, #67]	@ 0x43
 8011ad2:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 8011ad6:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 8011ada:	b289      	uxth	r1, r1
 8011adc:	f007 fea0 	bl	8019820 <uxr_process_acknack>
 8011ae0:	4638      	mov	r0, r7
 8011ae2:	f007 fe5d 	bl	80197a0 <uxr_begin_output_nack_buffer_it>
 8011ae6:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 8011aea:	f8ad 0032 	strh.w	r0, [sp, #50]	@ 0x32
 8011aee:	e006      	b.n	8011afe <read_submessage_list+0x16a>
 8011af0:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8011af2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8011af4:	f8d3 9004 	ldr.w	r9, [r3, #4]
 8011af8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8011afa:	6818      	ldr	r0, [r3, #0]
 8011afc:	47c8      	blx	r9
 8011afe:	f10d 0332 	add.w	r3, sp, #50	@ 0x32
 8011b02:	aa0f      	add	r2, sp, #60	@ 0x3c
 8011b04:	4651      	mov	r1, sl
 8011b06:	4638      	mov	r0, r7
 8011b08:	f007 fe4c 	bl	80197a4 <uxr_next_reliable_nack_buffer_to_send>
 8011b0c:	2800      	cmp	r0, #0
 8011b0e:	d1ef      	bne.n	8011af0 <read_submessage_list+0x15c>
 8011b10:	e749      	b.n	80119a6 <read_submessage_list+0x12>
 8011b12:	f89d 3025 	ldrb.w	r3, [sp, #37]	@ 0x25
 8011b16:	f88d 3035 	strb.w	r3, [sp, #53]	@ 0x35
 8011b1a:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 8011b1e:	f89d 3027 	ldrb.w	r3, [sp, #39]	@ 0x27
 8011b22:	f88d 3037 	strb.w	r3, [sp, #55]	@ 0x37
 8011b26:	4651      	mov	r1, sl
 8011b28:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 8011b2c:	f8bd 7030 	ldrh.w	r7, [sp, #48]	@ 0x30
 8011b30:	f89d 902f 	ldrb.w	r9, [sp, #47]	@ 0x2f
 8011b34:	f88d 2036 	strb.w	r2, [sp, #54]	@ 0x36
 8011b38:	4628      	mov	r0, r5
 8011b3a:	f88d 3034 	strb.w	r3, [sp, #52]	@ 0x34
 8011b3e:	f002 fb2f 	bl	80141a0 <uxr_deserialize_BaseObjectRequest>
 8011b42:	4650      	mov	r0, sl
 8011b44:	a90f      	add	r1, sp, #60	@ 0x3c
 8011b46:	f10d 0232 	add.w	r2, sp, #50	@ 0x32
 8011b4a:	f000 fe1b 	bl	8012784 <uxr_parse_base_object_request>
 8011b4e:	f8d4 b080 	ldr.w	fp, [r4, #128]	@ 0x80
 8011b52:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8011b54:	f8bd a032 	ldrh.w	sl, [sp, #50]	@ 0x32
 8011b58:	9110      	str	r1, [sp, #64]	@ 0x40
 8011b5a:	3f04      	subs	r7, #4
 8011b5c:	f009 090e 	and.w	r9, r9, #14
 8011b60:	b2bf      	uxth	r7, r7
 8011b62:	f1bb 0f00 	cmp.w	fp, #0
 8011b66:	d006      	beq.n	8011b76 <read_submessage_list+0x1e2>
 8011b68:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 8011b6c:	9300      	str	r3, [sp, #0]
 8011b6e:	4652      	mov	r2, sl
 8011b70:	2300      	movs	r3, #0
 8011b72:	4620      	mov	r0, r4
 8011b74:	47d8      	blx	fp
 8011b76:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 8011b78:	b16a      	cbz	r2, 8011b96 <read_submessage_list+0x202>
 8011b7a:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 8011b7c:	2100      	movs	r1, #0
 8011b7e:	3802      	subs	r0, #2
 8011b80:	e002      	b.n	8011b88 <read_submessage_list+0x1f4>
 8011b82:	3101      	adds	r1, #1
 8011b84:	4291      	cmp	r1, r2
 8011b86:	d006      	beq.n	8011b96 <read_submessage_list+0x202>
 8011b88:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 8011b8c:	4553      	cmp	r3, sl
 8011b8e:	d1f8      	bne.n	8011b82 <read_submessage_list+0x1ee>
 8011b90:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8011b92:	2200      	movs	r2, #0
 8011b94:	545a      	strb	r2, [r3, r1]
 8011b96:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 8011b9a:	9102      	str	r1, [sp, #8]
 8011b9c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8011b9e:	9101      	str	r1, [sp, #4]
 8011ba0:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8011ba2:	9100      	str	r1, [sp, #0]
 8011ba4:	464b      	mov	r3, r9
 8011ba6:	463a      	mov	r2, r7
 8011ba8:	4629      	mov	r1, r5
 8011baa:	4620      	mov	r0, r4
 8011bac:	f7ff fc4a 	bl	8011444 <read_submessage_format>
 8011bb0:	e6f9      	b.n	80119a6 <read_submessage_list+0x12>
 8011bb2:	4629      	mov	r1, r5
 8011bb4:	4620      	mov	r0, r4
 8011bb6:	f7ff fea5 	bl	8011904 <read_submessage_info>
 8011bba:	e6f4      	b.n	80119a6 <read_submessage_list+0x12>
 8011bbc:	2a00      	cmp	r2, #0
 8011bbe:	d03e      	beq.n	8011c3e <read_submessage_list+0x2aa>
 8011bc0:	a910      	add	r1, sp, #64	@ 0x40
 8011bc2:	4628      	mov	r0, r5
 8011bc4:	f002 fce8 	bl	8014598 <uxr_deserialize_STATUS_Payload>
 8011bc8:	a90e      	add	r1, sp, #56	@ 0x38
 8011bca:	aa0d      	add	r2, sp, #52	@ 0x34
 8011bcc:	a810      	add	r0, sp, #64	@ 0x40
 8011bce:	f000 fdd9 	bl	8012784 <uxr_parse_base_object_request>
 8011bd2:	f8d4 a080 	ldr.w	sl, [r4, #128]	@ 0x80
 8011bd6:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8011bd8:	f89d 9044 	ldrb.w	r9, [sp, #68]	@ 0x44
 8011bdc:	f8bd 7034 	ldrh.w	r7, [sp, #52]	@ 0x34
 8011be0:	910f      	str	r1, [sp, #60]	@ 0x3c
 8011be2:	f1ba 0f00 	cmp.w	sl, #0
 8011be6:	d006      	beq.n	8011bf6 <read_submessage_list+0x262>
 8011be8:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 8011bec:	9300      	str	r3, [sp, #0]
 8011bee:	463a      	mov	r2, r7
 8011bf0:	464b      	mov	r3, r9
 8011bf2:	4620      	mov	r0, r4
 8011bf4:	47d0      	blx	sl
 8011bf6:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 8011bf8:	2a00      	cmp	r2, #0
 8011bfa:	f43f aed4 	beq.w	80119a6 <read_submessage_list+0x12>
 8011bfe:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 8011c00:	2100      	movs	r1, #0
 8011c02:	3802      	subs	r0, #2
 8011c04:	e003      	b.n	8011c0e <read_submessage_list+0x27a>
 8011c06:	3101      	adds	r1, #1
 8011c08:	4291      	cmp	r1, r2
 8011c0a:	f43f aecc 	beq.w	80119a6 <read_submessage_list+0x12>
 8011c0e:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 8011c12:	42bb      	cmp	r3, r7
 8011c14:	d1f7      	bne.n	8011c06 <read_submessage_list+0x272>
 8011c16:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8011c18:	f803 9001 	strb.w	r9, [r3, r1]
 8011c1c:	e6c3      	b.n	80119a6 <read_submessage_list+0x12>
 8011c1e:	2a00      	cmp	r2, #0
 8011c20:	f47f aec1 	bne.w	80119a6 <read_submessage_list+0x12>
 8011c24:	4629      	mov	r1, r5
 8011c26:	4620      	mov	r0, r4
 8011c28:	f000 fcf2 	bl	8012610 <uxr_read_create_session_status>
 8011c2c:	e6bb      	b.n	80119a6 <read_submessage_list+0x12>
 8011c2e:	4629      	mov	r1, r5
 8011c30:	4620      	mov	r0, r4
 8011c32:	f7ff fcf3 	bl	801161c <read_submessage_get_info>
 8011c36:	e6b6      	b.n	80119a6 <read_submessage_list+0x12>
 8011c38:	b017      	add	sp, #92	@ 0x5c
 8011c3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011c3e:	4629      	mov	r1, r5
 8011c40:	4620      	mov	r0, r4
 8011c42:	f000 fcf1 	bl	8012628 <uxr_read_delete_session_status>
 8011c46:	e6ae      	b.n	80119a6 <read_submessage_list+0x12>
 8011c48:	f001 fbd8 	bl	80133fc <uxr_nanos>
 8011c4c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8011c4e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8011c50:	464f      	mov	r7, r9
 8011c52:	fbc3 2706 	smlal	r2, r7, r3, r6
 8011c56:	1812      	adds	r2, r2, r0
 8011c58:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8011c5a:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8011c5c:	eb47 0101 	adc.w	r1, r7, r1
 8011c60:	464f      	mov	r7, r9
 8011c62:	fbc3 0706 	smlal	r0, r7, r3, r6
 8011c66:	463b      	mov	r3, r7
 8011c68:	4684      	mov	ip, r0
 8011c6a:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	@ 0x40
 8011c6e:	fbc7 0906 	smlal	r0, r9, r7, r6
 8011c72:	eb1c 0c00 	adds.w	ip, ip, r0
 8011c76:	464f      	mov	r7, r9
 8011c78:	eb43 0307 	adc.w	r3, r3, r7
 8011c7c:	ebb2 0c0c 	subs.w	ip, r2, ip
 8011c80:	eb61 0303 	sbc.w	r3, r1, r3
 8011c84:	0fda      	lsrs	r2, r3, #31
 8011c86:	eb12 020c 	adds.w	r2, r2, ip
 8011c8a:	f143 0300 	adc.w	r3, r3, #0
 8011c8e:	0852      	lsrs	r2, r2, #1
 8011c90:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
 8011c94:	105b      	asrs	r3, r3, #1
 8011c96:	f8c4 2098 	str.w	r2, [r4, #152]	@ 0x98
 8011c9a:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
 8011c9e:	e6dd      	b.n	8011a5c <read_submessage_list+0xc8>
 8011ca0:	3b9aca00 	.word	0x3b9aca00

08011ca4 <listen_message_reliably>:
 8011ca4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ca8:	1e0b      	subs	r3, r1, #0
 8011caa:	b09d      	sub	sp, #116	@ 0x74
 8011cac:	bfb8      	it	lt
 8011cae:	f06f 4300 	mvnlt.w	r3, #2147483648	@ 0x80000000
 8011cb2:	4680      	mov	r8, r0
 8011cb4:	9305      	str	r3, [sp, #20]
 8011cb6:	f001 fb87 	bl	80133c8 <uxr_millis>
 8011cba:	f898 2048 	ldrb.w	r2, [r8, #72]	@ 0x48
 8011cbe:	4681      	mov	r9, r0
 8011cc0:	2a00      	cmp	r2, #0
 8011cc2:	f000 80a1 	beq.w	8011e08 <listen_message_reliably+0x164>
 8011cc6:	2600      	movs	r6, #0
 8011cc8:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8011ccc:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 8011cd0:	9303      	str	r3, [sp, #12]
 8011cd2:	4630      	mov	r0, r6
 8011cd4:	460f      	mov	r7, r1
 8011cd6:	e00f      	b.n	8011cf8 <listen_message_reliably+0x54>
 8011cd8:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8011cdc:	9903      	ldr	r1, [sp, #12]
 8011cde:	455a      	cmp	r2, fp
 8011ce0:	f106 0601 	add.w	r6, r6, #1
 8011ce4:	eb73 0101 	sbcs.w	r1, r3, r1
 8011ce8:	b2f0      	uxtb	r0, r6
 8011cea:	da01      	bge.n	8011cf0 <listen_message_reliably+0x4c>
 8011cec:	4693      	mov	fp, r2
 8011cee:	9303      	str	r3, [sp, #12]
 8011cf0:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 8011cf4:	4283      	cmp	r3, r0
 8011cf6:	d960      	bls.n	8011dba <listen_message_reliably+0x116>
 8011cf8:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 8011cfc:	2102      	movs	r1, #2
 8011cfe:	2201      	movs	r2, #1
 8011d00:	f001 f9e4 	bl	80130cc <uxr_stream_id>
 8011d04:	00e4      	lsls	r4, r4, #3
 8011d06:	f104 0520 	add.w	r5, r4, #32
 8011d0a:	4445      	add	r5, r8
 8011d0c:	4601      	mov	r1, r0
 8011d0e:	463b      	mov	r3, r7
 8011d10:	464a      	mov	r2, r9
 8011d12:	4628      	mov	r0, r5
 8011d14:	9109      	str	r1, [sp, #36]	@ 0x24
 8011d16:	f007 fd19 	bl	801974c <uxr_update_output_stream_heartbeat_timestamp>
 8011d1a:	eb08 0304 	add.w	r3, r8, r4
 8011d1e:	2800      	cmp	r0, #0
 8011d20:	d0da      	beq.n	8011cd8 <listen_message_reliably+0x34>
 8011d22:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 8011d26:	f89d 5025 	ldrb.w	r5, [sp, #37]	@ 0x25
 8011d2a:	9304      	str	r3, [sp, #16]
 8011d2c:	4640      	mov	r0, r8
 8011d2e:	f000 fd03 	bl	8012738 <uxr_session_header_offset>
 8011d32:	3501      	adds	r5, #1
 8011d34:	f10d 0a50 	add.w	sl, sp, #80	@ 0x50
 8011d38:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8011d3c:	eb08 05c5 	add.w	r5, r8, r5, lsl #3
 8011d40:	2300      	movs	r3, #0
 8011d42:	2211      	movs	r2, #17
 8011d44:	9000      	str	r0, [sp, #0]
 8011d46:	a90c      	add	r1, sp, #48	@ 0x30
 8011d48:	4650      	mov	r0, sl
 8011d4a:	f7fb ffdf 	bl	800dd0c <ucdr_init_buffer_origin_offset>
 8011d4e:	2300      	movs	r3, #0
 8011d50:	2205      	movs	r2, #5
 8011d52:	210b      	movs	r1, #11
 8011d54:	4650      	mov	r0, sl
 8011d56:	f001 faf1 	bl	801333c <uxr_buffer_submessage_header>
 8011d5a:	8968      	ldrh	r0, [r5, #10]
 8011d5c:	2101      	movs	r1, #1
 8011d5e:	f007 fdb7 	bl	80198d0 <uxr_seq_num_add>
 8011d62:	892b      	ldrh	r3, [r5, #8]
 8011d64:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 8011d68:	4602      	mov	r2, r0
 8011d6a:	9b04      	ldr	r3, [sp, #16]
 8011d6c:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 8011d70:	a90a      	add	r1, sp, #40	@ 0x28
 8011d72:	4650      	mov	r0, sl
 8011d74:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 8011d78:	f002 fcc6 	bl	8014708 <uxr_serialize_HEARTBEAT_Payload>
 8011d7c:	2200      	movs	r2, #0
 8011d7e:	4611      	mov	r1, r2
 8011d80:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8011d82:	4640      	mov	r0, r8
 8011d84:	f000 fc82 	bl	801268c <uxr_stamp_session_header>
 8011d88:	4650      	mov	r0, sl
 8011d8a:	f7fb fffd 	bl	800dd88 <ucdr_buffer_length>
 8011d8e:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 8011d92:	4602      	mov	r2, r0
 8011d94:	a90c      	add	r1, sp, #48	@ 0x30
 8011d96:	e9d3 0500 	ldrd	r0, r5, [r3]
 8011d9a:	4444      	add	r4, r8
 8011d9c:	47a8      	blx	r5
 8011d9e:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	@ 0x38
 8011da2:	9903      	ldr	r1, [sp, #12]
 8011da4:	455a      	cmp	r2, fp
 8011da6:	f106 0601 	add.w	r6, r6, #1
 8011daa:	eb73 0101 	sbcs.w	r1, r3, r1
 8011dae:	b2f0      	uxtb	r0, r6
 8011db0:	db9c      	blt.n	8011cec <listen_message_reliably+0x48>
 8011db2:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 8011db6:	4283      	cmp	r3, r0
 8011db8:	d89e      	bhi.n	8011cf8 <listen_message_reliably+0x54>
 8011dba:	9a03      	ldr	r2, [sp, #12]
 8011dbc:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8011dc0:	429a      	cmp	r2, r3
 8011dc2:	bf08      	it	eq
 8011dc4:	f1bb 3fff 	cmpeq.w	fp, #4294967295	@ 0xffffffff
 8011dc8:	d01e      	beq.n	8011e08 <listen_message_reliably+0x164>
 8011dca:	ebab 0309 	sub.w	r3, fp, r9
 8011dce:	9905      	ldr	r1, [sp, #20]
 8011dd0:	f8d8 2070 	ldr.w	r2, [r8, #112]	@ 0x70
 8011dd4:	2b00      	cmp	r3, #0
 8011dd6:	bf08      	it	eq
 8011dd8:	2301      	moveq	r3, #1
 8011dda:	4299      	cmp	r1, r3
 8011ddc:	bfa8      	it	ge
 8011dde:	4619      	movge	r1, r3
 8011de0:	6894      	ldr	r4, [r2, #8]
 8011de2:	6810      	ldr	r0, [r2, #0]
 8011de4:	4689      	mov	r9, r1
 8011de6:	460b      	mov	r3, r1
 8011de8:	aa08      	add	r2, sp, #32
 8011dea:	a907      	add	r1, sp, #28
 8011dec:	47a0      	blx	r4
 8011dee:	b968      	cbnz	r0, 8011e0c <listen_message_reliably+0x168>
 8011df0:	9b05      	ldr	r3, [sp, #20]
 8011df2:	eba3 0309 	sub.w	r3, r3, r9
 8011df6:	2b00      	cmp	r3, #0
 8011df8:	9305      	str	r3, [sp, #20]
 8011dfa:	f73f af5c 	bgt.w	8011cb6 <listen_message_reliably+0x12>
 8011dfe:	4604      	mov	r4, r0
 8011e00:	4620      	mov	r0, r4
 8011e02:	b01d      	add	sp, #116	@ 0x74
 8011e04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011e08:	9b05      	ldr	r3, [sp, #20]
 8011e0a:	e7e0      	b.n	8011dce <listen_message_reliably+0x12a>
 8011e0c:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 8011e10:	4604      	mov	r4, r0
 8011e12:	a80c      	add	r0, sp, #48	@ 0x30
 8011e14:	f7fb ff8c 	bl	800dd30 <ucdr_init_buffer>
 8011e18:	2500      	movs	r5, #0
 8011e1a:	f10d 031a 	add.w	r3, sp, #26
 8011e1e:	aa06      	add	r2, sp, #24
 8011e20:	a90c      	add	r1, sp, #48	@ 0x30
 8011e22:	4640      	mov	r0, r8
 8011e24:	f88d 5018 	strb.w	r5, [sp, #24]
 8011e28:	f000 fc44 	bl	80126b4 <uxr_read_session_header>
 8011e2c:	b918      	cbnz	r0, 8011e36 <listen_message_reliably+0x192>
 8011e2e:	4620      	mov	r0, r4
 8011e30:	b01d      	add	sp, #116	@ 0x74
 8011e32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011e36:	4629      	mov	r1, r5
 8011e38:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8011e3c:	f001 f970 	bl	8013120 <uxr_stream_id_from_raw>
 8011e40:	f3c0 4507 	ubfx	r5, r0, #16, #8
 8011e44:	2d01      	cmp	r5, #1
 8011e46:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 8011e4a:	f8bd a01a 	ldrh.w	sl, [sp, #26]
 8011e4e:	f3c0 2607 	ubfx	r6, r0, #8, #8
 8011e52:	d04b      	beq.n	8011eec <listen_message_reliably+0x248>
 8011e54:	2d02      	cmp	r5, #2
 8011e56:	d00f      	beq.n	8011e78 <listen_message_reliably+0x1d4>
 8011e58:	2d00      	cmp	r5, #0
 8011e5a:	d1e8      	bne.n	8011e2e <listen_message_reliably+0x18a>
 8011e5c:	4629      	mov	r1, r5
 8011e5e:	4628      	mov	r0, r5
 8011e60:	f001 f95e 	bl	8013120 <uxr_stream_id_from_raw>
 8011e64:	a90c      	add	r1, sp, #48	@ 0x30
 8011e66:	4602      	mov	r2, r0
 8011e68:	4640      	mov	r0, r8
 8011e6a:	920a      	str	r2, [sp, #40]	@ 0x28
 8011e6c:	f7ff fd92 	bl	8011994 <read_submessage_list>
 8011e70:	4620      	mov	r0, r4
 8011e72:	b01d      	add	sp, #116	@ 0x74
 8011e74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011e78:	4631      	mov	r1, r6
 8011e7a:	f108 0008 	add.w	r0, r8, #8
 8011e7e:	f89d 9024 	ldrb.w	r9, [sp, #36]	@ 0x24
 8011e82:	f001 fa3b 	bl	80132fc <uxr_get_input_reliable_stream>
 8011e86:	4607      	mov	r7, r0
 8011e88:	b338      	cbz	r0, 8011eda <listen_message_reliably+0x236>
 8011e8a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011e8c:	9203      	str	r2, [sp, #12]
 8011e8e:	a80c      	add	r0, sp, #48	@ 0x30
 8011e90:	f7fb ff7e 	bl	800dd90 <ucdr_buffer_remaining>
 8011e94:	4603      	mov	r3, r0
 8011e96:	f10d 0019 	add.w	r0, sp, #25
 8011e9a:	9000      	str	r0, [sp, #0]
 8011e9c:	9a03      	ldr	r2, [sp, #12]
 8011e9e:	4651      	mov	r1, sl
 8011ea0:	4638      	mov	r0, r7
 8011ea2:	f007 f869 	bl	8018f78 <uxr_receive_reliable_message>
 8011ea6:	b1c0      	cbz	r0, 8011eda <listen_message_reliably+0x236>
 8011ea8:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8011eac:	b393      	cbz	r3, 8011f14 <listen_message_reliably+0x270>
 8011eae:	ad14      	add	r5, sp, #80	@ 0x50
 8011eb0:	f04f 0a02 	mov.w	sl, #2
 8011eb4:	e00a      	b.n	8011ecc <listen_message_reliably+0x228>
 8011eb6:	f88d 9028 	strb.w	r9, [sp, #40]	@ 0x28
 8011eba:	f88d 6029 	strb.w	r6, [sp, #41]	@ 0x29
 8011ebe:	f88d a02a 	strb.w	sl, [sp, #42]	@ 0x2a
 8011ec2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011ec4:	4629      	mov	r1, r5
 8011ec6:	4640      	mov	r0, r8
 8011ec8:	f7ff fd64 	bl	8011994 <read_submessage_list>
 8011ecc:	2204      	movs	r2, #4
 8011ece:	4629      	mov	r1, r5
 8011ed0:	4638      	mov	r0, r7
 8011ed2:	f007 f8d1 	bl	8019078 <uxr_next_input_reliable_buffer_available>
 8011ed6:	2800      	cmp	r0, #0
 8011ed8:	d1ed      	bne.n	8011eb6 <listen_message_reliably+0x212>
 8011eda:	4640      	mov	r0, r8
 8011edc:	4632      	mov	r2, r6
 8011ede:	4649      	mov	r1, r9
 8011ee0:	f7ff fbd2 	bl	8011688 <write_submessage_acknack.isra.0>
 8011ee4:	4620      	mov	r0, r4
 8011ee6:	b01d      	add	sp, #116	@ 0x74
 8011ee8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011eec:	4631      	mov	r1, r6
 8011eee:	f108 0008 	add.w	r0, r8, #8
 8011ef2:	f001 f9f9 	bl	80132e8 <uxr_get_input_best_effort_stream>
 8011ef6:	2800      	cmp	r0, #0
 8011ef8:	d099      	beq.n	8011e2e <listen_message_reliably+0x18a>
 8011efa:	4651      	mov	r1, sl
 8011efc:	f006 ffa8 	bl	8018e50 <uxr_receive_best_effort_message>
 8011f00:	2800      	cmp	r0, #0
 8011f02:	d094      	beq.n	8011e2e <listen_message_reliably+0x18a>
 8011f04:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 8011f08:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011f0a:	a90c      	add	r1, sp, #48	@ 0x30
 8011f0c:	4640      	mov	r0, r8
 8011f0e:	f7ff fd41 	bl	8011994 <read_submessage_list>
 8011f12:	e78c      	b.n	8011e2e <listen_message_reliably+0x18a>
 8011f14:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 8011f18:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011f1a:	a90c      	add	r1, sp, #48	@ 0x30
 8011f1c:	4640      	mov	r0, r8
 8011f1e:	f7ff fd39 	bl	8011994 <read_submessage_list>
 8011f22:	e7c4      	b.n	8011eae <listen_message_reliably+0x20a>

08011f24 <uxr_run_session_timeout>:
 8011f24:	b570      	push	{r4, r5, r6, lr}
 8011f26:	4604      	mov	r4, r0
 8011f28:	460d      	mov	r5, r1
 8011f2a:	f001 fa4d 	bl	80133c8 <uxr_millis>
 8011f2e:	4606      	mov	r6, r0
 8011f30:	4620      	mov	r0, r4
 8011f32:	f7ff fc71 	bl	8011818 <uxr_flash_output_streams>
 8011f36:	4629      	mov	r1, r5
 8011f38:	4620      	mov	r0, r4
 8011f3a:	f7ff feb3 	bl	8011ca4 <listen_message_reliably>
 8011f3e:	f001 fa43 	bl	80133c8 <uxr_millis>
 8011f42:	1b83      	subs	r3, r0, r6
 8011f44:	1ae9      	subs	r1, r5, r3
 8011f46:	2900      	cmp	r1, #0
 8011f48:	dcf6      	bgt.n	8011f38 <uxr_run_session_timeout+0x14>
 8011f4a:	f104 0008 	add.w	r0, r4, #8
 8011f4e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011f52:	f001 b9dd 	b.w	8013310 <uxr_output_streams_confirmed>
 8011f56:	bf00      	nop

08011f58 <uxr_run_session_until_data>:
 8011f58:	b570      	push	{r4, r5, r6, lr}
 8011f5a:	4604      	mov	r4, r0
 8011f5c:	460d      	mov	r5, r1
 8011f5e:	f001 fa33 	bl	80133c8 <uxr_millis>
 8011f62:	4606      	mov	r6, r0
 8011f64:	4620      	mov	r0, r4
 8011f66:	f7ff fc57 	bl	8011818 <uxr_flash_output_streams>
 8011f6a:	2300      	movs	r3, #0
 8011f6c:	f884 30b4 	strb.w	r3, [r4, #180]	@ 0xb4
 8011f70:	4629      	mov	r1, r5
 8011f72:	e005      	b.n	8011f80 <uxr_run_session_until_data+0x28>
 8011f74:	f001 fa28 	bl	80133c8 <uxr_millis>
 8011f78:	1b83      	subs	r3, r0, r6
 8011f7a:	1ae9      	subs	r1, r5, r3
 8011f7c:	2900      	cmp	r1, #0
 8011f7e:	dd07      	ble.n	8011f90 <uxr_run_session_until_data+0x38>
 8011f80:	4620      	mov	r0, r4
 8011f82:	f7ff fe8f 	bl	8011ca4 <listen_message_reliably>
 8011f86:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 8011f8a:	2800      	cmp	r0, #0
 8011f8c:	d0f2      	beq.n	8011f74 <uxr_run_session_until_data+0x1c>
 8011f8e:	bd70      	pop	{r4, r5, r6, pc}
 8011f90:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 8011f94:	bd70      	pop	{r4, r5, r6, pc}
 8011f96:	bf00      	nop

08011f98 <uxr_run_session_until_confirm_delivery>:
 8011f98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011f9c:	4606      	mov	r6, r0
 8011f9e:	460d      	mov	r5, r1
 8011fa0:	f001 fa12 	bl	80133c8 <uxr_millis>
 8011fa4:	4607      	mov	r7, r0
 8011fa6:	4630      	mov	r0, r6
 8011fa8:	f7ff fc36 	bl	8011818 <uxr_flash_output_streams>
 8011fac:	2d00      	cmp	r5, #0
 8011fae:	f106 0808 	add.w	r8, r6, #8
 8011fb2:	bfa8      	it	ge
 8011fb4:	462c      	movge	r4, r5
 8011fb6:	da07      	bge.n	8011fc8 <uxr_run_session_until_confirm_delivery+0x30>
 8011fb8:	e00e      	b.n	8011fd8 <uxr_run_session_until_confirm_delivery+0x40>
 8011fba:	f7ff fe73 	bl	8011ca4 <listen_message_reliably>
 8011fbe:	f001 fa03 	bl	80133c8 <uxr_millis>
 8011fc2:	1bc3      	subs	r3, r0, r7
 8011fc4:	1aec      	subs	r4, r5, r3
 8011fc6:	d407      	bmi.n	8011fd8 <uxr_run_session_until_confirm_delivery+0x40>
 8011fc8:	4640      	mov	r0, r8
 8011fca:	f001 f9a1 	bl	8013310 <uxr_output_streams_confirmed>
 8011fce:	4603      	mov	r3, r0
 8011fd0:	4621      	mov	r1, r4
 8011fd2:	4630      	mov	r0, r6
 8011fd4:	2b00      	cmp	r3, #0
 8011fd6:	d0f0      	beq.n	8011fba <uxr_run_session_until_confirm_delivery+0x22>
 8011fd8:	4640      	mov	r0, r8
 8011fda:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011fde:	f001 b997 	b.w	8013310 <uxr_output_streams_confirmed>
 8011fe2:	bf00      	nop

08011fe4 <uxr_run_session_until_all_status>:
 8011fe4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011fe8:	9c08      	ldr	r4, [sp, #32]
 8011fea:	4606      	mov	r6, r0
 8011fec:	460f      	mov	r7, r1
 8011fee:	4691      	mov	r9, r2
 8011ff0:	461d      	mov	r5, r3
 8011ff2:	f7ff fc11 	bl	8011818 <uxr_flash_output_streams>
 8011ff6:	b124      	cbz	r4, 8012002 <uxr_run_session_until_all_status+0x1e>
 8011ff8:	4622      	mov	r2, r4
 8011ffa:	21ff      	movs	r1, #255	@ 0xff
 8011ffc:	4628      	mov	r0, r5
 8011ffe:	f008 fdad 	bl	801ab5c <memset>
 8012002:	e9c6 951d 	strd	r9, r5, [r6, #116]	@ 0x74
 8012006:	67f4      	str	r4, [r6, #124]	@ 0x7c
 8012008:	f001 f9de 	bl	80133c8 <uxr_millis>
 801200c:	3d01      	subs	r5, #1
 801200e:	f1a9 0902 	sub.w	r9, r9, #2
 8012012:	4680      	mov	r8, r0
 8012014:	4639      	mov	r1, r7
 8012016:	4630      	mov	r0, r6
 8012018:	f7ff fe44 	bl	8011ca4 <listen_message_reliably>
 801201c:	f001 f9d4 	bl	80133c8 <uxr_millis>
 8012020:	eba0 0008 	sub.w	r0, r0, r8
 8012024:	1a39      	subs	r1, r7, r0
 8012026:	b344      	cbz	r4, 801207a <uxr_run_session_until_all_status+0x96>
 8012028:	4628      	mov	r0, r5
 801202a:	46ac      	mov	ip, r5
 801202c:	2301      	movs	r3, #1
 801202e:	e002      	b.n	8012036 <uxr_run_session_until_all_status+0x52>
 8012030:	42a3      	cmp	r3, r4
 8012032:	d20d      	bcs.n	8012050 <uxr_run_session_until_all_status+0x6c>
 8012034:	3301      	adds	r3, #1
 8012036:	f81c ef01 	ldrb.w	lr, [ip, #1]!
 801203a:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 801203e:	d1f7      	bne.n	8012030 <uxr_run_session_until_all_status+0x4c>
 8012040:	42a3      	cmp	r3, r4
 8012042:	f839 2013 	ldrh.w	r2, [r9, r3, lsl #1]
 8012046:	d213      	bcs.n	8012070 <uxr_run_session_until_all_status+0x8c>
 8012048:	2a00      	cmp	r2, #0
 801204a:	d0f3      	beq.n	8012034 <uxr_run_session_until_all_status+0x50>
 801204c:	2900      	cmp	r1, #0
 801204e:	dce2      	bgt.n	8012016 <uxr_run_session_until_all_status+0x32>
 8012050:	2300      	movs	r3, #0
 8012052:	67f3      	str	r3, [r6, #124]	@ 0x7c
 8012054:	442c      	add	r4, r5
 8012056:	e001      	b.n	801205c <uxr_run_session_until_all_status+0x78>
 8012058:	2b01      	cmp	r3, #1
 801205a:	d812      	bhi.n	8012082 <uxr_run_session_until_all_status+0x9e>
 801205c:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8012060:	4284      	cmp	r4, r0
 8012062:	d1f9      	bne.n	8012058 <uxr_run_session_until_all_status+0x74>
 8012064:	2b01      	cmp	r3, #1
 8012066:	bf8c      	ite	hi
 8012068:	2000      	movhi	r0, #0
 801206a:	2001      	movls	r0, #1
 801206c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012070:	2900      	cmp	r1, #0
 8012072:	dded      	ble.n	8012050 <uxr_run_session_until_all_status+0x6c>
 8012074:	2a00      	cmp	r2, #0
 8012076:	d1ce      	bne.n	8012016 <uxr_run_session_until_all_status+0x32>
 8012078:	e7ea      	b.n	8012050 <uxr_run_session_until_all_status+0x6c>
 801207a:	67f4      	str	r4, [r6, #124]	@ 0x7c
 801207c:	2001      	movs	r0, #1
 801207e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012082:	2000      	movs	r0, #0
 8012084:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08012088 <uxr_sync_session>:
 8012088:	b5f0      	push	{r4, r5, r6, r7, lr}
 801208a:	b093      	sub	sp, #76	@ 0x4c
 801208c:	4604      	mov	r4, r0
 801208e:	460d      	mov	r5, r1
 8012090:	f000 fb52 	bl	8012738 <uxr_session_header_offset>
 8012094:	2214      	movs	r2, #20
 8012096:	eb0d 0102 	add.w	r1, sp, r2
 801209a:	9000      	str	r0, [sp, #0]
 801209c:	2300      	movs	r3, #0
 801209e:	a80a      	add	r0, sp, #40	@ 0x28
 80120a0:	f7fb fe34 	bl	800dd0c <ucdr_init_buffer_origin_offset>
 80120a4:	2300      	movs	r3, #0
 80120a6:	2208      	movs	r2, #8
 80120a8:	210e      	movs	r1, #14
 80120aa:	a80a      	add	r0, sp, #40	@ 0x28
 80120ac:	f001 f946 	bl	801333c <uxr_buffer_submessage_header>
 80120b0:	f001 f9a4 	bl	80133fc <uxr_nanos>
 80120b4:	a31c      	add	r3, pc, #112	@ (adr r3, 8012128 <uxr_sync_session+0xa0>)
 80120b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120ba:	460e      	mov	r6, r1
 80120bc:	4607      	mov	r7, r0
 80120be:	f7ee fd55 	bl	8000b6c <__aeabi_ldivmod>
 80120c2:	4631      	mov	r1, r6
 80120c4:	9003      	str	r0, [sp, #12]
 80120c6:	a318      	add	r3, pc, #96	@ (adr r3, 8012128 <uxr_sync_session+0xa0>)
 80120c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120cc:	4638      	mov	r0, r7
 80120ce:	f7ee fd4d 	bl	8000b6c <__aeabi_ldivmod>
 80120d2:	a903      	add	r1, sp, #12
 80120d4:	a80a      	add	r0, sp, #40	@ 0x28
 80120d6:	9204      	str	r2, [sp, #16]
 80120d8:	f002 fb3c 	bl	8014754 <uxr_serialize_TIMESTAMP_Payload>
 80120dc:	2200      	movs	r2, #0
 80120de:	4611      	mov	r1, r2
 80120e0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80120e2:	4620      	mov	r0, r4
 80120e4:	f000 fad2 	bl	801268c <uxr_stamp_session_header>
 80120e8:	a80a      	add	r0, sp, #40	@ 0x28
 80120ea:	f7fb fe4d 	bl	800dd88 <ucdr_buffer_length>
 80120ee:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 80120f0:	4602      	mov	r2, r0
 80120f2:	a905      	add	r1, sp, #20
 80120f4:	e9d3 0600 	ldrd	r0, r6, [r3]
 80120f8:	47b0      	blx	r6
 80120fa:	f001 f965 	bl	80133c8 <uxr_millis>
 80120fe:	2300      	movs	r3, #0
 8012100:	4606      	mov	r6, r0
 8012102:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
 8012106:	4629      	mov	r1, r5
 8012108:	e000      	b.n	801210c <uxr_sync_session+0x84>
 801210a:	b950      	cbnz	r0, 8012122 <uxr_sync_session+0x9a>
 801210c:	4620      	mov	r0, r4
 801210e:	f7ff fdc9 	bl	8011ca4 <listen_message_reliably>
 8012112:	f001 f959 	bl	80133c8 <uxr_millis>
 8012116:	1b83      	subs	r3, r0, r6
 8012118:	1ae9      	subs	r1, r5, r3
 801211a:	2900      	cmp	r1, #0
 801211c:	f894 00a0 	ldrb.w	r0, [r4, #160]	@ 0xa0
 8012120:	dcf3      	bgt.n	801210a <uxr_sync_session+0x82>
 8012122:	b013      	add	sp, #76	@ 0x4c
 8012124:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012126:	bf00      	nop
 8012128:	3b9aca00 	.word	0x3b9aca00
 801212c:	00000000 	.word	0x00000000

08012130 <wait_session_status>:
 8012130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012134:	4604      	mov	r4, r0
 8012136:	b09d      	sub	sp, #116	@ 0x74
 8012138:	20ff      	movs	r0, #255	@ 0xff
 801213a:	7160      	strb	r0, [r4, #5]
 801213c:	9303      	str	r3, [sp, #12]
 801213e:	2b00      	cmp	r3, #0
 8012140:	f000 80b6 	beq.w	80122b0 <wait_session_status+0x180>
 8012144:	468a      	mov	sl, r1
 8012146:	4691      	mov	r9, r2
 8012148:	f04f 0b00 	mov.w	fp, #0
 801214c:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801214e:	464a      	mov	r2, r9
 8012150:	e9d3 0500 	ldrd	r0, r5, [r3]
 8012154:	4651      	mov	r1, sl
 8012156:	47a8      	blx	r5
 8012158:	f001 f936 	bl	80133c8 <uxr_millis>
 801215c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8012160:	4605      	mov	r5, r0
 8012162:	e009      	b.n	8012178 <wait_session_status+0x48>
 8012164:	f001 f930 	bl	80133c8 <uxr_millis>
 8012168:	1b40      	subs	r0, r0, r5
 801216a:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 801216e:	2b00      	cmp	r3, #0
 8012170:	dd40      	ble.n	80121f4 <wait_session_status+0xc4>
 8012172:	7960      	ldrb	r0, [r4, #5]
 8012174:	28ff      	cmp	r0, #255	@ 0xff
 8012176:	d145      	bne.n	8012204 <wait_session_status+0xd4>
 8012178:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 801217a:	a908      	add	r1, sp, #32
 801217c:	6896      	ldr	r6, [r2, #8]
 801217e:	6810      	ldr	r0, [r2, #0]
 8012180:	aa09      	add	r2, sp, #36	@ 0x24
 8012182:	47b0      	blx	r6
 8012184:	2800      	cmp	r0, #0
 8012186:	d0ed      	beq.n	8012164 <wait_session_status+0x34>
 8012188:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 801218c:	a80c      	add	r0, sp, #48	@ 0x30
 801218e:	f7fb fdcf 	bl	800dd30 <ucdr_init_buffer>
 8012192:	2600      	movs	r6, #0
 8012194:	f10d 031e 	add.w	r3, sp, #30
 8012198:	aa07      	add	r2, sp, #28
 801219a:	a90c      	add	r1, sp, #48	@ 0x30
 801219c:	4620      	mov	r0, r4
 801219e:	f88d 601c 	strb.w	r6, [sp, #28]
 80121a2:	f000 fa87 	bl	80126b4 <uxr_read_session_header>
 80121a6:	2800      	cmp	r0, #0
 80121a8:	d0dc      	beq.n	8012164 <wait_session_status+0x34>
 80121aa:	4631      	mov	r1, r6
 80121ac:	f89d 001c 	ldrb.w	r0, [sp, #28]
 80121b0:	f000 ffb6 	bl	8013120 <uxr_stream_id_from_raw>
 80121b4:	f3c0 4707 	ubfx	r7, r0, #16, #8
 80121b8:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 80121bc:	9302      	str	r3, [sp, #8]
 80121be:	2f01      	cmp	r7, #1
 80121c0:	e9cd 000a 	strd	r0, r0, [sp, #40]	@ 0x28
 80121c4:	f3c0 2607 	ubfx	r6, r0, #8, #8
 80121c8:	d05c      	beq.n	8012284 <wait_session_status+0x154>
 80121ca:	2f02      	cmp	r7, #2
 80121cc:	d020      	beq.n	8012210 <wait_session_status+0xe0>
 80121ce:	2f00      	cmp	r7, #0
 80121d0:	d1c8      	bne.n	8012164 <wait_session_status+0x34>
 80121d2:	4639      	mov	r1, r7
 80121d4:	4638      	mov	r0, r7
 80121d6:	f000 ffa3 	bl	8013120 <uxr_stream_id_from_raw>
 80121da:	a90c      	add	r1, sp, #48	@ 0x30
 80121dc:	4602      	mov	r2, r0
 80121de:	900b      	str	r0, [sp, #44]	@ 0x2c
 80121e0:	4620      	mov	r0, r4
 80121e2:	f7ff fbd7 	bl	8011994 <read_submessage_list>
 80121e6:	f001 f8ef 	bl	80133c8 <uxr_millis>
 80121ea:	1b40      	subs	r0, r0, r5
 80121ec:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 80121f0:	2b00      	cmp	r3, #0
 80121f2:	dcbe      	bgt.n	8012172 <wait_session_status+0x42>
 80121f4:	9b03      	ldr	r3, [sp, #12]
 80121f6:	7960      	ldrb	r0, [r4, #5]
 80121f8:	f10b 0b01 	add.w	fp, fp, #1
 80121fc:	455b      	cmp	r3, fp
 80121fe:	d001      	beq.n	8012204 <wait_session_status+0xd4>
 8012200:	28ff      	cmp	r0, #255	@ 0xff
 8012202:	d0a3      	beq.n	801214c <wait_session_status+0x1c>
 8012204:	38ff      	subs	r0, #255	@ 0xff
 8012206:	bf18      	it	ne
 8012208:	2001      	movne	r0, #1
 801220a:	b01d      	add	sp, #116	@ 0x74
 801220c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012210:	f89d 3028 	ldrb.w	r3, [sp, #40]	@ 0x28
 8012214:	9304      	str	r3, [sp, #16]
 8012216:	4631      	mov	r1, r6
 8012218:	f104 0008 	add.w	r0, r4, #8
 801221c:	f001 f86e 	bl	80132fc <uxr_get_input_reliable_stream>
 8012220:	4680      	mov	r8, r0
 8012222:	b348      	cbz	r0, 8012278 <wait_session_status+0x148>
 8012224:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8012226:	9205      	str	r2, [sp, #20]
 8012228:	a80c      	add	r0, sp, #48	@ 0x30
 801222a:	f7fb fdb1 	bl	800dd90 <ucdr_buffer_remaining>
 801222e:	4603      	mov	r3, r0
 8012230:	f10d 001d 	add.w	r0, sp, #29
 8012234:	9000      	str	r0, [sp, #0]
 8012236:	9a05      	ldr	r2, [sp, #20]
 8012238:	9902      	ldr	r1, [sp, #8]
 801223a:	4640      	mov	r0, r8
 801223c:	f006 fe9c 	bl	8018f78 <uxr_receive_reliable_message>
 8012240:	b1d0      	cbz	r0, 8012278 <wait_session_status+0x148>
 8012242:	f89d 301d 	ldrb.w	r3, [sp, #29]
 8012246:	2b00      	cmp	r3, #0
 8012248:	d03a      	beq.n	80122c0 <wait_session_status+0x190>
 801224a:	9f04      	ldr	r7, [sp, #16]
 801224c:	e00a      	b.n	8012264 <wait_session_status+0x134>
 801224e:	f04f 0302 	mov.w	r3, #2
 8012252:	f88d 702c 	strb.w	r7, [sp, #44]	@ 0x2c
 8012256:	f88d 602d 	strb.w	r6, [sp, #45]	@ 0x2d
 801225a:	f88d 302e 	strb.w	r3, [sp, #46]	@ 0x2e
 801225e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8012260:	f7ff fb98 	bl	8011994 <read_submessage_list>
 8012264:	a914      	add	r1, sp, #80	@ 0x50
 8012266:	2204      	movs	r2, #4
 8012268:	4640      	mov	r0, r8
 801226a:	f006 ff05 	bl	8019078 <uxr_next_input_reliable_buffer_available>
 801226e:	4603      	mov	r3, r0
 8012270:	a914      	add	r1, sp, #80	@ 0x50
 8012272:	4620      	mov	r0, r4
 8012274:	2b00      	cmp	r3, #0
 8012276:	d1ea      	bne.n	801224e <wait_session_status+0x11e>
 8012278:	9904      	ldr	r1, [sp, #16]
 801227a:	4632      	mov	r2, r6
 801227c:	4620      	mov	r0, r4
 801227e:	f7ff fa03 	bl	8011688 <write_submessage_acknack.isra.0>
 8012282:	e76f      	b.n	8012164 <wait_session_status+0x34>
 8012284:	4631      	mov	r1, r6
 8012286:	f104 0008 	add.w	r0, r4, #8
 801228a:	f001 f82d 	bl	80132e8 <uxr_get_input_best_effort_stream>
 801228e:	2800      	cmp	r0, #0
 8012290:	f43f af68 	beq.w	8012164 <wait_session_status+0x34>
 8012294:	9902      	ldr	r1, [sp, #8]
 8012296:	f006 fddb 	bl	8018e50 <uxr_receive_best_effort_message>
 801229a:	2800      	cmp	r0, #0
 801229c:	f43f af62 	beq.w	8012164 <wait_session_status+0x34>
 80122a0:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 80122a4:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80122a6:	a90c      	add	r1, sp, #48	@ 0x30
 80122a8:	4620      	mov	r0, r4
 80122aa:	f7ff fb73 	bl	8011994 <read_submessage_list>
 80122ae:	e759      	b.n	8012164 <wait_session_status+0x34>
 80122b0:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 80122b2:	e9d3 0400 	ldrd	r0, r4, [r3]
 80122b6:	47a0      	blx	r4
 80122b8:	2001      	movs	r0, #1
 80122ba:	b01d      	add	sp, #116	@ 0x74
 80122bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80122c0:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 80122c4:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80122c6:	a90c      	add	r1, sp, #48	@ 0x30
 80122c8:	4620      	mov	r0, r4
 80122ca:	f7ff fb63 	bl	8011994 <read_submessage_list>
 80122ce:	e7bc      	b.n	801224a <wait_session_status+0x11a>

080122d0 <uxr_delete_session_retries>:
 80122d0:	b530      	push	{r4, r5, lr}
 80122d2:	b08f      	sub	sp, #60	@ 0x3c
 80122d4:	4604      	mov	r4, r0
 80122d6:	460d      	mov	r5, r1
 80122d8:	f000 fa2e 	bl	8012738 <uxr_session_header_offset>
 80122dc:	2300      	movs	r3, #0
 80122de:	2210      	movs	r2, #16
 80122e0:	9000      	str	r0, [sp, #0]
 80122e2:	a902      	add	r1, sp, #8
 80122e4:	a806      	add	r0, sp, #24
 80122e6:	f7fb fd11 	bl	800dd0c <ucdr_init_buffer_origin_offset>
 80122ea:	a906      	add	r1, sp, #24
 80122ec:	4620      	mov	r0, r4
 80122ee:	f000 f973 	bl	80125d8 <uxr_buffer_delete_session>
 80122f2:	2200      	movs	r2, #0
 80122f4:	4611      	mov	r1, r2
 80122f6:	9b06      	ldr	r3, [sp, #24]
 80122f8:	4620      	mov	r0, r4
 80122fa:	f000 f9c7 	bl	801268c <uxr_stamp_session_header>
 80122fe:	a806      	add	r0, sp, #24
 8012300:	f7fb fd42 	bl	800dd88 <ucdr_buffer_length>
 8012304:	462b      	mov	r3, r5
 8012306:	4602      	mov	r2, r0
 8012308:	a902      	add	r1, sp, #8
 801230a:	4620      	mov	r0, r4
 801230c:	f7ff ff10 	bl	8012130 <wait_session_status>
 8012310:	b118      	cbz	r0, 801231a <uxr_delete_session_retries+0x4a>
 8012312:	7960      	ldrb	r0, [r4, #5]
 8012314:	fab0 f080 	clz	r0, r0
 8012318:	0940      	lsrs	r0, r0, #5
 801231a:	b00f      	add	sp, #60	@ 0x3c
 801231c:	bd30      	pop	{r4, r5, pc}
 801231e:	bf00      	nop

08012320 <uxr_create_session>:
 8012320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012324:	f100 0b08 	add.w	fp, r0, #8
 8012328:	b0ab      	sub	sp, #172	@ 0xac
 801232a:	4604      	mov	r4, r0
 801232c:	4658      	mov	r0, fp
 801232e:	f000 ff2b 	bl	8013188 <uxr_reset_stream_storage>
 8012332:	4620      	mov	r0, r4
 8012334:	f000 fa00 	bl	8012738 <uxr_session_header_offset>
 8012338:	2300      	movs	r3, #0
 801233a:	9000      	str	r0, [sp, #0]
 801233c:	221c      	movs	r2, #28
 801233e:	a90b      	add	r1, sp, #44	@ 0x2c
 8012340:	a812      	add	r0, sp, #72	@ 0x48
 8012342:	f7fb fce3 	bl	800dd0c <ucdr_init_buffer_origin_offset>
 8012346:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8012348:	8a1a      	ldrh	r2, [r3, #16]
 801234a:	3a04      	subs	r2, #4
 801234c:	b292      	uxth	r2, r2
 801234e:	a912      	add	r1, sp, #72	@ 0x48
 8012350:	4620      	mov	r0, r4
 8012352:	f000 f917 	bl	8012584 <uxr_buffer_create_session>
 8012356:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8012358:	4620      	mov	r0, r4
 801235a:	f000 f983 	bl	8012664 <uxr_stamp_create_session_header>
 801235e:	a812      	add	r0, sp, #72	@ 0x48
 8012360:	f7fb fd12 	bl	800dd88 <ucdr_buffer_length>
 8012364:	23ff      	movs	r3, #255	@ 0xff
 8012366:	7163      	strb	r3, [r4, #5]
 8012368:	230a      	movs	r3, #10
 801236a:	46da      	mov	sl, fp
 801236c:	9303      	str	r3, [sp, #12]
 801236e:	4683      	mov	fp, r0
 8012370:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8012372:	465a      	mov	r2, fp
 8012374:	e9d3 0500 	ldrd	r0, r5, [r3]
 8012378:	a90b      	add	r1, sp, #44	@ 0x2c
 801237a:	47a8      	blx	r5
 801237c:	f001 f824 	bl	80133c8 <uxr_millis>
 8012380:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8012384:	4605      	mov	r5, r0
 8012386:	e009      	b.n	801239c <uxr_create_session+0x7c>
 8012388:	f001 f81e 	bl	80133c8 <uxr_millis>
 801238c:	1b40      	subs	r0, r0, r5
 801238e:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 8012392:	2b00      	cmp	r3, #0
 8012394:	7962      	ldrb	r2, [r4, #5]
 8012396:	dd38      	ble.n	801240a <uxr_create_session+0xea>
 8012398:	2aff      	cmp	r2, #255	@ 0xff
 801239a:	d13c      	bne.n	8012416 <uxr_create_session+0xf6>
 801239c:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 801239e:	a907      	add	r1, sp, #28
 80123a0:	6896      	ldr	r6, [r2, #8]
 80123a2:	6810      	ldr	r0, [r2, #0]
 80123a4:	aa08      	add	r2, sp, #32
 80123a6:	47b0      	blx	r6
 80123a8:	2800      	cmp	r0, #0
 80123aa:	d0ed      	beq.n	8012388 <uxr_create_session+0x68>
 80123ac:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 80123b0:	a81a      	add	r0, sp, #104	@ 0x68
 80123b2:	f7fb fcbd 	bl	800dd30 <ucdr_init_buffer>
 80123b6:	2600      	movs	r6, #0
 80123b8:	f10d 031a 	add.w	r3, sp, #26
 80123bc:	aa06      	add	r2, sp, #24
 80123be:	a91a      	add	r1, sp, #104	@ 0x68
 80123c0:	4620      	mov	r0, r4
 80123c2:	f88d 6018 	strb.w	r6, [sp, #24]
 80123c6:	f000 f975 	bl	80126b4 <uxr_read_session_header>
 80123ca:	2800      	cmp	r0, #0
 80123cc:	d0dc      	beq.n	8012388 <uxr_create_session+0x68>
 80123ce:	4631      	mov	r1, r6
 80123d0:	f89d 0018 	ldrb.w	r0, [sp, #24]
 80123d4:	f000 fea4 	bl	8013120 <uxr_stream_id_from_raw>
 80123d8:	f3c0 4607 	ubfx	r6, r0, #16, #8
 80123dc:	2e01      	cmp	r6, #1
 80123de:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 80123e2:	f8bd 901a 	ldrh.w	r9, [sp, #26]
 80123e6:	f3c0 2707 	ubfx	r7, r0, #8, #8
 80123ea:	d053      	beq.n	8012494 <uxr_create_session+0x174>
 80123ec:	2e02      	cmp	r6, #2
 80123ee:	d018      	beq.n	8012422 <uxr_create_session+0x102>
 80123f0:	2e00      	cmp	r6, #0
 80123f2:	d1c9      	bne.n	8012388 <uxr_create_session+0x68>
 80123f4:	4631      	mov	r1, r6
 80123f6:	4630      	mov	r0, r6
 80123f8:	f000 fe92 	bl	8013120 <uxr_stream_id_from_raw>
 80123fc:	a91a      	add	r1, sp, #104	@ 0x68
 80123fe:	4602      	mov	r2, r0
 8012400:	900a      	str	r0, [sp, #40]	@ 0x28
 8012402:	4620      	mov	r0, r4
 8012404:	f7ff fac6 	bl	8011994 <read_submessage_list>
 8012408:	e7be      	b.n	8012388 <uxr_create_session+0x68>
 801240a:	9b03      	ldr	r3, [sp, #12]
 801240c:	3b01      	subs	r3, #1
 801240e:	9303      	str	r3, [sp, #12]
 8012410:	d001      	beq.n	8012416 <uxr_create_session+0xf6>
 8012412:	2aff      	cmp	r2, #255	@ 0xff
 8012414:	d0ac      	beq.n	8012370 <uxr_create_session+0x50>
 8012416:	2a00      	cmp	r2, #0
 8012418:	d051      	beq.n	80124be <uxr_create_session+0x19e>
 801241a:	2000      	movs	r0, #0
 801241c:	b02b      	add	sp, #172	@ 0xac
 801241e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012422:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 8012426:	9304      	str	r3, [sp, #16]
 8012428:	4639      	mov	r1, r7
 801242a:	4650      	mov	r0, sl
 801242c:	f000 ff66 	bl	80132fc <uxr_get_input_reliable_stream>
 8012430:	4680      	mov	r8, r0
 8012432:	b348      	cbz	r0, 8012488 <uxr_create_session+0x168>
 8012434:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8012436:	9205      	str	r2, [sp, #20]
 8012438:	a81a      	add	r0, sp, #104	@ 0x68
 801243a:	f7fb fca9 	bl	800dd90 <ucdr_buffer_remaining>
 801243e:	4603      	mov	r3, r0
 8012440:	f10d 0019 	add.w	r0, sp, #25
 8012444:	9000      	str	r0, [sp, #0]
 8012446:	9a05      	ldr	r2, [sp, #20]
 8012448:	4649      	mov	r1, r9
 801244a:	4640      	mov	r0, r8
 801244c:	f006 fd94 	bl	8018f78 <uxr_receive_reliable_message>
 8012450:	b1d0      	cbz	r0, 8012488 <uxr_create_session+0x168>
 8012452:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8012456:	2b00      	cmp	r3, #0
 8012458:	d038      	beq.n	80124cc <uxr_create_session+0x1ac>
 801245a:	9e04      	ldr	r6, [sp, #16]
 801245c:	e00a      	b.n	8012474 <uxr_create_session+0x154>
 801245e:	f04f 0302 	mov.w	r3, #2
 8012462:	f88d 6028 	strb.w	r6, [sp, #40]	@ 0x28
 8012466:	f88d 7029 	strb.w	r7, [sp, #41]	@ 0x29
 801246a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801246e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8012470:	f7ff fa90 	bl	8011994 <read_submessage_list>
 8012474:	a922      	add	r1, sp, #136	@ 0x88
 8012476:	2204      	movs	r2, #4
 8012478:	4640      	mov	r0, r8
 801247a:	f006 fdfd 	bl	8019078 <uxr_next_input_reliable_buffer_available>
 801247e:	4603      	mov	r3, r0
 8012480:	a922      	add	r1, sp, #136	@ 0x88
 8012482:	4620      	mov	r0, r4
 8012484:	2b00      	cmp	r3, #0
 8012486:	d1ea      	bne.n	801245e <uxr_create_session+0x13e>
 8012488:	9904      	ldr	r1, [sp, #16]
 801248a:	463a      	mov	r2, r7
 801248c:	4620      	mov	r0, r4
 801248e:	f7ff f8fb 	bl	8011688 <write_submessage_acknack.isra.0>
 8012492:	e779      	b.n	8012388 <uxr_create_session+0x68>
 8012494:	4639      	mov	r1, r7
 8012496:	4650      	mov	r0, sl
 8012498:	f000 ff26 	bl	80132e8 <uxr_get_input_best_effort_stream>
 801249c:	2800      	cmp	r0, #0
 801249e:	f43f af73 	beq.w	8012388 <uxr_create_session+0x68>
 80124a2:	4649      	mov	r1, r9
 80124a4:	f006 fcd4 	bl	8018e50 <uxr_receive_best_effort_message>
 80124a8:	2800      	cmp	r0, #0
 80124aa:	f43f af6d 	beq.w	8012388 <uxr_create_session+0x68>
 80124ae:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 80124b2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80124b4:	a91a      	add	r1, sp, #104	@ 0x68
 80124b6:	4620      	mov	r0, r4
 80124b8:	f7ff fa6c 	bl	8011994 <read_submessage_list>
 80124bc:	e764      	b.n	8012388 <uxr_create_session+0x68>
 80124be:	4650      	mov	r0, sl
 80124c0:	f000 fe62 	bl	8013188 <uxr_reset_stream_storage>
 80124c4:	2001      	movs	r0, #1
 80124c6:	b02b      	add	sp, #172	@ 0xac
 80124c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80124cc:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 80124d0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80124d2:	a91a      	add	r1, sp, #104	@ 0x68
 80124d4:	4620      	mov	r0, r4
 80124d6:	f7ff fa5d 	bl	8011994 <read_submessage_list>
 80124da:	e7be      	b.n	801245a <uxr_create_session+0x13a>

080124dc <uxr_prepare_stream_to_write_submessage>:
 80124dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80124e0:	b082      	sub	sp, #8
 80124e2:	4682      	mov	sl, r0
 80124e4:	4610      	mov	r0, r2
 80124e6:	4615      	mov	r5, r2
 80124e8:	461e      	mov	r6, r3
 80124ea:	f89d 7028 	ldrb.w	r7, [sp, #40]	@ 0x28
 80124ee:	f89d 802c 	ldrb.w	r8, [sp, #44]	@ 0x2c
 80124f2:	9101      	str	r1, [sp, #4]
 80124f4:	f3c1 2407 	ubfx	r4, r1, #8, #8
 80124f8:	f000 ff60 	bl	80133bc <uxr_submessage_padding>
 80124fc:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8012500:	f105 0904 	add.w	r9, r5, #4
 8012504:	2b01      	cmp	r3, #1
 8012506:	4481      	add	r9, r0
 8012508:	d01d      	beq.n	8012546 <uxr_prepare_stream_to_write_submessage+0x6a>
 801250a:	2b02      	cmp	r3, #2
 801250c:	d116      	bne.n	801253c <uxr_prepare_stream_to_write_submessage+0x60>
 801250e:	4621      	mov	r1, r4
 8012510:	f10a 0008 	add.w	r0, sl, #8
 8012514:	f000 fede 	bl	80132d4 <uxr_get_output_reliable_stream>
 8012518:	4604      	mov	r4, r0
 801251a:	b158      	cbz	r0, 8012534 <uxr_prepare_stream_to_write_submessage+0x58>
 801251c:	4649      	mov	r1, r9
 801251e:	4632      	mov	r2, r6
 8012520:	f006 ff66 	bl	80193f0 <uxr_prepare_reliable_buffer_to_write>
 8012524:	4604      	mov	r4, r0
 8012526:	b12c      	cbz	r4, 8012534 <uxr_prepare_stream_to_write_submessage+0x58>
 8012528:	4643      	mov	r3, r8
 801252a:	b2aa      	uxth	r2, r5
 801252c:	4639      	mov	r1, r7
 801252e:	4630      	mov	r0, r6
 8012530:	f000 ff04 	bl	801333c <uxr_buffer_submessage_header>
 8012534:	4620      	mov	r0, r4
 8012536:	b002      	add	sp, #8
 8012538:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801253c:	2400      	movs	r4, #0
 801253e:	4620      	mov	r0, r4
 8012540:	b002      	add	sp, #8
 8012542:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012546:	4621      	mov	r1, r4
 8012548:	f10a 0008 	add.w	r0, sl, #8
 801254c:	f000 feba 	bl	80132c4 <uxr_get_output_best_effort_stream>
 8012550:	4604      	mov	r4, r0
 8012552:	2800      	cmp	r0, #0
 8012554:	d0ee      	beq.n	8012534 <uxr_prepare_stream_to_write_submessage+0x58>
 8012556:	4649      	mov	r1, r9
 8012558:	4632      	mov	r2, r6
 801255a:	f006 fe79 	bl	8019250 <uxr_prepare_best_effort_buffer_to_write>
 801255e:	4604      	mov	r4, r0
 8012560:	e7e1      	b.n	8012526 <uxr_prepare_stream_to_write_submessage+0x4a>
 8012562:	bf00      	nop

08012564 <uxr_init_session_info>:
 8012564:	0e13      	lsrs	r3, r2, #24
 8012566:	7043      	strb	r3, [r0, #1]
 8012568:	f3c2 2307 	ubfx	r3, r2, #8, #8
 801256c:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 8012570:	7001      	strb	r1, [r0, #0]
 8012572:	70c3      	strb	r3, [r0, #3]
 8012574:	2109      	movs	r1, #9
 8012576:	23ff      	movs	r3, #255	@ 0xff
 8012578:	f880 c002 	strb.w	ip, [r0, #2]
 801257c:	7102      	strb	r2, [r0, #4]
 801257e:	80c1      	strh	r1, [r0, #6]
 8012580:	7143      	strb	r3, [r0, #5]
 8012582:	4770      	bx	lr

08012584 <uxr_buffer_create_session>:
 8012584:	b530      	push	{r4, r5, lr}
 8012586:	b089      	sub	sp, #36	@ 0x24
 8012588:	2300      	movs	r3, #0
 801258a:	4d12      	ldr	r5, [pc, #72]	@ (80125d4 <uxr_buffer_create_session+0x50>)
 801258c:	9307      	str	r3, [sp, #28]
 801258e:	f8ad 201c 	strh.w	r2, [sp, #28]
 8012592:	2201      	movs	r2, #1
 8012594:	9301      	str	r3, [sp, #4]
 8012596:	80c2      	strh	r2, [r0, #6]
 8012598:	f88d 2004 	strb.w	r2, [sp, #4]
 801259c:	682a      	ldr	r2, [r5, #0]
 801259e:	9200      	str	r2, [sp, #0]
 80125a0:	88aa      	ldrh	r2, [r5, #4]
 80125a2:	f8ad 2006 	strh.w	r2, [sp, #6]
 80125a6:	f8d0 2001 	ldr.w	r2, [r0, #1]
 80125aa:	9202      	str	r2, [sp, #8]
 80125ac:	460c      	mov	r4, r1
 80125ae:	7802      	ldrb	r2, [r0, #0]
 80125b0:	9303      	str	r3, [sp, #12]
 80125b2:	4619      	mov	r1, r3
 80125b4:	f88d 200c 	strb.w	r2, [sp, #12]
 80125b8:	4620      	mov	r0, r4
 80125ba:	2210      	movs	r2, #16
 80125bc:	e9cd 3304 	strd	r3, r3, [sp, #16]
 80125c0:	9306      	str	r3, [sp, #24]
 80125c2:	f000 febb 	bl	801333c <uxr_buffer_submessage_header>
 80125c6:	4669      	mov	r1, sp
 80125c8:	4620      	mov	r0, r4
 80125ca:	f001 feff 	bl	80143cc <uxr_serialize_CREATE_CLIENT_Payload>
 80125ce:	b009      	add	sp, #36	@ 0x24
 80125d0:	bd30      	pop	{r4, r5, pc}
 80125d2:	bf00      	nop
 80125d4:	0801ccec 	.word	0x0801ccec

080125d8 <uxr_buffer_delete_session>:
 80125d8:	b510      	push	{r4, lr}
 80125da:	4b0c      	ldr	r3, [pc, #48]	@ (801260c <uxr_buffer_delete_session+0x34>)
 80125dc:	b082      	sub	sp, #8
 80125de:	f8b3 c008 	ldrh.w	ip, [r3, #8]
 80125e2:	f8ad c006 	strh.w	ip, [sp, #6]
 80125e6:	460c      	mov	r4, r1
 80125e8:	2202      	movs	r2, #2
 80125ea:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80125ee:	80c2      	strh	r2, [r0, #6]
 80125f0:	f8ad 3004 	strh.w	r3, [sp, #4]
 80125f4:	2204      	movs	r2, #4
 80125f6:	2300      	movs	r3, #0
 80125f8:	2103      	movs	r1, #3
 80125fa:	4620      	mov	r0, r4
 80125fc:	f000 fe9e 	bl	801333c <uxr_buffer_submessage_header>
 8012600:	a901      	add	r1, sp, #4
 8012602:	4620      	mov	r0, r4
 8012604:	f001 ff88 	bl	8014518 <uxr_serialize_DELETE_Payload>
 8012608:	b002      	add	sp, #8
 801260a:	bd10      	pop	{r4, pc}
 801260c:	0801ccec 	.word	0x0801ccec

08012610 <uxr_read_create_session_status>:
 8012610:	b510      	push	{r4, lr}
 8012612:	b088      	sub	sp, #32
 8012614:	4604      	mov	r4, r0
 8012616:	4608      	mov	r0, r1
 8012618:	a901      	add	r1, sp, #4
 801261a:	f001 ff8d 	bl	8014538 <uxr_deserialize_STATUS_AGENT_Payload>
 801261e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8012622:	7163      	strb	r3, [r4, #5]
 8012624:	b008      	add	sp, #32
 8012626:	bd10      	pop	{r4, pc}

08012628 <uxr_read_delete_session_status>:
 8012628:	b510      	push	{r4, lr}
 801262a:	4604      	mov	r4, r0
 801262c:	b084      	sub	sp, #16
 801262e:	4608      	mov	r0, r1
 8012630:	a902      	add	r1, sp, #8
 8012632:	f001 ffb1 	bl	8014598 <uxr_deserialize_STATUS_Payload>
 8012636:	88e3      	ldrh	r3, [r4, #6]
 8012638:	2b02      	cmp	r3, #2
 801263a:	d001      	beq.n	8012640 <uxr_read_delete_session_status+0x18>
 801263c:	b004      	add	sp, #16
 801263e:	bd10      	pop	{r4, pc}
 8012640:	f10d 000a 	add.w	r0, sp, #10
 8012644:	f7fe fe76 	bl	8011334 <uxr_object_id_from_raw>
 8012648:	f89d 2008 	ldrb.w	r2, [sp, #8]
 801264c:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8012650:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8012654:	b29b      	uxth	r3, r3
 8012656:	2b02      	cmp	r3, #2
 8012658:	bf04      	itt	eq
 801265a:	f89d 300c 	ldrbeq.w	r3, [sp, #12]
 801265e:	7163      	strbeq	r3, [r4, #5]
 8012660:	b004      	add	sp, #16
 8012662:	bd10      	pop	{r4, pc}

08012664 <uxr_stamp_create_session_header>:
 8012664:	b510      	push	{r4, lr}
 8012666:	2208      	movs	r2, #8
 8012668:	b08a      	sub	sp, #40	@ 0x28
 801266a:	4604      	mov	r4, r0
 801266c:	eb0d 0002 	add.w	r0, sp, r2
 8012670:	f7fb fb5e 	bl	800dd30 <ucdr_init_buffer>
 8012674:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012678:	9400      	str	r4, [sp, #0]
 801267a:	2300      	movs	r3, #0
 801267c:	461a      	mov	r2, r3
 801267e:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 8012682:	a802      	add	r0, sp, #8
 8012684:	f001 f854 	bl	8013730 <uxr_serialize_message_header>
 8012688:	b00a      	add	sp, #40	@ 0x28
 801268a:	bd10      	pop	{r4, pc}

0801268c <uxr_stamp_session_header>:
 801268c:	b530      	push	{r4, r5, lr}
 801268e:	b08d      	sub	sp, #52	@ 0x34
 8012690:	4604      	mov	r4, r0
 8012692:	460d      	mov	r5, r1
 8012694:	9203      	str	r2, [sp, #12]
 8012696:	4619      	mov	r1, r3
 8012698:	a804      	add	r0, sp, #16
 801269a:	2208      	movs	r2, #8
 801269c:	f7fb fb48 	bl	800dd30 <ucdr_init_buffer>
 80126a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80126a4:	9b03      	ldr	r3, [sp, #12]
 80126a6:	9400      	str	r4, [sp, #0]
 80126a8:	462a      	mov	r2, r5
 80126aa:	a804      	add	r0, sp, #16
 80126ac:	f001 f840 	bl	8013730 <uxr_serialize_message_header>
 80126b0:	b00d      	add	sp, #52	@ 0x34
 80126b2:	bd30      	pop	{r4, r5, pc}

080126b4 <uxr_read_session_header>:
 80126b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80126b8:	4607      	mov	r7, r0
 80126ba:	b084      	sub	sp, #16
 80126bc:	4608      	mov	r0, r1
 80126be:	460c      	mov	r4, r1
 80126c0:	4615      	mov	r5, r2
 80126c2:	461e      	mov	r6, r3
 80126c4:	f7fb fb64 	bl	800dd90 <ucdr_buffer_remaining>
 80126c8:	2808      	cmp	r0, #8
 80126ca:	d803      	bhi.n	80126d4 <uxr_read_session_header+0x20>
 80126cc:	2000      	movs	r0, #0
 80126ce:	b004      	add	sp, #16
 80126d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80126d4:	f10d 080c 	add.w	r8, sp, #12
 80126d8:	4633      	mov	r3, r6
 80126da:	462a      	mov	r2, r5
 80126dc:	f8cd 8000 	str.w	r8, [sp]
 80126e0:	4620      	mov	r0, r4
 80126e2:	f10d 010b 	add.w	r1, sp, #11
 80126e6:	f001 f841 	bl	801376c <uxr_deserialize_message_header>
 80126ea:	783a      	ldrb	r2, [r7, #0]
 80126ec:	f89d 300b 	ldrb.w	r3, [sp, #11]
 80126f0:	4293      	cmp	r3, r2
 80126f2:	d1eb      	bne.n	80126cc <uxr_read_session_header+0x18>
 80126f4:	061b      	lsls	r3, r3, #24
 80126f6:	d41c      	bmi.n	8012732 <uxr_read_session_header+0x7e>
 80126f8:	f89d 200c 	ldrb.w	r2, [sp, #12]
 80126fc:	787b      	ldrb	r3, [r7, #1]
 80126fe:	429a      	cmp	r2, r3
 8012700:	d003      	beq.n	801270a <uxr_read_session_header+0x56>
 8012702:	2001      	movs	r0, #1
 8012704:	f080 0001 	eor.w	r0, r0, #1
 8012708:	e7e1      	b.n	80126ce <uxr_read_session_header+0x1a>
 801270a:	f89d 200d 	ldrb.w	r2, [sp, #13]
 801270e:	78bb      	ldrb	r3, [r7, #2]
 8012710:	429a      	cmp	r2, r3
 8012712:	f107 0102 	add.w	r1, r7, #2
 8012716:	d1f4      	bne.n	8012702 <uxr_read_session_header+0x4e>
 8012718:	f89d 200e 	ldrb.w	r2, [sp, #14]
 801271c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8012720:	429a      	cmp	r2, r3
 8012722:	d1ee      	bne.n	8012702 <uxr_read_session_header+0x4e>
 8012724:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8012728:	784b      	ldrb	r3, [r1, #1]
 801272a:	429a      	cmp	r2, r3
 801272c:	d1e9      	bne.n	8012702 <uxr_read_session_header+0x4e>
 801272e:	2000      	movs	r0, #0
 8012730:	e7e8      	b.n	8012704 <uxr_read_session_header+0x50>
 8012732:	2001      	movs	r0, #1
 8012734:	e7cb      	b.n	80126ce <uxr_read_session_header+0x1a>
 8012736:	bf00      	nop

08012738 <uxr_session_header_offset>:
 8012738:	f990 3000 	ldrsb.w	r3, [r0]
 801273c:	2b00      	cmp	r3, #0
 801273e:	bfac      	ite	ge
 8012740:	2008      	movge	r0, #8
 8012742:	2004      	movlt	r0, #4
 8012744:	4770      	bx	lr
 8012746:	bf00      	nop

08012748 <uxr_init_base_object_request>:
 8012748:	b510      	push	{r4, lr}
 801274a:	88c3      	ldrh	r3, [r0, #6]
 801274c:	b082      	sub	sp, #8
 801274e:	f64f 74f4 	movw	r4, #65524	@ 0xfff4
 8012752:	9101      	str	r1, [sp, #4]
 8012754:	f1a3 010a 	sub.w	r1, r3, #10
 8012758:	b289      	uxth	r1, r1
 801275a:	42a1      	cmp	r1, r4
 801275c:	d80e      	bhi.n	801277c <uxr_init_base_object_request+0x34>
 801275e:	3301      	adds	r3, #1
 8012760:	b29c      	uxth	r4, r3
 8012762:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8012766:	b2db      	uxtb	r3, r3
 8012768:	80c4      	strh	r4, [r0, #6]
 801276a:	9801      	ldr	r0, [sp, #4]
 801276c:	7011      	strb	r1, [r2, #0]
 801276e:	7053      	strb	r3, [r2, #1]
 8012770:	1c91      	adds	r1, r2, #2
 8012772:	f7fe fdf3 	bl	801135c <uxr_object_id_to_raw>
 8012776:	4620      	mov	r0, r4
 8012778:	b002      	add	sp, #8
 801277a:	bd10      	pop	{r4, pc}
 801277c:	230a      	movs	r3, #10
 801277e:	2100      	movs	r1, #0
 8012780:	461c      	mov	r4, r3
 8012782:	e7f1      	b.n	8012768 <uxr_init_base_object_request+0x20>

08012784 <uxr_parse_base_object_request>:
 8012784:	b570      	push	{r4, r5, r6, lr}
 8012786:	4604      	mov	r4, r0
 8012788:	3002      	adds	r0, #2
 801278a:	460d      	mov	r5, r1
 801278c:	4616      	mov	r6, r2
 801278e:	f7fe fdd1 	bl	8011334 <uxr_object_id_from_raw>
 8012792:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8012796:	8028      	strh	r0, [r5, #0]
 8012798:	806b      	strh	r3, [r5, #2]
 801279a:	7822      	ldrb	r2, [r4, #0]
 801279c:	7863      	ldrb	r3, [r4, #1]
 801279e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80127a2:	8033      	strh	r3, [r6, #0]
 80127a4:	bd70      	pop	{r4, r5, r6, pc}
 80127a6:	bf00      	nop

080127a8 <uxr_init_framing_io>:
 80127a8:	2300      	movs	r3, #0
 80127aa:	7041      	strb	r1, [r0, #1]
 80127ac:	7003      	strb	r3, [r0, #0]
 80127ae:	8583      	strh	r3, [r0, #44]	@ 0x2c
 80127b0:	4770      	bx	lr
 80127b2:	bf00      	nop

080127b4 <uxr_write_framed_msg>:
 80127b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80127b8:	4617      	mov	r7, r2
 80127ba:	7842      	ldrb	r2, [r0, #1]
 80127bc:	b083      	sub	sp, #12
 80127be:	460e      	mov	r6, r1
 80127c0:	f1a2 017d 	sub.w	r1, r2, #125	@ 0x7d
 80127c4:	469a      	mov	sl, r3
 80127c6:	2901      	cmp	r1, #1
 80127c8:	f04f 037e 	mov.w	r3, #126	@ 0x7e
 80127cc:	4604      	mov	r4, r0
 80127ce:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
 80127d2:	f8dd b038 	ldr.w	fp, [sp, #56]	@ 0x38
 80127d6:	f89d 0034 	ldrb.w	r0, [sp, #52]	@ 0x34
 80127da:	f240 8137 	bls.w	8012a4c <uxr_write_framed_msg+0x298>
 80127de:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 80127e2:	f884 2039 	strb.w	r2, [r4, #57]	@ 0x39
 80127e6:	2901      	cmp	r1, #1
 80127e8:	f04f 0202 	mov.w	r2, #2
 80127ec:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80127f0:	f240 808f 	bls.w	8012912 <uxr_write_framed_msg+0x15e>
 80127f4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80127f6:	f884 003a 	strb.w	r0, [r4, #58]	@ 0x3a
 80127fa:	b2dd      	uxtb	r5, r3
 80127fc:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 8012800:	2203      	movs	r2, #3
 8012802:	2901      	cmp	r1, #1
 8012804:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8012808:	f240 809a 	bls.w	8012940 <uxr_write_framed_msg+0x18c>
 801280c:	18a1      	adds	r1, r4, r2
 801280e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012810:	f881 5038 	strb.w	r5, [r1, #56]	@ 0x38
 8012814:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8012818:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 801281c:	3201      	adds	r2, #1
 801281e:	2801      	cmp	r0, #1
 8012820:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8012824:	f240 80a0 	bls.w	8012968 <uxr_write_framed_msg+0x1b4>
 8012828:	18a0      	adds	r0, r4, r2
 801282a:	3201      	adds	r2, #1
 801282c:	b2d2      	uxtb	r2, r2
 801282e:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 8012832:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8012836:	2b00      	cmp	r3, #0
 8012838:	f000 80a9 	beq.w	801298e <uxr_write_framed_msg+0x1da>
 801283c:	f04f 0900 	mov.w	r9, #0
 8012840:	46c8      	mov	r8, r9
 8012842:	f81a 3008 	ldrb.w	r3, [sl, r8]
 8012846:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 801284a:	2901      	cmp	r1, #1
 801284c:	f240 80c3 	bls.w	80129d6 <uxr_write_framed_msg+0x222>
 8012850:	2a29      	cmp	r2, #41	@ 0x29
 8012852:	f200 809f 	bhi.w	8012994 <uxr_write_framed_msg+0x1e0>
 8012856:	18a1      	adds	r1, r4, r2
 8012858:	3201      	adds	r2, #1
 801285a:	b2d2      	uxtb	r2, r2
 801285c:	f881 3038 	strb.w	r3, [r1, #56]	@ 0x38
 8012860:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8012864:	ea89 0303 	eor.w	r3, r9, r3
 8012868:	498c      	ldr	r1, [pc, #560]	@ (8012a9c <uxr_write_framed_msg+0x2e8>)
 801286a:	b2db      	uxtb	r3, r3
 801286c:	f108 0801 	add.w	r8, r8, #1
 8012870:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8012874:	ea83 2919 	eor.w	r9, r3, r9, lsr #8
 8012878:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801287a:	4543      	cmp	r3, r8
 801287c:	d8e1      	bhi.n	8012842 <uxr_write_framed_msg+0x8e>
 801287e:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8012882:	fa5f f889 	uxtb.w	r8, r9
 8012886:	9301      	str	r3, [sp, #4]
 8012888:	f04f 0900 	mov.w	r9, #0
 801288c:	f1a8 0a7d 	sub.w	sl, r8, #125	@ 0x7d
 8012890:	fa5f f18a 	uxtb.w	r1, sl
 8012894:	2901      	cmp	r1, #1
 8012896:	d921      	bls.n	80128dc <uxr_write_framed_msg+0x128>
 8012898:	2a29      	cmp	r2, #41	@ 0x29
 801289a:	f240 80af 	bls.w	80129fc <uxr_write_framed_msg+0x248>
 801289e:	2500      	movs	r5, #0
 80128a0:	e000      	b.n	80128a4 <uxr_write_framed_msg+0xf0>
 80128a2:	b160      	cbz	r0, 80128be <uxr_write_framed_msg+0x10a>
 80128a4:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 80128a8:	1b52      	subs	r2, r2, r5
 80128aa:	465b      	mov	r3, fp
 80128ac:	4421      	add	r1, r4
 80128ae:	4638      	mov	r0, r7
 80128b0:	47b0      	blx	r6
 80128b2:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 80128b6:	4405      	add	r5, r0
 80128b8:	4295      	cmp	r5, r2
 80128ba:	d3f2      	bcc.n	80128a2 <uxr_write_framed_msg+0xee>
 80128bc:	d003      	beq.n	80128c6 <uxr_write_framed_msg+0x112>
 80128be:	2000      	movs	r0, #0
 80128c0:	b003      	add	sp, #12
 80128c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80128c6:	fa5f f18a 	uxtb.w	r1, sl
 80128ca:	f04f 0300 	mov.w	r3, #0
 80128ce:	2901      	cmp	r1, #1
 80128d0:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 80128d4:	f04f 0200 	mov.w	r2, #0
 80128d8:	f200 8090 	bhi.w	80129fc <uxr_write_framed_msg+0x248>
 80128dc:	1c51      	adds	r1, r2, #1
 80128de:	b2c9      	uxtb	r1, r1
 80128e0:	2929      	cmp	r1, #41	@ 0x29
 80128e2:	d8dc      	bhi.n	801289e <uxr_write_framed_msg+0xea>
 80128e4:	18a5      	adds	r5, r4, r2
 80128e6:	4421      	add	r1, r4
 80128e8:	3202      	adds	r2, #2
 80128ea:	f088 0820 	eor.w	r8, r8, #32
 80128ee:	4648      	mov	r0, r9
 80128f0:	f04f 037d 	mov.w	r3, #125	@ 0x7d
 80128f4:	b2d2      	uxtb	r2, r2
 80128f6:	f885 3038 	strb.w	r3, [r5, #56]	@ 0x38
 80128fa:	f04f 0901 	mov.w	r9, #1
 80128fe:	f881 8038 	strb.w	r8, [r1, #56]	@ 0x38
 8012902:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8012906:	2800      	cmp	r0, #0
 8012908:	f040 8085 	bne.w	8012a16 <uxr_write_framed_msg+0x262>
 801290c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8012910:	e7bc      	b.n	801288c <uxr_write_framed_msg+0xd8>
 8012912:	4611      	mov	r1, r2
 8012914:	f04f 0c03 	mov.w	ip, #3
 8012918:	2204      	movs	r2, #4
 801291a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801291c:	4421      	add	r1, r4
 801291e:	b2dd      	uxtb	r5, r3
 8012920:	f04f 0e7d 	mov.w	lr, #125	@ 0x7d
 8012924:	f881 e038 	strb.w	lr, [r1, #56]	@ 0x38
 8012928:	44a4      	add	ip, r4
 801292a:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 801292e:	f080 0020 	eor.w	r0, r0, #32
 8012932:	2901      	cmp	r1, #1
 8012934:	f88c 0038 	strb.w	r0, [ip, #56]	@ 0x38
 8012938:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801293c:	f63f af66 	bhi.w	801280c <uxr_write_framed_msg+0x58>
 8012940:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012942:	18a0      	adds	r0, r4, r2
 8012944:	f085 0520 	eor.w	r5, r5, #32
 8012948:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 801294c:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8012950:	f880 c038 	strb.w	ip, [r0, #56]	@ 0x38
 8012954:	f880 5039 	strb.w	r5, [r0, #57]	@ 0x39
 8012958:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 801295c:	3202      	adds	r2, #2
 801295e:	2801      	cmp	r0, #1
 8012960:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8012964:	f63f af60 	bhi.w	8012828 <uxr_write_framed_msg+0x74>
 8012968:	1c50      	adds	r0, r2, #1
 801296a:	18a5      	adds	r5, r4, r2
 801296c:	fa54 f080 	uxtab	r0, r4, r0
 8012970:	3202      	adds	r2, #2
 8012972:	f081 0120 	eor.w	r1, r1, #32
 8012976:	b2d2      	uxtb	r2, r2
 8012978:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 801297c:	f885 c038 	strb.w	ip, [r5, #56]	@ 0x38
 8012980:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 8012984:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8012988:	2b00      	cmp	r3, #0
 801298a:	f47f af57 	bne.w	801283c <uxr_write_framed_msg+0x88>
 801298e:	9301      	str	r3, [sp, #4]
 8012990:	4698      	mov	r8, r3
 8012992:	e779      	b.n	8012888 <uxr_write_framed_msg+0xd4>
 8012994:	2500      	movs	r5, #0
 8012996:	e001      	b.n	801299c <uxr_write_framed_msg+0x1e8>
 8012998:	2800      	cmp	r0, #0
 801299a:	d090      	beq.n	80128be <uxr_write_framed_msg+0x10a>
 801299c:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 80129a0:	1b52      	subs	r2, r2, r5
 80129a2:	465b      	mov	r3, fp
 80129a4:	4421      	add	r1, r4
 80129a6:	4638      	mov	r0, r7
 80129a8:	47b0      	blx	r6
 80129aa:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 80129ae:	4405      	add	r5, r0
 80129b0:	4295      	cmp	r5, r2
 80129b2:	d3f1      	bcc.n	8012998 <uxr_write_framed_msg+0x1e4>
 80129b4:	d183      	bne.n	80128be <uxr_write_framed_msg+0x10a>
 80129b6:	f04f 0300 	mov.w	r3, #0
 80129ba:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 80129be:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80129c0:	4543      	cmp	r3, r8
 80129c2:	d964      	bls.n	8012a8e <uxr_write_framed_msg+0x2da>
 80129c4:	f81a 3008 	ldrb.w	r3, [sl, r8]
 80129c8:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 80129cc:	2901      	cmp	r1, #1
 80129ce:	f04f 0200 	mov.w	r2, #0
 80129d2:	f63f af3d 	bhi.w	8012850 <uxr_write_framed_msg+0x9c>
 80129d6:	1c51      	adds	r1, r2, #1
 80129d8:	b2c9      	uxtb	r1, r1
 80129da:	2929      	cmp	r1, #41	@ 0x29
 80129dc:	d8da      	bhi.n	8012994 <uxr_write_framed_msg+0x1e0>
 80129de:	18a0      	adds	r0, r4, r2
 80129e0:	4421      	add	r1, r4
 80129e2:	f04f 057d 	mov.w	r5, #125	@ 0x7d
 80129e6:	3202      	adds	r2, #2
 80129e8:	f880 5038 	strb.w	r5, [r0, #56]	@ 0x38
 80129ec:	b2d2      	uxtb	r2, r2
 80129ee:	f083 0020 	eor.w	r0, r3, #32
 80129f2:	f881 0038 	strb.w	r0, [r1, #56]	@ 0x38
 80129f6:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80129fa:	e733      	b.n	8012864 <uxr_write_framed_msg+0xb0>
 80129fc:	18a1      	adds	r1, r4, r2
 80129fe:	3201      	adds	r2, #1
 8012a00:	4648      	mov	r0, r9
 8012a02:	b2d2      	uxtb	r2, r2
 8012a04:	f881 8038 	strb.w	r8, [r1, #56]	@ 0x38
 8012a08:	f04f 0901 	mov.w	r9, #1
 8012a0c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8012a10:	2800      	cmp	r0, #0
 8012a12:	f43f af7b 	beq.w	801290c <uxr_write_framed_msg+0x158>
 8012a16:	2500      	movs	r5, #0
 8012a18:	e002      	b.n	8012a20 <uxr_write_framed_msg+0x26c>
 8012a1a:	2800      	cmp	r0, #0
 8012a1c:	f43f af4f 	beq.w	80128be <uxr_write_framed_msg+0x10a>
 8012a20:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8012a24:	1b52      	subs	r2, r2, r5
 8012a26:	465b      	mov	r3, fp
 8012a28:	4421      	add	r1, r4
 8012a2a:	4638      	mov	r0, r7
 8012a2c:	47b0      	blx	r6
 8012a2e:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8012a32:	4405      	add	r5, r0
 8012a34:	4295      	cmp	r5, r2
 8012a36:	d3f0      	bcc.n	8012a1a <uxr_write_framed_msg+0x266>
 8012a38:	f47f af41 	bne.w	80128be <uxr_write_framed_msg+0x10a>
 8012a3c:	2300      	movs	r3, #0
 8012a3e:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8012a42:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012a44:	b298      	uxth	r0, r3
 8012a46:	b003      	add	sp, #12
 8012a48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012a4c:	217d      	movs	r1, #125	@ 0x7d
 8012a4e:	f082 0220 	eor.w	r2, r2, #32
 8012a52:	f884 1039 	strb.w	r1, [r4, #57]	@ 0x39
 8012a56:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 8012a5a:	f884 203a 	strb.w	r2, [r4, #58]	@ 0x3a
 8012a5e:	2901      	cmp	r1, #1
 8012a60:	f04f 0203 	mov.w	r2, #3
 8012a64:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8012a68:	d804      	bhi.n	8012a74 <uxr_write_framed_msg+0x2c0>
 8012a6a:	4611      	mov	r1, r2
 8012a6c:	f04f 0c04 	mov.w	ip, #4
 8012a70:	2205      	movs	r2, #5
 8012a72:	e752      	b.n	801291a <uxr_write_framed_msg+0x166>
 8012a74:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012a76:	f884 003b 	strb.w	r0, [r4, #59]	@ 0x3b
 8012a7a:	b2dd      	uxtb	r5, r3
 8012a7c:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 8012a80:	2204      	movs	r2, #4
 8012a82:	2901      	cmp	r1, #1
 8012a84:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8012a88:	f63f aec0 	bhi.w	801280c <uxr_write_framed_msg+0x58>
 8012a8c:	e758      	b.n	8012940 <uxr_write_framed_msg+0x18c>
 8012a8e:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8012a92:	fa5f f889 	uxtb.w	r8, r9
 8012a96:	9301      	str	r3, [sp, #4]
 8012a98:	2200      	movs	r2, #0
 8012a9a:	e6f5      	b.n	8012888 <uxr_write_framed_msg+0xd4>
 8012a9c:	0801df3c 	.word	0x0801df3c

08012aa0 <uxr_framing_read_transport>:
 8012aa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012aa4:	4604      	mov	r4, r0
 8012aa6:	b083      	sub	sp, #12
 8012aa8:	461f      	mov	r7, r3
 8012aaa:	f8dd b034 	ldr.w	fp, [sp, #52]	@ 0x34
 8012aae:	4689      	mov	r9, r1
 8012ab0:	4692      	mov	sl, r2
 8012ab2:	f000 fc89 	bl	80133c8 <uxr_millis>
 8012ab6:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8012aba:	f894 602d 	ldrb.w	r6, [r4, #45]	@ 0x2d
 8012abe:	42b3      	cmp	r3, r6
 8012ac0:	4680      	mov	r8, r0
 8012ac2:	d061      	beq.n	8012b88 <uxr_framing_read_transport+0xe8>
 8012ac4:	d81c      	bhi.n	8012b00 <uxr_framing_read_transport+0x60>
 8012ac6:	1e75      	subs	r5, r6, #1
 8012ac8:	1aed      	subs	r5, r5, r3
 8012aca:	b2ed      	uxtb	r5, r5
 8012acc:	2600      	movs	r6, #0
 8012ace:	455d      	cmp	r5, fp
 8012ad0:	d81f      	bhi.n	8012b12 <uxr_framing_read_transport+0x72>
 8012ad2:	19ab      	adds	r3, r5, r6
 8012ad4:	455b      	cmp	r3, fp
 8012ad6:	bf84      	itt	hi
 8012ad8:	ebab 0605 	subhi.w	r6, fp, r5
 8012adc:	b2f6      	uxtbhi	r6, r6
 8012ade:	b9ed      	cbnz	r5, 8012b1c <uxr_framing_read_transport+0x7c>
 8012ae0:	f04f 0b00 	mov.w	fp, #0
 8012ae4:	f000 fc70 	bl	80133c8 <uxr_millis>
 8012ae8:	683b      	ldr	r3, [r7, #0]
 8012aea:	eba0 0808 	sub.w	r8, r0, r8
 8012aee:	eba3 0308 	sub.w	r3, r3, r8
 8012af2:	4658      	mov	r0, fp
 8012af4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8012af8:	603b      	str	r3, [r7, #0]
 8012afa:	b003      	add	sp, #12
 8012afc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012b00:	2e00      	cmp	r6, #0
 8012b02:	d049      	beq.n	8012b98 <uxr_framing_read_transport+0xf8>
 8012b04:	f1c3 052a 	rsb	r5, r3, #42	@ 0x2a
 8012b08:	b2ed      	uxtb	r5, r5
 8012b0a:	3e01      	subs	r6, #1
 8012b0c:	455d      	cmp	r5, fp
 8012b0e:	b2f6      	uxtb	r6, r6
 8012b10:	d9df      	bls.n	8012ad2 <uxr_framing_read_transport+0x32>
 8012b12:	fa5f f58b 	uxtb.w	r5, fp
 8012b16:	2600      	movs	r6, #0
 8012b18:	2d00      	cmp	r5, #0
 8012b1a:	d0e1      	beq.n	8012ae0 <uxr_framing_read_transport+0x40>
 8012b1c:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8012b20:	3102      	adds	r1, #2
 8012b22:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012b24:	9300      	str	r3, [sp, #0]
 8012b26:	683b      	ldr	r3, [r7, #0]
 8012b28:	4421      	add	r1, r4
 8012b2a:	462a      	mov	r2, r5
 8012b2c:	4650      	mov	r0, sl
 8012b2e:	47c8      	blx	r9
 8012b30:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8012b34:	4a1a      	ldr	r2, [pc, #104]	@ (8012ba0 <uxr_framing_read_transport+0x100>)
 8012b36:	4403      	add	r3, r0
 8012b38:	0859      	lsrs	r1, r3, #1
 8012b3a:	fba2 2101 	umull	r2, r1, r2, r1
 8012b3e:	0889      	lsrs	r1, r1, #2
 8012b40:	222a      	movs	r2, #42	@ 0x2a
 8012b42:	fb02 3111 	mls	r1, r2, r1, r3
 8012b46:	4683      	mov	fp, r0
 8012b48:	f884 102c 	strb.w	r1, [r4, #44]	@ 0x2c
 8012b4c:	2800      	cmp	r0, #0
 8012b4e:	d0c7      	beq.n	8012ae0 <uxr_framing_read_transport+0x40>
 8012b50:	42a8      	cmp	r0, r5
 8012b52:	d1c7      	bne.n	8012ae4 <uxr_framing_read_transport+0x44>
 8012b54:	2e00      	cmp	r6, #0
 8012b56:	d0c5      	beq.n	8012ae4 <uxr_framing_read_transport+0x44>
 8012b58:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012b5a:	9300      	str	r3, [sp, #0]
 8012b5c:	3102      	adds	r1, #2
 8012b5e:	4632      	mov	r2, r6
 8012b60:	4421      	add	r1, r4
 8012b62:	2300      	movs	r3, #0
 8012b64:	4650      	mov	r0, sl
 8012b66:	47c8      	blx	r9
 8012b68:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8012b6c:	4a0c      	ldr	r2, [pc, #48]	@ (8012ba0 <uxr_framing_read_transport+0x100>)
 8012b6e:	180b      	adds	r3, r1, r0
 8012b70:	0859      	lsrs	r1, r3, #1
 8012b72:	fba2 1201 	umull	r1, r2, r2, r1
 8012b76:	0892      	lsrs	r2, r2, #2
 8012b78:	212a      	movs	r1, #42	@ 0x2a
 8012b7a:	fb01 3312 	mls	r3, r1, r2, r3
 8012b7e:	eb00 0b05 	add.w	fp, r0, r5
 8012b82:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 8012b86:	e7ad      	b.n	8012ae4 <uxr_framing_read_transport+0x44>
 8012b88:	2600      	movs	r6, #0
 8012b8a:	f1bb 0f28 	cmp.w	fp, #40	@ 0x28
 8012b8e:	85a6      	strh	r6, [r4, #44]	@ 0x2c
 8012b90:	d9bf      	bls.n	8012b12 <uxr_framing_read_transport+0x72>
 8012b92:	2102      	movs	r1, #2
 8012b94:	2529      	movs	r5, #41	@ 0x29
 8012b96:	e7c4      	b.n	8012b22 <uxr_framing_read_transport+0x82>
 8012b98:	f1c3 0529 	rsb	r5, r3, #41	@ 0x29
 8012b9c:	b2ed      	uxtb	r5, r5
 8012b9e:	e796      	b.n	8012ace <uxr_framing_read_transport+0x2e>
 8012ba0:	30c30c31 	.word	0x30c30c31

08012ba4 <uxr_read_framed_msg>:
 8012ba4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012ba8:	461e      	mov	r6, r3
 8012baa:	f890 502c 	ldrb.w	r5, [r0, #44]	@ 0x2c
 8012bae:	f890 302d 	ldrb.w	r3, [r0, #45]	@ 0x2d
 8012bb2:	429d      	cmp	r5, r3
 8012bb4:	b083      	sub	sp, #12
 8012bb6:	4604      	mov	r4, r0
 8012bb8:	4688      	mov	r8, r1
 8012bba:	4691      	mov	r9, r2
 8012bbc:	f000 8188 	beq.w	8012ed0 <uxr_read_framed_msg+0x32c>
 8012bc0:	7823      	ldrb	r3, [r4, #0]
 8012bc2:	4dc1      	ldr	r5, [pc, #772]	@ (8012ec8 <uxr_read_framed_msg+0x324>)
 8012bc4:	4fc1      	ldr	r7, [pc, #772]	@ (8012ecc <uxr_read_framed_msg+0x328>)
 8012bc6:	2b07      	cmp	r3, #7
 8012bc8:	d8fd      	bhi.n	8012bc6 <uxr_read_framed_msg+0x22>
 8012bca:	e8df f013 	tbh	[pc, r3, lsl #1]
 8012bce:	0115      	.short	0x0115
 8012bd0:	00d600f6 	.word	0x00d600f6
 8012bd4:	009000b9 	.word	0x009000b9
 8012bd8:	0030004d 	.word	0x0030004d
 8012bdc:	0008      	.short	0x0008
 8012bde:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8012be2:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8012be6:	4299      	cmp	r1, r3
 8012be8:	f000 814a 	beq.w	8012e80 <uxr_read_framed_msg+0x2dc>
 8012bec:	18e2      	adds	r2, r4, r3
 8012bee:	7892      	ldrb	r2, [r2, #2]
 8012bf0:	2a7d      	cmp	r2, #125	@ 0x7d
 8012bf2:	f000 8199 	beq.w	8012f28 <uxr_read_framed_msg+0x384>
 8012bf6:	3301      	adds	r3, #1
 8012bf8:	0858      	lsrs	r0, r3, #1
 8012bfa:	fba5 1000 	umull	r1, r0, r5, r0
 8012bfe:	0880      	lsrs	r0, r0, #2
 8012c00:	212a      	movs	r1, #42	@ 0x2a
 8012c02:	fb01 3310 	mls	r3, r1, r0, r3
 8012c06:	2a7e      	cmp	r2, #126	@ 0x7e
 8012c08:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8012c0c:	f000 8252 	beq.w	80130b4 <uxr_read_framed_msg+0x510>
 8012c10:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 8012c12:	8ee1      	ldrh	r1, [r4, #54]	@ 0x36
 8012c14:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8012c18:	b29b      	uxth	r3, r3
 8012c1a:	2200      	movs	r2, #0
 8012c1c:	4299      	cmp	r1, r3
 8012c1e:	86a3      	strh	r3, [r4, #52]	@ 0x34
 8012c20:	7022      	strb	r2, [r4, #0]
 8012c22:	f000 8179 	beq.w	8012f18 <uxr_read_framed_msg+0x374>
 8012c26:	2000      	movs	r0, #0
 8012c28:	b003      	add	sp, #12
 8012c2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012c2e:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8012c32:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8012c36:	4299      	cmp	r1, r3
 8012c38:	f000 8131 	beq.w	8012e9e <uxr_read_framed_msg+0x2fa>
 8012c3c:	18e2      	adds	r2, r4, r3
 8012c3e:	7890      	ldrb	r0, [r2, #2]
 8012c40:	287d      	cmp	r0, #125	@ 0x7d
 8012c42:	f000 8190 	beq.w	8012f66 <uxr_read_framed_msg+0x3c2>
 8012c46:	3301      	adds	r3, #1
 8012c48:	085a      	lsrs	r2, r3, #1
 8012c4a:	fba5 1202 	umull	r1, r2, r5, r2
 8012c4e:	0892      	lsrs	r2, r2, #2
 8012c50:	212a      	movs	r1, #42	@ 0x2a
 8012c52:	fb01 3312 	mls	r3, r1, r2, r3
 8012c56:	287e      	cmp	r0, #126	@ 0x7e
 8012c58:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8012c5c:	f000 821a 	beq.w	8013094 <uxr_read_framed_msg+0x4f0>
 8012c60:	2307      	movs	r3, #7
 8012c62:	86a0      	strh	r0, [r4, #52]	@ 0x34
 8012c64:	7023      	strb	r3, [r4, #0]
 8012c66:	e7ae      	b.n	8012bc6 <uxr_read_framed_msg+0x22>
 8012c68:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 8012c6a:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 8012c6e:	459e      	cmp	lr, r3
 8012c70:	d938      	bls.n	8012ce4 <uxr_read_framed_msg+0x140>
 8012c72:	ee07 8a90 	vmov	s15, r8
 8012c76:	212a      	movs	r1, #42	@ 0x2a
 8012c78:	e020      	b.n	8012cbc <uxr_read_framed_msg+0x118>
 8012c7a:	f89b c002 	ldrb.w	ip, [fp, #2]
 8012c7e:	f1bc 0f7d 	cmp.w	ip, #125	@ 0x7d
 8012c82:	f000 80d4 	beq.w	8012e2e <uxr_read_framed_msg+0x28a>
 8012c86:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 8012c8a:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8012c8e:	f000 8219 	beq.w	80130c4 <uxr_read_framed_msg+0x520>
 8012c92:	f806 c003 	strb.w	ip, [r6, r3]
 8012c96:	f8b4 a036 	ldrh.w	sl, [r4, #54]	@ 0x36
 8012c9a:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 8012c9c:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 8012ca0:	ea8a 000c 	eor.w	r0, sl, ip
 8012ca4:	b2c0      	uxtb	r0, r0
 8012ca6:	3301      	adds	r3, #1
 8012ca8:	f837 2010 	ldrh.w	r2, [r7, r0, lsl #1]
 8012cac:	b29b      	uxth	r3, r3
 8012cae:	ea82 221a 	eor.w	r2, r2, sl, lsr #8
 8012cb2:	4573      	cmp	r3, lr
 8012cb4:	8663      	strh	r3, [r4, #50]	@ 0x32
 8012cb6:	86e2      	strh	r2, [r4, #54]	@ 0x36
 8012cb8:	f080 8120 	bcs.w	8012efc <uxr_read_framed_msg+0x358>
 8012cbc:	f894 002d 	ldrb.w	r0, [r4, #45]	@ 0x2d
 8012cc0:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 8012cc4:	f100 0c01 	add.w	ip, r0, #1
 8012cc8:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8012ccc:	fba5 8202 	umull	r8, r2, r5, r2
 8012cd0:	0892      	lsrs	r2, r2, #2
 8012cd2:	4582      	cmp	sl, r0
 8012cd4:	eb04 0b00 	add.w	fp, r4, r0
 8012cd8:	fb01 c212 	mls	r2, r1, r2, ip
 8012cdc:	d1cd      	bne.n	8012c7a <uxr_read_framed_msg+0xd6>
 8012cde:	ee17 8a90 	vmov	r8, s15
 8012ce2:	459e      	cmp	lr, r3
 8012ce4:	f040 8111 	bne.w	8012f0a <uxr_read_framed_msg+0x366>
 8012ce8:	2306      	movs	r3, #6
 8012cea:	7023      	strb	r3, [r4, #0]
 8012cec:	e76b      	b.n	8012bc6 <uxr_read_framed_msg+0x22>
 8012cee:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8012cf2:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8012cf6:	4298      	cmp	r0, r3
 8012cf8:	f000 80c2 	beq.w	8012e80 <uxr_read_framed_msg+0x2dc>
 8012cfc:	18e2      	adds	r2, r4, r3
 8012cfe:	7891      	ldrb	r1, [r2, #2]
 8012d00:	297d      	cmp	r1, #125	@ 0x7d
 8012d02:	f000 814c 	beq.w	8012f9e <uxr_read_framed_msg+0x3fa>
 8012d06:	3301      	adds	r3, #1
 8012d08:	085a      	lsrs	r2, r3, #1
 8012d0a:	fba5 0202 	umull	r0, r2, r5, r2
 8012d0e:	0892      	lsrs	r2, r2, #2
 8012d10:	202a      	movs	r0, #42	@ 0x2a
 8012d12:	fb00 3312 	mls	r3, r0, r2, r3
 8012d16:	297e      	cmp	r1, #126	@ 0x7e
 8012d18:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8012d1c:	f000 81ca 	beq.w	80130b4 <uxr_read_framed_msg+0x510>
 8012d20:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 8012d22:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8012d26:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8012d28:	b29b      	uxth	r3, r3
 8012d2a:	2000      	movs	r0, #0
 8012d2c:	428b      	cmp	r3, r1
 8012d2e:	8623      	strh	r3, [r4, #48]	@ 0x30
 8012d30:	8660      	strh	r0, [r4, #50]	@ 0x32
 8012d32:	86e0      	strh	r0, [r4, #54]	@ 0x36
 8012d34:	f240 80df 	bls.w	8012ef6 <uxr_read_framed_msg+0x352>
 8012d38:	7020      	strb	r0, [r4, #0]
 8012d3a:	b003      	add	sp, #12
 8012d3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012d40:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8012d44:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8012d48:	4299      	cmp	r1, r3
 8012d4a:	f000 80a8 	beq.w	8012e9e <uxr_read_framed_msg+0x2fa>
 8012d4e:	18e2      	adds	r2, r4, r3
 8012d50:	7890      	ldrb	r0, [r2, #2]
 8012d52:	287d      	cmp	r0, #125	@ 0x7d
 8012d54:	f000 8164 	beq.w	8013020 <uxr_read_framed_msg+0x47c>
 8012d58:	3301      	adds	r3, #1
 8012d5a:	085a      	lsrs	r2, r3, #1
 8012d5c:	fba5 1202 	umull	r1, r2, r5, r2
 8012d60:	0892      	lsrs	r2, r2, #2
 8012d62:	212a      	movs	r1, #42	@ 0x2a
 8012d64:	fb01 3312 	mls	r3, r1, r2, r3
 8012d68:	287e      	cmp	r0, #126	@ 0x7e
 8012d6a:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8012d6e:	f000 8191 	beq.w	8013094 <uxr_read_framed_msg+0x4f0>
 8012d72:	2304      	movs	r3, #4
 8012d74:	8620      	strh	r0, [r4, #48]	@ 0x30
 8012d76:	7023      	strb	r3, [r4, #0]
 8012d78:	e725      	b.n	8012bc6 <uxr_read_framed_msg+0x22>
 8012d7a:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8012d7e:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8012d82:	4290      	cmp	r0, r2
 8012d84:	f000 80b3 	beq.w	8012eee <uxr_read_framed_msg+0x34a>
 8012d88:	18a3      	adds	r3, r4, r2
 8012d8a:	7899      	ldrb	r1, [r3, #2]
 8012d8c:	297d      	cmp	r1, #125	@ 0x7d
 8012d8e:	f000 8164 	beq.w	801305a <uxr_read_framed_msg+0x4b6>
 8012d92:	3201      	adds	r2, #1
 8012d94:	0850      	lsrs	r0, r2, #1
 8012d96:	fba5 3000 	umull	r3, r0, r5, r0
 8012d9a:	0880      	lsrs	r0, r0, #2
 8012d9c:	232a      	movs	r3, #42	@ 0x2a
 8012d9e:	fb03 2210 	mls	r2, r3, r0, r2
 8012da2:	297e      	cmp	r1, #126	@ 0x7e
 8012da4:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8012da8:	f000 8188 	beq.w	80130bc <uxr_read_framed_msg+0x518>
 8012dac:	7863      	ldrb	r3, [r4, #1]
 8012dae:	428b      	cmp	r3, r1
 8012db0:	bf0c      	ite	eq
 8012db2:	2303      	moveq	r3, #3
 8012db4:	2300      	movne	r3, #0
 8012db6:	7023      	strb	r3, [r4, #0]
 8012db8:	e705      	b.n	8012bc6 <uxr_read_framed_msg+0x22>
 8012dba:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8012dbe:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8012dc2:	2200      	movs	r2, #0
 8012dc4:	4299      	cmp	r1, r3
 8012dc6:	f884 202e 	strb.w	r2, [r4, #46]	@ 0x2e
 8012dca:	d06c      	beq.n	8012ea6 <uxr_read_framed_msg+0x302>
 8012dcc:	18e2      	adds	r2, r4, r3
 8012dce:	7890      	ldrb	r0, [r2, #2]
 8012dd0:	287d      	cmp	r0, #125	@ 0x7d
 8012dd2:	f000 8101 	beq.w	8012fd8 <uxr_read_framed_msg+0x434>
 8012dd6:	3301      	adds	r3, #1
 8012dd8:	085a      	lsrs	r2, r3, #1
 8012dda:	fba5 1202 	umull	r1, r2, r5, r2
 8012dde:	0892      	lsrs	r2, r2, #2
 8012de0:	212a      	movs	r1, #42	@ 0x2a
 8012de2:	fb01 3312 	mls	r3, r1, r2, r3
 8012de6:	287e      	cmp	r0, #126	@ 0x7e
 8012de8:	f884 002e 	strb.w	r0, [r4, #46]	@ 0x2e
 8012dec:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8012df0:	d059      	beq.n	8012ea6 <uxr_read_framed_msg+0x302>
 8012df2:	2302      	movs	r3, #2
 8012df4:	7023      	strb	r3, [r4, #0]
 8012df6:	e6e6      	b.n	8012bc6 <uxr_read_framed_msg+0x22>
 8012df8:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 8012dfc:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8012e00:	f04f 0e2a 	mov.w	lr, #42	@ 0x2a
 8012e04:	1c51      	adds	r1, r2, #1
 8012e06:	084b      	lsrs	r3, r1, #1
 8012e08:	fba5 c303 	umull	ip, r3, r5, r3
 8012e0c:	089b      	lsrs	r3, r3, #2
 8012e0e:	fb0e 1313 	mls	r3, lr, r3, r1
 8012e12:	4592      	cmp	sl, r2
 8012e14:	eb04 0002 	add.w	r0, r4, r2
 8012e18:	b2da      	uxtb	r2, r3
 8012e1a:	f43f af04 	beq.w	8012c26 <uxr_read_framed_msg+0x82>
 8012e1e:	7883      	ldrb	r3, [r0, #2]
 8012e20:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8012e24:	2b7e      	cmp	r3, #126	@ 0x7e
 8012e26:	d1ed      	bne.n	8012e04 <uxr_read_framed_msg+0x260>
 8012e28:	2301      	movs	r3, #1
 8012e2a:	7023      	strb	r3, [r4, #0]
 8012e2c:	e6cb      	b.n	8012bc6 <uxr_read_framed_msg+0x22>
 8012e2e:	f100 0c01 	add.w	ip, r0, #1
 8012e32:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8012e36:	fba5 8202 	umull	r8, r2, r5, r2
 8012e3a:	0892      	lsrs	r2, r2, #2
 8012e3c:	fb01 c212 	mls	r2, r1, r2, ip
 8012e40:	eb04 0c02 	add.w	ip, r4, r2
 8012e44:	b2d2      	uxtb	r2, r2
 8012e46:	4592      	cmp	sl, r2
 8012e48:	f100 0002 	add.w	r0, r0, #2
 8012e4c:	f43f af47 	beq.w	8012cde <uxr_read_framed_msg+0x13a>
 8012e50:	0842      	lsrs	r2, r0, #1
 8012e52:	f89c a002 	ldrb.w	sl, [ip, #2]
 8012e56:	fba5 8202 	umull	r8, r2, r5, r2
 8012e5a:	0892      	lsrs	r2, r2, #2
 8012e5c:	fb01 0012 	mls	r0, r1, r2, r0
 8012e60:	f1ba 0f7e 	cmp.w	sl, #126	@ 0x7e
 8012e64:	f08a 0c20 	eor.w	ip, sl, #32
 8012e68:	f884 002d 	strb.w	r0, [r4, #45]	@ 0x2d
 8012e6c:	f47f af11 	bne.w	8012c92 <uxr_read_framed_msg+0xee>
 8012e70:	459e      	cmp	lr, r3
 8012e72:	ee17 8a90 	vmov	r8, s15
 8012e76:	f43f af37 	beq.w	8012ce8 <uxr_read_framed_msg+0x144>
 8012e7a:	2301      	movs	r3, #1
 8012e7c:	7023      	strb	r3, [r4, #0]
 8012e7e:	e6a2      	b.n	8012bc6 <uxr_read_framed_msg+0x22>
 8012e80:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012e82:	9300      	str	r3, [sp, #0]
 8012e84:	2301      	movs	r3, #1
 8012e86:	9301      	str	r3, [sp, #4]
 8012e88:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012e8a:	464a      	mov	r2, r9
 8012e8c:	4641      	mov	r1, r8
 8012e8e:	4620      	mov	r0, r4
 8012e90:	f7ff fe06 	bl	8012aa0 <uxr_framing_read_transport>
 8012e94:	2800      	cmp	r0, #0
 8012e96:	f43f aec6 	beq.w	8012c26 <uxr_read_framed_msg+0x82>
 8012e9a:	7823      	ldrb	r3, [r4, #0]
 8012e9c:	e693      	b.n	8012bc6 <uxr_read_framed_msg+0x22>
 8012e9e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012ea0:	9300      	str	r3, [sp, #0]
 8012ea2:	2302      	movs	r3, #2
 8012ea4:	e7ef      	b.n	8012e86 <uxr_read_framed_msg+0x2e2>
 8012ea6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012ea8:	9300      	str	r3, [sp, #0]
 8012eaa:	2304      	movs	r3, #4
 8012eac:	9301      	str	r3, [sp, #4]
 8012eae:	464a      	mov	r2, r9
 8012eb0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012eb2:	4641      	mov	r1, r8
 8012eb4:	4620      	mov	r0, r4
 8012eb6:	f7ff fdf3 	bl	8012aa0 <uxr_framing_read_transport>
 8012eba:	2800      	cmp	r0, #0
 8012ebc:	d1ed      	bne.n	8012e9a <uxr_read_framed_msg+0x2f6>
 8012ebe:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 8012ec2:	2b7e      	cmp	r3, #126	@ 0x7e
 8012ec4:	d0e9      	beq.n	8012e9a <uxr_read_framed_msg+0x2f6>
 8012ec6:	e6ae      	b.n	8012c26 <uxr_read_framed_msg+0x82>
 8012ec8:	30c30c31 	.word	0x30c30c31
 8012ecc:	0801df3c 	.word	0x0801df3c
 8012ed0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012ed2:	9300      	str	r3, [sp, #0]
 8012ed4:	2305      	movs	r3, #5
 8012ed6:	9301      	str	r3, [sp, #4]
 8012ed8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012eda:	f7ff fde1 	bl	8012aa0 <uxr_framing_read_transport>
 8012ede:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8012ee2:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8012ee6:	429a      	cmp	r2, r3
 8012ee8:	f43f ae9d 	beq.w	8012c26 <uxr_read_framed_msg+0x82>
 8012eec:	e668      	b.n	8012bc0 <uxr_read_framed_msg+0x1c>
 8012eee:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012ef0:	9300      	str	r3, [sp, #0]
 8012ef2:	2303      	movs	r3, #3
 8012ef4:	e7c7      	b.n	8012e86 <uxr_read_framed_msg+0x2e2>
 8012ef6:	2305      	movs	r3, #5
 8012ef8:	7023      	strb	r3, [r4, #0]
 8012efa:	e664      	b.n	8012bc6 <uxr_read_framed_msg+0x22>
 8012efc:	ee17 8a90 	vmov	r8, s15
 8012f00:	f43f aef2 	beq.w	8012ce8 <uxr_read_framed_msg+0x144>
 8012f04:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 8012f08:	d08e      	beq.n	8012e28 <uxr_read_framed_msg+0x284>
 8012f0a:	ebae 0303 	sub.w	r3, lr, r3
 8012f0e:	3302      	adds	r3, #2
 8012f10:	9301      	str	r3, [sp, #4]
 8012f12:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012f14:	9300      	str	r3, [sp, #0]
 8012f16:	e7b7      	b.n	8012e88 <uxr_read_framed_msg+0x2e4>
 8012f18:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8012f1a:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 8012f1e:	7013      	strb	r3, [r2, #0]
 8012f20:	8e20      	ldrh	r0, [r4, #48]	@ 0x30
 8012f22:	b003      	add	sp, #12
 8012f24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012f28:	f103 0c01 	add.w	ip, r3, #1
 8012f2c:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8012f30:	fba5 0202 	umull	r0, r2, r5, r2
 8012f34:	0892      	lsrs	r2, r2, #2
 8012f36:	202a      	movs	r0, #42	@ 0x2a
 8012f38:	fb00 c212 	mls	r2, r0, r2, ip
 8012f3c:	fa5f fc82 	uxtb.w	ip, r2
 8012f40:	4561      	cmp	r1, ip
 8012f42:	d09d      	beq.n	8012e80 <uxr_read_framed_msg+0x2dc>
 8012f44:	3302      	adds	r3, #2
 8012f46:	4422      	add	r2, r4
 8012f48:	0859      	lsrs	r1, r3, #1
 8012f4a:	7892      	ldrb	r2, [r2, #2]
 8012f4c:	fba5 c101 	umull	ip, r1, r5, r1
 8012f50:	0889      	lsrs	r1, r1, #2
 8012f52:	fb00 3311 	mls	r3, r0, r1, r3
 8012f56:	2a7e      	cmp	r2, #126	@ 0x7e
 8012f58:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8012f5c:	f000 80aa 	beq.w	80130b4 <uxr_read_framed_msg+0x510>
 8012f60:	f082 0220 	eor.w	r2, r2, #32
 8012f64:	e654      	b.n	8012c10 <uxr_read_framed_msg+0x6c>
 8012f66:	1c58      	adds	r0, r3, #1
 8012f68:	0842      	lsrs	r2, r0, #1
 8012f6a:	fba5 c202 	umull	ip, r2, r5, r2
 8012f6e:	0892      	lsrs	r2, r2, #2
 8012f70:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8012f74:	fb0c 0212 	mls	r2, ip, r2, r0
 8012f78:	b2d0      	uxtb	r0, r2
 8012f7a:	4281      	cmp	r1, r0
 8012f7c:	d08f      	beq.n	8012e9e <uxr_read_framed_msg+0x2fa>
 8012f7e:	4422      	add	r2, r4
 8012f80:	3302      	adds	r3, #2
 8012f82:	7890      	ldrb	r0, [r2, #2]
 8012f84:	085a      	lsrs	r2, r3, #1
 8012f86:	fba5 1202 	umull	r1, r2, r5, r2
 8012f8a:	0892      	lsrs	r2, r2, #2
 8012f8c:	fb0c 3312 	mls	r3, ip, r2, r3
 8012f90:	287e      	cmp	r0, #126	@ 0x7e
 8012f92:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8012f96:	d07d      	beq.n	8013094 <uxr_read_framed_msg+0x4f0>
 8012f98:	f080 0020 	eor.w	r0, r0, #32
 8012f9c:	e660      	b.n	8012c60 <uxr_read_framed_msg+0xbc>
 8012f9e:	1c59      	adds	r1, r3, #1
 8012fa0:	084a      	lsrs	r2, r1, #1
 8012fa2:	fba5 c202 	umull	ip, r2, r5, r2
 8012fa6:	0892      	lsrs	r2, r2, #2
 8012fa8:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8012fac:	fb0c 1212 	mls	r2, ip, r2, r1
 8012fb0:	b2d1      	uxtb	r1, r2
 8012fb2:	4288      	cmp	r0, r1
 8012fb4:	f43f af64 	beq.w	8012e80 <uxr_read_framed_msg+0x2dc>
 8012fb8:	4422      	add	r2, r4
 8012fba:	3302      	adds	r3, #2
 8012fbc:	7891      	ldrb	r1, [r2, #2]
 8012fbe:	085a      	lsrs	r2, r3, #1
 8012fc0:	fba5 0202 	umull	r0, r2, r5, r2
 8012fc4:	0892      	lsrs	r2, r2, #2
 8012fc6:	fb0c 3312 	mls	r3, ip, r2, r3
 8012fca:	297e      	cmp	r1, #126	@ 0x7e
 8012fcc:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8012fd0:	d070      	beq.n	80130b4 <uxr_read_framed_msg+0x510>
 8012fd2:	f081 0120 	eor.w	r1, r1, #32
 8012fd6:	e6a3      	b.n	8012d20 <uxr_read_framed_msg+0x17c>
 8012fd8:	f103 0c01 	add.w	ip, r3, #1
 8012fdc:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8012fe0:	fba5 0202 	umull	r0, r2, r5, r2
 8012fe4:	0892      	lsrs	r2, r2, #2
 8012fe6:	202a      	movs	r0, #42	@ 0x2a
 8012fe8:	fb00 c212 	mls	r2, r0, r2, ip
 8012fec:	fa5f fc82 	uxtb.w	ip, r2
 8012ff0:	4561      	cmp	r1, ip
 8012ff2:	f43f af58 	beq.w	8012ea6 <uxr_read_framed_msg+0x302>
 8012ff6:	4422      	add	r2, r4
 8012ff8:	3302      	adds	r3, #2
 8012ffa:	7891      	ldrb	r1, [r2, #2]
 8012ffc:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 8013000:	085a      	lsrs	r2, r3, #1
 8013002:	fba5 c202 	umull	ip, r2, r5, r2
 8013006:	0892      	lsrs	r2, r2, #2
 8013008:	fb00 3312 	mls	r3, r0, r2, r3
 801300c:	297e      	cmp	r1, #126	@ 0x7e
 801300e:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8013012:	f43f af48 	beq.w	8012ea6 <uxr_read_framed_msg+0x302>
 8013016:	f081 0120 	eor.w	r1, r1, #32
 801301a:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 801301e:	e6e8      	b.n	8012df2 <uxr_read_framed_msg+0x24e>
 8013020:	1c58      	adds	r0, r3, #1
 8013022:	0842      	lsrs	r2, r0, #1
 8013024:	fba5 c202 	umull	ip, r2, r5, r2
 8013028:	0892      	lsrs	r2, r2, #2
 801302a:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 801302e:	fb0c 0212 	mls	r2, ip, r2, r0
 8013032:	b2d0      	uxtb	r0, r2
 8013034:	4281      	cmp	r1, r0
 8013036:	f43f af32 	beq.w	8012e9e <uxr_read_framed_msg+0x2fa>
 801303a:	4422      	add	r2, r4
 801303c:	3302      	adds	r3, #2
 801303e:	7890      	ldrb	r0, [r2, #2]
 8013040:	085a      	lsrs	r2, r3, #1
 8013042:	fba5 1202 	umull	r1, r2, r5, r2
 8013046:	0892      	lsrs	r2, r2, #2
 8013048:	fb0c 3312 	mls	r3, ip, r2, r3
 801304c:	287e      	cmp	r0, #126	@ 0x7e
 801304e:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8013052:	d01f      	beq.n	8013094 <uxr_read_framed_msg+0x4f0>
 8013054:	f080 0020 	eor.w	r0, r0, #32
 8013058:	e68b      	b.n	8012d72 <uxr_read_framed_msg+0x1ce>
 801305a:	1c51      	adds	r1, r2, #1
 801305c:	084b      	lsrs	r3, r1, #1
 801305e:	fba5 c303 	umull	ip, r3, r5, r3
 8013062:	089b      	lsrs	r3, r3, #2
 8013064:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8013068:	fb0c 1313 	mls	r3, ip, r3, r1
 801306c:	b2d9      	uxtb	r1, r3
 801306e:	4288      	cmp	r0, r1
 8013070:	f43f af3d 	beq.w	8012eee <uxr_read_framed_msg+0x34a>
 8013074:	3202      	adds	r2, #2
 8013076:	4423      	add	r3, r4
 8013078:	0850      	lsrs	r0, r2, #1
 801307a:	789b      	ldrb	r3, [r3, #2]
 801307c:	fba5 1000 	umull	r1, r0, r5, r0
 8013080:	0880      	lsrs	r0, r0, #2
 8013082:	fb0c 2210 	mls	r2, ip, r0, r2
 8013086:	2b7e      	cmp	r3, #126	@ 0x7e
 8013088:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 801308c:	d016      	beq.n	80130bc <uxr_read_framed_msg+0x518>
 801308e:	f083 0120 	eor.w	r1, r3, #32
 8013092:	e68b      	b.n	8012dac <uxr_read_framed_msg+0x208>
 8013094:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013096:	9300      	str	r3, [sp, #0]
 8013098:	2302      	movs	r3, #2
 801309a:	9301      	str	r3, [sp, #4]
 801309c:	464a      	mov	r2, r9
 801309e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80130a0:	4641      	mov	r1, r8
 80130a2:	4620      	mov	r0, r4
 80130a4:	f7ff fcfc 	bl	8012aa0 <uxr_framing_read_transport>
 80130a8:	2800      	cmp	r0, #0
 80130aa:	f47f aef6 	bne.w	8012e9a <uxr_read_framed_msg+0x2f6>
 80130ae:	2301      	movs	r3, #1
 80130b0:	7023      	strb	r3, [r4, #0]
 80130b2:	e588      	b.n	8012bc6 <uxr_read_framed_msg+0x22>
 80130b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80130b6:	9300      	str	r3, [sp, #0]
 80130b8:	2301      	movs	r3, #1
 80130ba:	e7ee      	b.n	801309a <uxr_read_framed_msg+0x4f6>
 80130bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80130be:	9300      	str	r3, [sp, #0]
 80130c0:	2303      	movs	r3, #3
 80130c2:	e7ea      	b.n	801309a <uxr_read_framed_msg+0x4f6>
 80130c4:	ee17 8a90 	vmov	r8, s15
 80130c8:	e6ae      	b.n	8012e28 <uxr_read_framed_msg+0x284>
 80130ca:	bf00      	nop

080130cc <uxr_stream_id>:
 80130cc:	2901      	cmp	r1, #1
 80130ce:	b082      	sub	sp, #8
 80130d0:	d01d      	beq.n	801310e <uxr_stream_id+0x42>
 80130d2:	2902      	cmp	r1, #2
 80130d4:	f04f 0c00 	mov.w	ip, #0
 80130d8:	d01e      	beq.n	8013118 <uxr_stream_id+0x4c>
 80130da:	2300      	movs	r3, #0
 80130dc:	f36c 0307 	bfi	r3, ip, #0, #8
 80130e0:	f360 230f 	bfi	r3, r0, #8, #8
 80130e4:	f361 4317 	bfi	r3, r1, #16, #8
 80130e8:	f362 631f 	bfi	r3, r2, #24, #8
 80130ec:	b2da      	uxtb	r2, r3
 80130ee:	2000      	movs	r0, #0
 80130f0:	f362 0007 	bfi	r0, r2, #0, #8
 80130f4:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80130f8:	f362 200f 	bfi	r0, r2, #8, #8
 80130fc:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8013100:	f362 4017 	bfi	r0, r2, #16, #8
 8013104:	0e1b      	lsrs	r3, r3, #24
 8013106:	f363 601f 	bfi	r0, r3, #24, #8
 801310a:	b002      	add	sp, #8
 801310c:	4770      	bx	lr
 801310e:	f100 0c01 	add.w	ip, r0, #1
 8013112:	fa5f fc8c 	uxtb.w	ip, ip
 8013116:	e7e0      	b.n	80130da <uxr_stream_id+0xe>
 8013118:	f080 0c80 	eor.w	ip, r0, #128	@ 0x80
 801311c:	e7dd      	b.n	80130da <uxr_stream_id+0xe>
 801311e:	bf00      	nop

08013120 <uxr_stream_id_from_raw>:
 8013120:	b082      	sub	sp, #8
 8013122:	b130      	cbz	r0, 8013132 <uxr_stream_id_from_raw+0x12>
 8013124:	0603      	lsls	r3, r0, #24
 8013126:	d420      	bmi.n	801316a <uxr_stream_id_from_raw+0x4a>
 8013128:	1e42      	subs	r2, r0, #1
 801312a:	b2d2      	uxtb	r2, r2
 801312c:	f04f 0c01 	mov.w	ip, #1
 8013130:	e001      	b.n	8013136 <uxr_stream_id_from_raw+0x16>
 8013132:	4684      	mov	ip, r0
 8013134:	4602      	mov	r2, r0
 8013136:	2300      	movs	r3, #0
 8013138:	f360 0307 	bfi	r3, r0, #0, #8
 801313c:	f362 230f 	bfi	r3, r2, #8, #8
 8013140:	f36c 4317 	bfi	r3, ip, #16, #8
 8013144:	f361 631f 	bfi	r3, r1, #24, #8
 8013148:	b2da      	uxtb	r2, r3
 801314a:	2000      	movs	r0, #0
 801314c:	f362 0007 	bfi	r0, r2, #0, #8
 8013150:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8013154:	f362 200f 	bfi	r0, r2, #8, #8
 8013158:	f3c3 4207 	ubfx	r2, r3, #16, #8
 801315c:	f362 4017 	bfi	r0, r2, #16, #8
 8013160:	0e1b      	lsrs	r3, r3, #24
 8013162:	f363 601f 	bfi	r0, r3, #24, #8
 8013166:	b002      	add	sp, #8
 8013168:	4770      	bx	lr
 801316a:	f080 0280 	eor.w	r2, r0, #128	@ 0x80
 801316e:	f04f 0c02 	mov.w	ip, #2
 8013172:	e7e0      	b.n	8013136 <uxr_stream_id_from_raw+0x16>

08013174 <uxr_init_stream_storage>:
 8013174:	2300      	movs	r3, #0
 8013176:	7403      	strb	r3, [r0, #16]
 8013178:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 801317c:	f880 3044 	strb.w	r3, [r0, #68]	@ 0x44
 8013180:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
 8013184:	4770      	bx	lr
 8013186:	bf00      	nop

08013188 <uxr_reset_stream_storage>:
 8013188:	b570      	push	{r4, r5, r6, lr}
 801318a:	7c03      	ldrb	r3, [r0, #16]
 801318c:	4604      	mov	r4, r0
 801318e:	b153      	cbz	r3, 80131a6 <uxr_reset_stream_storage+0x1e>
 8013190:	4606      	mov	r6, r0
 8013192:	2500      	movs	r5, #0
 8013194:	4630      	mov	r0, r6
 8013196:	f006 f855 	bl	8019244 <uxr_reset_output_best_effort_stream>
 801319a:	7c23      	ldrb	r3, [r4, #16]
 801319c:	3501      	adds	r5, #1
 801319e:	42ab      	cmp	r3, r5
 80131a0:	f106 0610 	add.w	r6, r6, #16
 80131a4:	d8f6      	bhi.n	8013194 <uxr_reset_stream_storage+0xc>
 80131a6:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80131aa:	b163      	cbz	r3, 80131c6 <uxr_reset_stream_storage+0x3e>
 80131ac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80131b0:	2500      	movs	r5, #0
 80131b2:	4630      	mov	r0, r6
 80131b4:	f005 fe48 	bl	8018e48 <uxr_reset_input_best_effort_stream>
 80131b8:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80131bc:	3501      	adds	r5, #1
 80131be:	42ab      	cmp	r3, r5
 80131c0:	f106 0602 	add.w	r6, r6, #2
 80131c4:	d8f5      	bhi.n	80131b2 <uxr_reset_stream_storage+0x2a>
 80131c6:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 80131ca:	b163      	cbz	r3, 80131e6 <uxr_reset_stream_storage+0x5e>
 80131cc:	f104 0618 	add.w	r6, r4, #24
 80131d0:	2500      	movs	r5, #0
 80131d2:	4630      	mov	r0, r6
 80131d4:	f006 f8e2 	bl	801939c <uxr_reset_output_reliable_stream>
 80131d8:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 80131dc:	3501      	adds	r5, #1
 80131de:	42ab      	cmp	r3, r5
 80131e0:	f106 0628 	add.w	r6, r6, #40	@ 0x28
 80131e4:	d8f5      	bhi.n	80131d2 <uxr_reset_stream_storage+0x4a>
 80131e6:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 80131ea:	b163      	cbz	r3, 8013206 <uxr_reset_stream_storage+0x7e>
 80131ec:	f104 0648 	add.w	r6, r4, #72	@ 0x48
 80131f0:	2500      	movs	r5, #0
 80131f2:	4630      	mov	r0, r6
 80131f4:	f005 fe9c 	bl	8018f30 <uxr_reset_input_reliable_stream>
 80131f8:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 80131fc:	3501      	adds	r5, #1
 80131fe:	42ab      	cmp	r3, r5
 8013200:	f106 0618 	add.w	r6, r6, #24
 8013204:	d8f5      	bhi.n	80131f2 <uxr_reset_stream_storage+0x6a>
 8013206:	bd70      	pop	{r4, r5, r6, pc}

08013208 <uxr_add_output_best_effort_buffer>:
 8013208:	b510      	push	{r4, lr}
 801320a:	7c04      	ldrb	r4, [r0, #16]
 801320c:	f104 0c01 	add.w	ip, r4, #1
 8013210:	b082      	sub	sp, #8
 8013212:	f880 c010 	strb.w	ip, [r0, #16]
 8013216:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 801321a:	f006 f809 	bl	8019230 <uxr_init_output_best_effort_stream>
 801321e:	2201      	movs	r2, #1
 8013220:	4611      	mov	r1, r2
 8013222:	4620      	mov	r0, r4
 8013224:	b002      	add	sp, #8
 8013226:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801322a:	f7ff bf4f 	b.w	80130cc <uxr_stream_id>
 801322e:	bf00      	nop

08013230 <uxr_add_output_reliable_buffer>:
 8013230:	b510      	push	{r4, lr}
 8013232:	b084      	sub	sp, #16
 8013234:	4684      	mov	ip, r0
 8013236:	f89d 0018 	ldrb.w	r0, [sp, #24]
 801323a:	9000      	str	r0, [sp, #0]
 801323c:	f89c 4040 	ldrb.w	r4, [ip, #64]	@ 0x40
 8013240:	2028      	movs	r0, #40	@ 0x28
 8013242:	fb00 c004 	mla	r0, r0, r4, ip
 8013246:	f104 0e01 	add.w	lr, r4, #1
 801324a:	3018      	adds	r0, #24
 801324c:	f88c e040 	strb.w	lr, [ip, #64]	@ 0x40
 8013250:	f006 f86c 	bl	801932c <uxr_init_output_reliable_stream>
 8013254:	2201      	movs	r2, #1
 8013256:	2102      	movs	r1, #2
 8013258:	4620      	mov	r0, r4
 801325a:	b004      	add	sp, #16
 801325c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013260:	f7ff bf34 	b.w	80130cc <uxr_stream_id>

08013264 <uxr_add_input_best_effort_buffer>:
 8013264:	b510      	push	{r4, lr}
 8013266:	f890 4044 	ldrb.w	r4, [r0, #68]	@ 0x44
 801326a:	4603      	mov	r3, r0
 801326c:	1c62      	adds	r2, r4, #1
 801326e:	f104 0021 	add.w	r0, r4, #33	@ 0x21
 8013272:	b082      	sub	sp, #8
 8013274:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8013278:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801327c:	f005 fde0 	bl	8018e40 <uxr_init_input_best_effort_stream>
 8013280:	2200      	movs	r2, #0
 8013282:	2101      	movs	r1, #1
 8013284:	4620      	mov	r0, r4
 8013286:	b002      	add	sp, #8
 8013288:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801328c:	f7ff bf1e 	b.w	80130cc <uxr_stream_id>

08013290 <uxr_add_input_reliable_buffer>:
 8013290:	b510      	push	{r4, lr}
 8013292:	b084      	sub	sp, #16
 8013294:	4684      	mov	ip, r0
 8013296:	9806      	ldr	r0, [sp, #24]
 8013298:	9000      	str	r0, [sp, #0]
 801329a:	f89c 4060 	ldrb.w	r4, [ip, #96]	@ 0x60
 801329e:	2018      	movs	r0, #24
 80132a0:	fb00 c004 	mla	r0, r0, r4, ip
 80132a4:	f104 0e01 	add.w	lr, r4, #1
 80132a8:	3048      	adds	r0, #72	@ 0x48
 80132aa:	f88c e060 	strb.w	lr, [ip, #96]	@ 0x60
 80132ae:	f005 fe13 	bl	8018ed8 <uxr_init_input_reliable_stream>
 80132b2:	2200      	movs	r2, #0
 80132b4:	2102      	movs	r1, #2
 80132b6:	4620      	mov	r0, r4
 80132b8:	b004      	add	sp, #16
 80132ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80132be:	f7ff bf05 	b.w	80130cc <uxr_stream_id>
 80132c2:	bf00      	nop

080132c4 <uxr_get_output_best_effort_stream>:
 80132c4:	7c03      	ldrb	r3, [r0, #16]
 80132c6:	428b      	cmp	r3, r1
 80132c8:	bf8c      	ite	hi
 80132ca:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 80132ce:	2000      	movls	r0, #0
 80132d0:	4770      	bx	lr
 80132d2:	bf00      	nop

080132d4 <uxr_get_output_reliable_stream>:
 80132d4:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 80132d8:	428b      	cmp	r3, r1
 80132da:	bf83      	ittte	hi
 80132dc:	2328      	movhi	r3, #40	@ 0x28
 80132de:	fb03 0001 	mlahi	r0, r3, r1, r0
 80132e2:	3018      	addhi	r0, #24
 80132e4:	2000      	movls	r0, #0
 80132e6:	4770      	bx	lr

080132e8 <uxr_get_input_best_effort_stream>:
 80132e8:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 80132ec:	428b      	cmp	r3, r1
 80132ee:	bf86      	itte	hi
 80132f0:	3121      	addhi	r1, #33	@ 0x21
 80132f2:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
 80132f6:	2000      	movls	r0, #0
 80132f8:	4770      	bx	lr
 80132fa:	bf00      	nop

080132fc <uxr_get_input_reliable_stream>:
 80132fc:	f890 3060 	ldrb.w	r3, [r0, #96]	@ 0x60
 8013300:	428b      	cmp	r3, r1
 8013302:	bf83      	ittte	hi
 8013304:	2318      	movhi	r3, #24
 8013306:	fb03 0001 	mlahi	r0, r3, r1, r0
 801330a:	3048      	addhi	r0, #72	@ 0x48
 801330c:	2000      	movls	r0, #0
 801330e:	4770      	bx	lr

08013310 <uxr_output_streams_confirmed>:
 8013310:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8013314:	b183      	cbz	r3, 8013338 <uxr_output_streams_confirmed+0x28>
 8013316:	b570      	push	{r4, r5, r6, lr}
 8013318:	4606      	mov	r6, r0
 801331a:	f100 0518 	add.w	r5, r0, #24
 801331e:	2400      	movs	r4, #0
 8013320:	e001      	b.n	8013326 <uxr_output_streams_confirmed+0x16>
 8013322:	3528      	adds	r5, #40	@ 0x28
 8013324:	b138      	cbz	r0, 8013336 <uxr_output_streams_confirmed+0x26>
 8013326:	4628      	mov	r0, r5
 8013328:	f006 faa8 	bl	801987c <uxr_is_output_up_to_date>
 801332c:	f896 3040 	ldrb.w	r3, [r6, #64]	@ 0x40
 8013330:	3401      	adds	r4, #1
 8013332:	42a3      	cmp	r3, r4
 8013334:	d8f5      	bhi.n	8013322 <uxr_output_streams_confirmed+0x12>
 8013336:	bd70      	pop	{r4, r5, r6, pc}
 8013338:	2001      	movs	r0, #1
 801333a:	4770      	bx	lr

0801333c <uxr_buffer_submessage_header>:
 801333c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801333e:	4604      	mov	r4, r0
 8013340:	460e      	mov	r6, r1
 8013342:	2104      	movs	r1, #4
 8013344:	4615      	mov	r5, r2
 8013346:	461f      	mov	r7, r3
 8013348:	f7fa fd0c 	bl	800dd64 <ucdr_align_to>
 801334c:	2301      	movs	r3, #1
 801334e:	ea47 0203 	orr.w	r2, r7, r3
 8013352:	4631      	mov	r1, r6
 8013354:	7523      	strb	r3, [r4, #20]
 8013356:	4620      	mov	r0, r4
 8013358:	462b      	mov	r3, r5
 801335a:	f000 fa27 	bl	80137ac <uxr_serialize_submessage_header>
 801335e:	4620      	mov	r0, r4
 8013360:	f7fa fd16 	bl	800dd90 <ucdr_buffer_remaining>
 8013364:	42a8      	cmp	r0, r5
 8013366:	bf34      	ite	cc
 8013368:	2000      	movcc	r0, #0
 801336a:	2001      	movcs	r0, #1
 801336c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801336e:	bf00      	nop

08013370 <uxr_read_submessage_header>:
 8013370:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013374:	4604      	mov	r4, r0
 8013376:	460d      	mov	r5, r1
 8013378:	2104      	movs	r1, #4
 801337a:	4616      	mov	r6, r2
 801337c:	4698      	mov	r8, r3
 801337e:	f7fa fcf1 	bl	800dd64 <ucdr_align_to>
 8013382:	4620      	mov	r0, r4
 8013384:	f7fa fd04 	bl	800dd90 <ucdr_buffer_remaining>
 8013388:	2803      	cmp	r0, #3
 801338a:	bf8c      	ite	hi
 801338c:	2701      	movhi	r7, #1
 801338e:	2700      	movls	r7, #0
 8013390:	d802      	bhi.n	8013398 <uxr_read_submessage_header+0x28>
 8013392:	4638      	mov	r0, r7
 8013394:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013398:	4633      	mov	r3, r6
 801339a:	4642      	mov	r2, r8
 801339c:	4620      	mov	r0, r4
 801339e:	4629      	mov	r1, r5
 80133a0:	f000 fa18 	bl	80137d4 <uxr_deserialize_submessage_header>
 80133a4:	f898 3000 	ldrb.w	r3, [r8]
 80133a8:	f003 0201 	and.w	r2, r3, #1
 80133ac:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 80133b0:	f888 3000 	strb.w	r3, [r8]
 80133b4:	7522      	strb	r2, [r4, #20]
 80133b6:	4638      	mov	r0, r7
 80133b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080133bc <uxr_submessage_padding>:
 80133bc:	f010 0003 	ands.w	r0, r0, #3
 80133c0:	bf18      	it	ne
 80133c2:	f1c0 0004 	rsbne	r0, r0, #4
 80133c6:	4770      	bx	lr

080133c8 <uxr_millis>:
 80133c8:	b510      	push	{r4, lr}
 80133ca:	b084      	sub	sp, #16
 80133cc:	4669      	mov	r1, sp
 80133ce:	2001      	movs	r0, #1
 80133d0:	f7ef fc36 	bl	8002c40 <clock_gettime>
 80133d4:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 80133d8:	4906      	ldr	r1, [pc, #24]	@ (80133f4 <uxr_millis+0x2c>)
 80133da:	fba0 0301 	umull	r0, r3, r0, r1
 80133de:	1900      	adds	r0, r0, r4
 80133e0:	fb01 3102 	mla	r1, r1, r2, r3
 80133e4:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 80133e8:	4a03      	ldr	r2, [pc, #12]	@ (80133f8 <uxr_millis+0x30>)
 80133ea:	2300      	movs	r3, #0
 80133ec:	f7ed fbbe 	bl	8000b6c <__aeabi_ldivmod>
 80133f0:	b004      	add	sp, #16
 80133f2:	bd10      	pop	{r4, pc}
 80133f4:	3b9aca00 	.word	0x3b9aca00
 80133f8:	000f4240 	.word	0x000f4240

080133fc <uxr_nanos>:
 80133fc:	b510      	push	{r4, lr}
 80133fe:	b084      	sub	sp, #16
 8013400:	4669      	mov	r1, sp
 8013402:	2001      	movs	r0, #1
 8013404:	f7ef fc1c 	bl	8002c40 <clock_gettime>
 8013408:	4a06      	ldr	r2, [pc, #24]	@ (8013424 <uxr_nanos+0x28>)
 801340a:	9800      	ldr	r0, [sp, #0]
 801340c:	9902      	ldr	r1, [sp, #8]
 801340e:	9c01      	ldr	r4, [sp, #4]
 8013410:	fba0 0302 	umull	r0, r3, r0, r2
 8013414:	1840      	adds	r0, r0, r1
 8013416:	fb02 3304 	mla	r3, r2, r4, r3
 801341a:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 801341e:	b004      	add	sp, #16
 8013420:	bd10      	pop	{r4, pc}
 8013422:	bf00      	nop
 8013424:	3b9aca00 	.word	0x3b9aca00

08013428 <on_full_output_buffer_fragmented>:
 8013428:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801342c:	460c      	mov	r4, r1
 801342e:	b08a      	sub	sp, #40	@ 0x28
 8013430:	f891 10c1 	ldrb.w	r1, [r1, #193]	@ 0xc1
 8013434:	4606      	mov	r6, r0
 8013436:	f104 0008 	add.w	r0, r4, #8
 801343a:	f7ff ff4b 	bl	80132d4 <uxr_get_output_reliable_stream>
 801343e:	4605      	mov	r5, r0
 8013440:	f006 fa26 	bl	8019890 <get_available_free_slots>
 8013444:	b968      	cbnz	r0, 8013462 <on_full_output_buffer_fragmented+0x3a>
 8013446:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	@ 0xb8
 801344a:	4620      	mov	r0, r4
 801344c:	4798      	blx	r3
 801344e:	b918      	cbnz	r0, 8013458 <on_full_output_buffer_fragmented+0x30>
 8013450:	2001      	movs	r0, #1
 8013452:	b00a      	add	sp, #40	@ 0x28
 8013454:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013458:	4628      	mov	r0, r5
 801345a:	f006 fa19 	bl	8019890 <get_available_free_slots>
 801345e:	2800      	cmp	r0, #0
 8013460:	d0f6      	beq.n	8013450 <on_full_output_buffer_fragmented+0x28>
 8013462:	8929      	ldrh	r1, [r5, #8]
 8013464:	89eb      	ldrh	r3, [r5, #14]
 8013466:	7b28      	ldrb	r0, [r5, #12]
 8013468:	686a      	ldr	r2, [r5, #4]
 801346a:	fbb2 f8f1 	udiv	r8, r2, r1
 801346e:	fbb3 f2f1 	udiv	r2, r3, r1
 8013472:	fb01 3112 	mls	r1, r1, r2, r3
 8013476:	f5c0 407f 	rsb	r0, r0, #65280	@ 0xff00
 801347a:	b289      	uxth	r1, r1
 801347c:	fb08 f101 	mul.w	r1, r8, r1
 8013480:	30fc      	adds	r0, #252	@ 0xfc
 8013482:	f1a8 0804 	sub.w	r8, r8, #4
 8013486:	f8d4 30c4 	ldr.w	r3, [r4, #196]	@ 0xc4
 801348a:	4440      	add	r0, r8
 801348c:	b287      	uxth	r7, r0
 801348e:	1bdb      	subs	r3, r3, r7
 8013490:	f8c4 30c4 	str.w	r3, [r4, #196]	@ 0xc4
 8013494:	682b      	ldr	r3, [r5, #0]
 8013496:	3104      	adds	r1, #4
 8013498:	4419      	add	r1, r3
 801349a:	4642      	mov	r2, r8
 801349c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80134a0:	9300      	str	r3, [sp, #0]
 80134a2:	a802      	add	r0, sp, #8
 80134a4:	2300      	movs	r3, #0
 80134a6:	f7fa fc31 	bl	800dd0c <ucdr_init_buffer_origin_offset>
 80134aa:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 80134ae:	f102 0308 	add.w	r3, r2, #8
 80134b2:	4543      	cmp	r3, r8
 80134b4:	d928      	bls.n	8013508 <on_full_output_buffer_fragmented+0xe0>
 80134b6:	463a      	mov	r2, r7
 80134b8:	2300      	movs	r3, #0
 80134ba:	210d      	movs	r1, #13
 80134bc:	a802      	add	r0, sp, #8
 80134be:	f7ff ff3d 	bl	801333c <uxr_buffer_submessage_header>
 80134c2:	8929      	ldrh	r1, [r5, #8]
 80134c4:	89eb      	ldrh	r3, [r5, #14]
 80134c6:	fbb3 f2f1 	udiv	r2, r3, r1
 80134ca:	fb01 3312 	mls	r3, r1, r2, r3
 80134ce:	b29b      	uxth	r3, r3
 80134d0:	686a      	ldr	r2, [r5, #4]
 80134d2:	fbb2 f2f1 	udiv	r2, r2, r1
 80134d6:	fb02 f303 	mul.w	r3, r2, r3
 80134da:	682a      	ldr	r2, [r5, #0]
 80134dc:	f842 8003 	str.w	r8, [r2, r3]
 80134e0:	89e8      	ldrh	r0, [r5, #14]
 80134e2:	2101      	movs	r1, #1
 80134e4:	f006 f9f4 	bl	80198d0 <uxr_seq_num_add>
 80134e8:	9904      	ldr	r1, [sp, #16]
 80134ea:	9a03      	ldr	r2, [sp, #12]
 80134ec:	81e8      	strh	r0, [r5, #14]
 80134ee:	1a52      	subs	r2, r2, r1
 80134f0:	4630      	mov	r0, r6
 80134f2:	f7fa fc1d 	bl	800dd30 <ucdr_init_buffer>
 80134f6:	4630      	mov	r0, r6
 80134f8:	490f      	ldr	r1, [pc, #60]	@ (8013538 <on_full_output_buffer_fragmented+0x110>)
 80134fa:	4622      	mov	r2, r4
 80134fc:	f7fa fbec 	bl	800dcd8 <ucdr_set_on_full_buffer_callback>
 8013500:	2000      	movs	r0, #0
 8013502:	b00a      	add	sp, #40	@ 0x28
 8013504:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013508:	b292      	uxth	r2, r2
 801350a:	2302      	movs	r3, #2
 801350c:	210d      	movs	r1, #13
 801350e:	a802      	add	r0, sp, #8
 8013510:	f7ff ff14 	bl	801333c <uxr_buffer_submessage_header>
 8013514:	8928      	ldrh	r0, [r5, #8]
 8013516:	89eb      	ldrh	r3, [r5, #14]
 8013518:	fbb3 f1f0 	udiv	r1, r3, r0
 801351c:	fb00 3311 	mls	r3, r0, r1, r3
 8013520:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 8013524:	6869      	ldr	r1, [r5, #4]
 8013526:	fbb1 f1f0 	udiv	r1, r1, r0
 801352a:	b29b      	uxth	r3, r3
 801352c:	fb01 f303 	mul.w	r3, r1, r3
 8013530:	6829      	ldr	r1, [r5, #0]
 8013532:	3208      	adds	r2, #8
 8013534:	50ca      	str	r2, [r1, r3]
 8013536:	e7d3      	b.n	80134e0 <on_full_output_buffer_fragmented+0xb8>
 8013538:	08013429 	.word	0x08013429

0801353c <uxr_prepare_output_stream>:
 801353c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801353e:	b087      	sub	sp, #28
 8013540:	2707      	movs	r7, #7
 8013542:	9202      	str	r2, [sp, #8]
 8013544:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8013546:	9103      	str	r1, [sp, #12]
 8013548:	2500      	movs	r5, #0
 801354a:	3204      	adds	r2, #4
 801354c:	e9cd 7500 	strd	r7, r5, [sp]
 8013550:	461c      	mov	r4, r3
 8013552:	4606      	mov	r6, r0
 8013554:	f7fe ffc2 	bl	80124dc <uxr_prepare_stream_to_write_submessage>
 8013558:	f080 0201 	eor.w	r2, r0, #1
 801355c:	b2d2      	uxtb	r2, r2
 801355e:	75a2      	strb	r2, [r4, #22]
 8013560:	b112      	cbz	r2, 8013568 <uxr_prepare_output_stream+0x2c>
 8013562:	4628      	mov	r0, r5
 8013564:	b007      	add	sp, #28
 8013566:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013568:	aa05      	add	r2, sp, #20
 801356a:	9902      	ldr	r1, [sp, #8]
 801356c:	4630      	mov	r0, r6
 801356e:	f7ff f8eb 	bl	8012748 <uxr_init_base_object_request>
 8013572:	a905      	add	r1, sp, #20
 8013574:	4605      	mov	r5, r0
 8013576:	4620      	mov	r0, r4
 8013578:	f001 f88c 	bl	8014694 <uxr_serialize_WRITE_DATA_Payload_Data>
 801357c:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 8013580:	69a6      	ldr	r6, [r4, #24]
 8013582:	69e7      	ldr	r7, [r4, #28]
 8013584:	1a52      	subs	r2, r2, r1
 8013586:	4620      	mov	r0, r4
 8013588:	f7fa fbd2 	bl	800dd30 <ucdr_init_buffer>
 801358c:	4620      	mov	r0, r4
 801358e:	463a      	mov	r2, r7
 8013590:	4631      	mov	r1, r6
 8013592:	f7fa fba1 	bl	800dcd8 <ucdr_set_on_full_buffer_callback>
 8013596:	4628      	mov	r0, r5
 8013598:	b007      	add	sp, #28
 801359a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801359c <uxr_prepare_output_stream_fragmented>:
 801359c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80135a0:	b091      	sub	sp, #68	@ 0x44
 80135a2:	4605      	mov	r5, r0
 80135a4:	9105      	str	r1, [sp, #20]
 80135a6:	3008      	adds	r0, #8
 80135a8:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80135ac:	461e      	mov	r6, r3
 80135ae:	9204      	str	r2, [sp, #16]
 80135b0:	f7ff fe90 	bl	80132d4 <uxr_get_output_reliable_stream>
 80135b4:	f89d 3016 	ldrb.w	r3, [sp, #22]
 80135b8:	2b01      	cmp	r3, #1
 80135ba:	f000 8091 	beq.w	80136e0 <uxr_prepare_output_stream_fragmented+0x144>
 80135be:	4604      	mov	r4, r0
 80135c0:	2800      	cmp	r0, #0
 80135c2:	f000 808d 	beq.w	80136e0 <uxr_prepare_output_stream_fragmented+0x144>
 80135c6:	f006 f963 	bl	8019890 <get_available_free_slots>
 80135ca:	2800      	cmp	r0, #0
 80135cc:	f000 8083 	beq.w	80136d6 <uxr_prepare_output_stream_fragmented+0x13a>
 80135d0:	8922      	ldrh	r2, [r4, #8]
 80135d2:	89e7      	ldrh	r7, [r4, #14]
 80135d4:	fbb7 f9f2 	udiv	r9, r7, r2
 80135d8:	fb02 7919 	mls	r9, r2, r9, r7
 80135dc:	fa1f f989 	uxth.w	r9, r9
 80135e0:	6863      	ldr	r3, [r4, #4]
 80135e2:	fbb3 f2f2 	udiv	r2, r3, r2
 80135e6:	6823      	ldr	r3, [r4, #0]
 80135e8:	9203      	str	r2, [sp, #12]
 80135ea:	fb02 f909 	mul.w	r9, r2, r9
 80135ee:	f109 0904 	add.w	r9, r9, #4
 80135f2:	4499      	add	r9, r3
 80135f4:	7b23      	ldrb	r3, [r4, #12]
 80135f6:	f859 8c04 	ldr.w	r8, [r9, #-4]
 80135fa:	4543      	cmp	r3, r8
 80135fc:	f1a2 0b04 	sub.w	fp, r2, #4
 8013600:	d37a      	bcc.n	80136f8 <uxr_prepare_output_stream_fragmented+0x15c>
 8013602:	f1ab 0a04 	sub.w	sl, fp, #4
 8013606:	ebaa 0a03 	sub.w	sl, sl, r3
 801360a:	465a      	mov	r2, fp
 801360c:	2300      	movs	r3, #0
 801360e:	4649      	mov	r1, r9
 8013610:	a808      	add	r0, sp, #32
 8013612:	f8cd 8000 	str.w	r8, [sp]
 8013616:	f7fa fb79 	bl	800dd0c <ucdr_init_buffer_origin_offset>
 801361a:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 801361c:	fa1f fa8a 	uxth.w	sl, sl
 8013620:	4652      	mov	r2, sl
 8013622:	f103 0a08 	add.w	sl, r3, #8
 8013626:	45da      	cmp	sl, fp
 8013628:	bf34      	ite	cc
 801362a:	2302      	movcc	r3, #2
 801362c:	2300      	movcs	r3, #0
 801362e:	210d      	movs	r1, #13
 8013630:	a808      	add	r0, sp, #32
 8013632:	f7ff fe83 	bl	801333c <uxr_buffer_submessage_header>
 8013636:	8921      	ldrh	r1, [r4, #8]
 8013638:	fbb7 f2f1 	udiv	r2, r7, r1
 801363c:	fb01 7212 	mls	r2, r1, r2, r7
 8013640:	b292      	uxth	r2, r2
 8013642:	6863      	ldr	r3, [r4, #4]
 8013644:	fbb3 f3f1 	udiv	r3, r3, r1
 8013648:	fb02 f303 	mul.w	r3, r2, r3
 801364c:	6822      	ldr	r2, [r4, #0]
 801364e:	4638      	mov	r0, r7
 8013650:	f842 b003 	str.w	fp, [r2, r3]
 8013654:	2101      	movs	r1, #1
 8013656:	f006 f93b 	bl	80198d0 <uxr_seq_num_add>
 801365a:	9b03      	ldr	r3, [sp, #12]
 801365c:	f108 0104 	add.w	r1, r8, #4
 8013660:	f1a3 0208 	sub.w	r2, r3, #8
 8013664:	eba2 0208 	sub.w	r2, r2, r8
 8013668:	4449      	add	r1, r9
 801366a:	4607      	mov	r7, r0
 801366c:	4630      	mov	r0, r6
 801366e:	f7fa fb5f 	bl	800dd30 <ucdr_init_buffer>
 8013672:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8013674:	81e7      	strh	r7, [r4, #14]
 8013676:	1d1a      	adds	r2, r3, #4
 8013678:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 801367c:	bf28      	it	cs
 801367e:	2200      	movcs	r2, #0
 8013680:	2300      	movs	r3, #0
 8013682:	b292      	uxth	r2, r2
 8013684:	2107      	movs	r1, #7
 8013686:	4630      	mov	r0, r6
 8013688:	f7ff fe58 	bl	801333c <uxr_buffer_submessage_header>
 801368c:	9904      	ldr	r1, [sp, #16]
 801368e:	aa07      	add	r2, sp, #28
 8013690:	4628      	mov	r0, r5
 8013692:	f7ff f859 	bl	8012748 <uxr_init_base_object_request>
 8013696:	4604      	mov	r4, r0
 8013698:	b318      	cbz	r0, 80136e2 <uxr_prepare_output_stream_fragmented+0x146>
 801369a:	a907      	add	r1, sp, #28
 801369c:	4630      	mov	r0, r6
 801369e:	f000 fff9 	bl	8014694 <uxr_serialize_WRITE_DATA_Payload_Data>
 80136a2:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 80136a6:	4630      	mov	r0, r6
 80136a8:	1a52      	subs	r2, r2, r1
 80136aa:	f7fa fb41 	bl	800dd30 <ucdr_init_buffer>
 80136ae:	9b05      	ldr	r3, [sp, #20]
 80136b0:	f8c5 30c0 	str.w	r3, [r5, #192]	@ 0xc0
 80136b4:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80136b6:	f8c5 30b8 	str.w	r3, [r5, #184]	@ 0xb8
 80136ba:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 80136bc:	491b      	ldr	r1, [pc, #108]	@ (801372c <uxr_prepare_output_stream_fragmented+0x190>)
 80136be:	f8c5 a0c4 	str.w	sl, [r5, #196]	@ 0xc4
 80136c2:	4630      	mov	r0, r6
 80136c4:	f8c5 30bc 	str.w	r3, [r5, #188]	@ 0xbc
 80136c8:	462a      	mov	r2, r5
 80136ca:	f7fa fb05 	bl	800dcd8 <ucdr_set_on_full_buffer_callback>
 80136ce:	4620      	mov	r0, r4
 80136d0:	b011      	add	sp, #68	@ 0x44
 80136d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80136d6:	991c      	ldr	r1, [sp, #112]	@ 0x70
 80136d8:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80136da:	4628      	mov	r0, r5
 80136dc:	4798      	blx	r3
 80136de:	b920      	cbnz	r0, 80136ea <uxr_prepare_output_stream_fragmented+0x14e>
 80136e0:	2400      	movs	r4, #0
 80136e2:	4620      	mov	r0, r4
 80136e4:	b011      	add	sp, #68	@ 0x44
 80136e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80136ea:	4620      	mov	r0, r4
 80136ec:	f006 f8d0 	bl	8019890 <get_available_free_slots>
 80136f0:	2800      	cmp	r0, #0
 80136f2:	f47f af6d 	bne.w	80135d0 <uxr_prepare_output_stream_fragmented+0x34>
 80136f6:	e7f3      	b.n	80136e0 <uxr_prepare_output_stream_fragmented+0x144>
 80136f8:	4638      	mov	r0, r7
 80136fa:	2101      	movs	r1, #1
 80136fc:	f006 f8e8 	bl	80198d0 <uxr_seq_num_add>
 8013700:	8921      	ldrh	r1, [r4, #8]
 8013702:	fbb0 f2f1 	udiv	r2, r0, r1
 8013706:	fb01 0912 	mls	r9, r1, r2, r0
 801370a:	fa1f f289 	uxth.w	r2, r9
 801370e:	6863      	ldr	r3, [r4, #4]
 8013710:	fbb3 f9f1 	udiv	r9, r3, r1
 8013714:	6823      	ldr	r3, [r4, #0]
 8013716:	fb02 f909 	mul.w	r9, r2, r9
 801371a:	f109 0904 	add.w	r9, r9, #4
 801371e:	4499      	add	r9, r3
 8013720:	4607      	mov	r7, r0
 8013722:	7b23      	ldrb	r3, [r4, #12]
 8013724:	f859 8c04 	ldr.w	r8, [r9, #-4]
 8013728:	e76b      	b.n	8013602 <uxr_prepare_output_stream_fragmented+0x66>
 801372a:	bf00      	nop
 801372c:	08013429 	.word	0x08013429

08013730 <uxr_serialize_message_header>:
 8013730:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013732:	b083      	sub	sp, #12
 8013734:	4616      	mov	r6, r2
 8013736:	4604      	mov	r4, r0
 8013738:	9301      	str	r3, [sp, #4]
 801373a:	460d      	mov	r5, r1
 801373c:	9f08      	ldr	r7, [sp, #32]
 801373e:	f7f9 f815 	bl	800c76c <ucdr_serialize_uint8_t>
 8013742:	4631      	mov	r1, r6
 8013744:	4620      	mov	r0, r4
 8013746:	f7f9 f811 	bl	800c76c <ucdr_serialize_uint8_t>
 801374a:	9a01      	ldr	r2, [sp, #4]
 801374c:	2101      	movs	r1, #1
 801374e:	4620      	mov	r0, r4
 8013750:	f7f9 f8b8 	bl	800c8c4 <ucdr_serialize_endian_uint16_t>
 8013754:	062b      	lsls	r3, r5, #24
 8013756:	d501      	bpl.n	801375c <uxr_serialize_message_header+0x2c>
 8013758:	b003      	add	sp, #12
 801375a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801375c:	2204      	movs	r2, #4
 801375e:	4639      	mov	r1, r7
 8013760:	4620      	mov	r0, r4
 8013762:	b003      	add	sp, #12
 8013764:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8013768:	f005 b9e0 	b.w	8018b2c <ucdr_serialize_array_uint8_t>

0801376c <uxr_deserialize_message_header>:
 801376c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801376e:	b083      	sub	sp, #12
 8013770:	4616      	mov	r6, r2
 8013772:	4604      	mov	r4, r0
 8013774:	9301      	str	r3, [sp, #4]
 8013776:	460d      	mov	r5, r1
 8013778:	9f08      	ldr	r7, [sp, #32]
 801377a:	f7f9 f80d 	bl	800c798 <ucdr_deserialize_uint8_t>
 801377e:	4631      	mov	r1, r6
 8013780:	4620      	mov	r0, r4
 8013782:	f7f9 f809 	bl	800c798 <ucdr_deserialize_uint8_t>
 8013786:	9a01      	ldr	r2, [sp, #4]
 8013788:	2101      	movs	r1, #1
 801378a:	4620      	mov	r0, r4
 801378c:	f7f9 f98e 	bl	800caac <ucdr_deserialize_endian_uint16_t>
 8013790:	f995 3000 	ldrsb.w	r3, [r5]
 8013794:	2b00      	cmp	r3, #0
 8013796:	da01      	bge.n	801379c <uxr_deserialize_message_header+0x30>
 8013798:	b003      	add	sp, #12
 801379a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801379c:	2204      	movs	r2, #4
 801379e:	4639      	mov	r1, r7
 80137a0:	4620      	mov	r0, r4
 80137a2:	b003      	add	sp, #12
 80137a4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80137a8:	f005 ba24 	b.w	8018bf4 <ucdr_deserialize_array_uint8_t>

080137ac <uxr_serialize_submessage_header>:
 80137ac:	b530      	push	{r4, r5, lr}
 80137ae:	b083      	sub	sp, #12
 80137b0:	4615      	mov	r5, r2
 80137b2:	4604      	mov	r4, r0
 80137b4:	9301      	str	r3, [sp, #4]
 80137b6:	f7f8 ffd9 	bl	800c76c <ucdr_serialize_uint8_t>
 80137ba:	4629      	mov	r1, r5
 80137bc:	4620      	mov	r0, r4
 80137be:	f7f8 ffd5 	bl	800c76c <ucdr_serialize_uint8_t>
 80137c2:	9a01      	ldr	r2, [sp, #4]
 80137c4:	2101      	movs	r1, #1
 80137c6:	4620      	mov	r0, r4
 80137c8:	b003      	add	sp, #12
 80137ca:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80137ce:	f7f9 b879 	b.w	800c8c4 <ucdr_serialize_endian_uint16_t>
 80137d2:	bf00      	nop

080137d4 <uxr_deserialize_submessage_header>:
 80137d4:	b530      	push	{r4, r5, lr}
 80137d6:	b083      	sub	sp, #12
 80137d8:	4615      	mov	r5, r2
 80137da:	4604      	mov	r4, r0
 80137dc:	9301      	str	r3, [sp, #4]
 80137de:	f7f8 ffdb 	bl	800c798 <ucdr_deserialize_uint8_t>
 80137e2:	4629      	mov	r1, r5
 80137e4:	4620      	mov	r0, r4
 80137e6:	f7f8 ffd7 	bl	800c798 <ucdr_deserialize_uint8_t>
 80137ea:	9a01      	ldr	r2, [sp, #4]
 80137ec:	2101      	movs	r1, #1
 80137ee:	4620      	mov	r0, r4
 80137f0:	b003      	add	sp, #12
 80137f2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80137f6:	f7f9 b959 	b.w	800caac <ucdr_deserialize_endian_uint16_t>
 80137fa:	bf00      	nop

080137fc <uxr_serialize_CLIENT_Representation>:
 80137fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013800:	2204      	movs	r2, #4
 8013802:	460e      	mov	r6, r1
 8013804:	4605      	mov	r5, r0
 8013806:	f005 f991 	bl	8018b2c <ucdr_serialize_array_uint8_t>
 801380a:	2202      	movs	r2, #2
 801380c:	4607      	mov	r7, r0
 801380e:	1d31      	adds	r1, r6, #4
 8013810:	4628      	mov	r0, r5
 8013812:	f005 f98b 	bl	8018b2c <ucdr_serialize_array_uint8_t>
 8013816:	4038      	ands	r0, r7
 8013818:	2202      	movs	r2, #2
 801381a:	1db1      	adds	r1, r6, #6
 801381c:	b2c7      	uxtb	r7, r0
 801381e:	4628      	mov	r0, r5
 8013820:	f005 f984 	bl	8018b2c <ucdr_serialize_array_uint8_t>
 8013824:	2204      	movs	r2, #4
 8013826:	4007      	ands	r7, r0
 8013828:	f106 0108 	add.w	r1, r6, #8
 801382c:	4628      	mov	r0, r5
 801382e:	f005 f97d 	bl	8018b2c <ucdr_serialize_array_uint8_t>
 8013832:	7b31      	ldrb	r1, [r6, #12]
 8013834:	4007      	ands	r7, r0
 8013836:	4628      	mov	r0, r5
 8013838:	f7f8 ff98 	bl	800c76c <ucdr_serialize_uint8_t>
 801383c:	7b71      	ldrb	r1, [r6, #13]
 801383e:	4007      	ands	r7, r0
 8013840:	4628      	mov	r0, r5
 8013842:	f7f8 ff65 	bl	800c710 <ucdr_serialize_bool>
 8013846:	7b73      	ldrb	r3, [r6, #13]
 8013848:	ea07 0800 	and.w	r8, r7, r0
 801384c:	b93b      	cbnz	r3, 801385e <uxr_serialize_CLIENT_Representation+0x62>
 801384e:	8bb1      	ldrh	r1, [r6, #28]
 8013850:	4628      	mov	r0, r5
 8013852:	f7f8 ffb7 	bl	800c7c4 <ucdr_serialize_uint16_t>
 8013856:	ea08 0000 	and.w	r0, r8, r0
 801385a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801385e:	6931      	ldr	r1, [r6, #16]
 8013860:	4628      	mov	r0, r5
 8013862:	f7f9 f999 	bl	800cb98 <ucdr_serialize_uint32_t>
 8013866:	6933      	ldr	r3, [r6, #16]
 8013868:	b1e3      	cbz	r3, 80138a4 <uxr_serialize_CLIENT_Representation+0xa8>
 801386a:	b1c0      	cbz	r0, 801389e <uxr_serialize_CLIENT_Representation+0xa2>
 801386c:	4637      	mov	r7, r6
 801386e:	f04f 0900 	mov.w	r9, #0
 8013872:	e001      	b.n	8013878 <uxr_serialize_CLIENT_Representation+0x7c>
 8013874:	3708      	adds	r7, #8
 8013876:	b194      	cbz	r4, 801389e <uxr_serialize_CLIENT_Representation+0xa2>
 8013878:	6979      	ldr	r1, [r7, #20]
 801387a:	4628      	mov	r0, r5
 801387c:	f005 fac8 	bl	8018e10 <ucdr_serialize_string>
 8013880:	69b9      	ldr	r1, [r7, #24]
 8013882:	4604      	mov	r4, r0
 8013884:	4628      	mov	r0, r5
 8013886:	f005 fac3 	bl	8018e10 <ucdr_serialize_string>
 801388a:	6933      	ldr	r3, [r6, #16]
 801388c:	f109 0901 	add.w	r9, r9, #1
 8013890:	4004      	ands	r4, r0
 8013892:	4599      	cmp	r9, r3
 8013894:	b2e4      	uxtb	r4, r4
 8013896:	d3ed      	bcc.n	8013874 <uxr_serialize_CLIENT_Representation+0x78>
 8013898:	ea08 0804 	and.w	r8, r8, r4
 801389c:	e7d7      	b.n	801384e <uxr_serialize_CLIENT_Representation+0x52>
 801389e:	f04f 0800 	mov.w	r8, #0
 80138a2:	e7d4      	b.n	801384e <uxr_serialize_CLIENT_Representation+0x52>
 80138a4:	ea08 0800 	and.w	r8, r8, r0
 80138a8:	e7d1      	b.n	801384e <uxr_serialize_CLIENT_Representation+0x52>
 80138aa:	bf00      	nop

080138ac <uxr_deserialize_CLIENT_Representation>:
 80138ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80138b0:	2204      	movs	r2, #4
 80138b2:	460c      	mov	r4, r1
 80138b4:	4605      	mov	r5, r0
 80138b6:	f005 f99d 	bl	8018bf4 <ucdr_deserialize_array_uint8_t>
 80138ba:	2202      	movs	r2, #2
 80138bc:	4607      	mov	r7, r0
 80138be:	1d21      	adds	r1, r4, #4
 80138c0:	4628      	mov	r0, r5
 80138c2:	f005 f997 	bl	8018bf4 <ucdr_deserialize_array_uint8_t>
 80138c6:	4038      	ands	r0, r7
 80138c8:	2202      	movs	r2, #2
 80138ca:	1da1      	adds	r1, r4, #6
 80138cc:	b2c6      	uxtb	r6, r0
 80138ce:	4628      	mov	r0, r5
 80138d0:	f005 f990 	bl	8018bf4 <ucdr_deserialize_array_uint8_t>
 80138d4:	2204      	movs	r2, #4
 80138d6:	4006      	ands	r6, r0
 80138d8:	f104 0108 	add.w	r1, r4, #8
 80138dc:	4628      	mov	r0, r5
 80138de:	f005 f989 	bl	8018bf4 <ucdr_deserialize_array_uint8_t>
 80138e2:	f104 010c 	add.w	r1, r4, #12
 80138e6:	4006      	ands	r6, r0
 80138e8:	4628      	mov	r0, r5
 80138ea:	f7f8 ff55 	bl	800c798 <ucdr_deserialize_uint8_t>
 80138ee:	f104 010d 	add.w	r1, r4, #13
 80138f2:	ea06 0700 	and.w	r7, r6, r0
 80138f6:	4628      	mov	r0, r5
 80138f8:	f7f8 ff20 	bl	800c73c <ucdr_deserialize_bool>
 80138fc:	7b63      	ldrb	r3, [r4, #13]
 80138fe:	4007      	ands	r7, r0
 8013900:	b93b      	cbnz	r3, 8013912 <uxr_deserialize_CLIENT_Representation+0x66>
 8013902:	f104 011c 	add.w	r1, r4, #28
 8013906:	4628      	mov	r0, r5
 8013908:	f7f9 f85c 	bl	800c9c4 <ucdr_deserialize_uint16_t>
 801390c:	4038      	ands	r0, r7
 801390e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013912:	f104 0110 	add.w	r1, r4, #16
 8013916:	4628      	mov	r0, r5
 8013918:	f7f9 fa6e 	bl	800cdf8 <ucdr_deserialize_uint32_t>
 801391c:	6923      	ldr	r3, [r4, #16]
 801391e:	2b01      	cmp	r3, #1
 8013920:	d903      	bls.n	801392a <uxr_deserialize_CLIENT_Representation+0x7e>
 8013922:	2301      	movs	r3, #1
 8013924:	75ab      	strb	r3, [r5, #22]
 8013926:	2700      	movs	r7, #0
 8013928:	e7eb      	b.n	8013902 <uxr_deserialize_CLIENT_Representation+0x56>
 801392a:	b30b      	cbz	r3, 8013970 <uxr_deserialize_CLIENT_Representation+0xc4>
 801392c:	2800      	cmp	r0, #0
 801392e:	d0fa      	beq.n	8013926 <uxr_deserialize_CLIENT_Representation+0x7a>
 8013930:	46a0      	mov	r8, r4
 8013932:	f04f 0900 	mov.w	r9, #0
 8013936:	e001      	b.n	801393c <uxr_deserialize_CLIENT_Representation+0x90>
 8013938:	2e00      	cmp	r6, #0
 801393a:	d0f4      	beq.n	8013926 <uxr_deserialize_CLIENT_Representation+0x7a>
 801393c:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8013940:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8013944:	4628      	mov	r0, r5
 8013946:	f005 fa73 	bl	8018e30 <ucdr_deserialize_string>
 801394a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801394e:	4606      	mov	r6, r0
 8013950:	f8d8 1018 	ldr.w	r1, [r8, #24]
 8013954:	4628      	mov	r0, r5
 8013956:	f005 fa6b 	bl	8018e30 <ucdr_deserialize_string>
 801395a:	6923      	ldr	r3, [r4, #16]
 801395c:	f109 0901 	add.w	r9, r9, #1
 8013960:	4006      	ands	r6, r0
 8013962:	4599      	cmp	r9, r3
 8013964:	f108 0808 	add.w	r8, r8, #8
 8013968:	b2f6      	uxtb	r6, r6
 801396a:	d3e5      	bcc.n	8013938 <uxr_deserialize_CLIENT_Representation+0x8c>
 801396c:	4037      	ands	r7, r6
 801396e:	e7c8      	b.n	8013902 <uxr_deserialize_CLIENT_Representation+0x56>
 8013970:	4007      	ands	r7, r0
 8013972:	e7c6      	b.n	8013902 <uxr_deserialize_CLIENT_Representation+0x56>

08013974 <uxr_serialize_AGENT_Representation>:
 8013974:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013978:	2204      	movs	r2, #4
 801397a:	460f      	mov	r7, r1
 801397c:	4605      	mov	r5, r0
 801397e:	f005 f8d5 	bl	8018b2c <ucdr_serialize_array_uint8_t>
 8013982:	2202      	movs	r2, #2
 8013984:	4604      	mov	r4, r0
 8013986:	1d39      	adds	r1, r7, #4
 8013988:	4628      	mov	r0, r5
 801398a:	f005 f8cf 	bl	8018b2c <ucdr_serialize_array_uint8_t>
 801398e:	4020      	ands	r0, r4
 8013990:	2202      	movs	r2, #2
 8013992:	1db9      	adds	r1, r7, #6
 8013994:	b2c4      	uxtb	r4, r0
 8013996:	4628      	mov	r0, r5
 8013998:	f005 f8c8 	bl	8018b2c <ucdr_serialize_array_uint8_t>
 801399c:	7a39      	ldrb	r1, [r7, #8]
 801399e:	4004      	ands	r4, r0
 80139a0:	4628      	mov	r0, r5
 80139a2:	f7f8 feb5 	bl	800c710 <ucdr_serialize_bool>
 80139a6:	7a3b      	ldrb	r3, [r7, #8]
 80139a8:	ea00 0804 	and.w	r8, r0, r4
 80139ac:	b913      	cbnz	r3, 80139b4 <uxr_serialize_AGENT_Representation+0x40>
 80139ae:	4640      	mov	r0, r8
 80139b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80139b4:	68f9      	ldr	r1, [r7, #12]
 80139b6:	4628      	mov	r0, r5
 80139b8:	f7f9 f8ee 	bl	800cb98 <ucdr_serialize_uint32_t>
 80139bc:	68fb      	ldr	r3, [r7, #12]
 80139be:	b303      	cbz	r3, 8013a02 <uxr_serialize_AGENT_Representation+0x8e>
 80139c0:	b1d0      	cbz	r0, 80139f8 <uxr_serialize_AGENT_Representation+0x84>
 80139c2:	463e      	mov	r6, r7
 80139c4:	f04f 0900 	mov.w	r9, #0
 80139c8:	e001      	b.n	80139ce <uxr_serialize_AGENT_Representation+0x5a>
 80139ca:	3608      	adds	r6, #8
 80139cc:	b1a4      	cbz	r4, 80139f8 <uxr_serialize_AGENT_Representation+0x84>
 80139ce:	6931      	ldr	r1, [r6, #16]
 80139d0:	4628      	mov	r0, r5
 80139d2:	f005 fa1d 	bl	8018e10 <ucdr_serialize_string>
 80139d6:	6971      	ldr	r1, [r6, #20]
 80139d8:	4604      	mov	r4, r0
 80139da:	4628      	mov	r0, r5
 80139dc:	f005 fa18 	bl	8018e10 <ucdr_serialize_string>
 80139e0:	68fb      	ldr	r3, [r7, #12]
 80139e2:	f109 0901 	add.w	r9, r9, #1
 80139e6:	4004      	ands	r4, r0
 80139e8:	4599      	cmp	r9, r3
 80139ea:	b2e4      	uxtb	r4, r4
 80139ec:	d3ed      	bcc.n	80139ca <uxr_serialize_AGENT_Representation+0x56>
 80139ee:	ea08 0804 	and.w	r8, r8, r4
 80139f2:	4640      	mov	r0, r8
 80139f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80139f8:	f04f 0800 	mov.w	r8, #0
 80139fc:	4640      	mov	r0, r8
 80139fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013a02:	ea08 0800 	and.w	r8, r8, r0
 8013a06:	e7d2      	b.n	80139ae <uxr_serialize_AGENT_Representation+0x3a>

08013a08 <uxr_serialize_DATAWRITER_Representation>:
 8013a08:	b570      	push	{r4, r5, r6, lr}
 8013a0a:	460d      	mov	r5, r1
 8013a0c:	7809      	ldrb	r1, [r1, #0]
 8013a0e:	4606      	mov	r6, r0
 8013a10:	f7f8 feac 	bl	800c76c <ucdr_serialize_uint8_t>
 8013a14:	4604      	mov	r4, r0
 8013a16:	b130      	cbz	r0, 8013a26 <uxr_serialize_DATAWRITER_Representation+0x1e>
 8013a18:	782b      	ldrb	r3, [r5, #0]
 8013a1a:	2b02      	cmp	r3, #2
 8013a1c:	d00c      	beq.n	8013a38 <uxr_serialize_DATAWRITER_Representation+0x30>
 8013a1e:	2b03      	cmp	r3, #3
 8013a20:	d010      	beq.n	8013a44 <uxr_serialize_DATAWRITER_Representation+0x3c>
 8013a22:	2b01      	cmp	r3, #1
 8013a24:	d008      	beq.n	8013a38 <uxr_serialize_DATAWRITER_Representation+0x30>
 8013a26:	2202      	movs	r2, #2
 8013a28:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 8013a2c:	4630      	mov	r0, r6
 8013a2e:	f005 f87d 	bl	8018b2c <ucdr_serialize_array_uint8_t>
 8013a32:	4020      	ands	r0, r4
 8013a34:	b2c0      	uxtb	r0, r0
 8013a36:	bd70      	pop	{r4, r5, r6, pc}
 8013a38:	6869      	ldr	r1, [r5, #4]
 8013a3a:	4630      	mov	r0, r6
 8013a3c:	f005 f9e8 	bl	8018e10 <ucdr_serialize_string>
 8013a40:	4604      	mov	r4, r0
 8013a42:	e7f0      	b.n	8013a26 <uxr_serialize_DATAWRITER_Representation+0x1e>
 8013a44:	4629      	mov	r1, r5
 8013a46:	4630      	mov	r0, r6
 8013a48:	f851 2f04 	ldr.w	r2, [r1, #4]!
 8013a4c:	3104      	adds	r1, #4
 8013a4e:	f7fd f947 	bl	8010ce0 <ucdr_serialize_sequence_uint8_t>
 8013a52:	4604      	mov	r4, r0
 8013a54:	e7e7      	b.n	8013a26 <uxr_serialize_DATAWRITER_Representation+0x1e>
 8013a56:	bf00      	nop

08013a58 <uxr_serialize_ObjectVariant.part.0>:
 8013a58:	b570      	push	{r4, r5, r6, lr}
 8013a5a:	780b      	ldrb	r3, [r1, #0]
 8013a5c:	3b01      	subs	r3, #1
 8013a5e:	460c      	mov	r4, r1
 8013a60:	4605      	mov	r5, r0
 8013a62:	2b0d      	cmp	r3, #13
 8013a64:	d854      	bhi.n	8013b10 <uxr_serialize_ObjectVariant.part.0+0xb8>
 8013a66:	e8df f003 	tbb	[pc, r3]
 8013a6a:	0730      	.short	0x0730
 8013a6c:	07071b1b 	.word	0x07071b1b
 8013a70:	0c530707 	.word	0x0c530707
 8013a74:	494e0c0c 	.word	0x494e0c0c
 8013a78:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013a7c:	3104      	adds	r1, #4
 8013a7e:	f7ff bfc3 	b.w	8013a08 <uxr_serialize_DATAWRITER_Representation>
 8013a82:	7909      	ldrb	r1, [r1, #4]
 8013a84:	f7f8 fe72 	bl	800c76c <ucdr_serialize_uint8_t>
 8013a88:	b1e8      	cbz	r0, 8013ac6 <uxr_serialize_ObjectVariant.part.0+0x6e>
 8013a8a:	7923      	ldrb	r3, [r4, #4]
 8013a8c:	2b01      	cmp	r3, #1
 8013a8e:	d001      	beq.n	8013a94 <uxr_serialize_ObjectVariant.part.0+0x3c>
 8013a90:	2b02      	cmp	r3, #2
 8013a92:	d13d      	bne.n	8013b10 <uxr_serialize_ObjectVariant.part.0+0xb8>
 8013a94:	68a1      	ldr	r1, [r4, #8]
 8013a96:	4628      	mov	r0, r5
 8013a98:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013a9c:	f005 b9b8 	b.w	8018e10 <ucdr_serialize_string>
 8013aa0:	7909      	ldrb	r1, [r1, #4]
 8013aa2:	f7f8 fe63 	bl	800c76c <ucdr_serialize_uint8_t>
 8013aa6:	4606      	mov	r6, r0
 8013aa8:	b120      	cbz	r0, 8013ab4 <uxr_serialize_ObjectVariant.part.0+0x5c>
 8013aaa:	7923      	ldrb	r3, [r4, #4]
 8013aac:	2b02      	cmp	r3, #2
 8013aae:	d039      	beq.n	8013b24 <uxr_serialize_ObjectVariant.part.0+0xcc>
 8013ab0:	2b03      	cmp	r3, #3
 8013ab2:	d02f      	beq.n	8013b14 <uxr_serialize_ObjectVariant.part.0+0xbc>
 8013ab4:	2202      	movs	r2, #2
 8013ab6:	f504 7103 	add.w	r1, r4, #524	@ 0x20c
 8013aba:	4628      	mov	r0, r5
 8013abc:	f005 f836 	bl	8018b2c <ucdr_serialize_array_uint8_t>
 8013ac0:	4030      	ands	r0, r6
 8013ac2:	b2c0      	uxtb	r0, r0
 8013ac4:	bd70      	pop	{r4, r5, r6, pc}
 8013ac6:	2000      	movs	r0, #0
 8013ac8:	bd70      	pop	{r4, r5, r6, pc}
 8013aca:	7909      	ldrb	r1, [r1, #4]
 8013acc:	f7f8 fe4e 	bl	800c76c <ucdr_serialize_uint8_t>
 8013ad0:	4606      	mov	r6, r0
 8013ad2:	b158      	cbz	r0, 8013aec <uxr_serialize_ObjectVariant.part.0+0x94>
 8013ad4:	7923      	ldrb	r3, [r4, #4]
 8013ad6:	2b02      	cmp	r3, #2
 8013ad8:	d003      	beq.n	8013ae2 <uxr_serialize_ObjectVariant.part.0+0x8a>
 8013ada:	2b03      	cmp	r3, #3
 8013adc:	d028      	beq.n	8013b30 <uxr_serialize_ObjectVariant.part.0+0xd8>
 8013ade:	2b01      	cmp	r3, #1
 8013ae0:	d104      	bne.n	8013aec <uxr_serialize_ObjectVariant.part.0+0x94>
 8013ae2:	68a1      	ldr	r1, [r4, #8]
 8013ae4:	4628      	mov	r0, r5
 8013ae6:	f005 f993 	bl	8018e10 <ucdr_serialize_string>
 8013aea:	4606      	mov	r6, r0
 8013aec:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	@ 0x20c
 8013af0:	4628      	mov	r0, r5
 8013af2:	f7f9 fb77 	bl	800d1e4 <ucdr_serialize_int16_t>
 8013af6:	4030      	ands	r0, r6
 8013af8:	b2c0      	uxtb	r0, r0
 8013afa:	bd70      	pop	{r4, r5, r6, pc}
 8013afc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013b00:	3104      	adds	r1, #4
 8013b02:	f7ff be7b 	b.w	80137fc <uxr_serialize_CLIENT_Representation>
 8013b06:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013b0a:	3104      	adds	r1, #4
 8013b0c:	f7ff bf32 	b.w	8013974 <uxr_serialize_AGENT_Representation>
 8013b10:	2001      	movs	r0, #1
 8013b12:	bd70      	pop	{r4, r5, r6, pc}
 8013b14:	68a2      	ldr	r2, [r4, #8]
 8013b16:	f104 010c 	add.w	r1, r4, #12
 8013b1a:	4628      	mov	r0, r5
 8013b1c:	f7fd f8e0 	bl	8010ce0 <ucdr_serialize_sequence_uint8_t>
 8013b20:	4606      	mov	r6, r0
 8013b22:	e7c7      	b.n	8013ab4 <uxr_serialize_ObjectVariant.part.0+0x5c>
 8013b24:	68a1      	ldr	r1, [r4, #8]
 8013b26:	4628      	mov	r0, r5
 8013b28:	f005 f972 	bl	8018e10 <ucdr_serialize_string>
 8013b2c:	4606      	mov	r6, r0
 8013b2e:	e7c1      	b.n	8013ab4 <uxr_serialize_ObjectVariant.part.0+0x5c>
 8013b30:	68a2      	ldr	r2, [r4, #8]
 8013b32:	f104 010c 	add.w	r1, r4, #12
 8013b36:	4628      	mov	r0, r5
 8013b38:	f7fd f8d2 	bl	8010ce0 <ucdr_serialize_sequence_uint8_t>
 8013b3c:	4606      	mov	r6, r0
 8013b3e:	e7d5      	b.n	8013aec <uxr_serialize_ObjectVariant.part.0+0x94>

08013b40 <uxr_deserialize_DATAWRITER_Representation>:
 8013b40:	b570      	push	{r4, r5, r6, lr}
 8013b42:	4606      	mov	r6, r0
 8013b44:	460d      	mov	r5, r1
 8013b46:	f7f8 fe27 	bl	800c798 <ucdr_deserialize_uint8_t>
 8013b4a:	4604      	mov	r4, r0
 8013b4c:	b130      	cbz	r0, 8013b5c <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8013b4e:	782b      	ldrb	r3, [r5, #0]
 8013b50:	2b02      	cmp	r3, #2
 8013b52:	d00c      	beq.n	8013b6e <uxr_deserialize_DATAWRITER_Representation+0x2e>
 8013b54:	2b03      	cmp	r3, #3
 8013b56:	d012      	beq.n	8013b7e <uxr_deserialize_DATAWRITER_Representation+0x3e>
 8013b58:	2b01      	cmp	r3, #1
 8013b5a:	d008      	beq.n	8013b6e <uxr_deserialize_DATAWRITER_Representation+0x2e>
 8013b5c:	2202      	movs	r2, #2
 8013b5e:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 8013b62:	4630      	mov	r0, r6
 8013b64:	f005 f846 	bl	8018bf4 <ucdr_deserialize_array_uint8_t>
 8013b68:	4020      	ands	r0, r4
 8013b6a:	b2c0      	uxtb	r0, r0
 8013b6c:	bd70      	pop	{r4, r5, r6, pc}
 8013b6e:	6869      	ldr	r1, [r5, #4]
 8013b70:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8013b74:	4630      	mov	r0, r6
 8013b76:	f005 f95b 	bl	8018e30 <ucdr_deserialize_string>
 8013b7a:	4604      	mov	r4, r0
 8013b7c:	e7ee      	b.n	8013b5c <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8013b7e:	1d2b      	adds	r3, r5, #4
 8013b80:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8013b84:	f105 0108 	add.w	r1, r5, #8
 8013b88:	4630      	mov	r0, r6
 8013b8a:	f7fd f8bb 	bl	8010d04 <ucdr_deserialize_sequence_uint8_t>
 8013b8e:	4604      	mov	r4, r0
 8013b90:	e7e4      	b.n	8013b5c <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8013b92:	bf00      	nop

08013b94 <uxr_serialize_OBJK_DomainParticipant_Binary>:
 8013b94:	b570      	push	{r4, r5, r6, lr}
 8013b96:	460d      	mov	r5, r1
 8013b98:	7809      	ldrb	r1, [r1, #0]
 8013b9a:	4606      	mov	r6, r0
 8013b9c:	f7f8 fdb8 	bl	800c710 <ucdr_serialize_bool>
 8013ba0:	782b      	ldrb	r3, [r5, #0]
 8013ba2:	4604      	mov	r4, r0
 8013ba4:	b94b      	cbnz	r3, 8013bba <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 8013ba6:	7a29      	ldrb	r1, [r5, #8]
 8013ba8:	4630      	mov	r0, r6
 8013baa:	f7f8 fdb1 	bl	800c710 <ucdr_serialize_bool>
 8013bae:	7a2b      	ldrb	r3, [r5, #8]
 8013bb0:	4004      	ands	r4, r0
 8013bb2:	b2e4      	uxtb	r4, r4
 8013bb4:	b943      	cbnz	r3, 8013bc8 <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 8013bb6:	4620      	mov	r0, r4
 8013bb8:	bd70      	pop	{r4, r5, r6, pc}
 8013bba:	6869      	ldr	r1, [r5, #4]
 8013bbc:	4630      	mov	r0, r6
 8013bbe:	f005 f927 	bl	8018e10 <ucdr_serialize_string>
 8013bc2:	4004      	ands	r4, r0
 8013bc4:	b2e4      	uxtb	r4, r4
 8013bc6:	e7ee      	b.n	8013ba6 <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 8013bc8:	68e9      	ldr	r1, [r5, #12]
 8013bca:	4630      	mov	r0, r6
 8013bcc:	f005 f920 	bl	8018e10 <ucdr_serialize_string>
 8013bd0:	4004      	ands	r4, r0
 8013bd2:	4620      	mov	r0, r4
 8013bd4:	bd70      	pop	{r4, r5, r6, pc}
 8013bd6:	bf00      	nop

08013bd8 <uxr_serialize_OBJK_Topic_Binary>:
 8013bd8:	b570      	push	{r4, r5, r6, lr}
 8013bda:	460d      	mov	r5, r1
 8013bdc:	6809      	ldr	r1, [r1, #0]
 8013bde:	4606      	mov	r6, r0
 8013be0:	f005 f916 	bl	8018e10 <ucdr_serialize_string>
 8013be4:	7929      	ldrb	r1, [r5, #4]
 8013be6:	4604      	mov	r4, r0
 8013be8:	4630      	mov	r0, r6
 8013bea:	f7f8 fd91 	bl	800c710 <ucdr_serialize_bool>
 8013bee:	792b      	ldrb	r3, [r5, #4]
 8013bf0:	4004      	ands	r4, r0
 8013bf2:	b2e4      	uxtb	r4, r4
 8013bf4:	b943      	cbnz	r3, 8013c08 <uxr_serialize_OBJK_Topic_Binary+0x30>
 8013bf6:	7b29      	ldrb	r1, [r5, #12]
 8013bf8:	4630      	mov	r0, r6
 8013bfa:	f7f8 fd89 	bl	800c710 <ucdr_serialize_bool>
 8013bfe:	7b2b      	ldrb	r3, [r5, #12]
 8013c00:	4004      	ands	r4, r0
 8013c02:	b93b      	cbnz	r3, 8013c14 <uxr_serialize_OBJK_Topic_Binary+0x3c>
 8013c04:	4620      	mov	r0, r4
 8013c06:	bd70      	pop	{r4, r5, r6, pc}
 8013c08:	68a9      	ldr	r1, [r5, #8]
 8013c0a:	4630      	mov	r0, r6
 8013c0c:	f005 f900 	bl	8018e10 <ucdr_serialize_string>
 8013c10:	4004      	ands	r4, r0
 8013c12:	e7f0      	b.n	8013bf6 <uxr_serialize_OBJK_Topic_Binary+0x1e>
 8013c14:	6929      	ldr	r1, [r5, #16]
 8013c16:	4630      	mov	r0, r6
 8013c18:	f005 f8fa 	bl	8018e10 <ucdr_serialize_string>
 8013c1c:	4004      	ands	r4, r0
 8013c1e:	b2e4      	uxtb	r4, r4
 8013c20:	4620      	mov	r0, r4
 8013c22:	bd70      	pop	{r4, r5, r6, pc}

08013c24 <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 8013c24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013c28:	460c      	mov	r4, r1
 8013c2a:	7809      	ldrb	r1, [r1, #0]
 8013c2c:	4606      	mov	r6, r0
 8013c2e:	f7f8 fd6f 	bl	800c710 <ucdr_serialize_bool>
 8013c32:	7823      	ldrb	r3, [r4, #0]
 8013c34:	4605      	mov	r5, r0
 8013c36:	b96b      	cbnz	r3, 8013c54 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 8013c38:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 8013c3c:	4630      	mov	r0, r6
 8013c3e:	f7f8 fd67 	bl	800c710 <ucdr_serialize_bool>
 8013c42:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8013c46:	4005      	ands	r5, r0
 8013c48:	b2ed      	uxtb	r5, r5
 8013c4a:	2b00      	cmp	r3, #0
 8013c4c:	d169      	bne.n	8013d22 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xfe>
 8013c4e:	4628      	mov	r0, r5
 8013c50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013c54:	6861      	ldr	r1, [r4, #4]
 8013c56:	4630      	mov	r0, r6
 8013c58:	f7f8 ff9e 	bl	800cb98 <ucdr_serialize_uint32_t>
 8013c5c:	6863      	ldr	r3, [r4, #4]
 8013c5e:	2b00      	cmp	r3, #0
 8013c60:	d06b      	beq.n	8013d3a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x116>
 8013c62:	2800      	cmp	r0, #0
 8013c64:	d067      	beq.n	8013d36 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013c66:	68a1      	ldr	r1, [r4, #8]
 8013c68:	4630      	mov	r0, r6
 8013c6a:	f005 f8d1 	bl	8018e10 <ucdr_serialize_string>
 8013c6e:	6863      	ldr	r3, [r4, #4]
 8013c70:	2b01      	cmp	r3, #1
 8013c72:	d953      	bls.n	8013d1c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8013c74:	2800      	cmp	r0, #0
 8013c76:	d05e      	beq.n	8013d36 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013c78:	68e1      	ldr	r1, [r4, #12]
 8013c7a:	4630      	mov	r0, r6
 8013c7c:	f005 f8c8 	bl	8018e10 <ucdr_serialize_string>
 8013c80:	6863      	ldr	r3, [r4, #4]
 8013c82:	2b02      	cmp	r3, #2
 8013c84:	d94a      	bls.n	8013d1c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8013c86:	2800      	cmp	r0, #0
 8013c88:	d055      	beq.n	8013d36 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013c8a:	6921      	ldr	r1, [r4, #16]
 8013c8c:	4630      	mov	r0, r6
 8013c8e:	f005 f8bf 	bl	8018e10 <ucdr_serialize_string>
 8013c92:	6863      	ldr	r3, [r4, #4]
 8013c94:	2b03      	cmp	r3, #3
 8013c96:	d941      	bls.n	8013d1c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8013c98:	2800      	cmp	r0, #0
 8013c9a:	d04c      	beq.n	8013d36 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013c9c:	6961      	ldr	r1, [r4, #20]
 8013c9e:	4630      	mov	r0, r6
 8013ca0:	f005 f8b6 	bl	8018e10 <ucdr_serialize_string>
 8013ca4:	6863      	ldr	r3, [r4, #4]
 8013ca6:	2b04      	cmp	r3, #4
 8013ca8:	d938      	bls.n	8013d1c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8013caa:	2800      	cmp	r0, #0
 8013cac:	d043      	beq.n	8013d36 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013cae:	69a1      	ldr	r1, [r4, #24]
 8013cb0:	4630      	mov	r0, r6
 8013cb2:	f005 f8ad 	bl	8018e10 <ucdr_serialize_string>
 8013cb6:	6863      	ldr	r3, [r4, #4]
 8013cb8:	2b05      	cmp	r3, #5
 8013cba:	d92f      	bls.n	8013d1c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8013cbc:	2800      	cmp	r0, #0
 8013cbe:	d03a      	beq.n	8013d36 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013cc0:	69e1      	ldr	r1, [r4, #28]
 8013cc2:	4630      	mov	r0, r6
 8013cc4:	f005 f8a4 	bl	8018e10 <ucdr_serialize_string>
 8013cc8:	6863      	ldr	r3, [r4, #4]
 8013cca:	2b06      	cmp	r3, #6
 8013ccc:	d926      	bls.n	8013d1c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8013cce:	b390      	cbz	r0, 8013d36 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013cd0:	6a21      	ldr	r1, [r4, #32]
 8013cd2:	4630      	mov	r0, r6
 8013cd4:	f005 f89c 	bl	8018e10 <ucdr_serialize_string>
 8013cd8:	6863      	ldr	r3, [r4, #4]
 8013cda:	2b07      	cmp	r3, #7
 8013cdc:	d91e      	bls.n	8013d1c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8013cde:	b350      	cbz	r0, 8013d36 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013ce0:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8013ce2:	4630      	mov	r0, r6
 8013ce4:	f005 f894 	bl	8018e10 <ucdr_serialize_string>
 8013ce8:	6863      	ldr	r3, [r4, #4]
 8013cea:	2b08      	cmp	r3, #8
 8013cec:	d916      	bls.n	8013d1c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8013cee:	b310      	cbz	r0, 8013d36 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013cf0:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8013cf2:	4630      	mov	r0, r6
 8013cf4:	f005 f88c 	bl	8018e10 <ucdr_serialize_string>
 8013cf8:	6863      	ldr	r3, [r4, #4]
 8013cfa:	2b09      	cmp	r3, #9
 8013cfc:	d90e      	bls.n	8013d1c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8013cfe:	b1d0      	cbz	r0, 8013d36 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013d00:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 8013d04:	2709      	movs	r7, #9
 8013d06:	e000      	b.n	8013d0a <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 8013d08:	b1a8      	cbz	r0, 8013d36 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013d0a:	f858 1b04 	ldr.w	r1, [r8], #4
 8013d0e:	4630      	mov	r0, r6
 8013d10:	f005 f87e 	bl	8018e10 <ucdr_serialize_string>
 8013d14:	6862      	ldr	r2, [r4, #4]
 8013d16:	3701      	adds	r7, #1
 8013d18:	4297      	cmp	r7, r2
 8013d1a:	d3f5      	bcc.n	8013d08 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 8013d1c:	4005      	ands	r5, r0
 8013d1e:	b2ed      	uxtb	r5, r5
 8013d20:	e78a      	b.n	8013c38 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 8013d22:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8013d24:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8013d28:	4630      	mov	r0, r6
 8013d2a:	f7fc ffd9 	bl	8010ce0 <ucdr_serialize_sequence_uint8_t>
 8013d2e:	4005      	ands	r5, r0
 8013d30:	4628      	mov	r0, r5
 8013d32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013d36:	2500      	movs	r5, #0
 8013d38:	e77e      	b.n	8013c38 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 8013d3a:	4028      	ands	r0, r5
 8013d3c:	b2c5      	uxtb	r5, r0
 8013d3e:	e77b      	b.n	8013c38 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>

08013d40 <uxr_serialize_OBJK_Publisher_Binary>:
 8013d40:	b570      	push	{r4, r5, r6, lr}
 8013d42:	460d      	mov	r5, r1
 8013d44:	7809      	ldrb	r1, [r1, #0]
 8013d46:	4606      	mov	r6, r0
 8013d48:	f7f8 fce2 	bl	800c710 <ucdr_serialize_bool>
 8013d4c:	782b      	ldrb	r3, [r5, #0]
 8013d4e:	4604      	mov	r4, r0
 8013d50:	b94b      	cbnz	r3, 8013d66 <uxr_serialize_OBJK_Publisher_Binary+0x26>
 8013d52:	7a29      	ldrb	r1, [r5, #8]
 8013d54:	4630      	mov	r0, r6
 8013d56:	f7f8 fcdb 	bl	800c710 <ucdr_serialize_bool>
 8013d5a:	7a2b      	ldrb	r3, [r5, #8]
 8013d5c:	4004      	ands	r4, r0
 8013d5e:	b2e4      	uxtb	r4, r4
 8013d60:	b943      	cbnz	r3, 8013d74 <uxr_serialize_OBJK_Publisher_Binary+0x34>
 8013d62:	4620      	mov	r0, r4
 8013d64:	bd70      	pop	{r4, r5, r6, pc}
 8013d66:	6869      	ldr	r1, [r5, #4]
 8013d68:	4630      	mov	r0, r6
 8013d6a:	f005 f851 	bl	8018e10 <ucdr_serialize_string>
 8013d6e:	4004      	ands	r4, r0
 8013d70:	b2e4      	uxtb	r4, r4
 8013d72:	e7ee      	b.n	8013d52 <uxr_serialize_OBJK_Publisher_Binary+0x12>
 8013d74:	f105 010c 	add.w	r1, r5, #12
 8013d78:	4630      	mov	r0, r6
 8013d7a:	f7ff ff53 	bl	8013c24 <uxr_serialize_OBJK_Publisher_Binary_Qos>
 8013d7e:	4004      	ands	r4, r0
 8013d80:	4620      	mov	r0, r4
 8013d82:	bd70      	pop	{r4, r5, r6, pc}

08013d84 <uxr_serialize_OBJK_Subscriber_Binary_Qos>:
 8013d84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013d88:	460c      	mov	r4, r1
 8013d8a:	7809      	ldrb	r1, [r1, #0]
 8013d8c:	4606      	mov	r6, r0
 8013d8e:	f7f8 fcbf 	bl	800c710 <ucdr_serialize_bool>
 8013d92:	7823      	ldrb	r3, [r4, #0]
 8013d94:	4605      	mov	r5, r0
 8013d96:	b96b      	cbnz	r3, 8013db4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x30>
 8013d98:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 8013d9c:	4630      	mov	r0, r6
 8013d9e:	f7f8 fcb7 	bl	800c710 <ucdr_serialize_bool>
 8013da2:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8013da6:	4005      	ands	r5, r0
 8013da8:	b2ed      	uxtb	r5, r5
 8013daa:	2b00      	cmp	r3, #0
 8013dac:	d169      	bne.n	8013e82 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xfe>
 8013dae:	4628      	mov	r0, r5
 8013db0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013db4:	6861      	ldr	r1, [r4, #4]
 8013db6:	4630      	mov	r0, r6
 8013db8:	f7f8 feee 	bl	800cb98 <ucdr_serialize_uint32_t>
 8013dbc:	6863      	ldr	r3, [r4, #4]
 8013dbe:	2b00      	cmp	r3, #0
 8013dc0:	d06b      	beq.n	8013e9a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x116>
 8013dc2:	2800      	cmp	r0, #0
 8013dc4:	d067      	beq.n	8013e96 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8013dc6:	68a1      	ldr	r1, [r4, #8]
 8013dc8:	4630      	mov	r0, r6
 8013dca:	f005 f821 	bl	8018e10 <ucdr_serialize_string>
 8013dce:	6863      	ldr	r3, [r4, #4]
 8013dd0:	2b01      	cmp	r3, #1
 8013dd2:	d953      	bls.n	8013e7c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8013dd4:	2800      	cmp	r0, #0
 8013dd6:	d05e      	beq.n	8013e96 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8013dd8:	68e1      	ldr	r1, [r4, #12]
 8013dda:	4630      	mov	r0, r6
 8013ddc:	f005 f818 	bl	8018e10 <ucdr_serialize_string>
 8013de0:	6863      	ldr	r3, [r4, #4]
 8013de2:	2b02      	cmp	r3, #2
 8013de4:	d94a      	bls.n	8013e7c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8013de6:	2800      	cmp	r0, #0
 8013de8:	d055      	beq.n	8013e96 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8013dea:	6921      	ldr	r1, [r4, #16]
 8013dec:	4630      	mov	r0, r6
 8013dee:	f005 f80f 	bl	8018e10 <ucdr_serialize_string>
 8013df2:	6863      	ldr	r3, [r4, #4]
 8013df4:	2b03      	cmp	r3, #3
 8013df6:	d941      	bls.n	8013e7c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8013df8:	2800      	cmp	r0, #0
 8013dfa:	d04c      	beq.n	8013e96 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8013dfc:	6961      	ldr	r1, [r4, #20]
 8013dfe:	4630      	mov	r0, r6
 8013e00:	f005 f806 	bl	8018e10 <ucdr_serialize_string>
 8013e04:	6863      	ldr	r3, [r4, #4]
 8013e06:	2b04      	cmp	r3, #4
 8013e08:	d938      	bls.n	8013e7c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8013e0a:	2800      	cmp	r0, #0
 8013e0c:	d043      	beq.n	8013e96 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8013e0e:	69a1      	ldr	r1, [r4, #24]
 8013e10:	4630      	mov	r0, r6
 8013e12:	f004 fffd 	bl	8018e10 <ucdr_serialize_string>
 8013e16:	6863      	ldr	r3, [r4, #4]
 8013e18:	2b05      	cmp	r3, #5
 8013e1a:	d92f      	bls.n	8013e7c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8013e1c:	2800      	cmp	r0, #0
 8013e1e:	d03a      	beq.n	8013e96 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8013e20:	69e1      	ldr	r1, [r4, #28]
 8013e22:	4630      	mov	r0, r6
 8013e24:	f004 fff4 	bl	8018e10 <ucdr_serialize_string>
 8013e28:	6863      	ldr	r3, [r4, #4]
 8013e2a:	2b06      	cmp	r3, #6
 8013e2c:	d926      	bls.n	8013e7c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8013e2e:	b390      	cbz	r0, 8013e96 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8013e30:	6a21      	ldr	r1, [r4, #32]
 8013e32:	4630      	mov	r0, r6
 8013e34:	f004 ffec 	bl	8018e10 <ucdr_serialize_string>
 8013e38:	6863      	ldr	r3, [r4, #4]
 8013e3a:	2b07      	cmp	r3, #7
 8013e3c:	d91e      	bls.n	8013e7c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8013e3e:	b350      	cbz	r0, 8013e96 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8013e40:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8013e42:	4630      	mov	r0, r6
 8013e44:	f004 ffe4 	bl	8018e10 <ucdr_serialize_string>
 8013e48:	6863      	ldr	r3, [r4, #4]
 8013e4a:	2b08      	cmp	r3, #8
 8013e4c:	d916      	bls.n	8013e7c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8013e4e:	b310      	cbz	r0, 8013e96 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8013e50:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8013e52:	4630      	mov	r0, r6
 8013e54:	f004 ffdc 	bl	8018e10 <ucdr_serialize_string>
 8013e58:	6863      	ldr	r3, [r4, #4]
 8013e5a:	2b09      	cmp	r3, #9
 8013e5c:	d90e      	bls.n	8013e7c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8013e5e:	b1d0      	cbz	r0, 8013e96 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8013e60:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 8013e64:	2709      	movs	r7, #9
 8013e66:	e000      	b.n	8013e6a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe6>
 8013e68:	b1a8      	cbz	r0, 8013e96 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8013e6a:	f858 1b04 	ldr.w	r1, [r8], #4
 8013e6e:	4630      	mov	r0, r6
 8013e70:	f004 ffce 	bl	8018e10 <ucdr_serialize_string>
 8013e74:	6862      	ldr	r2, [r4, #4]
 8013e76:	3701      	adds	r7, #1
 8013e78:	4297      	cmp	r7, r2
 8013e7a:	d3f5      	bcc.n	8013e68 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe4>
 8013e7c:	4005      	ands	r5, r0
 8013e7e:	b2ed      	uxtb	r5, r5
 8013e80:	e78a      	b.n	8013d98 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 8013e82:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8013e84:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8013e88:	4630      	mov	r0, r6
 8013e8a:	f7fc ff29 	bl	8010ce0 <ucdr_serialize_sequence_uint8_t>
 8013e8e:	4005      	ands	r5, r0
 8013e90:	4628      	mov	r0, r5
 8013e92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013e96:	2500      	movs	r5, #0
 8013e98:	e77e      	b.n	8013d98 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 8013e9a:	4028      	ands	r0, r5
 8013e9c:	b2c5      	uxtb	r5, r0
 8013e9e:	e77b      	b.n	8013d98 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>

08013ea0 <uxr_serialize_OBJK_Subscriber_Binary>:
 8013ea0:	b570      	push	{r4, r5, r6, lr}
 8013ea2:	460d      	mov	r5, r1
 8013ea4:	7809      	ldrb	r1, [r1, #0]
 8013ea6:	4606      	mov	r6, r0
 8013ea8:	f7f8 fc32 	bl	800c710 <ucdr_serialize_bool>
 8013eac:	782b      	ldrb	r3, [r5, #0]
 8013eae:	4604      	mov	r4, r0
 8013eb0:	b94b      	cbnz	r3, 8013ec6 <uxr_serialize_OBJK_Subscriber_Binary+0x26>
 8013eb2:	7a29      	ldrb	r1, [r5, #8]
 8013eb4:	4630      	mov	r0, r6
 8013eb6:	f7f8 fc2b 	bl	800c710 <ucdr_serialize_bool>
 8013eba:	7a2b      	ldrb	r3, [r5, #8]
 8013ebc:	4004      	ands	r4, r0
 8013ebe:	b2e4      	uxtb	r4, r4
 8013ec0:	b943      	cbnz	r3, 8013ed4 <uxr_serialize_OBJK_Subscriber_Binary+0x34>
 8013ec2:	4620      	mov	r0, r4
 8013ec4:	bd70      	pop	{r4, r5, r6, pc}
 8013ec6:	6869      	ldr	r1, [r5, #4]
 8013ec8:	4630      	mov	r0, r6
 8013eca:	f004 ffa1 	bl	8018e10 <ucdr_serialize_string>
 8013ece:	4004      	ands	r4, r0
 8013ed0:	b2e4      	uxtb	r4, r4
 8013ed2:	e7ee      	b.n	8013eb2 <uxr_serialize_OBJK_Subscriber_Binary+0x12>
 8013ed4:	f105 010c 	add.w	r1, r5, #12
 8013ed8:	4630      	mov	r0, r6
 8013eda:	f7ff ff53 	bl	8013d84 <uxr_serialize_OBJK_Subscriber_Binary_Qos>
 8013ede:	4004      	ands	r4, r0
 8013ee0:	4620      	mov	r0, r4
 8013ee2:	bd70      	pop	{r4, r5, r6, pc}

08013ee4 <uxr_serialize_OBJK_Endpoint_QosBinary>:
 8013ee4:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 8013ee8:	4688      	mov	r8, r1
 8013eea:	8809      	ldrh	r1, [r1, #0]
 8013eec:	4681      	mov	r9, r0
 8013eee:	f7f8 fc69 	bl	800c7c4 <ucdr_serialize_uint16_t>
 8013ef2:	f898 1002 	ldrb.w	r1, [r8, #2]
 8013ef6:	4606      	mov	r6, r0
 8013ef8:	4648      	mov	r0, r9
 8013efa:	f7f8 fc09 	bl	800c710 <ucdr_serialize_bool>
 8013efe:	f898 3002 	ldrb.w	r3, [r8, #2]
 8013f02:	4006      	ands	r6, r0
 8013f04:	b2f5      	uxtb	r5, r6
 8013f06:	b9eb      	cbnz	r3, 8013f44 <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 8013f08:	f898 1006 	ldrb.w	r1, [r8, #6]
 8013f0c:	4648      	mov	r0, r9
 8013f0e:	f7f8 fbff 	bl	800c710 <ucdr_serialize_bool>
 8013f12:	f898 3006 	ldrb.w	r3, [r8, #6]
 8013f16:	4005      	ands	r5, r0
 8013f18:	bb7b      	cbnz	r3, 8013f7a <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 8013f1a:	f898 100c 	ldrb.w	r1, [r8, #12]
 8013f1e:	4648      	mov	r0, r9
 8013f20:	f7f8 fbf6 	bl	800c710 <ucdr_serialize_bool>
 8013f24:	f898 300c 	ldrb.w	r3, [r8, #12]
 8013f28:	4005      	ands	r5, r0
 8013f2a:	b9f3      	cbnz	r3, 8013f6a <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 8013f2c:	f898 1014 	ldrb.w	r1, [r8, #20]
 8013f30:	4648      	mov	r0, r9
 8013f32:	f7f8 fbed 	bl	800c710 <ucdr_serialize_bool>
 8013f36:	f898 3014 	ldrb.w	r3, [r8, #20]
 8013f3a:	4005      	ands	r5, r0
 8013f3c:	b94b      	cbnz	r3, 8013f52 <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 8013f3e:	4628      	mov	r0, r5
 8013f40:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 8013f44:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 8013f48:	4648      	mov	r0, r9
 8013f4a:	f7f8 fc3b 	bl	800c7c4 <ucdr_serialize_uint16_t>
 8013f4e:	4005      	ands	r5, r0
 8013f50:	e7da      	b.n	8013f08 <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 8013f52:	f8d8 2018 	ldr.w	r2, [r8, #24]
 8013f56:	f108 011c 	add.w	r1, r8, #28
 8013f5a:	4648      	mov	r0, r9
 8013f5c:	f7fc fec0 	bl	8010ce0 <ucdr_serialize_sequence_uint8_t>
 8013f60:	4028      	ands	r0, r5
 8013f62:	b2c5      	uxtb	r5, r0
 8013f64:	4628      	mov	r0, r5
 8013f66:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 8013f6a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8013f6e:	4648      	mov	r0, r9
 8013f70:	f7f8 fe12 	bl	800cb98 <ucdr_serialize_uint32_t>
 8013f74:	4028      	ands	r0, r5
 8013f76:	b2c5      	uxtb	r5, r0
 8013f78:	e7d8      	b.n	8013f2c <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 8013f7a:	f8d8 1008 	ldr.w	r1, [r8, #8]
 8013f7e:	4648      	mov	r0, r9
 8013f80:	f7f8 fe0a 	bl	800cb98 <ucdr_serialize_uint32_t>
 8013f84:	4028      	ands	r0, r5
 8013f86:	b2c5      	uxtb	r5, r0
 8013f88:	e7c7      	b.n	8013f1a <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 8013f8a:	bf00      	nop

08013f8c <uxr_serialize_OBJK_DataReader_Binary>:
 8013f8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013f8e:	2202      	movs	r2, #2
 8013f90:	460c      	mov	r4, r1
 8013f92:	4606      	mov	r6, r0
 8013f94:	f004 fdca 	bl	8018b2c <ucdr_serialize_array_uint8_t>
 8013f98:	78a1      	ldrb	r1, [r4, #2]
 8013f9a:	4605      	mov	r5, r0
 8013f9c:	4630      	mov	r0, r6
 8013f9e:	f7f8 fbb7 	bl	800c710 <ucdr_serialize_bool>
 8013fa2:	78a3      	ldrb	r3, [r4, #2]
 8013fa4:	4005      	ands	r5, r0
 8013fa6:	b2ed      	uxtb	r5, r5
 8013fa8:	b90b      	cbnz	r3, 8013fae <uxr_serialize_OBJK_DataReader_Binary+0x22>
 8013faa:	4628      	mov	r0, r5
 8013fac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013fae:	f104 0108 	add.w	r1, r4, #8
 8013fb2:	4630      	mov	r0, r6
 8013fb4:	f7ff ff96 	bl	8013ee4 <uxr_serialize_OBJK_Endpoint_QosBinary>
 8013fb8:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8013fbc:	4607      	mov	r7, r0
 8013fbe:	4630      	mov	r0, r6
 8013fc0:	f7f8 fba6 	bl	800c710 <ucdr_serialize_bool>
 8013fc4:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8013fc8:	4038      	ands	r0, r7
 8013fca:	b2c7      	uxtb	r7, r0
 8013fcc:	b95b      	cbnz	r3, 8013fe6 <uxr_serialize_OBJK_DataReader_Binary+0x5a>
 8013fce:	f894 1038 	ldrb.w	r1, [r4, #56]	@ 0x38
 8013fd2:	4630      	mov	r0, r6
 8013fd4:	f7f8 fb9c 	bl	800c710 <ucdr_serialize_bool>
 8013fd8:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 8013fdc:	4007      	ands	r7, r0
 8013fde:	b94b      	cbnz	r3, 8013ff4 <uxr_serialize_OBJK_DataReader_Binary+0x68>
 8013fe0:	403d      	ands	r5, r7
 8013fe2:	4628      	mov	r0, r5
 8013fe4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013fe6:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	@ 0x30
 8013fea:	4630      	mov	r0, r6
 8013fec:	f7f9 f82a 	bl	800d044 <ucdr_serialize_uint64_t>
 8013ff0:	4007      	ands	r7, r0
 8013ff2:	e7ec      	b.n	8013fce <uxr_serialize_OBJK_DataReader_Binary+0x42>
 8013ff4:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 8013ff6:	4630      	mov	r0, r6
 8013ff8:	f004 ff0a 	bl	8018e10 <ucdr_serialize_string>
 8013ffc:	4007      	ands	r7, r0
 8013ffe:	b2ff      	uxtb	r7, r7
 8014000:	e7ee      	b.n	8013fe0 <uxr_serialize_OBJK_DataReader_Binary+0x54>
 8014002:	bf00      	nop

08014004 <uxr_serialize_OBJK_DataWriter_Binary>:
 8014004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014006:	2202      	movs	r2, #2
 8014008:	460d      	mov	r5, r1
 801400a:	4606      	mov	r6, r0
 801400c:	f004 fd8e 	bl	8018b2c <ucdr_serialize_array_uint8_t>
 8014010:	78a9      	ldrb	r1, [r5, #2]
 8014012:	4604      	mov	r4, r0
 8014014:	4630      	mov	r0, r6
 8014016:	f7f8 fb7b 	bl	800c710 <ucdr_serialize_bool>
 801401a:	78ab      	ldrb	r3, [r5, #2]
 801401c:	4004      	ands	r4, r0
 801401e:	b2e4      	uxtb	r4, r4
 8014020:	b90b      	cbnz	r3, 8014026 <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 8014022:	4620      	mov	r0, r4
 8014024:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014026:	f105 0108 	add.w	r1, r5, #8
 801402a:	4630      	mov	r0, r6
 801402c:	f7ff ff5a 	bl	8013ee4 <uxr_serialize_OBJK_Endpoint_QosBinary>
 8014030:	f895 102c 	ldrb.w	r1, [r5, #44]	@ 0x2c
 8014034:	4607      	mov	r7, r0
 8014036:	4630      	mov	r0, r6
 8014038:	f7f8 fb6a 	bl	800c710 <ucdr_serialize_bool>
 801403c:	f895 302c 	ldrb.w	r3, [r5, #44]	@ 0x2c
 8014040:	4038      	ands	r0, r7
 8014042:	b2c7      	uxtb	r7, r0
 8014044:	b913      	cbnz	r3, 801404c <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 8014046:	403c      	ands	r4, r7
 8014048:	4620      	mov	r0, r4
 801404a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801404c:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	@ 0x30
 8014050:	4630      	mov	r0, r6
 8014052:	f7f8 fff7 	bl	800d044 <ucdr_serialize_uint64_t>
 8014056:	4007      	ands	r7, r0
 8014058:	e7f5      	b.n	8014046 <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 801405a:	bf00      	nop

0801405c <uxr_deserialize_ObjectVariant>:
 801405c:	b570      	push	{r4, r5, r6, lr}
 801405e:	4605      	mov	r5, r0
 8014060:	460e      	mov	r6, r1
 8014062:	f7f8 fb99 	bl	800c798 <ucdr_deserialize_uint8_t>
 8014066:	b168      	cbz	r0, 8014084 <uxr_deserialize_ObjectVariant+0x28>
 8014068:	7833      	ldrb	r3, [r6, #0]
 801406a:	3b01      	subs	r3, #1
 801406c:	4604      	mov	r4, r0
 801406e:	2b0d      	cmp	r3, #13
 8014070:	d809      	bhi.n	8014086 <uxr_deserialize_ObjectVariant+0x2a>
 8014072:	e8df f003 	tbb	[pc, r3]
 8014076:	0a41      	.short	0x0a41
 8014078:	0a0a2323 	.word	0x0a0a2323
 801407c:	10080a0a 	.word	0x10080a0a
 8014080:	565c1010 	.word	0x565c1010
 8014084:	2400      	movs	r4, #0
 8014086:	4620      	mov	r0, r4
 8014088:	bd70      	pop	{r4, r5, r6, pc}
 801408a:	1d31      	adds	r1, r6, #4
 801408c:	4628      	mov	r0, r5
 801408e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014092:	f7ff bd55 	b.w	8013b40 <uxr_deserialize_DATAWRITER_Representation>
 8014096:	1d31      	adds	r1, r6, #4
 8014098:	4628      	mov	r0, r5
 801409a:	f7f8 fb7d 	bl	800c798 <ucdr_deserialize_uint8_t>
 801409e:	2800      	cmp	r0, #0
 80140a0:	d0f0      	beq.n	8014084 <uxr_deserialize_ObjectVariant+0x28>
 80140a2:	7933      	ldrb	r3, [r6, #4]
 80140a4:	2b01      	cmp	r3, #1
 80140a6:	d001      	beq.n	80140ac <uxr_deserialize_ObjectVariant+0x50>
 80140a8:	2b02      	cmp	r3, #2
 80140aa:	d1ec      	bne.n	8014086 <uxr_deserialize_ObjectVariant+0x2a>
 80140ac:	68b1      	ldr	r1, [r6, #8]
 80140ae:	4628      	mov	r0, r5
 80140b0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80140b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80140b8:	f004 beba 	b.w	8018e30 <ucdr_deserialize_string>
 80140bc:	1d31      	adds	r1, r6, #4
 80140be:	4628      	mov	r0, r5
 80140c0:	f7f8 fb6a 	bl	800c798 <ucdr_deserialize_uint8_t>
 80140c4:	4604      	mov	r4, r0
 80140c6:	b170      	cbz	r0, 80140e6 <uxr_deserialize_ObjectVariant+0x8a>
 80140c8:	7933      	ldrb	r3, [r6, #4]
 80140ca:	2b02      	cmp	r3, #2
 80140cc:	d04c      	beq.n	8014168 <uxr_deserialize_ObjectVariant+0x10c>
 80140ce:	2b03      	cmp	r3, #3
 80140d0:	d109      	bne.n	80140e6 <uxr_deserialize_ObjectVariant+0x8a>
 80140d2:	f106 0308 	add.w	r3, r6, #8
 80140d6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80140da:	f106 010c 	add.w	r1, r6, #12
 80140de:	4628      	mov	r0, r5
 80140e0:	f7fc fe10 	bl	8010d04 <ucdr_deserialize_sequence_uint8_t>
 80140e4:	4604      	mov	r4, r0
 80140e6:	2202      	movs	r2, #2
 80140e8:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 80140ec:	4628      	mov	r0, r5
 80140ee:	f004 fd81 	bl	8018bf4 <ucdr_deserialize_array_uint8_t>
 80140f2:	4020      	ands	r0, r4
 80140f4:	b2c4      	uxtb	r4, r0
 80140f6:	e7c6      	b.n	8014086 <uxr_deserialize_ObjectVariant+0x2a>
 80140f8:	1d31      	adds	r1, r6, #4
 80140fa:	4628      	mov	r0, r5
 80140fc:	f7f8 fb4c 	bl	800c798 <ucdr_deserialize_uint8_t>
 8014100:	4604      	mov	r4, r0
 8014102:	b130      	cbz	r0, 8014112 <uxr_deserialize_ObjectVariant+0xb6>
 8014104:	7933      	ldrb	r3, [r6, #4]
 8014106:	2b02      	cmp	r3, #2
 8014108:	d036      	beq.n	8014178 <uxr_deserialize_ObjectVariant+0x11c>
 801410a:	2b03      	cmp	r3, #3
 801410c:	d03c      	beq.n	8014188 <uxr_deserialize_ObjectVariant+0x12c>
 801410e:	2b01      	cmp	r3, #1
 8014110:	d032      	beq.n	8014178 <uxr_deserialize_ObjectVariant+0x11c>
 8014112:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 8014116:	4628      	mov	r0, r5
 8014118:	f7f9 f8e4 	bl	800d2e4 <ucdr_deserialize_int16_t>
 801411c:	4020      	ands	r0, r4
 801411e:	b2c4      	uxtb	r4, r0
 8014120:	e7b1      	b.n	8014086 <uxr_deserialize_ObjectVariant+0x2a>
 8014122:	1d31      	adds	r1, r6, #4
 8014124:	4628      	mov	r0, r5
 8014126:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801412a:	f7ff bbbf 	b.w	80138ac <uxr_deserialize_CLIENT_Representation>
 801412e:	2204      	movs	r2, #4
 8014130:	18b1      	adds	r1, r6, r2
 8014132:	4628      	mov	r0, r5
 8014134:	f004 fd5e 	bl	8018bf4 <ucdr_deserialize_array_uint8_t>
 8014138:	2202      	movs	r2, #2
 801413a:	f106 0108 	add.w	r1, r6, #8
 801413e:	4604      	mov	r4, r0
 8014140:	4628      	mov	r0, r5
 8014142:	f004 fd57 	bl	8018bf4 <ucdr_deserialize_array_uint8_t>
 8014146:	2202      	movs	r2, #2
 8014148:	4004      	ands	r4, r0
 801414a:	f106 010a 	add.w	r1, r6, #10
 801414e:	4628      	mov	r0, r5
 8014150:	f004 fd50 	bl	8018bf4 <ucdr_deserialize_array_uint8_t>
 8014154:	b2e4      	uxtb	r4, r4
 8014156:	4603      	mov	r3, r0
 8014158:	f106 010c 	add.w	r1, r6, #12
 801415c:	4628      	mov	r0, r5
 801415e:	401c      	ands	r4, r3
 8014160:	f7f8 faec 	bl	800c73c <ucdr_deserialize_bool>
 8014164:	4004      	ands	r4, r0
 8014166:	e78e      	b.n	8014086 <uxr_deserialize_ObjectVariant+0x2a>
 8014168:	68b1      	ldr	r1, [r6, #8]
 801416a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801416e:	4628      	mov	r0, r5
 8014170:	f004 fe5e 	bl	8018e30 <ucdr_deserialize_string>
 8014174:	4604      	mov	r4, r0
 8014176:	e7b6      	b.n	80140e6 <uxr_deserialize_ObjectVariant+0x8a>
 8014178:	68b1      	ldr	r1, [r6, #8]
 801417a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801417e:	4628      	mov	r0, r5
 8014180:	f004 fe56 	bl	8018e30 <ucdr_deserialize_string>
 8014184:	4604      	mov	r4, r0
 8014186:	e7c4      	b.n	8014112 <uxr_deserialize_ObjectVariant+0xb6>
 8014188:	f106 0308 	add.w	r3, r6, #8
 801418c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8014190:	f106 010c 	add.w	r1, r6, #12
 8014194:	4628      	mov	r0, r5
 8014196:	f7fc fdb5 	bl	8010d04 <ucdr_deserialize_sequence_uint8_t>
 801419a:	4604      	mov	r4, r0
 801419c:	e7b9      	b.n	8014112 <uxr_deserialize_ObjectVariant+0xb6>
 801419e:	bf00      	nop

080141a0 <uxr_deserialize_BaseObjectRequest>:
 80141a0:	b570      	push	{r4, r5, r6, lr}
 80141a2:	2202      	movs	r2, #2
 80141a4:	4605      	mov	r5, r0
 80141a6:	460e      	mov	r6, r1
 80141a8:	f004 fd24 	bl	8018bf4 <ucdr_deserialize_array_uint8_t>
 80141ac:	2202      	movs	r2, #2
 80141ae:	4604      	mov	r4, r0
 80141b0:	18b1      	adds	r1, r6, r2
 80141b2:	4628      	mov	r0, r5
 80141b4:	f004 fd1e 	bl	8018bf4 <ucdr_deserialize_array_uint8_t>
 80141b8:	4020      	ands	r0, r4
 80141ba:	b2c0      	uxtb	r0, r0
 80141bc:	bd70      	pop	{r4, r5, r6, pc}
 80141be:	bf00      	nop

080141c0 <uxr_serialize_ActivityInfoVariant>:
 80141c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80141c4:	460d      	mov	r5, r1
 80141c6:	7809      	ldrb	r1, [r1, #0]
 80141c8:	4607      	mov	r7, r0
 80141ca:	f7f8 facf 	bl	800c76c <ucdr_serialize_uint8_t>
 80141ce:	4681      	mov	r9, r0
 80141d0:	b138      	cbz	r0, 80141e2 <uxr_serialize_ActivityInfoVariant+0x22>
 80141d2:	782b      	ldrb	r3, [r5, #0]
 80141d4:	2b06      	cmp	r3, #6
 80141d6:	f000 8082 	beq.w	80142de <uxr_serialize_ActivityInfoVariant+0x11e>
 80141da:	2b0d      	cmp	r3, #13
 80141dc:	d016      	beq.n	801420c <uxr_serialize_ActivityInfoVariant+0x4c>
 80141de:	2b05      	cmp	r3, #5
 80141e0:	d002      	beq.n	80141e8 <uxr_serialize_ActivityInfoVariant+0x28>
 80141e2:	4648      	mov	r0, r9
 80141e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80141e8:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 80141ec:	4638      	mov	r0, r7
 80141ee:	f7f8 fff9 	bl	800d1e4 <ucdr_serialize_int16_t>
 80141f2:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 80141f6:	4681      	mov	r9, r0
 80141f8:	4638      	mov	r0, r7
 80141fa:	f7f8 ff23 	bl	800d044 <ucdr_serialize_uint64_t>
 80141fe:	ea09 0000 	and.w	r0, r9, r0
 8014202:	fa5f f980 	uxtb.w	r9, r0
 8014206:	4648      	mov	r0, r9
 8014208:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801420c:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8014210:	4638      	mov	r0, r7
 8014212:	f7f8 ffe7 	bl	800d1e4 <ucdr_serialize_int16_t>
 8014216:	68e9      	ldr	r1, [r5, #12]
 8014218:	4681      	mov	r9, r0
 801421a:	4638      	mov	r0, r7
 801421c:	f7f8 fcbc 	bl	800cb98 <ucdr_serialize_uint32_t>
 8014220:	68eb      	ldr	r3, [r5, #12]
 8014222:	2b00      	cmp	r3, #0
 8014224:	d0eb      	beq.n	80141fe <uxr_serialize_ActivityInfoVariant+0x3e>
 8014226:	b320      	cbz	r0, 8014272 <uxr_serialize_ActivityInfoVariant+0xb2>
 8014228:	f105 080c 	add.w	r8, r5, #12
 801422c:	2600      	movs	r6, #0
 801422e:	eb06 0a46 	add.w	sl, r6, r6, lsl #1
 8014232:	eb05 0aca 	add.w	sl, r5, sl, lsl #3
 8014236:	f89a 1010 	ldrb.w	r1, [sl, #16]
 801423a:	4638      	mov	r0, r7
 801423c:	f7f8 fa96 	bl	800c76c <ucdr_serialize_uint8_t>
 8014240:	2800      	cmp	r0, #0
 8014242:	d053      	beq.n	80142ec <uxr_serialize_ActivityInfoVariant+0x12c>
 8014244:	f89a 3010 	ldrb.w	r3, [sl, #16]
 8014248:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 801424c:	0074      	lsls	r4, r6, #1
 801424e:	00c9      	lsls	r1, r1, #3
 8014250:	2b03      	cmp	r3, #3
 8014252:	d854      	bhi.n	80142fe <uxr_serialize_ActivityInfoVariant+0x13e>
 8014254:	e8df f003 	tbb	[pc, r3]
 8014258:	02102132 	.word	0x02102132
 801425c:	4441      	add	r1, r8
 801425e:	4638      	mov	r0, r7
 8014260:	6889      	ldr	r1, [r1, #8]
 8014262:	f004 fdd5 	bl	8018e10 <ucdr_serialize_string>
 8014266:	68ea      	ldr	r2, [r5, #12]
 8014268:	3601      	adds	r6, #1
 801426a:	4296      	cmp	r6, r2
 801426c:	d242      	bcs.n	80142f4 <uxr_serialize_ActivityInfoVariant+0x134>
 801426e:	2800      	cmp	r0, #0
 8014270:	d1dd      	bne.n	801422e <uxr_serialize_ActivityInfoVariant+0x6e>
 8014272:	f04f 0900 	mov.w	r9, #0
 8014276:	e7b4      	b.n	80141e2 <uxr_serialize_ActivityInfoVariant+0x22>
 8014278:	3108      	adds	r1, #8
 801427a:	4441      	add	r1, r8
 801427c:	2210      	movs	r2, #16
 801427e:	4638      	mov	r0, r7
 8014280:	f004 fc54 	bl	8018b2c <ucdr_serialize_array_uint8_t>
 8014284:	4434      	add	r4, r6
 8014286:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 801428a:	4604      	mov	r4, r0
 801428c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 801428e:	4638      	mov	r0, r7
 8014290:	f7f8 fc82 	bl	800cb98 <ucdr_serialize_uint32_t>
 8014294:	4020      	ands	r0, r4
 8014296:	b2c0      	uxtb	r0, r0
 8014298:	e7e5      	b.n	8014266 <uxr_serialize_ActivityInfoVariant+0xa6>
 801429a:	3108      	adds	r1, #8
 801429c:	4441      	add	r1, r8
 801429e:	2204      	movs	r2, #4
 80142a0:	4638      	mov	r0, r7
 80142a2:	f004 fc43 	bl	8018b2c <ucdr_serialize_array_uint8_t>
 80142a6:	4434      	add	r4, r6
 80142a8:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 80142ac:	4604      	mov	r4, r0
 80142ae:	8b19      	ldrh	r1, [r3, #24]
 80142b0:	4638      	mov	r0, r7
 80142b2:	f7f8 fa87 	bl	800c7c4 <ucdr_serialize_uint16_t>
 80142b6:	4020      	ands	r0, r4
 80142b8:	b2c0      	uxtb	r0, r0
 80142ba:	e7d4      	b.n	8014266 <uxr_serialize_ActivityInfoVariant+0xa6>
 80142bc:	3108      	adds	r1, #8
 80142be:	4441      	add	r1, r8
 80142c0:	2202      	movs	r2, #2
 80142c2:	4638      	mov	r0, r7
 80142c4:	f004 fc32 	bl	8018b2c <ucdr_serialize_array_uint8_t>
 80142c8:	4434      	add	r4, r6
 80142ca:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 80142ce:	4604      	mov	r4, r0
 80142d0:	7d99      	ldrb	r1, [r3, #22]
 80142d2:	4638      	mov	r0, r7
 80142d4:	f7f8 fa4a 	bl	800c76c <ucdr_serialize_uint8_t>
 80142d8:	4020      	ands	r0, r4
 80142da:	b2c0      	uxtb	r0, r0
 80142dc:	e7c3      	b.n	8014266 <uxr_serialize_ActivityInfoVariant+0xa6>
 80142de:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 80142e2:	4638      	mov	r0, r7
 80142e4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80142e8:	f7f8 bf7c 	b.w	800d1e4 <ucdr_serialize_int16_t>
 80142ec:	68ea      	ldr	r2, [r5, #12]
 80142ee:	3601      	adds	r6, #1
 80142f0:	42b2      	cmp	r2, r6
 80142f2:	d8be      	bhi.n	8014272 <uxr_serialize_ActivityInfoVariant+0xb2>
 80142f4:	ea09 0900 	and.w	r9, r9, r0
 80142f8:	fa5f f989 	uxtb.w	r9, r9
 80142fc:	e771      	b.n	80141e2 <uxr_serialize_ActivityInfoVariant+0x22>
 80142fe:	68eb      	ldr	r3, [r5, #12]
 8014300:	3601      	adds	r6, #1
 8014302:	429e      	cmp	r6, r3
 8014304:	f10a 0a18 	add.w	sl, sl, #24
 8014308:	d395      	bcc.n	8014236 <uxr_serialize_ActivityInfoVariant+0x76>
 801430a:	e76a      	b.n	80141e2 <uxr_serialize_ActivityInfoVariant+0x22>

0801430c <uxr_deserialize_BaseObjectReply>:
 801430c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014310:	2202      	movs	r2, #2
 8014312:	4606      	mov	r6, r0
 8014314:	460f      	mov	r7, r1
 8014316:	f004 fc6d 	bl	8018bf4 <ucdr_deserialize_array_uint8_t>
 801431a:	2202      	movs	r2, #2
 801431c:	18b9      	adds	r1, r7, r2
 801431e:	4605      	mov	r5, r0
 8014320:	4630      	mov	r0, r6
 8014322:	f004 fc67 	bl	8018bf4 <ucdr_deserialize_array_uint8_t>
 8014326:	1d39      	adds	r1, r7, #4
 8014328:	4680      	mov	r8, r0
 801432a:	4630      	mov	r0, r6
 801432c:	f7f8 fa34 	bl	800c798 <ucdr_deserialize_uint8_t>
 8014330:	1d79      	adds	r1, r7, #5
 8014332:	4604      	mov	r4, r0
 8014334:	4630      	mov	r0, r6
 8014336:	f7f8 fa2f 	bl	800c798 <ucdr_deserialize_uint8_t>
 801433a:	ea05 0508 	and.w	r5, r5, r8
 801433e:	402c      	ands	r4, r5
 8014340:	4020      	ands	r0, r4
 8014342:	b2c0      	uxtb	r0, r0
 8014344:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014348 <uxr_serialize_ReadSpecification>:
 8014348:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801434c:	460e      	mov	r6, r1
 801434e:	7809      	ldrb	r1, [r1, #0]
 8014350:	4607      	mov	r7, r0
 8014352:	f7f8 fa0b 	bl	800c76c <ucdr_serialize_uint8_t>
 8014356:	7871      	ldrb	r1, [r6, #1]
 8014358:	4604      	mov	r4, r0
 801435a:	4638      	mov	r0, r7
 801435c:	f7f8 fa06 	bl	800c76c <ucdr_serialize_uint8_t>
 8014360:	78b1      	ldrb	r1, [r6, #2]
 8014362:	4004      	ands	r4, r0
 8014364:	4638      	mov	r0, r7
 8014366:	f7f8 f9d3 	bl	800c710 <ucdr_serialize_bool>
 801436a:	78b3      	ldrb	r3, [r6, #2]
 801436c:	b2e4      	uxtb	r4, r4
 801436e:	4004      	ands	r4, r0
 8014370:	b94b      	cbnz	r3, 8014386 <uxr_serialize_ReadSpecification+0x3e>
 8014372:	7a31      	ldrb	r1, [r6, #8]
 8014374:	4638      	mov	r0, r7
 8014376:	f7f8 f9cb 	bl	800c710 <ucdr_serialize_bool>
 801437a:	7a33      	ldrb	r3, [r6, #8]
 801437c:	4004      	ands	r4, r0
 801437e:	b943      	cbnz	r3, 8014392 <uxr_serialize_ReadSpecification+0x4a>
 8014380:	4620      	mov	r0, r4
 8014382:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014386:	6871      	ldr	r1, [r6, #4]
 8014388:	4638      	mov	r0, r7
 801438a:	f004 fd41 	bl	8018e10 <ucdr_serialize_string>
 801438e:	4004      	ands	r4, r0
 8014390:	e7ef      	b.n	8014372 <uxr_serialize_ReadSpecification+0x2a>
 8014392:	8971      	ldrh	r1, [r6, #10]
 8014394:	4638      	mov	r0, r7
 8014396:	f7f8 fa15 	bl	800c7c4 <ucdr_serialize_uint16_t>
 801439a:	89b1      	ldrh	r1, [r6, #12]
 801439c:	4605      	mov	r5, r0
 801439e:	4638      	mov	r0, r7
 80143a0:	f7f8 fa10 	bl	800c7c4 <ucdr_serialize_uint16_t>
 80143a4:	89f1      	ldrh	r1, [r6, #14]
 80143a6:	4005      	ands	r5, r0
 80143a8:	4638      	mov	r0, r7
 80143aa:	f7f8 fa0b 	bl	800c7c4 <ucdr_serialize_uint16_t>
 80143ae:	8a31      	ldrh	r1, [r6, #16]
 80143b0:	4680      	mov	r8, r0
 80143b2:	4638      	mov	r0, r7
 80143b4:	f7f8 fa06 	bl	800c7c4 <ucdr_serialize_uint16_t>
 80143b8:	b2ed      	uxtb	r5, r5
 80143ba:	4025      	ands	r5, r4
 80143bc:	ea08 0505 	and.w	r5, r8, r5
 80143c0:	ea00 0405 	and.w	r4, r0, r5
 80143c4:	4620      	mov	r0, r4
 80143c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80143ca:	bf00      	nop

080143cc <uxr_serialize_CREATE_CLIENT_Payload>:
 80143cc:	f7ff ba16 	b.w	80137fc <uxr_serialize_CLIENT_Representation>

080143d0 <uxr_serialize_CREATE_Payload>:
 80143d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80143d2:	2202      	movs	r2, #2
 80143d4:	4607      	mov	r7, r0
 80143d6:	460e      	mov	r6, r1
 80143d8:	f004 fba8 	bl	8018b2c <ucdr_serialize_array_uint8_t>
 80143dc:	2202      	movs	r2, #2
 80143de:	18b1      	adds	r1, r6, r2
 80143e0:	4605      	mov	r5, r0
 80143e2:	4638      	mov	r0, r7
 80143e4:	f004 fba2 	bl	8018b2c <ucdr_serialize_array_uint8_t>
 80143e8:	7931      	ldrb	r1, [r6, #4]
 80143ea:	4604      	mov	r4, r0
 80143ec:	4638      	mov	r0, r7
 80143ee:	f7f8 f9bd 	bl	800c76c <ucdr_serialize_uint8_t>
 80143f2:	b170      	cbz	r0, 8014412 <uxr_serialize_CREATE_Payload+0x42>
 80143f4:	7933      	ldrb	r3, [r6, #4]
 80143f6:	402c      	ands	r4, r5
 80143f8:	3b01      	subs	r3, #1
 80143fa:	b2e4      	uxtb	r4, r4
 80143fc:	2b0d      	cmp	r3, #13
 80143fe:	d809      	bhi.n	8014414 <uxr_serialize_CREATE_Payload+0x44>
 8014400:	e8df f003 	tbb	[pc, r3]
 8014404:	23230a4c 	.word	0x23230a4c
 8014408:	0a0a0a0a 	.word	0x0a0a0a0a
 801440c:	12121208 	.word	0x12121208
 8014410:	3e45      	.short	0x3e45
 8014412:	2400      	movs	r4, #0
 8014414:	4620      	mov	r0, r4
 8014416:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014418:	f106 0108 	add.w	r1, r6, #8
 801441c:	4638      	mov	r0, r7
 801441e:	f7ff faf3 	bl	8013a08 <uxr_serialize_DATAWRITER_Representation>
 8014422:	4004      	ands	r4, r0
 8014424:	4620      	mov	r0, r4
 8014426:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014428:	7a31      	ldrb	r1, [r6, #8]
 801442a:	4638      	mov	r0, r7
 801442c:	f7f8 f99e 	bl	800c76c <ucdr_serialize_uint8_t>
 8014430:	2800      	cmp	r0, #0
 8014432:	d0ee      	beq.n	8014412 <uxr_serialize_CREATE_Payload+0x42>
 8014434:	7a33      	ldrb	r3, [r6, #8]
 8014436:	2b01      	cmp	r3, #1
 8014438:	d001      	beq.n	801443e <uxr_serialize_CREATE_Payload+0x6e>
 801443a:	2b02      	cmp	r3, #2
 801443c:	d1ea      	bne.n	8014414 <uxr_serialize_CREATE_Payload+0x44>
 801443e:	68f1      	ldr	r1, [r6, #12]
 8014440:	4638      	mov	r0, r7
 8014442:	f004 fce5 	bl	8018e10 <ucdr_serialize_string>
 8014446:	4004      	ands	r4, r0
 8014448:	e7e4      	b.n	8014414 <uxr_serialize_CREATE_Payload+0x44>
 801444a:	7a31      	ldrb	r1, [r6, #8]
 801444c:	4638      	mov	r0, r7
 801444e:	f7f8 f98d 	bl	800c76c <ucdr_serialize_uint8_t>
 8014452:	4605      	mov	r5, r0
 8014454:	b158      	cbz	r0, 801446e <uxr_serialize_CREATE_Payload+0x9e>
 8014456:	7a33      	ldrb	r3, [r6, #8]
 8014458:	2b02      	cmp	r3, #2
 801445a:	d034      	beq.n	80144c6 <uxr_serialize_CREATE_Payload+0xf6>
 801445c:	2b03      	cmp	r3, #3
 801445e:	d106      	bne.n	801446e <uxr_serialize_CREATE_Payload+0x9e>
 8014460:	68f2      	ldr	r2, [r6, #12]
 8014462:	f106 0110 	add.w	r1, r6, #16
 8014466:	4638      	mov	r0, r7
 8014468:	f7fc fc3a 	bl	8010ce0 <ucdr_serialize_sequence_uint8_t>
 801446c:	4605      	mov	r5, r0
 801446e:	2202      	movs	r2, #2
 8014470:	f506 7104 	add.w	r1, r6, #528	@ 0x210
 8014474:	4638      	mov	r0, r7
 8014476:	f004 fb59 	bl	8018b2c <ucdr_serialize_array_uint8_t>
 801447a:	4028      	ands	r0, r5
 801447c:	4004      	ands	r4, r0
 801447e:	e7c9      	b.n	8014414 <uxr_serialize_CREATE_Payload+0x44>
 8014480:	f106 0108 	add.w	r1, r6, #8
 8014484:	4638      	mov	r0, r7
 8014486:	f7ff f9b9 	bl	80137fc <uxr_serialize_CLIENT_Representation>
 801448a:	4004      	ands	r4, r0
 801448c:	e7c2      	b.n	8014414 <uxr_serialize_CREATE_Payload+0x44>
 801448e:	f106 0108 	add.w	r1, r6, #8
 8014492:	4638      	mov	r0, r7
 8014494:	f7ff fa6e 	bl	8013974 <uxr_serialize_AGENT_Representation>
 8014498:	4004      	ands	r4, r0
 801449a:	e7bb      	b.n	8014414 <uxr_serialize_CREATE_Payload+0x44>
 801449c:	7a31      	ldrb	r1, [r6, #8]
 801449e:	4638      	mov	r0, r7
 80144a0:	f7f8 f964 	bl	800c76c <ucdr_serialize_uint8_t>
 80144a4:	4605      	mov	r5, r0
 80144a6:	b130      	cbz	r0, 80144b6 <uxr_serialize_CREATE_Payload+0xe6>
 80144a8:	7a33      	ldrb	r3, [r6, #8]
 80144aa:	2b02      	cmp	r3, #2
 80144ac:	d011      	beq.n	80144d2 <uxr_serialize_CREATE_Payload+0x102>
 80144ae:	2b03      	cmp	r3, #3
 80144b0:	d015      	beq.n	80144de <uxr_serialize_CREATE_Payload+0x10e>
 80144b2:	2b01      	cmp	r3, #1
 80144b4:	d00d      	beq.n	80144d2 <uxr_serialize_CREATE_Payload+0x102>
 80144b6:	f9b6 1210 	ldrsh.w	r1, [r6, #528]	@ 0x210
 80144ba:	4638      	mov	r0, r7
 80144bc:	f7f8 fe92 	bl	800d1e4 <ucdr_serialize_int16_t>
 80144c0:	4028      	ands	r0, r5
 80144c2:	4004      	ands	r4, r0
 80144c4:	e7a6      	b.n	8014414 <uxr_serialize_CREATE_Payload+0x44>
 80144c6:	68f1      	ldr	r1, [r6, #12]
 80144c8:	4638      	mov	r0, r7
 80144ca:	f004 fca1 	bl	8018e10 <ucdr_serialize_string>
 80144ce:	4605      	mov	r5, r0
 80144d0:	e7cd      	b.n	801446e <uxr_serialize_CREATE_Payload+0x9e>
 80144d2:	68f1      	ldr	r1, [r6, #12]
 80144d4:	4638      	mov	r0, r7
 80144d6:	f004 fc9b 	bl	8018e10 <ucdr_serialize_string>
 80144da:	4605      	mov	r5, r0
 80144dc:	e7eb      	b.n	80144b6 <uxr_serialize_CREATE_Payload+0xe6>
 80144de:	68f2      	ldr	r2, [r6, #12]
 80144e0:	f106 0110 	add.w	r1, r6, #16
 80144e4:	4638      	mov	r0, r7
 80144e6:	f7fc fbfb 	bl	8010ce0 <ucdr_serialize_sequence_uint8_t>
 80144ea:	4605      	mov	r5, r0
 80144ec:	e7e3      	b.n	80144b6 <uxr_serialize_CREATE_Payload+0xe6>
 80144ee:	bf00      	nop

080144f0 <uxr_deserialize_GET_INFO_Payload>:
 80144f0:	b570      	push	{r4, r5, r6, lr}
 80144f2:	2202      	movs	r2, #2
 80144f4:	4605      	mov	r5, r0
 80144f6:	460e      	mov	r6, r1
 80144f8:	f004 fb7c 	bl	8018bf4 <ucdr_deserialize_array_uint8_t>
 80144fc:	2202      	movs	r2, #2
 80144fe:	18b1      	adds	r1, r6, r2
 8014500:	4604      	mov	r4, r0
 8014502:	4628      	mov	r0, r5
 8014504:	f004 fb76 	bl	8018bf4 <ucdr_deserialize_array_uint8_t>
 8014508:	1d31      	adds	r1, r6, #4
 801450a:	4004      	ands	r4, r0
 801450c:	4628      	mov	r0, r5
 801450e:	f7f8 fc73 	bl	800cdf8 <ucdr_deserialize_uint32_t>
 8014512:	b2e4      	uxtb	r4, r4
 8014514:	4020      	ands	r0, r4
 8014516:	bd70      	pop	{r4, r5, r6, pc}

08014518 <uxr_serialize_DELETE_Payload>:
 8014518:	b570      	push	{r4, r5, r6, lr}
 801451a:	2202      	movs	r2, #2
 801451c:	4605      	mov	r5, r0
 801451e:	460e      	mov	r6, r1
 8014520:	f004 fb04 	bl	8018b2c <ucdr_serialize_array_uint8_t>
 8014524:	2202      	movs	r2, #2
 8014526:	4604      	mov	r4, r0
 8014528:	18b1      	adds	r1, r6, r2
 801452a:	4628      	mov	r0, r5
 801452c:	f004 fafe 	bl	8018b2c <ucdr_serialize_array_uint8_t>
 8014530:	4020      	ands	r0, r4
 8014532:	b2c0      	uxtb	r0, r0
 8014534:	bd70      	pop	{r4, r5, r6, pc}
 8014536:	bf00      	nop

08014538 <uxr_deserialize_STATUS_AGENT_Payload>:
 8014538:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801453c:	4605      	mov	r5, r0
 801453e:	460e      	mov	r6, r1
 8014540:	f7f8 f92a 	bl	800c798 <ucdr_deserialize_uint8_t>
 8014544:	1c71      	adds	r1, r6, #1
 8014546:	4604      	mov	r4, r0
 8014548:	4628      	mov	r0, r5
 801454a:	f7f8 f925 	bl	800c798 <ucdr_deserialize_uint8_t>
 801454e:	2204      	movs	r2, #4
 8014550:	18b1      	adds	r1, r6, r2
 8014552:	4680      	mov	r8, r0
 8014554:	4628      	mov	r0, r5
 8014556:	f004 fb4d 	bl	8018bf4 <ucdr_deserialize_array_uint8_t>
 801455a:	f106 0108 	add.w	r1, r6, #8
 801455e:	4607      	mov	r7, r0
 8014560:	2202      	movs	r2, #2
 8014562:	4628      	mov	r0, r5
 8014564:	f004 fb46 	bl	8018bf4 <ucdr_deserialize_array_uint8_t>
 8014568:	ea04 0308 	and.w	r3, r4, r8
 801456c:	b2db      	uxtb	r3, r3
 801456e:	ea03 0407 	and.w	r4, r3, r7
 8014572:	2202      	movs	r2, #2
 8014574:	4607      	mov	r7, r0
 8014576:	f106 010a 	add.w	r1, r6, #10
 801457a:	4628      	mov	r0, r5
 801457c:	f004 fb3a 	bl	8018bf4 <ucdr_deserialize_array_uint8_t>
 8014580:	f106 010c 	add.w	r1, r6, #12
 8014584:	4603      	mov	r3, r0
 8014586:	4628      	mov	r0, r5
 8014588:	461d      	mov	r5, r3
 801458a:	f7f8 f8d7 	bl	800c73c <ucdr_deserialize_bool>
 801458e:	403c      	ands	r4, r7
 8014590:	4025      	ands	r5, r4
 8014592:	4028      	ands	r0, r5
 8014594:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014598 <uxr_deserialize_STATUS_Payload>:
 8014598:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801459c:	2202      	movs	r2, #2
 801459e:	4606      	mov	r6, r0
 80145a0:	460f      	mov	r7, r1
 80145a2:	f004 fb27 	bl	8018bf4 <ucdr_deserialize_array_uint8_t>
 80145a6:	2202      	movs	r2, #2
 80145a8:	18b9      	adds	r1, r7, r2
 80145aa:	4605      	mov	r5, r0
 80145ac:	4630      	mov	r0, r6
 80145ae:	f004 fb21 	bl	8018bf4 <ucdr_deserialize_array_uint8_t>
 80145b2:	1d39      	adds	r1, r7, #4
 80145b4:	4680      	mov	r8, r0
 80145b6:	4630      	mov	r0, r6
 80145b8:	f7f8 f8ee 	bl	800c798 <ucdr_deserialize_uint8_t>
 80145bc:	1d79      	adds	r1, r7, #5
 80145be:	4604      	mov	r4, r0
 80145c0:	4630      	mov	r0, r6
 80145c2:	f7f8 f8e9 	bl	800c798 <ucdr_deserialize_uint8_t>
 80145c6:	ea05 0508 	and.w	r5, r5, r8
 80145ca:	402c      	ands	r4, r5
 80145cc:	4020      	ands	r0, r4
 80145ce:	b2c0      	uxtb	r0, r0
 80145d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080145d4 <uxr_serialize_INFO_Payload>:
 80145d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80145d8:	2202      	movs	r2, #2
 80145da:	460c      	mov	r4, r1
 80145dc:	4605      	mov	r5, r0
 80145de:	f004 faa5 	bl	8018b2c <ucdr_serialize_array_uint8_t>
 80145e2:	2202      	movs	r2, #2
 80145e4:	18a1      	adds	r1, r4, r2
 80145e6:	4680      	mov	r8, r0
 80145e8:	4628      	mov	r0, r5
 80145ea:	f004 fa9f 	bl	8018b2c <ucdr_serialize_array_uint8_t>
 80145ee:	7921      	ldrb	r1, [r4, #4]
 80145f0:	4607      	mov	r7, r0
 80145f2:	4628      	mov	r0, r5
 80145f4:	f7f8 f8ba 	bl	800c76c <ucdr_serialize_uint8_t>
 80145f8:	7961      	ldrb	r1, [r4, #5]
 80145fa:	4606      	mov	r6, r0
 80145fc:	4628      	mov	r0, r5
 80145fe:	f7f8 f8b5 	bl	800c76c <ucdr_serialize_uint8_t>
 8014602:	ea08 0807 	and.w	r8, r8, r7
 8014606:	ea06 0608 	and.w	r6, r6, r8
 801460a:	4006      	ands	r6, r0
 801460c:	7a21      	ldrb	r1, [r4, #8]
 801460e:	4628      	mov	r0, r5
 8014610:	f7f8 f87e 	bl	800c710 <ucdr_serialize_bool>
 8014614:	7a23      	ldrb	r3, [r4, #8]
 8014616:	b2f7      	uxtb	r7, r6
 8014618:	4606      	mov	r6, r0
 801461a:	b96b      	cbnz	r3, 8014638 <uxr_serialize_INFO_Payload+0x64>
 801461c:	f894 121c 	ldrb.w	r1, [r4, #540]	@ 0x21c
 8014620:	4628      	mov	r0, r5
 8014622:	f7f8 f875 	bl	800c710 <ucdr_serialize_bool>
 8014626:	f894 321c 	ldrb.w	r3, [r4, #540]	@ 0x21c
 801462a:	4030      	ands	r0, r6
 801462c:	b2c6      	uxtb	r6, r0
 801462e:	b983      	cbnz	r3, 8014652 <uxr_serialize_INFO_Payload+0x7e>
 8014630:	ea06 0007 	and.w	r0, r6, r7
 8014634:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014638:	7b21      	ldrb	r1, [r4, #12]
 801463a:	4628      	mov	r0, r5
 801463c:	f7f8 f896 	bl	800c76c <ucdr_serialize_uint8_t>
 8014640:	b188      	cbz	r0, 8014666 <uxr_serialize_INFO_Payload+0x92>
 8014642:	f104 010c 	add.w	r1, r4, #12
 8014646:	4628      	mov	r0, r5
 8014648:	f7ff fa06 	bl	8013a58 <uxr_serialize_ObjectVariant.part.0>
 801464c:	4030      	ands	r0, r6
 801464e:	b2c6      	uxtb	r6, r0
 8014650:	e7e4      	b.n	801461c <uxr_serialize_INFO_Payload+0x48>
 8014652:	f504 7108 	add.w	r1, r4, #544	@ 0x220
 8014656:	4628      	mov	r0, r5
 8014658:	f7ff fdb2 	bl	80141c0 <uxr_serialize_ActivityInfoVariant>
 801465c:	4006      	ands	r6, r0
 801465e:	ea06 0007 	and.w	r0, r6, r7
 8014662:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014666:	4606      	mov	r6, r0
 8014668:	e7d8      	b.n	801461c <uxr_serialize_INFO_Payload+0x48>
 801466a:	bf00      	nop

0801466c <uxr_serialize_READ_DATA_Payload>:
 801466c:	b570      	push	{r4, r5, r6, lr}
 801466e:	2202      	movs	r2, #2
 8014670:	4605      	mov	r5, r0
 8014672:	460e      	mov	r6, r1
 8014674:	f004 fa5a 	bl	8018b2c <ucdr_serialize_array_uint8_t>
 8014678:	2202      	movs	r2, #2
 801467a:	18b1      	adds	r1, r6, r2
 801467c:	4604      	mov	r4, r0
 801467e:	4628      	mov	r0, r5
 8014680:	f004 fa54 	bl	8018b2c <ucdr_serialize_array_uint8_t>
 8014684:	1d31      	adds	r1, r6, #4
 8014686:	4004      	ands	r4, r0
 8014688:	4628      	mov	r0, r5
 801468a:	f7ff fe5d 	bl	8014348 <uxr_serialize_ReadSpecification>
 801468e:	b2e4      	uxtb	r4, r4
 8014690:	4020      	ands	r0, r4
 8014692:	bd70      	pop	{r4, r5, r6, pc}

08014694 <uxr_serialize_WRITE_DATA_Payload_Data>:
 8014694:	b570      	push	{r4, r5, r6, lr}
 8014696:	2202      	movs	r2, #2
 8014698:	4605      	mov	r5, r0
 801469a:	460e      	mov	r6, r1
 801469c:	f004 fa46 	bl	8018b2c <ucdr_serialize_array_uint8_t>
 80146a0:	2202      	movs	r2, #2
 80146a2:	4604      	mov	r4, r0
 80146a4:	18b1      	adds	r1, r6, r2
 80146a6:	4628      	mov	r0, r5
 80146a8:	f004 fa40 	bl	8018b2c <ucdr_serialize_array_uint8_t>
 80146ac:	4020      	ands	r0, r4
 80146ae:	b2c0      	uxtb	r0, r0
 80146b0:	bd70      	pop	{r4, r5, r6, pc}
 80146b2:	bf00      	nop

080146b4 <uxr_serialize_ACKNACK_Payload>:
 80146b4:	b570      	push	{r4, r5, r6, lr}
 80146b6:	460c      	mov	r4, r1
 80146b8:	460e      	mov	r6, r1
 80146ba:	f834 1b02 	ldrh.w	r1, [r4], #2
 80146be:	4605      	mov	r5, r0
 80146c0:	f7f8 f880 	bl	800c7c4 <ucdr_serialize_uint16_t>
 80146c4:	2202      	movs	r2, #2
 80146c6:	4621      	mov	r1, r4
 80146c8:	4604      	mov	r4, r0
 80146ca:	4628      	mov	r0, r5
 80146cc:	f004 fa2e 	bl	8018b2c <ucdr_serialize_array_uint8_t>
 80146d0:	7931      	ldrb	r1, [r6, #4]
 80146d2:	4004      	ands	r4, r0
 80146d4:	4628      	mov	r0, r5
 80146d6:	f7f8 f849 	bl	800c76c <ucdr_serialize_uint8_t>
 80146da:	b2e4      	uxtb	r4, r4
 80146dc:	4020      	ands	r0, r4
 80146de:	bd70      	pop	{r4, r5, r6, pc}

080146e0 <uxr_deserialize_ACKNACK_Payload>:
 80146e0:	b570      	push	{r4, r5, r6, lr}
 80146e2:	4605      	mov	r5, r0
 80146e4:	460e      	mov	r6, r1
 80146e6:	f7f8 f96d 	bl	800c9c4 <ucdr_deserialize_uint16_t>
 80146ea:	2202      	movs	r2, #2
 80146ec:	18b1      	adds	r1, r6, r2
 80146ee:	4604      	mov	r4, r0
 80146f0:	4628      	mov	r0, r5
 80146f2:	f004 fa7f 	bl	8018bf4 <ucdr_deserialize_array_uint8_t>
 80146f6:	1d31      	adds	r1, r6, #4
 80146f8:	4004      	ands	r4, r0
 80146fa:	4628      	mov	r0, r5
 80146fc:	f7f8 f84c 	bl	800c798 <ucdr_deserialize_uint8_t>
 8014700:	b2e4      	uxtb	r4, r4
 8014702:	4020      	ands	r0, r4
 8014704:	bd70      	pop	{r4, r5, r6, pc}
 8014706:	bf00      	nop

08014708 <uxr_serialize_HEARTBEAT_Payload>:
 8014708:	b570      	push	{r4, r5, r6, lr}
 801470a:	460d      	mov	r5, r1
 801470c:	8809      	ldrh	r1, [r1, #0]
 801470e:	4606      	mov	r6, r0
 8014710:	f7f8 f858 	bl	800c7c4 <ucdr_serialize_uint16_t>
 8014714:	8869      	ldrh	r1, [r5, #2]
 8014716:	4604      	mov	r4, r0
 8014718:	4630      	mov	r0, r6
 801471a:	f7f8 f853 	bl	800c7c4 <ucdr_serialize_uint16_t>
 801471e:	7929      	ldrb	r1, [r5, #4]
 8014720:	4004      	ands	r4, r0
 8014722:	4630      	mov	r0, r6
 8014724:	f7f8 f822 	bl	800c76c <ucdr_serialize_uint8_t>
 8014728:	b2e4      	uxtb	r4, r4
 801472a:	4020      	ands	r0, r4
 801472c:	bd70      	pop	{r4, r5, r6, pc}
 801472e:	bf00      	nop

08014730 <uxr_deserialize_HEARTBEAT_Payload>:
 8014730:	b570      	push	{r4, r5, r6, lr}
 8014732:	4605      	mov	r5, r0
 8014734:	460e      	mov	r6, r1
 8014736:	f7f8 f945 	bl	800c9c4 <ucdr_deserialize_uint16_t>
 801473a:	1cb1      	adds	r1, r6, #2
 801473c:	4604      	mov	r4, r0
 801473e:	4628      	mov	r0, r5
 8014740:	f7f8 f940 	bl	800c9c4 <ucdr_deserialize_uint16_t>
 8014744:	1d31      	adds	r1, r6, #4
 8014746:	4004      	ands	r4, r0
 8014748:	4628      	mov	r0, r5
 801474a:	f7f8 f825 	bl	800c798 <ucdr_deserialize_uint8_t>
 801474e:	b2e4      	uxtb	r4, r4
 8014750:	4020      	ands	r0, r4
 8014752:	bd70      	pop	{r4, r5, r6, pc}

08014754 <uxr_serialize_TIMESTAMP_Payload>:
 8014754:	b570      	push	{r4, r5, r6, lr}
 8014756:	460d      	mov	r5, r1
 8014758:	6809      	ldr	r1, [r1, #0]
 801475a:	4606      	mov	r6, r0
 801475c:	f7f8 fe36 	bl	800d3cc <ucdr_serialize_int32_t>
 8014760:	6869      	ldr	r1, [r5, #4]
 8014762:	4604      	mov	r4, r0
 8014764:	4630      	mov	r0, r6
 8014766:	f7f8 fa17 	bl	800cb98 <ucdr_serialize_uint32_t>
 801476a:	4020      	ands	r0, r4
 801476c:	b2c0      	uxtb	r0, r0
 801476e:	bd70      	pop	{r4, r5, r6, pc}

08014770 <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 8014770:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014774:	4605      	mov	r5, r0
 8014776:	460e      	mov	r6, r1
 8014778:	f7f8 fec0 	bl	800d4fc <ucdr_deserialize_int32_t>
 801477c:	1d31      	adds	r1, r6, #4
 801477e:	4607      	mov	r7, r0
 8014780:	4628      	mov	r0, r5
 8014782:	f7f8 fb39 	bl	800cdf8 <ucdr_deserialize_uint32_t>
 8014786:	f106 0108 	add.w	r1, r6, #8
 801478a:	4680      	mov	r8, r0
 801478c:	4628      	mov	r0, r5
 801478e:	f7f8 feb5 	bl	800d4fc <ucdr_deserialize_int32_t>
 8014792:	f106 010c 	add.w	r1, r6, #12
 8014796:	4604      	mov	r4, r0
 8014798:	4628      	mov	r0, r5
 801479a:	f7f8 fb2d 	bl	800cdf8 <ucdr_deserialize_uint32_t>
 801479e:	ea07 0708 	and.w	r7, r7, r8
 80147a2:	403c      	ands	r4, r7
 80147a4:	f106 0110 	add.w	r1, r6, #16
 80147a8:	4004      	ands	r4, r0
 80147aa:	4628      	mov	r0, r5
 80147ac:	f7f8 fea6 	bl	800d4fc <ucdr_deserialize_int32_t>
 80147b0:	f106 0114 	add.w	r1, r6, #20
 80147b4:	4607      	mov	r7, r0
 80147b6:	4628      	mov	r0, r5
 80147b8:	f7f8 fb1e 	bl	800cdf8 <ucdr_deserialize_uint32_t>
 80147bc:	b2e4      	uxtb	r4, r4
 80147be:	403c      	ands	r4, r7
 80147c0:	4020      	ands	r0, r4
 80147c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80147c6:	bf00      	nop

080147c8 <uxr_serialize_SampleIdentity>:
 80147c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80147cc:	220c      	movs	r2, #12
 80147ce:	4604      	mov	r4, r0
 80147d0:	460d      	mov	r5, r1
 80147d2:	f004 f9ab 	bl	8018b2c <ucdr_serialize_array_uint8_t>
 80147d6:	2203      	movs	r2, #3
 80147d8:	f105 010c 	add.w	r1, r5, #12
 80147dc:	4607      	mov	r7, r0
 80147de:	4620      	mov	r0, r4
 80147e0:	f004 f9a4 	bl	8018b2c <ucdr_serialize_array_uint8_t>
 80147e4:	7be9      	ldrb	r1, [r5, #15]
 80147e6:	4680      	mov	r8, r0
 80147e8:	4620      	mov	r0, r4
 80147ea:	f7f7 ffbf 	bl	800c76c <ucdr_serialize_uint8_t>
 80147ee:	6929      	ldr	r1, [r5, #16]
 80147f0:	4606      	mov	r6, r0
 80147f2:	4620      	mov	r0, r4
 80147f4:	f7f8 fdea 	bl	800d3cc <ucdr_serialize_int32_t>
 80147f8:	6969      	ldr	r1, [r5, #20]
 80147fa:	4603      	mov	r3, r0
 80147fc:	4620      	mov	r0, r4
 80147fe:	ea07 0708 	and.w	r7, r7, r8
 8014802:	461c      	mov	r4, r3
 8014804:	f7f8 f9c8 	bl	800cb98 <ucdr_serialize_uint32_t>
 8014808:	403e      	ands	r6, r7
 801480a:	4034      	ands	r4, r6
 801480c:	4020      	ands	r0, r4
 801480e:	b2c0      	uxtb	r0, r0
 8014810:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014814 <uxr_deserialize_SampleIdentity>:
 8014814:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014818:	220c      	movs	r2, #12
 801481a:	4604      	mov	r4, r0
 801481c:	460d      	mov	r5, r1
 801481e:	f004 f9e9 	bl	8018bf4 <ucdr_deserialize_array_uint8_t>
 8014822:	2203      	movs	r2, #3
 8014824:	f105 010c 	add.w	r1, r5, #12
 8014828:	4607      	mov	r7, r0
 801482a:	4620      	mov	r0, r4
 801482c:	f004 f9e2 	bl	8018bf4 <ucdr_deserialize_array_uint8_t>
 8014830:	f105 010f 	add.w	r1, r5, #15
 8014834:	4680      	mov	r8, r0
 8014836:	4620      	mov	r0, r4
 8014838:	f7f7 ffae 	bl	800c798 <ucdr_deserialize_uint8_t>
 801483c:	f105 0110 	add.w	r1, r5, #16
 8014840:	4606      	mov	r6, r0
 8014842:	4620      	mov	r0, r4
 8014844:	f7f8 fe5a 	bl	800d4fc <ucdr_deserialize_int32_t>
 8014848:	f105 0114 	add.w	r1, r5, #20
 801484c:	4603      	mov	r3, r0
 801484e:	4620      	mov	r0, r4
 8014850:	ea07 0708 	and.w	r7, r7, r8
 8014854:	461c      	mov	r4, r3
 8014856:	f7f8 facf 	bl	800cdf8 <ucdr_deserialize_uint32_t>
 801485a:	403e      	ands	r6, r7
 801485c:	4034      	ands	r4, r6
 801485e:	4020      	ands	r0, r4
 8014860:	b2c0      	uxtb	r0, r0
 8014862:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014866:	bf00      	nop

08014868 <rcl_client_get_rmw_handle>:
 8014868:	b118      	cbz	r0, 8014872 <rcl_client_get_rmw_handle+0xa>
 801486a:	6800      	ldr	r0, [r0, #0]
 801486c:	b108      	cbz	r0, 8014872 <rcl_client_get_rmw_handle+0xa>
 801486e:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8014872:	4770      	bx	lr

08014874 <rcl_send_request>:
 8014874:	b570      	push	{r4, r5, r6, lr}
 8014876:	b082      	sub	sp, #8
 8014878:	b1e8      	cbz	r0, 80148b6 <rcl_send_request+0x42>
 801487a:	4604      	mov	r4, r0
 801487c:	6800      	ldr	r0, [r0, #0]
 801487e:	b1d0      	cbz	r0, 80148b6 <rcl_send_request+0x42>
 8014880:	f8d0 3108 	ldr.w	r3, [r0, #264]	@ 0x108
 8014884:	b1bb      	cbz	r3, 80148b6 <rcl_send_request+0x42>
 8014886:	460e      	mov	r6, r1
 8014888:	b1d1      	cbz	r1, 80148c0 <rcl_send_request+0x4c>
 801488a:	4615      	mov	r5, r2
 801488c:	b1c2      	cbz	r2, 80148c0 <rcl_send_request+0x4c>
 801488e:	2105      	movs	r1, #5
 8014890:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 8014894:	f002 fd04 	bl	80172a0 <__atomic_load_8>
 8014898:	6823      	ldr	r3, [r4, #0]
 801489a:	e9c5 0100 	strd	r0, r1, [r5]
 801489e:	462a      	mov	r2, r5
 80148a0:	4631      	mov	r1, r6
 80148a2:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 80148a6:	f003 fbff 	bl	80180a8 <rmw_send_request>
 80148aa:	4606      	mov	r6, r0
 80148ac:	b160      	cbz	r0, 80148c8 <rcl_send_request+0x54>
 80148ae:	2601      	movs	r6, #1
 80148b0:	4630      	mov	r0, r6
 80148b2:	b002      	add	sp, #8
 80148b4:	bd70      	pop	{r4, r5, r6, pc}
 80148b6:	f44f 76fa 	mov.w	r6, #500	@ 0x1f4
 80148ba:	4630      	mov	r0, r6
 80148bc:	b002      	add	sp, #8
 80148be:	bd70      	pop	{r4, r5, r6, pc}
 80148c0:	260b      	movs	r6, #11
 80148c2:	4630      	mov	r0, r6
 80148c4:	b002      	add	sp, #8
 80148c6:	bd70      	pop	{r4, r5, r6, pc}
 80148c8:	6820      	ldr	r0, [r4, #0]
 80148ca:	2105      	movs	r1, #5
 80148cc:	e9d5 2300 	ldrd	r2, r3, [r5]
 80148d0:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 80148d4:	9100      	str	r1, [sp, #0]
 80148d6:	f002 fd4f 	bl	8017378 <__atomic_exchange_8>
 80148da:	4630      	mov	r0, r6
 80148dc:	b002      	add	sp, #8
 80148de:	bd70      	pop	{r4, r5, r6, pc}

080148e0 <rcl_take_response>:
 80148e0:	b570      	push	{r4, r5, r6, lr}
 80148e2:	468e      	mov	lr, r1
 80148e4:	460c      	mov	r4, r1
 80148e6:	4616      	mov	r6, r2
 80148e8:	4605      	mov	r5, r0
 80148ea:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80148ee:	b08c      	sub	sp, #48	@ 0x30
 80148f0:	f10d 0c18 	add.w	ip, sp, #24
 80148f4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80148f8:	e89e 0003 	ldmia.w	lr, {r0, r1}
 80148fc:	e88c 0003 	stmia.w	ip, {r0, r1}
 8014900:	b35d      	cbz	r5, 801495a <rcl_take_response+0x7a>
 8014902:	682b      	ldr	r3, [r5, #0]
 8014904:	b34b      	cbz	r3, 801495a <rcl_take_response+0x7a>
 8014906:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 801490a:	b330      	cbz	r0, 801495a <rcl_take_response+0x7a>
 801490c:	b346      	cbz	r6, 8014960 <rcl_take_response+0x80>
 801490e:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 8014968 <rcl_take_response+0x88>
 8014912:	2300      	movs	r3, #0
 8014914:	f88d 3007 	strb.w	r3, [sp, #7]
 8014918:	4632      	mov	r2, r6
 801491a:	f10d 0307 	add.w	r3, sp, #7
 801491e:	a902      	add	r1, sp, #8
 8014920:	ed8d 7b02 	vstr	d7, [sp, #8]
 8014924:	ed8d 7b04 	vstr	d7, [sp, #16]
 8014928:	f003 fcc6 	bl	80182b8 <rmw_take_response>
 801492c:	4605      	mov	r5, r0
 801492e:	b9c8      	cbnz	r0, 8014964 <rcl_take_response+0x84>
 8014930:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8014934:	f240 13f5 	movw	r3, #501	@ 0x1f5
 8014938:	2a00      	cmp	r2, #0
 801493a:	bf08      	it	eq
 801493c:	461d      	moveq	r5, r3
 801493e:	f10d 0e18 	add.w	lr, sp, #24
 8014942:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014946:	46a4      	mov	ip, r4
 8014948:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801494c:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8014950:	e88c 0003 	stmia.w	ip, {r0, r1}
 8014954:	4628      	mov	r0, r5
 8014956:	b00c      	add	sp, #48	@ 0x30
 8014958:	bd70      	pop	{r4, r5, r6, pc}
 801495a:	f44f 75fa 	mov.w	r5, #500	@ 0x1f4
 801495e:	e7ee      	b.n	801493e <rcl_take_response+0x5e>
 8014960:	250b      	movs	r5, #11
 8014962:	e7ec      	b.n	801493e <rcl_take_response+0x5e>
 8014964:	2501      	movs	r5, #1
 8014966:	e7ea      	b.n	801493e <rcl_take_response+0x5e>
	...

08014970 <rcl_client_is_valid>:
 8014970:	b130      	cbz	r0, 8014980 <rcl_client_is_valid+0x10>
 8014972:	6800      	ldr	r0, [r0, #0]
 8014974:	b120      	cbz	r0, 8014980 <rcl_client_is_valid+0x10>
 8014976:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 801497a:	3800      	subs	r0, #0
 801497c:	bf18      	it	ne
 801497e:	2001      	movne	r0, #1
 8014980:	4770      	bx	lr
 8014982:	bf00      	nop

08014984 <rcl_convert_rmw_ret_to_rcl_ret>:
 8014984:	280b      	cmp	r0, #11
 8014986:	dc0d      	bgt.n	80149a4 <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 8014988:	2800      	cmp	r0, #0
 801498a:	db09      	blt.n	80149a0 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 801498c:	280b      	cmp	r0, #11
 801498e:	d807      	bhi.n	80149a0 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8014990:	e8df f000 	tbb	[pc, r0]
 8014994:	07060607 	.word	0x07060607
 8014998:	06060606 	.word	0x06060606
 801499c:	07070606 	.word	0x07070606
 80149a0:	2001      	movs	r0, #1
 80149a2:	4770      	bx	lr
 80149a4:	28cb      	cmp	r0, #203	@ 0xcb
 80149a6:	bf18      	it	ne
 80149a8:	2001      	movne	r0, #1
 80149aa:	4770      	bx	lr

080149ac <rcl_get_zero_initialized_context>:
 80149ac:	4a03      	ldr	r2, [pc, #12]	@ (80149bc <rcl_get_zero_initialized_context+0x10>)
 80149ae:	4603      	mov	r3, r0
 80149b0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80149b4:	e883 0003 	stmia.w	r3, {r0, r1}
 80149b8:	4618      	mov	r0, r3
 80149ba:	4770      	bx	lr
 80149bc:	0801e13c 	.word	0x0801e13c

080149c0 <rcl_context_is_valid>:
 80149c0:	b118      	cbz	r0, 80149ca <rcl_context_is_valid+0xa>
 80149c2:	6840      	ldr	r0, [r0, #4]
 80149c4:	3800      	subs	r0, #0
 80149c6:	bf18      	it	ne
 80149c8:	2001      	movne	r0, #1
 80149ca:	4770      	bx	lr

080149cc <__cleanup_context>:
 80149cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80149d0:	4606      	mov	r6, r0
 80149d2:	6800      	ldr	r0, [r0, #0]
 80149d4:	2300      	movs	r3, #0
 80149d6:	6073      	str	r3, [r6, #4]
 80149d8:	2800      	cmp	r0, #0
 80149da:	d049      	beq.n	8014a70 <__cleanup_context+0xa4>
 80149dc:	6947      	ldr	r7, [r0, #20]
 80149de:	f8d0 8004 	ldr.w	r8, [r0, #4]
 80149e2:	f8d0 9010 	ldr.w	r9, [r0, #16]
 80149e6:	b137      	cbz	r7, 80149f6 <__cleanup_context+0x2a>
 80149e8:	3014      	adds	r0, #20
 80149ea:	f7f9 fa79 	bl	800dee0 <rcl_init_options_fini>
 80149ee:	4607      	mov	r7, r0
 80149f0:	2800      	cmp	r0, #0
 80149f2:	d144      	bne.n	8014a7e <__cleanup_context+0xb2>
 80149f4:	6830      	ldr	r0, [r6, #0]
 80149f6:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80149f8:	b143      	cbz	r3, 8014a0c <__cleanup_context+0x40>
 80149fa:	3028      	adds	r0, #40	@ 0x28
 80149fc:	f7fa fece 	bl	800f79c <rmw_context_fini>
 8014a00:	b118      	cbz	r0, 8014a0a <__cleanup_context+0x3e>
 8014a02:	2f00      	cmp	r7, #0
 8014a04:	d03e      	beq.n	8014a84 <__cleanup_context+0xb8>
 8014a06:	f7fa fbd7 	bl	800f1b8 <rcutils_reset_error>
 8014a0a:	6830      	ldr	r0, [r6, #0]
 8014a0c:	6a03      	ldr	r3, [r0, #32]
 8014a0e:	b1db      	cbz	r3, 8014a48 <__cleanup_context+0x7c>
 8014a10:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 8014a14:	2a01      	cmp	r2, #1
 8014a16:	f17c 0100 	sbcs.w	r1, ip, #0
 8014a1a:	db11      	blt.n	8014a40 <__cleanup_context+0x74>
 8014a1c:	2400      	movs	r4, #0
 8014a1e:	4625      	mov	r5, r4
 8014a20:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8014a24:	4649      	mov	r1, r9
 8014a26:	b1b8      	cbz	r0, 8014a58 <__cleanup_context+0x8c>
 8014a28:	47c0      	blx	r8
 8014a2a:	6833      	ldr	r3, [r6, #0]
 8014a2c:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 8014a30:	3401      	adds	r4, #1
 8014a32:	f145 0500 	adc.w	r5, r5, #0
 8014a36:	4294      	cmp	r4, r2
 8014a38:	eb75 010c 	sbcs.w	r1, r5, ip
 8014a3c:	6a1b      	ldr	r3, [r3, #32]
 8014a3e:	dbef      	blt.n	8014a20 <__cleanup_context+0x54>
 8014a40:	4618      	mov	r0, r3
 8014a42:	4649      	mov	r1, r9
 8014a44:	47c0      	blx	r8
 8014a46:	6830      	ldr	r0, [r6, #0]
 8014a48:	4649      	mov	r1, r9
 8014a4a:	47c0      	blx	r8
 8014a4c:	2300      	movs	r3, #0
 8014a4e:	e9c6 3300 	strd	r3, r3, [r6]
 8014a52:	4638      	mov	r0, r7
 8014a54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014a58:	3401      	adds	r4, #1
 8014a5a:	f145 0500 	adc.w	r5, r5, #0
 8014a5e:	4294      	cmp	r4, r2
 8014a60:	eb75 010c 	sbcs.w	r1, r5, ip
 8014a64:	dbdc      	blt.n	8014a20 <__cleanup_context+0x54>
 8014a66:	4618      	mov	r0, r3
 8014a68:	4649      	mov	r1, r9
 8014a6a:	47c0      	blx	r8
 8014a6c:	6830      	ldr	r0, [r6, #0]
 8014a6e:	e7eb      	b.n	8014a48 <__cleanup_context+0x7c>
 8014a70:	4607      	mov	r7, r0
 8014a72:	2300      	movs	r3, #0
 8014a74:	e9c6 3300 	strd	r3, r3, [r6]
 8014a78:	4638      	mov	r0, r7
 8014a7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014a7e:	f7fa fb9b 	bl	800f1b8 <rcutils_reset_error>
 8014a82:	e7b7      	b.n	80149f4 <__cleanup_context+0x28>
 8014a84:	f7ff ff7e 	bl	8014984 <rcl_convert_rmw_ret_to_rcl_ret>
 8014a88:	4607      	mov	r7, r0
 8014a8a:	e7bc      	b.n	8014a06 <__cleanup_context+0x3a>

08014a8c <rcl_init>:
 8014a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014a90:	1e05      	subs	r5, r0, #0
 8014a92:	b09c      	sub	sp, #112	@ 0x70
 8014a94:	460e      	mov	r6, r1
 8014a96:	4690      	mov	r8, r2
 8014a98:	461f      	mov	r7, r3
 8014a9a:	f340 8099 	ble.w	8014bd0 <rcl_init+0x144>
 8014a9e:	2900      	cmp	r1, #0
 8014aa0:	f000 8099 	beq.w	8014bd6 <rcl_init+0x14a>
 8014aa4:	f1a1 0e04 	sub.w	lr, r1, #4
 8014aa8:	f04f 0c00 	mov.w	ip, #0
 8014aac:	f85e 4f04 	ldr.w	r4, [lr, #4]!
 8014ab0:	f10c 0c01 	add.w	ip, ip, #1
 8014ab4:	2c00      	cmp	r4, #0
 8014ab6:	f000 808e 	beq.w	8014bd6 <rcl_init+0x14a>
 8014aba:	4565      	cmp	r5, ip
 8014abc:	d1f6      	bne.n	8014aac <rcl_init+0x20>
 8014abe:	f1b8 0f00 	cmp.w	r8, #0
 8014ac2:	f000 8088 	beq.w	8014bd6 <rcl_init+0x14a>
 8014ac6:	f8d8 4000 	ldr.w	r4, [r8]
 8014aca:	2c00      	cmp	r4, #0
 8014acc:	f000 8083 	beq.w	8014bd6 <rcl_init+0x14a>
 8014ad0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014ad2:	f10d 0c5c 	add.w	ip, sp, #92	@ 0x5c
 8014ad6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014ada:	6823      	ldr	r3, [r4, #0]
 8014adc:	f8cc 3000 	str.w	r3, [ip]
 8014ae0:	a817      	add	r0, sp, #92	@ 0x5c
 8014ae2:	f7fa fb43 	bl	800f16c <rcutils_allocator_is_valid>
 8014ae6:	2800      	cmp	r0, #0
 8014ae8:	d075      	beq.n	8014bd6 <rcl_init+0x14a>
 8014aea:	2f00      	cmp	r7, #0
 8014aec:	d073      	beq.n	8014bd6 <rcl_init+0x14a>
 8014aee:	683b      	ldr	r3, [r7, #0]
 8014af0:	2b00      	cmp	r3, #0
 8014af2:	d175      	bne.n	8014be0 <rcl_init+0x154>
 8014af4:	e9dd 321a 	ldrd	r3, r2, [sp, #104]	@ 0x68
 8014af8:	2178      	movs	r1, #120	@ 0x78
 8014afa:	2001      	movs	r0, #1
 8014afc:	4798      	blx	r3
 8014afe:	4604      	mov	r4, r0
 8014b00:	6038      	str	r0, [r7, #0]
 8014b02:	2800      	cmp	r0, #0
 8014b04:	f000 80a0 	beq.w	8014c48 <rcl_init+0x1bc>
 8014b08:	a802      	add	r0, sp, #8
 8014b0a:	f002 ff09 	bl	8017920 <rmw_get_zero_initialized_context>
 8014b0e:	a902      	add	r1, sp, #8
 8014b10:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8014b14:	2250      	movs	r2, #80	@ 0x50
 8014b16:	ac17      	add	r4, sp, #92	@ 0x5c
 8014b18:	f006 f8e9 	bl	801acee <memcpy>
 8014b1c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014b1e:	f8d7 e000 	ldr.w	lr, [r7]
 8014b22:	46f4      	mov	ip, lr
 8014b24:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014b28:	6823      	ldr	r3, [r4, #0]
 8014b2a:	f8cc 3000 	str.w	r3, [ip]
 8014b2e:	f10e 0114 	add.w	r1, lr, #20
 8014b32:	4640      	mov	r0, r8
 8014b34:	f7f9 f9fe 	bl	800df34 <rcl_init_options_copy>
 8014b38:	4604      	mov	r4, r0
 8014b3a:	2800      	cmp	r0, #0
 8014b3c:	d144      	bne.n	8014bc8 <rcl_init+0x13c>
 8014b3e:	f8d7 9000 	ldr.w	r9, [r7]
 8014b42:	ea4f 78e5 	mov.w	r8, r5, asr #31
 8014b46:	f8c9 0020 	str.w	r0, [r9, #32]
 8014b4a:	f8c9 5018 	str.w	r5, [r9, #24]
 8014b4e:	f8c9 801c 	str.w	r8, [r9, #28]
 8014b52:	2d00      	cmp	r5, #0
 8014b54:	d04b      	beq.n	8014bee <rcl_init+0x162>
 8014b56:	2e00      	cmp	r6, #0
 8014b58:	d049      	beq.n	8014bee <rcl_init+0x162>
 8014b5a:	e9dd 321a 	ldrd	r3, r2, [sp, #104]	@ 0x68
 8014b5e:	2104      	movs	r1, #4
 8014b60:	4628      	mov	r0, r5
 8014b62:	4798      	blx	r3
 8014b64:	f8c9 0020 	str.w	r0, [r9, #32]
 8014b68:	f8d7 9000 	ldr.w	r9, [r7]
 8014b6c:	f8d9 3020 	ldr.w	r3, [r9, #32]
 8014b70:	46ca      	mov	sl, r9
 8014b72:	b343      	cbz	r3, 8014bc6 <rcl_init+0x13a>
 8014b74:	2d01      	cmp	r5, #1
 8014b76:	f178 0300 	sbcs.w	r3, r8, #0
 8014b7a:	db38      	blt.n	8014bee <rcl_init+0x162>
 8014b7c:	2400      	movs	r4, #0
 8014b7e:	3e04      	subs	r6, #4
 8014b80:	46a1      	mov	r9, r4
 8014b82:	e00b      	b.n	8014b9c <rcl_init+0x110>
 8014b84:	6831      	ldr	r1, [r6, #0]
 8014b86:	f006 f8b2 	bl	801acee <memcpy>
 8014b8a:	3401      	adds	r4, #1
 8014b8c:	f149 0900 	adc.w	r9, r9, #0
 8014b90:	45c8      	cmp	r8, r9
 8014b92:	bf08      	it	eq
 8014b94:	42a5      	cmpeq	r5, r4
 8014b96:	d028      	beq.n	8014bea <rcl_init+0x15e>
 8014b98:	f8d7 a000 	ldr.w	sl, [r7]
 8014b9c:	f856 0f04 	ldr.w	r0, [r6, #4]!
 8014ba0:	f7eb fb48 	bl	8000234 <strlen>
 8014ba4:	1c42      	adds	r2, r0, #1
 8014ba6:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8014ba8:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 8014baa:	f8da a020 	ldr.w	sl, [sl, #32]
 8014bae:	9201      	str	r2, [sp, #4]
 8014bb0:	4610      	mov	r0, r2
 8014bb2:	4798      	blx	r3
 8014bb4:	683b      	ldr	r3, [r7, #0]
 8014bb6:	f84a 0024 	str.w	r0, [sl, r4, lsl #2]
 8014bba:	6a1b      	ldr	r3, [r3, #32]
 8014bbc:	9a01      	ldr	r2, [sp, #4]
 8014bbe:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8014bc2:	2800      	cmp	r0, #0
 8014bc4:	d1de      	bne.n	8014b84 <rcl_init+0xf8>
 8014bc6:	240a      	movs	r4, #10
 8014bc8:	4638      	mov	r0, r7
 8014bca:	f7ff feff 	bl	80149cc <__cleanup_context>
 8014bce:	e003      	b.n	8014bd8 <rcl_init+0x14c>
 8014bd0:	2900      	cmp	r1, #0
 8014bd2:	f43f af74 	beq.w	8014abe <rcl_init+0x32>
 8014bd6:	240b      	movs	r4, #11
 8014bd8:	4620      	mov	r0, r4
 8014bda:	b01c      	add	sp, #112	@ 0x70
 8014bdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014be0:	2464      	movs	r4, #100	@ 0x64
 8014be2:	4620      	mov	r0, r4
 8014be4:	b01c      	add	sp, #112	@ 0x70
 8014be6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014bea:	f8d7 9000 	ldr.w	r9, [r7]
 8014bee:	491d      	ldr	r1, [pc, #116]	@ (8014c64 <rcl_init+0x1d8>)
 8014bf0:	680b      	ldr	r3, [r1, #0]
 8014bf2:	3301      	adds	r3, #1
 8014bf4:	d023      	beq.n	8014c3e <rcl_init+0x1b2>
 8014bf6:	600b      	str	r3, [r1, #0]
 8014bf8:	461a      	mov	r2, r3
 8014bfa:	2400      	movs	r4, #0
 8014bfc:	f8d9 0014 	ldr.w	r0, [r9, #20]
 8014c00:	607b      	str	r3, [r7, #4]
 8014c02:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8014c04:	6182      	str	r2, [r0, #24]
 8014c06:	3301      	adds	r3, #1
 8014c08:	61c4      	str	r4, [r0, #28]
 8014c0a:	d01f      	beq.n	8014c4c <rcl_init+0x1c0>
 8014c0c:	f890 3030 	ldrb.w	r3, [r0, #48]	@ 0x30
 8014c10:	b94b      	cbnz	r3, 8014c26 <rcl_init+0x19a>
 8014c12:	3030      	adds	r0, #48	@ 0x30
 8014c14:	f000 f828 	bl	8014c68 <rcl_get_localhost_only>
 8014c18:	4604      	mov	r4, r0
 8014c1a:	2800      	cmp	r0, #0
 8014c1c:	d1d4      	bne.n	8014bc8 <rcl_init+0x13c>
 8014c1e:	f8d7 9000 	ldr.w	r9, [r7]
 8014c22:	f8d9 0014 	ldr.w	r0, [r9, #20]
 8014c26:	f109 0128 	add.w	r1, r9, #40	@ 0x28
 8014c2a:	3018      	adds	r0, #24
 8014c2c:	f7fa fc80 	bl	800f530 <rmw_init>
 8014c30:	4604      	mov	r4, r0
 8014c32:	2800      	cmp	r0, #0
 8014c34:	d0d0      	beq.n	8014bd8 <rcl_init+0x14c>
 8014c36:	f7ff fea5 	bl	8014984 <rcl_convert_rmw_ret_to_rcl_ret>
 8014c3a:	4604      	mov	r4, r0
 8014c3c:	e7c4      	b.n	8014bc8 <rcl_init+0x13c>
 8014c3e:	2201      	movs	r2, #1
 8014c40:	461c      	mov	r4, r3
 8014c42:	600a      	str	r2, [r1, #0]
 8014c44:	4613      	mov	r3, r2
 8014c46:	e7d9      	b.n	8014bfc <rcl_init+0x170>
 8014c48:	240a      	movs	r4, #10
 8014c4a:	e7c5      	b.n	8014bd8 <rcl_init+0x14c>
 8014c4c:	3024      	adds	r0, #36	@ 0x24
 8014c4e:	f004 fe5f 	bl	8019910 <rcl_get_default_domain_id>
 8014c52:	4604      	mov	r4, r0
 8014c54:	2800      	cmp	r0, #0
 8014c56:	d1b7      	bne.n	8014bc8 <rcl_init+0x13c>
 8014c58:	f8d7 9000 	ldr.w	r9, [r7]
 8014c5c:	f8d9 0014 	ldr.w	r0, [r9, #20]
 8014c60:	e7d4      	b.n	8014c0c <rcl_init+0x180>
 8014c62:	bf00      	nop
 8014c64:	2000b378 	.word	0x2000b378

08014c68 <rcl_get_localhost_only>:
 8014c68:	b510      	push	{r4, lr}
 8014c6a:	b082      	sub	sp, #8
 8014c6c:	2300      	movs	r3, #0
 8014c6e:	9301      	str	r3, [sp, #4]
 8014c70:	b1b8      	cbz	r0, 8014ca2 <rcl_get_localhost_only+0x3a>
 8014c72:	4604      	mov	r4, r0
 8014c74:	a901      	add	r1, sp, #4
 8014c76:	480c      	ldr	r0, [pc, #48]	@ (8014ca8 <rcl_get_localhost_only+0x40>)
 8014c78:	f002 fbb6 	bl	80173e8 <rcutils_get_env>
 8014c7c:	b110      	cbz	r0, 8014c84 <rcl_get_localhost_only+0x1c>
 8014c7e:	2001      	movs	r0, #1
 8014c80:	b002      	add	sp, #8
 8014c82:	bd10      	pop	{r4, pc}
 8014c84:	9b01      	ldr	r3, [sp, #4]
 8014c86:	b113      	cbz	r3, 8014c8e <rcl_get_localhost_only+0x26>
 8014c88:	781a      	ldrb	r2, [r3, #0]
 8014c8a:	2a31      	cmp	r2, #49	@ 0x31
 8014c8c:	d004      	beq.n	8014c98 <rcl_get_localhost_only+0x30>
 8014c8e:	2302      	movs	r3, #2
 8014c90:	2000      	movs	r0, #0
 8014c92:	7023      	strb	r3, [r4, #0]
 8014c94:	b002      	add	sp, #8
 8014c96:	bd10      	pop	{r4, pc}
 8014c98:	785b      	ldrb	r3, [r3, #1]
 8014c9a:	2b00      	cmp	r3, #0
 8014c9c:	d1f7      	bne.n	8014c8e <rcl_get_localhost_only+0x26>
 8014c9e:	2301      	movs	r3, #1
 8014ca0:	e7f6      	b.n	8014c90 <rcl_get_localhost_only+0x28>
 8014ca2:	200b      	movs	r0, #11
 8014ca4:	b002      	add	sp, #8
 8014ca6:	bd10      	pop	{r4, pc}
 8014ca8:	0801d848 	.word	0x0801d848

08014cac <rcl_get_zero_initialized_node>:
 8014cac:	4a03      	ldr	r2, [pc, #12]	@ (8014cbc <rcl_get_zero_initialized_node+0x10>)
 8014cae:	4603      	mov	r3, r0
 8014cb0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014cb4:	e883 0003 	stmia.w	r3, {r0, r1}
 8014cb8:	4618      	mov	r0, r3
 8014cba:	4770      	bx	lr
 8014cbc:	0801e144 	.word	0x0801e144

08014cc0 <rcl_node_init>:
 8014cc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014cc4:	b0a9      	sub	sp, #164	@ 0xa4
 8014cc6:	4604      	mov	r4, r0
 8014cc8:	f8dd 80c8 	ldr.w	r8, [sp, #200]	@ 0xc8
 8014ccc:	a823      	add	r0, sp, #140	@ 0x8c
 8014cce:	460e      	mov	r6, r1
 8014cd0:	4615      	mov	r5, r2
 8014cd2:	461f      	mov	r7, r3
 8014cd4:	f005 f890 	bl	8019df8 <rcl_guard_condition_get_default_options>
 8014cd8:	f1b8 0f00 	cmp.w	r8, #0
 8014cdc:	f000 80e6 	beq.w	8014eac <rcl_node_init+0x1ec>
 8014ce0:	4640      	mov	r0, r8
 8014ce2:	f7fa fa43 	bl	800f16c <rcutils_allocator_is_valid>
 8014ce6:	2800      	cmp	r0, #0
 8014ce8:	f000 80e0 	beq.w	8014eac <rcl_node_init+0x1ec>
 8014cec:	2e00      	cmp	r6, #0
 8014cee:	f000 80dd 	beq.w	8014eac <rcl_node_init+0x1ec>
 8014cf2:	2d00      	cmp	r5, #0
 8014cf4:	f000 80da 	beq.w	8014eac <rcl_node_init+0x1ec>
 8014cf8:	2c00      	cmp	r4, #0
 8014cfa:	f000 80d7 	beq.w	8014eac <rcl_node_init+0x1ec>
 8014cfe:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8014d02:	f1b9 0f00 	cmp.w	r9, #0
 8014d06:	f040 80fd 	bne.w	8014f04 <rcl_node_init+0x244>
 8014d0a:	2f00      	cmp	r7, #0
 8014d0c:	f000 80ce 	beq.w	8014eac <rcl_node_init+0x1ec>
 8014d10:	4638      	mov	r0, r7
 8014d12:	f7ff fe55 	bl	80149c0 <rcl_context_is_valid>
 8014d16:	4682      	mov	sl, r0
 8014d18:	2800      	cmp	r0, #0
 8014d1a:	f000 80cd 	beq.w	8014eb8 <rcl_node_init+0x1f8>
 8014d1e:	464a      	mov	r2, r9
 8014d20:	a922      	add	r1, sp, #136	@ 0x88
 8014d22:	4630      	mov	r0, r6
 8014d24:	f8cd 9088 	str.w	r9, [sp, #136]	@ 0x88
 8014d28:	f002 ff98 	bl	8017c5c <rmw_validate_node_name>
 8014d2c:	4681      	mov	r9, r0
 8014d2e:	2800      	cmp	r0, #0
 8014d30:	f040 80be 	bne.w	8014eb0 <rcl_node_init+0x1f0>
 8014d34:	9822      	ldr	r0, [sp, #136]	@ 0x88
 8014d36:	2800      	cmp	r0, #0
 8014d38:	f040 80f0 	bne.w	8014f1c <rcl_node_init+0x25c>
 8014d3c:	4628      	mov	r0, r5
 8014d3e:	f7eb fa79 	bl	8000234 <strlen>
 8014d42:	2800      	cmp	r0, #0
 8014d44:	f040 80bb 	bne.w	8014ebe <rcl_node_init+0x1fe>
 8014d48:	4d7c      	ldr	r5, [pc, #496]	@ (8014f3c <rcl_node_init+0x27c>)
 8014d4a:	a922      	add	r1, sp, #136	@ 0x88
 8014d4c:	2200      	movs	r2, #0
 8014d4e:	4628      	mov	r0, r5
 8014d50:	f002 ff66 	bl	8017c20 <rmw_validate_namespace>
 8014d54:	4681      	mov	r9, r0
 8014d56:	2800      	cmp	r0, #0
 8014d58:	f040 80aa 	bne.w	8014eb0 <rcl_node_init+0x1f0>
 8014d5c:	4682      	mov	sl, r0
 8014d5e:	9822      	ldr	r0, [sp, #136]	@ 0x88
 8014d60:	2800      	cmp	r0, #0
 8014d62:	f040 80e0 	bne.w	8014f26 <rcl_node_init+0x266>
 8014d66:	f8d8 3000 	ldr.w	r3, [r8]
 8014d6a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8014d6e:	2078      	movs	r0, #120	@ 0x78
 8014d70:	4798      	blx	r3
 8014d72:	4681      	mov	r9, r0
 8014d74:	6060      	str	r0, [r4, #4]
 8014d76:	2800      	cmp	r0, #0
 8014d78:	f000 80ca 	beq.w	8014f10 <rcl_node_init+0x250>
 8014d7c:	2200      	movs	r2, #0
 8014d7e:	2300      	movs	r3, #0
 8014d80:	e9c9 231a 	strd	r2, r3, [r9, #104]	@ 0x68
 8014d84:	e9c9 231c 	strd	r2, r3, [r9, #112]	@ 0x70
 8014d88:	a808      	add	r0, sp, #32
 8014d8a:	f000 f907 	bl	8014f9c <rcl_node_get_default_options>
 8014d8e:	a908      	add	r1, sp, #32
 8014d90:	4648      	mov	r0, r9
 8014d92:	2268      	movs	r2, #104	@ 0x68
 8014d94:	f005 ffab 	bl	801acee <memcpy>
 8014d98:	6861      	ldr	r1, [r4, #4]
 8014d9a:	6027      	str	r7, [r4, #0]
 8014d9c:	4640      	mov	r0, r8
 8014d9e:	f000 f90b 	bl	8014fb8 <rcl_node_options_copy>
 8014da2:	2800      	cmp	r0, #0
 8014da4:	d158      	bne.n	8014e58 <rcl_node_init+0x198>
 8014da6:	4628      	mov	r0, r5
 8014da8:	f7eb fa44 	bl	8000234 <strlen>
 8014dac:	4428      	add	r0, r5
 8014dae:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 8014db2:	e9cd 5603 	strd	r5, r6, [sp, #12]
 8014db6:	2b2f      	cmp	r3, #47	@ 0x2f
 8014db8:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8014dbc:	9300      	str	r3, [sp, #0]
 8014dbe:	bf0c      	ite	eq
 8014dc0:	4b5f      	ldreq	r3, [pc, #380]	@ (8014f40 <rcl_node_init+0x280>)
 8014dc2:	4b60      	ldrne	r3, [pc, #384]	@ (8014f44 <rcl_node_init+0x284>)
 8014dc4:	9302      	str	r3, [sp, #8]
 8014dc6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8014dca:	9301      	str	r3, [sp, #4]
 8014dcc:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 8014dd0:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8014dd4:	f002 fb20 	bl	8017418 <rcutils_format_string_limit>
 8014dd8:	6823      	ldr	r3, [r4, #0]
 8014dda:	f8c9 0074 	str.w	r0, [r9, #116]	@ 0x74
 8014dde:	6818      	ldr	r0, [r3, #0]
 8014de0:	4631      	mov	r1, r6
 8014de2:	3028      	adds	r0, #40	@ 0x28
 8014de4:	462a      	mov	r2, r5
 8014de6:	6866      	ldr	r6, [r4, #4]
 8014de8:	f7fa fd84 	bl	800f8f4 <rmw_create_node>
 8014dec:	6863      	ldr	r3, [r4, #4]
 8014dee:	66b0      	str	r0, [r6, #104]	@ 0x68
 8014df0:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 8014df2:	2800      	cmp	r0, #0
 8014df4:	d032      	beq.n	8014e5c <rcl_node_init+0x19c>
 8014df6:	f7fa fe11 	bl	800fa1c <rmw_node_get_graph_guard_condition>
 8014dfa:	4681      	mov	r9, r0
 8014dfc:	b360      	cbz	r0, 8014e58 <rcl_node_init+0x198>
 8014dfe:	f8d8 3000 	ldr.w	r3, [r8]
 8014e02:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8014e06:	6866      	ldr	r6, [r4, #4]
 8014e08:	2008      	movs	r0, #8
 8014e0a:	4798      	blx	r3
 8014e0c:	6863      	ldr	r3, [r4, #4]
 8014e0e:	66f0      	str	r0, [r6, #108]	@ 0x6c
 8014e10:	f8d3 b06c 	ldr.w	fp, [r3, #108]	@ 0x6c
 8014e14:	f1bb 0f00 	cmp.w	fp, #0
 8014e18:	d020      	beq.n	8014e5c <rcl_node_init+0x19c>
 8014e1a:	a806      	add	r0, sp, #24
 8014e1c:	f004 ff10 	bl	8019c40 <rcl_get_zero_initialized_guard_condition>
 8014e20:	a806      	add	r0, sp, #24
 8014e22:	c803      	ldmia	r0, {r0, r1}
 8014e24:	6863      	ldr	r3, [r4, #4]
 8014e26:	46c4      	mov	ip, r8
 8014e28:	f8d3 e06c 	ldr.w	lr, [r3, #108]	@ 0x6c
 8014e2c:	e88b 0003 	stmia.w	fp, {r0, r1}
 8014e30:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014e34:	ae23      	add	r6, sp, #140	@ 0x8c
 8014e36:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8014e38:	f8dc 3000 	ldr.w	r3, [ip]
 8014e3c:	6033      	str	r3, [r6, #0]
 8014e3e:	ab28      	add	r3, sp, #160	@ 0xa0
 8014e40:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 8014e44:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8014e48:	4649      	mov	r1, r9
 8014e4a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8014e4c:	463a      	mov	r2, r7
 8014e4e:	4670      	mov	r0, lr
 8014e50:	f004 ff4c 	bl	8019cec <rcl_guard_condition_init_from_rmw>
 8014e54:	4681      	mov	r9, r0
 8014e56:	b328      	cbz	r0, 8014ea4 <rcl_node_init+0x1e4>
 8014e58:	6863      	ldr	r3, [r4, #4]
 8014e5a:	b1f3      	cbz	r3, 8014e9a <rcl_node_init+0x1da>
 8014e5c:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8014e5e:	b128      	cbz	r0, 8014e6c <rcl_node_init+0x1ac>
 8014e60:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8014e64:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8014e68:	4798      	blx	r3
 8014e6a:	6863      	ldr	r3, [r4, #4]
 8014e6c:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 8014e6e:	b110      	cbz	r0, 8014e76 <rcl_node_init+0x1b6>
 8014e70:	f7fa fd58 	bl	800f924 <rmw_destroy_node>
 8014e74:	6863      	ldr	r3, [r4, #4]
 8014e76:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 8014e78:	b148      	cbz	r0, 8014e8e <rcl_node_init+0x1ce>
 8014e7a:	f004 ff97 	bl	8019dac <rcl_guard_condition_fini>
 8014e7e:	6863      	ldr	r3, [r4, #4]
 8014e80:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8014e84:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 8014e86:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8014e8a:	4798      	blx	r3
 8014e8c:	6863      	ldr	r3, [r4, #4]
 8014e8e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8014e92:	4618      	mov	r0, r3
 8014e94:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8014e98:	4798      	blx	r3
 8014e9a:	2300      	movs	r3, #0
 8014e9c:	e9c4 3300 	strd	r3, r3, [r4]
 8014ea0:	f04f 0901 	mov.w	r9, #1
 8014ea4:	f1ba 0f00 	cmp.w	sl, #0
 8014ea8:	d125      	bne.n	8014ef6 <rcl_node_init+0x236>
 8014eaa:	e001      	b.n	8014eb0 <rcl_node_init+0x1f0>
 8014eac:	f04f 090b 	mov.w	r9, #11
 8014eb0:	4648      	mov	r0, r9
 8014eb2:	b029      	add	sp, #164	@ 0xa4
 8014eb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014eb8:	f04f 0965 	mov.w	r9, #101	@ 0x65
 8014ebc:	e7f8      	b.n	8014eb0 <rcl_node_init+0x1f0>
 8014ebe:	782b      	ldrb	r3, [r5, #0]
 8014ec0:	2b2f      	cmp	r3, #47	@ 0x2f
 8014ec2:	f43f af42 	beq.w	8014d4a <rcl_node_init+0x8a>
 8014ec6:	9503      	str	r5, [sp, #12]
 8014ec8:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8014ecc:	9300      	str	r3, [sp, #0]
 8014ece:	4b1e      	ldr	r3, [pc, #120]	@ (8014f48 <rcl_node_init+0x288>)
 8014ed0:	9302      	str	r3, [sp, #8]
 8014ed2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8014ed6:	9301      	str	r3, [sp, #4]
 8014ed8:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 8014edc:	f002 fa9c 	bl	8017418 <rcutils_format_string_limit>
 8014ee0:	4605      	mov	r5, r0
 8014ee2:	b340      	cbz	r0, 8014f36 <rcl_node_init+0x276>
 8014ee4:	2200      	movs	r2, #0
 8014ee6:	a922      	add	r1, sp, #136	@ 0x88
 8014ee8:	9222      	str	r2, [sp, #136]	@ 0x88
 8014eea:	f002 fe99 	bl	8017c20 <rmw_validate_namespace>
 8014eee:	4681      	mov	r9, r0
 8014ef0:	2800      	cmp	r0, #0
 8014ef2:	f43f af34 	beq.w	8014d5e <rcl_node_init+0x9e>
 8014ef6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8014efa:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8014efe:	4628      	mov	r0, r5
 8014f00:	4798      	blx	r3
 8014f02:	e7d5      	b.n	8014eb0 <rcl_node_init+0x1f0>
 8014f04:	f04f 0964 	mov.w	r9, #100	@ 0x64
 8014f08:	4648      	mov	r0, r9
 8014f0a:	b029      	add	sp, #164	@ 0xa4
 8014f0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014f10:	f04f 090a 	mov.w	r9, #10
 8014f14:	f1ba 0f00 	cmp.w	sl, #0
 8014f18:	d1ed      	bne.n	8014ef6 <rcl_node_init+0x236>
 8014f1a:	e7c9      	b.n	8014eb0 <rcl_node_init+0x1f0>
 8014f1c:	f002 fef0 	bl	8017d00 <rmw_node_name_validation_result_string>
 8014f20:	f04f 09c9 	mov.w	r9, #201	@ 0xc9
 8014f24:	e7c4      	b.n	8014eb0 <rcl_node_init+0x1f0>
 8014f26:	f002 fe8d 	bl	8017c44 <rmw_namespace_validation_result_string>
 8014f2a:	f04f 09ca 	mov.w	r9, #202	@ 0xca
 8014f2e:	f1ba 0f00 	cmp.w	sl, #0
 8014f32:	d1e0      	bne.n	8014ef6 <rcl_node_init+0x236>
 8014f34:	e7bc      	b.n	8014eb0 <rcl_node_init+0x1f0>
 8014f36:	f04f 090a 	mov.w	r9, #10
 8014f3a:	e7b9      	b.n	8014eb0 <rcl_node_init+0x1f0>
 8014f3c:	0801d860 	.word	0x0801d860
 8014f40:	0801d6f8 	.word	0x0801d6f8
 8014f44:	0801d6d4 	.word	0x0801d6d4
 8014f48:	0801d864 	.word	0x0801d864

08014f4c <rcl_node_is_valid>:
 8014f4c:	b130      	cbz	r0, 8014f5c <rcl_node_is_valid+0x10>
 8014f4e:	6843      	ldr	r3, [r0, #4]
 8014f50:	b123      	cbz	r3, 8014f5c <rcl_node_is_valid+0x10>
 8014f52:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8014f54:	b113      	cbz	r3, 8014f5c <rcl_node_is_valid+0x10>
 8014f56:	6800      	ldr	r0, [r0, #0]
 8014f58:	f7ff bd32 	b.w	80149c0 <rcl_context_is_valid>
 8014f5c:	2000      	movs	r0, #0
 8014f5e:	4770      	bx	lr

08014f60 <rcl_node_get_name>:
 8014f60:	b120      	cbz	r0, 8014f6c <rcl_node_get_name+0xc>
 8014f62:	6840      	ldr	r0, [r0, #4]
 8014f64:	b110      	cbz	r0, 8014f6c <rcl_node_get_name+0xc>
 8014f66:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8014f68:	b100      	cbz	r0, 8014f6c <rcl_node_get_name+0xc>
 8014f6a:	6880      	ldr	r0, [r0, #8]
 8014f6c:	4770      	bx	lr
 8014f6e:	bf00      	nop

08014f70 <rcl_node_get_namespace>:
 8014f70:	b120      	cbz	r0, 8014f7c <rcl_node_get_namespace+0xc>
 8014f72:	6840      	ldr	r0, [r0, #4]
 8014f74:	b110      	cbz	r0, 8014f7c <rcl_node_get_namespace+0xc>
 8014f76:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8014f78:	b100      	cbz	r0, 8014f7c <rcl_node_get_namespace+0xc>
 8014f7a:	68c0      	ldr	r0, [r0, #12]
 8014f7c:	4770      	bx	lr
 8014f7e:	bf00      	nop

08014f80 <rcl_node_get_options>:
 8014f80:	b128      	cbz	r0, 8014f8e <rcl_node_get_options+0xe>
 8014f82:	6840      	ldr	r0, [r0, #4]
 8014f84:	b118      	cbz	r0, 8014f8e <rcl_node_get_options+0xe>
 8014f86:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 8014f88:	2b00      	cmp	r3, #0
 8014f8a:	bf08      	it	eq
 8014f8c:	2000      	moveq	r0, #0
 8014f8e:	4770      	bx	lr

08014f90 <rcl_node_get_rmw_handle>:
 8014f90:	b110      	cbz	r0, 8014f98 <rcl_node_get_rmw_handle+0x8>
 8014f92:	6840      	ldr	r0, [r0, #4]
 8014f94:	b100      	cbz	r0, 8014f98 <rcl_node_get_rmw_handle+0x8>
 8014f96:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8014f98:	4770      	bx	lr
 8014f9a:	bf00      	nop

08014f9c <rcl_node_get_default_options>:
 8014f9c:	b510      	push	{r4, lr}
 8014f9e:	2268      	movs	r2, #104	@ 0x68
 8014fa0:	4604      	mov	r4, r0
 8014fa2:	2100      	movs	r1, #0
 8014fa4:	f005 fdda 	bl	801ab5c <memset>
 8014fa8:	4620      	mov	r0, r4
 8014faa:	f7fa f8d1 	bl	800f150 <rcutils_get_default_allocator>
 8014fae:	2301      	movs	r3, #1
 8014fb0:	7523      	strb	r3, [r4, #20]
 8014fb2:	4620      	mov	r0, r4
 8014fb4:	bd10      	pop	{r4, pc}
 8014fb6:	bf00      	nop

08014fb8 <rcl_node_options_copy>:
 8014fb8:	b1d0      	cbz	r0, 8014ff0 <rcl_node_options_copy+0x38>
 8014fba:	b570      	push	{r4, r5, r6, lr}
 8014fbc:	460c      	mov	r4, r1
 8014fbe:	b1a9      	cbz	r1, 8014fec <rcl_node_options_copy+0x34>
 8014fc0:	4288      	cmp	r0, r1
 8014fc2:	4684      	mov	ip, r0
 8014fc4:	d012      	beq.n	8014fec <rcl_node_options_copy+0x34>
 8014fc6:	4605      	mov	r5, r0
 8014fc8:	8a86      	ldrh	r6, [r0, #20]
 8014fca:	468e      	mov	lr, r1
 8014fcc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014fce:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8014fd2:	682b      	ldr	r3, [r5, #0]
 8014fd4:	f8ce 3000 	str.w	r3, [lr]
 8014fd8:	f10c 0118 	add.w	r1, ip, #24
 8014fdc:	2250      	movs	r2, #80	@ 0x50
 8014fde:	82a6      	strh	r6, [r4, #20]
 8014fe0:	f104 0018 	add.w	r0, r4, #24
 8014fe4:	f005 fe83 	bl	801acee <memcpy>
 8014fe8:	2000      	movs	r0, #0
 8014fea:	bd70      	pop	{r4, r5, r6, pc}
 8014fec:	200b      	movs	r0, #11
 8014fee:	bd70      	pop	{r4, r5, r6, pc}
 8014ff0:	200b      	movs	r0, #11
 8014ff2:	4770      	bx	lr

08014ff4 <rcl_node_resolve_name>:
 8014ff4:	b082      	sub	sp, #8
 8014ff6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014ffa:	b091      	sub	sp, #68	@ 0x44
 8014ffc:	ac1a      	add	r4, sp, #104	@ 0x68
 8014ffe:	e884 000c 	stmia.w	r4, {r2, r3}
 8015002:	f89d 807c 	ldrb.w	r8, [sp, #124]	@ 0x7c
 8015006:	2800      	cmp	r0, #0
 8015008:	d03b      	beq.n	8015082 <rcl_node_resolve_name+0x8e>
 801500a:	460c      	mov	r4, r1
 801500c:	4605      	mov	r5, r0
 801500e:	f7ff ffb7 	bl	8014f80 <rcl_node_get_options>
 8015012:	2800      	cmp	r0, #0
 8015014:	d037      	beq.n	8015086 <rcl_node_resolve_name+0x92>
 8015016:	4628      	mov	r0, r5
 8015018:	f7ff ffa2 	bl	8014f60 <rcl_node_get_name>
 801501c:	4606      	mov	r6, r0
 801501e:	4628      	mov	r0, r5
 8015020:	f7ff ffa6 	bl	8014f70 <rcl_node_get_namespace>
 8015024:	f10d 0e68 	add.w	lr, sp, #104	@ 0x68
 8015028:	4681      	mov	r9, r0
 801502a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801502e:	ad0b      	add	r5, sp, #44	@ 0x2c
 8015030:	46ac      	mov	ip, r5
 8015032:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015036:	f8de 3000 	ldr.w	r3, [lr]
 801503a:	f8cc 3000 	str.w	r3, [ip]
 801503e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8015040:	b1fb      	cbz	r3, 8015082 <rcl_node_resolve_name+0x8e>
 8015042:	468a      	mov	sl, r1
 8015044:	f8dd b078 	ldr.w	fp, [sp, #120]	@ 0x78
 8015048:	f002 fb3e 	bl	80176c8 <rcutils_get_zero_initialized_string_map>
 801504c:	ab10      	add	r3, sp, #64	@ 0x40
 801504e:	9008      	str	r0, [sp, #32]
 8015050:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8015054:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8015058:	2100      	movs	r1, #0
 801505a:	e895 000c 	ldmia.w	r5, {r2, r3}
 801505e:	a808      	add	r0, sp, #32
 8015060:	f002 fbaa 	bl	80177b8 <rcutils_string_map_init>
 8015064:	4607      	mov	r7, r0
 8015066:	b180      	cbz	r0, 801508a <rcl_node_resolve_name+0x96>
 8015068:	f7fa f88e 	bl	800f188 <rcutils_get_error_string>
 801506c:	f7fa f8a4 	bl	800f1b8 <rcutils_reset_error>
 8015070:	2f0a      	cmp	r7, #10
 8015072:	bf18      	it	ne
 8015074:	2701      	movne	r7, #1
 8015076:	4638      	mov	r0, r7
 8015078:	b011      	add	sp, #68	@ 0x44
 801507a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801507e:	b002      	add	sp, #8
 8015080:	4770      	bx	lr
 8015082:	270b      	movs	r7, #11
 8015084:	e7f7      	b.n	8015076 <rcl_node_resolve_name+0x82>
 8015086:	2701      	movs	r7, #1
 8015088:	e7f5      	b.n	8015076 <rcl_node_resolve_name+0x82>
 801508a:	9009      	str	r0, [sp, #36]	@ 0x24
 801508c:	9007      	str	r0, [sp, #28]
 801508e:	a808      	add	r0, sp, #32
 8015090:	f004 fdd0 	bl	8019c34 <rcl_get_default_topic_name_substitutions>
 8015094:	4607      	mov	r7, r0
 8015096:	b1a8      	cbz	r0, 80150c4 <rcl_node_resolve_name+0xd0>
 8015098:	280a      	cmp	r0, #10
 801509a:	9c07      	ldr	r4, [sp, #28]
 801509c:	d000      	beq.n	80150a0 <rcl_node_resolve_name+0xac>
 801509e:	2701      	movs	r7, #1
 80150a0:	a808      	add	r0, sp, #32
 80150a2:	f002 fbc9 	bl	8017838 <rcutils_string_map_fini>
 80150a6:	2800      	cmp	r0, #0
 80150a8:	d13d      	bne.n	8015126 <rcl_node_resolve_name+0x132>
 80150aa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80150ac:	4659      	mov	r1, fp
 80150ae:	47d0      	blx	sl
 80150b0:	4659      	mov	r1, fp
 80150b2:	4620      	mov	r0, r4
 80150b4:	47d0      	blx	sl
 80150b6:	f1b8 0f00 	cmp.w	r8, #0
 80150ba:	d0dc      	beq.n	8015076 <rcl_node_resolve_name+0x82>
 80150bc:	2f67      	cmp	r7, #103	@ 0x67
 80150be:	bf08      	it	eq
 80150c0:	2768      	moveq	r7, #104	@ 0x68
 80150c2:	e7d8      	b.n	8015076 <rcl_node_resolve_name+0x82>
 80150c4:	ab09      	add	r3, sp, #36	@ 0x24
 80150c6:	9305      	str	r3, [sp, #20]
 80150c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80150ca:	46ec      	mov	ip, sp
 80150cc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80150d0:	682b      	ldr	r3, [r5, #0]
 80150d2:	f8cc 3000 	str.w	r3, [ip]
 80150d6:	464a      	mov	r2, r9
 80150d8:	4631      	mov	r1, r6
 80150da:	4620      	mov	r0, r4
 80150dc:	ab08      	add	r3, sp, #32
 80150de:	f004 fc4b 	bl	8019978 <rcl_expand_topic_name>
 80150e2:	4607      	mov	r7, r0
 80150e4:	b9b8      	cbnz	r0, 8015116 <rcl_node_resolve_name+0x122>
 80150e6:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 80150e8:	9009      	str	r0, [sp, #36]	@ 0x24
 80150ea:	4602      	mov	r2, r0
 80150ec:	a90a      	add	r1, sp, #40	@ 0x28
 80150ee:	4620      	mov	r0, r4
 80150f0:	f002 fcd2 	bl	8017a98 <rmw_validate_full_topic_name>
 80150f4:	b988      	cbnz	r0, 801511a <rcl_node_resolve_name+0x126>
 80150f6:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 80150f8:	b9d5      	cbnz	r5, 8015130 <rcl_node_resolve_name+0x13c>
 80150fa:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80150fc:	a808      	add	r0, sp, #32
 80150fe:	601c      	str	r4, [r3, #0]
 8015100:	f002 fb9a 	bl	8017838 <rcutils_string_map_fini>
 8015104:	4607      	mov	r7, r0
 8015106:	b1a8      	cbz	r0, 8015134 <rcl_node_resolve_name+0x140>
 8015108:	f7fa f83e 	bl	800f188 <rcutils_get_error_string>
 801510c:	462c      	mov	r4, r5
 801510e:	f7fa f853 	bl	800f1b8 <rcutils_reset_error>
 8015112:	2701      	movs	r7, #1
 8015114:	e7c9      	b.n	80150aa <rcl_node_resolve_name+0xb6>
 8015116:	9c07      	ldr	r4, [sp, #28]
 8015118:	e7c2      	b.n	80150a0 <rcl_node_resolve_name+0xac>
 801511a:	f7fa f835 	bl	800f188 <rcutils_get_error_string>
 801511e:	2701      	movs	r7, #1
 8015120:	f7fa f84a 	bl	800f1b8 <rcutils_reset_error>
 8015124:	e7bc      	b.n	80150a0 <rcl_node_resolve_name+0xac>
 8015126:	f7fa f82f 	bl	800f188 <rcutils_get_error_string>
 801512a:	f7fa f845 	bl	800f1b8 <rcutils_reset_error>
 801512e:	e7bc      	b.n	80150aa <rcl_node_resolve_name+0xb6>
 8015130:	2767      	movs	r7, #103	@ 0x67
 8015132:	e7b5      	b.n	80150a0 <rcl_node_resolve_name+0xac>
 8015134:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8015136:	4659      	mov	r1, fp
 8015138:	47d0      	blx	sl
 801513a:	4659      	mov	r1, fp
 801513c:	4638      	mov	r0, r7
 801513e:	47d0      	blx	sl
 8015140:	e799      	b.n	8015076 <rcl_node_resolve_name+0x82>
 8015142:	bf00      	nop

08015144 <rcl_service_get_rmw_handle>:
 8015144:	b118      	cbz	r0, 801514e <rcl_service_get_rmw_handle+0xa>
 8015146:	6800      	ldr	r0, [r0, #0]
 8015148:	b108      	cbz	r0, 801514e <rcl_service_get_rmw_handle+0xa>
 801514a:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 801514e:	4770      	bx	lr

08015150 <rcl_take_request>:
 8015150:	b570      	push	{r4, r5, r6, lr}
 8015152:	468e      	mov	lr, r1
 8015154:	460c      	mov	r4, r1
 8015156:	4616      	mov	r6, r2
 8015158:	4605      	mov	r5, r0
 801515a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801515e:	b08c      	sub	sp, #48	@ 0x30
 8015160:	f10d 0c18 	add.w	ip, sp, #24
 8015164:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015168:	e89e 0003 	ldmia.w	lr, {r0, r1}
 801516c:	e88c 0003 	stmia.w	ip, {r0, r1}
 8015170:	b30d      	cbz	r5, 80151b6 <rcl_take_request+0x66>
 8015172:	682b      	ldr	r3, [r5, #0]
 8015174:	b1fb      	cbz	r3, 80151b6 <rcl_take_request+0x66>
 8015176:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 801517a:	b1e0      	cbz	r0, 80151b6 <rcl_take_request+0x66>
 801517c:	b336      	cbz	r6, 80151cc <rcl_take_request+0x7c>
 801517e:	2300      	movs	r3, #0
 8015180:	f88d 3007 	strb.w	r3, [sp, #7]
 8015184:	4632      	mov	r2, r6
 8015186:	f10d 0307 	add.w	r3, sp, #7
 801518a:	a902      	add	r1, sp, #8
 801518c:	f002 ffda 	bl	8018144 <rmw_take_request>
 8015190:	4605      	mov	r5, r0
 8015192:	b198      	cbz	r0, 80151bc <rcl_take_request+0x6c>
 8015194:	280a      	cmp	r0, #10
 8015196:	bf18      	it	ne
 8015198:	2501      	movne	r5, #1
 801519a:	f10d 0e18 	add.w	lr, sp, #24
 801519e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80151a2:	46a4      	mov	ip, r4
 80151a4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80151a8:	e89e 0003 	ldmia.w	lr, {r0, r1}
 80151ac:	e88c 0003 	stmia.w	ip, {r0, r1}
 80151b0:	4628      	mov	r0, r5
 80151b2:	b00c      	add	sp, #48	@ 0x30
 80151b4:	bd70      	pop	{r4, r5, r6, pc}
 80151b6:	f44f 7516 	mov.w	r5, #600	@ 0x258
 80151ba:	e7ee      	b.n	801519a <rcl_take_request+0x4a>
 80151bc:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80151c0:	f240 2359 	movw	r3, #601	@ 0x259
 80151c4:	2a00      	cmp	r2, #0
 80151c6:	bf08      	it	eq
 80151c8:	461d      	moveq	r5, r3
 80151ca:	e7e6      	b.n	801519a <rcl_take_request+0x4a>
 80151cc:	250b      	movs	r5, #11
 80151ce:	e7e4      	b.n	801519a <rcl_take_request+0x4a>

080151d0 <rcl_send_response>:
 80151d0:	b170      	cbz	r0, 80151f0 <rcl_send_response+0x20>
 80151d2:	6800      	ldr	r0, [r0, #0]
 80151d4:	b160      	cbz	r0, 80151f0 <rcl_send_response+0x20>
 80151d6:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 80151da:	b148      	cbz	r0, 80151f0 <rcl_send_response+0x20>
 80151dc:	b159      	cbz	r1, 80151f6 <rcl_send_response+0x26>
 80151de:	b510      	push	{r4, lr}
 80151e0:	b15a      	cbz	r2, 80151fa <rcl_send_response+0x2a>
 80151e2:	f003 f80d 	bl	8018200 <rmw_send_response>
 80151e6:	b110      	cbz	r0, 80151ee <rcl_send_response+0x1e>
 80151e8:	2802      	cmp	r0, #2
 80151ea:	bf18      	it	ne
 80151ec:	2001      	movne	r0, #1
 80151ee:	bd10      	pop	{r4, pc}
 80151f0:	f44f 7016 	mov.w	r0, #600	@ 0x258
 80151f4:	4770      	bx	lr
 80151f6:	200b      	movs	r0, #11
 80151f8:	4770      	bx	lr
 80151fa:	200b      	movs	r0, #11
 80151fc:	bd10      	pop	{r4, pc}
 80151fe:	bf00      	nop

08015200 <rcl_service_is_valid>:
 8015200:	b130      	cbz	r0, 8015210 <rcl_service_is_valid+0x10>
 8015202:	6800      	ldr	r0, [r0, #0]
 8015204:	b120      	cbz	r0, 8015210 <rcl_service_is_valid+0x10>
 8015206:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 801520a:	3800      	subs	r0, #0
 801520c:	bf18      	it	ne
 801520e:	2001      	movne	r0, #1
 8015210:	4770      	bx	lr
 8015212:	bf00      	nop

08015214 <rcl_get_zero_initialized_subscription>:
 8015214:	4b01      	ldr	r3, [pc, #4]	@ (801521c <rcl_get_zero_initialized_subscription+0x8>)
 8015216:	6818      	ldr	r0, [r3, #0]
 8015218:	4770      	bx	lr
 801521a:	bf00      	nop
 801521c:	0801e14c 	.word	0x0801e14c

08015220 <rcl_subscription_init>:
 8015220:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015224:	b089      	sub	sp, #36	@ 0x24
 8015226:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8015228:	b1d6      	cbz	r6, 8015260 <rcl_subscription_init+0x40>
 801522a:	f106 0950 	add.w	r9, r6, #80	@ 0x50
 801522e:	4604      	mov	r4, r0
 8015230:	4648      	mov	r0, r9
 8015232:	460d      	mov	r5, r1
 8015234:	4690      	mov	r8, r2
 8015236:	461f      	mov	r7, r3
 8015238:	f7f9 ff98 	bl	800f16c <rcutils_allocator_is_valid>
 801523c:	b180      	cbz	r0, 8015260 <rcl_subscription_init+0x40>
 801523e:	b17c      	cbz	r4, 8015260 <rcl_subscription_init+0x40>
 8015240:	4628      	mov	r0, r5
 8015242:	f7ff fe83 	bl	8014f4c <rcl_node_is_valid>
 8015246:	2800      	cmp	r0, #0
 8015248:	d054      	beq.n	80152f4 <rcl_subscription_init+0xd4>
 801524a:	f1b8 0f00 	cmp.w	r8, #0
 801524e:	d007      	beq.n	8015260 <rcl_subscription_init+0x40>
 8015250:	b137      	cbz	r7, 8015260 <rcl_subscription_init+0x40>
 8015252:	6823      	ldr	r3, [r4, #0]
 8015254:	b14b      	cbz	r3, 801526a <rcl_subscription_init+0x4a>
 8015256:	2764      	movs	r7, #100	@ 0x64
 8015258:	4638      	mov	r0, r7
 801525a:	b009      	add	sp, #36	@ 0x24
 801525c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015260:	270b      	movs	r7, #11
 8015262:	4638      	mov	r0, r7
 8015264:	b009      	add	sp, #36	@ 0x24
 8015266:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801526a:	e9cd 3303 	strd	r3, r3, [sp, #12]
 801526e:	aa07      	add	r2, sp, #28
 8015270:	9205      	str	r2, [sp, #20]
 8015272:	9307      	str	r3, [sp, #28]
 8015274:	f106 0358 	add.w	r3, r6, #88	@ 0x58
 8015278:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801527c:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8015280:	4639      	mov	r1, r7
 8015282:	e899 000c 	ldmia.w	r9, {r2, r3}
 8015286:	4628      	mov	r0, r5
 8015288:	f7ff feb4 	bl	8014ff4 <rcl_node_resolve_name>
 801528c:	4607      	mov	r7, r0
 801528e:	2800      	cmp	r0, #0
 8015290:	d15f      	bne.n	8015352 <rcl_subscription_init+0x132>
 8015292:	e9d6 3217 	ldrd	r3, r2, [r6, #92]	@ 0x5c
 8015296:	21c8      	movs	r1, #200	@ 0xc8
 8015298:	2001      	movs	r0, #1
 801529a:	4798      	blx	r3
 801529c:	6020      	str	r0, [r4, #0]
 801529e:	2800      	cmp	r0, #0
 80152a0:	d05d      	beq.n	801535e <rcl_subscription_init+0x13e>
 80152a2:	4628      	mov	r0, r5
 80152a4:	f7ff fe74 	bl	8014f90 <rcl_node_get_rmw_handle>
 80152a8:	f106 0364 	add.w	r3, r6, #100	@ 0x64
 80152ac:	9300      	str	r3, [sp, #0]
 80152ae:	9a07      	ldr	r2, [sp, #28]
 80152b0:	6827      	ldr	r7, [r4, #0]
 80152b2:	4641      	mov	r1, r8
 80152b4:	4633      	mov	r3, r6
 80152b6:	f7fa fd9f 	bl	800fdf8 <rmw_create_subscription>
 80152ba:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0
 80152be:	6827      	ldr	r7, [r4, #0]
 80152c0:	f8d7 00c0 	ldr.w	r0, [r7, #192]	@ 0xc0
 80152c4:	b348      	cbz	r0, 801531a <rcl_subscription_init+0xfa>
 80152c6:	f107 0170 	add.w	r1, r7, #112	@ 0x70
 80152ca:	f7fa fe77 	bl	800ffbc <rmw_subscription_get_actual_qos>
 80152ce:	4607      	mov	r7, r0
 80152d0:	b9a8      	cbnz	r0, 80152fe <rcl_subscription_init+0xde>
 80152d2:	6820      	ldr	r0, [r4, #0]
 80152d4:	f896 3048 	ldrb.w	r3, [r6, #72]	@ 0x48
 80152d8:	f880 30b8 	strb.w	r3, [r0, #184]	@ 0xb8
 80152dc:	2270      	movs	r2, #112	@ 0x70
 80152de:	4631      	mov	r1, r6
 80152e0:	f005 fd05 	bl	801acee <memcpy>
 80152e4:	9807      	ldr	r0, [sp, #28]
 80152e6:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 80152e8:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 80152ea:	4798      	blx	r3
 80152ec:	4638      	mov	r0, r7
 80152ee:	b009      	add	sp, #36	@ 0x24
 80152f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80152f4:	27c8      	movs	r7, #200	@ 0xc8
 80152f6:	4638      	mov	r0, r7
 80152f8:	b009      	add	sp, #36	@ 0x24
 80152fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80152fe:	6827      	ldr	r7, [r4, #0]
 8015300:	b32f      	cbz	r7, 801534e <rcl_subscription_init+0x12e>
 8015302:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8015306:	b14b      	cbz	r3, 801531c <rcl_subscription_init+0xfc>
 8015308:	4628      	mov	r0, r5
 801530a:	f7ff fe41 	bl	8014f90 <rcl_node_get_rmw_handle>
 801530e:	6823      	ldr	r3, [r4, #0]
 8015310:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8015314:	f7fa fe62 	bl	800ffdc <rmw_destroy_subscription>
 8015318:	6827      	ldr	r7, [r4, #0]
 801531a:	b197      	cbz	r7, 8015342 <rcl_subscription_init+0x122>
 801531c:	f107 0550 	add.w	r5, r7, #80	@ 0x50
 8015320:	4628      	mov	r0, r5
 8015322:	f7f9 ff23 	bl	800f16c <rcutils_allocator_is_valid>
 8015326:	b158      	cbz	r0, 8015340 <rcl_subscription_init+0x120>
 8015328:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 801532a:	b148      	cbz	r0, 8015340 <rcl_subscription_init+0x120>
 801532c:	4629      	mov	r1, r5
 801532e:	f002 fb07 	bl	8017940 <rmw_subscription_content_filter_options_fini>
 8015332:	4605      	mov	r5, r0
 8015334:	b9b8      	cbnz	r0, 8015366 <rcl_subscription_init+0x146>
 8015336:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8015338:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 801533a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 801533c:	4798      	blx	r3
 801533e:	66fd      	str	r5, [r7, #108]	@ 0x6c
 8015340:	6827      	ldr	r7, [r4, #0]
 8015342:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 8015344:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 8015346:	4638      	mov	r0, r7
 8015348:	4798      	blx	r3
 801534a:	2300      	movs	r3, #0
 801534c:	6023      	str	r3, [r4, #0]
 801534e:	2701      	movs	r7, #1
 8015350:	e7c8      	b.n	80152e4 <rcl_subscription_init+0xc4>
 8015352:	2867      	cmp	r0, #103	@ 0x67
 8015354:	d0c6      	beq.n	80152e4 <rcl_subscription_init+0xc4>
 8015356:	2869      	cmp	r0, #105	@ 0x69
 8015358:	d003      	beq.n	8015362 <rcl_subscription_init+0x142>
 801535a:	280a      	cmp	r0, #10
 801535c:	d1f7      	bne.n	801534e <rcl_subscription_init+0x12e>
 801535e:	270a      	movs	r7, #10
 8015360:	e7c0      	b.n	80152e4 <rcl_subscription_init+0xc4>
 8015362:	2767      	movs	r7, #103	@ 0x67
 8015364:	e7be      	b.n	80152e4 <rcl_subscription_init+0xc4>
 8015366:	f7ff fb0d 	bl	8014984 <rcl_convert_rmw_ret_to_rcl_ret>
 801536a:	6827      	ldr	r7, [r4, #0]
 801536c:	e7e9      	b.n	8015342 <rcl_subscription_init+0x122>
 801536e:	bf00      	nop

08015370 <rcl_subscription_get_default_options>:
 8015370:	b570      	push	{r4, r5, r6, lr}
 8015372:	4d14      	ldr	r5, [pc, #80]	@ (80153c4 <rcl_subscription_get_default_options+0x54>)
 8015374:	4914      	ldr	r1, [pc, #80]	@ (80153c8 <rcl_subscription_get_default_options+0x58>)
 8015376:	b08a      	sub	sp, #40	@ 0x28
 8015378:	4604      	mov	r4, r0
 801537a:	2250      	movs	r2, #80	@ 0x50
 801537c:	4628      	mov	r0, r5
 801537e:	f005 fcb6 	bl	801acee <memcpy>
 8015382:	a804      	add	r0, sp, #16
 8015384:	f7f9 fee4 	bl	800f150 <rcutils_get_default_allocator>
 8015388:	f10d 0c10 	add.w	ip, sp, #16
 801538c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8015390:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 8015394:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8015398:	466e      	mov	r6, sp
 801539a:	f8dc 3000 	ldr.w	r3, [ip]
 801539e:	f8ce 3000 	str.w	r3, [lr]
 80153a2:	4630      	mov	r0, r6
 80153a4:	f002 fae6 	bl	8017974 <rmw_get_default_subscription_options>
 80153a8:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 80153ac:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 80153b0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80153b4:	2270      	movs	r2, #112	@ 0x70
 80153b6:	4629      	mov	r1, r5
 80153b8:	4620      	mov	r0, r4
 80153ba:	f005 fc98 	bl	801acee <memcpy>
 80153be:	4620      	mov	r0, r4
 80153c0:	b00a      	add	sp, #40	@ 0x28
 80153c2:	bd70      	pop	{r4, r5, r6, pc}
 80153c4:	2000b380 	.word	0x2000b380
 80153c8:	0801e150 	.word	0x0801e150

080153cc <rcl_take>:
 80153cc:	2800      	cmp	r0, #0
 80153ce:	d04a      	beq.n	8015466 <rcl_take+0x9a>
 80153d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80153d4:	4604      	mov	r4, r0
 80153d6:	6800      	ldr	r0, [r0, #0]
 80153d8:	b0a4      	sub	sp, #144	@ 0x90
 80153da:	2800      	cmp	r0, #0
 80153dc:	d03b      	beq.n	8015456 <rcl_take+0x8a>
 80153de:	461f      	mov	r7, r3
 80153e0:	f8d0 30c0 	ldr.w	r3, [r0, #192]	@ 0xc0
 80153e4:	2b00      	cmp	r3, #0
 80153e6:	d036      	beq.n	8015456 <rcl_take+0x8a>
 80153e8:	460e      	mov	r6, r1
 80153ea:	2900      	cmp	r1, #0
 80153ec:	d039      	beq.n	8015462 <rcl_take+0x96>
 80153ee:	4615      	mov	r5, r2
 80153f0:	2a00      	cmp	r2, #0
 80153f2:	d03c      	beq.n	801546e <rcl_take+0xa2>
 80153f4:	a802      	add	r0, sp, #8
 80153f6:	f002 fb47 	bl	8017a88 <rmw_get_zero_initialized_message_info>
 80153fa:	f10d 0c08 	add.w	ip, sp, #8
 80153fe:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8015402:	46ae      	mov	lr, r5
 8015404:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8015408:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801540c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8015410:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8015414:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8015418:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 801541c:	f04f 0800 	mov.w	r8, #0
 8015420:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 8015424:	f88d 804f 	strb.w	r8, [sp, #79]	@ 0x4f
 8015428:	6822      	ldr	r2, [r4, #0]
 801542a:	462b      	mov	r3, r5
 801542c:	f8d2 00c0 	ldr.w	r0, [r2, #192]	@ 0xc0
 8015430:	9700      	str	r7, [sp, #0]
 8015432:	f10d 024f 	add.w	r2, sp, #79	@ 0x4f
 8015436:	4631      	mov	r1, r6
 8015438:	f002 ff88 	bl	801834c <rmw_take_with_info>
 801543c:	4603      	mov	r3, r0
 801543e:	b9c0      	cbnz	r0, 8015472 <rcl_take+0xa6>
 8015440:	f89d 104f 	ldrb.w	r1, [sp, #79]	@ 0x4f
 8015444:	f240 1291 	movw	r2, #401	@ 0x191
 8015448:	2900      	cmp	r1, #0
 801544a:	bf08      	it	eq
 801544c:	4613      	moveq	r3, r2
 801544e:	4618      	mov	r0, r3
 8015450:	b024      	add	sp, #144	@ 0x90
 8015452:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015456:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 801545a:	4618      	mov	r0, r3
 801545c:	b024      	add	sp, #144	@ 0x90
 801545e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015462:	230b      	movs	r3, #11
 8015464:	e7f3      	b.n	801544e <rcl_take+0x82>
 8015466:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 801546a:	4618      	mov	r0, r3
 801546c:	4770      	bx	lr
 801546e:	ad14      	add	r5, sp, #80	@ 0x50
 8015470:	e7c0      	b.n	80153f4 <rcl_take+0x28>
 8015472:	f7ff fa87 	bl	8014984 <rcl_convert_rmw_ret_to_rcl_ret>
 8015476:	4603      	mov	r3, r0
 8015478:	e7e9      	b.n	801544e <rcl_take+0x82>
 801547a:	bf00      	nop

0801547c <rcl_subscription_get_rmw_handle>:
 801547c:	b118      	cbz	r0, 8015486 <rcl_subscription_get_rmw_handle+0xa>
 801547e:	6800      	ldr	r0, [r0, #0]
 8015480:	b108      	cbz	r0, 8015486 <rcl_subscription_get_rmw_handle+0xa>
 8015482:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 8015486:	4770      	bx	lr

08015488 <rcl_subscription_is_valid>:
 8015488:	b130      	cbz	r0, 8015498 <rcl_subscription_is_valid+0x10>
 801548a:	6800      	ldr	r0, [r0, #0]
 801548c:	b120      	cbz	r0, 8015498 <rcl_subscription_is_valid+0x10>
 801548e:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 8015492:	3800      	subs	r0, #0
 8015494:	bf18      	it	ne
 8015496:	2001      	movne	r0, #1
 8015498:	4770      	bx	lr
 801549a:	bf00      	nop

0801549c <rcl_get_system_time>:
 801549c:	4608      	mov	r0, r1
 801549e:	f7f9 bea7 	b.w	800f1f0 <rcutils_system_time_now>
 80154a2:	bf00      	nop

080154a4 <rcl_get_steady_time>:
 80154a4:	4608      	mov	r0, r1
 80154a6:	f7f9 becb 	b.w	800f240 <rcutils_steady_time_now>
 80154aa:	bf00      	nop

080154ac <rcl_get_ros_time>:
 80154ac:	7a03      	ldrb	r3, [r0, #8]
 80154ae:	b510      	push	{r4, lr}
 80154b0:	460c      	mov	r4, r1
 80154b2:	b133      	cbz	r3, 80154c2 <rcl_get_ros_time+0x16>
 80154b4:	2105      	movs	r1, #5
 80154b6:	f001 fef3 	bl	80172a0 <__atomic_load_8>
 80154ba:	e9c4 0100 	strd	r0, r1, [r4]
 80154be:	2000      	movs	r0, #0
 80154c0:	bd10      	pop	{r4, pc}
 80154c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80154c6:	4608      	mov	r0, r1
 80154c8:	f7f9 be92 	b.w	800f1f0 <rcutils_system_time_now>

080154cc <rcl_clock_init>:
 80154cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80154ce:	4605      	mov	r5, r0
 80154d0:	4610      	mov	r0, r2
 80154d2:	4614      	mov	r4, r2
 80154d4:	460e      	mov	r6, r1
 80154d6:	f7f9 fe49 	bl	800f16c <rcutils_allocator_is_valid>
 80154da:	b128      	cbz	r0, 80154e8 <rcl_clock_init+0x1c>
 80154dc:	2d03      	cmp	r5, #3
 80154de:	d803      	bhi.n	80154e8 <rcl_clock_init+0x1c>
 80154e0:	e8df f005 	tbb	[pc, r5]
 80154e4:	06532e1d 	.word	0x06532e1d
 80154e8:	f04f 0c0b 	mov.w	ip, #11
 80154ec:	4660      	mov	r0, ip
 80154ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80154f0:	2e00      	cmp	r6, #0
 80154f2:	d0f9      	beq.n	80154e8 <rcl_clock_init+0x1c>
 80154f4:	2c00      	cmp	r4, #0
 80154f6:	d0f7      	beq.n	80154e8 <rcl_clock_init+0x1c>
 80154f8:	2300      	movs	r3, #0
 80154fa:	e9c6 3301 	strd	r3, r3, [r6, #4]
 80154fe:	f8df e0b4 	ldr.w	lr, [pc, #180]	@ 80155b4 <rcl_clock_init+0xe8>
 8015502:	6133      	str	r3, [r6, #16]
 8015504:	f106 0514 	add.w	r5, r6, #20
 8015508:	469c      	mov	ip, r3
 801550a:	2703      	movs	r7, #3
 801550c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801550e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8015510:	6823      	ldr	r3, [r4, #0]
 8015512:	602b      	str	r3, [r5, #0]
 8015514:	7037      	strb	r7, [r6, #0]
 8015516:	f8c6 e00c 	str.w	lr, [r6, #12]
 801551a:	4660      	mov	r0, ip
 801551c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801551e:	2e00      	cmp	r6, #0
 8015520:	d0e2      	beq.n	80154e8 <rcl_clock_init+0x1c>
 8015522:	2300      	movs	r3, #0
 8015524:	7033      	strb	r3, [r6, #0]
 8015526:	e9c6 3301 	strd	r3, r3, [r6, #4]
 801552a:	e9c6 3303 	strd	r3, r3, [r6, #12]
 801552e:	469c      	mov	ip, r3
 8015530:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015532:	f106 0514 	add.w	r5, r6, #20
 8015536:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8015538:	6823      	ldr	r3, [r4, #0]
 801553a:	602b      	str	r3, [r5, #0]
 801553c:	4660      	mov	r0, ip
 801553e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015540:	2e00      	cmp	r6, #0
 8015542:	d0d1      	beq.n	80154e8 <rcl_clock_init+0x1c>
 8015544:	2c00      	cmp	r4, #0
 8015546:	d0cf      	beq.n	80154e8 <rcl_clock_init+0x1c>
 8015548:	2700      	movs	r7, #0
 801554a:	7037      	strb	r7, [r6, #0]
 801554c:	46a4      	mov	ip, r4
 801554e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8015552:	f106 0514 	add.w	r5, r6, #20
 8015556:	e9c6 7701 	strd	r7, r7, [r6, #4]
 801555a:	e9c6 7703 	strd	r7, r7, [r6, #12]
 801555e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8015560:	f8dc 3000 	ldr.w	r3, [ip]
 8015564:	602b      	str	r3, [r5, #0]
 8015566:	6921      	ldr	r1, [r4, #16]
 8015568:	6823      	ldr	r3, [r4, #0]
 801556a:	2010      	movs	r0, #16
 801556c:	4798      	blx	r3
 801556e:	6130      	str	r0, [r6, #16]
 8015570:	b1d0      	cbz	r0, 80155a8 <rcl_clock_init+0xdc>
 8015572:	2200      	movs	r2, #0
 8015574:	2300      	movs	r3, #0
 8015576:	e9c0 2300 	strd	r2, r3, [r0]
 801557a:	2301      	movs	r3, #1
 801557c:	7207      	strb	r7, [r0, #8]
 801557e:	4a0c      	ldr	r2, [pc, #48]	@ (80155b0 <rcl_clock_init+0xe4>)
 8015580:	7033      	strb	r3, [r6, #0]
 8015582:	46bc      	mov	ip, r7
 8015584:	60f2      	str	r2, [r6, #12]
 8015586:	4660      	mov	r0, ip
 8015588:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801558a:	2e00      	cmp	r6, #0
 801558c:	d0ac      	beq.n	80154e8 <rcl_clock_init+0x1c>
 801558e:	2c00      	cmp	r4, #0
 8015590:	d0aa      	beq.n	80154e8 <rcl_clock_init+0x1c>
 8015592:	2300      	movs	r3, #0
 8015594:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8015598:	f8df e01c 	ldr.w	lr, [pc, #28]	@ 80155b8 <rcl_clock_init+0xec>
 801559c:	6133      	str	r3, [r6, #16]
 801559e:	f106 0514 	add.w	r5, r6, #20
 80155a2:	469c      	mov	ip, r3
 80155a4:	2702      	movs	r7, #2
 80155a6:	e7b1      	b.n	801550c <rcl_clock_init+0x40>
 80155a8:	f04f 0c0a 	mov.w	ip, #10
 80155ac:	e79e      	b.n	80154ec <rcl_clock_init+0x20>
 80155ae:	bf00      	nop
 80155b0:	080154ad 	.word	0x080154ad
 80155b4:	080154a5 	.word	0x080154a5
 80155b8:	0801549d 	.word	0x0801549d

080155bc <rcl_clock_get_now>:
 80155bc:	b140      	cbz	r0, 80155d0 <rcl_clock_get_now+0x14>
 80155be:	b139      	cbz	r1, 80155d0 <rcl_clock_get_now+0x14>
 80155c0:	7803      	ldrb	r3, [r0, #0]
 80155c2:	b11b      	cbz	r3, 80155cc <rcl_clock_get_now+0x10>
 80155c4:	68c3      	ldr	r3, [r0, #12]
 80155c6:	b10b      	cbz	r3, 80155cc <rcl_clock_get_now+0x10>
 80155c8:	6900      	ldr	r0, [r0, #16]
 80155ca:	4718      	bx	r3
 80155cc:	2001      	movs	r0, #1
 80155ce:	4770      	bx	lr
 80155d0:	200b      	movs	r0, #11
 80155d2:	4770      	bx	lr

080155d4 <rcl_clock_add_jump_callback>:
 80155d4:	b082      	sub	sp, #8
 80155d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80155da:	a906      	add	r1, sp, #24
 80155dc:	e881 000c 	stmia.w	r1, {r2, r3}
 80155e0:	e9dd 650c 	ldrd	r6, r5, [sp, #48]	@ 0x30
 80155e4:	b320      	cbz	r0, 8015630 <rcl_clock_add_jump_callback+0x5c>
 80155e6:	4604      	mov	r4, r0
 80155e8:	3014      	adds	r0, #20
 80155ea:	f7f9 fdbf 	bl	800f16c <rcutils_allocator_is_valid>
 80155ee:	b1f8      	cbz	r0, 8015630 <rcl_clock_add_jump_callback+0x5c>
 80155f0:	b1f6      	cbz	r6, 8015630 <rcl_clock_add_jump_callback+0x5c>
 80155f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80155f4:	2b00      	cmp	r3, #0
 80155f6:	db1b      	blt.n	8015630 <rcl_clock_add_jump_callback+0x5c>
 80155f8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 80155fc:	2a01      	cmp	r2, #1
 80155fe:	f173 0300 	sbcs.w	r3, r3, #0
 8015602:	da15      	bge.n	8015630 <rcl_clock_add_jump_callback+0x5c>
 8015604:	e9d4 0701 	ldrd	r0, r7, [r4, #4]
 8015608:	2f00      	cmp	r7, #0
 801560a:	d042      	beq.n	8015692 <rcl_clock_add_jump_callback+0xbe>
 801560c:	2300      	movs	r3, #0
 801560e:	4602      	mov	r2, r0
 8015610:	e003      	b.n	801561a <rcl_clock_add_jump_callback+0x46>
 8015612:	42bb      	cmp	r3, r7
 8015614:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 8015618:	d011      	beq.n	801563e <rcl_clock_add_jump_callback+0x6a>
 801561a:	6811      	ldr	r1, [r2, #0]
 801561c:	42b1      	cmp	r1, r6
 801561e:	f103 0301 	add.w	r3, r3, #1
 8015622:	d1f6      	bne.n	8015612 <rcl_clock_add_jump_callback+0x3e>
 8015624:	6a11      	ldr	r1, [r2, #32]
 8015626:	42a9      	cmp	r1, r5
 8015628:	d1f3      	bne.n	8015612 <rcl_clock_add_jump_callback+0x3e>
 801562a:	f04f 0e01 	mov.w	lr, #1
 801562e:	e001      	b.n	8015634 <rcl_clock_add_jump_callback+0x60>
 8015630:	f04f 0e0b 	mov.w	lr, #11
 8015634:	4670      	mov	r0, lr
 8015636:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801563a:	b002      	add	sp, #8
 801563c:	4770      	bx	lr
 801563e:	3301      	adds	r3, #1
 8015640:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8015644:	00d9      	lsls	r1, r3, #3
 8015646:	69e3      	ldr	r3, [r4, #28]
 8015648:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 801564a:	4798      	blx	r3
 801564c:	b1f0      	cbz	r0, 801568c <rcl_clock_add_jump_callback+0xb8>
 801564e:	68a3      	ldr	r3, [r4, #8]
 8015650:	6060      	str	r0, [r4, #4]
 8015652:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8015656:	f10d 0c18 	add.w	ip, sp, #24
 801565a:	f840 6032 	str.w	r6, [r0, r2, lsl #3]
 801565e:	f103 0801 	add.w	r8, r3, #1
 8015662:	eb00 06c2 	add.w	r6, r0, r2, lsl #3
 8015666:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801566a:	f106 0708 	add.w	r7, r6, #8
 801566e:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8015670:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8015674:	f04f 0e00 	mov.w	lr, #0
 8015678:	e887 0003 	stmia.w	r7, {r0, r1}
 801567c:	6235      	str	r5, [r6, #32]
 801567e:	4670      	mov	r0, lr
 8015680:	f8c4 8008 	str.w	r8, [r4, #8]
 8015684:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015688:	b002      	add	sp, #8
 801568a:	4770      	bx	lr
 801568c:	f04f 0e0a 	mov.w	lr, #10
 8015690:	e7d0      	b.n	8015634 <rcl_clock_add_jump_callback+0x60>
 8015692:	2128      	movs	r1, #40	@ 0x28
 8015694:	e7d7      	b.n	8015646 <rcl_clock_add_jump_callback+0x72>
 8015696:	bf00      	nop

08015698 <rcl_clock_remove_jump_callback>:
 8015698:	2800      	cmp	r0, #0
 801569a:	d057      	beq.n	801574c <rcl_clock_remove_jump_callback+0xb4>
 801569c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80156a0:	4605      	mov	r5, r0
 80156a2:	3014      	adds	r0, #20
 80156a4:	4688      	mov	r8, r1
 80156a6:	4692      	mov	sl, r2
 80156a8:	f7f9 fd60 	bl	800f16c <rcutils_allocator_is_valid>
 80156ac:	2800      	cmp	r0, #0
 80156ae:	d03b      	beq.n	8015728 <rcl_clock_remove_jump_callback+0x90>
 80156b0:	f1b8 0f00 	cmp.w	r8, #0
 80156b4:	d038      	beq.n	8015728 <rcl_clock_remove_jump_callback+0x90>
 80156b6:	68ae      	ldr	r6, [r5, #8]
 80156b8:	b166      	cbz	r6, 80156d4 <rcl_clock_remove_jump_callback+0x3c>
 80156ba:	f8d5 9004 	ldr.w	r9, [r5, #4]
 80156be:	eb06 0786 	add.w	r7, r6, r6, lsl #2
 80156c2:	eb09 07c7 	add.w	r7, r9, r7, lsl #3
 80156c6:	464c      	mov	r4, r9
 80156c8:	6823      	ldr	r3, [r4, #0]
 80156ca:	4543      	cmp	r3, r8
 80156cc:	d005      	beq.n	80156da <rcl_clock_remove_jump_callback+0x42>
 80156ce:	3428      	adds	r4, #40	@ 0x28
 80156d0:	42a7      	cmp	r7, r4
 80156d2:	d1f9      	bne.n	80156c8 <rcl_clock_remove_jump_callback+0x30>
 80156d4:	2001      	movs	r0, #1
 80156d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80156da:	6a23      	ldr	r3, [r4, #32]
 80156dc:	3428      	adds	r4, #40	@ 0x28
 80156de:	42bc      	cmp	r4, r7
 80156e0:	d02d      	beq.n	801573e <rcl_clock_remove_jump_callback+0xa6>
 80156e2:	4553      	cmp	r3, sl
 80156e4:	d1f0      	bne.n	80156c8 <rcl_clock_remove_jump_callback+0x30>
 80156e6:	46a6      	mov	lr, r4
 80156e8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80156ec:	f1a4 0c28 	sub.w	ip, r4, #40	@ 0x28
 80156f0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80156f4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80156f8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80156fc:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8015700:	3428      	adds	r4, #40	@ 0x28
 8015702:	42a7      	cmp	r7, r4
 8015704:	e88c 0003 	stmia.w	ip, {r0, r1}
 8015708:	d1ed      	bne.n	80156e6 <rcl_clock_remove_jump_callback+0x4e>
 801570a:	3e01      	subs	r6, #1
 801570c:	60ae      	str	r6, [r5, #8]
 801570e:	b176      	cbz	r6, 801572e <rcl_clock_remove_jump_callback+0x96>
 8015710:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 8015714:	69eb      	ldr	r3, [r5, #28]
 8015716:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
 8015718:	00f1      	lsls	r1, r6, #3
 801571a:	4648      	mov	r0, r9
 801571c:	4798      	blx	r3
 801571e:	b1b8      	cbz	r0, 8015750 <rcl_clock_remove_jump_callback+0xb8>
 8015720:	6068      	str	r0, [r5, #4]
 8015722:	2000      	movs	r0, #0
 8015724:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015728:	200b      	movs	r0, #11
 801572a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801572e:	4648      	mov	r0, r9
 8015730:	69ab      	ldr	r3, [r5, #24]
 8015732:	6a69      	ldr	r1, [r5, #36]	@ 0x24
 8015734:	4798      	blx	r3
 8015736:	606e      	str	r6, [r5, #4]
 8015738:	4630      	mov	r0, r6
 801573a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801573e:	4553      	cmp	r3, sl
 8015740:	d1c8      	bne.n	80156d4 <rcl_clock_remove_jump_callback+0x3c>
 8015742:	3e01      	subs	r6, #1
 8015744:	60ae      	str	r6, [r5, #8]
 8015746:	2e00      	cmp	r6, #0
 8015748:	d1e2      	bne.n	8015710 <rcl_clock_remove_jump_callback+0x78>
 801574a:	e7f0      	b.n	801572e <rcl_clock_remove_jump_callback+0x96>
 801574c:	200b      	movs	r0, #11
 801574e:	4770      	bx	lr
 8015750:	200a      	movs	r0, #10
 8015752:	e7ea      	b.n	801572a <rcl_clock_remove_jump_callback+0x92>

08015754 <_rcl_timer_time_jump>:
 8015754:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015758:	4605      	mov	r5, r0
 801575a:	b084      	sub	sp, #16
 801575c:	4614      	mov	r4, r2
 801575e:	b131      	cbz	r1, 801576e <_rcl_timer_time_jump+0x1a>
 8015760:	7803      	ldrb	r3, [r0, #0]
 8015762:	3b02      	subs	r3, #2
 8015764:	2b01      	cmp	r3, #1
 8015766:	d93f      	bls.n	80157e8 <_rcl_timer_time_jump+0x94>
 8015768:	b004      	add	sp, #16
 801576a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801576e:	6813      	ldr	r3, [r2, #0]
 8015770:	a902      	add	r1, sp, #8
 8015772:	6818      	ldr	r0, [r3, #0]
 8015774:	f7ff ff22 	bl	80155bc <rcl_clock_get_now>
 8015778:	2800      	cmp	r0, #0
 801577a:	d1f5      	bne.n	8015768 <_rcl_timer_time_jump+0x14>
 801577c:	6820      	ldr	r0, [r4, #0]
 801577e:	2105      	movs	r1, #5
 8015780:	3020      	adds	r0, #32
 8015782:	f001 fd8d 	bl	80172a0 <__atomic_load_8>
 8015786:	6823      	ldr	r3, [r4, #0]
 8015788:	4681      	mov	r9, r0
 801578a:	4688      	mov	r8, r1
 801578c:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 8015790:	2105      	movs	r1, #5
 8015792:	f001 fd85 	bl	80172a0 <__atomic_load_8>
 8015796:	4607      	mov	r7, r0
 8015798:	6820      	ldr	r0, [r4, #0]
 801579a:	460e      	mov	r6, r1
 801579c:	3018      	adds	r0, #24
 801579e:	2105      	movs	r1, #5
 80157a0:	f001 fd7e 	bl	80172a0 <__atomic_load_8>
 80157a4:	782b      	ldrb	r3, [r5, #0]
 80157a6:	9a02      	ldr	r2, [sp, #8]
 80157a8:	3b02      	subs	r3, #2
 80157aa:	2b01      	cmp	r3, #1
 80157ac:	460d      	mov	r5, r1
 80157ae:	9b03      	ldr	r3, [sp, #12]
 80157b0:	4682      	mov	sl, r0
 80157b2:	d937      	bls.n	8015824 <_rcl_timer_time_jump+0xd0>
 80157b4:	42ba      	cmp	r2, r7
 80157b6:	eb73 0106 	sbcs.w	r1, r3, r6
 80157ba:	da5f      	bge.n	801587c <_rcl_timer_time_jump+0x128>
 80157bc:	454a      	cmp	r2, r9
 80157be:	eb73 0108 	sbcs.w	r1, r3, r8
 80157c2:	dad1      	bge.n	8015768 <_rcl_timer_time_jump+0x14>
 80157c4:	6820      	ldr	r0, [r4, #0]
 80157c6:	eb1a 0202 	adds.w	r2, sl, r2
 80157ca:	eb43 0305 	adc.w	r3, r3, r5
 80157ce:	2505      	movs	r5, #5
 80157d0:	3028      	adds	r0, #40	@ 0x28
 80157d2:	9500      	str	r5, [sp, #0]
 80157d4:	f001 fd9a 	bl	801730c <__atomic_store_8>
 80157d8:	6820      	ldr	r0, [r4, #0]
 80157da:	9500      	str	r5, [sp, #0]
 80157dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80157e0:	3020      	adds	r0, #32
 80157e2:	f001 fd93 	bl	801730c <__atomic_store_8>
 80157e6:	e7bf      	b.n	8015768 <_rcl_timer_time_jump+0x14>
 80157e8:	6813      	ldr	r3, [r2, #0]
 80157ea:	a902      	add	r1, sp, #8
 80157ec:	6818      	ldr	r0, [r3, #0]
 80157ee:	f7ff fee5 	bl	80155bc <rcl_clock_get_now>
 80157f2:	2800      	cmp	r0, #0
 80157f4:	d1b8      	bne.n	8015768 <_rcl_timer_time_jump+0x14>
 80157f6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80157fa:	4313      	orrs	r3, r2
 80157fc:	d0b4      	beq.n	8015768 <_rcl_timer_time_jump+0x14>
 80157fe:	6820      	ldr	r0, [r4, #0]
 8015800:	2105      	movs	r1, #5
 8015802:	3028      	adds	r0, #40	@ 0x28
 8015804:	f001 fd4c 	bl	80172a0 <__atomic_load_8>
 8015808:	9d02      	ldr	r5, [sp, #8]
 801580a:	9b03      	ldr	r3, [sp, #12]
 801580c:	4602      	mov	r2, r0
 801580e:	6820      	ldr	r0, [r4, #0]
 8015810:	1b52      	subs	r2, r2, r5
 8015812:	f04f 0405 	mov.w	r4, #5
 8015816:	9400      	str	r4, [sp, #0]
 8015818:	eb61 0303 	sbc.w	r3, r1, r3
 801581c:	3030      	adds	r0, #48	@ 0x30
 801581e:	f001 fd75 	bl	801730c <__atomic_store_8>
 8015822:	e7a1      	b.n	8015768 <_rcl_timer_time_jump+0x14>
 8015824:	4313      	orrs	r3, r2
 8015826:	d09f      	beq.n	8015768 <_rcl_timer_time_jump+0x14>
 8015828:	6820      	ldr	r0, [r4, #0]
 801582a:	f04f 0805 	mov.w	r8, #5
 801582e:	2300      	movs	r3, #0
 8015830:	f8cd 8000 	str.w	r8, [sp]
 8015834:	3030      	adds	r0, #48	@ 0x30
 8015836:	2200      	movs	r2, #0
 8015838:	f001 fd9e 	bl	8017378 <__atomic_exchange_8>
 801583c:	ea51 0300 	orrs.w	r3, r1, r0
 8015840:	4606      	mov	r6, r0
 8015842:	460f      	mov	r7, r1
 8015844:	d090      	beq.n	8015768 <_rcl_timer_time_jump+0x14>
 8015846:	9a02      	ldr	r2, [sp, #8]
 8015848:	9b03      	ldr	r3, [sp, #12]
 801584a:	f8cd 8000 	str.w	r8, [sp]
 801584e:	1a12      	subs	r2, r2, r0
 8015850:	6820      	ldr	r0, [r4, #0]
 8015852:	eb63 0301 	sbc.w	r3, r3, r1
 8015856:	eb12 020a 	adds.w	r2, r2, sl
 801585a:	eb43 0305 	adc.w	r3, r3, r5
 801585e:	3028      	adds	r0, #40	@ 0x28
 8015860:	f001 fd54 	bl	801730c <__atomic_store_8>
 8015864:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8015868:	f8cd 8000 	str.w	r8, [sp]
 801586c:	6820      	ldr	r0, [r4, #0]
 801586e:	1b92      	subs	r2, r2, r6
 8015870:	eb63 0307 	sbc.w	r3, r3, r7
 8015874:	3020      	adds	r0, #32
 8015876:	f001 fd49 	bl	801730c <__atomic_store_8>
 801587a:	e775      	b.n	8015768 <_rcl_timer_time_jump+0x14>
 801587c:	6820      	ldr	r0, [r4, #0]
 801587e:	3008      	adds	r0, #8
 8015880:	f004 fad6 	bl	8019e30 <rcl_trigger_guard_condition>
 8015884:	e770      	b.n	8015768 <_rcl_timer_time_jump+0x14>
 8015886:	bf00      	nop

08015888 <rcl_get_zero_initialized_timer>:
 8015888:	4b01      	ldr	r3, [pc, #4]	@ (8015890 <rcl_get_zero_initialized_timer+0x8>)
 801588a:	6818      	ldr	r0, [r3, #0]
 801588c:	4770      	bx	lr
 801588e:	bf00      	nop
 8015890:	0801e1a0 	.word	0x0801e1a0
 8015894:	00000000 	.word	0x00000000

08015898 <rcl_timer_init>:
 8015898:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801589c:	b0aa      	sub	sp, #168	@ 0xa8
 801589e:	4604      	mov	r4, r0
 80158a0:	a835      	add	r0, sp, #212	@ 0xd4
 80158a2:	e9dd 8732 	ldrd	r8, r7, [sp, #200]	@ 0xc8
 80158a6:	460d      	mov	r5, r1
 80158a8:	4692      	mov	sl, r2
 80158aa:	f7f9 fc5f 	bl	800f16c <rcutils_allocator_is_valid>
 80158ae:	2800      	cmp	r0, #0
 80158b0:	d064      	beq.n	801597c <rcl_timer_init+0xe4>
 80158b2:	2c00      	cmp	r4, #0
 80158b4:	d062      	beq.n	801597c <rcl_timer_init+0xe4>
 80158b6:	2d00      	cmp	r5, #0
 80158b8:	d060      	beq.n	801597c <rcl_timer_init+0xe4>
 80158ba:	2f00      	cmp	r7, #0
 80158bc:	db5e      	blt.n	801597c <rcl_timer_init+0xe4>
 80158be:	6823      	ldr	r3, [r4, #0]
 80158c0:	b123      	cbz	r3, 80158cc <rcl_timer_init+0x34>
 80158c2:	2664      	movs	r6, #100	@ 0x64
 80158c4:	4630      	mov	r0, r6
 80158c6:	b02a      	add	sp, #168	@ 0xa8
 80158c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80158cc:	a908      	add	r1, sp, #32
 80158ce:	4628      	mov	r0, r5
 80158d0:	f7ff fe74 	bl	80155bc <rcl_clock_get_now>
 80158d4:	4606      	mov	r6, r0
 80158d6:	2800      	cmp	r0, #0
 80158d8:	d1f4      	bne.n	80158c4 <rcl_timer_init+0x2c>
 80158da:	ae06      	add	r6, sp, #24
 80158dc:	4630      	mov	r0, r6
 80158de:	e9cd 5a16 	strd	r5, sl, [sp, #88]	@ 0x58
 80158e2:	f004 f9ad 	bl	8019c40 <rcl_get_zero_initialized_guard_condition>
 80158e6:	e896 0003 	ldmia.w	r6, {r0, r1}
 80158ea:	f10d 0960 	add.w	r9, sp, #96	@ 0x60
 80158ee:	ae0b      	add	r6, sp, #44	@ 0x2c
 80158f0:	e889 0003 	stmia.w	r9, {r0, r1}
 80158f4:	4630      	mov	r0, r6
 80158f6:	f004 fa7f 	bl	8019df8 <rcl_guard_condition_get_default_options>
 80158fa:	ab0d      	add	r3, sp, #52	@ 0x34
 80158fc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8015900:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8015904:	4651      	mov	r1, sl
 8015906:	e896 000c 	ldmia.w	r6, {r2, r3}
 801590a:	4648      	mov	r0, r9
 801590c:	f004 f9a2 	bl	8019c54 <rcl_guard_condition_init>
 8015910:	4606      	mov	r6, r0
 8015912:	2800      	cmp	r0, #0
 8015914:	d1d6      	bne.n	80158c4 <rcl_timer_init+0x2c>
 8015916:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8015918:	781b      	ldrb	r3, [r3, #0]
 801591a:	2b01      	cmp	r3, #1
 801591c:	d033      	beq.n	8015986 <rcl_timer_init+0xee>
 801591e:	9934      	ldr	r1, [sp, #208]	@ 0xd0
 8015920:	911a      	str	r1, [sp, #104]	@ 0x68
 8015922:	4642      	mov	r2, r8
 8015924:	463b      	mov	r3, r7
 8015926:	e9cd 231c 	strd	r2, r3, [sp, #112]	@ 0x70
 801592a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801592e:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 80159e0 <rcl_timer_init+0x148>
 8015932:	eb12 0008 	adds.w	r0, r2, r8
 8015936:	eb47 0103 	adc.w	r1, r7, r3
 801593a:	f10d 0ed4 	add.w	lr, sp, #212	@ 0xd4
 801593e:	ed8d 7b22 	vstr	d7, [sp, #136]	@ 0x88
 8015942:	e9cd 231e 	strd	r2, r3, [sp, #120]	@ 0x78
 8015946:	e9cd 0120 	strd	r0, r1, [sp, #128]	@ 0x80
 801594a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801594e:	f10d 0c94 	add.w	ip, sp, #148	@ 0x94
 8015952:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015956:	f8de 3000 	ldr.w	r3, [lr]
 801595a:	f8cc 3000 	str.w	r3, [ip]
 801595e:	f04f 0a00 	mov.w	sl, #0
 8015962:	4619      	mov	r1, r3
 8015964:	f88d a090 	strb.w	sl, [sp, #144]	@ 0x90
 8015968:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
 801596a:	2050      	movs	r0, #80	@ 0x50
 801596c:	4798      	blx	r3
 801596e:	6020      	str	r0, [r4, #0]
 8015970:	b358      	cbz	r0, 80159ca <rcl_timer_init+0x132>
 8015972:	2250      	movs	r2, #80	@ 0x50
 8015974:	a916      	add	r1, sp, #88	@ 0x58
 8015976:	f005 f9ba 	bl	801acee <memcpy>
 801597a:	e7a3      	b.n	80158c4 <rcl_timer_init+0x2c>
 801597c:	260b      	movs	r6, #11
 801597e:	4630      	mov	r0, r6
 8015980:	b02a      	add	sp, #168	@ 0xa8
 8015982:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015986:	2001      	movs	r0, #1
 8015988:	2100      	movs	r1, #0
 801598a:	e9cd 0112 	strd	r0, r1, [sp, #72]	@ 0x48
 801598e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8015992:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8015996:	e9cd 0114 	strd	r0, r1, [sp, #80]	@ 0x50
 801599a:	4a13      	ldr	r2, [pc, #76]	@ (80159e8 <rcl_timer_init+0x150>)
 801599c:	f88d 3040 	strb.w	r3, [sp, #64]	@ 0x40
 80159a0:	9405      	str	r4, [sp, #20]
 80159a2:	9204      	str	r2, [sp, #16]
 80159a4:	ab12      	add	r3, sp, #72	@ 0x48
 80159a6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80159a8:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80159ac:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 80159b0:	e89c 000c 	ldmia.w	ip, {r2, r3}
 80159b4:	4628      	mov	r0, r5
 80159b6:	f7ff fe0d 	bl	80155d4 <rcl_clock_add_jump_callback>
 80159ba:	4682      	mov	sl, r0
 80159bc:	2800      	cmp	r0, #0
 80159be:	d0ae      	beq.n	801591e <rcl_timer_init+0x86>
 80159c0:	4648      	mov	r0, r9
 80159c2:	f004 f9f3 	bl	8019dac <rcl_guard_condition_fini>
 80159c6:	4656      	mov	r6, sl
 80159c8:	e77c      	b.n	80158c4 <rcl_timer_init+0x2c>
 80159ca:	4648      	mov	r0, r9
 80159cc:	f004 f9ee 	bl	8019dac <rcl_guard_condition_fini>
 80159d0:	4905      	ldr	r1, [pc, #20]	@ (80159e8 <rcl_timer_init+0x150>)
 80159d2:	4622      	mov	r2, r4
 80159d4:	4628      	mov	r0, r5
 80159d6:	f7ff fe5f 	bl	8015698 <rcl_clock_remove_jump_callback>
 80159da:	260a      	movs	r6, #10
 80159dc:	e772      	b.n	80158c4 <rcl_timer_init+0x2c>
 80159de:	bf00      	nop
	...
 80159e8:	08015755 	.word	0x08015755

080159ec <rcl_timer_call>:
 80159ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80159f0:	b087      	sub	sp, #28
 80159f2:	2800      	cmp	r0, #0
 80159f4:	d06d      	beq.n	8015ad2 <rcl_timer_call+0xe6>
 80159f6:	6803      	ldr	r3, [r0, #0]
 80159f8:	4604      	mov	r4, r0
 80159fa:	2b00      	cmp	r3, #0
 80159fc:	d063      	beq.n	8015ac6 <rcl_timer_call+0xda>
 80159fe:	f3bf 8f5b 	dmb	ish
 8015a02:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8015a06:	f3bf 8f5b 	dmb	ish
 8015a0a:	2b00      	cmp	r3, #0
 8015a0c:	d150      	bne.n	8015ab0 <rcl_timer_call+0xc4>
 8015a0e:	6803      	ldr	r3, [r0, #0]
 8015a10:	a904      	add	r1, sp, #16
 8015a12:	6818      	ldr	r0, [r3, #0]
 8015a14:	f7ff fdd2 	bl	80155bc <rcl_clock_get_now>
 8015a18:	4605      	mov	r5, r0
 8015a1a:	2800      	cmp	r0, #0
 8015a1c:	d14a      	bne.n	8015ab4 <rcl_timer_call+0xc8>
 8015a1e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015a22:	2b00      	cmp	r3, #0
 8015a24:	db4a      	blt.n	8015abc <rcl_timer_call+0xd0>
 8015a26:	6820      	ldr	r0, [r4, #0]
 8015a28:	f04f 0a05 	mov.w	sl, #5
 8015a2c:	f8cd a000 	str.w	sl, [sp]
 8015a30:	3020      	adds	r0, #32
 8015a32:	f001 fca1 	bl	8017378 <__atomic_exchange_8>
 8015a36:	6823      	ldr	r3, [r4, #0]
 8015a38:	f3bf 8f5b 	dmb	ish
 8015a3c:	4680      	mov	r8, r0
 8015a3e:	f8d3 b010 	ldr.w	fp, [r3, #16]
 8015a42:	f3bf 8f5b 	dmb	ish
 8015a46:	6820      	ldr	r0, [r4, #0]
 8015a48:	4689      	mov	r9, r1
 8015a4a:	3028      	adds	r0, #40	@ 0x28
 8015a4c:	4651      	mov	r1, sl
 8015a4e:	f001 fc27 	bl	80172a0 <__atomic_load_8>
 8015a52:	4606      	mov	r6, r0
 8015a54:	6820      	ldr	r0, [r4, #0]
 8015a56:	460f      	mov	r7, r1
 8015a58:	3018      	adds	r0, #24
 8015a5a:	4651      	mov	r1, sl
 8015a5c:	f001 fc20 	bl	80172a0 <__atomic_load_8>
 8015a60:	1836      	adds	r6, r6, r0
 8015a62:	4602      	mov	r2, r0
 8015a64:	4682      	mov	sl, r0
 8015a66:	e9dd 0c04 	ldrd	r0, ip, [sp, #16]
 8015a6a:	eb47 0701 	adc.w	r7, r7, r1
 8015a6e:	4286      	cmp	r6, r0
 8015a70:	460b      	mov	r3, r1
 8015a72:	eb77 010c 	sbcs.w	r1, r7, ip
 8015a76:	da04      	bge.n	8015a82 <rcl_timer_call+0x96>
 8015a78:	ea53 0102 	orrs.w	r1, r3, r2
 8015a7c:	d12e      	bne.n	8015adc <rcl_timer_call+0xf0>
 8015a7e:	4606      	mov	r6, r0
 8015a80:	4667      	mov	r7, ip
 8015a82:	6820      	ldr	r0, [r4, #0]
 8015a84:	2105      	movs	r1, #5
 8015a86:	4632      	mov	r2, r6
 8015a88:	463b      	mov	r3, r7
 8015a8a:	3028      	adds	r0, #40	@ 0x28
 8015a8c:	9100      	str	r1, [sp, #0]
 8015a8e:	f001 fc3d 	bl	801730c <__atomic_store_8>
 8015a92:	f1bb 0f00 	cmp.w	fp, #0
 8015a96:	d00d      	beq.n	8015ab4 <rcl_timer_call+0xc8>
 8015a98:	9a04      	ldr	r2, [sp, #16]
 8015a9a:	9b05      	ldr	r3, [sp, #20]
 8015a9c:	ebb2 0208 	subs.w	r2, r2, r8
 8015aa0:	4620      	mov	r0, r4
 8015aa2:	eb63 0309 	sbc.w	r3, r3, r9
 8015aa6:	47d8      	blx	fp
 8015aa8:	4628      	mov	r0, r5
 8015aaa:	b007      	add	sp, #28
 8015aac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015ab0:	f240 3521 	movw	r5, #801	@ 0x321
 8015ab4:	4628      	mov	r0, r5
 8015ab6:	b007      	add	sp, #28
 8015ab8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015abc:	2501      	movs	r5, #1
 8015abe:	4628      	mov	r0, r5
 8015ac0:	b007      	add	sp, #28
 8015ac2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015ac6:	f44f 7548 	mov.w	r5, #800	@ 0x320
 8015aca:	4628      	mov	r0, r5
 8015acc:	b007      	add	sp, #28
 8015ace:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015ad2:	250b      	movs	r5, #11
 8015ad4:	4628      	mov	r0, r5
 8015ad6:	b007      	add	sp, #28
 8015ad8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015adc:	1b80      	subs	r0, r0, r6
 8015ade:	eb6c 0107 	sbc.w	r1, ip, r7
 8015ae2:	3801      	subs	r0, #1
 8015ae4:	f161 0100 	sbc.w	r1, r1, #0
 8015ae8:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8015aec:	f7eb f83e 	bl	8000b6c <__aeabi_ldivmod>
 8015af0:	9b02      	ldr	r3, [sp, #8]
 8015af2:	3001      	adds	r0, #1
 8015af4:	f141 0100 	adc.w	r1, r1, #0
 8015af8:	fb00 f303 	mul.w	r3, r0, r3
 8015afc:	fb01 330a 	mla	r3, r1, sl, r3
 8015b00:	fba0 0a0a 	umull	r0, sl, r0, sl
 8015b04:	1986      	adds	r6, r0, r6
 8015b06:	4453      	add	r3, sl
 8015b08:	eb43 0707 	adc.w	r7, r3, r7
 8015b0c:	e7b9      	b.n	8015a82 <rcl_timer_call+0x96>
 8015b0e:	bf00      	nop

08015b10 <rcl_timer_is_ready>:
 8015b10:	b570      	push	{r4, r5, r6, lr}
 8015b12:	b082      	sub	sp, #8
 8015b14:	b378      	cbz	r0, 8015b76 <rcl_timer_is_ready+0x66>
 8015b16:	6803      	ldr	r3, [r0, #0]
 8015b18:	4604      	mov	r4, r0
 8015b1a:	b383      	cbz	r3, 8015b7e <rcl_timer_is_ready+0x6e>
 8015b1c:	460d      	mov	r5, r1
 8015b1e:	b351      	cbz	r1, 8015b76 <rcl_timer_is_ready+0x66>
 8015b20:	f3bf 8f5b 	dmb	ish
 8015b24:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8015b28:	f3bf 8f5b 	dmb	ish
 8015b2c:	b953      	cbnz	r3, 8015b44 <rcl_timer_is_ready+0x34>
 8015b2e:	6803      	ldr	r3, [r0, #0]
 8015b30:	4669      	mov	r1, sp
 8015b32:	6818      	ldr	r0, [r3, #0]
 8015b34:	f7ff fd42 	bl	80155bc <rcl_clock_get_now>
 8015b38:	4606      	mov	r6, r0
 8015b3a:	b140      	cbz	r0, 8015b4e <rcl_timer_is_ready+0x3e>
 8015b3c:	f240 3321 	movw	r3, #801	@ 0x321
 8015b40:	4298      	cmp	r0, r3
 8015b42:	d101      	bne.n	8015b48 <rcl_timer_is_ready+0x38>
 8015b44:	2600      	movs	r6, #0
 8015b46:	702e      	strb	r6, [r5, #0]
 8015b48:	4630      	mov	r0, r6
 8015b4a:	b002      	add	sp, #8
 8015b4c:	bd70      	pop	{r4, r5, r6, pc}
 8015b4e:	6820      	ldr	r0, [r4, #0]
 8015b50:	2105      	movs	r1, #5
 8015b52:	3028      	adds	r0, #40	@ 0x28
 8015b54:	f001 fba4 	bl	80172a0 <__atomic_load_8>
 8015b58:	9b00      	ldr	r3, [sp, #0]
 8015b5a:	1ac0      	subs	r0, r0, r3
 8015b5c:	9b01      	ldr	r3, [sp, #4]
 8015b5e:	eb61 0103 	sbc.w	r1, r1, r3
 8015b62:	2801      	cmp	r0, #1
 8015b64:	f171 0300 	sbcs.w	r3, r1, #0
 8015b68:	bfb4      	ite	lt
 8015b6a:	2301      	movlt	r3, #1
 8015b6c:	2300      	movge	r3, #0
 8015b6e:	4630      	mov	r0, r6
 8015b70:	702b      	strb	r3, [r5, #0]
 8015b72:	b002      	add	sp, #8
 8015b74:	bd70      	pop	{r4, r5, r6, pc}
 8015b76:	260b      	movs	r6, #11
 8015b78:	4630      	mov	r0, r6
 8015b7a:	b002      	add	sp, #8
 8015b7c:	bd70      	pop	{r4, r5, r6, pc}
 8015b7e:	f44f 7648 	mov.w	r6, #800	@ 0x320
 8015b82:	e7e1      	b.n	8015b48 <rcl_timer_is_ready+0x38>

08015b84 <rcl_timer_get_time_until_next_call>:
 8015b84:	b570      	push	{r4, r5, r6, lr}
 8015b86:	b082      	sub	sp, #8
 8015b88:	b330      	cbz	r0, 8015bd8 <rcl_timer_get_time_until_next_call+0x54>
 8015b8a:	6803      	ldr	r3, [r0, #0]
 8015b8c:	4604      	mov	r4, r0
 8015b8e:	b33b      	cbz	r3, 8015be0 <rcl_timer_get_time_until_next_call+0x5c>
 8015b90:	460d      	mov	r5, r1
 8015b92:	b309      	cbz	r1, 8015bd8 <rcl_timer_get_time_until_next_call+0x54>
 8015b94:	f3bf 8f5b 	dmb	ish
 8015b98:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8015b9c:	f3bf 8f5b 	dmb	ish
 8015ba0:	b9ab      	cbnz	r3, 8015bce <rcl_timer_get_time_until_next_call+0x4a>
 8015ba2:	6803      	ldr	r3, [r0, #0]
 8015ba4:	4669      	mov	r1, sp
 8015ba6:	6818      	ldr	r0, [r3, #0]
 8015ba8:	f7ff fd08 	bl	80155bc <rcl_clock_get_now>
 8015bac:	4606      	mov	r6, r0
 8015bae:	b958      	cbnz	r0, 8015bc8 <rcl_timer_get_time_until_next_call+0x44>
 8015bb0:	6820      	ldr	r0, [r4, #0]
 8015bb2:	2105      	movs	r1, #5
 8015bb4:	3028      	adds	r0, #40	@ 0x28
 8015bb6:	f001 fb73 	bl	80172a0 <__atomic_load_8>
 8015bba:	9b00      	ldr	r3, [sp, #0]
 8015bbc:	1ac0      	subs	r0, r0, r3
 8015bbe:	9b01      	ldr	r3, [sp, #4]
 8015bc0:	6028      	str	r0, [r5, #0]
 8015bc2:	eb61 0103 	sbc.w	r1, r1, r3
 8015bc6:	6069      	str	r1, [r5, #4]
 8015bc8:	4630      	mov	r0, r6
 8015bca:	b002      	add	sp, #8
 8015bcc:	bd70      	pop	{r4, r5, r6, pc}
 8015bce:	f240 3621 	movw	r6, #801	@ 0x321
 8015bd2:	4630      	mov	r0, r6
 8015bd4:	b002      	add	sp, #8
 8015bd6:	bd70      	pop	{r4, r5, r6, pc}
 8015bd8:	260b      	movs	r6, #11
 8015bda:	4630      	mov	r0, r6
 8015bdc:	b002      	add	sp, #8
 8015bde:	bd70      	pop	{r4, r5, r6, pc}
 8015be0:	f44f 7648 	mov.w	r6, #800	@ 0x320
 8015be4:	e7f0      	b.n	8015bc8 <rcl_timer_get_time_until_next_call+0x44>
 8015be6:	bf00      	nop

08015be8 <rcl_timer_get_guard_condition>:
 8015be8:	b130      	cbz	r0, 8015bf8 <rcl_timer_get_guard_condition+0x10>
 8015bea:	6800      	ldr	r0, [r0, #0]
 8015bec:	b120      	cbz	r0, 8015bf8 <rcl_timer_get_guard_condition+0x10>
 8015bee:	68c3      	ldr	r3, [r0, #12]
 8015bf0:	b10b      	cbz	r3, 8015bf6 <rcl_timer_get_guard_condition+0xe>
 8015bf2:	3008      	adds	r0, #8
 8015bf4:	4770      	bx	lr
 8015bf6:	4618      	mov	r0, r3
 8015bf8:	4770      	bx	lr
 8015bfa:	bf00      	nop

08015bfc <rcl_get_zero_initialized_wait_set>:
 8015bfc:	b510      	push	{r4, lr}
 8015bfe:	4c08      	ldr	r4, [pc, #32]	@ (8015c20 <rcl_get_zero_initialized_wait_set+0x24>)
 8015c00:	4686      	mov	lr, r0
 8015c02:	4684      	mov	ip, r0
 8015c04:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015c06:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015c0a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015c0c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015c10:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015c12:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015c16:	6823      	ldr	r3, [r4, #0]
 8015c18:	f8cc 3000 	str.w	r3, [ip]
 8015c1c:	4670      	mov	r0, lr
 8015c1e:	bd10      	pop	{r4, pc}
 8015c20:	0801e1a4 	.word	0x0801e1a4

08015c24 <rcl_wait_set_is_valid>:
 8015c24:	b118      	cbz	r0, 8015c2e <rcl_wait_set_is_valid+0xa>
 8015c26:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8015c28:	3800      	subs	r0, #0
 8015c2a:	bf18      	it	ne
 8015c2c:	2001      	movne	r0, #1
 8015c2e:	4770      	bx	lr

08015c30 <rcl_wait_set_fini>:
 8015c30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015c34:	b082      	sub	sp, #8
 8015c36:	2800      	cmp	r0, #0
 8015c38:	f000 8095 	beq.w	8015d66 <rcl_wait_set_fini+0x136>
 8015c3c:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 8015c3e:	4604      	mov	r4, r0
 8015c40:	2e00      	cmp	r6, #0
 8015c42:	f000 808c 	beq.w	8015d5e <rcl_wait_set_fini+0x12e>
 8015c46:	6bf0      	ldr	r0, [r6, #60]	@ 0x3c
 8015c48:	f002 fd56 	bl	80186f8 <rmw_destroy_wait_set>
 8015c4c:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8015c4e:	1e06      	subs	r6, r0, #0
 8015c50:	bf18      	it	ne
 8015c52:	f44f 7661 	movne.w	r6, #900	@ 0x384
 8015c56:	2d00      	cmp	r5, #0
 8015c58:	f000 8081 	beq.w	8015d5e <rcl_wait_set_fini+0x12e>
 8015c5c:	6820      	ldr	r0, [r4, #0]
 8015c5e:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 8015c62:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8015c64:	2700      	movs	r7, #0
 8015c66:	6067      	str	r7, [r4, #4]
 8015c68:	602f      	str	r7, [r5, #0]
 8015c6a:	b120      	cbz	r0, 8015c76 <rcl_wait_set_fini+0x46>
 8015c6c:	9101      	str	r1, [sp, #4]
 8015c6e:	47c0      	blx	r8
 8015c70:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8015c72:	9901      	ldr	r1, [sp, #4]
 8015c74:	6027      	str	r7, [r4, #0]
 8015c76:	68a8      	ldr	r0, [r5, #8]
 8015c78:	b120      	cbz	r0, 8015c84 <rcl_wait_set_fini+0x54>
 8015c7a:	47c0      	blx	r8
 8015c7c:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8015c7e:	2300      	movs	r3, #0
 8015c80:	e9c5 3301 	strd	r3, r3, [r5, #4]
 8015c84:	68a0      	ldr	r0, [r4, #8]
 8015c86:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8015c88:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8015c8a:	f04f 0800 	mov.w	r8, #0
 8015c8e:	f8c4 800c 	str.w	r8, [r4, #12]
 8015c92:	f8c5 800c 	str.w	r8, [r5, #12]
 8015c96:	b128      	cbz	r0, 8015ca4 <rcl_wait_set_fini+0x74>
 8015c98:	47b8      	blx	r7
 8015c9a:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8015c9c:	f8c4 8008 	str.w	r8, [r4, #8]
 8015ca0:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8015ca2:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8015ca4:	6968      	ldr	r0, [r5, #20]
 8015ca6:	f04f 0800 	mov.w	r8, #0
 8015caa:	f8c5 8010 	str.w	r8, [r5, #16]
 8015cae:	b128      	cbz	r0, 8015cbc <rcl_wait_set_fini+0x8c>
 8015cb0:	47b8      	blx	r7
 8015cb2:	f8c5 8014 	str.w	r8, [r5, #20]
 8015cb6:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8015cb8:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8015cba:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8015cbc:	6920      	ldr	r0, [r4, #16]
 8015cbe:	f04f 0800 	mov.w	r8, #0
 8015cc2:	f8c4 8014 	str.w	r8, [r4, #20]
 8015cc6:	f8c5 8040 	str.w	r8, [r5, #64]	@ 0x40
 8015cca:	b128      	cbz	r0, 8015cd8 <rcl_wait_set_fini+0xa8>
 8015ccc:	47b8      	blx	r7
 8015cce:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8015cd0:	f8c4 8010 	str.w	r8, [r4, #16]
 8015cd4:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8015cd6:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8015cd8:	69a0      	ldr	r0, [r4, #24]
 8015cda:	f04f 0800 	mov.w	r8, #0
 8015cde:	f8c4 801c 	str.w	r8, [r4, #28]
 8015ce2:	f8c5 8018 	str.w	r8, [r5, #24]
 8015ce6:	b128      	cbz	r0, 8015cf4 <rcl_wait_set_fini+0xc4>
 8015ce8:	9101      	str	r1, [sp, #4]
 8015cea:	47b8      	blx	r7
 8015cec:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8015cee:	9901      	ldr	r1, [sp, #4]
 8015cf0:	f8c4 8018 	str.w	r8, [r4, #24]
 8015cf4:	6a28      	ldr	r0, [r5, #32]
 8015cf6:	b120      	cbz	r0, 8015d02 <rcl_wait_set_fini+0xd2>
 8015cf8:	47b8      	blx	r7
 8015cfa:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8015cfc:	2300      	movs	r3, #0
 8015cfe:	e9c5 3307 	strd	r3, r3, [r5, #28]
 8015d02:	6a20      	ldr	r0, [r4, #32]
 8015d04:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 8015d08:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8015d0a:	2700      	movs	r7, #0
 8015d0c:	6267      	str	r7, [r4, #36]	@ 0x24
 8015d0e:	626f      	str	r7, [r5, #36]	@ 0x24
 8015d10:	b120      	cbz	r0, 8015d1c <rcl_wait_set_fini+0xec>
 8015d12:	9101      	str	r1, [sp, #4]
 8015d14:	47c0      	blx	r8
 8015d16:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8015d18:	9901      	ldr	r1, [sp, #4]
 8015d1a:	6227      	str	r7, [r4, #32]
 8015d1c:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 8015d1e:	b120      	cbz	r0, 8015d2a <rcl_wait_set_fini+0xfa>
 8015d20:	47c0      	blx	r8
 8015d22:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8015d24:	2300      	movs	r3, #0
 8015d26:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 8015d2a:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8015d2c:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 8015d30:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8015d32:	2700      	movs	r7, #0
 8015d34:	62e7      	str	r7, [r4, #44]	@ 0x2c
 8015d36:	632f      	str	r7, [r5, #48]	@ 0x30
 8015d38:	b120      	cbz	r0, 8015d44 <rcl_wait_set_fini+0x114>
 8015d3a:	9101      	str	r1, [sp, #4]
 8015d3c:	47c0      	blx	r8
 8015d3e:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8015d40:	9901      	ldr	r1, [sp, #4]
 8015d42:	62a7      	str	r7, [r4, #40]	@ 0x28
 8015d44:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 8015d46:	b120      	cbz	r0, 8015d52 <rcl_wait_set_fini+0x122>
 8015d48:	47c0      	blx	r8
 8015d4a:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8015d4c:	2300      	movs	r3, #0
 8015d4e:	e9c5 330d 	strd	r3, r3, [r5, #52]	@ 0x34
 8015d52:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8015d54:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8015d56:	4628      	mov	r0, r5
 8015d58:	4798      	blx	r3
 8015d5a:	2300      	movs	r3, #0
 8015d5c:	6323      	str	r3, [r4, #48]	@ 0x30
 8015d5e:	4630      	mov	r0, r6
 8015d60:	b002      	add	sp, #8
 8015d62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015d66:	260b      	movs	r6, #11
 8015d68:	4630      	mov	r0, r6
 8015d6a:	b002      	add	sp, #8
 8015d6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015d70 <rcl_wait_set_add_subscription>:
 8015d70:	b318      	cbz	r0, 8015dba <rcl_wait_set_add_subscription+0x4a>
 8015d72:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8015d74:	b570      	push	{r4, r5, r6, lr}
 8015d76:	4604      	mov	r4, r0
 8015d78:	b30b      	cbz	r3, 8015dbe <rcl_wait_set_add_subscription+0x4e>
 8015d7a:	b319      	cbz	r1, 8015dc4 <rcl_wait_set_add_subscription+0x54>
 8015d7c:	681d      	ldr	r5, [r3, #0]
 8015d7e:	6840      	ldr	r0, [r0, #4]
 8015d80:	4285      	cmp	r5, r0
 8015d82:	d217      	bcs.n	8015db4 <rcl_wait_set_add_subscription+0x44>
 8015d84:	6820      	ldr	r0, [r4, #0]
 8015d86:	1c6e      	adds	r6, r5, #1
 8015d88:	601e      	str	r6, [r3, #0]
 8015d8a:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8015d8e:	b102      	cbz	r2, 8015d92 <rcl_wait_set_add_subscription+0x22>
 8015d90:	6015      	str	r5, [r2, #0]
 8015d92:	4608      	mov	r0, r1
 8015d94:	f7ff fb72 	bl	801547c <rcl_subscription_get_rmw_handle>
 8015d98:	b150      	cbz	r0, 8015db0 <rcl_wait_set_add_subscription+0x40>
 8015d9a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015d9c:	6842      	ldr	r2, [r0, #4]
 8015d9e:	689b      	ldr	r3, [r3, #8]
 8015da0:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8015da4:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8015da6:	6853      	ldr	r3, [r2, #4]
 8015da8:	3301      	adds	r3, #1
 8015daa:	2000      	movs	r0, #0
 8015dac:	6053      	str	r3, [r2, #4]
 8015dae:	bd70      	pop	{r4, r5, r6, pc}
 8015db0:	2001      	movs	r0, #1
 8015db2:	bd70      	pop	{r4, r5, r6, pc}
 8015db4:	f240 3086 	movw	r0, #902	@ 0x386
 8015db8:	bd70      	pop	{r4, r5, r6, pc}
 8015dba:	200b      	movs	r0, #11
 8015dbc:	4770      	bx	lr
 8015dbe:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8015dc2:	bd70      	pop	{r4, r5, r6, pc}
 8015dc4:	200b      	movs	r0, #11
 8015dc6:	bd70      	pop	{r4, r5, r6, pc}

08015dc8 <rcl_wait_set_clear>:
 8015dc8:	2800      	cmp	r0, #0
 8015dca:	d073      	beq.n	8015eb4 <rcl_wait_set_clear+0xec>
 8015dcc:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8015dce:	b510      	push	{r4, lr}
 8015dd0:	4604      	mov	r4, r0
 8015dd2:	2b00      	cmp	r3, #0
 8015dd4:	d070      	beq.n	8015eb8 <rcl_wait_set_clear+0xf0>
 8015dd6:	6800      	ldr	r0, [r0, #0]
 8015dd8:	b138      	cbz	r0, 8015dea <rcl_wait_set_clear+0x22>
 8015dda:	6862      	ldr	r2, [r4, #4]
 8015ddc:	2100      	movs	r1, #0
 8015dde:	0092      	lsls	r2, r2, #2
 8015de0:	f004 febc 	bl	801ab5c <memset>
 8015de4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015de6:	2200      	movs	r2, #0
 8015de8:	601a      	str	r2, [r3, #0]
 8015dea:	68a0      	ldr	r0, [r4, #8]
 8015dec:	b138      	cbz	r0, 8015dfe <rcl_wait_set_clear+0x36>
 8015dee:	68e2      	ldr	r2, [r4, #12]
 8015df0:	2100      	movs	r1, #0
 8015df2:	0092      	lsls	r2, r2, #2
 8015df4:	f004 feb2 	bl	801ab5c <memset>
 8015df8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015dfa:	2200      	movs	r2, #0
 8015dfc:	60da      	str	r2, [r3, #12]
 8015dfe:	69a0      	ldr	r0, [r4, #24]
 8015e00:	b138      	cbz	r0, 8015e12 <rcl_wait_set_clear+0x4a>
 8015e02:	69e2      	ldr	r2, [r4, #28]
 8015e04:	2100      	movs	r1, #0
 8015e06:	0092      	lsls	r2, r2, #2
 8015e08:	f004 fea8 	bl	801ab5c <memset>
 8015e0c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015e0e:	2200      	movs	r2, #0
 8015e10:	619a      	str	r2, [r3, #24]
 8015e12:	6a20      	ldr	r0, [r4, #32]
 8015e14:	b138      	cbz	r0, 8015e26 <rcl_wait_set_clear+0x5e>
 8015e16:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8015e18:	2100      	movs	r1, #0
 8015e1a:	0092      	lsls	r2, r2, #2
 8015e1c:	f004 fe9e 	bl	801ab5c <memset>
 8015e20:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015e22:	2200      	movs	r2, #0
 8015e24:	625a      	str	r2, [r3, #36]	@ 0x24
 8015e26:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8015e28:	b138      	cbz	r0, 8015e3a <rcl_wait_set_clear+0x72>
 8015e2a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8015e2c:	2100      	movs	r1, #0
 8015e2e:	0092      	lsls	r2, r2, #2
 8015e30:	f004 fe94 	bl	801ab5c <memset>
 8015e34:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015e36:	2200      	movs	r2, #0
 8015e38:	631a      	str	r2, [r3, #48]	@ 0x30
 8015e3a:	6920      	ldr	r0, [r4, #16]
 8015e3c:	b138      	cbz	r0, 8015e4e <rcl_wait_set_clear+0x86>
 8015e3e:	6962      	ldr	r2, [r4, #20]
 8015e40:	2100      	movs	r1, #0
 8015e42:	0092      	lsls	r2, r2, #2
 8015e44:	f004 fe8a 	bl	801ab5c <memset>
 8015e48:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015e4a:	2200      	movs	r2, #0
 8015e4c:	641a      	str	r2, [r3, #64]	@ 0x40
 8015e4e:	6898      	ldr	r0, [r3, #8]
 8015e50:	b138      	cbz	r0, 8015e62 <rcl_wait_set_clear+0x9a>
 8015e52:	685a      	ldr	r2, [r3, #4]
 8015e54:	2100      	movs	r1, #0
 8015e56:	0092      	lsls	r2, r2, #2
 8015e58:	f004 fe80 	bl	801ab5c <memset>
 8015e5c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015e5e:	2200      	movs	r2, #0
 8015e60:	605a      	str	r2, [r3, #4]
 8015e62:	6958      	ldr	r0, [r3, #20]
 8015e64:	b138      	cbz	r0, 8015e76 <rcl_wait_set_clear+0xae>
 8015e66:	691a      	ldr	r2, [r3, #16]
 8015e68:	2100      	movs	r1, #0
 8015e6a:	0092      	lsls	r2, r2, #2
 8015e6c:	f004 fe76 	bl	801ab5c <memset>
 8015e70:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015e72:	2200      	movs	r2, #0
 8015e74:	611a      	str	r2, [r3, #16]
 8015e76:	6a18      	ldr	r0, [r3, #32]
 8015e78:	b138      	cbz	r0, 8015e8a <rcl_wait_set_clear+0xc2>
 8015e7a:	69da      	ldr	r2, [r3, #28]
 8015e7c:	2100      	movs	r1, #0
 8015e7e:	0092      	lsls	r2, r2, #2
 8015e80:	f004 fe6c 	bl	801ab5c <memset>
 8015e84:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015e86:	2200      	movs	r2, #0
 8015e88:	61da      	str	r2, [r3, #28]
 8015e8a:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8015e8c:	b138      	cbz	r0, 8015e9e <rcl_wait_set_clear+0xd6>
 8015e8e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8015e90:	2100      	movs	r1, #0
 8015e92:	0092      	lsls	r2, r2, #2
 8015e94:	f004 fe62 	bl	801ab5c <memset>
 8015e98:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015e9a:	2200      	movs	r2, #0
 8015e9c:	629a      	str	r2, [r3, #40]	@ 0x28
 8015e9e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8015ea0:	b138      	cbz	r0, 8015eb2 <rcl_wait_set_clear+0xea>
 8015ea2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8015ea4:	2100      	movs	r1, #0
 8015ea6:	0092      	lsls	r2, r2, #2
 8015ea8:	f004 fe58 	bl	801ab5c <memset>
 8015eac:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015eae:	2000      	movs	r0, #0
 8015eb0:	6358      	str	r0, [r3, #52]	@ 0x34
 8015eb2:	bd10      	pop	{r4, pc}
 8015eb4:	200b      	movs	r0, #11
 8015eb6:	4770      	bx	lr
 8015eb8:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8015ebc:	bd10      	pop	{r4, pc}
 8015ebe:	bf00      	nop

08015ec0 <rcl_wait_set_resize>:
 8015ec0:	2800      	cmp	r0, #0
 8015ec2:	f000 8185 	beq.w	80161d0 <rcl_wait_set_resize+0x310>
 8015ec6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015eca:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 8015ecc:	b083      	sub	sp, #12
 8015ece:	4605      	mov	r5, r0
 8015ed0:	2c00      	cmp	r4, #0
 8015ed2:	f000 817f 	beq.w	80161d4 <rcl_wait_set_resize+0x314>
 8015ed6:	f04f 0900 	mov.w	r9, #0
 8015eda:	f8d4 a058 	ldr.w	sl, [r4, #88]	@ 0x58
 8015ede:	461f      	mov	r7, r3
 8015ee0:	4688      	mov	r8, r1
 8015ee2:	e9d4 b313 	ldrd	fp, r3, [r4, #76]	@ 0x4c
 8015ee6:	4616      	mov	r6, r2
 8015ee8:	f8c0 9004 	str.w	r9, [r0, #4]
 8015eec:	f8c4 9000 	str.w	r9, [r4]
 8015ef0:	2900      	cmp	r1, #0
 8015ef2:	f000 80bd 	beq.w	8016070 <rcl_wait_set_resize+0x1b0>
 8015ef6:	008c      	lsls	r4, r1, #2
 8015ef8:	6800      	ldr	r0, [r0, #0]
 8015efa:	9301      	str	r3, [sp, #4]
 8015efc:	4652      	mov	r2, sl
 8015efe:	4621      	mov	r1, r4
 8015f00:	4798      	blx	r3
 8015f02:	9b01      	ldr	r3, [sp, #4]
 8015f04:	6028      	str	r0, [r5, #0]
 8015f06:	2800      	cmp	r0, #0
 8015f08:	f000 80cb 	beq.w	80160a2 <rcl_wait_set_resize+0x1e2>
 8015f0c:	4622      	mov	r2, r4
 8015f0e:	4649      	mov	r1, r9
 8015f10:	9301      	str	r3, [sp, #4]
 8015f12:	f004 fe23 	bl	801ab5c <memset>
 8015f16:	f8c5 8004 	str.w	r8, [r5, #4]
 8015f1a:	f8d5 8030 	ldr.w	r8, [r5, #48]	@ 0x30
 8015f1e:	9b01      	ldr	r3, [sp, #4]
 8015f20:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8015f24:	f8c8 9004 	str.w	r9, [r8, #4]
 8015f28:	4652      	mov	r2, sl
 8015f2a:	4621      	mov	r1, r4
 8015f2c:	4798      	blx	r3
 8015f2e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8015f30:	f8c8 0008 	str.w	r0, [r8, #8]
 8015f34:	689b      	ldr	r3, [r3, #8]
 8015f36:	2b00      	cmp	r3, #0
 8015f38:	f000 80ac 	beq.w	8016094 <rcl_wait_set_resize+0x1d4>
 8015f3c:	4622      	mov	r2, r4
 8015f3e:	4649      	mov	r1, r9
 8015f40:	4618      	mov	r0, r3
 8015f42:	f004 fe0b 	bl	801ab5c <memset>
 8015f46:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8015f48:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8015f4c:	f04f 0800 	mov.w	r8, #0
 8015f50:	e9d4 2313 	ldrd	r2, r3, [r4, #76]	@ 0x4c
 8015f54:	f8c5 800c 	str.w	r8, [r5, #12]
 8015f58:	f8c4 800c 	str.w	r8, [r4, #12]
 8015f5c:	2e00      	cmp	r6, #0
 8015f5e:	f040 80a4 	bne.w	80160aa <rcl_wait_set_resize+0x1ea>
 8015f62:	68a8      	ldr	r0, [r5, #8]
 8015f64:	b128      	cbz	r0, 8015f72 <rcl_wait_set_resize+0xb2>
 8015f66:	4649      	mov	r1, r9
 8015f68:	4790      	blx	r2
 8015f6a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8015f6c:	60ae      	str	r6, [r5, #8]
 8015f6e:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8015f72:	f04f 0800 	mov.w	r8, #0
 8015f76:	19f6      	adds	r6, r6, r7
 8015f78:	f8c4 8010 	str.w	r8, [r4, #16]
 8015f7c:	f040 80ac 	bne.w	80160d8 <rcl_wait_set_resize+0x218>
 8015f80:	6960      	ldr	r0, [r4, #20]
 8015f82:	b130      	cbz	r0, 8015f92 <rcl_wait_set_resize+0xd2>
 8015f84:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8015f86:	4649      	mov	r1, r9
 8015f88:	4798      	blx	r3
 8015f8a:	6166      	str	r6, [r4, #20]
 8015f8c:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8015f8e:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8015f92:	2600      	movs	r6, #0
 8015f94:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 8015f98:	616e      	str	r6, [r5, #20]
 8015f9a:	6426      	str	r6, [r4, #64]	@ 0x40
 8015f9c:	2f00      	cmp	r7, #0
 8015f9e:	f040 80ad 	bne.w	80160fc <rcl_wait_set_resize+0x23c>
 8015fa2:	6928      	ldr	r0, [r5, #16]
 8015fa4:	b138      	cbz	r0, 8015fb6 <rcl_wait_set_resize+0xf6>
 8015fa6:	4649      	mov	r1, r9
 8015fa8:	47d0      	blx	sl
 8015faa:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8015fac:	612f      	str	r7, [r5, #16]
 8015fae:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 8015fb2:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8015fb6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015fb8:	2600      	movs	r6, #0
 8015fba:	61ee      	str	r6, [r5, #28]
 8015fbc:	61a6      	str	r6, [r4, #24]
 8015fbe:	2b00      	cmp	r3, #0
 8015fc0:	f040 80af 	bne.w	8016122 <rcl_wait_set_resize+0x262>
 8015fc4:	69a8      	ldr	r0, [r5, #24]
 8015fc6:	b120      	cbz	r0, 8015fd2 <rcl_wait_set_resize+0x112>
 8015fc8:	4649      	mov	r1, r9
 8015fca:	47d0      	blx	sl
 8015fcc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015fce:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8015fd0:	61ab      	str	r3, [r5, #24]
 8015fd2:	6a20      	ldr	r0, [r4, #32]
 8015fd4:	b128      	cbz	r0, 8015fe2 <rcl_wait_set_resize+0x122>
 8015fd6:	4649      	mov	r1, r9
 8015fd8:	47d0      	blx	sl
 8015fda:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8015fdc:	2300      	movs	r3, #0
 8015fde:	e9c4 3307 	strd	r3, r3, [r4, #28]
 8015fe2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8015fe4:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 8015fe6:	2600      	movs	r6, #0
 8015fe8:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 8015fec:	626e      	str	r6, [r5, #36]	@ 0x24
 8015fee:	6266      	str	r6, [r4, #36]	@ 0x24
 8015ff0:	2b00      	cmp	r3, #0
 8015ff2:	f000 80b6 	beq.w	8016162 <rcl_wait_set_resize+0x2a2>
 8015ff6:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 8015ffa:	6a28      	ldr	r0, [r5, #32]
 8015ffc:	463a      	mov	r2, r7
 8015ffe:	4651      	mov	r1, sl
 8016000:	47c8      	blx	r9
 8016002:	6228      	str	r0, [r5, #32]
 8016004:	2800      	cmp	r0, #0
 8016006:	d04c      	beq.n	80160a2 <rcl_wait_set_resize+0x1e2>
 8016008:	4652      	mov	r2, sl
 801600a:	4631      	mov	r1, r6
 801600c:	f004 fda6 	bl	801ab5c <memset>
 8016010:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8016012:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8016014:	626b      	str	r3, [r5, #36]	@ 0x24
 8016016:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8016018:	62a6      	str	r6, [r4, #40]	@ 0x28
 801601a:	463a      	mov	r2, r7
 801601c:	4651      	mov	r1, sl
 801601e:	47c8      	blx	r9
 8016020:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8016022:	62e0      	str	r0, [r4, #44]	@ 0x2c
 8016024:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 8016026:	2c00      	cmp	r4, #0
 8016028:	f000 80f0 	beq.w	801620c <rcl_wait_set_resize+0x34c>
 801602c:	4620      	mov	r0, r4
 801602e:	4652      	mov	r2, sl
 8016030:	4631      	mov	r1, r6
 8016032:	f004 fd93 	bl	801ab5c <memset>
 8016036:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8016038:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801603a:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 801603c:	2600      	movs	r6, #0
 801603e:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 8016042:	62ee      	str	r6, [r5, #44]	@ 0x2c
 8016044:	6326      	str	r6, [r4, #48]	@ 0x30
 8016046:	2b00      	cmp	r3, #0
 8016048:	f040 809d 	bne.w	8016186 <rcl_wait_set_resize+0x2c6>
 801604c:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 801604e:	b120      	cbz	r0, 801605a <rcl_wait_set_resize+0x19a>
 8016050:	4639      	mov	r1, r7
 8016052:	47c0      	blx	r8
 8016054:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016056:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8016058:	62ab      	str	r3, [r5, #40]	@ 0x28
 801605a:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 801605c:	b310      	cbz	r0, 80160a4 <rcl_wait_set_resize+0x1e4>
 801605e:	4639      	mov	r1, r7
 8016060:	47c0      	blx	r8
 8016062:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8016064:	2000      	movs	r0, #0
 8016066:	e9c3 000d 	strd	r0, r0, [r3, #52]	@ 0x34
 801606a:	b003      	add	sp, #12
 801606c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016070:	6800      	ldr	r0, [r0, #0]
 8016072:	b120      	cbz	r0, 801607e <rcl_wait_set_resize+0x1be>
 8016074:	4651      	mov	r1, sl
 8016076:	47d8      	blx	fp
 8016078:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801607a:	f8c5 8000 	str.w	r8, [r5]
 801607e:	68a0      	ldr	r0, [r4, #8]
 8016080:	2800      	cmp	r0, #0
 8016082:	f43f af61 	beq.w	8015f48 <rcl_wait_set_resize+0x88>
 8016086:	4651      	mov	r1, sl
 8016088:	47d8      	blx	fp
 801608a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801608c:	2300      	movs	r3, #0
 801608e:	e9c4 3301 	strd	r3, r3, [r4, #4]
 8016092:	e759      	b.n	8015f48 <rcl_wait_set_resize+0x88>
 8016094:	6828      	ldr	r0, [r5, #0]
 8016096:	9301      	str	r3, [sp, #4]
 8016098:	4651      	mov	r1, sl
 801609a:	47d8      	blx	fp
 801609c:	9b01      	ldr	r3, [sp, #4]
 801609e:	e9c5 3300 	strd	r3, r3, [r5]
 80160a2:	200a      	movs	r0, #10
 80160a4:	b003      	add	sp, #12
 80160a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80160aa:	00b4      	lsls	r4, r6, #2
 80160ac:	68a8      	ldr	r0, [r5, #8]
 80160ae:	464a      	mov	r2, r9
 80160b0:	4621      	mov	r1, r4
 80160b2:	4798      	blx	r3
 80160b4:	60a8      	str	r0, [r5, #8]
 80160b6:	2800      	cmp	r0, #0
 80160b8:	d0f3      	beq.n	80160a2 <rcl_wait_set_resize+0x1e2>
 80160ba:	4622      	mov	r2, r4
 80160bc:	4641      	mov	r1, r8
 80160be:	f004 fd4d 	bl	801ab5c <memset>
 80160c2:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80160c4:	60ee      	str	r6, [r5, #12]
 80160c6:	f04f 0800 	mov.w	r8, #0
 80160ca:	19f6      	adds	r6, r6, r7
 80160cc:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 80160d0:	f8c4 8010 	str.w	r8, [r4, #16]
 80160d4:	f43f af54 	beq.w	8015f80 <rcl_wait_set_resize+0xc0>
 80160d8:	00b6      	lsls	r6, r6, #2
 80160da:	464a      	mov	r2, r9
 80160dc:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 80160de:	6960      	ldr	r0, [r4, #20]
 80160e0:	4631      	mov	r1, r6
 80160e2:	4798      	blx	r3
 80160e4:	4681      	mov	r9, r0
 80160e6:	6160      	str	r0, [r4, #20]
 80160e8:	2800      	cmp	r0, #0
 80160ea:	d076      	beq.n	80161da <rcl_wait_set_resize+0x31a>
 80160ec:	4632      	mov	r2, r6
 80160ee:	4641      	mov	r1, r8
 80160f0:	f004 fd34 	bl	801ab5c <memset>
 80160f4:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80160f6:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 80160fa:	e74a      	b.n	8015f92 <rcl_wait_set_resize+0xd2>
 80160fc:	00bc      	lsls	r4, r7, #2
 80160fe:	6928      	ldr	r0, [r5, #16]
 8016100:	464a      	mov	r2, r9
 8016102:	4621      	mov	r1, r4
 8016104:	47c0      	blx	r8
 8016106:	6128      	str	r0, [r5, #16]
 8016108:	2800      	cmp	r0, #0
 801610a:	d0ca      	beq.n	80160a2 <rcl_wait_set_resize+0x1e2>
 801610c:	4622      	mov	r2, r4
 801610e:	4631      	mov	r1, r6
 8016110:	f004 fd24 	bl	801ab5c <memset>
 8016114:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8016116:	616f      	str	r7, [r5, #20]
 8016118:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 801611c:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8016120:	e749      	b.n	8015fb6 <rcl_wait_set_resize+0xf6>
 8016122:	009c      	lsls	r4, r3, #2
 8016124:	69a8      	ldr	r0, [r5, #24]
 8016126:	464a      	mov	r2, r9
 8016128:	4621      	mov	r1, r4
 801612a:	47c0      	blx	r8
 801612c:	61a8      	str	r0, [r5, #24]
 801612e:	2800      	cmp	r0, #0
 8016130:	d0b7      	beq.n	80160a2 <rcl_wait_set_resize+0x1e2>
 8016132:	4622      	mov	r2, r4
 8016134:	4631      	mov	r1, r6
 8016136:	f004 fd11 	bl	801ab5c <memset>
 801613a:	6b2f      	ldr	r7, [r5, #48]	@ 0x30
 801613c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801613e:	61eb      	str	r3, [r5, #28]
 8016140:	6a38      	ldr	r0, [r7, #32]
 8016142:	61fe      	str	r6, [r7, #28]
 8016144:	464a      	mov	r2, r9
 8016146:	4621      	mov	r1, r4
 8016148:	47c0      	blx	r8
 801614a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801614c:	6238      	str	r0, [r7, #32]
 801614e:	6a1f      	ldr	r7, [r3, #32]
 8016150:	2f00      	cmp	r7, #0
 8016152:	d054      	beq.n	80161fe <rcl_wait_set_resize+0x33e>
 8016154:	4622      	mov	r2, r4
 8016156:	4631      	mov	r1, r6
 8016158:	4638      	mov	r0, r7
 801615a:	f004 fcff 	bl	801ab5c <memset>
 801615e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8016160:	e73f      	b.n	8015fe2 <rcl_wait_set_resize+0x122>
 8016162:	6a28      	ldr	r0, [r5, #32]
 8016164:	b120      	cbz	r0, 8016170 <rcl_wait_set_resize+0x2b0>
 8016166:	4639      	mov	r1, r7
 8016168:	47c0      	blx	r8
 801616a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801616c:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801616e:	622b      	str	r3, [r5, #32]
 8016170:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8016172:	2800      	cmp	r0, #0
 8016174:	f43f af60 	beq.w	8016038 <rcl_wait_set_resize+0x178>
 8016178:	4639      	mov	r1, r7
 801617a:	47c0      	blx	r8
 801617c:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801617e:	2300      	movs	r3, #0
 8016180:	e9c4 330a 	strd	r3, r3, [r4, #40]	@ 0x28
 8016184:	e758      	b.n	8016038 <rcl_wait_set_resize+0x178>
 8016186:	009c      	lsls	r4, r3, #2
 8016188:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 801618a:	463a      	mov	r2, r7
 801618c:	4621      	mov	r1, r4
 801618e:	47c8      	blx	r9
 8016190:	62a8      	str	r0, [r5, #40]	@ 0x28
 8016192:	2800      	cmp	r0, #0
 8016194:	d085      	beq.n	80160a2 <rcl_wait_set_resize+0x1e2>
 8016196:	4622      	mov	r2, r4
 8016198:	4631      	mov	r1, r6
 801619a:	f004 fcdf 	bl	801ab5c <memset>
 801619e:	f8d5 a030 	ldr.w	sl, [r5, #48]	@ 0x30
 80161a2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80161a4:	62eb      	str	r3, [r5, #44]	@ 0x2c
 80161a6:	f8da 0038 	ldr.w	r0, [sl, #56]	@ 0x38
 80161aa:	f8ca 6034 	str.w	r6, [sl, #52]	@ 0x34
 80161ae:	463a      	mov	r2, r7
 80161b0:	4621      	mov	r1, r4
 80161b2:	47c8      	blx	r9
 80161b4:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80161b6:	f8ca 0038 	str.w	r0, [sl, #56]	@ 0x38
 80161ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80161bc:	b36b      	cbz	r3, 801621a <rcl_wait_set_resize+0x35a>
 80161be:	4622      	mov	r2, r4
 80161c0:	4631      	mov	r1, r6
 80161c2:	4618      	mov	r0, r3
 80161c4:	f004 fcca 	bl	801ab5c <memset>
 80161c8:	4630      	mov	r0, r6
 80161ca:	b003      	add	sp, #12
 80161cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80161d0:	200b      	movs	r0, #11
 80161d2:	4770      	bx	lr
 80161d4:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80161d8:	e764      	b.n	80160a4 <rcl_wait_set_resize+0x1e4>
 80161da:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80161dc:	68a8      	ldr	r0, [r5, #8]
 80161de:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 80161e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80161e2:	4798      	blx	r3
 80161e4:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80161e6:	6928      	ldr	r0, [r5, #16]
 80161e8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80161ea:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 80161ec:	f8c5 900c 	str.w	r9, [r5, #12]
 80161f0:	f8c5 9008 	str.w	r9, [r5, #8]
 80161f4:	4790      	blx	r2
 80161f6:	e9c5 9904 	strd	r9, r9, [r5, #16]
 80161fa:	200a      	movs	r0, #10
 80161fc:	e752      	b.n	80160a4 <rcl_wait_set_resize+0x1e4>
 80161fe:	69a8      	ldr	r0, [r5, #24]
 8016200:	4649      	mov	r1, r9
 8016202:	47d0      	blx	sl
 8016204:	e9c5 7706 	strd	r7, r7, [r5, #24]
 8016208:	200a      	movs	r0, #10
 801620a:	e74b      	b.n	80160a4 <rcl_wait_set_resize+0x1e4>
 801620c:	6a28      	ldr	r0, [r5, #32]
 801620e:	4639      	mov	r1, r7
 8016210:	47c0      	blx	r8
 8016212:	e9c5 4408 	strd	r4, r4, [r5, #32]
 8016216:	200a      	movs	r0, #10
 8016218:	e744      	b.n	80160a4 <rcl_wait_set_resize+0x1e4>
 801621a:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 801621c:	9301      	str	r3, [sp, #4]
 801621e:	4639      	mov	r1, r7
 8016220:	47c0      	blx	r8
 8016222:	9b01      	ldr	r3, [sp, #4]
 8016224:	200a      	movs	r0, #10
 8016226:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 801622a:	e73b      	b.n	80160a4 <rcl_wait_set_resize+0x1e4>

0801622c <rcl_wait_set_init>:
 801622c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016230:	b084      	sub	sp, #16
 8016232:	4604      	mov	r4, r0
 8016234:	a810      	add	r0, sp, #64	@ 0x40
 8016236:	f8dd a03c 	ldr.w	sl, [sp, #60]	@ 0x3c
 801623a:	460f      	mov	r7, r1
 801623c:	4690      	mov	r8, r2
 801623e:	4699      	mov	r9, r3
 8016240:	f7f8 ff94 	bl	800f16c <rcutils_allocator_is_valid>
 8016244:	2800      	cmp	r0, #0
 8016246:	d06b      	beq.n	8016320 <rcl_wait_set_init+0xf4>
 8016248:	2c00      	cmp	r4, #0
 801624a:	d069      	beq.n	8016320 <rcl_wait_set_init+0xf4>
 801624c:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801624e:	b125      	cbz	r5, 801625a <rcl_wait_set_init+0x2e>
 8016250:	2564      	movs	r5, #100	@ 0x64
 8016252:	4628      	mov	r0, r5
 8016254:	b004      	add	sp, #16
 8016256:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801625a:	f1ba 0f00 	cmp.w	sl, #0
 801625e:	d05f      	beq.n	8016320 <rcl_wait_set_init+0xf4>
 8016260:	4650      	mov	r0, sl
 8016262:	f7fe fbad 	bl	80149c0 <rcl_context_is_valid>
 8016266:	2800      	cmp	r0, #0
 8016268:	d067      	beq.n	801633a <rcl_wait_set_init+0x10e>
 801626a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801626c:	9914      	ldr	r1, [sp, #80]	@ 0x50
 801626e:	205c      	movs	r0, #92	@ 0x5c
 8016270:	4798      	blx	r3
 8016272:	6320      	str	r0, [r4, #48]	@ 0x30
 8016274:	2800      	cmp	r0, #0
 8016276:	d062      	beq.n	801633e <rcl_wait_set_init+0x112>
 8016278:	4629      	mov	r1, r5
 801627a:	225c      	movs	r2, #92	@ 0x5c
 801627c:	f004 fc6e 	bl	801ab5c <memset>
 8016280:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	@ 0x34
 8016284:	eb03 0e02 	add.w	lr, r3, r2
 8016288:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801628a:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 801628c:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 8016290:	449e      	add	lr, r3
 8016292:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8016296:	e9c6 5501 	strd	r5, r5, [r6, #4]
 801629a:	e9c6 5504 	strd	r5, r5, [r6, #16]
 801629e:	e9c6 5507 	strd	r5, r5, [r6, #28]
 80162a2:	e9c6 550a 	strd	r5, r5, [r6, #40]	@ 0x28
 80162a6:	e9c6 550d 	strd	r5, r5, [r6, #52]	@ 0x34
 80162aa:	f106 0548 	add.w	r5, r6, #72	@ 0x48
 80162ae:	f8c6 a044 	str.w	sl, [r6, #68]	@ 0x44
 80162b2:	f8da a000 	ldr.w	sl, [sl]
 80162b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80162b8:	44c6      	add	lr, r8
 80162ba:	f8dc 3000 	ldr.w	r3, [ip]
 80162be:	602b      	str	r3, [r5, #0]
 80162c0:	eb0e 0147 	add.w	r1, lr, r7, lsl #1
 80162c4:	f10a 0028 	add.w	r0, sl, #40	@ 0x28
 80162c8:	f002 fa0c 	bl	80186e4 <rmw_create_wait_set>
 80162cc:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80162ce:	63f0      	str	r0, [r6, #60]	@ 0x3c
 80162d0:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80162d2:	b350      	cbz	r0, 801632a <rcl_wait_set_init+0xfe>
 80162d4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80162d6:	9302      	str	r3, [sp, #8]
 80162d8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80162da:	9301      	str	r3, [sp, #4]
 80162dc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80162de:	9300      	str	r3, [sp, #0]
 80162e0:	4642      	mov	r2, r8
 80162e2:	464b      	mov	r3, r9
 80162e4:	4639      	mov	r1, r7
 80162e6:	4620      	mov	r0, r4
 80162e8:	f7ff fdea 	bl	8015ec0 <rcl_wait_set_resize>
 80162ec:	4605      	mov	r5, r0
 80162ee:	2800      	cmp	r0, #0
 80162f0:	d0af      	beq.n	8016252 <rcl_wait_set_init+0x26>
 80162f2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80162f4:	bb2b      	cbnz	r3, 8016342 <rcl_wait_set_init+0x116>
 80162f6:	2600      	movs	r6, #0
 80162f8:	e9cd 6601 	strd	r6, r6, [sp, #4]
 80162fc:	9600      	str	r6, [sp, #0]
 80162fe:	4633      	mov	r3, r6
 8016300:	4632      	mov	r2, r6
 8016302:	4631      	mov	r1, r6
 8016304:	4620      	mov	r0, r4
 8016306:	f7ff fddb 	bl	8015ec0 <rcl_wait_set_resize>
 801630a:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 801630c:	2800      	cmp	r0, #0
 801630e:	d0a0      	beq.n	8016252 <rcl_wait_set_init+0x26>
 8016310:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 8016312:	6d81      	ldr	r1, [r0, #88]	@ 0x58
 8016314:	4798      	blx	r3
 8016316:	4628      	mov	r0, r5
 8016318:	6326      	str	r6, [r4, #48]	@ 0x30
 801631a:	b004      	add	sp, #16
 801631c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016320:	250b      	movs	r5, #11
 8016322:	4628      	mov	r0, r5
 8016324:	b004      	add	sp, #16
 8016326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801632a:	2501      	movs	r5, #1
 801632c:	f002 f9e4 	bl	80186f8 <rmw_destroy_wait_set>
 8016330:	2800      	cmp	r0, #0
 8016332:	bf18      	it	ne
 8016334:	f44f 7561 	movne.w	r5, #900	@ 0x384
 8016338:	e7dd      	b.n	80162f6 <rcl_wait_set_init+0xca>
 801633a:	2565      	movs	r5, #101	@ 0x65
 801633c:	e789      	b.n	8016252 <rcl_wait_set_init+0x26>
 801633e:	250a      	movs	r5, #10
 8016340:	e787      	b.n	8016252 <rcl_wait_set_init+0x26>
 8016342:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8016344:	e7f2      	b.n	801632c <rcl_wait_set_init+0x100>
 8016346:	bf00      	nop

08016348 <rcl_wait_set_add_guard_condition>:
 8016348:	b318      	cbz	r0, 8016392 <rcl_wait_set_add_guard_condition+0x4a>
 801634a:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801634c:	b570      	push	{r4, r5, r6, lr}
 801634e:	4604      	mov	r4, r0
 8016350:	b30b      	cbz	r3, 8016396 <rcl_wait_set_add_guard_condition+0x4e>
 8016352:	b319      	cbz	r1, 801639c <rcl_wait_set_add_guard_condition+0x54>
 8016354:	68dd      	ldr	r5, [r3, #12]
 8016356:	68c0      	ldr	r0, [r0, #12]
 8016358:	4285      	cmp	r5, r0
 801635a:	d217      	bcs.n	801638c <rcl_wait_set_add_guard_condition+0x44>
 801635c:	68a0      	ldr	r0, [r4, #8]
 801635e:	1c6e      	adds	r6, r5, #1
 8016360:	60de      	str	r6, [r3, #12]
 8016362:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8016366:	b102      	cbz	r2, 801636a <rcl_wait_set_add_guard_condition+0x22>
 8016368:	6015      	str	r5, [r2, #0]
 801636a:	4608      	mov	r0, r1
 801636c:	f003 fd70 	bl	8019e50 <rcl_guard_condition_get_rmw_handle>
 8016370:	b150      	cbz	r0, 8016388 <rcl_wait_set_add_guard_condition+0x40>
 8016372:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8016374:	6842      	ldr	r2, [r0, #4]
 8016376:	695b      	ldr	r3, [r3, #20]
 8016378:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801637c:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 801637e:	6913      	ldr	r3, [r2, #16]
 8016380:	3301      	adds	r3, #1
 8016382:	2000      	movs	r0, #0
 8016384:	6113      	str	r3, [r2, #16]
 8016386:	bd70      	pop	{r4, r5, r6, pc}
 8016388:	2001      	movs	r0, #1
 801638a:	bd70      	pop	{r4, r5, r6, pc}
 801638c:	f240 3086 	movw	r0, #902	@ 0x386
 8016390:	bd70      	pop	{r4, r5, r6, pc}
 8016392:	200b      	movs	r0, #11
 8016394:	4770      	bx	lr
 8016396:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801639a:	bd70      	pop	{r4, r5, r6, pc}
 801639c:	200b      	movs	r0, #11
 801639e:	bd70      	pop	{r4, r5, r6, pc}

080163a0 <rcl_wait_set_add_timer>:
 80163a0:	b328      	cbz	r0, 80163ee <rcl_wait_set_add_timer+0x4e>
 80163a2:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80163a4:	b570      	push	{r4, r5, r6, lr}
 80163a6:	4604      	mov	r4, r0
 80163a8:	b31b      	cbz	r3, 80163f2 <rcl_wait_set_add_timer+0x52>
 80163aa:	b329      	cbz	r1, 80163f8 <rcl_wait_set_add_timer+0x58>
 80163ac:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 80163ae:	6965      	ldr	r5, [r4, #20]
 80163b0:	42a8      	cmp	r0, r5
 80163b2:	d219      	bcs.n	80163e8 <rcl_wait_set_add_timer+0x48>
 80163b4:	6925      	ldr	r5, [r4, #16]
 80163b6:	1c46      	adds	r6, r0, #1
 80163b8:	641e      	str	r6, [r3, #64]	@ 0x40
 80163ba:	f845 1020 	str.w	r1, [r5, r0, lsl #2]
 80163be:	b102      	cbz	r2, 80163c2 <rcl_wait_set_add_timer+0x22>
 80163c0:	6010      	str	r0, [r2, #0]
 80163c2:	4608      	mov	r0, r1
 80163c4:	f7ff fc10 	bl	8015be8 <rcl_timer_get_guard_condition>
 80163c8:	b168      	cbz	r0, 80163e6 <rcl_wait_set_add_timer+0x46>
 80163ca:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80163cc:	68e3      	ldr	r3, [r4, #12]
 80163ce:	6c15      	ldr	r5, [r2, #64]	@ 0x40
 80163d0:	3b01      	subs	r3, #1
 80163d2:	441d      	add	r5, r3
 80163d4:	f003 fd3c 	bl	8019e50 <rcl_guard_condition_get_rmw_handle>
 80163d8:	b180      	cbz	r0, 80163fc <rcl_wait_set_add_timer+0x5c>
 80163da:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80163dc:	6842      	ldr	r2, [r0, #4]
 80163de:	695b      	ldr	r3, [r3, #20]
 80163e0:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80163e4:	2000      	movs	r0, #0
 80163e6:	bd70      	pop	{r4, r5, r6, pc}
 80163e8:	f240 3086 	movw	r0, #902	@ 0x386
 80163ec:	bd70      	pop	{r4, r5, r6, pc}
 80163ee:	200b      	movs	r0, #11
 80163f0:	4770      	bx	lr
 80163f2:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80163f6:	bd70      	pop	{r4, r5, r6, pc}
 80163f8:	200b      	movs	r0, #11
 80163fa:	bd70      	pop	{r4, r5, r6, pc}
 80163fc:	2001      	movs	r0, #1
 80163fe:	bd70      	pop	{r4, r5, r6, pc}

08016400 <rcl_wait_set_add_client>:
 8016400:	b318      	cbz	r0, 801644a <rcl_wait_set_add_client+0x4a>
 8016402:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8016404:	b570      	push	{r4, r5, r6, lr}
 8016406:	4604      	mov	r4, r0
 8016408:	b30b      	cbz	r3, 801644e <rcl_wait_set_add_client+0x4e>
 801640a:	b319      	cbz	r1, 8016454 <rcl_wait_set_add_client+0x54>
 801640c:	699d      	ldr	r5, [r3, #24]
 801640e:	69c0      	ldr	r0, [r0, #28]
 8016410:	4285      	cmp	r5, r0
 8016412:	d217      	bcs.n	8016444 <rcl_wait_set_add_client+0x44>
 8016414:	69a0      	ldr	r0, [r4, #24]
 8016416:	1c6e      	adds	r6, r5, #1
 8016418:	619e      	str	r6, [r3, #24]
 801641a:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 801641e:	b102      	cbz	r2, 8016422 <rcl_wait_set_add_client+0x22>
 8016420:	6015      	str	r5, [r2, #0]
 8016422:	4608      	mov	r0, r1
 8016424:	f7fe fa20 	bl	8014868 <rcl_client_get_rmw_handle>
 8016428:	b150      	cbz	r0, 8016440 <rcl_wait_set_add_client+0x40>
 801642a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801642c:	6842      	ldr	r2, [r0, #4]
 801642e:	6a1b      	ldr	r3, [r3, #32]
 8016430:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8016434:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8016436:	69d3      	ldr	r3, [r2, #28]
 8016438:	3301      	adds	r3, #1
 801643a:	2000      	movs	r0, #0
 801643c:	61d3      	str	r3, [r2, #28]
 801643e:	bd70      	pop	{r4, r5, r6, pc}
 8016440:	2001      	movs	r0, #1
 8016442:	bd70      	pop	{r4, r5, r6, pc}
 8016444:	f240 3086 	movw	r0, #902	@ 0x386
 8016448:	bd70      	pop	{r4, r5, r6, pc}
 801644a:	200b      	movs	r0, #11
 801644c:	4770      	bx	lr
 801644e:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8016452:	bd70      	pop	{r4, r5, r6, pc}
 8016454:	200b      	movs	r0, #11
 8016456:	bd70      	pop	{r4, r5, r6, pc}

08016458 <rcl_wait_set_add_service>:
 8016458:	b318      	cbz	r0, 80164a2 <rcl_wait_set_add_service+0x4a>
 801645a:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801645c:	b570      	push	{r4, r5, r6, lr}
 801645e:	4604      	mov	r4, r0
 8016460:	b30b      	cbz	r3, 80164a6 <rcl_wait_set_add_service+0x4e>
 8016462:	b319      	cbz	r1, 80164ac <rcl_wait_set_add_service+0x54>
 8016464:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 8016466:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8016468:	4285      	cmp	r5, r0
 801646a:	d217      	bcs.n	801649c <rcl_wait_set_add_service+0x44>
 801646c:	6a20      	ldr	r0, [r4, #32]
 801646e:	1c6e      	adds	r6, r5, #1
 8016470:	625e      	str	r6, [r3, #36]	@ 0x24
 8016472:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8016476:	b102      	cbz	r2, 801647a <rcl_wait_set_add_service+0x22>
 8016478:	6015      	str	r5, [r2, #0]
 801647a:	4608      	mov	r0, r1
 801647c:	f7fe fe62 	bl	8015144 <rcl_service_get_rmw_handle>
 8016480:	b150      	cbz	r0, 8016498 <rcl_wait_set_add_service+0x40>
 8016482:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8016484:	6842      	ldr	r2, [r0, #4]
 8016486:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016488:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801648c:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 801648e:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 8016490:	3301      	adds	r3, #1
 8016492:	2000      	movs	r0, #0
 8016494:	6293      	str	r3, [r2, #40]	@ 0x28
 8016496:	bd70      	pop	{r4, r5, r6, pc}
 8016498:	2001      	movs	r0, #1
 801649a:	bd70      	pop	{r4, r5, r6, pc}
 801649c:	f240 3086 	movw	r0, #902	@ 0x386
 80164a0:	bd70      	pop	{r4, r5, r6, pc}
 80164a2:	200b      	movs	r0, #11
 80164a4:	4770      	bx	lr
 80164a6:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80164aa:	bd70      	pop	{r4, r5, r6, pc}
 80164ac:	200b      	movs	r0, #11
 80164ae:	bd70      	pop	{r4, r5, r6, pc}

080164b0 <rcl_wait>:
 80164b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80164b4:	ed2d 8b02 	vpush	{d8}
 80164b8:	b08d      	sub	sp, #52	@ 0x34
 80164ba:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80164be:	2800      	cmp	r0, #0
 80164c0:	f000 8143 	beq.w	801674a <rcl_wait+0x29a>
 80164c4:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 80164c6:	4605      	mov	r5, r0
 80164c8:	2e00      	cmp	r6, #0
 80164ca:	f000 8112 	beq.w	80166f2 <rcl_wait+0x242>
 80164ce:	6843      	ldr	r3, [r0, #4]
 80164d0:	b983      	cbnz	r3, 80164f4 <rcl_wait+0x44>
 80164d2:	68eb      	ldr	r3, [r5, #12]
 80164d4:	b973      	cbnz	r3, 80164f4 <rcl_wait+0x44>
 80164d6:	696b      	ldr	r3, [r5, #20]
 80164d8:	b963      	cbnz	r3, 80164f4 <rcl_wait+0x44>
 80164da:	69eb      	ldr	r3, [r5, #28]
 80164dc:	b953      	cbnz	r3, 80164f4 <rcl_wait+0x44>
 80164de:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 80164e0:	b943      	cbnz	r3, 80164f4 <rcl_wait+0x44>
 80164e2:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 80164e4:	b933      	cbnz	r3, 80164f4 <rcl_wait+0x44>
 80164e6:	f240 3085 	movw	r0, #901	@ 0x385
 80164ea:	b00d      	add	sp, #52	@ 0x34
 80164ec:	ecbd 8b02 	vpop	{d8}
 80164f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80164f4:	9b04      	ldr	r3, [sp, #16]
 80164f6:	6c32      	ldr	r2, [r6, #64]	@ 0x40
 80164f8:	2b01      	cmp	r3, #1
 80164fa:	9b05      	ldr	r3, [sp, #20]
 80164fc:	f173 0300 	sbcs.w	r3, r3, #0
 8016500:	f2c0 80f0 	blt.w	80166e4 <rcl_wait+0x234>
 8016504:	e9dd 8704 	ldrd	r8, r7, [sp, #16]
 8016508:	4643      	mov	r3, r8
 801650a:	2a00      	cmp	r2, #0
 801650c:	f000 8133 	beq.w	8016776 <rcl_wait+0x2c6>
 8016510:	2400      	movs	r4, #0
 8016512:	4613      	mov	r3, r2
 8016514:	ed9f 8b9c 	vldr	d8, [pc, #624]	@ 8016788 <rcl_wait+0x2d8>
 8016518:	46a2      	mov	sl, r4
 801651a:	46a3      	mov	fp, r4
 801651c:	f240 3921 	movw	r9, #801	@ 0x321
 8016520:	4632      	mov	r2, r6
 8016522:	e014      	b.n	801654e <rcl_wait+0x9e>
 8016524:	2800      	cmp	r0, #0
 8016526:	d1e0      	bne.n	80164ea <rcl_wait+0x3a>
 8016528:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801652c:	4542      	cmp	r2, r8
 801652e:	eb73 0107 	sbcs.w	r1, r3, r7
 8016532:	da03      	bge.n	801653c <rcl_wait+0x8c>
 8016534:	4690      	mov	r8, r2
 8016536:	461f      	mov	r7, r3
 8016538:	f04f 0b01 	mov.w	fp, #1
 801653c:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 801653e:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8016540:	3401      	adds	r4, #1
 8016542:	f14a 0a00 	adc.w	sl, sl, #0
 8016546:	429c      	cmp	r4, r3
 8016548:	f17a 0100 	sbcs.w	r1, sl, #0
 801654c:	d228      	bcs.n	80165a0 <rcl_wait+0xf0>
 801654e:	6928      	ldr	r0, [r5, #16]
 8016550:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8016554:	a908      	add	r1, sp, #32
 8016556:	00a6      	lsls	r6, r4, #2
 8016558:	2800      	cmp	r0, #0
 801655a:	d0f1      	beq.n	8016540 <rcl_wait+0x90>
 801655c:	68eb      	ldr	r3, [r5, #12]
 801655e:	f8d2 c014 	ldr.w	ip, [r2, #20]
 8016562:	4423      	add	r3, r4
 8016564:	f85c e023 	ldr.w	lr, [ip, r3, lsl #2]
 8016568:	f1be 0f00 	cmp.w	lr, #0
 801656c:	d006      	beq.n	801657c <rcl_wait+0xcc>
 801656e:	6913      	ldr	r3, [r2, #16]
 8016570:	f84c e023 	str.w	lr, [ip, r3, lsl #2]
 8016574:	3301      	adds	r3, #1
 8016576:	6113      	str	r3, [r2, #16]
 8016578:	692b      	ldr	r3, [r5, #16]
 801657a:	5998      	ldr	r0, [r3, r6]
 801657c:	ed8d 8b08 	vstr	d8, [sp, #32]
 8016580:	f7ff fb00 	bl	8015b84 <rcl_timer_get_time_until_next_call>
 8016584:	4548      	cmp	r0, r9
 8016586:	d1cd      	bne.n	8016524 <rcl_wait+0x74>
 8016588:	692b      	ldr	r3, [r5, #16]
 801658a:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 801658c:	2100      	movs	r1, #0
 801658e:	5199      	str	r1, [r3, r6]
 8016590:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8016592:	3401      	adds	r4, #1
 8016594:	f14a 0a00 	adc.w	sl, sl, #0
 8016598:	429c      	cmp	r4, r3
 801659a:	f17a 0100 	sbcs.w	r1, sl, #0
 801659e:	d3d6      	bcc.n	801654e <rcl_wait+0x9e>
 80165a0:	4616      	mov	r6, r2
 80165a2:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 80165a6:	4313      	orrs	r3, r2
 80165a8:	46d9      	mov	r9, fp
 80165aa:	f040 80a9 	bne.w	8016700 <rcl_wait+0x250>
 80165ae:	2300      	movs	r3, #0
 80165b0:	2200      	movs	r2, #0
 80165b2:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80165b6:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 80165ba:	ab08      	add	r3, sp, #32
 80165bc:	9302      	str	r3, [sp, #8]
 80165be:	6bf2      	ldr	r2, [r6, #60]	@ 0x3c
 80165c0:	f106 0334 	add.w	r3, r6, #52	@ 0x34
 80165c4:	e9cd 3200 	strd	r3, r2, [sp]
 80165c8:	f106 0110 	add.w	r1, r6, #16
 80165cc:	f106 031c 	add.w	r3, r6, #28
 80165d0:	f106 0228 	add.w	r2, r6, #40	@ 0x28
 80165d4:	1d30      	adds	r0, r6, #4
 80165d6:	f001 ff0d 	bl	80183f4 <rmw_wait>
 80165da:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80165dc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80165de:	4680      	mov	r8, r0
 80165e0:	b1ca      	cbz	r2, 8016616 <rcl_wait+0x166>
 80165e2:	2400      	movs	r4, #0
 80165e4:	4627      	mov	r7, r4
 80165e6:	692a      	ldr	r2, [r5, #16]
 80165e8:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
 80165ec:	f10d 011f 	add.w	r1, sp, #31
 80165f0:	00a6      	lsls	r6, r4, #2
 80165f2:	b160      	cbz	r0, 801660e <rcl_wait+0x15e>
 80165f4:	f88d 701f 	strb.w	r7, [sp, #31]
 80165f8:	f7ff fa8a 	bl	8015b10 <rcl_timer_is_ready>
 80165fc:	2800      	cmp	r0, #0
 80165fe:	f47f af74 	bne.w	80164ea <rcl_wait+0x3a>
 8016602:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8016606:	b90b      	cbnz	r3, 801660c <rcl_wait+0x15c>
 8016608:	692a      	ldr	r2, [r5, #16]
 801660a:	5193      	str	r3, [r2, r6]
 801660c:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801660e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8016610:	3401      	adds	r4, #1
 8016612:	42a2      	cmp	r2, r4
 8016614:	d8e7      	bhi.n	80165e6 <rcl_wait+0x136>
 8016616:	f038 0002 	bics.w	r0, r8, #2
 801661a:	f040 8090 	bne.w	801673e <rcl_wait+0x28e>
 801661e:	686e      	ldr	r6, [r5, #4]
 8016620:	4602      	mov	r2, r0
 8016622:	b91e      	cbnz	r6, 801662c <rcl_wait+0x17c>
 8016624:	e00d      	b.n	8016642 <rcl_wait+0x192>
 8016626:	3201      	adds	r2, #1
 8016628:	42b2      	cmp	r2, r6
 801662a:	d00a      	beq.n	8016642 <rcl_wait+0x192>
 801662c:	6899      	ldr	r1, [r3, #8]
 801662e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8016632:	2900      	cmp	r1, #0
 8016634:	d1f7      	bne.n	8016626 <rcl_wait+0x176>
 8016636:	682c      	ldr	r4, [r5, #0]
 8016638:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 801663c:	3201      	adds	r2, #1
 801663e:	42b2      	cmp	r2, r6
 8016640:	d1f4      	bne.n	801662c <rcl_wait+0x17c>
 8016642:	68ee      	ldr	r6, [r5, #12]
 8016644:	2200      	movs	r2, #0
 8016646:	b91e      	cbnz	r6, 8016650 <rcl_wait+0x1a0>
 8016648:	e00d      	b.n	8016666 <rcl_wait+0x1b6>
 801664a:	3201      	adds	r2, #1
 801664c:	42b2      	cmp	r2, r6
 801664e:	d00a      	beq.n	8016666 <rcl_wait+0x1b6>
 8016650:	6959      	ldr	r1, [r3, #20]
 8016652:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8016656:	2900      	cmp	r1, #0
 8016658:	d1f7      	bne.n	801664a <rcl_wait+0x19a>
 801665a:	68ac      	ldr	r4, [r5, #8]
 801665c:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8016660:	3201      	adds	r2, #1
 8016662:	42b2      	cmp	r2, r6
 8016664:	d1f4      	bne.n	8016650 <rcl_wait+0x1a0>
 8016666:	69ee      	ldr	r6, [r5, #28]
 8016668:	2200      	movs	r2, #0
 801666a:	b91e      	cbnz	r6, 8016674 <rcl_wait+0x1c4>
 801666c:	e00d      	b.n	801668a <rcl_wait+0x1da>
 801666e:	3201      	adds	r2, #1
 8016670:	42b2      	cmp	r2, r6
 8016672:	d00a      	beq.n	801668a <rcl_wait+0x1da>
 8016674:	6a19      	ldr	r1, [r3, #32]
 8016676:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801667a:	2900      	cmp	r1, #0
 801667c:	d1f7      	bne.n	801666e <rcl_wait+0x1be>
 801667e:	69ac      	ldr	r4, [r5, #24]
 8016680:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8016684:	3201      	adds	r2, #1
 8016686:	42b2      	cmp	r2, r6
 8016688:	d1f4      	bne.n	8016674 <rcl_wait+0x1c4>
 801668a:	6a6e      	ldr	r6, [r5, #36]	@ 0x24
 801668c:	2200      	movs	r2, #0
 801668e:	b91e      	cbnz	r6, 8016698 <rcl_wait+0x1e8>
 8016690:	e00d      	b.n	80166ae <rcl_wait+0x1fe>
 8016692:	3201      	adds	r2, #1
 8016694:	4296      	cmp	r6, r2
 8016696:	d00a      	beq.n	80166ae <rcl_wait+0x1fe>
 8016698:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 801669a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801669e:	2900      	cmp	r1, #0
 80166a0:	d1f7      	bne.n	8016692 <rcl_wait+0x1e2>
 80166a2:	6a2c      	ldr	r4, [r5, #32]
 80166a4:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 80166a8:	3201      	adds	r2, #1
 80166aa:	4296      	cmp	r6, r2
 80166ac:	d1f4      	bne.n	8016698 <rcl_wait+0x1e8>
 80166ae:	6aee      	ldr	r6, [r5, #44]	@ 0x2c
 80166b0:	2200      	movs	r2, #0
 80166b2:	b91e      	cbnz	r6, 80166bc <rcl_wait+0x20c>
 80166b4:	e00d      	b.n	80166d2 <rcl_wait+0x222>
 80166b6:	3201      	adds	r2, #1
 80166b8:	42b2      	cmp	r2, r6
 80166ba:	d00a      	beq.n	80166d2 <rcl_wait+0x222>
 80166bc:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 80166be:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80166c2:	2900      	cmp	r1, #0
 80166c4:	d1f7      	bne.n	80166b6 <rcl_wait+0x206>
 80166c6:	6aac      	ldr	r4, [r5, #40]	@ 0x28
 80166c8:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 80166cc:	3201      	adds	r2, #1
 80166ce:	42b2      	cmp	r2, r6
 80166d0:	d1f4      	bne.n	80166bc <rcl_wait+0x20c>
 80166d2:	f1b8 0f02 	cmp.w	r8, #2
 80166d6:	f47f af08 	bne.w	80164ea <rcl_wait+0x3a>
 80166da:	464b      	mov	r3, r9
 80166dc:	2b00      	cmp	r3, #0
 80166de:	bf08      	it	eq
 80166e0:	2002      	moveq	r0, #2
 80166e2:	e702      	b.n	80164ea <rcl_wait+0x3a>
 80166e4:	2a00      	cmp	r2, #0
 80166e6:	d03a      	beq.n	801675e <rcl_wait+0x2ae>
 80166e8:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 80166ec:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 80166f0:	e70e      	b.n	8016510 <rcl_wait+0x60>
 80166f2:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80166f6:	b00d      	add	sp, #52	@ 0x34
 80166f8:	ecbd 8b02 	vpop	{d8}
 80166fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016700:	9b04      	ldr	r3, [sp, #16]
 8016702:	2b01      	cmp	r3, #1
 8016704:	9b05      	ldr	r3, [sp, #20]
 8016706:	f173 0300 	sbcs.w	r3, r3, #0
 801670a:	db24      	blt.n	8016756 <rcl_wait+0x2a6>
 801670c:	2f00      	cmp	r7, #0
 801670e:	bfbc      	itt	lt
 8016710:	f04f 0800 	movlt.w	r8, #0
 8016714:	4647      	movlt	r7, r8
 8016716:	a31e      	add	r3, pc, #120	@ (adr r3, 8016790 <rcl_wait+0x2e0>)
 8016718:	e9d3 2300 	ldrd	r2, r3, [r3]
 801671c:	4640      	mov	r0, r8
 801671e:	4639      	mov	r1, r7
 8016720:	f7ea fa24 	bl	8000b6c <__aeabi_ldivmod>
 8016724:	a31a      	add	r3, pc, #104	@ (adr r3, 8016790 <rcl_wait+0x2e0>)
 8016726:	e9d3 2300 	ldrd	r2, r3, [r3]
 801672a:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801672e:	4640      	mov	r0, r8
 8016730:	4639      	mov	r1, r7
 8016732:	f7ea fa1b 	bl	8000b6c <__aeabi_ldivmod>
 8016736:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 801673a:	ab08      	add	r3, sp, #32
 801673c:	e73e      	b.n	80165bc <rcl_wait+0x10c>
 801673e:	2001      	movs	r0, #1
 8016740:	b00d      	add	sp, #52	@ 0x34
 8016742:	ecbd 8b02 	vpop	{d8}
 8016746:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801674a:	200b      	movs	r0, #11
 801674c:	b00d      	add	sp, #52	@ 0x34
 801674e:	ecbd 8b02 	vpop	{d8}
 8016752:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016756:	465b      	mov	r3, fp
 8016758:	2b00      	cmp	r3, #0
 801675a:	d1d7      	bne.n	801670c <rcl_wait+0x25c>
 801675c:	e72e      	b.n	80165bc <rcl_wait+0x10c>
 801675e:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 8016762:	430b      	orrs	r3, r1
 8016764:	bf08      	it	eq
 8016766:	4691      	moveq	r9, r2
 8016768:	f43f af21 	beq.w	80165ae <rcl_wait+0xfe>
 801676c:	9b04      	ldr	r3, [sp, #16]
 801676e:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8016772:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 8016776:	2b01      	cmp	r3, #1
 8016778:	9b05      	ldr	r3, [sp, #20]
 801677a:	f173 0300 	sbcs.w	r3, r3, #0
 801677e:	f04f 0300 	mov.w	r3, #0
 8016782:	4699      	mov	r9, r3
 8016784:	dac2      	bge.n	801670c <rcl_wait+0x25c>
 8016786:	e719      	b.n	80165bc <rcl_wait+0x10c>
 8016788:	ffffffff 	.word	0xffffffff
 801678c:	7fffffff 	.word	0x7fffffff
 8016790:	3b9aca00 	.word	0x3b9aca00
 8016794:	00000000 	.word	0x00000000

08016798 <rcl_action_take_goal_response>:
 8016798:	2800      	cmp	r0, #0
 801679a:	d039      	beq.n	8016810 <rcl_action_take_goal_response+0x78>
 801679c:	b570      	push	{r4, r5, r6, lr}
 801679e:	4604      	mov	r4, r0
 80167a0:	6800      	ldr	r0, [r0, #0]
 80167a2:	b380      	cbz	r0, 8016806 <rcl_action_take_goal_response+0x6e>
 80167a4:	460d      	mov	r5, r1
 80167a6:	4616      	mov	r6, r2
 80167a8:	f7fe f8e2 	bl	8014970 <rcl_client_is_valid>
 80167ac:	b330      	cbz	r0, 80167fc <rcl_action_take_goal_response+0x64>
 80167ae:	6820      	ldr	r0, [r4, #0]
 80167b0:	3004      	adds	r0, #4
 80167b2:	f7fe f8dd 	bl	8014970 <rcl_client_is_valid>
 80167b6:	b308      	cbz	r0, 80167fc <rcl_action_take_goal_response+0x64>
 80167b8:	6820      	ldr	r0, [r4, #0]
 80167ba:	3008      	adds	r0, #8
 80167bc:	f7fe f8d8 	bl	8014970 <rcl_client_is_valid>
 80167c0:	b1e0      	cbz	r0, 80167fc <rcl_action_take_goal_response+0x64>
 80167c2:	6820      	ldr	r0, [r4, #0]
 80167c4:	300c      	adds	r0, #12
 80167c6:	f7fe fe5f 	bl	8015488 <rcl_subscription_is_valid>
 80167ca:	b1b8      	cbz	r0, 80167fc <rcl_action_take_goal_response+0x64>
 80167cc:	6820      	ldr	r0, [r4, #0]
 80167ce:	3010      	adds	r0, #16
 80167d0:	f7fe fe5a 	bl	8015488 <rcl_subscription_is_valid>
 80167d4:	b190      	cbz	r0, 80167fc <rcl_action_take_goal_response+0x64>
 80167d6:	b1cd      	cbz	r5, 801680c <rcl_action_take_goal_response+0x74>
 80167d8:	b1c6      	cbz	r6, 801680c <rcl_action_take_goal_response+0x74>
 80167da:	6820      	ldr	r0, [r4, #0]
 80167dc:	4632      	mov	r2, r6
 80167de:	4629      	mov	r1, r5
 80167e0:	f7fe f87e 	bl	80148e0 <rcl_take_response>
 80167e4:	b148      	cbz	r0, 80167fa <rcl_action_take_goal_response+0x62>
 80167e6:	280a      	cmp	r0, #10
 80167e8:	d007      	beq.n	80167fa <rcl_action_take_goal_response+0x62>
 80167ea:	f240 12f5 	movw	r2, #501	@ 0x1f5
 80167ee:	f640 0337 	movw	r3, #2103	@ 0x837
 80167f2:	4290      	cmp	r0, r2
 80167f4:	bf0c      	ite	eq
 80167f6:	4618      	moveq	r0, r3
 80167f8:	2001      	movne	r0, #1
 80167fa:	bd70      	pop	{r4, r5, r6, pc}
 80167fc:	f7f8 fcdc 	bl	800f1b8 <rcutils_reset_error>
 8016800:	f640 0036 	movw	r0, #2102	@ 0x836
 8016804:	bd70      	pop	{r4, r5, r6, pc}
 8016806:	f640 0036 	movw	r0, #2102	@ 0x836
 801680a:	bd70      	pop	{r4, r5, r6, pc}
 801680c:	200b      	movs	r0, #11
 801680e:	bd70      	pop	{r4, r5, r6, pc}
 8016810:	f640 0036 	movw	r0, #2102	@ 0x836
 8016814:	4770      	bx	lr
 8016816:	bf00      	nop

08016818 <rcl_action_send_result_request>:
 8016818:	b390      	cbz	r0, 8016880 <rcl_action_send_result_request+0x68>
 801681a:	b570      	push	{r4, r5, r6, lr}
 801681c:	4604      	mov	r4, r0
 801681e:	6800      	ldr	r0, [r0, #0]
 8016820:	b348      	cbz	r0, 8016876 <rcl_action_send_result_request+0x5e>
 8016822:	460d      	mov	r5, r1
 8016824:	4616      	mov	r6, r2
 8016826:	f7fe f8a3 	bl	8014970 <rcl_client_is_valid>
 801682a:	b1f8      	cbz	r0, 801686c <rcl_action_send_result_request+0x54>
 801682c:	6820      	ldr	r0, [r4, #0]
 801682e:	3004      	adds	r0, #4
 8016830:	f7fe f89e 	bl	8014970 <rcl_client_is_valid>
 8016834:	b1d0      	cbz	r0, 801686c <rcl_action_send_result_request+0x54>
 8016836:	6820      	ldr	r0, [r4, #0]
 8016838:	3008      	adds	r0, #8
 801683a:	f7fe f899 	bl	8014970 <rcl_client_is_valid>
 801683e:	b1a8      	cbz	r0, 801686c <rcl_action_send_result_request+0x54>
 8016840:	6820      	ldr	r0, [r4, #0]
 8016842:	300c      	adds	r0, #12
 8016844:	f7fe fe20 	bl	8015488 <rcl_subscription_is_valid>
 8016848:	b180      	cbz	r0, 801686c <rcl_action_send_result_request+0x54>
 801684a:	6820      	ldr	r0, [r4, #0]
 801684c:	3010      	adds	r0, #16
 801684e:	f7fe fe1b 	bl	8015488 <rcl_subscription_is_valid>
 8016852:	b158      	cbz	r0, 801686c <rcl_action_send_result_request+0x54>
 8016854:	b195      	cbz	r5, 801687c <rcl_action_send_result_request+0x64>
 8016856:	b18e      	cbz	r6, 801687c <rcl_action_send_result_request+0x64>
 8016858:	6820      	ldr	r0, [r4, #0]
 801685a:	4632      	mov	r2, r6
 801685c:	4629      	mov	r1, r5
 801685e:	3008      	adds	r0, #8
 8016860:	f7fe f808 	bl	8014874 <rcl_send_request>
 8016864:	3800      	subs	r0, #0
 8016866:	bf18      	it	ne
 8016868:	2001      	movne	r0, #1
 801686a:	bd70      	pop	{r4, r5, r6, pc}
 801686c:	f7f8 fca4 	bl	800f1b8 <rcutils_reset_error>
 8016870:	f640 0036 	movw	r0, #2102	@ 0x836
 8016874:	bd70      	pop	{r4, r5, r6, pc}
 8016876:	f640 0036 	movw	r0, #2102	@ 0x836
 801687a:	bd70      	pop	{r4, r5, r6, pc}
 801687c:	200b      	movs	r0, #11
 801687e:	bd70      	pop	{r4, r5, r6, pc}
 8016880:	f640 0036 	movw	r0, #2102	@ 0x836
 8016884:	4770      	bx	lr
 8016886:	bf00      	nop

08016888 <rcl_action_take_result_response>:
 8016888:	2800      	cmp	r0, #0
 801688a:	d03a      	beq.n	8016902 <rcl_action_take_result_response+0x7a>
 801688c:	b570      	push	{r4, r5, r6, lr}
 801688e:	4604      	mov	r4, r0
 8016890:	6800      	ldr	r0, [r0, #0]
 8016892:	b388      	cbz	r0, 80168f8 <rcl_action_take_result_response+0x70>
 8016894:	460d      	mov	r5, r1
 8016896:	4616      	mov	r6, r2
 8016898:	f7fe f86a 	bl	8014970 <rcl_client_is_valid>
 801689c:	b338      	cbz	r0, 80168ee <rcl_action_take_result_response+0x66>
 801689e:	6820      	ldr	r0, [r4, #0]
 80168a0:	3004      	adds	r0, #4
 80168a2:	f7fe f865 	bl	8014970 <rcl_client_is_valid>
 80168a6:	b310      	cbz	r0, 80168ee <rcl_action_take_result_response+0x66>
 80168a8:	6820      	ldr	r0, [r4, #0]
 80168aa:	3008      	adds	r0, #8
 80168ac:	f7fe f860 	bl	8014970 <rcl_client_is_valid>
 80168b0:	b1e8      	cbz	r0, 80168ee <rcl_action_take_result_response+0x66>
 80168b2:	6820      	ldr	r0, [r4, #0]
 80168b4:	300c      	adds	r0, #12
 80168b6:	f7fe fde7 	bl	8015488 <rcl_subscription_is_valid>
 80168ba:	b1c0      	cbz	r0, 80168ee <rcl_action_take_result_response+0x66>
 80168bc:	6820      	ldr	r0, [r4, #0]
 80168be:	3010      	adds	r0, #16
 80168c0:	f7fe fde2 	bl	8015488 <rcl_subscription_is_valid>
 80168c4:	b198      	cbz	r0, 80168ee <rcl_action_take_result_response+0x66>
 80168c6:	b1d5      	cbz	r5, 80168fe <rcl_action_take_result_response+0x76>
 80168c8:	b1ce      	cbz	r6, 80168fe <rcl_action_take_result_response+0x76>
 80168ca:	6820      	ldr	r0, [r4, #0]
 80168cc:	4632      	mov	r2, r6
 80168ce:	4629      	mov	r1, r5
 80168d0:	3008      	adds	r0, #8
 80168d2:	f7fe f805 	bl	80148e0 <rcl_take_response>
 80168d6:	b148      	cbz	r0, 80168ec <rcl_action_take_result_response+0x64>
 80168d8:	280a      	cmp	r0, #10
 80168da:	d007      	beq.n	80168ec <rcl_action_take_result_response+0x64>
 80168dc:	f240 12f5 	movw	r2, #501	@ 0x1f5
 80168e0:	f640 0337 	movw	r3, #2103	@ 0x837
 80168e4:	4290      	cmp	r0, r2
 80168e6:	bf0c      	ite	eq
 80168e8:	4618      	moveq	r0, r3
 80168ea:	2001      	movne	r0, #1
 80168ec:	bd70      	pop	{r4, r5, r6, pc}
 80168ee:	f7f8 fc63 	bl	800f1b8 <rcutils_reset_error>
 80168f2:	f640 0036 	movw	r0, #2102	@ 0x836
 80168f6:	bd70      	pop	{r4, r5, r6, pc}
 80168f8:	f640 0036 	movw	r0, #2102	@ 0x836
 80168fc:	bd70      	pop	{r4, r5, r6, pc}
 80168fe:	200b      	movs	r0, #11
 8016900:	bd70      	pop	{r4, r5, r6, pc}
 8016902:	f640 0036 	movw	r0, #2102	@ 0x836
 8016906:	4770      	bx	lr

08016908 <rcl_action_take_cancel_response>:
 8016908:	2800      	cmp	r0, #0
 801690a:	d03a      	beq.n	8016982 <rcl_action_take_cancel_response+0x7a>
 801690c:	b570      	push	{r4, r5, r6, lr}
 801690e:	4604      	mov	r4, r0
 8016910:	6800      	ldr	r0, [r0, #0]
 8016912:	b388      	cbz	r0, 8016978 <rcl_action_take_cancel_response+0x70>
 8016914:	460d      	mov	r5, r1
 8016916:	4616      	mov	r6, r2
 8016918:	f7fe f82a 	bl	8014970 <rcl_client_is_valid>
 801691c:	b338      	cbz	r0, 801696e <rcl_action_take_cancel_response+0x66>
 801691e:	6820      	ldr	r0, [r4, #0]
 8016920:	3004      	adds	r0, #4
 8016922:	f7fe f825 	bl	8014970 <rcl_client_is_valid>
 8016926:	b310      	cbz	r0, 801696e <rcl_action_take_cancel_response+0x66>
 8016928:	6820      	ldr	r0, [r4, #0]
 801692a:	3008      	adds	r0, #8
 801692c:	f7fe f820 	bl	8014970 <rcl_client_is_valid>
 8016930:	b1e8      	cbz	r0, 801696e <rcl_action_take_cancel_response+0x66>
 8016932:	6820      	ldr	r0, [r4, #0]
 8016934:	300c      	adds	r0, #12
 8016936:	f7fe fda7 	bl	8015488 <rcl_subscription_is_valid>
 801693a:	b1c0      	cbz	r0, 801696e <rcl_action_take_cancel_response+0x66>
 801693c:	6820      	ldr	r0, [r4, #0]
 801693e:	3010      	adds	r0, #16
 8016940:	f7fe fda2 	bl	8015488 <rcl_subscription_is_valid>
 8016944:	b198      	cbz	r0, 801696e <rcl_action_take_cancel_response+0x66>
 8016946:	b1d5      	cbz	r5, 801697e <rcl_action_take_cancel_response+0x76>
 8016948:	b1ce      	cbz	r6, 801697e <rcl_action_take_cancel_response+0x76>
 801694a:	6820      	ldr	r0, [r4, #0]
 801694c:	4632      	mov	r2, r6
 801694e:	4629      	mov	r1, r5
 8016950:	3004      	adds	r0, #4
 8016952:	f7fd ffc5 	bl	80148e0 <rcl_take_response>
 8016956:	b148      	cbz	r0, 801696c <rcl_action_take_cancel_response+0x64>
 8016958:	280a      	cmp	r0, #10
 801695a:	d007      	beq.n	801696c <rcl_action_take_cancel_response+0x64>
 801695c:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8016960:	f640 0337 	movw	r3, #2103	@ 0x837
 8016964:	4290      	cmp	r0, r2
 8016966:	bf0c      	ite	eq
 8016968:	4618      	moveq	r0, r3
 801696a:	2001      	movne	r0, #1
 801696c:	bd70      	pop	{r4, r5, r6, pc}
 801696e:	f7f8 fc23 	bl	800f1b8 <rcutils_reset_error>
 8016972:	f640 0036 	movw	r0, #2102	@ 0x836
 8016976:	bd70      	pop	{r4, r5, r6, pc}
 8016978:	f640 0036 	movw	r0, #2102	@ 0x836
 801697c:	bd70      	pop	{r4, r5, r6, pc}
 801697e:	200b      	movs	r0, #11
 8016980:	bd70      	pop	{r4, r5, r6, pc}
 8016982:	f640 0036 	movw	r0, #2102	@ 0x836
 8016986:	4770      	bx	lr

08016988 <rcl_action_take_feedback>:
 8016988:	2800      	cmp	r0, #0
 801698a:	d038      	beq.n	80169fe <rcl_action_take_feedback+0x76>
 801698c:	b530      	push	{r4, r5, lr}
 801698e:	4604      	mov	r4, r0
 8016990:	6800      	ldr	r0, [r0, #0]
 8016992:	b091      	sub	sp, #68	@ 0x44
 8016994:	b378      	cbz	r0, 80169f6 <rcl_action_take_feedback+0x6e>
 8016996:	460d      	mov	r5, r1
 8016998:	f7fd ffea 	bl	8014970 <rcl_client_is_valid>
 801699c:	b328      	cbz	r0, 80169ea <rcl_action_take_feedback+0x62>
 801699e:	6820      	ldr	r0, [r4, #0]
 80169a0:	3004      	adds	r0, #4
 80169a2:	f7fd ffe5 	bl	8014970 <rcl_client_is_valid>
 80169a6:	b300      	cbz	r0, 80169ea <rcl_action_take_feedback+0x62>
 80169a8:	6820      	ldr	r0, [r4, #0]
 80169aa:	3008      	adds	r0, #8
 80169ac:	f7fd ffe0 	bl	8014970 <rcl_client_is_valid>
 80169b0:	b1d8      	cbz	r0, 80169ea <rcl_action_take_feedback+0x62>
 80169b2:	6820      	ldr	r0, [r4, #0]
 80169b4:	300c      	adds	r0, #12
 80169b6:	f7fe fd67 	bl	8015488 <rcl_subscription_is_valid>
 80169ba:	b1b0      	cbz	r0, 80169ea <rcl_action_take_feedback+0x62>
 80169bc:	6820      	ldr	r0, [r4, #0]
 80169be:	3010      	adds	r0, #16
 80169c0:	f7fe fd62 	bl	8015488 <rcl_subscription_is_valid>
 80169c4:	b188      	cbz	r0, 80169ea <rcl_action_take_feedback+0x62>
 80169c6:	b1ed      	cbz	r5, 8016a04 <rcl_action_take_feedback+0x7c>
 80169c8:	6820      	ldr	r0, [r4, #0]
 80169ca:	2300      	movs	r3, #0
 80169cc:	466a      	mov	r2, sp
 80169ce:	4629      	mov	r1, r5
 80169d0:	300c      	adds	r0, #12
 80169d2:	f7fe fcfb 	bl	80153cc <rcl_take>
 80169d6:	b160      	cbz	r0, 80169f2 <rcl_action_take_feedback+0x6a>
 80169d8:	f240 1391 	movw	r3, #401	@ 0x191
 80169dc:	4298      	cmp	r0, r3
 80169de:	d014      	beq.n	8016a0a <rcl_action_take_feedback+0x82>
 80169e0:	280a      	cmp	r0, #10
 80169e2:	bf18      	it	ne
 80169e4:	2001      	movne	r0, #1
 80169e6:	b011      	add	sp, #68	@ 0x44
 80169e8:	bd30      	pop	{r4, r5, pc}
 80169ea:	f7f8 fbe5 	bl	800f1b8 <rcutils_reset_error>
 80169ee:	f640 0036 	movw	r0, #2102	@ 0x836
 80169f2:	b011      	add	sp, #68	@ 0x44
 80169f4:	bd30      	pop	{r4, r5, pc}
 80169f6:	f640 0036 	movw	r0, #2102	@ 0x836
 80169fa:	b011      	add	sp, #68	@ 0x44
 80169fc:	bd30      	pop	{r4, r5, pc}
 80169fe:	f640 0036 	movw	r0, #2102	@ 0x836
 8016a02:	4770      	bx	lr
 8016a04:	200b      	movs	r0, #11
 8016a06:	b011      	add	sp, #68	@ 0x44
 8016a08:	bd30      	pop	{r4, r5, pc}
 8016a0a:	f640 0037 	movw	r0, #2103	@ 0x837
 8016a0e:	e7f0      	b.n	80169f2 <rcl_action_take_feedback+0x6a>

08016a10 <rcl_action_wait_set_add_action_client>:
 8016a10:	2800      	cmp	r0, #0
 8016a12:	d048      	beq.n	8016aa6 <rcl_action_wait_set_add_action_client+0x96>
 8016a14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016a16:	460c      	mov	r4, r1
 8016a18:	2900      	cmp	r1, #0
 8016a1a:	d03c      	beq.n	8016a96 <rcl_action_wait_set_add_action_client+0x86>
 8016a1c:	4605      	mov	r5, r0
 8016a1e:	6808      	ldr	r0, [r1, #0]
 8016a20:	2800      	cmp	r0, #0
 8016a22:	d038      	beq.n	8016a96 <rcl_action_wait_set_add_action_client+0x86>
 8016a24:	4617      	mov	r7, r2
 8016a26:	461e      	mov	r6, r3
 8016a28:	f7fd ffa2 	bl	8014970 <rcl_client_is_valid>
 8016a2c:	b3b0      	cbz	r0, 8016a9c <rcl_action_wait_set_add_action_client+0x8c>
 8016a2e:	6820      	ldr	r0, [r4, #0]
 8016a30:	3004      	adds	r0, #4
 8016a32:	f7fd ff9d 	bl	8014970 <rcl_client_is_valid>
 8016a36:	b388      	cbz	r0, 8016a9c <rcl_action_wait_set_add_action_client+0x8c>
 8016a38:	6820      	ldr	r0, [r4, #0]
 8016a3a:	3008      	adds	r0, #8
 8016a3c:	f7fd ff98 	bl	8014970 <rcl_client_is_valid>
 8016a40:	b360      	cbz	r0, 8016a9c <rcl_action_wait_set_add_action_client+0x8c>
 8016a42:	6820      	ldr	r0, [r4, #0]
 8016a44:	300c      	adds	r0, #12
 8016a46:	f7fe fd1f 	bl	8015488 <rcl_subscription_is_valid>
 8016a4a:	b338      	cbz	r0, 8016a9c <rcl_action_wait_set_add_action_client+0x8c>
 8016a4c:	6820      	ldr	r0, [r4, #0]
 8016a4e:	3010      	adds	r0, #16
 8016a50:	f7fe fd1a 	bl	8015488 <rcl_subscription_is_valid>
 8016a54:	b310      	cbz	r0, 8016a9c <rcl_action_wait_set_add_action_client+0x8c>
 8016a56:	6821      	ldr	r1, [r4, #0]
 8016a58:	4628      	mov	r0, r5
 8016a5a:	f501 72e2 	add.w	r2, r1, #452	@ 0x1c4
 8016a5e:	f7ff fccf 	bl	8016400 <rcl_wait_set_add_client>
 8016a62:	b9b8      	cbnz	r0, 8016a94 <rcl_action_wait_set_add_action_client+0x84>
 8016a64:	6821      	ldr	r1, [r4, #0]
 8016a66:	4628      	mov	r0, r5
 8016a68:	f501 72e4 	add.w	r2, r1, #456	@ 0x1c8
 8016a6c:	3104      	adds	r1, #4
 8016a6e:	f7ff fcc7 	bl	8016400 <rcl_wait_set_add_client>
 8016a72:	b978      	cbnz	r0, 8016a94 <rcl_action_wait_set_add_action_client+0x84>
 8016a74:	6821      	ldr	r1, [r4, #0]
 8016a76:	4628      	mov	r0, r5
 8016a78:	f501 72e6 	add.w	r2, r1, #460	@ 0x1cc
 8016a7c:	3108      	adds	r1, #8
 8016a7e:	f7ff fcbf 	bl	8016400 <rcl_wait_set_add_client>
 8016a82:	b938      	cbnz	r0, 8016a94 <rcl_action_wait_set_add_action_client+0x84>
 8016a84:	6821      	ldr	r1, [r4, #0]
 8016a86:	4628      	mov	r0, r5
 8016a88:	f501 72e8 	add.w	r2, r1, #464	@ 0x1d0
 8016a8c:	310c      	adds	r1, #12
 8016a8e:	f7ff f96f 	bl	8015d70 <rcl_wait_set_add_subscription>
 8016a92:	b158      	cbz	r0, 8016aac <rcl_action_wait_set_add_action_client+0x9c>
 8016a94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016a96:	f640 0036 	movw	r0, #2102	@ 0x836
 8016a9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016a9c:	f7f8 fb8c 	bl	800f1b8 <rcutils_reset_error>
 8016aa0:	f640 0036 	movw	r0, #2102	@ 0x836
 8016aa4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016aa6:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8016aaa:	4770      	bx	lr
 8016aac:	6821      	ldr	r1, [r4, #0]
 8016aae:	4628      	mov	r0, r5
 8016ab0:	f501 72ea 	add.w	r2, r1, #468	@ 0x1d4
 8016ab4:	3110      	adds	r1, #16
 8016ab6:	f7ff f95b 	bl	8015d70 <rcl_wait_set_add_subscription>
 8016aba:	2800      	cmp	r0, #0
 8016abc:	d1ea      	bne.n	8016a94 <rcl_action_wait_set_add_action_client+0x84>
 8016abe:	b11f      	cbz	r7, 8016ac8 <rcl_action_wait_set_add_action_client+0xb8>
 8016ac0:	6823      	ldr	r3, [r4, #0]
 8016ac2:	f8d3 31c4 	ldr.w	r3, [r3, #452]	@ 0x1c4
 8016ac6:	603b      	str	r3, [r7, #0]
 8016ac8:	2e00      	cmp	r6, #0
 8016aca:	d0e3      	beq.n	8016a94 <rcl_action_wait_set_add_action_client+0x84>
 8016acc:	6823      	ldr	r3, [r4, #0]
 8016ace:	f8d3 31d0 	ldr.w	r3, [r3, #464]	@ 0x1d0
 8016ad2:	6033      	str	r3, [r6, #0]
 8016ad4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016ad6:	bf00      	nop

08016ad8 <rcl_action_client_wait_set_get_entities_ready>:
 8016ad8:	2800      	cmp	r0, #0
 8016ada:	f000 808d 	beq.w	8016bf8 <rcl_action_client_wait_set_get_entities_ready+0x120>
 8016ade:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016ae2:	460c      	mov	r4, r1
 8016ae4:	2900      	cmp	r1, #0
 8016ae6:	d077      	beq.n	8016bd8 <rcl_action_client_wait_set_get_entities_ready+0x100>
 8016ae8:	4605      	mov	r5, r0
 8016aea:	6808      	ldr	r0, [r1, #0]
 8016aec:	2800      	cmp	r0, #0
 8016aee:	d073      	beq.n	8016bd8 <rcl_action_client_wait_set_get_entities_ready+0x100>
 8016af0:	4616      	mov	r6, r2
 8016af2:	461f      	mov	r7, r3
 8016af4:	f7fd ff3c 	bl	8014970 <rcl_client_is_valid>
 8016af8:	2800      	cmp	r0, #0
 8016afa:	d071      	beq.n	8016be0 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8016afc:	6820      	ldr	r0, [r4, #0]
 8016afe:	3004      	adds	r0, #4
 8016b00:	f7fd ff36 	bl	8014970 <rcl_client_is_valid>
 8016b04:	2800      	cmp	r0, #0
 8016b06:	d06b      	beq.n	8016be0 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8016b08:	6820      	ldr	r0, [r4, #0]
 8016b0a:	3008      	adds	r0, #8
 8016b0c:	f7fd ff30 	bl	8014970 <rcl_client_is_valid>
 8016b10:	2800      	cmp	r0, #0
 8016b12:	d065      	beq.n	8016be0 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8016b14:	6820      	ldr	r0, [r4, #0]
 8016b16:	300c      	adds	r0, #12
 8016b18:	f7fe fcb6 	bl	8015488 <rcl_subscription_is_valid>
 8016b1c:	2800      	cmp	r0, #0
 8016b1e:	d05f      	beq.n	8016be0 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8016b20:	6820      	ldr	r0, [r4, #0]
 8016b22:	3010      	adds	r0, #16
 8016b24:	f7fe fcb0 	bl	8015488 <rcl_subscription_is_valid>
 8016b28:	2800      	cmp	r0, #0
 8016b2a:	d059      	beq.n	8016be0 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8016b2c:	2e00      	cmp	r6, #0
 8016b2e:	d060      	beq.n	8016bf2 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8016b30:	2f00      	cmp	r7, #0
 8016b32:	d05e      	beq.n	8016bf2 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8016b34:	9b06      	ldr	r3, [sp, #24]
 8016b36:	2b00      	cmp	r3, #0
 8016b38:	d05b      	beq.n	8016bf2 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8016b3a:	9b07      	ldr	r3, [sp, #28]
 8016b3c:	2b00      	cmp	r3, #0
 8016b3e:	d058      	beq.n	8016bf2 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8016b40:	9b08      	ldr	r3, [sp, #32]
 8016b42:	2b00      	cmp	r3, #0
 8016b44:	d055      	beq.n	8016bf2 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8016b46:	6823      	ldr	r3, [r4, #0]
 8016b48:	686a      	ldr	r2, [r5, #4]
 8016b4a:	f8d3 11d0 	ldr.w	r1, [r3, #464]	@ 0x1d0
 8016b4e:	428a      	cmp	r2, r1
 8016b50:	d94c      	bls.n	8016bec <rcl_action_client_wait_set_get_entities_ready+0x114>
 8016b52:	f8d3 01d4 	ldr.w	r0, [r3, #468]	@ 0x1d4
 8016b56:	4282      	cmp	r2, r0
 8016b58:	d948      	bls.n	8016bec <rcl_action_client_wait_set_get_entities_ready+0x114>
 8016b5a:	f8d3 41c4 	ldr.w	r4, [r3, #452]	@ 0x1c4
 8016b5e:	69ea      	ldr	r2, [r5, #28]
 8016b60:	42a2      	cmp	r2, r4
 8016b62:	d943      	bls.n	8016bec <rcl_action_client_wait_set_get_entities_ready+0x114>
 8016b64:	f8d3 c1c8 	ldr.w	ip, [r3, #456]	@ 0x1c8
 8016b68:	4562      	cmp	r2, ip
 8016b6a:	d93f      	bls.n	8016bec <rcl_action_client_wait_set_get_entities_ready+0x114>
 8016b6c:	f8d3 e1cc 	ldr.w	lr, [r3, #460]	@ 0x1cc
 8016b70:	4572      	cmp	r2, lr
 8016b72:	d93b      	bls.n	8016bec <rcl_action_client_wait_set_get_entities_ready+0x114>
 8016b74:	69aa      	ldr	r2, [r5, #24]
 8016b76:	682d      	ldr	r5, [r5, #0]
 8016b78:	f852 8024 	ldr.w	r8, [r2, r4, lsl #2]
 8016b7c:	f855 4020 	ldr.w	r4, [r5, r0, lsl #2]
 8016b80:	f855 5021 	ldr.w	r5, [r5, r1, lsl #2]
 8016b84:	f852 102c 	ldr.w	r1, [r2, ip, lsl #2]
 8016b88:	f852 202e 	ldr.w	r2, [r2, lr, lsl #2]
 8016b8c:	f103 0c0c 	add.w	ip, r3, #12
 8016b90:	eba5 050c 	sub.w	r5, r5, ip
 8016b94:	fab5 f585 	clz	r5, r5
 8016b98:	096d      	lsrs	r5, r5, #5
 8016b9a:	7035      	strb	r5, [r6, #0]
 8016b9c:	f103 0510 	add.w	r5, r3, #16
 8016ba0:	1b64      	subs	r4, r4, r5
 8016ba2:	fab4 f484 	clz	r4, r4
 8016ba6:	0964      	lsrs	r4, r4, #5
 8016ba8:	703c      	strb	r4, [r7, #0]
 8016baa:	eba3 0008 	sub.w	r0, r3, r8
 8016bae:	1d1c      	adds	r4, r3, #4
 8016bb0:	3308      	adds	r3, #8
 8016bb2:	1ad3      	subs	r3, r2, r3
 8016bb4:	fab0 f080 	clz	r0, r0
 8016bb8:	9a06      	ldr	r2, [sp, #24]
 8016bba:	0940      	lsrs	r0, r0, #5
 8016bbc:	1b09      	subs	r1, r1, r4
 8016bbe:	7010      	strb	r0, [r2, #0]
 8016bc0:	fab1 f181 	clz	r1, r1
 8016bc4:	9a07      	ldr	r2, [sp, #28]
 8016bc6:	0949      	lsrs	r1, r1, #5
 8016bc8:	7011      	strb	r1, [r2, #0]
 8016bca:	fab3 f383 	clz	r3, r3
 8016bce:	9a08      	ldr	r2, [sp, #32]
 8016bd0:	095b      	lsrs	r3, r3, #5
 8016bd2:	2000      	movs	r0, #0
 8016bd4:	7013      	strb	r3, [r2, #0]
 8016bd6:	e001      	b.n	8016bdc <rcl_action_client_wait_set_get_entities_ready+0x104>
 8016bd8:	f640 0036 	movw	r0, #2102	@ 0x836
 8016bdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016be0:	f7f8 faea 	bl	800f1b8 <rcutils_reset_error>
 8016be4:	f640 0036 	movw	r0, #2102	@ 0x836
 8016be8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016bec:	2001      	movs	r0, #1
 8016bee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016bf2:	200b      	movs	r0, #11
 8016bf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016bf8:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8016bfc:	4770      	bx	lr
 8016bfe:	bf00      	nop

08016c00 <rcl_action_take_goal_request>:
 8016c00:	2800      	cmp	r0, #0
 8016c02:	d039      	beq.n	8016c78 <rcl_action_take_goal_request+0x78>
 8016c04:	b570      	push	{r4, r5, r6, lr}
 8016c06:	4604      	mov	r4, r0
 8016c08:	6800      	ldr	r0, [r0, #0]
 8016c0a:	b380      	cbz	r0, 8016c6e <rcl_action_take_goal_request+0x6e>
 8016c0c:	460d      	mov	r5, r1
 8016c0e:	4616      	mov	r6, r2
 8016c10:	f7fe faf6 	bl	8015200 <rcl_service_is_valid>
 8016c14:	b330      	cbz	r0, 8016c64 <rcl_action_take_goal_request+0x64>
 8016c16:	6820      	ldr	r0, [r4, #0]
 8016c18:	3004      	adds	r0, #4
 8016c1a:	f7fe faf1 	bl	8015200 <rcl_service_is_valid>
 8016c1e:	b308      	cbz	r0, 8016c64 <rcl_action_take_goal_request+0x64>
 8016c20:	6820      	ldr	r0, [r4, #0]
 8016c22:	3008      	adds	r0, #8
 8016c24:	f7fe faec 	bl	8015200 <rcl_service_is_valid>
 8016c28:	b1e0      	cbz	r0, 8016c64 <rcl_action_take_goal_request+0x64>
 8016c2a:	6820      	ldr	r0, [r4, #0]
 8016c2c:	300c      	adds	r0, #12
 8016c2e:	f7f7 fae3 	bl	800e1f8 <rcl_publisher_is_valid>
 8016c32:	b1b8      	cbz	r0, 8016c64 <rcl_action_take_goal_request+0x64>
 8016c34:	6820      	ldr	r0, [r4, #0]
 8016c36:	3010      	adds	r0, #16
 8016c38:	f7f7 fade 	bl	800e1f8 <rcl_publisher_is_valid>
 8016c3c:	b190      	cbz	r0, 8016c64 <rcl_action_take_goal_request+0x64>
 8016c3e:	b1cd      	cbz	r5, 8016c74 <rcl_action_take_goal_request+0x74>
 8016c40:	b1c6      	cbz	r6, 8016c74 <rcl_action_take_goal_request+0x74>
 8016c42:	6820      	ldr	r0, [r4, #0]
 8016c44:	4632      	mov	r2, r6
 8016c46:	4629      	mov	r1, r5
 8016c48:	f7fe fa82 	bl	8015150 <rcl_take_request>
 8016c4c:	b148      	cbz	r0, 8016c62 <rcl_action_take_goal_request+0x62>
 8016c4e:	280a      	cmp	r0, #10
 8016c50:	d007      	beq.n	8016c62 <rcl_action_take_goal_request+0x62>
 8016c52:	f240 2259 	movw	r2, #601	@ 0x259
 8016c56:	f640 0399 	movw	r3, #2201	@ 0x899
 8016c5a:	4290      	cmp	r0, r2
 8016c5c:	bf0c      	ite	eq
 8016c5e:	4618      	moveq	r0, r3
 8016c60:	2001      	movne	r0, #1
 8016c62:	bd70      	pop	{r4, r5, r6, pc}
 8016c64:	f7f8 faa8 	bl	800f1b8 <rcutils_reset_error>
 8016c68:	f640 0098 	movw	r0, #2200	@ 0x898
 8016c6c:	bd70      	pop	{r4, r5, r6, pc}
 8016c6e:	f640 0098 	movw	r0, #2200	@ 0x898
 8016c72:	bd70      	pop	{r4, r5, r6, pc}
 8016c74:	200b      	movs	r0, #11
 8016c76:	bd70      	pop	{r4, r5, r6, pc}
 8016c78:	f640 0098 	movw	r0, #2200	@ 0x898
 8016c7c:	4770      	bx	lr
 8016c7e:	bf00      	nop

08016c80 <rcl_action_send_goal_response>:
 8016c80:	b390      	cbz	r0, 8016ce8 <rcl_action_send_goal_response+0x68>
 8016c82:	b570      	push	{r4, r5, r6, lr}
 8016c84:	4604      	mov	r4, r0
 8016c86:	6800      	ldr	r0, [r0, #0]
 8016c88:	b348      	cbz	r0, 8016cde <rcl_action_send_goal_response+0x5e>
 8016c8a:	460d      	mov	r5, r1
 8016c8c:	4616      	mov	r6, r2
 8016c8e:	f7fe fab7 	bl	8015200 <rcl_service_is_valid>
 8016c92:	b1f8      	cbz	r0, 8016cd4 <rcl_action_send_goal_response+0x54>
 8016c94:	6820      	ldr	r0, [r4, #0]
 8016c96:	3004      	adds	r0, #4
 8016c98:	f7fe fab2 	bl	8015200 <rcl_service_is_valid>
 8016c9c:	b1d0      	cbz	r0, 8016cd4 <rcl_action_send_goal_response+0x54>
 8016c9e:	6820      	ldr	r0, [r4, #0]
 8016ca0:	3008      	adds	r0, #8
 8016ca2:	f7fe faad 	bl	8015200 <rcl_service_is_valid>
 8016ca6:	b1a8      	cbz	r0, 8016cd4 <rcl_action_send_goal_response+0x54>
 8016ca8:	6820      	ldr	r0, [r4, #0]
 8016caa:	300c      	adds	r0, #12
 8016cac:	f7f7 faa4 	bl	800e1f8 <rcl_publisher_is_valid>
 8016cb0:	b180      	cbz	r0, 8016cd4 <rcl_action_send_goal_response+0x54>
 8016cb2:	6820      	ldr	r0, [r4, #0]
 8016cb4:	3010      	adds	r0, #16
 8016cb6:	f7f7 fa9f 	bl	800e1f8 <rcl_publisher_is_valid>
 8016cba:	b158      	cbz	r0, 8016cd4 <rcl_action_send_goal_response+0x54>
 8016cbc:	b195      	cbz	r5, 8016ce4 <rcl_action_send_goal_response+0x64>
 8016cbe:	b18e      	cbz	r6, 8016ce4 <rcl_action_send_goal_response+0x64>
 8016cc0:	6820      	ldr	r0, [r4, #0]
 8016cc2:	4632      	mov	r2, r6
 8016cc4:	4629      	mov	r1, r5
 8016cc6:	f7fe fa83 	bl	80151d0 <rcl_send_response>
 8016cca:	b110      	cbz	r0, 8016cd2 <rcl_action_send_goal_response+0x52>
 8016ccc:	2802      	cmp	r0, #2
 8016cce:	bf18      	it	ne
 8016cd0:	2001      	movne	r0, #1
 8016cd2:	bd70      	pop	{r4, r5, r6, pc}
 8016cd4:	f7f8 fa70 	bl	800f1b8 <rcutils_reset_error>
 8016cd8:	f640 0098 	movw	r0, #2200	@ 0x898
 8016cdc:	bd70      	pop	{r4, r5, r6, pc}
 8016cde:	f640 0098 	movw	r0, #2200	@ 0x898
 8016ce2:	bd70      	pop	{r4, r5, r6, pc}
 8016ce4:	200b      	movs	r0, #11
 8016ce6:	bd70      	pop	{r4, r5, r6, pc}
 8016ce8:	f640 0098 	movw	r0, #2200	@ 0x898
 8016cec:	4770      	bx	lr
 8016cee:	bf00      	nop

08016cf0 <rcl_action_take_result_request>:
 8016cf0:	2800      	cmp	r0, #0
 8016cf2:	d03a      	beq.n	8016d6a <rcl_action_take_result_request+0x7a>
 8016cf4:	b570      	push	{r4, r5, r6, lr}
 8016cf6:	4604      	mov	r4, r0
 8016cf8:	6800      	ldr	r0, [r0, #0]
 8016cfa:	b388      	cbz	r0, 8016d60 <rcl_action_take_result_request+0x70>
 8016cfc:	460d      	mov	r5, r1
 8016cfe:	4616      	mov	r6, r2
 8016d00:	f7fe fa7e 	bl	8015200 <rcl_service_is_valid>
 8016d04:	b338      	cbz	r0, 8016d56 <rcl_action_take_result_request+0x66>
 8016d06:	6820      	ldr	r0, [r4, #0]
 8016d08:	3004      	adds	r0, #4
 8016d0a:	f7fe fa79 	bl	8015200 <rcl_service_is_valid>
 8016d0e:	b310      	cbz	r0, 8016d56 <rcl_action_take_result_request+0x66>
 8016d10:	6820      	ldr	r0, [r4, #0]
 8016d12:	3008      	adds	r0, #8
 8016d14:	f7fe fa74 	bl	8015200 <rcl_service_is_valid>
 8016d18:	b1e8      	cbz	r0, 8016d56 <rcl_action_take_result_request+0x66>
 8016d1a:	6820      	ldr	r0, [r4, #0]
 8016d1c:	300c      	adds	r0, #12
 8016d1e:	f7f7 fa6b 	bl	800e1f8 <rcl_publisher_is_valid>
 8016d22:	b1c0      	cbz	r0, 8016d56 <rcl_action_take_result_request+0x66>
 8016d24:	6820      	ldr	r0, [r4, #0]
 8016d26:	3010      	adds	r0, #16
 8016d28:	f7f7 fa66 	bl	800e1f8 <rcl_publisher_is_valid>
 8016d2c:	b198      	cbz	r0, 8016d56 <rcl_action_take_result_request+0x66>
 8016d2e:	b1d5      	cbz	r5, 8016d66 <rcl_action_take_result_request+0x76>
 8016d30:	b1ce      	cbz	r6, 8016d66 <rcl_action_take_result_request+0x76>
 8016d32:	6820      	ldr	r0, [r4, #0]
 8016d34:	4632      	mov	r2, r6
 8016d36:	4629      	mov	r1, r5
 8016d38:	3008      	adds	r0, #8
 8016d3a:	f7fe fa09 	bl	8015150 <rcl_take_request>
 8016d3e:	b148      	cbz	r0, 8016d54 <rcl_action_take_result_request+0x64>
 8016d40:	280a      	cmp	r0, #10
 8016d42:	d007      	beq.n	8016d54 <rcl_action_take_result_request+0x64>
 8016d44:	f240 2259 	movw	r2, #601	@ 0x259
 8016d48:	f640 0399 	movw	r3, #2201	@ 0x899
 8016d4c:	4290      	cmp	r0, r2
 8016d4e:	bf0c      	ite	eq
 8016d50:	4618      	moveq	r0, r3
 8016d52:	2001      	movne	r0, #1
 8016d54:	bd70      	pop	{r4, r5, r6, pc}
 8016d56:	f7f8 fa2f 	bl	800f1b8 <rcutils_reset_error>
 8016d5a:	f640 0098 	movw	r0, #2200	@ 0x898
 8016d5e:	bd70      	pop	{r4, r5, r6, pc}
 8016d60:	f640 0098 	movw	r0, #2200	@ 0x898
 8016d64:	bd70      	pop	{r4, r5, r6, pc}
 8016d66:	200b      	movs	r0, #11
 8016d68:	bd70      	pop	{r4, r5, r6, pc}
 8016d6a:	f640 0098 	movw	r0, #2200	@ 0x898
 8016d6e:	4770      	bx	lr

08016d70 <rcl_action_take_cancel_request>:
 8016d70:	2800      	cmp	r0, #0
 8016d72:	d03a      	beq.n	8016dea <rcl_action_take_cancel_request+0x7a>
 8016d74:	b570      	push	{r4, r5, r6, lr}
 8016d76:	4604      	mov	r4, r0
 8016d78:	6800      	ldr	r0, [r0, #0]
 8016d7a:	b388      	cbz	r0, 8016de0 <rcl_action_take_cancel_request+0x70>
 8016d7c:	460d      	mov	r5, r1
 8016d7e:	4616      	mov	r6, r2
 8016d80:	f7fe fa3e 	bl	8015200 <rcl_service_is_valid>
 8016d84:	b338      	cbz	r0, 8016dd6 <rcl_action_take_cancel_request+0x66>
 8016d86:	6820      	ldr	r0, [r4, #0]
 8016d88:	3004      	adds	r0, #4
 8016d8a:	f7fe fa39 	bl	8015200 <rcl_service_is_valid>
 8016d8e:	b310      	cbz	r0, 8016dd6 <rcl_action_take_cancel_request+0x66>
 8016d90:	6820      	ldr	r0, [r4, #0]
 8016d92:	3008      	adds	r0, #8
 8016d94:	f7fe fa34 	bl	8015200 <rcl_service_is_valid>
 8016d98:	b1e8      	cbz	r0, 8016dd6 <rcl_action_take_cancel_request+0x66>
 8016d9a:	6820      	ldr	r0, [r4, #0]
 8016d9c:	300c      	adds	r0, #12
 8016d9e:	f7f7 fa2b 	bl	800e1f8 <rcl_publisher_is_valid>
 8016da2:	b1c0      	cbz	r0, 8016dd6 <rcl_action_take_cancel_request+0x66>
 8016da4:	6820      	ldr	r0, [r4, #0]
 8016da6:	3010      	adds	r0, #16
 8016da8:	f7f7 fa26 	bl	800e1f8 <rcl_publisher_is_valid>
 8016dac:	b198      	cbz	r0, 8016dd6 <rcl_action_take_cancel_request+0x66>
 8016dae:	b1d5      	cbz	r5, 8016de6 <rcl_action_take_cancel_request+0x76>
 8016db0:	b1ce      	cbz	r6, 8016de6 <rcl_action_take_cancel_request+0x76>
 8016db2:	6820      	ldr	r0, [r4, #0]
 8016db4:	4632      	mov	r2, r6
 8016db6:	4629      	mov	r1, r5
 8016db8:	3004      	adds	r0, #4
 8016dba:	f7fe f9c9 	bl	8015150 <rcl_take_request>
 8016dbe:	b148      	cbz	r0, 8016dd4 <rcl_action_take_cancel_request+0x64>
 8016dc0:	280a      	cmp	r0, #10
 8016dc2:	d007      	beq.n	8016dd4 <rcl_action_take_cancel_request+0x64>
 8016dc4:	f240 2259 	movw	r2, #601	@ 0x259
 8016dc8:	f640 0399 	movw	r3, #2201	@ 0x899
 8016dcc:	4290      	cmp	r0, r2
 8016dce:	bf0c      	ite	eq
 8016dd0:	4618      	moveq	r0, r3
 8016dd2:	2001      	movne	r0, #1
 8016dd4:	bd70      	pop	{r4, r5, r6, pc}
 8016dd6:	f7f8 f9ef 	bl	800f1b8 <rcutils_reset_error>
 8016dda:	f640 0098 	movw	r0, #2200	@ 0x898
 8016dde:	bd70      	pop	{r4, r5, r6, pc}
 8016de0:	f640 0098 	movw	r0, #2200	@ 0x898
 8016de4:	bd70      	pop	{r4, r5, r6, pc}
 8016de6:	200b      	movs	r0, #11
 8016de8:	bd70      	pop	{r4, r5, r6, pc}
 8016dea:	f640 0098 	movw	r0, #2200	@ 0x898
 8016dee:	4770      	bx	lr

08016df0 <rcl_action_send_cancel_response>:
 8016df0:	b398      	cbz	r0, 8016e5a <rcl_action_send_cancel_response+0x6a>
 8016df2:	b570      	push	{r4, r5, r6, lr}
 8016df4:	4604      	mov	r4, r0
 8016df6:	6800      	ldr	r0, [r0, #0]
 8016df8:	b350      	cbz	r0, 8016e50 <rcl_action_send_cancel_response+0x60>
 8016dfa:	460d      	mov	r5, r1
 8016dfc:	4616      	mov	r6, r2
 8016dfe:	f7fe f9ff 	bl	8015200 <rcl_service_is_valid>
 8016e02:	b300      	cbz	r0, 8016e46 <rcl_action_send_cancel_response+0x56>
 8016e04:	6820      	ldr	r0, [r4, #0]
 8016e06:	3004      	adds	r0, #4
 8016e08:	f7fe f9fa 	bl	8015200 <rcl_service_is_valid>
 8016e0c:	b1d8      	cbz	r0, 8016e46 <rcl_action_send_cancel_response+0x56>
 8016e0e:	6820      	ldr	r0, [r4, #0]
 8016e10:	3008      	adds	r0, #8
 8016e12:	f7fe f9f5 	bl	8015200 <rcl_service_is_valid>
 8016e16:	b1b0      	cbz	r0, 8016e46 <rcl_action_send_cancel_response+0x56>
 8016e18:	6820      	ldr	r0, [r4, #0]
 8016e1a:	300c      	adds	r0, #12
 8016e1c:	f7f7 f9ec 	bl	800e1f8 <rcl_publisher_is_valid>
 8016e20:	b188      	cbz	r0, 8016e46 <rcl_action_send_cancel_response+0x56>
 8016e22:	6820      	ldr	r0, [r4, #0]
 8016e24:	3010      	adds	r0, #16
 8016e26:	f7f7 f9e7 	bl	800e1f8 <rcl_publisher_is_valid>
 8016e2a:	b160      	cbz	r0, 8016e46 <rcl_action_send_cancel_response+0x56>
 8016e2c:	b19d      	cbz	r5, 8016e56 <rcl_action_send_cancel_response+0x66>
 8016e2e:	b196      	cbz	r6, 8016e56 <rcl_action_send_cancel_response+0x66>
 8016e30:	6820      	ldr	r0, [r4, #0]
 8016e32:	4632      	mov	r2, r6
 8016e34:	4629      	mov	r1, r5
 8016e36:	3004      	adds	r0, #4
 8016e38:	f7fe f9ca 	bl	80151d0 <rcl_send_response>
 8016e3c:	b110      	cbz	r0, 8016e44 <rcl_action_send_cancel_response+0x54>
 8016e3e:	2802      	cmp	r0, #2
 8016e40:	bf18      	it	ne
 8016e42:	2001      	movne	r0, #1
 8016e44:	bd70      	pop	{r4, r5, r6, pc}
 8016e46:	f7f8 f9b7 	bl	800f1b8 <rcutils_reset_error>
 8016e4a:	f640 0098 	movw	r0, #2200	@ 0x898
 8016e4e:	bd70      	pop	{r4, r5, r6, pc}
 8016e50:	f640 0098 	movw	r0, #2200	@ 0x898
 8016e54:	bd70      	pop	{r4, r5, r6, pc}
 8016e56:	200b      	movs	r0, #11
 8016e58:	bd70      	pop	{r4, r5, r6, pc}
 8016e5a:	f640 0098 	movw	r0, #2200	@ 0x898
 8016e5e:	4770      	bx	lr

08016e60 <rcl_action_wait_set_add_action_server>:
 8016e60:	2800      	cmp	r0, #0
 8016e62:	d04d      	beq.n	8016f00 <rcl_action_wait_set_add_action_server+0xa0>
 8016e64:	b570      	push	{r4, r5, r6, lr}
 8016e66:	460c      	mov	r4, r1
 8016e68:	b159      	cbz	r1, 8016e82 <rcl_action_wait_set_add_action_server+0x22>
 8016e6a:	4605      	mov	r5, r0
 8016e6c:	6808      	ldr	r0, [r1, #0]
 8016e6e:	b140      	cbz	r0, 8016e82 <rcl_action_wait_set_add_action_server+0x22>
 8016e70:	4616      	mov	r6, r2
 8016e72:	f7fe f9c5 	bl	8015200 <rcl_service_is_valid>
 8016e76:	b120      	cbz	r0, 8016e82 <rcl_action_wait_set_add_action_server+0x22>
 8016e78:	6820      	ldr	r0, [r4, #0]
 8016e7a:	3004      	adds	r0, #4
 8016e7c:	f7fe f9c0 	bl	8015200 <rcl_service_is_valid>
 8016e80:	b910      	cbnz	r0, 8016e88 <rcl_action_wait_set_add_action_server+0x28>
 8016e82:	f640 0098 	movw	r0, #2200	@ 0x898
 8016e86:	bd70      	pop	{r4, r5, r6, pc}
 8016e88:	6820      	ldr	r0, [r4, #0]
 8016e8a:	3008      	adds	r0, #8
 8016e8c:	f7fe f9b8 	bl	8015200 <rcl_service_is_valid>
 8016e90:	2800      	cmp	r0, #0
 8016e92:	d0f6      	beq.n	8016e82 <rcl_action_wait_set_add_action_server+0x22>
 8016e94:	6820      	ldr	r0, [r4, #0]
 8016e96:	300c      	adds	r0, #12
 8016e98:	f7f7 f9c6 	bl	800e228 <rcl_publisher_is_valid_except_context>
 8016e9c:	2800      	cmp	r0, #0
 8016e9e:	d0f0      	beq.n	8016e82 <rcl_action_wait_set_add_action_server+0x22>
 8016ea0:	6820      	ldr	r0, [r4, #0]
 8016ea2:	3010      	adds	r0, #16
 8016ea4:	f7f7 f9c0 	bl	800e228 <rcl_publisher_is_valid_except_context>
 8016ea8:	2800      	cmp	r0, #0
 8016eaa:	d0ea      	beq.n	8016e82 <rcl_action_wait_set_add_action_server+0x22>
 8016eac:	6821      	ldr	r1, [r4, #0]
 8016eae:	4628      	mov	r0, r5
 8016eb0:	f501 72ee 	add.w	r2, r1, #476	@ 0x1dc
 8016eb4:	f7ff fad0 	bl	8016458 <rcl_wait_set_add_service>
 8016eb8:	2800      	cmp	r0, #0
 8016eba:	d1e4      	bne.n	8016e86 <rcl_action_wait_set_add_action_server+0x26>
 8016ebc:	6821      	ldr	r1, [r4, #0]
 8016ebe:	4628      	mov	r0, r5
 8016ec0:	f501 72f0 	add.w	r2, r1, #480	@ 0x1e0
 8016ec4:	3104      	adds	r1, #4
 8016ec6:	f7ff fac7 	bl	8016458 <rcl_wait_set_add_service>
 8016eca:	2800      	cmp	r0, #0
 8016ecc:	d1db      	bne.n	8016e86 <rcl_action_wait_set_add_action_server+0x26>
 8016ece:	6821      	ldr	r1, [r4, #0]
 8016ed0:	4628      	mov	r0, r5
 8016ed2:	f501 72f2 	add.w	r2, r1, #484	@ 0x1e4
 8016ed6:	3108      	adds	r1, #8
 8016ed8:	f7ff fabe 	bl	8016458 <rcl_wait_set_add_service>
 8016edc:	2800      	cmp	r0, #0
 8016ede:	d1d2      	bne.n	8016e86 <rcl_action_wait_set_add_action_server+0x26>
 8016ee0:	6821      	ldr	r1, [r4, #0]
 8016ee2:	4628      	mov	r0, r5
 8016ee4:	f501 72f4 	add.w	r2, r1, #488	@ 0x1e8
 8016ee8:	3114      	adds	r1, #20
 8016eea:	f7ff fa59 	bl	80163a0 <rcl_wait_set_add_timer>
 8016eee:	2800      	cmp	r0, #0
 8016ef0:	d1c9      	bne.n	8016e86 <rcl_action_wait_set_add_action_server+0x26>
 8016ef2:	2e00      	cmp	r6, #0
 8016ef4:	d0c7      	beq.n	8016e86 <rcl_action_wait_set_add_action_server+0x26>
 8016ef6:	6823      	ldr	r3, [r4, #0]
 8016ef8:	f8d3 31dc 	ldr.w	r3, [r3, #476]	@ 0x1dc
 8016efc:	6033      	str	r3, [r6, #0]
 8016efe:	bd70      	pop	{r4, r5, r6, pc}
 8016f00:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8016f04:	4770      	bx	lr
 8016f06:	bf00      	nop

08016f08 <rcl_action_server_wait_set_get_entities_ready>:
 8016f08:	2800      	cmp	r0, #0
 8016f0a:	d05a      	beq.n	8016fc2 <rcl_action_server_wait_set_get_entities_ready+0xba>
 8016f0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016f0e:	460c      	mov	r4, r1
 8016f10:	b161      	cbz	r1, 8016f2c <rcl_action_server_wait_set_get_entities_ready+0x24>
 8016f12:	4605      	mov	r5, r0
 8016f14:	6808      	ldr	r0, [r1, #0]
 8016f16:	b148      	cbz	r0, 8016f2c <rcl_action_server_wait_set_get_entities_ready+0x24>
 8016f18:	4616      	mov	r6, r2
 8016f1a:	461f      	mov	r7, r3
 8016f1c:	f7fe f970 	bl	8015200 <rcl_service_is_valid>
 8016f20:	b120      	cbz	r0, 8016f2c <rcl_action_server_wait_set_get_entities_ready+0x24>
 8016f22:	6820      	ldr	r0, [r4, #0]
 8016f24:	3004      	adds	r0, #4
 8016f26:	f7fe f96b 	bl	8015200 <rcl_service_is_valid>
 8016f2a:	b910      	cbnz	r0, 8016f32 <rcl_action_server_wait_set_get_entities_ready+0x2a>
 8016f2c:	f640 0098 	movw	r0, #2200	@ 0x898
 8016f30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016f32:	6820      	ldr	r0, [r4, #0]
 8016f34:	3008      	adds	r0, #8
 8016f36:	f7fe f963 	bl	8015200 <rcl_service_is_valid>
 8016f3a:	2800      	cmp	r0, #0
 8016f3c:	d0f6      	beq.n	8016f2c <rcl_action_server_wait_set_get_entities_ready+0x24>
 8016f3e:	6820      	ldr	r0, [r4, #0]
 8016f40:	300c      	adds	r0, #12
 8016f42:	f7f7 f971 	bl	800e228 <rcl_publisher_is_valid_except_context>
 8016f46:	2800      	cmp	r0, #0
 8016f48:	d0f0      	beq.n	8016f2c <rcl_action_server_wait_set_get_entities_ready+0x24>
 8016f4a:	6820      	ldr	r0, [r4, #0]
 8016f4c:	3010      	adds	r0, #16
 8016f4e:	f7f7 f96b 	bl	800e228 <rcl_publisher_is_valid_except_context>
 8016f52:	2800      	cmp	r0, #0
 8016f54:	d0ea      	beq.n	8016f2c <rcl_action_server_wait_set_get_entities_ready+0x24>
 8016f56:	b3be      	cbz	r6, 8016fc8 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8016f58:	b3b7      	cbz	r7, 8016fc8 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8016f5a:	9b06      	ldr	r3, [sp, #24]
 8016f5c:	b3a3      	cbz	r3, 8016fc8 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8016f5e:	9b07      	ldr	r3, [sp, #28]
 8016f60:	b393      	cbz	r3, 8016fc8 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8016f62:	6821      	ldr	r1, [r4, #0]
 8016f64:	692a      	ldr	r2, [r5, #16]
 8016f66:	6a2c      	ldr	r4, [r5, #32]
 8016f68:	f8d1 51e8 	ldr.w	r5, [r1, #488]	@ 0x1e8
 8016f6c:	f8d1 31e0 	ldr.w	r3, [r1, #480]	@ 0x1e0
 8016f70:	f852 2025 	ldr.w	r2, [r2, r5, lsl #2]
 8016f74:	f8d1 01e4 	ldr.w	r0, [r1, #484]	@ 0x1e4
 8016f78:	f8d1 51dc 	ldr.w	r5, [r1, #476]	@ 0x1dc
 8016f7c:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 8016f80:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8016f84:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
 8016f88:	1a64      	subs	r4, r4, r1
 8016f8a:	fab4 f484 	clz	r4, r4
 8016f8e:	0964      	lsrs	r4, r4, #5
 8016f90:	7034      	strb	r4, [r6, #0]
 8016f92:	1d0c      	adds	r4, r1, #4
 8016f94:	1b1b      	subs	r3, r3, r4
 8016f96:	fab3 f383 	clz	r3, r3
 8016f9a:	095b      	lsrs	r3, r3, #5
 8016f9c:	f101 0408 	add.w	r4, r1, #8
 8016fa0:	703b      	strb	r3, [r7, #0]
 8016fa2:	f101 0314 	add.w	r3, r1, #20
 8016fa6:	1b01      	subs	r1, r0, r4
 8016fa8:	1ad3      	subs	r3, r2, r3
 8016faa:	fab1 f181 	clz	r1, r1
 8016fae:	9a06      	ldr	r2, [sp, #24]
 8016fb0:	0949      	lsrs	r1, r1, #5
 8016fb2:	7011      	strb	r1, [r2, #0]
 8016fb4:	fab3 f383 	clz	r3, r3
 8016fb8:	9a07      	ldr	r2, [sp, #28]
 8016fba:	095b      	lsrs	r3, r3, #5
 8016fbc:	2000      	movs	r0, #0
 8016fbe:	7013      	strb	r3, [r2, #0]
 8016fc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016fc2:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8016fc6:	4770      	bx	lr
 8016fc8:	200b      	movs	r0, #11
 8016fca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08016fcc <_execute_event_handler>:
 8016fcc:	2002      	movs	r0, #2
 8016fce:	4770      	bx	lr

08016fd0 <_cancel_goal_event_handler>:
 8016fd0:	2003      	movs	r0, #3
 8016fd2:	4770      	bx	lr

08016fd4 <_succeed_event_handler>:
 8016fd4:	2004      	movs	r0, #4
 8016fd6:	4770      	bx	lr

08016fd8 <_abort_event_handler>:
 8016fd8:	2006      	movs	r0, #6
 8016fda:	4770      	bx	lr

08016fdc <_canceled_event_handler>:
 8016fdc:	2005      	movs	r0, #5
 8016fde:	4770      	bx	lr

08016fe0 <rcl_action_transition_goal_state>:
 8016fe0:	b2c2      	uxtb	r2, r0
 8016fe2:	2a06      	cmp	r2, #6
 8016fe4:	d80c      	bhi.n	8017000 <rcl_action_transition_goal_state+0x20>
 8016fe6:	2904      	cmp	r1, #4
 8016fe8:	d80a      	bhi.n	8017000 <rcl_action_transition_goal_state+0x20>
 8016fea:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 8016fee:	b410      	push	{r4}
 8016ff0:	1853      	adds	r3, r2, r1
 8016ff2:	4c06      	ldr	r4, [pc, #24]	@ (801700c <rcl_action_transition_goal_state+0x2c>)
 8016ff4:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8016ff8:	b123      	cbz	r3, 8017004 <rcl_action_transition_goal_state+0x24>
 8016ffa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016ffe:	4718      	bx	r3
 8017000:	2000      	movs	r0, #0
 8017002:	4770      	bx	lr
 8017004:	2000      	movs	r0, #0
 8017006:	f85d 4b04 	ldr.w	r4, [sp], #4
 801700a:	4770      	bx	lr
 801700c:	0801e1d8 	.word	0x0801e1d8

08017010 <rcl_action_get_zero_initialized_cancel_response>:
 8017010:	b510      	push	{r4, lr}
 8017012:	4c07      	ldr	r4, [pc, #28]	@ (8017030 <rcl_action_get_zero_initialized_cancel_response+0x20>)
 8017014:	4686      	mov	lr, r0
 8017016:	4684      	mov	ip, r0
 8017018:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801701a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801701e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017020:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017024:	6823      	ldr	r3, [r4, #0]
 8017026:	f8cc 3000 	str.w	r3, [ip]
 801702a:	4670      	mov	r0, lr
 801702c:	bd10      	pop	{r4, pc}
 801702e:	bf00      	nop
 8017030:	0801e264 	.word	0x0801e264

08017034 <rclc_action_send_result_request>:
 8017034:	b1d0      	cbz	r0, 801706c <rclc_action_send_result_request+0x38>
 8017036:	b500      	push	{lr}
 8017038:	4684      	mov	ip, r0
 801703a:	b087      	sub	sp, #28
 801703c:	f8d0 0009 	ldr.w	r0, [r0, #9]
 8017040:	f8dc 100d 	ldr.w	r1, [ip, #13]
 8017044:	f8dc 2011 	ldr.w	r2, [ip, #17]
 8017048:	f8dc 3015 	ldr.w	r3, [ip, #21]
 801704c:	f10d 0e08 	add.w	lr, sp, #8
 8017050:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8017054:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8017058:	f10c 0240 	add.w	r2, ip, #64	@ 0x40
 801705c:	a902      	add	r1, sp, #8
 801705e:	3010      	adds	r0, #16
 8017060:	f7ff fbda 	bl	8016818 <rcl_action_send_result_request>
 8017064:	b920      	cbnz	r0, 8017070 <rclc_action_send_result_request+0x3c>
 8017066:	b007      	add	sp, #28
 8017068:	f85d fb04 	ldr.w	pc, [sp], #4
 801706c:	200b      	movs	r0, #11
 801706e:	4770      	bx	lr
 8017070:	9001      	str	r0, [sp, #4]
 8017072:	f7f8 f8a1 	bl	800f1b8 <rcutils_reset_error>
 8017076:	9801      	ldr	r0, [sp, #4]
 8017078:	b007      	add	sp, #28
 801707a:	f85d fb04 	ldr.w	pc, [sp], #4
 801707e:	bf00      	nop

08017080 <rclc_action_take_goal_handle>:
 8017080:	b160      	cbz	r0, 801709c <rclc_action_take_goal_handle+0x1c>
 8017082:	6883      	ldr	r3, [r0, #8]
 8017084:	b143      	cbz	r3, 8017098 <rclc_action_take_goal_handle+0x18>
 8017086:	6819      	ldr	r1, [r3, #0]
 8017088:	6081      	str	r1, [r0, #8]
 801708a:	2200      	movs	r2, #0
 801708c:	721a      	strb	r2, [r3, #8]
 801708e:	68c1      	ldr	r1, [r0, #12]
 8017090:	6019      	str	r1, [r3, #0]
 8017092:	621a      	str	r2, [r3, #32]
 8017094:	849a      	strh	r2, [r3, #36]	@ 0x24
 8017096:	60c3      	str	r3, [r0, #12]
 8017098:	4618      	mov	r0, r3
 801709a:	4770      	bx	lr
 801709c:	4603      	mov	r3, r0
 801709e:	e7fb      	b.n	8017098 <rclc_action_take_goal_handle+0x18>

080170a0 <rclc_action_remove_used_goal_handle>:
 80170a0:	b180      	cbz	r0, 80170c4 <rclc_action_remove_used_goal_handle+0x24>
 80170a2:	b179      	cbz	r1, 80170c4 <rclc_action_remove_used_goal_handle+0x24>
 80170a4:	68c3      	ldr	r3, [r0, #12]
 80170a6:	4299      	cmp	r1, r3
 80170a8:	d00d      	beq.n	80170c6 <rclc_action_remove_used_goal_handle+0x26>
 80170aa:	b12b      	cbz	r3, 80170b8 <rclc_action_remove_used_goal_handle+0x18>
 80170ac:	681a      	ldr	r2, [r3, #0]
 80170ae:	4291      	cmp	r1, r2
 80170b0:	d003      	beq.n	80170ba <rclc_action_remove_used_goal_handle+0x1a>
 80170b2:	4613      	mov	r3, r2
 80170b4:	2b00      	cmp	r3, #0
 80170b6:	d1f9      	bne.n	80170ac <rclc_action_remove_used_goal_handle+0xc>
 80170b8:	4770      	bx	lr
 80170ba:	680a      	ldr	r2, [r1, #0]
 80170bc:	601a      	str	r2, [r3, #0]
 80170be:	6883      	ldr	r3, [r0, #8]
 80170c0:	600b      	str	r3, [r1, #0]
 80170c2:	6081      	str	r1, [r0, #8]
 80170c4:	4770      	bx	lr
 80170c6:	680b      	ldr	r3, [r1, #0]
 80170c8:	60c3      	str	r3, [r0, #12]
 80170ca:	e7f8      	b.n	80170be <rclc_action_remove_used_goal_handle+0x1e>

080170cc <rclc_action_find_goal_handle_by_uuid>:
 80170cc:	b538      	push	{r3, r4, r5, lr}
 80170ce:	b180      	cbz	r0, 80170f2 <rclc_action_find_goal_handle_by_uuid+0x26>
 80170d0:	460d      	mov	r5, r1
 80170d2:	b181      	cbz	r1, 80170f6 <rclc_action_find_goal_handle_by_uuid+0x2a>
 80170d4:	68c4      	ldr	r4, [r0, #12]
 80170d6:	b914      	cbnz	r4, 80170de <rclc_action_find_goal_handle_by_uuid+0x12>
 80170d8:	e009      	b.n	80170ee <rclc_action_find_goal_handle_by_uuid+0x22>
 80170da:	6824      	ldr	r4, [r4, #0]
 80170dc:	b13c      	cbz	r4, 80170ee <rclc_action_find_goal_handle_by_uuid+0x22>
 80170de:	f104 0009 	add.w	r0, r4, #9
 80170e2:	2210      	movs	r2, #16
 80170e4:	4629      	mov	r1, r5
 80170e6:	f003 fd0f 	bl	801ab08 <memcmp>
 80170ea:	2800      	cmp	r0, #0
 80170ec:	d1f5      	bne.n	80170da <rclc_action_find_goal_handle_by_uuid+0xe>
 80170ee:	4620      	mov	r0, r4
 80170f0:	bd38      	pop	{r3, r4, r5, pc}
 80170f2:	4604      	mov	r4, r0
 80170f4:	e7fb      	b.n	80170ee <rclc_action_find_goal_handle_by_uuid+0x22>
 80170f6:	460c      	mov	r4, r1
 80170f8:	e7f9      	b.n	80170ee <rclc_action_find_goal_handle_by_uuid+0x22>
 80170fa:	bf00      	nop

080170fc <rclc_action_find_first_handle_by_status>:
 80170fc:	b140      	cbz	r0, 8017110 <rclc_action_find_first_handle_by_status+0x14>
 80170fe:	68c0      	ldr	r0, [r0, #12]
 8017100:	b910      	cbnz	r0, 8017108 <rclc_action_find_first_handle_by_status+0xc>
 8017102:	e005      	b.n	8017110 <rclc_action_find_first_handle_by_status+0x14>
 8017104:	6800      	ldr	r0, [r0, #0]
 8017106:	b118      	cbz	r0, 8017110 <rclc_action_find_first_handle_by_status+0x14>
 8017108:	f990 3008 	ldrsb.w	r3, [r0, #8]
 801710c:	428b      	cmp	r3, r1
 801710e:	d1f9      	bne.n	8017104 <rclc_action_find_first_handle_by_status+0x8>
 8017110:	4770      	bx	lr
 8017112:	bf00      	nop

08017114 <rclc_action_find_first_terminated_handle>:
 8017114:	b140      	cbz	r0, 8017128 <rclc_action_find_first_terminated_handle+0x14>
 8017116:	68c0      	ldr	r0, [r0, #12]
 8017118:	b910      	cbnz	r0, 8017120 <rclc_action_find_first_terminated_handle+0xc>
 801711a:	e005      	b.n	8017128 <rclc_action_find_first_terminated_handle+0x14>
 801711c:	6800      	ldr	r0, [r0, #0]
 801711e:	b118      	cbz	r0, 8017128 <rclc_action_find_first_terminated_handle+0x14>
 8017120:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8017124:	2b03      	cmp	r3, #3
 8017126:	ddf9      	ble.n	801711c <rclc_action_find_first_terminated_handle+0x8>
 8017128:	4770      	bx	lr
 801712a:	bf00      	nop

0801712c <rclc_action_find_handle_by_goal_request_sequence_number>:
 801712c:	b170      	cbz	r0, 801714c <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 801712e:	68c0      	ldr	r0, [r0, #12]
 8017130:	b160      	cbz	r0, 801714c <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 8017132:	b410      	push	{r4}
 8017134:	e001      	b.n	801713a <rclc_action_find_handle_by_goal_request_sequence_number+0xe>
 8017136:	6800      	ldr	r0, [r0, #0]
 8017138:	b128      	cbz	r0, 8017146 <rclc_action_find_handle_by_goal_request_sequence_number+0x1a>
 801713a:	e9d0 410a 	ldrd	r4, r1, [r0, #40]	@ 0x28
 801713e:	4299      	cmp	r1, r3
 8017140:	bf08      	it	eq
 8017142:	4294      	cmpeq	r4, r2
 8017144:	d1f7      	bne.n	8017136 <rclc_action_find_handle_by_goal_request_sequence_number+0xa>
 8017146:	f85d 4b04 	ldr.w	r4, [sp], #4
 801714a:	4770      	bx	lr
 801714c:	4770      	bx	lr
 801714e:	bf00      	nop

08017150 <rclc_action_find_handle_by_result_request_sequence_number>:
 8017150:	b170      	cbz	r0, 8017170 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 8017152:	68c0      	ldr	r0, [r0, #12]
 8017154:	b160      	cbz	r0, 8017170 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 8017156:	b410      	push	{r4}
 8017158:	e001      	b.n	801715e <rclc_action_find_handle_by_result_request_sequence_number+0xe>
 801715a:	6800      	ldr	r0, [r0, #0]
 801715c:	b128      	cbz	r0, 801716a <rclc_action_find_handle_by_result_request_sequence_number+0x1a>
 801715e:	e9d0 4110 	ldrd	r4, r1, [r0, #64]	@ 0x40
 8017162:	4299      	cmp	r1, r3
 8017164:	bf08      	it	eq
 8017166:	4294      	cmpeq	r4, r2
 8017168:	d1f7      	bne.n	801715a <rclc_action_find_handle_by_result_request_sequence_number+0xa>
 801716a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801716e:	4770      	bx	lr
 8017170:	4770      	bx	lr
 8017172:	bf00      	nop

08017174 <rclc_action_find_handle_by_cancel_request_sequence_number>:
 8017174:	b170      	cbz	r0, 8017194 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 8017176:	68c0      	ldr	r0, [r0, #12]
 8017178:	b160      	cbz	r0, 8017194 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 801717a:	b410      	push	{r4}
 801717c:	e001      	b.n	8017182 <rclc_action_find_handle_by_cancel_request_sequence_number+0xe>
 801717e:	6800      	ldr	r0, [r0, #0]
 8017180:	b128      	cbz	r0, 801718e <rclc_action_find_handle_by_cancel_request_sequence_number+0x1a>
 8017182:	e9d0 4116 	ldrd	r4, r1, [r0, #88]	@ 0x58
 8017186:	4299      	cmp	r1, r3
 8017188:	bf08      	it	eq
 801718a:	4294      	cmpeq	r4, r2
 801718c:	d1f7      	bne.n	801717e <rclc_action_find_handle_by_cancel_request_sequence_number+0xa>
 801718e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017192:	4770      	bx	lr
 8017194:	4770      	bx	lr
 8017196:	bf00      	nop

08017198 <rclc_action_find_first_handle_with_goal_response>:
 8017198:	b140      	cbz	r0, 80171ac <rclc_action_find_first_handle_with_goal_response+0x14>
 801719a:	68c0      	ldr	r0, [r0, #12]
 801719c:	b910      	cbnz	r0, 80171a4 <rclc_action_find_first_handle_with_goal_response+0xc>
 801719e:	e005      	b.n	80171ac <rclc_action_find_first_handle_with_goal_response+0x14>
 80171a0:	6800      	ldr	r0, [r0, #0]
 80171a2:	b118      	cbz	r0, 80171ac <rclc_action_find_first_handle_with_goal_response+0x14>
 80171a4:	f890 3020 	ldrb.w	r3, [r0, #32]
 80171a8:	2b00      	cmp	r3, #0
 80171aa:	d0f9      	beq.n	80171a0 <rclc_action_find_first_handle_with_goal_response+0x8>
 80171ac:	4770      	bx	lr
 80171ae:	bf00      	nop

080171b0 <rclc_action_find_first_handle_with_result_response>:
 80171b0:	b140      	cbz	r0, 80171c4 <rclc_action_find_first_handle_with_result_response+0x14>
 80171b2:	68c0      	ldr	r0, [r0, #12]
 80171b4:	b910      	cbnz	r0, 80171bc <rclc_action_find_first_handle_with_result_response+0xc>
 80171b6:	e005      	b.n	80171c4 <rclc_action_find_first_handle_with_result_response+0x14>
 80171b8:	6800      	ldr	r0, [r0, #0]
 80171ba:	b118      	cbz	r0, 80171c4 <rclc_action_find_first_handle_with_result_response+0x14>
 80171bc:	f890 3023 	ldrb.w	r3, [r0, #35]	@ 0x23
 80171c0:	2b00      	cmp	r3, #0
 80171c2:	d0f9      	beq.n	80171b8 <rclc_action_find_first_handle_with_result_response+0x8>
 80171c4:	4770      	bx	lr
 80171c6:	bf00      	nop

080171c8 <rclc_action_server_response_goal_request>:
 80171c8:	b198      	cbz	r0, 80171f2 <rclc_action_server_response_goal_request+0x2a>
 80171ca:	b510      	push	{r4, lr}
 80171cc:	6844      	ldr	r4, [r0, #4]
 80171ce:	b086      	sub	sp, #24
 80171d0:	2200      	movs	r2, #0
 80171d2:	e9cd 2203 	strd	r2, r2, [sp, #12]
 80171d6:	460b      	mov	r3, r1
 80171d8:	9205      	str	r2, [sp, #20]
 80171da:	f100 0128 	add.w	r1, r0, #40	@ 0x28
 80171de:	aa03      	add	r2, sp, #12
 80171e0:	f104 0010 	add.w	r0, r4, #16
 80171e4:	f88d 300c 	strb.w	r3, [sp, #12]
 80171e8:	f7ff fd4a 	bl	8016c80 <rcl_action_send_goal_response>
 80171ec:	b918      	cbnz	r0, 80171f6 <rclc_action_server_response_goal_request+0x2e>
 80171ee:	b006      	add	sp, #24
 80171f0:	bd10      	pop	{r4, pc}
 80171f2:	200b      	movs	r0, #11
 80171f4:	4770      	bx	lr
 80171f6:	9001      	str	r0, [sp, #4]
 80171f8:	f7f7 ffde 	bl	800f1b8 <rcutils_reset_error>
 80171fc:	9801      	ldr	r0, [sp, #4]
 80171fe:	b006      	add	sp, #24
 8017200:	bd10      	pop	{r4, pc}
 8017202:	bf00      	nop
 8017204:	0000      	movs	r0, r0
	...

08017208 <rclc_action_server_goal_cancel_accept>:
 8017208:	b310      	cbz	r0, 8017250 <rclc_action_server_goal_cancel_accept+0x48>
 801720a:	b510      	push	{r4, lr}
 801720c:	b090      	sub	sp, #64	@ 0x40
 801720e:	4604      	mov	r4, r0
 8017210:	a806      	add	r0, sp, #24
 8017212:	f7ff fefd 	bl	8017010 <rcl_action_get_zero_initialized_cancel_response>
 8017216:	2300      	movs	r3, #0
 8017218:	f8d4 0009 	ldr.w	r0, [r4, #9]
 801721c:	f8d4 100d 	ldr.w	r1, [r4, #13]
 8017220:	f8d4 2011 	ldr.w	r2, [r4, #17]
 8017224:	f88d 3018 	strb.w	r3, [sp, #24]
 8017228:	f8d4 3015 	ldr.w	r3, [r4, #21]
 801722c:	f8cd d01c 	str.w	sp, [sp, #28]
 8017230:	46ec      	mov	ip, sp
 8017232:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017236:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 8017258 <rclc_action_server_goal_cancel_accept+0x50>
 801723a:	6860      	ldr	r0, [r4, #4]
 801723c:	aa06      	add	r2, sp, #24
 801723e:	f104 0158 	add.w	r1, r4, #88	@ 0x58
 8017242:	3010      	adds	r0, #16
 8017244:	ed8d 7b08 	vstr	d7, [sp, #32]
 8017248:	f7ff fdd2 	bl	8016df0 <rcl_action_send_cancel_response>
 801724c:	b010      	add	sp, #64	@ 0x40
 801724e:	bd10      	pop	{r4, pc}
 8017250:	200b      	movs	r0, #11
 8017252:	4770      	bx	lr
 8017254:	f3af 8000 	nop.w
 8017258:	00000001 	.word	0x00000001
 801725c:	00000001 	.word	0x00000001

08017260 <rclc_action_server_goal_cancel_reject>:
 8017260:	b082      	sub	sp, #8
 8017262:	b530      	push	{r4, r5, lr}
 8017264:	b08b      	sub	sp, #44	@ 0x2c
 8017266:	ac0e      	add	r4, sp, #56	@ 0x38
 8017268:	e884 000c 	stmia.w	r4, {r2, r3}
 801726c:	b188      	cbz	r0, 8017292 <rclc_action_server_goal_cancel_reject+0x32>
 801726e:	4604      	mov	r4, r0
 8017270:	a801      	add	r0, sp, #4
 8017272:	460d      	mov	r5, r1
 8017274:	f7ff fecc 	bl	8017010 <rcl_action_get_zero_initialized_cancel_response>
 8017278:	aa01      	add	r2, sp, #4
 801727a:	a90e      	add	r1, sp, #56	@ 0x38
 801727c:	f104 0010 	add.w	r0, r4, #16
 8017280:	f88d 5004 	strb.w	r5, [sp, #4]
 8017284:	f7ff fdb4 	bl	8016df0 <rcl_action_send_cancel_response>
 8017288:	b00b      	add	sp, #44	@ 0x2c
 801728a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801728e:	b002      	add	sp, #8
 8017290:	4770      	bx	lr
 8017292:	200b      	movs	r0, #11
 8017294:	b00b      	add	sp, #44	@ 0x2c
 8017296:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801729a:	b002      	add	sp, #8
 801729c:	4770      	bx	lr
 801729e:	bf00      	nop

080172a0 <__atomic_load_8>:
 80172a0:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 80172a4:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 80172a8:	4a15      	ldr	r2, [pc, #84]	@ (8017300 <__atomic_load_8+0x60>)
 80172aa:	4b16      	ldr	r3, [pc, #88]	@ (8017304 <__atomic_load_8+0x64>)
 80172ac:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 80172b0:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 80172b4:	fb02 f101 	mul.w	r1, r2, r1
 80172b8:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 80172bc:	fba3 2301 	umull	r2, r3, r3, r1
 80172c0:	091b      	lsrs	r3, r3, #4
 80172c2:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80172c6:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 80172ca:	b4d0      	push	{r4, r6, r7}
 80172cc:	4c0e      	ldr	r4, [pc, #56]	@ (8017308 <__atomic_load_8+0x68>)
 80172ce:	1ac9      	subs	r1, r1, r3
 80172d0:	1862      	adds	r2, r4, r1
 80172d2:	f04f 0c01 	mov.w	ip, #1
 80172d6:	e8d2 3f4f 	ldrexb	r3, [r2]
 80172da:	e8c2 cf46 	strexb	r6, ip, [r2]
 80172de:	2e00      	cmp	r6, #0
 80172e0:	d1f9      	bne.n	80172d6 <__atomic_load_8+0x36>
 80172e2:	f3bf 8f5b 	dmb	ish
 80172e6:	b2db      	uxtb	r3, r3
 80172e8:	2b00      	cmp	r3, #0
 80172ea:	d1f4      	bne.n	80172d6 <__atomic_load_8+0x36>
 80172ec:	e9d0 6700 	ldrd	r6, r7, [r0]
 80172f0:	f3bf 8f5b 	dmb	ish
 80172f4:	5463      	strb	r3, [r4, r1]
 80172f6:	4630      	mov	r0, r6
 80172f8:	4639      	mov	r1, r7
 80172fa:	bcd0      	pop	{r4, r6, r7}
 80172fc:	4770      	bx	lr
 80172fe:	bf00      	nop
 8017300:	27d4eb2d 	.word	0x27d4eb2d
 8017304:	b21642c9 	.word	0xb21642c9
 8017308:	2000b3f0 	.word	0x2000b3f0

0801730c <__atomic_store_8>:
 801730c:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 8017310:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 8017314:	b570      	push	{r4, r5, r6, lr}
 8017316:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 801731a:	4c14      	ldr	r4, [pc, #80]	@ (801736c <__atomic_store_8+0x60>)
 801731c:	4d14      	ldr	r5, [pc, #80]	@ (8017370 <__atomic_store_8+0x64>)
 801731e:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 8017322:	fb04 f101 	mul.w	r1, r4, r1
 8017326:	4c13      	ldr	r4, [pc, #76]	@ (8017374 <__atomic_store_8+0x68>)
 8017328:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 801732c:	fba4 4e01 	umull	r4, lr, r4, r1
 8017330:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
 8017334:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
 8017338:	ebce 0ec4 	rsb	lr, lr, r4, lsl #3
 801733c:	eba1 0e0e 	sub.w	lr, r1, lr
 8017340:	eb05 0c0e 	add.w	ip, r5, lr
 8017344:	f04f 0401 	mov.w	r4, #1
 8017348:	e8dc 1f4f 	ldrexb	r1, [ip]
 801734c:	e8cc 4f46 	strexb	r6, r4, [ip]
 8017350:	2e00      	cmp	r6, #0
 8017352:	d1f9      	bne.n	8017348 <__atomic_store_8+0x3c>
 8017354:	f3bf 8f5b 	dmb	ish
 8017358:	b2c9      	uxtb	r1, r1
 801735a:	2900      	cmp	r1, #0
 801735c:	d1f4      	bne.n	8017348 <__atomic_store_8+0x3c>
 801735e:	e9c0 2300 	strd	r2, r3, [r0]
 8017362:	f3bf 8f5b 	dmb	ish
 8017366:	f805 100e 	strb.w	r1, [r5, lr]
 801736a:	bd70      	pop	{r4, r5, r6, pc}
 801736c:	27d4eb2d 	.word	0x27d4eb2d
 8017370:	2000b3f0 	.word	0x2000b3f0
 8017374:	b21642c9 	.word	0xb21642c9

08017378 <__atomic_exchange_8>:
 8017378:	ea80 4c10 	eor.w	ip, r0, r0, lsr #16
 801737c:	f08c 0c3d 	eor.w	ip, ip, #61	@ 0x3d
 8017380:	4916      	ldr	r1, [pc, #88]	@ (80173dc <__atomic_exchange_8+0x64>)
 8017382:	eb0c 0ccc 	add.w	ip, ip, ip, lsl #3
 8017386:	ea8c 1c1c 	eor.w	ip, ip, ip, lsr #4
 801738a:	fb01 fc0c 	mul.w	ip, r1, ip
 801738e:	4914      	ldr	r1, [pc, #80]	@ (80173e0 <__atomic_exchange_8+0x68>)
 8017390:	ea8c 3cdc 	eor.w	ip, ip, ip, lsr #15
 8017394:	b570      	push	{r4, r5, r6, lr}
 8017396:	4605      	mov	r5, r0
 8017398:	fba1 010c 	umull	r0, r1, r1, ip
 801739c:	0909      	lsrs	r1, r1, #4
 801739e:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 80173a2:	ebc1 01c0 	rsb	r1, r1, r0, lsl #3
 80173a6:	4e0f      	ldr	r6, [pc, #60]	@ (80173e4 <__atomic_exchange_8+0x6c>)
 80173a8:	ebac 0c01 	sub.w	ip, ip, r1
 80173ac:	eb06 010c 	add.w	r1, r6, ip
 80173b0:	f04f 0e01 	mov.w	lr, #1
 80173b4:	e8d1 4f4f 	ldrexb	r4, [r1]
 80173b8:	e8c1 ef40 	strexb	r0, lr, [r1]
 80173bc:	2800      	cmp	r0, #0
 80173be:	d1f9      	bne.n	80173b4 <__atomic_exchange_8+0x3c>
 80173c0:	f3bf 8f5b 	dmb	ish
 80173c4:	b2e4      	uxtb	r4, r4
 80173c6:	2c00      	cmp	r4, #0
 80173c8:	d1f4      	bne.n	80173b4 <__atomic_exchange_8+0x3c>
 80173ca:	e9d5 0100 	ldrd	r0, r1, [r5]
 80173ce:	e9c5 2300 	strd	r2, r3, [r5]
 80173d2:	f3bf 8f5b 	dmb	ish
 80173d6:	f806 400c 	strb.w	r4, [r6, ip]
 80173da:	bd70      	pop	{r4, r5, r6, pc}
 80173dc:	27d4eb2d 	.word	0x27d4eb2d
 80173e0:	b21642c9 	.word	0xb21642c9
 80173e4:	2000b3f0 	.word	0x2000b3f0

080173e8 <rcutils_get_env>:
 80173e8:	b168      	cbz	r0, 8017406 <rcutils_get_env+0x1e>
 80173ea:	b510      	push	{r4, lr}
 80173ec:	460c      	mov	r4, r1
 80173ee:	b129      	cbz	r1, 80173fc <rcutils_get_env+0x14>
 80173f0:	f002 fef2 	bl	801a1d8 <getenv>
 80173f4:	b120      	cbz	r0, 8017400 <rcutils_get_env+0x18>
 80173f6:	6020      	str	r0, [r4, #0]
 80173f8:	2000      	movs	r0, #0
 80173fa:	bd10      	pop	{r4, pc}
 80173fc:	4803      	ldr	r0, [pc, #12]	@ (801740c <rcutils_get_env+0x24>)
 80173fe:	bd10      	pop	{r4, pc}
 8017400:	4b03      	ldr	r3, [pc, #12]	@ (8017410 <rcutils_get_env+0x28>)
 8017402:	6023      	str	r3, [r4, #0]
 8017404:	bd10      	pop	{r4, pc}
 8017406:	4803      	ldr	r0, [pc, #12]	@ (8017414 <rcutils_get_env+0x2c>)
 8017408:	4770      	bx	lr
 801740a:	bf00      	nop
 801740c:	0801d884 	.word	0x0801d884
 8017410:	0801dc48 	.word	0x0801dc48
 8017414:	0801d868 	.word	0x0801d868

08017418 <rcutils_format_string_limit>:
 8017418:	b40f      	push	{r0, r1, r2, r3}
 801741a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801741c:	b083      	sub	sp, #12
 801741e:	ac08      	add	r4, sp, #32
 8017420:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 8017422:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8017426:	b34e      	cbz	r6, 801747c <rcutils_format_string_limit+0x64>
 8017428:	a808      	add	r0, sp, #32
 801742a:	f7f7 fe9f 	bl	800f16c <rcutils_allocator_is_valid>
 801742e:	b328      	cbz	r0, 801747c <rcutils_format_string_limit+0x64>
 8017430:	2100      	movs	r1, #0
 8017432:	ab0f      	add	r3, sp, #60	@ 0x3c
 8017434:	4632      	mov	r2, r6
 8017436:	4608      	mov	r0, r1
 8017438:	e9cd 3300 	strd	r3, r3, [sp]
 801743c:	f000 f8f4 	bl	8017628 <rcutils_vsnprintf>
 8017440:	1c43      	adds	r3, r0, #1
 8017442:	4605      	mov	r5, r0
 8017444:	d01a      	beq.n	801747c <rcutils_format_string_limit+0x64>
 8017446:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8017448:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801744a:	1c47      	adds	r7, r0, #1
 801744c:	429f      	cmp	r7, r3
 801744e:	bf84      	itt	hi
 8017450:	461f      	movhi	r7, r3
 8017452:	f103 35ff 	addhi.w	r5, r3, #4294967295	@ 0xffffffff
 8017456:	4638      	mov	r0, r7
 8017458:	9b08      	ldr	r3, [sp, #32]
 801745a:	4798      	blx	r3
 801745c:	4604      	mov	r4, r0
 801745e:	b168      	cbz	r0, 801747c <rcutils_format_string_limit+0x64>
 8017460:	9b01      	ldr	r3, [sp, #4]
 8017462:	4632      	mov	r2, r6
 8017464:	4639      	mov	r1, r7
 8017466:	f000 f8df 	bl	8017628 <rcutils_vsnprintf>
 801746a:	2800      	cmp	r0, #0
 801746c:	db02      	blt.n	8017474 <rcutils_format_string_limit+0x5c>
 801746e:	2300      	movs	r3, #0
 8017470:	5563      	strb	r3, [r4, r5]
 8017472:	e004      	b.n	801747e <rcutils_format_string_limit+0x66>
 8017474:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017476:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8017478:	4620      	mov	r0, r4
 801747a:	4798      	blx	r3
 801747c:	2400      	movs	r4, #0
 801747e:	4620      	mov	r0, r4
 8017480:	b003      	add	sp, #12
 8017482:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8017486:	b004      	add	sp, #16
 8017488:	4770      	bx	lr
 801748a:	bf00      	nop

0801748c <rcutils_repl_str>:
 801748c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017490:	ed2d 8b02 	vpush	{d8}
 8017494:	b087      	sub	sp, #28
 8017496:	4680      	mov	r8, r0
 8017498:	4608      	mov	r0, r1
 801749a:	f8cd 8004 	str.w	r8, [sp, #4]
 801749e:	ee08 2a10 	vmov	s16, r2
 80174a2:	468a      	mov	sl, r1
 80174a4:	4699      	mov	r9, r3
 80174a6:	f7e8 fec5 	bl	8000234 <strlen>
 80174aa:	2600      	movs	r6, #0
 80174ac:	4647      	mov	r7, r8
 80174ae:	9002      	str	r0, [sp, #8]
 80174b0:	46b3      	mov	fp, r6
 80174b2:	2510      	movs	r5, #16
 80174b4:	46b0      	mov	r8, r6
 80174b6:	e01d      	b.n	80174f4 <rcutils_repl_str+0x68>
 80174b8:	f10b 0b01 	add.w	fp, fp, #1
 80174bc:	455e      	cmp	r6, fp
 80174be:	d211      	bcs.n	80174e4 <rcutils_repl_str+0x58>
 80174c0:	442e      	add	r6, r5
 80174c2:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80174c6:	f8d9 2010 	ldr.w	r2, [r9, #16]
 80174ca:	00b1      	lsls	r1, r6, #2
 80174cc:	4798      	blx	r3
 80174ce:	2800      	cmp	r0, #0
 80174d0:	f000 8088 	beq.w	80175e4 <rcutils_repl_str+0x158>
 80174d4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80174d8:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
 80174dc:	4680      	mov	r8, r0
 80174de:	bf28      	it	cs
 80174e0:	f44f 1580 	movcs.w	r5, #1048576	@ 0x100000
 80174e4:	9a01      	ldr	r2, [sp, #4]
 80174e6:	eb08 038b 	add.w	r3, r8, fp, lsl #2
 80174ea:	1aa2      	subs	r2, r4, r2
 80174ec:	f843 2c04 	str.w	r2, [r3, #-4]
 80174f0:	9b02      	ldr	r3, [sp, #8]
 80174f2:	18e7      	adds	r7, r4, r3
 80174f4:	4651      	mov	r1, sl
 80174f6:	4638      	mov	r0, r7
 80174f8:	f003 fb57 	bl	801abaa <strstr>
 80174fc:	4604      	mov	r4, r0
 80174fe:	4640      	mov	r0, r8
 8017500:	2c00      	cmp	r4, #0
 8017502:	d1d9      	bne.n	80174b8 <rcutils_repl_str+0x2c>
 8017504:	46b8      	mov	r8, r7
 8017506:	4607      	mov	r7, r0
 8017508:	4640      	mov	r0, r8
 801750a:	f7e8 fe93 	bl	8000234 <strlen>
 801750e:	9b01      	ldr	r3, [sp, #4]
 8017510:	eba8 0303 	sub.w	r3, r8, r3
 8017514:	181c      	adds	r4, r3, r0
 8017516:	9404      	str	r4, [sp, #16]
 8017518:	f1bb 0f00 	cmp.w	fp, #0
 801751c:	d04a      	beq.n	80175b4 <rcutils_repl_str+0x128>
 801751e:	ee18 0a10 	vmov	r0, s16
 8017522:	f7e8 fe87 	bl	8000234 <strlen>
 8017526:	9b02      	ldr	r3, [sp, #8]
 8017528:	f8d9 1010 	ldr.w	r1, [r9, #16]
 801752c:	1ac3      	subs	r3, r0, r3
 801752e:	fb0b 4303 	mla	r3, fp, r3, r4
 8017532:	461a      	mov	r2, r3
 8017534:	9305      	str	r3, [sp, #20]
 8017536:	4606      	mov	r6, r0
 8017538:	f8d9 3000 	ldr.w	r3, [r9]
 801753c:	1c50      	adds	r0, r2, #1
 801753e:	4798      	blx	r3
 8017540:	9003      	str	r0, [sp, #12]
 8017542:	2800      	cmp	r0, #0
 8017544:	d04f      	beq.n	80175e6 <rcutils_repl_str+0x15a>
 8017546:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801754a:	683a      	ldr	r2, [r7, #0]
 801754c:	4641      	mov	r1, r8
 801754e:	f003 fbce 	bl	801acee <memcpy>
 8017552:	683d      	ldr	r5, [r7, #0]
 8017554:	9b03      	ldr	r3, [sp, #12]
 8017556:	9701      	str	r7, [sp, #4]
 8017558:	46ba      	mov	sl, r7
 801755a:	441d      	add	r5, r3
 801755c:	9f02      	ldr	r7, [sp, #8]
 801755e:	f8cd 9008 	str.w	r9, [sp, #8]
 8017562:	2401      	movs	r4, #1
 8017564:	46d1      	mov	r9, sl
 8017566:	ee18 aa10 	vmov	sl, s16
 801756a:	e00a      	b.n	8017582 <rcutils_repl_str+0xf6>
 801756c:	f8d9 5000 	ldr.w	r5, [r9]
 8017570:	1aaa      	subs	r2, r5, r2
 8017572:	1885      	adds	r5, r0, r2
 8017574:	f003 fbbb 	bl	801acee <memcpy>
 8017578:	45a3      	cmp	fp, r4
 801757a:	f104 0201 	add.w	r2, r4, #1
 801757e:	d935      	bls.n	80175ec <rcutils_repl_str+0x160>
 8017580:	4614      	mov	r4, r2
 8017582:	4632      	mov	r2, r6
 8017584:	4651      	mov	r1, sl
 8017586:	4628      	mov	r0, r5
 8017588:	f003 fbb1 	bl	801acee <memcpy>
 801758c:	f859 2b04 	ldr.w	r2, [r9], #4
 8017590:	45a3      	cmp	fp, r4
 8017592:	443a      	add	r2, r7
 8017594:	eb05 0006 	add.w	r0, r5, r6
 8017598:	eb08 0102 	add.w	r1, r8, r2
 801759c:	d1e6      	bne.n	801756c <rcutils_repl_str+0xe0>
 801759e:	9b04      	ldr	r3, [sp, #16]
 80175a0:	1a9a      	subs	r2, r3, r2
 80175a2:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 80175a6:	f003 fba2 	bl	801acee <memcpy>
 80175aa:	9a03      	ldr	r2, [sp, #12]
 80175ac:	9905      	ldr	r1, [sp, #20]
 80175ae:	2300      	movs	r3, #0
 80175b0:	5453      	strb	r3, [r2, r1]
 80175b2:	e00b      	b.n	80175cc <rcutils_repl_str+0x140>
 80175b4:	4620      	mov	r0, r4
 80175b6:	f8d9 3000 	ldr.w	r3, [r9]
 80175ba:	f8d9 1010 	ldr.w	r1, [r9, #16]
 80175be:	3001      	adds	r0, #1
 80175c0:	4798      	blx	r3
 80175c2:	9003      	str	r0, [sp, #12]
 80175c4:	b110      	cbz	r0, 80175cc <rcutils_repl_str+0x140>
 80175c6:	9901      	ldr	r1, [sp, #4]
 80175c8:	f003 fb89 	bl	801acde <strcpy>
 80175cc:	4638      	mov	r0, r7
 80175ce:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80175d2:	f8d9 1010 	ldr.w	r1, [r9, #16]
 80175d6:	4798      	blx	r3
 80175d8:	9803      	ldr	r0, [sp, #12]
 80175da:	b007      	add	sp, #28
 80175dc:	ecbd 8b02 	vpop	{d8}
 80175e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80175e4:	4647      	mov	r7, r8
 80175e6:	2300      	movs	r3, #0
 80175e8:	9303      	str	r3, [sp, #12]
 80175ea:	e7ef      	b.n	80175cc <rcutils_repl_str+0x140>
 80175ec:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 80175f0:	e7db      	b.n	80175aa <rcutils_repl_str+0x11e>
 80175f2:	bf00      	nop

080175f4 <rcutils_snprintf>:
 80175f4:	b40c      	push	{r2, r3}
 80175f6:	b530      	push	{r4, r5, lr}
 80175f8:	b083      	sub	sp, #12
 80175fa:	ab06      	add	r3, sp, #24
 80175fc:	f853 2b04 	ldr.w	r2, [r3], #4
 8017600:	9301      	str	r3, [sp, #4]
 8017602:	b152      	cbz	r2, 801761a <rcutils_snprintf+0x26>
 8017604:	b138      	cbz	r0, 8017616 <rcutils_snprintf+0x22>
 8017606:	b141      	cbz	r1, 801761a <rcutils_snprintf+0x26>
 8017608:	f003 f9dc 	bl	801a9c4 <vsniprintf>
 801760c:	b003      	add	sp, #12
 801760e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017612:	b002      	add	sp, #8
 8017614:	4770      	bx	lr
 8017616:	2900      	cmp	r1, #0
 8017618:	d0f6      	beq.n	8017608 <rcutils_snprintf+0x14>
 801761a:	f003 fb33 	bl	801ac84 <__errno>
 801761e:	2316      	movs	r3, #22
 8017620:	6003      	str	r3, [r0, #0]
 8017622:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017626:	e7f1      	b.n	801760c <rcutils_snprintf+0x18>

08017628 <rcutils_vsnprintf>:
 8017628:	b570      	push	{r4, r5, r6, lr}
 801762a:	b13a      	cbz	r2, 801763c <rcutils_vsnprintf+0x14>
 801762c:	b120      	cbz	r0, 8017638 <rcutils_vsnprintf+0x10>
 801762e:	b129      	cbz	r1, 801763c <rcutils_vsnprintf+0x14>
 8017630:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017634:	f003 b9c6 	b.w	801a9c4 <vsniprintf>
 8017638:	2900      	cmp	r1, #0
 801763a:	d0f9      	beq.n	8017630 <rcutils_vsnprintf+0x8>
 801763c:	f003 fb22 	bl	801ac84 <__errno>
 8017640:	2316      	movs	r3, #22
 8017642:	6003      	str	r3, [r0, #0]
 8017644:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017648:	bd70      	pop	{r4, r5, r6, pc}
 801764a:	bf00      	nop

0801764c <rcutils_strdup>:
 801764c:	b084      	sub	sp, #16
 801764e:	b570      	push	{r4, r5, r6, lr}
 8017650:	b082      	sub	sp, #8
 8017652:	ac07      	add	r4, sp, #28
 8017654:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 8017658:	4605      	mov	r5, r0
 801765a:	b1b0      	cbz	r0, 801768a <rcutils_strdup+0x3e>
 801765c:	f7e8 fdea 	bl	8000234 <strlen>
 8017660:	1c42      	adds	r2, r0, #1
 8017662:	9b07      	ldr	r3, [sp, #28]
 8017664:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8017666:	9201      	str	r2, [sp, #4]
 8017668:	4606      	mov	r6, r0
 801766a:	4610      	mov	r0, r2
 801766c:	4798      	blx	r3
 801766e:	4604      	mov	r4, r0
 8017670:	b128      	cbz	r0, 801767e <rcutils_strdup+0x32>
 8017672:	9a01      	ldr	r2, [sp, #4]
 8017674:	4629      	mov	r1, r5
 8017676:	f003 fb3a 	bl	801acee <memcpy>
 801767a:	2300      	movs	r3, #0
 801767c:	55a3      	strb	r3, [r4, r6]
 801767e:	4620      	mov	r0, r4
 8017680:	b002      	add	sp, #8
 8017682:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017686:	b004      	add	sp, #16
 8017688:	4770      	bx	lr
 801768a:	4604      	mov	r4, r0
 801768c:	e7f7      	b.n	801767e <rcutils_strdup+0x32>
 801768e:	bf00      	nop

08017690 <rcutils_strndup>:
 8017690:	b082      	sub	sp, #8
 8017692:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017694:	ac06      	add	r4, sp, #24
 8017696:	e884 000c 	stmia.w	r4, {r2, r3}
 801769a:	4605      	mov	r5, r0
 801769c:	b188      	cbz	r0, 80176c2 <rcutils_strndup+0x32>
 801769e:	1c4f      	adds	r7, r1, #1
 80176a0:	460e      	mov	r6, r1
 80176a2:	4638      	mov	r0, r7
 80176a4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80176a6:	4790      	blx	r2
 80176a8:	4604      	mov	r4, r0
 80176aa:	b128      	cbz	r0, 80176b8 <rcutils_strndup+0x28>
 80176ac:	463a      	mov	r2, r7
 80176ae:	4629      	mov	r1, r5
 80176b0:	f003 fb1d 	bl	801acee <memcpy>
 80176b4:	2300      	movs	r3, #0
 80176b6:	55a3      	strb	r3, [r4, r6]
 80176b8:	4620      	mov	r0, r4
 80176ba:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80176be:	b002      	add	sp, #8
 80176c0:	4770      	bx	lr
 80176c2:	4604      	mov	r4, r0
 80176c4:	e7f8      	b.n	80176b8 <rcutils_strndup+0x28>
 80176c6:	bf00      	nop

080176c8 <rcutils_get_zero_initialized_string_map>:
 80176c8:	4b01      	ldr	r3, [pc, #4]	@ (80176d0 <rcutils_get_zero_initialized_string_map+0x8>)
 80176ca:	2000      	movs	r0, #0
 80176cc:	6018      	str	r0, [r3, #0]
 80176ce:	4770      	bx	lr
 80176d0:	2000b408 	.word	0x2000b408

080176d4 <rcutils_string_map_reserve>:
 80176d4:	2800      	cmp	r0, #0
 80176d6:	d05f      	beq.n	8017798 <rcutils_string_map_reserve+0xc4>
 80176d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80176dc:	460c      	mov	r4, r1
 80176de:	6801      	ldr	r1, [r0, #0]
 80176e0:	b082      	sub	sp, #8
 80176e2:	4605      	mov	r5, r0
 80176e4:	b129      	cbz	r1, 80176f2 <rcutils_string_map_reserve+0x1e>
 80176e6:	68cb      	ldr	r3, [r1, #12]
 80176e8:	42a3      	cmp	r3, r4
 80176ea:	d906      	bls.n	80176fa <rcutils_string_map_reserve+0x26>
 80176ec:	461c      	mov	r4, r3
 80176ee:	2900      	cmp	r1, #0
 80176f0:	d1f9      	bne.n	80176e6 <rcutils_string_map_reserve+0x12>
 80176f2:	201f      	movs	r0, #31
 80176f4:	b002      	add	sp, #8
 80176f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80176fa:	688b      	ldr	r3, [r1, #8]
 80176fc:	42a3      	cmp	r3, r4
 80176fe:	d047      	beq.n	8017790 <rcutils_string_map_reserve+0xbc>
 8017700:	6a0e      	ldr	r6, [r1, #32]
 8017702:	2c00      	cmp	r4, #0
 8017704:	d034      	beq.n	8017770 <rcutils_string_map_reserve+0x9c>
 8017706:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 801770a:	d243      	bcs.n	8017794 <rcutils_string_map_reserve+0xc0>
 801770c:	00a7      	lsls	r7, r4, #2
 801770e:	f8d1 8018 	ldr.w	r8, [r1, #24]
 8017712:	6808      	ldr	r0, [r1, #0]
 8017714:	4632      	mov	r2, r6
 8017716:	4639      	mov	r1, r7
 8017718:	47c0      	blx	r8
 801771a:	2800      	cmp	r0, #0
 801771c:	d03a      	beq.n	8017794 <rcutils_string_map_reserve+0xc0>
 801771e:	682b      	ldr	r3, [r5, #0]
 8017720:	4632      	mov	r2, r6
 8017722:	6018      	str	r0, [r3, #0]
 8017724:	4639      	mov	r1, r7
 8017726:	6858      	ldr	r0, [r3, #4]
 8017728:	47c0      	blx	r8
 801772a:	2800      	cmp	r0, #0
 801772c:	d032      	beq.n	8017794 <rcutils_string_map_reserve+0xc0>
 801772e:	682d      	ldr	r5, [r5, #0]
 8017730:	68ab      	ldr	r3, [r5, #8]
 8017732:	6068      	str	r0, [r5, #4]
 8017734:	42a3      	cmp	r3, r4
 8017736:	d226      	bcs.n	8017786 <rcutils_string_map_reserve+0xb2>
 8017738:	682a      	ldr	r2, [r5, #0]
 801773a:	eb00 0c07 	add.w	ip, r0, r7
 801773e:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
 8017742:	45e6      	cmp	lr, ip
 8017744:	ea4f 0183 	mov.w	r1, r3, lsl #2
 8017748:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 801774c:	d203      	bcs.n	8017756 <rcutils_string_map_reserve+0x82>
 801774e:	eb02 0c07 	add.w	ip, r2, r7
 8017752:	4566      	cmp	r6, ip
 8017754:	d322      	bcc.n	801779c <rcutils_string_map_reserve+0xc8>
 8017756:	1ae3      	subs	r3, r4, r3
 8017758:	009a      	lsls	r2, r3, #2
 801775a:	4670      	mov	r0, lr
 801775c:	2100      	movs	r1, #0
 801775e:	9201      	str	r2, [sp, #4]
 8017760:	f003 f9fc 	bl	801ab5c <memset>
 8017764:	9a01      	ldr	r2, [sp, #4]
 8017766:	2100      	movs	r1, #0
 8017768:	4630      	mov	r0, r6
 801776a:	f003 f9f7 	bl	801ab5c <memset>
 801776e:	e00a      	b.n	8017786 <rcutils_string_map_reserve+0xb2>
 8017770:	694f      	ldr	r7, [r1, #20]
 8017772:	6808      	ldr	r0, [r1, #0]
 8017774:	4631      	mov	r1, r6
 8017776:	47b8      	blx	r7
 8017778:	682b      	ldr	r3, [r5, #0]
 801777a:	4631      	mov	r1, r6
 801777c:	6858      	ldr	r0, [r3, #4]
 801777e:	601c      	str	r4, [r3, #0]
 8017780:	47b8      	blx	r7
 8017782:	682d      	ldr	r5, [r5, #0]
 8017784:	606c      	str	r4, [r5, #4]
 8017786:	2000      	movs	r0, #0
 8017788:	60ac      	str	r4, [r5, #8]
 801778a:	b002      	add	sp, #8
 801778c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017790:	2000      	movs	r0, #0
 8017792:	e7af      	b.n	80176f4 <rcutils_string_map_reserve+0x20>
 8017794:	200a      	movs	r0, #10
 8017796:	e7ad      	b.n	80176f4 <rcutils_string_map_reserve+0x20>
 8017798:	200b      	movs	r0, #11
 801779a:	4770      	bx	lr
 801779c:	1f0b      	subs	r3, r1, #4
 801779e:	4418      	add	r0, r3
 80177a0:	4413      	add	r3, r2
 80177a2:	3a04      	subs	r2, #4
 80177a4:	4417      	add	r7, r2
 80177a6:	2200      	movs	r2, #0
 80177a8:	f843 2f04 	str.w	r2, [r3, #4]!
 80177ac:	42bb      	cmp	r3, r7
 80177ae:	f840 2f04 	str.w	r2, [r0, #4]!
 80177b2:	d1f9      	bne.n	80177a8 <rcutils_string_map_reserve+0xd4>
 80177b4:	e7e7      	b.n	8017786 <rcutils_string_map_reserve+0xb2>
 80177b6:	bf00      	nop

080177b8 <rcutils_string_map_init>:
 80177b8:	b082      	sub	sp, #8
 80177ba:	b570      	push	{r4, r5, r6, lr}
 80177bc:	ac04      	add	r4, sp, #16
 80177be:	e884 000c 	stmia.w	r4, {r2, r3}
 80177c2:	b380      	cbz	r0, 8017826 <rcutils_string_map_init+0x6e>
 80177c4:	6806      	ldr	r6, [r0, #0]
 80177c6:	4604      	mov	r4, r0
 80177c8:	b12e      	cbz	r6, 80177d6 <rcutils_string_map_init+0x1e>
 80177ca:	251e      	movs	r5, #30
 80177cc:	4628      	mov	r0, r5
 80177ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80177d2:	b002      	add	sp, #8
 80177d4:	4770      	bx	lr
 80177d6:	a804      	add	r0, sp, #16
 80177d8:	460d      	mov	r5, r1
 80177da:	f7f7 fcc7 	bl	800f16c <rcutils_allocator_is_valid>
 80177de:	b310      	cbz	r0, 8017826 <rcutils_string_map_init+0x6e>
 80177e0:	9b04      	ldr	r3, [sp, #16]
 80177e2:	9908      	ldr	r1, [sp, #32]
 80177e4:	2024      	movs	r0, #36	@ 0x24
 80177e6:	4798      	blx	r3
 80177e8:	6020      	str	r0, [r4, #0]
 80177ea:	b310      	cbz	r0, 8017832 <rcutils_string_map_init+0x7a>
 80177ec:	f10d 0e10 	add.w	lr, sp, #16
 80177f0:	e9c0 6600 	strd	r6, r6, [r0]
 80177f4:	e9c0 6602 	strd	r6, r6, [r0, #8]
 80177f8:	f100 0c10 	add.w	ip, r0, #16
 80177fc:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8017800:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017804:	f8de 3000 	ldr.w	r3, [lr]
 8017808:	f8cc 3000 	str.w	r3, [ip]
 801780c:	4629      	mov	r1, r5
 801780e:	4620      	mov	r0, r4
 8017810:	f7ff ff60 	bl	80176d4 <rcutils_string_map_reserve>
 8017814:	4605      	mov	r5, r0
 8017816:	2800      	cmp	r0, #0
 8017818:	d0d8      	beq.n	80177cc <rcutils_string_map_init+0x14>
 801781a:	9b05      	ldr	r3, [sp, #20]
 801781c:	9908      	ldr	r1, [sp, #32]
 801781e:	6820      	ldr	r0, [r4, #0]
 8017820:	4798      	blx	r3
 8017822:	6026      	str	r6, [r4, #0]
 8017824:	e7d2      	b.n	80177cc <rcutils_string_map_init+0x14>
 8017826:	250b      	movs	r5, #11
 8017828:	4628      	mov	r0, r5
 801782a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801782e:	b002      	add	sp, #8
 8017830:	4770      	bx	lr
 8017832:	250a      	movs	r5, #10
 8017834:	e7ca      	b.n	80177cc <rcutils_string_map_init+0x14>
 8017836:	bf00      	nop

08017838 <rcutils_string_map_fini>:
 8017838:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801783c:	b082      	sub	sp, #8
 801783e:	2800      	cmp	r0, #0
 8017840:	d03a      	beq.n	80178b8 <rcutils_string_map_fini+0x80>
 8017842:	6804      	ldr	r4, [r0, #0]
 8017844:	4606      	mov	r6, r0
 8017846:	2c00      	cmp	r4, #0
 8017848:	d032      	beq.n	80178b0 <rcutils_string_map_fini+0x78>
 801784a:	68a3      	ldr	r3, [r4, #8]
 801784c:	b32b      	cbz	r3, 801789a <rcutils_string_map_fini+0x62>
 801784e:	2500      	movs	r5, #0
 8017850:	6822      	ldr	r2, [r4, #0]
 8017852:	462f      	mov	r7, r5
 8017854:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8017858:	b1e0      	cbz	r0, 8017894 <rcutils_string_map_fini+0x5c>
 801785a:	6a21      	ldr	r1, [r4, #32]
 801785c:	f8d4 8014 	ldr.w	r8, [r4, #20]
 8017860:	9101      	str	r1, [sp, #4]
 8017862:	47c0      	blx	r8
 8017864:	e9d4 2300 	ldrd	r2, r3, [r4]
 8017868:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 801786c:	9901      	ldr	r1, [sp, #4]
 801786e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8017872:	47c0      	blx	r8
 8017874:	68e3      	ldr	r3, [r4, #12]
 8017876:	6862      	ldr	r2, [r4, #4]
 8017878:	3b01      	subs	r3, #1
 801787a:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 801787e:	60e3      	str	r3, [r4, #12]
 8017880:	6834      	ldr	r4, [r6, #0]
 8017882:	68a3      	ldr	r3, [r4, #8]
 8017884:	3501      	adds	r5, #1
 8017886:	429d      	cmp	r5, r3
 8017888:	d207      	bcs.n	801789a <rcutils_string_map_fini+0x62>
 801788a:	6822      	ldr	r2, [r4, #0]
 801788c:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8017890:	2800      	cmp	r0, #0
 8017892:	d1e2      	bne.n	801785a <rcutils_string_map_fini+0x22>
 8017894:	3501      	adds	r5, #1
 8017896:	429d      	cmp	r5, r3
 8017898:	d3dc      	bcc.n	8017854 <rcutils_string_map_fini+0x1c>
 801789a:	2100      	movs	r1, #0
 801789c:	4630      	mov	r0, r6
 801789e:	f7ff ff19 	bl	80176d4 <rcutils_string_map_reserve>
 80178a2:	4604      	mov	r4, r0
 80178a4:	b920      	cbnz	r0, 80178b0 <rcutils_string_map_fini+0x78>
 80178a6:	6830      	ldr	r0, [r6, #0]
 80178a8:	6943      	ldr	r3, [r0, #20]
 80178aa:	6a01      	ldr	r1, [r0, #32]
 80178ac:	4798      	blx	r3
 80178ae:	6034      	str	r4, [r6, #0]
 80178b0:	4620      	mov	r0, r4
 80178b2:	b002      	add	sp, #8
 80178b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80178b8:	240b      	movs	r4, #11
 80178ba:	4620      	mov	r0, r4
 80178bc:	b002      	add	sp, #8
 80178be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80178c2:	bf00      	nop

080178c4 <rcutils_string_map_getn>:
 80178c4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80178c8:	b300      	cbz	r0, 801790c <rcutils_string_map_getn+0x48>
 80178ca:	6807      	ldr	r7, [r0, #0]
 80178cc:	b1ff      	cbz	r7, 801790e <rcutils_string_map_getn+0x4a>
 80178ce:	4688      	mov	r8, r1
 80178d0:	b1e1      	cbz	r1, 801790c <rcutils_string_map_getn+0x48>
 80178d2:	f8d7 a008 	ldr.w	sl, [r7, #8]
 80178d6:	683e      	ldr	r6, [r7, #0]
 80178d8:	f1ba 0f00 	cmp.w	sl, #0
 80178dc:	d016      	beq.n	801790c <rcutils_string_map_getn+0x48>
 80178de:	4691      	mov	r9, r2
 80178e0:	3e04      	subs	r6, #4
 80178e2:	2400      	movs	r4, #0
 80178e4:	f856 5f04 	ldr.w	r5, [r6, #4]!
 80178e8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80178ec:	4628      	mov	r0, r5
 80178ee:	3401      	adds	r4, #1
 80178f0:	b155      	cbz	r5, 8017908 <rcutils_string_map_getn+0x44>
 80178f2:	f7e8 fc9f 	bl	8000234 <strlen>
 80178f6:	4548      	cmp	r0, r9
 80178f8:	4602      	mov	r2, r0
 80178fa:	4629      	mov	r1, r5
 80178fc:	bf38      	it	cc
 80178fe:	464a      	movcc	r2, r9
 8017900:	4640      	mov	r0, r8
 8017902:	f003 f940 	bl	801ab86 <strncmp>
 8017906:	b128      	cbz	r0, 8017914 <rcutils_string_map_getn+0x50>
 8017908:	45a2      	cmp	sl, r4
 801790a:	d1eb      	bne.n	80178e4 <rcutils_string_map_getn+0x20>
 801790c:	2700      	movs	r7, #0
 801790e:	4638      	mov	r0, r7
 8017910:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017914:	687b      	ldr	r3, [r7, #4]
 8017916:	f853 700b 	ldr.w	r7, [r3, fp]
 801791a:	4638      	mov	r0, r7
 801791c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08017920 <rmw_get_zero_initialized_context>:
 8017920:	b510      	push	{r4, lr}
 8017922:	4604      	mov	r4, r0
 8017924:	3010      	adds	r0, #16
 8017926:	f7f7 fcb3 	bl	800f290 <rmw_get_zero_initialized_init_options>
 801792a:	2300      	movs	r3, #0
 801792c:	2000      	movs	r0, #0
 801792e:	2100      	movs	r1, #0
 8017930:	e9c4 0100 	strd	r0, r1, [r4]
 8017934:	e9c4 3312 	strd	r3, r3, [r4, #72]	@ 0x48
 8017938:	60a3      	str	r3, [r4, #8]
 801793a:	4620      	mov	r0, r4
 801793c:	bd10      	pop	{r4, pc}
 801793e:	bf00      	nop

08017940 <rmw_subscription_content_filter_options_fini>:
 8017940:	b1b0      	cbz	r0, 8017970 <rmw_subscription_content_filter_options_fini+0x30>
 8017942:	b538      	push	{r3, r4, r5, lr}
 8017944:	4604      	mov	r4, r0
 8017946:	4608      	mov	r0, r1
 8017948:	460d      	mov	r5, r1
 801794a:	f7f7 fc0f 	bl	800f16c <rcutils_allocator_is_valid>
 801794e:	b168      	cbz	r0, 801796c <rmw_subscription_content_filter_options_fini+0x2c>
 8017950:	6820      	ldr	r0, [r4, #0]
 8017952:	b120      	cbz	r0, 801795e <rmw_subscription_content_filter_options_fini+0x1e>
 8017954:	686b      	ldr	r3, [r5, #4]
 8017956:	6929      	ldr	r1, [r5, #16]
 8017958:	4798      	blx	r3
 801795a:	2300      	movs	r3, #0
 801795c:	6023      	str	r3, [r4, #0]
 801795e:	1d20      	adds	r0, r4, #4
 8017960:	f002 fb4e 	bl	801a000 <rcutils_string_array_fini>
 8017964:	3800      	subs	r0, #0
 8017966:	bf18      	it	ne
 8017968:	2001      	movne	r0, #1
 801796a:	bd38      	pop	{r3, r4, r5, pc}
 801796c:	200b      	movs	r0, #11
 801796e:	bd38      	pop	{r3, r4, r5, pc}
 8017970:	200b      	movs	r0, #11
 8017972:	4770      	bx	lr

08017974 <rmw_get_default_subscription_options>:
 8017974:	2200      	movs	r2, #0
 8017976:	e9c0 2200 	strd	r2, r2, [r0]
 801797a:	6082      	str	r2, [r0, #8]
 801797c:	4770      	bx	lr
 801797e:	bf00      	nop

08017980 <rmw_time_equal>:
 8017980:	b4f0      	push	{r4, r5, r6, r7}
 8017982:	b084      	sub	sp, #16
 8017984:	ac04      	add	r4, sp, #16
 8017986:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 801798a:	4603      	mov	r3, r0
 801798c:	4924      	ldr	r1, [pc, #144]	@ (8017a20 <rmw_time_equal+0xa0>)
 801798e:	9e03      	ldr	r6, [sp, #12]
 8017990:	e9dd 5001 	ldrd	r5, r0, [sp, #4]
 8017994:	2202      	movs	r2, #2
 8017996:	4299      	cmp	r1, r3
 8017998:	41aa      	sbcs	r2, r5
 801799a:	d330      	bcc.n	80179fe <rmw_time_equal+0x7e>
 801799c:	4c21      	ldr	r4, [pc, #132]	@ (8017a24 <rmw_time_equal+0xa4>)
 801799e:	fba3 3204 	umull	r3, r2, r3, r4
 80179a2:	fb04 2205 	mla	r2, r4, r5, r2
 80179a6:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80179aa:	43dd      	mvns	r5, r3
 80179ac:	1a8c      	subs	r4, r1, r2
 80179ae:	4285      	cmp	r5, r0
 80179b0:	41b4      	sbcs	r4, r6
 80179b2:	d332      	bcc.n	8017a1a <rmw_time_equal+0x9a>
 80179b4:	eb10 0c03 	adds.w	ip, r0, r3
 80179b8:	eb42 0106 	adc.w	r1, r2, r6
 80179bc:	e9dd 3608 	ldrd	r3, r6, [sp, #32]
 80179c0:	4817      	ldr	r0, [pc, #92]	@ (8017a20 <rmw_time_equal+0xa0>)
 80179c2:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 80179c4:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80179c6:	2202      	movs	r2, #2
 80179c8:	4298      	cmp	r0, r3
 80179ca:	41b2      	sbcs	r2, r6
 80179cc:	d31c      	bcc.n	8017a08 <rmw_time_equal+0x88>
 80179ce:	4c15      	ldr	r4, [pc, #84]	@ (8017a24 <rmw_time_equal+0xa4>)
 80179d0:	fba3 3204 	umull	r3, r2, r3, r4
 80179d4:	fb04 2206 	mla	r2, r4, r6, r2
 80179d8:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 80179dc:	43de      	mvns	r6, r3
 80179de:	1a84      	subs	r4, r0, r2
 80179e0:	42ae      	cmp	r6, r5
 80179e2:	41bc      	sbcs	r4, r7
 80179e4:	d315      	bcc.n	8017a12 <rmw_time_equal+0x92>
 80179e6:	195b      	adds	r3, r3, r5
 80179e8:	eb42 0207 	adc.w	r2, r2, r7
 80179ec:	428a      	cmp	r2, r1
 80179ee:	bf08      	it	eq
 80179f0:	4563      	cmpeq	r3, ip
 80179f2:	bf0c      	ite	eq
 80179f4:	2001      	moveq	r0, #1
 80179f6:	2000      	movne	r0, #0
 80179f8:	b004      	add	sp, #16
 80179fa:	bcf0      	pop	{r4, r5, r6, r7}
 80179fc:	4770      	bx	lr
 80179fe:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8017a02:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8017a06:	e7d9      	b.n	80179bc <rmw_time_equal+0x3c>
 8017a08:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8017a0c:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8017a10:	e7ec      	b.n	80179ec <rmw_time_equal+0x6c>
 8017a12:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8017a16:	4602      	mov	r2, r0
 8017a18:	e7e8      	b.n	80179ec <rmw_time_equal+0x6c>
 8017a1a:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8017a1e:	e7cd      	b.n	80179bc <rmw_time_equal+0x3c>
 8017a20:	25c17d04 	.word	0x25c17d04
 8017a24:	3b9aca00 	.word	0x3b9aca00

08017a28 <rmw_time_total_nsec>:
 8017a28:	b470      	push	{r4, r5, r6}
 8017a2a:	b085      	sub	sp, #20
 8017a2c:	ac04      	add	r4, sp, #16
 8017a2e:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 8017a32:	4603      	mov	r3, r0
 8017a34:	4912      	ldr	r1, [pc, #72]	@ (8017a80 <rmw_time_total_nsec+0x58>)
 8017a36:	9e03      	ldr	r6, [sp, #12]
 8017a38:	e9dd 5001 	ldrd	r5, r0, [sp, #4]
 8017a3c:	2202      	movs	r2, #2
 8017a3e:	4299      	cmp	r1, r3
 8017a40:	41aa      	sbcs	r2, r5
 8017a42:	d311      	bcc.n	8017a68 <rmw_time_total_nsec+0x40>
 8017a44:	4c0f      	ldr	r4, [pc, #60]	@ (8017a84 <rmw_time_total_nsec+0x5c>)
 8017a46:	fba3 3204 	umull	r3, r2, r3, r4
 8017a4a:	fb04 2205 	mla	r2, r4, r5, r2
 8017a4e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8017a52:	43dd      	mvns	r5, r3
 8017a54:	1a8c      	subs	r4, r1, r2
 8017a56:	4285      	cmp	r5, r0
 8017a58:	41b4      	sbcs	r4, r6
 8017a5a:	d30c      	bcc.n	8017a76 <rmw_time_total_nsec+0x4e>
 8017a5c:	1818      	adds	r0, r3, r0
 8017a5e:	eb42 0106 	adc.w	r1, r2, r6
 8017a62:	b005      	add	sp, #20
 8017a64:	bc70      	pop	{r4, r5, r6}
 8017a66:	4770      	bx	lr
 8017a68:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017a6c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8017a70:	b005      	add	sp, #20
 8017a72:	bc70      	pop	{r4, r5, r6}
 8017a74:	4770      	bx	lr
 8017a76:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017a7a:	b005      	add	sp, #20
 8017a7c:	bc70      	pop	{r4, r5, r6}
 8017a7e:	4770      	bx	lr
 8017a80:	25c17d04 	.word	0x25c17d04
 8017a84:	3b9aca00 	.word	0x3b9aca00

08017a88 <rmw_get_zero_initialized_message_info>:
 8017a88:	b510      	push	{r4, lr}
 8017a8a:	2240      	movs	r2, #64	@ 0x40
 8017a8c:	4604      	mov	r4, r0
 8017a8e:	2100      	movs	r1, #0
 8017a90:	f003 f864 	bl	801ab5c <memset>
 8017a94:	4620      	mov	r0, r4
 8017a96:	bd10      	pop	{r4, pc}

08017a98 <rmw_validate_full_topic_name>:
 8017a98:	2800      	cmp	r0, #0
 8017a9a:	d057      	beq.n	8017b4c <rmw_validate_full_topic_name+0xb4>
 8017a9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017aa0:	460d      	mov	r5, r1
 8017aa2:	2900      	cmp	r1, #0
 8017aa4:	d054      	beq.n	8017b50 <rmw_validate_full_topic_name+0xb8>
 8017aa6:	4616      	mov	r6, r2
 8017aa8:	4604      	mov	r4, r0
 8017aaa:	f7e8 fbc3 	bl	8000234 <strlen>
 8017aae:	b148      	cbz	r0, 8017ac4 <rmw_validate_full_topic_name+0x2c>
 8017ab0:	7823      	ldrb	r3, [r4, #0]
 8017ab2:	2b2f      	cmp	r3, #47	@ 0x2f
 8017ab4:	d00d      	beq.n	8017ad2 <rmw_validate_full_topic_name+0x3a>
 8017ab6:	2302      	movs	r3, #2
 8017ab8:	602b      	str	r3, [r5, #0]
 8017aba:	b13e      	cbz	r6, 8017acc <rmw_validate_full_topic_name+0x34>
 8017abc:	2000      	movs	r0, #0
 8017abe:	6030      	str	r0, [r6, #0]
 8017ac0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017ac4:	2301      	movs	r3, #1
 8017ac6:	602b      	str	r3, [r5, #0]
 8017ac8:	2e00      	cmp	r6, #0
 8017aca:	d1f7      	bne.n	8017abc <rmw_validate_full_topic_name+0x24>
 8017acc:	2000      	movs	r0, #0
 8017ace:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017ad2:	1e43      	subs	r3, r0, #1
 8017ad4:	5ce2      	ldrb	r2, [r4, r3]
 8017ad6:	2a2f      	cmp	r2, #47	@ 0x2f
 8017ad8:	d03c      	beq.n	8017b54 <rmw_validate_full_topic_name+0xbc>
 8017ada:	1e63      	subs	r3, r4, #1
 8017adc:	eb03 0800 	add.w	r8, r3, r0
 8017ae0:	f1c4 0e01 	rsb	lr, r4, #1
 8017ae4:	eb0e 0703 	add.w	r7, lr, r3
 8017ae8:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8017aec:	f021 0220 	bic.w	r2, r1, #32
 8017af0:	3a41      	subs	r2, #65	@ 0x41
 8017af2:	2a19      	cmp	r2, #25
 8017af4:	f1a1 0c2f 	sub.w	ip, r1, #47	@ 0x2f
 8017af8:	d90b      	bls.n	8017b12 <rmw_validate_full_topic_name+0x7a>
 8017afa:	295f      	cmp	r1, #95	@ 0x5f
 8017afc:	d009      	beq.n	8017b12 <rmw_validate_full_topic_name+0x7a>
 8017afe:	f1bc 0f0a 	cmp.w	ip, #10
 8017b02:	d906      	bls.n	8017b12 <rmw_validate_full_topic_name+0x7a>
 8017b04:	2304      	movs	r3, #4
 8017b06:	602b      	str	r3, [r5, #0]
 8017b08:	2e00      	cmp	r6, #0
 8017b0a:	d0df      	beq.n	8017acc <rmw_validate_full_topic_name+0x34>
 8017b0c:	6037      	str	r7, [r6, #0]
 8017b0e:	2000      	movs	r0, #0
 8017b10:	e7d6      	b.n	8017ac0 <rmw_validate_full_topic_name+0x28>
 8017b12:	4543      	cmp	r3, r8
 8017b14:	d1e6      	bne.n	8017ae4 <rmw_validate_full_topic_name+0x4c>
 8017b16:	4f1a      	ldr	r7, [pc, #104]	@ (8017b80 <rmw_validate_full_topic_name+0xe8>)
 8017b18:	2301      	movs	r3, #1
 8017b1a:	e004      	b.n	8017b26 <rmw_validate_full_topic_name+0x8e>
 8017b1c:	4298      	cmp	r0, r3
 8017b1e:	f104 0401 	add.w	r4, r4, #1
 8017b22:	d91c      	bls.n	8017b5e <rmw_validate_full_topic_name+0xc6>
 8017b24:	4613      	mov	r3, r2
 8017b26:	4298      	cmp	r0, r3
 8017b28:	f103 0201 	add.w	r2, r3, #1
 8017b2c:	d0f6      	beq.n	8017b1c <rmw_validate_full_topic_name+0x84>
 8017b2e:	7821      	ldrb	r1, [r4, #0]
 8017b30:	292f      	cmp	r1, #47	@ 0x2f
 8017b32:	d1f3      	bne.n	8017b1c <rmw_validate_full_topic_name+0x84>
 8017b34:	7861      	ldrb	r1, [r4, #1]
 8017b36:	292f      	cmp	r1, #47	@ 0x2f
 8017b38:	d01c      	beq.n	8017b74 <rmw_validate_full_topic_name+0xdc>
 8017b3a:	5dc9      	ldrb	r1, [r1, r7]
 8017b3c:	0749      	lsls	r1, r1, #29
 8017b3e:	d5ed      	bpl.n	8017b1c <rmw_validate_full_topic_name+0x84>
 8017b40:	2206      	movs	r2, #6
 8017b42:	602a      	str	r2, [r5, #0]
 8017b44:	2e00      	cmp	r6, #0
 8017b46:	d0c1      	beq.n	8017acc <rmw_validate_full_topic_name+0x34>
 8017b48:	6033      	str	r3, [r6, #0]
 8017b4a:	e7bf      	b.n	8017acc <rmw_validate_full_topic_name+0x34>
 8017b4c:	200b      	movs	r0, #11
 8017b4e:	4770      	bx	lr
 8017b50:	200b      	movs	r0, #11
 8017b52:	e7b5      	b.n	8017ac0 <rmw_validate_full_topic_name+0x28>
 8017b54:	2203      	movs	r2, #3
 8017b56:	602a      	str	r2, [r5, #0]
 8017b58:	2e00      	cmp	r6, #0
 8017b5a:	d1f5      	bne.n	8017b48 <rmw_validate_full_topic_name+0xb0>
 8017b5c:	e7b6      	b.n	8017acc <rmw_validate_full_topic_name+0x34>
 8017b5e:	28f7      	cmp	r0, #247	@ 0xf7
 8017b60:	d802      	bhi.n	8017b68 <rmw_validate_full_topic_name+0xd0>
 8017b62:	2000      	movs	r0, #0
 8017b64:	6028      	str	r0, [r5, #0]
 8017b66:	e7ab      	b.n	8017ac0 <rmw_validate_full_topic_name+0x28>
 8017b68:	2307      	movs	r3, #7
 8017b6a:	602b      	str	r3, [r5, #0]
 8017b6c:	2e00      	cmp	r6, #0
 8017b6e:	d0ad      	beq.n	8017acc <rmw_validate_full_topic_name+0x34>
 8017b70:	23f6      	movs	r3, #246	@ 0xf6
 8017b72:	e7e9      	b.n	8017b48 <rmw_validate_full_topic_name+0xb0>
 8017b74:	2205      	movs	r2, #5
 8017b76:	602a      	str	r2, [r5, #0]
 8017b78:	2e00      	cmp	r6, #0
 8017b7a:	d1e5      	bne.n	8017b48 <rmw_validate_full_topic_name+0xb0>
 8017b7c:	e7a6      	b.n	8017acc <rmw_validate_full_topic_name+0x34>
 8017b7e:	bf00      	nop
 8017b80:	0801e3c3 	.word	0x0801e3c3

08017b84 <rmw_validate_namespace_with_size>:
 8017b84:	b340      	cbz	r0, 8017bd8 <rmw_validate_namespace_with_size+0x54>
 8017b86:	b570      	push	{r4, r5, r6, lr}
 8017b88:	4614      	mov	r4, r2
 8017b8a:	b0c2      	sub	sp, #264	@ 0x108
 8017b8c:	b332      	cbz	r2, 8017bdc <rmw_validate_namespace_with_size+0x58>
 8017b8e:	2901      	cmp	r1, #1
 8017b90:	460d      	mov	r5, r1
 8017b92:	461e      	mov	r6, r3
 8017b94:	d102      	bne.n	8017b9c <rmw_validate_namespace_with_size+0x18>
 8017b96:	7803      	ldrb	r3, [r0, #0]
 8017b98:	2b2f      	cmp	r3, #47	@ 0x2f
 8017b9a:	d012      	beq.n	8017bc2 <rmw_validate_namespace_with_size+0x3e>
 8017b9c:	aa01      	add	r2, sp, #4
 8017b9e:	4669      	mov	r1, sp
 8017ba0:	f7ff ff7a 	bl	8017a98 <rmw_validate_full_topic_name>
 8017ba4:	b978      	cbnz	r0, 8017bc6 <rmw_validate_namespace_with_size+0x42>
 8017ba6:	9b00      	ldr	r3, [sp, #0]
 8017ba8:	b14b      	cbz	r3, 8017bbe <rmw_validate_namespace_with_size+0x3a>
 8017baa:	2b07      	cmp	r3, #7
 8017bac:	d007      	beq.n	8017bbe <rmw_validate_namespace_with_size+0x3a>
 8017bae:	1e5a      	subs	r2, r3, #1
 8017bb0:	2a05      	cmp	r2, #5
 8017bb2:	d82b      	bhi.n	8017c0c <rmw_validate_namespace_with_size+0x88>
 8017bb4:	e8df f002 	tbb	[pc, r2]
 8017bb8:	1e212427 	.word	0x1e212427
 8017bbc:	141b      	.short	0x141b
 8017bbe:	2df5      	cmp	r5, #245	@ 0xf5
 8017bc0:	d803      	bhi.n	8017bca <rmw_validate_namespace_with_size+0x46>
 8017bc2:	2000      	movs	r0, #0
 8017bc4:	6020      	str	r0, [r4, #0]
 8017bc6:	b042      	add	sp, #264	@ 0x108
 8017bc8:	bd70      	pop	{r4, r5, r6, pc}
 8017bca:	2307      	movs	r3, #7
 8017bcc:	6023      	str	r3, [r4, #0]
 8017bce:	2e00      	cmp	r6, #0
 8017bd0:	d0f9      	beq.n	8017bc6 <rmw_validate_namespace_with_size+0x42>
 8017bd2:	23f4      	movs	r3, #244	@ 0xf4
 8017bd4:	6033      	str	r3, [r6, #0]
 8017bd6:	e7f6      	b.n	8017bc6 <rmw_validate_namespace_with_size+0x42>
 8017bd8:	200b      	movs	r0, #11
 8017bda:	4770      	bx	lr
 8017bdc:	200b      	movs	r0, #11
 8017bde:	e7f2      	b.n	8017bc6 <rmw_validate_namespace_with_size+0x42>
 8017be0:	2306      	movs	r3, #6
 8017be2:	6023      	str	r3, [r4, #0]
 8017be4:	2e00      	cmp	r6, #0
 8017be6:	d0ee      	beq.n	8017bc6 <rmw_validate_namespace_with_size+0x42>
 8017be8:	9b01      	ldr	r3, [sp, #4]
 8017bea:	6033      	str	r3, [r6, #0]
 8017bec:	e7eb      	b.n	8017bc6 <rmw_validate_namespace_with_size+0x42>
 8017bee:	2305      	movs	r3, #5
 8017bf0:	6023      	str	r3, [r4, #0]
 8017bf2:	e7f7      	b.n	8017be4 <rmw_validate_namespace_with_size+0x60>
 8017bf4:	2304      	movs	r3, #4
 8017bf6:	6023      	str	r3, [r4, #0]
 8017bf8:	e7f4      	b.n	8017be4 <rmw_validate_namespace_with_size+0x60>
 8017bfa:	2303      	movs	r3, #3
 8017bfc:	6023      	str	r3, [r4, #0]
 8017bfe:	e7f1      	b.n	8017be4 <rmw_validate_namespace_with_size+0x60>
 8017c00:	2302      	movs	r3, #2
 8017c02:	6023      	str	r3, [r4, #0]
 8017c04:	e7ee      	b.n	8017be4 <rmw_validate_namespace_with_size+0x60>
 8017c06:	2301      	movs	r3, #1
 8017c08:	6023      	str	r3, [r4, #0]
 8017c0a:	e7eb      	b.n	8017be4 <rmw_validate_namespace_with_size+0x60>
 8017c0c:	4a03      	ldr	r2, [pc, #12]	@ (8017c1c <rmw_validate_namespace_with_size+0x98>)
 8017c0e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8017c12:	a802      	add	r0, sp, #8
 8017c14:	f7ff fcee 	bl	80175f4 <rcutils_snprintf>
 8017c18:	2001      	movs	r0, #1
 8017c1a:	e7d4      	b.n	8017bc6 <rmw_validate_namespace_with_size+0x42>
 8017c1c:	0801d8a0 	.word	0x0801d8a0

08017c20 <rmw_validate_namespace>:
 8017c20:	b168      	cbz	r0, 8017c3e <rmw_validate_namespace+0x1e>
 8017c22:	b570      	push	{r4, r5, r6, lr}
 8017c24:	460d      	mov	r5, r1
 8017c26:	4616      	mov	r6, r2
 8017c28:	4604      	mov	r4, r0
 8017c2a:	f7e8 fb03 	bl	8000234 <strlen>
 8017c2e:	4633      	mov	r3, r6
 8017c30:	4601      	mov	r1, r0
 8017c32:	462a      	mov	r2, r5
 8017c34:	4620      	mov	r0, r4
 8017c36:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017c3a:	f7ff bfa3 	b.w	8017b84 <rmw_validate_namespace_with_size>
 8017c3e:	200b      	movs	r0, #11
 8017c40:	4770      	bx	lr
 8017c42:	bf00      	nop

08017c44 <rmw_namespace_validation_result_string>:
 8017c44:	2807      	cmp	r0, #7
 8017c46:	bf9a      	itte	ls
 8017c48:	4b02      	ldrls	r3, [pc, #8]	@ (8017c54 <rmw_namespace_validation_result_string+0x10>)
 8017c4a:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 8017c4e:	4802      	ldrhi	r0, [pc, #8]	@ (8017c58 <rmw_namespace_validation_result_string+0x14>)
 8017c50:	4770      	bx	lr
 8017c52:	bf00      	nop
 8017c54:	0801e288 	.word	0x0801e288
 8017c58:	0801d8f0 	.word	0x0801d8f0

08017c5c <rmw_validate_node_name>:
 8017c5c:	2800      	cmp	r0, #0
 8017c5e:	d03b      	beq.n	8017cd8 <rmw_validate_node_name+0x7c>
 8017c60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017c64:	460d      	mov	r5, r1
 8017c66:	2900      	cmp	r1, #0
 8017c68:	d038      	beq.n	8017cdc <rmw_validate_node_name+0x80>
 8017c6a:	4616      	mov	r6, r2
 8017c6c:	4604      	mov	r4, r0
 8017c6e:	f7e8 fae1 	bl	8000234 <strlen>
 8017c72:	b1e0      	cbz	r0, 8017cae <rmw_validate_node_name+0x52>
 8017c74:	1e63      	subs	r3, r4, #1
 8017c76:	eb03 0800 	add.w	r8, r3, r0
 8017c7a:	f1c4 0101 	rsb	r1, r4, #1
 8017c7e:	18cf      	adds	r7, r1, r3
 8017c80:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 8017c84:	f1ae 0230 	sub.w	r2, lr, #48	@ 0x30
 8017c88:	f02e 0c20 	bic.w	ip, lr, #32
 8017c8c:	2a09      	cmp	r2, #9
 8017c8e:	f1ac 0c41 	sub.w	ip, ip, #65	@ 0x41
 8017c92:	d914      	bls.n	8017cbe <rmw_validate_node_name+0x62>
 8017c94:	f1bc 0f19 	cmp.w	ip, #25
 8017c98:	d911      	bls.n	8017cbe <rmw_validate_node_name+0x62>
 8017c9a:	f1be 0f5f 	cmp.w	lr, #95	@ 0x5f
 8017c9e:	d00e      	beq.n	8017cbe <rmw_validate_node_name+0x62>
 8017ca0:	2302      	movs	r3, #2
 8017ca2:	602b      	str	r3, [r5, #0]
 8017ca4:	b106      	cbz	r6, 8017ca8 <rmw_validate_node_name+0x4c>
 8017ca6:	6037      	str	r7, [r6, #0]
 8017ca8:	2000      	movs	r0, #0
 8017caa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017cae:	2301      	movs	r3, #1
 8017cb0:	602b      	str	r3, [r5, #0]
 8017cb2:	2e00      	cmp	r6, #0
 8017cb4:	d0f8      	beq.n	8017ca8 <rmw_validate_node_name+0x4c>
 8017cb6:	2000      	movs	r0, #0
 8017cb8:	6030      	str	r0, [r6, #0]
 8017cba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017cbe:	4543      	cmp	r3, r8
 8017cc0:	d1dd      	bne.n	8017c7e <rmw_validate_node_name+0x22>
 8017cc2:	7822      	ldrb	r2, [r4, #0]
 8017cc4:	4b0d      	ldr	r3, [pc, #52]	@ (8017cfc <rmw_validate_node_name+0xa0>)
 8017cc6:	5cd3      	ldrb	r3, [r2, r3]
 8017cc8:	f013 0304 	ands.w	r3, r3, #4
 8017ccc:	d110      	bne.n	8017cf0 <rmw_validate_node_name+0x94>
 8017cce:	28ff      	cmp	r0, #255	@ 0xff
 8017cd0:	d806      	bhi.n	8017ce0 <rmw_validate_node_name+0x84>
 8017cd2:	602b      	str	r3, [r5, #0]
 8017cd4:	4618      	mov	r0, r3
 8017cd6:	e7e8      	b.n	8017caa <rmw_validate_node_name+0x4e>
 8017cd8:	200b      	movs	r0, #11
 8017cda:	4770      	bx	lr
 8017cdc:	200b      	movs	r0, #11
 8017cde:	e7e4      	b.n	8017caa <rmw_validate_node_name+0x4e>
 8017ce0:	2204      	movs	r2, #4
 8017ce2:	602a      	str	r2, [r5, #0]
 8017ce4:	2e00      	cmp	r6, #0
 8017ce6:	d0df      	beq.n	8017ca8 <rmw_validate_node_name+0x4c>
 8017ce8:	22fe      	movs	r2, #254	@ 0xfe
 8017cea:	6032      	str	r2, [r6, #0]
 8017cec:	4618      	mov	r0, r3
 8017cee:	e7dc      	b.n	8017caa <rmw_validate_node_name+0x4e>
 8017cf0:	2303      	movs	r3, #3
 8017cf2:	602b      	str	r3, [r5, #0]
 8017cf4:	2e00      	cmp	r6, #0
 8017cf6:	d1de      	bne.n	8017cb6 <rmw_validate_node_name+0x5a>
 8017cf8:	e7d6      	b.n	8017ca8 <rmw_validate_node_name+0x4c>
 8017cfa:	bf00      	nop
 8017cfc:	0801e3c3 	.word	0x0801e3c3

08017d00 <rmw_node_name_validation_result_string>:
 8017d00:	2804      	cmp	r0, #4
 8017d02:	bf9a      	itte	ls
 8017d04:	4b02      	ldrls	r3, [pc, #8]	@ (8017d10 <rmw_node_name_validation_result_string+0x10>)
 8017d06:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 8017d0a:	4802      	ldrhi	r0, [pc, #8]	@ (8017d14 <rmw_node_name_validation_result_string+0x14>)
 8017d0c:	4770      	bx	lr
 8017d0e:	bf00      	nop
 8017d10:	0801e2a8 	.word	0x0801e2a8
 8017d14:	0801da98 	.word	0x0801da98

08017d18 <on_status>:
 8017d18:	b082      	sub	sp, #8
 8017d1a:	b002      	add	sp, #8
 8017d1c:	4770      	bx	lr
 8017d1e:	bf00      	nop

08017d20 <on_topic>:
 8017d20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017d24:	4a22      	ldr	r2, [pc, #136]	@ (8017db0 <on_topic+0x90>)
 8017d26:	b094      	sub	sp, #80	@ 0x50
 8017d28:	6812      	ldr	r2, [r2, #0]
 8017d2a:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 8017d2c:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 8017d30:	e9cd 3112 	strd	r3, r1, [sp, #72]	@ 0x48
 8017d34:	b3c2      	cbz	r2, 8017da8 <on_topic+0x88>
 8017d36:	f8bd 104c 	ldrh.w	r1, [sp, #76]	@ 0x4c
 8017d3a:	f89d 004e 	ldrb.w	r0, [sp, #78]	@ 0x4e
 8017d3e:	e001      	b.n	8017d44 <on_topic+0x24>
 8017d40:	6852      	ldr	r2, [r2, #4]
 8017d42:	b38a      	cbz	r2, 8017da8 <on_topic+0x88>
 8017d44:	6894      	ldr	r4, [r2, #8]
 8017d46:	8aa3      	ldrh	r3, [r4, #20]
 8017d48:	428b      	cmp	r3, r1
 8017d4a:	d1f9      	bne.n	8017d40 <on_topic+0x20>
 8017d4c:	7da3      	ldrb	r3, [r4, #22]
 8017d4e:	4283      	cmp	r3, r0
 8017d50:	d1f6      	bne.n	8017d40 <on_topic+0x20>
 8017d52:	2248      	movs	r2, #72	@ 0x48
 8017d54:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8017d58:	4668      	mov	r0, sp
 8017d5a:	f002 ffc8 	bl	801acee <memcpy>
 8017d5e:	f104 0328 	add.w	r3, r4, #40	@ 0x28
 8017d62:	cb0c      	ldmia	r3, {r2, r3}
 8017d64:	4620      	mov	r0, r4
 8017d66:	f7f8 fbb3 	bl	80104d0 <rmw_uxrce_get_static_input_buffer_for_entity>
 8017d6a:	4607      	mov	r7, r0
 8017d6c:	b1e0      	cbz	r0, 8017da8 <on_topic+0x88>
 8017d6e:	f8d0 8008 	ldr.w	r8, [r0, #8]
 8017d72:	4632      	mov	r2, r6
 8017d74:	4628      	mov	r0, r5
 8017d76:	f108 0110 	add.w	r1, r8, #16
 8017d7a:	f000 ff3b 	bl	8018bf4 <ucdr_deserialize_array_uint8_t>
 8017d7e:	b930      	cbnz	r0, 8017d8e <on_topic+0x6e>
 8017d80:	480c      	ldr	r0, [pc, #48]	@ (8017db4 <on_topic+0x94>)
 8017d82:	4639      	mov	r1, r7
 8017d84:	b014      	add	sp, #80	@ 0x50
 8017d86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017d8a:	f000 b8bd 	b.w	8017f08 <put_memory>
 8017d8e:	f8c8 4814 	str.w	r4, [r8, #2068]	@ 0x814
 8017d92:	f8c8 6810 	str.w	r6, [r8, #2064]	@ 0x810
 8017d96:	f7f8 f999 	bl	80100cc <rmw_uros_epoch_nanos>
 8017d9a:	f508 6202 	add.w	r2, r8, #2080	@ 0x820
 8017d9e:	2305      	movs	r3, #5
 8017da0:	e942 0102 	strd	r0, r1, [r2, #-8]
 8017da4:	f888 3820 	strb.w	r3, [r8, #2080]	@ 0x820
 8017da8:	b014      	add	sp, #80	@ 0x50
 8017daa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017dae:	bf00      	nop
 8017db0:	2000b344 	.word	0x2000b344
 8017db4:	2000b334 	.word	0x2000b334

08017db8 <on_request>:
 8017db8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017dbc:	4823      	ldr	r0, [pc, #140]	@ (8017e4c <on_request+0x94>)
 8017dbe:	b094      	sub	sp, #80	@ 0x50
 8017dc0:	6800      	ldr	r0, [r0, #0]
 8017dc2:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 8017dc4:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 8017dc8:	9113      	str	r1, [sp, #76]	@ 0x4c
 8017dca:	2800      	cmp	r0, #0
 8017dcc:	d03b      	beq.n	8017e46 <on_request+0x8e>
 8017dce:	461d      	mov	r5, r3
 8017dd0:	e001      	b.n	8017dd6 <on_request+0x1e>
 8017dd2:	6840      	ldr	r0, [r0, #4]
 8017dd4:	b3b8      	cbz	r0, 8017e46 <on_request+0x8e>
 8017dd6:	6884      	ldr	r4, [r0, #8]
 8017dd8:	8b21      	ldrh	r1, [r4, #24]
 8017dda:	4291      	cmp	r1, r2
 8017ddc:	d1f9      	bne.n	8017dd2 <on_request+0x1a>
 8017dde:	2248      	movs	r2, #72	@ 0x48
 8017de0:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 8017de4:	4668      	mov	r0, sp
 8017de6:	f002 ff82 	bl	801acee <memcpy>
 8017dea:	f104 0320 	add.w	r3, r4, #32
 8017dee:	cb0c      	ldmia	r3, {r2, r3}
 8017df0:	4620      	mov	r0, r4
 8017df2:	f7f8 fb6d 	bl	80104d0 <rmw_uxrce_get_static_input_buffer_for_entity>
 8017df6:	4680      	mov	r8, r0
 8017df8:	b328      	cbz	r0, 8017e46 <on_request+0x8e>
 8017dfa:	4638      	mov	r0, r7
 8017dfc:	f8d8 7008 	ldr.w	r7, [r8, #8]
 8017e00:	4632      	mov	r2, r6
 8017e02:	f107 0110 	add.w	r1, r7, #16
 8017e06:	f000 fef5 	bl	8018bf4 <ucdr_deserialize_array_uint8_t>
 8017e0a:	b930      	cbnz	r0, 8017e1a <on_request+0x62>
 8017e0c:	4810      	ldr	r0, [pc, #64]	@ (8017e50 <on_request+0x98>)
 8017e0e:	4641      	mov	r1, r8
 8017e10:	b014      	add	sp, #80	@ 0x50
 8017e12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017e16:	f000 b877 	b.w	8017f08 <put_memory>
 8017e1a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017e1c:	f607 0c28 	addw	ip, r7, #2088	@ 0x828
 8017e20:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 8017e24:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 8017e28:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017e2c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8017e30:	e88c 0003 	stmia.w	ip, {r0, r1}
 8017e34:	f7f8 f94a 	bl	80100cc <rmw_uros_epoch_nanos>
 8017e38:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 8017e3c:	2303      	movs	r3, #3
 8017e3e:	e942 0102 	strd	r0, r1, [r2, #-8]
 8017e42:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 8017e46:	b014      	add	sp, #80	@ 0x50
 8017e48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017e4c:	2000b314 	.word	0x2000b314
 8017e50:	2000b334 	.word	0x2000b334

08017e54 <on_reply>:
 8017e54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017e58:	4821      	ldr	r0, [pc, #132]	@ (8017ee0 <on_reply+0x8c>)
 8017e5a:	b094      	sub	sp, #80	@ 0x50
 8017e5c:	6800      	ldr	r0, [r0, #0]
 8017e5e:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 8017e60:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 8017e64:	9113      	str	r1, [sp, #76]	@ 0x4c
 8017e66:	b3b8      	cbz	r0, 8017ed8 <on_reply+0x84>
 8017e68:	461d      	mov	r5, r3
 8017e6a:	e001      	b.n	8017e70 <on_reply+0x1c>
 8017e6c:	6840      	ldr	r0, [r0, #4]
 8017e6e:	b398      	cbz	r0, 8017ed8 <on_reply+0x84>
 8017e70:	6884      	ldr	r4, [r0, #8]
 8017e72:	8b21      	ldrh	r1, [r4, #24]
 8017e74:	4291      	cmp	r1, r2
 8017e76:	d1f9      	bne.n	8017e6c <on_reply+0x18>
 8017e78:	2248      	movs	r2, #72	@ 0x48
 8017e7a:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 8017e7e:	4668      	mov	r0, sp
 8017e80:	f002 ff35 	bl	801acee <memcpy>
 8017e84:	f104 0320 	add.w	r3, r4, #32
 8017e88:	cb0c      	ldmia	r3, {r2, r3}
 8017e8a:	4620      	mov	r0, r4
 8017e8c:	f7f8 fb20 	bl	80104d0 <rmw_uxrce_get_static_input_buffer_for_entity>
 8017e90:	4680      	mov	r8, r0
 8017e92:	b308      	cbz	r0, 8017ed8 <on_reply+0x84>
 8017e94:	4638      	mov	r0, r7
 8017e96:	f8d8 7008 	ldr.w	r7, [r8, #8]
 8017e9a:	4632      	mov	r2, r6
 8017e9c:	f107 0110 	add.w	r1, r7, #16
 8017ea0:	f000 fea8 	bl	8018bf4 <ucdr_deserialize_array_uint8_t>
 8017ea4:	b930      	cbnz	r0, 8017eb4 <on_reply+0x60>
 8017ea6:	480f      	ldr	r0, [pc, #60]	@ (8017ee4 <on_reply+0x90>)
 8017ea8:	4641      	mov	r1, r8
 8017eaa:	b014      	add	sp, #80	@ 0x50
 8017eac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017eb0:	f000 b82a 	b.w	8017f08 <put_memory>
 8017eb4:	2200      	movs	r2, #0
 8017eb6:	f8c7 282c 	str.w	r2, [r7, #2092]	@ 0x82c
 8017eba:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 8017ebe:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 8017ec2:	f8c7 5828 	str.w	r5, [r7, #2088]	@ 0x828
 8017ec6:	f7f8 f901 	bl	80100cc <rmw_uros_epoch_nanos>
 8017eca:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 8017ece:	2304      	movs	r3, #4
 8017ed0:	e942 0102 	strd	r0, r1, [r2, #-8]
 8017ed4:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 8017ed8:	b014      	add	sp, #80	@ 0x50
 8017eda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017ede:	bf00      	nop
 8017ee0:	20006a24 	.word	0x20006a24
 8017ee4:	2000b334 	.word	0x2000b334

08017ee8 <get_memory>:
 8017ee8:	4603      	mov	r3, r0
 8017eea:	6840      	ldr	r0, [r0, #4]
 8017eec:	b158      	cbz	r0, 8017f06 <get_memory+0x1e>
 8017eee:	6842      	ldr	r2, [r0, #4]
 8017ef0:	605a      	str	r2, [r3, #4]
 8017ef2:	b10a      	cbz	r2, 8017ef8 <get_memory+0x10>
 8017ef4:	2100      	movs	r1, #0
 8017ef6:	6011      	str	r1, [r2, #0]
 8017ef8:	681a      	ldr	r2, [r3, #0]
 8017efa:	6042      	str	r2, [r0, #4]
 8017efc:	b102      	cbz	r2, 8017f00 <get_memory+0x18>
 8017efe:	6010      	str	r0, [r2, #0]
 8017f00:	2200      	movs	r2, #0
 8017f02:	6002      	str	r2, [r0, #0]
 8017f04:	6018      	str	r0, [r3, #0]
 8017f06:	4770      	bx	lr

08017f08 <put_memory>:
 8017f08:	680b      	ldr	r3, [r1, #0]
 8017f0a:	b10b      	cbz	r3, 8017f10 <put_memory+0x8>
 8017f0c:	684a      	ldr	r2, [r1, #4]
 8017f0e:	605a      	str	r2, [r3, #4]
 8017f10:	684a      	ldr	r2, [r1, #4]
 8017f12:	b102      	cbz	r2, 8017f16 <put_memory+0xe>
 8017f14:	6013      	str	r3, [r2, #0]
 8017f16:	6803      	ldr	r3, [r0, #0]
 8017f18:	428b      	cmp	r3, r1
 8017f1a:	6843      	ldr	r3, [r0, #4]
 8017f1c:	bf08      	it	eq
 8017f1e:	6002      	streq	r2, [r0, #0]
 8017f20:	604b      	str	r3, [r1, #4]
 8017f22:	b103      	cbz	r3, 8017f26 <put_memory+0x1e>
 8017f24:	6019      	str	r1, [r3, #0]
 8017f26:	2300      	movs	r3, #0
 8017f28:	600b      	str	r3, [r1, #0]
 8017f2a:	6041      	str	r1, [r0, #4]
 8017f2c:	4770      	bx	lr
 8017f2e:	bf00      	nop

08017f30 <rmw_destroy_client>:
 8017f30:	b570      	push	{r4, r5, r6, lr}
 8017f32:	b128      	cbz	r0, 8017f40 <rmw_destroy_client+0x10>
 8017f34:	4604      	mov	r4, r0
 8017f36:	6800      	ldr	r0, [r0, #0]
 8017f38:	460d      	mov	r5, r1
 8017f3a:	f7f8 fc3f 	bl	80107bc <is_uxrce_rmw_identifier_valid>
 8017f3e:	b910      	cbnz	r0, 8017f46 <rmw_destroy_client+0x16>
 8017f40:	2401      	movs	r4, #1
 8017f42:	4620      	mov	r0, r4
 8017f44:	bd70      	pop	{r4, r5, r6, pc}
 8017f46:	6863      	ldr	r3, [r4, #4]
 8017f48:	2b00      	cmp	r3, #0
 8017f4a:	d0f9      	beq.n	8017f40 <rmw_destroy_client+0x10>
 8017f4c:	2d00      	cmp	r5, #0
 8017f4e:	d0f7      	beq.n	8017f40 <rmw_destroy_client+0x10>
 8017f50:	6828      	ldr	r0, [r5, #0]
 8017f52:	f7f8 fc33 	bl	80107bc <is_uxrce_rmw_identifier_valid>
 8017f56:	2800      	cmp	r0, #0
 8017f58:	d0f2      	beq.n	8017f40 <rmw_destroy_client+0x10>
 8017f5a:	686e      	ldr	r6, [r5, #4]
 8017f5c:	2e00      	cmp	r6, #0
 8017f5e:	d0ef      	beq.n	8017f40 <rmw_destroy_client+0x10>
 8017f60:	6864      	ldr	r4, [r4, #4]
 8017f62:	6932      	ldr	r2, [r6, #16]
 8017f64:	6920      	ldr	r0, [r4, #16]
 8017f66:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8017f6a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8017f6e:	6819      	ldr	r1, [r3, #0]
 8017f70:	f7f9 fa3c 	bl	80113ec <uxr_buffer_cancel_data>
 8017f74:	4602      	mov	r2, r0
 8017f76:	6920      	ldr	r0, [r4, #16]
 8017f78:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8017f7c:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8017f80:	f7f8 fb9c 	bl	80106bc <run_xrce_session>
 8017f84:	6920      	ldr	r0, [r4, #16]
 8017f86:	6932      	ldr	r2, [r6, #16]
 8017f88:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8017f8c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8017f90:	6819      	ldr	r1, [r3, #0]
 8017f92:	f7f8 fefd 	bl	8010d90 <uxr_buffer_delete_entity>
 8017f96:	4602      	mov	r2, r0
 8017f98:	6920      	ldr	r0, [r4, #16]
 8017f9a:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8017f9e:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8017fa2:	f7f8 fb8b 	bl	80106bc <run_xrce_session>
 8017fa6:	2800      	cmp	r0, #0
 8017fa8:	4628      	mov	r0, r5
 8017faa:	bf14      	ite	ne
 8017fac:	2400      	movne	r4, #0
 8017fae:	2402      	moveq	r4, #2
 8017fb0:	f7f8 fa6c 	bl	801048c <rmw_uxrce_fini_client_memory>
 8017fb4:	e7c5      	b.n	8017f42 <rmw_destroy_client+0x12>
 8017fb6:	bf00      	nop

08017fb8 <rmw_get_implementation_identifier>:
 8017fb8:	4b01      	ldr	r3, [pc, #4]	@ (8017fc0 <rmw_get_implementation_identifier+0x8>)
 8017fba:	6818      	ldr	r0, [r3, #0]
 8017fbc:	4770      	bx	lr
 8017fbe:	bf00      	nop
 8017fc0:	0801e2bc 	.word	0x0801e2bc

08017fc4 <create_topic>:
 8017fc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017fc8:	4605      	mov	r5, r0
 8017fca:	b084      	sub	sp, #16
 8017fcc:	4822      	ldr	r0, [pc, #136]	@ (8018058 <create_topic+0x94>)
 8017fce:	460f      	mov	r7, r1
 8017fd0:	4616      	mov	r6, r2
 8017fd2:	f7ff ff89 	bl	8017ee8 <get_memory>
 8017fd6:	4604      	mov	r4, r0
 8017fd8:	2800      	cmp	r0, #0
 8017fda:	d039      	beq.n	8018050 <create_topic+0x8c>
 8017fdc:	692b      	ldr	r3, [r5, #16]
 8017fde:	6884      	ldr	r4, [r0, #8]
 8017fe0:	f8df 807c 	ldr.w	r8, [pc, #124]	@ 8018060 <create_topic+0x9c>
 8017fe4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8017fe8:	e9c4 6505 	strd	r6, r5, [r4, #20]
 8017fec:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	@ 0x596
 8017ff0:	1c42      	adds	r2, r0, #1
 8017ff2:	2102      	movs	r1, #2
 8017ff4:	f8a3 2596 	strh.w	r2, [r3, #1430]	@ 0x596
 8017ff8:	f7f9 f98e 	bl	8011318 <uxr_object_id>
 8017ffc:	223c      	movs	r2, #60	@ 0x3c
 8017ffe:	6120      	str	r0, [r4, #16]
 8018000:	4641      	mov	r1, r8
 8018002:	4638      	mov	r0, r7
 8018004:	f7f8 fbc0 	bl	8010788 <generate_topic_name>
 8018008:	b1f0      	cbz	r0, 8018048 <create_topic+0x84>
 801800a:	4f14      	ldr	r7, [pc, #80]	@ (801805c <create_topic+0x98>)
 801800c:	4630      	mov	r0, r6
 801800e:	2264      	movs	r2, #100	@ 0x64
 8018010:	4639      	mov	r1, r7
 8018012:	f7f8 fb89 	bl	8010728 <generate_type_name>
 8018016:	b1b8      	cbz	r0, 8018048 <create_topic+0x84>
 8018018:	6928      	ldr	r0, [r5, #16]
 801801a:	2306      	movs	r3, #6
 801801c:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 8018020:	f8cd 8000 	str.w	r8, [sp]
 8018024:	e9cd 7301 	strd	r7, r3, [sp, #4]
 8018028:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801802c:	6811      	ldr	r1, [r2, #0]
 801802e:	696b      	ldr	r3, [r5, #20]
 8018030:	6922      	ldr	r2, [r4, #16]
 8018032:	f7f8 ff2b 	bl	8010e8c <uxr_buffer_create_topic_bin>
 8018036:	4602      	mov	r2, r0
 8018038:	6928      	ldr	r0, [r5, #16]
 801803a:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 801803e:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8018042:	f7f8 fb3b 	bl	80106bc <run_xrce_session>
 8018046:	b918      	cbnz	r0, 8018050 <create_topic+0x8c>
 8018048:	4620      	mov	r0, r4
 801804a:	f7f8 fa35 	bl	80104b8 <rmw_uxrce_fini_topic_memory>
 801804e:	2400      	movs	r4, #0
 8018050:	4620      	mov	r0, r4
 8018052:	b004      	add	sp, #16
 8018054:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018058:	2000b354 	.word	0x2000b354
 801805c:	2000b448 	.word	0x2000b448
 8018060:	2000b40c 	.word	0x2000b40c

08018064 <destroy_topic>:
 8018064:	b538      	push	{r3, r4, r5, lr}
 8018066:	6985      	ldr	r5, [r0, #24]
 8018068:	b1d5      	cbz	r5, 80180a0 <destroy_topic+0x3c>
 801806a:	4604      	mov	r4, r0
 801806c:	6928      	ldr	r0, [r5, #16]
 801806e:	6922      	ldr	r2, [r4, #16]
 8018070:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8018074:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8018078:	6819      	ldr	r1, [r3, #0]
 801807a:	f7f8 fe89 	bl	8010d90 <uxr_buffer_delete_entity>
 801807e:	4602      	mov	r2, r0
 8018080:	6928      	ldr	r0, [r5, #16]
 8018082:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8018086:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801808a:	f7f8 fb17 	bl	80106bc <run_xrce_session>
 801808e:	2800      	cmp	r0, #0
 8018090:	4620      	mov	r0, r4
 8018092:	bf14      	ite	ne
 8018094:	2400      	movne	r4, #0
 8018096:	2402      	moveq	r4, #2
 8018098:	f7f8 fa0e 	bl	80104b8 <rmw_uxrce_fini_topic_memory>
 801809c:	4620      	mov	r0, r4
 801809e:	bd38      	pop	{r3, r4, r5, pc}
 80180a0:	2401      	movs	r4, #1
 80180a2:	4620      	mov	r0, r4
 80180a4:	bd38      	pop	{r3, r4, r5, pc}
 80180a6:	bf00      	nop

080180a8 <rmw_send_request>:
 80180a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80180ac:	4604      	mov	r4, r0
 80180ae:	6800      	ldr	r0, [r0, #0]
 80180b0:	b08b      	sub	sp, #44	@ 0x2c
 80180b2:	460e      	mov	r6, r1
 80180b4:	4615      	mov	r5, r2
 80180b6:	b128      	cbz	r0, 80180c4 <rmw_send_request+0x1c>
 80180b8:	4b21      	ldr	r3, [pc, #132]	@ (8018140 <rmw_send_request+0x98>)
 80180ba:	6819      	ldr	r1, [r3, #0]
 80180bc:	f7e8 f8b0 	bl	8000220 <strcmp>
 80180c0:	2800      	cmp	r0, #0
 80180c2:	d139      	bne.n	8018138 <rmw_send_request+0x90>
 80180c4:	6864      	ldr	r4, [r4, #4]
 80180c6:	6963      	ldr	r3, [r4, #20]
 80180c8:	f8d4 8078 	ldr.w	r8, [r4, #120]	@ 0x78
 80180cc:	689b      	ldr	r3, [r3, #8]
 80180ce:	4798      	blx	r3
 80180d0:	f8d0 9004 	ldr.w	r9, [r0, #4]
 80180d4:	4630      	mov	r0, r6
 80180d6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80180da:	4798      	blx	r3
 80180dc:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80180e0:	9000      	str	r0, [sp, #0]
 80180e2:	6922      	ldr	r2, [r4, #16]
 80180e4:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 80180e6:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 80180ea:	ab02      	add	r3, sp, #8
 80180ec:	f7fb fa26 	bl	801353c <uxr_prepare_output_stream>
 80180f0:	2700      	movs	r7, #0
 80180f2:	6028      	str	r0, [r5, #0]
 80180f4:	606f      	str	r7, [r5, #4]
 80180f6:	b198      	cbz	r0, 8018120 <rmw_send_request+0x78>
 80180f8:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80180fc:	a902      	add	r1, sp, #8
 80180fe:	4630      	mov	r0, r6
 8018100:	4798      	blx	r3
 8018102:	f894 3072 	ldrb.w	r3, [r4, #114]	@ 0x72
 8018106:	f8d8 0010 	ldr.w	r0, [r8, #16]
 801810a:	2b01      	cmp	r3, #1
 801810c:	d00c      	beq.n	8018128 <rmw_send_request+0x80>
 801810e:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 8018110:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8018114:	f7f9 ff40 	bl	8011f98 <uxr_run_session_until_confirm_delivery>
 8018118:	4638      	mov	r0, r7
 801811a:	b00b      	add	sp, #44	@ 0x2c
 801811c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018120:	2001      	movs	r0, #1
 8018122:	b00b      	add	sp, #44	@ 0x2c
 8018124:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018128:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801812c:	f7f9 fb74 	bl	8011818 <uxr_flash_output_streams>
 8018130:	4638      	mov	r0, r7
 8018132:	b00b      	add	sp, #44	@ 0x2c
 8018134:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018138:	200c      	movs	r0, #12
 801813a:	b00b      	add	sp, #44	@ 0x2c
 801813c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018140:	0801e2bc 	.word	0x0801e2bc

08018144 <rmw_take_request>:
 8018144:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018148:	4605      	mov	r5, r0
 801814a:	6800      	ldr	r0, [r0, #0]
 801814c:	b089      	sub	sp, #36	@ 0x24
 801814e:	460c      	mov	r4, r1
 8018150:	4690      	mov	r8, r2
 8018152:	461e      	mov	r6, r3
 8018154:	b128      	cbz	r0, 8018162 <rmw_take_request+0x1e>
 8018156:	4b28      	ldr	r3, [pc, #160]	@ (80181f8 <rmw_take_request+0xb4>)
 8018158:	6819      	ldr	r1, [r3, #0]
 801815a:	f7e8 f861 	bl	8000220 <strcmp>
 801815e:	2800      	cmp	r0, #0
 8018160:	d146      	bne.n	80181f0 <rmw_take_request+0xac>
 8018162:	b10e      	cbz	r6, 8018168 <rmw_take_request+0x24>
 8018164:	2300      	movs	r3, #0
 8018166:	7033      	strb	r3, [r6, #0]
 8018168:	f8d5 9004 	ldr.w	r9, [r5, #4]
 801816c:	f7f8 fa28 	bl	80105c0 <rmw_uxrce_clean_expired_static_input_buffer>
 8018170:	4648      	mov	r0, r9
 8018172:	f7f8 f9fd 	bl	8010570 <rmw_uxrce_find_static_input_buffer_by_owner>
 8018176:	4607      	mov	r7, r0
 8018178:	b3b0      	cbz	r0, 80181e8 <rmw_take_request+0xa4>
 801817a:	6885      	ldr	r5, [r0, #8]
 801817c:	f8d5 3838 	ldr.w	r3, [r5, #2104]	@ 0x838
 8018180:	f8d5 283c 	ldr.w	r2, [r5, #2108]	@ 0x83c
 8018184:	e9c4 2308 	strd	r2, r3, [r4, #32]
 8018188:	f895 3837 	ldrb.w	r3, [r5, #2103]	@ 0x837
 801818c:	7423      	strb	r3, [r4, #16]
 801818e:	f8b5 3834 	ldrh.w	r3, [r5, #2100]	@ 0x834
 8018192:	f895 2836 	ldrb.w	r2, [r5, #2102]	@ 0x836
 8018196:	74e2      	strb	r2, [r4, #19]
 8018198:	f8a4 3011 	strh.w	r3, [r4, #17]
 801819c:	f8d5 2828 	ldr.w	r2, [r5, #2088]	@ 0x828
 80181a0:	f8d5 382c 	ldr.w	r3, [r5, #2092]	@ 0x82c
 80181a4:	f8d5 1830 	ldr.w	r1, [r5, #2096]	@ 0x830
 80181a8:	61e1      	str	r1, [r4, #28]
 80181aa:	6162      	str	r2, [r4, #20]
 80181ac:	61a3      	str	r3, [r4, #24]
 80181ae:	f8d9 3014 	ldr.w	r3, [r9, #20]
 80181b2:	689b      	ldr	r3, [r3, #8]
 80181b4:	4798      	blx	r3
 80181b6:	6844      	ldr	r4, [r0, #4]
 80181b8:	f8d5 2810 	ldr.w	r2, [r5, #2064]	@ 0x810
 80181bc:	f105 0110 	add.w	r1, r5, #16
 80181c0:	4668      	mov	r0, sp
 80181c2:	f7f5 fdb5 	bl	800dd30 <ucdr_init_buffer>
 80181c6:	68e3      	ldr	r3, [r4, #12]
 80181c8:	4641      	mov	r1, r8
 80181ca:	4668      	mov	r0, sp
 80181cc:	4798      	blx	r3
 80181ce:	4639      	mov	r1, r7
 80181d0:	4604      	mov	r4, r0
 80181d2:	480a      	ldr	r0, [pc, #40]	@ (80181fc <rmw_take_request+0xb8>)
 80181d4:	f7ff fe98 	bl	8017f08 <put_memory>
 80181d8:	b106      	cbz	r6, 80181dc <rmw_take_request+0x98>
 80181da:	7034      	strb	r4, [r6, #0]
 80181dc:	f084 0001 	eor.w	r0, r4, #1
 80181e0:	b2c0      	uxtb	r0, r0
 80181e2:	b009      	add	sp, #36	@ 0x24
 80181e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80181e8:	2001      	movs	r0, #1
 80181ea:	b009      	add	sp, #36	@ 0x24
 80181ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80181f0:	200c      	movs	r0, #12
 80181f2:	b009      	add	sp, #36	@ 0x24
 80181f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80181f8:	0801e2bc 	.word	0x0801e2bc
 80181fc:	2000b334 	.word	0x2000b334

08018200 <rmw_send_response>:
 8018200:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018202:	4605      	mov	r5, r0
 8018204:	6800      	ldr	r0, [r0, #0]
 8018206:	b091      	sub	sp, #68	@ 0x44
 8018208:	460c      	mov	r4, r1
 801820a:	4616      	mov	r6, r2
 801820c:	b128      	cbz	r0, 801821a <rmw_send_response+0x1a>
 801820e:	4b29      	ldr	r3, [pc, #164]	@ (80182b4 <rmw_send_response+0xb4>)
 8018210:	6819      	ldr	r1, [r3, #0]
 8018212:	f7e8 f805 	bl	8000220 <strcmp>
 8018216:	2800      	cmp	r0, #0
 8018218:	d141      	bne.n	801829e <rmw_send_response+0x9e>
 801821a:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 801821e:	9306      	str	r3, [sp, #24]
 8018220:	4623      	mov	r3, r4
 8018222:	9207      	str	r2, [sp, #28]
 8018224:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018228:	686d      	ldr	r5, [r5, #4]
 801822a:	789b      	ldrb	r3, [r3, #2]
 801822c:	68a1      	ldr	r1, [r4, #8]
 801822e:	f88d 2017 	strb.w	r2, [sp, #23]
 8018232:	f88d 3016 	strb.w	r3, [sp, #22]
 8018236:	68e2      	ldr	r2, [r4, #12]
 8018238:	f8b4 3001 	ldrh.w	r3, [r4, #1]
 801823c:	6860      	ldr	r0, [r4, #4]
 801823e:	f8ad 3014 	strh.w	r3, [sp, #20]
 8018242:	ab02      	add	r3, sp, #8
 8018244:	c307      	stmia	r3!, {r0, r1, r2}
 8018246:	696b      	ldr	r3, [r5, #20]
 8018248:	6faf      	ldr	r7, [r5, #120]	@ 0x78
 801824a:	68db      	ldr	r3, [r3, #12]
 801824c:	4798      	blx	r3
 801824e:	6844      	ldr	r4, [r0, #4]
 8018250:	4630      	mov	r0, r6
 8018252:	6923      	ldr	r3, [r4, #16]
 8018254:	4798      	blx	r3
 8018256:	f100 0318 	add.w	r3, r0, #24
 801825a:	6938      	ldr	r0, [r7, #16]
 801825c:	9300      	str	r3, [sp, #0]
 801825e:	692a      	ldr	r2, [r5, #16]
 8018260:	6f29      	ldr	r1, [r5, #112]	@ 0x70
 8018262:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8018266:	ab08      	add	r3, sp, #32
 8018268:	f7fb f968 	bl	801353c <uxr_prepare_output_stream>
 801826c:	b910      	cbnz	r0, 8018274 <rmw_send_response+0x74>
 801826e:	2001      	movs	r0, #1
 8018270:	b011      	add	sp, #68	@ 0x44
 8018272:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018274:	a902      	add	r1, sp, #8
 8018276:	a808      	add	r0, sp, #32
 8018278:	f7fc faa6 	bl	80147c8 <uxr_serialize_SampleIdentity>
 801827c:	68a3      	ldr	r3, [r4, #8]
 801827e:	a908      	add	r1, sp, #32
 8018280:	4630      	mov	r0, r6
 8018282:	4798      	blx	r3
 8018284:	f895 3072 	ldrb.w	r3, [r5, #114]	@ 0x72
 8018288:	6938      	ldr	r0, [r7, #16]
 801828a:	2b01      	cmp	r3, #1
 801828c:	d00a      	beq.n	80182a4 <rmw_send_response+0xa4>
 801828e:	6f69      	ldr	r1, [r5, #116]	@ 0x74
 8018290:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8018294:	f7f9 fe80 	bl	8011f98 <uxr_run_session_until_confirm_delivery>
 8018298:	2000      	movs	r0, #0
 801829a:	b011      	add	sp, #68	@ 0x44
 801829c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801829e:	200c      	movs	r0, #12
 80182a0:	b011      	add	sp, #68	@ 0x44
 80182a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80182a4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80182a8:	f7f9 fab6 	bl	8011818 <uxr_flash_output_streams>
 80182ac:	2000      	movs	r0, #0
 80182ae:	b011      	add	sp, #68	@ 0x44
 80182b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80182b2:	bf00      	nop
 80182b4:	0801e2bc 	.word	0x0801e2bc

080182b8 <rmw_take_response>:
 80182b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80182bc:	4604      	mov	r4, r0
 80182be:	6800      	ldr	r0, [r0, #0]
 80182c0:	b088      	sub	sp, #32
 80182c2:	4688      	mov	r8, r1
 80182c4:	4617      	mov	r7, r2
 80182c6:	461d      	mov	r5, r3
 80182c8:	b120      	cbz	r0, 80182d4 <rmw_take_response+0x1c>
 80182ca:	4b1e      	ldr	r3, [pc, #120]	@ (8018344 <rmw_take_response+0x8c>)
 80182cc:	6819      	ldr	r1, [r3, #0]
 80182ce:	f7e7 ffa7 	bl	8000220 <strcmp>
 80182d2:	bb78      	cbnz	r0, 8018334 <rmw_take_response+0x7c>
 80182d4:	b10d      	cbz	r5, 80182da <rmw_take_response+0x22>
 80182d6:	2300      	movs	r3, #0
 80182d8:	702b      	strb	r3, [r5, #0]
 80182da:	6864      	ldr	r4, [r4, #4]
 80182dc:	f7f8 f970 	bl	80105c0 <rmw_uxrce_clean_expired_static_input_buffer>
 80182e0:	4620      	mov	r0, r4
 80182e2:	f7f8 f945 	bl	8010570 <rmw_uxrce_find_static_input_buffer_by_owner>
 80182e6:	4606      	mov	r6, r0
 80182e8:	b340      	cbz	r0, 801833c <rmw_take_response+0x84>
 80182ea:	6963      	ldr	r3, [r4, #20]
 80182ec:	6884      	ldr	r4, [r0, #8]
 80182ee:	68db      	ldr	r3, [r3, #12]
 80182f0:	f504 6203 	add.w	r2, r4, #2096	@ 0x830
 80182f4:	e952 0102 	ldrd	r0, r1, [r2, #-8]
 80182f8:	e9c8 0108 	strd	r0, r1, [r8, #32]
 80182fc:	4798      	blx	r3
 80182fe:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8018302:	f8d4 2810 	ldr.w	r2, [r4, #2064]	@ 0x810
 8018306:	f104 0110 	add.w	r1, r4, #16
 801830a:	4668      	mov	r0, sp
 801830c:	f7f5 fd10 	bl	800dd30 <ucdr_init_buffer>
 8018310:	4639      	mov	r1, r7
 8018312:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8018316:	4668      	mov	r0, sp
 8018318:	4798      	blx	r3
 801831a:	4631      	mov	r1, r6
 801831c:	4604      	mov	r4, r0
 801831e:	480a      	ldr	r0, [pc, #40]	@ (8018348 <rmw_take_response+0x90>)
 8018320:	f7ff fdf2 	bl	8017f08 <put_memory>
 8018324:	b105      	cbz	r5, 8018328 <rmw_take_response+0x70>
 8018326:	702c      	strb	r4, [r5, #0]
 8018328:	f084 0001 	eor.w	r0, r4, #1
 801832c:	b2c0      	uxtb	r0, r0
 801832e:	b008      	add	sp, #32
 8018330:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018334:	200c      	movs	r0, #12
 8018336:	b008      	add	sp, #32
 8018338:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801833c:	2001      	movs	r0, #1
 801833e:	b008      	add	sp, #32
 8018340:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018344:	0801e2bc 	.word	0x0801e2bc
 8018348:	2000b334 	.word	0x2000b334

0801834c <rmw_take_with_info>:
 801834c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801834e:	4604      	mov	r4, r0
 8018350:	6800      	ldr	r0, [r0, #0]
 8018352:	b089      	sub	sp, #36	@ 0x24
 8018354:	460f      	mov	r7, r1
 8018356:	4615      	mov	r5, r2
 8018358:	b128      	cbz	r0, 8018366 <rmw_take_with_info+0x1a>
 801835a:	4b24      	ldr	r3, [pc, #144]	@ (80183ec <rmw_take_with_info+0xa0>)
 801835c:	6819      	ldr	r1, [r3, #0]
 801835e:	f7e7 ff5f 	bl	8000220 <strcmp>
 8018362:	2800      	cmp	r0, #0
 8018364:	d13e      	bne.n	80183e4 <rmw_take_with_info+0x98>
 8018366:	b305      	cbz	r5, 80183aa <rmw_take_with_info+0x5e>
 8018368:	6864      	ldr	r4, [r4, #4]
 801836a:	2300      	movs	r3, #0
 801836c:	702b      	strb	r3, [r5, #0]
 801836e:	f7f8 f927 	bl	80105c0 <rmw_uxrce_clean_expired_static_input_buffer>
 8018372:	4620      	mov	r0, r4
 8018374:	f7f8 f8fc 	bl	8010570 <rmw_uxrce_find_static_input_buffer_by_owner>
 8018378:	4606      	mov	r6, r0
 801837a:	b1f0      	cbz	r0, 80183ba <rmw_take_with_info+0x6e>
 801837c:	6881      	ldr	r1, [r0, #8]
 801837e:	4668      	mov	r0, sp
 8018380:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 8018384:	3110      	adds	r1, #16
 8018386:	f7f5 fcd3 	bl	800dd30 <ucdr_init_buffer>
 801838a:	69a3      	ldr	r3, [r4, #24]
 801838c:	4639      	mov	r1, r7
 801838e:	68db      	ldr	r3, [r3, #12]
 8018390:	4668      	mov	r0, sp
 8018392:	4798      	blx	r3
 8018394:	4631      	mov	r1, r6
 8018396:	4604      	mov	r4, r0
 8018398:	4815      	ldr	r0, [pc, #84]	@ (80183f0 <rmw_take_with_info+0xa4>)
 801839a:	f7ff fdb5 	bl	8017f08 <put_memory>
 801839e:	702c      	strb	r4, [r5, #0]
 80183a0:	f084 0001 	eor.w	r0, r4, #1
 80183a4:	b2c0      	uxtb	r0, r0
 80183a6:	b009      	add	sp, #36	@ 0x24
 80183a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80183aa:	6864      	ldr	r4, [r4, #4]
 80183ac:	f7f8 f908 	bl	80105c0 <rmw_uxrce_clean_expired_static_input_buffer>
 80183b0:	4620      	mov	r0, r4
 80183b2:	f7f8 f8dd 	bl	8010570 <rmw_uxrce_find_static_input_buffer_by_owner>
 80183b6:	4605      	mov	r5, r0
 80183b8:	b910      	cbnz	r0, 80183c0 <rmw_take_with_info+0x74>
 80183ba:	2001      	movs	r0, #1
 80183bc:	b009      	add	sp, #36	@ 0x24
 80183be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80183c0:	68a9      	ldr	r1, [r5, #8]
 80183c2:	4668      	mov	r0, sp
 80183c4:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 80183c8:	3110      	adds	r1, #16
 80183ca:	f7f5 fcb1 	bl	800dd30 <ucdr_init_buffer>
 80183ce:	69a3      	ldr	r3, [r4, #24]
 80183d0:	4639      	mov	r1, r7
 80183d2:	68db      	ldr	r3, [r3, #12]
 80183d4:	4668      	mov	r0, sp
 80183d6:	4798      	blx	r3
 80183d8:	4629      	mov	r1, r5
 80183da:	4604      	mov	r4, r0
 80183dc:	4804      	ldr	r0, [pc, #16]	@ (80183f0 <rmw_take_with_info+0xa4>)
 80183de:	f7ff fd93 	bl	8017f08 <put_memory>
 80183e2:	e7dd      	b.n	80183a0 <rmw_take_with_info+0x54>
 80183e4:	200c      	movs	r0, #12
 80183e6:	b009      	add	sp, #36	@ 0x24
 80183e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80183ea:	bf00      	nop
 80183ec:	0801e2bc 	.word	0x0801e2bc
 80183f0:	2000b334 	.word	0x2000b334

080183f4 <rmw_wait>:
 80183f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80183f8:	b089      	sub	sp, #36	@ 0x24
 80183fa:	4605      	mov	r5, r0
 80183fc:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 80183fe:	460e      	mov	r6, r1
 8018400:	4698      	mov	r8, r3
 8018402:	4691      	mov	r9, r2
 8018404:	2a00      	cmp	r2, #0
 8018406:	f000 810a 	beq.w	801861e <rmw_wait+0x22a>
 801840a:	b16c      	cbz	r4, 8018428 <rmw_wait+0x34>
 801840c:	4bae      	ldr	r3, [pc, #696]	@ (80186c8 <rmw_wait+0x2d4>)
 801840e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8018410:	af04      	add	r7, sp, #16
 8018412:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 8018416:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 801841a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801841e:	f7ff faaf 	bl	8017980 <rmw_time_equal>
 8018422:	2800      	cmp	r0, #0
 8018424:	f000 8127 	beq.w	8018676 <rmw_wait+0x282>
 8018428:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 801842c:	f7f8 f8c8 	bl	80105c0 <rmw_uxrce_clean_expired_static_input_buffer>
 8018430:	4ba6      	ldr	r3, [pc, #664]	@ (80186cc <rmw_wait+0x2d8>)
 8018432:	681c      	ldr	r4, [r3, #0]
 8018434:	b14c      	cbz	r4, 801844a <rmw_wait+0x56>
 8018436:	4623      	mov	r3, r4
 8018438:	2100      	movs	r1, #0
 801843a:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
 801843e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8018442:	f882 15a4 	strb.w	r1, [r2, #1444]	@ 0x5a4
 8018446:	2b00      	cmp	r3, #0
 8018448:	d1f7      	bne.n	801843a <rmw_wait+0x46>
 801844a:	f1b9 0f00 	cmp.w	r9, #0
 801844e:	d011      	beq.n	8018474 <rmw_wait+0x80>
 8018450:	f8d9 1000 	ldr.w	r1, [r9]
 8018454:	b171      	cbz	r1, 8018474 <rmw_wait+0x80>
 8018456:	f8d9 c004 	ldr.w	ip, [r9, #4]
 801845a:	2300      	movs	r3, #0
 801845c:	2001      	movs	r0, #1
 801845e:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8018462:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 8018464:	6912      	ldr	r2, [r2, #16]
 8018466:	3301      	adds	r3, #1
 8018468:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801846c:	4299      	cmp	r1, r3
 801846e:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8018472:	d1f4      	bne.n	801845e <rmw_wait+0x6a>
 8018474:	f1b8 0f00 	cmp.w	r8, #0
 8018478:	d011      	beq.n	801849e <rmw_wait+0xaa>
 801847a:	f8d8 1000 	ldr.w	r1, [r8]
 801847e:	b171      	cbz	r1, 801849e <rmw_wait+0xaa>
 8018480:	f8d8 c004 	ldr.w	ip, [r8, #4]
 8018484:	2300      	movs	r3, #0
 8018486:	2001      	movs	r0, #1
 8018488:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801848c:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 801848e:	6912      	ldr	r2, [r2, #16]
 8018490:	3301      	adds	r3, #1
 8018492:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8018496:	4299      	cmp	r1, r3
 8018498:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 801849c:	d1f4      	bne.n	8018488 <rmw_wait+0x94>
 801849e:	b185      	cbz	r5, 80184c2 <rmw_wait+0xce>
 80184a0:	6829      	ldr	r1, [r5, #0]
 80184a2:	b171      	cbz	r1, 80184c2 <rmw_wait+0xce>
 80184a4:	f8d5 c004 	ldr.w	ip, [r5, #4]
 80184a8:	2300      	movs	r3, #0
 80184aa:	2001      	movs	r0, #1
 80184ac:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 80184b0:	6a12      	ldr	r2, [r2, #32]
 80184b2:	6912      	ldr	r2, [r2, #16]
 80184b4:	3301      	adds	r3, #1
 80184b6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80184ba:	4299      	cmp	r1, r3
 80184bc:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 80184c0:	d1f4      	bne.n	80184ac <rmw_wait+0xb8>
 80184c2:	b34c      	cbz	r4, 8018518 <rmw_wait+0x124>
 80184c4:	4622      	mov	r2, r4
 80184c6:	2300      	movs	r3, #0
 80184c8:	e9d2 2101 	ldrd	r2, r1, [r2, #4]
 80184cc:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 80184d0:	f891 15a4 	ldrb.w	r1, [r1, #1444]	@ 0x5a4
 80184d4:	440b      	add	r3, r1
 80184d6:	b2db      	uxtb	r3, r3
 80184d8:	2a00      	cmp	r2, #0
 80184da:	d1f5      	bne.n	80184c8 <rmw_wait+0xd4>
 80184dc:	2b00      	cmp	r3, #0
 80184de:	f000 8084 	beq.w	80185ea <rmw_wait+0x1f6>
 80184e2:	1c7a      	adds	r2, r7, #1
 80184e4:	d00d      	beq.n	8018502 <rmw_wait+0x10e>
 80184e6:	ee07 7a90 	vmov	s15, r7
 80184ea:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80184ee:	ee07 3a90 	vmov	s15, r3
 80184f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80184f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80184fa:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 80184fe:	ee17 7a90 	vmov	r7, s15
 8018502:	68a0      	ldr	r0, [r4, #8]
 8018504:	f500 5380 	add.w	r3, r0, #4096	@ 0x1000
 8018508:	f893 35a4 	ldrb.w	r3, [r3, #1444]	@ 0x5a4
 801850c:	2b00      	cmp	r3, #0
 801850e:	f040 8090 	bne.w	8018632 <rmw_wait+0x23e>
 8018512:	6864      	ldr	r4, [r4, #4]
 8018514:	2c00      	cmp	r4, #0
 8018516:	d1f4      	bne.n	8018502 <rmw_wait+0x10e>
 8018518:	f1b9 0f00 	cmp.w	r9, #0
 801851c:	f000 80bc 	beq.w	8018698 <rmw_wait+0x2a4>
 8018520:	f8d9 7000 	ldr.w	r7, [r9]
 8018524:	2f00      	cmp	r7, #0
 8018526:	f000 808e 	beq.w	8018646 <rmw_wait+0x252>
 801852a:	2400      	movs	r4, #0
 801852c:	4627      	mov	r7, r4
 801852e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8018532:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8018536:	f7f8 f81b 	bl	8010570 <rmw_uxrce_find_static_input_buffer_by_owner>
 801853a:	2800      	cmp	r0, #0
 801853c:	d05f      	beq.n	80185fe <rmw_wait+0x20a>
 801853e:	f8d9 3000 	ldr.w	r3, [r9]
 8018542:	3401      	adds	r4, #1
 8018544:	42a3      	cmp	r3, r4
 8018546:	f04f 0701 	mov.w	r7, #1
 801854a:	d8f0      	bhi.n	801852e <rmw_wait+0x13a>
 801854c:	f1b8 0f00 	cmp.w	r8, #0
 8018550:	d012      	beq.n	8018578 <rmw_wait+0x184>
 8018552:	f8d8 3000 	ldr.w	r3, [r8]
 8018556:	b17b      	cbz	r3, 8018578 <rmw_wait+0x184>
 8018558:	2400      	movs	r4, #0
 801855a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801855e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8018562:	f7f8 f805 	bl	8010570 <rmw_uxrce_find_static_input_buffer_by_owner>
 8018566:	2800      	cmp	r0, #0
 8018568:	d051      	beq.n	801860e <rmw_wait+0x21a>
 801856a:	f8d8 3000 	ldr.w	r3, [r8]
 801856e:	3401      	adds	r4, #1
 8018570:	42a3      	cmp	r3, r4
 8018572:	f04f 0701 	mov.w	r7, #1
 8018576:	d8f0      	bhi.n	801855a <rmw_wait+0x166>
 8018578:	b1dd      	cbz	r5, 80185b2 <rmw_wait+0x1be>
 801857a:	682b      	ldr	r3, [r5, #0]
 801857c:	b1cb      	cbz	r3, 80185b2 <rmw_wait+0x1be>
 801857e:	2400      	movs	r4, #0
 8018580:	686b      	ldr	r3, [r5, #4]
 8018582:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8018586:	f7f7 fff3 	bl	8010570 <rmw_uxrce_find_static_input_buffer_by_owner>
 801858a:	b158      	cbz	r0, 80185a4 <rmw_wait+0x1b0>
 801858c:	682b      	ldr	r3, [r5, #0]
 801858e:	3401      	adds	r4, #1
 8018590:	42a3      	cmp	r3, r4
 8018592:	d969      	bls.n	8018668 <rmw_wait+0x274>
 8018594:	686b      	ldr	r3, [r5, #4]
 8018596:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801859a:	2701      	movs	r7, #1
 801859c:	f7f7 ffe8 	bl	8010570 <rmw_uxrce_find_static_input_buffer_by_owner>
 80185a0:	2800      	cmp	r0, #0
 80185a2:	d1f3      	bne.n	801858c <rmw_wait+0x198>
 80185a4:	e9d5 3200 	ldrd	r3, r2, [r5]
 80185a8:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 80185ac:	3401      	adds	r4, #1
 80185ae:	42a3      	cmp	r3, r4
 80185b0:	d8e6      	bhi.n	8018580 <rmw_wait+0x18c>
 80185b2:	b1a6      	cbz	r6, 80185de <rmw_wait+0x1ea>
 80185b4:	6834      	ldr	r4, [r6, #0]
 80185b6:	b194      	cbz	r4, 80185de <rmw_wait+0x1ea>
 80185b8:	2300      	movs	r3, #0
 80185ba:	461d      	mov	r5, r3
 80185bc:	e004      	b.n	80185c8 <rmw_wait+0x1d4>
 80185be:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 80185c2:	3301      	adds	r3, #1
 80185c4:	42a3      	cmp	r3, r4
 80185c6:	d00a      	beq.n	80185de <rmw_wait+0x1ea>
 80185c8:	6870      	ldr	r0, [r6, #4]
 80185ca:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 80185ce:	7c0a      	ldrb	r2, [r1, #16]
 80185d0:	2a00      	cmp	r2, #0
 80185d2:	d0f4      	beq.n	80185be <rmw_wait+0x1ca>
 80185d4:	3301      	adds	r3, #1
 80185d6:	42a3      	cmp	r3, r4
 80185d8:	740d      	strb	r5, [r1, #16]
 80185da:	4617      	mov	r7, r2
 80185dc:	d1f4      	bne.n	80185c8 <rmw_wait+0x1d4>
 80185de:	2f00      	cmp	r7, #0
 80185e0:	d03e      	beq.n	8018660 <rmw_wait+0x26c>
 80185e2:	2000      	movs	r0, #0
 80185e4:	b009      	add	sp, #36	@ 0x24
 80185e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80185ea:	68a0      	ldr	r0, [r4, #8]
 80185ec:	2100      	movs	r1, #0
 80185ee:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80185f2:	f7f9 fc97 	bl	8011f24 <uxr_run_session_timeout>
 80185f6:	6864      	ldr	r4, [r4, #4]
 80185f8:	2c00      	cmp	r4, #0
 80185fa:	d1f6      	bne.n	80185ea <rmw_wait+0x1f6>
 80185fc:	e78c      	b.n	8018518 <rmw_wait+0x124>
 80185fe:	e9d9 3200 	ldrd	r3, r2, [r9]
 8018602:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8018606:	3401      	adds	r4, #1
 8018608:	42a3      	cmp	r3, r4
 801860a:	d890      	bhi.n	801852e <rmw_wait+0x13a>
 801860c:	e79e      	b.n	801854c <rmw_wait+0x158>
 801860e:	e9d8 3200 	ldrd	r3, r2, [r8]
 8018612:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8018616:	3401      	adds	r4, #1
 8018618:	429c      	cmp	r4, r3
 801861a:	d39e      	bcc.n	801855a <rmw_wait+0x166>
 801861c:	e7ac      	b.n	8018578 <rmw_wait+0x184>
 801861e:	2b00      	cmp	r3, #0
 8018620:	f47f aef3 	bne.w	801840a <rmw_wait+0x16>
 8018624:	2800      	cmp	r0, #0
 8018626:	f47f aef0 	bne.w	801840a <rmw_wait+0x16>
 801862a:	2900      	cmp	r1, #0
 801862c:	f47f aeed 	bne.w	801840a <rmw_wait+0x16>
 8018630:	e7d7      	b.n	80185e2 <rmw_wait+0x1ee>
 8018632:	4639      	mov	r1, r7
 8018634:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8018638:	f7f9 fc8e 	bl	8011f58 <uxr_run_session_until_data>
 801863c:	6864      	ldr	r4, [r4, #4]
 801863e:	2c00      	cmp	r4, #0
 8018640:	f47f af5f 	bne.w	8018502 <rmw_wait+0x10e>
 8018644:	e768      	b.n	8018518 <rmw_wait+0x124>
 8018646:	f1b8 0f00 	cmp.w	r8, #0
 801864a:	d032      	beq.n	80186b2 <rmw_wait+0x2be>
 801864c:	f8d8 3000 	ldr.w	r3, [r8]
 8018650:	2b00      	cmp	r3, #0
 8018652:	d181      	bne.n	8018558 <rmw_wait+0x164>
 8018654:	461f      	mov	r7, r3
 8018656:	2d00      	cmp	r5, #0
 8018658:	d18f      	bne.n	801857a <rmw_wait+0x186>
 801865a:	462f      	mov	r7, r5
 801865c:	2e00      	cmp	r6, #0
 801865e:	d1a9      	bne.n	80185b4 <rmw_wait+0x1c0>
 8018660:	2002      	movs	r0, #2
 8018662:	b009      	add	sp, #36	@ 0x24
 8018664:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018668:	2e00      	cmp	r6, #0
 801866a:	d0ba      	beq.n	80185e2 <rmw_wait+0x1ee>
 801866c:	6834      	ldr	r4, [r6, #0]
 801866e:	2701      	movs	r7, #1
 8018670:	2c00      	cmp	r4, #0
 8018672:	d1a1      	bne.n	80185b8 <rmw_wait+0x1c4>
 8018674:	e7b5      	b.n	80185e2 <rmw_wait+0x1ee>
 8018676:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801867a:	f7ff f9d5 	bl	8017a28 <rmw_time_total_nsec>
 801867e:	2300      	movs	r3, #0
 8018680:	4a13      	ldr	r2, [pc, #76]	@ (80186d0 <rmw_wait+0x2dc>)
 8018682:	f7e8 fac3 	bl	8000c0c <__aeabi_uldivmod>
 8018686:	f1b0 4f00 	cmp.w	r0, #2147483648	@ 0x80000000
 801868a:	f171 0300 	sbcs.w	r3, r1, #0
 801868e:	4607      	mov	r7, r0
 8018690:	bfa8      	it	ge
 8018692:	f06f 4700 	mvnge.w	r7, #2147483648	@ 0x80000000
 8018696:	e6c9      	b.n	801842c <rmw_wait+0x38>
 8018698:	f1b8 0f00 	cmp.w	r8, #0
 801869c:	d009      	beq.n	80186b2 <rmw_wait+0x2be>
 801869e:	f8d8 3000 	ldr.w	r3, [r8]
 80186a2:	464f      	mov	r7, r9
 80186a4:	2b00      	cmp	r3, #0
 80186a6:	f47f af57 	bne.w	8018558 <rmw_wait+0x164>
 80186aa:	2d00      	cmp	r5, #0
 80186ac:	f47f af65 	bne.w	801857a <rmw_wait+0x186>
 80186b0:	e7d3      	b.n	801865a <rmw_wait+0x266>
 80186b2:	b17d      	cbz	r5, 80186d4 <rmw_wait+0x2e0>
 80186b4:	682b      	ldr	r3, [r5, #0]
 80186b6:	4647      	mov	r7, r8
 80186b8:	2b00      	cmp	r3, #0
 80186ba:	f47f af60 	bne.w	801857e <rmw_wait+0x18a>
 80186be:	2e00      	cmp	r6, #0
 80186c0:	f47f af78 	bne.w	80185b4 <rmw_wait+0x1c0>
 80186c4:	e7cc      	b.n	8018660 <rmw_wait+0x26c>
 80186c6:	bf00      	nop
 80186c8:	0801ccf8 	.word	0x0801ccf8
 80186cc:	2000b324 	.word	0x2000b324
 80186d0:	000f4240 	.word	0x000f4240
 80186d4:	2e00      	cmp	r6, #0
 80186d6:	d0c3      	beq.n	8018660 <rmw_wait+0x26c>
 80186d8:	6834      	ldr	r4, [r6, #0]
 80186da:	462f      	mov	r7, r5
 80186dc:	2c00      	cmp	r4, #0
 80186de:	f47f af6b 	bne.w	80185b8 <rmw_wait+0x1c4>
 80186e2:	e7bd      	b.n	8018660 <rmw_wait+0x26c>

080186e4 <rmw_create_wait_set>:
 80186e4:	b508      	push	{r3, lr}
 80186e6:	4803      	ldr	r0, [pc, #12]	@ (80186f4 <rmw_create_wait_set+0x10>)
 80186e8:	f7ff fbfe 	bl	8017ee8 <get_memory>
 80186ec:	b108      	cbz	r0, 80186f2 <rmw_create_wait_set+0xe>
 80186ee:	6880      	ldr	r0, [r0, #8]
 80186f0:	3010      	adds	r0, #16
 80186f2:	bd08      	pop	{r3, pc}
 80186f4:	2000b364 	.word	0x2000b364

080186f8 <rmw_destroy_wait_set>:
 80186f8:	b508      	push	{r3, lr}
 80186fa:	4b08      	ldr	r3, [pc, #32]	@ (801871c <rmw_destroy_wait_set+0x24>)
 80186fc:	6819      	ldr	r1, [r3, #0]
 80186fe:	b911      	cbnz	r1, 8018706 <rmw_destroy_wait_set+0xe>
 8018700:	e00a      	b.n	8018718 <rmw_destroy_wait_set+0x20>
 8018702:	6849      	ldr	r1, [r1, #4]
 8018704:	b141      	cbz	r1, 8018718 <rmw_destroy_wait_set+0x20>
 8018706:	688b      	ldr	r3, [r1, #8]
 8018708:	3310      	adds	r3, #16
 801870a:	4298      	cmp	r0, r3
 801870c:	d1f9      	bne.n	8018702 <rmw_destroy_wait_set+0xa>
 801870e:	4803      	ldr	r0, [pc, #12]	@ (801871c <rmw_destroy_wait_set+0x24>)
 8018710:	f7ff fbfa 	bl	8017f08 <put_memory>
 8018714:	2000      	movs	r0, #0
 8018716:	bd08      	pop	{r3, pc}
 8018718:	2001      	movs	r0, #1
 801871a:	bd08      	pop	{r3, pc}
 801871c:	2000b364 	.word	0x2000b364

08018720 <rosidl_runtime_c__double__Sequence__init>:
 8018720:	b530      	push	{r4, r5, lr}
 8018722:	4604      	mov	r4, r0
 8018724:	b087      	sub	sp, #28
 8018726:	b130      	cbz	r0, 8018736 <rosidl_runtime_c__double__Sequence__init+0x16>
 8018728:	460d      	mov	r5, r1
 801872a:	b931      	cbnz	r1, 801873a <rosidl_runtime_c__double__Sequence__init+0x1a>
 801872c:	4608      	mov	r0, r1
 801872e:	e9c4 0500 	strd	r0, r5, [r4]
 8018732:	60a5      	str	r5, [r4, #8]
 8018734:	2001      	movs	r0, #1
 8018736:	b007      	add	sp, #28
 8018738:	bd30      	pop	{r4, r5, pc}
 801873a:	a801      	add	r0, sp, #4
 801873c:	f7f6 fd08 	bl	800f150 <rcutils_get_default_allocator>
 8018740:	9b01      	ldr	r3, [sp, #4]
 8018742:	9905      	ldr	r1, [sp, #20]
 8018744:	00e8      	lsls	r0, r5, #3
 8018746:	4798      	blx	r3
 8018748:	2800      	cmp	r0, #0
 801874a:	d1f0      	bne.n	801872e <rosidl_runtime_c__double__Sequence__init+0xe>
 801874c:	e7f3      	b.n	8018736 <rosidl_runtime_c__double__Sequence__init+0x16>
 801874e:	bf00      	nop

08018750 <rosidl_runtime_c__double__Sequence__fini>:
 8018750:	b188      	cbz	r0, 8018776 <rosidl_runtime_c__double__Sequence__fini+0x26>
 8018752:	b510      	push	{r4, lr}
 8018754:	6803      	ldr	r3, [r0, #0]
 8018756:	b086      	sub	sp, #24
 8018758:	4604      	mov	r4, r0
 801875a:	b153      	cbz	r3, 8018772 <rosidl_runtime_c__double__Sequence__fini+0x22>
 801875c:	a801      	add	r0, sp, #4
 801875e:	f7f6 fcf7 	bl	800f150 <rcutils_get_default_allocator>
 8018762:	9b02      	ldr	r3, [sp, #8]
 8018764:	9905      	ldr	r1, [sp, #20]
 8018766:	6820      	ldr	r0, [r4, #0]
 8018768:	4798      	blx	r3
 801876a:	2300      	movs	r3, #0
 801876c:	e9c4 3300 	strd	r3, r3, [r4]
 8018770:	60a3      	str	r3, [r4, #8]
 8018772:	b006      	add	sp, #24
 8018774:	bd10      	pop	{r4, pc}
 8018776:	4770      	bx	lr

08018778 <std_msgs__msg__Float64MultiArray__init>:
 8018778:	b570      	push	{r4, r5, r6, lr}
 801877a:	4605      	mov	r5, r0
 801877c:	b1b0      	cbz	r0, 80187ac <std_msgs__msg__Float64MultiArray__init+0x34>
 801877e:	f000 f8b5 	bl	80188ec <std_msgs__msg__MultiArrayLayout__init>
 8018782:	4604      	mov	r4, r0
 8018784:	b148      	cbz	r0, 801879a <std_msgs__msg__Float64MultiArray__init+0x22>
 8018786:	f105 0610 	add.w	r6, r5, #16
 801878a:	2100      	movs	r1, #0
 801878c:	4630      	mov	r0, r6
 801878e:	f7ff ffc7 	bl	8018720 <rosidl_runtime_c__double__Sequence__init>
 8018792:	4604      	mov	r4, r0
 8018794:	b168      	cbz	r0, 80187b2 <std_msgs__msg__Float64MultiArray__init+0x3a>
 8018796:	4620      	mov	r0, r4
 8018798:	bd70      	pop	{r4, r5, r6, pc}
 801879a:	4628      	mov	r0, r5
 801879c:	f000 f8b8 	bl	8018910 <std_msgs__msg__MultiArrayLayout__fini>
 80187a0:	f105 0010 	add.w	r0, r5, #16
 80187a4:	f7ff ffd4 	bl	8018750 <rosidl_runtime_c__double__Sequence__fini>
 80187a8:	4620      	mov	r0, r4
 80187aa:	bd70      	pop	{r4, r5, r6, pc}
 80187ac:	4604      	mov	r4, r0
 80187ae:	4620      	mov	r0, r4
 80187b0:	bd70      	pop	{r4, r5, r6, pc}
 80187b2:	4628      	mov	r0, r5
 80187b4:	f000 f8ac 	bl	8018910 <std_msgs__msg__MultiArrayLayout__fini>
 80187b8:	4630      	mov	r0, r6
 80187ba:	f7ff ffc9 	bl	8018750 <rosidl_runtime_c__double__Sequence__fini>
 80187be:	e7ea      	b.n	8018796 <std_msgs__msg__Float64MultiArray__init+0x1e>

080187c0 <std_msgs__msg__Float64MultiArray__fini>:
 80187c0:	b148      	cbz	r0, 80187d6 <std_msgs__msg__Float64MultiArray__fini+0x16>
 80187c2:	b510      	push	{r4, lr}
 80187c4:	4604      	mov	r4, r0
 80187c6:	f000 f8a3 	bl	8018910 <std_msgs__msg__MultiArrayLayout__fini>
 80187ca:	f104 0010 	add.w	r0, r4, #16
 80187ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80187d2:	f7ff bfbd 	b.w	8018750 <rosidl_runtime_c__double__Sequence__fini>
 80187d6:	4770      	bx	lr

080187d8 <std_msgs__msg__MultiArrayDimension__Sequence__init.part.0>:
 80187d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80187dc:	b086      	sub	sp, #24
 80187de:	4682      	mov	sl, r0
 80187e0:	4689      	mov	r9, r1
 80187e2:	a801      	add	r0, sp, #4
 80187e4:	f7f6 fcb4 	bl	800f150 <rcutils_get_default_allocator>
 80187e8:	f1b9 0f00 	cmp.w	r9, #0
 80187ec:	d02f      	beq.n	801884e <std_msgs__msg__MultiArrayDimension__Sequence__init.part.0+0x76>
 80187ee:	e9dd 3804 	ldrd	r3, r8, [sp, #16]
 80187f2:	2114      	movs	r1, #20
 80187f4:	4642      	mov	r2, r8
 80187f6:	4648      	mov	r0, r9
 80187f8:	4798      	blx	r3
 80187fa:	4607      	mov	r7, r0
 80187fc:	b388      	cbz	r0, 8018862 <std_msgs__msg__MultiArrayDimension__Sequence__init.part.0+0x8a>
 80187fe:	4606      	mov	r6, r0
 8018800:	2400      	movs	r4, #0
 8018802:	e004      	b.n	801880e <std_msgs__msg__MultiArrayDimension__Sequence__init.part.0+0x36>
 8018804:	3401      	adds	r4, #1
 8018806:	45a1      	cmp	r9, r4
 8018808:	f106 0614 	add.w	r6, r6, #20
 801880c:	d020      	beq.n	8018850 <std_msgs__msg__MultiArrayDimension__Sequence__init.part.0+0x78>
 801880e:	4630      	mov	r0, r6
 8018810:	f001 fc56 	bl	801a0c0 <rosidl_runtime_c__String__init>
 8018814:	4605      	mov	r5, r0
 8018816:	2800      	cmp	r0, #0
 8018818:	d1f4      	bne.n	8018804 <std_msgs__msg__MultiArrayDimension__Sequence__init.part.0+0x2c>
 801881a:	4630      	mov	r0, r6
 801881c:	f001 fc66 	bl	801a0ec <rosidl_runtime_c__String__fini>
 8018820:	45a1      	cmp	r9, r4
 8018822:	d915      	bls.n	8018850 <std_msgs__msg__MultiArrayDimension__Sequence__init.part.0+0x78>
 8018824:	b15c      	cbz	r4, 801883e <std_msgs__msg__MultiArrayDimension__Sequence__init.part.0+0x66>
 8018826:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 801882a:	eb07 0484 	add.w	r4, r7, r4, lsl #2
 801882e:	3c14      	subs	r4, #20
 8018830:	4620      	mov	r0, r4
 8018832:	f001 fc5b 	bl	801a0ec <rosidl_runtime_c__String__fini>
 8018836:	42a7      	cmp	r7, r4
 8018838:	f1a4 0414 	sub.w	r4, r4, #20
 801883c:	d1f8      	bne.n	8018830 <std_msgs__msg__MultiArrayDimension__Sequence__init.part.0+0x58>
 801883e:	4638      	mov	r0, r7
 8018840:	9b02      	ldr	r3, [sp, #8]
 8018842:	4641      	mov	r1, r8
 8018844:	4798      	blx	r3
 8018846:	4628      	mov	r0, r5
 8018848:	b006      	add	sp, #24
 801884a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801884e:	464f      	mov	r7, r9
 8018850:	e9ca 7900 	strd	r7, r9, [sl]
 8018854:	f8ca 9008 	str.w	r9, [sl, #8]
 8018858:	2501      	movs	r5, #1
 801885a:	4628      	mov	r0, r5
 801885c:	b006      	add	sp, #24
 801885e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018862:	4605      	mov	r5, r0
 8018864:	e7f9      	b.n	801885a <std_msgs__msg__MultiArrayDimension__Sequence__init.part.0+0x82>
 8018866:	bf00      	nop

08018868 <std_msgs__msg__MultiArrayDimension__init>:
 8018868:	b538      	push	{r3, r4, r5, lr}
 801886a:	4604      	mov	r4, r0
 801886c:	b128      	cbz	r0, 801887a <std_msgs__msg__MultiArrayDimension__init+0x12>
 801886e:	f001 fc27 	bl	801a0c0 <rosidl_runtime_c__String__init>
 8018872:	4605      	mov	r5, r0
 8018874:	b120      	cbz	r0, 8018880 <std_msgs__msg__MultiArrayDimension__init+0x18>
 8018876:	4628      	mov	r0, r5
 8018878:	bd38      	pop	{r3, r4, r5, pc}
 801887a:	4605      	mov	r5, r0
 801887c:	4628      	mov	r0, r5
 801887e:	bd38      	pop	{r3, r4, r5, pc}
 8018880:	4620      	mov	r0, r4
 8018882:	f001 fc33 	bl	801a0ec <rosidl_runtime_c__String__fini>
 8018886:	4628      	mov	r0, r5
 8018888:	bd38      	pop	{r3, r4, r5, pc}
 801888a:	bf00      	nop

0801888c <std_msgs__msg__MultiArrayDimension__fini>:
 801888c:	b108      	cbz	r0, 8018892 <std_msgs__msg__MultiArrayDimension__fini+0x6>
 801888e:	f001 bc2d 	b.w	801a0ec <rosidl_runtime_c__String__fini>
 8018892:	4770      	bx	lr

08018894 <std_msgs__msg__MultiArrayDimension__Sequence__init>:
 8018894:	b108      	cbz	r0, 801889a <std_msgs__msg__MultiArrayDimension__Sequence__init+0x6>
 8018896:	f7ff bf9f 	b.w	80187d8 <std_msgs__msg__MultiArrayDimension__Sequence__init.part.0>
 801889a:	4770      	bx	lr

0801889c <std_msgs__msg__MultiArrayDimension__Sequence__fini>:
 801889c:	b320      	cbz	r0, 80188e8 <std_msgs__msg__MultiArrayDimension__Sequence__fini+0x4c>
 801889e:	b530      	push	{r4, r5, lr}
 80188a0:	4605      	mov	r5, r0
 80188a2:	b087      	sub	sp, #28
 80188a4:	a801      	add	r0, sp, #4
 80188a6:	f7f6 fc53 	bl	800f150 <rcutils_get_default_allocator>
 80188aa:	682a      	ldr	r2, [r5, #0]
 80188ac:	b1b2      	cbz	r2, 80188dc <std_msgs__msg__MultiArrayDimension__Sequence__fini+0x40>
 80188ae:	68a9      	ldr	r1, [r5, #8]
 80188b0:	b161      	cbz	r1, 80188cc <std_msgs__msg__MultiArrayDimension__Sequence__fini+0x30>
 80188b2:	2400      	movs	r4, #0
 80188b4:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 80188b8:	eb12 0083 	adds.w	r0, r2, r3, lsl #2
 80188bc:	d010      	beq.n	80188e0 <std_msgs__msg__MultiArrayDimension__Sequence__fini+0x44>
 80188be:	f001 fc15 	bl	801a0ec <rosidl_runtime_c__String__fini>
 80188c2:	68a9      	ldr	r1, [r5, #8]
 80188c4:	682a      	ldr	r2, [r5, #0]
 80188c6:	3401      	adds	r4, #1
 80188c8:	428c      	cmp	r4, r1
 80188ca:	d3f3      	bcc.n	80188b4 <std_msgs__msg__MultiArrayDimension__Sequence__fini+0x18>
 80188cc:	9b02      	ldr	r3, [sp, #8]
 80188ce:	9905      	ldr	r1, [sp, #20]
 80188d0:	4610      	mov	r0, r2
 80188d2:	4798      	blx	r3
 80188d4:	2300      	movs	r3, #0
 80188d6:	e9c5 3300 	strd	r3, r3, [r5]
 80188da:	60ab      	str	r3, [r5, #8]
 80188dc:	b007      	add	sp, #28
 80188de:	bd30      	pop	{r4, r5, pc}
 80188e0:	3401      	adds	r4, #1
 80188e2:	428c      	cmp	r4, r1
 80188e4:	d3e6      	bcc.n	80188b4 <std_msgs__msg__MultiArrayDimension__Sequence__fini+0x18>
 80188e6:	e7f1      	b.n	80188cc <std_msgs__msg__MultiArrayDimension__Sequence__fini+0x30>
 80188e8:	4770      	bx	lr
 80188ea:	bf00      	nop

080188ec <std_msgs__msg__MultiArrayLayout__init>:
 80188ec:	b538      	push	{r3, r4, r5, lr}
 80188ee:	4604      	mov	r4, r0
 80188f0:	b130      	cbz	r0, 8018900 <std_msgs__msg__MultiArrayLayout__init+0x14>
 80188f2:	2100      	movs	r1, #0
 80188f4:	f7ff ffce 	bl	8018894 <std_msgs__msg__MultiArrayDimension__Sequence__init>
 80188f8:	4605      	mov	r5, r0
 80188fa:	b120      	cbz	r0, 8018906 <std_msgs__msg__MultiArrayLayout__init+0x1a>
 80188fc:	4628      	mov	r0, r5
 80188fe:	bd38      	pop	{r3, r4, r5, pc}
 8018900:	4605      	mov	r5, r0
 8018902:	4628      	mov	r0, r5
 8018904:	bd38      	pop	{r3, r4, r5, pc}
 8018906:	4620      	mov	r0, r4
 8018908:	f7ff ffc8 	bl	801889c <std_msgs__msg__MultiArrayDimension__Sequence__fini>
 801890c:	4628      	mov	r0, r5
 801890e:	bd38      	pop	{r3, r4, r5, pc}

08018910 <std_msgs__msg__MultiArrayLayout__fini>:
 8018910:	b108      	cbz	r0, 8018916 <std_msgs__msg__MultiArrayLayout__fini+0x6>
 8018912:	f7ff bfc3 	b.w	801889c <std_msgs__msg__MultiArrayDimension__Sequence__fini>
 8018916:	4770      	bx	lr

08018918 <std_msgs__msg__MultiArrayDimension__rosidl_typesupport_introspection_c__MultiArrayDimension_init_function>:
 8018918:	f7ff bfa6 	b.w	8018868 <std_msgs__msg__MultiArrayDimension__init>

0801891c <std_msgs__msg__MultiArrayDimension__rosidl_typesupport_introspection_c__MultiArrayDimension_fini_function>:
 801891c:	f7ff bfb6 	b.w	801888c <std_msgs__msg__MultiArrayDimension__fini>

08018920 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension>:
 8018920:	4b04      	ldr	r3, [pc, #16]	@ (8018934 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension+0x14>)
 8018922:	681a      	ldr	r2, [r3, #0]
 8018924:	b10a      	cbz	r2, 801892a <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension+0xa>
 8018926:	4803      	ldr	r0, [pc, #12]	@ (8018934 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension+0x14>)
 8018928:	4770      	bx	lr
 801892a:	4a03      	ldr	r2, [pc, #12]	@ (8018938 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension+0x18>)
 801892c:	4801      	ldr	r0, [pc, #4]	@ (8018934 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension+0x14>)
 801892e:	6812      	ldr	r2, [r2, #0]
 8018930:	601a      	str	r2, [r3, #0]
 8018932:	4770      	bx	lr
 8018934:	200003f8 	.word	0x200003f8
 8018938:	200001d4 	.word	0x200001d4

0801893c <_MultiArrayDimension__cdr_serialize>:
 801893c:	b1d0      	cbz	r0, 8018974 <_MultiArrayDimension__cdr_serialize+0x38>
 801893e:	b570      	push	{r4, r5, r6, lr}
 8018940:	6806      	ldr	r6, [r0, #0]
 8018942:	460d      	mov	r5, r1
 8018944:	4604      	mov	r4, r0
 8018946:	b196      	cbz	r6, 801896e <_MultiArrayDimension__cdr_serialize+0x32>
 8018948:	4630      	mov	r0, r6
 801894a:	f7e7 fc73 	bl	8000234 <strlen>
 801894e:	1c42      	adds	r2, r0, #1
 8018950:	4631      	mov	r1, r6
 8018952:	6060      	str	r0, [r4, #4]
 8018954:	4628      	mov	r0, r5
 8018956:	f7f8 f997 	bl	8010c88 <ucdr_serialize_sequence_char>
 801895a:	68e1      	ldr	r1, [r4, #12]
 801895c:	4628      	mov	r0, r5
 801895e:	f7f4 f91b 	bl	800cb98 <ucdr_serialize_uint32_t>
 8018962:	6921      	ldr	r1, [r4, #16]
 8018964:	4628      	mov	r0, r5
 8018966:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801896a:	f7f4 b915 	b.w	800cb98 <ucdr_serialize_uint32_t>
 801896e:	4632      	mov	r2, r6
 8018970:	4630      	mov	r0, r6
 8018972:	e7ed      	b.n	8018950 <_MultiArrayDimension__cdr_serialize+0x14>
 8018974:	4770      	bx	lr
 8018976:	bf00      	nop

08018978 <get_serialized_size_std_msgs__msg__MultiArrayDimension>:
 8018978:	b570      	push	{r4, r5, r6, lr}
 801897a:	4604      	mov	r4, r0
 801897c:	b1b0      	cbz	r0, 80189ac <get_serialized_size_std_msgs__msg__MultiArrayDimension+0x34>
 801897e:	460d      	mov	r5, r1
 8018980:	4628      	mov	r0, r5
 8018982:	2104      	movs	r1, #4
 8018984:	f7f5 f9d8 	bl	800dd38 <ucdr_alignment>
 8018988:	6866      	ldr	r6, [r4, #4]
 801898a:	1d6b      	adds	r3, r5, #5
 801898c:	4433      	add	r3, r6
 801898e:	181e      	adds	r6, r3, r0
 8018990:	2104      	movs	r1, #4
 8018992:	4630      	mov	r0, r6
 8018994:	f7f5 f9d0 	bl	800dd38 <ucdr_alignment>
 8018998:	1d04      	adds	r4, r0, #4
 801899a:	4434      	add	r4, r6
 801899c:	2104      	movs	r1, #4
 801899e:	4620      	mov	r0, r4
 80189a0:	f7f5 f9ca 	bl	800dd38 <ucdr_alignment>
 80189a4:	f1c5 0504 	rsb	r5, r5, #4
 80189a8:	4428      	add	r0, r5
 80189aa:	4420      	add	r0, r4
 80189ac:	bd70      	pop	{r4, r5, r6, pc}
 80189ae:	bf00      	nop

080189b0 <_MultiArrayDimension__cdr_deserialize>:
 80189b0:	b570      	push	{r4, r5, r6, lr}
 80189b2:	460c      	mov	r4, r1
 80189b4:	b082      	sub	sp, #8
 80189b6:	b1d9      	cbz	r1, 80189f0 <_MultiArrayDimension__cdr_deserialize+0x40>
 80189b8:	688e      	ldr	r6, [r1, #8]
 80189ba:	6809      	ldr	r1, [r1, #0]
 80189bc:	ab01      	add	r3, sp, #4
 80189be:	4632      	mov	r2, r6
 80189c0:	4605      	mov	r5, r0
 80189c2:	f7f8 f973 	bl	8010cac <ucdr_deserialize_sequence_char>
 80189c6:	9b01      	ldr	r3, [sp, #4]
 80189c8:	b970      	cbnz	r0, 80189e8 <_MultiArrayDimension__cdr_deserialize+0x38>
 80189ca:	429e      	cmp	r6, r3
 80189cc:	d313      	bcc.n	80189f6 <_MultiArrayDimension__cdr_deserialize+0x46>
 80189ce:	f104 010c 	add.w	r1, r4, #12
 80189d2:	4628      	mov	r0, r5
 80189d4:	f7f4 fa10 	bl	800cdf8 <ucdr_deserialize_uint32_t>
 80189d8:	f104 0110 	add.w	r1, r4, #16
 80189dc:	4628      	mov	r0, r5
 80189de:	b002      	add	sp, #8
 80189e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80189e4:	f7f4 ba08 	b.w	800cdf8 <ucdr_deserialize_uint32_t>
 80189e8:	b103      	cbz	r3, 80189ec <_MultiArrayDimension__cdr_deserialize+0x3c>
 80189ea:	3b01      	subs	r3, #1
 80189ec:	6063      	str	r3, [r4, #4]
 80189ee:	e7ee      	b.n	80189ce <_MultiArrayDimension__cdr_deserialize+0x1e>
 80189f0:	4608      	mov	r0, r1
 80189f2:	b002      	add	sp, #8
 80189f4:	bd70      	pop	{r4, r5, r6, pc}
 80189f6:	2101      	movs	r1, #1
 80189f8:	75a8      	strb	r0, [r5, #22]
 80189fa:	7569      	strb	r1, [r5, #21]
 80189fc:	6060      	str	r0, [r4, #4]
 80189fe:	4628      	mov	r0, r5
 8018a00:	f7f5 f9b0 	bl	800dd64 <ucdr_align_to>
 8018a04:	9901      	ldr	r1, [sp, #4]
 8018a06:	4628      	mov	r0, r5
 8018a08:	f7f5 f9e2 	bl	800ddd0 <ucdr_advance_buffer>
 8018a0c:	e7df      	b.n	80189ce <_MultiArrayDimension__cdr_deserialize+0x1e>
 8018a0e:	bf00      	nop

08018a10 <_MultiArrayDimension__max_serialized_size>:
 8018a10:	b510      	push	{r4, lr}
 8018a12:	2104      	movs	r1, #4
 8018a14:	2000      	movs	r0, #0
 8018a16:	f7f5 f98f 	bl	800dd38 <ucdr_alignment>
 8018a1a:	1d04      	adds	r4, r0, #4
 8018a1c:	2104      	movs	r1, #4
 8018a1e:	4620      	mov	r0, r4
 8018a20:	f7f5 f98a 	bl	800dd38 <ucdr_alignment>
 8018a24:	3004      	adds	r0, #4
 8018a26:	4420      	add	r0, r4
 8018a28:	bd10      	pop	{r4, pc}
 8018a2a:	bf00      	nop

08018a2c <_MultiArrayDimension__get_serialized_size>:
 8018a2c:	b510      	push	{r4, lr}
 8018a2e:	4604      	mov	r4, r0
 8018a30:	b190      	cbz	r0, 8018a58 <_MultiArrayDimension__get_serialized_size+0x2c>
 8018a32:	2104      	movs	r1, #4
 8018a34:	2000      	movs	r0, #0
 8018a36:	f7f5 f97f 	bl	800dd38 <ucdr_alignment>
 8018a3a:	6863      	ldr	r3, [r4, #4]
 8018a3c:	3305      	adds	r3, #5
 8018a3e:	181c      	adds	r4, r3, r0
 8018a40:	2104      	movs	r1, #4
 8018a42:	4620      	mov	r0, r4
 8018a44:	f7f5 f978 	bl	800dd38 <ucdr_alignment>
 8018a48:	3004      	adds	r0, #4
 8018a4a:	4404      	add	r4, r0
 8018a4c:	2104      	movs	r1, #4
 8018a4e:	4620      	mov	r0, r4
 8018a50:	f7f5 f972 	bl	800dd38 <ucdr_alignment>
 8018a54:	3004      	adds	r0, #4
 8018a56:	4420      	add	r0, r4
 8018a58:	bd10      	pop	{r4, pc}
 8018a5a:	bf00      	nop

08018a5c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension>:
 8018a5c:	4800      	ldr	r0, [pc, #0]	@ (8018a60 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension+0x4>)
 8018a5e:	4770      	bx	lr
 8018a60:	20000404 	.word	0x20000404

08018a64 <ucdr_serialize_endian_array_char>:
 8018a64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018a68:	4619      	mov	r1, r3
 8018a6a:	461f      	mov	r7, r3
 8018a6c:	4605      	mov	r5, r0
 8018a6e:	4690      	mov	r8, r2
 8018a70:	f7f5 f90a 	bl	800dc88 <ucdr_check_buffer_available_for>
 8018a74:	b9e0      	cbnz	r0, 8018ab0 <ucdr_serialize_endian_array_char+0x4c>
 8018a76:	463e      	mov	r6, r7
 8018a78:	e009      	b.n	8018a8e <ucdr_serialize_endian_array_char+0x2a>
 8018a7a:	68a8      	ldr	r0, [r5, #8]
 8018a7c:	f002 f937 	bl	801acee <memcpy>
 8018a80:	68ab      	ldr	r3, [r5, #8]
 8018a82:	6928      	ldr	r0, [r5, #16]
 8018a84:	4423      	add	r3, r4
 8018a86:	4420      	add	r0, r4
 8018a88:	1b36      	subs	r6, r6, r4
 8018a8a:	60ab      	str	r3, [r5, #8]
 8018a8c:	6128      	str	r0, [r5, #16]
 8018a8e:	4631      	mov	r1, r6
 8018a90:	2201      	movs	r2, #1
 8018a92:	4628      	mov	r0, r5
 8018a94:	f7f5 f980 	bl	800dd98 <ucdr_check_final_buffer_behavior_array>
 8018a98:	1bb9      	subs	r1, r7, r6
 8018a9a:	4441      	add	r1, r8
 8018a9c:	4604      	mov	r4, r0
 8018a9e:	4602      	mov	r2, r0
 8018aa0:	2800      	cmp	r0, #0
 8018aa2:	d1ea      	bne.n	8018a7a <ucdr_serialize_endian_array_char+0x16>
 8018aa4:	2301      	movs	r3, #1
 8018aa6:	7da8      	ldrb	r0, [r5, #22]
 8018aa8:	756b      	strb	r3, [r5, #21]
 8018aaa:	4058      	eors	r0, r3
 8018aac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018ab0:	463a      	mov	r2, r7
 8018ab2:	68a8      	ldr	r0, [r5, #8]
 8018ab4:	4641      	mov	r1, r8
 8018ab6:	f002 f91a 	bl	801acee <memcpy>
 8018aba:	68aa      	ldr	r2, [r5, #8]
 8018abc:	692b      	ldr	r3, [r5, #16]
 8018abe:	443a      	add	r2, r7
 8018ac0:	443b      	add	r3, r7
 8018ac2:	60aa      	str	r2, [r5, #8]
 8018ac4:	612b      	str	r3, [r5, #16]
 8018ac6:	e7ed      	b.n	8018aa4 <ucdr_serialize_endian_array_char+0x40>

08018ac8 <ucdr_deserialize_endian_array_char>:
 8018ac8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018acc:	4619      	mov	r1, r3
 8018ace:	461f      	mov	r7, r3
 8018ad0:	4605      	mov	r5, r0
 8018ad2:	4690      	mov	r8, r2
 8018ad4:	f7f5 f8d8 	bl	800dc88 <ucdr_check_buffer_available_for>
 8018ad8:	b9e0      	cbnz	r0, 8018b14 <ucdr_deserialize_endian_array_char+0x4c>
 8018ada:	463e      	mov	r6, r7
 8018adc:	e009      	b.n	8018af2 <ucdr_deserialize_endian_array_char+0x2a>
 8018ade:	68a9      	ldr	r1, [r5, #8]
 8018ae0:	f002 f905 	bl	801acee <memcpy>
 8018ae4:	68ab      	ldr	r3, [r5, #8]
 8018ae6:	6928      	ldr	r0, [r5, #16]
 8018ae8:	4423      	add	r3, r4
 8018aea:	4420      	add	r0, r4
 8018aec:	1b36      	subs	r6, r6, r4
 8018aee:	60ab      	str	r3, [r5, #8]
 8018af0:	6128      	str	r0, [r5, #16]
 8018af2:	2201      	movs	r2, #1
 8018af4:	4631      	mov	r1, r6
 8018af6:	4628      	mov	r0, r5
 8018af8:	f7f5 f94e 	bl	800dd98 <ucdr_check_final_buffer_behavior_array>
 8018afc:	4604      	mov	r4, r0
 8018afe:	1bb8      	subs	r0, r7, r6
 8018b00:	4440      	add	r0, r8
 8018b02:	4622      	mov	r2, r4
 8018b04:	2c00      	cmp	r4, #0
 8018b06:	d1ea      	bne.n	8018ade <ucdr_deserialize_endian_array_char+0x16>
 8018b08:	2301      	movs	r3, #1
 8018b0a:	7da8      	ldrb	r0, [r5, #22]
 8018b0c:	756b      	strb	r3, [r5, #21]
 8018b0e:	4058      	eors	r0, r3
 8018b10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018b14:	463a      	mov	r2, r7
 8018b16:	68a9      	ldr	r1, [r5, #8]
 8018b18:	4640      	mov	r0, r8
 8018b1a:	f002 f8e8 	bl	801acee <memcpy>
 8018b1e:	68aa      	ldr	r2, [r5, #8]
 8018b20:	692b      	ldr	r3, [r5, #16]
 8018b22:	443a      	add	r2, r7
 8018b24:	443b      	add	r3, r7
 8018b26:	60aa      	str	r2, [r5, #8]
 8018b28:	612b      	str	r3, [r5, #16]
 8018b2a:	e7ed      	b.n	8018b08 <ucdr_deserialize_endian_array_char+0x40>

08018b2c <ucdr_serialize_array_uint8_t>:
 8018b2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018b30:	4688      	mov	r8, r1
 8018b32:	4611      	mov	r1, r2
 8018b34:	4617      	mov	r7, r2
 8018b36:	4605      	mov	r5, r0
 8018b38:	f7f5 f8a6 	bl	800dc88 <ucdr_check_buffer_available_for>
 8018b3c:	b9e0      	cbnz	r0, 8018b78 <ucdr_serialize_array_uint8_t+0x4c>
 8018b3e:	463e      	mov	r6, r7
 8018b40:	e009      	b.n	8018b56 <ucdr_serialize_array_uint8_t+0x2a>
 8018b42:	68a8      	ldr	r0, [r5, #8]
 8018b44:	f002 f8d3 	bl	801acee <memcpy>
 8018b48:	68aa      	ldr	r2, [r5, #8]
 8018b4a:	692b      	ldr	r3, [r5, #16]
 8018b4c:	4422      	add	r2, r4
 8018b4e:	4423      	add	r3, r4
 8018b50:	1b36      	subs	r6, r6, r4
 8018b52:	60aa      	str	r2, [r5, #8]
 8018b54:	612b      	str	r3, [r5, #16]
 8018b56:	4631      	mov	r1, r6
 8018b58:	2201      	movs	r2, #1
 8018b5a:	4628      	mov	r0, r5
 8018b5c:	f7f5 f91c 	bl	800dd98 <ucdr_check_final_buffer_behavior_array>
 8018b60:	1bb9      	subs	r1, r7, r6
 8018b62:	4441      	add	r1, r8
 8018b64:	4604      	mov	r4, r0
 8018b66:	4602      	mov	r2, r0
 8018b68:	2800      	cmp	r0, #0
 8018b6a:	d1ea      	bne.n	8018b42 <ucdr_serialize_array_uint8_t+0x16>
 8018b6c:	2301      	movs	r3, #1
 8018b6e:	7da8      	ldrb	r0, [r5, #22]
 8018b70:	756b      	strb	r3, [r5, #21]
 8018b72:	4058      	eors	r0, r3
 8018b74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018b78:	463a      	mov	r2, r7
 8018b7a:	68a8      	ldr	r0, [r5, #8]
 8018b7c:	4641      	mov	r1, r8
 8018b7e:	f002 f8b6 	bl	801acee <memcpy>
 8018b82:	68aa      	ldr	r2, [r5, #8]
 8018b84:	692b      	ldr	r3, [r5, #16]
 8018b86:	443a      	add	r2, r7
 8018b88:	443b      	add	r3, r7
 8018b8a:	60aa      	str	r2, [r5, #8]
 8018b8c:	612b      	str	r3, [r5, #16]
 8018b8e:	e7ed      	b.n	8018b6c <ucdr_serialize_array_uint8_t+0x40>

08018b90 <ucdr_serialize_endian_array_uint8_t>:
 8018b90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018b94:	4619      	mov	r1, r3
 8018b96:	461f      	mov	r7, r3
 8018b98:	4605      	mov	r5, r0
 8018b9a:	4690      	mov	r8, r2
 8018b9c:	f7f5 f874 	bl	800dc88 <ucdr_check_buffer_available_for>
 8018ba0:	b9e0      	cbnz	r0, 8018bdc <ucdr_serialize_endian_array_uint8_t+0x4c>
 8018ba2:	463e      	mov	r6, r7
 8018ba4:	e009      	b.n	8018bba <ucdr_serialize_endian_array_uint8_t+0x2a>
 8018ba6:	68a8      	ldr	r0, [r5, #8]
 8018ba8:	f002 f8a1 	bl	801acee <memcpy>
 8018bac:	68ab      	ldr	r3, [r5, #8]
 8018bae:	6928      	ldr	r0, [r5, #16]
 8018bb0:	4423      	add	r3, r4
 8018bb2:	4420      	add	r0, r4
 8018bb4:	1b36      	subs	r6, r6, r4
 8018bb6:	60ab      	str	r3, [r5, #8]
 8018bb8:	6128      	str	r0, [r5, #16]
 8018bba:	4631      	mov	r1, r6
 8018bbc:	2201      	movs	r2, #1
 8018bbe:	4628      	mov	r0, r5
 8018bc0:	f7f5 f8ea 	bl	800dd98 <ucdr_check_final_buffer_behavior_array>
 8018bc4:	1bb9      	subs	r1, r7, r6
 8018bc6:	4441      	add	r1, r8
 8018bc8:	4604      	mov	r4, r0
 8018bca:	4602      	mov	r2, r0
 8018bcc:	2800      	cmp	r0, #0
 8018bce:	d1ea      	bne.n	8018ba6 <ucdr_serialize_endian_array_uint8_t+0x16>
 8018bd0:	2301      	movs	r3, #1
 8018bd2:	7da8      	ldrb	r0, [r5, #22]
 8018bd4:	756b      	strb	r3, [r5, #21]
 8018bd6:	4058      	eors	r0, r3
 8018bd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018bdc:	463a      	mov	r2, r7
 8018bde:	68a8      	ldr	r0, [r5, #8]
 8018be0:	4641      	mov	r1, r8
 8018be2:	f002 f884 	bl	801acee <memcpy>
 8018be6:	68aa      	ldr	r2, [r5, #8]
 8018be8:	692b      	ldr	r3, [r5, #16]
 8018bea:	443a      	add	r2, r7
 8018bec:	443b      	add	r3, r7
 8018bee:	60aa      	str	r2, [r5, #8]
 8018bf0:	612b      	str	r3, [r5, #16]
 8018bf2:	e7ed      	b.n	8018bd0 <ucdr_serialize_endian_array_uint8_t+0x40>

08018bf4 <ucdr_deserialize_array_uint8_t>:
 8018bf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018bf8:	4688      	mov	r8, r1
 8018bfa:	4611      	mov	r1, r2
 8018bfc:	4617      	mov	r7, r2
 8018bfe:	4605      	mov	r5, r0
 8018c00:	f7f5 f842 	bl	800dc88 <ucdr_check_buffer_available_for>
 8018c04:	b9e0      	cbnz	r0, 8018c40 <ucdr_deserialize_array_uint8_t+0x4c>
 8018c06:	463e      	mov	r6, r7
 8018c08:	e009      	b.n	8018c1e <ucdr_deserialize_array_uint8_t+0x2a>
 8018c0a:	68a9      	ldr	r1, [r5, #8]
 8018c0c:	f002 f86f 	bl	801acee <memcpy>
 8018c10:	68aa      	ldr	r2, [r5, #8]
 8018c12:	692b      	ldr	r3, [r5, #16]
 8018c14:	4422      	add	r2, r4
 8018c16:	4423      	add	r3, r4
 8018c18:	1b36      	subs	r6, r6, r4
 8018c1a:	60aa      	str	r2, [r5, #8]
 8018c1c:	612b      	str	r3, [r5, #16]
 8018c1e:	2201      	movs	r2, #1
 8018c20:	4631      	mov	r1, r6
 8018c22:	4628      	mov	r0, r5
 8018c24:	f7f5 f8b8 	bl	800dd98 <ucdr_check_final_buffer_behavior_array>
 8018c28:	4604      	mov	r4, r0
 8018c2a:	1bb8      	subs	r0, r7, r6
 8018c2c:	4440      	add	r0, r8
 8018c2e:	4622      	mov	r2, r4
 8018c30:	2c00      	cmp	r4, #0
 8018c32:	d1ea      	bne.n	8018c0a <ucdr_deserialize_array_uint8_t+0x16>
 8018c34:	2301      	movs	r3, #1
 8018c36:	7da8      	ldrb	r0, [r5, #22]
 8018c38:	756b      	strb	r3, [r5, #21]
 8018c3a:	4058      	eors	r0, r3
 8018c3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018c40:	463a      	mov	r2, r7
 8018c42:	68a9      	ldr	r1, [r5, #8]
 8018c44:	4640      	mov	r0, r8
 8018c46:	f002 f852 	bl	801acee <memcpy>
 8018c4a:	68aa      	ldr	r2, [r5, #8]
 8018c4c:	692b      	ldr	r3, [r5, #16]
 8018c4e:	443a      	add	r2, r7
 8018c50:	443b      	add	r3, r7
 8018c52:	60aa      	str	r2, [r5, #8]
 8018c54:	612b      	str	r3, [r5, #16]
 8018c56:	e7ed      	b.n	8018c34 <ucdr_deserialize_array_uint8_t+0x40>

08018c58 <ucdr_deserialize_endian_array_uint8_t>:
 8018c58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018c5c:	4619      	mov	r1, r3
 8018c5e:	461f      	mov	r7, r3
 8018c60:	4605      	mov	r5, r0
 8018c62:	4690      	mov	r8, r2
 8018c64:	f7f5 f810 	bl	800dc88 <ucdr_check_buffer_available_for>
 8018c68:	b9e0      	cbnz	r0, 8018ca4 <ucdr_deserialize_endian_array_uint8_t+0x4c>
 8018c6a:	463e      	mov	r6, r7
 8018c6c:	e009      	b.n	8018c82 <ucdr_deserialize_endian_array_uint8_t+0x2a>
 8018c6e:	68a9      	ldr	r1, [r5, #8]
 8018c70:	f002 f83d 	bl	801acee <memcpy>
 8018c74:	68ab      	ldr	r3, [r5, #8]
 8018c76:	6928      	ldr	r0, [r5, #16]
 8018c78:	4423      	add	r3, r4
 8018c7a:	4420      	add	r0, r4
 8018c7c:	1b36      	subs	r6, r6, r4
 8018c7e:	60ab      	str	r3, [r5, #8]
 8018c80:	6128      	str	r0, [r5, #16]
 8018c82:	2201      	movs	r2, #1
 8018c84:	4631      	mov	r1, r6
 8018c86:	4628      	mov	r0, r5
 8018c88:	f7f5 f886 	bl	800dd98 <ucdr_check_final_buffer_behavior_array>
 8018c8c:	4604      	mov	r4, r0
 8018c8e:	1bb8      	subs	r0, r7, r6
 8018c90:	4440      	add	r0, r8
 8018c92:	4622      	mov	r2, r4
 8018c94:	2c00      	cmp	r4, #0
 8018c96:	d1ea      	bne.n	8018c6e <ucdr_deserialize_endian_array_uint8_t+0x16>
 8018c98:	2301      	movs	r3, #1
 8018c9a:	7da8      	ldrb	r0, [r5, #22]
 8018c9c:	756b      	strb	r3, [r5, #21]
 8018c9e:	4058      	eors	r0, r3
 8018ca0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018ca4:	463a      	mov	r2, r7
 8018ca6:	68a9      	ldr	r1, [r5, #8]
 8018ca8:	4640      	mov	r0, r8
 8018caa:	f002 f820 	bl	801acee <memcpy>
 8018cae:	68aa      	ldr	r2, [r5, #8]
 8018cb0:	692b      	ldr	r3, [r5, #16]
 8018cb2:	443a      	add	r2, r7
 8018cb4:	443b      	add	r3, r7
 8018cb6:	60aa      	str	r2, [r5, #8]
 8018cb8:	612b      	str	r3, [r5, #16]
 8018cba:	e7ed      	b.n	8018c98 <ucdr_deserialize_endian_array_uint8_t+0x40>

08018cbc <ucdr_serialize_endian_array_double>:
 8018cbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018cc0:	4688      	mov	r8, r1
 8018cc2:	2108      	movs	r1, #8
 8018cc4:	4604      	mov	r4, r0
 8018cc6:	4616      	mov	r6, r2
 8018cc8:	461f      	mov	r7, r3
 8018cca:	f7f5 f83d 	bl	800dd48 <ucdr_buffer_alignment>
 8018cce:	4601      	mov	r1, r0
 8018cd0:	4620      	mov	r0, r4
 8018cd2:	7d65      	ldrb	r5, [r4, #21]
 8018cd4:	f7f5 f87c 	bl	800ddd0 <ucdr_advance_buffer>
 8018cd8:	f1b8 0f01 	cmp.w	r8, #1
 8018cdc:	7565      	strb	r5, [r4, #21]
 8018cde:	d00f      	beq.n	8018d00 <ucdr_serialize_endian_array_double+0x44>
 8018ce0:	2500      	movs	r5, #0
 8018ce2:	b147      	cbz	r7, 8018cf6 <ucdr_serialize_endian_array_double+0x3a>
 8018ce4:	ecb6 0b02 	vldmia	r6!, {d0}
 8018ce8:	4641      	mov	r1, r8
 8018cea:	4620      	mov	r0, r4
 8018cec:	3501      	adds	r5, #1
 8018cee:	f7f4 fd65 	bl	800d7bc <ucdr_serialize_endian_double>
 8018cf2:	42af      	cmp	r7, r5
 8018cf4:	d1f6      	bne.n	8018ce4 <ucdr_serialize_endian_array_double+0x28>
 8018cf6:	7da0      	ldrb	r0, [r4, #22]
 8018cf8:	f080 0001 	eor.w	r0, r0, #1
 8018cfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018d00:	00ff      	lsls	r7, r7, #3
 8018d02:	4639      	mov	r1, r7
 8018d04:	4620      	mov	r0, r4
 8018d06:	f7f4 ffbf 	bl	800dc88 <ucdr_check_buffer_available_for>
 8018d0a:	b9f8      	cbnz	r0, 8018d4c <ucdr_serialize_endian_array_double+0x90>
 8018d0c:	46b8      	mov	r8, r7
 8018d0e:	e00a      	b.n	8018d26 <ucdr_serialize_endian_array_double+0x6a>
 8018d10:	68a0      	ldr	r0, [r4, #8]
 8018d12:	f001 ffec 	bl	801acee <memcpy>
 8018d16:	68a2      	ldr	r2, [r4, #8]
 8018d18:	6923      	ldr	r3, [r4, #16]
 8018d1a:	442a      	add	r2, r5
 8018d1c:	442b      	add	r3, r5
 8018d1e:	eba8 0805 	sub.w	r8, r8, r5
 8018d22:	60a2      	str	r2, [r4, #8]
 8018d24:	6123      	str	r3, [r4, #16]
 8018d26:	4641      	mov	r1, r8
 8018d28:	2208      	movs	r2, #8
 8018d2a:	4620      	mov	r0, r4
 8018d2c:	f7f5 f834 	bl	800dd98 <ucdr_check_final_buffer_behavior_array>
 8018d30:	eba7 0108 	sub.w	r1, r7, r8
 8018d34:	4431      	add	r1, r6
 8018d36:	4605      	mov	r5, r0
 8018d38:	4602      	mov	r2, r0
 8018d3a:	2800      	cmp	r0, #0
 8018d3c:	d1e8      	bne.n	8018d10 <ucdr_serialize_endian_array_double+0x54>
 8018d3e:	7da0      	ldrb	r0, [r4, #22]
 8018d40:	2308      	movs	r3, #8
 8018d42:	7563      	strb	r3, [r4, #21]
 8018d44:	f080 0001 	eor.w	r0, r0, #1
 8018d48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018d4c:	463a      	mov	r2, r7
 8018d4e:	68a0      	ldr	r0, [r4, #8]
 8018d50:	4631      	mov	r1, r6
 8018d52:	f001 ffcc 	bl	801acee <memcpy>
 8018d56:	68a2      	ldr	r2, [r4, #8]
 8018d58:	6923      	ldr	r3, [r4, #16]
 8018d5a:	443a      	add	r2, r7
 8018d5c:	441f      	add	r7, r3
 8018d5e:	60a2      	str	r2, [r4, #8]
 8018d60:	6127      	str	r7, [r4, #16]
 8018d62:	e7ec      	b.n	8018d3e <ucdr_serialize_endian_array_double+0x82>

08018d64 <ucdr_deserialize_endian_array_double>:
 8018d64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018d68:	4688      	mov	r8, r1
 8018d6a:	2108      	movs	r1, #8
 8018d6c:	4605      	mov	r5, r0
 8018d6e:	4614      	mov	r4, r2
 8018d70:	461f      	mov	r7, r3
 8018d72:	f7f4 ffe9 	bl	800dd48 <ucdr_buffer_alignment>
 8018d76:	4601      	mov	r1, r0
 8018d78:	4628      	mov	r0, r5
 8018d7a:	7d6e      	ldrb	r6, [r5, #21]
 8018d7c:	f7f5 f828 	bl	800ddd0 <ucdr_advance_buffer>
 8018d80:	f1b8 0f01 	cmp.w	r8, #1
 8018d84:	756e      	strb	r6, [r5, #21]
 8018d86:	d010      	beq.n	8018daa <ucdr_deserialize_endian_array_double+0x46>
 8018d88:	2600      	movs	r6, #0
 8018d8a:	b14f      	cbz	r7, 8018da0 <ucdr_deserialize_endian_array_double+0x3c>
 8018d8c:	4622      	mov	r2, r4
 8018d8e:	4641      	mov	r1, r8
 8018d90:	4628      	mov	r0, r5
 8018d92:	3601      	adds	r6, #1
 8018d94:	f7f4 feaa 	bl	800daec <ucdr_deserialize_endian_double>
 8018d98:	42b7      	cmp	r7, r6
 8018d9a:	f104 0408 	add.w	r4, r4, #8
 8018d9e:	d1f5      	bne.n	8018d8c <ucdr_deserialize_endian_array_double+0x28>
 8018da0:	7da8      	ldrb	r0, [r5, #22]
 8018da2:	f080 0001 	eor.w	r0, r0, #1
 8018da6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018daa:	00ff      	lsls	r7, r7, #3
 8018dac:	4639      	mov	r1, r7
 8018dae:	4628      	mov	r0, r5
 8018db0:	f7f4 ff6a 	bl	800dc88 <ucdr_check_buffer_available_for>
 8018db4:	b9f8      	cbnz	r0, 8018df6 <ucdr_deserialize_endian_array_double+0x92>
 8018db6:	46b8      	mov	r8, r7
 8018db8:	e00a      	b.n	8018dd0 <ucdr_deserialize_endian_array_double+0x6c>
 8018dba:	68a9      	ldr	r1, [r5, #8]
 8018dbc:	f001 ff97 	bl	801acee <memcpy>
 8018dc0:	68aa      	ldr	r2, [r5, #8]
 8018dc2:	692b      	ldr	r3, [r5, #16]
 8018dc4:	4432      	add	r2, r6
 8018dc6:	4433      	add	r3, r6
 8018dc8:	eba8 0806 	sub.w	r8, r8, r6
 8018dcc:	60aa      	str	r2, [r5, #8]
 8018dce:	612b      	str	r3, [r5, #16]
 8018dd0:	2208      	movs	r2, #8
 8018dd2:	4641      	mov	r1, r8
 8018dd4:	4628      	mov	r0, r5
 8018dd6:	f7f4 ffdf 	bl	800dd98 <ucdr_check_final_buffer_behavior_array>
 8018dda:	4606      	mov	r6, r0
 8018ddc:	eba7 0008 	sub.w	r0, r7, r8
 8018de0:	4420      	add	r0, r4
 8018de2:	4632      	mov	r2, r6
 8018de4:	2e00      	cmp	r6, #0
 8018de6:	d1e8      	bne.n	8018dba <ucdr_deserialize_endian_array_double+0x56>
 8018de8:	7da8      	ldrb	r0, [r5, #22]
 8018dea:	2308      	movs	r3, #8
 8018dec:	756b      	strb	r3, [r5, #21]
 8018dee:	f080 0001 	eor.w	r0, r0, #1
 8018df2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018df6:	463a      	mov	r2, r7
 8018df8:	68a9      	ldr	r1, [r5, #8]
 8018dfa:	4620      	mov	r0, r4
 8018dfc:	f001 ff77 	bl	801acee <memcpy>
 8018e00:	68aa      	ldr	r2, [r5, #8]
 8018e02:	692b      	ldr	r3, [r5, #16]
 8018e04:	443a      	add	r2, r7
 8018e06:	441f      	add	r7, r3
 8018e08:	60aa      	str	r2, [r5, #8]
 8018e0a:	612f      	str	r7, [r5, #16]
 8018e0c:	e7ec      	b.n	8018de8 <ucdr_deserialize_endian_array_double+0x84>
 8018e0e:	bf00      	nop

08018e10 <ucdr_serialize_string>:
 8018e10:	b510      	push	{r4, lr}
 8018e12:	b082      	sub	sp, #8
 8018e14:	4604      	mov	r4, r0
 8018e16:	4608      	mov	r0, r1
 8018e18:	9101      	str	r1, [sp, #4]
 8018e1a:	f7e7 fa0b 	bl	8000234 <strlen>
 8018e1e:	9901      	ldr	r1, [sp, #4]
 8018e20:	1c42      	adds	r2, r0, #1
 8018e22:	4620      	mov	r0, r4
 8018e24:	b002      	add	sp, #8
 8018e26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018e2a:	f7f7 bf2d 	b.w	8010c88 <ucdr_serialize_sequence_char>
 8018e2e:	bf00      	nop

08018e30 <ucdr_deserialize_string>:
 8018e30:	b500      	push	{lr}
 8018e32:	b083      	sub	sp, #12
 8018e34:	ab01      	add	r3, sp, #4
 8018e36:	f7f7 ff39 	bl	8010cac <ucdr_deserialize_sequence_char>
 8018e3a:	b003      	add	sp, #12
 8018e3c:	f85d fb04 	ldr.w	pc, [sp], #4

08018e40 <uxr_init_input_best_effort_stream>:
 8018e40:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8018e44:	8003      	strh	r3, [r0, #0]
 8018e46:	4770      	bx	lr

08018e48 <uxr_reset_input_best_effort_stream>:
 8018e48:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8018e4c:	8003      	strh	r3, [r0, #0]
 8018e4e:	4770      	bx	lr

08018e50 <uxr_receive_best_effort_message>:
 8018e50:	b538      	push	{r3, r4, r5, lr}
 8018e52:	4604      	mov	r4, r0
 8018e54:	8800      	ldrh	r0, [r0, #0]
 8018e56:	460d      	mov	r5, r1
 8018e58:	f000 fd42 	bl	80198e0 <uxr_seq_num_cmp>
 8018e5c:	4603      	mov	r3, r0
 8018e5e:	2b00      	cmp	r3, #0
 8018e60:	ea4f 70d0 	mov.w	r0, r0, lsr #31
 8018e64:	bfb8      	it	lt
 8018e66:	8025      	strhlt	r5, [r4, #0]
 8018e68:	bd38      	pop	{r3, r4, r5, pc}
 8018e6a:	bf00      	nop

08018e6c <on_full_input_buffer>:
 8018e6c:	b570      	push	{r4, r5, r6, lr}
 8018e6e:	4605      	mov	r5, r0
 8018e70:	460c      	mov	r4, r1
 8018e72:	682b      	ldr	r3, [r5, #0]
 8018e74:	6809      	ldr	r1, [r1, #0]
 8018e76:	8920      	ldrh	r0, [r4, #8]
 8018e78:	6862      	ldr	r2, [r4, #4]
 8018e7a:	fbb2 f2f0 	udiv	r2, r2, r0
 8018e7e:	eba3 0c01 	sub.w	ip, r3, r1
 8018e82:	fbbc fcf2 	udiv	ip, ip, r2
 8018e86:	f10c 0c01 	add.w	ip, ip, #1
 8018e8a:	fa1f f38c 	uxth.w	r3, ip
 8018e8e:	fbb3 f6f0 	udiv	r6, r3, r0
 8018e92:	fb00 3316 	mls	r3, r0, r6, r3
 8018e96:	b29b      	uxth	r3, r3
 8018e98:	fb02 f303 	mul.w	r3, r2, r3
 8018e9c:	1d18      	adds	r0, r3, #4
 8018e9e:	4408      	add	r0, r1
 8018ea0:	7d26      	ldrb	r6, [r4, #20]
 8018ea2:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8018ea6:	b116      	cbz	r6, 8018eae <on_full_input_buffer+0x42>
 8018ea8:	2600      	movs	r6, #0
 8018eaa:	f840 6c04 	str.w	r6, [r0, #-4]
 8018eae:	2a03      	cmp	r2, #3
 8018eb0:	d801      	bhi.n	8018eb6 <on_full_input_buffer+0x4a>
 8018eb2:	2001      	movs	r0, #1
 8018eb4:	bd70      	pop	{r4, r5, r6, pc}
 8018eb6:	3308      	adds	r3, #8
 8018eb8:	4419      	add	r1, r3
 8018eba:	4628      	mov	r0, r5
 8018ebc:	692b      	ldr	r3, [r5, #16]
 8018ebe:	3a04      	subs	r2, #4
 8018ec0:	f7f4 ff2e 	bl	800dd20 <ucdr_init_buffer_origin>
 8018ec4:	4628      	mov	r0, r5
 8018ec6:	4903      	ldr	r1, [pc, #12]	@ (8018ed4 <on_full_input_buffer+0x68>)
 8018ec8:	4622      	mov	r2, r4
 8018eca:	f7f4 ff05 	bl	800dcd8 <ucdr_set_on_full_buffer_callback>
 8018ece:	2000      	movs	r0, #0
 8018ed0:	bd70      	pop	{r4, r5, r6, pc}
 8018ed2:	bf00      	nop
 8018ed4:	08018e6d 	.word	0x08018e6d

08018ed8 <uxr_init_input_reliable_stream>:
 8018ed8:	b500      	push	{lr}
 8018eda:	e9c0 1200 	strd	r1, r2, [r0]
 8018ede:	f04f 0e00 	mov.w	lr, #0
 8018ee2:	9a01      	ldr	r2, [sp, #4]
 8018ee4:	8103      	strh	r3, [r0, #8]
 8018ee6:	6102      	str	r2, [r0, #16]
 8018ee8:	f880 e014 	strb.w	lr, [r0, #20]
 8018eec:	b1d3      	cbz	r3, 8018f24 <uxr_init_input_reliable_stream+0x4c>
 8018eee:	f8c1 e000 	str.w	lr, [r1]
 8018ef2:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8018ef6:	f1bc 0f01 	cmp.w	ip, #1
 8018efa:	d913      	bls.n	8018f24 <uxr_init_input_reliable_stream+0x4c>
 8018efc:	2301      	movs	r3, #1
 8018efe:	fbb3 f1fc 	udiv	r1, r3, ip
 8018f02:	fb0c 3111 	mls	r1, ip, r1, r3
 8018f06:	b289      	uxth	r1, r1
 8018f08:	6842      	ldr	r2, [r0, #4]
 8018f0a:	fbb2 f2fc 	udiv	r2, r2, ip
 8018f0e:	fb01 f202 	mul.w	r2, r1, r2
 8018f12:	6801      	ldr	r1, [r0, #0]
 8018f14:	f841 e002 	str.w	lr, [r1, r2]
 8018f18:	3301      	adds	r3, #1
 8018f1a:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8018f1e:	b29b      	uxth	r3, r3
 8018f20:	459c      	cmp	ip, r3
 8018f22:	d8ec      	bhi.n	8018efe <uxr_init_input_reliable_stream+0x26>
 8018f24:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8018f28:	60c3      	str	r3, [r0, #12]
 8018f2a:	f85d fb04 	ldr.w	pc, [sp], #4
 8018f2e:	bf00      	nop

08018f30 <uxr_reset_input_reliable_stream>:
 8018f30:	8901      	ldrh	r1, [r0, #8]
 8018f32:	b1e9      	cbz	r1, 8018f70 <uxr_reset_input_reliable_stream+0x40>
 8018f34:	f04f 0c00 	mov.w	ip, #0
 8018f38:	b500      	push	{lr}
 8018f3a:	4663      	mov	r3, ip
 8018f3c:	46e6      	mov	lr, ip
 8018f3e:	fbb3 f2f1 	udiv	r2, r3, r1
 8018f42:	fb01 3312 	mls	r3, r1, r2, r3
 8018f46:	b29b      	uxth	r3, r3
 8018f48:	6842      	ldr	r2, [r0, #4]
 8018f4a:	fbb2 f2f1 	udiv	r2, r2, r1
 8018f4e:	fb02 f303 	mul.w	r3, r2, r3
 8018f52:	6802      	ldr	r2, [r0, #0]
 8018f54:	f842 e003 	str.w	lr, [r2, r3]
 8018f58:	f10c 0c01 	add.w	ip, ip, #1
 8018f5c:	8901      	ldrh	r1, [r0, #8]
 8018f5e:	fa1f f38c 	uxth.w	r3, ip
 8018f62:	4299      	cmp	r1, r3
 8018f64:	d8eb      	bhi.n	8018f3e <uxr_reset_input_reliable_stream+0xe>
 8018f66:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8018f6a:	60c3      	str	r3, [r0, #12]
 8018f6c:	f85d fb04 	ldr.w	pc, [sp], #4
 8018f70:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8018f74:	60c3      	str	r3, [r0, #12]
 8018f76:	4770      	bx	lr

08018f78 <uxr_receive_reliable_message>:
 8018f78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018f7c:	4604      	mov	r4, r0
 8018f7e:	460d      	mov	r5, r1
 8018f80:	8901      	ldrh	r1, [r0, #8]
 8018f82:	8980      	ldrh	r0, [r0, #12]
 8018f84:	4690      	mov	r8, r2
 8018f86:	461f      	mov	r7, r3
 8018f88:	f000 fca2 	bl	80198d0 <uxr_seq_num_add>
 8018f8c:	4629      	mov	r1, r5
 8018f8e:	4606      	mov	r6, r0
 8018f90:	89a0      	ldrh	r0, [r4, #12]
 8018f92:	f000 fca5 	bl	80198e0 <uxr_seq_num_cmp>
 8018f96:	2800      	cmp	r0, #0
 8018f98:	db0a      	blt.n	8018fb0 <uxr_receive_reliable_message+0x38>
 8018f9a:	2600      	movs	r6, #0
 8018f9c:	89e0      	ldrh	r0, [r4, #14]
 8018f9e:	4629      	mov	r1, r5
 8018fa0:	f000 fc9e 	bl	80198e0 <uxr_seq_num_cmp>
 8018fa4:	2800      	cmp	r0, #0
 8018fa6:	da00      	bge.n	8018faa <uxr_receive_reliable_message+0x32>
 8018fa8:	81e5      	strh	r5, [r4, #14]
 8018faa:	4630      	mov	r0, r6
 8018fac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018fb0:	4630      	mov	r0, r6
 8018fb2:	4629      	mov	r1, r5
 8018fb4:	f000 fc94 	bl	80198e0 <uxr_seq_num_cmp>
 8018fb8:	2800      	cmp	r0, #0
 8018fba:	dbee      	blt.n	8018f9a <uxr_receive_reliable_message+0x22>
 8018fbc:	6923      	ldr	r3, [r4, #16]
 8018fbe:	4640      	mov	r0, r8
 8018fc0:	4798      	blx	r3
 8018fc2:	2101      	movs	r1, #1
 8018fc4:	4681      	mov	r9, r0
 8018fc6:	89a0      	ldrh	r0, [r4, #12]
 8018fc8:	f000 fc82 	bl	80198d0 <uxr_seq_num_add>
 8018fcc:	f1b9 0f00 	cmp.w	r9, #0
 8018fd0:	d101      	bne.n	8018fd6 <uxr_receive_reliable_message+0x5e>
 8018fd2:	4285      	cmp	r5, r0
 8018fd4:	d047      	beq.n	8019066 <uxr_receive_reliable_message+0xee>
 8018fd6:	8922      	ldrh	r2, [r4, #8]
 8018fd8:	fbb5 f0f2 	udiv	r0, r5, r2
 8018fdc:	fb02 5010 	mls	r0, r2, r0, r5
 8018fe0:	b280      	uxth	r0, r0
 8018fe2:	6863      	ldr	r3, [r4, #4]
 8018fe4:	fbb3 f3f2 	udiv	r3, r3, r2
 8018fe8:	fb00 f303 	mul.w	r3, r0, r3
 8018fec:	6820      	ldr	r0, [r4, #0]
 8018fee:	3304      	adds	r3, #4
 8018ff0:	4418      	add	r0, r3
 8018ff2:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8018ff6:	2b00      	cmp	r3, #0
 8018ff8:	d1cf      	bne.n	8018f9a <uxr_receive_reliable_message+0x22>
 8018ffa:	4641      	mov	r1, r8
 8018ffc:	463a      	mov	r2, r7
 8018ffe:	f001 fe76 	bl	801acee <memcpy>
 8019002:	8921      	ldrh	r1, [r4, #8]
 8019004:	fbb5 f2f1 	udiv	r2, r5, r1
 8019008:	fb01 5212 	mls	r2, r1, r2, r5
 801900c:	b292      	uxth	r2, r2
 801900e:	6863      	ldr	r3, [r4, #4]
 8019010:	fbb3 f3f1 	udiv	r3, r3, r1
 8019014:	fb02 f303 	mul.w	r3, r2, r3
 8019018:	6822      	ldr	r2, [r4, #0]
 801901a:	50d7      	str	r7, [r2, r3]
 801901c:	9a08      	ldr	r2, [sp, #32]
 801901e:	2301      	movs	r3, #1
 8019020:	7013      	strb	r3, [r2, #0]
 8019022:	f1b9 0f00 	cmp.w	r9, #0
 8019026:	d0b8      	beq.n	8018f9a <uxr_receive_reliable_message+0x22>
 8019028:	89a6      	ldrh	r6, [r4, #12]
 801902a:	4630      	mov	r0, r6
 801902c:	2101      	movs	r1, #1
 801902e:	f000 fc4f 	bl	80198d0 <uxr_seq_num_add>
 8019032:	8922      	ldrh	r2, [r4, #8]
 8019034:	6863      	ldr	r3, [r4, #4]
 8019036:	fbb3 f3f2 	udiv	r3, r3, r2
 801903a:	4606      	mov	r6, r0
 801903c:	fbb0 f0f2 	udiv	r0, r0, r2
 8019040:	fb02 6010 	mls	r0, r2, r0, r6
 8019044:	b280      	uxth	r0, r0
 8019046:	fb00 f303 	mul.w	r3, r0, r3
 801904a:	6820      	ldr	r0, [r4, #0]
 801904c:	3304      	adds	r3, #4
 801904e:	4418      	add	r0, r3
 8019050:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8019054:	2b00      	cmp	r3, #0
 8019056:	d0a0      	beq.n	8018f9a <uxr_receive_reliable_message+0x22>
 8019058:	6923      	ldr	r3, [r4, #16]
 801905a:	4798      	blx	r3
 801905c:	2802      	cmp	r0, #2
 801905e:	d008      	beq.n	8019072 <uxr_receive_reliable_message+0xfa>
 8019060:	2801      	cmp	r0, #1
 8019062:	d0e2      	beq.n	801902a <uxr_receive_reliable_message+0xb2>
 8019064:	e799      	b.n	8018f9a <uxr_receive_reliable_message+0x22>
 8019066:	9b08      	ldr	r3, [sp, #32]
 8019068:	81a5      	strh	r5, [r4, #12]
 801906a:	2601      	movs	r6, #1
 801906c:	f883 9000 	strb.w	r9, [r3]
 8019070:	e794      	b.n	8018f9c <uxr_receive_reliable_message+0x24>
 8019072:	2601      	movs	r6, #1
 8019074:	e792      	b.n	8018f9c <uxr_receive_reliable_message+0x24>
 8019076:	bf00      	nop

08019078 <uxr_next_input_reliable_buffer_available>:
 8019078:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801907c:	4604      	mov	r4, r0
 801907e:	460f      	mov	r7, r1
 8019080:	8980      	ldrh	r0, [r0, #12]
 8019082:	2101      	movs	r1, #1
 8019084:	4690      	mov	r8, r2
 8019086:	f000 fc23 	bl	80198d0 <uxr_seq_num_add>
 801908a:	8922      	ldrh	r2, [r4, #8]
 801908c:	fbb0 f6f2 	udiv	r6, r0, r2
 8019090:	fb02 0616 	mls	r6, r2, r6, r0
 8019094:	b2b6      	uxth	r6, r6
 8019096:	6863      	ldr	r3, [r4, #4]
 8019098:	fbb3 f3f2 	udiv	r3, r3, r2
 801909c:	fb06 f303 	mul.w	r3, r6, r3
 80190a0:	6826      	ldr	r6, [r4, #0]
 80190a2:	3304      	adds	r3, #4
 80190a4:	441e      	add	r6, r3
 80190a6:	f856 9c04 	ldr.w	r9, [r6, #-4]
 80190aa:	f1b9 0f00 	cmp.w	r9, #0
 80190ae:	d023      	beq.n	80190f8 <uxr_next_input_reliable_buffer_available+0x80>
 80190b0:	6923      	ldr	r3, [r4, #16]
 80190b2:	4605      	mov	r5, r0
 80190b4:	4630      	mov	r0, r6
 80190b6:	4798      	blx	r3
 80190b8:	4682      	mov	sl, r0
 80190ba:	b300      	cbz	r0, 80190fe <uxr_next_input_reliable_buffer_available+0x86>
 80190bc:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 80190c0:	2101      	movs	r1, #1
 80190c2:	4650      	mov	r0, sl
 80190c4:	f000 fc04 	bl	80198d0 <uxr_seq_num_add>
 80190c8:	8921      	ldrh	r1, [r4, #8]
 80190ca:	fbb0 f2f1 	udiv	r2, r0, r1
 80190ce:	4682      	mov	sl, r0
 80190d0:	fb01 0212 	mls	r2, r1, r2, r0
 80190d4:	e9d4 0300 	ldrd	r0, r3, [r4]
 80190d8:	b292      	uxth	r2, r2
 80190da:	fbb3 f3f1 	udiv	r3, r3, r1
 80190de:	fb02 f303 	mul.w	r3, r2, r3
 80190e2:	3304      	adds	r3, #4
 80190e4:	4418      	add	r0, r3
 80190e6:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80190ea:	b12b      	cbz	r3, 80190f8 <uxr_next_input_reliable_buffer_available+0x80>
 80190ec:	6923      	ldr	r3, [r4, #16]
 80190ee:	4798      	blx	r3
 80190f0:	2802      	cmp	r0, #2
 80190f2:	d01b      	beq.n	801912c <uxr_next_input_reliable_buffer_available+0xb4>
 80190f4:	2801      	cmp	r0, #1
 80190f6:	d0e3      	beq.n	80190c0 <uxr_next_input_reliable_buffer_available+0x48>
 80190f8:	2000      	movs	r0, #0
 80190fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80190fe:	464a      	mov	r2, r9
 8019100:	4631      	mov	r1, r6
 8019102:	4638      	mov	r0, r7
 8019104:	f7f4 fe14 	bl	800dd30 <ucdr_init_buffer>
 8019108:	8921      	ldrh	r1, [r4, #8]
 801910a:	fbb5 f2f1 	udiv	r2, r5, r1
 801910e:	fb01 5212 	mls	r2, r1, r2, r5
 8019112:	b292      	uxth	r2, r2
 8019114:	6863      	ldr	r3, [r4, #4]
 8019116:	fbb3 f3f1 	udiv	r3, r3, r1
 801911a:	fb02 f303 	mul.w	r3, r2, r3
 801911e:	6822      	ldr	r2, [r4, #0]
 8019120:	f842 a003 	str.w	sl, [r2, r3]
 8019124:	2001      	movs	r0, #1
 8019126:	81a5      	strh	r5, [r4, #12]
 8019128:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801912c:	8920      	ldrh	r0, [r4, #8]
 801912e:	fbb5 f3f0 	udiv	r3, r5, r0
 8019132:	fb00 5513 	mls	r5, r0, r3, r5
 8019136:	b2ad      	uxth	r5, r5
 8019138:	6863      	ldr	r3, [r4, #4]
 801913a:	fbb3 f3f0 	udiv	r3, r3, r0
 801913e:	fb03 f505 	mul.w	r5, r3, r5
 8019142:	6823      	ldr	r3, [r4, #0]
 8019144:	2000      	movs	r0, #0
 8019146:	5158      	str	r0, [r3, r5]
 8019148:	eb06 0108 	add.w	r1, r6, r8
 801914c:	eba9 0208 	sub.w	r2, r9, r8
 8019150:	4638      	mov	r0, r7
 8019152:	f7f4 fded 	bl	800dd30 <ucdr_init_buffer>
 8019156:	4638      	mov	r0, r7
 8019158:	4903      	ldr	r1, [pc, #12]	@ (8019168 <uxr_next_input_reliable_buffer_available+0xf0>)
 801915a:	4622      	mov	r2, r4
 801915c:	f7f4 fdbc 	bl	800dcd8 <ucdr_set_on_full_buffer_callback>
 8019160:	f8a4 a00c 	strh.w	sl, [r4, #12]
 8019164:	2001      	movs	r0, #1
 8019166:	e7c8      	b.n	80190fa <uxr_next_input_reliable_buffer_available+0x82>
 8019168:	08018e6d 	.word	0x08018e6d

0801916c <uxr_process_heartbeat>:
 801916c:	b538      	push	{r3, r4, r5, lr}
 801916e:	4611      	mov	r1, r2
 8019170:	4604      	mov	r4, r0
 8019172:	89c0      	ldrh	r0, [r0, #14]
 8019174:	4615      	mov	r5, r2
 8019176:	f000 fbb3 	bl	80198e0 <uxr_seq_num_cmp>
 801917a:	2800      	cmp	r0, #0
 801917c:	bfb8      	it	lt
 801917e:	81e5      	strhlt	r5, [r4, #14]
 8019180:	bd38      	pop	{r3, r4, r5, pc}
 8019182:	bf00      	nop

08019184 <uxr_compute_acknack>:
 8019184:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019188:	8903      	ldrh	r3, [r0, #8]
 801918a:	8985      	ldrh	r5, [r0, #12]
 801918c:	4604      	mov	r4, r0
 801918e:	460e      	mov	r6, r1
 8019190:	b1d3      	cbz	r3, 80191c8 <uxr_compute_acknack+0x44>
 8019192:	4628      	mov	r0, r5
 8019194:	2701      	movs	r7, #1
 8019196:	e003      	b.n	80191a0 <uxr_compute_acknack+0x1c>
 8019198:	4567      	cmp	r7, ip
 801919a:	d215      	bcs.n	80191c8 <uxr_compute_acknack+0x44>
 801919c:	89a0      	ldrh	r0, [r4, #12]
 801919e:	3701      	adds	r7, #1
 80191a0:	b2b9      	uxth	r1, r7
 80191a2:	f000 fb95 	bl	80198d0 <uxr_seq_num_add>
 80191a6:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 80191aa:	fbb0 f3fc 	udiv	r3, r0, ip
 80191ae:	fb0c 0313 	mls	r3, ip, r3, r0
 80191b2:	b29a      	uxth	r2, r3
 80191b4:	e9d4 1300 	ldrd	r1, r3, [r4]
 80191b8:	fbb3 f3fc 	udiv	r3, r3, ip
 80191bc:	fb02 f303 	mul.w	r3, r2, r3
 80191c0:	58cb      	ldr	r3, [r1, r3]
 80191c2:	2b00      	cmp	r3, #0
 80191c4:	d1e8      	bne.n	8019198 <uxr_compute_acknack+0x14>
 80191c6:	4605      	mov	r5, r0
 80191c8:	8035      	strh	r5, [r6, #0]
 80191ca:	2101      	movs	r1, #1
 80191cc:	4628      	mov	r0, r5
 80191ce:	89e7      	ldrh	r7, [r4, #14]
 80191d0:	f000 fb82 	bl	80198d8 <uxr_seq_num_sub>
 80191d4:	4601      	mov	r1, r0
 80191d6:	4638      	mov	r0, r7
 80191d8:	f000 fb7e 	bl	80198d8 <uxr_seq_num_sub>
 80191dc:	4605      	mov	r5, r0
 80191de:	b318      	cbz	r0, 8019228 <uxr_compute_acknack+0xa4>
 80191e0:	f04f 0900 	mov.w	r9, #0
 80191e4:	464f      	mov	r7, r9
 80191e6:	f04f 0801 	mov.w	r8, #1
 80191ea:	fa1f f189 	uxth.w	r1, r9
 80191ee:	8830      	ldrh	r0, [r6, #0]
 80191f0:	f000 fb6e 	bl	80198d0 <uxr_seq_num_add>
 80191f4:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 80191f8:	fbb0 f3fc 	udiv	r3, r0, ip
 80191fc:	e9d4 1200 	ldrd	r1, r2, [r4]
 8019200:	fb03 001c 	mls	r0, r3, ip, r0
 8019204:	b283      	uxth	r3, r0
 8019206:	fbb2 f2fc 	udiv	r2, r2, ip
 801920a:	fb02 f303 	mul.w	r3, r2, r3
 801920e:	fa08 f209 	lsl.w	r2, r8, r9
 8019212:	58cb      	ldr	r3, [r1, r3]
 8019214:	f109 0901 	add.w	r9, r9, #1
 8019218:	b90b      	cbnz	r3, 801921e <uxr_compute_acknack+0x9a>
 801921a:	4317      	orrs	r7, r2
 801921c:	b2bf      	uxth	r7, r7
 801921e:	454d      	cmp	r5, r9
 8019220:	d1e3      	bne.n	80191ea <uxr_compute_acknack+0x66>
 8019222:	4638      	mov	r0, r7
 8019224:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019228:	4607      	mov	r7, r0
 801922a:	4638      	mov	r0, r7
 801922c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08019230 <uxr_init_output_best_effort_stream>:
 8019230:	f64f 7cff 	movw	ip, #65535	@ 0xffff
 8019234:	e9c0 3201 	strd	r3, r2, [r0, #4]
 8019238:	6001      	str	r1, [r0, #0]
 801923a:	7303      	strb	r3, [r0, #12]
 801923c:	f8a0 c00e 	strh.w	ip, [r0, #14]
 8019240:	4770      	bx	lr
 8019242:	bf00      	nop

08019244 <uxr_reset_output_best_effort_stream>:
 8019244:	7b02      	ldrb	r2, [r0, #12]
 8019246:	6042      	str	r2, [r0, #4]
 8019248:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801924c:	81c3      	strh	r3, [r0, #14]
 801924e:	4770      	bx	lr

08019250 <uxr_prepare_best_effort_buffer_to_write>:
 8019250:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019252:	4604      	mov	r4, r0
 8019254:	b083      	sub	sp, #12
 8019256:	6840      	ldr	r0, [r0, #4]
 8019258:	460d      	mov	r5, r1
 801925a:	4616      	mov	r6, r2
 801925c:	f7fa f8ae 	bl	80133bc <uxr_submessage_padding>
 8019260:	6863      	ldr	r3, [r4, #4]
 8019262:	4418      	add	r0, r3
 8019264:	68a3      	ldr	r3, [r4, #8]
 8019266:	1942      	adds	r2, r0, r5
 8019268:	4293      	cmp	r3, r2
 801926a:	bf2c      	ite	cs
 801926c:	2701      	movcs	r7, #1
 801926e:	2700      	movcc	r7, #0
 8019270:	d202      	bcs.n	8019278 <uxr_prepare_best_effort_buffer_to_write+0x28>
 8019272:	4638      	mov	r0, r7
 8019274:	b003      	add	sp, #12
 8019276:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019278:	9000      	str	r0, [sp, #0]
 801927a:	6821      	ldr	r1, [r4, #0]
 801927c:	4630      	mov	r0, r6
 801927e:	2300      	movs	r3, #0
 8019280:	f7f4 fd44 	bl	800dd0c <ucdr_init_buffer_origin_offset>
 8019284:	6861      	ldr	r1, [r4, #4]
 8019286:	4638      	mov	r0, r7
 8019288:	4429      	add	r1, r5
 801928a:	6061      	str	r1, [r4, #4]
 801928c:	b003      	add	sp, #12
 801928e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08019290 <uxr_prepare_best_effort_buffer_to_send>:
 8019290:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019294:	4604      	mov	r4, r0
 8019296:	461d      	mov	r5, r3
 8019298:	6840      	ldr	r0, [r0, #4]
 801929a:	7b23      	ldrb	r3, [r4, #12]
 801929c:	4298      	cmp	r0, r3
 801929e:	bf8c      	ite	hi
 80192a0:	2601      	movhi	r6, #1
 80192a2:	2600      	movls	r6, #0
 80192a4:	d802      	bhi.n	80192ac <uxr_prepare_best_effort_buffer_to_send+0x1c>
 80192a6:	4630      	mov	r0, r6
 80192a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80192ac:	4688      	mov	r8, r1
 80192ae:	89e0      	ldrh	r0, [r4, #14]
 80192b0:	2101      	movs	r1, #1
 80192b2:	4617      	mov	r7, r2
 80192b4:	f000 fb0c 	bl	80198d0 <uxr_seq_num_add>
 80192b8:	6823      	ldr	r3, [r4, #0]
 80192ba:	81e0      	strh	r0, [r4, #14]
 80192bc:	8028      	strh	r0, [r5, #0]
 80192be:	f8c8 3000 	str.w	r3, [r8]
 80192c2:	6863      	ldr	r3, [r4, #4]
 80192c4:	603b      	str	r3, [r7, #0]
 80192c6:	7b23      	ldrb	r3, [r4, #12]
 80192c8:	6063      	str	r3, [r4, #4]
 80192ca:	4630      	mov	r0, r6
 80192cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080192d0 <on_full_output_buffer>:
 80192d0:	b538      	push	{r3, r4, r5, lr}
 80192d2:	6802      	ldr	r2, [r0, #0]
 80192d4:	460c      	mov	r4, r1
 80192d6:	6809      	ldr	r1, [r1, #0]
 80192d8:	8923      	ldrh	r3, [r4, #8]
 80192da:	eba2 0c01 	sub.w	ip, r2, r1
 80192de:	6862      	ldr	r2, [r4, #4]
 80192e0:	fbb2 f2f3 	udiv	r2, r2, r3
 80192e4:	fbbc fcf2 	udiv	ip, ip, r2
 80192e8:	f10c 0c01 	add.w	ip, ip, #1
 80192ec:	fa1f fc8c 	uxth.w	ip, ip
 80192f0:	fbbc fef3 	udiv	lr, ip, r3
 80192f4:	fb03 c31e 	mls	r3, r3, lr, ip
 80192f8:	b29b      	uxth	r3, r3
 80192fa:	fb02 f303 	mul.w	r3, r2, r3
 80192fe:	f894 c00c 	ldrb.w	ip, [r4, #12]
 8019302:	58ca      	ldr	r2, [r1, r3]
 8019304:	4463      	add	r3, ip
 8019306:	eba2 020c 	sub.w	r2, r2, ip
 801930a:	3308      	adds	r3, #8
 801930c:	4605      	mov	r5, r0
 801930e:	4419      	add	r1, r3
 8019310:	3a04      	subs	r2, #4
 8019312:	6903      	ldr	r3, [r0, #16]
 8019314:	f7f4 fd04 	bl	800dd20 <ucdr_init_buffer_origin>
 8019318:	4628      	mov	r0, r5
 801931a:	4903      	ldr	r1, [pc, #12]	@ (8019328 <on_full_output_buffer+0x58>)
 801931c:	4622      	mov	r2, r4
 801931e:	f7f4 fcdb 	bl	800dcd8 <ucdr_set_on_full_buffer_callback>
 8019322:	2000      	movs	r0, #0
 8019324:	bd38      	pop	{r3, r4, r5, pc}
 8019326:	bf00      	nop
 8019328:	080192d1 	.word	0x080192d1

0801932c <uxr_init_output_reliable_stream>:
 801932c:	b410      	push	{r4}
 801932e:	f89d c004 	ldrb.w	ip, [sp, #4]
 8019332:	8103      	strh	r3, [r0, #8]
 8019334:	e9c0 1200 	strd	r1, r2, [r0]
 8019338:	f880 c00c 	strb.w	ip, [r0, #12]
 801933c:	b1d3      	cbz	r3, 8019374 <uxr_init_output_reliable_stream+0x48>
 801933e:	f8c1 c000 	str.w	ip, [r1]
 8019342:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8019346:	f1bc 0f01 	cmp.w	ip, #1
 801934a:	d913      	bls.n	8019374 <uxr_init_output_reliable_stream+0x48>
 801934c:	2301      	movs	r3, #1
 801934e:	fbb3 f1fc 	udiv	r1, r3, ip
 8019352:	fb0c 3111 	mls	r1, ip, r1, r3
 8019356:	b289      	uxth	r1, r1
 8019358:	6842      	ldr	r2, [r0, #4]
 801935a:	6804      	ldr	r4, [r0, #0]
 801935c:	fbb2 f2fc 	udiv	r2, r2, ip
 8019360:	fb01 f202 	mul.w	r2, r1, r2
 8019364:	7b01      	ldrb	r1, [r0, #12]
 8019366:	50a1      	str	r1, [r4, r2]
 8019368:	3301      	adds	r3, #1
 801936a:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801936e:	b29b      	uxth	r3, r3
 8019370:	459c      	cmp	ip, r3
 8019372:	d8ec      	bhi.n	801934e <uxr_init_output_reliable_stream+0x22>
 8019374:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8019378:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801937c:	e9c0 2306 	strd	r2, r3, [r0, #24]
 8019380:	4905      	ldr	r1, [pc, #20]	@ (8019398 <uxr_init_output_reliable_stream+0x6c>)
 8019382:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019386:	f8c0 100e 	str.w	r1, [r0, #14]
 801938a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801938e:	2300      	movs	r3, #0
 8019390:	8242      	strh	r2, [r0, #18]
 8019392:	8403      	strh	r3, [r0, #32]
 8019394:	4770      	bx	lr
 8019396:	bf00      	nop
 8019398:	ffff0000 	.word	0xffff0000

0801939c <uxr_reset_output_reliable_stream>:
 801939c:	8901      	ldrh	r1, [r0, #8]
 801939e:	b1b1      	cbz	r1, 80193ce <uxr_reset_output_reliable_stream+0x32>
 80193a0:	f04f 0c00 	mov.w	ip, #0
 80193a4:	4663      	mov	r3, ip
 80193a6:	fbb3 f2f1 	udiv	r2, r3, r1
 80193aa:	fb01 3312 	mls	r3, r1, r2, r3
 80193ae:	b29b      	uxth	r3, r3
 80193b0:	6842      	ldr	r2, [r0, #4]
 80193b2:	fbb2 f2f1 	udiv	r2, r2, r1
 80193b6:	6801      	ldr	r1, [r0, #0]
 80193b8:	fb02 f303 	mul.w	r3, r2, r3
 80193bc:	7b02      	ldrb	r2, [r0, #12]
 80193be:	50ca      	str	r2, [r1, r3]
 80193c0:	f10c 0c01 	add.w	ip, ip, #1
 80193c4:	8901      	ldrh	r1, [r0, #8]
 80193c6:	fa1f f38c 	uxth.w	r3, ip
 80193ca:	4299      	cmp	r1, r3
 80193cc:	d8eb      	bhi.n	80193a6 <uxr_reset_output_reliable_stream+0xa>
 80193ce:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80193d2:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80193d6:	e9c0 2306 	strd	r2, r3, [r0, #24]
 80193da:	4904      	ldr	r1, [pc, #16]	@ (80193ec <uxr_reset_output_reliable_stream+0x50>)
 80193dc:	f8c0 100e 	str.w	r1, [r0, #14]
 80193e0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80193e4:	2300      	movs	r3, #0
 80193e6:	8242      	strh	r2, [r0, #18]
 80193e8:	8403      	strh	r3, [r0, #32]
 80193ea:	4770      	bx	lr
 80193ec:	ffff0000 	.word	0xffff0000

080193f0 <uxr_prepare_reliable_buffer_to_write>:
 80193f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80193f4:	4604      	mov	r4, r0
 80193f6:	b091      	sub	sp, #68	@ 0x44
 80193f8:	8900      	ldrh	r0, [r0, #8]
 80193fa:	89e6      	ldrh	r6, [r4, #14]
 80193fc:	6823      	ldr	r3, [r4, #0]
 80193fe:	9204      	str	r2, [sp, #16]
 8019400:	fbb6 f2f0 	udiv	r2, r6, r0
 8019404:	fb00 6212 	mls	r2, r0, r2, r6
 8019408:	b292      	uxth	r2, r2
 801940a:	6865      	ldr	r5, [r4, #4]
 801940c:	fbb5 f5f0 	udiv	r5, r5, r0
 8019410:	fb05 3202 	mla	r2, r5, r2, r3
 8019414:	3204      	adds	r2, #4
 8019416:	f852 8c04 	ldr.w	r8, [r2, #-4]
 801941a:	f894 900c 	ldrb.w	r9, [r4, #12]
 801941e:	9203      	str	r2, [sp, #12]
 8019420:	468b      	mov	fp, r1
 8019422:	1f2f      	subs	r7, r5, #4
 8019424:	2800      	cmp	r0, #0
 8019426:	f000 814c 	beq.w	80196c2 <uxr_prepare_reliable_buffer_to_write+0x2d2>
 801942a:	f04f 0c00 	mov.w	ip, #0
 801942e:	46e2      	mov	sl, ip
 8019430:	4661      	mov	r1, ip
 8019432:	fbb1 f2f0 	udiv	r2, r1, r0
 8019436:	fb00 1212 	mls	r2, r0, r2, r1
 801943a:	b292      	uxth	r2, r2
 801943c:	fb05 f202 	mul.w	r2, r5, r2
 8019440:	f10c 0c01 	add.w	ip, ip, #1
 8019444:	589a      	ldr	r2, [r3, r2]
 8019446:	454a      	cmp	r2, r9
 8019448:	bf08      	it	eq
 801944a:	f10a 0a01 	addeq.w	sl, sl, #1
 801944e:	fa1f f18c 	uxth.w	r1, ip
 8019452:	bf08      	it	eq
 8019454:	fa1f fa8a 	uxtheq.w	sl, sl
 8019458:	4281      	cmp	r1, r0
 801945a:	d3ea      	bcc.n	8019432 <uxr_prepare_reliable_buffer_to_write+0x42>
 801945c:	4640      	mov	r0, r8
 801945e:	2104      	movs	r1, #4
 8019460:	f8cd a014 	str.w	sl, [sp, #20]
 8019464:	f7f4 fc68 	bl	800dd38 <ucdr_alignment>
 8019468:	4480      	add	r8, r0
 801946a:	eb08 020b 	add.w	r2, r8, fp
 801946e:	42ba      	cmp	r2, r7
 8019470:	f240 80cd 	bls.w	801960e <uxr_prepare_reliable_buffer_to_write+0x21e>
 8019474:	7b22      	ldrb	r2, [r4, #12]
 8019476:	445a      	add	r2, fp
 8019478:	42ba      	cmp	r2, r7
 801947a:	f240 80b5 	bls.w	80195e8 <uxr_prepare_reliable_buffer_to_write+0x1f8>
 801947e:	f5c9 437f 	rsb	r3, r9, #65280	@ 0xff00
 8019482:	33fc      	adds	r3, #252	@ 0xfc
 8019484:	b2ba      	uxth	r2, r7
 8019486:	4413      	add	r3, r2
 8019488:	b29b      	uxth	r3, r3
 801948a:	fb0a f903 	mul.w	r9, sl, r3
 801948e:	45d9      	cmp	r9, fp
 8019490:	9305      	str	r3, [sp, #20]
 8019492:	9306      	str	r3, [sp, #24]
 8019494:	f0c0 80b7 	bcc.w	8019606 <uxr_prepare_reliable_buffer_to_write+0x216>
 8019498:	f108 0304 	add.w	r3, r8, #4
 801949c:	42bb      	cmp	r3, r7
 801949e:	f080 80db 	bcs.w	8019658 <uxr_prepare_reliable_buffer_to_write+0x268>
 80194a2:	f1a2 0904 	sub.w	r9, r2, #4
 80194a6:	eba9 0908 	sub.w	r9, r9, r8
 80194aa:	9b05      	ldr	r3, [sp, #20]
 80194ac:	fa1f f989 	uxth.w	r9, r9
 80194b0:	ebab 0b09 	sub.w	fp, fp, r9
 80194b4:	fbbb f2f3 	udiv	r2, fp, r3
 80194b8:	fb03 b312 	mls	r3, r3, r2, fp
 80194bc:	2b00      	cmp	r3, #0
 80194be:	f000 80c8 	beq.w	8019652 <uxr_prepare_reliable_buffer_to_write+0x262>
 80194c2:	3201      	adds	r2, #1
 80194c4:	b292      	uxth	r2, r2
 80194c6:	9306      	str	r3, [sp, #24]
 80194c8:	4552      	cmp	r2, sl
 80194ca:	f200 809c 	bhi.w	8019606 <uxr_prepare_reliable_buffer_to_write+0x216>
 80194ce:	f10d 0b20 	add.w	fp, sp, #32
 80194d2:	2a00      	cmp	r2, #0
 80194d4:	d042      	beq.n	801955c <uxr_prepare_reliable_buffer_to_write+0x16c>
 80194d6:	f8cd 801c 	str.w	r8, [sp, #28]
 80194da:	f04f 0a00 	mov.w	sl, #0
 80194de:	f8dd 8014 	ldr.w	r8, [sp, #20]
 80194e2:	9505      	str	r5, [sp, #20]
 80194e4:	f10d 0b20 	add.w	fp, sp, #32
 80194e8:	4615      	mov	r5, r2
 80194ea:	e000      	b.n	80194ee <uxr_prepare_reliable_buffer_to_write+0xfe>
 80194ec:	46c1      	mov	r9, r8
 80194ee:	8920      	ldrh	r0, [r4, #8]
 80194f0:	fbb6 f2f0 	udiv	r2, r6, r0
 80194f4:	fb00 6112 	mls	r1, r0, r2, r6
 80194f8:	b28a      	uxth	r2, r1
 80194fa:	6863      	ldr	r3, [r4, #4]
 80194fc:	fbb3 f1f0 	udiv	r1, r3, r0
 8019500:	6823      	ldr	r3, [r4, #0]
 8019502:	fb02 f101 	mul.w	r1, r2, r1
 8019506:	3104      	adds	r1, #4
 8019508:	4419      	add	r1, r3
 801950a:	4658      	mov	r0, fp
 801950c:	f851 2c04 	ldr.w	r2, [r1, #-4]
 8019510:	9200      	str	r2, [sp, #0]
 8019512:	2300      	movs	r3, #0
 8019514:	463a      	mov	r2, r7
 8019516:	f7f4 fbf9 	bl	800dd0c <ucdr_init_buffer_origin_offset>
 801951a:	464a      	mov	r2, r9
 801951c:	2300      	movs	r3, #0
 801951e:	210d      	movs	r1, #13
 8019520:	4658      	mov	r0, fp
 8019522:	f7f9 ff0b 	bl	801333c <uxr_buffer_submessage_header>
 8019526:	8921      	ldrh	r1, [r4, #8]
 8019528:	fbb6 f2f1 	udiv	r2, r6, r1
 801952c:	fb01 6212 	mls	r2, r1, r2, r6
 8019530:	b292      	uxth	r2, r2
 8019532:	6863      	ldr	r3, [r4, #4]
 8019534:	fbb3 f3f1 	udiv	r3, r3, r1
 8019538:	fb02 f303 	mul.w	r3, r2, r3
 801953c:	6822      	ldr	r2, [r4, #0]
 801953e:	4630      	mov	r0, r6
 8019540:	50d7      	str	r7, [r2, r3]
 8019542:	2101      	movs	r1, #1
 8019544:	f000 f9c4 	bl	80198d0 <uxr_seq_num_add>
 8019548:	f10a 0a01 	add.w	sl, sl, #1
 801954c:	fa1f f38a 	uxth.w	r3, sl
 8019550:	429d      	cmp	r5, r3
 8019552:	4606      	mov	r6, r0
 8019554:	d8ca      	bhi.n	80194ec <uxr_prepare_reliable_buffer_to_write+0xfc>
 8019556:	f8dd 801c 	ldr.w	r8, [sp, #28]
 801955a:	9d05      	ldr	r5, [sp, #20]
 801955c:	8920      	ldrh	r0, [r4, #8]
 801955e:	fbb6 f3f0 	udiv	r3, r6, r0
 8019562:	fb00 6313 	mls	r3, r0, r3, r6
 8019566:	b299      	uxth	r1, r3
 8019568:	6863      	ldr	r3, [r4, #4]
 801956a:	fbb3 f3f0 	udiv	r3, r3, r0
 801956e:	fb01 f303 	mul.w	r3, r1, r3
 8019572:	6821      	ldr	r1, [r4, #0]
 8019574:	3304      	adds	r3, #4
 8019576:	4419      	add	r1, r3
 8019578:	463a      	mov	r2, r7
 801957a:	f851 0c04 	ldr.w	r0, [r1, #-4]
 801957e:	9000      	str	r0, [sp, #0]
 8019580:	2300      	movs	r3, #0
 8019582:	4658      	mov	r0, fp
 8019584:	f7f4 fbc2 	bl	800dd0c <ucdr_init_buffer_origin_offset>
 8019588:	f8dd 9018 	ldr.w	r9, [sp, #24]
 801958c:	4658      	mov	r0, fp
 801958e:	fa1f f289 	uxth.w	r2, r9
 8019592:	2302      	movs	r3, #2
 8019594:	210d      	movs	r1, #13
 8019596:	f7f9 fed1 	bl	801333c <uxr_buffer_submessage_header>
 801959a:	9b03      	ldr	r3, [sp, #12]
 801959c:	8927      	ldrh	r7, [r4, #8]
 801959e:	7b20      	ldrb	r0, [r4, #12]
 80195a0:	f108 0104 	add.w	r1, r8, #4
 80195a4:	440b      	add	r3, r1
 80195a6:	4619      	mov	r1, r3
 80195a8:	fbb6 f3f7 	udiv	r3, r6, r7
 80195ac:	fb07 6313 	mls	r3, r7, r3, r6
 80195b0:	f1a5 0208 	sub.w	r2, r5, #8
 80195b4:	b29d      	uxth	r5, r3
 80195b6:	3004      	adds	r0, #4
 80195b8:	6863      	ldr	r3, [r4, #4]
 80195ba:	fbb3 f3f7 	udiv	r3, r3, r7
 80195be:	fb05 f303 	mul.w	r3, r5, r3
 80195c2:	6825      	ldr	r5, [r4, #0]
 80195c4:	4448      	add	r0, r9
 80195c6:	50e8      	str	r0, [r5, r3]
 80195c8:	9d04      	ldr	r5, [sp, #16]
 80195ca:	eba2 0208 	sub.w	r2, r2, r8
 80195ce:	4628      	mov	r0, r5
 80195d0:	f7f4 fbae 	bl	800dd30 <ucdr_init_buffer>
 80195d4:	4628      	mov	r0, r5
 80195d6:	493c      	ldr	r1, [pc, #240]	@ (80196c8 <uxr_prepare_reliable_buffer_to_write+0x2d8>)
 80195d8:	4622      	mov	r2, r4
 80195da:	f7f4 fb7d 	bl	800dcd8 <ucdr_set_on_full_buffer_callback>
 80195de:	2001      	movs	r0, #1
 80195e0:	81e6      	strh	r6, [r4, #14]
 80195e2:	b011      	add	sp, #68	@ 0x44
 80195e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80195e8:	2101      	movs	r1, #1
 80195ea:	89e0      	ldrh	r0, [r4, #14]
 80195ec:	f000 f970 	bl	80198d0 <uxr_seq_num_add>
 80195f0:	8921      	ldrh	r1, [r4, #8]
 80195f2:	4605      	mov	r5, r0
 80195f4:	8a60      	ldrh	r0, [r4, #18]
 80195f6:	f000 f96b 	bl	80198d0 <uxr_seq_num_add>
 80195fa:	4601      	mov	r1, r0
 80195fc:	4628      	mov	r0, r5
 80195fe:	f000 f96f 	bl	80198e0 <uxr_seq_num_cmp>
 8019602:	2800      	cmp	r0, #0
 8019604:	dd42      	ble.n	801968c <uxr_prepare_reliable_buffer_to_write+0x29c>
 8019606:	2000      	movs	r0, #0
 8019608:	b011      	add	sp, #68	@ 0x44
 801960a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801960e:	8921      	ldrh	r1, [r4, #8]
 8019610:	8a60      	ldrh	r0, [r4, #18]
 8019612:	9205      	str	r2, [sp, #20]
 8019614:	f000 f95c 	bl	80198d0 <uxr_seq_num_add>
 8019618:	4601      	mov	r1, r0
 801961a:	4630      	mov	r0, r6
 801961c:	f000 f960 	bl	80198e0 <uxr_seq_num_cmp>
 8019620:	2800      	cmp	r0, #0
 8019622:	9a05      	ldr	r2, [sp, #20]
 8019624:	dcef      	bgt.n	8019606 <uxr_prepare_reliable_buffer_to_write+0x216>
 8019626:	8927      	ldrh	r7, [r4, #8]
 8019628:	fbb6 f3f7 	udiv	r3, r6, r7
 801962c:	fb07 6313 	mls	r3, r7, r3, r6
 8019630:	b29d      	uxth	r5, r3
 8019632:	6863      	ldr	r3, [r4, #4]
 8019634:	6824      	ldr	r4, [r4, #0]
 8019636:	fbb3 f3f7 	udiv	r3, r3, r7
 801963a:	fb05 f303 	mul.w	r3, r5, r3
 801963e:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 8019642:	50e2      	str	r2, [r4, r3]
 8019644:	2300      	movs	r3, #0
 8019646:	f8cd 8000 	str.w	r8, [sp]
 801964a:	f7f4 fb5f 	bl	800dd0c <ucdr_init_buffer_origin_offset>
 801964e:	2001      	movs	r0, #1
 8019650:	e7da      	b.n	8019608 <uxr_prepare_reliable_buffer_to_write+0x218>
 8019652:	b293      	uxth	r3, r2
 8019654:	461a      	mov	r2, r3
 8019656:	e737      	b.n	80194c8 <uxr_prepare_reliable_buffer_to_write+0xd8>
 8019658:	4630      	mov	r0, r6
 801965a:	2101      	movs	r1, #1
 801965c:	9207      	str	r2, [sp, #28]
 801965e:	f000 f937 	bl	80198d0 <uxr_seq_num_add>
 8019662:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8019666:	fbb0 f1fc 	udiv	r1, r0, ip
 801966a:	fb0c 0111 	mls	r1, ip, r1, r0
 801966e:	4606      	mov	r6, r0
 8019670:	b288      	uxth	r0, r1
 8019672:	6863      	ldr	r3, [r4, #4]
 8019674:	fbb3 f1fc 	udiv	r1, r3, ip
 8019678:	6823      	ldr	r3, [r4, #0]
 801967a:	9a07      	ldr	r2, [sp, #28]
 801967c:	fb00 f101 	mul.w	r1, r0, r1
 8019680:	3104      	adds	r1, #4
 8019682:	440b      	add	r3, r1
 8019684:	9303      	str	r3, [sp, #12]
 8019686:	f853 8c04 	ldr.w	r8, [r3, #-4]
 801968a:	e70a      	b.n	80194a2 <uxr_prepare_reliable_buffer_to_write+0xb2>
 801968c:	8921      	ldrh	r1, [r4, #8]
 801968e:	fbb5 f3f1 	udiv	r3, r5, r1
 8019692:	fb01 5313 	mls	r3, r1, r3, r5
 8019696:	b29a      	uxth	r2, r3
 8019698:	6863      	ldr	r3, [r4, #4]
 801969a:	fbb3 f3f1 	udiv	r3, r3, r1
 801969e:	6821      	ldr	r1, [r4, #0]
 80196a0:	9804      	ldr	r0, [sp, #16]
 80196a2:	fb02 f303 	mul.w	r3, r2, r3
 80196a6:	3304      	adds	r3, #4
 80196a8:	7b22      	ldrb	r2, [r4, #12]
 80196aa:	4419      	add	r1, r3
 80196ac:	445a      	add	r2, fp
 80196ae:	f841 2c04 	str.w	r2, [r1, #-4]
 80196b2:	7b23      	ldrb	r3, [r4, #12]
 80196b4:	9300      	str	r3, [sp, #0]
 80196b6:	2300      	movs	r3, #0
 80196b8:	f7f4 fb28 	bl	800dd0c <ucdr_init_buffer_origin_offset>
 80196bc:	81e5      	strh	r5, [r4, #14]
 80196be:	2001      	movs	r0, #1
 80196c0:	e7a2      	b.n	8019608 <uxr_prepare_reliable_buffer_to_write+0x218>
 80196c2:	4682      	mov	sl, r0
 80196c4:	e6ca      	b.n	801945c <uxr_prepare_reliable_buffer_to_write+0x6c>
 80196c6:	bf00      	nop
 80196c8:	080192d1 	.word	0x080192d1

080196cc <uxr_prepare_next_reliable_buffer_to_send>:
 80196cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80196ce:	4604      	mov	r4, r0
 80196d0:	460f      	mov	r7, r1
 80196d2:	8a00      	ldrh	r0, [r0, #16]
 80196d4:	2101      	movs	r1, #1
 80196d6:	4616      	mov	r6, r2
 80196d8:	461d      	mov	r5, r3
 80196da:	f000 f8f9 	bl	80198d0 <uxr_seq_num_add>
 80196de:	8028      	strh	r0, [r5, #0]
 80196e0:	8922      	ldrh	r2, [r4, #8]
 80196e2:	fbb0 f3f2 	udiv	r3, r0, r2
 80196e6:	fb02 0c13 	mls	ip, r2, r3, r0
 80196ea:	fa1f fc8c 	uxth.w	ip, ip
 80196ee:	6863      	ldr	r3, [r4, #4]
 80196f0:	fbb3 f3f2 	udiv	r3, r3, r2
 80196f4:	fb0c fc03 	mul.w	ip, ip, r3
 80196f8:	6823      	ldr	r3, [r4, #0]
 80196fa:	89e1      	ldrh	r1, [r4, #14]
 80196fc:	f10c 0c04 	add.w	ip, ip, #4
 8019700:	4463      	add	r3, ip
 8019702:	603b      	str	r3, [r7, #0]
 8019704:	6823      	ldr	r3, [r4, #0]
 8019706:	449c      	add	ip, r3
 8019708:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 801970c:	6033      	str	r3, [r6, #0]
 801970e:	f000 f8e7 	bl	80198e0 <uxr_seq_num_cmp>
 8019712:	2800      	cmp	r0, #0
 8019714:	dd01      	ble.n	801971a <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 8019716:	2000      	movs	r0, #0
 8019718:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801971a:	7b23      	ldrb	r3, [r4, #12]
 801971c:	6832      	ldr	r2, [r6, #0]
 801971e:	429a      	cmp	r2, r3
 8019720:	d9f9      	bls.n	8019716 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8019722:	8a61      	ldrh	r1, [r4, #18]
 8019724:	8a20      	ldrh	r0, [r4, #16]
 8019726:	f000 f8d7 	bl	80198d8 <uxr_seq_num_sub>
 801972a:	8923      	ldrh	r3, [r4, #8]
 801972c:	4283      	cmp	r3, r0
 801972e:	d0f2      	beq.n	8019716 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8019730:	8828      	ldrh	r0, [r5, #0]
 8019732:	89e3      	ldrh	r3, [r4, #14]
 8019734:	8220      	strh	r0, [r4, #16]
 8019736:	4298      	cmp	r0, r3
 8019738:	d001      	beq.n	801973e <uxr_prepare_next_reliable_buffer_to_send+0x72>
 801973a:	2001      	movs	r0, #1
 801973c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801973e:	2101      	movs	r1, #1
 8019740:	f000 f8c6 	bl	80198d0 <uxr_seq_num_add>
 8019744:	81e0      	strh	r0, [r4, #14]
 8019746:	2001      	movs	r0, #1
 8019748:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801974a:	bf00      	nop

0801974c <uxr_update_output_stream_heartbeat_timestamp>:
 801974c:	b570      	push	{r4, r5, r6, lr}
 801974e:	8a01      	ldrh	r1, [r0, #16]
 8019750:	4604      	mov	r4, r0
 8019752:	8a40      	ldrh	r0, [r0, #18]
 8019754:	4615      	mov	r5, r2
 8019756:	461e      	mov	r6, r3
 8019758:	f000 f8c2 	bl	80198e0 <uxr_seq_num_cmp>
 801975c:	2800      	cmp	r0, #0
 801975e:	db07      	blt.n	8019770 <uxr_update_output_stream_heartbeat_timestamp+0x24>
 8019760:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8019764:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8019768:	e9c4 2306 	strd	r2, r3, [r4, #24]
 801976c:	2000      	movs	r0, #0
 801976e:	bd70      	pop	{r4, r5, r6, pc}
 8019770:	f894 0020 	ldrb.w	r0, [r4, #32]
 8019774:	b940      	cbnz	r0, 8019788 <uxr_update_output_stream_heartbeat_timestamp+0x3c>
 8019776:	2301      	movs	r3, #1
 8019778:	f884 3020 	strb.w	r3, [r4, #32]
 801977c:	3564      	adds	r5, #100	@ 0x64
 801977e:	f146 0600 	adc.w	r6, r6, #0
 8019782:	e9c4 5606 	strd	r5, r6, [r4, #24]
 8019786:	bd70      	pop	{r4, r5, r6, pc}
 8019788:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 801978c:	4295      	cmp	r5, r2
 801978e:	eb76 0303 	sbcs.w	r3, r6, r3
 8019792:	bfa5      	ittet	ge
 8019794:	3001      	addge	r0, #1
 8019796:	f884 0020 	strbge.w	r0, [r4, #32]
 801979a:	2000      	movlt	r0, #0
 801979c:	2001      	movge	r0, #1
 801979e:	e7ed      	b.n	801977c <uxr_update_output_stream_heartbeat_timestamp+0x30>

080197a0 <uxr_begin_output_nack_buffer_it>:
 80197a0:	8a40      	ldrh	r0, [r0, #18]
 80197a2:	4770      	bx	lr

080197a4 <uxr_next_reliable_nack_buffer_to_send>:
 80197a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80197a8:	f890 8021 	ldrb.w	r8, [r0, #33]	@ 0x21
 80197ac:	b082      	sub	sp, #8
 80197ae:	f1b8 0f00 	cmp.w	r8, #0
 80197b2:	d011      	beq.n	80197d8 <uxr_next_reliable_nack_buffer_to_send+0x34>
 80197b4:	4604      	mov	r4, r0
 80197b6:	8818      	ldrh	r0, [r3, #0]
 80197b8:	460e      	mov	r6, r1
 80197ba:	4617      	mov	r7, r2
 80197bc:	461d      	mov	r5, r3
 80197be:	2101      	movs	r1, #1
 80197c0:	f000 f886 	bl	80198d0 <uxr_seq_num_add>
 80197c4:	8028      	strh	r0, [r5, #0]
 80197c6:	8a21      	ldrh	r1, [r4, #16]
 80197c8:	f000 f88a 	bl	80198e0 <uxr_seq_num_cmp>
 80197cc:	2800      	cmp	r0, #0
 80197ce:	dd07      	ble.n	80197e0 <uxr_next_reliable_nack_buffer_to_send+0x3c>
 80197d0:	f04f 0800 	mov.w	r8, #0
 80197d4:	f884 8021 	strb.w	r8, [r4, #33]	@ 0x21
 80197d8:	4640      	mov	r0, r8
 80197da:	b002      	add	sp, #8
 80197dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80197e0:	8921      	ldrh	r1, [r4, #8]
 80197e2:	8828      	ldrh	r0, [r5, #0]
 80197e4:	6823      	ldr	r3, [r4, #0]
 80197e6:	fbb0 f2f1 	udiv	r2, r0, r1
 80197ea:	fb01 0c12 	mls	ip, r1, r2, r0
 80197ee:	fa1f f28c 	uxth.w	r2, ip
 80197f2:	9301      	str	r3, [sp, #4]
 80197f4:	6863      	ldr	r3, [r4, #4]
 80197f6:	fbb3 fcf1 	udiv	ip, r3, r1
 80197fa:	9b01      	ldr	r3, [sp, #4]
 80197fc:	fb02 fc0c 	mul.w	ip, r2, ip
 8019800:	f10c 0c04 	add.w	ip, ip, #4
 8019804:	4463      	add	r3, ip
 8019806:	6033      	str	r3, [r6, #0]
 8019808:	6823      	ldr	r3, [r4, #0]
 801980a:	4463      	add	r3, ip
 801980c:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8019810:	603b      	str	r3, [r7, #0]
 8019812:	7b22      	ldrb	r2, [r4, #12]
 8019814:	429a      	cmp	r2, r3
 8019816:	d0d2      	beq.n	80197be <uxr_next_reliable_nack_buffer_to_send+0x1a>
 8019818:	4640      	mov	r0, r8
 801981a:	b002      	add	sp, #8
 801981c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08019820 <uxr_process_acknack>:
 8019820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019822:	4604      	mov	r4, r0
 8019824:	460e      	mov	r6, r1
 8019826:	4610      	mov	r0, r2
 8019828:	2101      	movs	r1, #1
 801982a:	f000 f855 	bl	80198d8 <uxr_seq_num_sub>
 801982e:	8a61      	ldrh	r1, [r4, #18]
 8019830:	f000 f852 	bl	80198d8 <uxr_seq_num_sub>
 8019834:	b1c0      	cbz	r0, 8019868 <uxr_process_acknack+0x48>
 8019836:	4605      	mov	r5, r0
 8019838:	2700      	movs	r7, #0
 801983a:	2101      	movs	r1, #1
 801983c:	8a60      	ldrh	r0, [r4, #18]
 801983e:	f000 f847 	bl	80198d0 <uxr_seq_num_add>
 8019842:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8019846:	fbb0 f1fc 	udiv	r1, r0, ip
 801984a:	e9d4 2300 	ldrd	r2, r3, [r4]
 801984e:	fb0c 0111 	mls	r1, ip, r1, r0
 8019852:	b289      	uxth	r1, r1
 8019854:	3701      	adds	r7, #1
 8019856:	fbb3 f3fc 	udiv	r3, r3, ip
 801985a:	fb01 f303 	mul.w	r3, r1, r3
 801985e:	42bd      	cmp	r5, r7
 8019860:	7b21      	ldrb	r1, [r4, #12]
 8019862:	8260      	strh	r0, [r4, #18]
 8019864:	50d1      	str	r1, [r2, r3]
 8019866:	d1e8      	bne.n	801983a <uxr_process_acknack+0x1a>
 8019868:	3e00      	subs	r6, #0
 801986a:	f04f 0300 	mov.w	r3, #0
 801986e:	bf18      	it	ne
 8019870:	2601      	movne	r6, #1
 8019872:	f884 3020 	strb.w	r3, [r4, #32]
 8019876:	f884 6021 	strb.w	r6, [r4, #33]	@ 0x21
 801987a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801987c <uxr_is_output_up_to_date>:
 801987c:	8a01      	ldrh	r1, [r0, #16]
 801987e:	8a40      	ldrh	r0, [r0, #18]
 8019880:	b508      	push	{r3, lr}
 8019882:	f000 f82d 	bl	80198e0 <uxr_seq_num_cmp>
 8019886:	fab0 f080 	clz	r0, r0
 801988a:	0940      	lsrs	r0, r0, #5
 801988c:	bd08      	pop	{r3, pc}
 801988e:	bf00      	nop

08019890 <get_available_free_slots>:
 8019890:	8902      	ldrh	r2, [r0, #8]
 8019892:	b1da      	cbz	r2, 80198cc <get_available_free_slots+0x3c>
 8019894:	b530      	push	{r4, r5, lr}
 8019896:	2100      	movs	r1, #0
 8019898:	6843      	ldr	r3, [r0, #4]
 801989a:	6805      	ldr	r5, [r0, #0]
 801989c:	7b04      	ldrb	r4, [r0, #12]
 801989e:	fbb3 fef2 	udiv	lr, r3, r2
 80198a2:	4608      	mov	r0, r1
 80198a4:	460b      	mov	r3, r1
 80198a6:	fbb3 fcf2 	udiv	ip, r3, r2
 80198aa:	fb02 331c 	mls	r3, r2, ip, r3
 80198ae:	b29b      	uxth	r3, r3
 80198b0:	fb0e f303 	mul.w	r3, lr, r3
 80198b4:	3101      	adds	r1, #1
 80198b6:	f855 c003 	ldr.w	ip, [r5, r3]
 80198ba:	4564      	cmp	r4, ip
 80198bc:	bf08      	it	eq
 80198be:	3001      	addeq	r0, #1
 80198c0:	b28b      	uxth	r3, r1
 80198c2:	bf08      	it	eq
 80198c4:	b280      	uxtheq	r0, r0
 80198c6:	4293      	cmp	r3, r2
 80198c8:	d3ed      	bcc.n	80198a6 <get_available_free_slots+0x16>
 80198ca:	bd30      	pop	{r4, r5, pc}
 80198cc:	4610      	mov	r0, r2
 80198ce:	4770      	bx	lr

080198d0 <uxr_seq_num_add>:
 80198d0:	4408      	add	r0, r1
 80198d2:	b280      	uxth	r0, r0
 80198d4:	4770      	bx	lr
 80198d6:	bf00      	nop

080198d8 <uxr_seq_num_sub>:
 80198d8:	1a40      	subs	r0, r0, r1
 80198da:	b280      	uxth	r0, r0
 80198dc:	4770      	bx	lr
 80198de:	bf00      	nop

080198e0 <uxr_seq_num_cmp>:
 80198e0:	4288      	cmp	r0, r1
 80198e2:	d011      	beq.n	8019908 <uxr_seq_num_cmp+0x28>
 80198e4:	d309      	bcc.n	80198fa <uxr_seq_num_cmp+0x1a>
 80198e6:	4288      	cmp	r0, r1
 80198e8:	d910      	bls.n	801990c <uxr_seq_num_cmp+0x2c>
 80198ea:	1a40      	subs	r0, r0, r1
 80198ec:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 80198f0:	bfd4      	ite	le
 80198f2:	2001      	movle	r0, #1
 80198f4:	f04f 30ff 	movgt.w	r0, #4294967295	@ 0xffffffff
 80198f8:	4770      	bx	lr
 80198fa:	1a0b      	subs	r3, r1, r0
 80198fc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8019900:	daf1      	bge.n	80198e6 <uxr_seq_num_cmp+0x6>
 8019902:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8019906:	4770      	bx	lr
 8019908:	2000      	movs	r0, #0
 801990a:	4770      	bx	lr
 801990c:	2001      	movs	r0, #1
 801990e:	4770      	bx	lr

08019910 <rcl_get_default_domain_id>:
 8019910:	b530      	push	{r4, r5, lr}
 8019912:	b083      	sub	sp, #12
 8019914:	2300      	movs	r3, #0
 8019916:	9300      	str	r3, [sp, #0]
 8019918:	b1d0      	cbz	r0, 8019950 <rcl_get_default_domain_id+0x40>
 801991a:	4604      	mov	r4, r0
 801991c:	4669      	mov	r1, sp
 801991e:	4815      	ldr	r0, [pc, #84]	@ (8019974 <rcl_get_default_domain_id+0x64>)
 8019920:	f7fd fd62 	bl	80173e8 <rcutils_get_env>
 8019924:	4602      	mov	r2, r0
 8019926:	b110      	cbz	r0, 801992e <rcl_get_default_domain_id+0x1e>
 8019928:	2001      	movs	r0, #1
 801992a:	b003      	add	sp, #12
 801992c:	bd30      	pop	{r4, r5, pc}
 801992e:	9b00      	ldr	r3, [sp, #0]
 8019930:	b18b      	cbz	r3, 8019956 <rcl_get_default_domain_id+0x46>
 8019932:	7818      	ldrb	r0, [r3, #0]
 8019934:	2800      	cmp	r0, #0
 8019936:	d0f8      	beq.n	801992a <rcl_get_default_domain_id+0x1a>
 8019938:	a901      	add	r1, sp, #4
 801993a:	4618      	mov	r0, r3
 801993c:	9201      	str	r2, [sp, #4]
 801993e:	f000 fe61 	bl	801a604 <strtoul>
 8019942:	4605      	mov	r5, r0
 8019944:	b150      	cbz	r0, 801995c <rcl_get_default_domain_id+0x4c>
 8019946:	1c43      	adds	r3, r0, #1
 8019948:	d00d      	beq.n	8019966 <rcl_get_default_domain_id+0x56>
 801994a:	6025      	str	r5, [r4, #0]
 801994c:	2000      	movs	r0, #0
 801994e:	e7ec      	b.n	801992a <rcl_get_default_domain_id+0x1a>
 8019950:	200b      	movs	r0, #11
 8019952:	b003      	add	sp, #12
 8019954:	bd30      	pop	{r4, r5, pc}
 8019956:	4618      	mov	r0, r3
 8019958:	b003      	add	sp, #12
 801995a:	bd30      	pop	{r4, r5, pc}
 801995c:	9b01      	ldr	r3, [sp, #4]
 801995e:	781b      	ldrb	r3, [r3, #0]
 8019960:	2b00      	cmp	r3, #0
 8019962:	d0f2      	beq.n	801994a <rcl_get_default_domain_id+0x3a>
 8019964:	e7e0      	b.n	8019928 <rcl_get_default_domain_id+0x18>
 8019966:	f001 f98d 	bl	801ac84 <__errno>
 801996a:	6803      	ldr	r3, [r0, #0]
 801996c:	2b22      	cmp	r3, #34	@ 0x22
 801996e:	d1ec      	bne.n	801994a <rcl_get_default_domain_id+0x3a>
 8019970:	e7da      	b.n	8019928 <rcl_get_default_domain_id+0x18>
 8019972:	bf00      	nop
 8019974:	0801dbc8 	.word	0x0801dbc8

08019978 <rcl_expand_topic_name>:
 8019978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801997c:	b08b      	sub	sp, #44	@ 0x2c
 801997e:	9306      	str	r3, [sp, #24]
 8019980:	2800      	cmp	r0, #0
 8019982:	f000 80ad 	beq.w	8019ae0 <rcl_expand_topic_name+0x168>
 8019986:	460e      	mov	r6, r1
 8019988:	2900      	cmp	r1, #0
 801998a:	f000 80a9 	beq.w	8019ae0 <rcl_expand_topic_name+0x168>
 801998e:	4617      	mov	r7, r2
 8019990:	2a00      	cmp	r2, #0
 8019992:	f000 80a5 	beq.w	8019ae0 <rcl_expand_topic_name+0x168>
 8019996:	2b00      	cmp	r3, #0
 8019998:	f000 80a2 	beq.w	8019ae0 <rcl_expand_topic_name+0x168>
 801999c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801999e:	2b00      	cmp	r3, #0
 80199a0:	f000 809e 	beq.w	8019ae0 <rcl_expand_topic_name+0x168>
 80199a4:	2200      	movs	r2, #0
 80199a6:	a909      	add	r1, sp, #36	@ 0x24
 80199a8:	4680      	mov	r8, r0
 80199aa:	f000 fa57 	bl	8019e5c <rcl_validate_topic_name>
 80199ae:	4604      	mov	r4, r0
 80199b0:	2800      	cmp	r0, #0
 80199b2:	f040 8096 	bne.w	8019ae2 <rcl_expand_topic_name+0x16a>
 80199b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80199b8:	2b00      	cmp	r3, #0
 80199ba:	f040 809a 	bne.w	8019af2 <rcl_expand_topic_name+0x17a>
 80199be:	4602      	mov	r2, r0
 80199c0:	a909      	add	r1, sp, #36	@ 0x24
 80199c2:	4630      	mov	r0, r6
 80199c4:	f7fe f94a 	bl	8017c5c <rmw_validate_node_name>
 80199c8:	2800      	cmp	r0, #0
 80199ca:	f040 808e 	bne.w	8019aea <rcl_expand_topic_name+0x172>
 80199ce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80199d0:	2a00      	cmp	r2, #0
 80199d2:	f040 8093 	bne.w	8019afc <rcl_expand_topic_name+0x184>
 80199d6:	a909      	add	r1, sp, #36	@ 0x24
 80199d8:	4638      	mov	r0, r7
 80199da:	f7fe f921 	bl	8017c20 <rmw_validate_namespace>
 80199de:	2800      	cmp	r0, #0
 80199e0:	f040 8083 	bne.w	8019aea <rcl_expand_topic_name+0x172>
 80199e4:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 80199e6:	2c00      	cmp	r4, #0
 80199e8:	f040 80ed 	bne.w	8019bc6 <rcl_expand_topic_name+0x24e>
 80199ec:	217b      	movs	r1, #123	@ 0x7b
 80199ee:	4640      	mov	r0, r8
 80199f0:	f001 f8bc 	bl	801ab6c <strchr>
 80199f4:	f898 3000 	ldrb.w	r3, [r8]
 80199f8:	2b2f      	cmp	r3, #47	@ 0x2f
 80199fa:	4605      	mov	r5, r0
 80199fc:	f000 809e 	beq.w	8019b3c <rcl_expand_topic_name+0x1c4>
 8019a00:	2b7e      	cmp	r3, #126	@ 0x7e
 8019a02:	f040 80a2 	bne.w	8019b4a <rcl_expand_topic_name+0x1d2>
 8019a06:	4638      	mov	r0, r7
 8019a08:	f7e6 fc14 	bl	8000234 <strlen>
 8019a0c:	4a82      	ldr	r2, [pc, #520]	@ (8019c18 <rcl_expand_topic_name+0x2a0>)
 8019a0e:	4b83      	ldr	r3, [pc, #524]	@ (8019c1c <rcl_expand_topic_name+0x2a4>)
 8019a10:	2801      	cmp	r0, #1
 8019a12:	bf18      	it	ne
 8019a14:	4613      	movne	r3, r2
 8019a16:	9302      	str	r3, [sp, #8]
 8019a18:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8019a1a:	9300      	str	r3, [sp, #0]
 8019a1c:	e9cd 7603 	strd	r7, r6, [sp, #12]
 8019a20:	f108 0301 	add.w	r3, r8, #1
 8019a24:	9305      	str	r3, [sp, #20]
 8019a26:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8019a2a:	9301      	str	r3, [sp, #4]
 8019a2c:	ab14      	add	r3, sp, #80	@ 0x50
 8019a2e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8019a30:	f7fd fcf2 	bl	8017418 <rcutils_format_string_limit>
 8019a34:	4682      	mov	sl, r0
 8019a36:	2800      	cmp	r0, #0
 8019a38:	f000 80c7 	beq.w	8019bca <rcl_expand_topic_name+0x252>
 8019a3c:	2d00      	cmp	r5, #0
 8019a3e:	f000 80a2 	beq.w	8019b86 <rcl_expand_topic_name+0x20e>
 8019a42:	217b      	movs	r1, #123	@ 0x7b
 8019a44:	f001 f892 	bl	801ab6c <strchr>
 8019a48:	46d1      	mov	r9, sl
 8019a4a:	4605      	mov	r5, r0
 8019a4c:	9407      	str	r4, [sp, #28]
 8019a4e:	46d3      	mov	fp, sl
 8019a50:	464c      	mov	r4, r9
 8019a52:	2d00      	cmp	r5, #0
 8019a54:	f000 80be 	beq.w	8019bd4 <rcl_expand_topic_name+0x25c>
 8019a58:	217d      	movs	r1, #125	@ 0x7d
 8019a5a:	4620      	mov	r0, r4
 8019a5c:	f001 f886 	bl	801ab6c <strchr>
 8019a60:	eba0 0905 	sub.w	r9, r0, r5
 8019a64:	f109 0a01 	add.w	sl, r9, #1
 8019a68:	486d      	ldr	r0, [pc, #436]	@ (8019c20 <rcl_expand_topic_name+0x2a8>)
 8019a6a:	4652      	mov	r2, sl
 8019a6c:	4629      	mov	r1, r5
 8019a6e:	f001 f88a 	bl	801ab86 <strncmp>
 8019a72:	2800      	cmp	r0, #0
 8019a74:	d067      	beq.n	8019b46 <rcl_expand_topic_name+0x1ce>
 8019a76:	486b      	ldr	r0, [pc, #428]	@ (8019c24 <rcl_expand_topic_name+0x2ac>)
 8019a78:	4652      	mov	r2, sl
 8019a7a:	4629      	mov	r1, r5
 8019a7c:	f001 f883 	bl	801ab86 <strncmp>
 8019a80:	b130      	cbz	r0, 8019a90 <rcl_expand_topic_name+0x118>
 8019a82:	4869      	ldr	r0, [pc, #420]	@ (8019c28 <rcl_expand_topic_name+0x2b0>)
 8019a84:	4652      	mov	r2, sl
 8019a86:	4629      	mov	r1, r5
 8019a88:	f001 f87d 	bl	801ab86 <strncmp>
 8019a8c:	2800      	cmp	r0, #0
 8019a8e:	d137      	bne.n	8019b00 <rcl_expand_topic_name+0x188>
 8019a90:	46b9      	mov	r9, r7
 8019a92:	ab16      	add	r3, sp, #88	@ 0x58
 8019a94:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8019a98:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8019a9c:	ab14      	add	r3, sp, #80	@ 0x50
 8019a9e:	4628      	mov	r0, r5
 8019aa0:	cb0c      	ldmia	r3, {r2, r3}
 8019aa2:	4651      	mov	r1, sl
 8019aa4:	f7fd fdf4 	bl	8017690 <rcutils_strndup>
 8019aa8:	4605      	mov	r5, r0
 8019aaa:	2800      	cmp	r0, #0
 8019aac:	f000 809c 	beq.w	8019be8 <rcl_expand_topic_name+0x270>
 8019ab0:	464a      	mov	r2, r9
 8019ab2:	4620      	mov	r0, r4
 8019ab4:	ab14      	add	r3, sp, #80	@ 0x50
 8019ab6:	4629      	mov	r1, r5
 8019ab8:	f7fd fce8 	bl	801748c <rcutils_repl_str>
 8019abc:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8019abe:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8019ac0:	4604      	mov	r4, r0
 8019ac2:	4628      	mov	r0, r5
 8019ac4:	4798      	blx	r3
 8019ac6:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8019ac8:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8019aca:	4658      	mov	r0, fp
 8019acc:	4798      	blx	r3
 8019ace:	2c00      	cmp	r4, #0
 8019ad0:	d07b      	beq.n	8019bca <rcl_expand_topic_name+0x252>
 8019ad2:	217b      	movs	r1, #123	@ 0x7b
 8019ad4:	4620      	mov	r0, r4
 8019ad6:	f001 f849 	bl	801ab6c <strchr>
 8019ada:	46a3      	mov	fp, r4
 8019adc:	4605      	mov	r5, r0
 8019ade:	e7b8      	b.n	8019a52 <rcl_expand_topic_name+0xda>
 8019ae0:	240b      	movs	r4, #11
 8019ae2:	4620      	mov	r0, r4
 8019ae4:	b00b      	add	sp, #44	@ 0x2c
 8019ae6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019aea:	f7fa ff4b 	bl	8014984 <rcl_convert_rmw_ret_to_rcl_ret>
 8019aee:	4604      	mov	r4, r0
 8019af0:	e7f7      	b.n	8019ae2 <rcl_expand_topic_name+0x16a>
 8019af2:	2467      	movs	r4, #103	@ 0x67
 8019af4:	4620      	mov	r0, r4
 8019af6:	b00b      	add	sp, #44	@ 0x2c
 8019af8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019afc:	24c9      	movs	r4, #201	@ 0xc9
 8019afe:	e7f0      	b.n	8019ae2 <rcl_expand_topic_name+0x16a>
 8019b00:	f109 32ff 	add.w	r2, r9, #4294967295	@ 0xffffffff
 8019b04:	9806      	ldr	r0, [sp, #24]
 8019b06:	1c69      	adds	r1, r5, #1
 8019b08:	f7fd fedc 	bl	80178c4 <rcutils_string_map_getn>
 8019b0c:	4681      	mov	r9, r0
 8019b0e:	2800      	cmp	r0, #0
 8019b10:	d1bf      	bne.n	8019a92 <rcl_expand_topic_name+0x11a>
 8019b12:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8019b14:	aa16      	add	r2, sp, #88	@ 0x58
 8019b16:	6018      	str	r0, [r3, #0]
 8019b18:	ca07      	ldmia	r2, {r0, r1, r2}
 8019b1a:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8019b1e:	ab14      	add	r3, sp, #80	@ 0x50
 8019b20:	cb0c      	ldmia	r3, {r2, r3}
 8019b22:	4651      	mov	r1, sl
 8019b24:	4628      	mov	r0, r5
 8019b26:	f7fd fdb3 	bl	8017690 <rcutils_strndup>
 8019b2a:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8019b2c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8019b2e:	4798      	blx	r3
 8019b30:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8019b32:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8019b34:	4658      	mov	r0, fp
 8019b36:	2469      	movs	r4, #105	@ 0x69
 8019b38:	4798      	blx	r3
 8019b3a:	e7d2      	b.n	8019ae2 <rcl_expand_topic_name+0x16a>
 8019b3c:	2800      	cmp	r0, #0
 8019b3e:	d05b      	beq.n	8019bf8 <rcl_expand_topic_name+0x280>
 8019b40:	46c1      	mov	r9, r8
 8019b42:	46a2      	mov	sl, r4
 8019b44:	e782      	b.n	8019a4c <rcl_expand_topic_name+0xd4>
 8019b46:	46b1      	mov	r9, r6
 8019b48:	e7a3      	b.n	8019a92 <rcl_expand_topic_name+0x11a>
 8019b4a:	2800      	cmp	r0, #0
 8019b4c:	d1f8      	bne.n	8019b40 <rcl_expand_topic_name+0x1c8>
 8019b4e:	4638      	mov	r0, r7
 8019b50:	f7e6 fb70 	bl	8000234 <strlen>
 8019b54:	4a35      	ldr	r2, [pc, #212]	@ (8019c2c <rcl_expand_topic_name+0x2b4>)
 8019b56:	4b36      	ldr	r3, [pc, #216]	@ (8019c30 <rcl_expand_topic_name+0x2b8>)
 8019b58:	f8cd 8010 	str.w	r8, [sp, #16]
 8019b5c:	2801      	cmp	r0, #1
 8019b5e:	bf18      	it	ne
 8019b60:	4613      	movne	r3, r2
 8019b62:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8019b66:	e9cd 1301 	strd	r1, r3, [sp, #4]
 8019b6a:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8019b6c:	9703      	str	r7, [sp, #12]
 8019b6e:	9200      	str	r2, [sp, #0]
 8019b70:	ab14      	add	r3, sp, #80	@ 0x50
 8019b72:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8019b74:	f7fd fc50 	bl	8017418 <rcutils_format_string_limit>
 8019b78:	4682      	mov	sl, r0
 8019b7a:	4653      	mov	r3, sl
 8019b7c:	b32b      	cbz	r3, 8019bca <rcl_expand_topic_name+0x252>
 8019b7e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8019b80:	f8c3 a000 	str.w	sl, [r3]
 8019b84:	e7ad      	b.n	8019ae2 <rcl_expand_topic_name+0x16a>
 8019b86:	f89a 3000 	ldrb.w	r3, [sl]
 8019b8a:	2b2f      	cmp	r3, #47	@ 0x2f
 8019b8c:	d0f7      	beq.n	8019b7e <rcl_expand_topic_name+0x206>
 8019b8e:	4638      	mov	r0, r7
 8019b90:	f7e6 fb50 	bl	8000234 <strlen>
 8019b94:	4a25      	ldr	r2, [pc, #148]	@ (8019c2c <rcl_expand_topic_name+0x2b4>)
 8019b96:	4b26      	ldr	r3, [pc, #152]	@ (8019c30 <rcl_expand_topic_name+0x2b8>)
 8019b98:	f8cd a010 	str.w	sl, [sp, #16]
 8019b9c:	2801      	cmp	r0, #1
 8019b9e:	bf18      	it	ne
 8019ba0:	4613      	movne	r3, r2
 8019ba2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8019ba6:	e9cd 1301 	strd	r1, r3, [sp, #4]
 8019baa:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8019bac:	9703      	str	r7, [sp, #12]
 8019bae:	9200      	str	r2, [sp, #0]
 8019bb0:	ab14      	add	r3, sp, #80	@ 0x50
 8019bb2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8019bb4:	f7fd fc30 	bl	8017418 <rcutils_format_string_limit>
 8019bb8:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8019bba:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8019bbc:	4605      	mov	r5, r0
 8019bbe:	4650      	mov	r0, sl
 8019bc0:	4798      	blx	r3
 8019bc2:	46aa      	mov	sl, r5
 8019bc4:	e7d9      	b.n	8019b7a <rcl_expand_topic_name+0x202>
 8019bc6:	24ca      	movs	r4, #202	@ 0xca
 8019bc8:	e78b      	b.n	8019ae2 <rcl_expand_topic_name+0x16a>
 8019bca:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8019bcc:	2300      	movs	r3, #0
 8019bce:	6013      	str	r3, [r2, #0]
 8019bd0:	240a      	movs	r4, #10
 8019bd2:	e786      	b.n	8019ae2 <rcl_expand_topic_name+0x16a>
 8019bd4:	465b      	mov	r3, fp
 8019bd6:	9c07      	ldr	r4, [sp, #28]
 8019bd8:	46da      	mov	sl, fp
 8019bda:	2b00      	cmp	r3, #0
 8019bdc:	d1d3      	bne.n	8019b86 <rcl_expand_topic_name+0x20e>
 8019bde:	f898 3000 	ldrb.w	r3, [r8]
 8019be2:	2b2f      	cmp	r3, #47	@ 0x2f
 8019be4:	d0cb      	beq.n	8019b7e <rcl_expand_topic_name+0x206>
 8019be6:	e7b2      	b.n	8019b4e <rcl_expand_topic_name+0x1d6>
 8019be8:	e9dd 1218 	ldrd	r1, r2, [sp, #96]	@ 0x60
 8019bec:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8019bee:	6015      	str	r5, [r2, #0]
 8019bf0:	4658      	mov	r0, fp
 8019bf2:	4798      	blx	r3
 8019bf4:	240a      	movs	r4, #10
 8019bf6:	e774      	b.n	8019ae2 <rcl_expand_topic_name+0x16a>
 8019bf8:	ab17      	add	r3, sp, #92	@ 0x5c
 8019bfa:	e893 0003 	ldmia.w	r3, {r0, r1}
 8019bfe:	e88d 0003 	stmia.w	sp, {r0, r1}
 8019c02:	ab14      	add	r3, sp, #80	@ 0x50
 8019c04:	cb0e      	ldmia	r3, {r1, r2, r3}
 8019c06:	4640      	mov	r0, r8
 8019c08:	f7fd fd20 	bl	801764c <rcutils_strdup>
 8019c0c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8019c0e:	2800      	cmp	r0, #0
 8019c10:	6018      	str	r0, [r3, #0]
 8019c12:	bf08      	it	eq
 8019c14:	240a      	moveq	r4, #10
 8019c16:	e764      	b.n	8019ae2 <rcl_expand_topic_name+0x16a>
 8019c18:	0801dbd8 	.word	0x0801dbd8
 8019c1c:	0801d6e8 	.word	0x0801d6e8
 8019c20:	0801dbe0 	.word	0x0801dbe0
 8019c24:	0801dbe8 	.word	0x0801dbe8
 8019c28:	0801dbf0 	.word	0x0801dbf0
 8019c2c:	0801d6d4 	.word	0x0801d6d4
 8019c30:	0801d6f8 	.word	0x0801d6f8

08019c34 <rcl_get_default_topic_name_substitutions>:
 8019c34:	2800      	cmp	r0, #0
 8019c36:	bf0c      	ite	eq
 8019c38:	200b      	moveq	r0, #11
 8019c3a:	2000      	movne	r0, #0
 8019c3c:	4770      	bx	lr
 8019c3e:	bf00      	nop

08019c40 <rcl_get_zero_initialized_guard_condition>:
 8019c40:	4a03      	ldr	r2, [pc, #12]	@ (8019c50 <rcl_get_zero_initialized_guard_condition+0x10>)
 8019c42:	4603      	mov	r3, r0
 8019c44:	e892 0003 	ldmia.w	r2, {r0, r1}
 8019c48:	e883 0003 	stmia.w	r3, {r0, r1}
 8019c4c:	4618      	mov	r0, r3
 8019c4e:	4770      	bx	lr
 8019c50:	0801e2dc 	.word	0x0801e2dc

08019c54 <rcl_guard_condition_init>:
 8019c54:	b082      	sub	sp, #8
 8019c56:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019c58:	b087      	sub	sp, #28
 8019c5a:	ac0c      	add	r4, sp, #48	@ 0x30
 8019c5c:	e884 000c 	stmia.w	r4, {r2, r3}
 8019c60:	46a6      	mov	lr, r4
 8019c62:	460d      	mov	r5, r1
 8019c64:	4604      	mov	r4, r0
 8019c66:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8019c6a:	f10d 0c04 	add.w	ip, sp, #4
 8019c6e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8019c72:	f8de 3000 	ldr.w	r3, [lr]
 8019c76:	f8cc 3000 	str.w	r3, [ip]
 8019c7a:	a801      	add	r0, sp, #4
 8019c7c:	f7f5 fa76 	bl	800f16c <rcutils_allocator_is_valid>
 8019c80:	b338      	cbz	r0, 8019cd2 <rcl_guard_condition_init+0x7e>
 8019c82:	b334      	cbz	r4, 8019cd2 <rcl_guard_condition_init+0x7e>
 8019c84:	6866      	ldr	r6, [r4, #4]
 8019c86:	b9ee      	cbnz	r6, 8019cc4 <rcl_guard_condition_init+0x70>
 8019c88:	b31d      	cbz	r5, 8019cd2 <rcl_guard_condition_init+0x7e>
 8019c8a:	4628      	mov	r0, r5
 8019c8c:	f7fa fe98 	bl	80149c0 <rcl_context_is_valid>
 8019c90:	b308      	cbz	r0, 8019cd6 <rcl_guard_condition_init+0x82>
 8019c92:	9b01      	ldr	r3, [sp, #4]
 8019c94:	9905      	ldr	r1, [sp, #20]
 8019c96:	201c      	movs	r0, #28
 8019c98:	4798      	blx	r3
 8019c9a:	4607      	mov	r7, r0
 8019c9c:	6060      	str	r0, [r4, #4]
 8019c9e:	b310      	cbz	r0, 8019ce6 <rcl_guard_condition_init+0x92>
 8019ca0:	6828      	ldr	r0, [r5, #0]
 8019ca2:	3028      	adds	r0, #40	@ 0x28
 8019ca4:	f000 f9d4 	bl	801a050 <rmw_create_guard_condition>
 8019ca8:	6038      	str	r0, [r7, #0]
 8019caa:	6860      	ldr	r0, [r4, #4]
 8019cac:	6805      	ldr	r5, [r0, #0]
 8019cae:	b1a5      	cbz	r5, 8019cda <rcl_guard_condition_init+0x86>
 8019cb0:	2301      	movs	r3, #1
 8019cb2:	ac01      	add	r4, sp, #4
 8019cb4:	7103      	strb	r3, [r0, #4]
 8019cb6:	f100 0708 	add.w	r7, r0, #8
 8019cba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019cbc:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8019cbe:	6823      	ldr	r3, [r4, #0]
 8019cc0:	603b      	str	r3, [r7, #0]
 8019cc2:	e000      	b.n	8019cc6 <rcl_guard_condition_init+0x72>
 8019cc4:	2664      	movs	r6, #100	@ 0x64
 8019cc6:	4630      	mov	r0, r6
 8019cc8:	b007      	add	sp, #28
 8019cca:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8019cce:	b002      	add	sp, #8
 8019cd0:	4770      	bx	lr
 8019cd2:	260b      	movs	r6, #11
 8019cd4:	e7f7      	b.n	8019cc6 <rcl_guard_condition_init+0x72>
 8019cd6:	2665      	movs	r6, #101	@ 0x65
 8019cd8:	e7f5      	b.n	8019cc6 <rcl_guard_condition_init+0x72>
 8019cda:	9b02      	ldr	r3, [sp, #8]
 8019cdc:	9905      	ldr	r1, [sp, #20]
 8019cde:	4798      	blx	r3
 8019ce0:	2601      	movs	r6, #1
 8019ce2:	6065      	str	r5, [r4, #4]
 8019ce4:	e7ef      	b.n	8019cc6 <rcl_guard_condition_init+0x72>
 8019ce6:	260a      	movs	r6, #10
 8019ce8:	e7ed      	b.n	8019cc6 <rcl_guard_condition_init+0x72>
 8019cea:	bf00      	nop

08019cec <rcl_guard_condition_init_from_rmw>:
 8019cec:	b082      	sub	sp, #8
 8019cee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019cf2:	b086      	sub	sp, #24
 8019cf4:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 8019cf8:	4604      	mov	r4, r0
 8019cfa:	f84c 3f04 	str.w	r3, [ip, #4]!
 8019cfe:	460e      	mov	r6, r1
 8019d00:	4617      	mov	r7, r2
 8019d02:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8019d06:	f10d 0e04 	add.w	lr, sp, #4
 8019d0a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8019d0e:	f8dc 3000 	ldr.w	r3, [ip]
 8019d12:	f8ce 3000 	str.w	r3, [lr]
 8019d16:	a801      	add	r0, sp, #4
 8019d18:	f7f5 fa28 	bl	800f16c <rcutils_allocator_is_valid>
 8019d1c:	b350      	cbz	r0, 8019d74 <rcl_guard_condition_init_from_rmw+0x88>
 8019d1e:	b34c      	cbz	r4, 8019d74 <rcl_guard_condition_init_from_rmw+0x88>
 8019d20:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8019d24:	f1b8 0f00 	cmp.w	r8, #0
 8019d28:	d11e      	bne.n	8019d68 <rcl_guard_condition_init_from_rmw+0x7c>
 8019d2a:	b31f      	cbz	r7, 8019d74 <rcl_guard_condition_init_from_rmw+0x88>
 8019d2c:	4638      	mov	r0, r7
 8019d2e:	f7fa fe47 	bl	80149c0 <rcl_context_is_valid>
 8019d32:	b328      	cbz	r0, 8019d80 <rcl_guard_condition_init_from_rmw+0x94>
 8019d34:	9b01      	ldr	r3, [sp, #4]
 8019d36:	9905      	ldr	r1, [sp, #20]
 8019d38:	201c      	movs	r0, #28
 8019d3a:	4798      	blx	r3
 8019d3c:	4605      	mov	r5, r0
 8019d3e:	6060      	str	r0, [r4, #4]
 8019d40:	b358      	cbz	r0, 8019d9a <rcl_guard_condition_init_from_rmw+0xae>
 8019d42:	b1fe      	cbz	r6, 8019d84 <rcl_guard_condition_init_from_rmw+0x98>
 8019d44:	6006      	str	r6, [r0, #0]
 8019d46:	f880 8004 	strb.w	r8, [r0, #4]
 8019d4a:	ac01      	add	r4, sp, #4
 8019d4c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019d4e:	f105 0c08 	add.w	ip, r5, #8
 8019d52:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8019d56:	6823      	ldr	r3, [r4, #0]
 8019d58:	f8cc 3000 	str.w	r3, [ip]
 8019d5c:	2000      	movs	r0, #0
 8019d5e:	b006      	add	sp, #24
 8019d60:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019d64:	b002      	add	sp, #8
 8019d66:	4770      	bx	lr
 8019d68:	2064      	movs	r0, #100	@ 0x64
 8019d6a:	b006      	add	sp, #24
 8019d6c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019d70:	b002      	add	sp, #8
 8019d72:	4770      	bx	lr
 8019d74:	200b      	movs	r0, #11
 8019d76:	b006      	add	sp, #24
 8019d78:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019d7c:	b002      	add	sp, #8
 8019d7e:	4770      	bx	lr
 8019d80:	2065      	movs	r0, #101	@ 0x65
 8019d82:	e7f2      	b.n	8019d6a <rcl_guard_condition_init_from_rmw+0x7e>
 8019d84:	6838      	ldr	r0, [r7, #0]
 8019d86:	3028      	adds	r0, #40	@ 0x28
 8019d88:	f000 f962 	bl	801a050 <rmw_create_guard_condition>
 8019d8c:	6028      	str	r0, [r5, #0]
 8019d8e:	6865      	ldr	r5, [r4, #4]
 8019d90:	682e      	ldr	r6, [r5, #0]
 8019d92:	b126      	cbz	r6, 8019d9e <rcl_guard_condition_init_from_rmw+0xb2>
 8019d94:	2301      	movs	r3, #1
 8019d96:	712b      	strb	r3, [r5, #4]
 8019d98:	e7d7      	b.n	8019d4a <rcl_guard_condition_init_from_rmw+0x5e>
 8019d9a:	200a      	movs	r0, #10
 8019d9c:	e7e5      	b.n	8019d6a <rcl_guard_condition_init_from_rmw+0x7e>
 8019d9e:	4628      	mov	r0, r5
 8019da0:	9b02      	ldr	r3, [sp, #8]
 8019da2:	9905      	ldr	r1, [sp, #20]
 8019da4:	4798      	blx	r3
 8019da6:	6066      	str	r6, [r4, #4]
 8019da8:	2001      	movs	r0, #1
 8019daa:	e7de      	b.n	8019d6a <rcl_guard_condition_init_from_rmw+0x7e>

08019dac <rcl_guard_condition_fini>:
 8019dac:	b570      	push	{r4, r5, r6, lr}
 8019dae:	b082      	sub	sp, #8
 8019db0:	b1f0      	cbz	r0, 8019df0 <rcl_guard_condition_fini+0x44>
 8019db2:	6843      	ldr	r3, [r0, #4]
 8019db4:	4604      	mov	r4, r0
 8019db6:	b163      	cbz	r3, 8019dd2 <rcl_guard_condition_fini+0x26>
 8019db8:	6818      	ldr	r0, [r3, #0]
 8019dba:	68de      	ldr	r6, [r3, #12]
 8019dbc:	6999      	ldr	r1, [r3, #24]
 8019dbe:	b160      	cbz	r0, 8019dda <rcl_guard_condition_fini+0x2e>
 8019dc0:	791d      	ldrb	r5, [r3, #4]
 8019dc2:	b965      	cbnz	r5, 8019dde <rcl_guard_condition_fini+0x32>
 8019dc4:	4618      	mov	r0, r3
 8019dc6:	47b0      	blx	r6
 8019dc8:	2300      	movs	r3, #0
 8019dca:	4628      	mov	r0, r5
 8019dcc:	6063      	str	r3, [r4, #4]
 8019dce:	b002      	add	sp, #8
 8019dd0:	bd70      	pop	{r4, r5, r6, pc}
 8019dd2:	461d      	mov	r5, r3
 8019dd4:	4628      	mov	r0, r5
 8019dd6:	b002      	add	sp, #8
 8019dd8:	bd70      	pop	{r4, r5, r6, pc}
 8019dda:	4605      	mov	r5, r0
 8019ddc:	e7f2      	b.n	8019dc4 <rcl_guard_condition_fini+0x18>
 8019dde:	9101      	str	r1, [sp, #4]
 8019de0:	f000 f94a 	bl	801a078 <rmw_destroy_guard_condition>
 8019de4:	1e05      	subs	r5, r0, #0
 8019de6:	6863      	ldr	r3, [r4, #4]
 8019de8:	9901      	ldr	r1, [sp, #4]
 8019dea:	bf18      	it	ne
 8019dec:	2501      	movne	r5, #1
 8019dee:	e7e9      	b.n	8019dc4 <rcl_guard_condition_fini+0x18>
 8019df0:	250b      	movs	r5, #11
 8019df2:	4628      	mov	r0, r5
 8019df4:	b002      	add	sp, #8
 8019df6:	bd70      	pop	{r4, r5, r6, pc}

08019df8 <rcl_guard_condition_get_default_options>:
 8019df8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019dfa:	b087      	sub	sp, #28
 8019dfc:	4606      	mov	r6, r0
 8019dfe:	4668      	mov	r0, sp
 8019e00:	f7f5 f9a6 	bl	800f150 <rcutils_get_default_allocator>
 8019e04:	4b09      	ldr	r3, [pc, #36]	@ (8019e2c <rcl_guard_condition_get_default_options+0x34>)
 8019e06:	46ee      	mov	lr, sp
 8019e08:	469c      	mov	ip, r3
 8019e0a:	461d      	mov	r5, r3
 8019e0c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8019e10:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8019e14:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019e16:	4634      	mov	r4, r6
 8019e18:	f8de 7000 	ldr.w	r7, [lr]
 8019e1c:	f8cc 7000 	str.w	r7, [ip]
 8019e20:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019e22:	4630      	mov	r0, r6
 8019e24:	6027      	str	r7, [r4, #0]
 8019e26:	b007      	add	sp, #28
 8019e28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019e2a:	bf00      	nop
 8019e2c:	2000b4ac 	.word	0x2000b4ac

08019e30 <rcl_trigger_guard_condition>:
 8019e30:	b148      	cbz	r0, 8019e46 <rcl_trigger_guard_condition+0x16>
 8019e32:	b508      	push	{r3, lr}
 8019e34:	6843      	ldr	r3, [r0, #4]
 8019e36:	b143      	cbz	r3, 8019e4a <rcl_trigger_guard_condition+0x1a>
 8019e38:	6818      	ldr	r0, [r3, #0]
 8019e3a:	f000 f931 	bl	801a0a0 <rmw_trigger_guard_condition>
 8019e3e:	3800      	subs	r0, #0
 8019e40:	bf18      	it	ne
 8019e42:	2001      	movne	r0, #1
 8019e44:	bd08      	pop	{r3, pc}
 8019e46:	200b      	movs	r0, #11
 8019e48:	4770      	bx	lr
 8019e4a:	200b      	movs	r0, #11
 8019e4c:	bd08      	pop	{r3, pc}
 8019e4e:	bf00      	nop

08019e50 <rcl_guard_condition_get_rmw_handle>:
 8019e50:	b110      	cbz	r0, 8019e58 <rcl_guard_condition_get_rmw_handle+0x8>
 8019e52:	6840      	ldr	r0, [r0, #4]
 8019e54:	b100      	cbz	r0, 8019e58 <rcl_guard_condition_get_rmw_handle+0x8>
 8019e56:	6800      	ldr	r0, [r0, #0]
 8019e58:	4770      	bx	lr
 8019e5a:	bf00      	nop

08019e5c <rcl_validate_topic_name>:
 8019e5c:	2800      	cmp	r0, #0
 8019e5e:	d07a      	beq.n	8019f56 <rcl_validate_topic_name+0xfa>
 8019e60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019e64:	460e      	mov	r6, r1
 8019e66:	2900      	cmp	r1, #0
 8019e68:	d07c      	beq.n	8019f64 <rcl_validate_topic_name+0x108>
 8019e6a:	4617      	mov	r7, r2
 8019e6c:	4605      	mov	r5, r0
 8019e6e:	f7e6 f9e1 	bl	8000234 <strlen>
 8019e72:	b1b0      	cbz	r0, 8019ea2 <rcl_validate_topic_name+0x46>
 8019e74:	f895 9000 	ldrb.w	r9, [r5]
 8019e78:	f8df c180 	ldr.w	ip, [pc, #384]	@ 8019ffc <rcl_validate_topic_name+0x1a0>
 8019e7c:	f81c 3009 	ldrb.w	r3, [ip, r9]
 8019e80:	f013 0304 	ands.w	r3, r3, #4
 8019e84:	d169      	bne.n	8019f5a <rcl_validate_topic_name+0xfe>
 8019e86:	f100 38ff 	add.w	r8, r0, #4294967295	@ 0xffffffff
 8019e8a:	f815 2008 	ldrb.w	r2, [r5, r8]
 8019e8e:	2a2f      	cmp	r2, #47	@ 0x2f
 8019e90:	d10e      	bne.n	8019eb0 <rcl_validate_topic_name+0x54>
 8019e92:	2202      	movs	r2, #2
 8019e94:	6032      	str	r2, [r6, #0]
 8019e96:	b36f      	cbz	r7, 8019ef4 <rcl_validate_topic_name+0x98>
 8019e98:	f8c7 8000 	str.w	r8, [r7]
 8019e9c:	4618      	mov	r0, r3
 8019e9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019ea2:	2301      	movs	r3, #1
 8019ea4:	6033      	str	r3, [r6, #0]
 8019ea6:	b32f      	cbz	r7, 8019ef4 <rcl_validate_topic_name+0x98>
 8019ea8:	2000      	movs	r0, #0
 8019eaa:	6038      	str	r0, [r7, #0]
 8019eac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019eb0:	f105 3aff 	add.w	sl, r5, #4294967295	@ 0xffffffff
 8019eb4:	461c      	mov	r4, r3
 8019eb6:	4619      	mov	r1, r3
 8019eb8:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 8019ebc:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8019ec0:	f1be 0f09 	cmp.w	lr, #9
 8019ec4:	d919      	bls.n	8019efa <rcl_validate_topic_name+0x9e>
 8019ec6:	f022 0e20 	bic.w	lr, r2, #32
 8019eca:	f1ae 0e41 	sub.w	lr, lr, #65	@ 0x41
 8019ece:	f1be 0f19 	cmp.w	lr, #25
 8019ed2:	d912      	bls.n	8019efa <rcl_validate_topic_name+0x9e>
 8019ed4:	2a5f      	cmp	r2, #95	@ 0x5f
 8019ed6:	d019      	beq.n	8019f0c <rcl_validate_topic_name+0xb0>
 8019ed8:	2a2f      	cmp	r2, #47	@ 0x2f
 8019eda:	d051      	beq.n	8019f80 <rcl_validate_topic_name+0x124>
 8019edc:	2a7e      	cmp	r2, #126	@ 0x7e
 8019ede:	d048      	beq.n	8019f72 <rcl_validate_topic_name+0x116>
 8019ee0:	2a7b      	cmp	r2, #123	@ 0x7b
 8019ee2:	d054      	beq.n	8019f8e <rcl_validate_topic_name+0x132>
 8019ee4:	2a7d      	cmp	r2, #125	@ 0x7d
 8019ee6:	d161      	bne.n	8019fac <rcl_validate_topic_name+0x150>
 8019ee8:	2c00      	cmp	r4, #0
 8019eea:	d155      	bne.n	8019f98 <rcl_validate_topic_name+0x13c>
 8019eec:	2305      	movs	r3, #5
 8019eee:	6033      	str	r3, [r6, #0]
 8019ef0:	b107      	cbz	r7, 8019ef4 <rcl_validate_topic_name+0x98>
 8019ef2:	6039      	str	r1, [r7, #0]
 8019ef4:	2000      	movs	r0, #0
 8019ef6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019efa:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8019efe:	0752      	lsls	r2, r2, #29
 8019f00:	d504      	bpl.n	8019f0c <rcl_validate_topic_name+0xb0>
 8019f02:	b11c      	cbz	r4, 8019f0c <rcl_validate_topic_name+0xb0>
 8019f04:	b111      	cbz	r1, 8019f0c <rcl_validate_topic_name+0xb0>
 8019f06:	1e4a      	subs	r2, r1, #1
 8019f08:	429a      	cmp	r2, r3
 8019f0a:	d02d      	beq.n	8019f68 <rcl_validate_topic_name+0x10c>
 8019f0c:	3101      	adds	r1, #1
 8019f0e:	4288      	cmp	r0, r1
 8019f10:	d1d2      	bne.n	8019eb8 <rcl_validate_topic_name+0x5c>
 8019f12:	2c00      	cmp	r4, #0
 8019f14:	d145      	bne.n	8019fa2 <rcl_validate_topic_name+0x146>
 8019f16:	f1b9 0f7e 	cmp.w	r9, #126	@ 0x7e
 8019f1a:	d04f      	beq.n	8019fbc <rcl_validate_topic_name+0x160>
 8019f1c:	4620      	mov	r0, r4
 8019f1e:	2301      	movs	r3, #1
 8019f20:	e006      	b.n	8019f30 <rcl_validate_topic_name+0xd4>
 8019f22:	428b      	cmp	r3, r1
 8019f24:	f105 0501 	add.w	r5, r5, #1
 8019f28:	f103 0201 	add.w	r2, r3, #1
 8019f2c:	d236      	bcs.n	8019f9c <rcl_validate_topic_name+0x140>
 8019f2e:	4613      	mov	r3, r2
 8019f30:	4580      	cmp	r8, r0
 8019f32:	f100 0001 	add.w	r0, r0, #1
 8019f36:	d0f4      	beq.n	8019f22 <rcl_validate_topic_name+0xc6>
 8019f38:	782a      	ldrb	r2, [r5, #0]
 8019f3a:	2a2f      	cmp	r2, #47	@ 0x2f
 8019f3c:	d1f1      	bne.n	8019f22 <rcl_validate_topic_name+0xc6>
 8019f3e:	786a      	ldrb	r2, [r5, #1]
 8019f40:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8019f44:	0754      	lsls	r4, r2, #29
 8019f46:	d5ec      	bpl.n	8019f22 <rcl_validate_topic_name+0xc6>
 8019f48:	2204      	movs	r2, #4
 8019f4a:	6032      	str	r2, [r6, #0]
 8019f4c:	2f00      	cmp	r7, #0
 8019f4e:	d0d1      	beq.n	8019ef4 <rcl_validate_topic_name+0x98>
 8019f50:	603b      	str	r3, [r7, #0]
 8019f52:	2000      	movs	r0, #0
 8019f54:	e7aa      	b.n	8019eac <rcl_validate_topic_name+0x50>
 8019f56:	200b      	movs	r0, #11
 8019f58:	4770      	bx	lr
 8019f5a:	2304      	movs	r3, #4
 8019f5c:	6033      	str	r3, [r6, #0]
 8019f5e:	2f00      	cmp	r7, #0
 8019f60:	d1a2      	bne.n	8019ea8 <rcl_validate_topic_name+0x4c>
 8019f62:	e7c7      	b.n	8019ef4 <rcl_validate_topic_name+0x98>
 8019f64:	200b      	movs	r0, #11
 8019f66:	e7a1      	b.n	8019eac <rcl_validate_topic_name+0x50>
 8019f68:	2309      	movs	r3, #9
 8019f6a:	6033      	str	r3, [r6, #0]
 8019f6c:	2f00      	cmp	r7, #0
 8019f6e:	d1c0      	bne.n	8019ef2 <rcl_validate_topic_name+0x96>
 8019f70:	e7c0      	b.n	8019ef4 <rcl_validate_topic_name+0x98>
 8019f72:	2900      	cmp	r1, #0
 8019f74:	d0ca      	beq.n	8019f0c <rcl_validate_topic_name+0xb0>
 8019f76:	2306      	movs	r3, #6
 8019f78:	6033      	str	r3, [r6, #0]
 8019f7a:	2f00      	cmp	r7, #0
 8019f7c:	d1b9      	bne.n	8019ef2 <rcl_validate_topic_name+0x96>
 8019f7e:	e7b9      	b.n	8019ef4 <rcl_validate_topic_name+0x98>
 8019f80:	2c00      	cmp	r4, #0
 8019f82:	d0c3      	beq.n	8019f0c <rcl_validate_topic_name+0xb0>
 8019f84:	2308      	movs	r3, #8
 8019f86:	6033      	str	r3, [r6, #0]
 8019f88:	2f00      	cmp	r7, #0
 8019f8a:	d1b2      	bne.n	8019ef2 <rcl_validate_topic_name+0x96>
 8019f8c:	e7b2      	b.n	8019ef4 <rcl_validate_topic_name+0x98>
 8019f8e:	2c00      	cmp	r4, #0
 8019f90:	d1f8      	bne.n	8019f84 <rcl_validate_topic_name+0x128>
 8019f92:	460b      	mov	r3, r1
 8019f94:	2401      	movs	r4, #1
 8019f96:	e7b9      	b.n	8019f0c <rcl_validate_topic_name+0xb0>
 8019f98:	2400      	movs	r4, #0
 8019f9a:	e7b7      	b.n	8019f0c <rcl_validate_topic_name+0xb0>
 8019f9c:	2000      	movs	r0, #0
 8019f9e:	6030      	str	r0, [r6, #0]
 8019fa0:	e784      	b.n	8019eac <rcl_validate_topic_name+0x50>
 8019fa2:	2205      	movs	r2, #5
 8019fa4:	6032      	str	r2, [r6, #0]
 8019fa6:	2f00      	cmp	r7, #0
 8019fa8:	d1d2      	bne.n	8019f50 <rcl_validate_topic_name+0xf4>
 8019faa:	e7a3      	b.n	8019ef4 <rcl_validate_topic_name+0x98>
 8019fac:	2c00      	cmp	r4, #0
 8019fae:	bf14      	ite	ne
 8019fb0:	2308      	movne	r3, #8
 8019fb2:	2303      	moveq	r3, #3
 8019fb4:	6033      	str	r3, [r6, #0]
 8019fb6:	2f00      	cmp	r7, #0
 8019fb8:	d19b      	bne.n	8019ef2 <rcl_validate_topic_name+0x96>
 8019fba:	e79b      	b.n	8019ef4 <rcl_validate_topic_name+0x98>
 8019fbc:	2301      	movs	r3, #1
 8019fbe:	e00a      	b.n	8019fd6 <rcl_validate_topic_name+0x17a>
 8019fc0:	2c01      	cmp	r4, #1
 8019fc2:	d013      	beq.n	8019fec <rcl_validate_topic_name+0x190>
 8019fc4:	4299      	cmp	r1, r3
 8019fc6:	f104 0401 	add.w	r4, r4, #1
 8019fca:	f105 0501 	add.w	r5, r5, #1
 8019fce:	f103 0201 	add.w	r2, r3, #1
 8019fd2:	d9e3      	bls.n	8019f9c <rcl_validate_topic_name+0x140>
 8019fd4:	4613      	mov	r3, r2
 8019fd6:	45a0      	cmp	r8, r4
 8019fd8:	d0f4      	beq.n	8019fc4 <rcl_validate_topic_name+0x168>
 8019fda:	782a      	ldrb	r2, [r5, #0]
 8019fdc:	2a2f      	cmp	r2, #47	@ 0x2f
 8019fde:	d1ef      	bne.n	8019fc0 <rcl_validate_topic_name+0x164>
 8019fe0:	786a      	ldrb	r2, [r5, #1]
 8019fe2:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8019fe6:	0752      	lsls	r2, r2, #29
 8019fe8:	d5ec      	bpl.n	8019fc4 <rcl_validate_topic_name+0x168>
 8019fea:	e7ad      	b.n	8019f48 <rcl_validate_topic_name+0xec>
 8019fec:	2307      	movs	r3, #7
 8019fee:	6033      	str	r3, [r6, #0]
 8019ff0:	2f00      	cmp	r7, #0
 8019ff2:	f43f af7f 	beq.w	8019ef4 <rcl_validate_topic_name+0x98>
 8019ff6:	603c      	str	r4, [r7, #0]
 8019ff8:	2000      	movs	r0, #0
 8019ffa:	e757      	b.n	8019eac <rcl_validate_topic_name+0x50>
 8019ffc:	0801e3c3 	.word	0x0801e3c3

0801a000 <rcutils_string_array_fini>:
 801a000:	b320      	cbz	r0, 801a04c <rcutils_string_array_fini+0x4c>
 801a002:	b570      	push	{r4, r5, r6, lr}
 801a004:	4604      	mov	r4, r0
 801a006:	6840      	ldr	r0, [r0, #4]
 801a008:	b1d8      	cbz	r0, 801a042 <rcutils_string_array_fini+0x42>
 801a00a:	f104 0008 	add.w	r0, r4, #8
 801a00e:	f7f5 f8ad 	bl	800f16c <rcutils_allocator_is_valid>
 801a012:	b1b8      	cbz	r0, 801a044 <rcutils_string_array_fini+0x44>
 801a014:	6823      	ldr	r3, [r4, #0]
 801a016:	b1bb      	cbz	r3, 801a048 <rcutils_string_array_fini+0x48>
 801a018:	2500      	movs	r5, #0
 801a01a:	6860      	ldr	r0, [r4, #4]
 801a01c:	462e      	mov	r6, r5
 801a01e:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 801a022:	68e3      	ldr	r3, [r4, #12]
 801a024:	69a1      	ldr	r1, [r4, #24]
 801a026:	4798      	blx	r3
 801a028:	e9d4 3000 	ldrd	r3, r0, [r4]
 801a02c:	f840 6025 	str.w	r6, [r0, r5, lsl #2]
 801a030:	3501      	adds	r5, #1
 801a032:	429d      	cmp	r5, r3
 801a034:	d3f3      	bcc.n	801a01e <rcutils_string_array_fini+0x1e>
 801a036:	68e3      	ldr	r3, [r4, #12]
 801a038:	69a1      	ldr	r1, [r4, #24]
 801a03a:	4798      	blx	r3
 801a03c:	2000      	movs	r0, #0
 801a03e:	e9c4 0000 	strd	r0, r0, [r4]
 801a042:	bd70      	pop	{r4, r5, r6, pc}
 801a044:	200b      	movs	r0, #11
 801a046:	bd70      	pop	{r4, r5, r6, pc}
 801a048:	6860      	ldr	r0, [r4, #4]
 801a04a:	e7f4      	b.n	801a036 <rcutils_string_array_fini+0x36>
 801a04c:	200b      	movs	r0, #11
 801a04e:	4770      	bx	lr

0801a050 <rmw_create_guard_condition>:
 801a050:	b538      	push	{r3, r4, r5, lr}
 801a052:	4605      	mov	r5, r0
 801a054:	4807      	ldr	r0, [pc, #28]	@ (801a074 <rmw_create_guard_condition+0x24>)
 801a056:	f7fd ff47 	bl	8017ee8 <get_memory>
 801a05a:	b148      	cbz	r0, 801a070 <rmw_create_guard_condition+0x20>
 801a05c:	6884      	ldr	r4, [r0, #8]
 801a05e:	2300      	movs	r3, #0
 801a060:	7423      	strb	r3, [r4, #16]
 801a062:	61e5      	str	r5, [r4, #28]
 801a064:	f7fd ffa8 	bl	8017fb8 <rmw_get_implementation_identifier>
 801a068:	e9c4 0405 	strd	r0, r4, [r4, #20]
 801a06c:	f104 0014 	add.w	r0, r4, #20
 801a070:	bd38      	pop	{r3, r4, r5, pc}
 801a072:	bf00      	nop
 801a074:	2000b2d4 	.word	0x2000b2d4

0801a078 <rmw_destroy_guard_condition>:
 801a078:	b508      	push	{r3, lr}
 801a07a:	4b08      	ldr	r3, [pc, #32]	@ (801a09c <rmw_destroy_guard_condition+0x24>)
 801a07c:	6819      	ldr	r1, [r3, #0]
 801a07e:	b911      	cbnz	r1, 801a086 <rmw_destroy_guard_condition+0xe>
 801a080:	e00a      	b.n	801a098 <rmw_destroy_guard_condition+0x20>
 801a082:	6849      	ldr	r1, [r1, #4]
 801a084:	b141      	cbz	r1, 801a098 <rmw_destroy_guard_condition+0x20>
 801a086:	688b      	ldr	r3, [r1, #8]
 801a088:	3314      	adds	r3, #20
 801a08a:	4298      	cmp	r0, r3
 801a08c:	d1f9      	bne.n	801a082 <rmw_destroy_guard_condition+0xa>
 801a08e:	4803      	ldr	r0, [pc, #12]	@ (801a09c <rmw_destroy_guard_condition+0x24>)
 801a090:	f7fd ff3a 	bl	8017f08 <put_memory>
 801a094:	2000      	movs	r0, #0
 801a096:	bd08      	pop	{r3, pc}
 801a098:	2001      	movs	r0, #1
 801a09a:	bd08      	pop	{r3, pc}
 801a09c:	2000b2d4 	.word	0x2000b2d4

0801a0a0 <rmw_trigger_guard_condition>:
 801a0a0:	b160      	cbz	r0, 801a0bc <rmw_trigger_guard_condition+0x1c>
 801a0a2:	b510      	push	{r4, lr}
 801a0a4:	4604      	mov	r4, r0
 801a0a6:	6800      	ldr	r0, [r0, #0]
 801a0a8:	f7f6 fb88 	bl	80107bc <is_uxrce_rmw_identifier_valid>
 801a0ac:	b908      	cbnz	r0, 801a0b2 <rmw_trigger_guard_condition+0x12>
 801a0ae:	2001      	movs	r0, #1
 801a0b0:	bd10      	pop	{r4, pc}
 801a0b2:	6863      	ldr	r3, [r4, #4]
 801a0b4:	2201      	movs	r2, #1
 801a0b6:	741a      	strb	r2, [r3, #16]
 801a0b8:	2000      	movs	r0, #0
 801a0ba:	bd10      	pop	{r4, pc}
 801a0bc:	2001      	movs	r0, #1
 801a0be:	4770      	bx	lr

0801a0c0 <rosidl_runtime_c__String__init>:
 801a0c0:	b510      	push	{r4, lr}
 801a0c2:	4604      	mov	r4, r0
 801a0c4:	b086      	sub	sp, #24
 801a0c6:	b170      	cbz	r0, 801a0e6 <rosidl_runtime_c__String__init+0x26>
 801a0c8:	a801      	add	r0, sp, #4
 801a0ca:	f7f5 f841 	bl	800f150 <rcutils_get_default_allocator>
 801a0ce:	9b01      	ldr	r3, [sp, #4]
 801a0d0:	9905      	ldr	r1, [sp, #20]
 801a0d2:	2001      	movs	r0, #1
 801a0d4:	4798      	blx	r3
 801a0d6:	6020      	str	r0, [r4, #0]
 801a0d8:	b128      	cbz	r0, 801a0e6 <rosidl_runtime_c__String__init+0x26>
 801a0da:	2100      	movs	r1, #0
 801a0dc:	2201      	movs	r2, #1
 801a0de:	7001      	strb	r1, [r0, #0]
 801a0e0:	e9c4 1201 	strd	r1, r2, [r4, #4]
 801a0e4:	4610      	mov	r0, r2
 801a0e6:	b006      	add	sp, #24
 801a0e8:	bd10      	pop	{r4, pc}
 801a0ea:	bf00      	nop

0801a0ec <rosidl_runtime_c__String__fini>:
 801a0ec:	b320      	cbz	r0, 801a138 <rosidl_runtime_c__String__fini+0x4c>
 801a0ee:	b510      	push	{r4, lr}
 801a0f0:	6803      	ldr	r3, [r0, #0]
 801a0f2:	b086      	sub	sp, #24
 801a0f4:	4604      	mov	r4, r0
 801a0f6:	b173      	cbz	r3, 801a116 <rosidl_runtime_c__String__fini+0x2a>
 801a0f8:	6883      	ldr	r3, [r0, #8]
 801a0fa:	b1f3      	cbz	r3, 801a13a <rosidl_runtime_c__String__fini+0x4e>
 801a0fc:	a801      	add	r0, sp, #4
 801a0fe:	f7f5 f827 	bl	800f150 <rcutils_get_default_allocator>
 801a102:	9b02      	ldr	r3, [sp, #8]
 801a104:	9905      	ldr	r1, [sp, #20]
 801a106:	6820      	ldr	r0, [r4, #0]
 801a108:	4798      	blx	r3
 801a10a:	2300      	movs	r3, #0
 801a10c:	e9c4 3300 	strd	r3, r3, [r4]
 801a110:	60a3      	str	r3, [r4, #8]
 801a112:	b006      	add	sp, #24
 801a114:	bd10      	pop	{r4, pc}
 801a116:	6843      	ldr	r3, [r0, #4]
 801a118:	b9db      	cbnz	r3, 801a152 <rosidl_runtime_c__String__fini+0x66>
 801a11a:	6883      	ldr	r3, [r0, #8]
 801a11c:	2b00      	cmp	r3, #0
 801a11e:	d0f8      	beq.n	801a112 <rosidl_runtime_c__String__fini+0x26>
 801a120:	4b12      	ldr	r3, [pc, #72]	@ (801a16c <rosidl_runtime_c__String__fini+0x80>)
 801a122:	4813      	ldr	r0, [pc, #76]	@ (801a170 <rosidl_runtime_c__String__fini+0x84>)
 801a124:	681b      	ldr	r3, [r3, #0]
 801a126:	2251      	movs	r2, #81	@ 0x51
 801a128:	68db      	ldr	r3, [r3, #12]
 801a12a:	2101      	movs	r1, #1
 801a12c:	f000 fb82 	bl	801a834 <fwrite>
 801a130:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801a134:	f000 f83e 	bl	801a1b4 <exit>
 801a138:	4770      	bx	lr
 801a13a:	4b0c      	ldr	r3, [pc, #48]	@ (801a16c <rosidl_runtime_c__String__fini+0x80>)
 801a13c:	480d      	ldr	r0, [pc, #52]	@ (801a174 <rosidl_runtime_c__String__fini+0x88>)
 801a13e:	681b      	ldr	r3, [r3, #0]
 801a140:	224c      	movs	r2, #76	@ 0x4c
 801a142:	68db      	ldr	r3, [r3, #12]
 801a144:	2101      	movs	r1, #1
 801a146:	f000 fb75 	bl	801a834 <fwrite>
 801a14a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801a14e:	f000 f831 	bl	801a1b4 <exit>
 801a152:	4b06      	ldr	r3, [pc, #24]	@ (801a16c <rosidl_runtime_c__String__fini+0x80>)
 801a154:	4808      	ldr	r0, [pc, #32]	@ (801a178 <rosidl_runtime_c__String__fini+0x8c>)
 801a156:	681b      	ldr	r3, [r3, #0]
 801a158:	224e      	movs	r2, #78	@ 0x4e
 801a15a:	68db      	ldr	r3, [r3, #12]
 801a15c:	2101      	movs	r1, #1
 801a15e:	f000 fb69 	bl	801a834 <fwrite>
 801a162:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801a166:	f000 f825 	bl	801a1b4 <exit>
 801a16a:	bf00      	nop
 801a16c:	20000438 	.word	0x20000438
 801a170:	0801dc9c 	.word	0x0801dc9c
 801a174:	0801dbfc 	.word	0x0801dbfc
 801a178:	0801dc4c 	.word	0x0801dc4c

0801a17c <calloc>:
 801a17c:	4b02      	ldr	r3, [pc, #8]	@ (801a188 <calloc+0xc>)
 801a17e:	460a      	mov	r2, r1
 801a180:	4601      	mov	r1, r0
 801a182:	6818      	ldr	r0, [r3, #0]
 801a184:	f000 b802 	b.w	801a18c <_calloc_r>
 801a188:	20000438 	.word	0x20000438

0801a18c <_calloc_r>:
 801a18c:	b570      	push	{r4, r5, r6, lr}
 801a18e:	fba1 5402 	umull	r5, r4, r1, r2
 801a192:	b934      	cbnz	r4, 801a1a2 <_calloc_r+0x16>
 801a194:	4629      	mov	r1, r5
 801a196:	f000 f899 	bl	801a2cc <_malloc_r>
 801a19a:	4606      	mov	r6, r0
 801a19c:	b928      	cbnz	r0, 801a1aa <_calloc_r+0x1e>
 801a19e:	4630      	mov	r0, r6
 801a1a0:	bd70      	pop	{r4, r5, r6, pc}
 801a1a2:	220c      	movs	r2, #12
 801a1a4:	6002      	str	r2, [r0, #0]
 801a1a6:	2600      	movs	r6, #0
 801a1a8:	e7f9      	b.n	801a19e <_calloc_r+0x12>
 801a1aa:	462a      	mov	r2, r5
 801a1ac:	4621      	mov	r1, r4
 801a1ae:	f000 fcd5 	bl	801ab5c <memset>
 801a1b2:	e7f4      	b.n	801a19e <_calloc_r+0x12>

0801a1b4 <exit>:
 801a1b4:	b508      	push	{r3, lr}
 801a1b6:	4b06      	ldr	r3, [pc, #24]	@ (801a1d0 <exit+0x1c>)
 801a1b8:	4604      	mov	r4, r0
 801a1ba:	b113      	cbz	r3, 801a1c2 <exit+0xe>
 801a1bc:	2100      	movs	r1, #0
 801a1be:	f3af 8000 	nop.w
 801a1c2:	4b04      	ldr	r3, [pc, #16]	@ (801a1d4 <exit+0x20>)
 801a1c4:	681b      	ldr	r3, [r3, #0]
 801a1c6:	b103      	cbz	r3, 801a1ca <exit+0x16>
 801a1c8:	4798      	blx	r3
 801a1ca:	4620      	mov	r0, r4
 801a1cc:	f7e9 f9ae 	bl	800352c <_exit>
 801a1d0:	00000000 	.word	0x00000000
 801a1d4:	2000b600 	.word	0x2000b600

0801a1d8 <getenv>:
 801a1d8:	b507      	push	{r0, r1, r2, lr}
 801a1da:	4b04      	ldr	r3, [pc, #16]	@ (801a1ec <getenv+0x14>)
 801a1dc:	4601      	mov	r1, r0
 801a1de:	aa01      	add	r2, sp, #4
 801a1e0:	6818      	ldr	r0, [r3, #0]
 801a1e2:	f000 f805 	bl	801a1f0 <_findenv_r>
 801a1e6:	b003      	add	sp, #12
 801a1e8:	f85d fb04 	ldr.w	pc, [sp], #4
 801a1ec:	20000438 	.word	0x20000438

0801a1f0 <_findenv_r>:
 801a1f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a1f4:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 801a264 <_findenv_r+0x74>
 801a1f8:	4606      	mov	r6, r0
 801a1fa:	4689      	mov	r9, r1
 801a1fc:	4617      	mov	r7, r2
 801a1fe:	f000 fda3 	bl	801ad48 <__env_lock>
 801a202:	f8da 4000 	ldr.w	r4, [sl]
 801a206:	b134      	cbz	r4, 801a216 <_findenv_r+0x26>
 801a208:	464b      	mov	r3, r9
 801a20a:	4698      	mov	r8, r3
 801a20c:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a210:	b13a      	cbz	r2, 801a222 <_findenv_r+0x32>
 801a212:	2a3d      	cmp	r2, #61	@ 0x3d
 801a214:	d1f9      	bne.n	801a20a <_findenv_r+0x1a>
 801a216:	4630      	mov	r0, r6
 801a218:	f000 fd9c 	bl	801ad54 <__env_unlock>
 801a21c:	2000      	movs	r0, #0
 801a21e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a222:	eba8 0809 	sub.w	r8, r8, r9
 801a226:	46a3      	mov	fp, r4
 801a228:	f854 0b04 	ldr.w	r0, [r4], #4
 801a22c:	2800      	cmp	r0, #0
 801a22e:	d0f2      	beq.n	801a216 <_findenv_r+0x26>
 801a230:	4642      	mov	r2, r8
 801a232:	4649      	mov	r1, r9
 801a234:	f000 fca7 	bl	801ab86 <strncmp>
 801a238:	2800      	cmp	r0, #0
 801a23a:	d1f4      	bne.n	801a226 <_findenv_r+0x36>
 801a23c:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801a240:	eb03 0508 	add.w	r5, r3, r8
 801a244:	f813 3008 	ldrb.w	r3, [r3, r8]
 801a248:	2b3d      	cmp	r3, #61	@ 0x3d
 801a24a:	d1ec      	bne.n	801a226 <_findenv_r+0x36>
 801a24c:	f8da 3000 	ldr.w	r3, [sl]
 801a250:	ebab 0303 	sub.w	r3, fp, r3
 801a254:	109b      	asrs	r3, r3, #2
 801a256:	4630      	mov	r0, r6
 801a258:	603b      	str	r3, [r7, #0]
 801a25a:	f000 fd7b 	bl	801ad54 <__env_unlock>
 801a25e:	1c68      	adds	r0, r5, #1
 801a260:	e7dd      	b.n	801a21e <_findenv_r+0x2e>
 801a262:	bf00      	nop
 801a264:	20000000 	.word	0x20000000

0801a268 <malloc>:
 801a268:	4b02      	ldr	r3, [pc, #8]	@ (801a274 <malloc+0xc>)
 801a26a:	4601      	mov	r1, r0
 801a26c:	6818      	ldr	r0, [r3, #0]
 801a26e:	f000 b82d 	b.w	801a2cc <_malloc_r>
 801a272:	bf00      	nop
 801a274:	20000438 	.word	0x20000438

0801a278 <free>:
 801a278:	4b02      	ldr	r3, [pc, #8]	@ (801a284 <free+0xc>)
 801a27a:	4601      	mov	r1, r0
 801a27c:	6818      	ldr	r0, [r3, #0]
 801a27e:	f000 bd6f 	b.w	801ad60 <_free_r>
 801a282:	bf00      	nop
 801a284:	20000438 	.word	0x20000438

0801a288 <sbrk_aligned>:
 801a288:	b570      	push	{r4, r5, r6, lr}
 801a28a:	4e0f      	ldr	r6, [pc, #60]	@ (801a2c8 <sbrk_aligned+0x40>)
 801a28c:	460c      	mov	r4, r1
 801a28e:	6831      	ldr	r1, [r6, #0]
 801a290:	4605      	mov	r5, r0
 801a292:	b911      	cbnz	r1, 801a29a <sbrk_aligned+0x12>
 801a294:	f000 fcd4 	bl	801ac40 <_sbrk_r>
 801a298:	6030      	str	r0, [r6, #0]
 801a29a:	4621      	mov	r1, r4
 801a29c:	4628      	mov	r0, r5
 801a29e:	f000 fccf 	bl	801ac40 <_sbrk_r>
 801a2a2:	1c43      	adds	r3, r0, #1
 801a2a4:	d103      	bne.n	801a2ae <sbrk_aligned+0x26>
 801a2a6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 801a2aa:	4620      	mov	r0, r4
 801a2ac:	bd70      	pop	{r4, r5, r6, pc}
 801a2ae:	1cc4      	adds	r4, r0, #3
 801a2b0:	f024 0403 	bic.w	r4, r4, #3
 801a2b4:	42a0      	cmp	r0, r4
 801a2b6:	d0f8      	beq.n	801a2aa <sbrk_aligned+0x22>
 801a2b8:	1a21      	subs	r1, r4, r0
 801a2ba:	4628      	mov	r0, r5
 801a2bc:	f000 fcc0 	bl	801ac40 <_sbrk_r>
 801a2c0:	3001      	adds	r0, #1
 801a2c2:	d1f2      	bne.n	801a2aa <sbrk_aligned+0x22>
 801a2c4:	e7ef      	b.n	801a2a6 <sbrk_aligned+0x1e>
 801a2c6:	bf00      	nop
 801a2c8:	2000b4c0 	.word	0x2000b4c0

0801a2cc <_malloc_r>:
 801a2cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a2d0:	1ccd      	adds	r5, r1, #3
 801a2d2:	f025 0503 	bic.w	r5, r5, #3
 801a2d6:	3508      	adds	r5, #8
 801a2d8:	2d0c      	cmp	r5, #12
 801a2da:	bf38      	it	cc
 801a2dc:	250c      	movcc	r5, #12
 801a2de:	2d00      	cmp	r5, #0
 801a2e0:	4606      	mov	r6, r0
 801a2e2:	db01      	blt.n	801a2e8 <_malloc_r+0x1c>
 801a2e4:	42a9      	cmp	r1, r5
 801a2e6:	d904      	bls.n	801a2f2 <_malloc_r+0x26>
 801a2e8:	230c      	movs	r3, #12
 801a2ea:	6033      	str	r3, [r6, #0]
 801a2ec:	2000      	movs	r0, #0
 801a2ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a2f2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801a3c8 <_malloc_r+0xfc>
 801a2f6:	f000 f869 	bl	801a3cc <__malloc_lock>
 801a2fa:	f8d8 3000 	ldr.w	r3, [r8]
 801a2fe:	461c      	mov	r4, r3
 801a300:	bb44      	cbnz	r4, 801a354 <_malloc_r+0x88>
 801a302:	4629      	mov	r1, r5
 801a304:	4630      	mov	r0, r6
 801a306:	f7ff ffbf 	bl	801a288 <sbrk_aligned>
 801a30a:	1c43      	adds	r3, r0, #1
 801a30c:	4604      	mov	r4, r0
 801a30e:	d158      	bne.n	801a3c2 <_malloc_r+0xf6>
 801a310:	f8d8 4000 	ldr.w	r4, [r8]
 801a314:	4627      	mov	r7, r4
 801a316:	2f00      	cmp	r7, #0
 801a318:	d143      	bne.n	801a3a2 <_malloc_r+0xd6>
 801a31a:	2c00      	cmp	r4, #0
 801a31c:	d04b      	beq.n	801a3b6 <_malloc_r+0xea>
 801a31e:	6823      	ldr	r3, [r4, #0]
 801a320:	4639      	mov	r1, r7
 801a322:	4630      	mov	r0, r6
 801a324:	eb04 0903 	add.w	r9, r4, r3
 801a328:	f000 fc8a 	bl	801ac40 <_sbrk_r>
 801a32c:	4581      	cmp	r9, r0
 801a32e:	d142      	bne.n	801a3b6 <_malloc_r+0xea>
 801a330:	6821      	ldr	r1, [r4, #0]
 801a332:	1a6d      	subs	r5, r5, r1
 801a334:	4629      	mov	r1, r5
 801a336:	4630      	mov	r0, r6
 801a338:	f7ff ffa6 	bl	801a288 <sbrk_aligned>
 801a33c:	3001      	adds	r0, #1
 801a33e:	d03a      	beq.n	801a3b6 <_malloc_r+0xea>
 801a340:	6823      	ldr	r3, [r4, #0]
 801a342:	442b      	add	r3, r5
 801a344:	6023      	str	r3, [r4, #0]
 801a346:	f8d8 3000 	ldr.w	r3, [r8]
 801a34a:	685a      	ldr	r2, [r3, #4]
 801a34c:	bb62      	cbnz	r2, 801a3a8 <_malloc_r+0xdc>
 801a34e:	f8c8 7000 	str.w	r7, [r8]
 801a352:	e00f      	b.n	801a374 <_malloc_r+0xa8>
 801a354:	6822      	ldr	r2, [r4, #0]
 801a356:	1b52      	subs	r2, r2, r5
 801a358:	d420      	bmi.n	801a39c <_malloc_r+0xd0>
 801a35a:	2a0b      	cmp	r2, #11
 801a35c:	d917      	bls.n	801a38e <_malloc_r+0xc2>
 801a35e:	1961      	adds	r1, r4, r5
 801a360:	42a3      	cmp	r3, r4
 801a362:	6025      	str	r5, [r4, #0]
 801a364:	bf18      	it	ne
 801a366:	6059      	strne	r1, [r3, #4]
 801a368:	6863      	ldr	r3, [r4, #4]
 801a36a:	bf08      	it	eq
 801a36c:	f8c8 1000 	streq.w	r1, [r8]
 801a370:	5162      	str	r2, [r4, r5]
 801a372:	604b      	str	r3, [r1, #4]
 801a374:	4630      	mov	r0, r6
 801a376:	f000 f82f 	bl	801a3d8 <__malloc_unlock>
 801a37a:	f104 000b 	add.w	r0, r4, #11
 801a37e:	1d23      	adds	r3, r4, #4
 801a380:	f020 0007 	bic.w	r0, r0, #7
 801a384:	1ac2      	subs	r2, r0, r3
 801a386:	bf1c      	itt	ne
 801a388:	1a1b      	subne	r3, r3, r0
 801a38a:	50a3      	strne	r3, [r4, r2]
 801a38c:	e7af      	b.n	801a2ee <_malloc_r+0x22>
 801a38e:	6862      	ldr	r2, [r4, #4]
 801a390:	42a3      	cmp	r3, r4
 801a392:	bf0c      	ite	eq
 801a394:	f8c8 2000 	streq.w	r2, [r8]
 801a398:	605a      	strne	r2, [r3, #4]
 801a39a:	e7eb      	b.n	801a374 <_malloc_r+0xa8>
 801a39c:	4623      	mov	r3, r4
 801a39e:	6864      	ldr	r4, [r4, #4]
 801a3a0:	e7ae      	b.n	801a300 <_malloc_r+0x34>
 801a3a2:	463c      	mov	r4, r7
 801a3a4:	687f      	ldr	r7, [r7, #4]
 801a3a6:	e7b6      	b.n	801a316 <_malloc_r+0x4a>
 801a3a8:	461a      	mov	r2, r3
 801a3aa:	685b      	ldr	r3, [r3, #4]
 801a3ac:	42a3      	cmp	r3, r4
 801a3ae:	d1fb      	bne.n	801a3a8 <_malloc_r+0xdc>
 801a3b0:	2300      	movs	r3, #0
 801a3b2:	6053      	str	r3, [r2, #4]
 801a3b4:	e7de      	b.n	801a374 <_malloc_r+0xa8>
 801a3b6:	230c      	movs	r3, #12
 801a3b8:	6033      	str	r3, [r6, #0]
 801a3ba:	4630      	mov	r0, r6
 801a3bc:	f000 f80c 	bl	801a3d8 <__malloc_unlock>
 801a3c0:	e794      	b.n	801a2ec <_malloc_r+0x20>
 801a3c2:	6005      	str	r5, [r0, #0]
 801a3c4:	e7d6      	b.n	801a374 <_malloc_r+0xa8>
 801a3c6:	bf00      	nop
 801a3c8:	2000b4c4 	.word	0x2000b4c4

0801a3cc <__malloc_lock>:
 801a3cc:	4801      	ldr	r0, [pc, #4]	@ (801a3d4 <__malloc_lock+0x8>)
 801a3ce:	f000 bc84 	b.w	801acda <__retarget_lock_acquire_recursive>
 801a3d2:	bf00      	nop
 801a3d4:	2000b609 	.word	0x2000b609

0801a3d8 <__malloc_unlock>:
 801a3d8:	4801      	ldr	r0, [pc, #4]	@ (801a3e0 <__malloc_unlock+0x8>)
 801a3da:	f000 bc7f 	b.w	801acdc <__retarget_lock_release_recursive>
 801a3de:	bf00      	nop
 801a3e0:	2000b609 	.word	0x2000b609

0801a3e4 <srand>:
 801a3e4:	b538      	push	{r3, r4, r5, lr}
 801a3e6:	4b10      	ldr	r3, [pc, #64]	@ (801a428 <srand+0x44>)
 801a3e8:	681d      	ldr	r5, [r3, #0]
 801a3ea:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801a3ec:	4604      	mov	r4, r0
 801a3ee:	b9b3      	cbnz	r3, 801a41e <srand+0x3a>
 801a3f0:	2018      	movs	r0, #24
 801a3f2:	f7ff ff39 	bl	801a268 <malloc>
 801a3f6:	4602      	mov	r2, r0
 801a3f8:	6328      	str	r0, [r5, #48]	@ 0x30
 801a3fa:	b920      	cbnz	r0, 801a406 <srand+0x22>
 801a3fc:	4b0b      	ldr	r3, [pc, #44]	@ (801a42c <srand+0x48>)
 801a3fe:	480c      	ldr	r0, [pc, #48]	@ (801a430 <srand+0x4c>)
 801a400:	2146      	movs	r1, #70	@ 0x46
 801a402:	f000 fc83 	bl	801ad0c <__assert_func>
 801a406:	490b      	ldr	r1, [pc, #44]	@ (801a434 <srand+0x50>)
 801a408:	4b0b      	ldr	r3, [pc, #44]	@ (801a438 <srand+0x54>)
 801a40a:	e9c0 1300 	strd	r1, r3, [r0]
 801a40e:	4b0b      	ldr	r3, [pc, #44]	@ (801a43c <srand+0x58>)
 801a410:	6083      	str	r3, [r0, #8]
 801a412:	230b      	movs	r3, #11
 801a414:	8183      	strh	r3, [r0, #12]
 801a416:	2100      	movs	r1, #0
 801a418:	2001      	movs	r0, #1
 801a41a:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801a41e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801a420:	2200      	movs	r2, #0
 801a422:	611c      	str	r4, [r3, #16]
 801a424:	615a      	str	r2, [r3, #20]
 801a426:	bd38      	pop	{r3, r4, r5, pc}
 801a428:	20000438 	.word	0x20000438
 801a42c:	0801e2e4 	.word	0x0801e2e4
 801a430:	0801e2fb 	.word	0x0801e2fb
 801a434:	abcd330e 	.word	0xabcd330e
 801a438:	e66d1234 	.word	0xe66d1234
 801a43c:	0005deec 	.word	0x0005deec

0801a440 <rand>:
 801a440:	4b16      	ldr	r3, [pc, #88]	@ (801a49c <rand+0x5c>)
 801a442:	b510      	push	{r4, lr}
 801a444:	681c      	ldr	r4, [r3, #0]
 801a446:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801a448:	b9b3      	cbnz	r3, 801a478 <rand+0x38>
 801a44a:	2018      	movs	r0, #24
 801a44c:	f7ff ff0c 	bl	801a268 <malloc>
 801a450:	4602      	mov	r2, r0
 801a452:	6320      	str	r0, [r4, #48]	@ 0x30
 801a454:	b920      	cbnz	r0, 801a460 <rand+0x20>
 801a456:	4b12      	ldr	r3, [pc, #72]	@ (801a4a0 <rand+0x60>)
 801a458:	4812      	ldr	r0, [pc, #72]	@ (801a4a4 <rand+0x64>)
 801a45a:	2152      	movs	r1, #82	@ 0x52
 801a45c:	f000 fc56 	bl	801ad0c <__assert_func>
 801a460:	4911      	ldr	r1, [pc, #68]	@ (801a4a8 <rand+0x68>)
 801a462:	4b12      	ldr	r3, [pc, #72]	@ (801a4ac <rand+0x6c>)
 801a464:	e9c0 1300 	strd	r1, r3, [r0]
 801a468:	4b11      	ldr	r3, [pc, #68]	@ (801a4b0 <rand+0x70>)
 801a46a:	6083      	str	r3, [r0, #8]
 801a46c:	230b      	movs	r3, #11
 801a46e:	8183      	strh	r3, [r0, #12]
 801a470:	2100      	movs	r1, #0
 801a472:	2001      	movs	r0, #1
 801a474:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801a478:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801a47a:	480e      	ldr	r0, [pc, #56]	@ (801a4b4 <rand+0x74>)
 801a47c:	690b      	ldr	r3, [r1, #16]
 801a47e:	694c      	ldr	r4, [r1, #20]
 801a480:	4a0d      	ldr	r2, [pc, #52]	@ (801a4b8 <rand+0x78>)
 801a482:	4358      	muls	r0, r3
 801a484:	fb02 0004 	mla	r0, r2, r4, r0
 801a488:	fba3 3202 	umull	r3, r2, r3, r2
 801a48c:	3301      	adds	r3, #1
 801a48e:	eb40 0002 	adc.w	r0, r0, r2
 801a492:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801a496:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 801a49a:	bd10      	pop	{r4, pc}
 801a49c:	20000438 	.word	0x20000438
 801a4a0:	0801e2e4 	.word	0x0801e2e4
 801a4a4:	0801e2fb 	.word	0x0801e2fb
 801a4a8:	abcd330e 	.word	0xabcd330e
 801a4ac:	e66d1234 	.word	0xe66d1234
 801a4b0:	0005deec 	.word	0x0005deec
 801a4b4:	5851f42d 	.word	0x5851f42d
 801a4b8:	4c957f2d 	.word	0x4c957f2d

0801a4bc <realloc>:
 801a4bc:	4b02      	ldr	r3, [pc, #8]	@ (801a4c8 <realloc+0xc>)
 801a4be:	460a      	mov	r2, r1
 801a4c0:	4601      	mov	r1, r0
 801a4c2:	6818      	ldr	r0, [r3, #0]
 801a4c4:	f000 b802 	b.w	801a4cc <_realloc_r>
 801a4c8:	20000438 	.word	0x20000438

0801a4cc <_realloc_r>:
 801a4cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a4d0:	4607      	mov	r7, r0
 801a4d2:	4614      	mov	r4, r2
 801a4d4:	460d      	mov	r5, r1
 801a4d6:	b921      	cbnz	r1, 801a4e2 <_realloc_r+0x16>
 801a4d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a4dc:	4611      	mov	r1, r2
 801a4de:	f7ff bef5 	b.w	801a2cc <_malloc_r>
 801a4e2:	b92a      	cbnz	r2, 801a4f0 <_realloc_r+0x24>
 801a4e4:	f000 fc3c 	bl	801ad60 <_free_r>
 801a4e8:	4625      	mov	r5, r4
 801a4ea:	4628      	mov	r0, r5
 801a4ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a4f0:	f000 fc80 	bl	801adf4 <_malloc_usable_size_r>
 801a4f4:	4284      	cmp	r4, r0
 801a4f6:	4606      	mov	r6, r0
 801a4f8:	d802      	bhi.n	801a500 <_realloc_r+0x34>
 801a4fa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801a4fe:	d8f4      	bhi.n	801a4ea <_realloc_r+0x1e>
 801a500:	4621      	mov	r1, r4
 801a502:	4638      	mov	r0, r7
 801a504:	f7ff fee2 	bl	801a2cc <_malloc_r>
 801a508:	4680      	mov	r8, r0
 801a50a:	b908      	cbnz	r0, 801a510 <_realloc_r+0x44>
 801a50c:	4645      	mov	r5, r8
 801a50e:	e7ec      	b.n	801a4ea <_realloc_r+0x1e>
 801a510:	42b4      	cmp	r4, r6
 801a512:	4622      	mov	r2, r4
 801a514:	4629      	mov	r1, r5
 801a516:	bf28      	it	cs
 801a518:	4632      	movcs	r2, r6
 801a51a:	f000 fbe8 	bl	801acee <memcpy>
 801a51e:	4629      	mov	r1, r5
 801a520:	4638      	mov	r0, r7
 801a522:	f000 fc1d 	bl	801ad60 <_free_r>
 801a526:	e7f1      	b.n	801a50c <_realloc_r+0x40>

0801a528 <_strtoul_l.isra.0>:
 801a528:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a52c:	4e34      	ldr	r6, [pc, #208]	@ (801a600 <_strtoul_l.isra.0+0xd8>)
 801a52e:	4686      	mov	lr, r0
 801a530:	460d      	mov	r5, r1
 801a532:	4628      	mov	r0, r5
 801a534:	f815 4b01 	ldrb.w	r4, [r5], #1
 801a538:	5d37      	ldrb	r7, [r6, r4]
 801a53a:	f017 0708 	ands.w	r7, r7, #8
 801a53e:	d1f8      	bne.n	801a532 <_strtoul_l.isra.0+0xa>
 801a540:	2c2d      	cmp	r4, #45	@ 0x2d
 801a542:	d110      	bne.n	801a566 <_strtoul_l.isra.0+0x3e>
 801a544:	782c      	ldrb	r4, [r5, #0]
 801a546:	2701      	movs	r7, #1
 801a548:	1c85      	adds	r5, r0, #2
 801a54a:	f033 0010 	bics.w	r0, r3, #16
 801a54e:	d115      	bne.n	801a57c <_strtoul_l.isra.0+0x54>
 801a550:	2c30      	cmp	r4, #48	@ 0x30
 801a552:	d10d      	bne.n	801a570 <_strtoul_l.isra.0+0x48>
 801a554:	7828      	ldrb	r0, [r5, #0]
 801a556:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 801a55a:	2858      	cmp	r0, #88	@ 0x58
 801a55c:	d108      	bne.n	801a570 <_strtoul_l.isra.0+0x48>
 801a55e:	786c      	ldrb	r4, [r5, #1]
 801a560:	3502      	adds	r5, #2
 801a562:	2310      	movs	r3, #16
 801a564:	e00a      	b.n	801a57c <_strtoul_l.isra.0+0x54>
 801a566:	2c2b      	cmp	r4, #43	@ 0x2b
 801a568:	bf04      	itt	eq
 801a56a:	782c      	ldrbeq	r4, [r5, #0]
 801a56c:	1c85      	addeq	r5, r0, #2
 801a56e:	e7ec      	b.n	801a54a <_strtoul_l.isra.0+0x22>
 801a570:	2b00      	cmp	r3, #0
 801a572:	d1f6      	bne.n	801a562 <_strtoul_l.isra.0+0x3a>
 801a574:	2c30      	cmp	r4, #48	@ 0x30
 801a576:	bf14      	ite	ne
 801a578:	230a      	movne	r3, #10
 801a57a:	2308      	moveq	r3, #8
 801a57c:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 801a580:	2600      	movs	r6, #0
 801a582:	fbb8 f8f3 	udiv	r8, r8, r3
 801a586:	fb03 f908 	mul.w	r9, r3, r8
 801a58a:	ea6f 0909 	mvn.w	r9, r9
 801a58e:	4630      	mov	r0, r6
 801a590:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 801a594:	f1bc 0f09 	cmp.w	ip, #9
 801a598:	d810      	bhi.n	801a5bc <_strtoul_l.isra.0+0x94>
 801a59a:	4664      	mov	r4, ip
 801a59c:	42a3      	cmp	r3, r4
 801a59e:	dd1e      	ble.n	801a5de <_strtoul_l.isra.0+0xb6>
 801a5a0:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 801a5a4:	d007      	beq.n	801a5b6 <_strtoul_l.isra.0+0x8e>
 801a5a6:	4580      	cmp	r8, r0
 801a5a8:	d316      	bcc.n	801a5d8 <_strtoul_l.isra.0+0xb0>
 801a5aa:	d101      	bne.n	801a5b0 <_strtoul_l.isra.0+0x88>
 801a5ac:	45a1      	cmp	r9, r4
 801a5ae:	db13      	blt.n	801a5d8 <_strtoul_l.isra.0+0xb0>
 801a5b0:	fb00 4003 	mla	r0, r0, r3, r4
 801a5b4:	2601      	movs	r6, #1
 801a5b6:	f815 4b01 	ldrb.w	r4, [r5], #1
 801a5ba:	e7e9      	b.n	801a590 <_strtoul_l.isra.0+0x68>
 801a5bc:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 801a5c0:	f1bc 0f19 	cmp.w	ip, #25
 801a5c4:	d801      	bhi.n	801a5ca <_strtoul_l.isra.0+0xa2>
 801a5c6:	3c37      	subs	r4, #55	@ 0x37
 801a5c8:	e7e8      	b.n	801a59c <_strtoul_l.isra.0+0x74>
 801a5ca:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 801a5ce:	f1bc 0f19 	cmp.w	ip, #25
 801a5d2:	d804      	bhi.n	801a5de <_strtoul_l.isra.0+0xb6>
 801a5d4:	3c57      	subs	r4, #87	@ 0x57
 801a5d6:	e7e1      	b.n	801a59c <_strtoul_l.isra.0+0x74>
 801a5d8:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 801a5dc:	e7eb      	b.n	801a5b6 <_strtoul_l.isra.0+0x8e>
 801a5de:	1c73      	adds	r3, r6, #1
 801a5e0:	d106      	bne.n	801a5f0 <_strtoul_l.isra.0+0xc8>
 801a5e2:	2322      	movs	r3, #34	@ 0x22
 801a5e4:	f8ce 3000 	str.w	r3, [lr]
 801a5e8:	4630      	mov	r0, r6
 801a5ea:	b932      	cbnz	r2, 801a5fa <_strtoul_l.isra.0+0xd2>
 801a5ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a5f0:	b107      	cbz	r7, 801a5f4 <_strtoul_l.isra.0+0xcc>
 801a5f2:	4240      	negs	r0, r0
 801a5f4:	2a00      	cmp	r2, #0
 801a5f6:	d0f9      	beq.n	801a5ec <_strtoul_l.isra.0+0xc4>
 801a5f8:	b106      	cbz	r6, 801a5fc <_strtoul_l.isra.0+0xd4>
 801a5fa:	1e69      	subs	r1, r5, #1
 801a5fc:	6011      	str	r1, [r2, #0]
 801a5fe:	e7f5      	b.n	801a5ec <_strtoul_l.isra.0+0xc4>
 801a600:	0801e3c3 	.word	0x0801e3c3

0801a604 <strtoul>:
 801a604:	4613      	mov	r3, r2
 801a606:	460a      	mov	r2, r1
 801a608:	4601      	mov	r1, r0
 801a60a:	4802      	ldr	r0, [pc, #8]	@ (801a614 <strtoul+0x10>)
 801a60c:	6800      	ldr	r0, [r0, #0]
 801a60e:	f7ff bf8b 	b.w	801a528 <_strtoul_l.isra.0>
 801a612:	bf00      	nop
 801a614:	20000438 	.word	0x20000438

0801a618 <std>:
 801a618:	2300      	movs	r3, #0
 801a61a:	b510      	push	{r4, lr}
 801a61c:	4604      	mov	r4, r0
 801a61e:	e9c0 3300 	strd	r3, r3, [r0]
 801a622:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801a626:	6083      	str	r3, [r0, #8]
 801a628:	8181      	strh	r1, [r0, #12]
 801a62a:	6643      	str	r3, [r0, #100]	@ 0x64
 801a62c:	81c2      	strh	r2, [r0, #14]
 801a62e:	6183      	str	r3, [r0, #24]
 801a630:	4619      	mov	r1, r3
 801a632:	2208      	movs	r2, #8
 801a634:	305c      	adds	r0, #92	@ 0x5c
 801a636:	f000 fa91 	bl	801ab5c <memset>
 801a63a:	4b0d      	ldr	r3, [pc, #52]	@ (801a670 <std+0x58>)
 801a63c:	6263      	str	r3, [r4, #36]	@ 0x24
 801a63e:	4b0d      	ldr	r3, [pc, #52]	@ (801a674 <std+0x5c>)
 801a640:	62a3      	str	r3, [r4, #40]	@ 0x28
 801a642:	4b0d      	ldr	r3, [pc, #52]	@ (801a678 <std+0x60>)
 801a644:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801a646:	4b0d      	ldr	r3, [pc, #52]	@ (801a67c <std+0x64>)
 801a648:	6323      	str	r3, [r4, #48]	@ 0x30
 801a64a:	4b0d      	ldr	r3, [pc, #52]	@ (801a680 <std+0x68>)
 801a64c:	6224      	str	r4, [r4, #32]
 801a64e:	429c      	cmp	r4, r3
 801a650:	d006      	beq.n	801a660 <std+0x48>
 801a652:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801a656:	4294      	cmp	r4, r2
 801a658:	d002      	beq.n	801a660 <std+0x48>
 801a65a:	33d0      	adds	r3, #208	@ 0xd0
 801a65c:	429c      	cmp	r4, r3
 801a65e:	d105      	bne.n	801a66c <std+0x54>
 801a660:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801a664:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a668:	f000 bb36 	b.w	801acd8 <__retarget_lock_init_recursive>
 801a66c:	bd10      	pop	{r4, pc}
 801a66e:	bf00      	nop
 801a670:	0801a8e1 	.word	0x0801a8e1
 801a674:	0801a903 	.word	0x0801a903
 801a678:	0801a93b 	.word	0x0801a93b
 801a67c:	0801a95f 	.word	0x0801a95f
 801a680:	2000b4c8 	.word	0x2000b4c8

0801a684 <stdio_exit_handler>:
 801a684:	4a02      	ldr	r2, [pc, #8]	@ (801a690 <stdio_exit_handler+0xc>)
 801a686:	4903      	ldr	r1, [pc, #12]	@ (801a694 <stdio_exit_handler+0x10>)
 801a688:	4803      	ldr	r0, [pc, #12]	@ (801a698 <stdio_exit_handler+0x14>)
 801a68a:	f000 b869 	b.w	801a760 <_fwalk_sglue>
 801a68e:	bf00      	nop
 801a690:	2000042c 	.word	0x2000042c
 801a694:	0801b759 	.word	0x0801b759
 801a698:	2000043c 	.word	0x2000043c

0801a69c <cleanup_stdio>:
 801a69c:	6841      	ldr	r1, [r0, #4]
 801a69e:	4b0c      	ldr	r3, [pc, #48]	@ (801a6d0 <cleanup_stdio+0x34>)
 801a6a0:	4299      	cmp	r1, r3
 801a6a2:	b510      	push	{r4, lr}
 801a6a4:	4604      	mov	r4, r0
 801a6a6:	d001      	beq.n	801a6ac <cleanup_stdio+0x10>
 801a6a8:	f001 f856 	bl	801b758 <_fflush_r>
 801a6ac:	68a1      	ldr	r1, [r4, #8]
 801a6ae:	4b09      	ldr	r3, [pc, #36]	@ (801a6d4 <cleanup_stdio+0x38>)
 801a6b0:	4299      	cmp	r1, r3
 801a6b2:	d002      	beq.n	801a6ba <cleanup_stdio+0x1e>
 801a6b4:	4620      	mov	r0, r4
 801a6b6:	f001 f84f 	bl	801b758 <_fflush_r>
 801a6ba:	68e1      	ldr	r1, [r4, #12]
 801a6bc:	4b06      	ldr	r3, [pc, #24]	@ (801a6d8 <cleanup_stdio+0x3c>)
 801a6be:	4299      	cmp	r1, r3
 801a6c0:	d004      	beq.n	801a6cc <cleanup_stdio+0x30>
 801a6c2:	4620      	mov	r0, r4
 801a6c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a6c8:	f001 b846 	b.w	801b758 <_fflush_r>
 801a6cc:	bd10      	pop	{r4, pc}
 801a6ce:	bf00      	nop
 801a6d0:	2000b4c8 	.word	0x2000b4c8
 801a6d4:	2000b530 	.word	0x2000b530
 801a6d8:	2000b598 	.word	0x2000b598

0801a6dc <global_stdio_init.part.0>:
 801a6dc:	b510      	push	{r4, lr}
 801a6de:	4b0b      	ldr	r3, [pc, #44]	@ (801a70c <global_stdio_init.part.0+0x30>)
 801a6e0:	4c0b      	ldr	r4, [pc, #44]	@ (801a710 <global_stdio_init.part.0+0x34>)
 801a6e2:	4a0c      	ldr	r2, [pc, #48]	@ (801a714 <global_stdio_init.part.0+0x38>)
 801a6e4:	601a      	str	r2, [r3, #0]
 801a6e6:	4620      	mov	r0, r4
 801a6e8:	2200      	movs	r2, #0
 801a6ea:	2104      	movs	r1, #4
 801a6ec:	f7ff ff94 	bl	801a618 <std>
 801a6f0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801a6f4:	2201      	movs	r2, #1
 801a6f6:	2109      	movs	r1, #9
 801a6f8:	f7ff ff8e 	bl	801a618 <std>
 801a6fc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801a700:	2202      	movs	r2, #2
 801a702:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a706:	2112      	movs	r1, #18
 801a708:	f7ff bf86 	b.w	801a618 <std>
 801a70c:	2000b600 	.word	0x2000b600
 801a710:	2000b4c8 	.word	0x2000b4c8
 801a714:	0801a685 	.word	0x0801a685

0801a718 <__sfp_lock_acquire>:
 801a718:	4801      	ldr	r0, [pc, #4]	@ (801a720 <__sfp_lock_acquire+0x8>)
 801a71a:	f000 bade 	b.w	801acda <__retarget_lock_acquire_recursive>
 801a71e:	bf00      	nop
 801a720:	2000b60a 	.word	0x2000b60a

0801a724 <__sfp_lock_release>:
 801a724:	4801      	ldr	r0, [pc, #4]	@ (801a72c <__sfp_lock_release+0x8>)
 801a726:	f000 bad9 	b.w	801acdc <__retarget_lock_release_recursive>
 801a72a:	bf00      	nop
 801a72c:	2000b60a 	.word	0x2000b60a

0801a730 <__sinit>:
 801a730:	b510      	push	{r4, lr}
 801a732:	4604      	mov	r4, r0
 801a734:	f7ff fff0 	bl	801a718 <__sfp_lock_acquire>
 801a738:	6a23      	ldr	r3, [r4, #32]
 801a73a:	b11b      	cbz	r3, 801a744 <__sinit+0x14>
 801a73c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a740:	f7ff bff0 	b.w	801a724 <__sfp_lock_release>
 801a744:	4b04      	ldr	r3, [pc, #16]	@ (801a758 <__sinit+0x28>)
 801a746:	6223      	str	r3, [r4, #32]
 801a748:	4b04      	ldr	r3, [pc, #16]	@ (801a75c <__sinit+0x2c>)
 801a74a:	681b      	ldr	r3, [r3, #0]
 801a74c:	2b00      	cmp	r3, #0
 801a74e:	d1f5      	bne.n	801a73c <__sinit+0xc>
 801a750:	f7ff ffc4 	bl	801a6dc <global_stdio_init.part.0>
 801a754:	e7f2      	b.n	801a73c <__sinit+0xc>
 801a756:	bf00      	nop
 801a758:	0801a69d 	.word	0x0801a69d
 801a75c:	2000b600 	.word	0x2000b600

0801a760 <_fwalk_sglue>:
 801a760:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a764:	4607      	mov	r7, r0
 801a766:	4688      	mov	r8, r1
 801a768:	4614      	mov	r4, r2
 801a76a:	2600      	movs	r6, #0
 801a76c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801a770:	f1b9 0901 	subs.w	r9, r9, #1
 801a774:	d505      	bpl.n	801a782 <_fwalk_sglue+0x22>
 801a776:	6824      	ldr	r4, [r4, #0]
 801a778:	2c00      	cmp	r4, #0
 801a77a:	d1f7      	bne.n	801a76c <_fwalk_sglue+0xc>
 801a77c:	4630      	mov	r0, r6
 801a77e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a782:	89ab      	ldrh	r3, [r5, #12]
 801a784:	2b01      	cmp	r3, #1
 801a786:	d907      	bls.n	801a798 <_fwalk_sglue+0x38>
 801a788:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801a78c:	3301      	adds	r3, #1
 801a78e:	d003      	beq.n	801a798 <_fwalk_sglue+0x38>
 801a790:	4629      	mov	r1, r5
 801a792:	4638      	mov	r0, r7
 801a794:	47c0      	blx	r8
 801a796:	4306      	orrs	r6, r0
 801a798:	3568      	adds	r5, #104	@ 0x68
 801a79a:	e7e9      	b.n	801a770 <_fwalk_sglue+0x10>

0801a79c <_fwrite_r>:
 801a79c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a7a0:	9c08      	ldr	r4, [sp, #32]
 801a7a2:	468a      	mov	sl, r1
 801a7a4:	4690      	mov	r8, r2
 801a7a6:	fb02 f903 	mul.w	r9, r2, r3
 801a7aa:	4606      	mov	r6, r0
 801a7ac:	b118      	cbz	r0, 801a7b6 <_fwrite_r+0x1a>
 801a7ae:	6a03      	ldr	r3, [r0, #32]
 801a7b0:	b90b      	cbnz	r3, 801a7b6 <_fwrite_r+0x1a>
 801a7b2:	f7ff ffbd 	bl	801a730 <__sinit>
 801a7b6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801a7b8:	07dd      	lsls	r5, r3, #31
 801a7ba:	d405      	bmi.n	801a7c8 <_fwrite_r+0x2c>
 801a7bc:	89a3      	ldrh	r3, [r4, #12]
 801a7be:	0598      	lsls	r0, r3, #22
 801a7c0:	d402      	bmi.n	801a7c8 <_fwrite_r+0x2c>
 801a7c2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801a7c4:	f000 fa89 	bl	801acda <__retarget_lock_acquire_recursive>
 801a7c8:	89a3      	ldrh	r3, [r4, #12]
 801a7ca:	0719      	lsls	r1, r3, #28
 801a7cc:	d516      	bpl.n	801a7fc <_fwrite_r+0x60>
 801a7ce:	6923      	ldr	r3, [r4, #16]
 801a7d0:	b1a3      	cbz	r3, 801a7fc <_fwrite_r+0x60>
 801a7d2:	2500      	movs	r5, #0
 801a7d4:	454d      	cmp	r5, r9
 801a7d6:	d01f      	beq.n	801a818 <_fwrite_r+0x7c>
 801a7d8:	68a7      	ldr	r7, [r4, #8]
 801a7da:	f81a 1005 	ldrb.w	r1, [sl, r5]
 801a7de:	3f01      	subs	r7, #1
 801a7e0:	2f00      	cmp	r7, #0
 801a7e2:	60a7      	str	r7, [r4, #8]
 801a7e4:	da04      	bge.n	801a7f0 <_fwrite_r+0x54>
 801a7e6:	69a3      	ldr	r3, [r4, #24]
 801a7e8:	429f      	cmp	r7, r3
 801a7ea:	db0f      	blt.n	801a80c <_fwrite_r+0x70>
 801a7ec:	290a      	cmp	r1, #10
 801a7ee:	d00d      	beq.n	801a80c <_fwrite_r+0x70>
 801a7f0:	6823      	ldr	r3, [r4, #0]
 801a7f2:	1c5a      	adds	r2, r3, #1
 801a7f4:	6022      	str	r2, [r4, #0]
 801a7f6:	7019      	strb	r1, [r3, #0]
 801a7f8:	3501      	adds	r5, #1
 801a7fa:	e7eb      	b.n	801a7d4 <_fwrite_r+0x38>
 801a7fc:	4621      	mov	r1, r4
 801a7fe:	4630      	mov	r0, r6
 801a800:	f000 f92c 	bl	801aa5c <__swsetup_r>
 801a804:	2800      	cmp	r0, #0
 801a806:	d0e4      	beq.n	801a7d2 <_fwrite_r+0x36>
 801a808:	2500      	movs	r5, #0
 801a80a:	e005      	b.n	801a818 <_fwrite_r+0x7c>
 801a80c:	4622      	mov	r2, r4
 801a80e:	4630      	mov	r0, r6
 801a810:	f000 f8e6 	bl	801a9e0 <__swbuf_r>
 801a814:	3001      	adds	r0, #1
 801a816:	d1ef      	bne.n	801a7f8 <_fwrite_r+0x5c>
 801a818:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801a81a:	07da      	lsls	r2, r3, #31
 801a81c:	d405      	bmi.n	801a82a <_fwrite_r+0x8e>
 801a81e:	89a3      	ldrh	r3, [r4, #12]
 801a820:	059b      	lsls	r3, r3, #22
 801a822:	d402      	bmi.n	801a82a <_fwrite_r+0x8e>
 801a824:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801a826:	f000 fa59 	bl	801acdc <__retarget_lock_release_recursive>
 801a82a:	fbb5 f0f8 	udiv	r0, r5, r8
 801a82e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

0801a834 <fwrite>:
 801a834:	b507      	push	{r0, r1, r2, lr}
 801a836:	9300      	str	r3, [sp, #0]
 801a838:	4613      	mov	r3, r2
 801a83a:	460a      	mov	r2, r1
 801a83c:	4601      	mov	r1, r0
 801a83e:	4803      	ldr	r0, [pc, #12]	@ (801a84c <fwrite+0x18>)
 801a840:	6800      	ldr	r0, [r0, #0]
 801a842:	f7ff ffab 	bl	801a79c <_fwrite_r>
 801a846:	b003      	add	sp, #12
 801a848:	f85d fb04 	ldr.w	pc, [sp], #4
 801a84c:	20000438 	.word	0x20000438

0801a850 <iprintf>:
 801a850:	b40f      	push	{r0, r1, r2, r3}
 801a852:	b507      	push	{r0, r1, r2, lr}
 801a854:	4906      	ldr	r1, [pc, #24]	@ (801a870 <iprintf+0x20>)
 801a856:	ab04      	add	r3, sp, #16
 801a858:	6808      	ldr	r0, [r1, #0]
 801a85a:	f853 2b04 	ldr.w	r2, [r3], #4
 801a85e:	6881      	ldr	r1, [r0, #8]
 801a860:	9301      	str	r3, [sp, #4]
 801a862:	f000 fc51 	bl	801b108 <_vfiprintf_r>
 801a866:	b003      	add	sp, #12
 801a868:	f85d eb04 	ldr.w	lr, [sp], #4
 801a86c:	b004      	add	sp, #16
 801a86e:	4770      	bx	lr
 801a870:	20000438 	.word	0x20000438

0801a874 <sniprintf>:
 801a874:	b40c      	push	{r2, r3}
 801a876:	b530      	push	{r4, r5, lr}
 801a878:	4b18      	ldr	r3, [pc, #96]	@ (801a8dc <sniprintf+0x68>)
 801a87a:	1e0c      	subs	r4, r1, #0
 801a87c:	681d      	ldr	r5, [r3, #0]
 801a87e:	b09d      	sub	sp, #116	@ 0x74
 801a880:	da08      	bge.n	801a894 <sniprintf+0x20>
 801a882:	238b      	movs	r3, #139	@ 0x8b
 801a884:	602b      	str	r3, [r5, #0]
 801a886:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801a88a:	b01d      	add	sp, #116	@ 0x74
 801a88c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801a890:	b002      	add	sp, #8
 801a892:	4770      	bx	lr
 801a894:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801a898:	f8ad 3014 	strh.w	r3, [sp, #20]
 801a89c:	f04f 0300 	mov.w	r3, #0
 801a8a0:	931b      	str	r3, [sp, #108]	@ 0x6c
 801a8a2:	bf14      	ite	ne
 801a8a4:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 801a8a8:	4623      	moveq	r3, r4
 801a8aa:	9304      	str	r3, [sp, #16]
 801a8ac:	9307      	str	r3, [sp, #28]
 801a8ae:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801a8b2:	9002      	str	r0, [sp, #8]
 801a8b4:	9006      	str	r0, [sp, #24]
 801a8b6:	f8ad 3016 	strh.w	r3, [sp, #22]
 801a8ba:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801a8bc:	ab21      	add	r3, sp, #132	@ 0x84
 801a8be:	a902      	add	r1, sp, #8
 801a8c0:	4628      	mov	r0, r5
 801a8c2:	9301      	str	r3, [sp, #4]
 801a8c4:	f000 fafa 	bl	801aebc <_svfiprintf_r>
 801a8c8:	1c43      	adds	r3, r0, #1
 801a8ca:	bfbc      	itt	lt
 801a8cc:	238b      	movlt	r3, #139	@ 0x8b
 801a8ce:	602b      	strlt	r3, [r5, #0]
 801a8d0:	2c00      	cmp	r4, #0
 801a8d2:	d0da      	beq.n	801a88a <sniprintf+0x16>
 801a8d4:	9b02      	ldr	r3, [sp, #8]
 801a8d6:	2200      	movs	r2, #0
 801a8d8:	701a      	strb	r2, [r3, #0]
 801a8da:	e7d6      	b.n	801a88a <sniprintf+0x16>
 801a8dc:	20000438 	.word	0x20000438

0801a8e0 <__sread>:
 801a8e0:	b510      	push	{r4, lr}
 801a8e2:	460c      	mov	r4, r1
 801a8e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a8e8:	f000 f998 	bl	801ac1c <_read_r>
 801a8ec:	2800      	cmp	r0, #0
 801a8ee:	bfab      	itete	ge
 801a8f0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801a8f2:	89a3      	ldrhlt	r3, [r4, #12]
 801a8f4:	181b      	addge	r3, r3, r0
 801a8f6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801a8fa:	bfac      	ite	ge
 801a8fc:	6563      	strge	r3, [r4, #84]	@ 0x54
 801a8fe:	81a3      	strhlt	r3, [r4, #12]
 801a900:	bd10      	pop	{r4, pc}

0801a902 <__swrite>:
 801a902:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a906:	461f      	mov	r7, r3
 801a908:	898b      	ldrh	r3, [r1, #12]
 801a90a:	05db      	lsls	r3, r3, #23
 801a90c:	4605      	mov	r5, r0
 801a90e:	460c      	mov	r4, r1
 801a910:	4616      	mov	r6, r2
 801a912:	d505      	bpl.n	801a920 <__swrite+0x1e>
 801a914:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a918:	2302      	movs	r3, #2
 801a91a:	2200      	movs	r2, #0
 801a91c:	f000 f96c 	bl	801abf8 <_lseek_r>
 801a920:	89a3      	ldrh	r3, [r4, #12]
 801a922:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a926:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801a92a:	81a3      	strh	r3, [r4, #12]
 801a92c:	4632      	mov	r2, r6
 801a92e:	463b      	mov	r3, r7
 801a930:	4628      	mov	r0, r5
 801a932:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a936:	f000 b993 	b.w	801ac60 <_write_r>

0801a93a <__sseek>:
 801a93a:	b510      	push	{r4, lr}
 801a93c:	460c      	mov	r4, r1
 801a93e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a942:	f000 f959 	bl	801abf8 <_lseek_r>
 801a946:	1c43      	adds	r3, r0, #1
 801a948:	89a3      	ldrh	r3, [r4, #12]
 801a94a:	bf15      	itete	ne
 801a94c:	6560      	strne	r0, [r4, #84]	@ 0x54
 801a94e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801a952:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801a956:	81a3      	strheq	r3, [r4, #12]
 801a958:	bf18      	it	ne
 801a95a:	81a3      	strhne	r3, [r4, #12]
 801a95c:	bd10      	pop	{r4, pc}

0801a95e <__sclose>:
 801a95e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a962:	f000 b939 	b.w	801abd8 <_close_r>

0801a966 <_vsniprintf_r>:
 801a966:	b530      	push	{r4, r5, lr}
 801a968:	4614      	mov	r4, r2
 801a96a:	2c00      	cmp	r4, #0
 801a96c:	b09b      	sub	sp, #108	@ 0x6c
 801a96e:	4605      	mov	r5, r0
 801a970:	461a      	mov	r2, r3
 801a972:	da05      	bge.n	801a980 <_vsniprintf_r+0x1a>
 801a974:	238b      	movs	r3, #139	@ 0x8b
 801a976:	6003      	str	r3, [r0, #0]
 801a978:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801a97c:	b01b      	add	sp, #108	@ 0x6c
 801a97e:	bd30      	pop	{r4, r5, pc}
 801a980:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801a984:	f8ad 300c 	strh.w	r3, [sp, #12]
 801a988:	f04f 0300 	mov.w	r3, #0
 801a98c:	9319      	str	r3, [sp, #100]	@ 0x64
 801a98e:	bf14      	ite	ne
 801a990:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 801a994:	4623      	moveq	r3, r4
 801a996:	9302      	str	r3, [sp, #8]
 801a998:	9305      	str	r3, [sp, #20]
 801a99a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801a99e:	9100      	str	r1, [sp, #0]
 801a9a0:	9104      	str	r1, [sp, #16]
 801a9a2:	f8ad 300e 	strh.w	r3, [sp, #14]
 801a9a6:	4669      	mov	r1, sp
 801a9a8:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801a9aa:	f000 fa87 	bl	801aebc <_svfiprintf_r>
 801a9ae:	1c43      	adds	r3, r0, #1
 801a9b0:	bfbc      	itt	lt
 801a9b2:	238b      	movlt	r3, #139	@ 0x8b
 801a9b4:	602b      	strlt	r3, [r5, #0]
 801a9b6:	2c00      	cmp	r4, #0
 801a9b8:	d0e0      	beq.n	801a97c <_vsniprintf_r+0x16>
 801a9ba:	9b00      	ldr	r3, [sp, #0]
 801a9bc:	2200      	movs	r2, #0
 801a9be:	701a      	strb	r2, [r3, #0]
 801a9c0:	e7dc      	b.n	801a97c <_vsniprintf_r+0x16>
	...

0801a9c4 <vsniprintf>:
 801a9c4:	b507      	push	{r0, r1, r2, lr}
 801a9c6:	9300      	str	r3, [sp, #0]
 801a9c8:	4613      	mov	r3, r2
 801a9ca:	460a      	mov	r2, r1
 801a9cc:	4601      	mov	r1, r0
 801a9ce:	4803      	ldr	r0, [pc, #12]	@ (801a9dc <vsniprintf+0x18>)
 801a9d0:	6800      	ldr	r0, [r0, #0]
 801a9d2:	f7ff ffc8 	bl	801a966 <_vsniprintf_r>
 801a9d6:	b003      	add	sp, #12
 801a9d8:	f85d fb04 	ldr.w	pc, [sp], #4
 801a9dc:	20000438 	.word	0x20000438

0801a9e0 <__swbuf_r>:
 801a9e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a9e2:	460e      	mov	r6, r1
 801a9e4:	4614      	mov	r4, r2
 801a9e6:	4605      	mov	r5, r0
 801a9e8:	b118      	cbz	r0, 801a9f2 <__swbuf_r+0x12>
 801a9ea:	6a03      	ldr	r3, [r0, #32]
 801a9ec:	b90b      	cbnz	r3, 801a9f2 <__swbuf_r+0x12>
 801a9ee:	f7ff fe9f 	bl	801a730 <__sinit>
 801a9f2:	69a3      	ldr	r3, [r4, #24]
 801a9f4:	60a3      	str	r3, [r4, #8]
 801a9f6:	89a3      	ldrh	r3, [r4, #12]
 801a9f8:	071a      	lsls	r2, r3, #28
 801a9fa:	d501      	bpl.n	801aa00 <__swbuf_r+0x20>
 801a9fc:	6923      	ldr	r3, [r4, #16]
 801a9fe:	b943      	cbnz	r3, 801aa12 <__swbuf_r+0x32>
 801aa00:	4621      	mov	r1, r4
 801aa02:	4628      	mov	r0, r5
 801aa04:	f000 f82a 	bl	801aa5c <__swsetup_r>
 801aa08:	b118      	cbz	r0, 801aa12 <__swbuf_r+0x32>
 801aa0a:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 801aa0e:	4638      	mov	r0, r7
 801aa10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801aa12:	6823      	ldr	r3, [r4, #0]
 801aa14:	6922      	ldr	r2, [r4, #16]
 801aa16:	1a98      	subs	r0, r3, r2
 801aa18:	6963      	ldr	r3, [r4, #20]
 801aa1a:	b2f6      	uxtb	r6, r6
 801aa1c:	4283      	cmp	r3, r0
 801aa1e:	4637      	mov	r7, r6
 801aa20:	dc05      	bgt.n	801aa2e <__swbuf_r+0x4e>
 801aa22:	4621      	mov	r1, r4
 801aa24:	4628      	mov	r0, r5
 801aa26:	f000 fe97 	bl	801b758 <_fflush_r>
 801aa2a:	2800      	cmp	r0, #0
 801aa2c:	d1ed      	bne.n	801aa0a <__swbuf_r+0x2a>
 801aa2e:	68a3      	ldr	r3, [r4, #8]
 801aa30:	3b01      	subs	r3, #1
 801aa32:	60a3      	str	r3, [r4, #8]
 801aa34:	6823      	ldr	r3, [r4, #0]
 801aa36:	1c5a      	adds	r2, r3, #1
 801aa38:	6022      	str	r2, [r4, #0]
 801aa3a:	701e      	strb	r6, [r3, #0]
 801aa3c:	6962      	ldr	r2, [r4, #20]
 801aa3e:	1c43      	adds	r3, r0, #1
 801aa40:	429a      	cmp	r2, r3
 801aa42:	d004      	beq.n	801aa4e <__swbuf_r+0x6e>
 801aa44:	89a3      	ldrh	r3, [r4, #12]
 801aa46:	07db      	lsls	r3, r3, #31
 801aa48:	d5e1      	bpl.n	801aa0e <__swbuf_r+0x2e>
 801aa4a:	2e0a      	cmp	r6, #10
 801aa4c:	d1df      	bne.n	801aa0e <__swbuf_r+0x2e>
 801aa4e:	4621      	mov	r1, r4
 801aa50:	4628      	mov	r0, r5
 801aa52:	f000 fe81 	bl	801b758 <_fflush_r>
 801aa56:	2800      	cmp	r0, #0
 801aa58:	d0d9      	beq.n	801aa0e <__swbuf_r+0x2e>
 801aa5a:	e7d6      	b.n	801aa0a <__swbuf_r+0x2a>

0801aa5c <__swsetup_r>:
 801aa5c:	b538      	push	{r3, r4, r5, lr}
 801aa5e:	4b29      	ldr	r3, [pc, #164]	@ (801ab04 <__swsetup_r+0xa8>)
 801aa60:	4605      	mov	r5, r0
 801aa62:	6818      	ldr	r0, [r3, #0]
 801aa64:	460c      	mov	r4, r1
 801aa66:	b118      	cbz	r0, 801aa70 <__swsetup_r+0x14>
 801aa68:	6a03      	ldr	r3, [r0, #32]
 801aa6a:	b90b      	cbnz	r3, 801aa70 <__swsetup_r+0x14>
 801aa6c:	f7ff fe60 	bl	801a730 <__sinit>
 801aa70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801aa74:	0719      	lsls	r1, r3, #28
 801aa76:	d422      	bmi.n	801aabe <__swsetup_r+0x62>
 801aa78:	06da      	lsls	r2, r3, #27
 801aa7a:	d407      	bmi.n	801aa8c <__swsetup_r+0x30>
 801aa7c:	2209      	movs	r2, #9
 801aa7e:	602a      	str	r2, [r5, #0]
 801aa80:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801aa84:	81a3      	strh	r3, [r4, #12]
 801aa86:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801aa8a:	e033      	b.n	801aaf4 <__swsetup_r+0x98>
 801aa8c:	0758      	lsls	r0, r3, #29
 801aa8e:	d512      	bpl.n	801aab6 <__swsetup_r+0x5a>
 801aa90:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801aa92:	b141      	cbz	r1, 801aaa6 <__swsetup_r+0x4a>
 801aa94:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801aa98:	4299      	cmp	r1, r3
 801aa9a:	d002      	beq.n	801aaa2 <__swsetup_r+0x46>
 801aa9c:	4628      	mov	r0, r5
 801aa9e:	f000 f95f 	bl	801ad60 <_free_r>
 801aaa2:	2300      	movs	r3, #0
 801aaa4:	6363      	str	r3, [r4, #52]	@ 0x34
 801aaa6:	89a3      	ldrh	r3, [r4, #12]
 801aaa8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801aaac:	81a3      	strh	r3, [r4, #12]
 801aaae:	2300      	movs	r3, #0
 801aab0:	6063      	str	r3, [r4, #4]
 801aab2:	6923      	ldr	r3, [r4, #16]
 801aab4:	6023      	str	r3, [r4, #0]
 801aab6:	89a3      	ldrh	r3, [r4, #12]
 801aab8:	f043 0308 	orr.w	r3, r3, #8
 801aabc:	81a3      	strh	r3, [r4, #12]
 801aabe:	6923      	ldr	r3, [r4, #16]
 801aac0:	b94b      	cbnz	r3, 801aad6 <__swsetup_r+0x7a>
 801aac2:	89a3      	ldrh	r3, [r4, #12]
 801aac4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801aac8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801aacc:	d003      	beq.n	801aad6 <__swsetup_r+0x7a>
 801aace:	4621      	mov	r1, r4
 801aad0:	4628      	mov	r0, r5
 801aad2:	f000 fea1 	bl	801b818 <__smakebuf_r>
 801aad6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801aada:	f013 0201 	ands.w	r2, r3, #1
 801aade:	d00a      	beq.n	801aaf6 <__swsetup_r+0x9a>
 801aae0:	2200      	movs	r2, #0
 801aae2:	60a2      	str	r2, [r4, #8]
 801aae4:	6962      	ldr	r2, [r4, #20]
 801aae6:	4252      	negs	r2, r2
 801aae8:	61a2      	str	r2, [r4, #24]
 801aaea:	6922      	ldr	r2, [r4, #16]
 801aaec:	b942      	cbnz	r2, 801ab00 <__swsetup_r+0xa4>
 801aaee:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801aaf2:	d1c5      	bne.n	801aa80 <__swsetup_r+0x24>
 801aaf4:	bd38      	pop	{r3, r4, r5, pc}
 801aaf6:	0799      	lsls	r1, r3, #30
 801aaf8:	bf58      	it	pl
 801aafa:	6962      	ldrpl	r2, [r4, #20]
 801aafc:	60a2      	str	r2, [r4, #8]
 801aafe:	e7f4      	b.n	801aaea <__swsetup_r+0x8e>
 801ab00:	2000      	movs	r0, #0
 801ab02:	e7f7      	b.n	801aaf4 <__swsetup_r+0x98>
 801ab04:	20000438 	.word	0x20000438

0801ab08 <memcmp>:
 801ab08:	b510      	push	{r4, lr}
 801ab0a:	3901      	subs	r1, #1
 801ab0c:	4402      	add	r2, r0
 801ab0e:	4290      	cmp	r0, r2
 801ab10:	d101      	bne.n	801ab16 <memcmp+0xe>
 801ab12:	2000      	movs	r0, #0
 801ab14:	e005      	b.n	801ab22 <memcmp+0x1a>
 801ab16:	7803      	ldrb	r3, [r0, #0]
 801ab18:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801ab1c:	42a3      	cmp	r3, r4
 801ab1e:	d001      	beq.n	801ab24 <memcmp+0x1c>
 801ab20:	1b18      	subs	r0, r3, r4
 801ab22:	bd10      	pop	{r4, pc}
 801ab24:	3001      	adds	r0, #1
 801ab26:	e7f2      	b.n	801ab0e <memcmp+0x6>

0801ab28 <memmove>:
 801ab28:	4288      	cmp	r0, r1
 801ab2a:	b510      	push	{r4, lr}
 801ab2c:	eb01 0402 	add.w	r4, r1, r2
 801ab30:	d902      	bls.n	801ab38 <memmove+0x10>
 801ab32:	4284      	cmp	r4, r0
 801ab34:	4623      	mov	r3, r4
 801ab36:	d807      	bhi.n	801ab48 <memmove+0x20>
 801ab38:	1e43      	subs	r3, r0, #1
 801ab3a:	42a1      	cmp	r1, r4
 801ab3c:	d008      	beq.n	801ab50 <memmove+0x28>
 801ab3e:	f811 2b01 	ldrb.w	r2, [r1], #1
 801ab42:	f803 2f01 	strb.w	r2, [r3, #1]!
 801ab46:	e7f8      	b.n	801ab3a <memmove+0x12>
 801ab48:	4402      	add	r2, r0
 801ab4a:	4601      	mov	r1, r0
 801ab4c:	428a      	cmp	r2, r1
 801ab4e:	d100      	bne.n	801ab52 <memmove+0x2a>
 801ab50:	bd10      	pop	{r4, pc}
 801ab52:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801ab56:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801ab5a:	e7f7      	b.n	801ab4c <memmove+0x24>

0801ab5c <memset>:
 801ab5c:	4402      	add	r2, r0
 801ab5e:	4603      	mov	r3, r0
 801ab60:	4293      	cmp	r3, r2
 801ab62:	d100      	bne.n	801ab66 <memset+0xa>
 801ab64:	4770      	bx	lr
 801ab66:	f803 1b01 	strb.w	r1, [r3], #1
 801ab6a:	e7f9      	b.n	801ab60 <memset+0x4>

0801ab6c <strchr>:
 801ab6c:	b2c9      	uxtb	r1, r1
 801ab6e:	4603      	mov	r3, r0
 801ab70:	4618      	mov	r0, r3
 801ab72:	f813 2b01 	ldrb.w	r2, [r3], #1
 801ab76:	b112      	cbz	r2, 801ab7e <strchr+0x12>
 801ab78:	428a      	cmp	r2, r1
 801ab7a:	d1f9      	bne.n	801ab70 <strchr+0x4>
 801ab7c:	4770      	bx	lr
 801ab7e:	2900      	cmp	r1, #0
 801ab80:	bf18      	it	ne
 801ab82:	2000      	movne	r0, #0
 801ab84:	4770      	bx	lr

0801ab86 <strncmp>:
 801ab86:	b510      	push	{r4, lr}
 801ab88:	b16a      	cbz	r2, 801aba6 <strncmp+0x20>
 801ab8a:	3901      	subs	r1, #1
 801ab8c:	1884      	adds	r4, r0, r2
 801ab8e:	f810 2b01 	ldrb.w	r2, [r0], #1
 801ab92:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801ab96:	429a      	cmp	r2, r3
 801ab98:	d103      	bne.n	801aba2 <strncmp+0x1c>
 801ab9a:	42a0      	cmp	r0, r4
 801ab9c:	d001      	beq.n	801aba2 <strncmp+0x1c>
 801ab9e:	2a00      	cmp	r2, #0
 801aba0:	d1f5      	bne.n	801ab8e <strncmp+0x8>
 801aba2:	1ad0      	subs	r0, r2, r3
 801aba4:	bd10      	pop	{r4, pc}
 801aba6:	4610      	mov	r0, r2
 801aba8:	e7fc      	b.n	801aba4 <strncmp+0x1e>

0801abaa <strstr>:
 801abaa:	780a      	ldrb	r2, [r1, #0]
 801abac:	b570      	push	{r4, r5, r6, lr}
 801abae:	b96a      	cbnz	r2, 801abcc <strstr+0x22>
 801abb0:	bd70      	pop	{r4, r5, r6, pc}
 801abb2:	429a      	cmp	r2, r3
 801abb4:	d109      	bne.n	801abca <strstr+0x20>
 801abb6:	460c      	mov	r4, r1
 801abb8:	4605      	mov	r5, r0
 801abba:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 801abbe:	2b00      	cmp	r3, #0
 801abc0:	d0f6      	beq.n	801abb0 <strstr+0x6>
 801abc2:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 801abc6:	429e      	cmp	r6, r3
 801abc8:	d0f7      	beq.n	801abba <strstr+0x10>
 801abca:	3001      	adds	r0, #1
 801abcc:	7803      	ldrb	r3, [r0, #0]
 801abce:	2b00      	cmp	r3, #0
 801abd0:	d1ef      	bne.n	801abb2 <strstr+0x8>
 801abd2:	4618      	mov	r0, r3
 801abd4:	e7ec      	b.n	801abb0 <strstr+0x6>
	...

0801abd8 <_close_r>:
 801abd8:	b538      	push	{r3, r4, r5, lr}
 801abda:	4d06      	ldr	r5, [pc, #24]	@ (801abf4 <_close_r+0x1c>)
 801abdc:	2300      	movs	r3, #0
 801abde:	4604      	mov	r4, r0
 801abe0:	4608      	mov	r0, r1
 801abe2:	602b      	str	r3, [r5, #0]
 801abe4:	f7e8 fce6 	bl	80035b4 <_close>
 801abe8:	1c43      	adds	r3, r0, #1
 801abea:	d102      	bne.n	801abf2 <_close_r+0x1a>
 801abec:	682b      	ldr	r3, [r5, #0]
 801abee:	b103      	cbz	r3, 801abf2 <_close_r+0x1a>
 801abf0:	6023      	str	r3, [r4, #0]
 801abf2:	bd38      	pop	{r3, r4, r5, pc}
 801abf4:	2000b604 	.word	0x2000b604

0801abf8 <_lseek_r>:
 801abf8:	b538      	push	{r3, r4, r5, lr}
 801abfa:	4d07      	ldr	r5, [pc, #28]	@ (801ac18 <_lseek_r+0x20>)
 801abfc:	4604      	mov	r4, r0
 801abfe:	4608      	mov	r0, r1
 801ac00:	4611      	mov	r1, r2
 801ac02:	2200      	movs	r2, #0
 801ac04:	602a      	str	r2, [r5, #0]
 801ac06:	461a      	mov	r2, r3
 801ac08:	f7e8 fcfb 	bl	8003602 <_lseek>
 801ac0c:	1c43      	adds	r3, r0, #1
 801ac0e:	d102      	bne.n	801ac16 <_lseek_r+0x1e>
 801ac10:	682b      	ldr	r3, [r5, #0]
 801ac12:	b103      	cbz	r3, 801ac16 <_lseek_r+0x1e>
 801ac14:	6023      	str	r3, [r4, #0]
 801ac16:	bd38      	pop	{r3, r4, r5, pc}
 801ac18:	2000b604 	.word	0x2000b604

0801ac1c <_read_r>:
 801ac1c:	b538      	push	{r3, r4, r5, lr}
 801ac1e:	4d07      	ldr	r5, [pc, #28]	@ (801ac3c <_read_r+0x20>)
 801ac20:	4604      	mov	r4, r0
 801ac22:	4608      	mov	r0, r1
 801ac24:	4611      	mov	r1, r2
 801ac26:	2200      	movs	r2, #0
 801ac28:	602a      	str	r2, [r5, #0]
 801ac2a:	461a      	mov	r2, r3
 801ac2c:	f7e8 fc89 	bl	8003542 <_read>
 801ac30:	1c43      	adds	r3, r0, #1
 801ac32:	d102      	bne.n	801ac3a <_read_r+0x1e>
 801ac34:	682b      	ldr	r3, [r5, #0]
 801ac36:	b103      	cbz	r3, 801ac3a <_read_r+0x1e>
 801ac38:	6023      	str	r3, [r4, #0]
 801ac3a:	bd38      	pop	{r3, r4, r5, pc}
 801ac3c:	2000b604 	.word	0x2000b604

0801ac40 <_sbrk_r>:
 801ac40:	b538      	push	{r3, r4, r5, lr}
 801ac42:	4d06      	ldr	r5, [pc, #24]	@ (801ac5c <_sbrk_r+0x1c>)
 801ac44:	2300      	movs	r3, #0
 801ac46:	4604      	mov	r4, r0
 801ac48:	4608      	mov	r0, r1
 801ac4a:	602b      	str	r3, [r5, #0]
 801ac4c:	f7e8 fce6 	bl	800361c <_sbrk>
 801ac50:	1c43      	adds	r3, r0, #1
 801ac52:	d102      	bne.n	801ac5a <_sbrk_r+0x1a>
 801ac54:	682b      	ldr	r3, [r5, #0]
 801ac56:	b103      	cbz	r3, 801ac5a <_sbrk_r+0x1a>
 801ac58:	6023      	str	r3, [r4, #0]
 801ac5a:	bd38      	pop	{r3, r4, r5, pc}
 801ac5c:	2000b604 	.word	0x2000b604

0801ac60 <_write_r>:
 801ac60:	b538      	push	{r3, r4, r5, lr}
 801ac62:	4d07      	ldr	r5, [pc, #28]	@ (801ac80 <_write_r+0x20>)
 801ac64:	4604      	mov	r4, r0
 801ac66:	4608      	mov	r0, r1
 801ac68:	4611      	mov	r1, r2
 801ac6a:	2200      	movs	r2, #0
 801ac6c:	602a      	str	r2, [r5, #0]
 801ac6e:	461a      	mov	r2, r3
 801ac70:	f7e8 fc84 	bl	800357c <_write>
 801ac74:	1c43      	adds	r3, r0, #1
 801ac76:	d102      	bne.n	801ac7e <_write_r+0x1e>
 801ac78:	682b      	ldr	r3, [r5, #0]
 801ac7a:	b103      	cbz	r3, 801ac7e <_write_r+0x1e>
 801ac7c:	6023      	str	r3, [r4, #0]
 801ac7e:	bd38      	pop	{r3, r4, r5, pc}
 801ac80:	2000b604 	.word	0x2000b604

0801ac84 <__errno>:
 801ac84:	4b01      	ldr	r3, [pc, #4]	@ (801ac8c <__errno+0x8>)
 801ac86:	6818      	ldr	r0, [r3, #0]
 801ac88:	4770      	bx	lr
 801ac8a:	bf00      	nop
 801ac8c:	20000438 	.word	0x20000438

0801ac90 <__libc_init_array>:
 801ac90:	b570      	push	{r4, r5, r6, lr}
 801ac92:	4d0d      	ldr	r5, [pc, #52]	@ (801acc8 <__libc_init_array+0x38>)
 801ac94:	4c0d      	ldr	r4, [pc, #52]	@ (801accc <__libc_init_array+0x3c>)
 801ac96:	1b64      	subs	r4, r4, r5
 801ac98:	10a4      	asrs	r4, r4, #2
 801ac9a:	2600      	movs	r6, #0
 801ac9c:	42a6      	cmp	r6, r4
 801ac9e:	d109      	bne.n	801acb4 <__libc_init_array+0x24>
 801aca0:	4d0b      	ldr	r5, [pc, #44]	@ (801acd0 <__libc_init_array+0x40>)
 801aca2:	4c0c      	ldr	r4, [pc, #48]	@ (801acd4 <__libc_init_array+0x44>)
 801aca4:	f001 ffd2 	bl	801cc4c <_init>
 801aca8:	1b64      	subs	r4, r4, r5
 801acaa:	10a4      	asrs	r4, r4, #2
 801acac:	2600      	movs	r6, #0
 801acae:	42a6      	cmp	r6, r4
 801acb0:	d105      	bne.n	801acbe <__libc_init_array+0x2e>
 801acb2:	bd70      	pop	{r4, r5, r6, pc}
 801acb4:	f855 3b04 	ldr.w	r3, [r5], #4
 801acb8:	4798      	blx	r3
 801acba:	3601      	adds	r6, #1
 801acbc:	e7ee      	b.n	801ac9c <__libc_init_array+0xc>
 801acbe:	f855 3b04 	ldr.w	r3, [r5], #4
 801acc2:	4798      	blx	r3
 801acc4:	3601      	adds	r6, #1
 801acc6:	e7f2      	b.n	801acae <__libc_init_array+0x1e>
 801acc8:	0801e8bc 	.word	0x0801e8bc
 801accc:	0801e8bc 	.word	0x0801e8bc
 801acd0:	0801e8bc 	.word	0x0801e8bc
 801acd4:	0801e8c8 	.word	0x0801e8c8

0801acd8 <__retarget_lock_init_recursive>:
 801acd8:	4770      	bx	lr

0801acda <__retarget_lock_acquire_recursive>:
 801acda:	4770      	bx	lr

0801acdc <__retarget_lock_release_recursive>:
 801acdc:	4770      	bx	lr

0801acde <strcpy>:
 801acde:	4603      	mov	r3, r0
 801ace0:	f811 2b01 	ldrb.w	r2, [r1], #1
 801ace4:	f803 2b01 	strb.w	r2, [r3], #1
 801ace8:	2a00      	cmp	r2, #0
 801acea:	d1f9      	bne.n	801ace0 <strcpy+0x2>
 801acec:	4770      	bx	lr

0801acee <memcpy>:
 801acee:	440a      	add	r2, r1
 801acf0:	4291      	cmp	r1, r2
 801acf2:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 801acf6:	d100      	bne.n	801acfa <memcpy+0xc>
 801acf8:	4770      	bx	lr
 801acfa:	b510      	push	{r4, lr}
 801acfc:	f811 4b01 	ldrb.w	r4, [r1], #1
 801ad00:	f803 4f01 	strb.w	r4, [r3, #1]!
 801ad04:	4291      	cmp	r1, r2
 801ad06:	d1f9      	bne.n	801acfc <memcpy+0xe>
 801ad08:	bd10      	pop	{r4, pc}
	...

0801ad0c <__assert_func>:
 801ad0c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801ad0e:	4614      	mov	r4, r2
 801ad10:	461a      	mov	r2, r3
 801ad12:	4b09      	ldr	r3, [pc, #36]	@ (801ad38 <__assert_func+0x2c>)
 801ad14:	681b      	ldr	r3, [r3, #0]
 801ad16:	4605      	mov	r5, r0
 801ad18:	68d8      	ldr	r0, [r3, #12]
 801ad1a:	b14c      	cbz	r4, 801ad30 <__assert_func+0x24>
 801ad1c:	4b07      	ldr	r3, [pc, #28]	@ (801ad3c <__assert_func+0x30>)
 801ad1e:	9100      	str	r1, [sp, #0]
 801ad20:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801ad24:	4906      	ldr	r1, [pc, #24]	@ (801ad40 <__assert_func+0x34>)
 801ad26:	462b      	mov	r3, r5
 801ad28:	f000 fd3e 	bl	801b7a8 <fiprintf>
 801ad2c:	f000 fdd2 	bl	801b8d4 <abort>
 801ad30:	4b04      	ldr	r3, [pc, #16]	@ (801ad44 <__assert_func+0x38>)
 801ad32:	461c      	mov	r4, r3
 801ad34:	e7f3      	b.n	801ad1e <__assert_func+0x12>
 801ad36:	bf00      	nop
 801ad38:	20000438 	.word	0x20000438
 801ad3c:	0801e353 	.word	0x0801e353
 801ad40:	0801e360 	.word	0x0801e360
 801ad44:	0801e38e 	.word	0x0801e38e

0801ad48 <__env_lock>:
 801ad48:	4801      	ldr	r0, [pc, #4]	@ (801ad50 <__env_lock+0x8>)
 801ad4a:	f7ff bfc6 	b.w	801acda <__retarget_lock_acquire_recursive>
 801ad4e:	bf00      	nop
 801ad50:	2000b608 	.word	0x2000b608

0801ad54 <__env_unlock>:
 801ad54:	4801      	ldr	r0, [pc, #4]	@ (801ad5c <__env_unlock+0x8>)
 801ad56:	f7ff bfc1 	b.w	801acdc <__retarget_lock_release_recursive>
 801ad5a:	bf00      	nop
 801ad5c:	2000b608 	.word	0x2000b608

0801ad60 <_free_r>:
 801ad60:	b538      	push	{r3, r4, r5, lr}
 801ad62:	4605      	mov	r5, r0
 801ad64:	2900      	cmp	r1, #0
 801ad66:	d041      	beq.n	801adec <_free_r+0x8c>
 801ad68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801ad6c:	1f0c      	subs	r4, r1, #4
 801ad6e:	2b00      	cmp	r3, #0
 801ad70:	bfb8      	it	lt
 801ad72:	18e4      	addlt	r4, r4, r3
 801ad74:	f7ff fb2a 	bl	801a3cc <__malloc_lock>
 801ad78:	4a1d      	ldr	r2, [pc, #116]	@ (801adf0 <_free_r+0x90>)
 801ad7a:	6813      	ldr	r3, [r2, #0]
 801ad7c:	b933      	cbnz	r3, 801ad8c <_free_r+0x2c>
 801ad7e:	6063      	str	r3, [r4, #4]
 801ad80:	6014      	str	r4, [r2, #0]
 801ad82:	4628      	mov	r0, r5
 801ad84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801ad88:	f7ff bb26 	b.w	801a3d8 <__malloc_unlock>
 801ad8c:	42a3      	cmp	r3, r4
 801ad8e:	d908      	bls.n	801ada2 <_free_r+0x42>
 801ad90:	6820      	ldr	r0, [r4, #0]
 801ad92:	1821      	adds	r1, r4, r0
 801ad94:	428b      	cmp	r3, r1
 801ad96:	bf01      	itttt	eq
 801ad98:	6819      	ldreq	r1, [r3, #0]
 801ad9a:	685b      	ldreq	r3, [r3, #4]
 801ad9c:	1809      	addeq	r1, r1, r0
 801ad9e:	6021      	streq	r1, [r4, #0]
 801ada0:	e7ed      	b.n	801ad7e <_free_r+0x1e>
 801ada2:	461a      	mov	r2, r3
 801ada4:	685b      	ldr	r3, [r3, #4]
 801ada6:	b10b      	cbz	r3, 801adac <_free_r+0x4c>
 801ada8:	42a3      	cmp	r3, r4
 801adaa:	d9fa      	bls.n	801ada2 <_free_r+0x42>
 801adac:	6811      	ldr	r1, [r2, #0]
 801adae:	1850      	adds	r0, r2, r1
 801adb0:	42a0      	cmp	r0, r4
 801adb2:	d10b      	bne.n	801adcc <_free_r+0x6c>
 801adb4:	6820      	ldr	r0, [r4, #0]
 801adb6:	4401      	add	r1, r0
 801adb8:	1850      	adds	r0, r2, r1
 801adba:	4283      	cmp	r3, r0
 801adbc:	6011      	str	r1, [r2, #0]
 801adbe:	d1e0      	bne.n	801ad82 <_free_r+0x22>
 801adc0:	6818      	ldr	r0, [r3, #0]
 801adc2:	685b      	ldr	r3, [r3, #4]
 801adc4:	6053      	str	r3, [r2, #4]
 801adc6:	4408      	add	r0, r1
 801adc8:	6010      	str	r0, [r2, #0]
 801adca:	e7da      	b.n	801ad82 <_free_r+0x22>
 801adcc:	d902      	bls.n	801add4 <_free_r+0x74>
 801adce:	230c      	movs	r3, #12
 801add0:	602b      	str	r3, [r5, #0]
 801add2:	e7d6      	b.n	801ad82 <_free_r+0x22>
 801add4:	6820      	ldr	r0, [r4, #0]
 801add6:	1821      	adds	r1, r4, r0
 801add8:	428b      	cmp	r3, r1
 801adda:	bf04      	itt	eq
 801addc:	6819      	ldreq	r1, [r3, #0]
 801adde:	685b      	ldreq	r3, [r3, #4]
 801ade0:	6063      	str	r3, [r4, #4]
 801ade2:	bf04      	itt	eq
 801ade4:	1809      	addeq	r1, r1, r0
 801ade6:	6021      	streq	r1, [r4, #0]
 801ade8:	6054      	str	r4, [r2, #4]
 801adea:	e7ca      	b.n	801ad82 <_free_r+0x22>
 801adec:	bd38      	pop	{r3, r4, r5, pc}
 801adee:	bf00      	nop
 801adf0:	2000b4c4 	.word	0x2000b4c4

0801adf4 <_malloc_usable_size_r>:
 801adf4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801adf8:	1f18      	subs	r0, r3, #4
 801adfa:	2b00      	cmp	r3, #0
 801adfc:	bfbc      	itt	lt
 801adfe:	580b      	ldrlt	r3, [r1, r0]
 801ae00:	18c0      	addlt	r0, r0, r3
 801ae02:	4770      	bx	lr

0801ae04 <__ssputs_r>:
 801ae04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ae08:	688e      	ldr	r6, [r1, #8]
 801ae0a:	461f      	mov	r7, r3
 801ae0c:	42be      	cmp	r6, r7
 801ae0e:	680b      	ldr	r3, [r1, #0]
 801ae10:	4682      	mov	sl, r0
 801ae12:	460c      	mov	r4, r1
 801ae14:	4690      	mov	r8, r2
 801ae16:	d82d      	bhi.n	801ae74 <__ssputs_r+0x70>
 801ae18:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801ae1c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801ae20:	d026      	beq.n	801ae70 <__ssputs_r+0x6c>
 801ae22:	6965      	ldr	r5, [r4, #20]
 801ae24:	6909      	ldr	r1, [r1, #16]
 801ae26:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801ae2a:	eba3 0901 	sub.w	r9, r3, r1
 801ae2e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801ae32:	1c7b      	adds	r3, r7, #1
 801ae34:	444b      	add	r3, r9
 801ae36:	106d      	asrs	r5, r5, #1
 801ae38:	429d      	cmp	r5, r3
 801ae3a:	bf38      	it	cc
 801ae3c:	461d      	movcc	r5, r3
 801ae3e:	0553      	lsls	r3, r2, #21
 801ae40:	d527      	bpl.n	801ae92 <__ssputs_r+0x8e>
 801ae42:	4629      	mov	r1, r5
 801ae44:	f7ff fa42 	bl	801a2cc <_malloc_r>
 801ae48:	4606      	mov	r6, r0
 801ae4a:	b360      	cbz	r0, 801aea6 <__ssputs_r+0xa2>
 801ae4c:	6921      	ldr	r1, [r4, #16]
 801ae4e:	464a      	mov	r2, r9
 801ae50:	f7ff ff4d 	bl	801acee <memcpy>
 801ae54:	89a3      	ldrh	r3, [r4, #12]
 801ae56:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801ae5a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801ae5e:	81a3      	strh	r3, [r4, #12]
 801ae60:	6126      	str	r6, [r4, #16]
 801ae62:	6165      	str	r5, [r4, #20]
 801ae64:	444e      	add	r6, r9
 801ae66:	eba5 0509 	sub.w	r5, r5, r9
 801ae6a:	6026      	str	r6, [r4, #0]
 801ae6c:	60a5      	str	r5, [r4, #8]
 801ae6e:	463e      	mov	r6, r7
 801ae70:	42be      	cmp	r6, r7
 801ae72:	d900      	bls.n	801ae76 <__ssputs_r+0x72>
 801ae74:	463e      	mov	r6, r7
 801ae76:	6820      	ldr	r0, [r4, #0]
 801ae78:	4632      	mov	r2, r6
 801ae7a:	4641      	mov	r1, r8
 801ae7c:	f7ff fe54 	bl	801ab28 <memmove>
 801ae80:	68a3      	ldr	r3, [r4, #8]
 801ae82:	1b9b      	subs	r3, r3, r6
 801ae84:	60a3      	str	r3, [r4, #8]
 801ae86:	6823      	ldr	r3, [r4, #0]
 801ae88:	4433      	add	r3, r6
 801ae8a:	6023      	str	r3, [r4, #0]
 801ae8c:	2000      	movs	r0, #0
 801ae8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ae92:	462a      	mov	r2, r5
 801ae94:	f7ff fb1a 	bl	801a4cc <_realloc_r>
 801ae98:	4606      	mov	r6, r0
 801ae9a:	2800      	cmp	r0, #0
 801ae9c:	d1e0      	bne.n	801ae60 <__ssputs_r+0x5c>
 801ae9e:	6921      	ldr	r1, [r4, #16]
 801aea0:	4650      	mov	r0, sl
 801aea2:	f7ff ff5d 	bl	801ad60 <_free_r>
 801aea6:	230c      	movs	r3, #12
 801aea8:	f8ca 3000 	str.w	r3, [sl]
 801aeac:	89a3      	ldrh	r3, [r4, #12]
 801aeae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801aeb2:	81a3      	strh	r3, [r4, #12]
 801aeb4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801aeb8:	e7e9      	b.n	801ae8e <__ssputs_r+0x8a>
	...

0801aebc <_svfiprintf_r>:
 801aebc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aec0:	4698      	mov	r8, r3
 801aec2:	898b      	ldrh	r3, [r1, #12]
 801aec4:	061b      	lsls	r3, r3, #24
 801aec6:	b09d      	sub	sp, #116	@ 0x74
 801aec8:	4607      	mov	r7, r0
 801aeca:	460d      	mov	r5, r1
 801aecc:	4614      	mov	r4, r2
 801aece:	d510      	bpl.n	801aef2 <_svfiprintf_r+0x36>
 801aed0:	690b      	ldr	r3, [r1, #16]
 801aed2:	b973      	cbnz	r3, 801aef2 <_svfiprintf_r+0x36>
 801aed4:	2140      	movs	r1, #64	@ 0x40
 801aed6:	f7ff f9f9 	bl	801a2cc <_malloc_r>
 801aeda:	6028      	str	r0, [r5, #0]
 801aedc:	6128      	str	r0, [r5, #16]
 801aede:	b930      	cbnz	r0, 801aeee <_svfiprintf_r+0x32>
 801aee0:	230c      	movs	r3, #12
 801aee2:	603b      	str	r3, [r7, #0]
 801aee4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801aee8:	b01d      	add	sp, #116	@ 0x74
 801aeea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aeee:	2340      	movs	r3, #64	@ 0x40
 801aef0:	616b      	str	r3, [r5, #20]
 801aef2:	2300      	movs	r3, #0
 801aef4:	9309      	str	r3, [sp, #36]	@ 0x24
 801aef6:	2320      	movs	r3, #32
 801aef8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801aefc:	f8cd 800c 	str.w	r8, [sp, #12]
 801af00:	2330      	movs	r3, #48	@ 0x30
 801af02:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801b0a0 <_svfiprintf_r+0x1e4>
 801af06:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801af0a:	f04f 0901 	mov.w	r9, #1
 801af0e:	4623      	mov	r3, r4
 801af10:	469a      	mov	sl, r3
 801af12:	f813 2b01 	ldrb.w	r2, [r3], #1
 801af16:	b10a      	cbz	r2, 801af1c <_svfiprintf_r+0x60>
 801af18:	2a25      	cmp	r2, #37	@ 0x25
 801af1a:	d1f9      	bne.n	801af10 <_svfiprintf_r+0x54>
 801af1c:	ebba 0b04 	subs.w	fp, sl, r4
 801af20:	d00b      	beq.n	801af3a <_svfiprintf_r+0x7e>
 801af22:	465b      	mov	r3, fp
 801af24:	4622      	mov	r2, r4
 801af26:	4629      	mov	r1, r5
 801af28:	4638      	mov	r0, r7
 801af2a:	f7ff ff6b 	bl	801ae04 <__ssputs_r>
 801af2e:	3001      	adds	r0, #1
 801af30:	f000 80a7 	beq.w	801b082 <_svfiprintf_r+0x1c6>
 801af34:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801af36:	445a      	add	r2, fp
 801af38:	9209      	str	r2, [sp, #36]	@ 0x24
 801af3a:	f89a 3000 	ldrb.w	r3, [sl]
 801af3e:	2b00      	cmp	r3, #0
 801af40:	f000 809f 	beq.w	801b082 <_svfiprintf_r+0x1c6>
 801af44:	2300      	movs	r3, #0
 801af46:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801af4a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801af4e:	f10a 0a01 	add.w	sl, sl, #1
 801af52:	9304      	str	r3, [sp, #16]
 801af54:	9307      	str	r3, [sp, #28]
 801af56:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801af5a:	931a      	str	r3, [sp, #104]	@ 0x68
 801af5c:	4654      	mov	r4, sl
 801af5e:	2205      	movs	r2, #5
 801af60:	f814 1b01 	ldrb.w	r1, [r4], #1
 801af64:	484e      	ldr	r0, [pc, #312]	@ (801b0a0 <_svfiprintf_r+0x1e4>)
 801af66:	f7e5 f973 	bl	8000250 <memchr>
 801af6a:	9a04      	ldr	r2, [sp, #16]
 801af6c:	b9d8      	cbnz	r0, 801afa6 <_svfiprintf_r+0xea>
 801af6e:	06d0      	lsls	r0, r2, #27
 801af70:	bf44      	itt	mi
 801af72:	2320      	movmi	r3, #32
 801af74:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801af78:	0711      	lsls	r1, r2, #28
 801af7a:	bf44      	itt	mi
 801af7c:	232b      	movmi	r3, #43	@ 0x2b
 801af7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801af82:	f89a 3000 	ldrb.w	r3, [sl]
 801af86:	2b2a      	cmp	r3, #42	@ 0x2a
 801af88:	d015      	beq.n	801afb6 <_svfiprintf_r+0xfa>
 801af8a:	9a07      	ldr	r2, [sp, #28]
 801af8c:	4654      	mov	r4, sl
 801af8e:	2000      	movs	r0, #0
 801af90:	f04f 0c0a 	mov.w	ip, #10
 801af94:	4621      	mov	r1, r4
 801af96:	f811 3b01 	ldrb.w	r3, [r1], #1
 801af9a:	3b30      	subs	r3, #48	@ 0x30
 801af9c:	2b09      	cmp	r3, #9
 801af9e:	d94b      	bls.n	801b038 <_svfiprintf_r+0x17c>
 801afa0:	b1b0      	cbz	r0, 801afd0 <_svfiprintf_r+0x114>
 801afa2:	9207      	str	r2, [sp, #28]
 801afa4:	e014      	b.n	801afd0 <_svfiprintf_r+0x114>
 801afa6:	eba0 0308 	sub.w	r3, r0, r8
 801afaa:	fa09 f303 	lsl.w	r3, r9, r3
 801afae:	4313      	orrs	r3, r2
 801afb0:	9304      	str	r3, [sp, #16]
 801afb2:	46a2      	mov	sl, r4
 801afb4:	e7d2      	b.n	801af5c <_svfiprintf_r+0xa0>
 801afb6:	9b03      	ldr	r3, [sp, #12]
 801afb8:	1d19      	adds	r1, r3, #4
 801afba:	681b      	ldr	r3, [r3, #0]
 801afbc:	9103      	str	r1, [sp, #12]
 801afbe:	2b00      	cmp	r3, #0
 801afc0:	bfbb      	ittet	lt
 801afc2:	425b      	neglt	r3, r3
 801afc4:	f042 0202 	orrlt.w	r2, r2, #2
 801afc8:	9307      	strge	r3, [sp, #28]
 801afca:	9307      	strlt	r3, [sp, #28]
 801afcc:	bfb8      	it	lt
 801afce:	9204      	strlt	r2, [sp, #16]
 801afd0:	7823      	ldrb	r3, [r4, #0]
 801afd2:	2b2e      	cmp	r3, #46	@ 0x2e
 801afd4:	d10a      	bne.n	801afec <_svfiprintf_r+0x130>
 801afd6:	7863      	ldrb	r3, [r4, #1]
 801afd8:	2b2a      	cmp	r3, #42	@ 0x2a
 801afda:	d132      	bne.n	801b042 <_svfiprintf_r+0x186>
 801afdc:	9b03      	ldr	r3, [sp, #12]
 801afde:	1d1a      	adds	r2, r3, #4
 801afe0:	681b      	ldr	r3, [r3, #0]
 801afe2:	9203      	str	r2, [sp, #12]
 801afe4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801afe8:	3402      	adds	r4, #2
 801afea:	9305      	str	r3, [sp, #20]
 801afec:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801b0b0 <_svfiprintf_r+0x1f4>
 801aff0:	7821      	ldrb	r1, [r4, #0]
 801aff2:	2203      	movs	r2, #3
 801aff4:	4650      	mov	r0, sl
 801aff6:	f7e5 f92b 	bl	8000250 <memchr>
 801affa:	b138      	cbz	r0, 801b00c <_svfiprintf_r+0x150>
 801affc:	9b04      	ldr	r3, [sp, #16]
 801affe:	eba0 000a 	sub.w	r0, r0, sl
 801b002:	2240      	movs	r2, #64	@ 0x40
 801b004:	4082      	lsls	r2, r0
 801b006:	4313      	orrs	r3, r2
 801b008:	3401      	adds	r4, #1
 801b00a:	9304      	str	r3, [sp, #16]
 801b00c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b010:	4824      	ldr	r0, [pc, #144]	@ (801b0a4 <_svfiprintf_r+0x1e8>)
 801b012:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801b016:	2206      	movs	r2, #6
 801b018:	f7e5 f91a 	bl	8000250 <memchr>
 801b01c:	2800      	cmp	r0, #0
 801b01e:	d036      	beq.n	801b08e <_svfiprintf_r+0x1d2>
 801b020:	4b21      	ldr	r3, [pc, #132]	@ (801b0a8 <_svfiprintf_r+0x1ec>)
 801b022:	bb1b      	cbnz	r3, 801b06c <_svfiprintf_r+0x1b0>
 801b024:	9b03      	ldr	r3, [sp, #12]
 801b026:	3307      	adds	r3, #7
 801b028:	f023 0307 	bic.w	r3, r3, #7
 801b02c:	3308      	adds	r3, #8
 801b02e:	9303      	str	r3, [sp, #12]
 801b030:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b032:	4433      	add	r3, r6
 801b034:	9309      	str	r3, [sp, #36]	@ 0x24
 801b036:	e76a      	b.n	801af0e <_svfiprintf_r+0x52>
 801b038:	fb0c 3202 	mla	r2, ip, r2, r3
 801b03c:	460c      	mov	r4, r1
 801b03e:	2001      	movs	r0, #1
 801b040:	e7a8      	b.n	801af94 <_svfiprintf_r+0xd8>
 801b042:	2300      	movs	r3, #0
 801b044:	3401      	adds	r4, #1
 801b046:	9305      	str	r3, [sp, #20]
 801b048:	4619      	mov	r1, r3
 801b04a:	f04f 0c0a 	mov.w	ip, #10
 801b04e:	4620      	mov	r0, r4
 801b050:	f810 2b01 	ldrb.w	r2, [r0], #1
 801b054:	3a30      	subs	r2, #48	@ 0x30
 801b056:	2a09      	cmp	r2, #9
 801b058:	d903      	bls.n	801b062 <_svfiprintf_r+0x1a6>
 801b05a:	2b00      	cmp	r3, #0
 801b05c:	d0c6      	beq.n	801afec <_svfiprintf_r+0x130>
 801b05e:	9105      	str	r1, [sp, #20]
 801b060:	e7c4      	b.n	801afec <_svfiprintf_r+0x130>
 801b062:	fb0c 2101 	mla	r1, ip, r1, r2
 801b066:	4604      	mov	r4, r0
 801b068:	2301      	movs	r3, #1
 801b06a:	e7f0      	b.n	801b04e <_svfiprintf_r+0x192>
 801b06c:	ab03      	add	r3, sp, #12
 801b06e:	9300      	str	r3, [sp, #0]
 801b070:	462a      	mov	r2, r5
 801b072:	4b0e      	ldr	r3, [pc, #56]	@ (801b0ac <_svfiprintf_r+0x1f0>)
 801b074:	a904      	add	r1, sp, #16
 801b076:	4638      	mov	r0, r7
 801b078:	f3af 8000 	nop.w
 801b07c:	1c42      	adds	r2, r0, #1
 801b07e:	4606      	mov	r6, r0
 801b080:	d1d6      	bne.n	801b030 <_svfiprintf_r+0x174>
 801b082:	89ab      	ldrh	r3, [r5, #12]
 801b084:	065b      	lsls	r3, r3, #25
 801b086:	f53f af2d 	bmi.w	801aee4 <_svfiprintf_r+0x28>
 801b08a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801b08c:	e72c      	b.n	801aee8 <_svfiprintf_r+0x2c>
 801b08e:	ab03      	add	r3, sp, #12
 801b090:	9300      	str	r3, [sp, #0]
 801b092:	462a      	mov	r2, r5
 801b094:	4b05      	ldr	r3, [pc, #20]	@ (801b0ac <_svfiprintf_r+0x1f0>)
 801b096:	a904      	add	r1, sp, #16
 801b098:	4638      	mov	r0, r7
 801b09a:	f000 f9bb 	bl	801b414 <_printf_i>
 801b09e:	e7ed      	b.n	801b07c <_svfiprintf_r+0x1c0>
 801b0a0:	0801e38f 	.word	0x0801e38f
 801b0a4:	0801e399 	.word	0x0801e399
 801b0a8:	00000000 	.word	0x00000000
 801b0ac:	0801ae05 	.word	0x0801ae05
 801b0b0:	0801e395 	.word	0x0801e395

0801b0b4 <__sfputc_r>:
 801b0b4:	6893      	ldr	r3, [r2, #8]
 801b0b6:	3b01      	subs	r3, #1
 801b0b8:	2b00      	cmp	r3, #0
 801b0ba:	b410      	push	{r4}
 801b0bc:	6093      	str	r3, [r2, #8]
 801b0be:	da08      	bge.n	801b0d2 <__sfputc_r+0x1e>
 801b0c0:	6994      	ldr	r4, [r2, #24]
 801b0c2:	42a3      	cmp	r3, r4
 801b0c4:	db01      	blt.n	801b0ca <__sfputc_r+0x16>
 801b0c6:	290a      	cmp	r1, #10
 801b0c8:	d103      	bne.n	801b0d2 <__sfputc_r+0x1e>
 801b0ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b0ce:	f7ff bc87 	b.w	801a9e0 <__swbuf_r>
 801b0d2:	6813      	ldr	r3, [r2, #0]
 801b0d4:	1c58      	adds	r0, r3, #1
 801b0d6:	6010      	str	r0, [r2, #0]
 801b0d8:	7019      	strb	r1, [r3, #0]
 801b0da:	4608      	mov	r0, r1
 801b0dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b0e0:	4770      	bx	lr

0801b0e2 <__sfputs_r>:
 801b0e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b0e4:	4606      	mov	r6, r0
 801b0e6:	460f      	mov	r7, r1
 801b0e8:	4614      	mov	r4, r2
 801b0ea:	18d5      	adds	r5, r2, r3
 801b0ec:	42ac      	cmp	r4, r5
 801b0ee:	d101      	bne.n	801b0f4 <__sfputs_r+0x12>
 801b0f0:	2000      	movs	r0, #0
 801b0f2:	e007      	b.n	801b104 <__sfputs_r+0x22>
 801b0f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b0f8:	463a      	mov	r2, r7
 801b0fa:	4630      	mov	r0, r6
 801b0fc:	f7ff ffda 	bl	801b0b4 <__sfputc_r>
 801b100:	1c43      	adds	r3, r0, #1
 801b102:	d1f3      	bne.n	801b0ec <__sfputs_r+0xa>
 801b104:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801b108 <_vfiprintf_r>:
 801b108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b10c:	460d      	mov	r5, r1
 801b10e:	b09d      	sub	sp, #116	@ 0x74
 801b110:	4614      	mov	r4, r2
 801b112:	4698      	mov	r8, r3
 801b114:	4606      	mov	r6, r0
 801b116:	b118      	cbz	r0, 801b120 <_vfiprintf_r+0x18>
 801b118:	6a03      	ldr	r3, [r0, #32]
 801b11a:	b90b      	cbnz	r3, 801b120 <_vfiprintf_r+0x18>
 801b11c:	f7ff fb08 	bl	801a730 <__sinit>
 801b120:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801b122:	07d9      	lsls	r1, r3, #31
 801b124:	d405      	bmi.n	801b132 <_vfiprintf_r+0x2a>
 801b126:	89ab      	ldrh	r3, [r5, #12]
 801b128:	059a      	lsls	r2, r3, #22
 801b12a:	d402      	bmi.n	801b132 <_vfiprintf_r+0x2a>
 801b12c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801b12e:	f7ff fdd4 	bl	801acda <__retarget_lock_acquire_recursive>
 801b132:	89ab      	ldrh	r3, [r5, #12]
 801b134:	071b      	lsls	r3, r3, #28
 801b136:	d501      	bpl.n	801b13c <_vfiprintf_r+0x34>
 801b138:	692b      	ldr	r3, [r5, #16]
 801b13a:	b99b      	cbnz	r3, 801b164 <_vfiprintf_r+0x5c>
 801b13c:	4629      	mov	r1, r5
 801b13e:	4630      	mov	r0, r6
 801b140:	f7ff fc8c 	bl	801aa5c <__swsetup_r>
 801b144:	b170      	cbz	r0, 801b164 <_vfiprintf_r+0x5c>
 801b146:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801b148:	07dc      	lsls	r4, r3, #31
 801b14a:	d504      	bpl.n	801b156 <_vfiprintf_r+0x4e>
 801b14c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801b150:	b01d      	add	sp, #116	@ 0x74
 801b152:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b156:	89ab      	ldrh	r3, [r5, #12]
 801b158:	0598      	lsls	r0, r3, #22
 801b15a:	d4f7      	bmi.n	801b14c <_vfiprintf_r+0x44>
 801b15c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801b15e:	f7ff fdbd 	bl	801acdc <__retarget_lock_release_recursive>
 801b162:	e7f3      	b.n	801b14c <_vfiprintf_r+0x44>
 801b164:	2300      	movs	r3, #0
 801b166:	9309      	str	r3, [sp, #36]	@ 0x24
 801b168:	2320      	movs	r3, #32
 801b16a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801b16e:	f8cd 800c 	str.w	r8, [sp, #12]
 801b172:	2330      	movs	r3, #48	@ 0x30
 801b174:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801b324 <_vfiprintf_r+0x21c>
 801b178:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801b17c:	f04f 0901 	mov.w	r9, #1
 801b180:	4623      	mov	r3, r4
 801b182:	469a      	mov	sl, r3
 801b184:	f813 2b01 	ldrb.w	r2, [r3], #1
 801b188:	b10a      	cbz	r2, 801b18e <_vfiprintf_r+0x86>
 801b18a:	2a25      	cmp	r2, #37	@ 0x25
 801b18c:	d1f9      	bne.n	801b182 <_vfiprintf_r+0x7a>
 801b18e:	ebba 0b04 	subs.w	fp, sl, r4
 801b192:	d00b      	beq.n	801b1ac <_vfiprintf_r+0xa4>
 801b194:	465b      	mov	r3, fp
 801b196:	4622      	mov	r2, r4
 801b198:	4629      	mov	r1, r5
 801b19a:	4630      	mov	r0, r6
 801b19c:	f7ff ffa1 	bl	801b0e2 <__sfputs_r>
 801b1a0:	3001      	adds	r0, #1
 801b1a2:	f000 80a7 	beq.w	801b2f4 <_vfiprintf_r+0x1ec>
 801b1a6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801b1a8:	445a      	add	r2, fp
 801b1aa:	9209      	str	r2, [sp, #36]	@ 0x24
 801b1ac:	f89a 3000 	ldrb.w	r3, [sl]
 801b1b0:	2b00      	cmp	r3, #0
 801b1b2:	f000 809f 	beq.w	801b2f4 <_vfiprintf_r+0x1ec>
 801b1b6:	2300      	movs	r3, #0
 801b1b8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801b1bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801b1c0:	f10a 0a01 	add.w	sl, sl, #1
 801b1c4:	9304      	str	r3, [sp, #16]
 801b1c6:	9307      	str	r3, [sp, #28]
 801b1c8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801b1cc:	931a      	str	r3, [sp, #104]	@ 0x68
 801b1ce:	4654      	mov	r4, sl
 801b1d0:	2205      	movs	r2, #5
 801b1d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b1d6:	4853      	ldr	r0, [pc, #332]	@ (801b324 <_vfiprintf_r+0x21c>)
 801b1d8:	f7e5 f83a 	bl	8000250 <memchr>
 801b1dc:	9a04      	ldr	r2, [sp, #16]
 801b1de:	b9d8      	cbnz	r0, 801b218 <_vfiprintf_r+0x110>
 801b1e0:	06d1      	lsls	r1, r2, #27
 801b1e2:	bf44      	itt	mi
 801b1e4:	2320      	movmi	r3, #32
 801b1e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801b1ea:	0713      	lsls	r3, r2, #28
 801b1ec:	bf44      	itt	mi
 801b1ee:	232b      	movmi	r3, #43	@ 0x2b
 801b1f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801b1f4:	f89a 3000 	ldrb.w	r3, [sl]
 801b1f8:	2b2a      	cmp	r3, #42	@ 0x2a
 801b1fa:	d015      	beq.n	801b228 <_vfiprintf_r+0x120>
 801b1fc:	9a07      	ldr	r2, [sp, #28]
 801b1fe:	4654      	mov	r4, sl
 801b200:	2000      	movs	r0, #0
 801b202:	f04f 0c0a 	mov.w	ip, #10
 801b206:	4621      	mov	r1, r4
 801b208:	f811 3b01 	ldrb.w	r3, [r1], #1
 801b20c:	3b30      	subs	r3, #48	@ 0x30
 801b20e:	2b09      	cmp	r3, #9
 801b210:	d94b      	bls.n	801b2aa <_vfiprintf_r+0x1a2>
 801b212:	b1b0      	cbz	r0, 801b242 <_vfiprintf_r+0x13a>
 801b214:	9207      	str	r2, [sp, #28]
 801b216:	e014      	b.n	801b242 <_vfiprintf_r+0x13a>
 801b218:	eba0 0308 	sub.w	r3, r0, r8
 801b21c:	fa09 f303 	lsl.w	r3, r9, r3
 801b220:	4313      	orrs	r3, r2
 801b222:	9304      	str	r3, [sp, #16]
 801b224:	46a2      	mov	sl, r4
 801b226:	e7d2      	b.n	801b1ce <_vfiprintf_r+0xc6>
 801b228:	9b03      	ldr	r3, [sp, #12]
 801b22a:	1d19      	adds	r1, r3, #4
 801b22c:	681b      	ldr	r3, [r3, #0]
 801b22e:	9103      	str	r1, [sp, #12]
 801b230:	2b00      	cmp	r3, #0
 801b232:	bfbb      	ittet	lt
 801b234:	425b      	neglt	r3, r3
 801b236:	f042 0202 	orrlt.w	r2, r2, #2
 801b23a:	9307      	strge	r3, [sp, #28]
 801b23c:	9307      	strlt	r3, [sp, #28]
 801b23e:	bfb8      	it	lt
 801b240:	9204      	strlt	r2, [sp, #16]
 801b242:	7823      	ldrb	r3, [r4, #0]
 801b244:	2b2e      	cmp	r3, #46	@ 0x2e
 801b246:	d10a      	bne.n	801b25e <_vfiprintf_r+0x156>
 801b248:	7863      	ldrb	r3, [r4, #1]
 801b24a:	2b2a      	cmp	r3, #42	@ 0x2a
 801b24c:	d132      	bne.n	801b2b4 <_vfiprintf_r+0x1ac>
 801b24e:	9b03      	ldr	r3, [sp, #12]
 801b250:	1d1a      	adds	r2, r3, #4
 801b252:	681b      	ldr	r3, [r3, #0]
 801b254:	9203      	str	r2, [sp, #12]
 801b256:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801b25a:	3402      	adds	r4, #2
 801b25c:	9305      	str	r3, [sp, #20]
 801b25e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801b334 <_vfiprintf_r+0x22c>
 801b262:	7821      	ldrb	r1, [r4, #0]
 801b264:	2203      	movs	r2, #3
 801b266:	4650      	mov	r0, sl
 801b268:	f7e4 fff2 	bl	8000250 <memchr>
 801b26c:	b138      	cbz	r0, 801b27e <_vfiprintf_r+0x176>
 801b26e:	9b04      	ldr	r3, [sp, #16]
 801b270:	eba0 000a 	sub.w	r0, r0, sl
 801b274:	2240      	movs	r2, #64	@ 0x40
 801b276:	4082      	lsls	r2, r0
 801b278:	4313      	orrs	r3, r2
 801b27a:	3401      	adds	r4, #1
 801b27c:	9304      	str	r3, [sp, #16]
 801b27e:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b282:	4829      	ldr	r0, [pc, #164]	@ (801b328 <_vfiprintf_r+0x220>)
 801b284:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801b288:	2206      	movs	r2, #6
 801b28a:	f7e4 ffe1 	bl	8000250 <memchr>
 801b28e:	2800      	cmp	r0, #0
 801b290:	d03f      	beq.n	801b312 <_vfiprintf_r+0x20a>
 801b292:	4b26      	ldr	r3, [pc, #152]	@ (801b32c <_vfiprintf_r+0x224>)
 801b294:	bb1b      	cbnz	r3, 801b2de <_vfiprintf_r+0x1d6>
 801b296:	9b03      	ldr	r3, [sp, #12]
 801b298:	3307      	adds	r3, #7
 801b29a:	f023 0307 	bic.w	r3, r3, #7
 801b29e:	3308      	adds	r3, #8
 801b2a0:	9303      	str	r3, [sp, #12]
 801b2a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b2a4:	443b      	add	r3, r7
 801b2a6:	9309      	str	r3, [sp, #36]	@ 0x24
 801b2a8:	e76a      	b.n	801b180 <_vfiprintf_r+0x78>
 801b2aa:	fb0c 3202 	mla	r2, ip, r2, r3
 801b2ae:	460c      	mov	r4, r1
 801b2b0:	2001      	movs	r0, #1
 801b2b2:	e7a8      	b.n	801b206 <_vfiprintf_r+0xfe>
 801b2b4:	2300      	movs	r3, #0
 801b2b6:	3401      	adds	r4, #1
 801b2b8:	9305      	str	r3, [sp, #20]
 801b2ba:	4619      	mov	r1, r3
 801b2bc:	f04f 0c0a 	mov.w	ip, #10
 801b2c0:	4620      	mov	r0, r4
 801b2c2:	f810 2b01 	ldrb.w	r2, [r0], #1
 801b2c6:	3a30      	subs	r2, #48	@ 0x30
 801b2c8:	2a09      	cmp	r2, #9
 801b2ca:	d903      	bls.n	801b2d4 <_vfiprintf_r+0x1cc>
 801b2cc:	2b00      	cmp	r3, #0
 801b2ce:	d0c6      	beq.n	801b25e <_vfiprintf_r+0x156>
 801b2d0:	9105      	str	r1, [sp, #20]
 801b2d2:	e7c4      	b.n	801b25e <_vfiprintf_r+0x156>
 801b2d4:	fb0c 2101 	mla	r1, ip, r1, r2
 801b2d8:	4604      	mov	r4, r0
 801b2da:	2301      	movs	r3, #1
 801b2dc:	e7f0      	b.n	801b2c0 <_vfiprintf_r+0x1b8>
 801b2de:	ab03      	add	r3, sp, #12
 801b2e0:	9300      	str	r3, [sp, #0]
 801b2e2:	462a      	mov	r2, r5
 801b2e4:	4b12      	ldr	r3, [pc, #72]	@ (801b330 <_vfiprintf_r+0x228>)
 801b2e6:	a904      	add	r1, sp, #16
 801b2e8:	4630      	mov	r0, r6
 801b2ea:	f3af 8000 	nop.w
 801b2ee:	4607      	mov	r7, r0
 801b2f0:	1c78      	adds	r0, r7, #1
 801b2f2:	d1d6      	bne.n	801b2a2 <_vfiprintf_r+0x19a>
 801b2f4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801b2f6:	07d9      	lsls	r1, r3, #31
 801b2f8:	d405      	bmi.n	801b306 <_vfiprintf_r+0x1fe>
 801b2fa:	89ab      	ldrh	r3, [r5, #12]
 801b2fc:	059a      	lsls	r2, r3, #22
 801b2fe:	d402      	bmi.n	801b306 <_vfiprintf_r+0x1fe>
 801b300:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801b302:	f7ff fceb 	bl	801acdc <__retarget_lock_release_recursive>
 801b306:	89ab      	ldrh	r3, [r5, #12]
 801b308:	065b      	lsls	r3, r3, #25
 801b30a:	f53f af1f 	bmi.w	801b14c <_vfiprintf_r+0x44>
 801b30e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801b310:	e71e      	b.n	801b150 <_vfiprintf_r+0x48>
 801b312:	ab03      	add	r3, sp, #12
 801b314:	9300      	str	r3, [sp, #0]
 801b316:	462a      	mov	r2, r5
 801b318:	4b05      	ldr	r3, [pc, #20]	@ (801b330 <_vfiprintf_r+0x228>)
 801b31a:	a904      	add	r1, sp, #16
 801b31c:	4630      	mov	r0, r6
 801b31e:	f000 f879 	bl	801b414 <_printf_i>
 801b322:	e7e4      	b.n	801b2ee <_vfiprintf_r+0x1e6>
 801b324:	0801e38f 	.word	0x0801e38f
 801b328:	0801e399 	.word	0x0801e399
 801b32c:	00000000 	.word	0x00000000
 801b330:	0801b0e3 	.word	0x0801b0e3
 801b334:	0801e395 	.word	0x0801e395

0801b338 <_printf_common>:
 801b338:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b33c:	4616      	mov	r6, r2
 801b33e:	4698      	mov	r8, r3
 801b340:	688a      	ldr	r2, [r1, #8]
 801b342:	690b      	ldr	r3, [r1, #16]
 801b344:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801b348:	4293      	cmp	r3, r2
 801b34a:	bfb8      	it	lt
 801b34c:	4613      	movlt	r3, r2
 801b34e:	6033      	str	r3, [r6, #0]
 801b350:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801b354:	4607      	mov	r7, r0
 801b356:	460c      	mov	r4, r1
 801b358:	b10a      	cbz	r2, 801b35e <_printf_common+0x26>
 801b35a:	3301      	adds	r3, #1
 801b35c:	6033      	str	r3, [r6, #0]
 801b35e:	6823      	ldr	r3, [r4, #0]
 801b360:	0699      	lsls	r1, r3, #26
 801b362:	bf42      	ittt	mi
 801b364:	6833      	ldrmi	r3, [r6, #0]
 801b366:	3302      	addmi	r3, #2
 801b368:	6033      	strmi	r3, [r6, #0]
 801b36a:	6825      	ldr	r5, [r4, #0]
 801b36c:	f015 0506 	ands.w	r5, r5, #6
 801b370:	d106      	bne.n	801b380 <_printf_common+0x48>
 801b372:	f104 0a19 	add.w	sl, r4, #25
 801b376:	68e3      	ldr	r3, [r4, #12]
 801b378:	6832      	ldr	r2, [r6, #0]
 801b37a:	1a9b      	subs	r3, r3, r2
 801b37c:	42ab      	cmp	r3, r5
 801b37e:	dc26      	bgt.n	801b3ce <_printf_common+0x96>
 801b380:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801b384:	6822      	ldr	r2, [r4, #0]
 801b386:	3b00      	subs	r3, #0
 801b388:	bf18      	it	ne
 801b38a:	2301      	movne	r3, #1
 801b38c:	0692      	lsls	r2, r2, #26
 801b38e:	d42b      	bmi.n	801b3e8 <_printf_common+0xb0>
 801b390:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801b394:	4641      	mov	r1, r8
 801b396:	4638      	mov	r0, r7
 801b398:	47c8      	blx	r9
 801b39a:	3001      	adds	r0, #1
 801b39c:	d01e      	beq.n	801b3dc <_printf_common+0xa4>
 801b39e:	6823      	ldr	r3, [r4, #0]
 801b3a0:	6922      	ldr	r2, [r4, #16]
 801b3a2:	f003 0306 	and.w	r3, r3, #6
 801b3a6:	2b04      	cmp	r3, #4
 801b3a8:	bf02      	ittt	eq
 801b3aa:	68e5      	ldreq	r5, [r4, #12]
 801b3ac:	6833      	ldreq	r3, [r6, #0]
 801b3ae:	1aed      	subeq	r5, r5, r3
 801b3b0:	68a3      	ldr	r3, [r4, #8]
 801b3b2:	bf0c      	ite	eq
 801b3b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801b3b8:	2500      	movne	r5, #0
 801b3ba:	4293      	cmp	r3, r2
 801b3bc:	bfc4      	itt	gt
 801b3be:	1a9b      	subgt	r3, r3, r2
 801b3c0:	18ed      	addgt	r5, r5, r3
 801b3c2:	2600      	movs	r6, #0
 801b3c4:	341a      	adds	r4, #26
 801b3c6:	42b5      	cmp	r5, r6
 801b3c8:	d11a      	bne.n	801b400 <_printf_common+0xc8>
 801b3ca:	2000      	movs	r0, #0
 801b3cc:	e008      	b.n	801b3e0 <_printf_common+0xa8>
 801b3ce:	2301      	movs	r3, #1
 801b3d0:	4652      	mov	r2, sl
 801b3d2:	4641      	mov	r1, r8
 801b3d4:	4638      	mov	r0, r7
 801b3d6:	47c8      	blx	r9
 801b3d8:	3001      	adds	r0, #1
 801b3da:	d103      	bne.n	801b3e4 <_printf_common+0xac>
 801b3dc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801b3e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b3e4:	3501      	adds	r5, #1
 801b3e6:	e7c6      	b.n	801b376 <_printf_common+0x3e>
 801b3e8:	18e1      	adds	r1, r4, r3
 801b3ea:	1c5a      	adds	r2, r3, #1
 801b3ec:	2030      	movs	r0, #48	@ 0x30
 801b3ee:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801b3f2:	4422      	add	r2, r4
 801b3f4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801b3f8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801b3fc:	3302      	adds	r3, #2
 801b3fe:	e7c7      	b.n	801b390 <_printf_common+0x58>
 801b400:	2301      	movs	r3, #1
 801b402:	4622      	mov	r2, r4
 801b404:	4641      	mov	r1, r8
 801b406:	4638      	mov	r0, r7
 801b408:	47c8      	blx	r9
 801b40a:	3001      	adds	r0, #1
 801b40c:	d0e6      	beq.n	801b3dc <_printf_common+0xa4>
 801b40e:	3601      	adds	r6, #1
 801b410:	e7d9      	b.n	801b3c6 <_printf_common+0x8e>
	...

0801b414 <_printf_i>:
 801b414:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801b418:	7e0f      	ldrb	r7, [r1, #24]
 801b41a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801b41c:	2f78      	cmp	r7, #120	@ 0x78
 801b41e:	4691      	mov	r9, r2
 801b420:	4680      	mov	r8, r0
 801b422:	460c      	mov	r4, r1
 801b424:	469a      	mov	sl, r3
 801b426:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801b42a:	d807      	bhi.n	801b43c <_printf_i+0x28>
 801b42c:	2f62      	cmp	r7, #98	@ 0x62
 801b42e:	d80a      	bhi.n	801b446 <_printf_i+0x32>
 801b430:	2f00      	cmp	r7, #0
 801b432:	f000 80d1 	beq.w	801b5d8 <_printf_i+0x1c4>
 801b436:	2f58      	cmp	r7, #88	@ 0x58
 801b438:	f000 80b8 	beq.w	801b5ac <_printf_i+0x198>
 801b43c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801b440:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801b444:	e03a      	b.n	801b4bc <_printf_i+0xa8>
 801b446:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801b44a:	2b15      	cmp	r3, #21
 801b44c:	d8f6      	bhi.n	801b43c <_printf_i+0x28>
 801b44e:	a101      	add	r1, pc, #4	@ (adr r1, 801b454 <_printf_i+0x40>)
 801b450:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801b454:	0801b4ad 	.word	0x0801b4ad
 801b458:	0801b4c1 	.word	0x0801b4c1
 801b45c:	0801b43d 	.word	0x0801b43d
 801b460:	0801b43d 	.word	0x0801b43d
 801b464:	0801b43d 	.word	0x0801b43d
 801b468:	0801b43d 	.word	0x0801b43d
 801b46c:	0801b4c1 	.word	0x0801b4c1
 801b470:	0801b43d 	.word	0x0801b43d
 801b474:	0801b43d 	.word	0x0801b43d
 801b478:	0801b43d 	.word	0x0801b43d
 801b47c:	0801b43d 	.word	0x0801b43d
 801b480:	0801b5bf 	.word	0x0801b5bf
 801b484:	0801b4eb 	.word	0x0801b4eb
 801b488:	0801b579 	.word	0x0801b579
 801b48c:	0801b43d 	.word	0x0801b43d
 801b490:	0801b43d 	.word	0x0801b43d
 801b494:	0801b5e1 	.word	0x0801b5e1
 801b498:	0801b43d 	.word	0x0801b43d
 801b49c:	0801b4eb 	.word	0x0801b4eb
 801b4a0:	0801b43d 	.word	0x0801b43d
 801b4a4:	0801b43d 	.word	0x0801b43d
 801b4a8:	0801b581 	.word	0x0801b581
 801b4ac:	6833      	ldr	r3, [r6, #0]
 801b4ae:	1d1a      	adds	r2, r3, #4
 801b4b0:	681b      	ldr	r3, [r3, #0]
 801b4b2:	6032      	str	r2, [r6, #0]
 801b4b4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801b4b8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801b4bc:	2301      	movs	r3, #1
 801b4be:	e09c      	b.n	801b5fa <_printf_i+0x1e6>
 801b4c0:	6833      	ldr	r3, [r6, #0]
 801b4c2:	6820      	ldr	r0, [r4, #0]
 801b4c4:	1d19      	adds	r1, r3, #4
 801b4c6:	6031      	str	r1, [r6, #0]
 801b4c8:	0606      	lsls	r6, r0, #24
 801b4ca:	d501      	bpl.n	801b4d0 <_printf_i+0xbc>
 801b4cc:	681d      	ldr	r5, [r3, #0]
 801b4ce:	e003      	b.n	801b4d8 <_printf_i+0xc4>
 801b4d0:	0645      	lsls	r5, r0, #25
 801b4d2:	d5fb      	bpl.n	801b4cc <_printf_i+0xb8>
 801b4d4:	f9b3 5000 	ldrsh.w	r5, [r3]
 801b4d8:	2d00      	cmp	r5, #0
 801b4da:	da03      	bge.n	801b4e4 <_printf_i+0xd0>
 801b4dc:	232d      	movs	r3, #45	@ 0x2d
 801b4de:	426d      	negs	r5, r5
 801b4e0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801b4e4:	4858      	ldr	r0, [pc, #352]	@ (801b648 <_printf_i+0x234>)
 801b4e6:	230a      	movs	r3, #10
 801b4e8:	e011      	b.n	801b50e <_printf_i+0xfa>
 801b4ea:	6821      	ldr	r1, [r4, #0]
 801b4ec:	6833      	ldr	r3, [r6, #0]
 801b4ee:	0608      	lsls	r0, r1, #24
 801b4f0:	f853 5b04 	ldr.w	r5, [r3], #4
 801b4f4:	d402      	bmi.n	801b4fc <_printf_i+0xe8>
 801b4f6:	0649      	lsls	r1, r1, #25
 801b4f8:	bf48      	it	mi
 801b4fa:	b2ad      	uxthmi	r5, r5
 801b4fc:	2f6f      	cmp	r7, #111	@ 0x6f
 801b4fe:	4852      	ldr	r0, [pc, #328]	@ (801b648 <_printf_i+0x234>)
 801b500:	6033      	str	r3, [r6, #0]
 801b502:	bf14      	ite	ne
 801b504:	230a      	movne	r3, #10
 801b506:	2308      	moveq	r3, #8
 801b508:	2100      	movs	r1, #0
 801b50a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801b50e:	6866      	ldr	r6, [r4, #4]
 801b510:	60a6      	str	r6, [r4, #8]
 801b512:	2e00      	cmp	r6, #0
 801b514:	db05      	blt.n	801b522 <_printf_i+0x10e>
 801b516:	6821      	ldr	r1, [r4, #0]
 801b518:	432e      	orrs	r6, r5
 801b51a:	f021 0104 	bic.w	r1, r1, #4
 801b51e:	6021      	str	r1, [r4, #0]
 801b520:	d04b      	beq.n	801b5ba <_printf_i+0x1a6>
 801b522:	4616      	mov	r6, r2
 801b524:	fbb5 f1f3 	udiv	r1, r5, r3
 801b528:	fb03 5711 	mls	r7, r3, r1, r5
 801b52c:	5dc7      	ldrb	r7, [r0, r7]
 801b52e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801b532:	462f      	mov	r7, r5
 801b534:	42bb      	cmp	r3, r7
 801b536:	460d      	mov	r5, r1
 801b538:	d9f4      	bls.n	801b524 <_printf_i+0x110>
 801b53a:	2b08      	cmp	r3, #8
 801b53c:	d10b      	bne.n	801b556 <_printf_i+0x142>
 801b53e:	6823      	ldr	r3, [r4, #0]
 801b540:	07df      	lsls	r7, r3, #31
 801b542:	d508      	bpl.n	801b556 <_printf_i+0x142>
 801b544:	6923      	ldr	r3, [r4, #16]
 801b546:	6861      	ldr	r1, [r4, #4]
 801b548:	4299      	cmp	r1, r3
 801b54a:	bfde      	ittt	le
 801b54c:	2330      	movle	r3, #48	@ 0x30
 801b54e:	f806 3c01 	strble.w	r3, [r6, #-1]
 801b552:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 801b556:	1b92      	subs	r2, r2, r6
 801b558:	6122      	str	r2, [r4, #16]
 801b55a:	f8cd a000 	str.w	sl, [sp]
 801b55e:	464b      	mov	r3, r9
 801b560:	aa03      	add	r2, sp, #12
 801b562:	4621      	mov	r1, r4
 801b564:	4640      	mov	r0, r8
 801b566:	f7ff fee7 	bl	801b338 <_printf_common>
 801b56a:	3001      	adds	r0, #1
 801b56c:	d14a      	bne.n	801b604 <_printf_i+0x1f0>
 801b56e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801b572:	b004      	add	sp, #16
 801b574:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b578:	6823      	ldr	r3, [r4, #0]
 801b57a:	f043 0320 	orr.w	r3, r3, #32
 801b57e:	6023      	str	r3, [r4, #0]
 801b580:	4832      	ldr	r0, [pc, #200]	@ (801b64c <_printf_i+0x238>)
 801b582:	2778      	movs	r7, #120	@ 0x78
 801b584:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801b588:	6823      	ldr	r3, [r4, #0]
 801b58a:	6831      	ldr	r1, [r6, #0]
 801b58c:	061f      	lsls	r7, r3, #24
 801b58e:	f851 5b04 	ldr.w	r5, [r1], #4
 801b592:	d402      	bmi.n	801b59a <_printf_i+0x186>
 801b594:	065f      	lsls	r7, r3, #25
 801b596:	bf48      	it	mi
 801b598:	b2ad      	uxthmi	r5, r5
 801b59a:	6031      	str	r1, [r6, #0]
 801b59c:	07d9      	lsls	r1, r3, #31
 801b59e:	bf44      	itt	mi
 801b5a0:	f043 0320 	orrmi.w	r3, r3, #32
 801b5a4:	6023      	strmi	r3, [r4, #0]
 801b5a6:	b11d      	cbz	r5, 801b5b0 <_printf_i+0x19c>
 801b5a8:	2310      	movs	r3, #16
 801b5aa:	e7ad      	b.n	801b508 <_printf_i+0xf4>
 801b5ac:	4826      	ldr	r0, [pc, #152]	@ (801b648 <_printf_i+0x234>)
 801b5ae:	e7e9      	b.n	801b584 <_printf_i+0x170>
 801b5b0:	6823      	ldr	r3, [r4, #0]
 801b5b2:	f023 0320 	bic.w	r3, r3, #32
 801b5b6:	6023      	str	r3, [r4, #0]
 801b5b8:	e7f6      	b.n	801b5a8 <_printf_i+0x194>
 801b5ba:	4616      	mov	r6, r2
 801b5bc:	e7bd      	b.n	801b53a <_printf_i+0x126>
 801b5be:	6833      	ldr	r3, [r6, #0]
 801b5c0:	6825      	ldr	r5, [r4, #0]
 801b5c2:	6961      	ldr	r1, [r4, #20]
 801b5c4:	1d18      	adds	r0, r3, #4
 801b5c6:	6030      	str	r0, [r6, #0]
 801b5c8:	062e      	lsls	r6, r5, #24
 801b5ca:	681b      	ldr	r3, [r3, #0]
 801b5cc:	d501      	bpl.n	801b5d2 <_printf_i+0x1be>
 801b5ce:	6019      	str	r1, [r3, #0]
 801b5d0:	e002      	b.n	801b5d8 <_printf_i+0x1c4>
 801b5d2:	0668      	lsls	r0, r5, #25
 801b5d4:	d5fb      	bpl.n	801b5ce <_printf_i+0x1ba>
 801b5d6:	8019      	strh	r1, [r3, #0]
 801b5d8:	2300      	movs	r3, #0
 801b5da:	6123      	str	r3, [r4, #16]
 801b5dc:	4616      	mov	r6, r2
 801b5de:	e7bc      	b.n	801b55a <_printf_i+0x146>
 801b5e0:	6833      	ldr	r3, [r6, #0]
 801b5e2:	1d1a      	adds	r2, r3, #4
 801b5e4:	6032      	str	r2, [r6, #0]
 801b5e6:	681e      	ldr	r6, [r3, #0]
 801b5e8:	6862      	ldr	r2, [r4, #4]
 801b5ea:	2100      	movs	r1, #0
 801b5ec:	4630      	mov	r0, r6
 801b5ee:	f7e4 fe2f 	bl	8000250 <memchr>
 801b5f2:	b108      	cbz	r0, 801b5f8 <_printf_i+0x1e4>
 801b5f4:	1b80      	subs	r0, r0, r6
 801b5f6:	6060      	str	r0, [r4, #4]
 801b5f8:	6863      	ldr	r3, [r4, #4]
 801b5fa:	6123      	str	r3, [r4, #16]
 801b5fc:	2300      	movs	r3, #0
 801b5fe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801b602:	e7aa      	b.n	801b55a <_printf_i+0x146>
 801b604:	6923      	ldr	r3, [r4, #16]
 801b606:	4632      	mov	r2, r6
 801b608:	4649      	mov	r1, r9
 801b60a:	4640      	mov	r0, r8
 801b60c:	47d0      	blx	sl
 801b60e:	3001      	adds	r0, #1
 801b610:	d0ad      	beq.n	801b56e <_printf_i+0x15a>
 801b612:	6823      	ldr	r3, [r4, #0]
 801b614:	079b      	lsls	r3, r3, #30
 801b616:	d413      	bmi.n	801b640 <_printf_i+0x22c>
 801b618:	68e0      	ldr	r0, [r4, #12]
 801b61a:	9b03      	ldr	r3, [sp, #12]
 801b61c:	4298      	cmp	r0, r3
 801b61e:	bfb8      	it	lt
 801b620:	4618      	movlt	r0, r3
 801b622:	e7a6      	b.n	801b572 <_printf_i+0x15e>
 801b624:	2301      	movs	r3, #1
 801b626:	4632      	mov	r2, r6
 801b628:	4649      	mov	r1, r9
 801b62a:	4640      	mov	r0, r8
 801b62c:	47d0      	blx	sl
 801b62e:	3001      	adds	r0, #1
 801b630:	d09d      	beq.n	801b56e <_printf_i+0x15a>
 801b632:	3501      	adds	r5, #1
 801b634:	68e3      	ldr	r3, [r4, #12]
 801b636:	9903      	ldr	r1, [sp, #12]
 801b638:	1a5b      	subs	r3, r3, r1
 801b63a:	42ab      	cmp	r3, r5
 801b63c:	dcf2      	bgt.n	801b624 <_printf_i+0x210>
 801b63e:	e7eb      	b.n	801b618 <_printf_i+0x204>
 801b640:	2500      	movs	r5, #0
 801b642:	f104 0619 	add.w	r6, r4, #25
 801b646:	e7f5      	b.n	801b634 <_printf_i+0x220>
 801b648:	0801e3a0 	.word	0x0801e3a0
 801b64c:	0801e3b1 	.word	0x0801e3b1

0801b650 <__sflush_r>:
 801b650:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801b654:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b658:	0716      	lsls	r6, r2, #28
 801b65a:	4605      	mov	r5, r0
 801b65c:	460c      	mov	r4, r1
 801b65e:	d454      	bmi.n	801b70a <__sflush_r+0xba>
 801b660:	684b      	ldr	r3, [r1, #4]
 801b662:	2b00      	cmp	r3, #0
 801b664:	dc02      	bgt.n	801b66c <__sflush_r+0x1c>
 801b666:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801b668:	2b00      	cmp	r3, #0
 801b66a:	dd48      	ble.n	801b6fe <__sflush_r+0xae>
 801b66c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801b66e:	2e00      	cmp	r6, #0
 801b670:	d045      	beq.n	801b6fe <__sflush_r+0xae>
 801b672:	2300      	movs	r3, #0
 801b674:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801b678:	682f      	ldr	r7, [r5, #0]
 801b67a:	6a21      	ldr	r1, [r4, #32]
 801b67c:	602b      	str	r3, [r5, #0]
 801b67e:	d030      	beq.n	801b6e2 <__sflush_r+0x92>
 801b680:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801b682:	89a3      	ldrh	r3, [r4, #12]
 801b684:	0759      	lsls	r1, r3, #29
 801b686:	d505      	bpl.n	801b694 <__sflush_r+0x44>
 801b688:	6863      	ldr	r3, [r4, #4]
 801b68a:	1ad2      	subs	r2, r2, r3
 801b68c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801b68e:	b10b      	cbz	r3, 801b694 <__sflush_r+0x44>
 801b690:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801b692:	1ad2      	subs	r2, r2, r3
 801b694:	2300      	movs	r3, #0
 801b696:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801b698:	6a21      	ldr	r1, [r4, #32]
 801b69a:	4628      	mov	r0, r5
 801b69c:	47b0      	blx	r6
 801b69e:	1c43      	adds	r3, r0, #1
 801b6a0:	89a3      	ldrh	r3, [r4, #12]
 801b6a2:	d106      	bne.n	801b6b2 <__sflush_r+0x62>
 801b6a4:	6829      	ldr	r1, [r5, #0]
 801b6a6:	291d      	cmp	r1, #29
 801b6a8:	d82b      	bhi.n	801b702 <__sflush_r+0xb2>
 801b6aa:	4a2a      	ldr	r2, [pc, #168]	@ (801b754 <__sflush_r+0x104>)
 801b6ac:	40ca      	lsrs	r2, r1
 801b6ae:	07d6      	lsls	r6, r2, #31
 801b6b0:	d527      	bpl.n	801b702 <__sflush_r+0xb2>
 801b6b2:	2200      	movs	r2, #0
 801b6b4:	6062      	str	r2, [r4, #4]
 801b6b6:	04d9      	lsls	r1, r3, #19
 801b6b8:	6922      	ldr	r2, [r4, #16]
 801b6ba:	6022      	str	r2, [r4, #0]
 801b6bc:	d504      	bpl.n	801b6c8 <__sflush_r+0x78>
 801b6be:	1c42      	adds	r2, r0, #1
 801b6c0:	d101      	bne.n	801b6c6 <__sflush_r+0x76>
 801b6c2:	682b      	ldr	r3, [r5, #0]
 801b6c4:	b903      	cbnz	r3, 801b6c8 <__sflush_r+0x78>
 801b6c6:	6560      	str	r0, [r4, #84]	@ 0x54
 801b6c8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801b6ca:	602f      	str	r7, [r5, #0]
 801b6cc:	b1b9      	cbz	r1, 801b6fe <__sflush_r+0xae>
 801b6ce:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801b6d2:	4299      	cmp	r1, r3
 801b6d4:	d002      	beq.n	801b6dc <__sflush_r+0x8c>
 801b6d6:	4628      	mov	r0, r5
 801b6d8:	f7ff fb42 	bl	801ad60 <_free_r>
 801b6dc:	2300      	movs	r3, #0
 801b6de:	6363      	str	r3, [r4, #52]	@ 0x34
 801b6e0:	e00d      	b.n	801b6fe <__sflush_r+0xae>
 801b6e2:	2301      	movs	r3, #1
 801b6e4:	4628      	mov	r0, r5
 801b6e6:	47b0      	blx	r6
 801b6e8:	4602      	mov	r2, r0
 801b6ea:	1c50      	adds	r0, r2, #1
 801b6ec:	d1c9      	bne.n	801b682 <__sflush_r+0x32>
 801b6ee:	682b      	ldr	r3, [r5, #0]
 801b6f0:	2b00      	cmp	r3, #0
 801b6f2:	d0c6      	beq.n	801b682 <__sflush_r+0x32>
 801b6f4:	2b1d      	cmp	r3, #29
 801b6f6:	d001      	beq.n	801b6fc <__sflush_r+0xac>
 801b6f8:	2b16      	cmp	r3, #22
 801b6fa:	d11e      	bne.n	801b73a <__sflush_r+0xea>
 801b6fc:	602f      	str	r7, [r5, #0]
 801b6fe:	2000      	movs	r0, #0
 801b700:	e022      	b.n	801b748 <__sflush_r+0xf8>
 801b702:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801b706:	b21b      	sxth	r3, r3
 801b708:	e01b      	b.n	801b742 <__sflush_r+0xf2>
 801b70a:	690f      	ldr	r7, [r1, #16]
 801b70c:	2f00      	cmp	r7, #0
 801b70e:	d0f6      	beq.n	801b6fe <__sflush_r+0xae>
 801b710:	0793      	lsls	r3, r2, #30
 801b712:	680e      	ldr	r6, [r1, #0]
 801b714:	bf08      	it	eq
 801b716:	694b      	ldreq	r3, [r1, #20]
 801b718:	600f      	str	r7, [r1, #0]
 801b71a:	bf18      	it	ne
 801b71c:	2300      	movne	r3, #0
 801b71e:	eba6 0807 	sub.w	r8, r6, r7
 801b722:	608b      	str	r3, [r1, #8]
 801b724:	f1b8 0f00 	cmp.w	r8, #0
 801b728:	dde9      	ble.n	801b6fe <__sflush_r+0xae>
 801b72a:	6a21      	ldr	r1, [r4, #32]
 801b72c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801b72e:	4643      	mov	r3, r8
 801b730:	463a      	mov	r2, r7
 801b732:	4628      	mov	r0, r5
 801b734:	47b0      	blx	r6
 801b736:	2800      	cmp	r0, #0
 801b738:	dc08      	bgt.n	801b74c <__sflush_r+0xfc>
 801b73a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b73e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801b742:	81a3      	strh	r3, [r4, #12]
 801b744:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801b748:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b74c:	4407      	add	r7, r0
 801b74e:	eba8 0800 	sub.w	r8, r8, r0
 801b752:	e7e7      	b.n	801b724 <__sflush_r+0xd4>
 801b754:	20400001 	.word	0x20400001

0801b758 <_fflush_r>:
 801b758:	b538      	push	{r3, r4, r5, lr}
 801b75a:	690b      	ldr	r3, [r1, #16]
 801b75c:	4605      	mov	r5, r0
 801b75e:	460c      	mov	r4, r1
 801b760:	b913      	cbnz	r3, 801b768 <_fflush_r+0x10>
 801b762:	2500      	movs	r5, #0
 801b764:	4628      	mov	r0, r5
 801b766:	bd38      	pop	{r3, r4, r5, pc}
 801b768:	b118      	cbz	r0, 801b772 <_fflush_r+0x1a>
 801b76a:	6a03      	ldr	r3, [r0, #32]
 801b76c:	b90b      	cbnz	r3, 801b772 <_fflush_r+0x1a>
 801b76e:	f7fe ffdf 	bl	801a730 <__sinit>
 801b772:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b776:	2b00      	cmp	r3, #0
 801b778:	d0f3      	beq.n	801b762 <_fflush_r+0xa>
 801b77a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801b77c:	07d0      	lsls	r0, r2, #31
 801b77e:	d404      	bmi.n	801b78a <_fflush_r+0x32>
 801b780:	0599      	lsls	r1, r3, #22
 801b782:	d402      	bmi.n	801b78a <_fflush_r+0x32>
 801b784:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801b786:	f7ff faa8 	bl	801acda <__retarget_lock_acquire_recursive>
 801b78a:	4628      	mov	r0, r5
 801b78c:	4621      	mov	r1, r4
 801b78e:	f7ff ff5f 	bl	801b650 <__sflush_r>
 801b792:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801b794:	07da      	lsls	r2, r3, #31
 801b796:	4605      	mov	r5, r0
 801b798:	d4e4      	bmi.n	801b764 <_fflush_r+0xc>
 801b79a:	89a3      	ldrh	r3, [r4, #12]
 801b79c:	059b      	lsls	r3, r3, #22
 801b79e:	d4e1      	bmi.n	801b764 <_fflush_r+0xc>
 801b7a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801b7a2:	f7ff fa9b 	bl	801acdc <__retarget_lock_release_recursive>
 801b7a6:	e7dd      	b.n	801b764 <_fflush_r+0xc>

0801b7a8 <fiprintf>:
 801b7a8:	b40e      	push	{r1, r2, r3}
 801b7aa:	b503      	push	{r0, r1, lr}
 801b7ac:	4601      	mov	r1, r0
 801b7ae:	ab03      	add	r3, sp, #12
 801b7b0:	4805      	ldr	r0, [pc, #20]	@ (801b7c8 <fiprintf+0x20>)
 801b7b2:	f853 2b04 	ldr.w	r2, [r3], #4
 801b7b6:	6800      	ldr	r0, [r0, #0]
 801b7b8:	9301      	str	r3, [sp, #4]
 801b7ba:	f7ff fca5 	bl	801b108 <_vfiprintf_r>
 801b7be:	b002      	add	sp, #8
 801b7c0:	f85d eb04 	ldr.w	lr, [sp], #4
 801b7c4:	b003      	add	sp, #12
 801b7c6:	4770      	bx	lr
 801b7c8:	20000438 	.word	0x20000438

0801b7cc <__swhatbuf_r>:
 801b7cc:	b570      	push	{r4, r5, r6, lr}
 801b7ce:	460c      	mov	r4, r1
 801b7d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b7d4:	2900      	cmp	r1, #0
 801b7d6:	b096      	sub	sp, #88	@ 0x58
 801b7d8:	4615      	mov	r5, r2
 801b7da:	461e      	mov	r6, r3
 801b7dc:	da0d      	bge.n	801b7fa <__swhatbuf_r+0x2e>
 801b7de:	89a3      	ldrh	r3, [r4, #12]
 801b7e0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801b7e4:	f04f 0100 	mov.w	r1, #0
 801b7e8:	bf14      	ite	ne
 801b7ea:	2340      	movne	r3, #64	@ 0x40
 801b7ec:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801b7f0:	2000      	movs	r0, #0
 801b7f2:	6031      	str	r1, [r6, #0]
 801b7f4:	602b      	str	r3, [r5, #0]
 801b7f6:	b016      	add	sp, #88	@ 0x58
 801b7f8:	bd70      	pop	{r4, r5, r6, pc}
 801b7fa:	466a      	mov	r2, sp
 801b7fc:	f000 f848 	bl	801b890 <_fstat_r>
 801b800:	2800      	cmp	r0, #0
 801b802:	dbec      	blt.n	801b7de <__swhatbuf_r+0x12>
 801b804:	9901      	ldr	r1, [sp, #4]
 801b806:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801b80a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801b80e:	4259      	negs	r1, r3
 801b810:	4159      	adcs	r1, r3
 801b812:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801b816:	e7eb      	b.n	801b7f0 <__swhatbuf_r+0x24>

0801b818 <__smakebuf_r>:
 801b818:	898b      	ldrh	r3, [r1, #12]
 801b81a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801b81c:	079d      	lsls	r5, r3, #30
 801b81e:	4606      	mov	r6, r0
 801b820:	460c      	mov	r4, r1
 801b822:	d507      	bpl.n	801b834 <__smakebuf_r+0x1c>
 801b824:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801b828:	6023      	str	r3, [r4, #0]
 801b82a:	6123      	str	r3, [r4, #16]
 801b82c:	2301      	movs	r3, #1
 801b82e:	6163      	str	r3, [r4, #20]
 801b830:	b003      	add	sp, #12
 801b832:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b834:	ab01      	add	r3, sp, #4
 801b836:	466a      	mov	r2, sp
 801b838:	f7ff ffc8 	bl	801b7cc <__swhatbuf_r>
 801b83c:	9f00      	ldr	r7, [sp, #0]
 801b83e:	4605      	mov	r5, r0
 801b840:	4639      	mov	r1, r7
 801b842:	4630      	mov	r0, r6
 801b844:	f7fe fd42 	bl	801a2cc <_malloc_r>
 801b848:	b948      	cbnz	r0, 801b85e <__smakebuf_r+0x46>
 801b84a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b84e:	059a      	lsls	r2, r3, #22
 801b850:	d4ee      	bmi.n	801b830 <__smakebuf_r+0x18>
 801b852:	f023 0303 	bic.w	r3, r3, #3
 801b856:	f043 0302 	orr.w	r3, r3, #2
 801b85a:	81a3      	strh	r3, [r4, #12]
 801b85c:	e7e2      	b.n	801b824 <__smakebuf_r+0xc>
 801b85e:	89a3      	ldrh	r3, [r4, #12]
 801b860:	6020      	str	r0, [r4, #0]
 801b862:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801b866:	81a3      	strh	r3, [r4, #12]
 801b868:	9b01      	ldr	r3, [sp, #4]
 801b86a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801b86e:	b15b      	cbz	r3, 801b888 <__smakebuf_r+0x70>
 801b870:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801b874:	4630      	mov	r0, r6
 801b876:	f000 f81d 	bl	801b8b4 <_isatty_r>
 801b87a:	b128      	cbz	r0, 801b888 <__smakebuf_r+0x70>
 801b87c:	89a3      	ldrh	r3, [r4, #12]
 801b87e:	f023 0303 	bic.w	r3, r3, #3
 801b882:	f043 0301 	orr.w	r3, r3, #1
 801b886:	81a3      	strh	r3, [r4, #12]
 801b888:	89a3      	ldrh	r3, [r4, #12]
 801b88a:	431d      	orrs	r5, r3
 801b88c:	81a5      	strh	r5, [r4, #12]
 801b88e:	e7cf      	b.n	801b830 <__smakebuf_r+0x18>

0801b890 <_fstat_r>:
 801b890:	b538      	push	{r3, r4, r5, lr}
 801b892:	4d07      	ldr	r5, [pc, #28]	@ (801b8b0 <_fstat_r+0x20>)
 801b894:	2300      	movs	r3, #0
 801b896:	4604      	mov	r4, r0
 801b898:	4608      	mov	r0, r1
 801b89a:	4611      	mov	r1, r2
 801b89c:	602b      	str	r3, [r5, #0]
 801b89e:	f7e7 fe95 	bl	80035cc <_fstat>
 801b8a2:	1c43      	adds	r3, r0, #1
 801b8a4:	d102      	bne.n	801b8ac <_fstat_r+0x1c>
 801b8a6:	682b      	ldr	r3, [r5, #0]
 801b8a8:	b103      	cbz	r3, 801b8ac <_fstat_r+0x1c>
 801b8aa:	6023      	str	r3, [r4, #0]
 801b8ac:	bd38      	pop	{r3, r4, r5, pc}
 801b8ae:	bf00      	nop
 801b8b0:	2000b604 	.word	0x2000b604

0801b8b4 <_isatty_r>:
 801b8b4:	b538      	push	{r3, r4, r5, lr}
 801b8b6:	4d06      	ldr	r5, [pc, #24]	@ (801b8d0 <_isatty_r+0x1c>)
 801b8b8:	2300      	movs	r3, #0
 801b8ba:	4604      	mov	r4, r0
 801b8bc:	4608      	mov	r0, r1
 801b8be:	602b      	str	r3, [r5, #0]
 801b8c0:	f7e7 fe94 	bl	80035ec <_isatty>
 801b8c4:	1c43      	adds	r3, r0, #1
 801b8c6:	d102      	bne.n	801b8ce <_isatty_r+0x1a>
 801b8c8:	682b      	ldr	r3, [r5, #0]
 801b8ca:	b103      	cbz	r3, 801b8ce <_isatty_r+0x1a>
 801b8cc:	6023      	str	r3, [r4, #0]
 801b8ce:	bd38      	pop	{r3, r4, r5, pc}
 801b8d0:	2000b604 	.word	0x2000b604

0801b8d4 <abort>:
 801b8d4:	b508      	push	{r3, lr}
 801b8d6:	2006      	movs	r0, #6
 801b8d8:	f000 f82c 	bl	801b934 <raise>
 801b8dc:	2001      	movs	r0, #1
 801b8de:	f7e7 fe25 	bl	800352c <_exit>

0801b8e2 <_raise_r>:
 801b8e2:	291f      	cmp	r1, #31
 801b8e4:	b538      	push	{r3, r4, r5, lr}
 801b8e6:	4605      	mov	r5, r0
 801b8e8:	460c      	mov	r4, r1
 801b8ea:	d904      	bls.n	801b8f6 <_raise_r+0x14>
 801b8ec:	2316      	movs	r3, #22
 801b8ee:	6003      	str	r3, [r0, #0]
 801b8f0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801b8f4:	bd38      	pop	{r3, r4, r5, pc}
 801b8f6:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801b8f8:	b112      	cbz	r2, 801b900 <_raise_r+0x1e>
 801b8fa:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801b8fe:	b94b      	cbnz	r3, 801b914 <_raise_r+0x32>
 801b900:	4628      	mov	r0, r5
 801b902:	f000 f831 	bl	801b968 <_getpid_r>
 801b906:	4622      	mov	r2, r4
 801b908:	4601      	mov	r1, r0
 801b90a:	4628      	mov	r0, r5
 801b90c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801b910:	f000 b818 	b.w	801b944 <_kill_r>
 801b914:	2b01      	cmp	r3, #1
 801b916:	d00a      	beq.n	801b92e <_raise_r+0x4c>
 801b918:	1c59      	adds	r1, r3, #1
 801b91a:	d103      	bne.n	801b924 <_raise_r+0x42>
 801b91c:	2316      	movs	r3, #22
 801b91e:	6003      	str	r3, [r0, #0]
 801b920:	2001      	movs	r0, #1
 801b922:	e7e7      	b.n	801b8f4 <_raise_r+0x12>
 801b924:	2100      	movs	r1, #0
 801b926:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801b92a:	4620      	mov	r0, r4
 801b92c:	4798      	blx	r3
 801b92e:	2000      	movs	r0, #0
 801b930:	e7e0      	b.n	801b8f4 <_raise_r+0x12>
	...

0801b934 <raise>:
 801b934:	4b02      	ldr	r3, [pc, #8]	@ (801b940 <raise+0xc>)
 801b936:	4601      	mov	r1, r0
 801b938:	6818      	ldr	r0, [r3, #0]
 801b93a:	f7ff bfd2 	b.w	801b8e2 <_raise_r>
 801b93e:	bf00      	nop
 801b940:	20000438 	.word	0x20000438

0801b944 <_kill_r>:
 801b944:	b538      	push	{r3, r4, r5, lr}
 801b946:	4d07      	ldr	r5, [pc, #28]	@ (801b964 <_kill_r+0x20>)
 801b948:	2300      	movs	r3, #0
 801b94a:	4604      	mov	r4, r0
 801b94c:	4608      	mov	r0, r1
 801b94e:	4611      	mov	r1, r2
 801b950:	602b      	str	r3, [r5, #0]
 801b952:	f7e7 fddb 	bl	800350c <_kill>
 801b956:	1c43      	adds	r3, r0, #1
 801b958:	d102      	bne.n	801b960 <_kill_r+0x1c>
 801b95a:	682b      	ldr	r3, [r5, #0]
 801b95c:	b103      	cbz	r3, 801b960 <_kill_r+0x1c>
 801b95e:	6023      	str	r3, [r4, #0]
 801b960:	bd38      	pop	{r3, r4, r5, pc}
 801b962:	bf00      	nop
 801b964:	2000b604 	.word	0x2000b604

0801b968 <_getpid_r>:
 801b968:	f7e7 bdc8 	b.w	80034fc <_getpid>

0801b96c <fmodf>:
 801b96c:	b508      	push	{r3, lr}
 801b96e:	ed2d 8b02 	vpush	{d8}
 801b972:	eef0 8a40 	vmov.f32	s17, s0
 801b976:	eeb0 8a60 	vmov.f32	s16, s1
 801b97a:	f000 f9cd 	bl	801bd18 <__ieee754_fmodf>
 801b97e:	eef4 8a48 	vcmp.f32	s17, s16
 801b982:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b986:	d60c      	bvs.n	801b9a2 <fmodf+0x36>
 801b988:	eddf 8a07 	vldr	s17, [pc, #28]	@ 801b9a8 <fmodf+0x3c>
 801b98c:	eeb4 8a68 	vcmp.f32	s16, s17
 801b990:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b994:	d105      	bne.n	801b9a2 <fmodf+0x36>
 801b996:	f7ff f975 	bl	801ac84 <__errno>
 801b99a:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 801b99e:	2321      	movs	r3, #33	@ 0x21
 801b9a0:	6003      	str	r3, [r0, #0]
 801b9a2:	ecbd 8b02 	vpop	{d8}
 801b9a6:	bd08      	pop	{r3, pc}
 801b9a8:	00000000 	.word	0x00000000

0801b9ac <powf>:
 801b9ac:	b508      	push	{r3, lr}
 801b9ae:	ed2d 8b04 	vpush	{d8-d9}
 801b9b2:	eeb0 8a60 	vmov.f32	s16, s1
 801b9b6:	eeb0 9a40 	vmov.f32	s18, s0
 801b9ba:	f000 fa2f 	bl	801be1c <__ieee754_powf>
 801b9be:	eeb4 8a48 	vcmp.f32	s16, s16
 801b9c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b9c6:	eef0 8a40 	vmov.f32	s17, s0
 801b9ca:	d63e      	bvs.n	801ba4a <powf+0x9e>
 801b9cc:	eeb5 9a40 	vcmp.f32	s18, #0.0
 801b9d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b9d4:	d112      	bne.n	801b9fc <powf+0x50>
 801b9d6:	eeb5 8a40 	vcmp.f32	s16, #0.0
 801b9da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b9de:	d039      	beq.n	801ba54 <powf+0xa8>
 801b9e0:	eeb0 0a48 	vmov.f32	s0, s16
 801b9e4:	f000 f8c4 	bl	801bb70 <finitef>
 801b9e8:	b378      	cbz	r0, 801ba4a <powf+0x9e>
 801b9ea:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 801b9ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b9f2:	d52a      	bpl.n	801ba4a <powf+0x9e>
 801b9f4:	f7ff f946 	bl	801ac84 <__errno>
 801b9f8:	2322      	movs	r3, #34	@ 0x22
 801b9fa:	e014      	b.n	801ba26 <powf+0x7a>
 801b9fc:	f000 f8b8 	bl	801bb70 <finitef>
 801ba00:	b998      	cbnz	r0, 801ba2a <powf+0x7e>
 801ba02:	eeb0 0a49 	vmov.f32	s0, s18
 801ba06:	f000 f8b3 	bl	801bb70 <finitef>
 801ba0a:	b170      	cbz	r0, 801ba2a <powf+0x7e>
 801ba0c:	eeb0 0a48 	vmov.f32	s0, s16
 801ba10:	f000 f8ae 	bl	801bb70 <finitef>
 801ba14:	b148      	cbz	r0, 801ba2a <powf+0x7e>
 801ba16:	eef4 8a68 	vcmp.f32	s17, s17
 801ba1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ba1e:	d7e9      	bvc.n	801b9f4 <powf+0x48>
 801ba20:	f7ff f930 	bl	801ac84 <__errno>
 801ba24:	2321      	movs	r3, #33	@ 0x21
 801ba26:	6003      	str	r3, [r0, #0]
 801ba28:	e00f      	b.n	801ba4a <powf+0x9e>
 801ba2a:	eef5 8a40 	vcmp.f32	s17, #0.0
 801ba2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ba32:	d10a      	bne.n	801ba4a <powf+0x9e>
 801ba34:	eeb0 0a49 	vmov.f32	s0, s18
 801ba38:	f000 f89a 	bl	801bb70 <finitef>
 801ba3c:	b128      	cbz	r0, 801ba4a <powf+0x9e>
 801ba3e:	eeb0 0a48 	vmov.f32	s0, s16
 801ba42:	f000 f895 	bl	801bb70 <finitef>
 801ba46:	2800      	cmp	r0, #0
 801ba48:	d1d4      	bne.n	801b9f4 <powf+0x48>
 801ba4a:	eeb0 0a68 	vmov.f32	s0, s17
 801ba4e:	ecbd 8b04 	vpop	{d8-d9}
 801ba52:	bd08      	pop	{r3, pc}
 801ba54:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 801ba58:	e7f7      	b.n	801ba4a <powf+0x9e>
	...

0801ba5c <cosf>:
 801ba5c:	ee10 3a10 	vmov	r3, s0
 801ba60:	b507      	push	{r0, r1, r2, lr}
 801ba62:	4a1e      	ldr	r2, [pc, #120]	@ (801badc <cosf+0x80>)
 801ba64:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801ba68:	4293      	cmp	r3, r2
 801ba6a:	d806      	bhi.n	801ba7a <cosf+0x1e>
 801ba6c:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 801bae0 <cosf+0x84>
 801ba70:	b003      	add	sp, #12
 801ba72:	f85d eb04 	ldr.w	lr, [sp], #4
 801ba76:	f000 b8af 	b.w	801bbd8 <__kernel_cosf>
 801ba7a:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 801ba7e:	d304      	bcc.n	801ba8a <cosf+0x2e>
 801ba80:	ee30 0a40 	vsub.f32	s0, s0, s0
 801ba84:	b003      	add	sp, #12
 801ba86:	f85d fb04 	ldr.w	pc, [sp], #4
 801ba8a:	4668      	mov	r0, sp
 801ba8c:	f000 fc94 	bl	801c3b8 <__ieee754_rem_pio2f>
 801ba90:	f000 0003 	and.w	r0, r0, #3
 801ba94:	2801      	cmp	r0, #1
 801ba96:	d009      	beq.n	801baac <cosf+0x50>
 801ba98:	2802      	cmp	r0, #2
 801ba9a:	d010      	beq.n	801babe <cosf+0x62>
 801ba9c:	b9b0      	cbnz	r0, 801bacc <cosf+0x70>
 801ba9e:	eddd 0a01 	vldr	s1, [sp, #4]
 801baa2:	ed9d 0a00 	vldr	s0, [sp]
 801baa6:	f000 f897 	bl	801bbd8 <__kernel_cosf>
 801baaa:	e7eb      	b.n	801ba84 <cosf+0x28>
 801baac:	eddd 0a01 	vldr	s1, [sp, #4]
 801bab0:	ed9d 0a00 	vldr	s0, [sp]
 801bab4:	f000 f8e8 	bl	801bc88 <__kernel_sinf>
 801bab8:	eeb1 0a40 	vneg.f32	s0, s0
 801babc:	e7e2      	b.n	801ba84 <cosf+0x28>
 801babe:	eddd 0a01 	vldr	s1, [sp, #4]
 801bac2:	ed9d 0a00 	vldr	s0, [sp]
 801bac6:	f000 f887 	bl	801bbd8 <__kernel_cosf>
 801baca:	e7f5      	b.n	801bab8 <cosf+0x5c>
 801bacc:	eddd 0a01 	vldr	s1, [sp, #4]
 801bad0:	ed9d 0a00 	vldr	s0, [sp]
 801bad4:	2001      	movs	r0, #1
 801bad6:	f000 f8d7 	bl	801bc88 <__kernel_sinf>
 801bada:	e7d3      	b.n	801ba84 <cosf+0x28>
 801badc:	3f490fd8 	.word	0x3f490fd8
 801bae0:	00000000 	.word	0x00000000

0801bae4 <sinf>:
 801bae4:	ee10 3a10 	vmov	r3, s0
 801bae8:	b507      	push	{r0, r1, r2, lr}
 801baea:	4a1f      	ldr	r2, [pc, #124]	@ (801bb68 <sinf+0x84>)
 801baec:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801baf0:	4293      	cmp	r3, r2
 801baf2:	d807      	bhi.n	801bb04 <sinf+0x20>
 801baf4:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 801bb6c <sinf+0x88>
 801baf8:	2000      	movs	r0, #0
 801bafa:	b003      	add	sp, #12
 801bafc:	f85d eb04 	ldr.w	lr, [sp], #4
 801bb00:	f000 b8c2 	b.w	801bc88 <__kernel_sinf>
 801bb04:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 801bb08:	d304      	bcc.n	801bb14 <sinf+0x30>
 801bb0a:	ee30 0a40 	vsub.f32	s0, s0, s0
 801bb0e:	b003      	add	sp, #12
 801bb10:	f85d fb04 	ldr.w	pc, [sp], #4
 801bb14:	4668      	mov	r0, sp
 801bb16:	f000 fc4f 	bl	801c3b8 <__ieee754_rem_pio2f>
 801bb1a:	f000 0003 	and.w	r0, r0, #3
 801bb1e:	2801      	cmp	r0, #1
 801bb20:	d00a      	beq.n	801bb38 <sinf+0x54>
 801bb22:	2802      	cmp	r0, #2
 801bb24:	d00f      	beq.n	801bb46 <sinf+0x62>
 801bb26:	b9c0      	cbnz	r0, 801bb5a <sinf+0x76>
 801bb28:	eddd 0a01 	vldr	s1, [sp, #4]
 801bb2c:	ed9d 0a00 	vldr	s0, [sp]
 801bb30:	2001      	movs	r0, #1
 801bb32:	f000 f8a9 	bl	801bc88 <__kernel_sinf>
 801bb36:	e7ea      	b.n	801bb0e <sinf+0x2a>
 801bb38:	eddd 0a01 	vldr	s1, [sp, #4]
 801bb3c:	ed9d 0a00 	vldr	s0, [sp]
 801bb40:	f000 f84a 	bl	801bbd8 <__kernel_cosf>
 801bb44:	e7e3      	b.n	801bb0e <sinf+0x2a>
 801bb46:	eddd 0a01 	vldr	s1, [sp, #4]
 801bb4a:	ed9d 0a00 	vldr	s0, [sp]
 801bb4e:	2001      	movs	r0, #1
 801bb50:	f000 f89a 	bl	801bc88 <__kernel_sinf>
 801bb54:	eeb1 0a40 	vneg.f32	s0, s0
 801bb58:	e7d9      	b.n	801bb0e <sinf+0x2a>
 801bb5a:	eddd 0a01 	vldr	s1, [sp, #4]
 801bb5e:	ed9d 0a00 	vldr	s0, [sp]
 801bb62:	f000 f839 	bl	801bbd8 <__kernel_cosf>
 801bb66:	e7f5      	b.n	801bb54 <sinf+0x70>
 801bb68:	3f490fd8 	.word	0x3f490fd8
 801bb6c:	00000000 	.word	0x00000000

0801bb70 <finitef>:
 801bb70:	ee10 3a10 	vmov	r3, s0
 801bb74:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 801bb78:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 801bb7c:	bfac      	ite	ge
 801bb7e:	2000      	movge	r0, #0
 801bb80:	2001      	movlt	r0, #1
 801bb82:	4770      	bx	lr

0801bb84 <with_errnof>:
 801bb84:	b510      	push	{r4, lr}
 801bb86:	ed2d 8b02 	vpush	{d8}
 801bb8a:	eeb0 8a40 	vmov.f32	s16, s0
 801bb8e:	4604      	mov	r4, r0
 801bb90:	f7ff f878 	bl	801ac84 <__errno>
 801bb94:	eeb0 0a48 	vmov.f32	s0, s16
 801bb98:	ecbd 8b02 	vpop	{d8}
 801bb9c:	6004      	str	r4, [r0, #0]
 801bb9e:	bd10      	pop	{r4, pc}

0801bba0 <xflowf>:
 801bba0:	b130      	cbz	r0, 801bbb0 <xflowf+0x10>
 801bba2:	eef1 7a40 	vneg.f32	s15, s0
 801bba6:	ee27 0a80 	vmul.f32	s0, s15, s0
 801bbaa:	2022      	movs	r0, #34	@ 0x22
 801bbac:	f7ff bfea 	b.w	801bb84 <with_errnof>
 801bbb0:	eef0 7a40 	vmov.f32	s15, s0
 801bbb4:	e7f7      	b.n	801bba6 <xflowf+0x6>
	...

0801bbb8 <__math_uflowf>:
 801bbb8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 801bbc0 <__math_uflowf+0x8>
 801bbbc:	f7ff bff0 	b.w	801bba0 <xflowf>
 801bbc0:	10000000 	.word	0x10000000

0801bbc4 <__math_oflowf>:
 801bbc4:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 801bbcc <__math_oflowf+0x8>
 801bbc8:	f7ff bfea 	b.w	801bba0 <xflowf>
 801bbcc:	70000000 	.word	0x70000000

0801bbd0 <__ieee754_sqrtf>:
 801bbd0:	eeb1 0ac0 	vsqrt.f32	s0, s0
 801bbd4:	4770      	bx	lr
	...

0801bbd8 <__kernel_cosf>:
 801bbd8:	ee10 3a10 	vmov	r3, s0
 801bbdc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801bbe0:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 801bbe4:	eef0 6a40 	vmov.f32	s13, s0
 801bbe8:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 801bbec:	d204      	bcs.n	801bbf8 <__kernel_cosf+0x20>
 801bbee:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 801bbf2:	ee17 2a90 	vmov	r2, s15
 801bbf6:	b342      	cbz	r2, 801bc4a <__kernel_cosf+0x72>
 801bbf8:	ee26 7aa6 	vmul.f32	s14, s13, s13
 801bbfc:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 801bc68 <__kernel_cosf+0x90>
 801bc00:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 801bc6c <__kernel_cosf+0x94>
 801bc04:	4a1a      	ldr	r2, [pc, #104]	@ (801bc70 <__kernel_cosf+0x98>)
 801bc06:	eea7 6a27 	vfma.f32	s12, s14, s15
 801bc0a:	4293      	cmp	r3, r2
 801bc0c:	eddf 7a19 	vldr	s15, [pc, #100]	@ 801bc74 <__kernel_cosf+0x9c>
 801bc10:	eee6 7a07 	vfma.f32	s15, s12, s14
 801bc14:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 801bc78 <__kernel_cosf+0xa0>
 801bc18:	eea7 6a87 	vfma.f32	s12, s15, s14
 801bc1c:	eddf 7a17 	vldr	s15, [pc, #92]	@ 801bc7c <__kernel_cosf+0xa4>
 801bc20:	eee6 7a07 	vfma.f32	s15, s12, s14
 801bc24:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 801bc80 <__kernel_cosf+0xa8>
 801bc28:	eea7 6a87 	vfma.f32	s12, s15, s14
 801bc2c:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 801bc30:	ee26 6a07 	vmul.f32	s12, s12, s14
 801bc34:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 801bc38:	eee7 0a06 	vfma.f32	s1, s14, s12
 801bc3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 801bc40:	d804      	bhi.n	801bc4c <__kernel_cosf+0x74>
 801bc42:	ee77 7ae0 	vsub.f32	s15, s15, s1
 801bc46:	ee30 0a67 	vsub.f32	s0, s0, s15
 801bc4a:	4770      	bx	lr
 801bc4c:	4a0d      	ldr	r2, [pc, #52]	@ (801bc84 <__kernel_cosf+0xac>)
 801bc4e:	4293      	cmp	r3, r2
 801bc50:	bf9a      	itte	ls
 801bc52:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 801bc56:	ee07 3a10 	vmovls	s14, r3
 801bc5a:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 801bc5e:	ee30 0a47 	vsub.f32	s0, s0, s14
 801bc62:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801bc66:	e7ec      	b.n	801bc42 <__kernel_cosf+0x6a>
 801bc68:	ad47d74e 	.word	0xad47d74e
 801bc6c:	310f74f6 	.word	0x310f74f6
 801bc70:	3e999999 	.word	0x3e999999
 801bc74:	b493f27c 	.word	0xb493f27c
 801bc78:	37d00d01 	.word	0x37d00d01
 801bc7c:	bab60b61 	.word	0xbab60b61
 801bc80:	3d2aaaab 	.word	0x3d2aaaab
 801bc84:	3f480000 	.word	0x3f480000

0801bc88 <__kernel_sinf>:
 801bc88:	ee10 3a10 	vmov	r3, s0
 801bc8c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801bc90:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 801bc94:	d204      	bcs.n	801bca0 <__kernel_sinf+0x18>
 801bc96:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801bc9a:	ee17 3a90 	vmov	r3, s15
 801bc9e:	b35b      	cbz	r3, 801bcf8 <__kernel_sinf+0x70>
 801bca0:	ee20 7a00 	vmul.f32	s14, s0, s0
 801bca4:	eddf 7a15 	vldr	s15, [pc, #84]	@ 801bcfc <__kernel_sinf+0x74>
 801bca8:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 801bd00 <__kernel_sinf+0x78>
 801bcac:	eea7 6a27 	vfma.f32	s12, s14, s15
 801bcb0:	eddf 7a14 	vldr	s15, [pc, #80]	@ 801bd04 <__kernel_sinf+0x7c>
 801bcb4:	eee6 7a07 	vfma.f32	s15, s12, s14
 801bcb8:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 801bd08 <__kernel_sinf+0x80>
 801bcbc:	eea7 6a87 	vfma.f32	s12, s15, s14
 801bcc0:	eddf 7a12 	vldr	s15, [pc, #72]	@ 801bd0c <__kernel_sinf+0x84>
 801bcc4:	ee60 6a07 	vmul.f32	s13, s0, s14
 801bcc8:	eee6 7a07 	vfma.f32	s15, s12, s14
 801bccc:	b930      	cbnz	r0, 801bcdc <__kernel_sinf+0x54>
 801bcce:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 801bd10 <__kernel_sinf+0x88>
 801bcd2:	eea7 6a27 	vfma.f32	s12, s14, s15
 801bcd6:	eea6 0a26 	vfma.f32	s0, s12, s13
 801bcda:	4770      	bx	lr
 801bcdc:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 801bce0:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 801bce4:	eee0 7a86 	vfma.f32	s15, s1, s12
 801bce8:	eed7 0a87 	vfnms.f32	s1, s15, s14
 801bcec:	eddf 7a09 	vldr	s15, [pc, #36]	@ 801bd14 <__kernel_sinf+0x8c>
 801bcf0:	eee6 0aa7 	vfma.f32	s1, s13, s15
 801bcf4:	ee30 0a60 	vsub.f32	s0, s0, s1
 801bcf8:	4770      	bx	lr
 801bcfa:	bf00      	nop
 801bcfc:	2f2ec9d3 	.word	0x2f2ec9d3
 801bd00:	b2d72f34 	.word	0xb2d72f34
 801bd04:	3638ef1b 	.word	0x3638ef1b
 801bd08:	b9500d01 	.word	0xb9500d01
 801bd0c:	3c088889 	.word	0x3c088889
 801bd10:	be2aaaab 	.word	0xbe2aaaab
 801bd14:	3e2aaaab 	.word	0x3e2aaaab

0801bd18 <__ieee754_fmodf>:
 801bd18:	b570      	push	{r4, r5, r6, lr}
 801bd1a:	ee10 6a90 	vmov	r6, s1
 801bd1e:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 801bd22:	1e5a      	subs	r2, r3, #1
 801bd24:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 801bd28:	d206      	bcs.n	801bd38 <__ieee754_fmodf+0x20>
 801bd2a:	ee10 4a10 	vmov	r4, s0
 801bd2e:	f024 4100 	bic.w	r1, r4, #2147483648	@ 0x80000000
 801bd32:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 801bd36:	d304      	bcc.n	801bd42 <__ieee754_fmodf+0x2a>
 801bd38:	ee60 0a20 	vmul.f32	s1, s0, s1
 801bd3c:	ee80 0aa0 	vdiv.f32	s0, s1, s1
 801bd40:	bd70      	pop	{r4, r5, r6, pc}
 801bd42:	4299      	cmp	r1, r3
 801bd44:	dbfc      	blt.n	801bd40 <__ieee754_fmodf+0x28>
 801bd46:	f004 4500 	and.w	r5, r4, #2147483648	@ 0x80000000
 801bd4a:	d105      	bne.n	801bd58 <__ieee754_fmodf+0x40>
 801bd4c:	4b32      	ldr	r3, [pc, #200]	@ (801be18 <__ieee754_fmodf+0x100>)
 801bd4e:	eb03 7355 	add.w	r3, r3, r5, lsr #29
 801bd52:	ed93 0a00 	vldr	s0, [r3]
 801bd56:	e7f3      	b.n	801bd40 <__ieee754_fmodf+0x28>
 801bd58:	f014 4fff 	tst.w	r4, #2139095040	@ 0x7f800000
 801bd5c:	d146      	bne.n	801bdec <__ieee754_fmodf+0xd4>
 801bd5e:	020a      	lsls	r2, r1, #8
 801bd60:	f06f 007d 	mvn.w	r0, #125	@ 0x7d
 801bd64:	2a00      	cmp	r2, #0
 801bd66:	dc3e      	bgt.n	801bde6 <__ieee754_fmodf+0xce>
 801bd68:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 801bd6c:	bf01      	itttt	eq
 801bd6e:	021a      	lsleq	r2, r3, #8
 801bd70:	fab2 f282 	clzeq	r2, r2
 801bd74:	f1c2 22ff 	rsbeq	r2, r2, #4278255360	@ 0xff00ff00
 801bd78:	f502 027f 	addeq.w	r2, r2, #16711680	@ 0xff0000
 801bd7c:	bf16      	itet	ne
 801bd7e:	15da      	asrne	r2, r3, #23
 801bd80:	3282      	addeq	r2, #130	@ 0x82
 801bd82:	3a7f      	subne	r2, #127	@ 0x7f
 801bd84:	f110 0f7e 	cmn.w	r0, #126	@ 0x7e
 801bd88:	bfbb      	ittet	lt
 801bd8a:	f06f 047d 	mvnlt.w	r4, #125	@ 0x7d
 801bd8e:	1a24      	sublt	r4, r4, r0
 801bd90:	f3c4 0416 	ubfxge	r4, r4, #0, #23
 801bd94:	40a1      	lsllt	r1, r4
 801bd96:	bfa8      	it	ge
 801bd98:	f444 0100 	orrge.w	r1, r4, #8388608	@ 0x800000
 801bd9c:	f112 0f7e 	cmn.w	r2, #126	@ 0x7e
 801bda0:	bfb5      	itete	lt
 801bda2:	f06f 047d 	mvnlt.w	r4, #125	@ 0x7d
 801bda6:	f3c6 0616 	ubfxge	r6, r6, #0, #23
 801bdaa:	1aa4      	sublt	r4, r4, r2
 801bdac:	f446 0400 	orrge.w	r4, r6, #8388608	@ 0x800000
 801bdb0:	bfb8      	it	lt
 801bdb2:	fa03 f404 	lsllt.w	r4, r3, r4
 801bdb6:	1a80      	subs	r0, r0, r2
 801bdb8:	1b0b      	subs	r3, r1, r4
 801bdba:	b9d0      	cbnz	r0, 801bdf2 <__ieee754_fmodf+0xda>
 801bdbc:	ea33 0323 	bics.w	r3, r3, r3, asr #32
 801bdc0:	bf28      	it	cs
 801bdc2:	460b      	movcs	r3, r1
 801bdc4:	2b00      	cmp	r3, #0
 801bdc6:	d0c1      	beq.n	801bd4c <__ieee754_fmodf+0x34>
 801bdc8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 801bdcc:	db19      	blt.n	801be02 <__ieee754_fmodf+0xea>
 801bdce:	f112 0f7e 	cmn.w	r2, #126	@ 0x7e
 801bdd2:	db19      	blt.n	801be08 <__ieee754_fmodf+0xf0>
 801bdd4:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 801bdd8:	327f      	adds	r2, #127	@ 0x7f
 801bdda:	432b      	orrs	r3, r5
 801bddc:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 801bde0:	ee00 3a10 	vmov	s0, r3
 801bde4:	e7ac      	b.n	801bd40 <__ieee754_fmodf+0x28>
 801bde6:	3801      	subs	r0, #1
 801bde8:	0052      	lsls	r2, r2, #1
 801bdea:	e7bb      	b.n	801bd64 <__ieee754_fmodf+0x4c>
 801bdec:	15c8      	asrs	r0, r1, #23
 801bdee:	387f      	subs	r0, #127	@ 0x7f
 801bdf0:	e7ba      	b.n	801bd68 <__ieee754_fmodf+0x50>
 801bdf2:	2b00      	cmp	r3, #0
 801bdf4:	da02      	bge.n	801bdfc <__ieee754_fmodf+0xe4>
 801bdf6:	0049      	lsls	r1, r1, #1
 801bdf8:	3801      	subs	r0, #1
 801bdfa:	e7dd      	b.n	801bdb8 <__ieee754_fmodf+0xa0>
 801bdfc:	d0a6      	beq.n	801bd4c <__ieee754_fmodf+0x34>
 801bdfe:	0059      	lsls	r1, r3, #1
 801be00:	e7fa      	b.n	801bdf8 <__ieee754_fmodf+0xe0>
 801be02:	005b      	lsls	r3, r3, #1
 801be04:	3a01      	subs	r2, #1
 801be06:	e7df      	b.n	801bdc8 <__ieee754_fmodf+0xb0>
 801be08:	f1c2 22ff 	rsb	r2, r2, #4278255360	@ 0xff00ff00
 801be0c:	f502 027f 	add.w	r2, r2, #16711680	@ 0xff0000
 801be10:	3282      	adds	r2, #130	@ 0x82
 801be12:	4113      	asrs	r3, r2
 801be14:	432b      	orrs	r3, r5
 801be16:	e7e3      	b.n	801bde0 <__ieee754_fmodf+0xc8>
 801be18:	0801e4c4 	.word	0x0801e4c4

0801be1c <__ieee754_powf>:
 801be1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801be20:	ee10 4a90 	vmov	r4, s1
 801be24:	f034 4900 	bics.w	r9, r4, #2147483648	@ 0x80000000
 801be28:	ed2d 8b02 	vpush	{d8}
 801be2c:	ee10 6a10 	vmov	r6, s0
 801be30:	eeb0 8a40 	vmov.f32	s16, s0
 801be34:	eef0 8a60 	vmov.f32	s17, s1
 801be38:	d10c      	bne.n	801be54 <__ieee754_powf+0x38>
 801be3a:	f486 0680 	eor.w	r6, r6, #4194304	@ 0x400000
 801be3e:	0076      	lsls	r6, r6, #1
 801be40:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 801be44:	f240 8274 	bls.w	801c330 <__ieee754_powf+0x514>
 801be48:	ee38 0a28 	vadd.f32	s0, s16, s17
 801be4c:	ecbd 8b02 	vpop	{d8}
 801be50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801be54:	f026 4800 	bic.w	r8, r6, #2147483648	@ 0x80000000
 801be58:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 801be5c:	d802      	bhi.n	801be64 <__ieee754_powf+0x48>
 801be5e:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 801be62:	d908      	bls.n	801be76 <__ieee754_powf+0x5a>
 801be64:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 801be68:	d1ee      	bne.n	801be48 <__ieee754_powf+0x2c>
 801be6a:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 801be6e:	0064      	lsls	r4, r4, #1
 801be70:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 801be74:	e7e6      	b.n	801be44 <__ieee754_powf+0x28>
 801be76:	2e00      	cmp	r6, #0
 801be78:	da1f      	bge.n	801beba <__ieee754_powf+0x9e>
 801be7a:	f1b9 4f97 	cmp.w	r9, #1266679808	@ 0x4b800000
 801be7e:	f080 8260 	bcs.w	801c342 <__ieee754_powf+0x526>
 801be82:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 801be86:	d32f      	bcc.n	801bee8 <__ieee754_powf+0xcc>
 801be88:	ea4f 53e9 	mov.w	r3, r9, asr #23
 801be8c:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 801be90:	fa49 f503 	asr.w	r5, r9, r3
 801be94:	fa05 f303 	lsl.w	r3, r5, r3
 801be98:	454b      	cmp	r3, r9
 801be9a:	d123      	bne.n	801bee4 <__ieee754_powf+0xc8>
 801be9c:	f005 0501 	and.w	r5, r5, #1
 801bea0:	f1c5 0502 	rsb	r5, r5, #2
 801bea4:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 801bea8:	d11f      	bne.n	801beea <__ieee754_powf+0xce>
 801beaa:	2c00      	cmp	r4, #0
 801beac:	f280 8246 	bge.w	801c33c <__ieee754_powf+0x520>
 801beb0:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 801beb4:	ee87 0a88 	vdiv.f32	s0, s15, s16
 801beb8:	e7c8      	b.n	801be4c <__ieee754_powf+0x30>
 801beba:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 801bebe:	d111      	bne.n	801bee4 <__ieee754_powf+0xc8>
 801bec0:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 801bec4:	f000 8234 	beq.w	801c330 <__ieee754_powf+0x514>
 801bec8:	d906      	bls.n	801bed8 <__ieee754_powf+0xbc>
 801beca:	ed9f 0ac5 	vldr	s0, [pc, #788]	@ 801c1e0 <__ieee754_powf+0x3c4>
 801bece:	2c00      	cmp	r4, #0
 801bed0:	bfa8      	it	ge
 801bed2:	eeb0 0a68 	vmovge.f32	s0, s17
 801bed6:	e7b9      	b.n	801be4c <__ieee754_powf+0x30>
 801bed8:	2c00      	cmp	r4, #0
 801beda:	f280 822c 	bge.w	801c336 <__ieee754_powf+0x51a>
 801bede:	eeb1 0a68 	vneg.f32	s0, s17
 801bee2:	e7b3      	b.n	801be4c <__ieee754_powf+0x30>
 801bee4:	2500      	movs	r5, #0
 801bee6:	e7dd      	b.n	801bea4 <__ieee754_powf+0x88>
 801bee8:	2500      	movs	r5, #0
 801beea:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 801beee:	d102      	bne.n	801bef6 <__ieee754_powf+0xda>
 801bef0:	ee28 0a08 	vmul.f32	s0, s16, s16
 801bef4:	e7aa      	b.n	801be4c <__ieee754_powf+0x30>
 801bef6:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 801befa:	f040 8227 	bne.w	801c34c <__ieee754_powf+0x530>
 801befe:	2e00      	cmp	r6, #0
 801bf00:	f2c0 8224 	blt.w	801c34c <__ieee754_powf+0x530>
 801bf04:	eeb0 0a48 	vmov.f32	s0, s16
 801bf08:	ecbd 8b02 	vpop	{d8}
 801bf0c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801bf10:	f7ff be5e 	b.w	801bbd0 <__ieee754_sqrtf>
 801bf14:	2d01      	cmp	r5, #1
 801bf16:	d199      	bne.n	801be4c <__ieee754_powf+0x30>
 801bf18:	eeb1 0a40 	vneg.f32	s0, s0
 801bf1c:	e796      	b.n	801be4c <__ieee754_powf+0x30>
 801bf1e:	0ff0      	lsrs	r0, r6, #31
 801bf20:	3801      	subs	r0, #1
 801bf22:	ea55 0300 	orrs.w	r3, r5, r0
 801bf26:	d104      	bne.n	801bf32 <__ieee754_powf+0x116>
 801bf28:	ee38 8a48 	vsub.f32	s16, s16, s16
 801bf2c:	ee88 0a08 	vdiv.f32	s0, s16, s16
 801bf30:	e78c      	b.n	801be4c <__ieee754_powf+0x30>
 801bf32:	f1b9 4f9a 	cmp.w	r9, #1291845632	@ 0x4d000000
 801bf36:	d96d      	bls.n	801c014 <__ieee754_powf+0x1f8>
 801bf38:	4baa      	ldr	r3, [pc, #680]	@ (801c1e4 <__ieee754_powf+0x3c8>)
 801bf3a:	4598      	cmp	r8, r3
 801bf3c:	d808      	bhi.n	801bf50 <__ieee754_powf+0x134>
 801bf3e:	2c00      	cmp	r4, #0
 801bf40:	da0b      	bge.n	801bf5a <__ieee754_powf+0x13e>
 801bf42:	2000      	movs	r0, #0
 801bf44:	ecbd 8b02 	vpop	{d8}
 801bf48:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801bf4c:	f7ff be3a 	b.w	801bbc4 <__math_oflowf>
 801bf50:	4ba5      	ldr	r3, [pc, #660]	@ (801c1e8 <__ieee754_powf+0x3cc>)
 801bf52:	4598      	cmp	r8, r3
 801bf54:	d908      	bls.n	801bf68 <__ieee754_powf+0x14c>
 801bf56:	2c00      	cmp	r4, #0
 801bf58:	dcf3      	bgt.n	801bf42 <__ieee754_powf+0x126>
 801bf5a:	2000      	movs	r0, #0
 801bf5c:	ecbd 8b02 	vpop	{d8}
 801bf60:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801bf64:	f7ff be28 	b.w	801bbb8 <__math_uflowf>
 801bf68:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 801bf6c:	ee30 0a67 	vsub.f32	s0, s0, s15
 801bf70:	eddf 6a9e 	vldr	s13, [pc, #632]	@ 801c1ec <__ieee754_powf+0x3d0>
 801bf74:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 801bf78:	eee0 6a67 	vfms.f32	s13, s0, s15
 801bf7c:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 801bf80:	eee6 7ac0 	vfms.f32	s15, s13, s0
 801bf84:	ee20 7a00 	vmul.f32	s14, s0, s0
 801bf88:	eddf 6a99 	vldr	s13, [pc, #612]	@ 801c1f0 <__ieee754_powf+0x3d4>
 801bf8c:	ee27 7a27 	vmul.f32	s14, s14, s15
 801bf90:	eddf 7a98 	vldr	s15, [pc, #608]	@ 801c1f4 <__ieee754_powf+0x3d8>
 801bf94:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 801bf98:	ed9f 7a97 	vldr	s14, [pc, #604]	@ 801c1f8 <__ieee754_powf+0x3dc>
 801bf9c:	eee0 7a07 	vfma.f32	s15, s0, s14
 801bfa0:	eeb0 7a67 	vmov.f32	s14, s15
 801bfa4:	eea0 7a26 	vfma.f32	s14, s0, s13
 801bfa8:	ee17 3a10 	vmov	r3, s14
 801bfac:	f36f 030b 	bfc	r3, #0, #12
 801bfb0:	ee07 3a10 	vmov	s14, r3
 801bfb4:	eeb0 6a47 	vmov.f32	s12, s14
 801bfb8:	eea0 6a66 	vfms.f32	s12, s0, s13
 801bfbc:	ee77 7ac6 	vsub.f32	s15, s15, s12
 801bfc0:	3d01      	subs	r5, #1
 801bfc2:	4305      	orrs	r5, r0
 801bfc4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801bfc8:	eebf 8a00 	vmov.f32	s16, #240	@ 0xbf800000 -1.0
 801bfcc:	f36f 040b 	bfc	r4, #0, #12
 801bfd0:	bf18      	it	ne
 801bfd2:	eeb0 8a66 	vmovne.f32	s16, s13
 801bfd6:	ee06 4a90 	vmov	s13, r4
 801bfda:	ee67 0aa8 	vmul.f32	s1, s15, s17
 801bfde:	ee38 6ae6 	vsub.f32	s12, s17, s13
 801bfe2:	ee67 7a26 	vmul.f32	s15, s14, s13
 801bfe6:	eee6 0a07 	vfma.f32	s1, s12, s14
 801bfea:	ee30 7aa7 	vadd.f32	s14, s1, s15
 801bfee:	ee17 1a10 	vmov	r1, s14
 801bff2:	2900      	cmp	r1, #0
 801bff4:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801bff8:	f340 80dd 	ble.w	801c1b6 <__ieee754_powf+0x39a>
 801bffc:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 801c000:	f240 80ca 	bls.w	801c198 <__ieee754_powf+0x37c>
 801c004:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 801c008:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c00c:	bf4c      	ite	mi
 801c00e:	2001      	movmi	r0, #1
 801c010:	2000      	movpl	r0, #0
 801c012:	e797      	b.n	801bf44 <__ieee754_powf+0x128>
 801c014:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 801c018:	bf01      	itttt	eq
 801c01a:	eddf 7a78 	vldreq	s15, [pc, #480]	@ 801c1fc <__ieee754_powf+0x3e0>
 801c01e:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 801c022:	f06f 0317 	mvneq.w	r3, #23
 801c026:	ee17 7a90 	vmoveq	r7, s15
 801c02a:	ea4f 52e7 	mov.w	r2, r7, asr #23
 801c02e:	bf18      	it	ne
 801c030:	2300      	movne	r3, #0
 801c032:	3a7f      	subs	r2, #127	@ 0x7f
 801c034:	441a      	add	r2, r3
 801c036:	4b72      	ldr	r3, [pc, #456]	@ (801c200 <__ieee754_powf+0x3e4>)
 801c038:	f3c7 0716 	ubfx	r7, r7, #0, #23
 801c03c:	429f      	cmp	r7, r3
 801c03e:	f047 517e 	orr.w	r1, r7, #1065353216	@ 0x3f800000
 801c042:	dd06      	ble.n	801c052 <__ieee754_powf+0x236>
 801c044:	4b6f      	ldr	r3, [pc, #444]	@ (801c204 <__ieee754_powf+0x3e8>)
 801c046:	429f      	cmp	r7, r3
 801c048:	f340 80a4 	ble.w	801c194 <__ieee754_powf+0x378>
 801c04c:	3201      	adds	r2, #1
 801c04e:	f5a1 0100 	sub.w	r1, r1, #8388608	@ 0x800000
 801c052:	2600      	movs	r6, #0
 801c054:	4b6c      	ldr	r3, [pc, #432]	@ (801c208 <__ieee754_powf+0x3ec>)
 801c056:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 801c05a:	ee07 1a10 	vmov	s14, r1
 801c05e:	edd3 5a00 	vldr	s11, [r3]
 801c062:	4b6a      	ldr	r3, [pc, #424]	@ (801c20c <__ieee754_powf+0x3f0>)
 801c064:	ee75 7a87 	vadd.f32	s15, s11, s14
 801c068:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801c06c:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 801c070:	1049      	asrs	r1, r1, #1
 801c072:	f041 5100 	orr.w	r1, r1, #536870912	@ 0x20000000
 801c076:	f501 2180 	add.w	r1, r1, #262144	@ 0x40000
 801c07a:	eb01 5146 	add.w	r1, r1, r6, lsl #21
 801c07e:	ee37 6a65 	vsub.f32	s12, s14, s11
 801c082:	ee07 1a90 	vmov	s15, r1
 801c086:	ee26 5a24 	vmul.f32	s10, s12, s9
 801c08a:	ee77 5ae5 	vsub.f32	s11, s15, s11
 801c08e:	ee15 7a10 	vmov	r7, s10
 801c092:	401f      	ands	r7, r3
 801c094:	ee06 7a90 	vmov	s13, r7
 801c098:	eea6 6ae7 	vfms.f32	s12, s13, s15
 801c09c:	ee37 7a65 	vsub.f32	s14, s14, s11
 801c0a0:	ee65 7a05 	vmul.f32	s15, s10, s10
 801c0a4:	eea6 6ac7 	vfms.f32	s12, s13, s14
 801c0a8:	eddf 5a59 	vldr	s11, [pc, #356]	@ 801c210 <__ieee754_powf+0x3f4>
 801c0ac:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 801c214 <__ieee754_powf+0x3f8>
 801c0b0:	eee7 5a87 	vfma.f32	s11, s15, s14
 801c0b4:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 801c218 <__ieee754_powf+0x3fc>
 801c0b8:	eea5 7aa7 	vfma.f32	s14, s11, s15
 801c0bc:	eddf 5a4b 	vldr	s11, [pc, #300]	@ 801c1ec <__ieee754_powf+0x3d0>
 801c0c0:	eee7 5a27 	vfma.f32	s11, s14, s15
 801c0c4:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 801c21c <__ieee754_powf+0x400>
 801c0c8:	eea5 7aa7 	vfma.f32	s14, s11, s15
 801c0cc:	eddf 5a54 	vldr	s11, [pc, #336]	@ 801c220 <__ieee754_powf+0x404>
 801c0d0:	ee26 6a24 	vmul.f32	s12, s12, s9
 801c0d4:	eee7 5a27 	vfma.f32	s11, s14, s15
 801c0d8:	ee35 7a26 	vadd.f32	s14, s10, s13
 801c0dc:	ee67 4aa7 	vmul.f32	s9, s15, s15
 801c0e0:	ee27 7a06 	vmul.f32	s14, s14, s12
 801c0e4:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 801c0e8:	eea4 7aa5 	vfma.f32	s14, s9, s11
 801c0ec:	eef0 5a67 	vmov.f32	s11, s15
 801c0f0:	eee6 5aa6 	vfma.f32	s11, s13, s13
 801c0f4:	ee75 5a87 	vadd.f32	s11, s11, s14
 801c0f8:	ee15 1a90 	vmov	r1, s11
 801c0fc:	4019      	ands	r1, r3
 801c0fe:	ee05 1a90 	vmov	s11, r1
 801c102:	ee75 7ae7 	vsub.f32	s15, s11, s15
 801c106:	eee6 7ae6 	vfms.f32	s15, s13, s13
 801c10a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801c10e:	ee67 7a85 	vmul.f32	s15, s15, s10
 801c112:	eee6 7a25 	vfma.f32	s15, s12, s11
 801c116:	eeb0 6a67 	vmov.f32	s12, s15
 801c11a:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801c11e:	ee16 1a10 	vmov	r1, s12
 801c122:	4019      	ands	r1, r3
 801c124:	ee06 1a10 	vmov	s12, r1
 801c128:	eeb0 7a46 	vmov.f32	s14, s12
 801c12c:	eea6 7ae5 	vfms.f32	s14, s13, s11
 801c130:	493c      	ldr	r1, [pc, #240]	@ (801c224 <__ieee754_powf+0x408>)
 801c132:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 801c136:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801c13a:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 801c228 <__ieee754_powf+0x40c>
 801c13e:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 801c22c <__ieee754_powf+0x410>
 801c142:	ee67 7a87 	vmul.f32	s15, s15, s14
 801c146:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 801c230 <__ieee754_powf+0x414>
 801c14a:	eee6 7a07 	vfma.f32	s15, s12, s14
 801c14e:	ed91 7a00 	vldr	s14, [r1]
 801c152:	ee77 7a87 	vadd.f32	s15, s15, s14
 801c156:	ee07 2a10 	vmov	s14, r2
 801c15a:	4a36      	ldr	r2, [pc, #216]	@ (801c234 <__ieee754_powf+0x418>)
 801c15c:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 801c160:	eeb0 7a67 	vmov.f32	s14, s15
 801c164:	eea6 7a25 	vfma.f32	s14, s12, s11
 801c168:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 801c16c:	ed92 5a00 	vldr	s10, [r2]
 801c170:	ee37 7a05 	vadd.f32	s14, s14, s10
 801c174:	ee37 7a26 	vadd.f32	s14, s14, s13
 801c178:	ee17 2a10 	vmov	r2, s14
 801c17c:	401a      	ands	r2, r3
 801c17e:	ee07 2a10 	vmov	s14, r2
 801c182:	ee77 6a66 	vsub.f32	s13, s14, s13
 801c186:	ee76 6ac5 	vsub.f32	s13, s13, s10
 801c18a:	eee6 6a65 	vfms.f32	s13, s12, s11
 801c18e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801c192:	e715      	b.n	801bfc0 <__ieee754_powf+0x1a4>
 801c194:	2601      	movs	r6, #1
 801c196:	e75d      	b.n	801c054 <__ieee754_powf+0x238>
 801c198:	d152      	bne.n	801c240 <__ieee754_powf+0x424>
 801c19a:	eddf 6a27 	vldr	s13, [pc, #156]	@ 801c238 <__ieee754_powf+0x41c>
 801c19e:	ee37 7a67 	vsub.f32	s14, s14, s15
 801c1a2:	ee70 6aa6 	vadd.f32	s13, s1, s13
 801c1a6:	eef4 6ac7 	vcmpe.f32	s13, s14
 801c1aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c1ae:	f73f af29 	bgt.w	801c004 <__ieee754_powf+0x1e8>
 801c1b2:	2386      	movs	r3, #134	@ 0x86
 801c1b4:	e048      	b.n	801c248 <__ieee754_powf+0x42c>
 801c1b6:	4a21      	ldr	r2, [pc, #132]	@ (801c23c <__ieee754_powf+0x420>)
 801c1b8:	4293      	cmp	r3, r2
 801c1ba:	d907      	bls.n	801c1cc <__ieee754_powf+0x3b0>
 801c1bc:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 801c1c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c1c4:	bf4c      	ite	mi
 801c1c6:	2001      	movmi	r0, #1
 801c1c8:	2000      	movpl	r0, #0
 801c1ca:	e6c7      	b.n	801bf5c <__ieee754_powf+0x140>
 801c1cc:	d138      	bne.n	801c240 <__ieee754_powf+0x424>
 801c1ce:	ee37 7a67 	vsub.f32	s14, s14, s15
 801c1d2:	eeb4 7ae0 	vcmpe.f32	s14, s1
 801c1d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c1da:	dbea      	blt.n	801c1b2 <__ieee754_powf+0x396>
 801c1dc:	e7ee      	b.n	801c1bc <__ieee754_powf+0x3a0>
 801c1de:	bf00      	nop
 801c1e0:	00000000 	.word	0x00000000
 801c1e4:	3f7ffff3 	.word	0x3f7ffff3
 801c1e8:	3f800007 	.word	0x3f800007
 801c1ec:	3eaaaaab 	.word	0x3eaaaaab
 801c1f0:	3fb8aa00 	.word	0x3fb8aa00
 801c1f4:	3fb8aa3b 	.word	0x3fb8aa3b
 801c1f8:	36eca570 	.word	0x36eca570
 801c1fc:	4b800000 	.word	0x4b800000
 801c200:	001cc471 	.word	0x001cc471
 801c204:	005db3d6 	.word	0x005db3d6
 801c208:	0801e4dc 	.word	0x0801e4dc
 801c20c:	fffff000 	.word	0xfffff000
 801c210:	3e6c3255 	.word	0x3e6c3255
 801c214:	3e53f142 	.word	0x3e53f142
 801c218:	3e8ba305 	.word	0x3e8ba305
 801c21c:	3edb6db7 	.word	0x3edb6db7
 801c220:	3f19999a 	.word	0x3f19999a
 801c224:	0801e4cc 	.word	0x0801e4cc
 801c228:	3f76384f 	.word	0x3f76384f
 801c22c:	3f763800 	.word	0x3f763800
 801c230:	369dc3a0 	.word	0x369dc3a0
 801c234:	0801e4d4 	.word	0x0801e4d4
 801c238:	3338aa3c 	.word	0x3338aa3c
 801c23c:	43160000 	.word	0x43160000
 801c240:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 801c244:	d96f      	bls.n	801c326 <__ieee754_powf+0x50a>
 801c246:	15db      	asrs	r3, r3, #23
 801c248:	3b7e      	subs	r3, #126	@ 0x7e
 801c24a:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 801c24e:	4118      	asrs	r0, r3
 801c250:	4408      	add	r0, r1
 801c252:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 801c256:	4a4e      	ldr	r2, [pc, #312]	@ (801c390 <__ieee754_powf+0x574>)
 801c258:	3b7f      	subs	r3, #127	@ 0x7f
 801c25a:	411a      	asrs	r2, r3
 801c25c:	4002      	ands	r2, r0
 801c25e:	ee07 2a10 	vmov	s14, r2
 801c262:	f3c0 0016 	ubfx	r0, r0, #0, #23
 801c266:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 801c26a:	f1c3 0317 	rsb	r3, r3, #23
 801c26e:	4118      	asrs	r0, r3
 801c270:	2900      	cmp	r1, #0
 801c272:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801c276:	bfb8      	it	lt
 801c278:	4240      	neglt	r0, r0
 801c27a:	ee77 6aa0 	vadd.f32	s13, s15, s1
 801c27e:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 801c394 <__ieee754_powf+0x578>
 801c282:	ed9f 6a45 	vldr	s12, [pc, #276]	@ 801c398 <__ieee754_powf+0x57c>
 801c286:	ee16 3a90 	vmov	r3, s13
 801c28a:	f36f 030b 	bfc	r3, #0, #12
 801c28e:	ee06 3a90 	vmov	s13, r3
 801c292:	ee76 7ae7 	vsub.f32	s15, s13, s15
 801c296:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 801c29a:	ee70 0ae7 	vsub.f32	s1, s1, s15
 801c29e:	eddf 7a3f 	vldr	s15, [pc, #252]	@ 801c39c <__ieee754_powf+0x580>
 801c2a2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801c2a6:	eee0 7a87 	vfma.f32	s15, s1, s14
 801c2aa:	eeb0 7a67 	vmov.f32	s14, s15
 801c2ae:	eea6 7a86 	vfma.f32	s14, s13, s12
 801c2b2:	eef0 5a47 	vmov.f32	s11, s14
 801c2b6:	eee6 5ac6 	vfms.f32	s11, s13, s12
 801c2ba:	ee67 6a07 	vmul.f32	s13, s14, s14
 801c2be:	ee77 7ae5 	vsub.f32	s15, s15, s11
 801c2c2:	ed9f 6a37 	vldr	s12, [pc, #220]	@ 801c3a0 <__ieee754_powf+0x584>
 801c2c6:	eddf 5a37 	vldr	s11, [pc, #220]	@ 801c3a4 <__ieee754_powf+0x588>
 801c2ca:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801c2ce:	eddf 5a36 	vldr	s11, [pc, #216]	@ 801c3a8 <__ieee754_powf+0x58c>
 801c2d2:	eee6 5a26 	vfma.f32	s11, s12, s13
 801c2d6:	ed9f 6a35 	vldr	s12, [pc, #212]	@ 801c3ac <__ieee754_powf+0x590>
 801c2da:	eea5 6aa6 	vfma.f32	s12, s11, s13
 801c2de:	eddf 5a34 	vldr	s11, [pc, #208]	@ 801c3b0 <__ieee754_powf+0x594>
 801c2e2:	eee6 5a26 	vfma.f32	s11, s12, s13
 801c2e6:	eeb0 6a47 	vmov.f32	s12, s14
 801c2ea:	eea5 6ae6 	vfms.f32	s12, s11, s13
 801c2ee:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 801c2f2:	ee67 5a06 	vmul.f32	s11, s14, s12
 801c2f6:	ee36 6a66 	vsub.f32	s12, s12, s13
 801c2fa:	eee7 7a27 	vfma.f32	s15, s14, s15
 801c2fe:	eec5 6a86 	vdiv.f32	s13, s11, s12
 801c302:	ee76 7ae7 	vsub.f32	s15, s13, s15
 801c306:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801c30a:	ee30 0a67 	vsub.f32	s0, s0, s15
 801c30e:	ee10 3a10 	vmov	r3, s0
 801c312:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 801c316:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 801c31a:	da06      	bge.n	801c32a <__ieee754_powf+0x50e>
 801c31c:	f000 f984 	bl	801c628 <scalbnf>
 801c320:	ee20 0a08 	vmul.f32	s0, s0, s16
 801c324:	e592      	b.n	801be4c <__ieee754_powf+0x30>
 801c326:	2000      	movs	r0, #0
 801c328:	e7a7      	b.n	801c27a <__ieee754_powf+0x45e>
 801c32a:	ee00 3a10 	vmov	s0, r3
 801c32e:	e7f7      	b.n	801c320 <__ieee754_powf+0x504>
 801c330:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 801c334:	e58a      	b.n	801be4c <__ieee754_powf+0x30>
 801c336:	ed9f 0a1f 	vldr	s0, [pc, #124]	@ 801c3b4 <__ieee754_powf+0x598>
 801c33a:	e587      	b.n	801be4c <__ieee754_powf+0x30>
 801c33c:	eeb0 0a48 	vmov.f32	s0, s16
 801c340:	e584      	b.n	801be4c <__ieee754_powf+0x30>
 801c342:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 801c346:	f43f adbb 	beq.w	801bec0 <__ieee754_powf+0xa4>
 801c34a:	2502      	movs	r5, #2
 801c34c:	eeb0 0a48 	vmov.f32	s0, s16
 801c350:	f000 f962 	bl	801c618 <fabsf>
 801c354:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 801c358:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 801c35c:	4647      	mov	r7, r8
 801c35e:	d003      	beq.n	801c368 <__ieee754_powf+0x54c>
 801c360:	f1b8 0f00 	cmp.w	r8, #0
 801c364:	f47f addb 	bne.w	801bf1e <__ieee754_powf+0x102>
 801c368:	2c00      	cmp	r4, #0
 801c36a:	bfbc      	itt	lt
 801c36c:	eef7 7a00 	vmovlt.f32	s15, #112	@ 0x3f800000  1.0
 801c370:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 801c374:	2e00      	cmp	r6, #0
 801c376:	f6bf ad69 	bge.w	801be4c <__ieee754_powf+0x30>
 801c37a:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 801c37e:	ea58 0805 	orrs.w	r8, r8, r5
 801c382:	f47f adc7 	bne.w	801bf14 <__ieee754_powf+0xf8>
 801c386:	ee70 7a40 	vsub.f32	s15, s0, s0
 801c38a:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 801c38e:	e55d      	b.n	801be4c <__ieee754_powf+0x30>
 801c390:	ff800000 	.word	0xff800000
 801c394:	3f317218 	.word	0x3f317218
 801c398:	3f317200 	.word	0x3f317200
 801c39c:	35bfbe8c 	.word	0x35bfbe8c
 801c3a0:	b5ddea0e 	.word	0xb5ddea0e
 801c3a4:	3331bb4c 	.word	0x3331bb4c
 801c3a8:	388ab355 	.word	0x388ab355
 801c3ac:	bb360b61 	.word	0xbb360b61
 801c3b0:	3e2aaaab 	.word	0x3e2aaaab
 801c3b4:	00000000 	.word	0x00000000

0801c3b8 <__ieee754_rem_pio2f>:
 801c3b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c3ba:	ee10 6a10 	vmov	r6, s0
 801c3be:	4b88      	ldr	r3, [pc, #544]	@ (801c5e0 <__ieee754_rem_pio2f+0x228>)
 801c3c0:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 801c3c4:	429d      	cmp	r5, r3
 801c3c6:	b087      	sub	sp, #28
 801c3c8:	4604      	mov	r4, r0
 801c3ca:	d805      	bhi.n	801c3d8 <__ieee754_rem_pio2f+0x20>
 801c3cc:	2300      	movs	r3, #0
 801c3ce:	ed80 0a00 	vstr	s0, [r0]
 801c3d2:	6043      	str	r3, [r0, #4]
 801c3d4:	2000      	movs	r0, #0
 801c3d6:	e022      	b.n	801c41e <__ieee754_rem_pio2f+0x66>
 801c3d8:	4b82      	ldr	r3, [pc, #520]	@ (801c5e4 <__ieee754_rem_pio2f+0x22c>)
 801c3da:	429d      	cmp	r5, r3
 801c3dc:	d83a      	bhi.n	801c454 <__ieee754_rem_pio2f+0x9c>
 801c3de:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 801c3e2:	2e00      	cmp	r6, #0
 801c3e4:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 801c5e8 <__ieee754_rem_pio2f+0x230>
 801c3e8:	4a80      	ldr	r2, [pc, #512]	@ (801c5ec <__ieee754_rem_pio2f+0x234>)
 801c3ea:	f023 030f 	bic.w	r3, r3, #15
 801c3ee:	dd18      	ble.n	801c422 <__ieee754_rem_pio2f+0x6a>
 801c3f0:	4293      	cmp	r3, r2
 801c3f2:	ee70 7a47 	vsub.f32	s15, s0, s14
 801c3f6:	bf09      	itett	eq
 801c3f8:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 801c5f0 <__ieee754_rem_pio2f+0x238>
 801c3fc:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 801c5f4 <__ieee754_rem_pio2f+0x23c>
 801c400:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 801c5f8 <__ieee754_rem_pio2f+0x240>
 801c404:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 801c408:	ee37 7ae6 	vsub.f32	s14, s15, s13
 801c40c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801c410:	ed80 7a00 	vstr	s14, [r0]
 801c414:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801c418:	edc0 7a01 	vstr	s15, [r0, #4]
 801c41c:	2001      	movs	r0, #1
 801c41e:	b007      	add	sp, #28
 801c420:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c422:	4293      	cmp	r3, r2
 801c424:	ee70 7a07 	vadd.f32	s15, s0, s14
 801c428:	bf09      	itett	eq
 801c42a:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 801c5f0 <__ieee754_rem_pio2f+0x238>
 801c42e:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 801c5f4 <__ieee754_rem_pio2f+0x23c>
 801c432:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 801c5f8 <__ieee754_rem_pio2f+0x240>
 801c436:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 801c43a:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801c43e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801c442:	ed80 7a00 	vstr	s14, [r0]
 801c446:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801c44a:	edc0 7a01 	vstr	s15, [r0, #4]
 801c44e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801c452:	e7e4      	b.n	801c41e <__ieee754_rem_pio2f+0x66>
 801c454:	4b69      	ldr	r3, [pc, #420]	@ (801c5fc <__ieee754_rem_pio2f+0x244>)
 801c456:	429d      	cmp	r5, r3
 801c458:	d873      	bhi.n	801c542 <__ieee754_rem_pio2f+0x18a>
 801c45a:	f000 f8dd 	bl	801c618 <fabsf>
 801c45e:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 801c600 <__ieee754_rem_pio2f+0x248>
 801c462:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 801c466:	eee0 7a07 	vfma.f32	s15, s0, s14
 801c46a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801c46e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801c472:	ee17 0a90 	vmov	r0, s15
 801c476:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 801c5e8 <__ieee754_rem_pio2f+0x230>
 801c47a:	eea7 0a67 	vfms.f32	s0, s14, s15
 801c47e:	281f      	cmp	r0, #31
 801c480:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 801c5f4 <__ieee754_rem_pio2f+0x23c>
 801c484:	ee67 7a27 	vmul.f32	s15, s14, s15
 801c488:	eeb1 6a47 	vneg.f32	s12, s14
 801c48c:	ee70 6a67 	vsub.f32	s13, s0, s15
 801c490:	ee16 1a90 	vmov	r1, s13
 801c494:	dc09      	bgt.n	801c4aa <__ieee754_rem_pio2f+0xf2>
 801c496:	4a5b      	ldr	r2, [pc, #364]	@ (801c604 <__ieee754_rem_pio2f+0x24c>)
 801c498:	1e47      	subs	r7, r0, #1
 801c49a:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 801c49e:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 801c4a2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 801c4a6:	4293      	cmp	r3, r2
 801c4a8:	d107      	bne.n	801c4ba <__ieee754_rem_pio2f+0x102>
 801c4aa:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 801c4ae:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 801c4b2:	2a08      	cmp	r2, #8
 801c4b4:	ea4f 53e5 	mov.w	r3, r5, asr #23
 801c4b8:	dc14      	bgt.n	801c4e4 <__ieee754_rem_pio2f+0x12c>
 801c4ba:	6021      	str	r1, [r4, #0]
 801c4bc:	ed94 7a00 	vldr	s14, [r4]
 801c4c0:	ee30 0a47 	vsub.f32	s0, s0, s14
 801c4c4:	2e00      	cmp	r6, #0
 801c4c6:	ee30 0a67 	vsub.f32	s0, s0, s15
 801c4ca:	ed84 0a01 	vstr	s0, [r4, #4]
 801c4ce:	daa6      	bge.n	801c41e <__ieee754_rem_pio2f+0x66>
 801c4d0:	eeb1 7a47 	vneg.f32	s14, s14
 801c4d4:	eeb1 0a40 	vneg.f32	s0, s0
 801c4d8:	ed84 7a00 	vstr	s14, [r4]
 801c4dc:	ed84 0a01 	vstr	s0, [r4, #4]
 801c4e0:	4240      	negs	r0, r0
 801c4e2:	e79c      	b.n	801c41e <__ieee754_rem_pio2f+0x66>
 801c4e4:	eddf 5a42 	vldr	s11, [pc, #264]	@ 801c5f0 <__ieee754_rem_pio2f+0x238>
 801c4e8:	eef0 6a40 	vmov.f32	s13, s0
 801c4ec:	eee6 6a25 	vfma.f32	s13, s12, s11
 801c4f0:	ee70 7a66 	vsub.f32	s15, s0, s13
 801c4f4:	eee6 7a25 	vfma.f32	s15, s12, s11
 801c4f8:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 801c5f8 <__ieee754_rem_pio2f+0x240>
 801c4fc:	eed7 7a25 	vfnms.f32	s15, s14, s11
 801c500:	ee76 5ae7 	vsub.f32	s11, s13, s15
 801c504:	ee15 2a90 	vmov	r2, s11
 801c508:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 801c50c:	1a5b      	subs	r3, r3, r1
 801c50e:	2b19      	cmp	r3, #25
 801c510:	dc04      	bgt.n	801c51c <__ieee754_rem_pio2f+0x164>
 801c512:	edc4 5a00 	vstr	s11, [r4]
 801c516:	eeb0 0a66 	vmov.f32	s0, s13
 801c51a:	e7cf      	b.n	801c4bc <__ieee754_rem_pio2f+0x104>
 801c51c:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 801c608 <__ieee754_rem_pio2f+0x250>
 801c520:	eeb0 0a66 	vmov.f32	s0, s13
 801c524:	eea6 0a25 	vfma.f32	s0, s12, s11
 801c528:	ee76 7ac0 	vsub.f32	s15, s13, s0
 801c52c:	eddf 6a37 	vldr	s13, [pc, #220]	@ 801c60c <__ieee754_rem_pio2f+0x254>
 801c530:	eee6 7a25 	vfma.f32	s15, s12, s11
 801c534:	eed7 7a26 	vfnms.f32	s15, s14, s13
 801c538:	ee30 7a67 	vsub.f32	s14, s0, s15
 801c53c:	ed84 7a00 	vstr	s14, [r4]
 801c540:	e7bc      	b.n	801c4bc <__ieee754_rem_pio2f+0x104>
 801c542:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 801c546:	d306      	bcc.n	801c556 <__ieee754_rem_pio2f+0x19e>
 801c548:	ee70 7a40 	vsub.f32	s15, s0, s0
 801c54c:	edc0 7a01 	vstr	s15, [r0, #4]
 801c550:	edc0 7a00 	vstr	s15, [r0]
 801c554:	e73e      	b.n	801c3d4 <__ieee754_rem_pio2f+0x1c>
 801c556:	15ea      	asrs	r2, r5, #23
 801c558:	3a86      	subs	r2, #134	@ 0x86
 801c55a:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 801c55e:	ee07 3a90 	vmov	s15, r3
 801c562:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801c566:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 801c610 <__ieee754_rem_pio2f+0x258>
 801c56a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801c56e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801c572:	ed8d 7a03 	vstr	s14, [sp, #12]
 801c576:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801c57a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801c57e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801c582:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801c586:	ed8d 7a04 	vstr	s14, [sp, #16]
 801c58a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801c58e:	eef5 7a40 	vcmp.f32	s15, #0.0
 801c592:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c596:	edcd 7a05 	vstr	s15, [sp, #20]
 801c59a:	d11e      	bne.n	801c5da <__ieee754_rem_pio2f+0x222>
 801c59c:	eeb5 7a40 	vcmp.f32	s14, #0.0
 801c5a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c5a4:	bf0c      	ite	eq
 801c5a6:	2301      	moveq	r3, #1
 801c5a8:	2302      	movne	r3, #2
 801c5aa:	491a      	ldr	r1, [pc, #104]	@ (801c614 <__ieee754_rem_pio2f+0x25c>)
 801c5ac:	9101      	str	r1, [sp, #4]
 801c5ae:	2102      	movs	r1, #2
 801c5b0:	9100      	str	r1, [sp, #0]
 801c5b2:	a803      	add	r0, sp, #12
 801c5b4:	4621      	mov	r1, r4
 801c5b6:	f000 f89d 	bl	801c6f4 <__kernel_rem_pio2f>
 801c5ba:	2e00      	cmp	r6, #0
 801c5bc:	f6bf af2f 	bge.w	801c41e <__ieee754_rem_pio2f+0x66>
 801c5c0:	edd4 7a00 	vldr	s15, [r4]
 801c5c4:	eef1 7a67 	vneg.f32	s15, s15
 801c5c8:	edc4 7a00 	vstr	s15, [r4]
 801c5cc:	edd4 7a01 	vldr	s15, [r4, #4]
 801c5d0:	eef1 7a67 	vneg.f32	s15, s15
 801c5d4:	edc4 7a01 	vstr	s15, [r4, #4]
 801c5d8:	e782      	b.n	801c4e0 <__ieee754_rem_pio2f+0x128>
 801c5da:	2303      	movs	r3, #3
 801c5dc:	e7e5      	b.n	801c5aa <__ieee754_rem_pio2f+0x1f2>
 801c5de:	bf00      	nop
 801c5e0:	3f490fd8 	.word	0x3f490fd8
 801c5e4:	4016cbe3 	.word	0x4016cbe3
 801c5e8:	3fc90f80 	.word	0x3fc90f80
 801c5ec:	3fc90fd0 	.word	0x3fc90fd0
 801c5f0:	37354400 	.word	0x37354400
 801c5f4:	37354443 	.word	0x37354443
 801c5f8:	2e85a308 	.word	0x2e85a308
 801c5fc:	43490f80 	.word	0x43490f80
 801c600:	3f22f984 	.word	0x3f22f984
 801c604:	0801e4e4 	.word	0x0801e4e4
 801c608:	2e85a300 	.word	0x2e85a300
 801c60c:	248d3132 	.word	0x248d3132
 801c610:	43800000 	.word	0x43800000
 801c614:	0801e564 	.word	0x0801e564

0801c618 <fabsf>:
 801c618:	ee10 3a10 	vmov	r3, s0
 801c61c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801c620:	ee00 3a10 	vmov	s0, r3
 801c624:	4770      	bx	lr
	...

0801c628 <scalbnf>:
 801c628:	ee10 3a10 	vmov	r3, s0
 801c62c:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 801c630:	d02b      	beq.n	801c68a <scalbnf+0x62>
 801c632:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 801c636:	d302      	bcc.n	801c63e <scalbnf+0x16>
 801c638:	ee30 0a00 	vadd.f32	s0, s0, s0
 801c63c:	4770      	bx	lr
 801c63e:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 801c642:	d123      	bne.n	801c68c <scalbnf+0x64>
 801c644:	4b24      	ldr	r3, [pc, #144]	@ (801c6d8 <scalbnf+0xb0>)
 801c646:	eddf 7a25 	vldr	s15, [pc, #148]	@ 801c6dc <scalbnf+0xb4>
 801c64a:	4298      	cmp	r0, r3
 801c64c:	ee20 0a27 	vmul.f32	s0, s0, s15
 801c650:	db17      	blt.n	801c682 <scalbnf+0x5a>
 801c652:	ee10 3a10 	vmov	r3, s0
 801c656:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801c65a:	3a19      	subs	r2, #25
 801c65c:	f24c 3150 	movw	r1, #50000	@ 0xc350
 801c660:	4288      	cmp	r0, r1
 801c662:	dd15      	ble.n	801c690 <scalbnf+0x68>
 801c664:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 801c6e0 <scalbnf+0xb8>
 801c668:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 801c6e4 <scalbnf+0xbc>
 801c66c:	ee10 3a10 	vmov	r3, s0
 801c670:	eeb0 7a67 	vmov.f32	s14, s15
 801c674:	2b00      	cmp	r3, #0
 801c676:	bfb8      	it	lt
 801c678:	eef0 7a66 	vmovlt.f32	s15, s13
 801c67c:	ee27 0a87 	vmul.f32	s0, s15, s14
 801c680:	4770      	bx	lr
 801c682:	eddf 7a19 	vldr	s15, [pc, #100]	@ 801c6e8 <scalbnf+0xc0>
 801c686:	ee27 0a80 	vmul.f32	s0, s15, s0
 801c68a:	4770      	bx	lr
 801c68c:	0dd2      	lsrs	r2, r2, #23
 801c68e:	e7e5      	b.n	801c65c <scalbnf+0x34>
 801c690:	4410      	add	r0, r2
 801c692:	28fe      	cmp	r0, #254	@ 0xfe
 801c694:	dce6      	bgt.n	801c664 <scalbnf+0x3c>
 801c696:	2800      	cmp	r0, #0
 801c698:	dd06      	ble.n	801c6a8 <scalbnf+0x80>
 801c69a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 801c69e:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 801c6a2:	ee00 3a10 	vmov	s0, r3
 801c6a6:	4770      	bx	lr
 801c6a8:	f110 0f16 	cmn.w	r0, #22
 801c6ac:	da09      	bge.n	801c6c2 <scalbnf+0x9a>
 801c6ae:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 801c6e8 <scalbnf+0xc0>
 801c6b2:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 801c6ec <scalbnf+0xc4>
 801c6b6:	ee10 3a10 	vmov	r3, s0
 801c6ba:	eeb0 7a67 	vmov.f32	s14, s15
 801c6be:	2b00      	cmp	r3, #0
 801c6c0:	e7d9      	b.n	801c676 <scalbnf+0x4e>
 801c6c2:	3019      	adds	r0, #25
 801c6c4:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 801c6c8:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 801c6cc:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 801c6f0 <scalbnf+0xc8>
 801c6d0:	ee07 3a90 	vmov	s15, r3
 801c6d4:	e7d7      	b.n	801c686 <scalbnf+0x5e>
 801c6d6:	bf00      	nop
 801c6d8:	ffff3cb0 	.word	0xffff3cb0
 801c6dc:	4c000000 	.word	0x4c000000
 801c6e0:	7149f2ca 	.word	0x7149f2ca
 801c6e4:	f149f2ca 	.word	0xf149f2ca
 801c6e8:	0da24260 	.word	0x0da24260
 801c6ec:	8da24260 	.word	0x8da24260
 801c6f0:	33000000 	.word	0x33000000

0801c6f4 <__kernel_rem_pio2f>:
 801c6f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c6f8:	ed2d 8b04 	vpush	{d8-d9}
 801c6fc:	b0d9      	sub	sp, #356	@ 0x164
 801c6fe:	4690      	mov	r8, r2
 801c700:	9001      	str	r0, [sp, #4]
 801c702:	4ab6      	ldr	r2, [pc, #728]	@ (801c9dc <__kernel_rem_pio2f+0x2e8>)
 801c704:	9866      	ldr	r0, [sp, #408]	@ 0x198
 801c706:	f118 0f04 	cmn.w	r8, #4
 801c70a:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 801c70e:	460f      	mov	r7, r1
 801c710:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 801c714:	db26      	blt.n	801c764 <__kernel_rem_pio2f+0x70>
 801c716:	f1b8 0203 	subs.w	r2, r8, #3
 801c71a:	bf48      	it	mi
 801c71c:	f108 0204 	addmi.w	r2, r8, #4
 801c720:	10d2      	asrs	r2, r2, #3
 801c722:	1c55      	adds	r5, r2, #1
 801c724:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 801c726:	ed9f 7ab1 	vldr	s14, [pc, #708]	@ 801c9ec <__kernel_rem_pio2f+0x2f8>
 801c72a:	00e8      	lsls	r0, r5, #3
 801c72c:	eba2 060b 	sub.w	r6, r2, fp
 801c730:	9002      	str	r0, [sp, #8]
 801c732:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 801c736:	eb0a 0c0b 	add.w	ip, sl, fp
 801c73a:	ac1c      	add	r4, sp, #112	@ 0x70
 801c73c:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 801c740:	2000      	movs	r0, #0
 801c742:	4560      	cmp	r0, ip
 801c744:	dd10      	ble.n	801c768 <__kernel_rem_pio2f+0x74>
 801c746:	a91c      	add	r1, sp, #112	@ 0x70
 801c748:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 801c74c:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 801c750:	2600      	movs	r6, #0
 801c752:	4556      	cmp	r6, sl
 801c754:	dc24      	bgt.n	801c7a0 <__kernel_rem_pio2f+0xac>
 801c756:	f8dd e004 	ldr.w	lr, [sp, #4]
 801c75a:	eddf 7aa4 	vldr	s15, [pc, #656]	@ 801c9ec <__kernel_rem_pio2f+0x2f8>
 801c75e:	4684      	mov	ip, r0
 801c760:	2400      	movs	r4, #0
 801c762:	e016      	b.n	801c792 <__kernel_rem_pio2f+0x9e>
 801c764:	2200      	movs	r2, #0
 801c766:	e7dc      	b.n	801c722 <__kernel_rem_pio2f+0x2e>
 801c768:	42c6      	cmn	r6, r0
 801c76a:	bf5d      	ittte	pl
 801c76c:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 801c770:	ee07 1a90 	vmovpl	s15, r1
 801c774:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 801c778:	eef0 7a47 	vmovmi.f32	s15, s14
 801c77c:	ece4 7a01 	vstmia	r4!, {s15}
 801c780:	3001      	adds	r0, #1
 801c782:	e7de      	b.n	801c742 <__kernel_rem_pio2f+0x4e>
 801c784:	ecfe 6a01 	vldmia	lr!, {s13}
 801c788:	ed3c 7a01 	vldmdb	ip!, {s14}
 801c78c:	eee6 7a87 	vfma.f32	s15, s13, s14
 801c790:	3401      	adds	r4, #1
 801c792:	455c      	cmp	r4, fp
 801c794:	ddf6      	ble.n	801c784 <__kernel_rem_pio2f+0x90>
 801c796:	ece9 7a01 	vstmia	r9!, {s15}
 801c79a:	3601      	adds	r6, #1
 801c79c:	3004      	adds	r0, #4
 801c79e:	e7d8      	b.n	801c752 <__kernel_rem_pio2f+0x5e>
 801c7a0:	a908      	add	r1, sp, #32
 801c7a2:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801c7a6:	9104      	str	r1, [sp, #16]
 801c7a8:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 801c7aa:	eddf 8a8f 	vldr	s17, [pc, #572]	@ 801c9e8 <__kernel_rem_pio2f+0x2f4>
 801c7ae:	ed9f 9a8d 	vldr	s18, [pc, #564]	@ 801c9e4 <__kernel_rem_pio2f+0x2f0>
 801c7b2:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 801c7b6:	9203      	str	r2, [sp, #12]
 801c7b8:	4654      	mov	r4, sl
 801c7ba:	00a2      	lsls	r2, r4, #2
 801c7bc:	9205      	str	r2, [sp, #20]
 801c7be:	aa58      	add	r2, sp, #352	@ 0x160
 801c7c0:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 801c7c4:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 801c7c8:	a944      	add	r1, sp, #272	@ 0x110
 801c7ca:	aa08      	add	r2, sp, #32
 801c7cc:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 801c7d0:	4694      	mov	ip, r2
 801c7d2:	4626      	mov	r6, r4
 801c7d4:	2e00      	cmp	r6, #0
 801c7d6:	dc4c      	bgt.n	801c872 <__kernel_rem_pio2f+0x17e>
 801c7d8:	4628      	mov	r0, r5
 801c7da:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801c7de:	f7ff ff23 	bl	801c628 <scalbnf>
 801c7e2:	eeb0 8a40 	vmov.f32	s16, s0
 801c7e6:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 801c7ea:	ee28 0a00 	vmul.f32	s0, s16, s0
 801c7ee:	f000 f9e9 	bl	801cbc4 <floorf>
 801c7f2:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 801c7f6:	eea0 8a67 	vfms.f32	s16, s0, s15
 801c7fa:	2d00      	cmp	r5, #0
 801c7fc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801c800:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 801c804:	ee17 9a90 	vmov	r9, s15
 801c808:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801c80c:	ee38 8a67 	vsub.f32	s16, s16, s15
 801c810:	dd41      	ble.n	801c896 <__kernel_rem_pio2f+0x1a2>
 801c812:	f104 3cff 	add.w	ip, r4, #4294967295	@ 0xffffffff
 801c816:	a908      	add	r1, sp, #32
 801c818:	f1c5 0e08 	rsb	lr, r5, #8
 801c81c:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 801c820:	fa46 f00e 	asr.w	r0, r6, lr
 801c824:	4481      	add	r9, r0
 801c826:	fa00 f00e 	lsl.w	r0, r0, lr
 801c82a:	1a36      	subs	r6, r6, r0
 801c82c:	f1c5 0007 	rsb	r0, r5, #7
 801c830:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 801c834:	4106      	asrs	r6, r0
 801c836:	2e00      	cmp	r6, #0
 801c838:	dd3c      	ble.n	801c8b4 <__kernel_rem_pio2f+0x1c0>
 801c83a:	f04f 0e00 	mov.w	lr, #0
 801c83e:	f109 0901 	add.w	r9, r9, #1
 801c842:	4670      	mov	r0, lr
 801c844:	4574      	cmp	r4, lr
 801c846:	dc68      	bgt.n	801c91a <__kernel_rem_pio2f+0x226>
 801c848:	2d00      	cmp	r5, #0
 801c84a:	dd03      	ble.n	801c854 <__kernel_rem_pio2f+0x160>
 801c84c:	2d01      	cmp	r5, #1
 801c84e:	d074      	beq.n	801c93a <__kernel_rem_pio2f+0x246>
 801c850:	2d02      	cmp	r5, #2
 801c852:	d07d      	beq.n	801c950 <__kernel_rem_pio2f+0x25c>
 801c854:	2e02      	cmp	r6, #2
 801c856:	d12d      	bne.n	801c8b4 <__kernel_rem_pio2f+0x1c0>
 801c858:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 801c85c:	ee30 8a48 	vsub.f32	s16, s0, s16
 801c860:	b340      	cbz	r0, 801c8b4 <__kernel_rem_pio2f+0x1c0>
 801c862:	4628      	mov	r0, r5
 801c864:	9306      	str	r3, [sp, #24]
 801c866:	f7ff fedf 	bl	801c628 <scalbnf>
 801c86a:	9b06      	ldr	r3, [sp, #24]
 801c86c:	ee38 8a40 	vsub.f32	s16, s16, s0
 801c870:	e020      	b.n	801c8b4 <__kernel_rem_pio2f+0x1c0>
 801c872:	ee60 7a28 	vmul.f32	s15, s0, s17
 801c876:	3e01      	subs	r6, #1
 801c878:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801c87c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801c880:	eea7 0ac9 	vfms.f32	s0, s15, s18
 801c884:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801c888:	ecac 0a01 	vstmia	ip!, {s0}
 801c88c:	ed30 0a01 	vldmdb	r0!, {s0}
 801c890:	ee37 0a80 	vadd.f32	s0, s15, s0
 801c894:	e79e      	b.n	801c7d4 <__kernel_rem_pio2f+0xe0>
 801c896:	d105      	bne.n	801c8a4 <__kernel_rem_pio2f+0x1b0>
 801c898:	1e60      	subs	r0, r4, #1
 801c89a:	a908      	add	r1, sp, #32
 801c89c:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 801c8a0:	11f6      	asrs	r6, r6, #7
 801c8a2:	e7c8      	b.n	801c836 <__kernel_rem_pio2f+0x142>
 801c8a4:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 801c8a8:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801c8ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c8b0:	da31      	bge.n	801c916 <__kernel_rem_pio2f+0x222>
 801c8b2:	2600      	movs	r6, #0
 801c8b4:	eeb5 8a40 	vcmp.f32	s16, #0.0
 801c8b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c8bc:	f040 8098 	bne.w	801c9f0 <__kernel_rem_pio2f+0x2fc>
 801c8c0:	1e60      	subs	r0, r4, #1
 801c8c2:	2200      	movs	r2, #0
 801c8c4:	4550      	cmp	r0, sl
 801c8c6:	da4b      	bge.n	801c960 <__kernel_rem_pio2f+0x26c>
 801c8c8:	2a00      	cmp	r2, #0
 801c8ca:	d065      	beq.n	801c998 <__kernel_rem_pio2f+0x2a4>
 801c8cc:	3c01      	subs	r4, #1
 801c8ce:	ab08      	add	r3, sp, #32
 801c8d0:	3d08      	subs	r5, #8
 801c8d2:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 801c8d6:	2b00      	cmp	r3, #0
 801c8d8:	d0f8      	beq.n	801c8cc <__kernel_rem_pio2f+0x1d8>
 801c8da:	4628      	mov	r0, r5
 801c8dc:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 801c8e0:	f7ff fea2 	bl	801c628 <scalbnf>
 801c8e4:	1c63      	adds	r3, r4, #1
 801c8e6:	aa44      	add	r2, sp, #272	@ 0x110
 801c8e8:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 801c9e8 <__kernel_rem_pio2f+0x2f4>
 801c8ec:	0099      	lsls	r1, r3, #2
 801c8ee:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801c8f2:	4623      	mov	r3, r4
 801c8f4:	2b00      	cmp	r3, #0
 801c8f6:	f280 80a9 	bge.w	801ca4c <__kernel_rem_pio2f+0x358>
 801c8fa:	4623      	mov	r3, r4
 801c8fc:	2b00      	cmp	r3, #0
 801c8fe:	f2c0 80c7 	blt.w	801ca90 <__kernel_rem_pio2f+0x39c>
 801c902:	aa44      	add	r2, sp, #272	@ 0x110
 801c904:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 801c908:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 801c9e0 <__kernel_rem_pio2f+0x2ec>
 801c90c:	eddf 7a37 	vldr	s15, [pc, #220]	@ 801c9ec <__kernel_rem_pio2f+0x2f8>
 801c910:	2000      	movs	r0, #0
 801c912:	1ae2      	subs	r2, r4, r3
 801c914:	e0b1      	b.n	801ca7a <__kernel_rem_pio2f+0x386>
 801c916:	2602      	movs	r6, #2
 801c918:	e78f      	b.n	801c83a <__kernel_rem_pio2f+0x146>
 801c91a:	f852 1b04 	ldr.w	r1, [r2], #4
 801c91e:	b948      	cbnz	r0, 801c934 <__kernel_rem_pio2f+0x240>
 801c920:	b121      	cbz	r1, 801c92c <__kernel_rem_pio2f+0x238>
 801c922:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 801c926:	f842 1c04 	str.w	r1, [r2, #-4]
 801c92a:	2101      	movs	r1, #1
 801c92c:	f10e 0e01 	add.w	lr, lr, #1
 801c930:	4608      	mov	r0, r1
 801c932:	e787      	b.n	801c844 <__kernel_rem_pio2f+0x150>
 801c934:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 801c938:	e7f5      	b.n	801c926 <__kernel_rem_pio2f+0x232>
 801c93a:	f104 3cff 	add.w	ip, r4, #4294967295	@ 0xffffffff
 801c93e:	aa08      	add	r2, sp, #32
 801c940:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 801c944:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 801c948:	a908      	add	r1, sp, #32
 801c94a:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 801c94e:	e781      	b.n	801c854 <__kernel_rem_pio2f+0x160>
 801c950:	f104 3cff 	add.w	ip, r4, #4294967295	@ 0xffffffff
 801c954:	aa08      	add	r2, sp, #32
 801c956:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 801c95a:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 801c95e:	e7f3      	b.n	801c948 <__kernel_rem_pio2f+0x254>
 801c960:	a908      	add	r1, sp, #32
 801c962:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 801c966:	3801      	subs	r0, #1
 801c968:	430a      	orrs	r2, r1
 801c96a:	e7ab      	b.n	801c8c4 <__kernel_rem_pio2f+0x1d0>
 801c96c:	3201      	adds	r2, #1
 801c96e:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 801c972:	2e00      	cmp	r6, #0
 801c974:	d0fa      	beq.n	801c96c <__kernel_rem_pio2f+0x278>
 801c976:	9905      	ldr	r1, [sp, #20]
 801c978:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 801c97c:	eb0d 0001 	add.w	r0, sp, r1
 801c980:	18e6      	adds	r6, r4, r3
 801c982:	a91c      	add	r1, sp, #112	@ 0x70
 801c984:	f104 0c01 	add.w	ip, r4, #1
 801c988:	384c      	subs	r0, #76	@ 0x4c
 801c98a:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 801c98e:	4422      	add	r2, r4
 801c990:	4562      	cmp	r2, ip
 801c992:	da04      	bge.n	801c99e <__kernel_rem_pio2f+0x2aa>
 801c994:	4614      	mov	r4, r2
 801c996:	e710      	b.n	801c7ba <__kernel_rem_pio2f+0xc6>
 801c998:	9804      	ldr	r0, [sp, #16]
 801c99a:	2201      	movs	r2, #1
 801c99c:	e7e7      	b.n	801c96e <__kernel_rem_pio2f+0x27a>
 801c99e:	9903      	ldr	r1, [sp, #12]
 801c9a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 801c9a4:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 801c9a8:	9105      	str	r1, [sp, #20]
 801c9aa:	ee07 1a90 	vmov	s15, r1
 801c9ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801c9b2:	2400      	movs	r4, #0
 801c9b4:	ece6 7a01 	vstmia	r6!, {s15}
 801c9b8:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 801c9ec <__kernel_rem_pio2f+0x2f8>
 801c9bc:	46b1      	mov	r9, r6
 801c9be:	455c      	cmp	r4, fp
 801c9c0:	dd04      	ble.n	801c9cc <__kernel_rem_pio2f+0x2d8>
 801c9c2:	ece0 7a01 	vstmia	r0!, {s15}
 801c9c6:	f10c 0c01 	add.w	ip, ip, #1
 801c9ca:	e7e1      	b.n	801c990 <__kernel_rem_pio2f+0x29c>
 801c9cc:	ecfe 6a01 	vldmia	lr!, {s13}
 801c9d0:	ed39 7a01 	vldmdb	r9!, {s14}
 801c9d4:	3401      	adds	r4, #1
 801c9d6:	eee6 7a87 	vfma.f32	s15, s13, s14
 801c9da:	e7f0      	b.n	801c9be <__kernel_rem_pio2f+0x2ca>
 801c9dc:	0801e8a8 	.word	0x0801e8a8
 801c9e0:	0801e87c 	.word	0x0801e87c
 801c9e4:	43800000 	.word	0x43800000
 801c9e8:	3b800000 	.word	0x3b800000
 801c9ec:	00000000 	.word	0x00000000
 801c9f0:	9b02      	ldr	r3, [sp, #8]
 801c9f2:	eeb0 0a48 	vmov.f32	s0, s16
 801c9f6:	eba3 0008 	sub.w	r0, r3, r8
 801c9fa:	f7ff fe15 	bl	801c628 <scalbnf>
 801c9fe:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 801c9e4 <__kernel_rem_pio2f+0x2f0>
 801ca02:	eeb4 0ac7 	vcmpe.f32	s0, s14
 801ca06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ca0a:	db19      	blt.n	801ca40 <__kernel_rem_pio2f+0x34c>
 801ca0c:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 801c9e8 <__kernel_rem_pio2f+0x2f4>
 801ca10:	ee60 7a27 	vmul.f32	s15, s0, s15
 801ca14:	aa08      	add	r2, sp, #32
 801ca16:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801ca1a:	3508      	adds	r5, #8
 801ca1c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801ca20:	eea7 0ac7 	vfms.f32	s0, s15, s14
 801ca24:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801ca28:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801ca2c:	ee10 3a10 	vmov	r3, s0
 801ca30:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 801ca34:	ee17 3a90 	vmov	r3, s15
 801ca38:	3401      	adds	r4, #1
 801ca3a:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 801ca3e:	e74c      	b.n	801c8da <__kernel_rem_pio2f+0x1e6>
 801ca40:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801ca44:	aa08      	add	r2, sp, #32
 801ca46:	ee10 3a10 	vmov	r3, s0
 801ca4a:	e7f6      	b.n	801ca3a <__kernel_rem_pio2f+0x346>
 801ca4c:	a808      	add	r0, sp, #32
 801ca4e:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 801ca52:	9001      	str	r0, [sp, #4]
 801ca54:	ee07 0a90 	vmov	s15, r0
 801ca58:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801ca5c:	3b01      	subs	r3, #1
 801ca5e:	ee67 7a80 	vmul.f32	s15, s15, s0
 801ca62:	ee20 0a07 	vmul.f32	s0, s0, s14
 801ca66:	ed62 7a01 	vstmdb	r2!, {s15}
 801ca6a:	e743      	b.n	801c8f4 <__kernel_rem_pio2f+0x200>
 801ca6c:	ecfc 6a01 	vldmia	ip!, {s13}
 801ca70:	ecb5 7a01 	vldmia	r5!, {s14}
 801ca74:	eee6 7a87 	vfma.f32	s15, s13, s14
 801ca78:	3001      	adds	r0, #1
 801ca7a:	4550      	cmp	r0, sl
 801ca7c:	dc01      	bgt.n	801ca82 <__kernel_rem_pio2f+0x38e>
 801ca7e:	4290      	cmp	r0, r2
 801ca80:	ddf4      	ble.n	801ca6c <__kernel_rem_pio2f+0x378>
 801ca82:	a858      	add	r0, sp, #352	@ 0x160
 801ca84:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 801ca88:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 801ca8c:	3b01      	subs	r3, #1
 801ca8e:	e735      	b.n	801c8fc <__kernel_rem_pio2f+0x208>
 801ca90:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 801ca92:	2b02      	cmp	r3, #2
 801ca94:	dc09      	bgt.n	801caaa <__kernel_rem_pio2f+0x3b6>
 801ca96:	2b00      	cmp	r3, #0
 801ca98:	dc27      	bgt.n	801caea <__kernel_rem_pio2f+0x3f6>
 801ca9a:	d040      	beq.n	801cb1e <__kernel_rem_pio2f+0x42a>
 801ca9c:	f009 0007 	and.w	r0, r9, #7
 801caa0:	b059      	add	sp, #356	@ 0x164
 801caa2:	ecbd 8b04 	vpop	{d8-d9}
 801caa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801caaa:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 801caac:	2b03      	cmp	r3, #3
 801caae:	d1f5      	bne.n	801ca9c <__kernel_rem_pio2f+0x3a8>
 801cab0:	aa30      	add	r2, sp, #192	@ 0xc0
 801cab2:	1f0b      	subs	r3, r1, #4
 801cab4:	4413      	add	r3, r2
 801cab6:	461a      	mov	r2, r3
 801cab8:	4620      	mov	r0, r4
 801caba:	2800      	cmp	r0, #0
 801cabc:	dc50      	bgt.n	801cb60 <__kernel_rem_pio2f+0x46c>
 801cabe:	4622      	mov	r2, r4
 801cac0:	2a01      	cmp	r2, #1
 801cac2:	dc5d      	bgt.n	801cb80 <__kernel_rem_pio2f+0x48c>
 801cac4:	ab30      	add	r3, sp, #192	@ 0xc0
 801cac6:	ed5f 7a37 	vldr	s15, [pc, #-220]	@ 801c9ec <__kernel_rem_pio2f+0x2f8>
 801caca:	440b      	add	r3, r1
 801cacc:	2c01      	cmp	r4, #1
 801cace:	dc67      	bgt.n	801cba0 <__kernel_rem_pio2f+0x4ac>
 801cad0:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 801cad4:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 801cad8:	2e00      	cmp	r6, #0
 801cada:	d167      	bne.n	801cbac <__kernel_rem_pio2f+0x4b8>
 801cadc:	edc7 6a00 	vstr	s13, [r7]
 801cae0:	ed87 7a01 	vstr	s14, [r7, #4]
 801cae4:	edc7 7a02 	vstr	s15, [r7, #8]
 801cae8:	e7d8      	b.n	801ca9c <__kernel_rem_pio2f+0x3a8>
 801caea:	ab30      	add	r3, sp, #192	@ 0xc0
 801caec:	ed1f 7a41 	vldr	s14, [pc, #-260]	@ 801c9ec <__kernel_rem_pio2f+0x2f8>
 801caf0:	440b      	add	r3, r1
 801caf2:	4622      	mov	r2, r4
 801caf4:	2a00      	cmp	r2, #0
 801caf6:	da24      	bge.n	801cb42 <__kernel_rem_pio2f+0x44e>
 801caf8:	b34e      	cbz	r6, 801cb4e <__kernel_rem_pio2f+0x45a>
 801cafa:	eef1 7a47 	vneg.f32	s15, s14
 801cafe:	edc7 7a00 	vstr	s15, [r7]
 801cb02:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 801cb06:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801cb0a:	aa31      	add	r2, sp, #196	@ 0xc4
 801cb0c:	2301      	movs	r3, #1
 801cb0e:	429c      	cmp	r4, r3
 801cb10:	da20      	bge.n	801cb54 <__kernel_rem_pio2f+0x460>
 801cb12:	b10e      	cbz	r6, 801cb18 <__kernel_rem_pio2f+0x424>
 801cb14:	eef1 7a67 	vneg.f32	s15, s15
 801cb18:	edc7 7a01 	vstr	s15, [r7, #4]
 801cb1c:	e7be      	b.n	801ca9c <__kernel_rem_pio2f+0x3a8>
 801cb1e:	ab30      	add	r3, sp, #192	@ 0xc0
 801cb20:	ed5f 7a4e 	vldr	s15, [pc, #-312]	@ 801c9ec <__kernel_rem_pio2f+0x2f8>
 801cb24:	440b      	add	r3, r1
 801cb26:	2c00      	cmp	r4, #0
 801cb28:	da05      	bge.n	801cb36 <__kernel_rem_pio2f+0x442>
 801cb2a:	b10e      	cbz	r6, 801cb30 <__kernel_rem_pio2f+0x43c>
 801cb2c:	eef1 7a67 	vneg.f32	s15, s15
 801cb30:	edc7 7a00 	vstr	s15, [r7]
 801cb34:	e7b2      	b.n	801ca9c <__kernel_rem_pio2f+0x3a8>
 801cb36:	ed33 7a01 	vldmdb	r3!, {s14}
 801cb3a:	3c01      	subs	r4, #1
 801cb3c:	ee77 7a87 	vadd.f32	s15, s15, s14
 801cb40:	e7f1      	b.n	801cb26 <__kernel_rem_pio2f+0x432>
 801cb42:	ed73 7a01 	vldmdb	r3!, {s15}
 801cb46:	3a01      	subs	r2, #1
 801cb48:	ee37 7a27 	vadd.f32	s14, s14, s15
 801cb4c:	e7d2      	b.n	801caf4 <__kernel_rem_pio2f+0x400>
 801cb4e:	eef0 7a47 	vmov.f32	s15, s14
 801cb52:	e7d4      	b.n	801cafe <__kernel_rem_pio2f+0x40a>
 801cb54:	ecb2 7a01 	vldmia	r2!, {s14}
 801cb58:	3301      	adds	r3, #1
 801cb5a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801cb5e:	e7d6      	b.n	801cb0e <__kernel_rem_pio2f+0x41a>
 801cb60:	ed72 7a01 	vldmdb	r2!, {s15}
 801cb64:	edd2 6a01 	vldr	s13, [r2, #4]
 801cb68:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801cb6c:	3801      	subs	r0, #1
 801cb6e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801cb72:	ed82 7a00 	vstr	s14, [r2]
 801cb76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801cb7a:	edc2 7a01 	vstr	s15, [r2, #4]
 801cb7e:	e79c      	b.n	801caba <__kernel_rem_pio2f+0x3c6>
 801cb80:	ed73 7a01 	vldmdb	r3!, {s15}
 801cb84:	edd3 6a01 	vldr	s13, [r3, #4]
 801cb88:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801cb8c:	3a01      	subs	r2, #1
 801cb8e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801cb92:	ed83 7a00 	vstr	s14, [r3]
 801cb96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801cb9a:	edc3 7a01 	vstr	s15, [r3, #4]
 801cb9e:	e78f      	b.n	801cac0 <__kernel_rem_pio2f+0x3cc>
 801cba0:	ed33 7a01 	vldmdb	r3!, {s14}
 801cba4:	3c01      	subs	r4, #1
 801cba6:	ee77 7a87 	vadd.f32	s15, s15, s14
 801cbaa:	e78f      	b.n	801cacc <__kernel_rem_pio2f+0x3d8>
 801cbac:	eef1 6a66 	vneg.f32	s13, s13
 801cbb0:	eeb1 7a47 	vneg.f32	s14, s14
 801cbb4:	edc7 6a00 	vstr	s13, [r7]
 801cbb8:	ed87 7a01 	vstr	s14, [r7, #4]
 801cbbc:	eef1 7a67 	vneg.f32	s15, s15
 801cbc0:	e790      	b.n	801cae4 <__kernel_rem_pio2f+0x3f0>
 801cbc2:	bf00      	nop

0801cbc4 <floorf>:
 801cbc4:	ee10 3a10 	vmov	r3, s0
 801cbc8:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801cbcc:	3a7f      	subs	r2, #127	@ 0x7f
 801cbce:	2a16      	cmp	r2, #22
 801cbd0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 801cbd4:	dc2b      	bgt.n	801cc2e <floorf+0x6a>
 801cbd6:	2a00      	cmp	r2, #0
 801cbd8:	da12      	bge.n	801cc00 <floorf+0x3c>
 801cbda:	eddf 7a19 	vldr	s15, [pc, #100]	@ 801cc40 <floorf+0x7c>
 801cbde:	ee30 0a27 	vadd.f32	s0, s0, s15
 801cbe2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801cbe6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cbea:	dd06      	ble.n	801cbfa <floorf+0x36>
 801cbec:	2b00      	cmp	r3, #0
 801cbee:	da24      	bge.n	801cc3a <floorf+0x76>
 801cbf0:	2900      	cmp	r1, #0
 801cbf2:	4b14      	ldr	r3, [pc, #80]	@ (801cc44 <floorf+0x80>)
 801cbf4:	bf08      	it	eq
 801cbf6:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 801cbfa:	ee00 3a10 	vmov	s0, r3
 801cbfe:	4770      	bx	lr
 801cc00:	4911      	ldr	r1, [pc, #68]	@ (801cc48 <floorf+0x84>)
 801cc02:	4111      	asrs	r1, r2
 801cc04:	420b      	tst	r3, r1
 801cc06:	d0fa      	beq.n	801cbfe <floorf+0x3a>
 801cc08:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 801cc40 <floorf+0x7c>
 801cc0c:	ee30 0a27 	vadd.f32	s0, s0, s15
 801cc10:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801cc14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cc18:	ddef      	ble.n	801cbfa <floorf+0x36>
 801cc1a:	2b00      	cmp	r3, #0
 801cc1c:	bfbe      	ittt	lt
 801cc1e:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 801cc22:	fa40 f202 	asrlt.w	r2, r0, r2
 801cc26:	189b      	addlt	r3, r3, r2
 801cc28:	ea23 0301 	bic.w	r3, r3, r1
 801cc2c:	e7e5      	b.n	801cbfa <floorf+0x36>
 801cc2e:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 801cc32:	d3e4      	bcc.n	801cbfe <floorf+0x3a>
 801cc34:	ee30 0a00 	vadd.f32	s0, s0, s0
 801cc38:	4770      	bx	lr
 801cc3a:	2300      	movs	r3, #0
 801cc3c:	e7dd      	b.n	801cbfa <floorf+0x36>
 801cc3e:	bf00      	nop
 801cc40:	7149f2ca 	.word	0x7149f2ca
 801cc44:	bf800000 	.word	0xbf800000
 801cc48:	007fffff 	.word	0x007fffff

0801cc4c <_init>:
 801cc4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cc4e:	bf00      	nop
 801cc50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801cc52:	bc08      	pop	{r3}
 801cc54:	469e      	mov	lr, r3
 801cc56:	4770      	bx	lr

0801cc58 <_fini>:
 801cc58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cc5a:	bf00      	nop
 801cc5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801cc5e:	bc08      	pop	{r3}
 801cc60:	469e      	mov	lr, r3
 801cc62:	4770      	bx	lr
