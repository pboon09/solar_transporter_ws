
transporter_controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006dac  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c04  08006f84  08006f84  00007f84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007b88  08007b88  0000905c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08007b88  08007b88  0000905c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08007b88  08007b88  0000905c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007b88  08007b88  00008b88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007b8c  08007b8c  00008b8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08007b90  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000063c  2000005c  08007bec  0000905c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000698  08007bec  00009698  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000905c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001361b  00000000  00000000  0000908c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002cf1  00000000  00000000  0001c6a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f10  00000000  00000000  0001f398  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b68  00000000  00000000  000202a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000281b2  00000000  00000000  00020e10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000138a8  00000000  00000000  00048fc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fa276  00000000  00000000  0005c86a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00156ae0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000044f4  00000000  00000000  00156b24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  0015b018  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000005c 	.word	0x2000005c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08006f6c 	.word	0x08006f6c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000060 	.word	0x20000060
 8000214:	08006f6c 	.word	0x08006f6c

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__aeabi_d2uiz>:
 80009b4:	004a      	lsls	r2, r1, #1
 80009b6:	d211      	bcs.n	80009dc <__aeabi_d2uiz+0x28>
 80009b8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80009bc:	d211      	bcs.n	80009e2 <__aeabi_d2uiz+0x2e>
 80009be:	d50d      	bpl.n	80009dc <__aeabi_d2uiz+0x28>
 80009c0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80009c4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009c8:	d40e      	bmi.n	80009e8 <__aeabi_d2uiz+0x34>
 80009ca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009ce:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80009d2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009d6:	fa23 f002 	lsr.w	r0, r3, r2
 80009da:	4770      	bx	lr
 80009dc:	f04f 0000 	mov.w	r0, #0
 80009e0:	4770      	bx	lr
 80009e2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009e6:	d102      	bne.n	80009ee <__aeabi_d2uiz+0x3a>
 80009e8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80009ec:	4770      	bx	lr
 80009ee:	f04f 0000 	mov.w	r0, #0
 80009f2:	4770      	bx	lr

080009f4 <__aeabi_d2f>:
 80009f4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009f8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80009fc:	bf24      	itt	cs
 80009fe:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a02:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a06:	d90d      	bls.n	8000a24 <__aeabi_d2f+0x30>
 8000a08:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a0c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a10:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a14:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a18:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a1c:	bf08      	it	eq
 8000a1e:	f020 0001 	biceq.w	r0, r0, #1
 8000a22:	4770      	bx	lr
 8000a24:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a28:	d121      	bne.n	8000a6e <__aeabi_d2f+0x7a>
 8000a2a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a2e:	bfbc      	itt	lt
 8000a30:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a34:	4770      	bxlt	lr
 8000a36:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a3a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a3e:	f1c2 0218 	rsb	r2, r2, #24
 8000a42:	f1c2 0c20 	rsb	ip, r2, #32
 8000a46:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a4a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a4e:	bf18      	it	ne
 8000a50:	f040 0001 	orrne.w	r0, r0, #1
 8000a54:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a58:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a5c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a60:	ea40 000c 	orr.w	r0, r0, ip
 8000a64:	fa23 f302 	lsr.w	r3, r3, r2
 8000a68:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a6c:	e7cc      	b.n	8000a08 <__aeabi_d2f+0x14>
 8000a6e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a72:	d107      	bne.n	8000a84 <__aeabi_d2f+0x90>
 8000a74:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a78:	bf1e      	ittt	ne
 8000a7a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000a7e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a82:	4770      	bxne	lr
 8000a84:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a88:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a8c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop

08000a94 <PWM_Satuation>:
 *  Created on: Apr 14, 2024
 *      Author: beamk
 */
#include "Controller.h"

int32_t PWM_Satuation(float _u, int32_t _upper_limit, int32_t _lower_limit) {
 8000a94:	b480      	push	{r7}
 8000a96:	b085      	sub	sp, #20
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	ed87 0a03 	vstr	s0, [r7, #12]
 8000a9e:	60b8      	str	r0, [r7, #8]
 8000aa0:	6079      	str	r1, [r7, #4]
  if (_u > _upper_limit) return _upper_limit;
 8000aa2:	68bb      	ldr	r3, [r7, #8]
 8000aa4:	ee07 3a90 	vmov	s15, r3
 8000aa8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000aac:	ed97 7a03 	vldr	s14, [r7, #12]
 8000ab0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000ab4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ab8:	dd01      	ble.n	8000abe <PWM_Satuation+0x2a>
 8000aba:	68bb      	ldr	r3, [r7, #8]
 8000abc:	e013      	b.n	8000ae6 <PWM_Satuation+0x52>
  else if (_u < _lower_limit) return _lower_limit;
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	ee07 3a90 	vmov	s15, r3
 8000ac4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ac8:	ed97 7a03 	vldr	s14, [r7, #12]
 8000acc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000ad0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ad4:	d501      	bpl.n	8000ada <PWM_Satuation+0x46>
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	e005      	b.n	8000ae6 <PWM_Satuation+0x52>
  return (int32_t)_u;
 8000ada:	edd7 7a03 	vldr	s15, [r7, #12]
 8000ade:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000ae2:	ee17 3a90 	vmov	r3, s15
}
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	3714      	adds	r7, #20
 8000aea:	46bd      	mov	sp, r7
 8000aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af0:	4770      	bx	lr

08000af2 <PID_CONTROLLER_Init>:

void PID_CONTROLLER_Init(PID_CONTROLLER *controller, float _Kp, float _Ki, float _Kd, float _u_max) {
 8000af2:	b480      	push	{r7}
 8000af4:	b087      	sub	sp, #28
 8000af6:	af00      	add	r7, sp, #0
 8000af8:	6178      	str	r0, [r7, #20]
 8000afa:	ed87 0a04 	vstr	s0, [r7, #16]
 8000afe:	edc7 0a03 	vstr	s1, [r7, #12]
 8000b02:	ed87 1a02 	vstr	s2, [r7, #8]
 8000b06:	edc7 1a01 	vstr	s3, [r7, #4]
  controller->Kp = _Kp;
 8000b0a:	697b      	ldr	r3, [r7, #20]
 8000b0c:	693a      	ldr	r2, [r7, #16]
 8000b0e:	601a      	str	r2, [r3, #0]
  controller->Ki = _Ki;
 8000b10:	697b      	ldr	r3, [r7, #20]
 8000b12:	68fa      	ldr	r2, [r7, #12]
 8000b14:	605a      	str	r2, [r3, #4]
  controller->Kd = _Kd;
 8000b16:	697b      	ldr	r3, [r7, #20]
 8000b18:	68ba      	ldr	r2, [r7, #8]
 8000b1a:	609a      	str	r2, [r3, #8]
  controller->u_max = _u_max;
 8000b1c:	697b      	ldr	r3, [r7, #20]
 8000b1e:	687a      	ldr	r2, [r7, #4]
 8000b20:	60da      	str	r2, [r3, #12]
  controller->ek_1 = 0;
 8000b22:	697b      	ldr	r3, [r7, #20]
 8000b24:	f04f 0200 	mov.w	r2, #0
 8000b28:	611a      	str	r2, [r3, #16]
  controller->ek_2 = 0;
 8000b2a:	697b      	ldr	r3, [r7, #20]
 8000b2c:	f04f 0200 	mov.w	r2, #0
 8000b30:	615a      	str	r2, [r3, #20]
  controller->u = 0;
 8000b32:	697b      	ldr	r3, [r7, #20]
 8000b34:	f04f 0200 	mov.w	r2, #0
 8000b38:	619a      	str	r2, [r3, #24]

}
 8000b3a:	bf00      	nop
 8000b3c:	371c      	adds	r7, #28
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr

08000b46 <PID_CONTROLLER_Compute>:

float PID_CONTROLLER_Compute(PID_CONTROLLER *controller, float ek) {
 8000b46:	b480      	push	{r7}
 8000b48:	b083      	sub	sp, #12
 8000b4a:	af00      	add	r7, sp, #0
 8000b4c:	6078      	str	r0, [r7, #4]
 8000b4e:	ed87 0a00 	vstr	s0, [r7]
    if (!((controller->u >= controller->u_max && ek > 0) || (controller->u <= -controller->u_max && ek < 0))) {
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	ed93 7a06 	vldr	s14, [r3, #24]
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	edd3 7a03 	vldr	s15, [r3, #12]
 8000b5e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000b62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b66:	bfac      	ite	ge
 8000b68:	2301      	movge	r3, #1
 8000b6a:	2300      	movlt	r3, #0
 8000b6c:	b2db      	uxtb	r3, r3
 8000b6e:	f083 0301 	eor.w	r3, r3, #1
 8000b72:	b2db      	uxtb	r3, r3
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d10e      	bne.n	8000b96 <PID_CONTROLLER_Compute+0x50>
 8000b78:	edd7 7a00 	vldr	s15, [r7]
 8000b7c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000b80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b84:	bfcc      	ite	gt
 8000b86:	2301      	movgt	r3, #1
 8000b88:	2300      	movle	r3, #0
 8000b8a:	b2db      	uxtb	r3, r3
 8000b8c:	f083 0301 	eor.w	r3, r3, #1
 8000b90:	b2db      	uxtb	r3, r3
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d057      	beq.n	8000c46 <PID_CONTROLLER_Compute+0x100>
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	ed93 7a06 	vldr	s14, [r3, #24]
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	edd3 7a03 	vldr	s15, [r3, #12]
 8000ba2:	eef1 7a67 	vneg.f32	s15, s15
 8000ba6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000baa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000bae:	bf94      	ite	ls
 8000bb0:	2301      	movls	r3, #1
 8000bb2:	2300      	movhi	r3, #0
 8000bb4:	b2db      	uxtb	r3, r3
 8000bb6:	f083 0301 	eor.w	r3, r3, #1
 8000bba:	b2db      	uxtb	r3, r3
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d10e      	bne.n	8000bde <PID_CONTROLLER_Compute+0x98>
 8000bc0:	edd7 7a00 	vldr	s15, [r7]
 8000bc4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000bc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000bcc:	bf4c      	ite	mi
 8000bce:	2301      	movmi	r3, #1
 8000bd0:	2300      	movpl	r3, #0
 8000bd2:	b2db      	uxtb	r3, r3
 8000bd4:	f083 0301 	eor.w	r3, r3, #1
 8000bd8:	b2db      	uxtb	r3, r3
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d033      	beq.n	8000c46 <PID_CONTROLLER_Compute+0x100>
        controller->u += ((controller->Kp + controller->Ki + controller->Kd) * ek)
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	ed93 7a06 	vldr	s14, [r3, #24]
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	edd3 6a00 	vldr	s13, [r3]
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	edd3 7a01 	vldr	s15, [r3, #4]
 8000bf0:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	edd3 7a02 	vldr	s15, [r3, #8]
 8000bfa:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8000bfe:	edd7 7a00 	vldr	s15, [r7]
 8000c02:	ee66 6aa7 	vmul.f32	s13, s13, s15
                         - ((controller->Kp + (2 * controller->Kd)) * controller->ek_1)
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	ed93 6a00 	vldr	s12, [r3]
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	edd3 7a02 	vldr	s15, [r3, #8]
 8000c12:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000c16:	ee36 6a27 	vadd.f32	s12, s12, s15
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	edd3 7a04 	vldr	s15, [r3, #16]
 8000c20:	ee66 7a27 	vmul.f32	s15, s12, s15
 8000c24:	ee76 6ae7 	vsub.f32	s13, s13, s15
                         + (controller->Kd * controller->ek_2);
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	ed93 6a02 	vldr	s12, [r3, #8]
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	edd3 7a05 	vldr	s15, [r3, #20]
 8000c34:	ee66 7a27 	vmul.f32	s15, s12, s15
 8000c38:	ee76 7aa7 	vadd.f32	s15, s13, s15
        controller->u += ((controller->Kp + controller->Ki + controller->Kd) * ek)
 8000c3c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	edc3 7a06 	vstr	s15, [r3, #24]
    }
    controller->ek_2 = controller->ek_1;
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	691a      	ldr	r2, [r3, #16]
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	615a      	str	r2, [r3, #20]
    controller->ek_1 = ek;
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	683a      	ldr	r2, [r7, #0]
 8000c52:	611a      	str	r2, [r3, #16]
    return controller->u;
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	699b      	ldr	r3, [r3, #24]
 8000c58:	ee07 3a90 	vmov	s15, r3
}
 8000c5c:	eeb0 0a67 	vmov.f32	s0, s15
 8000c60:	370c      	adds	r7, #12
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr

08000c6a <MDXX_GPIO_init>:
	PWM_init(&(mdxx->pwm), htimp, timp_chx);
	mdxx->mode = 0;
}

void MDXX_GPIO_init(MDXX *mdxx, TIM_HandleTypeDef *htimp, uint16_t timp_chx,
		GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 8000c6a:	b580      	push	{r7, lr}
 8000c6c:	b084      	sub	sp, #16
 8000c6e:	af00      	add	r7, sp, #0
 8000c70:	60f8      	str	r0, [r7, #12]
 8000c72:	60b9      	str	r1, [r7, #8]
 8000c74:	603b      	str	r3, [r7, #0]
 8000c76:	4613      	mov	r3, r2
 8000c78:	80fb      	strh	r3, [r7, #6]
	mdxx->htimp = htimp;
 8000c7a:	68fb      	ldr	r3, [r7, #12]
 8000c7c:	68ba      	ldr	r2, [r7, #8]
 8000c7e:	609a      	str	r2, [r3, #8]
	mdxx->timp_chx = timp_chx;
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	88fa      	ldrh	r2, [r7, #6]
 8000c84:	819a      	strh	r2, [r3, #12]
	PWM_init(&(mdxx->pwm), htimp, timp_chx);
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	3328      	adds	r3, #40	@ 0x28
 8000c8a:	88fa      	ldrh	r2, [r7, #6]
 8000c8c:	68b9      	ldr	r1, [r7, #8]
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f000 fa64 	bl	800115c <PWM_init>
	mdxx->GPIOx = GPIOx;
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	683a      	ldr	r2, [r7, #0]
 8000c98:	645a      	str	r2, [r3, #68]	@ 0x44
	mdxx->GPIO_Pin = GPIO_Pin;
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	8b3a      	ldrh	r2, [r7, #24]
 8000c9e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
	mdxx->mode = 1;
 8000ca2:	68fb      	ldr	r3, [r7, #12]
 8000ca4:	2201      	movs	r2, #1
 8000ca6:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
}
 8000caa:	bf00      	nop
 8000cac:	3710      	adds	r7, #16
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
	...

08000cb4 <MDXX_set_range>:
			mdxx->cmd = fabs(duty);
		}
	}
}

void MDXX_set_range(MDXX *mdxx, float freq, float duty) {
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b084      	sub	sp, #16
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	60f8      	str	r0, [r7, #12]
 8000cbc:	ed87 0a02 	vstr	s0, [r7, #8]
 8000cc0:	edc7 0a01 	vstr	s1, [r7, #4]
	if (mdxx->mode == 0) {
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d15f      	bne.n	8000d8e <MDXX_set_range+0xda>
		if (duty == 0) {
 8000cce:	edd7 7a01 	vldr	s15, [r7, #4]
 8000cd2:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000cd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cda:	d115      	bne.n	8000d08 <MDXX_set_range+0x54>
			PWM_write_range(&(mdxx->dir), freq, 0);
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	3310      	adds	r3, #16
 8000ce0:	eddf 0a5f 	vldr	s1, [pc, #380]	@ 8000e60 <MDXX_set_range+0x1ac>
 8000ce4:	ed97 0a02 	vldr	s0, [r7, #8]
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f000 fa59 	bl	80011a0 <PWM_write_range>
			PWM_write_range(&(mdxx->pwm), freq, 0);
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	3328      	adds	r3, #40	@ 0x28
 8000cf2:	eddf 0a5b 	vldr	s1, [pc, #364]	@ 8000e60 <MDXX_set_range+0x1ac>
 8000cf6:	ed97 0a02 	vldr	s0, [r7, #8]
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f000 fa50 	bl	80011a0 <PWM_write_range>
			mdxx->cmd = 0;
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	2200      	movs	r2, #0
 8000d04:	641a      	str	r2, [r3, #64]	@ 0x40
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 1);
			PWM_write_range(&(mdxx->pwm), freq, fabs(duty));
			mdxx->cmd = fabs(duty);
		}
	}
}
 8000d06:	e0a6      	b.n	8000e56 <MDXX_set_range+0x1a2>
		} else if (duty > 0) {
 8000d08:	edd7 7a01 	vldr	s15, [r7, #4]
 8000d0c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000d10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d14:	dd1a      	ble.n	8000d4c <MDXX_set_range+0x98>
			PWM_write_range(&(mdxx->dir), freq, 0);
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	3310      	adds	r3, #16
 8000d1a:	eddf 0a51 	vldr	s1, [pc, #324]	@ 8000e60 <MDXX_set_range+0x1ac>
 8000d1e:	ed97 0a02 	vldr	s0, [r7, #8]
 8000d22:	4618      	mov	r0, r3
 8000d24:	f000 fa3c 	bl	80011a0 <PWM_write_range>
			PWM_write_range(&(mdxx->pwm), freq, duty);
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	3328      	adds	r3, #40	@ 0x28
 8000d2c:	edd7 0a01 	vldr	s1, [r7, #4]
 8000d30:	ed97 0a02 	vldr	s0, [r7, #8]
 8000d34:	4618      	mov	r0, r3
 8000d36:	f000 fa33 	bl	80011a0 <PWM_write_range>
			mdxx->cmd = duty;
 8000d3a:	edd7 7a01 	vldr	s15, [r7, #4]
 8000d3e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000d42:	ee17 2a90 	vmov	r2, s15
 8000d46:	68fb      	ldr	r3, [r7, #12]
 8000d48:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8000d4a:	e084      	b.n	8000e56 <MDXX_set_range+0x1a2>
			PWM_write_range(&(mdxx->dir), freq, 100);
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	3310      	adds	r3, #16
 8000d50:	eddf 0a44 	vldr	s1, [pc, #272]	@ 8000e64 <MDXX_set_range+0x1b0>
 8000d54:	ed97 0a02 	vldr	s0, [r7, #8]
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f000 fa21 	bl	80011a0 <PWM_write_range>
			PWM_write_range(&(mdxx->pwm), freq, fabs(duty));
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	3328      	adds	r3, #40	@ 0x28
 8000d62:	edd7 7a01 	vldr	s15, [r7, #4]
 8000d66:	eef0 7ae7 	vabs.f32	s15, s15
 8000d6a:	eef0 0a67 	vmov.f32	s1, s15
 8000d6e:	ed97 0a02 	vldr	s0, [r7, #8]
 8000d72:	4618      	mov	r0, r3
 8000d74:	f000 fa14 	bl	80011a0 <PWM_write_range>
			mdxx->cmd = fabs(duty);
 8000d78:	edd7 7a01 	vldr	s15, [r7, #4]
 8000d7c:	eef0 7ae7 	vabs.f32	s15, s15
 8000d80:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000d84:	ee17 2a90 	vmov	r2, s15
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8000d8c:	e063      	b.n	8000e56 <MDXX_set_range+0x1a2>
	} else if (mdxx->mode == 1) {
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 8000d94:	2b01      	cmp	r3, #1
 8000d96:	d15e      	bne.n	8000e56 <MDXX_set_range+0x1a2>
		if (duty == 0) {
 8000d98:	edd7 7a01 	vldr	s15, [r7, #4]
 8000d9c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000da0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000da4:	d115      	bne.n	8000dd2 <MDXX_set_range+0x11e>
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 0);
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8000db0:	2200      	movs	r2, #0
 8000db2:	4619      	mov	r1, r3
 8000db4:	f002 fa78 	bl	80032a8 <HAL_GPIO_WritePin>
			PWM_write_range(&(mdxx->pwm), freq, 0);
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	3328      	adds	r3, #40	@ 0x28
 8000dbc:	eddf 0a28 	vldr	s1, [pc, #160]	@ 8000e60 <MDXX_set_range+0x1ac>
 8000dc0:	ed97 0a02 	vldr	s0, [r7, #8]
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f000 f9eb 	bl	80011a0 <PWM_write_range>
			mdxx->cmd = 0;
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	2200      	movs	r2, #0
 8000dce:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8000dd0:	e041      	b.n	8000e56 <MDXX_set_range+0x1a2>
		} else if (duty > 0) {
 8000dd2:	edd7 7a01 	vldr	s15, [r7, #4]
 8000dd6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000dda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000dde:	dd1a      	ble.n	8000e16 <MDXX_set_range+0x162>
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 0);
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8000dea:	2200      	movs	r2, #0
 8000dec:	4619      	mov	r1, r3
 8000dee:	f002 fa5b 	bl	80032a8 <HAL_GPIO_WritePin>
			PWM_write_range(&(mdxx->pwm), freq, duty);
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	3328      	adds	r3, #40	@ 0x28
 8000df6:	edd7 0a01 	vldr	s1, [r7, #4]
 8000dfa:	ed97 0a02 	vldr	s0, [r7, #8]
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f000 f9ce 	bl	80011a0 <PWM_write_range>
			mdxx->cmd = duty;
 8000e04:	edd7 7a01 	vldr	s15, [r7, #4]
 8000e08:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000e0c:	ee17 2a90 	vmov	r2, s15
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8000e14:	e01f      	b.n	8000e56 <MDXX_set_range+0x1a2>
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 1);
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8000e20:	2201      	movs	r2, #1
 8000e22:	4619      	mov	r1, r3
 8000e24:	f002 fa40 	bl	80032a8 <HAL_GPIO_WritePin>
			PWM_write_range(&(mdxx->pwm), freq, fabs(duty));
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	3328      	adds	r3, #40	@ 0x28
 8000e2c:	edd7 7a01 	vldr	s15, [r7, #4]
 8000e30:	eef0 7ae7 	vabs.f32	s15, s15
 8000e34:	eef0 0a67 	vmov.f32	s1, s15
 8000e38:	ed97 0a02 	vldr	s0, [r7, #8]
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f000 f9af 	bl	80011a0 <PWM_write_range>
			mdxx->cmd = fabs(duty);
 8000e42:	edd7 7a01 	vldr	s15, [r7, #4]
 8000e46:	eef0 7ae7 	vabs.f32	s15, s15
 8000e4a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000e4e:	ee17 2a90 	vmov	r2, s15
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8000e56:	bf00      	nop
 8000e58:	3710      	adds	r7, #16
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	00000000 	.word	0x00000000
 8000e64:	42c80000 	.word	0x42c80000

08000e68 <FIR_init>:
 *      Author: transporter
 */
#include "FIR.h"
#include "arm_math.h"

void FIR_init(FIR *fir, uint16_t numTaps, float cutoffFreq, float samplingFreq) {
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	ed2d 8b02 	vpush	{d8}
 8000e6e:	b08a      	sub	sp, #40	@ 0x28
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	60f8      	str	r0, [r7, #12]
 8000e74:	460b      	mov	r3, r1
 8000e76:	ed87 0a01 	vstr	s0, [r7, #4]
 8000e7a:	edc7 0a00 	vstr	s1, [r7]
 8000e7e:	817b      	strh	r3, [r7, #10]
    // Make sure numTaps is odd
    if (numTaps % 2 == 0) {
 8000e80:	897b      	ldrh	r3, [r7, #10]
 8000e82:	f003 0301 	and.w	r3, r3, #1
 8000e86:	b29b      	uxth	r3, r3
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d102      	bne.n	8000e92 <FIR_init+0x2a>
        numTaps += 1;
 8000e8c:	897b      	ldrh	r3, [r7, #10]
 8000e8e:	3301      	adds	r3, #1
 8000e90:	817b      	strh	r3, [r7, #10]
    }

    fir->numTaps = numTaps;
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	897a      	ldrh	r2, [r7, #10]
 8000e96:	811a      	strh	r2, [r3, #8]
    fir->bufferIndex = 0;
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	815a      	strh	r2, [r3, #10]

    // Allocate memory for coefficients and buffer
    fir->coeffs = (float*)malloc(numTaps * sizeof(float));
 8000e9e:	897b      	ldrh	r3, [r7, #10]
 8000ea0:	009b      	lsls	r3, r3, #2
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f004 fdf8 	bl	8005a98 <malloc>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	461a      	mov	r2, r3
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	601a      	str	r2, [r3, #0]
    fir->buffer = (float*)malloc(numTaps * sizeof(float));
 8000eb0:	897b      	ldrh	r3, [r7, #10]
 8000eb2:	009b      	lsls	r3, r3, #2
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f004 fdef 	bl	8005a98 <malloc>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	461a      	mov	r2, r3
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	605a      	str	r2, [r3, #4]

    if (fir->coeffs != NULL && fir->buffer != NULL) {
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	f000 80e0 	beq.w	800108c <FIR_init+0x224>
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	f000 80db 	beq.w	800108c <FIR_init+0x224>
        // Clear buffer
        for (uint16_t i = 0; i < numTaps; i++) {
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8000eda:	e00a      	b.n	8000ef2 <FIR_init+0x8a>
            fir->buffer[i] = 0.0f;
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	685a      	ldr	r2, [r3, #4]
 8000ee0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000ee2:	009b      	lsls	r3, r3, #2
 8000ee4:	4413      	add	r3, r2
 8000ee6:	f04f 0200 	mov.w	r2, #0
 8000eea:	601a      	str	r2, [r3, #0]
        for (uint16_t i = 0; i < numTaps; i++) {
 8000eec:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000eee:	3301      	adds	r3, #1
 8000ef0:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8000ef2:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8000ef4:	897b      	ldrh	r3, [r7, #10]
 8000ef6:	429a      	cmp	r2, r3
 8000ef8:	d3f0      	bcc.n	8000edc <FIR_init+0x74>
        }

        // Calculate normalized cutoff frequency (0 to 0.5)
        float omega = cutoffFreq / samplingFreq;
 8000efa:	edd7 6a01 	vldr	s13, [r7, #4]
 8000efe:	ed97 7a00 	vldr	s14, [r7]
 8000f02:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f06:	edc7 7a06 	vstr	s15, [r7, #24]

        // Calculate filter coefficients (low-pass)
        int16_t half_taps = numTaps / 2;
 8000f0a:	897b      	ldrh	r3, [r7, #10]
 8000f0c:	085b      	lsrs	r3, r3, #1
 8000f0e:	b29b      	uxth	r3, r3
 8000f10:	82fb      	strh	r3, [r7, #22]
        for (int16_t i = 0; i < numTaps; i++) {
 8000f12:	2300      	movs	r3, #0
 8000f14:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8000f16:	e077      	b.n	8001008 <FIR_init+0x1a0>
            if (i == half_taps) {
 8000f18:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 8000f1c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000f20:	429a      	cmp	r2, r3
 8000f22:	d10c      	bne.n	8000f3e <FIR_init+0xd6>
                // Center tap
                fir->coeffs[i] = 2.0f * omega;
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	681a      	ldr	r2, [r3, #0]
 8000f28:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8000f2c:	009b      	lsls	r3, r3, #2
 8000f2e:	4413      	add	r3, r2
 8000f30:	edd7 7a06 	vldr	s15, [r7, #24]
 8000f34:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000f38:	edc3 7a00 	vstr	s15, [r3]
 8000f3c:	e02c      	b.n	8000f98 <FIR_init+0x130>
            } else {
                // Side taps
                int16_t n = i - half_taps;
 8000f3e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8000f40:	8afb      	ldrh	r3, [r7, #22]
 8000f42:	1ad3      	subs	r3, r2, r3
 8000f44:	b29b      	uxth	r3, r3
 8000f46:	82bb      	strh	r3, [r7, #20]
                fir->coeffs[i] = sinf(2.0f * PI * omega * n) / (PI * n);
 8000f48:	edd7 7a06 	vldr	s15, [r7, #24]
 8000f4c:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 8001098 <FIR_init+0x230>
 8000f50:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000f54:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000f58:	ee07 3a90 	vmov	s15, r3
 8000f5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f60:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f64:	eeb0 0a67 	vmov.f32	s0, s15
 8000f68:	f004 ff4c 	bl	8005e04 <sinf>
 8000f6c:	eef0 6a40 	vmov.f32	s13, s0
 8000f70:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000f74:	ee07 3a90 	vmov	s15, r3
 8000f78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f7c:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 800109c <FIR_init+0x234>
 8000f80:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	681a      	ldr	r2, [r3, #0]
 8000f88:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8000f8c:	009b      	lsls	r3, r3, #2
 8000f8e:	4413      	add	r3, r2
 8000f90:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f94:	edc3 7a00 	vstr	s15, [r3]
            }

            // Apply Hamming window
            fir->coeffs[i] *= (0.54f - 0.46f * cosf(2.0f * PI * i / (numTaps - 1)));
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	681a      	ldr	r2, [r3, #0]
 8000f9c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8000fa0:	009b      	lsls	r3, r3, #2
 8000fa2:	4413      	add	r3, r2
 8000fa4:	ed93 8a00 	vldr	s16, [r3]
 8000fa8:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8000fac:	ee07 3a90 	vmov	s15, r3
 8000fb0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fb4:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8001098 <FIR_init+0x230>
 8000fb8:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000fbc:	897b      	ldrh	r3, [r7, #10]
 8000fbe:	3b01      	subs	r3, #1
 8000fc0:	ee07 3a90 	vmov	s15, r3
 8000fc4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fc8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8000fcc:	eeb0 0a66 	vmov.f32	s0, s13
 8000fd0:	f004 fed4 	bl	8005d7c <cosf>
 8000fd4:	eef0 7a40 	vmov.f32	s15, s0
 8000fd8:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 80010a0 <FIR_init+0x238>
 8000fdc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fe0:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 80010a4 <FIR_init+0x23c>
 8000fe4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	681a      	ldr	r2, [r3, #0]
 8000fec:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8000ff0:	009b      	lsls	r3, r3, #2
 8000ff2:	4413      	add	r3, r2
 8000ff4:	ee68 7a27 	vmul.f32	s15, s16, s15
 8000ff8:	edc3 7a00 	vstr	s15, [r3]
        for (int16_t i = 0; i < numTaps; i++) {
 8000ffc:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001000:	b29b      	uxth	r3, r3
 8001002:	3301      	adds	r3, #1
 8001004:	b29b      	uxth	r3, r3
 8001006:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8001008:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 800100c:	897b      	ldrh	r3, [r7, #10]
 800100e:	429a      	cmp	r2, r3
 8001010:	db82      	blt.n	8000f18 <FIR_init+0xb0>
        }

        // Normalize gain
        float sum = 0.0f;
 8001012:	f04f 0300 	mov.w	r3, #0
 8001016:	623b      	str	r3, [r7, #32]
        for (uint16_t i = 0; i < numTaps; i++) {
 8001018:	2300      	movs	r3, #0
 800101a:	83fb      	strh	r3, [r7, #30]
 800101c:	e00f      	b.n	800103e <FIR_init+0x1d6>
            sum += fir->coeffs[i];
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	681a      	ldr	r2, [r3, #0]
 8001022:	8bfb      	ldrh	r3, [r7, #30]
 8001024:	009b      	lsls	r3, r3, #2
 8001026:	4413      	add	r3, r2
 8001028:	edd3 7a00 	vldr	s15, [r3]
 800102c:	ed97 7a08 	vldr	s14, [r7, #32]
 8001030:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001034:	edc7 7a08 	vstr	s15, [r7, #32]
        for (uint16_t i = 0; i < numTaps; i++) {
 8001038:	8bfb      	ldrh	r3, [r7, #30]
 800103a:	3301      	adds	r3, #1
 800103c:	83fb      	strh	r3, [r7, #30]
 800103e:	8bfa      	ldrh	r2, [r7, #30]
 8001040:	897b      	ldrh	r3, [r7, #10]
 8001042:	429a      	cmp	r2, r3
 8001044:	d3eb      	bcc.n	800101e <FIR_init+0x1b6>
        }

        if (sum != 0.0f) {
 8001046:	edd7 7a08 	vldr	s15, [r7, #32]
 800104a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800104e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001052:	d01b      	beq.n	800108c <FIR_init+0x224>
            for (uint16_t i = 0; i < numTaps; i++) {
 8001054:	2300      	movs	r3, #0
 8001056:	83bb      	strh	r3, [r7, #28]
 8001058:	e014      	b.n	8001084 <FIR_init+0x21c>
                fir->coeffs[i] /= sum;
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	681a      	ldr	r2, [r3, #0]
 800105e:	8bbb      	ldrh	r3, [r7, #28]
 8001060:	009b      	lsls	r3, r3, #2
 8001062:	4413      	add	r3, r2
 8001064:	edd3 6a00 	vldr	s13, [r3]
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	681a      	ldr	r2, [r3, #0]
 800106c:	8bbb      	ldrh	r3, [r7, #28]
 800106e:	009b      	lsls	r3, r3, #2
 8001070:	4413      	add	r3, r2
 8001072:	ed97 7a08 	vldr	s14, [r7, #32]
 8001076:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800107a:	edc3 7a00 	vstr	s15, [r3]
            for (uint16_t i = 0; i < numTaps; i++) {
 800107e:	8bbb      	ldrh	r3, [r7, #28]
 8001080:	3301      	adds	r3, #1
 8001082:	83bb      	strh	r3, [r7, #28]
 8001084:	8bba      	ldrh	r2, [r7, #28]
 8001086:	897b      	ldrh	r3, [r7, #10]
 8001088:	429a      	cmp	r2, r3
 800108a:	d3e6      	bcc.n	800105a <FIR_init+0x1f2>
            }
        }
    }
}
 800108c:	bf00      	nop
 800108e:	3728      	adds	r7, #40	@ 0x28
 8001090:	46bd      	mov	sp, r7
 8001092:	ecbd 8b02 	vpop	{d8}
 8001096:	bd80      	pop	{r7, pc}
 8001098:	40c90fdb 	.word	0x40c90fdb
 800109c:	40490fdb 	.word	0x40490fdb
 80010a0:	3eeb851f 	.word	0x3eeb851f
 80010a4:	3f0a3d71 	.word	0x3f0a3d71

080010a8 <FIR_process>:

float FIR_process(FIR *fir, float input) {
 80010a8:	b480      	push	{r7}
 80010aa:	b085      	sub	sp, #20
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
 80010b0:	ed87 0a00 	vstr	s0, [r7]
    // Update circular buffer with new input
    fir->buffer[fir->bufferIndex] = input;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	685a      	ldr	r2, [r3, #4]
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	895b      	ldrh	r3, [r3, #10]
 80010bc:	009b      	lsls	r3, r3, #2
 80010be:	4413      	add	r3, r2
 80010c0:	683a      	ldr	r2, [r7, #0]
 80010c2:	601a      	str	r2, [r3, #0]

    // Compute output (convolution)
    float output = 0.0f;
 80010c4:	f04f 0300 	mov.w	r3, #0
 80010c8:	60fb      	str	r3, [r7, #12]
    uint16_t index = fir->bufferIndex;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	895b      	ldrh	r3, [r3, #10]
 80010ce:	817b      	strh	r3, [r7, #10]

    for (uint16_t i = 0; i < fir->numTaps; i++) {
 80010d0:	2300      	movs	r3, #0
 80010d2:	813b      	strh	r3, [r7, #8]
 80010d4:	e023      	b.n	800111e <FIR_process+0x76>
        output += fir->buffer[index] * fir->coeffs[i];
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	685a      	ldr	r2, [r3, #4]
 80010da:	897b      	ldrh	r3, [r7, #10]
 80010dc:	009b      	lsls	r3, r3, #2
 80010de:	4413      	add	r3, r2
 80010e0:	ed93 7a00 	vldr	s14, [r3]
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681a      	ldr	r2, [r3, #0]
 80010e8:	893b      	ldrh	r3, [r7, #8]
 80010ea:	009b      	lsls	r3, r3, #2
 80010ec:	4413      	add	r3, r2
 80010ee:	edd3 7a00 	vldr	s15, [r3]
 80010f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010f6:	ed97 7a03 	vldr	s14, [r7, #12]
 80010fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010fe:	edc7 7a03 	vstr	s15, [r7, #12]

        // Move back in circular buffer
        if (index == 0) {
 8001102:	897b      	ldrh	r3, [r7, #10]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d104      	bne.n	8001112 <FIR_process+0x6a>
            index = fir->numTaps - 1;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	891b      	ldrh	r3, [r3, #8]
 800110c:	3b01      	subs	r3, #1
 800110e:	817b      	strh	r3, [r7, #10]
 8001110:	e002      	b.n	8001118 <FIR_process+0x70>
        } else {
            index--;
 8001112:	897b      	ldrh	r3, [r7, #10]
 8001114:	3b01      	subs	r3, #1
 8001116:	817b      	strh	r3, [r7, #10]
    for (uint16_t i = 0; i < fir->numTaps; i++) {
 8001118:	893b      	ldrh	r3, [r7, #8]
 800111a:	3301      	adds	r3, #1
 800111c:	813b      	strh	r3, [r7, #8]
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	891b      	ldrh	r3, [r3, #8]
 8001122:	893a      	ldrh	r2, [r7, #8]
 8001124:	429a      	cmp	r2, r3
 8001126:	d3d6      	bcc.n	80010d6 <FIR_process+0x2e>
        }
    }

    // Update buffer index for next input
    fir->bufferIndex++;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	895b      	ldrh	r3, [r3, #10]
 800112c:	3301      	adds	r3, #1
 800112e:	b29a      	uxth	r2, r3
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	815a      	strh	r2, [r3, #10]
    if (fir->bufferIndex >= fir->numTaps) {
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	895a      	ldrh	r2, [r3, #10]
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	891b      	ldrh	r3, [r3, #8]
 800113c:	429a      	cmp	r2, r3
 800113e:	d302      	bcc.n	8001146 <FIR_process+0x9e>
        fir->bufferIndex = 0;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	2200      	movs	r2, #0
 8001144:	815a      	strh	r2, [r3, #10]
    }

    return output;
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	ee07 3a90 	vmov	s15, r3
}
 800114c:	eeb0 0a67 	vmov.f32	s0, s15
 8001150:	3714      	adds	r7, #20
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr
	...

0800115c <PWM_init>:
 *      Author: beamk
 */

#include "PWM.h"

void PWM_init(PWM* pwm, TIM_HandleTypeDef* htimx, uint16_t tim_chx){
 800115c:	b580      	push	{r7, lr}
 800115e:	b084      	sub	sp, #16
 8001160:	af00      	add	r7, sp, #0
 8001162:	60f8      	str	r0, [r7, #12]
 8001164:	60b9      	str	r1, [r7, #8]
 8001166:	4613      	mov	r3, r2
 8001168:	80fb      	strh	r3, [r7, #6]
	pwm->CPU_FREQ = 170e6;
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	4a0b      	ldr	r2, [pc, #44]	@ (800119c <PWM_init+0x40>)
 800116e:	611a      	str	r2, [r3, #16]
	pwm->htimx = htimx;
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	68ba      	ldr	r2, [r7, #8]
 8001174:	601a      	str	r2, [r3, #0]
	pwm->tim_chx = tim_chx;
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	88fa      	ldrh	r2, [r7, #6]
 800117a:	809a      	strh	r2, [r3, #4]
	pwm->OC = 0;
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	2200      	movs	r2, #0
 8001180:	615a      	str	r2, [r3, #20]
	HAL_TIM_Base_Start(htimx);
 8001182:	68b8      	ldr	r0, [r7, #8]
 8001184:	f002 fece 	bl	8003f24 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(htimx, tim_chx);
 8001188:	88fb      	ldrh	r3, [r7, #6]
 800118a:	4619      	mov	r1, r3
 800118c:	68b8      	ldr	r0, [r7, #8]
 800118e:	f003 f809 	bl	80041a4 <HAL_TIM_PWM_Start>
}
 8001192:	bf00      	nop
 8001194:	3710      	adds	r7, #16
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	0a21fe80 	.word	0x0a21fe80

080011a0 <PWM_write_range>:
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
    }
}

void PWM_write_range(PWM* pwm, float freq, float duty){
 80011a0:	b5b0      	push	{r4, r5, r7, lr}
 80011a2:	b084      	sub	sp, #16
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	60f8      	str	r0, [r7, #12]
 80011a8:	ed87 0a02 	vstr	s0, [r7, #8]
 80011ac:	edc7 0a01 	vstr	s1, [r7, #4]
    if (freq == 0) {
 80011b0:	edd7 7a02 	vldr	s15, [r7, #8]
 80011b4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80011b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011bc:	d137      	bne.n	800122e <PWM_write_range+0x8e>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, 0);
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	889b      	ldrh	r3, [r3, #4]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d105      	bne.n	80011d2 <PWM_write_range+0x32>
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	2200      	movs	r2, #0
 80011ce:	635a      	str	r2, [r3, #52]	@ 0x34
    	pwm->OC = (uint16_t) (pwm->overflow * fabs(duty) / 65535.0);
        __HAL_TIM_SET_PRESCALER(pwm->htimx, pwm->prescaler);
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
    }
}
 80011d0:	e0e1      	b.n	8001396 <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, 0);
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	889b      	ldrh	r3, [r3, #4]
 80011d6:	2b04      	cmp	r3, #4
 80011d8:	d105      	bne.n	80011e6 <PWM_write_range+0x46>
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	681a      	ldr	r2, [r3, #0]
 80011e0:	2300      	movs	r3, #0
 80011e2:	6393      	str	r3, [r2, #56]	@ 0x38
 80011e4:	e0d7      	b.n	8001396 <PWM_write_range+0x1f6>
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	889b      	ldrh	r3, [r3, #4]
 80011ea:	2b08      	cmp	r3, #8
 80011ec:	d105      	bne.n	80011fa <PWM_write_range+0x5a>
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	681a      	ldr	r2, [r3, #0]
 80011f4:	2300      	movs	r3, #0
 80011f6:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80011f8:	e0cd      	b.n	8001396 <PWM_write_range+0x1f6>
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	889b      	ldrh	r3, [r3, #4]
 80011fe:	2b0c      	cmp	r3, #12
 8001200:	d105      	bne.n	800120e <PWM_write_range+0x6e>
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	681a      	ldr	r2, [r3, #0]
 8001208:	2300      	movs	r3, #0
 800120a:	6413      	str	r3, [r2, #64]	@ 0x40
 800120c:	e0c3      	b.n	8001396 <PWM_write_range+0x1f6>
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	889b      	ldrh	r3, [r3, #4]
 8001212:	2b10      	cmp	r3, #16
 8001214:	d105      	bne.n	8001222 <PWM_write_range+0x82>
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	681a      	ldr	r2, [r3, #0]
 800121c:	2300      	movs	r3, #0
 800121e:	6493      	str	r3, [r2, #72]	@ 0x48
 8001220:	e0b9      	b.n	8001396 <PWM_write_range+0x1f6>
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	681a      	ldr	r2, [r3, #0]
 8001228:	2300      	movs	r3, #0
 800122a:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 800122c:	e0b3      	b.n	8001396 <PWM_write_range+0x1f6>
    	pwm->period_cyc = (uint32_t) (pwm->CPU_FREQ / freq);
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	691b      	ldr	r3, [r3, #16]
 8001232:	ee07 3a90 	vmov	s15, r3
 8001236:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800123a:	ed97 7a02 	vldr	s14, [r7, #8]
 800123e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001242:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001246:	ee17 2a90 	vmov	r2, s15
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	609a      	str	r2, [r3, #8]
    	pwm->prescaler = (uint16_t) ((pwm->period_cyc + 65535 - 1) / 65535) - 1; // Subtracting 1 since prescaler is zero-based
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	689b      	ldr	r3, [r3, #8]
 8001252:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8001256:	33fe      	adds	r3, #254	@ 0xfe
 8001258:	4a53      	ldr	r2, [pc, #332]	@ (80013a8 <PWM_write_range+0x208>)
 800125a:	fba2 2303 	umull	r2, r3, r2, r3
 800125e:	0bdb      	lsrs	r3, r3, #15
 8001260:	b29b      	uxth	r3, r3
 8001262:	3b01      	subs	r3, #1
 8001264:	b29a      	uxth	r2, r3
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	819a      	strh	r2, [r3, #12]
    	pwm->overflow = (uint16_t) ((pwm->CPU_FREQ / (float)(pwm->prescaler + 1) / freq) - 1);
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	691b      	ldr	r3, [r3, #16]
 800126e:	ee07 3a90 	vmov	s15, r3
 8001272:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	899b      	ldrh	r3, [r3, #12]
 800127a:	3301      	adds	r3, #1
 800127c:	ee07 3a90 	vmov	s15, r3
 8001280:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001284:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001288:	ed97 7a02 	vldr	s14, [r7, #8]
 800128c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001290:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001294:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001298:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800129c:	ee17 3a90 	vmov	r3, s15
 80012a0:	b29a      	uxth	r2, r3
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	81da      	strh	r2, [r3, #14]
    	pwm->OC = (uint16_t) (pwm->overflow * fabs(duty) / 65535.0);
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	89db      	ldrh	r3, [r3, #14]
 80012aa:	4618      	mov	r0, r3
 80012ac:	f7ff f906 	bl	80004bc <__aeabi_i2d>
 80012b0:	4604      	mov	r4, r0
 80012b2:	460d      	mov	r5, r1
 80012b4:	edd7 7a01 	vldr	s15, [r7, #4]
 80012b8:	eef0 7ae7 	vabs.f32	s15, s15
 80012bc:	ee17 0a90 	vmov	r0, s15
 80012c0:	f7ff f90e 	bl	80004e0 <__aeabi_f2d>
 80012c4:	4602      	mov	r2, r0
 80012c6:	460b      	mov	r3, r1
 80012c8:	4620      	mov	r0, r4
 80012ca:	4629      	mov	r1, r5
 80012cc:	f7ff f960 	bl	8000590 <__aeabi_dmul>
 80012d0:	4602      	mov	r2, r0
 80012d2:	460b      	mov	r3, r1
 80012d4:	4610      	mov	r0, r2
 80012d6:	4619      	mov	r1, r3
 80012d8:	a331      	add	r3, pc, #196	@ (adr r3, 80013a0 <PWM_write_range+0x200>)
 80012da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012de:	f7ff fa81 	bl	80007e4 <__aeabi_ddiv>
 80012e2:	4602      	mov	r2, r0
 80012e4:	460b      	mov	r3, r1
 80012e6:	4610      	mov	r0, r2
 80012e8:	4619      	mov	r1, r3
 80012ea:	f7ff fb63 	bl	80009b4 <__aeabi_d2uiz>
 80012ee:	4603      	mov	r3, r0
 80012f0:	b29b      	uxth	r3, r3
 80012f2:	461a      	mov	r2, r3
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	615a      	str	r2, [r3, #20]
        __HAL_TIM_SET_PRESCALER(pwm->htimx, pwm->prescaler);
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	899a      	ldrh	r2, [r3, #12]
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	629a      	str	r2, [r3, #40]	@ 0x28
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	89da      	ldrh	r2, [r3, #14]
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	89da      	ldrh	r2, [r3, #14]
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	60da      	str	r2, [r3, #12]
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	889b      	ldrh	r3, [r3, #4]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d106      	bne.n	8001330 <PWM_write_range+0x190>
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	68fa      	ldr	r2, [r7, #12]
 800132a:	6952      	ldr	r2, [r2, #20]
 800132c:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800132e:	e032      	b.n	8001396 <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	889b      	ldrh	r3, [r3, #4]
 8001334:	2b04      	cmp	r3, #4
 8001336:	d106      	bne.n	8001346 <PWM_write_range+0x1a6>
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	681a      	ldr	r2, [r3, #0]
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	695b      	ldr	r3, [r3, #20]
 8001342:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8001344:	e027      	b.n	8001396 <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	889b      	ldrh	r3, [r3, #4]
 800134a:	2b08      	cmp	r3, #8
 800134c:	d106      	bne.n	800135c <PWM_write_range+0x1bc>
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	681a      	ldr	r2, [r3, #0]
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	695b      	ldr	r3, [r3, #20]
 8001358:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 800135a:	e01c      	b.n	8001396 <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	889b      	ldrh	r3, [r3, #4]
 8001360:	2b0c      	cmp	r3, #12
 8001362:	d106      	bne.n	8001372 <PWM_write_range+0x1d2>
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	681a      	ldr	r2, [r3, #0]
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	695b      	ldr	r3, [r3, #20]
 800136e:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8001370:	e011      	b.n	8001396 <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	889b      	ldrh	r3, [r3, #4]
 8001376:	2b10      	cmp	r3, #16
 8001378:	d106      	bne.n	8001388 <PWM_write_range+0x1e8>
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	681a      	ldr	r2, [r3, #0]
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	695b      	ldr	r3, [r3, #20]
 8001384:	6493      	str	r3, [r2, #72]	@ 0x48
}
 8001386:	e006      	b.n	8001396 <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	681a      	ldr	r2, [r3, #0]
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	695b      	ldr	r3, [r3, #20]
 8001392:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8001394:	e7ff      	b.n	8001396 <PWM_write_range+0x1f6>
 8001396:	bf00      	nop
 8001398:	3710      	adds	r7, #16
 800139a:	46bd      	mov	sp, r7
 800139c:	bdb0      	pop	{r4, r5, r7, pc}
 800139e:	bf00      	nop
 80013a0:	00000000 	.word	0x00000000
 80013a4:	40efffe0 	.word	0x40efffe0
 80013a8:	80008001 	.word	0x80008001

080013ac <QEI_init>:
* Created on: Mar 30, 2024
* Author: beamk
*/
#include "QEI.h"

void QEI_init(QEI *qei, TIM_HandleTypeDef *htimx, int32_t ppr, uint32_t freq, float ratio) {
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b086      	sub	sp, #24
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6178      	str	r0, [r7, #20]
 80013b4:	6139      	str	r1, [r7, #16]
 80013b6:	60fa      	str	r2, [r7, #12]
 80013b8:	60bb      	str	r3, [r7, #8]
 80013ba:	ed87 0a01 	vstr	s0, [r7, #4]
    qei->htimx = htimx;
 80013be:	697b      	ldr	r3, [r7, #20]
 80013c0:	693a      	ldr	r2, [r7, #16]
 80013c2:	611a      	str	r2, [r3, #16]
    qei->ppr = ppr;
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	68fa      	ldr	r2, [r7, #12]
 80013c8:	619a      	str	r2, [r3, #24]
    qei->freq = freq;
 80013ca:	697b      	ldr	r3, [r7, #20]
 80013cc:	68ba      	ldr	r2, [r7, #8]
 80013ce:	621a      	str	r2, [r3, #32]
    qei->c[NOW] = 0;
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	2200      	movs	r2, #0
 80013d4:	601a      	str	r2, [r3, #0]
    qei->c[PREV] = 0;
 80013d6:	697b      	ldr	r3, [r7, #20]
 80013d8:	2200      	movs	r2, #0
 80013da:	605a      	str	r2, [r3, #4]
    qei->pps = 0;
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	f04f 0200 	mov.w	r2, #0
 80013e2:	625a      	str	r2, [r3, #36]	@ 0x24
    qei->rpm = 0;
 80013e4:	697b      	ldr	r3, [r7, #20]
 80013e6:	f04f 0200 	mov.w	r2, #0
 80013ea:	629a      	str	r2, [r3, #40]	@ 0x28
    qei->radps = 0;
 80013ec:	697b      	ldr	r3, [r7, #20]
 80013ee:	f04f 0200 	mov.w	r2, #0
 80013f2:	62da      	str	r2, [r3, #44]	@ 0x2c
    qei->enc_period = 65536 - (65536 % ppr);
 80013f4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80013f8:	68fa      	ldr	r2, [r7, #12]
 80013fa:	fb93 f2f2 	sdiv	r2, r3, r2
 80013fe:	68f9      	ldr	r1, [r7, #12]
 8001400:	fb01 f202 	mul.w	r2, r1, r2
 8001404:	1a9b      	subs	r3, r3, r2
 8001406:	f5c3 3280 	rsb	r2, r3, #65536	@ 0x10000
 800140a:	697b      	ldr	r3, [r7, #20]
 800140c:	615a      	str	r2, [r3, #20]
    qei->pulses = 0;
 800140e:	697b      	ldr	r3, [r7, #20]
 8001410:	2200      	movs	r2, #0
 8001412:	631a      	str	r2, [r3, #48]	@ 0x30
    //qei->pulsesf = 0;
    qei->revs = 0;
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	f04f 0200 	mov.w	r2, #0
 800141a:	635a      	str	r2, [r3, #52]	@ 0x34
    qei->rads = 0;
 800141c:	697b      	ldr	r3, [r7, #20]
 800141e:	f04f 0200 	mov.w	r2, #0
 8001422:	639a      	str	r2, [r3, #56]	@ 0x38
    qei->mm = 0;
 8001424:	697b      	ldr	r3, [r7, #20]
 8001426:	f04f 0200 	mov.w	r2, #0
 800142a:	641a      	str	r2, [r3, #64]	@ 0x40
    qei->mmps = 0;
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	f04f 0200 	mov.w	r2, #0
 8001432:	645a      	str	r2, [r3, #68]	@ 0x44

    qei->ratio = ratio;  // Gear ratio or scaling factor
 8001434:	697b      	ldr	r3, [r7, #20]
 8001436:	687a      	ldr	r2, [r7, #4]
 8001438:	649a      	str	r2, [r3, #72]	@ 0x48
    HAL_TIM_Encoder_Start(htimx, TIM_CHANNEL_ALL);
 800143a:	213c      	movs	r1, #60	@ 0x3c
 800143c:	6938      	ldr	r0, [r7, #16]
 800143e:	f003 f869 	bl	8004514 <HAL_TIM_Encoder_Start>
}
 8001442:	bf00      	nop
 8001444:	3718      	adds	r7, #24
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	0000      	movs	r0, r0
 800144c:	0000      	movs	r0, r0
	...

08001450 <QEI_get_diff_count>:

void QEI_get_diff_count(QEI *qei) {
 8001450:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001454:	b084      	sub	sp, #16
 8001456:	af00      	add	r7, sp, #0
 8001458:	6078      	str	r0, [r7, #4]
    qei->c[NOW] = __HAL_TIM_GET_COUNTER(qei->htimx); // Update the current count
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	691b      	ldr	r3, [r3, #16]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	601a      	str	r2, [r3, #0]

    // Calculate the difference in counts
    int32_t diff_counts = qei->c[NOW] - qei->c[PREV];
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681a      	ldr	r2, [r3, #0]
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	1ad3      	subs	r3, r2, r3
 8001470:	60fb      	str	r3, [r7, #12]

    //Unwrap
    if (diff_counts > qei->enc_period / 2) {
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	695b      	ldr	r3, [r3, #20]
 8001476:	0fda      	lsrs	r2, r3, #31
 8001478:	4413      	add	r3, r2
 800147a:	105b      	asrs	r3, r3, #1
 800147c:	461a      	mov	r2, r3
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	4293      	cmp	r3, r2
 8001482:	dd05      	ble.n	8001490 <QEI_get_diff_count+0x40>
        diff_counts -= qei->enc_period;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	695b      	ldr	r3, [r3, #20]
 8001488:	68fa      	ldr	r2, [r7, #12]
 800148a:	1ad3      	subs	r3, r2, r3
 800148c:	60fb      	str	r3, [r7, #12]
 800148e:	e00e      	b.n	80014ae <QEI_get_diff_count+0x5e>
    } else if (diff_counts < -(qei->enc_period) / 2) {
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	695b      	ldr	r3, [r3, #20]
 8001494:	425b      	negs	r3, r3
 8001496:	0fda      	lsrs	r2, r3, #31
 8001498:	4413      	add	r3, r2
 800149a:	105b      	asrs	r3, r3, #1
 800149c:	461a      	mov	r2, r3
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	4293      	cmp	r3, r2
 80014a2:	da04      	bge.n	80014ae <QEI_get_diff_count+0x5e>
        diff_counts += qei->enc_period;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	695b      	ldr	r3, [r3, #20]
 80014a8:	68fa      	ldr	r2, [r7, #12]
 80014aa:	4413      	add	r3, r2
 80014ac:	60fb      	str	r3, [r7, #12]
    }

    qei->diff_counts = diff_counts;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	68fa      	ldr	r2, [r7, #12]
 80014b2:	61da      	str	r2, [r3, #28]
    //qei->diff_countsf = (float)diff_counts*1.25;

    // Calculate Position with ratio adjustment
    qei->pulses += qei->diff_counts;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	69db      	ldr	r3, [r3, #28]
 80014bc:	441a      	add	r2, r3
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	631a      	str	r2, [r3, #48]	@ 0x30
    //qei->pulsesf += qei->diff_countsf;

    // Apply ratio to all position calculations
    qei->revs += (qei->diff_counts / (float)(qei->ppr)) * qei->ratio;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	69db      	ldr	r3, [r3, #28]
 80014cc:	ee07 3a90 	vmov	s15, r3
 80014d0:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	699b      	ldr	r3, [r3, #24]
 80014d8:	ee07 3a90 	vmov	s15, r3
 80014dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014e0:	eec6 6a27 	vdiv.f32	s13, s12, s15
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 80014ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
    qei->mm += (qei->diff_counts / (float)(qei->ppr)) * 10.0 * qei->ratio;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014fc:	4618      	mov	r0, r3
 80014fe:	f7fe ffef 	bl	80004e0 <__aeabi_f2d>
 8001502:	4604      	mov	r4, r0
 8001504:	460d      	mov	r5, r1
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	69db      	ldr	r3, [r3, #28]
 800150a:	ee07 3a90 	vmov	s15, r3
 800150e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	699b      	ldr	r3, [r3, #24]
 8001516:	ee07 3a90 	vmov	s15, r3
 800151a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800151e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001522:	ee16 0a90 	vmov	r0, s13
 8001526:	f7fe ffdb 	bl	80004e0 <__aeabi_f2d>
 800152a:	f04f 0200 	mov.w	r2, #0
 800152e:	4b36      	ldr	r3, [pc, #216]	@ (8001608 <QEI_get_diff_count+0x1b8>)
 8001530:	f7ff f82e 	bl	8000590 <__aeabi_dmul>
 8001534:	4602      	mov	r2, r0
 8001536:	460b      	mov	r3, r1
 8001538:	4690      	mov	r8, r2
 800153a:	4699      	mov	r9, r3
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001540:	4618      	mov	r0, r3
 8001542:	f7fe ffcd 	bl	80004e0 <__aeabi_f2d>
 8001546:	4602      	mov	r2, r0
 8001548:	460b      	mov	r3, r1
 800154a:	4640      	mov	r0, r8
 800154c:	4649      	mov	r1, r9
 800154e:	f7ff f81f 	bl	8000590 <__aeabi_dmul>
 8001552:	4602      	mov	r2, r0
 8001554:	460b      	mov	r3, r1
 8001556:	4620      	mov	r0, r4
 8001558:	4629      	mov	r1, r5
 800155a:	f7fe fe63 	bl	8000224 <__adddf3>
 800155e:	4602      	mov	r2, r0
 8001560:	460b      	mov	r3, r1
 8001562:	4610      	mov	r0, r2
 8001564:	4619      	mov	r1, r3
 8001566:	f7ff fa45 	bl	80009f4 <__aeabi_d2f>
 800156a:	4602      	mov	r2, r0
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	641a      	str	r2, [r3, #64]	@ 0x40
    qei->rads += (qei->diff_counts / (float)(qei->ppr)) * 2 * M_PI * qei->ratio;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001574:	4618      	mov	r0, r3
 8001576:	f7fe ffb3 	bl	80004e0 <__aeabi_f2d>
 800157a:	4604      	mov	r4, r0
 800157c:	460d      	mov	r5, r1
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	69db      	ldr	r3, [r3, #28]
 8001582:	ee07 3a90 	vmov	s15, r3
 8001586:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	699b      	ldr	r3, [r3, #24]
 800158e:	ee07 3a90 	vmov	s15, r3
 8001592:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001596:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800159a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800159e:	ee17 0a90 	vmov	r0, s15
 80015a2:	f7fe ff9d 	bl	80004e0 <__aeabi_f2d>
 80015a6:	a316      	add	r3, pc, #88	@ (adr r3, 8001600 <QEI_get_diff_count+0x1b0>)
 80015a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015ac:	f7fe fff0 	bl	8000590 <__aeabi_dmul>
 80015b0:	4602      	mov	r2, r0
 80015b2:	460b      	mov	r3, r1
 80015b4:	4690      	mov	r8, r2
 80015b6:	4699      	mov	r9, r3
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80015bc:	4618      	mov	r0, r3
 80015be:	f7fe ff8f 	bl	80004e0 <__aeabi_f2d>
 80015c2:	4602      	mov	r2, r0
 80015c4:	460b      	mov	r3, r1
 80015c6:	4640      	mov	r0, r8
 80015c8:	4649      	mov	r1, r9
 80015ca:	f7fe ffe1 	bl	8000590 <__aeabi_dmul>
 80015ce:	4602      	mov	r2, r0
 80015d0:	460b      	mov	r3, r1
 80015d2:	4620      	mov	r0, r4
 80015d4:	4629      	mov	r1, r5
 80015d6:	f7fe fe25 	bl	8000224 <__adddf3>
 80015da:	4602      	mov	r2, r0
 80015dc:	460b      	mov	r3, r1
 80015de:	4610      	mov	r0, r2
 80015e0:	4619      	mov	r1, r3
 80015e2:	f7ff fa07 	bl	80009f4 <__aeabi_d2f>
 80015e6:	4602      	mov	r2, r0
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	639a      	str	r2, [r3, #56]	@ 0x38

    qei->c[PREV] = qei->c[NOW]; // Store the previous count
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681a      	ldr	r2, [r3, #0]
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	605a      	str	r2, [r3, #4]
}
 80015f4:	bf00      	nop
 80015f6:	3710      	adds	r7, #16
 80015f8:	46bd      	mov	sp, r7
 80015fa:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80015fe:	bf00      	nop
 8001600:	54442d18 	.word	0x54442d18
 8001604:	400921fb 	.word	0x400921fb
 8001608:	40240000 	.word	0x40240000
 800160c:	00000000 	.word	0x00000000

08001610 <QEI_compute_data>:

void QEI_compute_data(QEI *qei) {
 8001610:	b5b0      	push	{r4, r5, r7, lr}
 8001612:	b084      	sub	sp, #16
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
    // Calculate Velocity with ratio adjustment
    qei->pps = qei->diff_counts * ((int)(qei->freq));
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	69db      	ldr	r3, [r3, #28]
 800161c:	687a      	ldr	r2, [r7, #4]
 800161e:	6a12      	ldr	r2, [r2, #32]
 8001620:	fb02 f303 	mul.w	r3, r2, r3
 8001624:	ee07 3a90 	vmov	s15, r3
 8001628:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

    // Apply ratio to all velocity calculations
    qei->rpm = qei->pps * 60.0 / (float)(qei->ppr) * qei->ratio;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001636:	4618      	mov	r0, r3
 8001638:	f7fe ff52 	bl	80004e0 <__aeabi_f2d>
 800163c:	f04f 0200 	mov.w	r2, #0
 8001640:	4b6b      	ldr	r3, [pc, #428]	@ (80017f0 <QEI_compute_data+0x1e0>)
 8001642:	f7fe ffa5 	bl	8000590 <__aeabi_dmul>
 8001646:	4602      	mov	r2, r0
 8001648:	460b      	mov	r3, r1
 800164a:	4614      	mov	r4, r2
 800164c:	461d      	mov	r5, r3
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	699b      	ldr	r3, [r3, #24]
 8001652:	ee07 3a90 	vmov	s15, r3
 8001656:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800165a:	ee17 0a90 	vmov	r0, s15
 800165e:	f7fe ff3f 	bl	80004e0 <__aeabi_f2d>
 8001662:	4602      	mov	r2, r0
 8001664:	460b      	mov	r3, r1
 8001666:	4620      	mov	r0, r4
 8001668:	4629      	mov	r1, r5
 800166a:	f7ff f8bb 	bl	80007e4 <__aeabi_ddiv>
 800166e:	4602      	mov	r2, r0
 8001670:	460b      	mov	r3, r1
 8001672:	4614      	mov	r4, r2
 8001674:	461d      	mov	r5, r3
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800167a:	4618      	mov	r0, r3
 800167c:	f7fe ff30 	bl	80004e0 <__aeabi_f2d>
 8001680:	4602      	mov	r2, r0
 8001682:	460b      	mov	r3, r1
 8001684:	4620      	mov	r0, r4
 8001686:	4629      	mov	r1, r5
 8001688:	f7fe ff82 	bl	8000590 <__aeabi_dmul>
 800168c:	4602      	mov	r2, r0
 800168e:	460b      	mov	r3, r1
 8001690:	4610      	mov	r0, r2
 8001692:	4619      	mov	r1, r3
 8001694:	f7ff f9ae 	bl	80009f4 <__aeabi_d2f>
 8001698:	4602      	mov	r2, r0
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	629a      	str	r2, [r3, #40]	@ 0x28
    qei->radps = qei->pps * 2 * M_PI / (float)(qei->ppr) * qei->ratio;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80016a4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80016a8:	ee17 0a90 	vmov	r0, s15
 80016ac:	f7fe ff18 	bl	80004e0 <__aeabi_f2d>
 80016b0:	a34d      	add	r3, pc, #308	@ (adr r3, 80017e8 <QEI_compute_data+0x1d8>)
 80016b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016b6:	f7fe ff6b 	bl	8000590 <__aeabi_dmul>
 80016ba:	4602      	mov	r2, r0
 80016bc:	460b      	mov	r3, r1
 80016be:	4614      	mov	r4, r2
 80016c0:	461d      	mov	r5, r3
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	699b      	ldr	r3, [r3, #24]
 80016c6:	ee07 3a90 	vmov	s15, r3
 80016ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016ce:	ee17 0a90 	vmov	r0, s15
 80016d2:	f7fe ff05 	bl	80004e0 <__aeabi_f2d>
 80016d6:	4602      	mov	r2, r0
 80016d8:	460b      	mov	r3, r1
 80016da:	4620      	mov	r0, r4
 80016dc:	4629      	mov	r1, r5
 80016de:	f7ff f881 	bl	80007e4 <__aeabi_ddiv>
 80016e2:	4602      	mov	r2, r0
 80016e4:	460b      	mov	r3, r1
 80016e6:	4614      	mov	r4, r2
 80016e8:	461d      	mov	r5, r3
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80016ee:	4618      	mov	r0, r3
 80016f0:	f7fe fef6 	bl	80004e0 <__aeabi_f2d>
 80016f4:	4602      	mov	r2, r0
 80016f6:	460b      	mov	r3, r1
 80016f8:	4620      	mov	r0, r4
 80016fa:	4629      	mov	r1, r5
 80016fc:	f7fe ff48 	bl	8000590 <__aeabi_dmul>
 8001700:	4602      	mov	r2, r0
 8001702:	460b      	mov	r3, r1
 8001704:	4610      	mov	r0, r2
 8001706:	4619      	mov	r1, r3
 8001708:	f7ff f974 	bl	80009f4 <__aeabi_d2f>
 800170c:	4602      	mov	r2, r0
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	62da      	str	r2, [r3, #44]	@ 0x2c
    qei->mmps = qei->pps * 10.0 / (float)(qei->ppr) * qei->ratio;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001716:	4618      	mov	r0, r3
 8001718:	f7fe fee2 	bl	80004e0 <__aeabi_f2d>
 800171c:	f04f 0200 	mov.w	r2, #0
 8001720:	4b34      	ldr	r3, [pc, #208]	@ (80017f4 <QEI_compute_data+0x1e4>)
 8001722:	f7fe ff35 	bl	8000590 <__aeabi_dmul>
 8001726:	4602      	mov	r2, r0
 8001728:	460b      	mov	r3, r1
 800172a:	4614      	mov	r4, r2
 800172c:	461d      	mov	r5, r3
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	699b      	ldr	r3, [r3, #24]
 8001732:	ee07 3a90 	vmov	s15, r3
 8001736:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800173a:	ee17 0a90 	vmov	r0, s15
 800173e:	f7fe fecf 	bl	80004e0 <__aeabi_f2d>
 8001742:	4602      	mov	r2, r0
 8001744:	460b      	mov	r3, r1
 8001746:	4620      	mov	r0, r4
 8001748:	4629      	mov	r1, r5
 800174a:	f7ff f84b 	bl	80007e4 <__aeabi_ddiv>
 800174e:	4602      	mov	r2, r0
 8001750:	460b      	mov	r3, r1
 8001752:	4614      	mov	r4, r2
 8001754:	461d      	mov	r5, r3
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800175a:	4618      	mov	r0, r3
 800175c:	f7fe fec0 	bl	80004e0 <__aeabi_f2d>
 8001760:	4602      	mov	r2, r0
 8001762:	460b      	mov	r3, r1
 8001764:	4620      	mov	r0, r4
 8001766:	4629      	mov	r1, r5
 8001768:	f7fe ff12 	bl	8000590 <__aeabi_dmul>
 800176c:	4602      	mov	r2, r0
 800176e:	460b      	mov	r3, r1
 8001770:	4610      	mov	r0, r2
 8001772:	4619      	mov	r1, r3
 8001774:	f7ff f93e 	bl	80009f4 <__aeabi_d2f>
 8001778:	4602      	mov	r2, r0
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	645a      	str	r2, [r3, #68]	@ 0x44

    // Calculate Acceleration with ratio adjustment
    qei->r[NOW] = qei->radps;  // radps already has ratio applied
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	609a      	str	r2, [r3, #8]
    float diff_velocity = (qei->r[NOW] - qei->r[PREV]);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	ed93 7a02 	vldr	s14, [r3, #8]
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	edd3 7a03 	vldr	s15, [r3, #12]
 8001792:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001796:	edc7 7a03 	vstr	s15, [r7, #12]
    if (diff_velocity == 0) {
 800179a:	edd7 7a03 	vldr	s15, [r7, #12]
 800179e:	eef5 7a40 	vcmp.f32	s15, #0.0
 80017a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017a6:	d104      	bne.n	80017b2 <QEI_compute_data+0x1a2>
        qei->radpss = 0;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	f04f 0200 	mov.w	r2, #0
 80017ae:	63da      	str	r2, [r3, #60]	@ 0x3c
 80017b0:	e00f      	b.n	80017d2 <QEI_compute_data+0x1c2>
    } else {
        qei->radpss = diff_velocity / (1 / (qei->freq));
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6a1b      	ldr	r3, [r3, #32]
 80017b6:	2b01      	cmp	r3, #1
 80017b8:	d102      	bne.n	80017c0 <QEI_compute_data+0x1b0>
 80017ba:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80017be:	e001      	b.n	80017c4 <QEI_compute_data+0x1b4>
 80017c0:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 80017f8 <QEI_compute_data+0x1e8>
 80017c4:	edd7 6a03 	vldr	s13, [r7, #12]
 80017c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
        // No need to multiply by ratio again since diff_velocity already includes it
    }
    qei->r[PREV] = qei->r[NOW]; // Store the previous count
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	689a      	ldr	r2, [r3, #8]
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	60da      	str	r2, [r3, #12]
}
 80017da:	bf00      	nop
 80017dc:	3710      	adds	r7, #16
 80017de:	46bd      	mov	sp, r7
 80017e0:	bdb0      	pop	{r4, r5, r7, pc}
 80017e2:	bf00      	nop
 80017e4:	f3af 8000 	nop.w
 80017e8:	54442d18 	.word	0x54442d18
 80017ec:	400921fb 	.word	0x400921fb
 80017f0:	404e0000 	.word	0x404e0000
 80017f4:	40240000 	.word	0x40240000
 80017f8:	00000000 	.word	0x00000000

080017fc <MX_GPIO_Init>:
        * EXTI
     PA2   ------> LPUART1_TX
     PA3   ------> LPUART1_RX
*/
void MX_GPIO_Init(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b08a      	sub	sp, #40	@ 0x28
 8001800:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001802:	f107 0314 	add.w	r3, r7, #20
 8001806:	2200      	movs	r2, #0
 8001808:	601a      	str	r2, [r3, #0]
 800180a:	605a      	str	r2, [r3, #4]
 800180c:	609a      	str	r2, [r3, #8]
 800180e:	60da      	str	r2, [r3, #12]
 8001810:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001812:	4b43      	ldr	r3, [pc, #268]	@ (8001920 <MX_GPIO_Init+0x124>)
 8001814:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001816:	4a42      	ldr	r2, [pc, #264]	@ (8001920 <MX_GPIO_Init+0x124>)
 8001818:	f043 0304 	orr.w	r3, r3, #4
 800181c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800181e:	4b40      	ldr	r3, [pc, #256]	@ (8001920 <MX_GPIO_Init+0x124>)
 8001820:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001822:	f003 0304 	and.w	r3, r3, #4
 8001826:	613b      	str	r3, [r7, #16]
 8001828:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800182a:	4b3d      	ldr	r3, [pc, #244]	@ (8001920 <MX_GPIO_Init+0x124>)
 800182c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800182e:	4a3c      	ldr	r2, [pc, #240]	@ (8001920 <MX_GPIO_Init+0x124>)
 8001830:	f043 0320 	orr.w	r3, r3, #32
 8001834:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001836:	4b3a      	ldr	r3, [pc, #232]	@ (8001920 <MX_GPIO_Init+0x124>)
 8001838:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800183a:	f003 0320 	and.w	r3, r3, #32
 800183e:	60fb      	str	r3, [r7, #12]
 8001840:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001842:	4b37      	ldr	r3, [pc, #220]	@ (8001920 <MX_GPIO_Init+0x124>)
 8001844:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001846:	4a36      	ldr	r2, [pc, #216]	@ (8001920 <MX_GPIO_Init+0x124>)
 8001848:	f043 0301 	orr.w	r3, r3, #1
 800184c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800184e:	4b34      	ldr	r3, [pc, #208]	@ (8001920 <MX_GPIO_Init+0x124>)
 8001850:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001852:	f003 0301 	and.w	r3, r3, #1
 8001856:	60bb      	str	r3, [r7, #8]
 8001858:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800185a:	4b31      	ldr	r3, [pc, #196]	@ (8001920 <MX_GPIO_Init+0x124>)
 800185c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800185e:	4a30      	ldr	r2, [pc, #192]	@ (8001920 <MX_GPIO_Init+0x124>)
 8001860:	f043 0302 	orr.w	r3, r3, #2
 8001864:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001866:	4b2e      	ldr	r3, [pc, #184]	@ (8001920 <MX_GPIO_Init+0x124>)
 8001868:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800186a:	f003 0302 	and.w	r3, r3, #2
 800186e:	607b      	str	r3, [r7, #4]
 8001870:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_8, GPIO_PIN_RESET);
 8001872:	2200      	movs	r2, #0
 8001874:	f44f 7190 	mov.w	r1, #288	@ 0x120
 8001878:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800187c:	f001 fd14 	bl	80032a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8001880:	2200      	movs	r2, #0
 8001882:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001886:	4827      	ldr	r0, [pc, #156]	@ (8001924 <MX_GPIO_Init+0x128>)
 8001888:	f001 fd0e 	bl	80032a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800188c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001890:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001892:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001896:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001898:	2300      	movs	r3, #0
 800189a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800189c:	f107 0314 	add.w	r3, r7, #20
 80018a0:	4619      	mov	r1, r3
 80018a2:	4821      	ldr	r0, [pc, #132]	@ (8001928 <MX_GPIO_Init+0x12c>)
 80018a4:	f001 fb7e 	bl	8002fa4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPUART1_TX_Pin LPUART1_RX_Pin */
  GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 80018a8:	230c      	movs	r3, #12
 80018aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ac:	2302      	movs	r3, #2
 80018ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b0:	2300      	movs	r3, #0
 80018b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018b4:	2300      	movs	r3, #0
 80018b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 80018b8:	230c      	movs	r3, #12
 80018ba:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018bc:	f107 0314 	add.w	r3, r7, #20
 80018c0:	4619      	mov	r1, r3
 80018c2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80018c6:	f001 fb6d 	bl	8002fa4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA8 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_8;
 80018ca:	f44f 7390 	mov.w	r3, #288	@ 0x120
 80018ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018d0:	2301      	movs	r3, #1
 80018d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d4:	2300      	movs	r3, #0
 80018d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018d8:	2300      	movs	r3, #0
 80018da:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018dc:	f107 0314 	add.w	r3, r7, #20
 80018e0:	4619      	mov	r1, r3
 80018e2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80018e6:	f001 fb5d 	bl	8002fa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80018ea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80018ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018f0:	2301      	movs	r3, #1
 80018f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f4:	2300      	movs	r3, #0
 80018f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018f8:	2300      	movs	r3, #0
 80018fa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018fc:	f107 0314 	add.w	r3, r7, #20
 8001900:	4619      	mov	r1, r3
 8001902:	4808      	ldr	r0, [pc, #32]	@ (8001924 <MX_GPIO_Init+0x128>)
 8001904:	f001 fb4e 	bl	8002fa4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001908:	2200      	movs	r2, #0
 800190a:	2100      	movs	r1, #0
 800190c:	2028      	movs	r0, #40	@ 0x28
 800190e:	f001 fb14 	bl	8002f3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001912:	2028      	movs	r0, #40	@ 0x28
 8001914:	f001 fb2b 	bl	8002f6e <HAL_NVIC_EnableIRQ>

}
 8001918:	bf00      	nop
 800191a:	3728      	adds	r7, #40	@ 0x28
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}
 8001920:	40021000 	.word	0x40021000
 8001924:	48000400 	.word	0x48000400
 8001928:	48000800 	.word	0x48000800

0800192c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001930:	f001 f9b7 	bl	8002ca2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001934:	f000 f88c 	bl	8001a50 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001938:	f7ff ff60 	bl	80017fc <MX_GPIO_Init>
  MX_TIM3_Init();
 800193c:	f000 fd7e 	bl	800243c <MX_TIM3_Init>
  MX_TIM4_Init();
 8001940:	f000 fdd2 	bl	80024e8 <MX_TIM4_Init>
  MX_TIM5_Init();
 8001944:	f000 fe26 	bl	8002594 <MX_TIM5_Init>
  MX_TIM20_Init();
 8001948:	f000 ff32 	bl	80027b0 <MX_TIM20_Init>
  MX_TIM8_Init();
 800194c:	f000 fe78 	bl	8002640 <MX_TIM8_Init>
  MX_TIM2_Init();
 8001950:	f000 fd26 	bl	80023a0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
	transporter_begin();
 8001954:	f001 f8f8 	bl	8002b48 <transporter_begin>

	  // 1. Sine Wave Example
	  SIGNAL_init(&sine_sg, SIGNAL_SINE);
 8001958:	2100      	movs	r1, #0
 800195a:	4834      	ldr	r0, [pc, #208]	@ (8001a2c <main+0x100>)
 800195c:	f000 f9de 	bl	8001d1c <SIGNAL_init>
	  SIGNAL_config_sine(&sine_sg,
 8001960:	eddf 2a33 	vldr	s5, [pc, #204]	@ 8001a30 <main+0x104>
 8001964:	ed9f 2a33 	vldr	s4, [pc, #204]	@ 8001a34 <main+0x108>
 8001968:	eddf 1a33 	vldr	s3, [pc, #204]	@ 8001a38 <main+0x10c>
 800196c:	ed9f 1a32 	vldr	s2, [pc, #200]	@ 8001a38 <main+0x10c>
 8001970:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8001974:	ed9f 0a2e 	vldr	s0, [pc, #184]	@ 8001a30 <main+0x104>
 8001978:	482c      	ldr	r0, [pc, #176]	@ (8001a2c <main+0x100>)
 800197a:	f000 fa2d 	bl	8001dd8 <SIGNAL_config_sine>
	      -0.7f/3.0f,   // Min Setpoint
	      0.7f/3.0f     // Max Setpoint
	  );

	  // 2. Chirp Wave Example (Linear)
	  SIGNAL_init(&chirp_linear_sg, SIGNAL_CHIRP);
 800197e:	2101      	movs	r1, #1
 8001980:	482e      	ldr	r0, [pc, #184]	@ (8001a3c <main+0x110>)
 8001982:	f000 f9cb 	bl	8001d1c <SIGNAL_init>
	  SIGNAL_config_chirp(&chirp_linear_sg,
 8001986:	eddf 2a2a 	vldr	s5, [pc, #168]	@ 8001a30 <main+0x104>
 800198a:	ed9f 2a2a 	vldr	s4, [pc, #168]	@ 8001a34 <main+0x108>
 800198e:	2100      	movs	r1, #0
 8001990:	eef1 1a04 	vmov.f32	s3, #20	@ 0x40a00000  5.0
 8001994:	eeb2 1a04 	vmov.f32	s2, #36	@ 0x41200000  10.0
 8001998:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 800199c:	ed9f 0a24 	vldr	s0, [pc, #144]	@ 8001a30 <main+0x104>
 80019a0:	4826      	ldr	r0, [pc, #152]	@ (8001a3c <main+0x110>)
 80019a2:	f000 fa44 	bl	8001e2e <SIGNAL_config_chirp>
	      -0.7f/3.0f,       // Min Setpoint
	      0.7f/3.0f         // Max Setpoint
	  );

	  // 3. Chirp Wave Example (Logarithmic)
	  SIGNAL_init(&chirp_log_sg, SIGNAL_CHIRP);
 80019a6:	2101      	movs	r1, #1
 80019a8:	4825      	ldr	r0, [pc, #148]	@ (8001a40 <main+0x114>)
 80019aa:	f000 f9b7 	bl	8001d1c <SIGNAL_init>
	  SIGNAL_config_chirp(&chirp_log_sg,
 80019ae:	eddf 2a20 	vldr	s5, [pc, #128]	@ 8001a30 <main+0x104>
 80019b2:	ed9f 2a20 	vldr	s4, [pc, #128]	@ 8001a34 <main+0x108>
 80019b6:	2101      	movs	r1, #1
 80019b8:	eef1 1a04 	vmov.f32	s3, #20	@ 0x40a00000  5.0
 80019bc:	eeb2 1a04 	vmov.f32	s2, #36	@ 0x41200000  10.0
 80019c0:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 80019c4:	ed9f 0a1a 	vldr	s0, [pc, #104]	@ 8001a30 <main+0x104>
 80019c8:	481d      	ldr	r0, [pc, #116]	@ (8001a40 <main+0x114>)
 80019ca:	f000 fa30 	bl	8001e2e <SIGNAL_config_chirp>
	      -0.7f/3.0f,           // Min Setpoint
	      0.7f/3.0f             // Max Setpoint
	  );

	  // 4. Square Wave Example
	  SIGNAL_init(&square_sg, SIGNAL_SQUARE);
 80019ce:	2102      	movs	r1, #2
 80019d0:	481c      	ldr	r0, [pc, #112]	@ (8001a44 <main+0x118>)
 80019d2:	f000 f9a3 	bl	8001d1c <SIGNAL_init>
	  SIGNAL_config_square(&square_sg,
 80019d6:	ed9f 3a16 	vldr	s6, [pc, #88]	@ 8001a30 <main+0x104>
 80019da:	eddf 2a16 	vldr	s5, [pc, #88]	@ 8001a34 <main+0x108>
 80019de:	ed9f 2a16 	vldr	s4, [pc, #88]	@ 8001a38 <main+0x10c>
 80019e2:	eddf 1a15 	vldr	s3, [pc, #84]	@ 8001a38 <main+0x10c>
 80019e6:	ed9f 1a18 	vldr	s2, [pc, #96]	@ 8001a48 <main+0x11c>
 80019ea:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 80019ee:	ed9f 0a10 	vldr	s0, [pc, #64]	@ 8001a30 <main+0x104>
 80019f2:	4814      	ldr	r0, [pc, #80]	@ (8001a44 <main+0x118>)
 80019f4:	f000 fa4f 	bl	8001e96 <SIGNAL_config_square>
	      -0.7f/3.0f,   // Min Setpoint
	      0.7f/3.0f     // Max Setpoint
	  );

	  // 5. Ramp Wave Example
	  SIGNAL_init(&ramp_sg, SIGNAL_RAMP);
 80019f8:	2103      	movs	r1, #3
 80019fa:	4814      	ldr	r0, [pc, #80]	@ (8001a4c <main+0x120>)
 80019fc:	f000 f98e 	bl	8001d1c <SIGNAL_init>
	  SIGNAL_config_ramp(&ramp_sg,
 8001a00:	eddf 3a0b 	vldr	s7, [pc, #44]	@ 8001a30 <main+0x104>
 8001a04:	ed9f 3a0b 	vldr	s6, [pc, #44]	@ 8001a34 <main+0x108>
 8001a08:	eddf 2a0b 	vldr	s5, [pc, #44]	@ 8001a38 <main+0x10c>
 8001a0c:	ed9f 2a0a 	vldr	s4, [pc, #40]	@ 8001a38 <main+0x10c>
 8001a10:	eddf 1a07 	vldr	s3, [pc, #28]	@ 8001a30 <main+0x104>
 8001a14:	ed9f 1a07 	vldr	s2, [pc, #28]	@ 8001a34 <main+0x108>
 8001a18:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8001a1c:	ed9f 0a04 	vldr	s0, [pc, #16]	@ 8001a30 <main+0x104>
 8001a20:	480a      	ldr	r0, [pc, #40]	@ (8001a4c <main+0x120>)
 8001a22:	f000 fa68 	bl	8001ef6 <SIGNAL_config_ramp>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8001a26:	bf00      	nop
 8001a28:	e7fd      	b.n	8001a26 <main+0xfa>
 8001a2a:	bf00      	nop
 8001a2c:	20000084 	.word	0x20000084
 8001a30:	3e6eeeef 	.word	0x3e6eeeef
 8001a34:	be6eeeef 	.word	0xbe6eeeef
 8001a38:	00000000 	.word	0x00000000
 8001a3c:	200000c8 	.word	0x200000c8
 8001a40:	2000010c 	.word	0x2000010c
 8001a44:	20000150 	.word	0x20000150
 8001a48:	3e99999a 	.word	0x3e99999a
 8001a4c:	20000194 	.word	0x20000194

08001a50 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b094      	sub	sp, #80	@ 0x50
 8001a54:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a56:	f107 0318 	add.w	r3, r7, #24
 8001a5a:	2238      	movs	r2, #56	@ 0x38
 8001a5c:	2100      	movs	r1, #0
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f004 f8d0 	bl	8005c04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a64:	1d3b      	adds	r3, r7, #4
 8001a66:	2200      	movs	r2, #0
 8001a68:	601a      	str	r2, [r3, #0]
 8001a6a:	605a      	str	r2, [r3, #4]
 8001a6c:	609a      	str	r2, [r3, #8]
 8001a6e:	60da      	str	r2, [r3, #12]
 8001a70:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001a72:	2000      	movs	r0, #0
 8001a74:	f001 fc54 	bl	8003320 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001a78:	2302      	movs	r3, #2
 8001a7a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a7c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001a80:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a82:	2340      	movs	r3, #64	@ 0x40
 8001a84:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a86:	2302      	movs	r3, #2
 8001a88:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001a8a:	2302      	movs	r3, #2
 8001a8c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001a8e:	2304      	movs	r3, #4
 8001a90:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001a92:	2355      	movs	r3, #85	@ 0x55
 8001a94:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001a96:	2302      	movs	r3, #2
 8001a98:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001a9a:	2302      	movs	r3, #2
 8001a9c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001a9e:	2302      	movs	r3, #2
 8001aa0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001aa2:	f107 0318 	add.w	r3, r7, #24
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f001 fcee 	bl	8003488 <HAL_RCC_OscConfig>
 8001aac:	4603      	mov	r3, r0
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d001      	beq.n	8001ab6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001ab2:	f000 f8c7 	bl	8001c44 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ab6:	230f      	movs	r3, #15
 8001ab8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001aba:	2303      	movs	r3, #3
 8001abc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001aca:	1d3b      	adds	r3, r7, #4
 8001acc:	2104      	movs	r1, #4
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f001 ffec 	bl	8003aac <HAL_RCC_ClockConfig>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d001      	beq.n	8001ade <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001ada:	f000 f8b3 	bl	8001c44 <Error_Handler>
  }
}
 8001ade:	bf00      	nop
 8001ae0:	3750      	adds	r7, #80	@ 0x50
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}
	...

08001ae8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b082      	sub	sp, #8
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
    if (htim == &htim2) {
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	4a3e      	ldr	r2, [pc, #248]	@ (8001bec <HAL_TIM_PeriodElapsedCallback+0x104>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d175      	bne.n	8001be4 <HAL_TIM_PeriodElapsedCallback+0xfc>
        QEI_get_diff_count(&encoder3);
 8001af8:	483d      	ldr	r0, [pc, #244]	@ (8001bf0 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8001afa:	f7ff fca9 	bl	8001450 <QEI_get_diff_count>
        QEI_compute_data(&encoder3);
 8001afe:	483c      	ldr	r0, [pc, #240]	@ (8001bf0 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8001b00:	f7ff fd86 	bl	8001610 <QEI_compute_data>

        QEI_get_diff_count(&encoder4);
 8001b04:	483b      	ldr	r0, [pc, #236]	@ (8001bf4 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8001b06:	f7ff fca3 	bl	8001450 <QEI_get_diff_count>
        QEI_compute_data(&encoder4);
 8001b0a:	483a      	ldr	r0, [pc, #232]	@ (8001bf4 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8001b0c:	f7ff fd80 	bl	8001610 <QEI_compute_data>

        sine_sample = SIGNAL_generate(&sine_sg, 0.001f);
 8001b10:	ed9f 0a39 	vldr	s0, [pc, #228]	@ 8001bf8 <HAL_TIM_PeriodElapsedCallback+0x110>
 8001b14:	4839      	ldr	r0, [pc, #228]	@ (8001bfc <HAL_TIM_PeriodElapsedCallback+0x114>)
 8001b16:	f000 fa23 	bl	8001f60 <SIGNAL_generate>
 8001b1a:	eef0 7a40 	vmov.f32	s15, s0
 8001b1e:	4b38      	ldr	r3, [pc, #224]	@ (8001c00 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8001b20:	edc3 7a00 	vstr	s15, [r3]
        chirp_Linear_sample = SIGNAL_generate(&chirp_linear_sg, 0.001f);
 8001b24:	ed9f 0a34 	vldr	s0, [pc, #208]	@ 8001bf8 <HAL_TIM_PeriodElapsedCallback+0x110>
 8001b28:	4836      	ldr	r0, [pc, #216]	@ (8001c04 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8001b2a:	f000 fa19 	bl	8001f60 <SIGNAL_generate>
 8001b2e:	eef0 7a40 	vmov.f32	s15, s0
 8001b32:	4b35      	ldr	r3, [pc, #212]	@ (8001c08 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8001b34:	edc3 7a00 	vstr	s15, [r3]
        chirp_log_sample = SIGNAL_generate(&chirp_log_sg, 0.001f);
 8001b38:	ed9f 0a2f 	vldr	s0, [pc, #188]	@ 8001bf8 <HAL_TIM_PeriodElapsedCallback+0x110>
 8001b3c:	4833      	ldr	r0, [pc, #204]	@ (8001c0c <HAL_TIM_PeriodElapsedCallback+0x124>)
 8001b3e:	f000 fa0f 	bl	8001f60 <SIGNAL_generate>
 8001b42:	eef0 7a40 	vmov.f32	s15, s0
 8001b46:	4b32      	ldr	r3, [pc, #200]	@ (8001c10 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8001b48:	edc3 7a00 	vstr	s15, [r3]
		square_sample = SIGNAL_generate(&square_sg, 0.001f);
 8001b4c:	ed9f 0a2a 	vldr	s0, [pc, #168]	@ 8001bf8 <HAL_TIM_PeriodElapsedCallback+0x110>
 8001b50:	4830      	ldr	r0, [pc, #192]	@ (8001c14 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8001b52:	f000 fa05 	bl	8001f60 <SIGNAL_generate>
 8001b56:	eef0 7a40 	vmov.f32	s15, s0
 8001b5a:	4b2f      	ldr	r3, [pc, #188]	@ (8001c18 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8001b5c:	edc3 7a00 	vstr	s15, [r3]
		ramp_sample = SIGNAL_generate(&ramp_sg, 0.001f);
 8001b60:	ed9f 0a25 	vldr	s0, [pc, #148]	@ 8001bf8 <HAL_TIM_PeriodElapsedCallback+0x110>
 8001b64:	482d      	ldr	r0, [pc, #180]	@ (8001c1c <HAL_TIM_PeriodElapsedCallback+0x134>)
 8001b66:	f000 f9fb 	bl	8001f60 <SIGNAL_generate>
 8001b6a:	eef0 7a40 	vmov.f32	s15, s0
 8001b6e:	4b2c      	ldr	r3, [pc, #176]	@ (8001c20 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8001b70:	edc3 7a00 	vstr	s15, [r3]

		setpoint = sine_sample;
 8001b74:	4b22      	ldr	r3, [pc, #136]	@ (8001c00 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a2a      	ldr	r2, [pc, #168]	@ (8001c24 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8001b7a:	6013      	str	r3, [r2, #0]

        filteredValue = FIR_process(&lowPassFilter, encoder4.radps);
 8001b7c:	4b1d      	ldr	r3, [pc, #116]	@ (8001bf4 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8001b7e:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8001b82:	eeb0 0a67 	vmov.f32	s0, s15
 8001b86:	4828      	ldr	r0, [pc, #160]	@ (8001c28 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8001b88:	f7ff fa8e 	bl	80010a8 <FIR_process>
 8001b8c:	eef0 7a40 	vmov.f32	s15, s0
 8001b90:	4b26      	ldr	r3, [pc, #152]	@ (8001c2c <HAL_TIM_PeriodElapsedCallback+0x144>)
 8001b92:	edc3 7a00 	vstr	s15, [r3]
        cmd_vel = PWM_Satuation(PID_CONTROLLER_Compute(&pid4, setpoint - filteredValue), 65535, -65535);
 8001b96:	4b23      	ldr	r3, [pc, #140]	@ (8001c24 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8001b98:	ed93 7a00 	vldr	s14, [r3]
 8001b9c:	4b23      	ldr	r3, [pc, #140]	@ (8001c2c <HAL_TIM_PeriodElapsedCallback+0x144>)
 8001b9e:	edd3 7a00 	vldr	s15, [r3]
 8001ba2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ba6:	eeb0 0a67 	vmov.f32	s0, s15
 8001baa:	4821      	ldr	r0, [pc, #132]	@ (8001c30 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8001bac:	f7fe ffcb 	bl	8000b46 <PID_CONTROLLER_Compute>
 8001bb0:	eef0 7a40 	vmov.f32	s15, s0
 8001bb4:	491f      	ldr	r1, [pc, #124]	@ (8001c34 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8001bb6:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001bba:	eeb0 0a67 	vmov.f32	s0, s15
 8001bbe:	f7fe ff69 	bl	8000a94 <PWM_Satuation>
 8001bc2:	ee07 0a90 	vmov	s15, r0
 8001bc6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bca:	4b1b      	ldr	r3, [pc, #108]	@ (8001c38 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8001bcc:	edc3 7a00 	vstr	s15, [r3]
        MDXX_set_range(&motor4, 2000, cmd_vel);
 8001bd0:	4b19      	ldr	r3, [pc, #100]	@ (8001c38 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8001bd2:	edd3 7a00 	vldr	s15, [r3]
 8001bd6:	eef0 0a67 	vmov.f32	s1, s15
 8001bda:	ed9f 0a18 	vldr	s0, [pc, #96]	@ 8001c3c <HAL_TIM_PeriodElapsedCallback+0x154>
 8001bde:	4818      	ldr	r0, [pc, #96]	@ (8001c40 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8001be0:	f7ff f868 	bl	8000cb4 <MDXX_set_range>
    }
}
 8001be4:	bf00      	nop
 8001be6:	3708      	adds	r7, #8
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	200001f0 	.word	0x200001f0
 8001bf0:	20000450 	.word	0x20000450
 8001bf4:	2000049c 	.word	0x2000049c
 8001bf8:	3a83126f 	.word	0x3a83126f
 8001bfc:	20000084 	.word	0x20000084
 8001c00:	200001d8 	.word	0x200001d8
 8001c04:	200000c8 	.word	0x200000c8
 8001c08:	200001dc 	.word	0x200001dc
 8001c0c:	2000010c 	.word	0x2000010c
 8001c10:	200001e0 	.word	0x200001e0
 8001c14:	20000150 	.word	0x20000150
 8001c18:	200001e4 	.word	0x200001e4
 8001c1c:	20000194 	.word	0x20000194
 8001c20:	200001e8 	.word	0x200001e8
 8001c24:	20000078 	.word	0x20000078
 8001c28:	20000540 	.word	0x20000540
 8001c2c:	2000007c 	.word	0x2000007c
 8001c30:	20000514 	.word	0x20000514
 8001c34:	ffff0001 	.word	0xffff0001
 8001c38:	20000080 	.word	0x20000080
 8001c3c:	44fa0000 	.word	0x44fa0000
 8001c40:	20000404 	.word	0x20000404

08001c44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c44:	b480      	push	{r7}
 8001c46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c48:	b672      	cpsid	i
}
 8001c4a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001c4c:	bf00      	nop
 8001c4e:	e7fd      	b.n	8001c4c <Error_Handler+0x8>

08001c50 <wrap_phase>:

// CMSIS-specific constants
#define ARM_PI_F32 3.14159265358979323846f

// Internal helper functions
static float32_t wrap_phase(float32_t phase) {
 8001c50:	b480      	push	{r7}
 8001c52:	b085      	sub	sp, #20
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	ed87 0a01 	vstr	s0, [r7, #4]
    phase = fabsf(phase);
 8001c5a:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c5e:	eef0 7ae7 	vabs.f32	s15, s15
 8001c62:	edc7 7a01 	vstr	s15, [r7, #4]
    float32_t two_pi = 2.0f * ARM_PI_F32;
 8001c66:	4b17      	ldr	r3, [pc, #92]	@ (8001cc4 <wrap_phase+0x74>)
 8001c68:	60fb      	str	r3, [r7, #12]
    while (phase > two_pi) {
 8001c6a:	e007      	b.n	8001c7c <wrap_phase+0x2c>
        phase -= two_pi;
 8001c6c:	ed97 7a01 	vldr	s14, [r7, #4]
 8001c70:	edd7 7a03 	vldr	s15, [r7, #12]
 8001c74:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c78:	edc7 7a01 	vstr	s15, [r7, #4]
    while (phase > two_pi) {
 8001c7c:	ed97 7a01 	vldr	s14, [r7, #4]
 8001c80:	edd7 7a03 	vldr	s15, [r7, #12]
 8001c84:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c8c:	dcee      	bgt.n	8001c6c <wrap_phase+0x1c>
    }
    while (phase < 0.0f) {
 8001c8e:	e007      	b.n	8001ca0 <wrap_phase+0x50>
        phase += two_pi;
 8001c90:	ed97 7a01 	vldr	s14, [r7, #4]
 8001c94:	edd7 7a03 	vldr	s15, [r7, #12]
 8001c98:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c9c:	edc7 7a01 	vstr	s15, [r7, #4]
    while (phase < 0.0f) {
 8001ca0:	edd7 7a01 	vldr	s15, [r7, #4]
 8001ca4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001ca8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cac:	d4f0      	bmi.n	8001c90 <wrap_phase+0x40>
    }
    return phase;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	ee07 3a90 	vmov	s15, r3
}
 8001cb4:	eeb0 0a67 	vmov.f32	s0, s15
 8001cb8:	3714      	adds	r7, #20
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr
 8001cc2:	bf00      	nop
 8001cc4:	40c90fdb 	.word	0x40c90fdb

08001cc8 <limit_setpoint>:

// Limit output to specified setpoint range
static float32_t limit_setpoint(float32_t value, float32_t min_setpoint, float32_t max_setpoint) {
 8001cc8:	b480      	push	{r7}
 8001cca:	b085      	sub	sp, #20
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	ed87 0a03 	vstr	s0, [r7, #12]
 8001cd2:	edc7 0a02 	vstr	s1, [r7, #8]
 8001cd6:	ed87 1a01 	vstr	s2, [r7, #4]
    if (value < min_setpoint) return min_setpoint;
 8001cda:	ed97 7a03 	vldr	s14, [r7, #12]
 8001cde:	edd7 7a02 	vldr	s15, [r7, #8]
 8001ce2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ce6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cea:	d501      	bpl.n	8001cf0 <limit_setpoint+0x28>
 8001cec:	68bb      	ldr	r3, [r7, #8]
 8001cee:	e00b      	b.n	8001d08 <limit_setpoint+0x40>
    if (value > max_setpoint) return max_setpoint;
 8001cf0:	ed97 7a03 	vldr	s14, [r7, #12]
 8001cf4:	edd7 7a01 	vldr	s15, [r7, #4]
 8001cf8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001cfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d00:	dd01      	ble.n	8001d06 <limit_setpoint+0x3e>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	e000      	b.n	8001d08 <limit_setpoint+0x40>
    return value;
 8001d06:	68fb      	ldr	r3, [r7, #12]
}
 8001d08:	ee07 3a90 	vmov	s15, r3
 8001d0c:	eeb0 0a67 	vmov.f32	s0, s15
 8001d10:	3714      	adds	r7, #20
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr
	...

08001d1c <SIGNAL_init>:

// Initialization function
void SIGNAL_init(SignalGenerator* sg, SignalType type) {
 8001d1c:	b480      	push	{r7}
 8001d1e:	b083      	sub	sp, #12
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
 8001d24:	460b      	mov	r3, r1
 8001d26:	70fb      	strb	r3, [r7, #3]
    // Reset all parameters
    sg->type = type;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	78fa      	ldrb	r2, [r7, #3]
 8001d2c:	701a      	strb	r2, [r3, #0]
    sg->amplitude = 1.0f;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001d34:	605a      	str	r2, [r3, #4]
    sg->frequency = 1.0f;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001d3c:	609a      	str	r2, [r3, #8]
    sg->phase = 0.0f;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	f04f 0200 	mov.w	r2, #0
 8001d44:	60da      	str	r2, [r3, #12]
    sg->offset = 0.0f;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	f04f 0200 	mov.w	r2, #0
 8001d4c:	611a      	str	r2, [r3, #16]
    sg->current_phase = 0.0f;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	f04f 0200 	mov.w	r2, #0
 8001d54:	635a      	str	r2, [r3, #52]	@ 0x34
    sg->time_elapsed = 0.0f;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	f04f 0200 	mov.w	r2, #0
 8001d5c:	639a      	str	r2, [r3, #56]	@ 0x38
    sg->min_setpoint = -1.0f;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	4a1b      	ldr	r2, [pc, #108]	@ (8001dd0 <SIGNAL_init+0xb4>)
 8001d62:	63da      	str	r2, [r3, #60]	@ 0x3c
    sg->max_setpoint = 1.0f;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001d6a:	641a      	str	r2, [r3, #64]	@ 0x40

    // Type-specific initializations
    switch (type) {
 8001d6c:	78fb      	ldrb	r3, [r7, #3]
 8001d6e:	2b03      	cmp	r3, #3
 8001d70:	d828      	bhi.n	8001dc4 <SIGNAL_init+0xa8>
 8001d72:	a201      	add	r2, pc, #4	@ (adr r2, 8001d78 <SIGNAL_init+0x5c>)
 8001d74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d78:	08001dc3 	.word	0x08001dc3
 8001d7c:	08001d89 	.word	0x08001d89
 8001d80:	08001da7 	.word	0x08001da7
 8001d84:	08001db1 	.word	0x08001db1
        case SIGNAL_SINE:
            break;
        case SIGNAL_CHIRP:
            sg->chirp_type = CHIRP_LINEAR;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	751a      	strb	r2, [r3, #20]
            sg->f_start = 1.0f;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001d94:	619a      	str	r2, [r3, #24]
            sg->f_end = 10.0f;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	4a0e      	ldr	r2, [pc, #56]	@ (8001dd4 <SIGNAL_init+0xb8>)
 8001d9a:	61da      	str	r2, [r3, #28]
            sg->duration = 1.0f;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001da2:	621a      	str	r2, [r3, #32]
            break;
 8001da4:	e00e      	b.n	8001dc4 <SIGNAL_init+0xa8>
        case SIGNAL_SQUARE:
            sg->duty_cycle = 0.5f;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 8001dac:	629a      	str	r2, [r3, #40]	@ 0x28
            break;
 8001dae:	e009      	b.n	8001dc4 <SIGNAL_init+0xa8>
        case SIGNAL_RAMP:
            sg->ramp_start = 0.0f;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	f04f 0200 	mov.w	r2, #0
 8001db6:	62da      	str	r2, [r3, #44]	@ 0x2c
            sg->ramp_end = 1.0f;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001dbe:	631a      	str	r2, [r3, #48]	@ 0x30
            break;
 8001dc0:	e000      	b.n	8001dc4 <SIGNAL_init+0xa8>
            break;
 8001dc2:	bf00      	nop
    }
}
 8001dc4:	bf00      	nop
 8001dc6:	370c      	adds	r7, #12
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dce:	4770      	bx	lr
 8001dd0:	bf800000 	.word	0xbf800000
 8001dd4:	41200000 	.word	0x41200000

08001dd8 <SIGNAL_config_sine>:
                        float32_t amplitude,
                        float32_t frequency,
                        float32_t phase,
                        float32_t offset,
                        float32_t min_setpoint,
                        float32_t max_setpoint) {
 8001dd8:	b480      	push	{r7}
 8001dda:	b089      	sub	sp, #36	@ 0x24
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	61f8      	str	r0, [r7, #28]
 8001de0:	ed87 0a06 	vstr	s0, [r7, #24]
 8001de4:	edc7 0a05 	vstr	s1, [r7, #20]
 8001de8:	ed87 1a04 	vstr	s2, [r7, #16]
 8001dec:	edc7 1a03 	vstr	s3, [r7, #12]
 8001df0:	ed87 2a02 	vstr	s4, [r7, #8]
 8001df4:	edc7 2a01 	vstr	s5, [r7, #4]
    sg->type = SIGNAL_SINE;
 8001df8:	69fb      	ldr	r3, [r7, #28]
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	701a      	strb	r2, [r3, #0]
    sg->amplitude = amplitude;
 8001dfe:	69fb      	ldr	r3, [r7, #28]
 8001e00:	69ba      	ldr	r2, [r7, #24]
 8001e02:	605a      	str	r2, [r3, #4]
    sg->frequency = frequency;
 8001e04:	69fb      	ldr	r3, [r7, #28]
 8001e06:	697a      	ldr	r2, [r7, #20]
 8001e08:	609a      	str	r2, [r3, #8]
    sg->phase = phase;
 8001e0a:	69fb      	ldr	r3, [r7, #28]
 8001e0c:	693a      	ldr	r2, [r7, #16]
 8001e0e:	60da      	str	r2, [r3, #12]
    sg->offset = offset;
 8001e10:	69fb      	ldr	r3, [r7, #28]
 8001e12:	68fa      	ldr	r2, [r7, #12]
 8001e14:	611a      	str	r2, [r3, #16]
    sg->min_setpoint = min_setpoint;
 8001e16:	69fb      	ldr	r3, [r7, #28]
 8001e18:	68ba      	ldr	r2, [r7, #8]
 8001e1a:	63da      	str	r2, [r3, #60]	@ 0x3c
    sg->max_setpoint = max_setpoint;
 8001e1c:	69fb      	ldr	r3, [r7, #28]
 8001e1e:	687a      	ldr	r2, [r7, #4]
 8001e20:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001e22:	bf00      	nop
 8001e24:	3724      	adds	r7, #36	@ 0x24
 8001e26:	46bd      	mov	sp, r7
 8001e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2c:	4770      	bx	lr

08001e2e <SIGNAL_config_chirp>:
                         float32_t f_start,
                         float32_t f_end,
                         float32_t duration,
                         ChirpType chirp_type,
                         float32_t min_setpoint,
                         float32_t max_setpoint) {
 8001e2e:	b480      	push	{r7}
 8001e30:	b089      	sub	sp, #36	@ 0x24
 8001e32:	af00      	add	r7, sp, #0
 8001e34:	61f8      	str	r0, [r7, #28]
 8001e36:	ed87 0a06 	vstr	s0, [r7, #24]
 8001e3a:	edc7 0a05 	vstr	s1, [r7, #20]
 8001e3e:	ed87 1a04 	vstr	s2, [r7, #16]
 8001e42:	edc7 1a03 	vstr	s3, [r7, #12]
 8001e46:	460b      	mov	r3, r1
 8001e48:	ed87 2a01 	vstr	s4, [r7, #4]
 8001e4c:	edc7 2a00 	vstr	s5, [r7]
 8001e50:	72fb      	strb	r3, [r7, #11]
    sg->type = SIGNAL_CHIRP;
 8001e52:	69fb      	ldr	r3, [r7, #28]
 8001e54:	2201      	movs	r2, #1
 8001e56:	701a      	strb	r2, [r3, #0]
    sg->amplitude = amplitude;
 8001e58:	69fb      	ldr	r3, [r7, #28]
 8001e5a:	69ba      	ldr	r2, [r7, #24]
 8001e5c:	605a      	str	r2, [r3, #4]
    sg->f_start = f_start;
 8001e5e:	69fb      	ldr	r3, [r7, #28]
 8001e60:	697a      	ldr	r2, [r7, #20]
 8001e62:	619a      	str	r2, [r3, #24]
    sg->f_end = f_end;
 8001e64:	69fb      	ldr	r3, [r7, #28]
 8001e66:	693a      	ldr	r2, [r7, #16]
 8001e68:	61da      	str	r2, [r3, #28]
    sg->duration = duration;
 8001e6a:	69fb      	ldr	r3, [r7, #28]
 8001e6c:	68fa      	ldr	r2, [r7, #12]
 8001e6e:	621a      	str	r2, [r3, #32]
    sg->chirp_type = chirp_type;
 8001e70:	69fb      	ldr	r3, [r7, #28]
 8001e72:	7afa      	ldrb	r2, [r7, #11]
 8001e74:	751a      	strb	r2, [r3, #20]
    sg->t = 0.0f;
 8001e76:	69fb      	ldr	r3, [r7, #28]
 8001e78:	f04f 0200 	mov.w	r2, #0
 8001e7c:	625a      	str	r2, [r3, #36]	@ 0x24
    sg->min_setpoint = min_setpoint;
 8001e7e:	69fb      	ldr	r3, [r7, #28]
 8001e80:	687a      	ldr	r2, [r7, #4]
 8001e82:	63da      	str	r2, [r3, #60]	@ 0x3c
    sg->max_setpoint = max_setpoint;
 8001e84:	69fb      	ldr	r3, [r7, #28]
 8001e86:	683a      	ldr	r2, [r7, #0]
 8001e88:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001e8a:	bf00      	nop
 8001e8c:	3724      	adds	r7, #36	@ 0x24
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e94:	4770      	bx	lr

08001e96 <SIGNAL_config_square>:
                          float32_t frequency,
                          float32_t duty_cycle,
                          float32_t phase,
                          float32_t offset,
                          float32_t min_setpoint,
                          float32_t max_setpoint) {
 8001e96:	b480      	push	{r7}
 8001e98:	b089      	sub	sp, #36	@ 0x24
 8001e9a:	af00      	add	r7, sp, #0
 8001e9c:	61f8      	str	r0, [r7, #28]
 8001e9e:	ed87 0a06 	vstr	s0, [r7, #24]
 8001ea2:	edc7 0a05 	vstr	s1, [r7, #20]
 8001ea6:	ed87 1a04 	vstr	s2, [r7, #16]
 8001eaa:	edc7 1a03 	vstr	s3, [r7, #12]
 8001eae:	ed87 2a02 	vstr	s4, [r7, #8]
 8001eb2:	edc7 2a01 	vstr	s5, [r7, #4]
 8001eb6:	ed87 3a00 	vstr	s6, [r7]
    sg->type = SIGNAL_SQUARE;
 8001eba:	69fb      	ldr	r3, [r7, #28]
 8001ebc:	2202      	movs	r2, #2
 8001ebe:	701a      	strb	r2, [r3, #0]
    sg->amplitude = amplitude;
 8001ec0:	69fb      	ldr	r3, [r7, #28]
 8001ec2:	69ba      	ldr	r2, [r7, #24]
 8001ec4:	605a      	str	r2, [r3, #4]
    sg->frequency = frequency;
 8001ec6:	69fb      	ldr	r3, [r7, #28]
 8001ec8:	697a      	ldr	r2, [r7, #20]
 8001eca:	609a      	str	r2, [r3, #8]
    sg->duty_cycle = duty_cycle;
 8001ecc:	69fb      	ldr	r3, [r7, #28]
 8001ece:	693a      	ldr	r2, [r7, #16]
 8001ed0:	629a      	str	r2, [r3, #40]	@ 0x28
    sg->phase = phase;
 8001ed2:	69fb      	ldr	r3, [r7, #28]
 8001ed4:	68fa      	ldr	r2, [r7, #12]
 8001ed6:	60da      	str	r2, [r3, #12]
    sg->offset = offset;
 8001ed8:	69fb      	ldr	r3, [r7, #28]
 8001eda:	68ba      	ldr	r2, [r7, #8]
 8001edc:	611a      	str	r2, [r3, #16]
    sg->min_setpoint = min_setpoint;
 8001ede:	69fb      	ldr	r3, [r7, #28]
 8001ee0:	687a      	ldr	r2, [r7, #4]
 8001ee2:	63da      	str	r2, [r3, #60]	@ 0x3c
    sg->max_setpoint = max_setpoint;
 8001ee4:	69fb      	ldr	r3, [r7, #28]
 8001ee6:	683a      	ldr	r2, [r7, #0]
 8001ee8:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001eea:	bf00      	nop
 8001eec:	3724      	adds	r7, #36	@ 0x24
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef4:	4770      	bx	lr

08001ef6 <SIGNAL_config_ramp>:
                        float32_t ramp_start,
                        float32_t ramp_end,
                        float32_t phase,
                        float32_t offset,
                        float32_t min_setpoint,
                        float32_t max_setpoint) {
 8001ef6:	b480      	push	{r7}
 8001ef8:	b08b      	sub	sp, #44	@ 0x2c
 8001efa:	af00      	add	r7, sp, #0
 8001efc:	6278      	str	r0, [r7, #36]	@ 0x24
 8001efe:	ed87 0a08 	vstr	s0, [r7, #32]
 8001f02:	edc7 0a07 	vstr	s1, [r7, #28]
 8001f06:	ed87 1a06 	vstr	s2, [r7, #24]
 8001f0a:	edc7 1a05 	vstr	s3, [r7, #20]
 8001f0e:	ed87 2a04 	vstr	s4, [r7, #16]
 8001f12:	edc7 2a03 	vstr	s5, [r7, #12]
 8001f16:	ed87 3a02 	vstr	s6, [r7, #8]
 8001f1a:	edc7 3a01 	vstr	s7, [r7, #4]
    sg->type = SIGNAL_RAMP;
 8001f1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f20:	2203      	movs	r2, #3
 8001f22:	701a      	strb	r2, [r3, #0]
    sg->amplitude = amplitude;
 8001f24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f26:	6a3a      	ldr	r2, [r7, #32]
 8001f28:	605a      	str	r2, [r3, #4]
    sg->frequency = frequency;
 8001f2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f2c:	69fa      	ldr	r2, [r7, #28]
 8001f2e:	609a      	str	r2, [r3, #8]
    sg->ramp_start = ramp_start;
 8001f30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f32:	69ba      	ldr	r2, [r7, #24]
 8001f34:	62da      	str	r2, [r3, #44]	@ 0x2c
    sg->ramp_end = ramp_end;
 8001f36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f38:	697a      	ldr	r2, [r7, #20]
 8001f3a:	631a      	str	r2, [r3, #48]	@ 0x30
    sg->phase = phase;
 8001f3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f3e:	693a      	ldr	r2, [r7, #16]
 8001f40:	60da      	str	r2, [r3, #12]
    sg->offset = offset;
 8001f42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f44:	68fa      	ldr	r2, [r7, #12]
 8001f46:	611a      	str	r2, [r3, #16]
    sg->min_setpoint = min_setpoint;
 8001f48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f4a:	68ba      	ldr	r2, [r7, #8]
 8001f4c:	63da      	str	r2, [r3, #60]	@ 0x3c
    sg->max_setpoint = max_setpoint;
 8001f4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f50:	687a      	ldr	r2, [r7, #4]
 8001f52:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001f54:	bf00      	nop
 8001f56:	372c      	adds	r7, #44	@ 0x2c
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr

08001f60 <SIGNAL_generate>:

// Signal generation function
float32_t SIGNAL_generate(SignalGenerator* sg, float32_t sample_time) {
 8001f60:	b580      	push	{r7, lr}
 8001f62:	ed2d 8b02 	vpush	{d8}
 8001f66:	b08c      	sub	sp, #48	@ 0x30
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
 8001f6c:	ed87 0a00 	vstr	s0, [r7]
    float32_t output = 0.0f;
 8001f70:	f04f 0300 	mov.w	r3, #0
 8001f74:	62fb      	str	r3, [r7, #44]	@ 0x2c
    float32_t two_pi = 2.0f * ARM_PI_F32;
 8001f76:	4bb2      	ldr	r3, [pc, #712]	@ (8002240 <SIGNAL_generate+0x2e0>)
 8001f78:	627b      	str	r3, [r7, #36]	@ 0x24

    // Update phase and time
    sg->current_phase = wrap_phase(sg->current_phase + two_pi * sg->frequency * sample_time);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	edd3 6a02 	vldr	s13, [r3, #8]
 8001f86:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001f8a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001f8e:	edd7 7a00 	vldr	s15, [r7]
 8001f92:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f96:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f9a:	eeb0 0a67 	vmov.f32	s0, s15
 8001f9e:	f7ff fe57 	bl	8001c50 <wrap_phase>
 8001fa2:	eef0 7a40 	vmov.f32	s15, s0
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
    sg->time_elapsed += sample_time;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 8001fb2:	edd7 7a00 	vldr	s15, [r7]
 8001fb6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38

    switch (sg->type) {
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	781b      	ldrb	r3, [r3, #0]
 8001fc4:	2b03      	cmp	r3, #3
 8001fc6:	f200 8123 	bhi.w	8002210 <SIGNAL_generate+0x2b0>
 8001fca:	a201      	add	r2, pc, #4	@ (adr r2, 8001fd0 <SIGNAL_generate+0x70>)
 8001fcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fd0:	08001fe1 	.word	0x08001fe1
 8001fd4:	0800201f 	.word	0x0800201f
 8001fd8:	08002139 	.word	0x08002139
 8001fdc:	080021a5 	.word	0x080021a5
        case SIGNAL_SINE: {
            // Sine wave generation
            float32_t phase_input = sg->current_phase + sg->phase;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	edd3 7a03 	vldr	s15, [r3, #12]
 8001fec:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ff0:	edc7 7a02 	vstr	s15, [r7, #8]
            output = arm_sin_f32(phase_input);
 8001ff4:	ed97 0a02 	vldr	s0, [r7, #8]
 8001ff8:	f003 fccc 	bl	8005994 <arm_sin_f32>
 8001ffc:	ed87 0a0b 	vstr	s0, [r7, #44]	@ 0x2c
            output = sg->amplitude * output + sg->offset;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	ed93 7a01 	vldr	s14, [r3, #4]
 8002006:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800200a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	edd3 7a04 	vldr	s15, [r3, #16]
 8002014:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002018:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
            break;
 800201c:	e0f8      	b.n	8002210 <SIGNAL_generate+0x2b0>
        }

        case SIGNAL_CHIRP: {
            // Chirp signal generation
            float32_t inst_freq;
            float32_t progress = sg->time_elapsed / sg->duration;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	edd3 6a0e 	vldr	s13, [r3, #56]	@ 0x38
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	ed93 7a08 	vldr	s14, [r3, #32]
 800202a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800202e:	edc7 7a04 	vstr	s15, [r7, #16]

            // Calculate instantaneous frequency based on chirp type
            switch (sg->chirp_type) {
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	7d1b      	ldrb	r3, [r3, #20]
 8002036:	2b02      	cmp	r3, #2
 8002038:	d032      	beq.n	80020a0 <SIGNAL_generate+0x140>
 800203a:	2b02      	cmp	r3, #2
 800203c:	dc48      	bgt.n	80020d0 <SIGNAL_generate+0x170>
 800203e:	2b00      	cmp	r3, #0
 8002040:	d002      	beq.n	8002048 <SIGNAL_generate+0xe8>
 8002042:	2b01      	cmp	r3, #1
 8002044:	d014      	beq.n	8002070 <SIGNAL_generate+0x110>
 8002046:	e043      	b.n	80020d0 <SIGNAL_generate+0x170>
                case CHIRP_LINEAR:
                    // Linear frequency sweep
                    inst_freq = sg->f_start + (sg->f_end - sg->f_start) * progress;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	ed93 7a06 	vldr	s14, [r3, #24]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	edd3 6a07 	vldr	s13, [r3, #28]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	edd3 7a06 	vldr	s15, [r3, #24]
 800205a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800205e:	edd7 7a04 	vldr	s15, [r7, #16]
 8002062:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002066:	ee77 7a27 	vadd.f32	s15, s14, s15
 800206a:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
                    break;
 800206e:	e02f      	b.n	80020d0 <SIGNAL_generate+0x170>
                case CHIRP_LOGARITHMIC:
                    // Logarithmic frequency sweep
                    inst_freq = sg->f_start * powf(sg->f_end / sg->f_start, progress);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	ed93 8a06 	vldr	s16, [r3, #24]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	ed93 7a07 	vldr	s14, [r3, #28]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	edd3 7a06 	vldr	s15, [r3, #24]
 8002082:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002086:	edd7 0a04 	vldr	s1, [r7, #16]
 800208a:	eeb0 0a66 	vmov.f32	s0, s13
 800208e:	f003 fe1d 	bl	8005ccc <powf>
 8002092:	eef0 7a40 	vmov.f32	s15, s0
 8002096:	ee68 7a27 	vmul.f32	s15, s16, s15
 800209a:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
                    break;
 800209e:	e017      	b.n	80020d0 <SIGNAL_generate+0x170>
                case CHIRP_QUADRATIC:
                    // Quadratic frequency sweep
                    inst_freq = sg->f_start + (sg->f_end - sg->f_start) * progress * progress;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	ed93 7a06 	vldr	s14, [r3, #24]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	edd3 6a07 	vldr	s13, [r3, #28]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	edd3 7a06 	vldr	s15, [r3, #24]
 80020b2:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80020b6:	edd7 7a04 	vldr	s15, [r7, #16]
 80020ba:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80020be:	edd7 7a04 	vldr	s15, [r7, #16]
 80020c2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020ca:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
                    break;
 80020ce:	bf00      	nop
            }

            // Integrate instantaneous frequency
            float32_t chirp_phase = two_pi * inst_freq * sg->time_elapsed;
 80020d0:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80020d4:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80020d8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 80020e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020e6:	edc7 7a03 	vstr	s15, [r7, #12]
            output = arm_sin_f32(chirp_phase + sg->phase);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	ed93 7a03 	vldr	s14, [r3, #12]
 80020f0:	edd7 7a03 	vldr	s15, [r7, #12]
 80020f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020f8:	eeb0 0a67 	vmov.f32	s0, s15
 80020fc:	f003 fc4a 	bl	8005994 <arm_sin_f32>
 8002100:	ed87 0a0b 	vstr	s0, [r7, #44]	@ 0x2c
            output *= sg->amplitude;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	edd3 7a01 	vldr	s15, [r3, #4]
 800210a:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800210e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002112:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

            // Reset if duration exceeded
            if (sg->time_elapsed >= sg->duration) {
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	edd3 7a08 	vldr	s15, [r3, #32]
 8002122:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002126:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800212a:	da00      	bge.n	800212e <SIGNAL_generate+0x1ce>
                sg->time_elapsed = 0.0f;
            }
            break;
 800212c:	e070      	b.n	8002210 <SIGNAL_generate+0x2b0>
                sg->time_elapsed = 0.0f;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	f04f 0200 	mov.w	r2, #0
 8002134:	639a      	str	r2, [r3, #56]	@ 0x38
            break;
 8002136:	e06b      	b.n	8002210 <SIGNAL_generate+0x2b0>
        }

        case SIGNAL_SQUARE: {
            // Square wave generation
            float32_t phase_normalized = fmodf(sg->current_phase + sg->phase, two_pi);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	edd3 7a03 	vldr	s15, [r3, #12]
 8002144:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002148:	edd7 0a09 	vldr	s1, [r7, #36]	@ 0x24
 800214c:	eeb0 0a67 	vmov.f32	s0, s15
 8002150:	f003 fd9c 	bl	8005c8c <fmodf>
 8002154:	ed87 0a06 	vstr	s0, [r7, #24]

            float32_t threshold = two_pi * sg->duty_cycle;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800215e:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8002162:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002166:	edc7 7a05 	vstr	s15, [r7, #20]
            output = (phase_normalized < threshold) ?
                     sg->amplitude + sg->offset :
 800216a:	ed97 7a06 	vldr	s14, [r7, #24]
 800216e:	edd7 7a05 	vldr	s15, [r7, #20]
 8002172:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002176:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800217a:	d508      	bpl.n	800218e <SIGNAL_generate+0x22e>
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	ed93 7a01 	vldr	s14, [r3, #4]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	edd3 7a04 	vldr	s15, [r3, #16]
 8002188:	ee77 7a27 	vadd.f32	s15, s14, s15
 800218c:	e007      	b.n	800219e <SIGNAL_generate+0x23e>
                     -sg->amplitude + sg->offset;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	ed93 7a04 	vldr	s14, [r3, #16]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	edd3 7a01 	vldr	s15, [r3, #4]
                     sg->amplitude + sg->offset :
 800219a:	ee77 7a67 	vsub.f32	s15, s14, s15
            output = (phase_normalized < threshold) ?
 800219e:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
            break;
 80021a2:	e035      	b.n	8002210 <SIGNAL_generate+0x2b0>
        }

        case SIGNAL_RAMP: {
            // Ramp signal generation
            float32_t phase_normalized = fmodf(sg->current_phase + sg->phase, two_pi);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	edd3 7a03 	vldr	s15, [r3, #12]
 80021b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021b4:	edd7 0a09 	vldr	s1, [r7, #36]	@ 0x24
 80021b8:	eeb0 0a67 	vmov.f32	s0, s15
 80021bc:	f003 fd66 	bl	8005c8c <fmodf>
 80021c0:	ed87 0a08 	vstr	s0, [r7, #32]
            float32_t ramp_ratio = phase_normalized / two_pi;
 80021c4:	edd7 6a08 	vldr	s13, [r7, #32]
 80021c8:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80021cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80021d0:	edc7 7a07 	vstr	s15, [r7, #28]

            output = sg->ramp_start +
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
                     (sg->ramp_end - sg->ramp_start) * ramp_ratio * sg->amplitude +
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 80021e6:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80021ea:	edd7 7a07 	vldr	s15, [r7, #28]
 80021ee:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	edd3 7a01 	vldr	s15, [r3, #4]
 80021f8:	ee66 7aa7 	vmul.f32	s15, s13, s15
            output = sg->ramp_start +
 80021fc:	ee37 7a27 	vadd.f32	s14, s14, s15
                     sg->offset;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	edd3 7a04 	vldr	s15, [r3, #16]
            output = sg->ramp_start +
 8002206:	ee77 7a27 	vadd.f32	s15, s14, s15
 800220a:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
            break;
 800220e:	bf00      	nop
        }
    }

    // Limit output to specified setpoint range
    return limit_setpoint(output, sg->min_setpoint, sg->max_setpoint);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 800221c:	eeb0 1a47 	vmov.f32	s2, s14
 8002220:	eef0 0a67 	vmov.f32	s1, s15
 8002224:	ed97 0a0b 	vldr	s0, [r7, #44]	@ 0x2c
 8002228:	f7ff fd4e 	bl	8001cc8 <limit_setpoint>
 800222c:	eef0 7a40 	vmov.f32	s15, s0
}
 8002230:	eeb0 0a67 	vmov.f32	s0, s15
 8002234:	3730      	adds	r7, #48	@ 0x30
 8002236:	46bd      	mov	sp, r7
 8002238:	ecbd 8b02 	vpop	{d8}
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop
 8002240:	40c90fdb 	.word	0x40c90fdb

08002244 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b082      	sub	sp, #8
 8002248:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800224a:	4b0f      	ldr	r3, [pc, #60]	@ (8002288 <HAL_MspInit+0x44>)
 800224c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800224e:	4a0e      	ldr	r2, [pc, #56]	@ (8002288 <HAL_MspInit+0x44>)
 8002250:	f043 0301 	orr.w	r3, r3, #1
 8002254:	6613      	str	r3, [r2, #96]	@ 0x60
 8002256:	4b0c      	ldr	r3, [pc, #48]	@ (8002288 <HAL_MspInit+0x44>)
 8002258:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800225a:	f003 0301 	and.w	r3, r3, #1
 800225e:	607b      	str	r3, [r7, #4]
 8002260:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002262:	4b09      	ldr	r3, [pc, #36]	@ (8002288 <HAL_MspInit+0x44>)
 8002264:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002266:	4a08      	ldr	r2, [pc, #32]	@ (8002288 <HAL_MspInit+0x44>)
 8002268:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800226c:	6593      	str	r3, [r2, #88]	@ 0x58
 800226e:	4b06      	ldr	r3, [pc, #24]	@ (8002288 <HAL_MspInit+0x44>)
 8002270:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002272:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002276:	603b      	str	r3, [r7, #0]
 8002278:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800227a:	f001 f8f5 	bl	8003468 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800227e:	bf00      	nop
 8002280:	3708      	adds	r7, #8
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}
 8002286:	bf00      	nop
 8002288:	40021000 	.word	0x40021000

0800228c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800228c:	b480      	push	{r7}
 800228e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002290:	bf00      	nop
 8002292:	e7fd      	b.n	8002290 <NMI_Handler+0x4>

08002294 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002294:	b480      	push	{r7}
 8002296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002298:	bf00      	nop
 800229a:	e7fd      	b.n	8002298 <HardFault_Handler+0x4>

0800229c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800229c:	b480      	push	{r7}
 800229e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022a0:	bf00      	nop
 80022a2:	e7fd      	b.n	80022a0 <MemManage_Handler+0x4>

080022a4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022a4:	b480      	push	{r7}
 80022a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022a8:	bf00      	nop
 80022aa:	e7fd      	b.n	80022a8 <BusFault_Handler+0x4>

080022ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022ac:	b480      	push	{r7}
 80022ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022b0:	bf00      	nop
 80022b2:	e7fd      	b.n	80022b0 <UsageFault_Handler+0x4>

080022b4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80022b4:	b480      	push	{r7}
 80022b6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80022b8:	bf00      	nop
 80022ba:	46bd      	mov	sp, r7
 80022bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c0:	4770      	bx	lr

080022c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022c2:	b480      	push	{r7}
 80022c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022c6:	bf00      	nop
 80022c8:	46bd      	mov	sp, r7
 80022ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ce:	4770      	bx	lr

080022d0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80022d0:	b480      	push	{r7}
 80022d2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80022d4:	bf00      	nop
 80022d6:	46bd      	mov	sp, r7
 80022d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022dc:	4770      	bx	lr

080022de <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80022de:	b580      	push	{r7, lr}
 80022e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80022e2:	f000 fd31 	bl	8002d48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80022e6:	bf00      	nop
 80022e8:	bd80      	pop	{r7, pc}
	...

080022ec <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80022f0:	4802      	ldr	r0, [pc, #8]	@ (80022fc <TIM2_IRQHandler+0x10>)
 80022f2:	f002 f99d 	bl	8004630 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80022f6:	bf00      	nop
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop
 80022fc:	200001f0 	.word	0x200001f0

08002300 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8002304:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002308:	f000 ffe6 	bl	80032d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800230c:	bf00      	nop
 800230e:	bd80      	pop	{r7, pc}

08002310 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b086      	sub	sp, #24
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002318:	4a14      	ldr	r2, [pc, #80]	@ (800236c <_sbrk+0x5c>)
 800231a:	4b15      	ldr	r3, [pc, #84]	@ (8002370 <_sbrk+0x60>)
 800231c:	1ad3      	subs	r3, r2, r3
 800231e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002320:	697b      	ldr	r3, [r7, #20]
 8002322:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002324:	4b13      	ldr	r3, [pc, #76]	@ (8002374 <_sbrk+0x64>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d102      	bne.n	8002332 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800232c:	4b11      	ldr	r3, [pc, #68]	@ (8002374 <_sbrk+0x64>)
 800232e:	4a12      	ldr	r2, [pc, #72]	@ (8002378 <_sbrk+0x68>)
 8002330:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002332:	4b10      	ldr	r3, [pc, #64]	@ (8002374 <_sbrk+0x64>)
 8002334:	681a      	ldr	r2, [r3, #0]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	4413      	add	r3, r2
 800233a:	693a      	ldr	r2, [r7, #16]
 800233c:	429a      	cmp	r2, r3
 800233e:	d207      	bcs.n	8002350 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002340:	f003 fc78 	bl	8005c34 <__errno>
 8002344:	4603      	mov	r3, r0
 8002346:	220c      	movs	r2, #12
 8002348:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800234a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800234e:	e009      	b.n	8002364 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002350:	4b08      	ldr	r3, [pc, #32]	@ (8002374 <_sbrk+0x64>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002356:	4b07      	ldr	r3, [pc, #28]	@ (8002374 <_sbrk+0x64>)
 8002358:	681a      	ldr	r2, [r3, #0]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	4413      	add	r3, r2
 800235e:	4a05      	ldr	r2, [pc, #20]	@ (8002374 <_sbrk+0x64>)
 8002360:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002362:	68fb      	ldr	r3, [r7, #12]
}
 8002364:	4618      	mov	r0, r3
 8002366:	3718      	adds	r7, #24
 8002368:	46bd      	mov	sp, r7
 800236a:	bd80      	pop	{r7, pc}
 800236c:	20020000 	.word	0x20020000
 8002370:	00000400 	.word	0x00000400
 8002374:	200001ec 	.word	0x200001ec
 8002378:	20000698 	.word	0x20000698

0800237c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800237c:	b480      	push	{r7}
 800237e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002380:	4b06      	ldr	r3, [pc, #24]	@ (800239c <SystemInit+0x20>)
 8002382:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002386:	4a05      	ldr	r2, [pc, #20]	@ (800239c <SystemInit+0x20>)
 8002388:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800238c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002390:	bf00      	nop
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr
 800239a:	bf00      	nop
 800239c:	e000ed00 	.word	0xe000ed00

080023a0 <MX_TIM2_Init>:
TIM_HandleTypeDef htim8;
TIM_HandleTypeDef htim20;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b088      	sub	sp, #32
 80023a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80023a6:	f107 0310 	add.w	r3, r7, #16
 80023aa:	2200      	movs	r2, #0
 80023ac:	601a      	str	r2, [r3, #0]
 80023ae:	605a      	str	r2, [r3, #4]
 80023b0:	609a      	str	r2, [r3, #8]
 80023b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023b4:	1d3b      	adds	r3, r7, #4
 80023b6:	2200      	movs	r2, #0
 80023b8:	601a      	str	r2, [r3, #0]
 80023ba:	605a      	str	r2, [r3, #4]
 80023bc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80023be:	4b1e      	ldr	r3, [pc, #120]	@ (8002438 <MX_TIM2_Init+0x98>)
 80023c0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80023c4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 169;
 80023c6:	4b1c      	ldr	r3, [pc, #112]	@ (8002438 <MX_TIM2_Init+0x98>)
 80023c8:	22a9      	movs	r2, #169	@ 0xa9
 80023ca:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023cc:	4b1a      	ldr	r3, [pc, #104]	@ (8002438 <MX_TIM2_Init+0x98>)
 80023ce:	2200      	movs	r2, #0
 80023d0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 80023d2:	4b19      	ldr	r3, [pc, #100]	@ (8002438 <MX_TIM2_Init+0x98>)
 80023d4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80023d8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023da:	4b17      	ldr	r3, [pc, #92]	@ (8002438 <MX_TIM2_Init+0x98>)
 80023dc:	2200      	movs	r2, #0
 80023de:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023e0:	4b15      	ldr	r3, [pc, #84]	@ (8002438 <MX_TIM2_Init+0x98>)
 80023e2:	2200      	movs	r2, #0
 80023e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80023e6:	4814      	ldr	r0, [pc, #80]	@ (8002438 <MX_TIM2_Init+0x98>)
 80023e8:	f001 fd44 	bl	8003e74 <HAL_TIM_Base_Init>
 80023ec:	4603      	mov	r3, r0
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d001      	beq.n	80023f6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80023f2:	f7ff fc27 	bl	8001c44 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80023f6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80023fa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80023fc:	f107 0310 	add.w	r3, r7, #16
 8002400:	4619      	mov	r1, r3
 8002402:	480d      	ldr	r0, [pc, #52]	@ (8002438 <MX_TIM2_Init+0x98>)
 8002404:	f002 fb78 	bl	8004af8 <HAL_TIM_ConfigClockSource>
 8002408:	4603      	mov	r3, r0
 800240a:	2b00      	cmp	r3, #0
 800240c:	d001      	beq.n	8002412 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800240e:	f7ff fc19 	bl	8001c44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002412:	2320      	movs	r3, #32
 8002414:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002416:	2300      	movs	r3, #0
 8002418:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800241a:	1d3b      	adds	r3, r7, #4
 800241c:	4619      	mov	r1, r3
 800241e:	4806      	ldr	r0, [pc, #24]	@ (8002438 <MX_TIM2_Init+0x98>)
 8002420:	f003 f948 	bl	80056b4 <HAL_TIMEx_MasterConfigSynchronization>
 8002424:	4603      	mov	r3, r0
 8002426:	2b00      	cmp	r3, #0
 8002428:	d001      	beq.n	800242e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800242a:	f7ff fc0b 	bl	8001c44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800242e:	bf00      	nop
 8002430:	3720      	adds	r7, #32
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}
 8002436:	bf00      	nop
 8002438:	200001f0 	.word	0x200001f0

0800243c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b08c      	sub	sp, #48	@ 0x30
 8002440:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002442:	f107 030c 	add.w	r3, r7, #12
 8002446:	2224      	movs	r2, #36	@ 0x24
 8002448:	2100      	movs	r1, #0
 800244a:	4618      	mov	r0, r3
 800244c:	f003 fbda 	bl	8005c04 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002450:	463b      	mov	r3, r7
 8002452:	2200      	movs	r2, #0
 8002454:	601a      	str	r2, [r3, #0]
 8002456:	605a      	str	r2, [r3, #4]
 8002458:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800245a:	4b21      	ldr	r3, [pc, #132]	@ (80024e0 <MX_TIM3_Init+0xa4>)
 800245c:	4a21      	ldr	r2, [pc, #132]	@ (80024e4 <MX_TIM3_Init+0xa8>)
 800245e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002460:	4b1f      	ldr	r3, [pc, #124]	@ (80024e0 <MX_TIM3_Init+0xa4>)
 8002462:	2200      	movs	r2, #0
 8002464:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002466:	4b1e      	ldr	r3, [pc, #120]	@ (80024e0 <MX_TIM3_Init+0xa4>)
 8002468:	2200      	movs	r2, #0
 800246a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800246c:	4b1c      	ldr	r3, [pc, #112]	@ (80024e0 <MX_TIM3_Init+0xa4>)
 800246e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002472:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002474:	4b1a      	ldr	r3, [pc, #104]	@ (80024e0 <MX_TIM3_Init+0xa4>)
 8002476:	2200      	movs	r2, #0
 8002478:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800247a:	4b19      	ldr	r3, [pc, #100]	@ (80024e0 <MX_TIM3_Init+0xa4>)
 800247c:	2200      	movs	r2, #0
 800247e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002480:	2303      	movs	r3, #3
 8002482:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002484:	2300      	movs	r3, #0
 8002486:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002488:	2301      	movs	r3, #1
 800248a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800248c:	2300      	movs	r3, #0
 800248e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002490:	2300      	movs	r3, #0
 8002492:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002494:	2300      	movs	r3, #0
 8002496:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002498:	2301      	movs	r3, #1
 800249a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800249c:	2300      	movs	r3, #0
 800249e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80024a0:	2300      	movs	r3, #0
 80024a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80024a4:	f107 030c 	add.w	r3, r7, #12
 80024a8:	4619      	mov	r1, r3
 80024aa:	480d      	ldr	r0, [pc, #52]	@ (80024e0 <MX_TIM3_Init+0xa4>)
 80024ac:	f001 ff8c 	bl	80043c8 <HAL_TIM_Encoder_Init>
 80024b0:	4603      	mov	r3, r0
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d001      	beq.n	80024ba <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 80024b6:	f7ff fbc5 	bl	8001c44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024ba:	2300      	movs	r3, #0
 80024bc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024be:	2300      	movs	r3, #0
 80024c0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80024c2:	463b      	mov	r3, r7
 80024c4:	4619      	mov	r1, r3
 80024c6:	4806      	ldr	r0, [pc, #24]	@ (80024e0 <MX_TIM3_Init+0xa4>)
 80024c8:	f003 f8f4 	bl	80056b4 <HAL_TIMEx_MasterConfigSynchronization>
 80024cc:	4603      	mov	r3, r0
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d001      	beq.n	80024d6 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 80024d2:	f7ff fbb7 	bl	8001c44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80024d6:	bf00      	nop
 80024d8:	3730      	adds	r7, #48	@ 0x30
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}
 80024de:	bf00      	nop
 80024e0:	2000023c 	.word	0x2000023c
 80024e4:	40000400 	.word	0x40000400

080024e8 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b08c      	sub	sp, #48	@ 0x30
 80024ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80024ee:	f107 030c 	add.w	r3, r7, #12
 80024f2:	2224      	movs	r2, #36	@ 0x24
 80024f4:	2100      	movs	r1, #0
 80024f6:	4618      	mov	r0, r3
 80024f8:	f003 fb84 	bl	8005c04 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024fc:	463b      	mov	r3, r7
 80024fe:	2200      	movs	r2, #0
 8002500:	601a      	str	r2, [r3, #0]
 8002502:	605a      	str	r2, [r3, #4]
 8002504:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002506:	4b21      	ldr	r3, [pc, #132]	@ (800258c <MX_TIM4_Init+0xa4>)
 8002508:	4a21      	ldr	r2, [pc, #132]	@ (8002590 <MX_TIM4_Init+0xa8>)
 800250a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800250c:	4b1f      	ldr	r3, [pc, #124]	@ (800258c <MX_TIM4_Init+0xa4>)
 800250e:	2200      	movs	r2, #0
 8002510:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002512:	4b1e      	ldr	r3, [pc, #120]	@ (800258c <MX_TIM4_Init+0xa4>)
 8002514:	2200      	movs	r2, #0
 8002516:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002518:	4b1c      	ldr	r3, [pc, #112]	@ (800258c <MX_TIM4_Init+0xa4>)
 800251a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800251e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002520:	4b1a      	ldr	r3, [pc, #104]	@ (800258c <MX_TIM4_Init+0xa4>)
 8002522:	2200      	movs	r2, #0
 8002524:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002526:	4b19      	ldr	r3, [pc, #100]	@ (800258c <MX_TIM4_Init+0xa4>)
 8002528:	2200      	movs	r2, #0
 800252a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800252c:	2303      	movs	r3, #3
 800252e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002530:	2300      	movs	r3, #0
 8002532:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002534:	2301      	movs	r3, #1
 8002536:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002538:	2300      	movs	r3, #0
 800253a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800253c:	2300      	movs	r3, #0
 800253e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002540:	2300      	movs	r3, #0
 8002542:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002544:	2301      	movs	r3, #1
 8002546:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002548:	2300      	movs	r3, #0
 800254a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800254c:	2300      	movs	r3, #0
 800254e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8002550:	f107 030c 	add.w	r3, r7, #12
 8002554:	4619      	mov	r1, r3
 8002556:	480d      	ldr	r0, [pc, #52]	@ (800258c <MX_TIM4_Init+0xa4>)
 8002558:	f001 ff36 	bl	80043c8 <HAL_TIM_Encoder_Init>
 800255c:	4603      	mov	r3, r0
 800255e:	2b00      	cmp	r3, #0
 8002560:	d001      	beq.n	8002566 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8002562:	f7ff fb6f 	bl	8001c44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002566:	2300      	movs	r3, #0
 8002568:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800256a:	2300      	movs	r3, #0
 800256c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800256e:	463b      	mov	r3, r7
 8002570:	4619      	mov	r1, r3
 8002572:	4806      	ldr	r0, [pc, #24]	@ (800258c <MX_TIM4_Init+0xa4>)
 8002574:	f003 f89e 	bl	80056b4 <HAL_TIMEx_MasterConfigSynchronization>
 8002578:	4603      	mov	r3, r0
 800257a:	2b00      	cmp	r3, #0
 800257c:	d001      	beq.n	8002582 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 800257e:	f7ff fb61 	bl	8001c44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002582:	bf00      	nop
 8002584:	3730      	adds	r7, #48	@ 0x30
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}
 800258a:	bf00      	nop
 800258c:	20000288 	.word	0x20000288
 8002590:	40000800 	.word	0x40000800

08002594 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b08c      	sub	sp, #48	@ 0x30
 8002598:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800259a:	f107 030c 	add.w	r3, r7, #12
 800259e:	2224      	movs	r2, #36	@ 0x24
 80025a0:	2100      	movs	r1, #0
 80025a2:	4618      	mov	r0, r3
 80025a4:	f003 fb2e 	bl	8005c04 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025a8:	463b      	mov	r3, r7
 80025aa:	2200      	movs	r2, #0
 80025ac:	601a      	str	r2, [r3, #0]
 80025ae:	605a      	str	r2, [r3, #4]
 80025b0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80025b2:	4b21      	ldr	r3, [pc, #132]	@ (8002638 <MX_TIM5_Init+0xa4>)
 80025b4:	4a21      	ldr	r2, [pc, #132]	@ (800263c <MX_TIM5_Init+0xa8>)
 80025b6:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80025b8:	4b1f      	ldr	r3, [pc, #124]	@ (8002638 <MX_TIM5_Init+0xa4>)
 80025ba:	2200      	movs	r2, #0
 80025bc:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025be:	4b1e      	ldr	r3, [pc, #120]	@ (8002638 <MX_TIM5_Init+0xa4>)
 80025c0:	2200      	movs	r2, #0
 80025c2:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80025c4:	4b1c      	ldr	r3, [pc, #112]	@ (8002638 <MX_TIM5_Init+0xa4>)
 80025c6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80025ca:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025cc:	4b1a      	ldr	r3, [pc, #104]	@ (8002638 <MX_TIM5_Init+0xa4>)
 80025ce:	2200      	movs	r2, #0
 80025d0:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025d2:	4b19      	ldr	r3, [pc, #100]	@ (8002638 <MX_TIM5_Init+0xa4>)
 80025d4:	2200      	movs	r2, #0
 80025d6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80025d8:	2303      	movs	r3, #3
 80025da:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80025dc:	2300      	movs	r3, #0
 80025de:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80025e0:	2301      	movs	r3, #1
 80025e2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80025e4:	2300      	movs	r3, #0
 80025e6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80025e8:	2300      	movs	r3, #0
 80025ea:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80025ec:	2300      	movs	r3, #0
 80025ee:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80025f0:	2301      	movs	r3, #1
 80025f2:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80025f4:	2300      	movs	r3, #0
 80025f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80025f8:	2300      	movs	r3, #0
 80025fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 80025fc:	f107 030c 	add.w	r3, r7, #12
 8002600:	4619      	mov	r1, r3
 8002602:	480d      	ldr	r0, [pc, #52]	@ (8002638 <MX_TIM5_Init+0xa4>)
 8002604:	f001 fee0 	bl	80043c8 <HAL_TIM_Encoder_Init>
 8002608:	4603      	mov	r3, r0
 800260a:	2b00      	cmp	r3, #0
 800260c:	d001      	beq.n	8002612 <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 800260e:	f7ff fb19 	bl	8001c44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002612:	2300      	movs	r3, #0
 8002614:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002616:	2300      	movs	r3, #0
 8002618:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800261a:	463b      	mov	r3, r7
 800261c:	4619      	mov	r1, r3
 800261e:	4806      	ldr	r0, [pc, #24]	@ (8002638 <MX_TIM5_Init+0xa4>)
 8002620:	f003 f848 	bl	80056b4 <HAL_TIMEx_MasterConfigSynchronization>
 8002624:	4603      	mov	r3, r0
 8002626:	2b00      	cmp	r3, #0
 8002628:	d001      	beq.n	800262e <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 800262a:	f7ff fb0b 	bl	8001c44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800262e:	bf00      	nop
 8002630:	3730      	adds	r7, #48	@ 0x30
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}
 8002636:	bf00      	nop
 8002638:	200002d4 	.word	0x200002d4
 800263c:	40000c00 	.word	0x40000c00

08002640 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b098      	sub	sp, #96	@ 0x60
 8002644:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002646:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800264a:	2200      	movs	r2, #0
 800264c:	601a      	str	r2, [r3, #0]
 800264e:	605a      	str	r2, [r3, #4]
 8002650:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002652:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002656:	2200      	movs	r2, #0
 8002658:	601a      	str	r2, [r3, #0]
 800265a:	605a      	str	r2, [r3, #4]
 800265c:	609a      	str	r2, [r3, #8]
 800265e:	60da      	str	r2, [r3, #12]
 8002660:	611a      	str	r2, [r3, #16]
 8002662:	615a      	str	r2, [r3, #20]
 8002664:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002666:	1d3b      	adds	r3, r7, #4
 8002668:	2234      	movs	r2, #52	@ 0x34
 800266a:	2100      	movs	r1, #0
 800266c:	4618      	mov	r0, r3
 800266e:	f003 fac9 	bl	8005c04 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002672:	4b4d      	ldr	r3, [pc, #308]	@ (80027a8 <MX_TIM8_Init+0x168>)
 8002674:	4a4d      	ldr	r2, [pc, #308]	@ (80027ac <MX_TIM8_Init+0x16c>)
 8002676:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8002678:	4b4b      	ldr	r3, [pc, #300]	@ (80027a8 <MX_TIM8_Init+0x168>)
 800267a:	2200      	movs	r2, #0
 800267c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800267e:	4b4a      	ldr	r3, [pc, #296]	@ (80027a8 <MX_TIM8_Init+0x168>)
 8002680:	2200      	movs	r2, #0
 8002682:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8002684:	4b48      	ldr	r3, [pc, #288]	@ (80027a8 <MX_TIM8_Init+0x168>)
 8002686:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800268a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800268c:	4b46      	ldr	r3, [pc, #280]	@ (80027a8 <MX_TIM8_Init+0x168>)
 800268e:	2200      	movs	r2, #0
 8002690:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002692:	4b45      	ldr	r3, [pc, #276]	@ (80027a8 <MX_TIM8_Init+0x168>)
 8002694:	2200      	movs	r2, #0
 8002696:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002698:	4b43      	ldr	r3, [pc, #268]	@ (80027a8 <MX_TIM8_Init+0x168>)
 800269a:	2200      	movs	r2, #0
 800269c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800269e:	4842      	ldr	r0, [pc, #264]	@ (80027a8 <MX_TIM8_Init+0x168>)
 80026a0:	f001 fd28 	bl	80040f4 <HAL_TIM_PWM_Init>
 80026a4:	4603      	mov	r3, r0
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d001      	beq.n	80026ae <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 80026aa:	f7ff facb 	bl	8001c44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026ae:	2300      	movs	r3, #0
 80026b0:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80026b2:	2300      	movs	r3, #0
 80026b4:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026b6:	2300      	movs	r3, #0
 80026b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80026ba:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80026be:	4619      	mov	r1, r3
 80026c0:	4839      	ldr	r0, [pc, #228]	@ (80027a8 <MX_TIM8_Init+0x168>)
 80026c2:	f002 fff7 	bl	80056b4 <HAL_TIMEx_MasterConfigSynchronization>
 80026c6:	4603      	mov	r3, r0
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d001      	beq.n	80026d0 <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 80026cc:	f7ff faba 	bl	8001c44 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80026d0:	2360      	movs	r3, #96	@ 0x60
 80026d2:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 80026d4:	2300      	movs	r3, #0
 80026d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80026d8:	2300      	movs	r3, #0
 80026da:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80026dc:	2300      	movs	r3, #0
 80026de:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80026e0:	2300      	movs	r3, #0
 80026e2:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80026e4:	2300      	movs	r3, #0
 80026e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80026e8:	2300      	movs	r3, #0
 80026ea:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80026ec:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80026f0:	2200      	movs	r2, #0
 80026f2:	4619      	mov	r1, r3
 80026f4:	482c      	ldr	r0, [pc, #176]	@ (80027a8 <MX_TIM8_Init+0x168>)
 80026f6:	f002 f8eb 	bl	80048d0 <HAL_TIM_PWM_ConfigChannel>
 80026fa:	4603      	mov	r3, r0
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d001      	beq.n	8002704 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8002700:	f7ff faa0 	bl	8001c44 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002704:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002708:	2204      	movs	r2, #4
 800270a:	4619      	mov	r1, r3
 800270c:	4826      	ldr	r0, [pc, #152]	@ (80027a8 <MX_TIM8_Init+0x168>)
 800270e:	f002 f8df 	bl	80048d0 <HAL_TIM_PWM_ConfigChannel>
 8002712:	4603      	mov	r3, r0
 8002714:	2b00      	cmp	r3, #0
 8002716:	d001      	beq.n	800271c <MX_TIM8_Init+0xdc>
  {
    Error_Handler();
 8002718:	f7ff fa94 	bl	8001c44 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800271c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002720:	2208      	movs	r2, #8
 8002722:	4619      	mov	r1, r3
 8002724:	4820      	ldr	r0, [pc, #128]	@ (80027a8 <MX_TIM8_Init+0x168>)
 8002726:	f002 f8d3 	bl	80048d0 <HAL_TIM_PWM_ConfigChannel>
 800272a:	4603      	mov	r3, r0
 800272c:	2b00      	cmp	r3, #0
 800272e:	d001      	beq.n	8002734 <MX_TIM8_Init+0xf4>
  {
    Error_Handler();
 8002730:	f7ff fa88 	bl	8001c44 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002734:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002738:	220c      	movs	r2, #12
 800273a:	4619      	mov	r1, r3
 800273c:	481a      	ldr	r0, [pc, #104]	@ (80027a8 <MX_TIM8_Init+0x168>)
 800273e:	f002 f8c7 	bl	80048d0 <HAL_TIM_PWM_ConfigChannel>
 8002742:	4603      	mov	r3, r0
 8002744:	2b00      	cmp	r3, #0
 8002746:	d001      	beq.n	800274c <MX_TIM8_Init+0x10c>
  {
    Error_Handler();
 8002748:	f7ff fa7c 	bl	8001c44 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800274c:	2300      	movs	r3, #0
 800274e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002750:	2300      	movs	r3, #0
 8002752:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002754:	2300      	movs	r3, #0
 8002756:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002758:	2300      	movs	r3, #0
 800275a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800275c:	2300      	movs	r3, #0
 800275e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002760:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002764:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002766:	2300      	movs	r3, #0
 8002768:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800276a:	2300      	movs	r3, #0
 800276c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800276e:	2300      	movs	r3, #0
 8002770:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002772:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002776:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002778:	2300      	movs	r3, #0
 800277a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800277c:	2300      	movs	r3, #0
 800277e:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002780:	2300      	movs	r3, #0
 8002782:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8002784:	1d3b      	adds	r3, r7, #4
 8002786:	4619      	mov	r1, r3
 8002788:	4807      	ldr	r0, [pc, #28]	@ (80027a8 <MX_TIM8_Init+0x168>)
 800278a:	f003 f829 	bl	80057e0 <HAL_TIMEx_ConfigBreakDeadTime>
 800278e:	4603      	mov	r3, r0
 8002790:	2b00      	cmp	r3, #0
 8002792:	d001      	beq.n	8002798 <MX_TIM8_Init+0x158>
  {
    Error_Handler();
 8002794:	f7ff fa56 	bl	8001c44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8002798:	4803      	ldr	r0, [pc, #12]	@ (80027a8 <MX_TIM8_Init+0x168>)
 800279a:	f000 f99d 	bl	8002ad8 <HAL_TIM_MspPostInit>

}
 800279e:	bf00      	nop
 80027a0:	3760      	adds	r7, #96	@ 0x60
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}
 80027a6:	bf00      	nop
 80027a8:	20000320 	.word	0x20000320
 80027ac:	40013400 	.word	0x40013400

080027b0 <MX_TIM20_Init>:
/* TIM20 init function */
void MX_TIM20_Init(void)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b08c      	sub	sp, #48	@ 0x30
 80027b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM20_Init 0 */

  /* USER CODE END TIM20_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80027b6:	f107 030c 	add.w	r3, r7, #12
 80027ba:	2224      	movs	r2, #36	@ 0x24
 80027bc:	2100      	movs	r1, #0
 80027be:	4618      	mov	r0, r3
 80027c0:	f003 fa20 	bl	8005c04 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027c4:	463b      	mov	r3, r7
 80027c6:	2200      	movs	r2, #0
 80027c8:	601a      	str	r2, [r3, #0]
 80027ca:	605a      	str	r2, [r3, #4]
 80027cc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM20_Init 1 */

  /* USER CODE END TIM20_Init 1 */
  htim20.Instance = TIM20;
 80027ce:	4b23      	ldr	r3, [pc, #140]	@ (800285c <MX_TIM20_Init+0xac>)
 80027d0:	4a23      	ldr	r2, [pc, #140]	@ (8002860 <MX_TIM20_Init+0xb0>)
 80027d2:	601a      	str	r2, [r3, #0]
  htim20.Init.Prescaler = 0;
 80027d4:	4b21      	ldr	r3, [pc, #132]	@ (800285c <MX_TIM20_Init+0xac>)
 80027d6:	2200      	movs	r2, #0
 80027d8:	605a      	str	r2, [r3, #4]
  htim20.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027da:	4b20      	ldr	r3, [pc, #128]	@ (800285c <MX_TIM20_Init+0xac>)
 80027dc:	2200      	movs	r2, #0
 80027de:	609a      	str	r2, [r3, #8]
  htim20.Init.Period = 65535;
 80027e0:	4b1e      	ldr	r3, [pc, #120]	@ (800285c <MX_TIM20_Init+0xac>)
 80027e2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80027e6:	60da      	str	r2, [r3, #12]
  htim20.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027e8:	4b1c      	ldr	r3, [pc, #112]	@ (800285c <MX_TIM20_Init+0xac>)
 80027ea:	2200      	movs	r2, #0
 80027ec:	611a      	str	r2, [r3, #16]
  htim20.Init.RepetitionCounter = 0;
 80027ee:	4b1b      	ldr	r3, [pc, #108]	@ (800285c <MX_TIM20_Init+0xac>)
 80027f0:	2200      	movs	r2, #0
 80027f2:	615a      	str	r2, [r3, #20]
  htim20.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027f4:	4b19      	ldr	r3, [pc, #100]	@ (800285c <MX_TIM20_Init+0xac>)
 80027f6:	2200      	movs	r2, #0
 80027f8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80027fa:	2303      	movs	r3, #3
 80027fc:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80027fe:	2300      	movs	r3, #0
 8002800:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002802:	2301      	movs	r3, #1
 8002804:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002806:	2300      	movs	r3, #0
 8002808:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800280a:	2300      	movs	r3, #0
 800280c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800280e:	2300      	movs	r3, #0
 8002810:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002812:	2301      	movs	r3, #1
 8002814:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002816:	2300      	movs	r3, #0
 8002818:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800281a:	2300      	movs	r3, #0
 800281c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim20, &sConfig) != HAL_OK)
 800281e:	f107 030c 	add.w	r3, r7, #12
 8002822:	4619      	mov	r1, r3
 8002824:	480d      	ldr	r0, [pc, #52]	@ (800285c <MX_TIM20_Init+0xac>)
 8002826:	f001 fdcf 	bl	80043c8 <HAL_TIM_Encoder_Init>
 800282a:	4603      	mov	r3, r0
 800282c:	2b00      	cmp	r3, #0
 800282e:	d001      	beq.n	8002834 <MX_TIM20_Init+0x84>
  {
    Error_Handler();
 8002830:	f7ff fa08 	bl	8001c44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002834:	2300      	movs	r3, #0
 8002836:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002838:	2300      	movs	r3, #0
 800283a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800283c:	2300      	movs	r3, #0
 800283e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim20, &sMasterConfig) != HAL_OK)
 8002840:	463b      	mov	r3, r7
 8002842:	4619      	mov	r1, r3
 8002844:	4805      	ldr	r0, [pc, #20]	@ (800285c <MX_TIM20_Init+0xac>)
 8002846:	f002 ff35 	bl	80056b4 <HAL_TIMEx_MasterConfigSynchronization>
 800284a:	4603      	mov	r3, r0
 800284c:	2b00      	cmp	r3, #0
 800284e:	d001      	beq.n	8002854 <MX_TIM20_Init+0xa4>
  {
    Error_Handler();
 8002850:	f7ff f9f8 	bl	8001c44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM20_Init 2 */

  /* USER CODE END TIM20_Init 2 */

}
 8002854:	bf00      	nop
 8002856:	3730      	adds	r7, #48	@ 0x30
 8002858:	46bd      	mov	sp, r7
 800285a:	bd80      	pop	{r7, pc}
 800285c:	2000036c 	.word	0x2000036c
 8002860:	40015000 	.word	0x40015000

08002864 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b084      	sub	sp, #16
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002874:	d113      	bne.n	800289e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002876:	4b0c      	ldr	r3, [pc, #48]	@ (80028a8 <HAL_TIM_Base_MspInit+0x44>)
 8002878:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800287a:	4a0b      	ldr	r2, [pc, #44]	@ (80028a8 <HAL_TIM_Base_MspInit+0x44>)
 800287c:	f043 0301 	orr.w	r3, r3, #1
 8002880:	6593      	str	r3, [r2, #88]	@ 0x58
 8002882:	4b09      	ldr	r3, [pc, #36]	@ (80028a8 <HAL_TIM_Base_MspInit+0x44>)
 8002884:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002886:	f003 0301 	and.w	r3, r3, #1
 800288a:	60fb      	str	r3, [r7, #12]
 800288c:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800288e:	2200      	movs	r2, #0
 8002890:	2100      	movs	r1, #0
 8002892:	201c      	movs	r0, #28
 8002894:	f000 fb51 	bl	8002f3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002898:	201c      	movs	r0, #28
 800289a:	f000 fb68 	bl	8002f6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800289e:	bf00      	nop
 80028a0:	3710      	adds	r7, #16
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}
 80028a6:	bf00      	nop
 80028a8:	40021000 	.word	0x40021000

080028ac <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b090      	sub	sp, #64	@ 0x40
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028b4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80028b8:	2200      	movs	r2, #0
 80028ba:	601a      	str	r2, [r3, #0]
 80028bc:	605a      	str	r2, [r3, #4]
 80028be:	609a      	str	r2, [r3, #8]
 80028c0:	60da      	str	r2, [r3, #12]
 80028c2:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a6c      	ldr	r2, [pc, #432]	@ (8002a7c <HAL_TIM_Encoder_MspInit+0x1d0>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d129      	bne.n	8002922 <HAL_TIM_Encoder_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80028ce:	4b6c      	ldr	r3, [pc, #432]	@ (8002a80 <HAL_TIM_Encoder_MspInit+0x1d4>)
 80028d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028d2:	4a6b      	ldr	r2, [pc, #428]	@ (8002a80 <HAL_TIM_Encoder_MspInit+0x1d4>)
 80028d4:	f043 0302 	orr.w	r3, r3, #2
 80028d8:	6593      	str	r3, [r2, #88]	@ 0x58
 80028da:	4b69      	ldr	r3, [pc, #420]	@ (8002a80 <HAL_TIM_Encoder_MspInit+0x1d4>)
 80028dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028de:	f003 0302 	and.w	r3, r3, #2
 80028e2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80028e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028e6:	4b66      	ldr	r3, [pc, #408]	@ (8002a80 <HAL_TIM_Encoder_MspInit+0x1d4>)
 80028e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028ea:	4a65      	ldr	r2, [pc, #404]	@ (8002a80 <HAL_TIM_Encoder_MspInit+0x1d4>)
 80028ec:	f043 0301 	orr.w	r3, r3, #1
 80028f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80028f2:	4b63      	ldr	r3, [pc, #396]	@ (8002a80 <HAL_TIM_Encoder_MspInit+0x1d4>)
 80028f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028f6:	f003 0301 	and.w	r3, r3, #1
 80028fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80028fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**TIM3 GPIO Configuration
    PA4     ------> TIM3_CH2
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 80028fe:	2350      	movs	r3, #80	@ 0x50
 8002900:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002902:	2302      	movs	r3, #2
 8002904:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002906:	2300      	movs	r3, #0
 8002908:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800290a:	2300      	movs	r3, #0
 800290c:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800290e:	2302      	movs	r3, #2
 8002910:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002912:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002916:	4619      	mov	r1, r3
 8002918:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800291c:	f000 fb42 	bl	8002fa4 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM20_MspInit 1 */

  /* USER CODE END TIM20_MspInit 1 */
  }
}
 8002920:	e0a7      	b.n	8002a72 <HAL_TIM_Encoder_MspInit+0x1c6>
  else if(tim_encoderHandle->Instance==TIM4)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4a57      	ldr	r2, [pc, #348]	@ (8002a84 <HAL_TIM_Encoder_MspInit+0x1d8>)
 8002928:	4293      	cmp	r3, r2
 800292a:	d12a      	bne.n	8002982 <HAL_TIM_Encoder_MspInit+0xd6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800292c:	4b54      	ldr	r3, [pc, #336]	@ (8002a80 <HAL_TIM_Encoder_MspInit+0x1d4>)
 800292e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002930:	4a53      	ldr	r2, [pc, #332]	@ (8002a80 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002932:	f043 0304 	orr.w	r3, r3, #4
 8002936:	6593      	str	r3, [r2, #88]	@ 0x58
 8002938:	4b51      	ldr	r3, [pc, #324]	@ (8002a80 <HAL_TIM_Encoder_MspInit+0x1d4>)
 800293a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800293c:	f003 0304 	and.w	r3, r3, #4
 8002940:	623b      	str	r3, [r7, #32]
 8002942:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002944:	4b4e      	ldr	r3, [pc, #312]	@ (8002a80 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002946:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002948:	4a4d      	ldr	r2, [pc, #308]	@ (8002a80 <HAL_TIM_Encoder_MspInit+0x1d4>)
 800294a:	f043 0301 	orr.w	r3, r3, #1
 800294e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002950:	4b4b      	ldr	r3, [pc, #300]	@ (8002a80 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002952:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002954:	f003 0301 	and.w	r3, r3, #1
 8002958:	61fb      	str	r3, [r7, #28]
 800295a:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800295c:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8002960:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002962:	2302      	movs	r3, #2
 8002964:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002966:	2300      	movs	r3, #0
 8002968:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800296a:	2300      	movs	r3, #0
 800296c:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 800296e:	230a      	movs	r3, #10
 8002970:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002972:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002976:	4619      	mov	r1, r3
 8002978:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800297c:	f000 fb12 	bl	8002fa4 <HAL_GPIO_Init>
}
 8002980:	e077      	b.n	8002a72 <HAL_TIM_Encoder_MspInit+0x1c6>
  else if(tim_encoderHandle->Instance==TIM5)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a40      	ldr	r2, [pc, #256]	@ (8002a88 <HAL_TIM_Encoder_MspInit+0x1dc>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d129      	bne.n	80029e0 <HAL_TIM_Encoder_MspInit+0x134>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800298c:	4b3c      	ldr	r3, [pc, #240]	@ (8002a80 <HAL_TIM_Encoder_MspInit+0x1d4>)
 800298e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002990:	4a3b      	ldr	r2, [pc, #236]	@ (8002a80 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002992:	f043 0308 	orr.w	r3, r3, #8
 8002996:	6593      	str	r3, [r2, #88]	@ 0x58
 8002998:	4b39      	ldr	r3, [pc, #228]	@ (8002a80 <HAL_TIM_Encoder_MspInit+0x1d4>)
 800299a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800299c:	f003 0308 	and.w	r3, r3, #8
 80029a0:	61bb      	str	r3, [r7, #24]
 80029a2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029a4:	4b36      	ldr	r3, [pc, #216]	@ (8002a80 <HAL_TIM_Encoder_MspInit+0x1d4>)
 80029a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029a8:	4a35      	ldr	r2, [pc, #212]	@ (8002a80 <HAL_TIM_Encoder_MspInit+0x1d4>)
 80029aa:	f043 0301 	orr.w	r3, r3, #1
 80029ae:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80029b0:	4b33      	ldr	r3, [pc, #204]	@ (8002a80 <HAL_TIM_Encoder_MspInit+0x1d4>)
 80029b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029b4:	f003 0301 	and.w	r3, r3, #1
 80029b8:	617b      	str	r3, [r7, #20]
 80029ba:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80029bc:	2303      	movs	r3, #3
 80029be:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029c0:	2302      	movs	r3, #2
 80029c2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029c4:	2300      	movs	r3, #0
 80029c6:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029c8:	2300      	movs	r3, #0
 80029ca:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80029cc:	2302      	movs	r3, #2
 80029ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029d0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80029d4:	4619      	mov	r1, r3
 80029d6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80029da:	f000 fae3 	bl	8002fa4 <HAL_GPIO_Init>
}
 80029de:	e048      	b.n	8002a72 <HAL_TIM_Encoder_MspInit+0x1c6>
  else if(tim_encoderHandle->Instance==TIM20)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a29      	ldr	r2, [pc, #164]	@ (8002a8c <HAL_TIM_Encoder_MspInit+0x1e0>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d143      	bne.n	8002a72 <HAL_TIM_Encoder_MspInit+0x1c6>
    __HAL_RCC_TIM20_CLK_ENABLE();
 80029ea:	4b25      	ldr	r3, [pc, #148]	@ (8002a80 <HAL_TIM_Encoder_MspInit+0x1d4>)
 80029ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029ee:	4a24      	ldr	r2, [pc, #144]	@ (8002a80 <HAL_TIM_Encoder_MspInit+0x1d4>)
 80029f0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80029f4:	6613      	str	r3, [r2, #96]	@ 0x60
 80029f6:	4b22      	ldr	r3, [pc, #136]	@ (8002a80 <HAL_TIM_Encoder_MspInit+0x1d4>)
 80029f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029fa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80029fe:	613b      	str	r3, [r7, #16]
 8002a00:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a02:	4b1f      	ldr	r3, [pc, #124]	@ (8002a80 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002a04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a06:	4a1e      	ldr	r2, [pc, #120]	@ (8002a80 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002a08:	f043 0304 	orr.w	r3, r3, #4
 8002a0c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002a0e:	4b1c      	ldr	r3, [pc, #112]	@ (8002a80 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002a10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a12:	f003 0304 	and.w	r3, r3, #4
 8002a16:	60fb      	str	r3, [r7, #12]
 8002a18:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a1a:	4b19      	ldr	r3, [pc, #100]	@ (8002a80 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002a1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a1e:	4a18      	ldr	r2, [pc, #96]	@ (8002a80 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002a20:	f043 0302 	orr.w	r3, r3, #2
 8002a24:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002a26:	4b16      	ldr	r3, [pc, #88]	@ (8002a80 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002a28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a2a:	f003 0302 	and.w	r3, r3, #2
 8002a2e:	60bb      	str	r3, [r7, #8]
 8002a30:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002a32:	2304      	movs	r3, #4
 8002a34:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a36:	2302      	movs	r3, #2
 8002a38:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM20;
 8002a42:	2306      	movs	r3, #6
 8002a44:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a46:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002a4a:	4619      	mov	r1, r3
 8002a4c:	4810      	ldr	r0, [pc, #64]	@ (8002a90 <HAL_TIM_Encoder_MspInit+0x1e4>)
 8002a4e:	f000 faa9 	bl	8002fa4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002a52:	2304      	movs	r3, #4
 8002a54:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a56:	2302      	movs	r3, #2
 8002a58:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM20;
 8002a62:	2303      	movs	r3, #3
 8002a64:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a66:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002a6a:	4619      	mov	r1, r3
 8002a6c:	4809      	ldr	r0, [pc, #36]	@ (8002a94 <HAL_TIM_Encoder_MspInit+0x1e8>)
 8002a6e:	f000 fa99 	bl	8002fa4 <HAL_GPIO_Init>
}
 8002a72:	bf00      	nop
 8002a74:	3740      	adds	r7, #64	@ 0x40
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}
 8002a7a:	bf00      	nop
 8002a7c:	40000400 	.word	0x40000400
 8002a80:	40021000 	.word	0x40021000
 8002a84:	40000800 	.word	0x40000800
 8002a88:	40000c00 	.word	0x40000c00
 8002a8c:	40015000 	.word	0x40015000
 8002a90:	48000800 	.word	0x48000800
 8002a94:	48000400 	.word	0x48000400

08002a98 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b085      	sub	sp, #20
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM8)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a0a      	ldr	r2, [pc, #40]	@ (8002ad0 <HAL_TIM_PWM_MspInit+0x38>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d10b      	bne.n	8002ac2 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* TIM8 clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002aaa:	4b0a      	ldr	r3, [pc, #40]	@ (8002ad4 <HAL_TIM_PWM_MspInit+0x3c>)
 8002aac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002aae:	4a09      	ldr	r2, [pc, #36]	@ (8002ad4 <HAL_TIM_PWM_MspInit+0x3c>)
 8002ab0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002ab4:	6613      	str	r3, [r2, #96]	@ 0x60
 8002ab6:	4b07      	ldr	r3, [pc, #28]	@ (8002ad4 <HAL_TIM_PWM_MspInit+0x3c>)
 8002ab8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002aba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002abe:	60fb      	str	r3, [r7, #12]
 8002ac0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8002ac2:	bf00      	nop
 8002ac4:	3714      	adds	r7, #20
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002acc:	4770      	bx	lr
 8002ace:	bf00      	nop
 8002ad0:	40013400 	.word	0x40013400
 8002ad4:	40021000 	.word	0x40021000

08002ad8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b088      	sub	sp, #32
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ae0:	f107 030c 	add.w	r3, r7, #12
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	601a      	str	r2, [r3, #0]
 8002ae8:	605a      	str	r2, [r3, #4]
 8002aea:	609a      	str	r2, [r3, #8]
 8002aec:	60da      	str	r2, [r3, #12]
 8002aee:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM8)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a11      	ldr	r2, [pc, #68]	@ (8002b3c <HAL_TIM_MspPostInit+0x64>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d11c      	bne.n	8002b34 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002afa:	4b11      	ldr	r3, [pc, #68]	@ (8002b40 <HAL_TIM_MspPostInit+0x68>)
 8002afc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002afe:	4a10      	ldr	r2, [pc, #64]	@ (8002b40 <HAL_TIM_MspPostInit+0x68>)
 8002b00:	f043 0304 	orr.w	r3, r3, #4
 8002b04:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002b06:	4b0e      	ldr	r3, [pc, #56]	@ (8002b40 <HAL_TIM_MspPostInit+0x68>)
 8002b08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b0a:	f003 0304 	and.w	r3, r3, #4
 8002b0e:	60bb      	str	r3, [r7, #8]
 8002b10:	68bb      	ldr	r3, [r7, #8]
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    PC8     ------> TIM8_CH3
    PC9     ------> TIM8_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8002b12:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8002b16:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b18:	2302      	movs	r3, #2
 8002b1a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b20:	2300      	movs	r3, #0
 8002b22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8002b24:	2304      	movs	r3, #4
 8002b26:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b28:	f107 030c 	add.w	r3, r7, #12
 8002b2c:	4619      	mov	r1, r3
 8002b2e:	4805      	ldr	r0, [pc, #20]	@ (8002b44 <HAL_TIM_MspPostInit+0x6c>)
 8002b30:	f000 fa38 	bl	8002fa4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8002b34:	bf00      	nop
 8002b36:	3720      	adds	r7, #32
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bd80      	pop	{r7, pc}
 8002b3c:	40013400 	.word	0x40013400
 8002b40:	40021000 	.word	0x40021000
 8002b44:	48000800 	.word	0x48000800

08002b48 <transporter_begin>:
PID_CONTROLLER pid3;
PID_CONTROLLER pid4;

FIR lowPassFilter;

void transporter_begin() {
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b082      	sub	sp, #8
 8002b4c:	af02      	add	r7, sp, #8
//	QEI_init(&encoder1, ENC_TIM1, ENC_PPR, ENC_FREQ);
//	QEI_init(&encoder2, ENC_TIM2, ENC_PPR, ENC_FREQ);
	QEI_init(&encoder3, ENC_TIM3, ENC_PPR, ENC_FREQ, MOTOR_RATIO);
 8002b4e:	ed9f 0a2c 	vldr	s0, [pc, #176]	@ 8002c00 <transporter_begin+0xb8>
 8002b52:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002b56:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002b5a:	492a      	ldr	r1, [pc, #168]	@ (8002c04 <transporter_begin+0xbc>)
 8002b5c:	482a      	ldr	r0, [pc, #168]	@ (8002c08 <transporter_begin+0xc0>)
 8002b5e:	f7fe fc25 	bl	80013ac <QEI_init>
	QEI_init(&encoder4, ENC_TIM4, ENC_PPR, ENC_FREQ, MOTOR_RATIO);
 8002b62:	ed9f 0a27 	vldr	s0, [pc, #156]	@ 8002c00 <transporter_begin+0xb8>
 8002b66:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002b6a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002b6e:	4927      	ldr	r1, [pc, #156]	@ (8002c0c <transporter_begin+0xc4>)
 8002b70:	4827      	ldr	r0, [pc, #156]	@ (8002c10 <transporter_begin+0xc8>)
 8002b72:	f7fe fc1b 	bl	80013ac <QEI_init>

//	MDXX_GPIO_init(&motor1, MOTOR1_TIM, MOTOR1_TIM_CH, MOTOR1_GPIOx, MOTOR1_GPIO_Pin);
//	MDXX_GPIO_init(&motor2, MOTOR2_TIM, MOTOR2_TIM_CH, MOTOR2_GPIOx, MOTOR2_GPIO_Pin);
	MDXX_GPIO_init(&motor3, MOTOR3_TIM, MOTOR3_TIM_CH, MOTOR3_GPIOx, MOTOR3_GPIO_Pin);
 8002b76:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002b7a:	9300      	str	r3, [sp, #0]
 8002b7c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8002b80:	2208      	movs	r2, #8
 8002b82:	4924      	ldr	r1, [pc, #144]	@ (8002c14 <transporter_begin+0xcc>)
 8002b84:	4824      	ldr	r0, [pc, #144]	@ (8002c18 <transporter_begin+0xd0>)
 8002b86:	f7fe f870 	bl	8000c6a <MDXX_GPIO_init>
	MDXX_GPIO_init(&motor4, MOTOR4_TIM, MOTOR4_TIM_CH, MOTOR4_GPIOx, MOTOR4_GPIO_Pin);
 8002b8a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002b8e:	9300      	str	r3, [sp, #0]
 8002b90:	4b22      	ldr	r3, [pc, #136]	@ (8002c1c <transporter_begin+0xd4>)
 8002b92:	220c      	movs	r2, #12
 8002b94:	491f      	ldr	r1, [pc, #124]	@ (8002c14 <transporter_begin+0xcc>)
 8002b96:	4822      	ldr	r0, [pc, #136]	@ (8002c20 <transporter_begin+0xd8>)
 8002b98:	f7fe f867 	bl	8000c6a <MDXX_GPIO_init>

//	MDXX_set_range(&motor1, 2000, 0);
//	MDXX_set_range(&motor2, 2000, 0);
	MDXX_set_range(&motor3, 2000, 0);
 8002b9c:	eddf 0a21 	vldr	s1, [pc, #132]	@ 8002c24 <transporter_begin+0xdc>
 8002ba0:	ed9f 0a21 	vldr	s0, [pc, #132]	@ 8002c28 <transporter_begin+0xe0>
 8002ba4:	481c      	ldr	r0, [pc, #112]	@ (8002c18 <transporter_begin+0xd0>)
 8002ba6:	f7fe f885 	bl	8000cb4 <MDXX_set_range>
	MDXX_set_range(&motor4, 2000, 0);
 8002baa:	eddf 0a1e 	vldr	s1, [pc, #120]	@ 8002c24 <transporter_begin+0xdc>
 8002bae:	ed9f 0a1e 	vldr	s0, [pc, #120]	@ 8002c28 <transporter_begin+0xe0>
 8002bb2:	481b      	ldr	r0, [pc, #108]	@ (8002c20 <transporter_begin+0xd8>)
 8002bb4:	f7fe f87e 	bl	8000cb4 <MDXX_set_range>

//	PID_CONTROLLER_Init(&pid1, 1000, 100, 0, 65535);
//	PID_CONTROLLER_Init(&pid2, 1000, 100, 0, 65535);
	PID_CONTROLLER_Init(&pid3, 1000, 100, 0, 65535);
 8002bb8:	eddf 1a1c 	vldr	s3, [pc, #112]	@ 8002c2c <transporter_begin+0xe4>
 8002bbc:	ed9f 1a19 	vldr	s2, [pc, #100]	@ 8002c24 <transporter_begin+0xdc>
 8002bc0:	eddf 0a1b 	vldr	s1, [pc, #108]	@ 8002c30 <transporter_begin+0xe8>
 8002bc4:	ed9f 0a1b 	vldr	s0, [pc, #108]	@ 8002c34 <transporter_begin+0xec>
 8002bc8:	481b      	ldr	r0, [pc, #108]	@ (8002c38 <transporter_begin+0xf0>)
 8002bca:	f7fd ff92 	bl	8000af2 <PID_CONTROLLER_Init>
	PID_CONTROLLER_Init(&pid4, 500000, 7500, 0, 65535);
 8002bce:	eddf 1a17 	vldr	s3, [pc, #92]	@ 8002c2c <transporter_begin+0xe4>
 8002bd2:	ed9f 1a14 	vldr	s2, [pc, #80]	@ 8002c24 <transporter_begin+0xdc>
 8002bd6:	eddf 0a19 	vldr	s1, [pc, #100]	@ 8002c3c <transporter_begin+0xf4>
 8002bda:	ed9f 0a19 	vldr	s0, [pc, #100]	@ 8002c40 <transporter_begin+0xf8>
 8002bde:	4819      	ldr	r0, [pc, #100]	@ (8002c44 <transporter_begin+0xfc>)
 8002be0:	f7fd ff87 	bl	8000af2 <PID_CONTROLLER_Init>

	FIR_init(&lowPassFilter, NUM_TAPS, CUTOFF_FREQ, SAMPLE_RATE);
 8002be4:	eddf 0a13 	vldr	s1, [pc, #76]	@ 8002c34 <transporter_begin+0xec>
 8002be8:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 8002bec:	211f      	movs	r1, #31
 8002bee:	4816      	ldr	r0, [pc, #88]	@ (8002c48 <transporter_begin+0x100>)
 8002bf0:	f7fe f93a 	bl	8000e68 <FIR_init>

	HAL_TIM_Base_Start_IT(CONTROL_TIM);
 8002bf4:	4815      	ldr	r0, [pc, #84]	@ (8002c4c <transporter_begin+0x104>)
 8002bf6:	f001 fa05 	bl	8004004 <HAL_TIM_Base_Start_IT>
}
 8002bfa:	bf00      	nop
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd80      	pop	{r7, pc}
 8002c00:	3ea8f5c3 	.word	0x3ea8f5c3
 8002c04:	200002d4 	.word	0x200002d4
 8002c08:	20000450 	.word	0x20000450
 8002c0c:	2000036c 	.word	0x2000036c
 8002c10:	2000049c 	.word	0x2000049c
 8002c14:	20000320 	.word	0x20000320
 8002c18:	200003b8 	.word	0x200003b8
 8002c1c:	48000400 	.word	0x48000400
 8002c20:	20000404 	.word	0x20000404
 8002c24:	00000000 	.word	0x00000000
 8002c28:	44fa0000 	.word	0x44fa0000
 8002c2c:	477fff00 	.word	0x477fff00
 8002c30:	42c80000 	.word	0x42c80000
 8002c34:	447a0000 	.word	0x447a0000
 8002c38:	200004e8 	.word	0x200004e8
 8002c3c:	45ea6000 	.word	0x45ea6000
 8002c40:	48f42400 	.word	0x48f42400
 8002c44:	20000514 	.word	0x20000514
 8002c48:	20000540 	.word	0x20000540
 8002c4c:	200001f0 	.word	0x200001f0

08002c50 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002c50:	480d      	ldr	r0, [pc, #52]	@ (8002c88 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002c52:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002c54:	f7ff fb92 	bl	800237c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002c58:	480c      	ldr	r0, [pc, #48]	@ (8002c8c <LoopForever+0x6>)
  ldr r1, =_edata
 8002c5a:	490d      	ldr	r1, [pc, #52]	@ (8002c90 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002c5c:	4a0d      	ldr	r2, [pc, #52]	@ (8002c94 <LoopForever+0xe>)
  movs r3, #0
 8002c5e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002c60:	e002      	b.n	8002c68 <LoopCopyDataInit>

08002c62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c66:	3304      	adds	r3, #4

08002c68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c6c:	d3f9      	bcc.n	8002c62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c6e:	4a0a      	ldr	r2, [pc, #40]	@ (8002c98 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002c70:	4c0a      	ldr	r4, [pc, #40]	@ (8002c9c <LoopForever+0x16>)
  movs r3, #0
 8002c72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c74:	e001      	b.n	8002c7a <LoopFillZerobss>

08002c76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c78:	3204      	adds	r2, #4

08002c7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c7c:	d3fb      	bcc.n	8002c76 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002c7e:	f002 ffdf 	bl	8005c40 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002c82:	f7fe fe53 	bl	800192c <main>

08002c86 <LoopForever>:

LoopForever:
    b LoopForever
 8002c86:	e7fe      	b.n	8002c86 <LoopForever>
  ldr   r0, =_estack
 8002c88:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002c8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c90:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8002c94:	08007b90 	.word	0x08007b90
  ldr r2, =_sbss
 8002c98:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8002c9c:	20000698 	.word	0x20000698

08002ca0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002ca0:	e7fe      	b.n	8002ca0 <ADC1_2_IRQHandler>

08002ca2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ca2:	b580      	push	{r7, lr}
 8002ca4:	b082      	sub	sp, #8
 8002ca6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002cac:	2003      	movs	r0, #3
 8002cae:	f000 f939 	bl	8002f24 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002cb2:	2000      	movs	r0, #0
 8002cb4:	f000 f80e 	bl	8002cd4 <HAL_InitTick>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d002      	beq.n	8002cc4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	71fb      	strb	r3, [r7, #7]
 8002cc2:	e001      	b.n	8002cc8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002cc4:	f7ff fabe 	bl	8002244 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002cc8:	79fb      	ldrb	r3, [r7, #7]

}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	3708      	adds	r7, #8
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}
	...

08002cd4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b084      	sub	sp, #16
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002ce0:	4b16      	ldr	r3, [pc, #88]	@ (8002d3c <HAL_InitTick+0x68>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d022      	beq.n	8002d2e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002ce8:	4b15      	ldr	r3, [pc, #84]	@ (8002d40 <HAL_InitTick+0x6c>)
 8002cea:	681a      	ldr	r2, [r3, #0]
 8002cec:	4b13      	ldr	r3, [pc, #76]	@ (8002d3c <HAL_InitTick+0x68>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002cf4:	fbb1 f3f3 	udiv	r3, r1, r3
 8002cf8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	f000 f944 	bl	8002f8a <HAL_SYSTICK_Config>
 8002d02:	4603      	mov	r3, r0
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d10f      	bne.n	8002d28 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2b0f      	cmp	r3, #15
 8002d0c:	d809      	bhi.n	8002d22 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d0e:	2200      	movs	r2, #0
 8002d10:	6879      	ldr	r1, [r7, #4]
 8002d12:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002d16:	f000 f910 	bl	8002f3a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002d1a:	4a0a      	ldr	r2, [pc, #40]	@ (8002d44 <HAL_InitTick+0x70>)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6013      	str	r3, [r2, #0]
 8002d20:	e007      	b.n	8002d32 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002d22:	2301      	movs	r3, #1
 8002d24:	73fb      	strb	r3, [r7, #15]
 8002d26:	e004      	b.n	8002d32 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	73fb      	strb	r3, [r7, #15]
 8002d2c:	e001      	b.n	8002d32 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002d32:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d34:	4618      	mov	r0, r3
 8002d36:	3710      	adds	r7, #16
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bd80      	pop	{r7, pc}
 8002d3c:	20000008 	.word	0x20000008
 8002d40:	20000000 	.word	0x20000000
 8002d44:	20000004 	.word	0x20000004

08002d48 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d4c:	4b05      	ldr	r3, [pc, #20]	@ (8002d64 <HAL_IncTick+0x1c>)
 8002d4e:	681a      	ldr	r2, [r3, #0]
 8002d50:	4b05      	ldr	r3, [pc, #20]	@ (8002d68 <HAL_IncTick+0x20>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4413      	add	r3, r2
 8002d56:	4a03      	ldr	r2, [pc, #12]	@ (8002d64 <HAL_IncTick+0x1c>)
 8002d58:	6013      	str	r3, [r2, #0]
}
 8002d5a:	bf00      	nop
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d62:	4770      	bx	lr
 8002d64:	2000054c 	.word	0x2000054c
 8002d68:	20000008 	.word	0x20000008

08002d6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	af00      	add	r7, sp, #0
  return uwTick;
 8002d70:	4b03      	ldr	r3, [pc, #12]	@ (8002d80 <HAL_GetTick+0x14>)
 8002d72:	681b      	ldr	r3, [r3, #0]
}
 8002d74:	4618      	mov	r0, r3
 8002d76:	46bd      	mov	sp, r7
 8002d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7c:	4770      	bx	lr
 8002d7e:	bf00      	nop
 8002d80:	2000054c 	.word	0x2000054c

08002d84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d84:	b480      	push	{r7}
 8002d86:	b085      	sub	sp, #20
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	f003 0307 	and.w	r3, r3, #7
 8002d92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d94:	4b0c      	ldr	r3, [pc, #48]	@ (8002dc8 <__NVIC_SetPriorityGrouping+0x44>)
 8002d96:	68db      	ldr	r3, [r3, #12]
 8002d98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d9a:	68ba      	ldr	r2, [r7, #8]
 8002d9c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002da0:	4013      	ands	r3, r2
 8002da2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002da8:	68bb      	ldr	r3, [r7, #8]
 8002daa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002dac:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002db0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002db4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002db6:	4a04      	ldr	r2, [pc, #16]	@ (8002dc8 <__NVIC_SetPriorityGrouping+0x44>)
 8002db8:	68bb      	ldr	r3, [r7, #8]
 8002dba:	60d3      	str	r3, [r2, #12]
}
 8002dbc:	bf00      	nop
 8002dbe:	3714      	adds	r7, #20
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc6:	4770      	bx	lr
 8002dc8:	e000ed00 	.word	0xe000ed00

08002dcc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002dd0:	4b04      	ldr	r3, [pc, #16]	@ (8002de4 <__NVIC_GetPriorityGrouping+0x18>)
 8002dd2:	68db      	ldr	r3, [r3, #12]
 8002dd4:	0a1b      	lsrs	r3, r3, #8
 8002dd6:	f003 0307 	and.w	r3, r3, #7
}
 8002dda:	4618      	mov	r0, r3
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de2:	4770      	bx	lr
 8002de4:	e000ed00 	.word	0xe000ed00

08002de8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002de8:	b480      	push	{r7}
 8002dea:	b083      	sub	sp, #12
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	4603      	mov	r3, r0
 8002df0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002df2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	db0b      	blt.n	8002e12 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002dfa:	79fb      	ldrb	r3, [r7, #7]
 8002dfc:	f003 021f 	and.w	r2, r3, #31
 8002e00:	4907      	ldr	r1, [pc, #28]	@ (8002e20 <__NVIC_EnableIRQ+0x38>)
 8002e02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e06:	095b      	lsrs	r3, r3, #5
 8002e08:	2001      	movs	r0, #1
 8002e0a:	fa00 f202 	lsl.w	r2, r0, r2
 8002e0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002e12:	bf00      	nop
 8002e14:	370c      	adds	r7, #12
 8002e16:	46bd      	mov	sp, r7
 8002e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1c:	4770      	bx	lr
 8002e1e:	bf00      	nop
 8002e20:	e000e100 	.word	0xe000e100

08002e24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e24:	b480      	push	{r7}
 8002e26:	b083      	sub	sp, #12
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	6039      	str	r1, [r7, #0]
 8002e2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	db0a      	blt.n	8002e4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	b2da      	uxtb	r2, r3
 8002e3c:	490c      	ldr	r1, [pc, #48]	@ (8002e70 <__NVIC_SetPriority+0x4c>)
 8002e3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e42:	0112      	lsls	r2, r2, #4
 8002e44:	b2d2      	uxtb	r2, r2
 8002e46:	440b      	add	r3, r1
 8002e48:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e4c:	e00a      	b.n	8002e64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	b2da      	uxtb	r2, r3
 8002e52:	4908      	ldr	r1, [pc, #32]	@ (8002e74 <__NVIC_SetPriority+0x50>)
 8002e54:	79fb      	ldrb	r3, [r7, #7]
 8002e56:	f003 030f 	and.w	r3, r3, #15
 8002e5a:	3b04      	subs	r3, #4
 8002e5c:	0112      	lsls	r2, r2, #4
 8002e5e:	b2d2      	uxtb	r2, r2
 8002e60:	440b      	add	r3, r1
 8002e62:	761a      	strb	r2, [r3, #24]
}
 8002e64:	bf00      	nop
 8002e66:	370c      	adds	r7, #12
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6e:	4770      	bx	lr
 8002e70:	e000e100 	.word	0xe000e100
 8002e74:	e000ed00 	.word	0xe000ed00

08002e78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b089      	sub	sp, #36	@ 0x24
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	60f8      	str	r0, [r7, #12]
 8002e80:	60b9      	str	r1, [r7, #8]
 8002e82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	f003 0307 	and.w	r3, r3, #7
 8002e8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e8c:	69fb      	ldr	r3, [r7, #28]
 8002e8e:	f1c3 0307 	rsb	r3, r3, #7
 8002e92:	2b04      	cmp	r3, #4
 8002e94:	bf28      	it	cs
 8002e96:	2304      	movcs	r3, #4
 8002e98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e9a:	69fb      	ldr	r3, [r7, #28]
 8002e9c:	3304      	adds	r3, #4
 8002e9e:	2b06      	cmp	r3, #6
 8002ea0:	d902      	bls.n	8002ea8 <NVIC_EncodePriority+0x30>
 8002ea2:	69fb      	ldr	r3, [r7, #28]
 8002ea4:	3b03      	subs	r3, #3
 8002ea6:	e000      	b.n	8002eaa <NVIC_EncodePriority+0x32>
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002eac:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002eb0:	69bb      	ldr	r3, [r7, #24]
 8002eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb6:	43da      	mvns	r2, r3
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	401a      	ands	r2, r3
 8002ebc:	697b      	ldr	r3, [r7, #20]
 8002ebe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ec0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002ec4:	697b      	ldr	r3, [r7, #20]
 8002ec6:	fa01 f303 	lsl.w	r3, r1, r3
 8002eca:	43d9      	mvns	r1, r3
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ed0:	4313      	orrs	r3, r2
         );
}
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	3724      	adds	r7, #36	@ 0x24
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002edc:	4770      	bx	lr
	...

08002ee0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b082      	sub	sp, #8
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	3b01      	subs	r3, #1
 8002eec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002ef0:	d301      	bcc.n	8002ef6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	e00f      	b.n	8002f16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ef6:	4a0a      	ldr	r2, [pc, #40]	@ (8002f20 <SysTick_Config+0x40>)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	3b01      	subs	r3, #1
 8002efc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002efe:	210f      	movs	r1, #15
 8002f00:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002f04:	f7ff ff8e 	bl	8002e24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f08:	4b05      	ldr	r3, [pc, #20]	@ (8002f20 <SysTick_Config+0x40>)
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f0e:	4b04      	ldr	r3, [pc, #16]	@ (8002f20 <SysTick_Config+0x40>)
 8002f10:	2207      	movs	r2, #7
 8002f12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f14:	2300      	movs	r3, #0
}
 8002f16:	4618      	mov	r0, r3
 8002f18:	3708      	adds	r7, #8
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}
 8002f1e:	bf00      	nop
 8002f20:	e000e010 	.word	0xe000e010

08002f24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b082      	sub	sp, #8
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f2c:	6878      	ldr	r0, [r7, #4]
 8002f2e:	f7ff ff29 	bl	8002d84 <__NVIC_SetPriorityGrouping>
}
 8002f32:	bf00      	nop
 8002f34:	3708      	adds	r7, #8
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}

08002f3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f3a:	b580      	push	{r7, lr}
 8002f3c:	b086      	sub	sp, #24
 8002f3e:	af00      	add	r7, sp, #0
 8002f40:	4603      	mov	r3, r0
 8002f42:	60b9      	str	r1, [r7, #8]
 8002f44:	607a      	str	r2, [r7, #4]
 8002f46:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002f48:	f7ff ff40 	bl	8002dcc <__NVIC_GetPriorityGrouping>
 8002f4c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f4e:	687a      	ldr	r2, [r7, #4]
 8002f50:	68b9      	ldr	r1, [r7, #8]
 8002f52:	6978      	ldr	r0, [r7, #20]
 8002f54:	f7ff ff90 	bl	8002e78 <NVIC_EncodePriority>
 8002f58:	4602      	mov	r2, r0
 8002f5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f5e:	4611      	mov	r1, r2
 8002f60:	4618      	mov	r0, r3
 8002f62:	f7ff ff5f 	bl	8002e24 <__NVIC_SetPriority>
}
 8002f66:	bf00      	nop
 8002f68:	3718      	adds	r7, #24
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bd80      	pop	{r7, pc}

08002f6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f6e:	b580      	push	{r7, lr}
 8002f70:	b082      	sub	sp, #8
 8002f72:	af00      	add	r7, sp, #0
 8002f74:	4603      	mov	r3, r0
 8002f76:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	f7ff ff33 	bl	8002de8 <__NVIC_EnableIRQ>
}
 8002f82:	bf00      	nop
 8002f84:	3708      	adds	r7, #8
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bd80      	pop	{r7, pc}

08002f8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f8a:	b580      	push	{r7, lr}
 8002f8c:	b082      	sub	sp, #8
 8002f8e:	af00      	add	r7, sp, #0
 8002f90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f92:	6878      	ldr	r0, [r7, #4]
 8002f94:	f7ff ffa4 	bl	8002ee0 <SysTick_Config>
 8002f98:	4603      	mov	r3, r0
}
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	3708      	adds	r7, #8
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}
	...

08002fa4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b087      	sub	sp, #28
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
 8002fac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002fb2:	e15a      	b.n	800326a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	681a      	ldr	r2, [r3, #0]
 8002fb8:	2101      	movs	r1, #1
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	fa01 f303 	lsl.w	r3, r1, r3
 8002fc0:	4013      	ands	r3, r2
 8002fc2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	f000 814c 	beq.w	8003264 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	f003 0303 	and.w	r3, r3, #3
 8002fd4:	2b01      	cmp	r3, #1
 8002fd6:	d005      	beq.n	8002fe4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002fe0:	2b02      	cmp	r3, #2
 8002fe2:	d130      	bne.n	8003046 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002fea:	697b      	ldr	r3, [r7, #20]
 8002fec:	005b      	lsls	r3, r3, #1
 8002fee:	2203      	movs	r2, #3
 8002ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff4:	43db      	mvns	r3, r3
 8002ff6:	693a      	ldr	r2, [r7, #16]
 8002ff8:	4013      	ands	r3, r2
 8002ffa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	68da      	ldr	r2, [r3, #12]
 8003000:	697b      	ldr	r3, [r7, #20]
 8003002:	005b      	lsls	r3, r3, #1
 8003004:	fa02 f303 	lsl.w	r3, r2, r3
 8003008:	693a      	ldr	r2, [r7, #16]
 800300a:	4313      	orrs	r3, r2
 800300c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	693a      	ldr	r2, [r7, #16]
 8003012:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800301a:	2201      	movs	r2, #1
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	fa02 f303 	lsl.w	r3, r2, r3
 8003022:	43db      	mvns	r3, r3
 8003024:	693a      	ldr	r2, [r7, #16]
 8003026:	4013      	ands	r3, r2
 8003028:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	091b      	lsrs	r3, r3, #4
 8003030:	f003 0201 	and.w	r2, r3, #1
 8003034:	697b      	ldr	r3, [r7, #20]
 8003036:	fa02 f303 	lsl.w	r3, r2, r3
 800303a:	693a      	ldr	r2, [r7, #16]
 800303c:	4313      	orrs	r3, r2
 800303e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	693a      	ldr	r2, [r7, #16]
 8003044:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	f003 0303 	and.w	r3, r3, #3
 800304e:	2b03      	cmp	r3, #3
 8003050:	d017      	beq.n	8003082 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	68db      	ldr	r3, [r3, #12]
 8003056:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003058:	697b      	ldr	r3, [r7, #20]
 800305a:	005b      	lsls	r3, r3, #1
 800305c:	2203      	movs	r2, #3
 800305e:	fa02 f303 	lsl.w	r3, r2, r3
 8003062:	43db      	mvns	r3, r3
 8003064:	693a      	ldr	r2, [r7, #16]
 8003066:	4013      	ands	r3, r2
 8003068:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	689a      	ldr	r2, [r3, #8]
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	005b      	lsls	r3, r3, #1
 8003072:	fa02 f303 	lsl.w	r3, r2, r3
 8003076:	693a      	ldr	r2, [r7, #16]
 8003078:	4313      	orrs	r3, r2
 800307a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	693a      	ldr	r2, [r7, #16]
 8003080:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	f003 0303 	and.w	r3, r3, #3
 800308a:	2b02      	cmp	r3, #2
 800308c:	d123      	bne.n	80030d6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800308e:	697b      	ldr	r3, [r7, #20]
 8003090:	08da      	lsrs	r2, r3, #3
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	3208      	adds	r2, #8
 8003096:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800309a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800309c:	697b      	ldr	r3, [r7, #20]
 800309e:	f003 0307 	and.w	r3, r3, #7
 80030a2:	009b      	lsls	r3, r3, #2
 80030a4:	220f      	movs	r2, #15
 80030a6:	fa02 f303 	lsl.w	r3, r2, r3
 80030aa:	43db      	mvns	r3, r3
 80030ac:	693a      	ldr	r2, [r7, #16]
 80030ae:	4013      	ands	r3, r2
 80030b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	691a      	ldr	r2, [r3, #16]
 80030b6:	697b      	ldr	r3, [r7, #20]
 80030b8:	f003 0307 	and.w	r3, r3, #7
 80030bc:	009b      	lsls	r3, r3, #2
 80030be:	fa02 f303 	lsl.w	r3, r2, r3
 80030c2:	693a      	ldr	r2, [r7, #16]
 80030c4:	4313      	orrs	r3, r2
 80030c6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	08da      	lsrs	r2, r3, #3
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	3208      	adds	r2, #8
 80030d0:	6939      	ldr	r1, [r7, #16]
 80030d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80030dc:	697b      	ldr	r3, [r7, #20]
 80030de:	005b      	lsls	r3, r3, #1
 80030e0:	2203      	movs	r2, #3
 80030e2:	fa02 f303 	lsl.w	r3, r2, r3
 80030e6:	43db      	mvns	r3, r3
 80030e8:	693a      	ldr	r2, [r7, #16]
 80030ea:	4013      	ands	r3, r2
 80030ec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	f003 0203 	and.w	r2, r3, #3
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	005b      	lsls	r3, r3, #1
 80030fa:	fa02 f303 	lsl.w	r3, r2, r3
 80030fe:	693a      	ldr	r2, [r7, #16]
 8003100:	4313      	orrs	r3, r2
 8003102:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	693a      	ldr	r2, [r7, #16]
 8003108:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003112:	2b00      	cmp	r3, #0
 8003114:	f000 80a6 	beq.w	8003264 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003118:	4b5b      	ldr	r3, [pc, #364]	@ (8003288 <HAL_GPIO_Init+0x2e4>)
 800311a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800311c:	4a5a      	ldr	r2, [pc, #360]	@ (8003288 <HAL_GPIO_Init+0x2e4>)
 800311e:	f043 0301 	orr.w	r3, r3, #1
 8003122:	6613      	str	r3, [r2, #96]	@ 0x60
 8003124:	4b58      	ldr	r3, [pc, #352]	@ (8003288 <HAL_GPIO_Init+0x2e4>)
 8003126:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003128:	f003 0301 	and.w	r3, r3, #1
 800312c:	60bb      	str	r3, [r7, #8]
 800312e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003130:	4a56      	ldr	r2, [pc, #344]	@ (800328c <HAL_GPIO_Init+0x2e8>)
 8003132:	697b      	ldr	r3, [r7, #20]
 8003134:	089b      	lsrs	r3, r3, #2
 8003136:	3302      	adds	r3, #2
 8003138:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800313c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800313e:	697b      	ldr	r3, [r7, #20]
 8003140:	f003 0303 	and.w	r3, r3, #3
 8003144:	009b      	lsls	r3, r3, #2
 8003146:	220f      	movs	r2, #15
 8003148:	fa02 f303 	lsl.w	r3, r2, r3
 800314c:	43db      	mvns	r3, r3
 800314e:	693a      	ldr	r2, [r7, #16]
 8003150:	4013      	ands	r3, r2
 8003152:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800315a:	d01f      	beq.n	800319c <HAL_GPIO_Init+0x1f8>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	4a4c      	ldr	r2, [pc, #304]	@ (8003290 <HAL_GPIO_Init+0x2ec>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d019      	beq.n	8003198 <HAL_GPIO_Init+0x1f4>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	4a4b      	ldr	r2, [pc, #300]	@ (8003294 <HAL_GPIO_Init+0x2f0>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d013      	beq.n	8003194 <HAL_GPIO_Init+0x1f0>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	4a4a      	ldr	r2, [pc, #296]	@ (8003298 <HAL_GPIO_Init+0x2f4>)
 8003170:	4293      	cmp	r3, r2
 8003172:	d00d      	beq.n	8003190 <HAL_GPIO_Init+0x1ec>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	4a49      	ldr	r2, [pc, #292]	@ (800329c <HAL_GPIO_Init+0x2f8>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d007      	beq.n	800318c <HAL_GPIO_Init+0x1e8>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	4a48      	ldr	r2, [pc, #288]	@ (80032a0 <HAL_GPIO_Init+0x2fc>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d101      	bne.n	8003188 <HAL_GPIO_Init+0x1e4>
 8003184:	2305      	movs	r3, #5
 8003186:	e00a      	b.n	800319e <HAL_GPIO_Init+0x1fa>
 8003188:	2306      	movs	r3, #6
 800318a:	e008      	b.n	800319e <HAL_GPIO_Init+0x1fa>
 800318c:	2304      	movs	r3, #4
 800318e:	e006      	b.n	800319e <HAL_GPIO_Init+0x1fa>
 8003190:	2303      	movs	r3, #3
 8003192:	e004      	b.n	800319e <HAL_GPIO_Init+0x1fa>
 8003194:	2302      	movs	r3, #2
 8003196:	e002      	b.n	800319e <HAL_GPIO_Init+0x1fa>
 8003198:	2301      	movs	r3, #1
 800319a:	e000      	b.n	800319e <HAL_GPIO_Init+0x1fa>
 800319c:	2300      	movs	r3, #0
 800319e:	697a      	ldr	r2, [r7, #20]
 80031a0:	f002 0203 	and.w	r2, r2, #3
 80031a4:	0092      	lsls	r2, r2, #2
 80031a6:	4093      	lsls	r3, r2
 80031a8:	693a      	ldr	r2, [r7, #16]
 80031aa:	4313      	orrs	r3, r2
 80031ac:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80031ae:	4937      	ldr	r1, [pc, #220]	@ (800328c <HAL_GPIO_Init+0x2e8>)
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	089b      	lsrs	r3, r3, #2
 80031b4:	3302      	adds	r3, #2
 80031b6:	693a      	ldr	r2, [r7, #16]
 80031b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80031bc:	4b39      	ldr	r3, [pc, #228]	@ (80032a4 <HAL_GPIO_Init+0x300>)
 80031be:	689b      	ldr	r3, [r3, #8]
 80031c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	43db      	mvns	r3, r3
 80031c6:	693a      	ldr	r2, [r7, #16]
 80031c8:	4013      	ands	r3, r2
 80031ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d003      	beq.n	80031e0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80031d8:	693a      	ldr	r2, [r7, #16]
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	4313      	orrs	r3, r2
 80031de:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80031e0:	4a30      	ldr	r2, [pc, #192]	@ (80032a4 <HAL_GPIO_Init+0x300>)
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80031e6:	4b2f      	ldr	r3, [pc, #188]	@ (80032a4 <HAL_GPIO_Init+0x300>)
 80031e8:	68db      	ldr	r3, [r3, #12]
 80031ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	43db      	mvns	r3, r3
 80031f0:	693a      	ldr	r2, [r7, #16]
 80031f2:	4013      	ands	r3, r2
 80031f4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d003      	beq.n	800320a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003202:	693a      	ldr	r2, [r7, #16]
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	4313      	orrs	r3, r2
 8003208:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800320a:	4a26      	ldr	r2, [pc, #152]	@ (80032a4 <HAL_GPIO_Init+0x300>)
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003210:	4b24      	ldr	r3, [pc, #144]	@ (80032a4 <HAL_GPIO_Init+0x300>)
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	43db      	mvns	r3, r3
 800321a:	693a      	ldr	r2, [r7, #16]
 800321c:	4013      	ands	r3, r2
 800321e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003228:	2b00      	cmp	r3, #0
 800322a:	d003      	beq.n	8003234 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800322c:	693a      	ldr	r2, [r7, #16]
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	4313      	orrs	r3, r2
 8003232:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003234:	4a1b      	ldr	r2, [pc, #108]	@ (80032a4 <HAL_GPIO_Init+0x300>)
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800323a:	4b1a      	ldr	r3, [pc, #104]	@ (80032a4 <HAL_GPIO_Init+0x300>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	43db      	mvns	r3, r3
 8003244:	693a      	ldr	r2, [r7, #16]
 8003246:	4013      	ands	r3, r2
 8003248:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003252:	2b00      	cmp	r3, #0
 8003254:	d003      	beq.n	800325e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003256:	693a      	ldr	r2, [r7, #16]
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	4313      	orrs	r3, r2
 800325c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800325e:	4a11      	ldr	r2, [pc, #68]	@ (80032a4 <HAL_GPIO_Init+0x300>)
 8003260:	693b      	ldr	r3, [r7, #16]
 8003262:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003264:	697b      	ldr	r3, [r7, #20]
 8003266:	3301      	adds	r3, #1
 8003268:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	681a      	ldr	r2, [r3, #0]
 800326e:	697b      	ldr	r3, [r7, #20]
 8003270:	fa22 f303 	lsr.w	r3, r2, r3
 8003274:	2b00      	cmp	r3, #0
 8003276:	f47f ae9d 	bne.w	8002fb4 <HAL_GPIO_Init+0x10>
  }
}
 800327a:	bf00      	nop
 800327c:	bf00      	nop
 800327e:	371c      	adds	r7, #28
 8003280:	46bd      	mov	sp, r7
 8003282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003286:	4770      	bx	lr
 8003288:	40021000 	.word	0x40021000
 800328c:	40010000 	.word	0x40010000
 8003290:	48000400 	.word	0x48000400
 8003294:	48000800 	.word	0x48000800
 8003298:	48000c00 	.word	0x48000c00
 800329c:	48001000 	.word	0x48001000
 80032a0:	48001400 	.word	0x48001400
 80032a4:	40010400 	.word	0x40010400

080032a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80032a8:	b480      	push	{r7}
 80032aa:	b083      	sub	sp, #12
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
 80032b0:	460b      	mov	r3, r1
 80032b2:	807b      	strh	r3, [r7, #2]
 80032b4:	4613      	mov	r3, r2
 80032b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80032b8:	787b      	ldrb	r3, [r7, #1]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d003      	beq.n	80032c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80032be:	887a      	ldrh	r2, [r7, #2]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80032c4:	e002      	b.n	80032cc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80032c6:	887a      	ldrh	r2, [r7, #2]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80032cc:	bf00      	nop
 80032ce:	370c      	adds	r7, #12
 80032d0:	46bd      	mov	sp, r7
 80032d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d6:	4770      	bx	lr

080032d8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b082      	sub	sp, #8
 80032dc:	af00      	add	r7, sp, #0
 80032de:	4603      	mov	r3, r0
 80032e0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80032e2:	4b08      	ldr	r3, [pc, #32]	@ (8003304 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80032e4:	695a      	ldr	r2, [r3, #20]
 80032e6:	88fb      	ldrh	r3, [r7, #6]
 80032e8:	4013      	ands	r3, r2
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d006      	beq.n	80032fc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80032ee:	4a05      	ldr	r2, [pc, #20]	@ (8003304 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80032f0:	88fb      	ldrh	r3, [r7, #6]
 80032f2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80032f4:	88fb      	ldrh	r3, [r7, #6]
 80032f6:	4618      	mov	r0, r3
 80032f8:	f000 f806 	bl	8003308 <HAL_GPIO_EXTI_Callback>
  }
}
 80032fc:	bf00      	nop
 80032fe:	3708      	adds	r7, #8
 8003300:	46bd      	mov	sp, r7
 8003302:	bd80      	pop	{r7, pc}
 8003304:	40010400 	.word	0x40010400

08003308 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003308:	b480      	push	{r7}
 800330a:	b083      	sub	sp, #12
 800330c:	af00      	add	r7, sp, #0
 800330e:	4603      	mov	r3, r0
 8003310:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003312:	bf00      	nop
 8003314:	370c      	adds	r7, #12
 8003316:	46bd      	mov	sp, r7
 8003318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331c:	4770      	bx	lr
	...

08003320 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003320:	b480      	push	{r7}
 8003322:	b085      	sub	sp, #20
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d141      	bne.n	80033b2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800332e:	4b4b      	ldr	r3, [pc, #300]	@ (800345c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003336:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800333a:	d131      	bne.n	80033a0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800333c:	4b47      	ldr	r3, [pc, #284]	@ (800345c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800333e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003342:	4a46      	ldr	r2, [pc, #280]	@ (800345c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003344:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003348:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800334c:	4b43      	ldr	r3, [pc, #268]	@ (800345c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003354:	4a41      	ldr	r2, [pc, #260]	@ (800345c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003356:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800335a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800335c:	4b40      	ldr	r3, [pc, #256]	@ (8003460 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	2232      	movs	r2, #50	@ 0x32
 8003362:	fb02 f303 	mul.w	r3, r2, r3
 8003366:	4a3f      	ldr	r2, [pc, #252]	@ (8003464 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003368:	fba2 2303 	umull	r2, r3, r2, r3
 800336c:	0c9b      	lsrs	r3, r3, #18
 800336e:	3301      	adds	r3, #1
 8003370:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003372:	e002      	b.n	800337a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	3b01      	subs	r3, #1
 8003378:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800337a:	4b38      	ldr	r3, [pc, #224]	@ (800345c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800337c:	695b      	ldr	r3, [r3, #20]
 800337e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003382:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003386:	d102      	bne.n	800338e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d1f2      	bne.n	8003374 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800338e:	4b33      	ldr	r3, [pc, #204]	@ (800345c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003390:	695b      	ldr	r3, [r3, #20]
 8003392:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003396:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800339a:	d158      	bne.n	800344e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800339c:	2303      	movs	r3, #3
 800339e:	e057      	b.n	8003450 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80033a0:	4b2e      	ldr	r3, [pc, #184]	@ (800345c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80033a6:	4a2d      	ldr	r2, [pc, #180]	@ (800345c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80033ac:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80033b0:	e04d      	b.n	800344e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80033b8:	d141      	bne.n	800343e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80033ba:	4b28      	ldr	r3, [pc, #160]	@ (800345c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80033c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80033c6:	d131      	bne.n	800342c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80033c8:	4b24      	ldr	r3, [pc, #144]	@ (800345c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80033ce:	4a23      	ldr	r2, [pc, #140]	@ (800345c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80033d4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80033d8:	4b20      	ldr	r3, [pc, #128]	@ (800345c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80033e0:	4a1e      	ldr	r2, [pc, #120]	@ (800345c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033e2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80033e6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80033e8:	4b1d      	ldr	r3, [pc, #116]	@ (8003460 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	2232      	movs	r2, #50	@ 0x32
 80033ee:	fb02 f303 	mul.w	r3, r2, r3
 80033f2:	4a1c      	ldr	r2, [pc, #112]	@ (8003464 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80033f4:	fba2 2303 	umull	r2, r3, r2, r3
 80033f8:	0c9b      	lsrs	r3, r3, #18
 80033fa:	3301      	adds	r3, #1
 80033fc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80033fe:	e002      	b.n	8003406 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	3b01      	subs	r3, #1
 8003404:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003406:	4b15      	ldr	r3, [pc, #84]	@ (800345c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003408:	695b      	ldr	r3, [r3, #20]
 800340a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800340e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003412:	d102      	bne.n	800341a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d1f2      	bne.n	8003400 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800341a:	4b10      	ldr	r3, [pc, #64]	@ (800345c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800341c:	695b      	ldr	r3, [r3, #20]
 800341e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003422:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003426:	d112      	bne.n	800344e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003428:	2303      	movs	r3, #3
 800342a:	e011      	b.n	8003450 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800342c:	4b0b      	ldr	r3, [pc, #44]	@ (800345c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800342e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003432:	4a0a      	ldr	r2, [pc, #40]	@ (800345c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003434:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003438:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800343c:	e007      	b.n	800344e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800343e:	4b07      	ldr	r3, [pc, #28]	@ (800345c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003446:	4a05      	ldr	r2, [pc, #20]	@ (800345c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003448:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800344c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800344e:	2300      	movs	r3, #0
}
 8003450:	4618      	mov	r0, r3
 8003452:	3714      	adds	r7, #20
 8003454:	46bd      	mov	sp, r7
 8003456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345a:	4770      	bx	lr
 800345c:	40007000 	.word	0x40007000
 8003460:	20000000 	.word	0x20000000
 8003464:	431bde83 	.word	0x431bde83

08003468 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003468:	b480      	push	{r7}
 800346a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800346c:	4b05      	ldr	r3, [pc, #20]	@ (8003484 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	4a04      	ldr	r2, [pc, #16]	@ (8003484 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003472:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003476:	6093      	str	r3, [r2, #8]
}
 8003478:	bf00      	nop
 800347a:	46bd      	mov	sp, r7
 800347c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003480:	4770      	bx	lr
 8003482:	bf00      	nop
 8003484:	40007000 	.word	0x40007000

08003488 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b088      	sub	sp, #32
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d101      	bne.n	800349a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003496:	2301      	movs	r3, #1
 8003498:	e2fe      	b.n	8003a98 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f003 0301 	and.w	r3, r3, #1
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d075      	beq.n	8003592 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80034a6:	4b97      	ldr	r3, [pc, #604]	@ (8003704 <HAL_RCC_OscConfig+0x27c>)
 80034a8:	689b      	ldr	r3, [r3, #8]
 80034aa:	f003 030c 	and.w	r3, r3, #12
 80034ae:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80034b0:	4b94      	ldr	r3, [pc, #592]	@ (8003704 <HAL_RCC_OscConfig+0x27c>)
 80034b2:	68db      	ldr	r3, [r3, #12]
 80034b4:	f003 0303 	and.w	r3, r3, #3
 80034b8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80034ba:	69bb      	ldr	r3, [r7, #24]
 80034bc:	2b0c      	cmp	r3, #12
 80034be:	d102      	bne.n	80034c6 <HAL_RCC_OscConfig+0x3e>
 80034c0:	697b      	ldr	r3, [r7, #20]
 80034c2:	2b03      	cmp	r3, #3
 80034c4:	d002      	beq.n	80034cc <HAL_RCC_OscConfig+0x44>
 80034c6:	69bb      	ldr	r3, [r7, #24]
 80034c8:	2b08      	cmp	r3, #8
 80034ca:	d10b      	bne.n	80034e4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034cc:	4b8d      	ldr	r3, [pc, #564]	@ (8003704 <HAL_RCC_OscConfig+0x27c>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d05b      	beq.n	8003590 <HAL_RCC_OscConfig+0x108>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d157      	bne.n	8003590 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80034e0:	2301      	movs	r3, #1
 80034e2:	e2d9      	b.n	8003a98 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80034ec:	d106      	bne.n	80034fc <HAL_RCC_OscConfig+0x74>
 80034ee:	4b85      	ldr	r3, [pc, #532]	@ (8003704 <HAL_RCC_OscConfig+0x27c>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a84      	ldr	r2, [pc, #528]	@ (8003704 <HAL_RCC_OscConfig+0x27c>)
 80034f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80034f8:	6013      	str	r3, [r2, #0]
 80034fa:	e01d      	b.n	8003538 <HAL_RCC_OscConfig+0xb0>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003504:	d10c      	bne.n	8003520 <HAL_RCC_OscConfig+0x98>
 8003506:	4b7f      	ldr	r3, [pc, #508]	@ (8003704 <HAL_RCC_OscConfig+0x27c>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a7e      	ldr	r2, [pc, #504]	@ (8003704 <HAL_RCC_OscConfig+0x27c>)
 800350c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003510:	6013      	str	r3, [r2, #0]
 8003512:	4b7c      	ldr	r3, [pc, #496]	@ (8003704 <HAL_RCC_OscConfig+0x27c>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4a7b      	ldr	r2, [pc, #492]	@ (8003704 <HAL_RCC_OscConfig+0x27c>)
 8003518:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800351c:	6013      	str	r3, [r2, #0]
 800351e:	e00b      	b.n	8003538 <HAL_RCC_OscConfig+0xb0>
 8003520:	4b78      	ldr	r3, [pc, #480]	@ (8003704 <HAL_RCC_OscConfig+0x27c>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a77      	ldr	r2, [pc, #476]	@ (8003704 <HAL_RCC_OscConfig+0x27c>)
 8003526:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800352a:	6013      	str	r3, [r2, #0]
 800352c:	4b75      	ldr	r3, [pc, #468]	@ (8003704 <HAL_RCC_OscConfig+0x27c>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a74      	ldr	r2, [pc, #464]	@ (8003704 <HAL_RCC_OscConfig+0x27c>)
 8003532:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003536:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d013      	beq.n	8003568 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003540:	f7ff fc14 	bl	8002d6c <HAL_GetTick>
 8003544:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003546:	e008      	b.n	800355a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003548:	f7ff fc10 	bl	8002d6c <HAL_GetTick>
 800354c:	4602      	mov	r2, r0
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	1ad3      	subs	r3, r2, r3
 8003552:	2b64      	cmp	r3, #100	@ 0x64
 8003554:	d901      	bls.n	800355a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003556:	2303      	movs	r3, #3
 8003558:	e29e      	b.n	8003a98 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800355a:	4b6a      	ldr	r3, [pc, #424]	@ (8003704 <HAL_RCC_OscConfig+0x27c>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003562:	2b00      	cmp	r3, #0
 8003564:	d0f0      	beq.n	8003548 <HAL_RCC_OscConfig+0xc0>
 8003566:	e014      	b.n	8003592 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003568:	f7ff fc00 	bl	8002d6c <HAL_GetTick>
 800356c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800356e:	e008      	b.n	8003582 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003570:	f7ff fbfc 	bl	8002d6c <HAL_GetTick>
 8003574:	4602      	mov	r2, r0
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	1ad3      	subs	r3, r2, r3
 800357a:	2b64      	cmp	r3, #100	@ 0x64
 800357c:	d901      	bls.n	8003582 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800357e:	2303      	movs	r3, #3
 8003580:	e28a      	b.n	8003a98 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003582:	4b60      	ldr	r3, [pc, #384]	@ (8003704 <HAL_RCC_OscConfig+0x27c>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800358a:	2b00      	cmp	r3, #0
 800358c:	d1f0      	bne.n	8003570 <HAL_RCC_OscConfig+0xe8>
 800358e:	e000      	b.n	8003592 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003590:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f003 0302 	and.w	r3, r3, #2
 800359a:	2b00      	cmp	r3, #0
 800359c:	d075      	beq.n	800368a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800359e:	4b59      	ldr	r3, [pc, #356]	@ (8003704 <HAL_RCC_OscConfig+0x27c>)
 80035a0:	689b      	ldr	r3, [r3, #8]
 80035a2:	f003 030c 	and.w	r3, r3, #12
 80035a6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80035a8:	4b56      	ldr	r3, [pc, #344]	@ (8003704 <HAL_RCC_OscConfig+0x27c>)
 80035aa:	68db      	ldr	r3, [r3, #12]
 80035ac:	f003 0303 	and.w	r3, r3, #3
 80035b0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80035b2:	69bb      	ldr	r3, [r7, #24]
 80035b4:	2b0c      	cmp	r3, #12
 80035b6:	d102      	bne.n	80035be <HAL_RCC_OscConfig+0x136>
 80035b8:	697b      	ldr	r3, [r7, #20]
 80035ba:	2b02      	cmp	r3, #2
 80035bc:	d002      	beq.n	80035c4 <HAL_RCC_OscConfig+0x13c>
 80035be:	69bb      	ldr	r3, [r7, #24]
 80035c0:	2b04      	cmp	r3, #4
 80035c2:	d11f      	bne.n	8003604 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80035c4:	4b4f      	ldr	r3, [pc, #316]	@ (8003704 <HAL_RCC_OscConfig+0x27c>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d005      	beq.n	80035dc <HAL_RCC_OscConfig+0x154>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	68db      	ldr	r3, [r3, #12]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d101      	bne.n	80035dc <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80035d8:	2301      	movs	r3, #1
 80035da:	e25d      	b.n	8003a98 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035dc:	4b49      	ldr	r3, [pc, #292]	@ (8003704 <HAL_RCC_OscConfig+0x27c>)
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	691b      	ldr	r3, [r3, #16]
 80035e8:	061b      	lsls	r3, r3, #24
 80035ea:	4946      	ldr	r1, [pc, #280]	@ (8003704 <HAL_RCC_OscConfig+0x27c>)
 80035ec:	4313      	orrs	r3, r2
 80035ee:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80035f0:	4b45      	ldr	r3, [pc, #276]	@ (8003708 <HAL_RCC_OscConfig+0x280>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4618      	mov	r0, r3
 80035f6:	f7ff fb6d 	bl	8002cd4 <HAL_InitTick>
 80035fa:	4603      	mov	r3, r0
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d043      	beq.n	8003688 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003600:	2301      	movs	r3, #1
 8003602:	e249      	b.n	8003a98 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	68db      	ldr	r3, [r3, #12]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d023      	beq.n	8003654 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800360c:	4b3d      	ldr	r3, [pc, #244]	@ (8003704 <HAL_RCC_OscConfig+0x27c>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a3c      	ldr	r2, [pc, #240]	@ (8003704 <HAL_RCC_OscConfig+0x27c>)
 8003612:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003616:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003618:	f7ff fba8 	bl	8002d6c <HAL_GetTick>
 800361c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800361e:	e008      	b.n	8003632 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003620:	f7ff fba4 	bl	8002d6c <HAL_GetTick>
 8003624:	4602      	mov	r2, r0
 8003626:	693b      	ldr	r3, [r7, #16]
 8003628:	1ad3      	subs	r3, r2, r3
 800362a:	2b02      	cmp	r3, #2
 800362c:	d901      	bls.n	8003632 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800362e:	2303      	movs	r3, #3
 8003630:	e232      	b.n	8003a98 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003632:	4b34      	ldr	r3, [pc, #208]	@ (8003704 <HAL_RCC_OscConfig+0x27c>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800363a:	2b00      	cmp	r3, #0
 800363c:	d0f0      	beq.n	8003620 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800363e:	4b31      	ldr	r3, [pc, #196]	@ (8003704 <HAL_RCC_OscConfig+0x27c>)
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	691b      	ldr	r3, [r3, #16]
 800364a:	061b      	lsls	r3, r3, #24
 800364c:	492d      	ldr	r1, [pc, #180]	@ (8003704 <HAL_RCC_OscConfig+0x27c>)
 800364e:	4313      	orrs	r3, r2
 8003650:	604b      	str	r3, [r1, #4]
 8003652:	e01a      	b.n	800368a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003654:	4b2b      	ldr	r3, [pc, #172]	@ (8003704 <HAL_RCC_OscConfig+0x27c>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a2a      	ldr	r2, [pc, #168]	@ (8003704 <HAL_RCC_OscConfig+0x27c>)
 800365a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800365e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003660:	f7ff fb84 	bl	8002d6c <HAL_GetTick>
 8003664:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003666:	e008      	b.n	800367a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003668:	f7ff fb80 	bl	8002d6c <HAL_GetTick>
 800366c:	4602      	mov	r2, r0
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	1ad3      	subs	r3, r2, r3
 8003672:	2b02      	cmp	r3, #2
 8003674:	d901      	bls.n	800367a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003676:	2303      	movs	r3, #3
 8003678:	e20e      	b.n	8003a98 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800367a:	4b22      	ldr	r3, [pc, #136]	@ (8003704 <HAL_RCC_OscConfig+0x27c>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003682:	2b00      	cmp	r3, #0
 8003684:	d1f0      	bne.n	8003668 <HAL_RCC_OscConfig+0x1e0>
 8003686:	e000      	b.n	800368a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003688:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f003 0308 	and.w	r3, r3, #8
 8003692:	2b00      	cmp	r3, #0
 8003694:	d041      	beq.n	800371a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	695b      	ldr	r3, [r3, #20]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d01c      	beq.n	80036d8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800369e:	4b19      	ldr	r3, [pc, #100]	@ (8003704 <HAL_RCC_OscConfig+0x27c>)
 80036a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80036a4:	4a17      	ldr	r2, [pc, #92]	@ (8003704 <HAL_RCC_OscConfig+0x27c>)
 80036a6:	f043 0301 	orr.w	r3, r3, #1
 80036aa:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036ae:	f7ff fb5d 	bl	8002d6c <HAL_GetTick>
 80036b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80036b4:	e008      	b.n	80036c8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036b6:	f7ff fb59 	bl	8002d6c <HAL_GetTick>
 80036ba:	4602      	mov	r2, r0
 80036bc:	693b      	ldr	r3, [r7, #16]
 80036be:	1ad3      	subs	r3, r2, r3
 80036c0:	2b02      	cmp	r3, #2
 80036c2:	d901      	bls.n	80036c8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80036c4:	2303      	movs	r3, #3
 80036c6:	e1e7      	b.n	8003a98 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80036c8:	4b0e      	ldr	r3, [pc, #56]	@ (8003704 <HAL_RCC_OscConfig+0x27c>)
 80036ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80036ce:	f003 0302 	and.w	r3, r3, #2
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d0ef      	beq.n	80036b6 <HAL_RCC_OscConfig+0x22e>
 80036d6:	e020      	b.n	800371a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036d8:	4b0a      	ldr	r3, [pc, #40]	@ (8003704 <HAL_RCC_OscConfig+0x27c>)
 80036da:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80036de:	4a09      	ldr	r2, [pc, #36]	@ (8003704 <HAL_RCC_OscConfig+0x27c>)
 80036e0:	f023 0301 	bic.w	r3, r3, #1
 80036e4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036e8:	f7ff fb40 	bl	8002d6c <HAL_GetTick>
 80036ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80036ee:	e00d      	b.n	800370c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036f0:	f7ff fb3c 	bl	8002d6c <HAL_GetTick>
 80036f4:	4602      	mov	r2, r0
 80036f6:	693b      	ldr	r3, [r7, #16]
 80036f8:	1ad3      	subs	r3, r2, r3
 80036fa:	2b02      	cmp	r3, #2
 80036fc:	d906      	bls.n	800370c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80036fe:	2303      	movs	r3, #3
 8003700:	e1ca      	b.n	8003a98 <HAL_RCC_OscConfig+0x610>
 8003702:	bf00      	nop
 8003704:	40021000 	.word	0x40021000
 8003708:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800370c:	4b8c      	ldr	r3, [pc, #560]	@ (8003940 <HAL_RCC_OscConfig+0x4b8>)
 800370e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003712:	f003 0302 	and.w	r3, r3, #2
 8003716:	2b00      	cmp	r3, #0
 8003718:	d1ea      	bne.n	80036f0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f003 0304 	and.w	r3, r3, #4
 8003722:	2b00      	cmp	r3, #0
 8003724:	f000 80a6 	beq.w	8003874 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003728:	2300      	movs	r3, #0
 800372a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800372c:	4b84      	ldr	r3, [pc, #528]	@ (8003940 <HAL_RCC_OscConfig+0x4b8>)
 800372e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003730:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003734:	2b00      	cmp	r3, #0
 8003736:	d101      	bne.n	800373c <HAL_RCC_OscConfig+0x2b4>
 8003738:	2301      	movs	r3, #1
 800373a:	e000      	b.n	800373e <HAL_RCC_OscConfig+0x2b6>
 800373c:	2300      	movs	r3, #0
 800373e:	2b00      	cmp	r3, #0
 8003740:	d00d      	beq.n	800375e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003742:	4b7f      	ldr	r3, [pc, #508]	@ (8003940 <HAL_RCC_OscConfig+0x4b8>)
 8003744:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003746:	4a7e      	ldr	r2, [pc, #504]	@ (8003940 <HAL_RCC_OscConfig+0x4b8>)
 8003748:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800374c:	6593      	str	r3, [r2, #88]	@ 0x58
 800374e:	4b7c      	ldr	r3, [pc, #496]	@ (8003940 <HAL_RCC_OscConfig+0x4b8>)
 8003750:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003752:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003756:	60fb      	str	r3, [r7, #12]
 8003758:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800375a:	2301      	movs	r3, #1
 800375c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800375e:	4b79      	ldr	r3, [pc, #484]	@ (8003944 <HAL_RCC_OscConfig+0x4bc>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003766:	2b00      	cmp	r3, #0
 8003768:	d118      	bne.n	800379c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800376a:	4b76      	ldr	r3, [pc, #472]	@ (8003944 <HAL_RCC_OscConfig+0x4bc>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4a75      	ldr	r2, [pc, #468]	@ (8003944 <HAL_RCC_OscConfig+0x4bc>)
 8003770:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003774:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003776:	f7ff faf9 	bl	8002d6c <HAL_GetTick>
 800377a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800377c:	e008      	b.n	8003790 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800377e:	f7ff faf5 	bl	8002d6c <HAL_GetTick>
 8003782:	4602      	mov	r2, r0
 8003784:	693b      	ldr	r3, [r7, #16]
 8003786:	1ad3      	subs	r3, r2, r3
 8003788:	2b02      	cmp	r3, #2
 800378a:	d901      	bls.n	8003790 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800378c:	2303      	movs	r3, #3
 800378e:	e183      	b.n	8003a98 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003790:	4b6c      	ldr	r3, [pc, #432]	@ (8003944 <HAL_RCC_OscConfig+0x4bc>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003798:	2b00      	cmp	r3, #0
 800379a:	d0f0      	beq.n	800377e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	689b      	ldr	r3, [r3, #8]
 80037a0:	2b01      	cmp	r3, #1
 80037a2:	d108      	bne.n	80037b6 <HAL_RCC_OscConfig+0x32e>
 80037a4:	4b66      	ldr	r3, [pc, #408]	@ (8003940 <HAL_RCC_OscConfig+0x4b8>)
 80037a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037aa:	4a65      	ldr	r2, [pc, #404]	@ (8003940 <HAL_RCC_OscConfig+0x4b8>)
 80037ac:	f043 0301 	orr.w	r3, r3, #1
 80037b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80037b4:	e024      	b.n	8003800 <HAL_RCC_OscConfig+0x378>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	689b      	ldr	r3, [r3, #8]
 80037ba:	2b05      	cmp	r3, #5
 80037bc:	d110      	bne.n	80037e0 <HAL_RCC_OscConfig+0x358>
 80037be:	4b60      	ldr	r3, [pc, #384]	@ (8003940 <HAL_RCC_OscConfig+0x4b8>)
 80037c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037c4:	4a5e      	ldr	r2, [pc, #376]	@ (8003940 <HAL_RCC_OscConfig+0x4b8>)
 80037c6:	f043 0304 	orr.w	r3, r3, #4
 80037ca:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80037ce:	4b5c      	ldr	r3, [pc, #368]	@ (8003940 <HAL_RCC_OscConfig+0x4b8>)
 80037d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037d4:	4a5a      	ldr	r2, [pc, #360]	@ (8003940 <HAL_RCC_OscConfig+0x4b8>)
 80037d6:	f043 0301 	orr.w	r3, r3, #1
 80037da:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80037de:	e00f      	b.n	8003800 <HAL_RCC_OscConfig+0x378>
 80037e0:	4b57      	ldr	r3, [pc, #348]	@ (8003940 <HAL_RCC_OscConfig+0x4b8>)
 80037e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037e6:	4a56      	ldr	r2, [pc, #344]	@ (8003940 <HAL_RCC_OscConfig+0x4b8>)
 80037e8:	f023 0301 	bic.w	r3, r3, #1
 80037ec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80037f0:	4b53      	ldr	r3, [pc, #332]	@ (8003940 <HAL_RCC_OscConfig+0x4b8>)
 80037f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037f6:	4a52      	ldr	r2, [pc, #328]	@ (8003940 <HAL_RCC_OscConfig+0x4b8>)
 80037f8:	f023 0304 	bic.w	r3, r3, #4
 80037fc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	689b      	ldr	r3, [r3, #8]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d016      	beq.n	8003836 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003808:	f7ff fab0 	bl	8002d6c <HAL_GetTick>
 800380c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800380e:	e00a      	b.n	8003826 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003810:	f7ff faac 	bl	8002d6c <HAL_GetTick>
 8003814:	4602      	mov	r2, r0
 8003816:	693b      	ldr	r3, [r7, #16]
 8003818:	1ad3      	subs	r3, r2, r3
 800381a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800381e:	4293      	cmp	r3, r2
 8003820:	d901      	bls.n	8003826 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003822:	2303      	movs	r3, #3
 8003824:	e138      	b.n	8003a98 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003826:	4b46      	ldr	r3, [pc, #280]	@ (8003940 <HAL_RCC_OscConfig+0x4b8>)
 8003828:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800382c:	f003 0302 	and.w	r3, r3, #2
 8003830:	2b00      	cmp	r3, #0
 8003832:	d0ed      	beq.n	8003810 <HAL_RCC_OscConfig+0x388>
 8003834:	e015      	b.n	8003862 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003836:	f7ff fa99 	bl	8002d6c <HAL_GetTick>
 800383a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800383c:	e00a      	b.n	8003854 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800383e:	f7ff fa95 	bl	8002d6c <HAL_GetTick>
 8003842:	4602      	mov	r2, r0
 8003844:	693b      	ldr	r3, [r7, #16]
 8003846:	1ad3      	subs	r3, r2, r3
 8003848:	f241 3288 	movw	r2, #5000	@ 0x1388
 800384c:	4293      	cmp	r3, r2
 800384e:	d901      	bls.n	8003854 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003850:	2303      	movs	r3, #3
 8003852:	e121      	b.n	8003a98 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003854:	4b3a      	ldr	r3, [pc, #232]	@ (8003940 <HAL_RCC_OscConfig+0x4b8>)
 8003856:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800385a:	f003 0302 	and.w	r3, r3, #2
 800385e:	2b00      	cmp	r3, #0
 8003860:	d1ed      	bne.n	800383e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003862:	7ffb      	ldrb	r3, [r7, #31]
 8003864:	2b01      	cmp	r3, #1
 8003866:	d105      	bne.n	8003874 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003868:	4b35      	ldr	r3, [pc, #212]	@ (8003940 <HAL_RCC_OscConfig+0x4b8>)
 800386a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800386c:	4a34      	ldr	r2, [pc, #208]	@ (8003940 <HAL_RCC_OscConfig+0x4b8>)
 800386e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003872:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f003 0320 	and.w	r3, r3, #32
 800387c:	2b00      	cmp	r3, #0
 800387e:	d03c      	beq.n	80038fa <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	699b      	ldr	r3, [r3, #24]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d01c      	beq.n	80038c2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003888:	4b2d      	ldr	r3, [pc, #180]	@ (8003940 <HAL_RCC_OscConfig+0x4b8>)
 800388a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800388e:	4a2c      	ldr	r2, [pc, #176]	@ (8003940 <HAL_RCC_OscConfig+0x4b8>)
 8003890:	f043 0301 	orr.w	r3, r3, #1
 8003894:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003898:	f7ff fa68 	bl	8002d6c <HAL_GetTick>
 800389c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800389e:	e008      	b.n	80038b2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80038a0:	f7ff fa64 	bl	8002d6c <HAL_GetTick>
 80038a4:	4602      	mov	r2, r0
 80038a6:	693b      	ldr	r3, [r7, #16]
 80038a8:	1ad3      	subs	r3, r2, r3
 80038aa:	2b02      	cmp	r3, #2
 80038ac:	d901      	bls.n	80038b2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80038ae:	2303      	movs	r3, #3
 80038b0:	e0f2      	b.n	8003a98 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80038b2:	4b23      	ldr	r3, [pc, #140]	@ (8003940 <HAL_RCC_OscConfig+0x4b8>)
 80038b4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80038b8:	f003 0302 	and.w	r3, r3, #2
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d0ef      	beq.n	80038a0 <HAL_RCC_OscConfig+0x418>
 80038c0:	e01b      	b.n	80038fa <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80038c2:	4b1f      	ldr	r3, [pc, #124]	@ (8003940 <HAL_RCC_OscConfig+0x4b8>)
 80038c4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80038c8:	4a1d      	ldr	r2, [pc, #116]	@ (8003940 <HAL_RCC_OscConfig+0x4b8>)
 80038ca:	f023 0301 	bic.w	r3, r3, #1
 80038ce:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038d2:	f7ff fa4b 	bl	8002d6c <HAL_GetTick>
 80038d6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80038d8:	e008      	b.n	80038ec <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80038da:	f7ff fa47 	bl	8002d6c <HAL_GetTick>
 80038de:	4602      	mov	r2, r0
 80038e0:	693b      	ldr	r3, [r7, #16]
 80038e2:	1ad3      	subs	r3, r2, r3
 80038e4:	2b02      	cmp	r3, #2
 80038e6:	d901      	bls.n	80038ec <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80038e8:	2303      	movs	r3, #3
 80038ea:	e0d5      	b.n	8003a98 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80038ec:	4b14      	ldr	r3, [pc, #80]	@ (8003940 <HAL_RCC_OscConfig+0x4b8>)
 80038ee:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80038f2:	f003 0302 	and.w	r3, r3, #2
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d1ef      	bne.n	80038da <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	69db      	ldr	r3, [r3, #28]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	f000 80c9 	beq.w	8003a96 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003904:	4b0e      	ldr	r3, [pc, #56]	@ (8003940 <HAL_RCC_OscConfig+0x4b8>)
 8003906:	689b      	ldr	r3, [r3, #8]
 8003908:	f003 030c 	and.w	r3, r3, #12
 800390c:	2b0c      	cmp	r3, #12
 800390e:	f000 8083 	beq.w	8003a18 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	69db      	ldr	r3, [r3, #28]
 8003916:	2b02      	cmp	r3, #2
 8003918:	d15e      	bne.n	80039d8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800391a:	4b09      	ldr	r3, [pc, #36]	@ (8003940 <HAL_RCC_OscConfig+0x4b8>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a08      	ldr	r2, [pc, #32]	@ (8003940 <HAL_RCC_OscConfig+0x4b8>)
 8003920:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003924:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003926:	f7ff fa21 	bl	8002d6c <HAL_GetTick>
 800392a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800392c:	e00c      	b.n	8003948 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800392e:	f7ff fa1d 	bl	8002d6c <HAL_GetTick>
 8003932:	4602      	mov	r2, r0
 8003934:	693b      	ldr	r3, [r7, #16]
 8003936:	1ad3      	subs	r3, r2, r3
 8003938:	2b02      	cmp	r3, #2
 800393a:	d905      	bls.n	8003948 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800393c:	2303      	movs	r3, #3
 800393e:	e0ab      	b.n	8003a98 <HAL_RCC_OscConfig+0x610>
 8003940:	40021000 	.word	0x40021000
 8003944:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003948:	4b55      	ldr	r3, [pc, #340]	@ (8003aa0 <HAL_RCC_OscConfig+0x618>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003950:	2b00      	cmp	r3, #0
 8003952:	d1ec      	bne.n	800392e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003954:	4b52      	ldr	r3, [pc, #328]	@ (8003aa0 <HAL_RCC_OscConfig+0x618>)
 8003956:	68da      	ldr	r2, [r3, #12]
 8003958:	4b52      	ldr	r3, [pc, #328]	@ (8003aa4 <HAL_RCC_OscConfig+0x61c>)
 800395a:	4013      	ands	r3, r2
 800395c:	687a      	ldr	r2, [r7, #4]
 800395e:	6a11      	ldr	r1, [r2, #32]
 8003960:	687a      	ldr	r2, [r7, #4]
 8003962:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003964:	3a01      	subs	r2, #1
 8003966:	0112      	lsls	r2, r2, #4
 8003968:	4311      	orrs	r1, r2
 800396a:	687a      	ldr	r2, [r7, #4]
 800396c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800396e:	0212      	lsls	r2, r2, #8
 8003970:	4311      	orrs	r1, r2
 8003972:	687a      	ldr	r2, [r7, #4]
 8003974:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003976:	0852      	lsrs	r2, r2, #1
 8003978:	3a01      	subs	r2, #1
 800397a:	0552      	lsls	r2, r2, #21
 800397c:	4311      	orrs	r1, r2
 800397e:	687a      	ldr	r2, [r7, #4]
 8003980:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003982:	0852      	lsrs	r2, r2, #1
 8003984:	3a01      	subs	r2, #1
 8003986:	0652      	lsls	r2, r2, #25
 8003988:	4311      	orrs	r1, r2
 800398a:	687a      	ldr	r2, [r7, #4]
 800398c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800398e:	06d2      	lsls	r2, r2, #27
 8003990:	430a      	orrs	r2, r1
 8003992:	4943      	ldr	r1, [pc, #268]	@ (8003aa0 <HAL_RCC_OscConfig+0x618>)
 8003994:	4313      	orrs	r3, r2
 8003996:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003998:	4b41      	ldr	r3, [pc, #260]	@ (8003aa0 <HAL_RCC_OscConfig+0x618>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a40      	ldr	r2, [pc, #256]	@ (8003aa0 <HAL_RCC_OscConfig+0x618>)
 800399e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80039a2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80039a4:	4b3e      	ldr	r3, [pc, #248]	@ (8003aa0 <HAL_RCC_OscConfig+0x618>)
 80039a6:	68db      	ldr	r3, [r3, #12]
 80039a8:	4a3d      	ldr	r2, [pc, #244]	@ (8003aa0 <HAL_RCC_OscConfig+0x618>)
 80039aa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80039ae:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039b0:	f7ff f9dc 	bl	8002d6c <HAL_GetTick>
 80039b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039b6:	e008      	b.n	80039ca <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039b8:	f7ff f9d8 	bl	8002d6c <HAL_GetTick>
 80039bc:	4602      	mov	r2, r0
 80039be:	693b      	ldr	r3, [r7, #16]
 80039c0:	1ad3      	subs	r3, r2, r3
 80039c2:	2b02      	cmp	r3, #2
 80039c4:	d901      	bls.n	80039ca <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80039c6:	2303      	movs	r3, #3
 80039c8:	e066      	b.n	8003a98 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039ca:	4b35      	ldr	r3, [pc, #212]	@ (8003aa0 <HAL_RCC_OscConfig+0x618>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d0f0      	beq.n	80039b8 <HAL_RCC_OscConfig+0x530>
 80039d6:	e05e      	b.n	8003a96 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039d8:	4b31      	ldr	r3, [pc, #196]	@ (8003aa0 <HAL_RCC_OscConfig+0x618>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a30      	ldr	r2, [pc, #192]	@ (8003aa0 <HAL_RCC_OscConfig+0x618>)
 80039de:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80039e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039e4:	f7ff f9c2 	bl	8002d6c <HAL_GetTick>
 80039e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80039ea:	e008      	b.n	80039fe <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039ec:	f7ff f9be 	bl	8002d6c <HAL_GetTick>
 80039f0:	4602      	mov	r2, r0
 80039f2:	693b      	ldr	r3, [r7, #16]
 80039f4:	1ad3      	subs	r3, r2, r3
 80039f6:	2b02      	cmp	r3, #2
 80039f8:	d901      	bls.n	80039fe <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80039fa:	2303      	movs	r3, #3
 80039fc:	e04c      	b.n	8003a98 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80039fe:	4b28      	ldr	r3, [pc, #160]	@ (8003aa0 <HAL_RCC_OscConfig+0x618>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d1f0      	bne.n	80039ec <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003a0a:	4b25      	ldr	r3, [pc, #148]	@ (8003aa0 <HAL_RCC_OscConfig+0x618>)
 8003a0c:	68da      	ldr	r2, [r3, #12]
 8003a0e:	4924      	ldr	r1, [pc, #144]	@ (8003aa0 <HAL_RCC_OscConfig+0x618>)
 8003a10:	4b25      	ldr	r3, [pc, #148]	@ (8003aa8 <HAL_RCC_OscConfig+0x620>)
 8003a12:	4013      	ands	r3, r2
 8003a14:	60cb      	str	r3, [r1, #12]
 8003a16:	e03e      	b.n	8003a96 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	69db      	ldr	r3, [r3, #28]
 8003a1c:	2b01      	cmp	r3, #1
 8003a1e:	d101      	bne.n	8003a24 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8003a20:	2301      	movs	r3, #1
 8003a22:	e039      	b.n	8003a98 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003a24:	4b1e      	ldr	r3, [pc, #120]	@ (8003aa0 <HAL_RCC_OscConfig+0x618>)
 8003a26:	68db      	ldr	r3, [r3, #12]
 8003a28:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a2a:	697b      	ldr	r3, [r7, #20]
 8003a2c:	f003 0203 	and.w	r2, r3, #3
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6a1b      	ldr	r3, [r3, #32]
 8003a34:	429a      	cmp	r2, r3
 8003a36:	d12c      	bne.n	8003a92 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003a38:	697b      	ldr	r3, [r7, #20]
 8003a3a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a42:	3b01      	subs	r3, #1
 8003a44:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a46:	429a      	cmp	r2, r3
 8003a48:	d123      	bne.n	8003a92 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003a4a:	697b      	ldr	r3, [r7, #20]
 8003a4c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a54:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003a56:	429a      	cmp	r2, r3
 8003a58:	d11b      	bne.n	8003a92 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003a5a:	697b      	ldr	r3, [r7, #20]
 8003a5c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a64:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003a66:	429a      	cmp	r2, r3
 8003a68:	d113      	bne.n	8003a92 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a6a:	697b      	ldr	r3, [r7, #20]
 8003a6c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a74:	085b      	lsrs	r3, r3, #1
 8003a76:	3b01      	subs	r3, #1
 8003a78:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003a7a:	429a      	cmp	r2, r3
 8003a7c:	d109      	bne.n	8003a92 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003a7e:	697b      	ldr	r3, [r7, #20]
 8003a80:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a88:	085b      	lsrs	r3, r3, #1
 8003a8a:	3b01      	subs	r3, #1
 8003a8c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a8e:	429a      	cmp	r2, r3
 8003a90:	d001      	beq.n	8003a96 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8003a92:	2301      	movs	r3, #1
 8003a94:	e000      	b.n	8003a98 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8003a96:	2300      	movs	r3, #0
}
 8003a98:	4618      	mov	r0, r3
 8003a9a:	3720      	adds	r7, #32
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	bd80      	pop	{r7, pc}
 8003aa0:	40021000 	.word	0x40021000
 8003aa4:	019f800c 	.word	0x019f800c
 8003aa8:	feeefffc 	.word	0xfeeefffc

08003aac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b086      	sub	sp, #24
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
 8003ab4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d101      	bne.n	8003ac4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	e11e      	b.n	8003d02 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003ac4:	4b91      	ldr	r3, [pc, #580]	@ (8003d0c <HAL_RCC_ClockConfig+0x260>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f003 030f 	and.w	r3, r3, #15
 8003acc:	683a      	ldr	r2, [r7, #0]
 8003ace:	429a      	cmp	r2, r3
 8003ad0:	d910      	bls.n	8003af4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ad2:	4b8e      	ldr	r3, [pc, #568]	@ (8003d0c <HAL_RCC_ClockConfig+0x260>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f023 020f 	bic.w	r2, r3, #15
 8003ada:	498c      	ldr	r1, [pc, #560]	@ (8003d0c <HAL_RCC_ClockConfig+0x260>)
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ae2:	4b8a      	ldr	r3, [pc, #552]	@ (8003d0c <HAL_RCC_ClockConfig+0x260>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f003 030f 	and.w	r3, r3, #15
 8003aea:	683a      	ldr	r2, [r7, #0]
 8003aec:	429a      	cmp	r2, r3
 8003aee:	d001      	beq.n	8003af4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003af0:	2301      	movs	r3, #1
 8003af2:	e106      	b.n	8003d02 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f003 0301 	and.w	r3, r3, #1
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d073      	beq.n	8003be8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	2b03      	cmp	r3, #3
 8003b06:	d129      	bne.n	8003b5c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b08:	4b81      	ldr	r3, [pc, #516]	@ (8003d10 <HAL_RCC_ClockConfig+0x264>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d101      	bne.n	8003b18 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003b14:	2301      	movs	r3, #1
 8003b16:	e0f4      	b.n	8003d02 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003b18:	f000 f966 	bl	8003de8 <RCC_GetSysClockFreqFromPLLSource>
 8003b1c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003b1e:	693b      	ldr	r3, [r7, #16]
 8003b20:	4a7c      	ldr	r2, [pc, #496]	@ (8003d14 <HAL_RCC_ClockConfig+0x268>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d93f      	bls.n	8003ba6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003b26:	4b7a      	ldr	r3, [pc, #488]	@ (8003d10 <HAL_RCC_ClockConfig+0x264>)
 8003b28:	689b      	ldr	r3, [r3, #8]
 8003b2a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d009      	beq.n	8003b46 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d033      	beq.n	8003ba6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d12f      	bne.n	8003ba6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003b46:	4b72      	ldr	r3, [pc, #456]	@ (8003d10 <HAL_RCC_ClockConfig+0x264>)
 8003b48:	689b      	ldr	r3, [r3, #8]
 8003b4a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003b4e:	4a70      	ldr	r2, [pc, #448]	@ (8003d10 <HAL_RCC_ClockConfig+0x264>)
 8003b50:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003b54:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003b56:	2380      	movs	r3, #128	@ 0x80
 8003b58:	617b      	str	r3, [r7, #20]
 8003b5a:	e024      	b.n	8003ba6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	2b02      	cmp	r3, #2
 8003b62:	d107      	bne.n	8003b74 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b64:	4b6a      	ldr	r3, [pc, #424]	@ (8003d10 <HAL_RCC_ClockConfig+0x264>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d109      	bne.n	8003b84 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003b70:	2301      	movs	r3, #1
 8003b72:	e0c6      	b.n	8003d02 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b74:	4b66      	ldr	r3, [pc, #408]	@ (8003d10 <HAL_RCC_ClockConfig+0x264>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d101      	bne.n	8003b84 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003b80:	2301      	movs	r3, #1
 8003b82:	e0be      	b.n	8003d02 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003b84:	f000 f8ce 	bl	8003d24 <HAL_RCC_GetSysClockFreq>
 8003b88:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003b8a:	693b      	ldr	r3, [r7, #16]
 8003b8c:	4a61      	ldr	r2, [pc, #388]	@ (8003d14 <HAL_RCC_ClockConfig+0x268>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d909      	bls.n	8003ba6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003b92:	4b5f      	ldr	r3, [pc, #380]	@ (8003d10 <HAL_RCC_ClockConfig+0x264>)
 8003b94:	689b      	ldr	r3, [r3, #8]
 8003b96:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003b9a:	4a5d      	ldr	r2, [pc, #372]	@ (8003d10 <HAL_RCC_ClockConfig+0x264>)
 8003b9c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003ba0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003ba2:	2380      	movs	r3, #128	@ 0x80
 8003ba4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003ba6:	4b5a      	ldr	r3, [pc, #360]	@ (8003d10 <HAL_RCC_ClockConfig+0x264>)
 8003ba8:	689b      	ldr	r3, [r3, #8]
 8003baa:	f023 0203 	bic.w	r2, r3, #3
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	4957      	ldr	r1, [pc, #348]	@ (8003d10 <HAL_RCC_ClockConfig+0x264>)
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003bb8:	f7ff f8d8 	bl	8002d6c <HAL_GetTick>
 8003bbc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bbe:	e00a      	b.n	8003bd6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003bc0:	f7ff f8d4 	bl	8002d6c <HAL_GetTick>
 8003bc4:	4602      	mov	r2, r0
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	1ad3      	subs	r3, r2, r3
 8003bca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d901      	bls.n	8003bd6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003bd2:	2303      	movs	r3, #3
 8003bd4:	e095      	b.n	8003d02 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bd6:	4b4e      	ldr	r3, [pc, #312]	@ (8003d10 <HAL_RCC_ClockConfig+0x264>)
 8003bd8:	689b      	ldr	r3, [r3, #8]
 8003bda:	f003 020c 	and.w	r2, r3, #12
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	009b      	lsls	r3, r3, #2
 8003be4:	429a      	cmp	r2, r3
 8003be6:	d1eb      	bne.n	8003bc0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f003 0302 	and.w	r3, r3, #2
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d023      	beq.n	8003c3c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f003 0304 	and.w	r3, r3, #4
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d005      	beq.n	8003c0c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c00:	4b43      	ldr	r3, [pc, #268]	@ (8003d10 <HAL_RCC_ClockConfig+0x264>)
 8003c02:	689b      	ldr	r3, [r3, #8]
 8003c04:	4a42      	ldr	r2, [pc, #264]	@ (8003d10 <HAL_RCC_ClockConfig+0x264>)
 8003c06:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003c0a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f003 0308 	and.w	r3, r3, #8
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d007      	beq.n	8003c28 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003c18:	4b3d      	ldr	r3, [pc, #244]	@ (8003d10 <HAL_RCC_ClockConfig+0x264>)
 8003c1a:	689b      	ldr	r3, [r3, #8]
 8003c1c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003c20:	4a3b      	ldr	r2, [pc, #236]	@ (8003d10 <HAL_RCC_ClockConfig+0x264>)
 8003c22:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003c26:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c28:	4b39      	ldr	r3, [pc, #228]	@ (8003d10 <HAL_RCC_ClockConfig+0x264>)
 8003c2a:	689b      	ldr	r3, [r3, #8]
 8003c2c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	689b      	ldr	r3, [r3, #8]
 8003c34:	4936      	ldr	r1, [pc, #216]	@ (8003d10 <HAL_RCC_ClockConfig+0x264>)
 8003c36:	4313      	orrs	r3, r2
 8003c38:	608b      	str	r3, [r1, #8]
 8003c3a:	e008      	b.n	8003c4e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003c3c:	697b      	ldr	r3, [r7, #20]
 8003c3e:	2b80      	cmp	r3, #128	@ 0x80
 8003c40:	d105      	bne.n	8003c4e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003c42:	4b33      	ldr	r3, [pc, #204]	@ (8003d10 <HAL_RCC_ClockConfig+0x264>)
 8003c44:	689b      	ldr	r3, [r3, #8]
 8003c46:	4a32      	ldr	r2, [pc, #200]	@ (8003d10 <HAL_RCC_ClockConfig+0x264>)
 8003c48:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003c4c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003c4e:	4b2f      	ldr	r3, [pc, #188]	@ (8003d0c <HAL_RCC_ClockConfig+0x260>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f003 030f 	and.w	r3, r3, #15
 8003c56:	683a      	ldr	r2, [r7, #0]
 8003c58:	429a      	cmp	r2, r3
 8003c5a:	d21d      	bcs.n	8003c98 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c5c:	4b2b      	ldr	r3, [pc, #172]	@ (8003d0c <HAL_RCC_ClockConfig+0x260>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f023 020f 	bic.w	r2, r3, #15
 8003c64:	4929      	ldr	r1, [pc, #164]	@ (8003d0c <HAL_RCC_ClockConfig+0x260>)
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003c6c:	f7ff f87e 	bl	8002d6c <HAL_GetTick>
 8003c70:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c72:	e00a      	b.n	8003c8a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c74:	f7ff f87a 	bl	8002d6c <HAL_GetTick>
 8003c78:	4602      	mov	r2, r0
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	1ad3      	subs	r3, r2, r3
 8003c7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d901      	bls.n	8003c8a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003c86:	2303      	movs	r3, #3
 8003c88:	e03b      	b.n	8003d02 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c8a:	4b20      	ldr	r3, [pc, #128]	@ (8003d0c <HAL_RCC_ClockConfig+0x260>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f003 030f 	and.w	r3, r3, #15
 8003c92:	683a      	ldr	r2, [r7, #0]
 8003c94:	429a      	cmp	r2, r3
 8003c96:	d1ed      	bne.n	8003c74 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f003 0304 	and.w	r3, r3, #4
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d008      	beq.n	8003cb6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ca4:	4b1a      	ldr	r3, [pc, #104]	@ (8003d10 <HAL_RCC_ClockConfig+0x264>)
 8003ca6:	689b      	ldr	r3, [r3, #8]
 8003ca8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	68db      	ldr	r3, [r3, #12]
 8003cb0:	4917      	ldr	r1, [pc, #92]	@ (8003d10 <HAL_RCC_ClockConfig+0x264>)
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f003 0308 	and.w	r3, r3, #8
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d009      	beq.n	8003cd6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003cc2:	4b13      	ldr	r3, [pc, #76]	@ (8003d10 <HAL_RCC_ClockConfig+0x264>)
 8003cc4:	689b      	ldr	r3, [r3, #8]
 8003cc6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	691b      	ldr	r3, [r3, #16]
 8003cce:	00db      	lsls	r3, r3, #3
 8003cd0:	490f      	ldr	r1, [pc, #60]	@ (8003d10 <HAL_RCC_ClockConfig+0x264>)
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003cd6:	f000 f825 	bl	8003d24 <HAL_RCC_GetSysClockFreq>
 8003cda:	4602      	mov	r2, r0
 8003cdc:	4b0c      	ldr	r3, [pc, #48]	@ (8003d10 <HAL_RCC_ClockConfig+0x264>)
 8003cde:	689b      	ldr	r3, [r3, #8]
 8003ce0:	091b      	lsrs	r3, r3, #4
 8003ce2:	f003 030f 	and.w	r3, r3, #15
 8003ce6:	490c      	ldr	r1, [pc, #48]	@ (8003d18 <HAL_RCC_ClockConfig+0x26c>)
 8003ce8:	5ccb      	ldrb	r3, [r1, r3]
 8003cea:	f003 031f 	and.w	r3, r3, #31
 8003cee:	fa22 f303 	lsr.w	r3, r2, r3
 8003cf2:	4a0a      	ldr	r2, [pc, #40]	@ (8003d1c <HAL_RCC_ClockConfig+0x270>)
 8003cf4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003cf6:	4b0a      	ldr	r3, [pc, #40]	@ (8003d20 <HAL_RCC_ClockConfig+0x274>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	f7fe ffea 	bl	8002cd4 <HAL_InitTick>
 8003d00:	4603      	mov	r3, r0
}
 8003d02:	4618      	mov	r0, r3
 8003d04:	3718      	adds	r7, #24
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bd80      	pop	{r7, pc}
 8003d0a:	bf00      	nop
 8003d0c:	40022000 	.word	0x40022000
 8003d10:	40021000 	.word	0x40021000
 8003d14:	04c4b400 	.word	0x04c4b400
 8003d18:	08006f84 	.word	0x08006f84
 8003d1c:	20000000 	.word	0x20000000
 8003d20:	20000004 	.word	0x20000004

08003d24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d24:	b480      	push	{r7}
 8003d26:	b087      	sub	sp, #28
 8003d28:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003d2a:	4b2c      	ldr	r3, [pc, #176]	@ (8003ddc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d2c:	689b      	ldr	r3, [r3, #8]
 8003d2e:	f003 030c 	and.w	r3, r3, #12
 8003d32:	2b04      	cmp	r3, #4
 8003d34:	d102      	bne.n	8003d3c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003d36:	4b2a      	ldr	r3, [pc, #168]	@ (8003de0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003d38:	613b      	str	r3, [r7, #16]
 8003d3a:	e047      	b.n	8003dcc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003d3c:	4b27      	ldr	r3, [pc, #156]	@ (8003ddc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d3e:	689b      	ldr	r3, [r3, #8]
 8003d40:	f003 030c 	and.w	r3, r3, #12
 8003d44:	2b08      	cmp	r3, #8
 8003d46:	d102      	bne.n	8003d4e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003d48:	4b26      	ldr	r3, [pc, #152]	@ (8003de4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003d4a:	613b      	str	r3, [r7, #16]
 8003d4c:	e03e      	b.n	8003dcc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003d4e:	4b23      	ldr	r3, [pc, #140]	@ (8003ddc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d50:	689b      	ldr	r3, [r3, #8]
 8003d52:	f003 030c 	and.w	r3, r3, #12
 8003d56:	2b0c      	cmp	r3, #12
 8003d58:	d136      	bne.n	8003dc8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003d5a:	4b20      	ldr	r3, [pc, #128]	@ (8003ddc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d5c:	68db      	ldr	r3, [r3, #12]
 8003d5e:	f003 0303 	and.w	r3, r3, #3
 8003d62:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003d64:	4b1d      	ldr	r3, [pc, #116]	@ (8003ddc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d66:	68db      	ldr	r3, [r3, #12]
 8003d68:	091b      	lsrs	r3, r3, #4
 8003d6a:	f003 030f 	and.w	r3, r3, #15
 8003d6e:	3301      	adds	r3, #1
 8003d70:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	2b03      	cmp	r3, #3
 8003d76:	d10c      	bne.n	8003d92 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003d78:	4a1a      	ldr	r2, [pc, #104]	@ (8003de4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003d7a:	68bb      	ldr	r3, [r7, #8]
 8003d7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d80:	4a16      	ldr	r2, [pc, #88]	@ (8003ddc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d82:	68d2      	ldr	r2, [r2, #12]
 8003d84:	0a12      	lsrs	r2, r2, #8
 8003d86:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003d8a:	fb02 f303 	mul.w	r3, r2, r3
 8003d8e:	617b      	str	r3, [r7, #20]
      break;
 8003d90:	e00c      	b.n	8003dac <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003d92:	4a13      	ldr	r2, [pc, #76]	@ (8003de0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d9a:	4a10      	ldr	r2, [pc, #64]	@ (8003ddc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d9c:	68d2      	ldr	r2, [r2, #12]
 8003d9e:	0a12      	lsrs	r2, r2, #8
 8003da0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003da4:	fb02 f303 	mul.w	r3, r2, r3
 8003da8:	617b      	str	r3, [r7, #20]
      break;
 8003daa:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003dac:	4b0b      	ldr	r3, [pc, #44]	@ (8003ddc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003dae:	68db      	ldr	r3, [r3, #12]
 8003db0:	0e5b      	lsrs	r3, r3, #25
 8003db2:	f003 0303 	and.w	r3, r3, #3
 8003db6:	3301      	adds	r3, #1
 8003db8:	005b      	lsls	r3, r3, #1
 8003dba:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003dbc:	697a      	ldr	r2, [r7, #20]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dc4:	613b      	str	r3, [r7, #16]
 8003dc6:	e001      	b.n	8003dcc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003dc8:	2300      	movs	r3, #0
 8003dca:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003dcc:	693b      	ldr	r3, [r7, #16]
}
 8003dce:	4618      	mov	r0, r3
 8003dd0:	371c      	adds	r7, #28
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd8:	4770      	bx	lr
 8003dda:	bf00      	nop
 8003ddc:	40021000 	.word	0x40021000
 8003de0:	00f42400 	.word	0x00f42400
 8003de4:	016e3600 	.word	0x016e3600

08003de8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003de8:	b480      	push	{r7}
 8003dea:	b087      	sub	sp, #28
 8003dec:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003dee:	4b1e      	ldr	r3, [pc, #120]	@ (8003e68 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003df0:	68db      	ldr	r3, [r3, #12]
 8003df2:	f003 0303 	and.w	r3, r3, #3
 8003df6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003df8:	4b1b      	ldr	r3, [pc, #108]	@ (8003e68 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003dfa:	68db      	ldr	r3, [r3, #12]
 8003dfc:	091b      	lsrs	r3, r3, #4
 8003dfe:	f003 030f 	and.w	r3, r3, #15
 8003e02:	3301      	adds	r3, #1
 8003e04:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	2b03      	cmp	r3, #3
 8003e0a:	d10c      	bne.n	8003e26 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003e0c:	4a17      	ldr	r2, [pc, #92]	@ (8003e6c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e14:	4a14      	ldr	r2, [pc, #80]	@ (8003e68 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003e16:	68d2      	ldr	r2, [r2, #12]
 8003e18:	0a12      	lsrs	r2, r2, #8
 8003e1a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003e1e:	fb02 f303 	mul.w	r3, r2, r3
 8003e22:	617b      	str	r3, [r7, #20]
    break;
 8003e24:	e00c      	b.n	8003e40 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003e26:	4a12      	ldr	r2, [pc, #72]	@ (8003e70 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e2e:	4a0e      	ldr	r2, [pc, #56]	@ (8003e68 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003e30:	68d2      	ldr	r2, [r2, #12]
 8003e32:	0a12      	lsrs	r2, r2, #8
 8003e34:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003e38:	fb02 f303 	mul.w	r3, r2, r3
 8003e3c:	617b      	str	r3, [r7, #20]
    break;
 8003e3e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003e40:	4b09      	ldr	r3, [pc, #36]	@ (8003e68 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003e42:	68db      	ldr	r3, [r3, #12]
 8003e44:	0e5b      	lsrs	r3, r3, #25
 8003e46:	f003 0303 	and.w	r3, r3, #3
 8003e4a:	3301      	adds	r3, #1
 8003e4c:	005b      	lsls	r3, r3, #1
 8003e4e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003e50:	697a      	ldr	r2, [r7, #20]
 8003e52:	68bb      	ldr	r3, [r7, #8]
 8003e54:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e58:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003e5a:	687b      	ldr	r3, [r7, #4]
}
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	371c      	adds	r7, #28
 8003e60:	46bd      	mov	sp, r7
 8003e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e66:	4770      	bx	lr
 8003e68:	40021000 	.word	0x40021000
 8003e6c:	016e3600 	.word	0x016e3600
 8003e70:	00f42400 	.word	0x00f42400

08003e74 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b082      	sub	sp, #8
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d101      	bne.n	8003e86 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003e82:	2301      	movs	r3, #1
 8003e84:	e049      	b.n	8003f1a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e8c:	b2db      	uxtb	r3, r3
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d106      	bne.n	8003ea0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2200      	movs	r2, #0
 8003e96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003e9a:	6878      	ldr	r0, [r7, #4]
 8003e9c:	f7fe fce2 	bl	8002864 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2202      	movs	r2, #2
 8003ea4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681a      	ldr	r2, [r3, #0]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	3304      	adds	r3, #4
 8003eb0:	4619      	mov	r1, r3
 8003eb2:	4610      	mov	r0, r2
 8003eb4:	f000 ff5e 	bl	8004d74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2201      	movs	r2, #1
 8003ebc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2201      	movs	r2, #1
 8003ec4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2201      	movs	r2, #1
 8003ecc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2201      	movs	r2, #1
 8003ed4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2201      	movs	r2, #1
 8003edc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2201      	movs	r2, #1
 8003ee4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2201      	movs	r2, #1
 8003eec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2201      	movs	r2, #1
 8003ef4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2201      	movs	r2, #1
 8003efc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2201      	movs	r2, #1
 8003f04:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2201      	movs	r2, #1
 8003f14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003f18:	2300      	movs	r3, #0
}
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	3708      	adds	r7, #8
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bd80      	pop	{r7, pc}
	...

08003f24 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003f24:	b480      	push	{r7}
 8003f26:	b085      	sub	sp, #20
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f32:	b2db      	uxtb	r3, r3
 8003f34:	2b01      	cmp	r3, #1
 8003f36:	d001      	beq.n	8003f3c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003f38:	2301      	movs	r3, #1
 8003f3a:	e04c      	b.n	8003fd6 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2202      	movs	r2, #2
 8003f40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a26      	ldr	r2, [pc, #152]	@ (8003fe4 <HAL_TIM_Base_Start+0xc0>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d022      	beq.n	8003f94 <HAL_TIM_Base_Start+0x70>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f56:	d01d      	beq.n	8003f94 <HAL_TIM_Base_Start+0x70>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4a22      	ldr	r2, [pc, #136]	@ (8003fe8 <HAL_TIM_Base_Start+0xc4>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d018      	beq.n	8003f94 <HAL_TIM_Base_Start+0x70>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4a21      	ldr	r2, [pc, #132]	@ (8003fec <HAL_TIM_Base_Start+0xc8>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d013      	beq.n	8003f94 <HAL_TIM_Base_Start+0x70>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4a1f      	ldr	r2, [pc, #124]	@ (8003ff0 <HAL_TIM_Base_Start+0xcc>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d00e      	beq.n	8003f94 <HAL_TIM_Base_Start+0x70>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4a1e      	ldr	r2, [pc, #120]	@ (8003ff4 <HAL_TIM_Base_Start+0xd0>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d009      	beq.n	8003f94 <HAL_TIM_Base_Start+0x70>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4a1c      	ldr	r2, [pc, #112]	@ (8003ff8 <HAL_TIM_Base_Start+0xd4>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d004      	beq.n	8003f94 <HAL_TIM_Base_Start+0x70>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a1b      	ldr	r2, [pc, #108]	@ (8003ffc <HAL_TIM_Base_Start+0xd8>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d115      	bne.n	8003fc0 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	689a      	ldr	r2, [r3, #8]
 8003f9a:	4b19      	ldr	r3, [pc, #100]	@ (8004000 <HAL_TIM_Base_Start+0xdc>)
 8003f9c:	4013      	ands	r3, r2
 8003f9e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	2b06      	cmp	r3, #6
 8003fa4:	d015      	beq.n	8003fd2 <HAL_TIM_Base_Start+0xae>
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003fac:	d011      	beq.n	8003fd2 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	681a      	ldr	r2, [r3, #0]
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f042 0201 	orr.w	r2, r2, #1
 8003fbc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fbe:	e008      	b.n	8003fd2 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	681a      	ldr	r2, [r3, #0]
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f042 0201 	orr.w	r2, r2, #1
 8003fce:	601a      	str	r2, [r3, #0]
 8003fd0:	e000      	b.n	8003fd4 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fd2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003fd4:	2300      	movs	r3, #0
}
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	3714      	adds	r7, #20
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe0:	4770      	bx	lr
 8003fe2:	bf00      	nop
 8003fe4:	40012c00 	.word	0x40012c00
 8003fe8:	40000400 	.word	0x40000400
 8003fec:	40000800 	.word	0x40000800
 8003ff0:	40000c00 	.word	0x40000c00
 8003ff4:	40013400 	.word	0x40013400
 8003ff8:	40014000 	.word	0x40014000
 8003ffc:	40015000 	.word	0x40015000
 8004000:	00010007 	.word	0x00010007

08004004 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004004:	b480      	push	{r7}
 8004006:	b085      	sub	sp, #20
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004012:	b2db      	uxtb	r3, r3
 8004014:	2b01      	cmp	r3, #1
 8004016:	d001      	beq.n	800401c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004018:	2301      	movs	r3, #1
 800401a:	e054      	b.n	80040c6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2202      	movs	r2, #2
 8004020:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	68da      	ldr	r2, [r3, #12]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f042 0201 	orr.w	r2, r2, #1
 8004032:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4a26      	ldr	r2, [pc, #152]	@ (80040d4 <HAL_TIM_Base_Start_IT+0xd0>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d022      	beq.n	8004084 <HAL_TIM_Base_Start_IT+0x80>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004046:	d01d      	beq.n	8004084 <HAL_TIM_Base_Start_IT+0x80>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4a22      	ldr	r2, [pc, #136]	@ (80040d8 <HAL_TIM_Base_Start_IT+0xd4>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d018      	beq.n	8004084 <HAL_TIM_Base_Start_IT+0x80>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4a21      	ldr	r2, [pc, #132]	@ (80040dc <HAL_TIM_Base_Start_IT+0xd8>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d013      	beq.n	8004084 <HAL_TIM_Base_Start_IT+0x80>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4a1f      	ldr	r2, [pc, #124]	@ (80040e0 <HAL_TIM_Base_Start_IT+0xdc>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d00e      	beq.n	8004084 <HAL_TIM_Base_Start_IT+0x80>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4a1e      	ldr	r2, [pc, #120]	@ (80040e4 <HAL_TIM_Base_Start_IT+0xe0>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d009      	beq.n	8004084 <HAL_TIM_Base_Start_IT+0x80>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a1c      	ldr	r2, [pc, #112]	@ (80040e8 <HAL_TIM_Base_Start_IT+0xe4>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d004      	beq.n	8004084 <HAL_TIM_Base_Start_IT+0x80>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4a1b      	ldr	r2, [pc, #108]	@ (80040ec <HAL_TIM_Base_Start_IT+0xe8>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d115      	bne.n	80040b0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	689a      	ldr	r2, [r3, #8]
 800408a:	4b19      	ldr	r3, [pc, #100]	@ (80040f0 <HAL_TIM_Base_Start_IT+0xec>)
 800408c:	4013      	ands	r3, r2
 800408e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	2b06      	cmp	r3, #6
 8004094:	d015      	beq.n	80040c2 <HAL_TIM_Base_Start_IT+0xbe>
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800409c:	d011      	beq.n	80040c2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	681a      	ldr	r2, [r3, #0]
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f042 0201 	orr.w	r2, r2, #1
 80040ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040ae:	e008      	b.n	80040c2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	681a      	ldr	r2, [r3, #0]
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f042 0201 	orr.w	r2, r2, #1
 80040be:	601a      	str	r2, [r3, #0]
 80040c0:	e000      	b.n	80040c4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040c2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80040c4:	2300      	movs	r3, #0
}
 80040c6:	4618      	mov	r0, r3
 80040c8:	3714      	adds	r7, #20
 80040ca:	46bd      	mov	sp, r7
 80040cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d0:	4770      	bx	lr
 80040d2:	bf00      	nop
 80040d4:	40012c00 	.word	0x40012c00
 80040d8:	40000400 	.word	0x40000400
 80040dc:	40000800 	.word	0x40000800
 80040e0:	40000c00 	.word	0x40000c00
 80040e4:	40013400 	.word	0x40013400
 80040e8:	40014000 	.word	0x40014000
 80040ec:	40015000 	.word	0x40015000
 80040f0:	00010007 	.word	0x00010007

080040f4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b082      	sub	sp, #8
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d101      	bne.n	8004106 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004102:	2301      	movs	r3, #1
 8004104:	e049      	b.n	800419a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800410c:	b2db      	uxtb	r3, r3
 800410e:	2b00      	cmp	r3, #0
 8004110:	d106      	bne.n	8004120 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2200      	movs	r2, #0
 8004116:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800411a:	6878      	ldr	r0, [r7, #4]
 800411c:	f7fe fcbc 	bl	8002a98 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2202      	movs	r2, #2
 8004124:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681a      	ldr	r2, [r3, #0]
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	3304      	adds	r3, #4
 8004130:	4619      	mov	r1, r3
 8004132:	4610      	mov	r0, r2
 8004134:	f000 fe1e 	bl	8004d74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2201      	movs	r2, #1
 800413c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2201      	movs	r2, #1
 8004144:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2201      	movs	r2, #1
 800414c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2201      	movs	r2, #1
 8004154:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2201      	movs	r2, #1
 800415c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2201      	movs	r2, #1
 8004164:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2201      	movs	r2, #1
 800416c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2201      	movs	r2, #1
 8004174:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2201      	movs	r2, #1
 800417c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2201      	movs	r2, #1
 8004184:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2201      	movs	r2, #1
 800418c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2201      	movs	r2, #1
 8004194:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004198:	2300      	movs	r3, #0
}
 800419a:	4618      	mov	r0, r3
 800419c:	3708      	adds	r7, #8
 800419e:	46bd      	mov	sp, r7
 80041a0:	bd80      	pop	{r7, pc}
	...

080041a4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b084      	sub	sp, #16
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
 80041ac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d109      	bne.n	80041c8 <HAL_TIM_PWM_Start+0x24>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80041ba:	b2db      	uxtb	r3, r3
 80041bc:	2b01      	cmp	r3, #1
 80041be:	bf14      	ite	ne
 80041c0:	2301      	movne	r3, #1
 80041c2:	2300      	moveq	r3, #0
 80041c4:	b2db      	uxtb	r3, r3
 80041c6:	e03c      	b.n	8004242 <HAL_TIM_PWM_Start+0x9e>
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	2b04      	cmp	r3, #4
 80041cc:	d109      	bne.n	80041e2 <HAL_TIM_PWM_Start+0x3e>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80041d4:	b2db      	uxtb	r3, r3
 80041d6:	2b01      	cmp	r3, #1
 80041d8:	bf14      	ite	ne
 80041da:	2301      	movne	r3, #1
 80041dc:	2300      	moveq	r3, #0
 80041de:	b2db      	uxtb	r3, r3
 80041e0:	e02f      	b.n	8004242 <HAL_TIM_PWM_Start+0x9e>
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	2b08      	cmp	r3, #8
 80041e6:	d109      	bne.n	80041fc <HAL_TIM_PWM_Start+0x58>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80041ee:	b2db      	uxtb	r3, r3
 80041f0:	2b01      	cmp	r3, #1
 80041f2:	bf14      	ite	ne
 80041f4:	2301      	movne	r3, #1
 80041f6:	2300      	moveq	r3, #0
 80041f8:	b2db      	uxtb	r3, r3
 80041fa:	e022      	b.n	8004242 <HAL_TIM_PWM_Start+0x9e>
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	2b0c      	cmp	r3, #12
 8004200:	d109      	bne.n	8004216 <HAL_TIM_PWM_Start+0x72>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004208:	b2db      	uxtb	r3, r3
 800420a:	2b01      	cmp	r3, #1
 800420c:	bf14      	ite	ne
 800420e:	2301      	movne	r3, #1
 8004210:	2300      	moveq	r3, #0
 8004212:	b2db      	uxtb	r3, r3
 8004214:	e015      	b.n	8004242 <HAL_TIM_PWM_Start+0x9e>
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	2b10      	cmp	r3, #16
 800421a:	d109      	bne.n	8004230 <HAL_TIM_PWM_Start+0x8c>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004222:	b2db      	uxtb	r3, r3
 8004224:	2b01      	cmp	r3, #1
 8004226:	bf14      	ite	ne
 8004228:	2301      	movne	r3, #1
 800422a:	2300      	moveq	r3, #0
 800422c:	b2db      	uxtb	r3, r3
 800422e:	e008      	b.n	8004242 <HAL_TIM_PWM_Start+0x9e>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004236:	b2db      	uxtb	r3, r3
 8004238:	2b01      	cmp	r3, #1
 800423a:	bf14      	ite	ne
 800423c:	2301      	movne	r3, #1
 800423e:	2300      	moveq	r3, #0
 8004240:	b2db      	uxtb	r3, r3
 8004242:	2b00      	cmp	r3, #0
 8004244:	d001      	beq.n	800424a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004246:	2301      	movs	r3, #1
 8004248:	e0a6      	b.n	8004398 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d104      	bne.n	800425a <HAL_TIM_PWM_Start+0xb6>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2202      	movs	r2, #2
 8004254:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004258:	e023      	b.n	80042a2 <HAL_TIM_PWM_Start+0xfe>
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	2b04      	cmp	r3, #4
 800425e:	d104      	bne.n	800426a <HAL_TIM_PWM_Start+0xc6>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2202      	movs	r2, #2
 8004264:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004268:	e01b      	b.n	80042a2 <HAL_TIM_PWM_Start+0xfe>
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	2b08      	cmp	r3, #8
 800426e:	d104      	bne.n	800427a <HAL_TIM_PWM_Start+0xd6>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2202      	movs	r2, #2
 8004274:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004278:	e013      	b.n	80042a2 <HAL_TIM_PWM_Start+0xfe>
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	2b0c      	cmp	r3, #12
 800427e:	d104      	bne.n	800428a <HAL_TIM_PWM_Start+0xe6>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2202      	movs	r2, #2
 8004284:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004288:	e00b      	b.n	80042a2 <HAL_TIM_PWM_Start+0xfe>
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	2b10      	cmp	r3, #16
 800428e:	d104      	bne.n	800429a <HAL_TIM_PWM_Start+0xf6>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2202      	movs	r2, #2
 8004294:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004298:	e003      	b.n	80042a2 <HAL_TIM_PWM_Start+0xfe>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2202      	movs	r2, #2
 800429e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	2201      	movs	r2, #1
 80042a8:	6839      	ldr	r1, [r7, #0]
 80042aa:	4618      	mov	r0, r3
 80042ac:	f001 f9dc 	bl	8005668 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4a3a      	ldr	r2, [pc, #232]	@ (80043a0 <HAL_TIM_PWM_Start+0x1fc>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d018      	beq.n	80042ec <HAL_TIM_PWM_Start+0x148>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4a39      	ldr	r2, [pc, #228]	@ (80043a4 <HAL_TIM_PWM_Start+0x200>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d013      	beq.n	80042ec <HAL_TIM_PWM_Start+0x148>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4a37      	ldr	r2, [pc, #220]	@ (80043a8 <HAL_TIM_PWM_Start+0x204>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d00e      	beq.n	80042ec <HAL_TIM_PWM_Start+0x148>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4a36      	ldr	r2, [pc, #216]	@ (80043ac <HAL_TIM_PWM_Start+0x208>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d009      	beq.n	80042ec <HAL_TIM_PWM_Start+0x148>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4a34      	ldr	r2, [pc, #208]	@ (80043b0 <HAL_TIM_PWM_Start+0x20c>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d004      	beq.n	80042ec <HAL_TIM_PWM_Start+0x148>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4a33      	ldr	r2, [pc, #204]	@ (80043b4 <HAL_TIM_PWM_Start+0x210>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d101      	bne.n	80042f0 <HAL_TIM_PWM_Start+0x14c>
 80042ec:	2301      	movs	r3, #1
 80042ee:	e000      	b.n	80042f2 <HAL_TIM_PWM_Start+0x14e>
 80042f0:	2300      	movs	r3, #0
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d007      	beq.n	8004306 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004304:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4a25      	ldr	r2, [pc, #148]	@ (80043a0 <HAL_TIM_PWM_Start+0x1fc>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d022      	beq.n	8004356 <HAL_TIM_PWM_Start+0x1b2>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004318:	d01d      	beq.n	8004356 <HAL_TIM_PWM_Start+0x1b2>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4a26      	ldr	r2, [pc, #152]	@ (80043b8 <HAL_TIM_PWM_Start+0x214>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d018      	beq.n	8004356 <HAL_TIM_PWM_Start+0x1b2>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a24      	ldr	r2, [pc, #144]	@ (80043bc <HAL_TIM_PWM_Start+0x218>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d013      	beq.n	8004356 <HAL_TIM_PWM_Start+0x1b2>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4a23      	ldr	r2, [pc, #140]	@ (80043c0 <HAL_TIM_PWM_Start+0x21c>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d00e      	beq.n	8004356 <HAL_TIM_PWM_Start+0x1b2>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a19      	ldr	r2, [pc, #100]	@ (80043a4 <HAL_TIM_PWM_Start+0x200>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d009      	beq.n	8004356 <HAL_TIM_PWM_Start+0x1b2>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4a18      	ldr	r2, [pc, #96]	@ (80043a8 <HAL_TIM_PWM_Start+0x204>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d004      	beq.n	8004356 <HAL_TIM_PWM_Start+0x1b2>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a18      	ldr	r2, [pc, #96]	@ (80043b4 <HAL_TIM_PWM_Start+0x210>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d115      	bne.n	8004382 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	689a      	ldr	r2, [r3, #8]
 800435c:	4b19      	ldr	r3, [pc, #100]	@ (80043c4 <HAL_TIM_PWM_Start+0x220>)
 800435e:	4013      	ands	r3, r2
 8004360:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	2b06      	cmp	r3, #6
 8004366:	d015      	beq.n	8004394 <HAL_TIM_PWM_Start+0x1f0>
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800436e:	d011      	beq.n	8004394 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	681a      	ldr	r2, [r3, #0]
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f042 0201 	orr.w	r2, r2, #1
 800437e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004380:	e008      	b.n	8004394 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	681a      	ldr	r2, [r3, #0]
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f042 0201 	orr.w	r2, r2, #1
 8004390:	601a      	str	r2, [r3, #0]
 8004392:	e000      	b.n	8004396 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004394:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004396:	2300      	movs	r3, #0
}
 8004398:	4618      	mov	r0, r3
 800439a:	3710      	adds	r7, #16
 800439c:	46bd      	mov	sp, r7
 800439e:	bd80      	pop	{r7, pc}
 80043a0:	40012c00 	.word	0x40012c00
 80043a4:	40013400 	.word	0x40013400
 80043a8:	40014000 	.word	0x40014000
 80043ac:	40014400 	.word	0x40014400
 80043b0:	40014800 	.word	0x40014800
 80043b4:	40015000 	.word	0x40015000
 80043b8:	40000400 	.word	0x40000400
 80043bc:	40000800 	.word	0x40000800
 80043c0:	40000c00 	.word	0x40000c00
 80043c4:	00010007 	.word	0x00010007

080043c8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b086      	sub	sp, #24
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
 80043d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d101      	bne.n	80043dc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80043d8:	2301      	movs	r3, #1
 80043da:	e097      	b.n	800450c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80043e2:	b2db      	uxtb	r3, r3
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d106      	bne.n	80043f6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2200      	movs	r2, #0
 80043ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80043f0:	6878      	ldr	r0, [r7, #4]
 80043f2:	f7fe fa5b 	bl	80028ac <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2202      	movs	r2, #2
 80043fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	689b      	ldr	r3, [r3, #8]
 8004404:	687a      	ldr	r2, [r7, #4]
 8004406:	6812      	ldr	r2, [r2, #0]
 8004408:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 800440c:	f023 0307 	bic.w	r3, r3, #7
 8004410:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681a      	ldr	r2, [r3, #0]
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	3304      	adds	r3, #4
 800441a:	4619      	mov	r1, r3
 800441c:	4610      	mov	r0, r2
 800441e:	f000 fca9 	bl	8004d74 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	689b      	ldr	r3, [r3, #8]
 8004428:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	699b      	ldr	r3, [r3, #24]
 8004430:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	6a1b      	ldr	r3, [r3, #32]
 8004438:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	697a      	ldr	r2, [r7, #20]
 8004440:	4313      	orrs	r3, r2
 8004442:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004444:	693b      	ldr	r3, [r7, #16]
 8004446:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800444a:	f023 0303 	bic.w	r3, r3, #3
 800444e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	689a      	ldr	r2, [r3, #8]
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	699b      	ldr	r3, [r3, #24]
 8004458:	021b      	lsls	r3, r3, #8
 800445a:	4313      	orrs	r3, r2
 800445c:	693a      	ldr	r2, [r7, #16]
 800445e:	4313      	orrs	r3, r2
 8004460:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004462:	693b      	ldr	r3, [r7, #16]
 8004464:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8004468:	f023 030c 	bic.w	r3, r3, #12
 800446c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800446e:	693b      	ldr	r3, [r7, #16]
 8004470:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004474:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004478:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	68da      	ldr	r2, [r3, #12]
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	69db      	ldr	r3, [r3, #28]
 8004482:	021b      	lsls	r3, r3, #8
 8004484:	4313      	orrs	r3, r2
 8004486:	693a      	ldr	r2, [r7, #16]
 8004488:	4313      	orrs	r3, r2
 800448a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	691b      	ldr	r3, [r3, #16]
 8004490:	011a      	lsls	r2, r3, #4
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	6a1b      	ldr	r3, [r3, #32]
 8004496:	031b      	lsls	r3, r3, #12
 8004498:	4313      	orrs	r3, r2
 800449a:	693a      	ldr	r2, [r7, #16]
 800449c:	4313      	orrs	r3, r2
 800449e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80044a6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80044ae:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	685a      	ldr	r2, [r3, #4]
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	695b      	ldr	r3, [r3, #20]
 80044b8:	011b      	lsls	r3, r3, #4
 80044ba:	4313      	orrs	r3, r2
 80044bc:	68fa      	ldr	r2, [r7, #12]
 80044be:	4313      	orrs	r3, r2
 80044c0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	697a      	ldr	r2, [r7, #20]
 80044c8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	693a      	ldr	r2, [r7, #16]
 80044d0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	68fa      	ldr	r2, [r7, #12]
 80044d8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2201      	movs	r2, #1
 80044de:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2201      	movs	r2, #1
 80044e6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2201      	movs	r2, #1
 80044ee:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2201      	movs	r2, #1
 80044f6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2201      	movs	r2, #1
 80044fe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2201      	movs	r2, #1
 8004506:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800450a:	2300      	movs	r3, #0
}
 800450c:	4618      	mov	r0, r3
 800450e:	3718      	adds	r7, #24
 8004510:	46bd      	mov	sp, r7
 8004512:	bd80      	pop	{r7, pc}

08004514 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b084      	sub	sp, #16
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
 800451c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004524:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800452c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004534:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800453c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d110      	bne.n	8004566 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004544:	7bfb      	ldrb	r3, [r7, #15]
 8004546:	2b01      	cmp	r3, #1
 8004548:	d102      	bne.n	8004550 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800454a:	7b7b      	ldrb	r3, [r7, #13]
 800454c:	2b01      	cmp	r3, #1
 800454e:	d001      	beq.n	8004554 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004550:	2301      	movs	r3, #1
 8004552:	e069      	b.n	8004628 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2202      	movs	r2, #2
 8004558:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2202      	movs	r2, #2
 8004560:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004564:	e031      	b.n	80045ca <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	2b04      	cmp	r3, #4
 800456a:	d110      	bne.n	800458e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800456c:	7bbb      	ldrb	r3, [r7, #14]
 800456e:	2b01      	cmp	r3, #1
 8004570:	d102      	bne.n	8004578 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004572:	7b3b      	ldrb	r3, [r7, #12]
 8004574:	2b01      	cmp	r3, #1
 8004576:	d001      	beq.n	800457c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004578:	2301      	movs	r3, #1
 800457a:	e055      	b.n	8004628 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2202      	movs	r2, #2
 8004580:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2202      	movs	r2, #2
 8004588:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800458c:	e01d      	b.n	80045ca <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800458e:	7bfb      	ldrb	r3, [r7, #15]
 8004590:	2b01      	cmp	r3, #1
 8004592:	d108      	bne.n	80045a6 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004594:	7bbb      	ldrb	r3, [r7, #14]
 8004596:	2b01      	cmp	r3, #1
 8004598:	d105      	bne.n	80045a6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800459a:	7b7b      	ldrb	r3, [r7, #13]
 800459c:	2b01      	cmp	r3, #1
 800459e:	d102      	bne.n	80045a6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80045a0:	7b3b      	ldrb	r3, [r7, #12]
 80045a2:	2b01      	cmp	r3, #1
 80045a4:	d001      	beq.n	80045aa <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80045a6:	2301      	movs	r3, #1
 80045a8:	e03e      	b.n	8004628 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2202      	movs	r2, #2
 80045ae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2202      	movs	r2, #2
 80045b6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2202      	movs	r2, #2
 80045be:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2202      	movs	r2, #2
 80045c6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d003      	beq.n	80045d8 <HAL_TIM_Encoder_Start+0xc4>
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	2b04      	cmp	r3, #4
 80045d4:	d008      	beq.n	80045e8 <HAL_TIM_Encoder_Start+0xd4>
 80045d6:	e00f      	b.n	80045f8 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	2201      	movs	r2, #1
 80045de:	2100      	movs	r1, #0
 80045e0:	4618      	mov	r0, r3
 80045e2:	f001 f841 	bl	8005668 <TIM_CCxChannelCmd>
      break;
 80045e6:	e016      	b.n	8004616 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	2201      	movs	r2, #1
 80045ee:	2104      	movs	r1, #4
 80045f0:	4618      	mov	r0, r3
 80045f2:	f001 f839 	bl	8005668 <TIM_CCxChannelCmd>
      break;
 80045f6:	e00e      	b.n	8004616 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	2201      	movs	r2, #1
 80045fe:	2100      	movs	r1, #0
 8004600:	4618      	mov	r0, r3
 8004602:	f001 f831 	bl	8005668 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	2201      	movs	r2, #1
 800460c:	2104      	movs	r1, #4
 800460e:	4618      	mov	r0, r3
 8004610:	f001 f82a 	bl	8005668 <TIM_CCxChannelCmd>
      break;
 8004614:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	681a      	ldr	r2, [r3, #0]
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f042 0201 	orr.w	r2, r2, #1
 8004624:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004626:	2300      	movs	r3, #0
}
 8004628:	4618      	mov	r0, r3
 800462a:	3710      	adds	r7, #16
 800462c:	46bd      	mov	sp, r7
 800462e:	bd80      	pop	{r7, pc}

08004630 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b084      	sub	sp, #16
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	68db      	ldr	r3, [r3, #12]
 800463e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	691b      	ldr	r3, [r3, #16]
 8004646:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	f003 0302 	and.w	r3, r3, #2
 800464e:	2b00      	cmp	r3, #0
 8004650:	d020      	beq.n	8004694 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	f003 0302 	and.w	r3, r3, #2
 8004658:	2b00      	cmp	r3, #0
 800465a:	d01b      	beq.n	8004694 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f06f 0202 	mvn.w	r2, #2
 8004664:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2201      	movs	r2, #1
 800466a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	699b      	ldr	r3, [r3, #24]
 8004672:	f003 0303 	and.w	r3, r3, #3
 8004676:	2b00      	cmp	r3, #0
 8004678:	d003      	beq.n	8004682 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800467a:	6878      	ldr	r0, [r7, #4]
 800467c:	f000 fb5c 	bl	8004d38 <HAL_TIM_IC_CaptureCallback>
 8004680:	e005      	b.n	800468e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004682:	6878      	ldr	r0, [r7, #4]
 8004684:	f000 fb4e 	bl	8004d24 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004688:	6878      	ldr	r0, [r7, #4]
 800468a:	f000 fb5f 	bl	8004d4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2200      	movs	r2, #0
 8004692:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004694:	68bb      	ldr	r3, [r7, #8]
 8004696:	f003 0304 	and.w	r3, r3, #4
 800469a:	2b00      	cmp	r3, #0
 800469c:	d020      	beq.n	80046e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	f003 0304 	and.w	r3, r3, #4
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d01b      	beq.n	80046e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f06f 0204 	mvn.w	r2, #4
 80046b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2202      	movs	r2, #2
 80046b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	699b      	ldr	r3, [r3, #24]
 80046be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d003      	beq.n	80046ce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046c6:	6878      	ldr	r0, [r7, #4]
 80046c8:	f000 fb36 	bl	8004d38 <HAL_TIM_IC_CaptureCallback>
 80046cc:	e005      	b.n	80046da <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046ce:	6878      	ldr	r0, [r7, #4]
 80046d0:	f000 fb28 	bl	8004d24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046d4:	6878      	ldr	r0, [r7, #4]
 80046d6:	f000 fb39 	bl	8004d4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2200      	movs	r2, #0
 80046de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80046e0:	68bb      	ldr	r3, [r7, #8]
 80046e2:	f003 0308 	and.w	r3, r3, #8
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d020      	beq.n	800472c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	f003 0308 	and.w	r3, r3, #8
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d01b      	beq.n	800472c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f06f 0208 	mvn.w	r2, #8
 80046fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2204      	movs	r2, #4
 8004702:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	69db      	ldr	r3, [r3, #28]
 800470a:	f003 0303 	and.w	r3, r3, #3
 800470e:	2b00      	cmp	r3, #0
 8004710:	d003      	beq.n	800471a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004712:	6878      	ldr	r0, [r7, #4]
 8004714:	f000 fb10 	bl	8004d38 <HAL_TIM_IC_CaptureCallback>
 8004718:	e005      	b.n	8004726 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800471a:	6878      	ldr	r0, [r7, #4]
 800471c:	f000 fb02 	bl	8004d24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004720:	6878      	ldr	r0, [r7, #4]
 8004722:	f000 fb13 	bl	8004d4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2200      	movs	r2, #0
 800472a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800472c:	68bb      	ldr	r3, [r7, #8]
 800472e:	f003 0310 	and.w	r3, r3, #16
 8004732:	2b00      	cmp	r3, #0
 8004734:	d020      	beq.n	8004778 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	f003 0310 	and.w	r3, r3, #16
 800473c:	2b00      	cmp	r3, #0
 800473e:	d01b      	beq.n	8004778 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f06f 0210 	mvn.w	r2, #16
 8004748:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2208      	movs	r2, #8
 800474e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	69db      	ldr	r3, [r3, #28]
 8004756:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800475a:	2b00      	cmp	r3, #0
 800475c:	d003      	beq.n	8004766 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800475e:	6878      	ldr	r0, [r7, #4]
 8004760:	f000 faea 	bl	8004d38 <HAL_TIM_IC_CaptureCallback>
 8004764:	e005      	b.n	8004772 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004766:	6878      	ldr	r0, [r7, #4]
 8004768:	f000 fadc 	bl	8004d24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800476c:	6878      	ldr	r0, [r7, #4]
 800476e:	f000 faed 	bl	8004d4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2200      	movs	r2, #0
 8004776:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004778:	68bb      	ldr	r3, [r7, #8]
 800477a:	f003 0301 	and.w	r3, r3, #1
 800477e:	2b00      	cmp	r3, #0
 8004780:	d00c      	beq.n	800479c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	f003 0301 	and.w	r3, r3, #1
 8004788:	2b00      	cmp	r3, #0
 800478a:	d007      	beq.n	800479c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f06f 0201 	mvn.w	r2, #1
 8004794:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004796:	6878      	ldr	r0, [r7, #4]
 8004798:	f7fd f9a6 	bl	8001ae8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800479c:	68bb      	ldr	r3, [r7, #8]
 800479e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d104      	bne.n	80047b0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80047a6:	68bb      	ldr	r3, [r7, #8]
 80047a8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d00c      	beq.n	80047ca <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d007      	beq.n	80047ca <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80047c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80047c4:	6878      	ldr	r0, [r7, #4]
 80047c6:	f001 f8a9 	bl	800591c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80047ca:	68bb      	ldr	r3, [r7, #8]
 80047cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d00c      	beq.n	80047ee <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d007      	beq.n	80047ee <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80047e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80047e8:	6878      	ldr	r0, [r7, #4]
 80047ea:	f001 f8a1 	bl	8005930 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80047ee:	68bb      	ldr	r3, [r7, #8]
 80047f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d00c      	beq.n	8004812 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d007      	beq.n	8004812 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800480a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800480c:	6878      	ldr	r0, [r7, #4]
 800480e:	f000 faa7 	bl	8004d60 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004812:	68bb      	ldr	r3, [r7, #8]
 8004814:	f003 0320 	and.w	r3, r3, #32
 8004818:	2b00      	cmp	r3, #0
 800481a:	d00c      	beq.n	8004836 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	f003 0320 	and.w	r3, r3, #32
 8004822:	2b00      	cmp	r3, #0
 8004824:	d007      	beq.n	8004836 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f06f 0220 	mvn.w	r2, #32
 800482e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004830:	6878      	ldr	r0, [r7, #4]
 8004832:	f001 f869 	bl	8005908 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8004836:	68bb      	ldr	r3, [r7, #8]
 8004838:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800483c:	2b00      	cmp	r3, #0
 800483e:	d00c      	beq.n	800485a <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004846:	2b00      	cmp	r3, #0
 8004848:	d007      	beq.n	800485a <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8004852:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8004854:	6878      	ldr	r0, [r7, #4]
 8004856:	f001 f875 	bl	8005944 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800485a:	68bb      	ldr	r3, [r7, #8]
 800485c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004860:	2b00      	cmp	r3, #0
 8004862:	d00c      	beq.n	800487e <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800486a:	2b00      	cmp	r3, #0
 800486c:	d007      	beq.n	800487e <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8004876:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8004878:	6878      	ldr	r0, [r7, #4]
 800487a:	f001 f86d 	bl	8005958 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800487e:	68bb      	ldr	r3, [r7, #8]
 8004880:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004884:	2b00      	cmp	r3, #0
 8004886:	d00c      	beq.n	80048a2 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800488e:	2b00      	cmp	r3, #0
 8004890:	d007      	beq.n	80048a2 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800489a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800489c:	6878      	ldr	r0, [r7, #4]
 800489e:	f001 f865 	bl	800596c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80048a2:	68bb      	ldr	r3, [r7, #8]
 80048a4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d00c      	beq.n	80048c6 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d007      	beq.n	80048c6 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 80048be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80048c0:	6878      	ldr	r0, [r7, #4]
 80048c2:	f001 f85d 	bl	8005980 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80048c6:	bf00      	nop
 80048c8:	3710      	adds	r7, #16
 80048ca:	46bd      	mov	sp, r7
 80048cc:	bd80      	pop	{r7, pc}
	...

080048d0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b086      	sub	sp, #24
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	60f8      	str	r0, [r7, #12]
 80048d8:	60b9      	str	r1, [r7, #8]
 80048da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80048dc:	2300      	movs	r3, #0
 80048de:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80048e6:	2b01      	cmp	r3, #1
 80048e8:	d101      	bne.n	80048ee <HAL_TIM_PWM_ConfigChannel+0x1e>
 80048ea:	2302      	movs	r3, #2
 80048ec:	e0ff      	b.n	8004aee <HAL_TIM_PWM_ConfigChannel+0x21e>
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	2201      	movs	r2, #1
 80048f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2b14      	cmp	r3, #20
 80048fa:	f200 80f0 	bhi.w	8004ade <HAL_TIM_PWM_ConfigChannel+0x20e>
 80048fe:	a201      	add	r2, pc, #4	@ (adr r2, 8004904 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004900:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004904:	08004959 	.word	0x08004959
 8004908:	08004adf 	.word	0x08004adf
 800490c:	08004adf 	.word	0x08004adf
 8004910:	08004adf 	.word	0x08004adf
 8004914:	08004999 	.word	0x08004999
 8004918:	08004adf 	.word	0x08004adf
 800491c:	08004adf 	.word	0x08004adf
 8004920:	08004adf 	.word	0x08004adf
 8004924:	080049db 	.word	0x080049db
 8004928:	08004adf 	.word	0x08004adf
 800492c:	08004adf 	.word	0x08004adf
 8004930:	08004adf 	.word	0x08004adf
 8004934:	08004a1b 	.word	0x08004a1b
 8004938:	08004adf 	.word	0x08004adf
 800493c:	08004adf 	.word	0x08004adf
 8004940:	08004adf 	.word	0x08004adf
 8004944:	08004a5d 	.word	0x08004a5d
 8004948:	08004adf 	.word	0x08004adf
 800494c:	08004adf 	.word	0x08004adf
 8004950:	08004adf 	.word	0x08004adf
 8004954:	08004a9d 	.word	0x08004a9d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	68b9      	ldr	r1, [r7, #8]
 800495e:	4618      	mov	r0, r3
 8004960:	f000 fabc 	bl	8004edc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	699a      	ldr	r2, [r3, #24]
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f042 0208 	orr.w	r2, r2, #8
 8004972:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	699a      	ldr	r2, [r3, #24]
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f022 0204 	bic.w	r2, r2, #4
 8004982:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	6999      	ldr	r1, [r3, #24]
 800498a:	68bb      	ldr	r3, [r7, #8]
 800498c:	691a      	ldr	r2, [r3, #16]
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	430a      	orrs	r2, r1
 8004994:	619a      	str	r2, [r3, #24]
      break;
 8004996:	e0a5      	b.n	8004ae4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	68b9      	ldr	r1, [r7, #8]
 800499e:	4618      	mov	r0, r3
 80049a0:	f000 fb36 	bl	8005010 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	699a      	ldr	r2, [r3, #24]
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80049b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	699a      	ldr	r2, [r3, #24]
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80049c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	6999      	ldr	r1, [r3, #24]
 80049ca:	68bb      	ldr	r3, [r7, #8]
 80049cc:	691b      	ldr	r3, [r3, #16]
 80049ce:	021a      	lsls	r2, r3, #8
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	430a      	orrs	r2, r1
 80049d6:	619a      	str	r2, [r3, #24]
      break;
 80049d8:	e084      	b.n	8004ae4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	68b9      	ldr	r1, [r7, #8]
 80049e0:	4618      	mov	r0, r3
 80049e2:	f000 fba9 	bl	8005138 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	69da      	ldr	r2, [r3, #28]
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f042 0208 	orr.w	r2, r2, #8
 80049f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	69da      	ldr	r2, [r3, #28]
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f022 0204 	bic.w	r2, r2, #4
 8004a04:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	69d9      	ldr	r1, [r3, #28]
 8004a0c:	68bb      	ldr	r3, [r7, #8]
 8004a0e:	691a      	ldr	r2, [r3, #16]
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	430a      	orrs	r2, r1
 8004a16:	61da      	str	r2, [r3, #28]
      break;
 8004a18:	e064      	b.n	8004ae4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	68b9      	ldr	r1, [r7, #8]
 8004a20:	4618      	mov	r0, r3
 8004a22:	f000 fc1b 	bl	800525c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	69da      	ldr	r2, [r3, #28]
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004a34:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	69da      	ldr	r2, [r3, #28]
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004a44:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	69d9      	ldr	r1, [r3, #28]
 8004a4c:	68bb      	ldr	r3, [r7, #8]
 8004a4e:	691b      	ldr	r3, [r3, #16]
 8004a50:	021a      	lsls	r2, r3, #8
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	430a      	orrs	r2, r1
 8004a58:	61da      	str	r2, [r3, #28]
      break;
 8004a5a:	e043      	b.n	8004ae4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	68b9      	ldr	r1, [r7, #8]
 8004a62:	4618      	mov	r0, r3
 8004a64:	f000 fc8e 	bl	8005384 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f042 0208 	orr.w	r2, r2, #8
 8004a76:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f022 0204 	bic.w	r2, r2, #4
 8004a86:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8004a8e:	68bb      	ldr	r3, [r7, #8]
 8004a90:	691a      	ldr	r2, [r3, #16]
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	430a      	orrs	r2, r1
 8004a98:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8004a9a:	e023      	b.n	8004ae4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	68b9      	ldr	r1, [r7, #8]
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	f000 fcd8 	bl	8005458 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004ab6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004ac6:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8004ace:	68bb      	ldr	r3, [r7, #8]
 8004ad0:	691b      	ldr	r3, [r3, #16]
 8004ad2:	021a      	lsls	r2, r3, #8
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	430a      	orrs	r2, r1
 8004ada:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8004adc:	e002      	b.n	8004ae4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	75fb      	strb	r3, [r7, #23]
      break;
 8004ae2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004aec:	7dfb      	ldrb	r3, [r7, #23]
}
 8004aee:	4618      	mov	r0, r3
 8004af0:	3718      	adds	r7, #24
 8004af2:	46bd      	mov	sp, r7
 8004af4:	bd80      	pop	{r7, pc}
 8004af6:	bf00      	nop

08004af8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b084      	sub	sp, #16
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
 8004b00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004b02:	2300      	movs	r3, #0
 8004b04:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004b0c:	2b01      	cmp	r3, #1
 8004b0e:	d101      	bne.n	8004b14 <HAL_TIM_ConfigClockSource+0x1c>
 8004b10:	2302      	movs	r3, #2
 8004b12:	e0f6      	b.n	8004d02 <HAL_TIM_ConfigClockSource+0x20a>
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2201      	movs	r2, #1
 8004b18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2202      	movs	r2, #2
 8004b20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	689b      	ldr	r3, [r3, #8]
 8004b2a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8004b32:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004b36:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b38:	68bb      	ldr	r3, [r7, #8]
 8004b3a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004b3e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	68ba      	ldr	r2, [r7, #8]
 8004b46:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4a6f      	ldr	r2, [pc, #444]	@ (8004d0c <HAL_TIM_ConfigClockSource+0x214>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	f000 80c1 	beq.w	8004cd6 <HAL_TIM_ConfigClockSource+0x1de>
 8004b54:	4a6d      	ldr	r2, [pc, #436]	@ (8004d0c <HAL_TIM_ConfigClockSource+0x214>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	f200 80c6 	bhi.w	8004ce8 <HAL_TIM_ConfigClockSource+0x1f0>
 8004b5c:	4a6c      	ldr	r2, [pc, #432]	@ (8004d10 <HAL_TIM_ConfigClockSource+0x218>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	f000 80b9 	beq.w	8004cd6 <HAL_TIM_ConfigClockSource+0x1de>
 8004b64:	4a6a      	ldr	r2, [pc, #424]	@ (8004d10 <HAL_TIM_ConfigClockSource+0x218>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	f200 80be 	bhi.w	8004ce8 <HAL_TIM_ConfigClockSource+0x1f0>
 8004b6c:	4a69      	ldr	r2, [pc, #420]	@ (8004d14 <HAL_TIM_ConfigClockSource+0x21c>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	f000 80b1 	beq.w	8004cd6 <HAL_TIM_ConfigClockSource+0x1de>
 8004b74:	4a67      	ldr	r2, [pc, #412]	@ (8004d14 <HAL_TIM_ConfigClockSource+0x21c>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	f200 80b6 	bhi.w	8004ce8 <HAL_TIM_ConfigClockSource+0x1f0>
 8004b7c:	4a66      	ldr	r2, [pc, #408]	@ (8004d18 <HAL_TIM_ConfigClockSource+0x220>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	f000 80a9 	beq.w	8004cd6 <HAL_TIM_ConfigClockSource+0x1de>
 8004b84:	4a64      	ldr	r2, [pc, #400]	@ (8004d18 <HAL_TIM_ConfigClockSource+0x220>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	f200 80ae 	bhi.w	8004ce8 <HAL_TIM_ConfigClockSource+0x1f0>
 8004b8c:	4a63      	ldr	r2, [pc, #396]	@ (8004d1c <HAL_TIM_ConfigClockSource+0x224>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	f000 80a1 	beq.w	8004cd6 <HAL_TIM_ConfigClockSource+0x1de>
 8004b94:	4a61      	ldr	r2, [pc, #388]	@ (8004d1c <HAL_TIM_ConfigClockSource+0x224>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	f200 80a6 	bhi.w	8004ce8 <HAL_TIM_ConfigClockSource+0x1f0>
 8004b9c:	4a60      	ldr	r2, [pc, #384]	@ (8004d20 <HAL_TIM_ConfigClockSource+0x228>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	f000 8099 	beq.w	8004cd6 <HAL_TIM_ConfigClockSource+0x1de>
 8004ba4:	4a5e      	ldr	r2, [pc, #376]	@ (8004d20 <HAL_TIM_ConfigClockSource+0x228>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	f200 809e 	bhi.w	8004ce8 <HAL_TIM_ConfigClockSource+0x1f0>
 8004bac:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8004bb0:	f000 8091 	beq.w	8004cd6 <HAL_TIM_ConfigClockSource+0x1de>
 8004bb4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8004bb8:	f200 8096 	bhi.w	8004ce8 <HAL_TIM_ConfigClockSource+0x1f0>
 8004bbc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004bc0:	f000 8089 	beq.w	8004cd6 <HAL_TIM_ConfigClockSource+0x1de>
 8004bc4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004bc8:	f200 808e 	bhi.w	8004ce8 <HAL_TIM_ConfigClockSource+0x1f0>
 8004bcc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004bd0:	d03e      	beq.n	8004c50 <HAL_TIM_ConfigClockSource+0x158>
 8004bd2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004bd6:	f200 8087 	bhi.w	8004ce8 <HAL_TIM_ConfigClockSource+0x1f0>
 8004bda:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004bde:	f000 8086 	beq.w	8004cee <HAL_TIM_ConfigClockSource+0x1f6>
 8004be2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004be6:	d87f      	bhi.n	8004ce8 <HAL_TIM_ConfigClockSource+0x1f0>
 8004be8:	2b70      	cmp	r3, #112	@ 0x70
 8004bea:	d01a      	beq.n	8004c22 <HAL_TIM_ConfigClockSource+0x12a>
 8004bec:	2b70      	cmp	r3, #112	@ 0x70
 8004bee:	d87b      	bhi.n	8004ce8 <HAL_TIM_ConfigClockSource+0x1f0>
 8004bf0:	2b60      	cmp	r3, #96	@ 0x60
 8004bf2:	d050      	beq.n	8004c96 <HAL_TIM_ConfigClockSource+0x19e>
 8004bf4:	2b60      	cmp	r3, #96	@ 0x60
 8004bf6:	d877      	bhi.n	8004ce8 <HAL_TIM_ConfigClockSource+0x1f0>
 8004bf8:	2b50      	cmp	r3, #80	@ 0x50
 8004bfa:	d03c      	beq.n	8004c76 <HAL_TIM_ConfigClockSource+0x17e>
 8004bfc:	2b50      	cmp	r3, #80	@ 0x50
 8004bfe:	d873      	bhi.n	8004ce8 <HAL_TIM_ConfigClockSource+0x1f0>
 8004c00:	2b40      	cmp	r3, #64	@ 0x40
 8004c02:	d058      	beq.n	8004cb6 <HAL_TIM_ConfigClockSource+0x1be>
 8004c04:	2b40      	cmp	r3, #64	@ 0x40
 8004c06:	d86f      	bhi.n	8004ce8 <HAL_TIM_ConfigClockSource+0x1f0>
 8004c08:	2b30      	cmp	r3, #48	@ 0x30
 8004c0a:	d064      	beq.n	8004cd6 <HAL_TIM_ConfigClockSource+0x1de>
 8004c0c:	2b30      	cmp	r3, #48	@ 0x30
 8004c0e:	d86b      	bhi.n	8004ce8 <HAL_TIM_ConfigClockSource+0x1f0>
 8004c10:	2b20      	cmp	r3, #32
 8004c12:	d060      	beq.n	8004cd6 <HAL_TIM_ConfigClockSource+0x1de>
 8004c14:	2b20      	cmp	r3, #32
 8004c16:	d867      	bhi.n	8004ce8 <HAL_TIM_ConfigClockSource+0x1f0>
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d05c      	beq.n	8004cd6 <HAL_TIM_ConfigClockSource+0x1de>
 8004c1c:	2b10      	cmp	r3, #16
 8004c1e:	d05a      	beq.n	8004cd6 <HAL_TIM_ConfigClockSource+0x1de>
 8004c20:	e062      	b.n	8004ce8 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004c32:	f000 fcf9 	bl	8005628 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	689b      	ldr	r3, [r3, #8]
 8004c3c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004c3e:	68bb      	ldr	r3, [r7, #8]
 8004c40:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004c44:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	68ba      	ldr	r2, [r7, #8]
 8004c4c:	609a      	str	r2, [r3, #8]
      break;
 8004c4e:	e04f      	b.n	8004cf0 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004c60:	f000 fce2 	bl	8005628 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	689a      	ldr	r2, [r3, #8]
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004c72:	609a      	str	r2, [r3, #8]
      break;
 8004c74:	e03c      	b.n	8004cf0 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c82:	461a      	mov	r2, r3
 8004c84:	f000 fc54 	bl	8005530 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	2150      	movs	r1, #80	@ 0x50
 8004c8e:	4618      	mov	r0, r3
 8004c90:	f000 fcad 	bl	80055ee <TIM_ITRx_SetConfig>
      break;
 8004c94:	e02c      	b.n	8004cf0 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004ca2:	461a      	mov	r2, r3
 8004ca4:	f000 fc73 	bl	800558e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	2160      	movs	r1, #96	@ 0x60
 8004cae:	4618      	mov	r0, r3
 8004cb0:	f000 fc9d 	bl	80055ee <TIM_ITRx_SetConfig>
      break;
 8004cb4:	e01c      	b.n	8004cf0 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004cc2:	461a      	mov	r2, r3
 8004cc4:	f000 fc34 	bl	8005530 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	2140      	movs	r1, #64	@ 0x40
 8004cce:	4618      	mov	r0, r3
 8004cd0:	f000 fc8d 	bl	80055ee <TIM_ITRx_SetConfig>
      break;
 8004cd4:	e00c      	b.n	8004cf0 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681a      	ldr	r2, [r3, #0]
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4619      	mov	r1, r3
 8004ce0:	4610      	mov	r0, r2
 8004ce2:	f000 fc84 	bl	80055ee <TIM_ITRx_SetConfig>
      break;
 8004ce6:	e003      	b.n	8004cf0 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8004ce8:	2301      	movs	r3, #1
 8004cea:	73fb      	strb	r3, [r7, #15]
      break;
 8004cec:	e000      	b.n	8004cf0 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8004cee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2201      	movs	r2, #1
 8004cf4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004d00:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d02:	4618      	mov	r0, r3
 8004d04:	3710      	adds	r7, #16
 8004d06:	46bd      	mov	sp, r7
 8004d08:	bd80      	pop	{r7, pc}
 8004d0a:	bf00      	nop
 8004d0c:	00100070 	.word	0x00100070
 8004d10:	00100060 	.word	0x00100060
 8004d14:	00100050 	.word	0x00100050
 8004d18:	00100040 	.word	0x00100040
 8004d1c:	00100030 	.word	0x00100030
 8004d20:	00100020 	.word	0x00100020

08004d24 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004d24:	b480      	push	{r7}
 8004d26:	b083      	sub	sp, #12
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004d2c:	bf00      	nop
 8004d2e:	370c      	adds	r7, #12
 8004d30:	46bd      	mov	sp, r7
 8004d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d36:	4770      	bx	lr

08004d38 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004d38:	b480      	push	{r7}
 8004d3a:	b083      	sub	sp, #12
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004d40:	bf00      	nop
 8004d42:	370c      	adds	r7, #12
 8004d44:	46bd      	mov	sp, r7
 8004d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4a:	4770      	bx	lr

08004d4c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004d4c:	b480      	push	{r7}
 8004d4e:	b083      	sub	sp, #12
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004d54:	bf00      	nop
 8004d56:	370c      	adds	r7, #12
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5e:	4770      	bx	lr

08004d60 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004d60:	b480      	push	{r7}
 8004d62:	b083      	sub	sp, #12
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004d68:	bf00      	nop
 8004d6a:	370c      	adds	r7, #12
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d72:	4770      	bx	lr

08004d74 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004d74:	b480      	push	{r7}
 8004d76:	b085      	sub	sp, #20
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
 8004d7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	4a4c      	ldr	r2, [pc, #304]	@ (8004eb8 <TIM_Base_SetConfig+0x144>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d017      	beq.n	8004dbc <TIM_Base_SetConfig+0x48>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d92:	d013      	beq.n	8004dbc <TIM_Base_SetConfig+0x48>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	4a49      	ldr	r2, [pc, #292]	@ (8004ebc <TIM_Base_SetConfig+0x148>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d00f      	beq.n	8004dbc <TIM_Base_SetConfig+0x48>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	4a48      	ldr	r2, [pc, #288]	@ (8004ec0 <TIM_Base_SetConfig+0x14c>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d00b      	beq.n	8004dbc <TIM_Base_SetConfig+0x48>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	4a47      	ldr	r2, [pc, #284]	@ (8004ec4 <TIM_Base_SetConfig+0x150>)
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d007      	beq.n	8004dbc <TIM_Base_SetConfig+0x48>
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	4a46      	ldr	r2, [pc, #280]	@ (8004ec8 <TIM_Base_SetConfig+0x154>)
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d003      	beq.n	8004dbc <TIM_Base_SetConfig+0x48>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	4a45      	ldr	r2, [pc, #276]	@ (8004ecc <TIM_Base_SetConfig+0x158>)
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d108      	bne.n	8004dce <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004dc2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	685b      	ldr	r3, [r3, #4]
 8004dc8:	68fa      	ldr	r2, [r7, #12]
 8004dca:	4313      	orrs	r3, r2
 8004dcc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	4a39      	ldr	r2, [pc, #228]	@ (8004eb8 <TIM_Base_SetConfig+0x144>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d023      	beq.n	8004e1e <TIM_Base_SetConfig+0xaa>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ddc:	d01f      	beq.n	8004e1e <TIM_Base_SetConfig+0xaa>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	4a36      	ldr	r2, [pc, #216]	@ (8004ebc <TIM_Base_SetConfig+0x148>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d01b      	beq.n	8004e1e <TIM_Base_SetConfig+0xaa>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	4a35      	ldr	r2, [pc, #212]	@ (8004ec0 <TIM_Base_SetConfig+0x14c>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d017      	beq.n	8004e1e <TIM_Base_SetConfig+0xaa>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	4a34      	ldr	r2, [pc, #208]	@ (8004ec4 <TIM_Base_SetConfig+0x150>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d013      	beq.n	8004e1e <TIM_Base_SetConfig+0xaa>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	4a33      	ldr	r2, [pc, #204]	@ (8004ec8 <TIM_Base_SetConfig+0x154>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d00f      	beq.n	8004e1e <TIM_Base_SetConfig+0xaa>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	4a33      	ldr	r2, [pc, #204]	@ (8004ed0 <TIM_Base_SetConfig+0x15c>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d00b      	beq.n	8004e1e <TIM_Base_SetConfig+0xaa>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	4a32      	ldr	r2, [pc, #200]	@ (8004ed4 <TIM_Base_SetConfig+0x160>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d007      	beq.n	8004e1e <TIM_Base_SetConfig+0xaa>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	4a31      	ldr	r2, [pc, #196]	@ (8004ed8 <TIM_Base_SetConfig+0x164>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d003      	beq.n	8004e1e <TIM_Base_SetConfig+0xaa>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	4a2c      	ldr	r2, [pc, #176]	@ (8004ecc <TIM_Base_SetConfig+0x158>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d108      	bne.n	8004e30 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	68db      	ldr	r3, [r3, #12]
 8004e2a:	68fa      	ldr	r2, [r7, #12]
 8004e2c:	4313      	orrs	r3, r2
 8004e2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	695b      	ldr	r3, [r3, #20]
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	68fa      	ldr	r2, [r7, #12]
 8004e42:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	689a      	ldr	r2, [r3, #8]
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	681a      	ldr	r2, [r3, #0]
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	4a18      	ldr	r2, [pc, #96]	@ (8004eb8 <TIM_Base_SetConfig+0x144>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d013      	beq.n	8004e84 <TIM_Base_SetConfig+0x110>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	4a1a      	ldr	r2, [pc, #104]	@ (8004ec8 <TIM_Base_SetConfig+0x154>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d00f      	beq.n	8004e84 <TIM_Base_SetConfig+0x110>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	4a1a      	ldr	r2, [pc, #104]	@ (8004ed0 <TIM_Base_SetConfig+0x15c>)
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d00b      	beq.n	8004e84 <TIM_Base_SetConfig+0x110>
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	4a19      	ldr	r2, [pc, #100]	@ (8004ed4 <TIM_Base_SetConfig+0x160>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d007      	beq.n	8004e84 <TIM_Base_SetConfig+0x110>
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	4a18      	ldr	r2, [pc, #96]	@ (8004ed8 <TIM_Base_SetConfig+0x164>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d003      	beq.n	8004e84 <TIM_Base_SetConfig+0x110>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	4a13      	ldr	r2, [pc, #76]	@ (8004ecc <TIM_Base_SetConfig+0x158>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d103      	bne.n	8004e8c <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	691a      	ldr	r2, [r3, #16]
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2201      	movs	r2, #1
 8004e90:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	691b      	ldr	r3, [r3, #16]
 8004e96:	f003 0301 	and.w	r3, r3, #1
 8004e9a:	2b01      	cmp	r3, #1
 8004e9c:	d105      	bne.n	8004eaa <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	691b      	ldr	r3, [r3, #16]
 8004ea2:	f023 0201 	bic.w	r2, r3, #1
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	611a      	str	r2, [r3, #16]
  }
}
 8004eaa:	bf00      	nop
 8004eac:	3714      	adds	r7, #20
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb4:	4770      	bx	lr
 8004eb6:	bf00      	nop
 8004eb8:	40012c00 	.word	0x40012c00
 8004ebc:	40000400 	.word	0x40000400
 8004ec0:	40000800 	.word	0x40000800
 8004ec4:	40000c00 	.word	0x40000c00
 8004ec8:	40013400 	.word	0x40013400
 8004ecc:	40015000 	.word	0x40015000
 8004ed0:	40014000 	.word	0x40014000
 8004ed4:	40014400 	.word	0x40014400
 8004ed8:	40014800 	.word	0x40014800

08004edc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004edc:	b480      	push	{r7}
 8004ede:	b087      	sub	sp, #28
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
 8004ee4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6a1b      	ldr	r3, [r3, #32]
 8004eea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6a1b      	ldr	r3, [r3, #32]
 8004ef0:	f023 0201 	bic.w	r2, r3, #1
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	685b      	ldr	r3, [r3, #4]
 8004efc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	699b      	ldr	r3, [r3, #24]
 8004f02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004f0a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	f023 0303 	bic.w	r3, r3, #3
 8004f16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	68fa      	ldr	r2, [r7, #12]
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004f22:	697b      	ldr	r3, [r7, #20]
 8004f24:	f023 0302 	bic.w	r3, r3, #2
 8004f28:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	689b      	ldr	r3, [r3, #8]
 8004f2e:	697a      	ldr	r2, [r7, #20]
 8004f30:	4313      	orrs	r3, r2
 8004f32:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	4a30      	ldr	r2, [pc, #192]	@ (8004ff8 <TIM_OC1_SetConfig+0x11c>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d013      	beq.n	8004f64 <TIM_OC1_SetConfig+0x88>
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	4a2f      	ldr	r2, [pc, #188]	@ (8004ffc <TIM_OC1_SetConfig+0x120>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d00f      	beq.n	8004f64 <TIM_OC1_SetConfig+0x88>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	4a2e      	ldr	r2, [pc, #184]	@ (8005000 <TIM_OC1_SetConfig+0x124>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d00b      	beq.n	8004f64 <TIM_OC1_SetConfig+0x88>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	4a2d      	ldr	r2, [pc, #180]	@ (8005004 <TIM_OC1_SetConfig+0x128>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d007      	beq.n	8004f64 <TIM_OC1_SetConfig+0x88>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	4a2c      	ldr	r2, [pc, #176]	@ (8005008 <TIM_OC1_SetConfig+0x12c>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d003      	beq.n	8004f64 <TIM_OC1_SetConfig+0x88>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	4a2b      	ldr	r2, [pc, #172]	@ (800500c <TIM_OC1_SetConfig+0x130>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d10c      	bne.n	8004f7e <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004f64:	697b      	ldr	r3, [r7, #20]
 8004f66:	f023 0308 	bic.w	r3, r3, #8
 8004f6a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	68db      	ldr	r3, [r3, #12]
 8004f70:	697a      	ldr	r2, [r7, #20]
 8004f72:	4313      	orrs	r3, r2
 8004f74:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004f76:	697b      	ldr	r3, [r7, #20]
 8004f78:	f023 0304 	bic.w	r3, r3, #4
 8004f7c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	4a1d      	ldr	r2, [pc, #116]	@ (8004ff8 <TIM_OC1_SetConfig+0x11c>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d013      	beq.n	8004fae <TIM_OC1_SetConfig+0xd2>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	4a1c      	ldr	r2, [pc, #112]	@ (8004ffc <TIM_OC1_SetConfig+0x120>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d00f      	beq.n	8004fae <TIM_OC1_SetConfig+0xd2>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	4a1b      	ldr	r2, [pc, #108]	@ (8005000 <TIM_OC1_SetConfig+0x124>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d00b      	beq.n	8004fae <TIM_OC1_SetConfig+0xd2>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	4a1a      	ldr	r2, [pc, #104]	@ (8005004 <TIM_OC1_SetConfig+0x128>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d007      	beq.n	8004fae <TIM_OC1_SetConfig+0xd2>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	4a19      	ldr	r2, [pc, #100]	@ (8005008 <TIM_OC1_SetConfig+0x12c>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d003      	beq.n	8004fae <TIM_OC1_SetConfig+0xd2>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	4a18      	ldr	r2, [pc, #96]	@ (800500c <TIM_OC1_SetConfig+0x130>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d111      	bne.n	8004fd2 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004fae:	693b      	ldr	r3, [r7, #16]
 8004fb0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004fb4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004fb6:	693b      	ldr	r3, [r7, #16]
 8004fb8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004fbc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	695b      	ldr	r3, [r3, #20]
 8004fc2:	693a      	ldr	r2, [r7, #16]
 8004fc4:	4313      	orrs	r3, r2
 8004fc6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	699b      	ldr	r3, [r3, #24]
 8004fcc:	693a      	ldr	r2, [r7, #16]
 8004fce:	4313      	orrs	r3, r2
 8004fd0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	693a      	ldr	r2, [r7, #16]
 8004fd6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	68fa      	ldr	r2, [r7, #12]
 8004fdc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	685a      	ldr	r2, [r3, #4]
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	697a      	ldr	r2, [r7, #20]
 8004fea:	621a      	str	r2, [r3, #32]
}
 8004fec:	bf00      	nop
 8004fee:	371c      	adds	r7, #28
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff6:	4770      	bx	lr
 8004ff8:	40012c00 	.word	0x40012c00
 8004ffc:	40013400 	.word	0x40013400
 8005000:	40014000 	.word	0x40014000
 8005004:	40014400 	.word	0x40014400
 8005008:	40014800 	.word	0x40014800
 800500c:	40015000 	.word	0x40015000

08005010 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005010:	b480      	push	{r7}
 8005012:	b087      	sub	sp, #28
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
 8005018:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6a1b      	ldr	r3, [r3, #32]
 800501e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6a1b      	ldr	r3, [r3, #32]
 8005024:	f023 0210 	bic.w	r2, r3, #16
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	685b      	ldr	r3, [r3, #4]
 8005030:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	699b      	ldr	r3, [r3, #24]
 8005036:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800503e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005042:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800504a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	021b      	lsls	r3, r3, #8
 8005052:	68fa      	ldr	r2, [r7, #12]
 8005054:	4313      	orrs	r3, r2
 8005056:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005058:	697b      	ldr	r3, [r7, #20]
 800505a:	f023 0320 	bic.w	r3, r3, #32
 800505e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	689b      	ldr	r3, [r3, #8]
 8005064:	011b      	lsls	r3, r3, #4
 8005066:	697a      	ldr	r2, [r7, #20]
 8005068:	4313      	orrs	r3, r2
 800506a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	4a2c      	ldr	r2, [pc, #176]	@ (8005120 <TIM_OC2_SetConfig+0x110>)
 8005070:	4293      	cmp	r3, r2
 8005072:	d007      	beq.n	8005084 <TIM_OC2_SetConfig+0x74>
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	4a2b      	ldr	r2, [pc, #172]	@ (8005124 <TIM_OC2_SetConfig+0x114>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d003      	beq.n	8005084 <TIM_OC2_SetConfig+0x74>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	4a2a      	ldr	r2, [pc, #168]	@ (8005128 <TIM_OC2_SetConfig+0x118>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d10d      	bne.n	80050a0 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005084:	697b      	ldr	r3, [r7, #20]
 8005086:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800508a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	68db      	ldr	r3, [r3, #12]
 8005090:	011b      	lsls	r3, r3, #4
 8005092:	697a      	ldr	r2, [r7, #20]
 8005094:	4313      	orrs	r3, r2
 8005096:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005098:	697b      	ldr	r3, [r7, #20]
 800509a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800509e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	4a1f      	ldr	r2, [pc, #124]	@ (8005120 <TIM_OC2_SetConfig+0x110>)
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d013      	beq.n	80050d0 <TIM_OC2_SetConfig+0xc0>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	4a1e      	ldr	r2, [pc, #120]	@ (8005124 <TIM_OC2_SetConfig+0x114>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d00f      	beq.n	80050d0 <TIM_OC2_SetConfig+0xc0>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	4a1e      	ldr	r2, [pc, #120]	@ (800512c <TIM_OC2_SetConfig+0x11c>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d00b      	beq.n	80050d0 <TIM_OC2_SetConfig+0xc0>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	4a1d      	ldr	r2, [pc, #116]	@ (8005130 <TIM_OC2_SetConfig+0x120>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d007      	beq.n	80050d0 <TIM_OC2_SetConfig+0xc0>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	4a1c      	ldr	r2, [pc, #112]	@ (8005134 <TIM_OC2_SetConfig+0x124>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d003      	beq.n	80050d0 <TIM_OC2_SetConfig+0xc0>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	4a17      	ldr	r2, [pc, #92]	@ (8005128 <TIM_OC2_SetConfig+0x118>)
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d113      	bne.n	80050f8 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80050d0:	693b      	ldr	r3, [r7, #16]
 80050d2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80050d6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80050d8:	693b      	ldr	r3, [r7, #16]
 80050da:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80050de:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	695b      	ldr	r3, [r3, #20]
 80050e4:	009b      	lsls	r3, r3, #2
 80050e6:	693a      	ldr	r2, [r7, #16]
 80050e8:	4313      	orrs	r3, r2
 80050ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	699b      	ldr	r3, [r3, #24]
 80050f0:	009b      	lsls	r3, r3, #2
 80050f2:	693a      	ldr	r2, [r7, #16]
 80050f4:	4313      	orrs	r3, r2
 80050f6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	693a      	ldr	r2, [r7, #16]
 80050fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	68fa      	ldr	r2, [r7, #12]
 8005102:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	685a      	ldr	r2, [r3, #4]
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	697a      	ldr	r2, [r7, #20]
 8005110:	621a      	str	r2, [r3, #32]
}
 8005112:	bf00      	nop
 8005114:	371c      	adds	r7, #28
 8005116:	46bd      	mov	sp, r7
 8005118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511c:	4770      	bx	lr
 800511e:	bf00      	nop
 8005120:	40012c00 	.word	0x40012c00
 8005124:	40013400 	.word	0x40013400
 8005128:	40015000 	.word	0x40015000
 800512c:	40014000 	.word	0x40014000
 8005130:	40014400 	.word	0x40014400
 8005134:	40014800 	.word	0x40014800

08005138 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005138:	b480      	push	{r7}
 800513a:	b087      	sub	sp, #28
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
 8005140:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6a1b      	ldr	r3, [r3, #32]
 8005146:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6a1b      	ldr	r3, [r3, #32]
 800514c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	685b      	ldr	r3, [r3, #4]
 8005158:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	69db      	ldr	r3, [r3, #28]
 800515e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005166:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800516a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	f023 0303 	bic.w	r3, r3, #3
 8005172:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	68fa      	ldr	r2, [r7, #12]
 800517a:	4313      	orrs	r3, r2
 800517c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800517e:	697b      	ldr	r3, [r7, #20]
 8005180:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005184:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	689b      	ldr	r3, [r3, #8]
 800518a:	021b      	lsls	r3, r3, #8
 800518c:	697a      	ldr	r2, [r7, #20]
 800518e:	4313      	orrs	r3, r2
 8005190:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	4a2b      	ldr	r2, [pc, #172]	@ (8005244 <TIM_OC3_SetConfig+0x10c>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d007      	beq.n	80051aa <TIM_OC3_SetConfig+0x72>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	4a2a      	ldr	r2, [pc, #168]	@ (8005248 <TIM_OC3_SetConfig+0x110>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d003      	beq.n	80051aa <TIM_OC3_SetConfig+0x72>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	4a29      	ldr	r2, [pc, #164]	@ (800524c <TIM_OC3_SetConfig+0x114>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d10d      	bne.n	80051c6 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80051aa:	697b      	ldr	r3, [r7, #20]
 80051ac:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80051b0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	68db      	ldr	r3, [r3, #12]
 80051b6:	021b      	lsls	r3, r3, #8
 80051b8:	697a      	ldr	r2, [r7, #20]
 80051ba:	4313      	orrs	r3, r2
 80051bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80051be:	697b      	ldr	r3, [r7, #20]
 80051c0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80051c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	4a1e      	ldr	r2, [pc, #120]	@ (8005244 <TIM_OC3_SetConfig+0x10c>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d013      	beq.n	80051f6 <TIM_OC3_SetConfig+0xbe>
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	4a1d      	ldr	r2, [pc, #116]	@ (8005248 <TIM_OC3_SetConfig+0x110>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d00f      	beq.n	80051f6 <TIM_OC3_SetConfig+0xbe>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	4a1d      	ldr	r2, [pc, #116]	@ (8005250 <TIM_OC3_SetConfig+0x118>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d00b      	beq.n	80051f6 <TIM_OC3_SetConfig+0xbe>
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	4a1c      	ldr	r2, [pc, #112]	@ (8005254 <TIM_OC3_SetConfig+0x11c>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d007      	beq.n	80051f6 <TIM_OC3_SetConfig+0xbe>
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	4a1b      	ldr	r2, [pc, #108]	@ (8005258 <TIM_OC3_SetConfig+0x120>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d003      	beq.n	80051f6 <TIM_OC3_SetConfig+0xbe>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	4a16      	ldr	r2, [pc, #88]	@ (800524c <TIM_OC3_SetConfig+0x114>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d113      	bne.n	800521e <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80051f6:	693b      	ldr	r3, [r7, #16]
 80051f8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80051fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80051fe:	693b      	ldr	r3, [r7, #16]
 8005200:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005204:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	695b      	ldr	r3, [r3, #20]
 800520a:	011b      	lsls	r3, r3, #4
 800520c:	693a      	ldr	r2, [r7, #16]
 800520e:	4313      	orrs	r3, r2
 8005210:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	699b      	ldr	r3, [r3, #24]
 8005216:	011b      	lsls	r3, r3, #4
 8005218:	693a      	ldr	r2, [r7, #16]
 800521a:	4313      	orrs	r3, r2
 800521c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	693a      	ldr	r2, [r7, #16]
 8005222:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	68fa      	ldr	r2, [r7, #12]
 8005228:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	685a      	ldr	r2, [r3, #4]
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	697a      	ldr	r2, [r7, #20]
 8005236:	621a      	str	r2, [r3, #32]
}
 8005238:	bf00      	nop
 800523a:	371c      	adds	r7, #28
 800523c:	46bd      	mov	sp, r7
 800523e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005242:	4770      	bx	lr
 8005244:	40012c00 	.word	0x40012c00
 8005248:	40013400 	.word	0x40013400
 800524c:	40015000 	.word	0x40015000
 8005250:	40014000 	.word	0x40014000
 8005254:	40014400 	.word	0x40014400
 8005258:	40014800 	.word	0x40014800

0800525c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800525c:	b480      	push	{r7}
 800525e:	b087      	sub	sp, #28
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
 8005264:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6a1b      	ldr	r3, [r3, #32]
 800526a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6a1b      	ldr	r3, [r3, #32]
 8005270:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	685b      	ldr	r3, [r3, #4]
 800527c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	69db      	ldr	r3, [r3, #28]
 8005282:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800528a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800528e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005296:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	021b      	lsls	r3, r3, #8
 800529e:	68fa      	ldr	r2, [r7, #12]
 80052a0:	4313      	orrs	r3, r2
 80052a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80052a4:	697b      	ldr	r3, [r7, #20]
 80052a6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80052aa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	689b      	ldr	r3, [r3, #8]
 80052b0:	031b      	lsls	r3, r3, #12
 80052b2:	697a      	ldr	r2, [r7, #20]
 80052b4:	4313      	orrs	r3, r2
 80052b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	4a2c      	ldr	r2, [pc, #176]	@ (800536c <TIM_OC4_SetConfig+0x110>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	d007      	beq.n	80052d0 <TIM_OC4_SetConfig+0x74>
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	4a2b      	ldr	r2, [pc, #172]	@ (8005370 <TIM_OC4_SetConfig+0x114>)
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d003      	beq.n	80052d0 <TIM_OC4_SetConfig+0x74>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	4a2a      	ldr	r2, [pc, #168]	@ (8005374 <TIM_OC4_SetConfig+0x118>)
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d10d      	bne.n	80052ec <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80052d0:	697b      	ldr	r3, [r7, #20]
 80052d2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80052d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	68db      	ldr	r3, [r3, #12]
 80052dc:	031b      	lsls	r3, r3, #12
 80052de:	697a      	ldr	r2, [r7, #20]
 80052e0:	4313      	orrs	r3, r2
 80052e2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80052e4:	697b      	ldr	r3, [r7, #20]
 80052e6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80052ea:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	4a1f      	ldr	r2, [pc, #124]	@ (800536c <TIM_OC4_SetConfig+0x110>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d013      	beq.n	800531c <TIM_OC4_SetConfig+0xc0>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	4a1e      	ldr	r2, [pc, #120]	@ (8005370 <TIM_OC4_SetConfig+0x114>)
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d00f      	beq.n	800531c <TIM_OC4_SetConfig+0xc0>
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	4a1e      	ldr	r2, [pc, #120]	@ (8005378 <TIM_OC4_SetConfig+0x11c>)
 8005300:	4293      	cmp	r3, r2
 8005302:	d00b      	beq.n	800531c <TIM_OC4_SetConfig+0xc0>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	4a1d      	ldr	r2, [pc, #116]	@ (800537c <TIM_OC4_SetConfig+0x120>)
 8005308:	4293      	cmp	r3, r2
 800530a:	d007      	beq.n	800531c <TIM_OC4_SetConfig+0xc0>
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	4a1c      	ldr	r2, [pc, #112]	@ (8005380 <TIM_OC4_SetConfig+0x124>)
 8005310:	4293      	cmp	r3, r2
 8005312:	d003      	beq.n	800531c <TIM_OC4_SetConfig+0xc0>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	4a17      	ldr	r2, [pc, #92]	@ (8005374 <TIM_OC4_SetConfig+0x118>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d113      	bne.n	8005344 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800531c:	693b      	ldr	r3, [r7, #16]
 800531e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005322:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8005324:	693b      	ldr	r3, [r7, #16]
 8005326:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800532a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	695b      	ldr	r3, [r3, #20]
 8005330:	019b      	lsls	r3, r3, #6
 8005332:	693a      	ldr	r2, [r7, #16]
 8005334:	4313      	orrs	r3, r2
 8005336:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	699b      	ldr	r3, [r3, #24]
 800533c:	019b      	lsls	r3, r3, #6
 800533e:	693a      	ldr	r2, [r7, #16]
 8005340:	4313      	orrs	r3, r2
 8005342:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	693a      	ldr	r2, [r7, #16]
 8005348:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	68fa      	ldr	r2, [r7, #12]
 800534e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	685a      	ldr	r2, [r3, #4]
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	697a      	ldr	r2, [r7, #20]
 800535c:	621a      	str	r2, [r3, #32]
}
 800535e:	bf00      	nop
 8005360:	371c      	adds	r7, #28
 8005362:	46bd      	mov	sp, r7
 8005364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005368:	4770      	bx	lr
 800536a:	bf00      	nop
 800536c:	40012c00 	.word	0x40012c00
 8005370:	40013400 	.word	0x40013400
 8005374:	40015000 	.word	0x40015000
 8005378:	40014000 	.word	0x40014000
 800537c:	40014400 	.word	0x40014400
 8005380:	40014800 	.word	0x40014800

08005384 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005384:	b480      	push	{r7}
 8005386:	b087      	sub	sp, #28
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
 800538c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6a1b      	ldr	r3, [r3, #32]
 8005392:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6a1b      	ldr	r3, [r3, #32]
 8005398:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	685b      	ldr	r3, [r3, #4]
 80053a4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80053aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80053b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80053b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	68fa      	ldr	r2, [r7, #12]
 80053be:	4313      	orrs	r3, r2
 80053c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80053c2:	693b      	ldr	r3, [r7, #16]
 80053c4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80053c8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	689b      	ldr	r3, [r3, #8]
 80053ce:	041b      	lsls	r3, r3, #16
 80053d0:	693a      	ldr	r2, [r7, #16]
 80053d2:	4313      	orrs	r3, r2
 80053d4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	4a19      	ldr	r2, [pc, #100]	@ (8005440 <TIM_OC5_SetConfig+0xbc>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d013      	beq.n	8005406 <TIM_OC5_SetConfig+0x82>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	4a18      	ldr	r2, [pc, #96]	@ (8005444 <TIM_OC5_SetConfig+0xc0>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d00f      	beq.n	8005406 <TIM_OC5_SetConfig+0x82>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	4a17      	ldr	r2, [pc, #92]	@ (8005448 <TIM_OC5_SetConfig+0xc4>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d00b      	beq.n	8005406 <TIM_OC5_SetConfig+0x82>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	4a16      	ldr	r2, [pc, #88]	@ (800544c <TIM_OC5_SetConfig+0xc8>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d007      	beq.n	8005406 <TIM_OC5_SetConfig+0x82>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	4a15      	ldr	r2, [pc, #84]	@ (8005450 <TIM_OC5_SetConfig+0xcc>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d003      	beq.n	8005406 <TIM_OC5_SetConfig+0x82>
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	4a14      	ldr	r2, [pc, #80]	@ (8005454 <TIM_OC5_SetConfig+0xd0>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d109      	bne.n	800541a <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005406:	697b      	ldr	r3, [r7, #20]
 8005408:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800540c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	695b      	ldr	r3, [r3, #20]
 8005412:	021b      	lsls	r3, r3, #8
 8005414:	697a      	ldr	r2, [r7, #20]
 8005416:	4313      	orrs	r3, r2
 8005418:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	697a      	ldr	r2, [r7, #20]
 800541e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	68fa      	ldr	r2, [r7, #12]
 8005424:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	685a      	ldr	r2, [r3, #4]
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	693a      	ldr	r2, [r7, #16]
 8005432:	621a      	str	r2, [r3, #32]
}
 8005434:	bf00      	nop
 8005436:	371c      	adds	r7, #28
 8005438:	46bd      	mov	sp, r7
 800543a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543e:	4770      	bx	lr
 8005440:	40012c00 	.word	0x40012c00
 8005444:	40013400 	.word	0x40013400
 8005448:	40014000 	.word	0x40014000
 800544c:	40014400 	.word	0x40014400
 8005450:	40014800 	.word	0x40014800
 8005454:	40015000 	.word	0x40015000

08005458 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005458:	b480      	push	{r7}
 800545a:	b087      	sub	sp, #28
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
 8005460:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6a1b      	ldr	r3, [r3, #32]
 8005466:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6a1b      	ldr	r3, [r3, #32]
 800546c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	685b      	ldr	r3, [r3, #4]
 8005478:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800547e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005486:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800548a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	021b      	lsls	r3, r3, #8
 8005492:	68fa      	ldr	r2, [r7, #12]
 8005494:	4313      	orrs	r3, r2
 8005496:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005498:	693b      	ldr	r3, [r7, #16]
 800549a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800549e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	689b      	ldr	r3, [r3, #8]
 80054a4:	051b      	lsls	r3, r3, #20
 80054a6:	693a      	ldr	r2, [r7, #16]
 80054a8:	4313      	orrs	r3, r2
 80054aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	4a1a      	ldr	r2, [pc, #104]	@ (8005518 <TIM_OC6_SetConfig+0xc0>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d013      	beq.n	80054dc <TIM_OC6_SetConfig+0x84>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	4a19      	ldr	r2, [pc, #100]	@ (800551c <TIM_OC6_SetConfig+0xc4>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d00f      	beq.n	80054dc <TIM_OC6_SetConfig+0x84>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	4a18      	ldr	r2, [pc, #96]	@ (8005520 <TIM_OC6_SetConfig+0xc8>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d00b      	beq.n	80054dc <TIM_OC6_SetConfig+0x84>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	4a17      	ldr	r2, [pc, #92]	@ (8005524 <TIM_OC6_SetConfig+0xcc>)
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d007      	beq.n	80054dc <TIM_OC6_SetConfig+0x84>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	4a16      	ldr	r2, [pc, #88]	@ (8005528 <TIM_OC6_SetConfig+0xd0>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d003      	beq.n	80054dc <TIM_OC6_SetConfig+0x84>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	4a15      	ldr	r2, [pc, #84]	@ (800552c <TIM_OC6_SetConfig+0xd4>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d109      	bne.n	80054f0 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80054dc:	697b      	ldr	r3, [r7, #20]
 80054de:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80054e2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	695b      	ldr	r3, [r3, #20]
 80054e8:	029b      	lsls	r3, r3, #10
 80054ea:	697a      	ldr	r2, [r7, #20]
 80054ec:	4313      	orrs	r3, r2
 80054ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	697a      	ldr	r2, [r7, #20]
 80054f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	68fa      	ldr	r2, [r7, #12]
 80054fa:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	685a      	ldr	r2, [r3, #4]
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	693a      	ldr	r2, [r7, #16]
 8005508:	621a      	str	r2, [r3, #32]
}
 800550a:	bf00      	nop
 800550c:	371c      	adds	r7, #28
 800550e:	46bd      	mov	sp, r7
 8005510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005514:	4770      	bx	lr
 8005516:	bf00      	nop
 8005518:	40012c00 	.word	0x40012c00
 800551c:	40013400 	.word	0x40013400
 8005520:	40014000 	.word	0x40014000
 8005524:	40014400 	.word	0x40014400
 8005528:	40014800 	.word	0x40014800
 800552c:	40015000 	.word	0x40015000

08005530 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005530:	b480      	push	{r7}
 8005532:	b087      	sub	sp, #28
 8005534:	af00      	add	r7, sp, #0
 8005536:	60f8      	str	r0, [r7, #12]
 8005538:	60b9      	str	r1, [r7, #8]
 800553a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	6a1b      	ldr	r3, [r3, #32]
 8005540:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	6a1b      	ldr	r3, [r3, #32]
 8005546:	f023 0201 	bic.w	r2, r3, #1
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	699b      	ldr	r3, [r3, #24]
 8005552:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005554:	693b      	ldr	r3, [r7, #16]
 8005556:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800555a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	011b      	lsls	r3, r3, #4
 8005560:	693a      	ldr	r2, [r7, #16]
 8005562:	4313      	orrs	r3, r2
 8005564:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005566:	697b      	ldr	r3, [r7, #20]
 8005568:	f023 030a 	bic.w	r3, r3, #10
 800556c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800556e:	697a      	ldr	r2, [r7, #20]
 8005570:	68bb      	ldr	r3, [r7, #8]
 8005572:	4313      	orrs	r3, r2
 8005574:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	693a      	ldr	r2, [r7, #16]
 800557a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	697a      	ldr	r2, [r7, #20]
 8005580:	621a      	str	r2, [r3, #32]
}
 8005582:	bf00      	nop
 8005584:	371c      	adds	r7, #28
 8005586:	46bd      	mov	sp, r7
 8005588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558c:	4770      	bx	lr

0800558e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800558e:	b480      	push	{r7}
 8005590:	b087      	sub	sp, #28
 8005592:	af00      	add	r7, sp, #0
 8005594:	60f8      	str	r0, [r7, #12]
 8005596:	60b9      	str	r1, [r7, #8]
 8005598:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	6a1b      	ldr	r3, [r3, #32]
 800559e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	6a1b      	ldr	r3, [r3, #32]
 80055a4:	f023 0210 	bic.w	r2, r3, #16
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	699b      	ldr	r3, [r3, #24]
 80055b0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80055b2:	693b      	ldr	r3, [r7, #16]
 80055b4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80055b8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	031b      	lsls	r3, r3, #12
 80055be:	693a      	ldr	r2, [r7, #16]
 80055c0:	4313      	orrs	r3, r2
 80055c2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80055c4:	697b      	ldr	r3, [r7, #20]
 80055c6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80055ca:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80055cc:	68bb      	ldr	r3, [r7, #8]
 80055ce:	011b      	lsls	r3, r3, #4
 80055d0:	697a      	ldr	r2, [r7, #20]
 80055d2:	4313      	orrs	r3, r2
 80055d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	693a      	ldr	r2, [r7, #16]
 80055da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	697a      	ldr	r2, [r7, #20]
 80055e0:	621a      	str	r2, [r3, #32]
}
 80055e2:	bf00      	nop
 80055e4:	371c      	adds	r7, #28
 80055e6:	46bd      	mov	sp, r7
 80055e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ec:	4770      	bx	lr

080055ee <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80055ee:	b480      	push	{r7}
 80055f0:	b085      	sub	sp, #20
 80055f2:	af00      	add	r7, sp, #0
 80055f4:	6078      	str	r0, [r7, #4]
 80055f6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	689b      	ldr	r3, [r3, #8]
 80055fc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8005604:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005608:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800560a:	683a      	ldr	r2, [r7, #0]
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	4313      	orrs	r3, r2
 8005610:	f043 0307 	orr.w	r3, r3, #7
 8005614:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	68fa      	ldr	r2, [r7, #12]
 800561a:	609a      	str	r2, [r3, #8]
}
 800561c:	bf00      	nop
 800561e:	3714      	adds	r7, #20
 8005620:	46bd      	mov	sp, r7
 8005622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005626:	4770      	bx	lr

08005628 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005628:	b480      	push	{r7}
 800562a:	b087      	sub	sp, #28
 800562c:	af00      	add	r7, sp, #0
 800562e:	60f8      	str	r0, [r7, #12]
 8005630:	60b9      	str	r1, [r7, #8]
 8005632:	607a      	str	r2, [r7, #4]
 8005634:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	689b      	ldr	r3, [r3, #8]
 800563a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800563c:	697b      	ldr	r3, [r7, #20]
 800563e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005642:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	021a      	lsls	r2, r3, #8
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	431a      	orrs	r2, r3
 800564c:	68bb      	ldr	r3, [r7, #8]
 800564e:	4313      	orrs	r3, r2
 8005650:	697a      	ldr	r2, [r7, #20]
 8005652:	4313      	orrs	r3, r2
 8005654:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	697a      	ldr	r2, [r7, #20]
 800565a:	609a      	str	r2, [r3, #8]
}
 800565c:	bf00      	nop
 800565e:	371c      	adds	r7, #28
 8005660:	46bd      	mov	sp, r7
 8005662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005666:	4770      	bx	lr

08005668 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005668:	b480      	push	{r7}
 800566a:	b087      	sub	sp, #28
 800566c:	af00      	add	r7, sp, #0
 800566e:	60f8      	str	r0, [r7, #12]
 8005670:	60b9      	str	r1, [r7, #8]
 8005672:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	f003 031f 	and.w	r3, r3, #31
 800567a:	2201      	movs	r2, #1
 800567c:	fa02 f303 	lsl.w	r3, r2, r3
 8005680:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	6a1a      	ldr	r2, [r3, #32]
 8005686:	697b      	ldr	r3, [r7, #20]
 8005688:	43db      	mvns	r3, r3
 800568a:	401a      	ands	r2, r3
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	6a1a      	ldr	r2, [r3, #32]
 8005694:	68bb      	ldr	r3, [r7, #8]
 8005696:	f003 031f 	and.w	r3, r3, #31
 800569a:	6879      	ldr	r1, [r7, #4]
 800569c:	fa01 f303 	lsl.w	r3, r1, r3
 80056a0:	431a      	orrs	r2, r3
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	621a      	str	r2, [r3, #32]
}
 80056a6:	bf00      	nop
 80056a8:	371c      	adds	r7, #28
 80056aa:	46bd      	mov	sp, r7
 80056ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b0:	4770      	bx	lr
	...

080056b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80056b4:	b480      	push	{r7}
 80056b6:	b085      	sub	sp, #20
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
 80056bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80056c4:	2b01      	cmp	r3, #1
 80056c6:	d101      	bne.n	80056cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80056c8:	2302      	movs	r3, #2
 80056ca:	e074      	b.n	80057b6 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2201      	movs	r2, #1
 80056d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2202      	movs	r2, #2
 80056d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	685b      	ldr	r3, [r3, #4]
 80056e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	689b      	ldr	r3, [r3, #8]
 80056ea:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	4a34      	ldr	r2, [pc, #208]	@ (80057c4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d009      	beq.n	800570a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	4a33      	ldr	r2, [pc, #204]	@ (80057c8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d004      	beq.n	800570a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	4a31      	ldr	r2, [pc, #196]	@ (80057cc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d108      	bne.n	800571c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005710:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	685b      	ldr	r3, [r3, #4]
 8005716:	68fa      	ldr	r2, [r7, #12]
 8005718:	4313      	orrs	r3, r2
 800571a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8005722:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005726:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	68fa      	ldr	r2, [r7, #12]
 800572e:	4313      	orrs	r3, r2
 8005730:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	68fa      	ldr	r2, [r7, #12]
 8005738:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	4a21      	ldr	r2, [pc, #132]	@ (80057c4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005740:	4293      	cmp	r3, r2
 8005742:	d022      	beq.n	800578a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800574c:	d01d      	beq.n	800578a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	4a1f      	ldr	r2, [pc, #124]	@ (80057d0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8005754:	4293      	cmp	r3, r2
 8005756:	d018      	beq.n	800578a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	4a1d      	ldr	r2, [pc, #116]	@ (80057d4 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d013      	beq.n	800578a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	4a1c      	ldr	r2, [pc, #112]	@ (80057d8 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8005768:	4293      	cmp	r3, r2
 800576a:	d00e      	beq.n	800578a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	4a15      	ldr	r2, [pc, #84]	@ (80057c8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d009      	beq.n	800578a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	4a18      	ldr	r2, [pc, #96]	@ (80057dc <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800577c:	4293      	cmp	r3, r2
 800577e:	d004      	beq.n	800578a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	4a11      	ldr	r2, [pc, #68]	@ (80057cc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005786:	4293      	cmp	r3, r2
 8005788:	d10c      	bne.n	80057a4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800578a:	68bb      	ldr	r3, [r7, #8]
 800578c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005790:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	689b      	ldr	r3, [r3, #8]
 8005796:	68ba      	ldr	r2, [r7, #8]
 8005798:	4313      	orrs	r3, r2
 800579a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	68ba      	ldr	r2, [r7, #8]
 80057a2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2201      	movs	r2, #1
 80057a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2200      	movs	r2, #0
 80057b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80057b4:	2300      	movs	r3, #0
}
 80057b6:	4618      	mov	r0, r3
 80057b8:	3714      	adds	r7, #20
 80057ba:	46bd      	mov	sp, r7
 80057bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c0:	4770      	bx	lr
 80057c2:	bf00      	nop
 80057c4:	40012c00 	.word	0x40012c00
 80057c8:	40013400 	.word	0x40013400
 80057cc:	40015000 	.word	0x40015000
 80057d0:	40000400 	.word	0x40000400
 80057d4:	40000800 	.word	0x40000800
 80057d8:	40000c00 	.word	0x40000c00
 80057dc:	40014000 	.word	0x40014000

080057e0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80057e0:	b480      	push	{r7}
 80057e2:	b085      	sub	sp, #20
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
 80057e8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80057ea:	2300      	movs	r3, #0
 80057ec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80057f4:	2b01      	cmp	r3, #1
 80057f6:	d101      	bne.n	80057fc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80057f8:	2302      	movs	r3, #2
 80057fa:	e078      	b.n	80058ee <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2201      	movs	r2, #1
 8005800:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	68db      	ldr	r3, [r3, #12]
 800580e:	4313      	orrs	r3, r2
 8005810:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	689b      	ldr	r3, [r3, #8]
 800581c:	4313      	orrs	r3, r2
 800581e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	685b      	ldr	r3, [r3, #4]
 800582a:	4313      	orrs	r3, r2
 800582c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	4313      	orrs	r3, r2
 800583a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	691b      	ldr	r3, [r3, #16]
 8005846:	4313      	orrs	r3, r2
 8005848:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	695b      	ldr	r3, [r3, #20]
 8005854:	4313      	orrs	r3, r2
 8005856:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005862:	4313      	orrs	r3, r2
 8005864:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	699b      	ldr	r3, [r3, #24]
 8005870:	041b      	lsls	r3, r3, #16
 8005872:	4313      	orrs	r3, r2
 8005874:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	69db      	ldr	r3, [r3, #28]
 8005880:	4313      	orrs	r3, r2
 8005882:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	4a1c      	ldr	r2, [pc, #112]	@ (80058fc <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d009      	beq.n	80058a2 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	4a1b      	ldr	r2, [pc, #108]	@ (8005900 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8005894:	4293      	cmp	r3, r2
 8005896:	d004      	beq.n	80058a2 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	4a19      	ldr	r2, [pc, #100]	@ (8005904 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d11c      	bne.n	80058dc <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058ac:	051b      	lsls	r3, r3, #20
 80058ae:	4313      	orrs	r3, r2
 80058b0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	6a1b      	ldr	r3, [r3, #32]
 80058bc:	4313      	orrs	r3, r2
 80058be:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058ca:	4313      	orrs	r3, r2
 80058cc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058d8:	4313      	orrs	r3, r2
 80058da:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	68fa      	ldr	r2, [r7, #12]
 80058e2:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2200      	movs	r2, #0
 80058e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80058ec:	2300      	movs	r3, #0
}
 80058ee:	4618      	mov	r0, r3
 80058f0:	3714      	adds	r7, #20
 80058f2:	46bd      	mov	sp, r7
 80058f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f8:	4770      	bx	lr
 80058fa:	bf00      	nop
 80058fc:	40012c00 	.word	0x40012c00
 8005900:	40013400 	.word	0x40013400
 8005904:	40015000 	.word	0x40015000

08005908 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005908:	b480      	push	{r7}
 800590a:	b083      	sub	sp, #12
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005910:	bf00      	nop
 8005912:	370c      	adds	r7, #12
 8005914:	46bd      	mov	sp, r7
 8005916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591a:	4770      	bx	lr

0800591c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800591c:	b480      	push	{r7}
 800591e:	b083      	sub	sp, #12
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005924:	bf00      	nop
 8005926:	370c      	adds	r7, #12
 8005928:	46bd      	mov	sp, r7
 800592a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592e:	4770      	bx	lr

08005930 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005930:	b480      	push	{r7}
 8005932:	b083      	sub	sp, #12
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005938:	bf00      	nop
 800593a:	370c      	adds	r7, #12
 800593c:	46bd      	mov	sp, r7
 800593e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005942:	4770      	bx	lr

08005944 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8005944:	b480      	push	{r7}
 8005946:	b083      	sub	sp, #12
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800594c:	bf00      	nop
 800594e:	370c      	adds	r7, #12
 8005950:	46bd      	mov	sp, r7
 8005952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005956:	4770      	bx	lr

08005958 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8005958:	b480      	push	{r7}
 800595a:	b083      	sub	sp, #12
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8005960:	bf00      	nop
 8005962:	370c      	adds	r7, #12
 8005964:	46bd      	mov	sp, r7
 8005966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596a:	4770      	bx	lr

0800596c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800596c:	b480      	push	{r7}
 800596e:	b083      	sub	sp, #12
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8005974:	bf00      	nop
 8005976:	370c      	adds	r7, #12
 8005978:	46bd      	mov	sp, r7
 800597a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597e:	4770      	bx	lr

08005980 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8005980:	b480      	push	{r7}
 8005982:	b083      	sub	sp, #12
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8005988:	bf00      	nop
 800598a:	370c      	adds	r7, #12
 800598c:	46bd      	mov	sp, r7
 800598e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005992:	4770      	bx	lr

08005994 <arm_sin_f32>:
  @return        sin(x)
 */

float32_t arm_sin_f32(
  float32_t x)
{
 8005994:	b480      	push	{r7}
 8005996:	b08b      	sub	sp, #44	@ 0x2c
 8005998:	af00      	add	r7, sp, #0
 800599a:	ed87 0a01 	vstr	s0, [r7, #4]
  int32_t n;
  float32_t findex;

  /* input x is in radians */
  /* Scale input to [0 1] range from [0 2*PI] , divide input by 2*pi */
  in = x * 0.159154943092f;
 800599e:	edd7 7a01 	vldr	s15, [r7, #4]
 80059a2:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 8005a8c <arm_sin_f32+0xf8>
 80059a6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80059aa:	edc7 7a06 	vstr	s15, [r7, #24]

  /* Calculation of floor value of input */
  n = (int32_t) in;
 80059ae:	edd7 7a06 	vldr	s15, [r7, #24]
 80059b2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80059b6:	ee17 3a90 	vmov	r3, s15
 80059ba:	623b      	str	r3, [r7, #32]

  /* Make negative values towards -infinity */
  if (in < 0.0f)
 80059bc:	edd7 7a06 	vldr	s15, [r7, #24]
 80059c0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80059c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80059c8:	d502      	bpl.n	80059d0 <arm_sin_f32+0x3c>
  {
    n--;
 80059ca:	6a3b      	ldr	r3, [r7, #32]
 80059cc:	3b01      	subs	r3, #1
 80059ce:	623b      	str	r3, [r7, #32]
  }

  /* Map input value to [0 1] */
  in = in - (float32_t) n;
 80059d0:	6a3b      	ldr	r3, [r7, #32]
 80059d2:	ee07 3a90 	vmov	s15, r3
 80059d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80059da:	ed97 7a06 	vldr	s14, [r7, #24]
 80059de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80059e2:	edc7 7a06 	vstr	s15, [r7, #24]

  /* Calculation of index of the table */
  findex = (float32_t)FAST_MATH_TABLE_SIZE * in;
 80059e6:	edd7 7a06 	vldr	s15, [r7, #24]
 80059ea:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 8005a90 <arm_sin_f32+0xfc>
 80059ee:	ee67 7a87 	vmul.f32	s15, s15, s14
 80059f2:	edc7 7a07 	vstr	s15, [r7, #28]
  index = (uint16_t)findex;
 80059f6:	edd7 7a07 	vldr	s15, [r7, #28]
 80059fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80059fe:	ee17 3a90 	vmov	r3, s15
 8005a02:	84fb      	strh	r3, [r7, #38]	@ 0x26

  /* when "in" is exactly 1, we need to rotate the index down to 0 */
  if (index >= FAST_MATH_TABLE_SIZE) {
 8005a04:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005a06:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005a0a:	d309      	bcc.n	8005a20 <arm_sin_f32+0x8c>
    index = 0;
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	84fb      	strh	r3, [r7, #38]	@ 0x26
    findex -= (float32_t)FAST_MATH_TABLE_SIZE;
 8005a10:	edd7 7a07 	vldr	s15, [r7, #28]
 8005a14:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 8005a90 <arm_sin_f32+0xfc>
 8005a18:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005a1c:	edc7 7a07 	vstr	s15, [r7, #28]
  }

  /* fractional value calculation */
  fract = findex - (float32_t) index;
 8005a20:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005a22:	ee07 3a90 	vmov	s15, r3
 8005a26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a2a:	ed97 7a07 	vldr	s14, [r7, #28]
 8005a2e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005a32:	edc7 7a05 	vstr	s15, [r7, #20]

  /* Read two nearest values of input value from the sin table */
  a = sinTable_f32[index];
 8005a36:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005a38:	4a16      	ldr	r2, [pc, #88]	@ (8005a94 <arm_sin_f32+0x100>)
 8005a3a:	009b      	lsls	r3, r3, #2
 8005a3c:	4413      	add	r3, r2
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	613b      	str	r3, [r7, #16]
  b = sinTable_f32[index+1];
 8005a42:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005a44:	3301      	adds	r3, #1
 8005a46:	4a13      	ldr	r2, [pc, #76]	@ (8005a94 <arm_sin_f32+0x100>)
 8005a48:	009b      	lsls	r3, r3, #2
 8005a4a:	4413      	add	r3, r2
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	60fb      	str	r3, [r7, #12]

  /* Linear interpolation process */
  sinVal = (1.0f - fract) * a + fract * b;
 8005a50:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005a54:	edd7 7a05 	vldr	s15, [r7, #20]
 8005a58:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005a5c:	edd7 7a04 	vldr	s15, [r7, #16]
 8005a60:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005a64:	edd7 6a05 	vldr	s13, [r7, #20]
 8005a68:	edd7 7a03 	vldr	s15, [r7, #12]
 8005a6c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005a70:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005a74:	edc7 7a02 	vstr	s15, [r7, #8]

  /* Return output value */
  return (sinVal);
 8005a78:	68bb      	ldr	r3, [r7, #8]
 8005a7a:	ee07 3a90 	vmov	s15, r3
}
 8005a7e:	eeb0 0a67 	vmov.f32	s0, s15
 8005a82:	372c      	adds	r7, #44	@ 0x2c
 8005a84:	46bd      	mov	sp, r7
 8005a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8a:	4770      	bx	lr
 8005a8c:	3e22f983 	.word	0x3e22f983
 8005a90:	44000000 	.word	0x44000000
 8005a94:	08006f94 	.word	0x08006f94

08005a98 <malloc>:
 8005a98:	4b02      	ldr	r3, [pc, #8]	@ (8005aa4 <malloc+0xc>)
 8005a9a:	4601      	mov	r1, r0
 8005a9c:	6818      	ldr	r0, [r3, #0]
 8005a9e:	f000 b825 	b.w	8005aec <_malloc_r>
 8005aa2:	bf00      	nop
 8005aa4:	2000000c 	.word	0x2000000c

08005aa8 <sbrk_aligned>:
 8005aa8:	b570      	push	{r4, r5, r6, lr}
 8005aaa:	4e0f      	ldr	r6, [pc, #60]	@ (8005ae8 <sbrk_aligned+0x40>)
 8005aac:	460c      	mov	r4, r1
 8005aae:	6831      	ldr	r1, [r6, #0]
 8005ab0:	4605      	mov	r5, r0
 8005ab2:	b911      	cbnz	r1, 8005aba <sbrk_aligned+0x12>
 8005ab4:	f000 f8ae 	bl	8005c14 <_sbrk_r>
 8005ab8:	6030      	str	r0, [r6, #0]
 8005aba:	4621      	mov	r1, r4
 8005abc:	4628      	mov	r0, r5
 8005abe:	f000 f8a9 	bl	8005c14 <_sbrk_r>
 8005ac2:	1c43      	adds	r3, r0, #1
 8005ac4:	d103      	bne.n	8005ace <sbrk_aligned+0x26>
 8005ac6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8005aca:	4620      	mov	r0, r4
 8005acc:	bd70      	pop	{r4, r5, r6, pc}
 8005ace:	1cc4      	adds	r4, r0, #3
 8005ad0:	f024 0403 	bic.w	r4, r4, #3
 8005ad4:	42a0      	cmp	r0, r4
 8005ad6:	d0f8      	beq.n	8005aca <sbrk_aligned+0x22>
 8005ad8:	1a21      	subs	r1, r4, r0
 8005ada:	4628      	mov	r0, r5
 8005adc:	f000 f89a 	bl	8005c14 <_sbrk_r>
 8005ae0:	3001      	adds	r0, #1
 8005ae2:	d1f2      	bne.n	8005aca <sbrk_aligned+0x22>
 8005ae4:	e7ef      	b.n	8005ac6 <sbrk_aligned+0x1e>
 8005ae6:	bf00      	nop
 8005ae8:	20000550 	.word	0x20000550

08005aec <_malloc_r>:
 8005aec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005af0:	1ccd      	adds	r5, r1, #3
 8005af2:	f025 0503 	bic.w	r5, r5, #3
 8005af6:	3508      	adds	r5, #8
 8005af8:	2d0c      	cmp	r5, #12
 8005afa:	bf38      	it	cc
 8005afc:	250c      	movcc	r5, #12
 8005afe:	2d00      	cmp	r5, #0
 8005b00:	4606      	mov	r6, r0
 8005b02:	db01      	blt.n	8005b08 <_malloc_r+0x1c>
 8005b04:	42a9      	cmp	r1, r5
 8005b06:	d904      	bls.n	8005b12 <_malloc_r+0x26>
 8005b08:	230c      	movs	r3, #12
 8005b0a:	6033      	str	r3, [r6, #0]
 8005b0c:	2000      	movs	r0, #0
 8005b0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005b12:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005be8 <_malloc_r+0xfc>
 8005b16:	f000 f869 	bl	8005bec <__malloc_lock>
 8005b1a:	f8d8 3000 	ldr.w	r3, [r8]
 8005b1e:	461c      	mov	r4, r3
 8005b20:	bb44      	cbnz	r4, 8005b74 <_malloc_r+0x88>
 8005b22:	4629      	mov	r1, r5
 8005b24:	4630      	mov	r0, r6
 8005b26:	f7ff ffbf 	bl	8005aa8 <sbrk_aligned>
 8005b2a:	1c43      	adds	r3, r0, #1
 8005b2c:	4604      	mov	r4, r0
 8005b2e:	d158      	bne.n	8005be2 <_malloc_r+0xf6>
 8005b30:	f8d8 4000 	ldr.w	r4, [r8]
 8005b34:	4627      	mov	r7, r4
 8005b36:	2f00      	cmp	r7, #0
 8005b38:	d143      	bne.n	8005bc2 <_malloc_r+0xd6>
 8005b3a:	2c00      	cmp	r4, #0
 8005b3c:	d04b      	beq.n	8005bd6 <_malloc_r+0xea>
 8005b3e:	6823      	ldr	r3, [r4, #0]
 8005b40:	4639      	mov	r1, r7
 8005b42:	4630      	mov	r0, r6
 8005b44:	eb04 0903 	add.w	r9, r4, r3
 8005b48:	f000 f864 	bl	8005c14 <_sbrk_r>
 8005b4c:	4581      	cmp	r9, r0
 8005b4e:	d142      	bne.n	8005bd6 <_malloc_r+0xea>
 8005b50:	6821      	ldr	r1, [r4, #0]
 8005b52:	1a6d      	subs	r5, r5, r1
 8005b54:	4629      	mov	r1, r5
 8005b56:	4630      	mov	r0, r6
 8005b58:	f7ff ffa6 	bl	8005aa8 <sbrk_aligned>
 8005b5c:	3001      	adds	r0, #1
 8005b5e:	d03a      	beq.n	8005bd6 <_malloc_r+0xea>
 8005b60:	6823      	ldr	r3, [r4, #0]
 8005b62:	442b      	add	r3, r5
 8005b64:	6023      	str	r3, [r4, #0]
 8005b66:	f8d8 3000 	ldr.w	r3, [r8]
 8005b6a:	685a      	ldr	r2, [r3, #4]
 8005b6c:	bb62      	cbnz	r2, 8005bc8 <_malloc_r+0xdc>
 8005b6e:	f8c8 7000 	str.w	r7, [r8]
 8005b72:	e00f      	b.n	8005b94 <_malloc_r+0xa8>
 8005b74:	6822      	ldr	r2, [r4, #0]
 8005b76:	1b52      	subs	r2, r2, r5
 8005b78:	d420      	bmi.n	8005bbc <_malloc_r+0xd0>
 8005b7a:	2a0b      	cmp	r2, #11
 8005b7c:	d917      	bls.n	8005bae <_malloc_r+0xc2>
 8005b7e:	1961      	adds	r1, r4, r5
 8005b80:	42a3      	cmp	r3, r4
 8005b82:	6025      	str	r5, [r4, #0]
 8005b84:	bf18      	it	ne
 8005b86:	6059      	strne	r1, [r3, #4]
 8005b88:	6863      	ldr	r3, [r4, #4]
 8005b8a:	bf08      	it	eq
 8005b8c:	f8c8 1000 	streq.w	r1, [r8]
 8005b90:	5162      	str	r2, [r4, r5]
 8005b92:	604b      	str	r3, [r1, #4]
 8005b94:	4630      	mov	r0, r6
 8005b96:	f000 f82f 	bl	8005bf8 <__malloc_unlock>
 8005b9a:	f104 000b 	add.w	r0, r4, #11
 8005b9e:	1d23      	adds	r3, r4, #4
 8005ba0:	f020 0007 	bic.w	r0, r0, #7
 8005ba4:	1ac2      	subs	r2, r0, r3
 8005ba6:	bf1c      	itt	ne
 8005ba8:	1a1b      	subne	r3, r3, r0
 8005baa:	50a3      	strne	r3, [r4, r2]
 8005bac:	e7af      	b.n	8005b0e <_malloc_r+0x22>
 8005bae:	6862      	ldr	r2, [r4, #4]
 8005bb0:	42a3      	cmp	r3, r4
 8005bb2:	bf0c      	ite	eq
 8005bb4:	f8c8 2000 	streq.w	r2, [r8]
 8005bb8:	605a      	strne	r2, [r3, #4]
 8005bba:	e7eb      	b.n	8005b94 <_malloc_r+0xa8>
 8005bbc:	4623      	mov	r3, r4
 8005bbe:	6864      	ldr	r4, [r4, #4]
 8005bc0:	e7ae      	b.n	8005b20 <_malloc_r+0x34>
 8005bc2:	463c      	mov	r4, r7
 8005bc4:	687f      	ldr	r7, [r7, #4]
 8005bc6:	e7b6      	b.n	8005b36 <_malloc_r+0x4a>
 8005bc8:	461a      	mov	r2, r3
 8005bca:	685b      	ldr	r3, [r3, #4]
 8005bcc:	42a3      	cmp	r3, r4
 8005bce:	d1fb      	bne.n	8005bc8 <_malloc_r+0xdc>
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	6053      	str	r3, [r2, #4]
 8005bd4:	e7de      	b.n	8005b94 <_malloc_r+0xa8>
 8005bd6:	230c      	movs	r3, #12
 8005bd8:	6033      	str	r3, [r6, #0]
 8005bda:	4630      	mov	r0, r6
 8005bdc:	f000 f80c 	bl	8005bf8 <__malloc_unlock>
 8005be0:	e794      	b.n	8005b0c <_malloc_r+0x20>
 8005be2:	6005      	str	r5, [r0, #0]
 8005be4:	e7d6      	b.n	8005b94 <_malloc_r+0xa8>
 8005be6:	bf00      	nop
 8005be8:	20000554 	.word	0x20000554

08005bec <__malloc_lock>:
 8005bec:	4801      	ldr	r0, [pc, #4]	@ (8005bf4 <__malloc_lock+0x8>)
 8005bee:	f000 b84b 	b.w	8005c88 <__retarget_lock_acquire_recursive>
 8005bf2:	bf00      	nop
 8005bf4:	20000694 	.word	0x20000694

08005bf8 <__malloc_unlock>:
 8005bf8:	4801      	ldr	r0, [pc, #4]	@ (8005c00 <__malloc_unlock+0x8>)
 8005bfa:	f000 b846 	b.w	8005c8a <__retarget_lock_release_recursive>
 8005bfe:	bf00      	nop
 8005c00:	20000694 	.word	0x20000694

08005c04 <memset>:
 8005c04:	4402      	add	r2, r0
 8005c06:	4603      	mov	r3, r0
 8005c08:	4293      	cmp	r3, r2
 8005c0a:	d100      	bne.n	8005c0e <memset+0xa>
 8005c0c:	4770      	bx	lr
 8005c0e:	f803 1b01 	strb.w	r1, [r3], #1
 8005c12:	e7f9      	b.n	8005c08 <memset+0x4>

08005c14 <_sbrk_r>:
 8005c14:	b538      	push	{r3, r4, r5, lr}
 8005c16:	4d06      	ldr	r5, [pc, #24]	@ (8005c30 <_sbrk_r+0x1c>)
 8005c18:	2300      	movs	r3, #0
 8005c1a:	4604      	mov	r4, r0
 8005c1c:	4608      	mov	r0, r1
 8005c1e:	602b      	str	r3, [r5, #0]
 8005c20:	f7fc fb76 	bl	8002310 <_sbrk>
 8005c24:	1c43      	adds	r3, r0, #1
 8005c26:	d102      	bne.n	8005c2e <_sbrk_r+0x1a>
 8005c28:	682b      	ldr	r3, [r5, #0]
 8005c2a:	b103      	cbz	r3, 8005c2e <_sbrk_r+0x1a>
 8005c2c:	6023      	str	r3, [r4, #0]
 8005c2e:	bd38      	pop	{r3, r4, r5, pc}
 8005c30:	20000690 	.word	0x20000690

08005c34 <__errno>:
 8005c34:	4b01      	ldr	r3, [pc, #4]	@ (8005c3c <__errno+0x8>)
 8005c36:	6818      	ldr	r0, [r3, #0]
 8005c38:	4770      	bx	lr
 8005c3a:	bf00      	nop
 8005c3c:	2000000c 	.word	0x2000000c

08005c40 <__libc_init_array>:
 8005c40:	b570      	push	{r4, r5, r6, lr}
 8005c42:	4d0d      	ldr	r5, [pc, #52]	@ (8005c78 <__libc_init_array+0x38>)
 8005c44:	4c0d      	ldr	r4, [pc, #52]	@ (8005c7c <__libc_init_array+0x3c>)
 8005c46:	1b64      	subs	r4, r4, r5
 8005c48:	10a4      	asrs	r4, r4, #2
 8005c4a:	2600      	movs	r6, #0
 8005c4c:	42a6      	cmp	r6, r4
 8005c4e:	d109      	bne.n	8005c64 <__libc_init_array+0x24>
 8005c50:	4d0b      	ldr	r5, [pc, #44]	@ (8005c80 <__libc_init_array+0x40>)
 8005c52:	4c0c      	ldr	r4, [pc, #48]	@ (8005c84 <__libc_init_array+0x44>)
 8005c54:	f001 f98a 	bl	8006f6c <_init>
 8005c58:	1b64      	subs	r4, r4, r5
 8005c5a:	10a4      	asrs	r4, r4, #2
 8005c5c:	2600      	movs	r6, #0
 8005c5e:	42a6      	cmp	r6, r4
 8005c60:	d105      	bne.n	8005c6e <__libc_init_array+0x2e>
 8005c62:	bd70      	pop	{r4, r5, r6, pc}
 8005c64:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c68:	4798      	blx	r3
 8005c6a:	3601      	adds	r6, #1
 8005c6c:	e7ee      	b.n	8005c4c <__libc_init_array+0xc>
 8005c6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c72:	4798      	blx	r3
 8005c74:	3601      	adds	r6, #1
 8005c76:	e7f2      	b.n	8005c5e <__libc_init_array+0x1e>
 8005c78:	08007b88 	.word	0x08007b88
 8005c7c:	08007b88 	.word	0x08007b88
 8005c80:	08007b88 	.word	0x08007b88
 8005c84:	08007b8c 	.word	0x08007b8c

08005c88 <__retarget_lock_acquire_recursive>:
 8005c88:	4770      	bx	lr

08005c8a <__retarget_lock_release_recursive>:
 8005c8a:	4770      	bx	lr

08005c8c <fmodf>:
 8005c8c:	b508      	push	{r3, lr}
 8005c8e:	ed2d 8b02 	vpush	{d8}
 8005c92:	eef0 8a40 	vmov.f32	s17, s0
 8005c96:	eeb0 8a60 	vmov.f32	s16, s1
 8005c9a:	f000 f9cd 	bl	8006038 <__ieee754_fmodf>
 8005c9e:	eef4 8a48 	vcmp.f32	s17, s16
 8005ca2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ca6:	d60c      	bvs.n	8005cc2 <fmodf+0x36>
 8005ca8:	eddf 8a07 	vldr	s17, [pc, #28]	@ 8005cc8 <fmodf+0x3c>
 8005cac:	eeb4 8a68 	vcmp.f32	s16, s17
 8005cb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005cb4:	d105      	bne.n	8005cc2 <fmodf+0x36>
 8005cb6:	f7ff ffbd 	bl	8005c34 <__errno>
 8005cba:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8005cbe:	2321      	movs	r3, #33	@ 0x21
 8005cc0:	6003      	str	r3, [r0, #0]
 8005cc2:	ecbd 8b02 	vpop	{d8}
 8005cc6:	bd08      	pop	{r3, pc}
 8005cc8:	00000000 	.word	0x00000000

08005ccc <powf>:
 8005ccc:	b508      	push	{r3, lr}
 8005cce:	ed2d 8b04 	vpush	{d8-d9}
 8005cd2:	eeb0 8a60 	vmov.f32	s16, s1
 8005cd6:	eeb0 9a40 	vmov.f32	s18, s0
 8005cda:	f000 fa2f 	bl	800613c <__ieee754_powf>
 8005cde:	eeb4 8a48 	vcmp.f32	s16, s16
 8005ce2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ce6:	eef0 8a40 	vmov.f32	s17, s0
 8005cea:	d63e      	bvs.n	8005d6a <powf+0x9e>
 8005cec:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8005cf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005cf4:	d112      	bne.n	8005d1c <powf+0x50>
 8005cf6:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8005cfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005cfe:	d039      	beq.n	8005d74 <powf+0xa8>
 8005d00:	eeb0 0a48 	vmov.f32	s0, s16
 8005d04:	f000 f8c4 	bl	8005e90 <finitef>
 8005d08:	b378      	cbz	r0, 8005d6a <powf+0x9e>
 8005d0a:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8005d0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d12:	d52a      	bpl.n	8005d6a <powf+0x9e>
 8005d14:	f7ff ff8e 	bl	8005c34 <__errno>
 8005d18:	2322      	movs	r3, #34	@ 0x22
 8005d1a:	e014      	b.n	8005d46 <powf+0x7a>
 8005d1c:	f000 f8b8 	bl	8005e90 <finitef>
 8005d20:	b998      	cbnz	r0, 8005d4a <powf+0x7e>
 8005d22:	eeb0 0a49 	vmov.f32	s0, s18
 8005d26:	f000 f8b3 	bl	8005e90 <finitef>
 8005d2a:	b170      	cbz	r0, 8005d4a <powf+0x7e>
 8005d2c:	eeb0 0a48 	vmov.f32	s0, s16
 8005d30:	f000 f8ae 	bl	8005e90 <finitef>
 8005d34:	b148      	cbz	r0, 8005d4a <powf+0x7e>
 8005d36:	eef4 8a68 	vcmp.f32	s17, s17
 8005d3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d3e:	d7e9      	bvc.n	8005d14 <powf+0x48>
 8005d40:	f7ff ff78 	bl	8005c34 <__errno>
 8005d44:	2321      	movs	r3, #33	@ 0x21
 8005d46:	6003      	str	r3, [r0, #0]
 8005d48:	e00f      	b.n	8005d6a <powf+0x9e>
 8005d4a:	eef5 8a40 	vcmp.f32	s17, #0.0
 8005d4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d52:	d10a      	bne.n	8005d6a <powf+0x9e>
 8005d54:	eeb0 0a49 	vmov.f32	s0, s18
 8005d58:	f000 f89a 	bl	8005e90 <finitef>
 8005d5c:	b128      	cbz	r0, 8005d6a <powf+0x9e>
 8005d5e:	eeb0 0a48 	vmov.f32	s0, s16
 8005d62:	f000 f895 	bl	8005e90 <finitef>
 8005d66:	2800      	cmp	r0, #0
 8005d68:	d1d4      	bne.n	8005d14 <powf+0x48>
 8005d6a:	eeb0 0a68 	vmov.f32	s0, s17
 8005d6e:	ecbd 8b04 	vpop	{d8-d9}
 8005d72:	bd08      	pop	{r3, pc}
 8005d74:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 8005d78:	e7f7      	b.n	8005d6a <powf+0x9e>
	...

08005d7c <cosf>:
 8005d7c:	ee10 3a10 	vmov	r3, s0
 8005d80:	b507      	push	{r0, r1, r2, lr}
 8005d82:	4a1e      	ldr	r2, [pc, #120]	@ (8005dfc <cosf+0x80>)
 8005d84:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	d806      	bhi.n	8005d9a <cosf+0x1e>
 8005d8c:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 8005e00 <cosf+0x84>
 8005d90:	b003      	add	sp, #12
 8005d92:	f85d eb04 	ldr.w	lr, [sp], #4
 8005d96:	f000 b8af 	b.w	8005ef8 <__kernel_cosf>
 8005d9a:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8005d9e:	d304      	bcc.n	8005daa <cosf+0x2e>
 8005da0:	ee30 0a40 	vsub.f32	s0, s0, s0
 8005da4:	b003      	add	sp, #12
 8005da6:	f85d fb04 	ldr.w	pc, [sp], #4
 8005daa:	4668      	mov	r0, sp
 8005dac:	f000 fc94 	bl	80066d8 <__ieee754_rem_pio2f>
 8005db0:	f000 0003 	and.w	r0, r0, #3
 8005db4:	2801      	cmp	r0, #1
 8005db6:	d009      	beq.n	8005dcc <cosf+0x50>
 8005db8:	2802      	cmp	r0, #2
 8005dba:	d010      	beq.n	8005dde <cosf+0x62>
 8005dbc:	b9b0      	cbnz	r0, 8005dec <cosf+0x70>
 8005dbe:	eddd 0a01 	vldr	s1, [sp, #4]
 8005dc2:	ed9d 0a00 	vldr	s0, [sp]
 8005dc6:	f000 f897 	bl	8005ef8 <__kernel_cosf>
 8005dca:	e7eb      	b.n	8005da4 <cosf+0x28>
 8005dcc:	eddd 0a01 	vldr	s1, [sp, #4]
 8005dd0:	ed9d 0a00 	vldr	s0, [sp]
 8005dd4:	f000 f8e8 	bl	8005fa8 <__kernel_sinf>
 8005dd8:	eeb1 0a40 	vneg.f32	s0, s0
 8005ddc:	e7e2      	b.n	8005da4 <cosf+0x28>
 8005dde:	eddd 0a01 	vldr	s1, [sp, #4]
 8005de2:	ed9d 0a00 	vldr	s0, [sp]
 8005de6:	f000 f887 	bl	8005ef8 <__kernel_cosf>
 8005dea:	e7f5      	b.n	8005dd8 <cosf+0x5c>
 8005dec:	eddd 0a01 	vldr	s1, [sp, #4]
 8005df0:	ed9d 0a00 	vldr	s0, [sp]
 8005df4:	2001      	movs	r0, #1
 8005df6:	f000 f8d7 	bl	8005fa8 <__kernel_sinf>
 8005dfa:	e7d3      	b.n	8005da4 <cosf+0x28>
 8005dfc:	3f490fd8 	.word	0x3f490fd8
 8005e00:	00000000 	.word	0x00000000

08005e04 <sinf>:
 8005e04:	ee10 3a10 	vmov	r3, s0
 8005e08:	b507      	push	{r0, r1, r2, lr}
 8005e0a:	4a1f      	ldr	r2, [pc, #124]	@ (8005e88 <sinf+0x84>)
 8005e0c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d807      	bhi.n	8005e24 <sinf+0x20>
 8005e14:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 8005e8c <sinf+0x88>
 8005e18:	2000      	movs	r0, #0
 8005e1a:	b003      	add	sp, #12
 8005e1c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005e20:	f000 b8c2 	b.w	8005fa8 <__kernel_sinf>
 8005e24:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8005e28:	d304      	bcc.n	8005e34 <sinf+0x30>
 8005e2a:	ee30 0a40 	vsub.f32	s0, s0, s0
 8005e2e:	b003      	add	sp, #12
 8005e30:	f85d fb04 	ldr.w	pc, [sp], #4
 8005e34:	4668      	mov	r0, sp
 8005e36:	f000 fc4f 	bl	80066d8 <__ieee754_rem_pio2f>
 8005e3a:	f000 0003 	and.w	r0, r0, #3
 8005e3e:	2801      	cmp	r0, #1
 8005e40:	d00a      	beq.n	8005e58 <sinf+0x54>
 8005e42:	2802      	cmp	r0, #2
 8005e44:	d00f      	beq.n	8005e66 <sinf+0x62>
 8005e46:	b9c0      	cbnz	r0, 8005e7a <sinf+0x76>
 8005e48:	eddd 0a01 	vldr	s1, [sp, #4]
 8005e4c:	ed9d 0a00 	vldr	s0, [sp]
 8005e50:	2001      	movs	r0, #1
 8005e52:	f000 f8a9 	bl	8005fa8 <__kernel_sinf>
 8005e56:	e7ea      	b.n	8005e2e <sinf+0x2a>
 8005e58:	eddd 0a01 	vldr	s1, [sp, #4]
 8005e5c:	ed9d 0a00 	vldr	s0, [sp]
 8005e60:	f000 f84a 	bl	8005ef8 <__kernel_cosf>
 8005e64:	e7e3      	b.n	8005e2e <sinf+0x2a>
 8005e66:	eddd 0a01 	vldr	s1, [sp, #4]
 8005e6a:	ed9d 0a00 	vldr	s0, [sp]
 8005e6e:	2001      	movs	r0, #1
 8005e70:	f000 f89a 	bl	8005fa8 <__kernel_sinf>
 8005e74:	eeb1 0a40 	vneg.f32	s0, s0
 8005e78:	e7d9      	b.n	8005e2e <sinf+0x2a>
 8005e7a:	eddd 0a01 	vldr	s1, [sp, #4]
 8005e7e:	ed9d 0a00 	vldr	s0, [sp]
 8005e82:	f000 f839 	bl	8005ef8 <__kernel_cosf>
 8005e86:	e7f5      	b.n	8005e74 <sinf+0x70>
 8005e88:	3f490fd8 	.word	0x3f490fd8
 8005e8c:	00000000 	.word	0x00000000

08005e90 <finitef>:
 8005e90:	ee10 3a10 	vmov	r3, s0
 8005e94:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 8005e98:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 8005e9c:	bfac      	ite	ge
 8005e9e:	2000      	movge	r0, #0
 8005ea0:	2001      	movlt	r0, #1
 8005ea2:	4770      	bx	lr

08005ea4 <with_errnof>:
 8005ea4:	b510      	push	{r4, lr}
 8005ea6:	ed2d 8b02 	vpush	{d8}
 8005eaa:	eeb0 8a40 	vmov.f32	s16, s0
 8005eae:	4604      	mov	r4, r0
 8005eb0:	f7ff fec0 	bl	8005c34 <__errno>
 8005eb4:	eeb0 0a48 	vmov.f32	s0, s16
 8005eb8:	ecbd 8b02 	vpop	{d8}
 8005ebc:	6004      	str	r4, [r0, #0]
 8005ebe:	bd10      	pop	{r4, pc}

08005ec0 <xflowf>:
 8005ec0:	b130      	cbz	r0, 8005ed0 <xflowf+0x10>
 8005ec2:	eef1 7a40 	vneg.f32	s15, s0
 8005ec6:	ee27 0a80 	vmul.f32	s0, s15, s0
 8005eca:	2022      	movs	r0, #34	@ 0x22
 8005ecc:	f7ff bfea 	b.w	8005ea4 <with_errnof>
 8005ed0:	eef0 7a40 	vmov.f32	s15, s0
 8005ed4:	e7f7      	b.n	8005ec6 <xflowf+0x6>
	...

08005ed8 <__math_uflowf>:
 8005ed8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8005ee0 <__math_uflowf+0x8>
 8005edc:	f7ff bff0 	b.w	8005ec0 <xflowf>
 8005ee0:	10000000 	.word	0x10000000

08005ee4 <__math_oflowf>:
 8005ee4:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8005eec <__math_oflowf+0x8>
 8005ee8:	f7ff bfea 	b.w	8005ec0 <xflowf>
 8005eec:	70000000 	.word	0x70000000

08005ef0 <__ieee754_sqrtf>:
 8005ef0:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8005ef4:	4770      	bx	lr
	...

08005ef8 <__kernel_cosf>:
 8005ef8:	ee10 3a10 	vmov	r3, s0
 8005efc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005f00:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8005f04:	eef0 6a40 	vmov.f32	s13, s0
 8005f08:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8005f0c:	d204      	bcs.n	8005f18 <__kernel_cosf+0x20>
 8005f0e:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 8005f12:	ee17 2a90 	vmov	r2, s15
 8005f16:	b342      	cbz	r2, 8005f6a <__kernel_cosf+0x72>
 8005f18:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8005f1c:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 8005f88 <__kernel_cosf+0x90>
 8005f20:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 8005f8c <__kernel_cosf+0x94>
 8005f24:	4a1a      	ldr	r2, [pc, #104]	@ (8005f90 <__kernel_cosf+0x98>)
 8005f26:	eea7 6a27 	vfma.f32	s12, s14, s15
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8005f94 <__kernel_cosf+0x9c>
 8005f30:	eee6 7a07 	vfma.f32	s15, s12, s14
 8005f34:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 8005f98 <__kernel_cosf+0xa0>
 8005f38:	eea7 6a87 	vfma.f32	s12, s15, s14
 8005f3c:	eddf 7a17 	vldr	s15, [pc, #92]	@ 8005f9c <__kernel_cosf+0xa4>
 8005f40:	eee6 7a07 	vfma.f32	s15, s12, s14
 8005f44:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 8005fa0 <__kernel_cosf+0xa8>
 8005f48:	eea7 6a87 	vfma.f32	s12, s15, s14
 8005f4c:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 8005f50:	ee26 6a07 	vmul.f32	s12, s12, s14
 8005f54:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8005f58:	eee7 0a06 	vfma.f32	s1, s14, s12
 8005f5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f60:	d804      	bhi.n	8005f6c <__kernel_cosf+0x74>
 8005f62:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8005f66:	ee30 0a67 	vsub.f32	s0, s0, s15
 8005f6a:	4770      	bx	lr
 8005f6c:	4a0d      	ldr	r2, [pc, #52]	@ (8005fa4 <__kernel_cosf+0xac>)
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	bf9a      	itte	ls
 8005f72:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 8005f76:	ee07 3a10 	vmovls	s14, r3
 8005f7a:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 8005f7e:	ee30 0a47 	vsub.f32	s0, s0, s14
 8005f82:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005f86:	e7ec      	b.n	8005f62 <__kernel_cosf+0x6a>
 8005f88:	ad47d74e 	.word	0xad47d74e
 8005f8c:	310f74f6 	.word	0x310f74f6
 8005f90:	3e999999 	.word	0x3e999999
 8005f94:	b493f27c 	.word	0xb493f27c
 8005f98:	37d00d01 	.word	0x37d00d01
 8005f9c:	bab60b61 	.word	0xbab60b61
 8005fa0:	3d2aaaab 	.word	0x3d2aaaab
 8005fa4:	3f480000 	.word	0x3f480000

08005fa8 <__kernel_sinf>:
 8005fa8:	ee10 3a10 	vmov	r3, s0
 8005fac:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005fb0:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8005fb4:	d204      	bcs.n	8005fc0 <__kernel_sinf+0x18>
 8005fb6:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8005fba:	ee17 3a90 	vmov	r3, s15
 8005fbe:	b35b      	cbz	r3, 8006018 <__kernel_sinf+0x70>
 8005fc0:	ee20 7a00 	vmul.f32	s14, s0, s0
 8005fc4:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800601c <__kernel_sinf+0x74>
 8005fc8:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 8006020 <__kernel_sinf+0x78>
 8005fcc:	eea7 6a27 	vfma.f32	s12, s14, s15
 8005fd0:	eddf 7a14 	vldr	s15, [pc, #80]	@ 8006024 <__kernel_sinf+0x7c>
 8005fd4:	eee6 7a07 	vfma.f32	s15, s12, s14
 8005fd8:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 8006028 <__kernel_sinf+0x80>
 8005fdc:	eea7 6a87 	vfma.f32	s12, s15, s14
 8005fe0:	eddf 7a12 	vldr	s15, [pc, #72]	@ 800602c <__kernel_sinf+0x84>
 8005fe4:	ee60 6a07 	vmul.f32	s13, s0, s14
 8005fe8:	eee6 7a07 	vfma.f32	s15, s12, s14
 8005fec:	b930      	cbnz	r0, 8005ffc <__kernel_sinf+0x54>
 8005fee:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 8006030 <__kernel_sinf+0x88>
 8005ff2:	eea7 6a27 	vfma.f32	s12, s14, s15
 8005ff6:	eea6 0a26 	vfma.f32	s0, s12, s13
 8005ffa:	4770      	bx	lr
 8005ffc:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8006000:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 8006004:	eee0 7a86 	vfma.f32	s15, s1, s12
 8006008:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800600c:	eddf 7a09 	vldr	s15, [pc, #36]	@ 8006034 <__kernel_sinf+0x8c>
 8006010:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8006014:	ee30 0a60 	vsub.f32	s0, s0, s1
 8006018:	4770      	bx	lr
 800601a:	bf00      	nop
 800601c:	2f2ec9d3 	.word	0x2f2ec9d3
 8006020:	b2d72f34 	.word	0xb2d72f34
 8006024:	3638ef1b 	.word	0x3638ef1b
 8006028:	b9500d01 	.word	0xb9500d01
 800602c:	3c088889 	.word	0x3c088889
 8006030:	be2aaaab 	.word	0xbe2aaaab
 8006034:	3e2aaaab 	.word	0x3e2aaaab

08006038 <__ieee754_fmodf>:
 8006038:	b570      	push	{r4, r5, r6, lr}
 800603a:	ee10 6a90 	vmov	r6, s1
 800603e:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8006042:	1e5a      	subs	r2, r3, #1
 8006044:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8006048:	d206      	bcs.n	8006058 <__ieee754_fmodf+0x20>
 800604a:	ee10 4a10 	vmov	r4, s0
 800604e:	f024 4100 	bic.w	r1, r4, #2147483648	@ 0x80000000
 8006052:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8006056:	d304      	bcc.n	8006062 <__ieee754_fmodf+0x2a>
 8006058:	ee60 0a20 	vmul.f32	s1, s0, s1
 800605c:	ee80 0aa0 	vdiv.f32	s0, s1, s1
 8006060:	bd70      	pop	{r4, r5, r6, pc}
 8006062:	4299      	cmp	r1, r3
 8006064:	dbfc      	blt.n	8006060 <__ieee754_fmodf+0x28>
 8006066:	f004 4500 	and.w	r5, r4, #2147483648	@ 0x80000000
 800606a:	d105      	bne.n	8006078 <__ieee754_fmodf+0x40>
 800606c:	4b32      	ldr	r3, [pc, #200]	@ (8006138 <__ieee754_fmodf+0x100>)
 800606e:	eb03 7355 	add.w	r3, r3, r5, lsr #29
 8006072:	ed93 0a00 	vldr	s0, [r3]
 8006076:	e7f3      	b.n	8006060 <__ieee754_fmodf+0x28>
 8006078:	f014 4fff 	tst.w	r4, #2139095040	@ 0x7f800000
 800607c:	d146      	bne.n	800610c <__ieee754_fmodf+0xd4>
 800607e:	020a      	lsls	r2, r1, #8
 8006080:	f06f 007d 	mvn.w	r0, #125	@ 0x7d
 8006084:	2a00      	cmp	r2, #0
 8006086:	dc3e      	bgt.n	8006106 <__ieee754_fmodf+0xce>
 8006088:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 800608c:	bf01      	itttt	eq
 800608e:	021a      	lsleq	r2, r3, #8
 8006090:	fab2 f282 	clzeq	r2, r2
 8006094:	f1c2 22ff 	rsbeq	r2, r2, #4278255360	@ 0xff00ff00
 8006098:	f502 027f 	addeq.w	r2, r2, #16711680	@ 0xff0000
 800609c:	bf16      	itet	ne
 800609e:	15da      	asrne	r2, r3, #23
 80060a0:	3282      	addeq	r2, #130	@ 0x82
 80060a2:	3a7f      	subne	r2, #127	@ 0x7f
 80060a4:	f110 0f7e 	cmn.w	r0, #126	@ 0x7e
 80060a8:	bfbb      	ittet	lt
 80060aa:	f06f 047d 	mvnlt.w	r4, #125	@ 0x7d
 80060ae:	1a24      	sublt	r4, r4, r0
 80060b0:	f3c4 0416 	ubfxge	r4, r4, #0, #23
 80060b4:	40a1      	lsllt	r1, r4
 80060b6:	bfa8      	it	ge
 80060b8:	f444 0100 	orrge.w	r1, r4, #8388608	@ 0x800000
 80060bc:	f112 0f7e 	cmn.w	r2, #126	@ 0x7e
 80060c0:	bfb5      	itete	lt
 80060c2:	f06f 047d 	mvnlt.w	r4, #125	@ 0x7d
 80060c6:	f3c6 0616 	ubfxge	r6, r6, #0, #23
 80060ca:	1aa4      	sublt	r4, r4, r2
 80060cc:	f446 0400 	orrge.w	r4, r6, #8388608	@ 0x800000
 80060d0:	bfb8      	it	lt
 80060d2:	fa03 f404 	lsllt.w	r4, r3, r4
 80060d6:	1a80      	subs	r0, r0, r2
 80060d8:	1b0b      	subs	r3, r1, r4
 80060da:	b9d0      	cbnz	r0, 8006112 <__ieee754_fmodf+0xda>
 80060dc:	ea33 0323 	bics.w	r3, r3, r3, asr #32
 80060e0:	bf28      	it	cs
 80060e2:	460b      	movcs	r3, r1
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d0c1      	beq.n	800606c <__ieee754_fmodf+0x34>
 80060e8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80060ec:	db19      	blt.n	8006122 <__ieee754_fmodf+0xea>
 80060ee:	f112 0f7e 	cmn.w	r2, #126	@ 0x7e
 80060f2:	db19      	blt.n	8006128 <__ieee754_fmodf+0xf0>
 80060f4:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 80060f8:	327f      	adds	r2, #127	@ 0x7f
 80060fa:	432b      	orrs	r3, r5
 80060fc:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8006100:	ee00 3a10 	vmov	s0, r3
 8006104:	e7ac      	b.n	8006060 <__ieee754_fmodf+0x28>
 8006106:	3801      	subs	r0, #1
 8006108:	0052      	lsls	r2, r2, #1
 800610a:	e7bb      	b.n	8006084 <__ieee754_fmodf+0x4c>
 800610c:	15c8      	asrs	r0, r1, #23
 800610e:	387f      	subs	r0, #127	@ 0x7f
 8006110:	e7ba      	b.n	8006088 <__ieee754_fmodf+0x50>
 8006112:	2b00      	cmp	r3, #0
 8006114:	da02      	bge.n	800611c <__ieee754_fmodf+0xe4>
 8006116:	0049      	lsls	r1, r1, #1
 8006118:	3801      	subs	r0, #1
 800611a:	e7dd      	b.n	80060d8 <__ieee754_fmodf+0xa0>
 800611c:	d0a6      	beq.n	800606c <__ieee754_fmodf+0x34>
 800611e:	0059      	lsls	r1, r3, #1
 8006120:	e7fa      	b.n	8006118 <__ieee754_fmodf+0xe0>
 8006122:	005b      	lsls	r3, r3, #1
 8006124:	3a01      	subs	r2, #1
 8006126:	e7df      	b.n	80060e8 <__ieee754_fmodf+0xb0>
 8006128:	f1c2 22ff 	rsb	r2, r2, #4278255360	@ 0xff00ff00
 800612c:	f502 027f 	add.w	r2, r2, #16711680	@ 0xff0000
 8006130:	3282      	adds	r2, #130	@ 0x82
 8006132:	4113      	asrs	r3, r2
 8006134:	432b      	orrs	r3, r5
 8006136:	e7e3      	b.n	8006100 <__ieee754_fmodf+0xc8>
 8006138:	08007798 	.word	0x08007798

0800613c <__ieee754_powf>:
 800613c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006140:	ee10 4a90 	vmov	r4, s1
 8006144:	f034 4900 	bics.w	r9, r4, #2147483648	@ 0x80000000
 8006148:	ed2d 8b02 	vpush	{d8}
 800614c:	ee10 6a10 	vmov	r6, s0
 8006150:	eeb0 8a40 	vmov.f32	s16, s0
 8006154:	eef0 8a60 	vmov.f32	s17, s1
 8006158:	d10c      	bne.n	8006174 <__ieee754_powf+0x38>
 800615a:	f486 0680 	eor.w	r6, r6, #4194304	@ 0x400000
 800615e:	0076      	lsls	r6, r6, #1
 8006160:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 8006164:	f240 8274 	bls.w	8006650 <__ieee754_powf+0x514>
 8006168:	ee38 0a28 	vadd.f32	s0, s16, s17
 800616c:	ecbd 8b02 	vpop	{d8}
 8006170:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006174:	f026 4800 	bic.w	r8, r6, #2147483648	@ 0x80000000
 8006178:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 800617c:	d802      	bhi.n	8006184 <__ieee754_powf+0x48>
 800617e:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 8006182:	d908      	bls.n	8006196 <__ieee754_powf+0x5a>
 8006184:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 8006188:	d1ee      	bne.n	8006168 <__ieee754_powf+0x2c>
 800618a:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 800618e:	0064      	lsls	r4, r4, #1
 8006190:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 8006194:	e7e6      	b.n	8006164 <__ieee754_powf+0x28>
 8006196:	2e00      	cmp	r6, #0
 8006198:	da1f      	bge.n	80061da <__ieee754_powf+0x9e>
 800619a:	f1b9 4f97 	cmp.w	r9, #1266679808	@ 0x4b800000
 800619e:	f080 8260 	bcs.w	8006662 <__ieee754_powf+0x526>
 80061a2:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 80061a6:	d32f      	bcc.n	8006208 <__ieee754_powf+0xcc>
 80061a8:	ea4f 53e9 	mov.w	r3, r9, asr #23
 80061ac:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 80061b0:	fa49 f503 	asr.w	r5, r9, r3
 80061b4:	fa05 f303 	lsl.w	r3, r5, r3
 80061b8:	454b      	cmp	r3, r9
 80061ba:	d123      	bne.n	8006204 <__ieee754_powf+0xc8>
 80061bc:	f005 0501 	and.w	r5, r5, #1
 80061c0:	f1c5 0502 	rsb	r5, r5, #2
 80061c4:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 80061c8:	d11f      	bne.n	800620a <__ieee754_powf+0xce>
 80061ca:	2c00      	cmp	r4, #0
 80061cc:	f280 8246 	bge.w	800665c <__ieee754_powf+0x520>
 80061d0:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80061d4:	ee87 0a88 	vdiv.f32	s0, s15, s16
 80061d8:	e7c8      	b.n	800616c <__ieee754_powf+0x30>
 80061da:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 80061de:	d111      	bne.n	8006204 <__ieee754_powf+0xc8>
 80061e0:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 80061e4:	f000 8234 	beq.w	8006650 <__ieee754_powf+0x514>
 80061e8:	d906      	bls.n	80061f8 <__ieee754_powf+0xbc>
 80061ea:	ed9f 0ac5 	vldr	s0, [pc, #788]	@ 8006500 <__ieee754_powf+0x3c4>
 80061ee:	2c00      	cmp	r4, #0
 80061f0:	bfa8      	it	ge
 80061f2:	eeb0 0a68 	vmovge.f32	s0, s17
 80061f6:	e7b9      	b.n	800616c <__ieee754_powf+0x30>
 80061f8:	2c00      	cmp	r4, #0
 80061fa:	f280 822c 	bge.w	8006656 <__ieee754_powf+0x51a>
 80061fe:	eeb1 0a68 	vneg.f32	s0, s17
 8006202:	e7b3      	b.n	800616c <__ieee754_powf+0x30>
 8006204:	2500      	movs	r5, #0
 8006206:	e7dd      	b.n	80061c4 <__ieee754_powf+0x88>
 8006208:	2500      	movs	r5, #0
 800620a:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 800620e:	d102      	bne.n	8006216 <__ieee754_powf+0xda>
 8006210:	ee28 0a08 	vmul.f32	s0, s16, s16
 8006214:	e7aa      	b.n	800616c <__ieee754_powf+0x30>
 8006216:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 800621a:	f040 8227 	bne.w	800666c <__ieee754_powf+0x530>
 800621e:	2e00      	cmp	r6, #0
 8006220:	f2c0 8224 	blt.w	800666c <__ieee754_powf+0x530>
 8006224:	eeb0 0a48 	vmov.f32	s0, s16
 8006228:	ecbd 8b02 	vpop	{d8}
 800622c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006230:	f7ff be5e 	b.w	8005ef0 <__ieee754_sqrtf>
 8006234:	2d01      	cmp	r5, #1
 8006236:	d199      	bne.n	800616c <__ieee754_powf+0x30>
 8006238:	eeb1 0a40 	vneg.f32	s0, s0
 800623c:	e796      	b.n	800616c <__ieee754_powf+0x30>
 800623e:	0ff0      	lsrs	r0, r6, #31
 8006240:	3801      	subs	r0, #1
 8006242:	ea55 0300 	orrs.w	r3, r5, r0
 8006246:	d104      	bne.n	8006252 <__ieee754_powf+0x116>
 8006248:	ee38 8a48 	vsub.f32	s16, s16, s16
 800624c:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8006250:	e78c      	b.n	800616c <__ieee754_powf+0x30>
 8006252:	f1b9 4f9a 	cmp.w	r9, #1291845632	@ 0x4d000000
 8006256:	d96d      	bls.n	8006334 <__ieee754_powf+0x1f8>
 8006258:	4baa      	ldr	r3, [pc, #680]	@ (8006504 <__ieee754_powf+0x3c8>)
 800625a:	4598      	cmp	r8, r3
 800625c:	d808      	bhi.n	8006270 <__ieee754_powf+0x134>
 800625e:	2c00      	cmp	r4, #0
 8006260:	da0b      	bge.n	800627a <__ieee754_powf+0x13e>
 8006262:	2000      	movs	r0, #0
 8006264:	ecbd 8b02 	vpop	{d8}
 8006268:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800626c:	f7ff be3a 	b.w	8005ee4 <__math_oflowf>
 8006270:	4ba5      	ldr	r3, [pc, #660]	@ (8006508 <__ieee754_powf+0x3cc>)
 8006272:	4598      	cmp	r8, r3
 8006274:	d908      	bls.n	8006288 <__ieee754_powf+0x14c>
 8006276:	2c00      	cmp	r4, #0
 8006278:	dcf3      	bgt.n	8006262 <__ieee754_powf+0x126>
 800627a:	2000      	movs	r0, #0
 800627c:	ecbd 8b02 	vpop	{d8}
 8006280:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006284:	f7ff be28 	b.w	8005ed8 <__math_uflowf>
 8006288:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800628c:	ee30 0a67 	vsub.f32	s0, s0, s15
 8006290:	eddf 6a9e 	vldr	s13, [pc, #632]	@ 800650c <__ieee754_powf+0x3d0>
 8006294:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 8006298:	eee0 6a67 	vfms.f32	s13, s0, s15
 800629c:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80062a0:	eee6 7ac0 	vfms.f32	s15, s13, s0
 80062a4:	ee20 7a00 	vmul.f32	s14, s0, s0
 80062a8:	eddf 6a99 	vldr	s13, [pc, #612]	@ 8006510 <__ieee754_powf+0x3d4>
 80062ac:	ee27 7a27 	vmul.f32	s14, s14, s15
 80062b0:	eddf 7a98 	vldr	s15, [pc, #608]	@ 8006514 <__ieee754_powf+0x3d8>
 80062b4:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 80062b8:	ed9f 7a97 	vldr	s14, [pc, #604]	@ 8006518 <__ieee754_powf+0x3dc>
 80062bc:	eee0 7a07 	vfma.f32	s15, s0, s14
 80062c0:	eeb0 7a67 	vmov.f32	s14, s15
 80062c4:	eea0 7a26 	vfma.f32	s14, s0, s13
 80062c8:	ee17 3a10 	vmov	r3, s14
 80062cc:	f36f 030b 	bfc	r3, #0, #12
 80062d0:	ee07 3a10 	vmov	s14, r3
 80062d4:	eeb0 6a47 	vmov.f32	s12, s14
 80062d8:	eea0 6a66 	vfms.f32	s12, s0, s13
 80062dc:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80062e0:	3d01      	subs	r5, #1
 80062e2:	4305      	orrs	r5, r0
 80062e4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80062e8:	eebf 8a00 	vmov.f32	s16, #240	@ 0xbf800000 -1.0
 80062ec:	f36f 040b 	bfc	r4, #0, #12
 80062f0:	bf18      	it	ne
 80062f2:	eeb0 8a66 	vmovne.f32	s16, s13
 80062f6:	ee06 4a90 	vmov	s13, r4
 80062fa:	ee67 0aa8 	vmul.f32	s1, s15, s17
 80062fe:	ee38 6ae6 	vsub.f32	s12, s17, s13
 8006302:	ee67 7a26 	vmul.f32	s15, s14, s13
 8006306:	eee6 0a07 	vfma.f32	s1, s12, s14
 800630a:	ee30 7aa7 	vadd.f32	s14, s1, s15
 800630e:	ee17 1a10 	vmov	r1, s14
 8006312:	2900      	cmp	r1, #0
 8006314:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8006318:	f340 80dd 	ble.w	80064d6 <__ieee754_powf+0x39a>
 800631c:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 8006320:	f240 80ca 	bls.w	80064b8 <__ieee754_powf+0x37c>
 8006324:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8006328:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800632c:	bf4c      	ite	mi
 800632e:	2001      	movmi	r0, #1
 8006330:	2000      	movpl	r0, #0
 8006332:	e797      	b.n	8006264 <__ieee754_powf+0x128>
 8006334:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 8006338:	bf01      	itttt	eq
 800633a:	eddf 7a78 	vldreq	s15, [pc, #480]	@ 800651c <__ieee754_powf+0x3e0>
 800633e:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 8006342:	f06f 0317 	mvneq.w	r3, #23
 8006346:	ee17 7a90 	vmoveq	r7, s15
 800634a:	ea4f 52e7 	mov.w	r2, r7, asr #23
 800634e:	bf18      	it	ne
 8006350:	2300      	movne	r3, #0
 8006352:	3a7f      	subs	r2, #127	@ 0x7f
 8006354:	441a      	add	r2, r3
 8006356:	4b72      	ldr	r3, [pc, #456]	@ (8006520 <__ieee754_powf+0x3e4>)
 8006358:	f3c7 0716 	ubfx	r7, r7, #0, #23
 800635c:	429f      	cmp	r7, r3
 800635e:	f047 517e 	orr.w	r1, r7, #1065353216	@ 0x3f800000
 8006362:	dd06      	ble.n	8006372 <__ieee754_powf+0x236>
 8006364:	4b6f      	ldr	r3, [pc, #444]	@ (8006524 <__ieee754_powf+0x3e8>)
 8006366:	429f      	cmp	r7, r3
 8006368:	f340 80a4 	ble.w	80064b4 <__ieee754_powf+0x378>
 800636c:	3201      	adds	r2, #1
 800636e:	f5a1 0100 	sub.w	r1, r1, #8388608	@ 0x800000
 8006372:	2600      	movs	r6, #0
 8006374:	4b6c      	ldr	r3, [pc, #432]	@ (8006528 <__ieee754_powf+0x3ec>)
 8006376:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 800637a:	ee07 1a10 	vmov	s14, r1
 800637e:	edd3 5a00 	vldr	s11, [r3]
 8006382:	4b6a      	ldr	r3, [pc, #424]	@ (800652c <__ieee754_powf+0x3f0>)
 8006384:	ee75 7a87 	vadd.f32	s15, s11, s14
 8006388:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800638c:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 8006390:	1049      	asrs	r1, r1, #1
 8006392:	f041 5100 	orr.w	r1, r1, #536870912	@ 0x20000000
 8006396:	f501 2180 	add.w	r1, r1, #262144	@ 0x40000
 800639a:	eb01 5146 	add.w	r1, r1, r6, lsl #21
 800639e:	ee37 6a65 	vsub.f32	s12, s14, s11
 80063a2:	ee07 1a90 	vmov	s15, r1
 80063a6:	ee26 5a24 	vmul.f32	s10, s12, s9
 80063aa:	ee77 5ae5 	vsub.f32	s11, s15, s11
 80063ae:	ee15 7a10 	vmov	r7, s10
 80063b2:	401f      	ands	r7, r3
 80063b4:	ee06 7a90 	vmov	s13, r7
 80063b8:	eea6 6ae7 	vfms.f32	s12, s13, s15
 80063bc:	ee37 7a65 	vsub.f32	s14, s14, s11
 80063c0:	ee65 7a05 	vmul.f32	s15, s10, s10
 80063c4:	eea6 6ac7 	vfms.f32	s12, s13, s14
 80063c8:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8006530 <__ieee754_powf+0x3f4>
 80063cc:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 8006534 <__ieee754_powf+0x3f8>
 80063d0:	eee7 5a87 	vfma.f32	s11, s15, s14
 80063d4:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 8006538 <__ieee754_powf+0x3fc>
 80063d8:	eea5 7aa7 	vfma.f32	s14, s11, s15
 80063dc:	eddf 5a4b 	vldr	s11, [pc, #300]	@ 800650c <__ieee754_powf+0x3d0>
 80063e0:	eee7 5a27 	vfma.f32	s11, s14, s15
 80063e4:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 800653c <__ieee754_powf+0x400>
 80063e8:	eea5 7aa7 	vfma.f32	s14, s11, s15
 80063ec:	eddf 5a54 	vldr	s11, [pc, #336]	@ 8006540 <__ieee754_powf+0x404>
 80063f0:	ee26 6a24 	vmul.f32	s12, s12, s9
 80063f4:	eee7 5a27 	vfma.f32	s11, s14, s15
 80063f8:	ee35 7a26 	vadd.f32	s14, s10, s13
 80063fc:	ee67 4aa7 	vmul.f32	s9, s15, s15
 8006400:	ee27 7a06 	vmul.f32	s14, s14, s12
 8006404:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 8006408:	eea4 7aa5 	vfma.f32	s14, s9, s11
 800640c:	eef0 5a67 	vmov.f32	s11, s15
 8006410:	eee6 5aa6 	vfma.f32	s11, s13, s13
 8006414:	ee75 5a87 	vadd.f32	s11, s11, s14
 8006418:	ee15 1a90 	vmov	r1, s11
 800641c:	4019      	ands	r1, r3
 800641e:	ee05 1a90 	vmov	s11, r1
 8006422:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8006426:	eee6 7ae6 	vfms.f32	s15, s13, s13
 800642a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800642e:	ee67 7a85 	vmul.f32	s15, s15, s10
 8006432:	eee6 7a25 	vfma.f32	s15, s12, s11
 8006436:	eeb0 6a67 	vmov.f32	s12, s15
 800643a:	eea6 6aa5 	vfma.f32	s12, s13, s11
 800643e:	ee16 1a10 	vmov	r1, s12
 8006442:	4019      	ands	r1, r3
 8006444:	ee06 1a10 	vmov	s12, r1
 8006448:	eeb0 7a46 	vmov.f32	s14, s12
 800644c:	eea6 7ae5 	vfms.f32	s14, s13, s11
 8006450:	493c      	ldr	r1, [pc, #240]	@ (8006544 <__ieee754_powf+0x408>)
 8006452:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 8006456:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800645a:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 8006548 <__ieee754_powf+0x40c>
 800645e:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 800654c <__ieee754_powf+0x410>
 8006462:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006466:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 8006550 <__ieee754_powf+0x414>
 800646a:	eee6 7a07 	vfma.f32	s15, s12, s14
 800646e:	ed91 7a00 	vldr	s14, [r1]
 8006472:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006476:	ee07 2a10 	vmov	s14, r2
 800647a:	4a36      	ldr	r2, [pc, #216]	@ (8006554 <__ieee754_powf+0x418>)
 800647c:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006480:	eeb0 7a67 	vmov.f32	s14, s15
 8006484:	eea6 7a25 	vfma.f32	s14, s12, s11
 8006488:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 800648c:	ed92 5a00 	vldr	s10, [r2]
 8006490:	ee37 7a05 	vadd.f32	s14, s14, s10
 8006494:	ee37 7a26 	vadd.f32	s14, s14, s13
 8006498:	ee17 2a10 	vmov	r2, s14
 800649c:	401a      	ands	r2, r3
 800649e:	ee07 2a10 	vmov	s14, r2
 80064a2:	ee77 6a66 	vsub.f32	s13, s14, s13
 80064a6:	ee76 6ac5 	vsub.f32	s13, s13, s10
 80064aa:	eee6 6a65 	vfms.f32	s13, s12, s11
 80064ae:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80064b2:	e715      	b.n	80062e0 <__ieee754_powf+0x1a4>
 80064b4:	2601      	movs	r6, #1
 80064b6:	e75d      	b.n	8006374 <__ieee754_powf+0x238>
 80064b8:	d152      	bne.n	8006560 <__ieee754_powf+0x424>
 80064ba:	eddf 6a27 	vldr	s13, [pc, #156]	@ 8006558 <__ieee754_powf+0x41c>
 80064be:	ee37 7a67 	vsub.f32	s14, s14, s15
 80064c2:	ee70 6aa6 	vadd.f32	s13, s1, s13
 80064c6:	eef4 6ac7 	vcmpe.f32	s13, s14
 80064ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80064ce:	f73f af29 	bgt.w	8006324 <__ieee754_powf+0x1e8>
 80064d2:	2386      	movs	r3, #134	@ 0x86
 80064d4:	e048      	b.n	8006568 <__ieee754_powf+0x42c>
 80064d6:	4a21      	ldr	r2, [pc, #132]	@ (800655c <__ieee754_powf+0x420>)
 80064d8:	4293      	cmp	r3, r2
 80064da:	d907      	bls.n	80064ec <__ieee754_powf+0x3b0>
 80064dc:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80064e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80064e4:	bf4c      	ite	mi
 80064e6:	2001      	movmi	r0, #1
 80064e8:	2000      	movpl	r0, #0
 80064ea:	e6c7      	b.n	800627c <__ieee754_powf+0x140>
 80064ec:	d138      	bne.n	8006560 <__ieee754_powf+0x424>
 80064ee:	ee37 7a67 	vsub.f32	s14, s14, s15
 80064f2:	eeb4 7ae0 	vcmpe.f32	s14, s1
 80064f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80064fa:	dbea      	blt.n	80064d2 <__ieee754_powf+0x396>
 80064fc:	e7ee      	b.n	80064dc <__ieee754_powf+0x3a0>
 80064fe:	bf00      	nop
 8006500:	00000000 	.word	0x00000000
 8006504:	3f7ffff3 	.word	0x3f7ffff3
 8006508:	3f800007 	.word	0x3f800007
 800650c:	3eaaaaab 	.word	0x3eaaaaab
 8006510:	3fb8aa00 	.word	0x3fb8aa00
 8006514:	3fb8aa3b 	.word	0x3fb8aa3b
 8006518:	36eca570 	.word	0x36eca570
 800651c:	4b800000 	.word	0x4b800000
 8006520:	001cc471 	.word	0x001cc471
 8006524:	005db3d6 	.word	0x005db3d6
 8006528:	080077b0 	.word	0x080077b0
 800652c:	fffff000 	.word	0xfffff000
 8006530:	3e6c3255 	.word	0x3e6c3255
 8006534:	3e53f142 	.word	0x3e53f142
 8006538:	3e8ba305 	.word	0x3e8ba305
 800653c:	3edb6db7 	.word	0x3edb6db7
 8006540:	3f19999a 	.word	0x3f19999a
 8006544:	080077a0 	.word	0x080077a0
 8006548:	3f76384f 	.word	0x3f76384f
 800654c:	3f763800 	.word	0x3f763800
 8006550:	369dc3a0 	.word	0x369dc3a0
 8006554:	080077a8 	.word	0x080077a8
 8006558:	3338aa3c 	.word	0x3338aa3c
 800655c:	43160000 	.word	0x43160000
 8006560:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 8006564:	d96f      	bls.n	8006646 <__ieee754_powf+0x50a>
 8006566:	15db      	asrs	r3, r3, #23
 8006568:	3b7e      	subs	r3, #126	@ 0x7e
 800656a:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 800656e:	4118      	asrs	r0, r3
 8006570:	4408      	add	r0, r1
 8006572:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8006576:	4a4e      	ldr	r2, [pc, #312]	@ (80066b0 <__ieee754_powf+0x574>)
 8006578:	3b7f      	subs	r3, #127	@ 0x7f
 800657a:	411a      	asrs	r2, r3
 800657c:	4002      	ands	r2, r0
 800657e:	ee07 2a10 	vmov	s14, r2
 8006582:	f3c0 0016 	ubfx	r0, r0, #0, #23
 8006586:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800658a:	f1c3 0317 	rsb	r3, r3, #23
 800658e:	4118      	asrs	r0, r3
 8006590:	2900      	cmp	r1, #0
 8006592:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006596:	bfb8      	it	lt
 8006598:	4240      	neglt	r0, r0
 800659a:	ee77 6aa0 	vadd.f32	s13, s15, s1
 800659e:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 80066b4 <__ieee754_powf+0x578>
 80065a2:	ed9f 6a45 	vldr	s12, [pc, #276]	@ 80066b8 <__ieee754_powf+0x57c>
 80065a6:	ee16 3a90 	vmov	r3, s13
 80065aa:	f36f 030b 	bfc	r3, #0, #12
 80065ae:	ee06 3a90 	vmov	s13, r3
 80065b2:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80065b6:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80065ba:	ee70 0ae7 	vsub.f32	s1, s1, s15
 80065be:	eddf 7a3f 	vldr	s15, [pc, #252]	@ 80066bc <__ieee754_powf+0x580>
 80065c2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80065c6:	eee0 7a87 	vfma.f32	s15, s1, s14
 80065ca:	eeb0 7a67 	vmov.f32	s14, s15
 80065ce:	eea6 7a86 	vfma.f32	s14, s13, s12
 80065d2:	eef0 5a47 	vmov.f32	s11, s14
 80065d6:	eee6 5ac6 	vfms.f32	s11, s13, s12
 80065da:	ee67 6a07 	vmul.f32	s13, s14, s14
 80065de:	ee77 7ae5 	vsub.f32	s15, s15, s11
 80065e2:	ed9f 6a37 	vldr	s12, [pc, #220]	@ 80066c0 <__ieee754_powf+0x584>
 80065e6:	eddf 5a37 	vldr	s11, [pc, #220]	@ 80066c4 <__ieee754_powf+0x588>
 80065ea:	eea6 6aa5 	vfma.f32	s12, s13, s11
 80065ee:	eddf 5a36 	vldr	s11, [pc, #216]	@ 80066c8 <__ieee754_powf+0x58c>
 80065f2:	eee6 5a26 	vfma.f32	s11, s12, s13
 80065f6:	ed9f 6a35 	vldr	s12, [pc, #212]	@ 80066cc <__ieee754_powf+0x590>
 80065fa:	eea5 6aa6 	vfma.f32	s12, s11, s13
 80065fe:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80066d0 <__ieee754_powf+0x594>
 8006602:	eee6 5a26 	vfma.f32	s11, s12, s13
 8006606:	eeb0 6a47 	vmov.f32	s12, s14
 800660a:	eea5 6ae6 	vfms.f32	s12, s11, s13
 800660e:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8006612:	ee67 5a06 	vmul.f32	s11, s14, s12
 8006616:	ee36 6a66 	vsub.f32	s12, s12, s13
 800661a:	eee7 7a27 	vfma.f32	s15, s14, s15
 800661e:	eec5 6a86 	vdiv.f32	s13, s11, s12
 8006622:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8006626:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800662a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800662e:	ee10 3a10 	vmov	r3, s0
 8006632:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 8006636:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800663a:	da06      	bge.n	800664a <__ieee754_powf+0x50e>
 800663c:	f000 f984 	bl	8006948 <scalbnf>
 8006640:	ee20 0a08 	vmul.f32	s0, s0, s16
 8006644:	e592      	b.n	800616c <__ieee754_powf+0x30>
 8006646:	2000      	movs	r0, #0
 8006648:	e7a7      	b.n	800659a <__ieee754_powf+0x45e>
 800664a:	ee00 3a10 	vmov	s0, r3
 800664e:	e7f7      	b.n	8006640 <__ieee754_powf+0x504>
 8006650:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8006654:	e58a      	b.n	800616c <__ieee754_powf+0x30>
 8006656:	ed9f 0a1f 	vldr	s0, [pc, #124]	@ 80066d4 <__ieee754_powf+0x598>
 800665a:	e587      	b.n	800616c <__ieee754_powf+0x30>
 800665c:	eeb0 0a48 	vmov.f32	s0, s16
 8006660:	e584      	b.n	800616c <__ieee754_powf+0x30>
 8006662:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 8006666:	f43f adbb 	beq.w	80061e0 <__ieee754_powf+0xa4>
 800666a:	2502      	movs	r5, #2
 800666c:	eeb0 0a48 	vmov.f32	s0, s16
 8006670:	f000 f962 	bl	8006938 <fabsf>
 8006674:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 8006678:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 800667c:	4647      	mov	r7, r8
 800667e:	d003      	beq.n	8006688 <__ieee754_powf+0x54c>
 8006680:	f1b8 0f00 	cmp.w	r8, #0
 8006684:	f47f addb 	bne.w	800623e <__ieee754_powf+0x102>
 8006688:	2c00      	cmp	r4, #0
 800668a:	bfbc      	itt	lt
 800668c:	eef7 7a00 	vmovlt.f32	s15, #112	@ 0x3f800000  1.0
 8006690:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8006694:	2e00      	cmp	r6, #0
 8006696:	f6bf ad69 	bge.w	800616c <__ieee754_powf+0x30>
 800669a:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 800669e:	ea58 0805 	orrs.w	r8, r8, r5
 80066a2:	f47f adc7 	bne.w	8006234 <__ieee754_powf+0xf8>
 80066a6:	ee70 7a40 	vsub.f32	s15, s0, s0
 80066aa:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 80066ae:	e55d      	b.n	800616c <__ieee754_powf+0x30>
 80066b0:	ff800000 	.word	0xff800000
 80066b4:	3f317218 	.word	0x3f317218
 80066b8:	3f317200 	.word	0x3f317200
 80066bc:	35bfbe8c 	.word	0x35bfbe8c
 80066c0:	b5ddea0e 	.word	0xb5ddea0e
 80066c4:	3331bb4c 	.word	0x3331bb4c
 80066c8:	388ab355 	.word	0x388ab355
 80066cc:	bb360b61 	.word	0xbb360b61
 80066d0:	3e2aaaab 	.word	0x3e2aaaab
 80066d4:	00000000 	.word	0x00000000

080066d8 <__ieee754_rem_pio2f>:
 80066d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80066da:	ee10 6a10 	vmov	r6, s0
 80066de:	4b88      	ldr	r3, [pc, #544]	@ (8006900 <__ieee754_rem_pio2f+0x228>)
 80066e0:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 80066e4:	429d      	cmp	r5, r3
 80066e6:	b087      	sub	sp, #28
 80066e8:	4604      	mov	r4, r0
 80066ea:	d805      	bhi.n	80066f8 <__ieee754_rem_pio2f+0x20>
 80066ec:	2300      	movs	r3, #0
 80066ee:	ed80 0a00 	vstr	s0, [r0]
 80066f2:	6043      	str	r3, [r0, #4]
 80066f4:	2000      	movs	r0, #0
 80066f6:	e022      	b.n	800673e <__ieee754_rem_pio2f+0x66>
 80066f8:	4b82      	ldr	r3, [pc, #520]	@ (8006904 <__ieee754_rem_pio2f+0x22c>)
 80066fa:	429d      	cmp	r5, r3
 80066fc:	d83a      	bhi.n	8006774 <__ieee754_rem_pio2f+0x9c>
 80066fe:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8006702:	2e00      	cmp	r6, #0
 8006704:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 8006908 <__ieee754_rem_pio2f+0x230>
 8006708:	4a80      	ldr	r2, [pc, #512]	@ (800690c <__ieee754_rem_pio2f+0x234>)
 800670a:	f023 030f 	bic.w	r3, r3, #15
 800670e:	dd18      	ble.n	8006742 <__ieee754_rem_pio2f+0x6a>
 8006710:	4293      	cmp	r3, r2
 8006712:	ee70 7a47 	vsub.f32	s15, s0, s14
 8006716:	bf09      	itett	eq
 8006718:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 8006910 <__ieee754_rem_pio2f+0x238>
 800671c:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 8006914 <__ieee754_rem_pio2f+0x23c>
 8006720:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 8006918 <__ieee754_rem_pio2f+0x240>
 8006724:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8006728:	ee37 7ae6 	vsub.f32	s14, s15, s13
 800672c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006730:	ed80 7a00 	vstr	s14, [r0]
 8006734:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006738:	edc0 7a01 	vstr	s15, [r0, #4]
 800673c:	2001      	movs	r0, #1
 800673e:	b007      	add	sp, #28
 8006740:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006742:	4293      	cmp	r3, r2
 8006744:	ee70 7a07 	vadd.f32	s15, s0, s14
 8006748:	bf09      	itett	eq
 800674a:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 8006910 <__ieee754_rem_pio2f+0x238>
 800674e:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 8006914 <__ieee754_rem_pio2f+0x23c>
 8006752:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 8006918 <__ieee754_rem_pio2f+0x240>
 8006756:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 800675a:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800675e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006762:	ed80 7a00 	vstr	s14, [r0]
 8006766:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800676a:	edc0 7a01 	vstr	s15, [r0, #4]
 800676e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006772:	e7e4      	b.n	800673e <__ieee754_rem_pio2f+0x66>
 8006774:	4b69      	ldr	r3, [pc, #420]	@ (800691c <__ieee754_rem_pio2f+0x244>)
 8006776:	429d      	cmp	r5, r3
 8006778:	d873      	bhi.n	8006862 <__ieee754_rem_pio2f+0x18a>
 800677a:	f000 f8dd 	bl	8006938 <fabsf>
 800677e:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 8006920 <__ieee754_rem_pio2f+0x248>
 8006782:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8006786:	eee0 7a07 	vfma.f32	s15, s0, s14
 800678a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800678e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006792:	ee17 0a90 	vmov	r0, s15
 8006796:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8006908 <__ieee754_rem_pio2f+0x230>
 800679a:	eea7 0a67 	vfms.f32	s0, s14, s15
 800679e:	281f      	cmp	r0, #31
 80067a0:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8006914 <__ieee754_rem_pio2f+0x23c>
 80067a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80067a8:	eeb1 6a47 	vneg.f32	s12, s14
 80067ac:	ee70 6a67 	vsub.f32	s13, s0, s15
 80067b0:	ee16 1a90 	vmov	r1, s13
 80067b4:	dc09      	bgt.n	80067ca <__ieee754_rem_pio2f+0xf2>
 80067b6:	4a5b      	ldr	r2, [pc, #364]	@ (8006924 <__ieee754_rem_pio2f+0x24c>)
 80067b8:	1e47      	subs	r7, r0, #1
 80067ba:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 80067be:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 80067c2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80067c6:	4293      	cmp	r3, r2
 80067c8:	d107      	bne.n	80067da <__ieee754_rem_pio2f+0x102>
 80067ca:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 80067ce:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 80067d2:	2a08      	cmp	r2, #8
 80067d4:	ea4f 53e5 	mov.w	r3, r5, asr #23
 80067d8:	dc14      	bgt.n	8006804 <__ieee754_rem_pio2f+0x12c>
 80067da:	6021      	str	r1, [r4, #0]
 80067dc:	ed94 7a00 	vldr	s14, [r4]
 80067e0:	ee30 0a47 	vsub.f32	s0, s0, s14
 80067e4:	2e00      	cmp	r6, #0
 80067e6:	ee30 0a67 	vsub.f32	s0, s0, s15
 80067ea:	ed84 0a01 	vstr	s0, [r4, #4]
 80067ee:	daa6      	bge.n	800673e <__ieee754_rem_pio2f+0x66>
 80067f0:	eeb1 7a47 	vneg.f32	s14, s14
 80067f4:	eeb1 0a40 	vneg.f32	s0, s0
 80067f8:	ed84 7a00 	vstr	s14, [r4]
 80067fc:	ed84 0a01 	vstr	s0, [r4, #4]
 8006800:	4240      	negs	r0, r0
 8006802:	e79c      	b.n	800673e <__ieee754_rem_pio2f+0x66>
 8006804:	eddf 5a42 	vldr	s11, [pc, #264]	@ 8006910 <__ieee754_rem_pio2f+0x238>
 8006808:	eef0 6a40 	vmov.f32	s13, s0
 800680c:	eee6 6a25 	vfma.f32	s13, s12, s11
 8006810:	ee70 7a66 	vsub.f32	s15, s0, s13
 8006814:	eee6 7a25 	vfma.f32	s15, s12, s11
 8006818:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8006918 <__ieee754_rem_pio2f+0x240>
 800681c:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8006820:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8006824:	ee15 2a90 	vmov	r2, s11
 8006828:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800682c:	1a5b      	subs	r3, r3, r1
 800682e:	2b19      	cmp	r3, #25
 8006830:	dc04      	bgt.n	800683c <__ieee754_rem_pio2f+0x164>
 8006832:	edc4 5a00 	vstr	s11, [r4]
 8006836:	eeb0 0a66 	vmov.f32	s0, s13
 800683a:	e7cf      	b.n	80067dc <__ieee754_rem_pio2f+0x104>
 800683c:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 8006928 <__ieee754_rem_pio2f+0x250>
 8006840:	eeb0 0a66 	vmov.f32	s0, s13
 8006844:	eea6 0a25 	vfma.f32	s0, s12, s11
 8006848:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800684c:	eddf 6a37 	vldr	s13, [pc, #220]	@ 800692c <__ieee754_rem_pio2f+0x254>
 8006850:	eee6 7a25 	vfma.f32	s15, s12, s11
 8006854:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8006858:	ee30 7a67 	vsub.f32	s14, s0, s15
 800685c:	ed84 7a00 	vstr	s14, [r4]
 8006860:	e7bc      	b.n	80067dc <__ieee754_rem_pio2f+0x104>
 8006862:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 8006866:	d306      	bcc.n	8006876 <__ieee754_rem_pio2f+0x19e>
 8006868:	ee70 7a40 	vsub.f32	s15, s0, s0
 800686c:	edc0 7a01 	vstr	s15, [r0, #4]
 8006870:	edc0 7a00 	vstr	s15, [r0]
 8006874:	e73e      	b.n	80066f4 <__ieee754_rem_pio2f+0x1c>
 8006876:	15ea      	asrs	r2, r5, #23
 8006878:	3a86      	subs	r2, #134	@ 0x86
 800687a:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800687e:	ee07 3a90 	vmov	s15, r3
 8006882:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006886:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 8006930 <__ieee754_rem_pio2f+0x258>
 800688a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800688e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006892:	ed8d 7a03 	vstr	s14, [sp, #12]
 8006896:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800689a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800689e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80068a2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80068a6:	ed8d 7a04 	vstr	s14, [sp, #16]
 80068aa:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80068ae:	eef5 7a40 	vcmp.f32	s15, #0.0
 80068b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068b6:	edcd 7a05 	vstr	s15, [sp, #20]
 80068ba:	d11e      	bne.n	80068fa <__ieee754_rem_pio2f+0x222>
 80068bc:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80068c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068c4:	bf0c      	ite	eq
 80068c6:	2301      	moveq	r3, #1
 80068c8:	2302      	movne	r3, #2
 80068ca:	491a      	ldr	r1, [pc, #104]	@ (8006934 <__ieee754_rem_pio2f+0x25c>)
 80068cc:	9101      	str	r1, [sp, #4]
 80068ce:	2102      	movs	r1, #2
 80068d0:	9100      	str	r1, [sp, #0]
 80068d2:	a803      	add	r0, sp, #12
 80068d4:	4621      	mov	r1, r4
 80068d6:	f000 f89d 	bl	8006a14 <__kernel_rem_pio2f>
 80068da:	2e00      	cmp	r6, #0
 80068dc:	f6bf af2f 	bge.w	800673e <__ieee754_rem_pio2f+0x66>
 80068e0:	edd4 7a00 	vldr	s15, [r4]
 80068e4:	eef1 7a67 	vneg.f32	s15, s15
 80068e8:	edc4 7a00 	vstr	s15, [r4]
 80068ec:	edd4 7a01 	vldr	s15, [r4, #4]
 80068f0:	eef1 7a67 	vneg.f32	s15, s15
 80068f4:	edc4 7a01 	vstr	s15, [r4, #4]
 80068f8:	e782      	b.n	8006800 <__ieee754_rem_pio2f+0x128>
 80068fa:	2303      	movs	r3, #3
 80068fc:	e7e5      	b.n	80068ca <__ieee754_rem_pio2f+0x1f2>
 80068fe:	bf00      	nop
 8006900:	3f490fd8 	.word	0x3f490fd8
 8006904:	4016cbe3 	.word	0x4016cbe3
 8006908:	3fc90f80 	.word	0x3fc90f80
 800690c:	3fc90fd0 	.word	0x3fc90fd0
 8006910:	37354400 	.word	0x37354400
 8006914:	37354443 	.word	0x37354443
 8006918:	2e85a308 	.word	0x2e85a308
 800691c:	43490f80 	.word	0x43490f80
 8006920:	3f22f984 	.word	0x3f22f984
 8006924:	080077b8 	.word	0x080077b8
 8006928:	2e85a300 	.word	0x2e85a300
 800692c:	248d3132 	.word	0x248d3132
 8006930:	43800000 	.word	0x43800000
 8006934:	08007838 	.word	0x08007838

08006938 <fabsf>:
 8006938:	ee10 3a10 	vmov	r3, s0
 800693c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006940:	ee00 3a10 	vmov	s0, r3
 8006944:	4770      	bx	lr
	...

08006948 <scalbnf>:
 8006948:	ee10 3a10 	vmov	r3, s0
 800694c:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8006950:	d02b      	beq.n	80069aa <scalbnf+0x62>
 8006952:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8006956:	d302      	bcc.n	800695e <scalbnf+0x16>
 8006958:	ee30 0a00 	vadd.f32	s0, s0, s0
 800695c:	4770      	bx	lr
 800695e:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 8006962:	d123      	bne.n	80069ac <scalbnf+0x64>
 8006964:	4b24      	ldr	r3, [pc, #144]	@ (80069f8 <scalbnf+0xb0>)
 8006966:	eddf 7a25 	vldr	s15, [pc, #148]	@ 80069fc <scalbnf+0xb4>
 800696a:	4298      	cmp	r0, r3
 800696c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8006970:	db17      	blt.n	80069a2 <scalbnf+0x5a>
 8006972:	ee10 3a10 	vmov	r3, s0
 8006976:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800697a:	3a19      	subs	r2, #25
 800697c:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8006980:	4288      	cmp	r0, r1
 8006982:	dd15      	ble.n	80069b0 <scalbnf+0x68>
 8006984:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8006a00 <scalbnf+0xb8>
 8006988:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8006a04 <scalbnf+0xbc>
 800698c:	ee10 3a10 	vmov	r3, s0
 8006990:	eeb0 7a67 	vmov.f32	s14, s15
 8006994:	2b00      	cmp	r3, #0
 8006996:	bfb8      	it	lt
 8006998:	eef0 7a66 	vmovlt.f32	s15, s13
 800699c:	ee27 0a87 	vmul.f32	s0, s15, s14
 80069a0:	4770      	bx	lr
 80069a2:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8006a08 <scalbnf+0xc0>
 80069a6:	ee27 0a80 	vmul.f32	s0, s15, s0
 80069aa:	4770      	bx	lr
 80069ac:	0dd2      	lsrs	r2, r2, #23
 80069ae:	e7e5      	b.n	800697c <scalbnf+0x34>
 80069b0:	4410      	add	r0, r2
 80069b2:	28fe      	cmp	r0, #254	@ 0xfe
 80069b4:	dce6      	bgt.n	8006984 <scalbnf+0x3c>
 80069b6:	2800      	cmp	r0, #0
 80069b8:	dd06      	ble.n	80069c8 <scalbnf+0x80>
 80069ba:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80069be:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 80069c2:	ee00 3a10 	vmov	s0, r3
 80069c6:	4770      	bx	lr
 80069c8:	f110 0f16 	cmn.w	r0, #22
 80069cc:	da09      	bge.n	80069e2 <scalbnf+0x9a>
 80069ce:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8006a08 <scalbnf+0xc0>
 80069d2:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8006a0c <scalbnf+0xc4>
 80069d6:	ee10 3a10 	vmov	r3, s0
 80069da:	eeb0 7a67 	vmov.f32	s14, s15
 80069de:	2b00      	cmp	r3, #0
 80069e0:	e7d9      	b.n	8006996 <scalbnf+0x4e>
 80069e2:	3019      	adds	r0, #25
 80069e4:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80069e8:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 80069ec:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8006a10 <scalbnf+0xc8>
 80069f0:	ee07 3a90 	vmov	s15, r3
 80069f4:	e7d7      	b.n	80069a6 <scalbnf+0x5e>
 80069f6:	bf00      	nop
 80069f8:	ffff3cb0 	.word	0xffff3cb0
 80069fc:	4c000000 	.word	0x4c000000
 8006a00:	7149f2ca 	.word	0x7149f2ca
 8006a04:	f149f2ca 	.word	0xf149f2ca
 8006a08:	0da24260 	.word	0x0da24260
 8006a0c:	8da24260 	.word	0x8da24260
 8006a10:	33000000 	.word	0x33000000

08006a14 <__kernel_rem_pio2f>:
 8006a14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a18:	ed2d 8b04 	vpush	{d8-d9}
 8006a1c:	b0d9      	sub	sp, #356	@ 0x164
 8006a1e:	4690      	mov	r8, r2
 8006a20:	9001      	str	r0, [sp, #4]
 8006a22:	4ab6      	ldr	r2, [pc, #728]	@ (8006cfc <__kernel_rem_pio2f+0x2e8>)
 8006a24:	9866      	ldr	r0, [sp, #408]	@ 0x198
 8006a26:	f118 0f04 	cmn.w	r8, #4
 8006a2a:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 8006a2e:	460f      	mov	r7, r1
 8006a30:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 8006a34:	db26      	blt.n	8006a84 <__kernel_rem_pio2f+0x70>
 8006a36:	f1b8 0203 	subs.w	r2, r8, #3
 8006a3a:	bf48      	it	mi
 8006a3c:	f108 0204 	addmi.w	r2, r8, #4
 8006a40:	10d2      	asrs	r2, r2, #3
 8006a42:	1c55      	adds	r5, r2, #1
 8006a44:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8006a46:	ed9f 7ab1 	vldr	s14, [pc, #708]	@ 8006d0c <__kernel_rem_pio2f+0x2f8>
 8006a4a:	00e8      	lsls	r0, r5, #3
 8006a4c:	eba2 060b 	sub.w	r6, r2, fp
 8006a50:	9002      	str	r0, [sp, #8]
 8006a52:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 8006a56:	eb0a 0c0b 	add.w	ip, sl, fp
 8006a5a:	ac1c      	add	r4, sp, #112	@ 0x70
 8006a5c:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 8006a60:	2000      	movs	r0, #0
 8006a62:	4560      	cmp	r0, ip
 8006a64:	dd10      	ble.n	8006a88 <__kernel_rem_pio2f+0x74>
 8006a66:	a91c      	add	r1, sp, #112	@ 0x70
 8006a68:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 8006a6c:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 8006a70:	2600      	movs	r6, #0
 8006a72:	4556      	cmp	r6, sl
 8006a74:	dc24      	bgt.n	8006ac0 <__kernel_rem_pio2f+0xac>
 8006a76:	f8dd e004 	ldr.w	lr, [sp, #4]
 8006a7a:	eddf 7aa4 	vldr	s15, [pc, #656]	@ 8006d0c <__kernel_rem_pio2f+0x2f8>
 8006a7e:	4684      	mov	ip, r0
 8006a80:	2400      	movs	r4, #0
 8006a82:	e016      	b.n	8006ab2 <__kernel_rem_pio2f+0x9e>
 8006a84:	2200      	movs	r2, #0
 8006a86:	e7dc      	b.n	8006a42 <__kernel_rem_pio2f+0x2e>
 8006a88:	42c6      	cmn	r6, r0
 8006a8a:	bf5d      	ittte	pl
 8006a8c:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 8006a90:	ee07 1a90 	vmovpl	s15, r1
 8006a94:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8006a98:	eef0 7a47 	vmovmi.f32	s15, s14
 8006a9c:	ece4 7a01 	vstmia	r4!, {s15}
 8006aa0:	3001      	adds	r0, #1
 8006aa2:	e7de      	b.n	8006a62 <__kernel_rem_pio2f+0x4e>
 8006aa4:	ecfe 6a01 	vldmia	lr!, {s13}
 8006aa8:	ed3c 7a01 	vldmdb	ip!, {s14}
 8006aac:	eee6 7a87 	vfma.f32	s15, s13, s14
 8006ab0:	3401      	adds	r4, #1
 8006ab2:	455c      	cmp	r4, fp
 8006ab4:	ddf6      	ble.n	8006aa4 <__kernel_rem_pio2f+0x90>
 8006ab6:	ece9 7a01 	vstmia	r9!, {s15}
 8006aba:	3601      	adds	r6, #1
 8006abc:	3004      	adds	r0, #4
 8006abe:	e7d8      	b.n	8006a72 <__kernel_rem_pio2f+0x5e>
 8006ac0:	a908      	add	r1, sp, #32
 8006ac2:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006ac6:	9104      	str	r1, [sp, #16]
 8006ac8:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8006aca:	eddf 8a8f 	vldr	s17, [pc, #572]	@ 8006d08 <__kernel_rem_pio2f+0x2f4>
 8006ace:	ed9f 9a8d 	vldr	s18, [pc, #564]	@ 8006d04 <__kernel_rem_pio2f+0x2f0>
 8006ad2:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8006ad6:	9203      	str	r2, [sp, #12]
 8006ad8:	4654      	mov	r4, sl
 8006ada:	00a2      	lsls	r2, r4, #2
 8006adc:	9205      	str	r2, [sp, #20]
 8006ade:	aa58      	add	r2, sp, #352	@ 0x160
 8006ae0:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8006ae4:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 8006ae8:	a944      	add	r1, sp, #272	@ 0x110
 8006aea:	aa08      	add	r2, sp, #32
 8006aec:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 8006af0:	4694      	mov	ip, r2
 8006af2:	4626      	mov	r6, r4
 8006af4:	2e00      	cmp	r6, #0
 8006af6:	dc4c      	bgt.n	8006b92 <__kernel_rem_pio2f+0x17e>
 8006af8:	4628      	mov	r0, r5
 8006afa:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006afe:	f7ff ff23 	bl	8006948 <scalbnf>
 8006b02:	eeb0 8a40 	vmov.f32	s16, s0
 8006b06:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 8006b0a:	ee28 0a00 	vmul.f32	s0, s16, s0
 8006b0e:	f000 f9e9 	bl	8006ee4 <floorf>
 8006b12:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 8006b16:	eea0 8a67 	vfms.f32	s16, s0, s15
 8006b1a:	2d00      	cmp	r5, #0
 8006b1c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006b20:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8006b24:	ee17 9a90 	vmov	r9, s15
 8006b28:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006b2c:	ee38 8a67 	vsub.f32	s16, s16, s15
 8006b30:	dd41      	ble.n	8006bb6 <__kernel_rem_pio2f+0x1a2>
 8006b32:	f104 3cff 	add.w	ip, r4, #4294967295	@ 0xffffffff
 8006b36:	a908      	add	r1, sp, #32
 8006b38:	f1c5 0e08 	rsb	lr, r5, #8
 8006b3c:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 8006b40:	fa46 f00e 	asr.w	r0, r6, lr
 8006b44:	4481      	add	r9, r0
 8006b46:	fa00 f00e 	lsl.w	r0, r0, lr
 8006b4a:	1a36      	subs	r6, r6, r0
 8006b4c:	f1c5 0007 	rsb	r0, r5, #7
 8006b50:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 8006b54:	4106      	asrs	r6, r0
 8006b56:	2e00      	cmp	r6, #0
 8006b58:	dd3c      	ble.n	8006bd4 <__kernel_rem_pio2f+0x1c0>
 8006b5a:	f04f 0e00 	mov.w	lr, #0
 8006b5e:	f109 0901 	add.w	r9, r9, #1
 8006b62:	4670      	mov	r0, lr
 8006b64:	4574      	cmp	r4, lr
 8006b66:	dc68      	bgt.n	8006c3a <__kernel_rem_pio2f+0x226>
 8006b68:	2d00      	cmp	r5, #0
 8006b6a:	dd03      	ble.n	8006b74 <__kernel_rem_pio2f+0x160>
 8006b6c:	2d01      	cmp	r5, #1
 8006b6e:	d074      	beq.n	8006c5a <__kernel_rem_pio2f+0x246>
 8006b70:	2d02      	cmp	r5, #2
 8006b72:	d07d      	beq.n	8006c70 <__kernel_rem_pio2f+0x25c>
 8006b74:	2e02      	cmp	r6, #2
 8006b76:	d12d      	bne.n	8006bd4 <__kernel_rem_pio2f+0x1c0>
 8006b78:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8006b7c:	ee30 8a48 	vsub.f32	s16, s0, s16
 8006b80:	b340      	cbz	r0, 8006bd4 <__kernel_rem_pio2f+0x1c0>
 8006b82:	4628      	mov	r0, r5
 8006b84:	9306      	str	r3, [sp, #24]
 8006b86:	f7ff fedf 	bl	8006948 <scalbnf>
 8006b8a:	9b06      	ldr	r3, [sp, #24]
 8006b8c:	ee38 8a40 	vsub.f32	s16, s16, s0
 8006b90:	e020      	b.n	8006bd4 <__kernel_rem_pio2f+0x1c0>
 8006b92:	ee60 7a28 	vmul.f32	s15, s0, s17
 8006b96:	3e01      	subs	r6, #1
 8006b98:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006b9c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006ba0:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8006ba4:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8006ba8:	ecac 0a01 	vstmia	ip!, {s0}
 8006bac:	ed30 0a01 	vldmdb	r0!, {s0}
 8006bb0:	ee37 0a80 	vadd.f32	s0, s15, s0
 8006bb4:	e79e      	b.n	8006af4 <__kernel_rem_pio2f+0xe0>
 8006bb6:	d105      	bne.n	8006bc4 <__kernel_rem_pio2f+0x1b0>
 8006bb8:	1e60      	subs	r0, r4, #1
 8006bba:	a908      	add	r1, sp, #32
 8006bbc:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 8006bc0:	11f6      	asrs	r6, r6, #7
 8006bc2:	e7c8      	b.n	8006b56 <__kernel_rem_pio2f+0x142>
 8006bc4:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8006bc8:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8006bcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006bd0:	da31      	bge.n	8006c36 <__kernel_rem_pio2f+0x222>
 8006bd2:	2600      	movs	r6, #0
 8006bd4:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8006bd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006bdc:	f040 8098 	bne.w	8006d10 <__kernel_rem_pio2f+0x2fc>
 8006be0:	1e60      	subs	r0, r4, #1
 8006be2:	2200      	movs	r2, #0
 8006be4:	4550      	cmp	r0, sl
 8006be6:	da4b      	bge.n	8006c80 <__kernel_rem_pio2f+0x26c>
 8006be8:	2a00      	cmp	r2, #0
 8006bea:	d065      	beq.n	8006cb8 <__kernel_rem_pio2f+0x2a4>
 8006bec:	3c01      	subs	r4, #1
 8006bee:	ab08      	add	r3, sp, #32
 8006bf0:	3d08      	subs	r5, #8
 8006bf2:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d0f8      	beq.n	8006bec <__kernel_rem_pio2f+0x1d8>
 8006bfa:	4628      	mov	r0, r5
 8006bfc:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8006c00:	f7ff fea2 	bl	8006948 <scalbnf>
 8006c04:	1c63      	adds	r3, r4, #1
 8006c06:	aa44      	add	r2, sp, #272	@ 0x110
 8006c08:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8006d08 <__kernel_rem_pio2f+0x2f4>
 8006c0c:	0099      	lsls	r1, r3, #2
 8006c0e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8006c12:	4623      	mov	r3, r4
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	f280 80a9 	bge.w	8006d6c <__kernel_rem_pio2f+0x358>
 8006c1a:	4623      	mov	r3, r4
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	f2c0 80c7 	blt.w	8006db0 <__kernel_rem_pio2f+0x39c>
 8006c22:	aa44      	add	r2, sp, #272	@ 0x110
 8006c24:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8006c28:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 8006d00 <__kernel_rem_pio2f+0x2ec>
 8006c2c:	eddf 7a37 	vldr	s15, [pc, #220]	@ 8006d0c <__kernel_rem_pio2f+0x2f8>
 8006c30:	2000      	movs	r0, #0
 8006c32:	1ae2      	subs	r2, r4, r3
 8006c34:	e0b1      	b.n	8006d9a <__kernel_rem_pio2f+0x386>
 8006c36:	2602      	movs	r6, #2
 8006c38:	e78f      	b.n	8006b5a <__kernel_rem_pio2f+0x146>
 8006c3a:	f852 1b04 	ldr.w	r1, [r2], #4
 8006c3e:	b948      	cbnz	r0, 8006c54 <__kernel_rem_pio2f+0x240>
 8006c40:	b121      	cbz	r1, 8006c4c <__kernel_rem_pio2f+0x238>
 8006c42:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 8006c46:	f842 1c04 	str.w	r1, [r2, #-4]
 8006c4a:	2101      	movs	r1, #1
 8006c4c:	f10e 0e01 	add.w	lr, lr, #1
 8006c50:	4608      	mov	r0, r1
 8006c52:	e787      	b.n	8006b64 <__kernel_rem_pio2f+0x150>
 8006c54:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 8006c58:	e7f5      	b.n	8006c46 <__kernel_rem_pio2f+0x232>
 8006c5a:	f104 3cff 	add.w	ip, r4, #4294967295	@ 0xffffffff
 8006c5e:	aa08      	add	r2, sp, #32
 8006c60:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8006c64:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006c68:	a908      	add	r1, sp, #32
 8006c6a:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 8006c6e:	e781      	b.n	8006b74 <__kernel_rem_pio2f+0x160>
 8006c70:	f104 3cff 	add.w	ip, r4, #4294967295	@ 0xffffffff
 8006c74:	aa08      	add	r2, sp, #32
 8006c76:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8006c7a:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8006c7e:	e7f3      	b.n	8006c68 <__kernel_rem_pio2f+0x254>
 8006c80:	a908      	add	r1, sp, #32
 8006c82:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8006c86:	3801      	subs	r0, #1
 8006c88:	430a      	orrs	r2, r1
 8006c8a:	e7ab      	b.n	8006be4 <__kernel_rem_pio2f+0x1d0>
 8006c8c:	3201      	adds	r2, #1
 8006c8e:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 8006c92:	2e00      	cmp	r6, #0
 8006c94:	d0fa      	beq.n	8006c8c <__kernel_rem_pio2f+0x278>
 8006c96:	9905      	ldr	r1, [sp, #20]
 8006c98:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 8006c9c:	eb0d 0001 	add.w	r0, sp, r1
 8006ca0:	18e6      	adds	r6, r4, r3
 8006ca2:	a91c      	add	r1, sp, #112	@ 0x70
 8006ca4:	f104 0c01 	add.w	ip, r4, #1
 8006ca8:	384c      	subs	r0, #76	@ 0x4c
 8006caa:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 8006cae:	4422      	add	r2, r4
 8006cb0:	4562      	cmp	r2, ip
 8006cb2:	da04      	bge.n	8006cbe <__kernel_rem_pio2f+0x2aa>
 8006cb4:	4614      	mov	r4, r2
 8006cb6:	e710      	b.n	8006ada <__kernel_rem_pio2f+0xc6>
 8006cb8:	9804      	ldr	r0, [sp, #16]
 8006cba:	2201      	movs	r2, #1
 8006cbc:	e7e7      	b.n	8006c8e <__kernel_rem_pio2f+0x27a>
 8006cbe:	9903      	ldr	r1, [sp, #12]
 8006cc0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8006cc4:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 8006cc8:	9105      	str	r1, [sp, #20]
 8006cca:	ee07 1a90 	vmov	s15, r1
 8006cce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006cd2:	2400      	movs	r4, #0
 8006cd4:	ece6 7a01 	vstmia	r6!, {s15}
 8006cd8:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 8006d0c <__kernel_rem_pio2f+0x2f8>
 8006cdc:	46b1      	mov	r9, r6
 8006cde:	455c      	cmp	r4, fp
 8006ce0:	dd04      	ble.n	8006cec <__kernel_rem_pio2f+0x2d8>
 8006ce2:	ece0 7a01 	vstmia	r0!, {s15}
 8006ce6:	f10c 0c01 	add.w	ip, ip, #1
 8006cea:	e7e1      	b.n	8006cb0 <__kernel_rem_pio2f+0x29c>
 8006cec:	ecfe 6a01 	vldmia	lr!, {s13}
 8006cf0:	ed39 7a01 	vldmdb	r9!, {s14}
 8006cf4:	3401      	adds	r4, #1
 8006cf6:	eee6 7a87 	vfma.f32	s15, s13, s14
 8006cfa:	e7f0      	b.n	8006cde <__kernel_rem_pio2f+0x2ca>
 8006cfc:	08007b7c 	.word	0x08007b7c
 8006d00:	08007b50 	.word	0x08007b50
 8006d04:	43800000 	.word	0x43800000
 8006d08:	3b800000 	.word	0x3b800000
 8006d0c:	00000000 	.word	0x00000000
 8006d10:	9b02      	ldr	r3, [sp, #8]
 8006d12:	eeb0 0a48 	vmov.f32	s0, s16
 8006d16:	eba3 0008 	sub.w	r0, r3, r8
 8006d1a:	f7ff fe15 	bl	8006948 <scalbnf>
 8006d1e:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 8006d04 <__kernel_rem_pio2f+0x2f0>
 8006d22:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8006d26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d2a:	db19      	blt.n	8006d60 <__kernel_rem_pio2f+0x34c>
 8006d2c:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 8006d08 <__kernel_rem_pio2f+0x2f4>
 8006d30:	ee60 7a27 	vmul.f32	s15, s0, s15
 8006d34:	aa08      	add	r2, sp, #32
 8006d36:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006d3a:	3508      	adds	r5, #8
 8006d3c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006d40:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8006d44:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006d48:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8006d4c:	ee10 3a10 	vmov	r3, s0
 8006d50:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8006d54:	ee17 3a90 	vmov	r3, s15
 8006d58:	3401      	adds	r4, #1
 8006d5a:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8006d5e:	e74c      	b.n	8006bfa <__kernel_rem_pio2f+0x1e6>
 8006d60:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8006d64:	aa08      	add	r2, sp, #32
 8006d66:	ee10 3a10 	vmov	r3, s0
 8006d6a:	e7f6      	b.n	8006d5a <__kernel_rem_pio2f+0x346>
 8006d6c:	a808      	add	r0, sp, #32
 8006d6e:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8006d72:	9001      	str	r0, [sp, #4]
 8006d74:	ee07 0a90 	vmov	s15, r0
 8006d78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006d7c:	3b01      	subs	r3, #1
 8006d7e:	ee67 7a80 	vmul.f32	s15, s15, s0
 8006d82:	ee20 0a07 	vmul.f32	s0, s0, s14
 8006d86:	ed62 7a01 	vstmdb	r2!, {s15}
 8006d8a:	e743      	b.n	8006c14 <__kernel_rem_pio2f+0x200>
 8006d8c:	ecfc 6a01 	vldmia	ip!, {s13}
 8006d90:	ecb5 7a01 	vldmia	r5!, {s14}
 8006d94:	eee6 7a87 	vfma.f32	s15, s13, s14
 8006d98:	3001      	adds	r0, #1
 8006d9a:	4550      	cmp	r0, sl
 8006d9c:	dc01      	bgt.n	8006da2 <__kernel_rem_pio2f+0x38e>
 8006d9e:	4290      	cmp	r0, r2
 8006da0:	ddf4      	ble.n	8006d8c <__kernel_rem_pio2f+0x378>
 8006da2:	a858      	add	r0, sp, #352	@ 0x160
 8006da4:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8006da8:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 8006dac:	3b01      	subs	r3, #1
 8006dae:	e735      	b.n	8006c1c <__kernel_rem_pio2f+0x208>
 8006db0:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8006db2:	2b02      	cmp	r3, #2
 8006db4:	dc09      	bgt.n	8006dca <__kernel_rem_pio2f+0x3b6>
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	dc27      	bgt.n	8006e0a <__kernel_rem_pio2f+0x3f6>
 8006dba:	d040      	beq.n	8006e3e <__kernel_rem_pio2f+0x42a>
 8006dbc:	f009 0007 	and.w	r0, r9, #7
 8006dc0:	b059      	add	sp, #356	@ 0x164
 8006dc2:	ecbd 8b04 	vpop	{d8-d9}
 8006dc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006dca:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8006dcc:	2b03      	cmp	r3, #3
 8006dce:	d1f5      	bne.n	8006dbc <__kernel_rem_pio2f+0x3a8>
 8006dd0:	aa30      	add	r2, sp, #192	@ 0xc0
 8006dd2:	1f0b      	subs	r3, r1, #4
 8006dd4:	4413      	add	r3, r2
 8006dd6:	461a      	mov	r2, r3
 8006dd8:	4620      	mov	r0, r4
 8006dda:	2800      	cmp	r0, #0
 8006ddc:	dc50      	bgt.n	8006e80 <__kernel_rem_pio2f+0x46c>
 8006dde:	4622      	mov	r2, r4
 8006de0:	2a01      	cmp	r2, #1
 8006de2:	dc5d      	bgt.n	8006ea0 <__kernel_rem_pio2f+0x48c>
 8006de4:	ab30      	add	r3, sp, #192	@ 0xc0
 8006de6:	ed5f 7a37 	vldr	s15, [pc, #-220]	@ 8006d0c <__kernel_rem_pio2f+0x2f8>
 8006dea:	440b      	add	r3, r1
 8006dec:	2c01      	cmp	r4, #1
 8006dee:	dc67      	bgt.n	8006ec0 <__kernel_rem_pio2f+0x4ac>
 8006df0:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 8006df4:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 8006df8:	2e00      	cmp	r6, #0
 8006dfa:	d167      	bne.n	8006ecc <__kernel_rem_pio2f+0x4b8>
 8006dfc:	edc7 6a00 	vstr	s13, [r7]
 8006e00:	ed87 7a01 	vstr	s14, [r7, #4]
 8006e04:	edc7 7a02 	vstr	s15, [r7, #8]
 8006e08:	e7d8      	b.n	8006dbc <__kernel_rem_pio2f+0x3a8>
 8006e0a:	ab30      	add	r3, sp, #192	@ 0xc0
 8006e0c:	ed1f 7a41 	vldr	s14, [pc, #-260]	@ 8006d0c <__kernel_rem_pio2f+0x2f8>
 8006e10:	440b      	add	r3, r1
 8006e12:	4622      	mov	r2, r4
 8006e14:	2a00      	cmp	r2, #0
 8006e16:	da24      	bge.n	8006e62 <__kernel_rem_pio2f+0x44e>
 8006e18:	b34e      	cbz	r6, 8006e6e <__kernel_rem_pio2f+0x45a>
 8006e1a:	eef1 7a47 	vneg.f32	s15, s14
 8006e1e:	edc7 7a00 	vstr	s15, [r7]
 8006e22:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 8006e26:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006e2a:	aa31      	add	r2, sp, #196	@ 0xc4
 8006e2c:	2301      	movs	r3, #1
 8006e2e:	429c      	cmp	r4, r3
 8006e30:	da20      	bge.n	8006e74 <__kernel_rem_pio2f+0x460>
 8006e32:	b10e      	cbz	r6, 8006e38 <__kernel_rem_pio2f+0x424>
 8006e34:	eef1 7a67 	vneg.f32	s15, s15
 8006e38:	edc7 7a01 	vstr	s15, [r7, #4]
 8006e3c:	e7be      	b.n	8006dbc <__kernel_rem_pio2f+0x3a8>
 8006e3e:	ab30      	add	r3, sp, #192	@ 0xc0
 8006e40:	ed5f 7a4e 	vldr	s15, [pc, #-312]	@ 8006d0c <__kernel_rem_pio2f+0x2f8>
 8006e44:	440b      	add	r3, r1
 8006e46:	2c00      	cmp	r4, #0
 8006e48:	da05      	bge.n	8006e56 <__kernel_rem_pio2f+0x442>
 8006e4a:	b10e      	cbz	r6, 8006e50 <__kernel_rem_pio2f+0x43c>
 8006e4c:	eef1 7a67 	vneg.f32	s15, s15
 8006e50:	edc7 7a00 	vstr	s15, [r7]
 8006e54:	e7b2      	b.n	8006dbc <__kernel_rem_pio2f+0x3a8>
 8006e56:	ed33 7a01 	vldmdb	r3!, {s14}
 8006e5a:	3c01      	subs	r4, #1
 8006e5c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006e60:	e7f1      	b.n	8006e46 <__kernel_rem_pio2f+0x432>
 8006e62:	ed73 7a01 	vldmdb	r3!, {s15}
 8006e66:	3a01      	subs	r2, #1
 8006e68:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006e6c:	e7d2      	b.n	8006e14 <__kernel_rem_pio2f+0x400>
 8006e6e:	eef0 7a47 	vmov.f32	s15, s14
 8006e72:	e7d4      	b.n	8006e1e <__kernel_rem_pio2f+0x40a>
 8006e74:	ecb2 7a01 	vldmia	r2!, {s14}
 8006e78:	3301      	adds	r3, #1
 8006e7a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006e7e:	e7d6      	b.n	8006e2e <__kernel_rem_pio2f+0x41a>
 8006e80:	ed72 7a01 	vldmdb	r2!, {s15}
 8006e84:	edd2 6a01 	vldr	s13, [r2, #4]
 8006e88:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8006e8c:	3801      	subs	r0, #1
 8006e8e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006e92:	ed82 7a00 	vstr	s14, [r2]
 8006e96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e9a:	edc2 7a01 	vstr	s15, [r2, #4]
 8006e9e:	e79c      	b.n	8006dda <__kernel_rem_pio2f+0x3c6>
 8006ea0:	ed73 7a01 	vldmdb	r3!, {s15}
 8006ea4:	edd3 6a01 	vldr	s13, [r3, #4]
 8006ea8:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8006eac:	3a01      	subs	r2, #1
 8006eae:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006eb2:	ed83 7a00 	vstr	s14, [r3]
 8006eb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006eba:	edc3 7a01 	vstr	s15, [r3, #4]
 8006ebe:	e78f      	b.n	8006de0 <__kernel_rem_pio2f+0x3cc>
 8006ec0:	ed33 7a01 	vldmdb	r3!, {s14}
 8006ec4:	3c01      	subs	r4, #1
 8006ec6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006eca:	e78f      	b.n	8006dec <__kernel_rem_pio2f+0x3d8>
 8006ecc:	eef1 6a66 	vneg.f32	s13, s13
 8006ed0:	eeb1 7a47 	vneg.f32	s14, s14
 8006ed4:	edc7 6a00 	vstr	s13, [r7]
 8006ed8:	ed87 7a01 	vstr	s14, [r7, #4]
 8006edc:	eef1 7a67 	vneg.f32	s15, s15
 8006ee0:	e790      	b.n	8006e04 <__kernel_rem_pio2f+0x3f0>
 8006ee2:	bf00      	nop

08006ee4 <floorf>:
 8006ee4:	ee10 3a10 	vmov	r3, s0
 8006ee8:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8006eec:	3a7f      	subs	r2, #127	@ 0x7f
 8006eee:	2a16      	cmp	r2, #22
 8006ef0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006ef4:	dc2b      	bgt.n	8006f4e <floorf+0x6a>
 8006ef6:	2a00      	cmp	r2, #0
 8006ef8:	da12      	bge.n	8006f20 <floorf+0x3c>
 8006efa:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8006f60 <floorf+0x7c>
 8006efe:	ee30 0a27 	vadd.f32	s0, s0, s15
 8006f02:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8006f06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f0a:	dd06      	ble.n	8006f1a <floorf+0x36>
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	da24      	bge.n	8006f5a <floorf+0x76>
 8006f10:	2900      	cmp	r1, #0
 8006f12:	4b14      	ldr	r3, [pc, #80]	@ (8006f64 <floorf+0x80>)
 8006f14:	bf08      	it	eq
 8006f16:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 8006f1a:	ee00 3a10 	vmov	s0, r3
 8006f1e:	4770      	bx	lr
 8006f20:	4911      	ldr	r1, [pc, #68]	@ (8006f68 <floorf+0x84>)
 8006f22:	4111      	asrs	r1, r2
 8006f24:	420b      	tst	r3, r1
 8006f26:	d0fa      	beq.n	8006f1e <floorf+0x3a>
 8006f28:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 8006f60 <floorf+0x7c>
 8006f2c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8006f30:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8006f34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f38:	ddef      	ble.n	8006f1a <floorf+0x36>
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	bfbe      	ittt	lt
 8006f3e:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 8006f42:	fa40 f202 	asrlt.w	r2, r0, r2
 8006f46:	189b      	addlt	r3, r3, r2
 8006f48:	ea23 0301 	bic.w	r3, r3, r1
 8006f4c:	e7e5      	b.n	8006f1a <floorf+0x36>
 8006f4e:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8006f52:	d3e4      	bcc.n	8006f1e <floorf+0x3a>
 8006f54:	ee30 0a00 	vadd.f32	s0, s0, s0
 8006f58:	4770      	bx	lr
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	e7dd      	b.n	8006f1a <floorf+0x36>
 8006f5e:	bf00      	nop
 8006f60:	7149f2ca 	.word	0x7149f2ca
 8006f64:	bf800000 	.word	0xbf800000
 8006f68:	007fffff 	.word	0x007fffff

08006f6c <_init>:
 8006f6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f6e:	bf00      	nop
 8006f70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f72:	bc08      	pop	{r3}
 8006f74:	469e      	mov	lr, r3
 8006f76:	4770      	bx	lr

08006f78 <_fini>:
 8006f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f7a:	bf00      	nop
 8006f7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f7e:	bc08      	pop	{r3}
 8006f80:	469e      	mov	lr, r3
 8006f82:	4770      	bx	lr
