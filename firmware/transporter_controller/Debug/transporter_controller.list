
transporter_controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001d294  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001c4c  0801d478  0801d478  0001e478  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801f0c4  0801f0c4  00021488  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0801f0c4  0801f0c4  000200c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801f0cc  0801f0cc  00021488  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  0801f0cc  0801f0cc  000200cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801f0d8  0801f0d8  000200d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000488  20000000  0801f0dc  00021000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000b374  20000488  0801f564  00021488  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000b7fc  0801f564  000217fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00021488  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002b918  00000000  00000000  000214b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000609d  00000000  00000000  0004cdd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001e50  00000000  00000000  00052e70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001725  00000000  00000000  00054cc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002f6f6  00000000  00000000  000563e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002980e  00000000  00000000  00085adb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00117491  00000000  00000000  000af2e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000076  00000000  00000000  001c677a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008fd8  00000000  00000000  001c67f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  001cf7c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000488 	.word	0x20000488
 80001fc:	00000000 	.word	0x00000000
 8000200:	0801d45c 	.word	0x0801d45c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000048c 	.word	0x2000048c
 800021c:	0801d45c 	.word	0x0801d45c

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr

08000234 <strlen>:
 8000234:	4603      	mov	r3, r0
 8000236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023a:	2a00      	cmp	r2, #0
 800023c:	d1fb      	bne.n	8000236 <strlen+0x2>
 800023e:	1a18      	subs	r0, r3, r0
 8000240:	3801      	subs	r0, #1
 8000242:	4770      	bx	lr
	...

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	@ 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_dmul>:
 8000668:	b570      	push	{r4, r5, r6, lr}
 800066a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800066e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000672:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000676:	bf1d      	ittte	ne
 8000678:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800067c:	ea94 0f0c 	teqne	r4, ip
 8000680:	ea95 0f0c 	teqne	r5, ip
 8000684:	f000 f8de 	bleq	8000844 <__aeabi_dmul+0x1dc>
 8000688:	442c      	add	r4, r5
 800068a:	ea81 0603 	eor.w	r6, r1, r3
 800068e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000692:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000696:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800069a:	bf18      	it	ne
 800069c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006a0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006a4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80006a8:	d038      	beq.n	800071c <__aeabi_dmul+0xb4>
 80006aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80006ae:	f04f 0500 	mov.w	r5, #0
 80006b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006b6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006be:	f04f 0600 	mov.w	r6, #0
 80006c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006c6:	f09c 0f00 	teq	ip, #0
 80006ca:	bf18      	it	ne
 80006cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006d0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006d4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006d8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006dc:	d204      	bcs.n	80006e8 <__aeabi_dmul+0x80>
 80006de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006e2:	416d      	adcs	r5, r5
 80006e4:	eb46 0606 	adc.w	r6, r6, r6
 80006e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006fc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000700:	bf88      	it	hi
 8000702:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000706:	d81e      	bhi.n	8000746 <__aeabi_dmul+0xde>
 8000708:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800070c:	bf08      	it	eq
 800070e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000712:	f150 0000 	adcs.w	r0, r0, #0
 8000716:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000720:	ea46 0101 	orr.w	r1, r6, r1
 8000724:	ea40 0002 	orr.w	r0, r0, r2
 8000728:	ea81 0103 	eor.w	r1, r1, r3
 800072c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000730:	bfc2      	ittt	gt
 8000732:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000736:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800073a:	bd70      	popgt	{r4, r5, r6, pc}
 800073c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000740:	f04f 0e00 	mov.w	lr, #0
 8000744:	3c01      	subs	r4, #1
 8000746:	f300 80ab 	bgt.w	80008a0 <__aeabi_dmul+0x238>
 800074a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800074e:	bfde      	ittt	le
 8000750:	2000      	movle	r0, #0
 8000752:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000756:	bd70      	pople	{r4, r5, r6, pc}
 8000758:	f1c4 0400 	rsb	r4, r4, #0
 800075c:	3c20      	subs	r4, #32
 800075e:	da35      	bge.n	80007cc <__aeabi_dmul+0x164>
 8000760:	340c      	adds	r4, #12
 8000762:	dc1b      	bgt.n	800079c <__aeabi_dmul+0x134>
 8000764:	f104 0414 	add.w	r4, r4, #20
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f305 	lsl.w	r3, r0, r5
 8000770:	fa20 f004 	lsr.w	r0, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000780:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000784:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000788:	fa21 f604 	lsr.w	r6, r1, r4
 800078c:	eb42 0106 	adc.w	r1, r2, r6
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 040c 	rsb	r4, r4, #12
 80007a0:	f1c4 0520 	rsb	r5, r4, #32
 80007a4:	fa00 f304 	lsl.w	r3, r0, r4
 80007a8:	fa20 f005 	lsr.w	r0, r0, r5
 80007ac:	fa01 f204 	lsl.w	r2, r1, r4
 80007b0:	ea40 0002 	orr.w	r0, r0, r2
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007bc:	f141 0100 	adc.w	r1, r1, #0
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f1c4 0520 	rsb	r5, r4, #32
 80007d0:	fa00 f205 	lsl.w	r2, r0, r5
 80007d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007d8:	fa20 f304 	lsr.w	r3, r0, r4
 80007dc:	fa01 f205 	lsl.w	r2, r1, r5
 80007e0:	ea43 0302 	orr.w	r3, r3, r2
 80007e4:	fa21 f004 	lsr.w	r0, r1, r4
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ec:	fa21 f204 	lsr.w	r2, r1, r4
 80007f0:	ea20 0002 	bic.w	r0, r0, r2
 80007f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007fc:	bf08      	it	eq
 80007fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000802:	bd70      	pop	{r4, r5, r6, pc}
 8000804:	f094 0f00 	teq	r4, #0
 8000808:	d10f      	bne.n	800082a <__aeabi_dmul+0x1c2>
 800080a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800080e:	0040      	lsls	r0, r0, #1
 8000810:	eb41 0101 	adc.w	r1, r1, r1
 8000814:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3c01      	subeq	r4, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1a6>
 800081e:	ea41 0106 	orr.w	r1, r1, r6
 8000822:	f095 0f00 	teq	r5, #0
 8000826:	bf18      	it	ne
 8000828:	4770      	bxne	lr
 800082a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800082e:	0052      	lsls	r2, r2, #1
 8000830:	eb43 0303 	adc.w	r3, r3, r3
 8000834:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000838:	bf08      	it	eq
 800083a:	3d01      	subeq	r5, #1
 800083c:	d0f7      	beq.n	800082e <__aeabi_dmul+0x1c6>
 800083e:	ea43 0306 	orr.w	r3, r3, r6
 8000842:	4770      	bx	lr
 8000844:	ea94 0f0c 	teq	r4, ip
 8000848:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800084c:	bf18      	it	ne
 800084e:	ea95 0f0c 	teqne	r5, ip
 8000852:	d00c      	beq.n	800086e <__aeabi_dmul+0x206>
 8000854:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000858:	bf18      	it	ne
 800085a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085e:	d1d1      	bne.n	8000804 <__aeabi_dmul+0x19c>
 8000860:	ea81 0103 	eor.w	r1, r1, r3
 8000864:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000868:	f04f 0000 	mov.w	r0, #0
 800086c:	bd70      	pop	{r4, r5, r6, pc}
 800086e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000872:	bf06      	itte	eq
 8000874:	4610      	moveq	r0, r2
 8000876:	4619      	moveq	r1, r3
 8000878:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800087c:	d019      	beq.n	80008b2 <__aeabi_dmul+0x24a>
 800087e:	ea94 0f0c 	teq	r4, ip
 8000882:	d102      	bne.n	800088a <__aeabi_dmul+0x222>
 8000884:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000888:	d113      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800088a:	ea95 0f0c 	teq	r5, ip
 800088e:	d105      	bne.n	800089c <__aeabi_dmul+0x234>
 8000890:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000894:	bf1c      	itt	ne
 8000896:	4610      	movne	r0, r2
 8000898:	4619      	movne	r1, r3
 800089a:	d10a      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800089c:	ea81 0103 	eor.w	r1, r1, r3
 80008a0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80008a4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008a8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80008ac:	f04f 0000 	mov.w	r0, #0
 80008b0:	bd70      	pop	{r4, r5, r6, pc}
 80008b2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008b6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008ba:	bd70      	pop	{r4, r5, r6, pc}

080008bc <__aeabi_ddiv>:
 80008bc:	b570      	push	{r4, r5, r6, lr}
 80008be:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008c2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ca:	bf1d      	ittte	ne
 80008cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008d0:	ea94 0f0c 	teqne	r4, ip
 80008d4:	ea95 0f0c 	teqne	r5, ip
 80008d8:	f000 f8a7 	bleq	8000a2a <__aeabi_ddiv+0x16e>
 80008dc:	eba4 0405 	sub.w	r4, r4, r5
 80008e0:	ea81 0e03 	eor.w	lr, r1, r3
 80008e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ec:	f000 8088 	beq.w	8000a00 <__aeabi_ddiv+0x144>
 80008f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008f4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000900:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000904:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000908:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800090c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000910:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000914:	429d      	cmp	r5, r3
 8000916:	bf08      	it	eq
 8000918:	4296      	cmpeq	r6, r2
 800091a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800091e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000922:	d202      	bcs.n	800092a <__aeabi_ddiv+0x6e>
 8000924:	085b      	lsrs	r3, r3, #1
 8000926:	ea4f 0232 	mov.w	r2, r2, rrx
 800092a:	1ab6      	subs	r6, r6, r2
 800092c:	eb65 0503 	sbc.w	r5, r5, r3
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800093a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000968:	085b      	lsrs	r3, r3, #1
 800096a:	ea4f 0232 	mov.w	r2, r2, rrx
 800096e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000972:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000976:	bf22      	ittt	cs
 8000978:	1ab6      	subcs	r6, r6, r2
 800097a:	4675      	movcs	r5, lr
 800097c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000980:	085b      	lsrs	r3, r3, #1
 8000982:	ea4f 0232 	mov.w	r2, r2, rrx
 8000986:	ebb6 0e02 	subs.w	lr, r6, r2
 800098a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800098e:	bf22      	ittt	cs
 8000990:	1ab6      	subcs	r6, r6, r2
 8000992:	4675      	movcs	r5, lr
 8000994:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000998:	ea55 0e06 	orrs.w	lr, r5, r6
 800099c:	d018      	beq.n	80009d0 <__aeabi_ddiv+0x114>
 800099e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009ba:	d1c0      	bne.n	800093e <__aeabi_ddiv+0x82>
 80009bc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009c0:	d10b      	bne.n	80009da <__aeabi_ddiv+0x11e>
 80009c2:	ea41 0100 	orr.w	r1, r1, r0
 80009c6:	f04f 0000 	mov.w	r0, #0
 80009ca:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ce:	e7b6      	b.n	800093e <__aeabi_ddiv+0x82>
 80009d0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009d4:	bf04      	itt	eq
 80009d6:	4301      	orreq	r1, r0
 80009d8:	2000      	moveq	r0, #0
 80009da:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009de:	bf88      	it	hi
 80009e0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009e4:	f63f aeaf 	bhi.w	8000746 <__aeabi_dmul+0xde>
 80009e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ec:	bf04      	itt	eq
 80009ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009f6:	f150 0000 	adcs.w	r0, r0, #0
 80009fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009fe:	bd70      	pop	{r4, r5, r6, pc}
 8000a00:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000a04:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a08:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a0c:	bfc2      	ittt	gt
 8000a0e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a12:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a16:	bd70      	popgt	{r4, r5, r6, pc}
 8000a18:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a1c:	f04f 0e00 	mov.w	lr, #0
 8000a20:	3c01      	subs	r4, #1
 8000a22:	e690      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a24:	ea45 0e06 	orr.w	lr, r5, r6
 8000a28:	e68d      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a2a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a2e:	ea94 0f0c 	teq	r4, ip
 8000a32:	bf08      	it	eq
 8000a34:	ea95 0f0c 	teqeq	r5, ip
 8000a38:	f43f af3b 	beq.w	80008b2 <__aeabi_dmul+0x24a>
 8000a3c:	ea94 0f0c 	teq	r4, ip
 8000a40:	d10a      	bne.n	8000a58 <__aeabi_ddiv+0x19c>
 8000a42:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a46:	f47f af34 	bne.w	80008b2 <__aeabi_dmul+0x24a>
 8000a4a:	ea95 0f0c 	teq	r5, ip
 8000a4e:	f47f af25 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a52:	4610      	mov	r0, r2
 8000a54:	4619      	mov	r1, r3
 8000a56:	e72c      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a58:	ea95 0f0c 	teq	r5, ip
 8000a5c:	d106      	bne.n	8000a6c <__aeabi_ddiv+0x1b0>
 8000a5e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a62:	f43f aefd 	beq.w	8000860 <__aeabi_dmul+0x1f8>
 8000a66:	4610      	mov	r0, r2
 8000a68:	4619      	mov	r1, r3
 8000a6a:	e722      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a6c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a76:	f47f aec5 	bne.w	8000804 <__aeabi_dmul+0x19c>
 8000a7a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a7e:	f47f af0d 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a82:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a86:	f47f aeeb 	bne.w	8000860 <__aeabi_dmul+0x1f8>
 8000a8a:	e712      	b.n	80008b2 <__aeabi_dmul+0x24a>

08000a8c <__gedf2>:
 8000a8c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a90:	e006      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a92:	bf00      	nop

08000a94 <__ledf2>:
 8000a94:	f04f 0c01 	mov.w	ip, #1
 8000a98:	e002      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a9a:	bf00      	nop

08000a9c <__cmpdf2>:
 8000a9c:	f04f 0c01 	mov.w	ip, #1
 8000aa0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000aa4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab0:	bf18      	it	ne
 8000ab2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000ab6:	d01b      	beq.n	8000af0 <__cmpdf2+0x54>
 8000ab8:	b001      	add	sp, #4
 8000aba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000abe:	bf0c      	ite	eq
 8000ac0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ac4:	ea91 0f03 	teqne	r1, r3
 8000ac8:	bf02      	ittt	eq
 8000aca:	ea90 0f02 	teqeq	r0, r2
 8000ace:	2000      	moveq	r0, #0
 8000ad0:	4770      	bxeq	lr
 8000ad2:	f110 0f00 	cmn.w	r0, #0
 8000ad6:	ea91 0f03 	teq	r1, r3
 8000ada:	bf58      	it	pl
 8000adc:	4299      	cmppl	r1, r3
 8000ade:	bf08      	it	eq
 8000ae0:	4290      	cmpeq	r0, r2
 8000ae2:	bf2c      	ite	cs
 8000ae4:	17d8      	asrcs	r0, r3, #31
 8000ae6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aea:	f040 0001 	orr.w	r0, r0, #1
 8000aee:	4770      	bx	lr
 8000af0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d102      	bne.n	8000b00 <__cmpdf2+0x64>
 8000afa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000afe:	d107      	bne.n	8000b10 <__cmpdf2+0x74>
 8000b00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b08:	d1d6      	bne.n	8000ab8 <__cmpdf2+0x1c>
 8000b0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b0e:	d0d3      	beq.n	8000ab8 <__cmpdf2+0x1c>
 8000b10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdrcmple>:
 8000b18:	4684      	mov	ip, r0
 8000b1a:	4610      	mov	r0, r2
 8000b1c:	4662      	mov	r2, ip
 8000b1e:	468c      	mov	ip, r1
 8000b20:	4619      	mov	r1, r3
 8000b22:	4663      	mov	r3, ip
 8000b24:	e000      	b.n	8000b28 <__aeabi_cdcmpeq>
 8000b26:	bf00      	nop

08000b28 <__aeabi_cdcmpeq>:
 8000b28:	b501      	push	{r0, lr}
 8000b2a:	f7ff ffb7 	bl	8000a9c <__cmpdf2>
 8000b2e:	2800      	cmp	r0, #0
 8000b30:	bf48      	it	mi
 8000b32:	f110 0f00 	cmnmi.w	r0, #0
 8000b36:	bd01      	pop	{r0, pc}

08000b38 <__aeabi_dcmpeq>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff fff4 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b40:	bf0c      	ite	eq
 8000b42:	2001      	moveq	r0, #1
 8000b44:	2000      	movne	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmplt>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffea 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b54:	bf34      	ite	cc
 8000b56:	2001      	movcc	r0, #1
 8000b58:	2000      	movcs	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmple>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffe0 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b68:	bf94      	ite	ls
 8000b6a:	2001      	movls	r0, #1
 8000b6c:	2000      	movhi	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpge>:
 8000b74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b78:	f7ff ffce 	bl	8000b18 <__aeabi_cdrcmple>
 8000b7c:	bf94      	ite	ls
 8000b7e:	2001      	movls	r0, #1
 8000b80:	2000      	movhi	r0, #0
 8000b82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b86:	bf00      	nop

08000b88 <__aeabi_dcmpgt>:
 8000b88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b8c:	f7ff ffc4 	bl	8000b18 <__aeabi_cdrcmple>
 8000b90:	bf34      	ite	cc
 8000b92:	2001      	movcc	r0, #1
 8000b94:	2000      	movcs	r0, #0
 8000b96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b9a:	bf00      	nop

08000b9c <__aeabi_d2uiz>:
 8000b9c:	004a      	lsls	r2, r1, #1
 8000b9e:	d211      	bcs.n	8000bc4 <__aeabi_d2uiz+0x28>
 8000ba0:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba4:	d211      	bcs.n	8000bca <__aeabi_d2uiz+0x2e>
 8000ba6:	d50d      	bpl.n	8000bc4 <__aeabi_d2uiz+0x28>
 8000ba8:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bb0:	d40e      	bmi.n	8000bd0 <__aeabi_d2uiz+0x34>
 8000bb2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	4770      	bx	lr
 8000bc4:	f04f 0000 	mov.w	r0, #0
 8000bc8:	4770      	bx	lr
 8000bca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bce:	d102      	bne.n	8000bd6 <__aeabi_d2uiz+0x3a>
 8000bd0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000bd4:	4770      	bx	lr
 8000bd6:	f04f 0000 	mov.w	r0, #0
 8000bda:	4770      	bx	lr

08000bdc <__aeabi_d2f>:
 8000bdc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000be0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000be4:	bf24      	itt	cs
 8000be6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bea:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bee:	d90d      	bls.n	8000c0c <__aeabi_d2f+0x30>
 8000bf0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bf4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bf8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bfc:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c00:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c04:	bf08      	it	eq
 8000c06:	f020 0001 	biceq.w	r0, r0, #1
 8000c0a:	4770      	bx	lr
 8000c0c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c10:	d121      	bne.n	8000c56 <__aeabi_d2f+0x7a>
 8000c12:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c16:	bfbc      	itt	lt
 8000c18:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c1c:	4770      	bxlt	lr
 8000c1e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c22:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c26:	f1c2 0218 	rsb	r2, r2, #24
 8000c2a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c2e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c32:	fa20 f002 	lsr.w	r0, r0, r2
 8000c36:	bf18      	it	ne
 8000c38:	f040 0001 	orrne.w	r0, r0, #1
 8000c3c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c40:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c44:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c48:	ea40 000c 	orr.w	r0, r0, ip
 8000c4c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c50:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c54:	e7cc      	b.n	8000bf0 <__aeabi_d2f+0x14>
 8000c56:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c5a:	d107      	bne.n	8000c6c <__aeabi_d2f+0x90>
 8000c5c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c60:	bf1e      	ittt	ne
 8000c62:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c66:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c6a:	4770      	bxne	lr
 8000c6c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c70:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c74:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c78:	4770      	bx	lr
 8000c7a:	bf00      	nop

08000c7c <__aeabi_ldivmod>:
 8000c7c:	b97b      	cbnz	r3, 8000c9e <__aeabi_ldivmod+0x22>
 8000c7e:	b972      	cbnz	r2, 8000c9e <__aeabi_ldivmod+0x22>
 8000c80:	2900      	cmp	r1, #0
 8000c82:	bfbe      	ittt	lt
 8000c84:	2000      	movlt	r0, #0
 8000c86:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000c8a:	e006      	blt.n	8000c9a <__aeabi_ldivmod+0x1e>
 8000c8c:	bf08      	it	eq
 8000c8e:	2800      	cmpeq	r0, #0
 8000c90:	bf1c      	itt	ne
 8000c92:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000c96:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c9a:	f000 b9d3 	b.w	8001044 <__aeabi_idiv0>
 8000c9e:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca2:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca6:	2900      	cmp	r1, #0
 8000ca8:	db09      	blt.n	8000cbe <__aeabi_ldivmod+0x42>
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	db1a      	blt.n	8000ce4 <__aeabi_ldivmod+0x68>
 8000cae:	f000 f84d 	bl	8000d4c <__udivmoddi4>
 8000cb2:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cba:	b004      	add	sp, #16
 8000cbc:	4770      	bx	lr
 8000cbe:	4240      	negs	r0, r0
 8000cc0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	db1b      	blt.n	8000d00 <__aeabi_ldivmod+0x84>
 8000cc8:	f000 f840 	bl	8000d4c <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	4252      	negs	r2, r2
 8000cde:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000ce2:	4770      	bx	lr
 8000ce4:	4252      	negs	r2, r2
 8000ce6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cea:	f000 f82f 	bl	8000d4c <__udivmoddi4>
 8000cee:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf6:	b004      	add	sp, #16
 8000cf8:	4240      	negs	r0, r0
 8000cfa:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cfe:	4770      	bx	lr
 8000d00:	4252      	negs	r2, r2
 8000d02:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d06:	f000 f821 	bl	8000d4c <__udivmoddi4>
 8000d0a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d0e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d12:	b004      	add	sp, #16
 8000d14:	4252      	negs	r2, r2
 8000d16:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d1a:	4770      	bx	lr

08000d1c <__aeabi_uldivmod>:
 8000d1c:	b953      	cbnz	r3, 8000d34 <__aeabi_uldivmod+0x18>
 8000d1e:	b94a      	cbnz	r2, 8000d34 <__aeabi_uldivmod+0x18>
 8000d20:	2900      	cmp	r1, #0
 8000d22:	bf08      	it	eq
 8000d24:	2800      	cmpeq	r0, #0
 8000d26:	bf1c      	itt	ne
 8000d28:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000d2c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000d30:	f000 b988 	b.w	8001044 <__aeabi_idiv0>
 8000d34:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d38:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d3c:	f000 f806 	bl	8000d4c <__udivmoddi4>
 8000d40:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d44:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d48:	b004      	add	sp, #16
 8000d4a:	4770      	bx	lr

08000d4c <__udivmoddi4>:
 8000d4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d50:	9d08      	ldr	r5, [sp, #32]
 8000d52:	468e      	mov	lr, r1
 8000d54:	4604      	mov	r4, r0
 8000d56:	4688      	mov	r8, r1
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d14a      	bne.n	8000df2 <__udivmoddi4+0xa6>
 8000d5c:	428a      	cmp	r2, r1
 8000d5e:	4617      	mov	r7, r2
 8000d60:	d962      	bls.n	8000e28 <__udivmoddi4+0xdc>
 8000d62:	fab2 f682 	clz	r6, r2
 8000d66:	b14e      	cbz	r6, 8000d7c <__udivmoddi4+0x30>
 8000d68:	f1c6 0320 	rsb	r3, r6, #32
 8000d6c:	fa01 f806 	lsl.w	r8, r1, r6
 8000d70:	fa20 f303 	lsr.w	r3, r0, r3
 8000d74:	40b7      	lsls	r7, r6
 8000d76:	ea43 0808 	orr.w	r8, r3, r8
 8000d7a:	40b4      	lsls	r4, r6
 8000d7c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d80:	fa1f fc87 	uxth.w	ip, r7
 8000d84:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d88:	0c23      	lsrs	r3, r4, #16
 8000d8a:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d8e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d92:	fb01 f20c 	mul.w	r2, r1, ip
 8000d96:	429a      	cmp	r2, r3
 8000d98:	d909      	bls.n	8000dae <__udivmoddi4+0x62>
 8000d9a:	18fb      	adds	r3, r7, r3
 8000d9c:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000da0:	f080 80ea 	bcs.w	8000f78 <__udivmoddi4+0x22c>
 8000da4:	429a      	cmp	r2, r3
 8000da6:	f240 80e7 	bls.w	8000f78 <__udivmoddi4+0x22c>
 8000daa:	3902      	subs	r1, #2
 8000dac:	443b      	add	r3, r7
 8000dae:	1a9a      	subs	r2, r3, r2
 8000db0:	b2a3      	uxth	r3, r4
 8000db2:	fbb2 f0fe 	udiv	r0, r2, lr
 8000db6:	fb0e 2210 	mls	r2, lr, r0, r2
 8000dba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000dbe:	fb00 fc0c 	mul.w	ip, r0, ip
 8000dc2:	459c      	cmp	ip, r3
 8000dc4:	d909      	bls.n	8000dda <__udivmoddi4+0x8e>
 8000dc6:	18fb      	adds	r3, r7, r3
 8000dc8:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000dcc:	f080 80d6 	bcs.w	8000f7c <__udivmoddi4+0x230>
 8000dd0:	459c      	cmp	ip, r3
 8000dd2:	f240 80d3 	bls.w	8000f7c <__udivmoddi4+0x230>
 8000dd6:	443b      	add	r3, r7
 8000dd8:	3802      	subs	r0, #2
 8000dda:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dde:	eba3 030c 	sub.w	r3, r3, ip
 8000de2:	2100      	movs	r1, #0
 8000de4:	b11d      	cbz	r5, 8000dee <__udivmoddi4+0xa2>
 8000de6:	40f3      	lsrs	r3, r6
 8000de8:	2200      	movs	r2, #0
 8000dea:	e9c5 3200 	strd	r3, r2, [r5]
 8000dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df2:	428b      	cmp	r3, r1
 8000df4:	d905      	bls.n	8000e02 <__udivmoddi4+0xb6>
 8000df6:	b10d      	cbz	r5, 8000dfc <__udivmoddi4+0xb0>
 8000df8:	e9c5 0100 	strd	r0, r1, [r5]
 8000dfc:	2100      	movs	r1, #0
 8000dfe:	4608      	mov	r0, r1
 8000e00:	e7f5      	b.n	8000dee <__udivmoddi4+0xa2>
 8000e02:	fab3 f183 	clz	r1, r3
 8000e06:	2900      	cmp	r1, #0
 8000e08:	d146      	bne.n	8000e98 <__udivmoddi4+0x14c>
 8000e0a:	4573      	cmp	r3, lr
 8000e0c:	d302      	bcc.n	8000e14 <__udivmoddi4+0xc8>
 8000e0e:	4282      	cmp	r2, r0
 8000e10:	f200 8105 	bhi.w	800101e <__udivmoddi4+0x2d2>
 8000e14:	1a84      	subs	r4, r0, r2
 8000e16:	eb6e 0203 	sbc.w	r2, lr, r3
 8000e1a:	2001      	movs	r0, #1
 8000e1c:	4690      	mov	r8, r2
 8000e1e:	2d00      	cmp	r5, #0
 8000e20:	d0e5      	beq.n	8000dee <__udivmoddi4+0xa2>
 8000e22:	e9c5 4800 	strd	r4, r8, [r5]
 8000e26:	e7e2      	b.n	8000dee <__udivmoddi4+0xa2>
 8000e28:	2a00      	cmp	r2, #0
 8000e2a:	f000 8090 	beq.w	8000f4e <__udivmoddi4+0x202>
 8000e2e:	fab2 f682 	clz	r6, r2
 8000e32:	2e00      	cmp	r6, #0
 8000e34:	f040 80a4 	bne.w	8000f80 <__udivmoddi4+0x234>
 8000e38:	1a8a      	subs	r2, r1, r2
 8000e3a:	0c03      	lsrs	r3, r0, #16
 8000e3c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e40:	b280      	uxth	r0, r0
 8000e42:	b2bc      	uxth	r4, r7
 8000e44:	2101      	movs	r1, #1
 8000e46:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e4a:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e4e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e52:	fb04 f20c 	mul.w	r2, r4, ip
 8000e56:	429a      	cmp	r2, r3
 8000e58:	d907      	bls.n	8000e6a <__udivmoddi4+0x11e>
 8000e5a:	18fb      	adds	r3, r7, r3
 8000e5c:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000e60:	d202      	bcs.n	8000e68 <__udivmoddi4+0x11c>
 8000e62:	429a      	cmp	r2, r3
 8000e64:	f200 80e0 	bhi.w	8001028 <__udivmoddi4+0x2dc>
 8000e68:	46c4      	mov	ip, r8
 8000e6a:	1a9b      	subs	r3, r3, r2
 8000e6c:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e70:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e74:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e78:	fb02 f404 	mul.w	r4, r2, r4
 8000e7c:	429c      	cmp	r4, r3
 8000e7e:	d907      	bls.n	8000e90 <__udivmoddi4+0x144>
 8000e80:	18fb      	adds	r3, r7, r3
 8000e82:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x142>
 8000e88:	429c      	cmp	r4, r3
 8000e8a:	f200 80ca 	bhi.w	8001022 <__udivmoddi4+0x2d6>
 8000e8e:	4602      	mov	r2, r0
 8000e90:	1b1b      	subs	r3, r3, r4
 8000e92:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e96:	e7a5      	b.n	8000de4 <__udivmoddi4+0x98>
 8000e98:	f1c1 0620 	rsb	r6, r1, #32
 8000e9c:	408b      	lsls	r3, r1
 8000e9e:	fa22 f706 	lsr.w	r7, r2, r6
 8000ea2:	431f      	orrs	r7, r3
 8000ea4:	fa0e f401 	lsl.w	r4, lr, r1
 8000ea8:	fa20 f306 	lsr.w	r3, r0, r6
 8000eac:	fa2e fe06 	lsr.w	lr, lr, r6
 8000eb0:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000eb4:	4323      	orrs	r3, r4
 8000eb6:	fa00 f801 	lsl.w	r8, r0, r1
 8000eba:	fa1f fc87 	uxth.w	ip, r7
 8000ebe:	fbbe f0f9 	udiv	r0, lr, r9
 8000ec2:	0c1c      	lsrs	r4, r3, #16
 8000ec4:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ec8:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ecc:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ed0:	45a6      	cmp	lr, r4
 8000ed2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ed6:	d909      	bls.n	8000eec <__udivmoddi4+0x1a0>
 8000ed8:	193c      	adds	r4, r7, r4
 8000eda:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000ede:	f080 809c 	bcs.w	800101a <__udivmoddi4+0x2ce>
 8000ee2:	45a6      	cmp	lr, r4
 8000ee4:	f240 8099 	bls.w	800101a <__udivmoddi4+0x2ce>
 8000ee8:	3802      	subs	r0, #2
 8000eea:	443c      	add	r4, r7
 8000eec:	eba4 040e 	sub.w	r4, r4, lr
 8000ef0:	fa1f fe83 	uxth.w	lr, r3
 8000ef4:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ef8:	fb09 4413 	mls	r4, r9, r3, r4
 8000efc:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000f00:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f04:	45a4      	cmp	ip, r4
 8000f06:	d908      	bls.n	8000f1a <__udivmoddi4+0x1ce>
 8000f08:	193c      	adds	r4, r7, r4
 8000f0a:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000f0e:	f080 8082 	bcs.w	8001016 <__udivmoddi4+0x2ca>
 8000f12:	45a4      	cmp	ip, r4
 8000f14:	d97f      	bls.n	8001016 <__udivmoddi4+0x2ca>
 8000f16:	3b02      	subs	r3, #2
 8000f18:	443c      	add	r4, r7
 8000f1a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f1e:	eba4 040c 	sub.w	r4, r4, ip
 8000f22:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f26:	4564      	cmp	r4, ip
 8000f28:	4673      	mov	r3, lr
 8000f2a:	46e1      	mov	r9, ip
 8000f2c:	d362      	bcc.n	8000ff4 <__udivmoddi4+0x2a8>
 8000f2e:	d05f      	beq.n	8000ff0 <__udivmoddi4+0x2a4>
 8000f30:	b15d      	cbz	r5, 8000f4a <__udivmoddi4+0x1fe>
 8000f32:	ebb8 0203 	subs.w	r2, r8, r3
 8000f36:	eb64 0409 	sbc.w	r4, r4, r9
 8000f3a:	fa04 f606 	lsl.w	r6, r4, r6
 8000f3e:	fa22 f301 	lsr.w	r3, r2, r1
 8000f42:	431e      	orrs	r6, r3
 8000f44:	40cc      	lsrs	r4, r1
 8000f46:	e9c5 6400 	strd	r6, r4, [r5]
 8000f4a:	2100      	movs	r1, #0
 8000f4c:	e74f      	b.n	8000dee <__udivmoddi4+0xa2>
 8000f4e:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f52:	0c01      	lsrs	r1, r0, #16
 8000f54:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f58:	b280      	uxth	r0, r0
 8000f5a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f5e:	463b      	mov	r3, r7
 8000f60:	4638      	mov	r0, r7
 8000f62:	463c      	mov	r4, r7
 8000f64:	46b8      	mov	r8, r7
 8000f66:	46be      	mov	lr, r7
 8000f68:	2620      	movs	r6, #32
 8000f6a:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f6e:	eba2 0208 	sub.w	r2, r2, r8
 8000f72:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f76:	e766      	b.n	8000e46 <__udivmoddi4+0xfa>
 8000f78:	4601      	mov	r1, r0
 8000f7a:	e718      	b.n	8000dae <__udivmoddi4+0x62>
 8000f7c:	4610      	mov	r0, r2
 8000f7e:	e72c      	b.n	8000dda <__udivmoddi4+0x8e>
 8000f80:	f1c6 0220 	rsb	r2, r6, #32
 8000f84:	fa2e f302 	lsr.w	r3, lr, r2
 8000f88:	40b7      	lsls	r7, r6
 8000f8a:	40b1      	lsls	r1, r6
 8000f8c:	fa20 f202 	lsr.w	r2, r0, r2
 8000f90:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f94:	430a      	orrs	r2, r1
 8000f96:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f9a:	b2bc      	uxth	r4, r7
 8000f9c:	fb0e 3318 	mls	r3, lr, r8, r3
 8000fa0:	0c11      	lsrs	r1, r2, #16
 8000fa2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fa6:	fb08 f904 	mul.w	r9, r8, r4
 8000faa:	40b0      	lsls	r0, r6
 8000fac:	4589      	cmp	r9, r1
 8000fae:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000fb2:	b280      	uxth	r0, r0
 8000fb4:	d93e      	bls.n	8001034 <__udivmoddi4+0x2e8>
 8000fb6:	1879      	adds	r1, r7, r1
 8000fb8:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000fbc:	d201      	bcs.n	8000fc2 <__udivmoddi4+0x276>
 8000fbe:	4589      	cmp	r9, r1
 8000fc0:	d81f      	bhi.n	8001002 <__udivmoddi4+0x2b6>
 8000fc2:	eba1 0109 	sub.w	r1, r1, r9
 8000fc6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fca:	fb09 f804 	mul.w	r8, r9, r4
 8000fce:	fb0e 1119 	mls	r1, lr, r9, r1
 8000fd2:	b292      	uxth	r2, r2
 8000fd4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fd8:	4542      	cmp	r2, r8
 8000fda:	d229      	bcs.n	8001030 <__udivmoddi4+0x2e4>
 8000fdc:	18ba      	adds	r2, r7, r2
 8000fde:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000fe2:	d2c4      	bcs.n	8000f6e <__udivmoddi4+0x222>
 8000fe4:	4542      	cmp	r2, r8
 8000fe6:	d2c2      	bcs.n	8000f6e <__udivmoddi4+0x222>
 8000fe8:	f1a9 0102 	sub.w	r1, r9, #2
 8000fec:	443a      	add	r2, r7
 8000fee:	e7be      	b.n	8000f6e <__udivmoddi4+0x222>
 8000ff0:	45f0      	cmp	r8, lr
 8000ff2:	d29d      	bcs.n	8000f30 <__udivmoddi4+0x1e4>
 8000ff4:	ebbe 0302 	subs.w	r3, lr, r2
 8000ff8:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ffc:	3801      	subs	r0, #1
 8000ffe:	46e1      	mov	r9, ip
 8001000:	e796      	b.n	8000f30 <__udivmoddi4+0x1e4>
 8001002:	eba7 0909 	sub.w	r9, r7, r9
 8001006:	4449      	add	r1, r9
 8001008:	f1a8 0c02 	sub.w	ip, r8, #2
 800100c:	fbb1 f9fe 	udiv	r9, r1, lr
 8001010:	fb09 f804 	mul.w	r8, r9, r4
 8001014:	e7db      	b.n	8000fce <__udivmoddi4+0x282>
 8001016:	4673      	mov	r3, lr
 8001018:	e77f      	b.n	8000f1a <__udivmoddi4+0x1ce>
 800101a:	4650      	mov	r0, sl
 800101c:	e766      	b.n	8000eec <__udivmoddi4+0x1a0>
 800101e:	4608      	mov	r0, r1
 8001020:	e6fd      	b.n	8000e1e <__udivmoddi4+0xd2>
 8001022:	443b      	add	r3, r7
 8001024:	3a02      	subs	r2, #2
 8001026:	e733      	b.n	8000e90 <__udivmoddi4+0x144>
 8001028:	f1ac 0c02 	sub.w	ip, ip, #2
 800102c:	443b      	add	r3, r7
 800102e:	e71c      	b.n	8000e6a <__udivmoddi4+0x11e>
 8001030:	4649      	mov	r1, r9
 8001032:	e79c      	b.n	8000f6e <__udivmoddi4+0x222>
 8001034:	eba1 0109 	sub.w	r1, r1, r9
 8001038:	46c4      	mov	ip, r8
 800103a:	fbb1 f9fe 	udiv	r9, r1, lr
 800103e:	fb09 f804 	mul.w	r8, r9, r4
 8001042:	e7c4      	b.n	8000fce <__udivmoddi4+0x282>

08001044 <__aeabi_idiv0>:
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop

08001048 <PWM_Satuation>:
 *  Created on: Apr 14, 2024
 *      Author: beamk
 */
#include "Controller.h"

int32_t PWM_Satuation(float _u, int32_t _upper_limit, int32_t _lower_limit) {
 8001048:	b480      	push	{r7}
 800104a:	b085      	sub	sp, #20
 800104c:	af00      	add	r7, sp, #0
 800104e:	ed87 0a03 	vstr	s0, [r7, #12]
 8001052:	60b8      	str	r0, [r7, #8]
 8001054:	6079      	str	r1, [r7, #4]
  if (_u > _upper_limit) return _upper_limit;
 8001056:	68bb      	ldr	r3, [r7, #8]
 8001058:	ee07 3a90 	vmov	s15, r3
 800105c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001060:	ed97 7a03 	vldr	s14, [r7, #12]
 8001064:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001068:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800106c:	dd01      	ble.n	8001072 <PWM_Satuation+0x2a>
 800106e:	68bb      	ldr	r3, [r7, #8]
 8001070:	e013      	b.n	800109a <PWM_Satuation+0x52>
  else if (_u < _lower_limit) return _lower_limit;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	ee07 3a90 	vmov	s15, r3
 8001078:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800107c:	ed97 7a03 	vldr	s14, [r7, #12]
 8001080:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001084:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001088:	d501      	bpl.n	800108e <PWM_Satuation+0x46>
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	e005      	b.n	800109a <PWM_Satuation+0x52>
  return (int32_t)_u;
 800108e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001092:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001096:	ee17 3a90 	vmov	r3, s15
}
 800109a:	4618      	mov	r0, r3
 800109c:	3714      	adds	r7, #20
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr

080010a6 <PID_CONTROLLER_Init>:

void PID_CONTROLLER_Init(PID_CONTROLLER *controller, float _Kp, float _Ki, float _Kd, float _u_max) {
 80010a6:	b480      	push	{r7}
 80010a8:	b087      	sub	sp, #28
 80010aa:	af00      	add	r7, sp, #0
 80010ac:	6178      	str	r0, [r7, #20]
 80010ae:	ed87 0a04 	vstr	s0, [r7, #16]
 80010b2:	edc7 0a03 	vstr	s1, [r7, #12]
 80010b6:	ed87 1a02 	vstr	s2, [r7, #8]
 80010ba:	edc7 1a01 	vstr	s3, [r7, #4]
  controller->Kp = _Kp;
 80010be:	697b      	ldr	r3, [r7, #20]
 80010c0:	693a      	ldr	r2, [r7, #16]
 80010c2:	601a      	str	r2, [r3, #0]
  controller->Ki = _Ki;
 80010c4:	697b      	ldr	r3, [r7, #20]
 80010c6:	68fa      	ldr	r2, [r7, #12]
 80010c8:	605a      	str	r2, [r3, #4]
  controller->Kd = _Kd;
 80010ca:	697b      	ldr	r3, [r7, #20]
 80010cc:	68ba      	ldr	r2, [r7, #8]
 80010ce:	609a      	str	r2, [r3, #8]
  controller->u_max = _u_max;
 80010d0:	697b      	ldr	r3, [r7, #20]
 80010d2:	687a      	ldr	r2, [r7, #4]
 80010d4:	60da      	str	r2, [r3, #12]
  controller->ek_1 = 0;
 80010d6:	697b      	ldr	r3, [r7, #20]
 80010d8:	f04f 0200 	mov.w	r2, #0
 80010dc:	611a      	str	r2, [r3, #16]
  controller->ek_2 = 0;
 80010de:	697b      	ldr	r3, [r7, #20]
 80010e0:	f04f 0200 	mov.w	r2, #0
 80010e4:	615a      	str	r2, [r3, #20]
  controller->u = 0;
 80010e6:	697b      	ldr	r3, [r7, #20]
 80010e8:	f04f 0200 	mov.w	r2, #0
 80010ec:	619a      	str	r2, [r3, #24]

}
 80010ee:	bf00      	nop
 80010f0:	371c      	adds	r7, #28
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr

080010fa <PID_CONTROLLER_Compute>:

float PID_CONTROLLER_Compute(PID_CONTROLLER *controller, float ek) {
 80010fa:	b480      	push	{r7}
 80010fc:	b083      	sub	sp, #12
 80010fe:	af00      	add	r7, sp, #0
 8001100:	6078      	str	r0, [r7, #4]
 8001102:	ed87 0a00 	vstr	s0, [r7]
    if (!((controller->u >= controller->u_max && ek > 0) || (controller->u <= -controller->u_max && ek < 0))) {
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	ed93 7a06 	vldr	s14, [r3, #24]
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	edd3 7a03 	vldr	s15, [r3, #12]
 8001112:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001116:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800111a:	bfac      	ite	ge
 800111c:	2301      	movge	r3, #1
 800111e:	2300      	movlt	r3, #0
 8001120:	b2db      	uxtb	r3, r3
 8001122:	f083 0301 	eor.w	r3, r3, #1
 8001126:	b2db      	uxtb	r3, r3
 8001128:	2b00      	cmp	r3, #0
 800112a:	d10e      	bne.n	800114a <PID_CONTROLLER_Compute+0x50>
 800112c:	edd7 7a00 	vldr	s15, [r7]
 8001130:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001134:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001138:	bfcc      	ite	gt
 800113a:	2301      	movgt	r3, #1
 800113c:	2300      	movle	r3, #0
 800113e:	b2db      	uxtb	r3, r3
 8001140:	f083 0301 	eor.w	r3, r3, #1
 8001144:	b2db      	uxtb	r3, r3
 8001146:	2b00      	cmp	r3, #0
 8001148:	d057      	beq.n	80011fa <PID_CONTROLLER_Compute+0x100>
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	ed93 7a06 	vldr	s14, [r3, #24]
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	edd3 7a03 	vldr	s15, [r3, #12]
 8001156:	eef1 7a67 	vneg.f32	s15, s15
 800115a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800115e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001162:	bf94      	ite	ls
 8001164:	2301      	movls	r3, #1
 8001166:	2300      	movhi	r3, #0
 8001168:	b2db      	uxtb	r3, r3
 800116a:	f083 0301 	eor.w	r3, r3, #1
 800116e:	b2db      	uxtb	r3, r3
 8001170:	2b00      	cmp	r3, #0
 8001172:	d10e      	bne.n	8001192 <PID_CONTROLLER_Compute+0x98>
 8001174:	edd7 7a00 	vldr	s15, [r7]
 8001178:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800117c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001180:	bf4c      	ite	mi
 8001182:	2301      	movmi	r3, #1
 8001184:	2300      	movpl	r3, #0
 8001186:	b2db      	uxtb	r3, r3
 8001188:	f083 0301 	eor.w	r3, r3, #1
 800118c:	b2db      	uxtb	r3, r3
 800118e:	2b00      	cmp	r3, #0
 8001190:	d033      	beq.n	80011fa <PID_CONTROLLER_Compute+0x100>
        controller->u += ((controller->Kp + controller->Ki + controller->Kd) * ek)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	ed93 7a06 	vldr	s14, [r3, #24]
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	edd3 6a00 	vldr	s13, [r3]
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	edd3 7a01 	vldr	s15, [r3, #4]
 80011a4:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	edd3 7a02 	vldr	s15, [r3, #8]
 80011ae:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80011b2:	edd7 7a00 	vldr	s15, [r7]
 80011b6:	ee66 6aa7 	vmul.f32	s13, s13, s15
                         - ((controller->Kp + (2 * controller->Kd)) * controller->ek_1)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	ed93 6a00 	vldr	s12, [r3]
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	edd3 7a02 	vldr	s15, [r3, #8]
 80011c6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80011ca:	ee36 6a27 	vadd.f32	s12, s12, s15
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	edd3 7a04 	vldr	s15, [r3, #16]
 80011d4:	ee66 7a27 	vmul.f32	s15, s12, s15
 80011d8:	ee76 6ae7 	vsub.f32	s13, s13, s15
                         + (controller->Kd * controller->ek_2);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	ed93 6a02 	vldr	s12, [r3, #8]
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	edd3 7a05 	vldr	s15, [r3, #20]
 80011e8:	ee66 7a27 	vmul.f32	s15, s12, s15
 80011ec:	ee76 7aa7 	vadd.f32	s15, s13, s15
        controller->u += ((controller->Kp + controller->Ki + controller->Kd) * ek)
 80011f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	edc3 7a06 	vstr	s15, [r3, #24]
    }
    controller->ek_2 = controller->ek_1;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	691a      	ldr	r2, [r3, #16]
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	615a      	str	r2, [r3, #20]
    controller->ek_1 = ek;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	683a      	ldr	r2, [r7, #0]
 8001206:	611a      	str	r2, [r3, #16]
    return controller->u;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	699b      	ldr	r3, [r3, #24]
 800120c:	ee07 3a90 	vmov	s15, r3
}
 8001210:	eeb0 0a67 	vmov.f32	s0, s15
 8001214:	370c      	adds	r7, #12
 8001216:	46bd      	mov	sp, r7
 8001218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121c:	4770      	bx	lr

0800121e <MDXX_GPIO_init>:
	PWM_init(&(mdxx->pwm), htimp, timp_chx);
	mdxx->mode = 0;
}

void MDXX_GPIO_init(MDXX *mdxx, TIM_HandleTypeDef *htimp, uint16_t timp_chx,
		GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 800121e:	b580      	push	{r7, lr}
 8001220:	b084      	sub	sp, #16
 8001222:	af00      	add	r7, sp, #0
 8001224:	60f8      	str	r0, [r7, #12]
 8001226:	60b9      	str	r1, [r7, #8]
 8001228:	603b      	str	r3, [r7, #0]
 800122a:	4613      	mov	r3, r2
 800122c:	80fb      	strh	r3, [r7, #6]
	mdxx->htimp = htimp;
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	68ba      	ldr	r2, [r7, #8]
 8001232:	609a      	str	r2, [r3, #8]
	mdxx->timp_chx = timp_chx;
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	88fa      	ldrh	r2, [r7, #6]
 8001238:	819a      	strh	r2, [r3, #12]
	PWM_init(&(mdxx->pwm), htimp, timp_chx);
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	3328      	adds	r3, #40	@ 0x28
 800123e:	88fa      	ldrh	r2, [r7, #6]
 8001240:	68b9      	ldr	r1, [r7, #8]
 8001242:	4618      	mov	r0, r3
 8001244:	f000 fa64 	bl	8001710 <PWM_init>
	mdxx->GPIOx = GPIOx;
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	683a      	ldr	r2, [r7, #0]
 800124c:	645a      	str	r2, [r3, #68]	@ 0x44
	mdxx->GPIO_Pin = GPIO_Pin;
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	8b3a      	ldrh	r2, [r7, #24]
 8001252:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
	mdxx->mode = 1;
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	2201      	movs	r2, #1
 800125a:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
}
 800125e:	bf00      	nop
 8001260:	3710      	adds	r7, #16
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
	...

08001268 <MDXX_set_range>:
			mdxx->cmd = fabs(duty);
		}
	}
}

void MDXX_set_range(MDXX *mdxx, float freq, float duty) {
 8001268:	b580      	push	{r7, lr}
 800126a:	b084      	sub	sp, #16
 800126c:	af00      	add	r7, sp, #0
 800126e:	60f8      	str	r0, [r7, #12]
 8001270:	ed87 0a02 	vstr	s0, [r7, #8]
 8001274:	edc7 0a01 	vstr	s1, [r7, #4]
	if (mdxx->mode == 0) {
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 800127e:	2b00      	cmp	r3, #0
 8001280:	d15f      	bne.n	8001342 <MDXX_set_range+0xda>
		if (duty == 0) {
 8001282:	edd7 7a01 	vldr	s15, [r7, #4]
 8001286:	eef5 7a40 	vcmp.f32	s15, #0.0
 800128a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800128e:	d115      	bne.n	80012bc <MDXX_set_range+0x54>
			PWM_write_range(&(mdxx->dir), freq, 0);
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	3310      	adds	r3, #16
 8001294:	eddf 0a5f 	vldr	s1, [pc, #380]	@ 8001414 <MDXX_set_range+0x1ac>
 8001298:	ed97 0a02 	vldr	s0, [r7, #8]
 800129c:	4618      	mov	r0, r3
 800129e:	f000 fa5b 	bl	8001758 <PWM_write_range>
			PWM_write_range(&(mdxx->pwm), freq, 0);
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	3328      	adds	r3, #40	@ 0x28
 80012a6:	eddf 0a5b 	vldr	s1, [pc, #364]	@ 8001414 <MDXX_set_range+0x1ac>
 80012aa:	ed97 0a02 	vldr	s0, [r7, #8]
 80012ae:	4618      	mov	r0, r3
 80012b0:	f000 fa52 	bl	8001758 <PWM_write_range>
			mdxx->cmd = 0;
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	2200      	movs	r2, #0
 80012b8:	641a      	str	r2, [r3, #64]	@ 0x40
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 1);
			PWM_write_range(&(mdxx->pwm), freq, fabs(duty));
			mdxx->cmd = fabs(duty);
		}
	}
}
 80012ba:	e0a6      	b.n	800140a <MDXX_set_range+0x1a2>
		} else if (duty > 0) {
 80012bc:	edd7 7a01 	vldr	s15, [r7, #4]
 80012c0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80012c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012c8:	dd1a      	ble.n	8001300 <MDXX_set_range+0x98>
			PWM_write_range(&(mdxx->dir), freq, 0);
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	3310      	adds	r3, #16
 80012ce:	eddf 0a51 	vldr	s1, [pc, #324]	@ 8001414 <MDXX_set_range+0x1ac>
 80012d2:	ed97 0a02 	vldr	s0, [r7, #8]
 80012d6:	4618      	mov	r0, r3
 80012d8:	f000 fa3e 	bl	8001758 <PWM_write_range>
			PWM_write_range(&(mdxx->pwm), freq, duty);
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	3328      	adds	r3, #40	@ 0x28
 80012e0:	edd7 0a01 	vldr	s1, [r7, #4]
 80012e4:	ed97 0a02 	vldr	s0, [r7, #8]
 80012e8:	4618      	mov	r0, r3
 80012ea:	f000 fa35 	bl	8001758 <PWM_write_range>
			mdxx->cmd = duty;
 80012ee:	edd7 7a01 	vldr	s15, [r7, #4]
 80012f2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012f6:	ee17 2a90 	vmov	r2, s15
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80012fe:	e084      	b.n	800140a <MDXX_set_range+0x1a2>
			PWM_write_range(&(mdxx->dir), freq, 100);
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	3310      	adds	r3, #16
 8001304:	eddf 0a44 	vldr	s1, [pc, #272]	@ 8001418 <MDXX_set_range+0x1b0>
 8001308:	ed97 0a02 	vldr	s0, [r7, #8]
 800130c:	4618      	mov	r0, r3
 800130e:	f000 fa23 	bl	8001758 <PWM_write_range>
			PWM_write_range(&(mdxx->pwm), freq, fabs(duty));
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	3328      	adds	r3, #40	@ 0x28
 8001316:	edd7 7a01 	vldr	s15, [r7, #4]
 800131a:	eef0 7ae7 	vabs.f32	s15, s15
 800131e:	eef0 0a67 	vmov.f32	s1, s15
 8001322:	ed97 0a02 	vldr	s0, [r7, #8]
 8001326:	4618      	mov	r0, r3
 8001328:	f000 fa16 	bl	8001758 <PWM_write_range>
			mdxx->cmd = fabs(duty);
 800132c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001330:	eef0 7ae7 	vabs.f32	s15, s15
 8001334:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001338:	ee17 2a90 	vmov	r2, s15
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001340:	e063      	b.n	800140a <MDXX_set_range+0x1a2>
	} else if (mdxx->mode == 1) {
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 8001348:	2b01      	cmp	r3, #1
 800134a:	d15e      	bne.n	800140a <MDXX_set_range+0x1a2>
		if (duty == 0) {
 800134c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001350:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001354:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001358:	d115      	bne.n	8001386 <MDXX_set_range+0x11e>
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 0);
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8001364:	2200      	movs	r2, #0
 8001366:	4619      	mov	r1, r3
 8001368:	f004 f9b4 	bl	80056d4 <HAL_GPIO_WritePin>
			PWM_write_range(&(mdxx->pwm), freq, 0);
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	3328      	adds	r3, #40	@ 0x28
 8001370:	eddf 0a28 	vldr	s1, [pc, #160]	@ 8001414 <MDXX_set_range+0x1ac>
 8001374:	ed97 0a02 	vldr	s0, [r7, #8]
 8001378:	4618      	mov	r0, r3
 800137a:	f000 f9ed 	bl	8001758 <PWM_write_range>
			mdxx->cmd = 0;
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	2200      	movs	r2, #0
 8001382:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001384:	e041      	b.n	800140a <MDXX_set_range+0x1a2>
		} else if (duty > 0) {
 8001386:	edd7 7a01 	vldr	s15, [r7, #4]
 800138a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800138e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001392:	dd1a      	ble.n	80013ca <MDXX_set_range+0x162>
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 0);
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800139e:	2200      	movs	r2, #0
 80013a0:	4619      	mov	r1, r3
 80013a2:	f004 f997 	bl	80056d4 <HAL_GPIO_WritePin>
			PWM_write_range(&(mdxx->pwm), freq, duty);
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	3328      	adds	r3, #40	@ 0x28
 80013aa:	edd7 0a01 	vldr	s1, [r7, #4]
 80013ae:	ed97 0a02 	vldr	s0, [r7, #8]
 80013b2:	4618      	mov	r0, r3
 80013b4:	f000 f9d0 	bl	8001758 <PWM_write_range>
			mdxx->cmd = duty;
 80013b8:	edd7 7a01 	vldr	s15, [r7, #4]
 80013bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013c0:	ee17 2a90 	vmov	r2, s15
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80013c8:	e01f      	b.n	800140a <MDXX_set_range+0x1a2>
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 1);
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80013d4:	2201      	movs	r2, #1
 80013d6:	4619      	mov	r1, r3
 80013d8:	f004 f97c 	bl	80056d4 <HAL_GPIO_WritePin>
			PWM_write_range(&(mdxx->pwm), freq, fabs(duty));
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	3328      	adds	r3, #40	@ 0x28
 80013e0:	edd7 7a01 	vldr	s15, [r7, #4]
 80013e4:	eef0 7ae7 	vabs.f32	s15, s15
 80013e8:	eef0 0a67 	vmov.f32	s1, s15
 80013ec:	ed97 0a02 	vldr	s0, [r7, #8]
 80013f0:	4618      	mov	r0, r3
 80013f2:	f000 f9b1 	bl	8001758 <PWM_write_range>
			mdxx->cmd = fabs(duty);
 80013f6:	edd7 7a01 	vldr	s15, [r7, #4]
 80013fa:	eef0 7ae7 	vabs.f32	s15, s15
 80013fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001402:	ee17 2a90 	vmov	r2, s15
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800140a:	bf00      	nop
 800140c:	3710      	adds	r7, #16
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	00000000 	.word	0x00000000
 8001418:	42c80000 	.word	0x42c80000

0800141c <FIR_init>:
 *      Author: transporter
 */
#include "FIR.h"
#include "arm_math.h"

void FIR_init(FIR *fir, uint16_t numTaps, float cutoffFreq, float samplingFreq) {
 800141c:	b580      	push	{r7, lr}
 800141e:	ed2d 8b02 	vpush	{d8}
 8001422:	b08a      	sub	sp, #40	@ 0x28
 8001424:	af00      	add	r7, sp, #0
 8001426:	60f8      	str	r0, [r7, #12]
 8001428:	460b      	mov	r3, r1
 800142a:	ed87 0a01 	vstr	s0, [r7, #4]
 800142e:	edc7 0a00 	vstr	s1, [r7]
 8001432:	817b      	strh	r3, [r7, #10]
    // Make sure numTaps is odd
    if (numTaps % 2 == 0) {
 8001434:	897b      	ldrh	r3, [r7, #10]
 8001436:	f003 0301 	and.w	r3, r3, #1
 800143a:	b29b      	uxth	r3, r3
 800143c:	2b00      	cmp	r3, #0
 800143e:	d102      	bne.n	8001446 <FIR_init+0x2a>
        numTaps += 1;
 8001440:	897b      	ldrh	r3, [r7, #10]
 8001442:	3301      	adds	r3, #1
 8001444:	817b      	strh	r3, [r7, #10]
    }

    fir->numTaps = numTaps;
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	897a      	ldrh	r2, [r7, #10]
 800144a:	811a      	strh	r2, [r3, #8]
    fir->bufferIndex = 0;
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	2200      	movs	r2, #0
 8001450:	815a      	strh	r2, [r3, #10]

    // Allocate memory for coefficients and buffer
    fir->coeffs = (float*)malloc(numTaps * sizeof(float));
 8001452:	897b      	ldrh	r3, [r7, #10]
 8001454:	009b      	lsls	r3, r3, #2
 8001456:	4618      	mov	r0, r3
 8001458:	f019 fb0e 	bl	801aa78 <malloc>
 800145c:	4603      	mov	r3, r0
 800145e:	461a      	mov	r2, r3
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	601a      	str	r2, [r3, #0]
    fir->buffer = (float*)malloc(numTaps * sizeof(float));
 8001464:	897b      	ldrh	r3, [r7, #10]
 8001466:	009b      	lsls	r3, r3, #2
 8001468:	4618      	mov	r0, r3
 800146a:	f019 fb05 	bl	801aa78 <malloc>
 800146e:	4603      	mov	r3, r0
 8001470:	461a      	mov	r2, r3
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	605a      	str	r2, [r3, #4]

    if (fir->coeffs != NULL && fir->buffer != NULL) {
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	2b00      	cmp	r3, #0
 800147c:	f000 80e0 	beq.w	8001640 <FIR_init+0x224>
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	2b00      	cmp	r3, #0
 8001486:	f000 80db 	beq.w	8001640 <FIR_init+0x224>
        // Clear buffer
        for (uint16_t i = 0; i < numTaps; i++) {
 800148a:	2300      	movs	r3, #0
 800148c:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800148e:	e00a      	b.n	80014a6 <FIR_init+0x8a>
            fir->buffer[i] = 0.0f;
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	685a      	ldr	r2, [r3, #4]
 8001494:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001496:	009b      	lsls	r3, r3, #2
 8001498:	4413      	add	r3, r2
 800149a:	f04f 0200 	mov.w	r2, #0
 800149e:	601a      	str	r2, [r3, #0]
        for (uint16_t i = 0; i < numTaps; i++) {
 80014a0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80014a2:	3301      	adds	r3, #1
 80014a4:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80014a6:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80014a8:	897b      	ldrh	r3, [r7, #10]
 80014aa:	429a      	cmp	r2, r3
 80014ac:	d3f0      	bcc.n	8001490 <FIR_init+0x74>
        }

        // Calculate normalized cutoff frequency (0 to 0.5)
        float omega = cutoffFreq / samplingFreq;
 80014ae:	edd7 6a01 	vldr	s13, [r7, #4]
 80014b2:	ed97 7a00 	vldr	s14, [r7]
 80014b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80014ba:	edc7 7a06 	vstr	s15, [r7, #24]

        // Calculate filter coefficients (low-pass)
        int16_t half_taps = numTaps / 2;
 80014be:	897b      	ldrh	r3, [r7, #10]
 80014c0:	085b      	lsrs	r3, r3, #1
 80014c2:	b29b      	uxth	r3, r3
 80014c4:	82fb      	strh	r3, [r7, #22]
        for (int16_t i = 0; i < numTaps; i++) {
 80014c6:	2300      	movs	r3, #0
 80014c8:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80014ca:	e077      	b.n	80015bc <FIR_init+0x1a0>
            if (i == half_taps) {
 80014cc:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 80014d0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80014d4:	429a      	cmp	r2, r3
 80014d6:	d10c      	bne.n	80014f2 <FIR_init+0xd6>
                // Center tap
                fir->coeffs[i] = 2.0f * omega;
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	681a      	ldr	r2, [r3, #0]
 80014dc:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 80014e0:	009b      	lsls	r3, r3, #2
 80014e2:	4413      	add	r3, r2
 80014e4:	edd7 7a06 	vldr	s15, [r7, #24]
 80014e8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80014ec:	edc3 7a00 	vstr	s15, [r3]
 80014f0:	e02c      	b.n	800154c <FIR_init+0x130>
            } else {
                // Side taps
                int16_t n = i - half_taps;
 80014f2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80014f4:	8afb      	ldrh	r3, [r7, #22]
 80014f6:	1ad3      	subs	r3, r2, r3
 80014f8:	b29b      	uxth	r3, r3
 80014fa:	82bb      	strh	r3, [r7, #20]
                fir->coeffs[i] = sinf(2.0f * PI * omega * n) / (PI * n);
 80014fc:	edd7 7a06 	vldr	s15, [r7, #24]
 8001500:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 800164c <FIR_init+0x230>
 8001504:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001508:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800150c:	ee07 3a90 	vmov	s15, r3
 8001510:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001514:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001518:	eeb0 0a67 	vmov.f32	s0, s15
 800151c:	f01a feea 	bl	801c2f4 <sinf>
 8001520:	eef0 6a40 	vmov.f32	s13, s0
 8001524:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001528:	ee07 3a90 	vmov	s15, r3
 800152c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001530:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 8001650 <FIR_init+0x234>
 8001534:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	681a      	ldr	r2, [r3, #0]
 800153c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001540:	009b      	lsls	r3, r3, #2
 8001542:	4413      	add	r3, r2
 8001544:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001548:	edc3 7a00 	vstr	s15, [r3]
            }

            // Apply Hamming window
            fir->coeffs[i] *= (0.54f - 0.46f * cosf(2.0f * PI * i / (numTaps - 1)));
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	681a      	ldr	r2, [r3, #0]
 8001550:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001554:	009b      	lsls	r3, r3, #2
 8001556:	4413      	add	r3, r2
 8001558:	ed93 8a00 	vldr	s16, [r3]
 800155c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001560:	ee07 3a90 	vmov	s15, r3
 8001564:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001568:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 800164c <FIR_init+0x230>
 800156c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001570:	897b      	ldrh	r3, [r7, #10]
 8001572:	3b01      	subs	r3, #1
 8001574:	ee07 3a90 	vmov	s15, r3
 8001578:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800157c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001580:	eeb0 0a66 	vmov.f32	s0, s13
 8001584:	f01a fe72 	bl	801c26c <cosf>
 8001588:	eef0 7a40 	vmov.f32	s15, s0
 800158c:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8001654 <FIR_init+0x238>
 8001590:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001594:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8001658 <FIR_init+0x23c>
 8001598:	ee77 7a67 	vsub.f32	s15, s14, s15
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	681a      	ldr	r2, [r3, #0]
 80015a0:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 80015a4:	009b      	lsls	r3, r3, #2
 80015a6:	4413      	add	r3, r2
 80015a8:	ee68 7a27 	vmul.f32	s15, s16, s15
 80015ac:	edc3 7a00 	vstr	s15, [r3]
        for (int16_t i = 0; i < numTaps; i++) {
 80015b0:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 80015b4:	b29b      	uxth	r3, r3
 80015b6:	3301      	adds	r3, #1
 80015b8:	b29b      	uxth	r3, r3
 80015ba:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80015bc:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 80015c0:	897b      	ldrh	r3, [r7, #10]
 80015c2:	429a      	cmp	r2, r3
 80015c4:	db82      	blt.n	80014cc <FIR_init+0xb0>
        }

        // Normalize gain
        float sum = 0.0f;
 80015c6:	f04f 0300 	mov.w	r3, #0
 80015ca:	623b      	str	r3, [r7, #32]
        for (uint16_t i = 0; i < numTaps; i++) {
 80015cc:	2300      	movs	r3, #0
 80015ce:	83fb      	strh	r3, [r7, #30]
 80015d0:	e00f      	b.n	80015f2 <FIR_init+0x1d6>
            sum += fir->coeffs[i];
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	681a      	ldr	r2, [r3, #0]
 80015d6:	8bfb      	ldrh	r3, [r7, #30]
 80015d8:	009b      	lsls	r3, r3, #2
 80015da:	4413      	add	r3, r2
 80015dc:	edd3 7a00 	vldr	s15, [r3]
 80015e0:	ed97 7a08 	vldr	s14, [r7, #32]
 80015e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015e8:	edc7 7a08 	vstr	s15, [r7, #32]
        for (uint16_t i = 0; i < numTaps; i++) {
 80015ec:	8bfb      	ldrh	r3, [r7, #30]
 80015ee:	3301      	adds	r3, #1
 80015f0:	83fb      	strh	r3, [r7, #30]
 80015f2:	8bfa      	ldrh	r2, [r7, #30]
 80015f4:	897b      	ldrh	r3, [r7, #10]
 80015f6:	429a      	cmp	r2, r3
 80015f8:	d3eb      	bcc.n	80015d2 <FIR_init+0x1b6>
        }

        if (sum != 0.0f) {
 80015fa:	edd7 7a08 	vldr	s15, [r7, #32]
 80015fe:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001602:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001606:	d01b      	beq.n	8001640 <FIR_init+0x224>
            for (uint16_t i = 0; i < numTaps; i++) {
 8001608:	2300      	movs	r3, #0
 800160a:	83bb      	strh	r3, [r7, #28]
 800160c:	e014      	b.n	8001638 <FIR_init+0x21c>
                fir->coeffs[i] /= sum;
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	681a      	ldr	r2, [r3, #0]
 8001612:	8bbb      	ldrh	r3, [r7, #28]
 8001614:	009b      	lsls	r3, r3, #2
 8001616:	4413      	add	r3, r2
 8001618:	edd3 6a00 	vldr	s13, [r3]
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	681a      	ldr	r2, [r3, #0]
 8001620:	8bbb      	ldrh	r3, [r7, #28]
 8001622:	009b      	lsls	r3, r3, #2
 8001624:	4413      	add	r3, r2
 8001626:	ed97 7a08 	vldr	s14, [r7, #32]
 800162a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800162e:	edc3 7a00 	vstr	s15, [r3]
            for (uint16_t i = 0; i < numTaps; i++) {
 8001632:	8bbb      	ldrh	r3, [r7, #28]
 8001634:	3301      	adds	r3, #1
 8001636:	83bb      	strh	r3, [r7, #28]
 8001638:	8bba      	ldrh	r2, [r7, #28]
 800163a:	897b      	ldrh	r3, [r7, #10]
 800163c:	429a      	cmp	r2, r3
 800163e:	d3e6      	bcc.n	800160e <FIR_init+0x1f2>
            }
        }
    }
}
 8001640:	bf00      	nop
 8001642:	3728      	adds	r7, #40	@ 0x28
 8001644:	46bd      	mov	sp, r7
 8001646:	ecbd 8b02 	vpop	{d8}
 800164a:	bd80      	pop	{r7, pc}
 800164c:	40c90fdb 	.word	0x40c90fdb
 8001650:	40490fdb 	.word	0x40490fdb
 8001654:	3eeb851f 	.word	0x3eeb851f
 8001658:	3f0a3d71 	.word	0x3f0a3d71

0800165c <FIR_process>:

float FIR_process(FIR *fir, float input) {
 800165c:	b480      	push	{r7}
 800165e:	b085      	sub	sp, #20
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
 8001664:	ed87 0a00 	vstr	s0, [r7]
    // Update circular buffer with new input
    fir->buffer[fir->bufferIndex] = input;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	685a      	ldr	r2, [r3, #4]
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	895b      	ldrh	r3, [r3, #10]
 8001670:	009b      	lsls	r3, r3, #2
 8001672:	4413      	add	r3, r2
 8001674:	683a      	ldr	r2, [r7, #0]
 8001676:	601a      	str	r2, [r3, #0]

    // Compute output (convolution)
    float output = 0.0f;
 8001678:	f04f 0300 	mov.w	r3, #0
 800167c:	60fb      	str	r3, [r7, #12]
    uint16_t index = fir->bufferIndex;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	895b      	ldrh	r3, [r3, #10]
 8001682:	817b      	strh	r3, [r7, #10]

    for (uint16_t i = 0; i < fir->numTaps; i++) {
 8001684:	2300      	movs	r3, #0
 8001686:	813b      	strh	r3, [r7, #8]
 8001688:	e023      	b.n	80016d2 <FIR_process+0x76>
        output += fir->buffer[index] * fir->coeffs[i];
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	685a      	ldr	r2, [r3, #4]
 800168e:	897b      	ldrh	r3, [r7, #10]
 8001690:	009b      	lsls	r3, r3, #2
 8001692:	4413      	add	r3, r2
 8001694:	ed93 7a00 	vldr	s14, [r3]
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681a      	ldr	r2, [r3, #0]
 800169c:	893b      	ldrh	r3, [r7, #8]
 800169e:	009b      	lsls	r3, r3, #2
 80016a0:	4413      	add	r3, r2
 80016a2:	edd3 7a00 	vldr	s15, [r3]
 80016a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016aa:	ed97 7a03 	vldr	s14, [r7, #12]
 80016ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016b2:	edc7 7a03 	vstr	s15, [r7, #12]

        // Move back in circular buffer
        if (index == 0) {
 80016b6:	897b      	ldrh	r3, [r7, #10]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d104      	bne.n	80016c6 <FIR_process+0x6a>
            index = fir->numTaps - 1;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	891b      	ldrh	r3, [r3, #8]
 80016c0:	3b01      	subs	r3, #1
 80016c2:	817b      	strh	r3, [r7, #10]
 80016c4:	e002      	b.n	80016cc <FIR_process+0x70>
        } else {
            index--;
 80016c6:	897b      	ldrh	r3, [r7, #10]
 80016c8:	3b01      	subs	r3, #1
 80016ca:	817b      	strh	r3, [r7, #10]
    for (uint16_t i = 0; i < fir->numTaps; i++) {
 80016cc:	893b      	ldrh	r3, [r7, #8]
 80016ce:	3301      	adds	r3, #1
 80016d0:	813b      	strh	r3, [r7, #8]
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	891b      	ldrh	r3, [r3, #8]
 80016d6:	893a      	ldrh	r2, [r7, #8]
 80016d8:	429a      	cmp	r2, r3
 80016da:	d3d6      	bcc.n	800168a <FIR_process+0x2e>
        }
    }

    // Update buffer index for next input
    fir->bufferIndex++;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	895b      	ldrh	r3, [r3, #10]
 80016e0:	3301      	adds	r3, #1
 80016e2:	b29a      	uxth	r2, r3
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	815a      	strh	r2, [r3, #10]
    if (fir->bufferIndex >= fir->numTaps) {
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	895a      	ldrh	r2, [r3, #10]
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	891b      	ldrh	r3, [r3, #8]
 80016f0:	429a      	cmp	r2, r3
 80016f2:	d302      	bcc.n	80016fa <FIR_process+0x9e>
        fir->bufferIndex = 0;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2200      	movs	r2, #0
 80016f8:	815a      	strh	r2, [r3, #10]
    }

    return output;
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	ee07 3a90 	vmov	s15, r3
}
 8001700:	eeb0 0a67 	vmov.f32	s0, s15
 8001704:	3714      	adds	r7, #20
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr
	...

08001710 <PWM_init>:
 *      Author: beamk
 */

#include "PWM.h"

void PWM_init(PWM* pwm, TIM_HandleTypeDef* htimx, uint16_t tim_chx){
 8001710:	b580      	push	{r7, lr}
 8001712:	b084      	sub	sp, #16
 8001714:	af00      	add	r7, sp, #0
 8001716:	60f8      	str	r0, [r7, #12]
 8001718:	60b9      	str	r1, [r7, #8]
 800171a:	4613      	mov	r3, r2
 800171c:	80fb      	strh	r3, [r7, #6]
	pwm->CPU_FREQ = 170e6;
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	4a0b      	ldr	r2, [pc, #44]	@ (8001750 <PWM_init+0x40>)
 8001722:	611a      	str	r2, [r3, #16]
	pwm->htimx = htimx;
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	68ba      	ldr	r2, [r7, #8]
 8001728:	601a      	str	r2, [r3, #0]
	pwm->tim_chx = tim_chx;
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	88fa      	ldrh	r2, [r7, #6]
 800172e:	809a      	strh	r2, [r3, #4]
	pwm->OC = 0;
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	2200      	movs	r2, #0
 8001734:	615a      	str	r2, [r3, #20]
	HAL_TIM_Base_Start(htimx);
 8001736:	68b8      	ldr	r0, [r7, #8]
 8001738:	f005 f92a 	bl	8006990 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(htimx, tim_chx);
 800173c:	88fb      	ldrh	r3, [r7, #6]
 800173e:	4619      	mov	r1, r3
 8001740:	68b8      	ldr	r0, [r7, #8]
 8001742:	f005 fa65 	bl	8006c10 <HAL_TIM_PWM_Start>
}
 8001746:	bf00      	nop
 8001748:	3710      	adds	r7, #16
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	0a21fe80 	.word	0x0a21fe80
 8001754:	00000000 	.word	0x00000000

08001758 <PWM_write_range>:
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
    }
}

void PWM_write_range(PWM* pwm, float freq, float duty){
 8001758:	b5b0      	push	{r4, r5, r7, lr}
 800175a:	b084      	sub	sp, #16
 800175c:	af00      	add	r7, sp, #0
 800175e:	60f8      	str	r0, [r7, #12]
 8001760:	ed87 0a02 	vstr	s0, [r7, #8]
 8001764:	edc7 0a01 	vstr	s1, [r7, #4]
    if (freq == 0) {
 8001768:	edd7 7a02 	vldr	s15, [r7, #8]
 800176c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001770:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001774:	d137      	bne.n	80017e6 <PWM_write_range+0x8e>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, 0);
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	889b      	ldrh	r3, [r3, #4]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d105      	bne.n	800178a <PWM_write_range+0x32>
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	2200      	movs	r2, #0
 8001786:	635a      	str	r2, [r3, #52]	@ 0x34
    	pwm->OC = (uint16_t) (pwm->overflow * fabs(duty) / 65535.0);
        __HAL_TIM_SET_PRESCALER(pwm->htimx, pwm->prescaler);
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
    }
}
 8001788:	e0e1      	b.n	800194e <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, 0);
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	889b      	ldrh	r3, [r3, #4]
 800178e:	2b04      	cmp	r3, #4
 8001790:	d105      	bne.n	800179e <PWM_write_range+0x46>
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	681a      	ldr	r2, [r3, #0]
 8001798:	2300      	movs	r3, #0
 800179a:	6393      	str	r3, [r2, #56]	@ 0x38
 800179c:	e0d7      	b.n	800194e <PWM_write_range+0x1f6>
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	889b      	ldrh	r3, [r3, #4]
 80017a2:	2b08      	cmp	r3, #8
 80017a4:	d105      	bne.n	80017b2 <PWM_write_range+0x5a>
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	681a      	ldr	r2, [r3, #0]
 80017ac:	2300      	movs	r3, #0
 80017ae:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80017b0:	e0cd      	b.n	800194e <PWM_write_range+0x1f6>
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	889b      	ldrh	r3, [r3, #4]
 80017b6:	2b0c      	cmp	r3, #12
 80017b8:	d105      	bne.n	80017c6 <PWM_write_range+0x6e>
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	681a      	ldr	r2, [r3, #0]
 80017c0:	2300      	movs	r3, #0
 80017c2:	6413      	str	r3, [r2, #64]	@ 0x40
 80017c4:	e0c3      	b.n	800194e <PWM_write_range+0x1f6>
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	889b      	ldrh	r3, [r3, #4]
 80017ca:	2b10      	cmp	r3, #16
 80017cc:	d105      	bne.n	80017da <PWM_write_range+0x82>
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	681a      	ldr	r2, [r3, #0]
 80017d4:	2300      	movs	r3, #0
 80017d6:	6493      	str	r3, [r2, #72]	@ 0x48
 80017d8:	e0b9      	b.n	800194e <PWM_write_range+0x1f6>
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	681a      	ldr	r2, [r3, #0]
 80017e0:	2300      	movs	r3, #0
 80017e2:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80017e4:	e0b3      	b.n	800194e <PWM_write_range+0x1f6>
    	pwm->period_cyc = (uint32_t) (pwm->CPU_FREQ / freq);
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	691b      	ldr	r3, [r3, #16]
 80017ea:	ee07 3a90 	vmov	s15, r3
 80017ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80017f2:	ed97 7a02 	vldr	s14, [r7, #8]
 80017f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80017fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80017fe:	ee17 2a90 	vmov	r2, s15
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	609a      	str	r2, [r3, #8]
    	pwm->prescaler = (uint16_t) ((pwm->period_cyc + 65535 - 1) / 65535) - 1; // Subtracting 1 since prescaler is zero-based
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	689b      	ldr	r3, [r3, #8]
 800180a:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 800180e:	33fe      	adds	r3, #254	@ 0xfe
 8001810:	4a53      	ldr	r2, [pc, #332]	@ (8001960 <PWM_write_range+0x208>)
 8001812:	fba2 2303 	umull	r2, r3, r2, r3
 8001816:	0bdb      	lsrs	r3, r3, #15
 8001818:	b29b      	uxth	r3, r3
 800181a:	3b01      	subs	r3, #1
 800181c:	b29a      	uxth	r2, r3
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	819a      	strh	r2, [r3, #12]
    	pwm->overflow = (uint16_t) ((pwm->CPU_FREQ / (float)(pwm->prescaler + 1) / freq) - 1);
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	691b      	ldr	r3, [r3, #16]
 8001826:	ee07 3a90 	vmov	s15, r3
 800182a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	899b      	ldrh	r3, [r3, #12]
 8001832:	3301      	adds	r3, #1
 8001834:	ee07 3a90 	vmov	s15, r3
 8001838:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800183c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001840:	ed97 7a02 	vldr	s14, [r7, #8]
 8001844:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001848:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800184c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001850:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001854:	ee17 3a90 	vmov	r3, s15
 8001858:	b29a      	uxth	r2, r3
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	81da      	strh	r2, [r3, #14]
    	pwm->OC = (uint16_t) (pwm->overflow * fabs(duty) / 65535.0);
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	89db      	ldrh	r3, [r3, #14]
 8001862:	4618      	mov	r0, r3
 8001864:	f7fe fe96 	bl	8000594 <__aeabi_i2d>
 8001868:	4604      	mov	r4, r0
 800186a:	460d      	mov	r5, r1
 800186c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001870:	eef0 7ae7 	vabs.f32	s15, s15
 8001874:	ee17 0a90 	vmov	r0, s15
 8001878:	f7fe fe9e 	bl	80005b8 <__aeabi_f2d>
 800187c:	4602      	mov	r2, r0
 800187e:	460b      	mov	r3, r1
 8001880:	4620      	mov	r0, r4
 8001882:	4629      	mov	r1, r5
 8001884:	f7fe fef0 	bl	8000668 <__aeabi_dmul>
 8001888:	4602      	mov	r2, r0
 800188a:	460b      	mov	r3, r1
 800188c:	4610      	mov	r0, r2
 800188e:	4619      	mov	r1, r3
 8001890:	a331      	add	r3, pc, #196	@ (adr r3, 8001958 <PWM_write_range+0x200>)
 8001892:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001896:	f7ff f811 	bl	80008bc <__aeabi_ddiv>
 800189a:	4602      	mov	r2, r0
 800189c:	460b      	mov	r3, r1
 800189e:	4610      	mov	r0, r2
 80018a0:	4619      	mov	r1, r3
 80018a2:	f7ff f97b 	bl	8000b9c <__aeabi_d2uiz>
 80018a6:	4603      	mov	r3, r0
 80018a8:	b29b      	uxth	r3, r3
 80018aa:	461a      	mov	r2, r3
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	615a      	str	r2, [r3, #20]
        __HAL_TIM_SET_PRESCALER(pwm->htimx, pwm->prescaler);
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	899a      	ldrh	r2, [r3, #12]
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	629a      	str	r2, [r3, #40]	@ 0x28
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	89da      	ldrh	r2, [r3, #14]
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	62da      	str	r2, [r3, #44]	@ 0x2c
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	89da      	ldrh	r2, [r3, #14]
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	60da      	str	r2, [r3, #12]
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	889b      	ldrh	r3, [r3, #4]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d106      	bne.n	80018e8 <PWM_write_range+0x190>
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	68fa      	ldr	r2, [r7, #12]
 80018e2:	6952      	ldr	r2, [r2, #20]
 80018e4:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80018e6:	e032      	b.n	800194e <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	889b      	ldrh	r3, [r3, #4]
 80018ec:	2b04      	cmp	r3, #4
 80018ee:	d106      	bne.n	80018fe <PWM_write_range+0x1a6>
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	681a      	ldr	r2, [r3, #0]
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	695b      	ldr	r3, [r3, #20]
 80018fa:	6393      	str	r3, [r2, #56]	@ 0x38
}
 80018fc:	e027      	b.n	800194e <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	889b      	ldrh	r3, [r3, #4]
 8001902:	2b08      	cmp	r3, #8
 8001904:	d106      	bne.n	8001914 <PWM_write_range+0x1bc>
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	681a      	ldr	r2, [r3, #0]
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	695b      	ldr	r3, [r3, #20]
 8001910:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8001912:	e01c      	b.n	800194e <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	889b      	ldrh	r3, [r3, #4]
 8001918:	2b0c      	cmp	r3, #12
 800191a:	d106      	bne.n	800192a <PWM_write_range+0x1d2>
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	681a      	ldr	r2, [r3, #0]
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	695b      	ldr	r3, [r3, #20]
 8001926:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8001928:	e011      	b.n	800194e <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	889b      	ldrh	r3, [r3, #4]
 800192e:	2b10      	cmp	r3, #16
 8001930:	d106      	bne.n	8001940 <PWM_write_range+0x1e8>
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	681a      	ldr	r2, [r3, #0]
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	695b      	ldr	r3, [r3, #20]
 800193c:	6493      	str	r3, [r2, #72]	@ 0x48
}
 800193e:	e006      	b.n	800194e <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	681a      	ldr	r2, [r3, #0]
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	695b      	ldr	r3, [r3, #20]
 800194a:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 800194c:	e7ff      	b.n	800194e <PWM_write_range+0x1f6>
 800194e:	bf00      	nop
 8001950:	3710      	adds	r7, #16
 8001952:	46bd      	mov	sp, r7
 8001954:	bdb0      	pop	{r4, r5, r7, pc}
 8001956:	bf00      	nop
 8001958:	00000000 	.word	0x00000000
 800195c:	40efffe0 	.word	0x40efffe0
 8001960:	80008001 	.word	0x80008001

08001964 <QEI_init>:
* Created on: Mar 30, 2024
* Author: beamk
*/
#include "QEI.h"

void QEI_init(QEI *qei, TIM_HandleTypeDef *htimx, int32_t ppr, uint32_t freq, float ratio) {
 8001964:	b580      	push	{r7, lr}
 8001966:	b086      	sub	sp, #24
 8001968:	af00      	add	r7, sp, #0
 800196a:	6178      	str	r0, [r7, #20]
 800196c:	6139      	str	r1, [r7, #16]
 800196e:	60fa      	str	r2, [r7, #12]
 8001970:	60bb      	str	r3, [r7, #8]
 8001972:	ed87 0a01 	vstr	s0, [r7, #4]
    qei->htimx = htimx;
 8001976:	697b      	ldr	r3, [r7, #20]
 8001978:	693a      	ldr	r2, [r7, #16]
 800197a:	611a      	str	r2, [r3, #16]
    qei->ppr = ppr;
 800197c:	697b      	ldr	r3, [r7, #20]
 800197e:	68fa      	ldr	r2, [r7, #12]
 8001980:	619a      	str	r2, [r3, #24]
    qei->freq = freq;
 8001982:	697b      	ldr	r3, [r7, #20]
 8001984:	68ba      	ldr	r2, [r7, #8]
 8001986:	621a      	str	r2, [r3, #32]
    qei->c[NOW] = 0;
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	2200      	movs	r2, #0
 800198c:	601a      	str	r2, [r3, #0]
    qei->c[PREV] = 0;
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	2200      	movs	r2, #0
 8001992:	605a      	str	r2, [r3, #4]
    qei->pps = 0;
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	f04f 0200 	mov.w	r2, #0
 800199a:	625a      	str	r2, [r3, #36]	@ 0x24
    qei->rpm = 0;
 800199c:	697b      	ldr	r3, [r7, #20]
 800199e:	f04f 0200 	mov.w	r2, #0
 80019a2:	629a      	str	r2, [r3, #40]	@ 0x28
    qei->radps = 0;
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	f04f 0200 	mov.w	r2, #0
 80019aa:	62da      	str	r2, [r3, #44]	@ 0x2c
    qei->enc_period = 65536 - (65536 % ppr);
 80019ac:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80019b0:	68fa      	ldr	r2, [r7, #12]
 80019b2:	fb93 f2f2 	sdiv	r2, r3, r2
 80019b6:	68f9      	ldr	r1, [r7, #12]
 80019b8:	fb01 f202 	mul.w	r2, r1, r2
 80019bc:	1a9b      	subs	r3, r3, r2
 80019be:	f5c3 3280 	rsb	r2, r3, #65536	@ 0x10000
 80019c2:	697b      	ldr	r3, [r7, #20]
 80019c4:	615a      	str	r2, [r3, #20]
    qei->pulses = 0;
 80019c6:	697b      	ldr	r3, [r7, #20]
 80019c8:	2200      	movs	r2, #0
 80019ca:	631a      	str	r2, [r3, #48]	@ 0x30
    //qei->pulsesf = 0;
    qei->revs = 0;
 80019cc:	697b      	ldr	r3, [r7, #20]
 80019ce:	f04f 0200 	mov.w	r2, #0
 80019d2:	635a      	str	r2, [r3, #52]	@ 0x34
    qei->rads = 0;
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	f04f 0200 	mov.w	r2, #0
 80019da:	639a      	str	r2, [r3, #56]	@ 0x38
    qei->mm = 0;
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	f04f 0200 	mov.w	r2, #0
 80019e2:	641a      	str	r2, [r3, #64]	@ 0x40
    qei->mmps = 0;
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	f04f 0200 	mov.w	r2, #0
 80019ea:	645a      	str	r2, [r3, #68]	@ 0x44

    qei->ratio = ratio;  // Gear ratio or scaling factor
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	687a      	ldr	r2, [r7, #4]
 80019f0:	649a      	str	r2, [r3, #72]	@ 0x48
    HAL_TIM_Encoder_Start(htimx, TIM_CHANNEL_ALL);
 80019f2:	213c      	movs	r1, #60	@ 0x3c
 80019f4:	6938      	ldr	r0, [r7, #16]
 80019f6:	f005 fac3 	bl	8006f80 <HAL_TIM_Encoder_Start>
}
 80019fa:	bf00      	nop
 80019fc:	3718      	adds	r7, #24
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	0000      	movs	r0, r0
 8001a04:	0000      	movs	r0, r0
	...

08001a08 <QEI_get_diff_count>:

void QEI_get_diff_count(QEI *qei) {
 8001a08:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001a0c:	b084      	sub	sp, #16
 8001a0e:	af00      	add	r7, sp, #0
 8001a10:	6078      	str	r0, [r7, #4]
    qei->c[NOW] = __HAL_TIM_GET_COUNTER(qei->htimx); // Update the current count
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	691b      	ldr	r3, [r3, #16]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	601a      	str	r2, [r3, #0]

    // Calculate the difference in counts
    int32_t diff_counts = qei->c[NOW] - qei->c[PREV];
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681a      	ldr	r2, [r3, #0]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	1ad3      	subs	r3, r2, r3
 8001a28:	60fb      	str	r3, [r7, #12]

    //Unwrap
    if (diff_counts > qei->enc_period / 2) {
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	695b      	ldr	r3, [r3, #20]
 8001a2e:	0fda      	lsrs	r2, r3, #31
 8001a30:	4413      	add	r3, r2
 8001a32:	105b      	asrs	r3, r3, #1
 8001a34:	461a      	mov	r2, r3
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	dd05      	ble.n	8001a48 <QEI_get_diff_count+0x40>
        diff_counts -= qei->enc_period;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	695b      	ldr	r3, [r3, #20]
 8001a40:	68fa      	ldr	r2, [r7, #12]
 8001a42:	1ad3      	subs	r3, r2, r3
 8001a44:	60fb      	str	r3, [r7, #12]
 8001a46:	e00e      	b.n	8001a66 <QEI_get_diff_count+0x5e>
    } else if (diff_counts < -(qei->enc_period) / 2) {
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	695b      	ldr	r3, [r3, #20]
 8001a4c:	425b      	negs	r3, r3
 8001a4e:	0fda      	lsrs	r2, r3, #31
 8001a50:	4413      	add	r3, r2
 8001a52:	105b      	asrs	r3, r3, #1
 8001a54:	461a      	mov	r2, r3
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	da04      	bge.n	8001a66 <QEI_get_diff_count+0x5e>
        diff_counts += qei->enc_period;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	695b      	ldr	r3, [r3, #20]
 8001a60:	68fa      	ldr	r2, [r7, #12]
 8001a62:	4413      	add	r3, r2
 8001a64:	60fb      	str	r3, [r7, #12]
    }

    qei->diff_counts = diff_counts;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	68fa      	ldr	r2, [r7, #12]
 8001a6a:	61da      	str	r2, [r3, #28]
    //qei->diff_countsf = (float)diff_counts*1.25;

    // Calculate Position with ratio adjustment
    qei->pulses += qei->diff_counts;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	69db      	ldr	r3, [r3, #28]
 8001a74:	441a      	add	r2, r3
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	631a      	str	r2, [r3, #48]	@ 0x30
    //qei->pulsesf += qei->diff_countsf;

    // Apply ratio to all position calculations
    qei->revs += (qei->diff_counts / (float)(qei->ppr)) * qei->ratio;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	69db      	ldr	r3, [r3, #28]
 8001a84:	ee07 3a90 	vmov	s15, r3
 8001a88:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	699b      	ldr	r3, [r3, #24]
 8001a90:	ee07 3a90 	vmov	s15, r3
 8001a94:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a98:	eec6 6a27 	vdiv.f32	s13, s12, s15
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 8001aa2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001aa6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
    qei->mm += (qei->diff_counts / (float)(qei->ppr)) * 10.0 * qei->ratio;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f7fe fd7f 	bl	80005b8 <__aeabi_f2d>
 8001aba:	4604      	mov	r4, r0
 8001abc:	460d      	mov	r5, r1
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	69db      	ldr	r3, [r3, #28]
 8001ac2:	ee07 3a90 	vmov	s15, r3
 8001ac6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	699b      	ldr	r3, [r3, #24]
 8001ace:	ee07 3a90 	vmov	s15, r3
 8001ad2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ad6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001ada:	ee16 0a90 	vmov	r0, s13
 8001ade:	f7fe fd6b 	bl	80005b8 <__aeabi_f2d>
 8001ae2:	f04f 0200 	mov.w	r2, #0
 8001ae6:	4b36      	ldr	r3, [pc, #216]	@ (8001bc0 <QEI_get_diff_count+0x1b8>)
 8001ae8:	f7fe fdbe 	bl	8000668 <__aeabi_dmul>
 8001aec:	4602      	mov	r2, r0
 8001aee:	460b      	mov	r3, r1
 8001af0:	4690      	mov	r8, r2
 8001af2:	4699      	mov	r9, r3
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001af8:	4618      	mov	r0, r3
 8001afa:	f7fe fd5d 	bl	80005b8 <__aeabi_f2d>
 8001afe:	4602      	mov	r2, r0
 8001b00:	460b      	mov	r3, r1
 8001b02:	4640      	mov	r0, r8
 8001b04:	4649      	mov	r1, r9
 8001b06:	f7fe fdaf 	bl	8000668 <__aeabi_dmul>
 8001b0a:	4602      	mov	r2, r0
 8001b0c:	460b      	mov	r3, r1
 8001b0e:	4620      	mov	r0, r4
 8001b10:	4629      	mov	r1, r5
 8001b12:	f7fe fbf3 	bl	80002fc <__adddf3>
 8001b16:	4602      	mov	r2, r0
 8001b18:	460b      	mov	r3, r1
 8001b1a:	4610      	mov	r0, r2
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	f7ff f85d 	bl	8000bdc <__aeabi_d2f>
 8001b22:	4602      	mov	r2, r0
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	641a      	str	r2, [r3, #64]	@ 0x40
    qei->rads += (qei->diff_counts / (float)(qei->ppr)) * 2 * M_PI * qei->ratio;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f7fe fd43 	bl	80005b8 <__aeabi_f2d>
 8001b32:	4604      	mov	r4, r0
 8001b34:	460d      	mov	r5, r1
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	69db      	ldr	r3, [r3, #28]
 8001b3a:	ee07 3a90 	vmov	s15, r3
 8001b3e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	699b      	ldr	r3, [r3, #24]
 8001b46:	ee07 3a90 	vmov	s15, r3
 8001b4a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b4e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b52:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001b56:	ee17 0a90 	vmov	r0, s15
 8001b5a:	f7fe fd2d 	bl	80005b8 <__aeabi_f2d>
 8001b5e:	a316      	add	r3, pc, #88	@ (adr r3, 8001bb8 <QEI_get_diff_count+0x1b0>)
 8001b60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b64:	f7fe fd80 	bl	8000668 <__aeabi_dmul>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	460b      	mov	r3, r1
 8001b6c:	4690      	mov	r8, r2
 8001b6e:	4699      	mov	r9, r3
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b74:	4618      	mov	r0, r3
 8001b76:	f7fe fd1f 	bl	80005b8 <__aeabi_f2d>
 8001b7a:	4602      	mov	r2, r0
 8001b7c:	460b      	mov	r3, r1
 8001b7e:	4640      	mov	r0, r8
 8001b80:	4649      	mov	r1, r9
 8001b82:	f7fe fd71 	bl	8000668 <__aeabi_dmul>
 8001b86:	4602      	mov	r2, r0
 8001b88:	460b      	mov	r3, r1
 8001b8a:	4620      	mov	r0, r4
 8001b8c:	4629      	mov	r1, r5
 8001b8e:	f7fe fbb5 	bl	80002fc <__adddf3>
 8001b92:	4602      	mov	r2, r0
 8001b94:	460b      	mov	r3, r1
 8001b96:	4610      	mov	r0, r2
 8001b98:	4619      	mov	r1, r3
 8001b9a:	f7ff f81f 	bl	8000bdc <__aeabi_d2f>
 8001b9e:	4602      	mov	r2, r0
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	639a      	str	r2, [r3, #56]	@ 0x38

    qei->c[PREV] = qei->c[NOW]; // Store the previous count
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681a      	ldr	r2, [r3, #0]
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	605a      	str	r2, [r3, #4]
}
 8001bac:	bf00      	nop
 8001bae:	3710      	adds	r7, #16
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001bb6:	bf00      	nop
 8001bb8:	54442d18 	.word	0x54442d18
 8001bbc:	400921fb 	.word	0x400921fb
 8001bc0:	40240000 	.word	0x40240000
 8001bc4:	00000000 	.word	0x00000000

08001bc8 <QEI_compute_data>:

void QEI_compute_data(QEI *qei) {
 8001bc8:	b5b0      	push	{r4, r5, r7, lr}
 8001bca:	b084      	sub	sp, #16
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
    // Calculate Velocity with ratio adjustment
    qei->pps = qei->diff_counts * ((int)(qei->freq));
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	69db      	ldr	r3, [r3, #28]
 8001bd4:	687a      	ldr	r2, [r7, #4]
 8001bd6:	6a12      	ldr	r2, [r2, #32]
 8001bd8:	fb02 f303 	mul.w	r3, r2, r3
 8001bdc:	ee07 3a90 	vmov	s15, r3
 8001be0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

    // Apply ratio to all velocity calculations
    qei->rpm = qei->pps * 60.0 / (float)(qei->ppr) * qei->ratio;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f7fe fce2 	bl	80005b8 <__aeabi_f2d>
 8001bf4:	f04f 0200 	mov.w	r2, #0
 8001bf8:	4b6b      	ldr	r3, [pc, #428]	@ (8001da8 <QEI_compute_data+0x1e0>)
 8001bfa:	f7fe fd35 	bl	8000668 <__aeabi_dmul>
 8001bfe:	4602      	mov	r2, r0
 8001c00:	460b      	mov	r3, r1
 8001c02:	4614      	mov	r4, r2
 8001c04:	461d      	mov	r5, r3
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	699b      	ldr	r3, [r3, #24]
 8001c0a:	ee07 3a90 	vmov	s15, r3
 8001c0e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c12:	ee17 0a90 	vmov	r0, s15
 8001c16:	f7fe fccf 	bl	80005b8 <__aeabi_f2d>
 8001c1a:	4602      	mov	r2, r0
 8001c1c:	460b      	mov	r3, r1
 8001c1e:	4620      	mov	r0, r4
 8001c20:	4629      	mov	r1, r5
 8001c22:	f7fe fe4b 	bl	80008bc <__aeabi_ddiv>
 8001c26:	4602      	mov	r2, r0
 8001c28:	460b      	mov	r3, r1
 8001c2a:	4614      	mov	r4, r2
 8001c2c:	461d      	mov	r5, r3
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c32:	4618      	mov	r0, r3
 8001c34:	f7fe fcc0 	bl	80005b8 <__aeabi_f2d>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	460b      	mov	r3, r1
 8001c3c:	4620      	mov	r0, r4
 8001c3e:	4629      	mov	r1, r5
 8001c40:	f7fe fd12 	bl	8000668 <__aeabi_dmul>
 8001c44:	4602      	mov	r2, r0
 8001c46:	460b      	mov	r3, r1
 8001c48:	4610      	mov	r0, r2
 8001c4a:	4619      	mov	r1, r3
 8001c4c:	f7fe ffc6 	bl	8000bdc <__aeabi_d2f>
 8001c50:	4602      	mov	r2, r0
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	629a      	str	r2, [r3, #40]	@ 0x28
    qei->radps = qei->pps * 2 * M_PI / (float)(qei->ppr) * qei->ratio;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8001c5c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001c60:	ee17 0a90 	vmov	r0, s15
 8001c64:	f7fe fca8 	bl	80005b8 <__aeabi_f2d>
 8001c68:	a34d      	add	r3, pc, #308	@ (adr r3, 8001da0 <QEI_compute_data+0x1d8>)
 8001c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c6e:	f7fe fcfb 	bl	8000668 <__aeabi_dmul>
 8001c72:	4602      	mov	r2, r0
 8001c74:	460b      	mov	r3, r1
 8001c76:	4614      	mov	r4, r2
 8001c78:	461d      	mov	r5, r3
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	699b      	ldr	r3, [r3, #24]
 8001c7e:	ee07 3a90 	vmov	s15, r3
 8001c82:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c86:	ee17 0a90 	vmov	r0, s15
 8001c8a:	f7fe fc95 	bl	80005b8 <__aeabi_f2d>
 8001c8e:	4602      	mov	r2, r0
 8001c90:	460b      	mov	r3, r1
 8001c92:	4620      	mov	r0, r4
 8001c94:	4629      	mov	r1, r5
 8001c96:	f7fe fe11 	bl	80008bc <__aeabi_ddiv>
 8001c9a:	4602      	mov	r2, r0
 8001c9c:	460b      	mov	r3, r1
 8001c9e:	4614      	mov	r4, r2
 8001ca0:	461d      	mov	r5, r3
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f7fe fc86 	bl	80005b8 <__aeabi_f2d>
 8001cac:	4602      	mov	r2, r0
 8001cae:	460b      	mov	r3, r1
 8001cb0:	4620      	mov	r0, r4
 8001cb2:	4629      	mov	r1, r5
 8001cb4:	f7fe fcd8 	bl	8000668 <__aeabi_dmul>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	460b      	mov	r3, r1
 8001cbc:	4610      	mov	r0, r2
 8001cbe:	4619      	mov	r1, r3
 8001cc0:	f7fe ff8c 	bl	8000bdc <__aeabi_d2f>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	62da      	str	r2, [r3, #44]	@ 0x2c
    qei->mmps = qei->pps * 10.0 / (float)(qei->ppr) * qei->ratio;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f7fe fc72 	bl	80005b8 <__aeabi_f2d>
 8001cd4:	f04f 0200 	mov.w	r2, #0
 8001cd8:	4b34      	ldr	r3, [pc, #208]	@ (8001dac <QEI_compute_data+0x1e4>)
 8001cda:	f7fe fcc5 	bl	8000668 <__aeabi_dmul>
 8001cde:	4602      	mov	r2, r0
 8001ce0:	460b      	mov	r3, r1
 8001ce2:	4614      	mov	r4, r2
 8001ce4:	461d      	mov	r5, r3
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	699b      	ldr	r3, [r3, #24]
 8001cea:	ee07 3a90 	vmov	s15, r3
 8001cee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cf2:	ee17 0a90 	vmov	r0, s15
 8001cf6:	f7fe fc5f 	bl	80005b8 <__aeabi_f2d>
 8001cfa:	4602      	mov	r2, r0
 8001cfc:	460b      	mov	r3, r1
 8001cfe:	4620      	mov	r0, r4
 8001d00:	4629      	mov	r1, r5
 8001d02:	f7fe fddb 	bl	80008bc <__aeabi_ddiv>
 8001d06:	4602      	mov	r2, r0
 8001d08:	460b      	mov	r3, r1
 8001d0a:	4614      	mov	r4, r2
 8001d0c:	461d      	mov	r5, r3
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d12:	4618      	mov	r0, r3
 8001d14:	f7fe fc50 	bl	80005b8 <__aeabi_f2d>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	460b      	mov	r3, r1
 8001d1c:	4620      	mov	r0, r4
 8001d1e:	4629      	mov	r1, r5
 8001d20:	f7fe fca2 	bl	8000668 <__aeabi_dmul>
 8001d24:	4602      	mov	r2, r0
 8001d26:	460b      	mov	r3, r1
 8001d28:	4610      	mov	r0, r2
 8001d2a:	4619      	mov	r1, r3
 8001d2c:	f7fe ff56 	bl	8000bdc <__aeabi_d2f>
 8001d30:	4602      	mov	r2, r0
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	645a      	str	r2, [r3, #68]	@ 0x44

    // Calculate Acceleration with ratio adjustment
    qei->r[NOW] = qei->radps;  // radps already has ratio applied
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	609a      	str	r2, [r3, #8]
    float diff_velocity = (qei->r[NOW] - qei->r[PREV]);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	ed93 7a02 	vldr	s14, [r3, #8]
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	edd3 7a03 	vldr	s15, [r3, #12]
 8001d4a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d4e:	edc7 7a03 	vstr	s15, [r7, #12]
    if (diff_velocity == 0) {
 8001d52:	edd7 7a03 	vldr	s15, [r7, #12]
 8001d56:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001d5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d5e:	d104      	bne.n	8001d6a <QEI_compute_data+0x1a2>
        qei->radpss = 0;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	f04f 0200 	mov.w	r2, #0
 8001d66:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001d68:	e00f      	b.n	8001d8a <QEI_compute_data+0x1c2>
    } else {
        qei->radpss = diff_velocity / (1 / (qei->freq));
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6a1b      	ldr	r3, [r3, #32]
 8001d6e:	2b01      	cmp	r3, #1
 8001d70:	d102      	bne.n	8001d78 <QEI_compute_data+0x1b0>
 8001d72:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001d76:	e001      	b.n	8001d7c <QEI_compute_data+0x1b4>
 8001d78:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8001db0 <QEI_compute_data+0x1e8>
 8001d7c:	edd7 6a03 	vldr	s13, [r7, #12]
 8001d80:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
        // No need to multiply by ratio again since diff_velocity already includes it
    }
    qei->r[PREV] = qei->r[NOW]; // Store the previous count
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	689a      	ldr	r2, [r3, #8]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	60da      	str	r2, [r3, #12]
}
 8001d92:	bf00      	nop
 8001d94:	3710      	adds	r7, #16
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bdb0      	pop	{r4, r5, r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	f3af 8000 	nop.w
 8001da0:	54442d18 	.word	0x54442d18
 8001da4:	400921fb 	.word	0x400921fb
 8001da8:	404e0000 	.word	0x404e0000
 8001dac:	40240000 	.word	0x40240000
 8001db0:	00000000 	.word	0x00000000

08001db4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001db4:	b580      	push	{r7, lr}
 8001db6:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001db8:	4a04      	ldr	r2, [pc, #16]	@ (8001dcc <MX_FREERTOS_Init+0x18>)
 8001dba:	2100      	movs	r1, #0
 8001dbc:	4804      	ldr	r0, [pc, #16]	@ (8001dd0 <MX_FREERTOS_Init+0x1c>)
 8001dbe:	f008 fa13 	bl	800a1e8 <osThreadNew>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	4a03      	ldr	r2, [pc, #12]	@ (8001dd4 <MX_FREERTOS_Init+0x20>)
 8001dc6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8001dc8:	bf00      	nop
 8001dca:	bd80      	pop	{r7, pc}
 8001dcc:	0801d518 	.word	0x0801d518
 8001dd0:	08002639 	.word	0x08002639
 8001dd4:	200004a4 	.word	0x200004a4

08001dd8 <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b08a      	sub	sp, #40	@ 0x28
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8001de0:	2300      	movs	r3, #0
 8001de2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8001de4:	f009 fad4 	bl	800b390 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8001de8:	4b5a      	ldr	r3, [pc, #360]	@ (8001f54 <pvPortMallocMicroROS+0x17c>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d101      	bne.n	8001df4 <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 8001df0:	f000 f986 	bl	8002100 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8001df4:	4b58      	ldr	r3, [pc, #352]	@ (8001f58 <pvPortMallocMicroROS+0x180>)
 8001df6:	681a      	ldr	r2, [r3, #0]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	4013      	ands	r3, r2
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	f040 8090 	bne.w	8001f22 <pvPortMallocMicroROS+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d01e      	beq.n	8001e46 <pvPortMallocMicroROS+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8001e08:	2208      	movs	r2, #8
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	4413      	add	r3, r2
 8001e0e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	f003 0307 	and.w	r3, r3, #7
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d015      	beq.n	8001e46 <pvPortMallocMicroROS+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	f023 0307 	bic.w	r3, r3, #7
 8001e20:	3308      	adds	r3, #8
 8001e22:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	f003 0307 	and.w	r3, r3, #7
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d00b      	beq.n	8001e46 <pvPortMallocMicroROS+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001e2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001e32:	f383 8811 	msr	BASEPRI, r3
 8001e36:	f3bf 8f6f 	isb	sy
 8001e3a:	f3bf 8f4f 	dsb	sy
 8001e3e:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001e40:	bf00      	nop
 8001e42:	bf00      	nop
 8001e44:	e7fd      	b.n	8001e42 <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d06a      	beq.n	8001f22 <pvPortMallocMicroROS+0x14a>
 8001e4c:	4b43      	ldr	r3, [pc, #268]	@ (8001f5c <pvPortMallocMicroROS+0x184>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	687a      	ldr	r2, [r7, #4]
 8001e52:	429a      	cmp	r2, r3
 8001e54:	d865      	bhi.n	8001f22 <pvPortMallocMicroROS+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8001e56:	4b42      	ldr	r3, [pc, #264]	@ (8001f60 <pvPortMallocMicroROS+0x188>)
 8001e58:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8001e5a:	4b41      	ldr	r3, [pc, #260]	@ (8001f60 <pvPortMallocMicroROS+0x188>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001e60:	e004      	b.n	8001e6c <pvPortMallocMicroROS+0x94>
				{
					pxPreviousBlock = pxBlock;
 8001e62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e64:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8001e66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001e6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	687a      	ldr	r2, [r7, #4]
 8001e72:	429a      	cmp	r2, r3
 8001e74:	d903      	bls.n	8001e7e <pvPortMallocMicroROS+0xa6>
 8001e76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d1f1      	bne.n	8001e62 <pvPortMallocMicroROS+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8001e7e:	4b35      	ldr	r3, [pc, #212]	@ (8001f54 <pvPortMallocMicroROS+0x17c>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001e84:	429a      	cmp	r2, r3
 8001e86:	d04c      	beq.n	8001f22 <pvPortMallocMicroROS+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001e88:	6a3b      	ldr	r3, [r7, #32]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	2208      	movs	r2, #8
 8001e8e:	4413      	add	r3, r2
 8001e90:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8001e92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e94:	681a      	ldr	r2, [r3, #0]
 8001e96:	6a3b      	ldr	r3, [r7, #32]
 8001e98:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8001e9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e9c:	685a      	ldr	r2, [r3, #4]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	1ad2      	subs	r2, r2, r3
 8001ea2:	2308      	movs	r3, #8
 8001ea4:	005b      	lsls	r3, r3, #1
 8001ea6:	429a      	cmp	r2, r3
 8001ea8:	d920      	bls.n	8001eec <pvPortMallocMicroROS+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8001eaa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	4413      	add	r3, r2
 8001eb0:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001eb2:	69bb      	ldr	r3, [r7, #24]
 8001eb4:	f003 0307 	and.w	r3, r3, #7
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d00b      	beq.n	8001ed4 <pvPortMallocMicroROS+0xfc>
	__asm volatile
 8001ebc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001ec0:	f383 8811 	msr	BASEPRI, r3
 8001ec4:	f3bf 8f6f 	isb	sy
 8001ec8:	f3bf 8f4f 	dsb	sy
 8001ecc:	613b      	str	r3, [r7, #16]
}
 8001ece:	bf00      	nop
 8001ed0:	bf00      	nop
 8001ed2:	e7fd      	b.n	8001ed0 <pvPortMallocMicroROS+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8001ed4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ed6:	685a      	ldr	r2, [r3, #4]
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	1ad2      	subs	r2, r2, r3
 8001edc:	69bb      	ldr	r3, [r7, #24]
 8001ede:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8001ee0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ee2:	687a      	ldr	r2, [r7, #4]
 8001ee4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8001ee6:	69b8      	ldr	r0, [r7, #24]
 8001ee8:	f000 f96c 	bl	80021c4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001eec:	4b1b      	ldr	r3, [pc, #108]	@ (8001f5c <pvPortMallocMicroROS+0x184>)
 8001eee:	681a      	ldr	r2, [r3, #0]
 8001ef0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	1ad3      	subs	r3, r2, r3
 8001ef6:	4a19      	ldr	r2, [pc, #100]	@ (8001f5c <pvPortMallocMicroROS+0x184>)
 8001ef8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001efa:	4b18      	ldr	r3, [pc, #96]	@ (8001f5c <pvPortMallocMicroROS+0x184>)
 8001efc:	681a      	ldr	r2, [r3, #0]
 8001efe:	4b19      	ldr	r3, [pc, #100]	@ (8001f64 <pvPortMallocMicroROS+0x18c>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	429a      	cmp	r2, r3
 8001f04:	d203      	bcs.n	8001f0e <pvPortMallocMicroROS+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8001f06:	4b15      	ldr	r3, [pc, #84]	@ (8001f5c <pvPortMallocMicroROS+0x184>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4a16      	ldr	r2, [pc, #88]	@ (8001f64 <pvPortMallocMicroROS+0x18c>)
 8001f0c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8001f0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f10:	685a      	ldr	r2, [r3, #4]
 8001f12:	4b11      	ldr	r3, [pc, #68]	@ (8001f58 <pvPortMallocMicroROS+0x180>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	431a      	orrs	r2, r3
 8001f18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f1a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8001f1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f1e:	2200      	movs	r2, #0
 8001f20:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8001f22:	f009 fa43 	bl	800b3ac <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8001f26:	69fb      	ldr	r3, [r7, #28]
 8001f28:	f003 0307 	and.w	r3, r3, #7
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d00b      	beq.n	8001f48 <pvPortMallocMicroROS+0x170>
	__asm volatile
 8001f30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001f34:	f383 8811 	msr	BASEPRI, r3
 8001f38:	f3bf 8f6f 	isb	sy
 8001f3c:	f3bf 8f4f 	dsb	sy
 8001f40:	60fb      	str	r3, [r7, #12]
}
 8001f42:	bf00      	nop
 8001f44:	bf00      	nop
 8001f46:	e7fd      	b.n	8001f44 <pvPortMallocMicroROS+0x16c>
	return pvReturn;
 8001f48:	69fb      	ldr	r3, [r7, #28]
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	3728      	adds	r7, #40	@ 0x28
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	bf00      	nop
 8001f54:	20003fec 	.word	0x20003fec
 8001f58:	20003ff8 	.word	0x20003ff8
 8001f5c:	20003ff0 	.word	0x20003ff0
 8001f60:	20003fe4 	.word	0x20003fe4
 8001f64:	20003ff4 	.word	0x20003ff4

08001f68 <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b086      	sub	sp, #24
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d04a      	beq.n	8002010 <vPortFreeMicroROS+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8001f7a:	2308      	movs	r3, #8
 8001f7c:	425b      	negs	r3, r3
 8001f7e:	697a      	ldr	r2, [r7, #20]
 8001f80:	4413      	add	r3, r2
 8001f82:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8001f88:	693b      	ldr	r3, [r7, #16]
 8001f8a:	685a      	ldr	r2, [r3, #4]
 8001f8c:	4b22      	ldr	r3, [pc, #136]	@ (8002018 <vPortFreeMicroROS+0xb0>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4013      	ands	r3, r2
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d10b      	bne.n	8001fae <vPortFreeMicroROS+0x46>
	__asm volatile
 8001f96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001f9a:	f383 8811 	msr	BASEPRI, r3
 8001f9e:	f3bf 8f6f 	isb	sy
 8001fa2:	f3bf 8f4f 	dsb	sy
 8001fa6:	60fb      	str	r3, [r7, #12]
}
 8001fa8:	bf00      	nop
 8001faa:	bf00      	nop
 8001fac:	e7fd      	b.n	8001faa <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8001fae:	693b      	ldr	r3, [r7, #16]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d00b      	beq.n	8001fce <vPortFreeMicroROS+0x66>
	__asm volatile
 8001fb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001fba:	f383 8811 	msr	BASEPRI, r3
 8001fbe:	f3bf 8f6f 	isb	sy
 8001fc2:	f3bf 8f4f 	dsb	sy
 8001fc6:	60bb      	str	r3, [r7, #8]
}
 8001fc8:	bf00      	nop
 8001fca:	bf00      	nop
 8001fcc:	e7fd      	b.n	8001fca <vPortFreeMicroROS+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	685a      	ldr	r2, [r3, #4]
 8001fd2:	4b11      	ldr	r3, [pc, #68]	@ (8002018 <vPortFreeMicroROS+0xb0>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4013      	ands	r3, r2
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d019      	beq.n	8002010 <vPortFreeMicroROS+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8001fdc:	693b      	ldr	r3, [r7, #16]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d115      	bne.n	8002010 <vPortFreeMicroROS+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8001fe4:	693b      	ldr	r3, [r7, #16]
 8001fe6:	685a      	ldr	r2, [r3, #4]
 8001fe8:	4b0b      	ldr	r3, [pc, #44]	@ (8002018 <vPortFreeMicroROS+0xb0>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	43db      	mvns	r3, r3
 8001fee:	401a      	ands	r2, r3
 8001ff0:	693b      	ldr	r3, [r7, #16]
 8001ff2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8001ff4:	f009 f9cc 	bl	800b390 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	685a      	ldr	r2, [r3, #4]
 8001ffc:	4b07      	ldr	r3, [pc, #28]	@ (800201c <vPortFreeMicroROS+0xb4>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4413      	add	r3, r2
 8002002:	4a06      	ldr	r2, [pc, #24]	@ (800201c <vPortFreeMicroROS+0xb4>)
 8002004:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002006:	6938      	ldr	r0, [r7, #16]
 8002008:	f000 f8dc 	bl	80021c4 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800200c:	f009 f9ce 	bl	800b3ac <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8002010:	bf00      	nop
 8002012:	3718      	adds	r7, #24
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}
 8002018:	20003ff8 	.word	0x20003ff8
 800201c:	20003ff0 	.word	0x20003ff0

08002020 <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 8002020:	b480      	push	{r7}
 8002022:	b087      	sub	sp, #28
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 800202c:	2308      	movs	r3, #8
 800202e:	425b      	negs	r3, r3
 8002030:	697a      	ldr	r2, [r7, #20]
 8002032:	4413      	add	r3, r2
 8002034:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 8002036:	697b      	ldr	r3, [r7, #20]
 8002038:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	685a      	ldr	r2, [r3, #4]
 800203e:	4b06      	ldr	r3, [pc, #24]	@ (8002058 <getBlockSize+0x38>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	43db      	mvns	r3, r3
 8002044:	4013      	ands	r3, r2
 8002046:	60fb      	str	r3, [r7, #12]

	return count;
 8002048:	68fb      	ldr	r3, [r7, #12]
}
 800204a:	4618      	mov	r0, r3
 800204c:	371c      	adds	r7, #28
 800204e:	46bd      	mov	sp, r7
 8002050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002054:	4770      	bx	lr
 8002056:	bf00      	nop
 8002058:	20003ff8 	.word	0x20003ff8

0800205c <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b084      	sub	sp, #16
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
 8002064:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8002066:	f009 f993 	bl	800b390 <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 800206a:	6838      	ldr	r0, [r7, #0]
 800206c:	f7ff feb4 	bl	8001dd8 <pvPortMallocMicroROS>
 8002070:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 8002072:	68bb      	ldr	r3, [r7, #8]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d017      	beq.n	80020a8 <pvPortReallocMicroROS+0x4c>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d014      	beq.n	80020a8 <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 800207e:	6878      	ldr	r0, [r7, #4]
 8002080:	f7ff ffce 	bl	8002020 <getBlockSize>
 8002084:	4603      	mov	r3, r0
 8002086:	2208      	movs	r2, #8
 8002088:	1a9b      	subs	r3, r3, r2
 800208a:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 800208c:	683a      	ldr	r2, [r7, #0]
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	429a      	cmp	r2, r3
 8002092:	d201      	bcs.n	8002098 <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 8002098:	68fa      	ldr	r2, [r7, #12]
 800209a:	6879      	ldr	r1, [r7, #4]
 800209c:	68b8      	ldr	r0, [r7, #8]
 800209e:	f019 fa2e 	bl	801b4fe <memcpy>

		vPortFreeMicroROS(pv);
 80020a2:	6878      	ldr	r0, [r7, #4]
 80020a4:	f7ff ff60 	bl	8001f68 <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 80020a8:	f009 f980 	bl	800b3ac <xTaskResumeAll>

	return newmem;
 80020ac:	68bb      	ldr	r3, [r7, #8]
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	3710      	adds	r7, #16
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}

080020b6 <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 80020b6:	b580      	push	{r7, lr}
 80020b8:	b086      	sub	sp, #24
 80020ba:	af00      	add	r7, sp, #0
 80020bc:	6078      	str	r0, [r7, #4]
 80020be:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 80020c0:	f009 f966 	bl	800b390 <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	687a      	ldr	r2, [r7, #4]
 80020c8:	fb02 f303 	mul.w	r3, r2, r3
 80020cc:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 80020ce:	6978      	ldr	r0, [r7, #20]
 80020d0:	f7ff fe82 	bl	8001dd8 <pvPortMallocMicroROS>
 80020d4:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	613b      	str	r3, [r7, #16]

  	while(count--)
 80020da:	e004      	b.n	80020e6 <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 80020dc:	693b      	ldr	r3, [r7, #16]
 80020de:	1c5a      	adds	r2, r3, #1
 80020e0:	613a      	str	r2, [r7, #16]
 80020e2:	2200      	movs	r2, #0
 80020e4:	701a      	strb	r2, [r3, #0]
  	while(count--)
 80020e6:	697b      	ldr	r3, [r7, #20]
 80020e8:	1e5a      	subs	r2, r3, #1
 80020ea:	617a      	str	r2, [r7, #20]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d1f5      	bne.n	80020dc <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 80020f0:	f009 f95c 	bl	800b3ac <xTaskResumeAll>
  	return mem;
 80020f4:	68fb      	ldr	r3, [r7, #12]
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	3718      	adds	r7, #24
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}
	...

08002100 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8002100:	b480      	push	{r7}
 8002102:	b085      	sub	sp, #20
 8002104:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8002106:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800210a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800210c:	4b27      	ldr	r3, [pc, #156]	@ (80021ac <prvHeapInit+0xac>)
 800210e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	f003 0307 	and.w	r3, r3, #7
 8002116:	2b00      	cmp	r3, #0
 8002118:	d00c      	beq.n	8002134 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	3307      	adds	r3, #7
 800211e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	f023 0307 	bic.w	r3, r3, #7
 8002126:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8002128:	68ba      	ldr	r2, [r7, #8]
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	1ad3      	subs	r3, r2, r3
 800212e:	4a1f      	ldr	r2, [pc, #124]	@ (80021ac <prvHeapInit+0xac>)
 8002130:	4413      	add	r3, r2
 8002132:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002138:	4a1d      	ldr	r2, [pc, #116]	@ (80021b0 <prvHeapInit+0xb0>)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800213e:	4b1c      	ldr	r3, [pc, #112]	@ (80021b0 <prvHeapInit+0xb0>)
 8002140:	2200      	movs	r2, #0
 8002142:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	68ba      	ldr	r2, [r7, #8]
 8002148:	4413      	add	r3, r2
 800214a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800214c:	2208      	movs	r2, #8
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	1a9b      	subs	r3, r3, r2
 8002152:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	f023 0307 	bic.w	r3, r3, #7
 800215a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	4a15      	ldr	r2, [pc, #84]	@ (80021b4 <prvHeapInit+0xb4>)
 8002160:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8002162:	4b14      	ldr	r3, [pc, #80]	@ (80021b4 <prvHeapInit+0xb4>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	2200      	movs	r2, #0
 8002168:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800216a:	4b12      	ldr	r3, [pc, #72]	@ (80021b4 <prvHeapInit+0xb4>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	2200      	movs	r2, #0
 8002170:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	68fa      	ldr	r2, [r7, #12]
 800217a:	1ad2      	subs	r2, r2, r3
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002180:	4b0c      	ldr	r3, [pc, #48]	@ (80021b4 <prvHeapInit+0xb4>)
 8002182:	681a      	ldr	r2, [r3, #0]
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	4a0a      	ldr	r2, [pc, #40]	@ (80021b8 <prvHeapInit+0xb8>)
 800218e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	4a09      	ldr	r2, [pc, #36]	@ (80021bc <prvHeapInit+0xbc>)
 8002196:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8002198:	4b09      	ldr	r3, [pc, #36]	@ (80021c0 <prvHeapInit+0xc0>)
 800219a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800219e:	601a      	str	r2, [r3, #0]
}
 80021a0:	bf00      	nop
 80021a2:	3714      	adds	r7, #20
 80021a4:	46bd      	mov	sp, r7
 80021a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021aa:	4770      	bx	lr
 80021ac:	200033e4 	.word	0x200033e4
 80021b0:	20003fe4 	.word	0x20003fe4
 80021b4:	20003fec 	.word	0x20003fec
 80021b8:	20003ff4 	.word	0x20003ff4
 80021bc:	20003ff0 	.word	0x20003ff0
 80021c0:	20003ff8 	.word	0x20003ff8

080021c4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80021c4:	b480      	push	{r7}
 80021c6:	b085      	sub	sp, #20
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80021cc:	4b28      	ldr	r3, [pc, #160]	@ (8002270 <prvInsertBlockIntoFreeList+0xac>)
 80021ce:	60fb      	str	r3, [r7, #12]
 80021d0:	e002      	b.n	80021d8 <prvInsertBlockIntoFreeList+0x14>
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	60fb      	str	r3, [r7, #12]
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	687a      	ldr	r2, [r7, #4]
 80021de:	429a      	cmp	r2, r3
 80021e0:	d8f7      	bhi.n	80021d2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	68ba      	ldr	r2, [r7, #8]
 80021ec:	4413      	add	r3, r2
 80021ee:	687a      	ldr	r2, [r7, #4]
 80021f0:	429a      	cmp	r2, r3
 80021f2:	d108      	bne.n	8002206 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	685a      	ldr	r2, [r3, #4]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	441a      	add	r2, r3
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	68ba      	ldr	r2, [r7, #8]
 8002210:	441a      	add	r2, r3
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	429a      	cmp	r2, r3
 8002218:	d118      	bne.n	800224c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681a      	ldr	r2, [r3, #0]
 800221e:	4b15      	ldr	r3, [pc, #84]	@ (8002274 <prvInsertBlockIntoFreeList+0xb0>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	429a      	cmp	r2, r3
 8002224:	d00d      	beq.n	8002242 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	685a      	ldr	r2, [r3, #4]
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	441a      	add	r2, r3
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	681a      	ldr	r2, [r3, #0]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	601a      	str	r2, [r3, #0]
 8002240:	e008      	b.n	8002254 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8002242:	4b0c      	ldr	r3, [pc, #48]	@ (8002274 <prvInsertBlockIntoFreeList+0xb0>)
 8002244:	681a      	ldr	r2, [r3, #0]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	601a      	str	r2, [r3, #0]
 800224a:	e003      	b.n	8002254 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681a      	ldr	r2, [r3, #0]
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8002254:	68fa      	ldr	r2, [r7, #12]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	429a      	cmp	r2, r3
 800225a:	d002      	beq.n	8002262 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	687a      	ldr	r2, [r7, #4]
 8002260:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002262:	bf00      	nop
 8002264:	3714      	adds	r7, #20
 8002266:	46bd      	mov	sp, r7
 8002268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226c:	4770      	bx	lr
 800226e:	bf00      	nop
 8002270:	20003fe4 	.word	0x20003fe4
 8002274:	20003fec 	.word	0x20003fec

08002278 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b082      	sub	sp, #8
 800227c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800227e:	4b16      	ldr	r3, [pc, #88]	@ (80022d8 <MX_DMA_Init+0x60>)
 8002280:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002282:	4a15      	ldr	r2, [pc, #84]	@ (80022d8 <MX_DMA_Init+0x60>)
 8002284:	f043 0304 	orr.w	r3, r3, #4
 8002288:	6493      	str	r3, [r2, #72]	@ 0x48
 800228a:	4b13      	ldr	r3, [pc, #76]	@ (80022d8 <MX_DMA_Init+0x60>)
 800228c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800228e:	f003 0304 	and.w	r3, r3, #4
 8002292:	607b      	str	r3, [r7, #4]
 8002294:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002296:	4b10      	ldr	r3, [pc, #64]	@ (80022d8 <MX_DMA_Init+0x60>)
 8002298:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800229a:	4a0f      	ldr	r2, [pc, #60]	@ (80022d8 <MX_DMA_Init+0x60>)
 800229c:	f043 0301 	orr.w	r3, r3, #1
 80022a0:	6493      	str	r3, [r2, #72]	@ 0x48
 80022a2:	4b0d      	ldr	r3, [pc, #52]	@ (80022d8 <MX_DMA_Init+0x60>)
 80022a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80022a6:	f003 0301 	and.w	r3, r3, #1
 80022aa:	603b      	str	r3, [r7, #0]
 80022ac:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 80022ae:	2200      	movs	r2, #0
 80022b0:	2105      	movs	r1, #5
 80022b2:	200b      	movs	r0, #11
 80022b4:	f002 fd26 	bl	8004d04 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80022b8:	200b      	movs	r0, #11
 80022ba:	f002 fd3d 	bl	8004d38 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 80022be:	2200      	movs	r2, #0
 80022c0:	2105      	movs	r1, #5
 80022c2:	200c      	movs	r0, #12
 80022c4:	f002 fd1e 	bl	8004d04 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80022c8:	200c      	movs	r0, #12
 80022ca:	f002 fd35 	bl	8004d38 <HAL_NVIC_EnableIRQ>

}
 80022ce:	bf00      	nop
 80022d0:	3708      	adds	r7, #8
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	bf00      	nop
 80022d8:	40021000 	.word	0x40021000

080022dc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b08a      	sub	sp, #40	@ 0x28
 80022e0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022e2:	f107 0314 	add.w	r3, r7, #20
 80022e6:	2200      	movs	r2, #0
 80022e8:	601a      	str	r2, [r3, #0]
 80022ea:	605a      	str	r2, [r3, #4]
 80022ec:	609a      	str	r2, [r3, #8]
 80022ee:	60da      	str	r2, [r3, #12]
 80022f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80022f2:	4b3b      	ldr	r3, [pc, #236]	@ (80023e0 <MX_GPIO_Init+0x104>)
 80022f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022f6:	4a3a      	ldr	r2, [pc, #232]	@ (80023e0 <MX_GPIO_Init+0x104>)
 80022f8:	f043 0304 	orr.w	r3, r3, #4
 80022fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80022fe:	4b38      	ldr	r3, [pc, #224]	@ (80023e0 <MX_GPIO_Init+0x104>)
 8002300:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002302:	f003 0304 	and.w	r3, r3, #4
 8002306:	613b      	str	r3, [r7, #16]
 8002308:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800230a:	4b35      	ldr	r3, [pc, #212]	@ (80023e0 <MX_GPIO_Init+0x104>)
 800230c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800230e:	4a34      	ldr	r2, [pc, #208]	@ (80023e0 <MX_GPIO_Init+0x104>)
 8002310:	f043 0320 	orr.w	r3, r3, #32
 8002314:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002316:	4b32      	ldr	r3, [pc, #200]	@ (80023e0 <MX_GPIO_Init+0x104>)
 8002318:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800231a:	f003 0320 	and.w	r3, r3, #32
 800231e:	60fb      	str	r3, [r7, #12]
 8002320:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002322:	4b2f      	ldr	r3, [pc, #188]	@ (80023e0 <MX_GPIO_Init+0x104>)
 8002324:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002326:	4a2e      	ldr	r2, [pc, #184]	@ (80023e0 <MX_GPIO_Init+0x104>)
 8002328:	f043 0301 	orr.w	r3, r3, #1
 800232c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800232e:	4b2c      	ldr	r3, [pc, #176]	@ (80023e0 <MX_GPIO_Init+0x104>)
 8002330:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002332:	f003 0301 	and.w	r3, r3, #1
 8002336:	60bb      	str	r3, [r7, #8]
 8002338:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800233a:	4b29      	ldr	r3, [pc, #164]	@ (80023e0 <MX_GPIO_Init+0x104>)
 800233c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800233e:	4a28      	ldr	r2, [pc, #160]	@ (80023e0 <MX_GPIO_Init+0x104>)
 8002340:	f043 0302 	orr.w	r3, r3, #2
 8002344:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002346:	4b26      	ldr	r3, [pc, #152]	@ (80023e0 <MX_GPIO_Init+0x104>)
 8002348:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800234a:	f003 0302 	and.w	r3, r3, #2
 800234e:	607b      	str	r3, [r7, #4]
 8002350:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_8, GPIO_PIN_RESET);
 8002352:	2200      	movs	r2, #0
 8002354:	f44f 7190 	mov.w	r1, #288	@ 0x120
 8002358:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800235c:	f003 f9ba 	bl	80056d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8002360:	2200      	movs	r2, #0
 8002362:	f44f 6186 	mov.w	r1, #1072	@ 0x430
 8002366:	481f      	ldr	r0, [pc, #124]	@ (80023e4 <MX_GPIO_Init+0x108>)
 8002368:	f003 f9b4 	bl	80056d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800236c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002370:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002372:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002376:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002378:	2300      	movs	r3, #0
 800237a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800237c:	f107 0314 	add.w	r3, r7, #20
 8002380:	4619      	mov	r1, r3
 8002382:	4819      	ldr	r0, [pc, #100]	@ (80023e8 <MX_GPIO_Init+0x10c>)
 8002384:	f003 f824 	bl	80053d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA8 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_8;
 8002388:	f44f 7390 	mov.w	r3, #288	@ 0x120
 800238c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800238e:	2301      	movs	r3, #1
 8002390:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002392:	2300      	movs	r3, #0
 8002394:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002396:	2300      	movs	r3, #0
 8002398:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800239a:	f107 0314 	add.w	r3, r7, #20
 800239e:	4619      	mov	r1, r3
 80023a0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80023a4:	f003 f814 	bl	80053d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_4|GPIO_PIN_5;
 80023a8:	f44f 6386 	mov.w	r3, #1072	@ 0x430
 80023ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023ae:	2301      	movs	r3, #1
 80023b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023b2:	2300      	movs	r3, #0
 80023b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023b6:	2300      	movs	r3, #0
 80023b8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023ba:	f107 0314 	add.w	r3, r7, #20
 80023be:	4619      	mov	r1, r3
 80023c0:	4808      	ldr	r0, [pc, #32]	@ (80023e4 <MX_GPIO_Init+0x108>)
 80023c2:	f003 f805 	bl	80053d0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80023c6:	2200      	movs	r2, #0
 80023c8:	2105      	movs	r1, #5
 80023ca:	2028      	movs	r0, #40	@ 0x28
 80023cc:	f002 fc9a 	bl	8004d04 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80023d0:	2028      	movs	r0, #40	@ 0x28
 80023d2:	f002 fcb1 	bl	8004d38 <HAL_NVIC_EnableIRQ>

}
 80023d6:	bf00      	nop
 80023d8:	3728      	adds	r7, #40	@ 0x28
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}
 80023de:	bf00      	nop
 80023e0:	40021000 	.word	0x40021000
 80023e4:	48000400 	.word	0x48000400
 80023e8:	48000800 	.word	0x48000800

080023ec <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 80023f0:	4b0b      	ldr	r3, [pc, #44]	@ (8002420 <MX_IWDG_Init+0x34>)
 80023f2:	4a0c      	ldr	r2, [pc, #48]	@ (8002424 <MX_IWDG_Init+0x38>)
 80023f4:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
 80023f6:	4b0a      	ldr	r3, [pc, #40]	@ (8002420 <MX_IWDG_Init+0x34>)
 80023f8:	2200      	movs	r2, #0
 80023fa:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 80023fc:	4b08      	ldr	r3, [pc, #32]	@ (8002420 <MX_IWDG_Init+0x34>)
 80023fe:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8002402:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 2499;
 8002404:	4b06      	ldr	r3, [pc, #24]	@ (8002420 <MX_IWDG_Init+0x34>)
 8002406:	f640 12c3 	movw	r2, #2499	@ 0x9c3
 800240a:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 800240c:	4804      	ldr	r0, [pc, #16]	@ (8002420 <MX_IWDG_Init+0x34>)
 800240e:	f003 f9b6 	bl	800577e <HAL_IWDG_Init>
 8002412:	4603      	mov	r3, r0
 8002414:	2b00      	cmp	r3, #0
 8002416:	d001      	beq.n	800241c <MX_IWDG_Init+0x30>
  {
    Error_Handler();
 8002418:	f000 fcb4 	bl	8002d84 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 800241c:	bf00      	nop
 800241e:	bd80      	pop	{r7, pc}
 8002420:	20003ffc 	.word	0x20003ffc
 8002424:	40003000 	.word	0x40003000

08002428 <timer_callback>:
void subscription_callback(const void *msgin);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void timer_callback(rcl_timer_t *timer, int64_t last_call_time) {
 8002428:	b590      	push	{r4, r7, lr}
 800242a:	b085      	sub	sp, #20
 800242c:	af00      	add	r7, sp, #0
 800242e:	60f8      	str	r0, [r7, #12]
 8002430:	e9c7 2300 	strd	r2, r3, [r7]
	static uint8_t cnt = 0;

	if (timer != NULL) {
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d075      	beq.n	8002526 <timer_callback+0xfe>
		// Sync micro-ROS session
		rmw_uros_sync_session(timeout_ms);
 800243a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800243e:	4618      	mov	r0, r3
 8002440:	f00e fa5a 	bl	80108f8 <rmw_uros_sync_session>

		// Toggle LED every 50 cycles (approximately every 0.5 seconds)
		if (cnt == 0)
 8002444:	4b3a      	ldr	r3, [pc, #232]	@ (8002530 <timer_callback+0x108>)
 8002446:	781b      	ldrb	r3, [r3, #0]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d104      	bne.n	8002456 <timer_callback+0x2e>
			HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800244c:	2120      	movs	r1, #32
 800244e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002452:	f003 f957 	bl	8005704 <HAL_GPIO_TogglePin>
		cnt = (cnt + 1) % 50;
 8002456:	4b36      	ldr	r3, [pc, #216]	@ (8002530 <timer_callback+0x108>)
 8002458:	781b      	ldrb	r3, [r3, #0]
 800245a:	3301      	adds	r3, #1
 800245c:	4a35      	ldr	r2, [pc, #212]	@ (8002534 <timer_callback+0x10c>)
 800245e:	fb82 1203 	smull	r1, r2, r2, r3
 8002462:	1111      	asrs	r1, r2, #4
 8002464:	17da      	asrs	r2, r3, #31
 8002466:	1a8a      	subs	r2, r1, r2
 8002468:	2132      	movs	r1, #50	@ 0x32
 800246a:	fb01 f202 	mul.w	r2, r1, r2
 800246e:	1a9a      	subs	r2, r3, r2
 8002470:	b2d2      	uxtb	r2, r2
 8002472:	4b2f      	ldr	r3, [pc, #188]	@ (8002530 <timer_callback+0x108>)
 8002474:	701a      	strb	r2, [r3, #0]

		// Prepare and publish multi-array message with motor data
		if (pub_msg.data.data != NULL) {
 8002476:	4b30      	ldr	r3, [pc, #192]	@ (8002538 <timer_callback+0x110>)
 8002478:	691b      	ldr	r3, [r3, #16]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d050      	beq.n	8002520 <timer_callback+0xf8>
			pub_msg.data.data[0] = setpointL;
 800247e:	4b2f      	ldr	r3, [pc, #188]	@ (800253c <timer_callback+0x114>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a2d      	ldr	r2, [pc, #180]	@ (8002538 <timer_callback+0x110>)
 8002484:	6914      	ldr	r4, [r2, #16]
 8002486:	4618      	mov	r0, r3
 8002488:	f7fe f896 	bl	80005b8 <__aeabi_f2d>
 800248c:	4602      	mov	r2, r0
 800248e:	460b      	mov	r3, r1
 8002490:	e9c4 2300 	strd	r2, r3, [r4]
			pub_msg.data.data[1] = setpointR;
 8002494:	4b2a      	ldr	r3, [pc, #168]	@ (8002540 <timer_callback+0x118>)
 8002496:	681a      	ldr	r2, [r3, #0]
 8002498:	4b27      	ldr	r3, [pc, #156]	@ (8002538 <timer_callback+0x110>)
 800249a:	691b      	ldr	r3, [r3, #16]
 800249c:	f103 0408 	add.w	r4, r3, #8
 80024a0:	4610      	mov	r0, r2
 80024a2:	f7fe f889 	bl	80005b8 <__aeabi_f2d>
 80024a6:	4602      	mov	r2, r0
 80024a8:	460b      	mov	r3, r1
 80024aa:	e9c4 2300 	strd	r2, r3, [r4]
			pub_msg.data.data[2] = filteredValue1;
 80024ae:	4b25      	ldr	r3, [pc, #148]	@ (8002544 <timer_callback+0x11c>)
 80024b0:	681a      	ldr	r2, [r3, #0]
 80024b2:	4b21      	ldr	r3, [pc, #132]	@ (8002538 <timer_callback+0x110>)
 80024b4:	691b      	ldr	r3, [r3, #16]
 80024b6:	f103 0410 	add.w	r4, r3, #16
 80024ba:	4610      	mov	r0, r2
 80024bc:	f7fe f87c 	bl	80005b8 <__aeabi_f2d>
 80024c0:	4602      	mov	r2, r0
 80024c2:	460b      	mov	r3, r1
 80024c4:	e9c4 2300 	strd	r2, r3, [r4]
			pub_msg.data.data[3] = filteredValue2;
 80024c8:	4b1f      	ldr	r3, [pc, #124]	@ (8002548 <timer_callback+0x120>)
 80024ca:	681a      	ldr	r2, [r3, #0]
 80024cc:	4b1a      	ldr	r3, [pc, #104]	@ (8002538 <timer_callback+0x110>)
 80024ce:	691b      	ldr	r3, [r3, #16]
 80024d0:	f103 0418 	add.w	r4, r3, #24
 80024d4:	4610      	mov	r0, r2
 80024d6:	f7fe f86f 	bl	80005b8 <__aeabi_f2d>
 80024da:	4602      	mov	r2, r0
 80024dc:	460b      	mov	r3, r1
 80024de:	e9c4 2300 	strd	r2, r3, [r4]
			pub_msg.data.data[4] = filteredValue3;
 80024e2:	4b1a      	ldr	r3, [pc, #104]	@ (800254c <timer_callback+0x124>)
 80024e4:	681a      	ldr	r2, [r3, #0]
 80024e6:	4b14      	ldr	r3, [pc, #80]	@ (8002538 <timer_callback+0x110>)
 80024e8:	691b      	ldr	r3, [r3, #16]
 80024ea:	f103 0420 	add.w	r4, r3, #32
 80024ee:	4610      	mov	r0, r2
 80024f0:	f7fe f862 	bl	80005b8 <__aeabi_f2d>
 80024f4:	4602      	mov	r2, r0
 80024f6:	460b      	mov	r3, r1
 80024f8:	e9c4 2300 	strd	r2, r3, [r4]
			pub_msg.data.data[5] = filteredValue4;
 80024fc:	4b14      	ldr	r3, [pc, #80]	@ (8002550 <timer_callback+0x128>)
 80024fe:	681a      	ldr	r2, [r3, #0]
 8002500:	4b0d      	ldr	r3, [pc, #52]	@ (8002538 <timer_callback+0x110>)
 8002502:	691b      	ldr	r3, [r3, #16]
 8002504:	f103 0428 	add.w	r4, r3, #40	@ 0x28
 8002508:	4610      	mov	r0, r2
 800250a:	f7fe f855 	bl	80005b8 <__aeabi_f2d>
 800250e:	4602      	mov	r2, r0
 8002510:	460b      	mov	r3, r1
 8002512:	e9c4 2300 	strd	r2, r3, [r4]

			// Publish the multi-array message
			RCLSOFTCHECK(rcl_publish(&publisher, &pub_msg, NULL));
 8002516:	2200      	movs	r2, #0
 8002518:	4907      	ldr	r1, [pc, #28]	@ (8002538 <timer_callback+0x110>)
 800251a:	480e      	ldr	r0, [pc, #56]	@ (8002554 <timer_callback+0x12c>)
 800251c:	f00c fa50 	bl	800e9c0 <rcl_publish>
		}

		// Reinitialize watchdog timer
		HAL_IWDG_Init(&hiwdg);
 8002520:	480d      	ldr	r0, [pc, #52]	@ (8002558 <timer_callback+0x130>)
 8002522:	f003 f92c 	bl	800577e <HAL_IWDG_Init>
	}
}
 8002526:	bf00      	nop
 8002528:	3714      	adds	r7, #20
 800252a:	46bd      	mov	sp, r7
 800252c:	bd90      	pop	{r4, r7, pc}
 800252e:	bf00      	nop
 8002530:	200042ec 	.word	0x200042ec
 8002534:	51eb851f 	.word	0x51eb851f
 8002538:	20004280 	.word	0x20004280
 800253c:	2000400c 	.word	0x2000400c
 8002540:	20004010 	.word	0x20004010
 8002544:	20004014 	.word	0x20004014
 8002548:	20004018 	.word	0x20004018
 800254c:	2000401c 	.word	0x2000401c
 8002550:	20004020 	.word	0x20004020
 8002554:	20004278 	.word	0x20004278
 8002558:	20003ffc 	.word	0x20003ffc

0800255c <subscription_callback>:

void subscription_callback(const void *msgin) {
 800255c:	b580      	push	{r7, lr}
 800255e:	b084      	sub	sp, #16
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
	const geometry_msgs__msg__Twist *twist_msg =
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	60fb      	str	r3, [r7, #12]
			(const geometry_msgs__msg__Twist*) msgin;

	linear_x = twist_msg->linear.x;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800256e:	4610      	mov	r0, r2
 8002570:	4619      	mov	r1, r3
 8002572:	f7fe fb33 	bl	8000bdc <__aeabi_d2f>
 8002576:	4603      	mov	r3, r0
 8002578:	4a26      	ldr	r2, [pc, #152]	@ (8002614 <subscription_callback+0xb8>)
 800257a:	6013      	str	r3, [r2, #0]
	linear_y = twist_msg->linear.y;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002582:	4610      	mov	r0, r2
 8002584:	4619      	mov	r1, r3
 8002586:	f7fe fb29 	bl	8000bdc <__aeabi_d2f>
 800258a:	4603      	mov	r3, r0
 800258c:	4a22      	ldr	r2, [pc, #136]	@ (8002618 <subscription_callback+0xbc>)
 800258e:	6013      	str	r3, [r2, #0]
	linear_z = twist_msg->linear.z;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002596:	4610      	mov	r0, r2
 8002598:	4619      	mov	r1, r3
 800259a:	f7fe fb1f 	bl	8000bdc <__aeabi_d2f>
 800259e:	4603      	mov	r3, r0
 80025a0:	4a1e      	ldr	r2, [pc, #120]	@ (800261c <subscription_callback+0xc0>)
 80025a2:	6013      	str	r3, [r2, #0]

	angular_x = twist_msg->angular.x;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80025aa:	4610      	mov	r0, r2
 80025ac:	4619      	mov	r1, r3
 80025ae:	f7fe fb15 	bl	8000bdc <__aeabi_d2f>
 80025b2:	4603      	mov	r3, r0
 80025b4:	4a1a      	ldr	r2, [pc, #104]	@ (8002620 <subscription_callback+0xc4>)
 80025b6:	6013      	str	r3, [r2, #0]
	angular_y = twist_msg->angular.y;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80025be:	4610      	mov	r0, r2
 80025c0:	4619      	mov	r1, r3
 80025c2:	f7fe fb0b 	bl	8000bdc <__aeabi_d2f>
 80025c6:	4603      	mov	r3, r0
 80025c8:	4a16      	ldr	r2, [pc, #88]	@ (8002624 <subscription_callback+0xc8>)
 80025ca:	6013      	str	r3, [r2, #0]
	angular_z = twist_msg->angular.z;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 80025d2:	4610      	mov	r0, r2
 80025d4:	4619      	mov	r1, r3
 80025d6:	f7fe fb01 	bl	8000bdc <__aeabi_d2f>
 80025da:	4603      	mov	r3, r0
 80025dc:	4a12      	ldr	r2, [pc, #72]	@ (8002628 <subscription_callback+0xcc>)
 80025de:	6013      	str	r3, [r2, #0]

	SKID_inverse_kinematic(&robot_kinematics, linear_x, angular_z);
 80025e0:	4b0c      	ldr	r3, [pc, #48]	@ (8002614 <subscription_callback+0xb8>)
 80025e2:	edd3 7a00 	vldr	s15, [r3]
 80025e6:	4b10      	ldr	r3, [pc, #64]	@ (8002628 <subscription_callback+0xcc>)
 80025e8:	ed93 7a00 	vldr	s14, [r3]
 80025ec:	eef0 0a47 	vmov.f32	s1, s14
 80025f0:	eeb0 0a67 	vmov.f32	s0, s15
 80025f4:	480d      	ldr	r0, [pc, #52]	@ (800262c <subscription_callback+0xd0>)
 80025f6:	f001 f85e 	bl	80036b6 <SKID_inverse_kinematic>

	setpointL = robot_kinematics.left_cmd;
 80025fa:	4b0c      	ldr	r3, [pc, #48]	@ (800262c <subscription_callback+0xd0>)
 80025fc:	691b      	ldr	r3, [r3, #16]
 80025fe:	4a0c      	ldr	r2, [pc, #48]	@ (8002630 <subscription_callback+0xd4>)
 8002600:	6013      	str	r3, [r2, #0]
	setpointR = robot_kinematics.right_cmd;
 8002602:	4b0a      	ldr	r3, [pc, #40]	@ (800262c <subscription_callback+0xd0>)
 8002604:	695b      	ldr	r3, [r3, #20]
 8002606:	4a0b      	ldr	r2, [pc, #44]	@ (8002634 <subscription_callback+0xd8>)
 8002608:	6013      	str	r3, [r2, #0]
}
 800260a:	bf00      	nop
 800260c:	3710      	adds	r7, #16
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}
 8002612:	bf00      	nop
 8002614:	200042d4 	.word	0x200042d4
 8002618:	200042d8 	.word	0x200042d8
 800261c:	200042dc 	.word	0x200042dc
 8002620:	200042e0 	.word	0x200042e0
 8002624:	200042e4 	.word	0x200042e4
 8002628:	200042e8 	.word	0x200042e8
 800262c:	20004854 	.word	0x20004854
 8002630:	2000400c 	.word	0x2000400c
 8002634:	20004010 	.word	0x20004010

08002638 <StartDefaultTask>:

void StartDefaultTask(void *argument) {
 8002638:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800263c:	b0b2      	sub	sp, #200	@ 0xc8
 800263e:	af02      	add	r7, sp, #8
 8002640:	f8c7 00a4 	str.w	r0, [r7, #164]	@ 0xa4

	// micro-ROS configuration
	rmw_uros_set_custom_transport(true, (void*) &hlpuart1,
 8002644:	4b69      	ldr	r3, [pc, #420]	@ (80027ec <StartDefaultTask+0x1b4>)
 8002646:	9301      	str	r3, [sp, #4]
 8002648:	4b69      	ldr	r3, [pc, #420]	@ (80027f0 <StartDefaultTask+0x1b8>)
 800264a:	9300      	str	r3, [sp, #0]
 800264c:	4b69      	ldr	r3, [pc, #420]	@ (80027f4 <StartDefaultTask+0x1bc>)
 800264e:	4a6a      	ldr	r2, [pc, #424]	@ (80027f8 <StartDefaultTask+0x1c0>)
 8002650:	496a      	ldr	r1, [pc, #424]	@ (80027fc <StartDefaultTask+0x1c4>)
 8002652:	2001      	movs	r0, #1
 8002654:	f00d fa3c 	bl	800fad0 <rmw_uros_set_custom_transport>
			cubemx_transport_open, cubemx_transport_close,
			cubemx_transport_write, cubemx_transport_read);

	rcl_allocator_t freeRTOS_allocator =
			rcutils_get_zero_initialized_allocator();
 8002658:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800265c:	4618      	mov	r0, r3
 800265e:	f00d f953 	bl	800f908 <rcutils_get_zero_initialized_allocator>
	freeRTOS_allocator.allocate = microros_allocate;
 8002662:	4b67      	ldr	r3, [pc, #412]	@ (8002800 <StartDefaultTask+0x1c8>)
 8002664:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
	freeRTOS_allocator.deallocate = microros_deallocate;
 8002668:	4b66      	ldr	r3, [pc, #408]	@ (8002804 <StartDefaultTask+0x1cc>)
 800266a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
	freeRTOS_allocator.reallocate = microros_reallocate;
 800266e:	4b66      	ldr	r3, [pc, #408]	@ (8002808 <StartDefaultTask+0x1d0>)
 8002670:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
	freeRTOS_allocator.zero_allocate = microros_zero_allocate;
 8002674:	4b65      	ldr	r3, [pc, #404]	@ (800280c <StartDefaultTask+0x1d4>)
 8002676:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8

	if (!rcutils_set_default_allocator(&freeRTOS_allocator)) {
 800267a:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800267e:	4618      	mov	r0, r3
 8002680:	f00d f950 	bl	800f924 <rcutils_set_default_allocator>
 8002684:	4603      	mov	r3, r0
 8002686:	f083 0301 	eor.w	r3, r3, #1
 800268a:	b2db      	uxtb	r3, r3
 800268c:	2b00      	cmp	r3, #0
 800268e:	d003      	beq.n	8002698 <StartDefaultTask+0x60>
		printf("Error on default allocators (line %d)\n", __LINE__);
 8002690:	21be      	movs	r1, #190	@ 0xbe
 8002692:	485f      	ldr	r0, [pc, #380]	@ (8002810 <StartDefaultTask+0x1d8>)
 8002694:	f018 fce4 	bl	801b060 <iprintf>
	}
	allocator = rcl_get_default_allocator();
 8002698:	4c5e      	ldr	r4, [pc, #376]	@ (8002814 <StartDefaultTask+0x1dc>)
 800269a:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 800269e:	4618      	mov	r0, r3
 80026a0:	f00d f95e 	bl	800f960 <rcutils_get_default_allocator>
 80026a4:	4625      	mov	r5, r4
 80026a6:	f107 0488 	add.w	r4, r7, #136	@ 0x88
 80026aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80026ae:	6823      	ldr	r3, [r4, #0]
 80026b0:	602b      	str	r3, [r5, #0]

	//create init
	init_options = rcl_get_zero_initialized_init_options();
 80026b2:	f00b ffb5 	bl	800e620 <rcl_get_zero_initialized_init_options>
 80026b6:	4603      	mov	r3, r0
 80026b8:	4a57      	ldr	r2, [pc, #348]	@ (8002818 <StartDefaultTask+0x1e0>)
 80026ba:	6013      	str	r3, [r2, #0]
	RCLSOFTCHECK(rcl_init_options_init(&init_options, allocator));
 80026bc:	4b55      	ldr	r3, [pc, #340]	@ (8002814 <StartDefaultTask+0x1dc>)
 80026be:	466c      	mov	r4, sp
 80026c0:	f103 020c 	add.w	r2, r3, #12
 80026c4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80026c8:	e884 0003 	stmia.w	r4, {r0, r1}
 80026cc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80026ce:	4852      	ldr	r0, [pc, #328]	@ (8002818 <StartDefaultTask+0x1e0>)
 80026d0:	f00b ffa8 	bl	800e624 <rcl_init_options_init>
	RCLSOFTCHECK(rcl_init_options_set_domain_id(&init_options, 99));
 80026d4:	2163      	movs	r1, #99	@ 0x63
 80026d6:	4850      	ldr	r0, [pc, #320]	@ (8002818 <StartDefaultTask+0x1e0>)
 80026d8:	f00c f8a0 	bl	800e81c <rcl_init_options_set_domain_id>

	//create support
	rclc_support_init_with_options(&support, 0, NULL, &init_options,
 80026dc:	4b4d      	ldr	r3, [pc, #308]	@ (8002814 <StartDefaultTask+0x1dc>)
 80026de:	9300      	str	r3, [sp, #0]
 80026e0:	4b4d      	ldr	r3, [pc, #308]	@ (8002818 <StartDefaultTask+0x1e0>)
 80026e2:	2200      	movs	r2, #0
 80026e4:	2100      	movs	r1, #0
 80026e6:	484d      	ldr	r0, [pc, #308]	@ (800281c <StartDefaultTask+0x1e4>)
 80026e8:	f00c fffe 	bl	800f6e8 <rclc_support_init_with_options>
			&allocator);

	// create node
	rclc_node_init_default(&node, "uros_motor_node", "", &support);
 80026ec:	4b4b      	ldr	r3, [pc, #300]	@ (800281c <StartDefaultTask+0x1e4>)
 80026ee:	4a4c      	ldr	r2, [pc, #304]	@ (8002820 <StartDefaultTask+0x1e8>)
 80026f0:	494c      	ldr	r1, [pc, #304]	@ (8002824 <StartDefaultTask+0x1ec>)
 80026f2:	484d      	ldr	r0, [pc, #308]	@ (8002828 <StartDefaultTask+0x1f0>)
 80026f4:	f00d f82c 	bl	800f750 <rclc_node_init_default>

	pub_msg.layout.dim.capacity = 1;
 80026f8:	4b4c      	ldr	r3, [pc, #304]	@ (800282c <StartDefaultTask+0x1f4>)
 80026fa:	2201      	movs	r2, #1
 80026fc:	609a      	str	r2, [r3, #8]
	pub_msg.layout.dim.size = 1;
 80026fe:	4b4b      	ldr	r3, [pc, #300]	@ (800282c <StartDefaultTask+0x1f4>)
 8002700:	2201      	movs	r2, #1
 8002702:	605a      	str	r2, [r3, #4]
	pub_msg.layout.dim.data = malloc(
 8002704:	2014      	movs	r0, #20
 8002706:	f018 f9b7 	bl	801aa78 <malloc>
 800270a:	4603      	mov	r3, r0
 800270c:	461a      	mov	r2, r3
 800270e:	4b47      	ldr	r3, [pc, #284]	@ (800282c <StartDefaultTask+0x1f4>)
 8002710:	601a      	str	r2, [r3, #0]
			sizeof(std_msgs__msg__MultiArrayDimension) * 1);

	pub_msg.layout.dim.data[0].label.data = malloc(10);
 8002712:	4b46      	ldr	r3, [pc, #280]	@ (800282c <StartDefaultTask+0x1f4>)
 8002714:	681c      	ldr	r4, [r3, #0]
 8002716:	200a      	movs	r0, #10
 8002718:	f018 f9ae 	bl	801aa78 <malloc>
 800271c:	4603      	mov	r3, r0
 800271e:	6023      	str	r3, [r4, #0]
	pub_msg.layout.dim.data[0].label.capacity = 10;
 8002720:	4b42      	ldr	r3, [pc, #264]	@ (800282c <StartDefaultTask+0x1f4>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	220a      	movs	r2, #10
 8002726:	609a      	str	r2, [r3, #8]
	pub_msg.layout.dim.data[0].label.size = strlen("motor_data");
 8002728:	4b40      	ldr	r3, [pc, #256]	@ (800282c <StartDefaultTask+0x1f4>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	220a      	movs	r2, #10
 800272e:	605a      	str	r2, [r3, #4]
	strcpy(pub_msg.layout.dim.data[0].label.data, "motor_data");
 8002730:	4b3e      	ldr	r3, [pc, #248]	@ (800282c <StartDefaultTask+0x1f4>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	493e      	ldr	r1, [pc, #248]	@ (8002830 <StartDefaultTask+0x1f8>)
 8002738:	461a      	mov	r2, r3
 800273a:	460b      	mov	r3, r1
 800273c:	cb03      	ldmia	r3!, {r0, r1}
 800273e:	6010      	str	r0, [r2, #0]
 8002740:	6051      	str	r1, [r2, #4]
 8002742:	8819      	ldrh	r1, [r3, #0]
 8002744:	789b      	ldrb	r3, [r3, #2]
 8002746:	8111      	strh	r1, [r2, #8]
 8002748:	7293      	strb	r3, [r2, #10]

	pub_msg.layout.data_offset = 0;
 800274a:	4b38      	ldr	r3, [pc, #224]	@ (800282c <StartDefaultTask+0x1f4>)
 800274c:	2200      	movs	r2, #0
 800274e:	60da      	str	r2, [r3, #12]

	pub_msg.data.capacity = 6;
 8002750:	4b36      	ldr	r3, [pc, #216]	@ (800282c <StartDefaultTask+0x1f4>)
 8002752:	2206      	movs	r2, #6
 8002754:	619a      	str	r2, [r3, #24]
	pub_msg.data.size = 6;
 8002756:	4b35      	ldr	r3, [pc, #212]	@ (800282c <StartDefaultTask+0x1f4>)
 8002758:	2206      	movs	r2, #6
 800275a:	615a      	str	r2, [r3, #20]
	pub_msg.data.data = malloc(6 * sizeof(double));
 800275c:	2030      	movs	r0, #48	@ 0x30
 800275e:	f018 f98b 	bl	801aa78 <malloc>
 8002762:	4603      	mov	r3, r0
 8002764:	461a      	mov	r2, r3
 8002766:	4b31      	ldr	r3, [pc, #196]	@ (800282c <StartDefaultTask+0x1f4>)
 8002768:	611a      	str	r2, [r3, #16]

	// Create publisher
	rclc_publisher_init_default(&publisher, &node,
 800276a:	f00e fc77 	bl	801105c <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray>
 800276e:	4602      	mov	r2, r0
 8002770:	4b30      	ldr	r3, [pc, #192]	@ (8002834 <StartDefaultTask+0x1fc>)
 8002772:	492d      	ldr	r1, [pc, #180]	@ (8002828 <StartDefaultTask+0x1f0>)
 8002774:	4830      	ldr	r0, [pc, #192]	@ (8002838 <StartDefaultTask+0x200>)
 8002776:	f00d f827 	bl	800f7c8 <rclc_publisher_init_default>
			ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Float64MultiArray),
			"robot_pos");

	// Create subscriber
	rclc_subscription_init_best_effort(&subscriber, &node,
 800277a:	f00a fa95 	bl	800cca8 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist>
 800277e:	4602      	mov	r2, r0
 8002780:	4b2e      	ldr	r3, [pc, #184]	@ (800283c <StartDefaultTask+0x204>)
 8002782:	4929      	ldr	r1, [pc, #164]	@ (8002828 <StartDefaultTask+0x1f0>)
 8002784:	482e      	ldr	r0, [pc, #184]	@ (8002840 <StartDefaultTask+0x208>)
 8002786:	f00d f853 	bl	800f830 <rclc_subscription_init_best_effort>
			ROSIDL_GET_MSG_TYPE_SUPPORT(geometry_msgs, msg, Twist), "cmd_vel");

	//create timer
	rclc_timer_init_default(&timer, &support, timer_period, timer_callback);
 800278a:	4a2e      	ldr	r2, [pc, #184]	@ (8002844 <StartDefaultTask+0x20c>)
 800278c:	2300      	movs	r3, #0
 800278e:	4690      	mov	r8, r2
 8002790:	4699      	mov	r9, r3
 8002792:	4b2d      	ldr	r3, [pc, #180]	@ (8002848 <StartDefaultTask+0x210>)
 8002794:	9300      	str	r3, [sp, #0]
 8002796:	4642      	mov	r2, r8
 8002798:	464b      	mov	r3, r9
 800279a:	4920      	ldr	r1, [pc, #128]	@ (800281c <StartDefaultTask+0x1e4>)
 800279c:	482b      	ldr	r0, [pc, #172]	@ (800284c <StartDefaultTask+0x214>)
 800279e:	f00d f87b 	bl	800f898 <rclc_timer_init_default>

	//create executor
	executor = rclc_executor_get_zero_initialized_executor();
 80027a2:	4c2b      	ldr	r4, [pc, #172]	@ (8002850 <StartDefaultTask+0x218>)
 80027a4:	463b      	mov	r3, r7
 80027a6:	4618      	mov	r0, r3
 80027a8:	f00c fc98 	bl	800f0dc <rclc_executor_get_zero_initialized_executor>
 80027ac:	4620      	mov	r0, r4
 80027ae:	463b      	mov	r3, r7
 80027b0:	2288      	movs	r2, #136	@ 0x88
 80027b2:	4619      	mov	r1, r3
 80027b4:	f018 fea3 	bl	801b4fe <memcpy>
	rclc_executor_init(&executor, &support.context, 2, &allocator); // total number of handles = #subscriptions + #timers
 80027b8:	4b16      	ldr	r3, [pc, #88]	@ (8002814 <StartDefaultTask+0x1dc>)
 80027ba:	2202      	movs	r2, #2
 80027bc:	4917      	ldr	r1, [pc, #92]	@ (800281c <StartDefaultTask+0x1e4>)
 80027be:	4824      	ldr	r0, [pc, #144]	@ (8002850 <StartDefaultTask+0x218>)
 80027c0:	f00c fc96 	bl	800f0f0 <rclc_executor_init>
	rclc_executor_add_timer(&executor, &timer);
 80027c4:	4921      	ldr	r1, [pc, #132]	@ (800284c <StartDefaultTask+0x214>)
 80027c6:	4822      	ldr	r0, [pc, #136]	@ (8002850 <StartDefaultTask+0x218>)
 80027c8:	f00c fd36 	bl	800f238 <rclc_executor_add_timer>
	rclc_executor_add_subscription(&executor, &subscriber, &sub_msg,
 80027cc:	2300      	movs	r3, #0
 80027ce:	9300      	str	r3, [sp, #0]
 80027d0:	4b20      	ldr	r3, [pc, #128]	@ (8002854 <StartDefaultTask+0x21c>)
 80027d2:	4a21      	ldr	r2, [pc, #132]	@ (8002858 <StartDefaultTask+0x220>)
 80027d4:	491a      	ldr	r1, [pc, #104]	@ (8002840 <StartDefaultTask+0x208>)
 80027d6:	481e      	ldr	r0, [pc, #120]	@ (8002850 <StartDefaultTask+0x218>)
 80027d8:	f00c fcfa 	bl	800f1d0 <rclc_executor_add_subscription>
			&subscription_callback, ON_NEW_DATA);
	rclc_executor_spin(&executor);
 80027dc:	481c      	ldr	r0, [pc, #112]	@ (8002850 <StartDefaultTask+0x218>)
 80027de:	f00c ff41 	bl	800f664 <rclc_executor_spin>
}
 80027e2:	bf00      	nop
 80027e4:	37c0      	adds	r7, #192	@ 0xc0
 80027e6:	46bd      	mov	sp, r7
 80027e8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80027ec:	08004a2d 	.word	0x08004a2d
 80027f0:	080049c9 	.word	0x080049c9
 80027f4:	080049a9 	.word	0x080049a9
 80027f8:	0800497d 	.word	0x0800497d
 80027fc:	2000487c 	.word	0x2000487c
 8002800:	08002d91 	.word	0x08002d91
 8002804:	08002dd5 	.word	0x08002dd5
 8002808:	08002e0d 	.word	0x08002e0d
 800280c:	08002e79 	.word	0x08002e79
 8002810:	0801d484 	.word	0x0801d484
 8002814:	200041d8 	.word	0x200041d8
 8002818:	200041ec 	.word	0x200041ec
 800281c:	200041a4 	.word	0x200041a4
 8002820:	0801d4ac 	.word	0x0801d4ac
 8002824:	0801d4b0 	.word	0x0801d4b0
 8002828:	2000419c 	.word	0x2000419c
 800282c:	20004280 	.word	0x20004280
 8002830:	0801d4c0 	.word	0x0801d4c0
 8002834:	0801d4cc 	.word	0x0801d4cc
 8002838:	20004278 	.word	0x20004278
 800283c:	0801d4d8 	.word	0x0801d4d8
 8002840:	2000427c 	.word	0x2000427c
 8002844:	00989680 	.word	0x00989680
 8002848:	08002429 	.word	0x08002429
 800284c:	200042d0 	.word	0x200042d0
 8002850:	200041f0 	.word	0x200041f0
 8002854:	0800255d 	.word	0x0800255d
 8002858:	200042a0 	.word	0x200042a0

0800285c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800285c:	b580      	push	{r7, lr}
 800285e:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8002860:	f002 f961 	bl	8004b26 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8002864:	f000 f89a 	bl	800299c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8002868:	f7ff fd38 	bl	80022dc <MX_GPIO_Init>
	MX_DMA_Init();
 800286c:	f7ff fd04 	bl	8002278 <MX_DMA_Init>
	MX_TIM3_Init();
 8002870:	f001 faec 	bl	8003e4c <MX_TIM3_Init>
	MX_TIM4_Init();
 8002874:	f001 fb40 	bl	8003ef8 <MX_TIM4_Init>
	MX_TIM5_Init();
 8002878:	f001 fb94 	bl	8003fa4 <MX_TIM5_Init>
	MX_TIM20_Init();
 800287c:	f001 fca0 	bl	80041c0 <MX_TIM20_Init>
	MX_TIM8_Init();
 8002880:	f001 fbe6 	bl	8004050 <MX_TIM8_Init>
	MX_TIM2_Init();
 8002884:	f001 fa94 	bl	8003db0 <MX_TIM2_Init>
	MX_LPUART1_UART_Init();
 8002888:	f001 ff70 	bl	800476c <MX_LPUART1_UART_Init>
	MX_IWDG_Init();
 800288c:	f7ff fdae 	bl	80023ec <MX_IWDG_Init>
	/* USER CODE BEGIN 2 */
	transporter_begin();
 8002890:	f001 fe62 	bl	8004558 <transporter_begin>

	// 1. Sine Wave Example
	SIGNAL_init(&sine_sg, SIGNAL_SINE);
 8002894:	2100      	movs	r1, #0
 8002896:	4837      	ldr	r0, [pc, #220]	@ (8002974 <main+0x118>)
 8002898:	f000 fc44 	bl	8003124 <SIGNAL_init>
	SIGNAL_config_sine(&sine_sg, 0.7f / 3.0f,    // Amplitude
 800289c:	eddf 2a36 	vldr	s5, [pc, #216]	@ 8002978 <main+0x11c>
 80028a0:	ed9f 2a36 	vldr	s4, [pc, #216]	@ 800297c <main+0x120>
 80028a4:	eddf 1a36 	vldr	s3, [pc, #216]	@ 8002980 <main+0x124>
 80028a8:	ed9f 1a35 	vldr	s2, [pc, #212]	@ 8002980 <main+0x124>
 80028ac:	eddf 0a35 	vldr	s1, [pc, #212]	@ 8002984 <main+0x128>
 80028b0:	ed9f 0a31 	vldr	s0, [pc, #196]	@ 8002978 <main+0x11c>
 80028b4:	482f      	ldr	r0, [pc, #188]	@ (8002974 <main+0x118>)
 80028b6:	f000 fc93 	bl	80031e0 <SIGNAL_config_sine>
			-0.7f / 3.0f,   // Min Setpoint
			0.7f / 3.0f     // Max Setpoint
					);

	// 2. Chirp Wave Example (Linear)
	SIGNAL_init(&chirp_linear_sg, SIGNAL_CHIRP);
 80028ba:	2101      	movs	r1, #1
 80028bc:	4832      	ldr	r0, [pc, #200]	@ (8002988 <main+0x12c>)
 80028be:	f000 fc31 	bl	8003124 <SIGNAL_init>
	SIGNAL_config_chirp(&chirp_linear_sg, 0.7f / 3.0f,        // Amplitude
 80028c2:	eddf 2a2d 	vldr	s5, [pc, #180]	@ 8002978 <main+0x11c>
 80028c6:	ed9f 2a2d 	vldr	s4, [pc, #180]	@ 800297c <main+0x120>
 80028ca:	2100      	movs	r1, #0
 80028cc:	eef1 1a04 	vmov.f32	s3, #20	@ 0x40a00000  5.0
 80028d0:	eeb2 1a04 	vmov.f32	s2, #36	@ 0x41200000  10.0
 80028d4:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 80028d8:	ed9f 0a27 	vldr	s0, [pc, #156]	@ 8002978 <main+0x11c>
 80028dc:	482a      	ldr	r0, [pc, #168]	@ (8002988 <main+0x12c>)
 80028de:	f000 fcaa 	bl	8003236 <SIGNAL_config_chirp>
			-0.7f / 3.0f,       // Min Setpoint
			0.7f / 3.0f         // Max Setpoint
					);

	// 3. Chirp Wave Example (Logarithmic)
	SIGNAL_init(&chirp_log_sg, SIGNAL_CHIRP);
 80028e2:	2101      	movs	r1, #1
 80028e4:	4829      	ldr	r0, [pc, #164]	@ (800298c <main+0x130>)
 80028e6:	f000 fc1d 	bl	8003124 <SIGNAL_init>
	SIGNAL_config_chirp(&chirp_log_sg, 0.7f / 3.0f,            // Amplitude
 80028ea:	eddf 2a23 	vldr	s5, [pc, #140]	@ 8002978 <main+0x11c>
 80028ee:	ed9f 2a23 	vldr	s4, [pc, #140]	@ 800297c <main+0x120>
 80028f2:	2101      	movs	r1, #1
 80028f4:	eef1 1a04 	vmov.f32	s3, #20	@ 0x40a00000  5.0
 80028f8:	eeb2 1a04 	vmov.f32	s2, #36	@ 0x41200000  10.0
 80028fc:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8002900:	ed9f 0a1d 	vldr	s0, [pc, #116]	@ 8002978 <main+0x11c>
 8002904:	4821      	ldr	r0, [pc, #132]	@ (800298c <main+0x130>)
 8002906:	f000 fc96 	bl	8003236 <SIGNAL_config_chirp>
			-0.7f / 3.0f,           // Min Setpoint
			0.7f / 3.0f             // Max Setpoint
					);

	// 4. Square Wave Example
	SIGNAL_init(&square_sg, SIGNAL_SQUARE);
 800290a:	2102      	movs	r1, #2
 800290c:	4820      	ldr	r0, [pc, #128]	@ (8002990 <main+0x134>)
 800290e:	f000 fc09 	bl	8003124 <SIGNAL_init>
	SIGNAL_config_square(&square_sg, 0.7f / 3.0f,    // Amplitude
 8002912:	ed9f 3a19 	vldr	s6, [pc, #100]	@ 8002978 <main+0x11c>
 8002916:	eddf 2a19 	vldr	s5, [pc, #100]	@ 800297c <main+0x120>
 800291a:	ed9f 2a19 	vldr	s4, [pc, #100]	@ 8002980 <main+0x124>
 800291e:	eddf 1a18 	vldr	s3, [pc, #96]	@ 8002980 <main+0x124>
 8002922:	ed9f 1a1c 	vldr	s2, [pc, #112]	@ 8002994 <main+0x138>
 8002926:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 800292a:	ed9f 0a13 	vldr	s0, [pc, #76]	@ 8002978 <main+0x11c>
 800292e:	4818      	ldr	r0, [pc, #96]	@ (8002990 <main+0x134>)
 8002930:	f000 fcb5 	bl	800329e <SIGNAL_config_square>
			-0.7f / 3.0f,   // Min Setpoint
			0.7f / 3.0f     // Max Setpoint
					);

	// 5. Ramp Wave Example
	SIGNAL_init(&ramp_sg, SIGNAL_RAMP);
 8002934:	2103      	movs	r1, #3
 8002936:	4818      	ldr	r0, [pc, #96]	@ (8002998 <main+0x13c>)
 8002938:	f000 fbf4 	bl	8003124 <SIGNAL_init>
	SIGNAL_config_ramp(&ramp_sg, 0.7f / 3.0f,    // Amplitude
 800293c:	eddf 3a0e 	vldr	s7, [pc, #56]	@ 8002978 <main+0x11c>
 8002940:	ed9f 3a0e 	vldr	s6, [pc, #56]	@ 800297c <main+0x120>
 8002944:	eddf 2a0e 	vldr	s5, [pc, #56]	@ 8002980 <main+0x124>
 8002948:	ed9f 2a0d 	vldr	s4, [pc, #52]	@ 8002980 <main+0x124>
 800294c:	eddf 1a0a 	vldr	s3, [pc, #40]	@ 8002978 <main+0x11c>
 8002950:	ed9f 1a0a 	vldr	s2, [pc, #40]	@ 800297c <main+0x120>
 8002954:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8002958:	ed9f 0a07 	vldr	s0, [pc, #28]	@ 8002978 <main+0x11c>
 800295c:	480e      	ldr	r0, [pc, #56]	@ (8002998 <main+0x13c>)
 800295e:	f000 fcce 	bl	80032fe <SIGNAL_config_ramp>
					);

	/* USER CODE END 2 */

	/* Init scheduler */
	osKernelInitialize();
 8002962:	f007 fbf7 	bl	800a154 <osKernelInitialize>

	/* Call init function for freertos objects (in cmsis_os2.c) */
	MX_FREERTOS_Init();
 8002966:	f7ff fa25 	bl	8001db4 <MX_FREERTOS_Init>

	/* Start scheduler */
	osKernelStart();
 800296a:	f007 fc17 	bl	800a19c <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 800296e:	bf00      	nop
 8002970:	e7fd      	b.n	800296e <main+0x112>
 8002972:	bf00      	nop
 8002974:	20004034 	.word	0x20004034
 8002978:	3e6eeeef 	.word	0x3e6eeeef
 800297c:	be6eeeef 	.word	0xbe6eeeef
 8002980:	00000000 	.word	0x00000000
 8002984:	3d4ccccd 	.word	0x3d4ccccd
 8002988:	20004078 	.word	0x20004078
 800298c:	200040bc 	.word	0x200040bc
 8002990:	20004100 	.word	0x20004100
 8002994:	3e99999a 	.word	0x3e99999a
 8002998:	20004144 	.word	0x20004144

0800299c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800299c:	b580      	push	{r7, lr}
 800299e:	b094      	sub	sp, #80	@ 0x50
 80029a0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80029a2:	f107 0318 	add.w	r3, r7, #24
 80029a6:	2238      	movs	r2, #56	@ 0x38
 80029a8:	2100      	movs	r1, #0
 80029aa:	4618      	mov	r0, r3
 80029ac:	f018 fcde 	bl	801b36c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80029b0:	1d3b      	adds	r3, r7, #4
 80029b2:	2200      	movs	r2, #0
 80029b4:	601a      	str	r2, [r3, #0]
 80029b6:	605a      	str	r2, [r3, #4]
 80029b8:	609a      	str	r2, [r3, #8]
 80029ba:	60da      	str	r2, [r3, #12]
 80029bc:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80029be:	2000      	movs	r0, #0
 80029c0:	f002 ff2c 	bl	800581c <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI
 80029c4:	230a      	movs	r3, #10
 80029c6:	61bb      	str	r3, [r7, #24]
			| RCC_OSCILLATORTYPE_LSI;
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80029c8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80029cc:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80029ce:	2340      	movs	r3, #64	@ 0x40
 80029d0:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80029d2:	2301      	movs	r3, #1
 80029d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80029d6:	2302      	movs	r3, #2
 80029d8:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80029da:	2302      	movs	r3, #2
 80029dc:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80029de:	2304      	movs	r3, #4
 80029e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 85;
 80029e2:	2355      	movs	r3, #85	@ 0x55
 80029e4:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80029e6:	2302      	movs	r3, #2
 80029e8:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80029ea:	2302      	movs	r3, #2
 80029ec:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80029ee:	2302      	movs	r3, #2
 80029f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80029f2:	f107 0318 	add.w	r3, r7, #24
 80029f6:	4618      	mov	r0, r3
 80029f8:	f002 ffc4 	bl	8005984 <HAL_RCC_OscConfig>
 80029fc:	4603      	mov	r3, r0
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d001      	beq.n	8002a06 <SystemClock_Config+0x6a>
		Error_Handler();
 8002a02:	f000 f9bf 	bl	8002d84 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8002a06:	230f      	movs	r3, #15
 8002a08:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002a0a:	2303      	movs	r3, #3
 8002a0c:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002a12:	2300      	movs	r3, #0
 8002a14:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002a16:	2300      	movs	r3, #0
 8002a18:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 8002a1a:	1d3b      	adds	r3, r7, #4
 8002a1c:	2104      	movs	r1, #4
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f003 fac2 	bl	8005fa8 <HAL_RCC_ClockConfig>
 8002a24:	4603      	mov	r3, r0
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d001      	beq.n	8002a2e <SystemClock_Config+0x92>
		Error_Handler();
 8002a2a:	f000 f9ab 	bl	8002d84 <Error_Handler>
	}
}
 8002a2e:	bf00      	nop
 8002a30:	3750      	adds	r7, #80	@ 0x50
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}
	...

08002a38 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b084      	sub	sp, #16
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM1) {
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4aa5      	ldr	r2, [pc, #660]	@ (8002cdc <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d101      	bne.n	8002a4e <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8002a4a:	f002 f885 	bl	8004b58 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */
	if (htim == &htim2) {
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	4aa3      	ldr	r2, [pc, #652]	@ (8002ce0 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	f040 813d 	bne.w	8002cd2 <HAL_TIM_PeriodElapsedCallback+0x29a>
		QEI_get_diff_count(&encoder1);
 8002a58:	48a2      	ldr	r0, [pc, #648]	@ (8002ce4 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8002a5a:	f7fe ffd5 	bl	8001a08 <QEI_get_diff_count>
		QEI_get_diff_count(&encoder2);
 8002a5e:	48a2      	ldr	r0, [pc, #648]	@ (8002ce8 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8002a60:	f7fe ffd2 	bl	8001a08 <QEI_get_diff_count>
		QEI_get_diff_count(&encoder3);
 8002a64:	48a1      	ldr	r0, [pc, #644]	@ (8002cec <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8002a66:	f7fe ffcf 	bl	8001a08 <QEI_get_diff_count>
		QEI_get_diff_count(&encoder4);
 8002a6a:	48a1      	ldr	r0, [pc, #644]	@ (8002cf0 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8002a6c:	f7fe ffcc 	bl	8001a08 <QEI_get_diff_count>

		QEI_compute_data(&encoder1);
 8002a70:	489c      	ldr	r0, [pc, #624]	@ (8002ce4 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8002a72:	f7ff f8a9 	bl	8001bc8 <QEI_compute_data>
		QEI_compute_data(&encoder2);
 8002a76:	489c      	ldr	r0, [pc, #624]	@ (8002ce8 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8002a78:	f7ff f8a6 	bl	8001bc8 <QEI_compute_data>
		QEI_compute_data(&encoder3);
 8002a7c:	489b      	ldr	r0, [pc, #620]	@ (8002cec <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8002a7e:	f7ff f8a3 	bl	8001bc8 <QEI_compute_data>
		QEI_compute_data(&encoder4);
 8002a82:	489b      	ldr	r0, [pc, #620]	@ (8002cf0 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8002a84:	f7ff f8a0 	bl	8001bc8 <QEI_compute_data>

		sine_sample = SIGNAL_generate(&sine_sg, 0.001f);
 8002a88:	ed9f 0a9a 	vldr	s0, [pc, #616]	@ 8002cf4 <HAL_TIM_PeriodElapsedCallback+0x2bc>
 8002a8c:	489a      	ldr	r0, [pc, #616]	@ (8002cf8 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8002a8e:	f000 fc6b 	bl	8003368 <SIGNAL_generate>
 8002a92:	eef0 7a40 	vmov.f32	s15, s0
 8002a96:	4b99      	ldr	r3, [pc, #612]	@ (8002cfc <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8002a98:	edc3 7a00 	vstr	s15, [r3]
		chirp_Linear_sample = SIGNAL_generate(&chirp_linear_sg, 0.001f);
 8002a9c:	ed9f 0a95 	vldr	s0, [pc, #596]	@ 8002cf4 <HAL_TIM_PeriodElapsedCallback+0x2bc>
 8002aa0:	4897      	ldr	r0, [pc, #604]	@ (8002d00 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8002aa2:	f000 fc61 	bl	8003368 <SIGNAL_generate>
 8002aa6:	eef0 7a40 	vmov.f32	s15, s0
 8002aaa:	4b96      	ldr	r3, [pc, #600]	@ (8002d04 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8002aac:	edc3 7a00 	vstr	s15, [r3]
		chirp_log_sample = SIGNAL_generate(&chirp_log_sg, 0.001f);
 8002ab0:	ed9f 0a90 	vldr	s0, [pc, #576]	@ 8002cf4 <HAL_TIM_PeriodElapsedCallback+0x2bc>
 8002ab4:	4894      	ldr	r0, [pc, #592]	@ (8002d08 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8002ab6:	f000 fc57 	bl	8003368 <SIGNAL_generate>
 8002aba:	eef0 7a40 	vmov.f32	s15, s0
 8002abe:	4b93      	ldr	r3, [pc, #588]	@ (8002d0c <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8002ac0:	edc3 7a00 	vstr	s15, [r3]
		square_sample = SIGNAL_generate(&square_sg, 0.001f);
 8002ac4:	ed9f 0a8b 	vldr	s0, [pc, #556]	@ 8002cf4 <HAL_TIM_PeriodElapsedCallback+0x2bc>
 8002ac8:	4891      	ldr	r0, [pc, #580]	@ (8002d10 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8002aca:	f000 fc4d 	bl	8003368 <SIGNAL_generate>
 8002ace:	eef0 7a40 	vmov.f32	s15, s0
 8002ad2:	4b90      	ldr	r3, [pc, #576]	@ (8002d14 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8002ad4:	edc3 7a00 	vstr	s15, [r3]
		ramp_sample = SIGNAL_generate(&ramp_sg, 0.001f);
 8002ad8:	ed9f 0a86 	vldr	s0, [pc, #536]	@ 8002cf4 <HAL_TIM_PeriodElapsedCallback+0x2bc>
 8002adc:	488e      	ldr	r0, [pc, #568]	@ (8002d18 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8002ade:	f000 fc43 	bl	8003368 <SIGNAL_generate>
 8002ae2:	eef0 7a40 	vmov.f32	s15, s0
 8002ae6:	4b8d      	ldr	r3, [pc, #564]	@ (8002d1c <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8002ae8:	edc3 7a00 	vstr	s15, [r3]

		filteredValue1 = FIR_process(&lowPassFilter1, encoder1.radps);
 8002aec:	4b7d      	ldr	r3, [pc, #500]	@ (8002ce4 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8002aee:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8002af2:	eeb0 0a67 	vmov.f32	s0, s15
 8002af6:	488a      	ldr	r0, [pc, #552]	@ (8002d20 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8002af8:	f7fe fdb0 	bl	800165c <FIR_process>
 8002afc:	eef0 7a40 	vmov.f32	s15, s0
 8002b00:	4b88      	ldr	r3, [pc, #544]	@ (8002d24 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8002b02:	edc3 7a00 	vstr	s15, [r3]
		filteredValue2 = FIR_process(&lowPassFilter2, encoder2.radps);
 8002b06:	4b78      	ldr	r3, [pc, #480]	@ (8002ce8 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8002b08:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8002b0c:	eeb0 0a67 	vmov.f32	s0, s15
 8002b10:	4885      	ldr	r0, [pc, #532]	@ (8002d28 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8002b12:	f7fe fda3 	bl	800165c <FIR_process>
 8002b16:	eef0 7a40 	vmov.f32	s15, s0
 8002b1a:	4b84      	ldr	r3, [pc, #528]	@ (8002d2c <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8002b1c:	edc3 7a00 	vstr	s15, [r3]
		filteredValue3 = FIR_process(&lowPassFilter3, encoder3.radps);
 8002b20:	4b72      	ldr	r3, [pc, #456]	@ (8002cec <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8002b22:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8002b26:	eeb0 0a67 	vmov.f32	s0, s15
 8002b2a:	4881      	ldr	r0, [pc, #516]	@ (8002d30 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8002b2c:	f7fe fd96 	bl	800165c <FIR_process>
 8002b30:	eef0 7a40 	vmov.f32	s15, s0
 8002b34:	4b7f      	ldr	r3, [pc, #508]	@ (8002d34 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8002b36:	edc3 7a00 	vstr	s15, [r3]
		filteredValue4 = FIR_process(&lowPassFilter4, encoder4.radps);
 8002b3a:	4b6d      	ldr	r3, [pc, #436]	@ (8002cf0 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8002b3c:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8002b40:	eeb0 0a67 	vmov.f32	s0, s15
 8002b44:	487c      	ldr	r0, [pc, #496]	@ (8002d38 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8002b46:	f7fe fd89 	bl	800165c <FIR_process>
 8002b4a:	eef0 7a40 	vmov.f32	s15, s0
 8002b4e:	4b7b      	ldr	r3, [pc, #492]	@ (8002d3c <HAL_TIM_PeriodElapsedCallback+0x304>)
 8002b50:	edc3 7a00 	vstr	s15, [r3]

		setpointL = sine_sample;
 8002b54:	4b69      	ldr	r3, [pc, #420]	@ (8002cfc <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a79      	ldr	r2, [pc, #484]	@ (8002d40 <HAL_TIM_PeriodElapsedCallback+0x308>)
 8002b5a:	6013      	str	r3, [r2, #0]
		setpointR = sine_sample;
 8002b5c:	4b67      	ldr	r3, [pc, #412]	@ (8002cfc <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a78      	ldr	r2, [pc, #480]	@ (8002d44 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8002b62:	6013      	str	r3, [r2, #0]

		cmd_vel1 = PWM_Satuation(
 8002b64:	4b76      	ldr	r3, [pc, #472]	@ (8002d40 <HAL_TIM_PeriodElapsedCallback+0x308>)
 8002b66:	ed93 7a00 	vldr	s14, [r3]
 8002b6a:	4b6e      	ldr	r3, [pc, #440]	@ (8002d24 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8002b6c:	edd3 7a00 	vldr	s15, [r3]
 8002b70:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b74:	eeb0 0a67 	vmov.f32	s0, s15
 8002b78:	4873      	ldr	r0, [pc, #460]	@ (8002d48 <HAL_TIM_PeriodElapsedCallback+0x310>)
 8002b7a:	f7fe fabe 	bl	80010fa <PID_CONTROLLER_Compute>
 8002b7e:	eef0 7a40 	vmov.f32	s15, s0
 8002b82:	4972      	ldr	r1, [pc, #456]	@ (8002d4c <HAL_TIM_PeriodElapsedCallback+0x314>)
 8002b84:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8002b88:	eeb0 0a67 	vmov.f32	s0, s15
 8002b8c:	f7fe fa5c 	bl	8001048 <PWM_Satuation>
 8002b90:	ee07 0a90 	vmov	s15, r0
 8002b94:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b98:	4b6d      	ldr	r3, [pc, #436]	@ (8002d50 <HAL_TIM_PeriodElapsedCallback+0x318>)
 8002b9a:	edc3 7a00 	vstr	s15, [r3]
				PID_CONTROLLER_Compute(&pid1, setpointL - filteredValue1),
				65535, -65535);
		cmd_vel2 = PWM_Satuation(
 8002b9e:	4b68      	ldr	r3, [pc, #416]	@ (8002d40 <HAL_TIM_PeriodElapsedCallback+0x308>)
 8002ba0:	ed93 7a00 	vldr	s14, [r3]
 8002ba4:	4b61      	ldr	r3, [pc, #388]	@ (8002d2c <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8002ba6:	edd3 7a00 	vldr	s15, [r3]
 8002baa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002bae:	eeb0 0a67 	vmov.f32	s0, s15
 8002bb2:	4868      	ldr	r0, [pc, #416]	@ (8002d54 <HAL_TIM_PeriodElapsedCallback+0x31c>)
 8002bb4:	f7fe faa1 	bl	80010fa <PID_CONTROLLER_Compute>
 8002bb8:	eef0 7a40 	vmov.f32	s15, s0
 8002bbc:	4963      	ldr	r1, [pc, #396]	@ (8002d4c <HAL_TIM_PeriodElapsedCallback+0x314>)
 8002bbe:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8002bc2:	eeb0 0a67 	vmov.f32	s0, s15
 8002bc6:	f7fe fa3f 	bl	8001048 <PWM_Satuation>
 8002bca:	ee07 0a90 	vmov	s15, r0
 8002bce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002bd2:	4b61      	ldr	r3, [pc, #388]	@ (8002d58 <HAL_TIM_PeriodElapsedCallback+0x320>)
 8002bd4:	edc3 7a00 	vstr	s15, [r3]
				PID_CONTROLLER_Compute(&pid2, setpointL - filteredValue2),
				65535, -65535);
		cmd_vel3 = PWM_Satuation(
 8002bd8:	4b5a      	ldr	r3, [pc, #360]	@ (8002d44 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8002bda:	ed93 7a00 	vldr	s14, [r3]
 8002bde:	4b55      	ldr	r3, [pc, #340]	@ (8002d34 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8002be0:	edd3 7a00 	vldr	s15, [r3]
 8002be4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002be8:	eeb0 0a67 	vmov.f32	s0, s15
 8002bec:	485b      	ldr	r0, [pc, #364]	@ (8002d5c <HAL_TIM_PeriodElapsedCallback+0x324>)
 8002bee:	f7fe fa84 	bl	80010fa <PID_CONTROLLER_Compute>
 8002bf2:	eef0 7a40 	vmov.f32	s15, s0
 8002bf6:	4955      	ldr	r1, [pc, #340]	@ (8002d4c <HAL_TIM_PeriodElapsedCallback+0x314>)
 8002bf8:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8002bfc:	eeb0 0a67 	vmov.f32	s0, s15
 8002c00:	f7fe fa22 	bl	8001048 <PWM_Satuation>
 8002c04:	ee07 0a90 	vmov	s15, r0
 8002c08:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c0c:	4b54      	ldr	r3, [pc, #336]	@ (8002d60 <HAL_TIM_PeriodElapsedCallback+0x328>)
 8002c0e:	edc3 7a00 	vstr	s15, [r3]
				PID_CONTROLLER_Compute(&pid3, setpointR - filteredValue3),
				65535, -65535);
		cmd_vel4 = PWM_Satuation(
 8002c12:	4b4c      	ldr	r3, [pc, #304]	@ (8002d44 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8002c14:	ed93 7a00 	vldr	s14, [r3]
 8002c18:	4b48      	ldr	r3, [pc, #288]	@ (8002d3c <HAL_TIM_PeriodElapsedCallback+0x304>)
 8002c1a:	edd3 7a00 	vldr	s15, [r3]
 8002c1e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c22:	eeb0 0a67 	vmov.f32	s0, s15
 8002c26:	484f      	ldr	r0, [pc, #316]	@ (8002d64 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 8002c28:	f7fe fa67 	bl	80010fa <PID_CONTROLLER_Compute>
 8002c2c:	eef0 7a40 	vmov.f32	s15, s0
 8002c30:	4946      	ldr	r1, [pc, #280]	@ (8002d4c <HAL_TIM_PeriodElapsedCallback+0x314>)
 8002c32:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8002c36:	eeb0 0a67 	vmov.f32	s0, s15
 8002c3a:	f7fe fa05 	bl	8001048 <PWM_Satuation>
 8002c3e:	ee07 0a90 	vmov	s15, r0
 8002c42:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c46:	4b48      	ldr	r3, [pc, #288]	@ (8002d68 <HAL_TIM_PeriodElapsedCallback+0x330>)
 8002c48:	edc3 7a00 	vstr	s15, [r3]
				PID_CONTROLLER_Compute(&pid4, setpointR - filteredValue4),
				65535, -65535);

		MDXX_set_range(&motor1, 2000, cmd_vel1);
 8002c4c:	4b40      	ldr	r3, [pc, #256]	@ (8002d50 <HAL_TIM_PeriodElapsedCallback+0x318>)
 8002c4e:	edd3 7a00 	vldr	s15, [r3]
 8002c52:	eef0 0a67 	vmov.f32	s1, s15
 8002c56:	ed9f 0a45 	vldr	s0, [pc, #276]	@ 8002d6c <HAL_TIM_PeriodElapsedCallback+0x334>
 8002c5a:	4845      	ldr	r0, [pc, #276]	@ (8002d70 <HAL_TIM_PeriodElapsedCallback+0x338>)
 8002c5c:	f7fe fb04 	bl	8001268 <MDXX_set_range>
		MDXX_set_range(&motor2, 2000, cmd_vel2);
 8002c60:	4b3d      	ldr	r3, [pc, #244]	@ (8002d58 <HAL_TIM_PeriodElapsedCallback+0x320>)
 8002c62:	edd3 7a00 	vldr	s15, [r3]
 8002c66:	eef0 0a67 	vmov.f32	s1, s15
 8002c6a:	ed9f 0a40 	vldr	s0, [pc, #256]	@ 8002d6c <HAL_TIM_PeriodElapsedCallback+0x334>
 8002c6e:	4841      	ldr	r0, [pc, #260]	@ (8002d74 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 8002c70:	f7fe fafa 	bl	8001268 <MDXX_set_range>
		MDXX_set_range(&motor3, 2000, cmd_vel3);
 8002c74:	4b3a      	ldr	r3, [pc, #232]	@ (8002d60 <HAL_TIM_PeriodElapsedCallback+0x328>)
 8002c76:	edd3 7a00 	vldr	s15, [r3]
 8002c7a:	eef0 0a67 	vmov.f32	s1, s15
 8002c7e:	ed9f 0a3b 	vldr	s0, [pc, #236]	@ 8002d6c <HAL_TIM_PeriodElapsedCallback+0x334>
 8002c82:	483d      	ldr	r0, [pc, #244]	@ (8002d78 <HAL_TIM_PeriodElapsedCallback+0x340>)
 8002c84:	f7fe faf0 	bl	8001268 <MDXX_set_range>
		MDXX_set_range(&motor4, 2000, cmd_vel4);
 8002c88:	4b37      	ldr	r3, [pc, #220]	@ (8002d68 <HAL_TIM_PeriodElapsedCallback+0x330>)
 8002c8a:	edd3 7a00 	vldr	s15, [r3]
 8002c8e:	eef0 0a67 	vmov.f32	s1, s15
 8002c92:	ed9f 0a36 	vldr	s0, [pc, #216]	@ 8002d6c <HAL_TIM_PeriodElapsedCallback+0x334>
 8002c96:	4839      	ldr	r0, [pc, #228]	@ (8002d7c <HAL_TIM_PeriodElapsedCallback+0x344>)
 8002c98:	f7fe fae6 	bl	8001268 <MDXX_set_range>

		uint32_t current_time = HAL_GetTick();
 8002c9c:	f001 ff6e 	bl	8004b7c <HAL_GetTick>
 8002ca0:	60f8      	str	r0, [r7, #12]
		SKID_calculate_pose(&robot_kinematics, cmd_vel1, cmd_vel2, cmd_vel3,
 8002ca2:	4b2b      	ldr	r3, [pc, #172]	@ (8002d50 <HAL_TIM_PeriodElapsedCallback+0x318>)
 8002ca4:	edd3 7a00 	vldr	s15, [r3]
 8002ca8:	4b2b      	ldr	r3, [pc, #172]	@ (8002d58 <HAL_TIM_PeriodElapsedCallback+0x320>)
 8002caa:	ed93 7a00 	vldr	s14, [r3]
 8002cae:	4b2c      	ldr	r3, [pc, #176]	@ (8002d60 <HAL_TIM_PeriodElapsedCallback+0x328>)
 8002cb0:	edd3 6a00 	vldr	s13, [r3]
 8002cb4:	4b2c      	ldr	r3, [pc, #176]	@ (8002d68 <HAL_TIM_PeriodElapsedCallback+0x330>)
 8002cb6:	ed93 6a00 	vldr	s12, [r3]
 8002cba:	68f9      	ldr	r1, [r7, #12]
 8002cbc:	eef0 1a46 	vmov.f32	s3, s12
 8002cc0:	eeb0 1a66 	vmov.f32	s2, s13
 8002cc4:	eef0 0a47 	vmov.f32	s1, s14
 8002cc8:	eeb0 0a67 	vmov.f32	s0, s15
 8002ccc:	482c      	ldr	r0, [pc, #176]	@ (8002d80 <HAL_TIM_PeriodElapsedCallback+0x348>)
 8002cce:	f000 fd8b 	bl	80037e8 <SKID_calculate_pose>
				cmd_vel4, current_time);
	}
	/* USER CODE END Callback 1 */
}
 8002cd2:	bf00      	nop
 8002cd4:	3710      	adds	r7, #16
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}
 8002cda:	bf00      	nop
 8002cdc:	40012c00 	.word	0x40012c00
 8002ce0:	2000434c 	.word	0x2000434c
 8002ce4:	20004644 	.word	0x20004644
 8002ce8:	20004690 	.word	0x20004690
 8002cec:	200046dc 	.word	0x200046dc
 8002cf0:	20004728 	.word	0x20004728
 8002cf4:	3a83126f 	.word	0x3a83126f
 8002cf8:	20004034 	.word	0x20004034
 8002cfc:	20004188 	.word	0x20004188
 8002d00:	20004078 	.word	0x20004078
 8002d04:	2000418c 	.word	0x2000418c
 8002d08:	200040bc 	.word	0x200040bc
 8002d0c:	20004190 	.word	0x20004190
 8002d10:	20004100 	.word	0x20004100
 8002d14:	20004194 	.word	0x20004194
 8002d18:	20004144 	.word	0x20004144
 8002d1c:	20004198 	.word	0x20004198
 8002d20:	20004824 	.word	0x20004824
 8002d24:	20004014 	.word	0x20004014
 8002d28:	20004830 	.word	0x20004830
 8002d2c:	20004018 	.word	0x20004018
 8002d30:	2000483c 	.word	0x2000483c
 8002d34:	2000401c 	.word	0x2000401c
 8002d38:	20004848 	.word	0x20004848
 8002d3c:	20004020 	.word	0x20004020
 8002d40:	2000400c 	.word	0x2000400c
 8002d44:	20004010 	.word	0x20004010
 8002d48:	20004774 	.word	0x20004774
 8002d4c:	ffff0001 	.word	0xffff0001
 8002d50:	20004024 	.word	0x20004024
 8002d54:	200047a0 	.word	0x200047a0
 8002d58:	20004028 	.word	0x20004028
 8002d5c:	200047cc 	.word	0x200047cc
 8002d60:	2000402c 	.word	0x2000402c
 8002d64:	200047f8 	.word	0x200047f8
 8002d68:	20004030 	.word	0x20004030
 8002d6c:	44fa0000 	.word	0x44fa0000
 8002d70:	20004514 	.word	0x20004514
 8002d74:	20004560 	.word	0x20004560
 8002d78:	200045ac 	.word	0x200045ac
 8002d7c:	200045f8 	.word	0x200045f8
 8002d80:	20004854 	.word	0x20004854

08002d84 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8002d84:	b480      	push	{r7}
 8002d86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002d88:	b672      	cpsid	i
}
 8002d8a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002d8c:	bf00      	nop
 8002d8e:	e7fd      	b.n	8002d8c <Error_Handler+0x8>

08002d90 <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b082      	sub	sp, #8
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
 8002d98:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8002d9a:	4b0c      	ldr	r3, [pc, #48]	@ (8002dcc <microros_allocate+0x3c>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	461a      	mov	r2, r3
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	4413      	add	r3, r2
 8002da4:	461a      	mov	r2, r3
 8002da6:	4b09      	ldr	r3, [pc, #36]	@ (8002dcc <microros_allocate+0x3c>)
 8002da8:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8002daa:	4b09      	ldr	r3, [pc, #36]	@ (8002dd0 <microros_allocate+0x40>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	461a      	mov	r2, r3
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	4413      	add	r3, r2
 8002db4:	461a      	mov	r2, r3
 8002db6:	4b06      	ldr	r3, [pc, #24]	@ (8002dd0 <microros_allocate+0x40>)
 8002db8:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 8002dba:	6878      	ldr	r0, [r7, #4]
 8002dbc:	f7ff f80c 	bl	8001dd8 <pvPortMallocMicroROS>
 8002dc0:	4603      	mov	r3, r0
}
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	3708      	adds	r7, #8
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}
 8002dca:	bf00      	nop
 8002dcc:	200042f0 	.word	0x200042f0
 8002dd0:	200042f4 	.word	0x200042f4

08002dd4 <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b082      	sub	sp, #8
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
 8002ddc:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d00c      	beq.n	8002dfe <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 8002de4:	6878      	ldr	r0, [r7, #4]
 8002de6:	f7ff f91b 	bl	8002020 <getBlockSize>
 8002dea:	4603      	mov	r3, r0
 8002dec:	4a06      	ldr	r2, [pc, #24]	@ (8002e08 <microros_deallocate+0x34>)
 8002dee:	6812      	ldr	r2, [r2, #0]
 8002df0:	1ad3      	subs	r3, r2, r3
 8002df2:	461a      	mov	r2, r3
 8002df4:	4b04      	ldr	r3, [pc, #16]	@ (8002e08 <microros_deallocate+0x34>)
 8002df6:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 8002df8:	6878      	ldr	r0, [r7, #4]
 8002dfa:	f7ff f8b5 	bl	8001f68 <vPortFreeMicroROS>
  }
}
 8002dfe:	bf00      	nop
 8002e00:	3708      	adds	r7, #8
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}
 8002e06:	bf00      	nop
 8002e08:	200042f4 	.word	0x200042f4

08002e0c <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b084      	sub	sp, #16
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	60f8      	str	r0, [r7, #12]
 8002e14:	60b9      	str	r1, [r7, #8]
 8002e16:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8002e18:	4b15      	ldr	r3, [pc, #84]	@ (8002e70 <microros_reallocate+0x64>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	461a      	mov	r2, r3
 8002e1e:	68bb      	ldr	r3, [r7, #8]
 8002e20:	4413      	add	r3, r2
 8002e22:	461a      	mov	r2, r3
 8002e24:	4b12      	ldr	r3, [pc, #72]	@ (8002e70 <microros_reallocate+0x64>)
 8002e26:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8002e28:	4b12      	ldr	r3, [pc, #72]	@ (8002e74 <microros_reallocate+0x68>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	461a      	mov	r2, r3
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	4413      	add	r3, r2
 8002e32:	461a      	mov	r2, r3
 8002e34:	4b0f      	ldr	r3, [pc, #60]	@ (8002e74 <microros_reallocate+0x68>)
 8002e36:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d104      	bne.n	8002e48 <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 8002e3e:	68b8      	ldr	r0, [r7, #8]
 8002e40:	f7fe ffca 	bl	8001dd8 <pvPortMallocMicroROS>
 8002e44:	4603      	mov	r3, r0
 8002e46:	e00e      	b.n	8002e66 <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 8002e48:	68f8      	ldr	r0, [r7, #12]
 8002e4a:	f7ff f8e9 	bl	8002020 <getBlockSize>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	4a08      	ldr	r2, [pc, #32]	@ (8002e74 <microros_reallocate+0x68>)
 8002e52:	6812      	ldr	r2, [r2, #0]
 8002e54:	1ad3      	subs	r3, r2, r3
 8002e56:	461a      	mov	r2, r3
 8002e58:	4b06      	ldr	r3, [pc, #24]	@ (8002e74 <microros_reallocate+0x68>)
 8002e5a:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 8002e5c:	68b9      	ldr	r1, [r7, #8]
 8002e5e:	68f8      	ldr	r0, [r7, #12]
 8002e60:	f7ff f8fc 	bl	800205c <pvPortReallocMicroROS>
 8002e64:	4603      	mov	r3, r0
  }
}
 8002e66:	4618      	mov	r0, r3
 8002e68:	3710      	adds	r7, #16
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}
 8002e6e:	bf00      	nop
 8002e70:	200042f0 	.word	0x200042f0
 8002e74:	200042f4 	.word	0x200042f4

08002e78 <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b084      	sub	sp, #16
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	60f8      	str	r0, [r7, #12]
 8002e80:	60b9      	str	r1, [r7, #8]
 8002e82:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	68ba      	ldr	r2, [r7, #8]
 8002e88:	fb02 f303 	mul.w	r3, r2, r3
 8002e8c:	4a0c      	ldr	r2, [pc, #48]	@ (8002ec0 <microros_zero_allocate+0x48>)
 8002e8e:	6812      	ldr	r2, [r2, #0]
 8002e90:	4413      	add	r3, r2
 8002e92:	461a      	mov	r2, r3
 8002e94:	4b0a      	ldr	r3, [pc, #40]	@ (8002ec0 <microros_zero_allocate+0x48>)
 8002e96:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	68ba      	ldr	r2, [r7, #8]
 8002e9c:	fb02 f303 	mul.w	r3, r2, r3
 8002ea0:	4a08      	ldr	r2, [pc, #32]	@ (8002ec4 <microros_zero_allocate+0x4c>)
 8002ea2:	6812      	ldr	r2, [r2, #0]
 8002ea4:	4413      	add	r3, r2
 8002ea6:	461a      	mov	r2, r3
 8002ea8:	4b06      	ldr	r3, [pc, #24]	@ (8002ec4 <microros_zero_allocate+0x4c>)
 8002eaa:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 8002eac:	68b9      	ldr	r1, [r7, #8]
 8002eae:	68f8      	ldr	r0, [r7, #12]
 8002eb0:	f7ff f901 	bl	80020b6 <pvPortCallocMicroROS>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	3710      	adds	r7, #16
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}
 8002ebe:	bf00      	nop
 8002ec0:	200042f0 	.word	0x200042f0
 8002ec4:	200042f4 	.word	0x200042f4

08002ec8 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 8002ec8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002ecc:	b086      	sub	sp, #24
 8002ece:	af00      	add	r7, sp, #0
 8002ed0:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8002ed4:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 8002eda:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002ede:	a320      	add	r3, pc, #128	@ (adr r3, 8002f60 <UTILS_NanosecondsToTimespec+0x98>)
 8002ee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ee4:	f7fd feca 	bl	8000c7c <__aeabi_ldivmod>
 8002ee8:	4602      	mov	r2, r0
 8002eea:	460b      	mov	r3, r1
 8002eec:	6879      	ldr	r1, [r7, #4]
 8002eee:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 8002ef2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002ef6:	a31a      	add	r3, pc, #104	@ (adr r3, 8002f60 <UTILS_NanosecondsToTimespec+0x98>)
 8002ef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002efc:	f7fd febe 	bl	8000c7c <__aeabi_ldivmod>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	689b      	ldr	r3, [r3, #8]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	da20      	bge.n	8002f4e <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	689b      	ldr	r3, [r3, #8]
 8002f10:	4a11      	ldr	r2, [pc, #68]	@ (8002f58 <UTILS_NanosecondsToTimespec+0x90>)
 8002f12:	fb82 1203 	smull	r1, r2, r2, r3
 8002f16:	1712      	asrs	r2, r2, #28
 8002f18:	17db      	asrs	r3, r3, #31
 8002f1a:	1ad3      	subs	r3, r2, r3
 8002f1c:	3301      	adds	r3, #1
 8002f1e:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f26:	6979      	ldr	r1, [r7, #20]
 8002f28:	17c8      	asrs	r0, r1, #31
 8002f2a:	460c      	mov	r4, r1
 8002f2c:	4605      	mov	r5, r0
 8002f2e:	ebb2 0804 	subs.w	r8, r2, r4
 8002f32:	eb63 0905 	sbc.w	r9, r3, r5
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	689a      	ldr	r2, [r3, #8]
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	4906      	ldr	r1, [pc, #24]	@ (8002f5c <UTILS_NanosecondsToTimespec+0x94>)
 8002f44:	fb01 f303 	mul.w	r3, r1, r3
 8002f48:	441a      	add	r2, r3
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	609a      	str	r2, [r3, #8]
    }
}
 8002f4e:	bf00      	nop
 8002f50:	3718      	adds	r7, #24
 8002f52:	46bd      	mov	sp, r7
 8002f54:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002f58:	44b82fa1 	.word	0x44b82fa1
 8002f5c:	3b9aca00 	.word	0x3b9aca00
 8002f60:	3b9aca00 	.word	0x3b9aca00
 8002f64:	00000000 	.word	0x00000000

08002f68 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 8002f68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f6c:	b08e      	sub	sp, #56	@ 0x38
 8002f6e:	af00      	add	r7, sp, #0
 8002f70:	6278      	str	r0, [r7, #36]	@ 0x24
 8002f72:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 8002f74:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8002f78:	2300      	movs	r3, #0
 8002f7a:	6013      	str	r3, [r2, #0]
 8002f7c:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 8002f7e:	f04f 0200 	mov.w	r2, #0
 8002f82:	f04f 0300 	mov.w	r3, #0
 8002f86:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 8002f8a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f008 fc88 	bl	800b8a4 <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 8002f94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f96:	17da      	asrs	r2, r3, #31
 8002f98:	61bb      	str	r3, [r7, #24]
 8002f9a:	61fa      	str	r2, [r7, #28]
 8002f9c:	f04f 0200 	mov.w	r2, #0
 8002fa0:	f04f 0300 	mov.w	r3, #0
 8002fa4:	69b9      	ldr	r1, [r7, #24]
 8002fa6:	000b      	movs	r3, r1
 8002fa8:	2200      	movs	r2, #0
 8002faa:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 8002fae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	461c      	mov	r4, r3
 8002fb4:	4615      	mov	r5, r2
 8002fb6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8002fba:	1911      	adds	r1, r2, r4
 8002fbc:	60b9      	str	r1, [r7, #8]
 8002fbe:	416b      	adcs	r3, r5
 8002fc0:	60fb      	str	r3, [r7, #12]
 8002fc2:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8002fc6:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 8002fca:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8002fce:	4602      	mov	r2, r0
 8002fd0:	460b      	mov	r3, r1
 8002fd2:	f04f 0400 	mov.w	r4, #0
 8002fd6:	f04f 0500 	mov.w	r5, #0
 8002fda:	015d      	lsls	r5, r3, #5
 8002fdc:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8002fe0:	0154      	lsls	r4, r2, #5
 8002fe2:	4622      	mov	r2, r4
 8002fe4:	462b      	mov	r3, r5
 8002fe6:	ebb2 0800 	subs.w	r8, r2, r0
 8002fea:	eb63 0901 	sbc.w	r9, r3, r1
 8002fee:	f04f 0200 	mov.w	r2, #0
 8002ff2:	f04f 0300 	mov.w	r3, #0
 8002ff6:	ea4f 2349 	mov.w	r3, r9, lsl #9
 8002ffa:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 8002ffe:	ea4f 2248 	mov.w	r2, r8, lsl #9
 8003002:	4690      	mov	r8, r2
 8003004:	4699      	mov	r9, r3
 8003006:	eb18 0a00 	adds.w	sl, r8, r0
 800300a:	eb49 0b01 	adc.w	fp, r9, r1
 800300e:	f04f 0200 	mov.w	r2, #0
 8003012:	f04f 0300 	mov.w	r3, #0
 8003016:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800301a:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800301e:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003022:	ebb2 040a 	subs.w	r4, r2, sl
 8003026:	603c      	str	r4, [r7, #0]
 8003028:	eb63 030b 	sbc.w	r3, r3, fp
 800302c:	607b      	str	r3, [r7, #4]
 800302e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003032:	4623      	mov	r3, r4
 8003034:	181b      	adds	r3, r3, r0
 8003036:	613b      	str	r3, [r7, #16]
 8003038:	462b      	mov	r3, r5
 800303a:	eb41 0303 	adc.w	r3, r1, r3
 800303e:	617b      	str	r3, [r7, #20]
 8003040:	6a3a      	ldr	r2, [r7, #32]
 8003042:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003046:	f7ff ff3f 	bl	8002ec8 <UTILS_NanosecondsToTimespec>

    return 0;
 800304a:	2300      	movs	r3, #0
 800304c:	4618      	mov	r0, r3
 800304e:	3738      	adds	r7, #56	@ 0x38
 8003050:	46bd      	mov	sp, r7
 8003052:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08003058 <wrap_phase>:

// CMSIS-specific constants
#define ARM_PI_F32 3.14159265358979323846f

// Internal helper functions
static float32_t wrap_phase(float32_t phase) {
 8003058:	b480      	push	{r7}
 800305a:	b085      	sub	sp, #20
 800305c:	af00      	add	r7, sp, #0
 800305e:	ed87 0a01 	vstr	s0, [r7, #4]
    phase = fabsf(phase);
 8003062:	edd7 7a01 	vldr	s15, [r7, #4]
 8003066:	eef0 7ae7 	vabs.f32	s15, s15
 800306a:	edc7 7a01 	vstr	s15, [r7, #4]
    float32_t two_pi = 2.0f * ARM_PI_F32;
 800306e:	4b17      	ldr	r3, [pc, #92]	@ (80030cc <wrap_phase+0x74>)
 8003070:	60fb      	str	r3, [r7, #12]
    while (phase > two_pi) {
 8003072:	e007      	b.n	8003084 <wrap_phase+0x2c>
        phase -= two_pi;
 8003074:	ed97 7a01 	vldr	s14, [r7, #4]
 8003078:	edd7 7a03 	vldr	s15, [r7, #12]
 800307c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003080:	edc7 7a01 	vstr	s15, [r7, #4]
    while (phase > two_pi) {
 8003084:	ed97 7a01 	vldr	s14, [r7, #4]
 8003088:	edd7 7a03 	vldr	s15, [r7, #12]
 800308c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003090:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003094:	dcee      	bgt.n	8003074 <wrap_phase+0x1c>
    }
    while (phase < 0.0f) {
 8003096:	e007      	b.n	80030a8 <wrap_phase+0x50>
        phase += two_pi;
 8003098:	ed97 7a01 	vldr	s14, [r7, #4]
 800309c:	edd7 7a03 	vldr	s15, [r7, #12]
 80030a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030a4:	edc7 7a01 	vstr	s15, [r7, #4]
    while (phase < 0.0f) {
 80030a8:	edd7 7a01 	vldr	s15, [r7, #4]
 80030ac:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80030b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030b4:	d4f0      	bmi.n	8003098 <wrap_phase+0x40>
    }
    return phase;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	ee07 3a90 	vmov	s15, r3
}
 80030bc:	eeb0 0a67 	vmov.f32	s0, s15
 80030c0:	3714      	adds	r7, #20
 80030c2:	46bd      	mov	sp, r7
 80030c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c8:	4770      	bx	lr
 80030ca:	bf00      	nop
 80030cc:	40c90fdb 	.word	0x40c90fdb

080030d0 <limit_setpoint>:

// Limit output to specified setpoint range
static float32_t limit_setpoint(float32_t value, float32_t min_setpoint, float32_t max_setpoint) {
 80030d0:	b480      	push	{r7}
 80030d2:	b085      	sub	sp, #20
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	ed87 0a03 	vstr	s0, [r7, #12]
 80030da:	edc7 0a02 	vstr	s1, [r7, #8]
 80030de:	ed87 1a01 	vstr	s2, [r7, #4]
    if (value < min_setpoint) return min_setpoint;
 80030e2:	ed97 7a03 	vldr	s14, [r7, #12]
 80030e6:	edd7 7a02 	vldr	s15, [r7, #8]
 80030ea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80030ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030f2:	d501      	bpl.n	80030f8 <limit_setpoint+0x28>
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	e00b      	b.n	8003110 <limit_setpoint+0x40>
    if (value > max_setpoint) return max_setpoint;
 80030f8:	ed97 7a03 	vldr	s14, [r7, #12]
 80030fc:	edd7 7a01 	vldr	s15, [r7, #4]
 8003100:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003104:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003108:	dd01      	ble.n	800310e <limit_setpoint+0x3e>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	e000      	b.n	8003110 <limit_setpoint+0x40>
    return value;
 800310e:	68fb      	ldr	r3, [r7, #12]
}
 8003110:	ee07 3a90 	vmov	s15, r3
 8003114:	eeb0 0a67 	vmov.f32	s0, s15
 8003118:	3714      	adds	r7, #20
 800311a:	46bd      	mov	sp, r7
 800311c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003120:	4770      	bx	lr
	...

08003124 <SIGNAL_init>:

// Initialization function
void SIGNAL_init(SignalGenerator* sg, SignalType type) {
 8003124:	b480      	push	{r7}
 8003126:	b083      	sub	sp, #12
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
 800312c:	460b      	mov	r3, r1
 800312e:	70fb      	strb	r3, [r7, #3]
    // Reset all parameters
    sg->type = type;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	78fa      	ldrb	r2, [r7, #3]
 8003134:	701a      	strb	r2, [r3, #0]
    sg->amplitude = 1.0f;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800313c:	605a      	str	r2, [r3, #4]
    sg->frequency = 1.0f;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8003144:	609a      	str	r2, [r3, #8]
    sg->phase = 0.0f;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	f04f 0200 	mov.w	r2, #0
 800314c:	60da      	str	r2, [r3, #12]
    sg->offset = 0.0f;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	f04f 0200 	mov.w	r2, #0
 8003154:	611a      	str	r2, [r3, #16]
    sg->current_phase = 0.0f;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	f04f 0200 	mov.w	r2, #0
 800315c:	635a      	str	r2, [r3, #52]	@ 0x34
    sg->time_elapsed = 0.0f;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	f04f 0200 	mov.w	r2, #0
 8003164:	639a      	str	r2, [r3, #56]	@ 0x38
    sg->min_setpoint = -1.0f;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	4a1b      	ldr	r2, [pc, #108]	@ (80031d8 <SIGNAL_init+0xb4>)
 800316a:	63da      	str	r2, [r3, #60]	@ 0x3c
    sg->max_setpoint = 1.0f;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8003172:	641a      	str	r2, [r3, #64]	@ 0x40

    // Type-specific initializations
    switch (type) {
 8003174:	78fb      	ldrb	r3, [r7, #3]
 8003176:	2b03      	cmp	r3, #3
 8003178:	d828      	bhi.n	80031cc <SIGNAL_init+0xa8>
 800317a:	a201      	add	r2, pc, #4	@ (adr r2, 8003180 <SIGNAL_init+0x5c>)
 800317c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003180:	080031cb 	.word	0x080031cb
 8003184:	08003191 	.word	0x08003191
 8003188:	080031af 	.word	0x080031af
 800318c:	080031b9 	.word	0x080031b9
        case SIGNAL_SINE:
            break;
        case SIGNAL_CHIRP:
            sg->chirp_type = CHIRP_LINEAR;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2200      	movs	r2, #0
 8003194:	751a      	strb	r2, [r3, #20]
            sg->f_start = 1.0f;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800319c:	619a      	str	r2, [r3, #24]
            sg->f_end = 10.0f;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	4a0e      	ldr	r2, [pc, #56]	@ (80031dc <SIGNAL_init+0xb8>)
 80031a2:	61da      	str	r2, [r3, #28]
            sg->duration = 1.0f;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80031aa:	621a      	str	r2, [r3, #32]
            break;
 80031ac:	e00e      	b.n	80031cc <SIGNAL_init+0xa8>
        case SIGNAL_SQUARE:
            sg->duty_cycle = 0.5f;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 80031b4:	629a      	str	r2, [r3, #40]	@ 0x28
            break;
 80031b6:	e009      	b.n	80031cc <SIGNAL_init+0xa8>
        case SIGNAL_RAMP:
            sg->ramp_start = 0.0f;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	f04f 0200 	mov.w	r2, #0
 80031be:	62da      	str	r2, [r3, #44]	@ 0x2c
            sg->ramp_end = 1.0f;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80031c6:	631a      	str	r2, [r3, #48]	@ 0x30
            break;
 80031c8:	e000      	b.n	80031cc <SIGNAL_init+0xa8>
            break;
 80031ca:	bf00      	nop
    }
}
 80031cc:	bf00      	nop
 80031ce:	370c      	adds	r7, #12
 80031d0:	46bd      	mov	sp, r7
 80031d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d6:	4770      	bx	lr
 80031d8:	bf800000 	.word	0xbf800000
 80031dc:	41200000 	.word	0x41200000

080031e0 <SIGNAL_config_sine>:
                        float32_t amplitude,
                        float32_t frequency,
                        float32_t phase,
                        float32_t offset,
                        float32_t min_setpoint,
                        float32_t max_setpoint) {
 80031e0:	b480      	push	{r7}
 80031e2:	b089      	sub	sp, #36	@ 0x24
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	61f8      	str	r0, [r7, #28]
 80031e8:	ed87 0a06 	vstr	s0, [r7, #24]
 80031ec:	edc7 0a05 	vstr	s1, [r7, #20]
 80031f0:	ed87 1a04 	vstr	s2, [r7, #16]
 80031f4:	edc7 1a03 	vstr	s3, [r7, #12]
 80031f8:	ed87 2a02 	vstr	s4, [r7, #8]
 80031fc:	edc7 2a01 	vstr	s5, [r7, #4]
    sg->type = SIGNAL_SINE;
 8003200:	69fb      	ldr	r3, [r7, #28]
 8003202:	2200      	movs	r2, #0
 8003204:	701a      	strb	r2, [r3, #0]
    sg->amplitude = amplitude;
 8003206:	69fb      	ldr	r3, [r7, #28]
 8003208:	69ba      	ldr	r2, [r7, #24]
 800320a:	605a      	str	r2, [r3, #4]
    sg->frequency = frequency;
 800320c:	69fb      	ldr	r3, [r7, #28]
 800320e:	697a      	ldr	r2, [r7, #20]
 8003210:	609a      	str	r2, [r3, #8]
    sg->phase = phase;
 8003212:	69fb      	ldr	r3, [r7, #28]
 8003214:	693a      	ldr	r2, [r7, #16]
 8003216:	60da      	str	r2, [r3, #12]
    sg->offset = offset;
 8003218:	69fb      	ldr	r3, [r7, #28]
 800321a:	68fa      	ldr	r2, [r7, #12]
 800321c:	611a      	str	r2, [r3, #16]
    sg->min_setpoint = min_setpoint;
 800321e:	69fb      	ldr	r3, [r7, #28]
 8003220:	68ba      	ldr	r2, [r7, #8]
 8003222:	63da      	str	r2, [r3, #60]	@ 0x3c
    sg->max_setpoint = max_setpoint;
 8003224:	69fb      	ldr	r3, [r7, #28]
 8003226:	687a      	ldr	r2, [r7, #4]
 8003228:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800322a:	bf00      	nop
 800322c:	3724      	adds	r7, #36	@ 0x24
 800322e:	46bd      	mov	sp, r7
 8003230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003234:	4770      	bx	lr

08003236 <SIGNAL_config_chirp>:
                         float32_t f_start,
                         float32_t f_end,
                         float32_t duration,
                         ChirpType chirp_type,
                         float32_t min_setpoint,
                         float32_t max_setpoint) {
 8003236:	b480      	push	{r7}
 8003238:	b089      	sub	sp, #36	@ 0x24
 800323a:	af00      	add	r7, sp, #0
 800323c:	61f8      	str	r0, [r7, #28]
 800323e:	ed87 0a06 	vstr	s0, [r7, #24]
 8003242:	edc7 0a05 	vstr	s1, [r7, #20]
 8003246:	ed87 1a04 	vstr	s2, [r7, #16]
 800324a:	edc7 1a03 	vstr	s3, [r7, #12]
 800324e:	460b      	mov	r3, r1
 8003250:	ed87 2a01 	vstr	s4, [r7, #4]
 8003254:	edc7 2a00 	vstr	s5, [r7]
 8003258:	72fb      	strb	r3, [r7, #11]
    sg->type = SIGNAL_CHIRP;
 800325a:	69fb      	ldr	r3, [r7, #28]
 800325c:	2201      	movs	r2, #1
 800325e:	701a      	strb	r2, [r3, #0]
    sg->amplitude = amplitude;
 8003260:	69fb      	ldr	r3, [r7, #28]
 8003262:	69ba      	ldr	r2, [r7, #24]
 8003264:	605a      	str	r2, [r3, #4]
    sg->f_start = f_start;
 8003266:	69fb      	ldr	r3, [r7, #28]
 8003268:	697a      	ldr	r2, [r7, #20]
 800326a:	619a      	str	r2, [r3, #24]
    sg->f_end = f_end;
 800326c:	69fb      	ldr	r3, [r7, #28]
 800326e:	693a      	ldr	r2, [r7, #16]
 8003270:	61da      	str	r2, [r3, #28]
    sg->duration = duration;
 8003272:	69fb      	ldr	r3, [r7, #28]
 8003274:	68fa      	ldr	r2, [r7, #12]
 8003276:	621a      	str	r2, [r3, #32]
    sg->chirp_type = chirp_type;
 8003278:	69fb      	ldr	r3, [r7, #28]
 800327a:	7afa      	ldrb	r2, [r7, #11]
 800327c:	751a      	strb	r2, [r3, #20]
    sg->t = 0.0f;
 800327e:	69fb      	ldr	r3, [r7, #28]
 8003280:	f04f 0200 	mov.w	r2, #0
 8003284:	625a      	str	r2, [r3, #36]	@ 0x24
    sg->min_setpoint = min_setpoint;
 8003286:	69fb      	ldr	r3, [r7, #28]
 8003288:	687a      	ldr	r2, [r7, #4]
 800328a:	63da      	str	r2, [r3, #60]	@ 0x3c
    sg->max_setpoint = max_setpoint;
 800328c:	69fb      	ldr	r3, [r7, #28]
 800328e:	683a      	ldr	r2, [r7, #0]
 8003290:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8003292:	bf00      	nop
 8003294:	3724      	adds	r7, #36	@ 0x24
 8003296:	46bd      	mov	sp, r7
 8003298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329c:	4770      	bx	lr

0800329e <SIGNAL_config_square>:
                          float32_t frequency,
                          float32_t duty_cycle,
                          float32_t phase,
                          float32_t offset,
                          float32_t min_setpoint,
                          float32_t max_setpoint) {
 800329e:	b480      	push	{r7}
 80032a0:	b089      	sub	sp, #36	@ 0x24
 80032a2:	af00      	add	r7, sp, #0
 80032a4:	61f8      	str	r0, [r7, #28]
 80032a6:	ed87 0a06 	vstr	s0, [r7, #24]
 80032aa:	edc7 0a05 	vstr	s1, [r7, #20]
 80032ae:	ed87 1a04 	vstr	s2, [r7, #16]
 80032b2:	edc7 1a03 	vstr	s3, [r7, #12]
 80032b6:	ed87 2a02 	vstr	s4, [r7, #8]
 80032ba:	edc7 2a01 	vstr	s5, [r7, #4]
 80032be:	ed87 3a00 	vstr	s6, [r7]
    sg->type = SIGNAL_SQUARE;
 80032c2:	69fb      	ldr	r3, [r7, #28]
 80032c4:	2202      	movs	r2, #2
 80032c6:	701a      	strb	r2, [r3, #0]
    sg->amplitude = amplitude;
 80032c8:	69fb      	ldr	r3, [r7, #28]
 80032ca:	69ba      	ldr	r2, [r7, #24]
 80032cc:	605a      	str	r2, [r3, #4]
    sg->frequency = frequency;
 80032ce:	69fb      	ldr	r3, [r7, #28]
 80032d0:	697a      	ldr	r2, [r7, #20]
 80032d2:	609a      	str	r2, [r3, #8]
    sg->duty_cycle = duty_cycle;
 80032d4:	69fb      	ldr	r3, [r7, #28]
 80032d6:	693a      	ldr	r2, [r7, #16]
 80032d8:	629a      	str	r2, [r3, #40]	@ 0x28
    sg->phase = phase;
 80032da:	69fb      	ldr	r3, [r7, #28]
 80032dc:	68fa      	ldr	r2, [r7, #12]
 80032de:	60da      	str	r2, [r3, #12]
    sg->offset = offset;
 80032e0:	69fb      	ldr	r3, [r7, #28]
 80032e2:	68ba      	ldr	r2, [r7, #8]
 80032e4:	611a      	str	r2, [r3, #16]
    sg->min_setpoint = min_setpoint;
 80032e6:	69fb      	ldr	r3, [r7, #28]
 80032e8:	687a      	ldr	r2, [r7, #4]
 80032ea:	63da      	str	r2, [r3, #60]	@ 0x3c
    sg->max_setpoint = max_setpoint;
 80032ec:	69fb      	ldr	r3, [r7, #28]
 80032ee:	683a      	ldr	r2, [r7, #0]
 80032f0:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80032f2:	bf00      	nop
 80032f4:	3724      	adds	r7, #36	@ 0x24
 80032f6:	46bd      	mov	sp, r7
 80032f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fc:	4770      	bx	lr

080032fe <SIGNAL_config_ramp>:
                        float32_t ramp_start,
                        float32_t ramp_end,
                        float32_t phase,
                        float32_t offset,
                        float32_t min_setpoint,
                        float32_t max_setpoint) {
 80032fe:	b480      	push	{r7}
 8003300:	b08b      	sub	sp, #44	@ 0x2c
 8003302:	af00      	add	r7, sp, #0
 8003304:	6278      	str	r0, [r7, #36]	@ 0x24
 8003306:	ed87 0a08 	vstr	s0, [r7, #32]
 800330a:	edc7 0a07 	vstr	s1, [r7, #28]
 800330e:	ed87 1a06 	vstr	s2, [r7, #24]
 8003312:	edc7 1a05 	vstr	s3, [r7, #20]
 8003316:	ed87 2a04 	vstr	s4, [r7, #16]
 800331a:	edc7 2a03 	vstr	s5, [r7, #12]
 800331e:	ed87 3a02 	vstr	s6, [r7, #8]
 8003322:	edc7 3a01 	vstr	s7, [r7, #4]
    sg->type = SIGNAL_RAMP;
 8003326:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003328:	2203      	movs	r2, #3
 800332a:	701a      	strb	r2, [r3, #0]
    sg->amplitude = amplitude;
 800332c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800332e:	6a3a      	ldr	r2, [r7, #32]
 8003330:	605a      	str	r2, [r3, #4]
    sg->frequency = frequency;
 8003332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003334:	69fa      	ldr	r2, [r7, #28]
 8003336:	609a      	str	r2, [r3, #8]
    sg->ramp_start = ramp_start;
 8003338:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800333a:	69ba      	ldr	r2, [r7, #24]
 800333c:	62da      	str	r2, [r3, #44]	@ 0x2c
    sg->ramp_end = ramp_end;
 800333e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003340:	697a      	ldr	r2, [r7, #20]
 8003342:	631a      	str	r2, [r3, #48]	@ 0x30
    sg->phase = phase;
 8003344:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003346:	693a      	ldr	r2, [r7, #16]
 8003348:	60da      	str	r2, [r3, #12]
    sg->offset = offset;
 800334a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800334c:	68fa      	ldr	r2, [r7, #12]
 800334e:	611a      	str	r2, [r3, #16]
    sg->min_setpoint = min_setpoint;
 8003350:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003352:	68ba      	ldr	r2, [r7, #8]
 8003354:	63da      	str	r2, [r3, #60]	@ 0x3c
    sg->max_setpoint = max_setpoint;
 8003356:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003358:	687a      	ldr	r2, [r7, #4]
 800335a:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800335c:	bf00      	nop
 800335e:	372c      	adds	r7, #44	@ 0x2c
 8003360:	46bd      	mov	sp, r7
 8003362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003366:	4770      	bx	lr

08003368 <SIGNAL_generate>:

// Signal generation function
float32_t SIGNAL_generate(SignalGenerator* sg, float32_t sample_time) {
 8003368:	b580      	push	{r7, lr}
 800336a:	ed2d 8b02 	vpush	{d8}
 800336e:	b08c      	sub	sp, #48	@ 0x30
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
 8003374:	ed87 0a00 	vstr	s0, [r7]
    float32_t output = 0.0f;
 8003378:	f04f 0300 	mov.w	r3, #0
 800337c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    float32_t two_pi = 2.0f * ARM_PI_F32;
 800337e:	4bb2      	ldr	r3, [pc, #712]	@ (8003648 <SIGNAL_generate+0x2e0>)
 8003380:	627b      	str	r3, [r7, #36]	@ 0x24

    // Update phase and time
    sg->current_phase = wrap_phase(sg->current_phase + two_pi * sg->frequency * sample_time);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	edd3 6a02 	vldr	s13, [r3, #8]
 800338e:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003392:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003396:	edd7 7a00 	vldr	s15, [r7]
 800339a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800339e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033a2:	eeb0 0a67 	vmov.f32	s0, s15
 80033a6:	f7ff fe57 	bl	8003058 <wrap_phase>
 80033aa:	eef0 7a40 	vmov.f32	s15, s0
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
    sg->time_elapsed += sample_time;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 80033ba:	edd7 7a00 	vldr	s15, [r7]
 80033be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38

    switch (sg->type) {
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	781b      	ldrb	r3, [r3, #0]
 80033cc:	2b03      	cmp	r3, #3
 80033ce:	f200 8123 	bhi.w	8003618 <SIGNAL_generate+0x2b0>
 80033d2:	a201      	add	r2, pc, #4	@ (adr r2, 80033d8 <SIGNAL_generate+0x70>)
 80033d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033d8:	080033e9 	.word	0x080033e9
 80033dc:	08003427 	.word	0x08003427
 80033e0:	08003541 	.word	0x08003541
 80033e4:	080035ad 	.word	0x080035ad
        case SIGNAL_SINE: {
            // Sine wave generation
            float32_t phase_input = sg->current_phase + sg->phase;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	edd3 7a03 	vldr	s15, [r3, #12]
 80033f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033f8:	edc7 7a02 	vstr	s15, [r7, #8]
            output = arm_sin_f32(phase_input);
 80033fc:	ed97 0a02 	vldr	s0, [r7, #8]
 8003400:	f006 fde2 	bl	8009fc8 <arm_sin_f32>
 8003404:	ed87 0a0b 	vstr	s0, [r7, #44]	@ 0x2c
            output = sg->amplitude * output + sg->offset;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	ed93 7a01 	vldr	s14, [r3, #4]
 800340e:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8003412:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	edd3 7a04 	vldr	s15, [r3, #16]
 800341c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003420:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
            break;
 8003424:	e0f8      	b.n	8003618 <SIGNAL_generate+0x2b0>
        }

        case SIGNAL_CHIRP: {
            // Chirp signal generation
            float32_t inst_freq;
            float32_t progress = sg->time_elapsed / sg->duration;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	edd3 6a0e 	vldr	s13, [r3, #56]	@ 0x38
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	ed93 7a08 	vldr	s14, [r3, #32]
 8003432:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003436:	edc7 7a04 	vstr	s15, [r7, #16]

            // Calculate instantaneous frequency based on chirp type
            switch (sg->chirp_type) {
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	7d1b      	ldrb	r3, [r3, #20]
 800343e:	2b02      	cmp	r3, #2
 8003440:	d032      	beq.n	80034a8 <SIGNAL_generate+0x140>
 8003442:	2b02      	cmp	r3, #2
 8003444:	dc48      	bgt.n	80034d8 <SIGNAL_generate+0x170>
 8003446:	2b00      	cmp	r3, #0
 8003448:	d002      	beq.n	8003450 <SIGNAL_generate+0xe8>
 800344a:	2b01      	cmp	r3, #1
 800344c:	d014      	beq.n	8003478 <SIGNAL_generate+0x110>
 800344e:	e043      	b.n	80034d8 <SIGNAL_generate+0x170>
                case CHIRP_LINEAR:
                    // Linear frequency sweep
                    inst_freq = sg->f_start + (sg->f_end - sg->f_start) * progress;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	ed93 7a06 	vldr	s14, [r3, #24]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	edd3 6a07 	vldr	s13, [r3, #28]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	edd3 7a06 	vldr	s15, [r3, #24]
 8003462:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003466:	edd7 7a04 	vldr	s15, [r7, #16]
 800346a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800346e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003472:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
                    break;
 8003476:	e02f      	b.n	80034d8 <SIGNAL_generate+0x170>
                case CHIRP_LOGARITHMIC:
                    // Logarithmic frequency sweep
                    inst_freq = sg->f_start * powf(sg->f_end / sg->f_start, progress);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	ed93 8a06 	vldr	s16, [r3, #24]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	ed93 7a07 	vldr	s14, [r3, #28]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	edd3 7a06 	vldr	s15, [r3, #24]
 800348a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800348e:	edd7 0a04 	vldr	s1, [r7, #16]
 8003492:	eeb0 0a66 	vmov.f32	s0, s13
 8003496:	f018 fe91 	bl	801c1bc <powf>
 800349a:	eef0 7a40 	vmov.f32	s15, s0
 800349e:	ee68 7a27 	vmul.f32	s15, s16, s15
 80034a2:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
                    break;
 80034a6:	e017      	b.n	80034d8 <SIGNAL_generate+0x170>
                case CHIRP_QUADRATIC:
                    // Quadratic frequency sweep
                    inst_freq = sg->f_start + (sg->f_end - sg->f_start) * progress * progress;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	ed93 7a06 	vldr	s14, [r3, #24]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	edd3 6a07 	vldr	s13, [r3, #28]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	edd3 7a06 	vldr	s15, [r3, #24]
 80034ba:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80034be:	edd7 7a04 	vldr	s15, [r7, #16]
 80034c2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80034c6:	edd7 7a04 	vldr	s15, [r7, #16]
 80034ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80034ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034d2:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
                    break;
 80034d6:	bf00      	nop
            }

            // Integrate instantaneous frequency
            float32_t chirp_phase = two_pi * inst_freq * sg->time_elapsed;
 80034d8:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80034dc:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80034e0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 80034ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034ee:	edc7 7a03 	vstr	s15, [r7, #12]
            output = arm_sin_f32(chirp_phase + sg->phase);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	ed93 7a03 	vldr	s14, [r3, #12]
 80034f8:	edd7 7a03 	vldr	s15, [r7, #12]
 80034fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003500:	eeb0 0a67 	vmov.f32	s0, s15
 8003504:	f006 fd60 	bl	8009fc8 <arm_sin_f32>
 8003508:	ed87 0a0b 	vstr	s0, [r7, #44]	@ 0x2c
            output *= sg->amplitude;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	edd3 7a01 	vldr	s15, [r3, #4]
 8003512:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8003516:	ee67 7a27 	vmul.f32	s15, s14, s15
 800351a:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

            // Reset if duration exceeded
            if (sg->time_elapsed >= sg->duration) {
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	edd3 7a08 	vldr	s15, [r3, #32]
 800352a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800352e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003532:	da00      	bge.n	8003536 <SIGNAL_generate+0x1ce>
                sg->time_elapsed = 0.0f;
            }
            break;
 8003534:	e070      	b.n	8003618 <SIGNAL_generate+0x2b0>
                sg->time_elapsed = 0.0f;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	f04f 0200 	mov.w	r2, #0
 800353c:	639a      	str	r2, [r3, #56]	@ 0x38
            break;
 800353e:	e06b      	b.n	8003618 <SIGNAL_generate+0x2b0>
        }

        case SIGNAL_SQUARE: {
            // Square wave generation
            float32_t phase_normalized = fmodf(sg->current_phase + sg->phase, two_pi);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	edd3 7a03 	vldr	s15, [r3, #12]
 800354c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003550:	edd7 0a09 	vldr	s1, [r7, #36]	@ 0x24
 8003554:	eeb0 0a67 	vmov.f32	s0, s15
 8003558:	f018 fe10 	bl	801c17c <fmodf>
 800355c:	ed87 0a06 	vstr	s0, [r7, #24]

            float32_t threshold = two_pi * sg->duty_cycle;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8003566:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800356a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800356e:	edc7 7a05 	vstr	s15, [r7, #20]
            output = (phase_normalized < threshold) ?
                     sg->amplitude + sg->offset :
 8003572:	ed97 7a06 	vldr	s14, [r7, #24]
 8003576:	edd7 7a05 	vldr	s15, [r7, #20]
 800357a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800357e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003582:	d508      	bpl.n	8003596 <SIGNAL_generate+0x22e>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	ed93 7a01 	vldr	s14, [r3, #4]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	edd3 7a04 	vldr	s15, [r3, #16]
 8003590:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003594:	e007      	b.n	80035a6 <SIGNAL_generate+0x23e>
                     -sg->amplitude + sg->offset;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	ed93 7a04 	vldr	s14, [r3, #16]
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	edd3 7a01 	vldr	s15, [r3, #4]
                     sg->amplitude + sg->offset :
 80035a2:	ee77 7a67 	vsub.f32	s15, s14, s15
            output = (phase_normalized < threshold) ?
 80035a6:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
            break;
 80035aa:	e035      	b.n	8003618 <SIGNAL_generate+0x2b0>
        }

        case SIGNAL_RAMP: {
            // Ramp signal generation
            float32_t phase_normalized = fmodf(sg->current_phase + sg->phase, two_pi);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	edd3 7a03 	vldr	s15, [r3, #12]
 80035b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80035bc:	edd7 0a09 	vldr	s1, [r7, #36]	@ 0x24
 80035c0:	eeb0 0a67 	vmov.f32	s0, s15
 80035c4:	f018 fdda 	bl	801c17c <fmodf>
 80035c8:	ed87 0a08 	vstr	s0, [r7, #32]
            float32_t ramp_ratio = phase_normalized / two_pi;
 80035cc:	edd7 6a08 	vldr	s13, [r7, #32]
 80035d0:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80035d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80035d8:	edc7 7a07 	vstr	s15, [r7, #28]

            output = sg->ramp_start +
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
                     (sg->ramp_end - sg->ramp_start) * ramp_ratio * sg->amplitude +
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 80035ee:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80035f2:	edd7 7a07 	vldr	s15, [r7, #28]
 80035f6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	edd3 7a01 	vldr	s15, [r3, #4]
 8003600:	ee66 7aa7 	vmul.f32	s15, s13, s15
            output = sg->ramp_start +
 8003604:	ee37 7a27 	vadd.f32	s14, s14, s15
                     sg->offset;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	edd3 7a04 	vldr	s15, [r3, #16]
            output = sg->ramp_start +
 800360e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003612:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
            break;
 8003616:	bf00      	nop
        }
    }

    // Limit output to specified setpoint range
    return limit_setpoint(output, sg->min_setpoint, sg->max_setpoint);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 8003624:	eeb0 1a47 	vmov.f32	s2, s14
 8003628:	eef0 0a67 	vmov.f32	s1, s15
 800362c:	ed97 0a0b 	vldr	s0, [r7, #44]	@ 0x2c
 8003630:	f7ff fd4e 	bl	80030d0 <limit_setpoint>
 8003634:	eef0 7a40 	vmov.f32	s15, s0
}
 8003638:	eeb0 0a67 	vmov.f32	s0, s15
 800363c:	3730      	adds	r7, #48	@ 0x30
 800363e:	46bd      	mov	sp, r7
 8003640:	ecbd 8b02 	vpop	{d8}
 8003644:	bd80      	pop	{r7, pc}
 8003646:	bf00      	nop
 8003648:	40c90fdb 	.word	0x40c90fdb

0800364c <SKID_init>:
#include "skid_kinematic.h"
#include <math.h>

void SKID_init(SKID_KINEMATIC* skid,
               float wheel_radius, float wheel_distance,
               float max_velocity, float max_angular_vel) {
 800364c:	b480      	push	{r7}
 800364e:	b087      	sub	sp, #28
 8003650:	af00      	add	r7, sp, #0
 8003652:	6178      	str	r0, [r7, #20]
 8003654:	ed87 0a04 	vstr	s0, [r7, #16]
 8003658:	edc7 0a03 	vstr	s1, [r7, #12]
 800365c:	ed87 1a02 	vstr	s2, [r7, #8]
 8003660:	edc7 1a01 	vstr	s3, [r7, #4]
    skid->wheel_radius = wheel_radius;
 8003664:	697b      	ldr	r3, [r7, #20]
 8003666:	693a      	ldr	r2, [r7, #16]
 8003668:	601a      	str	r2, [r3, #0]
    skid->wheel_distance = wheel_distance;
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	68fa      	ldr	r2, [r7, #12]
 800366e:	605a      	str	r2, [r3, #4]
    skid->max_velocity = max_velocity;
 8003670:	697b      	ldr	r3, [r7, #20]
 8003672:	68ba      	ldr	r2, [r7, #8]
 8003674:	609a      	str	r2, [r3, #8]
    skid->max_angular_vel = max_angular_vel;
 8003676:	697b      	ldr	r3, [r7, #20]
 8003678:	687a      	ldr	r2, [r7, #4]
 800367a:	60da      	str	r2, [r3, #12]
    skid->left_cmd = 0.0f;
 800367c:	697b      	ldr	r3, [r7, #20]
 800367e:	f04f 0200 	mov.w	r2, #0
 8003682:	611a      	str	r2, [r3, #16]
    skid->right_cmd = 0.0f;
 8003684:	697b      	ldr	r3, [r7, #20]
 8003686:	f04f 0200 	mov.w	r2, #0
 800368a:	615a      	str	r2, [r3, #20]

    // Initialize pose
    skid->x = 0.0f;
 800368c:	697b      	ldr	r3, [r7, #20]
 800368e:	f04f 0200 	mov.w	r2, #0
 8003692:	619a      	str	r2, [r3, #24]
    skid->y = 0.0f;
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	f04f 0200 	mov.w	r2, #0
 800369a:	61da      	str	r2, [r3, #28]
    skid->theta = 0.0f;
 800369c:	697b      	ldr	r3, [r7, #20]
 800369e:	f04f 0200 	mov.w	r2, #0
 80036a2:	621a      	str	r2, [r3, #32]
    skid->last_update_time = 0;
 80036a4:	697b      	ldr	r3, [r7, #20]
 80036a6:	2200      	movs	r2, #0
 80036a8:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80036aa:	bf00      	nop
 80036ac:	371c      	adds	r7, #28
 80036ae:	46bd      	mov	sp, r7
 80036b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b4:	4770      	bx	lr

080036b6 <SKID_inverse_kinematic>:

void SKID_inverse_kinematic(SKID_KINEMATIC* skid, float linear_vel, float angular_vel) {
 80036b6:	b480      	push	{r7}
 80036b8:	b089      	sub	sp, #36	@ 0x24
 80036ba:	af00      	add	r7, sp, #0
 80036bc:	60f8      	str	r0, [r7, #12]
 80036be:	ed87 0a02 	vstr	s0, [r7, #8]
 80036c2:	edc7 0a01 	vstr	s1, [r7, #4]
    // Clamp input velocities to maximum values
    if (linear_vel > skid->max_velocity) {
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	edd3 7a02 	vldr	s15, [r3, #8]
 80036cc:	ed97 7a02 	vldr	s14, [r7, #8]
 80036d0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80036d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036d8:	dd03      	ble.n	80036e2 <SKID_inverse_kinematic+0x2c>
        linear_vel = skid->max_velocity;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	689b      	ldr	r3, [r3, #8]
 80036de:	60bb      	str	r3, [r7, #8]
 80036e0:	e012      	b.n	8003708 <SKID_inverse_kinematic+0x52>
    } else if (linear_vel < -skid->max_velocity) {
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	edd3 7a02 	vldr	s15, [r3, #8]
 80036e8:	eef1 7a67 	vneg.f32	s15, s15
 80036ec:	ed97 7a02 	vldr	s14, [r7, #8]
 80036f0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80036f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036f8:	d506      	bpl.n	8003708 <SKID_inverse_kinematic+0x52>
        linear_vel = -skid->max_velocity;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	edd3 7a02 	vldr	s15, [r3, #8]
 8003700:	eef1 7a67 	vneg.f32	s15, s15
 8003704:	edc7 7a02 	vstr	s15, [r7, #8]
    }

    if (angular_vel > skid->max_angular_vel) {
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	edd3 7a03 	vldr	s15, [r3, #12]
 800370e:	ed97 7a01 	vldr	s14, [r7, #4]
 8003712:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003716:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800371a:	dd03      	ble.n	8003724 <SKID_inverse_kinematic+0x6e>
        angular_vel = skid->max_angular_vel;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	68db      	ldr	r3, [r3, #12]
 8003720:	607b      	str	r3, [r7, #4]
 8003722:	e012      	b.n	800374a <SKID_inverse_kinematic+0x94>
    } else if (angular_vel < -skid->max_angular_vel) {
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	edd3 7a03 	vldr	s15, [r3, #12]
 800372a:	eef1 7a67 	vneg.f32	s15, s15
 800372e:	ed97 7a01 	vldr	s14, [r7, #4]
 8003732:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003736:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800373a:	d506      	bpl.n	800374a <SKID_inverse_kinematic+0x94>
        angular_vel = -skid->max_angular_vel;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	edd3 7a03 	vldr	s15, [r3, #12]
 8003742:	eef1 7a67 	vneg.f32	s15, s15
 8003746:	edc7 7a01 	vstr	s15, [r7, #4]
    }

    // Calculate wheel velocities using the inverse kinematic model
    float left_wheel_vel = linear_vel - (angular_vel * skid->wheel_distance / 2.0f);
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	ed93 7a01 	vldr	s14, [r3, #4]
 8003750:	edd7 7a01 	vldr	s15, [r7, #4]
 8003754:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003758:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800375c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003760:	ed97 7a02 	vldr	s14, [r7, #8]
 8003764:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003768:	edc7 7a07 	vstr	s15, [r7, #28]
    float right_wheel_vel = linear_vel + (angular_vel * skid->wheel_distance / 2.0f);
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	ed93 7a01 	vldr	s14, [r3, #4]
 8003772:	edd7 7a01 	vldr	s15, [r7, #4]
 8003776:	ee27 7a27 	vmul.f32	s14, s14, s15
 800377a:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800377e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003782:	ed97 7a02 	vldr	s14, [r7, #8]
 8003786:	ee77 7a27 	vadd.f32	s15, s14, s15
 800378a:	edc7 7a06 	vstr	s15, [r7, #24]

    // Normalize to the range of -100 to 100 for motor commands
    float max_wheel_vel = skid->max_velocity + (skid->max_angular_vel * skid->wheel_distance / 2.0f);
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	ed93 7a02 	vldr	s14, [r3, #8]
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	edd3 6a03 	vldr	s13, [r3, #12]
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	edd3 7a01 	vldr	s15, [r3, #4]
 80037a0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80037a4:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 80037a8:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80037ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80037b0:	edc7 7a05 	vstr	s15, [r7, #20]

    skid->left_cmd = (left_wheel_vel / max_wheel_vel);
 80037b4:	edd7 6a07 	vldr	s13, [r7, #28]
 80037b8:	ed97 7a05 	vldr	s14, [r7, #20]
 80037bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	edc3 7a04 	vstr	s15, [r3, #16]
    skid->right_cmd = (right_wheel_vel / max_wheel_vel);
 80037c6:	edd7 6a06 	vldr	s13, [r7, #24]
 80037ca:	ed97 7a05 	vldr	s14, [r7, #20]
 80037ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	edc3 7a05 	vstr	s15, [r3, #20]
}
 80037d8:	bf00      	nop
 80037da:	3724      	adds	r7, #36	@ 0x24
 80037dc:	46bd      	mov	sp, r7
 80037de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e2:	4770      	bx	lr
 80037e4:	0000      	movs	r0, r0
	...

080037e8 <SKID_calculate_pose>:
        *angular_vel = -skid->max_angular_vel;
    }
}

void SKID_calculate_pose(SKID_KINEMATIC* skid, float omega_left_front, float omega_left_rear,
                         float omega_right_front, float omega_right_rear, uint32_t current_time) {
 80037e8:	b580      	push	{r7, lr}
 80037ea:	ed2d 8b02 	vpush	{d8}
 80037ee:	b090      	sub	sp, #64	@ 0x40
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6178      	str	r0, [r7, #20]
 80037f4:	ed87 0a04 	vstr	s0, [r7, #16]
 80037f8:	edc7 0a03 	vstr	s1, [r7, #12]
 80037fc:	ed87 1a02 	vstr	s2, [r7, #8]
 8003800:	edc7 1a01 	vstr	s3, [r7, #4]
 8003804:	6039      	str	r1, [r7, #0]
    // Skip if this is the first update
    if (skid->last_update_time == 0) {
 8003806:	697b      	ldr	r3, [r7, #20]
 8003808:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800380a:	2b00      	cmp	r3, #0
 800380c:	d103      	bne.n	8003816 <SKID_calculate_pose+0x2e>
        skid->last_update_time = current_time;
 800380e:	697b      	ldr	r3, [r7, #20]
 8003810:	683a      	ldr	r2, [r7, #0]
 8003812:	625a      	str	r2, [r3, #36]	@ 0x24
        return;
 8003814:	e0f3      	b.n	80039fe <SKID_calculate_pose+0x216>
    }

    // Calculate time delta in seconds (1000Hz = 0.001 seconds per step)
    float dt = (float)(current_time - skid->last_update_time) / 1000.0f;
 8003816:	697b      	ldr	r3, [r7, #20]
 8003818:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800381a:	683a      	ldr	r2, [r7, #0]
 800381c:	1ad3      	subs	r3, r2, r3
 800381e:	ee07 3a90 	vmov	s15, r3
 8003822:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003826:	eddf 6a7e 	vldr	s13, [pc, #504]	@ 8003a20 <SKID_calculate_pose+0x238>
 800382a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800382e:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c

    // Ensure we're not processing too fast or if timer wrapped around
    if (dt <= 0 || dt > 0.1f) {
 8003832:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8003836:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800383a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800383e:	d908      	bls.n	8003852 <SKID_calculate_pose+0x6a>
 8003840:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8003844:	ed9f 7a77 	vldr	s14, [pc, #476]	@ 8003a24 <SKID_calculate_pose+0x23c>
 8003848:	eef4 7ac7 	vcmpe.f32	s15, s14
 800384c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003850:	dd03      	ble.n	800385a <SKID_calculate_pose+0x72>
        skid->last_update_time = current_time;
 8003852:	697b      	ldr	r3, [r7, #20]
 8003854:	683a      	ldr	r2, [r7, #0]
 8003856:	625a      	str	r2, [r3, #36]	@ 0x24
        return;
 8003858:	e0d1      	b.n	80039fe <SKID_calculate_pose+0x216>
    }

    // Average omega for each side (rad/s)
    float omega_left = (omega_left_front + omega_left_rear) / 2.0f;
 800385a:	ed97 7a04 	vldr	s14, [r7, #16]
 800385e:	edd7 7a03 	vldr	s15, [r7, #12]
 8003862:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003866:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800386a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800386e:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
    float omega_right = (omega_right_front + omega_right_rear) / 2.0f;
 8003872:	ed97 7a02 	vldr	s14, [r7, #8]
 8003876:	edd7 7a01 	vldr	s15, [r7, #4]
 800387a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800387e:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8003882:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003886:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34

    // Calculate wheel linear velocities from angular velocities
    float v_left = omega_left * skid->wheel_radius;
 800388a:	697b      	ldr	r3, [r7, #20]
 800388c:	edd3 7a00 	vldr	s15, [r3]
 8003890:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8003894:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003898:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
    float v_right = omega_right * skid->wheel_radius;
 800389c:	697b      	ldr	r3, [r7, #20]
 800389e:	edd3 7a00 	vldr	s15, [r3]
 80038a2:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 80038a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038aa:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

    // Calculate robot velocities
    float v = (v_right + v_left) / 2.0f;                     // Linear velocity (m/s)
 80038ae:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80038b2:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80038b6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80038ba:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80038be:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80038c2:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    float omega = (v_right - v_left) / skid->wheel_distance; // Angular velocity (rad/s)
 80038c6:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80038ca:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80038ce:	ee77 6a67 	vsub.f32	s13, s14, s15
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	ed93 7a01 	vldr	s14, [r3, #4]
 80038d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80038dc:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

    // Update pose using simple Euler integration
    // For higher accuracy, consider using Runge-Kutta or similar methods
    float delta_theta = omega * dt;
 80038e0:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80038e4:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80038e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038ec:	edc7 7a08 	vstr	s15, [r7, #32]

    // Use average orientation during the time step for better accuracy
    float theta_avg = skid->theta + delta_theta / 2.0f;
 80038f0:	697b      	ldr	r3, [r7, #20]
 80038f2:	ed93 7a08 	vldr	s14, [r3, #32]
 80038f6:	edd7 6a08 	vldr	s13, [r7, #32]
 80038fa:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 80038fe:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003902:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003906:	edc7 7a07 	vstr	s15, [r7, #28]

    // Update position based on linear velocity and orientation
    skid->x += v * cosf(theta_avg) * dt;
 800390a:	697b      	ldr	r3, [r7, #20]
 800390c:	ed93 8a06 	vldr	s16, [r3, #24]
 8003910:	ed97 0a07 	vldr	s0, [r7, #28]
 8003914:	f018 fcaa 	bl	801c26c <cosf>
 8003918:	eeb0 7a40 	vmov.f32	s14, s0
 800391c:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8003920:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003924:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8003928:	ee67 7a27 	vmul.f32	s15, s14, s15
 800392c:	ee78 7a27 	vadd.f32	s15, s16, s15
 8003930:	697b      	ldr	r3, [r7, #20]
 8003932:	edc3 7a06 	vstr	s15, [r3, #24]
    skid->y += v * sinf(theta_avg) * dt;
 8003936:	697b      	ldr	r3, [r7, #20]
 8003938:	ed93 8a07 	vldr	s16, [r3, #28]
 800393c:	ed97 0a07 	vldr	s0, [r7, #28]
 8003940:	f018 fcd8 	bl	801c2f4 <sinf>
 8003944:	eeb0 7a40 	vmov.f32	s14, s0
 8003948:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800394c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003950:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8003954:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003958:	ee78 7a27 	vadd.f32	s15, s16, s15
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	edc3 7a07 	vstr	s15, [r3, #28]
    skid->theta += delta_theta;
 8003962:	697b      	ldr	r3, [r7, #20]
 8003964:	ed93 7a08 	vldr	s14, [r3, #32]
 8003968:	edd7 7a08 	vldr	s15, [r7, #32]
 800396c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003970:	697b      	ldr	r3, [r7, #20]
 8003972:	edc3 7a08 	vstr	s15, [r3, #32]

    // Normalize theta to -π to π range
    if (skid->theta > M_PI)
 8003976:	697b      	ldr	r3, [r7, #20]
 8003978:	6a1b      	ldr	r3, [r3, #32]
 800397a:	4618      	mov	r0, r3
 800397c:	f7fc fe1c 	bl	80005b8 <__aeabi_f2d>
 8003980:	a321      	add	r3, pc, #132	@ (adr r3, 8003a08 <SKID_calculate_pose+0x220>)
 8003982:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003986:	f7fd f8ff 	bl	8000b88 <__aeabi_dcmpgt>
 800398a:	4603      	mov	r3, r0
 800398c:	2b00      	cmp	r3, #0
 800398e:	d013      	beq.n	80039b8 <SKID_calculate_pose+0x1d0>
        skid->theta -= 2.0f * M_PI;
 8003990:	697b      	ldr	r3, [r7, #20]
 8003992:	6a1b      	ldr	r3, [r3, #32]
 8003994:	4618      	mov	r0, r3
 8003996:	f7fc fe0f 	bl	80005b8 <__aeabi_f2d>
 800399a:	a31d      	add	r3, pc, #116	@ (adr r3, 8003a10 <SKID_calculate_pose+0x228>)
 800399c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039a0:	f7fc fcaa 	bl	80002f8 <__aeabi_dsub>
 80039a4:	4602      	mov	r2, r0
 80039a6:	460b      	mov	r3, r1
 80039a8:	4610      	mov	r0, r2
 80039aa:	4619      	mov	r1, r3
 80039ac:	f7fd f916 	bl	8000bdc <__aeabi_d2f>
 80039b0:	4602      	mov	r2, r0
 80039b2:	697b      	ldr	r3, [r7, #20]
 80039b4:	621a      	str	r2, [r3, #32]
 80039b6:	e01f      	b.n	80039f8 <SKID_calculate_pose+0x210>
    else if (skid->theta < -M_PI)
 80039b8:	697b      	ldr	r3, [r7, #20]
 80039ba:	6a1b      	ldr	r3, [r3, #32]
 80039bc:	4618      	mov	r0, r3
 80039be:	f7fc fdfb 	bl	80005b8 <__aeabi_f2d>
 80039c2:	a315      	add	r3, pc, #84	@ (adr r3, 8003a18 <SKID_calculate_pose+0x230>)
 80039c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039c8:	f7fd f8c0 	bl	8000b4c <__aeabi_dcmplt>
 80039cc:	4603      	mov	r3, r0
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d012      	beq.n	80039f8 <SKID_calculate_pose+0x210>
        skid->theta += 2.0f * M_PI;
 80039d2:	697b      	ldr	r3, [r7, #20]
 80039d4:	6a1b      	ldr	r3, [r3, #32]
 80039d6:	4618      	mov	r0, r3
 80039d8:	f7fc fdee 	bl	80005b8 <__aeabi_f2d>
 80039dc:	a30c      	add	r3, pc, #48	@ (adr r3, 8003a10 <SKID_calculate_pose+0x228>)
 80039de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039e2:	f7fc fc8b 	bl	80002fc <__adddf3>
 80039e6:	4602      	mov	r2, r0
 80039e8:	460b      	mov	r3, r1
 80039ea:	4610      	mov	r0, r2
 80039ec:	4619      	mov	r1, r3
 80039ee:	f7fd f8f5 	bl	8000bdc <__aeabi_d2f>
 80039f2:	4602      	mov	r2, r0
 80039f4:	697b      	ldr	r3, [r7, #20]
 80039f6:	621a      	str	r2, [r3, #32]

    // Update last update time
    skid->last_update_time = current_time;
 80039f8:	697b      	ldr	r3, [r7, #20]
 80039fa:	683a      	ldr	r2, [r7, #0]
 80039fc:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80039fe:	3740      	adds	r7, #64	@ 0x40
 8003a00:	46bd      	mov	sp, r7
 8003a02:	ecbd 8b02 	vpop	{d8}
 8003a06:	bd80      	pop	{r7, pc}
 8003a08:	54442d18 	.word	0x54442d18
 8003a0c:	400921fb 	.word	0x400921fb
 8003a10:	54442d18 	.word	0x54442d18
 8003a14:	401921fb 	.word	0x401921fb
 8003a18:	54442d18 	.word	0x54442d18
 8003a1c:	c00921fb 	.word	0xc00921fb
 8003a20:	447a0000 	.word	0x447a0000
 8003a24:	3dcccccd 	.word	0x3dcccccd

08003a28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b082      	sub	sp, #8
 8003a2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a2e:	4b12      	ldr	r3, [pc, #72]	@ (8003a78 <HAL_MspInit+0x50>)
 8003a30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a32:	4a11      	ldr	r2, [pc, #68]	@ (8003a78 <HAL_MspInit+0x50>)
 8003a34:	f043 0301 	orr.w	r3, r3, #1
 8003a38:	6613      	str	r3, [r2, #96]	@ 0x60
 8003a3a:	4b0f      	ldr	r3, [pc, #60]	@ (8003a78 <HAL_MspInit+0x50>)
 8003a3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a3e:	f003 0301 	and.w	r3, r3, #1
 8003a42:	607b      	str	r3, [r7, #4]
 8003a44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003a46:	4b0c      	ldr	r3, [pc, #48]	@ (8003a78 <HAL_MspInit+0x50>)
 8003a48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a4a:	4a0b      	ldr	r2, [pc, #44]	@ (8003a78 <HAL_MspInit+0x50>)
 8003a4c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a50:	6593      	str	r3, [r2, #88]	@ 0x58
 8003a52:	4b09      	ldr	r3, [pc, #36]	@ (8003a78 <HAL_MspInit+0x50>)
 8003a54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a5a:	603b      	str	r3, [r7, #0]
 8003a5c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003a5e:	2200      	movs	r2, #0
 8003a60:	210f      	movs	r1, #15
 8003a62:	f06f 0001 	mvn.w	r0, #1
 8003a66:	f001 f94d 	bl	8004d04 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8003a6a:	f001 ff7b 	bl	8005964 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003a6e:	bf00      	nop
 8003a70:	3708      	adds	r7, #8
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bd80      	pop	{r7, pc}
 8003a76:	bf00      	nop
 8003a78:	40021000 	.word	0x40021000

08003a7c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b08c      	sub	sp, #48	@ 0x30
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8003a84:	2300      	movs	r3, #0
 8003a86:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 8003a88:	2300      	movs	r3, #0
 8003a8a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8003a8c:	4b2c      	ldr	r3, [pc, #176]	@ (8003b40 <HAL_InitTick+0xc4>)
 8003a8e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a90:	4a2b      	ldr	r2, [pc, #172]	@ (8003b40 <HAL_InitTick+0xc4>)
 8003a92:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003a96:	6613      	str	r3, [r2, #96]	@ 0x60
 8003a98:	4b29      	ldr	r3, [pc, #164]	@ (8003b40 <HAL_InitTick+0xc4>)
 8003a9a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a9c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003aa0:	60bb      	str	r3, [r7, #8]
 8003aa2:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003aa4:	f107 020c 	add.w	r2, r7, #12
 8003aa8:	f107 0310 	add.w	r3, r7, #16
 8003aac:	4611      	mov	r1, r2
 8003aae:	4618      	mov	r0, r3
 8003ab0:	f002 fc50 	bl	8006354 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8003ab4:	f002 fc38 	bl	8006328 <HAL_RCC_GetPCLK2Freq>
 8003ab8:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003aba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003abc:	4a21      	ldr	r2, [pc, #132]	@ (8003b44 <HAL_InitTick+0xc8>)
 8003abe:	fba2 2303 	umull	r2, r3, r2, r3
 8003ac2:	0c9b      	lsrs	r3, r3, #18
 8003ac4:	3b01      	subs	r3, #1
 8003ac6:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8003ac8:	4b1f      	ldr	r3, [pc, #124]	@ (8003b48 <HAL_InitTick+0xcc>)
 8003aca:	4a20      	ldr	r2, [pc, #128]	@ (8003b4c <HAL_InitTick+0xd0>)
 8003acc:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8003ace:	4b1e      	ldr	r3, [pc, #120]	@ (8003b48 <HAL_InitTick+0xcc>)
 8003ad0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003ad4:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8003ad6:	4a1c      	ldr	r2, [pc, #112]	@ (8003b48 <HAL_InitTick+0xcc>)
 8003ad8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ada:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8003adc:	4b1a      	ldr	r3, [pc, #104]	@ (8003b48 <HAL_InitTick+0xcc>)
 8003ade:	2200      	movs	r2, #0
 8003ae0:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003ae2:	4b19      	ldr	r3, [pc, #100]	@ (8003b48 <HAL_InitTick+0xcc>)
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim1);
 8003ae8:	4817      	ldr	r0, [pc, #92]	@ (8003b48 <HAL_InitTick+0xcc>)
 8003aea:	f002 fef9 	bl	80068e0 <HAL_TIM_Base_Init>
 8003aee:	4603      	mov	r3, r0
 8003af0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8003af4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d11b      	bne.n	8003b34 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8003afc:	4812      	ldr	r0, [pc, #72]	@ (8003b48 <HAL_InitTick+0xcc>)
 8003afe:	f002 ffb7 	bl	8006a70 <HAL_TIM_Base_Start_IT>
 8003b02:	4603      	mov	r3, r0
 8003b04:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8003b08:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d111      	bne.n	8003b34 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8003b10:	2019      	movs	r0, #25
 8003b12:	f001 f911 	bl	8004d38 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2b0f      	cmp	r3, #15
 8003b1a:	d808      	bhi.n	8003b2e <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	6879      	ldr	r1, [r7, #4]
 8003b20:	2019      	movs	r0, #25
 8003b22:	f001 f8ef 	bl	8004d04 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003b26:	4a0a      	ldr	r2, [pc, #40]	@ (8003b50 <HAL_InitTick+0xd4>)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6013      	str	r3, [r2, #0]
 8003b2c:	e002      	b.n	8003b34 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8003b34:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8003b38:	4618      	mov	r0, r3
 8003b3a:	3730      	adds	r7, #48	@ 0x30
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bd80      	pop	{r7, pc}
 8003b40:	40021000 	.word	0x40021000
 8003b44:	431bde83 	.word	0x431bde83
 8003b48:	200042f8 	.word	0x200042f8
 8003b4c:	40012c00 	.word	0x40012c00
 8003b50:	20000008 	.word	0x20000008

08003b54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003b54:	b480      	push	{r7}
 8003b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003b58:	bf00      	nop
 8003b5a:	e7fd      	b.n	8003b58 <NMI_Handler+0x4>

08003b5c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003b60:	bf00      	nop
 8003b62:	e7fd      	b.n	8003b60 <HardFault_Handler+0x4>

08003b64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003b64:	b480      	push	{r7}
 8003b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003b68:	bf00      	nop
 8003b6a:	e7fd      	b.n	8003b68 <MemManage_Handler+0x4>

08003b6c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003b70:	bf00      	nop
 8003b72:	e7fd      	b.n	8003b70 <BusFault_Handler+0x4>

08003b74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003b74:	b480      	push	{r7}
 8003b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003b78:	bf00      	nop
 8003b7a:	e7fd      	b.n	8003b78 <UsageFault_Handler+0x4>

08003b7c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003b80:	bf00      	nop
 8003b82:	46bd      	mov	sp, r7
 8003b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b88:	4770      	bx	lr
	...

08003b8c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 8003b90:	4802      	ldr	r0, [pc, #8]	@ (8003b9c <DMA1_Channel1_IRQHandler+0x10>)
 8003b92:	f001 fac2 	bl	800511a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003b96:	bf00      	nop
 8003b98:	bd80      	pop	{r7, pc}
 8003b9a:	bf00      	nop
 8003b9c:	20004910 	.word	0x20004910

08003ba0 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8003ba4:	4802      	ldr	r0, [pc, #8]	@ (8003bb0 <DMA1_Channel2_IRQHandler+0x10>)
 8003ba6:	f001 fab8 	bl	800511a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8003baa:	bf00      	nop
 8003bac:	bd80      	pop	{r7, pc}
 8003bae:	bf00      	nop
 8003bb0:	20004970 	.word	0x20004970

08003bb4 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003bb8:	4802      	ldr	r0, [pc, #8]	@ (8003bc4 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8003bba:	f003 fa6f 	bl	800709c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8003bbe:	bf00      	nop
 8003bc0:	bd80      	pop	{r7, pc}
 8003bc2:	bf00      	nop
 8003bc4:	200042f8 	.word	0x200042f8

08003bc8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003bcc:	4802      	ldr	r0, [pc, #8]	@ (8003bd8 <TIM2_IRQHandler+0x10>)
 8003bce:	f003 fa65 	bl	800709c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003bd2:	bf00      	nop
 8003bd4:	bd80      	pop	{r7, pc}
 8003bd6:	bf00      	nop
 8003bd8:	2000434c 	.word	0x2000434c

08003bdc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8003be0:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8003be4:	f001 fda8 	bl	8005738 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003be8:	bf00      	nop
 8003bea:	bd80      	pop	{r7, pc}

08003bec <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8003bf0:	4802      	ldr	r0, [pc, #8]	@ (8003bfc <LPUART1_IRQHandler+0x10>)
 8003bf2:	f004 fdb7 	bl	8008764 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8003bf6:	bf00      	nop
 8003bf8:	bd80      	pop	{r7, pc}
 8003bfa:	bf00      	nop
 8003bfc:	2000487c 	.word	0x2000487c

08003c00 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003c00:	b480      	push	{r7}
 8003c02:	af00      	add	r7, sp, #0
  return 1;
 8003c04:	2301      	movs	r3, #1
}
 8003c06:	4618      	mov	r0, r3
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0e:	4770      	bx	lr

08003c10 <_kill>:

int _kill(int pid, int sig)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b082      	sub	sp, #8
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
 8003c18:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003c1a:	f017 fc3b 	bl	801b494 <__errno>
 8003c1e:	4603      	mov	r3, r0
 8003c20:	2216      	movs	r2, #22
 8003c22:	601a      	str	r2, [r3, #0]
  return -1;
 8003c24:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8003c28:	4618      	mov	r0, r3
 8003c2a:	3708      	adds	r7, #8
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bd80      	pop	{r7, pc}

08003c30 <_exit>:

void _exit (int status)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b082      	sub	sp, #8
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003c38:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003c3c:	6878      	ldr	r0, [r7, #4]
 8003c3e:	f7ff ffe7 	bl	8003c10 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003c42:	bf00      	nop
 8003c44:	e7fd      	b.n	8003c42 <_exit+0x12>

08003c46 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003c46:	b580      	push	{r7, lr}
 8003c48:	b086      	sub	sp, #24
 8003c4a:	af00      	add	r7, sp, #0
 8003c4c:	60f8      	str	r0, [r7, #12]
 8003c4e:	60b9      	str	r1, [r7, #8]
 8003c50:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c52:	2300      	movs	r3, #0
 8003c54:	617b      	str	r3, [r7, #20]
 8003c56:	e00a      	b.n	8003c6e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003c58:	f3af 8000 	nop.w
 8003c5c:	4601      	mov	r1, r0
 8003c5e:	68bb      	ldr	r3, [r7, #8]
 8003c60:	1c5a      	adds	r2, r3, #1
 8003c62:	60ba      	str	r2, [r7, #8]
 8003c64:	b2ca      	uxtb	r2, r1
 8003c66:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c68:	697b      	ldr	r3, [r7, #20]
 8003c6a:	3301      	adds	r3, #1
 8003c6c:	617b      	str	r3, [r7, #20]
 8003c6e:	697a      	ldr	r2, [r7, #20]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	429a      	cmp	r2, r3
 8003c74:	dbf0      	blt.n	8003c58 <_read+0x12>
  }

  return len;
 8003c76:	687b      	ldr	r3, [r7, #4]
}
 8003c78:	4618      	mov	r0, r3
 8003c7a:	3718      	adds	r7, #24
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	bd80      	pop	{r7, pc}

08003c80 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b086      	sub	sp, #24
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	60f8      	str	r0, [r7, #12]
 8003c88:	60b9      	str	r1, [r7, #8]
 8003c8a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	617b      	str	r3, [r7, #20]
 8003c90:	e009      	b.n	8003ca6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003c92:	68bb      	ldr	r3, [r7, #8]
 8003c94:	1c5a      	adds	r2, r3, #1
 8003c96:	60ba      	str	r2, [r7, #8]
 8003c98:	781b      	ldrb	r3, [r3, #0]
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ca0:	697b      	ldr	r3, [r7, #20]
 8003ca2:	3301      	adds	r3, #1
 8003ca4:	617b      	str	r3, [r7, #20]
 8003ca6:	697a      	ldr	r2, [r7, #20]
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	429a      	cmp	r2, r3
 8003cac:	dbf1      	blt.n	8003c92 <_write+0x12>
  }
  return len;
 8003cae:	687b      	ldr	r3, [r7, #4]
}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	3718      	adds	r7, #24
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bd80      	pop	{r7, pc}

08003cb8 <_close>:

int _close(int file)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	b083      	sub	sp, #12
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003cc0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	370c      	adds	r7, #12
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cce:	4770      	bx	lr

08003cd0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	b083      	sub	sp, #12
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
 8003cd8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003ce0:	605a      	str	r2, [r3, #4]
  return 0;
 8003ce2:	2300      	movs	r3, #0
}
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	370c      	adds	r7, #12
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cee:	4770      	bx	lr

08003cf0 <_isatty>:

int _isatty(int file)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	b083      	sub	sp, #12
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003cf8:	2301      	movs	r3, #1
}
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	370c      	adds	r7, #12
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d04:	4770      	bx	lr

08003d06 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003d06:	b480      	push	{r7}
 8003d08:	b085      	sub	sp, #20
 8003d0a:	af00      	add	r7, sp, #0
 8003d0c:	60f8      	str	r0, [r7, #12]
 8003d0e:	60b9      	str	r1, [r7, #8]
 8003d10:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003d12:	2300      	movs	r3, #0
}
 8003d14:	4618      	mov	r0, r3
 8003d16:	3714      	adds	r7, #20
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1e:	4770      	bx	lr

08003d20 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b086      	sub	sp, #24
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003d28:	4a14      	ldr	r2, [pc, #80]	@ (8003d7c <_sbrk+0x5c>)
 8003d2a:	4b15      	ldr	r3, [pc, #84]	@ (8003d80 <_sbrk+0x60>)
 8003d2c:	1ad3      	subs	r3, r2, r3
 8003d2e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003d30:	697b      	ldr	r3, [r7, #20]
 8003d32:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003d34:	4b13      	ldr	r3, [pc, #76]	@ (8003d84 <_sbrk+0x64>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d102      	bne.n	8003d42 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003d3c:	4b11      	ldr	r3, [pc, #68]	@ (8003d84 <_sbrk+0x64>)
 8003d3e:	4a12      	ldr	r2, [pc, #72]	@ (8003d88 <_sbrk+0x68>)
 8003d40:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003d42:	4b10      	ldr	r3, [pc, #64]	@ (8003d84 <_sbrk+0x64>)
 8003d44:	681a      	ldr	r2, [r3, #0]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	4413      	add	r3, r2
 8003d4a:	693a      	ldr	r2, [r7, #16]
 8003d4c:	429a      	cmp	r2, r3
 8003d4e:	d207      	bcs.n	8003d60 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003d50:	f017 fba0 	bl	801b494 <__errno>
 8003d54:	4603      	mov	r3, r0
 8003d56:	220c      	movs	r2, #12
 8003d58:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003d5a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003d5e:	e009      	b.n	8003d74 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003d60:	4b08      	ldr	r3, [pc, #32]	@ (8003d84 <_sbrk+0x64>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003d66:	4b07      	ldr	r3, [pc, #28]	@ (8003d84 <_sbrk+0x64>)
 8003d68:	681a      	ldr	r2, [r3, #0]
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	4413      	add	r3, r2
 8003d6e:	4a05      	ldr	r2, [pc, #20]	@ (8003d84 <_sbrk+0x64>)
 8003d70:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003d72:	68fb      	ldr	r3, [r7, #12]
}
 8003d74:	4618      	mov	r0, r3
 8003d76:	3718      	adds	r7, #24
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bd80      	pop	{r7, pc}
 8003d7c:	20020000 	.word	0x20020000
 8003d80:	00000400 	.word	0x00000400
 8003d84:	20004348 	.word	0x20004348
 8003d88:	2000b800 	.word	0x2000b800

08003d8c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003d90:	4b06      	ldr	r3, [pc, #24]	@ (8003dac <SystemInit+0x20>)
 8003d92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d96:	4a05      	ldr	r2, [pc, #20]	@ (8003dac <SystemInit+0x20>)
 8003d98:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003d9c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003da0:	bf00      	nop
 8003da2:	46bd      	mov	sp, r7
 8003da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da8:	4770      	bx	lr
 8003daa:	bf00      	nop
 8003dac:	e000ed00 	.word	0xe000ed00

08003db0 <MX_TIM2_Init>:
TIM_HandleTypeDef htim8;
TIM_HandleTypeDef htim20;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b088      	sub	sp, #32
 8003db4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003db6:	f107 0310 	add.w	r3, r7, #16
 8003dba:	2200      	movs	r2, #0
 8003dbc:	601a      	str	r2, [r3, #0]
 8003dbe:	605a      	str	r2, [r3, #4]
 8003dc0:	609a      	str	r2, [r3, #8]
 8003dc2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003dc4:	1d3b      	adds	r3, r7, #4
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	601a      	str	r2, [r3, #0]
 8003dca:	605a      	str	r2, [r3, #4]
 8003dcc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003dce:	4b1e      	ldr	r3, [pc, #120]	@ (8003e48 <MX_TIM2_Init+0x98>)
 8003dd0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003dd4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 169;
 8003dd6:	4b1c      	ldr	r3, [pc, #112]	@ (8003e48 <MX_TIM2_Init+0x98>)
 8003dd8:	22a9      	movs	r2, #169	@ 0xa9
 8003dda:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003ddc:	4b1a      	ldr	r3, [pc, #104]	@ (8003e48 <MX_TIM2_Init+0x98>)
 8003dde:	2200      	movs	r2, #0
 8003de0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8003de2:	4b19      	ldr	r3, [pc, #100]	@ (8003e48 <MX_TIM2_Init+0x98>)
 8003de4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003de8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003dea:	4b17      	ldr	r3, [pc, #92]	@ (8003e48 <MX_TIM2_Init+0x98>)
 8003dec:	2200      	movs	r2, #0
 8003dee:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003df0:	4b15      	ldr	r3, [pc, #84]	@ (8003e48 <MX_TIM2_Init+0x98>)
 8003df2:	2200      	movs	r2, #0
 8003df4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003df6:	4814      	ldr	r0, [pc, #80]	@ (8003e48 <MX_TIM2_Init+0x98>)
 8003df8:	f002 fd72 	bl	80068e0 <HAL_TIM_Base_Init>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d001      	beq.n	8003e06 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8003e02:	f7fe ffbf 	bl	8002d84 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003e06:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003e0a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003e0c:	f107 0310 	add.w	r3, r7, #16
 8003e10:	4619      	mov	r1, r3
 8003e12:	480d      	ldr	r0, [pc, #52]	@ (8003e48 <MX_TIM2_Init+0x98>)
 8003e14:	f003 fba6 	bl	8007564 <HAL_TIM_ConfigClockSource>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d001      	beq.n	8003e22 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8003e1e:	f7fe ffb1 	bl	8002d84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8003e22:	2320      	movs	r3, #32
 8003e24:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003e26:	2300      	movs	r3, #0
 8003e28:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003e2a:	1d3b      	adds	r3, r7, #4
 8003e2c:	4619      	mov	r1, r3
 8003e2e:	4806      	ldr	r0, [pc, #24]	@ (8003e48 <MX_TIM2_Init+0x98>)
 8003e30:	f004 f976 	bl	8008120 <HAL_TIMEx_MasterConfigSynchronization>
 8003e34:	4603      	mov	r3, r0
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d001      	beq.n	8003e3e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8003e3a:	f7fe ffa3 	bl	8002d84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003e3e:	bf00      	nop
 8003e40:	3720      	adds	r7, #32
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bd80      	pop	{r7, pc}
 8003e46:	bf00      	nop
 8003e48:	2000434c 	.word	0x2000434c

08003e4c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b08c      	sub	sp, #48	@ 0x30
 8003e50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003e52:	f107 030c 	add.w	r3, r7, #12
 8003e56:	2224      	movs	r2, #36	@ 0x24
 8003e58:	2100      	movs	r1, #0
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	f017 fa86 	bl	801b36c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003e60:	463b      	mov	r3, r7
 8003e62:	2200      	movs	r2, #0
 8003e64:	601a      	str	r2, [r3, #0]
 8003e66:	605a      	str	r2, [r3, #4]
 8003e68:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003e6a:	4b21      	ldr	r3, [pc, #132]	@ (8003ef0 <MX_TIM3_Init+0xa4>)
 8003e6c:	4a21      	ldr	r2, [pc, #132]	@ (8003ef4 <MX_TIM3_Init+0xa8>)
 8003e6e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8003e70:	4b1f      	ldr	r3, [pc, #124]	@ (8003ef0 <MX_TIM3_Init+0xa4>)
 8003e72:	2200      	movs	r2, #0
 8003e74:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003e76:	4b1e      	ldr	r3, [pc, #120]	@ (8003ef0 <MX_TIM3_Init+0xa4>)
 8003e78:	2200      	movs	r2, #0
 8003e7a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8003e7c:	4b1c      	ldr	r3, [pc, #112]	@ (8003ef0 <MX_TIM3_Init+0xa4>)
 8003e7e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003e82:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003e84:	4b1a      	ldr	r3, [pc, #104]	@ (8003ef0 <MX_TIM3_Init+0xa4>)
 8003e86:	2200      	movs	r2, #0
 8003e88:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003e8a:	4b19      	ldr	r3, [pc, #100]	@ (8003ef0 <MX_TIM3_Init+0xa4>)
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003e90:	2303      	movs	r3, #3
 8003e92:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003e94:	2300      	movs	r3, #0
 8003e96:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003eac:	2300      	movs	r3, #0
 8003eae:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8003eb4:	f107 030c 	add.w	r3, r7, #12
 8003eb8:	4619      	mov	r1, r3
 8003eba:	480d      	ldr	r0, [pc, #52]	@ (8003ef0 <MX_TIM3_Init+0xa4>)
 8003ebc:	f002 ffba 	bl	8006e34 <HAL_TIM_Encoder_Init>
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d001      	beq.n	8003eca <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8003ec6:	f7fe ff5d 	bl	8002d84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003eca:	2300      	movs	r3, #0
 8003ecc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003ece:	2300      	movs	r3, #0
 8003ed0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003ed2:	463b      	mov	r3, r7
 8003ed4:	4619      	mov	r1, r3
 8003ed6:	4806      	ldr	r0, [pc, #24]	@ (8003ef0 <MX_TIM3_Init+0xa4>)
 8003ed8:	f004 f922 	bl	8008120 <HAL_TIMEx_MasterConfigSynchronization>
 8003edc:	4603      	mov	r3, r0
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d001      	beq.n	8003ee6 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8003ee2:	f7fe ff4f 	bl	8002d84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003ee6:	bf00      	nop
 8003ee8:	3730      	adds	r7, #48	@ 0x30
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bd80      	pop	{r7, pc}
 8003eee:	bf00      	nop
 8003ef0:	20004398 	.word	0x20004398
 8003ef4:	40000400 	.word	0x40000400

08003ef8 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b08c      	sub	sp, #48	@ 0x30
 8003efc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003efe:	f107 030c 	add.w	r3, r7, #12
 8003f02:	2224      	movs	r2, #36	@ 0x24
 8003f04:	2100      	movs	r1, #0
 8003f06:	4618      	mov	r0, r3
 8003f08:	f017 fa30 	bl	801b36c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003f0c:	463b      	mov	r3, r7
 8003f0e:	2200      	movs	r2, #0
 8003f10:	601a      	str	r2, [r3, #0]
 8003f12:	605a      	str	r2, [r3, #4]
 8003f14:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003f16:	4b21      	ldr	r3, [pc, #132]	@ (8003f9c <MX_TIM4_Init+0xa4>)
 8003f18:	4a21      	ldr	r2, [pc, #132]	@ (8003fa0 <MX_TIM4_Init+0xa8>)
 8003f1a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8003f1c:	4b1f      	ldr	r3, [pc, #124]	@ (8003f9c <MX_TIM4_Init+0xa4>)
 8003f1e:	2200      	movs	r2, #0
 8003f20:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003f22:	4b1e      	ldr	r3, [pc, #120]	@ (8003f9c <MX_TIM4_Init+0xa4>)
 8003f24:	2200      	movs	r2, #0
 8003f26:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8003f28:	4b1c      	ldr	r3, [pc, #112]	@ (8003f9c <MX_TIM4_Init+0xa4>)
 8003f2a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003f2e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003f30:	4b1a      	ldr	r3, [pc, #104]	@ (8003f9c <MX_TIM4_Init+0xa4>)
 8003f32:	2200      	movs	r2, #0
 8003f34:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003f36:	4b19      	ldr	r3, [pc, #100]	@ (8003f9c <MX_TIM4_Init+0xa4>)
 8003f38:	2200      	movs	r2, #0
 8003f3a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003f3c:	2303      	movs	r3, #3
 8003f3e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003f40:	2300      	movs	r3, #0
 8003f42:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003f44:	2301      	movs	r3, #1
 8003f46:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003f48:	2300      	movs	r3, #0
 8003f4a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003f50:	2300      	movs	r3, #0
 8003f52:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003f54:	2301      	movs	r3, #1
 8003f56:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003f58:	2300      	movs	r3, #0
 8003f5a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8003f60:	f107 030c 	add.w	r3, r7, #12
 8003f64:	4619      	mov	r1, r3
 8003f66:	480d      	ldr	r0, [pc, #52]	@ (8003f9c <MX_TIM4_Init+0xa4>)
 8003f68:	f002 ff64 	bl	8006e34 <HAL_TIM_Encoder_Init>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d001      	beq.n	8003f76 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8003f72:	f7fe ff07 	bl	8002d84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003f76:	2300      	movs	r3, #0
 8003f78:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003f7e:	463b      	mov	r3, r7
 8003f80:	4619      	mov	r1, r3
 8003f82:	4806      	ldr	r0, [pc, #24]	@ (8003f9c <MX_TIM4_Init+0xa4>)
 8003f84:	f004 f8cc 	bl	8008120 <HAL_TIMEx_MasterConfigSynchronization>
 8003f88:	4603      	mov	r3, r0
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d001      	beq.n	8003f92 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8003f8e:	f7fe fef9 	bl	8002d84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8003f92:	bf00      	nop
 8003f94:	3730      	adds	r7, #48	@ 0x30
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bd80      	pop	{r7, pc}
 8003f9a:	bf00      	nop
 8003f9c:	200043e4 	.word	0x200043e4
 8003fa0:	40000800 	.word	0x40000800

08003fa4 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b08c      	sub	sp, #48	@ 0x30
 8003fa8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003faa:	f107 030c 	add.w	r3, r7, #12
 8003fae:	2224      	movs	r2, #36	@ 0x24
 8003fb0:	2100      	movs	r1, #0
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	f017 f9da 	bl	801b36c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003fb8:	463b      	mov	r3, r7
 8003fba:	2200      	movs	r2, #0
 8003fbc:	601a      	str	r2, [r3, #0]
 8003fbe:	605a      	str	r2, [r3, #4]
 8003fc0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8003fc2:	4b21      	ldr	r3, [pc, #132]	@ (8004048 <MX_TIM5_Init+0xa4>)
 8003fc4:	4a21      	ldr	r2, [pc, #132]	@ (800404c <MX_TIM5_Init+0xa8>)
 8003fc6:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8003fc8:	4b1f      	ldr	r3, [pc, #124]	@ (8004048 <MX_TIM5_Init+0xa4>)
 8003fca:	2200      	movs	r2, #0
 8003fcc:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003fce:	4b1e      	ldr	r3, [pc, #120]	@ (8004048 <MX_TIM5_Init+0xa4>)
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8003fd4:	4b1c      	ldr	r3, [pc, #112]	@ (8004048 <MX_TIM5_Init+0xa4>)
 8003fd6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003fda:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003fdc:	4b1a      	ldr	r3, [pc, #104]	@ (8004048 <MX_TIM5_Init+0xa4>)
 8003fde:	2200      	movs	r2, #0
 8003fe0:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003fe2:	4b19      	ldr	r3, [pc, #100]	@ (8004048 <MX_TIM5_Init+0xa4>)
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003fe8:	2303      	movs	r3, #3
 8003fea:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003fec:	2300      	movs	r3, #0
 8003fee:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8004000:	2301      	movs	r3, #1
 8004002:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8004004:	2300      	movs	r3, #0
 8004006:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8004008:	2300      	movs	r3, #0
 800400a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 800400c:	f107 030c 	add.w	r3, r7, #12
 8004010:	4619      	mov	r1, r3
 8004012:	480d      	ldr	r0, [pc, #52]	@ (8004048 <MX_TIM5_Init+0xa4>)
 8004014:	f002 ff0e 	bl	8006e34 <HAL_TIM_Encoder_Init>
 8004018:	4603      	mov	r3, r0
 800401a:	2b00      	cmp	r3, #0
 800401c:	d001      	beq.n	8004022 <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 800401e:	f7fe feb1 	bl	8002d84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004022:	2300      	movs	r3, #0
 8004024:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004026:	2300      	movs	r3, #0
 8004028:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800402a:	463b      	mov	r3, r7
 800402c:	4619      	mov	r1, r3
 800402e:	4806      	ldr	r0, [pc, #24]	@ (8004048 <MX_TIM5_Init+0xa4>)
 8004030:	f004 f876 	bl	8008120 <HAL_TIMEx_MasterConfigSynchronization>
 8004034:	4603      	mov	r3, r0
 8004036:	2b00      	cmp	r3, #0
 8004038:	d001      	beq.n	800403e <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 800403a:	f7fe fea3 	bl	8002d84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800403e:	bf00      	nop
 8004040:	3730      	adds	r7, #48	@ 0x30
 8004042:	46bd      	mov	sp, r7
 8004044:	bd80      	pop	{r7, pc}
 8004046:	bf00      	nop
 8004048:	20004430 	.word	0x20004430
 800404c:	40000c00 	.word	0x40000c00

08004050 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b098      	sub	sp, #96	@ 0x60
 8004054:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004056:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800405a:	2200      	movs	r2, #0
 800405c:	601a      	str	r2, [r3, #0]
 800405e:	605a      	str	r2, [r3, #4]
 8004060:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004062:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8004066:	2200      	movs	r2, #0
 8004068:	601a      	str	r2, [r3, #0]
 800406a:	605a      	str	r2, [r3, #4]
 800406c:	609a      	str	r2, [r3, #8]
 800406e:	60da      	str	r2, [r3, #12]
 8004070:	611a      	str	r2, [r3, #16]
 8004072:	615a      	str	r2, [r3, #20]
 8004074:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004076:	1d3b      	adds	r3, r7, #4
 8004078:	2234      	movs	r2, #52	@ 0x34
 800407a:	2100      	movs	r1, #0
 800407c:	4618      	mov	r0, r3
 800407e:	f017 f975 	bl	801b36c <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8004082:	4b4d      	ldr	r3, [pc, #308]	@ (80041b8 <MX_TIM8_Init+0x168>)
 8004084:	4a4d      	ldr	r2, [pc, #308]	@ (80041bc <MX_TIM8_Init+0x16c>)
 8004086:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8004088:	4b4b      	ldr	r3, [pc, #300]	@ (80041b8 <MX_TIM8_Init+0x168>)
 800408a:	2200      	movs	r2, #0
 800408c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800408e:	4b4a      	ldr	r3, [pc, #296]	@ (80041b8 <MX_TIM8_Init+0x168>)
 8004090:	2200      	movs	r2, #0
 8004092:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8004094:	4b48      	ldr	r3, [pc, #288]	@ (80041b8 <MX_TIM8_Init+0x168>)
 8004096:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800409a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800409c:	4b46      	ldr	r3, [pc, #280]	@ (80041b8 <MX_TIM8_Init+0x168>)
 800409e:	2200      	movs	r2, #0
 80040a0:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80040a2:	4b45      	ldr	r3, [pc, #276]	@ (80041b8 <MX_TIM8_Init+0x168>)
 80040a4:	2200      	movs	r2, #0
 80040a6:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80040a8:	4b43      	ldr	r3, [pc, #268]	@ (80041b8 <MX_TIM8_Init+0x168>)
 80040aa:	2200      	movs	r2, #0
 80040ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80040ae:	4842      	ldr	r0, [pc, #264]	@ (80041b8 <MX_TIM8_Init+0x168>)
 80040b0:	f002 fd56 	bl	8006b60 <HAL_TIM_PWM_Init>
 80040b4:	4603      	mov	r3, r0
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d001      	beq.n	80040be <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 80040ba:	f7fe fe63 	bl	8002d84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80040be:	2300      	movs	r3, #0
 80040c0:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80040c2:	2300      	movs	r3, #0
 80040c4:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80040c6:	2300      	movs	r3, #0
 80040c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80040ca:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80040ce:	4619      	mov	r1, r3
 80040d0:	4839      	ldr	r0, [pc, #228]	@ (80041b8 <MX_TIM8_Init+0x168>)
 80040d2:	f004 f825 	bl	8008120 <HAL_TIMEx_MasterConfigSynchronization>
 80040d6:	4603      	mov	r3, r0
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d001      	beq.n	80040e0 <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 80040dc:	f7fe fe52 	bl	8002d84 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80040e0:	2360      	movs	r3, #96	@ 0x60
 80040e2:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 80040e4:	2300      	movs	r3, #0
 80040e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80040e8:	2300      	movs	r3, #0
 80040ea:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80040ec:	2300      	movs	r3, #0
 80040ee:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80040f0:	2300      	movs	r3, #0
 80040f2:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80040f4:	2300      	movs	r3, #0
 80040f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80040f8:	2300      	movs	r3, #0
 80040fa:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80040fc:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8004100:	2200      	movs	r2, #0
 8004102:	4619      	mov	r1, r3
 8004104:	482c      	ldr	r0, [pc, #176]	@ (80041b8 <MX_TIM8_Init+0x168>)
 8004106:	f003 f919 	bl	800733c <HAL_TIM_PWM_ConfigChannel>
 800410a:	4603      	mov	r3, r0
 800410c:	2b00      	cmp	r3, #0
 800410e:	d001      	beq.n	8004114 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8004110:	f7fe fe38 	bl	8002d84 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004114:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8004118:	2204      	movs	r2, #4
 800411a:	4619      	mov	r1, r3
 800411c:	4826      	ldr	r0, [pc, #152]	@ (80041b8 <MX_TIM8_Init+0x168>)
 800411e:	f003 f90d 	bl	800733c <HAL_TIM_PWM_ConfigChannel>
 8004122:	4603      	mov	r3, r0
 8004124:	2b00      	cmp	r3, #0
 8004126:	d001      	beq.n	800412c <MX_TIM8_Init+0xdc>
  {
    Error_Handler();
 8004128:	f7fe fe2c 	bl	8002d84 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800412c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8004130:	2208      	movs	r2, #8
 8004132:	4619      	mov	r1, r3
 8004134:	4820      	ldr	r0, [pc, #128]	@ (80041b8 <MX_TIM8_Init+0x168>)
 8004136:	f003 f901 	bl	800733c <HAL_TIM_PWM_ConfigChannel>
 800413a:	4603      	mov	r3, r0
 800413c:	2b00      	cmp	r3, #0
 800413e:	d001      	beq.n	8004144 <MX_TIM8_Init+0xf4>
  {
    Error_Handler();
 8004140:	f7fe fe20 	bl	8002d84 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004144:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8004148:	220c      	movs	r2, #12
 800414a:	4619      	mov	r1, r3
 800414c:	481a      	ldr	r0, [pc, #104]	@ (80041b8 <MX_TIM8_Init+0x168>)
 800414e:	f003 f8f5 	bl	800733c <HAL_TIM_PWM_ConfigChannel>
 8004152:	4603      	mov	r3, r0
 8004154:	2b00      	cmp	r3, #0
 8004156:	d001      	beq.n	800415c <MX_TIM8_Init+0x10c>
  {
    Error_Handler();
 8004158:	f7fe fe14 	bl	8002d84 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800415c:	2300      	movs	r3, #0
 800415e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004160:	2300      	movs	r3, #0
 8004162:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004164:	2300      	movs	r3, #0
 8004166:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004168:	2300      	movs	r3, #0
 800416a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800416c:	2300      	movs	r3, #0
 800416e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004170:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004174:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8004176:	2300      	movs	r3, #0
 8004178:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800417a:	2300      	movs	r3, #0
 800417c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800417e:	2300      	movs	r3, #0
 8004180:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8004182:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004186:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8004188:	2300      	movs	r3, #0
 800418a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800418c:	2300      	movs	r3, #0
 800418e:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004190:	2300      	movs	r3, #0
 8004192:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8004194:	1d3b      	adds	r3, r7, #4
 8004196:	4619      	mov	r1, r3
 8004198:	4807      	ldr	r0, [pc, #28]	@ (80041b8 <MX_TIM8_Init+0x168>)
 800419a:	f004 f857 	bl	800824c <HAL_TIMEx_ConfigBreakDeadTime>
 800419e:	4603      	mov	r3, r0
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d001      	beq.n	80041a8 <MX_TIM8_Init+0x158>
  {
    Error_Handler();
 80041a4:	f7fe fdee 	bl	8002d84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80041a8:	4803      	ldr	r0, [pc, #12]	@ (80041b8 <MX_TIM8_Init+0x168>)
 80041aa:	f000 f99d 	bl	80044e8 <HAL_TIM_MspPostInit>

}
 80041ae:	bf00      	nop
 80041b0:	3760      	adds	r7, #96	@ 0x60
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bd80      	pop	{r7, pc}
 80041b6:	bf00      	nop
 80041b8:	2000447c 	.word	0x2000447c
 80041bc:	40013400 	.word	0x40013400

080041c0 <MX_TIM20_Init>:
/* TIM20 init function */
void MX_TIM20_Init(void)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b08c      	sub	sp, #48	@ 0x30
 80041c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM20_Init 0 */

  /* USER CODE END TIM20_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80041c6:	f107 030c 	add.w	r3, r7, #12
 80041ca:	2224      	movs	r2, #36	@ 0x24
 80041cc:	2100      	movs	r1, #0
 80041ce:	4618      	mov	r0, r3
 80041d0:	f017 f8cc 	bl	801b36c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80041d4:	463b      	mov	r3, r7
 80041d6:	2200      	movs	r2, #0
 80041d8:	601a      	str	r2, [r3, #0]
 80041da:	605a      	str	r2, [r3, #4]
 80041dc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM20_Init 1 */

  /* USER CODE END TIM20_Init 1 */
  htim20.Instance = TIM20;
 80041de:	4b23      	ldr	r3, [pc, #140]	@ (800426c <MX_TIM20_Init+0xac>)
 80041e0:	4a23      	ldr	r2, [pc, #140]	@ (8004270 <MX_TIM20_Init+0xb0>)
 80041e2:	601a      	str	r2, [r3, #0]
  htim20.Init.Prescaler = 0;
 80041e4:	4b21      	ldr	r3, [pc, #132]	@ (800426c <MX_TIM20_Init+0xac>)
 80041e6:	2200      	movs	r2, #0
 80041e8:	605a      	str	r2, [r3, #4]
  htim20.Init.CounterMode = TIM_COUNTERMODE_UP;
 80041ea:	4b20      	ldr	r3, [pc, #128]	@ (800426c <MX_TIM20_Init+0xac>)
 80041ec:	2200      	movs	r2, #0
 80041ee:	609a      	str	r2, [r3, #8]
  htim20.Init.Period = 65535;
 80041f0:	4b1e      	ldr	r3, [pc, #120]	@ (800426c <MX_TIM20_Init+0xac>)
 80041f2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80041f6:	60da      	str	r2, [r3, #12]
  htim20.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80041f8:	4b1c      	ldr	r3, [pc, #112]	@ (800426c <MX_TIM20_Init+0xac>)
 80041fa:	2200      	movs	r2, #0
 80041fc:	611a      	str	r2, [r3, #16]
  htim20.Init.RepetitionCounter = 0;
 80041fe:	4b1b      	ldr	r3, [pc, #108]	@ (800426c <MX_TIM20_Init+0xac>)
 8004200:	2200      	movs	r2, #0
 8004202:	615a      	str	r2, [r3, #20]
  htim20.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004204:	4b19      	ldr	r3, [pc, #100]	@ (800426c <MX_TIM20_Init+0xac>)
 8004206:	2200      	movs	r2, #0
 8004208:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800420a:	2303      	movs	r3, #3
 800420c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800420e:	2300      	movs	r3, #0
 8004210:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8004212:	2301      	movs	r3, #1
 8004214:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8004216:	2300      	movs	r3, #0
 8004218:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800421a:	2300      	movs	r3, #0
 800421c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800421e:	2300      	movs	r3, #0
 8004220:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8004222:	2301      	movs	r3, #1
 8004224:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8004226:	2300      	movs	r3, #0
 8004228:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800422a:	2300      	movs	r3, #0
 800422c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim20, &sConfig) != HAL_OK)
 800422e:	f107 030c 	add.w	r3, r7, #12
 8004232:	4619      	mov	r1, r3
 8004234:	480d      	ldr	r0, [pc, #52]	@ (800426c <MX_TIM20_Init+0xac>)
 8004236:	f002 fdfd 	bl	8006e34 <HAL_TIM_Encoder_Init>
 800423a:	4603      	mov	r3, r0
 800423c:	2b00      	cmp	r3, #0
 800423e:	d001      	beq.n	8004244 <MX_TIM20_Init+0x84>
  {
    Error_Handler();
 8004240:	f7fe fda0 	bl	8002d84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004244:	2300      	movs	r3, #0
 8004246:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8004248:	2300      	movs	r3, #0
 800424a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800424c:	2300      	movs	r3, #0
 800424e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim20, &sMasterConfig) != HAL_OK)
 8004250:	463b      	mov	r3, r7
 8004252:	4619      	mov	r1, r3
 8004254:	4805      	ldr	r0, [pc, #20]	@ (800426c <MX_TIM20_Init+0xac>)
 8004256:	f003 ff63 	bl	8008120 <HAL_TIMEx_MasterConfigSynchronization>
 800425a:	4603      	mov	r3, r0
 800425c:	2b00      	cmp	r3, #0
 800425e:	d001      	beq.n	8004264 <MX_TIM20_Init+0xa4>
  {
    Error_Handler();
 8004260:	f7fe fd90 	bl	8002d84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM20_Init 2 */

  /* USER CODE END TIM20_Init 2 */

}
 8004264:	bf00      	nop
 8004266:	3730      	adds	r7, #48	@ 0x30
 8004268:	46bd      	mov	sp, r7
 800426a:	bd80      	pop	{r7, pc}
 800426c:	200044c8 	.word	0x200044c8
 8004270:	40015000 	.word	0x40015000

08004274 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b084      	sub	sp, #16
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004284:	d113      	bne.n	80042ae <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004286:	4b0c      	ldr	r3, [pc, #48]	@ (80042b8 <HAL_TIM_Base_MspInit+0x44>)
 8004288:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800428a:	4a0b      	ldr	r2, [pc, #44]	@ (80042b8 <HAL_TIM_Base_MspInit+0x44>)
 800428c:	f043 0301 	orr.w	r3, r3, #1
 8004290:	6593      	str	r3, [r2, #88]	@ 0x58
 8004292:	4b09      	ldr	r3, [pc, #36]	@ (80042b8 <HAL_TIM_Base_MspInit+0x44>)
 8004294:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004296:	f003 0301 	and.w	r3, r3, #1
 800429a:	60fb      	str	r3, [r7, #12]
 800429c:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 800429e:	2200      	movs	r2, #0
 80042a0:	2105      	movs	r1, #5
 80042a2:	201c      	movs	r0, #28
 80042a4:	f000 fd2e 	bl	8004d04 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80042a8:	201c      	movs	r0, #28
 80042aa:	f000 fd45 	bl	8004d38 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80042ae:	bf00      	nop
 80042b0:	3710      	adds	r7, #16
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bd80      	pop	{r7, pc}
 80042b6:	bf00      	nop
 80042b8:	40021000 	.word	0x40021000

080042bc <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b090      	sub	sp, #64	@ 0x40
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042c4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80042c8:	2200      	movs	r2, #0
 80042ca:	601a      	str	r2, [r3, #0]
 80042cc:	605a      	str	r2, [r3, #4]
 80042ce:	609a      	str	r2, [r3, #8]
 80042d0:	60da      	str	r2, [r3, #12]
 80042d2:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a6c      	ldr	r2, [pc, #432]	@ (800448c <HAL_TIM_Encoder_MspInit+0x1d0>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d129      	bne.n	8004332 <HAL_TIM_Encoder_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80042de:	4b6c      	ldr	r3, [pc, #432]	@ (8004490 <HAL_TIM_Encoder_MspInit+0x1d4>)
 80042e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042e2:	4a6b      	ldr	r2, [pc, #428]	@ (8004490 <HAL_TIM_Encoder_MspInit+0x1d4>)
 80042e4:	f043 0302 	orr.w	r3, r3, #2
 80042e8:	6593      	str	r3, [r2, #88]	@ 0x58
 80042ea:	4b69      	ldr	r3, [pc, #420]	@ (8004490 <HAL_TIM_Encoder_MspInit+0x1d4>)
 80042ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042ee:	f003 0302 	and.w	r3, r3, #2
 80042f2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80042f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80042f6:	4b66      	ldr	r3, [pc, #408]	@ (8004490 <HAL_TIM_Encoder_MspInit+0x1d4>)
 80042f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042fa:	4a65      	ldr	r2, [pc, #404]	@ (8004490 <HAL_TIM_Encoder_MspInit+0x1d4>)
 80042fc:	f043 0301 	orr.w	r3, r3, #1
 8004300:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004302:	4b63      	ldr	r3, [pc, #396]	@ (8004490 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8004304:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004306:	f003 0301 	and.w	r3, r3, #1
 800430a:	627b      	str	r3, [r7, #36]	@ 0x24
 800430c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**TIM3 GPIO Configuration
    PA4     ------> TIM3_CH2
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 800430e:	2350      	movs	r3, #80	@ 0x50
 8004310:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004312:	2302      	movs	r3, #2
 8004314:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004316:	2300      	movs	r3, #0
 8004318:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800431a:	2300      	movs	r3, #0
 800431c:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800431e:	2302      	movs	r3, #2
 8004320:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004322:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004326:	4619      	mov	r1, r3
 8004328:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800432c:	f001 f850 	bl	80053d0 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM20_MspInit 1 */

  /* USER CODE END TIM20_MspInit 1 */
  }
}
 8004330:	e0a7      	b.n	8004482 <HAL_TIM_Encoder_MspInit+0x1c6>
  else if(tim_encoderHandle->Instance==TIM4)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4a57      	ldr	r2, [pc, #348]	@ (8004494 <HAL_TIM_Encoder_MspInit+0x1d8>)
 8004338:	4293      	cmp	r3, r2
 800433a:	d12a      	bne.n	8004392 <HAL_TIM_Encoder_MspInit+0xd6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800433c:	4b54      	ldr	r3, [pc, #336]	@ (8004490 <HAL_TIM_Encoder_MspInit+0x1d4>)
 800433e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004340:	4a53      	ldr	r2, [pc, #332]	@ (8004490 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8004342:	f043 0304 	orr.w	r3, r3, #4
 8004346:	6593      	str	r3, [r2, #88]	@ 0x58
 8004348:	4b51      	ldr	r3, [pc, #324]	@ (8004490 <HAL_TIM_Encoder_MspInit+0x1d4>)
 800434a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800434c:	f003 0304 	and.w	r3, r3, #4
 8004350:	623b      	str	r3, [r7, #32]
 8004352:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004354:	4b4e      	ldr	r3, [pc, #312]	@ (8004490 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8004356:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004358:	4a4d      	ldr	r2, [pc, #308]	@ (8004490 <HAL_TIM_Encoder_MspInit+0x1d4>)
 800435a:	f043 0301 	orr.w	r3, r3, #1
 800435e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004360:	4b4b      	ldr	r3, [pc, #300]	@ (8004490 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8004362:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004364:	f003 0301 	and.w	r3, r3, #1
 8004368:	61fb      	str	r3, [r7, #28]
 800436a:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800436c:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8004370:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004372:	2302      	movs	r3, #2
 8004374:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004376:	2300      	movs	r3, #0
 8004378:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800437a:	2300      	movs	r3, #0
 800437c:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 800437e:	230a      	movs	r3, #10
 8004380:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004382:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004386:	4619      	mov	r1, r3
 8004388:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800438c:	f001 f820 	bl	80053d0 <HAL_GPIO_Init>
}
 8004390:	e077      	b.n	8004482 <HAL_TIM_Encoder_MspInit+0x1c6>
  else if(tim_encoderHandle->Instance==TIM5)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a40      	ldr	r2, [pc, #256]	@ (8004498 <HAL_TIM_Encoder_MspInit+0x1dc>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d129      	bne.n	80043f0 <HAL_TIM_Encoder_MspInit+0x134>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800439c:	4b3c      	ldr	r3, [pc, #240]	@ (8004490 <HAL_TIM_Encoder_MspInit+0x1d4>)
 800439e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043a0:	4a3b      	ldr	r2, [pc, #236]	@ (8004490 <HAL_TIM_Encoder_MspInit+0x1d4>)
 80043a2:	f043 0308 	orr.w	r3, r3, #8
 80043a6:	6593      	str	r3, [r2, #88]	@ 0x58
 80043a8:	4b39      	ldr	r3, [pc, #228]	@ (8004490 <HAL_TIM_Encoder_MspInit+0x1d4>)
 80043aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043ac:	f003 0308 	and.w	r3, r3, #8
 80043b0:	61bb      	str	r3, [r7, #24]
 80043b2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80043b4:	4b36      	ldr	r3, [pc, #216]	@ (8004490 <HAL_TIM_Encoder_MspInit+0x1d4>)
 80043b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80043b8:	4a35      	ldr	r2, [pc, #212]	@ (8004490 <HAL_TIM_Encoder_MspInit+0x1d4>)
 80043ba:	f043 0301 	orr.w	r3, r3, #1
 80043be:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80043c0:	4b33      	ldr	r3, [pc, #204]	@ (8004490 <HAL_TIM_Encoder_MspInit+0x1d4>)
 80043c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80043c4:	f003 0301 	and.w	r3, r3, #1
 80043c8:	617b      	str	r3, [r7, #20]
 80043ca:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80043cc:	2303      	movs	r3, #3
 80043ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043d0:	2302      	movs	r3, #2
 80043d2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043d4:	2300      	movs	r3, #0
 80043d6:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043d8:	2300      	movs	r3, #0
 80043da:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80043dc:	2302      	movs	r3, #2
 80043de:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80043e0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80043e4:	4619      	mov	r1, r3
 80043e6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80043ea:	f000 fff1 	bl	80053d0 <HAL_GPIO_Init>
}
 80043ee:	e048      	b.n	8004482 <HAL_TIM_Encoder_MspInit+0x1c6>
  else if(tim_encoderHandle->Instance==TIM20)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a29      	ldr	r2, [pc, #164]	@ (800449c <HAL_TIM_Encoder_MspInit+0x1e0>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d143      	bne.n	8004482 <HAL_TIM_Encoder_MspInit+0x1c6>
    __HAL_RCC_TIM20_CLK_ENABLE();
 80043fa:	4b25      	ldr	r3, [pc, #148]	@ (8004490 <HAL_TIM_Encoder_MspInit+0x1d4>)
 80043fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80043fe:	4a24      	ldr	r2, [pc, #144]	@ (8004490 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8004400:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004404:	6613      	str	r3, [r2, #96]	@ 0x60
 8004406:	4b22      	ldr	r3, [pc, #136]	@ (8004490 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8004408:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800440a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800440e:	613b      	str	r3, [r7, #16]
 8004410:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004412:	4b1f      	ldr	r3, [pc, #124]	@ (8004490 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8004414:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004416:	4a1e      	ldr	r2, [pc, #120]	@ (8004490 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8004418:	f043 0304 	orr.w	r3, r3, #4
 800441c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800441e:	4b1c      	ldr	r3, [pc, #112]	@ (8004490 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8004420:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004422:	f003 0304 	and.w	r3, r3, #4
 8004426:	60fb      	str	r3, [r7, #12]
 8004428:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800442a:	4b19      	ldr	r3, [pc, #100]	@ (8004490 <HAL_TIM_Encoder_MspInit+0x1d4>)
 800442c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800442e:	4a18      	ldr	r2, [pc, #96]	@ (8004490 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8004430:	f043 0302 	orr.w	r3, r3, #2
 8004434:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004436:	4b16      	ldr	r3, [pc, #88]	@ (8004490 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8004438:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800443a:	f003 0302 	and.w	r3, r3, #2
 800443e:	60bb      	str	r3, [r7, #8]
 8004440:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004442:	2304      	movs	r3, #4
 8004444:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004446:	2302      	movs	r3, #2
 8004448:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800444a:	2300      	movs	r3, #0
 800444c:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800444e:	2300      	movs	r3, #0
 8004450:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM20;
 8004452:	2306      	movs	r3, #6
 8004454:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004456:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800445a:	4619      	mov	r1, r3
 800445c:	4810      	ldr	r0, [pc, #64]	@ (80044a0 <HAL_TIM_Encoder_MspInit+0x1e4>)
 800445e:	f000 ffb7 	bl	80053d0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004462:	2304      	movs	r3, #4
 8004464:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004466:	2302      	movs	r3, #2
 8004468:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800446a:	2300      	movs	r3, #0
 800446c:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800446e:	2300      	movs	r3, #0
 8004470:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM20;
 8004472:	2303      	movs	r3, #3
 8004474:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004476:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800447a:	4619      	mov	r1, r3
 800447c:	4809      	ldr	r0, [pc, #36]	@ (80044a4 <HAL_TIM_Encoder_MspInit+0x1e8>)
 800447e:	f000 ffa7 	bl	80053d0 <HAL_GPIO_Init>
}
 8004482:	bf00      	nop
 8004484:	3740      	adds	r7, #64	@ 0x40
 8004486:	46bd      	mov	sp, r7
 8004488:	bd80      	pop	{r7, pc}
 800448a:	bf00      	nop
 800448c:	40000400 	.word	0x40000400
 8004490:	40021000 	.word	0x40021000
 8004494:	40000800 	.word	0x40000800
 8004498:	40000c00 	.word	0x40000c00
 800449c:	40015000 	.word	0x40015000
 80044a0:	48000800 	.word	0x48000800
 80044a4:	48000400 	.word	0x48000400

080044a8 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80044a8:	b480      	push	{r7}
 80044aa:	b085      	sub	sp, #20
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM8)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a0a      	ldr	r2, [pc, #40]	@ (80044e0 <HAL_TIM_PWM_MspInit+0x38>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d10b      	bne.n	80044d2 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* TIM8 clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 80044ba:	4b0a      	ldr	r3, [pc, #40]	@ (80044e4 <HAL_TIM_PWM_MspInit+0x3c>)
 80044bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044be:	4a09      	ldr	r2, [pc, #36]	@ (80044e4 <HAL_TIM_PWM_MspInit+0x3c>)
 80044c0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80044c4:	6613      	str	r3, [r2, #96]	@ 0x60
 80044c6:	4b07      	ldr	r3, [pc, #28]	@ (80044e4 <HAL_TIM_PWM_MspInit+0x3c>)
 80044c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044ca:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80044ce:	60fb      	str	r3, [r7, #12]
 80044d0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 80044d2:	bf00      	nop
 80044d4:	3714      	adds	r7, #20
 80044d6:	46bd      	mov	sp, r7
 80044d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044dc:	4770      	bx	lr
 80044de:	bf00      	nop
 80044e0:	40013400 	.word	0x40013400
 80044e4:	40021000 	.word	0x40021000

080044e8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b088      	sub	sp, #32
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80044f0:	f107 030c 	add.w	r3, r7, #12
 80044f4:	2200      	movs	r2, #0
 80044f6:	601a      	str	r2, [r3, #0]
 80044f8:	605a      	str	r2, [r3, #4]
 80044fa:	609a      	str	r2, [r3, #8]
 80044fc:	60da      	str	r2, [r3, #12]
 80044fe:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM8)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4a11      	ldr	r2, [pc, #68]	@ (800454c <HAL_TIM_MspPostInit+0x64>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d11c      	bne.n	8004544 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800450a:	4b11      	ldr	r3, [pc, #68]	@ (8004550 <HAL_TIM_MspPostInit+0x68>)
 800450c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800450e:	4a10      	ldr	r2, [pc, #64]	@ (8004550 <HAL_TIM_MspPostInit+0x68>)
 8004510:	f043 0304 	orr.w	r3, r3, #4
 8004514:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004516:	4b0e      	ldr	r3, [pc, #56]	@ (8004550 <HAL_TIM_MspPostInit+0x68>)
 8004518:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800451a:	f003 0304 	and.w	r3, r3, #4
 800451e:	60bb      	str	r3, [r7, #8]
 8004520:	68bb      	ldr	r3, [r7, #8]
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    PC8     ------> TIM8_CH3
    PC9     ------> TIM8_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8004522:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8004526:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004528:	2302      	movs	r3, #2
 800452a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800452c:	2300      	movs	r3, #0
 800452e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004530:	2300      	movs	r3, #0
 8004532:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8004534:	2304      	movs	r3, #4
 8004536:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004538:	f107 030c 	add.w	r3, r7, #12
 800453c:	4619      	mov	r1, r3
 800453e:	4805      	ldr	r0, [pc, #20]	@ (8004554 <HAL_TIM_MspPostInit+0x6c>)
 8004540:	f000 ff46 	bl	80053d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8004544:	bf00      	nop
 8004546:	3720      	adds	r7, #32
 8004548:	46bd      	mov	sp, r7
 800454a:	bd80      	pop	{r7, pc}
 800454c:	40013400 	.word	0x40013400
 8004550:	40021000 	.word	0x40021000
 8004554:	48000800 	.word	0x48000800

08004558 <transporter_begin>:
FIR lowPassFilter3;
FIR lowPassFilter4;

SKID_KINEMATIC robot_kinematics;

void transporter_begin() {
 8004558:	b580      	push	{r7, lr}
 800455a:	b082      	sub	sp, #8
 800455c:	af02      	add	r7, sp, #8
	SKID_init(&robot_kinematics, WHEEL_RADIUS, WHEEL_DISTANCE, MAX_LINEAR_VEL, MAX_ANGULAR_VEL);
 800455e:	eddf 1a62 	vldr	s3, [pc, #392]	@ 80046e8 <transporter_begin+0x190>
 8004562:	ed9f 1a62 	vldr	s2, [pc, #392]	@ 80046ec <transporter_begin+0x194>
 8004566:	eddf 0a62 	vldr	s1, [pc, #392]	@ 80046f0 <transporter_begin+0x198>
 800456a:	ed9f 0a62 	vldr	s0, [pc, #392]	@ 80046f4 <transporter_begin+0x19c>
 800456e:	4862      	ldr	r0, [pc, #392]	@ (80046f8 <transporter_begin+0x1a0>)
 8004570:	f7ff f86c 	bl	800364c <SKID_init>

	QEI_init(&encoder1, ENC_TIM1, ENC_PPR, ENC_FREQ, MOTOR_RATIO);
 8004574:	ed9f 0a61 	vldr	s0, [pc, #388]	@ 80046fc <transporter_begin+0x1a4>
 8004578:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800457c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004580:	495f      	ldr	r1, [pc, #380]	@ (8004700 <transporter_begin+0x1a8>)
 8004582:	4860      	ldr	r0, [pc, #384]	@ (8004704 <transporter_begin+0x1ac>)
 8004584:	f7fd f9ee 	bl	8001964 <QEI_init>
	QEI_init(&encoder2, ENC_TIM2, ENC_PPR, ENC_FREQ, MOTOR_RATIO);
 8004588:	ed9f 0a5c 	vldr	s0, [pc, #368]	@ 80046fc <transporter_begin+0x1a4>
 800458c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004590:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004594:	495c      	ldr	r1, [pc, #368]	@ (8004708 <transporter_begin+0x1b0>)
 8004596:	485d      	ldr	r0, [pc, #372]	@ (800470c <transporter_begin+0x1b4>)
 8004598:	f7fd f9e4 	bl	8001964 <QEI_init>
	QEI_init(&encoder3, ENC_TIM3, ENC_PPR, ENC_FREQ, MOTOR_RATIO);
 800459c:	ed9f 0a57 	vldr	s0, [pc, #348]	@ 80046fc <transporter_begin+0x1a4>
 80045a0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80045a4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80045a8:	4959      	ldr	r1, [pc, #356]	@ (8004710 <transporter_begin+0x1b8>)
 80045aa:	485a      	ldr	r0, [pc, #360]	@ (8004714 <transporter_begin+0x1bc>)
 80045ac:	f7fd f9da 	bl	8001964 <QEI_init>
	QEI_init(&encoder4, ENC_TIM4, ENC_PPR, ENC_FREQ, MOTOR_RATIO);
 80045b0:	ed9f 0a52 	vldr	s0, [pc, #328]	@ 80046fc <transporter_begin+0x1a4>
 80045b4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80045b8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80045bc:	4956      	ldr	r1, [pc, #344]	@ (8004718 <transporter_begin+0x1c0>)
 80045be:	4857      	ldr	r0, [pc, #348]	@ (800471c <transporter_begin+0x1c4>)
 80045c0:	f7fd f9d0 	bl	8001964 <QEI_init>

	MDXX_GPIO_init(&motor1, MOTOR1_TIM, MOTOR1_TIM_CH, MOTOR1_GPIOx, MOTOR1_GPIO_Pin);
 80045c4:	2320      	movs	r3, #32
 80045c6:	9300      	str	r3, [sp, #0]
 80045c8:	4b55      	ldr	r3, [pc, #340]	@ (8004720 <transporter_begin+0x1c8>)
 80045ca:	2200      	movs	r2, #0
 80045cc:	4955      	ldr	r1, [pc, #340]	@ (8004724 <transporter_begin+0x1cc>)
 80045ce:	4856      	ldr	r0, [pc, #344]	@ (8004728 <transporter_begin+0x1d0>)
 80045d0:	f7fc fe25 	bl	800121e <MDXX_GPIO_init>
	MDXX_GPIO_init(&motor2, MOTOR2_TIM, MOTOR2_TIM_CH, MOTOR2_GPIOx, MOTOR2_GPIO_Pin);
 80045d4:	2310      	movs	r3, #16
 80045d6:	9300      	str	r3, [sp, #0]
 80045d8:	4b51      	ldr	r3, [pc, #324]	@ (8004720 <transporter_begin+0x1c8>)
 80045da:	2204      	movs	r2, #4
 80045dc:	4951      	ldr	r1, [pc, #324]	@ (8004724 <transporter_begin+0x1cc>)
 80045de:	4853      	ldr	r0, [pc, #332]	@ (800472c <transporter_begin+0x1d4>)
 80045e0:	f7fc fe1d 	bl	800121e <MDXX_GPIO_init>
	MDXX_GPIO_init(&motor3, MOTOR3_TIM, MOTOR3_TIM_CH, MOTOR3_GPIOx, MOTOR3_GPIO_Pin);
 80045e4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80045e8:	9300      	str	r3, [sp, #0]
 80045ea:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80045ee:	2208      	movs	r2, #8
 80045f0:	494c      	ldr	r1, [pc, #304]	@ (8004724 <transporter_begin+0x1cc>)
 80045f2:	484f      	ldr	r0, [pc, #316]	@ (8004730 <transporter_begin+0x1d8>)
 80045f4:	f7fc fe13 	bl	800121e <MDXX_GPIO_init>
	MDXX_GPIO_init(&motor4, MOTOR4_TIM, MOTOR4_TIM_CH, MOTOR4_GPIOx, MOTOR4_GPIO_Pin);
 80045f8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80045fc:	9300      	str	r3, [sp, #0]
 80045fe:	4b48      	ldr	r3, [pc, #288]	@ (8004720 <transporter_begin+0x1c8>)
 8004600:	220c      	movs	r2, #12
 8004602:	4948      	ldr	r1, [pc, #288]	@ (8004724 <transporter_begin+0x1cc>)
 8004604:	484b      	ldr	r0, [pc, #300]	@ (8004734 <transporter_begin+0x1dc>)
 8004606:	f7fc fe0a 	bl	800121e <MDXX_GPIO_init>

	MDXX_set_range(&motor1, 2000, 0);
 800460a:	eddf 0a4b 	vldr	s1, [pc, #300]	@ 8004738 <transporter_begin+0x1e0>
 800460e:	ed9f 0a4b 	vldr	s0, [pc, #300]	@ 800473c <transporter_begin+0x1e4>
 8004612:	4845      	ldr	r0, [pc, #276]	@ (8004728 <transporter_begin+0x1d0>)
 8004614:	f7fc fe28 	bl	8001268 <MDXX_set_range>
	MDXX_set_range(&motor2, 2000, 0);
 8004618:	eddf 0a47 	vldr	s1, [pc, #284]	@ 8004738 <transporter_begin+0x1e0>
 800461c:	ed9f 0a47 	vldr	s0, [pc, #284]	@ 800473c <transporter_begin+0x1e4>
 8004620:	4842      	ldr	r0, [pc, #264]	@ (800472c <transporter_begin+0x1d4>)
 8004622:	f7fc fe21 	bl	8001268 <MDXX_set_range>
	MDXX_set_range(&motor3, 2000, 0);
 8004626:	eddf 0a44 	vldr	s1, [pc, #272]	@ 8004738 <transporter_begin+0x1e0>
 800462a:	ed9f 0a44 	vldr	s0, [pc, #272]	@ 800473c <transporter_begin+0x1e4>
 800462e:	4840      	ldr	r0, [pc, #256]	@ (8004730 <transporter_begin+0x1d8>)
 8004630:	f7fc fe1a 	bl	8001268 <MDXX_set_range>
	MDXX_set_range(&motor4, 2000, 0);
 8004634:	eddf 0a40 	vldr	s1, [pc, #256]	@ 8004738 <transporter_begin+0x1e0>
 8004638:	ed9f 0a40 	vldr	s0, [pc, #256]	@ 800473c <transporter_begin+0x1e4>
 800463c:	483d      	ldr	r0, [pc, #244]	@ (8004734 <transporter_begin+0x1dc>)
 800463e:	f7fc fe13 	bl	8001268 <MDXX_set_range>

	PID_CONTROLLER_Init(&pid1, 0, 0, 0, 65535);
 8004642:	eddf 1a3f 	vldr	s3, [pc, #252]	@ 8004740 <transporter_begin+0x1e8>
 8004646:	ed9f 1a3c 	vldr	s2, [pc, #240]	@ 8004738 <transporter_begin+0x1e0>
 800464a:	eddf 0a3b 	vldr	s1, [pc, #236]	@ 8004738 <transporter_begin+0x1e0>
 800464e:	ed9f 0a3a 	vldr	s0, [pc, #232]	@ 8004738 <transporter_begin+0x1e0>
 8004652:	483c      	ldr	r0, [pc, #240]	@ (8004744 <transporter_begin+0x1ec>)
 8004654:	f7fc fd27 	bl	80010a6 <PID_CONTROLLER_Init>
	PID_CONTROLLER_Init(&pid2, 0, 0, 0, 65535);
 8004658:	eddf 1a39 	vldr	s3, [pc, #228]	@ 8004740 <transporter_begin+0x1e8>
 800465c:	ed9f 1a36 	vldr	s2, [pc, #216]	@ 8004738 <transporter_begin+0x1e0>
 8004660:	eddf 0a35 	vldr	s1, [pc, #212]	@ 8004738 <transporter_begin+0x1e0>
 8004664:	ed9f 0a34 	vldr	s0, [pc, #208]	@ 8004738 <transporter_begin+0x1e0>
 8004668:	4837      	ldr	r0, [pc, #220]	@ (8004748 <transporter_begin+0x1f0>)
 800466a:	f7fc fd1c 	bl	80010a6 <PID_CONTROLLER_Init>
	PID_CONTROLLER_Init(&pid3, 0, 0, 0, 65535);
 800466e:	eddf 1a34 	vldr	s3, [pc, #208]	@ 8004740 <transporter_begin+0x1e8>
 8004672:	ed9f 1a31 	vldr	s2, [pc, #196]	@ 8004738 <transporter_begin+0x1e0>
 8004676:	eddf 0a30 	vldr	s1, [pc, #192]	@ 8004738 <transporter_begin+0x1e0>
 800467a:	ed9f 0a2f 	vldr	s0, [pc, #188]	@ 8004738 <transporter_begin+0x1e0>
 800467e:	4833      	ldr	r0, [pc, #204]	@ (800474c <transporter_begin+0x1f4>)
 8004680:	f7fc fd11 	bl	80010a6 <PID_CONTROLLER_Init>
	PID_CONTROLLER_Init(&pid4, 0, 0, 0, 65535);
 8004684:	eddf 1a2e 	vldr	s3, [pc, #184]	@ 8004740 <transporter_begin+0x1e8>
 8004688:	ed9f 1a2b 	vldr	s2, [pc, #172]	@ 8004738 <transporter_begin+0x1e0>
 800468c:	eddf 0a2a 	vldr	s1, [pc, #168]	@ 8004738 <transporter_begin+0x1e0>
 8004690:	ed9f 0a29 	vldr	s0, [pc, #164]	@ 8004738 <transporter_begin+0x1e0>
 8004694:	482e      	ldr	r0, [pc, #184]	@ (8004750 <transporter_begin+0x1f8>)
 8004696:	f7fc fd06 	bl	80010a6 <PID_CONTROLLER_Init>
//	PID_CONTROLLER_Init(&pid4, 500000, 7500, 0, 65535);

	FIR_init(&lowPassFilter1, NUM_TAPS, CUTOFF_FREQ, SAMPLE_RATE);
 800469a:	eddf 0a2e 	vldr	s1, [pc, #184]	@ 8004754 <transporter_begin+0x1fc>
 800469e:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 80046a2:	211f      	movs	r1, #31
 80046a4:	482c      	ldr	r0, [pc, #176]	@ (8004758 <transporter_begin+0x200>)
 80046a6:	f7fc feb9 	bl	800141c <FIR_init>
	FIR_init(&lowPassFilter2, NUM_TAPS, CUTOFF_FREQ, SAMPLE_RATE);
 80046aa:	eddf 0a2a 	vldr	s1, [pc, #168]	@ 8004754 <transporter_begin+0x1fc>
 80046ae:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 80046b2:	211f      	movs	r1, #31
 80046b4:	4829      	ldr	r0, [pc, #164]	@ (800475c <transporter_begin+0x204>)
 80046b6:	f7fc feb1 	bl	800141c <FIR_init>
	FIR_init(&lowPassFilter3, NUM_TAPS, CUTOFF_FREQ, SAMPLE_RATE);
 80046ba:	eddf 0a26 	vldr	s1, [pc, #152]	@ 8004754 <transporter_begin+0x1fc>
 80046be:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 80046c2:	211f      	movs	r1, #31
 80046c4:	4826      	ldr	r0, [pc, #152]	@ (8004760 <transporter_begin+0x208>)
 80046c6:	f7fc fea9 	bl	800141c <FIR_init>
	FIR_init(&lowPassFilter4, NUM_TAPS, CUTOFF_FREQ, SAMPLE_RATE);
 80046ca:	eddf 0a22 	vldr	s1, [pc, #136]	@ 8004754 <transporter_begin+0x1fc>
 80046ce:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 80046d2:	211f      	movs	r1, #31
 80046d4:	4823      	ldr	r0, [pc, #140]	@ (8004764 <transporter_begin+0x20c>)
 80046d6:	f7fc fea1 	bl	800141c <FIR_init>

	HAL_TIM_Base_Start_IT(CONTROL_TIM);
 80046da:	4823      	ldr	r0, [pc, #140]	@ (8004768 <transporter_begin+0x210>)
 80046dc:	f002 f9c8 	bl	8006a70 <HAL_TIM_Base_Start_IT>
}
 80046e0:	bf00      	nop
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bd80      	pop	{r7, pc}
 80046e6:	bf00      	nop
 80046e8:	3e6eeeef 	.word	0x3e6eeeef
 80046ec:	3dae147b 	.word	0x3dae147b
 80046f0:	40733333 	.word	0x40733333
 80046f4:	3dfae148 	.word	0x3dfae148
 80046f8:	20004854 	.word	0x20004854
 80046fc:	3ea8f5c3 	.word	0x3ea8f5c3
 8004700:	20004398 	.word	0x20004398
 8004704:	20004644 	.word	0x20004644
 8004708:	200043e4 	.word	0x200043e4
 800470c:	20004690 	.word	0x20004690
 8004710:	20004430 	.word	0x20004430
 8004714:	200046dc 	.word	0x200046dc
 8004718:	200044c8 	.word	0x200044c8
 800471c:	20004728 	.word	0x20004728
 8004720:	48000400 	.word	0x48000400
 8004724:	2000447c 	.word	0x2000447c
 8004728:	20004514 	.word	0x20004514
 800472c:	20004560 	.word	0x20004560
 8004730:	200045ac 	.word	0x200045ac
 8004734:	200045f8 	.word	0x200045f8
 8004738:	00000000 	.word	0x00000000
 800473c:	44fa0000 	.word	0x44fa0000
 8004740:	477fff00 	.word	0x477fff00
 8004744:	20004774 	.word	0x20004774
 8004748:	200047a0 	.word	0x200047a0
 800474c:	200047cc 	.word	0x200047cc
 8004750:	200047f8 	.word	0x200047f8
 8004754:	447a0000 	.word	0x447a0000
 8004758:	20004824 	.word	0x20004824
 800475c:	20004830 	.word	0x20004830
 8004760:	2000483c 	.word	0x2000483c
 8004764:	20004848 	.word	0x20004848
 8004768:	2000434c 	.word	0x2000434c

0800476c <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_lpuart1_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8004770:	4b20      	ldr	r3, [pc, #128]	@ (80047f4 <MX_LPUART1_UART_Init+0x88>)
 8004772:	4a21      	ldr	r2, [pc, #132]	@ (80047f8 <MX_LPUART1_UART_Init+0x8c>)
 8004774:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 2000000;
 8004776:	4b1f      	ldr	r3, [pc, #124]	@ (80047f4 <MX_LPUART1_UART_Init+0x88>)
 8004778:	4a20      	ldr	r2, [pc, #128]	@ (80047fc <MX_LPUART1_UART_Init+0x90>)
 800477a:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800477c:	4b1d      	ldr	r3, [pc, #116]	@ (80047f4 <MX_LPUART1_UART_Init+0x88>)
 800477e:	2200      	movs	r2, #0
 8004780:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8004782:	4b1c      	ldr	r3, [pc, #112]	@ (80047f4 <MX_LPUART1_UART_Init+0x88>)
 8004784:	2200      	movs	r2, #0
 8004786:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8004788:	4b1a      	ldr	r3, [pc, #104]	@ (80047f4 <MX_LPUART1_UART_Init+0x88>)
 800478a:	2200      	movs	r2, #0
 800478c:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800478e:	4b19      	ldr	r3, [pc, #100]	@ (80047f4 <MX_LPUART1_UART_Init+0x88>)
 8004790:	220c      	movs	r2, #12
 8004792:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004794:	4b17      	ldr	r3, [pc, #92]	@ (80047f4 <MX_LPUART1_UART_Init+0x88>)
 8004796:	2200      	movs	r2, #0
 8004798:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800479a:	4b16      	ldr	r3, [pc, #88]	@ (80047f4 <MX_LPUART1_UART_Init+0x88>)
 800479c:	2200      	movs	r2, #0
 800479e:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80047a0:	4b14      	ldr	r3, [pc, #80]	@ (80047f4 <MX_LPUART1_UART_Init+0x88>)
 80047a2:	2200      	movs	r2, #0
 80047a4:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80047a6:	4b13      	ldr	r3, [pc, #76]	@ (80047f4 <MX_LPUART1_UART_Init+0x88>)
 80047a8:	2200      	movs	r2, #0
 80047aa:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80047ac:	4811      	ldr	r0, [pc, #68]	@ (80047f4 <MX_LPUART1_UART_Init+0x88>)
 80047ae:	f003 fe27 	bl	8008400 <HAL_UART_Init>
 80047b2:	4603      	mov	r3, r0
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d001      	beq.n	80047bc <MX_LPUART1_UART_Init+0x50>
  {
    Error_Handler();
 80047b8:	f7fe fae4 	bl	8002d84 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80047bc:	2100      	movs	r1, #0
 80047be:	480d      	ldr	r0, [pc, #52]	@ (80047f4 <MX_LPUART1_UART_Init+0x88>)
 80047c0:	f005 fb37 	bl	8009e32 <HAL_UARTEx_SetTxFifoThreshold>
 80047c4:	4603      	mov	r3, r0
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d001      	beq.n	80047ce <MX_LPUART1_UART_Init+0x62>
  {
    Error_Handler();
 80047ca:	f7fe fadb 	bl	8002d84 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80047ce:	2100      	movs	r1, #0
 80047d0:	4808      	ldr	r0, [pc, #32]	@ (80047f4 <MX_LPUART1_UART_Init+0x88>)
 80047d2:	f005 fb6c 	bl	8009eae <HAL_UARTEx_SetRxFifoThreshold>
 80047d6:	4603      	mov	r3, r0
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d001      	beq.n	80047e0 <MX_LPUART1_UART_Init+0x74>
  {
    Error_Handler();
 80047dc:	f7fe fad2 	bl	8002d84 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80047e0:	4804      	ldr	r0, [pc, #16]	@ (80047f4 <MX_LPUART1_UART_Init+0x88>)
 80047e2:	f005 faed 	bl	8009dc0 <HAL_UARTEx_DisableFifoMode>
 80047e6:	4603      	mov	r3, r0
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d001      	beq.n	80047f0 <MX_LPUART1_UART_Init+0x84>
  {
    Error_Handler();
 80047ec:	f7fe faca 	bl	8002d84 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80047f0:	bf00      	nop
 80047f2:	bd80      	pop	{r7, pc}
 80047f4:	2000487c 	.word	0x2000487c
 80047f8:	40008000 	.word	0x40008000
 80047fc:	001e8480 	.word	0x001e8480

08004800 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b09e      	sub	sp, #120	@ 0x78
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004808:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800480c:	2200      	movs	r2, #0
 800480e:	601a      	str	r2, [r3, #0]
 8004810:	605a      	str	r2, [r3, #4]
 8004812:	609a      	str	r2, [r3, #8]
 8004814:	60da      	str	r2, [r3, #12]
 8004816:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004818:	f107 0310 	add.w	r3, r7, #16
 800481c:	2254      	movs	r2, #84	@ 0x54
 800481e:	2100      	movs	r1, #0
 8004820:	4618      	mov	r0, r3
 8004822:	f016 fda3 	bl	801b36c <memset>
  if(uartHandle->Instance==LPUART1)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4a4e      	ldr	r2, [pc, #312]	@ (8004964 <HAL_UART_MspInit+0x164>)
 800482c:	4293      	cmp	r3, r2
 800482e:	f040 8094 	bne.w	800495a <HAL_UART_MspInit+0x15a>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8004832:	2320      	movs	r3, #32
 8004834:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8004836:	2300      	movs	r3, #0
 8004838:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800483a:	f107 0310 	add.w	r3, r7, #16
 800483e:	4618      	mov	r0, r3
 8004840:	f001 fe00 	bl	8006444 <HAL_RCCEx_PeriphCLKConfig>
 8004844:	4603      	mov	r3, r0
 8004846:	2b00      	cmp	r3, #0
 8004848:	d001      	beq.n	800484e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800484a:	f7fe fa9b 	bl	8002d84 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800484e:	4b46      	ldr	r3, [pc, #280]	@ (8004968 <HAL_UART_MspInit+0x168>)
 8004850:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004852:	4a45      	ldr	r2, [pc, #276]	@ (8004968 <HAL_UART_MspInit+0x168>)
 8004854:	f043 0301 	orr.w	r3, r3, #1
 8004858:	65d3      	str	r3, [r2, #92]	@ 0x5c
 800485a:	4b43      	ldr	r3, [pc, #268]	@ (8004968 <HAL_UART_MspInit+0x168>)
 800485c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800485e:	f003 0301 	and.w	r3, r3, #1
 8004862:	60fb      	str	r3, [r7, #12]
 8004864:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004866:	4b40      	ldr	r3, [pc, #256]	@ (8004968 <HAL_UART_MspInit+0x168>)
 8004868:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800486a:	4a3f      	ldr	r2, [pc, #252]	@ (8004968 <HAL_UART_MspInit+0x168>)
 800486c:	f043 0301 	orr.w	r3, r3, #1
 8004870:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004872:	4b3d      	ldr	r3, [pc, #244]	@ (8004968 <HAL_UART_MspInit+0x168>)
 8004874:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004876:	f003 0301 	and.w	r3, r3, #1
 800487a:	60bb      	str	r3, [r7, #8]
 800487c:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 800487e:	230c      	movs	r3, #12
 8004880:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004882:	2302      	movs	r3, #2
 8004884:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004886:	2300      	movs	r3, #0
 8004888:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800488a:	2300      	movs	r3, #0
 800488c:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 800488e:	230c      	movs	r3, #12
 8004890:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004892:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8004896:	4619      	mov	r1, r3
 8004898:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800489c:	f000 fd98 	bl	80053d0 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel1;
 80048a0:	4b32      	ldr	r3, [pc, #200]	@ (800496c <HAL_UART_MspInit+0x16c>)
 80048a2:	4a33      	ldr	r2, [pc, #204]	@ (8004970 <HAL_UART_MspInit+0x170>)
 80048a4:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 80048a6:	4b31      	ldr	r3, [pc, #196]	@ (800496c <HAL_UART_MspInit+0x16c>)
 80048a8:	2222      	movs	r2, #34	@ 0x22
 80048aa:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80048ac:	4b2f      	ldr	r3, [pc, #188]	@ (800496c <HAL_UART_MspInit+0x16c>)
 80048ae:	2200      	movs	r2, #0
 80048b0:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80048b2:	4b2e      	ldr	r3, [pc, #184]	@ (800496c <HAL_UART_MspInit+0x16c>)
 80048b4:	2200      	movs	r2, #0
 80048b6:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80048b8:	4b2c      	ldr	r3, [pc, #176]	@ (800496c <HAL_UART_MspInit+0x16c>)
 80048ba:	2280      	movs	r2, #128	@ 0x80
 80048bc:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80048be:	4b2b      	ldr	r3, [pc, #172]	@ (800496c <HAL_UART_MspInit+0x16c>)
 80048c0:	2200      	movs	r2, #0
 80048c2:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80048c4:	4b29      	ldr	r3, [pc, #164]	@ (800496c <HAL_UART_MspInit+0x16c>)
 80048c6:	2200      	movs	r2, #0
 80048c8:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_CIRCULAR;
 80048ca:	4b28      	ldr	r3, [pc, #160]	@ (800496c <HAL_UART_MspInit+0x16c>)
 80048cc:	2220      	movs	r2, #32
 80048ce:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80048d0:	4b26      	ldr	r3, [pc, #152]	@ (800496c <HAL_UART_MspInit+0x16c>)
 80048d2:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 80048d6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 80048d8:	4824      	ldr	r0, [pc, #144]	@ (800496c <HAL_UART_MspInit+0x16c>)
 80048da:	f000 fa3b 	bl	8004d54 <HAL_DMA_Init>
 80048de:	4603      	mov	r3, r0
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d001      	beq.n	80048e8 <HAL_UART_MspInit+0xe8>
    {
      Error_Handler();
 80048e4:	f7fe fa4e 	bl	8002d84 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	4a20      	ldr	r2, [pc, #128]	@ (800496c <HAL_UART_MspInit+0x16c>)
 80048ec:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80048f0:	4a1e      	ldr	r2, [pc, #120]	@ (800496c <HAL_UART_MspInit+0x16c>)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel2;
 80048f6:	4b1f      	ldr	r3, [pc, #124]	@ (8004974 <HAL_UART_MspInit+0x174>)
 80048f8:	4a1f      	ldr	r2, [pc, #124]	@ (8004978 <HAL_UART_MspInit+0x178>)
 80048fa:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 80048fc:	4b1d      	ldr	r3, [pc, #116]	@ (8004974 <HAL_UART_MspInit+0x174>)
 80048fe:	2223      	movs	r2, #35	@ 0x23
 8004900:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004902:	4b1c      	ldr	r3, [pc, #112]	@ (8004974 <HAL_UART_MspInit+0x174>)
 8004904:	2210      	movs	r2, #16
 8004906:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004908:	4b1a      	ldr	r3, [pc, #104]	@ (8004974 <HAL_UART_MspInit+0x174>)
 800490a:	2200      	movs	r2, #0
 800490c:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800490e:	4b19      	ldr	r3, [pc, #100]	@ (8004974 <HAL_UART_MspInit+0x174>)
 8004910:	2280      	movs	r2, #128	@ 0x80
 8004912:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004914:	4b17      	ldr	r3, [pc, #92]	@ (8004974 <HAL_UART_MspInit+0x174>)
 8004916:	2200      	movs	r2, #0
 8004918:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800491a:	4b16      	ldr	r3, [pc, #88]	@ (8004974 <HAL_UART_MspInit+0x174>)
 800491c:	2200      	movs	r2, #0
 800491e:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 8004920:	4b14      	ldr	r3, [pc, #80]	@ (8004974 <HAL_UART_MspInit+0x174>)
 8004922:	2200      	movs	r2, #0
 8004924:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8004926:	4b13      	ldr	r3, [pc, #76]	@ (8004974 <HAL_UART_MspInit+0x174>)
 8004928:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 800492c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 800492e:	4811      	ldr	r0, [pc, #68]	@ (8004974 <HAL_UART_MspInit+0x174>)
 8004930:	f000 fa10 	bl	8004d54 <HAL_DMA_Init>
 8004934:	4603      	mov	r3, r0
 8004936:	2b00      	cmp	r3, #0
 8004938:	d001      	beq.n	800493e <HAL_UART_MspInit+0x13e>
    {
      Error_Handler();
 800493a:	f7fe fa23 	bl	8002d84 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_lpuart1_tx);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	4a0c      	ldr	r2, [pc, #48]	@ (8004974 <HAL_UART_MspInit+0x174>)
 8004942:	67da      	str	r2, [r3, #124]	@ 0x7c
 8004944:	4a0b      	ldr	r2, [pc, #44]	@ (8004974 <HAL_UART_MspInit+0x174>)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 5, 0);
 800494a:	2200      	movs	r2, #0
 800494c:	2105      	movs	r1, #5
 800494e:	205b      	movs	r0, #91	@ 0x5b
 8004950:	f000 f9d8 	bl	8004d04 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8004954:	205b      	movs	r0, #91	@ 0x5b
 8004956:	f000 f9ef 	bl	8004d38 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 800495a:	bf00      	nop
 800495c:	3778      	adds	r7, #120	@ 0x78
 800495e:	46bd      	mov	sp, r7
 8004960:	bd80      	pop	{r7, pc}
 8004962:	bf00      	nop
 8004964:	40008000 	.word	0x40008000
 8004968:	40021000 	.word	0x40021000
 800496c:	20004910 	.word	0x20004910
 8004970:	40020008 	.word	0x40020008
 8004974:	20004970 	.word	0x20004970
 8004978:	4002001c 	.word	0x4002001c

0800497c <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 800497c:	b580      	push	{r7, lr}
 800497e:	b084      	sub	sp, #16
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 800498a:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 800498c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004990:	4904      	ldr	r1, [pc, #16]	@ (80049a4 <cubemx_transport_open+0x28>)
 8004992:	68f8      	ldr	r0, [r7, #12]
 8004994:	f003 fe04 	bl	80085a0 <HAL_UART_Receive_DMA>
    return true;
 8004998:	2301      	movs	r3, #1
}
 800499a:	4618      	mov	r0, r3
 800499c:	3710      	adds	r7, #16
 800499e:	46bd      	mov	sp, r7
 80049a0:	bd80      	pop	{r7, pc}
 80049a2:	bf00      	nop
 80049a4:	200049d0 	.word	0x200049d0

080049a8 <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b084      	sub	sp, #16
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 80049b6:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 80049b8:	68f8      	ldr	r0, [r7, #12]
 80049ba:	f003 fe3d 	bl	8008638 <HAL_UART_DMAStop>
    return true;
 80049be:	2301      	movs	r3, #1
}
 80049c0:	4618      	mov	r0, r3
 80049c2:	3710      	adds	r7, #16
 80049c4:	46bd      	mov	sp, r7
 80049c6:	bd80      	pop	{r7, pc}

080049c8 <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b086      	sub	sp, #24
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	60f8      	str	r0, [r7, #12]
 80049d0:	60b9      	str	r1, [r7, #8]
 80049d2:	607a      	str	r2, [r7, #4]
 80049d4:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 80049dc:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 80049de:	697b      	ldr	r3, [r7, #20]
 80049e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049e4:	2b20      	cmp	r3, #32
 80049e6:	d11b      	bne.n	8004a20 <cubemx_transport_write+0x58>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	b29b      	uxth	r3, r3
 80049ec:	461a      	mov	r2, r3
 80049ee:	68b9      	ldr	r1, [r7, #8]
 80049f0:	6978      	ldr	r0, [r7, #20]
 80049f2:	f003 fd55 	bl	80084a0 <HAL_UART_Transmit_DMA>
 80049f6:	4603      	mov	r3, r0
 80049f8:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 80049fa:	e002      	b.n	8004a02 <cubemx_transport_write+0x3a>
            osDelay(1);
 80049fc:	2001      	movs	r0, #1
 80049fe:	f005 fc85 	bl	800a30c <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8004a02:	7cfb      	ldrb	r3, [r7, #19]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d104      	bne.n	8004a12 <cubemx_transport_write+0x4a>
 8004a08:	697b      	ldr	r3, [r7, #20]
 8004a0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a0e:	2b20      	cmp	r3, #32
 8004a10:	d1f4      	bne.n	80049fc <cubemx_transport_write+0x34>
        }

        return (ret == HAL_OK) ? len : 0;
 8004a12:	7cfb      	ldrb	r3, [r7, #19]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d101      	bne.n	8004a1c <cubemx_transport_write+0x54>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	e002      	b.n	8004a22 <cubemx_transport_write+0x5a>
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	e000      	b.n	8004a22 <cubemx_transport_write+0x5a>
    }else{
        return 0;
 8004a20:	2300      	movs	r3, #0
    }
}
 8004a22:	4618      	mov	r0, r3
 8004a24:	3718      	adds	r7, #24
 8004a26:	46bd      	mov	sp, r7
 8004a28:	bd80      	pop	{r7, pc}
	...

08004a2c <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b088      	sub	sp, #32
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	60f8      	str	r0, [r7, #12]
 8004a34:	60b9      	str	r1, [r7, #8]
 8004a36:	607a      	str	r2, [r7, #4]
 8004a38:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8004a40:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 8004a42:	2300      	movs	r3, #0
 8004a44:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8004a46:	b672      	cpsid	i
}
 8004a48:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 8004a4a:	697b      	ldr	r3, [r7, #20]
 8004a4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	685b      	ldr	r3, [r3, #4]
 8004a54:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 8004a58:	4a1b      	ldr	r2, [pc, #108]	@ (8004ac8 <cubemx_transport_read+0x9c>)
 8004a5a:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004a5c:	b662      	cpsie	i
}
 8004a5e:	bf00      	nop
        __enable_irq();
        ms_used++;
 8004a60:	69fb      	ldr	r3, [r7, #28]
 8004a62:	3301      	adds	r3, #1
 8004a64:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 8004a66:	2001      	movs	r0, #1
 8004a68:	f005 fc50 	bl	800a30c <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 8004a6c:	4b17      	ldr	r3, [pc, #92]	@ (8004acc <cubemx_transport_read+0xa0>)
 8004a6e:	681a      	ldr	r2, [r3, #0]
 8004a70:	4b15      	ldr	r3, [pc, #84]	@ (8004ac8 <cubemx_transport_read+0x9c>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	429a      	cmp	r2, r3
 8004a76:	d103      	bne.n	8004a80 <cubemx_transport_read+0x54>
 8004a78:	69fa      	ldr	r2, [r7, #28]
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	429a      	cmp	r2, r3
 8004a7e:	dbe2      	blt.n	8004a46 <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 8004a80:	2300      	movs	r3, #0
 8004a82:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8004a84:	e011      	b.n	8004aaa <cubemx_transport_read+0x7e>
        buf[wrote] = dma_buffer[dma_head];
 8004a86:	4b11      	ldr	r3, [pc, #68]	@ (8004acc <cubemx_transport_read+0xa0>)
 8004a88:	681a      	ldr	r2, [r3, #0]
 8004a8a:	68b9      	ldr	r1, [r7, #8]
 8004a8c:	69bb      	ldr	r3, [r7, #24]
 8004a8e:	440b      	add	r3, r1
 8004a90:	490f      	ldr	r1, [pc, #60]	@ (8004ad0 <cubemx_transport_read+0xa4>)
 8004a92:	5c8a      	ldrb	r2, [r1, r2]
 8004a94:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 8004a96:	4b0d      	ldr	r3, [pc, #52]	@ (8004acc <cubemx_transport_read+0xa0>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	3301      	adds	r3, #1
 8004a9c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004aa0:	4a0a      	ldr	r2, [pc, #40]	@ (8004acc <cubemx_transport_read+0xa0>)
 8004aa2:	6013      	str	r3, [r2, #0]
        wrote++;
 8004aa4:	69bb      	ldr	r3, [r7, #24]
 8004aa6:	3301      	adds	r3, #1
 8004aa8:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8004aaa:	4b08      	ldr	r3, [pc, #32]	@ (8004acc <cubemx_transport_read+0xa0>)
 8004aac:	681a      	ldr	r2, [r3, #0]
 8004aae:	4b06      	ldr	r3, [pc, #24]	@ (8004ac8 <cubemx_transport_read+0x9c>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	429a      	cmp	r2, r3
 8004ab4:	d003      	beq.n	8004abe <cubemx_transport_read+0x92>
 8004ab6:	69ba      	ldr	r2, [r7, #24]
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	429a      	cmp	r2, r3
 8004abc:	d3e3      	bcc.n	8004a86 <cubemx_transport_read+0x5a>
    }
    
    return wrote;
 8004abe:	69bb      	ldr	r3, [r7, #24]
}
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	3720      	adds	r7, #32
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	bd80      	pop	{r7, pc}
 8004ac8:	200051d4 	.word	0x200051d4
 8004acc:	200051d0 	.word	0x200051d0
 8004ad0:	200049d0 	.word	0x200049d0

08004ad4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004ad4:	480d      	ldr	r0, [pc, #52]	@ (8004b0c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8004ad6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8004ad8:	f7ff f958 	bl	8003d8c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004adc:	480c      	ldr	r0, [pc, #48]	@ (8004b10 <LoopForever+0x6>)
  ldr r1, =_edata
 8004ade:	490d      	ldr	r1, [pc, #52]	@ (8004b14 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004ae0:	4a0d      	ldr	r2, [pc, #52]	@ (8004b18 <LoopForever+0xe>)
  movs r3, #0
 8004ae2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8004ae4:	e002      	b.n	8004aec <LoopCopyDataInit>

08004ae6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004ae6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004ae8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004aea:	3304      	adds	r3, #4

08004aec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004aec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004aee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004af0:	d3f9      	bcc.n	8004ae6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004af2:	4a0a      	ldr	r2, [pc, #40]	@ (8004b1c <LoopForever+0x12>)
  ldr r4, =_ebss
 8004af4:	4c0a      	ldr	r4, [pc, #40]	@ (8004b20 <LoopForever+0x16>)
  movs r3, #0
 8004af6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004af8:	e001      	b.n	8004afe <LoopFillZerobss>

08004afa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004afa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004afc:	3204      	adds	r2, #4

08004afe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004afe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004b00:	d3fb      	bcc.n	8004afa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004b02:	f016 fccd 	bl	801b4a0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004b06:	f7fd fea9 	bl	800285c <main>

08004b0a <LoopForever>:

LoopForever:
    b LoopForever
 8004b0a:	e7fe      	b.n	8004b0a <LoopForever>
  ldr   r0, =_estack
 8004b0c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004b10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004b14:	20000488 	.word	0x20000488
  ldr r2, =_sidata
 8004b18:	0801f0dc 	.word	0x0801f0dc
  ldr r2, =_sbss
 8004b1c:	20000488 	.word	0x20000488
  ldr r4, =_ebss
 8004b20:	2000b7fc 	.word	0x2000b7fc

08004b24 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004b24:	e7fe      	b.n	8004b24 <ADC1_2_IRQHandler>

08004b26 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004b26:	b580      	push	{r7, lr}
 8004b28:	b082      	sub	sp, #8
 8004b2a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004b30:	2003      	movs	r0, #3
 8004b32:	f000 f8dc 	bl	8004cee <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004b36:	200f      	movs	r0, #15
 8004b38:	f7fe ffa0 	bl	8003a7c <HAL_InitTick>
 8004b3c:	4603      	mov	r3, r0
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d002      	beq.n	8004b48 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8004b42:	2301      	movs	r3, #1
 8004b44:	71fb      	strb	r3, [r7, #7]
 8004b46:	e001      	b.n	8004b4c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004b48:	f7fe ff6e 	bl	8003a28 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004b4c:	79fb      	ldrb	r3, [r7, #7]

}
 8004b4e:	4618      	mov	r0, r3
 8004b50:	3708      	adds	r7, #8
 8004b52:	46bd      	mov	sp, r7
 8004b54:	bd80      	pop	{r7, pc}
	...

08004b58 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004b58:	b480      	push	{r7}
 8004b5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004b5c:	4b05      	ldr	r3, [pc, #20]	@ (8004b74 <HAL_IncTick+0x1c>)
 8004b5e:	681a      	ldr	r2, [r3, #0]
 8004b60:	4b05      	ldr	r3, [pc, #20]	@ (8004b78 <HAL_IncTick+0x20>)
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	4413      	add	r3, r2
 8004b66:	4a03      	ldr	r2, [pc, #12]	@ (8004b74 <HAL_IncTick+0x1c>)
 8004b68:	6013      	str	r3, [r2, #0]
}
 8004b6a:	bf00      	nop
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b72:	4770      	bx	lr
 8004b74:	200051d8 	.word	0x200051d8
 8004b78:	2000000c 	.word	0x2000000c

08004b7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004b7c:	b480      	push	{r7}
 8004b7e:	af00      	add	r7, sp, #0
  return uwTick;
 8004b80:	4b03      	ldr	r3, [pc, #12]	@ (8004b90 <HAL_GetTick+0x14>)
 8004b82:	681b      	ldr	r3, [r3, #0]
}
 8004b84:	4618      	mov	r0, r3
 8004b86:	46bd      	mov	sp, r7
 8004b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8c:	4770      	bx	lr
 8004b8e:	bf00      	nop
 8004b90:	200051d8 	.word	0x200051d8

08004b94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b94:	b480      	push	{r7}
 8004b96:	b085      	sub	sp, #20
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	f003 0307 	and.w	r3, r3, #7
 8004ba2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004ba4:	4b0c      	ldr	r3, [pc, #48]	@ (8004bd8 <__NVIC_SetPriorityGrouping+0x44>)
 8004ba6:	68db      	ldr	r3, [r3, #12]
 8004ba8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004baa:	68ba      	ldr	r2, [r7, #8]
 8004bac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004bb0:	4013      	ands	r3, r2
 8004bb2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004bb8:	68bb      	ldr	r3, [r7, #8]
 8004bba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004bbc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004bc0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004bc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004bc6:	4a04      	ldr	r2, [pc, #16]	@ (8004bd8 <__NVIC_SetPriorityGrouping+0x44>)
 8004bc8:	68bb      	ldr	r3, [r7, #8]
 8004bca:	60d3      	str	r3, [r2, #12]
}
 8004bcc:	bf00      	nop
 8004bce:	3714      	adds	r7, #20
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd6:	4770      	bx	lr
 8004bd8:	e000ed00 	.word	0xe000ed00

08004bdc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004bdc:	b480      	push	{r7}
 8004bde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004be0:	4b04      	ldr	r3, [pc, #16]	@ (8004bf4 <__NVIC_GetPriorityGrouping+0x18>)
 8004be2:	68db      	ldr	r3, [r3, #12]
 8004be4:	0a1b      	lsrs	r3, r3, #8
 8004be6:	f003 0307 	and.w	r3, r3, #7
}
 8004bea:	4618      	mov	r0, r3
 8004bec:	46bd      	mov	sp, r7
 8004bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf2:	4770      	bx	lr
 8004bf4:	e000ed00 	.word	0xe000ed00

08004bf8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004bf8:	b480      	push	{r7}
 8004bfa:	b083      	sub	sp, #12
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	4603      	mov	r3, r0
 8004c00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	db0b      	blt.n	8004c22 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004c0a:	79fb      	ldrb	r3, [r7, #7]
 8004c0c:	f003 021f 	and.w	r2, r3, #31
 8004c10:	4907      	ldr	r1, [pc, #28]	@ (8004c30 <__NVIC_EnableIRQ+0x38>)
 8004c12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c16:	095b      	lsrs	r3, r3, #5
 8004c18:	2001      	movs	r0, #1
 8004c1a:	fa00 f202 	lsl.w	r2, r0, r2
 8004c1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004c22:	bf00      	nop
 8004c24:	370c      	adds	r7, #12
 8004c26:	46bd      	mov	sp, r7
 8004c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2c:	4770      	bx	lr
 8004c2e:	bf00      	nop
 8004c30:	e000e100 	.word	0xe000e100

08004c34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004c34:	b480      	push	{r7}
 8004c36:	b083      	sub	sp, #12
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	4603      	mov	r3, r0
 8004c3c:	6039      	str	r1, [r7, #0]
 8004c3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	db0a      	blt.n	8004c5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	b2da      	uxtb	r2, r3
 8004c4c:	490c      	ldr	r1, [pc, #48]	@ (8004c80 <__NVIC_SetPriority+0x4c>)
 8004c4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c52:	0112      	lsls	r2, r2, #4
 8004c54:	b2d2      	uxtb	r2, r2
 8004c56:	440b      	add	r3, r1
 8004c58:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004c5c:	e00a      	b.n	8004c74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	b2da      	uxtb	r2, r3
 8004c62:	4908      	ldr	r1, [pc, #32]	@ (8004c84 <__NVIC_SetPriority+0x50>)
 8004c64:	79fb      	ldrb	r3, [r7, #7]
 8004c66:	f003 030f 	and.w	r3, r3, #15
 8004c6a:	3b04      	subs	r3, #4
 8004c6c:	0112      	lsls	r2, r2, #4
 8004c6e:	b2d2      	uxtb	r2, r2
 8004c70:	440b      	add	r3, r1
 8004c72:	761a      	strb	r2, [r3, #24]
}
 8004c74:	bf00      	nop
 8004c76:	370c      	adds	r7, #12
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7e:	4770      	bx	lr
 8004c80:	e000e100 	.word	0xe000e100
 8004c84:	e000ed00 	.word	0xe000ed00

08004c88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004c88:	b480      	push	{r7}
 8004c8a:	b089      	sub	sp, #36	@ 0x24
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	60f8      	str	r0, [r7, #12]
 8004c90:	60b9      	str	r1, [r7, #8]
 8004c92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	f003 0307 	and.w	r3, r3, #7
 8004c9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004c9c:	69fb      	ldr	r3, [r7, #28]
 8004c9e:	f1c3 0307 	rsb	r3, r3, #7
 8004ca2:	2b04      	cmp	r3, #4
 8004ca4:	bf28      	it	cs
 8004ca6:	2304      	movcs	r3, #4
 8004ca8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004caa:	69fb      	ldr	r3, [r7, #28]
 8004cac:	3304      	adds	r3, #4
 8004cae:	2b06      	cmp	r3, #6
 8004cb0:	d902      	bls.n	8004cb8 <NVIC_EncodePriority+0x30>
 8004cb2:	69fb      	ldr	r3, [r7, #28]
 8004cb4:	3b03      	subs	r3, #3
 8004cb6:	e000      	b.n	8004cba <NVIC_EncodePriority+0x32>
 8004cb8:	2300      	movs	r3, #0
 8004cba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004cbc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004cc0:	69bb      	ldr	r3, [r7, #24]
 8004cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8004cc6:	43da      	mvns	r2, r3
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	401a      	ands	r2, r3
 8004ccc:	697b      	ldr	r3, [r7, #20]
 8004cce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004cd0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8004cd4:	697b      	ldr	r3, [r7, #20]
 8004cd6:	fa01 f303 	lsl.w	r3, r1, r3
 8004cda:	43d9      	mvns	r1, r3
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ce0:	4313      	orrs	r3, r2
         );
}
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	3724      	adds	r7, #36	@ 0x24
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cec:	4770      	bx	lr

08004cee <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004cee:	b580      	push	{r7, lr}
 8004cf0:	b082      	sub	sp, #8
 8004cf2:	af00      	add	r7, sp, #0
 8004cf4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004cf6:	6878      	ldr	r0, [r7, #4]
 8004cf8:	f7ff ff4c 	bl	8004b94 <__NVIC_SetPriorityGrouping>
}
 8004cfc:	bf00      	nop
 8004cfe:	3708      	adds	r7, #8
 8004d00:	46bd      	mov	sp, r7
 8004d02:	bd80      	pop	{r7, pc}

08004d04 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b086      	sub	sp, #24
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	4603      	mov	r3, r0
 8004d0c:	60b9      	str	r1, [r7, #8]
 8004d0e:	607a      	str	r2, [r7, #4]
 8004d10:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004d12:	f7ff ff63 	bl	8004bdc <__NVIC_GetPriorityGrouping>
 8004d16:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004d18:	687a      	ldr	r2, [r7, #4]
 8004d1a:	68b9      	ldr	r1, [r7, #8]
 8004d1c:	6978      	ldr	r0, [r7, #20]
 8004d1e:	f7ff ffb3 	bl	8004c88 <NVIC_EncodePriority>
 8004d22:	4602      	mov	r2, r0
 8004d24:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d28:	4611      	mov	r1, r2
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	f7ff ff82 	bl	8004c34 <__NVIC_SetPriority>
}
 8004d30:	bf00      	nop
 8004d32:	3718      	adds	r7, #24
 8004d34:	46bd      	mov	sp, r7
 8004d36:	bd80      	pop	{r7, pc}

08004d38 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b082      	sub	sp, #8
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	4603      	mov	r3, r0
 8004d40:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004d42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d46:	4618      	mov	r0, r3
 8004d48:	f7ff ff56 	bl	8004bf8 <__NVIC_EnableIRQ>
}
 8004d4c:	bf00      	nop
 8004d4e:	3708      	adds	r7, #8
 8004d50:	46bd      	mov	sp, r7
 8004d52:	bd80      	pop	{r7, pc}

08004d54 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b084      	sub	sp, #16
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d101      	bne.n	8004d66 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004d62:	2301      	movs	r3, #1
 8004d64:	e08d      	b.n	8004e82 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	461a      	mov	r2, r3
 8004d6c:	4b47      	ldr	r3, [pc, #284]	@ (8004e8c <HAL_DMA_Init+0x138>)
 8004d6e:	429a      	cmp	r2, r3
 8004d70:	d80f      	bhi.n	8004d92 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	461a      	mov	r2, r3
 8004d78:	4b45      	ldr	r3, [pc, #276]	@ (8004e90 <HAL_DMA_Init+0x13c>)
 8004d7a:	4413      	add	r3, r2
 8004d7c:	4a45      	ldr	r2, [pc, #276]	@ (8004e94 <HAL_DMA_Init+0x140>)
 8004d7e:	fba2 2303 	umull	r2, r3, r2, r3
 8004d82:	091b      	lsrs	r3, r3, #4
 8004d84:	009a      	lsls	r2, r3, #2
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	4a42      	ldr	r2, [pc, #264]	@ (8004e98 <HAL_DMA_Init+0x144>)
 8004d8e:	641a      	str	r2, [r3, #64]	@ 0x40
 8004d90:	e00e      	b.n	8004db0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	461a      	mov	r2, r3
 8004d98:	4b40      	ldr	r3, [pc, #256]	@ (8004e9c <HAL_DMA_Init+0x148>)
 8004d9a:	4413      	add	r3, r2
 8004d9c:	4a3d      	ldr	r2, [pc, #244]	@ (8004e94 <HAL_DMA_Init+0x140>)
 8004d9e:	fba2 2303 	umull	r2, r3, r2, r3
 8004da2:	091b      	lsrs	r3, r3, #4
 8004da4:	009a      	lsls	r2, r3, #2
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	4a3c      	ldr	r2, [pc, #240]	@ (8004ea0 <HAL_DMA_Init+0x14c>)
 8004dae:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2202      	movs	r2, #2
 8004db4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8004dc6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004dca:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004dd4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	691b      	ldr	r3, [r3, #16]
 8004dda:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004de0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	699b      	ldr	r3, [r3, #24]
 8004de6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004dec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6a1b      	ldr	r3, [r3, #32]
 8004df2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004df4:	68fa      	ldr	r2, [r7, #12]
 8004df6:	4313      	orrs	r3, r2
 8004df8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	68fa      	ldr	r2, [r7, #12]
 8004e00:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004e02:	6878      	ldr	r0, [r7, #4]
 8004e04:	f000 fa82 	bl	800530c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	689b      	ldr	r3, [r3, #8]
 8004e0c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004e10:	d102      	bne.n	8004e18 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2200      	movs	r2, #0
 8004e16:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	685a      	ldr	r2, [r3, #4]
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e20:	b2d2      	uxtb	r2, r2
 8004e22:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004e28:	687a      	ldr	r2, [r7, #4]
 8004e2a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004e2c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	685b      	ldr	r3, [r3, #4]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d010      	beq.n	8004e58 <HAL_DMA_Init+0x104>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	685b      	ldr	r3, [r3, #4]
 8004e3a:	2b04      	cmp	r3, #4
 8004e3c:	d80c      	bhi.n	8004e58 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004e3e:	6878      	ldr	r0, [r7, #4]
 8004e40:	f000 faa2 	bl	8005388 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e48:	2200      	movs	r2, #0
 8004e4a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e50:	687a      	ldr	r2, [r7, #4]
 8004e52:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004e54:	605a      	str	r2, [r3, #4]
 8004e56:	e008      	b.n	8004e6a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2200      	movs	r2, #0
 8004e62:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2200      	movs	r2, #0
 8004e68:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2201      	movs	r2, #1
 8004e74:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004e80:	2300      	movs	r3, #0
}
 8004e82:	4618      	mov	r0, r3
 8004e84:	3710      	adds	r7, #16
 8004e86:	46bd      	mov	sp, r7
 8004e88:	bd80      	pop	{r7, pc}
 8004e8a:	bf00      	nop
 8004e8c:	40020407 	.word	0x40020407
 8004e90:	bffdfff8 	.word	0xbffdfff8
 8004e94:	cccccccd 	.word	0xcccccccd
 8004e98:	40020000 	.word	0x40020000
 8004e9c:	bffdfbf8 	.word	0xbffdfbf8
 8004ea0:	40020400 	.word	0x40020400

08004ea4 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b086      	sub	sp, #24
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	60f8      	str	r0, [r7, #12]
 8004eac:	60b9      	str	r1, [r7, #8]
 8004eae:	607a      	str	r2, [r7, #4]
 8004eb0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004ebc:	2b01      	cmp	r3, #1
 8004ebe:	d101      	bne.n	8004ec4 <HAL_DMA_Start_IT+0x20>
 8004ec0:	2302      	movs	r3, #2
 8004ec2:	e066      	b.n	8004f92 <HAL_DMA_Start_IT+0xee>
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	2201      	movs	r2, #1
 8004ec8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004ed2:	b2db      	uxtb	r3, r3
 8004ed4:	2b01      	cmp	r3, #1
 8004ed6:	d155      	bne.n	8004f84 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	2202      	movs	r2, #2
 8004edc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	681a      	ldr	r2, [r3, #0]
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f022 0201 	bic.w	r2, r2, #1
 8004ef4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	687a      	ldr	r2, [r7, #4]
 8004efa:	68b9      	ldr	r1, [r7, #8]
 8004efc:	68f8      	ldr	r0, [r7, #12]
 8004efe:	f000 f9c7 	bl	8005290 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d008      	beq.n	8004f1c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	681a      	ldr	r2, [r3, #0]
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f042 020e 	orr.w	r2, r2, #14
 8004f18:	601a      	str	r2, [r3, #0]
 8004f1a:	e00f      	b.n	8004f3c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	681a      	ldr	r2, [r3, #0]
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f022 0204 	bic.w	r2, r2, #4
 8004f2a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	681a      	ldr	r2, [r3, #0]
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f042 020a 	orr.w	r2, r2, #10
 8004f3a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d007      	beq.n	8004f5a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f4e:	681a      	ldr	r2, [r3, #0]
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f54:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004f58:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d007      	beq.n	8004f72 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f66:	681a      	ldr	r2, [r3, #0]
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f6c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004f70:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	681a      	ldr	r2, [r3, #0]
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f042 0201 	orr.w	r2, r2, #1
 8004f80:	601a      	str	r2, [r3, #0]
 8004f82:	e005      	b.n	8004f90 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	2200      	movs	r2, #0
 8004f88:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004f8c:	2302      	movs	r3, #2
 8004f8e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004f90:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f92:	4618      	mov	r0, r3
 8004f94:	3718      	adds	r7, #24
 8004f96:	46bd      	mov	sp, r7
 8004f98:	bd80      	pop	{r7, pc}

08004f9a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004f9a:	b480      	push	{r7}
 8004f9c:	b085      	sub	sp, #20
 8004f9e:	af00      	add	r7, sp, #0
 8004fa0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004fac:	b2db      	uxtb	r3, r3
 8004fae:	2b02      	cmp	r3, #2
 8004fb0:	d005      	beq.n	8004fbe <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2204      	movs	r2, #4
 8004fb6:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8004fb8:	2301      	movs	r3, #1
 8004fba:	73fb      	strb	r3, [r7, #15]
 8004fbc:	e037      	b.n	800502e <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	681a      	ldr	r2, [r3, #0]
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f022 020e 	bic.w	r2, r2, #14
 8004fcc:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004fd2:	681a      	ldr	r2, [r3, #0]
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004fd8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004fdc:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	681a      	ldr	r2, [r3, #0]
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f022 0201 	bic.w	r2, r2, #1
 8004fec:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ff2:	f003 021f 	and.w	r2, r3, #31
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ffa:	2101      	movs	r1, #1
 8004ffc:	fa01 f202 	lsl.w	r2, r1, r2
 8005000:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005006:	687a      	ldr	r2, [r7, #4]
 8005008:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800500a:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005010:	2b00      	cmp	r3, #0
 8005012:	d00c      	beq.n	800502e <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005018:	681a      	ldr	r2, [r3, #0]
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800501e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005022:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005028:	687a      	ldr	r2, [r7, #4]
 800502a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800502c:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2201      	movs	r2, #1
 8005032:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2200      	movs	r2, #0
 800503a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 800503e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005040:	4618      	mov	r0, r3
 8005042:	3714      	adds	r7, #20
 8005044:	46bd      	mov	sp, r7
 8005046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504a:	4770      	bx	lr

0800504c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b084      	sub	sp, #16
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005054:	2300      	movs	r3, #0
 8005056:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800505e:	b2db      	uxtb	r3, r3
 8005060:	2b02      	cmp	r3, #2
 8005062:	d00d      	beq.n	8005080 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2204      	movs	r2, #4
 8005068:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2201      	movs	r2, #1
 800506e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2200      	movs	r2, #0
 8005076:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 800507a:	2301      	movs	r3, #1
 800507c:	73fb      	strb	r3, [r7, #15]
 800507e:	e047      	b.n	8005110 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	681a      	ldr	r2, [r3, #0]
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f022 020e 	bic.w	r2, r2, #14
 800508e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	681a      	ldr	r2, [r3, #0]
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f022 0201 	bic.w	r2, r2, #1
 800509e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80050a4:	681a      	ldr	r2, [r3, #0]
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80050aa:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80050ae:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050b4:	f003 021f 	and.w	r2, r3, #31
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050bc:	2101      	movs	r1, #1
 80050be:	fa01 f202 	lsl.w	r2, r1, r2
 80050c2:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80050c8:	687a      	ldr	r2, [r7, #4]
 80050ca:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80050cc:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d00c      	beq.n	80050f0 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050da:	681a      	ldr	r2, [r3, #0]
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050e0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80050e4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050ea:	687a      	ldr	r2, [r7, #4]
 80050ec:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80050ee:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2201      	movs	r2, #1
 80050f4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2200      	movs	r2, #0
 80050fc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005104:	2b00      	cmp	r3, #0
 8005106:	d003      	beq.n	8005110 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800510c:	6878      	ldr	r0, [r7, #4]
 800510e:	4798      	blx	r3
    }
  }
  return status;
 8005110:	7bfb      	ldrb	r3, [r7, #15]
}
 8005112:	4618      	mov	r0, r3
 8005114:	3710      	adds	r7, #16
 8005116:	46bd      	mov	sp, r7
 8005118:	bd80      	pop	{r7, pc}

0800511a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800511a:	b580      	push	{r7, lr}
 800511c:	b084      	sub	sp, #16
 800511e:	af00      	add	r7, sp, #0
 8005120:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005136:	f003 031f 	and.w	r3, r3, #31
 800513a:	2204      	movs	r2, #4
 800513c:	409a      	lsls	r2, r3
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	4013      	ands	r3, r2
 8005142:	2b00      	cmp	r3, #0
 8005144:	d026      	beq.n	8005194 <HAL_DMA_IRQHandler+0x7a>
 8005146:	68bb      	ldr	r3, [r7, #8]
 8005148:	f003 0304 	and.w	r3, r3, #4
 800514c:	2b00      	cmp	r3, #0
 800514e:	d021      	beq.n	8005194 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f003 0320 	and.w	r3, r3, #32
 800515a:	2b00      	cmp	r3, #0
 800515c:	d107      	bne.n	800516e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	681a      	ldr	r2, [r3, #0]
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f022 0204 	bic.w	r2, r2, #4
 800516c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005172:	f003 021f 	and.w	r2, r3, #31
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800517a:	2104      	movs	r1, #4
 800517c:	fa01 f202 	lsl.w	r2, r1, r2
 8005180:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005186:	2b00      	cmp	r3, #0
 8005188:	d071      	beq.n	800526e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800518e:	6878      	ldr	r0, [r7, #4]
 8005190:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8005192:	e06c      	b.n	800526e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005198:	f003 031f 	and.w	r3, r3, #31
 800519c:	2202      	movs	r2, #2
 800519e:	409a      	lsls	r2, r3
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	4013      	ands	r3, r2
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d02e      	beq.n	8005206 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80051a8:	68bb      	ldr	r3, [r7, #8]
 80051aa:	f003 0302 	and.w	r3, r3, #2
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d029      	beq.n	8005206 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f003 0320 	and.w	r3, r3, #32
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d10b      	bne.n	80051d8 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	681a      	ldr	r2, [r3, #0]
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f022 020a 	bic.w	r2, r2, #10
 80051ce:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2201      	movs	r2, #1
 80051d4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051dc:	f003 021f 	and.w	r2, r3, #31
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051e4:	2102      	movs	r1, #2
 80051e6:	fa01 f202 	lsl.w	r2, r1, r2
 80051ea:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2200      	movs	r2, #0
 80051f0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d038      	beq.n	800526e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005200:	6878      	ldr	r0, [r7, #4]
 8005202:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8005204:	e033      	b.n	800526e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800520a:	f003 031f 	and.w	r3, r3, #31
 800520e:	2208      	movs	r2, #8
 8005210:	409a      	lsls	r2, r3
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	4013      	ands	r3, r2
 8005216:	2b00      	cmp	r3, #0
 8005218:	d02a      	beq.n	8005270 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800521a:	68bb      	ldr	r3, [r7, #8]
 800521c:	f003 0308 	and.w	r3, r3, #8
 8005220:	2b00      	cmp	r3, #0
 8005222:	d025      	beq.n	8005270 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	681a      	ldr	r2, [r3, #0]
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f022 020e 	bic.w	r2, r2, #14
 8005232:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005238:	f003 021f 	and.w	r2, r3, #31
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005240:	2101      	movs	r1, #1
 8005242:	fa01 f202 	lsl.w	r2, r1, r2
 8005246:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2201      	movs	r2, #1
 800524c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2201      	movs	r2, #1
 8005252:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2200      	movs	r2, #0
 800525a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005262:	2b00      	cmp	r3, #0
 8005264:	d004      	beq.n	8005270 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800526a:	6878      	ldr	r0, [r7, #4]
 800526c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800526e:	bf00      	nop
 8005270:	bf00      	nop
}
 8005272:	3710      	adds	r7, #16
 8005274:	46bd      	mov	sp, r7
 8005276:	bd80      	pop	{r7, pc}

08005278 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8005278:	b480      	push	{r7}
 800527a:	b083      	sub	sp, #12
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 8005284:	4618      	mov	r0, r3
 8005286:	370c      	adds	r7, #12
 8005288:	46bd      	mov	sp, r7
 800528a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528e:	4770      	bx	lr

08005290 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005290:	b480      	push	{r7}
 8005292:	b085      	sub	sp, #20
 8005294:	af00      	add	r7, sp, #0
 8005296:	60f8      	str	r0, [r7, #12]
 8005298:	60b9      	str	r1, [r7, #8]
 800529a:	607a      	str	r2, [r7, #4]
 800529c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80052a2:	68fa      	ldr	r2, [r7, #12]
 80052a4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80052a6:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d004      	beq.n	80052ba <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052b4:	68fa      	ldr	r2, [r7, #12]
 80052b6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80052b8:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052be:	f003 021f 	and.w	r2, r3, #31
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052c6:	2101      	movs	r1, #1
 80052c8:	fa01 f202 	lsl.w	r2, r1, r2
 80052cc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	683a      	ldr	r2, [r7, #0]
 80052d4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	689b      	ldr	r3, [r3, #8]
 80052da:	2b10      	cmp	r3, #16
 80052dc:	d108      	bne.n	80052f0 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	687a      	ldr	r2, [r7, #4]
 80052e4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	68ba      	ldr	r2, [r7, #8]
 80052ec:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80052ee:	e007      	b.n	8005300 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	68ba      	ldr	r2, [r7, #8]
 80052f6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	687a      	ldr	r2, [r7, #4]
 80052fe:	60da      	str	r2, [r3, #12]
}
 8005300:	bf00      	nop
 8005302:	3714      	adds	r7, #20
 8005304:	46bd      	mov	sp, r7
 8005306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530a:	4770      	bx	lr

0800530c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800530c:	b480      	push	{r7}
 800530e:	b087      	sub	sp, #28
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	461a      	mov	r2, r3
 800531a:	4b16      	ldr	r3, [pc, #88]	@ (8005374 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 800531c:	429a      	cmp	r2, r3
 800531e:	d802      	bhi.n	8005326 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8005320:	4b15      	ldr	r3, [pc, #84]	@ (8005378 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8005322:	617b      	str	r3, [r7, #20]
 8005324:	e001      	b.n	800532a <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8005326:	4b15      	ldr	r3, [pc, #84]	@ (800537c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8005328:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800532a:	697b      	ldr	r3, [r7, #20]
 800532c:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	b2db      	uxtb	r3, r3
 8005334:	3b08      	subs	r3, #8
 8005336:	4a12      	ldr	r2, [pc, #72]	@ (8005380 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8005338:	fba2 2303 	umull	r2, r3, r2, r3
 800533c:	091b      	lsrs	r3, r3, #4
 800533e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005344:	089b      	lsrs	r3, r3, #2
 8005346:	009a      	lsls	r2, r3, #2
 8005348:	693b      	ldr	r3, [r7, #16]
 800534a:	4413      	add	r3, r2
 800534c:	461a      	mov	r2, r3
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	4a0b      	ldr	r2, [pc, #44]	@ (8005384 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8005356:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	f003 031f 	and.w	r3, r3, #31
 800535e:	2201      	movs	r2, #1
 8005360:	409a      	lsls	r2, r3
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8005366:	bf00      	nop
 8005368:	371c      	adds	r7, #28
 800536a:	46bd      	mov	sp, r7
 800536c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005370:	4770      	bx	lr
 8005372:	bf00      	nop
 8005374:	40020407 	.word	0x40020407
 8005378:	40020800 	.word	0x40020800
 800537c:	40020820 	.word	0x40020820
 8005380:	cccccccd 	.word	0xcccccccd
 8005384:	40020880 	.word	0x40020880

08005388 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005388:	b480      	push	{r7}
 800538a:	b085      	sub	sp, #20
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	685b      	ldr	r3, [r3, #4]
 8005394:	b2db      	uxtb	r3, r3
 8005396:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005398:	68fa      	ldr	r2, [r7, #12]
 800539a:	4b0b      	ldr	r3, [pc, #44]	@ (80053c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800539c:	4413      	add	r3, r2
 800539e:	009b      	lsls	r3, r3, #2
 80053a0:	461a      	mov	r2, r3
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	4a08      	ldr	r2, [pc, #32]	@ (80053cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80053aa:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	3b01      	subs	r3, #1
 80053b0:	f003 031f 	and.w	r3, r3, #31
 80053b4:	2201      	movs	r2, #1
 80053b6:	409a      	lsls	r2, r3
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80053bc:	bf00      	nop
 80053be:	3714      	adds	r7, #20
 80053c0:	46bd      	mov	sp, r7
 80053c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c6:	4770      	bx	lr
 80053c8:	1000823f 	.word	0x1000823f
 80053cc:	40020940 	.word	0x40020940

080053d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80053d0:	b480      	push	{r7}
 80053d2:	b087      	sub	sp, #28
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
 80053d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80053da:	2300      	movs	r3, #0
 80053dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80053de:	e15a      	b.n	8005696 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	681a      	ldr	r2, [r3, #0]
 80053e4:	2101      	movs	r1, #1
 80053e6:	697b      	ldr	r3, [r7, #20]
 80053e8:	fa01 f303 	lsl.w	r3, r1, r3
 80053ec:	4013      	ands	r3, r2
 80053ee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	f000 814c 	beq.w	8005690 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	685b      	ldr	r3, [r3, #4]
 80053fc:	f003 0303 	and.w	r3, r3, #3
 8005400:	2b01      	cmp	r3, #1
 8005402:	d005      	beq.n	8005410 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	685b      	ldr	r3, [r3, #4]
 8005408:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800540c:	2b02      	cmp	r3, #2
 800540e:	d130      	bne.n	8005472 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	689b      	ldr	r3, [r3, #8]
 8005414:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005416:	697b      	ldr	r3, [r7, #20]
 8005418:	005b      	lsls	r3, r3, #1
 800541a:	2203      	movs	r2, #3
 800541c:	fa02 f303 	lsl.w	r3, r2, r3
 8005420:	43db      	mvns	r3, r3
 8005422:	693a      	ldr	r2, [r7, #16]
 8005424:	4013      	ands	r3, r2
 8005426:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	68da      	ldr	r2, [r3, #12]
 800542c:	697b      	ldr	r3, [r7, #20]
 800542e:	005b      	lsls	r3, r3, #1
 8005430:	fa02 f303 	lsl.w	r3, r2, r3
 8005434:	693a      	ldr	r2, [r7, #16]
 8005436:	4313      	orrs	r3, r2
 8005438:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	693a      	ldr	r2, [r7, #16]
 800543e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	685b      	ldr	r3, [r3, #4]
 8005444:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005446:	2201      	movs	r2, #1
 8005448:	697b      	ldr	r3, [r7, #20]
 800544a:	fa02 f303 	lsl.w	r3, r2, r3
 800544e:	43db      	mvns	r3, r3
 8005450:	693a      	ldr	r2, [r7, #16]
 8005452:	4013      	ands	r3, r2
 8005454:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	685b      	ldr	r3, [r3, #4]
 800545a:	091b      	lsrs	r3, r3, #4
 800545c:	f003 0201 	and.w	r2, r3, #1
 8005460:	697b      	ldr	r3, [r7, #20]
 8005462:	fa02 f303 	lsl.w	r3, r2, r3
 8005466:	693a      	ldr	r2, [r7, #16]
 8005468:	4313      	orrs	r3, r2
 800546a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	693a      	ldr	r2, [r7, #16]
 8005470:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	685b      	ldr	r3, [r3, #4]
 8005476:	f003 0303 	and.w	r3, r3, #3
 800547a:	2b03      	cmp	r3, #3
 800547c:	d017      	beq.n	80054ae <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	68db      	ldr	r3, [r3, #12]
 8005482:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005484:	697b      	ldr	r3, [r7, #20]
 8005486:	005b      	lsls	r3, r3, #1
 8005488:	2203      	movs	r2, #3
 800548a:	fa02 f303 	lsl.w	r3, r2, r3
 800548e:	43db      	mvns	r3, r3
 8005490:	693a      	ldr	r2, [r7, #16]
 8005492:	4013      	ands	r3, r2
 8005494:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	689a      	ldr	r2, [r3, #8]
 800549a:	697b      	ldr	r3, [r7, #20]
 800549c:	005b      	lsls	r3, r3, #1
 800549e:	fa02 f303 	lsl.w	r3, r2, r3
 80054a2:	693a      	ldr	r2, [r7, #16]
 80054a4:	4313      	orrs	r3, r2
 80054a6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	693a      	ldr	r2, [r7, #16]
 80054ac:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	685b      	ldr	r3, [r3, #4]
 80054b2:	f003 0303 	and.w	r3, r3, #3
 80054b6:	2b02      	cmp	r3, #2
 80054b8:	d123      	bne.n	8005502 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80054ba:	697b      	ldr	r3, [r7, #20]
 80054bc:	08da      	lsrs	r2, r3, #3
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	3208      	adds	r2, #8
 80054c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054c6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80054c8:	697b      	ldr	r3, [r7, #20]
 80054ca:	f003 0307 	and.w	r3, r3, #7
 80054ce:	009b      	lsls	r3, r3, #2
 80054d0:	220f      	movs	r2, #15
 80054d2:	fa02 f303 	lsl.w	r3, r2, r3
 80054d6:	43db      	mvns	r3, r3
 80054d8:	693a      	ldr	r2, [r7, #16]
 80054da:	4013      	ands	r3, r2
 80054dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	691a      	ldr	r2, [r3, #16]
 80054e2:	697b      	ldr	r3, [r7, #20]
 80054e4:	f003 0307 	and.w	r3, r3, #7
 80054e8:	009b      	lsls	r3, r3, #2
 80054ea:	fa02 f303 	lsl.w	r3, r2, r3
 80054ee:	693a      	ldr	r2, [r7, #16]
 80054f0:	4313      	orrs	r3, r2
 80054f2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80054f4:	697b      	ldr	r3, [r7, #20]
 80054f6:	08da      	lsrs	r2, r3, #3
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	3208      	adds	r2, #8
 80054fc:	6939      	ldr	r1, [r7, #16]
 80054fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005508:	697b      	ldr	r3, [r7, #20]
 800550a:	005b      	lsls	r3, r3, #1
 800550c:	2203      	movs	r2, #3
 800550e:	fa02 f303 	lsl.w	r3, r2, r3
 8005512:	43db      	mvns	r3, r3
 8005514:	693a      	ldr	r2, [r7, #16]
 8005516:	4013      	ands	r3, r2
 8005518:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	685b      	ldr	r3, [r3, #4]
 800551e:	f003 0203 	and.w	r2, r3, #3
 8005522:	697b      	ldr	r3, [r7, #20]
 8005524:	005b      	lsls	r3, r3, #1
 8005526:	fa02 f303 	lsl.w	r3, r2, r3
 800552a:	693a      	ldr	r2, [r7, #16]
 800552c:	4313      	orrs	r3, r2
 800552e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	693a      	ldr	r2, [r7, #16]
 8005534:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	685b      	ldr	r3, [r3, #4]
 800553a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800553e:	2b00      	cmp	r3, #0
 8005540:	f000 80a6 	beq.w	8005690 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005544:	4b5b      	ldr	r3, [pc, #364]	@ (80056b4 <HAL_GPIO_Init+0x2e4>)
 8005546:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005548:	4a5a      	ldr	r2, [pc, #360]	@ (80056b4 <HAL_GPIO_Init+0x2e4>)
 800554a:	f043 0301 	orr.w	r3, r3, #1
 800554e:	6613      	str	r3, [r2, #96]	@ 0x60
 8005550:	4b58      	ldr	r3, [pc, #352]	@ (80056b4 <HAL_GPIO_Init+0x2e4>)
 8005552:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005554:	f003 0301 	and.w	r3, r3, #1
 8005558:	60bb      	str	r3, [r7, #8]
 800555a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800555c:	4a56      	ldr	r2, [pc, #344]	@ (80056b8 <HAL_GPIO_Init+0x2e8>)
 800555e:	697b      	ldr	r3, [r7, #20]
 8005560:	089b      	lsrs	r3, r3, #2
 8005562:	3302      	adds	r3, #2
 8005564:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005568:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800556a:	697b      	ldr	r3, [r7, #20]
 800556c:	f003 0303 	and.w	r3, r3, #3
 8005570:	009b      	lsls	r3, r3, #2
 8005572:	220f      	movs	r2, #15
 8005574:	fa02 f303 	lsl.w	r3, r2, r3
 8005578:	43db      	mvns	r3, r3
 800557a:	693a      	ldr	r2, [r7, #16]
 800557c:	4013      	ands	r3, r2
 800557e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8005586:	d01f      	beq.n	80055c8 <HAL_GPIO_Init+0x1f8>
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	4a4c      	ldr	r2, [pc, #304]	@ (80056bc <HAL_GPIO_Init+0x2ec>)
 800558c:	4293      	cmp	r3, r2
 800558e:	d019      	beq.n	80055c4 <HAL_GPIO_Init+0x1f4>
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	4a4b      	ldr	r2, [pc, #300]	@ (80056c0 <HAL_GPIO_Init+0x2f0>)
 8005594:	4293      	cmp	r3, r2
 8005596:	d013      	beq.n	80055c0 <HAL_GPIO_Init+0x1f0>
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	4a4a      	ldr	r2, [pc, #296]	@ (80056c4 <HAL_GPIO_Init+0x2f4>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d00d      	beq.n	80055bc <HAL_GPIO_Init+0x1ec>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	4a49      	ldr	r2, [pc, #292]	@ (80056c8 <HAL_GPIO_Init+0x2f8>)
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d007      	beq.n	80055b8 <HAL_GPIO_Init+0x1e8>
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	4a48      	ldr	r2, [pc, #288]	@ (80056cc <HAL_GPIO_Init+0x2fc>)
 80055ac:	4293      	cmp	r3, r2
 80055ae:	d101      	bne.n	80055b4 <HAL_GPIO_Init+0x1e4>
 80055b0:	2305      	movs	r3, #5
 80055b2:	e00a      	b.n	80055ca <HAL_GPIO_Init+0x1fa>
 80055b4:	2306      	movs	r3, #6
 80055b6:	e008      	b.n	80055ca <HAL_GPIO_Init+0x1fa>
 80055b8:	2304      	movs	r3, #4
 80055ba:	e006      	b.n	80055ca <HAL_GPIO_Init+0x1fa>
 80055bc:	2303      	movs	r3, #3
 80055be:	e004      	b.n	80055ca <HAL_GPIO_Init+0x1fa>
 80055c0:	2302      	movs	r3, #2
 80055c2:	e002      	b.n	80055ca <HAL_GPIO_Init+0x1fa>
 80055c4:	2301      	movs	r3, #1
 80055c6:	e000      	b.n	80055ca <HAL_GPIO_Init+0x1fa>
 80055c8:	2300      	movs	r3, #0
 80055ca:	697a      	ldr	r2, [r7, #20]
 80055cc:	f002 0203 	and.w	r2, r2, #3
 80055d0:	0092      	lsls	r2, r2, #2
 80055d2:	4093      	lsls	r3, r2
 80055d4:	693a      	ldr	r2, [r7, #16]
 80055d6:	4313      	orrs	r3, r2
 80055d8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80055da:	4937      	ldr	r1, [pc, #220]	@ (80056b8 <HAL_GPIO_Init+0x2e8>)
 80055dc:	697b      	ldr	r3, [r7, #20]
 80055de:	089b      	lsrs	r3, r3, #2
 80055e0:	3302      	adds	r3, #2
 80055e2:	693a      	ldr	r2, [r7, #16]
 80055e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80055e8:	4b39      	ldr	r3, [pc, #228]	@ (80056d0 <HAL_GPIO_Init+0x300>)
 80055ea:	689b      	ldr	r3, [r3, #8]
 80055ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	43db      	mvns	r3, r3
 80055f2:	693a      	ldr	r2, [r7, #16]
 80055f4:	4013      	ands	r3, r2
 80055f6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	685b      	ldr	r3, [r3, #4]
 80055fc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005600:	2b00      	cmp	r3, #0
 8005602:	d003      	beq.n	800560c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8005604:	693a      	ldr	r2, [r7, #16]
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	4313      	orrs	r3, r2
 800560a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800560c:	4a30      	ldr	r2, [pc, #192]	@ (80056d0 <HAL_GPIO_Init+0x300>)
 800560e:	693b      	ldr	r3, [r7, #16]
 8005610:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005612:	4b2f      	ldr	r3, [pc, #188]	@ (80056d0 <HAL_GPIO_Init+0x300>)
 8005614:	68db      	ldr	r3, [r3, #12]
 8005616:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	43db      	mvns	r3, r3
 800561c:	693a      	ldr	r2, [r7, #16]
 800561e:	4013      	ands	r3, r2
 8005620:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	685b      	ldr	r3, [r3, #4]
 8005626:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800562a:	2b00      	cmp	r3, #0
 800562c:	d003      	beq.n	8005636 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800562e:	693a      	ldr	r2, [r7, #16]
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	4313      	orrs	r3, r2
 8005634:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005636:	4a26      	ldr	r2, [pc, #152]	@ (80056d0 <HAL_GPIO_Init+0x300>)
 8005638:	693b      	ldr	r3, [r7, #16]
 800563a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800563c:	4b24      	ldr	r3, [pc, #144]	@ (80056d0 <HAL_GPIO_Init+0x300>)
 800563e:	685b      	ldr	r3, [r3, #4]
 8005640:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	43db      	mvns	r3, r3
 8005646:	693a      	ldr	r2, [r7, #16]
 8005648:	4013      	ands	r3, r2
 800564a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	685b      	ldr	r3, [r3, #4]
 8005650:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005654:	2b00      	cmp	r3, #0
 8005656:	d003      	beq.n	8005660 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8005658:	693a      	ldr	r2, [r7, #16]
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	4313      	orrs	r3, r2
 800565e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005660:	4a1b      	ldr	r2, [pc, #108]	@ (80056d0 <HAL_GPIO_Init+0x300>)
 8005662:	693b      	ldr	r3, [r7, #16]
 8005664:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005666:	4b1a      	ldr	r3, [pc, #104]	@ (80056d0 <HAL_GPIO_Init+0x300>)
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	43db      	mvns	r3, r3
 8005670:	693a      	ldr	r2, [r7, #16]
 8005672:	4013      	ands	r3, r2
 8005674:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	685b      	ldr	r3, [r3, #4]
 800567a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800567e:	2b00      	cmp	r3, #0
 8005680:	d003      	beq.n	800568a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8005682:	693a      	ldr	r2, [r7, #16]
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	4313      	orrs	r3, r2
 8005688:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800568a:	4a11      	ldr	r2, [pc, #68]	@ (80056d0 <HAL_GPIO_Init+0x300>)
 800568c:	693b      	ldr	r3, [r7, #16]
 800568e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005690:	697b      	ldr	r3, [r7, #20]
 8005692:	3301      	adds	r3, #1
 8005694:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	681a      	ldr	r2, [r3, #0]
 800569a:	697b      	ldr	r3, [r7, #20]
 800569c:	fa22 f303 	lsr.w	r3, r2, r3
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	f47f ae9d 	bne.w	80053e0 <HAL_GPIO_Init+0x10>
  }
}
 80056a6:	bf00      	nop
 80056a8:	bf00      	nop
 80056aa:	371c      	adds	r7, #28
 80056ac:	46bd      	mov	sp, r7
 80056ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b2:	4770      	bx	lr
 80056b4:	40021000 	.word	0x40021000
 80056b8:	40010000 	.word	0x40010000
 80056bc:	48000400 	.word	0x48000400
 80056c0:	48000800 	.word	0x48000800
 80056c4:	48000c00 	.word	0x48000c00
 80056c8:	48001000 	.word	0x48001000
 80056cc:	48001400 	.word	0x48001400
 80056d0:	40010400 	.word	0x40010400

080056d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80056d4:	b480      	push	{r7}
 80056d6:	b083      	sub	sp, #12
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
 80056dc:	460b      	mov	r3, r1
 80056de:	807b      	strh	r3, [r7, #2]
 80056e0:	4613      	mov	r3, r2
 80056e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80056e4:	787b      	ldrb	r3, [r7, #1]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d003      	beq.n	80056f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80056ea:	887a      	ldrh	r2, [r7, #2]
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80056f0:	e002      	b.n	80056f8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80056f2:	887a      	ldrh	r2, [r7, #2]
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80056f8:	bf00      	nop
 80056fa:	370c      	adds	r7, #12
 80056fc:	46bd      	mov	sp, r7
 80056fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005702:	4770      	bx	lr

08005704 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005704:	b480      	push	{r7}
 8005706:	b085      	sub	sp, #20
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
 800570c:	460b      	mov	r3, r1
 800570e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	695b      	ldr	r3, [r3, #20]
 8005714:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005716:	887a      	ldrh	r2, [r7, #2]
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	4013      	ands	r3, r2
 800571c:	041a      	lsls	r2, r3, #16
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	43d9      	mvns	r1, r3
 8005722:	887b      	ldrh	r3, [r7, #2]
 8005724:	400b      	ands	r3, r1
 8005726:	431a      	orrs	r2, r3
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	619a      	str	r2, [r3, #24]
}
 800572c:	bf00      	nop
 800572e:	3714      	adds	r7, #20
 8005730:	46bd      	mov	sp, r7
 8005732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005736:	4770      	bx	lr

08005738 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b082      	sub	sp, #8
 800573c:	af00      	add	r7, sp, #0
 800573e:	4603      	mov	r3, r0
 8005740:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005742:	4b08      	ldr	r3, [pc, #32]	@ (8005764 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005744:	695a      	ldr	r2, [r3, #20]
 8005746:	88fb      	ldrh	r3, [r7, #6]
 8005748:	4013      	ands	r3, r2
 800574a:	2b00      	cmp	r3, #0
 800574c:	d006      	beq.n	800575c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800574e:	4a05      	ldr	r2, [pc, #20]	@ (8005764 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005750:	88fb      	ldrh	r3, [r7, #6]
 8005752:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005754:	88fb      	ldrh	r3, [r7, #6]
 8005756:	4618      	mov	r0, r3
 8005758:	f000 f806 	bl	8005768 <HAL_GPIO_EXTI_Callback>
  }
}
 800575c:	bf00      	nop
 800575e:	3708      	adds	r7, #8
 8005760:	46bd      	mov	sp, r7
 8005762:	bd80      	pop	{r7, pc}
 8005764:	40010400 	.word	0x40010400

08005768 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005768:	b480      	push	{r7}
 800576a:	b083      	sub	sp, #12
 800576c:	af00      	add	r7, sp, #0
 800576e:	4603      	mov	r3, r0
 8005770:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8005772:	bf00      	nop
 8005774:	370c      	adds	r7, #12
 8005776:	46bd      	mov	sp, r7
 8005778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577c:	4770      	bx	lr

0800577e <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 800577e:	b580      	push	{r7, lr}
 8005780:	b084      	sub	sp, #16
 8005782:	af00      	add	r7, sp, #0
 8005784:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d101      	bne.n	8005790 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 800578c:	2301      	movs	r3, #1
 800578e:	e041      	b.n	8005814 <HAL_IWDG_Init+0x96>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f64c 42cc 	movw	r2, #52428	@ 0xcccc
 8005798:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f245 5255 	movw	r2, #21845	@ 0x5555
 80057a2:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	687a      	ldr	r2, [r7, #4]
 80057aa:	6852      	ldr	r2, [r2, #4]
 80057ac:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	687a      	ldr	r2, [r7, #4]
 80057b4:	6892      	ldr	r2, [r2, #8]
 80057b6:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 80057b8:	f7ff f9e0 	bl	8004b7c <HAL_GetTick>
 80057bc:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80057be:	e00f      	b.n	80057e0 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 80057c0:	f7ff f9dc 	bl	8004b7c <HAL_GetTick>
 80057c4:	4602      	mov	r2, r0
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	1ad3      	subs	r3, r2, r3
 80057ca:	2b31      	cmp	r3, #49	@ 0x31
 80057cc:	d908      	bls.n	80057e0 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	68db      	ldr	r3, [r3, #12]
 80057d4:	f003 0307 	and.w	r3, r3, #7
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d001      	beq.n	80057e0 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 80057dc:	2303      	movs	r3, #3
 80057de:	e019      	b.n	8005814 <HAL_IWDG_Init+0x96>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	68db      	ldr	r3, [r3, #12]
 80057e6:	f003 0307 	and.w	r3, r3, #7
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d1e8      	bne.n	80057c0 <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	691a      	ldr	r2, [r3, #16]
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	68db      	ldr	r3, [r3, #12]
 80057f8:	429a      	cmp	r2, r3
 80057fa:	d005      	beq.n	8005808 <HAL_IWDG_Init+0x8a>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	687a      	ldr	r2, [r7, #4]
 8005802:	68d2      	ldr	r2, [r2, #12]
 8005804:	611a      	str	r2, [r3, #16]
 8005806:	e004      	b.n	8005812 <HAL_IWDG_Init+0x94>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 8005810:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005812:	2300      	movs	r3, #0
}
 8005814:	4618      	mov	r0, r3
 8005816:	3710      	adds	r7, #16
 8005818:	46bd      	mov	sp, r7
 800581a:	bd80      	pop	{r7, pc}

0800581c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800581c:	b480      	push	{r7}
 800581e:	b085      	sub	sp, #20
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d141      	bne.n	80058ae <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800582a:	4b4b      	ldr	r3, [pc, #300]	@ (8005958 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005832:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005836:	d131      	bne.n	800589c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005838:	4b47      	ldr	r3, [pc, #284]	@ (8005958 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800583a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800583e:	4a46      	ldr	r2, [pc, #280]	@ (8005958 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005840:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005844:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005848:	4b43      	ldr	r3, [pc, #268]	@ (8005958 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005850:	4a41      	ldr	r2, [pc, #260]	@ (8005958 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005852:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005856:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005858:	4b40      	ldr	r3, [pc, #256]	@ (800595c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	2232      	movs	r2, #50	@ 0x32
 800585e:	fb02 f303 	mul.w	r3, r2, r3
 8005862:	4a3f      	ldr	r2, [pc, #252]	@ (8005960 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005864:	fba2 2303 	umull	r2, r3, r2, r3
 8005868:	0c9b      	lsrs	r3, r3, #18
 800586a:	3301      	adds	r3, #1
 800586c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800586e:	e002      	b.n	8005876 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	3b01      	subs	r3, #1
 8005874:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005876:	4b38      	ldr	r3, [pc, #224]	@ (8005958 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005878:	695b      	ldr	r3, [r3, #20]
 800587a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800587e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005882:	d102      	bne.n	800588a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d1f2      	bne.n	8005870 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800588a:	4b33      	ldr	r3, [pc, #204]	@ (8005958 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800588c:	695b      	ldr	r3, [r3, #20]
 800588e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005892:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005896:	d158      	bne.n	800594a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005898:	2303      	movs	r3, #3
 800589a:	e057      	b.n	800594c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800589c:	4b2e      	ldr	r3, [pc, #184]	@ (8005958 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800589e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80058a2:	4a2d      	ldr	r2, [pc, #180]	@ (8005958 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80058a4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80058a8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80058ac:	e04d      	b.n	800594a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80058b4:	d141      	bne.n	800593a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80058b6:	4b28      	ldr	r3, [pc, #160]	@ (8005958 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80058be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80058c2:	d131      	bne.n	8005928 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80058c4:	4b24      	ldr	r3, [pc, #144]	@ (8005958 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80058c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80058ca:	4a23      	ldr	r2, [pc, #140]	@ (8005958 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80058cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80058d0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80058d4:	4b20      	ldr	r3, [pc, #128]	@ (8005958 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80058dc:	4a1e      	ldr	r2, [pc, #120]	@ (8005958 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80058de:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80058e2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80058e4:	4b1d      	ldr	r3, [pc, #116]	@ (800595c <HAL_PWREx_ControlVoltageScaling+0x140>)
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	2232      	movs	r2, #50	@ 0x32
 80058ea:	fb02 f303 	mul.w	r3, r2, r3
 80058ee:	4a1c      	ldr	r2, [pc, #112]	@ (8005960 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80058f0:	fba2 2303 	umull	r2, r3, r2, r3
 80058f4:	0c9b      	lsrs	r3, r3, #18
 80058f6:	3301      	adds	r3, #1
 80058f8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80058fa:	e002      	b.n	8005902 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	3b01      	subs	r3, #1
 8005900:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005902:	4b15      	ldr	r3, [pc, #84]	@ (8005958 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005904:	695b      	ldr	r3, [r3, #20]
 8005906:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800590a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800590e:	d102      	bne.n	8005916 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d1f2      	bne.n	80058fc <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005916:	4b10      	ldr	r3, [pc, #64]	@ (8005958 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005918:	695b      	ldr	r3, [r3, #20]
 800591a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800591e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005922:	d112      	bne.n	800594a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005924:	2303      	movs	r3, #3
 8005926:	e011      	b.n	800594c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005928:	4b0b      	ldr	r3, [pc, #44]	@ (8005958 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800592a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800592e:	4a0a      	ldr	r2, [pc, #40]	@ (8005958 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005930:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005934:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005938:	e007      	b.n	800594a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800593a:	4b07      	ldr	r3, [pc, #28]	@ (8005958 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005942:	4a05      	ldr	r2, [pc, #20]	@ (8005958 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005944:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005948:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800594a:	2300      	movs	r3, #0
}
 800594c:	4618      	mov	r0, r3
 800594e:	3714      	adds	r7, #20
 8005950:	46bd      	mov	sp, r7
 8005952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005956:	4770      	bx	lr
 8005958:	40007000 	.word	0x40007000
 800595c:	20000004 	.word	0x20000004
 8005960:	431bde83 	.word	0x431bde83

08005964 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8005964:	b480      	push	{r7}
 8005966:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8005968:	4b05      	ldr	r3, [pc, #20]	@ (8005980 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800596a:	689b      	ldr	r3, [r3, #8]
 800596c:	4a04      	ldr	r2, [pc, #16]	@ (8005980 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800596e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005972:	6093      	str	r3, [r2, #8]
}
 8005974:	bf00      	nop
 8005976:	46bd      	mov	sp, r7
 8005978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597c:	4770      	bx	lr
 800597e:	bf00      	nop
 8005980:	40007000 	.word	0x40007000

08005984 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005984:	b580      	push	{r7, lr}
 8005986:	b088      	sub	sp, #32
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d101      	bne.n	8005996 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005992:	2301      	movs	r3, #1
 8005994:	e2fe      	b.n	8005f94 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f003 0301 	and.w	r3, r3, #1
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d075      	beq.n	8005a8e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80059a2:	4b97      	ldr	r3, [pc, #604]	@ (8005c00 <HAL_RCC_OscConfig+0x27c>)
 80059a4:	689b      	ldr	r3, [r3, #8]
 80059a6:	f003 030c 	and.w	r3, r3, #12
 80059aa:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80059ac:	4b94      	ldr	r3, [pc, #592]	@ (8005c00 <HAL_RCC_OscConfig+0x27c>)
 80059ae:	68db      	ldr	r3, [r3, #12]
 80059b0:	f003 0303 	and.w	r3, r3, #3
 80059b4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80059b6:	69bb      	ldr	r3, [r7, #24]
 80059b8:	2b0c      	cmp	r3, #12
 80059ba:	d102      	bne.n	80059c2 <HAL_RCC_OscConfig+0x3e>
 80059bc:	697b      	ldr	r3, [r7, #20]
 80059be:	2b03      	cmp	r3, #3
 80059c0:	d002      	beq.n	80059c8 <HAL_RCC_OscConfig+0x44>
 80059c2:	69bb      	ldr	r3, [r7, #24]
 80059c4:	2b08      	cmp	r3, #8
 80059c6:	d10b      	bne.n	80059e0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80059c8:	4b8d      	ldr	r3, [pc, #564]	@ (8005c00 <HAL_RCC_OscConfig+0x27c>)
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d05b      	beq.n	8005a8c <HAL_RCC_OscConfig+0x108>
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	685b      	ldr	r3, [r3, #4]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d157      	bne.n	8005a8c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80059dc:	2301      	movs	r3, #1
 80059de:	e2d9      	b.n	8005f94 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	685b      	ldr	r3, [r3, #4]
 80059e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80059e8:	d106      	bne.n	80059f8 <HAL_RCC_OscConfig+0x74>
 80059ea:	4b85      	ldr	r3, [pc, #532]	@ (8005c00 <HAL_RCC_OscConfig+0x27c>)
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	4a84      	ldr	r2, [pc, #528]	@ (8005c00 <HAL_RCC_OscConfig+0x27c>)
 80059f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80059f4:	6013      	str	r3, [r2, #0]
 80059f6:	e01d      	b.n	8005a34 <HAL_RCC_OscConfig+0xb0>
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	685b      	ldr	r3, [r3, #4]
 80059fc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005a00:	d10c      	bne.n	8005a1c <HAL_RCC_OscConfig+0x98>
 8005a02:	4b7f      	ldr	r3, [pc, #508]	@ (8005c00 <HAL_RCC_OscConfig+0x27c>)
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	4a7e      	ldr	r2, [pc, #504]	@ (8005c00 <HAL_RCC_OscConfig+0x27c>)
 8005a08:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005a0c:	6013      	str	r3, [r2, #0]
 8005a0e:	4b7c      	ldr	r3, [pc, #496]	@ (8005c00 <HAL_RCC_OscConfig+0x27c>)
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	4a7b      	ldr	r2, [pc, #492]	@ (8005c00 <HAL_RCC_OscConfig+0x27c>)
 8005a14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005a18:	6013      	str	r3, [r2, #0]
 8005a1a:	e00b      	b.n	8005a34 <HAL_RCC_OscConfig+0xb0>
 8005a1c:	4b78      	ldr	r3, [pc, #480]	@ (8005c00 <HAL_RCC_OscConfig+0x27c>)
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	4a77      	ldr	r2, [pc, #476]	@ (8005c00 <HAL_RCC_OscConfig+0x27c>)
 8005a22:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005a26:	6013      	str	r3, [r2, #0]
 8005a28:	4b75      	ldr	r3, [pc, #468]	@ (8005c00 <HAL_RCC_OscConfig+0x27c>)
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	4a74      	ldr	r2, [pc, #464]	@ (8005c00 <HAL_RCC_OscConfig+0x27c>)
 8005a2e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005a32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	685b      	ldr	r3, [r3, #4]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d013      	beq.n	8005a64 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a3c:	f7ff f89e 	bl	8004b7c <HAL_GetTick>
 8005a40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005a42:	e008      	b.n	8005a56 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005a44:	f7ff f89a 	bl	8004b7c <HAL_GetTick>
 8005a48:	4602      	mov	r2, r0
 8005a4a:	693b      	ldr	r3, [r7, #16]
 8005a4c:	1ad3      	subs	r3, r2, r3
 8005a4e:	2b64      	cmp	r3, #100	@ 0x64
 8005a50:	d901      	bls.n	8005a56 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005a52:	2303      	movs	r3, #3
 8005a54:	e29e      	b.n	8005f94 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005a56:	4b6a      	ldr	r3, [pc, #424]	@ (8005c00 <HAL_RCC_OscConfig+0x27c>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d0f0      	beq.n	8005a44 <HAL_RCC_OscConfig+0xc0>
 8005a62:	e014      	b.n	8005a8e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a64:	f7ff f88a 	bl	8004b7c <HAL_GetTick>
 8005a68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005a6a:	e008      	b.n	8005a7e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005a6c:	f7ff f886 	bl	8004b7c <HAL_GetTick>
 8005a70:	4602      	mov	r2, r0
 8005a72:	693b      	ldr	r3, [r7, #16]
 8005a74:	1ad3      	subs	r3, r2, r3
 8005a76:	2b64      	cmp	r3, #100	@ 0x64
 8005a78:	d901      	bls.n	8005a7e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005a7a:	2303      	movs	r3, #3
 8005a7c:	e28a      	b.n	8005f94 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005a7e:	4b60      	ldr	r3, [pc, #384]	@ (8005c00 <HAL_RCC_OscConfig+0x27c>)
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d1f0      	bne.n	8005a6c <HAL_RCC_OscConfig+0xe8>
 8005a8a:	e000      	b.n	8005a8e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f003 0302 	and.w	r3, r3, #2
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d075      	beq.n	8005b86 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005a9a:	4b59      	ldr	r3, [pc, #356]	@ (8005c00 <HAL_RCC_OscConfig+0x27c>)
 8005a9c:	689b      	ldr	r3, [r3, #8]
 8005a9e:	f003 030c 	and.w	r3, r3, #12
 8005aa2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005aa4:	4b56      	ldr	r3, [pc, #344]	@ (8005c00 <HAL_RCC_OscConfig+0x27c>)
 8005aa6:	68db      	ldr	r3, [r3, #12]
 8005aa8:	f003 0303 	and.w	r3, r3, #3
 8005aac:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8005aae:	69bb      	ldr	r3, [r7, #24]
 8005ab0:	2b0c      	cmp	r3, #12
 8005ab2:	d102      	bne.n	8005aba <HAL_RCC_OscConfig+0x136>
 8005ab4:	697b      	ldr	r3, [r7, #20]
 8005ab6:	2b02      	cmp	r3, #2
 8005ab8:	d002      	beq.n	8005ac0 <HAL_RCC_OscConfig+0x13c>
 8005aba:	69bb      	ldr	r3, [r7, #24]
 8005abc:	2b04      	cmp	r3, #4
 8005abe:	d11f      	bne.n	8005b00 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005ac0:	4b4f      	ldr	r3, [pc, #316]	@ (8005c00 <HAL_RCC_OscConfig+0x27c>)
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d005      	beq.n	8005ad8 <HAL_RCC_OscConfig+0x154>
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	68db      	ldr	r3, [r3, #12]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d101      	bne.n	8005ad8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8005ad4:	2301      	movs	r3, #1
 8005ad6:	e25d      	b.n	8005f94 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ad8:	4b49      	ldr	r3, [pc, #292]	@ (8005c00 <HAL_RCC_OscConfig+0x27c>)
 8005ada:	685b      	ldr	r3, [r3, #4]
 8005adc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	691b      	ldr	r3, [r3, #16]
 8005ae4:	061b      	lsls	r3, r3, #24
 8005ae6:	4946      	ldr	r1, [pc, #280]	@ (8005c00 <HAL_RCC_OscConfig+0x27c>)
 8005ae8:	4313      	orrs	r3, r2
 8005aea:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005aec:	4b45      	ldr	r3, [pc, #276]	@ (8005c04 <HAL_RCC_OscConfig+0x280>)
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	4618      	mov	r0, r3
 8005af2:	f7fd ffc3 	bl	8003a7c <HAL_InitTick>
 8005af6:	4603      	mov	r3, r0
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d043      	beq.n	8005b84 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8005afc:	2301      	movs	r3, #1
 8005afe:	e249      	b.n	8005f94 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	68db      	ldr	r3, [r3, #12]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d023      	beq.n	8005b50 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005b08:	4b3d      	ldr	r3, [pc, #244]	@ (8005c00 <HAL_RCC_OscConfig+0x27c>)
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	4a3c      	ldr	r2, [pc, #240]	@ (8005c00 <HAL_RCC_OscConfig+0x27c>)
 8005b0e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005b12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b14:	f7ff f832 	bl	8004b7c <HAL_GetTick>
 8005b18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005b1a:	e008      	b.n	8005b2e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005b1c:	f7ff f82e 	bl	8004b7c <HAL_GetTick>
 8005b20:	4602      	mov	r2, r0
 8005b22:	693b      	ldr	r3, [r7, #16]
 8005b24:	1ad3      	subs	r3, r2, r3
 8005b26:	2b02      	cmp	r3, #2
 8005b28:	d901      	bls.n	8005b2e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005b2a:	2303      	movs	r3, #3
 8005b2c:	e232      	b.n	8005f94 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005b2e:	4b34      	ldr	r3, [pc, #208]	@ (8005c00 <HAL_RCC_OscConfig+0x27c>)
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d0f0      	beq.n	8005b1c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b3a:	4b31      	ldr	r3, [pc, #196]	@ (8005c00 <HAL_RCC_OscConfig+0x27c>)
 8005b3c:	685b      	ldr	r3, [r3, #4]
 8005b3e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	691b      	ldr	r3, [r3, #16]
 8005b46:	061b      	lsls	r3, r3, #24
 8005b48:	492d      	ldr	r1, [pc, #180]	@ (8005c00 <HAL_RCC_OscConfig+0x27c>)
 8005b4a:	4313      	orrs	r3, r2
 8005b4c:	604b      	str	r3, [r1, #4]
 8005b4e:	e01a      	b.n	8005b86 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005b50:	4b2b      	ldr	r3, [pc, #172]	@ (8005c00 <HAL_RCC_OscConfig+0x27c>)
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	4a2a      	ldr	r2, [pc, #168]	@ (8005c00 <HAL_RCC_OscConfig+0x27c>)
 8005b56:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005b5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b5c:	f7ff f80e 	bl	8004b7c <HAL_GetTick>
 8005b60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005b62:	e008      	b.n	8005b76 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005b64:	f7ff f80a 	bl	8004b7c <HAL_GetTick>
 8005b68:	4602      	mov	r2, r0
 8005b6a:	693b      	ldr	r3, [r7, #16]
 8005b6c:	1ad3      	subs	r3, r2, r3
 8005b6e:	2b02      	cmp	r3, #2
 8005b70:	d901      	bls.n	8005b76 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8005b72:	2303      	movs	r3, #3
 8005b74:	e20e      	b.n	8005f94 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005b76:	4b22      	ldr	r3, [pc, #136]	@ (8005c00 <HAL_RCC_OscConfig+0x27c>)
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d1f0      	bne.n	8005b64 <HAL_RCC_OscConfig+0x1e0>
 8005b82:	e000      	b.n	8005b86 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005b84:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f003 0308 	and.w	r3, r3, #8
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d041      	beq.n	8005c16 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	695b      	ldr	r3, [r3, #20]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d01c      	beq.n	8005bd4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005b9a:	4b19      	ldr	r3, [pc, #100]	@ (8005c00 <HAL_RCC_OscConfig+0x27c>)
 8005b9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005ba0:	4a17      	ldr	r2, [pc, #92]	@ (8005c00 <HAL_RCC_OscConfig+0x27c>)
 8005ba2:	f043 0301 	orr.w	r3, r3, #1
 8005ba6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005baa:	f7fe ffe7 	bl	8004b7c <HAL_GetTick>
 8005bae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005bb0:	e008      	b.n	8005bc4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005bb2:	f7fe ffe3 	bl	8004b7c <HAL_GetTick>
 8005bb6:	4602      	mov	r2, r0
 8005bb8:	693b      	ldr	r3, [r7, #16]
 8005bba:	1ad3      	subs	r3, r2, r3
 8005bbc:	2b02      	cmp	r3, #2
 8005bbe:	d901      	bls.n	8005bc4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005bc0:	2303      	movs	r3, #3
 8005bc2:	e1e7      	b.n	8005f94 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005bc4:	4b0e      	ldr	r3, [pc, #56]	@ (8005c00 <HAL_RCC_OscConfig+0x27c>)
 8005bc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005bca:	f003 0302 	and.w	r3, r3, #2
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d0ef      	beq.n	8005bb2 <HAL_RCC_OscConfig+0x22e>
 8005bd2:	e020      	b.n	8005c16 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005bd4:	4b0a      	ldr	r3, [pc, #40]	@ (8005c00 <HAL_RCC_OscConfig+0x27c>)
 8005bd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005bda:	4a09      	ldr	r2, [pc, #36]	@ (8005c00 <HAL_RCC_OscConfig+0x27c>)
 8005bdc:	f023 0301 	bic.w	r3, r3, #1
 8005be0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005be4:	f7fe ffca 	bl	8004b7c <HAL_GetTick>
 8005be8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005bea:	e00d      	b.n	8005c08 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005bec:	f7fe ffc6 	bl	8004b7c <HAL_GetTick>
 8005bf0:	4602      	mov	r2, r0
 8005bf2:	693b      	ldr	r3, [r7, #16]
 8005bf4:	1ad3      	subs	r3, r2, r3
 8005bf6:	2b02      	cmp	r3, #2
 8005bf8:	d906      	bls.n	8005c08 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005bfa:	2303      	movs	r3, #3
 8005bfc:	e1ca      	b.n	8005f94 <HAL_RCC_OscConfig+0x610>
 8005bfe:	bf00      	nop
 8005c00:	40021000 	.word	0x40021000
 8005c04:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005c08:	4b8c      	ldr	r3, [pc, #560]	@ (8005e3c <HAL_RCC_OscConfig+0x4b8>)
 8005c0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005c0e:	f003 0302 	and.w	r3, r3, #2
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d1ea      	bne.n	8005bec <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f003 0304 	and.w	r3, r3, #4
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	f000 80a6 	beq.w	8005d70 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005c24:	2300      	movs	r3, #0
 8005c26:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005c28:	4b84      	ldr	r3, [pc, #528]	@ (8005e3c <HAL_RCC_OscConfig+0x4b8>)
 8005c2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c2c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d101      	bne.n	8005c38 <HAL_RCC_OscConfig+0x2b4>
 8005c34:	2301      	movs	r3, #1
 8005c36:	e000      	b.n	8005c3a <HAL_RCC_OscConfig+0x2b6>
 8005c38:	2300      	movs	r3, #0
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d00d      	beq.n	8005c5a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005c3e:	4b7f      	ldr	r3, [pc, #508]	@ (8005e3c <HAL_RCC_OscConfig+0x4b8>)
 8005c40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c42:	4a7e      	ldr	r2, [pc, #504]	@ (8005e3c <HAL_RCC_OscConfig+0x4b8>)
 8005c44:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005c48:	6593      	str	r3, [r2, #88]	@ 0x58
 8005c4a:	4b7c      	ldr	r3, [pc, #496]	@ (8005e3c <HAL_RCC_OscConfig+0x4b8>)
 8005c4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005c52:	60fb      	str	r3, [r7, #12]
 8005c54:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005c56:	2301      	movs	r3, #1
 8005c58:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005c5a:	4b79      	ldr	r3, [pc, #484]	@ (8005e40 <HAL_RCC_OscConfig+0x4bc>)
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d118      	bne.n	8005c98 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005c66:	4b76      	ldr	r3, [pc, #472]	@ (8005e40 <HAL_RCC_OscConfig+0x4bc>)
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	4a75      	ldr	r2, [pc, #468]	@ (8005e40 <HAL_RCC_OscConfig+0x4bc>)
 8005c6c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005c70:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005c72:	f7fe ff83 	bl	8004b7c <HAL_GetTick>
 8005c76:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005c78:	e008      	b.n	8005c8c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c7a:	f7fe ff7f 	bl	8004b7c <HAL_GetTick>
 8005c7e:	4602      	mov	r2, r0
 8005c80:	693b      	ldr	r3, [r7, #16]
 8005c82:	1ad3      	subs	r3, r2, r3
 8005c84:	2b02      	cmp	r3, #2
 8005c86:	d901      	bls.n	8005c8c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8005c88:	2303      	movs	r3, #3
 8005c8a:	e183      	b.n	8005f94 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005c8c:	4b6c      	ldr	r3, [pc, #432]	@ (8005e40 <HAL_RCC_OscConfig+0x4bc>)
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d0f0      	beq.n	8005c7a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	689b      	ldr	r3, [r3, #8]
 8005c9c:	2b01      	cmp	r3, #1
 8005c9e:	d108      	bne.n	8005cb2 <HAL_RCC_OscConfig+0x32e>
 8005ca0:	4b66      	ldr	r3, [pc, #408]	@ (8005e3c <HAL_RCC_OscConfig+0x4b8>)
 8005ca2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ca6:	4a65      	ldr	r2, [pc, #404]	@ (8005e3c <HAL_RCC_OscConfig+0x4b8>)
 8005ca8:	f043 0301 	orr.w	r3, r3, #1
 8005cac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005cb0:	e024      	b.n	8005cfc <HAL_RCC_OscConfig+0x378>
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	689b      	ldr	r3, [r3, #8]
 8005cb6:	2b05      	cmp	r3, #5
 8005cb8:	d110      	bne.n	8005cdc <HAL_RCC_OscConfig+0x358>
 8005cba:	4b60      	ldr	r3, [pc, #384]	@ (8005e3c <HAL_RCC_OscConfig+0x4b8>)
 8005cbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005cc0:	4a5e      	ldr	r2, [pc, #376]	@ (8005e3c <HAL_RCC_OscConfig+0x4b8>)
 8005cc2:	f043 0304 	orr.w	r3, r3, #4
 8005cc6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005cca:	4b5c      	ldr	r3, [pc, #368]	@ (8005e3c <HAL_RCC_OscConfig+0x4b8>)
 8005ccc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005cd0:	4a5a      	ldr	r2, [pc, #360]	@ (8005e3c <HAL_RCC_OscConfig+0x4b8>)
 8005cd2:	f043 0301 	orr.w	r3, r3, #1
 8005cd6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005cda:	e00f      	b.n	8005cfc <HAL_RCC_OscConfig+0x378>
 8005cdc:	4b57      	ldr	r3, [pc, #348]	@ (8005e3c <HAL_RCC_OscConfig+0x4b8>)
 8005cde:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ce2:	4a56      	ldr	r2, [pc, #344]	@ (8005e3c <HAL_RCC_OscConfig+0x4b8>)
 8005ce4:	f023 0301 	bic.w	r3, r3, #1
 8005ce8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005cec:	4b53      	ldr	r3, [pc, #332]	@ (8005e3c <HAL_RCC_OscConfig+0x4b8>)
 8005cee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005cf2:	4a52      	ldr	r2, [pc, #328]	@ (8005e3c <HAL_RCC_OscConfig+0x4b8>)
 8005cf4:	f023 0304 	bic.w	r3, r3, #4
 8005cf8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	689b      	ldr	r3, [r3, #8]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d016      	beq.n	8005d32 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d04:	f7fe ff3a 	bl	8004b7c <HAL_GetTick>
 8005d08:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005d0a:	e00a      	b.n	8005d22 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d0c:	f7fe ff36 	bl	8004b7c <HAL_GetTick>
 8005d10:	4602      	mov	r2, r0
 8005d12:	693b      	ldr	r3, [r7, #16]
 8005d14:	1ad3      	subs	r3, r2, r3
 8005d16:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	d901      	bls.n	8005d22 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8005d1e:	2303      	movs	r3, #3
 8005d20:	e138      	b.n	8005f94 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005d22:	4b46      	ldr	r3, [pc, #280]	@ (8005e3c <HAL_RCC_OscConfig+0x4b8>)
 8005d24:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d28:	f003 0302 	and.w	r3, r3, #2
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d0ed      	beq.n	8005d0c <HAL_RCC_OscConfig+0x388>
 8005d30:	e015      	b.n	8005d5e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d32:	f7fe ff23 	bl	8004b7c <HAL_GetTick>
 8005d36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005d38:	e00a      	b.n	8005d50 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d3a:	f7fe ff1f 	bl	8004b7c <HAL_GetTick>
 8005d3e:	4602      	mov	r2, r0
 8005d40:	693b      	ldr	r3, [r7, #16]
 8005d42:	1ad3      	subs	r3, r2, r3
 8005d44:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d901      	bls.n	8005d50 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005d4c:	2303      	movs	r3, #3
 8005d4e:	e121      	b.n	8005f94 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005d50:	4b3a      	ldr	r3, [pc, #232]	@ (8005e3c <HAL_RCC_OscConfig+0x4b8>)
 8005d52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d56:	f003 0302 	and.w	r3, r3, #2
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d1ed      	bne.n	8005d3a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005d5e:	7ffb      	ldrb	r3, [r7, #31]
 8005d60:	2b01      	cmp	r3, #1
 8005d62:	d105      	bne.n	8005d70 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005d64:	4b35      	ldr	r3, [pc, #212]	@ (8005e3c <HAL_RCC_OscConfig+0x4b8>)
 8005d66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d68:	4a34      	ldr	r2, [pc, #208]	@ (8005e3c <HAL_RCC_OscConfig+0x4b8>)
 8005d6a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005d6e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f003 0320 	and.w	r3, r3, #32
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d03c      	beq.n	8005df6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	699b      	ldr	r3, [r3, #24]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d01c      	beq.n	8005dbe <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005d84:	4b2d      	ldr	r3, [pc, #180]	@ (8005e3c <HAL_RCC_OscConfig+0x4b8>)
 8005d86:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005d8a:	4a2c      	ldr	r2, [pc, #176]	@ (8005e3c <HAL_RCC_OscConfig+0x4b8>)
 8005d8c:	f043 0301 	orr.w	r3, r3, #1
 8005d90:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d94:	f7fe fef2 	bl	8004b7c <HAL_GetTick>
 8005d98:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005d9a:	e008      	b.n	8005dae <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005d9c:	f7fe feee 	bl	8004b7c <HAL_GetTick>
 8005da0:	4602      	mov	r2, r0
 8005da2:	693b      	ldr	r3, [r7, #16]
 8005da4:	1ad3      	subs	r3, r2, r3
 8005da6:	2b02      	cmp	r3, #2
 8005da8:	d901      	bls.n	8005dae <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8005daa:	2303      	movs	r3, #3
 8005dac:	e0f2      	b.n	8005f94 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005dae:	4b23      	ldr	r3, [pc, #140]	@ (8005e3c <HAL_RCC_OscConfig+0x4b8>)
 8005db0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005db4:	f003 0302 	and.w	r3, r3, #2
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d0ef      	beq.n	8005d9c <HAL_RCC_OscConfig+0x418>
 8005dbc:	e01b      	b.n	8005df6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005dbe:	4b1f      	ldr	r3, [pc, #124]	@ (8005e3c <HAL_RCC_OscConfig+0x4b8>)
 8005dc0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005dc4:	4a1d      	ldr	r2, [pc, #116]	@ (8005e3c <HAL_RCC_OscConfig+0x4b8>)
 8005dc6:	f023 0301 	bic.w	r3, r3, #1
 8005dca:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005dce:	f7fe fed5 	bl	8004b7c <HAL_GetTick>
 8005dd2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005dd4:	e008      	b.n	8005de8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005dd6:	f7fe fed1 	bl	8004b7c <HAL_GetTick>
 8005dda:	4602      	mov	r2, r0
 8005ddc:	693b      	ldr	r3, [r7, #16]
 8005dde:	1ad3      	subs	r3, r2, r3
 8005de0:	2b02      	cmp	r3, #2
 8005de2:	d901      	bls.n	8005de8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8005de4:	2303      	movs	r3, #3
 8005de6:	e0d5      	b.n	8005f94 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005de8:	4b14      	ldr	r3, [pc, #80]	@ (8005e3c <HAL_RCC_OscConfig+0x4b8>)
 8005dea:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005dee:	f003 0302 	and.w	r3, r3, #2
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d1ef      	bne.n	8005dd6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	69db      	ldr	r3, [r3, #28]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	f000 80c9 	beq.w	8005f92 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005e00:	4b0e      	ldr	r3, [pc, #56]	@ (8005e3c <HAL_RCC_OscConfig+0x4b8>)
 8005e02:	689b      	ldr	r3, [r3, #8]
 8005e04:	f003 030c 	and.w	r3, r3, #12
 8005e08:	2b0c      	cmp	r3, #12
 8005e0a:	f000 8083 	beq.w	8005f14 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	69db      	ldr	r3, [r3, #28]
 8005e12:	2b02      	cmp	r3, #2
 8005e14:	d15e      	bne.n	8005ed4 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e16:	4b09      	ldr	r3, [pc, #36]	@ (8005e3c <HAL_RCC_OscConfig+0x4b8>)
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	4a08      	ldr	r2, [pc, #32]	@ (8005e3c <HAL_RCC_OscConfig+0x4b8>)
 8005e1c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005e20:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e22:	f7fe feab 	bl	8004b7c <HAL_GetTick>
 8005e26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005e28:	e00c      	b.n	8005e44 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e2a:	f7fe fea7 	bl	8004b7c <HAL_GetTick>
 8005e2e:	4602      	mov	r2, r0
 8005e30:	693b      	ldr	r3, [r7, #16]
 8005e32:	1ad3      	subs	r3, r2, r3
 8005e34:	2b02      	cmp	r3, #2
 8005e36:	d905      	bls.n	8005e44 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8005e38:	2303      	movs	r3, #3
 8005e3a:	e0ab      	b.n	8005f94 <HAL_RCC_OscConfig+0x610>
 8005e3c:	40021000 	.word	0x40021000
 8005e40:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005e44:	4b55      	ldr	r3, [pc, #340]	@ (8005f9c <HAL_RCC_OscConfig+0x618>)
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d1ec      	bne.n	8005e2a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005e50:	4b52      	ldr	r3, [pc, #328]	@ (8005f9c <HAL_RCC_OscConfig+0x618>)
 8005e52:	68da      	ldr	r2, [r3, #12]
 8005e54:	4b52      	ldr	r3, [pc, #328]	@ (8005fa0 <HAL_RCC_OscConfig+0x61c>)
 8005e56:	4013      	ands	r3, r2
 8005e58:	687a      	ldr	r2, [r7, #4]
 8005e5a:	6a11      	ldr	r1, [r2, #32]
 8005e5c:	687a      	ldr	r2, [r7, #4]
 8005e5e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005e60:	3a01      	subs	r2, #1
 8005e62:	0112      	lsls	r2, r2, #4
 8005e64:	4311      	orrs	r1, r2
 8005e66:	687a      	ldr	r2, [r7, #4]
 8005e68:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8005e6a:	0212      	lsls	r2, r2, #8
 8005e6c:	4311      	orrs	r1, r2
 8005e6e:	687a      	ldr	r2, [r7, #4]
 8005e70:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005e72:	0852      	lsrs	r2, r2, #1
 8005e74:	3a01      	subs	r2, #1
 8005e76:	0552      	lsls	r2, r2, #21
 8005e78:	4311      	orrs	r1, r2
 8005e7a:	687a      	ldr	r2, [r7, #4]
 8005e7c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005e7e:	0852      	lsrs	r2, r2, #1
 8005e80:	3a01      	subs	r2, #1
 8005e82:	0652      	lsls	r2, r2, #25
 8005e84:	4311      	orrs	r1, r2
 8005e86:	687a      	ldr	r2, [r7, #4]
 8005e88:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005e8a:	06d2      	lsls	r2, r2, #27
 8005e8c:	430a      	orrs	r2, r1
 8005e8e:	4943      	ldr	r1, [pc, #268]	@ (8005f9c <HAL_RCC_OscConfig+0x618>)
 8005e90:	4313      	orrs	r3, r2
 8005e92:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005e94:	4b41      	ldr	r3, [pc, #260]	@ (8005f9c <HAL_RCC_OscConfig+0x618>)
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	4a40      	ldr	r2, [pc, #256]	@ (8005f9c <HAL_RCC_OscConfig+0x618>)
 8005e9a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005e9e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005ea0:	4b3e      	ldr	r3, [pc, #248]	@ (8005f9c <HAL_RCC_OscConfig+0x618>)
 8005ea2:	68db      	ldr	r3, [r3, #12]
 8005ea4:	4a3d      	ldr	r2, [pc, #244]	@ (8005f9c <HAL_RCC_OscConfig+0x618>)
 8005ea6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005eaa:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005eac:	f7fe fe66 	bl	8004b7c <HAL_GetTick>
 8005eb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005eb2:	e008      	b.n	8005ec6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005eb4:	f7fe fe62 	bl	8004b7c <HAL_GetTick>
 8005eb8:	4602      	mov	r2, r0
 8005eba:	693b      	ldr	r3, [r7, #16]
 8005ebc:	1ad3      	subs	r3, r2, r3
 8005ebe:	2b02      	cmp	r3, #2
 8005ec0:	d901      	bls.n	8005ec6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8005ec2:	2303      	movs	r3, #3
 8005ec4:	e066      	b.n	8005f94 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005ec6:	4b35      	ldr	r3, [pc, #212]	@ (8005f9c <HAL_RCC_OscConfig+0x618>)
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d0f0      	beq.n	8005eb4 <HAL_RCC_OscConfig+0x530>
 8005ed2:	e05e      	b.n	8005f92 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ed4:	4b31      	ldr	r3, [pc, #196]	@ (8005f9c <HAL_RCC_OscConfig+0x618>)
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	4a30      	ldr	r2, [pc, #192]	@ (8005f9c <HAL_RCC_OscConfig+0x618>)
 8005eda:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005ede:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ee0:	f7fe fe4c 	bl	8004b7c <HAL_GetTick>
 8005ee4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005ee6:	e008      	b.n	8005efa <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ee8:	f7fe fe48 	bl	8004b7c <HAL_GetTick>
 8005eec:	4602      	mov	r2, r0
 8005eee:	693b      	ldr	r3, [r7, #16]
 8005ef0:	1ad3      	subs	r3, r2, r3
 8005ef2:	2b02      	cmp	r3, #2
 8005ef4:	d901      	bls.n	8005efa <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8005ef6:	2303      	movs	r3, #3
 8005ef8:	e04c      	b.n	8005f94 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005efa:	4b28      	ldr	r3, [pc, #160]	@ (8005f9c <HAL_RCC_OscConfig+0x618>)
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d1f0      	bne.n	8005ee8 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005f06:	4b25      	ldr	r3, [pc, #148]	@ (8005f9c <HAL_RCC_OscConfig+0x618>)
 8005f08:	68da      	ldr	r2, [r3, #12]
 8005f0a:	4924      	ldr	r1, [pc, #144]	@ (8005f9c <HAL_RCC_OscConfig+0x618>)
 8005f0c:	4b25      	ldr	r3, [pc, #148]	@ (8005fa4 <HAL_RCC_OscConfig+0x620>)
 8005f0e:	4013      	ands	r3, r2
 8005f10:	60cb      	str	r3, [r1, #12]
 8005f12:	e03e      	b.n	8005f92 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	69db      	ldr	r3, [r3, #28]
 8005f18:	2b01      	cmp	r3, #1
 8005f1a:	d101      	bne.n	8005f20 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8005f1c:	2301      	movs	r3, #1
 8005f1e:	e039      	b.n	8005f94 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005f20:	4b1e      	ldr	r3, [pc, #120]	@ (8005f9c <HAL_RCC_OscConfig+0x618>)
 8005f22:	68db      	ldr	r3, [r3, #12]
 8005f24:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f26:	697b      	ldr	r3, [r7, #20]
 8005f28:	f003 0203 	and.w	r2, r3, #3
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6a1b      	ldr	r3, [r3, #32]
 8005f30:	429a      	cmp	r2, r3
 8005f32:	d12c      	bne.n	8005f8e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005f34:	697b      	ldr	r3, [r7, #20]
 8005f36:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f3e:	3b01      	subs	r3, #1
 8005f40:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f42:	429a      	cmp	r2, r3
 8005f44:	d123      	bne.n	8005f8e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005f46:	697b      	ldr	r3, [r7, #20]
 8005f48:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f50:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005f52:	429a      	cmp	r2, r3
 8005f54:	d11b      	bne.n	8005f8e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005f56:	697b      	ldr	r3, [r7, #20]
 8005f58:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f60:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005f62:	429a      	cmp	r2, r3
 8005f64:	d113      	bne.n	8005f8e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005f66:	697b      	ldr	r3, [r7, #20]
 8005f68:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f70:	085b      	lsrs	r3, r3, #1
 8005f72:	3b01      	subs	r3, #1
 8005f74:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005f76:	429a      	cmp	r2, r3
 8005f78:	d109      	bne.n	8005f8e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005f7a:	697b      	ldr	r3, [r7, #20]
 8005f7c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f84:	085b      	lsrs	r3, r3, #1
 8005f86:	3b01      	subs	r3, #1
 8005f88:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005f8a:	429a      	cmp	r2, r3
 8005f8c:	d001      	beq.n	8005f92 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8005f8e:	2301      	movs	r3, #1
 8005f90:	e000      	b.n	8005f94 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8005f92:	2300      	movs	r3, #0
}
 8005f94:	4618      	mov	r0, r3
 8005f96:	3720      	adds	r7, #32
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	bd80      	pop	{r7, pc}
 8005f9c:	40021000 	.word	0x40021000
 8005fa0:	019f800c 	.word	0x019f800c
 8005fa4:	feeefffc 	.word	0xfeeefffc

08005fa8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b086      	sub	sp, #24
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
 8005fb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d101      	bne.n	8005fc0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005fbc:	2301      	movs	r3, #1
 8005fbe:	e11e      	b.n	80061fe <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005fc0:	4b91      	ldr	r3, [pc, #580]	@ (8006208 <HAL_RCC_ClockConfig+0x260>)
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f003 030f 	and.w	r3, r3, #15
 8005fc8:	683a      	ldr	r2, [r7, #0]
 8005fca:	429a      	cmp	r2, r3
 8005fcc:	d910      	bls.n	8005ff0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005fce:	4b8e      	ldr	r3, [pc, #568]	@ (8006208 <HAL_RCC_ClockConfig+0x260>)
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f023 020f 	bic.w	r2, r3, #15
 8005fd6:	498c      	ldr	r1, [pc, #560]	@ (8006208 <HAL_RCC_ClockConfig+0x260>)
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	4313      	orrs	r3, r2
 8005fdc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005fde:	4b8a      	ldr	r3, [pc, #552]	@ (8006208 <HAL_RCC_ClockConfig+0x260>)
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f003 030f 	and.w	r3, r3, #15
 8005fe6:	683a      	ldr	r2, [r7, #0]
 8005fe8:	429a      	cmp	r2, r3
 8005fea:	d001      	beq.n	8005ff0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005fec:	2301      	movs	r3, #1
 8005fee:	e106      	b.n	80061fe <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f003 0301 	and.w	r3, r3, #1
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d073      	beq.n	80060e4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	685b      	ldr	r3, [r3, #4]
 8006000:	2b03      	cmp	r3, #3
 8006002:	d129      	bne.n	8006058 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006004:	4b81      	ldr	r3, [pc, #516]	@ (800620c <HAL_RCC_ClockConfig+0x264>)
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800600c:	2b00      	cmp	r3, #0
 800600e:	d101      	bne.n	8006014 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8006010:	2301      	movs	r3, #1
 8006012:	e0f4      	b.n	80061fe <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8006014:	f000 f9d0 	bl	80063b8 <RCC_GetSysClockFreqFromPLLSource>
 8006018:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800601a:	693b      	ldr	r3, [r7, #16]
 800601c:	4a7c      	ldr	r2, [pc, #496]	@ (8006210 <HAL_RCC_ClockConfig+0x268>)
 800601e:	4293      	cmp	r3, r2
 8006020:	d93f      	bls.n	80060a2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006022:	4b7a      	ldr	r3, [pc, #488]	@ (800620c <HAL_RCC_ClockConfig+0x264>)
 8006024:	689b      	ldr	r3, [r3, #8]
 8006026:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800602a:	2b00      	cmp	r3, #0
 800602c:	d009      	beq.n	8006042 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006036:	2b00      	cmp	r3, #0
 8006038:	d033      	beq.n	80060a2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800603e:	2b00      	cmp	r3, #0
 8006040:	d12f      	bne.n	80060a2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006042:	4b72      	ldr	r3, [pc, #456]	@ (800620c <HAL_RCC_ClockConfig+0x264>)
 8006044:	689b      	ldr	r3, [r3, #8]
 8006046:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800604a:	4a70      	ldr	r2, [pc, #448]	@ (800620c <HAL_RCC_ClockConfig+0x264>)
 800604c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006050:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8006052:	2380      	movs	r3, #128	@ 0x80
 8006054:	617b      	str	r3, [r7, #20]
 8006056:	e024      	b.n	80060a2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	685b      	ldr	r3, [r3, #4]
 800605c:	2b02      	cmp	r3, #2
 800605e:	d107      	bne.n	8006070 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006060:	4b6a      	ldr	r3, [pc, #424]	@ (800620c <HAL_RCC_ClockConfig+0x264>)
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006068:	2b00      	cmp	r3, #0
 800606a:	d109      	bne.n	8006080 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800606c:	2301      	movs	r3, #1
 800606e:	e0c6      	b.n	80061fe <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006070:	4b66      	ldr	r3, [pc, #408]	@ (800620c <HAL_RCC_ClockConfig+0x264>)
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006078:	2b00      	cmp	r3, #0
 800607a:	d101      	bne.n	8006080 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800607c:	2301      	movs	r3, #1
 800607e:	e0be      	b.n	80061fe <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8006080:	f000 f8ce 	bl	8006220 <HAL_RCC_GetSysClockFreq>
 8006084:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8006086:	693b      	ldr	r3, [r7, #16]
 8006088:	4a61      	ldr	r2, [pc, #388]	@ (8006210 <HAL_RCC_ClockConfig+0x268>)
 800608a:	4293      	cmp	r3, r2
 800608c:	d909      	bls.n	80060a2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800608e:	4b5f      	ldr	r3, [pc, #380]	@ (800620c <HAL_RCC_ClockConfig+0x264>)
 8006090:	689b      	ldr	r3, [r3, #8]
 8006092:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006096:	4a5d      	ldr	r2, [pc, #372]	@ (800620c <HAL_RCC_ClockConfig+0x264>)
 8006098:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800609c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800609e:	2380      	movs	r3, #128	@ 0x80
 80060a0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80060a2:	4b5a      	ldr	r3, [pc, #360]	@ (800620c <HAL_RCC_ClockConfig+0x264>)
 80060a4:	689b      	ldr	r3, [r3, #8]
 80060a6:	f023 0203 	bic.w	r2, r3, #3
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	685b      	ldr	r3, [r3, #4]
 80060ae:	4957      	ldr	r1, [pc, #348]	@ (800620c <HAL_RCC_ClockConfig+0x264>)
 80060b0:	4313      	orrs	r3, r2
 80060b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80060b4:	f7fe fd62 	bl	8004b7c <HAL_GetTick>
 80060b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80060ba:	e00a      	b.n	80060d2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80060bc:	f7fe fd5e 	bl	8004b7c <HAL_GetTick>
 80060c0:	4602      	mov	r2, r0
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	1ad3      	subs	r3, r2, r3
 80060c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80060ca:	4293      	cmp	r3, r2
 80060cc:	d901      	bls.n	80060d2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80060ce:	2303      	movs	r3, #3
 80060d0:	e095      	b.n	80061fe <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80060d2:	4b4e      	ldr	r3, [pc, #312]	@ (800620c <HAL_RCC_ClockConfig+0x264>)
 80060d4:	689b      	ldr	r3, [r3, #8]
 80060d6:	f003 020c 	and.w	r2, r3, #12
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	685b      	ldr	r3, [r3, #4]
 80060de:	009b      	lsls	r3, r3, #2
 80060e0:	429a      	cmp	r2, r3
 80060e2:	d1eb      	bne.n	80060bc <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f003 0302 	and.w	r3, r3, #2
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d023      	beq.n	8006138 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f003 0304 	and.w	r3, r3, #4
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d005      	beq.n	8006108 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80060fc:	4b43      	ldr	r3, [pc, #268]	@ (800620c <HAL_RCC_ClockConfig+0x264>)
 80060fe:	689b      	ldr	r3, [r3, #8]
 8006100:	4a42      	ldr	r2, [pc, #264]	@ (800620c <HAL_RCC_ClockConfig+0x264>)
 8006102:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006106:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f003 0308 	and.w	r3, r3, #8
 8006110:	2b00      	cmp	r3, #0
 8006112:	d007      	beq.n	8006124 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8006114:	4b3d      	ldr	r3, [pc, #244]	@ (800620c <HAL_RCC_ClockConfig+0x264>)
 8006116:	689b      	ldr	r3, [r3, #8]
 8006118:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800611c:	4a3b      	ldr	r2, [pc, #236]	@ (800620c <HAL_RCC_ClockConfig+0x264>)
 800611e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006122:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006124:	4b39      	ldr	r3, [pc, #228]	@ (800620c <HAL_RCC_ClockConfig+0x264>)
 8006126:	689b      	ldr	r3, [r3, #8]
 8006128:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	689b      	ldr	r3, [r3, #8]
 8006130:	4936      	ldr	r1, [pc, #216]	@ (800620c <HAL_RCC_ClockConfig+0x264>)
 8006132:	4313      	orrs	r3, r2
 8006134:	608b      	str	r3, [r1, #8]
 8006136:	e008      	b.n	800614a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8006138:	697b      	ldr	r3, [r7, #20]
 800613a:	2b80      	cmp	r3, #128	@ 0x80
 800613c:	d105      	bne.n	800614a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800613e:	4b33      	ldr	r3, [pc, #204]	@ (800620c <HAL_RCC_ClockConfig+0x264>)
 8006140:	689b      	ldr	r3, [r3, #8]
 8006142:	4a32      	ldr	r2, [pc, #200]	@ (800620c <HAL_RCC_ClockConfig+0x264>)
 8006144:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006148:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800614a:	4b2f      	ldr	r3, [pc, #188]	@ (8006208 <HAL_RCC_ClockConfig+0x260>)
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f003 030f 	and.w	r3, r3, #15
 8006152:	683a      	ldr	r2, [r7, #0]
 8006154:	429a      	cmp	r2, r3
 8006156:	d21d      	bcs.n	8006194 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006158:	4b2b      	ldr	r3, [pc, #172]	@ (8006208 <HAL_RCC_ClockConfig+0x260>)
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f023 020f 	bic.w	r2, r3, #15
 8006160:	4929      	ldr	r1, [pc, #164]	@ (8006208 <HAL_RCC_ClockConfig+0x260>)
 8006162:	683b      	ldr	r3, [r7, #0]
 8006164:	4313      	orrs	r3, r2
 8006166:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006168:	f7fe fd08 	bl	8004b7c <HAL_GetTick>
 800616c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800616e:	e00a      	b.n	8006186 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006170:	f7fe fd04 	bl	8004b7c <HAL_GetTick>
 8006174:	4602      	mov	r2, r0
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	1ad3      	subs	r3, r2, r3
 800617a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800617e:	4293      	cmp	r3, r2
 8006180:	d901      	bls.n	8006186 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8006182:	2303      	movs	r3, #3
 8006184:	e03b      	b.n	80061fe <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006186:	4b20      	ldr	r3, [pc, #128]	@ (8006208 <HAL_RCC_ClockConfig+0x260>)
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f003 030f 	and.w	r3, r3, #15
 800618e:	683a      	ldr	r2, [r7, #0]
 8006190:	429a      	cmp	r2, r3
 8006192:	d1ed      	bne.n	8006170 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f003 0304 	and.w	r3, r3, #4
 800619c:	2b00      	cmp	r3, #0
 800619e:	d008      	beq.n	80061b2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80061a0:	4b1a      	ldr	r3, [pc, #104]	@ (800620c <HAL_RCC_ClockConfig+0x264>)
 80061a2:	689b      	ldr	r3, [r3, #8]
 80061a4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	68db      	ldr	r3, [r3, #12]
 80061ac:	4917      	ldr	r1, [pc, #92]	@ (800620c <HAL_RCC_ClockConfig+0x264>)
 80061ae:	4313      	orrs	r3, r2
 80061b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f003 0308 	and.w	r3, r3, #8
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d009      	beq.n	80061d2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80061be:	4b13      	ldr	r3, [pc, #76]	@ (800620c <HAL_RCC_ClockConfig+0x264>)
 80061c0:	689b      	ldr	r3, [r3, #8]
 80061c2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	691b      	ldr	r3, [r3, #16]
 80061ca:	00db      	lsls	r3, r3, #3
 80061cc:	490f      	ldr	r1, [pc, #60]	@ (800620c <HAL_RCC_ClockConfig+0x264>)
 80061ce:	4313      	orrs	r3, r2
 80061d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80061d2:	f000 f825 	bl	8006220 <HAL_RCC_GetSysClockFreq>
 80061d6:	4602      	mov	r2, r0
 80061d8:	4b0c      	ldr	r3, [pc, #48]	@ (800620c <HAL_RCC_ClockConfig+0x264>)
 80061da:	689b      	ldr	r3, [r3, #8]
 80061dc:	091b      	lsrs	r3, r3, #4
 80061de:	f003 030f 	and.w	r3, r3, #15
 80061e2:	490c      	ldr	r1, [pc, #48]	@ (8006214 <HAL_RCC_ClockConfig+0x26c>)
 80061e4:	5ccb      	ldrb	r3, [r1, r3]
 80061e6:	f003 031f 	and.w	r3, r3, #31
 80061ea:	fa22 f303 	lsr.w	r3, r2, r3
 80061ee:	4a0a      	ldr	r2, [pc, #40]	@ (8006218 <HAL_RCC_ClockConfig+0x270>)
 80061f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80061f2:	4b0a      	ldr	r3, [pc, #40]	@ (800621c <HAL_RCC_ClockConfig+0x274>)
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	4618      	mov	r0, r3
 80061f8:	f7fd fc40 	bl	8003a7c <HAL_InitTick>
 80061fc:	4603      	mov	r3, r0
}
 80061fe:	4618      	mov	r0, r3
 8006200:	3718      	adds	r7, #24
 8006202:	46bd      	mov	sp, r7
 8006204:	bd80      	pop	{r7, pc}
 8006206:	bf00      	nop
 8006208:	40022000 	.word	0x40022000
 800620c:	40021000 	.word	0x40021000
 8006210:	04c4b400 	.word	0x04c4b400
 8006214:	0801d53c 	.word	0x0801d53c
 8006218:	20000004 	.word	0x20000004
 800621c:	20000008 	.word	0x20000008

08006220 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006220:	b480      	push	{r7}
 8006222:	b087      	sub	sp, #28
 8006224:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8006226:	4b2c      	ldr	r3, [pc, #176]	@ (80062d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006228:	689b      	ldr	r3, [r3, #8]
 800622a:	f003 030c 	and.w	r3, r3, #12
 800622e:	2b04      	cmp	r3, #4
 8006230:	d102      	bne.n	8006238 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006232:	4b2a      	ldr	r3, [pc, #168]	@ (80062dc <HAL_RCC_GetSysClockFreq+0xbc>)
 8006234:	613b      	str	r3, [r7, #16]
 8006236:	e047      	b.n	80062c8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006238:	4b27      	ldr	r3, [pc, #156]	@ (80062d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800623a:	689b      	ldr	r3, [r3, #8]
 800623c:	f003 030c 	and.w	r3, r3, #12
 8006240:	2b08      	cmp	r3, #8
 8006242:	d102      	bne.n	800624a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006244:	4b26      	ldr	r3, [pc, #152]	@ (80062e0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006246:	613b      	str	r3, [r7, #16]
 8006248:	e03e      	b.n	80062c8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800624a:	4b23      	ldr	r3, [pc, #140]	@ (80062d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800624c:	689b      	ldr	r3, [r3, #8]
 800624e:	f003 030c 	and.w	r3, r3, #12
 8006252:	2b0c      	cmp	r3, #12
 8006254:	d136      	bne.n	80062c4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006256:	4b20      	ldr	r3, [pc, #128]	@ (80062d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006258:	68db      	ldr	r3, [r3, #12]
 800625a:	f003 0303 	and.w	r3, r3, #3
 800625e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006260:	4b1d      	ldr	r3, [pc, #116]	@ (80062d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006262:	68db      	ldr	r3, [r3, #12]
 8006264:	091b      	lsrs	r3, r3, #4
 8006266:	f003 030f 	and.w	r3, r3, #15
 800626a:	3301      	adds	r3, #1
 800626c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	2b03      	cmp	r3, #3
 8006272:	d10c      	bne.n	800628e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006274:	4a1a      	ldr	r2, [pc, #104]	@ (80062e0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006276:	68bb      	ldr	r3, [r7, #8]
 8006278:	fbb2 f3f3 	udiv	r3, r2, r3
 800627c:	4a16      	ldr	r2, [pc, #88]	@ (80062d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800627e:	68d2      	ldr	r2, [r2, #12]
 8006280:	0a12      	lsrs	r2, r2, #8
 8006282:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006286:	fb02 f303 	mul.w	r3, r2, r3
 800628a:	617b      	str	r3, [r7, #20]
      break;
 800628c:	e00c      	b.n	80062a8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800628e:	4a13      	ldr	r2, [pc, #76]	@ (80062dc <HAL_RCC_GetSysClockFreq+0xbc>)
 8006290:	68bb      	ldr	r3, [r7, #8]
 8006292:	fbb2 f3f3 	udiv	r3, r2, r3
 8006296:	4a10      	ldr	r2, [pc, #64]	@ (80062d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006298:	68d2      	ldr	r2, [r2, #12]
 800629a:	0a12      	lsrs	r2, r2, #8
 800629c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80062a0:	fb02 f303 	mul.w	r3, r2, r3
 80062a4:	617b      	str	r3, [r7, #20]
      break;
 80062a6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80062a8:	4b0b      	ldr	r3, [pc, #44]	@ (80062d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80062aa:	68db      	ldr	r3, [r3, #12]
 80062ac:	0e5b      	lsrs	r3, r3, #25
 80062ae:	f003 0303 	and.w	r3, r3, #3
 80062b2:	3301      	adds	r3, #1
 80062b4:	005b      	lsls	r3, r3, #1
 80062b6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80062b8:	697a      	ldr	r2, [r7, #20]
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80062c0:	613b      	str	r3, [r7, #16]
 80062c2:	e001      	b.n	80062c8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80062c4:	2300      	movs	r3, #0
 80062c6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80062c8:	693b      	ldr	r3, [r7, #16]
}
 80062ca:	4618      	mov	r0, r3
 80062cc:	371c      	adds	r7, #28
 80062ce:	46bd      	mov	sp, r7
 80062d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d4:	4770      	bx	lr
 80062d6:	bf00      	nop
 80062d8:	40021000 	.word	0x40021000
 80062dc:	00f42400 	.word	0x00f42400
 80062e0:	016e3600 	.word	0x016e3600

080062e4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80062e4:	b480      	push	{r7}
 80062e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80062e8:	4b03      	ldr	r3, [pc, #12]	@ (80062f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80062ea:	681b      	ldr	r3, [r3, #0]
}
 80062ec:	4618      	mov	r0, r3
 80062ee:	46bd      	mov	sp, r7
 80062f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f4:	4770      	bx	lr
 80062f6:	bf00      	nop
 80062f8:	20000004 	.word	0x20000004

080062fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80062fc:	b580      	push	{r7, lr}
 80062fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006300:	f7ff fff0 	bl	80062e4 <HAL_RCC_GetHCLKFreq>
 8006304:	4602      	mov	r2, r0
 8006306:	4b06      	ldr	r3, [pc, #24]	@ (8006320 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006308:	689b      	ldr	r3, [r3, #8]
 800630a:	0a1b      	lsrs	r3, r3, #8
 800630c:	f003 0307 	and.w	r3, r3, #7
 8006310:	4904      	ldr	r1, [pc, #16]	@ (8006324 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006312:	5ccb      	ldrb	r3, [r1, r3]
 8006314:	f003 031f 	and.w	r3, r3, #31
 8006318:	fa22 f303 	lsr.w	r3, r2, r3
}
 800631c:	4618      	mov	r0, r3
 800631e:	bd80      	pop	{r7, pc}
 8006320:	40021000 	.word	0x40021000
 8006324:	0801d54c 	.word	0x0801d54c

08006328 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006328:	b580      	push	{r7, lr}
 800632a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800632c:	f7ff ffda 	bl	80062e4 <HAL_RCC_GetHCLKFreq>
 8006330:	4602      	mov	r2, r0
 8006332:	4b06      	ldr	r3, [pc, #24]	@ (800634c <HAL_RCC_GetPCLK2Freq+0x24>)
 8006334:	689b      	ldr	r3, [r3, #8]
 8006336:	0adb      	lsrs	r3, r3, #11
 8006338:	f003 0307 	and.w	r3, r3, #7
 800633c:	4904      	ldr	r1, [pc, #16]	@ (8006350 <HAL_RCC_GetPCLK2Freq+0x28>)
 800633e:	5ccb      	ldrb	r3, [r1, r3]
 8006340:	f003 031f 	and.w	r3, r3, #31
 8006344:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006348:	4618      	mov	r0, r3
 800634a:	bd80      	pop	{r7, pc}
 800634c:	40021000 	.word	0x40021000
 8006350:	0801d54c 	.word	0x0801d54c

08006354 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006354:	b480      	push	{r7}
 8006356:	b083      	sub	sp, #12
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
 800635c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	220f      	movs	r2, #15
 8006362:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8006364:	4b12      	ldr	r3, [pc, #72]	@ (80063b0 <HAL_RCC_GetClockConfig+0x5c>)
 8006366:	689b      	ldr	r3, [r3, #8]
 8006368:	f003 0203 	and.w	r2, r3, #3
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8006370:	4b0f      	ldr	r3, [pc, #60]	@ (80063b0 <HAL_RCC_GetClockConfig+0x5c>)
 8006372:	689b      	ldr	r3, [r3, #8]
 8006374:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800637c:	4b0c      	ldr	r3, [pc, #48]	@ (80063b0 <HAL_RCC_GetClockConfig+0x5c>)
 800637e:	689b      	ldr	r3, [r3, #8]
 8006380:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8006388:	4b09      	ldr	r3, [pc, #36]	@ (80063b0 <HAL_RCC_GetClockConfig+0x5c>)
 800638a:	689b      	ldr	r3, [r3, #8]
 800638c:	08db      	lsrs	r3, r3, #3
 800638e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8006396:	4b07      	ldr	r3, [pc, #28]	@ (80063b4 <HAL_RCC_GetClockConfig+0x60>)
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f003 020f 	and.w	r2, r3, #15
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	601a      	str	r2, [r3, #0]
}
 80063a2:	bf00      	nop
 80063a4:	370c      	adds	r7, #12
 80063a6:	46bd      	mov	sp, r7
 80063a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ac:	4770      	bx	lr
 80063ae:	bf00      	nop
 80063b0:	40021000 	.word	0x40021000
 80063b4:	40022000 	.word	0x40022000

080063b8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80063b8:	b480      	push	{r7}
 80063ba:	b087      	sub	sp, #28
 80063bc:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80063be:	4b1e      	ldr	r3, [pc, #120]	@ (8006438 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80063c0:	68db      	ldr	r3, [r3, #12]
 80063c2:	f003 0303 	and.w	r3, r3, #3
 80063c6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80063c8:	4b1b      	ldr	r3, [pc, #108]	@ (8006438 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80063ca:	68db      	ldr	r3, [r3, #12]
 80063cc:	091b      	lsrs	r3, r3, #4
 80063ce:	f003 030f 	and.w	r3, r3, #15
 80063d2:	3301      	adds	r3, #1
 80063d4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80063d6:	693b      	ldr	r3, [r7, #16]
 80063d8:	2b03      	cmp	r3, #3
 80063da:	d10c      	bne.n	80063f6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80063dc:	4a17      	ldr	r2, [pc, #92]	@ (800643c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80063e4:	4a14      	ldr	r2, [pc, #80]	@ (8006438 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80063e6:	68d2      	ldr	r2, [r2, #12]
 80063e8:	0a12      	lsrs	r2, r2, #8
 80063ea:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80063ee:	fb02 f303 	mul.w	r3, r2, r3
 80063f2:	617b      	str	r3, [r7, #20]
    break;
 80063f4:	e00c      	b.n	8006410 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80063f6:	4a12      	ldr	r2, [pc, #72]	@ (8006440 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80063fe:	4a0e      	ldr	r2, [pc, #56]	@ (8006438 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006400:	68d2      	ldr	r2, [r2, #12]
 8006402:	0a12      	lsrs	r2, r2, #8
 8006404:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006408:	fb02 f303 	mul.w	r3, r2, r3
 800640c:	617b      	str	r3, [r7, #20]
    break;
 800640e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006410:	4b09      	ldr	r3, [pc, #36]	@ (8006438 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006412:	68db      	ldr	r3, [r3, #12]
 8006414:	0e5b      	lsrs	r3, r3, #25
 8006416:	f003 0303 	and.w	r3, r3, #3
 800641a:	3301      	adds	r3, #1
 800641c:	005b      	lsls	r3, r3, #1
 800641e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8006420:	697a      	ldr	r2, [r7, #20]
 8006422:	68bb      	ldr	r3, [r7, #8]
 8006424:	fbb2 f3f3 	udiv	r3, r2, r3
 8006428:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800642a:	687b      	ldr	r3, [r7, #4]
}
 800642c:	4618      	mov	r0, r3
 800642e:	371c      	adds	r7, #28
 8006430:	46bd      	mov	sp, r7
 8006432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006436:	4770      	bx	lr
 8006438:	40021000 	.word	0x40021000
 800643c:	016e3600 	.word	0x016e3600
 8006440:	00f42400 	.word	0x00f42400

08006444 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006444:	b580      	push	{r7, lr}
 8006446:	b086      	sub	sp, #24
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800644c:	2300      	movs	r3, #0
 800644e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006450:	2300      	movs	r3, #0
 8006452:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800645c:	2b00      	cmp	r3, #0
 800645e:	f000 8098 	beq.w	8006592 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006462:	2300      	movs	r3, #0
 8006464:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006466:	4b43      	ldr	r3, [pc, #268]	@ (8006574 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006468:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800646a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800646e:	2b00      	cmp	r3, #0
 8006470:	d10d      	bne.n	800648e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006472:	4b40      	ldr	r3, [pc, #256]	@ (8006574 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006474:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006476:	4a3f      	ldr	r2, [pc, #252]	@ (8006574 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006478:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800647c:	6593      	str	r3, [r2, #88]	@ 0x58
 800647e:	4b3d      	ldr	r3, [pc, #244]	@ (8006574 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006480:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006482:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006486:	60bb      	str	r3, [r7, #8]
 8006488:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800648a:	2301      	movs	r3, #1
 800648c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800648e:	4b3a      	ldr	r3, [pc, #232]	@ (8006578 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	4a39      	ldr	r2, [pc, #228]	@ (8006578 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006494:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006498:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800649a:	f7fe fb6f 	bl	8004b7c <HAL_GetTick>
 800649e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80064a0:	e009      	b.n	80064b6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80064a2:	f7fe fb6b 	bl	8004b7c <HAL_GetTick>
 80064a6:	4602      	mov	r2, r0
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	1ad3      	subs	r3, r2, r3
 80064ac:	2b02      	cmp	r3, #2
 80064ae:	d902      	bls.n	80064b6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80064b0:	2303      	movs	r3, #3
 80064b2:	74fb      	strb	r3, [r7, #19]
        break;
 80064b4:	e005      	b.n	80064c2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80064b6:	4b30      	ldr	r3, [pc, #192]	@ (8006578 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d0ef      	beq.n	80064a2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80064c2:	7cfb      	ldrb	r3, [r7, #19]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d159      	bne.n	800657c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80064c8:	4b2a      	ldr	r3, [pc, #168]	@ (8006574 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80064ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80064ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80064d2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80064d4:	697b      	ldr	r3, [r7, #20]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d01e      	beq.n	8006518 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80064de:	697a      	ldr	r2, [r7, #20]
 80064e0:	429a      	cmp	r2, r3
 80064e2:	d019      	beq.n	8006518 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80064e4:	4b23      	ldr	r3, [pc, #140]	@ (8006574 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80064e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80064ea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80064ee:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80064f0:	4b20      	ldr	r3, [pc, #128]	@ (8006574 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80064f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80064f6:	4a1f      	ldr	r2, [pc, #124]	@ (8006574 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80064f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80064fc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006500:	4b1c      	ldr	r3, [pc, #112]	@ (8006574 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006502:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006506:	4a1b      	ldr	r2, [pc, #108]	@ (8006574 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006508:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800650c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006510:	4a18      	ldr	r2, [pc, #96]	@ (8006574 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006512:	697b      	ldr	r3, [r7, #20]
 8006514:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006518:	697b      	ldr	r3, [r7, #20]
 800651a:	f003 0301 	and.w	r3, r3, #1
 800651e:	2b00      	cmp	r3, #0
 8006520:	d016      	beq.n	8006550 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006522:	f7fe fb2b 	bl	8004b7c <HAL_GetTick>
 8006526:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006528:	e00b      	b.n	8006542 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800652a:	f7fe fb27 	bl	8004b7c <HAL_GetTick>
 800652e:	4602      	mov	r2, r0
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	1ad3      	subs	r3, r2, r3
 8006534:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006538:	4293      	cmp	r3, r2
 800653a:	d902      	bls.n	8006542 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800653c:	2303      	movs	r3, #3
 800653e:	74fb      	strb	r3, [r7, #19]
            break;
 8006540:	e006      	b.n	8006550 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006542:	4b0c      	ldr	r3, [pc, #48]	@ (8006574 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006544:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006548:	f003 0302 	and.w	r3, r3, #2
 800654c:	2b00      	cmp	r3, #0
 800654e:	d0ec      	beq.n	800652a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8006550:	7cfb      	ldrb	r3, [r7, #19]
 8006552:	2b00      	cmp	r3, #0
 8006554:	d10b      	bne.n	800656e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006556:	4b07      	ldr	r3, [pc, #28]	@ (8006574 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006558:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800655c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006564:	4903      	ldr	r1, [pc, #12]	@ (8006574 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006566:	4313      	orrs	r3, r2
 8006568:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800656c:	e008      	b.n	8006580 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800656e:	7cfb      	ldrb	r3, [r7, #19]
 8006570:	74bb      	strb	r3, [r7, #18]
 8006572:	e005      	b.n	8006580 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006574:	40021000 	.word	0x40021000
 8006578:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800657c:	7cfb      	ldrb	r3, [r7, #19]
 800657e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006580:	7c7b      	ldrb	r3, [r7, #17]
 8006582:	2b01      	cmp	r3, #1
 8006584:	d105      	bne.n	8006592 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006586:	4ba7      	ldr	r3, [pc, #668]	@ (8006824 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006588:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800658a:	4aa6      	ldr	r2, [pc, #664]	@ (8006824 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800658c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006590:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f003 0301 	and.w	r3, r3, #1
 800659a:	2b00      	cmp	r3, #0
 800659c:	d00a      	beq.n	80065b4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800659e:	4ba1      	ldr	r3, [pc, #644]	@ (8006824 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80065a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065a4:	f023 0203 	bic.w	r2, r3, #3
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	685b      	ldr	r3, [r3, #4]
 80065ac:	499d      	ldr	r1, [pc, #628]	@ (8006824 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80065ae:	4313      	orrs	r3, r2
 80065b0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f003 0302 	and.w	r3, r3, #2
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d00a      	beq.n	80065d6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80065c0:	4b98      	ldr	r3, [pc, #608]	@ (8006824 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80065c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065c6:	f023 020c 	bic.w	r2, r3, #12
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	689b      	ldr	r3, [r3, #8]
 80065ce:	4995      	ldr	r1, [pc, #596]	@ (8006824 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80065d0:	4313      	orrs	r3, r2
 80065d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f003 0304 	and.w	r3, r3, #4
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d00a      	beq.n	80065f8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80065e2:	4b90      	ldr	r3, [pc, #576]	@ (8006824 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80065e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065e8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	68db      	ldr	r3, [r3, #12]
 80065f0:	498c      	ldr	r1, [pc, #560]	@ (8006824 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80065f2:	4313      	orrs	r3, r2
 80065f4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f003 0308 	and.w	r3, r3, #8
 8006600:	2b00      	cmp	r3, #0
 8006602:	d00a      	beq.n	800661a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006604:	4b87      	ldr	r3, [pc, #540]	@ (8006824 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006606:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800660a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	691b      	ldr	r3, [r3, #16]
 8006612:	4984      	ldr	r1, [pc, #528]	@ (8006824 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006614:	4313      	orrs	r3, r2
 8006616:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	f003 0310 	and.w	r3, r3, #16
 8006622:	2b00      	cmp	r3, #0
 8006624:	d00a      	beq.n	800663c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006626:	4b7f      	ldr	r3, [pc, #508]	@ (8006824 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006628:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800662c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	695b      	ldr	r3, [r3, #20]
 8006634:	497b      	ldr	r1, [pc, #492]	@ (8006824 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006636:	4313      	orrs	r3, r2
 8006638:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	f003 0320 	and.w	r3, r3, #32
 8006644:	2b00      	cmp	r3, #0
 8006646:	d00a      	beq.n	800665e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006648:	4b76      	ldr	r3, [pc, #472]	@ (8006824 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800664a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800664e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	699b      	ldr	r3, [r3, #24]
 8006656:	4973      	ldr	r1, [pc, #460]	@ (8006824 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006658:	4313      	orrs	r3, r2
 800665a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006666:	2b00      	cmp	r3, #0
 8006668:	d00a      	beq.n	8006680 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800666a:	4b6e      	ldr	r3, [pc, #440]	@ (8006824 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800666c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006670:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	69db      	ldr	r3, [r3, #28]
 8006678:	496a      	ldr	r1, [pc, #424]	@ (8006824 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800667a:	4313      	orrs	r3, r2
 800667c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006688:	2b00      	cmp	r3, #0
 800668a:	d00a      	beq.n	80066a2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800668c:	4b65      	ldr	r3, [pc, #404]	@ (8006824 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800668e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006692:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	6a1b      	ldr	r3, [r3, #32]
 800669a:	4962      	ldr	r1, [pc, #392]	@ (8006824 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800669c:	4313      	orrs	r3, r2
 800669e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d00a      	beq.n	80066c4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80066ae:	4b5d      	ldr	r3, [pc, #372]	@ (8006824 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80066b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80066b4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066bc:	4959      	ldr	r1, [pc, #356]	@ (8006824 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80066be:	4313      	orrs	r3, r2
 80066c0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d00a      	beq.n	80066e6 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80066d0:	4b54      	ldr	r3, [pc, #336]	@ (8006824 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80066d2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80066d6:	f023 0203 	bic.w	r2, r3, #3
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066de:	4951      	ldr	r1, [pc, #324]	@ (8006824 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80066e0:	4313      	orrs	r3, r2
 80066e2:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d00a      	beq.n	8006708 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80066f2:	4b4c      	ldr	r3, [pc, #304]	@ (8006824 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80066f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80066f8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006700:	4948      	ldr	r1, [pc, #288]	@ (8006824 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006702:	4313      	orrs	r3, r2
 8006704:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006710:	2b00      	cmp	r3, #0
 8006712:	d015      	beq.n	8006740 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006714:	4b43      	ldr	r3, [pc, #268]	@ (8006824 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006716:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800671a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006722:	4940      	ldr	r1, [pc, #256]	@ (8006824 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006724:	4313      	orrs	r3, r2
 8006726:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800672e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006732:	d105      	bne.n	8006740 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006734:	4b3b      	ldr	r3, [pc, #236]	@ (8006824 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006736:	68db      	ldr	r3, [r3, #12]
 8006738:	4a3a      	ldr	r2, [pc, #232]	@ (8006824 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800673a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800673e:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006748:	2b00      	cmp	r3, #0
 800674a:	d015      	beq.n	8006778 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800674c:	4b35      	ldr	r3, [pc, #212]	@ (8006824 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800674e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006752:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800675a:	4932      	ldr	r1, [pc, #200]	@ (8006824 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800675c:	4313      	orrs	r3, r2
 800675e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006766:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800676a:	d105      	bne.n	8006778 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800676c:	4b2d      	ldr	r3, [pc, #180]	@ (8006824 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800676e:	68db      	ldr	r3, [r3, #12]
 8006770:	4a2c      	ldr	r2, [pc, #176]	@ (8006824 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006772:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006776:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006780:	2b00      	cmp	r3, #0
 8006782:	d015      	beq.n	80067b0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006784:	4b27      	ldr	r3, [pc, #156]	@ (8006824 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006786:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800678a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006792:	4924      	ldr	r1, [pc, #144]	@ (8006824 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006794:	4313      	orrs	r3, r2
 8006796:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800679e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80067a2:	d105      	bne.n	80067b0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80067a4:	4b1f      	ldr	r3, [pc, #124]	@ (8006824 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80067a6:	68db      	ldr	r3, [r3, #12]
 80067a8:	4a1e      	ldr	r2, [pc, #120]	@ (8006824 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80067aa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80067ae:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d015      	beq.n	80067e8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80067bc:	4b19      	ldr	r3, [pc, #100]	@ (8006824 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80067be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80067c2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80067ca:	4916      	ldr	r1, [pc, #88]	@ (8006824 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80067cc:	4313      	orrs	r3, r2
 80067ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80067d6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80067da:	d105      	bne.n	80067e8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80067dc:	4b11      	ldr	r3, [pc, #68]	@ (8006824 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80067de:	68db      	ldr	r3, [r3, #12]
 80067e0:	4a10      	ldr	r2, [pc, #64]	@ (8006824 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80067e2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80067e6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d019      	beq.n	8006828 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80067f4:	4b0b      	ldr	r3, [pc, #44]	@ (8006824 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80067f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80067fa:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006802:	4908      	ldr	r1, [pc, #32]	@ (8006824 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006804:	4313      	orrs	r3, r2
 8006806:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800680e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006812:	d109      	bne.n	8006828 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006814:	4b03      	ldr	r3, [pc, #12]	@ (8006824 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006816:	68db      	ldr	r3, [r3, #12]
 8006818:	4a02      	ldr	r2, [pc, #8]	@ (8006824 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800681a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800681e:	60d3      	str	r3, [r2, #12]
 8006820:	e002      	b.n	8006828 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8006822:	bf00      	nop
 8006824:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006830:	2b00      	cmp	r3, #0
 8006832:	d015      	beq.n	8006860 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006834:	4b29      	ldr	r3, [pc, #164]	@ (80068dc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006836:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800683a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006842:	4926      	ldr	r1, [pc, #152]	@ (80068dc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006844:	4313      	orrs	r3, r2
 8006846:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800684e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006852:	d105      	bne.n	8006860 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006854:	4b21      	ldr	r3, [pc, #132]	@ (80068dc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006856:	68db      	ldr	r3, [r3, #12]
 8006858:	4a20      	ldr	r2, [pc, #128]	@ (80068dc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800685a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800685e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006868:	2b00      	cmp	r3, #0
 800686a:	d015      	beq.n	8006898 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800686c:	4b1b      	ldr	r3, [pc, #108]	@ (80068dc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800686e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006872:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800687a:	4918      	ldr	r1, [pc, #96]	@ (80068dc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800687c:	4313      	orrs	r3, r2
 800687e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006886:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800688a:	d105      	bne.n	8006898 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800688c:	4b13      	ldr	r3, [pc, #76]	@ (80068dc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800688e:	68db      	ldr	r3, [r3, #12]
 8006890:	4a12      	ldr	r2, [pc, #72]	@ (80068dc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006892:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006896:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d015      	beq.n	80068d0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80068a4:	4b0d      	ldr	r3, [pc, #52]	@ (80068dc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80068a6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80068aa:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80068b2:	490a      	ldr	r1, [pc, #40]	@ (80068dc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80068b4:	4313      	orrs	r3, r2
 80068b6:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80068be:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80068c2:	d105      	bne.n	80068d0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80068c4:	4b05      	ldr	r3, [pc, #20]	@ (80068dc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80068c6:	68db      	ldr	r3, [r3, #12]
 80068c8:	4a04      	ldr	r2, [pc, #16]	@ (80068dc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80068ca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80068ce:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80068d0:	7cbb      	ldrb	r3, [r7, #18]
}
 80068d2:	4618      	mov	r0, r3
 80068d4:	3718      	adds	r7, #24
 80068d6:	46bd      	mov	sp, r7
 80068d8:	bd80      	pop	{r7, pc}
 80068da:	bf00      	nop
 80068dc:	40021000 	.word	0x40021000

080068e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80068e0:	b580      	push	{r7, lr}
 80068e2:	b082      	sub	sp, #8
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d101      	bne.n	80068f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80068ee:	2301      	movs	r3, #1
 80068f0:	e049      	b.n	8006986 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80068f8:	b2db      	uxtb	r3, r3
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d106      	bne.n	800690c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	2200      	movs	r2, #0
 8006902:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006906:	6878      	ldr	r0, [r7, #4]
 8006908:	f7fd fcb4 	bl	8004274 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2202      	movs	r2, #2
 8006910:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681a      	ldr	r2, [r3, #0]
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	3304      	adds	r3, #4
 800691c:	4619      	mov	r1, r3
 800691e:	4610      	mov	r0, r2
 8006920:	f000 ff5e 	bl	80077e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2201      	movs	r2, #1
 8006928:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2201      	movs	r2, #1
 8006930:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2201      	movs	r2, #1
 8006938:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2201      	movs	r2, #1
 8006940:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2201      	movs	r2, #1
 8006948:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2201      	movs	r2, #1
 8006950:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2201      	movs	r2, #1
 8006958:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2201      	movs	r2, #1
 8006960:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2201      	movs	r2, #1
 8006968:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2201      	movs	r2, #1
 8006970:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2201      	movs	r2, #1
 8006978:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2201      	movs	r2, #1
 8006980:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006984:	2300      	movs	r3, #0
}
 8006986:	4618      	mov	r0, r3
 8006988:	3708      	adds	r7, #8
 800698a:	46bd      	mov	sp, r7
 800698c:	bd80      	pop	{r7, pc}
	...

08006990 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006990:	b480      	push	{r7}
 8006992:	b085      	sub	sp, #20
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800699e:	b2db      	uxtb	r3, r3
 80069a0:	2b01      	cmp	r3, #1
 80069a2:	d001      	beq.n	80069a8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80069a4:	2301      	movs	r3, #1
 80069a6:	e04c      	b.n	8006a42 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2202      	movs	r2, #2
 80069ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	4a26      	ldr	r2, [pc, #152]	@ (8006a50 <HAL_TIM_Base_Start+0xc0>)
 80069b6:	4293      	cmp	r3, r2
 80069b8:	d022      	beq.n	8006a00 <HAL_TIM_Base_Start+0x70>
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80069c2:	d01d      	beq.n	8006a00 <HAL_TIM_Base_Start+0x70>
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	4a22      	ldr	r2, [pc, #136]	@ (8006a54 <HAL_TIM_Base_Start+0xc4>)
 80069ca:	4293      	cmp	r3, r2
 80069cc:	d018      	beq.n	8006a00 <HAL_TIM_Base_Start+0x70>
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	4a21      	ldr	r2, [pc, #132]	@ (8006a58 <HAL_TIM_Base_Start+0xc8>)
 80069d4:	4293      	cmp	r3, r2
 80069d6:	d013      	beq.n	8006a00 <HAL_TIM_Base_Start+0x70>
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	4a1f      	ldr	r2, [pc, #124]	@ (8006a5c <HAL_TIM_Base_Start+0xcc>)
 80069de:	4293      	cmp	r3, r2
 80069e0:	d00e      	beq.n	8006a00 <HAL_TIM_Base_Start+0x70>
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	4a1e      	ldr	r2, [pc, #120]	@ (8006a60 <HAL_TIM_Base_Start+0xd0>)
 80069e8:	4293      	cmp	r3, r2
 80069ea:	d009      	beq.n	8006a00 <HAL_TIM_Base_Start+0x70>
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	4a1c      	ldr	r2, [pc, #112]	@ (8006a64 <HAL_TIM_Base_Start+0xd4>)
 80069f2:	4293      	cmp	r3, r2
 80069f4:	d004      	beq.n	8006a00 <HAL_TIM_Base_Start+0x70>
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	4a1b      	ldr	r2, [pc, #108]	@ (8006a68 <HAL_TIM_Base_Start+0xd8>)
 80069fc:	4293      	cmp	r3, r2
 80069fe:	d115      	bne.n	8006a2c <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	689a      	ldr	r2, [r3, #8]
 8006a06:	4b19      	ldr	r3, [pc, #100]	@ (8006a6c <HAL_TIM_Base_Start+0xdc>)
 8006a08:	4013      	ands	r3, r2
 8006a0a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	2b06      	cmp	r3, #6
 8006a10:	d015      	beq.n	8006a3e <HAL_TIM_Base_Start+0xae>
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006a18:	d011      	beq.n	8006a3e <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	681a      	ldr	r2, [r3, #0]
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	f042 0201 	orr.w	r2, r2, #1
 8006a28:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a2a:	e008      	b.n	8006a3e <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	681a      	ldr	r2, [r3, #0]
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	f042 0201 	orr.w	r2, r2, #1
 8006a3a:	601a      	str	r2, [r3, #0]
 8006a3c:	e000      	b.n	8006a40 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a3e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006a40:	2300      	movs	r3, #0
}
 8006a42:	4618      	mov	r0, r3
 8006a44:	3714      	adds	r7, #20
 8006a46:	46bd      	mov	sp, r7
 8006a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4c:	4770      	bx	lr
 8006a4e:	bf00      	nop
 8006a50:	40012c00 	.word	0x40012c00
 8006a54:	40000400 	.word	0x40000400
 8006a58:	40000800 	.word	0x40000800
 8006a5c:	40000c00 	.word	0x40000c00
 8006a60:	40013400 	.word	0x40013400
 8006a64:	40014000 	.word	0x40014000
 8006a68:	40015000 	.word	0x40015000
 8006a6c:	00010007 	.word	0x00010007

08006a70 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006a70:	b480      	push	{r7}
 8006a72:	b085      	sub	sp, #20
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006a7e:	b2db      	uxtb	r3, r3
 8006a80:	2b01      	cmp	r3, #1
 8006a82:	d001      	beq.n	8006a88 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006a84:	2301      	movs	r3, #1
 8006a86:	e054      	b.n	8006b32 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2202      	movs	r2, #2
 8006a8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	68da      	ldr	r2, [r3, #12]
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f042 0201 	orr.w	r2, r2, #1
 8006a9e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	4a26      	ldr	r2, [pc, #152]	@ (8006b40 <HAL_TIM_Base_Start_IT+0xd0>)
 8006aa6:	4293      	cmp	r3, r2
 8006aa8:	d022      	beq.n	8006af0 <HAL_TIM_Base_Start_IT+0x80>
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006ab2:	d01d      	beq.n	8006af0 <HAL_TIM_Base_Start_IT+0x80>
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	4a22      	ldr	r2, [pc, #136]	@ (8006b44 <HAL_TIM_Base_Start_IT+0xd4>)
 8006aba:	4293      	cmp	r3, r2
 8006abc:	d018      	beq.n	8006af0 <HAL_TIM_Base_Start_IT+0x80>
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	4a21      	ldr	r2, [pc, #132]	@ (8006b48 <HAL_TIM_Base_Start_IT+0xd8>)
 8006ac4:	4293      	cmp	r3, r2
 8006ac6:	d013      	beq.n	8006af0 <HAL_TIM_Base_Start_IT+0x80>
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	4a1f      	ldr	r2, [pc, #124]	@ (8006b4c <HAL_TIM_Base_Start_IT+0xdc>)
 8006ace:	4293      	cmp	r3, r2
 8006ad0:	d00e      	beq.n	8006af0 <HAL_TIM_Base_Start_IT+0x80>
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	4a1e      	ldr	r2, [pc, #120]	@ (8006b50 <HAL_TIM_Base_Start_IT+0xe0>)
 8006ad8:	4293      	cmp	r3, r2
 8006ada:	d009      	beq.n	8006af0 <HAL_TIM_Base_Start_IT+0x80>
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	4a1c      	ldr	r2, [pc, #112]	@ (8006b54 <HAL_TIM_Base_Start_IT+0xe4>)
 8006ae2:	4293      	cmp	r3, r2
 8006ae4:	d004      	beq.n	8006af0 <HAL_TIM_Base_Start_IT+0x80>
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	4a1b      	ldr	r2, [pc, #108]	@ (8006b58 <HAL_TIM_Base_Start_IT+0xe8>)
 8006aec:	4293      	cmp	r3, r2
 8006aee:	d115      	bne.n	8006b1c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	689a      	ldr	r2, [r3, #8]
 8006af6:	4b19      	ldr	r3, [pc, #100]	@ (8006b5c <HAL_TIM_Base_Start_IT+0xec>)
 8006af8:	4013      	ands	r3, r2
 8006afa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	2b06      	cmp	r3, #6
 8006b00:	d015      	beq.n	8006b2e <HAL_TIM_Base_Start_IT+0xbe>
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006b08:	d011      	beq.n	8006b2e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	681a      	ldr	r2, [r3, #0]
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	f042 0201 	orr.w	r2, r2, #1
 8006b18:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b1a:	e008      	b.n	8006b2e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	681a      	ldr	r2, [r3, #0]
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f042 0201 	orr.w	r2, r2, #1
 8006b2a:	601a      	str	r2, [r3, #0]
 8006b2c:	e000      	b.n	8006b30 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b2e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006b30:	2300      	movs	r3, #0
}
 8006b32:	4618      	mov	r0, r3
 8006b34:	3714      	adds	r7, #20
 8006b36:	46bd      	mov	sp, r7
 8006b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3c:	4770      	bx	lr
 8006b3e:	bf00      	nop
 8006b40:	40012c00 	.word	0x40012c00
 8006b44:	40000400 	.word	0x40000400
 8006b48:	40000800 	.word	0x40000800
 8006b4c:	40000c00 	.word	0x40000c00
 8006b50:	40013400 	.word	0x40013400
 8006b54:	40014000 	.word	0x40014000
 8006b58:	40015000 	.word	0x40015000
 8006b5c:	00010007 	.word	0x00010007

08006b60 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b082      	sub	sp, #8
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d101      	bne.n	8006b72 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006b6e:	2301      	movs	r3, #1
 8006b70:	e049      	b.n	8006c06 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006b78:	b2db      	uxtb	r3, r3
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d106      	bne.n	8006b8c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	2200      	movs	r2, #0
 8006b82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006b86:	6878      	ldr	r0, [r7, #4]
 8006b88:	f7fd fc8e 	bl	80044a8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2202      	movs	r2, #2
 8006b90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681a      	ldr	r2, [r3, #0]
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	3304      	adds	r3, #4
 8006b9c:	4619      	mov	r1, r3
 8006b9e:	4610      	mov	r0, r2
 8006ba0:	f000 fe1e 	bl	80077e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2201      	movs	r2, #1
 8006ba8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2201      	movs	r2, #1
 8006bb0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2201      	movs	r2, #1
 8006bb8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2201      	movs	r2, #1
 8006bc0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2201      	movs	r2, #1
 8006bc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2201      	movs	r2, #1
 8006bd0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2201      	movs	r2, #1
 8006bd8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2201      	movs	r2, #1
 8006be0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2201      	movs	r2, #1
 8006be8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2201      	movs	r2, #1
 8006bf0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2201      	movs	r2, #1
 8006bf8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2201      	movs	r2, #1
 8006c00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006c04:	2300      	movs	r3, #0
}
 8006c06:	4618      	mov	r0, r3
 8006c08:	3708      	adds	r7, #8
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	bd80      	pop	{r7, pc}
	...

08006c10 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b084      	sub	sp, #16
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
 8006c18:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006c1a:	683b      	ldr	r3, [r7, #0]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d109      	bne.n	8006c34 <HAL_TIM_PWM_Start+0x24>
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006c26:	b2db      	uxtb	r3, r3
 8006c28:	2b01      	cmp	r3, #1
 8006c2a:	bf14      	ite	ne
 8006c2c:	2301      	movne	r3, #1
 8006c2e:	2300      	moveq	r3, #0
 8006c30:	b2db      	uxtb	r3, r3
 8006c32:	e03c      	b.n	8006cae <HAL_TIM_PWM_Start+0x9e>
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	2b04      	cmp	r3, #4
 8006c38:	d109      	bne.n	8006c4e <HAL_TIM_PWM_Start+0x3e>
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006c40:	b2db      	uxtb	r3, r3
 8006c42:	2b01      	cmp	r3, #1
 8006c44:	bf14      	ite	ne
 8006c46:	2301      	movne	r3, #1
 8006c48:	2300      	moveq	r3, #0
 8006c4a:	b2db      	uxtb	r3, r3
 8006c4c:	e02f      	b.n	8006cae <HAL_TIM_PWM_Start+0x9e>
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	2b08      	cmp	r3, #8
 8006c52:	d109      	bne.n	8006c68 <HAL_TIM_PWM_Start+0x58>
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006c5a:	b2db      	uxtb	r3, r3
 8006c5c:	2b01      	cmp	r3, #1
 8006c5e:	bf14      	ite	ne
 8006c60:	2301      	movne	r3, #1
 8006c62:	2300      	moveq	r3, #0
 8006c64:	b2db      	uxtb	r3, r3
 8006c66:	e022      	b.n	8006cae <HAL_TIM_PWM_Start+0x9e>
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	2b0c      	cmp	r3, #12
 8006c6c:	d109      	bne.n	8006c82 <HAL_TIM_PWM_Start+0x72>
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006c74:	b2db      	uxtb	r3, r3
 8006c76:	2b01      	cmp	r3, #1
 8006c78:	bf14      	ite	ne
 8006c7a:	2301      	movne	r3, #1
 8006c7c:	2300      	moveq	r3, #0
 8006c7e:	b2db      	uxtb	r3, r3
 8006c80:	e015      	b.n	8006cae <HAL_TIM_PWM_Start+0x9e>
 8006c82:	683b      	ldr	r3, [r7, #0]
 8006c84:	2b10      	cmp	r3, #16
 8006c86:	d109      	bne.n	8006c9c <HAL_TIM_PWM_Start+0x8c>
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006c8e:	b2db      	uxtb	r3, r3
 8006c90:	2b01      	cmp	r3, #1
 8006c92:	bf14      	ite	ne
 8006c94:	2301      	movne	r3, #1
 8006c96:	2300      	moveq	r3, #0
 8006c98:	b2db      	uxtb	r3, r3
 8006c9a:	e008      	b.n	8006cae <HAL_TIM_PWM_Start+0x9e>
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8006ca2:	b2db      	uxtb	r3, r3
 8006ca4:	2b01      	cmp	r3, #1
 8006ca6:	bf14      	ite	ne
 8006ca8:	2301      	movne	r3, #1
 8006caa:	2300      	moveq	r3, #0
 8006cac:	b2db      	uxtb	r3, r3
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d001      	beq.n	8006cb6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006cb2:	2301      	movs	r3, #1
 8006cb4:	e0a6      	b.n	8006e04 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006cb6:	683b      	ldr	r3, [r7, #0]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d104      	bne.n	8006cc6 <HAL_TIM_PWM_Start+0xb6>
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2202      	movs	r2, #2
 8006cc0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006cc4:	e023      	b.n	8006d0e <HAL_TIM_PWM_Start+0xfe>
 8006cc6:	683b      	ldr	r3, [r7, #0]
 8006cc8:	2b04      	cmp	r3, #4
 8006cca:	d104      	bne.n	8006cd6 <HAL_TIM_PWM_Start+0xc6>
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2202      	movs	r2, #2
 8006cd0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006cd4:	e01b      	b.n	8006d0e <HAL_TIM_PWM_Start+0xfe>
 8006cd6:	683b      	ldr	r3, [r7, #0]
 8006cd8:	2b08      	cmp	r3, #8
 8006cda:	d104      	bne.n	8006ce6 <HAL_TIM_PWM_Start+0xd6>
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2202      	movs	r2, #2
 8006ce0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006ce4:	e013      	b.n	8006d0e <HAL_TIM_PWM_Start+0xfe>
 8006ce6:	683b      	ldr	r3, [r7, #0]
 8006ce8:	2b0c      	cmp	r3, #12
 8006cea:	d104      	bne.n	8006cf6 <HAL_TIM_PWM_Start+0xe6>
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	2202      	movs	r2, #2
 8006cf0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006cf4:	e00b      	b.n	8006d0e <HAL_TIM_PWM_Start+0xfe>
 8006cf6:	683b      	ldr	r3, [r7, #0]
 8006cf8:	2b10      	cmp	r3, #16
 8006cfa:	d104      	bne.n	8006d06 <HAL_TIM_PWM_Start+0xf6>
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	2202      	movs	r2, #2
 8006d00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006d04:	e003      	b.n	8006d0e <HAL_TIM_PWM_Start+0xfe>
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	2202      	movs	r2, #2
 8006d0a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	2201      	movs	r2, #1
 8006d14:	6839      	ldr	r1, [r7, #0]
 8006d16:	4618      	mov	r0, r3
 8006d18:	f001 f9dc 	bl	80080d4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	4a3a      	ldr	r2, [pc, #232]	@ (8006e0c <HAL_TIM_PWM_Start+0x1fc>)
 8006d22:	4293      	cmp	r3, r2
 8006d24:	d018      	beq.n	8006d58 <HAL_TIM_PWM_Start+0x148>
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	4a39      	ldr	r2, [pc, #228]	@ (8006e10 <HAL_TIM_PWM_Start+0x200>)
 8006d2c:	4293      	cmp	r3, r2
 8006d2e:	d013      	beq.n	8006d58 <HAL_TIM_PWM_Start+0x148>
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	4a37      	ldr	r2, [pc, #220]	@ (8006e14 <HAL_TIM_PWM_Start+0x204>)
 8006d36:	4293      	cmp	r3, r2
 8006d38:	d00e      	beq.n	8006d58 <HAL_TIM_PWM_Start+0x148>
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	4a36      	ldr	r2, [pc, #216]	@ (8006e18 <HAL_TIM_PWM_Start+0x208>)
 8006d40:	4293      	cmp	r3, r2
 8006d42:	d009      	beq.n	8006d58 <HAL_TIM_PWM_Start+0x148>
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	4a34      	ldr	r2, [pc, #208]	@ (8006e1c <HAL_TIM_PWM_Start+0x20c>)
 8006d4a:	4293      	cmp	r3, r2
 8006d4c:	d004      	beq.n	8006d58 <HAL_TIM_PWM_Start+0x148>
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	4a33      	ldr	r2, [pc, #204]	@ (8006e20 <HAL_TIM_PWM_Start+0x210>)
 8006d54:	4293      	cmp	r3, r2
 8006d56:	d101      	bne.n	8006d5c <HAL_TIM_PWM_Start+0x14c>
 8006d58:	2301      	movs	r3, #1
 8006d5a:	e000      	b.n	8006d5e <HAL_TIM_PWM_Start+0x14e>
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d007      	beq.n	8006d72 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006d70:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	4a25      	ldr	r2, [pc, #148]	@ (8006e0c <HAL_TIM_PWM_Start+0x1fc>)
 8006d78:	4293      	cmp	r3, r2
 8006d7a:	d022      	beq.n	8006dc2 <HAL_TIM_PWM_Start+0x1b2>
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d84:	d01d      	beq.n	8006dc2 <HAL_TIM_PWM_Start+0x1b2>
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	4a26      	ldr	r2, [pc, #152]	@ (8006e24 <HAL_TIM_PWM_Start+0x214>)
 8006d8c:	4293      	cmp	r3, r2
 8006d8e:	d018      	beq.n	8006dc2 <HAL_TIM_PWM_Start+0x1b2>
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	4a24      	ldr	r2, [pc, #144]	@ (8006e28 <HAL_TIM_PWM_Start+0x218>)
 8006d96:	4293      	cmp	r3, r2
 8006d98:	d013      	beq.n	8006dc2 <HAL_TIM_PWM_Start+0x1b2>
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	4a23      	ldr	r2, [pc, #140]	@ (8006e2c <HAL_TIM_PWM_Start+0x21c>)
 8006da0:	4293      	cmp	r3, r2
 8006da2:	d00e      	beq.n	8006dc2 <HAL_TIM_PWM_Start+0x1b2>
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	4a19      	ldr	r2, [pc, #100]	@ (8006e10 <HAL_TIM_PWM_Start+0x200>)
 8006daa:	4293      	cmp	r3, r2
 8006dac:	d009      	beq.n	8006dc2 <HAL_TIM_PWM_Start+0x1b2>
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	4a18      	ldr	r2, [pc, #96]	@ (8006e14 <HAL_TIM_PWM_Start+0x204>)
 8006db4:	4293      	cmp	r3, r2
 8006db6:	d004      	beq.n	8006dc2 <HAL_TIM_PWM_Start+0x1b2>
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	4a18      	ldr	r2, [pc, #96]	@ (8006e20 <HAL_TIM_PWM_Start+0x210>)
 8006dbe:	4293      	cmp	r3, r2
 8006dc0:	d115      	bne.n	8006dee <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	689a      	ldr	r2, [r3, #8]
 8006dc8:	4b19      	ldr	r3, [pc, #100]	@ (8006e30 <HAL_TIM_PWM_Start+0x220>)
 8006dca:	4013      	ands	r3, r2
 8006dcc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	2b06      	cmp	r3, #6
 8006dd2:	d015      	beq.n	8006e00 <HAL_TIM_PWM_Start+0x1f0>
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006dda:	d011      	beq.n	8006e00 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	681a      	ldr	r2, [r3, #0]
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	f042 0201 	orr.w	r2, r2, #1
 8006dea:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006dec:	e008      	b.n	8006e00 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	681a      	ldr	r2, [r3, #0]
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	f042 0201 	orr.w	r2, r2, #1
 8006dfc:	601a      	str	r2, [r3, #0]
 8006dfe:	e000      	b.n	8006e02 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e00:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006e02:	2300      	movs	r3, #0
}
 8006e04:	4618      	mov	r0, r3
 8006e06:	3710      	adds	r7, #16
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	bd80      	pop	{r7, pc}
 8006e0c:	40012c00 	.word	0x40012c00
 8006e10:	40013400 	.word	0x40013400
 8006e14:	40014000 	.word	0x40014000
 8006e18:	40014400 	.word	0x40014400
 8006e1c:	40014800 	.word	0x40014800
 8006e20:	40015000 	.word	0x40015000
 8006e24:	40000400 	.word	0x40000400
 8006e28:	40000800 	.word	0x40000800
 8006e2c:	40000c00 	.word	0x40000c00
 8006e30:	00010007 	.word	0x00010007

08006e34 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8006e34:	b580      	push	{r7, lr}
 8006e36:	b086      	sub	sp, #24
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
 8006e3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d101      	bne.n	8006e48 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006e44:	2301      	movs	r3, #1
 8006e46:	e097      	b.n	8006f78 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006e4e:	b2db      	uxtb	r3, r3
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d106      	bne.n	8006e62 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2200      	movs	r2, #0
 8006e58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006e5c:	6878      	ldr	r0, [r7, #4]
 8006e5e:	f7fd fa2d 	bl	80042bc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	2202      	movs	r2, #2
 8006e66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	689b      	ldr	r3, [r3, #8]
 8006e70:	687a      	ldr	r2, [r7, #4]
 8006e72:	6812      	ldr	r2, [r2, #0]
 8006e74:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8006e78:	f023 0307 	bic.w	r3, r3, #7
 8006e7c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681a      	ldr	r2, [r3, #0]
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	3304      	adds	r3, #4
 8006e86:	4619      	mov	r1, r3
 8006e88:	4610      	mov	r0, r2
 8006e8a:	f000 fca9 	bl	80077e0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	689b      	ldr	r3, [r3, #8]
 8006e94:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	699b      	ldr	r3, [r3, #24]
 8006e9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	6a1b      	ldr	r3, [r3, #32]
 8006ea4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006ea6:	683b      	ldr	r3, [r7, #0]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	697a      	ldr	r2, [r7, #20]
 8006eac:	4313      	orrs	r3, r2
 8006eae:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006eb0:	693b      	ldr	r3, [r7, #16]
 8006eb2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006eb6:	f023 0303 	bic.w	r3, r3, #3
 8006eba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006ebc:	683b      	ldr	r3, [r7, #0]
 8006ebe:	689a      	ldr	r2, [r3, #8]
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	699b      	ldr	r3, [r3, #24]
 8006ec4:	021b      	lsls	r3, r3, #8
 8006ec6:	4313      	orrs	r3, r2
 8006ec8:	693a      	ldr	r2, [r7, #16]
 8006eca:	4313      	orrs	r3, r2
 8006ecc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006ece:	693b      	ldr	r3, [r7, #16]
 8006ed0:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8006ed4:	f023 030c 	bic.w	r3, r3, #12
 8006ed8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006eda:	693b      	ldr	r3, [r7, #16]
 8006edc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006ee0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006ee4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006ee6:	683b      	ldr	r3, [r7, #0]
 8006ee8:	68da      	ldr	r2, [r3, #12]
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	69db      	ldr	r3, [r3, #28]
 8006eee:	021b      	lsls	r3, r3, #8
 8006ef0:	4313      	orrs	r3, r2
 8006ef2:	693a      	ldr	r2, [r7, #16]
 8006ef4:	4313      	orrs	r3, r2
 8006ef6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	691b      	ldr	r3, [r3, #16]
 8006efc:	011a      	lsls	r2, r3, #4
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	6a1b      	ldr	r3, [r3, #32]
 8006f02:	031b      	lsls	r3, r3, #12
 8006f04:	4313      	orrs	r3, r2
 8006f06:	693a      	ldr	r2, [r7, #16]
 8006f08:	4313      	orrs	r3, r2
 8006f0a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8006f12:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8006f1a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006f1c:	683b      	ldr	r3, [r7, #0]
 8006f1e:	685a      	ldr	r2, [r3, #4]
 8006f20:	683b      	ldr	r3, [r7, #0]
 8006f22:	695b      	ldr	r3, [r3, #20]
 8006f24:	011b      	lsls	r3, r3, #4
 8006f26:	4313      	orrs	r3, r2
 8006f28:	68fa      	ldr	r2, [r7, #12]
 8006f2a:	4313      	orrs	r3, r2
 8006f2c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	697a      	ldr	r2, [r7, #20]
 8006f34:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	693a      	ldr	r2, [r7, #16]
 8006f3c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	68fa      	ldr	r2, [r7, #12]
 8006f44:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	2201      	movs	r2, #1
 8006f4a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	2201      	movs	r2, #1
 8006f52:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	2201      	movs	r2, #1
 8006f5a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	2201      	movs	r2, #1
 8006f62:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	2201      	movs	r2, #1
 8006f6a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	2201      	movs	r2, #1
 8006f72:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006f76:	2300      	movs	r3, #0
}
 8006f78:	4618      	mov	r0, r3
 8006f7a:	3718      	adds	r7, #24
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	bd80      	pop	{r7, pc}

08006f80 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b084      	sub	sp, #16
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
 8006f88:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006f90:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006f98:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006fa0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006fa8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006faa:	683b      	ldr	r3, [r7, #0]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d110      	bne.n	8006fd2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006fb0:	7bfb      	ldrb	r3, [r7, #15]
 8006fb2:	2b01      	cmp	r3, #1
 8006fb4:	d102      	bne.n	8006fbc <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006fb6:	7b7b      	ldrb	r3, [r7, #13]
 8006fb8:	2b01      	cmp	r3, #1
 8006fba:	d001      	beq.n	8006fc0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006fbc:	2301      	movs	r3, #1
 8006fbe:	e069      	b.n	8007094 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	2202      	movs	r2, #2
 8006fc4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	2202      	movs	r2, #2
 8006fcc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006fd0:	e031      	b.n	8007036 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006fd2:	683b      	ldr	r3, [r7, #0]
 8006fd4:	2b04      	cmp	r3, #4
 8006fd6:	d110      	bne.n	8006ffa <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006fd8:	7bbb      	ldrb	r3, [r7, #14]
 8006fda:	2b01      	cmp	r3, #1
 8006fdc:	d102      	bne.n	8006fe4 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006fde:	7b3b      	ldrb	r3, [r7, #12]
 8006fe0:	2b01      	cmp	r3, #1
 8006fe2:	d001      	beq.n	8006fe8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8006fe4:	2301      	movs	r3, #1
 8006fe6:	e055      	b.n	8007094 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2202      	movs	r2, #2
 8006fec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	2202      	movs	r2, #2
 8006ff4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006ff8:	e01d      	b.n	8007036 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006ffa:	7bfb      	ldrb	r3, [r7, #15]
 8006ffc:	2b01      	cmp	r3, #1
 8006ffe:	d108      	bne.n	8007012 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007000:	7bbb      	ldrb	r3, [r7, #14]
 8007002:	2b01      	cmp	r3, #1
 8007004:	d105      	bne.n	8007012 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007006:	7b7b      	ldrb	r3, [r7, #13]
 8007008:	2b01      	cmp	r3, #1
 800700a:	d102      	bne.n	8007012 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800700c:	7b3b      	ldrb	r3, [r7, #12]
 800700e:	2b01      	cmp	r3, #1
 8007010:	d001      	beq.n	8007016 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8007012:	2301      	movs	r3, #1
 8007014:	e03e      	b.n	8007094 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	2202      	movs	r2, #2
 800701a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	2202      	movs	r2, #2
 8007022:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	2202      	movs	r2, #2
 800702a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	2202      	movs	r2, #2
 8007032:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8007036:	683b      	ldr	r3, [r7, #0]
 8007038:	2b00      	cmp	r3, #0
 800703a:	d003      	beq.n	8007044 <HAL_TIM_Encoder_Start+0xc4>
 800703c:	683b      	ldr	r3, [r7, #0]
 800703e:	2b04      	cmp	r3, #4
 8007040:	d008      	beq.n	8007054 <HAL_TIM_Encoder_Start+0xd4>
 8007042:	e00f      	b.n	8007064 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	2201      	movs	r2, #1
 800704a:	2100      	movs	r1, #0
 800704c:	4618      	mov	r0, r3
 800704e:	f001 f841 	bl	80080d4 <TIM_CCxChannelCmd>
      break;
 8007052:	e016      	b.n	8007082 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	2201      	movs	r2, #1
 800705a:	2104      	movs	r1, #4
 800705c:	4618      	mov	r0, r3
 800705e:	f001 f839 	bl	80080d4 <TIM_CCxChannelCmd>
      break;
 8007062:	e00e      	b.n	8007082 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	2201      	movs	r2, #1
 800706a:	2100      	movs	r1, #0
 800706c:	4618      	mov	r0, r3
 800706e:	f001 f831 	bl	80080d4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	2201      	movs	r2, #1
 8007078:	2104      	movs	r1, #4
 800707a:	4618      	mov	r0, r3
 800707c:	f001 f82a 	bl	80080d4 <TIM_CCxChannelCmd>
      break;
 8007080:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	681a      	ldr	r2, [r3, #0]
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	f042 0201 	orr.w	r2, r2, #1
 8007090:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007092:	2300      	movs	r3, #0
}
 8007094:	4618      	mov	r0, r3
 8007096:	3710      	adds	r7, #16
 8007098:	46bd      	mov	sp, r7
 800709a:	bd80      	pop	{r7, pc}

0800709c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800709c:	b580      	push	{r7, lr}
 800709e:	b084      	sub	sp, #16
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	68db      	ldr	r3, [r3, #12]
 80070aa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	691b      	ldr	r3, [r3, #16]
 80070b2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80070b4:	68bb      	ldr	r3, [r7, #8]
 80070b6:	f003 0302 	and.w	r3, r3, #2
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d020      	beq.n	8007100 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	f003 0302 	and.w	r3, r3, #2
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d01b      	beq.n	8007100 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	f06f 0202 	mvn.w	r2, #2
 80070d0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	2201      	movs	r2, #1
 80070d6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	699b      	ldr	r3, [r3, #24]
 80070de:	f003 0303 	and.w	r3, r3, #3
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d003      	beq.n	80070ee <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80070e6:	6878      	ldr	r0, [r7, #4]
 80070e8:	f000 fb5c 	bl	80077a4 <HAL_TIM_IC_CaptureCallback>
 80070ec:	e005      	b.n	80070fa <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80070ee:	6878      	ldr	r0, [r7, #4]
 80070f0:	f000 fb4e 	bl	8007790 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80070f4:	6878      	ldr	r0, [r7, #4]
 80070f6:	f000 fb5f 	bl	80077b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	2200      	movs	r2, #0
 80070fe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007100:	68bb      	ldr	r3, [r7, #8]
 8007102:	f003 0304 	and.w	r3, r3, #4
 8007106:	2b00      	cmp	r3, #0
 8007108:	d020      	beq.n	800714c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	f003 0304 	and.w	r3, r3, #4
 8007110:	2b00      	cmp	r3, #0
 8007112:	d01b      	beq.n	800714c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	f06f 0204 	mvn.w	r2, #4
 800711c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	2202      	movs	r2, #2
 8007122:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	699b      	ldr	r3, [r3, #24]
 800712a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800712e:	2b00      	cmp	r3, #0
 8007130:	d003      	beq.n	800713a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007132:	6878      	ldr	r0, [r7, #4]
 8007134:	f000 fb36 	bl	80077a4 <HAL_TIM_IC_CaptureCallback>
 8007138:	e005      	b.n	8007146 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800713a:	6878      	ldr	r0, [r7, #4]
 800713c:	f000 fb28 	bl	8007790 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007140:	6878      	ldr	r0, [r7, #4]
 8007142:	f000 fb39 	bl	80077b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	2200      	movs	r2, #0
 800714a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800714c:	68bb      	ldr	r3, [r7, #8]
 800714e:	f003 0308 	and.w	r3, r3, #8
 8007152:	2b00      	cmp	r3, #0
 8007154:	d020      	beq.n	8007198 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	f003 0308 	and.w	r3, r3, #8
 800715c:	2b00      	cmp	r3, #0
 800715e:	d01b      	beq.n	8007198 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	f06f 0208 	mvn.w	r2, #8
 8007168:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	2204      	movs	r2, #4
 800716e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	69db      	ldr	r3, [r3, #28]
 8007176:	f003 0303 	and.w	r3, r3, #3
 800717a:	2b00      	cmp	r3, #0
 800717c:	d003      	beq.n	8007186 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800717e:	6878      	ldr	r0, [r7, #4]
 8007180:	f000 fb10 	bl	80077a4 <HAL_TIM_IC_CaptureCallback>
 8007184:	e005      	b.n	8007192 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007186:	6878      	ldr	r0, [r7, #4]
 8007188:	f000 fb02 	bl	8007790 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800718c:	6878      	ldr	r0, [r7, #4]
 800718e:	f000 fb13 	bl	80077b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	2200      	movs	r2, #0
 8007196:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007198:	68bb      	ldr	r3, [r7, #8]
 800719a:	f003 0310 	and.w	r3, r3, #16
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d020      	beq.n	80071e4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	f003 0310 	and.w	r3, r3, #16
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d01b      	beq.n	80071e4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	f06f 0210 	mvn.w	r2, #16
 80071b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	2208      	movs	r2, #8
 80071ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	69db      	ldr	r3, [r3, #28]
 80071c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d003      	beq.n	80071d2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80071ca:	6878      	ldr	r0, [r7, #4]
 80071cc:	f000 faea 	bl	80077a4 <HAL_TIM_IC_CaptureCallback>
 80071d0:	e005      	b.n	80071de <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80071d2:	6878      	ldr	r0, [r7, #4]
 80071d4:	f000 fadc 	bl	8007790 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80071d8:	6878      	ldr	r0, [r7, #4]
 80071da:	f000 faed 	bl	80077b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	2200      	movs	r2, #0
 80071e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80071e4:	68bb      	ldr	r3, [r7, #8]
 80071e6:	f003 0301 	and.w	r3, r3, #1
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d00c      	beq.n	8007208 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	f003 0301 	and.w	r3, r3, #1
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d007      	beq.n	8007208 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	f06f 0201 	mvn.w	r2, #1
 8007200:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007202:	6878      	ldr	r0, [r7, #4]
 8007204:	f7fb fc18 	bl	8002a38 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007208:	68bb      	ldr	r3, [r7, #8]
 800720a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800720e:	2b00      	cmp	r3, #0
 8007210:	d104      	bne.n	800721c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8007212:	68bb      	ldr	r3, [r7, #8]
 8007214:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007218:	2b00      	cmp	r3, #0
 800721a:	d00c      	beq.n	8007236 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007222:	2b00      	cmp	r3, #0
 8007224:	d007      	beq.n	8007236 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800722e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007230:	6878      	ldr	r0, [r7, #4]
 8007232:	f001 f8a9 	bl	8008388 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8007236:	68bb      	ldr	r3, [r7, #8]
 8007238:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800723c:	2b00      	cmp	r3, #0
 800723e:	d00c      	beq.n	800725a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007246:	2b00      	cmp	r3, #0
 8007248:	d007      	beq.n	800725a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8007252:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007254:	6878      	ldr	r0, [r7, #4]
 8007256:	f001 f8a1 	bl	800839c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800725a:	68bb      	ldr	r3, [r7, #8]
 800725c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007260:	2b00      	cmp	r3, #0
 8007262:	d00c      	beq.n	800727e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800726a:	2b00      	cmp	r3, #0
 800726c:	d007      	beq.n	800727e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007276:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007278:	6878      	ldr	r0, [r7, #4]
 800727a:	f000 faa7 	bl	80077cc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800727e:	68bb      	ldr	r3, [r7, #8]
 8007280:	f003 0320 	and.w	r3, r3, #32
 8007284:	2b00      	cmp	r3, #0
 8007286:	d00c      	beq.n	80072a2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	f003 0320 	and.w	r3, r3, #32
 800728e:	2b00      	cmp	r3, #0
 8007290:	d007      	beq.n	80072a2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	f06f 0220 	mvn.w	r2, #32
 800729a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800729c:	6878      	ldr	r0, [r7, #4]
 800729e:	f001 f869 	bl	8008374 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80072a2:	68bb      	ldr	r3, [r7, #8]
 80072a4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d00c      	beq.n	80072c6 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d007      	beq.n	80072c6 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 80072be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80072c0:	6878      	ldr	r0, [r7, #4]
 80072c2:	f001 f875 	bl	80083b0 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80072c6:	68bb      	ldr	r3, [r7, #8]
 80072c8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d00c      	beq.n	80072ea <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d007      	beq.n	80072ea <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 80072e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80072e4:	6878      	ldr	r0, [r7, #4]
 80072e6:	f001 f86d 	bl	80083c4 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80072ea:	68bb      	ldr	r3, [r7, #8]
 80072ec:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d00c      	beq.n	800730e <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d007      	beq.n	800730e <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8007306:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8007308:	6878      	ldr	r0, [r7, #4]
 800730a:	f001 f865 	bl	80083d8 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800730e:	68bb      	ldr	r3, [r7, #8]
 8007310:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007314:	2b00      	cmp	r3, #0
 8007316:	d00c      	beq.n	8007332 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800731e:	2b00      	cmp	r3, #0
 8007320:	d007      	beq.n	8007332 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800732a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800732c:	6878      	ldr	r0, [r7, #4]
 800732e:	f001 f85d 	bl	80083ec <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007332:	bf00      	nop
 8007334:	3710      	adds	r7, #16
 8007336:	46bd      	mov	sp, r7
 8007338:	bd80      	pop	{r7, pc}
	...

0800733c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800733c:	b580      	push	{r7, lr}
 800733e:	b086      	sub	sp, #24
 8007340:	af00      	add	r7, sp, #0
 8007342:	60f8      	str	r0, [r7, #12]
 8007344:	60b9      	str	r1, [r7, #8]
 8007346:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007348:	2300      	movs	r3, #0
 800734a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007352:	2b01      	cmp	r3, #1
 8007354:	d101      	bne.n	800735a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007356:	2302      	movs	r3, #2
 8007358:	e0ff      	b.n	800755a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	2201      	movs	r2, #1
 800735e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	2b14      	cmp	r3, #20
 8007366:	f200 80f0 	bhi.w	800754a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800736a:	a201      	add	r2, pc, #4	@ (adr r2, 8007370 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800736c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007370:	080073c5 	.word	0x080073c5
 8007374:	0800754b 	.word	0x0800754b
 8007378:	0800754b 	.word	0x0800754b
 800737c:	0800754b 	.word	0x0800754b
 8007380:	08007405 	.word	0x08007405
 8007384:	0800754b 	.word	0x0800754b
 8007388:	0800754b 	.word	0x0800754b
 800738c:	0800754b 	.word	0x0800754b
 8007390:	08007447 	.word	0x08007447
 8007394:	0800754b 	.word	0x0800754b
 8007398:	0800754b 	.word	0x0800754b
 800739c:	0800754b 	.word	0x0800754b
 80073a0:	08007487 	.word	0x08007487
 80073a4:	0800754b 	.word	0x0800754b
 80073a8:	0800754b 	.word	0x0800754b
 80073ac:	0800754b 	.word	0x0800754b
 80073b0:	080074c9 	.word	0x080074c9
 80073b4:	0800754b 	.word	0x0800754b
 80073b8:	0800754b 	.word	0x0800754b
 80073bc:	0800754b 	.word	0x0800754b
 80073c0:	08007509 	.word	0x08007509
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	68b9      	ldr	r1, [r7, #8]
 80073ca:	4618      	mov	r0, r3
 80073cc:	f000 fabc 	bl	8007948 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	699a      	ldr	r2, [r3, #24]
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	f042 0208 	orr.w	r2, r2, #8
 80073de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	699a      	ldr	r2, [r3, #24]
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	f022 0204 	bic.w	r2, r2, #4
 80073ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	6999      	ldr	r1, [r3, #24]
 80073f6:	68bb      	ldr	r3, [r7, #8]
 80073f8:	691a      	ldr	r2, [r3, #16]
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	430a      	orrs	r2, r1
 8007400:	619a      	str	r2, [r3, #24]
      break;
 8007402:	e0a5      	b.n	8007550 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	68b9      	ldr	r1, [r7, #8]
 800740a:	4618      	mov	r0, r3
 800740c:	f000 fb36 	bl	8007a7c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	699a      	ldr	r2, [r3, #24]
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800741e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	699a      	ldr	r2, [r3, #24]
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800742e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	6999      	ldr	r1, [r3, #24]
 8007436:	68bb      	ldr	r3, [r7, #8]
 8007438:	691b      	ldr	r3, [r3, #16]
 800743a:	021a      	lsls	r2, r3, #8
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	430a      	orrs	r2, r1
 8007442:	619a      	str	r2, [r3, #24]
      break;
 8007444:	e084      	b.n	8007550 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	68b9      	ldr	r1, [r7, #8]
 800744c:	4618      	mov	r0, r3
 800744e:	f000 fba9 	bl	8007ba4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	69da      	ldr	r2, [r3, #28]
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	f042 0208 	orr.w	r2, r2, #8
 8007460:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	69da      	ldr	r2, [r3, #28]
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	f022 0204 	bic.w	r2, r2, #4
 8007470:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	69d9      	ldr	r1, [r3, #28]
 8007478:	68bb      	ldr	r3, [r7, #8]
 800747a:	691a      	ldr	r2, [r3, #16]
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	430a      	orrs	r2, r1
 8007482:	61da      	str	r2, [r3, #28]
      break;
 8007484:	e064      	b.n	8007550 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	68b9      	ldr	r1, [r7, #8]
 800748c:	4618      	mov	r0, r3
 800748e:	f000 fc1b 	bl	8007cc8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	69da      	ldr	r2, [r3, #28]
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80074a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	69da      	ldr	r2, [r3, #28]
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80074b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	69d9      	ldr	r1, [r3, #28]
 80074b8:	68bb      	ldr	r3, [r7, #8]
 80074ba:	691b      	ldr	r3, [r3, #16]
 80074bc:	021a      	lsls	r2, r3, #8
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	430a      	orrs	r2, r1
 80074c4:	61da      	str	r2, [r3, #28]
      break;
 80074c6:	e043      	b.n	8007550 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	68b9      	ldr	r1, [r7, #8]
 80074ce:	4618      	mov	r0, r3
 80074d0:	f000 fc8e 	bl	8007df0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	f042 0208 	orr.w	r2, r2, #8
 80074e2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	f022 0204 	bic.w	r2, r2, #4
 80074f2:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80074fa:	68bb      	ldr	r3, [r7, #8]
 80074fc:	691a      	ldr	r2, [r3, #16]
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	430a      	orrs	r2, r1
 8007504:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8007506:	e023      	b.n	8007550 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	68b9      	ldr	r1, [r7, #8]
 800750e:	4618      	mov	r0, r3
 8007510:	f000 fcd8 	bl	8007ec4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007522:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007532:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800753a:	68bb      	ldr	r3, [r7, #8]
 800753c:	691b      	ldr	r3, [r3, #16]
 800753e:	021a      	lsls	r2, r3, #8
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	430a      	orrs	r2, r1
 8007546:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8007548:	e002      	b.n	8007550 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800754a:	2301      	movs	r3, #1
 800754c:	75fb      	strb	r3, [r7, #23]
      break;
 800754e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	2200      	movs	r2, #0
 8007554:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007558:	7dfb      	ldrb	r3, [r7, #23]
}
 800755a:	4618      	mov	r0, r3
 800755c:	3718      	adds	r7, #24
 800755e:	46bd      	mov	sp, r7
 8007560:	bd80      	pop	{r7, pc}
 8007562:	bf00      	nop

08007564 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007564:	b580      	push	{r7, lr}
 8007566:	b084      	sub	sp, #16
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]
 800756c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800756e:	2300      	movs	r3, #0
 8007570:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007578:	2b01      	cmp	r3, #1
 800757a:	d101      	bne.n	8007580 <HAL_TIM_ConfigClockSource+0x1c>
 800757c:	2302      	movs	r3, #2
 800757e:	e0f6      	b.n	800776e <HAL_TIM_ConfigClockSource+0x20a>
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2201      	movs	r2, #1
 8007584:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2202      	movs	r2, #2
 800758c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	689b      	ldr	r3, [r3, #8]
 8007596:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007598:	68bb      	ldr	r3, [r7, #8]
 800759a:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800759e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80075a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80075a4:	68bb      	ldr	r3, [r7, #8]
 80075a6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80075aa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	68ba      	ldr	r2, [r7, #8]
 80075b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80075b4:	683b      	ldr	r3, [r7, #0]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	4a6f      	ldr	r2, [pc, #444]	@ (8007778 <HAL_TIM_ConfigClockSource+0x214>)
 80075ba:	4293      	cmp	r3, r2
 80075bc:	f000 80c1 	beq.w	8007742 <HAL_TIM_ConfigClockSource+0x1de>
 80075c0:	4a6d      	ldr	r2, [pc, #436]	@ (8007778 <HAL_TIM_ConfigClockSource+0x214>)
 80075c2:	4293      	cmp	r3, r2
 80075c4:	f200 80c6 	bhi.w	8007754 <HAL_TIM_ConfigClockSource+0x1f0>
 80075c8:	4a6c      	ldr	r2, [pc, #432]	@ (800777c <HAL_TIM_ConfigClockSource+0x218>)
 80075ca:	4293      	cmp	r3, r2
 80075cc:	f000 80b9 	beq.w	8007742 <HAL_TIM_ConfigClockSource+0x1de>
 80075d0:	4a6a      	ldr	r2, [pc, #424]	@ (800777c <HAL_TIM_ConfigClockSource+0x218>)
 80075d2:	4293      	cmp	r3, r2
 80075d4:	f200 80be 	bhi.w	8007754 <HAL_TIM_ConfigClockSource+0x1f0>
 80075d8:	4a69      	ldr	r2, [pc, #420]	@ (8007780 <HAL_TIM_ConfigClockSource+0x21c>)
 80075da:	4293      	cmp	r3, r2
 80075dc:	f000 80b1 	beq.w	8007742 <HAL_TIM_ConfigClockSource+0x1de>
 80075e0:	4a67      	ldr	r2, [pc, #412]	@ (8007780 <HAL_TIM_ConfigClockSource+0x21c>)
 80075e2:	4293      	cmp	r3, r2
 80075e4:	f200 80b6 	bhi.w	8007754 <HAL_TIM_ConfigClockSource+0x1f0>
 80075e8:	4a66      	ldr	r2, [pc, #408]	@ (8007784 <HAL_TIM_ConfigClockSource+0x220>)
 80075ea:	4293      	cmp	r3, r2
 80075ec:	f000 80a9 	beq.w	8007742 <HAL_TIM_ConfigClockSource+0x1de>
 80075f0:	4a64      	ldr	r2, [pc, #400]	@ (8007784 <HAL_TIM_ConfigClockSource+0x220>)
 80075f2:	4293      	cmp	r3, r2
 80075f4:	f200 80ae 	bhi.w	8007754 <HAL_TIM_ConfigClockSource+0x1f0>
 80075f8:	4a63      	ldr	r2, [pc, #396]	@ (8007788 <HAL_TIM_ConfigClockSource+0x224>)
 80075fa:	4293      	cmp	r3, r2
 80075fc:	f000 80a1 	beq.w	8007742 <HAL_TIM_ConfigClockSource+0x1de>
 8007600:	4a61      	ldr	r2, [pc, #388]	@ (8007788 <HAL_TIM_ConfigClockSource+0x224>)
 8007602:	4293      	cmp	r3, r2
 8007604:	f200 80a6 	bhi.w	8007754 <HAL_TIM_ConfigClockSource+0x1f0>
 8007608:	4a60      	ldr	r2, [pc, #384]	@ (800778c <HAL_TIM_ConfigClockSource+0x228>)
 800760a:	4293      	cmp	r3, r2
 800760c:	f000 8099 	beq.w	8007742 <HAL_TIM_ConfigClockSource+0x1de>
 8007610:	4a5e      	ldr	r2, [pc, #376]	@ (800778c <HAL_TIM_ConfigClockSource+0x228>)
 8007612:	4293      	cmp	r3, r2
 8007614:	f200 809e 	bhi.w	8007754 <HAL_TIM_ConfigClockSource+0x1f0>
 8007618:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800761c:	f000 8091 	beq.w	8007742 <HAL_TIM_ConfigClockSource+0x1de>
 8007620:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8007624:	f200 8096 	bhi.w	8007754 <HAL_TIM_ConfigClockSource+0x1f0>
 8007628:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800762c:	f000 8089 	beq.w	8007742 <HAL_TIM_ConfigClockSource+0x1de>
 8007630:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007634:	f200 808e 	bhi.w	8007754 <HAL_TIM_ConfigClockSource+0x1f0>
 8007638:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800763c:	d03e      	beq.n	80076bc <HAL_TIM_ConfigClockSource+0x158>
 800763e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007642:	f200 8087 	bhi.w	8007754 <HAL_TIM_ConfigClockSource+0x1f0>
 8007646:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800764a:	f000 8086 	beq.w	800775a <HAL_TIM_ConfigClockSource+0x1f6>
 800764e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007652:	d87f      	bhi.n	8007754 <HAL_TIM_ConfigClockSource+0x1f0>
 8007654:	2b70      	cmp	r3, #112	@ 0x70
 8007656:	d01a      	beq.n	800768e <HAL_TIM_ConfigClockSource+0x12a>
 8007658:	2b70      	cmp	r3, #112	@ 0x70
 800765a:	d87b      	bhi.n	8007754 <HAL_TIM_ConfigClockSource+0x1f0>
 800765c:	2b60      	cmp	r3, #96	@ 0x60
 800765e:	d050      	beq.n	8007702 <HAL_TIM_ConfigClockSource+0x19e>
 8007660:	2b60      	cmp	r3, #96	@ 0x60
 8007662:	d877      	bhi.n	8007754 <HAL_TIM_ConfigClockSource+0x1f0>
 8007664:	2b50      	cmp	r3, #80	@ 0x50
 8007666:	d03c      	beq.n	80076e2 <HAL_TIM_ConfigClockSource+0x17e>
 8007668:	2b50      	cmp	r3, #80	@ 0x50
 800766a:	d873      	bhi.n	8007754 <HAL_TIM_ConfigClockSource+0x1f0>
 800766c:	2b40      	cmp	r3, #64	@ 0x40
 800766e:	d058      	beq.n	8007722 <HAL_TIM_ConfigClockSource+0x1be>
 8007670:	2b40      	cmp	r3, #64	@ 0x40
 8007672:	d86f      	bhi.n	8007754 <HAL_TIM_ConfigClockSource+0x1f0>
 8007674:	2b30      	cmp	r3, #48	@ 0x30
 8007676:	d064      	beq.n	8007742 <HAL_TIM_ConfigClockSource+0x1de>
 8007678:	2b30      	cmp	r3, #48	@ 0x30
 800767a:	d86b      	bhi.n	8007754 <HAL_TIM_ConfigClockSource+0x1f0>
 800767c:	2b20      	cmp	r3, #32
 800767e:	d060      	beq.n	8007742 <HAL_TIM_ConfigClockSource+0x1de>
 8007680:	2b20      	cmp	r3, #32
 8007682:	d867      	bhi.n	8007754 <HAL_TIM_ConfigClockSource+0x1f0>
 8007684:	2b00      	cmp	r3, #0
 8007686:	d05c      	beq.n	8007742 <HAL_TIM_ConfigClockSource+0x1de>
 8007688:	2b10      	cmp	r3, #16
 800768a:	d05a      	beq.n	8007742 <HAL_TIM_ConfigClockSource+0x1de>
 800768c:	e062      	b.n	8007754 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007692:	683b      	ldr	r3, [r7, #0]
 8007694:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007696:	683b      	ldr	r3, [r7, #0]
 8007698:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800769a:	683b      	ldr	r3, [r7, #0]
 800769c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800769e:	f000 fcf9 	bl	8008094 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	689b      	ldr	r3, [r3, #8]
 80076a8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80076aa:	68bb      	ldr	r3, [r7, #8]
 80076ac:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80076b0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	68ba      	ldr	r2, [r7, #8]
 80076b8:	609a      	str	r2, [r3, #8]
      break;
 80076ba:	e04f      	b.n	800775c <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80076c0:	683b      	ldr	r3, [r7, #0]
 80076c2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80076c4:	683b      	ldr	r3, [r7, #0]
 80076c6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80076c8:	683b      	ldr	r3, [r7, #0]
 80076ca:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80076cc:	f000 fce2 	bl	8008094 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	689a      	ldr	r2, [r3, #8]
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80076de:	609a      	str	r2, [r3, #8]
      break;
 80076e0:	e03c      	b.n	800775c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80076e6:	683b      	ldr	r3, [r7, #0]
 80076e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80076ea:	683b      	ldr	r3, [r7, #0]
 80076ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80076ee:	461a      	mov	r2, r3
 80076f0:	f000 fc54 	bl	8007f9c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	2150      	movs	r1, #80	@ 0x50
 80076fa:	4618      	mov	r0, r3
 80076fc:	f000 fcad 	bl	800805a <TIM_ITRx_SetConfig>
      break;
 8007700:	e02c      	b.n	800775c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007706:	683b      	ldr	r3, [r7, #0]
 8007708:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800770a:	683b      	ldr	r3, [r7, #0]
 800770c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800770e:	461a      	mov	r2, r3
 8007710:	f000 fc73 	bl	8007ffa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	2160      	movs	r1, #96	@ 0x60
 800771a:	4618      	mov	r0, r3
 800771c:	f000 fc9d 	bl	800805a <TIM_ITRx_SetConfig>
      break;
 8007720:	e01c      	b.n	800775c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007726:	683b      	ldr	r3, [r7, #0]
 8007728:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800772a:	683b      	ldr	r3, [r7, #0]
 800772c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800772e:	461a      	mov	r2, r3
 8007730:	f000 fc34 	bl	8007f9c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	2140      	movs	r1, #64	@ 0x40
 800773a:	4618      	mov	r0, r3
 800773c:	f000 fc8d 	bl	800805a <TIM_ITRx_SetConfig>
      break;
 8007740:	e00c      	b.n	800775c <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681a      	ldr	r2, [r3, #0]
 8007746:	683b      	ldr	r3, [r7, #0]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	4619      	mov	r1, r3
 800774c:	4610      	mov	r0, r2
 800774e:	f000 fc84 	bl	800805a <TIM_ITRx_SetConfig>
      break;
 8007752:	e003      	b.n	800775c <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8007754:	2301      	movs	r3, #1
 8007756:	73fb      	strb	r3, [r7, #15]
      break;
 8007758:	e000      	b.n	800775c <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800775a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2201      	movs	r2, #1
 8007760:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	2200      	movs	r2, #0
 8007768:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800776c:	7bfb      	ldrb	r3, [r7, #15]
}
 800776e:	4618      	mov	r0, r3
 8007770:	3710      	adds	r7, #16
 8007772:	46bd      	mov	sp, r7
 8007774:	bd80      	pop	{r7, pc}
 8007776:	bf00      	nop
 8007778:	00100070 	.word	0x00100070
 800777c:	00100060 	.word	0x00100060
 8007780:	00100050 	.word	0x00100050
 8007784:	00100040 	.word	0x00100040
 8007788:	00100030 	.word	0x00100030
 800778c:	00100020 	.word	0x00100020

08007790 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007790:	b480      	push	{r7}
 8007792:	b083      	sub	sp, #12
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007798:	bf00      	nop
 800779a:	370c      	adds	r7, #12
 800779c:	46bd      	mov	sp, r7
 800779e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a2:	4770      	bx	lr

080077a4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80077a4:	b480      	push	{r7}
 80077a6:	b083      	sub	sp, #12
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80077ac:	bf00      	nop
 80077ae:	370c      	adds	r7, #12
 80077b0:	46bd      	mov	sp, r7
 80077b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b6:	4770      	bx	lr

080077b8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80077b8:	b480      	push	{r7}
 80077ba:	b083      	sub	sp, #12
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80077c0:	bf00      	nop
 80077c2:	370c      	adds	r7, #12
 80077c4:	46bd      	mov	sp, r7
 80077c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ca:	4770      	bx	lr

080077cc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80077cc:	b480      	push	{r7}
 80077ce:	b083      	sub	sp, #12
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80077d4:	bf00      	nop
 80077d6:	370c      	adds	r7, #12
 80077d8:	46bd      	mov	sp, r7
 80077da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077de:	4770      	bx	lr

080077e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80077e0:	b480      	push	{r7}
 80077e2:	b085      	sub	sp, #20
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]
 80077e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	4a4c      	ldr	r2, [pc, #304]	@ (8007924 <TIM_Base_SetConfig+0x144>)
 80077f4:	4293      	cmp	r3, r2
 80077f6:	d017      	beq.n	8007828 <TIM_Base_SetConfig+0x48>
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80077fe:	d013      	beq.n	8007828 <TIM_Base_SetConfig+0x48>
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	4a49      	ldr	r2, [pc, #292]	@ (8007928 <TIM_Base_SetConfig+0x148>)
 8007804:	4293      	cmp	r3, r2
 8007806:	d00f      	beq.n	8007828 <TIM_Base_SetConfig+0x48>
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	4a48      	ldr	r2, [pc, #288]	@ (800792c <TIM_Base_SetConfig+0x14c>)
 800780c:	4293      	cmp	r3, r2
 800780e:	d00b      	beq.n	8007828 <TIM_Base_SetConfig+0x48>
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	4a47      	ldr	r2, [pc, #284]	@ (8007930 <TIM_Base_SetConfig+0x150>)
 8007814:	4293      	cmp	r3, r2
 8007816:	d007      	beq.n	8007828 <TIM_Base_SetConfig+0x48>
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	4a46      	ldr	r2, [pc, #280]	@ (8007934 <TIM_Base_SetConfig+0x154>)
 800781c:	4293      	cmp	r3, r2
 800781e:	d003      	beq.n	8007828 <TIM_Base_SetConfig+0x48>
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	4a45      	ldr	r2, [pc, #276]	@ (8007938 <TIM_Base_SetConfig+0x158>)
 8007824:	4293      	cmp	r3, r2
 8007826:	d108      	bne.n	800783a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800782e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007830:	683b      	ldr	r3, [r7, #0]
 8007832:	685b      	ldr	r3, [r3, #4]
 8007834:	68fa      	ldr	r2, [r7, #12]
 8007836:	4313      	orrs	r3, r2
 8007838:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	4a39      	ldr	r2, [pc, #228]	@ (8007924 <TIM_Base_SetConfig+0x144>)
 800783e:	4293      	cmp	r3, r2
 8007840:	d023      	beq.n	800788a <TIM_Base_SetConfig+0xaa>
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007848:	d01f      	beq.n	800788a <TIM_Base_SetConfig+0xaa>
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	4a36      	ldr	r2, [pc, #216]	@ (8007928 <TIM_Base_SetConfig+0x148>)
 800784e:	4293      	cmp	r3, r2
 8007850:	d01b      	beq.n	800788a <TIM_Base_SetConfig+0xaa>
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	4a35      	ldr	r2, [pc, #212]	@ (800792c <TIM_Base_SetConfig+0x14c>)
 8007856:	4293      	cmp	r3, r2
 8007858:	d017      	beq.n	800788a <TIM_Base_SetConfig+0xaa>
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	4a34      	ldr	r2, [pc, #208]	@ (8007930 <TIM_Base_SetConfig+0x150>)
 800785e:	4293      	cmp	r3, r2
 8007860:	d013      	beq.n	800788a <TIM_Base_SetConfig+0xaa>
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	4a33      	ldr	r2, [pc, #204]	@ (8007934 <TIM_Base_SetConfig+0x154>)
 8007866:	4293      	cmp	r3, r2
 8007868:	d00f      	beq.n	800788a <TIM_Base_SetConfig+0xaa>
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	4a33      	ldr	r2, [pc, #204]	@ (800793c <TIM_Base_SetConfig+0x15c>)
 800786e:	4293      	cmp	r3, r2
 8007870:	d00b      	beq.n	800788a <TIM_Base_SetConfig+0xaa>
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	4a32      	ldr	r2, [pc, #200]	@ (8007940 <TIM_Base_SetConfig+0x160>)
 8007876:	4293      	cmp	r3, r2
 8007878:	d007      	beq.n	800788a <TIM_Base_SetConfig+0xaa>
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	4a31      	ldr	r2, [pc, #196]	@ (8007944 <TIM_Base_SetConfig+0x164>)
 800787e:	4293      	cmp	r3, r2
 8007880:	d003      	beq.n	800788a <TIM_Base_SetConfig+0xaa>
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	4a2c      	ldr	r2, [pc, #176]	@ (8007938 <TIM_Base_SetConfig+0x158>)
 8007886:	4293      	cmp	r3, r2
 8007888:	d108      	bne.n	800789c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007890:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007892:	683b      	ldr	r3, [r7, #0]
 8007894:	68db      	ldr	r3, [r3, #12]
 8007896:	68fa      	ldr	r2, [r7, #12]
 8007898:	4313      	orrs	r3, r2
 800789a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80078a2:	683b      	ldr	r3, [r7, #0]
 80078a4:	695b      	ldr	r3, [r3, #20]
 80078a6:	4313      	orrs	r3, r2
 80078a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	68fa      	ldr	r2, [r7, #12]
 80078ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80078b0:	683b      	ldr	r3, [r7, #0]
 80078b2:	689a      	ldr	r2, [r3, #8]
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80078b8:	683b      	ldr	r3, [r7, #0]
 80078ba:	681a      	ldr	r2, [r3, #0]
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	4a18      	ldr	r2, [pc, #96]	@ (8007924 <TIM_Base_SetConfig+0x144>)
 80078c4:	4293      	cmp	r3, r2
 80078c6:	d013      	beq.n	80078f0 <TIM_Base_SetConfig+0x110>
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	4a1a      	ldr	r2, [pc, #104]	@ (8007934 <TIM_Base_SetConfig+0x154>)
 80078cc:	4293      	cmp	r3, r2
 80078ce:	d00f      	beq.n	80078f0 <TIM_Base_SetConfig+0x110>
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	4a1a      	ldr	r2, [pc, #104]	@ (800793c <TIM_Base_SetConfig+0x15c>)
 80078d4:	4293      	cmp	r3, r2
 80078d6:	d00b      	beq.n	80078f0 <TIM_Base_SetConfig+0x110>
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	4a19      	ldr	r2, [pc, #100]	@ (8007940 <TIM_Base_SetConfig+0x160>)
 80078dc:	4293      	cmp	r3, r2
 80078de:	d007      	beq.n	80078f0 <TIM_Base_SetConfig+0x110>
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	4a18      	ldr	r2, [pc, #96]	@ (8007944 <TIM_Base_SetConfig+0x164>)
 80078e4:	4293      	cmp	r3, r2
 80078e6:	d003      	beq.n	80078f0 <TIM_Base_SetConfig+0x110>
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	4a13      	ldr	r2, [pc, #76]	@ (8007938 <TIM_Base_SetConfig+0x158>)
 80078ec:	4293      	cmp	r3, r2
 80078ee:	d103      	bne.n	80078f8 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80078f0:	683b      	ldr	r3, [r7, #0]
 80078f2:	691a      	ldr	r2, [r3, #16]
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	2201      	movs	r2, #1
 80078fc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	691b      	ldr	r3, [r3, #16]
 8007902:	f003 0301 	and.w	r3, r3, #1
 8007906:	2b01      	cmp	r3, #1
 8007908:	d105      	bne.n	8007916 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	691b      	ldr	r3, [r3, #16]
 800790e:	f023 0201 	bic.w	r2, r3, #1
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	611a      	str	r2, [r3, #16]
  }
}
 8007916:	bf00      	nop
 8007918:	3714      	adds	r7, #20
 800791a:	46bd      	mov	sp, r7
 800791c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007920:	4770      	bx	lr
 8007922:	bf00      	nop
 8007924:	40012c00 	.word	0x40012c00
 8007928:	40000400 	.word	0x40000400
 800792c:	40000800 	.word	0x40000800
 8007930:	40000c00 	.word	0x40000c00
 8007934:	40013400 	.word	0x40013400
 8007938:	40015000 	.word	0x40015000
 800793c:	40014000 	.word	0x40014000
 8007940:	40014400 	.word	0x40014400
 8007944:	40014800 	.word	0x40014800

08007948 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007948:	b480      	push	{r7}
 800794a:	b087      	sub	sp, #28
 800794c:	af00      	add	r7, sp, #0
 800794e:	6078      	str	r0, [r7, #4]
 8007950:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	6a1b      	ldr	r3, [r3, #32]
 8007956:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	6a1b      	ldr	r3, [r3, #32]
 800795c:	f023 0201 	bic.w	r2, r3, #1
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	685b      	ldr	r3, [r3, #4]
 8007968:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	699b      	ldr	r3, [r3, #24]
 800796e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007976:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800797a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	f023 0303 	bic.w	r3, r3, #3
 8007982:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007984:	683b      	ldr	r3, [r7, #0]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	68fa      	ldr	r2, [r7, #12]
 800798a:	4313      	orrs	r3, r2
 800798c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800798e:	697b      	ldr	r3, [r7, #20]
 8007990:	f023 0302 	bic.w	r3, r3, #2
 8007994:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007996:	683b      	ldr	r3, [r7, #0]
 8007998:	689b      	ldr	r3, [r3, #8]
 800799a:	697a      	ldr	r2, [r7, #20]
 800799c:	4313      	orrs	r3, r2
 800799e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	4a30      	ldr	r2, [pc, #192]	@ (8007a64 <TIM_OC1_SetConfig+0x11c>)
 80079a4:	4293      	cmp	r3, r2
 80079a6:	d013      	beq.n	80079d0 <TIM_OC1_SetConfig+0x88>
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	4a2f      	ldr	r2, [pc, #188]	@ (8007a68 <TIM_OC1_SetConfig+0x120>)
 80079ac:	4293      	cmp	r3, r2
 80079ae:	d00f      	beq.n	80079d0 <TIM_OC1_SetConfig+0x88>
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	4a2e      	ldr	r2, [pc, #184]	@ (8007a6c <TIM_OC1_SetConfig+0x124>)
 80079b4:	4293      	cmp	r3, r2
 80079b6:	d00b      	beq.n	80079d0 <TIM_OC1_SetConfig+0x88>
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	4a2d      	ldr	r2, [pc, #180]	@ (8007a70 <TIM_OC1_SetConfig+0x128>)
 80079bc:	4293      	cmp	r3, r2
 80079be:	d007      	beq.n	80079d0 <TIM_OC1_SetConfig+0x88>
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	4a2c      	ldr	r2, [pc, #176]	@ (8007a74 <TIM_OC1_SetConfig+0x12c>)
 80079c4:	4293      	cmp	r3, r2
 80079c6:	d003      	beq.n	80079d0 <TIM_OC1_SetConfig+0x88>
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	4a2b      	ldr	r2, [pc, #172]	@ (8007a78 <TIM_OC1_SetConfig+0x130>)
 80079cc:	4293      	cmp	r3, r2
 80079ce:	d10c      	bne.n	80079ea <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80079d0:	697b      	ldr	r3, [r7, #20]
 80079d2:	f023 0308 	bic.w	r3, r3, #8
 80079d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80079d8:	683b      	ldr	r3, [r7, #0]
 80079da:	68db      	ldr	r3, [r3, #12]
 80079dc:	697a      	ldr	r2, [r7, #20]
 80079de:	4313      	orrs	r3, r2
 80079e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80079e2:	697b      	ldr	r3, [r7, #20]
 80079e4:	f023 0304 	bic.w	r3, r3, #4
 80079e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	4a1d      	ldr	r2, [pc, #116]	@ (8007a64 <TIM_OC1_SetConfig+0x11c>)
 80079ee:	4293      	cmp	r3, r2
 80079f0:	d013      	beq.n	8007a1a <TIM_OC1_SetConfig+0xd2>
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	4a1c      	ldr	r2, [pc, #112]	@ (8007a68 <TIM_OC1_SetConfig+0x120>)
 80079f6:	4293      	cmp	r3, r2
 80079f8:	d00f      	beq.n	8007a1a <TIM_OC1_SetConfig+0xd2>
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	4a1b      	ldr	r2, [pc, #108]	@ (8007a6c <TIM_OC1_SetConfig+0x124>)
 80079fe:	4293      	cmp	r3, r2
 8007a00:	d00b      	beq.n	8007a1a <TIM_OC1_SetConfig+0xd2>
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	4a1a      	ldr	r2, [pc, #104]	@ (8007a70 <TIM_OC1_SetConfig+0x128>)
 8007a06:	4293      	cmp	r3, r2
 8007a08:	d007      	beq.n	8007a1a <TIM_OC1_SetConfig+0xd2>
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	4a19      	ldr	r2, [pc, #100]	@ (8007a74 <TIM_OC1_SetConfig+0x12c>)
 8007a0e:	4293      	cmp	r3, r2
 8007a10:	d003      	beq.n	8007a1a <TIM_OC1_SetConfig+0xd2>
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	4a18      	ldr	r2, [pc, #96]	@ (8007a78 <TIM_OC1_SetConfig+0x130>)
 8007a16:	4293      	cmp	r3, r2
 8007a18:	d111      	bne.n	8007a3e <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007a1a:	693b      	ldr	r3, [r7, #16]
 8007a1c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007a20:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007a22:	693b      	ldr	r3, [r7, #16]
 8007a24:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007a28:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007a2a:	683b      	ldr	r3, [r7, #0]
 8007a2c:	695b      	ldr	r3, [r3, #20]
 8007a2e:	693a      	ldr	r2, [r7, #16]
 8007a30:	4313      	orrs	r3, r2
 8007a32:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007a34:	683b      	ldr	r3, [r7, #0]
 8007a36:	699b      	ldr	r3, [r3, #24]
 8007a38:	693a      	ldr	r2, [r7, #16]
 8007a3a:	4313      	orrs	r3, r2
 8007a3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	693a      	ldr	r2, [r7, #16]
 8007a42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	68fa      	ldr	r2, [r7, #12]
 8007a48:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007a4a:	683b      	ldr	r3, [r7, #0]
 8007a4c:	685a      	ldr	r2, [r3, #4]
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	697a      	ldr	r2, [r7, #20]
 8007a56:	621a      	str	r2, [r3, #32]
}
 8007a58:	bf00      	nop
 8007a5a:	371c      	adds	r7, #28
 8007a5c:	46bd      	mov	sp, r7
 8007a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a62:	4770      	bx	lr
 8007a64:	40012c00 	.word	0x40012c00
 8007a68:	40013400 	.word	0x40013400
 8007a6c:	40014000 	.word	0x40014000
 8007a70:	40014400 	.word	0x40014400
 8007a74:	40014800 	.word	0x40014800
 8007a78:	40015000 	.word	0x40015000

08007a7c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007a7c:	b480      	push	{r7}
 8007a7e:	b087      	sub	sp, #28
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
 8007a84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	6a1b      	ldr	r3, [r3, #32]
 8007a8a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	6a1b      	ldr	r3, [r3, #32]
 8007a90:	f023 0210 	bic.w	r2, r3, #16
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	685b      	ldr	r3, [r3, #4]
 8007a9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	699b      	ldr	r3, [r3, #24]
 8007aa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007aaa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007aae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007ab6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007ab8:	683b      	ldr	r3, [r7, #0]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	021b      	lsls	r3, r3, #8
 8007abe:	68fa      	ldr	r2, [r7, #12]
 8007ac0:	4313      	orrs	r3, r2
 8007ac2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007ac4:	697b      	ldr	r3, [r7, #20]
 8007ac6:	f023 0320 	bic.w	r3, r3, #32
 8007aca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007acc:	683b      	ldr	r3, [r7, #0]
 8007ace:	689b      	ldr	r3, [r3, #8]
 8007ad0:	011b      	lsls	r3, r3, #4
 8007ad2:	697a      	ldr	r2, [r7, #20]
 8007ad4:	4313      	orrs	r3, r2
 8007ad6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	4a2c      	ldr	r2, [pc, #176]	@ (8007b8c <TIM_OC2_SetConfig+0x110>)
 8007adc:	4293      	cmp	r3, r2
 8007ade:	d007      	beq.n	8007af0 <TIM_OC2_SetConfig+0x74>
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	4a2b      	ldr	r2, [pc, #172]	@ (8007b90 <TIM_OC2_SetConfig+0x114>)
 8007ae4:	4293      	cmp	r3, r2
 8007ae6:	d003      	beq.n	8007af0 <TIM_OC2_SetConfig+0x74>
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	4a2a      	ldr	r2, [pc, #168]	@ (8007b94 <TIM_OC2_SetConfig+0x118>)
 8007aec:	4293      	cmp	r3, r2
 8007aee:	d10d      	bne.n	8007b0c <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007af0:	697b      	ldr	r3, [r7, #20]
 8007af2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007af6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007af8:	683b      	ldr	r3, [r7, #0]
 8007afa:	68db      	ldr	r3, [r3, #12]
 8007afc:	011b      	lsls	r3, r3, #4
 8007afe:	697a      	ldr	r2, [r7, #20]
 8007b00:	4313      	orrs	r3, r2
 8007b02:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007b04:	697b      	ldr	r3, [r7, #20]
 8007b06:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007b0a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	4a1f      	ldr	r2, [pc, #124]	@ (8007b8c <TIM_OC2_SetConfig+0x110>)
 8007b10:	4293      	cmp	r3, r2
 8007b12:	d013      	beq.n	8007b3c <TIM_OC2_SetConfig+0xc0>
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	4a1e      	ldr	r2, [pc, #120]	@ (8007b90 <TIM_OC2_SetConfig+0x114>)
 8007b18:	4293      	cmp	r3, r2
 8007b1a:	d00f      	beq.n	8007b3c <TIM_OC2_SetConfig+0xc0>
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	4a1e      	ldr	r2, [pc, #120]	@ (8007b98 <TIM_OC2_SetConfig+0x11c>)
 8007b20:	4293      	cmp	r3, r2
 8007b22:	d00b      	beq.n	8007b3c <TIM_OC2_SetConfig+0xc0>
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	4a1d      	ldr	r2, [pc, #116]	@ (8007b9c <TIM_OC2_SetConfig+0x120>)
 8007b28:	4293      	cmp	r3, r2
 8007b2a:	d007      	beq.n	8007b3c <TIM_OC2_SetConfig+0xc0>
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	4a1c      	ldr	r2, [pc, #112]	@ (8007ba0 <TIM_OC2_SetConfig+0x124>)
 8007b30:	4293      	cmp	r3, r2
 8007b32:	d003      	beq.n	8007b3c <TIM_OC2_SetConfig+0xc0>
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	4a17      	ldr	r2, [pc, #92]	@ (8007b94 <TIM_OC2_SetConfig+0x118>)
 8007b38:	4293      	cmp	r3, r2
 8007b3a:	d113      	bne.n	8007b64 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007b3c:	693b      	ldr	r3, [r7, #16]
 8007b3e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007b42:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007b44:	693b      	ldr	r3, [r7, #16]
 8007b46:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007b4a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007b4c:	683b      	ldr	r3, [r7, #0]
 8007b4e:	695b      	ldr	r3, [r3, #20]
 8007b50:	009b      	lsls	r3, r3, #2
 8007b52:	693a      	ldr	r2, [r7, #16]
 8007b54:	4313      	orrs	r3, r2
 8007b56:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007b58:	683b      	ldr	r3, [r7, #0]
 8007b5a:	699b      	ldr	r3, [r3, #24]
 8007b5c:	009b      	lsls	r3, r3, #2
 8007b5e:	693a      	ldr	r2, [r7, #16]
 8007b60:	4313      	orrs	r3, r2
 8007b62:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	693a      	ldr	r2, [r7, #16]
 8007b68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	68fa      	ldr	r2, [r7, #12]
 8007b6e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007b70:	683b      	ldr	r3, [r7, #0]
 8007b72:	685a      	ldr	r2, [r3, #4]
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	697a      	ldr	r2, [r7, #20]
 8007b7c:	621a      	str	r2, [r3, #32]
}
 8007b7e:	bf00      	nop
 8007b80:	371c      	adds	r7, #28
 8007b82:	46bd      	mov	sp, r7
 8007b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b88:	4770      	bx	lr
 8007b8a:	bf00      	nop
 8007b8c:	40012c00 	.word	0x40012c00
 8007b90:	40013400 	.word	0x40013400
 8007b94:	40015000 	.word	0x40015000
 8007b98:	40014000 	.word	0x40014000
 8007b9c:	40014400 	.word	0x40014400
 8007ba0:	40014800 	.word	0x40014800

08007ba4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007ba4:	b480      	push	{r7}
 8007ba6:	b087      	sub	sp, #28
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	6078      	str	r0, [r7, #4]
 8007bac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	6a1b      	ldr	r3, [r3, #32]
 8007bb2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	6a1b      	ldr	r3, [r3, #32]
 8007bb8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	685b      	ldr	r3, [r3, #4]
 8007bc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	69db      	ldr	r3, [r3, #28]
 8007bca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007bd2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007bd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	f023 0303 	bic.w	r3, r3, #3
 8007bde:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007be0:	683b      	ldr	r3, [r7, #0]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	68fa      	ldr	r2, [r7, #12]
 8007be6:	4313      	orrs	r3, r2
 8007be8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007bea:	697b      	ldr	r3, [r7, #20]
 8007bec:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007bf0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007bf2:	683b      	ldr	r3, [r7, #0]
 8007bf4:	689b      	ldr	r3, [r3, #8]
 8007bf6:	021b      	lsls	r3, r3, #8
 8007bf8:	697a      	ldr	r2, [r7, #20]
 8007bfa:	4313      	orrs	r3, r2
 8007bfc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	4a2b      	ldr	r2, [pc, #172]	@ (8007cb0 <TIM_OC3_SetConfig+0x10c>)
 8007c02:	4293      	cmp	r3, r2
 8007c04:	d007      	beq.n	8007c16 <TIM_OC3_SetConfig+0x72>
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	4a2a      	ldr	r2, [pc, #168]	@ (8007cb4 <TIM_OC3_SetConfig+0x110>)
 8007c0a:	4293      	cmp	r3, r2
 8007c0c:	d003      	beq.n	8007c16 <TIM_OC3_SetConfig+0x72>
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	4a29      	ldr	r2, [pc, #164]	@ (8007cb8 <TIM_OC3_SetConfig+0x114>)
 8007c12:	4293      	cmp	r3, r2
 8007c14:	d10d      	bne.n	8007c32 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007c16:	697b      	ldr	r3, [r7, #20]
 8007c18:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007c1c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007c1e:	683b      	ldr	r3, [r7, #0]
 8007c20:	68db      	ldr	r3, [r3, #12]
 8007c22:	021b      	lsls	r3, r3, #8
 8007c24:	697a      	ldr	r2, [r7, #20]
 8007c26:	4313      	orrs	r3, r2
 8007c28:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007c2a:	697b      	ldr	r3, [r7, #20]
 8007c2c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007c30:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	4a1e      	ldr	r2, [pc, #120]	@ (8007cb0 <TIM_OC3_SetConfig+0x10c>)
 8007c36:	4293      	cmp	r3, r2
 8007c38:	d013      	beq.n	8007c62 <TIM_OC3_SetConfig+0xbe>
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	4a1d      	ldr	r2, [pc, #116]	@ (8007cb4 <TIM_OC3_SetConfig+0x110>)
 8007c3e:	4293      	cmp	r3, r2
 8007c40:	d00f      	beq.n	8007c62 <TIM_OC3_SetConfig+0xbe>
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	4a1d      	ldr	r2, [pc, #116]	@ (8007cbc <TIM_OC3_SetConfig+0x118>)
 8007c46:	4293      	cmp	r3, r2
 8007c48:	d00b      	beq.n	8007c62 <TIM_OC3_SetConfig+0xbe>
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	4a1c      	ldr	r2, [pc, #112]	@ (8007cc0 <TIM_OC3_SetConfig+0x11c>)
 8007c4e:	4293      	cmp	r3, r2
 8007c50:	d007      	beq.n	8007c62 <TIM_OC3_SetConfig+0xbe>
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	4a1b      	ldr	r2, [pc, #108]	@ (8007cc4 <TIM_OC3_SetConfig+0x120>)
 8007c56:	4293      	cmp	r3, r2
 8007c58:	d003      	beq.n	8007c62 <TIM_OC3_SetConfig+0xbe>
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	4a16      	ldr	r2, [pc, #88]	@ (8007cb8 <TIM_OC3_SetConfig+0x114>)
 8007c5e:	4293      	cmp	r3, r2
 8007c60:	d113      	bne.n	8007c8a <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007c62:	693b      	ldr	r3, [r7, #16]
 8007c64:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007c68:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007c6a:	693b      	ldr	r3, [r7, #16]
 8007c6c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007c70:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007c72:	683b      	ldr	r3, [r7, #0]
 8007c74:	695b      	ldr	r3, [r3, #20]
 8007c76:	011b      	lsls	r3, r3, #4
 8007c78:	693a      	ldr	r2, [r7, #16]
 8007c7a:	4313      	orrs	r3, r2
 8007c7c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007c7e:	683b      	ldr	r3, [r7, #0]
 8007c80:	699b      	ldr	r3, [r3, #24]
 8007c82:	011b      	lsls	r3, r3, #4
 8007c84:	693a      	ldr	r2, [r7, #16]
 8007c86:	4313      	orrs	r3, r2
 8007c88:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	693a      	ldr	r2, [r7, #16]
 8007c8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	68fa      	ldr	r2, [r7, #12]
 8007c94:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007c96:	683b      	ldr	r3, [r7, #0]
 8007c98:	685a      	ldr	r2, [r3, #4]
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	697a      	ldr	r2, [r7, #20]
 8007ca2:	621a      	str	r2, [r3, #32]
}
 8007ca4:	bf00      	nop
 8007ca6:	371c      	adds	r7, #28
 8007ca8:	46bd      	mov	sp, r7
 8007caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cae:	4770      	bx	lr
 8007cb0:	40012c00 	.word	0x40012c00
 8007cb4:	40013400 	.word	0x40013400
 8007cb8:	40015000 	.word	0x40015000
 8007cbc:	40014000 	.word	0x40014000
 8007cc0:	40014400 	.word	0x40014400
 8007cc4:	40014800 	.word	0x40014800

08007cc8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007cc8:	b480      	push	{r7}
 8007cca:	b087      	sub	sp, #28
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	6078      	str	r0, [r7, #4]
 8007cd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	6a1b      	ldr	r3, [r3, #32]
 8007cd6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	6a1b      	ldr	r3, [r3, #32]
 8007cdc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	685b      	ldr	r3, [r3, #4]
 8007ce8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	69db      	ldr	r3, [r3, #28]
 8007cee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007cf6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007cfa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007d02:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007d04:	683b      	ldr	r3, [r7, #0]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	021b      	lsls	r3, r3, #8
 8007d0a:	68fa      	ldr	r2, [r7, #12]
 8007d0c:	4313      	orrs	r3, r2
 8007d0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007d10:	697b      	ldr	r3, [r7, #20]
 8007d12:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007d16:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007d18:	683b      	ldr	r3, [r7, #0]
 8007d1a:	689b      	ldr	r3, [r3, #8]
 8007d1c:	031b      	lsls	r3, r3, #12
 8007d1e:	697a      	ldr	r2, [r7, #20]
 8007d20:	4313      	orrs	r3, r2
 8007d22:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	4a2c      	ldr	r2, [pc, #176]	@ (8007dd8 <TIM_OC4_SetConfig+0x110>)
 8007d28:	4293      	cmp	r3, r2
 8007d2a:	d007      	beq.n	8007d3c <TIM_OC4_SetConfig+0x74>
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	4a2b      	ldr	r2, [pc, #172]	@ (8007ddc <TIM_OC4_SetConfig+0x114>)
 8007d30:	4293      	cmp	r3, r2
 8007d32:	d003      	beq.n	8007d3c <TIM_OC4_SetConfig+0x74>
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	4a2a      	ldr	r2, [pc, #168]	@ (8007de0 <TIM_OC4_SetConfig+0x118>)
 8007d38:	4293      	cmp	r3, r2
 8007d3a:	d10d      	bne.n	8007d58 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8007d3c:	697b      	ldr	r3, [r7, #20]
 8007d3e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007d42:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8007d44:	683b      	ldr	r3, [r7, #0]
 8007d46:	68db      	ldr	r3, [r3, #12]
 8007d48:	031b      	lsls	r3, r3, #12
 8007d4a:	697a      	ldr	r2, [r7, #20]
 8007d4c:	4313      	orrs	r3, r2
 8007d4e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8007d50:	697b      	ldr	r3, [r7, #20]
 8007d52:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007d56:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	4a1f      	ldr	r2, [pc, #124]	@ (8007dd8 <TIM_OC4_SetConfig+0x110>)
 8007d5c:	4293      	cmp	r3, r2
 8007d5e:	d013      	beq.n	8007d88 <TIM_OC4_SetConfig+0xc0>
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	4a1e      	ldr	r2, [pc, #120]	@ (8007ddc <TIM_OC4_SetConfig+0x114>)
 8007d64:	4293      	cmp	r3, r2
 8007d66:	d00f      	beq.n	8007d88 <TIM_OC4_SetConfig+0xc0>
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	4a1e      	ldr	r2, [pc, #120]	@ (8007de4 <TIM_OC4_SetConfig+0x11c>)
 8007d6c:	4293      	cmp	r3, r2
 8007d6e:	d00b      	beq.n	8007d88 <TIM_OC4_SetConfig+0xc0>
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	4a1d      	ldr	r2, [pc, #116]	@ (8007de8 <TIM_OC4_SetConfig+0x120>)
 8007d74:	4293      	cmp	r3, r2
 8007d76:	d007      	beq.n	8007d88 <TIM_OC4_SetConfig+0xc0>
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	4a1c      	ldr	r2, [pc, #112]	@ (8007dec <TIM_OC4_SetConfig+0x124>)
 8007d7c:	4293      	cmp	r3, r2
 8007d7e:	d003      	beq.n	8007d88 <TIM_OC4_SetConfig+0xc0>
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	4a17      	ldr	r2, [pc, #92]	@ (8007de0 <TIM_OC4_SetConfig+0x118>)
 8007d84:	4293      	cmp	r3, r2
 8007d86:	d113      	bne.n	8007db0 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007d88:	693b      	ldr	r3, [r7, #16]
 8007d8a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007d8e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8007d90:	693b      	ldr	r3, [r7, #16]
 8007d92:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007d96:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007d98:	683b      	ldr	r3, [r7, #0]
 8007d9a:	695b      	ldr	r3, [r3, #20]
 8007d9c:	019b      	lsls	r3, r3, #6
 8007d9e:	693a      	ldr	r2, [r7, #16]
 8007da0:	4313      	orrs	r3, r2
 8007da2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8007da4:	683b      	ldr	r3, [r7, #0]
 8007da6:	699b      	ldr	r3, [r3, #24]
 8007da8:	019b      	lsls	r3, r3, #6
 8007daa:	693a      	ldr	r2, [r7, #16]
 8007dac:	4313      	orrs	r3, r2
 8007dae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	693a      	ldr	r2, [r7, #16]
 8007db4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	68fa      	ldr	r2, [r7, #12]
 8007dba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007dbc:	683b      	ldr	r3, [r7, #0]
 8007dbe:	685a      	ldr	r2, [r3, #4]
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	697a      	ldr	r2, [r7, #20]
 8007dc8:	621a      	str	r2, [r3, #32]
}
 8007dca:	bf00      	nop
 8007dcc:	371c      	adds	r7, #28
 8007dce:	46bd      	mov	sp, r7
 8007dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd4:	4770      	bx	lr
 8007dd6:	bf00      	nop
 8007dd8:	40012c00 	.word	0x40012c00
 8007ddc:	40013400 	.word	0x40013400
 8007de0:	40015000 	.word	0x40015000
 8007de4:	40014000 	.word	0x40014000
 8007de8:	40014400 	.word	0x40014400
 8007dec:	40014800 	.word	0x40014800

08007df0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007df0:	b480      	push	{r7}
 8007df2:	b087      	sub	sp, #28
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	6078      	str	r0, [r7, #4]
 8007df8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	6a1b      	ldr	r3, [r3, #32]
 8007dfe:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	6a1b      	ldr	r3, [r3, #32]
 8007e04:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	685b      	ldr	r3, [r3, #4]
 8007e10:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007e16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007e1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007e22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007e24:	683b      	ldr	r3, [r7, #0]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	68fa      	ldr	r2, [r7, #12]
 8007e2a:	4313      	orrs	r3, r2
 8007e2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007e2e:	693b      	ldr	r3, [r7, #16]
 8007e30:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8007e34:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007e36:	683b      	ldr	r3, [r7, #0]
 8007e38:	689b      	ldr	r3, [r3, #8]
 8007e3a:	041b      	lsls	r3, r3, #16
 8007e3c:	693a      	ldr	r2, [r7, #16]
 8007e3e:	4313      	orrs	r3, r2
 8007e40:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	4a19      	ldr	r2, [pc, #100]	@ (8007eac <TIM_OC5_SetConfig+0xbc>)
 8007e46:	4293      	cmp	r3, r2
 8007e48:	d013      	beq.n	8007e72 <TIM_OC5_SetConfig+0x82>
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	4a18      	ldr	r2, [pc, #96]	@ (8007eb0 <TIM_OC5_SetConfig+0xc0>)
 8007e4e:	4293      	cmp	r3, r2
 8007e50:	d00f      	beq.n	8007e72 <TIM_OC5_SetConfig+0x82>
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	4a17      	ldr	r2, [pc, #92]	@ (8007eb4 <TIM_OC5_SetConfig+0xc4>)
 8007e56:	4293      	cmp	r3, r2
 8007e58:	d00b      	beq.n	8007e72 <TIM_OC5_SetConfig+0x82>
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	4a16      	ldr	r2, [pc, #88]	@ (8007eb8 <TIM_OC5_SetConfig+0xc8>)
 8007e5e:	4293      	cmp	r3, r2
 8007e60:	d007      	beq.n	8007e72 <TIM_OC5_SetConfig+0x82>
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	4a15      	ldr	r2, [pc, #84]	@ (8007ebc <TIM_OC5_SetConfig+0xcc>)
 8007e66:	4293      	cmp	r3, r2
 8007e68:	d003      	beq.n	8007e72 <TIM_OC5_SetConfig+0x82>
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	4a14      	ldr	r2, [pc, #80]	@ (8007ec0 <TIM_OC5_SetConfig+0xd0>)
 8007e6e:	4293      	cmp	r3, r2
 8007e70:	d109      	bne.n	8007e86 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007e72:	697b      	ldr	r3, [r7, #20]
 8007e74:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007e78:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007e7a:	683b      	ldr	r3, [r7, #0]
 8007e7c:	695b      	ldr	r3, [r3, #20]
 8007e7e:	021b      	lsls	r3, r3, #8
 8007e80:	697a      	ldr	r2, [r7, #20]
 8007e82:	4313      	orrs	r3, r2
 8007e84:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	697a      	ldr	r2, [r7, #20]
 8007e8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	68fa      	ldr	r2, [r7, #12]
 8007e90:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007e92:	683b      	ldr	r3, [r7, #0]
 8007e94:	685a      	ldr	r2, [r3, #4]
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	693a      	ldr	r2, [r7, #16]
 8007e9e:	621a      	str	r2, [r3, #32]
}
 8007ea0:	bf00      	nop
 8007ea2:	371c      	adds	r7, #28
 8007ea4:	46bd      	mov	sp, r7
 8007ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eaa:	4770      	bx	lr
 8007eac:	40012c00 	.word	0x40012c00
 8007eb0:	40013400 	.word	0x40013400
 8007eb4:	40014000 	.word	0x40014000
 8007eb8:	40014400 	.word	0x40014400
 8007ebc:	40014800 	.word	0x40014800
 8007ec0:	40015000 	.word	0x40015000

08007ec4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007ec4:	b480      	push	{r7}
 8007ec6:	b087      	sub	sp, #28
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	6078      	str	r0, [r7, #4]
 8007ecc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	6a1b      	ldr	r3, [r3, #32]
 8007ed2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	6a1b      	ldr	r3, [r3, #32]
 8007ed8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	685b      	ldr	r3, [r3, #4]
 8007ee4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007eea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007ef2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007ef6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007ef8:	683b      	ldr	r3, [r7, #0]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	021b      	lsls	r3, r3, #8
 8007efe:	68fa      	ldr	r2, [r7, #12]
 8007f00:	4313      	orrs	r3, r2
 8007f02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007f04:	693b      	ldr	r3, [r7, #16]
 8007f06:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007f0a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007f0c:	683b      	ldr	r3, [r7, #0]
 8007f0e:	689b      	ldr	r3, [r3, #8]
 8007f10:	051b      	lsls	r3, r3, #20
 8007f12:	693a      	ldr	r2, [r7, #16]
 8007f14:	4313      	orrs	r3, r2
 8007f16:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	4a1a      	ldr	r2, [pc, #104]	@ (8007f84 <TIM_OC6_SetConfig+0xc0>)
 8007f1c:	4293      	cmp	r3, r2
 8007f1e:	d013      	beq.n	8007f48 <TIM_OC6_SetConfig+0x84>
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	4a19      	ldr	r2, [pc, #100]	@ (8007f88 <TIM_OC6_SetConfig+0xc4>)
 8007f24:	4293      	cmp	r3, r2
 8007f26:	d00f      	beq.n	8007f48 <TIM_OC6_SetConfig+0x84>
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	4a18      	ldr	r2, [pc, #96]	@ (8007f8c <TIM_OC6_SetConfig+0xc8>)
 8007f2c:	4293      	cmp	r3, r2
 8007f2e:	d00b      	beq.n	8007f48 <TIM_OC6_SetConfig+0x84>
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	4a17      	ldr	r2, [pc, #92]	@ (8007f90 <TIM_OC6_SetConfig+0xcc>)
 8007f34:	4293      	cmp	r3, r2
 8007f36:	d007      	beq.n	8007f48 <TIM_OC6_SetConfig+0x84>
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	4a16      	ldr	r2, [pc, #88]	@ (8007f94 <TIM_OC6_SetConfig+0xd0>)
 8007f3c:	4293      	cmp	r3, r2
 8007f3e:	d003      	beq.n	8007f48 <TIM_OC6_SetConfig+0x84>
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	4a15      	ldr	r2, [pc, #84]	@ (8007f98 <TIM_OC6_SetConfig+0xd4>)
 8007f44:	4293      	cmp	r3, r2
 8007f46:	d109      	bne.n	8007f5c <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007f48:	697b      	ldr	r3, [r7, #20]
 8007f4a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007f4e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007f50:	683b      	ldr	r3, [r7, #0]
 8007f52:	695b      	ldr	r3, [r3, #20]
 8007f54:	029b      	lsls	r3, r3, #10
 8007f56:	697a      	ldr	r2, [r7, #20]
 8007f58:	4313      	orrs	r3, r2
 8007f5a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	697a      	ldr	r2, [r7, #20]
 8007f60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	68fa      	ldr	r2, [r7, #12]
 8007f66:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007f68:	683b      	ldr	r3, [r7, #0]
 8007f6a:	685a      	ldr	r2, [r3, #4]
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	693a      	ldr	r2, [r7, #16]
 8007f74:	621a      	str	r2, [r3, #32]
}
 8007f76:	bf00      	nop
 8007f78:	371c      	adds	r7, #28
 8007f7a:	46bd      	mov	sp, r7
 8007f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f80:	4770      	bx	lr
 8007f82:	bf00      	nop
 8007f84:	40012c00 	.word	0x40012c00
 8007f88:	40013400 	.word	0x40013400
 8007f8c:	40014000 	.word	0x40014000
 8007f90:	40014400 	.word	0x40014400
 8007f94:	40014800 	.word	0x40014800
 8007f98:	40015000 	.word	0x40015000

08007f9c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007f9c:	b480      	push	{r7}
 8007f9e:	b087      	sub	sp, #28
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	60f8      	str	r0, [r7, #12]
 8007fa4:	60b9      	str	r1, [r7, #8]
 8007fa6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	6a1b      	ldr	r3, [r3, #32]
 8007fac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	6a1b      	ldr	r3, [r3, #32]
 8007fb2:	f023 0201 	bic.w	r2, r3, #1
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	699b      	ldr	r3, [r3, #24]
 8007fbe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007fc0:	693b      	ldr	r3, [r7, #16]
 8007fc2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007fc6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	011b      	lsls	r3, r3, #4
 8007fcc:	693a      	ldr	r2, [r7, #16]
 8007fce:	4313      	orrs	r3, r2
 8007fd0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007fd2:	697b      	ldr	r3, [r7, #20]
 8007fd4:	f023 030a 	bic.w	r3, r3, #10
 8007fd8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007fda:	697a      	ldr	r2, [r7, #20]
 8007fdc:	68bb      	ldr	r3, [r7, #8]
 8007fde:	4313      	orrs	r3, r2
 8007fe0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	693a      	ldr	r2, [r7, #16]
 8007fe6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	697a      	ldr	r2, [r7, #20]
 8007fec:	621a      	str	r2, [r3, #32]
}
 8007fee:	bf00      	nop
 8007ff0:	371c      	adds	r7, #28
 8007ff2:	46bd      	mov	sp, r7
 8007ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff8:	4770      	bx	lr

08007ffa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007ffa:	b480      	push	{r7}
 8007ffc:	b087      	sub	sp, #28
 8007ffe:	af00      	add	r7, sp, #0
 8008000:	60f8      	str	r0, [r7, #12]
 8008002:	60b9      	str	r1, [r7, #8]
 8008004:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	6a1b      	ldr	r3, [r3, #32]
 800800a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	6a1b      	ldr	r3, [r3, #32]
 8008010:	f023 0210 	bic.w	r2, r3, #16
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	699b      	ldr	r3, [r3, #24]
 800801c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800801e:	693b      	ldr	r3, [r7, #16]
 8008020:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008024:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	031b      	lsls	r3, r3, #12
 800802a:	693a      	ldr	r2, [r7, #16]
 800802c:	4313      	orrs	r3, r2
 800802e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008030:	697b      	ldr	r3, [r7, #20]
 8008032:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008036:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008038:	68bb      	ldr	r3, [r7, #8]
 800803a:	011b      	lsls	r3, r3, #4
 800803c:	697a      	ldr	r2, [r7, #20]
 800803e:	4313      	orrs	r3, r2
 8008040:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	693a      	ldr	r2, [r7, #16]
 8008046:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	697a      	ldr	r2, [r7, #20]
 800804c:	621a      	str	r2, [r3, #32]
}
 800804e:	bf00      	nop
 8008050:	371c      	adds	r7, #28
 8008052:	46bd      	mov	sp, r7
 8008054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008058:	4770      	bx	lr

0800805a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800805a:	b480      	push	{r7}
 800805c:	b085      	sub	sp, #20
 800805e:	af00      	add	r7, sp, #0
 8008060:	6078      	str	r0, [r7, #4]
 8008062:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	689b      	ldr	r3, [r3, #8]
 8008068:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8008070:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008074:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008076:	683a      	ldr	r2, [r7, #0]
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	4313      	orrs	r3, r2
 800807c:	f043 0307 	orr.w	r3, r3, #7
 8008080:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	68fa      	ldr	r2, [r7, #12]
 8008086:	609a      	str	r2, [r3, #8]
}
 8008088:	bf00      	nop
 800808a:	3714      	adds	r7, #20
 800808c:	46bd      	mov	sp, r7
 800808e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008092:	4770      	bx	lr

08008094 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008094:	b480      	push	{r7}
 8008096:	b087      	sub	sp, #28
 8008098:	af00      	add	r7, sp, #0
 800809a:	60f8      	str	r0, [r7, #12]
 800809c:	60b9      	str	r1, [r7, #8]
 800809e:	607a      	str	r2, [r7, #4]
 80080a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	689b      	ldr	r3, [r3, #8]
 80080a6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80080a8:	697b      	ldr	r3, [r7, #20]
 80080aa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80080ae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80080b0:	683b      	ldr	r3, [r7, #0]
 80080b2:	021a      	lsls	r2, r3, #8
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	431a      	orrs	r2, r3
 80080b8:	68bb      	ldr	r3, [r7, #8]
 80080ba:	4313      	orrs	r3, r2
 80080bc:	697a      	ldr	r2, [r7, #20]
 80080be:	4313      	orrs	r3, r2
 80080c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	697a      	ldr	r2, [r7, #20]
 80080c6:	609a      	str	r2, [r3, #8]
}
 80080c8:	bf00      	nop
 80080ca:	371c      	adds	r7, #28
 80080cc:	46bd      	mov	sp, r7
 80080ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d2:	4770      	bx	lr

080080d4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80080d4:	b480      	push	{r7}
 80080d6:	b087      	sub	sp, #28
 80080d8:	af00      	add	r7, sp, #0
 80080da:	60f8      	str	r0, [r7, #12]
 80080dc:	60b9      	str	r1, [r7, #8]
 80080de:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80080e0:	68bb      	ldr	r3, [r7, #8]
 80080e2:	f003 031f 	and.w	r3, r3, #31
 80080e6:	2201      	movs	r2, #1
 80080e8:	fa02 f303 	lsl.w	r3, r2, r3
 80080ec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	6a1a      	ldr	r2, [r3, #32]
 80080f2:	697b      	ldr	r3, [r7, #20]
 80080f4:	43db      	mvns	r3, r3
 80080f6:	401a      	ands	r2, r3
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	6a1a      	ldr	r2, [r3, #32]
 8008100:	68bb      	ldr	r3, [r7, #8]
 8008102:	f003 031f 	and.w	r3, r3, #31
 8008106:	6879      	ldr	r1, [r7, #4]
 8008108:	fa01 f303 	lsl.w	r3, r1, r3
 800810c:	431a      	orrs	r2, r3
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	621a      	str	r2, [r3, #32]
}
 8008112:	bf00      	nop
 8008114:	371c      	adds	r7, #28
 8008116:	46bd      	mov	sp, r7
 8008118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800811c:	4770      	bx	lr
	...

08008120 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008120:	b480      	push	{r7}
 8008122:	b085      	sub	sp, #20
 8008124:	af00      	add	r7, sp, #0
 8008126:	6078      	str	r0, [r7, #4]
 8008128:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008130:	2b01      	cmp	r3, #1
 8008132:	d101      	bne.n	8008138 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008134:	2302      	movs	r3, #2
 8008136:	e074      	b.n	8008222 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	2201      	movs	r2, #1
 800813c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	2202      	movs	r2, #2
 8008144:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	685b      	ldr	r3, [r3, #4]
 800814e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	689b      	ldr	r3, [r3, #8]
 8008156:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	4a34      	ldr	r2, [pc, #208]	@ (8008230 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800815e:	4293      	cmp	r3, r2
 8008160:	d009      	beq.n	8008176 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	4a33      	ldr	r2, [pc, #204]	@ (8008234 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008168:	4293      	cmp	r3, r2
 800816a:	d004      	beq.n	8008176 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	4a31      	ldr	r2, [pc, #196]	@ (8008238 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008172:	4293      	cmp	r3, r2
 8008174:	d108      	bne.n	8008188 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800817c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800817e:	683b      	ldr	r3, [r7, #0]
 8008180:	685b      	ldr	r3, [r3, #4]
 8008182:	68fa      	ldr	r2, [r7, #12]
 8008184:	4313      	orrs	r3, r2
 8008186:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800818e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008192:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008194:	683b      	ldr	r3, [r7, #0]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	68fa      	ldr	r2, [r7, #12]
 800819a:	4313      	orrs	r3, r2
 800819c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	68fa      	ldr	r2, [r7, #12]
 80081a4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	4a21      	ldr	r2, [pc, #132]	@ (8008230 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80081ac:	4293      	cmp	r3, r2
 80081ae:	d022      	beq.n	80081f6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80081b8:	d01d      	beq.n	80081f6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	4a1f      	ldr	r2, [pc, #124]	@ (800823c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80081c0:	4293      	cmp	r3, r2
 80081c2:	d018      	beq.n	80081f6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	4a1d      	ldr	r2, [pc, #116]	@ (8008240 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80081ca:	4293      	cmp	r3, r2
 80081cc:	d013      	beq.n	80081f6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	4a1c      	ldr	r2, [pc, #112]	@ (8008244 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80081d4:	4293      	cmp	r3, r2
 80081d6:	d00e      	beq.n	80081f6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	4a15      	ldr	r2, [pc, #84]	@ (8008234 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80081de:	4293      	cmp	r3, r2
 80081e0:	d009      	beq.n	80081f6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	4a18      	ldr	r2, [pc, #96]	@ (8008248 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80081e8:	4293      	cmp	r3, r2
 80081ea:	d004      	beq.n	80081f6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	4a11      	ldr	r2, [pc, #68]	@ (8008238 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80081f2:	4293      	cmp	r3, r2
 80081f4:	d10c      	bne.n	8008210 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80081f6:	68bb      	ldr	r3, [r7, #8]
 80081f8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80081fc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80081fe:	683b      	ldr	r3, [r7, #0]
 8008200:	689b      	ldr	r3, [r3, #8]
 8008202:	68ba      	ldr	r2, [r7, #8]
 8008204:	4313      	orrs	r3, r2
 8008206:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	68ba      	ldr	r2, [r7, #8]
 800820e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	2201      	movs	r2, #1
 8008214:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	2200      	movs	r2, #0
 800821c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008220:	2300      	movs	r3, #0
}
 8008222:	4618      	mov	r0, r3
 8008224:	3714      	adds	r7, #20
 8008226:	46bd      	mov	sp, r7
 8008228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800822c:	4770      	bx	lr
 800822e:	bf00      	nop
 8008230:	40012c00 	.word	0x40012c00
 8008234:	40013400 	.word	0x40013400
 8008238:	40015000 	.word	0x40015000
 800823c:	40000400 	.word	0x40000400
 8008240:	40000800 	.word	0x40000800
 8008244:	40000c00 	.word	0x40000c00
 8008248:	40014000 	.word	0x40014000

0800824c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800824c:	b480      	push	{r7}
 800824e:	b085      	sub	sp, #20
 8008250:	af00      	add	r7, sp, #0
 8008252:	6078      	str	r0, [r7, #4]
 8008254:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008256:	2300      	movs	r3, #0
 8008258:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008260:	2b01      	cmp	r3, #1
 8008262:	d101      	bne.n	8008268 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008264:	2302      	movs	r3, #2
 8008266:	e078      	b.n	800835a <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	2201      	movs	r2, #1
 800826c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8008276:	683b      	ldr	r3, [r7, #0]
 8008278:	68db      	ldr	r3, [r3, #12]
 800827a:	4313      	orrs	r3, r2
 800827c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008284:	683b      	ldr	r3, [r7, #0]
 8008286:	689b      	ldr	r3, [r3, #8]
 8008288:	4313      	orrs	r3, r2
 800828a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8008292:	683b      	ldr	r3, [r7, #0]
 8008294:	685b      	ldr	r3, [r3, #4]
 8008296:	4313      	orrs	r3, r2
 8008298:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80082a0:	683b      	ldr	r3, [r7, #0]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	4313      	orrs	r3, r2
 80082a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80082ae:	683b      	ldr	r3, [r7, #0]
 80082b0:	691b      	ldr	r3, [r3, #16]
 80082b2:	4313      	orrs	r3, r2
 80082b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80082bc:	683b      	ldr	r3, [r7, #0]
 80082be:	695b      	ldr	r3, [r3, #20]
 80082c0:	4313      	orrs	r3, r2
 80082c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80082ca:	683b      	ldr	r3, [r7, #0]
 80082cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80082ce:	4313      	orrs	r3, r2
 80082d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80082d8:	683b      	ldr	r3, [r7, #0]
 80082da:	699b      	ldr	r3, [r3, #24]
 80082dc:	041b      	lsls	r3, r3, #16
 80082de:	4313      	orrs	r3, r2
 80082e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80082e8:	683b      	ldr	r3, [r7, #0]
 80082ea:	69db      	ldr	r3, [r3, #28]
 80082ec:	4313      	orrs	r3, r2
 80082ee:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	4a1c      	ldr	r2, [pc, #112]	@ (8008368 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 80082f6:	4293      	cmp	r3, r2
 80082f8:	d009      	beq.n	800830e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	4a1b      	ldr	r2, [pc, #108]	@ (800836c <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8008300:	4293      	cmp	r3, r2
 8008302:	d004      	beq.n	800830e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	4a19      	ldr	r2, [pc, #100]	@ (8008370 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800830a:	4293      	cmp	r3, r2
 800830c:	d11c      	bne.n	8008348 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8008314:	683b      	ldr	r3, [r7, #0]
 8008316:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008318:	051b      	lsls	r3, r3, #20
 800831a:	4313      	orrs	r3, r2
 800831c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8008324:	683b      	ldr	r3, [r7, #0]
 8008326:	6a1b      	ldr	r3, [r3, #32]
 8008328:	4313      	orrs	r3, r2
 800832a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8008332:	683b      	ldr	r3, [r7, #0]
 8008334:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008336:	4313      	orrs	r3, r2
 8008338:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8008340:	683b      	ldr	r3, [r7, #0]
 8008342:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008344:	4313      	orrs	r3, r2
 8008346:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	68fa      	ldr	r2, [r7, #12]
 800834e:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	2200      	movs	r2, #0
 8008354:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008358:	2300      	movs	r3, #0
}
 800835a:	4618      	mov	r0, r3
 800835c:	3714      	adds	r7, #20
 800835e:	46bd      	mov	sp, r7
 8008360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008364:	4770      	bx	lr
 8008366:	bf00      	nop
 8008368:	40012c00 	.word	0x40012c00
 800836c:	40013400 	.word	0x40013400
 8008370:	40015000 	.word	0x40015000

08008374 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008374:	b480      	push	{r7}
 8008376:	b083      	sub	sp, #12
 8008378:	af00      	add	r7, sp, #0
 800837a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800837c:	bf00      	nop
 800837e:	370c      	adds	r7, #12
 8008380:	46bd      	mov	sp, r7
 8008382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008386:	4770      	bx	lr

08008388 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008388:	b480      	push	{r7}
 800838a:	b083      	sub	sp, #12
 800838c:	af00      	add	r7, sp, #0
 800838e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008390:	bf00      	nop
 8008392:	370c      	adds	r7, #12
 8008394:	46bd      	mov	sp, r7
 8008396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800839a:	4770      	bx	lr

0800839c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800839c:	b480      	push	{r7}
 800839e:	b083      	sub	sp, #12
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80083a4:	bf00      	nop
 80083a6:	370c      	adds	r7, #12
 80083a8:	46bd      	mov	sp, r7
 80083aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ae:	4770      	bx	lr

080083b0 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80083b0:	b480      	push	{r7}
 80083b2:	b083      	sub	sp, #12
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80083b8:	bf00      	nop
 80083ba:	370c      	adds	r7, #12
 80083bc:	46bd      	mov	sp, r7
 80083be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c2:	4770      	bx	lr

080083c4 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80083c4:	b480      	push	{r7}
 80083c6:	b083      	sub	sp, #12
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80083cc:	bf00      	nop
 80083ce:	370c      	adds	r7, #12
 80083d0:	46bd      	mov	sp, r7
 80083d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d6:	4770      	bx	lr

080083d8 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80083d8:	b480      	push	{r7}
 80083da:	b083      	sub	sp, #12
 80083dc:	af00      	add	r7, sp, #0
 80083de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80083e0:	bf00      	nop
 80083e2:	370c      	adds	r7, #12
 80083e4:	46bd      	mov	sp, r7
 80083e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ea:	4770      	bx	lr

080083ec <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80083ec:	b480      	push	{r7}
 80083ee:	b083      	sub	sp, #12
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80083f4:	bf00      	nop
 80083f6:	370c      	adds	r7, #12
 80083f8:	46bd      	mov	sp, r7
 80083fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083fe:	4770      	bx	lr

08008400 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008400:	b580      	push	{r7, lr}
 8008402:	b082      	sub	sp, #8
 8008404:	af00      	add	r7, sp, #0
 8008406:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	2b00      	cmp	r3, #0
 800840c:	d101      	bne.n	8008412 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800840e:	2301      	movs	r3, #1
 8008410:	e042      	b.n	8008498 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008418:	2b00      	cmp	r3, #0
 800841a:	d106      	bne.n	800842a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	2200      	movs	r2, #0
 8008420:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008424:	6878      	ldr	r0, [r7, #4]
 8008426:	f7fc f9eb 	bl	8004800 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	2224      	movs	r2, #36	@ 0x24
 800842e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	681a      	ldr	r2, [r3, #0]
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	f022 0201 	bic.w	r2, r2, #1
 8008440:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008446:	2b00      	cmp	r3, #0
 8008448:	d002      	beq.n	8008450 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800844a:	6878      	ldr	r0, [r7, #4]
 800844c:	f001 f806 	bl	800945c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008450:	6878      	ldr	r0, [r7, #4]
 8008452:	f000 fd07 	bl	8008e64 <UART_SetConfig>
 8008456:	4603      	mov	r3, r0
 8008458:	2b01      	cmp	r3, #1
 800845a:	d101      	bne.n	8008460 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800845c:	2301      	movs	r3, #1
 800845e:	e01b      	b.n	8008498 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	685a      	ldr	r2, [r3, #4]
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800846e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	689a      	ldr	r2, [r3, #8]
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800847e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	681a      	ldr	r2, [r3, #0]
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	f042 0201 	orr.w	r2, r2, #1
 800848e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008490:	6878      	ldr	r0, [r7, #4]
 8008492:	f001 f885 	bl	80095a0 <UART_CheckIdleState>
 8008496:	4603      	mov	r3, r0
}
 8008498:	4618      	mov	r0, r3
 800849a:	3708      	adds	r7, #8
 800849c:	46bd      	mov	sp, r7
 800849e:	bd80      	pop	{r7, pc}

080084a0 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80084a0:	b580      	push	{r7, lr}
 80084a2:	b08a      	sub	sp, #40	@ 0x28
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	60f8      	str	r0, [r7, #12]
 80084a8:	60b9      	str	r1, [r7, #8]
 80084aa:	4613      	mov	r3, r2
 80084ac:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80084b4:	2b20      	cmp	r3, #32
 80084b6:	d167      	bne.n	8008588 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 80084b8:	68bb      	ldr	r3, [r7, #8]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d002      	beq.n	80084c4 <HAL_UART_Transmit_DMA+0x24>
 80084be:	88fb      	ldrh	r3, [r7, #6]
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d101      	bne.n	80084c8 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 80084c4:	2301      	movs	r3, #1
 80084c6:	e060      	b.n	800858a <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	68ba      	ldr	r2, [r7, #8]
 80084cc:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	88fa      	ldrh	r2, [r7, #6]
 80084d2:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	88fa      	ldrh	r2, [r7, #6]
 80084da:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	2200      	movs	r2, #0
 80084e2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	2221      	movs	r2, #33	@ 0x21
 80084ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d028      	beq.n	8008548 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80084fa:	4a26      	ldr	r2, [pc, #152]	@ (8008594 <HAL_UART_Transmit_DMA+0xf4>)
 80084fc:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008502:	4a25      	ldr	r2, [pc, #148]	@ (8008598 <HAL_UART_Transmit_DMA+0xf8>)
 8008504:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800850a:	4a24      	ldr	r2, [pc, #144]	@ (800859c <HAL_UART_Transmit_DMA+0xfc>)
 800850c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008512:	2200      	movs	r2, #0
 8008514:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800851e:	4619      	mov	r1, r3
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	3328      	adds	r3, #40	@ 0x28
 8008526:	461a      	mov	r2, r3
 8008528:	88fb      	ldrh	r3, [r7, #6]
 800852a:	f7fc fcbb 	bl	8004ea4 <HAL_DMA_Start_IT>
 800852e:	4603      	mov	r3, r0
 8008530:	2b00      	cmp	r3, #0
 8008532:	d009      	beq.n	8008548 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	2210      	movs	r2, #16
 8008538:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	2220      	movs	r2, #32
 8008540:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 8008544:	2301      	movs	r3, #1
 8008546:	e020      	b.n	800858a <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	2240      	movs	r2, #64	@ 0x40
 800854e:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	3308      	adds	r3, #8
 8008556:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008558:	697b      	ldr	r3, [r7, #20]
 800855a:	e853 3f00 	ldrex	r3, [r3]
 800855e:	613b      	str	r3, [r7, #16]
   return(result);
 8008560:	693b      	ldr	r3, [r7, #16]
 8008562:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008566:	627b      	str	r3, [r7, #36]	@ 0x24
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	3308      	adds	r3, #8
 800856e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008570:	623a      	str	r2, [r7, #32]
 8008572:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008574:	69f9      	ldr	r1, [r7, #28]
 8008576:	6a3a      	ldr	r2, [r7, #32]
 8008578:	e841 2300 	strex	r3, r2, [r1]
 800857c:	61bb      	str	r3, [r7, #24]
   return(result);
 800857e:	69bb      	ldr	r3, [r7, #24]
 8008580:	2b00      	cmp	r3, #0
 8008582:	d1e5      	bne.n	8008550 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8008584:	2300      	movs	r3, #0
 8008586:	e000      	b.n	800858a <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8008588:	2302      	movs	r3, #2
  }
}
 800858a:	4618      	mov	r0, r3
 800858c:	3728      	adds	r7, #40	@ 0x28
 800858e:	46bd      	mov	sp, r7
 8008590:	bd80      	pop	{r7, pc}
 8008592:	bf00      	nop
 8008594:	08009a6b 	.word	0x08009a6b
 8008598:	08009b05 	.word	0x08009b05
 800859c:	08009c8b 	.word	0x08009c8b

080085a0 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80085a0:	b580      	push	{r7, lr}
 80085a2:	b08a      	sub	sp, #40	@ 0x28
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	60f8      	str	r0, [r7, #12]
 80085a8:	60b9      	str	r1, [r7, #8]
 80085aa:	4613      	mov	r3, r2
 80085ac:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80085b4:	2b20      	cmp	r3, #32
 80085b6:	d137      	bne.n	8008628 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80085b8:	68bb      	ldr	r3, [r7, #8]
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d002      	beq.n	80085c4 <HAL_UART_Receive_DMA+0x24>
 80085be:	88fb      	ldrh	r3, [r7, #6]
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d101      	bne.n	80085c8 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 80085c4:	2301      	movs	r3, #1
 80085c6:	e030      	b.n	800862a <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	2200      	movs	r2, #0
 80085cc:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	4a18      	ldr	r2, [pc, #96]	@ (8008634 <HAL_UART_Receive_DMA+0x94>)
 80085d4:	4293      	cmp	r3, r2
 80085d6:	d01f      	beq.n	8008618 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	685b      	ldr	r3, [r3, #4]
 80085de:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d018      	beq.n	8008618 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085ec:	697b      	ldr	r3, [r7, #20]
 80085ee:	e853 3f00 	ldrex	r3, [r3]
 80085f2:	613b      	str	r3, [r7, #16]
   return(result);
 80085f4:	693b      	ldr	r3, [r7, #16]
 80085f6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80085fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	461a      	mov	r2, r3
 8008602:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008604:	623b      	str	r3, [r7, #32]
 8008606:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008608:	69f9      	ldr	r1, [r7, #28]
 800860a:	6a3a      	ldr	r2, [r7, #32]
 800860c:	e841 2300 	strex	r3, r2, [r1]
 8008610:	61bb      	str	r3, [r7, #24]
   return(result);
 8008612:	69bb      	ldr	r3, [r7, #24]
 8008614:	2b00      	cmp	r3, #0
 8008616:	d1e6      	bne.n	80085e6 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8008618:	88fb      	ldrh	r3, [r7, #6]
 800861a:	461a      	mov	r2, r3
 800861c:	68b9      	ldr	r1, [r7, #8]
 800861e:	68f8      	ldr	r0, [r7, #12]
 8008620:	f001 f8d6 	bl	80097d0 <UART_Start_Receive_DMA>
 8008624:	4603      	mov	r3, r0
 8008626:	e000      	b.n	800862a <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008628:	2302      	movs	r3, #2
  }
}
 800862a:	4618      	mov	r0, r3
 800862c:	3728      	adds	r7, #40	@ 0x28
 800862e:	46bd      	mov	sp, r7
 8008630:	bd80      	pop	{r7, pc}
 8008632:	bf00      	nop
 8008634:	40008000 	.word	0x40008000

08008638 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8008638:	b580      	push	{r7, lr}
 800863a:	b090      	sub	sp, #64	@ 0x40
 800863c:	af00      	add	r7, sp, #0
 800863e:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008646:	63fb      	str	r3, [r7, #60]	@ 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800864e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	689b      	ldr	r3, [r3, #8]
 8008656:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800865a:	2b80      	cmp	r3, #128	@ 0x80
 800865c:	d139      	bne.n	80086d2 <HAL_UART_DMAStop+0x9a>
 800865e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008660:	2b21      	cmp	r3, #33	@ 0x21
 8008662:	d136      	bne.n	80086d2 <HAL_UART_DMAStop+0x9a>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	3308      	adds	r3, #8
 800866a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800866c:	6a3b      	ldr	r3, [r7, #32]
 800866e:	e853 3f00 	ldrex	r3, [r3]
 8008672:	61fb      	str	r3, [r7, #28]
   return(result);
 8008674:	69fb      	ldr	r3, [r7, #28]
 8008676:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800867a:	637b      	str	r3, [r7, #52]	@ 0x34
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	3308      	adds	r3, #8
 8008682:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008684:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008686:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008688:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800868a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800868c:	e841 2300 	strex	r3, r2, [r1]
 8008690:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008694:	2b00      	cmp	r3, #0
 8008696:	d1e5      	bne.n	8008664 <HAL_UART_DMAStop+0x2c>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800869c:	2b00      	cmp	r3, #0
 800869e:	d015      	beq.n	80086cc <HAL_UART_DMAStop+0x94>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80086a4:	4618      	mov	r0, r3
 80086a6:	f7fc fc78 	bl	8004f9a <HAL_DMA_Abort>
 80086aa:	4603      	mov	r3, r0
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d00d      	beq.n	80086cc <HAL_UART_DMAStop+0x94>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80086b4:	4618      	mov	r0, r3
 80086b6:	f7fc fddf 	bl	8005278 <HAL_DMA_GetError>
 80086ba:	4603      	mov	r3, r0
 80086bc:	2b20      	cmp	r3, #32
 80086be:	d105      	bne.n	80086cc <HAL_UART_DMAStop+0x94>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	2210      	movs	r2, #16
 80086c4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 80086c8:	2303      	movs	r3, #3
 80086ca:	e047      	b.n	800875c <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndTxTransfer(huart);
 80086cc:	6878      	ldr	r0, [r7, #4]
 80086ce:	f001 f925 	bl	800991c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	689b      	ldr	r3, [r3, #8]
 80086d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80086dc:	2b40      	cmp	r3, #64	@ 0x40
 80086de:	d13c      	bne.n	800875a <HAL_UART_DMAStop+0x122>
 80086e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086e2:	2b22      	cmp	r3, #34	@ 0x22
 80086e4:	d139      	bne.n	800875a <HAL_UART_DMAStop+0x122>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	3308      	adds	r3, #8
 80086ec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	e853 3f00 	ldrex	r3, [r3]
 80086f4:	60bb      	str	r3, [r7, #8]
   return(result);
 80086f6:	68bb      	ldr	r3, [r7, #8]
 80086f8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80086fc:	633b      	str	r3, [r7, #48]	@ 0x30
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	3308      	adds	r3, #8
 8008704:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008706:	61ba      	str	r2, [r7, #24]
 8008708:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800870a:	6979      	ldr	r1, [r7, #20]
 800870c:	69ba      	ldr	r2, [r7, #24]
 800870e:	e841 2300 	strex	r3, r2, [r1]
 8008712:	613b      	str	r3, [r7, #16]
   return(result);
 8008714:	693b      	ldr	r3, [r7, #16]
 8008716:	2b00      	cmp	r3, #0
 8008718:	d1e5      	bne.n	80086e6 <HAL_UART_DMAStop+0xae>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008720:	2b00      	cmp	r3, #0
 8008722:	d017      	beq.n	8008754 <HAL_UART_DMAStop+0x11c>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800872a:	4618      	mov	r0, r3
 800872c:	f7fc fc35 	bl	8004f9a <HAL_DMA_Abort>
 8008730:	4603      	mov	r3, r0
 8008732:	2b00      	cmp	r3, #0
 8008734:	d00e      	beq.n	8008754 <HAL_UART_DMAStop+0x11c>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800873c:	4618      	mov	r0, r3
 800873e:	f7fc fd9b 	bl	8005278 <HAL_DMA_GetError>
 8008742:	4603      	mov	r3, r0
 8008744:	2b20      	cmp	r3, #32
 8008746:	d105      	bne.n	8008754 <HAL_UART_DMAStop+0x11c>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	2210      	movs	r2, #16
 800874c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 8008750:	2303      	movs	r3, #3
 8008752:	e003      	b.n	800875c <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndRxTransfer(huart);
 8008754:	6878      	ldr	r0, [r7, #4]
 8008756:	f001 f922 	bl	800999e <UART_EndRxTransfer>
  }

  return HAL_OK;
 800875a:	2300      	movs	r3, #0
}
 800875c:	4618      	mov	r0, r3
 800875e:	3740      	adds	r7, #64	@ 0x40
 8008760:	46bd      	mov	sp, r7
 8008762:	bd80      	pop	{r7, pc}

08008764 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008764:	b580      	push	{r7, lr}
 8008766:	b0ba      	sub	sp, #232	@ 0xe8
 8008768:	af00      	add	r7, sp, #0
 800876a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	69db      	ldr	r3, [r3, #28]
 8008772:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	689b      	ldr	r3, [r3, #8]
 8008786:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800878a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800878e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8008792:	4013      	ands	r3, r2
 8008794:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8008798:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800879c:	2b00      	cmp	r3, #0
 800879e:	d11b      	bne.n	80087d8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80087a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80087a4:	f003 0320 	and.w	r3, r3, #32
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d015      	beq.n	80087d8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80087ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80087b0:	f003 0320 	and.w	r3, r3, #32
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d105      	bne.n	80087c4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80087b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80087bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d009      	beq.n	80087d8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	f000 8300 	beq.w	8008dce <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80087d2:	6878      	ldr	r0, [r7, #4]
 80087d4:	4798      	blx	r3
      }
      return;
 80087d6:	e2fa      	b.n	8008dce <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80087d8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80087dc:	2b00      	cmp	r3, #0
 80087de:	f000 8123 	beq.w	8008a28 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80087e2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80087e6:	4b8d      	ldr	r3, [pc, #564]	@ (8008a1c <HAL_UART_IRQHandler+0x2b8>)
 80087e8:	4013      	ands	r3, r2
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d106      	bne.n	80087fc <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80087ee:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80087f2:	4b8b      	ldr	r3, [pc, #556]	@ (8008a20 <HAL_UART_IRQHandler+0x2bc>)
 80087f4:	4013      	ands	r3, r2
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	f000 8116 	beq.w	8008a28 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80087fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008800:	f003 0301 	and.w	r3, r3, #1
 8008804:	2b00      	cmp	r3, #0
 8008806:	d011      	beq.n	800882c <HAL_UART_IRQHandler+0xc8>
 8008808:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800880c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008810:	2b00      	cmp	r3, #0
 8008812:	d00b      	beq.n	800882c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	2201      	movs	r2, #1
 800881a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008822:	f043 0201 	orr.w	r2, r3, #1
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800882c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008830:	f003 0302 	and.w	r3, r3, #2
 8008834:	2b00      	cmp	r3, #0
 8008836:	d011      	beq.n	800885c <HAL_UART_IRQHandler+0xf8>
 8008838:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800883c:	f003 0301 	and.w	r3, r3, #1
 8008840:	2b00      	cmp	r3, #0
 8008842:	d00b      	beq.n	800885c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	2202      	movs	r2, #2
 800884a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008852:	f043 0204 	orr.w	r2, r3, #4
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800885c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008860:	f003 0304 	and.w	r3, r3, #4
 8008864:	2b00      	cmp	r3, #0
 8008866:	d011      	beq.n	800888c <HAL_UART_IRQHandler+0x128>
 8008868:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800886c:	f003 0301 	and.w	r3, r3, #1
 8008870:	2b00      	cmp	r3, #0
 8008872:	d00b      	beq.n	800888c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	2204      	movs	r2, #4
 800887a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008882:	f043 0202 	orr.w	r2, r3, #2
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800888c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008890:	f003 0308 	and.w	r3, r3, #8
 8008894:	2b00      	cmp	r3, #0
 8008896:	d017      	beq.n	80088c8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008898:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800889c:	f003 0320 	and.w	r3, r3, #32
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d105      	bne.n	80088b0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80088a4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80088a8:	4b5c      	ldr	r3, [pc, #368]	@ (8008a1c <HAL_UART_IRQHandler+0x2b8>)
 80088aa:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d00b      	beq.n	80088c8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	2208      	movs	r2, #8
 80088b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80088be:	f043 0208 	orr.w	r2, r3, #8
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80088c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80088cc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d012      	beq.n	80088fa <HAL_UART_IRQHandler+0x196>
 80088d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80088d8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d00c      	beq.n	80088fa <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80088e8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80088f0:	f043 0220 	orr.w	r2, r3, #32
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008900:	2b00      	cmp	r3, #0
 8008902:	f000 8266 	beq.w	8008dd2 <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008906:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800890a:	f003 0320 	and.w	r3, r3, #32
 800890e:	2b00      	cmp	r3, #0
 8008910:	d013      	beq.n	800893a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008912:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008916:	f003 0320 	and.w	r3, r3, #32
 800891a:	2b00      	cmp	r3, #0
 800891c:	d105      	bne.n	800892a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800891e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008922:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008926:	2b00      	cmp	r3, #0
 8008928:	d007      	beq.n	800893a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800892e:	2b00      	cmp	r3, #0
 8008930:	d003      	beq.n	800893a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008936:	6878      	ldr	r0, [r7, #4]
 8008938:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008940:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	689b      	ldr	r3, [r3, #8]
 800894a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800894e:	2b40      	cmp	r3, #64	@ 0x40
 8008950:	d005      	beq.n	800895e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008952:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008956:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800895a:	2b00      	cmp	r3, #0
 800895c:	d054      	beq.n	8008a08 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800895e:	6878      	ldr	r0, [r7, #4]
 8008960:	f001 f81d 	bl	800999e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	689b      	ldr	r3, [r3, #8]
 800896a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800896e:	2b40      	cmp	r3, #64	@ 0x40
 8008970:	d146      	bne.n	8008a00 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	3308      	adds	r3, #8
 8008978:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800897c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008980:	e853 3f00 	ldrex	r3, [r3]
 8008984:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008988:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800898c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008990:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	3308      	adds	r3, #8
 800899a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800899e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80089a2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089a6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80089aa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80089ae:	e841 2300 	strex	r3, r2, [r1]
 80089b2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80089b6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d1d9      	bne.n	8008972 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d017      	beq.n	80089f8 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80089ce:	4a15      	ldr	r2, [pc, #84]	@ (8008a24 <HAL_UART_IRQHandler+0x2c0>)
 80089d0:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80089d8:	4618      	mov	r0, r3
 80089da:	f7fc fb37 	bl	800504c <HAL_DMA_Abort_IT>
 80089de:	4603      	mov	r3, r0
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d019      	beq.n	8008a18 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80089ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089ec:	687a      	ldr	r2, [r7, #4]
 80089ee:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80089f2:	4610      	mov	r0, r2
 80089f4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80089f6:	e00f      	b.n	8008a18 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80089f8:	6878      	ldr	r0, [r7, #4]
 80089fa:	f000 fa1d 	bl	8008e38 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80089fe:	e00b      	b.n	8008a18 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008a00:	6878      	ldr	r0, [r7, #4]
 8008a02:	f000 fa19 	bl	8008e38 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a06:	e007      	b.n	8008a18 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008a08:	6878      	ldr	r0, [r7, #4]
 8008a0a:	f000 fa15 	bl	8008e38 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	2200      	movs	r2, #0
 8008a12:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8008a16:	e1dc      	b.n	8008dd2 <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a18:	bf00      	nop
    return;
 8008a1a:	e1da      	b.n	8008dd2 <HAL_UART_IRQHandler+0x66e>
 8008a1c:	10000001 	.word	0x10000001
 8008a20:	04000120 	.word	0x04000120
 8008a24:	08009d0b 	.word	0x08009d0b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008a2c:	2b01      	cmp	r3, #1
 8008a2e:	f040 8170 	bne.w	8008d12 <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008a32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008a36:	f003 0310 	and.w	r3, r3, #16
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	f000 8169 	beq.w	8008d12 <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008a40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008a44:	f003 0310 	and.w	r3, r3, #16
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	f000 8162 	beq.w	8008d12 <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	2210      	movs	r2, #16
 8008a54:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	689b      	ldr	r3, [r3, #8]
 8008a5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a60:	2b40      	cmp	r3, #64	@ 0x40
 8008a62:	f040 80d8 	bne.w	8008c16 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	685b      	ldr	r3, [r3, #4]
 8008a70:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008a74:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	f000 80af 	beq.w	8008bdc <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008a84:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008a88:	429a      	cmp	r2, r3
 8008a8a:	f080 80a7 	bcs.w	8008bdc <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008a94:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	f003 0320 	and.w	r3, r3, #32
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	f040 8087 	bne.w	8008bba <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ab4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008ab8:	e853 3f00 	ldrex	r3, [r3]
 8008abc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008ac0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008ac4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008ac8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	461a      	mov	r2, r3
 8008ad2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008ad6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008ada:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ade:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008ae2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008ae6:	e841 2300 	strex	r3, r2, [r1]
 8008aea:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008aee:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d1da      	bne.n	8008aac <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	3308      	adds	r3, #8
 8008afc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008afe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008b00:	e853 3f00 	ldrex	r3, [r3]
 8008b04:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008b06:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008b08:	f023 0301 	bic.w	r3, r3, #1
 8008b0c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	3308      	adds	r3, #8
 8008b16:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008b1a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8008b1e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b20:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008b22:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008b26:	e841 2300 	strex	r3, r2, [r1]
 8008b2a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008b2c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d1e1      	bne.n	8008af6 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	3308      	adds	r3, #8
 8008b38:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b3a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008b3c:	e853 3f00 	ldrex	r3, [r3]
 8008b40:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008b42:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008b44:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008b48:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	3308      	adds	r3, #8
 8008b52:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008b56:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008b58:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b5a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008b5c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008b5e:	e841 2300 	strex	r3, r2, [r1]
 8008b62:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008b64:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d1e3      	bne.n	8008b32 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	2220      	movs	r2, #32
 8008b6e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	2200      	movs	r2, #0
 8008b76:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b7e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008b80:	e853 3f00 	ldrex	r3, [r3]
 8008b84:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008b86:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008b88:	f023 0310 	bic.w	r3, r3, #16
 8008b8c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	461a      	mov	r2, r3
 8008b96:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008b9a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008b9c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b9e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008ba0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008ba2:	e841 2300 	strex	r3, r2, [r1]
 8008ba6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008ba8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d1e4      	bne.n	8008b78 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008bb4:	4618      	mov	r0, r3
 8008bb6:	f7fc f9f0 	bl	8004f9a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	2202      	movs	r2, #2
 8008bbe:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008bcc:	b29b      	uxth	r3, r3
 8008bce:	1ad3      	subs	r3, r2, r3
 8008bd0:	b29b      	uxth	r3, r3
 8008bd2:	4619      	mov	r1, r3
 8008bd4:	6878      	ldr	r0, [r7, #4]
 8008bd6:	f000 f939 	bl	8008e4c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8008bda:	e0fc      	b.n	8008dd6 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008be2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008be6:	429a      	cmp	r2, r3
 8008be8:	f040 80f5 	bne.w	8008dd6 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	f003 0320 	and.w	r3, r3, #32
 8008bfa:	2b20      	cmp	r3, #32
 8008bfc:	f040 80eb 	bne.w	8008dd6 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	2202      	movs	r2, #2
 8008c04:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008c0c:	4619      	mov	r1, r3
 8008c0e:	6878      	ldr	r0, [r7, #4]
 8008c10:	f000 f91c 	bl	8008e4c <HAL_UARTEx_RxEventCallback>
      return;
 8008c14:	e0df      	b.n	8008dd6 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008c22:	b29b      	uxth	r3, r3
 8008c24:	1ad3      	subs	r3, r2, r3
 8008c26:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008c30:	b29b      	uxth	r3, r3
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	f000 80d1 	beq.w	8008dda <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8008c38:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	f000 80cc 	beq.w	8008dda <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c4a:	e853 3f00 	ldrex	r3, [r3]
 8008c4e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008c50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c52:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008c56:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	461a      	mov	r2, r3
 8008c60:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008c64:	647b      	str	r3, [r7, #68]	@ 0x44
 8008c66:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c68:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008c6a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008c6c:	e841 2300 	strex	r3, r2, [r1]
 8008c70:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008c72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d1e4      	bne.n	8008c42 <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	3308      	adds	r3, #8
 8008c7e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c82:	e853 3f00 	ldrex	r3, [r3]
 8008c86:	623b      	str	r3, [r7, #32]
   return(result);
 8008c88:	6a3b      	ldr	r3, [r7, #32]
 8008c8a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008c8e:	f023 0301 	bic.w	r3, r3, #1
 8008c92:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	3308      	adds	r3, #8
 8008c9c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008ca0:	633a      	str	r2, [r7, #48]	@ 0x30
 8008ca2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ca4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008ca6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008ca8:	e841 2300 	strex	r3, r2, [r1]
 8008cac:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008cae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d1e1      	bne.n	8008c78 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	2220      	movs	r2, #32
 8008cb8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	2200      	movs	r2, #0
 8008cc0:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	2200      	movs	r2, #0
 8008cc6:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cce:	693b      	ldr	r3, [r7, #16]
 8008cd0:	e853 3f00 	ldrex	r3, [r3]
 8008cd4:	60fb      	str	r3, [r7, #12]
   return(result);
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	f023 0310 	bic.w	r3, r3, #16
 8008cdc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	461a      	mov	r2, r3
 8008ce6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8008cea:	61fb      	str	r3, [r7, #28]
 8008cec:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cee:	69b9      	ldr	r1, [r7, #24]
 8008cf0:	69fa      	ldr	r2, [r7, #28]
 8008cf2:	e841 2300 	strex	r3, r2, [r1]
 8008cf6:	617b      	str	r3, [r7, #20]
   return(result);
 8008cf8:	697b      	ldr	r3, [r7, #20]
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d1e4      	bne.n	8008cc8 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	2202      	movs	r2, #2
 8008d02:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008d04:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008d08:	4619      	mov	r1, r3
 8008d0a:	6878      	ldr	r0, [r7, #4]
 8008d0c:	f000 f89e 	bl	8008e4c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008d10:	e063      	b.n	8008dda <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008d12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008d16:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d00e      	beq.n	8008d3c <HAL_UART_IRQHandler+0x5d8>
 8008d1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008d22:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d008      	beq.n	8008d3c <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8008d32:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008d34:	6878      	ldr	r0, [r7, #4]
 8008d36:	f001 f825 	bl	8009d84 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008d3a:	e051      	b.n	8008de0 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008d3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008d40:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d014      	beq.n	8008d72 <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008d48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008d4c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d105      	bne.n	8008d60 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008d54:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008d58:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d008      	beq.n	8008d72 <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d03a      	beq.n	8008dde <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008d6c:	6878      	ldr	r0, [r7, #4]
 8008d6e:	4798      	blx	r3
    }
    return;
 8008d70:	e035      	b.n	8008dde <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008d72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008d76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d009      	beq.n	8008d92 <HAL_UART_IRQHandler+0x62e>
 8008d7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008d82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d003      	beq.n	8008d92 <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 8008d8a:	6878      	ldr	r0, [r7, #4]
 8008d8c:	f000 ffcf 	bl	8009d2e <UART_EndTransmit_IT>
    return;
 8008d90:	e026      	b.n	8008de0 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008d92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008d96:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d009      	beq.n	8008db2 <HAL_UART_IRQHandler+0x64e>
 8008d9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008da2:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d003      	beq.n	8008db2 <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008daa:	6878      	ldr	r0, [r7, #4]
 8008dac:	f000 fffe 	bl	8009dac <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008db0:	e016      	b.n	8008de0 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008db2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008db6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d010      	beq.n	8008de0 <HAL_UART_IRQHandler+0x67c>
 8008dbe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	da0c      	bge.n	8008de0 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8008dc6:	6878      	ldr	r0, [r7, #4]
 8008dc8:	f000 ffe6 	bl	8009d98 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008dcc:	e008      	b.n	8008de0 <HAL_UART_IRQHandler+0x67c>
      return;
 8008dce:	bf00      	nop
 8008dd0:	e006      	b.n	8008de0 <HAL_UART_IRQHandler+0x67c>
    return;
 8008dd2:	bf00      	nop
 8008dd4:	e004      	b.n	8008de0 <HAL_UART_IRQHandler+0x67c>
      return;
 8008dd6:	bf00      	nop
 8008dd8:	e002      	b.n	8008de0 <HAL_UART_IRQHandler+0x67c>
      return;
 8008dda:	bf00      	nop
 8008ddc:	e000      	b.n	8008de0 <HAL_UART_IRQHandler+0x67c>
    return;
 8008dde:	bf00      	nop
  }
}
 8008de0:	37e8      	adds	r7, #232	@ 0xe8
 8008de2:	46bd      	mov	sp, r7
 8008de4:	bd80      	pop	{r7, pc}
 8008de6:	bf00      	nop

08008de8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008de8:	b480      	push	{r7}
 8008dea:	b083      	sub	sp, #12
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008df0:	bf00      	nop
 8008df2:	370c      	adds	r7, #12
 8008df4:	46bd      	mov	sp, r7
 8008df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dfa:	4770      	bx	lr

08008dfc <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008dfc:	b480      	push	{r7}
 8008dfe:	b083      	sub	sp, #12
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8008e04:	bf00      	nop
 8008e06:	370c      	adds	r7, #12
 8008e08:	46bd      	mov	sp, r7
 8008e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e0e:	4770      	bx	lr

08008e10 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008e10:	b480      	push	{r7}
 8008e12:	b083      	sub	sp, #12
 8008e14:	af00      	add	r7, sp, #0
 8008e16:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8008e18:	bf00      	nop
 8008e1a:	370c      	adds	r7, #12
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e22:	4770      	bx	lr

08008e24 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008e24:	b480      	push	{r7}
 8008e26:	b083      	sub	sp, #12
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8008e2c:	bf00      	nop
 8008e2e:	370c      	adds	r7, #12
 8008e30:	46bd      	mov	sp, r7
 8008e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e36:	4770      	bx	lr

08008e38 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008e38:	b480      	push	{r7}
 8008e3a:	b083      	sub	sp, #12
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008e40:	bf00      	nop
 8008e42:	370c      	adds	r7, #12
 8008e44:	46bd      	mov	sp, r7
 8008e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e4a:	4770      	bx	lr

08008e4c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008e4c:	b480      	push	{r7}
 8008e4e:	b083      	sub	sp, #12
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	6078      	str	r0, [r7, #4]
 8008e54:	460b      	mov	r3, r1
 8008e56:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008e58:	bf00      	nop
 8008e5a:	370c      	adds	r7, #12
 8008e5c:	46bd      	mov	sp, r7
 8008e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e62:	4770      	bx	lr

08008e64 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008e64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008e68:	b08c      	sub	sp, #48	@ 0x30
 8008e6a:	af00      	add	r7, sp, #0
 8008e6c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008e6e:	2300      	movs	r3, #0
 8008e70:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008e74:	697b      	ldr	r3, [r7, #20]
 8008e76:	689a      	ldr	r2, [r3, #8]
 8008e78:	697b      	ldr	r3, [r7, #20]
 8008e7a:	691b      	ldr	r3, [r3, #16]
 8008e7c:	431a      	orrs	r2, r3
 8008e7e:	697b      	ldr	r3, [r7, #20]
 8008e80:	695b      	ldr	r3, [r3, #20]
 8008e82:	431a      	orrs	r2, r3
 8008e84:	697b      	ldr	r3, [r7, #20]
 8008e86:	69db      	ldr	r3, [r3, #28]
 8008e88:	4313      	orrs	r3, r2
 8008e8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008e8c:	697b      	ldr	r3, [r7, #20]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	681a      	ldr	r2, [r3, #0]
 8008e92:	4baa      	ldr	r3, [pc, #680]	@ (800913c <UART_SetConfig+0x2d8>)
 8008e94:	4013      	ands	r3, r2
 8008e96:	697a      	ldr	r2, [r7, #20]
 8008e98:	6812      	ldr	r2, [r2, #0]
 8008e9a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008e9c:	430b      	orrs	r3, r1
 8008e9e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008ea0:	697b      	ldr	r3, [r7, #20]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	685b      	ldr	r3, [r3, #4]
 8008ea6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008eaa:	697b      	ldr	r3, [r7, #20]
 8008eac:	68da      	ldr	r2, [r3, #12]
 8008eae:	697b      	ldr	r3, [r7, #20]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	430a      	orrs	r2, r1
 8008eb4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008eb6:	697b      	ldr	r3, [r7, #20]
 8008eb8:	699b      	ldr	r3, [r3, #24]
 8008eba:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008ebc:	697b      	ldr	r3, [r7, #20]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	4a9f      	ldr	r2, [pc, #636]	@ (8009140 <UART_SetConfig+0x2dc>)
 8008ec2:	4293      	cmp	r3, r2
 8008ec4:	d004      	beq.n	8008ed0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008ec6:	697b      	ldr	r3, [r7, #20]
 8008ec8:	6a1b      	ldr	r3, [r3, #32]
 8008eca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008ecc:	4313      	orrs	r3, r2
 8008ece:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008ed0:	697b      	ldr	r3, [r7, #20]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	689b      	ldr	r3, [r3, #8]
 8008ed6:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8008eda:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8008ede:	697a      	ldr	r2, [r7, #20]
 8008ee0:	6812      	ldr	r2, [r2, #0]
 8008ee2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008ee4:	430b      	orrs	r3, r1
 8008ee6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008ee8:	697b      	ldr	r3, [r7, #20]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008eee:	f023 010f 	bic.w	r1, r3, #15
 8008ef2:	697b      	ldr	r3, [r7, #20]
 8008ef4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008ef6:	697b      	ldr	r3, [r7, #20]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	430a      	orrs	r2, r1
 8008efc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008efe:	697b      	ldr	r3, [r7, #20]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	4a90      	ldr	r2, [pc, #576]	@ (8009144 <UART_SetConfig+0x2e0>)
 8008f04:	4293      	cmp	r3, r2
 8008f06:	d125      	bne.n	8008f54 <UART_SetConfig+0xf0>
 8008f08:	4b8f      	ldr	r3, [pc, #572]	@ (8009148 <UART_SetConfig+0x2e4>)
 8008f0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008f0e:	f003 0303 	and.w	r3, r3, #3
 8008f12:	2b03      	cmp	r3, #3
 8008f14:	d81a      	bhi.n	8008f4c <UART_SetConfig+0xe8>
 8008f16:	a201      	add	r2, pc, #4	@ (adr r2, 8008f1c <UART_SetConfig+0xb8>)
 8008f18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f1c:	08008f2d 	.word	0x08008f2d
 8008f20:	08008f3d 	.word	0x08008f3d
 8008f24:	08008f35 	.word	0x08008f35
 8008f28:	08008f45 	.word	0x08008f45
 8008f2c:	2301      	movs	r3, #1
 8008f2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008f32:	e116      	b.n	8009162 <UART_SetConfig+0x2fe>
 8008f34:	2302      	movs	r3, #2
 8008f36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008f3a:	e112      	b.n	8009162 <UART_SetConfig+0x2fe>
 8008f3c:	2304      	movs	r3, #4
 8008f3e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008f42:	e10e      	b.n	8009162 <UART_SetConfig+0x2fe>
 8008f44:	2308      	movs	r3, #8
 8008f46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008f4a:	e10a      	b.n	8009162 <UART_SetConfig+0x2fe>
 8008f4c:	2310      	movs	r3, #16
 8008f4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008f52:	e106      	b.n	8009162 <UART_SetConfig+0x2fe>
 8008f54:	697b      	ldr	r3, [r7, #20]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	4a7c      	ldr	r2, [pc, #496]	@ (800914c <UART_SetConfig+0x2e8>)
 8008f5a:	4293      	cmp	r3, r2
 8008f5c:	d138      	bne.n	8008fd0 <UART_SetConfig+0x16c>
 8008f5e:	4b7a      	ldr	r3, [pc, #488]	@ (8009148 <UART_SetConfig+0x2e4>)
 8008f60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008f64:	f003 030c 	and.w	r3, r3, #12
 8008f68:	2b0c      	cmp	r3, #12
 8008f6a:	d82d      	bhi.n	8008fc8 <UART_SetConfig+0x164>
 8008f6c:	a201      	add	r2, pc, #4	@ (adr r2, 8008f74 <UART_SetConfig+0x110>)
 8008f6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f72:	bf00      	nop
 8008f74:	08008fa9 	.word	0x08008fa9
 8008f78:	08008fc9 	.word	0x08008fc9
 8008f7c:	08008fc9 	.word	0x08008fc9
 8008f80:	08008fc9 	.word	0x08008fc9
 8008f84:	08008fb9 	.word	0x08008fb9
 8008f88:	08008fc9 	.word	0x08008fc9
 8008f8c:	08008fc9 	.word	0x08008fc9
 8008f90:	08008fc9 	.word	0x08008fc9
 8008f94:	08008fb1 	.word	0x08008fb1
 8008f98:	08008fc9 	.word	0x08008fc9
 8008f9c:	08008fc9 	.word	0x08008fc9
 8008fa0:	08008fc9 	.word	0x08008fc9
 8008fa4:	08008fc1 	.word	0x08008fc1
 8008fa8:	2300      	movs	r3, #0
 8008faa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008fae:	e0d8      	b.n	8009162 <UART_SetConfig+0x2fe>
 8008fb0:	2302      	movs	r3, #2
 8008fb2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008fb6:	e0d4      	b.n	8009162 <UART_SetConfig+0x2fe>
 8008fb8:	2304      	movs	r3, #4
 8008fba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008fbe:	e0d0      	b.n	8009162 <UART_SetConfig+0x2fe>
 8008fc0:	2308      	movs	r3, #8
 8008fc2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008fc6:	e0cc      	b.n	8009162 <UART_SetConfig+0x2fe>
 8008fc8:	2310      	movs	r3, #16
 8008fca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008fce:	e0c8      	b.n	8009162 <UART_SetConfig+0x2fe>
 8008fd0:	697b      	ldr	r3, [r7, #20]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	4a5e      	ldr	r2, [pc, #376]	@ (8009150 <UART_SetConfig+0x2ec>)
 8008fd6:	4293      	cmp	r3, r2
 8008fd8:	d125      	bne.n	8009026 <UART_SetConfig+0x1c2>
 8008fda:	4b5b      	ldr	r3, [pc, #364]	@ (8009148 <UART_SetConfig+0x2e4>)
 8008fdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008fe0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8008fe4:	2b30      	cmp	r3, #48	@ 0x30
 8008fe6:	d016      	beq.n	8009016 <UART_SetConfig+0x1b2>
 8008fe8:	2b30      	cmp	r3, #48	@ 0x30
 8008fea:	d818      	bhi.n	800901e <UART_SetConfig+0x1ba>
 8008fec:	2b20      	cmp	r3, #32
 8008fee:	d00a      	beq.n	8009006 <UART_SetConfig+0x1a2>
 8008ff0:	2b20      	cmp	r3, #32
 8008ff2:	d814      	bhi.n	800901e <UART_SetConfig+0x1ba>
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d002      	beq.n	8008ffe <UART_SetConfig+0x19a>
 8008ff8:	2b10      	cmp	r3, #16
 8008ffa:	d008      	beq.n	800900e <UART_SetConfig+0x1aa>
 8008ffc:	e00f      	b.n	800901e <UART_SetConfig+0x1ba>
 8008ffe:	2300      	movs	r3, #0
 8009000:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009004:	e0ad      	b.n	8009162 <UART_SetConfig+0x2fe>
 8009006:	2302      	movs	r3, #2
 8009008:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800900c:	e0a9      	b.n	8009162 <UART_SetConfig+0x2fe>
 800900e:	2304      	movs	r3, #4
 8009010:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009014:	e0a5      	b.n	8009162 <UART_SetConfig+0x2fe>
 8009016:	2308      	movs	r3, #8
 8009018:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800901c:	e0a1      	b.n	8009162 <UART_SetConfig+0x2fe>
 800901e:	2310      	movs	r3, #16
 8009020:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009024:	e09d      	b.n	8009162 <UART_SetConfig+0x2fe>
 8009026:	697b      	ldr	r3, [r7, #20]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	4a4a      	ldr	r2, [pc, #296]	@ (8009154 <UART_SetConfig+0x2f0>)
 800902c:	4293      	cmp	r3, r2
 800902e:	d125      	bne.n	800907c <UART_SetConfig+0x218>
 8009030:	4b45      	ldr	r3, [pc, #276]	@ (8009148 <UART_SetConfig+0x2e4>)
 8009032:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009036:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800903a:	2bc0      	cmp	r3, #192	@ 0xc0
 800903c:	d016      	beq.n	800906c <UART_SetConfig+0x208>
 800903e:	2bc0      	cmp	r3, #192	@ 0xc0
 8009040:	d818      	bhi.n	8009074 <UART_SetConfig+0x210>
 8009042:	2b80      	cmp	r3, #128	@ 0x80
 8009044:	d00a      	beq.n	800905c <UART_SetConfig+0x1f8>
 8009046:	2b80      	cmp	r3, #128	@ 0x80
 8009048:	d814      	bhi.n	8009074 <UART_SetConfig+0x210>
 800904a:	2b00      	cmp	r3, #0
 800904c:	d002      	beq.n	8009054 <UART_SetConfig+0x1f0>
 800904e:	2b40      	cmp	r3, #64	@ 0x40
 8009050:	d008      	beq.n	8009064 <UART_SetConfig+0x200>
 8009052:	e00f      	b.n	8009074 <UART_SetConfig+0x210>
 8009054:	2300      	movs	r3, #0
 8009056:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800905a:	e082      	b.n	8009162 <UART_SetConfig+0x2fe>
 800905c:	2302      	movs	r3, #2
 800905e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009062:	e07e      	b.n	8009162 <UART_SetConfig+0x2fe>
 8009064:	2304      	movs	r3, #4
 8009066:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800906a:	e07a      	b.n	8009162 <UART_SetConfig+0x2fe>
 800906c:	2308      	movs	r3, #8
 800906e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009072:	e076      	b.n	8009162 <UART_SetConfig+0x2fe>
 8009074:	2310      	movs	r3, #16
 8009076:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800907a:	e072      	b.n	8009162 <UART_SetConfig+0x2fe>
 800907c:	697b      	ldr	r3, [r7, #20]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	4a35      	ldr	r2, [pc, #212]	@ (8009158 <UART_SetConfig+0x2f4>)
 8009082:	4293      	cmp	r3, r2
 8009084:	d12a      	bne.n	80090dc <UART_SetConfig+0x278>
 8009086:	4b30      	ldr	r3, [pc, #192]	@ (8009148 <UART_SetConfig+0x2e4>)
 8009088:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800908c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009090:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009094:	d01a      	beq.n	80090cc <UART_SetConfig+0x268>
 8009096:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800909a:	d81b      	bhi.n	80090d4 <UART_SetConfig+0x270>
 800909c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80090a0:	d00c      	beq.n	80090bc <UART_SetConfig+0x258>
 80090a2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80090a6:	d815      	bhi.n	80090d4 <UART_SetConfig+0x270>
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d003      	beq.n	80090b4 <UART_SetConfig+0x250>
 80090ac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80090b0:	d008      	beq.n	80090c4 <UART_SetConfig+0x260>
 80090b2:	e00f      	b.n	80090d4 <UART_SetConfig+0x270>
 80090b4:	2300      	movs	r3, #0
 80090b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80090ba:	e052      	b.n	8009162 <UART_SetConfig+0x2fe>
 80090bc:	2302      	movs	r3, #2
 80090be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80090c2:	e04e      	b.n	8009162 <UART_SetConfig+0x2fe>
 80090c4:	2304      	movs	r3, #4
 80090c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80090ca:	e04a      	b.n	8009162 <UART_SetConfig+0x2fe>
 80090cc:	2308      	movs	r3, #8
 80090ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80090d2:	e046      	b.n	8009162 <UART_SetConfig+0x2fe>
 80090d4:	2310      	movs	r3, #16
 80090d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80090da:	e042      	b.n	8009162 <UART_SetConfig+0x2fe>
 80090dc:	697b      	ldr	r3, [r7, #20]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	4a17      	ldr	r2, [pc, #92]	@ (8009140 <UART_SetConfig+0x2dc>)
 80090e2:	4293      	cmp	r3, r2
 80090e4:	d13a      	bne.n	800915c <UART_SetConfig+0x2f8>
 80090e6:	4b18      	ldr	r3, [pc, #96]	@ (8009148 <UART_SetConfig+0x2e4>)
 80090e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80090ec:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80090f0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80090f4:	d01a      	beq.n	800912c <UART_SetConfig+0x2c8>
 80090f6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80090fa:	d81b      	bhi.n	8009134 <UART_SetConfig+0x2d0>
 80090fc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009100:	d00c      	beq.n	800911c <UART_SetConfig+0x2b8>
 8009102:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009106:	d815      	bhi.n	8009134 <UART_SetConfig+0x2d0>
 8009108:	2b00      	cmp	r3, #0
 800910a:	d003      	beq.n	8009114 <UART_SetConfig+0x2b0>
 800910c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009110:	d008      	beq.n	8009124 <UART_SetConfig+0x2c0>
 8009112:	e00f      	b.n	8009134 <UART_SetConfig+0x2d0>
 8009114:	2300      	movs	r3, #0
 8009116:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800911a:	e022      	b.n	8009162 <UART_SetConfig+0x2fe>
 800911c:	2302      	movs	r3, #2
 800911e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009122:	e01e      	b.n	8009162 <UART_SetConfig+0x2fe>
 8009124:	2304      	movs	r3, #4
 8009126:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800912a:	e01a      	b.n	8009162 <UART_SetConfig+0x2fe>
 800912c:	2308      	movs	r3, #8
 800912e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009132:	e016      	b.n	8009162 <UART_SetConfig+0x2fe>
 8009134:	2310      	movs	r3, #16
 8009136:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800913a:	e012      	b.n	8009162 <UART_SetConfig+0x2fe>
 800913c:	cfff69f3 	.word	0xcfff69f3
 8009140:	40008000 	.word	0x40008000
 8009144:	40013800 	.word	0x40013800
 8009148:	40021000 	.word	0x40021000
 800914c:	40004400 	.word	0x40004400
 8009150:	40004800 	.word	0x40004800
 8009154:	40004c00 	.word	0x40004c00
 8009158:	40005000 	.word	0x40005000
 800915c:	2310      	movs	r3, #16
 800915e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009162:	697b      	ldr	r3, [r7, #20]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	4aae      	ldr	r2, [pc, #696]	@ (8009420 <UART_SetConfig+0x5bc>)
 8009168:	4293      	cmp	r3, r2
 800916a:	f040 8097 	bne.w	800929c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800916e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009172:	2b08      	cmp	r3, #8
 8009174:	d823      	bhi.n	80091be <UART_SetConfig+0x35a>
 8009176:	a201      	add	r2, pc, #4	@ (adr r2, 800917c <UART_SetConfig+0x318>)
 8009178:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800917c:	080091a1 	.word	0x080091a1
 8009180:	080091bf 	.word	0x080091bf
 8009184:	080091a9 	.word	0x080091a9
 8009188:	080091bf 	.word	0x080091bf
 800918c:	080091af 	.word	0x080091af
 8009190:	080091bf 	.word	0x080091bf
 8009194:	080091bf 	.word	0x080091bf
 8009198:	080091bf 	.word	0x080091bf
 800919c:	080091b7 	.word	0x080091b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80091a0:	f7fd f8ac 	bl	80062fc <HAL_RCC_GetPCLK1Freq>
 80091a4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80091a6:	e010      	b.n	80091ca <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80091a8:	4b9e      	ldr	r3, [pc, #632]	@ (8009424 <UART_SetConfig+0x5c0>)
 80091aa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80091ac:	e00d      	b.n	80091ca <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80091ae:	f7fd f837 	bl	8006220 <HAL_RCC_GetSysClockFreq>
 80091b2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80091b4:	e009      	b.n	80091ca <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80091b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80091ba:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80091bc:	e005      	b.n	80091ca <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80091be:	2300      	movs	r3, #0
 80091c0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80091c2:	2301      	movs	r3, #1
 80091c4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80091c8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80091ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	f000 8130 	beq.w	8009432 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80091d2:	697b      	ldr	r3, [r7, #20]
 80091d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80091d6:	4a94      	ldr	r2, [pc, #592]	@ (8009428 <UART_SetConfig+0x5c4>)
 80091d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80091dc:	461a      	mov	r2, r3
 80091de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091e0:	fbb3 f3f2 	udiv	r3, r3, r2
 80091e4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80091e6:	697b      	ldr	r3, [r7, #20]
 80091e8:	685a      	ldr	r2, [r3, #4]
 80091ea:	4613      	mov	r3, r2
 80091ec:	005b      	lsls	r3, r3, #1
 80091ee:	4413      	add	r3, r2
 80091f0:	69ba      	ldr	r2, [r7, #24]
 80091f2:	429a      	cmp	r2, r3
 80091f4:	d305      	bcc.n	8009202 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80091f6:	697b      	ldr	r3, [r7, #20]
 80091f8:	685b      	ldr	r3, [r3, #4]
 80091fa:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80091fc:	69ba      	ldr	r2, [r7, #24]
 80091fe:	429a      	cmp	r2, r3
 8009200:	d903      	bls.n	800920a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8009202:	2301      	movs	r3, #1
 8009204:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009208:	e113      	b.n	8009432 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800920a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800920c:	2200      	movs	r2, #0
 800920e:	60bb      	str	r3, [r7, #8]
 8009210:	60fa      	str	r2, [r7, #12]
 8009212:	697b      	ldr	r3, [r7, #20]
 8009214:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009216:	4a84      	ldr	r2, [pc, #528]	@ (8009428 <UART_SetConfig+0x5c4>)
 8009218:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800921c:	b29b      	uxth	r3, r3
 800921e:	2200      	movs	r2, #0
 8009220:	603b      	str	r3, [r7, #0]
 8009222:	607a      	str	r2, [r7, #4]
 8009224:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009228:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800922c:	f7f7 fd76 	bl	8000d1c <__aeabi_uldivmod>
 8009230:	4602      	mov	r2, r0
 8009232:	460b      	mov	r3, r1
 8009234:	4610      	mov	r0, r2
 8009236:	4619      	mov	r1, r3
 8009238:	f04f 0200 	mov.w	r2, #0
 800923c:	f04f 0300 	mov.w	r3, #0
 8009240:	020b      	lsls	r3, r1, #8
 8009242:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009246:	0202      	lsls	r2, r0, #8
 8009248:	6979      	ldr	r1, [r7, #20]
 800924a:	6849      	ldr	r1, [r1, #4]
 800924c:	0849      	lsrs	r1, r1, #1
 800924e:	2000      	movs	r0, #0
 8009250:	460c      	mov	r4, r1
 8009252:	4605      	mov	r5, r0
 8009254:	eb12 0804 	adds.w	r8, r2, r4
 8009258:	eb43 0905 	adc.w	r9, r3, r5
 800925c:	697b      	ldr	r3, [r7, #20]
 800925e:	685b      	ldr	r3, [r3, #4]
 8009260:	2200      	movs	r2, #0
 8009262:	469a      	mov	sl, r3
 8009264:	4693      	mov	fp, r2
 8009266:	4652      	mov	r2, sl
 8009268:	465b      	mov	r3, fp
 800926a:	4640      	mov	r0, r8
 800926c:	4649      	mov	r1, r9
 800926e:	f7f7 fd55 	bl	8000d1c <__aeabi_uldivmod>
 8009272:	4602      	mov	r2, r0
 8009274:	460b      	mov	r3, r1
 8009276:	4613      	mov	r3, r2
 8009278:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800927a:	6a3b      	ldr	r3, [r7, #32]
 800927c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009280:	d308      	bcc.n	8009294 <UART_SetConfig+0x430>
 8009282:	6a3b      	ldr	r3, [r7, #32]
 8009284:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009288:	d204      	bcs.n	8009294 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800928a:	697b      	ldr	r3, [r7, #20]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	6a3a      	ldr	r2, [r7, #32]
 8009290:	60da      	str	r2, [r3, #12]
 8009292:	e0ce      	b.n	8009432 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8009294:	2301      	movs	r3, #1
 8009296:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800929a:	e0ca      	b.n	8009432 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800929c:	697b      	ldr	r3, [r7, #20]
 800929e:	69db      	ldr	r3, [r3, #28]
 80092a0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80092a4:	d166      	bne.n	8009374 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80092a6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80092aa:	2b08      	cmp	r3, #8
 80092ac:	d827      	bhi.n	80092fe <UART_SetConfig+0x49a>
 80092ae:	a201      	add	r2, pc, #4	@ (adr r2, 80092b4 <UART_SetConfig+0x450>)
 80092b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092b4:	080092d9 	.word	0x080092d9
 80092b8:	080092e1 	.word	0x080092e1
 80092bc:	080092e9 	.word	0x080092e9
 80092c0:	080092ff 	.word	0x080092ff
 80092c4:	080092ef 	.word	0x080092ef
 80092c8:	080092ff 	.word	0x080092ff
 80092cc:	080092ff 	.word	0x080092ff
 80092d0:	080092ff 	.word	0x080092ff
 80092d4:	080092f7 	.word	0x080092f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80092d8:	f7fd f810 	bl	80062fc <HAL_RCC_GetPCLK1Freq>
 80092dc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80092de:	e014      	b.n	800930a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80092e0:	f7fd f822 	bl	8006328 <HAL_RCC_GetPCLK2Freq>
 80092e4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80092e6:	e010      	b.n	800930a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80092e8:	4b4e      	ldr	r3, [pc, #312]	@ (8009424 <UART_SetConfig+0x5c0>)
 80092ea:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80092ec:	e00d      	b.n	800930a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80092ee:	f7fc ff97 	bl	8006220 <HAL_RCC_GetSysClockFreq>
 80092f2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80092f4:	e009      	b.n	800930a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80092f6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80092fa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80092fc:	e005      	b.n	800930a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80092fe:	2300      	movs	r3, #0
 8009300:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009302:	2301      	movs	r3, #1
 8009304:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009308:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800930a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800930c:	2b00      	cmp	r3, #0
 800930e:	f000 8090 	beq.w	8009432 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009312:	697b      	ldr	r3, [r7, #20]
 8009314:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009316:	4a44      	ldr	r2, [pc, #272]	@ (8009428 <UART_SetConfig+0x5c4>)
 8009318:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800931c:	461a      	mov	r2, r3
 800931e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009320:	fbb3 f3f2 	udiv	r3, r3, r2
 8009324:	005a      	lsls	r2, r3, #1
 8009326:	697b      	ldr	r3, [r7, #20]
 8009328:	685b      	ldr	r3, [r3, #4]
 800932a:	085b      	lsrs	r3, r3, #1
 800932c:	441a      	add	r2, r3
 800932e:	697b      	ldr	r3, [r7, #20]
 8009330:	685b      	ldr	r3, [r3, #4]
 8009332:	fbb2 f3f3 	udiv	r3, r2, r3
 8009336:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009338:	6a3b      	ldr	r3, [r7, #32]
 800933a:	2b0f      	cmp	r3, #15
 800933c:	d916      	bls.n	800936c <UART_SetConfig+0x508>
 800933e:	6a3b      	ldr	r3, [r7, #32]
 8009340:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009344:	d212      	bcs.n	800936c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009346:	6a3b      	ldr	r3, [r7, #32]
 8009348:	b29b      	uxth	r3, r3
 800934a:	f023 030f 	bic.w	r3, r3, #15
 800934e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009350:	6a3b      	ldr	r3, [r7, #32]
 8009352:	085b      	lsrs	r3, r3, #1
 8009354:	b29b      	uxth	r3, r3
 8009356:	f003 0307 	and.w	r3, r3, #7
 800935a:	b29a      	uxth	r2, r3
 800935c:	8bfb      	ldrh	r3, [r7, #30]
 800935e:	4313      	orrs	r3, r2
 8009360:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8009362:	697b      	ldr	r3, [r7, #20]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	8bfa      	ldrh	r2, [r7, #30]
 8009368:	60da      	str	r2, [r3, #12]
 800936a:	e062      	b.n	8009432 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800936c:	2301      	movs	r3, #1
 800936e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009372:	e05e      	b.n	8009432 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009374:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009378:	2b08      	cmp	r3, #8
 800937a:	d828      	bhi.n	80093ce <UART_SetConfig+0x56a>
 800937c:	a201      	add	r2, pc, #4	@ (adr r2, 8009384 <UART_SetConfig+0x520>)
 800937e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009382:	bf00      	nop
 8009384:	080093a9 	.word	0x080093a9
 8009388:	080093b1 	.word	0x080093b1
 800938c:	080093b9 	.word	0x080093b9
 8009390:	080093cf 	.word	0x080093cf
 8009394:	080093bf 	.word	0x080093bf
 8009398:	080093cf 	.word	0x080093cf
 800939c:	080093cf 	.word	0x080093cf
 80093a0:	080093cf 	.word	0x080093cf
 80093a4:	080093c7 	.word	0x080093c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80093a8:	f7fc ffa8 	bl	80062fc <HAL_RCC_GetPCLK1Freq>
 80093ac:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80093ae:	e014      	b.n	80093da <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80093b0:	f7fc ffba 	bl	8006328 <HAL_RCC_GetPCLK2Freq>
 80093b4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80093b6:	e010      	b.n	80093da <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80093b8:	4b1a      	ldr	r3, [pc, #104]	@ (8009424 <UART_SetConfig+0x5c0>)
 80093ba:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80093bc:	e00d      	b.n	80093da <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80093be:	f7fc ff2f 	bl	8006220 <HAL_RCC_GetSysClockFreq>
 80093c2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80093c4:	e009      	b.n	80093da <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80093c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80093ca:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80093cc:	e005      	b.n	80093da <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80093ce:	2300      	movs	r3, #0
 80093d0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80093d2:	2301      	movs	r3, #1
 80093d4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80093d8:	bf00      	nop
    }

    if (pclk != 0U)
 80093da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d028      	beq.n	8009432 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80093e0:	697b      	ldr	r3, [r7, #20]
 80093e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80093e4:	4a10      	ldr	r2, [pc, #64]	@ (8009428 <UART_SetConfig+0x5c4>)
 80093e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80093ea:	461a      	mov	r2, r3
 80093ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093ee:	fbb3 f2f2 	udiv	r2, r3, r2
 80093f2:	697b      	ldr	r3, [r7, #20]
 80093f4:	685b      	ldr	r3, [r3, #4]
 80093f6:	085b      	lsrs	r3, r3, #1
 80093f8:	441a      	add	r2, r3
 80093fa:	697b      	ldr	r3, [r7, #20]
 80093fc:	685b      	ldr	r3, [r3, #4]
 80093fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8009402:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009404:	6a3b      	ldr	r3, [r7, #32]
 8009406:	2b0f      	cmp	r3, #15
 8009408:	d910      	bls.n	800942c <UART_SetConfig+0x5c8>
 800940a:	6a3b      	ldr	r3, [r7, #32]
 800940c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009410:	d20c      	bcs.n	800942c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009412:	6a3b      	ldr	r3, [r7, #32]
 8009414:	b29a      	uxth	r2, r3
 8009416:	697b      	ldr	r3, [r7, #20]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	60da      	str	r2, [r3, #12]
 800941c:	e009      	b.n	8009432 <UART_SetConfig+0x5ce>
 800941e:	bf00      	nop
 8009420:	40008000 	.word	0x40008000
 8009424:	00f42400 	.word	0x00f42400
 8009428:	0801d554 	.word	0x0801d554
      }
      else
      {
        ret = HAL_ERROR;
 800942c:	2301      	movs	r3, #1
 800942e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009432:	697b      	ldr	r3, [r7, #20]
 8009434:	2201      	movs	r2, #1
 8009436:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800943a:	697b      	ldr	r3, [r7, #20]
 800943c:	2201      	movs	r2, #1
 800943e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009442:	697b      	ldr	r3, [r7, #20]
 8009444:	2200      	movs	r2, #0
 8009446:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8009448:	697b      	ldr	r3, [r7, #20]
 800944a:	2200      	movs	r2, #0
 800944c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800944e:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8009452:	4618      	mov	r0, r3
 8009454:	3730      	adds	r7, #48	@ 0x30
 8009456:	46bd      	mov	sp, r7
 8009458:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800945c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800945c:	b480      	push	{r7}
 800945e:	b083      	sub	sp, #12
 8009460:	af00      	add	r7, sp, #0
 8009462:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009468:	f003 0308 	and.w	r3, r3, #8
 800946c:	2b00      	cmp	r3, #0
 800946e:	d00a      	beq.n	8009486 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	685b      	ldr	r3, [r3, #4]
 8009476:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	430a      	orrs	r2, r1
 8009484:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800948a:	f003 0301 	and.w	r3, r3, #1
 800948e:	2b00      	cmp	r3, #0
 8009490:	d00a      	beq.n	80094a8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	685b      	ldr	r3, [r3, #4]
 8009498:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	430a      	orrs	r2, r1
 80094a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80094ac:	f003 0302 	and.w	r3, r3, #2
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d00a      	beq.n	80094ca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	685b      	ldr	r3, [r3, #4]
 80094ba:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	430a      	orrs	r2, r1
 80094c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80094ce:	f003 0304 	and.w	r3, r3, #4
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d00a      	beq.n	80094ec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	685b      	ldr	r3, [r3, #4]
 80094dc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	430a      	orrs	r2, r1
 80094ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80094f0:	f003 0310 	and.w	r3, r3, #16
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d00a      	beq.n	800950e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	689b      	ldr	r3, [r3, #8]
 80094fe:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	430a      	orrs	r2, r1
 800950c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009512:	f003 0320 	and.w	r3, r3, #32
 8009516:	2b00      	cmp	r3, #0
 8009518:	d00a      	beq.n	8009530 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	689b      	ldr	r3, [r3, #8]
 8009520:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	430a      	orrs	r2, r1
 800952e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009534:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009538:	2b00      	cmp	r3, #0
 800953a:	d01a      	beq.n	8009572 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	685b      	ldr	r3, [r3, #4]
 8009542:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	430a      	orrs	r2, r1
 8009550:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009556:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800955a:	d10a      	bne.n	8009572 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	685b      	ldr	r3, [r3, #4]
 8009562:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	430a      	orrs	r2, r1
 8009570:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009576:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800957a:	2b00      	cmp	r3, #0
 800957c:	d00a      	beq.n	8009594 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	685b      	ldr	r3, [r3, #4]
 8009584:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	430a      	orrs	r2, r1
 8009592:	605a      	str	r2, [r3, #4]
  }
}
 8009594:	bf00      	nop
 8009596:	370c      	adds	r7, #12
 8009598:	46bd      	mov	sp, r7
 800959a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800959e:	4770      	bx	lr

080095a0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80095a0:	b580      	push	{r7, lr}
 80095a2:	b098      	sub	sp, #96	@ 0x60
 80095a4:	af02      	add	r7, sp, #8
 80095a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	2200      	movs	r2, #0
 80095ac:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80095b0:	f7fb fae4 	bl	8004b7c <HAL_GetTick>
 80095b4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	f003 0308 	and.w	r3, r3, #8
 80095c0:	2b08      	cmp	r3, #8
 80095c2:	d12f      	bne.n	8009624 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80095c4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80095c8:	9300      	str	r3, [sp, #0]
 80095ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80095cc:	2200      	movs	r2, #0
 80095ce:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80095d2:	6878      	ldr	r0, [r7, #4]
 80095d4:	f000 f88e 	bl	80096f4 <UART_WaitOnFlagUntilTimeout>
 80095d8:	4603      	mov	r3, r0
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d022      	beq.n	8009624 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095e6:	e853 3f00 	ldrex	r3, [r3]
 80095ea:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80095ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80095ee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80095f2:	653b      	str	r3, [r7, #80]	@ 0x50
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	461a      	mov	r2, r3
 80095fa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80095fc:	647b      	str	r3, [r7, #68]	@ 0x44
 80095fe:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009600:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009602:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009604:	e841 2300 	strex	r3, r2, [r1]
 8009608:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800960a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800960c:	2b00      	cmp	r3, #0
 800960e:	d1e6      	bne.n	80095de <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	2220      	movs	r2, #32
 8009614:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	2200      	movs	r2, #0
 800961c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009620:	2303      	movs	r3, #3
 8009622:	e063      	b.n	80096ec <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	f003 0304 	and.w	r3, r3, #4
 800962e:	2b04      	cmp	r3, #4
 8009630:	d149      	bne.n	80096c6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009632:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009636:	9300      	str	r3, [sp, #0]
 8009638:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800963a:	2200      	movs	r2, #0
 800963c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009640:	6878      	ldr	r0, [r7, #4]
 8009642:	f000 f857 	bl	80096f4 <UART_WaitOnFlagUntilTimeout>
 8009646:	4603      	mov	r3, r0
 8009648:	2b00      	cmp	r3, #0
 800964a:	d03c      	beq.n	80096c6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009652:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009654:	e853 3f00 	ldrex	r3, [r3]
 8009658:	623b      	str	r3, [r7, #32]
   return(result);
 800965a:	6a3b      	ldr	r3, [r7, #32]
 800965c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009660:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	461a      	mov	r2, r3
 8009668:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800966a:	633b      	str	r3, [r7, #48]	@ 0x30
 800966c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800966e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009670:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009672:	e841 2300 	strex	r3, r2, [r1]
 8009676:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009678:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800967a:	2b00      	cmp	r3, #0
 800967c:	d1e6      	bne.n	800964c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	3308      	adds	r3, #8
 8009684:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009686:	693b      	ldr	r3, [r7, #16]
 8009688:	e853 3f00 	ldrex	r3, [r3]
 800968c:	60fb      	str	r3, [r7, #12]
   return(result);
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	f023 0301 	bic.w	r3, r3, #1
 8009694:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	3308      	adds	r3, #8
 800969c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800969e:	61fa      	str	r2, [r7, #28]
 80096a0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096a2:	69b9      	ldr	r1, [r7, #24]
 80096a4:	69fa      	ldr	r2, [r7, #28]
 80096a6:	e841 2300 	strex	r3, r2, [r1]
 80096aa:	617b      	str	r3, [r7, #20]
   return(result);
 80096ac:	697b      	ldr	r3, [r7, #20]
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d1e5      	bne.n	800967e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	2220      	movs	r2, #32
 80096b6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	2200      	movs	r2, #0
 80096be:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80096c2:	2303      	movs	r3, #3
 80096c4:	e012      	b.n	80096ec <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	2220      	movs	r2, #32
 80096ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	2220      	movs	r2, #32
 80096d2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	2200      	movs	r2, #0
 80096da:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	2200      	movs	r2, #0
 80096e0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	2200      	movs	r2, #0
 80096e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80096ea:	2300      	movs	r3, #0
}
 80096ec:	4618      	mov	r0, r3
 80096ee:	3758      	adds	r7, #88	@ 0x58
 80096f0:	46bd      	mov	sp, r7
 80096f2:	bd80      	pop	{r7, pc}

080096f4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80096f4:	b580      	push	{r7, lr}
 80096f6:	b084      	sub	sp, #16
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	60f8      	str	r0, [r7, #12]
 80096fc:	60b9      	str	r1, [r7, #8]
 80096fe:	603b      	str	r3, [r7, #0]
 8009700:	4613      	mov	r3, r2
 8009702:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009704:	e04f      	b.n	80097a6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009706:	69bb      	ldr	r3, [r7, #24]
 8009708:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800970c:	d04b      	beq.n	80097a6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800970e:	f7fb fa35 	bl	8004b7c <HAL_GetTick>
 8009712:	4602      	mov	r2, r0
 8009714:	683b      	ldr	r3, [r7, #0]
 8009716:	1ad3      	subs	r3, r2, r3
 8009718:	69ba      	ldr	r2, [r7, #24]
 800971a:	429a      	cmp	r2, r3
 800971c:	d302      	bcc.n	8009724 <UART_WaitOnFlagUntilTimeout+0x30>
 800971e:	69bb      	ldr	r3, [r7, #24]
 8009720:	2b00      	cmp	r3, #0
 8009722:	d101      	bne.n	8009728 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009724:	2303      	movs	r3, #3
 8009726:	e04e      	b.n	80097c6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	f003 0304 	and.w	r3, r3, #4
 8009732:	2b00      	cmp	r3, #0
 8009734:	d037      	beq.n	80097a6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009736:	68bb      	ldr	r3, [r7, #8]
 8009738:	2b80      	cmp	r3, #128	@ 0x80
 800973a:	d034      	beq.n	80097a6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800973c:	68bb      	ldr	r3, [r7, #8]
 800973e:	2b40      	cmp	r3, #64	@ 0x40
 8009740:	d031      	beq.n	80097a6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	69db      	ldr	r3, [r3, #28]
 8009748:	f003 0308 	and.w	r3, r3, #8
 800974c:	2b08      	cmp	r3, #8
 800974e:	d110      	bne.n	8009772 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	2208      	movs	r2, #8
 8009756:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009758:	68f8      	ldr	r0, [r7, #12]
 800975a:	f000 f920 	bl	800999e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	2208      	movs	r2, #8
 8009762:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	2200      	movs	r2, #0
 800976a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800976e:	2301      	movs	r3, #1
 8009770:	e029      	b.n	80097c6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	69db      	ldr	r3, [r3, #28]
 8009778:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800977c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009780:	d111      	bne.n	80097a6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800978a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800978c:	68f8      	ldr	r0, [r7, #12]
 800978e:	f000 f906 	bl	800999e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	2220      	movs	r2, #32
 8009796:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	2200      	movs	r2, #0
 800979e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80097a2:	2303      	movs	r3, #3
 80097a4:	e00f      	b.n	80097c6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	69da      	ldr	r2, [r3, #28]
 80097ac:	68bb      	ldr	r3, [r7, #8]
 80097ae:	4013      	ands	r3, r2
 80097b0:	68ba      	ldr	r2, [r7, #8]
 80097b2:	429a      	cmp	r2, r3
 80097b4:	bf0c      	ite	eq
 80097b6:	2301      	moveq	r3, #1
 80097b8:	2300      	movne	r3, #0
 80097ba:	b2db      	uxtb	r3, r3
 80097bc:	461a      	mov	r2, r3
 80097be:	79fb      	ldrb	r3, [r7, #7]
 80097c0:	429a      	cmp	r2, r3
 80097c2:	d0a0      	beq.n	8009706 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80097c4:	2300      	movs	r3, #0
}
 80097c6:	4618      	mov	r0, r3
 80097c8:	3710      	adds	r7, #16
 80097ca:	46bd      	mov	sp, r7
 80097cc:	bd80      	pop	{r7, pc}
	...

080097d0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80097d0:	b580      	push	{r7, lr}
 80097d2:	b096      	sub	sp, #88	@ 0x58
 80097d4:	af00      	add	r7, sp, #0
 80097d6:	60f8      	str	r0, [r7, #12]
 80097d8:	60b9      	str	r1, [r7, #8]
 80097da:	4613      	mov	r3, r2
 80097dc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	68ba      	ldr	r2, [r7, #8]
 80097e2:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	88fa      	ldrh	r2, [r7, #6]
 80097e8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	2200      	movs	r2, #0
 80097f0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	2222      	movs	r2, #34	@ 0x22
 80097f8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009802:	2b00      	cmp	r3, #0
 8009804:	d02d      	beq.n	8009862 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800980c:	4a40      	ldr	r2, [pc, #256]	@ (8009910 <UART_Start_Receive_DMA+0x140>)
 800980e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009816:	4a3f      	ldr	r2, [pc, #252]	@ (8009914 <UART_Start_Receive_DMA+0x144>)
 8009818:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009820:	4a3d      	ldr	r2, [pc, #244]	@ (8009918 <UART_Start_Receive_DMA+0x148>)
 8009822:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800982a:	2200      	movs	r2, #0
 800982c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	3324      	adds	r3, #36	@ 0x24
 800983a:	4619      	mov	r1, r3
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009840:	461a      	mov	r2, r3
 8009842:	88fb      	ldrh	r3, [r7, #6]
 8009844:	f7fb fb2e 	bl	8004ea4 <HAL_DMA_Start_IT>
 8009848:	4603      	mov	r3, r0
 800984a:	2b00      	cmp	r3, #0
 800984c:	d009      	beq.n	8009862 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	2210      	movs	r2, #16
 8009852:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	2220      	movs	r2, #32
 800985a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800985e:	2301      	movs	r3, #1
 8009860:	e051      	b.n	8009906 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	691b      	ldr	r3, [r3, #16]
 8009866:	2b00      	cmp	r3, #0
 8009868:	d018      	beq.n	800989c <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009870:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009872:	e853 3f00 	ldrex	r3, [r3]
 8009876:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009878:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800987a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800987e:	657b      	str	r3, [r7, #84]	@ 0x54
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	461a      	mov	r2, r3
 8009886:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009888:	64bb      	str	r3, [r7, #72]	@ 0x48
 800988a:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800988c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800988e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009890:	e841 2300 	strex	r3, r2, [r1]
 8009894:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8009896:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009898:	2b00      	cmp	r3, #0
 800989a:	d1e6      	bne.n	800986a <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	3308      	adds	r3, #8
 80098a2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098a6:	e853 3f00 	ldrex	r3, [r3]
 80098aa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80098ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098ae:	f043 0301 	orr.w	r3, r3, #1
 80098b2:	653b      	str	r3, [r7, #80]	@ 0x50
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	3308      	adds	r3, #8
 80098ba:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80098bc:	637a      	str	r2, [r7, #52]	@ 0x34
 80098be:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098c0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80098c2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80098c4:	e841 2300 	strex	r3, r2, [r1]
 80098c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80098ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d1e5      	bne.n	800989c <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	3308      	adds	r3, #8
 80098d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098d8:	697b      	ldr	r3, [r7, #20]
 80098da:	e853 3f00 	ldrex	r3, [r3]
 80098de:	613b      	str	r3, [r7, #16]
   return(result);
 80098e0:	693b      	ldr	r3, [r7, #16]
 80098e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80098e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	3308      	adds	r3, #8
 80098ee:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80098f0:	623a      	str	r2, [r7, #32]
 80098f2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098f4:	69f9      	ldr	r1, [r7, #28]
 80098f6:	6a3a      	ldr	r2, [r7, #32]
 80098f8:	e841 2300 	strex	r3, r2, [r1]
 80098fc:	61bb      	str	r3, [r7, #24]
   return(result);
 80098fe:	69bb      	ldr	r3, [r7, #24]
 8009900:	2b00      	cmp	r3, #0
 8009902:	d1e5      	bne.n	80098d0 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8009904:	2300      	movs	r3, #0
}
 8009906:	4618      	mov	r0, r3
 8009908:	3758      	adds	r7, #88	@ 0x58
 800990a:	46bd      	mov	sp, r7
 800990c:	bd80      	pop	{r7, pc}
 800990e:	bf00      	nop
 8009910:	08009b21 	.word	0x08009b21
 8009914:	08009c4d 	.word	0x08009c4d
 8009918:	08009c8b 	.word	0x08009c8b

0800991c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800991c:	b480      	push	{r7}
 800991e:	b08f      	sub	sp, #60	@ 0x3c
 8009920:	af00      	add	r7, sp, #0
 8009922:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800992a:	6a3b      	ldr	r3, [r7, #32]
 800992c:	e853 3f00 	ldrex	r3, [r3]
 8009930:	61fb      	str	r3, [r7, #28]
   return(result);
 8009932:	69fb      	ldr	r3, [r7, #28]
 8009934:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8009938:	637b      	str	r3, [r7, #52]	@ 0x34
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	461a      	mov	r2, r3
 8009940:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009942:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009944:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009946:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009948:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800994a:	e841 2300 	strex	r3, r2, [r1]
 800994e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009950:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009952:	2b00      	cmp	r3, #0
 8009954:	d1e6      	bne.n	8009924 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	3308      	adds	r3, #8
 800995c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	e853 3f00 	ldrex	r3, [r3]
 8009964:	60bb      	str	r3, [r7, #8]
   return(result);
 8009966:	68bb      	ldr	r3, [r7, #8]
 8009968:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800996c:	633b      	str	r3, [r7, #48]	@ 0x30
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	3308      	adds	r3, #8
 8009974:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009976:	61ba      	str	r2, [r7, #24]
 8009978:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800997a:	6979      	ldr	r1, [r7, #20]
 800997c:	69ba      	ldr	r2, [r7, #24]
 800997e:	e841 2300 	strex	r3, r2, [r1]
 8009982:	613b      	str	r3, [r7, #16]
   return(result);
 8009984:	693b      	ldr	r3, [r7, #16]
 8009986:	2b00      	cmp	r3, #0
 8009988:	d1e5      	bne.n	8009956 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	2220      	movs	r2, #32
 800998e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8009992:	bf00      	nop
 8009994:	373c      	adds	r7, #60	@ 0x3c
 8009996:	46bd      	mov	sp, r7
 8009998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800999c:	4770      	bx	lr

0800999e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800999e:	b480      	push	{r7}
 80099a0:	b095      	sub	sp, #84	@ 0x54
 80099a2:	af00      	add	r7, sp, #0
 80099a4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80099ae:	e853 3f00 	ldrex	r3, [r3]
 80099b2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80099b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099b6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80099ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	461a      	mov	r2, r3
 80099c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80099c4:	643b      	str	r3, [r7, #64]	@ 0x40
 80099c6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099c8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80099ca:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80099cc:	e841 2300 	strex	r3, r2, [r1]
 80099d0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80099d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d1e6      	bne.n	80099a6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	3308      	adds	r3, #8
 80099de:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099e0:	6a3b      	ldr	r3, [r7, #32]
 80099e2:	e853 3f00 	ldrex	r3, [r3]
 80099e6:	61fb      	str	r3, [r7, #28]
   return(result);
 80099e8:	69fb      	ldr	r3, [r7, #28]
 80099ea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80099ee:	f023 0301 	bic.w	r3, r3, #1
 80099f2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	3308      	adds	r3, #8
 80099fa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80099fc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80099fe:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a00:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009a02:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009a04:	e841 2300 	strex	r3, r2, [r1]
 8009a08:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009a0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d1e3      	bne.n	80099d8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009a14:	2b01      	cmp	r3, #1
 8009a16:	d118      	bne.n	8009a4a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	e853 3f00 	ldrex	r3, [r3]
 8009a24:	60bb      	str	r3, [r7, #8]
   return(result);
 8009a26:	68bb      	ldr	r3, [r7, #8]
 8009a28:	f023 0310 	bic.w	r3, r3, #16
 8009a2c:	647b      	str	r3, [r7, #68]	@ 0x44
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	461a      	mov	r2, r3
 8009a34:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009a36:	61bb      	str	r3, [r7, #24]
 8009a38:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a3a:	6979      	ldr	r1, [r7, #20]
 8009a3c:	69ba      	ldr	r2, [r7, #24]
 8009a3e:	e841 2300 	strex	r3, r2, [r1]
 8009a42:	613b      	str	r3, [r7, #16]
   return(result);
 8009a44:	693b      	ldr	r3, [r7, #16]
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d1e6      	bne.n	8009a18 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	2220      	movs	r2, #32
 8009a4e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	2200      	movs	r2, #0
 8009a56:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	2200      	movs	r2, #0
 8009a5c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8009a5e:	bf00      	nop
 8009a60:	3754      	adds	r7, #84	@ 0x54
 8009a62:	46bd      	mov	sp, r7
 8009a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a68:	4770      	bx	lr

08009a6a <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009a6a:	b580      	push	{r7, lr}
 8009a6c:	b090      	sub	sp, #64	@ 0x40
 8009a6e:	af00      	add	r7, sp, #0
 8009a70:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a76:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	f003 0320 	and.w	r3, r3, #32
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d137      	bne.n	8009af6 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8009a86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009a88:	2200      	movs	r2, #0
 8009a8a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009a8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	3308      	adds	r3, #8
 8009a94:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a98:	e853 3f00 	ldrex	r3, [r3]
 8009a9c:	623b      	str	r3, [r7, #32]
   return(result);
 8009a9e:	6a3b      	ldr	r3, [r7, #32]
 8009aa0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009aa4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009aa6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	3308      	adds	r3, #8
 8009aac:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009aae:	633a      	str	r2, [r7, #48]	@ 0x30
 8009ab0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ab2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009ab4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009ab6:	e841 2300 	strex	r3, r2, [r1]
 8009aba:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009abc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d1e5      	bne.n	8009a8e <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009ac2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ac8:	693b      	ldr	r3, [r7, #16]
 8009aca:	e853 3f00 	ldrex	r3, [r3]
 8009ace:	60fb      	str	r3, [r7, #12]
   return(result);
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009ad6:	637b      	str	r3, [r7, #52]	@ 0x34
 8009ad8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	461a      	mov	r2, r3
 8009ade:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ae0:	61fb      	str	r3, [r7, #28]
 8009ae2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ae4:	69b9      	ldr	r1, [r7, #24]
 8009ae6:	69fa      	ldr	r2, [r7, #28]
 8009ae8:	e841 2300 	strex	r3, r2, [r1]
 8009aec:	617b      	str	r3, [r7, #20]
   return(result);
 8009aee:	697b      	ldr	r3, [r7, #20]
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d1e6      	bne.n	8009ac2 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009af4:	e002      	b.n	8009afc <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8009af6:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8009af8:	f7ff f976 	bl	8008de8 <HAL_UART_TxCpltCallback>
}
 8009afc:	bf00      	nop
 8009afe:	3740      	adds	r7, #64	@ 0x40
 8009b00:	46bd      	mov	sp, r7
 8009b02:	bd80      	pop	{r7, pc}

08009b04 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009b04:	b580      	push	{r7, lr}
 8009b06:	b084      	sub	sp, #16
 8009b08:	af00      	add	r7, sp, #0
 8009b0a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b10:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8009b12:	68f8      	ldr	r0, [r7, #12]
 8009b14:	f7ff f972 	bl	8008dfc <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009b18:	bf00      	nop
 8009b1a:	3710      	adds	r7, #16
 8009b1c:	46bd      	mov	sp, r7
 8009b1e:	bd80      	pop	{r7, pc}

08009b20 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009b20:	b580      	push	{r7, lr}
 8009b22:	b09c      	sub	sp, #112	@ 0x70
 8009b24:	af00      	add	r7, sp, #0
 8009b26:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b2c:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	f003 0320 	and.w	r3, r3, #32
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d171      	bne.n	8009c20 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8009b3c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009b3e:	2200      	movs	r2, #0
 8009b40:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009b44:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b4a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009b4c:	e853 3f00 	ldrex	r3, [r3]
 8009b50:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009b52:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009b54:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009b58:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009b5a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	461a      	mov	r2, r3
 8009b60:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009b62:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009b64:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b66:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009b68:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009b6a:	e841 2300 	strex	r3, r2, [r1]
 8009b6e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009b70:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d1e6      	bne.n	8009b44 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009b76:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	3308      	adds	r3, #8
 8009b7c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b80:	e853 3f00 	ldrex	r3, [r3]
 8009b84:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009b86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b88:	f023 0301 	bic.w	r3, r3, #1
 8009b8c:	667b      	str	r3, [r7, #100]	@ 0x64
 8009b8e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	3308      	adds	r3, #8
 8009b94:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8009b96:	647a      	str	r2, [r7, #68]	@ 0x44
 8009b98:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b9a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009b9c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009b9e:	e841 2300 	strex	r3, r2, [r1]
 8009ba2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009ba4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d1e5      	bne.n	8009b76 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009baa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	3308      	adds	r3, #8
 8009bb0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bb4:	e853 3f00 	ldrex	r3, [r3]
 8009bb8:	623b      	str	r3, [r7, #32]
   return(result);
 8009bba:	6a3b      	ldr	r3, [r7, #32]
 8009bbc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009bc0:	663b      	str	r3, [r7, #96]	@ 0x60
 8009bc2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	3308      	adds	r3, #8
 8009bc8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8009bca:	633a      	str	r2, [r7, #48]	@ 0x30
 8009bcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bce:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009bd0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009bd2:	e841 2300 	strex	r3, r2, [r1]
 8009bd6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009bd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d1e5      	bne.n	8009baa <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009bde:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009be0:	2220      	movs	r2, #32
 8009be2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009be6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009be8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009bea:	2b01      	cmp	r3, #1
 8009bec:	d118      	bne.n	8009c20 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009bee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bf4:	693b      	ldr	r3, [r7, #16]
 8009bf6:	e853 3f00 	ldrex	r3, [r3]
 8009bfa:	60fb      	str	r3, [r7, #12]
   return(result);
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	f023 0310 	bic.w	r3, r3, #16
 8009c02:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009c04:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	461a      	mov	r2, r3
 8009c0a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009c0c:	61fb      	str	r3, [r7, #28]
 8009c0e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c10:	69b9      	ldr	r1, [r7, #24]
 8009c12:	69fa      	ldr	r2, [r7, #28]
 8009c14:	e841 2300 	strex	r3, r2, [r1]
 8009c18:	617b      	str	r3, [r7, #20]
   return(result);
 8009c1a:	697b      	ldr	r3, [r7, #20]
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d1e6      	bne.n	8009bee <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009c20:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009c22:	2200      	movs	r2, #0
 8009c24:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009c26:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009c28:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009c2a:	2b01      	cmp	r3, #1
 8009c2c:	d107      	bne.n	8009c3e <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009c2e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009c30:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009c34:	4619      	mov	r1, r3
 8009c36:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8009c38:	f7ff f908 	bl	8008e4c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009c3c:	e002      	b.n	8009c44 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8009c3e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8009c40:	f7ff f8e6 	bl	8008e10 <HAL_UART_RxCpltCallback>
}
 8009c44:	bf00      	nop
 8009c46:	3770      	adds	r7, #112	@ 0x70
 8009c48:	46bd      	mov	sp, r7
 8009c4a:	bd80      	pop	{r7, pc}

08009c4c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009c4c:	b580      	push	{r7, lr}
 8009c4e:	b084      	sub	sp, #16
 8009c50:	af00      	add	r7, sp, #0
 8009c52:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c58:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	2201      	movs	r2, #1
 8009c5e:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009c64:	2b01      	cmp	r3, #1
 8009c66:	d109      	bne.n	8009c7c <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009c6e:	085b      	lsrs	r3, r3, #1
 8009c70:	b29b      	uxth	r3, r3
 8009c72:	4619      	mov	r1, r3
 8009c74:	68f8      	ldr	r0, [r7, #12]
 8009c76:	f7ff f8e9 	bl	8008e4c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009c7a:	e002      	b.n	8009c82 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8009c7c:	68f8      	ldr	r0, [r7, #12]
 8009c7e:	f7ff f8d1 	bl	8008e24 <HAL_UART_RxHalfCpltCallback>
}
 8009c82:	bf00      	nop
 8009c84:	3710      	adds	r7, #16
 8009c86:	46bd      	mov	sp, r7
 8009c88:	bd80      	pop	{r7, pc}

08009c8a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009c8a:	b580      	push	{r7, lr}
 8009c8c:	b086      	sub	sp, #24
 8009c8e:	af00      	add	r7, sp, #0
 8009c90:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c96:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8009c98:	697b      	ldr	r3, [r7, #20]
 8009c9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009c9e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8009ca0:	697b      	ldr	r3, [r7, #20]
 8009ca2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009ca6:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8009ca8:	697b      	ldr	r3, [r7, #20]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	689b      	ldr	r3, [r3, #8]
 8009cae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009cb2:	2b80      	cmp	r3, #128	@ 0x80
 8009cb4:	d109      	bne.n	8009cca <UART_DMAError+0x40>
 8009cb6:	693b      	ldr	r3, [r7, #16]
 8009cb8:	2b21      	cmp	r3, #33	@ 0x21
 8009cba:	d106      	bne.n	8009cca <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8009cbc:	697b      	ldr	r3, [r7, #20]
 8009cbe:	2200      	movs	r2, #0
 8009cc0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8009cc4:	6978      	ldr	r0, [r7, #20]
 8009cc6:	f7ff fe29 	bl	800991c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8009cca:	697b      	ldr	r3, [r7, #20]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	689b      	ldr	r3, [r3, #8]
 8009cd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009cd4:	2b40      	cmp	r3, #64	@ 0x40
 8009cd6:	d109      	bne.n	8009cec <UART_DMAError+0x62>
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	2b22      	cmp	r3, #34	@ 0x22
 8009cdc:	d106      	bne.n	8009cec <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8009cde:	697b      	ldr	r3, [r7, #20]
 8009ce0:	2200      	movs	r2, #0
 8009ce2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8009ce6:	6978      	ldr	r0, [r7, #20]
 8009ce8:	f7ff fe59 	bl	800999e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009cec:	697b      	ldr	r3, [r7, #20]
 8009cee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009cf2:	f043 0210 	orr.w	r2, r3, #16
 8009cf6:	697b      	ldr	r3, [r7, #20]
 8009cf8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009cfc:	6978      	ldr	r0, [r7, #20]
 8009cfe:	f7ff f89b 	bl	8008e38 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009d02:	bf00      	nop
 8009d04:	3718      	adds	r7, #24
 8009d06:	46bd      	mov	sp, r7
 8009d08:	bd80      	pop	{r7, pc}

08009d0a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009d0a:	b580      	push	{r7, lr}
 8009d0c:	b084      	sub	sp, #16
 8009d0e:	af00      	add	r7, sp, #0
 8009d10:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d16:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	2200      	movs	r2, #0
 8009d1c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009d20:	68f8      	ldr	r0, [r7, #12]
 8009d22:	f7ff f889 	bl	8008e38 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009d26:	bf00      	nop
 8009d28:	3710      	adds	r7, #16
 8009d2a:	46bd      	mov	sp, r7
 8009d2c:	bd80      	pop	{r7, pc}

08009d2e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009d2e:	b580      	push	{r7, lr}
 8009d30:	b088      	sub	sp, #32
 8009d32:	af00      	add	r7, sp, #0
 8009d34:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	e853 3f00 	ldrex	r3, [r3]
 8009d42:	60bb      	str	r3, [r7, #8]
   return(result);
 8009d44:	68bb      	ldr	r3, [r7, #8]
 8009d46:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009d4a:	61fb      	str	r3, [r7, #28]
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	461a      	mov	r2, r3
 8009d52:	69fb      	ldr	r3, [r7, #28]
 8009d54:	61bb      	str	r3, [r7, #24]
 8009d56:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d58:	6979      	ldr	r1, [r7, #20]
 8009d5a:	69ba      	ldr	r2, [r7, #24]
 8009d5c:	e841 2300 	strex	r3, r2, [r1]
 8009d60:	613b      	str	r3, [r7, #16]
   return(result);
 8009d62:	693b      	ldr	r3, [r7, #16]
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d1e6      	bne.n	8009d36 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	2220      	movs	r2, #32
 8009d6c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	2200      	movs	r2, #0
 8009d74:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009d76:	6878      	ldr	r0, [r7, #4]
 8009d78:	f7ff f836 	bl	8008de8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009d7c:	bf00      	nop
 8009d7e:	3720      	adds	r7, #32
 8009d80:	46bd      	mov	sp, r7
 8009d82:	bd80      	pop	{r7, pc}

08009d84 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009d84:	b480      	push	{r7}
 8009d86:	b083      	sub	sp, #12
 8009d88:	af00      	add	r7, sp, #0
 8009d8a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009d8c:	bf00      	nop
 8009d8e:	370c      	adds	r7, #12
 8009d90:	46bd      	mov	sp, r7
 8009d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d96:	4770      	bx	lr

08009d98 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009d98:	b480      	push	{r7}
 8009d9a:	b083      	sub	sp, #12
 8009d9c:	af00      	add	r7, sp, #0
 8009d9e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009da0:	bf00      	nop
 8009da2:	370c      	adds	r7, #12
 8009da4:	46bd      	mov	sp, r7
 8009da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009daa:	4770      	bx	lr

08009dac <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009dac:	b480      	push	{r7}
 8009dae:	b083      	sub	sp, #12
 8009db0:	af00      	add	r7, sp, #0
 8009db2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009db4:	bf00      	nop
 8009db6:	370c      	adds	r7, #12
 8009db8:	46bd      	mov	sp, r7
 8009dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dbe:	4770      	bx	lr

08009dc0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009dc0:	b480      	push	{r7}
 8009dc2:	b085      	sub	sp, #20
 8009dc4:	af00      	add	r7, sp, #0
 8009dc6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009dce:	2b01      	cmp	r3, #1
 8009dd0:	d101      	bne.n	8009dd6 <HAL_UARTEx_DisableFifoMode+0x16>
 8009dd2:	2302      	movs	r3, #2
 8009dd4:	e027      	b.n	8009e26 <HAL_UARTEx_DisableFifoMode+0x66>
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	2201      	movs	r2, #1
 8009dda:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	2224      	movs	r2, #36	@ 0x24
 8009de2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	681a      	ldr	r2, [r3, #0]
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	f022 0201 	bic.w	r2, r2, #1
 8009dfc:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8009e04:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	2200      	movs	r2, #0
 8009e0a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	68fa      	ldr	r2, [r7, #12]
 8009e12:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	2220      	movs	r2, #32
 8009e18:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	2200      	movs	r2, #0
 8009e20:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009e24:	2300      	movs	r3, #0
}
 8009e26:	4618      	mov	r0, r3
 8009e28:	3714      	adds	r7, #20
 8009e2a:	46bd      	mov	sp, r7
 8009e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e30:	4770      	bx	lr

08009e32 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009e32:	b580      	push	{r7, lr}
 8009e34:	b084      	sub	sp, #16
 8009e36:	af00      	add	r7, sp, #0
 8009e38:	6078      	str	r0, [r7, #4]
 8009e3a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009e42:	2b01      	cmp	r3, #1
 8009e44:	d101      	bne.n	8009e4a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009e46:	2302      	movs	r3, #2
 8009e48:	e02d      	b.n	8009ea6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	2201      	movs	r2, #1
 8009e4e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	2224      	movs	r2, #36	@ 0x24
 8009e56:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	681a      	ldr	r2, [r3, #0]
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	f022 0201 	bic.w	r2, r2, #1
 8009e70:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	689b      	ldr	r3, [r3, #8]
 8009e78:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	683a      	ldr	r2, [r7, #0]
 8009e82:	430a      	orrs	r2, r1
 8009e84:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009e86:	6878      	ldr	r0, [r7, #4]
 8009e88:	f000 f850 	bl	8009f2c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	68fa      	ldr	r2, [r7, #12]
 8009e92:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	2220      	movs	r2, #32
 8009e98:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	2200      	movs	r2, #0
 8009ea0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009ea4:	2300      	movs	r3, #0
}
 8009ea6:	4618      	mov	r0, r3
 8009ea8:	3710      	adds	r7, #16
 8009eaa:	46bd      	mov	sp, r7
 8009eac:	bd80      	pop	{r7, pc}

08009eae <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009eae:	b580      	push	{r7, lr}
 8009eb0:	b084      	sub	sp, #16
 8009eb2:	af00      	add	r7, sp, #0
 8009eb4:	6078      	str	r0, [r7, #4]
 8009eb6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009ebe:	2b01      	cmp	r3, #1
 8009ec0:	d101      	bne.n	8009ec6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009ec2:	2302      	movs	r3, #2
 8009ec4:	e02d      	b.n	8009f22 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	2201      	movs	r2, #1
 8009eca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	2224      	movs	r2, #36	@ 0x24
 8009ed2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	681a      	ldr	r2, [r3, #0]
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	f022 0201 	bic.w	r2, r2, #1
 8009eec:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	689b      	ldr	r3, [r3, #8]
 8009ef4:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	683a      	ldr	r2, [r7, #0]
 8009efe:	430a      	orrs	r2, r1
 8009f00:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009f02:	6878      	ldr	r0, [r7, #4]
 8009f04:	f000 f812 	bl	8009f2c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	68fa      	ldr	r2, [r7, #12]
 8009f0e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	2220      	movs	r2, #32
 8009f14:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	2200      	movs	r2, #0
 8009f1c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009f20:	2300      	movs	r3, #0
}
 8009f22:	4618      	mov	r0, r3
 8009f24:	3710      	adds	r7, #16
 8009f26:	46bd      	mov	sp, r7
 8009f28:	bd80      	pop	{r7, pc}
	...

08009f2c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009f2c:	b480      	push	{r7}
 8009f2e:	b085      	sub	sp, #20
 8009f30:	af00      	add	r7, sp, #0
 8009f32:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d108      	bne.n	8009f4e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	2201      	movs	r2, #1
 8009f40:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	2201      	movs	r2, #1
 8009f48:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009f4c:	e031      	b.n	8009fb2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009f4e:	2308      	movs	r3, #8
 8009f50:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009f52:	2308      	movs	r3, #8
 8009f54:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	689b      	ldr	r3, [r3, #8]
 8009f5c:	0e5b      	lsrs	r3, r3, #25
 8009f5e:	b2db      	uxtb	r3, r3
 8009f60:	f003 0307 	and.w	r3, r3, #7
 8009f64:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	689b      	ldr	r3, [r3, #8]
 8009f6c:	0f5b      	lsrs	r3, r3, #29
 8009f6e:	b2db      	uxtb	r3, r3
 8009f70:	f003 0307 	and.w	r3, r3, #7
 8009f74:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009f76:	7bbb      	ldrb	r3, [r7, #14]
 8009f78:	7b3a      	ldrb	r2, [r7, #12]
 8009f7a:	4911      	ldr	r1, [pc, #68]	@ (8009fc0 <UARTEx_SetNbDataToProcess+0x94>)
 8009f7c:	5c8a      	ldrb	r2, [r1, r2]
 8009f7e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009f82:	7b3a      	ldrb	r2, [r7, #12]
 8009f84:	490f      	ldr	r1, [pc, #60]	@ (8009fc4 <UARTEx_SetNbDataToProcess+0x98>)
 8009f86:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009f88:	fb93 f3f2 	sdiv	r3, r3, r2
 8009f8c:	b29a      	uxth	r2, r3
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009f94:	7bfb      	ldrb	r3, [r7, #15]
 8009f96:	7b7a      	ldrb	r2, [r7, #13]
 8009f98:	4909      	ldr	r1, [pc, #36]	@ (8009fc0 <UARTEx_SetNbDataToProcess+0x94>)
 8009f9a:	5c8a      	ldrb	r2, [r1, r2]
 8009f9c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009fa0:	7b7a      	ldrb	r2, [r7, #13]
 8009fa2:	4908      	ldr	r1, [pc, #32]	@ (8009fc4 <UARTEx_SetNbDataToProcess+0x98>)
 8009fa4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009fa6:	fb93 f3f2 	sdiv	r3, r3, r2
 8009faa:	b29a      	uxth	r2, r3
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8009fb2:	bf00      	nop
 8009fb4:	3714      	adds	r7, #20
 8009fb6:	46bd      	mov	sp, r7
 8009fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fbc:	4770      	bx	lr
 8009fbe:	bf00      	nop
 8009fc0:	0801d56c 	.word	0x0801d56c
 8009fc4:	0801d574 	.word	0x0801d574

08009fc8 <arm_sin_f32>:
  @return        sin(x)
 */

float32_t arm_sin_f32(
  float32_t x)
{
 8009fc8:	b480      	push	{r7}
 8009fca:	b08b      	sub	sp, #44	@ 0x2c
 8009fcc:	af00      	add	r7, sp, #0
 8009fce:	ed87 0a01 	vstr	s0, [r7, #4]
  int32_t n;
  float32_t findex;

  /* input x is in radians */
  /* Scale input to [0 1] range from [0 2*PI] , divide input by 2*pi */
  in = x * 0.159154943092f;
 8009fd2:	edd7 7a01 	vldr	s15, [r7, #4]
 8009fd6:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 800a0c0 <arm_sin_f32+0xf8>
 8009fda:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009fde:	edc7 7a06 	vstr	s15, [r7, #24]

  /* Calculation of floor value of input */
  n = (int32_t) in;
 8009fe2:	edd7 7a06 	vldr	s15, [r7, #24]
 8009fe6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009fea:	ee17 3a90 	vmov	r3, s15
 8009fee:	623b      	str	r3, [r7, #32]

  /* Make negative values towards -infinity */
  if (in < 0.0f)
 8009ff0:	edd7 7a06 	vldr	s15, [r7, #24]
 8009ff4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009ff8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ffc:	d502      	bpl.n	800a004 <arm_sin_f32+0x3c>
  {
    n--;
 8009ffe:	6a3b      	ldr	r3, [r7, #32]
 800a000:	3b01      	subs	r3, #1
 800a002:	623b      	str	r3, [r7, #32]
  }

  /* Map input value to [0 1] */
  in = in - (float32_t) n;
 800a004:	6a3b      	ldr	r3, [r7, #32]
 800a006:	ee07 3a90 	vmov	s15, r3
 800a00a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a00e:	ed97 7a06 	vldr	s14, [r7, #24]
 800a012:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a016:	edc7 7a06 	vstr	s15, [r7, #24]

  /* Calculation of index of the table */
  findex = (float32_t)FAST_MATH_TABLE_SIZE * in;
 800a01a:	edd7 7a06 	vldr	s15, [r7, #24]
 800a01e:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 800a0c4 <arm_sin_f32+0xfc>
 800a022:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a026:	edc7 7a07 	vstr	s15, [r7, #28]
  index = (uint16_t)findex;
 800a02a:	edd7 7a07 	vldr	s15, [r7, #28]
 800a02e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a032:	ee17 3a90 	vmov	r3, s15
 800a036:	84fb      	strh	r3, [r7, #38]	@ 0x26

  /* when "in" is exactly 1, we need to rotate the index down to 0 */
  if (index >= FAST_MATH_TABLE_SIZE) {
 800a038:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800a03a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a03e:	d309      	bcc.n	800a054 <arm_sin_f32+0x8c>
    index = 0;
 800a040:	2300      	movs	r3, #0
 800a042:	84fb      	strh	r3, [r7, #38]	@ 0x26
    findex -= (float32_t)FAST_MATH_TABLE_SIZE;
 800a044:	edd7 7a07 	vldr	s15, [r7, #28]
 800a048:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 800a0c4 <arm_sin_f32+0xfc>
 800a04c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a050:	edc7 7a07 	vstr	s15, [r7, #28]
  }

  /* fractional value calculation */
  fract = findex - (float32_t) index;
 800a054:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800a056:	ee07 3a90 	vmov	s15, r3
 800a05a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a05e:	ed97 7a07 	vldr	s14, [r7, #28]
 800a062:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a066:	edc7 7a05 	vstr	s15, [r7, #20]

  /* Read two nearest values of input value from the sin table */
  a = sinTable_f32[index];
 800a06a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800a06c:	4a16      	ldr	r2, [pc, #88]	@ (800a0c8 <arm_sin_f32+0x100>)
 800a06e:	009b      	lsls	r3, r3, #2
 800a070:	4413      	add	r3, r2
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	613b      	str	r3, [r7, #16]
  b = sinTable_f32[index+1];
 800a076:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800a078:	3301      	adds	r3, #1
 800a07a:	4a13      	ldr	r2, [pc, #76]	@ (800a0c8 <arm_sin_f32+0x100>)
 800a07c:	009b      	lsls	r3, r3, #2
 800a07e:	4413      	add	r3, r2
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	60fb      	str	r3, [r7, #12]

  /* Linear interpolation process */
  sinVal = (1.0f - fract) * a + fract * b;
 800a084:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a088:	edd7 7a05 	vldr	s15, [r7, #20]
 800a08c:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a090:	edd7 7a04 	vldr	s15, [r7, #16]
 800a094:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a098:	edd7 6a05 	vldr	s13, [r7, #20]
 800a09c:	edd7 7a03 	vldr	s15, [r7, #12]
 800a0a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a0a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a0a8:	edc7 7a02 	vstr	s15, [r7, #8]

  /* Return output value */
  return (sinVal);
 800a0ac:	68bb      	ldr	r3, [r7, #8]
 800a0ae:	ee07 3a90 	vmov	s15, r3
}
 800a0b2:	eeb0 0a67 	vmov.f32	s0, s15
 800a0b6:	372c      	adds	r7, #44	@ 0x2c
 800a0b8:	46bd      	mov	sp, r7
 800a0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0be:	4770      	bx	lr
 800a0c0:	3e22f983 	.word	0x3e22f983
 800a0c4:	44000000 	.word	0x44000000
 800a0c8:	0801d57c 	.word	0x0801d57c

0800a0cc <__NVIC_SetPriority>:
{
 800a0cc:	b480      	push	{r7}
 800a0ce:	b083      	sub	sp, #12
 800a0d0:	af00      	add	r7, sp, #0
 800a0d2:	4603      	mov	r3, r0
 800a0d4:	6039      	str	r1, [r7, #0]
 800a0d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a0d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	db0a      	blt.n	800a0f6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a0e0:	683b      	ldr	r3, [r7, #0]
 800a0e2:	b2da      	uxtb	r2, r3
 800a0e4:	490c      	ldr	r1, [pc, #48]	@ (800a118 <__NVIC_SetPriority+0x4c>)
 800a0e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a0ea:	0112      	lsls	r2, r2, #4
 800a0ec:	b2d2      	uxtb	r2, r2
 800a0ee:	440b      	add	r3, r1
 800a0f0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800a0f4:	e00a      	b.n	800a10c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a0f6:	683b      	ldr	r3, [r7, #0]
 800a0f8:	b2da      	uxtb	r2, r3
 800a0fa:	4908      	ldr	r1, [pc, #32]	@ (800a11c <__NVIC_SetPriority+0x50>)
 800a0fc:	79fb      	ldrb	r3, [r7, #7]
 800a0fe:	f003 030f 	and.w	r3, r3, #15
 800a102:	3b04      	subs	r3, #4
 800a104:	0112      	lsls	r2, r2, #4
 800a106:	b2d2      	uxtb	r2, r2
 800a108:	440b      	add	r3, r1
 800a10a:	761a      	strb	r2, [r3, #24]
}
 800a10c:	bf00      	nop
 800a10e:	370c      	adds	r7, #12
 800a110:	46bd      	mov	sp, r7
 800a112:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a116:	4770      	bx	lr
 800a118:	e000e100 	.word	0xe000e100
 800a11c:	e000ed00 	.word	0xe000ed00

0800a120 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800a120:	b580      	push	{r7, lr}
 800a122:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800a124:	4b05      	ldr	r3, [pc, #20]	@ (800a13c <SysTick_Handler+0x1c>)
 800a126:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800a128:	f001 fd40 	bl	800bbac <xTaskGetSchedulerState>
 800a12c:	4603      	mov	r3, r0
 800a12e:	2b01      	cmp	r3, #1
 800a130:	d001      	beq.n	800a136 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800a132:	f002 fb39 	bl	800c7a8 <xPortSysTickHandler>
  }
}
 800a136:	bf00      	nop
 800a138:	bd80      	pop	{r7, pc}
 800a13a:	bf00      	nop
 800a13c:	e000e010 	.word	0xe000e010

0800a140 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800a140:	b580      	push	{r7, lr}
 800a142:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800a144:	2100      	movs	r1, #0
 800a146:	f06f 0004 	mvn.w	r0, #4
 800a14a:	f7ff ffbf 	bl	800a0cc <__NVIC_SetPriority>
#endif
}
 800a14e:	bf00      	nop
 800a150:	bd80      	pop	{r7, pc}
	...

0800a154 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800a154:	b480      	push	{r7}
 800a156:	b083      	sub	sp, #12
 800a158:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a15a:	f3ef 8305 	mrs	r3, IPSR
 800a15e:	603b      	str	r3, [r7, #0]
  return(result);
 800a160:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a162:	2b00      	cmp	r3, #0
 800a164:	d003      	beq.n	800a16e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800a166:	f06f 0305 	mvn.w	r3, #5
 800a16a:	607b      	str	r3, [r7, #4]
 800a16c:	e00c      	b.n	800a188 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800a16e:	4b0a      	ldr	r3, [pc, #40]	@ (800a198 <osKernelInitialize+0x44>)
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	2b00      	cmp	r3, #0
 800a174:	d105      	bne.n	800a182 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800a176:	4b08      	ldr	r3, [pc, #32]	@ (800a198 <osKernelInitialize+0x44>)
 800a178:	2201      	movs	r2, #1
 800a17a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800a17c:	2300      	movs	r3, #0
 800a17e:	607b      	str	r3, [r7, #4]
 800a180:	e002      	b.n	800a188 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800a182:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a186:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a188:	687b      	ldr	r3, [r7, #4]
}
 800a18a:	4618      	mov	r0, r3
 800a18c:	370c      	adds	r7, #12
 800a18e:	46bd      	mov	sp, r7
 800a190:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a194:	4770      	bx	lr
 800a196:	bf00      	nop
 800a198:	200051dc 	.word	0x200051dc

0800a19c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800a19c:	b580      	push	{r7, lr}
 800a19e:	b082      	sub	sp, #8
 800a1a0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a1a2:	f3ef 8305 	mrs	r3, IPSR
 800a1a6:	603b      	str	r3, [r7, #0]
  return(result);
 800a1a8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d003      	beq.n	800a1b6 <osKernelStart+0x1a>
    stat = osErrorISR;
 800a1ae:	f06f 0305 	mvn.w	r3, #5
 800a1b2:	607b      	str	r3, [r7, #4]
 800a1b4:	e010      	b.n	800a1d8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800a1b6:	4b0b      	ldr	r3, [pc, #44]	@ (800a1e4 <osKernelStart+0x48>)
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	2b01      	cmp	r3, #1
 800a1bc:	d109      	bne.n	800a1d2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800a1be:	f7ff ffbf 	bl	800a140 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800a1c2:	4b08      	ldr	r3, [pc, #32]	@ (800a1e4 <osKernelStart+0x48>)
 800a1c4:	2202      	movs	r2, #2
 800a1c6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800a1c8:	f001 f87a 	bl	800b2c0 <vTaskStartScheduler>
      stat = osOK;
 800a1cc:	2300      	movs	r3, #0
 800a1ce:	607b      	str	r3, [r7, #4]
 800a1d0:	e002      	b.n	800a1d8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800a1d2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a1d6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a1d8:	687b      	ldr	r3, [r7, #4]
}
 800a1da:	4618      	mov	r0, r3
 800a1dc:	3708      	adds	r7, #8
 800a1de:	46bd      	mov	sp, r7
 800a1e0:	bd80      	pop	{r7, pc}
 800a1e2:	bf00      	nop
 800a1e4:	200051dc 	.word	0x200051dc

0800a1e8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800a1e8:	b580      	push	{r7, lr}
 800a1ea:	b08e      	sub	sp, #56	@ 0x38
 800a1ec:	af04      	add	r7, sp, #16
 800a1ee:	60f8      	str	r0, [r7, #12]
 800a1f0:	60b9      	str	r1, [r7, #8]
 800a1f2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800a1f4:	2300      	movs	r3, #0
 800a1f6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a1f8:	f3ef 8305 	mrs	r3, IPSR
 800a1fc:	617b      	str	r3, [r7, #20]
  return(result);
 800a1fe:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800a200:	2b00      	cmp	r3, #0
 800a202:	d17e      	bne.n	800a302 <osThreadNew+0x11a>
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	2b00      	cmp	r3, #0
 800a208:	d07b      	beq.n	800a302 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800a20a:	2380      	movs	r3, #128	@ 0x80
 800a20c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800a20e:	2318      	movs	r3, #24
 800a210:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800a212:	2300      	movs	r3, #0
 800a214:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800a216:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a21a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d045      	beq.n	800a2ae <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	2b00      	cmp	r3, #0
 800a228:	d002      	beq.n	800a230 <osThreadNew+0x48>
        name = attr->name;
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	699b      	ldr	r3, [r3, #24]
 800a234:	2b00      	cmp	r3, #0
 800a236:	d002      	beq.n	800a23e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	699b      	ldr	r3, [r3, #24]
 800a23c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800a23e:	69fb      	ldr	r3, [r7, #28]
 800a240:	2b00      	cmp	r3, #0
 800a242:	d008      	beq.n	800a256 <osThreadNew+0x6e>
 800a244:	69fb      	ldr	r3, [r7, #28]
 800a246:	2b38      	cmp	r3, #56	@ 0x38
 800a248:	d805      	bhi.n	800a256 <osThreadNew+0x6e>
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	685b      	ldr	r3, [r3, #4]
 800a24e:	f003 0301 	and.w	r3, r3, #1
 800a252:	2b00      	cmp	r3, #0
 800a254:	d001      	beq.n	800a25a <osThreadNew+0x72>
        return (NULL);
 800a256:	2300      	movs	r3, #0
 800a258:	e054      	b.n	800a304 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	695b      	ldr	r3, [r3, #20]
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d003      	beq.n	800a26a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	695b      	ldr	r3, [r3, #20]
 800a266:	089b      	lsrs	r3, r3, #2
 800a268:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	689b      	ldr	r3, [r3, #8]
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d00e      	beq.n	800a290 <osThreadNew+0xa8>
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	68db      	ldr	r3, [r3, #12]
 800a276:	2b5b      	cmp	r3, #91	@ 0x5b
 800a278:	d90a      	bls.n	800a290 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d006      	beq.n	800a290 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	695b      	ldr	r3, [r3, #20]
 800a286:	2b00      	cmp	r3, #0
 800a288:	d002      	beq.n	800a290 <osThreadNew+0xa8>
        mem = 1;
 800a28a:	2301      	movs	r3, #1
 800a28c:	61bb      	str	r3, [r7, #24]
 800a28e:	e010      	b.n	800a2b2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	689b      	ldr	r3, [r3, #8]
 800a294:	2b00      	cmp	r3, #0
 800a296:	d10c      	bne.n	800a2b2 <osThreadNew+0xca>
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	68db      	ldr	r3, [r3, #12]
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d108      	bne.n	800a2b2 <osThreadNew+0xca>
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	691b      	ldr	r3, [r3, #16]
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d104      	bne.n	800a2b2 <osThreadNew+0xca>
          mem = 0;
 800a2a8:	2300      	movs	r3, #0
 800a2aa:	61bb      	str	r3, [r7, #24]
 800a2ac:	e001      	b.n	800a2b2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800a2ae:	2300      	movs	r3, #0
 800a2b0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800a2b2:	69bb      	ldr	r3, [r7, #24]
 800a2b4:	2b01      	cmp	r3, #1
 800a2b6:	d110      	bne.n	800a2da <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800a2bc:	687a      	ldr	r2, [r7, #4]
 800a2be:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a2c0:	9202      	str	r2, [sp, #8]
 800a2c2:	9301      	str	r3, [sp, #4]
 800a2c4:	69fb      	ldr	r3, [r7, #28]
 800a2c6:	9300      	str	r3, [sp, #0]
 800a2c8:	68bb      	ldr	r3, [r7, #8]
 800a2ca:	6a3a      	ldr	r2, [r7, #32]
 800a2cc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a2ce:	68f8      	ldr	r0, [r7, #12]
 800a2d0:	f000 fe1a 	bl	800af08 <xTaskCreateStatic>
 800a2d4:	4603      	mov	r3, r0
 800a2d6:	613b      	str	r3, [r7, #16]
 800a2d8:	e013      	b.n	800a302 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800a2da:	69bb      	ldr	r3, [r7, #24]
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d110      	bne.n	800a302 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800a2e0:	6a3b      	ldr	r3, [r7, #32]
 800a2e2:	b29a      	uxth	r2, r3
 800a2e4:	f107 0310 	add.w	r3, r7, #16
 800a2e8:	9301      	str	r3, [sp, #4]
 800a2ea:	69fb      	ldr	r3, [r7, #28]
 800a2ec:	9300      	str	r3, [sp, #0]
 800a2ee:	68bb      	ldr	r3, [r7, #8]
 800a2f0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a2f2:	68f8      	ldr	r0, [r7, #12]
 800a2f4:	f000 fe68 	bl	800afc8 <xTaskCreate>
 800a2f8:	4603      	mov	r3, r0
 800a2fa:	2b01      	cmp	r3, #1
 800a2fc:	d001      	beq.n	800a302 <osThreadNew+0x11a>
            hTask = NULL;
 800a2fe:	2300      	movs	r3, #0
 800a300:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800a302:	693b      	ldr	r3, [r7, #16]
}
 800a304:	4618      	mov	r0, r3
 800a306:	3728      	adds	r7, #40	@ 0x28
 800a308:	46bd      	mov	sp, r7
 800a30a:	bd80      	pop	{r7, pc}

0800a30c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800a30c:	b580      	push	{r7, lr}
 800a30e:	b084      	sub	sp, #16
 800a310:	af00      	add	r7, sp, #0
 800a312:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a314:	f3ef 8305 	mrs	r3, IPSR
 800a318:	60bb      	str	r3, [r7, #8]
  return(result);
 800a31a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d003      	beq.n	800a328 <osDelay+0x1c>
    stat = osErrorISR;
 800a320:	f06f 0305 	mvn.w	r3, #5
 800a324:	60fb      	str	r3, [r7, #12]
 800a326:	e007      	b.n	800a338 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800a328:	2300      	movs	r3, #0
 800a32a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d002      	beq.n	800a338 <osDelay+0x2c>
      vTaskDelay(ticks);
 800a332:	6878      	ldr	r0, [r7, #4]
 800a334:	f000 ff8e 	bl	800b254 <vTaskDelay>
    }
  }

  return (stat);
 800a338:	68fb      	ldr	r3, [r7, #12]
}
 800a33a:	4618      	mov	r0, r3
 800a33c:	3710      	adds	r7, #16
 800a33e:	46bd      	mov	sp, r7
 800a340:	bd80      	pop	{r7, pc}
	...

0800a344 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800a344:	b480      	push	{r7}
 800a346:	b085      	sub	sp, #20
 800a348:	af00      	add	r7, sp, #0
 800a34a:	60f8      	str	r0, [r7, #12]
 800a34c:	60b9      	str	r1, [r7, #8]
 800a34e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	4a07      	ldr	r2, [pc, #28]	@ (800a370 <vApplicationGetIdleTaskMemory+0x2c>)
 800a354:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a356:	68bb      	ldr	r3, [r7, #8]
 800a358:	4a06      	ldr	r2, [pc, #24]	@ (800a374 <vApplicationGetIdleTaskMemory+0x30>)
 800a35a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	2280      	movs	r2, #128	@ 0x80
 800a360:	601a      	str	r2, [r3, #0]
}
 800a362:	bf00      	nop
 800a364:	3714      	adds	r7, #20
 800a366:	46bd      	mov	sp, r7
 800a368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a36c:	4770      	bx	lr
 800a36e:	bf00      	nop
 800a370:	200051e0 	.word	0x200051e0
 800a374:	2000523c 	.word	0x2000523c

0800a378 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800a378:	b480      	push	{r7}
 800a37a:	b085      	sub	sp, #20
 800a37c:	af00      	add	r7, sp, #0
 800a37e:	60f8      	str	r0, [r7, #12]
 800a380:	60b9      	str	r1, [r7, #8]
 800a382:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	4a07      	ldr	r2, [pc, #28]	@ (800a3a4 <vApplicationGetTimerTaskMemory+0x2c>)
 800a388:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800a38a:	68bb      	ldr	r3, [r7, #8]
 800a38c:	4a06      	ldr	r2, [pc, #24]	@ (800a3a8 <vApplicationGetTimerTaskMemory+0x30>)
 800a38e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a396:	601a      	str	r2, [r3, #0]
}
 800a398:	bf00      	nop
 800a39a:	3714      	adds	r7, #20
 800a39c:	46bd      	mov	sp, r7
 800a39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a2:	4770      	bx	lr
 800a3a4:	2000543c 	.word	0x2000543c
 800a3a8:	20005498 	.word	0x20005498

0800a3ac <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a3ac:	b480      	push	{r7}
 800a3ae:	b083      	sub	sp, #12
 800a3b0:	af00      	add	r7, sp, #0
 800a3b2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	f103 0208 	add.w	r2, r3, #8
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a3c4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	f103 0208 	add.w	r2, r3, #8
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	f103 0208 	add.w	r2, r3, #8
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	2200      	movs	r2, #0
 800a3de:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a3e0:	bf00      	nop
 800a3e2:	370c      	adds	r7, #12
 800a3e4:	46bd      	mov	sp, r7
 800a3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ea:	4770      	bx	lr

0800a3ec <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a3ec:	b480      	push	{r7}
 800a3ee:	b083      	sub	sp, #12
 800a3f0:	af00      	add	r7, sp, #0
 800a3f2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	2200      	movs	r2, #0
 800a3f8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a3fa:	bf00      	nop
 800a3fc:	370c      	adds	r7, #12
 800a3fe:	46bd      	mov	sp, r7
 800a400:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a404:	4770      	bx	lr

0800a406 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a406:	b480      	push	{r7}
 800a408:	b085      	sub	sp, #20
 800a40a:	af00      	add	r7, sp, #0
 800a40c:	6078      	str	r0, [r7, #4]
 800a40e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	685b      	ldr	r3, [r3, #4]
 800a414:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a416:	683b      	ldr	r3, [r7, #0]
 800a418:	68fa      	ldr	r2, [r7, #12]
 800a41a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	689a      	ldr	r2, [r3, #8]
 800a420:	683b      	ldr	r3, [r7, #0]
 800a422:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	689b      	ldr	r3, [r3, #8]
 800a428:	683a      	ldr	r2, [r7, #0]
 800a42a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	683a      	ldr	r2, [r7, #0]
 800a430:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a432:	683b      	ldr	r3, [r7, #0]
 800a434:	687a      	ldr	r2, [r7, #4]
 800a436:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	1c5a      	adds	r2, r3, #1
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	601a      	str	r2, [r3, #0]
}
 800a442:	bf00      	nop
 800a444:	3714      	adds	r7, #20
 800a446:	46bd      	mov	sp, r7
 800a448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a44c:	4770      	bx	lr

0800a44e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a44e:	b480      	push	{r7}
 800a450:	b085      	sub	sp, #20
 800a452:	af00      	add	r7, sp, #0
 800a454:	6078      	str	r0, [r7, #4]
 800a456:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a458:	683b      	ldr	r3, [r7, #0]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a45e:	68bb      	ldr	r3, [r7, #8]
 800a460:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a464:	d103      	bne.n	800a46e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	691b      	ldr	r3, [r3, #16]
 800a46a:	60fb      	str	r3, [r7, #12]
 800a46c:	e00c      	b.n	800a488 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	3308      	adds	r3, #8
 800a472:	60fb      	str	r3, [r7, #12]
 800a474:	e002      	b.n	800a47c <vListInsert+0x2e>
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	685b      	ldr	r3, [r3, #4]
 800a47a:	60fb      	str	r3, [r7, #12]
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	685b      	ldr	r3, [r3, #4]
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	68ba      	ldr	r2, [r7, #8]
 800a484:	429a      	cmp	r2, r3
 800a486:	d2f6      	bcs.n	800a476 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	685a      	ldr	r2, [r3, #4]
 800a48c:	683b      	ldr	r3, [r7, #0]
 800a48e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a490:	683b      	ldr	r3, [r7, #0]
 800a492:	685b      	ldr	r3, [r3, #4]
 800a494:	683a      	ldr	r2, [r7, #0]
 800a496:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a498:	683b      	ldr	r3, [r7, #0]
 800a49a:	68fa      	ldr	r2, [r7, #12]
 800a49c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	683a      	ldr	r2, [r7, #0]
 800a4a2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a4a4:	683b      	ldr	r3, [r7, #0]
 800a4a6:	687a      	ldr	r2, [r7, #4]
 800a4a8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	1c5a      	adds	r2, r3, #1
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	601a      	str	r2, [r3, #0]
}
 800a4b4:	bf00      	nop
 800a4b6:	3714      	adds	r7, #20
 800a4b8:	46bd      	mov	sp, r7
 800a4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4be:	4770      	bx	lr

0800a4c0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a4c0:	b480      	push	{r7}
 800a4c2:	b085      	sub	sp, #20
 800a4c4:	af00      	add	r7, sp, #0
 800a4c6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	691b      	ldr	r3, [r3, #16]
 800a4cc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	685b      	ldr	r3, [r3, #4]
 800a4d2:	687a      	ldr	r2, [r7, #4]
 800a4d4:	6892      	ldr	r2, [r2, #8]
 800a4d6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	689b      	ldr	r3, [r3, #8]
 800a4dc:	687a      	ldr	r2, [r7, #4]
 800a4de:	6852      	ldr	r2, [r2, #4]
 800a4e0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	685b      	ldr	r3, [r3, #4]
 800a4e6:	687a      	ldr	r2, [r7, #4]
 800a4e8:	429a      	cmp	r2, r3
 800a4ea:	d103      	bne.n	800a4f4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	689a      	ldr	r2, [r3, #8]
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	2200      	movs	r2, #0
 800a4f8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	1e5a      	subs	r2, r3, #1
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	681b      	ldr	r3, [r3, #0]
}
 800a508:	4618      	mov	r0, r3
 800a50a:	3714      	adds	r7, #20
 800a50c:	46bd      	mov	sp, r7
 800a50e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a512:	4770      	bx	lr

0800a514 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a514:	b580      	push	{r7, lr}
 800a516:	b084      	sub	sp, #16
 800a518:	af00      	add	r7, sp, #0
 800a51a:	6078      	str	r0, [r7, #4]
 800a51c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	2b00      	cmp	r3, #0
 800a526:	d10b      	bne.n	800a540 <xQueueGenericReset+0x2c>
	__asm volatile
 800a528:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a52c:	f383 8811 	msr	BASEPRI, r3
 800a530:	f3bf 8f6f 	isb	sy
 800a534:	f3bf 8f4f 	dsb	sy
 800a538:	60bb      	str	r3, [r7, #8]
}
 800a53a:	bf00      	nop
 800a53c:	bf00      	nop
 800a53e:	e7fd      	b.n	800a53c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a540:	f002 f8a2 	bl	800c688 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	681a      	ldr	r2, [r3, #0]
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a54c:	68f9      	ldr	r1, [r7, #12]
 800a54e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800a550:	fb01 f303 	mul.w	r3, r1, r3
 800a554:	441a      	add	r2, r3
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	2200      	movs	r2, #0
 800a55e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	681a      	ldr	r2, [r3, #0]
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	681a      	ldr	r2, [r3, #0]
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a570:	3b01      	subs	r3, #1
 800a572:	68f9      	ldr	r1, [r7, #12]
 800a574:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800a576:	fb01 f303 	mul.w	r3, r1, r3
 800a57a:	441a      	add	r2, r3
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	22ff      	movs	r2, #255	@ 0xff
 800a584:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	22ff      	movs	r2, #255	@ 0xff
 800a58c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800a590:	683b      	ldr	r3, [r7, #0]
 800a592:	2b00      	cmp	r3, #0
 800a594:	d114      	bne.n	800a5c0 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	691b      	ldr	r3, [r3, #16]
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d01a      	beq.n	800a5d4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	3310      	adds	r3, #16
 800a5a2:	4618      	mov	r0, r3
 800a5a4:	f001 f91a 	bl	800b7dc <xTaskRemoveFromEventList>
 800a5a8:	4603      	mov	r3, r0
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d012      	beq.n	800a5d4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a5ae:	4b0d      	ldr	r3, [pc, #52]	@ (800a5e4 <xQueueGenericReset+0xd0>)
 800a5b0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a5b4:	601a      	str	r2, [r3, #0]
 800a5b6:	f3bf 8f4f 	dsb	sy
 800a5ba:	f3bf 8f6f 	isb	sy
 800a5be:	e009      	b.n	800a5d4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	3310      	adds	r3, #16
 800a5c4:	4618      	mov	r0, r3
 800a5c6:	f7ff fef1 	bl	800a3ac <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	3324      	adds	r3, #36	@ 0x24
 800a5ce:	4618      	mov	r0, r3
 800a5d0:	f7ff feec 	bl	800a3ac <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a5d4:	f002 f88a 	bl	800c6ec <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a5d8:	2301      	movs	r3, #1
}
 800a5da:	4618      	mov	r0, r3
 800a5dc:	3710      	adds	r7, #16
 800a5de:	46bd      	mov	sp, r7
 800a5e0:	bd80      	pop	{r7, pc}
 800a5e2:	bf00      	nop
 800a5e4:	e000ed04 	.word	0xe000ed04

0800a5e8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a5e8:	b580      	push	{r7, lr}
 800a5ea:	b08e      	sub	sp, #56	@ 0x38
 800a5ec:	af02      	add	r7, sp, #8
 800a5ee:	60f8      	str	r0, [r7, #12]
 800a5f0:	60b9      	str	r1, [r7, #8]
 800a5f2:	607a      	str	r2, [r7, #4]
 800a5f4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d10b      	bne.n	800a614 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800a5fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a600:	f383 8811 	msr	BASEPRI, r3
 800a604:	f3bf 8f6f 	isb	sy
 800a608:	f3bf 8f4f 	dsb	sy
 800a60c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a60e:	bf00      	nop
 800a610:	bf00      	nop
 800a612:	e7fd      	b.n	800a610 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a614:	683b      	ldr	r3, [r7, #0]
 800a616:	2b00      	cmp	r3, #0
 800a618:	d10b      	bne.n	800a632 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800a61a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a61e:	f383 8811 	msr	BASEPRI, r3
 800a622:	f3bf 8f6f 	isb	sy
 800a626:	f3bf 8f4f 	dsb	sy
 800a62a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a62c:	bf00      	nop
 800a62e:	bf00      	nop
 800a630:	e7fd      	b.n	800a62e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	2b00      	cmp	r3, #0
 800a636:	d002      	beq.n	800a63e <xQueueGenericCreateStatic+0x56>
 800a638:	68bb      	ldr	r3, [r7, #8]
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d001      	beq.n	800a642 <xQueueGenericCreateStatic+0x5a>
 800a63e:	2301      	movs	r3, #1
 800a640:	e000      	b.n	800a644 <xQueueGenericCreateStatic+0x5c>
 800a642:	2300      	movs	r3, #0
 800a644:	2b00      	cmp	r3, #0
 800a646:	d10b      	bne.n	800a660 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800a648:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a64c:	f383 8811 	msr	BASEPRI, r3
 800a650:	f3bf 8f6f 	isb	sy
 800a654:	f3bf 8f4f 	dsb	sy
 800a658:	623b      	str	r3, [r7, #32]
}
 800a65a:	bf00      	nop
 800a65c:	bf00      	nop
 800a65e:	e7fd      	b.n	800a65c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	2b00      	cmp	r3, #0
 800a664:	d102      	bne.n	800a66c <xQueueGenericCreateStatic+0x84>
 800a666:	68bb      	ldr	r3, [r7, #8]
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d101      	bne.n	800a670 <xQueueGenericCreateStatic+0x88>
 800a66c:	2301      	movs	r3, #1
 800a66e:	e000      	b.n	800a672 <xQueueGenericCreateStatic+0x8a>
 800a670:	2300      	movs	r3, #0
 800a672:	2b00      	cmp	r3, #0
 800a674:	d10b      	bne.n	800a68e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800a676:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a67a:	f383 8811 	msr	BASEPRI, r3
 800a67e:	f3bf 8f6f 	isb	sy
 800a682:	f3bf 8f4f 	dsb	sy
 800a686:	61fb      	str	r3, [r7, #28]
}
 800a688:	bf00      	nop
 800a68a:	bf00      	nop
 800a68c:	e7fd      	b.n	800a68a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a68e:	2350      	movs	r3, #80	@ 0x50
 800a690:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a692:	697b      	ldr	r3, [r7, #20]
 800a694:	2b50      	cmp	r3, #80	@ 0x50
 800a696:	d00b      	beq.n	800a6b0 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800a698:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a69c:	f383 8811 	msr	BASEPRI, r3
 800a6a0:	f3bf 8f6f 	isb	sy
 800a6a4:	f3bf 8f4f 	dsb	sy
 800a6a8:	61bb      	str	r3, [r7, #24]
}
 800a6aa:	bf00      	nop
 800a6ac:	bf00      	nop
 800a6ae:	e7fd      	b.n	800a6ac <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a6b0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a6b2:	683b      	ldr	r3, [r7, #0]
 800a6b4:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800a6b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d00d      	beq.n	800a6d8 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a6bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a6be:	2201      	movs	r2, #1
 800a6c0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a6c4:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800a6c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a6ca:	9300      	str	r3, [sp, #0]
 800a6cc:	4613      	mov	r3, r2
 800a6ce:	687a      	ldr	r2, [r7, #4]
 800a6d0:	68b9      	ldr	r1, [r7, #8]
 800a6d2:	68f8      	ldr	r0, [r7, #12]
 800a6d4:	f000 f805 	bl	800a6e2 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a6d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800a6da:	4618      	mov	r0, r3
 800a6dc:	3730      	adds	r7, #48	@ 0x30
 800a6de:	46bd      	mov	sp, r7
 800a6e0:	bd80      	pop	{r7, pc}

0800a6e2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a6e2:	b580      	push	{r7, lr}
 800a6e4:	b084      	sub	sp, #16
 800a6e6:	af00      	add	r7, sp, #0
 800a6e8:	60f8      	str	r0, [r7, #12]
 800a6ea:	60b9      	str	r1, [r7, #8]
 800a6ec:	607a      	str	r2, [r7, #4]
 800a6ee:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a6f0:	68bb      	ldr	r3, [r7, #8]
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d103      	bne.n	800a6fe <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a6f6:	69bb      	ldr	r3, [r7, #24]
 800a6f8:	69ba      	ldr	r2, [r7, #24]
 800a6fa:	601a      	str	r2, [r3, #0]
 800a6fc:	e002      	b.n	800a704 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a6fe:	69bb      	ldr	r3, [r7, #24]
 800a700:	687a      	ldr	r2, [r7, #4]
 800a702:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a704:	69bb      	ldr	r3, [r7, #24]
 800a706:	68fa      	ldr	r2, [r7, #12]
 800a708:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a70a:	69bb      	ldr	r3, [r7, #24]
 800a70c:	68ba      	ldr	r2, [r7, #8]
 800a70e:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a710:	2101      	movs	r1, #1
 800a712:	69b8      	ldr	r0, [r7, #24]
 800a714:	f7ff fefe 	bl	800a514 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a718:	69bb      	ldr	r3, [r7, #24]
 800a71a:	78fa      	ldrb	r2, [r7, #3]
 800a71c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a720:	bf00      	nop
 800a722:	3710      	adds	r7, #16
 800a724:	46bd      	mov	sp, r7
 800a726:	bd80      	pop	{r7, pc}

0800a728 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a728:	b580      	push	{r7, lr}
 800a72a:	b08e      	sub	sp, #56	@ 0x38
 800a72c:	af00      	add	r7, sp, #0
 800a72e:	60f8      	str	r0, [r7, #12]
 800a730:	60b9      	str	r1, [r7, #8]
 800a732:	607a      	str	r2, [r7, #4]
 800a734:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a736:	2300      	movs	r3, #0
 800a738:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800a73e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a740:	2b00      	cmp	r3, #0
 800a742:	d10b      	bne.n	800a75c <xQueueGenericSend+0x34>
	__asm volatile
 800a744:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a748:	f383 8811 	msr	BASEPRI, r3
 800a74c:	f3bf 8f6f 	isb	sy
 800a750:	f3bf 8f4f 	dsb	sy
 800a754:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a756:	bf00      	nop
 800a758:	bf00      	nop
 800a75a:	e7fd      	b.n	800a758 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a75c:	68bb      	ldr	r3, [r7, #8]
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d103      	bne.n	800a76a <xQueueGenericSend+0x42>
 800a762:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a764:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a766:	2b00      	cmp	r3, #0
 800a768:	d101      	bne.n	800a76e <xQueueGenericSend+0x46>
 800a76a:	2301      	movs	r3, #1
 800a76c:	e000      	b.n	800a770 <xQueueGenericSend+0x48>
 800a76e:	2300      	movs	r3, #0
 800a770:	2b00      	cmp	r3, #0
 800a772:	d10b      	bne.n	800a78c <xQueueGenericSend+0x64>
	__asm volatile
 800a774:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a778:	f383 8811 	msr	BASEPRI, r3
 800a77c:	f3bf 8f6f 	isb	sy
 800a780:	f3bf 8f4f 	dsb	sy
 800a784:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a786:	bf00      	nop
 800a788:	bf00      	nop
 800a78a:	e7fd      	b.n	800a788 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a78c:	683b      	ldr	r3, [r7, #0]
 800a78e:	2b02      	cmp	r3, #2
 800a790:	d103      	bne.n	800a79a <xQueueGenericSend+0x72>
 800a792:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a794:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a796:	2b01      	cmp	r3, #1
 800a798:	d101      	bne.n	800a79e <xQueueGenericSend+0x76>
 800a79a:	2301      	movs	r3, #1
 800a79c:	e000      	b.n	800a7a0 <xQueueGenericSend+0x78>
 800a79e:	2300      	movs	r3, #0
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d10b      	bne.n	800a7bc <xQueueGenericSend+0x94>
	__asm volatile
 800a7a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7a8:	f383 8811 	msr	BASEPRI, r3
 800a7ac:	f3bf 8f6f 	isb	sy
 800a7b0:	f3bf 8f4f 	dsb	sy
 800a7b4:	623b      	str	r3, [r7, #32]
}
 800a7b6:	bf00      	nop
 800a7b8:	bf00      	nop
 800a7ba:	e7fd      	b.n	800a7b8 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a7bc:	f001 f9f6 	bl	800bbac <xTaskGetSchedulerState>
 800a7c0:	4603      	mov	r3, r0
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d102      	bne.n	800a7cc <xQueueGenericSend+0xa4>
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d101      	bne.n	800a7d0 <xQueueGenericSend+0xa8>
 800a7cc:	2301      	movs	r3, #1
 800a7ce:	e000      	b.n	800a7d2 <xQueueGenericSend+0xaa>
 800a7d0:	2300      	movs	r3, #0
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d10b      	bne.n	800a7ee <xQueueGenericSend+0xc6>
	__asm volatile
 800a7d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7da:	f383 8811 	msr	BASEPRI, r3
 800a7de:	f3bf 8f6f 	isb	sy
 800a7e2:	f3bf 8f4f 	dsb	sy
 800a7e6:	61fb      	str	r3, [r7, #28]
}
 800a7e8:	bf00      	nop
 800a7ea:	bf00      	nop
 800a7ec:	e7fd      	b.n	800a7ea <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a7ee:	f001 ff4b 	bl	800c688 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a7f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7f4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a7f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a7fa:	429a      	cmp	r2, r3
 800a7fc:	d302      	bcc.n	800a804 <xQueueGenericSend+0xdc>
 800a7fe:	683b      	ldr	r3, [r7, #0]
 800a800:	2b02      	cmp	r3, #2
 800a802:	d129      	bne.n	800a858 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a804:	683a      	ldr	r2, [r7, #0]
 800a806:	68b9      	ldr	r1, [r7, #8]
 800a808:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a80a:	f000 fa0f 	bl	800ac2c <prvCopyDataToQueue>
 800a80e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a810:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a812:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a814:	2b00      	cmp	r3, #0
 800a816:	d010      	beq.n	800a83a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a818:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a81a:	3324      	adds	r3, #36	@ 0x24
 800a81c:	4618      	mov	r0, r3
 800a81e:	f000 ffdd 	bl	800b7dc <xTaskRemoveFromEventList>
 800a822:	4603      	mov	r3, r0
 800a824:	2b00      	cmp	r3, #0
 800a826:	d013      	beq.n	800a850 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a828:	4b3f      	ldr	r3, [pc, #252]	@ (800a928 <xQueueGenericSend+0x200>)
 800a82a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a82e:	601a      	str	r2, [r3, #0]
 800a830:	f3bf 8f4f 	dsb	sy
 800a834:	f3bf 8f6f 	isb	sy
 800a838:	e00a      	b.n	800a850 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a83a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d007      	beq.n	800a850 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a840:	4b39      	ldr	r3, [pc, #228]	@ (800a928 <xQueueGenericSend+0x200>)
 800a842:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a846:	601a      	str	r2, [r3, #0]
 800a848:	f3bf 8f4f 	dsb	sy
 800a84c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a850:	f001 ff4c 	bl	800c6ec <vPortExitCritical>
				return pdPASS;
 800a854:	2301      	movs	r3, #1
 800a856:	e063      	b.n	800a920 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d103      	bne.n	800a866 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a85e:	f001 ff45 	bl	800c6ec <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a862:	2300      	movs	r3, #0
 800a864:	e05c      	b.n	800a920 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a866:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d106      	bne.n	800a87a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a86c:	f107 0314 	add.w	r3, r7, #20
 800a870:	4618      	mov	r0, r3
 800a872:	f001 f83f 	bl	800b8f4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a876:	2301      	movs	r3, #1
 800a878:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a87a:	f001 ff37 	bl	800c6ec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a87e:	f000 fd87 	bl	800b390 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a882:	f001 ff01 	bl	800c688 <vPortEnterCritical>
 800a886:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a888:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a88c:	b25b      	sxtb	r3, r3
 800a88e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a892:	d103      	bne.n	800a89c <xQueueGenericSend+0x174>
 800a894:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a896:	2200      	movs	r2, #0
 800a898:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a89c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a89e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a8a2:	b25b      	sxtb	r3, r3
 800a8a4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a8a8:	d103      	bne.n	800a8b2 <xQueueGenericSend+0x18a>
 800a8aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8ac:	2200      	movs	r2, #0
 800a8ae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a8b2:	f001 ff1b 	bl	800c6ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a8b6:	1d3a      	adds	r2, r7, #4
 800a8b8:	f107 0314 	add.w	r3, r7, #20
 800a8bc:	4611      	mov	r1, r2
 800a8be:	4618      	mov	r0, r3
 800a8c0:	f001 f82e 	bl	800b920 <xTaskCheckForTimeOut>
 800a8c4:	4603      	mov	r3, r0
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d124      	bne.n	800a914 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a8ca:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a8cc:	f000 faa6 	bl	800ae1c <prvIsQueueFull>
 800a8d0:	4603      	mov	r3, r0
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d018      	beq.n	800a908 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a8d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8d8:	3310      	adds	r3, #16
 800a8da:	687a      	ldr	r2, [r7, #4]
 800a8dc:	4611      	mov	r1, r2
 800a8de:	4618      	mov	r0, r3
 800a8e0:	f000 ff2a 	bl	800b738 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a8e4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a8e6:	f000 fa31 	bl	800ad4c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a8ea:	f000 fd5f 	bl	800b3ac <xTaskResumeAll>
 800a8ee:	4603      	mov	r3, r0
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	f47f af7c 	bne.w	800a7ee <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800a8f6:	4b0c      	ldr	r3, [pc, #48]	@ (800a928 <xQueueGenericSend+0x200>)
 800a8f8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a8fc:	601a      	str	r2, [r3, #0]
 800a8fe:	f3bf 8f4f 	dsb	sy
 800a902:	f3bf 8f6f 	isb	sy
 800a906:	e772      	b.n	800a7ee <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a908:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a90a:	f000 fa1f 	bl	800ad4c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a90e:	f000 fd4d 	bl	800b3ac <xTaskResumeAll>
 800a912:	e76c      	b.n	800a7ee <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a914:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a916:	f000 fa19 	bl	800ad4c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a91a:	f000 fd47 	bl	800b3ac <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a91e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a920:	4618      	mov	r0, r3
 800a922:	3738      	adds	r7, #56	@ 0x38
 800a924:	46bd      	mov	sp, r7
 800a926:	bd80      	pop	{r7, pc}
 800a928:	e000ed04 	.word	0xe000ed04

0800a92c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a92c:	b580      	push	{r7, lr}
 800a92e:	b090      	sub	sp, #64	@ 0x40
 800a930:	af00      	add	r7, sp, #0
 800a932:	60f8      	str	r0, [r7, #12]
 800a934:	60b9      	str	r1, [r7, #8]
 800a936:	607a      	str	r2, [r7, #4]
 800a938:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800a93e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a940:	2b00      	cmp	r3, #0
 800a942:	d10b      	bne.n	800a95c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800a944:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a948:	f383 8811 	msr	BASEPRI, r3
 800a94c:	f3bf 8f6f 	isb	sy
 800a950:	f3bf 8f4f 	dsb	sy
 800a954:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a956:	bf00      	nop
 800a958:	bf00      	nop
 800a95a:	e7fd      	b.n	800a958 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a95c:	68bb      	ldr	r3, [r7, #8]
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d103      	bne.n	800a96a <xQueueGenericSendFromISR+0x3e>
 800a962:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a964:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a966:	2b00      	cmp	r3, #0
 800a968:	d101      	bne.n	800a96e <xQueueGenericSendFromISR+0x42>
 800a96a:	2301      	movs	r3, #1
 800a96c:	e000      	b.n	800a970 <xQueueGenericSendFromISR+0x44>
 800a96e:	2300      	movs	r3, #0
 800a970:	2b00      	cmp	r3, #0
 800a972:	d10b      	bne.n	800a98c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800a974:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a978:	f383 8811 	msr	BASEPRI, r3
 800a97c:	f3bf 8f6f 	isb	sy
 800a980:	f3bf 8f4f 	dsb	sy
 800a984:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a986:	bf00      	nop
 800a988:	bf00      	nop
 800a98a:	e7fd      	b.n	800a988 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a98c:	683b      	ldr	r3, [r7, #0]
 800a98e:	2b02      	cmp	r3, #2
 800a990:	d103      	bne.n	800a99a <xQueueGenericSendFromISR+0x6e>
 800a992:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a994:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a996:	2b01      	cmp	r3, #1
 800a998:	d101      	bne.n	800a99e <xQueueGenericSendFromISR+0x72>
 800a99a:	2301      	movs	r3, #1
 800a99c:	e000      	b.n	800a9a0 <xQueueGenericSendFromISR+0x74>
 800a99e:	2300      	movs	r3, #0
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d10b      	bne.n	800a9bc <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800a9a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9a8:	f383 8811 	msr	BASEPRI, r3
 800a9ac:	f3bf 8f6f 	isb	sy
 800a9b0:	f3bf 8f4f 	dsb	sy
 800a9b4:	623b      	str	r3, [r7, #32]
}
 800a9b6:	bf00      	nop
 800a9b8:	bf00      	nop
 800a9ba:	e7fd      	b.n	800a9b8 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a9bc:	f001 ff44 	bl	800c848 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a9c0:	f3ef 8211 	mrs	r2, BASEPRI
 800a9c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9c8:	f383 8811 	msr	BASEPRI, r3
 800a9cc:	f3bf 8f6f 	isb	sy
 800a9d0:	f3bf 8f4f 	dsb	sy
 800a9d4:	61fa      	str	r2, [r7, #28]
 800a9d6:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a9d8:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a9da:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a9dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9de:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a9e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a9e4:	429a      	cmp	r2, r3
 800a9e6:	d302      	bcc.n	800a9ee <xQueueGenericSendFromISR+0xc2>
 800a9e8:	683b      	ldr	r3, [r7, #0]
 800a9ea:	2b02      	cmp	r3, #2
 800a9ec:	d12f      	bne.n	800aa4e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a9ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9f0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a9f4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a9f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a9fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a9fe:	683a      	ldr	r2, [r7, #0]
 800aa00:	68b9      	ldr	r1, [r7, #8]
 800aa02:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800aa04:	f000 f912 	bl	800ac2c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800aa08:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800aa0c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800aa10:	d112      	bne.n	800aa38 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800aa12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d016      	beq.n	800aa48 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800aa1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa1c:	3324      	adds	r3, #36	@ 0x24
 800aa1e:	4618      	mov	r0, r3
 800aa20:	f000 fedc 	bl	800b7dc <xTaskRemoveFromEventList>
 800aa24:	4603      	mov	r3, r0
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d00e      	beq.n	800aa48 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d00b      	beq.n	800aa48 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	2201      	movs	r2, #1
 800aa34:	601a      	str	r2, [r3, #0]
 800aa36:	e007      	b.n	800aa48 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800aa38:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800aa3c:	3301      	adds	r3, #1
 800aa3e:	b2db      	uxtb	r3, r3
 800aa40:	b25a      	sxtb	r2, r3
 800aa42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa44:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800aa48:	2301      	movs	r3, #1
 800aa4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800aa4c:	e001      	b.n	800aa52 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800aa4e:	2300      	movs	r3, #0
 800aa50:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800aa52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa54:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800aa56:	697b      	ldr	r3, [r7, #20]
 800aa58:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800aa5c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800aa5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800aa60:	4618      	mov	r0, r3
 800aa62:	3740      	adds	r7, #64	@ 0x40
 800aa64:	46bd      	mov	sp, r7
 800aa66:	bd80      	pop	{r7, pc}

0800aa68 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800aa68:	b580      	push	{r7, lr}
 800aa6a:	b08c      	sub	sp, #48	@ 0x30
 800aa6c:	af00      	add	r7, sp, #0
 800aa6e:	60f8      	str	r0, [r7, #12]
 800aa70:	60b9      	str	r1, [r7, #8]
 800aa72:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800aa74:	2300      	movs	r3, #0
 800aa76:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800aa7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d10b      	bne.n	800aa9a <xQueueReceive+0x32>
	__asm volatile
 800aa82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa86:	f383 8811 	msr	BASEPRI, r3
 800aa8a:	f3bf 8f6f 	isb	sy
 800aa8e:	f3bf 8f4f 	dsb	sy
 800aa92:	623b      	str	r3, [r7, #32]
}
 800aa94:	bf00      	nop
 800aa96:	bf00      	nop
 800aa98:	e7fd      	b.n	800aa96 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800aa9a:	68bb      	ldr	r3, [r7, #8]
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d103      	bne.n	800aaa8 <xQueueReceive+0x40>
 800aaa0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aaa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d101      	bne.n	800aaac <xQueueReceive+0x44>
 800aaa8:	2301      	movs	r3, #1
 800aaaa:	e000      	b.n	800aaae <xQueueReceive+0x46>
 800aaac:	2300      	movs	r3, #0
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d10b      	bne.n	800aaca <xQueueReceive+0x62>
	__asm volatile
 800aab2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aab6:	f383 8811 	msr	BASEPRI, r3
 800aaba:	f3bf 8f6f 	isb	sy
 800aabe:	f3bf 8f4f 	dsb	sy
 800aac2:	61fb      	str	r3, [r7, #28]
}
 800aac4:	bf00      	nop
 800aac6:	bf00      	nop
 800aac8:	e7fd      	b.n	800aac6 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800aaca:	f001 f86f 	bl	800bbac <xTaskGetSchedulerState>
 800aace:	4603      	mov	r3, r0
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d102      	bne.n	800aada <xQueueReceive+0x72>
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d101      	bne.n	800aade <xQueueReceive+0x76>
 800aada:	2301      	movs	r3, #1
 800aadc:	e000      	b.n	800aae0 <xQueueReceive+0x78>
 800aade:	2300      	movs	r3, #0
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d10b      	bne.n	800aafc <xQueueReceive+0x94>
	__asm volatile
 800aae4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aae8:	f383 8811 	msr	BASEPRI, r3
 800aaec:	f3bf 8f6f 	isb	sy
 800aaf0:	f3bf 8f4f 	dsb	sy
 800aaf4:	61bb      	str	r3, [r7, #24]
}
 800aaf6:	bf00      	nop
 800aaf8:	bf00      	nop
 800aafa:	e7fd      	b.n	800aaf8 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800aafc:	f001 fdc4 	bl	800c688 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ab00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab04:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ab06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d01f      	beq.n	800ab4c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ab0c:	68b9      	ldr	r1, [r7, #8]
 800ab0e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ab10:	f000 f8f6 	bl	800ad00 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ab14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab16:	1e5a      	subs	r2, r3, #1
 800ab18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab1a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ab1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab1e:	691b      	ldr	r3, [r3, #16]
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d00f      	beq.n	800ab44 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ab24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab26:	3310      	adds	r3, #16
 800ab28:	4618      	mov	r0, r3
 800ab2a:	f000 fe57 	bl	800b7dc <xTaskRemoveFromEventList>
 800ab2e:	4603      	mov	r3, r0
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d007      	beq.n	800ab44 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ab34:	4b3c      	ldr	r3, [pc, #240]	@ (800ac28 <xQueueReceive+0x1c0>)
 800ab36:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ab3a:	601a      	str	r2, [r3, #0]
 800ab3c:	f3bf 8f4f 	dsb	sy
 800ab40:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ab44:	f001 fdd2 	bl	800c6ec <vPortExitCritical>
				return pdPASS;
 800ab48:	2301      	movs	r3, #1
 800ab4a:	e069      	b.n	800ac20 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d103      	bne.n	800ab5a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ab52:	f001 fdcb 	bl	800c6ec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ab56:	2300      	movs	r3, #0
 800ab58:	e062      	b.n	800ac20 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ab5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d106      	bne.n	800ab6e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ab60:	f107 0310 	add.w	r3, r7, #16
 800ab64:	4618      	mov	r0, r3
 800ab66:	f000 fec5 	bl	800b8f4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ab6a:	2301      	movs	r3, #1
 800ab6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ab6e:	f001 fdbd 	bl	800c6ec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ab72:	f000 fc0d 	bl	800b390 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ab76:	f001 fd87 	bl	800c688 <vPortEnterCritical>
 800ab7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab7c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ab80:	b25b      	sxtb	r3, r3
 800ab82:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ab86:	d103      	bne.n	800ab90 <xQueueReceive+0x128>
 800ab88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab8a:	2200      	movs	r2, #0
 800ab8c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ab90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab92:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ab96:	b25b      	sxtb	r3, r3
 800ab98:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ab9c:	d103      	bne.n	800aba6 <xQueueReceive+0x13e>
 800ab9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aba0:	2200      	movs	r2, #0
 800aba2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800aba6:	f001 fda1 	bl	800c6ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800abaa:	1d3a      	adds	r2, r7, #4
 800abac:	f107 0310 	add.w	r3, r7, #16
 800abb0:	4611      	mov	r1, r2
 800abb2:	4618      	mov	r0, r3
 800abb4:	f000 feb4 	bl	800b920 <xTaskCheckForTimeOut>
 800abb8:	4603      	mov	r3, r0
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d123      	bne.n	800ac06 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800abbe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800abc0:	f000 f916 	bl	800adf0 <prvIsQueueEmpty>
 800abc4:	4603      	mov	r3, r0
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d017      	beq.n	800abfa <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800abca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800abcc:	3324      	adds	r3, #36	@ 0x24
 800abce:	687a      	ldr	r2, [r7, #4]
 800abd0:	4611      	mov	r1, r2
 800abd2:	4618      	mov	r0, r3
 800abd4:	f000 fdb0 	bl	800b738 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800abd8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800abda:	f000 f8b7 	bl	800ad4c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800abde:	f000 fbe5 	bl	800b3ac <xTaskResumeAll>
 800abe2:	4603      	mov	r3, r0
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d189      	bne.n	800aafc <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800abe8:	4b0f      	ldr	r3, [pc, #60]	@ (800ac28 <xQueueReceive+0x1c0>)
 800abea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800abee:	601a      	str	r2, [r3, #0]
 800abf0:	f3bf 8f4f 	dsb	sy
 800abf4:	f3bf 8f6f 	isb	sy
 800abf8:	e780      	b.n	800aafc <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800abfa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800abfc:	f000 f8a6 	bl	800ad4c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ac00:	f000 fbd4 	bl	800b3ac <xTaskResumeAll>
 800ac04:	e77a      	b.n	800aafc <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800ac06:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ac08:	f000 f8a0 	bl	800ad4c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ac0c:	f000 fbce 	bl	800b3ac <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ac10:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ac12:	f000 f8ed 	bl	800adf0 <prvIsQueueEmpty>
 800ac16:	4603      	mov	r3, r0
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	f43f af6f 	beq.w	800aafc <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ac1e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ac20:	4618      	mov	r0, r3
 800ac22:	3730      	adds	r7, #48	@ 0x30
 800ac24:	46bd      	mov	sp, r7
 800ac26:	bd80      	pop	{r7, pc}
 800ac28:	e000ed04 	.word	0xe000ed04

0800ac2c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800ac2c:	b580      	push	{r7, lr}
 800ac2e:	b086      	sub	sp, #24
 800ac30:	af00      	add	r7, sp, #0
 800ac32:	60f8      	str	r0, [r7, #12]
 800ac34:	60b9      	str	r1, [r7, #8]
 800ac36:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800ac38:	2300      	movs	r3, #0
 800ac3a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac40:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d10d      	bne.n	800ac66 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d14d      	bne.n	800acee <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	689b      	ldr	r3, [r3, #8]
 800ac56:	4618      	mov	r0, r3
 800ac58:	f000 ffc6 	bl	800bbe8 <xTaskPriorityDisinherit>
 800ac5c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	2200      	movs	r2, #0
 800ac62:	609a      	str	r2, [r3, #8]
 800ac64:	e043      	b.n	800acee <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d119      	bne.n	800aca0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	6858      	ldr	r0, [r3, #4]
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ac74:	461a      	mov	r2, r3
 800ac76:	68b9      	ldr	r1, [r7, #8]
 800ac78:	f010 fc41 	bl	801b4fe <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	685a      	ldr	r2, [r3, #4]
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ac84:	441a      	add	r2, r3
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	685a      	ldr	r2, [r3, #4]
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	689b      	ldr	r3, [r3, #8]
 800ac92:	429a      	cmp	r2, r3
 800ac94:	d32b      	bcc.n	800acee <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	681a      	ldr	r2, [r3, #0]
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	605a      	str	r2, [r3, #4]
 800ac9e:	e026      	b.n	800acee <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	68d8      	ldr	r0, [r3, #12]
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aca8:	461a      	mov	r2, r3
 800acaa:	68b9      	ldr	r1, [r7, #8]
 800acac:	f010 fc27 	bl	801b4fe <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	68da      	ldr	r2, [r3, #12]
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800acb8:	425b      	negs	r3, r3
 800acba:	441a      	add	r2, r3
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	68da      	ldr	r2, [r3, #12]
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	429a      	cmp	r2, r3
 800acca:	d207      	bcs.n	800acdc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	689a      	ldr	r2, [r3, #8]
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800acd4:	425b      	negs	r3, r3
 800acd6:	441a      	add	r2, r3
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	2b02      	cmp	r3, #2
 800ace0:	d105      	bne.n	800acee <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ace2:	693b      	ldr	r3, [r7, #16]
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d002      	beq.n	800acee <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800ace8:	693b      	ldr	r3, [r7, #16]
 800acea:	3b01      	subs	r3, #1
 800acec:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800acee:	693b      	ldr	r3, [r7, #16]
 800acf0:	1c5a      	adds	r2, r3, #1
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800acf6:	697b      	ldr	r3, [r7, #20]
}
 800acf8:	4618      	mov	r0, r3
 800acfa:	3718      	adds	r7, #24
 800acfc:	46bd      	mov	sp, r7
 800acfe:	bd80      	pop	{r7, pc}

0800ad00 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800ad00:	b580      	push	{r7, lr}
 800ad02:	b082      	sub	sp, #8
 800ad04:	af00      	add	r7, sp, #0
 800ad06:	6078      	str	r0, [r7, #4]
 800ad08:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d018      	beq.n	800ad44 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	68da      	ldr	r2, [r3, #12]
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad1a:	441a      	add	r2, r3
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	68da      	ldr	r2, [r3, #12]
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	689b      	ldr	r3, [r3, #8]
 800ad28:	429a      	cmp	r2, r3
 800ad2a:	d303      	bcc.n	800ad34 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	681a      	ldr	r2, [r3, #0]
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	68d9      	ldr	r1, [r3, #12]
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad3c:	461a      	mov	r2, r3
 800ad3e:	6838      	ldr	r0, [r7, #0]
 800ad40:	f010 fbdd 	bl	801b4fe <memcpy>
	}
}
 800ad44:	bf00      	nop
 800ad46:	3708      	adds	r7, #8
 800ad48:	46bd      	mov	sp, r7
 800ad4a:	bd80      	pop	{r7, pc}

0800ad4c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800ad4c:	b580      	push	{r7, lr}
 800ad4e:	b084      	sub	sp, #16
 800ad50:	af00      	add	r7, sp, #0
 800ad52:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800ad54:	f001 fc98 	bl	800c688 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ad5e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ad60:	e011      	b.n	800ad86 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d012      	beq.n	800ad90 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	3324      	adds	r3, #36	@ 0x24
 800ad6e:	4618      	mov	r0, r3
 800ad70:	f000 fd34 	bl	800b7dc <xTaskRemoveFromEventList>
 800ad74:	4603      	mov	r3, r0
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d001      	beq.n	800ad7e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800ad7a:	f000 fe35 	bl	800b9e8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800ad7e:	7bfb      	ldrb	r3, [r7, #15]
 800ad80:	3b01      	subs	r3, #1
 800ad82:	b2db      	uxtb	r3, r3
 800ad84:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ad86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	dce9      	bgt.n	800ad62 <prvUnlockQueue+0x16>
 800ad8e:	e000      	b.n	800ad92 <prvUnlockQueue+0x46>
					break;
 800ad90:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	22ff      	movs	r2, #255	@ 0xff
 800ad96:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800ad9a:	f001 fca7 	bl	800c6ec <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800ad9e:	f001 fc73 	bl	800c688 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ada8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800adaa:	e011      	b.n	800add0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	691b      	ldr	r3, [r3, #16]
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d012      	beq.n	800adda <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	3310      	adds	r3, #16
 800adb8:	4618      	mov	r0, r3
 800adba:	f000 fd0f 	bl	800b7dc <xTaskRemoveFromEventList>
 800adbe:	4603      	mov	r3, r0
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d001      	beq.n	800adc8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800adc4:	f000 fe10 	bl	800b9e8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800adc8:	7bbb      	ldrb	r3, [r7, #14]
 800adca:	3b01      	subs	r3, #1
 800adcc:	b2db      	uxtb	r3, r3
 800adce:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800add0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800add4:	2b00      	cmp	r3, #0
 800add6:	dce9      	bgt.n	800adac <prvUnlockQueue+0x60>
 800add8:	e000      	b.n	800addc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800adda:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	22ff      	movs	r2, #255	@ 0xff
 800ade0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800ade4:	f001 fc82 	bl	800c6ec <vPortExitCritical>
}
 800ade8:	bf00      	nop
 800adea:	3710      	adds	r7, #16
 800adec:	46bd      	mov	sp, r7
 800adee:	bd80      	pop	{r7, pc}

0800adf0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800adf0:	b580      	push	{r7, lr}
 800adf2:	b084      	sub	sp, #16
 800adf4:	af00      	add	r7, sp, #0
 800adf6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800adf8:	f001 fc46 	bl	800c688 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d102      	bne.n	800ae0a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800ae04:	2301      	movs	r3, #1
 800ae06:	60fb      	str	r3, [r7, #12]
 800ae08:	e001      	b.n	800ae0e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800ae0a:	2300      	movs	r3, #0
 800ae0c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ae0e:	f001 fc6d 	bl	800c6ec <vPortExitCritical>

	return xReturn;
 800ae12:	68fb      	ldr	r3, [r7, #12]
}
 800ae14:	4618      	mov	r0, r3
 800ae16:	3710      	adds	r7, #16
 800ae18:	46bd      	mov	sp, r7
 800ae1a:	bd80      	pop	{r7, pc}

0800ae1c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800ae1c:	b580      	push	{r7, lr}
 800ae1e:	b084      	sub	sp, #16
 800ae20:	af00      	add	r7, sp, #0
 800ae22:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ae24:	f001 fc30 	bl	800c688 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ae30:	429a      	cmp	r2, r3
 800ae32:	d102      	bne.n	800ae3a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800ae34:	2301      	movs	r3, #1
 800ae36:	60fb      	str	r3, [r7, #12]
 800ae38:	e001      	b.n	800ae3e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800ae3a:	2300      	movs	r3, #0
 800ae3c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ae3e:	f001 fc55 	bl	800c6ec <vPortExitCritical>

	return xReturn;
 800ae42:	68fb      	ldr	r3, [r7, #12]
}
 800ae44:	4618      	mov	r0, r3
 800ae46:	3710      	adds	r7, #16
 800ae48:	46bd      	mov	sp, r7
 800ae4a:	bd80      	pop	{r7, pc}

0800ae4c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800ae4c:	b480      	push	{r7}
 800ae4e:	b085      	sub	sp, #20
 800ae50:	af00      	add	r7, sp, #0
 800ae52:	6078      	str	r0, [r7, #4]
 800ae54:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ae56:	2300      	movs	r3, #0
 800ae58:	60fb      	str	r3, [r7, #12]
 800ae5a:	e014      	b.n	800ae86 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800ae5c:	4a0f      	ldr	r2, [pc, #60]	@ (800ae9c <vQueueAddToRegistry+0x50>)
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d10b      	bne.n	800ae80 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800ae68:	490c      	ldr	r1, [pc, #48]	@ (800ae9c <vQueueAddToRegistry+0x50>)
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	683a      	ldr	r2, [r7, #0]
 800ae6e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800ae72:	4a0a      	ldr	r2, [pc, #40]	@ (800ae9c <vQueueAddToRegistry+0x50>)
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	00db      	lsls	r3, r3, #3
 800ae78:	4413      	add	r3, r2
 800ae7a:	687a      	ldr	r2, [r7, #4]
 800ae7c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800ae7e:	e006      	b.n	800ae8e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	3301      	adds	r3, #1
 800ae84:	60fb      	str	r3, [r7, #12]
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	2b07      	cmp	r3, #7
 800ae8a:	d9e7      	bls.n	800ae5c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800ae8c:	bf00      	nop
 800ae8e:	bf00      	nop
 800ae90:	3714      	adds	r7, #20
 800ae92:	46bd      	mov	sp, r7
 800ae94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae98:	4770      	bx	lr
 800ae9a:	bf00      	nop
 800ae9c:	20005898 	.word	0x20005898

0800aea0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800aea0:	b580      	push	{r7, lr}
 800aea2:	b086      	sub	sp, #24
 800aea4:	af00      	add	r7, sp, #0
 800aea6:	60f8      	str	r0, [r7, #12]
 800aea8:	60b9      	str	r1, [r7, #8]
 800aeaa:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800aeb0:	f001 fbea 	bl	800c688 <vPortEnterCritical>
 800aeb4:	697b      	ldr	r3, [r7, #20]
 800aeb6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800aeba:	b25b      	sxtb	r3, r3
 800aebc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800aec0:	d103      	bne.n	800aeca <vQueueWaitForMessageRestricted+0x2a>
 800aec2:	697b      	ldr	r3, [r7, #20]
 800aec4:	2200      	movs	r2, #0
 800aec6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800aeca:	697b      	ldr	r3, [r7, #20]
 800aecc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800aed0:	b25b      	sxtb	r3, r3
 800aed2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800aed6:	d103      	bne.n	800aee0 <vQueueWaitForMessageRestricted+0x40>
 800aed8:	697b      	ldr	r3, [r7, #20]
 800aeda:	2200      	movs	r2, #0
 800aedc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800aee0:	f001 fc04 	bl	800c6ec <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800aee4:	697b      	ldr	r3, [r7, #20]
 800aee6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d106      	bne.n	800aefa <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800aeec:	697b      	ldr	r3, [r7, #20]
 800aeee:	3324      	adds	r3, #36	@ 0x24
 800aef0:	687a      	ldr	r2, [r7, #4]
 800aef2:	68b9      	ldr	r1, [r7, #8]
 800aef4:	4618      	mov	r0, r3
 800aef6:	f000 fc45 	bl	800b784 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800aefa:	6978      	ldr	r0, [r7, #20]
 800aefc:	f7ff ff26 	bl	800ad4c <prvUnlockQueue>
	}
 800af00:	bf00      	nop
 800af02:	3718      	adds	r7, #24
 800af04:	46bd      	mov	sp, r7
 800af06:	bd80      	pop	{r7, pc}

0800af08 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800af08:	b580      	push	{r7, lr}
 800af0a:	b08e      	sub	sp, #56	@ 0x38
 800af0c:	af04      	add	r7, sp, #16
 800af0e:	60f8      	str	r0, [r7, #12]
 800af10:	60b9      	str	r1, [r7, #8]
 800af12:	607a      	str	r2, [r7, #4]
 800af14:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800af16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d10b      	bne.n	800af34 <xTaskCreateStatic+0x2c>
	__asm volatile
 800af1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af20:	f383 8811 	msr	BASEPRI, r3
 800af24:	f3bf 8f6f 	isb	sy
 800af28:	f3bf 8f4f 	dsb	sy
 800af2c:	623b      	str	r3, [r7, #32]
}
 800af2e:	bf00      	nop
 800af30:	bf00      	nop
 800af32:	e7fd      	b.n	800af30 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800af34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af36:	2b00      	cmp	r3, #0
 800af38:	d10b      	bne.n	800af52 <xTaskCreateStatic+0x4a>
	__asm volatile
 800af3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af3e:	f383 8811 	msr	BASEPRI, r3
 800af42:	f3bf 8f6f 	isb	sy
 800af46:	f3bf 8f4f 	dsb	sy
 800af4a:	61fb      	str	r3, [r7, #28]
}
 800af4c:	bf00      	nop
 800af4e:	bf00      	nop
 800af50:	e7fd      	b.n	800af4e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800af52:	235c      	movs	r3, #92	@ 0x5c
 800af54:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800af56:	693b      	ldr	r3, [r7, #16]
 800af58:	2b5c      	cmp	r3, #92	@ 0x5c
 800af5a:	d00b      	beq.n	800af74 <xTaskCreateStatic+0x6c>
	__asm volatile
 800af5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af60:	f383 8811 	msr	BASEPRI, r3
 800af64:	f3bf 8f6f 	isb	sy
 800af68:	f3bf 8f4f 	dsb	sy
 800af6c:	61bb      	str	r3, [r7, #24]
}
 800af6e:	bf00      	nop
 800af70:	bf00      	nop
 800af72:	e7fd      	b.n	800af70 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800af74:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800af76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d01e      	beq.n	800afba <xTaskCreateStatic+0xb2>
 800af7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d01b      	beq.n	800afba <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800af82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af84:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800af86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af88:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800af8a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800af8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af8e:	2202      	movs	r2, #2
 800af90:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800af94:	2300      	movs	r3, #0
 800af96:	9303      	str	r3, [sp, #12]
 800af98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af9a:	9302      	str	r3, [sp, #8]
 800af9c:	f107 0314 	add.w	r3, r7, #20
 800afa0:	9301      	str	r3, [sp, #4]
 800afa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afa4:	9300      	str	r3, [sp, #0]
 800afa6:	683b      	ldr	r3, [r7, #0]
 800afa8:	687a      	ldr	r2, [r7, #4]
 800afaa:	68b9      	ldr	r1, [r7, #8]
 800afac:	68f8      	ldr	r0, [r7, #12]
 800afae:	f000 f850 	bl	800b052 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800afb2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800afb4:	f000 f8de 	bl	800b174 <prvAddNewTaskToReadyList>
 800afb8:	e001      	b.n	800afbe <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800afba:	2300      	movs	r3, #0
 800afbc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800afbe:	697b      	ldr	r3, [r7, #20]
	}
 800afc0:	4618      	mov	r0, r3
 800afc2:	3728      	adds	r7, #40	@ 0x28
 800afc4:	46bd      	mov	sp, r7
 800afc6:	bd80      	pop	{r7, pc}

0800afc8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800afc8:	b580      	push	{r7, lr}
 800afca:	b08c      	sub	sp, #48	@ 0x30
 800afcc:	af04      	add	r7, sp, #16
 800afce:	60f8      	str	r0, [r7, #12]
 800afd0:	60b9      	str	r1, [r7, #8]
 800afd2:	603b      	str	r3, [r7, #0]
 800afd4:	4613      	mov	r3, r2
 800afd6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800afd8:	88fb      	ldrh	r3, [r7, #6]
 800afda:	009b      	lsls	r3, r3, #2
 800afdc:	4618      	mov	r0, r3
 800afde:	f001 fc75 	bl	800c8cc <pvPortMalloc>
 800afe2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800afe4:	697b      	ldr	r3, [r7, #20]
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d00e      	beq.n	800b008 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800afea:	205c      	movs	r0, #92	@ 0x5c
 800afec:	f001 fc6e 	bl	800c8cc <pvPortMalloc>
 800aff0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800aff2:	69fb      	ldr	r3, [r7, #28]
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d003      	beq.n	800b000 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800aff8:	69fb      	ldr	r3, [r7, #28]
 800affa:	697a      	ldr	r2, [r7, #20]
 800affc:	631a      	str	r2, [r3, #48]	@ 0x30
 800affe:	e005      	b.n	800b00c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b000:	6978      	ldr	r0, [r7, #20]
 800b002:	f001 fd31 	bl	800ca68 <vPortFree>
 800b006:	e001      	b.n	800b00c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b008:	2300      	movs	r3, #0
 800b00a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b00c:	69fb      	ldr	r3, [r7, #28]
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d017      	beq.n	800b042 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b012:	69fb      	ldr	r3, [r7, #28]
 800b014:	2200      	movs	r2, #0
 800b016:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b01a:	88fa      	ldrh	r2, [r7, #6]
 800b01c:	2300      	movs	r3, #0
 800b01e:	9303      	str	r3, [sp, #12]
 800b020:	69fb      	ldr	r3, [r7, #28]
 800b022:	9302      	str	r3, [sp, #8]
 800b024:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b026:	9301      	str	r3, [sp, #4]
 800b028:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b02a:	9300      	str	r3, [sp, #0]
 800b02c:	683b      	ldr	r3, [r7, #0]
 800b02e:	68b9      	ldr	r1, [r7, #8]
 800b030:	68f8      	ldr	r0, [r7, #12]
 800b032:	f000 f80e 	bl	800b052 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b036:	69f8      	ldr	r0, [r7, #28]
 800b038:	f000 f89c 	bl	800b174 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b03c:	2301      	movs	r3, #1
 800b03e:	61bb      	str	r3, [r7, #24]
 800b040:	e002      	b.n	800b048 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b042:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b046:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b048:	69bb      	ldr	r3, [r7, #24]
	}
 800b04a:	4618      	mov	r0, r3
 800b04c:	3720      	adds	r7, #32
 800b04e:	46bd      	mov	sp, r7
 800b050:	bd80      	pop	{r7, pc}

0800b052 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b052:	b580      	push	{r7, lr}
 800b054:	b088      	sub	sp, #32
 800b056:	af00      	add	r7, sp, #0
 800b058:	60f8      	str	r0, [r7, #12]
 800b05a:	60b9      	str	r1, [r7, #8]
 800b05c:	607a      	str	r2, [r7, #4]
 800b05e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b060:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b062:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	009b      	lsls	r3, r3, #2
 800b068:	461a      	mov	r2, r3
 800b06a:	21a5      	movs	r1, #165	@ 0xa5
 800b06c:	f010 f97e 	bl	801b36c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b070:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b072:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b07a:	3b01      	subs	r3, #1
 800b07c:	009b      	lsls	r3, r3, #2
 800b07e:	4413      	add	r3, r2
 800b080:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b082:	69bb      	ldr	r3, [r7, #24]
 800b084:	f023 0307 	bic.w	r3, r3, #7
 800b088:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b08a:	69bb      	ldr	r3, [r7, #24]
 800b08c:	f003 0307 	and.w	r3, r3, #7
 800b090:	2b00      	cmp	r3, #0
 800b092:	d00b      	beq.n	800b0ac <prvInitialiseNewTask+0x5a>
	__asm volatile
 800b094:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b098:	f383 8811 	msr	BASEPRI, r3
 800b09c:	f3bf 8f6f 	isb	sy
 800b0a0:	f3bf 8f4f 	dsb	sy
 800b0a4:	617b      	str	r3, [r7, #20]
}
 800b0a6:	bf00      	nop
 800b0a8:	bf00      	nop
 800b0aa:	e7fd      	b.n	800b0a8 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b0ac:	68bb      	ldr	r3, [r7, #8]
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d01f      	beq.n	800b0f2 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b0b2:	2300      	movs	r3, #0
 800b0b4:	61fb      	str	r3, [r7, #28]
 800b0b6:	e012      	b.n	800b0de <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b0b8:	68ba      	ldr	r2, [r7, #8]
 800b0ba:	69fb      	ldr	r3, [r7, #28]
 800b0bc:	4413      	add	r3, r2
 800b0be:	7819      	ldrb	r1, [r3, #0]
 800b0c0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b0c2:	69fb      	ldr	r3, [r7, #28]
 800b0c4:	4413      	add	r3, r2
 800b0c6:	3334      	adds	r3, #52	@ 0x34
 800b0c8:	460a      	mov	r2, r1
 800b0ca:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b0cc:	68ba      	ldr	r2, [r7, #8]
 800b0ce:	69fb      	ldr	r3, [r7, #28]
 800b0d0:	4413      	add	r3, r2
 800b0d2:	781b      	ldrb	r3, [r3, #0]
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d006      	beq.n	800b0e6 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b0d8:	69fb      	ldr	r3, [r7, #28]
 800b0da:	3301      	adds	r3, #1
 800b0dc:	61fb      	str	r3, [r7, #28]
 800b0de:	69fb      	ldr	r3, [r7, #28]
 800b0e0:	2b0f      	cmp	r3, #15
 800b0e2:	d9e9      	bls.n	800b0b8 <prvInitialiseNewTask+0x66>
 800b0e4:	e000      	b.n	800b0e8 <prvInitialiseNewTask+0x96>
			{
				break;
 800b0e6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b0e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0ea:	2200      	movs	r2, #0
 800b0ec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800b0f0:	e003      	b.n	800b0fa <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b0f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0f4:	2200      	movs	r2, #0
 800b0f6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b0fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b0fc:	2b37      	cmp	r3, #55	@ 0x37
 800b0fe:	d901      	bls.n	800b104 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b100:	2337      	movs	r3, #55	@ 0x37
 800b102:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b104:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b106:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b108:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b10a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b10c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b10e:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800b110:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b112:	2200      	movs	r2, #0
 800b114:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b116:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b118:	3304      	adds	r3, #4
 800b11a:	4618      	mov	r0, r3
 800b11c:	f7ff f966 	bl	800a3ec <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b120:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b122:	3318      	adds	r3, #24
 800b124:	4618      	mov	r0, r3
 800b126:	f7ff f961 	bl	800a3ec <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b12a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b12c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b12e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b130:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b132:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800b136:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b138:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b13a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b13c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b13e:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b140:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b142:	2200      	movs	r2, #0
 800b144:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b146:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b148:	2200      	movs	r2, #0
 800b14a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b14e:	683a      	ldr	r2, [r7, #0]
 800b150:	68f9      	ldr	r1, [r7, #12]
 800b152:	69b8      	ldr	r0, [r7, #24]
 800b154:	f001 f966 	bl	800c424 <pxPortInitialiseStack>
 800b158:	4602      	mov	r2, r0
 800b15a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b15c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b15e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b160:	2b00      	cmp	r3, #0
 800b162:	d002      	beq.n	800b16a <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b164:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b166:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b168:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b16a:	bf00      	nop
 800b16c:	3720      	adds	r7, #32
 800b16e:	46bd      	mov	sp, r7
 800b170:	bd80      	pop	{r7, pc}
	...

0800b174 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b174:	b580      	push	{r7, lr}
 800b176:	b082      	sub	sp, #8
 800b178:	af00      	add	r7, sp, #0
 800b17a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b17c:	f001 fa84 	bl	800c688 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b180:	4b2d      	ldr	r3, [pc, #180]	@ (800b238 <prvAddNewTaskToReadyList+0xc4>)
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	3301      	adds	r3, #1
 800b186:	4a2c      	ldr	r2, [pc, #176]	@ (800b238 <prvAddNewTaskToReadyList+0xc4>)
 800b188:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b18a:	4b2c      	ldr	r3, [pc, #176]	@ (800b23c <prvAddNewTaskToReadyList+0xc8>)
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d109      	bne.n	800b1a6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b192:	4a2a      	ldr	r2, [pc, #168]	@ (800b23c <prvAddNewTaskToReadyList+0xc8>)
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b198:	4b27      	ldr	r3, [pc, #156]	@ (800b238 <prvAddNewTaskToReadyList+0xc4>)
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	2b01      	cmp	r3, #1
 800b19e:	d110      	bne.n	800b1c2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b1a0:	f000 fc46 	bl	800ba30 <prvInitialiseTaskLists>
 800b1a4:	e00d      	b.n	800b1c2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b1a6:	4b26      	ldr	r3, [pc, #152]	@ (800b240 <prvAddNewTaskToReadyList+0xcc>)
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d109      	bne.n	800b1c2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b1ae:	4b23      	ldr	r3, [pc, #140]	@ (800b23c <prvAddNewTaskToReadyList+0xc8>)
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b1b8:	429a      	cmp	r2, r3
 800b1ba:	d802      	bhi.n	800b1c2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b1bc:	4a1f      	ldr	r2, [pc, #124]	@ (800b23c <prvAddNewTaskToReadyList+0xc8>)
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b1c2:	4b20      	ldr	r3, [pc, #128]	@ (800b244 <prvAddNewTaskToReadyList+0xd0>)
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	3301      	adds	r3, #1
 800b1c8:	4a1e      	ldr	r2, [pc, #120]	@ (800b244 <prvAddNewTaskToReadyList+0xd0>)
 800b1ca:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b1cc:	4b1d      	ldr	r3, [pc, #116]	@ (800b244 <prvAddNewTaskToReadyList+0xd0>)
 800b1ce:	681a      	ldr	r2, [r3, #0]
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b1d8:	4b1b      	ldr	r3, [pc, #108]	@ (800b248 <prvAddNewTaskToReadyList+0xd4>)
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	429a      	cmp	r2, r3
 800b1de:	d903      	bls.n	800b1e8 <prvAddNewTaskToReadyList+0x74>
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b1e4:	4a18      	ldr	r2, [pc, #96]	@ (800b248 <prvAddNewTaskToReadyList+0xd4>)
 800b1e6:	6013      	str	r3, [r2, #0]
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b1ec:	4613      	mov	r3, r2
 800b1ee:	009b      	lsls	r3, r3, #2
 800b1f0:	4413      	add	r3, r2
 800b1f2:	009b      	lsls	r3, r3, #2
 800b1f4:	4a15      	ldr	r2, [pc, #84]	@ (800b24c <prvAddNewTaskToReadyList+0xd8>)
 800b1f6:	441a      	add	r2, r3
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	3304      	adds	r3, #4
 800b1fc:	4619      	mov	r1, r3
 800b1fe:	4610      	mov	r0, r2
 800b200:	f7ff f901 	bl	800a406 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b204:	f001 fa72 	bl	800c6ec <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b208:	4b0d      	ldr	r3, [pc, #52]	@ (800b240 <prvAddNewTaskToReadyList+0xcc>)
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d00e      	beq.n	800b22e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b210:	4b0a      	ldr	r3, [pc, #40]	@ (800b23c <prvAddNewTaskToReadyList+0xc8>)
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b21a:	429a      	cmp	r2, r3
 800b21c:	d207      	bcs.n	800b22e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b21e:	4b0c      	ldr	r3, [pc, #48]	@ (800b250 <prvAddNewTaskToReadyList+0xdc>)
 800b220:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b224:	601a      	str	r2, [r3, #0]
 800b226:	f3bf 8f4f 	dsb	sy
 800b22a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b22e:	bf00      	nop
 800b230:	3708      	adds	r7, #8
 800b232:	46bd      	mov	sp, r7
 800b234:	bd80      	pop	{r7, pc}
 800b236:	bf00      	nop
 800b238:	20005dac 	.word	0x20005dac
 800b23c:	200058d8 	.word	0x200058d8
 800b240:	20005db8 	.word	0x20005db8
 800b244:	20005dc8 	.word	0x20005dc8
 800b248:	20005db4 	.word	0x20005db4
 800b24c:	200058dc 	.word	0x200058dc
 800b250:	e000ed04 	.word	0xe000ed04

0800b254 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b254:	b580      	push	{r7, lr}
 800b256:	b084      	sub	sp, #16
 800b258:	af00      	add	r7, sp, #0
 800b25a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b25c:	2300      	movs	r3, #0
 800b25e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	2b00      	cmp	r3, #0
 800b264:	d018      	beq.n	800b298 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b266:	4b14      	ldr	r3, [pc, #80]	@ (800b2b8 <vTaskDelay+0x64>)
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d00b      	beq.n	800b286 <vTaskDelay+0x32>
	__asm volatile
 800b26e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b272:	f383 8811 	msr	BASEPRI, r3
 800b276:	f3bf 8f6f 	isb	sy
 800b27a:	f3bf 8f4f 	dsb	sy
 800b27e:	60bb      	str	r3, [r7, #8]
}
 800b280:	bf00      	nop
 800b282:	bf00      	nop
 800b284:	e7fd      	b.n	800b282 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b286:	f000 f883 	bl	800b390 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b28a:	2100      	movs	r1, #0
 800b28c:	6878      	ldr	r0, [r7, #4]
 800b28e:	f000 fd1b 	bl	800bcc8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b292:	f000 f88b 	bl	800b3ac <xTaskResumeAll>
 800b296:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d107      	bne.n	800b2ae <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800b29e:	4b07      	ldr	r3, [pc, #28]	@ (800b2bc <vTaskDelay+0x68>)
 800b2a0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b2a4:	601a      	str	r2, [r3, #0]
 800b2a6:	f3bf 8f4f 	dsb	sy
 800b2aa:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b2ae:	bf00      	nop
 800b2b0:	3710      	adds	r7, #16
 800b2b2:	46bd      	mov	sp, r7
 800b2b4:	bd80      	pop	{r7, pc}
 800b2b6:	bf00      	nop
 800b2b8:	20005dd4 	.word	0x20005dd4
 800b2bc:	e000ed04 	.word	0xe000ed04

0800b2c0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b2c0:	b580      	push	{r7, lr}
 800b2c2:	b08a      	sub	sp, #40	@ 0x28
 800b2c4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b2c6:	2300      	movs	r3, #0
 800b2c8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b2ca:	2300      	movs	r3, #0
 800b2cc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b2ce:	463a      	mov	r2, r7
 800b2d0:	1d39      	adds	r1, r7, #4
 800b2d2:	f107 0308 	add.w	r3, r7, #8
 800b2d6:	4618      	mov	r0, r3
 800b2d8:	f7ff f834 	bl	800a344 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b2dc:	6839      	ldr	r1, [r7, #0]
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	68ba      	ldr	r2, [r7, #8]
 800b2e2:	9202      	str	r2, [sp, #8]
 800b2e4:	9301      	str	r3, [sp, #4]
 800b2e6:	2300      	movs	r3, #0
 800b2e8:	9300      	str	r3, [sp, #0]
 800b2ea:	2300      	movs	r3, #0
 800b2ec:	460a      	mov	r2, r1
 800b2ee:	4922      	ldr	r1, [pc, #136]	@ (800b378 <vTaskStartScheduler+0xb8>)
 800b2f0:	4822      	ldr	r0, [pc, #136]	@ (800b37c <vTaskStartScheduler+0xbc>)
 800b2f2:	f7ff fe09 	bl	800af08 <xTaskCreateStatic>
 800b2f6:	4603      	mov	r3, r0
 800b2f8:	4a21      	ldr	r2, [pc, #132]	@ (800b380 <vTaskStartScheduler+0xc0>)
 800b2fa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b2fc:	4b20      	ldr	r3, [pc, #128]	@ (800b380 <vTaskStartScheduler+0xc0>)
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	2b00      	cmp	r3, #0
 800b302:	d002      	beq.n	800b30a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b304:	2301      	movs	r3, #1
 800b306:	617b      	str	r3, [r7, #20]
 800b308:	e001      	b.n	800b30e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b30a:	2300      	movs	r3, #0
 800b30c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b30e:	697b      	ldr	r3, [r7, #20]
 800b310:	2b01      	cmp	r3, #1
 800b312:	d102      	bne.n	800b31a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b314:	f000 fd2c 	bl	800bd70 <xTimerCreateTimerTask>
 800b318:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b31a:	697b      	ldr	r3, [r7, #20]
 800b31c:	2b01      	cmp	r3, #1
 800b31e:	d116      	bne.n	800b34e <vTaskStartScheduler+0x8e>
	__asm volatile
 800b320:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b324:	f383 8811 	msr	BASEPRI, r3
 800b328:	f3bf 8f6f 	isb	sy
 800b32c:	f3bf 8f4f 	dsb	sy
 800b330:	613b      	str	r3, [r7, #16]
}
 800b332:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b334:	4b13      	ldr	r3, [pc, #76]	@ (800b384 <vTaskStartScheduler+0xc4>)
 800b336:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b33a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b33c:	4b12      	ldr	r3, [pc, #72]	@ (800b388 <vTaskStartScheduler+0xc8>)
 800b33e:	2201      	movs	r2, #1
 800b340:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b342:	4b12      	ldr	r3, [pc, #72]	@ (800b38c <vTaskStartScheduler+0xcc>)
 800b344:	2200      	movs	r2, #0
 800b346:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b348:	f001 f8fa 	bl	800c540 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b34c:	e00f      	b.n	800b36e <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b34e:	697b      	ldr	r3, [r7, #20]
 800b350:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b354:	d10b      	bne.n	800b36e <vTaskStartScheduler+0xae>
	__asm volatile
 800b356:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b35a:	f383 8811 	msr	BASEPRI, r3
 800b35e:	f3bf 8f6f 	isb	sy
 800b362:	f3bf 8f4f 	dsb	sy
 800b366:	60fb      	str	r3, [r7, #12]
}
 800b368:	bf00      	nop
 800b36a:	bf00      	nop
 800b36c:	e7fd      	b.n	800b36a <vTaskStartScheduler+0xaa>
}
 800b36e:	bf00      	nop
 800b370:	3718      	adds	r7, #24
 800b372:	46bd      	mov	sp, r7
 800b374:	bd80      	pop	{r7, pc}
 800b376:	bf00      	nop
 800b378:	0801d4e0 	.word	0x0801d4e0
 800b37c:	0800ba01 	.word	0x0800ba01
 800b380:	20005dd0 	.word	0x20005dd0
 800b384:	20005dcc 	.word	0x20005dcc
 800b388:	20005db8 	.word	0x20005db8
 800b38c:	20005db0 	.word	0x20005db0

0800b390 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b390:	b480      	push	{r7}
 800b392:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b394:	4b04      	ldr	r3, [pc, #16]	@ (800b3a8 <vTaskSuspendAll+0x18>)
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	3301      	adds	r3, #1
 800b39a:	4a03      	ldr	r2, [pc, #12]	@ (800b3a8 <vTaskSuspendAll+0x18>)
 800b39c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b39e:	bf00      	nop
 800b3a0:	46bd      	mov	sp, r7
 800b3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3a6:	4770      	bx	lr
 800b3a8:	20005dd4 	.word	0x20005dd4

0800b3ac <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b3ac:	b580      	push	{r7, lr}
 800b3ae:	b084      	sub	sp, #16
 800b3b0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b3b2:	2300      	movs	r3, #0
 800b3b4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b3b6:	2300      	movs	r3, #0
 800b3b8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b3ba:	4b42      	ldr	r3, [pc, #264]	@ (800b4c4 <xTaskResumeAll+0x118>)
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d10b      	bne.n	800b3da <xTaskResumeAll+0x2e>
	__asm volatile
 800b3c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b3c6:	f383 8811 	msr	BASEPRI, r3
 800b3ca:	f3bf 8f6f 	isb	sy
 800b3ce:	f3bf 8f4f 	dsb	sy
 800b3d2:	603b      	str	r3, [r7, #0]
}
 800b3d4:	bf00      	nop
 800b3d6:	bf00      	nop
 800b3d8:	e7fd      	b.n	800b3d6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b3da:	f001 f955 	bl	800c688 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b3de:	4b39      	ldr	r3, [pc, #228]	@ (800b4c4 <xTaskResumeAll+0x118>)
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	3b01      	subs	r3, #1
 800b3e4:	4a37      	ldr	r2, [pc, #220]	@ (800b4c4 <xTaskResumeAll+0x118>)
 800b3e6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b3e8:	4b36      	ldr	r3, [pc, #216]	@ (800b4c4 <xTaskResumeAll+0x118>)
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d162      	bne.n	800b4b6 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b3f0:	4b35      	ldr	r3, [pc, #212]	@ (800b4c8 <xTaskResumeAll+0x11c>)
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	d05e      	beq.n	800b4b6 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b3f8:	e02f      	b.n	800b45a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b3fa:	4b34      	ldr	r3, [pc, #208]	@ (800b4cc <xTaskResumeAll+0x120>)
 800b3fc:	68db      	ldr	r3, [r3, #12]
 800b3fe:	68db      	ldr	r3, [r3, #12]
 800b400:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	3318      	adds	r3, #24
 800b406:	4618      	mov	r0, r3
 800b408:	f7ff f85a 	bl	800a4c0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	3304      	adds	r3, #4
 800b410:	4618      	mov	r0, r3
 800b412:	f7ff f855 	bl	800a4c0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b416:	68fb      	ldr	r3, [r7, #12]
 800b418:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b41a:	4b2d      	ldr	r3, [pc, #180]	@ (800b4d0 <xTaskResumeAll+0x124>)
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	429a      	cmp	r2, r3
 800b420:	d903      	bls.n	800b42a <xTaskResumeAll+0x7e>
 800b422:	68fb      	ldr	r3, [r7, #12]
 800b424:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b426:	4a2a      	ldr	r2, [pc, #168]	@ (800b4d0 <xTaskResumeAll+0x124>)
 800b428:	6013      	str	r3, [r2, #0]
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b42e:	4613      	mov	r3, r2
 800b430:	009b      	lsls	r3, r3, #2
 800b432:	4413      	add	r3, r2
 800b434:	009b      	lsls	r3, r3, #2
 800b436:	4a27      	ldr	r2, [pc, #156]	@ (800b4d4 <xTaskResumeAll+0x128>)
 800b438:	441a      	add	r2, r3
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	3304      	adds	r3, #4
 800b43e:	4619      	mov	r1, r3
 800b440:	4610      	mov	r0, r2
 800b442:	f7fe ffe0 	bl	800a406 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b44a:	4b23      	ldr	r3, [pc, #140]	@ (800b4d8 <xTaskResumeAll+0x12c>)
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b450:	429a      	cmp	r2, r3
 800b452:	d302      	bcc.n	800b45a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800b454:	4b21      	ldr	r3, [pc, #132]	@ (800b4dc <xTaskResumeAll+0x130>)
 800b456:	2201      	movs	r2, #1
 800b458:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b45a:	4b1c      	ldr	r3, [pc, #112]	@ (800b4cc <xTaskResumeAll+0x120>)
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d1cb      	bne.n	800b3fa <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	2b00      	cmp	r3, #0
 800b466:	d001      	beq.n	800b46c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b468:	f000 fb80 	bl	800bb6c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b46c:	4b1c      	ldr	r3, [pc, #112]	@ (800b4e0 <xTaskResumeAll+0x134>)
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	2b00      	cmp	r3, #0
 800b476:	d010      	beq.n	800b49a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b478:	f000 f846 	bl	800b508 <xTaskIncrementTick>
 800b47c:	4603      	mov	r3, r0
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d002      	beq.n	800b488 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800b482:	4b16      	ldr	r3, [pc, #88]	@ (800b4dc <xTaskResumeAll+0x130>)
 800b484:	2201      	movs	r2, #1
 800b486:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	3b01      	subs	r3, #1
 800b48c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	2b00      	cmp	r3, #0
 800b492:	d1f1      	bne.n	800b478 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800b494:	4b12      	ldr	r3, [pc, #72]	@ (800b4e0 <xTaskResumeAll+0x134>)
 800b496:	2200      	movs	r2, #0
 800b498:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b49a:	4b10      	ldr	r3, [pc, #64]	@ (800b4dc <xTaskResumeAll+0x130>)
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d009      	beq.n	800b4b6 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b4a2:	2301      	movs	r3, #1
 800b4a4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b4a6:	4b0f      	ldr	r3, [pc, #60]	@ (800b4e4 <xTaskResumeAll+0x138>)
 800b4a8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b4ac:	601a      	str	r2, [r3, #0]
 800b4ae:	f3bf 8f4f 	dsb	sy
 800b4b2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b4b6:	f001 f919 	bl	800c6ec <vPortExitCritical>

	return xAlreadyYielded;
 800b4ba:	68bb      	ldr	r3, [r7, #8]
}
 800b4bc:	4618      	mov	r0, r3
 800b4be:	3710      	adds	r7, #16
 800b4c0:	46bd      	mov	sp, r7
 800b4c2:	bd80      	pop	{r7, pc}
 800b4c4:	20005dd4 	.word	0x20005dd4
 800b4c8:	20005dac 	.word	0x20005dac
 800b4cc:	20005d6c 	.word	0x20005d6c
 800b4d0:	20005db4 	.word	0x20005db4
 800b4d4:	200058dc 	.word	0x200058dc
 800b4d8:	200058d8 	.word	0x200058d8
 800b4dc:	20005dc0 	.word	0x20005dc0
 800b4e0:	20005dbc 	.word	0x20005dbc
 800b4e4:	e000ed04 	.word	0xe000ed04

0800b4e8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b4e8:	b480      	push	{r7}
 800b4ea:	b083      	sub	sp, #12
 800b4ec:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b4ee:	4b05      	ldr	r3, [pc, #20]	@ (800b504 <xTaskGetTickCount+0x1c>)
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b4f4:	687b      	ldr	r3, [r7, #4]
}
 800b4f6:	4618      	mov	r0, r3
 800b4f8:	370c      	adds	r7, #12
 800b4fa:	46bd      	mov	sp, r7
 800b4fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b500:	4770      	bx	lr
 800b502:	bf00      	nop
 800b504:	20005db0 	.word	0x20005db0

0800b508 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b508:	b580      	push	{r7, lr}
 800b50a:	b086      	sub	sp, #24
 800b50c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b50e:	2300      	movs	r3, #0
 800b510:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b512:	4b4f      	ldr	r3, [pc, #316]	@ (800b650 <xTaskIncrementTick+0x148>)
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	2b00      	cmp	r3, #0
 800b518:	f040 8090 	bne.w	800b63c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b51c:	4b4d      	ldr	r3, [pc, #308]	@ (800b654 <xTaskIncrementTick+0x14c>)
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	3301      	adds	r3, #1
 800b522:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b524:	4a4b      	ldr	r2, [pc, #300]	@ (800b654 <xTaskIncrementTick+0x14c>)
 800b526:	693b      	ldr	r3, [r7, #16]
 800b528:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b52a:	693b      	ldr	r3, [r7, #16]
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d121      	bne.n	800b574 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800b530:	4b49      	ldr	r3, [pc, #292]	@ (800b658 <xTaskIncrementTick+0x150>)
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	2b00      	cmp	r3, #0
 800b538:	d00b      	beq.n	800b552 <xTaskIncrementTick+0x4a>
	__asm volatile
 800b53a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b53e:	f383 8811 	msr	BASEPRI, r3
 800b542:	f3bf 8f6f 	isb	sy
 800b546:	f3bf 8f4f 	dsb	sy
 800b54a:	603b      	str	r3, [r7, #0]
}
 800b54c:	bf00      	nop
 800b54e:	bf00      	nop
 800b550:	e7fd      	b.n	800b54e <xTaskIncrementTick+0x46>
 800b552:	4b41      	ldr	r3, [pc, #260]	@ (800b658 <xTaskIncrementTick+0x150>)
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	60fb      	str	r3, [r7, #12]
 800b558:	4b40      	ldr	r3, [pc, #256]	@ (800b65c <xTaskIncrementTick+0x154>)
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	4a3e      	ldr	r2, [pc, #248]	@ (800b658 <xTaskIncrementTick+0x150>)
 800b55e:	6013      	str	r3, [r2, #0]
 800b560:	4a3e      	ldr	r2, [pc, #248]	@ (800b65c <xTaskIncrementTick+0x154>)
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	6013      	str	r3, [r2, #0]
 800b566:	4b3e      	ldr	r3, [pc, #248]	@ (800b660 <xTaskIncrementTick+0x158>)
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	3301      	adds	r3, #1
 800b56c:	4a3c      	ldr	r2, [pc, #240]	@ (800b660 <xTaskIncrementTick+0x158>)
 800b56e:	6013      	str	r3, [r2, #0]
 800b570:	f000 fafc 	bl	800bb6c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b574:	4b3b      	ldr	r3, [pc, #236]	@ (800b664 <xTaskIncrementTick+0x15c>)
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	693a      	ldr	r2, [r7, #16]
 800b57a:	429a      	cmp	r2, r3
 800b57c:	d349      	bcc.n	800b612 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b57e:	4b36      	ldr	r3, [pc, #216]	@ (800b658 <xTaskIncrementTick+0x150>)
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	2b00      	cmp	r3, #0
 800b586:	d104      	bne.n	800b592 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b588:	4b36      	ldr	r3, [pc, #216]	@ (800b664 <xTaskIncrementTick+0x15c>)
 800b58a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b58e:	601a      	str	r2, [r3, #0]
					break;
 800b590:	e03f      	b.n	800b612 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b592:	4b31      	ldr	r3, [pc, #196]	@ (800b658 <xTaskIncrementTick+0x150>)
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	68db      	ldr	r3, [r3, #12]
 800b598:	68db      	ldr	r3, [r3, #12]
 800b59a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b59c:	68bb      	ldr	r3, [r7, #8]
 800b59e:	685b      	ldr	r3, [r3, #4]
 800b5a0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b5a2:	693a      	ldr	r2, [r7, #16]
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	429a      	cmp	r2, r3
 800b5a8:	d203      	bcs.n	800b5b2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b5aa:	4a2e      	ldr	r2, [pc, #184]	@ (800b664 <xTaskIncrementTick+0x15c>)
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b5b0:	e02f      	b.n	800b612 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b5b2:	68bb      	ldr	r3, [r7, #8]
 800b5b4:	3304      	adds	r3, #4
 800b5b6:	4618      	mov	r0, r3
 800b5b8:	f7fe ff82 	bl	800a4c0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b5bc:	68bb      	ldr	r3, [r7, #8]
 800b5be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d004      	beq.n	800b5ce <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b5c4:	68bb      	ldr	r3, [r7, #8]
 800b5c6:	3318      	adds	r3, #24
 800b5c8:	4618      	mov	r0, r3
 800b5ca:	f7fe ff79 	bl	800a4c0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b5ce:	68bb      	ldr	r3, [r7, #8]
 800b5d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b5d2:	4b25      	ldr	r3, [pc, #148]	@ (800b668 <xTaskIncrementTick+0x160>)
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	429a      	cmp	r2, r3
 800b5d8:	d903      	bls.n	800b5e2 <xTaskIncrementTick+0xda>
 800b5da:	68bb      	ldr	r3, [r7, #8]
 800b5dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b5de:	4a22      	ldr	r2, [pc, #136]	@ (800b668 <xTaskIncrementTick+0x160>)
 800b5e0:	6013      	str	r3, [r2, #0]
 800b5e2:	68bb      	ldr	r3, [r7, #8]
 800b5e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b5e6:	4613      	mov	r3, r2
 800b5e8:	009b      	lsls	r3, r3, #2
 800b5ea:	4413      	add	r3, r2
 800b5ec:	009b      	lsls	r3, r3, #2
 800b5ee:	4a1f      	ldr	r2, [pc, #124]	@ (800b66c <xTaskIncrementTick+0x164>)
 800b5f0:	441a      	add	r2, r3
 800b5f2:	68bb      	ldr	r3, [r7, #8]
 800b5f4:	3304      	adds	r3, #4
 800b5f6:	4619      	mov	r1, r3
 800b5f8:	4610      	mov	r0, r2
 800b5fa:	f7fe ff04 	bl	800a406 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b5fe:	68bb      	ldr	r3, [r7, #8]
 800b600:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b602:	4b1b      	ldr	r3, [pc, #108]	@ (800b670 <xTaskIncrementTick+0x168>)
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b608:	429a      	cmp	r2, r3
 800b60a:	d3b8      	bcc.n	800b57e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800b60c:	2301      	movs	r3, #1
 800b60e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b610:	e7b5      	b.n	800b57e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b612:	4b17      	ldr	r3, [pc, #92]	@ (800b670 <xTaskIncrementTick+0x168>)
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b618:	4914      	ldr	r1, [pc, #80]	@ (800b66c <xTaskIncrementTick+0x164>)
 800b61a:	4613      	mov	r3, r2
 800b61c:	009b      	lsls	r3, r3, #2
 800b61e:	4413      	add	r3, r2
 800b620:	009b      	lsls	r3, r3, #2
 800b622:	440b      	add	r3, r1
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	2b01      	cmp	r3, #1
 800b628:	d901      	bls.n	800b62e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800b62a:	2301      	movs	r3, #1
 800b62c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b62e:	4b11      	ldr	r3, [pc, #68]	@ (800b674 <xTaskIncrementTick+0x16c>)
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	2b00      	cmp	r3, #0
 800b634:	d007      	beq.n	800b646 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800b636:	2301      	movs	r3, #1
 800b638:	617b      	str	r3, [r7, #20]
 800b63a:	e004      	b.n	800b646 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b63c:	4b0e      	ldr	r3, [pc, #56]	@ (800b678 <xTaskIncrementTick+0x170>)
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	3301      	adds	r3, #1
 800b642:	4a0d      	ldr	r2, [pc, #52]	@ (800b678 <xTaskIncrementTick+0x170>)
 800b644:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b646:	697b      	ldr	r3, [r7, #20]
}
 800b648:	4618      	mov	r0, r3
 800b64a:	3718      	adds	r7, #24
 800b64c:	46bd      	mov	sp, r7
 800b64e:	bd80      	pop	{r7, pc}
 800b650:	20005dd4 	.word	0x20005dd4
 800b654:	20005db0 	.word	0x20005db0
 800b658:	20005d64 	.word	0x20005d64
 800b65c:	20005d68 	.word	0x20005d68
 800b660:	20005dc4 	.word	0x20005dc4
 800b664:	20005dcc 	.word	0x20005dcc
 800b668:	20005db4 	.word	0x20005db4
 800b66c:	200058dc 	.word	0x200058dc
 800b670:	200058d8 	.word	0x200058d8
 800b674:	20005dc0 	.word	0x20005dc0
 800b678:	20005dbc 	.word	0x20005dbc

0800b67c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b67c:	b480      	push	{r7}
 800b67e:	b085      	sub	sp, #20
 800b680:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b682:	4b28      	ldr	r3, [pc, #160]	@ (800b724 <vTaskSwitchContext+0xa8>)
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	2b00      	cmp	r3, #0
 800b688:	d003      	beq.n	800b692 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b68a:	4b27      	ldr	r3, [pc, #156]	@ (800b728 <vTaskSwitchContext+0xac>)
 800b68c:	2201      	movs	r2, #1
 800b68e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b690:	e042      	b.n	800b718 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800b692:	4b25      	ldr	r3, [pc, #148]	@ (800b728 <vTaskSwitchContext+0xac>)
 800b694:	2200      	movs	r2, #0
 800b696:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b698:	4b24      	ldr	r3, [pc, #144]	@ (800b72c <vTaskSwitchContext+0xb0>)
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	60fb      	str	r3, [r7, #12]
 800b69e:	e011      	b.n	800b6c4 <vTaskSwitchContext+0x48>
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d10b      	bne.n	800b6be <vTaskSwitchContext+0x42>
	__asm volatile
 800b6a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b6aa:	f383 8811 	msr	BASEPRI, r3
 800b6ae:	f3bf 8f6f 	isb	sy
 800b6b2:	f3bf 8f4f 	dsb	sy
 800b6b6:	607b      	str	r3, [r7, #4]
}
 800b6b8:	bf00      	nop
 800b6ba:	bf00      	nop
 800b6bc:	e7fd      	b.n	800b6ba <vTaskSwitchContext+0x3e>
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	3b01      	subs	r3, #1
 800b6c2:	60fb      	str	r3, [r7, #12]
 800b6c4:	491a      	ldr	r1, [pc, #104]	@ (800b730 <vTaskSwitchContext+0xb4>)
 800b6c6:	68fa      	ldr	r2, [r7, #12]
 800b6c8:	4613      	mov	r3, r2
 800b6ca:	009b      	lsls	r3, r3, #2
 800b6cc:	4413      	add	r3, r2
 800b6ce:	009b      	lsls	r3, r3, #2
 800b6d0:	440b      	add	r3, r1
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d0e3      	beq.n	800b6a0 <vTaskSwitchContext+0x24>
 800b6d8:	68fa      	ldr	r2, [r7, #12]
 800b6da:	4613      	mov	r3, r2
 800b6dc:	009b      	lsls	r3, r3, #2
 800b6de:	4413      	add	r3, r2
 800b6e0:	009b      	lsls	r3, r3, #2
 800b6e2:	4a13      	ldr	r2, [pc, #76]	@ (800b730 <vTaskSwitchContext+0xb4>)
 800b6e4:	4413      	add	r3, r2
 800b6e6:	60bb      	str	r3, [r7, #8]
 800b6e8:	68bb      	ldr	r3, [r7, #8]
 800b6ea:	685b      	ldr	r3, [r3, #4]
 800b6ec:	685a      	ldr	r2, [r3, #4]
 800b6ee:	68bb      	ldr	r3, [r7, #8]
 800b6f0:	605a      	str	r2, [r3, #4]
 800b6f2:	68bb      	ldr	r3, [r7, #8]
 800b6f4:	685a      	ldr	r2, [r3, #4]
 800b6f6:	68bb      	ldr	r3, [r7, #8]
 800b6f8:	3308      	adds	r3, #8
 800b6fa:	429a      	cmp	r2, r3
 800b6fc:	d104      	bne.n	800b708 <vTaskSwitchContext+0x8c>
 800b6fe:	68bb      	ldr	r3, [r7, #8]
 800b700:	685b      	ldr	r3, [r3, #4]
 800b702:	685a      	ldr	r2, [r3, #4]
 800b704:	68bb      	ldr	r3, [r7, #8]
 800b706:	605a      	str	r2, [r3, #4]
 800b708:	68bb      	ldr	r3, [r7, #8]
 800b70a:	685b      	ldr	r3, [r3, #4]
 800b70c:	68db      	ldr	r3, [r3, #12]
 800b70e:	4a09      	ldr	r2, [pc, #36]	@ (800b734 <vTaskSwitchContext+0xb8>)
 800b710:	6013      	str	r3, [r2, #0]
 800b712:	4a06      	ldr	r2, [pc, #24]	@ (800b72c <vTaskSwitchContext+0xb0>)
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	6013      	str	r3, [r2, #0]
}
 800b718:	bf00      	nop
 800b71a:	3714      	adds	r7, #20
 800b71c:	46bd      	mov	sp, r7
 800b71e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b722:	4770      	bx	lr
 800b724:	20005dd4 	.word	0x20005dd4
 800b728:	20005dc0 	.word	0x20005dc0
 800b72c:	20005db4 	.word	0x20005db4
 800b730:	200058dc 	.word	0x200058dc
 800b734:	200058d8 	.word	0x200058d8

0800b738 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b738:	b580      	push	{r7, lr}
 800b73a:	b084      	sub	sp, #16
 800b73c:	af00      	add	r7, sp, #0
 800b73e:	6078      	str	r0, [r7, #4]
 800b740:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	2b00      	cmp	r3, #0
 800b746:	d10b      	bne.n	800b760 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800b748:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b74c:	f383 8811 	msr	BASEPRI, r3
 800b750:	f3bf 8f6f 	isb	sy
 800b754:	f3bf 8f4f 	dsb	sy
 800b758:	60fb      	str	r3, [r7, #12]
}
 800b75a:	bf00      	nop
 800b75c:	bf00      	nop
 800b75e:	e7fd      	b.n	800b75c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b760:	4b07      	ldr	r3, [pc, #28]	@ (800b780 <vTaskPlaceOnEventList+0x48>)
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	3318      	adds	r3, #24
 800b766:	4619      	mov	r1, r3
 800b768:	6878      	ldr	r0, [r7, #4]
 800b76a:	f7fe fe70 	bl	800a44e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b76e:	2101      	movs	r1, #1
 800b770:	6838      	ldr	r0, [r7, #0]
 800b772:	f000 faa9 	bl	800bcc8 <prvAddCurrentTaskToDelayedList>
}
 800b776:	bf00      	nop
 800b778:	3710      	adds	r7, #16
 800b77a:	46bd      	mov	sp, r7
 800b77c:	bd80      	pop	{r7, pc}
 800b77e:	bf00      	nop
 800b780:	200058d8 	.word	0x200058d8

0800b784 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b784:	b580      	push	{r7, lr}
 800b786:	b086      	sub	sp, #24
 800b788:	af00      	add	r7, sp, #0
 800b78a:	60f8      	str	r0, [r7, #12]
 800b78c:	60b9      	str	r1, [r7, #8]
 800b78e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	2b00      	cmp	r3, #0
 800b794:	d10b      	bne.n	800b7ae <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800b796:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b79a:	f383 8811 	msr	BASEPRI, r3
 800b79e:	f3bf 8f6f 	isb	sy
 800b7a2:	f3bf 8f4f 	dsb	sy
 800b7a6:	617b      	str	r3, [r7, #20]
}
 800b7a8:	bf00      	nop
 800b7aa:	bf00      	nop
 800b7ac:	e7fd      	b.n	800b7aa <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b7ae:	4b0a      	ldr	r3, [pc, #40]	@ (800b7d8 <vTaskPlaceOnEventListRestricted+0x54>)
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	3318      	adds	r3, #24
 800b7b4:	4619      	mov	r1, r3
 800b7b6:	68f8      	ldr	r0, [r7, #12]
 800b7b8:	f7fe fe25 	bl	800a406 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d002      	beq.n	800b7c8 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800b7c2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b7c6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b7c8:	6879      	ldr	r1, [r7, #4]
 800b7ca:	68b8      	ldr	r0, [r7, #8]
 800b7cc:	f000 fa7c 	bl	800bcc8 <prvAddCurrentTaskToDelayedList>
	}
 800b7d0:	bf00      	nop
 800b7d2:	3718      	adds	r7, #24
 800b7d4:	46bd      	mov	sp, r7
 800b7d6:	bd80      	pop	{r7, pc}
 800b7d8:	200058d8 	.word	0x200058d8

0800b7dc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b7dc:	b580      	push	{r7, lr}
 800b7de:	b086      	sub	sp, #24
 800b7e0:	af00      	add	r7, sp, #0
 800b7e2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	68db      	ldr	r3, [r3, #12]
 800b7e8:	68db      	ldr	r3, [r3, #12]
 800b7ea:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b7ec:	693b      	ldr	r3, [r7, #16]
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d10b      	bne.n	800b80a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800b7f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b7f6:	f383 8811 	msr	BASEPRI, r3
 800b7fa:	f3bf 8f6f 	isb	sy
 800b7fe:	f3bf 8f4f 	dsb	sy
 800b802:	60fb      	str	r3, [r7, #12]
}
 800b804:	bf00      	nop
 800b806:	bf00      	nop
 800b808:	e7fd      	b.n	800b806 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b80a:	693b      	ldr	r3, [r7, #16]
 800b80c:	3318      	adds	r3, #24
 800b80e:	4618      	mov	r0, r3
 800b810:	f7fe fe56 	bl	800a4c0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b814:	4b1d      	ldr	r3, [pc, #116]	@ (800b88c <xTaskRemoveFromEventList+0xb0>)
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d11d      	bne.n	800b858 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b81c:	693b      	ldr	r3, [r7, #16]
 800b81e:	3304      	adds	r3, #4
 800b820:	4618      	mov	r0, r3
 800b822:	f7fe fe4d 	bl	800a4c0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b826:	693b      	ldr	r3, [r7, #16]
 800b828:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b82a:	4b19      	ldr	r3, [pc, #100]	@ (800b890 <xTaskRemoveFromEventList+0xb4>)
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	429a      	cmp	r2, r3
 800b830:	d903      	bls.n	800b83a <xTaskRemoveFromEventList+0x5e>
 800b832:	693b      	ldr	r3, [r7, #16]
 800b834:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b836:	4a16      	ldr	r2, [pc, #88]	@ (800b890 <xTaskRemoveFromEventList+0xb4>)
 800b838:	6013      	str	r3, [r2, #0]
 800b83a:	693b      	ldr	r3, [r7, #16]
 800b83c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b83e:	4613      	mov	r3, r2
 800b840:	009b      	lsls	r3, r3, #2
 800b842:	4413      	add	r3, r2
 800b844:	009b      	lsls	r3, r3, #2
 800b846:	4a13      	ldr	r2, [pc, #76]	@ (800b894 <xTaskRemoveFromEventList+0xb8>)
 800b848:	441a      	add	r2, r3
 800b84a:	693b      	ldr	r3, [r7, #16]
 800b84c:	3304      	adds	r3, #4
 800b84e:	4619      	mov	r1, r3
 800b850:	4610      	mov	r0, r2
 800b852:	f7fe fdd8 	bl	800a406 <vListInsertEnd>
 800b856:	e005      	b.n	800b864 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b858:	693b      	ldr	r3, [r7, #16]
 800b85a:	3318      	adds	r3, #24
 800b85c:	4619      	mov	r1, r3
 800b85e:	480e      	ldr	r0, [pc, #56]	@ (800b898 <xTaskRemoveFromEventList+0xbc>)
 800b860:	f7fe fdd1 	bl	800a406 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b864:	693b      	ldr	r3, [r7, #16]
 800b866:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b868:	4b0c      	ldr	r3, [pc, #48]	@ (800b89c <xTaskRemoveFromEventList+0xc0>)
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b86e:	429a      	cmp	r2, r3
 800b870:	d905      	bls.n	800b87e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b872:	2301      	movs	r3, #1
 800b874:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b876:	4b0a      	ldr	r3, [pc, #40]	@ (800b8a0 <xTaskRemoveFromEventList+0xc4>)
 800b878:	2201      	movs	r2, #1
 800b87a:	601a      	str	r2, [r3, #0]
 800b87c:	e001      	b.n	800b882 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800b87e:	2300      	movs	r3, #0
 800b880:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b882:	697b      	ldr	r3, [r7, #20]
}
 800b884:	4618      	mov	r0, r3
 800b886:	3718      	adds	r7, #24
 800b888:	46bd      	mov	sp, r7
 800b88a:	bd80      	pop	{r7, pc}
 800b88c:	20005dd4 	.word	0x20005dd4
 800b890:	20005db4 	.word	0x20005db4
 800b894:	200058dc 	.word	0x200058dc
 800b898:	20005d6c 	.word	0x20005d6c
 800b89c:	200058d8 	.word	0x200058d8
 800b8a0:	20005dc0 	.word	0x20005dc0

0800b8a4 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b8a4:	b580      	push	{r7, lr}
 800b8a6:	b084      	sub	sp, #16
 800b8a8:	af00      	add	r7, sp, #0
 800b8aa:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d10b      	bne.n	800b8ca <vTaskSetTimeOutState+0x26>
	__asm volatile
 800b8b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b8b6:	f383 8811 	msr	BASEPRI, r3
 800b8ba:	f3bf 8f6f 	isb	sy
 800b8be:	f3bf 8f4f 	dsb	sy
 800b8c2:	60fb      	str	r3, [r7, #12]
}
 800b8c4:	bf00      	nop
 800b8c6:	bf00      	nop
 800b8c8:	e7fd      	b.n	800b8c6 <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 800b8ca:	f000 fedd 	bl	800c688 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b8ce:	4b07      	ldr	r3, [pc, #28]	@ (800b8ec <vTaskSetTimeOutState+0x48>)
 800b8d0:	681a      	ldr	r2, [r3, #0]
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 800b8d6:	4b06      	ldr	r3, [pc, #24]	@ (800b8f0 <vTaskSetTimeOutState+0x4c>)
 800b8d8:	681a      	ldr	r2, [r3, #0]
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 800b8de:	f000 ff05 	bl	800c6ec <vPortExitCritical>
}
 800b8e2:	bf00      	nop
 800b8e4:	3710      	adds	r7, #16
 800b8e6:	46bd      	mov	sp, r7
 800b8e8:	bd80      	pop	{r7, pc}
 800b8ea:	bf00      	nop
 800b8ec:	20005dc4 	.word	0x20005dc4
 800b8f0:	20005db0 	.word	0x20005db0

0800b8f4 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b8f4:	b480      	push	{r7}
 800b8f6:	b083      	sub	sp, #12
 800b8f8:	af00      	add	r7, sp, #0
 800b8fa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b8fc:	4b06      	ldr	r3, [pc, #24]	@ (800b918 <vTaskInternalSetTimeOutState+0x24>)
 800b8fe:	681a      	ldr	r2, [r3, #0]
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b904:	4b05      	ldr	r3, [pc, #20]	@ (800b91c <vTaskInternalSetTimeOutState+0x28>)
 800b906:	681a      	ldr	r2, [r3, #0]
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	605a      	str	r2, [r3, #4]
}
 800b90c:	bf00      	nop
 800b90e:	370c      	adds	r7, #12
 800b910:	46bd      	mov	sp, r7
 800b912:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b916:	4770      	bx	lr
 800b918:	20005dc4 	.word	0x20005dc4
 800b91c:	20005db0 	.word	0x20005db0

0800b920 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b920:	b580      	push	{r7, lr}
 800b922:	b088      	sub	sp, #32
 800b924:	af00      	add	r7, sp, #0
 800b926:	6078      	str	r0, [r7, #4]
 800b928:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d10b      	bne.n	800b948 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800b930:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b934:	f383 8811 	msr	BASEPRI, r3
 800b938:	f3bf 8f6f 	isb	sy
 800b93c:	f3bf 8f4f 	dsb	sy
 800b940:	613b      	str	r3, [r7, #16]
}
 800b942:	bf00      	nop
 800b944:	bf00      	nop
 800b946:	e7fd      	b.n	800b944 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b948:	683b      	ldr	r3, [r7, #0]
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d10b      	bne.n	800b966 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800b94e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b952:	f383 8811 	msr	BASEPRI, r3
 800b956:	f3bf 8f6f 	isb	sy
 800b95a:	f3bf 8f4f 	dsb	sy
 800b95e:	60fb      	str	r3, [r7, #12]
}
 800b960:	bf00      	nop
 800b962:	bf00      	nop
 800b964:	e7fd      	b.n	800b962 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800b966:	f000 fe8f 	bl	800c688 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b96a:	4b1d      	ldr	r3, [pc, #116]	@ (800b9e0 <xTaskCheckForTimeOut+0xc0>)
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	685b      	ldr	r3, [r3, #4]
 800b974:	69ba      	ldr	r2, [r7, #24]
 800b976:	1ad3      	subs	r3, r2, r3
 800b978:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b97a:	683b      	ldr	r3, [r7, #0]
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b982:	d102      	bne.n	800b98a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b984:	2300      	movs	r3, #0
 800b986:	61fb      	str	r3, [r7, #28]
 800b988:	e023      	b.n	800b9d2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	681a      	ldr	r2, [r3, #0]
 800b98e:	4b15      	ldr	r3, [pc, #84]	@ (800b9e4 <xTaskCheckForTimeOut+0xc4>)
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	429a      	cmp	r2, r3
 800b994:	d007      	beq.n	800b9a6 <xTaskCheckForTimeOut+0x86>
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	685b      	ldr	r3, [r3, #4]
 800b99a:	69ba      	ldr	r2, [r7, #24]
 800b99c:	429a      	cmp	r2, r3
 800b99e:	d302      	bcc.n	800b9a6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b9a0:	2301      	movs	r3, #1
 800b9a2:	61fb      	str	r3, [r7, #28]
 800b9a4:	e015      	b.n	800b9d2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b9a6:	683b      	ldr	r3, [r7, #0]
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	697a      	ldr	r2, [r7, #20]
 800b9ac:	429a      	cmp	r2, r3
 800b9ae:	d20b      	bcs.n	800b9c8 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b9b0:	683b      	ldr	r3, [r7, #0]
 800b9b2:	681a      	ldr	r2, [r3, #0]
 800b9b4:	697b      	ldr	r3, [r7, #20]
 800b9b6:	1ad2      	subs	r2, r2, r3
 800b9b8:	683b      	ldr	r3, [r7, #0]
 800b9ba:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b9bc:	6878      	ldr	r0, [r7, #4]
 800b9be:	f7ff ff99 	bl	800b8f4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b9c2:	2300      	movs	r3, #0
 800b9c4:	61fb      	str	r3, [r7, #28]
 800b9c6:	e004      	b.n	800b9d2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800b9c8:	683b      	ldr	r3, [r7, #0]
 800b9ca:	2200      	movs	r2, #0
 800b9cc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b9ce:	2301      	movs	r3, #1
 800b9d0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b9d2:	f000 fe8b 	bl	800c6ec <vPortExitCritical>

	return xReturn;
 800b9d6:	69fb      	ldr	r3, [r7, #28]
}
 800b9d8:	4618      	mov	r0, r3
 800b9da:	3720      	adds	r7, #32
 800b9dc:	46bd      	mov	sp, r7
 800b9de:	bd80      	pop	{r7, pc}
 800b9e0:	20005db0 	.word	0x20005db0
 800b9e4:	20005dc4 	.word	0x20005dc4

0800b9e8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b9e8:	b480      	push	{r7}
 800b9ea:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b9ec:	4b03      	ldr	r3, [pc, #12]	@ (800b9fc <vTaskMissedYield+0x14>)
 800b9ee:	2201      	movs	r2, #1
 800b9f0:	601a      	str	r2, [r3, #0]
}
 800b9f2:	bf00      	nop
 800b9f4:	46bd      	mov	sp, r7
 800b9f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9fa:	4770      	bx	lr
 800b9fc:	20005dc0 	.word	0x20005dc0

0800ba00 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800ba00:	b580      	push	{r7, lr}
 800ba02:	b082      	sub	sp, #8
 800ba04:	af00      	add	r7, sp, #0
 800ba06:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800ba08:	f000 f852 	bl	800bab0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800ba0c:	4b06      	ldr	r3, [pc, #24]	@ (800ba28 <prvIdleTask+0x28>)
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	2b01      	cmp	r3, #1
 800ba12:	d9f9      	bls.n	800ba08 <prvIdleTask+0x8>
			{
				taskYIELD();
 800ba14:	4b05      	ldr	r3, [pc, #20]	@ (800ba2c <prvIdleTask+0x2c>)
 800ba16:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ba1a:	601a      	str	r2, [r3, #0]
 800ba1c:	f3bf 8f4f 	dsb	sy
 800ba20:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800ba24:	e7f0      	b.n	800ba08 <prvIdleTask+0x8>
 800ba26:	bf00      	nop
 800ba28:	200058dc 	.word	0x200058dc
 800ba2c:	e000ed04 	.word	0xe000ed04

0800ba30 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800ba30:	b580      	push	{r7, lr}
 800ba32:	b082      	sub	sp, #8
 800ba34:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ba36:	2300      	movs	r3, #0
 800ba38:	607b      	str	r3, [r7, #4]
 800ba3a:	e00c      	b.n	800ba56 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ba3c:	687a      	ldr	r2, [r7, #4]
 800ba3e:	4613      	mov	r3, r2
 800ba40:	009b      	lsls	r3, r3, #2
 800ba42:	4413      	add	r3, r2
 800ba44:	009b      	lsls	r3, r3, #2
 800ba46:	4a12      	ldr	r2, [pc, #72]	@ (800ba90 <prvInitialiseTaskLists+0x60>)
 800ba48:	4413      	add	r3, r2
 800ba4a:	4618      	mov	r0, r3
 800ba4c:	f7fe fcae 	bl	800a3ac <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	3301      	adds	r3, #1
 800ba54:	607b      	str	r3, [r7, #4]
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	2b37      	cmp	r3, #55	@ 0x37
 800ba5a:	d9ef      	bls.n	800ba3c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800ba5c:	480d      	ldr	r0, [pc, #52]	@ (800ba94 <prvInitialiseTaskLists+0x64>)
 800ba5e:	f7fe fca5 	bl	800a3ac <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ba62:	480d      	ldr	r0, [pc, #52]	@ (800ba98 <prvInitialiseTaskLists+0x68>)
 800ba64:	f7fe fca2 	bl	800a3ac <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ba68:	480c      	ldr	r0, [pc, #48]	@ (800ba9c <prvInitialiseTaskLists+0x6c>)
 800ba6a:	f7fe fc9f 	bl	800a3ac <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ba6e:	480c      	ldr	r0, [pc, #48]	@ (800baa0 <prvInitialiseTaskLists+0x70>)
 800ba70:	f7fe fc9c 	bl	800a3ac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ba74:	480b      	ldr	r0, [pc, #44]	@ (800baa4 <prvInitialiseTaskLists+0x74>)
 800ba76:	f7fe fc99 	bl	800a3ac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ba7a:	4b0b      	ldr	r3, [pc, #44]	@ (800baa8 <prvInitialiseTaskLists+0x78>)
 800ba7c:	4a05      	ldr	r2, [pc, #20]	@ (800ba94 <prvInitialiseTaskLists+0x64>)
 800ba7e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ba80:	4b0a      	ldr	r3, [pc, #40]	@ (800baac <prvInitialiseTaskLists+0x7c>)
 800ba82:	4a05      	ldr	r2, [pc, #20]	@ (800ba98 <prvInitialiseTaskLists+0x68>)
 800ba84:	601a      	str	r2, [r3, #0]
}
 800ba86:	bf00      	nop
 800ba88:	3708      	adds	r7, #8
 800ba8a:	46bd      	mov	sp, r7
 800ba8c:	bd80      	pop	{r7, pc}
 800ba8e:	bf00      	nop
 800ba90:	200058dc 	.word	0x200058dc
 800ba94:	20005d3c 	.word	0x20005d3c
 800ba98:	20005d50 	.word	0x20005d50
 800ba9c:	20005d6c 	.word	0x20005d6c
 800baa0:	20005d80 	.word	0x20005d80
 800baa4:	20005d98 	.word	0x20005d98
 800baa8:	20005d64 	.word	0x20005d64
 800baac:	20005d68 	.word	0x20005d68

0800bab0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800bab0:	b580      	push	{r7, lr}
 800bab2:	b082      	sub	sp, #8
 800bab4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bab6:	e019      	b.n	800baec <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800bab8:	f000 fde6 	bl	800c688 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800babc:	4b10      	ldr	r3, [pc, #64]	@ (800bb00 <prvCheckTasksWaitingTermination+0x50>)
 800babe:	68db      	ldr	r3, [r3, #12]
 800bac0:	68db      	ldr	r3, [r3, #12]
 800bac2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	3304      	adds	r3, #4
 800bac8:	4618      	mov	r0, r3
 800baca:	f7fe fcf9 	bl	800a4c0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800bace:	4b0d      	ldr	r3, [pc, #52]	@ (800bb04 <prvCheckTasksWaitingTermination+0x54>)
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	3b01      	subs	r3, #1
 800bad4:	4a0b      	ldr	r2, [pc, #44]	@ (800bb04 <prvCheckTasksWaitingTermination+0x54>)
 800bad6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800bad8:	4b0b      	ldr	r3, [pc, #44]	@ (800bb08 <prvCheckTasksWaitingTermination+0x58>)
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	3b01      	subs	r3, #1
 800bade:	4a0a      	ldr	r2, [pc, #40]	@ (800bb08 <prvCheckTasksWaitingTermination+0x58>)
 800bae0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800bae2:	f000 fe03 	bl	800c6ec <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800bae6:	6878      	ldr	r0, [r7, #4]
 800bae8:	f000 f810 	bl	800bb0c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800baec:	4b06      	ldr	r3, [pc, #24]	@ (800bb08 <prvCheckTasksWaitingTermination+0x58>)
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	d1e1      	bne.n	800bab8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800baf4:	bf00      	nop
 800baf6:	bf00      	nop
 800baf8:	3708      	adds	r7, #8
 800bafa:	46bd      	mov	sp, r7
 800bafc:	bd80      	pop	{r7, pc}
 800bafe:	bf00      	nop
 800bb00:	20005d80 	.word	0x20005d80
 800bb04:	20005dac 	.word	0x20005dac
 800bb08:	20005d94 	.word	0x20005d94

0800bb0c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800bb0c:	b580      	push	{r7, lr}
 800bb0e:	b084      	sub	sp, #16
 800bb10:	af00      	add	r7, sp, #0
 800bb12:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	d108      	bne.n	800bb30 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bb22:	4618      	mov	r0, r3
 800bb24:	f000 ffa0 	bl	800ca68 <vPortFree>
				vPortFree( pxTCB );
 800bb28:	6878      	ldr	r0, [r7, #4]
 800bb2a:	f000 ff9d 	bl	800ca68 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800bb2e:	e019      	b.n	800bb64 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800bb36:	2b01      	cmp	r3, #1
 800bb38:	d103      	bne.n	800bb42 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800bb3a:	6878      	ldr	r0, [r7, #4]
 800bb3c:	f000 ff94 	bl	800ca68 <vPortFree>
	}
 800bb40:	e010      	b.n	800bb64 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800bb48:	2b02      	cmp	r3, #2
 800bb4a:	d00b      	beq.n	800bb64 <prvDeleteTCB+0x58>
	__asm volatile
 800bb4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb50:	f383 8811 	msr	BASEPRI, r3
 800bb54:	f3bf 8f6f 	isb	sy
 800bb58:	f3bf 8f4f 	dsb	sy
 800bb5c:	60fb      	str	r3, [r7, #12]
}
 800bb5e:	bf00      	nop
 800bb60:	bf00      	nop
 800bb62:	e7fd      	b.n	800bb60 <prvDeleteTCB+0x54>
	}
 800bb64:	bf00      	nop
 800bb66:	3710      	adds	r7, #16
 800bb68:	46bd      	mov	sp, r7
 800bb6a:	bd80      	pop	{r7, pc}

0800bb6c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800bb6c:	b480      	push	{r7}
 800bb6e:	b083      	sub	sp, #12
 800bb70:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bb72:	4b0c      	ldr	r3, [pc, #48]	@ (800bba4 <prvResetNextTaskUnblockTime+0x38>)
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	d104      	bne.n	800bb86 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800bb7c:	4b0a      	ldr	r3, [pc, #40]	@ (800bba8 <prvResetNextTaskUnblockTime+0x3c>)
 800bb7e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800bb82:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800bb84:	e008      	b.n	800bb98 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bb86:	4b07      	ldr	r3, [pc, #28]	@ (800bba4 <prvResetNextTaskUnblockTime+0x38>)
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	68db      	ldr	r3, [r3, #12]
 800bb8c:	68db      	ldr	r3, [r3, #12]
 800bb8e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	685b      	ldr	r3, [r3, #4]
 800bb94:	4a04      	ldr	r2, [pc, #16]	@ (800bba8 <prvResetNextTaskUnblockTime+0x3c>)
 800bb96:	6013      	str	r3, [r2, #0]
}
 800bb98:	bf00      	nop
 800bb9a:	370c      	adds	r7, #12
 800bb9c:	46bd      	mov	sp, r7
 800bb9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bba2:	4770      	bx	lr
 800bba4:	20005d64 	.word	0x20005d64
 800bba8:	20005dcc 	.word	0x20005dcc

0800bbac <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800bbac:	b480      	push	{r7}
 800bbae:	b083      	sub	sp, #12
 800bbb0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800bbb2:	4b0b      	ldr	r3, [pc, #44]	@ (800bbe0 <xTaskGetSchedulerState+0x34>)
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d102      	bne.n	800bbc0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800bbba:	2301      	movs	r3, #1
 800bbbc:	607b      	str	r3, [r7, #4]
 800bbbe:	e008      	b.n	800bbd2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bbc0:	4b08      	ldr	r3, [pc, #32]	@ (800bbe4 <xTaskGetSchedulerState+0x38>)
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	d102      	bne.n	800bbce <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800bbc8:	2302      	movs	r3, #2
 800bbca:	607b      	str	r3, [r7, #4]
 800bbcc:	e001      	b.n	800bbd2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800bbce:	2300      	movs	r3, #0
 800bbd0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800bbd2:	687b      	ldr	r3, [r7, #4]
	}
 800bbd4:	4618      	mov	r0, r3
 800bbd6:	370c      	adds	r7, #12
 800bbd8:	46bd      	mov	sp, r7
 800bbda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbde:	4770      	bx	lr
 800bbe0:	20005db8 	.word	0x20005db8
 800bbe4:	20005dd4 	.word	0x20005dd4

0800bbe8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800bbe8:	b580      	push	{r7, lr}
 800bbea:	b086      	sub	sp, #24
 800bbec:	af00      	add	r7, sp, #0
 800bbee:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800bbf4:	2300      	movs	r3, #0
 800bbf6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	d058      	beq.n	800bcb0 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800bbfe:	4b2f      	ldr	r3, [pc, #188]	@ (800bcbc <xTaskPriorityDisinherit+0xd4>)
 800bc00:	681b      	ldr	r3, [r3, #0]
 800bc02:	693a      	ldr	r2, [r7, #16]
 800bc04:	429a      	cmp	r2, r3
 800bc06:	d00b      	beq.n	800bc20 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800bc08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc0c:	f383 8811 	msr	BASEPRI, r3
 800bc10:	f3bf 8f6f 	isb	sy
 800bc14:	f3bf 8f4f 	dsb	sy
 800bc18:	60fb      	str	r3, [r7, #12]
}
 800bc1a:	bf00      	nop
 800bc1c:	bf00      	nop
 800bc1e:	e7fd      	b.n	800bc1c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800bc20:	693b      	ldr	r3, [r7, #16]
 800bc22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d10b      	bne.n	800bc40 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800bc28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc2c:	f383 8811 	msr	BASEPRI, r3
 800bc30:	f3bf 8f6f 	isb	sy
 800bc34:	f3bf 8f4f 	dsb	sy
 800bc38:	60bb      	str	r3, [r7, #8]
}
 800bc3a:	bf00      	nop
 800bc3c:	bf00      	nop
 800bc3e:	e7fd      	b.n	800bc3c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800bc40:	693b      	ldr	r3, [r7, #16]
 800bc42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bc44:	1e5a      	subs	r2, r3, #1
 800bc46:	693b      	ldr	r3, [r7, #16]
 800bc48:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800bc4a:	693b      	ldr	r3, [r7, #16]
 800bc4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bc4e:	693b      	ldr	r3, [r7, #16]
 800bc50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bc52:	429a      	cmp	r2, r3
 800bc54:	d02c      	beq.n	800bcb0 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800bc56:	693b      	ldr	r3, [r7, #16]
 800bc58:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d128      	bne.n	800bcb0 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bc5e:	693b      	ldr	r3, [r7, #16]
 800bc60:	3304      	adds	r3, #4
 800bc62:	4618      	mov	r0, r3
 800bc64:	f7fe fc2c 	bl	800a4c0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800bc68:	693b      	ldr	r3, [r7, #16]
 800bc6a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800bc6c:	693b      	ldr	r3, [r7, #16]
 800bc6e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bc70:	693b      	ldr	r3, [r7, #16]
 800bc72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc74:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800bc78:	693b      	ldr	r3, [r7, #16]
 800bc7a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800bc7c:	693b      	ldr	r3, [r7, #16]
 800bc7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bc80:	4b0f      	ldr	r3, [pc, #60]	@ (800bcc0 <xTaskPriorityDisinherit+0xd8>)
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	429a      	cmp	r2, r3
 800bc86:	d903      	bls.n	800bc90 <xTaskPriorityDisinherit+0xa8>
 800bc88:	693b      	ldr	r3, [r7, #16]
 800bc8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc8c:	4a0c      	ldr	r2, [pc, #48]	@ (800bcc0 <xTaskPriorityDisinherit+0xd8>)
 800bc8e:	6013      	str	r3, [r2, #0]
 800bc90:	693b      	ldr	r3, [r7, #16]
 800bc92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bc94:	4613      	mov	r3, r2
 800bc96:	009b      	lsls	r3, r3, #2
 800bc98:	4413      	add	r3, r2
 800bc9a:	009b      	lsls	r3, r3, #2
 800bc9c:	4a09      	ldr	r2, [pc, #36]	@ (800bcc4 <xTaskPriorityDisinherit+0xdc>)
 800bc9e:	441a      	add	r2, r3
 800bca0:	693b      	ldr	r3, [r7, #16]
 800bca2:	3304      	adds	r3, #4
 800bca4:	4619      	mov	r1, r3
 800bca6:	4610      	mov	r0, r2
 800bca8:	f7fe fbad 	bl	800a406 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800bcac:	2301      	movs	r3, #1
 800bcae:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bcb0:	697b      	ldr	r3, [r7, #20]
	}
 800bcb2:	4618      	mov	r0, r3
 800bcb4:	3718      	adds	r7, #24
 800bcb6:	46bd      	mov	sp, r7
 800bcb8:	bd80      	pop	{r7, pc}
 800bcba:	bf00      	nop
 800bcbc:	200058d8 	.word	0x200058d8
 800bcc0:	20005db4 	.word	0x20005db4
 800bcc4:	200058dc 	.word	0x200058dc

0800bcc8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800bcc8:	b580      	push	{r7, lr}
 800bcca:	b084      	sub	sp, #16
 800bccc:	af00      	add	r7, sp, #0
 800bcce:	6078      	str	r0, [r7, #4]
 800bcd0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800bcd2:	4b21      	ldr	r3, [pc, #132]	@ (800bd58 <prvAddCurrentTaskToDelayedList+0x90>)
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bcd8:	4b20      	ldr	r3, [pc, #128]	@ (800bd5c <prvAddCurrentTaskToDelayedList+0x94>)
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	3304      	adds	r3, #4
 800bcde:	4618      	mov	r0, r3
 800bce0:	f7fe fbee 	bl	800a4c0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800bcea:	d10a      	bne.n	800bd02 <prvAddCurrentTaskToDelayedList+0x3a>
 800bcec:	683b      	ldr	r3, [r7, #0]
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d007      	beq.n	800bd02 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bcf2:	4b1a      	ldr	r3, [pc, #104]	@ (800bd5c <prvAddCurrentTaskToDelayedList+0x94>)
 800bcf4:	681b      	ldr	r3, [r3, #0]
 800bcf6:	3304      	adds	r3, #4
 800bcf8:	4619      	mov	r1, r3
 800bcfa:	4819      	ldr	r0, [pc, #100]	@ (800bd60 <prvAddCurrentTaskToDelayedList+0x98>)
 800bcfc:	f7fe fb83 	bl	800a406 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800bd00:	e026      	b.n	800bd50 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800bd02:	68fa      	ldr	r2, [r7, #12]
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	4413      	add	r3, r2
 800bd08:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800bd0a:	4b14      	ldr	r3, [pc, #80]	@ (800bd5c <prvAddCurrentTaskToDelayedList+0x94>)
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	68ba      	ldr	r2, [r7, #8]
 800bd10:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800bd12:	68ba      	ldr	r2, [r7, #8]
 800bd14:	68fb      	ldr	r3, [r7, #12]
 800bd16:	429a      	cmp	r2, r3
 800bd18:	d209      	bcs.n	800bd2e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bd1a:	4b12      	ldr	r3, [pc, #72]	@ (800bd64 <prvAddCurrentTaskToDelayedList+0x9c>)
 800bd1c:	681a      	ldr	r2, [r3, #0]
 800bd1e:	4b0f      	ldr	r3, [pc, #60]	@ (800bd5c <prvAddCurrentTaskToDelayedList+0x94>)
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	3304      	adds	r3, #4
 800bd24:	4619      	mov	r1, r3
 800bd26:	4610      	mov	r0, r2
 800bd28:	f7fe fb91 	bl	800a44e <vListInsert>
}
 800bd2c:	e010      	b.n	800bd50 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bd2e:	4b0e      	ldr	r3, [pc, #56]	@ (800bd68 <prvAddCurrentTaskToDelayedList+0xa0>)
 800bd30:	681a      	ldr	r2, [r3, #0]
 800bd32:	4b0a      	ldr	r3, [pc, #40]	@ (800bd5c <prvAddCurrentTaskToDelayedList+0x94>)
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	3304      	adds	r3, #4
 800bd38:	4619      	mov	r1, r3
 800bd3a:	4610      	mov	r0, r2
 800bd3c:	f7fe fb87 	bl	800a44e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800bd40:	4b0a      	ldr	r3, [pc, #40]	@ (800bd6c <prvAddCurrentTaskToDelayedList+0xa4>)
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	68ba      	ldr	r2, [r7, #8]
 800bd46:	429a      	cmp	r2, r3
 800bd48:	d202      	bcs.n	800bd50 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800bd4a:	4a08      	ldr	r2, [pc, #32]	@ (800bd6c <prvAddCurrentTaskToDelayedList+0xa4>)
 800bd4c:	68bb      	ldr	r3, [r7, #8]
 800bd4e:	6013      	str	r3, [r2, #0]
}
 800bd50:	bf00      	nop
 800bd52:	3710      	adds	r7, #16
 800bd54:	46bd      	mov	sp, r7
 800bd56:	bd80      	pop	{r7, pc}
 800bd58:	20005db0 	.word	0x20005db0
 800bd5c:	200058d8 	.word	0x200058d8
 800bd60:	20005d98 	.word	0x20005d98
 800bd64:	20005d68 	.word	0x20005d68
 800bd68:	20005d64 	.word	0x20005d64
 800bd6c:	20005dcc 	.word	0x20005dcc

0800bd70 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800bd70:	b580      	push	{r7, lr}
 800bd72:	b08a      	sub	sp, #40	@ 0x28
 800bd74:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800bd76:	2300      	movs	r3, #0
 800bd78:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800bd7a:	f000 fb13 	bl	800c3a4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800bd7e:	4b1d      	ldr	r3, [pc, #116]	@ (800bdf4 <xTimerCreateTimerTask+0x84>)
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	d021      	beq.n	800bdca <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800bd86:	2300      	movs	r3, #0
 800bd88:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800bd8a:	2300      	movs	r3, #0
 800bd8c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800bd8e:	1d3a      	adds	r2, r7, #4
 800bd90:	f107 0108 	add.w	r1, r7, #8
 800bd94:	f107 030c 	add.w	r3, r7, #12
 800bd98:	4618      	mov	r0, r3
 800bd9a:	f7fe faed 	bl	800a378 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800bd9e:	6879      	ldr	r1, [r7, #4]
 800bda0:	68bb      	ldr	r3, [r7, #8]
 800bda2:	68fa      	ldr	r2, [r7, #12]
 800bda4:	9202      	str	r2, [sp, #8]
 800bda6:	9301      	str	r3, [sp, #4]
 800bda8:	2302      	movs	r3, #2
 800bdaa:	9300      	str	r3, [sp, #0]
 800bdac:	2300      	movs	r3, #0
 800bdae:	460a      	mov	r2, r1
 800bdb0:	4911      	ldr	r1, [pc, #68]	@ (800bdf8 <xTimerCreateTimerTask+0x88>)
 800bdb2:	4812      	ldr	r0, [pc, #72]	@ (800bdfc <xTimerCreateTimerTask+0x8c>)
 800bdb4:	f7ff f8a8 	bl	800af08 <xTaskCreateStatic>
 800bdb8:	4603      	mov	r3, r0
 800bdba:	4a11      	ldr	r2, [pc, #68]	@ (800be00 <xTimerCreateTimerTask+0x90>)
 800bdbc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800bdbe:	4b10      	ldr	r3, [pc, #64]	@ (800be00 <xTimerCreateTimerTask+0x90>)
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	d001      	beq.n	800bdca <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800bdc6:	2301      	movs	r3, #1
 800bdc8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800bdca:	697b      	ldr	r3, [r7, #20]
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	d10b      	bne.n	800bde8 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800bdd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bdd4:	f383 8811 	msr	BASEPRI, r3
 800bdd8:	f3bf 8f6f 	isb	sy
 800bddc:	f3bf 8f4f 	dsb	sy
 800bde0:	613b      	str	r3, [r7, #16]
}
 800bde2:	bf00      	nop
 800bde4:	bf00      	nop
 800bde6:	e7fd      	b.n	800bde4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800bde8:	697b      	ldr	r3, [r7, #20]
}
 800bdea:	4618      	mov	r0, r3
 800bdec:	3718      	adds	r7, #24
 800bdee:	46bd      	mov	sp, r7
 800bdf0:	bd80      	pop	{r7, pc}
 800bdf2:	bf00      	nop
 800bdf4:	20005e08 	.word	0x20005e08
 800bdf8:	0801d4e8 	.word	0x0801d4e8
 800bdfc:	0800bf3d 	.word	0x0800bf3d
 800be00:	20005e0c 	.word	0x20005e0c

0800be04 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800be04:	b580      	push	{r7, lr}
 800be06:	b08a      	sub	sp, #40	@ 0x28
 800be08:	af00      	add	r7, sp, #0
 800be0a:	60f8      	str	r0, [r7, #12]
 800be0c:	60b9      	str	r1, [r7, #8]
 800be0e:	607a      	str	r2, [r7, #4]
 800be10:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800be12:	2300      	movs	r3, #0
 800be14:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d10b      	bne.n	800be34 <xTimerGenericCommand+0x30>
	__asm volatile
 800be1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be20:	f383 8811 	msr	BASEPRI, r3
 800be24:	f3bf 8f6f 	isb	sy
 800be28:	f3bf 8f4f 	dsb	sy
 800be2c:	623b      	str	r3, [r7, #32]
}
 800be2e:	bf00      	nop
 800be30:	bf00      	nop
 800be32:	e7fd      	b.n	800be30 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800be34:	4b19      	ldr	r3, [pc, #100]	@ (800be9c <xTimerGenericCommand+0x98>)
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	2b00      	cmp	r3, #0
 800be3a:	d02a      	beq.n	800be92 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800be3c:	68bb      	ldr	r3, [r7, #8]
 800be3e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800be44:	68fb      	ldr	r3, [r7, #12]
 800be46:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800be48:	68bb      	ldr	r3, [r7, #8]
 800be4a:	2b05      	cmp	r3, #5
 800be4c:	dc18      	bgt.n	800be80 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800be4e:	f7ff fead 	bl	800bbac <xTaskGetSchedulerState>
 800be52:	4603      	mov	r3, r0
 800be54:	2b02      	cmp	r3, #2
 800be56:	d109      	bne.n	800be6c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800be58:	4b10      	ldr	r3, [pc, #64]	@ (800be9c <xTimerGenericCommand+0x98>)
 800be5a:	6818      	ldr	r0, [r3, #0]
 800be5c:	f107 0110 	add.w	r1, r7, #16
 800be60:	2300      	movs	r3, #0
 800be62:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800be64:	f7fe fc60 	bl	800a728 <xQueueGenericSend>
 800be68:	6278      	str	r0, [r7, #36]	@ 0x24
 800be6a:	e012      	b.n	800be92 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800be6c:	4b0b      	ldr	r3, [pc, #44]	@ (800be9c <xTimerGenericCommand+0x98>)
 800be6e:	6818      	ldr	r0, [r3, #0]
 800be70:	f107 0110 	add.w	r1, r7, #16
 800be74:	2300      	movs	r3, #0
 800be76:	2200      	movs	r2, #0
 800be78:	f7fe fc56 	bl	800a728 <xQueueGenericSend>
 800be7c:	6278      	str	r0, [r7, #36]	@ 0x24
 800be7e:	e008      	b.n	800be92 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800be80:	4b06      	ldr	r3, [pc, #24]	@ (800be9c <xTimerGenericCommand+0x98>)
 800be82:	6818      	ldr	r0, [r3, #0]
 800be84:	f107 0110 	add.w	r1, r7, #16
 800be88:	2300      	movs	r3, #0
 800be8a:	683a      	ldr	r2, [r7, #0]
 800be8c:	f7fe fd4e 	bl	800a92c <xQueueGenericSendFromISR>
 800be90:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800be92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800be94:	4618      	mov	r0, r3
 800be96:	3728      	adds	r7, #40	@ 0x28
 800be98:	46bd      	mov	sp, r7
 800be9a:	bd80      	pop	{r7, pc}
 800be9c:	20005e08 	.word	0x20005e08

0800bea0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800bea0:	b580      	push	{r7, lr}
 800bea2:	b088      	sub	sp, #32
 800bea4:	af02      	add	r7, sp, #8
 800bea6:	6078      	str	r0, [r7, #4]
 800bea8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800beaa:	4b23      	ldr	r3, [pc, #140]	@ (800bf38 <prvProcessExpiredTimer+0x98>)
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	68db      	ldr	r3, [r3, #12]
 800beb0:	68db      	ldr	r3, [r3, #12]
 800beb2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800beb4:	697b      	ldr	r3, [r7, #20]
 800beb6:	3304      	adds	r3, #4
 800beb8:	4618      	mov	r0, r3
 800beba:	f7fe fb01 	bl	800a4c0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bebe:	697b      	ldr	r3, [r7, #20]
 800bec0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bec4:	f003 0304 	and.w	r3, r3, #4
 800bec8:	2b00      	cmp	r3, #0
 800beca:	d023      	beq.n	800bf14 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800becc:	697b      	ldr	r3, [r7, #20]
 800bece:	699a      	ldr	r2, [r3, #24]
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	18d1      	adds	r1, r2, r3
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	683a      	ldr	r2, [r7, #0]
 800bed8:	6978      	ldr	r0, [r7, #20]
 800beda:	f000 f8d5 	bl	800c088 <prvInsertTimerInActiveList>
 800bede:	4603      	mov	r3, r0
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d020      	beq.n	800bf26 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bee4:	2300      	movs	r3, #0
 800bee6:	9300      	str	r3, [sp, #0]
 800bee8:	2300      	movs	r3, #0
 800beea:	687a      	ldr	r2, [r7, #4]
 800beec:	2100      	movs	r1, #0
 800beee:	6978      	ldr	r0, [r7, #20]
 800bef0:	f7ff ff88 	bl	800be04 <xTimerGenericCommand>
 800bef4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800bef6:	693b      	ldr	r3, [r7, #16]
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d114      	bne.n	800bf26 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800befc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf00:	f383 8811 	msr	BASEPRI, r3
 800bf04:	f3bf 8f6f 	isb	sy
 800bf08:	f3bf 8f4f 	dsb	sy
 800bf0c:	60fb      	str	r3, [r7, #12]
}
 800bf0e:	bf00      	nop
 800bf10:	bf00      	nop
 800bf12:	e7fd      	b.n	800bf10 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bf14:	697b      	ldr	r3, [r7, #20]
 800bf16:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bf1a:	f023 0301 	bic.w	r3, r3, #1
 800bf1e:	b2da      	uxtb	r2, r3
 800bf20:	697b      	ldr	r3, [r7, #20]
 800bf22:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bf26:	697b      	ldr	r3, [r7, #20]
 800bf28:	6a1b      	ldr	r3, [r3, #32]
 800bf2a:	6978      	ldr	r0, [r7, #20]
 800bf2c:	4798      	blx	r3
}
 800bf2e:	bf00      	nop
 800bf30:	3718      	adds	r7, #24
 800bf32:	46bd      	mov	sp, r7
 800bf34:	bd80      	pop	{r7, pc}
 800bf36:	bf00      	nop
 800bf38:	20005e00 	.word	0x20005e00

0800bf3c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800bf3c:	b580      	push	{r7, lr}
 800bf3e:	b084      	sub	sp, #16
 800bf40:	af00      	add	r7, sp, #0
 800bf42:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bf44:	f107 0308 	add.w	r3, r7, #8
 800bf48:	4618      	mov	r0, r3
 800bf4a:	f000 f859 	bl	800c000 <prvGetNextExpireTime>
 800bf4e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800bf50:	68bb      	ldr	r3, [r7, #8]
 800bf52:	4619      	mov	r1, r3
 800bf54:	68f8      	ldr	r0, [r7, #12]
 800bf56:	f000 f805 	bl	800bf64 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800bf5a:	f000 f8d7 	bl	800c10c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bf5e:	bf00      	nop
 800bf60:	e7f0      	b.n	800bf44 <prvTimerTask+0x8>
	...

0800bf64 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800bf64:	b580      	push	{r7, lr}
 800bf66:	b084      	sub	sp, #16
 800bf68:	af00      	add	r7, sp, #0
 800bf6a:	6078      	str	r0, [r7, #4]
 800bf6c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800bf6e:	f7ff fa0f 	bl	800b390 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bf72:	f107 0308 	add.w	r3, r7, #8
 800bf76:	4618      	mov	r0, r3
 800bf78:	f000 f866 	bl	800c048 <prvSampleTimeNow>
 800bf7c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800bf7e:	68bb      	ldr	r3, [r7, #8]
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	d130      	bne.n	800bfe6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800bf84:	683b      	ldr	r3, [r7, #0]
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d10a      	bne.n	800bfa0 <prvProcessTimerOrBlockTask+0x3c>
 800bf8a:	687a      	ldr	r2, [r7, #4]
 800bf8c:	68fb      	ldr	r3, [r7, #12]
 800bf8e:	429a      	cmp	r2, r3
 800bf90:	d806      	bhi.n	800bfa0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800bf92:	f7ff fa0b 	bl	800b3ac <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800bf96:	68f9      	ldr	r1, [r7, #12]
 800bf98:	6878      	ldr	r0, [r7, #4]
 800bf9a:	f7ff ff81 	bl	800bea0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800bf9e:	e024      	b.n	800bfea <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800bfa0:	683b      	ldr	r3, [r7, #0]
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	d008      	beq.n	800bfb8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800bfa6:	4b13      	ldr	r3, [pc, #76]	@ (800bff4 <prvProcessTimerOrBlockTask+0x90>)
 800bfa8:	681b      	ldr	r3, [r3, #0]
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d101      	bne.n	800bfb4 <prvProcessTimerOrBlockTask+0x50>
 800bfb0:	2301      	movs	r3, #1
 800bfb2:	e000      	b.n	800bfb6 <prvProcessTimerOrBlockTask+0x52>
 800bfb4:	2300      	movs	r3, #0
 800bfb6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800bfb8:	4b0f      	ldr	r3, [pc, #60]	@ (800bff8 <prvProcessTimerOrBlockTask+0x94>)
 800bfba:	6818      	ldr	r0, [r3, #0]
 800bfbc:	687a      	ldr	r2, [r7, #4]
 800bfbe:	68fb      	ldr	r3, [r7, #12]
 800bfc0:	1ad3      	subs	r3, r2, r3
 800bfc2:	683a      	ldr	r2, [r7, #0]
 800bfc4:	4619      	mov	r1, r3
 800bfc6:	f7fe ff6b 	bl	800aea0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800bfca:	f7ff f9ef 	bl	800b3ac <xTaskResumeAll>
 800bfce:	4603      	mov	r3, r0
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d10a      	bne.n	800bfea <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800bfd4:	4b09      	ldr	r3, [pc, #36]	@ (800bffc <prvProcessTimerOrBlockTask+0x98>)
 800bfd6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bfda:	601a      	str	r2, [r3, #0]
 800bfdc:	f3bf 8f4f 	dsb	sy
 800bfe0:	f3bf 8f6f 	isb	sy
}
 800bfe4:	e001      	b.n	800bfea <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800bfe6:	f7ff f9e1 	bl	800b3ac <xTaskResumeAll>
}
 800bfea:	bf00      	nop
 800bfec:	3710      	adds	r7, #16
 800bfee:	46bd      	mov	sp, r7
 800bff0:	bd80      	pop	{r7, pc}
 800bff2:	bf00      	nop
 800bff4:	20005e04 	.word	0x20005e04
 800bff8:	20005e08 	.word	0x20005e08
 800bffc:	e000ed04 	.word	0xe000ed04

0800c000 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c000:	b480      	push	{r7}
 800c002:	b085      	sub	sp, #20
 800c004:	af00      	add	r7, sp, #0
 800c006:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c008:	4b0e      	ldr	r3, [pc, #56]	@ (800c044 <prvGetNextExpireTime+0x44>)
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	2b00      	cmp	r3, #0
 800c010:	d101      	bne.n	800c016 <prvGetNextExpireTime+0x16>
 800c012:	2201      	movs	r2, #1
 800c014:	e000      	b.n	800c018 <prvGetNextExpireTime+0x18>
 800c016:	2200      	movs	r2, #0
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	2b00      	cmp	r3, #0
 800c022:	d105      	bne.n	800c030 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c024:	4b07      	ldr	r3, [pc, #28]	@ (800c044 <prvGetNextExpireTime+0x44>)
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	68db      	ldr	r3, [r3, #12]
 800c02a:	681b      	ldr	r3, [r3, #0]
 800c02c:	60fb      	str	r3, [r7, #12]
 800c02e:	e001      	b.n	800c034 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c030:	2300      	movs	r3, #0
 800c032:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c034:	68fb      	ldr	r3, [r7, #12]
}
 800c036:	4618      	mov	r0, r3
 800c038:	3714      	adds	r7, #20
 800c03a:	46bd      	mov	sp, r7
 800c03c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c040:	4770      	bx	lr
 800c042:	bf00      	nop
 800c044:	20005e00 	.word	0x20005e00

0800c048 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c048:	b580      	push	{r7, lr}
 800c04a:	b084      	sub	sp, #16
 800c04c:	af00      	add	r7, sp, #0
 800c04e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c050:	f7ff fa4a 	bl	800b4e8 <xTaskGetTickCount>
 800c054:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c056:	4b0b      	ldr	r3, [pc, #44]	@ (800c084 <prvSampleTimeNow+0x3c>)
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	68fa      	ldr	r2, [r7, #12]
 800c05c:	429a      	cmp	r2, r3
 800c05e:	d205      	bcs.n	800c06c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c060:	f000 f93a 	bl	800c2d8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	2201      	movs	r2, #1
 800c068:	601a      	str	r2, [r3, #0]
 800c06a:	e002      	b.n	800c072 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	2200      	movs	r2, #0
 800c070:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c072:	4a04      	ldr	r2, [pc, #16]	@ (800c084 <prvSampleTimeNow+0x3c>)
 800c074:	68fb      	ldr	r3, [r7, #12]
 800c076:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c078:	68fb      	ldr	r3, [r7, #12]
}
 800c07a:	4618      	mov	r0, r3
 800c07c:	3710      	adds	r7, #16
 800c07e:	46bd      	mov	sp, r7
 800c080:	bd80      	pop	{r7, pc}
 800c082:	bf00      	nop
 800c084:	20005e10 	.word	0x20005e10

0800c088 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c088:	b580      	push	{r7, lr}
 800c08a:	b086      	sub	sp, #24
 800c08c:	af00      	add	r7, sp, #0
 800c08e:	60f8      	str	r0, [r7, #12]
 800c090:	60b9      	str	r1, [r7, #8]
 800c092:	607a      	str	r2, [r7, #4]
 800c094:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c096:	2300      	movs	r3, #0
 800c098:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c09a:	68fb      	ldr	r3, [r7, #12]
 800c09c:	68ba      	ldr	r2, [r7, #8]
 800c09e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c0a0:	68fb      	ldr	r3, [r7, #12]
 800c0a2:	68fa      	ldr	r2, [r7, #12]
 800c0a4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c0a6:	68ba      	ldr	r2, [r7, #8]
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	429a      	cmp	r2, r3
 800c0ac:	d812      	bhi.n	800c0d4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c0ae:	687a      	ldr	r2, [r7, #4]
 800c0b0:	683b      	ldr	r3, [r7, #0]
 800c0b2:	1ad2      	subs	r2, r2, r3
 800c0b4:	68fb      	ldr	r3, [r7, #12]
 800c0b6:	699b      	ldr	r3, [r3, #24]
 800c0b8:	429a      	cmp	r2, r3
 800c0ba:	d302      	bcc.n	800c0c2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c0bc:	2301      	movs	r3, #1
 800c0be:	617b      	str	r3, [r7, #20]
 800c0c0:	e01b      	b.n	800c0fa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c0c2:	4b10      	ldr	r3, [pc, #64]	@ (800c104 <prvInsertTimerInActiveList+0x7c>)
 800c0c4:	681a      	ldr	r2, [r3, #0]
 800c0c6:	68fb      	ldr	r3, [r7, #12]
 800c0c8:	3304      	adds	r3, #4
 800c0ca:	4619      	mov	r1, r3
 800c0cc:	4610      	mov	r0, r2
 800c0ce:	f7fe f9be 	bl	800a44e <vListInsert>
 800c0d2:	e012      	b.n	800c0fa <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c0d4:	687a      	ldr	r2, [r7, #4]
 800c0d6:	683b      	ldr	r3, [r7, #0]
 800c0d8:	429a      	cmp	r2, r3
 800c0da:	d206      	bcs.n	800c0ea <prvInsertTimerInActiveList+0x62>
 800c0dc:	68ba      	ldr	r2, [r7, #8]
 800c0de:	683b      	ldr	r3, [r7, #0]
 800c0e0:	429a      	cmp	r2, r3
 800c0e2:	d302      	bcc.n	800c0ea <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c0e4:	2301      	movs	r3, #1
 800c0e6:	617b      	str	r3, [r7, #20]
 800c0e8:	e007      	b.n	800c0fa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c0ea:	4b07      	ldr	r3, [pc, #28]	@ (800c108 <prvInsertTimerInActiveList+0x80>)
 800c0ec:	681a      	ldr	r2, [r3, #0]
 800c0ee:	68fb      	ldr	r3, [r7, #12]
 800c0f0:	3304      	adds	r3, #4
 800c0f2:	4619      	mov	r1, r3
 800c0f4:	4610      	mov	r0, r2
 800c0f6:	f7fe f9aa 	bl	800a44e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c0fa:	697b      	ldr	r3, [r7, #20]
}
 800c0fc:	4618      	mov	r0, r3
 800c0fe:	3718      	adds	r7, #24
 800c100:	46bd      	mov	sp, r7
 800c102:	bd80      	pop	{r7, pc}
 800c104:	20005e04 	.word	0x20005e04
 800c108:	20005e00 	.word	0x20005e00

0800c10c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c10c:	b580      	push	{r7, lr}
 800c10e:	b08e      	sub	sp, #56	@ 0x38
 800c110:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c112:	e0ce      	b.n	800c2b2 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	2b00      	cmp	r3, #0
 800c118:	da19      	bge.n	800c14e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c11a:	1d3b      	adds	r3, r7, #4
 800c11c:	3304      	adds	r3, #4
 800c11e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c120:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c122:	2b00      	cmp	r3, #0
 800c124:	d10b      	bne.n	800c13e <prvProcessReceivedCommands+0x32>
	__asm volatile
 800c126:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c12a:	f383 8811 	msr	BASEPRI, r3
 800c12e:	f3bf 8f6f 	isb	sy
 800c132:	f3bf 8f4f 	dsb	sy
 800c136:	61fb      	str	r3, [r7, #28]
}
 800c138:	bf00      	nop
 800c13a:	bf00      	nop
 800c13c:	e7fd      	b.n	800c13a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c13e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c140:	681b      	ldr	r3, [r3, #0]
 800c142:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c144:	6850      	ldr	r0, [r2, #4]
 800c146:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c148:	6892      	ldr	r2, [r2, #8]
 800c14a:	4611      	mov	r1, r2
 800c14c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	2b00      	cmp	r3, #0
 800c152:	f2c0 80ae 	blt.w	800c2b2 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c156:	68fb      	ldr	r3, [r7, #12]
 800c158:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c15a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c15c:	695b      	ldr	r3, [r3, #20]
 800c15e:	2b00      	cmp	r3, #0
 800c160:	d004      	beq.n	800c16c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c162:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c164:	3304      	adds	r3, #4
 800c166:	4618      	mov	r0, r3
 800c168:	f7fe f9aa 	bl	800a4c0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c16c:	463b      	mov	r3, r7
 800c16e:	4618      	mov	r0, r3
 800c170:	f7ff ff6a 	bl	800c048 <prvSampleTimeNow>
 800c174:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	2b09      	cmp	r3, #9
 800c17a:	f200 8097 	bhi.w	800c2ac <prvProcessReceivedCommands+0x1a0>
 800c17e:	a201      	add	r2, pc, #4	@ (adr r2, 800c184 <prvProcessReceivedCommands+0x78>)
 800c180:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c184:	0800c1ad 	.word	0x0800c1ad
 800c188:	0800c1ad 	.word	0x0800c1ad
 800c18c:	0800c1ad 	.word	0x0800c1ad
 800c190:	0800c223 	.word	0x0800c223
 800c194:	0800c237 	.word	0x0800c237
 800c198:	0800c283 	.word	0x0800c283
 800c19c:	0800c1ad 	.word	0x0800c1ad
 800c1a0:	0800c1ad 	.word	0x0800c1ad
 800c1a4:	0800c223 	.word	0x0800c223
 800c1a8:	0800c237 	.word	0x0800c237
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c1ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c1ae:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c1b2:	f043 0301 	orr.w	r3, r3, #1
 800c1b6:	b2da      	uxtb	r2, r3
 800c1b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c1ba:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c1be:	68ba      	ldr	r2, [r7, #8]
 800c1c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c1c2:	699b      	ldr	r3, [r3, #24]
 800c1c4:	18d1      	adds	r1, r2, r3
 800c1c6:	68bb      	ldr	r3, [r7, #8]
 800c1c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c1ca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c1cc:	f7ff ff5c 	bl	800c088 <prvInsertTimerInActiveList>
 800c1d0:	4603      	mov	r3, r0
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	d06c      	beq.n	800c2b0 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c1d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c1d8:	6a1b      	ldr	r3, [r3, #32]
 800c1da:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c1dc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c1de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c1e0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c1e4:	f003 0304 	and.w	r3, r3, #4
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d061      	beq.n	800c2b0 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c1ec:	68ba      	ldr	r2, [r7, #8]
 800c1ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c1f0:	699b      	ldr	r3, [r3, #24]
 800c1f2:	441a      	add	r2, r3
 800c1f4:	2300      	movs	r3, #0
 800c1f6:	9300      	str	r3, [sp, #0]
 800c1f8:	2300      	movs	r3, #0
 800c1fa:	2100      	movs	r1, #0
 800c1fc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c1fe:	f7ff fe01 	bl	800be04 <xTimerGenericCommand>
 800c202:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c204:	6a3b      	ldr	r3, [r7, #32]
 800c206:	2b00      	cmp	r3, #0
 800c208:	d152      	bne.n	800c2b0 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800c20a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c20e:	f383 8811 	msr	BASEPRI, r3
 800c212:	f3bf 8f6f 	isb	sy
 800c216:	f3bf 8f4f 	dsb	sy
 800c21a:	61bb      	str	r3, [r7, #24]
}
 800c21c:	bf00      	nop
 800c21e:	bf00      	nop
 800c220:	e7fd      	b.n	800c21e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c222:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c224:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c228:	f023 0301 	bic.w	r3, r3, #1
 800c22c:	b2da      	uxtb	r2, r3
 800c22e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c230:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800c234:	e03d      	b.n	800c2b2 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c236:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c238:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c23c:	f043 0301 	orr.w	r3, r3, #1
 800c240:	b2da      	uxtb	r2, r3
 800c242:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c244:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c248:	68ba      	ldr	r2, [r7, #8]
 800c24a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c24c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c24e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c250:	699b      	ldr	r3, [r3, #24]
 800c252:	2b00      	cmp	r3, #0
 800c254:	d10b      	bne.n	800c26e <prvProcessReceivedCommands+0x162>
	__asm volatile
 800c256:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c25a:	f383 8811 	msr	BASEPRI, r3
 800c25e:	f3bf 8f6f 	isb	sy
 800c262:	f3bf 8f4f 	dsb	sy
 800c266:	617b      	str	r3, [r7, #20]
}
 800c268:	bf00      	nop
 800c26a:	bf00      	nop
 800c26c:	e7fd      	b.n	800c26a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c26e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c270:	699a      	ldr	r2, [r3, #24]
 800c272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c274:	18d1      	adds	r1, r2, r3
 800c276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c278:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c27a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c27c:	f7ff ff04 	bl	800c088 <prvInsertTimerInActiveList>
					break;
 800c280:	e017      	b.n	800c2b2 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c282:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c284:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c288:	f003 0302 	and.w	r3, r3, #2
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	d103      	bne.n	800c298 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800c290:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c292:	f000 fbe9 	bl	800ca68 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c296:	e00c      	b.n	800c2b2 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c298:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c29a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c29e:	f023 0301 	bic.w	r3, r3, #1
 800c2a2:	b2da      	uxtb	r2, r3
 800c2a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c2a6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800c2aa:	e002      	b.n	800c2b2 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800c2ac:	bf00      	nop
 800c2ae:	e000      	b.n	800c2b2 <prvProcessReceivedCommands+0x1a6>
					break;
 800c2b0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c2b2:	4b08      	ldr	r3, [pc, #32]	@ (800c2d4 <prvProcessReceivedCommands+0x1c8>)
 800c2b4:	681b      	ldr	r3, [r3, #0]
 800c2b6:	1d39      	adds	r1, r7, #4
 800c2b8:	2200      	movs	r2, #0
 800c2ba:	4618      	mov	r0, r3
 800c2bc:	f7fe fbd4 	bl	800aa68 <xQueueReceive>
 800c2c0:	4603      	mov	r3, r0
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	f47f af26 	bne.w	800c114 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800c2c8:	bf00      	nop
 800c2ca:	bf00      	nop
 800c2cc:	3730      	adds	r7, #48	@ 0x30
 800c2ce:	46bd      	mov	sp, r7
 800c2d0:	bd80      	pop	{r7, pc}
 800c2d2:	bf00      	nop
 800c2d4:	20005e08 	.word	0x20005e08

0800c2d8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c2d8:	b580      	push	{r7, lr}
 800c2da:	b088      	sub	sp, #32
 800c2dc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c2de:	e049      	b.n	800c374 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c2e0:	4b2e      	ldr	r3, [pc, #184]	@ (800c39c <prvSwitchTimerLists+0xc4>)
 800c2e2:	681b      	ldr	r3, [r3, #0]
 800c2e4:	68db      	ldr	r3, [r3, #12]
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c2ea:	4b2c      	ldr	r3, [pc, #176]	@ (800c39c <prvSwitchTimerLists+0xc4>)
 800c2ec:	681b      	ldr	r3, [r3, #0]
 800c2ee:	68db      	ldr	r3, [r3, #12]
 800c2f0:	68db      	ldr	r3, [r3, #12]
 800c2f2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c2f4:	68fb      	ldr	r3, [r7, #12]
 800c2f6:	3304      	adds	r3, #4
 800c2f8:	4618      	mov	r0, r3
 800c2fa:	f7fe f8e1 	bl	800a4c0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c2fe:	68fb      	ldr	r3, [r7, #12]
 800c300:	6a1b      	ldr	r3, [r3, #32]
 800c302:	68f8      	ldr	r0, [r7, #12]
 800c304:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c306:	68fb      	ldr	r3, [r7, #12]
 800c308:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c30c:	f003 0304 	and.w	r3, r3, #4
 800c310:	2b00      	cmp	r3, #0
 800c312:	d02f      	beq.n	800c374 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c314:	68fb      	ldr	r3, [r7, #12]
 800c316:	699b      	ldr	r3, [r3, #24]
 800c318:	693a      	ldr	r2, [r7, #16]
 800c31a:	4413      	add	r3, r2
 800c31c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c31e:	68ba      	ldr	r2, [r7, #8]
 800c320:	693b      	ldr	r3, [r7, #16]
 800c322:	429a      	cmp	r2, r3
 800c324:	d90e      	bls.n	800c344 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c326:	68fb      	ldr	r3, [r7, #12]
 800c328:	68ba      	ldr	r2, [r7, #8]
 800c32a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c32c:	68fb      	ldr	r3, [r7, #12]
 800c32e:	68fa      	ldr	r2, [r7, #12]
 800c330:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c332:	4b1a      	ldr	r3, [pc, #104]	@ (800c39c <prvSwitchTimerLists+0xc4>)
 800c334:	681a      	ldr	r2, [r3, #0]
 800c336:	68fb      	ldr	r3, [r7, #12]
 800c338:	3304      	adds	r3, #4
 800c33a:	4619      	mov	r1, r3
 800c33c:	4610      	mov	r0, r2
 800c33e:	f7fe f886 	bl	800a44e <vListInsert>
 800c342:	e017      	b.n	800c374 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c344:	2300      	movs	r3, #0
 800c346:	9300      	str	r3, [sp, #0]
 800c348:	2300      	movs	r3, #0
 800c34a:	693a      	ldr	r2, [r7, #16]
 800c34c:	2100      	movs	r1, #0
 800c34e:	68f8      	ldr	r0, [r7, #12]
 800c350:	f7ff fd58 	bl	800be04 <xTimerGenericCommand>
 800c354:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	2b00      	cmp	r3, #0
 800c35a:	d10b      	bne.n	800c374 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800c35c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c360:	f383 8811 	msr	BASEPRI, r3
 800c364:	f3bf 8f6f 	isb	sy
 800c368:	f3bf 8f4f 	dsb	sy
 800c36c:	603b      	str	r3, [r7, #0]
}
 800c36e:	bf00      	nop
 800c370:	bf00      	nop
 800c372:	e7fd      	b.n	800c370 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c374:	4b09      	ldr	r3, [pc, #36]	@ (800c39c <prvSwitchTimerLists+0xc4>)
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	d1b0      	bne.n	800c2e0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c37e:	4b07      	ldr	r3, [pc, #28]	@ (800c39c <prvSwitchTimerLists+0xc4>)
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c384:	4b06      	ldr	r3, [pc, #24]	@ (800c3a0 <prvSwitchTimerLists+0xc8>)
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	4a04      	ldr	r2, [pc, #16]	@ (800c39c <prvSwitchTimerLists+0xc4>)
 800c38a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c38c:	4a04      	ldr	r2, [pc, #16]	@ (800c3a0 <prvSwitchTimerLists+0xc8>)
 800c38e:	697b      	ldr	r3, [r7, #20]
 800c390:	6013      	str	r3, [r2, #0]
}
 800c392:	bf00      	nop
 800c394:	3718      	adds	r7, #24
 800c396:	46bd      	mov	sp, r7
 800c398:	bd80      	pop	{r7, pc}
 800c39a:	bf00      	nop
 800c39c:	20005e00 	.word	0x20005e00
 800c3a0:	20005e04 	.word	0x20005e04

0800c3a4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c3a4:	b580      	push	{r7, lr}
 800c3a6:	b082      	sub	sp, #8
 800c3a8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c3aa:	f000 f96d 	bl	800c688 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c3ae:	4b15      	ldr	r3, [pc, #84]	@ (800c404 <prvCheckForValidListAndQueue+0x60>)
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	d120      	bne.n	800c3f8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c3b6:	4814      	ldr	r0, [pc, #80]	@ (800c408 <prvCheckForValidListAndQueue+0x64>)
 800c3b8:	f7fd fff8 	bl	800a3ac <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c3bc:	4813      	ldr	r0, [pc, #76]	@ (800c40c <prvCheckForValidListAndQueue+0x68>)
 800c3be:	f7fd fff5 	bl	800a3ac <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c3c2:	4b13      	ldr	r3, [pc, #76]	@ (800c410 <prvCheckForValidListAndQueue+0x6c>)
 800c3c4:	4a10      	ldr	r2, [pc, #64]	@ (800c408 <prvCheckForValidListAndQueue+0x64>)
 800c3c6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c3c8:	4b12      	ldr	r3, [pc, #72]	@ (800c414 <prvCheckForValidListAndQueue+0x70>)
 800c3ca:	4a10      	ldr	r2, [pc, #64]	@ (800c40c <prvCheckForValidListAndQueue+0x68>)
 800c3cc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c3ce:	2300      	movs	r3, #0
 800c3d0:	9300      	str	r3, [sp, #0]
 800c3d2:	4b11      	ldr	r3, [pc, #68]	@ (800c418 <prvCheckForValidListAndQueue+0x74>)
 800c3d4:	4a11      	ldr	r2, [pc, #68]	@ (800c41c <prvCheckForValidListAndQueue+0x78>)
 800c3d6:	2110      	movs	r1, #16
 800c3d8:	200a      	movs	r0, #10
 800c3da:	f7fe f905 	bl	800a5e8 <xQueueGenericCreateStatic>
 800c3de:	4603      	mov	r3, r0
 800c3e0:	4a08      	ldr	r2, [pc, #32]	@ (800c404 <prvCheckForValidListAndQueue+0x60>)
 800c3e2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c3e4:	4b07      	ldr	r3, [pc, #28]	@ (800c404 <prvCheckForValidListAndQueue+0x60>)
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d005      	beq.n	800c3f8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c3ec:	4b05      	ldr	r3, [pc, #20]	@ (800c404 <prvCheckForValidListAndQueue+0x60>)
 800c3ee:	681b      	ldr	r3, [r3, #0]
 800c3f0:	490b      	ldr	r1, [pc, #44]	@ (800c420 <prvCheckForValidListAndQueue+0x7c>)
 800c3f2:	4618      	mov	r0, r3
 800c3f4:	f7fe fd2a 	bl	800ae4c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c3f8:	f000 f978 	bl	800c6ec <vPortExitCritical>
}
 800c3fc:	bf00      	nop
 800c3fe:	46bd      	mov	sp, r7
 800c400:	bd80      	pop	{r7, pc}
 800c402:	bf00      	nop
 800c404:	20005e08 	.word	0x20005e08
 800c408:	20005dd8 	.word	0x20005dd8
 800c40c:	20005dec 	.word	0x20005dec
 800c410:	20005e00 	.word	0x20005e00
 800c414:	20005e04 	.word	0x20005e04
 800c418:	20005eb4 	.word	0x20005eb4
 800c41c:	20005e14 	.word	0x20005e14
 800c420:	0801d4f0 	.word	0x0801d4f0

0800c424 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c424:	b480      	push	{r7}
 800c426:	b085      	sub	sp, #20
 800c428:	af00      	add	r7, sp, #0
 800c42a:	60f8      	str	r0, [r7, #12]
 800c42c:	60b9      	str	r1, [r7, #8]
 800c42e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c430:	68fb      	ldr	r3, [r7, #12]
 800c432:	3b04      	subs	r3, #4
 800c434:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c436:	68fb      	ldr	r3, [r7, #12]
 800c438:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800c43c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c43e:	68fb      	ldr	r3, [r7, #12]
 800c440:	3b04      	subs	r3, #4
 800c442:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c444:	68bb      	ldr	r3, [r7, #8]
 800c446:	f023 0201 	bic.w	r2, r3, #1
 800c44a:	68fb      	ldr	r3, [r7, #12]
 800c44c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c44e:	68fb      	ldr	r3, [r7, #12]
 800c450:	3b04      	subs	r3, #4
 800c452:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c454:	4a0c      	ldr	r2, [pc, #48]	@ (800c488 <pxPortInitialiseStack+0x64>)
 800c456:	68fb      	ldr	r3, [r7, #12]
 800c458:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c45a:	68fb      	ldr	r3, [r7, #12]
 800c45c:	3b14      	subs	r3, #20
 800c45e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c460:	687a      	ldr	r2, [r7, #4]
 800c462:	68fb      	ldr	r3, [r7, #12]
 800c464:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c466:	68fb      	ldr	r3, [r7, #12]
 800c468:	3b04      	subs	r3, #4
 800c46a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c46c:	68fb      	ldr	r3, [r7, #12]
 800c46e:	f06f 0202 	mvn.w	r2, #2
 800c472:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c474:	68fb      	ldr	r3, [r7, #12]
 800c476:	3b20      	subs	r3, #32
 800c478:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c47a:	68fb      	ldr	r3, [r7, #12]
}
 800c47c:	4618      	mov	r0, r3
 800c47e:	3714      	adds	r7, #20
 800c480:	46bd      	mov	sp, r7
 800c482:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c486:	4770      	bx	lr
 800c488:	0800c48d 	.word	0x0800c48d

0800c48c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c48c:	b480      	push	{r7}
 800c48e:	b085      	sub	sp, #20
 800c490:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c492:	2300      	movs	r3, #0
 800c494:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c496:	4b13      	ldr	r3, [pc, #76]	@ (800c4e4 <prvTaskExitError+0x58>)
 800c498:	681b      	ldr	r3, [r3, #0]
 800c49a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c49e:	d00b      	beq.n	800c4b8 <prvTaskExitError+0x2c>
	__asm volatile
 800c4a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c4a4:	f383 8811 	msr	BASEPRI, r3
 800c4a8:	f3bf 8f6f 	isb	sy
 800c4ac:	f3bf 8f4f 	dsb	sy
 800c4b0:	60fb      	str	r3, [r7, #12]
}
 800c4b2:	bf00      	nop
 800c4b4:	bf00      	nop
 800c4b6:	e7fd      	b.n	800c4b4 <prvTaskExitError+0x28>
	__asm volatile
 800c4b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c4bc:	f383 8811 	msr	BASEPRI, r3
 800c4c0:	f3bf 8f6f 	isb	sy
 800c4c4:	f3bf 8f4f 	dsb	sy
 800c4c8:	60bb      	str	r3, [r7, #8]
}
 800c4ca:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c4cc:	bf00      	nop
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	d0fc      	beq.n	800c4ce <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c4d4:	bf00      	nop
 800c4d6:	bf00      	nop
 800c4d8:	3714      	adds	r7, #20
 800c4da:	46bd      	mov	sp, r7
 800c4dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4e0:	4770      	bx	lr
 800c4e2:	bf00      	nop
 800c4e4:	20000010 	.word	0x20000010
	...

0800c4f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c4f0:	4b07      	ldr	r3, [pc, #28]	@ (800c510 <pxCurrentTCBConst2>)
 800c4f2:	6819      	ldr	r1, [r3, #0]
 800c4f4:	6808      	ldr	r0, [r1, #0]
 800c4f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4fa:	f380 8809 	msr	PSP, r0
 800c4fe:	f3bf 8f6f 	isb	sy
 800c502:	f04f 0000 	mov.w	r0, #0
 800c506:	f380 8811 	msr	BASEPRI, r0
 800c50a:	4770      	bx	lr
 800c50c:	f3af 8000 	nop.w

0800c510 <pxCurrentTCBConst2>:
 800c510:	200058d8 	.word	0x200058d8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c514:	bf00      	nop
 800c516:	bf00      	nop

0800c518 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c518:	4808      	ldr	r0, [pc, #32]	@ (800c53c <prvPortStartFirstTask+0x24>)
 800c51a:	6800      	ldr	r0, [r0, #0]
 800c51c:	6800      	ldr	r0, [r0, #0]
 800c51e:	f380 8808 	msr	MSP, r0
 800c522:	f04f 0000 	mov.w	r0, #0
 800c526:	f380 8814 	msr	CONTROL, r0
 800c52a:	b662      	cpsie	i
 800c52c:	b661      	cpsie	f
 800c52e:	f3bf 8f4f 	dsb	sy
 800c532:	f3bf 8f6f 	isb	sy
 800c536:	df00      	svc	0
 800c538:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c53a:	bf00      	nop
 800c53c:	e000ed08 	.word	0xe000ed08

0800c540 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c540:	b580      	push	{r7, lr}
 800c542:	b086      	sub	sp, #24
 800c544:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c546:	4b47      	ldr	r3, [pc, #284]	@ (800c664 <xPortStartScheduler+0x124>)
 800c548:	681b      	ldr	r3, [r3, #0]
 800c54a:	4a47      	ldr	r2, [pc, #284]	@ (800c668 <xPortStartScheduler+0x128>)
 800c54c:	4293      	cmp	r3, r2
 800c54e:	d10b      	bne.n	800c568 <xPortStartScheduler+0x28>
	__asm volatile
 800c550:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c554:	f383 8811 	msr	BASEPRI, r3
 800c558:	f3bf 8f6f 	isb	sy
 800c55c:	f3bf 8f4f 	dsb	sy
 800c560:	60fb      	str	r3, [r7, #12]
}
 800c562:	bf00      	nop
 800c564:	bf00      	nop
 800c566:	e7fd      	b.n	800c564 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c568:	4b3e      	ldr	r3, [pc, #248]	@ (800c664 <xPortStartScheduler+0x124>)
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	4a3f      	ldr	r2, [pc, #252]	@ (800c66c <xPortStartScheduler+0x12c>)
 800c56e:	4293      	cmp	r3, r2
 800c570:	d10b      	bne.n	800c58a <xPortStartScheduler+0x4a>
	__asm volatile
 800c572:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c576:	f383 8811 	msr	BASEPRI, r3
 800c57a:	f3bf 8f6f 	isb	sy
 800c57e:	f3bf 8f4f 	dsb	sy
 800c582:	613b      	str	r3, [r7, #16]
}
 800c584:	bf00      	nop
 800c586:	bf00      	nop
 800c588:	e7fd      	b.n	800c586 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c58a:	4b39      	ldr	r3, [pc, #228]	@ (800c670 <xPortStartScheduler+0x130>)
 800c58c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c58e:	697b      	ldr	r3, [r7, #20]
 800c590:	781b      	ldrb	r3, [r3, #0]
 800c592:	b2db      	uxtb	r3, r3
 800c594:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c596:	697b      	ldr	r3, [r7, #20]
 800c598:	22ff      	movs	r2, #255	@ 0xff
 800c59a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c59c:	697b      	ldr	r3, [r7, #20]
 800c59e:	781b      	ldrb	r3, [r3, #0]
 800c5a0:	b2db      	uxtb	r3, r3
 800c5a2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c5a4:	78fb      	ldrb	r3, [r7, #3]
 800c5a6:	b2db      	uxtb	r3, r3
 800c5a8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800c5ac:	b2da      	uxtb	r2, r3
 800c5ae:	4b31      	ldr	r3, [pc, #196]	@ (800c674 <xPortStartScheduler+0x134>)
 800c5b0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c5b2:	4b31      	ldr	r3, [pc, #196]	@ (800c678 <xPortStartScheduler+0x138>)
 800c5b4:	2207      	movs	r2, #7
 800c5b6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c5b8:	e009      	b.n	800c5ce <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800c5ba:	4b2f      	ldr	r3, [pc, #188]	@ (800c678 <xPortStartScheduler+0x138>)
 800c5bc:	681b      	ldr	r3, [r3, #0]
 800c5be:	3b01      	subs	r3, #1
 800c5c0:	4a2d      	ldr	r2, [pc, #180]	@ (800c678 <xPortStartScheduler+0x138>)
 800c5c2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c5c4:	78fb      	ldrb	r3, [r7, #3]
 800c5c6:	b2db      	uxtb	r3, r3
 800c5c8:	005b      	lsls	r3, r3, #1
 800c5ca:	b2db      	uxtb	r3, r3
 800c5cc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c5ce:	78fb      	ldrb	r3, [r7, #3]
 800c5d0:	b2db      	uxtb	r3, r3
 800c5d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c5d6:	2b80      	cmp	r3, #128	@ 0x80
 800c5d8:	d0ef      	beq.n	800c5ba <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c5da:	4b27      	ldr	r3, [pc, #156]	@ (800c678 <xPortStartScheduler+0x138>)
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	f1c3 0307 	rsb	r3, r3, #7
 800c5e2:	2b04      	cmp	r3, #4
 800c5e4:	d00b      	beq.n	800c5fe <xPortStartScheduler+0xbe>
	__asm volatile
 800c5e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c5ea:	f383 8811 	msr	BASEPRI, r3
 800c5ee:	f3bf 8f6f 	isb	sy
 800c5f2:	f3bf 8f4f 	dsb	sy
 800c5f6:	60bb      	str	r3, [r7, #8]
}
 800c5f8:	bf00      	nop
 800c5fa:	bf00      	nop
 800c5fc:	e7fd      	b.n	800c5fa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c5fe:	4b1e      	ldr	r3, [pc, #120]	@ (800c678 <xPortStartScheduler+0x138>)
 800c600:	681b      	ldr	r3, [r3, #0]
 800c602:	021b      	lsls	r3, r3, #8
 800c604:	4a1c      	ldr	r2, [pc, #112]	@ (800c678 <xPortStartScheduler+0x138>)
 800c606:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c608:	4b1b      	ldr	r3, [pc, #108]	@ (800c678 <xPortStartScheduler+0x138>)
 800c60a:	681b      	ldr	r3, [r3, #0]
 800c60c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800c610:	4a19      	ldr	r2, [pc, #100]	@ (800c678 <xPortStartScheduler+0x138>)
 800c612:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	b2da      	uxtb	r2, r3
 800c618:	697b      	ldr	r3, [r7, #20]
 800c61a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c61c:	4b17      	ldr	r3, [pc, #92]	@ (800c67c <xPortStartScheduler+0x13c>)
 800c61e:	681b      	ldr	r3, [r3, #0]
 800c620:	4a16      	ldr	r2, [pc, #88]	@ (800c67c <xPortStartScheduler+0x13c>)
 800c622:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800c626:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c628:	4b14      	ldr	r3, [pc, #80]	@ (800c67c <xPortStartScheduler+0x13c>)
 800c62a:	681b      	ldr	r3, [r3, #0]
 800c62c:	4a13      	ldr	r2, [pc, #76]	@ (800c67c <xPortStartScheduler+0x13c>)
 800c62e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800c632:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c634:	f000 f8da 	bl	800c7ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c638:	4b11      	ldr	r3, [pc, #68]	@ (800c680 <xPortStartScheduler+0x140>)
 800c63a:	2200      	movs	r2, #0
 800c63c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c63e:	f000 f8f9 	bl	800c834 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c642:	4b10      	ldr	r3, [pc, #64]	@ (800c684 <xPortStartScheduler+0x144>)
 800c644:	681b      	ldr	r3, [r3, #0]
 800c646:	4a0f      	ldr	r2, [pc, #60]	@ (800c684 <xPortStartScheduler+0x144>)
 800c648:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800c64c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c64e:	f7ff ff63 	bl	800c518 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c652:	f7ff f813 	bl	800b67c <vTaskSwitchContext>
	prvTaskExitError();
 800c656:	f7ff ff19 	bl	800c48c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c65a:	2300      	movs	r3, #0
}
 800c65c:	4618      	mov	r0, r3
 800c65e:	3718      	adds	r7, #24
 800c660:	46bd      	mov	sp, r7
 800c662:	bd80      	pop	{r7, pc}
 800c664:	e000ed00 	.word	0xe000ed00
 800c668:	410fc271 	.word	0x410fc271
 800c66c:	410fc270 	.word	0x410fc270
 800c670:	e000e400 	.word	0xe000e400
 800c674:	20005f04 	.word	0x20005f04
 800c678:	20005f08 	.word	0x20005f08
 800c67c:	e000ed20 	.word	0xe000ed20
 800c680:	20000010 	.word	0x20000010
 800c684:	e000ef34 	.word	0xe000ef34

0800c688 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c688:	b480      	push	{r7}
 800c68a:	b083      	sub	sp, #12
 800c68c:	af00      	add	r7, sp, #0
	__asm volatile
 800c68e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c692:	f383 8811 	msr	BASEPRI, r3
 800c696:	f3bf 8f6f 	isb	sy
 800c69a:	f3bf 8f4f 	dsb	sy
 800c69e:	607b      	str	r3, [r7, #4]
}
 800c6a0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c6a2:	4b10      	ldr	r3, [pc, #64]	@ (800c6e4 <vPortEnterCritical+0x5c>)
 800c6a4:	681b      	ldr	r3, [r3, #0]
 800c6a6:	3301      	adds	r3, #1
 800c6a8:	4a0e      	ldr	r2, [pc, #56]	@ (800c6e4 <vPortEnterCritical+0x5c>)
 800c6aa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c6ac:	4b0d      	ldr	r3, [pc, #52]	@ (800c6e4 <vPortEnterCritical+0x5c>)
 800c6ae:	681b      	ldr	r3, [r3, #0]
 800c6b0:	2b01      	cmp	r3, #1
 800c6b2:	d110      	bne.n	800c6d6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c6b4:	4b0c      	ldr	r3, [pc, #48]	@ (800c6e8 <vPortEnterCritical+0x60>)
 800c6b6:	681b      	ldr	r3, [r3, #0]
 800c6b8:	b2db      	uxtb	r3, r3
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	d00b      	beq.n	800c6d6 <vPortEnterCritical+0x4e>
	__asm volatile
 800c6be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c6c2:	f383 8811 	msr	BASEPRI, r3
 800c6c6:	f3bf 8f6f 	isb	sy
 800c6ca:	f3bf 8f4f 	dsb	sy
 800c6ce:	603b      	str	r3, [r7, #0]
}
 800c6d0:	bf00      	nop
 800c6d2:	bf00      	nop
 800c6d4:	e7fd      	b.n	800c6d2 <vPortEnterCritical+0x4a>
	}
}
 800c6d6:	bf00      	nop
 800c6d8:	370c      	adds	r7, #12
 800c6da:	46bd      	mov	sp, r7
 800c6dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6e0:	4770      	bx	lr
 800c6e2:	bf00      	nop
 800c6e4:	20000010 	.word	0x20000010
 800c6e8:	e000ed04 	.word	0xe000ed04

0800c6ec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c6ec:	b480      	push	{r7}
 800c6ee:	b083      	sub	sp, #12
 800c6f0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c6f2:	4b12      	ldr	r3, [pc, #72]	@ (800c73c <vPortExitCritical+0x50>)
 800c6f4:	681b      	ldr	r3, [r3, #0]
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	d10b      	bne.n	800c712 <vPortExitCritical+0x26>
	__asm volatile
 800c6fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c6fe:	f383 8811 	msr	BASEPRI, r3
 800c702:	f3bf 8f6f 	isb	sy
 800c706:	f3bf 8f4f 	dsb	sy
 800c70a:	607b      	str	r3, [r7, #4]
}
 800c70c:	bf00      	nop
 800c70e:	bf00      	nop
 800c710:	e7fd      	b.n	800c70e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c712:	4b0a      	ldr	r3, [pc, #40]	@ (800c73c <vPortExitCritical+0x50>)
 800c714:	681b      	ldr	r3, [r3, #0]
 800c716:	3b01      	subs	r3, #1
 800c718:	4a08      	ldr	r2, [pc, #32]	@ (800c73c <vPortExitCritical+0x50>)
 800c71a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c71c:	4b07      	ldr	r3, [pc, #28]	@ (800c73c <vPortExitCritical+0x50>)
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	2b00      	cmp	r3, #0
 800c722:	d105      	bne.n	800c730 <vPortExitCritical+0x44>
 800c724:	2300      	movs	r3, #0
 800c726:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c728:	683b      	ldr	r3, [r7, #0]
 800c72a:	f383 8811 	msr	BASEPRI, r3
}
 800c72e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c730:	bf00      	nop
 800c732:	370c      	adds	r7, #12
 800c734:	46bd      	mov	sp, r7
 800c736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c73a:	4770      	bx	lr
 800c73c:	20000010 	.word	0x20000010

0800c740 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c740:	f3ef 8009 	mrs	r0, PSP
 800c744:	f3bf 8f6f 	isb	sy
 800c748:	4b15      	ldr	r3, [pc, #84]	@ (800c7a0 <pxCurrentTCBConst>)
 800c74a:	681a      	ldr	r2, [r3, #0]
 800c74c:	f01e 0f10 	tst.w	lr, #16
 800c750:	bf08      	it	eq
 800c752:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c756:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c75a:	6010      	str	r0, [r2, #0]
 800c75c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c760:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800c764:	f380 8811 	msr	BASEPRI, r0
 800c768:	f3bf 8f4f 	dsb	sy
 800c76c:	f3bf 8f6f 	isb	sy
 800c770:	f7fe ff84 	bl	800b67c <vTaskSwitchContext>
 800c774:	f04f 0000 	mov.w	r0, #0
 800c778:	f380 8811 	msr	BASEPRI, r0
 800c77c:	bc09      	pop	{r0, r3}
 800c77e:	6819      	ldr	r1, [r3, #0]
 800c780:	6808      	ldr	r0, [r1, #0]
 800c782:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c786:	f01e 0f10 	tst.w	lr, #16
 800c78a:	bf08      	it	eq
 800c78c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c790:	f380 8809 	msr	PSP, r0
 800c794:	f3bf 8f6f 	isb	sy
 800c798:	4770      	bx	lr
 800c79a:	bf00      	nop
 800c79c:	f3af 8000 	nop.w

0800c7a0 <pxCurrentTCBConst>:
 800c7a0:	200058d8 	.word	0x200058d8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c7a4:	bf00      	nop
 800c7a6:	bf00      	nop

0800c7a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c7a8:	b580      	push	{r7, lr}
 800c7aa:	b082      	sub	sp, #8
 800c7ac:	af00      	add	r7, sp, #0
	__asm volatile
 800c7ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c7b2:	f383 8811 	msr	BASEPRI, r3
 800c7b6:	f3bf 8f6f 	isb	sy
 800c7ba:	f3bf 8f4f 	dsb	sy
 800c7be:	607b      	str	r3, [r7, #4]
}
 800c7c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c7c2:	f7fe fea1 	bl	800b508 <xTaskIncrementTick>
 800c7c6:	4603      	mov	r3, r0
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	d003      	beq.n	800c7d4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c7cc:	4b06      	ldr	r3, [pc, #24]	@ (800c7e8 <xPortSysTickHandler+0x40>)
 800c7ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c7d2:	601a      	str	r2, [r3, #0]
 800c7d4:	2300      	movs	r3, #0
 800c7d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c7d8:	683b      	ldr	r3, [r7, #0]
 800c7da:	f383 8811 	msr	BASEPRI, r3
}
 800c7de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c7e0:	bf00      	nop
 800c7e2:	3708      	adds	r7, #8
 800c7e4:	46bd      	mov	sp, r7
 800c7e6:	bd80      	pop	{r7, pc}
 800c7e8:	e000ed04 	.word	0xe000ed04

0800c7ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c7ec:	b480      	push	{r7}
 800c7ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c7f0:	4b0b      	ldr	r3, [pc, #44]	@ (800c820 <vPortSetupTimerInterrupt+0x34>)
 800c7f2:	2200      	movs	r2, #0
 800c7f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c7f6:	4b0b      	ldr	r3, [pc, #44]	@ (800c824 <vPortSetupTimerInterrupt+0x38>)
 800c7f8:	2200      	movs	r2, #0
 800c7fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c7fc:	4b0a      	ldr	r3, [pc, #40]	@ (800c828 <vPortSetupTimerInterrupt+0x3c>)
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	4a0a      	ldr	r2, [pc, #40]	@ (800c82c <vPortSetupTimerInterrupt+0x40>)
 800c802:	fba2 2303 	umull	r2, r3, r2, r3
 800c806:	099b      	lsrs	r3, r3, #6
 800c808:	4a09      	ldr	r2, [pc, #36]	@ (800c830 <vPortSetupTimerInterrupt+0x44>)
 800c80a:	3b01      	subs	r3, #1
 800c80c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c80e:	4b04      	ldr	r3, [pc, #16]	@ (800c820 <vPortSetupTimerInterrupt+0x34>)
 800c810:	2207      	movs	r2, #7
 800c812:	601a      	str	r2, [r3, #0]
}
 800c814:	bf00      	nop
 800c816:	46bd      	mov	sp, r7
 800c818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c81c:	4770      	bx	lr
 800c81e:	bf00      	nop
 800c820:	e000e010 	.word	0xe000e010
 800c824:	e000e018 	.word	0xe000e018
 800c828:	20000004 	.word	0x20000004
 800c82c:	10624dd3 	.word	0x10624dd3
 800c830:	e000e014 	.word	0xe000e014

0800c834 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c834:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800c844 <vPortEnableVFP+0x10>
 800c838:	6801      	ldr	r1, [r0, #0]
 800c83a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800c83e:	6001      	str	r1, [r0, #0]
 800c840:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c842:	bf00      	nop
 800c844:	e000ed88 	.word	0xe000ed88

0800c848 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c848:	b480      	push	{r7}
 800c84a:	b085      	sub	sp, #20
 800c84c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c84e:	f3ef 8305 	mrs	r3, IPSR
 800c852:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c854:	68fb      	ldr	r3, [r7, #12]
 800c856:	2b0f      	cmp	r3, #15
 800c858:	d915      	bls.n	800c886 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c85a:	4a18      	ldr	r2, [pc, #96]	@ (800c8bc <vPortValidateInterruptPriority+0x74>)
 800c85c:	68fb      	ldr	r3, [r7, #12]
 800c85e:	4413      	add	r3, r2
 800c860:	781b      	ldrb	r3, [r3, #0]
 800c862:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c864:	4b16      	ldr	r3, [pc, #88]	@ (800c8c0 <vPortValidateInterruptPriority+0x78>)
 800c866:	781b      	ldrb	r3, [r3, #0]
 800c868:	7afa      	ldrb	r2, [r7, #11]
 800c86a:	429a      	cmp	r2, r3
 800c86c:	d20b      	bcs.n	800c886 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800c86e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c872:	f383 8811 	msr	BASEPRI, r3
 800c876:	f3bf 8f6f 	isb	sy
 800c87a:	f3bf 8f4f 	dsb	sy
 800c87e:	607b      	str	r3, [r7, #4]
}
 800c880:	bf00      	nop
 800c882:	bf00      	nop
 800c884:	e7fd      	b.n	800c882 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c886:	4b0f      	ldr	r3, [pc, #60]	@ (800c8c4 <vPortValidateInterruptPriority+0x7c>)
 800c888:	681b      	ldr	r3, [r3, #0]
 800c88a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800c88e:	4b0e      	ldr	r3, [pc, #56]	@ (800c8c8 <vPortValidateInterruptPriority+0x80>)
 800c890:	681b      	ldr	r3, [r3, #0]
 800c892:	429a      	cmp	r2, r3
 800c894:	d90b      	bls.n	800c8ae <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800c896:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c89a:	f383 8811 	msr	BASEPRI, r3
 800c89e:	f3bf 8f6f 	isb	sy
 800c8a2:	f3bf 8f4f 	dsb	sy
 800c8a6:	603b      	str	r3, [r7, #0]
}
 800c8a8:	bf00      	nop
 800c8aa:	bf00      	nop
 800c8ac:	e7fd      	b.n	800c8aa <vPortValidateInterruptPriority+0x62>
	}
 800c8ae:	bf00      	nop
 800c8b0:	3714      	adds	r7, #20
 800c8b2:	46bd      	mov	sp, r7
 800c8b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8b8:	4770      	bx	lr
 800c8ba:	bf00      	nop
 800c8bc:	e000e3f0 	.word	0xe000e3f0
 800c8c0:	20005f04 	.word	0x20005f04
 800c8c4:	e000ed0c 	.word	0xe000ed0c
 800c8c8:	20005f08 	.word	0x20005f08

0800c8cc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c8cc:	b580      	push	{r7, lr}
 800c8ce:	b08a      	sub	sp, #40	@ 0x28
 800c8d0:	af00      	add	r7, sp, #0
 800c8d2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c8d4:	2300      	movs	r3, #0
 800c8d6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c8d8:	f7fe fd5a 	bl	800b390 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c8dc:	4b5c      	ldr	r3, [pc, #368]	@ (800ca50 <pvPortMalloc+0x184>)
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	d101      	bne.n	800c8e8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c8e4:	f000 f924 	bl	800cb30 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c8e8:	4b5a      	ldr	r3, [pc, #360]	@ (800ca54 <pvPortMalloc+0x188>)
 800c8ea:	681a      	ldr	r2, [r3, #0]
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	4013      	ands	r3, r2
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	f040 8095 	bne.w	800ca20 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d01e      	beq.n	800c93a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800c8fc:	2208      	movs	r2, #8
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	4413      	add	r3, r2
 800c902:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	f003 0307 	and.w	r3, r3, #7
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	d015      	beq.n	800c93a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	f023 0307 	bic.w	r3, r3, #7
 800c914:	3308      	adds	r3, #8
 800c916:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	f003 0307 	and.w	r3, r3, #7
 800c91e:	2b00      	cmp	r3, #0
 800c920:	d00b      	beq.n	800c93a <pvPortMalloc+0x6e>
	__asm volatile
 800c922:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c926:	f383 8811 	msr	BASEPRI, r3
 800c92a:	f3bf 8f6f 	isb	sy
 800c92e:	f3bf 8f4f 	dsb	sy
 800c932:	617b      	str	r3, [r7, #20]
}
 800c934:	bf00      	nop
 800c936:	bf00      	nop
 800c938:	e7fd      	b.n	800c936 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	d06f      	beq.n	800ca20 <pvPortMalloc+0x154>
 800c940:	4b45      	ldr	r3, [pc, #276]	@ (800ca58 <pvPortMalloc+0x18c>)
 800c942:	681b      	ldr	r3, [r3, #0]
 800c944:	687a      	ldr	r2, [r7, #4]
 800c946:	429a      	cmp	r2, r3
 800c948:	d86a      	bhi.n	800ca20 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c94a:	4b44      	ldr	r3, [pc, #272]	@ (800ca5c <pvPortMalloc+0x190>)
 800c94c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c94e:	4b43      	ldr	r3, [pc, #268]	@ (800ca5c <pvPortMalloc+0x190>)
 800c950:	681b      	ldr	r3, [r3, #0]
 800c952:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c954:	e004      	b.n	800c960 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800c956:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c958:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c95a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c960:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c962:	685b      	ldr	r3, [r3, #4]
 800c964:	687a      	ldr	r2, [r7, #4]
 800c966:	429a      	cmp	r2, r3
 800c968:	d903      	bls.n	800c972 <pvPortMalloc+0xa6>
 800c96a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	2b00      	cmp	r3, #0
 800c970:	d1f1      	bne.n	800c956 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c972:	4b37      	ldr	r3, [pc, #220]	@ (800ca50 <pvPortMalloc+0x184>)
 800c974:	681b      	ldr	r3, [r3, #0]
 800c976:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c978:	429a      	cmp	r2, r3
 800c97a:	d051      	beq.n	800ca20 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c97c:	6a3b      	ldr	r3, [r7, #32]
 800c97e:	681b      	ldr	r3, [r3, #0]
 800c980:	2208      	movs	r2, #8
 800c982:	4413      	add	r3, r2
 800c984:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c986:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c988:	681a      	ldr	r2, [r3, #0]
 800c98a:	6a3b      	ldr	r3, [r7, #32]
 800c98c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c98e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c990:	685a      	ldr	r2, [r3, #4]
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	1ad2      	subs	r2, r2, r3
 800c996:	2308      	movs	r3, #8
 800c998:	005b      	lsls	r3, r3, #1
 800c99a:	429a      	cmp	r2, r3
 800c99c:	d920      	bls.n	800c9e0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c99e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	4413      	add	r3, r2
 800c9a4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c9a6:	69bb      	ldr	r3, [r7, #24]
 800c9a8:	f003 0307 	and.w	r3, r3, #7
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	d00b      	beq.n	800c9c8 <pvPortMalloc+0xfc>
	__asm volatile
 800c9b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c9b4:	f383 8811 	msr	BASEPRI, r3
 800c9b8:	f3bf 8f6f 	isb	sy
 800c9bc:	f3bf 8f4f 	dsb	sy
 800c9c0:	613b      	str	r3, [r7, #16]
}
 800c9c2:	bf00      	nop
 800c9c4:	bf00      	nop
 800c9c6:	e7fd      	b.n	800c9c4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c9c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9ca:	685a      	ldr	r2, [r3, #4]
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	1ad2      	subs	r2, r2, r3
 800c9d0:	69bb      	ldr	r3, [r7, #24]
 800c9d2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c9d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9d6:	687a      	ldr	r2, [r7, #4]
 800c9d8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c9da:	69b8      	ldr	r0, [r7, #24]
 800c9dc:	f000 f90a 	bl	800cbf4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c9e0:	4b1d      	ldr	r3, [pc, #116]	@ (800ca58 <pvPortMalloc+0x18c>)
 800c9e2:	681a      	ldr	r2, [r3, #0]
 800c9e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9e6:	685b      	ldr	r3, [r3, #4]
 800c9e8:	1ad3      	subs	r3, r2, r3
 800c9ea:	4a1b      	ldr	r2, [pc, #108]	@ (800ca58 <pvPortMalloc+0x18c>)
 800c9ec:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c9ee:	4b1a      	ldr	r3, [pc, #104]	@ (800ca58 <pvPortMalloc+0x18c>)
 800c9f0:	681a      	ldr	r2, [r3, #0]
 800c9f2:	4b1b      	ldr	r3, [pc, #108]	@ (800ca60 <pvPortMalloc+0x194>)
 800c9f4:	681b      	ldr	r3, [r3, #0]
 800c9f6:	429a      	cmp	r2, r3
 800c9f8:	d203      	bcs.n	800ca02 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c9fa:	4b17      	ldr	r3, [pc, #92]	@ (800ca58 <pvPortMalloc+0x18c>)
 800c9fc:	681b      	ldr	r3, [r3, #0]
 800c9fe:	4a18      	ldr	r2, [pc, #96]	@ (800ca60 <pvPortMalloc+0x194>)
 800ca00:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ca02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca04:	685a      	ldr	r2, [r3, #4]
 800ca06:	4b13      	ldr	r3, [pc, #76]	@ (800ca54 <pvPortMalloc+0x188>)
 800ca08:	681b      	ldr	r3, [r3, #0]
 800ca0a:	431a      	orrs	r2, r3
 800ca0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca0e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ca10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca12:	2200      	movs	r2, #0
 800ca14:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800ca16:	4b13      	ldr	r3, [pc, #76]	@ (800ca64 <pvPortMalloc+0x198>)
 800ca18:	681b      	ldr	r3, [r3, #0]
 800ca1a:	3301      	adds	r3, #1
 800ca1c:	4a11      	ldr	r2, [pc, #68]	@ (800ca64 <pvPortMalloc+0x198>)
 800ca1e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ca20:	f7fe fcc4 	bl	800b3ac <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ca24:	69fb      	ldr	r3, [r7, #28]
 800ca26:	f003 0307 	and.w	r3, r3, #7
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	d00b      	beq.n	800ca46 <pvPortMalloc+0x17a>
	__asm volatile
 800ca2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca32:	f383 8811 	msr	BASEPRI, r3
 800ca36:	f3bf 8f6f 	isb	sy
 800ca3a:	f3bf 8f4f 	dsb	sy
 800ca3e:	60fb      	str	r3, [r7, #12]
}
 800ca40:	bf00      	nop
 800ca42:	bf00      	nop
 800ca44:	e7fd      	b.n	800ca42 <pvPortMalloc+0x176>
	return pvReturn;
 800ca46:	69fb      	ldr	r3, [r7, #28]
}
 800ca48:	4618      	mov	r0, r3
 800ca4a:	3728      	adds	r7, #40	@ 0x28
 800ca4c:	46bd      	mov	sp, r7
 800ca4e:	bd80      	pop	{r7, pc}
 800ca50:	20006b14 	.word	0x20006b14
 800ca54:	20006b28 	.word	0x20006b28
 800ca58:	20006b18 	.word	0x20006b18
 800ca5c:	20006b0c 	.word	0x20006b0c
 800ca60:	20006b1c 	.word	0x20006b1c
 800ca64:	20006b20 	.word	0x20006b20

0800ca68 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ca68:	b580      	push	{r7, lr}
 800ca6a:	b086      	sub	sp, #24
 800ca6c:	af00      	add	r7, sp, #0
 800ca6e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	d04f      	beq.n	800cb1a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ca7a:	2308      	movs	r3, #8
 800ca7c:	425b      	negs	r3, r3
 800ca7e:	697a      	ldr	r2, [r7, #20]
 800ca80:	4413      	add	r3, r2
 800ca82:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ca84:	697b      	ldr	r3, [r7, #20]
 800ca86:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ca88:	693b      	ldr	r3, [r7, #16]
 800ca8a:	685a      	ldr	r2, [r3, #4]
 800ca8c:	4b25      	ldr	r3, [pc, #148]	@ (800cb24 <vPortFree+0xbc>)
 800ca8e:	681b      	ldr	r3, [r3, #0]
 800ca90:	4013      	ands	r3, r2
 800ca92:	2b00      	cmp	r3, #0
 800ca94:	d10b      	bne.n	800caae <vPortFree+0x46>
	__asm volatile
 800ca96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca9a:	f383 8811 	msr	BASEPRI, r3
 800ca9e:	f3bf 8f6f 	isb	sy
 800caa2:	f3bf 8f4f 	dsb	sy
 800caa6:	60fb      	str	r3, [r7, #12]
}
 800caa8:	bf00      	nop
 800caaa:	bf00      	nop
 800caac:	e7fd      	b.n	800caaa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800caae:	693b      	ldr	r3, [r7, #16]
 800cab0:	681b      	ldr	r3, [r3, #0]
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	d00b      	beq.n	800cace <vPortFree+0x66>
	__asm volatile
 800cab6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800caba:	f383 8811 	msr	BASEPRI, r3
 800cabe:	f3bf 8f6f 	isb	sy
 800cac2:	f3bf 8f4f 	dsb	sy
 800cac6:	60bb      	str	r3, [r7, #8]
}
 800cac8:	bf00      	nop
 800caca:	bf00      	nop
 800cacc:	e7fd      	b.n	800caca <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800cace:	693b      	ldr	r3, [r7, #16]
 800cad0:	685a      	ldr	r2, [r3, #4]
 800cad2:	4b14      	ldr	r3, [pc, #80]	@ (800cb24 <vPortFree+0xbc>)
 800cad4:	681b      	ldr	r3, [r3, #0]
 800cad6:	4013      	ands	r3, r2
 800cad8:	2b00      	cmp	r3, #0
 800cada:	d01e      	beq.n	800cb1a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800cadc:	693b      	ldr	r3, [r7, #16]
 800cade:	681b      	ldr	r3, [r3, #0]
 800cae0:	2b00      	cmp	r3, #0
 800cae2:	d11a      	bne.n	800cb1a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800cae4:	693b      	ldr	r3, [r7, #16]
 800cae6:	685a      	ldr	r2, [r3, #4]
 800cae8:	4b0e      	ldr	r3, [pc, #56]	@ (800cb24 <vPortFree+0xbc>)
 800caea:	681b      	ldr	r3, [r3, #0]
 800caec:	43db      	mvns	r3, r3
 800caee:	401a      	ands	r2, r3
 800caf0:	693b      	ldr	r3, [r7, #16]
 800caf2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800caf4:	f7fe fc4c 	bl	800b390 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800caf8:	693b      	ldr	r3, [r7, #16]
 800cafa:	685a      	ldr	r2, [r3, #4]
 800cafc:	4b0a      	ldr	r3, [pc, #40]	@ (800cb28 <vPortFree+0xc0>)
 800cafe:	681b      	ldr	r3, [r3, #0]
 800cb00:	4413      	add	r3, r2
 800cb02:	4a09      	ldr	r2, [pc, #36]	@ (800cb28 <vPortFree+0xc0>)
 800cb04:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800cb06:	6938      	ldr	r0, [r7, #16]
 800cb08:	f000 f874 	bl	800cbf4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800cb0c:	4b07      	ldr	r3, [pc, #28]	@ (800cb2c <vPortFree+0xc4>)
 800cb0e:	681b      	ldr	r3, [r3, #0]
 800cb10:	3301      	adds	r3, #1
 800cb12:	4a06      	ldr	r2, [pc, #24]	@ (800cb2c <vPortFree+0xc4>)
 800cb14:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800cb16:	f7fe fc49 	bl	800b3ac <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800cb1a:	bf00      	nop
 800cb1c:	3718      	adds	r7, #24
 800cb1e:	46bd      	mov	sp, r7
 800cb20:	bd80      	pop	{r7, pc}
 800cb22:	bf00      	nop
 800cb24:	20006b28 	.word	0x20006b28
 800cb28:	20006b18 	.word	0x20006b18
 800cb2c:	20006b24 	.word	0x20006b24

0800cb30 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800cb30:	b480      	push	{r7}
 800cb32:	b085      	sub	sp, #20
 800cb34:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800cb36:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800cb3a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800cb3c:	4b27      	ldr	r3, [pc, #156]	@ (800cbdc <prvHeapInit+0xac>)
 800cb3e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800cb40:	68fb      	ldr	r3, [r7, #12]
 800cb42:	f003 0307 	and.w	r3, r3, #7
 800cb46:	2b00      	cmp	r3, #0
 800cb48:	d00c      	beq.n	800cb64 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800cb4a:	68fb      	ldr	r3, [r7, #12]
 800cb4c:	3307      	adds	r3, #7
 800cb4e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cb50:	68fb      	ldr	r3, [r7, #12]
 800cb52:	f023 0307 	bic.w	r3, r3, #7
 800cb56:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800cb58:	68ba      	ldr	r2, [r7, #8]
 800cb5a:	68fb      	ldr	r3, [r7, #12]
 800cb5c:	1ad3      	subs	r3, r2, r3
 800cb5e:	4a1f      	ldr	r2, [pc, #124]	@ (800cbdc <prvHeapInit+0xac>)
 800cb60:	4413      	add	r3, r2
 800cb62:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800cb64:	68fb      	ldr	r3, [r7, #12]
 800cb66:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800cb68:	4a1d      	ldr	r2, [pc, #116]	@ (800cbe0 <prvHeapInit+0xb0>)
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800cb6e:	4b1c      	ldr	r3, [pc, #112]	@ (800cbe0 <prvHeapInit+0xb0>)
 800cb70:	2200      	movs	r2, #0
 800cb72:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	68ba      	ldr	r2, [r7, #8]
 800cb78:	4413      	add	r3, r2
 800cb7a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800cb7c:	2208      	movs	r2, #8
 800cb7e:	68fb      	ldr	r3, [r7, #12]
 800cb80:	1a9b      	subs	r3, r3, r2
 800cb82:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cb84:	68fb      	ldr	r3, [r7, #12]
 800cb86:	f023 0307 	bic.w	r3, r3, #7
 800cb8a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800cb8c:	68fb      	ldr	r3, [r7, #12]
 800cb8e:	4a15      	ldr	r2, [pc, #84]	@ (800cbe4 <prvHeapInit+0xb4>)
 800cb90:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800cb92:	4b14      	ldr	r3, [pc, #80]	@ (800cbe4 <prvHeapInit+0xb4>)
 800cb94:	681b      	ldr	r3, [r3, #0]
 800cb96:	2200      	movs	r2, #0
 800cb98:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800cb9a:	4b12      	ldr	r3, [pc, #72]	@ (800cbe4 <prvHeapInit+0xb4>)
 800cb9c:	681b      	ldr	r3, [r3, #0]
 800cb9e:	2200      	movs	r2, #0
 800cba0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800cba6:	683b      	ldr	r3, [r7, #0]
 800cba8:	68fa      	ldr	r2, [r7, #12]
 800cbaa:	1ad2      	subs	r2, r2, r3
 800cbac:	683b      	ldr	r3, [r7, #0]
 800cbae:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800cbb0:	4b0c      	ldr	r3, [pc, #48]	@ (800cbe4 <prvHeapInit+0xb4>)
 800cbb2:	681a      	ldr	r2, [r3, #0]
 800cbb4:	683b      	ldr	r3, [r7, #0]
 800cbb6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cbb8:	683b      	ldr	r3, [r7, #0]
 800cbba:	685b      	ldr	r3, [r3, #4]
 800cbbc:	4a0a      	ldr	r2, [pc, #40]	@ (800cbe8 <prvHeapInit+0xb8>)
 800cbbe:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cbc0:	683b      	ldr	r3, [r7, #0]
 800cbc2:	685b      	ldr	r3, [r3, #4]
 800cbc4:	4a09      	ldr	r2, [pc, #36]	@ (800cbec <prvHeapInit+0xbc>)
 800cbc6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800cbc8:	4b09      	ldr	r3, [pc, #36]	@ (800cbf0 <prvHeapInit+0xc0>)
 800cbca:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800cbce:	601a      	str	r2, [r3, #0]
}
 800cbd0:	bf00      	nop
 800cbd2:	3714      	adds	r7, #20
 800cbd4:	46bd      	mov	sp, r7
 800cbd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbda:	4770      	bx	lr
 800cbdc:	20005f0c 	.word	0x20005f0c
 800cbe0:	20006b0c 	.word	0x20006b0c
 800cbe4:	20006b14 	.word	0x20006b14
 800cbe8:	20006b1c 	.word	0x20006b1c
 800cbec:	20006b18 	.word	0x20006b18
 800cbf0:	20006b28 	.word	0x20006b28

0800cbf4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800cbf4:	b480      	push	{r7}
 800cbf6:	b085      	sub	sp, #20
 800cbf8:	af00      	add	r7, sp, #0
 800cbfa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800cbfc:	4b28      	ldr	r3, [pc, #160]	@ (800cca0 <prvInsertBlockIntoFreeList+0xac>)
 800cbfe:	60fb      	str	r3, [r7, #12]
 800cc00:	e002      	b.n	800cc08 <prvInsertBlockIntoFreeList+0x14>
 800cc02:	68fb      	ldr	r3, [r7, #12]
 800cc04:	681b      	ldr	r3, [r3, #0]
 800cc06:	60fb      	str	r3, [r7, #12]
 800cc08:	68fb      	ldr	r3, [r7, #12]
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	687a      	ldr	r2, [r7, #4]
 800cc0e:	429a      	cmp	r2, r3
 800cc10:	d8f7      	bhi.n	800cc02 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800cc12:	68fb      	ldr	r3, [r7, #12]
 800cc14:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800cc16:	68fb      	ldr	r3, [r7, #12]
 800cc18:	685b      	ldr	r3, [r3, #4]
 800cc1a:	68ba      	ldr	r2, [r7, #8]
 800cc1c:	4413      	add	r3, r2
 800cc1e:	687a      	ldr	r2, [r7, #4]
 800cc20:	429a      	cmp	r2, r3
 800cc22:	d108      	bne.n	800cc36 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800cc24:	68fb      	ldr	r3, [r7, #12]
 800cc26:	685a      	ldr	r2, [r3, #4]
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	685b      	ldr	r3, [r3, #4]
 800cc2c:	441a      	add	r2, r3
 800cc2e:	68fb      	ldr	r3, [r7, #12]
 800cc30:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800cc32:	68fb      	ldr	r3, [r7, #12]
 800cc34:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	685b      	ldr	r3, [r3, #4]
 800cc3e:	68ba      	ldr	r2, [r7, #8]
 800cc40:	441a      	add	r2, r3
 800cc42:	68fb      	ldr	r3, [r7, #12]
 800cc44:	681b      	ldr	r3, [r3, #0]
 800cc46:	429a      	cmp	r2, r3
 800cc48:	d118      	bne.n	800cc7c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800cc4a:	68fb      	ldr	r3, [r7, #12]
 800cc4c:	681a      	ldr	r2, [r3, #0]
 800cc4e:	4b15      	ldr	r3, [pc, #84]	@ (800cca4 <prvInsertBlockIntoFreeList+0xb0>)
 800cc50:	681b      	ldr	r3, [r3, #0]
 800cc52:	429a      	cmp	r2, r3
 800cc54:	d00d      	beq.n	800cc72 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	685a      	ldr	r2, [r3, #4]
 800cc5a:	68fb      	ldr	r3, [r7, #12]
 800cc5c:	681b      	ldr	r3, [r3, #0]
 800cc5e:	685b      	ldr	r3, [r3, #4]
 800cc60:	441a      	add	r2, r3
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800cc66:	68fb      	ldr	r3, [r7, #12]
 800cc68:	681b      	ldr	r3, [r3, #0]
 800cc6a:	681a      	ldr	r2, [r3, #0]
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	601a      	str	r2, [r3, #0]
 800cc70:	e008      	b.n	800cc84 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800cc72:	4b0c      	ldr	r3, [pc, #48]	@ (800cca4 <prvInsertBlockIntoFreeList+0xb0>)
 800cc74:	681a      	ldr	r2, [r3, #0]
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	601a      	str	r2, [r3, #0]
 800cc7a:	e003      	b.n	800cc84 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800cc7c:	68fb      	ldr	r3, [r7, #12]
 800cc7e:	681a      	ldr	r2, [r3, #0]
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800cc84:	68fa      	ldr	r2, [r7, #12]
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	429a      	cmp	r2, r3
 800cc8a:	d002      	beq.n	800cc92 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800cc8c:	68fb      	ldr	r3, [r7, #12]
 800cc8e:	687a      	ldr	r2, [r7, #4]
 800cc90:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cc92:	bf00      	nop
 800cc94:	3714      	adds	r7, #20
 800cc96:	46bd      	mov	sp, r7
 800cc98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc9c:	4770      	bx	lr
 800cc9e:	bf00      	nop
 800cca0:	20006b0c 	.word	0x20006b0c
 800cca4:	20006b14 	.word	0x20006b14

0800cca8 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 800cca8:	4b04      	ldr	r3, [pc, #16]	@ (800ccbc <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x14>)
 800ccaa:	681a      	ldr	r2, [r3, #0]
 800ccac:	b10a      	cbz	r2, 800ccb2 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0xa>
 800ccae:	4803      	ldr	r0, [pc, #12]	@ (800ccbc <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x14>)
 800ccb0:	4770      	bx	lr
 800ccb2:	4a03      	ldr	r2, [pc, #12]	@ (800ccc0 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x18>)
 800ccb4:	4801      	ldr	r0, [pc, #4]	@ (800ccbc <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x14>)
 800ccb6:	6812      	ldr	r2, [r2, #0]
 800ccb8:	601a      	str	r2, [r3, #0]
 800ccba:	4770      	bx	lr
 800ccbc:	2000001c 	.word	0x2000001c
 800ccc0:	200001d0 	.word	0x200001d0

0800ccc4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 800ccc4:	4a02      	ldr	r2, [pc, #8]	@ (800ccd0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0xc>)
 800ccc6:	4b03      	ldr	r3, [pc, #12]	@ (800ccd4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x10>)
 800ccc8:	6812      	ldr	r2, [r2, #0]
 800ccca:	601a      	str	r2, [r3, #0]
 800cccc:	4770      	bx	lr
 800ccce:	bf00      	nop
 800ccd0:	200001d0 	.word	0x200001d0
 800ccd4:	2000001c 	.word	0x2000001c

0800ccd8 <geometry_msgs__msg__Twist__rosidl_typesupport_introspection_c__Twist_init_function>:
 800ccd8:	f004 bba8 	b.w	801142c <geometry_msgs__msg__Twist__init>

0800ccdc <geometry_msgs__msg__Twist__rosidl_typesupport_introspection_c__Twist_fini_function>:
 800ccdc:	f004 bbca 	b.w	8011474 <geometry_msgs__msg__Twist__fini>

0800cce0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 800cce0:	b510      	push	{r4, lr}
 800cce2:	f000 f819 	bl	800cd18 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800cce6:	4c07      	ldr	r4, [pc, #28]	@ (800cd04 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x24>)
 800cce8:	60e0      	str	r0, [r4, #12]
 800ccea:	f000 f815 	bl	800cd18 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800ccee:	4b06      	ldr	r3, [pc, #24]	@ (800cd08 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x28>)
 800ccf0:	64a0      	str	r0, [r4, #72]	@ 0x48
 800ccf2:	681a      	ldr	r2, [r3, #0]
 800ccf4:	b10a      	cbz	r2, 800ccfa <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x1a>
 800ccf6:	4804      	ldr	r0, [pc, #16]	@ (800cd08 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x28>)
 800ccf8:	bd10      	pop	{r4, pc}
 800ccfa:	4a04      	ldr	r2, [pc, #16]	@ (800cd0c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x2c>)
 800ccfc:	4802      	ldr	r0, [pc, #8]	@ (800cd08 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x28>)
 800ccfe:	6812      	ldr	r2, [r2, #0]
 800cd00:	601a      	str	r2, [r3, #0]
 800cd02:	bd10      	pop	{r4, pc}
 800cd04:	20000028 	.word	0x20000028
 800cd08:	200000a0 	.word	0x200000a0
 800cd0c:	200001d4 	.word	0x200001d4

0800cd10 <geometry_msgs__msg__Vector3__rosidl_typesupport_introspection_c__Vector3_init_function>:
 800cd10:	f004 bbbc 	b.w	801148c <geometry_msgs__msg__Vector3__init>

0800cd14 <geometry_msgs__msg__Vector3__rosidl_typesupport_introspection_c__Vector3_fini_function>:
 800cd14:	f004 bbbe 	b.w	8011494 <geometry_msgs__msg__Vector3__fini>

0800cd18 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>:
 800cd18:	4b04      	ldr	r3, [pc, #16]	@ (800cd2c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 800cd1a:	681a      	ldr	r2, [r3, #0]
 800cd1c:	b10a      	cbz	r2, 800cd22 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0xa>
 800cd1e:	4803      	ldr	r0, [pc, #12]	@ (800cd2c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 800cd20:	4770      	bx	lr
 800cd22:	4a03      	ldr	r2, [pc, #12]	@ (800cd30 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x18>)
 800cd24:	4801      	ldr	r0, [pc, #4]	@ (800cd2c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 800cd26:	6812      	ldr	r2, [r2, #0]
 800cd28:	601a      	str	r2, [r3, #0]
 800cd2a:	4770      	bx	lr
 800cd2c:	20000160 	.word	0x20000160
 800cd30:	200001d4 	.word	0x200001d4

0800cd34 <get_serialized_size_geometry_msgs__msg__Twist>:
 800cd34:	b570      	push	{r4, r5, r6, lr}
 800cd36:	4604      	mov	r4, r0
 800cd38:	b148      	cbz	r0, 800cd4e <get_serialized_size_geometry_msgs__msg__Twist+0x1a>
 800cd3a:	460d      	mov	r5, r1
 800cd3c:	f000 f860 	bl	800ce00 <get_serialized_size_geometry_msgs__msg__Vector3>
 800cd40:	4606      	mov	r6, r0
 800cd42:	1829      	adds	r1, r5, r0
 800cd44:	f104 0018 	add.w	r0, r4, #24
 800cd48:	f000 f85a 	bl	800ce00 <get_serialized_size_geometry_msgs__msg__Vector3>
 800cd4c:	4430      	add	r0, r6
 800cd4e:	bd70      	pop	{r4, r5, r6, pc}

0800cd50 <_Twist__cdr_deserialize>:
 800cd50:	b570      	push	{r4, r5, r6, lr}
 800cd52:	460c      	mov	r4, r1
 800cd54:	b189      	cbz	r1, 800cd7a <_Twist__cdr_deserialize+0x2a>
 800cd56:	4605      	mov	r5, r0
 800cd58:	f000 f8de 	bl	800cf18 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800cd5c:	6843      	ldr	r3, [r0, #4]
 800cd5e:	4621      	mov	r1, r4
 800cd60:	68db      	ldr	r3, [r3, #12]
 800cd62:	4628      	mov	r0, r5
 800cd64:	4798      	blx	r3
 800cd66:	f000 f8d7 	bl	800cf18 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800cd6a:	6843      	ldr	r3, [r0, #4]
 800cd6c:	f104 0118 	add.w	r1, r4, #24
 800cd70:	4628      	mov	r0, r5
 800cd72:	68db      	ldr	r3, [r3, #12]
 800cd74:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800cd78:	4718      	bx	r3
 800cd7a:	4608      	mov	r0, r1
 800cd7c:	bd70      	pop	{r4, r5, r6, pc}
 800cd7e:	bf00      	nop

0800cd80 <_Twist__cdr_serialize>:
 800cd80:	b510      	push	{r4, lr}
 800cd82:	b082      	sub	sp, #8
 800cd84:	9101      	str	r1, [sp, #4]
 800cd86:	b190      	cbz	r0, 800cdae <_Twist__cdr_serialize+0x2e>
 800cd88:	4604      	mov	r4, r0
 800cd8a:	f000 f8c5 	bl	800cf18 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800cd8e:	6843      	ldr	r3, [r0, #4]
 800cd90:	9901      	ldr	r1, [sp, #4]
 800cd92:	689b      	ldr	r3, [r3, #8]
 800cd94:	4620      	mov	r0, r4
 800cd96:	4798      	blx	r3
 800cd98:	f000 f8be 	bl	800cf18 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800cd9c:	6843      	ldr	r3, [r0, #4]
 800cd9e:	9901      	ldr	r1, [sp, #4]
 800cda0:	689b      	ldr	r3, [r3, #8]
 800cda2:	f104 0018 	add.w	r0, r4, #24
 800cda6:	b002      	add	sp, #8
 800cda8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cdac:	4718      	bx	r3
 800cdae:	b002      	add	sp, #8
 800cdb0:	bd10      	pop	{r4, pc}
 800cdb2:	bf00      	nop

0800cdb4 <_Twist__get_serialized_size>:
 800cdb4:	b538      	push	{r3, r4, r5, lr}
 800cdb6:	4604      	mov	r4, r0
 800cdb8:	b148      	cbz	r0, 800cdce <_Twist__get_serialized_size+0x1a>
 800cdba:	2100      	movs	r1, #0
 800cdbc:	f000 f820 	bl	800ce00 <get_serialized_size_geometry_msgs__msg__Vector3>
 800cdc0:	4605      	mov	r5, r0
 800cdc2:	4601      	mov	r1, r0
 800cdc4:	f104 0018 	add.w	r0, r4, #24
 800cdc8:	f000 f81a 	bl	800ce00 <get_serialized_size_geometry_msgs__msg__Vector3>
 800cdcc:	4428      	add	r0, r5
 800cdce:	bd38      	pop	{r3, r4, r5, pc}

0800cdd0 <_Twist__max_serialized_size>:
 800cdd0:	b510      	push	{r4, lr}
 800cdd2:	b082      	sub	sp, #8
 800cdd4:	2301      	movs	r3, #1
 800cdd6:	2100      	movs	r1, #0
 800cdd8:	f10d 0007 	add.w	r0, sp, #7
 800cddc:	f88d 3007 	strb.w	r3, [sp, #7]
 800cde0:	f000 f87e 	bl	800cee0 <max_serialized_size_geometry_msgs__msg__Vector3>
 800cde4:	4604      	mov	r4, r0
 800cde6:	4601      	mov	r1, r0
 800cde8:	f10d 0007 	add.w	r0, sp, #7
 800cdec:	f000 f878 	bl	800cee0 <max_serialized_size_geometry_msgs__msg__Vector3>
 800cdf0:	4420      	add	r0, r4
 800cdf2:	b002      	add	sp, #8
 800cdf4:	bd10      	pop	{r4, pc}
 800cdf6:	bf00      	nop

0800cdf8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 800cdf8:	4800      	ldr	r0, [pc, #0]	@ (800cdfc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x4>)
 800cdfa:	4770      	bx	lr
 800cdfc:	2000016c 	.word	0x2000016c

0800ce00 <get_serialized_size_geometry_msgs__msg__Vector3>:
 800ce00:	b1b8      	cbz	r0, 800ce32 <get_serialized_size_geometry_msgs__msg__Vector3+0x32>
 800ce02:	b538      	push	{r3, r4, r5, lr}
 800ce04:	460d      	mov	r5, r1
 800ce06:	4628      	mov	r0, r5
 800ce08:	2108      	movs	r1, #8
 800ce0a:	f001 fb9d 	bl	800e548 <ucdr_alignment>
 800ce0e:	f105 0308 	add.w	r3, r5, #8
 800ce12:	181c      	adds	r4, r3, r0
 800ce14:	2108      	movs	r1, #8
 800ce16:	4620      	mov	r0, r4
 800ce18:	f001 fb96 	bl	800e548 <ucdr_alignment>
 800ce1c:	3008      	adds	r0, #8
 800ce1e:	4404      	add	r4, r0
 800ce20:	2108      	movs	r1, #8
 800ce22:	4620      	mov	r0, r4
 800ce24:	f001 fb90 	bl	800e548 <ucdr_alignment>
 800ce28:	f1c5 0508 	rsb	r5, r5, #8
 800ce2c:	4428      	add	r0, r5
 800ce2e:	4420      	add	r0, r4
 800ce30:	bd38      	pop	{r3, r4, r5, pc}
 800ce32:	4770      	bx	lr

0800ce34 <_Vector3__cdr_deserialize>:
 800ce34:	b538      	push	{r3, r4, r5, lr}
 800ce36:	460c      	mov	r4, r1
 800ce38:	b171      	cbz	r1, 800ce58 <_Vector3__cdr_deserialize+0x24>
 800ce3a:	4605      	mov	r5, r0
 800ce3c:	f001 f998 	bl	800e170 <ucdr_deserialize_double>
 800ce40:	f104 0108 	add.w	r1, r4, #8
 800ce44:	4628      	mov	r0, r5
 800ce46:	f001 f993 	bl	800e170 <ucdr_deserialize_double>
 800ce4a:	f104 0110 	add.w	r1, r4, #16
 800ce4e:	4628      	mov	r0, r5
 800ce50:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ce54:	f001 b98c 	b.w	800e170 <ucdr_deserialize_double>
 800ce58:	4608      	mov	r0, r1
 800ce5a:	bd38      	pop	{r3, r4, r5, pc}

0800ce5c <_Vector3__cdr_serialize>:
 800ce5c:	b198      	cbz	r0, 800ce86 <_Vector3__cdr_serialize+0x2a>
 800ce5e:	b538      	push	{r3, r4, r5, lr}
 800ce60:	ed90 0b00 	vldr	d0, [r0]
 800ce64:	460d      	mov	r5, r1
 800ce66:	4604      	mov	r4, r0
 800ce68:	4608      	mov	r0, r1
 800ce6a:	f000 ffdf 	bl	800de2c <ucdr_serialize_double>
 800ce6e:	ed94 0b02 	vldr	d0, [r4, #8]
 800ce72:	4628      	mov	r0, r5
 800ce74:	f000 ffda 	bl	800de2c <ucdr_serialize_double>
 800ce78:	ed94 0b04 	vldr	d0, [r4, #16]
 800ce7c:	4628      	mov	r0, r5
 800ce7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ce82:	f000 bfd3 	b.w	800de2c <ucdr_serialize_double>
 800ce86:	4770      	bx	lr

0800ce88 <_Vector3__get_serialized_size>:
 800ce88:	b198      	cbz	r0, 800ceb2 <_Vector3__get_serialized_size+0x2a>
 800ce8a:	b510      	push	{r4, lr}
 800ce8c:	2108      	movs	r1, #8
 800ce8e:	2000      	movs	r0, #0
 800ce90:	f001 fb5a 	bl	800e548 <ucdr_alignment>
 800ce94:	f100 0408 	add.w	r4, r0, #8
 800ce98:	2108      	movs	r1, #8
 800ce9a:	4620      	mov	r0, r4
 800ce9c:	f001 fb54 	bl	800e548 <ucdr_alignment>
 800cea0:	3008      	adds	r0, #8
 800cea2:	4404      	add	r4, r0
 800cea4:	2108      	movs	r1, #8
 800cea6:	4620      	mov	r0, r4
 800cea8:	f001 fb4e 	bl	800e548 <ucdr_alignment>
 800ceac:	3008      	adds	r0, #8
 800ceae:	4420      	add	r0, r4
 800ceb0:	bd10      	pop	{r4, pc}
 800ceb2:	4770      	bx	lr

0800ceb4 <_Vector3__max_serialized_size>:
 800ceb4:	b538      	push	{r3, r4, r5, lr}
 800ceb6:	2108      	movs	r1, #8
 800ceb8:	2000      	movs	r0, #0
 800ceba:	f001 fb45 	bl	800e548 <ucdr_alignment>
 800cebe:	f100 0508 	add.w	r5, r0, #8
 800cec2:	2108      	movs	r1, #8
 800cec4:	4628      	mov	r0, r5
 800cec6:	f001 fb3f 	bl	800e548 <ucdr_alignment>
 800ceca:	f100 0408 	add.w	r4, r0, #8
 800cece:	442c      	add	r4, r5
 800ced0:	2108      	movs	r1, #8
 800ced2:	4620      	mov	r0, r4
 800ced4:	f001 fb38 	bl	800e548 <ucdr_alignment>
 800ced8:	3008      	adds	r0, #8
 800ceda:	4420      	add	r0, r4
 800cedc:	bd38      	pop	{r3, r4, r5, pc}
 800cede:	bf00      	nop

0800cee0 <max_serialized_size_geometry_msgs__msg__Vector3>:
 800cee0:	b570      	push	{r4, r5, r6, lr}
 800cee2:	2301      	movs	r3, #1
 800cee4:	460c      	mov	r4, r1
 800cee6:	7003      	strb	r3, [r0, #0]
 800cee8:	2108      	movs	r1, #8
 800ceea:	4620      	mov	r0, r4
 800ceec:	f001 fb2c 	bl	800e548 <ucdr_alignment>
 800cef0:	f104 0508 	add.w	r5, r4, #8
 800cef4:	1946      	adds	r6, r0, r5
 800cef6:	2108      	movs	r1, #8
 800cef8:	4630      	mov	r0, r6
 800cefa:	f001 fb25 	bl	800e548 <ucdr_alignment>
 800cefe:	f100 0508 	add.w	r5, r0, #8
 800cf02:	4435      	add	r5, r6
 800cf04:	2108      	movs	r1, #8
 800cf06:	4628      	mov	r0, r5
 800cf08:	f001 fb1e 	bl	800e548 <ucdr_alignment>
 800cf0c:	f1c4 0408 	rsb	r4, r4, #8
 800cf10:	4420      	add	r0, r4
 800cf12:	4428      	add	r0, r5
 800cf14:	bd70      	pop	{r4, r5, r6, pc}
 800cf16:	bf00      	nop

0800cf18 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>:
 800cf18:	4800      	ldr	r0, [pc, #0]	@ (800cf1c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x4>)
 800cf1a:	4770      	bx	lr
 800cf1c:	20000194 	.word	0x20000194

0800cf20 <ucdr_serialize_bool>:
 800cf20:	b538      	push	{r3, r4, r5, lr}
 800cf22:	460d      	mov	r5, r1
 800cf24:	2101      	movs	r1, #1
 800cf26:	4604      	mov	r4, r0
 800cf28:	f001 fac2 	bl	800e4b0 <ucdr_check_final_buffer_behavior>
 800cf2c:	b148      	cbz	r0, 800cf42 <ucdr_serialize_bool+0x22>
 800cf2e:	68a3      	ldr	r3, [r4, #8]
 800cf30:	701d      	strb	r5, [r3, #0]
 800cf32:	68a2      	ldr	r2, [r4, #8]
 800cf34:	6923      	ldr	r3, [r4, #16]
 800cf36:	2101      	movs	r1, #1
 800cf38:	440a      	add	r2, r1
 800cf3a:	440b      	add	r3, r1
 800cf3c:	60a2      	str	r2, [r4, #8]
 800cf3e:	6123      	str	r3, [r4, #16]
 800cf40:	7561      	strb	r1, [r4, #21]
 800cf42:	7da0      	ldrb	r0, [r4, #22]
 800cf44:	f080 0001 	eor.w	r0, r0, #1
 800cf48:	bd38      	pop	{r3, r4, r5, pc}
 800cf4a:	bf00      	nop

0800cf4c <ucdr_deserialize_bool>:
 800cf4c:	b538      	push	{r3, r4, r5, lr}
 800cf4e:	460d      	mov	r5, r1
 800cf50:	2101      	movs	r1, #1
 800cf52:	4604      	mov	r4, r0
 800cf54:	f001 faac 	bl	800e4b0 <ucdr_check_final_buffer_behavior>
 800cf58:	b160      	cbz	r0, 800cf74 <ucdr_deserialize_bool+0x28>
 800cf5a:	68a2      	ldr	r2, [r4, #8]
 800cf5c:	6923      	ldr	r3, [r4, #16]
 800cf5e:	f812 1b01 	ldrb.w	r1, [r2], #1
 800cf62:	3900      	subs	r1, #0
 800cf64:	bf18      	it	ne
 800cf66:	2101      	movne	r1, #1
 800cf68:	7029      	strb	r1, [r5, #0]
 800cf6a:	3301      	adds	r3, #1
 800cf6c:	2101      	movs	r1, #1
 800cf6e:	60a2      	str	r2, [r4, #8]
 800cf70:	6123      	str	r3, [r4, #16]
 800cf72:	7561      	strb	r1, [r4, #21]
 800cf74:	7da0      	ldrb	r0, [r4, #22]
 800cf76:	f080 0001 	eor.w	r0, r0, #1
 800cf7a:	bd38      	pop	{r3, r4, r5, pc}

0800cf7c <ucdr_serialize_uint8_t>:
 800cf7c:	b538      	push	{r3, r4, r5, lr}
 800cf7e:	460d      	mov	r5, r1
 800cf80:	2101      	movs	r1, #1
 800cf82:	4604      	mov	r4, r0
 800cf84:	f001 fa94 	bl	800e4b0 <ucdr_check_final_buffer_behavior>
 800cf88:	b148      	cbz	r0, 800cf9e <ucdr_serialize_uint8_t+0x22>
 800cf8a:	68a3      	ldr	r3, [r4, #8]
 800cf8c:	701d      	strb	r5, [r3, #0]
 800cf8e:	68a2      	ldr	r2, [r4, #8]
 800cf90:	6923      	ldr	r3, [r4, #16]
 800cf92:	2101      	movs	r1, #1
 800cf94:	440a      	add	r2, r1
 800cf96:	440b      	add	r3, r1
 800cf98:	60a2      	str	r2, [r4, #8]
 800cf9a:	6123      	str	r3, [r4, #16]
 800cf9c:	7561      	strb	r1, [r4, #21]
 800cf9e:	7da0      	ldrb	r0, [r4, #22]
 800cfa0:	f080 0001 	eor.w	r0, r0, #1
 800cfa4:	bd38      	pop	{r3, r4, r5, pc}
 800cfa6:	bf00      	nop

0800cfa8 <ucdr_deserialize_uint8_t>:
 800cfa8:	b538      	push	{r3, r4, r5, lr}
 800cfaa:	460d      	mov	r5, r1
 800cfac:	2101      	movs	r1, #1
 800cfae:	4604      	mov	r4, r0
 800cfb0:	f001 fa7e 	bl	800e4b0 <ucdr_check_final_buffer_behavior>
 800cfb4:	b150      	cbz	r0, 800cfcc <ucdr_deserialize_uint8_t+0x24>
 800cfb6:	68a3      	ldr	r3, [r4, #8]
 800cfb8:	781b      	ldrb	r3, [r3, #0]
 800cfba:	702b      	strb	r3, [r5, #0]
 800cfbc:	68a2      	ldr	r2, [r4, #8]
 800cfbe:	6923      	ldr	r3, [r4, #16]
 800cfc0:	2101      	movs	r1, #1
 800cfc2:	440a      	add	r2, r1
 800cfc4:	440b      	add	r3, r1
 800cfc6:	60a2      	str	r2, [r4, #8]
 800cfc8:	6123      	str	r3, [r4, #16]
 800cfca:	7561      	strb	r1, [r4, #21]
 800cfcc:	7da0      	ldrb	r0, [r4, #22]
 800cfce:	f080 0001 	eor.w	r0, r0, #1
 800cfd2:	bd38      	pop	{r3, r4, r5, pc}

0800cfd4 <ucdr_serialize_uint16_t>:
 800cfd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cfd8:	b082      	sub	sp, #8
 800cfda:	460b      	mov	r3, r1
 800cfdc:	2102      	movs	r1, #2
 800cfde:	4604      	mov	r4, r0
 800cfe0:	f8ad 3006 	strh.w	r3, [sp, #6]
 800cfe4:	f001 fab8 	bl	800e558 <ucdr_buffer_alignment>
 800cfe8:	4601      	mov	r1, r0
 800cfea:	4620      	mov	r0, r4
 800cfec:	7d67      	ldrb	r7, [r4, #21]
 800cfee:	f001 faf7 	bl	800e5e0 <ucdr_advance_buffer>
 800cff2:	2102      	movs	r1, #2
 800cff4:	4620      	mov	r0, r4
 800cff6:	f001 fa4f 	bl	800e498 <ucdr_check_buffer_available_for>
 800cffa:	bb78      	cbnz	r0, 800d05c <ucdr_serialize_uint16_t+0x88>
 800cffc:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800d000:	42ab      	cmp	r3, r5
 800d002:	d926      	bls.n	800d052 <ucdr_serialize_uint16_t+0x7e>
 800d004:	1b5e      	subs	r6, r3, r5
 800d006:	60a3      	str	r3, [r4, #8]
 800d008:	6923      	ldr	r3, [r4, #16]
 800d00a:	f1c6 0802 	rsb	r8, r6, #2
 800d00e:	4433      	add	r3, r6
 800d010:	6123      	str	r3, [r4, #16]
 800d012:	4641      	mov	r1, r8
 800d014:	4620      	mov	r0, r4
 800d016:	f001 fa4b 	bl	800e4b0 <ucdr_check_final_buffer_behavior>
 800d01a:	2800      	cmp	r0, #0
 800d01c:	d03b      	beq.n	800d096 <ucdr_serialize_uint16_t+0xc2>
 800d01e:	7d23      	ldrb	r3, [r4, #20]
 800d020:	2b01      	cmp	r3, #1
 800d022:	d04a      	beq.n	800d0ba <ucdr_serialize_uint16_t+0xe6>
 800d024:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800d028:	702b      	strb	r3, [r5, #0]
 800d02a:	2e00      	cmp	r6, #0
 800d02c:	d040      	beq.n	800d0b0 <ucdr_serialize_uint16_t+0xdc>
 800d02e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800d032:	706b      	strb	r3, [r5, #1]
 800d034:	6923      	ldr	r3, [r4, #16]
 800d036:	68a2      	ldr	r2, [r4, #8]
 800d038:	7da0      	ldrb	r0, [r4, #22]
 800d03a:	3302      	adds	r3, #2
 800d03c:	1b9e      	subs	r6, r3, r6
 800d03e:	4442      	add	r2, r8
 800d040:	2302      	movs	r3, #2
 800d042:	f080 0001 	eor.w	r0, r0, #1
 800d046:	60a2      	str	r2, [r4, #8]
 800d048:	6126      	str	r6, [r4, #16]
 800d04a:	7563      	strb	r3, [r4, #21]
 800d04c:	b002      	add	sp, #8
 800d04e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d052:	2102      	movs	r1, #2
 800d054:	4620      	mov	r0, r4
 800d056:	f001 fa2b 	bl	800e4b0 <ucdr_check_final_buffer_behavior>
 800d05a:	b190      	cbz	r0, 800d082 <ucdr_serialize_uint16_t+0xae>
 800d05c:	7d23      	ldrb	r3, [r4, #20]
 800d05e:	2b01      	cmp	r3, #1
 800d060:	68a3      	ldr	r3, [r4, #8]
 800d062:	d014      	beq.n	800d08e <ucdr_serialize_uint16_t+0xba>
 800d064:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800d068:	701a      	strb	r2, [r3, #0]
 800d06a:	68a3      	ldr	r3, [r4, #8]
 800d06c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d070:	705a      	strb	r2, [r3, #1]
 800d072:	68a2      	ldr	r2, [r4, #8]
 800d074:	6923      	ldr	r3, [r4, #16]
 800d076:	3202      	adds	r2, #2
 800d078:	3302      	adds	r3, #2
 800d07a:	2102      	movs	r1, #2
 800d07c:	60a2      	str	r2, [r4, #8]
 800d07e:	6123      	str	r3, [r4, #16]
 800d080:	7561      	strb	r1, [r4, #21]
 800d082:	7da0      	ldrb	r0, [r4, #22]
 800d084:	f080 0001 	eor.w	r0, r0, #1
 800d088:	b002      	add	sp, #8
 800d08a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d08e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800d092:	801a      	strh	r2, [r3, #0]
 800d094:	e7ed      	b.n	800d072 <ucdr_serialize_uint16_t+0x9e>
 800d096:	68a2      	ldr	r2, [r4, #8]
 800d098:	6923      	ldr	r3, [r4, #16]
 800d09a:	7da0      	ldrb	r0, [r4, #22]
 800d09c:	7567      	strb	r7, [r4, #21]
 800d09e:	1b92      	subs	r2, r2, r6
 800d0a0:	1b9b      	subs	r3, r3, r6
 800d0a2:	f080 0001 	eor.w	r0, r0, #1
 800d0a6:	60a2      	str	r2, [r4, #8]
 800d0a8:	6123      	str	r3, [r4, #16]
 800d0aa:	b002      	add	sp, #8
 800d0ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d0b0:	68a3      	ldr	r3, [r4, #8]
 800d0b2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d0b6:	701a      	strb	r2, [r3, #0]
 800d0b8:	e7bc      	b.n	800d034 <ucdr_serialize_uint16_t+0x60>
 800d0ba:	4628      	mov	r0, r5
 800d0bc:	f10d 0506 	add.w	r5, sp, #6
 800d0c0:	4629      	mov	r1, r5
 800d0c2:	4632      	mov	r2, r6
 800d0c4:	f00e fa1b 	bl	801b4fe <memcpy>
 800d0c8:	68a0      	ldr	r0, [r4, #8]
 800d0ca:	4642      	mov	r2, r8
 800d0cc:	19a9      	adds	r1, r5, r6
 800d0ce:	f00e fa16 	bl	801b4fe <memcpy>
 800d0d2:	e7af      	b.n	800d034 <ucdr_serialize_uint16_t+0x60>

0800d0d4 <ucdr_serialize_endian_uint16_t>:
 800d0d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d0d8:	b083      	sub	sp, #12
 800d0da:	460d      	mov	r5, r1
 800d0dc:	2102      	movs	r1, #2
 800d0de:	4604      	mov	r4, r0
 800d0e0:	f8ad 2006 	strh.w	r2, [sp, #6]
 800d0e4:	f001 fa38 	bl	800e558 <ucdr_buffer_alignment>
 800d0e8:	4601      	mov	r1, r0
 800d0ea:	4620      	mov	r0, r4
 800d0ec:	f894 8015 	ldrb.w	r8, [r4, #21]
 800d0f0:	f001 fa76 	bl	800e5e0 <ucdr_advance_buffer>
 800d0f4:	2102      	movs	r1, #2
 800d0f6:	4620      	mov	r0, r4
 800d0f8:	f001 f9ce 	bl	800e498 <ucdr_check_buffer_available_for>
 800d0fc:	bb70      	cbnz	r0, 800d15c <ucdr_serialize_endian_uint16_t+0x88>
 800d0fe:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800d102:	42be      	cmp	r6, r7
 800d104:	d925      	bls.n	800d152 <ucdr_serialize_endian_uint16_t+0x7e>
 800d106:	6923      	ldr	r3, [r4, #16]
 800d108:	60a6      	str	r6, [r4, #8]
 800d10a:	1bf6      	subs	r6, r6, r7
 800d10c:	4433      	add	r3, r6
 800d10e:	f1c6 0902 	rsb	r9, r6, #2
 800d112:	6123      	str	r3, [r4, #16]
 800d114:	4649      	mov	r1, r9
 800d116:	4620      	mov	r0, r4
 800d118:	f001 f9ca 	bl	800e4b0 <ucdr_check_final_buffer_behavior>
 800d11c:	2800      	cmp	r0, #0
 800d11e:	d039      	beq.n	800d194 <ucdr_serialize_endian_uint16_t+0xc0>
 800d120:	2d01      	cmp	r5, #1
 800d122:	d04a      	beq.n	800d1ba <ucdr_serialize_endian_uint16_t+0xe6>
 800d124:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800d128:	703b      	strb	r3, [r7, #0]
 800d12a:	2e00      	cmp	r6, #0
 800d12c:	d040      	beq.n	800d1b0 <ucdr_serialize_endian_uint16_t+0xdc>
 800d12e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800d132:	707b      	strb	r3, [r7, #1]
 800d134:	6923      	ldr	r3, [r4, #16]
 800d136:	68a2      	ldr	r2, [r4, #8]
 800d138:	7da0      	ldrb	r0, [r4, #22]
 800d13a:	3302      	adds	r3, #2
 800d13c:	444a      	add	r2, r9
 800d13e:	1b9b      	subs	r3, r3, r6
 800d140:	2102      	movs	r1, #2
 800d142:	f080 0001 	eor.w	r0, r0, #1
 800d146:	60a2      	str	r2, [r4, #8]
 800d148:	6123      	str	r3, [r4, #16]
 800d14a:	7561      	strb	r1, [r4, #21]
 800d14c:	b003      	add	sp, #12
 800d14e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d152:	2102      	movs	r1, #2
 800d154:	4620      	mov	r0, r4
 800d156:	f001 f9ab 	bl	800e4b0 <ucdr_check_final_buffer_behavior>
 800d15a:	b188      	cbz	r0, 800d180 <ucdr_serialize_endian_uint16_t+0xac>
 800d15c:	2d01      	cmp	r5, #1
 800d15e:	68a3      	ldr	r3, [r4, #8]
 800d160:	d014      	beq.n	800d18c <ucdr_serialize_endian_uint16_t+0xb8>
 800d162:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800d166:	701a      	strb	r2, [r3, #0]
 800d168:	68a3      	ldr	r3, [r4, #8]
 800d16a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d16e:	705a      	strb	r2, [r3, #1]
 800d170:	68a2      	ldr	r2, [r4, #8]
 800d172:	6923      	ldr	r3, [r4, #16]
 800d174:	3202      	adds	r2, #2
 800d176:	3302      	adds	r3, #2
 800d178:	2102      	movs	r1, #2
 800d17a:	60a2      	str	r2, [r4, #8]
 800d17c:	6123      	str	r3, [r4, #16]
 800d17e:	7561      	strb	r1, [r4, #21]
 800d180:	7da0      	ldrb	r0, [r4, #22]
 800d182:	f080 0001 	eor.w	r0, r0, #1
 800d186:	b003      	add	sp, #12
 800d188:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d18c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800d190:	801a      	strh	r2, [r3, #0]
 800d192:	e7ed      	b.n	800d170 <ucdr_serialize_endian_uint16_t+0x9c>
 800d194:	68a2      	ldr	r2, [r4, #8]
 800d196:	6923      	ldr	r3, [r4, #16]
 800d198:	7da0      	ldrb	r0, [r4, #22]
 800d19a:	f884 8015 	strb.w	r8, [r4, #21]
 800d19e:	1b92      	subs	r2, r2, r6
 800d1a0:	1b9b      	subs	r3, r3, r6
 800d1a2:	f080 0001 	eor.w	r0, r0, #1
 800d1a6:	60a2      	str	r2, [r4, #8]
 800d1a8:	6123      	str	r3, [r4, #16]
 800d1aa:	b003      	add	sp, #12
 800d1ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d1b0:	68a3      	ldr	r3, [r4, #8]
 800d1b2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d1b6:	701a      	strb	r2, [r3, #0]
 800d1b8:	e7bc      	b.n	800d134 <ucdr_serialize_endian_uint16_t+0x60>
 800d1ba:	f10d 0506 	add.w	r5, sp, #6
 800d1be:	4629      	mov	r1, r5
 800d1c0:	4632      	mov	r2, r6
 800d1c2:	4638      	mov	r0, r7
 800d1c4:	f00e f99b 	bl	801b4fe <memcpy>
 800d1c8:	68a0      	ldr	r0, [r4, #8]
 800d1ca:	464a      	mov	r2, r9
 800d1cc:	19a9      	adds	r1, r5, r6
 800d1ce:	f00e f996 	bl	801b4fe <memcpy>
 800d1d2:	e7af      	b.n	800d134 <ucdr_serialize_endian_uint16_t+0x60>

0800d1d4 <ucdr_deserialize_uint16_t>:
 800d1d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d1d8:	460d      	mov	r5, r1
 800d1da:	2102      	movs	r1, #2
 800d1dc:	4604      	mov	r4, r0
 800d1de:	f001 f9bb 	bl	800e558 <ucdr_buffer_alignment>
 800d1e2:	4601      	mov	r1, r0
 800d1e4:	4620      	mov	r0, r4
 800d1e6:	f894 8015 	ldrb.w	r8, [r4, #21]
 800d1ea:	f001 f9f9 	bl	800e5e0 <ucdr_advance_buffer>
 800d1ee:	2102      	movs	r1, #2
 800d1f0:	4620      	mov	r0, r4
 800d1f2:	f001 f951 	bl	800e498 <ucdr_check_buffer_available_for>
 800d1f6:	bb60      	cbnz	r0, 800d252 <ucdr_deserialize_uint16_t+0x7e>
 800d1f8:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800d1fc:	42be      	cmp	r6, r7
 800d1fe:	d923      	bls.n	800d248 <ucdr_deserialize_uint16_t+0x74>
 800d200:	6923      	ldr	r3, [r4, #16]
 800d202:	60a6      	str	r6, [r4, #8]
 800d204:	1bf6      	subs	r6, r6, r7
 800d206:	4433      	add	r3, r6
 800d208:	f1c6 0902 	rsb	r9, r6, #2
 800d20c:	6123      	str	r3, [r4, #16]
 800d20e:	4649      	mov	r1, r9
 800d210:	4620      	mov	r0, r4
 800d212:	f001 f94d 	bl	800e4b0 <ucdr_check_final_buffer_behavior>
 800d216:	2800      	cmp	r0, #0
 800d218:	d034      	beq.n	800d284 <ucdr_deserialize_uint16_t+0xb0>
 800d21a:	7d23      	ldrb	r3, [r4, #20]
 800d21c:	2b01      	cmp	r3, #1
 800d21e:	d042      	beq.n	800d2a6 <ucdr_deserialize_uint16_t+0xd2>
 800d220:	787b      	ldrb	r3, [r7, #1]
 800d222:	702b      	strb	r3, [r5, #0]
 800d224:	2e00      	cmp	r6, #0
 800d226:	d03a      	beq.n	800d29e <ucdr_deserialize_uint16_t+0xca>
 800d228:	783b      	ldrb	r3, [r7, #0]
 800d22a:	706b      	strb	r3, [r5, #1]
 800d22c:	6923      	ldr	r3, [r4, #16]
 800d22e:	68a2      	ldr	r2, [r4, #8]
 800d230:	7da0      	ldrb	r0, [r4, #22]
 800d232:	2102      	movs	r1, #2
 800d234:	3302      	adds	r3, #2
 800d236:	444a      	add	r2, r9
 800d238:	1b9b      	subs	r3, r3, r6
 800d23a:	7561      	strb	r1, [r4, #21]
 800d23c:	60a2      	str	r2, [r4, #8]
 800d23e:	6123      	str	r3, [r4, #16]
 800d240:	f080 0001 	eor.w	r0, r0, #1
 800d244:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d248:	2102      	movs	r1, #2
 800d24a:	4620      	mov	r0, r4
 800d24c:	f001 f930 	bl	800e4b0 <ucdr_check_final_buffer_behavior>
 800d250:	b180      	cbz	r0, 800d274 <ucdr_deserialize_uint16_t+0xa0>
 800d252:	7d23      	ldrb	r3, [r4, #20]
 800d254:	2b01      	cmp	r3, #1
 800d256:	68a3      	ldr	r3, [r4, #8]
 800d258:	d011      	beq.n	800d27e <ucdr_deserialize_uint16_t+0xaa>
 800d25a:	785b      	ldrb	r3, [r3, #1]
 800d25c:	702b      	strb	r3, [r5, #0]
 800d25e:	68a3      	ldr	r3, [r4, #8]
 800d260:	781b      	ldrb	r3, [r3, #0]
 800d262:	706b      	strb	r3, [r5, #1]
 800d264:	68a2      	ldr	r2, [r4, #8]
 800d266:	6923      	ldr	r3, [r4, #16]
 800d268:	3202      	adds	r2, #2
 800d26a:	3302      	adds	r3, #2
 800d26c:	2102      	movs	r1, #2
 800d26e:	60a2      	str	r2, [r4, #8]
 800d270:	6123      	str	r3, [r4, #16]
 800d272:	7561      	strb	r1, [r4, #21]
 800d274:	7da0      	ldrb	r0, [r4, #22]
 800d276:	f080 0001 	eor.w	r0, r0, #1
 800d27a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d27e:	881b      	ldrh	r3, [r3, #0]
 800d280:	802b      	strh	r3, [r5, #0]
 800d282:	e7ef      	b.n	800d264 <ucdr_deserialize_uint16_t+0x90>
 800d284:	68a2      	ldr	r2, [r4, #8]
 800d286:	6923      	ldr	r3, [r4, #16]
 800d288:	7da0      	ldrb	r0, [r4, #22]
 800d28a:	f884 8015 	strb.w	r8, [r4, #21]
 800d28e:	1b92      	subs	r2, r2, r6
 800d290:	1b9b      	subs	r3, r3, r6
 800d292:	60a2      	str	r2, [r4, #8]
 800d294:	6123      	str	r3, [r4, #16]
 800d296:	f080 0001 	eor.w	r0, r0, #1
 800d29a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d29e:	68a3      	ldr	r3, [r4, #8]
 800d2a0:	781b      	ldrb	r3, [r3, #0]
 800d2a2:	706b      	strb	r3, [r5, #1]
 800d2a4:	e7c2      	b.n	800d22c <ucdr_deserialize_uint16_t+0x58>
 800d2a6:	4639      	mov	r1, r7
 800d2a8:	4632      	mov	r2, r6
 800d2aa:	4628      	mov	r0, r5
 800d2ac:	f00e f927 	bl	801b4fe <memcpy>
 800d2b0:	68a1      	ldr	r1, [r4, #8]
 800d2b2:	464a      	mov	r2, r9
 800d2b4:	19a8      	adds	r0, r5, r6
 800d2b6:	f00e f922 	bl	801b4fe <memcpy>
 800d2ba:	e7b7      	b.n	800d22c <ucdr_deserialize_uint16_t+0x58>

0800d2bc <ucdr_deserialize_endian_uint16_t>:
 800d2bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d2c0:	460e      	mov	r6, r1
 800d2c2:	2102      	movs	r1, #2
 800d2c4:	4604      	mov	r4, r0
 800d2c6:	4615      	mov	r5, r2
 800d2c8:	f001 f946 	bl	800e558 <ucdr_buffer_alignment>
 800d2cc:	4601      	mov	r1, r0
 800d2ce:	4620      	mov	r0, r4
 800d2d0:	f894 9015 	ldrb.w	r9, [r4, #21]
 800d2d4:	f001 f984 	bl	800e5e0 <ucdr_advance_buffer>
 800d2d8:	2102      	movs	r1, #2
 800d2da:	4620      	mov	r0, r4
 800d2dc:	f001 f8dc 	bl	800e498 <ucdr_check_buffer_available_for>
 800d2e0:	bb70      	cbnz	r0, 800d340 <ucdr_deserialize_endian_uint16_t+0x84>
 800d2e2:	e9d4 7801 	ldrd	r7, r8, [r4, #4]
 800d2e6:	4547      	cmp	r7, r8
 800d2e8:	d925      	bls.n	800d336 <ucdr_deserialize_endian_uint16_t+0x7a>
 800d2ea:	6923      	ldr	r3, [r4, #16]
 800d2ec:	60a7      	str	r7, [r4, #8]
 800d2ee:	eba7 0708 	sub.w	r7, r7, r8
 800d2f2:	443b      	add	r3, r7
 800d2f4:	f1c7 0a02 	rsb	sl, r7, #2
 800d2f8:	6123      	str	r3, [r4, #16]
 800d2fa:	4651      	mov	r1, sl
 800d2fc:	4620      	mov	r0, r4
 800d2fe:	f001 f8d7 	bl	800e4b0 <ucdr_check_final_buffer_behavior>
 800d302:	2800      	cmp	r0, #0
 800d304:	d034      	beq.n	800d370 <ucdr_deserialize_endian_uint16_t+0xb4>
 800d306:	2e01      	cmp	r6, #1
 800d308:	d043      	beq.n	800d392 <ucdr_deserialize_endian_uint16_t+0xd6>
 800d30a:	f898 3001 	ldrb.w	r3, [r8, #1]
 800d30e:	702b      	strb	r3, [r5, #0]
 800d310:	2f00      	cmp	r7, #0
 800d312:	d03a      	beq.n	800d38a <ucdr_deserialize_endian_uint16_t+0xce>
 800d314:	f898 3000 	ldrb.w	r3, [r8]
 800d318:	706b      	strb	r3, [r5, #1]
 800d31a:	6923      	ldr	r3, [r4, #16]
 800d31c:	68a2      	ldr	r2, [r4, #8]
 800d31e:	7da0      	ldrb	r0, [r4, #22]
 800d320:	2102      	movs	r1, #2
 800d322:	3302      	adds	r3, #2
 800d324:	4452      	add	r2, sl
 800d326:	1bdb      	subs	r3, r3, r7
 800d328:	7561      	strb	r1, [r4, #21]
 800d32a:	60a2      	str	r2, [r4, #8]
 800d32c:	6123      	str	r3, [r4, #16]
 800d32e:	f080 0001 	eor.w	r0, r0, #1
 800d332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d336:	2102      	movs	r1, #2
 800d338:	4620      	mov	r0, r4
 800d33a:	f001 f8b9 	bl	800e4b0 <ucdr_check_final_buffer_behavior>
 800d33e:	b178      	cbz	r0, 800d360 <ucdr_deserialize_endian_uint16_t+0xa4>
 800d340:	2e01      	cmp	r6, #1
 800d342:	68a3      	ldr	r3, [r4, #8]
 800d344:	d011      	beq.n	800d36a <ucdr_deserialize_endian_uint16_t+0xae>
 800d346:	785b      	ldrb	r3, [r3, #1]
 800d348:	702b      	strb	r3, [r5, #0]
 800d34a:	68a3      	ldr	r3, [r4, #8]
 800d34c:	781b      	ldrb	r3, [r3, #0]
 800d34e:	706b      	strb	r3, [r5, #1]
 800d350:	68a2      	ldr	r2, [r4, #8]
 800d352:	6923      	ldr	r3, [r4, #16]
 800d354:	3202      	adds	r2, #2
 800d356:	3302      	adds	r3, #2
 800d358:	2102      	movs	r1, #2
 800d35a:	60a2      	str	r2, [r4, #8]
 800d35c:	6123      	str	r3, [r4, #16]
 800d35e:	7561      	strb	r1, [r4, #21]
 800d360:	7da0      	ldrb	r0, [r4, #22]
 800d362:	f080 0001 	eor.w	r0, r0, #1
 800d366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d36a:	881b      	ldrh	r3, [r3, #0]
 800d36c:	802b      	strh	r3, [r5, #0]
 800d36e:	e7ef      	b.n	800d350 <ucdr_deserialize_endian_uint16_t+0x94>
 800d370:	68a2      	ldr	r2, [r4, #8]
 800d372:	6923      	ldr	r3, [r4, #16]
 800d374:	7da0      	ldrb	r0, [r4, #22]
 800d376:	f884 9015 	strb.w	r9, [r4, #21]
 800d37a:	1bd2      	subs	r2, r2, r7
 800d37c:	1bdb      	subs	r3, r3, r7
 800d37e:	60a2      	str	r2, [r4, #8]
 800d380:	6123      	str	r3, [r4, #16]
 800d382:	f080 0001 	eor.w	r0, r0, #1
 800d386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d38a:	68a3      	ldr	r3, [r4, #8]
 800d38c:	781b      	ldrb	r3, [r3, #0]
 800d38e:	706b      	strb	r3, [r5, #1]
 800d390:	e7c3      	b.n	800d31a <ucdr_deserialize_endian_uint16_t+0x5e>
 800d392:	4641      	mov	r1, r8
 800d394:	463a      	mov	r2, r7
 800d396:	4628      	mov	r0, r5
 800d398:	f00e f8b1 	bl	801b4fe <memcpy>
 800d39c:	68a1      	ldr	r1, [r4, #8]
 800d39e:	4652      	mov	r2, sl
 800d3a0:	19e8      	adds	r0, r5, r7
 800d3a2:	f00e f8ac 	bl	801b4fe <memcpy>
 800d3a6:	e7b8      	b.n	800d31a <ucdr_deserialize_endian_uint16_t+0x5e>

0800d3a8 <ucdr_serialize_uint32_t>:
 800d3a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d3ac:	b082      	sub	sp, #8
 800d3ae:	4604      	mov	r4, r0
 800d3b0:	9101      	str	r1, [sp, #4]
 800d3b2:	2104      	movs	r1, #4
 800d3b4:	f001 f8d0 	bl	800e558 <ucdr_buffer_alignment>
 800d3b8:	4601      	mov	r1, r0
 800d3ba:	4620      	mov	r0, r4
 800d3bc:	7d67      	ldrb	r7, [r4, #21]
 800d3be:	f001 f90f 	bl	800e5e0 <ucdr_advance_buffer>
 800d3c2:	2104      	movs	r1, #4
 800d3c4:	4620      	mov	r0, r4
 800d3c6:	f001 f867 	bl	800e498 <ucdr_check_buffer_available_for>
 800d3ca:	2800      	cmp	r0, #0
 800d3cc:	d139      	bne.n	800d442 <ucdr_serialize_uint32_t+0x9a>
 800d3ce:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800d3d2:	42ab      	cmp	r3, r5
 800d3d4:	d930      	bls.n	800d438 <ucdr_serialize_uint32_t+0x90>
 800d3d6:	1b5e      	subs	r6, r3, r5
 800d3d8:	60a3      	str	r3, [r4, #8]
 800d3da:	6923      	ldr	r3, [r4, #16]
 800d3dc:	f1c6 0804 	rsb	r8, r6, #4
 800d3e0:	4433      	add	r3, r6
 800d3e2:	6123      	str	r3, [r4, #16]
 800d3e4:	4641      	mov	r1, r8
 800d3e6:	4620      	mov	r0, r4
 800d3e8:	f001 f862 	bl	800e4b0 <ucdr_check_final_buffer_behavior>
 800d3ec:	2800      	cmp	r0, #0
 800d3ee:	d04c      	beq.n	800d48a <ucdr_serialize_uint32_t+0xe2>
 800d3f0:	7d23      	ldrb	r3, [r4, #20]
 800d3f2:	2b01      	cmp	r3, #1
 800d3f4:	d063      	beq.n	800d4be <ucdr_serialize_uint32_t+0x116>
 800d3f6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800d3fa:	702b      	strb	r3, [r5, #0]
 800d3fc:	2e00      	cmp	r6, #0
 800d3fe:	d051      	beq.n	800d4a4 <ucdr_serialize_uint32_t+0xfc>
 800d400:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800d404:	706b      	strb	r3, [r5, #1]
 800d406:	2e01      	cmp	r6, #1
 800d408:	d050      	beq.n	800d4ac <ucdr_serialize_uint32_t+0x104>
 800d40a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800d40e:	70ab      	strb	r3, [r5, #2]
 800d410:	2e02      	cmp	r6, #2
 800d412:	d04f      	beq.n	800d4b4 <ucdr_serialize_uint32_t+0x10c>
 800d414:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800d418:	70eb      	strb	r3, [r5, #3]
 800d41a:	6923      	ldr	r3, [r4, #16]
 800d41c:	68a2      	ldr	r2, [r4, #8]
 800d41e:	7da0      	ldrb	r0, [r4, #22]
 800d420:	3304      	adds	r3, #4
 800d422:	1b9e      	subs	r6, r3, r6
 800d424:	4442      	add	r2, r8
 800d426:	2304      	movs	r3, #4
 800d428:	f080 0001 	eor.w	r0, r0, #1
 800d42c:	60a2      	str	r2, [r4, #8]
 800d42e:	6126      	str	r6, [r4, #16]
 800d430:	7563      	strb	r3, [r4, #21]
 800d432:	b002      	add	sp, #8
 800d434:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d438:	2104      	movs	r1, #4
 800d43a:	4620      	mov	r0, r4
 800d43c:	f001 f838 	bl	800e4b0 <ucdr_check_final_buffer_behavior>
 800d440:	b1d0      	cbz	r0, 800d478 <ucdr_serialize_uint32_t+0xd0>
 800d442:	7d23      	ldrb	r3, [r4, #20]
 800d444:	2b01      	cmp	r3, #1
 800d446:	68a3      	ldr	r3, [r4, #8]
 800d448:	d01c      	beq.n	800d484 <ucdr_serialize_uint32_t+0xdc>
 800d44a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800d44e:	701a      	strb	r2, [r3, #0]
 800d450:	68a3      	ldr	r3, [r4, #8]
 800d452:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d456:	705a      	strb	r2, [r3, #1]
 800d458:	68a3      	ldr	r3, [r4, #8]
 800d45a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800d45e:	709a      	strb	r2, [r3, #2]
 800d460:	68a3      	ldr	r3, [r4, #8]
 800d462:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800d466:	70da      	strb	r2, [r3, #3]
 800d468:	68a2      	ldr	r2, [r4, #8]
 800d46a:	6923      	ldr	r3, [r4, #16]
 800d46c:	3204      	adds	r2, #4
 800d46e:	3304      	adds	r3, #4
 800d470:	2104      	movs	r1, #4
 800d472:	60a2      	str	r2, [r4, #8]
 800d474:	6123      	str	r3, [r4, #16]
 800d476:	7561      	strb	r1, [r4, #21]
 800d478:	7da0      	ldrb	r0, [r4, #22]
 800d47a:	f080 0001 	eor.w	r0, r0, #1
 800d47e:	b002      	add	sp, #8
 800d480:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d484:	9a01      	ldr	r2, [sp, #4]
 800d486:	601a      	str	r2, [r3, #0]
 800d488:	e7ee      	b.n	800d468 <ucdr_serialize_uint32_t+0xc0>
 800d48a:	68a2      	ldr	r2, [r4, #8]
 800d48c:	6923      	ldr	r3, [r4, #16]
 800d48e:	7da0      	ldrb	r0, [r4, #22]
 800d490:	7567      	strb	r7, [r4, #21]
 800d492:	1b92      	subs	r2, r2, r6
 800d494:	1b9b      	subs	r3, r3, r6
 800d496:	f080 0001 	eor.w	r0, r0, #1
 800d49a:	60a2      	str	r2, [r4, #8]
 800d49c:	6123      	str	r3, [r4, #16]
 800d49e:	b002      	add	sp, #8
 800d4a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d4a4:	68a3      	ldr	r3, [r4, #8]
 800d4a6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d4aa:	701a      	strb	r2, [r3, #0]
 800d4ac:	68a3      	ldr	r3, [r4, #8]
 800d4ae:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800d4b2:	701a      	strb	r2, [r3, #0]
 800d4b4:	68a3      	ldr	r3, [r4, #8]
 800d4b6:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800d4ba:	701a      	strb	r2, [r3, #0]
 800d4bc:	e7ad      	b.n	800d41a <ucdr_serialize_uint32_t+0x72>
 800d4be:	4628      	mov	r0, r5
 800d4c0:	ad01      	add	r5, sp, #4
 800d4c2:	4629      	mov	r1, r5
 800d4c4:	4632      	mov	r2, r6
 800d4c6:	f00e f81a 	bl	801b4fe <memcpy>
 800d4ca:	68a0      	ldr	r0, [r4, #8]
 800d4cc:	4642      	mov	r2, r8
 800d4ce:	19a9      	adds	r1, r5, r6
 800d4d0:	f00e f815 	bl	801b4fe <memcpy>
 800d4d4:	e7a1      	b.n	800d41a <ucdr_serialize_uint32_t+0x72>
 800d4d6:	bf00      	nop

0800d4d8 <ucdr_serialize_endian_uint32_t>:
 800d4d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d4dc:	b083      	sub	sp, #12
 800d4de:	460d      	mov	r5, r1
 800d4e0:	2104      	movs	r1, #4
 800d4e2:	4604      	mov	r4, r0
 800d4e4:	9201      	str	r2, [sp, #4]
 800d4e6:	f001 f837 	bl	800e558 <ucdr_buffer_alignment>
 800d4ea:	4601      	mov	r1, r0
 800d4ec:	4620      	mov	r0, r4
 800d4ee:	f894 8015 	ldrb.w	r8, [r4, #21]
 800d4f2:	f001 f875 	bl	800e5e0 <ucdr_advance_buffer>
 800d4f6:	2104      	movs	r1, #4
 800d4f8:	4620      	mov	r0, r4
 800d4fa:	f000 ffcd 	bl	800e498 <ucdr_check_buffer_available_for>
 800d4fe:	2800      	cmp	r0, #0
 800d500:	d138      	bne.n	800d574 <ucdr_serialize_endian_uint32_t+0x9c>
 800d502:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800d506:	42b7      	cmp	r7, r6
 800d508:	d92f      	bls.n	800d56a <ucdr_serialize_endian_uint32_t+0x92>
 800d50a:	6923      	ldr	r3, [r4, #16]
 800d50c:	60a7      	str	r7, [r4, #8]
 800d50e:	1bbf      	subs	r7, r7, r6
 800d510:	443b      	add	r3, r7
 800d512:	f1c7 0904 	rsb	r9, r7, #4
 800d516:	6123      	str	r3, [r4, #16]
 800d518:	4649      	mov	r1, r9
 800d51a:	4620      	mov	r0, r4
 800d51c:	f000 ffc8 	bl	800e4b0 <ucdr_check_final_buffer_behavior>
 800d520:	2800      	cmp	r0, #0
 800d522:	d04a      	beq.n	800d5ba <ucdr_serialize_endian_uint32_t+0xe2>
 800d524:	2d01      	cmp	r5, #1
 800d526:	d063      	beq.n	800d5f0 <ucdr_serialize_endian_uint32_t+0x118>
 800d528:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800d52c:	7033      	strb	r3, [r6, #0]
 800d52e:	2f00      	cmp	r7, #0
 800d530:	d051      	beq.n	800d5d6 <ucdr_serialize_endian_uint32_t+0xfe>
 800d532:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800d536:	7073      	strb	r3, [r6, #1]
 800d538:	2f01      	cmp	r7, #1
 800d53a:	d050      	beq.n	800d5de <ucdr_serialize_endian_uint32_t+0x106>
 800d53c:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800d540:	70b3      	strb	r3, [r6, #2]
 800d542:	2f02      	cmp	r7, #2
 800d544:	d04f      	beq.n	800d5e6 <ucdr_serialize_endian_uint32_t+0x10e>
 800d546:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800d54a:	70f3      	strb	r3, [r6, #3]
 800d54c:	6923      	ldr	r3, [r4, #16]
 800d54e:	68a2      	ldr	r2, [r4, #8]
 800d550:	7da0      	ldrb	r0, [r4, #22]
 800d552:	3304      	adds	r3, #4
 800d554:	444a      	add	r2, r9
 800d556:	1bdb      	subs	r3, r3, r7
 800d558:	2104      	movs	r1, #4
 800d55a:	f080 0001 	eor.w	r0, r0, #1
 800d55e:	60a2      	str	r2, [r4, #8]
 800d560:	6123      	str	r3, [r4, #16]
 800d562:	7561      	strb	r1, [r4, #21]
 800d564:	b003      	add	sp, #12
 800d566:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d56a:	2104      	movs	r1, #4
 800d56c:	4620      	mov	r0, r4
 800d56e:	f000 ff9f 	bl	800e4b0 <ucdr_check_final_buffer_behavior>
 800d572:	b1c8      	cbz	r0, 800d5a8 <ucdr_serialize_endian_uint32_t+0xd0>
 800d574:	2d01      	cmp	r5, #1
 800d576:	68a3      	ldr	r3, [r4, #8]
 800d578:	d01c      	beq.n	800d5b4 <ucdr_serialize_endian_uint32_t+0xdc>
 800d57a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800d57e:	701a      	strb	r2, [r3, #0]
 800d580:	68a3      	ldr	r3, [r4, #8]
 800d582:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d586:	705a      	strb	r2, [r3, #1]
 800d588:	68a3      	ldr	r3, [r4, #8]
 800d58a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800d58e:	709a      	strb	r2, [r3, #2]
 800d590:	68a3      	ldr	r3, [r4, #8]
 800d592:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800d596:	70da      	strb	r2, [r3, #3]
 800d598:	68a2      	ldr	r2, [r4, #8]
 800d59a:	6923      	ldr	r3, [r4, #16]
 800d59c:	3204      	adds	r2, #4
 800d59e:	3304      	adds	r3, #4
 800d5a0:	2104      	movs	r1, #4
 800d5a2:	60a2      	str	r2, [r4, #8]
 800d5a4:	6123      	str	r3, [r4, #16]
 800d5a6:	7561      	strb	r1, [r4, #21]
 800d5a8:	7da0      	ldrb	r0, [r4, #22]
 800d5aa:	f080 0001 	eor.w	r0, r0, #1
 800d5ae:	b003      	add	sp, #12
 800d5b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d5b4:	9a01      	ldr	r2, [sp, #4]
 800d5b6:	601a      	str	r2, [r3, #0]
 800d5b8:	e7ee      	b.n	800d598 <ucdr_serialize_endian_uint32_t+0xc0>
 800d5ba:	68a2      	ldr	r2, [r4, #8]
 800d5bc:	6923      	ldr	r3, [r4, #16]
 800d5be:	7da0      	ldrb	r0, [r4, #22]
 800d5c0:	f884 8015 	strb.w	r8, [r4, #21]
 800d5c4:	1bd2      	subs	r2, r2, r7
 800d5c6:	1bdb      	subs	r3, r3, r7
 800d5c8:	f080 0001 	eor.w	r0, r0, #1
 800d5cc:	60a2      	str	r2, [r4, #8]
 800d5ce:	6123      	str	r3, [r4, #16]
 800d5d0:	b003      	add	sp, #12
 800d5d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d5d6:	68a3      	ldr	r3, [r4, #8]
 800d5d8:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d5dc:	701a      	strb	r2, [r3, #0]
 800d5de:	68a3      	ldr	r3, [r4, #8]
 800d5e0:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800d5e4:	701a      	strb	r2, [r3, #0]
 800d5e6:	68a3      	ldr	r3, [r4, #8]
 800d5e8:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800d5ec:	701a      	strb	r2, [r3, #0]
 800d5ee:	e7ad      	b.n	800d54c <ucdr_serialize_endian_uint32_t+0x74>
 800d5f0:	ad01      	add	r5, sp, #4
 800d5f2:	4629      	mov	r1, r5
 800d5f4:	463a      	mov	r2, r7
 800d5f6:	4630      	mov	r0, r6
 800d5f8:	f00d ff81 	bl	801b4fe <memcpy>
 800d5fc:	68a0      	ldr	r0, [r4, #8]
 800d5fe:	464a      	mov	r2, r9
 800d600:	19e9      	adds	r1, r5, r7
 800d602:	f00d ff7c 	bl	801b4fe <memcpy>
 800d606:	e7a1      	b.n	800d54c <ucdr_serialize_endian_uint32_t+0x74>

0800d608 <ucdr_deserialize_uint32_t>:
 800d608:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d60c:	460d      	mov	r5, r1
 800d60e:	2104      	movs	r1, #4
 800d610:	4604      	mov	r4, r0
 800d612:	f000 ffa1 	bl	800e558 <ucdr_buffer_alignment>
 800d616:	4601      	mov	r1, r0
 800d618:	4620      	mov	r0, r4
 800d61a:	f894 8015 	ldrb.w	r8, [r4, #21]
 800d61e:	f000 ffdf 	bl	800e5e0 <ucdr_advance_buffer>
 800d622:	2104      	movs	r1, #4
 800d624:	4620      	mov	r0, r4
 800d626:	f000 ff37 	bl	800e498 <ucdr_check_buffer_available_for>
 800d62a:	2800      	cmp	r0, #0
 800d62c:	d138      	bne.n	800d6a0 <ucdr_deserialize_uint32_t+0x98>
 800d62e:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800d632:	42b7      	cmp	r7, r6
 800d634:	d92f      	bls.n	800d696 <ucdr_deserialize_uint32_t+0x8e>
 800d636:	6923      	ldr	r3, [r4, #16]
 800d638:	60a7      	str	r7, [r4, #8]
 800d63a:	1bbf      	subs	r7, r7, r6
 800d63c:	443b      	add	r3, r7
 800d63e:	f1c7 0904 	rsb	r9, r7, #4
 800d642:	6123      	str	r3, [r4, #16]
 800d644:	4649      	mov	r1, r9
 800d646:	4620      	mov	r0, r4
 800d648:	f000 ff32 	bl	800e4b0 <ucdr_check_final_buffer_behavior>
 800d64c:	2800      	cmp	r0, #0
 800d64e:	d046      	beq.n	800d6de <ucdr_deserialize_uint32_t+0xd6>
 800d650:	7d23      	ldrb	r3, [r4, #20]
 800d652:	2b01      	cmp	r3, #1
 800d654:	d05c      	beq.n	800d710 <ucdr_deserialize_uint32_t+0x108>
 800d656:	78f3      	ldrb	r3, [r6, #3]
 800d658:	702b      	strb	r3, [r5, #0]
 800d65a:	2f00      	cmp	r7, #0
 800d65c:	d04c      	beq.n	800d6f8 <ucdr_deserialize_uint32_t+0xf0>
 800d65e:	78b3      	ldrb	r3, [r6, #2]
 800d660:	706b      	strb	r3, [r5, #1]
 800d662:	2f01      	cmp	r7, #1
 800d664:	f105 0302 	add.w	r3, r5, #2
 800d668:	d04a      	beq.n	800d700 <ucdr_deserialize_uint32_t+0xf8>
 800d66a:	7873      	ldrb	r3, [r6, #1]
 800d66c:	70ab      	strb	r3, [r5, #2]
 800d66e:	2f02      	cmp	r7, #2
 800d670:	f105 0303 	add.w	r3, r5, #3
 800d674:	d048      	beq.n	800d708 <ucdr_deserialize_uint32_t+0x100>
 800d676:	7833      	ldrb	r3, [r6, #0]
 800d678:	70eb      	strb	r3, [r5, #3]
 800d67a:	6923      	ldr	r3, [r4, #16]
 800d67c:	68a2      	ldr	r2, [r4, #8]
 800d67e:	7da0      	ldrb	r0, [r4, #22]
 800d680:	2104      	movs	r1, #4
 800d682:	3304      	adds	r3, #4
 800d684:	444a      	add	r2, r9
 800d686:	1bdb      	subs	r3, r3, r7
 800d688:	7561      	strb	r1, [r4, #21]
 800d68a:	60a2      	str	r2, [r4, #8]
 800d68c:	6123      	str	r3, [r4, #16]
 800d68e:	f080 0001 	eor.w	r0, r0, #1
 800d692:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d696:	2104      	movs	r1, #4
 800d698:	4620      	mov	r0, r4
 800d69a:	f000 ff09 	bl	800e4b0 <ucdr_check_final_buffer_behavior>
 800d69e:	b1b0      	cbz	r0, 800d6ce <ucdr_deserialize_uint32_t+0xc6>
 800d6a0:	7d23      	ldrb	r3, [r4, #20]
 800d6a2:	2b01      	cmp	r3, #1
 800d6a4:	68a3      	ldr	r3, [r4, #8]
 800d6a6:	d017      	beq.n	800d6d8 <ucdr_deserialize_uint32_t+0xd0>
 800d6a8:	78db      	ldrb	r3, [r3, #3]
 800d6aa:	702b      	strb	r3, [r5, #0]
 800d6ac:	68a3      	ldr	r3, [r4, #8]
 800d6ae:	789b      	ldrb	r3, [r3, #2]
 800d6b0:	706b      	strb	r3, [r5, #1]
 800d6b2:	68a3      	ldr	r3, [r4, #8]
 800d6b4:	785b      	ldrb	r3, [r3, #1]
 800d6b6:	70ab      	strb	r3, [r5, #2]
 800d6b8:	68a3      	ldr	r3, [r4, #8]
 800d6ba:	781b      	ldrb	r3, [r3, #0]
 800d6bc:	70eb      	strb	r3, [r5, #3]
 800d6be:	68a2      	ldr	r2, [r4, #8]
 800d6c0:	6923      	ldr	r3, [r4, #16]
 800d6c2:	3204      	adds	r2, #4
 800d6c4:	3304      	adds	r3, #4
 800d6c6:	2104      	movs	r1, #4
 800d6c8:	60a2      	str	r2, [r4, #8]
 800d6ca:	6123      	str	r3, [r4, #16]
 800d6cc:	7561      	strb	r1, [r4, #21]
 800d6ce:	7da0      	ldrb	r0, [r4, #22]
 800d6d0:	f080 0001 	eor.w	r0, r0, #1
 800d6d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d6d8:	681b      	ldr	r3, [r3, #0]
 800d6da:	602b      	str	r3, [r5, #0]
 800d6dc:	e7ef      	b.n	800d6be <ucdr_deserialize_uint32_t+0xb6>
 800d6de:	68a2      	ldr	r2, [r4, #8]
 800d6e0:	6923      	ldr	r3, [r4, #16]
 800d6e2:	7da0      	ldrb	r0, [r4, #22]
 800d6e4:	f884 8015 	strb.w	r8, [r4, #21]
 800d6e8:	1bd2      	subs	r2, r2, r7
 800d6ea:	1bdb      	subs	r3, r3, r7
 800d6ec:	60a2      	str	r2, [r4, #8]
 800d6ee:	6123      	str	r3, [r4, #16]
 800d6f0:	f080 0001 	eor.w	r0, r0, #1
 800d6f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d6f8:	68a3      	ldr	r3, [r4, #8]
 800d6fa:	789b      	ldrb	r3, [r3, #2]
 800d6fc:	706b      	strb	r3, [r5, #1]
 800d6fe:	1cab      	adds	r3, r5, #2
 800d700:	68a2      	ldr	r2, [r4, #8]
 800d702:	7852      	ldrb	r2, [r2, #1]
 800d704:	f803 2b01 	strb.w	r2, [r3], #1
 800d708:	68a2      	ldr	r2, [r4, #8]
 800d70a:	7812      	ldrb	r2, [r2, #0]
 800d70c:	701a      	strb	r2, [r3, #0]
 800d70e:	e7b4      	b.n	800d67a <ucdr_deserialize_uint32_t+0x72>
 800d710:	4631      	mov	r1, r6
 800d712:	463a      	mov	r2, r7
 800d714:	4628      	mov	r0, r5
 800d716:	f00d fef2 	bl	801b4fe <memcpy>
 800d71a:	68a1      	ldr	r1, [r4, #8]
 800d71c:	464a      	mov	r2, r9
 800d71e:	19e8      	adds	r0, r5, r7
 800d720:	f00d feed 	bl	801b4fe <memcpy>
 800d724:	e7a9      	b.n	800d67a <ucdr_deserialize_uint32_t+0x72>
 800d726:	bf00      	nop

0800d728 <ucdr_deserialize_endian_uint32_t>:
 800d728:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d72c:	460e      	mov	r6, r1
 800d72e:	2104      	movs	r1, #4
 800d730:	4604      	mov	r4, r0
 800d732:	4615      	mov	r5, r2
 800d734:	f000 ff10 	bl	800e558 <ucdr_buffer_alignment>
 800d738:	4601      	mov	r1, r0
 800d73a:	4620      	mov	r0, r4
 800d73c:	f894 9015 	ldrb.w	r9, [r4, #21]
 800d740:	f000 ff4e 	bl	800e5e0 <ucdr_advance_buffer>
 800d744:	2104      	movs	r1, #4
 800d746:	4620      	mov	r0, r4
 800d748:	f000 fea6 	bl	800e498 <ucdr_check_buffer_available_for>
 800d74c:	2800      	cmp	r0, #0
 800d74e:	d13c      	bne.n	800d7ca <ucdr_deserialize_endian_uint32_t+0xa2>
 800d750:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 800d754:	42bb      	cmp	r3, r7
 800d756:	d933      	bls.n	800d7c0 <ucdr_deserialize_endian_uint32_t+0x98>
 800d758:	eba3 0807 	sub.w	r8, r3, r7
 800d75c:	60a3      	str	r3, [r4, #8]
 800d75e:	6923      	ldr	r3, [r4, #16]
 800d760:	f1c8 0a04 	rsb	sl, r8, #4
 800d764:	4443      	add	r3, r8
 800d766:	6123      	str	r3, [r4, #16]
 800d768:	4651      	mov	r1, sl
 800d76a:	4620      	mov	r0, r4
 800d76c:	f000 fea0 	bl	800e4b0 <ucdr_check_final_buffer_behavior>
 800d770:	2800      	cmp	r0, #0
 800d772:	d048      	beq.n	800d806 <ucdr_deserialize_endian_uint32_t+0xde>
 800d774:	2e01      	cmp	r6, #1
 800d776:	d061      	beq.n	800d83c <ucdr_deserialize_endian_uint32_t+0x114>
 800d778:	78fb      	ldrb	r3, [r7, #3]
 800d77a:	702b      	strb	r3, [r5, #0]
 800d77c:	f1b8 0f00 	cmp.w	r8, #0
 800d780:	d050      	beq.n	800d824 <ucdr_deserialize_endian_uint32_t+0xfc>
 800d782:	78bb      	ldrb	r3, [r7, #2]
 800d784:	706b      	strb	r3, [r5, #1]
 800d786:	f1b8 0f01 	cmp.w	r8, #1
 800d78a:	f105 0302 	add.w	r3, r5, #2
 800d78e:	d04d      	beq.n	800d82c <ucdr_deserialize_endian_uint32_t+0x104>
 800d790:	787b      	ldrb	r3, [r7, #1]
 800d792:	70ab      	strb	r3, [r5, #2]
 800d794:	f1b8 0f02 	cmp.w	r8, #2
 800d798:	f105 0303 	add.w	r3, r5, #3
 800d79c:	d04a      	beq.n	800d834 <ucdr_deserialize_endian_uint32_t+0x10c>
 800d79e:	783b      	ldrb	r3, [r7, #0]
 800d7a0:	70eb      	strb	r3, [r5, #3]
 800d7a2:	6923      	ldr	r3, [r4, #16]
 800d7a4:	68a2      	ldr	r2, [r4, #8]
 800d7a6:	7da0      	ldrb	r0, [r4, #22]
 800d7a8:	2104      	movs	r1, #4
 800d7aa:	3304      	adds	r3, #4
 800d7ac:	4452      	add	r2, sl
 800d7ae:	eba3 0308 	sub.w	r3, r3, r8
 800d7b2:	7561      	strb	r1, [r4, #21]
 800d7b4:	60a2      	str	r2, [r4, #8]
 800d7b6:	6123      	str	r3, [r4, #16]
 800d7b8:	f080 0001 	eor.w	r0, r0, #1
 800d7bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d7c0:	2104      	movs	r1, #4
 800d7c2:	4620      	mov	r0, r4
 800d7c4:	f000 fe74 	bl	800e4b0 <ucdr_check_final_buffer_behavior>
 800d7c8:	b1a8      	cbz	r0, 800d7f6 <ucdr_deserialize_endian_uint32_t+0xce>
 800d7ca:	2e01      	cmp	r6, #1
 800d7cc:	68a3      	ldr	r3, [r4, #8]
 800d7ce:	d017      	beq.n	800d800 <ucdr_deserialize_endian_uint32_t+0xd8>
 800d7d0:	78db      	ldrb	r3, [r3, #3]
 800d7d2:	702b      	strb	r3, [r5, #0]
 800d7d4:	68a3      	ldr	r3, [r4, #8]
 800d7d6:	789b      	ldrb	r3, [r3, #2]
 800d7d8:	706b      	strb	r3, [r5, #1]
 800d7da:	68a3      	ldr	r3, [r4, #8]
 800d7dc:	785b      	ldrb	r3, [r3, #1]
 800d7de:	70ab      	strb	r3, [r5, #2]
 800d7e0:	68a3      	ldr	r3, [r4, #8]
 800d7e2:	781b      	ldrb	r3, [r3, #0]
 800d7e4:	70eb      	strb	r3, [r5, #3]
 800d7e6:	68a2      	ldr	r2, [r4, #8]
 800d7e8:	6923      	ldr	r3, [r4, #16]
 800d7ea:	3204      	adds	r2, #4
 800d7ec:	3304      	adds	r3, #4
 800d7ee:	2104      	movs	r1, #4
 800d7f0:	60a2      	str	r2, [r4, #8]
 800d7f2:	6123      	str	r3, [r4, #16]
 800d7f4:	7561      	strb	r1, [r4, #21]
 800d7f6:	7da0      	ldrb	r0, [r4, #22]
 800d7f8:	f080 0001 	eor.w	r0, r0, #1
 800d7fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d800:	681b      	ldr	r3, [r3, #0]
 800d802:	602b      	str	r3, [r5, #0]
 800d804:	e7ef      	b.n	800d7e6 <ucdr_deserialize_endian_uint32_t+0xbe>
 800d806:	68a2      	ldr	r2, [r4, #8]
 800d808:	6923      	ldr	r3, [r4, #16]
 800d80a:	7da0      	ldrb	r0, [r4, #22]
 800d80c:	f884 9015 	strb.w	r9, [r4, #21]
 800d810:	eba2 0208 	sub.w	r2, r2, r8
 800d814:	eba3 0308 	sub.w	r3, r3, r8
 800d818:	60a2      	str	r2, [r4, #8]
 800d81a:	6123      	str	r3, [r4, #16]
 800d81c:	f080 0001 	eor.w	r0, r0, #1
 800d820:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d824:	68a3      	ldr	r3, [r4, #8]
 800d826:	789b      	ldrb	r3, [r3, #2]
 800d828:	706b      	strb	r3, [r5, #1]
 800d82a:	1cab      	adds	r3, r5, #2
 800d82c:	68a2      	ldr	r2, [r4, #8]
 800d82e:	7852      	ldrb	r2, [r2, #1]
 800d830:	f803 2b01 	strb.w	r2, [r3], #1
 800d834:	68a2      	ldr	r2, [r4, #8]
 800d836:	7812      	ldrb	r2, [r2, #0]
 800d838:	701a      	strb	r2, [r3, #0]
 800d83a:	e7b2      	b.n	800d7a2 <ucdr_deserialize_endian_uint32_t+0x7a>
 800d83c:	4639      	mov	r1, r7
 800d83e:	4642      	mov	r2, r8
 800d840:	4628      	mov	r0, r5
 800d842:	f00d fe5c 	bl	801b4fe <memcpy>
 800d846:	68a1      	ldr	r1, [r4, #8]
 800d848:	4652      	mov	r2, sl
 800d84a:	eb05 0008 	add.w	r0, r5, r8
 800d84e:	f00d fe56 	bl	801b4fe <memcpy>
 800d852:	e7a6      	b.n	800d7a2 <ucdr_deserialize_endian_uint32_t+0x7a>

0800d854 <ucdr_serialize_uint64_t>:
 800d854:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d858:	2108      	movs	r1, #8
 800d85a:	b082      	sub	sp, #8
 800d85c:	4604      	mov	r4, r0
 800d85e:	e9cd 2300 	strd	r2, r3, [sp]
 800d862:	f000 fe79 	bl	800e558 <ucdr_buffer_alignment>
 800d866:	4601      	mov	r1, r0
 800d868:	4620      	mov	r0, r4
 800d86a:	7d67      	ldrb	r7, [r4, #21]
 800d86c:	f000 feb8 	bl	800e5e0 <ucdr_advance_buffer>
 800d870:	2108      	movs	r1, #8
 800d872:	4620      	mov	r0, r4
 800d874:	f000 fe10 	bl	800e498 <ucdr_check_buffer_available_for>
 800d878:	2800      	cmp	r0, #0
 800d87a:	d14e      	bne.n	800d91a <ucdr_serialize_uint64_t+0xc6>
 800d87c:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800d880:	42ab      	cmp	r3, r5
 800d882:	d945      	bls.n	800d910 <ucdr_serialize_uint64_t+0xbc>
 800d884:	1b5e      	subs	r6, r3, r5
 800d886:	60a3      	str	r3, [r4, #8]
 800d888:	6923      	ldr	r3, [r4, #16]
 800d88a:	f1c6 0808 	rsb	r8, r6, #8
 800d88e:	4433      	add	r3, r6
 800d890:	6123      	str	r3, [r4, #16]
 800d892:	4641      	mov	r1, r8
 800d894:	4620      	mov	r0, r4
 800d896:	f000 fe0b 	bl	800e4b0 <ucdr_check_final_buffer_behavior>
 800d89a:	2800      	cmp	r0, #0
 800d89c:	d074      	beq.n	800d988 <ucdr_serialize_uint64_t+0x134>
 800d89e:	7d23      	ldrb	r3, [r4, #20]
 800d8a0:	2b01      	cmp	r3, #1
 800d8a2:	f000 809b 	beq.w	800d9dc <ucdr_serialize_uint64_t+0x188>
 800d8a6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800d8aa:	702b      	strb	r3, [r5, #0]
 800d8ac:	2e00      	cmp	r6, #0
 800d8ae:	d078      	beq.n	800d9a2 <ucdr_serialize_uint64_t+0x14e>
 800d8b0:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800d8b4:	706b      	strb	r3, [r5, #1]
 800d8b6:	2e01      	cmp	r6, #1
 800d8b8:	d077      	beq.n	800d9aa <ucdr_serialize_uint64_t+0x156>
 800d8ba:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800d8be:	70ab      	strb	r3, [r5, #2]
 800d8c0:	2e02      	cmp	r6, #2
 800d8c2:	d076      	beq.n	800d9b2 <ucdr_serialize_uint64_t+0x15e>
 800d8c4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800d8c8:	70eb      	strb	r3, [r5, #3]
 800d8ca:	2e03      	cmp	r6, #3
 800d8cc:	d075      	beq.n	800d9ba <ucdr_serialize_uint64_t+0x166>
 800d8ce:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800d8d2:	712b      	strb	r3, [r5, #4]
 800d8d4:	2e04      	cmp	r6, #4
 800d8d6:	d074      	beq.n	800d9c2 <ucdr_serialize_uint64_t+0x16e>
 800d8d8:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800d8dc:	716b      	strb	r3, [r5, #5]
 800d8de:	2e05      	cmp	r6, #5
 800d8e0:	d073      	beq.n	800d9ca <ucdr_serialize_uint64_t+0x176>
 800d8e2:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800d8e6:	71ab      	strb	r3, [r5, #6]
 800d8e8:	2e06      	cmp	r6, #6
 800d8ea:	d072      	beq.n	800d9d2 <ucdr_serialize_uint64_t+0x17e>
 800d8ec:	f89d 3000 	ldrb.w	r3, [sp]
 800d8f0:	71eb      	strb	r3, [r5, #7]
 800d8f2:	6923      	ldr	r3, [r4, #16]
 800d8f4:	68a2      	ldr	r2, [r4, #8]
 800d8f6:	7da0      	ldrb	r0, [r4, #22]
 800d8f8:	3308      	adds	r3, #8
 800d8fa:	1b9e      	subs	r6, r3, r6
 800d8fc:	4442      	add	r2, r8
 800d8fe:	2308      	movs	r3, #8
 800d900:	f080 0001 	eor.w	r0, r0, #1
 800d904:	60a2      	str	r2, [r4, #8]
 800d906:	6126      	str	r6, [r4, #16]
 800d908:	7563      	strb	r3, [r4, #21]
 800d90a:	b002      	add	sp, #8
 800d90c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d910:	2108      	movs	r1, #8
 800d912:	4620      	mov	r0, r4
 800d914:	f000 fdcc 	bl	800e4b0 <ucdr_check_final_buffer_behavior>
 800d918:	b350      	cbz	r0, 800d970 <ucdr_serialize_uint64_t+0x11c>
 800d91a:	7d23      	ldrb	r3, [r4, #20]
 800d91c:	2b01      	cmp	r3, #1
 800d91e:	d02d      	beq.n	800d97c <ucdr_serialize_uint64_t+0x128>
 800d920:	68a3      	ldr	r3, [r4, #8]
 800d922:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800d926:	701a      	strb	r2, [r3, #0]
 800d928:	68a3      	ldr	r3, [r4, #8]
 800d92a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d92e:	705a      	strb	r2, [r3, #1]
 800d930:	68a3      	ldr	r3, [r4, #8]
 800d932:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800d936:	709a      	strb	r2, [r3, #2]
 800d938:	68a3      	ldr	r3, [r4, #8]
 800d93a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800d93e:	70da      	strb	r2, [r3, #3]
 800d940:	68a3      	ldr	r3, [r4, #8]
 800d942:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800d946:	711a      	strb	r2, [r3, #4]
 800d948:	68a3      	ldr	r3, [r4, #8]
 800d94a:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800d94e:	715a      	strb	r2, [r3, #5]
 800d950:	68a3      	ldr	r3, [r4, #8]
 800d952:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800d956:	719a      	strb	r2, [r3, #6]
 800d958:	68a3      	ldr	r3, [r4, #8]
 800d95a:	f89d 2000 	ldrb.w	r2, [sp]
 800d95e:	71da      	strb	r2, [r3, #7]
 800d960:	68a2      	ldr	r2, [r4, #8]
 800d962:	6923      	ldr	r3, [r4, #16]
 800d964:	3208      	adds	r2, #8
 800d966:	3308      	adds	r3, #8
 800d968:	2108      	movs	r1, #8
 800d96a:	60a2      	str	r2, [r4, #8]
 800d96c:	6123      	str	r3, [r4, #16]
 800d96e:	7561      	strb	r1, [r4, #21]
 800d970:	7da0      	ldrb	r0, [r4, #22]
 800d972:	f080 0001 	eor.w	r0, r0, #1
 800d976:	b002      	add	sp, #8
 800d978:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d97c:	466b      	mov	r3, sp
 800d97e:	cb03      	ldmia	r3!, {r0, r1}
 800d980:	68a3      	ldr	r3, [r4, #8]
 800d982:	6018      	str	r0, [r3, #0]
 800d984:	6059      	str	r1, [r3, #4]
 800d986:	e7eb      	b.n	800d960 <ucdr_serialize_uint64_t+0x10c>
 800d988:	68a2      	ldr	r2, [r4, #8]
 800d98a:	6923      	ldr	r3, [r4, #16]
 800d98c:	7da0      	ldrb	r0, [r4, #22]
 800d98e:	7567      	strb	r7, [r4, #21]
 800d990:	1b92      	subs	r2, r2, r6
 800d992:	1b9b      	subs	r3, r3, r6
 800d994:	f080 0001 	eor.w	r0, r0, #1
 800d998:	60a2      	str	r2, [r4, #8]
 800d99a:	6123      	str	r3, [r4, #16]
 800d99c:	b002      	add	sp, #8
 800d99e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d9a2:	68a3      	ldr	r3, [r4, #8]
 800d9a4:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d9a8:	701a      	strb	r2, [r3, #0]
 800d9aa:	68a3      	ldr	r3, [r4, #8]
 800d9ac:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800d9b0:	701a      	strb	r2, [r3, #0]
 800d9b2:	68a3      	ldr	r3, [r4, #8]
 800d9b4:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800d9b8:	701a      	strb	r2, [r3, #0]
 800d9ba:	68a3      	ldr	r3, [r4, #8]
 800d9bc:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800d9c0:	701a      	strb	r2, [r3, #0]
 800d9c2:	68a3      	ldr	r3, [r4, #8]
 800d9c4:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800d9c8:	701a      	strb	r2, [r3, #0]
 800d9ca:	68a3      	ldr	r3, [r4, #8]
 800d9cc:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800d9d0:	701a      	strb	r2, [r3, #0]
 800d9d2:	68a3      	ldr	r3, [r4, #8]
 800d9d4:	f89d 2000 	ldrb.w	r2, [sp]
 800d9d8:	701a      	strb	r2, [r3, #0]
 800d9da:	e78a      	b.n	800d8f2 <ucdr_serialize_uint64_t+0x9e>
 800d9dc:	4628      	mov	r0, r5
 800d9de:	466d      	mov	r5, sp
 800d9e0:	4629      	mov	r1, r5
 800d9e2:	4632      	mov	r2, r6
 800d9e4:	f00d fd8b 	bl	801b4fe <memcpy>
 800d9e8:	68a0      	ldr	r0, [r4, #8]
 800d9ea:	4642      	mov	r2, r8
 800d9ec:	19a9      	adds	r1, r5, r6
 800d9ee:	f00d fd86 	bl	801b4fe <memcpy>
 800d9f2:	e77e      	b.n	800d8f2 <ucdr_serialize_uint64_t+0x9e>

0800d9f4 <ucdr_serialize_int16_t>:
 800d9f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d9f8:	b082      	sub	sp, #8
 800d9fa:	460b      	mov	r3, r1
 800d9fc:	2102      	movs	r1, #2
 800d9fe:	4604      	mov	r4, r0
 800da00:	f8ad 3006 	strh.w	r3, [sp, #6]
 800da04:	f000 fda8 	bl	800e558 <ucdr_buffer_alignment>
 800da08:	4601      	mov	r1, r0
 800da0a:	4620      	mov	r0, r4
 800da0c:	7d67      	ldrb	r7, [r4, #21]
 800da0e:	f000 fde7 	bl	800e5e0 <ucdr_advance_buffer>
 800da12:	2102      	movs	r1, #2
 800da14:	4620      	mov	r0, r4
 800da16:	f000 fd3f 	bl	800e498 <ucdr_check_buffer_available_for>
 800da1a:	bb78      	cbnz	r0, 800da7c <ucdr_serialize_int16_t+0x88>
 800da1c:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800da20:	42ab      	cmp	r3, r5
 800da22:	d926      	bls.n	800da72 <ucdr_serialize_int16_t+0x7e>
 800da24:	1b5e      	subs	r6, r3, r5
 800da26:	60a3      	str	r3, [r4, #8]
 800da28:	6923      	ldr	r3, [r4, #16]
 800da2a:	f1c6 0802 	rsb	r8, r6, #2
 800da2e:	4433      	add	r3, r6
 800da30:	6123      	str	r3, [r4, #16]
 800da32:	4641      	mov	r1, r8
 800da34:	4620      	mov	r0, r4
 800da36:	f000 fd3b 	bl	800e4b0 <ucdr_check_final_buffer_behavior>
 800da3a:	2800      	cmp	r0, #0
 800da3c:	d03b      	beq.n	800dab6 <ucdr_serialize_int16_t+0xc2>
 800da3e:	7d23      	ldrb	r3, [r4, #20]
 800da40:	2b01      	cmp	r3, #1
 800da42:	d04a      	beq.n	800dada <ucdr_serialize_int16_t+0xe6>
 800da44:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800da48:	702b      	strb	r3, [r5, #0]
 800da4a:	2e00      	cmp	r6, #0
 800da4c:	d040      	beq.n	800dad0 <ucdr_serialize_int16_t+0xdc>
 800da4e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800da52:	706b      	strb	r3, [r5, #1]
 800da54:	6923      	ldr	r3, [r4, #16]
 800da56:	68a2      	ldr	r2, [r4, #8]
 800da58:	7da0      	ldrb	r0, [r4, #22]
 800da5a:	3302      	adds	r3, #2
 800da5c:	1b9e      	subs	r6, r3, r6
 800da5e:	4442      	add	r2, r8
 800da60:	2302      	movs	r3, #2
 800da62:	f080 0001 	eor.w	r0, r0, #1
 800da66:	60a2      	str	r2, [r4, #8]
 800da68:	6126      	str	r6, [r4, #16]
 800da6a:	7563      	strb	r3, [r4, #21]
 800da6c:	b002      	add	sp, #8
 800da6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800da72:	2102      	movs	r1, #2
 800da74:	4620      	mov	r0, r4
 800da76:	f000 fd1b 	bl	800e4b0 <ucdr_check_final_buffer_behavior>
 800da7a:	b190      	cbz	r0, 800daa2 <ucdr_serialize_int16_t+0xae>
 800da7c:	7d23      	ldrb	r3, [r4, #20]
 800da7e:	2b01      	cmp	r3, #1
 800da80:	68a3      	ldr	r3, [r4, #8]
 800da82:	d014      	beq.n	800daae <ucdr_serialize_int16_t+0xba>
 800da84:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800da88:	701a      	strb	r2, [r3, #0]
 800da8a:	68a3      	ldr	r3, [r4, #8]
 800da8c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800da90:	705a      	strb	r2, [r3, #1]
 800da92:	68a2      	ldr	r2, [r4, #8]
 800da94:	6923      	ldr	r3, [r4, #16]
 800da96:	3202      	adds	r2, #2
 800da98:	3302      	adds	r3, #2
 800da9a:	2102      	movs	r1, #2
 800da9c:	60a2      	str	r2, [r4, #8]
 800da9e:	6123      	str	r3, [r4, #16]
 800daa0:	7561      	strb	r1, [r4, #21]
 800daa2:	7da0      	ldrb	r0, [r4, #22]
 800daa4:	f080 0001 	eor.w	r0, r0, #1
 800daa8:	b002      	add	sp, #8
 800daaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800daae:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800dab2:	801a      	strh	r2, [r3, #0]
 800dab4:	e7ed      	b.n	800da92 <ucdr_serialize_int16_t+0x9e>
 800dab6:	68a2      	ldr	r2, [r4, #8]
 800dab8:	6923      	ldr	r3, [r4, #16]
 800daba:	7da0      	ldrb	r0, [r4, #22]
 800dabc:	7567      	strb	r7, [r4, #21]
 800dabe:	1b92      	subs	r2, r2, r6
 800dac0:	1b9b      	subs	r3, r3, r6
 800dac2:	f080 0001 	eor.w	r0, r0, #1
 800dac6:	60a2      	str	r2, [r4, #8]
 800dac8:	6123      	str	r3, [r4, #16]
 800daca:	b002      	add	sp, #8
 800dacc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dad0:	68a3      	ldr	r3, [r4, #8]
 800dad2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800dad6:	701a      	strb	r2, [r3, #0]
 800dad8:	e7bc      	b.n	800da54 <ucdr_serialize_int16_t+0x60>
 800dada:	4628      	mov	r0, r5
 800dadc:	f10d 0506 	add.w	r5, sp, #6
 800dae0:	4629      	mov	r1, r5
 800dae2:	4632      	mov	r2, r6
 800dae4:	f00d fd0b 	bl	801b4fe <memcpy>
 800dae8:	68a0      	ldr	r0, [r4, #8]
 800daea:	4642      	mov	r2, r8
 800daec:	19a9      	adds	r1, r5, r6
 800daee:	f00d fd06 	bl	801b4fe <memcpy>
 800daf2:	e7af      	b.n	800da54 <ucdr_serialize_int16_t+0x60>

0800daf4 <ucdr_deserialize_int16_t>:
 800daf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800daf8:	460d      	mov	r5, r1
 800dafa:	2102      	movs	r1, #2
 800dafc:	4604      	mov	r4, r0
 800dafe:	f000 fd2b 	bl	800e558 <ucdr_buffer_alignment>
 800db02:	4601      	mov	r1, r0
 800db04:	4620      	mov	r0, r4
 800db06:	f894 8015 	ldrb.w	r8, [r4, #21]
 800db0a:	f000 fd69 	bl	800e5e0 <ucdr_advance_buffer>
 800db0e:	2102      	movs	r1, #2
 800db10:	4620      	mov	r0, r4
 800db12:	f000 fcc1 	bl	800e498 <ucdr_check_buffer_available_for>
 800db16:	bb60      	cbnz	r0, 800db72 <ucdr_deserialize_int16_t+0x7e>
 800db18:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800db1c:	42be      	cmp	r6, r7
 800db1e:	d923      	bls.n	800db68 <ucdr_deserialize_int16_t+0x74>
 800db20:	6923      	ldr	r3, [r4, #16]
 800db22:	60a6      	str	r6, [r4, #8]
 800db24:	1bf6      	subs	r6, r6, r7
 800db26:	4433      	add	r3, r6
 800db28:	f1c6 0902 	rsb	r9, r6, #2
 800db2c:	6123      	str	r3, [r4, #16]
 800db2e:	4649      	mov	r1, r9
 800db30:	4620      	mov	r0, r4
 800db32:	f000 fcbd 	bl	800e4b0 <ucdr_check_final_buffer_behavior>
 800db36:	2800      	cmp	r0, #0
 800db38:	d034      	beq.n	800dba4 <ucdr_deserialize_int16_t+0xb0>
 800db3a:	7d23      	ldrb	r3, [r4, #20]
 800db3c:	2b01      	cmp	r3, #1
 800db3e:	d042      	beq.n	800dbc6 <ucdr_deserialize_int16_t+0xd2>
 800db40:	787b      	ldrb	r3, [r7, #1]
 800db42:	702b      	strb	r3, [r5, #0]
 800db44:	2e00      	cmp	r6, #0
 800db46:	d03a      	beq.n	800dbbe <ucdr_deserialize_int16_t+0xca>
 800db48:	783b      	ldrb	r3, [r7, #0]
 800db4a:	706b      	strb	r3, [r5, #1]
 800db4c:	6923      	ldr	r3, [r4, #16]
 800db4e:	68a2      	ldr	r2, [r4, #8]
 800db50:	7da0      	ldrb	r0, [r4, #22]
 800db52:	2102      	movs	r1, #2
 800db54:	3302      	adds	r3, #2
 800db56:	444a      	add	r2, r9
 800db58:	1b9b      	subs	r3, r3, r6
 800db5a:	7561      	strb	r1, [r4, #21]
 800db5c:	60a2      	str	r2, [r4, #8]
 800db5e:	6123      	str	r3, [r4, #16]
 800db60:	f080 0001 	eor.w	r0, r0, #1
 800db64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800db68:	2102      	movs	r1, #2
 800db6a:	4620      	mov	r0, r4
 800db6c:	f000 fca0 	bl	800e4b0 <ucdr_check_final_buffer_behavior>
 800db70:	b180      	cbz	r0, 800db94 <ucdr_deserialize_int16_t+0xa0>
 800db72:	7d23      	ldrb	r3, [r4, #20]
 800db74:	2b01      	cmp	r3, #1
 800db76:	68a3      	ldr	r3, [r4, #8]
 800db78:	d011      	beq.n	800db9e <ucdr_deserialize_int16_t+0xaa>
 800db7a:	785b      	ldrb	r3, [r3, #1]
 800db7c:	702b      	strb	r3, [r5, #0]
 800db7e:	68a3      	ldr	r3, [r4, #8]
 800db80:	781b      	ldrb	r3, [r3, #0]
 800db82:	706b      	strb	r3, [r5, #1]
 800db84:	68a2      	ldr	r2, [r4, #8]
 800db86:	6923      	ldr	r3, [r4, #16]
 800db88:	3202      	adds	r2, #2
 800db8a:	3302      	adds	r3, #2
 800db8c:	2102      	movs	r1, #2
 800db8e:	60a2      	str	r2, [r4, #8]
 800db90:	6123      	str	r3, [r4, #16]
 800db92:	7561      	strb	r1, [r4, #21]
 800db94:	7da0      	ldrb	r0, [r4, #22]
 800db96:	f080 0001 	eor.w	r0, r0, #1
 800db9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800db9e:	881b      	ldrh	r3, [r3, #0]
 800dba0:	802b      	strh	r3, [r5, #0]
 800dba2:	e7ef      	b.n	800db84 <ucdr_deserialize_int16_t+0x90>
 800dba4:	68a2      	ldr	r2, [r4, #8]
 800dba6:	6923      	ldr	r3, [r4, #16]
 800dba8:	7da0      	ldrb	r0, [r4, #22]
 800dbaa:	f884 8015 	strb.w	r8, [r4, #21]
 800dbae:	1b92      	subs	r2, r2, r6
 800dbb0:	1b9b      	subs	r3, r3, r6
 800dbb2:	60a2      	str	r2, [r4, #8]
 800dbb4:	6123      	str	r3, [r4, #16]
 800dbb6:	f080 0001 	eor.w	r0, r0, #1
 800dbba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dbbe:	68a3      	ldr	r3, [r4, #8]
 800dbc0:	781b      	ldrb	r3, [r3, #0]
 800dbc2:	706b      	strb	r3, [r5, #1]
 800dbc4:	e7c2      	b.n	800db4c <ucdr_deserialize_int16_t+0x58>
 800dbc6:	4639      	mov	r1, r7
 800dbc8:	4632      	mov	r2, r6
 800dbca:	4628      	mov	r0, r5
 800dbcc:	f00d fc97 	bl	801b4fe <memcpy>
 800dbd0:	68a1      	ldr	r1, [r4, #8]
 800dbd2:	464a      	mov	r2, r9
 800dbd4:	19a8      	adds	r0, r5, r6
 800dbd6:	f00d fc92 	bl	801b4fe <memcpy>
 800dbda:	e7b7      	b.n	800db4c <ucdr_deserialize_int16_t+0x58>

0800dbdc <ucdr_serialize_int32_t>:
 800dbdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dbe0:	b082      	sub	sp, #8
 800dbe2:	4604      	mov	r4, r0
 800dbe4:	9101      	str	r1, [sp, #4]
 800dbe6:	2104      	movs	r1, #4
 800dbe8:	f000 fcb6 	bl	800e558 <ucdr_buffer_alignment>
 800dbec:	4601      	mov	r1, r0
 800dbee:	4620      	mov	r0, r4
 800dbf0:	7d67      	ldrb	r7, [r4, #21]
 800dbf2:	f000 fcf5 	bl	800e5e0 <ucdr_advance_buffer>
 800dbf6:	2104      	movs	r1, #4
 800dbf8:	4620      	mov	r0, r4
 800dbfa:	f000 fc4d 	bl	800e498 <ucdr_check_buffer_available_for>
 800dbfe:	2800      	cmp	r0, #0
 800dc00:	d139      	bne.n	800dc76 <ucdr_serialize_int32_t+0x9a>
 800dc02:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800dc06:	42ab      	cmp	r3, r5
 800dc08:	d930      	bls.n	800dc6c <ucdr_serialize_int32_t+0x90>
 800dc0a:	1b5e      	subs	r6, r3, r5
 800dc0c:	60a3      	str	r3, [r4, #8]
 800dc0e:	6923      	ldr	r3, [r4, #16]
 800dc10:	f1c6 0804 	rsb	r8, r6, #4
 800dc14:	4433      	add	r3, r6
 800dc16:	6123      	str	r3, [r4, #16]
 800dc18:	4641      	mov	r1, r8
 800dc1a:	4620      	mov	r0, r4
 800dc1c:	f000 fc48 	bl	800e4b0 <ucdr_check_final_buffer_behavior>
 800dc20:	2800      	cmp	r0, #0
 800dc22:	d04c      	beq.n	800dcbe <ucdr_serialize_int32_t+0xe2>
 800dc24:	7d23      	ldrb	r3, [r4, #20]
 800dc26:	2b01      	cmp	r3, #1
 800dc28:	d063      	beq.n	800dcf2 <ucdr_serialize_int32_t+0x116>
 800dc2a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800dc2e:	702b      	strb	r3, [r5, #0]
 800dc30:	2e00      	cmp	r6, #0
 800dc32:	d051      	beq.n	800dcd8 <ucdr_serialize_int32_t+0xfc>
 800dc34:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800dc38:	706b      	strb	r3, [r5, #1]
 800dc3a:	2e01      	cmp	r6, #1
 800dc3c:	d050      	beq.n	800dce0 <ucdr_serialize_int32_t+0x104>
 800dc3e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800dc42:	70ab      	strb	r3, [r5, #2]
 800dc44:	2e02      	cmp	r6, #2
 800dc46:	d04f      	beq.n	800dce8 <ucdr_serialize_int32_t+0x10c>
 800dc48:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800dc4c:	70eb      	strb	r3, [r5, #3]
 800dc4e:	6923      	ldr	r3, [r4, #16]
 800dc50:	68a2      	ldr	r2, [r4, #8]
 800dc52:	7da0      	ldrb	r0, [r4, #22]
 800dc54:	3304      	adds	r3, #4
 800dc56:	1b9e      	subs	r6, r3, r6
 800dc58:	4442      	add	r2, r8
 800dc5a:	2304      	movs	r3, #4
 800dc5c:	f080 0001 	eor.w	r0, r0, #1
 800dc60:	60a2      	str	r2, [r4, #8]
 800dc62:	6126      	str	r6, [r4, #16]
 800dc64:	7563      	strb	r3, [r4, #21]
 800dc66:	b002      	add	sp, #8
 800dc68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dc6c:	2104      	movs	r1, #4
 800dc6e:	4620      	mov	r0, r4
 800dc70:	f000 fc1e 	bl	800e4b0 <ucdr_check_final_buffer_behavior>
 800dc74:	b1d0      	cbz	r0, 800dcac <ucdr_serialize_int32_t+0xd0>
 800dc76:	7d23      	ldrb	r3, [r4, #20]
 800dc78:	2b01      	cmp	r3, #1
 800dc7a:	68a3      	ldr	r3, [r4, #8]
 800dc7c:	d01c      	beq.n	800dcb8 <ucdr_serialize_int32_t+0xdc>
 800dc7e:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800dc82:	701a      	strb	r2, [r3, #0]
 800dc84:	68a3      	ldr	r3, [r4, #8]
 800dc86:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800dc8a:	705a      	strb	r2, [r3, #1]
 800dc8c:	68a3      	ldr	r3, [r4, #8]
 800dc8e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800dc92:	709a      	strb	r2, [r3, #2]
 800dc94:	68a3      	ldr	r3, [r4, #8]
 800dc96:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800dc9a:	70da      	strb	r2, [r3, #3]
 800dc9c:	68a2      	ldr	r2, [r4, #8]
 800dc9e:	6923      	ldr	r3, [r4, #16]
 800dca0:	3204      	adds	r2, #4
 800dca2:	3304      	adds	r3, #4
 800dca4:	2104      	movs	r1, #4
 800dca6:	60a2      	str	r2, [r4, #8]
 800dca8:	6123      	str	r3, [r4, #16]
 800dcaa:	7561      	strb	r1, [r4, #21]
 800dcac:	7da0      	ldrb	r0, [r4, #22]
 800dcae:	f080 0001 	eor.w	r0, r0, #1
 800dcb2:	b002      	add	sp, #8
 800dcb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dcb8:	9a01      	ldr	r2, [sp, #4]
 800dcba:	601a      	str	r2, [r3, #0]
 800dcbc:	e7ee      	b.n	800dc9c <ucdr_serialize_int32_t+0xc0>
 800dcbe:	68a2      	ldr	r2, [r4, #8]
 800dcc0:	6923      	ldr	r3, [r4, #16]
 800dcc2:	7da0      	ldrb	r0, [r4, #22]
 800dcc4:	7567      	strb	r7, [r4, #21]
 800dcc6:	1b92      	subs	r2, r2, r6
 800dcc8:	1b9b      	subs	r3, r3, r6
 800dcca:	f080 0001 	eor.w	r0, r0, #1
 800dcce:	60a2      	str	r2, [r4, #8]
 800dcd0:	6123      	str	r3, [r4, #16]
 800dcd2:	b002      	add	sp, #8
 800dcd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dcd8:	68a3      	ldr	r3, [r4, #8]
 800dcda:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800dcde:	701a      	strb	r2, [r3, #0]
 800dce0:	68a3      	ldr	r3, [r4, #8]
 800dce2:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800dce6:	701a      	strb	r2, [r3, #0]
 800dce8:	68a3      	ldr	r3, [r4, #8]
 800dcea:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800dcee:	701a      	strb	r2, [r3, #0]
 800dcf0:	e7ad      	b.n	800dc4e <ucdr_serialize_int32_t+0x72>
 800dcf2:	4628      	mov	r0, r5
 800dcf4:	ad01      	add	r5, sp, #4
 800dcf6:	4629      	mov	r1, r5
 800dcf8:	4632      	mov	r2, r6
 800dcfa:	f00d fc00 	bl	801b4fe <memcpy>
 800dcfe:	68a0      	ldr	r0, [r4, #8]
 800dd00:	4642      	mov	r2, r8
 800dd02:	19a9      	adds	r1, r5, r6
 800dd04:	f00d fbfb 	bl	801b4fe <memcpy>
 800dd08:	e7a1      	b.n	800dc4e <ucdr_serialize_int32_t+0x72>
 800dd0a:	bf00      	nop

0800dd0c <ucdr_deserialize_int32_t>:
 800dd0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dd10:	460d      	mov	r5, r1
 800dd12:	2104      	movs	r1, #4
 800dd14:	4604      	mov	r4, r0
 800dd16:	f000 fc1f 	bl	800e558 <ucdr_buffer_alignment>
 800dd1a:	4601      	mov	r1, r0
 800dd1c:	4620      	mov	r0, r4
 800dd1e:	f894 8015 	ldrb.w	r8, [r4, #21]
 800dd22:	f000 fc5d 	bl	800e5e0 <ucdr_advance_buffer>
 800dd26:	2104      	movs	r1, #4
 800dd28:	4620      	mov	r0, r4
 800dd2a:	f000 fbb5 	bl	800e498 <ucdr_check_buffer_available_for>
 800dd2e:	2800      	cmp	r0, #0
 800dd30:	d138      	bne.n	800dda4 <ucdr_deserialize_int32_t+0x98>
 800dd32:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800dd36:	42b7      	cmp	r7, r6
 800dd38:	d92f      	bls.n	800dd9a <ucdr_deserialize_int32_t+0x8e>
 800dd3a:	6923      	ldr	r3, [r4, #16]
 800dd3c:	60a7      	str	r7, [r4, #8]
 800dd3e:	1bbf      	subs	r7, r7, r6
 800dd40:	443b      	add	r3, r7
 800dd42:	f1c7 0904 	rsb	r9, r7, #4
 800dd46:	6123      	str	r3, [r4, #16]
 800dd48:	4649      	mov	r1, r9
 800dd4a:	4620      	mov	r0, r4
 800dd4c:	f000 fbb0 	bl	800e4b0 <ucdr_check_final_buffer_behavior>
 800dd50:	2800      	cmp	r0, #0
 800dd52:	d046      	beq.n	800dde2 <ucdr_deserialize_int32_t+0xd6>
 800dd54:	7d23      	ldrb	r3, [r4, #20]
 800dd56:	2b01      	cmp	r3, #1
 800dd58:	d05c      	beq.n	800de14 <ucdr_deserialize_int32_t+0x108>
 800dd5a:	78f3      	ldrb	r3, [r6, #3]
 800dd5c:	702b      	strb	r3, [r5, #0]
 800dd5e:	2f00      	cmp	r7, #0
 800dd60:	d04c      	beq.n	800ddfc <ucdr_deserialize_int32_t+0xf0>
 800dd62:	78b3      	ldrb	r3, [r6, #2]
 800dd64:	706b      	strb	r3, [r5, #1]
 800dd66:	2f01      	cmp	r7, #1
 800dd68:	f105 0302 	add.w	r3, r5, #2
 800dd6c:	d04a      	beq.n	800de04 <ucdr_deserialize_int32_t+0xf8>
 800dd6e:	7873      	ldrb	r3, [r6, #1]
 800dd70:	70ab      	strb	r3, [r5, #2]
 800dd72:	2f02      	cmp	r7, #2
 800dd74:	f105 0303 	add.w	r3, r5, #3
 800dd78:	d048      	beq.n	800de0c <ucdr_deserialize_int32_t+0x100>
 800dd7a:	7833      	ldrb	r3, [r6, #0]
 800dd7c:	70eb      	strb	r3, [r5, #3]
 800dd7e:	6923      	ldr	r3, [r4, #16]
 800dd80:	68a2      	ldr	r2, [r4, #8]
 800dd82:	7da0      	ldrb	r0, [r4, #22]
 800dd84:	2104      	movs	r1, #4
 800dd86:	3304      	adds	r3, #4
 800dd88:	444a      	add	r2, r9
 800dd8a:	1bdb      	subs	r3, r3, r7
 800dd8c:	7561      	strb	r1, [r4, #21]
 800dd8e:	60a2      	str	r2, [r4, #8]
 800dd90:	6123      	str	r3, [r4, #16]
 800dd92:	f080 0001 	eor.w	r0, r0, #1
 800dd96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dd9a:	2104      	movs	r1, #4
 800dd9c:	4620      	mov	r0, r4
 800dd9e:	f000 fb87 	bl	800e4b0 <ucdr_check_final_buffer_behavior>
 800dda2:	b1b0      	cbz	r0, 800ddd2 <ucdr_deserialize_int32_t+0xc6>
 800dda4:	7d23      	ldrb	r3, [r4, #20]
 800dda6:	2b01      	cmp	r3, #1
 800dda8:	68a3      	ldr	r3, [r4, #8]
 800ddaa:	d017      	beq.n	800dddc <ucdr_deserialize_int32_t+0xd0>
 800ddac:	78db      	ldrb	r3, [r3, #3]
 800ddae:	702b      	strb	r3, [r5, #0]
 800ddb0:	68a3      	ldr	r3, [r4, #8]
 800ddb2:	789b      	ldrb	r3, [r3, #2]
 800ddb4:	706b      	strb	r3, [r5, #1]
 800ddb6:	68a3      	ldr	r3, [r4, #8]
 800ddb8:	785b      	ldrb	r3, [r3, #1]
 800ddba:	70ab      	strb	r3, [r5, #2]
 800ddbc:	68a3      	ldr	r3, [r4, #8]
 800ddbe:	781b      	ldrb	r3, [r3, #0]
 800ddc0:	70eb      	strb	r3, [r5, #3]
 800ddc2:	68a2      	ldr	r2, [r4, #8]
 800ddc4:	6923      	ldr	r3, [r4, #16]
 800ddc6:	3204      	adds	r2, #4
 800ddc8:	3304      	adds	r3, #4
 800ddca:	2104      	movs	r1, #4
 800ddcc:	60a2      	str	r2, [r4, #8]
 800ddce:	6123      	str	r3, [r4, #16]
 800ddd0:	7561      	strb	r1, [r4, #21]
 800ddd2:	7da0      	ldrb	r0, [r4, #22]
 800ddd4:	f080 0001 	eor.w	r0, r0, #1
 800ddd8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dddc:	681b      	ldr	r3, [r3, #0]
 800ddde:	602b      	str	r3, [r5, #0]
 800dde0:	e7ef      	b.n	800ddc2 <ucdr_deserialize_int32_t+0xb6>
 800dde2:	68a2      	ldr	r2, [r4, #8]
 800dde4:	6923      	ldr	r3, [r4, #16]
 800dde6:	7da0      	ldrb	r0, [r4, #22]
 800dde8:	f884 8015 	strb.w	r8, [r4, #21]
 800ddec:	1bd2      	subs	r2, r2, r7
 800ddee:	1bdb      	subs	r3, r3, r7
 800ddf0:	60a2      	str	r2, [r4, #8]
 800ddf2:	6123      	str	r3, [r4, #16]
 800ddf4:	f080 0001 	eor.w	r0, r0, #1
 800ddf8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ddfc:	68a3      	ldr	r3, [r4, #8]
 800ddfe:	789b      	ldrb	r3, [r3, #2]
 800de00:	706b      	strb	r3, [r5, #1]
 800de02:	1cab      	adds	r3, r5, #2
 800de04:	68a2      	ldr	r2, [r4, #8]
 800de06:	7852      	ldrb	r2, [r2, #1]
 800de08:	f803 2b01 	strb.w	r2, [r3], #1
 800de0c:	68a2      	ldr	r2, [r4, #8]
 800de0e:	7812      	ldrb	r2, [r2, #0]
 800de10:	701a      	strb	r2, [r3, #0]
 800de12:	e7b4      	b.n	800dd7e <ucdr_deserialize_int32_t+0x72>
 800de14:	4631      	mov	r1, r6
 800de16:	463a      	mov	r2, r7
 800de18:	4628      	mov	r0, r5
 800de1a:	f00d fb70 	bl	801b4fe <memcpy>
 800de1e:	68a1      	ldr	r1, [r4, #8]
 800de20:	464a      	mov	r2, r9
 800de22:	19e8      	adds	r0, r5, r7
 800de24:	f00d fb6b 	bl	801b4fe <memcpy>
 800de28:	e7a9      	b.n	800dd7e <ucdr_deserialize_int32_t+0x72>
 800de2a:	bf00      	nop

0800de2c <ucdr_serialize_double>:
 800de2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800de30:	2108      	movs	r1, #8
 800de32:	b082      	sub	sp, #8
 800de34:	4604      	mov	r4, r0
 800de36:	ed8d 0b00 	vstr	d0, [sp]
 800de3a:	f000 fb8d 	bl	800e558 <ucdr_buffer_alignment>
 800de3e:	4601      	mov	r1, r0
 800de40:	4620      	mov	r0, r4
 800de42:	7d67      	ldrb	r7, [r4, #21]
 800de44:	f000 fbcc 	bl	800e5e0 <ucdr_advance_buffer>
 800de48:	2108      	movs	r1, #8
 800de4a:	4620      	mov	r0, r4
 800de4c:	f000 fb24 	bl	800e498 <ucdr_check_buffer_available_for>
 800de50:	2800      	cmp	r0, #0
 800de52:	d14e      	bne.n	800def2 <ucdr_serialize_double+0xc6>
 800de54:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800de58:	42ab      	cmp	r3, r5
 800de5a:	d945      	bls.n	800dee8 <ucdr_serialize_double+0xbc>
 800de5c:	1b5e      	subs	r6, r3, r5
 800de5e:	60a3      	str	r3, [r4, #8]
 800de60:	6923      	ldr	r3, [r4, #16]
 800de62:	f1c6 0808 	rsb	r8, r6, #8
 800de66:	4433      	add	r3, r6
 800de68:	6123      	str	r3, [r4, #16]
 800de6a:	4641      	mov	r1, r8
 800de6c:	4620      	mov	r0, r4
 800de6e:	f000 fb1f 	bl	800e4b0 <ucdr_check_final_buffer_behavior>
 800de72:	2800      	cmp	r0, #0
 800de74:	d074      	beq.n	800df60 <ucdr_serialize_double+0x134>
 800de76:	7d23      	ldrb	r3, [r4, #20]
 800de78:	2b01      	cmp	r3, #1
 800de7a:	f000 809b 	beq.w	800dfb4 <ucdr_serialize_double+0x188>
 800de7e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800de82:	702b      	strb	r3, [r5, #0]
 800de84:	2e00      	cmp	r6, #0
 800de86:	d078      	beq.n	800df7a <ucdr_serialize_double+0x14e>
 800de88:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800de8c:	706b      	strb	r3, [r5, #1]
 800de8e:	2e01      	cmp	r6, #1
 800de90:	d077      	beq.n	800df82 <ucdr_serialize_double+0x156>
 800de92:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800de96:	70ab      	strb	r3, [r5, #2]
 800de98:	2e02      	cmp	r6, #2
 800de9a:	d076      	beq.n	800df8a <ucdr_serialize_double+0x15e>
 800de9c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800dea0:	70eb      	strb	r3, [r5, #3]
 800dea2:	2e03      	cmp	r6, #3
 800dea4:	d075      	beq.n	800df92 <ucdr_serialize_double+0x166>
 800dea6:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800deaa:	712b      	strb	r3, [r5, #4]
 800deac:	2e04      	cmp	r6, #4
 800deae:	d074      	beq.n	800df9a <ucdr_serialize_double+0x16e>
 800deb0:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800deb4:	716b      	strb	r3, [r5, #5]
 800deb6:	2e05      	cmp	r6, #5
 800deb8:	d073      	beq.n	800dfa2 <ucdr_serialize_double+0x176>
 800deba:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800debe:	71ab      	strb	r3, [r5, #6]
 800dec0:	2e06      	cmp	r6, #6
 800dec2:	d072      	beq.n	800dfaa <ucdr_serialize_double+0x17e>
 800dec4:	f89d 3000 	ldrb.w	r3, [sp]
 800dec8:	71eb      	strb	r3, [r5, #7]
 800deca:	6923      	ldr	r3, [r4, #16]
 800decc:	68a2      	ldr	r2, [r4, #8]
 800dece:	7da0      	ldrb	r0, [r4, #22]
 800ded0:	3308      	adds	r3, #8
 800ded2:	1b9e      	subs	r6, r3, r6
 800ded4:	4442      	add	r2, r8
 800ded6:	2308      	movs	r3, #8
 800ded8:	f080 0001 	eor.w	r0, r0, #1
 800dedc:	60a2      	str	r2, [r4, #8]
 800dede:	6126      	str	r6, [r4, #16]
 800dee0:	7563      	strb	r3, [r4, #21]
 800dee2:	b002      	add	sp, #8
 800dee4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dee8:	2108      	movs	r1, #8
 800deea:	4620      	mov	r0, r4
 800deec:	f000 fae0 	bl	800e4b0 <ucdr_check_final_buffer_behavior>
 800def0:	b350      	cbz	r0, 800df48 <ucdr_serialize_double+0x11c>
 800def2:	7d23      	ldrb	r3, [r4, #20]
 800def4:	2b01      	cmp	r3, #1
 800def6:	d02d      	beq.n	800df54 <ucdr_serialize_double+0x128>
 800def8:	68a3      	ldr	r3, [r4, #8]
 800defa:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800defe:	701a      	strb	r2, [r3, #0]
 800df00:	68a3      	ldr	r3, [r4, #8]
 800df02:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800df06:	705a      	strb	r2, [r3, #1]
 800df08:	68a3      	ldr	r3, [r4, #8]
 800df0a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800df0e:	709a      	strb	r2, [r3, #2]
 800df10:	68a3      	ldr	r3, [r4, #8]
 800df12:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800df16:	70da      	strb	r2, [r3, #3]
 800df18:	68a3      	ldr	r3, [r4, #8]
 800df1a:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800df1e:	711a      	strb	r2, [r3, #4]
 800df20:	68a3      	ldr	r3, [r4, #8]
 800df22:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800df26:	715a      	strb	r2, [r3, #5]
 800df28:	68a3      	ldr	r3, [r4, #8]
 800df2a:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800df2e:	719a      	strb	r2, [r3, #6]
 800df30:	68a3      	ldr	r3, [r4, #8]
 800df32:	f89d 2000 	ldrb.w	r2, [sp]
 800df36:	71da      	strb	r2, [r3, #7]
 800df38:	68a2      	ldr	r2, [r4, #8]
 800df3a:	6923      	ldr	r3, [r4, #16]
 800df3c:	3208      	adds	r2, #8
 800df3e:	3308      	adds	r3, #8
 800df40:	2108      	movs	r1, #8
 800df42:	60a2      	str	r2, [r4, #8]
 800df44:	6123      	str	r3, [r4, #16]
 800df46:	7561      	strb	r1, [r4, #21]
 800df48:	7da0      	ldrb	r0, [r4, #22]
 800df4a:	f080 0001 	eor.w	r0, r0, #1
 800df4e:	b002      	add	sp, #8
 800df50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800df54:	466b      	mov	r3, sp
 800df56:	cb03      	ldmia	r3!, {r0, r1}
 800df58:	68a3      	ldr	r3, [r4, #8]
 800df5a:	6018      	str	r0, [r3, #0]
 800df5c:	6059      	str	r1, [r3, #4]
 800df5e:	e7eb      	b.n	800df38 <ucdr_serialize_double+0x10c>
 800df60:	68a2      	ldr	r2, [r4, #8]
 800df62:	6923      	ldr	r3, [r4, #16]
 800df64:	7da0      	ldrb	r0, [r4, #22]
 800df66:	7567      	strb	r7, [r4, #21]
 800df68:	1b92      	subs	r2, r2, r6
 800df6a:	1b9b      	subs	r3, r3, r6
 800df6c:	f080 0001 	eor.w	r0, r0, #1
 800df70:	60a2      	str	r2, [r4, #8]
 800df72:	6123      	str	r3, [r4, #16]
 800df74:	b002      	add	sp, #8
 800df76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800df7a:	68a3      	ldr	r3, [r4, #8]
 800df7c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800df80:	701a      	strb	r2, [r3, #0]
 800df82:	68a3      	ldr	r3, [r4, #8]
 800df84:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800df88:	701a      	strb	r2, [r3, #0]
 800df8a:	68a3      	ldr	r3, [r4, #8]
 800df8c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800df90:	701a      	strb	r2, [r3, #0]
 800df92:	68a3      	ldr	r3, [r4, #8]
 800df94:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800df98:	701a      	strb	r2, [r3, #0]
 800df9a:	68a3      	ldr	r3, [r4, #8]
 800df9c:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800dfa0:	701a      	strb	r2, [r3, #0]
 800dfa2:	68a3      	ldr	r3, [r4, #8]
 800dfa4:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800dfa8:	701a      	strb	r2, [r3, #0]
 800dfaa:	68a3      	ldr	r3, [r4, #8]
 800dfac:	f89d 2000 	ldrb.w	r2, [sp]
 800dfb0:	701a      	strb	r2, [r3, #0]
 800dfb2:	e78a      	b.n	800deca <ucdr_serialize_double+0x9e>
 800dfb4:	4628      	mov	r0, r5
 800dfb6:	466d      	mov	r5, sp
 800dfb8:	4629      	mov	r1, r5
 800dfba:	4632      	mov	r2, r6
 800dfbc:	f00d fa9f 	bl	801b4fe <memcpy>
 800dfc0:	68a0      	ldr	r0, [r4, #8]
 800dfc2:	4642      	mov	r2, r8
 800dfc4:	19a9      	adds	r1, r5, r6
 800dfc6:	f00d fa9a 	bl	801b4fe <memcpy>
 800dfca:	e77e      	b.n	800deca <ucdr_serialize_double+0x9e>

0800dfcc <ucdr_serialize_endian_double>:
 800dfcc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dfd0:	460e      	mov	r6, r1
 800dfd2:	b083      	sub	sp, #12
 800dfd4:	2108      	movs	r1, #8
 800dfd6:	4604      	mov	r4, r0
 800dfd8:	ed8d 0b00 	vstr	d0, [sp]
 800dfdc:	f000 fabc 	bl	800e558 <ucdr_buffer_alignment>
 800dfe0:	4601      	mov	r1, r0
 800dfe2:	4620      	mov	r0, r4
 800dfe4:	f894 8015 	ldrb.w	r8, [r4, #21]
 800dfe8:	f000 fafa 	bl	800e5e0 <ucdr_advance_buffer>
 800dfec:	2108      	movs	r1, #8
 800dfee:	4620      	mov	r0, r4
 800dff0:	f000 fa52 	bl	800e498 <ucdr_check_buffer_available_for>
 800dff4:	2800      	cmp	r0, #0
 800dff6:	d14d      	bne.n	800e094 <ucdr_serialize_endian_double+0xc8>
 800dff8:	e9d4 5701 	ldrd	r5, r7, [r4, #4]
 800dffc:	42bd      	cmp	r5, r7
 800dffe:	d944      	bls.n	800e08a <ucdr_serialize_endian_double+0xbe>
 800e000:	6923      	ldr	r3, [r4, #16]
 800e002:	60a5      	str	r5, [r4, #8]
 800e004:	1bed      	subs	r5, r5, r7
 800e006:	442b      	add	r3, r5
 800e008:	f1c5 0908 	rsb	r9, r5, #8
 800e00c:	6123      	str	r3, [r4, #16]
 800e00e:	4649      	mov	r1, r9
 800e010:	4620      	mov	r0, r4
 800e012:	f000 fa4d 	bl	800e4b0 <ucdr_check_final_buffer_behavior>
 800e016:	2800      	cmp	r0, #0
 800e018:	d072      	beq.n	800e100 <ucdr_serialize_endian_double+0x134>
 800e01a:	2e01      	cmp	r6, #1
 800e01c:	f000 809b 	beq.w	800e156 <ucdr_serialize_endian_double+0x18a>
 800e020:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800e024:	703b      	strb	r3, [r7, #0]
 800e026:	2d00      	cmp	r5, #0
 800e028:	d078      	beq.n	800e11c <ucdr_serialize_endian_double+0x150>
 800e02a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800e02e:	707b      	strb	r3, [r7, #1]
 800e030:	2d01      	cmp	r5, #1
 800e032:	d077      	beq.n	800e124 <ucdr_serialize_endian_double+0x158>
 800e034:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800e038:	70bb      	strb	r3, [r7, #2]
 800e03a:	2d02      	cmp	r5, #2
 800e03c:	d076      	beq.n	800e12c <ucdr_serialize_endian_double+0x160>
 800e03e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800e042:	70fb      	strb	r3, [r7, #3]
 800e044:	2d03      	cmp	r5, #3
 800e046:	d075      	beq.n	800e134 <ucdr_serialize_endian_double+0x168>
 800e048:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800e04c:	713b      	strb	r3, [r7, #4]
 800e04e:	2d04      	cmp	r5, #4
 800e050:	d074      	beq.n	800e13c <ucdr_serialize_endian_double+0x170>
 800e052:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800e056:	717b      	strb	r3, [r7, #5]
 800e058:	2d05      	cmp	r5, #5
 800e05a:	d073      	beq.n	800e144 <ucdr_serialize_endian_double+0x178>
 800e05c:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800e060:	71bb      	strb	r3, [r7, #6]
 800e062:	2d06      	cmp	r5, #6
 800e064:	d072      	beq.n	800e14c <ucdr_serialize_endian_double+0x180>
 800e066:	f89d 3000 	ldrb.w	r3, [sp]
 800e06a:	71fb      	strb	r3, [r7, #7]
 800e06c:	6923      	ldr	r3, [r4, #16]
 800e06e:	68a2      	ldr	r2, [r4, #8]
 800e070:	7da0      	ldrb	r0, [r4, #22]
 800e072:	3308      	adds	r3, #8
 800e074:	1b5d      	subs	r5, r3, r5
 800e076:	444a      	add	r2, r9
 800e078:	2308      	movs	r3, #8
 800e07a:	f080 0001 	eor.w	r0, r0, #1
 800e07e:	60a2      	str	r2, [r4, #8]
 800e080:	6125      	str	r5, [r4, #16]
 800e082:	7563      	strb	r3, [r4, #21]
 800e084:	b003      	add	sp, #12
 800e086:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e08a:	2108      	movs	r1, #8
 800e08c:	4620      	mov	r0, r4
 800e08e:	f000 fa0f 	bl	800e4b0 <ucdr_check_final_buffer_behavior>
 800e092:	b348      	cbz	r0, 800e0e8 <ucdr_serialize_endian_double+0x11c>
 800e094:	2e01      	cmp	r6, #1
 800e096:	d02d      	beq.n	800e0f4 <ucdr_serialize_endian_double+0x128>
 800e098:	68a3      	ldr	r3, [r4, #8]
 800e09a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800e09e:	701a      	strb	r2, [r3, #0]
 800e0a0:	68a3      	ldr	r3, [r4, #8]
 800e0a2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800e0a6:	705a      	strb	r2, [r3, #1]
 800e0a8:	68a3      	ldr	r3, [r4, #8]
 800e0aa:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800e0ae:	709a      	strb	r2, [r3, #2]
 800e0b0:	68a3      	ldr	r3, [r4, #8]
 800e0b2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800e0b6:	70da      	strb	r2, [r3, #3]
 800e0b8:	68a3      	ldr	r3, [r4, #8]
 800e0ba:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800e0be:	711a      	strb	r2, [r3, #4]
 800e0c0:	68a3      	ldr	r3, [r4, #8]
 800e0c2:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800e0c6:	715a      	strb	r2, [r3, #5]
 800e0c8:	68a3      	ldr	r3, [r4, #8]
 800e0ca:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800e0ce:	719a      	strb	r2, [r3, #6]
 800e0d0:	68a3      	ldr	r3, [r4, #8]
 800e0d2:	f89d 2000 	ldrb.w	r2, [sp]
 800e0d6:	71da      	strb	r2, [r3, #7]
 800e0d8:	68a2      	ldr	r2, [r4, #8]
 800e0da:	6923      	ldr	r3, [r4, #16]
 800e0dc:	3208      	adds	r2, #8
 800e0de:	3308      	adds	r3, #8
 800e0e0:	2108      	movs	r1, #8
 800e0e2:	60a2      	str	r2, [r4, #8]
 800e0e4:	6123      	str	r3, [r4, #16]
 800e0e6:	7561      	strb	r1, [r4, #21]
 800e0e8:	7da0      	ldrb	r0, [r4, #22]
 800e0ea:	f080 0001 	eor.w	r0, r0, #1
 800e0ee:	b003      	add	sp, #12
 800e0f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e0f4:	466b      	mov	r3, sp
 800e0f6:	cb03      	ldmia	r3!, {r0, r1}
 800e0f8:	68a3      	ldr	r3, [r4, #8]
 800e0fa:	6018      	str	r0, [r3, #0]
 800e0fc:	6059      	str	r1, [r3, #4]
 800e0fe:	e7eb      	b.n	800e0d8 <ucdr_serialize_endian_double+0x10c>
 800e100:	68a2      	ldr	r2, [r4, #8]
 800e102:	6923      	ldr	r3, [r4, #16]
 800e104:	7da0      	ldrb	r0, [r4, #22]
 800e106:	f884 8015 	strb.w	r8, [r4, #21]
 800e10a:	1b52      	subs	r2, r2, r5
 800e10c:	1b5b      	subs	r3, r3, r5
 800e10e:	f080 0001 	eor.w	r0, r0, #1
 800e112:	60a2      	str	r2, [r4, #8]
 800e114:	6123      	str	r3, [r4, #16]
 800e116:	b003      	add	sp, #12
 800e118:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e11c:	68a3      	ldr	r3, [r4, #8]
 800e11e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800e122:	701a      	strb	r2, [r3, #0]
 800e124:	68a3      	ldr	r3, [r4, #8]
 800e126:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800e12a:	701a      	strb	r2, [r3, #0]
 800e12c:	68a3      	ldr	r3, [r4, #8]
 800e12e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800e132:	701a      	strb	r2, [r3, #0]
 800e134:	68a3      	ldr	r3, [r4, #8]
 800e136:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800e13a:	701a      	strb	r2, [r3, #0]
 800e13c:	68a3      	ldr	r3, [r4, #8]
 800e13e:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800e142:	701a      	strb	r2, [r3, #0]
 800e144:	68a3      	ldr	r3, [r4, #8]
 800e146:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800e14a:	701a      	strb	r2, [r3, #0]
 800e14c:	68a3      	ldr	r3, [r4, #8]
 800e14e:	f89d 2000 	ldrb.w	r2, [sp]
 800e152:	701a      	strb	r2, [r3, #0]
 800e154:	e78a      	b.n	800e06c <ucdr_serialize_endian_double+0xa0>
 800e156:	466e      	mov	r6, sp
 800e158:	4631      	mov	r1, r6
 800e15a:	462a      	mov	r2, r5
 800e15c:	4638      	mov	r0, r7
 800e15e:	f00d f9ce 	bl	801b4fe <memcpy>
 800e162:	68a0      	ldr	r0, [r4, #8]
 800e164:	464a      	mov	r2, r9
 800e166:	1971      	adds	r1, r6, r5
 800e168:	f00d f9c9 	bl	801b4fe <memcpy>
 800e16c:	e77e      	b.n	800e06c <ucdr_serialize_endian_double+0xa0>
 800e16e:	bf00      	nop

0800e170 <ucdr_deserialize_double>:
 800e170:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e174:	460d      	mov	r5, r1
 800e176:	2108      	movs	r1, #8
 800e178:	4604      	mov	r4, r0
 800e17a:	f000 f9ed 	bl	800e558 <ucdr_buffer_alignment>
 800e17e:	4601      	mov	r1, r0
 800e180:	4620      	mov	r0, r4
 800e182:	f894 9015 	ldrb.w	r9, [r4, #21]
 800e186:	f000 fa2b 	bl	800e5e0 <ucdr_advance_buffer>
 800e18a:	2108      	movs	r1, #8
 800e18c:	4620      	mov	r0, r4
 800e18e:	f000 f983 	bl	800e498 <ucdr_check_buffer_available_for>
 800e192:	2800      	cmp	r0, #0
 800e194:	d151      	bne.n	800e23a <ucdr_deserialize_double+0xca>
 800e196:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800e19a:	42be      	cmp	r6, r7
 800e19c:	d948      	bls.n	800e230 <ucdr_deserialize_double+0xc0>
 800e19e:	6923      	ldr	r3, [r4, #16]
 800e1a0:	60a6      	str	r6, [r4, #8]
 800e1a2:	1bf6      	subs	r6, r6, r7
 800e1a4:	4433      	add	r3, r6
 800e1a6:	f1c6 0808 	rsb	r8, r6, #8
 800e1aa:	6123      	str	r3, [r4, #16]
 800e1ac:	4641      	mov	r1, r8
 800e1ae:	4620      	mov	r0, r4
 800e1b0:	f000 f97e 	bl	800e4b0 <ucdr_check_final_buffer_behavior>
 800e1b4:	2800      	cmp	r0, #0
 800e1b6:	d06d      	beq.n	800e294 <ucdr_deserialize_double+0x124>
 800e1b8:	7d23      	ldrb	r3, [r4, #20]
 800e1ba:	2b01      	cmp	r3, #1
 800e1bc:	f000 8093 	beq.w	800e2e6 <ucdr_deserialize_double+0x176>
 800e1c0:	79fb      	ldrb	r3, [r7, #7]
 800e1c2:	702b      	strb	r3, [r5, #0]
 800e1c4:	2e00      	cmp	r6, #0
 800e1c6:	d072      	beq.n	800e2ae <ucdr_deserialize_double+0x13e>
 800e1c8:	79bb      	ldrb	r3, [r7, #6]
 800e1ca:	706b      	strb	r3, [r5, #1]
 800e1cc:	2e01      	cmp	r6, #1
 800e1ce:	f105 0302 	add.w	r3, r5, #2
 800e1d2:	d070      	beq.n	800e2b6 <ucdr_deserialize_double+0x146>
 800e1d4:	797b      	ldrb	r3, [r7, #5]
 800e1d6:	70ab      	strb	r3, [r5, #2]
 800e1d8:	2e02      	cmp	r6, #2
 800e1da:	f105 0303 	add.w	r3, r5, #3
 800e1de:	d06e      	beq.n	800e2be <ucdr_deserialize_double+0x14e>
 800e1e0:	793b      	ldrb	r3, [r7, #4]
 800e1e2:	70eb      	strb	r3, [r5, #3]
 800e1e4:	2e03      	cmp	r6, #3
 800e1e6:	f105 0304 	add.w	r3, r5, #4
 800e1ea:	d06c      	beq.n	800e2c6 <ucdr_deserialize_double+0x156>
 800e1ec:	78fb      	ldrb	r3, [r7, #3]
 800e1ee:	712b      	strb	r3, [r5, #4]
 800e1f0:	2e04      	cmp	r6, #4
 800e1f2:	f105 0305 	add.w	r3, r5, #5
 800e1f6:	d06a      	beq.n	800e2ce <ucdr_deserialize_double+0x15e>
 800e1f8:	78bb      	ldrb	r3, [r7, #2]
 800e1fa:	716b      	strb	r3, [r5, #5]
 800e1fc:	2e05      	cmp	r6, #5
 800e1fe:	f105 0306 	add.w	r3, r5, #6
 800e202:	d068      	beq.n	800e2d6 <ucdr_deserialize_double+0x166>
 800e204:	787b      	ldrb	r3, [r7, #1]
 800e206:	71ab      	strb	r3, [r5, #6]
 800e208:	2e06      	cmp	r6, #6
 800e20a:	f105 0307 	add.w	r3, r5, #7
 800e20e:	d066      	beq.n	800e2de <ucdr_deserialize_double+0x16e>
 800e210:	783b      	ldrb	r3, [r7, #0]
 800e212:	71eb      	strb	r3, [r5, #7]
 800e214:	6923      	ldr	r3, [r4, #16]
 800e216:	68a2      	ldr	r2, [r4, #8]
 800e218:	7da0      	ldrb	r0, [r4, #22]
 800e21a:	3308      	adds	r3, #8
 800e21c:	1b9e      	subs	r6, r3, r6
 800e21e:	2308      	movs	r3, #8
 800e220:	4442      	add	r2, r8
 800e222:	7563      	strb	r3, [r4, #21]
 800e224:	60a2      	str	r2, [r4, #8]
 800e226:	6126      	str	r6, [r4, #16]
 800e228:	f080 0001 	eor.w	r0, r0, #1
 800e22c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e230:	2108      	movs	r1, #8
 800e232:	4620      	mov	r0, r4
 800e234:	f000 f93c 	bl	800e4b0 <ucdr_check_final_buffer_behavior>
 800e238:	b310      	cbz	r0, 800e280 <ucdr_deserialize_double+0x110>
 800e23a:	7d23      	ldrb	r3, [r4, #20]
 800e23c:	2b01      	cmp	r3, #1
 800e23e:	68a3      	ldr	r3, [r4, #8]
 800e240:	d023      	beq.n	800e28a <ucdr_deserialize_double+0x11a>
 800e242:	79db      	ldrb	r3, [r3, #7]
 800e244:	702b      	strb	r3, [r5, #0]
 800e246:	68a3      	ldr	r3, [r4, #8]
 800e248:	799b      	ldrb	r3, [r3, #6]
 800e24a:	706b      	strb	r3, [r5, #1]
 800e24c:	68a3      	ldr	r3, [r4, #8]
 800e24e:	795b      	ldrb	r3, [r3, #5]
 800e250:	70ab      	strb	r3, [r5, #2]
 800e252:	68a3      	ldr	r3, [r4, #8]
 800e254:	791b      	ldrb	r3, [r3, #4]
 800e256:	70eb      	strb	r3, [r5, #3]
 800e258:	68a3      	ldr	r3, [r4, #8]
 800e25a:	78db      	ldrb	r3, [r3, #3]
 800e25c:	712b      	strb	r3, [r5, #4]
 800e25e:	68a3      	ldr	r3, [r4, #8]
 800e260:	789b      	ldrb	r3, [r3, #2]
 800e262:	716b      	strb	r3, [r5, #5]
 800e264:	68a3      	ldr	r3, [r4, #8]
 800e266:	785b      	ldrb	r3, [r3, #1]
 800e268:	71ab      	strb	r3, [r5, #6]
 800e26a:	68a3      	ldr	r3, [r4, #8]
 800e26c:	781b      	ldrb	r3, [r3, #0]
 800e26e:	71eb      	strb	r3, [r5, #7]
 800e270:	68a2      	ldr	r2, [r4, #8]
 800e272:	6923      	ldr	r3, [r4, #16]
 800e274:	3208      	adds	r2, #8
 800e276:	3308      	adds	r3, #8
 800e278:	2108      	movs	r1, #8
 800e27a:	60a2      	str	r2, [r4, #8]
 800e27c:	6123      	str	r3, [r4, #16]
 800e27e:	7561      	strb	r1, [r4, #21]
 800e280:	7da0      	ldrb	r0, [r4, #22]
 800e282:	f080 0001 	eor.w	r0, r0, #1
 800e286:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e28a:	681a      	ldr	r2, [r3, #0]
 800e28c:	685b      	ldr	r3, [r3, #4]
 800e28e:	606b      	str	r3, [r5, #4]
 800e290:	602a      	str	r2, [r5, #0]
 800e292:	e7ed      	b.n	800e270 <ucdr_deserialize_double+0x100>
 800e294:	68a2      	ldr	r2, [r4, #8]
 800e296:	6923      	ldr	r3, [r4, #16]
 800e298:	7da0      	ldrb	r0, [r4, #22]
 800e29a:	f884 9015 	strb.w	r9, [r4, #21]
 800e29e:	1b92      	subs	r2, r2, r6
 800e2a0:	1b9b      	subs	r3, r3, r6
 800e2a2:	60a2      	str	r2, [r4, #8]
 800e2a4:	6123      	str	r3, [r4, #16]
 800e2a6:	f080 0001 	eor.w	r0, r0, #1
 800e2aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e2ae:	68a3      	ldr	r3, [r4, #8]
 800e2b0:	799b      	ldrb	r3, [r3, #6]
 800e2b2:	706b      	strb	r3, [r5, #1]
 800e2b4:	1cab      	adds	r3, r5, #2
 800e2b6:	68a2      	ldr	r2, [r4, #8]
 800e2b8:	7952      	ldrb	r2, [r2, #5]
 800e2ba:	f803 2b01 	strb.w	r2, [r3], #1
 800e2be:	68a2      	ldr	r2, [r4, #8]
 800e2c0:	7912      	ldrb	r2, [r2, #4]
 800e2c2:	f803 2b01 	strb.w	r2, [r3], #1
 800e2c6:	68a2      	ldr	r2, [r4, #8]
 800e2c8:	78d2      	ldrb	r2, [r2, #3]
 800e2ca:	f803 2b01 	strb.w	r2, [r3], #1
 800e2ce:	68a2      	ldr	r2, [r4, #8]
 800e2d0:	7892      	ldrb	r2, [r2, #2]
 800e2d2:	f803 2b01 	strb.w	r2, [r3], #1
 800e2d6:	68a2      	ldr	r2, [r4, #8]
 800e2d8:	7852      	ldrb	r2, [r2, #1]
 800e2da:	f803 2b01 	strb.w	r2, [r3], #1
 800e2de:	68a2      	ldr	r2, [r4, #8]
 800e2e0:	7812      	ldrb	r2, [r2, #0]
 800e2e2:	701a      	strb	r2, [r3, #0]
 800e2e4:	e796      	b.n	800e214 <ucdr_deserialize_double+0xa4>
 800e2e6:	4639      	mov	r1, r7
 800e2e8:	4632      	mov	r2, r6
 800e2ea:	4628      	mov	r0, r5
 800e2ec:	f00d f907 	bl	801b4fe <memcpy>
 800e2f0:	68a1      	ldr	r1, [r4, #8]
 800e2f2:	4642      	mov	r2, r8
 800e2f4:	19a8      	adds	r0, r5, r6
 800e2f6:	f00d f902 	bl	801b4fe <memcpy>
 800e2fa:	e78b      	b.n	800e214 <ucdr_deserialize_double+0xa4>

0800e2fc <ucdr_deserialize_endian_double>:
 800e2fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e300:	460f      	mov	r7, r1
 800e302:	2108      	movs	r1, #8
 800e304:	4604      	mov	r4, r0
 800e306:	4615      	mov	r5, r2
 800e308:	f000 f926 	bl	800e558 <ucdr_buffer_alignment>
 800e30c:	4601      	mov	r1, r0
 800e30e:	4620      	mov	r0, r4
 800e310:	f894 9015 	ldrb.w	r9, [r4, #21]
 800e314:	f000 f964 	bl	800e5e0 <ucdr_advance_buffer>
 800e318:	2108      	movs	r1, #8
 800e31a:	4620      	mov	r0, r4
 800e31c:	f000 f8bc 	bl	800e498 <ucdr_check_buffer_available_for>
 800e320:	2800      	cmp	r0, #0
 800e322:	d159      	bne.n	800e3d8 <ucdr_deserialize_endian_double+0xdc>
 800e324:	e9d4 6801 	ldrd	r6, r8, [r4, #4]
 800e328:	4546      	cmp	r6, r8
 800e32a:	d950      	bls.n	800e3ce <ucdr_deserialize_endian_double+0xd2>
 800e32c:	6923      	ldr	r3, [r4, #16]
 800e32e:	60a6      	str	r6, [r4, #8]
 800e330:	eba6 0608 	sub.w	r6, r6, r8
 800e334:	4433      	add	r3, r6
 800e336:	f1c6 0a08 	rsb	sl, r6, #8
 800e33a:	6123      	str	r3, [r4, #16]
 800e33c:	4651      	mov	r1, sl
 800e33e:	4620      	mov	r0, r4
 800e340:	f000 f8b6 	bl	800e4b0 <ucdr_check_final_buffer_behavior>
 800e344:	2800      	cmp	r0, #0
 800e346:	d073      	beq.n	800e430 <ucdr_deserialize_endian_double+0x134>
 800e348:	2f01      	cmp	r7, #1
 800e34a:	f000 809a 	beq.w	800e482 <ucdr_deserialize_endian_double+0x186>
 800e34e:	f898 3007 	ldrb.w	r3, [r8, #7]
 800e352:	702b      	strb	r3, [r5, #0]
 800e354:	2e00      	cmp	r6, #0
 800e356:	d078      	beq.n	800e44a <ucdr_deserialize_endian_double+0x14e>
 800e358:	f898 3006 	ldrb.w	r3, [r8, #6]
 800e35c:	706b      	strb	r3, [r5, #1]
 800e35e:	2e01      	cmp	r6, #1
 800e360:	f105 0302 	add.w	r3, r5, #2
 800e364:	d075      	beq.n	800e452 <ucdr_deserialize_endian_double+0x156>
 800e366:	f898 3005 	ldrb.w	r3, [r8, #5]
 800e36a:	70ab      	strb	r3, [r5, #2]
 800e36c:	2e02      	cmp	r6, #2
 800e36e:	f105 0303 	add.w	r3, r5, #3
 800e372:	d072      	beq.n	800e45a <ucdr_deserialize_endian_double+0x15e>
 800e374:	f898 3004 	ldrb.w	r3, [r8, #4]
 800e378:	70eb      	strb	r3, [r5, #3]
 800e37a:	2e03      	cmp	r6, #3
 800e37c:	f105 0304 	add.w	r3, r5, #4
 800e380:	d06f      	beq.n	800e462 <ucdr_deserialize_endian_double+0x166>
 800e382:	f898 3003 	ldrb.w	r3, [r8, #3]
 800e386:	712b      	strb	r3, [r5, #4]
 800e388:	2e04      	cmp	r6, #4
 800e38a:	f105 0305 	add.w	r3, r5, #5
 800e38e:	d06c      	beq.n	800e46a <ucdr_deserialize_endian_double+0x16e>
 800e390:	f898 3002 	ldrb.w	r3, [r8, #2]
 800e394:	716b      	strb	r3, [r5, #5]
 800e396:	2e05      	cmp	r6, #5
 800e398:	f105 0306 	add.w	r3, r5, #6
 800e39c:	d069      	beq.n	800e472 <ucdr_deserialize_endian_double+0x176>
 800e39e:	f898 3001 	ldrb.w	r3, [r8, #1]
 800e3a2:	71ab      	strb	r3, [r5, #6]
 800e3a4:	2e06      	cmp	r6, #6
 800e3a6:	f105 0307 	add.w	r3, r5, #7
 800e3aa:	d066      	beq.n	800e47a <ucdr_deserialize_endian_double+0x17e>
 800e3ac:	f898 3000 	ldrb.w	r3, [r8]
 800e3b0:	71eb      	strb	r3, [r5, #7]
 800e3b2:	6923      	ldr	r3, [r4, #16]
 800e3b4:	68a2      	ldr	r2, [r4, #8]
 800e3b6:	7da0      	ldrb	r0, [r4, #22]
 800e3b8:	3308      	adds	r3, #8
 800e3ba:	1b9e      	subs	r6, r3, r6
 800e3bc:	2308      	movs	r3, #8
 800e3be:	4452      	add	r2, sl
 800e3c0:	7563      	strb	r3, [r4, #21]
 800e3c2:	60a2      	str	r2, [r4, #8]
 800e3c4:	6126      	str	r6, [r4, #16]
 800e3c6:	f080 0001 	eor.w	r0, r0, #1
 800e3ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e3ce:	2108      	movs	r1, #8
 800e3d0:	4620      	mov	r0, r4
 800e3d2:	f000 f86d 	bl	800e4b0 <ucdr_check_final_buffer_behavior>
 800e3d6:	b308      	cbz	r0, 800e41c <ucdr_deserialize_endian_double+0x120>
 800e3d8:	2f01      	cmp	r7, #1
 800e3da:	68a3      	ldr	r3, [r4, #8]
 800e3dc:	d023      	beq.n	800e426 <ucdr_deserialize_endian_double+0x12a>
 800e3de:	79db      	ldrb	r3, [r3, #7]
 800e3e0:	702b      	strb	r3, [r5, #0]
 800e3e2:	68a3      	ldr	r3, [r4, #8]
 800e3e4:	799b      	ldrb	r3, [r3, #6]
 800e3e6:	706b      	strb	r3, [r5, #1]
 800e3e8:	68a3      	ldr	r3, [r4, #8]
 800e3ea:	795b      	ldrb	r3, [r3, #5]
 800e3ec:	70ab      	strb	r3, [r5, #2]
 800e3ee:	68a3      	ldr	r3, [r4, #8]
 800e3f0:	791b      	ldrb	r3, [r3, #4]
 800e3f2:	70eb      	strb	r3, [r5, #3]
 800e3f4:	68a3      	ldr	r3, [r4, #8]
 800e3f6:	78db      	ldrb	r3, [r3, #3]
 800e3f8:	712b      	strb	r3, [r5, #4]
 800e3fa:	68a3      	ldr	r3, [r4, #8]
 800e3fc:	789b      	ldrb	r3, [r3, #2]
 800e3fe:	716b      	strb	r3, [r5, #5]
 800e400:	68a3      	ldr	r3, [r4, #8]
 800e402:	785b      	ldrb	r3, [r3, #1]
 800e404:	71ab      	strb	r3, [r5, #6]
 800e406:	68a3      	ldr	r3, [r4, #8]
 800e408:	781b      	ldrb	r3, [r3, #0]
 800e40a:	71eb      	strb	r3, [r5, #7]
 800e40c:	68a2      	ldr	r2, [r4, #8]
 800e40e:	6923      	ldr	r3, [r4, #16]
 800e410:	3208      	adds	r2, #8
 800e412:	3308      	adds	r3, #8
 800e414:	2108      	movs	r1, #8
 800e416:	60a2      	str	r2, [r4, #8]
 800e418:	6123      	str	r3, [r4, #16]
 800e41a:	7561      	strb	r1, [r4, #21]
 800e41c:	7da0      	ldrb	r0, [r4, #22]
 800e41e:	f080 0001 	eor.w	r0, r0, #1
 800e422:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e426:	681a      	ldr	r2, [r3, #0]
 800e428:	685b      	ldr	r3, [r3, #4]
 800e42a:	606b      	str	r3, [r5, #4]
 800e42c:	602a      	str	r2, [r5, #0]
 800e42e:	e7ed      	b.n	800e40c <ucdr_deserialize_endian_double+0x110>
 800e430:	68a2      	ldr	r2, [r4, #8]
 800e432:	6923      	ldr	r3, [r4, #16]
 800e434:	7da0      	ldrb	r0, [r4, #22]
 800e436:	f884 9015 	strb.w	r9, [r4, #21]
 800e43a:	1b92      	subs	r2, r2, r6
 800e43c:	1b9b      	subs	r3, r3, r6
 800e43e:	60a2      	str	r2, [r4, #8]
 800e440:	6123      	str	r3, [r4, #16]
 800e442:	f080 0001 	eor.w	r0, r0, #1
 800e446:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e44a:	68a3      	ldr	r3, [r4, #8]
 800e44c:	799b      	ldrb	r3, [r3, #6]
 800e44e:	706b      	strb	r3, [r5, #1]
 800e450:	1cab      	adds	r3, r5, #2
 800e452:	68a2      	ldr	r2, [r4, #8]
 800e454:	7952      	ldrb	r2, [r2, #5]
 800e456:	f803 2b01 	strb.w	r2, [r3], #1
 800e45a:	68a2      	ldr	r2, [r4, #8]
 800e45c:	7912      	ldrb	r2, [r2, #4]
 800e45e:	f803 2b01 	strb.w	r2, [r3], #1
 800e462:	68a2      	ldr	r2, [r4, #8]
 800e464:	78d2      	ldrb	r2, [r2, #3]
 800e466:	f803 2b01 	strb.w	r2, [r3], #1
 800e46a:	68a2      	ldr	r2, [r4, #8]
 800e46c:	7892      	ldrb	r2, [r2, #2]
 800e46e:	f803 2b01 	strb.w	r2, [r3], #1
 800e472:	68a2      	ldr	r2, [r4, #8]
 800e474:	7852      	ldrb	r2, [r2, #1]
 800e476:	f803 2b01 	strb.w	r2, [r3], #1
 800e47a:	68a2      	ldr	r2, [r4, #8]
 800e47c:	7812      	ldrb	r2, [r2, #0]
 800e47e:	701a      	strb	r2, [r3, #0]
 800e480:	e797      	b.n	800e3b2 <ucdr_deserialize_endian_double+0xb6>
 800e482:	4641      	mov	r1, r8
 800e484:	4632      	mov	r2, r6
 800e486:	4628      	mov	r0, r5
 800e488:	f00d f839 	bl	801b4fe <memcpy>
 800e48c:	68a1      	ldr	r1, [r4, #8]
 800e48e:	4652      	mov	r2, sl
 800e490:	19a8      	adds	r0, r5, r6
 800e492:	f00d f834 	bl	801b4fe <memcpy>
 800e496:	e78c      	b.n	800e3b2 <ucdr_deserialize_endian_double+0xb6>

0800e498 <ucdr_check_buffer_available_for>:
 800e498:	7d83      	ldrb	r3, [r0, #22]
 800e49a:	b93b      	cbnz	r3, 800e4ac <ucdr_check_buffer_available_for+0x14>
 800e49c:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 800e4a0:	4419      	add	r1, r3
 800e4a2:	4288      	cmp	r0, r1
 800e4a4:	bf34      	ite	cc
 800e4a6:	2000      	movcc	r0, #0
 800e4a8:	2001      	movcs	r0, #1
 800e4aa:	4770      	bx	lr
 800e4ac:	2000      	movs	r0, #0
 800e4ae:	4770      	bx	lr

0800e4b0 <ucdr_check_final_buffer_behavior>:
 800e4b0:	7d83      	ldrb	r3, [r0, #22]
 800e4b2:	b943      	cbnz	r3, 800e4c6 <ucdr_check_final_buffer_behavior+0x16>
 800e4b4:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 800e4b8:	4291      	cmp	r1, r2
 800e4ba:	b510      	push	{r4, lr}
 800e4bc:	4604      	mov	r4, r0
 800e4be:	d205      	bcs.n	800e4cc <ucdr_check_final_buffer_behavior+0x1c>
 800e4c0:	2301      	movs	r3, #1
 800e4c2:	4618      	mov	r0, r3
 800e4c4:	bd10      	pop	{r4, pc}
 800e4c6:	2300      	movs	r3, #0
 800e4c8:	4618      	mov	r0, r3
 800e4ca:	4770      	bx	lr
 800e4cc:	6982      	ldr	r2, [r0, #24]
 800e4ce:	b13a      	cbz	r2, 800e4e0 <ucdr_check_final_buffer_behavior+0x30>
 800e4d0:	69c1      	ldr	r1, [r0, #28]
 800e4d2:	4790      	blx	r2
 800e4d4:	f080 0301 	eor.w	r3, r0, #1
 800e4d8:	b2db      	uxtb	r3, r3
 800e4da:	75a0      	strb	r0, [r4, #22]
 800e4dc:	4618      	mov	r0, r3
 800e4de:	bd10      	pop	{r4, pc}
 800e4e0:	2001      	movs	r0, #1
 800e4e2:	75a0      	strb	r0, [r4, #22]
 800e4e4:	e7fa      	b.n	800e4dc <ucdr_check_final_buffer_behavior+0x2c>
 800e4e6:	bf00      	nop

0800e4e8 <ucdr_set_on_full_buffer_callback>:
 800e4e8:	e9c0 1206 	strd	r1, r2, [r0, #24]
 800e4ec:	4770      	bx	lr
 800e4ee:	bf00      	nop

0800e4f0 <ucdr_init_buffer_origin_offset_endian>:
 800e4f0:	b410      	push	{r4}
 800e4f2:	9c01      	ldr	r4, [sp, #4]
 800e4f4:	6001      	str	r1, [r0, #0]
 800e4f6:	440a      	add	r2, r1
 800e4f8:	6042      	str	r2, [r0, #4]
 800e4fa:	190a      	adds	r2, r1, r4
 800e4fc:	441c      	add	r4, r3
 800e4fe:	e9c0 3403 	strd	r3, r4, [r0, #12]
 800e502:	6082      	str	r2, [r0, #8]
 800e504:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800e508:	7503      	strb	r3, [r0, #20]
 800e50a:	2200      	movs	r2, #0
 800e50c:	e9c0 2206 	strd	r2, r2, [r0, #24]
 800e510:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e514:	7542      	strb	r2, [r0, #21]
 800e516:	7582      	strb	r2, [r0, #22]
 800e518:	4770      	bx	lr
 800e51a:	bf00      	nop

0800e51c <ucdr_init_buffer_origin_offset>:
 800e51c:	b510      	push	{r4, lr}
 800e51e:	b082      	sub	sp, #8
 800e520:	9c04      	ldr	r4, [sp, #16]
 800e522:	9400      	str	r4, [sp, #0]
 800e524:	2401      	movs	r4, #1
 800e526:	9401      	str	r4, [sp, #4]
 800e528:	f7ff ffe2 	bl	800e4f0 <ucdr_init_buffer_origin_offset_endian>
 800e52c:	b002      	add	sp, #8
 800e52e:	bd10      	pop	{r4, pc}

0800e530 <ucdr_init_buffer_origin>:
 800e530:	b510      	push	{r4, lr}
 800e532:	b082      	sub	sp, #8
 800e534:	2400      	movs	r4, #0
 800e536:	9400      	str	r4, [sp, #0]
 800e538:	f7ff fff0 	bl	800e51c <ucdr_init_buffer_origin_offset>
 800e53c:	b002      	add	sp, #8
 800e53e:	bd10      	pop	{r4, pc}

0800e540 <ucdr_init_buffer>:
 800e540:	2300      	movs	r3, #0
 800e542:	f7ff bff5 	b.w	800e530 <ucdr_init_buffer_origin>
 800e546:	bf00      	nop

0800e548 <ucdr_alignment>:
 800e548:	fbb0 f3f1 	udiv	r3, r0, r1
 800e54c:	fb03 0011 	mls	r0, r3, r1, r0
 800e550:	1a08      	subs	r0, r1, r0
 800e552:	3901      	subs	r1, #1
 800e554:	4008      	ands	r0, r1
 800e556:	4770      	bx	lr

0800e558 <ucdr_buffer_alignment>:
 800e558:	7d43      	ldrb	r3, [r0, #21]
 800e55a:	428b      	cmp	r3, r1
 800e55c:	d208      	bcs.n	800e570 <ucdr_buffer_alignment+0x18>
 800e55e:	6900      	ldr	r0, [r0, #16]
 800e560:	fbb0 f3f1 	udiv	r3, r0, r1
 800e564:	fb01 0013 	mls	r0, r1, r3, r0
 800e568:	1a08      	subs	r0, r1, r0
 800e56a:	3901      	subs	r1, #1
 800e56c:	4008      	ands	r0, r1
 800e56e:	4770      	bx	lr
 800e570:	2000      	movs	r0, #0
 800e572:	4770      	bx	lr

0800e574 <ucdr_align_to>:
 800e574:	b538      	push	{r3, r4, r5, lr}
 800e576:	4604      	mov	r4, r0
 800e578:	460d      	mov	r5, r1
 800e57a:	f7ff ffed 	bl	800e558 <ucdr_buffer_alignment>
 800e57e:	68a3      	ldr	r3, [r4, #8]
 800e580:	6921      	ldr	r1, [r4, #16]
 800e582:	7565      	strb	r5, [r4, #21]
 800e584:	181a      	adds	r2, r3, r0
 800e586:	6863      	ldr	r3, [r4, #4]
 800e588:	4293      	cmp	r3, r2
 800e58a:	4408      	add	r0, r1
 800e58c:	bf28      	it	cs
 800e58e:	4613      	movcs	r3, r2
 800e590:	6120      	str	r0, [r4, #16]
 800e592:	60a3      	str	r3, [r4, #8]
 800e594:	bd38      	pop	{r3, r4, r5, pc}
 800e596:	bf00      	nop

0800e598 <ucdr_buffer_length>:
 800e598:	6882      	ldr	r2, [r0, #8]
 800e59a:	6800      	ldr	r0, [r0, #0]
 800e59c:	1a10      	subs	r0, r2, r0
 800e59e:	4770      	bx	lr

0800e5a0 <ucdr_buffer_remaining>:
 800e5a0:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 800e5a4:	1a10      	subs	r0, r2, r0
 800e5a6:	4770      	bx	lr

0800e5a8 <ucdr_check_final_buffer_behavior_array>:
 800e5a8:	b538      	push	{r3, r4, r5, lr}
 800e5aa:	7d83      	ldrb	r3, [r0, #22]
 800e5ac:	b963      	cbnz	r3, 800e5c8 <ucdr_check_final_buffer_behavior_array+0x20>
 800e5ae:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 800e5b2:	429a      	cmp	r2, r3
 800e5b4:	4604      	mov	r4, r0
 800e5b6:	460d      	mov	r5, r1
 800e5b8:	d308      	bcc.n	800e5cc <ucdr_check_final_buffer_behavior_array+0x24>
 800e5ba:	b139      	cbz	r1, 800e5cc <ucdr_check_final_buffer_behavior_array+0x24>
 800e5bc:	6983      	ldr	r3, [r0, #24]
 800e5be:	b163      	cbz	r3, 800e5da <ucdr_check_final_buffer_behavior_array+0x32>
 800e5c0:	69c1      	ldr	r1, [r0, #28]
 800e5c2:	4798      	blx	r3
 800e5c4:	75a0      	strb	r0, [r4, #22]
 800e5c6:	b108      	cbz	r0, 800e5cc <ucdr_check_final_buffer_behavior_array+0x24>
 800e5c8:	2000      	movs	r0, #0
 800e5ca:	bd38      	pop	{r3, r4, r5, pc}
 800e5cc:	4620      	mov	r0, r4
 800e5ce:	f7ff ffe7 	bl	800e5a0 <ucdr_buffer_remaining>
 800e5d2:	42a8      	cmp	r0, r5
 800e5d4:	bf28      	it	cs
 800e5d6:	4628      	movcs	r0, r5
 800e5d8:	bd38      	pop	{r3, r4, r5, pc}
 800e5da:	2301      	movs	r3, #1
 800e5dc:	7583      	strb	r3, [r0, #22]
 800e5de:	e7f3      	b.n	800e5c8 <ucdr_check_final_buffer_behavior_array+0x20>

0800e5e0 <ucdr_advance_buffer>:
 800e5e0:	b538      	push	{r3, r4, r5, lr}
 800e5e2:	4604      	mov	r4, r0
 800e5e4:	460d      	mov	r5, r1
 800e5e6:	f7ff ff57 	bl	800e498 <ucdr_check_buffer_available_for>
 800e5ea:	b178      	cbz	r0, 800e60c <ucdr_advance_buffer+0x2c>
 800e5ec:	6923      	ldr	r3, [r4, #16]
 800e5ee:	68a2      	ldr	r2, [r4, #8]
 800e5f0:	442b      	add	r3, r5
 800e5f2:	6123      	str	r3, [r4, #16]
 800e5f4:	2301      	movs	r3, #1
 800e5f6:	442a      	add	r2, r5
 800e5f8:	7563      	strb	r3, [r4, #21]
 800e5fa:	60a2      	str	r2, [r4, #8]
 800e5fc:	bd38      	pop	{r3, r4, r5, pc}
 800e5fe:	68a2      	ldr	r2, [r4, #8]
 800e600:	6923      	ldr	r3, [r4, #16]
 800e602:	4402      	add	r2, r0
 800e604:	4403      	add	r3, r0
 800e606:	1a2d      	subs	r5, r5, r0
 800e608:	60a2      	str	r2, [r4, #8]
 800e60a:	6123      	str	r3, [r4, #16]
 800e60c:	4629      	mov	r1, r5
 800e60e:	2201      	movs	r2, #1
 800e610:	4620      	mov	r0, r4
 800e612:	f7ff ffc9 	bl	800e5a8 <ucdr_check_final_buffer_behavior_array>
 800e616:	2800      	cmp	r0, #0
 800e618:	d1f1      	bne.n	800e5fe <ucdr_advance_buffer+0x1e>
 800e61a:	2301      	movs	r3, #1
 800e61c:	7563      	strb	r3, [r4, #21]
 800e61e:	bd38      	pop	{r3, r4, r5, pc}

0800e620 <rcl_get_zero_initialized_init_options>:
 800e620:	2000      	movs	r0, #0
 800e622:	4770      	bx	lr

0800e624 <rcl_init_options_init>:
 800e624:	b084      	sub	sp, #16
 800e626:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e628:	b097      	sub	sp, #92	@ 0x5c
 800e62a:	ae1d      	add	r6, sp, #116	@ 0x74
 800e62c:	e886 000e 	stmia.w	r6, {r1, r2, r3}
 800e630:	2800      	cmp	r0, #0
 800e632:	d058      	beq.n	800e6e6 <rcl_init_options_init+0xc2>
 800e634:	6803      	ldr	r3, [r0, #0]
 800e636:	4605      	mov	r5, r0
 800e638:	b133      	cbz	r3, 800e648 <rcl_init_options_init+0x24>
 800e63a:	2464      	movs	r4, #100	@ 0x64
 800e63c:	4620      	mov	r0, r4
 800e63e:	b017      	add	sp, #92	@ 0x5c
 800e640:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800e644:	b004      	add	sp, #16
 800e646:	4770      	bx	lr
 800e648:	4630      	mov	r0, r6
 800e64a:	f001 f997 	bl	800f97c <rcutils_allocator_is_valid>
 800e64e:	2800      	cmp	r0, #0
 800e650:	d049      	beq.n	800e6e6 <rcl_init_options_init+0xc2>
 800e652:	46b4      	mov	ip, r6
 800e654:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e658:	ac11      	add	r4, sp, #68	@ 0x44
 800e65a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e65c:	f8dc 3000 	ldr.w	r3, [ip]
 800e660:	6023      	str	r3, [r4, #0]
 800e662:	9921      	ldr	r1, [sp, #132]	@ 0x84
 800e664:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800e666:	2050      	movs	r0, #80	@ 0x50
 800e668:	4798      	blx	r3
 800e66a:	4604      	mov	r4, r0
 800e66c:	6028      	str	r0, [r5, #0]
 800e66e:	2800      	cmp	r0, #0
 800e670:	d03b      	beq.n	800e6ea <rcl_init_options_init+0xc6>
 800e672:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 800e676:	4686      	mov	lr, r0
 800e678:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e67c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800e680:	f8dc 3000 	ldr.w	r3, [ip]
 800e684:	f8ce 3000 	str.w	r3, [lr]
 800e688:	a802      	add	r0, sp, #8
 800e68a:	f001 fa09 	bl	800faa0 <rmw_get_zero_initialized_init_options>
 800e68e:	f10d 0e08 	add.w	lr, sp, #8
 800e692:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800e696:	f104 0c18 	add.w	ip, r4, #24
 800e69a:	682f      	ldr	r7, [r5, #0]
 800e69c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e6a0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800e6a4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e6a8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800e6ac:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e6b0:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800e6b4:	ac20      	add	r4, sp, #128	@ 0x80
 800e6b6:	e88c 0003 	stmia.w	ip, {r0, r1}
 800e6ba:	e894 0003 	ldmia.w	r4, {r0, r1}
 800e6be:	e88d 0003 	stmia.w	sp, {r0, r1}
 800e6c2:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800e6c6:	f107 0018 	add.w	r0, r7, #24
 800e6ca:	f001 fa17 	bl	800fafc <rmw_init_options_init>
 800e6ce:	4604      	mov	r4, r0
 800e6d0:	2800      	cmp	r0, #0
 800e6d2:	d0b3      	beq.n	800e63c <rcl_init_options_init+0x18>
 800e6d4:	9921      	ldr	r1, [sp, #132]	@ 0x84
 800e6d6:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800e6d8:	6828      	ldr	r0, [r5, #0]
 800e6da:	4798      	blx	r3
 800e6dc:	4620      	mov	r0, r4
 800e6de:	f006 fd59 	bl	8015194 <rcl_convert_rmw_ret_to_rcl_ret>
 800e6e2:	4604      	mov	r4, r0
 800e6e4:	e7aa      	b.n	800e63c <rcl_init_options_init+0x18>
 800e6e6:	240b      	movs	r4, #11
 800e6e8:	e7a8      	b.n	800e63c <rcl_init_options_init+0x18>
 800e6ea:	240a      	movs	r4, #10
 800e6ec:	e7a6      	b.n	800e63c <rcl_init_options_init+0x18>
 800e6ee:	bf00      	nop

0800e6f0 <rcl_init_options_fini>:
 800e6f0:	b530      	push	{r4, r5, lr}
 800e6f2:	b087      	sub	sp, #28
 800e6f4:	b1f0      	cbz	r0, 800e734 <rcl_init_options_fini+0x44>
 800e6f6:	6803      	ldr	r3, [r0, #0]
 800e6f8:	4604      	mov	r4, r0
 800e6fa:	b1db      	cbz	r3, 800e734 <rcl_init_options_fini+0x44>
 800e6fc:	469c      	mov	ip, r3
 800e6fe:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e702:	f10d 0e04 	add.w	lr, sp, #4
 800e706:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800e70a:	f8dc 3000 	ldr.w	r3, [ip]
 800e70e:	f8ce 3000 	str.w	r3, [lr]
 800e712:	a801      	add	r0, sp, #4
 800e714:	f001 f932 	bl	800f97c <rcutils_allocator_is_valid>
 800e718:	b160      	cbz	r0, 800e734 <rcl_init_options_fini+0x44>
 800e71a:	6820      	ldr	r0, [r4, #0]
 800e71c:	3018      	adds	r0, #24
 800e71e:	f001 fac3 	bl	800fca8 <rmw_init_options_fini>
 800e722:	4605      	mov	r5, r0
 800e724:	b950      	cbnz	r0, 800e73c <rcl_init_options_fini+0x4c>
 800e726:	6820      	ldr	r0, [r4, #0]
 800e728:	9b02      	ldr	r3, [sp, #8]
 800e72a:	9905      	ldr	r1, [sp, #20]
 800e72c:	4798      	blx	r3
 800e72e:	4628      	mov	r0, r5
 800e730:	b007      	add	sp, #28
 800e732:	bd30      	pop	{r4, r5, pc}
 800e734:	250b      	movs	r5, #11
 800e736:	4628      	mov	r0, r5
 800e738:	b007      	add	sp, #28
 800e73a:	bd30      	pop	{r4, r5, pc}
 800e73c:	f006 fd2a 	bl	8015194 <rcl_convert_rmw_ret_to_rcl_ret>
 800e740:	4605      	mov	r5, r0
 800e742:	e7f8      	b.n	800e736 <rcl_init_options_fini+0x46>

0800e744 <rcl_init_options_copy>:
 800e744:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e748:	b094      	sub	sp, #80	@ 0x50
 800e74a:	2800      	cmp	r0, #0
 800e74c:	d058      	beq.n	800e800 <rcl_init_options_copy+0xbc>
 800e74e:	4604      	mov	r4, r0
 800e750:	6800      	ldr	r0, [r0, #0]
 800e752:	2800      	cmp	r0, #0
 800e754:	d054      	beq.n	800e800 <rcl_init_options_copy+0xbc>
 800e756:	460e      	mov	r6, r1
 800e758:	f001 f910 	bl	800f97c <rcutils_allocator_is_valid>
 800e75c:	2800      	cmp	r0, #0
 800e75e:	d04f      	beq.n	800e800 <rcl_init_options_copy+0xbc>
 800e760:	2e00      	cmp	r6, #0
 800e762:	d04d      	beq.n	800e800 <rcl_init_options_copy+0xbc>
 800e764:	6833      	ldr	r3, [r6, #0]
 800e766:	b123      	cbz	r3, 800e772 <rcl_init_options_copy+0x2e>
 800e768:	2464      	movs	r4, #100	@ 0x64
 800e76a:	4620      	mov	r0, r4
 800e76c:	b014      	add	sp, #80	@ 0x50
 800e76e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e772:	6827      	ldr	r7, [r4, #0]
 800e774:	46bc      	mov	ip, r7
 800e776:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e77a:	ad0f      	add	r5, sp, #60	@ 0x3c
 800e77c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800e77e:	f8dc 3000 	ldr.w	r3, [ip]
 800e782:	f8d7 8000 	ldr.w	r8, [r7]
 800e786:	602b      	str	r3, [r5, #0]
 800e788:	4619      	mov	r1, r3
 800e78a:	2050      	movs	r0, #80	@ 0x50
 800e78c:	47c0      	blx	r8
 800e78e:	4605      	mov	r5, r0
 800e790:	6030      	str	r0, [r6, #0]
 800e792:	b3d0      	cbz	r0, 800e80a <rcl_init_options_copy+0xc6>
 800e794:	f10d 0c3c 	add.w	ip, sp, #60	@ 0x3c
 800e798:	4686      	mov	lr, r0
 800e79a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e79e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800e7a2:	f8dc 3000 	ldr.w	r3, [ip]
 800e7a6:	f8ce 3000 	str.w	r3, [lr]
 800e7aa:	4668      	mov	r0, sp
 800e7ac:	f001 f978 	bl	800faa0 <rmw_get_zero_initialized_init_options>
 800e7b0:	46ee      	mov	lr, sp
 800e7b2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800e7b6:	f105 0c18 	add.w	ip, r5, #24
 800e7ba:	6824      	ldr	r4, [r4, #0]
 800e7bc:	6835      	ldr	r5, [r6, #0]
 800e7be:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e7c2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800e7c6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e7ca:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800e7ce:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e7d2:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800e7d6:	e88c 0003 	stmia.w	ip, {r0, r1}
 800e7da:	f104 0018 	add.w	r0, r4, #24
 800e7de:	f105 0118 	add.w	r1, r5, #24
 800e7e2:	f001 f9ed 	bl	800fbc0 <rmw_init_options_copy>
 800e7e6:	4604      	mov	r4, r0
 800e7e8:	2800      	cmp	r0, #0
 800e7ea:	d0be      	beq.n	800e76a <rcl_init_options_copy+0x26>
 800e7ec:	f001 f8d4 	bl	800f998 <rcutils_get_error_string>
 800e7f0:	f001 f8ea 	bl	800f9c8 <rcutils_reset_error>
 800e7f4:	4630      	mov	r0, r6
 800e7f6:	f7ff ff7b 	bl	800e6f0 <rcl_init_options_fini>
 800e7fa:	b140      	cbz	r0, 800e80e <rcl_init_options_copy+0xca>
 800e7fc:	4604      	mov	r4, r0
 800e7fe:	e7b4      	b.n	800e76a <rcl_init_options_copy+0x26>
 800e800:	240b      	movs	r4, #11
 800e802:	4620      	mov	r0, r4
 800e804:	b014      	add	sp, #80	@ 0x50
 800e806:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e80a:	240a      	movs	r4, #10
 800e80c:	e7ad      	b.n	800e76a <rcl_init_options_copy+0x26>
 800e80e:	4620      	mov	r0, r4
 800e810:	b014      	add	sp, #80	@ 0x50
 800e812:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e816:	f006 bcbd 	b.w	8015194 <rcl_convert_rmw_ret_to_rcl_ret>
 800e81a:	bf00      	nop

0800e81c <rcl_init_options_set_domain_id>:
 800e81c:	b120      	cbz	r0, 800e828 <rcl_init_options_set_domain_id+0xc>
 800e81e:	6803      	ldr	r3, [r0, #0]
 800e820:	b113      	cbz	r3, 800e828 <rcl_init_options_set_domain_id+0xc>
 800e822:	6259      	str	r1, [r3, #36]	@ 0x24
 800e824:	2000      	movs	r0, #0
 800e826:	4770      	bx	lr
 800e828:	200b      	movs	r0, #11
 800e82a:	4770      	bx	lr

0800e82c <rcl_get_zero_initialized_publisher>:
 800e82c:	4b01      	ldr	r3, [pc, #4]	@ (800e834 <rcl_get_zero_initialized_publisher+0x8>)
 800e82e:	6818      	ldr	r0, [r3, #0]
 800e830:	4770      	bx	lr
 800e832:	bf00      	nop
 800e834:	0801e55c 	.word	0x0801e55c

0800e838 <rcl_publisher_init>:
 800e838:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e83c:	b088      	sub	sp, #32
 800e83e:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 800e840:	2d00      	cmp	r5, #0
 800e842:	d069      	beq.n	800e918 <rcl_publisher_init+0xe0>
 800e844:	f105 0950 	add.w	r9, r5, #80	@ 0x50
 800e848:	4604      	mov	r4, r0
 800e84a:	4648      	mov	r0, r9
 800e84c:	460e      	mov	r6, r1
 800e84e:	4690      	mov	r8, r2
 800e850:	461f      	mov	r7, r3
 800e852:	f001 f893 	bl	800f97c <rcutils_allocator_is_valid>
 800e856:	2800      	cmp	r0, #0
 800e858:	d05e      	beq.n	800e918 <rcl_publisher_init+0xe0>
 800e85a:	2c00      	cmp	r4, #0
 800e85c:	d05c      	beq.n	800e918 <rcl_publisher_init+0xe0>
 800e85e:	f8d4 a000 	ldr.w	sl, [r4]
 800e862:	f1ba 0f00 	cmp.w	sl, #0
 800e866:	d004      	beq.n	800e872 <rcl_publisher_init+0x3a>
 800e868:	2764      	movs	r7, #100	@ 0x64
 800e86a:	4638      	mov	r0, r7
 800e86c:	b008      	add	sp, #32
 800e86e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e872:	4630      	mov	r0, r6
 800e874:	f006 ff72 	bl	801575c <rcl_node_is_valid>
 800e878:	2800      	cmp	r0, #0
 800e87a:	d052      	beq.n	800e922 <rcl_publisher_init+0xea>
 800e87c:	f1b8 0f00 	cmp.w	r8, #0
 800e880:	d04a      	beq.n	800e918 <rcl_publisher_init+0xe0>
 800e882:	2f00      	cmp	r7, #0
 800e884:	d048      	beq.n	800e918 <rcl_publisher_init+0xe0>
 800e886:	e9cd aa03 	strd	sl, sl, [sp, #12]
 800e88a:	aa07      	add	r2, sp, #28
 800e88c:	9205      	str	r2, [sp, #20]
 800e88e:	f105 0358 	add.w	r3, r5, #88	@ 0x58
 800e892:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800e896:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800e89a:	f8cd a01c 	str.w	sl, [sp, #28]
 800e89e:	4639      	mov	r1, r7
 800e8a0:	e899 000c 	ldmia.w	r9, {r2, r3}
 800e8a4:	4630      	mov	r0, r6
 800e8a6:	f006 ffad 	bl	8015804 <rcl_node_resolve_name>
 800e8aa:	4607      	mov	r7, r0
 800e8ac:	2800      	cmp	r0, #0
 800e8ae:	d14f      	bne.n	800e950 <rcl_publisher_init+0x118>
 800e8b0:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 800e8b2:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800e8b4:	20c8      	movs	r0, #200	@ 0xc8
 800e8b6:	4798      	blx	r3
 800e8b8:	6020      	str	r0, [r4, #0]
 800e8ba:	2800      	cmp	r0, #0
 800e8bc:	d04e      	beq.n	800e95c <rcl_publisher_init+0x124>
 800e8be:	4630      	mov	r0, r6
 800e8c0:	f006 ff6e 	bl	80157a0 <rcl_node_get_rmw_handle>
 800e8c4:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 800e8c8:	9300      	str	r3, [sp, #0]
 800e8ca:	9a07      	ldr	r2, [sp, #28]
 800e8cc:	6827      	ldr	r7, [r4, #0]
 800e8ce:	462b      	mov	r3, r5
 800e8d0:	4641      	mov	r1, r8
 800e8d2:	f001 fd15 	bl	8010300 <rmw_create_publisher>
 800e8d6:	6823      	ldr	r3, [r4, #0]
 800e8d8:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
 800e8dc:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800e8e0:	b370      	cbz	r0, 800e940 <rcl_publisher_init+0x108>
 800e8e2:	f103 0170 	add.w	r1, r3, #112	@ 0x70
 800e8e6:	f001 fde9 	bl	80104bc <rmw_publisher_get_actual_qos>
 800e8ea:	6823      	ldr	r3, [r4, #0]
 800e8ec:	4607      	mov	r7, r0
 800e8ee:	b9d0      	cbnz	r0, 800e926 <rcl_publisher_init+0xee>
 800e8f0:	f895 2048 	ldrb.w	r2, [r5, #72]	@ 0x48
 800e8f4:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
 800e8f8:	4629      	mov	r1, r5
 800e8fa:	2270      	movs	r2, #112	@ 0x70
 800e8fc:	4618      	mov	r0, r3
 800e8fe:	f00c fdfe 	bl	801b4fe <memcpy>
 800e902:	6832      	ldr	r2, [r6, #0]
 800e904:	f8c0 20c0 	str.w	r2, [r0, #192]	@ 0xc0
 800e908:	9807      	ldr	r0, [sp, #28]
 800e90a:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 800e90c:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800e90e:	4798      	blx	r3
 800e910:	4638      	mov	r0, r7
 800e912:	b008      	add	sp, #32
 800e914:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e918:	270b      	movs	r7, #11
 800e91a:	4638      	mov	r0, r7
 800e91c:	b008      	add	sp, #32
 800e91e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e922:	27c8      	movs	r7, #200	@ 0xc8
 800e924:	e7a1      	b.n	800e86a <rcl_publisher_init+0x32>
 800e926:	b18b      	cbz	r3, 800e94c <rcl_publisher_init+0x114>
 800e928:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800e92c:	b142      	cbz	r2, 800e940 <rcl_publisher_init+0x108>
 800e92e:	4630      	mov	r0, r6
 800e930:	f006 ff36 	bl	80157a0 <rcl_node_get_rmw_handle>
 800e934:	6823      	ldr	r3, [r4, #0]
 800e936:	f8d3 10c4 	ldr.w	r1, [r3, #196]	@ 0xc4
 800e93a:	f001 fdcf 	bl	80104dc <rmw_destroy_publisher>
 800e93e:	6823      	ldr	r3, [r4, #0]
 800e940:	6d6a      	ldr	r2, [r5, #84]	@ 0x54
 800e942:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800e944:	4618      	mov	r0, r3
 800e946:	4790      	blx	r2
 800e948:	2300      	movs	r3, #0
 800e94a:	6023      	str	r3, [r4, #0]
 800e94c:	2701      	movs	r7, #1
 800e94e:	e7db      	b.n	800e908 <rcl_publisher_init+0xd0>
 800e950:	2867      	cmp	r0, #103	@ 0x67
 800e952:	d0d9      	beq.n	800e908 <rcl_publisher_init+0xd0>
 800e954:	2869      	cmp	r0, #105	@ 0x69
 800e956:	d003      	beq.n	800e960 <rcl_publisher_init+0x128>
 800e958:	280a      	cmp	r0, #10
 800e95a:	d1f7      	bne.n	800e94c <rcl_publisher_init+0x114>
 800e95c:	270a      	movs	r7, #10
 800e95e:	e7d3      	b.n	800e908 <rcl_publisher_init+0xd0>
 800e960:	2767      	movs	r7, #103	@ 0x67
 800e962:	e7d1      	b.n	800e908 <rcl_publisher_init+0xd0>

0800e964 <rcl_publisher_get_default_options>:
 800e964:	b570      	push	{r4, r5, r6, lr}
 800e966:	4d14      	ldr	r5, [pc, #80]	@ (800e9b8 <rcl_publisher_get_default_options+0x54>)
 800e968:	4914      	ldr	r1, [pc, #80]	@ (800e9bc <rcl_publisher_get_default_options+0x58>)
 800e96a:	b088      	sub	sp, #32
 800e96c:	4604      	mov	r4, r0
 800e96e:	2250      	movs	r2, #80	@ 0x50
 800e970:	4628      	mov	r0, r5
 800e972:	f00c fdc4 	bl	801b4fe <memcpy>
 800e976:	a802      	add	r0, sp, #8
 800e978:	f000 fff2 	bl	800f960 <rcutils_get_default_allocator>
 800e97c:	f10d 0c08 	add.w	ip, sp, #8
 800e980:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e984:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 800e988:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800e98c:	466e      	mov	r6, sp
 800e98e:	f8dc 3000 	ldr.w	r3, [ip]
 800e992:	f8ce 3000 	str.w	r3, [lr]
 800e996:	4630      	mov	r0, r6
 800e998:	f001 f892 	bl	800fac0 <rmw_get_default_publisher_options>
 800e99c:	e896 0003 	ldmia.w	r6, {r0, r1}
 800e9a0:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 800e9a4:	e883 0003 	stmia.w	r3, {r0, r1}
 800e9a8:	2270      	movs	r2, #112	@ 0x70
 800e9aa:	4629      	mov	r1, r5
 800e9ac:	4620      	mov	r0, r4
 800e9ae:	f00c fda6 	bl	801b4fe <memcpy>
 800e9b2:	4620      	mov	r0, r4
 800e9b4:	b008      	add	sp, #32
 800e9b6:	bd70      	pop	{r4, r5, r6, pc}
 800e9b8:	20006b30 	.word	0x20006b30
 800e9bc:	0801e560 	.word	0x0801e560

0800e9c0 <rcl_publish>:
 800e9c0:	b1f8      	cbz	r0, 800ea02 <rcl_publish+0x42>
 800e9c2:	6803      	ldr	r3, [r0, #0]
 800e9c4:	b570      	push	{r4, r5, r6, lr}
 800e9c6:	4604      	mov	r4, r0
 800e9c8:	b1b3      	cbz	r3, 800e9f8 <rcl_publish+0x38>
 800e9ca:	4616      	mov	r6, r2
 800e9cc:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800e9d0:	b192      	cbz	r2, 800e9f8 <rcl_publish+0x38>
 800e9d2:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 800e9d6:	460d      	mov	r5, r1
 800e9d8:	f006 fbfa 	bl	80151d0 <rcl_context_is_valid>
 800e9dc:	b160      	cbz	r0, 800e9f8 <rcl_publish+0x38>
 800e9de:	6823      	ldr	r3, [r4, #0]
 800e9e0:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800e9e4:	b140      	cbz	r0, 800e9f8 <rcl_publish+0x38>
 800e9e6:	b155      	cbz	r5, 800e9fe <rcl_publish+0x3e>
 800e9e8:	4632      	mov	r2, r6
 800e9ea:	4629      	mov	r1, r5
 800e9ec:	f001 fc28 	bl	8010240 <rmw_publish>
 800e9f0:	3800      	subs	r0, #0
 800e9f2:	bf18      	it	ne
 800e9f4:	2001      	movne	r0, #1
 800e9f6:	bd70      	pop	{r4, r5, r6, pc}
 800e9f8:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800e9fc:	bd70      	pop	{r4, r5, r6, pc}
 800e9fe:	200b      	movs	r0, #11
 800ea00:	bd70      	pop	{r4, r5, r6, pc}
 800ea02:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800ea06:	4770      	bx	lr

0800ea08 <rcl_publisher_is_valid>:
 800ea08:	b1a0      	cbz	r0, 800ea34 <rcl_publisher_is_valid+0x2c>
 800ea0a:	6803      	ldr	r3, [r0, #0]
 800ea0c:	b510      	push	{r4, lr}
 800ea0e:	4604      	mov	r4, r0
 800ea10:	b173      	cbz	r3, 800ea30 <rcl_publisher_is_valid+0x28>
 800ea12:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800ea16:	b15a      	cbz	r2, 800ea30 <rcl_publisher_is_valid+0x28>
 800ea18:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 800ea1c:	f006 fbd8 	bl	80151d0 <rcl_context_is_valid>
 800ea20:	b130      	cbz	r0, 800ea30 <rcl_publisher_is_valid+0x28>
 800ea22:	6823      	ldr	r3, [r4, #0]
 800ea24:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800ea28:	3800      	subs	r0, #0
 800ea2a:	bf18      	it	ne
 800ea2c:	2001      	movne	r0, #1
 800ea2e:	bd10      	pop	{r4, pc}
 800ea30:	2000      	movs	r0, #0
 800ea32:	bd10      	pop	{r4, pc}
 800ea34:	2000      	movs	r0, #0
 800ea36:	4770      	bx	lr

0800ea38 <rcl_publisher_is_valid_except_context>:
 800ea38:	b130      	cbz	r0, 800ea48 <rcl_publisher_is_valid_except_context+0x10>
 800ea3a:	6800      	ldr	r0, [r0, #0]
 800ea3c:	b120      	cbz	r0, 800ea48 <rcl_publisher_is_valid_except_context+0x10>
 800ea3e:	f8d0 00c4 	ldr.w	r0, [r0, #196]	@ 0xc4
 800ea42:	3800      	subs	r0, #0
 800ea44:	bf18      	it	ne
 800ea46:	2001      	movne	r0, #1
 800ea48:	4770      	bx	lr
 800ea4a:	bf00      	nop

0800ea4c <_rclc_check_for_new_data>:
 800ea4c:	2800      	cmp	r0, #0
 800ea4e:	d046      	beq.n	800eade <_rclc_check_for_new_data+0x92>
 800ea50:	b510      	push	{r4, lr}
 800ea52:	7802      	ldrb	r2, [r0, #0]
 800ea54:	b084      	sub	sp, #16
 800ea56:	4603      	mov	r3, r0
 800ea58:	2a0a      	cmp	r2, #10
 800ea5a:	d842      	bhi.n	800eae2 <_rclc_check_for_new_data+0x96>
 800ea5c:	e8df f002 	tbb	[pc, r2]
 800ea60:	14181212 	.word	0x14181212
 800ea64:	06060614 	.word	0x06060614
 800ea68:	2e1a      	.short	0x2e1a
 800ea6a:	16          	.byte	0x16
 800ea6b:	00          	.byte	0x00
 800ea6c:	6a0a      	ldr	r2, [r1, #32]
 800ea6e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800ea70:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800ea74:	2000      	movs	r0, #0
 800ea76:	1a12      	subs	r2, r2, r0
 800ea78:	bf18      	it	ne
 800ea7a:	2201      	movne	r2, #1
 800ea7c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 800ea80:	b004      	add	sp, #16
 800ea82:	bd10      	pop	{r4, pc}
 800ea84:	680a      	ldr	r2, [r1, #0]
 800ea86:	e7f2      	b.n	800ea6e <_rclc_check_for_new_data+0x22>
 800ea88:	698a      	ldr	r2, [r1, #24]
 800ea8a:	e7f0      	b.n	800ea6e <_rclc_check_for_new_data+0x22>
 800ea8c:	688a      	ldr	r2, [r1, #8]
 800ea8e:	e7ee      	b.n	800ea6e <_rclc_check_for_new_data+0x22>
 800ea90:	690a      	ldr	r2, [r1, #16]
 800ea92:	e7ec      	b.n	800ea6e <_rclc_check_for_new_data+0x22>
 800ea94:	685c      	ldr	r4, [r3, #4]
 800ea96:	4608      	mov	r0, r1
 800ea98:	f104 0244 	add.w	r2, r4, #68	@ 0x44
 800ea9c:	f104 0143 	add.w	r1, r4, #67	@ 0x43
 800eaa0:	f104 0342 	add.w	r3, r4, #66	@ 0x42
 800eaa4:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800eaa8:	9300      	str	r3, [sp, #0]
 800eaaa:	f104 0240 	add.w	r2, r4, #64	@ 0x40
 800eaae:	f104 0341 	add.w	r3, r4, #65	@ 0x41
 800eab2:	f104 0110 	add.w	r1, r4, #16
 800eab6:	f008 fc17 	bl	80172e8 <rcl_action_client_wait_set_get_entities_ready>
 800eaba:	e7e1      	b.n	800ea80 <_rclc_check_for_new_data+0x34>
 800eabc:	685c      	ldr	r4, [r3, #4]
 800eabe:	f104 0223 	add.w	r2, r4, #35	@ 0x23
 800eac2:	f104 0322 	add.w	r3, r4, #34	@ 0x22
 800eac6:	e9cd 3200 	strd	r3, r2, [sp]
 800eaca:	4608      	mov	r0, r1
 800eacc:	f104 0321 	add.w	r3, r4, #33	@ 0x21
 800ead0:	f104 0220 	add.w	r2, r4, #32
 800ead4:	f104 0110 	add.w	r1, r4, #16
 800ead8:	f008 fe1e 	bl	8017718 <rcl_action_server_wait_set_get_entities_ready>
 800eadc:	e7d0      	b.n	800ea80 <_rclc_check_for_new_data+0x34>
 800eade:	200b      	movs	r0, #11
 800eae0:	4770      	bx	lr
 800eae2:	2001      	movs	r0, #1
 800eae4:	e7cc      	b.n	800ea80 <_rclc_check_for_new_data+0x34>
 800eae6:	bf00      	nop

0800eae8 <_rclc_take_new_data>:
 800eae8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eaea:	b09b      	sub	sp, #108	@ 0x6c
 800eaec:	2800      	cmp	r0, #0
 800eaee:	f000 8088 	beq.w	800ec02 <_rclc_take_new_data+0x11a>
 800eaf2:	7803      	ldrb	r3, [r0, #0]
 800eaf4:	4604      	mov	r4, r0
 800eaf6:	2b0a      	cmp	r3, #10
 800eaf8:	f200 8167 	bhi.w	800edca <_rclc_take_new_data+0x2e2>
 800eafc:	e8df f003 	tbb	[pc, r3]
 800eb00:	44152d2d 	.word	0x44152d2d
 800eb04:	19191944 	.word	0x19191944
 800eb08:	065a      	.short	0x065a
 800eb0a:	15          	.byte	0x15
 800eb0b:	00          	.byte	0x00
 800eb0c:	6840      	ldr	r0, [r0, #4]
 800eb0e:	f890 3020 	ldrb.w	r3, [r0, #32]
 800eb12:	2b00      	cmp	r3, #0
 800eb14:	f040 80b2 	bne.w	800ec7c <_rclc_take_new_data+0x194>
 800eb18:	f890 3022 	ldrb.w	r3, [r0, #34]	@ 0x22
 800eb1c:	2b00      	cmp	r3, #0
 800eb1e:	f040 80e4 	bne.w	800ecea <_rclc_take_new_data+0x202>
 800eb22:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 800eb26:	2b00      	cmp	r3, #0
 800eb28:	d16f      	bne.n	800ec0a <_rclc_take_new_data+0x122>
 800eb2a:	2500      	movs	r5, #0
 800eb2c:	4628      	mov	r0, r5
 800eb2e:	b01b      	add	sp, #108	@ 0x6c
 800eb30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eb32:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800eb34:	6a0b      	ldr	r3, [r1, #32]
 800eb36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eb3a:	2b00      	cmp	r3, #0
 800eb3c:	d0f5      	beq.n	800eb2a <_rclc_take_new_data+0x42>
 800eb3e:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800eb42:	f104 0110 	add.w	r1, r4, #16
 800eb46:	f006 ff0b 	bl	8015960 <rcl_take_request>
 800eb4a:	4605      	mov	r5, r0
 800eb4c:	2800      	cmp	r0, #0
 800eb4e:	d0ec      	beq.n	800eb2a <_rclc_take_new_data+0x42>
 800eb50:	f240 2359 	movw	r3, #601	@ 0x259
 800eb54:	4298      	cmp	r0, r3
 800eb56:	d013      	beq.n	800eb80 <_rclc_take_new_data+0x98>
 800eb58:	e029      	b.n	800ebae <_rclc_take_new_data+0xc6>
 800eb5a:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800eb5c:	680b      	ldr	r3, [r1, #0]
 800eb5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eb62:	2b00      	cmp	r3, #0
 800eb64:	d0e1      	beq.n	800eb2a <_rclc_take_new_data+0x42>
 800eb66:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 800eb6a:	2300      	movs	r3, #0
 800eb6c:	aa0a      	add	r2, sp, #40	@ 0x28
 800eb6e:	f007 f835 	bl	8015bdc <rcl_take>
 800eb72:	4605      	mov	r5, r0
 800eb74:	2800      	cmp	r0, #0
 800eb76:	d0d9      	beq.n	800eb2c <_rclc_take_new_data+0x44>
 800eb78:	f240 1391 	movw	r3, #401	@ 0x191
 800eb7c:	4298      	cmp	r0, r3
 800eb7e:	d116      	bne.n	800ebae <_rclc_take_new_data+0xc6>
 800eb80:	2300      	movs	r3, #0
 800eb82:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
 800eb86:	e7d1      	b.n	800eb2c <_rclc_take_new_data+0x44>
 800eb88:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800eb8a:	698b      	ldr	r3, [r1, #24]
 800eb8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eb90:	2b00      	cmp	r3, #0
 800eb92:	d0ca      	beq.n	800eb2a <_rclc_take_new_data+0x42>
 800eb94:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800eb98:	f104 0110 	add.w	r1, r4, #16
 800eb9c:	f006 faa8 	bl	80150f0 <rcl_take_response>
 800eba0:	4605      	mov	r5, r0
 800eba2:	2800      	cmp	r0, #0
 800eba4:	d0c1      	beq.n	800eb2a <_rclc_take_new_data+0x42>
 800eba6:	f240 13f5 	movw	r3, #501	@ 0x1f5
 800ebaa:	4298      	cmp	r0, r3
 800ebac:	d0be      	beq.n	800eb2c <_rclc_take_new_data+0x44>
 800ebae:	f000 ff0b 	bl	800f9c8 <rcutils_reset_error>
 800ebb2:	e7bb      	b.n	800eb2c <_rclc_take_new_data+0x44>
 800ebb4:	6840      	ldr	r0, [r0, #4]
 800ebb6:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800ebba:	2b00      	cmp	r3, #0
 800ebbc:	d17d      	bne.n	800ecba <_rclc_take_new_data+0x1d2>
 800ebbe:	69c3      	ldr	r3, [r0, #28]
 800ebc0:	b11b      	cbz	r3, 800ebca <_rclc_take_new_data+0xe2>
 800ebc2:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800ebc6:	2b00      	cmp	r3, #0
 800ebc8:	d144      	bne.n	800ec54 <_rclc_take_new_data+0x16c>
 800ebca:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800ebce:	2b00      	cmp	r3, #0
 800ebd0:	f040 80ac 	bne.w	800ed2c <_rclc_take_new_data+0x244>
 800ebd4:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800ebd8:	2b00      	cmp	r3, #0
 800ebda:	d0a6      	beq.n	800eb2a <_rclc_take_new_data+0x42>
 800ebdc:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 800ebde:	a90a      	add	r1, sp, #40	@ 0x28
 800ebe0:	3010      	adds	r0, #16
 800ebe2:	f008 fa59 	bl	8017098 <rcl_action_take_result_response>
 800ebe6:	4605      	mov	r5, r0
 800ebe8:	2800      	cmp	r0, #0
 800ebea:	d1e0      	bne.n	800ebae <_rclc_take_new_data+0xc6>
 800ebec:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800ebf0:	6860      	ldr	r0, [r4, #4]
 800ebf2:	f008 feb5 	bl	8017960 <rclc_action_find_handle_by_result_request_sequence_number>
 800ebf6:	2800      	cmp	r0, #0
 800ebf8:	d098      	beq.n	800eb2c <_rclc_take_new_data+0x44>
 800ebfa:	2301      	movs	r3, #1
 800ebfc:	f880 3023 	strb.w	r3, [r0, #35]	@ 0x23
 800ec00:	e794      	b.n	800eb2c <_rclc_take_new_data+0x44>
 800ec02:	250b      	movs	r5, #11
 800ec04:	4628      	mov	r0, r5
 800ec06:	b01b      	add	sp, #108	@ 0x6c
 800ec08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ec0a:	ae04      	add	r6, sp, #16
 800ec0c:	aa0a      	add	r2, sp, #40	@ 0x28
 800ec0e:	3010      	adds	r0, #16
 800ec10:	4631      	mov	r1, r6
 800ec12:	f008 fcb5 	bl	8017580 <rcl_action_take_cancel_request>
 800ec16:	4605      	mov	r5, r0
 800ec18:	2800      	cmp	r0, #0
 800ec1a:	d1c8      	bne.n	800ebae <_rclc_take_new_data+0xc6>
 800ec1c:	6860      	ldr	r0, [r4, #4]
 800ec1e:	a90a      	add	r1, sp, #40	@ 0x28
 800ec20:	f008 fe5c 	bl	80178dc <rclc_action_find_goal_handle_by_uuid>
 800ec24:	4607      	mov	r7, r0
 800ec26:	2800      	cmp	r0, #0
 800ec28:	f000 80bb 	beq.w	800eda2 <_rclc_take_new_data+0x2ba>
 800ec2c:	f990 0008 	ldrsb.w	r0, [r0, #8]
 800ec30:	2101      	movs	r1, #1
 800ec32:	f008 fddd 	bl	80177f0 <rcl_action_transition_goal_state>
 800ec36:	2803      	cmp	r0, #3
 800ec38:	4684      	mov	ip, r0
 800ec3a:	f040 80a7 	bne.w	800ed8c <_rclc_take_new_data+0x2a4>
 800ec3e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800ec40:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 800ec44:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ec46:	e896 0003 	ldmia.w	r6, {r0, r1}
 800ec4a:	e884 0003 	stmia.w	r4, {r0, r1}
 800ec4e:	f887 c008 	strb.w	ip, [r7, #8]
 800ec52:	e76b      	b.n	800eb2c <_rclc_take_new_data+0x44>
 800ec54:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800ec56:	3010      	adds	r0, #16
 800ec58:	f008 fa9e 	bl	8017198 <rcl_action_take_feedback>
 800ec5c:	4605      	mov	r5, r0
 800ec5e:	2800      	cmp	r0, #0
 800ec60:	d1a5      	bne.n	800ebae <_rclc_take_new_data+0xc6>
 800ec62:	6860      	ldr	r0, [r4, #4]
 800ec64:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800ec66:	f008 fe39 	bl	80178dc <rclc_action_find_goal_handle_by_uuid>
 800ec6a:	4603      	mov	r3, r0
 800ec6c:	2800      	cmp	r0, #0
 800ec6e:	f000 80a3 	beq.w	800edb8 <_rclc_take_new_data+0x2d0>
 800ec72:	2201      	movs	r2, #1
 800ec74:	6860      	ldr	r0, [r4, #4]
 800ec76:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 800ec7a:	e7a6      	b.n	800ebca <_rclc_take_new_data+0xe2>
 800ec7c:	f008 fe08 	bl	8017890 <rclc_action_take_goal_handle>
 800ec80:	4606      	mov	r6, r0
 800ec82:	6860      	ldr	r0, [r4, #4]
 800ec84:	2e00      	cmp	r6, #0
 800ec86:	f43f af47 	beq.w	800eb18 <_rclc_take_new_data+0x30>
 800ec8a:	6070      	str	r0, [r6, #4]
 800ec8c:	69f2      	ldr	r2, [r6, #28]
 800ec8e:	f106 0128 	add.w	r1, r6, #40	@ 0x28
 800ec92:	3010      	adds	r0, #16
 800ec94:	f008 fbbc 	bl	8017410 <rcl_action_take_goal_request>
 800ec98:	4605      	mov	r5, r0
 800ec9a:	2800      	cmp	r0, #0
 800ec9c:	f040 808e 	bne.w	800edbc <_rclc_take_new_data+0x2d4>
 800eca0:	69f7      	ldr	r7, [r6, #28]
 800eca2:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800eca4:	7235      	strb	r5, [r6, #8]
 800eca6:	f8c6 0009 	str.w	r0, [r6, #9]
 800ecaa:	f8c6 100d 	str.w	r1, [r6, #13]
 800ecae:	6860      	ldr	r0, [r4, #4]
 800ecb0:	f8c6 2011 	str.w	r2, [r6, #17]
 800ecb4:	f8c6 3015 	str.w	r3, [r6, #21]
 800ecb8:	e72e      	b.n	800eb18 <_rclc_take_new_data+0x30>
 800ecba:	aa04      	add	r2, sp, #16
 800ecbc:	a90a      	add	r1, sp, #40	@ 0x28
 800ecbe:	3010      	adds	r0, #16
 800ecc0:	f008 f972 	bl	8016fa8 <rcl_action_take_goal_response>
 800ecc4:	4605      	mov	r5, r0
 800ecc6:	2800      	cmp	r0, #0
 800ecc8:	f47f af71 	bne.w	800ebae <_rclc_take_new_data+0xc6>
 800eccc:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800ecd0:	6860      	ldr	r0, [r4, #4]
 800ecd2:	f008 fe33 	bl	801793c <rclc_action_find_handle_by_goal_request_sequence_number>
 800ecd6:	b130      	cbz	r0, 800ece6 <_rclc_take_new_data+0x1fe>
 800ecd8:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800ecdc:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 800ece0:	2201      	movs	r2, #1
 800ece2:	f880 2020 	strb.w	r2, [r0, #32]
 800ece6:	6860      	ldr	r0, [r4, #4]
 800ece8:	e769      	b.n	800ebbe <_rclc_take_new_data+0xd6>
 800ecea:	aa04      	add	r2, sp, #16
 800ecec:	3010      	adds	r0, #16
 800ecee:	a90a      	add	r1, sp, #40	@ 0x28
 800ecf0:	f008 fc06 	bl	8017500 <rcl_action_take_result_request>
 800ecf4:	4605      	mov	r5, r0
 800ecf6:	2800      	cmp	r0, #0
 800ecf8:	f47f af59 	bne.w	800ebae <_rclc_take_new_data+0xc6>
 800ecfc:	6860      	ldr	r0, [r4, #4]
 800ecfe:	a904      	add	r1, sp, #16
 800ed00:	f008 fdec 	bl	80178dc <rclc_action_find_goal_handle_by_uuid>
 800ed04:	4607      	mov	r7, r0
 800ed06:	b160      	cbz	r0, 800ed22 <_rclc_take_new_data+0x23a>
 800ed08:	ad0a      	add	r5, sp, #40	@ 0x28
 800ed0a:	f100 0640 	add.w	r6, r0, #64	@ 0x40
 800ed0e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ed10:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800ed12:	e895 0003 	ldmia.w	r5, {r0, r1}
 800ed16:	f04f 0c02 	mov.w	ip, #2
 800ed1a:	e886 0003 	stmia.w	r6, {r0, r1}
 800ed1e:	f887 c008 	strb.w	ip, [r7, #8]
 800ed22:	6860      	ldr	r0, [r4, #4]
 800ed24:	2300      	movs	r3, #0
 800ed26:	f880 3022 	strb.w	r3, [r0, #34]	@ 0x22
 800ed2a:	e6fa      	b.n	800eb22 <_rclc_take_new_data+0x3a>
 800ed2c:	f100 0230 	add.w	r2, r0, #48	@ 0x30
 800ed30:	a90a      	add	r1, sp, #40	@ 0x28
 800ed32:	3010      	adds	r0, #16
 800ed34:	f008 f9f0 	bl	8017118 <rcl_action_take_cancel_response>
 800ed38:	4605      	mov	r5, r0
 800ed3a:	2800      	cmp	r0, #0
 800ed3c:	f47f af37 	bne.w	800ebae <_rclc_take_new_data+0xc6>
 800ed40:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800ed44:	6860      	ldr	r0, [r4, #4]
 800ed46:	f008 fe1d 	bl	8017984 <rclc_action_find_handle_by_cancel_request_sequence_number>
 800ed4a:	4606      	mov	r6, r0
 800ed4c:	6860      	ldr	r0, [r4, #4]
 800ed4e:	2e00      	cmp	r6, #0
 800ed50:	f43f af40 	beq.w	800ebd4 <_rclc_take_new_data+0xec>
 800ed54:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800ed56:	2701      	movs	r7, #1
 800ed58:	84b7      	strh	r7, [r6, #36]	@ 0x24
 800ed5a:	2b00      	cmp	r3, #0
 800ed5c:	f43f af3a 	beq.w	800ebd4 <_rclc_take_new_data+0xec>
 800ed60:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800ed62:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 800ed66:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800ed6a:	f008 fdb7 	bl	80178dc <rclc_action_find_goal_handle_by_uuid>
 800ed6e:	b138      	cbz	r0, 800ed80 <_rclc_take_new_data+0x298>
 800ed70:	6860      	ldr	r0, [r4, #4]
 800ed72:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800ed74:	f886 7025 	strb.w	r7, [r6, #37]	@ 0x25
 800ed78:	3501      	adds	r5, #1
 800ed7a:	42ab      	cmp	r3, r5
 800ed7c:	d8f0      	bhi.n	800ed60 <_rclc_take_new_data+0x278>
 800ed7e:	e729      	b.n	800ebd4 <_rclc_take_new_data+0xec>
 800ed80:	6860      	ldr	r0, [r4, #4]
 800ed82:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800ed84:	3501      	adds	r5, #1
 800ed86:	42ab      	cmp	r3, r5
 800ed88:	d8ea      	bhi.n	800ed60 <_rclc_take_new_data+0x278>
 800ed8a:	e723      	b.n	800ebd4 <_rclc_take_new_data+0xec>
 800ed8c:	ab06      	add	r3, sp, #24
 800ed8e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ed90:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800ed94:	2103      	movs	r1, #3
 800ed96:	e896 000c 	ldmia.w	r6, {r2, r3}
 800ed9a:	6860      	ldr	r0, [r4, #4]
 800ed9c:	f008 fe68 	bl	8017a70 <rclc_action_server_goal_cancel_reject>
 800eda0:	e6c4      	b.n	800eb2c <_rclc_take_new_data+0x44>
 800eda2:	ab06      	add	r3, sp, #24
 800eda4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800eda6:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800edaa:	2102      	movs	r1, #2
 800edac:	e896 000c 	ldmia.w	r6, {r2, r3}
 800edb0:	6860      	ldr	r0, [r4, #4]
 800edb2:	f008 fe5d 	bl	8017a70 <rclc_action_server_goal_cancel_reject>
 800edb6:	e6b9      	b.n	800eb2c <_rclc_take_new_data+0x44>
 800edb8:	6860      	ldr	r0, [r4, #4]
 800edba:	e706      	b.n	800ebca <_rclc_take_new_data+0xe2>
 800edbc:	6860      	ldr	r0, [r4, #4]
 800edbe:	4631      	mov	r1, r6
 800edc0:	f008 fd76 	bl	80178b0 <rclc_action_remove_used_goal_handle>
 800edc4:	f000 fe00 	bl	800f9c8 <rcutils_reset_error>
 800edc8:	e6b0      	b.n	800eb2c <_rclc_take_new_data+0x44>
 800edca:	2501      	movs	r5, #1
 800edcc:	e6ae      	b.n	800eb2c <_rclc_take_new_data+0x44>
 800edce:	bf00      	nop

0800edd0 <_rclc_execute.part.0>:
 800edd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800edd2:	7803      	ldrb	r3, [r0, #0]
 800edd4:	b087      	sub	sp, #28
 800edd6:	4604      	mov	r4, r0
 800edd8:	2b0a      	cmp	r3, #10
 800edda:	f200 8136 	bhi.w	800f04a <_rclc_execute.part.0+0x27a>
 800edde:	e8df f003 	tbb	[pc, r3]
 800ede2:	435e      	.short	0x435e
 800ede4:	06a1664f 	.word	0x06a1664f
 800ede8:	6c1e0606 	.word	0x6c1e0606
 800edec:	59          	.byte	0x59
 800eded:	00          	.byte	0x00
 800edee:	2b06      	cmp	r3, #6
 800edf0:	f000 8122 	beq.w	800f038 <_rclc_execute.part.0+0x268>
 800edf4:	2b07      	cmp	r3, #7
 800edf6:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800edf8:	f040 8118 	bne.w	800f02c <_rclc_execute.part.0+0x25c>
 800edfc:	e9d0 120a 	ldrd	r1, r2, [r0, #40]	@ 0x28
 800ee00:	6880      	ldr	r0, [r0, #8]
 800ee02:	4798      	blx	r3
 800ee04:	f104 0110 	add.w	r1, r4, #16
 800ee08:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800ee0a:	6860      	ldr	r0, [r4, #4]
 800ee0c:	f006 fde8 	bl	80159e0 <rcl_send_response>
 800ee10:	2800      	cmp	r0, #0
 800ee12:	d033      	beq.n	800ee7c <_rclc_execute.part.0+0xac>
 800ee14:	9005      	str	r0, [sp, #20]
 800ee16:	f000 fdd7 	bl	800f9c8 <rcutils_reset_error>
 800ee1a:	9805      	ldr	r0, [sp, #20]
 800ee1c:	e02e      	b.n	800ee7c <_rclc_execute.part.0+0xac>
 800ee1e:	6840      	ldr	r0, [r0, #4]
 800ee20:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800ee24:	2b00      	cmp	r3, #0
 800ee26:	f000 8086 	beq.w	800ef36 <_rclc_execute.part.0+0x166>
 800ee2a:	2600      	movs	r6, #0
 800ee2c:	2701      	movs	r7, #1
 800ee2e:	e004      	b.n	800ee3a <_rclc_execute.part.0+0x6a>
 800ee30:	f008 fd08 	bl	8017844 <rclc_action_send_result_request>
 800ee34:	b998      	cbnz	r0, 800ee5e <_rclc_execute.part.0+0x8e>
 800ee36:	722f      	strb	r7, [r5, #8]
 800ee38:	6860      	ldr	r0, [r4, #4]
 800ee3a:	f008 fdb5 	bl	80179a8 <rclc_action_find_first_handle_with_goal_response>
 800ee3e:	4605      	mov	r5, r0
 800ee40:	2800      	cmp	r0, #0
 800ee42:	d077      	beq.n	800ef34 <_rclc_execute.part.0+0x164>
 800ee44:	6863      	ldr	r3, [r4, #4]
 800ee46:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800ee48:	699b      	ldr	r3, [r3, #24]
 800ee4a:	f895 1021 	ldrb.w	r1, [r5, #33]	@ 0x21
 800ee4e:	f885 6020 	strb.w	r6, [r5, #32]
 800ee52:	4798      	blx	r3
 800ee54:	f895 3021 	ldrb.w	r3, [r5, #33]	@ 0x21
 800ee58:	4628      	mov	r0, r5
 800ee5a:	2b00      	cmp	r3, #0
 800ee5c:	d1e8      	bne.n	800ee30 <_rclc_execute.part.0+0x60>
 800ee5e:	6860      	ldr	r0, [r4, #4]
 800ee60:	4629      	mov	r1, r5
 800ee62:	f008 fd25 	bl	80178b0 <rclc_action_remove_used_goal_handle>
 800ee66:	e7e7      	b.n	800ee38 <_rclc_execute.part.0+0x68>
 800ee68:	f890 5039 	ldrb.w	r5, [r0, #57]	@ 0x39
 800ee6c:	e9d0 130b 	ldrd	r1, r3, [r0, #44]	@ 0x2c
 800ee70:	2d00      	cmp	r5, #0
 800ee72:	f000 80c9 	beq.w	800f008 <_rclc_execute.part.0+0x238>
 800ee76:	6880      	ldr	r0, [r0, #8]
 800ee78:	4798      	blx	r3
 800ee7a:	2000      	movs	r0, #0
 800ee7c:	b007      	add	sp, #28
 800ee7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ee80:	6840      	ldr	r0, [r0, #4]
 800ee82:	f007 f9bb 	bl	80161fc <rcl_timer_call>
 800ee86:	f240 3321 	movw	r3, #801	@ 0x321
 800ee8a:	4298      	cmp	r0, r3
 800ee8c:	d004      	beq.n	800ee98 <_rclc_execute.part.0+0xc8>
 800ee8e:	2800      	cmp	r0, #0
 800ee90:	d0f4      	beq.n	800ee7c <_rclc_execute.part.0+0xac>
 800ee92:	e7bf      	b.n	800ee14 <_rclc_execute.part.0+0x44>
 800ee94:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800ee96:	4798      	blx	r3
 800ee98:	2000      	movs	r0, #0
 800ee9a:	b007      	add	sp, #28
 800ee9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ee9e:	f890 5039 	ldrb.w	r5, [r0, #57]	@ 0x39
 800eea2:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800eea4:	b925      	cbnz	r5, 800eeb0 <_rclc_execute.part.0+0xe0>
 800eea6:	4628      	mov	r0, r5
 800eea8:	4798      	blx	r3
 800eeaa:	4628      	mov	r0, r5
 800eeac:	e7e6      	b.n	800ee7c <_rclc_execute.part.0+0xac>
 800eeae:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800eeb0:	68a0      	ldr	r0, [r4, #8]
 800eeb2:	4798      	blx	r3
 800eeb4:	2000      	movs	r0, #0
 800eeb6:	b007      	add	sp, #28
 800eeb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eeba:	6840      	ldr	r0, [r0, #4]
 800eebc:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 800eec0:	bb3b      	cbnz	r3, 800ef12 <_rclc_execute.part.0+0x142>
 800eec2:	f890 3020 	ldrb.w	r3, [r0, #32]
 800eec6:	2b00      	cmp	r3, #0
 800eec8:	d07b      	beq.n	800efc2 <_rclc_execute.part.0+0x1f2>
 800eeca:	f640 0634 	movw	r6, #2100	@ 0x834
 800eece:	2701      	movs	r7, #1
 800eed0:	e007      	b.n	800eee2 <_rclc_execute.part.0+0x112>
 800eed2:	4628      	mov	r0, r5
 800eed4:	f008 fd80 	bl	80179d8 <rclc_action_server_response_goal_request>
 800eed8:	6860      	ldr	r0, [r4, #4]
 800eeda:	4629      	mov	r1, r5
 800eedc:	f008 fce8 	bl	80178b0 <rclc_action_remove_used_goal_handle>
 800eee0:	6860      	ldr	r0, [r4, #4]
 800eee2:	2100      	movs	r1, #0
 800eee4:	f008 fd12 	bl	801790c <rclc_action_find_first_handle_by_status>
 800eee8:	4605      	mov	r5, r0
 800eeea:	2800      	cmp	r0, #0
 800eeec:	d066      	beq.n	800efbc <_rclc_execute.part.0+0x1ec>
 800eeee:	6863      	ldr	r3, [r4, #4]
 800eef0:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800eef2:	699b      	ldr	r3, [r3, #24]
 800eef4:	4798      	blx	r3
 800eef6:	42b0      	cmp	r0, r6
 800eef8:	f04f 0100 	mov.w	r1, #0
 800eefc:	d1e9      	bne.n	800eed2 <_rclc_execute.part.0+0x102>
 800eefe:	2101      	movs	r1, #1
 800ef00:	4628      	mov	r0, r5
 800ef02:	f008 fd69 	bl	80179d8 <rclc_action_server_response_goal_request>
 800ef06:	722f      	strb	r7, [r5, #8]
 800ef08:	e7ea      	b.n	800eee0 <_rclc_execute.part.0+0x110>
 800ef0a:	6848      	ldr	r0, [r1, #4]
 800ef0c:	f008 fcd0 	bl	80178b0 <rclc_action_remove_used_goal_handle>
 800ef10:	6860      	ldr	r0, [r4, #4]
 800ef12:	f008 fd07 	bl	8017924 <rclc_action_find_first_terminated_handle>
 800ef16:	4601      	mov	r1, r0
 800ef18:	2800      	cmp	r0, #0
 800ef1a:	d1f6      	bne.n	800ef0a <_rclc_execute.part.0+0x13a>
 800ef1c:	6860      	ldr	r0, [r4, #4]
 800ef1e:	f880 1024 	strb.w	r1, [r0, #36]	@ 0x24
 800ef22:	e7ce      	b.n	800eec2 <_rclc_execute.part.0+0xf2>
 800ef24:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800ef26:	6880      	ldr	r0, [r0, #8]
 800ef28:	f104 0110 	add.w	r1, r4, #16
 800ef2c:	4798      	blx	r3
 800ef2e:	2000      	movs	r0, #0
 800ef30:	b007      	add	sp, #28
 800ef32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ef34:	6860      	ldr	r0, [r4, #4]
 800ef36:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800ef3a:	b18b      	cbz	r3, 800ef60 <_rclc_execute.part.0+0x190>
 800ef3c:	68c5      	ldr	r5, [r0, #12]
 800ef3e:	b32d      	cbz	r5, 800ef8c <_rclc_execute.part.0+0x1bc>
 800ef40:	2600      	movs	r6, #0
 800ef42:	f895 3022 	ldrb.w	r3, [r5, #34]	@ 0x22
 800ef46:	b143      	cbz	r3, 800ef5a <_rclc_execute.part.0+0x18a>
 800ef48:	69c3      	ldr	r3, [r0, #28]
 800ef4a:	f885 6022 	strb.w	r6, [r5, #34]	@ 0x22
 800ef4e:	b123      	cbz	r3, 800ef5a <_rclc_execute.part.0+0x18a>
 800ef50:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800ef52:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800ef54:	4628      	mov	r0, r5
 800ef56:	4798      	blx	r3
 800ef58:	6860      	ldr	r0, [r4, #4]
 800ef5a:	682d      	ldr	r5, [r5, #0]
 800ef5c:	2d00      	cmp	r5, #0
 800ef5e:	d1f0      	bne.n	800ef42 <_rclc_execute.part.0+0x172>
 800ef60:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800ef64:	b193      	cbz	r3, 800ef8c <_rclc_execute.part.0+0x1bc>
 800ef66:	68c5      	ldr	r5, [r0, #12]
 800ef68:	b185      	cbz	r5, 800ef8c <_rclc_execute.part.0+0x1bc>
 800ef6a:	2600      	movs	r6, #0
 800ef6c:	f895 3024 	ldrb.w	r3, [r5, #36]	@ 0x24
 800ef70:	b14b      	cbz	r3, 800ef86 <_rclc_execute.part.0+0x1b6>
 800ef72:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800ef74:	f885 6024 	strb.w	r6, [r5, #36]	@ 0x24
 800ef78:	b12b      	cbz	r3, 800ef86 <_rclc_execute.part.0+0x1b6>
 800ef7a:	4628      	mov	r0, r5
 800ef7c:	f895 1025 	ldrb.w	r1, [r5, #37]	@ 0x25
 800ef80:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800ef82:	4798      	blx	r3
 800ef84:	6860      	ldr	r0, [r4, #4]
 800ef86:	682d      	ldr	r5, [r5, #0]
 800ef88:	2d00      	cmp	r5, #0
 800ef8a:	d1ef      	bne.n	800ef6c <_rclc_execute.part.0+0x19c>
 800ef8c:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800ef90:	2b00      	cmp	r3, #0
 800ef92:	d081      	beq.n	800ee98 <_rclc_execute.part.0+0xc8>
 800ef94:	2700      	movs	r7, #0
 800ef96:	e00b      	b.n	800efb0 <_rclc_execute.part.0+0x1e0>
 800ef98:	6863      	ldr	r3, [r4, #4]
 800ef9a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800ef9c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800ef9e:	6a1e      	ldr	r6, [r3, #32]
 800efa0:	f885 7023 	strb.w	r7, [r5, #35]	@ 0x23
 800efa4:	47b0      	blx	r6
 800efa6:	6860      	ldr	r0, [r4, #4]
 800efa8:	4629      	mov	r1, r5
 800efaa:	f008 fc81 	bl	80178b0 <rclc_action_remove_used_goal_handle>
 800efae:	6860      	ldr	r0, [r4, #4]
 800efb0:	f008 fd06 	bl	80179c0 <rclc_action_find_first_handle_with_result_response>
 800efb4:	4605      	mov	r5, r0
 800efb6:	2800      	cmp	r0, #0
 800efb8:	d1ee      	bne.n	800ef98 <_rclc_execute.part.0+0x1c8>
 800efba:	e76d      	b.n	800ee98 <_rclc_execute.part.0+0xc8>
 800efbc:	6860      	ldr	r0, [r4, #4]
 800efbe:	f880 5020 	strb.w	r5, [r0, #32]
 800efc2:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 800efc6:	2b00      	cmp	r3, #0
 800efc8:	f43f af66 	beq.w	800ee98 <_rclc_execute.part.0+0xc8>
 800efcc:	68c5      	ldr	r5, [r0, #12]
 800efce:	b1b5      	cbz	r5, 800effe <_rclc_execute.part.0+0x22e>
 800efd0:	2602      	movs	r6, #2
 800efd2:	e001      	b.n	800efd8 <_rclc_execute.part.0+0x208>
 800efd4:	682d      	ldr	r5, [r5, #0]
 800efd6:	b195      	cbz	r5, 800effe <_rclc_execute.part.0+0x22e>
 800efd8:	f995 3008 	ldrsb.w	r3, [r5, #8]
 800efdc:	2b03      	cmp	r3, #3
 800efde:	d1f9      	bne.n	800efd4 <_rclc_execute.part.0+0x204>
 800efe0:	69c3      	ldr	r3, [r0, #28]
 800efe2:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800efe4:	4628      	mov	r0, r5
 800efe6:	4798      	blx	r3
 800efe8:	4603      	mov	r3, r0
 800efea:	f105 0260 	add.w	r2, r5, #96	@ 0x60
 800efee:	4628      	mov	r0, r5
 800eff0:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 800eff4:	b163      	cbz	r3, 800f010 <_rclc_execute.part.0+0x240>
 800eff6:	f008 fd0f 	bl	8017a18 <rclc_action_server_goal_cancel_accept>
 800effa:	6860      	ldr	r0, [r4, #4]
 800effc:	e7ea      	b.n	800efd4 <_rclc_execute.part.0+0x204>
 800effe:	2300      	movs	r3, #0
 800f000:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 800f004:	4618      	mov	r0, r3
 800f006:	e739      	b.n	800ee7c <_rclc_execute.part.0+0xac>
 800f008:	4628      	mov	r0, r5
 800f00a:	4798      	blx	r3
 800f00c:	4628      	mov	r0, r5
 800f00e:	e735      	b.n	800ee7c <_rclc_execute.part.0+0xac>
 800f010:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 800f012:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800f016:	f105 0758 	add.w	r7, r5, #88	@ 0x58
 800f01a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f01e:	6860      	ldr	r0, [r4, #4]
 800f020:	2101      	movs	r1, #1
 800f022:	f008 fd25 	bl	8017a70 <rclc_action_server_goal_cancel_reject>
 800f026:	722e      	strb	r6, [r5, #8]
 800f028:	6860      	ldr	r0, [r4, #4]
 800f02a:	e7d3      	b.n	800efd4 <_rclc_execute.part.0+0x204>
 800f02c:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800f02e:	6880      	ldr	r0, [r0, #8]
 800f030:	4798      	blx	r3
 800f032:	f104 0110 	add.w	r1, r4, #16
 800f036:	e6e7      	b.n	800ee08 <_rclc_execute.part.0+0x38>
 800f038:	f100 0110 	add.w	r1, r0, #16
 800f03c:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800f03e:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 800f040:	6880      	ldr	r0, [r0, #8]
 800f042:	9105      	str	r1, [sp, #20]
 800f044:	4798      	blx	r3
 800f046:	9905      	ldr	r1, [sp, #20]
 800f048:	e6de      	b.n	800ee08 <_rclc_execute.part.0+0x38>
 800f04a:	2001      	movs	r0, #1
 800f04c:	e716      	b.n	800ee7c <_rclc_execute.part.0+0xac>
 800f04e:	bf00      	nop

0800f050 <rclc_executor_trigger_any>:
 800f050:	2800      	cmp	r0, #0
 800f052:	d03f      	beq.n	800f0d4 <rclc_executor_trigger_any+0x84>
 800f054:	2900      	cmp	r1, #0
 800f056:	d03e      	beq.n	800f0d6 <rclc_executor_trigger_any+0x86>
 800f058:	4603      	mov	r3, r0
 800f05a:	f890 0038 	ldrb.w	r0, [r0, #56]	@ 0x38
 800f05e:	2200      	movs	r2, #0
 800f060:	2800      	cmp	r0, #0
 800f062:	d037      	beq.n	800f0d4 <rclc_executor_trigger_any+0x84>
 800f064:	b430      	push	{r4, r5}
 800f066:	f893 c000 	ldrb.w	ip, [r3]
 800f06a:	f1bc 0f08 	cmp.w	ip, #8
 800f06e:	d11e      	bne.n	800f0ae <rclc_executor_trigger_any+0x5e>
 800f070:	685c      	ldr	r4, [r3, #4]
 800f072:	6c25      	ldr	r5, [r4, #64]	@ 0x40
 800f074:	f035 457f 	bics.w	r5, r5, #4278190080	@ 0xff000000
 800f078:	d105      	bne.n	800f086 <rclc_executor_trigger_any+0x36>
 800f07a:	f894 0044 	ldrb.w	r0, [r4, #68]	@ 0x44
 800f07e:	b910      	cbnz	r0, 800f086 <rclc_executor_trigger_any+0x36>
 800f080:	f894 0043 	ldrb.w	r0, [r4, #67]	@ 0x43
 800f084:	b128      	cbz	r0, 800f092 <rclc_executor_trigger_any+0x42>
 800f086:	bc30      	pop	{r4, r5}
 800f088:	4770      	bx	lr
 800f08a:	f893 0039 	ldrb.w	r0, [r3, #57]	@ 0x39
 800f08e:	2800      	cmp	r0, #0
 800f090:	d1f9      	bne.n	800f086 <rclc_executor_trigger_any+0x36>
 800f092:	3201      	adds	r2, #1
 800f094:	4291      	cmp	r1, r2
 800f096:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 800f09a:	d018      	beq.n	800f0ce <rclc_executor_trigger_any+0x7e>
 800f09c:	f893 0038 	ldrb.w	r0, [r3, #56]	@ 0x38
 800f0a0:	2800      	cmp	r0, #0
 800f0a2:	d0f0      	beq.n	800f086 <rclc_executor_trigger_any+0x36>
 800f0a4:	f893 c000 	ldrb.w	ip, [r3]
 800f0a8:	f1bc 0f08 	cmp.w	ip, #8
 800f0ac:	d0e0      	beq.n	800f070 <rclc_executor_trigger_any+0x20>
 800f0ae:	f1bc 0f09 	cmp.w	ip, #9
 800f0b2:	d1ea      	bne.n	800f08a <rclc_executor_trigger_any+0x3a>
 800f0b4:	685c      	ldr	r4, [r3, #4]
 800f0b6:	6a25      	ldr	r5, [r4, #32]
 800f0b8:	2d00      	cmp	r5, #0
 800f0ba:	d1e4      	bne.n	800f086 <rclc_executor_trigger_any+0x36>
 800f0bc:	f894 0024 	ldrb.w	r0, [r4, #36]	@ 0x24
 800f0c0:	2800      	cmp	r0, #0
 800f0c2:	d1e0      	bne.n	800f086 <rclc_executor_trigger_any+0x36>
 800f0c4:	3201      	adds	r2, #1
 800f0c6:	4291      	cmp	r1, r2
 800f0c8:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 800f0cc:	d1e6      	bne.n	800f09c <rclc_executor_trigger_any+0x4c>
 800f0ce:	2000      	movs	r0, #0
 800f0d0:	bc30      	pop	{r4, r5}
 800f0d2:	4770      	bx	lr
 800f0d4:	4770      	bx	lr
 800f0d6:	4608      	mov	r0, r1
 800f0d8:	4770      	bx	lr
 800f0da:	bf00      	nop

0800f0dc <rclc_executor_get_zero_initialized_executor>:
 800f0dc:	b510      	push	{r4, lr}
 800f0de:	4903      	ldr	r1, [pc, #12]	@ (800f0ec <rclc_executor_get_zero_initialized_executor+0x10>)
 800f0e0:	4604      	mov	r4, r0
 800f0e2:	2288      	movs	r2, #136	@ 0x88
 800f0e4:	f00c fa0b 	bl	801b4fe <memcpy>
 800f0e8:	4620      	mov	r0, r4
 800f0ea:	bd10      	pop	{r4, pc}
 800f0ec:	0801e5b0 	.word	0x0801e5b0

0800f0f0 <rclc_executor_init>:
 800f0f0:	2800      	cmp	r0, #0
 800f0f2:	d05f      	beq.n	800f1b4 <rclc_executor_init+0xc4>
 800f0f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f0f8:	460c      	mov	r4, r1
 800f0fa:	b0b0      	sub	sp, #192	@ 0xc0
 800f0fc:	2900      	cmp	r1, #0
 800f0fe:	d051      	beq.n	800f1a4 <rclc_executor_init+0xb4>
 800f100:	4605      	mov	r5, r0
 800f102:	4618      	mov	r0, r3
 800f104:	4616      	mov	r6, r2
 800f106:	461f      	mov	r7, r3
 800f108:	f000 fc38 	bl	800f97c <rcutils_allocator_is_valid>
 800f10c:	2800      	cmp	r0, #0
 800f10e:	d049      	beq.n	800f1a4 <rclc_executor_init+0xb4>
 800f110:	2e00      	cmp	r6, #0
 800f112:	d047      	beq.n	800f1a4 <rclc_executor_init+0xb4>
 800f114:	492c      	ldr	r1, [pc, #176]	@ (800f1c8 <rclc_executor_init+0xd8>)
 800f116:	2288      	movs	r2, #136	@ 0x88
 800f118:	a80e      	add	r0, sp, #56	@ 0x38
 800f11a:	f00c f9f0 	bl	801b4fe <memcpy>
 800f11e:	a90e      	add	r1, sp, #56	@ 0x38
 800f120:	2288      	movs	r2, #136	@ 0x88
 800f122:	4628      	mov	r0, r5
 800f124:	f00c f9eb 	bl	801b4fe <memcpy>
 800f128:	602c      	str	r4, [r5, #0]
 800f12a:	4668      	mov	r0, sp
 800f12c:	60ae      	str	r6, [r5, #8]
 800f12e:	466c      	mov	r4, sp
 800f130:	f007 f96c 	bl	801640c <rcl_get_zero_initialized_wait_set>
 800f134:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f136:	f105 0c14 	add.w	ip, r5, #20
 800f13a:	f8d7 8000 	ldr.w	r8, [r7]
 800f13e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f142:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f144:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f148:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f14a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f14e:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 800f1c0 <rclc_executor_init+0xd0>
 800f152:	6823      	ldr	r3, [r4, #0]
 800f154:	f8cc 3000 	str.w	r3, [ip]
 800f158:	6939      	ldr	r1, [r7, #16]
 800f15a:	612f      	str	r7, [r5, #16]
 800f15c:	ed85 7b1a 	vstr	d7, [r5, #104]	@ 0x68
 800f160:	01b0      	lsls	r0, r6, #6
 800f162:	47c0      	blx	r8
 800f164:	6068      	str	r0, [r5, #4]
 800f166:	b338      	cbz	r0, 800f1b8 <rclc_executor_init+0xc8>
 800f168:	2400      	movs	r4, #0
 800f16a:	e000      	b.n	800f16e <rclc_executor_init+0x7e>
 800f16c:	6868      	ldr	r0, [r5, #4]
 800f16e:	eb00 1084 	add.w	r0, r0, r4, lsl #6
 800f172:	4631      	mov	r1, r6
 800f174:	3401      	adds	r4, #1
 800f176:	f000 fa9f 	bl	800f6b8 <rclc_executor_handle_init>
 800f17a:	42a6      	cmp	r6, r4
 800f17c:	d1f6      	bne.n	800f16c <rclc_executor_init+0x7c>
 800f17e:	f105 0048 	add.w	r0, r5, #72	@ 0x48
 800f182:	f000 fa8d 	bl	800f6a0 <rclc_executor_handle_counters_zero_init>
 800f186:	4a11      	ldr	r2, [pc, #68]	@ (800f1cc <rclc_executor_init+0xdc>)
 800f188:	686b      	ldr	r3, [r5, #4]
 800f18a:	2000      	movs	r0, #0
 800f18c:	e9c5 201e 	strd	r2, r0, [r5, #120]	@ 0x78
 800f190:	b163      	cbz	r3, 800f1ac <rclc_executor_init+0xbc>
 800f192:	692b      	ldr	r3, [r5, #16]
 800f194:	b153      	cbz	r3, 800f1ac <rclc_executor_init+0xbc>
 800f196:	68ab      	ldr	r3, [r5, #8]
 800f198:	b143      	cbz	r3, 800f1ac <rclc_executor_init+0xbc>
 800f19a:	f885 0080 	strb.w	r0, [r5, #128]	@ 0x80
 800f19e:	b030      	add	sp, #192	@ 0xc0
 800f1a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f1a4:	200b      	movs	r0, #11
 800f1a6:	b030      	add	sp, #192	@ 0xc0
 800f1a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f1ac:	4618      	mov	r0, r3
 800f1ae:	b030      	add	sp, #192	@ 0xc0
 800f1b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f1b4:	200b      	movs	r0, #11
 800f1b6:	4770      	bx	lr
 800f1b8:	200a      	movs	r0, #10
 800f1ba:	e7f4      	b.n	800f1a6 <rclc_executor_init+0xb6>
 800f1bc:	f3af 8000 	nop.w
 800f1c0:	3b9aca00 	.word	0x3b9aca00
 800f1c4:	00000000 	.word	0x00000000
 800f1c8:	0801e5b0 	.word	0x0801e5b0
 800f1cc:	0800f051 	.word	0x0800f051

0800f1d0 <rclc_executor_add_subscription>:
 800f1d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f1d2:	f89d e018 	ldrb.w	lr, [sp, #24]
 800f1d6:	b338      	cbz	r0, 800f228 <rclc_executor_add_subscription+0x58>
 800f1d8:	b331      	cbz	r1, 800f228 <rclc_executor_add_subscription+0x58>
 800f1da:	b32a      	cbz	r2, 800f228 <rclc_executor_add_subscription+0x58>
 800f1dc:	b323      	cbz	r3, 800f228 <rclc_executor_add_subscription+0x58>
 800f1de:	4604      	mov	r4, r0
 800f1e0:	e9d0 5002 	ldrd	r5, r0, [r0, #8]
 800f1e4:	42a8      	cmp	r0, r5
 800f1e6:	d301      	bcc.n	800f1ec <rclc_executor_add_subscription+0x1c>
 800f1e8:	2001      	movs	r0, #1
 800f1ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f1ec:	6866      	ldr	r6, [r4, #4]
 800f1ee:	0187      	lsls	r7, r0, #6
 800f1f0:	eb06 1c80 	add.w	ip, r6, r0, lsl #6
 800f1f4:	2500      	movs	r5, #0
 800f1f6:	55f5      	strb	r5, [r6, r7]
 800f1f8:	3001      	adds	r0, #1
 800f1fa:	f8cc 3030 	str.w	r3, [ip, #48]	@ 0x30
 800f1fe:	f8cc 502c 	str.w	r5, [ip, #44]	@ 0x2c
 800f202:	2301      	movs	r3, #1
 800f204:	f104 0514 	add.w	r5, r4, #20
 800f208:	e9cc 1201 	strd	r1, r2, [ip, #4]
 800f20c:	f88c e001 	strb.w	lr, [ip, #1]
 800f210:	f8ac 3038 	strh.w	r3, [ip, #56]	@ 0x38
 800f214:	60e0      	str	r0, [r4, #12]
 800f216:	4628      	mov	r0, r5
 800f218:	f007 f90c 	bl	8016434 <rcl_wait_set_is_valid>
 800f21c:	b930      	cbnz	r0, 800f22c <rclc_executor_add_subscription+0x5c>
 800f21e:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 800f220:	3301      	adds	r3, #1
 800f222:	2000      	movs	r0, #0
 800f224:	64a3      	str	r3, [r4, #72]	@ 0x48
 800f226:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f228:	200b      	movs	r0, #11
 800f22a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f22c:	4628      	mov	r0, r5
 800f22e:	f007 f907 	bl	8016440 <rcl_wait_set_fini>
 800f232:	2800      	cmp	r0, #0
 800f234:	d0f3      	beq.n	800f21e <rclc_executor_add_subscription+0x4e>
 800f236:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f238 <rclc_executor_add_timer>:
 800f238:	b300      	cbz	r0, 800f27c <rclc_executor_add_timer+0x44>
 800f23a:	b1f9      	cbz	r1, 800f27c <rclc_executor_add_timer+0x44>
 800f23c:	b538      	push	{r3, r4, r5, lr}
 800f23e:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
 800f242:	4293      	cmp	r3, r2
 800f244:	4604      	mov	r4, r0
 800f246:	d301      	bcc.n	800f24c <rclc_executor_add_timer+0x14>
 800f248:	2001      	movs	r0, #1
 800f24a:	bd38      	pop	{r3, r4, r5, pc}
 800f24c:	6840      	ldr	r0, [r0, #4]
 800f24e:	eb00 1283 	add.w	r2, r0, r3, lsl #6
 800f252:	019d      	lsls	r5, r3, #6
 800f254:	6051      	str	r1, [r2, #4]
 800f256:	2102      	movs	r1, #2
 800f258:	5341      	strh	r1, [r0, r5]
 800f25a:	3301      	adds	r3, #1
 800f25c:	2000      	movs	r0, #0
 800f25e:	2101      	movs	r1, #1
 800f260:	f104 0514 	add.w	r5, r4, #20
 800f264:	62d0      	str	r0, [r2, #44]	@ 0x2c
 800f266:	8711      	strh	r1, [r2, #56]	@ 0x38
 800f268:	4628      	mov	r0, r5
 800f26a:	60e3      	str	r3, [r4, #12]
 800f26c:	f007 f8e2 	bl	8016434 <rcl_wait_set_is_valid>
 800f270:	b930      	cbnz	r0, 800f280 <rclc_executor_add_timer+0x48>
 800f272:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800f274:	3301      	adds	r3, #1
 800f276:	2000      	movs	r0, #0
 800f278:	64e3      	str	r3, [r4, #76]	@ 0x4c
 800f27a:	bd38      	pop	{r3, r4, r5, pc}
 800f27c:	200b      	movs	r0, #11
 800f27e:	4770      	bx	lr
 800f280:	4628      	mov	r0, r5
 800f282:	f007 f8dd 	bl	8016440 <rcl_wait_set_fini>
 800f286:	2800      	cmp	r0, #0
 800f288:	d0f3      	beq.n	800f272 <rclc_executor_add_timer+0x3a>
 800f28a:	bd38      	pop	{r3, r4, r5, pc}

0800f28c <rclc_executor_prepare>:
 800f28c:	2800      	cmp	r0, #0
 800f28e:	d044      	beq.n	800f31a <rclc_executor_prepare+0x8e>
 800f290:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f292:	f100 0514 	add.w	r5, r0, #20
 800f296:	b09b      	sub	sp, #108	@ 0x6c
 800f298:	4604      	mov	r4, r0
 800f29a:	4628      	mov	r0, r5
 800f29c:	f007 f8ca 	bl	8016434 <rcl_wait_set_is_valid>
 800f2a0:	b110      	cbz	r0, 800f2a8 <rclc_executor_prepare+0x1c>
 800f2a2:	2000      	movs	r0, #0
 800f2a4:	b01b      	add	sp, #108	@ 0x6c
 800f2a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f2a8:	4628      	mov	r0, r5
 800f2aa:	f007 f8c9 	bl	8016440 <rcl_wait_set_fini>
 800f2ae:	2800      	cmp	r0, #0
 800f2b0:	d130      	bne.n	800f314 <rclc_executor_prepare+0x88>
 800f2b2:	a80c      	add	r0, sp, #48	@ 0x30
 800f2b4:	f007 f8aa 	bl	801640c <rcl_get_zero_initialized_wait_set>
 800f2b8:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 800f2bc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f2c0:	46ae      	mov	lr, r5
 800f2c2:	6927      	ldr	r7, [r4, #16]
 800f2c4:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800f2c8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f2cc:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800f2d0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f2d4:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800f2d8:	f8dc 3000 	ldr.w	r3, [ip]
 800f2dc:	f8ce 3000 	str.w	r3, [lr]
 800f2e0:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800f2e2:	ae04      	add	r6, sp, #16
 800f2e4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800f2e6:	683b      	ldr	r3, [r7, #0]
 800f2e8:	6822      	ldr	r2, [r4, #0]
 800f2ea:	6033      	str	r3, [r6, #0]
 800f2ec:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f2ee:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 800f2f0:	e9cd 3202 	strd	r3, r2, [sp, #8]
 800f2f4:	e9d4 3213 	ldrd	r3, r2, [r4, #76]	@ 0x4c
 800f2f8:	e9cd 2100 	strd	r2, r1, [sp]
 800f2fc:	4628      	mov	r0, r5
 800f2fe:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 800f300:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800f302:	f007 fb9b 	bl	8016a3c <rcl_wait_set_init>
 800f306:	2800      	cmp	r0, #0
 800f308:	d0cc      	beq.n	800f2a4 <rclc_executor_prepare+0x18>
 800f30a:	900b      	str	r0, [sp, #44]	@ 0x2c
 800f30c:	f000 fb5c 	bl	800f9c8 <rcutils_reset_error>
 800f310:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800f312:	e7c7      	b.n	800f2a4 <rclc_executor_prepare+0x18>
 800f314:	f000 fb58 	bl	800f9c8 <rcutils_reset_error>
 800f318:	e7cb      	b.n	800f2b2 <rclc_executor_prepare+0x26>
 800f31a:	200b      	movs	r0, #11
 800f31c:	4770      	bx	lr
 800f31e:	bf00      	nop

0800f320 <rclc_executor_spin_some.part.0>:
 800f320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f324:	f100 0614 	add.w	r6, r0, #20
 800f328:	b083      	sub	sp, #12
 800f32a:	4691      	mov	r9, r2
 800f32c:	4698      	mov	r8, r3
 800f32e:	4605      	mov	r5, r0
 800f330:	f7ff ffac 	bl	800f28c <rclc_executor_prepare>
 800f334:	4630      	mov	r0, r6
 800f336:	f007 f94f 	bl	80165d8 <rcl_wait_set_clear>
 800f33a:	4607      	mov	r7, r0
 800f33c:	2800      	cmp	r0, #0
 800f33e:	f040 80ed 	bne.w	800f51c <rclc_executor_spin_some.part.0+0x1fc>
 800f342:	68ab      	ldr	r3, [r5, #8]
 800f344:	4604      	mov	r4, r0
 800f346:	b303      	cbz	r3, 800f38a <rclc_executor_spin_some.part.0+0x6a>
 800f348:	6869      	ldr	r1, [r5, #4]
 800f34a:	eb01 1c84 	add.w	ip, r1, r4, lsl #6
 800f34e:	01a2      	lsls	r2, r4, #6
 800f350:	f89c 3038 	ldrb.w	r3, [ip, #56]	@ 0x38
 800f354:	b1cb      	cbz	r3, 800f38a <rclc_executor_spin_some.part.0+0x6a>
 800f356:	5c8b      	ldrb	r3, [r1, r2]
 800f358:	2b0a      	cmp	r3, #10
 800f35a:	f200 80d8 	bhi.w	800f50e <rclc_executor_spin_some.part.0+0x1ee>
 800f35e:	e8df f003 	tbb	[pc, r3]
 800f362:	9c9c      	.short	0x9c9c
 800f364:	068c8ca7 	.word	0x068c8ca7
 800f368:	bdc90606 	.word	0xbdc90606
 800f36c:	b2          	.byte	0xb2
 800f36d:	00          	.byte	0x00
 800f36e:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800f372:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800f376:	4630      	mov	r0, r6
 800f378:	f007 fc76 	bl	8016c68 <rcl_wait_set_add_service>
 800f37c:	2800      	cmp	r0, #0
 800f37e:	f040 8086 	bne.w	800f48e <rclc_executor_spin_some.part.0+0x16e>
 800f382:	68ab      	ldr	r3, [r5, #8]
 800f384:	3401      	adds	r4, #1
 800f386:	429c      	cmp	r4, r3
 800f388:	d3de      	bcc.n	800f348 <rclc_executor_spin_some.part.0+0x28>
 800f38a:	4643      	mov	r3, r8
 800f38c:	464a      	mov	r2, r9
 800f38e:	4630      	mov	r0, r6
 800f390:	f007 fc96 	bl	8016cc0 <rcl_wait>
 800f394:	f895 3080 	ldrb.w	r3, [r5, #128]	@ 0x80
 800f398:	2b00      	cmp	r3, #0
 800f39a:	f000 80c7 	beq.w	800f52c <rclc_executor_spin_some.part.0+0x20c>
 800f39e:	2b01      	cmp	r3, #1
 800f3a0:	f040 80b5 	bne.w	800f50e <rclc_executor_spin_some.part.0+0x1ee>
 800f3a4:	68ab      	ldr	r3, [r5, #8]
 800f3a6:	2b00      	cmp	r3, #0
 800f3a8:	f000 8159 	beq.w	800f65e <rclc_executor_spin_some.part.0+0x33e>
 800f3ac:	2400      	movs	r4, #0
 800f3ae:	46a0      	mov	r8, r4
 800f3b0:	f240 1991 	movw	r9, #401	@ 0x191
 800f3b4:	e00a      	b.n	800f3cc <rclc_executor_spin_some.part.0+0xac>
 800f3b6:	f7ff fb49 	bl	800ea4c <_rclc_check_for_new_data>
 800f3ba:	4604      	mov	r4, r0
 800f3bc:	b110      	cbz	r0, 800f3c4 <rclc_executor_spin_some.part.0+0xa4>
 800f3be:	4548      	cmp	r0, r9
 800f3c0:	f040 80b2 	bne.w	800f528 <rclc_executor_spin_some.part.0+0x208>
 800f3c4:	68ab      	ldr	r3, [r5, #8]
 800f3c6:	4598      	cmp	r8, r3
 800f3c8:	f080 8126 	bcs.w	800f618 <rclc_executor_spin_some.part.0+0x2f8>
 800f3cc:	686a      	ldr	r2, [r5, #4]
 800f3ce:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 800f3d2:	4631      	mov	r1, r6
 800f3d4:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 800f3d8:	f108 0801 	add.w	r8, r8, #1
 800f3dc:	f1bc 0f00 	cmp.w	ip, #0
 800f3e0:	d1e9      	bne.n	800f3b6 <rclc_executor_spin_some.part.0+0x96>
 800f3e2:	4619      	mov	r1, r3
 800f3e4:	4610      	mov	r0, r2
 800f3e6:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 800f3ea:	4798      	blx	r3
 800f3ec:	2800      	cmp	r0, #0
 800f3ee:	f000 809b 	beq.w	800f528 <rclc_executor_spin_some.part.0+0x208>
 800f3f2:	68ab      	ldr	r3, [r5, #8]
 800f3f4:	2b00      	cmp	r3, #0
 800f3f6:	f000 8097 	beq.w	800f528 <rclc_executor_spin_some.part.0+0x208>
 800f3fa:	f04f 0800 	mov.w	r8, #0
 800f3fe:	f240 1991 	movw	r9, #401	@ 0x191
 800f402:	e009      	b.n	800f418 <rclc_executor_spin_some.part.0+0xf8>
 800f404:	f7ff fb70 	bl	800eae8 <_rclc_take_new_data>
 800f408:	4604      	mov	r4, r0
 800f40a:	b110      	cbz	r0, 800f412 <rclc_executor_spin_some.part.0+0xf2>
 800f40c:	4548      	cmp	r0, r9
 800f40e:	f040 808b 	bne.w	800f528 <rclc_executor_spin_some.part.0+0x208>
 800f412:	68ab      	ldr	r3, [r5, #8]
 800f414:	4598      	cmp	r8, r3
 800f416:	d209      	bcs.n	800f42c <rclc_executor_spin_some.part.0+0x10c>
 800f418:	6868      	ldr	r0, [r5, #4]
 800f41a:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 800f41e:	4631      	mov	r1, r6
 800f420:	f890 2038 	ldrb.w	r2, [r0, #56]	@ 0x38
 800f424:	f108 0801 	add.w	r8, r8, #1
 800f428:	2a00      	cmp	r2, #0
 800f42a:	d1eb      	bne.n	800f404 <rclc_executor_spin_some.part.0+0xe4>
 800f42c:	2600      	movs	r6, #0
 800f42e:	b97b      	cbnz	r3, 800f450 <rclc_executor_spin_some.part.0+0x130>
 800f430:	e07a      	b.n	800f528 <rclc_executor_spin_some.part.0+0x208>
 800f432:	f812 200c 	ldrb.w	r2, [r2, ip]
 800f436:	2a08      	cmp	r2, #8
 800f438:	f000 80fd 	beq.w	800f636 <rclc_executor_spin_some.part.0+0x316>
 800f43c:	2a09      	cmp	r2, #9
 800f43e:	f000 80ef 	beq.w	800f620 <rclc_executor_spin_some.part.0+0x300>
 800f442:	f890 2039 	ldrb.w	r2, [r0, #57]	@ 0x39
 800f446:	b98a      	cbnz	r2, 800f46c <rclc_executor_spin_some.part.0+0x14c>
 800f448:	3601      	adds	r6, #1
 800f44a:	429e      	cmp	r6, r3
 800f44c:	d262      	bcs.n	800f514 <rclc_executor_spin_some.part.0+0x1f4>
 800f44e:	2400      	movs	r4, #0
 800f450:	686a      	ldr	r2, [r5, #4]
 800f452:	eb02 1086 	add.w	r0, r2, r6, lsl #6
 800f456:	ea4f 1c86 	mov.w	ip, r6, lsl #6
 800f45a:	f890 1038 	ldrb.w	r1, [r0, #56]	@ 0x38
 800f45e:	2900      	cmp	r1, #0
 800f460:	d062      	beq.n	800f528 <rclc_executor_spin_some.part.0+0x208>
 800f462:	7841      	ldrb	r1, [r0, #1]
 800f464:	2900      	cmp	r1, #0
 800f466:	d0e4      	beq.n	800f432 <rclc_executor_spin_some.part.0+0x112>
 800f468:	2901      	cmp	r1, #1
 800f46a:	d1ed      	bne.n	800f448 <rclc_executor_spin_some.part.0+0x128>
 800f46c:	f7ff fcb0 	bl	800edd0 <_rclc_execute.part.0>
 800f470:	2800      	cmp	r0, #0
 800f472:	f040 80b6 	bne.w	800f5e2 <rclc_executor_spin_some.part.0+0x2c2>
 800f476:	68ab      	ldr	r3, [r5, #8]
 800f478:	e7e6      	b.n	800f448 <rclc_executor_spin_some.part.0+0x128>
 800f47a:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800f47e:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800f482:	4630      	mov	r0, r6
 800f484:	f007 fbc4 	bl	8016c10 <rcl_wait_set_add_client>
 800f488:	2800      	cmp	r0, #0
 800f48a:	f43f af7a 	beq.w	800f382 <rclc_executor_spin_some.part.0+0x62>
 800f48e:	9001      	str	r0, [sp, #4]
 800f490:	f000 fa9a 	bl	800f9c8 <rcutils_reset_error>
 800f494:	9801      	ldr	r0, [sp, #4]
 800f496:	4607      	mov	r7, r0
 800f498:	e03c      	b.n	800f514 <rclc_executor_spin_some.part.0+0x1f4>
 800f49a:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800f49e:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800f4a2:	4630      	mov	r0, r6
 800f4a4:	f007 f86c 	bl	8016580 <rcl_wait_set_add_subscription>
 800f4a8:	2800      	cmp	r0, #0
 800f4aa:	f43f af6a 	beq.w	800f382 <rclc_executor_spin_some.part.0+0x62>
 800f4ae:	e7ee      	b.n	800f48e <rclc_executor_spin_some.part.0+0x16e>
 800f4b0:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800f4b4:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800f4b8:	4630      	mov	r0, r6
 800f4ba:	f007 fb79 	bl	8016bb0 <rcl_wait_set_add_timer>
 800f4be:	2800      	cmp	r0, #0
 800f4c0:	f43f af5f 	beq.w	800f382 <rclc_executor_spin_some.part.0+0x62>
 800f4c4:	e7e3      	b.n	800f48e <rclc_executor_spin_some.part.0+0x16e>
 800f4c6:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800f4ca:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800f4ce:	4630      	mov	r0, r6
 800f4d0:	f007 fb42 	bl	8016b58 <rcl_wait_set_add_guard_condition>
 800f4d4:	2800      	cmp	r0, #0
 800f4d6:	f43f af54 	beq.w	800f382 <rclc_executor_spin_some.part.0+0x62>
 800f4da:	e7d8      	b.n	800f48e <rclc_executor_spin_some.part.0+0x16e>
 800f4dc:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800f4e0:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800f4e4:	3110      	adds	r1, #16
 800f4e6:	4630      	mov	r0, r6
 800f4e8:	f008 f8c2 	bl	8017670 <rcl_action_wait_set_add_action_server>
 800f4ec:	2800      	cmp	r0, #0
 800f4ee:	f43f af48 	beq.w	800f382 <rclc_executor_spin_some.part.0+0x62>
 800f4f2:	e7cc      	b.n	800f48e <rclc_executor_spin_some.part.0+0x16e>
 800f4f4:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800f4f8:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800f4fc:	3110      	adds	r1, #16
 800f4fe:	2300      	movs	r3, #0
 800f500:	4630      	mov	r0, r6
 800f502:	f007 fe8d 	bl	8017220 <rcl_action_wait_set_add_action_client>
 800f506:	2800      	cmp	r0, #0
 800f508:	f43f af3b 	beq.w	800f382 <rclc_executor_spin_some.part.0+0x62>
 800f50c:	e7bf      	b.n	800f48e <rclc_executor_spin_some.part.0+0x16e>
 800f50e:	f000 fa5b 	bl	800f9c8 <rcutils_reset_error>
 800f512:	2701      	movs	r7, #1
 800f514:	4638      	mov	r0, r7
 800f516:	b003      	add	sp, #12
 800f518:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f51c:	f000 fa54 	bl	800f9c8 <rcutils_reset_error>
 800f520:	4638      	mov	r0, r7
 800f522:	b003      	add	sp, #12
 800f524:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f528:	4627      	mov	r7, r4
 800f52a:	e7f3      	b.n	800f514 <rclc_executor_spin_some.part.0+0x1f4>
 800f52c:	68ab      	ldr	r3, [r5, #8]
 800f52e:	2b00      	cmp	r3, #0
 800f530:	f000 8092 	beq.w	800f658 <rclc_executor_spin_some.part.0+0x338>
 800f534:	2400      	movs	r4, #0
 800f536:	46a0      	mov	r8, r4
 800f538:	f240 1991 	movw	r9, #401	@ 0x191
 800f53c:	e008      	b.n	800f550 <rclc_executor_spin_some.part.0+0x230>
 800f53e:	f7ff fa85 	bl	800ea4c <_rclc_check_for_new_data>
 800f542:	4604      	mov	r4, r0
 800f544:	b108      	cbz	r0, 800f54a <rclc_executor_spin_some.part.0+0x22a>
 800f546:	4548      	cmp	r0, r9
 800f548:	d1ee      	bne.n	800f528 <rclc_executor_spin_some.part.0+0x208>
 800f54a:	68ab      	ldr	r3, [r5, #8]
 800f54c:	4598      	cmp	r8, r3
 800f54e:	d265      	bcs.n	800f61c <rclc_executor_spin_some.part.0+0x2fc>
 800f550:	686a      	ldr	r2, [r5, #4]
 800f552:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 800f556:	4631      	mov	r1, r6
 800f558:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 800f55c:	f108 0801 	add.w	r8, r8, #1
 800f560:	f1bc 0f00 	cmp.w	ip, #0
 800f564:	d1eb      	bne.n	800f53e <rclc_executor_spin_some.part.0+0x21e>
 800f566:	4619      	mov	r1, r3
 800f568:	4610      	mov	r0, r2
 800f56a:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 800f56e:	4798      	blx	r3
 800f570:	2800      	cmp	r0, #0
 800f572:	d0d9      	beq.n	800f528 <rclc_executor_spin_some.part.0+0x208>
 800f574:	68ab      	ldr	r3, [r5, #8]
 800f576:	2b00      	cmp	r3, #0
 800f578:	d0d6      	beq.n	800f528 <rclc_executor_spin_some.part.0+0x208>
 800f57a:	f04f 0800 	mov.w	r8, #0
 800f57e:	f240 1991 	movw	r9, #401	@ 0x191
 800f582:	f240 2a59 	movw	sl, #601	@ 0x259
 800f586:	e00e      	b.n	800f5a6 <rclc_executor_spin_some.part.0+0x286>
 800f588:	f813 300b 	ldrb.w	r3, [r3, fp]
 800f58c:	2b08      	cmp	r3, #8
 800f58e:	d033      	beq.n	800f5f8 <rclc_executor_spin_some.part.0+0x2d8>
 800f590:	2b09      	cmp	r3, #9
 800f592:	d028      	beq.n	800f5e6 <rclc_executor_spin_some.part.0+0x2c6>
 800f594:	f890 3039 	ldrb.w	r3, [r0, #57]	@ 0x39
 800f598:	b9fb      	cbnz	r3, 800f5da <rclc_executor_spin_some.part.0+0x2ba>
 800f59a:	68ab      	ldr	r3, [r5, #8]
 800f59c:	f108 0801 	add.w	r8, r8, #1
 800f5a0:	4598      	cmp	r8, r3
 800f5a2:	d2b7      	bcs.n	800f514 <rclc_executor_spin_some.part.0+0x1f4>
 800f5a4:	2400      	movs	r4, #0
 800f5a6:	6868      	ldr	r0, [r5, #4]
 800f5a8:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 800f5ac:	ea4f 1b88 	mov.w	fp, r8, lsl #6
 800f5b0:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 800f5b4:	2b00      	cmp	r3, #0
 800f5b6:	d0b7      	beq.n	800f528 <rclc_executor_spin_some.part.0+0x208>
 800f5b8:	4631      	mov	r1, r6
 800f5ba:	f7ff fa95 	bl	800eae8 <_rclc_take_new_data>
 800f5be:	b118      	cbz	r0, 800f5c8 <rclc_executor_spin_some.part.0+0x2a8>
 800f5c0:	4548      	cmp	r0, r9
 800f5c2:	d001      	beq.n	800f5c8 <rclc_executor_spin_some.part.0+0x2a8>
 800f5c4:	4550      	cmp	r0, sl
 800f5c6:	d10c      	bne.n	800f5e2 <rclc_executor_spin_some.part.0+0x2c2>
 800f5c8:	686b      	ldr	r3, [r5, #4]
 800f5ca:	eb13 000b 	adds.w	r0, r3, fp
 800f5ce:	d021      	beq.n	800f614 <rclc_executor_spin_some.part.0+0x2f4>
 800f5d0:	7842      	ldrb	r2, [r0, #1]
 800f5d2:	2a00      	cmp	r2, #0
 800f5d4:	d0d8      	beq.n	800f588 <rclc_executor_spin_some.part.0+0x268>
 800f5d6:	2a01      	cmp	r2, #1
 800f5d8:	d1df      	bne.n	800f59a <rclc_executor_spin_some.part.0+0x27a>
 800f5da:	f7ff fbf9 	bl	800edd0 <_rclc_execute.part.0>
 800f5de:	2800      	cmp	r0, #0
 800f5e0:	d0db      	beq.n	800f59a <rclc_executor_spin_some.part.0+0x27a>
 800f5e2:	4607      	mov	r7, r0
 800f5e4:	e796      	b.n	800f514 <rclc_executor_spin_some.part.0+0x1f4>
 800f5e6:	6843      	ldr	r3, [r0, #4]
 800f5e8:	6a1a      	ldr	r2, [r3, #32]
 800f5ea:	2a00      	cmp	r2, #0
 800f5ec:	d1f5      	bne.n	800f5da <rclc_executor_spin_some.part.0+0x2ba>
 800f5ee:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800f5f2:	2b00      	cmp	r3, #0
 800f5f4:	d0d1      	beq.n	800f59a <rclc_executor_spin_some.part.0+0x27a>
 800f5f6:	e7f0      	b.n	800f5da <rclc_executor_spin_some.part.0+0x2ba>
 800f5f8:	6843      	ldr	r3, [r0, #4]
 800f5fa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800f5fc:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800f600:	d1eb      	bne.n	800f5da <rclc_executor_spin_some.part.0+0x2ba>
 800f602:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800f606:	2a00      	cmp	r2, #0
 800f608:	d1e7      	bne.n	800f5da <rclc_executor_spin_some.part.0+0x2ba>
 800f60a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800f60e:	2b00      	cmp	r3, #0
 800f610:	d0c3      	beq.n	800f59a <rclc_executor_spin_some.part.0+0x27a>
 800f612:	e7e2      	b.n	800f5da <rclc_executor_spin_some.part.0+0x2ba>
 800f614:	270b      	movs	r7, #11
 800f616:	e77d      	b.n	800f514 <rclc_executor_spin_some.part.0+0x1f4>
 800f618:	686a      	ldr	r2, [r5, #4]
 800f61a:	e6e2      	b.n	800f3e2 <rclc_executor_spin_some.part.0+0xc2>
 800f61c:	686a      	ldr	r2, [r5, #4]
 800f61e:	e7a2      	b.n	800f566 <rclc_executor_spin_some.part.0+0x246>
 800f620:	6842      	ldr	r2, [r0, #4]
 800f622:	6a11      	ldr	r1, [r2, #32]
 800f624:	2900      	cmp	r1, #0
 800f626:	f47f af21 	bne.w	800f46c <rclc_executor_spin_some.part.0+0x14c>
 800f62a:	f892 2024 	ldrb.w	r2, [r2, #36]	@ 0x24
 800f62e:	2a00      	cmp	r2, #0
 800f630:	f43f af0a 	beq.w	800f448 <rclc_executor_spin_some.part.0+0x128>
 800f634:	e71a      	b.n	800f46c <rclc_executor_spin_some.part.0+0x14c>
 800f636:	6842      	ldr	r2, [r0, #4]
 800f638:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 800f63a:	f031 417f 	bics.w	r1, r1, #4278190080	@ 0xff000000
 800f63e:	f47f af15 	bne.w	800f46c <rclc_executor_spin_some.part.0+0x14c>
 800f642:	f892 1044 	ldrb.w	r1, [r2, #68]	@ 0x44
 800f646:	2900      	cmp	r1, #0
 800f648:	f47f af10 	bne.w	800f46c <rclc_executor_spin_some.part.0+0x14c>
 800f64c:	f892 2043 	ldrb.w	r2, [r2, #67]	@ 0x43
 800f650:	2a00      	cmp	r2, #0
 800f652:	f43f aef9 	beq.w	800f448 <rclc_executor_spin_some.part.0+0x128>
 800f656:	e709      	b.n	800f46c <rclc_executor_spin_some.part.0+0x14c>
 800f658:	686a      	ldr	r2, [r5, #4]
 800f65a:	461c      	mov	r4, r3
 800f65c:	e783      	b.n	800f566 <rclc_executor_spin_some.part.0+0x246>
 800f65e:	686a      	ldr	r2, [r5, #4]
 800f660:	461c      	mov	r4, r3
 800f662:	e6be      	b.n	800f3e2 <rclc_executor_spin_some.part.0+0xc2>

0800f664 <rclc_executor_spin>:
 800f664:	b1d0      	cbz	r0, 800f69c <rclc_executor_spin+0x38>
 800f666:	b510      	push	{r4, lr}
 800f668:	4604      	mov	r4, r0
 800f66a:	b082      	sub	sp, #8
 800f66c:	e9d4 231a 	ldrd	r2, r3, [r4, #104]	@ 0x68
 800f670:	6820      	ldr	r0, [r4, #0]
 800f672:	e9cd 2300 	strd	r2, r3, [sp]
 800f676:	f005 fdab 	bl	80151d0 <rcl_context_is_valid>
 800f67a:	4601      	mov	r1, r0
 800f67c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f680:	4620      	mov	r0, r4
 800f682:	b131      	cbz	r1, 800f692 <rclc_executor_spin+0x2e>
 800f684:	f7ff fe4c 	bl	800f320 <rclc_executor_spin_some.part.0>
 800f688:	f030 0302 	bics.w	r3, r0, #2
 800f68c:	d0ee      	beq.n	800f66c <rclc_executor_spin+0x8>
 800f68e:	b002      	add	sp, #8
 800f690:	bd10      	pop	{r4, pc}
 800f692:	f000 f999 	bl	800f9c8 <rcutils_reset_error>
 800f696:	2001      	movs	r0, #1
 800f698:	b002      	add	sp, #8
 800f69a:	bd10      	pop	{r4, pc}
 800f69c:	200b      	movs	r0, #11
 800f69e:	4770      	bx	lr

0800f6a0 <rclc_executor_handle_counters_zero_init>:
 800f6a0:	b130      	cbz	r0, 800f6b0 <rclc_executor_handle_counters_zero_init+0x10>
 800f6a2:	b508      	push	{r3, lr}
 800f6a4:	2220      	movs	r2, #32
 800f6a6:	2100      	movs	r1, #0
 800f6a8:	f00b fe60 	bl	801b36c <memset>
 800f6ac:	2000      	movs	r0, #0
 800f6ae:	bd08      	pop	{r3, pc}
 800f6b0:	200b      	movs	r0, #11
 800f6b2:	4770      	bx	lr
 800f6b4:	0000      	movs	r0, r0
	...

0800f6b8 <rclc_executor_handle_init>:
 800f6b8:	b168      	cbz	r0, 800f6d6 <rclc_executor_handle_init+0x1e>
 800f6ba:	ed9f 7b09 	vldr	d7, [pc, #36]	@ 800f6e0 <rclc_executor_handle_init+0x28>
 800f6be:	2300      	movs	r3, #0
 800f6c0:	220b      	movs	r2, #11
 800f6c2:	ed80 7b0a 	vstr	d7, [r0, #40]	@ 0x28
 800f6c6:	e9c0 3301 	strd	r3, r3, [r0, #4]
 800f6ca:	e9c0 310c 	strd	r3, r1, [r0, #48]	@ 0x30
 800f6ce:	8002      	strh	r2, [r0, #0]
 800f6d0:	8703      	strh	r3, [r0, #56]	@ 0x38
 800f6d2:	4618      	mov	r0, r3
 800f6d4:	4770      	bx	lr
 800f6d6:	200b      	movs	r0, #11
 800f6d8:	4770      	bx	lr
 800f6da:	bf00      	nop
 800f6dc:	f3af 8000 	nop.w
	...

0800f6e8 <rclc_support_init_with_options>:
 800f6e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f6ec:	b083      	sub	sp, #12
 800f6ee:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800f6f0:	b340      	cbz	r0, 800f744 <rclc_support_init_with_options+0x5c>
 800f6f2:	461d      	mov	r5, r3
 800f6f4:	b333      	cbz	r3, 800f744 <rclc_support_init_with_options+0x5c>
 800f6f6:	b32e      	cbz	r6, 800f744 <rclc_support_init_with_options+0x5c>
 800f6f8:	46e9      	mov	r9, sp
 800f6fa:	4604      	mov	r4, r0
 800f6fc:	4648      	mov	r0, r9
 800f6fe:	460f      	mov	r7, r1
 800f700:	4690      	mov	r8, r2
 800f702:	f005 fd5b 	bl	80151bc <rcl_get_zero_initialized_context>
 800f706:	e899 0003 	ldmia.w	r9, {r0, r1}
 800f70a:	462a      	mov	r2, r5
 800f70c:	e884 0003 	stmia.w	r4, {r0, r1}
 800f710:	4623      	mov	r3, r4
 800f712:	4641      	mov	r1, r8
 800f714:	4638      	mov	r0, r7
 800f716:	f005 fdc1 	bl	801529c <rcl_init>
 800f71a:	4605      	mov	r5, r0
 800f71c:	b960      	cbnz	r0, 800f738 <rclc_support_init_with_options+0x50>
 800f71e:	60a6      	str	r6, [r4, #8]
 800f720:	4632      	mov	r2, r6
 800f722:	f104 010c 	add.w	r1, r4, #12
 800f726:	2003      	movs	r0, #3
 800f728:	f006 fad8 	bl	8015cdc <rcl_clock_init>
 800f72c:	4605      	mov	r5, r0
 800f72e:	b918      	cbnz	r0, 800f738 <rclc_support_init_with_options+0x50>
 800f730:	4628      	mov	r0, r5
 800f732:	b003      	add	sp, #12
 800f734:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f738:	f000 f946 	bl	800f9c8 <rcutils_reset_error>
 800f73c:	4628      	mov	r0, r5
 800f73e:	b003      	add	sp, #12
 800f740:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f744:	250b      	movs	r5, #11
 800f746:	4628      	mov	r0, r5
 800f748:	b003      	add	sp, #12
 800f74a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f74e:	bf00      	nop

0800f750 <rclc_node_init_default>:
 800f750:	b3b8      	cbz	r0, 800f7c2 <rclc_node_init_default+0x72>
 800f752:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f756:	460d      	mov	r5, r1
 800f758:	b0a1      	sub	sp, #132	@ 0x84
 800f75a:	b329      	cbz	r1, 800f7a8 <rclc_node_init_default+0x58>
 800f75c:	4616      	mov	r6, r2
 800f75e:	b31a      	cbz	r2, 800f7a8 <rclc_node_init_default+0x58>
 800f760:	461f      	mov	r7, r3
 800f762:	b30b      	cbz	r3, 800f7a8 <rclc_node_init_default+0x58>
 800f764:	f10d 0810 	add.w	r8, sp, #16
 800f768:	4604      	mov	r4, r0
 800f76a:	4640      	mov	r0, r8
 800f76c:	f005 fea6 	bl	80154bc <rcl_get_zero_initialized_node>
 800f770:	e898 0003 	ldmia.w	r8, {r0, r1}
 800f774:	f10d 0918 	add.w	r9, sp, #24
 800f778:	e884 0003 	stmia.w	r4, {r0, r1}
 800f77c:	4648      	mov	r0, r9
 800f77e:	f006 f815 	bl	80157ac <rcl_node_get_default_options>
 800f782:	4640      	mov	r0, r8
 800f784:	f005 fe9a 	bl	80154bc <rcl_get_zero_initialized_node>
 800f788:	f8cd 9000 	str.w	r9, [sp]
 800f78c:	e898 0003 	ldmia.w	r8, {r0, r1}
 800f790:	463b      	mov	r3, r7
 800f792:	e884 0003 	stmia.w	r4, {r0, r1}
 800f796:	4632      	mov	r2, r6
 800f798:	4629      	mov	r1, r5
 800f79a:	4620      	mov	r0, r4
 800f79c:	f005 fe98 	bl	80154d0 <rcl_node_init>
 800f7a0:	b930      	cbnz	r0, 800f7b0 <rclc_node_init_default+0x60>
 800f7a2:	b021      	add	sp, #132	@ 0x84
 800f7a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f7a8:	200b      	movs	r0, #11
 800f7aa:	b021      	add	sp, #132	@ 0x84
 800f7ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f7b0:	9003      	str	r0, [sp, #12]
 800f7b2:	f000 f909 	bl	800f9c8 <rcutils_reset_error>
 800f7b6:	f000 f907 	bl	800f9c8 <rcutils_reset_error>
 800f7ba:	9803      	ldr	r0, [sp, #12]
 800f7bc:	b021      	add	sp, #132	@ 0x84
 800f7be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f7c2:	200b      	movs	r0, #11
 800f7c4:	4770      	bx	lr
 800f7c6:	bf00      	nop

0800f7c8 <rclc_publisher_init_default>:
 800f7c8:	b368      	cbz	r0, 800f826 <rclc_publisher_init_default+0x5e>
 800f7ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f7ce:	460d      	mov	r5, r1
 800f7d0:	b0a0      	sub	sp, #128	@ 0x80
 800f7d2:	b321      	cbz	r1, 800f81e <rclc_publisher_init_default+0x56>
 800f7d4:	4616      	mov	r6, r2
 800f7d6:	b312      	cbz	r2, 800f81e <rclc_publisher_init_default+0x56>
 800f7d8:	461f      	mov	r7, r3
 800f7da:	b303      	cbz	r3, 800f81e <rclc_publisher_init_default+0x56>
 800f7dc:	4604      	mov	r4, r0
 800f7de:	f7ff f825 	bl	800e82c <rcl_get_zero_initialized_publisher>
 800f7e2:	f10d 0810 	add.w	r8, sp, #16
 800f7e6:	6020      	str	r0, [r4, #0]
 800f7e8:	4640      	mov	r0, r8
 800f7ea:	f7ff f8bb 	bl	800e964 <rcl_publisher_get_default_options>
 800f7ee:	490f      	ldr	r1, [pc, #60]	@ (800f82c <rclc_publisher_init_default+0x64>)
 800f7f0:	2250      	movs	r2, #80	@ 0x50
 800f7f2:	4640      	mov	r0, r8
 800f7f4:	f00b fe83 	bl	801b4fe <memcpy>
 800f7f8:	f8cd 8000 	str.w	r8, [sp]
 800f7fc:	463b      	mov	r3, r7
 800f7fe:	4632      	mov	r2, r6
 800f800:	4629      	mov	r1, r5
 800f802:	4620      	mov	r0, r4
 800f804:	f7ff f818 	bl	800e838 <rcl_publisher_init>
 800f808:	b910      	cbnz	r0, 800f810 <rclc_publisher_init_default+0x48>
 800f80a:	b020      	add	sp, #128	@ 0x80
 800f80c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f810:	9003      	str	r0, [sp, #12]
 800f812:	f000 f8d9 	bl	800f9c8 <rcutils_reset_error>
 800f816:	9803      	ldr	r0, [sp, #12]
 800f818:	b020      	add	sp, #128	@ 0x80
 800f81a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f81e:	200b      	movs	r0, #11
 800f820:	b020      	add	sp, #128	@ 0x80
 800f822:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f826:	200b      	movs	r0, #11
 800f828:	4770      	bx	lr
 800f82a:	bf00      	nop
 800f82c:	0801e638 	.word	0x0801e638

0800f830 <rclc_subscription_init_best_effort>:
 800f830:	b368      	cbz	r0, 800f88e <rclc_subscription_init_best_effort+0x5e>
 800f832:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f836:	460d      	mov	r5, r1
 800f838:	b0a0      	sub	sp, #128	@ 0x80
 800f83a:	b321      	cbz	r1, 800f886 <rclc_subscription_init_best_effort+0x56>
 800f83c:	4616      	mov	r6, r2
 800f83e:	b312      	cbz	r2, 800f886 <rclc_subscription_init_best_effort+0x56>
 800f840:	461f      	mov	r7, r3
 800f842:	b303      	cbz	r3, 800f886 <rclc_subscription_init_best_effort+0x56>
 800f844:	4604      	mov	r4, r0
 800f846:	f006 f8ed 	bl	8015a24 <rcl_get_zero_initialized_subscription>
 800f84a:	f10d 0810 	add.w	r8, sp, #16
 800f84e:	6020      	str	r0, [r4, #0]
 800f850:	4640      	mov	r0, r8
 800f852:	f006 f995 	bl	8015b80 <rcl_subscription_get_default_options>
 800f856:	490f      	ldr	r1, [pc, #60]	@ (800f894 <rclc_subscription_init_best_effort+0x64>)
 800f858:	2250      	movs	r2, #80	@ 0x50
 800f85a:	4640      	mov	r0, r8
 800f85c:	f00b fe4f 	bl	801b4fe <memcpy>
 800f860:	f8cd 8000 	str.w	r8, [sp]
 800f864:	463b      	mov	r3, r7
 800f866:	4632      	mov	r2, r6
 800f868:	4629      	mov	r1, r5
 800f86a:	4620      	mov	r0, r4
 800f86c:	f006 f8e0 	bl	8015a30 <rcl_subscription_init>
 800f870:	b910      	cbnz	r0, 800f878 <rclc_subscription_init_best_effort+0x48>
 800f872:	b020      	add	sp, #128	@ 0x80
 800f874:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f878:	9003      	str	r0, [sp, #12]
 800f87a:	f000 f8a5 	bl	800f9c8 <rcutils_reset_error>
 800f87e:	9803      	ldr	r0, [sp, #12]
 800f880:	b020      	add	sp, #128	@ 0x80
 800f882:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f886:	200b      	movs	r0, #11
 800f888:	b020      	add	sp, #128	@ 0x80
 800f88a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f88e:	200b      	movs	r0, #11
 800f890:	4770      	bx	lr
 800f892:	bf00      	nop
 800f894:	0801e688 	.word	0x0801e688

0800f898 <rclc_timer_init_default>:
 800f898:	b360      	cbz	r0, 800f8f4 <rclc_timer_init_default+0x5c>
 800f89a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f89e:	460e      	mov	r6, r1
 800f8a0:	b08a      	sub	sp, #40	@ 0x28
 800f8a2:	b319      	cbz	r1, 800f8ec <rclc_timer_init_default+0x54>
 800f8a4:	4690      	mov	r8, r2
 800f8a6:	461f      	mov	r7, r3
 800f8a8:	4605      	mov	r5, r0
 800f8aa:	f006 fbf5 	bl	8016098 <rcl_get_zero_initialized_timer>
 800f8ae:	68b4      	ldr	r4, [r6, #8]
 800f8b0:	6028      	str	r0, [r5, #0]
 800f8b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f8b4:	f10d 0c0c 	add.w	ip, sp, #12
 800f8b8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f8bc:	6823      	ldr	r3, [r4, #0]
 800f8be:	f8cc 3000 	str.w	r3, [ip]
 800f8c2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800f8c4:	9302      	str	r3, [sp, #8]
 800f8c6:	e9cd 8700 	strd	r8, r7, [sp]
 800f8ca:	4628      	mov	r0, r5
 800f8cc:	4632      	mov	r2, r6
 800f8ce:	f106 010c 	add.w	r1, r6, #12
 800f8d2:	f006 fbe9 	bl	80160a8 <rcl_timer_init>
 800f8d6:	b910      	cbnz	r0, 800f8de <rclc_timer_init_default+0x46>
 800f8d8:	b00a      	add	sp, #40	@ 0x28
 800f8da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f8de:	9009      	str	r0, [sp, #36]	@ 0x24
 800f8e0:	f000 f872 	bl	800f9c8 <rcutils_reset_error>
 800f8e4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f8e6:	b00a      	add	sp, #40	@ 0x28
 800f8e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f8ec:	200b      	movs	r0, #11
 800f8ee:	b00a      	add	sp, #40	@ 0x28
 800f8f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f8f4:	200b      	movs	r0, #11
 800f8f6:	4770      	bx	lr

0800f8f8 <__default_zero_allocate>:
 800f8f8:	f00b b848 	b.w	801a98c <calloc>

0800f8fc <__default_reallocate>:
 800f8fc:	f00b b9e6 	b.w	801accc <realloc>

0800f900 <__default_deallocate>:
 800f900:	f00b b8c2 	b.w	801aa88 <free>

0800f904 <__default_allocate>:
 800f904:	f00b b8b8 	b.w	801aa78 <malloc>

0800f908 <rcutils_get_zero_initialized_allocator>:
 800f908:	b510      	push	{r4, lr}
 800f90a:	4c05      	ldr	r4, [pc, #20]	@ (800f920 <rcutils_get_zero_initialized_allocator+0x18>)
 800f90c:	4686      	mov	lr, r0
 800f90e:	4684      	mov	ip, r0
 800f910:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f912:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f916:	6823      	ldr	r3, [r4, #0]
 800f918:	f8cc 3000 	str.w	r3, [ip]
 800f91c:	4670      	mov	r0, lr
 800f91e:	bd10      	pop	{r4, pc}
 800f920:	0801e6d8 	.word	0x0801e6d8

0800f924 <rcutils_set_default_allocator>:
 800f924:	b1a8      	cbz	r0, 800f952 <rcutils_set_default_allocator+0x2e>
 800f926:	6802      	ldr	r2, [r0, #0]
 800f928:	b1a2      	cbz	r2, 800f954 <rcutils_set_default_allocator+0x30>
 800f92a:	6841      	ldr	r1, [r0, #4]
 800f92c:	b1a1      	cbz	r1, 800f958 <rcutils_set_default_allocator+0x34>
 800f92e:	b410      	push	{r4}
 800f930:	68c4      	ldr	r4, [r0, #12]
 800f932:	b164      	cbz	r4, 800f94e <rcutils_set_default_allocator+0x2a>
 800f934:	6880      	ldr	r0, [r0, #8]
 800f936:	b138      	cbz	r0, 800f948 <rcutils_set_default_allocator+0x24>
 800f938:	4b08      	ldr	r3, [pc, #32]	@ (800f95c <rcutils_set_default_allocator+0x38>)
 800f93a:	601a      	str	r2, [r3, #0]
 800f93c:	2200      	movs	r2, #0
 800f93e:	e9c3 4203 	strd	r4, r2, [r3, #12]
 800f942:	e9c3 1001 	strd	r1, r0, [r3, #4]
 800f946:	2001      	movs	r0, #1
 800f948:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f94c:	4770      	bx	lr
 800f94e:	4620      	mov	r0, r4
 800f950:	e7fa      	b.n	800f948 <rcutils_set_default_allocator+0x24>
 800f952:	4770      	bx	lr
 800f954:	4610      	mov	r0, r2
 800f956:	4770      	bx	lr
 800f958:	4608      	mov	r0, r1
 800f95a:	4770      	bx	lr
 800f95c:	200001bc 	.word	0x200001bc

0800f960 <rcutils_get_default_allocator>:
 800f960:	b510      	push	{r4, lr}
 800f962:	4c05      	ldr	r4, [pc, #20]	@ (800f978 <rcutils_get_default_allocator+0x18>)
 800f964:	4686      	mov	lr, r0
 800f966:	4684      	mov	ip, r0
 800f968:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f96a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f96e:	6823      	ldr	r3, [r4, #0]
 800f970:	f8cc 3000 	str.w	r3, [ip]
 800f974:	4670      	mov	r0, lr
 800f976:	bd10      	pop	{r4, pc}
 800f978:	200001bc 	.word	0x200001bc

0800f97c <rcutils_allocator_is_valid>:
 800f97c:	b158      	cbz	r0, 800f996 <rcutils_allocator_is_valid+0x1a>
 800f97e:	6803      	ldr	r3, [r0, #0]
 800f980:	b143      	cbz	r3, 800f994 <rcutils_allocator_is_valid+0x18>
 800f982:	6843      	ldr	r3, [r0, #4]
 800f984:	b133      	cbz	r3, 800f994 <rcutils_allocator_is_valid+0x18>
 800f986:	68c3      	ldr	r3, [r0, #12]
 800f988:	b123      	cbz	r3, 800f994 <rcutils_allocator_is_valid+0x18>
 800f98a:	6880      	ldr	r0, [r0, #8]
 800f98c:	3800      	subs	r0, #0
 800f98e:	bf18      	it	ne
 800f990:	2001      	movne	r0, #1
 800f992:	4770      	bx	lr
 800f994:	4618      	mov	r0, r3
 800f996:	4770      	bx	lr

0800f998 <rcutils_get_error_string>:
 800f998:	4b06      	ldr	r3, [pc, #24]	@ (800f9b4 <rcutils_get_error_string+0x1c>)
 800f99a:	781b      	ldrb	r3, [r3, #0]
 800f99c:	b13b      	cbz	r3, 800f9ae <rcutils_get_error_string+0x16>
 800f99e:	4b06      	ldr	r3, [pc, #24]	@ (800f9b8 <rcutils_get_error_string+0x20>)
 800f9a0:	781a      	ldrb	r2, [r3, #0]
 800f9a2:	b90a      	cbnz	r2, 800f9a8 <rcutils_get_error_string+0x10>
 800f9a4:	2201      	movs	r2, #1
 800f9a6:	701a      	strb	r2, [r3, #0]
 800f9a8:	4b04      	ldr	r3, [pc, #16]	@ (800f9bc <rcutils_get_error_string+0x24>)
 800f9aa:	7818      	ldrb	r0, [r3, #0]
 800f9ac:	4770      	bx	lr
 800f9ae:	4b04      	ldr	r3, [pc, #16]	@ (800f9c0 <rcutils_get_error_string+0x28>)
 800f9b0:	7818      	ldrb	r0, [r3, #0]
 800f9b2:	4770      	bx	lr
 800f9b4:	20006ba0 	.word	0x20006ba0
 800f9b8:	20006bb9 	.word	0x20006bb9
 800f9bc:	20006bb8 	.word	0x20006bb8
 800f9c0:	0801dee0 	.word	0x0801dee0
 800f9c4:	00000000 	.word	0x00000000

0800f9c8 <rcutils_reset_error>:
 800f9c8:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 800f9e8 <rcutils_reset_error+0x20>
 800f9cc:	4a08      	ldr	r2, [pc, #32]	@ (800f9f0 <rcutils_reset_error+0x28>)
 800f9ce:	4809      	ldr	r0, [pc, #36]	@ (800f9f4 <rcutils_reset_error+0x2c>)
 800f9d0:	4909      	ldr	r1, [pc, #36]	@ (800f9f8 <rcutils_reset_error+0x30>)
 800f9d2:	2300      	movs	r3, #0
 800f9d4:	8013      	strh	r3, [r2, #0]
 800f9d6:	ed82 7b02 	vstr	d7, [r2, #8]
 800f9da:	4a08      	ldr	r2, [pc, #32]	@ (800f9fc <rcutils_reset_error+0x34>)
 800f9dc:	7003      	strb	r3, [r0, #0]
 800f9de:	700b      	strb	r3, [r1, #0]
 800f9e0:	7013      	strb	r3, [r2, #0]
 800f9e2:	4770      	bx	lr
 800f9e4:	f3af 8000 	nop.w
	...
 800f9f0:	20006ba8 	.word	0x20006ba8
 800f9f4:	20006bb9 	.word	0x20006bb9
 800f9f8:	20006bb8 	.word	0x20006bb8
 800f9fc:	20006ba0 	.word	0x20006ba0

0800fa00 <rcutils_system_time_now>:
 800fa00:	b308      	cbz	r0, 800fa46 <rcutils_system_time_now+0x46>
 800fa02:	b570      	push	{r4, r5, r6, lr}
 800fa04:	b084      	sub	sp, #16
 800fa06:	4604      	mov	r4, r0
 800fa08:	4669      	mov	r1, sp
 800fa0a:	2001      	movs	r0, #1
 800fa0c:	f7f3 faac 	bl	8002f68 <clock_gettime>
 800fa10:	e9dd 3500 	ldrd	r3, r5, [sp]
 800fa14:	2d00      	cmp	r5, #0
 800fa16:	db13      	blt.n	800fa40 <rcutils_system_time_now+0x40>
 800fa18:	9902      	ldr	r1, [sp, #8]
 800fa1a:	2900      	cmp	r1, #0
 800fa1c:	db0d      	blt.n	800fa3a <rcutils_system_time_now+0x3a>
 800fa1e:	4e0b      	ldr	r6, [pc, #44]	@ (800fa4c <rcutils_system_time_now+0x4c>)
 800fa20:	fba3 3206 	umull	r3, r2, r3, r6
 800fa24:	185b      	adds	r3, r3, r1
 800fa26:	fb06 2205 	mla	r2, r6, r5, r2
 800fa2a:	f04f 0000 	mov.w	r0, #0
 800fa2e:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 800fa32:	e9c4 3200 	strd	r3, r2, [r4]
 800fa36:	b004      	add	sp, #16
 800fa38:	bd70      	pop	{r4, r5, r6, pc}
 800fa3a:	ea53 0205 	orrs.w	r2, r3, r5
 800fa3e:	d1ee      	bne.n	800fa1e <rcutils_system_time_now+0x1e>
 800fa40:	2002      	movs	r0, #2
 800fa42:	b004      	add	sp, #16
 800fa44:	bd70      	pop	{r4, r5, r6, pc}
 800fa46:	200b      	movs	r0, #11
 800fa48:	4770      	bx	lr
 800fa4a:	bf00      	nop
 800fa4c:	3b9aca00 	.word	0x3b9aca00

0800fa50 <rcutils_steady_time_now>:
 800fa50:	b308      	cbz	r0, 800fa96 <rcutils_steady_time_now+0x46>
 800fa52:	b570      	push	{r4, r5, r6, lr}
 800fa54:	b084      	sub	sp, #16
 800fa56:	4604      	mov	r4, r0
 800fa58:	4669      	mov	r1, sp
 800fa5a:	2000      	movs	r0, #0
 800fa5c:	f7f3 fa84 	bl	8002f68 <clock_gettime>
 800fa60:	e9dd 3500 	ldrd	r3, r5, [sp]
 800fa64:	2d00      	cmp	r5, #0
 800fa66:	db13      	blt.n	800fa90 <rcutils_steady_time_now+0x40>
 800fa68:	9902      	ldr	r1, [sp, #8]
 800fa6a:	2900      	cmp	r1, #0
 800fa6c:	db0d      	blt.n	800fa8a <rcutils_steady_time_now+0x3a>
 800fa6e:	4e0b      	ldr	r6, [pc, #44]	@ (800fa9c <rcutils_steady_time_now+0x4c>)
 800fa70:	fba3 3206 	umull	r3, r2, r3, r6
 800fa74:	185b      	adds	r3, r3, r1
 800fa76:	fb06 2205 	mla	r2, r6, r5, r2
 800fa7a:	f04f 0000 	mov.w	r0, #0
 800fa7e:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 800fa82:	e9c4 3200 	strd	r3, r2, [r4]
 800fa86:	b004      	add	sp, #16
 800fa88:	bd70      	pop	{r4, r5, r6, pc}
 800fa8a:	ea53 0205 	orrs.w	r2, r3, r5
 800fa8e:	d1ee      	bne.n	800fa6e <rcutils_steady_time_now+0x1e>
 800fa90:	2002      	movs	r0, #2
 800fa92:	b004      	add	sp, #16
 800fa94:	bd70      	pop	{r4, r5, r6, pc}
 800fa96:	200b      	movs	r0, #11
 800fa98:	4770      	bx	lr
 800fa9a:	bf00      	nop
 800fa9c:	3b9aca00 	.word	0x3b9aca00

0800faa0 <rmw_get_zero_initialized_init_options>:
 800faa0:	b510      	push	{r4, lr}
 800faa2:	2238      	movs	r2, #56	@ 0x38
 800faa4:	4604      	mov	r4, r0
 800faa6:	2100      	movs	r1, #0
 800faa8:	f00b fc60 	bl	801b36c <memset>
 800faac:	f104 0010 	add.w	r0, r4, #16
 800fab0:	f000 f80a 	bl	800fac8 <rmw_get_default_security_options>
 800fab4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800fab8:	60e3      	str	r3, [r4, #12]
 800faba:	4620      	mov	r0, r4
 800fabc:	bd10      	pop	{r4, pc}
 800fabe:	bf00      	nop

0800fac0 <rmw_get_default_publisher_options>:
 800fac0:	2200      	movs	r2, #0
 800fac2:	6002      	str	r2, [r0, #0]
 800fac4:	7102      	strb	r2, [r0, #4]
 800fac6:	4770      	bx	lr

0800fac8 <rmw_get_default_security_options>:
 800fac8:	2200      	movs	r2, #0
 800faca:	7002      	strb	r2, [r0, #0]
 800facc:	6042      	str	r2, [r0, #4]
 800face:	4770      	bx	lr

0800fad0 <rmw_uros_set_custom_transport>:
 800fad0:	b470      	push	{r4, r5, r6}
 800fad2:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 800fad6:	b162      	cbz	r2, 800faf2 <rmw_uros_set_custom_transport+0x22>
 800fad8:	b15b      	cbz	r3, 800faf2 <rmw_uros_set_custom_transport+0x22>
 800fada:	b155      	cbz	r5, 800faf2 <rmw_uros_set_custom_transport+0x22>
 800fadc:	b14e      	cbz	r6, 800faf2 <rmw_uros_set_custom_transport+0x22>
 800fade:	4c06      	ldr	r4, [pc, #24]	@ (800faf8 <rmw_uros_set_custom_transport+0x28>)
 800fae0:	7020      	strb	r0, [r4, #0]
 800fae2:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800fae6:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800faea:	6166      	str	r6, [r4, #20]
 800faec:	2000      	movs	r0, #0
 800faee:	bc70      	pop	{r4, r5, r6}
 800faf0:	4770      	bx	lr
 800faf2:	200b      	movs	r0, #11
 800faf4:	bc70      	pop	{r4, r5, r6}
 800faf6:	4770      	bx	lr
 800faf8:	20006bbc 	.word	0x20006bbc

0800fafc <rmw_init_options_init>:
 800fafc:	b084      	sub	sp, #16
 800fafe:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fb00:	b083      	sub	sp, #12
 800fb02:	ad09      	add	r5, sp, #36	@ 0x24
 800fb04:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 800fb08:	b130      	cbz	r0, 800fb18 <rmw_init_options_init+0x1c>
 800fb0a:	4604      	mov	r4, r0
 800fb0c:	4628      	mov	r0, r5
 800fb0e:	f7ff ff35 	bl	800f97c <rcutils_allocator_is_valid>
 800fb12:	b108      	cbz	r0, 800fb18 <rmw_init_options_init+0x1c>
 800fb14:	68a6      	ldr	r6, [r4, #8]
 800fb16:	b12e      	cbz	r6, 800fb24 <rmw_init_options_init+0x28>
 800fb18:	200b      	movs	r0, #11
 800fb1a:	b003      	add	sp, #12
 800fb1c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800fb20:	b004      	add	sp, #16
 800fb22:	4770      	bx	lr
 800fb24:	2200      	movs	r2, #0
 800fb26:	2300      	movs	r3, #0
 800fb28:	e9c4 2300 	strd	r2, r3, [r4]
 800fb2c:	4b20      	ldr	r3, [pc, #128]	@ (800fbb0 <rmw_init_options_init+0xb4>)
 800fb2e:	681b      	ldr	r3, [r3, #0]
 800fb30:	60a3      	str	r3, [r4, #8]
 800fb32:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fb34:	f104 0c20 	add.w	ip, r4, #32
 800fb38:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800fb3c:	466f      	mov	r7, sp
 800fb3e:	682b      	ldr	r3, [r5, #0]
 800fb40:	f8cc 3000 	str.w	r3, [ip]
 800fb44:	4638      	mov	r0, r7
 800fb46:	61e6      	str	r6, [r4, #28]
 800fb48:	60e6      	str	r6, [r4, #12]
 800fb4a:	f7ff ffbd 	bl	800fac8 <rmw_get_default_security_options>
 800fb4e:	e897 0003 	ldmia.w	r7, {r0, r1}
 800fb52:	f104 0310 	add.w	r3, r4, #16
 800fb56:	e883 0003 	stmia.w	r3, {r0, r1}
 800fb5a:	2203      	movs	r2, #3
 800fb5c:	4815      	ldr	r0, [pc, #84]	@ (800fbb4 <rmw_init_options_init+0xb8>)
 800fb5e:	4916      	ldr	r1, [pc, #88]	@ (800fbb8 <rmw_init_options_init+0xbc>)
 800fb60:	7626      	strb	r6, [r4, #24]
 800fb62:	f000 ffdb 	bl	8010b1c <rmw_uxrce_init_init_options_impl_memory>
 800fb66:	4813      	ldr	r0, [pc, #76]	@ (800fbb4 <rmw_init_options_init+0xb8>)
 800fb68:	f008 fdc6 	bl	80186f8 <get_memory>
 800fb6c:	b1f0      	cbz	r0, 800fbac <rmw_init_options_init+0xb0>
 800fb6e:	4a13      	ldr	r2, [pc, #76]	@ (800fbbc <rmw_init_options_init+0xc0>)
 800fb70:	6883      	ldr	r3, [r0, #8]
 800fb72:	6851      	ldr	r1, [r2, #4]
 800fb74:	7810      	ldrb	r0, [r2, #0]
 800fb76:	6363      	str	r3, [r4, #52]	@ 0x34
 800fb78:	7418      	strb	r0, [r3, #16]
 800fb7a:	6159      	str	r1, [r3, #20]
 800fb7c:	68d1      	ldr	r1, [r2, #12]
 800fb7e:	61d9      	str	r1, [r3, #28]
 800fb80:	6911      	ldr	r1, [r2, #16]
 800fb82:	6219      	str	r1, [r3, #32]
 800fb84:	6951      	ldr	r1, [r2, #20]
 800fb86:	6892      	ldr	r2, [r2, #8]
 800fb88:	619a      	str	r2, [r3, #24]
 800fb8a:	6259      	str	r1, [r3, #36]	@ 0x24
 800fb8c:	f004 f83e 	bl	8013c0c <uxr_nanos>
 800fb90:	f00b f830 	bl	801abf4 <srand>
 800fb94:	f00b f85c 	bl	801ac50 <rand>
 800fb98:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800fb9a:	6298      	str	r0, [r3, #40]	@ 0x28
 800fb9c:	2800      	cmp	r0, #0
 800fb9e:	d0f9      	beq.n	800fb94 <rmw_init_options_init+0x98>
 800fba0:	2000      	movs	r0, #0
 800fba2:	b003      	add	sp, #12
 800fba4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800fba8:	b004      	add	sp, #16
 800fbaa:	4770      	bx	lr
 800fbac:	2001      	movs	r0, #1
 800fbae:	e7b4      	b.n	800fb1a <rmw_init_options_init+0x1e>
 800fbb0:	0801eacc 	.word	0x0801eacc
 800fbb4:	2000b4d4 	.word	0x2000b4d4
 800fbb8:	20006d70 	.word	0x20006d70
 800fbbc:	20006bbc 	.word	0x20006bbc

0800fbc0 <rmw_init_options_copy>:
 800fbc0:	b570      	push	{r4, r5, r6, lr}
 800fbc2:	b088      	sub	sp, #32
 800fbc4:	b160      	cbz	r0, 800fbe0 <rmw_init_options_copy+0x20>
 800fbc6:	460d      	mov	r5, r1
 800fbc8:	b151      	cbz	r1, 800fbe0 <rmw_init_options_copy+0x20>
 800fbca:	4604      	mov	r4, r0
 800fbcc:	6880      	ldr	r0, [r0, #8]
 800fbce:	b128      	cbz	r0, 800fbdc <rmw_init_options_copy+0x1c>
 800fbd0:	4b33      	ldr	r3, [pc, #204]	@ (800fca0 <rmw_init_options_copy+0xe0>)
 800fbd2:	6819      	ldr	r1, [r3, #0]
 800fbd4:	f7f0 fb24 	bl	8000220 <strcmp>
 800fbd8:	2800      	cmp	r0, #0
 800fbda:	d154      	bne.n	800fc86 <rmw_init_options_copy+0xc6>
 800fbdc:	68ab      	ldr	r3, [r5, #8]
 800fbde:	b11b      	cbz	r3, 800fbe8 <rmw_init_options_copy+0x28>
 800fbe0:	240b      	movs	r4, #11
 800fbe2:	4620      	mov	r0, r4
 800fbe4:	b008      	add	sp, #32
 800fbe6:	bd70      	pop	{r4, r5, r6, pc}
 800fbe8:	4623      	mov	r3, r4
 800fbea:	462a      	mov	r2, r5
 800fbec:	f104 0630 	add.w	r6, r4, #48	@ 0x30
 800fbf0:	f8d3 c000 	ldr.w	ip, [r3]
 800fbf4:	6858      	ldr	r0, [r3, #4]
 800fbf6:	6899      	ldr	r1, [r3, #8]
 800fbf8:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 800fbfc:	f8c2 e00c 	str.w	lr, [r2, #12]
 800fc00:	3310      	adds	r3, #16
 800fc02:	42b3      	cmp	r3, r6
 800fc04:	f8c2 c000 	str.w	ip, [r2]
 800fc08:	6050      	str	r0, [r2, #4]
 800fc0a:	6091      	str	r1, [r2, #8]
 800fc0c:	f102 0210 	add.w	r2, r2, #16
 800fc10:	d1ee      	bne.n	800fbf0 <rmw_init_options_copy+0x30>
 800fc12:	6819      	ldr	r1, [r3, #0]
 800fc14:	685b      	ldr	r3, [r3, #4]
 800fc16:	6053      	str	r3, [r2, #4]
 800fc18:	6011      	str	r1, [r2, #0]
 800fc1a:	f104 0e20 	add.w	lr, r4, #32
 800fc1e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800fc22:	f10d 0c0c 	add.w	ip, sp, #12
 800fc26:	4666      	mov	r6, ip
 800fc28:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800fc2c:	f8de 3000 	ldr.w	r3, [lr]
 800fc30:	f8cc 3000 	str.w	r3, [ip]
 800fc34:	4630      	mov	r0, r6
 800fc36:	f7ff fea1 	bl	800f97c <rcutils_allocator_is_valid>
 800fc3a:	2800      	cmp	r0, #0
 800fc3c:	d0d0      	beq.n	800fbe0 <rmw_init_options_copy+0x20>
 800fc3e:	ab08      	add	r3, sp, #32
 800fc40:	e913 0003 	ldmdb	r3, {r0, r1}
 800fc44:	e88d 0003 	stmia.w	sp, {r0, r1}
 800fc48:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800fc4c:	69e0      	ldr	r0, [r4, #28]
 800fc4e:	f008 f905 	bl	8017e5c <rcutils_strdup>
 800fc52:	61e8      	str	r0, [r5, #28]
 800fc54:	69e3      	ldr	r3, [r4, #28]
 800fc56:	b103      	cbz	r3, 800fc5a <rmw_init_options_copy+0x9a>
 800fc58:	b1f8      	cbz	r0, 800fc9a <rmw_init_options_copy+0xda>
 800fc5a:	4812      	ldr	r0, [pc, #72]	@ (800fca4 <rmw_init_options_copy+0xe4>)
 800fc5c:	f008 fd4c 	bl	80186f8 <get_memory>
 800fc60:	b1a8      	cbz	r0, 800fc8e <rmw_init_options_copy+0xce>
 800fc62:	6883      	ldr	r3, [r0, #8]
 800fc64:	636b      	str	r3, [r5, #52]	@ 0x34
 800fc66:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800fc68:	f102 0c10 	add.w	ip, r2, #16
 800fc6c:	f103 0510 	add.w	r5, r3, #16
 800fc70:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800fc74:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800fc76:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 800fc7a:	2400      	movs	r4, #0
 800fc7c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800fc80:	4620      	mov	r0, r4
 800fc82:	b008      	add	sp, #32
 800fc84:	bd70      	pop	{r4, r5, r6, pc}
 800fc86:	240c      	movs	r4, #12
 800fc88:	4620      	mov	r0, r4
 800fc8a:	b008      	add	sp, #32
 800fc8c:	bd70      	pop	{r4, r5, r6, pc}
 800fc8e:	9b04      	ldr	r3, [sp, #16]
 800fc90:	9907      	ldr	r1, [sp, #28]
 800fc92:	69e8      	ldr	r0, [r5, #28]
 800fc94:	4798      	blx	r3
 800fc96:	2401      	movs	r4, #1
 800fc98:	e7a3      	b.n	800fbe2 <rmw_init_options_copy+0x22>
 800fc9a:	240a      	movs	r4, #10
 800fc9c:	e7a1      	b.n	800fbe2 <rmw_init_options_copy+0x22>
 800fc9e:	bf00      	nop
 800fca0:	0801eacc 	.word	0x0801eacc
 800fca4:	2000b4d4 	.word	0x2000b4d4

0800fca8 <rmw_init_options_fini>:
 800fca8:	2800      	cmp	r0, #0
 800fcaa:	d041      	beq.n	800fd30 <rmw_init_options_fini+0x88>
 800fcac:	b510      	push	{r4, lr}
 800fcae:	4604      	mov	r4, r0
 800fcb0:	b08e      	sub	sp, #56	@ 0x38
 800fcb2:	3020      	adds	r0, #32
 800fcb4:	f7ff fe62 	bl	800f97c <rcutils_allocator_is_valid>
 800fcb8:	b380      	cbz	r0, 800fd1c <rmw_init_options_fini+0x74>
 800fcba:	68a0      	ldr	r0, [r4, #8]
 800fcbc:	b120      	cbz	r0, 800fcc8 <rmw_init_options_fini+0x20>
 800fcbe:	4b1e      	ldr	r3, [pc, #120]	@ (800fd38 <rmw_init_options_fini+0x90>)
 800fcc0:	6819      	ldr	r1, [r3, #0]
 800fcc2:	f7f0 faad 	bl	8000220 <strcmp>
 800fcc6:	bb88      	cbnz	r0, 800fd2c <rmw_init_options_fini+0x84>
 800fcc8:	4b1c      	ldr	r3, [pc, #112]	@ (800fd3c <rmw_init_options_fini+0x94>)
 800fcca:	6819      	ldr	r1, [r3, #0]
 800fccc:	b351      	cbz	r1, 800fd24 <rmw_init_options_fini+0x7c>
 800fcce:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800fcd0:	e001      	b.n	800fcd6 <rmw_init_options_fini+0x2e>
 800fcd2:	6849      	ldr	r1, [r1, #4]
 800fcd4:	b331      	cbz	r1, 800fd24 <rmw_init_options_fini+0x7c>
 800fcd6:	688b      	ldr	r3, [r1, #8]
 800fcd8:	429a      	cmp	r2, r3
 800fcda:	d1fa      	bne.n	800fcd2 <rmw_init_options_fini+0x2a>
 800fcdc:	4817      	ldr	r0, [pc, #92]	@ (800fd3c <rmw_init_options_fini+0x94>)
 800fcde:	f008 fd1b 	bl	8018718 <put_memory>
 800fce2:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800fce4:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800fce6:	69e0      	ldr	r0, [r4, #28]
 800fce8:	4798      	blx	r3
 800fcea:	4668      	mov	r0, sp
 800fcec:	f7ff fed8 	bl	800faa0 <rmw_get_zero_initialized_init_options>
 800fcf0:	46ee      	mov	lr, sp
 800fcf2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800fcf6:	46a4      	mov	ip, r4
 800fcf8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800fcfc:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800fd00:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800fd04:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800fd08:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800fd0c:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800fd10:	e88c 0003 	stmia.w	ip, {r0, r1}
 800fd14:	2300      	movs	r3, #0
 800fd16:	4618      	mov	r0, r3
 800fd18:	b00e      	add	sp, #56	@ 0x38
 800fd1a:	bd10      	pop	{r4, pc}
 800fd1c:	230b      	movs	r3, #11
 800fd1e:	4618      	mov	r0, r3
 800fd20:	b00e      	add	sp, #56	@ 0x38
 800fd22:	bd10      	pop	{r4, pc}
 800fd24:	2301      	movs	r3, #1
 800fd26:	4618      	mov	r0, r3
 800fd28:	b00e      	add	sp, #56	@ 0x38
 800fd2a:	bd10      	pop	{r4, pc}
 800fd2c:	230c      	movs	r3, #12
 800fd2e:	e7f2      	b.n	800fd16 <rmw_init_options_fini+0x6e>
 800fd30:	230b      	movs	r3, #11
 800fd32:	4618      	mov	r0, r3
 800fd34:	4770      	bx	lr
 800fd36:	bf00      	nop
 800fd38:	0801eacc 	.word	0x0801eacc
 800fd3c:	2000b4d4 	.word	0x2000b4d4

0800fd40 <rmw_init>:
 800fd40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fd44:	b083      	sub	sp, #12
 800fd46:	2800      	cmp	r0, #0
 800fd48:	f000 80d3 	beq.w	800fef2 <rmw_init+0x1b2>
 800fd4c:	460e      	mov	r6, r1
 800fd4e:	2900      	cmp	r1, #0
 800fd50:	f000 80cf 	beq.w	800fef2 <rmw_init+0x1b2>
 800fd54:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800fd56:	4605      	mov	r5, r0
 800fd58:	2b00      	cmp	r3, #0
 800fd5a:	f000 80ca 	beq.w	800fef2 <rmw_init+0x1b2>
 800fd5e:	4b78      	ldr	r3, [pc, #480]	@ (800ff40 <rmw_init+0x200>)
 800fd60:	6880      	ldr	r0, [r0, #8]
 800fd62:	681f      	ldr	r7, [r3, #0]
 800fd64:	b128      	cbz	r0, 800fd72 <rmw_init+0x32>
 800fd66:	4639      	mov	r1, r7
 800fd68:	f7f0 fa5a 	bl	8000220 <strcmp>
 800fd6c:	2800      	cmp	r0, #0
 800fd6e:	f040 80ca 	bne.w	800ff06 <rmw_init+0x1c6>
 800fd72:	e9d5 2300 	ldrd	r2, r3, [r5]
 800fd76:	4c73      	ldr	r4, [pc, #460]	@ (800ff44 <rmw_init+0x204>)
 800fd78:	4973      	ldr	r1, [pc, #460]	@ (800ff48 <rmw_init+0x208>)
 800fd7a:	4874      	ldr	r0, [pc, #464]	@ (800ff4c <rmw_init+0x20c>)
 800fd7c:	60b7      	str	r7, [r6, #8]
 800fd7e:	e9c6 2300 	strd	r2, r3, [r6]
 800fd82:	68eb      	ldr	r3, [r5, #12]
 800fd84:	64b3      	str	r3, [r6, #72]	@ 0x48
 800fd86:	2201      	movs	r2, #1
 800fd88:	f000 fe68 	bl	8010a5c <rmw_uxrce_init_session_memory>
 800fd8c:	4620      	mov	r0, r4
 800fd8e:	4970      	ldr	r1, [pc, #448]	@ (800ff50 <rmw_init+0x210>)
 800fd90:	2204      	movs	r2, #4
 800fd92:	f000 fea3 	bl	8010adc <rmw_uxrce_init_static_input_buffer_memory>
 800fd96:	f04f 0800 	mov.w	r8, #0
 800fd9a:	486c      	ldr	r0, [pc, #432]	@ (800ff4c <rmw_init+0x20c>)
 800fd9c:	f884 800d 	strb.w	r8, [r4, #13]
 800fda0:	f008 fcaa 	bl	80186f8 <get_memory>
 800fda4:	2800      	cmp	r0, #0
 800fda6:	f000 80a9 	beq.w	800fefc <rmw_init+0x1bc>
 800fdaa:	6884      	ldr	r4, [r0, #8]
 800fdac:	6b68      	ldr	r0, [r5, #52]	@ 0x34
 800fdae:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 800fdb0:	f890 c010 	ldrb.w	ip, [r0, #16]
 800fdb4:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 800fdb8:	9101      	str	r1, [sp, #4]
 800fdba:	6a00      	ldr	r0, [r0, #32]
 800fdbc:	9000      	str	r0, [sp, #0]
 800fdbe:	f104 0910 	add.w	r9, r4, #16
 800fdc2:	4661      	mov	r1, ip
 800fdc4:	4648      	mov	r0, r9
 800fdc6:	f001 fe69 	bl	8011a9c <uxr_set_custom_transport_callbacks>
 800fdca:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
 800fdce:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800fdd2:	e9c4 22e3 	strd	r2, r2, [r4, #908]	@ 0x38c
 800fdd6:	f504 725e 	add.w	r2, r4, #888	@ 0x378
 800fdda:	e9c4 22e1 	strd	r2, r2, [r4, #900]	@ 0x384
 800fdde:	495d      	ldr	r1, [pc, #372]	@ (800ff54 <rmw_init+0x214>)
 800fde0:	f8c3 8594 	str.w	r8, [r3, #1428]	@ 0x594
 800fde4:	f8c3 8598 	str.w	r8, [r3, #1432]	@ 0x598
 800fde8:	f8c3 859c 	str.w	r8, [r3, #1436]	@ 0x59c
 800fdec:	f8c3 85a0 	str.w	r8, [r3, #1440]	@ 0x5a0
 800fdf0:	4859      	ldr	r0, [pc, #356]	@ (800ff58 <rmw_init+0x218>)
 800fdf2:	e9c4 78da 	strd	r7, r8, [r4, #872]	@ 0x368
 800fdf6:	2201      	movs	r2, #1
 800fdf8:	64f4      	str	r4, [r6, #76]	@ 0x4c
 800fdfa:	f000 fe0f 	bl	8010a1c <rmw_uxrce_init_node_memory>
 800fdfe:	4957      	ldr	r1, [pc, #348]	@ (800ff5c <rmw_init+0x21c>)
 800fe00:	4857      	ldr	r0, [pc, #348]	@ (800ff60 <rmw_init+0x220>)
 800fe02:	2205      	movs	r2, #5
 800fe04:	f000 fdea 	bl	80109dc <rmw_uxrce_init_subscription_memory>
 800fe08:	4956      	ldr	r1, [pc, #344]	@ (800ff64 <rmw_init+0x224>)
 800fe0a:	4857      	ldr	r0, [pc, #348]	@ (800ff68 <rmw_init+0x228>)
 800fe0c:	220a      	movs	r2, #10
 800fe0e:	f000 fdc5 	bl	801099c <rmw_uxrce_init_publisher_memory>
 800fe12:	4956      	ldr	r1, [pc, #344]	@ (800ff6c <rmw_init+0x22c>)
 800fe14:	4856      	ldr	r0, [pc, #344]	@ (800ff70 <rmw_init+0x230>)
 800fe16:	2201      	movs	r2, #1
 800fe18:	f000 fd80 	bl	801091c <rmw_uxrce_init_service_memory>
 800fe1c:	4955      	ldr	r1, [pc, #340]	@ (800ff74 <rmw_init+0x234>)
 800fe1e:	4856      	ldr	r0, [pc, #344]	@ (800ff78 <rmw_init+0x238>)
 800fe20:	2201      	movs	r2, #1
 800fe22:	f000 fd9b 	bl	801095c <rmw_uxrce_init_client_memory>
 800fe26:	4955      	ldr	r1, [pc, #340]	@ (800ff7c <rmw_init+0x23c>)
 800fe28:	4855      	ldr	r0, [pc, #340]	@ (800ff80 <rmw_init+0x240>)
 800fe2a:	220f      	movs	r2, #15
 800fe2c:	f000 fe36 	bl	8010a9c <rmw_uxrce_init_topic_memory>
 800fe30:	4954      	ldr	r1, [pc, #336]	@ (800ff84 <rmw_init+0x244>)
 800fe32:	4855      	ldr	r0, [pc, #340]	@ (800ff88 <rmw_init+0x248>)
 800fe34:	2203      	movs	r2, #3
 800fe36:	f000 fe71 	bl	8010b1c <rmw_uxrce_init_init_options_impl_memory>
 800fe3a:	4954      	ldr	r1, [pc, #336]	@ (800ff8c <rmw_init+0x24c>)
 800fe3c:	4854      	ldr	r0, [pc, #336]	@ (800ff90 <rmw_init+0x250>)
 800fe3e:	2204      	movs	r2, #4
 800fe40:	f000 fe8c 	bl	8010b5c <rmw_uxrce_init_wait_set_memory>
 800fe44:	4953      	ldr	r1, [pc, #332]	@ (800ff94 <rmw_init+0x254>)
 800fe46:	4854      	ldr	r0, [pc, #336]	@ (800ff98 <rmw_init+0x258>)
 800fe48:	2204      	movs	r2, #4
 800fe4a:	f000 fea7 	bl	8010b9c <rmw_uxrce_init_guard_condition_memory>
 800fe4e:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 800fe50:	6cf0      	ldr	r0, [r6, #76]	@ 0x4c
 800fe52:	4642      	mov	r2, r8
 800fe54:	f000 fd2a 	bl	80108ac <rmw_uxrce_transport_init>
 800fe58:	4607      	mov	r7, r0
 800fe5a:	2800      	cmp	r0, #0
 800fe5c:	d158      	bne.n	800ff10 <rmw_init+0x1d0>
 800fe5e:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 800fe60:	f504 7528 	add.w	r5, r4, #672	@ 0x2a0
 800fe64:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800fe66:	f504 7122 	add.w	r1, r4, #648	@ 0x288
 800fe6a:	4628      	mov	r0, r5
 800fe6c:	f002 f84c 	bl	8011f08 <uxr_init_session>
 800fe70:	494a      	ldr	r1, [pc, #296]	@ (800ff9c <rmw_init+0x25c>)
 800fe72:	4622      	mov	r2, r4
 800fe74:	4628      	mov	r0, r5
 800fe76:	f002 f86b 	bl	8011f50 <uxr_set_topic_callback>
 800fe7a:	4949      	ldr	r1, [pc, #292]	@ (800ffa0 <rmw_init+0x260>)
 800fe7c:	463a      	mov	r2, r7
 800fe7e:	4628      	mov	r0, r5
 800fe80:	f002 f862 	bl	8011f48 <uxr_set_status_callback>
 800fe84:	4947      	ldr	r1, [pc, #284]	@ (800ffa4 <rmw_init+0x264>)
 800fe86:	463a      	mov	r2, r7
 800fe88:	4628      	mov	r0, r5
 800fe8a:	f002 f865 	bl	8011f58 <uxr_set_request_callback>
 800fe8e:	4946      	ldr	r1, [pc, #280]	@ (800ffa8 <rmw_init+0x268>)
 800fe90:	463a      	mov	r2, r7
 800fe92:	4628      	mov	r0, r5
 800fe94:	f002 f864 	bl	8011f60 <uxr_set_reply_callback>
 800fe98:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 800fe9c:	2304      	movs	r3, #4
 800fe9e:	0092      	lsls	r2, r2, #2
 800fea0:	f504 7165 	add.w	r1, r4, #916	@ 0x394
 800fea4:	4628      	mov	r0, r5
 800fea6:	f002 f899 	bl	8011fdc <uxr_create_input_reliable_stream>
 800feaa:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 800feae:	f8c4 0374 	str.w	r0, [r4, #884]	@ 0x374
 800feb2:	0092      	lsls	r2, r2, #2
 800feb4:	2304      	movs	r3, #4
 800feb6:	f604 3194 	addw	r1, r4, #2964	@ 0xb94
 800feba:	4628      	mov	r0, r5
 800febc:	f002 f866 	bl	8011f8c <uxr_create_output_reliable_stream>
 800fec0:	f8c4 0378 	str.w	r0, [r4, #888]	@ 0x378
 800fec4:	4628      	mov	r0, r5
 800fec6:	f002 f883 	bl	8011fd0 <uxr_create_input_best_effort_stream>
 800feca:	f504 519c 	add.w	r1, r4, #4992	@ 0x1380
 800fece:	f8c4 0380 	str.w	r0, [r4, #896]	@ 0x380
 800fed2:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 800fed6:	3114      	adds	r1, #20
 800fed8:	4628      	mov	r0, r5
 800feda:	f002 f845 	bl	8011f68 <uxr_create_output_best_effort_stream>
 800fede:	f8c4 037c 	str.w	r0, [r4, #892]	@ 0x37c
 800fee2:	4628      	mov	r0, r5
 800fee4:	f002 fe24 	bl	8012b30 <uxr_create_session>
 800fee8:	b1f8      	cbz	r0, 800ff2a <rmw_init+0x1ea>
 800feea:	4638      	mov	r0, r7
 800feec:	b003      	add	sp, #12
 800feee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fef2:	270b      	movs	r7, #11
 800fef4:	4638      	mov	r0, r7
 800fef6:	b003      	add	sp, #12
 800fef8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fefc:	2701      	movs	r7, #1
 800fefe:	4638      	mov	r0, r7
 800ff00:	b003      	add	sp, #12
 800ff02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ff06:	270c      	movs	r7, #12
 800ff08:	4638      	mov	r0, r7
 800ff0a:	b003      	add	sp, #12
 800ff0c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ff10:	4648      	mov	r0, r9
 800ff12:	f001 fe05 	bl	8011b20 <uxr_close_custom_transport>
 800ff16:	480d      	ldr	r0, [pc, #52]	@ (800ff4c <rmw_init+0x20c>)
 800ff18:	4621      	mov	r1, r4
 800ff1a:	f008 fbfd 	bl	8018718 <put_memory>
 800ff1e:	4638      	mov	r0, r7
 800ff20:	f8c6 804c 	str.w	r8, [r6, #76]	@ 0x4c
 800ff24:	b003      	add	sp, #12
 800ff26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ff2a:	4648      	mov	r0, r9
 800ff2c:	f001 fdf8 	bl	8011b20 <uxr_close_custom_transport>
 800ff30:	4806      	ldr	r0, [pc, #24]	@ (800ff4c <rmw_init+0x20c>)
 800ff32:	4621      	mov	r1, r4
 800ff34:	f008 fbf0 	bl	8018718 <put_memory>
 800ff38:	64f7      	str	r7, [r6, #76]	@ 0x4c
 800ff3a:	2701      	movs	r7, #1
 800ff3c:	e7d5      	b.n	800feea <rmw_init+0x1aa>
 800ff3e:	bf00      	nop
 800ff40:	0801eacc 	.word	0x0801eacc
 800ff44:	2000b524 	.word	0x2000b524
 800ff48:	200077d0 	.word	0x200077d0
 800ff4c:	2000b514 	.word	0x2000b514
 800ff50:	20008d78 	.word	0x20008d78
 800ff54:	20006df4 	.word	0x20006df4
 800ff58:	2000b4e4 	.word	0x2000b4e4
 800ff5c:	2000ae78 	.word	0x2000ae78
 800ff60:	2000b534 	.word	0x2000b534
 800ff64:	20006e98 	.word	0x20006e98
 800ff68:	2000b4f4 	.word	0x2000b4f4
 800ff6c:	20007708 	.word	0x20007708
 800ff70:	2000b504 	.word	0x2000b504
 800ff74:	20006c28 	.word	0x20006c28
 800ff78:	20006c14 	.word	0x20006c14
 800ff7c:	2000b2b0 	.word	0x2000b2b0
 800ff80:	2000b544 	.word	0x2000b544
 800ff84:	20006d70 	.word	0x20006d70
 800ff88:	2000b4d4 	.word	0x2000b4d4
 800ff8c:	2000b454 	.word	0x2000b454
 800ff90:	2000b554 	.word	0x2000b554
 800ff94:	20006cf0 	.word	0x20006cf0
 800ff98:	2000b4c4 	.word	0x2000b4c4
 800ff9c:	08018531 	.word	0x08018531
 800ffa0:	08018529 	.word	0x08018529
 800ffa4:	080185c9 	.word	0x080185c9
 800ffa8:	08018665 	.word	0x08018665

0800ffac <rmw_context_fini>:
 800ffac:	4b17      	ldr	r3, [pc, #92]	@ (801000c <rmw_context_fini+0x60>)
 800ffae:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 800ffb0:	b570      	push	{r4, r5, r6, lr}
 800ffb2:	681c      	ldr	r4, [r3, #0]
 800ffb4:	4605      	mov	r5, r0
 800ffb6:	b334      	cbz	r4, 8010006 <rmw_context_fini+0x5a>
 800ffb8:	2600      	movs	r6, #0
 800ffba:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 800ffbe:	6902      	ldr	r2, [r0, #16]
 800ffc0:	428a      	cmp	r2, r1
 800ffc2:	d018      	beq.n	800fff6 <rmw_context_fini+0x4a>
 800ffc4:	2c00      	cmp	r4, #0
 800ffc6:	d1f8      	bne.n	800ffba <rmw_context_fini+0xe>
 800ffc8:	b189      	cbz	r1, 800ffee <rmw_context_fini+0x42>
 800ffca:	f8d1 3388 	ldr.w	r3, [r1, #904]	@ 0x388
 800ffce:	789b      	ldrb	r3, [r3, #2]
 800ffd0:	2b01      	cmp	r3, #1
 800ffd2:	f501 7028 	add.w	r0, r1, #672	@ 0x2a0
 800ffd6:	bf14      	ite	ne
 800ffd8:	210a      	movne	r1, #10
 800ffda:	2100      	moveq	r1, #0
 800ffdc:	f002 fd80 	bl	8012ae0 <uxr_delete_session_retries>
 800ffe0:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 800ffe2:	f000 fdfb 	bl	8010bdc <rmw_uxrce_fini_session_memory>
 800ffe6:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 800ffe8:	3010      	adds	r0, #16
 800ffea:	f001 fd99 	bl	8011b20 <uxr_close_custom_transport>
 800ffee:	2300      	movs	r3, #0
 800fff0:	64eb      	str	r3, [r5, #76]	@ 0x4c
 800fff2:	4630      	mov	r0, r6
 800fff4:	bd70      	pop	{r4, r5, r6, pc}
 800fff6:	3018      	adds	r0, #24
 800fff8:	f000 f89c 	bl	8010134 <rmw_destroy_node>
 800fffc:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800fffe:	4606      	mov	r6, r0
 8010000:	2c00      	cmp	r4, #0
 8010002:	d1da      	bne.n	800ffba <rmw_context_fini+0xe>
 8010004:	e7e0      	b.n	800ffc8 <rmw_context_fini+0x1c>
 8010006:	4626      	mov	r6, r4
 8010008:	e7de      	b.n	800ffc8 <rmw_context_fini+0x1c>
 801000a:	bf00      	nop
 801000c:	2000b4e4 	.word	0x2000b4e4

08010010 <create_node>:
 8010010:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010014:	b083      	sub	sp, #12
 8010016:	2b00      	cmp	r3, #0
 8010018:	d05f      	beq.n	80100da <create_node+0xca>
 801001a:	4606      	mov	r6, r0
 801001c:	4835      	ldr	r0, [pc, #212]	@ (80100f4 <create_node+0xe4>)
 801001e:	460f      	mov	r7, r1
 8010020:	4690      	mov	r8, r2
 8010022:	461d      	mov	r5, r3
 8010024:	f008 fb68 	bl	80186f8 <get_memory>
 8010028:	2800      	cmp	r0, #0
 801002a:	d056      	beq.n	80100da <create_node+0xca>
 801002c:	6884      	ldr	r4, [r0, #8]
 801002e:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8010030:	6123      	str	r3, [r4, #16]
 8010032:	f008 fbc9 	bl	80187c8 <rmw_get_implementation_identifier>
 8010036:	f104 092c 	add.w	r9, r4, #44	@ 0x2c
 801003a:	e9c4 0406 	strd	r0, r4, [r4, #24]
 801003e:	f8c4 9020 	str.w	r9, [r4, #32]
 8010042:	4630      	mov	r0, r6
 8010044:	f7f0 f8f6 	bl	8000234 <strlen>
 8010048:	1c42      	adds	r2, r0, #1
 801004a:	2a3c      	cmp	r2, #60	@ 0x3c
 801004c:	f104 0518 	add.w	r5, r4, #24
 8010050:	d840      	bhi.n	80100d4 <create_node+0xc4>
 8010052:	4648      	mov	r0, r9
 8010054:	4631      	mov	r1, r6
 8010056:	f104 0968 	add.w	r9, r4, #104	@ 0x68
 801005a:	f00b fa50 	bl	801b4fe <memcpy>
 801005e:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
 8010062:	4638      	mov	r0, r7
 8010064:	f7f0 f8e6 	bl	8000234 <strlen>
 8010068:	1c42      	adds	r2, r0, #1
 801006a:	2a3c      	cmp	r2, #60	@ 0x3c
 801006c:	d832      	bhi.n	80100d4 <create_node+0xc4>
 801006e:	4639      	mov	r1, r7
 8010070:	4648      	mov	r0, r9
 8010072:	f00b fa44 	bl	801b4fe <memcpy>
 8010076:	6923      	ldr	r3, [r4, #16]
 8010078:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801007c:	2101      	movs	r1, #1
 801007e:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	@ 0x594
 8010082:	1842      	adds	r2, r0, r1
 8010084:	f8a3 2594 	strh.w	r2, [r3, #1428]	@ 0x594
 8010088:	f001 fd4e 	bl	8011b28 <uxr_object_id>
 801008c:	6160      	str	r0, [r4, #20]
 801008e:	783b      	ldrb	r3, [r7, #0]
 8010090:	2b2f      	cmp	r3, #47	@ 0x2f
 8010092:	d127      	bne.n	80100e4 <create_node+0xd4>
 8010094:	787b      	ldrb	r3, [r7, #1]
 8010096:	bb2b      	cbnz	r3, 80100e4 <create_node+0xd4>
 8010098:	4a17      	ldr	r2, [pc, #92]	@ (80100f8 <create_node+0xe8>)
 801009a:	4818      	ldr	r0, [pc, #96]	@ (80100fc <create_node+0xec>)
 801009c:	4633      	mov	r3, r6
 801009e:	213c      	movs	r1, #60	@ 0x3c
 80100a0:	f00a fff0 	bl	801b084 <sniprintf>
 80100a4:	6920      	ldr	r0, [r4, #16]
 80100a6:	4915      	ldr	r1, [pc, #84]	@ (80100fc <create_node+0xec>)
 80100a8:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 80100ac:	9100      	str	r1, [sp, #0]
 80100ae:	2106      	movs	r1, #6
 80100b0:	9101      	str	r1, [sp, #4]
 80100b2:	6811      	ldr	r1, [r2, #0]
 80100b4:	6962      	ldr	r2, [r4, #20]
 80100b6:	fa1f f388 	uxth.w	r3, r8
 80100ba:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80100be:	f001 fabb 	bl	8011638 <uxr_buffer_create_participant_bin>
 80100c2:	4602      	mov	r2, r0
 80100c4:	6920      	ldr	r0, [r4, #16]
 80100c6:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 80100ca:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 80100ce:	f000 fefd 	bl	8010ecc <run_xrce_session>
 80100d2:	b918      	cbnz	r0, 80100dc <create_node+0xcc>
 80100d4:	4628      	mov	r0, r5
 80100d6:	f000 fd87 	bl	8010be8 <rmw_uxrce_fini_node_memory>
 80100da:	2500      	movs	r5, #0
 80100dc:	4628      	mov	r0, r5
 80100de:	b003      	add	sp, #12
 80100e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80100e4:	4a06      	ldr	r2, [pc, #24]	@ (8010100 <create_node+0xf0>)
 80100e6:	9600      	str	r6, [sp, #0]
 80100e8:	463b      	mov	r3, r7
 80100ea:	213c      	movs	r1, #60	@ 0x3c
 80100ec:	4803      	ldr	r0, [pc, #12]	@ (80100fc <create_node+0xec>)
 80100ee:	f00a ffc9 	bl	801b084 <sniprintf>
 80100f2:	e7d7      	b.n	80100a4 <create_node+0x94>
 80100f4:	2000b4e4 	.word	0x2000b4e4
 80100f8:	0801defc 	.word	0x0801defc
 80100fc:	20006bd8 	.word	0x20006bd8
 8010100:	0801dee4 	.word	0x0801dee4

08010104 <rmw_create_node>:
 8010104:	b199      	cbz	r1, 801012e <rmw_create_node+0x2a>
 8010106:	780b      	ldrb	r3, [r1, #0]
 8010108:	468c      	mov	ip, r1
 801010a:	b183      	cbz	r3, 801012e <rmw_create_node+0x2a>
 801010c:	b410      	push	{r4}
 801010e:	4614      	mov	r4, r2
 8010110:	b14a      	cbz	r2, 8010126 <rmw_create_node+0x22>
 8010112:	7813      	ldrb	r3, [r2, #0]
 8010114:	b13b      	cbz	r3, 8010126 <rmw_create_node+0x22>
 8010116:	6c82      	ldr	r2, [r0, #72]	@ 0x48
 8010118:	4603      	mov	r3, r0
 801011a:	4621      	mov	r1, r4
 801011c:	4660      	mov	r0, ip
 801011e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010122:	f7ff bf75 	b.w	8010010 <create_node>
 8010126:	2000      	movs	r0, #0
 8010128:	f85d 4b04 	ldr.w	r4, [sp], #4
 801012c:	4770      	bx	lr
 801012e:	2000      	movs	r0, #0
 8010130:	4770      	bx	lr
 8010132:	bf00      	nop

08010134 <rmw_destroy_node>:
 8010134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010136:	b328      	cbz	r0, 8010184 <rmw_destroy_node+0x50>
 8010138:	4607      	mov	r7, r0
 801013a:	6800      	ldr	r0, [r0, #0]
 801013c:	b120      	cbz	r0, 8010148 <rmw_destroy_node+0x14>
 801013e:	4b36      	ldr	r3, [pc, #216]	@ (8010218 <rmw_destroy_node+0xe4>)
 8010140:	6819      	ldr	r1, [r3, #0]
 8010142:	f7f0 f86d 	bl	8000220 <strcmp>
 8010146:	b9e8      	cbnz	r0, 8010184 <rmw_destroy_node+0x50>
 8010148:	687d      	ldr	r5, [r7, #4]
 801014a:	b1dd      	cbz	r5, 8010184 <rmw_destroy_node+0x50>
 801014c:	4b33      	ldr	r3, [pc, #204]	@ (801021c <rmw_destroy_node+0xe8>)
 801014e:	681c      	ldr	r4, [r3, #0]
 8010150:	2c00      	cmp	r4, #0
 8010152:	d05f      	beq.n	8010214 <rmw_destroy_node+0xe0>
 8010154:	2600      	movs	r6, #0
 8010156:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 801015a:	f8d1 3080 	ldr.w	r3, [r1, #128]	@ 0x80
 801015e:	429d      	cmp	r5, r3
 8010160:	d013      	beq.n	801018a <rmw_destroy_node+0x56>
 8010162:	2c00      	cmp	r4, #0
 8010164:	d1f7      	bne.n	8010156 <rmw_destroy_node+0x22>
 8010166:	4b2e      	ldr	r3, [pc, #184]	@ (8010220 <rmw_destroy_node+0xec>)
 8010168:	681c      	ldr	r4, [r3, #0]
 801016a:	b1c4      	cbz	r4, 801019e <rmw_destroy_node+0x6a>
 801016c:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8010170:	6a0b      	ldr	r3, [r1, #32]
 8010172:	429d      	cmp	r5, r3
 8010174:	d1f9      	bne.n	801016a <rmw_destroy_node+0x36>
 8010176:	317c      	adds	r1, #124	@ 0x7c
 8010178:	4638      	mov	r0, r7
 801017a:	f000 fb37 	bl	80107ec <rmw_destroy_subscription>
 801017e:	2801      	cmp	r0, #1
 8010180:	4606      	mov	r6, r0
 8010182:	d1f2      	bne.n	801016a <rmw_destroy_node+0x36>
 8010184:	2601      	movs	r6, #1
 8010186:	4630      	mov	r0, r6
 8010188:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801018a:	3184      	adds	r1, #132	@ 0x84
 801018c:	4638      	mov	r0, r7
 801018e:	f000 f9a5 	bl	80104dc <rmw_destroy_publisher>
 8010192:	2801      	cmp	r0, #1
 8010194:	4606      	mov	r6, r0
 8010196:	d0f5      	beq.n	8010184 <rmw_destroy_node+0x50>
 8010198:	2c00      	cmp	r4, #0
 801019a:	d1dc      	bne.n	8010156 <rmw_destroy_node+0x22>
 801019c:	e7e3      	b.n	8010166 <rmw_destroy_node+0x32>
 801019e:	4b21      	ldr	r3, [pc, #132]	@ (8010224 <rmw_destroy_node+0xf0>)
 80101a0:	681c      	ldr	r4, [r3, #0]
 80101a2:	b16c      	cbz	r4, 80101c0 <rmw_destroy_node+0x8c>
 80101a4:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 80101a8:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 80101aa:	429d      	cmp	r5, r3
 80101ac:	d1f9      	bne.n	80101a2 <rmw_destroy_node+0x6e>
 80101ae:	317c      	adds	r1, #124	@ 0x7c
 80101b0:	4638      	mov	r0, r7
 80101b2:	f000 f9e5 	bl	8010580 <rmw_destroy_service>
 80101b6:	2801      	cmp	r0, #1
 80101b8:	4606      	mov	r6, r0
 80101ba:	d0e3      	beq.n	8010184 <rmw_destroy_node+0x50>
 80101bc:	2c00      	cmp	r4, #0
 80101be:	d1f1      	bne.n	80101a4 <rmw_destroy_node+0x70>
 80101c0:	4b19      	ldr	r3, [pc, #100]	@ (8010228 <rmw_destroy_node+0xf4>)
 80101c2:	681c      	ldr	r4, [r3, #0]
 80101c4:	b16c      	cbz	r4, 80101e2 <rmw_destroy_node+0xae>
 80101c6:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 80101ca:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 80101cc:	429d      	cmp	r5, r3
 80101ce:	d1f9      	bne.n	80101c4 <rmw_destroy_node+0x90>
 80101d0:	317c      	adds	r1, #124	@ 0x7c
 80101d2:	4638      	mov	r0, r7
 80101d4:	f008 fab4 	bl	8018740 <rmw_destroy_client>
 80101d8:	2801      	cmp	r0, #1
 80101da:	4606      	mov	r6, r0
 80101dc:	d0d2      	beq.n	8010184 <rmw_destroy_node+0x50>
 80101de:	2c00      	cmp	r4, #0
 80101e0:	d1f1      	bne.n	80101c6 <rmw_destroy_node+0x92>
 80101e2:	6928      	ldr	r0, [r5, #16]
 80101e4:	696a      	ldr	r2, [r5, #20]
 80101e6:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80101ea:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80101ee:	6819      	ldr	r1, [r3, #0]
 80101f0:	f001 f9d6 	bl	80115a0 <uxr_buffer_delete_entity>
 80101f4:	4602      	mov	r2, r0
 80101f6:	6928      	ldr	r0, [r5, #16]
 80101f8:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80101fc:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8010200:	f000 fe64 	bl	8010ecc <run_xrce_session>
 8010204:	2800      	cmp	r0, #0
 8010206:	bf08      	it	eq
 8010208:	2602      	moveq	r6, #2
 801020a:	4638      	mov	r0, r7
 801020c:	f000 fcec 	bl	8010be8 <rmw_uxrce_fini_node_memory>
 8010210:	4630      	mov	r0, r6
 8010212:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010214:	4626      	mov	r6, r4
 8010216:	e7a6      	b.n	8010166 <rmw_destroy_node+0x32>
 8010218:	0801eacc 	.word	0x0801eacc
 801021c:	2000b4f4 	.word	0x2000b4f4
 8010220:	2000b534 	.word	0x2000b534
 8010224:	2000b504 	.word	0x2000b504
 8010228:	20006c14 	.word	0x20006c14

0801022c <rmw_node_get_graph_guard_condition>:
 801022c:	6843      	ldr	r3, [r0, #4]
 801022e:	6918      	ldr	r0, [r3, #16]
 8010230:	f500 705a 	add.w	r0, r0, #872	@ 0x368
 8010234:	4770      	bx	lr
 8010236:	bf00      	nop

08010238 <flush_session>:
 8010238:	6fc9      	ldr	r1, [r1, #124]	@ 0x7c
 801023a:	f002 bab5 	b.w	80127a8 <uxr_run_session_until_confirm_delivery>
 801023e:	bf00      	nop

08010240 <rmw_publish>:
 8010240:	2800      	cmp	r0, #0
 8010242:	d053      	beq.n	80102ec <rmw_publish+0xac>
 8010244:	b570      	push	{r4, r5, r6, lr}
 8010246:	460d      	mov	r5, r1
 8010248:	b08e      	sub	sp, #56	@ 0x38
 801024a:	2900      	cmp	r1, #0
 801024c:	d04b      	beq.n	80102e6 <rmw_publish+0xa6>
 801024e:	4604      	mov	r4, r0
 8010250:	6800      	ldr	r0, [r0, #0]
 8010252:	f000 febb 	bl	8010fcc <is_uxrce_rmw_identifier_valid>
 8010256:	2800      	cmp	r0, #0
 8010258:	d045      	beq.n	80102e6 <rmw_publish+0xa6>
 801025a:	6866      	ldr	r6, [r4, #4]
 801025c:	2e00      	cmp	r6, #0
 801025e:	d042      	beq.n	80102e6 <rmw_publish+0xa6>
 8010260:	69b4      	ldr	r4, [r6, #24]
 8010262:	4628      	mov	r0, r5
 8010264:	6923      	ldr	r3, [r4, #16]
 8010266:	4798      	blx	r3
 8010268:	69f3      	ldr	r3, [r6, #28]
 801026a:	9005      	str	r0, [sp, #20]
 801026c:	b113      	cbz	r3, 8010274 <rmw_publish+0x34>
 801026e:	a805      	add	r0, sp, #20
 8010270:	4798      	blx	r3
 8010272:	9805      	ldr	r0, [sp, #20]
 8010274:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 8010278:	691b      	ldr	r3, [r3, #16]
 801027a:	9000      	str	r0, [sp, #0]
 801027c:	6972      	ldr	r2, [r6, #20]
 801027e:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 8010280:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 8010284:	ab06      	add	r3, sp, #24
 8010286:	f003 fd61 	bl	8013d4c <uxr_prepare_output_stream>
 801028a:	b1d8      	cbz	r0, 80102c4 <rmw_publish+0x84>
 801028c:	68a3      	ldr	r3, [r4, #8]
 801028e:	a906      	add	r1, sp, #24
 8010290:	4628      	mov	r0, r5
 8010292:	4798      	blx	r3
 8010294:	6a33      	ldr	r3, [r6, #32]
 8010296:	4604      	mov	r4, r0
 8010298:	b10b      	cbz	r3, 801029e <rmw_publish+0x5e>
 801029a:	a806      	add	r0, sp, #24
 801029c:	4798      	blx	r3
 801029e:	f896 307a 	ldrb.w	r3, [r6, #122]	@ 0x7a
 80102a2:	2b01      	cmp	r3, #1
 80102a4:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 80102a8:	d022      	beq.n	80102f0 <rmw_publish+0xb0>
 80102aa:	6918      	ldr	r0, [r3, #16]
 80102ac:	6ff1      	ldr	r1, [r6, #124]	@ 0x7c
 80102ae:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80102b2:	f002 fa79 	bl	80127a8 <uxr_run_session_until_confirm_delivery>
 80102b6:	4020      	ands	r0, r4
 80102b8:	b2c4      	uxtb	r4, r0
 80102ba:	f084 0001 	eor.w	r0, r4, #1
 80102be:	b2c0      	uxtb	r0, r0
 80102c0:	b00e      	add	sp, #56	@ 0x38
 80102c2:	bd70      	pop	{r4, r5, r6, pc}
 80102c4:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 80102c8:	6918      	ldr	r0, [r3, #16]
 80102ca:	9b05      	ldr	r3, [sp, #20]
 80102cc:	9300      	str	r3, [sp, #0]
 80102ce:	4b0b      	ldr	r3, [pc, #44]	@ (80102fc <rmw_publish+0xbc>)
 80102d0:	9301      	str	r3, [sp, #4]
 80102d2:	9602      	str	r6, [sp, #8]
 80102d4:	6972      	ldr	r2, [r6, #20]
 80102d6:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 80102d8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80102dc:	ab06      	add	r3, sp, #24
 80102de:	f003 fd65 	bl	8013dac <uxr_prepare_output_stream_fragmented>
 80102e2:	2800      	cmp	r0, #0
 80102e4:	d1d2      	bne.n	801028c <rmw_publish+0x4c>
 80102e6:	2001      	movs	r0, #1
 80102e8:	b00e      	add	sp, #56	@ 0x38
 80102ea:	bd70      	pop	{r4, r5, r6, pc}
 80102ec:	2001      	movs	r0, #1
 80102ee:	4770      	bx	lr
 80102f0:	6918      	ldr	r0, [r3, #16]
 80102f2:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80102f6:	f001 fe97 	bl	8012028 <uxr_flash_output_streams>
 80102fa:	e7de      	b.n	80102ba <rmw_publish+0x7a>
 80102fc:	08010239 	.word	0x08010239

08010300 <rmw_create_publisher>:
 8010300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010304:	b087      	sub	sp, #28
 8010306:	2800      	cmp	r0, #0
 8010308:	f000 80cc 	beq.w	80104a4 <rmw_create_publisher+0x1a4>
 801030c:	460e      	mov	r6, r1
 801030e:	2900      	cmp	r1, #0
 8010310:	f000 80c8 	beq.w	80104a4 <rmw_create_publisher+0x1a4>
 8010314:	4604      	mov	r4, r0
 8010316:	6800      	ldr	r0, [r0, #0]
 8010318:	4615      	mov	r5, r2
 801031a:	4698      	mov	r8, r3
 801031c:	f000 fe56 	bl	8010fcc <is_uxrce_rmw_identifier_valid>
 8010320:	2800      	cmp	r0, #0
 8010322:	f000 80bf 	beq.w	80104a4 <rmw_create_publisher+0x1a4>
 8010326:	2d00      	cmp	r5, #0
 8010328:	f000 80bc 	beq.w	80104a4 <rmw_create_publisher+0x1a4>
 801032c:	782b      	ldrb	r3, [r5, #0]
 801032e:	2b00      	cmp	r3, #0
 8010330:	f000 80b8 	beq.w	80104a4 <rmw_create_publisher+0x1a4>
 8010334:	f1b8 0f00 	cmp.w	r8, #0
 8010338:	f000 80b4 	beq.w	80104a4 <rmw_create_publisher+0x1a4>
 801033c:	485c      	ldr	r0, [pc, #368]	@ (80104b0 <rmw_create_publisher+0x1b0>)
 801033e:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8010342:	f008 f9d9 	bl	80186f8 <get_memory>
 8010346:	2800      	cmp	r0, #0
 8010348:	f000 80ac 	beq.w	80104a4 <rmw_create_publisher+0x1a4>
 801034c:	6884      	ldr	r4, [r0, #8]
 801034e:	f8c4 4088 	str.w	r4, [r4, #136]	@ 0x88
 8010352:	f008 fa39 	bl	80187c8 <rmw_get_implementation_identifier>
 8010356:	f104 0a9c 	add.w	sl, r4, #156	@ 0x9c
 801035a:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
 801035e:	f8c4 a08c 	str.w	sl, [r4, #140]	@ 0x8c
 8010362:	4628      	mov	r0, r5
 8010364:	f7ef ff66 	bl	8000234 <strlen>
 8010368:	3001      	adds	r0, #1
 801036a:	283c      	cmp	r0, #60	@ 0x3c
 801036c:	f104 0784 	add.w	r7, r4, #132	@ 0x84
 8010370:	f200 8091 	bhi.w	8010496 <rmw_create_publisher+0x196>
 8010374:	4a4f      	ldr	r2, [pc, #316]	@ (80104b4 <rmw_create_publisher+0x1b4>)
 8010376:	462b      	mov	r3, r5
 8010378:	213c      	movs	r1, #60	@ 0x3c
 801037a:	4650      	mov	r0, sl
 801037c:	f00a fe82 	bl	801b084 <sniprintf>
 8010380:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8010384:	67e3      	str	r3, [r4, #124]	@ 0x7c
 8010386:	4641      	mov	r1, r8
 8010388:	f8c4 9080 	str.w	r9, [r4, #128]	@ 0x80
 801038c:	2250      	movs	r2, #80	@ 0x50
 801038e:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8010392:	f00b f8b4 	bl	801b4fe <memcpy>
 8010396:	f898 3008 	ldrb.w	r3, [r8, #8]
 801039a:	4947      	ldr	r1, [pc, #284]	@ (80104b8 <rmw_create_publisher+0x1b8>)
 801039c:	2b02      	cmp	r3, #2
 801039e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80103a2:	bf0c      	ite	eq
 80103a4:	f8d3 337c 	ldreq.w	r3, [r3, #892]	@ 0x37c
 80103a8:	f8d3 3378 	ldrne.w	r3, [r3, #888]	@ 0x378
 80103ac:	67a3      	str	r3, [r4, #120]	@ 0x78
 80103ae:	2300      	movs	r3, #0
 80103b0:	e9c4 3307 	strd	r3, r3, [r4, #28]
 80103b4:	4630      	mov	r0, r6
 80103b6:	f000 fe17 	bl	8010fe8 <get_message_typesupport_handle>
 80103ba:	2800      	cmp	r0, #0
 80103bc:	d06b      	beq.n	8010496 <rmw_create_publisher+0x196>
 80103be:	6842      	ldr	r2, [r0, #4]
 80103c0:	61a2      	str	r2, [r4, #24]
 80103c2:	2a00      	cmp	r2, #0
 80103c4:	d067      	beq.n	8010496 <rmw_create_publisher+0x196>
 80103c6:	4629      	mov	r1, r5
 80103c8:	4643      	mov	r3, r8
 80103ca:	4648      	mov	r0, r9
 80103cc:	f008 fa02 	bl	80187d4 <create_topic>
 80103d0:	6260      	str	r0, [r4, #36]	@ 0x24
 80103d2:	2800      	cmp	r0, #0
 80103d4:	d063      	beq.n	801049e <rmw_create_publisher+0x19e>
 80103d6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80103da:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80103de:	2103      	movs	r1, #3
 80103e0:	f8b3 0598 	ldrh.w	r0, [r3, #1432]	@ 0x598
 80103e4:	1c42      	adds	r2, r0, #1
 80103e6:	f8a3 2598 	strh.w	r2, [r3, #1432]	@ 0x598
 80103ea:	f001 fb9d 	bl	8011b28 <uxr_object_id>
 80103ee:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 80103f2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80103f6:	6120      	str	r0, [r4, #16]
 80103f8:	f8d3 3384 	ldr.w	r3, [r3, #900]	@ 0x384
 80103fc:	6910      	ldr	r0, [r2, #16]
 80103fe:	2506      	movs	r5, #6
 8010400:	9500      	str	r5, [sp, #0]
 8010402:	6819      	ldr	r1, [r3, #0]
 8010404:	6922      	ldr	r2, [r4, #16]
 8010406:	f8d9 3014 	ldr.w	r3, [r9, #20]
 801040a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801040e:	f001 f97b 	bl	8011708 <uxr_buffer_create_publisher_bin>
 8010412:	4602      	mov	r2, r0
 8010414:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8010418:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 801041c:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8010420:	f000 fd54 	bl	8010ecc <run_xrce_session>
 8010424:	b3b8      	cbz	r0, 8010496 <rmw_create_publisher+0x196>
 8010426:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801042a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801042e:	2105      	movs	r1, #5
 8010430:	f8b3 059a 	ldrh.w	r0, [r3, #1434]	@ 0x59a
 8010434:	1c42      	adds	r2, r0, #1
 8010436:	f8a3 259a 	strh.w	r2, [r3, #1434]	@ 0x59a
 801043a:	f001 fb75 	bl	8011b28 <uxr_object_id>
 801043e:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 8010442:	6160      	str	r0, [r4, #20]
 8010444:	691e      	ldr	r6, [r3, #16]
 8010446:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801044a:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
 801044e:	f10d 0a10 	add.w	sl, sp, #16
 8010452:	4641      	mov	r1, r8
 8010454:	4650      	mov	r0, sl
 8010456:	f8d3 8384 	ldr.w	r8, [r3, #900]	@ 0x384
 801045a:	f000 fd53 	bl	8010f04 <convert_qos_profile>
 801045e:	9503      	str	r5, [sp, #12]
 8010460:	e89a 0003 	ldmia.w	sl, {r0, r1}
 8010464:	9001      	str	r0, [sp, #4]
 8010466:	f8ad 1008 	strh.w	r1, [sp, #8]
 801046a:	f8db 3010 	ldr.w	r3, [fp, #16]
 801046e:	9300      	str	r3, [sp, #0]
 8010470:	f506 7628 	add.w	r6, r6, #672	@ 0x2a0
 8010474:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 8010478:	f8d8 1000 	ldr.w	r1, [r8]
 801047c:	4630      	mov	r0, r6
 801047e:	f001 f9a3 	bl	80117c8 <uxr_buffer_create_datawriter_bin>
 8010482:	4602      	mov	r2, r0
 8010484:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8010488:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 801048c:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8010490:	f000 fd1c 	bl	8010ecc <run_xrce_session>
 8010494:	b938      	cbnz	r0, 80104a6 <rmw_create_publisher+0x1a6>
 8010496:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8010498:	b108      	cbz	r0, 801049e <rmw_create_publisher+0x19e>
 801049a:	f000 fc15 	bl	8010cc8 <rmw_uxrce_fini_topic_memory>
 801049e:	4638      	mov	r0, r7
 80104a0:	f000 fbba 	bl	8010c18 <rmw_uxrce_fini_publisher_memory>
 80104a4:	2700      	movs	r7, #0
 80104a6:	4638      	mov	r0, r7
 80104a8:	b007      	add	sp, #28
 80104aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80104ae:	bf00      	nop
 80104b0:	2000b4f4 	.word	0x2000b4f4
 80104b4:	0801defc 	.word	0x0801defc
 80104b8:	0801de74 	.word	0x0801de74

080104bc <rmw_publisher_get_actual_qos>:
 80104bc:	b150      	cbz	r0, 80104d4 <rmw_publisher_get_actual_qos+0x18>
 80104be:	b508      	push	{r3, lr}
 80104c0:	460b      	mov	r3, r1
 80104c2:	b149      	cbz	r1, 80104d8 <rmw_publisher_get_actual_qos+0x1c>
 80104c4:	6841      	ldr	r1, [r0, #4]
 80104c6:	2250      	movs	r2, #80	@ 0x50
 80104c8:	3128      	adds	r1, #40	@ 0x28
 80104ca:	4618      	mov	r0, r3
 80104cc:	f00b f817 	bl	801b4fe <memcpy>
 80104d0:	2000      	movs	r0, #0
 80104d2:	bd08      	pop	{r3, pc}
 80104d4:	200b      	movs	r0, #11
 80104d6:	4770      	bx	lr
 80104d8:	200b      	movs	r0, #11
 80104da:	bd08      	pop	{r3, pc}

080104dc <rmw_destroy_publisher>:
 80104dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80104de:	b128      	cbz	r0, 80104ec <rmw_destroy_publisher+0x10>
 80104e0:	4604      	mov	r4, r0
 80104e2:	6800      	ldr	r0, [r0, #0]
 80104e4:	460d      	mov	r5, r1
 80104e6:	f000 fd71 	bl	8010fcc <is_uxrce_rmw_identifier_valid>
 80104ea:	b910      	cbnz	r0, 80104f2 <rmw_destroy_publisher+0x16>
 80104ec:	2401      	movs	r4, #1
 80104ee:	4620      	mov	r0, r4
 80104f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80104f2:	6863      	ldr	r3, [r4, #4]
 80104f4:	2b00      	cmp	r3, #0
 80104f6:	d0f9      	beq.n	80104ec <rmw_destroy_publisher+0x10>
 80104f8:	2d00      	cmp	r5, #0
 80104fa:	d0f7      	beq.n	80104ec <rmw_destroy_publisher+0x10>
 80104fc:	6828      	ldr	r0, [r5, #0]
 80104fe:	f000 fd65 	bl	8010fcc <is_uxrce_rmw_identifier_valid>
 8010502:	2800      	cmp	r0, #0
 8010504:	d0f2      	beq.n	80104ec <rmw_destroy_publisher+0x10>
 8010506:	686c      	ldr	r4, [r5, #4]
 8010508:	2c00      	cmp	r4, #0
 801050a:	d0ef      	beq.n	80104ec <rmw_destroy_publisher+0x10>
 801050c:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 801050e:	f8d4 7080 	ldr.w	r7, [r4, #128]	@ 0x80
 8010512:	f008 f9af 	bl	8018874 <destroy_topic>
 8010516:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 801051a:	6962      	ldr	r2, [r4, #20]
 801051c:	6918      	ldr	r0, [r3, #16]
 801051e:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8010522:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8010526:	6819      	ldr	r1, [r3, #0]
 8010528:	f001 f83a 	bl	80115a0 <uxr_buffer_delete_entity>
 801052c:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 8010530:	6922      	ldr	r2, [r4, #16]
 8010532:	691b      	ldr	r3, [r3, #16]
 8010534:	f8d3 1388 	ldr.w	r1, [r3, #904]	@ 0x388
 8010538:	4604      	mov	r4, r0
 801053a:	6809      	ldr	r1, [r1, #0]
 801053c:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 8010540:	f001 f82e 	bl	80115a0 <uxr_buffer_delete_entity>
 8010544:	693e      	ldr	r6, [r7, #16]
 8010546:	4622      	mov	r2, r4
 8010548:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 801054c:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 8010550:	4604      	mov	r4, r0
 8010552:	4630      	mov	r0, r6
 8010554:	f000 fcba 	bl	8010ecc <run_xrce_session>
 8010558:	693e      	ldr	r6, [r7, #16]
 801055a:	4622      	mov	r2, r4
 801055c:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 8010560:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 8010564:	4604      	mov	r4, r0
 8010566:	4630      	mov	r0, r6
 8010568:	f000 fcb0 	bl	8010ecc <run_xrce_session>
 801056c:	b12c      	cbz	r4, 801057a <rmw_destroy_publisher+0x9e>
 801056e:	b120      	cbz	r0, 801057a <rmw_destroy_publisher+0x9e>
 8010570:	2400      	movs	r4, #0
 8010572:	4628      	mov	r0, r5
 8010574:	f000 fb50 	bl	8010c18 <rmw_uxrce_fini_publisher_memory>
 8010578:	e7b9      	b.n	80104ee <rmw_destroy_publisher+0x12>
 801057a:	2402      	movs	r4, #2
 801057c:	e7f9      	b.n	8010572 <rmw_destroy_publisher+0x96>
 801057e:	bf00      	nop

08010580 <rmw_destroy_service>:
 8010580:	b570      	push	{r4, r5, r6, lr}
 8010582:	b128      	cbz	r0, 8010590 <rmw_destroy_service+0x10>
 8010584:	4604      	mov	r4, r0
 8010586:	6800      	ldr	r0, [r0, #0]
 8010588:	460d      	mov	r5, r1
 801058a:	f000 fd1f 	bl	8010fcc <is_uxrce_rmw_identifier_valid>
 801058e:	b910      	cbnz	r0, 8010596 <rmw_destroy_service+0x16>
 8010590:	2401      	movs	r4, #1
 8010592:	4620      	mov	r0, r4
 8010594:	bd70      	pop	{r4, r5, r6, pc}
 8010596:	6863      	ldr	r3, [r4, #4]
 8010598:	2b00      	cmp	r3, #0
 801059a:	d0f9      	beq.n	8010590 <rmw_destroy_service+0x10>
 801059c:	2d00      	cmp	r5, #0
 801059e:	d0f7      	beq.n	8010590 <rmw_destroy_service+0x10>
 80105a0:	6828      	ldr	r0, [r5, #0]
 80105a2:	f000 fd13 	bl	8010fcc <is_uxrce_rmw_identifier_valid>
 80105a6:	2800      	cmp	r0, #0
 80105a8:	d0f2      	beq.n	8010590 <rmw_destroy_service+0x10>
 80105aa:	686e      	ldr	r6, [r5, #4]
 80105ac:	2e00      	cmp	r6, #0
 80105ae:	d0ef      	beq.n	8010590 <rmw_destroy_service+0x10>
 80105b0:	6864      	ldr	r4, [r4, #4]
 80105b2:	6932      	ldr	r2, [r6, #16]
 80105b4:	6920      	ldr	r0, [r4, #16]
 80105b6:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80105ba:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80105be:	6819      	ldr	r1, [r3, #0]
 80105c0:	f001 fb1c 	bl	8011bfc <uxr_buffer_cancel_data>
 80105c4:	4602      	mov	r2, r0
 80105c6:	6920      	ldr	r0, [r4, #16]
 80105c8:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80105cc:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80105d0:	f000 fc7c 	bl	8010ecc <run_xrce_session>
 80105d4:	6920      	ldr	r0, [r4, #16]
 80105d6:	6932      	ldr	r2, [r6, #16]
 80105d8:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80105dc:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80105e0:	6819      	ldr	r1, [r3, #0]
 80105e2:	f000 ffdd 	bl	80115a0 <uxr_buffer_delete_entity>
 80105e6:	4602      	mov	r2, r0
 80105e8:	6920      	ldr	r0, [r4, #16]
 80105ea:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80105ee:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80105f2:	f000 fc6b 	bl	8010ecc <run_xrce_session>
 80105f6:	2800      	cmp	r0, #0
 80105f8:	4628      	mov	r0, r5
 80105fa:	bf14      	ite	ne
 80105fc:	2400      	movne	r4, #0
 80105fe:	2402      	moveq	r4, #2
 8010600:	f000 fb36 	bl	8010c70 <rmw_uxrce_fini_service_memory>
 8010604:	e7c5      	b.n	8010592 <rmw_destroy_service+0x12>
 8010606:	bf00      	nop

08010608 <rmw_create_subscription>:
 8010608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801060c:	b08d      	sub	sp, #52	@ 0x34
 801060e:	2800      	cmp	r0, #0
 8010610:	f000 80d1 	beq.w	80107b6 <rmw_create_subscription+0x1ae>
 8010614:	460e      	mov	r6, r1
 8010616:	2900      	cmp	r1, #0
 8010618:	f000 80cd 	beq.w	80107b6 <rmw_create_subscription+0x1ae>
 801061c:	4604      	mov	r4, r0
 801061e:	6800      	ldr	r0, [r0, #0]
 8010620:	4615      	mov	r5, r2
 8010622:	4698      	mov	r8, r3
 8010624:	f000 fcd2 	bl	8010fcc <is_uxrce_rmw_identifier_valid>
 8010628:	2800      	cmp	r0, #0
 801062a:	f000 80c4 	beq.w	80107b6 <rmw_create_subscription+0x1ae>
 801062e:	2d00      	cmp	r5, #0
 8010630:	f000 80c1 	beq.w	80107b6 <rmw_create_subscription+0x1ae>
 8010634:	782b      	ldrb	r3, [r5, #0]
 8010636:	2b00      	cmp	r3, #0
 8010638:	f000 80bd 	beq.w	80107b6 <rmw_create_subscription+0x1ae>
 801063c:	f1b8 0f00 	cmp.w	r8, #0
 8010640:	f000 80b9 	beq.w	80107b6 <rmw_create_subscription+0x1ae>
 8010644:	485e      	ldr	r0, [pc, #376]	@ (80107c0 <rmw_create_subscription+0x1b8>)
 8010646:	f8d4 9004 	ldr.w	r9, [r4, #4]
 801064a:	f008 f855 	bl	80186f8 <get_memory>
 801064e:	4604      	mov	r4, r0
 8010650:	2800      	cmp	r0, #0
 8010652:	f000 80b1 	beq.w	80107b8 <rmw_create_subscription+0x1b0>
 8010656:	6887      	ldr	r7, [r0, #8]
 8010658:	f8c7 7080 	str.w	r7, [r7, #128]	@ 0x80
 801065c:	f008 f8b4 	bl	80187c8 <rmw_get_implementation_identifier>
 8010660:	f107 0a98 	add.w	sl, r7, #152	@ 0x98
 8010664:	67f8      	str	r0, [r7, #124]	@ 0x7c
 8010666:	f8c7 a084 	str.w	sl, [r7, #132]	@ 0x84
 801066a:	4628      	mov	r0, r5
 801066c:	f7ef fde2 	bl	8000234 <strlen>
 8010670:	3001      	adds	r0, #1
 8010672:	283c      	cmp	r0, #60	@ 0x3c
 8010674:	f107 047c 	add.w	r4, r7, #124	@ 0x7c
 8010678:	f200 8096 	bhi.w	80107a8 <rmw_create_subscription+0x1a0>
 801067c:	4a51      	ldr	r2, [pc, #324]	@ (80107c4 <rmw_create_subscription+0x1bc>)
 801067e:	462b      	mov	r3, r5
 8010680:	213c      	movs	r1, #60	@ 0x3c
 8010682:	4650      	mov	r0, sl
 8010684:	f00a fcfe 	bl	801b084 <sniprintf>
 8010688:	4641      	mov	r1, r8
 801068a:	f8c7 9020 	str.w	r9, [r7, #32]
 801068e:	2250      	movs	r2, #80	@ 0x50
 8010690:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8010694:	f00a ff33 	bl	801b4fe <memcpy>
 8010698:	494b      	ldr	r1, [pc, #300]	@ (80107c8 <rmw_create_subscription+0x1c0>)
 801069a:	4630      	mov	r0, r6
 801069c:	f000 fca4 	bl	8010fe8 <get_message_typesupport_handle>
 80106a0:	2800      	cmp	r0, #0
 80106a2:	f000 8081 	beq.w	80107a8 <rmw_create_subscription+0x1a0>
 80106a6:	6842      	ldr	r2, [r0, #4]
 80106a8:	61ba      	str	r2, [r7, #24]
 80106aa:	2a00      	cmp	r2, #0
 80106ac:	d07c      	beq.n	80107a8 <rmw_create_subscription+0x1a0>
 80106ae:	4629      	mov	r1, r5
 80106b0:	4643      	mov	r3, r8
 80106b2:	4648      	mov	r0, r9
 80106b4:	f008 f88e 	bl	80187d4 <create_topic>
 80106b8:	61f8      	str	r0, [r7, #28]
 80106ba:	2800      	cmp	r0, #0
 80106bc:	d078      	beq.n	80107b0 <rmw_create_subscription+0x1a8>
 80106be:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80106c2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80106c6:	2104      	movs	r1, #4
 80106c8:	f8b3 059c 	ldrh.w	r0, [r3, #1436]	@ 0x59c
 80106cc:	1c42      	adds	r2, r0, #1
 80106ce:	f8a3 259c 	strh.w	r2, [r3, #1436]	@ 0x59c
 80106d2:	f001 fa29 	bl	8011b28 <uxr_object_id>
 80106d6:	6138      	str	r0, [r7, #16]
 80106d8:	f8d9 0010 	ldr.w	r0, [r9, #16]
 80106dc:	2506      	movs	r5, #6
 80106de:	f8d0 3384 	ldr.w	r3, [r0, #900]	@ 0x384
 80106e2:	9500      	str	r5, [sp, #0]
 80106e4:	6819      	ldr	r1, [r3, #0]
 80106e6:	693a      	ldr	r2, [r7, #16]
 80106e8:	f8d9 3014 	ldr.w	r3, [r9, #20]
 80106ec:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80106f0:	f001 f83a 	bl	8011768 <uxr_buffer_create_subscriber_bin>
 80106f4:	4602      	mov	r2, r0
 80106f6:	f8d9 0010 	ldr.w	r0, [r9, #16]
 80106fa:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 80106fe:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8010702:	f000 fbe3 	bl	8010ecc <run_xrce_session>
 8010706:	2800      	cmp	r0, #0
 8010708:	d04e      	beq.n	80107a8 <rmw_create_subscription+0x1a0>
 801070a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801070e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8010712:	4629      	mov	r1, r5
 8010714:	f8b3 059e 	ldrh.w	r0, [r3, #1438]	@ 0x59e
 8010718:	1c42      	adds	r2, r0, #1
 801071a:	f8a3 259e 	strh.w	r2, [r3, #1438]	@ 0x59e
 801071e:	f001 fa03 	bl	8011b28 <uxr_object_id>
 8010722:	ae08      	add	r6, sp, #32
 8010724:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8010728:	69fb      	ldr	r3, [r7, #28]
 801072a:	6178      	str	r0, [r7, #20]
 801072c:	4641      	mov	r1, r8
 801072e:	4630      	mov	r0, r6
 8010730:	f8da b384 	ldr.w	fp, [sl, #900]	@ 0x384
 8010734:	9305      	str	r3, [sp, #20]
 8010736:	f000 fbe5 	bl	8010f04 <convert_qos_profile>
 801073a:	9503      	str	r5, [sp, #12]
 801073c:	e896 0003 	ldmia.w	r6, {r0, r1}
 8010740:	9b05      	ldr	r3, [sp, #20]
 8010742:	9001      	str	r0, [sp, #4]
 8010744:	f8ad 1008 	strh.w	r1, [sp, #8]
 8010748:	691b      	ldr	r3, [r3, #16]
 801074a:	9300      	str	r3, [sp, #0]
 801074c:	e9d7 3204 	ldrd	r3, r2, [r7, #16]
 8010750:	f8db 1000 	ldr.w	r1, [fp]
 8010754:	f50a 7028 	add.w	r0, sl, #672	@ 0x2a0
 8010758:	f001 f8ac 	bl	80118b4 <uxr_buffer_create_datareader_bin>
 801075c:	4602      	mov	r2, r0
 801075e:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8010762:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8010766:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 801076a:	f000 fbaf 	bl	8010ecc <run_xrce_session>
 801076e:	b1d8      	cbz	r0, 80107a8 <rmw_create_subscription+0x1a0>
 8010770:	f898 3008 	ldrb.w	r3, [r8, #8]
 8010774:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8010778:	2b02      	cmp	r3, #2
 801077a:	bf0c      	ite	eq
 801077c:	f8d0 3380 	ldreq.w	r3, [r0, #896]	@ 0x380
 8010780:	f8d0 3374 	ldrne.w	r3, [r0, #884]	@ 0x374
 8010784:	9307      	str	r3, [sp, #28]
 8010786:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 801078a:	2200      	movs	r2, #0
 801078c:	e9cd 120a 	strd	r1, r2, [sp, #40]	@ 0x28
 8010790:	ab0a      	add	r3, sp, #40	@ 0x28
 8010792:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8010796:	9300      	str	r3, [sp, #0]
 8010798:	697a      	ldr	r2, [r7, #20]
 801079a:	9b07      	ldr	r3, [sp, #28]
 801079c:	6809      	ldr	r1, [r1, #0]
 801079e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80107a2:	f001 f9f1 	bl	8011b88 <uxr_buffer_request_data>
 80107a6:	e007      	b.n	80107b8 <rmw_create_subscription+0x1b0>
 80107a8:	69f8      	ldr	r0, [r7, #28]
 80107aa:	b108      	cbz	r0, 80107b0 <rmw_create_subscription+0x1a8>
 80107ac:	f000 fa8c 	bl	8010cc8 <rmw_uxrce_fini_topic_memory>
 80107b0:	4620      	mov	r0, r4
 80107b2:	f000 fa47 	bl	8010c44 <rmw_uxrce_fini_subscription_memory>
 80107b6:	2400      	movs	r4, #0
 80107b8:	4620      	mov	r0, r4
 80107ba:	b00d      	add	sp, #52	@ 0x34
 80107bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80107c0:	2000b534 	.word	0x2000b534
 80107c4:	0801defc 	.word	0x0801defc
 80107c8:	0801de74 	.word	0x0801de74

080107cc <rmw_subscription_get_actual_qos>:
 80107cc:	b150      	cbz	r0, 80107e4 <rmw_subscription_get_actual_qos+0x18>
 80107ce:	b508      	push	{r3, lr}
 80107d0:	460b      	mov	r3, r1
 80107d2:	b149      	cbz	r1, 80107e8 <rmw_subscription_get_actual_qos+0x1c>
 80107d4:	6841      	ldr	r1, [r0, #4]
 80107d6:	2250      	movs	r2, #80	@ 0x50
 80107d8:	3128      	adds	r1, #40	@ 0x28
 80107da:	4618      	mov	r0, r3
 80107dc:	f00a fe8f 	bl	801b4fe <memcpy>
 80107e0:	2000      	movs	r0, #0
 80107e2:	bd08      	pop	{r3, pc}
 80107e4:	200b      	movs	r0, #11
 80107e6:	4770      	bx	lr
 80107e8:	200b      	movs	r0, #11
 80107ea:	bd08      	pop	{r3, pc}

080107ec <rmw_destroy_subscription>:
 80107ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80107ee:	b128      	cbz	r0, 80107fc <rmw_destroy_subscription+0x10>
 80107f0:	4604      	mov	r4, r0
 80107f2:	6800      	ldr	r0, [r0, #0]
 80107f4:	460d      	mov	r5, r1
 80107f6:	f000 fbe9 	bl	8010fcc <is_uxrce_rmw_identifier_valid>
 80107fa:	b910      	cbnz	r0, 8010802 <rmw_destroy_subscription+0x16>
 80107fc:	2401      	movs	r4, #1
 80107fe:	4620      	mov	r0, r4
 8010800:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010802:	6863      	ldr	r3, [r4, #4]
 8010804:	2b00      	cmp	r3, #0
 8010806:	d0f9      	beq.n	80107fc <rmw_destroy_subscription+0x10>
 8010808:	2d00      	cmp	r5, #0
 801080a:	d0f7      	beq.n	80107fc <rmw_destroy_subscription+0x10>
 801080c:	6828      	ldr	r0, [r5, #0]
 801080e:	f000 fbdd 	bl	8010fcc <is_uxrce_rmw_identifier_valid>
 8010812:	2800      	cmp	r0, #0
 8010814:	d0f2      	beq.n	80107fc <rmw_destroy_subscription+0x10>
 8010816:	686c      	ldr	r4, [r5, #4]
 8010818:	2c00      	cmp	r4, #0
 801081a:	d0ef      	beq.n	80107fc <rmw_destroy_subscription+0x10>
 801081c:	6a26      	ldr	r6, [r4, #32]
 801081e:	6962      	ldr	r2, [r4, #20]
 8010820:	6930      	ldr	r0, [r6, #16]
 8010822:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8010826:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801082a:	6819      	ldr	r1, [r3, #0]
 801082c:	f001 f9e6 	bl	8011bfc <uxr_buffer_cancel_data>
 8010830:	4602      	mov	r2, r0
 8010832:	6930      	ldr	r0, [r6, #16]
 8010834:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8010838:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801083c:	f000 fb46 	bl	8010ecc <run_xrce_session>
 8010840:	69e0      	ldr	r0, [r4, #28]
 8010842:	f008 f817 	bl	8018874 <destroy_topic>
 8010846:	6a23      	ldr	r3, [r4, #32]
 8010848:	6962      	ldr	r2, [r4, #20]
 801084a:	6918      	ldr	r0, [r3, #16]
 801084c:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8010850:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8010854:	6819      	ldr	r1, [r3, #0]
 8010856:	f000 fea3 	bl	80115a0 <uxr_buffer_delete_entity>
 801085a:	6a23      	ldr	r3, [r4, #32]
 801085c:	6922      	ldr	r2, [r4, #16]
 801085e:	691b      	ldr	r3, [r3, #16]
 8010860:	f8d3 1388 	ldr.w	r1, [r3, #904]	@ 0x388
 8010864:	4604      	mov	r4, r0
 8010866:	6809      	ldr	r1, [r1, #0]
 8010868:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 801086c:	f000 fe98 	bl	80115a0 <uxr_buffer_delete_entity>
 8010870:	6937      	ldr	r7, [r6, #16]
 8010872:	4622      	mov	r2, r4
 8010874:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 8010878:	f8d7 1388 	ldr.w	r1, [r7, #904]	@ 0x388
 801087c:	4604      	mov	r4, r0
 801087e:	4638      	mov	r0, r7
 8010880:	f000 fb24 	bl	8010ecc <run_xrce_session>
 8010884:	6936      	ldr	r6, [r6, #16]
 8010886:	4622      	mov	r2, r4
 8010888:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 801088c:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 8010890:	4604      	mov	r4, r0
 8010892:	4630      	mov	r0, r6
 8010894:	f000 fb1a 	bl	8010ecc <run_xrce_session>
 8010898:	b12c      	cbz	r4, 80108a6 <rmw_destroy_subscription+0xba>
 801089a:	b120      	cbz	r0, 80108a6 <rmw_destroy_subscription+0xba>
 801089c:	2400      	movs	r4, #0
 801089e:	4628      	mov	r0, r5
 80108a0:	f000 f9d0 	bl	8010c44 <rmw_uxrce_fini_subscription_memory>
 80108a4:	e7ab      	b.n	80107fe <rmw_destroy_subscription+0x12>
 80108a6:	2402      	movs	r4, #2
 80108a8:	e7f9      	b.n	801089e <rmw_destroy_subscription+0xb2>
 80108aa:	bf00      	nop

080108ac <rmw_uxrce_transport_init>:
 80108ac:	b508      	push	{r3, lr}
 80108ae:	b108      	cbz	r0, 80108b4 <rmw_uxrce_transport_init+0x8>
 80108b0:	f100 0210 	add.w	r2, r0, #16
 80108b4:	b139      	cbz	r1, 80108c6 <rmw_uxrce_transport_init+0x1a>
 80108b6:	6949      	ldr	r1, [r1, #20]
 80108b8:	4610      	mov	r0, r2
 80108ba:	f001 f8fd 	bl	8011ab8 <uxr_init_custom_transport>
 80108be:	f080 0001 	eor.w	r0, r0, #1
 80108c2:	b2c0      	uxtb	r0, r0
 80108c4:	bd08      	pop	{r3, pc}
 80108c6:	4b04      	ldr	r3, [pc, #16]	@ (80108d8 <rmw_uxrce_transport_init+0x2c>)
 80108c8:	4610      	mov	r0, r2
 80108ca:	6859      	ldr	r1, [r3, #4]
 80108cc:	f001 f8f4 	bl	8011ab8 <uxr_init_custom_transport>
 80108d0:	f080 0001 	eor.w	r0, r0, #1
 80108d4:	b2c0      	uxtb	r0, r0
 80108d6:	bd08      	pop	{r3, pc}
 80108d8:	20006bbc 	.word	0x20006bbc

080108dc <rmw_uros_epoch_nanos>:
 80108dc:	4b05      	ldr	r3, [pc, #20]	@ (80108f4 <rmw_uros_epoch_nanos+0x18>)
 80108de:	681b      	ldr	r3, [r3, #0]
 80108e0:	b123      	cbz	r3, 80108ec <rmw_uros_epoch_nanos+0x10>
 80108e2:	6898      	ldr	r0, [r3, #8]
 80108e4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80108e8:	f001 bb94 	b.w	8012014 <uxr_epoch_nanos>
 80108ec:	2000      	movs	r0, #0
 80108ee:	2100      	movs	r1, #0
 80108f0:	4770      	bx	lr
 80108f2:	bf00      	nop
 80108f4:	2000b514 	.word	0x2000b514

080108f8 <rmw_uros_sync_session>:
 80108f8:	b508      	push	{r3, lr}
 80108fa:	4b07      	ldr	r3, [pc, #28]	@ (8010918 <rmw_uros_sync_session+0x20>)
 80108fc:	681b      	ldr	r3, [r3, #0]
 80108fe:	b14b      	cbz	r3, 8010914 <rmw_uros_sync_session+0x1c>
 8010900:	4601      	mov	r1, r0
 8010902:	6898      	ldr	r0, [r3, #8]
 8010904:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8010908:	f001 ffc6 	bl	8012898 <uxr_sync_session>
 801090c:	f080 0001 	eor.w	r0, r0, #1
 8010910:	b2c0      	uxtb	r0, r0
 8010912:	bd08      	pop	{r3, pc}
 8010914:	2001      	movs	r0, #1
 8010916:	bd08      	pop	{r3, pc}
 8010918:	2000b514 	.word	0x2000b514

0801091c <rmw_uxrce_init_service_memory>:
 801091c:	b1e2      	cbz	r2, 8010958 <rmw_uxrce_init_service_memory+0x3c>
 801091e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010922:	7b05      	ldrb	r5, [r0, #12]
 8010924:	4606      	mov	r6, r0
 8010926:	b9ad      	cbnz	r5, 8010954 <rmw_uxrce_init_service_memory+0x38>
 8010928:	23c8      	movs	r3, #200	@ 0xc8
 801092a:	e9c0 5500 	strd	r5, r5, [r0]
 801092e:	6083      	str	r3, [r0, #8]
 8010930:	f240 1301 	movw	r3, #257	@ 0x101
 8010934:	4617      	mov	r7, r2
 8010936:	8183      	strh	r3, [r0, #12]
 8010938:	460c      	mov	r4, r1
 801093a:	46a8      	mov	r8, r5
 801093c:	4621      	mov	r1, r4
 801093e:	4630      	mov	r0, r6
 8010940:	3501      	adds	r5, #1
 8010942:	f007 fee9 	bl	8018718 <put_memory>
 8010946:	42af      	cmp	r7, r5
 8010948:	60a4      	str	r4, [r4, #8]
 801094a:	f884 800c 	strb.w	r8, [r4, #12]
 801094e:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 8010952:	d1f3      	bne.n	801093c <rmw_uxrce_init_service_memory+0x20>
 8010954:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010958:	4770      	bx	lr
 801095a:	bf00      	nop

0801095c <rmw_uxrce_init_client_memory>:
 801095c:	b1e2      	cbz	r2, 8010998 <rmw_uxrce_init_client_memory+0x3c>
 801095e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010962:	7b05      	ldrb	r5, [r0, #12]
 8010964:	4606      	mov	r6, r0
 8010966:	b9ad      	cbnz	r5, 8010994 <rmw_uxrce_init_client_memory+0x38>
 8010968:	23c8      	movs	r3, #200	@ 0xc8
 801096a:	e9c0 5500 	strd	r5, r5, [r0]
 801096e:	6083      	str	r3, [r0, #8]
 8010970:	f240 1301 	movw	r3, #257	@ 0x101
 8010974:	4617      	mov	r7, r2
 8010976:	8183      	strh	r3, [r0, #12]
 8010978:	460c      	mov	r4, r1
 801097a:	46a8      	mov	r8, r5
 801097c:	4621      	mov	r1, r4
 801097e:	4630      	mov	r0, r6
 8010980:	3501      	adds	r5, #1
 8010982:	f007 fec9 	bl	8018718 <put_memory>
 8010986:	42af      	cmp	r7, r5
 8010988:	60a4      	str	r4, [r4, #8]
 801098a:	f884 800c 	strb.w	r8, [r4, #12]
 801098e:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 8010992:	d1f3      	bne.n	801097c <rmw_uxrce_init_client_memory+0x20>
 8010994:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010998:	4770      	bx	lr
 801099a:	bf00      	nop

0801099c <rmw_uxrce_init_publisher_memory>:
 801099c:	b1e2      	cbz	r2, 80109d8 <rmw_uxrce_init_publisher_memory+0x3c>
 801099e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80109a2:	7b05      	ldrb	r5, [r0, #12]
 80109a4:	4606      	mov	r6, r0
 80109a6:	b9ad      	cbnz	r5, 80109d4 <rmw_uxrce_init_publisher_memory+0x38>
 80109a8:	23d8      	movs	r3, #216	@ 0xd8
 80109aa:	e9c0 5500 	strd	r5, r5, [r0]
 80109ae:	6083      	str	r3, [r0, #8]
 80109b0:	f240 1301 	movw	r3, #257	@ 0x101
 80109b4:	4617      	mov	r7, r2
 80109b6:	8183      	strh	r3, [r0, #12]
 80109b8:	460c      	mov	r4, r1
 80109ba:	46a8      	mov	r8, r5
 80109bc:	4621      	mov	r1, r4
 80109be:	4630      	mov	r0, r6
 80109c0:	3501      	adds	r5, #1
 80109c2:	f007 fea9 	bl	8018718 <put_memory>
 80109c6:	42af      	cmp	r7, r5
 80109c8:	60a4      	str	r4, [r4, #8]
 80109ca:	f884 800c 	strb.w	r8, [r4, #12]
 80109ce:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 80109d2:	d1f3      	bne.n	80109bc <rmw_uxrce_init_publisher_memory+0x20>
 80109d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80109d8:	4770      	bx	lr
 80109da:	bf00      	nop

080109dc <rmw_uxrce_init_subscription_memory>:
 80109dc:	b1e2      	cbz	r2, 8010a18 <rmw_uxrce_init_subscription_memory+0x3c>
 80109de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80109e2:	7b05      	ldrb	r5, [r0, #12]
 80109e4:	4606      	mov	r6, r0
 80109e6:	b9ad      	cbnz	r5, 8010a14 <rmw_uxrce_init_subscription_memory+0x38>
 80109e8:	23d8      	movs	r3, #216	@ 0xd8
 80109ea:	e9c0 5500 	strd	r5, r5, [r0]
 80109ee:	6083      	str	r3, [r0, #8]
 80109f0:	f240 1301 	movw	r3, #257	@ 0x101
 80109f4:	4617      	mov	r7, r2
 80109f6:	8183      	strh	r3, [r0, #12]
 80109f8:	460c      	mov	r4, r1
 80109fa:	46a8      	mov	r8, r5
 80109fc:	4621      	mov	r1, r4
 80109fe:	4630      	mov	r0, r6
 8010a00:	3501      	adds	r5, #1
 8010a02:	f007 fe89 	bl	8018718 <put_memory>
 8010a06:	42af      	cmp	r7, r5
 8010a08:	60a4      	str	r4, [r4, #8]
 8010a0a:	f884 800c 	strb.w	r8, [r4, #12]
 8010a0e:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 8010a12:	d1f3      	bne.n	80109fc <rmw_uxrce_init_subscription_memory+0x20>
 8010a14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010a18:	4770      	bx	lr
 8010a1a:	bf00      	nop

08010a1c <rmw_uxrce_init_node_memory>:
 8010a1c:	b1e2      	cbz	r2, 8010a58 <rmw_uxrce_init_node_memory+0x3c>
 8010a1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010a22:	7b05      	ldrb	r5, [r0, #12]
 8010a24:	4606      	mov	r6, r0
 8010a26:	b9ad      	cbnz	r5, 8010a54 <rmw_uxrce_init_node_memory+0x38>
 8010a28:	23a4      	movs	r3, #164	@ 0xa4
 8010a2a:	e9c0 5500 	strd	r5, r5, [r0]
 8010a2e:	6083      	str	r3, [r0, #8]
 8010a30:	f240 1301 	movw	r3, #257	@ 0x101
 8010a34:	4617      	mov	r7, r2
 8010a36:	8183      	strh	r3, [r0, #12]
 8010a38:	460c      	mov	r4, r1
 8010a3a:	46a8      	mov	r8, r5
 8010a3c:	4621      	mov	r1, r4
 8010a3e:	4630      	mov	r0, r6
 8010a40:	3501      	adds	r5, #1
 8010a42:	f007 fe69 	bl	8018718 <put_memory>
 8010a46:	42af      	cmp	r7, r5
 8010a48:	60a4      	str	r4, [r4, #8]
 8010a4a:	f884 800c 	strb.w	r8, [r4, #12]
 8010a4e:	f104 04a4 	add.w	r4, r4, #164	@ 0xa4
 8010a52:	d1f3      	bne.n	8010a3c <rmw_uxrce_init_node_memory+0x20>
 8010a54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010a58:	4770      	bx	lr
 8010a5a:	bf00      	nop

08010a5c <rmw_uxrce_init_session_memory>:
 8010a5c:	b1ea      	cbz	r2, 8010a9a <rmw_uxrce_init_session_memory+0x3e>
 8010a5e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010a62:	7b05      	ldrb	r5, [r0, #12]
 8010a64:	4606      	mov	r6, r0
 8010a66:	b9b5      	cbnz	r5, 8010a96 <rmw_uxrce_init_session_memory+0x3a>
 8010a68:	e9c0 5500 	strd	r5, r5, [r0]
 8010a6c:	f241 58a8 	movw	r8, #5544	@ 0x15a8
 8010a70:	f240 1301 	movw	r3, #257	@ 0x101
 8010a74:	4617      	mov	r7, r2
 8010a76:	f8c0 8008 	str.w	r8, [r0, #8]
 8010a7a:	460c      	mov	r4, r1
 8010a7c:	8183      	strh	r3, [r0, #12]
 8010a7e:	46a9      	mov	r9, r5
 8010a80:	4621      	mov	r1, r4
 8010a82:	4630      	mov	r0, r6
 8010a84:	3501      	adds	r5, #1
 8010a86:	f007 fe47 	bl	8018718 <put_memory>
 8010a8a:	42af      	cmp	r7, r5
 8010a8c:	60a4      	str	r4, [r4, #8]
 8010a8e:	f884 900c 	strb.w	r9, [r4, #12]
 8010a92:	4444      	add	r4, r8
 8010a94:	d1f4      	bne.n	8010a80 <rmw_uxrce_init_session_memory+0x24>
 8010a96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010a9a:	4770      	bx	lr

08010a9c <rmw_uxrce_init_topic_memory>:
 8010a9c:	b1e2      	cbz	r2, 8010ad8 <rmw_uxrce_init_topic_memory+0x3c>
 8010a9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010aa2:	7b05      	ldrb	r5, [r0, #12]
 8010aa4:	4606      	mov	r6, r0
 8010aa6:	b9ad      	cbnz	r5, 8010ad4 <rmw_uxrce_init_topic_memory+0x38>
 8010aa8:	231c      	movs	r3, #28
 8010aaa:	e9c0 5500 	strd	r5, r5, [r0]
 8010aae:	6083      	str	r3, [r0, #8]
 8010ab0:	f240 1301 	movw	r3, #257	@ 0x101
 8010ab4:	4617      	mov	r7, r2
 8010ab6:	8183      	strh	r3, [r0, #12]
 8010ab8:	460c      	mov	r4, r1
 8010aba:	46a8      	mov	r8, r5
 8010abc:	4621      	mov	r1, r4
 8010abe:	4630      	mov	r0, r6
 8010ac0:	3501      	adds	r5, #1
 8010ac2:	f007 fe29 	bl	8018718 <put_memory>
 8010ac6:	42af      	cmp	r7, r5
 8010ac8:	60a4      	str	r4, [r4, #8]
 8010aca:	f884 800c 	strb.w	r8, [r4, #12]
 8010ace:	f104 041c 	add.w	r4, r4, #28
 8010ad2:	d1f3      	bne.n	8010abc <rmw_uxrce_init_topic_memory+0x20>
 8010ad4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010ad8:	4770      	bx	lr
 8010ada:	bf00      	nop

08010adc <rmw_uxrce_init_static_input_buffer_memory>:
 8010adc:	b1ea      	cbz	r2, 8010b1a <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 8010ade:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010ae2:	7b05      	ldrb	r5, [r0, #12]
 8010ae4:	4606      	mov	r6, r0
 8010ae6:	b9b5      	cbnz	r5, 8010b16 <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 8010ae8:	f44f 6304 	mov.w	r3, #2112	@ 0x840
 8010aec:	e9c0 5500 	strd	r5, r5, [r0]
 8010af0:	6083      	str	r3, [r0, #8]
 8010af2:	f240 1301 	movw	r3, #257	@ 0x101
 8010af6:	4617      	mov	r7, r2
 8010af8:	8183      	strh	r3, [r0, #12]
 8010afa:	460c      	mov	r4, r1
 8010afc:	46a8      	mov	r8, r5
 8010afe:	4621      	mov	r1, r4
 8010b00:	4630      	mov	r0, r6
 8010b02:	3501      	adds	r5, #1
 8010b04:	f007 fe08 	bl	8018718 <put_memory>
 8010b08:	42af      	cmp	r7, r5
 8010b0a:	60a4      	str	r4, [r4, #8]
 8010b0c:	f884 800c 	strb.w	r8, [r4, #12]
 8010b10:	f504 6404 	add.w	r4, r4, #2112	@ 0x840
 8010b14:	d1f3      	bne.n	8010afe <rmw_uxrce_init_static_input_buffer_memory+0x22>
 8010b16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010b1a:	4770      	bx	lr

08010b1c <rmw_uxrce_init_init_options_impl_memory>:
 8010b1c:	b1e2      	cbz	r2, 8010b58 <rmw_uxrce_init_init_options_impl_memory+0x3c>
 8010b1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010b22:	7b05      	ldrb	r5, [r0, #12]
 8010b24:	4606      	mov	r6, r0
 8010b26:	b9ad      	cbnz	r5, 8010b54 <rmw_uxrce_init_init_options_impl_memory+0x38>
 8010b28:	232c      	movs	r3, #44	@ 0x2c
 8010b2a:	e9c0 5500 	strd	r5, r5, [r0]
 8010b2e:	6083      	str	r3, [r0, #8]
 8010b30:	f240 1301 	movw	r3, #257	@ 0x101
 8010b34:	4617      	mov	r7, r2
 8010b36:	8183      	strh	r3, [r0, #12]
 8010b38:	460c      	mov	r4, r1
 8010b3a:	46a8      	mov	r8, r5
 8010b3c:	4621      	mov	r1, r4
 8010b3e:	4630      	mov	r0, r6
 8010b40:	3501      	adds	r5, #1
 8010b42:	f007 fde9 	bl	8018718 <put_memory>
 8010b46:	42af      	cmp	r7, r5
 8010b48:	60a4      	str	r4, [r4, #8]
 8010b4a:	f884 800c 	strb.w	r8, [r4, #12]
 8010b4e:	f104 042c 	add.w	r4, r4, #44	@ 0x2c
 8010b52:	d1f3      	bne.n	8010b3c <rmw_uxrce_init_init_options_impl_memory+0x20>
 8010b54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010b58:	4770      	bx	lr
 8010b5a:	bf00      	nop

08010b5c <rmw_uxrce_init_wait_set_memory>:
 8010b5c:	b1e2      	cbz	r2, 8010b98 <rmw_uxrce_init_wait_set_memory+0x3c>
 8010b5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010b62:	7b05      	ldrb	r5, [r0, #12]
 8010b64:	4606      	mov	r6, r0
 8010b66:	b9ad      	cbnz	r5, 8010b94 <rmw_uxrce_init_wait_set_memory+0x38>
 8010b68:	231c      	movs	r3, #28
 8010b6a:	e9c0 5500 	strd	r5, r5, [r0]
 8010b6e:	6083      	str	r3, [r0, #8]
 8010b70:	f240 1301 	movw	r3, #257	@ 0x101
 8010b74:	4617      	mov	r7, r2
 8010b76:	8183      	strh	r3, [r0, #12]
 8010b78:	460c      	mov	r4, r1
 8010b7a:	46a8      	mov	r8, r5
 8010b7c:	4621      	mov	r1, r4
 8010b7e:	4630      	mov	r0, r6
 8010b80:	3501      	adds	r5, #1
 8010b82:	f007 fdc9 	bl	8018718 <put_memory>
 8010b86:	42af      	cmp	r7, r5
 8010b88:	60a4      	str	r4, [r4, #8]
 8010b8a:	f884 800c 	strb.w	r8, [r4, #12]
 8010b8e:	f104 041c 	add.w	r4, r4, #28
 8010b92:	d1f3      	bne.n	8010b7c <rmw_uxrce_init_wait_set_memory+0x20>
 8010b94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010b98:	4770      	bx	lr
 8010b9a:	bf00      	nop

08010b9c <rmw_uxrce_init_guard_condition_memory>:
 8010b9c:	b1e2      	cbz	r2, 8010bd8 <rmw_uxrce_init_guard_condition_memory+0x3c>
 8010b9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010ba2:	7b05      	ldrb	r5, [r0, #12]
 8010ba4:	4606      	mov	r6, r0
 8010ba6:	b9ad      	cbnz	r5, 8010bd4 <rmw_uxrce_init_guard_condition_memory+0x38>
 8010ba8:	2320      	movs	r3, #32
 8010baa:	e9c0 5500 	strd	r5, r5, [r0]
 8010bae:	6083      	str	r3, [r0, #8]
 8010bb0:	f240 1301 	movw	r3, #257	@ 0x101
 8010bb4:	4617      	mov	r7, r2
 8010bb6:	8183      	strh	r3, [r0, #12]
 8010bb8:	460c      	mov	r4, r1
 8010bba:	46a8      	mov	r8, r5
 8010bbc:	4621      	mov	r1, r4
 8010bbe:	4630      	mov	r0, r6
 8010bc0:	3501      	adds	r5, #1
 8010bc2:	f007 fda9 	bl	8018718 <put_memory>
 8010bc6:	42af      	cmp	r7, r5
 8010bc8:	60a4      	str	r4, [r4, #8]
 8010bca:	f884 800c 	strb.w	r8, [r4, #12]
 8010bce:	f104 0420 	add.w	r4, r4, #32
 8010bd2:	d1f3      	bne.n	8010bbc <rmw_uxrce_init_guard_condition_memory+0x20>
 8010bd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010bd8:	4770      	bx	lr
 8010bda:	bf00      	nop

08010bdc <rmw_uxrce_fini_session_memory>:
 8010bdc:	4601      	mov	r1, r0
 8010bde:	4801      	ldr	r0, [pc, #4]	@ (8010be4 <rmw_uxrce_fini_session_memory+0x8>)
 8010be0:	f007 bd9a 	b.w	8018718 <put_memory>
 8010be4:	2000b514 	.word	0x2000b514

08010be8 <rmw_uxrce_fini_node_memory>:
 8010be8:	b538      	push	{r3, r4, r5, lr}
 8010bea:	4604      	mov	r4, r0
 8010bec:	6800      	ldr	r0, [r0, #0]
 8010bee:	b128      	cbz	r0, 8010bfc <rmw_uxrce_fini_node_memory+0x14>
 8010bf0:	4b07      	ldr	r3, [pc, #28]	@ (8010c10 <rmw_uxrce_fini_node_memory+0x28>)
 8010bf2:	6819      	ldr	r1, [r3, #0]
 8010bf4:	f7ef fb14 	bl	8000220 <strcmp>
 8010bf8:	b940      	cbnz	r0, 8010c0c <rmw_uxrce_fini_node_memory+0x24>
 8010bfa:	6020      	str	r0, [r4, #0]
 8010bfc:	6861      	ldr	r1, [r4, #4]
 8010bfe:	b129      	cbz	r1, 8010c0c <rmw_uxrce_fini_node_memory+0x24>
 8010c00:	2500      	movs	r5, #0
 8010c02:	4804      	ldr	r0, [pc, #16]	@ (8010c14 <rmw_uxrce_fini_node_memory+0x2c>)
 8010c04:	610d      	str	r5, [r1, #16]
 8010c06:	f007 fd87 	bl	8018718 <put_memory>
 8010c0a:	6065      	str	r5, [r4, #4]
 8010c0c:	bd38      	pop	{r3, r4, r5, pc}
 8010c0e:	bf00      	nop
 8010c10:	0801eacc 	.word	0x0801eacc
 8010c14:	2000b4e4 	.word	0x2000b4e4

08010c18 <rmw_uxrce_fini_publisher_memory>:
 8010c18:	b510      	push	{r4, lr}
 8010c1a:	4604      	mov	r4, r0
 8010c1c:	6800      	ldr	r0, [r0, #0]
 8010c1e:	b128      	cbz	r0, 8010c2c <rmw_uxrce_fini_publisher_memory+0x14>
 8010c20:	4b06      	ldr	r3, [pc, #24]	@ (8010c3c <rmw_uxrce_fini_publisher_memory+0x24>)
 8010c22:	6819      	ldr	r1, [r3, #0]
 8010c24:	f7ef fafc 	bl	8000220 <strcmp>
 8010c28:	b938      	cbnz	r0, 8010c3a <rmw_uxrce_fini_publisher_memory+0x22>
 8010c2a:	6020      	str	r0, [r4, #0]
 8010c2c:	6861      	ldr	r1, [r4, #4]
 8010c2e:	b121      	cbz	r1, 8010c3a <rmw_uxrce_fini_publisher_memory+0x22>
 8010c30:	4803      	ldr	r0, [pc, #12]	@ (8010c40 <rmw_uxrce_fini_publisher_memory+0x28>)
 8010c32:	f007 fd71 	bl	8018718 <put_memory>
 8010c36:	2300      	movs	r3, #0
 8010c38:	6063      	str	r3, [r4, #4]
 8010c3a:	bd10      	pop	{r4, pc}
 8010c3c:	0801eacc 	.word	0x0801eacc
 8010c40:	2000b4f4 	.word	0x2000b4f4

08010c44 <rmw_uxrce_fini_subscription_memory>:
 8010c44:	b510      	push	{r4, lr}
 8010c46:	4604      	mov	r4, r0
 8010c48:	6800      	ldr	r0, [r0, #0]
 8010c4a:	b128      	cbz	r0, 8010c58 <rmw_uxrce_fini_subscription_memory+0x14>
 8010c4c:	4b06      	ldr	r3, [pc, #24]	@ (8010c68 <rmw_uxrce_fini_subscription_memory+0x24>)
 8010c4e:	6819      	ldr	r1, [r3, #0]
 8010c50:	f7ef fae6 	bl	8000220 <strcmp>
 8010c54:	b938      	cbnz	r0, 8010c66 <rmw_uxrce_fini_subscription_memory+0x22>
 8010c56:	6020      	str	r0, [r4, #0]
 8010c58:	6861      	ldr	r1, [r4, #4]
 8010c5a:	b121      	cbz	r1, 8010c66 <rmw_uxrce_fini_subscription_memory+0x22>
 8010c5c:	4803      	ldr	r0, [pc, #12]	@ (8010c6c <rmw_uxrce_fini_subscription_memory+0x28>)
 8010c5e:	f007 fd5b 	bl	8018718 <put_memory>
 8010c62:	2300      	movs	r3, #0
 8010c64:	6063      	str	r3, [r4, #4]
 8010c66:	bd10      	pop	{r4, pc}
 8010c68:	0801eacc 	.word	0x0801eacc
 8010c6c:	2000b534 	.word	0x2000b534

08010c70 <rmw_uxrce_fini_service_memory>:
 8010c70:	b510      	push	{r4, lr}
 8010c72:	4604      	mov	r4, r0
 8010c74:	6800      	ldr	r0, [r0, #0]
 8010c76:	b128      	cbz	r0, 8010c84 <rmw_uxrce_fini_service_memory+0x14>
 8010c78:	4b06      	ldr	r3, [pc, #24]	@ (8010c94 <rmw_uxrce_fini_service_memory+0x24>)
 8010c7a:	6819      	ldr	r1, [r3, #0]
 8010c7c:	f7ef fad0 	bl	8000220 <strcmp>
 8010c80:	b938      	cbnz	r0, 8010c92 <rmw_uxrce_fini_service_memory+0x22>
 8010c82:	6020      	str	r0, [r4, #0]
 8010c84:	6861      	ldr	r1, [r4, #4]
 8010c86:	b121      	cbz	r1, 8010c92 <rmw_uxrce_fini_service_memory+0x22>
 8010c88:	4803      	ldr	r0, [pc, #12]	@ (8010c98 <rmw_uxrce_fini_service_memory+0x28>)
 8010c8a:	f007 fd45 	bl	8018718 <put_memory>
 8010c8e:	2300      	movs	r3, #0
 8010c90:	6063      	str	r3, [r4, #4]
 8010c92:	bd10      	pop	{r4, pc}
 8010c94:	0801eacc 	.word	0x0801eacc
 8010c98:	2000b504 	.word	0x2000b504

08010c9c <rmw_uxrce_fini_client_memory>:
 8010c9c:	b510      	push	{r4, lr}
 8010c9e:	4604      	mov	r4, r0
 8010ca0:	6800      	ldr	r0, [r0, #0]
 8010ca2:	b128      	cbz	r0, 8010cb0 <rmw_uxrce_fini_client_memory+0x14>
 8010ca4:	4b06      	ldr	r3, [pc, #24]	@ (8010cc0 <rmw_uxrce_fini_client_memory+0x24>)
 8010ca6:	6819      	ldr	r1, [r3, #0]
 8010ca8:	f7ef faba 	bl	8000220 <strcmp>
 8010cac:	b938      	cbnz	r0, 8010cbe <rmw_uxrce_fini_client_memory+0x22>
 8010cae:	6020      	str	r0, [r4, #0]
 8010cb0:	6861      	ldr	r1, [r4, #4]
 8010cb2:	b121      	cbz	r1, 8010cbe <rmw_uxrce_fini_client_memory+0x22>
 8010cb4:	4803      	ldr	r0, [pc, #12]	@ (8010cc4 <rmw_uxrce_fini_client_memory+0x28>)
 8010cb6:	f007 fd2f 	bl	8018718 <put_memory>
 8010cba:	2300      	movs	r3, #0
 8010cbc:	6063      	str	r3, [r4, #4]
 8010cbe:	bd10      	pop	{r4, pc}
 8010cc0:	0801eacc 	.word	0x0801eacc
 8010cc4:	20006c14 	.word	0x20006c14

08010cc8 <rmw_uxrce_fini_topic_memory>:
 8010cc8:	b510      	push	{r4, lr}
 8010cca:	4604      	mov	r4, r0
 8010ccc:	4621      	mov	r1, r4
 8010cce:	4803      	ldr	r0, [pc, #12]	@ (8010cdc <rmw_uxrce_fini_topic_memory+0x14>)
 8010cd0:	f007 fd22 	bl	8018718 <put_memory>
 8010cd4:	2300      	movs	r3, #0
 8010cd6:	61a3      	str	r3, [r4, #24]
 8010cd8:	bd10      	pop	{r4, pc}
 8010cda:	bf00      	nop
 8010cdc:	2000b544 	.word	0x2000b544

08010ce0 <rmw_uxrce_get_static_input_buffer_for_entity>:
 8010ce0:	b082      	sub	sp, #8
 8010ce2:	b530      	push	{r4, r5, lr}
 8010ce4:	4925      	ldr	r1, [pc, #148]	@ (8010d7c <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 8010ce6:	680d      	ldr	r5, [r1, #0]
 8010ce8:	ac03      	add	r4, sp, #12
 8010cea:	e884 000c 	stmia.w	r4, {r2, r3}
 8010cee:	461c      	mov	r4, r3
 8010cf0:	2d00      	cmp	r5, #0
 8010cf2:	d041      	beq.n	8010d78 <rmw_uxrce_get_static_input_buffer_for_entity+0x98>
 8010cf4:	462b      	mov	r3, r5
 8010cf6:	2100      	movs	r1, #0
 8010cf8:	689a      	ldr	r2, [r3, #8]
 8010cfa:	685b      	ldr	r3, [r3, #4]
 8010cfc:	f8d2 2814 	ldr.w	r2, [r2, #2068]	@ 0x814
 8010d00:	4290      	cmp	r0, r2
 8010d02:	bf08      	it	eq
 8010d04:	3101      	addeq	r1, #1
 8010d06:	2b00      	cmp	r3, #0
 8010d08:	d1f6      	bne.n	8010cf8 <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 8010d0a:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8010d0e:	2b02      	cmp	r3, #2
 8010d10:	d029      	beq.n	8010d66 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 8010d12:	d907      	bls.n	8010d24 <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 8010d14:	2b03      	cmp	r3, #3
 8010d16:	d005      	beq.n	8010d24 <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 8010d18:	2100      	movs	r1, #0
 8010d1a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010d1e:	4608      	mov	r0, r1
 8010d20:	b002      	add	sp, #8
 8010d22:	4770      	bx	lr
 8010d24:	b314      	cbz	r4, 8010d6c <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 8010d26:	428c      	cmp	r4, r1
 8010d28:	d820      	bhi.n	8010d6c <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 8010d2a:	2d00      	cmp	r5, #0
 8010d2c:	d0f4      	beq.n	8010d18 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 8010d2e:	2100      	movs	r1, #0
 8010d30:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8010d34:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 8010d38:	e002      	b.n	8010d40 <rmw_uxrce_get_static_input_buffer_for_entity+0x60>
 8010d3a:	686d      	ldr	r5, [r5, #4]
 8010d3c:	2d00      	cmp	r5, #0
 8010d3e:	d0ec      	beq.n	8010d1a <rmw_uxrce_get_static_input_buffer_for_entity+0x3a>
 8010d40:	68ab      	ldr	r3, [r5, #8]
 8010d42:	f8d3 2814 	ldr.w	r2, [r3, #2068]	@ 0x814
 8010d46:	4290      	cmp	r0, r2
 8010d48:	d1f7      	bne.n	8010d3a <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 8010d4a:	f8d3 2818 	ldr.w	r2, [r3, #2072]	@ 0x818
 8010d4e:	f503 6302 	add.w	r3, r3, #2080	@ 0x820
 8010d52:	4562      	cmp	r2, ip
 8010d54:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8010d58:	eb73 0e04 	sbcs.w	lr, r3, r4
 8010d5c:	daed      	bge.n	8010d3a <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 8010d5e:	4694      	mov	ip, r2
 8010d60:	461c      	mov	r4, r3
 8010d62:	4629      	mov	r1, r5
 8010d64:	e7e9      	b.n	8010d3a <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 8010d66:	b10c      	cbz	r4, 8010d6c <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 8010d68:	428c      	cmp	r4, r1
 8010d6a:	d9d5      	bls.n	8010d18 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 8010d6c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010d70:	4802      	ldr	r0, [pc, #8]	@ (8010d7c <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 8010d72:	b002      	add	sp, #8
 8010d74:	f007 bcc0 	b.w	80186f8 <get_memory>
 8010d78:	4629      	mov	r1, r5
 8010d7a:	e7c6      	b.n	8010d0a <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 8010d7c:	2000b524 	.word	0x2000b524

08010d80 <rmw_uxrce_find_static_input_buffer_by_owner>:
 8010d80:	4b11      	ldr	r3, [pc, #68]	@ (8010dc8 <rmw_uxrce_find_static_input_buffer_by_owner+0x48>)
 8010d82:	681b      	ldr	r3, [r3, #0]
 8010d84:	b530      	push	{r4, r5, lr}
 8010d86:	b1e3      	cbz	r3, 8010dc2 <rmw_uxrce_find_static_input_buffer_by_owner+0x42>
 8010d88:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 8010d8c:	f06f 4c00 	mvn.w	ip, #2147483648	@ 0x80000000
 8010d90:	2400      	movs	r4, #0
 8010d92:	e001      	b.n	8010d98 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 8010d94:	685b      	ldr	r3, [r3, #4]
 8010d96:	b193      	cbz	r3, 8010dbe <rmw_uxrce_find_static_input_buffer_by_owner+0x3e>
 8010d98:	689a      	ldr	r2, [r3, #8]
 8010d9a:	f8d2 1814 	ldr.w	r1, [r2, #2068]	@ 0x814
 8010d9e:	4288      	cmp	r0, r1
 8010da0:	d1f8      	bne.n	8010d94 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 8010da2:	f8d2 1818 	ldr.w	r1, [r2, #2072]	@ 0x818
 8010da6:	f8d2 281c 	ldr.w	r2, [r2, #2076]	@ 0x81c
 8010daa:	4571      	cmp	r1, lr
 8010dac:	eb72 050c 	sbcs.w	r5, r2, ip
 8010db0:	daf0      	bge.n	8010d94 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 8010db2:	461c      	mov	r4, r3
 8010db4:	685b      	ldr	r3, [r3, #4]
 8010db6:	468e      	mov	lr, r1
 8010db8:	4694      	mov	ip, r2
 8010dba:	2b00      	cmp	r3, #0
 8010dbc:	d1ec      	bne.n	8010d98 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 8010dbe:	4620      	mov	r0, r4
 8010dc0:	bd30      	pop	{r4, r5, pc}
 8010dc2:	461c      	mov	r4, r3
 8010dc4:	4620      	mov	r0, r4
 8010dc6:	bd30      	pop	{r4, r5, pc}
 8010dc8:	2000b524 	.word	0x2000b524
 8010dcc:	00000000 	.word	0x00000000

08010dd0 <rmw_uxrce_clean_expired_static_input_buffer>:
 8010dd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010dd4:	4b3c      	ldr	r3, [pc, #240]	@ (8010ec8 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 8010dd6:	ed2d 8b06 	vpush	{d8-d10}
 8010dda:	681f      	ldr	r7, [r3, #0]
 8010ddc:	b08d      	sub	sp, #52	@ 0x34
 8010dde:	f7ff fd7d 	bl	80108dc <rmw_uros_epoch_nanos>
 8010de2:	2f00      	cmp	r7, #0
 8010de4:	d05d      	beq.n	8010ea2 <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 8010de6:	46b8      	mov	r8, r7
 8010de8:	ed9f 8b31 	vldr	d8, [pc, #196]	@ 8010eb0 <rmw_uxrce_clean_expired_static_input_buffer+0xe0>
 8010dec:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8010df0:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 8010df4:	2b04      	cmp	r3, #4
 8010df6:	ed9f ab30 	vldr	d10, [pc, #192]	@ 8010eb8 <rmw_uxrce_clean_expired_static_input_buffer+0xe8>
 8010dfa:	ed9f 9b31 	vldr	d9, [pc, #196]	@ 8010ec0 <rmw_uxrce_clean_expired_static_input_buffer+0xf0>
 8010dfe:	4681      	mov	r9, r0
 8010e00:	468a      	mov	sl, r1
 8010e02:	ac04      	add	r4, sp, #16
 8010e04:	d03f      	beq.n	8010e86 <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 8010e06:	2b05      	cmp	r3, #5
 8010e08:	d044      	beq.n	8010e94 <rmw_uxrce_clean_expired_static_input_buffer+0xc4>
 8010e0a:	2b03      	cmp	r3, #3
 8010e0c:	d03b      	beq.n	8010e86 <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 8010e0e:	ed8d 8b04 	vstr	d8, [sp, #16]
 8010e12:	ed8d ab06 	vstr	d10, [sp, #24]
 8010e16:	ed8d 8b08 	vstr	d8, [sp, #32]
 8010e1a:	ed8d 8b0a 	vstr	d8, [sp, #40]	@ 0x28
 8010e1e:	ab08      	add	r3, sp, #32
 8010e20:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8010e22:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8010e26:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8010e2a:	f007 f9b1 	bl	8018190 <rmw_time_equal>
 8010e2e:	b118      	cbz	r0, 8010e38 <rmw_uxrce_clean_expired_static_input_buffer+0x68>
 8010e30:	ed8d 9b04 	vstr	d9, [sp, #16]
 8010e34:	ed8d 8b06 	vstr	d8, [sp, #24]
 8010e38:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8010e3c:	f8d5 6818 	ldr.w	r6, [r5, #2072]	@ 0x818
 8010e40:	f8d5 781c 	ldr.w	r7, [r5, #2076]	@ 0x81c
 8010e44:	f8d8 b004 	ldr.w	fp, [r8, #4]
 8010e48:	f007 f9f6 	bl	8018238 <rmw_time_total_nsec>
 8010e4c:	1830      	adds	r0, r6, r0
 8010e4e:	eb47 0101 	adc.w	r1, r7, r1
 8010e52:	4548      	cmp	r0, r9
 8010e54:	eb71 030a 	sbcs.w	r3, r1, sl
 8010e58:	f505 6502 	add.w	r5, r5, #2080	@ 0x820
 8010e5c:	db05      	blt.n	8010e6a <rmw_uxrce_clean_expired_static_input_buffer+0x9a>
 8010e5e:	e955 2302 	ldrd	r2, r3, [r5, #-8]
 8010e62:	4591      	cmp	r9, r2
 8010e64:	eb7a 0303 	sbcs.w	r3, sl, r3
 8010e68:	da03      	bge.n	8010e72 <rmw_uxrce_clean_expired_static_input_buffer+0xa2>
 8010e6a:	4817      	ldr	r0, [pc, #92]	@ (8010ec8 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 8010e6c:	4641      	mov	r1, r8
 8010e6e:	f007 fc53 	bl	8018718 <put_memory>
 8010e72:	f1bb 0f00 	cmp.w	fp, #0
 8010e76:	d014      	beq.n	8010ea2 <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 8010e78:	46d8      	mov	r8, fp
 8010e7a:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8010e7e:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 8010e82:	2b04      	cmp	r3, #4
 8010e84:	d1bf      	bne.n	8010e06 <rmw_uxrce_clean_expired_static_input_buffer+0x36>
 8010e86:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 8010e8a:	3340      	adds	r3, #64	@ 0x40
 8010e8c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8010e8e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8010e92:	e7c0      	b.n	8010e16 <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 8010e94:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 8010e98:	3348      	adds	r3, #72	@ 0x48
 8010e9a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8010e9c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8010ea0:	e7b9      	b.n	8010e16 <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 8010ea2:	b00d      	add	sp, #52	@ 0x34
 8010ea4:	ecbd 8b06 	vpop	{d8-d10}
 8010ea8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010eac:	f3af 8000 	nop.w
	...
 8010eb8:	00000001 	.word	0x00000001
 8010ebc:	00000000 	.word	0x00000000
 8010ec0:	0000001e 	.word	0x0000001e
 8010ec4:	00000000 	.word	0x00000000
 8010ec8:	2000b524 	.word	0x2000b524

08010ecc <run_xrce_session>:
 8010ecc:	b510      	push	{r4, lr}
 8010ece:	788c      	ldrb	r4, [r1, #2]
 8010ed0:	b086      	sub	sp, #24
 8010ed2:	2c01      	cmp	r4, #1
 8010ed4:	f8ad 200e 	strh.w	r2, [sp, #14]
 8010ed8:	d00c      	beq.n	8010ef4 <run_xrce_session+0x28>
 8010eda:	4619      	mov	r1, r3
 8010edc:	2301      	movs	r3, #1
 8010ede:	9300      	str	r3, [sp, #0]
 8010ee0:	f10d 020e 	add.w	r2, sp, #14
 8010ee4:	f10d 0317 	add.w	r3, sp, #23
 8010ee8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8010eec:	f001 fc82 	bl	80127f4 <uxr_run_session_until_all_status>
 8010ef0:	b006      	add	sp, #24
 8010ef2:	bd10      	pop	{r4, pc}
 8010ef4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8010ef8:	f001 f896 	bl	8012028 <uxr_flash_output_streams>
 8010efc:	4620      	mov	r0, r4
 8010efe:	b006      	add	sp, #24
 8010f00:	bd10      	pop	{r4, pc}
 8010f02:	bf00      	nop

08010f04 <convert_qos_profile>:
 8010f04:	7a4a      	ldrb	r2, [r1, #9]
 8010f06:	f891 c008 	ldrb.w	ip, [r1, #8]
 8010f0a:	2a02      	cmp	r2, #2
 8010f0c:	bf18      	it	ne
 8010f0e:	2200      	movne	r2, #0
 8010f10:	7002      	strb	r2, [r0, #0]
 8010f12:	780a      	ldrb	r2, [r1, #0]
 8010f14:	8889      	ldrh	r1, [r1, #4]
 8010f16:	8081      	strh	r1, [r0, #4]
 8010f18:	f1ac 0c02 	sub.w	ip, ip, #2
 8010f1c:	f1a2 0202 	sub.w	r2, r2, #2
 8010f20:	fabc fc8c 	clz	ip, ip
 8010f24:	fab2 f282 	clz	r2, r2
 8010f28:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8010f2c:	0952      	lsrs	r2, r2, #5
 8010f2e:	f880 c001 	strb.w	ip, [r0, #1]
 8010f32:	7082      	strb	r2, [r0, #2]
 8010f34:	4770      	bx	lr
 8010f36:	bf00      	nop

08010f38 <generate_type_name>:
 8010f38:	b530      	push	{r4, r5, lr}
 8010f3a:	2300      	movs	r3, #0
 8010f3c:	700b      	strb	r3, [r1, #0]
 8010f3e:	6803      	ldr	r3, [r0, #0]
 8010f40:	b087      	sub	sp, #28
 8010f42:	4614      	mov	r4, r2
 8010f44:	b1d3      	cbz	r3, 8010f7c <generate_type_name+0x44>
 8010f46:	4a0f      	ldr	r2, [pc, #60]	@ (8010f84 <generate_type_name+0x4c>)
 8010f48:	4615      	mov	r5, r2
 8010f4a:	9203      	str	r2, [sp, #12]
 8010f4c:	9500      	str	r5, [sp, #0]
 8010f4e:	6842      	ldr	r2, [r0, #4]
 8010f50:	480d      	ldr	r0, [pc, #52]	@ (8010f88 <generate_type_name+0x50>)
 8010f52:	9001      	str	r0, [sp, #4]
 8010f54:	4608      	mov	r0, r1
 8010f56:	490d      	ldr	r1, [pc, #52]	@ (8010f8c <generate_type_name+0x54>)
 8010f58:	9204      	str	r2, [sp, #16]
 8010f5a:	9105      	str	r1, [sp, #20]
 8010f5c:	9102      	str	r1, [sp, #8]
 8010f5e:	4a0c      	ldr	r2, [pc, #48]	@ (8010f90 <generate_type_name+0x58>)
 8010f60:	4621      	mov	r1, r4
 8010f62:	f00a f88f 	bl	801b084 <sniprintf>
 8010f66:	2800      	cmp	r0, #0
 8010f68:	db05      	blt.n	8010f76 <generate_type_name+0x3e>
 8010f6a:	4284      	cmp	r4, r0
 8010f6c:	bfd4      	ite	le
 8010f6e:	2000      	movle	r0, #0
 8010f70:	2001      	movgt	r0, #1
 8010f72:	b007      	add	sp, #28
 8010f74:	bd30      	pop	{r4, r5, pc}
 8010f76:	2000      	movs	r0, #0
 8010f78:	b007      	add	sp, #28
 8010f7a:	bd30      	pop	{r4, r5, pc}
 8010f7c:	4b05      	ldr	r3, [pc, #20]	@ (8010f94 <generate_type_name+0x5c>)
 8010f7e:	4a01      	ldr	r2, [pc, #4]	@ (8010f84 <generate_type_name+0x4c>)
 8010f80:	461d      	mov	r5, r3
 8010f82:	e7e2      	b.n	8010f4a <generate_type_name+0x12>
 8010f84:	0801deec 	.word	0x0801deec
 8010f88:	0801df04 	.word	0x0801df04
 8010f8c:	0801df00 	.word	0x0801df00
 8010f90:	0801def0 	.word	0x0801def0
 8010f94:	0801e458 	.word	0x0801e458

08010f98 <generate_topic_name>:
 8010f98:	b510      	push	{r4, lr}
 8010f9a:	b082      	sub	sp, #8
 8010f9c:	4614      	mov	r4, r2
 8010f9e:	9000      	str	r0, [sp, #0]
 8010fa0:	4b08      	ldr	r3, [pc, #32]	@ (8010fc4 <generate_topic_name+0x2c>)
 8010fa2:	4a09      	ldr	r2, [pc, #36]	@ (8010fc8 <generate_topic_name+0x30>)
 8010fa4:	4608      	mov	r0, r1
 8010fa6:	4621      	mov	r1, r4
 8010fa8:	f00a f86c 	bl	801b084 <sniprintf>
 8010fac:	2800      	cmp	r0, #0
 8010fae:	db05      	blt.n	8010fbc <generate_topic_name+0x24>
 8010fb0:	4284      	cmp	r4, r0
 8010fb2:	bfd4      	ite	le
 8010fb4:	2000      	movle	r0, #0
 8010fb6:	2001      	movgt	r0, #1
 8010fb8:	b002      	add	sp, #8
 8010fba:	bd10      	pop	{r4, pc}
 8010fbc:	2000      	movs	r0, #0
 8010fbe:	b002      	add	sp, #8
 8010fc0:	bd10      	pop	{r4, pc}
 8010fc2:	bf00      	nop
 8010fc4:	0801e6ec 	.word	0x0801e6ec
 8010fc8:	0801df08 	.word	0x0801df08

08010fcc <is_uxrce_rmw_identifier_valid>:
 8010fcc:	b510      	push	{r4, lr}
 8010fce:	4604      	mov	r4, r0
 8010fd0:	b140      	cbz	r0, 8010fe4 <is_uxrce_rmw_identifier_valid+0x18>
 8010fd2:	f007 fbf9 	bl	80187c8 <rmw_get_implementation_identifier>
 8010fd6:	4601      	mov	r1, r0
 8010fd8:	4620      	mov	r0, r4
 8010fda:	f7ef f921 	bl	8000220 <strcmp>
 8010fde:	fab0 f080 	clz	r0, r0
 8010fe2:	0940      	lsrs	r0, r0, #5
 8010fe4:	bd10      	pop	{r4, pc}
 8010fe6:	bf00      	nop

08010fe8 <get_message_typesupport_handle>:
 8010fe8:	6883      	ldr	r3, [r0, #8]
 8010fea:	4718      	bx	r3

08010fec <get_message_typesupport_handle_function>:
 8010fec:	b510      	push	{r4, lr}
 8010fee:	4604      	mov	r4, r0
 8010ff0:	6800      	ldr	r0, [r0, #0]
 8010ff2:	f7ef f915 	bl	8000220 <strcmp>
 8010ff6:	2800      	cmp	r0, #0
 8010ff8:	bf0c      	ite	eq
 8010ffa:	4620      	moveq	r0, r4
 8010ffc:	2000      	movne	r0, #0
 8010ffe:	bd10      	pop	{r4, pc}

08011000 <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 8011000:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011004:	6805      	ldr	r5, [r0, #0]
 8011006:	4604      	mov	r4, r0
 8011008:	4628      	mov	r0, r5
 801100a:	460e      	mov	r6, r1
 801100c:	f7ef f908 	bl	8000220 <strcmp>
 8011010:	b1c8      	cbz	r0, 8011046 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x46>
 8011012:	4b11      	ldr	r3, [pc, #68]	@ (8011058 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x58>)
 8011014:	681b      	ldr	r3, [r3, #0]
 8011016:	429d      	cmp	r5, r3
 8011018:	d112      	bne.n	8011040 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 801101a:	f8d4 8004 	ldr.w	r8, [r4, #4]
 801101e:	f8d8 4000 	ldr.w	r4, [r8]
 8011022:	b16c      	cbz	r4, 8011040 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 8011024:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8011028:	2700      	movs	r7, #0
 801102a:	3d04      	subs	r5, #4
 801102c:	f855 0f04 	ldr.w	r0, [r5, #4]!
 8011030:	4631      	mov	r1, r6
 8011032:	f7ef f8f5 	bl	8000220 <strcmp>
 8011036:	00bb      	lsls	r3, r7, #2
 8011038:	b140      	cbz	r0, 801104c <rosidl_typesupport_c__get_message_typesupport_handle_function+0x4c>
 801103a:	3701      	adds	r7, #1
 801103c:	42bc      	cmp	r4, r7
 801103e:	d1f5      	bne.n	801102c <rosidl_typesupport_c__get_message_typesupport_handle_function+0x2c>
 8011040:	2000      	movs	r0, #0
 8011042:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011046:	4620      	mov	r0, r4
 8011048:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801104c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8011050:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011054:	58d3      	ldr	r3, [r2, r3]
 8011056:	4718      	bx	r3
 8011058:	200001d0 	.word	0x200001d0

0801105c <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray>:
 801105c:	4b04      	ldr	r3, [pc, #16]	@ (8011070 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray+0x14>)
 801105e:	681a      	ldr	r2, [r3, #0]
 8011060:	b10a      	cbz	r2, 8011066 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray+0xa>
 8011062:	4803      	ldr	r0, [pc, #12]	@ (8011070 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray+0x14>)
 8011064:	4770      	bx	lr
 8011066:	4a03      	ldr	r2, [pc, #12]	@ (8011074 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray+0x18>)
 8011068:	4801      	ldr	r0, [pc, #4]	@ (8011070 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray+0x14>)
 801106a:	6812      	ldr	r2, [r2, #0]
 801106c:	601a      	str	r2, [r3, #0]
 801106e:	4770      	bx	lr
 8011070:	200001e0 	.word	0x200001e0
 8011074:	200001d0 	.word	0x200001d0

08011078 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray>:
 8011078:	4a02      	ldr	r2, [pc, #8]	@ (8011084 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray+0xc>)
 801107a:	4b03      	ldr	r3, [pc, #12]	@ (8011088 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray+0x10>)
 801107c:	6812      	ldr	r2, [r2, #0]
 801107e:	601a      	str	r2, [r3, #0]
 8011080:	4770      	bx	lr
 8011082:	bf00      	nop
 8011084:	200001d0 	.word	0x200001d0
 8011088:	200001e0 	.word	0x200001e0

0801108c <std_msgs__msg__Float64MultiArray__rosidl_typesupport_introspection_c__size_function__Float64MultiArray__data>:
 801108c:	6840      	ldr	r0, [r0, #4]
 801108e:	4770      	bx	lr

08011090 <std_msgs__msg__Float64MultiArray__rosidl_typesupport_introspection_c__get_const_function__Float64MultiArray__data>:
 8011090:	6800      	ldr	r0, [r0, #0]
 8011092:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 8011096:	4770      	bx	lr

08011098 <std_msgs__msg__Float64MultiArray__rosidl_typesupport_introspection_c__fetch_function__Float64MultiArray__data>:
 8011098:	6803      	ldr	r3, [r0, #0]
 801109a:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 801109e:	e9d1 0100 	ldrd	r0, r1, [r1]
 80110a2:	e9c2 0100 	strd	r0, r1, [r2]
 80110a6:	4770      	bx	lr

080110a8 <std_msgs__msg__Float64MultiArray__rosidl_typesupport_introspection_c__assign_function__Float64MultiArray__data>:
 80110a8:	6803      	ldr	r3, [r0, #0]
 80110aa:	ed92 7b00 	vldr	d7, [r2]
 80110ae:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 80110b2:	ed81 7b00 	vstr	d7, [r1]
 80110b6:	4770      	bx	lr

080110b8 <std_msgs__msg__Float64MultiArray__rosidl_typesupport_introspection_c__Float64MultiArray_init_function>:
 80110b8:	f007 bf66 	b.w	8018f88 <std_msgs__msg__Float64MultiArray__init>

080110bc <std_msgs__msg__Float64MultiArray__rosidl_typesupport_introspection_c__Float64MultiArray_fini_function>:
 80110bc:	f007 bf88 	b.w	8018fd0 <std_msgs__msg__Float64MultiArray__fini>

080110c0 <std_msgs__msg__Float64MultiArray__rosidl_typesupport_introspection_c__resize_function__Float64MultiArray__data>:
 80110c0:	b510      	push	{r4, lr}
 80110c2:	b082      	sub	sp, #8
 80110c4:	4604      	mov	r4, r0
 80110c6:	9101      	str	r1, [sp, #4]
 80110c8:	f007 ff4a 	bl	8018f60 <rosidl_runtime_c__double__Sequence__fini>
 80110cc:	9901      	ldr	r1, [sp, #4]
 80110ce:	4620      	mov	r0, r4
 80110d0:	b002      	add	sp, #8
 80110d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80110d6:	f007 bf2b 	b.w	8018f30 <rosidl_runtime_c__double__Sequence__init>
 80110da:	bf00      	nop

080110dc <std_msgs__msg__Float64MultiArray__rosidl_typesupport_introspection_c__get_function__Float64MultiArray__data>:
 80110dc:	6800      	ldr	r0, [r0, #0]
 80110de:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 80110e2:	4770      	bx	lr

080110e4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray>:
 80110e4:	b508      	push	{r3, lr}
 80110e6:	f000 f857 	bl	8011198 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout>
 80110ea:	4b06      	ldr	r3, [pc, #24]	@ (8011104 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray+0x20>)
 80110ec:	4906      	ldr	r1, [pc, #24]	@ (8011108 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray+0x24>)
 80110ee:	681a      	ldr	r2, [r3, #0]
 80110f0:	60c8      	str	r0, [r1, #12]
 80110f2:	b10a      	cbz	r2, 80110f8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray+0x14>
 80110f4:	4803      	ldr	r0, [pc, #12]	@ (8011104 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray+0x20>)
 80110f6:	bd08      	pop	{r3, pc}
 80110f8:	4a04      	ldr	r2, [pc, #16]	@ (801110c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray+0x28>)
 80110fa:	4802      	ldr	r0, [pc, #8]	@ (8011104 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray+0x20>)
 80110fc:	6812      	ldr	r2, [r2, #0]
 80110fe:	601a      	str	r2, [r3, #0]
 8011100:	bd08      	pop	{r3, pc}
 8011102:	bf00      	nop
 8011104:	20000264 	.word	0x20000264
 8011108:	200001ec 	.word	0x200001ec
 801110c:	200001d4 	.word	0x200001d4

08011110 <std_msgs__msg__MultiArrayLayout__rosidl_typesupport_introspection_c__size_function__MultiArrayLayout__dim>:
 8011110:	6840      	ldr	r0, [r0, #4]
 8011112:	4770      	bx	lr

08011114 <std_msgs__msg__MultiArrayLayout__rosidl_typesupport_introspection_c__get_const_function__MultiArrayLayout__dim>:
 8011114:	6800      	ldr	r0, [r0, #0]
 8011116:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 801111a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 801111e:	4770      	bx	lr

08011120 <std_msgs__msg__MultiArrayLayout__rosidl_typesupport_introspection_c__fetch_function__MultiArrayLayout__dim>:
 8011120:	6803      	ldr	r3, [r0, #0]
 8011122:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8011126:	b500      	push	{lr}
 8011128:	eb03 0e81 	add.w	lr, r3, r1, lsl #2
 801112c:	4694      	mov	ip, r2
 801112e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8011132:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011136:	f8de 3000 	ldr.w	r3, [lr]
 801113a:	f8cc 3000 	str.w	r3, [ip]
 801113e:	f85d fb04 	ldr.w	pc, [sp], #4
 8011142:	bf00      	nop

08011144 <std_msgs__msg__MultiArrayLayout__rosidl_typesupport_introspection_c__assign_function__MultiArrayLayout__dim>:
 8011144:	6803      	ldr	r3, [r0, #0]
 8011146:	b500      	push	{lr}
 8011148:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 801114c:	4696      	mov	lr, r2
 801114e:	eb03 0c81 	add.w	ip, r3, r1, lsl #2
 8011152:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8011156:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801115a:	f8de 3000 	ldr.w	r3, [lr]
 801115e:	f8cc 3000 	str.w	r3, [ip]
 8011162:	f85d fb04 	ldr.w	pc, [sp], #4
 8011166:	bf00      	nop

08011168 <std_msgs__msg__MultiArrayLayout__rosidl_typesupport_introspection_c__MultiArrayLayout_init_function>:
 8011168:	f007 bfc8 	b.w	80190fc <std_msgs__msg__MultiArrayLayout__init>

0801116c <std_msgs__msg__MultiArrayLayout__rosidl_typesupport_introspection_c__MultiArrayLayout_fini_function>:
 801116c:	f007 bfd8 	b.w	8019120 <std_msgs__msg__MultiArrayLayout__fini>

08011170 <std_msgs__msg__MultiArrayLayout__rosidl_typesupport_introspection_c__resize_function__MultiArrayLayout__dim>:
 8011170:	b510      	push	{r4, lr}
 8011172:	b082      	sub	sp, #8
 8011174:	4604      	mov	r4, r0
 8011176:	9101      	str	r1, [sp, #4]
 8011178:	f007 ff98 	bl	80190ac <std_msgs__msg__MultiArrayDimension__Sequence__fini>
 801117c:	9901      	ldr	r1, [sp, #4]
 801117e:	4620      	mov	r0, r4
 8011180:	b002      	add	sp, #8
 8011182:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011186:	f007 bf8d 	b.w	80190a4 <std_msgs__msg__MultiArrayDimension__Sequence__init>
 801118a:	bf00      	nop

0801118c <std_msgs__msg__MultiArrayLayout__rosidl_typesupport_introspection_c__get_function__MultiArrayLayout__dim>:
 801118c:	6800      	ldr	r0, [r0, #0]
 801118e:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8011192:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8011196:	4770      	bx	lr

08011198 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout>:
 8011198:	b508      	push	{r3, lr}
 801119a:	f007 ffc9 	bl	8019130 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension>
 801119e:	4b06      	ldr	r3, [pc, #24]	@ (80111b8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout+0x20>)
 80111a0:	4906      	ldr	r1, [pc, #24]	@ (80111bc <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout+0x24>)
 80111a2:	681a      	ldr	r2, [r3, #0]
 80111a4:	60c8      	str	r0, [r1, #12]
 80111a6:	b10a      	cbz	r2, 80111ac <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout+0x14>
 80111a8:	4803      	ldr	r0, [pc, #12]	@ (80111b8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout+0x20>)
 80111aa:	bd08      	pop	{r3, pc}
 80111ac:	4a04      	ldr	r2, [pc, #16]	@ (80111c0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout+0x28>)
 80111ae:	4802      	ldr	r0, [pc, #8]	@ (80111b8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout+0x20>)
 80111b0:	6812      	ldr	r2, [r2, #0]
 80111b2:	601a      	str	r2, [r3, #0]
 80111b4:	bd08      	pop	{r3, pc}
 80111b6:	bf00      	nop
 80111b8:	200002e8 	.word	0x200002e8
 80111bc:	20000270 	.word	0x20000270
 80111c0:	200001d4 	.word	0x200001d4

080111c4 <_Float64MultiArray__max_serialized_size>:
 80111c4:	b500      	push	{lr}
 80111c6:	b083      	sub	sp, #12
 80111c8:	2301      	movs	r3, #1
 80111ca:	2100      	movs	r1, #0
 80111cc:	f10d 0007 	add.w	r0, sp, #7
 80111d0:	f88d 3007 	strb.w	r3, [sp, #7]
 80111d4:	f000 f91c 	bl	8011410 <max_serialized_size_std_msgs__msg__MultiArrayLayout>
 80111d8:	b003      	add	sp, #12
 80111da:	f85d fb04 	ldr.w	pc, [sp], #4
 80111de:	bf00      	nop

080111e0 <get_serialized_size_std_msgs__msg__Float64MultiArray>:
 80111e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80111e2:	4604      	mov	r4, r0
 80111e4:	b160      	cbz	r0, 8011200 <get_serialized_size_std_msgs__msg__Float64MultiArray+0x20>
 80111e6:	460d      	mov	r5, r1
 80111e8:	f000 f8b6 	bl	8011358 <get_serialized_size_std_msgs__msg__MultiArrayLayout>
 80111ec:	182e      	adds	r6, r5, r0
 80111ee:	4630      	mov	r0, r6
 80111f0:	2104      	movs	r1, #4
 80111f2:	6967      	ldr	r7, [r4, #20]
 80111f4:	f7fd f9a8 	bl	800e548 <ucdr_alignment>
 80111f8:	1d03      	adds	r3, r0, #4
 80111fa:	441e      	add	r6, r3
 80111fc:	b90f      	cbnz	r7, 8011202 <get_serialized_size_std_msgs__msg__Float64MultiArray+0x22>
 80111fe:	1b70      	subs	r0, r6, r5
 8011200:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011202:	4630      	mov	r0, r6
 8011204:	2108      	movs	r1, #8
 8011206:	f7fd f99f 	bl	800e548 <ucdr_alignment>
 801120a:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 801120e:	181e      	adds	r6, r3, r0
 8011210:	1b70      	subs	r0, r6, r5
 8011212:	e7f5      	b.n	8011200 <get_serialized_size_std_msgs__msg__Float64MultiArray+0x20>

08011214 <_Float64MultiArray__cdr_deserialize>:
 8011214:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011216:	460c      	mov	r4, r1
 8011218:	b083      	sub	sp, #12
 801121a:	b1d1      	cbz	r1, 8011252 <_Float64MultiArray__cdr_deserialize+0x3e>
 801121c:	4606      	mov	r6, r0
 801121e:	f000 f901 	bl	8011424 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout>
 8011222:	6843      	ldr	r3, [r0, #4]
 8011224:	4621      	mov	r1, r4
 8011226:	68db      	ldr	r3, [r3, #12]
 8011228:	4630      	mov	r0, r6
 801122a:	4798      	blx	r3
 801122c:	69a7      	ldr	r7, [r4, #24]
 801122e:	6921      	ldr	r1, [r4, #16]
 8011230:	ab01      	add	r3, sp, #4
 8011232:	463a      	mov	r2, r7
 8011234:	4630      	mov	r0, r6
 8011236:	f000 f999 	bl	801156c <ucdr_deserialize_sequence_double>
 801123a:	9b01      	ldr	r3, [sp, #4]
 801123c:	4605      	mov	r5, r0
 801123e:	b920      	cbnz	r0, 801124a <_Float64MultiArray__cdr_deserialize+0x36>
 8011240:	429f      	cmp	r7, r3
 8011242:	d30a      	bcc.n	801125a <_Float64MultiArray__cdr_deserialize+0x46>
 8011244:	4628      	mov	r0, r5
 8011246:	b003      	add	sp, #12
 8011248:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801124a:	4628      	mov	r0, r5
 801124c:	6163      	str	r3, [r4, #20]
 801124e:	b003      	add	sp, #12
 8011250:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011252:	460d      	mov	r5, r1
 8011254:	4628      	mov	r0, r5
 8011256:	b003      	add	sp, #12
 8011258:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801125a:	2301      	movs	r3, #1
 801125c:	75b0      	strb	r0, [r6, #22]
 801125e:	7573      	strb	r3, [r6, #21]
 8011260:	4630      	mov	r0, r6
 8011262:	6165      	str	r5, [r4, #20]
 8011264:	2108      	movs	r1, #8
 8011266:	f7fd f985 	bl	800e574 <ucdr_align_to>
 801126a:	9901      	ldr	r1, [sp, #4]
 801126c:	4630      	mov	r0, r6
 801126e:	00c9      	lsls	r1, r1, #3
 8011270:	f7fd f9b6 	bl	800e5e0 <ucdr_advance_buffer>
 8011274:	4628      	mov	r0, r5
 8011276:	b003      	add	sp, #12
 8011278:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801127a:	bf00      	nop

0801127c <_Float64MultiArray__cdr_serialize>:
 801127c:	b180      	cbz	r0, 80112a0 <_Float64MultiArray__cdr_serialize+0x24>
 801127e:	b538      	push	{r3, r4, r5, lr}
 8011280:	460d      	mov	r5, r1
 8011282:	4604      	mov	r4, r0
 8011284:	f000 f8ce 	bl	8011424 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout>
 8011288:	6843      	ldr	r3, [r0, #4]
 801128a:	4629      	mov	r1, r5
 801128c:	689b      	ldr	r3, [r3, #8]
 801128e:	4620      	mov	r0, r4
 8011290:	4798      	blx	r3
 8011292:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
 8011296:	4628      	mov	r0, r5
 8011298:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801129c:	f000 b954 	b.w	8011548 <ucdr_serialize_sequence_double>
 80112a0:	4770      	bx	lr
 80112a2:	bf00      	nop

080112a4 <_Float64MultiArray__get_serialized_size>:
 80112a4:	b570      	push	{r4, r5, r6, lr}
 80112a6:	4604      	mov	r4, r0
 80112a8:	b150      	cbz	r0, 80112c0 <_Float64MultiArray__get_serialized_size+0x1c>
 80112aa:	2100      	movs	r1, #0
 80112ac:	f000 f854 	bl	8011358 <get_serialized_size_std_msgs__msg__MultiArrayLayout>
 80112b0:	2104      	movs	r1, #4
 80112b2:	6966      	ldr	r6, [r4, #20]
 80112b4:	4605      	mov	r5, r0
 80112b6:	f7fd f947 	bl	800e548 <ucdr_alignment>
 80112ba:	4428      	add	r0, r5
 80112bc:	1d04      	adds	r4, r0, #4
 80112be:	b90e      	cbnz	r6, 80112c4 <_Float64MultiArray__get_serialized_size+0x20>
 80112c0:	4620      	mov	r0, r4
 80112c2:	bd70      	pop	{r4, r5, r6, pc}
 80112c4:	4620      	mov	r0, r4
 80112c6:	2108      	movs	r1, #8
 80112c8:	f7fd f93e 	bl	800e548 <ucdr_alignment>
 80112cc:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 80112d0:	4404      	add	r4, r0
 80112d2:	4620      	mov	r0, r4
 80112d4:	bd70      	pop	{r4, r5, r6, pc}
 80112d6:	bf00      	nop

080112d8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray>:
 80112d8:	4800      	ldr	r0, [pc, #0]	@ (80112dc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray+0x4>)
 80112da:	4770      	bx	lr
 80112dc:	200002f4 	.word	0x200002f4

080112e0 <_MultiArrayLayout__max_serialized_size>:
 80112e0:	b508      	push	{r3, lr}
 80112e2:	2104      	movs	r1, #4
 80112e4:	2000      	movs	r0, #0
 80112e6:	f7fd f92f 	bl	800e548 <ucdr_alignment>
 80112ea:	3004      	adds	r0, #4
 80112ec:	bd08      	pop	{r3, pc}
 80112ee:	bf00      	nop

080112f0 <get_serialized_size_std_msgs__msg__MultiArrayLayout.part.0>:
 80112f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80112f4:	4689      	mov	r9, r1
 80112f6:	f8d0 8004 	ldr.w	r8, [r0, #4]
 80112fa:	4607      	mov	r7, r0
 80112fc:	2104      	movs	r1, #4
 80112fe:	4648      	mov	r0, r9
 8011300:	f7fd f922 	bl	800e548 <ucdr_alignment>
 8011304:	f109 0304 	add.w	r3, r9, #4
 8011308:	18c6      	adds	r6, r0, r3
 801130a:	f1b8 0f00 	cmp.w	r8, #0
 801130e:	d018      	beq.n	8011342 <get_serialized_size_std_msgs__msg__MultiArrayLayout.part.0+0x52>
 8011310:	2500      	movs	r5, #0
 8011312:	f007 ffab 	bl	801926c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension>
 8011316:	683a      	ldr	r2, [r7, #0]
 8011318:	6843      	ldr	r3, [r0, #4]
 801131a:	eb05 0085 	add.w	r0, r5, r5, lsl #2
 801131e:	4631      	mov	r1, r6
 8011320:	695b      	ldr	r3, [r3, #20]
 8011322:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 8011326:	4798      	blx	r3
 8011328:	4604      	mov	r4, r0
 801132a:	2c04      	cmp	r4, #4
 801132c:	4621      	mov	r1, r4
 801132e:	4630      	mov	r0, r6
 8011330:	bf28      	it	cs
 8011332:	2104      	movcs	r1, #4
 8011334:	f7fd f908 	bl	800e548 <ucdr_alignment>
 8011338:	3501      	adds	r5, #1
 801133a:	4404      	add	r4, r0
 801133c:	45a8      	cmp	r8, r5
 801133e:	4426      	add	r6, r4
 8011340:	d1e7      	bne.n	8011312 <get_serialized_size_std_msgs__msg__MultiArrayLayout.part.0+0x22>
 8011342:	2104      	movs	r1, #4
 8011344:	4630      	mov	r0, r6
 8011346:	f7fd f8ff 	bl	800e548 <ucdr_alignment>
 801134a:	f1c9 0904 	rsb	r9, r9, #4
 801134e:	444e      	add	r6, r9
 8011350:	4430      	add	r0, r6
 8011352:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011356:	bf00      	nop

08011358 <get_serialized_size_std_msgs__msg__MultiArrayLayout>:
 8011358:	b108      	cbz	r0, 801135e <get_serialized_size_std_msgs__msg__MultiArrayLayout+0x6>
 801135a:	f7ff bfc9 	b.w	80112f0 <get_serialized_size_std_msgs__msg__MultiArrayLayout.part.0>
 801135e:	4770      	bx	lr

08011360 <_MultiArrayLayout__get_serialized_size>:
 8011360:	b110      	cbz	r0, 8011368 <_MultiArrayLayout__get_serialized_size+0x8>
 8011362:	2100      	movs	r1, #0
 8011364:	f7ff bfc4 	b.w	80112f0 <get_serialized_size_std_msgs__msg__MultiArrayLayout.part.0>
 8011368:	4770      	bx	lr
 801136a:	bf00      	nop

0801136c <_MultiArrayLayout__cdr_deserialize>:
 801136c:	b349      	cbz	r1, 80113c2 <_MultiArrayLayout__cdr_deserialize+0x56>
 801136e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011370:	460e      	mov	r6, r1
 8011372:	b083      	sub	sp, #12
 8011374:	a901      	add	r1, sp, #4
 8011376:	4607      	mov	r7, r0
 8011378:	f7fc f946 	bl	800d608 <ucdr_deserialize_uint32_t>
 801137c:	9b01      	ldr	r3, [sp, #4]
 801137e:	68b2      	ldr	r2, [r6, #8]
 8011380:	429a      	cmp	r2, r3
 8011382:	d31b      	bcc.n	80113bc <_MultiArrayLayout__cdr_deserialize+0x50>
 8011384:	6073      	str	r3, [r6, #4]
 8011386:	b18b      	cbz	r3, 80113ac <_MultiArrayLayout__cdr_deserialize+0x40>
 8011388:	2400      	movs	r4, #0
 801138a:	4625      	mov	r5, r4
 801138c:	e002      	b.n	8011394 <_MultiArrayLayout__cdr_deserialize+0x28>
 801138e:	9b01      	ldr	r3, [sp, #4]
 8011390:	429d      	cmp	r5, r3
 8011392:	d20b      	bcs.n	80113ac <_MultiArrayLayout__cdr_deserialize+0x40>
 8011394:	f007 ff6a 	bl	801926c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension>
 8011398:	6831      	ldr	r1, [r6, #0]
 801139a:	6843      	ldr	r3, [r0, #4]
 801139c:	4421      	add	r1, r4
 801139e:	68db      	ldr	r3, [r3, #12]
 80113a0:	4638      	mov	r0, r7
 80113a2:	4798      	blx	r3
 80113a4:	3501      	adds	r5, #1
 80113a6:	3414      	adds	r4, #20
 80113a8:	2800      	cmp	r0, #0
 80113aa:	d1f0      	bne.n	801138e <_MultiArrayLayout__cdr_deserialize+0x22>
 80113ac:	f106 010c 	add.w	r1, r6, #12
 80113b0:	4638      	mov	r0, r7
 80113b2:	b003      	add	sp, #12
 80113b4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80113b8:	f7fc b926 	b.w	800d608 <ucdr_deserialize_uint32_t>
 80113bc:	2000      	movs	r0, #0
 80113be:	b003      	add	sp, #12
 80113c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80113c2:	2000      	movs	r0, #0
 80113c4:	4770      	bx	lr
 80113c6:	bf00      	nop

080113c8 <_MultiArrayLayout__cdr_serialize>:
 80113c8:	b308      	cbz	r0, 801140e <_MultiArrayLayout__cdr_serialize+0x46>
 80113ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80113cc:	6847      	ldr	r7, [r0, #4]
 80113ce:	460e      	mov	r6, r1
 80113d0:	4605      	mov	r5, r0
 80113d2:	4608      	mov	r0, r1
 80113d4:	4639      	mov	r1, r7
 80113d6:	f7fb ffe7 	bl	800d3a8 <ucdr_serialize_uint32_t>
 80113da:	b190      	cbz	r0, 8011402 <_MultiArrayLayout__cdr_serialize+0x3a>
 80113dc:	b18f      	cbz	r7, 8011402 <_MultiArrayLayout__cdr_serialize+0x3a>
 80113de:	2400      	movs	r4, #0
 80113e0:	e001      	b.n	80113e6 <_MultiArrayLayout__cdr_serialize+0x1e>
 80113e2:	42a7      	cmp	r7, r4
 80113e4:	d00d      	beq.n	8011402 <_MultiArrayLayout__cdr_serialize+0x3a>
 80113e6:	f007 ff41 	bl	801926c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension>
 80113ea:	682a      	ldr	r2, [r5, #0]
 80113ec:	6843      	ldr	r3, [r0, #4]
 80113ee:	eb04 0084 	add.w	r0, r4, r4, lsl #2
 80113f2:	689b      	ldr	r3, [r3, #8]
 80113f4:	4631      	mov	r1, r6
 80113f6:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 80113fa:	3401      	adds	r4, #1
 80113fc:	4798      	blx	r3
 80113fe:	2800      	cmp	r0, #0
 8011400:	d1ef      	bne.n	80113e2 <_MultiArrayLayout__cdr_serialize+0x1a>
 8011402:	68e9      	ldr	r1, [r5, #12]
 8011404:	4630      	mov	r0, r6
 8011406:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801140a:	f7fb bfcd 	b.w	800d3a8 <ucdr_serialize_uint32_t>
 801140e:	4770      	bx	lr

08011410 <max_serialized_size_std_msgs__msg__MultiArrayLayout>:
 8011410:	b508      	push	{r3, lr}
 8011412:	4603      	mov	r3, r0
 8011414:	2200      	movs	r2, #0
 8011416:	4608      	mov	r0, r1
 8011418:	701a      	strb	r2, [r3, #0]
 801141a:	2104      	movs	r1, #4
 801141c:	f7fd f894 	bl	800e548 <ucdr_alignment>
 8011420:	3004      	adds	r0, #4
 8011422:	bd08      	pop	{r3, pc}

08011424 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout>:
 8011424:	4800      	ldr	r0, [pc, #0]	@ (8011428 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout+0x4>)
 8011426:	4770      	bx	lr
 8011428:	2000031c 	.word	0x2000031c

0801142c <geometry_msgs__msg__Twist__init>:
 801142c:	b570      	push	{r4, r5, r6, lr}
 801142e:	4605      	mov	r5, r0
 8011430:	b1a8      	cbz	r0, 801145e <geometry_msgs__msg__Twist__init+0x32>
 8011432:	f000 f82b 	bl	801148c <geometry_msgs__msg__Vector3__init>
 8011436:	4604      	mov	r4, r0
 8011438:	b140      	cbz	r0, 801144c <geometry_msgs__msg__Twist__init+0x20>
 801143a:	f105 0618 	add.w	r6, r5, #24
 801143e:	4630      	mov	r0, r6
 8011440:	f000 f824 	bl	801148c <geometry_msgs__msg__Vector3__init>
 8011444:	4604      	mov	r4, r0
 8011446:	b168      	cbz	r0, 8011464 <geometry_msgs__msg__Twist__init+0x38>
 8011448:	4620      	mov	r0, r4
 801144a:	bd70      	pop	{r4, r5, r6, pc}
 801144c:	4628      	mov	r0, r5
 801144e:	f000 f821 	bl	8011494 <geometry_msgs__msg__Vector3__fini>
 8011452:	f105 0018 	add.w	r0, r5, #24
 8011456:	f000 f81d 	bl	8011494 <geometry_msgs__msg__Vector3__fini>
 801145a:	4620      	mov	r0, r4
 801145c:	bd70      	pop	{r4, r5, r6, pc}
 801145e:	4604      	mov	r4, r0
 8011460:	4620      	mov	r0, r4
 8011462:	bd70      	pop	{r4, r5, r6, pc}
 8011464:	4628      	mov	r0, r5
 8011466:	f000 f815 	bl	8011494 <geometry_msgs__msg__Vector3__fini>
 801146a:	4630      	mov	r0, r6
 801146c:	f000 f812 	bl	8011494 <geometry_msgs__msg__Vector3__fini>
 8011470:	e7ea      	b.n	8011448 <geometry_msgs__msg__Twist__init+0x1c>
 8011472:	bf00      	nop

08011474 <geometry_msgs__msg__Twist__fini>:
 8011474:	b148      	cbz	r0, 801148a <geometry_msgs__msg__Twist__fini+0x16>
 8011476:	b510      	push	{r4, lr}
 8011478:	4604      	mov	r4, r0
 801147a:	f000 f80b 	bl	8011494 <geometry_msgs__msg__Vector3__fini>
 801147e:	f104 0018 	add.w	r0, r4, #24
 8011482:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011486:	f000 b805 	b.w	8011494 <geometry_msgs__msg__Vector3__fini>
 801148a:	4770      	bx	lr

0801148c <geometry_msgs__msg__Vector3__init>:
 801148c:	3800      	subs	r0, #0
 801148e:	bf18      	it	ne
 8011490:	2001      	movne	r0, #1
 8011492:	4770      	bx	lr

08011494 <geometry_msgs__msg__Vector3__fini>:
 8011494:	4770      	bx	lr
 8011496:	bf00      	nop

08011498 <ucdr_serialize_sequence_char>:
 8011498:	b570      	push	{r4, r5, r6, lr}
 801149a:	4615      	mov	r5, r2
 801149c:	460e      	mov	r6, r1
 801149e:	7d01      	ldrb	r1, [r0, #20]
 80114a0:	4604      	mov	r4, r0
 80114a2:	f7fc f819 	bl	800d4d8 <ucdr_serialize_endian_uint32_t>
 80114a6:	b90d      	cbnz	r5, 80114ac <ucdr_serialize_sequence_char+0x14>
 80114a8:	2001      	movs	r0, #1
 80114aa:	bd70      	pop	{r4, r5, r6, pc}
 80114ac:	7d21      	ldrb	r1, [r4, #20]
 80114ae:	462b      	mov	r3, r5
 80114b0:	4632      	mov	r2, r6
 80114b2:	4620      	mov	r0, r4
 80114b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80114b8:	f007 bedc 	b.w	8019274 <ucdr_serialize_endian_array_char>

080114bc <ucdr_deserialize_sequence_char>:
 80114bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80114c0:	461d      	mov	r5, r3
 80114c2:	4616      	mov	r6, r2
 80114c4:	460f      	mov	r7, r1
 80114c6:	461a      	mov	r2, r3
 80114c8:	7d01      	ldrb	r1, [r0, #20]
 80114ca:	4604      	mov	r4, r0
 80114cc:	f7fc f92c 	bl	800d728 <ucdr_deserialize_endian_uint32_t>
 80114d0:	682b      	ldr	r3, [r5, #0]
 80114d2:	429e      	cmp	r6, r3
 80114d4:	bf3c      	itt	cc
 80114d6:	2201      	movcc	r2, #1
 80114d8:	75a2      	strbcc	r2, [r4, #22]
 80114da:	b913      	cbnz	r3, 80114e2 <ucdr_deserialize_sequence_char+0x26>
 80114dc:	2001      	movs	r0, #1
 80114de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80114e2:	7d21      	ldrb	r1, [r4, #20]
 80114e4:	463a      	mov	r2, r7
 80114e6:	4620      	mov	r0, r4
 80114e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80114ec:	f007 bef4 	b.w	80192d8 <ucdr_deserialize_endian_array_char>

080114f0 <ucdr_serialize_sequence_uint8_t>:
 80114f0:	b570      	push	{r4, r5, r6, lr}
 80114f2:	4615      	mov	r5, r2
 80114f4:	460e      	mov	r6, r1
 80114f6:	7d01      	ldrb	r1, [r0, #20]
 80114f8:	4604      	mov	r4, r0
 80114fa:	f7fb ffed 	bl	800d4d8 <ucdr_serialize_endian_uint32_t>
 80114fe:	b90d      	cbnz	r5, 8011504 <ucdr_serialize_sequence_uint8_t+0x14>
 8011500:	2001      	movs	r0, #1
 8011502:	bd70      	pop	{r4, r5, r6, pc}
 8011504:	7d21      	ldrb	r1, [r4, #20]
 8011506:	462b      	mov	r3, r5
 8011508:	4632      	mov	r2, r6
 801150a:	4620      	mov	r0, r4
 801150c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011510:	f007 bf46 	b.w	80193a0 <ucdr_serialize_endian_array_uint8_t>

08011514 <ucdr_deserialize_sequence_uint8_t>:
 8011514:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011518:	461d      	mov	r5, r3
 801151a:	4616      	mov	r6, r2
 801151c:	460f      	mov	r7, r1
 801151e:	461a      	mov	r2, r3
 8011520:	7d01      	ldrb	r1, [r0, #20]
 8011522:	4604      	mov	r4, r0
 8011524:	f7fc f900 	bl	800d728 <ucdr_deserialize_endian_uint32_t>
 8011528:	682b      	ldr	r3, [r5, #0]
 801152a:	429e      	cmp	r6, r3
 801152c:	bf3c      	itt	cc
 801152e:	2201      	movcc	r2, #1
 8011530:	75a2      	strbcc	r2, [r4, #22]
 8011532:	b913      	cbnz	r3, 801153a <ucdr_deserialize_sequence_uint8_t+0x26>
 8011534:	2001      	movs	r0, #1
 8011536:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801153a:	7d21      	ldrb	r1, [r4, #20]
 801153c:	463a      	mov	r2, r7
 801153e:	4620      	mov	r0, r4
 8011540:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011544:	f007 bf90 	b.w	8019468 <ucdr_deserialize_endian_array_uint8_t>

08011548 <ucdr_serialize_sequence_double>:
 8011548:	b570      	push	{r4, r5, r6, lr}
 801154a:	4615      	mov	r5, r2
 801154c:	460e      	mov	r6, r1
 801154e:	7d01      	ldrb	r1, [r0, #20]
 8011550:	4604      	mov	r4, r0
 8011552:	f7fb ffc1 	bl	800d4d8 <ucdr_serialize_endian_uint32_t>
 8011556:	b90d      	cbnz	r5, 801155c <ucdr_serialize_sequence_double+0x14>
 8011558:	2001      	movs	r0, #1
 801155a:	bd70      	pop	{r4, r5, r6, pc}
 801155c:	7d21      	ldrb	r1, [r4, #20]
 801155e:	462b      	mov	r3, r5
 8011560:	4632      	mov	r2, r6
 8011562:	4620      	mov	r0, r4
 8011564:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011568:	f007 bfb0 	b.w	80194cc <ucdr_serialize_endian_array_double>

0801156c <ucdr_deserialize_sequence_double>:
 801156c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011570:	461d      	mov	r5, r3
 8011572:	4616      	mov	r6, r2
 8011574:	460f      	mov	r7, r1
 8011576:	461a      	mov	r2, r3
 8011578:	7d01      	ldrb	r1, [r0, #20]
 801157a:	4604      	mov	r4, r0
 801157c:	f7fc f8d4 	bl	800d728 <ucdr_deserialize_endian_uint32_t>
 8011580:	682b      	ldr	r3, [r5, #0]
 8011582:	429e      	cmp	r6, r3
 8011584:	bf3c      	itt	cc
 8011586:	2201      	movcc	r2, #1
 8011588:	75a2      	strbcc	r2, [r4, #22]
 801158a:	b913      	cbnz	r3, 8011592 <ucdr_deserialize_sequence_double+0x26>
 801158c:	2001      	movs	r0, #1
 801158e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011592:	7d21      	ldrb	r1, [r4, #20]
 8011594:	463a      	mov	r2, r7
 8011596:	4620      	mov	r0, r4
 8011598:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801159c:	f007 bfea 	b.w	8019574 <ucdr_deserialize_endian_array_double>

080115a0 <uxr_buffer_delete_entity>:
 80115a0:	b510      	push	{r4, lr}
 80115a2:	2300      	movs	r3, #0
 80115a4:	b08e      	sub	sp, #56	@ 0x38
 80115a6:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80115aa:	2303      	movs	r3, #3
 80115ac:	9300      	str	r3, [sp, #0]
 80115ae:	2204      	movs	r2, #4
 80115b0:	ab06      	add	r3, sp, #24
 80115b2:	4604      	mov	r4, r0
 80115b4:	9103      	str	r1, [sp, #12]
 80115b6:	f001 fb99 	bl	8012cec <uxr_prepare_stream_to_write_submessage>
 80115ba:	b918      	cbnz	r0, 80115c4 <uxr_buffer_delete_entity+0x24>
 80115bc:	4604      	mov	r4, r0
 80115be:	4620      	mov	r0, r4
 80115c0:	b00e      	add	sp, #56	@ 0x38
 80115c2:	bd10      	pop	{r4, pc}
 80115c4:	9902      	ldr	r1, [sp, #8]
 80115c6:	aa05      	add	r2, sp, #20
 80115c8:	4620      	mov	r0, r4
 80115ca:	f001 fcc5 	bl	8012f58 <uxr_init_base_object_request>
 80115ce:	a905      	add	r1, sp, #20
 80115d0:	4604      	mov	r4, r0
 80115d2:	a806      	add	r0, sp, #24
 80115d4:	f003 fba8 	bl	8014d28 <uxr_serialize_DELETE_Payload>
 80115d8:	4620      	mov	r0, r4
 80115da:	b00e      	add	sp, #56	@ 0x38
 80115dc:	bd10      	pop	{r4, pc}
 80115de:	bf00      	nop

080115e0 <uxr_common_create_entity>:
 80115e0:	b510      	push	{r4, lr}
 80115e2:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 80115e6:	b08c      	sub	sp, #48	@ 0x30
 80115e8:	e9cd 2102 	strd	r2, r1, [sp, #8]
 80115ec:	f1bc 0f01 	cmp.w	ip, #1
 80115f0:	bf0c      	ite	eq
 80115f2:	f003 0201 	andeq.w	r2, r3, #1
 80115f6:	2200      	movne	r2, #0
 80115f8:	330e      	adds	r3, #14
 80115fa:	f89d 1038 	ldrb.w	r1, [sp, #56]	@ 0x38
 80115fe:	9101      	str	r1, [sp, #4]
 8011600:	441a      	add	r2, r3
 8011602:	2301      	movs	r3, #1
 8011604:	9300      	str	r3, [sp, #0]
 8011606:	9903      	ldr	r1, [sp, #12]
 8011608:	ab04      	add	r3, sp, #16
 801160a:	b292      	uxth	r2, r2
 801160c:	4604      	mov	r4, r0
 801160e:	f001 fb6d 	bl	8012cec <uxr_prepare_stream_to_write_submessage>
 8011612:	b918      	cbnz	r0, 801161c <uxr_common_create_entity+0x3c>
 8011614:	4604      	mov	r4, r0
 8011616:	4620      	mov	r0, r4
 8011618:	b00c      	add	sp, #48	@ 0x30
 801161a:	bd10      	pop	{r4, pc}
 801161c:	9902      	ldr	r1, [sp, #8]
 801161e:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8011620:	4620      	mov	r0, r4
 8011622:	f001 fc99 	bl	8012f58 <uxr_init_base_object_request>
 8011626:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8011628:	4604      	mov	r4, r0
 801162a:	a804      	add	r0, sp, #16
 801162c:	f003 fad8 	bl	8014be0 <uxr_serialize_CREATE_Payload>
 8011630:	4620      	mov	r0, r4
 8011632:	b00c      	add	sp, #48	@ 0x30
 8011634:	bd10      	pop	{r4, pc}
 8011636:	bf00      	nop

08011638 <uxr_buffer_create_participant_bin>:
 8011638:	b570      	push	{r4, r5, r6, lr}
 801163a:	f5ad 7d16 	sub.w	sp, sp, #600	@ 0x258
 801163e:	ac11      	add	r4, sp, #68	@ 0x44
 8011640:	f8ad 3254 	strh.w	r3, [sp, #596]	@ 0x254
 8011644:	2303      	movs	r3, #3
 8011646:	e9cd 2102 	strd	r2, r1, [sp, #8]
 801164a:	7223      	strb	r3, [r4, #8]
 801164c:	9b9a      	ldr	r3, [sp, #616]	@ 0x268
 801164e:	f89d 626c 	ldrb.w	r6, [sp, #620]	@ 0x26c
 8011652:	2201      	movs	r2, #1
 8011654:	2100      	movs	r1, #0
 8011656:	4605      	mov	r5, r0
 8011658:	7122      	strb	r2, [r4, #4]
 801165a:	f88d 1014 	strb.w	r1, [sp, #20]
 801165e:	b1cb      	cbz	r3, 8011694 <uxr_buffer_create_participant_bin+0x5c>
 8011660:	f88d 201c 	strb.w	r2, [sp, #28]
 8011664:	9308      	str	r3, [sp, #32]
 8011666:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801166a:	a915      	add	r1, sp, #84	@ 0x54
 801166c:	a809      	add	r0, sp, #36	@ 0x24
 801166e:	f7fc ff67 	bl	800e540 <ucdr_init_buffer>
 8011672:	a905      	add	r1, sp, #20
 8011674:	a809      	add	r0, sp, #36	@ 0x24
 8011676:	f002 fe95 	bl	80143a4 <uxr_serialize_OBJK_DomainParticipant_Binary>
 801167a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801167c:	9600      	str	r6, [sp, #0]
 801167e:	9401      	str	r4, [sp, #4]
 8011680:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8011684:	60e3      	str	r3, [r4, #12]
 8011686:	4628      	mov	r0, r5
 8011688:	b29b      	uxth	r3, r3
 801168a:	f7ff ffa9 	bl	80115e0 <uxr_common_create_entity>
 801168e:	f50d 7d16 	add.w	sp, sp, #600	@ 0x258
 8011692:	bd70      	pop	{r4, r5, r6, pc}
 8011694:	f88d 301c 	strb.w	r3, [sp, #28]
 8011698:	e7e5      	b.n	8011666 <uxr_buffer_create_participant_bin+0x2e>
 801169a:	bf00      	nop

0801169c <uxr_buffer_create_topic_bin>:
 801169c:	b570      	push	{r4, r5, r6, lr}
 801169e:	f5ad 7d18 	sub.w	sp, sp, #608	@ 0x260
 80116a2:	e9cd 3203 	strd	r3, r2, [sp, #12]
 80116a6:	9105      	str	r1, [sp, #20]
 80116a8:	4605      	mov	r5, r0
 80116aa:	a997      	add	r1, sp, #604	@ 0x25c
 80116ac:	4618      	mov	r0, r3
 80116ae:	2302      	movs	r3, #2
 80116b0:	f89d 6278 	ldrb.w	r6, [sp, #632]	@ 0x278
 80116b4:	f88d 3050 	strb.w	r3, [sp, #80]	@ 0x50
 80116b8:	f000 fa58 	bl	8011b6c <uxr_object_id_to_raw>
 80116bc:	9b9c      	ldr	r3, [sp, #624]	@ 0x270
 80116be:	9306      	str	r3, [sp, #24]
 80116c0:	9b9d      	ldr	r3, [sp, #628]	@ 0x274
 80116c2:	930a      	str	r3, [sp, #40]	@ 0x28
 80116c4:	2303      	movs	r3, #3
 80116c6:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 80116ca:	2301      	movs	r3, #1
 80116cc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80116d0:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 80116d4:	a917      	add	r1, sp, #92	@ 0x5c
 80116d6:	2300      	movs	r3, #0
 80116d8:	a80b      	add	r0, sp, #44	@ 0x2c
 80116da:	f88d 301c 	strb.w	r3, [sp, #28]
 80116de:	f7fc ff2f 	bl	800e540 <ucdr_init_buffer>
 80116e2:	a906      	add	r1, sp, #24
 80116e4:	a80b      	add	r0, sp, #44	@ 0x2c
 80116e6:	f002 fe7f 	bl	80143e8 <uxr_serialize_OBJK_Topic_Binary>
 80116ea:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80116ec:	9316      	str	r3, [sp, #88]	@ 0x58
 80116ee:	ac13      	add	r4, sp, #76	@ 0x4c
 80116f0:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 80116f4:	9600      	str	r6, [sp, #0]
 80116f6:	9401      	str	r4, [sp, #4]
 80116f8:	b29b      	uxth	r3, r3
 80116fa:	4628      	mov	r0, r5
 80116fc:	f7ff ff70 	bl	80115e0 <uxr_common_create_entity>
 8011700:	f50d 7d18 	add.w	sp, sp, #608	@ 0x260
 8011704:	bd70      	pop	{r4, r5, r6, pc}
 8011706:	bf00      	nop

08011708 <uxr_buffer_create_publisher_bin>:
 8011708:	b5f0      	push	{r4, r5, r6, r7, lr}
 801170a:	f2ad 4d8c 	subw	sp, sp, #1164	@ 0x48c
 801170e:	4605      	mov	r5, r0
 8011710:	9105      	str	r1, [sp, #20]
 8011712:	4618      	mov	r0, r3
 8011714:	2603      	movs	r6, #3
 8011716:	a992      	add	r1, sp, #584	@ 0x248
 8011718:	e9cd 3203 	strd	r3, r2, [sp, #12]
 801171c:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	@ 0x4a0
 8011720:	f88d 603c 	strb.w	r6, [sp, #60]	@ 0x3c
 8011724:	f000 fa22 	bl	8011b6c <uxr_object_id_to_raw>
 8011728:	2300      	movs	r3, #0
 801172a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801172e:	a912      	add	r1, sp, #72	@ 0x48
 8011730:	a806      	add	r0, sp, #24
 8011732:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 8011736:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 801173a:	f88d 6040 	strb.w	r6, [sp, #64]	@ 0x40
 801173e:	f7fc feff 	bl	800e540 <ucdr_init_buffer>
 8011742:	a993      	add	r1, sp, #588	@ 0x24c
 8011744:	a806      	add	r0, sp, #24
 8011746:	f002 ff03 	bl	8014550 <uxr_serialize_OBJK_Publisher_Binary>
 801174a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801174c:	9311      	str	r3, [sp, #68]	@ 0x44
 801174e:	ac0e      	add	r4, sp, #56	@ 0x38
 8011750:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8011754:	9700      	str	r7, [sp, #0]
 8011756:	9401      	str	r4, [sp, #4]
 8011758:	b29b      	uxth	r3, r3
 801175a:	4628      	mov	r0, r5
 801175c:	f7ff ff40 	bl	80115e0 <uxr_common_create_entity>
 8011760:	f20d 4d8c 	addw	sp, sp, #1164	@ 0x48c
 8011764:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011766:	bf00      	nop

08011768 <uxr_buffer_create_subscriber_bin>:
 8011768:	b570      	push	{r4, r5, r6, lr}
 801176a:	f5ad 6d91 	sub.w	sp, sp, #1160	@ 0x488
 801176e:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8011772:	9105      	str	r1, [sp, #20]
 8011774:	4605      	mov	r5, r0
 8011776:	a992      	add	r1, sp, #584	@ 0x248
 8011778:	4618      	mov	r0, r3
 801177a:	2304      	movs	r3, #4
 801177c:	f89d 6498 	ldrb.w	r6, [sp, #1176]	@ 0x498
 8011780:	f88d 303c 	strb.w	r3, [sp, #60]	@ 0x3c
 8011784:	f000 f9f2 	bl	8011b6c <uxr_object_id_to_raw>
 8011788:	2300      	movs	r3, #0
 801178a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801178e:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 8011792:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 8011796:	a912      	add	r1, sp, #72	@ 0x48
 8011798:	2303      	movs	r3, #3
 801179a:	a806      	add	r0, sp, #24
 801179c:	f88d 3040 	strb.w	r3, [sp, #64]	@ 0x40
 80117a0:	f7fc fece 	bl	800e540 <ucdr_init_buffer>
 80117a4:	a993      	add	r1, sp, #588	@ 0x24c
 80117a6:	a806      	add	r0, sp, #24
 80117a8:	f002 ff82 	bl	80146b0 <uxr_serialize_OBJK_Subscriber_Binary>
 80117ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80117ae:	9311      	str	r3, [sp, #68]	@ 0x44
 80117b0:	ac0e      	add	r4, sp, #56	@ 0x38
 80117b2:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 80117b6:	9600      	str	r6, [sp, #0]
 80117b8:	9401      	str	r4, [sp, #4]
 80117ba:	b29b      	uxth	r3, r3
 80117bc:	4628      	mov	r0, r5
 80117be:	f7ff ff0f 	bl	80115e0 <uxr_common_create_entity>
 80117c2:	f50d 6d91 	add.w	sp, sp, #1160	@ 0x488
 80117c6:	bd70      	pop	{r4, r5, r6, pc}

080117c8 <uxr_buffer_create_datawriter_bin>:
 80117c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80117cc:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 80117d0:	ac1d      	add	r4, sp, #116	@ 0x74
 80117d2:	e9cd 3203 	strd	r3, r2, [sp, #12]
 80117d6:	f8bd 52a8 	ldrh.w	r5, [sp, #680]	@ 0x2a8
 80117da:	9105      	str	r1, [sp, #20]
 80117dc:	4606      	mov	r6, r0
 80117de:	a9a1      	add	r1, sp, #644	@ 0x284
 80117e0:	4618      	mov	r0, r3
 80117e2:	2305      	movs	r3, #5
 80117e4:	7123      	strb	r3, [r4, #4]
 80117e6:	f89d 82ac 	ldrb.w	r8, [sp, #684]	@ 0x2ac
 80117ea:	2703      	movs	r7, #3
 80117ec:	f000 f9be 	bl	8011b6c <uxr_object_id_to_raw>
 80117f0:	98a8      	ldr	r0, [sp, #672]	@ 0x2a0
 80117f2:	7227      	strb	r7, [r4, #8]
 80117f4:	a90e      	add	r1, sp, #56	@ 0x38
 80117f6:	f000 f9b9 	bl	8011b6c <uxr_object_id_to_raw>
 80117fa:	2300      	movs	r3, #0
 80117fc:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 8011800:	f89d 22a5 	ldrb.w	r2, [sp, #677]	@ 0x2a5
 8011804:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 8011808:	3d00      	subs	r5, #0
 801180a:	bf18      	it	ne
 801180c:	2501      	movne	r5, #1
 801180e:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 8011812:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 8011816:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 801181a:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 801181e:	2301      	movs	r3, #1
 8011820:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 8011824:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 8011828:	bb8a      	cbnz	r2, 801188e <uxr_buffer_create_datawriter_bin+0xc6>
 801182a:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 801182e:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 8011832:	f04f 0c13 	mov.w	ip, #19
 8011836:	250b      	movs	r5, #11
 8011838:	2221      	movs	r2, #33	@ 0x21
 801183a:	2111      	movs	r1, #17
 801183c:	2009      	movs	r0, #9
 801183e:	f89d 32a6 	ldrb.w	r3, [sp, #678]	@ 0x2a6
 8011842:	b923      	cbnz	r3, 801184e <uxr_buffer_create_datawriter_bin+0x86>
 8011844:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 8011848:	4672      	mov	r2, lr
 801184a:	4661      	mov	r1, ip
 801184c:	4628      	mov	r0, r5
 801184e:	f89d 32a4 	ldrb.w	r3, [sp, #676]	@ 0x2a4
 8011852:	2b01      	cmp	r3, #1
 8011854:	d025      	beq.n	80118a2 <uxr_buffer_create_datawriter_bin+0xda>
 8011856:	2b03      	cmp	r3, #3
 8011858:	d029      	beq.n	80118ae <uxr_buffer_create_datawriter_bin+0xe6>
 801185a:	b32b      	cbz	r3, 80118a8 <uxr_buffer_create_datawriter_bin+0xe0>
 801185c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011860:	a921      	add	r1, sp, #132	@ 0x84
 8011862:	a806      	add	r0, sp, #24
 8011864:	f7fc fe6c 	bl	800e540 <ucdr_init_buffer>
 8011868:	a90e      	add	r1, sp, #56	@ 0x38
 801186a:	a806      	add	r0, sp, #24
 801186c:	f002 ffd2 	bl	8014814 <uxr_serialize_OBJK_DataWriter_Binary>
 8011870:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011872:	f8cd 8000 	str.w	r8, [sp]
 8011876:	9401      	str	r4, [sp, #4]
 8011878:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 801187c:	60e3      	str	r3, [r4, #12]
 801187e:	4630      	mov	r0, r6
 8011880:	b29b      	uxth	r3, r3
 8011882:	f7ff fead 	bl	80115e0 <uxr_common_create_entity>
 8011886:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 801188a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801188e:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 8011892:	f04f 0c12 	mov.w	ip, #18
 8011896:	250a      	movs	r5, #10
 8011898:	2220      	movs	r2, #32
 801189a:	2110      	movs	r1, #16
 801189c:	2008      	movs	r0, #8
 801189e:	2702      	movs	r7, #2
 80118a0:	e7cd      	b.n	801183e <uxr_buffer_create_datawriter_bin+0x76>
 80118a2:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 80118a6:	e7d9      	b.n	801185c <uxr_buffer_create_datawriter_bin+0x94>
 80118a8:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 80118ac:	e7d6      	b.n	801185c <uxr_buffer_create_datawriter_bin+0x94>
 80118ae:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 80118b2:	e7d3      	b.n	801185c <uxr_buffer_create_datawriter_bin+0x94>

080118b4 <uxr_buffer_create_datareader_bin>:
 80118b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80118b8:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 80118bc:	ac1f      	add	r4, sp, #124	@ 0x7c
 80118be:	e9cd 3203 	strd	r3, r2, [sp, #12]
 80118c2:	f8bd 52b0 	ldrh.w	r5, [sp, #688]	@ 0x2b0
 80118c6:	9105      	str	r1, [sp, #20]
 80118c8:	4606      	mov	r6, r0
 80118ca:	a9a3      	add	r1, sp, #652	@ 0x28c
 80118cc:	4618      	mov	r0, r3
 80118ce:	2306      	movs	r3, #6
 80118d0:	7123      	strb	r3, [r4, #4]
 80118d2:	f89d 82b4 	ldrb.w	r8, [sp, #692]	@ 0x2b4
 80118d6:	2703      	movs	r7, #3
 80118d8:	f000 f948 	bl	8011b6c <uxr_object_id_to_raw>
 80118dc:	98aa      	ldr	r0, [sp, #680]	@ 0x2a8
 80118de:	7227      	strb	r7, [r4, #8]
 80118e0:	a90e      	add	r1, sp, #56	@ 0x38
 80118e2:	f000 f943 	bl	8011b6c <uxr_object_id_to_raw>
 80118e6:	2300      	movs	r3, #0
 80118e8:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 80118ec:	f89d 22ad 	ldrb.w	r2, [sp, #685]	@ 0x2ad
 80118f0:	f88d 3070 	strb.w	r3, [sp, #112]	@ 0x70
 80118f4:	3d00      	subs	r5, #0
 80118f6:	bf18      	it	ne
 80118f8:	2501      	movne	r5, #1
 80118fa:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 80118fe:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 8011902:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 8011906:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 801190a:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 801190e:	2301      	movs	r3, #1
 8011910:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 8011914:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 8011918:	bb8a      	cbnz	r2, 801197e <uxr_buffer_create_datareader_bin+0xca>
 801191a:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 801191e:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 8011922:	f04f 0c13 	mov.w	ip, #19
 8011926:	250b      	movs	r5, #11
 8011928:	2221      	movs	r2, #33	@ 0x21
 801192a:	2111      	movs	r1, #17
 801192c:	2009      	movs	r0, #9
 801192e:	f89d 32ae 	ldrb.w	r3, [sp, #686]	@ 0x2ae
 8011932:	b923      	cbnz	r3, 801193e <uxr_buffer_create_datareader_bin+0x8a>
 8011934:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 8011938:	4672      	mov	r2, lr
 801193a:	4661      	mov	r1, ip
 801193c:	4628      	mov	r0, r5
 801193e:	f89d 32ac 	ldrb.w	r3, [sp, #684]	@ 0x2ac
 8011942:	2b01      	cmp	r3, #1
 8011944:	d025      	beq.n	8011992 <uxr_buffer_create_datareader_bin+0xde>
 8011946:	2b03      	cmp	r3, #3
 8011948:	d029      	beq.n	801199e <uxr_buffer_create_datareader_bin+0xea>
 801194a:	b32b      	cbz	r3, 8011998 <uxr_buffer_create_datareader_bin+0xe4>
 801194c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011950:	a923      	add	r1, sp, #140	@ 0x8c
 8011952:	a806      	add	r0, sp, #24
 8011954:	f7fc fdf4 	bl	800e540 <ucdr_init_buffer>
 8011958:	a90e      	add	r1, sp, #56	@ 0x38
 801195a:	a806      	add	r0, sp, #24
 801195c:	f002 ff1e 	bl	801479c <uxr_serialize_OBJK_DataReader_Binary>
 8011960:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011962:	f8cd 8000 	str.w	r8, [sp]
 8011966:	9401      	str	r4, [sp, #4]
 8011968:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 801196c:	60e3      	str	r3, [r4, #12]
 801196e:	4630      	mov	r0, r6
 8011970:	b29b      	uxth	r3, r3
 8011972:	f7ff fe35 	bl	80115e0 <uxr_common_create_entity>
 8011976:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 801197a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801197e:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 8011982:	f04f 0c12 	mov.w	ip, #18
 8011986:	250a      	movs	r5, #10
 8011988:	2220      	movs	r2, #32
 801198a:	2110      	movs	r1, #16
 801198c:	2008      	movs	r0, #8
 801198e:	2702      	movs	r7, #2
 8011990:	e7cd      	b.n	801192e <uxr_buffer_create_datareader_bin+0x7a>
 8011992:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 8011996:	e7d9      	b.n	801194c <uxr_buffer_create_datareader_bin+0x98>
 8011998:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 801199c:	e7d6      	b.n	801194c <uxr_buffer_create_datareader_bin+0x98>
 801199e:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 80119a2:	e7d3      	b.n	801194c <uxr_buffer_create_datareader_bin+0x98>

080119a4 <get_custom_error>:
 80119a4:	4b01      	ldr	r3, [pc, #4]	@ (80119ac <get_custom_error+0x8>)
 80119a6:	7818      	ldrb	r0, [r3, #0]
 80119a8:	4770      	bx	lr
 80119aa:	bf00      	nop
 80119ac:	2000b564 	.word	0x2000b564

080119b0 <recv_custom_msg>:
 80119b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80119b4:	4693      	mov	fp, r2
 80119b6:	b089      	sub	sp, #36	@ 0x24
 80119b8:	f890 2200 	ldrb.w	r2, [r0, #512]	@ 0x200
 80119bc:	9305      	str	r3, [sp, #20]
 80119be:	468a      	mov	sl, r1
 80119c0:	2100      	movs	r1, #0
 80119c2:	4604      	mov	r4, r0
 80119c4:	f88d 101e 	strb.w	r1, [sp, #30]
 80119c8:	b322      	cbz	r2, 8011a14 <recv_custom_msg+0x64>
 80119ca:	f200 2902 	addw	r9, r0, #514	@ 0x202
 80119ce:	f10d 081f 	add.w	r8, sp, #31
 80119d2:	af05      	add	r7, sp, #20
 80119d4:	f10d 061e 	add.w	r6, sp, #30
 80119d8:	f44f 7500 	mov.w	r5, #512	@ 0x200
 80119dc:	e002      	b.n	80119e4 <recv_custom_msg+0x34>
 80119de:	9b05      	ldr	r3, [sp, #20]
 80119e0:	2b00      	cmp	r3, #0
 80119e2:	dd0f      	ble.n	8011a04 <recv_custom_msg+0x54>
 80119e4:	f8d4 1274 	ldr.w	r1, [r4, #628]	@ 0x274
 80119e8:	4623      	mov	r3, r4
 80119ea:	e9cd 7802 	strd	r7, r8, [sp, #8]
 80119ee:	e9cd 5600 	strd	r5, r6, [sp]
 80119f2:	4622      	mov	r2, r4
 80119f4:	4648      	mov	r0, r9
 80119f6:	f001 fcdd 	bl	80133b4 <uxr_read_framed_msg>
 80119fa:	2800      	cmp	r0, #0
 80119fc:	d0ef      	beq.n	80119de <recv_custom_msg+0x2e>
 80119fe:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8011a02:	b1b3      	cbz	r3, 8011a32 <recv_custom_msg+0x82>
 8011a04:	4b0f      	ldr	r3, [pc, #60]	@ (8011a44 <recv_custom_msg+0x94>)
 8011a06:	f89d 201f 	ldrb.w	r2, [sp, #31]
 8011a0a:	701a      	strb	r2, [r3, #0]
 8011a0c:	2000      	movs	r0, #0
 8011a0e:	b009      	add	sp, #36	@ 0x24
 8011a10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011a14:	f10d 021f 	add.w	r2, sp, #31
 8011a18:	9200      	str	r2, [sp, #0]
 8011a1a:	f8d0 5274 	ldr.w	r5, [r0, #628]	@ 0x274
 8011a1e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011a22:	4601      	mov	r1, r0
 8011a24:	47a8      	blx	r5
 8011a26:	2800      	cmp	r0, #0
 8011a28:	d0ec      	beq.n	8011a04 <recv_custom_msg+0x54>
 8011a2a:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8011a2e:	2b00      	cmp	r3, #0
 8011a30:	d1e8      	bne.n	8011a04 <recv_custom_msg+0x54>
 8011a32:	f8cb 0000 	str.w	r0, [fp]
 8011a36:	2001      	movs	r0, #1
 8011a38:	f8ca 4000 	str.w	r4, [sl]
 8011a3c:	b009      	add	sp, #36	@ 0x24
 8011a3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011a42:	bf00      	nop
 8011a44:	2000b564 	.word	0x2000b564

08011a48 <send_custom_msg>:
 8011a48:	b530      	push	{r4, r5, lr}
 8011a4a:	f890 4200 	ldrb.w	r4, [r0, #512]	@ 0x200
 8011a4e:	b087      	sub	sp, #28
 8011a50:	4615      	mov	r5, r2
 8011a52:	b974      	cbnz	r4, 8011a72 <send_custom_msg+0x2a>
 8011a54:	f8d0 4270 	ldr.w	r4, [r0, #624]	@ 0x270
 8011a58:	f10d 0317 	add.w	r3, sp, #23
 8011a5c:	47a0      	blx	r4
 8011a5e:	b108      	cbz	r0, 8011a64 <send_custom_msg+0x1c>
 8011a60:	42a8      	cmp	r0, r5
 8011a62:	d015      	beq.n	8011a90 <send_custom_msg+0x48>
 8011a64:	4b0c      	ldr	r3, [pc, #48]	@ (8011a98 <send_custom_msg+0x50>)
 8011a66:	f89d 2017 	ldrb.w	r2, [sp, #23]
 8011a6a:	701a      	strb	r2, [r3, #0]
 8011a6c:	2000      	movs	r0, #0
 8011a6e:	b007      	add	sp, #28
 8011a70:	bd30      	pop	{r4, r5, pc}
 8011a72:	460b      	mov	r3, r1
 8011a74:	2200      	movs	r2, #0
 8011a76:	f10d 0117 	add.w	r1, sp, #23
 8011a7a:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8011a7e:	4602      	mov	r2, r0
 8011a80:	f8d0 1270 	ldr.w	r1, [r0, #624]	@ 0x270
 8011a84:	9500      	str	r5, [sp, #0]
 8011a86:	f200 2002 	addw	r0, r0, #514	@ 0x202
 8011a8a:	f001 fa9b 	bl	8012fc4 <uxr_write_framed_msg>
 8011a8e:	e7e6      	b.n	8011a5e <send_custom_msg+0x16>
 8011a90:	2001      	movs	r0, #1
 8011a92:	b007      	add	sp, #28
 8011a94:	bd30      	pop	{r4, r5, pc}
 8011a96:	bf00      	nop
 8011a98:	2000b564 	.word	0x2000b564

08011a9c <uxr_set_custom_transport_callbacks>:
 8011a9c:	b410      	push	{r4}
 8011a9e:	9c01      	ldr	r4, [sp, #4]
 8011aa0:	f8c0 4270 	str.w	r4, [r0, #624]	@ 0x270
 8011aa4:	e9c0 239a 	strd	r2, r3, [r0, #616]	@ 0x268
 8011aa8:	9b02      	ldr	r3, [sp, #8]
 8011aaa:	f880 1200 	strb.w	r1, [r0, #512]	@ 0x200
 8011aae:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011ab2:	f8c0 3274 	str.w	r3, [r0, #628]	@ 0x274
 8011ab6:	4770      	bx	lr

08011ab8 <uxr_init_custom_transport>:
 8011ab8:	b538      	push	{r3, r4, r5, lr}
 8011aba:	f8d0 3268 	ldr.w	r3, [r0, #616]	@ 0x268
 8011abe:	b303      	cbz	r3, 8011b02 <uxr_init_custom_transport+0x4a>
 8011ac0:	f8d0 226c 	ldr.w	r2, [r0, #620]	@ 0x26c
 8011ac4:	4604      	mov	r4, r0
 8011ac6:	b1e2      	cbz	r2, 8011b02 <uxr_init_custom_transport+0x4a>
 8011ac8:	f8d0 2270 	ldr.w	r2, [r0, #624]	@ 0x270
 8011acc:	b1ca      	cbz	r2, 8011b02 <uxr_init_custom_transport+0x4a>
 8011ace:	f8d0 2274 	ldr.w	r2, [r0, #628]	@ 0x274
 8011ad2:	b1b2      	cbz	r2, 8011b02 <uxr_init_custom_transport+0x4a>
 8011ad4:	f8c0 128c 	str.w	r1, [r0, #652]	@ 0x28c
 8011ad8:	4798      	blx	r3
 8011ada:	4605      	mov	r5, r0
 8011adc:	b188      	cbz	r0, 8011b02 <uxr_init_custom_transport+0x4a>
 8011ade:	f894 3200 	ldrb.w	r3, [r4, #512]	@ 0x200
 8011ae2:	b98b      	cbnz	r3, 8011b08 <uxr_init_custom_transport+0x50>
 8011ae4:	490b      	ldr	r1, [pc, #44]	@ (8011b14 <uxr_init_custom_transport+0x5c>)
 8011ae6:	4b0c      	ldr	r3, [pc, #48]	@ (8011b18 <uxr_init_custom_transport+0x60>)
 8011ae8:	4a0c      	ldr	r2, [pc, #48]	@ (8011b1c <uxr_init_custom_transport+0x64>)
 8011aea:	f8c4 3280 	str.w	r3, [r4, #640]	@ 0x280
 8011aee:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8011af2:	e9c4 419e 	strd	r4, r1, [r4, #632]	@ 0x278
 8011af6:	f8c4 2284 	str.w	r2, [r4, #644]	@ 0x284
 8011afa:	f8a4 3288 	strh.w	r3, [r4, #648]	@ 0x288
 8011afe:	4628      	mov	r0, r5
 8011b00:	bd38      	pop	{r3, r4, r5, pc}
 8011b02:	2500      	movs	r5, #0
 8011b04:	4628      	mov	r0, r5
 8011b06:	bd38      	pop	{r3, r4, r5, pc}
 8011b08:	2100      	movs	r1, #0
 8011b0a:	f204 2002 	addw	r0, r4, #514	@ 0x202
 8011b0e:	f001 fa53 	bl	8012fb8 <uxr_init_framing_io>
 8011b12:	e7e7      	b.n	8011ae4 <uxr_init_custom_transport+0x2c>
 8011b14:	08011a49 	.word	0x08011a49
 8011b18:	080119b1 	.word	0x080119b1
 8011b1c:	080119a5 	.word	0x080119a5

08011b20 <uxr_close_custom_transport>:
 8011b20:	f8d0 326c 	ldr.w	r3, [r0, #620]	@ 0x26c
 8011b24:	4718      	bx	r3
 8011b26:	bf00      	nop

08011b28 <uxr_object_id>:
 8011b28:	b082      	sub	sp, #8
 8011b2a:	2300      	movs	r3, #0
 8011b2c:	f88d 1006 	strb.w	r1, [sp, #6]
 8011b30:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8011b34:	f360 030f 	bfi	r3, r0, #0, #16
 8011b38:	f362 431f 	bfi	r3, r2, #16, #16
 8011b3c:	4618      	mov	r0, r3
 8011b3e:	b002      	add	sp, #8
 8011b40:	4770      	bx	lr
 8011b42:	bf00      	nop

08011b44 <uxr_object_id_from_raw>:
 8011b44:	7843      	ldrb	r3, [r0, #1]
 8011b46:	7801      	ldrb	r1, [r0, #0]
 8011b48:	b082      	sub	sp, #8
 8011b4a:	f003 020f 	and.w	r2, r3, #15
 8011b4e:	f88d 2006 	strb.w	r2, [sp, #6]
 8011b52:	091b      	lsrs	r3, r3, #4
 8011b54:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8011b58:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8011b5c:	2000      	movs	r0, #0
 8011b5e:	f363 000f 	bfi	r0, r3, #0, #16
 8011b62:	f362 401f 	bfi	r0, r2, #16, #16
 8011b66:	b002      	add	sp, #8
 8011b68:	4770      	bx	lr
 8011b6a:	bf00      	nop

08011b6c <uxr_object_id_to_raw>:
 8011b6c:	4602      	mov	r2, r0
 8011b6e:	f3c0 4303 	ubfx	r3, r0, #16, #4
 8011b72:	b082      	sub	sp, #8
 8011b74:	f3c2 1c0b 	ubfx	ip, r2, #4, #12
 8011b78:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 8011b7c:	f881 c000 	strb.w	ip, [r1]
 8011b80:	7048      	strb	r0, [r1, #1]
 8011b82:	b002      	add	sp, #8
 8011b84:	4770      	bx	lr
 8011b86:	bf00      	nop

08011b88 <uxr_buffer_request_data>:
 8011b88:	b530      	push	{r4, r5, lr}
 8011b8a:	b095      	sub	sp, #84	@ 0x54
 8011b8c:	e9cd 2104 	strd	r2, r1, [sp, #16]
 8011b90:	9d18      	ldr	r5, [sp, #96]	@ 0x60
 8011b92:	9303      	str	r3, [sp, #12]
 8011b94:	2200      	movs	r2, #0
 8011b96:	2d00      	cmp	r5, #0
 8011b98:	bf14      	ite	ne
 8011b9a:	2101      	movne	r1, #1
 8011b9c:	4611      	moveq	r1, r2
 8011b9e:	4604      	mov	r4, r0
 8011ba0:	f88d 301c 	strb.w	r3, [sp, #28]
 8011ba4:	f88d 201d 	strb.w	r2, [sp, #29]
 8011ba8:	f88d 201e 	strb.w	r2, [sp, #30]
 8011bac:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 8011bb0:	d021      	beq.n	8011bf6 <uxr_buffer_request_data+0x6e>
 8011bb2:	682a      	ldr	r2, [r5, #0]
 8011bb4:	686b      	ldr	r3, [r5, #4]
 8011bb6:	f8cd 2026 	str.w	r2, [sp, #38]	@ 0x26
 8011bba:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 8011bbe:	2210      	movs	r2, #16
 8011bc0:	2308      	movs	r3, #8
 8011bc2:	2100      	movs	r1, #0
 8011bc4:	e9cd 3100 	strd	r3, r1, [sp]
 8011bc8:	4620      	mov	r0, r4
 8011bca:	9905      	ldr	r1, [sp, #20]
 8011bcc:	ab0c      	add	r3, sp, #48	@ 0x30
 8011bce:	f001 f88d 	bl	8012cec <uxr_prepare_stream_to_write_submessage>
 8011bd2:	b918      	cbnz	r0, 8011bdc <uxr_buffer_request_data+0x54>
 8011bd4:	4604      	mov	r4, r0
 8011bd6:	4620      	mov	r0, r4
 8011bd8:	b015      	add	sp, #84	@ 0x54
 8011bda:	bd30      	pop	{r4, r5, pc}
 8011bdc:	9904      	ldr	r1, [sp, #16]
 8011bde:	aa06      	add	r2, sp, #24
 8011be0:	4620      	mov	r0, r4
 8011be2:	f001 f9b9 	bl	8012f58 <uxr_init_base_object_request>
 8011be6:	a906      	add	r1, sp, #24
 8011be8:	4604      	mov	r4, r0
 8011bea:	a80c      	add	r0, sp, #48	@ 0x30
 8011bec:	f003 f946 	bl	8014e7c <uxr_serialize_READ_DATA_Payload>
 8011bf0:	4620      	mov	r0, r4
 8011bf2:	b015      	add	sp, #84	@ 0x54
 8011bf4:	bd30      	pop	{r4, r5, pc}
 8011bf6:	2208      	movs	r2, #8
 8011bf8:	e7e2      	b.n	8011bc0 <uxr_buffer_request_data+0x38>
 8011bfa:	bf00      	nop

08011bfc <uxr_buffer_cancel_data>:
 8011bfc:	b510      	push	{r4, lr}
 8011bfe:	b094      	sub	sp, #80	@ 0x50
 8011c00:	2300      	movs	r3, #0
 8011c02:	9202      	str	r2, [sp, #8]
 8011c04:	9205      	str	r2, [sp, #20]
 8011c06:	9301      	str	r3, [sp, #4]
 8011c08:	2201      	movs	r2, #1
 8011c0a:	f8ad 301c 	strh.w	r3, [sp, #28]
 8011c0e:	f88d 301e 	strb.w	r3, [sp, #30]
 8011c12:	f8cd 3026 	str.w	r3, [sp, #38]	@ 0x26
 8011c16:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 8011c1a:	2308      	movs	r3, #8
 8011c1c:	f88d 2024 	strb.w	r2, [sp, #36]	@ 0x24
 8011c20:	9300      	str	r3, [sp, #0]
 8011c22:	2210      	movs	r2, #16
 8011c24:	ab0c      	add	r3, sp, #48	@ 0x30
 8011c26:	4604      	mov	r4, r0
 8011c28:	9103      	str	r1, [sp, #12]
 8011c2a:	f001 f85f 	bl	8012cec <uxr_prepare_stream_to_write_submessage>
 8011c2e:	b918      	cbnz	r0, 8011c38 <uxr_buffer_cancel_data+0x3c>
 8011c30:	4604      	mov	r4, r0
 8011c32:	4620      	mov	r0, r4
 8011c34:	b014      	add	sp, #80	@ 0x50
 8011c36:	bd10      	pop	{r4, pc}
 8011c38:	9905      	ldr	r1, [sp, #20]
 8011c3a:	aa06      	add	r2, sp, #24
 8011c3c:	4620      	mov	r0, r4
 8011c3e:	f001 f98b 	bl	8012f58 <uxr_init_base_object_request>
 8011c42:	a906      	add	r1, sp, #24
 8011c44:	4604      	mov	r4, r0
 8011c46:	a80c      	add	r0, sp, #48	@ 0x30
 8011c48:	f003 f918 	bl	8014e7c <uxr_serialize_READ_DATA_Payload>
 8011c4c:	4620      	mov	r0, r4
 8011c4e:	b014      	add	sp, #80	@ 0x50
 8011c50:	bd10      	pop	{r4, pc}
 8011c52:	bf00      	nop

08011c54 <read_submessage_format>:
 8011c54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011c58:	b095      	sub	sp, #84	@ 0x54
 8011c5a:	f8bd 6078 	ldrh.w	r6, [sp, #120]	@ 0x78
 8011c5e:	b113      	cbz	r3, 8011c66 <read_submessage_format+0x12>
 8011c60:	b015      	add	sp, #84	@ 0x54
 8011c62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011c66:	460c      	mov	r4, r1
 8011c68:	4615      	mov	r5, r2
 8011c6a:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8011c6e:	4607      	mov	r7, r0
 8011c70:	981c      	ldr	r0, [sp, #112]	@ 0x70
 8011c72:	9004      	str	r0, [sp, #16]
 8011c74:	981d      	ldr	r0, [sp, #116]	@ 0x74
 8011c76:	9005      	str	r0, [sp, #20]
 8011c78:	1a52      	subs	r2, r2, r1
 8011c7a:	a80c      	add	r0, sp, #48	@ 0x30
 8011c7c:	4699      	mov	r9, r3
 8011c7e:	f89d 8076 	ldrb.w	r8, [sp, #118]	@ 0x76
 8011c82:	f7fc fc5d 	bl	800e540 <ucdr_init_buffer>
 8011c86:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8011c8a:	a80c      	add	r0, sp, #48	@ 0x30
 8011c8c:	f7fc fc2c 	bl	800e4e8 <ucdr_set_on_full_buffer_callback>
 8011c90:	69e2      	ldr	r2, [r4, #28]
 8011c92:	b19a      	cbz	r2, 8011cbc <read_submessage_format+0x68>
 8011c94:	f1b8 0f07 	cmp.w	r8, #7
 8011c98:	f882 9014 	strb.w	r9, [r2, #20]
 8011c9c:	d040      	beq.n	8011d20 <read_submessage_format+0xcc>
 8011c9e:	f1b8 0f08 	cmp.w	r8, #8
 8011ca2:	d02e      	beq.n	8011d02 <read_submessage_format+0xae>
 8011ca4:	f1b8 0f06 	cmp.w	r8, #6
 8011ca8:	d011      	beq.n	8011cce <read_submessage_format+0x7a>
 8011caa:	2301      	movs	r3, #1
 8011cac:	7513      	strb	r3, [r2, #20]
 8011cae:	4629      	mov	r1, r5
 8011cb0:	4620      	mov	r0, r4
 8011cb2:	f7fc fc95 	bl	800e5e0 <ucdr_advance_buffer>
 8011cb6:	b015      	add	sp, #84	@ 0x54
 8011cb8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011cbc:	f1b8 0f07 	cmp.w	r8, #7
 8011cc0:	d02e      	beq.n	8011d20 <read_submessage_format+0xcc>
 8011cc2:	f1b8 0f08 	cmp.w	r8, #8
 8011cc6:	d01c      	beq.n	8011d02 <read_submessage_format+0xae>
 8011cc8:	f1b8 0f06 	cmp.w	r8, #6
 8011ccc:	d1ef      	bne.n	8011cae <read_submessage_format+0x5a>
 8011cce:	f8d7 8088 	ldr.w	r8, [r7, #136]	@ 0x88
 8011cd2:	f1b8 0f00 	cmp.w	r8, #0
 8011cd6:	d011      	beq.n	8011cfc <read_submessage_format+0xa8>
 8011cd8:	ab0c      	add	r3, sp, #48	@ 0x30
 8011cda:	e9cd 3500 	strd	r3, r5, [sp]
 8011cde:	2306      	movs	r3, #6
 8011ce0:	f88d 3016 	strb.w	r3, [sp, #22]
 8011ce4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8011ce8:	9302      	str	r3, [sp, #8]
 8011cea:	4632      	mov	r2, r6
 8011cec:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 8011cf0:	4638      	mov	r0, r7
 8011cf2:	47c0      	blx	r8
 8011cf4:	2301      	movs	r3, #1
 8011cf6:	69e2      	ldr	r2, [r4, #28]
 8011cf8:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 8011cfc:	2a00      	cmp	r2, #0
 8011cfe:	d1d4      	bne.n	8011caa <read_submessage_format+0x56>
 8011d00:	e7d5      	b.n	8011cae <read_submessage_format+0x5a>
 8011d02:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8011d06:	2b00      	cmp	r3, #0
 8011d08:	d0f8      	beq.n	8011cfc <read_submessage_format+0xa8>
 8011d0a:	a906      	add	r1, sp, #24
 8011d0c:	a80c      	add	r0, sp, #48	@ 0x30
 8011d0e:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 8011d12:	f003 f987 	bl	8015024 <uxr_deserialize_SampleIdentity>
 8011d16:	b9a0      	cbnz	r0, 8011d42 <read_submessage_format+0xee>
 8011d18:	69e2      	ldr	r2, [r4, #28]
 8011d1a:	2a00      	cmp	r2, #0
 8011d1c:	d1c5      	bne.n	8011caa <read_submessage_format+0x56>
 8011d1e:	e7c6      	b.n	8011cae <read_submessage_format+0x5a>
 8011d20:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011d24:	b13b      	cbz	r3, 8011d36 <read_submessage_format+0xe2>
 8011d26:	a906      	add	r1, sp, #24
 8011d28:	a80c      	add	r0, sp, #48	@ 0x30
 8011d2a:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 8011d2e:	f002 fe3f 	bl	80149b0 <uxr_deserialize_BaseObjectRequest>
 8011d32:	bb60      	cbnz	r0, 8011d8e <read_submessage_format+0x13a>
 8011d34:	69e2      	ldr	r2, [r4, #28]
 8011d36:	68a3      	ldr	r3, [r4, #8]
 8011d38:	442b      	add	r3, r5
 8011d3a:	60a3      	str	r3, [r4, #8]
 8011d3c:	2a00      	cmp	r2, #0
 8011d3e:	d1b4      	bne.n	8011caa <read_submessage_format+0x56>
 8011d40:	e7b5      	b.n	8011cae <read_submessage_format+0x5a>
 8011d42:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 8011d46:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8011d48:	1a52      	subs	r2, r2, r1
 8011d4a:	eba8 0803 	sub.w	r8, r8, r3
 8011d4e:	a80c      	add	r0, sp, #48	@ 0x30
 8011d50:	f7fc fbf6 	bl	800e540 <ucdr_init_buffer>
 8011d54:	44a8      	add	r8, r5
 8011d56:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8011d5a:	a80c      	add	r0, sp, #48	@ 0x30
 8011d5c:	f7fc fbc4 	bl	800e4e8 <ucdr_set_on_full_buffer_callback>
 8011d60:	fa1f f888 	uxth.w	r8, r8
 8011d64:	ab0c      	add	r3, sp, #48	@ 0x30
 8011d66:	9300      	str	r3, [sp, #0]
 8011d68:	f8cd 8004 	str.w	r8, [sp, #4]
 8011d6c:	2108      	movs	r1, #8
 8011d6e:	f88d 1016 	strb.w	r1, [sp, #22]
 8011d72:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 8011d76:	9102      	str	r1, [sp, #8]
 8011d78:	ab06      	add	r3, sp, #24
 8011d7a:	4632      	mov	r2, r6
 8011d7c:	9905      	ldr	r1, [sp, #20]
 8011d7e:	f8d7 60a4 	ldr.w	r6, [r7, #164]	@ 0xa4
 8011d82:	4638      	mov	r0, r7
 8011d84:	47b0      	blx	r6
 8011d86:	2301      	movs	r3, #1
 8011d88:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 8011d8c:	e7c4      	b.n	8011d18 <read_submessage_format+0xc4>
 8011d8e:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 8011d92:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8011d94:	1a52      	subs	r2, r2, r1
 8011d96:	a80c      	add	r0, sp, #48	@ 0x30
 8011d98:	eba8 0803 	sub.w	r8, r8, r3
 8011d9c:	f7fc fbd0 	bl	800e540 <ucdr_init_buffer>
 8011da0:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8011da4:	a80c      	add	r0, sp, #48	@ 0x30
 8011da6:	f7fc fb9f 	bl	800e4e8 <ucdr_set_on_full_buffer_callback>
 8011daa:	ab0c      	add	r3, sp, #48	@ 0x30
 8011dac:	9300      	str	r3, [sp, #0]
 8011dae:	f89d 1018 	ldrb.w	r1, [sp, #24]
 8011db2:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8011db6:	44a8      	add	r8, r5
 8011db8:	fa1f f888 	uxth.w	r8, r8
 8011dbc:	f8cd 8004 	str.w	r8, [sp, #4]
 8011dc0:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8011dc4:	2107      	movs	r1, #7
 8011dc6:	f88d 1016 	strb.w	r1, [sp, #22]
 8011dca:	f8d7 10b0 	ldr.w	r1, [r7, #176]	@ 0xb0
 8011dce:	9102      	str	r1, [sp, #8]
 8011dd0:	4632      	mov	r2, r6
 8011dd2:	b29b      	uxth	r3, r3
 8011dd4:	f8d7 60ac 	ldr.w	r6, [r7, #172]	@ 0xac
 8011dd8:	9905      	ldr	r1, [sp, #20]
 8011dda:	4638      	mov	r0, r7
 8011ddc:	47b0      	blx	r6
 8011dde:	2301      	movs	r3, #1
 8011de0:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 8011de4:	e7a6      	b.n	8011d34 <read_submessage_format+0xe0>
 8011de6:	bf00      	nop

08011de8 <on_get_fragmentation_info>:
 8011de8:	b500      	push	{lr}
 8011dea:	b08b      	sub	sp, #44	@ 0x2c
 8011dec:	4601      	mov	r1, r0
 8011dee:	2204      	movs	r2, #4
 8011df0:	a802      	add	r0, sp, #8
 8011df2:	f7fc fba5 	bl	800e540 <ucdr_init_buffer>
 8011df6:	f10d 0305 	add.w	r3, sp, #5
 8011dfa:	f10d 0206 	add.w	r2, sp, #6
 8011dfe:	a901      	add	r1, sp, #4
 8011e00:	a802      	add	r0, sp, #8
 8011e02:	f001 febd 	bl	8013b80 <uxr_read_submessage_header>
 8011e06:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8011e0a:	2b0d      	cmp	r3, #13
 8011e0c:	d003      	beq.n	8011e16 <on_get_fragmentation_info+0x2e>
 8011e0e:	2000      	movs	r0, #0
 8011e10:	b00b      	add	sp, #44	@ 0x2c
 8011e12:	f85d fb04 	ldr.w	pc, [sp], #4
 8011e16:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8011e1a:	f013 0f02 	tst.w	r3, #2
 8011e1e:	bf14      	ite	ne
 8011e20:	2002      	movne	r0, #2
 8011e22:	2001      	moveq	r0, #1
 8011e24:	b00b      	add	sp, #44	@ 0x2c
 8011e26:	f85d fb04 	ldr.w	pc, [sp], #4
 8011e2a:	bf00      	nop

08011e2c <read_submessage_get_info>:
 8011e2c:	b570      	push	{r4, r5, r6, lr}
 8011e2e:	2500      	movs	r5, #0
 8011e30:	f5ad 7d34 	sub.w	sp, sp, #720	@ 0x2d0
 8011e34:	4604      	mov	r4, r0
 8011e36:	f44f 7224 	mov.w	r2, #656	@ 0x290
 8011e3a:	460e      	mov	r6, r1
 8011e3c:	a810      	add	r0, sp, #64	@ 0x40
 8011e3e:	4629      	mov	r1, r5
 8011e40:	e9cd 5503 	strd	r5, r5, [sp, #12]
 8011e44:	f009 fa92 	bl	801b36c <memset>
 8011e48:	a903      	add	r1, sp, #12
 8011e4a:	4630      	mov	r0, r6
 8011e4c:	f002 ff58 	bl	8014d00 <uxr_deserialize_GET_INFO_Payload>
 8011e50:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8011e54:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8011e58:	4620      	mov	r0, r4
 8011e5a:	f001 f875 	bl	8012f48 <uxr_session_header_offset>
 8011e5e:	462b      	mov	r3, r5
 8011e60:	9000      	str	r0, [sp, #0]
 8011e62:	220c      	movs	r2, #12
 8011e64:	a905      	add	r1, sp, #20
 8011e66:	a808      	add	r0, sp, #32
 8011e68:	f7fc fb58 	bl	800e51c <ucdr_init_buffer_origin_offset>
 8011e6c:	a910      	add	r1, sp, #64	@ 0x40
 8011e6e:	a808      	add	r0, sp, #32
 8011e70:	f002 ffb8 	bl	8014de4 <uxr_serialize_INFO_Payload>
 8011e74:	9b08      	ldr	r3, [sp, #32]
 8011e76:	462a      	mov	r2, r5
 8011e78:	4629      	mov	r1, r5
 8011e7a:	4620      	mov	r0, r4
 8011e7c:	f001 f80e 	bl	8012e9c <uxr_stamp_session_header>
 8011e80:	a808      	add	r0, sp, #32
 8011e82:	f7fc fb89 	bl	800e598 <ucdr_buffer_length>
 8011e86:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8011e88:	4602      	mov	r2, r0
 8011e8a:	a905      	add	r1, sp, #20
 8011e8c:	e9d3 0400 	ldrd	r0, r4, [r3]
 8011e90:	47a0      	blx	r4
 8011e92:	f50d 7d34 	add.w	sp, sp, #720	@ 0x2d0
 8011e96:	bd70      	pop	{r4, r5, r6, pc}

08011e98 <write_submessage_acknack.isra.0>:
 8011e98:	b570      	push	{r4, r5, r6, lr}
 8011e9a:	b092      	sub	sp, #72	@ 0x48
 8011e9c:	4605      	mov	r5, r0
 8011e9e:	460e      	mov	r6, r1
 8011ea0:	4614      	mov	r4, r2
 8011ea2:	f001 f851 	bl	8012f48 <uxr_session_header_offset>
 8011ea6:	a905      	add	r1, sp, #20
 8011ea8:	9000      	str	r0, [sp, #0]
 8011eaa:	2300      	movs	r3, #0
 8011eac:	a80a      	add	r0, sp, #40	@ 0x28
 8011eae:	2211      	movs	r2, #17
 8011eb0:	f7fc fb34 	bl	800e51c <ucdr_init_buffer_origin_offset>
 8011eb4:	2218      	movs	r2, #24
 8011eb6:	fb02 5404 	mla	r4, r2, r4, r5
 8011eba:	2300      	movs	r3, #0
 8011ebc:	2205      	movs	r2, #5
 8011ebe:	3450      	adds	r4, #80	@ 0x50
 8011ec0:	210a      	movs	r1, #10
 8011ec2:	a80a      	add	r0, sp, #40	@ 0x28
 8011ec4:	f001 fe42 	bl	8013b4c <uxr_buffer_submessage_header>
 8011ec8:	a903      	add	r1, sp, #12
 8011eca:	4620      	mov	r0, r4
 8011ecc:	f007 fd62 	bl	8019994 <uxr_compute_acknack>
 8011ed0:	ba40      	rev16	r0, r0
 8011ed2:	f8ad 000e 	strh.w	r0, [sp, #14]
 8011ed6:	a903      	add	r1, sp, #12
 8011ed8:	a80a      	add	r0, sp, #40	@ 0x28
 8011eda:	f88d 6010 	strb.w	r6, [sp, #16]
 8011ede:	f002 fff1 	bl	8014ec4 <uxr_serialize_ACKNACK_Payload>
 8011ee2:	2200      	movs	r2, #0
 8011ee4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011ee6:	4611      	mov	r1, r2
 8011ee8:	4628      	mov	r0, r5
 8011eea:	f000 ffd7 	bl	8012e9c <uxr_stamp_session_header>
 8011eee:	a80a      	add	r0, sp, #40	@ 0x28
 8011ef0:	f7fc fb52 	bl	800e598 <ucdr_buffer_length>
 8011ef4:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8011ef6:	4602      	mov	r2, r0
 8011ef8:	a905      	add	r1, sp, #20
 8011efa:	e9d3 0400 	ldrd	r0, r4, [r3]
 8011efe:	47a0      	blx	r4
 8011f00:	b012      	add	sp, #72	@ 0x48
 8011f02:	bd70      	pop	{r4, r5, r6, pc}
 8011f04:	0000      	movs	r0, r0
	...

08011f08 <uxr_init_session>:
 8011f08:	b510      	push	{r4, lr}
 8011f0a:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 8011f40 <uxr_init_session+0x38>
 8011f0e:	2300      	movs	r3, #0
 8011f10:	e9c0 131c 	strd	r1, r3, [r0, #112]	@ 0x70
 8011f14:	4604      	mov	r4, r0
 8011f16:	e9c0 331e 	strd	r3, r3, [r0, #120]	@ 0x78
 8011f1a:	e9c0 3320 	strd	r3, r3, [r0, #128]	@ 0x80
 8011f1e:	e9c0 3322 	strd	r3, r3, [r0, #136]	@ 0x88
 8011f22:	e9c0 3324 	strd	r3, r3, [r0, #144]	@ 0x90
 8011f26:	ed80 7b26 	vstr	d7, [r0, #152]	@ 0x98
 8011f2a:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
 8011f2e:	2181      	movs	r1, #129	@ 0x81
 8011f30:	f000 ff20 	bl	8012d74 <uxr_init_session_info>
 8011f34:	f104 0008 	add.w	r0, r4, #8
 8011f38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011f3c:	f001 bd22 	b.w	8013984 <uxr_init_stream_storage>
	...

08011f48 <uxr_set_status_callback>:
 8011f48:	e9c0 1220 	strd	r1, r2, [r0, #128]	@ 0x80
 8011f4c:	4770      	bx	lr
 8011f4e:	bf00      	nop

08011f50 <uxr_set_topic_callback>:
 8011f50:	e9c0 1222 	strd	r1, r2, [r0, #136]	@ 0x88
 8011f54:	4770      	bx	lr
 8011f56:	bf00      	nop

08011f58 <uxr_set_request_callback>:
 8011f58:	e9c0 1229 	strd	r1, r2, [r0, #164]	@ 0xa4
 8011f5c:	4770      	bx	lr
 8011f5e:	bf00      	nop

08011f60 <uxr_set_reply_callback>:
 8011f60:	e9c0 122b 	strd	r1, r2, [r0, #172]	@ 0xac
 8011f64:	4770      	bx	lr
 8011f66:	bf00      	nop

08011f68 <uxr_create_output_best_effort_stream>:
 8011f68:	b510      	push	{r4, lr}
 8011f6a:	b084      	sub	sp, #16
 8011f6c:	e9cd 2100 	strd	r2, r1, [sp]
 8011f70:	4604      	mov	r4, r0
 8011f72:	f000 ffe9 	bl	8012f48 <uxr_session_header_offset>
 8011f76:	e9dd 2100 	ldrd	r2, r1, [sp]
 8011f7a:	4603      	mov	r3, r0
 8011f7c:	f104 0008 	add.w	r0, r4, #8
 8011f80:	b004      	add	sp, #16
 8011f82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011f86:	f001 bd47 	b.w	8013a18 <uxr_add_output_best_effort_buffer>
 8011f8a:	bf00      	nop

08011f8c <uxr_create_output_reliable_stream>:
 8011f8c:	b510      	push	{r4, lr}
 8011f8e:	b088      	sub	sp, #32
 8011f90:	e9cd 2104 	strd	r2, r1, [sp, #16]
 8011f94:	4604      	mov	r4, r0
 8011f96:	9303      	str	r3, [sp, #12]
 8011f98:	f000 ffd6 	bl	8012f48 <uxr_session_header_offset>
 8011f9c:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 8011fa0:	9000      	str	r0, [sp, #0]
 8011fa2:	9905      	ldr	r1, [sp, #20]
 8011fa4:	f104 0008 	add.w	r0, r4, #8
 8011fa8:	f001 fd4a 	bl	8013a40 <uxr_add_output_reliable_buffer>
 8011fac:	2200      	movs	r2, #0
 8011fae:	b2c3      	uxtb	r3, r0
 8011fb0:	f363 0207 	bfi	r2, r3, #0, #8
 8011fb4:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8011fb8:	f363 220f 	bfi	r2, r3, #8, #8
 8011fbc:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8011fc0:	f363 4217 	bfi	r2, r3, #16, #8
 8011fc4:	0e03      	lsrs	r3, r0, #24
 8011fc6:	f363 621f 	bfi	r2, r3, #24, #8
 8011fca:	4610      	mov	r0, r2
 8011fcc:	b008      	add	sp, #32
 8011fce:	bd10      	pop	{r4, pc}

08011fd0 <uxr_create_input_best_effort_stream>:
 8011fd0:	b082      	sub	sp, #8
 8011fd2:	3008      	adds	r0, #8
 8011fd4:	b002      	add	sp, #8
 8011fd6:	f001 bd4d 	b.w	8013a74 <uxr_add_input_best_effort_buffer>
 8011fda:	bf00      	nop

08011fdc <uxr_create_input_reliable_stream>:
 8011fdc:	b510      	push	{r4, lr}
 8011fde:	b084      	sub	sp, #16
 8011fe0:	4c0b      	ldr	r4, [pc, #44]	@ (8012010 <uxr_create_input_reliable_stream+0x34>)
 8011fe2:	9400      	str	r4, [sp, #0]
 8011fe4:	3008      	adds	r0, #8
 8011fe6:	f001 fd5b 	bl	8013aa0 <uxr_add_input_reliable_buffer>
 8011fea:	2200      	movs	r2, #0
 8011fec:	b2c3      	uxtb	r3, r0
 8011fee:	f363 0207 	bfi	r2, r3, #0, #8
 8011ff2:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8011ff6:	f363 220f 	bfi	r2, r3, #8, #8
 8011ffa:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8011ffe:	f363 4217 	bfi	r2, r3, #16, #8
 8012002:	0e03      	lsrs	r3, r0, #24
 8012004:	f363 621f 	bfi	r2, r3, #24, #8
 8012008:	4610      	mov	r0, r2
 801200a:	b004      	add	sp, #16
 801200c:	bd10      	pop	{r4, pc}
 801200e:	bf00      	nop
 8012010:	08011de9 	.word	0x08011de9

08012014 <uxr_epoch_nanos>:
 8012014:	b510      	push	{r4, lr}
 8012016:	4604      	mov	r4, r0
 8012018:	f001 fdf8 	bl	8013c0c <uxr_nanos>
 801201c:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	@ 0x98
 8012020:	1ac0      	subs	r0, r0, r3
 8012022:	eb61 0102 	sbc.w	r1, r1, r2
 8012026:	bd10      	pop	{r4, pc}

08012028 <uxr_flash_output_streams>:
 8012028:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801202c:	7e03      	ldrb	r3, [r0, #24]
 801202e:	b084      	sub	sp, #16
 8012030:	4604      	mov	r4, r0
 8012032:	2b00      	cmp	r3, #0
 8012034:	d035      	beq.n	80120a2 <uxr_flash_output_streams+0x7a>
 8012036:	f04f 0900 	mov.w	r9, #0
 801203a:	4648      	mov	r0, r9
 801203c:	f10d 0802 	add.w	r8, sp, #2
 8012040:	af03      	add	r7, sp, #12
 8012042:	ae02      	add	r6, sp, #8
 8012044:	e006      	b.n	8012054 <uxr_flash_output_streams+0x2c>
 8012046:	7e23      	ldrb	r3, [r4, #24]
 8012048:	f109 0901 	add.w	r9, r9, #1
 801204c:	fa5f f089 	uxtb.w	r0, r9
 8012050:	4283      	cmp	r3, r0
 8012052:	d926      	bls.n	80120a2 <uxr_flash_output_streams+0x7a>
 8012054:	2201      	movs	r2, #1
 8012056:	4611      	mov	r1, r2
 8012058:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 801205c:	f001 fc3e 	bl	80138dc <uxr_stream_id>
 8012060:	3508      	adds	r5, #8
 8012062:	4684      	mov	ip, r0
 8012064:	4643      	mov	r3, r8
 8012066:	463a      	mov	r2, r7
 8012068:	4631      	mov	r1, r6
 801206a:	4628      	mov	r0, r5
 801206c:	f8cd c004 	str.w	ip, [sp, #4]
 8012070:	f007 fd16 	bl	8019aa0 <uxr_prepare_best_effort_buffer_to_send>
 8012074:	2800      	cmp	r0, #0
 8012076:	d0e6      	beq.n	8012046 <uxr_flash_output_streams+0x1e>
 8012078:	9b02      	ldr	r3, [sp, #8]
 801207a:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 801207e:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8012082:	4620      	mov	r0, r4
 8012084:	f000 ff0a 	bl	8012e9c <uxr_stamp_session_header>
 8012088:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801208a:	9a03      	ldr	r2, [sp, #12]
 801208c:	685d      	ldr	r5, [r3, #4]
 801208e:	6818      	ldr	r0, [r3, #0]
 8012090:	9902      	ldr	r1, [sp, #8]
 8012092:	47a8      	blx	r5
 8012094:	f109 0901 	add.w	r9, r9, #1
 8012098:	7e23      	ldrb	r3, [r4, #24]
 801209a:	fa5f f089 	uxtb.w	r0, r9
 801209e:	4283      	cmp	r3, r0
 80120a0:	d8d8      	bhi.n	8012054 <uxr_flash_output_streams+0x2c>
 80120a2:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 80120a6:	b38b      	cbz	r3, 801210c <uxr_flash_output_streams+0xe4>
 80120a8:	f04f 0900 	mov.w	r9, #0
 80120ac:	f10d 0802 	add.w	r8, sp, #2
 80120b0:	af03      	add	r7, sp, #12
 80120b2:	ae02      	add	r6, sp, #8
 80120b4:	4648      	mov	r0, r9
 80120b6:	2201      	movs	r2, #1
 80120b8:	2102      	movs	r1, #2
 80120ba:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 80120be:	f001 fc0d 	bl	80138dc <uxr_stream_id>
 80120c2:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 80120c6:	3520      	adds	r5, #32
 80120c8:	9001      	str	r0, [sp, #4]
 80120ca:	e00d      	b.n	80120e8 <uxr_flash_output_streams+0xc0>
 80120cc:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 80120d0:	f89d 1004 	ldrb.w	r1, [sp, #4]
 80120d4:	9b02      	ldr	r3, [sp, #8]
 80120d6:	f000 fee1 	bl	8012e9c <uxr_stamp_session_header>
 80120da:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 80120dc:	9a03      	ldr	r2, [sp, #12]
 80120de:	f8d3 a004 	ldr.w	sl, [r3, #4]
 80120e2:	9902      	ldr	r1, [sp, #8]
 80120e4:	6818      	ldr	r0, [r3, #0]
 80120e6:	47d0      	blx	sl
 80120e8:	4643      	mov	r3, r8
 80120ea:	463a      	mov	r2, r7
 80120ec:	4631      	mov	r1, r6
 80120ee:	4628      	mov	r0, r5
 80120f0:	f007 fef4 	bl	8019edc <uxr_prepare_next_reliable_buffer_to_send>
 80120f4:	4603      	mov	r3, r0
 80120f6:	4620      	mov	r0, r4
 80120f8:	2b00      	cmp	r3, #0
 80120fa:	d1e7      	bne.n	80120cc <uxr_flash_output_streams+0xa4>
 80120fc:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 8012100:	f109 0901 	add.w	r9, r9, #1
 8012104:	fa5f f089 	uxtb.w	r0, r9
 8012108:	4283      	cmp	r3, r0
 801210a:	d8d4      	bhi.n	80120b6 <uxr_flash_output_streams+0x8e>
 801210c:	b004      	add	sp, #16
 801210e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012112:	bf00      	nop

08012114 <read_submessage_info>:
 8012114:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012118:	460d      	mov	r5, r1
 801211a:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 801211e:	4669      	mov	r1, sp
 8012120:	4607      	mov	r7, r0
 8012122:	4628      	mov	r0, r5
 8012124:	f002 fcfa 	bl	8014b1c <uxr_deserialize_BaseObjectReply>
 8012128:	a902      	add	r1, sp, #8
 801212a:	4604      	mov	r4, r0
 801212c:	4628      	mov	r0, r5
 801212e:	f89d 8005 	ldrb.w	r8, [sp, #5]
 8012132:	f7fa ff0b 	bl	800cf4c <ucdr_deserialize_bool>
 8012136:	f89d 3008 	ldrb.w	r3, [sp, #8]
 801213a:	4004      	ands	r4, r0
 801213c:	b2e4      	uxtb	r4, r4
 801213e:	b95b      	cbnz	r3, 8012158 <read_submessage_info+0x44>
 8012140:	a987      	add	r1, sp, #540	@ 0x21c
 8012142:	4628      	mov	r0, r5
 8012144:	f7fa ff02 	bl	800cf4c <ucdr_deserialize_bool>
 8012148:	f89d 321c 	ldrb.w	r3, [sp, #540]	@ 0x21c
 801214c:	4606      	mov	r6, r0
 801214e:	b94b      	cbnz	r3, 8012164 <read_submessage_info+0x50>
 8012150:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 8012154:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012158:	a903      	add	r1, sp, #12
 801215a:	4628      	mov	r0, r5
 801215c:	f002 fb86 	bl	801486c <uxr_deserialize_ObjectVariant>
 8012160:	4004      	ands	r4, r0
 8012162:	e7ed      	b.n	8012140 <read_submessage_info+0x2c>
 8012164:	a988      	add	r1, sp, #544	@ 0x220
 8012166:	4628      	mov	r0, r5
 8012168:	f7fa ff1e 	bl	800cfa8 <ucdr_deserialize_uint8_t>
 801216c:	4234      	tst	r4, r6
 801216e:	d0ef      	beq.n	8012150 <read_submessage_info+0x3c>
 8012170:	2800      	cmp	r0, #0
 8012172:	d0ed      	beq.n	8012150 <read_submessage_info+0x3c>
 8012174:	f89d 3220 	ldrb.w	r3, [sp, #544]	@ 0x220
 8012178:	2b0d      	cmp	r3, #13
 801217a:	d1e9      	bne.n	8012150 <read_submessage_info+0x3c>
 801217c:	a98a      	add	r1, sp, #552	@ 0x228
 801217e:	4628      	mov	r0, r5
 8012180:	f7fb fcb8 	bl	800daf4 <ucdr_deserialize_int16_t>
 8012184:	b140      	cbz	r0, 8012198 <read_submessage_info+0x84>
 8012186:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	@ 0x228
 801218a:	2b00      	cmp	r3, #0
 801218c:	dd07      	ble.n	801219e <read_submessage_info+0x8a>
 801218e:	f1b8 0f00 	cmp.w	r8, #0
 8012192:	bf14      	ite	ne
 8012194:	2001      	movne	r0, #1
 8012196:	2002      	moveq	r0, #2
 8012198:	f887 00b5 	strb.w	r0, [r7, #181]	@ 0xb5
 801219c:	e7d8      	b.n	8012150 <read_submessage_info+0x3c>
 801219e:	2000      	movs	r0, #0
 80121a0:	e7fa      	b.n	8012198 <read_submessage_info+0x84>
 80121a2:	bf00      	nop

080121a4 <read_submessage_list>:
 80121a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80121a8:	b097      	sub	sp, #92	@ 0x5c
 80121aa:	4ec1      	ldr	r6, [pc, #772]	@ (80124b0 <read_submessage_list+0x30c>)
 80121ac:	9209      	str	r2, [sp, #36]	@ 0x24
 80121ae:	4604      	mov	r4, r0
 80121b0:	460d      	mov	r5, r1
 80121b2:	f04f 0801 	mov.w	r8, #1
 80121b6:	f10d 032f 	add.w	r3, sp, #47	@ 0x2f
 80121ba:	aa0c      	add	r2, sp, #48	@ 0x30
 80121bc:	f10d 012e 	add.w	r1, sp, #46	@ 0x2e
 80121c0:	4628      	mov	r0, r5
 80121c2:	f001 fcdd 	bl	8013b80 <uxr_read_submessage_header>
 80121c6:	2800      	cmp	r0, #0
 80121c8:	f000 813e 	beq.w	8012448 <read_submessage_list+0x2a4>
 80121cc:	f89d 302e 	ldrb.w	r3, [sp, #46]	@ 0x2e
 80121d0:	f89d 2026 	ldrb.w	r2, [sp, #38]	@ 0x26
 80121d4:	3b02      	subs	r3, #2
 80121d6:	2b0d      	cmp	r3, #13
 80121d8:	d8ed      	bhi.n	80121b6 <read_submessage_list+0x12>
 80121da:	a101      	add	r1, pc, #4	@ (adr r1, 80121e0 <read_submessage_list+0x3c>)
 80121dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80121e0:	0801243f 	.word	0x0801243f
 80121e4:	080121b7 	.word	0x080121b7
 80121e8:	0801242f 	.word	0x0801242f
 80121ec:	080123cd 	.word	0x080123cd
 80121f0:	080123c3 	.word	0x080123c3
 80121f4:	080121b7 	.word	0x080121b7
 80121f8:	080121b7 	.word	0x080121b7
 80121fc:	08012323 	.word	0x08012323
 8012200:	080122b3 	.word	0x080122b3
 8012204:	08012273 	.word	0x08012273
 8012208:	080121b7 	.word	0x080121b7
 801220c:	080121b7 	.word	0x080121b7
 8012210:	080121b7 	.word	0x080121b7
 8012214:	08012219 	.word	0x08012219
 8012218:	a910      	add	r1, sp, #64	@ 0x40
 801221a:	4628      	mov	r0, r5
 801221c:	f002 feb0 	bl	8014f80 <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 8012220:	f8d4 9090 	ldr.w	r9, [r4, #144]	@ 0x90
 8012224:	f1b9 0f00 	cmp.w	r9, #0
 8012228:	f000 8116 	beq.w	8012458 <read_submessage_list+0x2b4>
 801222c:	f001 fcee 	bl	8013c0c <uxr_nanos>
 8012230:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 8012232:	4602      	mov	r2, r0
 8012234:	460b      	mov	r3, r1
 8012236:	9814      	ldr	r0, [sp, #80]	@ 0x50
 8012238:	2100      	movs	r1, #0
 801223a:	468c      	mov	ip, r1
 801223c:	fbc0 7c06 	smlal	r7, ip, r0, r6
 8012240:	e9cd 7c04 	strd	r7, ip, [sp, #16]
 8012244:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8012246:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 8012248:	468c      	mov	ip, r1
 801224a:	fbc0 7c06 	smlal	r7, ip, r0, r6
 801224e:	46e2      	mov	sl, ip
 8012250:	46bc      	mov	ip, r7
 8012252:	e9dd 0712 	ldrd	r0, r7, [sp, #72]	@ 0x48
 8012256:	fbc0 7106 	smlal	r7, r1, r0, r6
 801225a:	e9cd ca02 	strd	ip, sl, [sp, #8]
 801225e:	e9cd 7100 	strd	r7, r1, [sp]
 8012262:	f8d4 1094 	ldr.w	r1, [r4, #148]	@ 0x94
 8012266:	9106      	str	r1, [sp, #24]
 8012268:	4620      	mov	r0, r4
 801226a:	47c8      	blx	r9
 801226c:	f884 80a0 	strb.w	r8, [r4, #160]	@ 0xa0
 8012270:	e7a1      	b.n	80121b6 <read_submessage_list+0x12>
 8012272:	a910      	add	r1, sp, #64	@ 0x40
 8012274:	4628      	mov	r0, r5
 8012276:	f002 fe63 	bl	8014f40 <uxr_deserialize_HEARTBEAT_Payload>
 801227a:	2100      	movs	r1, #0
 801227c:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 8012280:	f001 fb56 	bl	8013930 <uxr_stream_id_from_raw>
 8012284:	f3c0 2707 	ubfx	r7, r0, #8, #8
 8012288:	900f      	str	r0, [sp, #60]	@ 0x3c
 801228a:	4639      	mov	r1, r7
 801228c:	f104 0008 	add.w	r0, r4, #8
 8012290:	f001 fc3c 	bl	8013b0c <uxr_get_input_reliable_stream>
 8012294:	2800      	cmp	r0, #0
 8012296:	d08e      	beq.n	80121b6 <read_submessage_list+0x12>
 8012298:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 801229c:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
 80122a0:	f007 fb6c 	bl	801997c <uxr_process_heartbeat>
 80122a4:	f89d 103c 	ldrb.w	r1, [sp, #60]	@ 0x3c
 80122a8:	463a      	mov	r2, r7
 80122aa:	4620      	mov	r0, r4
 80122ac:	f7ff fdf4 	bl	8011e98 <write_submessage_acknack.isra.0>
 80122b0:	e781      	b.n	80121b6 <read_submessage_list+0x12>
 80122b2:	a910      	add	r1, sp, #64	@ 0x40
 80122b4:	4628      	mov	r0, r5
 80122b6:	f002 fe1b 	bl	8014ef0 <uxr_deserialize_ACKNACK_Payload>
 80122ba:	2100      	movs	r1, #0
 80122bc:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 80122c0:	f001 fb36 	bl	8013930 <uxr_stream_id_from_raw>
 80122c4:	900d      	str	r0, [sp, #52]	@ 0x34
 80122c6:	f3c0 2107 	ubfx	r1, r0, #8, #8
 80122ca:	f104 0008 	add.w	r0, r4, #8
 80122ce:	f001 fc09 	bl	8013ae4 <uxr_get_output_reliable_stream>
 80122d2:	4607      	mov	r7, r0
 80122d4:	2800      	cmp	r0, #0
 80122d6:	f43f af6e 	beq.w	80121b6 <read_submessage_list+0x12>
 80122da:	f89d 3042 	ldrb.w	r3, [sp, #66]	@ 0x42
 80122de:	f89d 1043 	ldrb.w	r1, [sp, #67]	@ 0x43
 80122e2:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 80122e6:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 80122ea:	b289      	uxth	r1, r1
 80122ec:	f007 fea0 	bl	801a030 <uxr_process_acknack>
 80122f0:	4638      	mov	r0, r7
 80122f2:	f007 fe5d 	bl	8019fb0 <uxr_begin_output_nack_buffer_it>
 80122f6:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 80122fa:	f8ad 0032 	strh.w	r0, [sp, #50]	@ 0x32
 80122fe:	e006      	b.n	801230e <read_submessage_list+0x16a>
 8012300:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8012302:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8012304:	f8d3 9004 	ldr.w	r9, [r3, #4]
 8012308:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801230a:	6818      	ldr	r0, [r3, #0]
 801230c:	47c8      	blx	r9
 801230e:	f10d 0332 	add.w	r3, sp, #50	@ 0x32
 8012312:	aa0f      	add	r2, sp, #60	@ 0x3c
 8012314:	4651      	mov	r1, sl
 8012316:	4638      	mov	r0, r7
 8012318:	f007 fe4c 	bl	8019fb4 <uxr_next_reliable_nack_buffer_to_send>
 801231c:	2800      	cmp	r0, #0
 801231e:	d1ef      	bne.n	8012300 <read_submessage_list+0x15c>
 8012320:	e749      	b.n	80121b6 <read_submessage_list+0x12>
 8012322:	f89d 3025 	ldrb.w	r3, [sp, #37]	@ 0x25
 8012326:	f88d 3035 	strb.w	r3, [sp, #53]	@ 0x35
 801232a:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 801232e:	f89d 3027 	ldrb.w	r3, [sp, #39]	@ 0x27
 8012332:	f88d 3037 	strb.w	r3, [sp, #55]	@ 0x37
 8012336:	4651      	mov	r1, sl
 8012338:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 801233c:	f8bd 7030 	ldrh.w	r7, [sp, #48]	@ 0x30
 8012340:	f89d 902f 	ldrb.w	r9, [sp, #47]	@ 0x2f
 8012344:	f88d 2036 	strb.w	r2, [sp, #54]	@ 0x36
 8012348:	4628      	mov	r0, r5
 801234a:	f88d 3034 	strb.w	r3, [sp, #52]	@ 0x34
 801234e:	f002 fb2f 	bl	80149b0 <uxr_deserialize_BaseObjectRequest>
 8012352:	4650      	mov	r0, sl
 8012354:	a90f      	add	r1, sp, #60	@ 0x3c
 8012356:	f10d 0232 	add.w	r2, sp, #50	@ 0x32
 801235a:	f000 fe1b 	bl	8012f94 <uxr_parse_base_object_request>
 801235e:	f8d4 b080 	ldr.w	fp, [r4, #128]	@ 0x80
 8012362:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8012364:	f8bd a032 	ldrh.w	sl, [sp, #50]	@ 0x32
 8012368:	9110      	str	r1, [sp, #64]	@ 0x40
 801236a:	3f04      	subs	r7, #4
 801236c:	f009 090e 	and.w	r9, r9, #14
 8012370:	b2bf      	uxth	r7, r7
 8012372:	f1bb 0f00 	cmp.w	fp, #0
 8012376:	d006      	beq.n	8012386 <read_submessage_list+0x1e2>
 8012378:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 801237c:	9300      	str	r3, [sp, #0]
 801237e:	4652      	mov	r2, sl
 8012380:	2300      	movs	r3, #0
 8012382:	4620      	mov	r0, r4
 8012384:	47d8      	blx	fp
 8012386:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 8012388:	b16a      	cbz	r2, 80123a6 <read_submessage_list+0x202>
 801238a:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 801238c:	2100      	movs	r1, #0
 801238e:	3802      	subs	r0, #2
 8012390:	e002      	b.n	8012398 <read_submessage_list+0x1f4>
 8012392:	3101      	adds	r1, #1
 8012394:	4291      	cmp	r1, r2
 8012396:	d006      	beq.n	80123a6 <read_submessage_list+0x202>
 8012398:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 801239c:	4553      	cmp	r3, sl
 801239e:	d1f8      	bne.n	8012392 <read_submessage_list+0x1ee>
 80123a0:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 80123a2:	2200      	movs	r2, #0
 80123a4:	545a      	strb	r2, [r3, r1]
 80123a6:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 80123aa:	9102      	str	r1, [sp, #8]
 80123ac:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80123ae:	9101      	str	r1, [sp, #4]
 80123b0:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80123b2:	9100      	str	r1, [sp, #0]
 80123b4:	464b      	mov	r3, r9
 80123b6:	463a      	mov	r2, r7
 80123b8:	4629      	mov	r1, r5
 80123ba:	4620      	mov	r0, r4
 80123bc:	f7ff fc4a 	bl	8011c54 <read_submessage_format>
 80123c0:	e6f9      	b.n	80121b6 <read_submessage_list+0x12>
 80123c2:	4629      	mov	r1, r5
 80123c4:	4620      	mov	r0, r4
 80123c6:	f7ff fea5 	bl	8012114 <read_submessage_info>
 80123ca:	e6f4      	b.n	80121b6 <read_submessage_list+0x12>
 80123cc:	2a00      	cmp	r2, #0
 80123ce:	d03e      	beq.n	801244e <read_submessage_list+0x2aa>
 80123d0:	a910      	add	r1, sp, #64	@ 0x40
 80123d2:	4628      	mov	r0, r5
 80123d4:	f002 fce8 	bl	8014da8 <uxr_deserialize_STATUS_Payload>
 80123d8:	a90e      	add	r1, sp, #56	@ 0x38
 80123da:	aa0d      	add	r2, sp, #52	@ 0x34
 80123dc:	a810      	add	r0, sp, #64	@ 0x40
 80123de:	f000 fdd9 	bl	8012f94 <uxr_parse_base_object_request>
 80123e2:	f8d4 a080 	ldr.w	sl, [r4, #128]	@ 0x80
 80123e6:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80123e8:	f89d 9044 	ldrb.w	r9, [sp, #68]	@ 0x44
 80123ec:	f8bd 7034 	ldrh.w	r7, [sp, #52]	@ 0x34
 80123f0:	910f      	str	r1, [sp, #60]	@ 0x3c
 80123f2:	f1ba 0f00 	cmp.w	sl, #0
 80123f6:	d006      	beq.n	8012406 <read_submessage_list+0x262>
 80123f8:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 80123fc:	9300      	str	r3, [sp, #0]
 80123fe:	463a      	mov	r2, r7
 8012400:	464b      	mov	r3, r9
 8012402:	4620      	mov	r0, r4
 8012404:	47d0      	blx	sl
 8012406:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 8012408:	2a00      	cmp	r2, #0
 801240a:	f43f aed4 	beq.w	80121b6 <read_submessage_list+0x12>
 801240e:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 8012410:	2100      	movs	r1, #0
 8012412:	3802      	subs	r0, #2
 8012414:	e003      	b.n	801241e <read_submessage_list+0x27a>
 8012416:	3101      	adds	r1, #1
 8012418:	4291      	cmp	r1, r2
 801241a:	f43f aecc 	beq.w	80121b6 <read_submessage_list+0x12>
 801241e:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 8012422:	42bb      	cmp	r3, r7
 8012424:	d1f7      	bne.n	8012416 <read_submessage_list+0x272>
 8012426:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8012428:	f803 9001 	strb.w	r9, [r3, r1]
 801242c:	e6c3      	b.n	80121b6 <read_submessage_list+0x12>
 801242e:	2a00      	cmp	r2, #0
 8012430:	f47f aec1 	bne.w	80121b6 <read_submessage_list+0x12>
 8012434:	4629      	mov	r1, r5
 8012436:	4620      	mov	r0, r4
 8012438:	f000 fcf2 	bl	8012e20 <uxr_read_create_session_status>
 801243c:	e6bb      	b.n	80121b6 <read_submessage_list+0x12>
 801243e:	4629      	mov	r1, r5
 8012440:	4620      	mov	r0, r4
 8012442:	f7ff fcf3 	bl	8011e2c <read_submessage_get_info>
 8012446:	e6b6      	b.n	80121b6 <read_submessage_list+0x12>
 8012448:	b017      	add	sp, #92	@ 0x5c
 801244a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801244e:	4629      	mov	r1, r5
 8012450:	4620      	mov	r0, r4
 8012452:	f000 fcf1 	bl	8012e38 <uxr_read_delete_session_status>
 8012456:	e6ae      	b.n	80121b6 <read_submessage_list+0x12>
 8012458:	f001 fbd8 	bl	8013c0c <uxr_nanos>
 801245c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801245e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8012460:	464f      	mov	r7, r9
 8012462:	fbc3 2706 	smlal	r2, r7, r3, r6
 8012466:	1812      	adds	r2, r2, r0
 8012468:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801246a:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801246c:	eb47 0101 	adc.w	r1, r7, r1
 8012470:	464f      	mov	r7, r9
 8012472:	fbc3 0706 	smlal	r0, r7, r3, r6
 8012476:	463b      	mov	r3, r7
 8012478:	4684      	mov	ip, r0
 801247a:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	@ 0x40
 801247e:	fbc7 0906 	smlal	r0, r9, r7, r6
 8012482:	eb1c 0c00 	adds.w	ip, ip, r0
 8012486:	464f      	mov	r7, r9
 8012488:	eb43 0307 	adc.w	r3, r3, r7
 801248c:	ebb2 0c0c 	subs.w	ip, r2, ip
 8012490:	eb61 0303 	sbc.w	r3, r1, r3
 8012494:	0fda      	lsrs	r2, r3, #31
 8012496:	eb12 020c 	adds.w	r2, r2, ip
 801249a:	f143 0300 	adc.w	r3, r3, #0
 801249e:	0852      	lsrs	r2, r2, #1
 80124a0:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
 80124a4:	105b      	asrs	r3, r3, #1
 80124a6:	f8c4 2098 	str.w	r2, [r4, #152]	@ 0x98
 80124aa:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
 80124ae:	e6dd      	b.n	801226c <read_submessage_list+0xc8>
 80124b0:	3b9aca00 	.word	0x3b9aca00

080124b4 <listen_message_reliably>:
 80124b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80124b8:	1e0b      	subs	r3, r1, #0
 80124ba:	b09d      	sub	sp, #116	@ 0x74
 80124bc:	bfb8      	it	lt
 80124be:	f06f 4300 	mvnlt.w	r3, #2147483648	@ 0x80000000
 80124c2:	4680      	mov	r8, r0
 80124c4:	9305      	str	r3, [sp, #20]
 80124c6:	f001 fb87 	bl	8013bd8 <uxr_millis>
 80124ca:	f898 2048 	ldrb.w	r2, [r8, #72]	@ 0x48
 80124ce:	4681      	mov	r9, r0
 80124d0:	2a00      	cmp	r2, #0
 80124d2:	f000 80a1 	beq.w	8012618 <listen_message_reliably+0x164>
 80124d6:	2600      	movs	r6, #0
 80124d8:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80124dc:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 80124e0:	9303      	str	r3, [sp, #12]
 80124e2:	4630      	mov	r0, r6
 80124e4:	460f      	mov	r7, r1
 80124e6:	e00f      	b.n	8012508 <listen_message_reliably+0x54>
 80124e8:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 80124ec:	9903      	ldr	r1, [sp, #12]
 80124ee:	455a      	cmp	r2, fp
 80124f0:	f106 0601 	add.w	r6, r6, #1
 80124f4:	eb73 0101 	sbcs.w	r1, r3, r1
 80124f8:	b2f0      	uxtb	r0, r6
 80124fa:	da01      	bge.n	8012500 <listen_message_reliably+0x4c>
 80124fc:	4693      	mov	fp, r2
 80124fe:	9303      	str	r3, [sp, #12]
 8012500:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 8012504:	4283      	cmp	r3, r0
 8012506:	d960      	bls.n	80125ca <listen_message_reliably+0x116>
 8012508:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 801250c:	2102      	movs	r1, #2
 801250e:	2201      	movs	r2, #1
 8012510:	f001 f9e4 	bl	80138dc <uxr_stream_id>
 8012514:	00e4      	lsls	r4, r4, #3
 8012516:	f104 0520 	add.w	r5, r4, #32
 801251a:	4445      	add	r5, r8
 801251c:	4601      	mov	r1, r0
 801251e:	463b      	mov	r3, r7
 8012520:	464a      	mov	r2, r9
 8012522:	4628      	mov	r0, r5
 8012524:	9109      	str	r1, [sp, #36]	@ 0x24
 8012526:	f007 fd19 	bl	8019f5c <uxr_update_output_stream_heartbeat_timestamp>
 801252a:	eb08 0304 	add.w	r3, r8, r4
 801252e:	2800      	cmp	r0, #0
 8012530:	d0da      	beq.n	80124e8 <listen_message_reliably+0x34>
 8012532:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 8012536:	f89d 5025 	ldrb.w	r5, [sp, #37]	@ 0x25
 801253a:	9304      	str	r3, [sp, #16]
 801253c:	4640      	mov	r0, r8
 801253e:	f000 fd03 	bl	8012f48 <uxr_session_header_offset>
 8012542:	3501      	adds	r5, #1
 8012544:	f10d 0a50 	add.w	sl, sp, #80	@ 0x50
 8012548:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 801254c:	eb08 05c5 	add.w	r5, r8, r5, lsl #3
 8012550:	2300      	movs	r3, #0
 8012552:	2211      	movs	r2, #17
 8012554:	9000      	str	r0, [sp, #0]
 8012556:	a90c      	add	r1, sp, #48	@ 0x30
 8012558:	4650      	mov	r0, sl
 801255a:	f7fb ffdf 	bl	800e51c <ucdr_init_buffer_origin_offset>
 801255e:	2300      	movs	r3, #0
 8012560:	2205      	movs	r2, #5
 8012562:	210b      	movs	r1, #11
 8012564:	4650      	mov	r0, sl
 8012566:	f001 faf1 	bl	8013b4c <uxr_buffer_submessage_header>
 801256a:	8968      	ldrh	r0, [r5, #10]
 801256c:	2101      	movs	r1, #1
 801256e:	f007 fdb7 	bl	801a0e0 <uxr_seq_num_add>
 8012572:	892b      	ldrh	r3, [r5, #8]
 8012574:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 8012578:	4602      	mov	r2, r0
 801257a:	9b04      	ldr	r3, [sp, #16]
 801257c:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 8012580:	a90a      	add	r1, sp, #40	@ 0x28
 8012582:	4650      	mov	r0, sl
 8012584:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 8012588:	f002 fcc6 	bl	8014f18 <uxr_serialize_HEARTBEAT_Payload>
 801258c:	2200      	movs	r2, #0
 801258e:	4611      	mov	r1, r2
 8012590:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8012592:	4640      	mov	r0, r8
 8012594:	f000 fc82 	bl	8012e9c <uxr_stamp_session_header>
 8012598:	4650      	mov	r0, sl
 801259a:	f7fb fffd 	bl	800e598 <ucdr_buffer_length>
 801259e:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 80125a2:	4602      	mov	r2, r0
 80125a4:	a90c      	add	r1, sp, #48	@ 0x30
 80125a6:	e9d3 0500 	ldrd	r0, r5, [r3]
 80125aa:	4444      	add	r4, r8
 80125ac:	47a8      	blx	r5
 80125ae:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	@ 0x38
 80125b2:	9903      	ldr	r1, [sp, #12]
 80125b4:	455a      	cmp	r2, fp
 80125b6:	f106 0601 	add.w	r6, r6, #1
 80125ba:	eb73 0101 	sbcs.w	r1, r3, r1
 80125be:	b2f0      	uxtb	r0, r6
 80125c0:	db9c      	blt.n	80124fc <listen_message_reliably+0x48>
 80125c2:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 80125c6:	4283      	cmp	r3, r0
 80125c8:	d89e      	bhi.n	8012508 <listen_message_reliably+0x54>
 80125ca:	9a03      	ldr	r2, [sp, #12]
 80125cc:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80125d0:	429a      	cmp	r2, r3
 80125d2:	bf08      	it	eq
 80125d4:	f1bb 3fff 	cmpeq.w	fp, #4294967295	@ 0xffffffff
 80125d8:	d01e      	beq.n	8012618 <listen_message_reliably+0x164>
 80125da:	ebab 0309 	sub.w	r3, fp, r9
 80125de:	9905      	ldr	r1, [sp, #20]
 80125e0:	f8d8 2070 	ldr.w	r2, [r8, #112]	@ 0x70
 80125e4:	2b00      	cmp	r3, #0
 80125e6:	bf08      	it	eq
 80125e8:	2301      	moveq	r3, #1
 80125ea:	4299      	cmp	r1, r3
 80125ec:	bfa8      	it	ge
 80125ee:	4619      	movge	r1, r3
 80125f0:	6894      	ldr	r4, [r2, #8]
 80125f2:	6810      	ldr	r0, [r2, #0]
 80125f4:	4689      	mov	r9, r1
 80125f6:	460b      	mov	r3, r1
 80125f8:	aa08      	add	r2, sp, #32
 80125fa:	a907      	add	r1, sp, #28
 80125fc:	47a0      	blx	r4
 80125fe:	b968      	cbnz	r0, 801261c <listen_message_reliably+0x168>
 8012600:	9b05      	ldr	r3, [sp, #20]
 8012602:	eba3 0309 	sub.w	r3, r3, r9
 8012606:	2b00      	cmp	r3, #0
 8012608:	9305      	str	r3, [sp, #20]
 801260a:	f73f af5c 	bgt.w	80124c6 <listen_message_reliably+0x12>
 801260e:	4604      	mov	r4, r0
 8012610:	4620      	mov	r0, r4
 8012612:	b01d      	add	sp, #116	@ 0x74
 8012614:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012618:	9b05      	ldr	r3, [sp, #20]
 801261a:	e7e0      	b.n	80125de <listen_message_reliably+0x12a>
 801261c:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 8012620:	4604      	mov	r4, r0
 8012622:	a80c      	add	r0, sp, #48	@ 0x30
 8012624:	f7fb ff8c 	bl	800e540 <ucdr_init_buffer>
 8012628:	2500      	movs	r5, #0
 801262a:	f10d 031a 	add.w	r3, sp, #26
 801262e:	aa06      	add	r2, sp, #24
 8012630:	a90c      	add	r1, sp, #48	@ 0x30
 8012632:	4640      	mov	r0, r8
 8012634:	f88d 5018 	strb.w	r5, [sp, #24]
 8012638:	f000 fc44 	bl	8012ec4 <uxr_read_session_header>
 801263c:	b918      	cbnz	r0, 8012646 <listen_message_reliably+0x192>
 801263e:	4620      	mov	r0, r4
 8012640:	b01d      	add	sp, #116	@ 0x74
 8012642:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012646:	4629      	mov	r1, r5
 8012648:	f89d 0018 	ldrb.w	r0, [sp, #24]
 801264c:	f001 f970 	bl	8013930 <uxr_stream_id_from_raw>
 8012650:	f3c0 4507 	ubfx	r5, r0, #16, #8
 8012654:	2d01      	cmp	r5, #1
 8012656:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 801265a:	f8bd a01a 	ldrh.w	sl, [sp, #26]
 801265e:	f3c0 2607 	ubfx	r6, r0, #8, #8
 8012662:	d04b      	beq.n	80126fc <listen_message_reliably+0x248>
 8012664:	2d02      	cmp	r5, #2
 8012666:	d00f      	beq.n	8012688 <listen_message_reliably+0x1d4>
 8012668:	2d00      	cmp	r5, #0
 801266a:	d1e8      	bne.n	801263e <listen_message_reliably+0x18a>
 801266c:	4629      	mov	r1, r5
 801266e:	4628      	mov	r0, r5
 8012670:	f001 f95e 	bl	8013930 <uxr_stream_id_from_raw>
 8012674:	a90c      	add	r1, sp, #48	@ 0x30
 8012676:	4602      	mov	r2, r0
 8012678:	4640      	mov	r0, r8
 801267a:	920a      	str	r2, [sp, #40]	@ 0x28
 801267c:	f7ff fd92 	bl	80121a4 <read_submessage_list>
 8012680:	4620      	mov	r0, r4
 8012682:	b01d      	add	sp, #116	@ 0x74
 8012684:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012688:	4631      	mov	r1, r6
 801268a:	f108 0008 	add.w	r0, r8, #8
 801268e:	f89d 9024 	ldrb.w	r9, [sp, #36]	@ 0x24
 8012692:	f001 fa3b 	bl	8013b0c <uxr_get_input_reliable_stream>
 8012696:	4607      	mov	r7, r0
 8012698:	b338      	cbz	r0, 80126ea <listen_message_reliably+0x236>
 801269a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801269c:	9203      	str	r2, [sp, #12]
 801269e:	a80c      	add	r0, sp, #48	@ 0x30
 80126a0:	f7fb ff7e 	bl	800e5a0 <ucdr_buffer_remaining>
 80126a4:	4603      	mov	r3, r0
 80126a6:	f10d 0019 	add.w	r0, sp, #25
 80126aa:	9000      	str	r0, [sp, #0]
 80126ac:	9a03      	ldr	r2, [sp, #12]
 80126ae:	4651      	mov	r1, sl
 80126b0:	4638      	mov	r0, r7
 80126b2:	f007 f869 	bl	8019788 <uxr_receive_reliable_message>
 80126b6:	b1c0      	cbz	r0, 80126ea <listen_message_reliably+0x236>
 80126b8:	f89d 3019 	ldrb.w	r3, [sp, #25]
 80126bc:	b393      	cbz	r3, 8012724 <listen_message_reliably+0x270>
 80126be:	ad14      	add	r5, sp, #80	@ 0x50
 80126c0:	f04f 0a02 	mov.w	sl, #2
 80126c4:	e00a      	b.n	80126dc <listen_message_reliably+0x228>
 80126c6:	f88d 9028 	strb.w	r9, [sp, #40]	@ 0x28
 80126ca:	f88d 6029 	strb.w	r6, [sp, #41]	@ 0x29
 80126ce:	f88d a02a 	strb.w	sl, [sp, #42]	@ 0x2a
 80126d2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80126d4:	4629      	mov	r1, r5
 80126d6:	4640      	mov	r0, r8
 80126d8:	f7ff fd64 	bl	80121a4 <read_submessage_list>
 80126dc:	2204      	movs	r2, #4
 80126de:	4629      	mov	r1, r5
 80126e0:	4638      	mov	r0, r7
 80126e2:	f007 f8d1 	bl	8019888 <uxr_next_input_reliable_buffer_available>
 80126e6:	2800      	cmp	r0, #0
 80126e8:	d1ed      	bne.n	80126c6 <listen_message_reliably+0x212>
 80126ea:	4640      	mov	r0, r8
 80126ec:	4632      	mov	r2, r6
 80126ee:	4649      	mov	r1, r9
 80126f0:	f7ff fbd2 	bl	8011e98 <write_submessage_acknack.isra.0>
 80126f4:	4620      	mov	r0, r4
 80126f6:	b01d      	add	sp, #116	@ 0x74
 80126f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80126fc:	4631      	mov	r1, r6
 80126fe:	f108 0008 	add.w	r0, r8, #8
 8012702:	f001 f9f9 	bl	8013af8 <uxr_get_input_best_effort_stream>
 8012706:	2800      	cmp	r0, #0
 8012708:	d099      	beq.n	801263e <listen_message_reliably+0x18a>
 801270a:	4651      	mov	r1, sl
 801270c:	f006 ffa8 	bl	8019660 <uxr_receive_best_effort_message>
 8012710:	2800      	cmp	r0, #0
 8012712:	d094      	beq.n	801263e <listen_message_reliably+0x18a>
 8012714:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 8012718:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801271a:	a90c      	add	r1, sp, #48	@ 0x30
 801271c:	4640      	mov	r0, r8
 801271e:	f7ff fd41 	bl	80121a4 <read_submessage_list>
 8012722:	e78c      	b.n	801263e <listen_message_reliably+0x18a>
 8012724:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 8012728:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801272a:	a90c      	add	r1, sp, #48	@ 0x30
 801272c:	4640      	mov	r0, r8
 801272e:	f7ff fd39 	bl	80121a4 <read_submessage_list>
 8012732:	e7c4      	b.n	80126be <listen_message_reliably+0x20a>

08012734 <uxr_run_session_timeout>:
 8012734:	b570      	push	{r4, r5, r6, lr}
 8012736:	4604      	mov	r4, r0
 8012738:	460d      	mov	r5, r1
 801273a:	f001 fa4d 	bl	8013bd8 <uxr_millis>
 801273e:	4606      	mov	r6, r0
 8012740:	4620      	mov	r0, r4
 8012742:	f7ff fc71 	bl	8012028 <uxr_flash_output_streams>
 8012746:	4629      	mov	r1, r5
 8012748:	4620      	mov	r0, r4
 801274a:	f7ff feb3 	bl	80124b4 <listen_message_reliably>
 801274e:	f001 fa43 	bl	8013bd8 <uxr_millis>
 8012752:	1b83      	subs	r3, r0, r6
 8012754:	1ae9      	subs	r1, r5, r3
 8012756:	2900      	cmp	r1, #0
 8012758:	dcf6      	bgt.n	8012748 <uxr_run_session_timeout+0x14>
 801275a:	f104 0008 	add.w	r0, r4, #8
 801275e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012762:	f001 b9dd 	b.w	8013b20 <uxr_output_streams_confirmed>
 8012766:	bf00      	nop

08012768 <uxr_run_session_until_data>:
 8012768:	b570      	push	{r4, r5, r6, lr}
 801276a:	4604      	mov	r4, r0
 801276c:	460d      	mov	r5, r1
 801276e:	f001 fa33 	bl	8013bd8 <uxr_millis>
 8012772:	4606      	mov	r6, r0
 8012774:	4620      	mov	r0, r4
 8012776:	f7ff fc57 	bl	8012028 <uxr_flash_output_streams>
 801277a:	2300      	movs	r3, #0
 801277c:	f884 30b4 	strb.w	r3, [r4, #180]	@ 0xb4
 8012780:	4629      	mov	r1, r5
 8012782:	e005      	b.n	8012790 <uxr_run_session_until_data+0x28>
 8012784:	f001 fa28 	bl	8013bd8 <uxr_millis>
 8012788:	1b83      	subs	r3, r0, r6
 801278a:	1ae9      	subs	r1, r5, r3
 801278c:	2900      	cmp	r1, #0
 801278e:	dd07      	ble.n	80127a0 <uxr_run_session_until_data+0x38>
 8012790:	4620      	mov	r0, r4
 8012792:	f7ff fe8f 	bl	80124b4 <listen_message_reliably>
 8012796:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 801279a:	2800      	cmp	r0, #0
 801279c:	d0f2      	beq.n	8012784 <uxr_run_session_until_data+0x1c>
 801279e:	bd70      	pop	{r4, r5, r6, pc}
 80127a0:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 80127a4:	bd70      	pop	{r4, r5, r6, pc}
 80127a6:	bf00      	nop

080127a8 <uxr_run_session_until_confirm_delivery>:
 80127a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80127ac:	4606      	mov	r6, r0
 80127ae:	460d      	mov	r5, r1
 80127b0:	f001 fa12 	bl	8013bd8 <uxr_millis>
 80127b4:	4607      	mov	r7, r0
 80127b6:	4630      	mov	r0, r6
 80127b8:	f7ff fc36 	bl	8012028 <uxr_flash_output_streams>
 80127bc:	2d00      	cmp	r5, #0
 80127be:	f106 0808 	add.w	r8, r6, #8
 80127c2:	bfa8      	it	ge
 80127c4:	462c      	movge	r4, r5
 80127c6:	da07      	bge.n	80127d8 <uxr_run_session_until_confirm_delivery+0x30>
 80127c8:	e00e      	b.n	80127e8 <uxr_run_session_until_confirm_delivery+0x40>
 80127ca:	f7ff fe73 	bl	80124b4 <listen_message_reliably>
 80127ce:	f001 fa03 	bl	8013bd8 <uxr_millis>
 80127d2:	1bc3      	subs	r3, r0, r7
 80127d4:	1aec      	subs	r4, r5, r3
 80127d6:	d407      	bmi.n	80127e8 <uxr_run_session_until_confirm_delivery+0x40>
 80127d8:	4640      	mov	r0, r8
 80127da:	f001 f9a1 	bl	8013b20 <uxr_output_streams_confirmed>
 80127de:	4603      	mov	r3, r0
 80127e0:	4621      	mov	r1, r4
 80127e2:	4630      	mov	r0, r6
 80127e4:	2b00      	cmp	r3, #0
 80127e6:	d0f0      	beq.n	80127ca <uxr_run_session_until_confirm_delivery+0x22>
 80127e8:	4640      	mov	r0, r8
 80127ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80127ee:	f001 b997 	b.w	8013b20 <uxr_output_streams_confirmed>
 80127f2:	bf00      	nop

080127f4 <uxr_run_session_until_all_status>:
 80127f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80127f8:	9c08      	ldr	r4, [sp, #32]
 80127fa:	4606      	mov	r6, r0
 80127fc:	460f      	mov	r7, r1
 80127fe:	4691      	mov	r9, r2
 8012800:	461d      	mov	r5, r3
 8012802:	f7ff fc11 	bl	8012028 <uxr_flash_output_streams>
 8012806:	b124      	cbz	r4, 8012812 <uxr_run_session_until_all_status+0x1e>
 8012808:	4622      	mov	r2, r4
 801280a:	21ff      	movs	r1, #255	@ 0xff
 801280c:	4628      	mov	r0, r5
 801280e:	f008 fdad 	bl	801b36c <memset>
 8012812:	e9c6 951d 	strd	r9, r5, [r6, #116]	@ 0x74
 8012816:	67f4      	str	r4, [r6, #124]	@ 0x7c
 8012818:	f001 f9de 	bl	8013bd8 <uxr_millis>
 801281c:	3d01      	subs	r5, #1
 801281e:	f1a9 0902 	sub.w	r9, r9, #2
 8012822:	4680      	mov	r8, r0
 8012824:	4639      	mov	r1, r7
 8012826:	4630      	mov	r0, r6
 8012828:	f7ff fe44 	bl	80124b4 <listen_message_reliably>
 801282c:	f001 f9d4 	bl	8013bd8 <uxr_millis>
 8012830:	eba0 0008 	sub.w	r0, r0, r8
 8012834:	1a39      	subs	r1, r7, r0
 8012836:	b344      	cbz	r4, 801288a <uxr_run_session_until_all_status+0x96>
 8012838:	4628      	mov	r0, r5
 801283a:	46ac      	mov	ip, r5
 801283c:	2301      	movs	r3, #1
 801283e:	e002      	b.n	8012846 <uxr_run_session_until_all_status+0x52>
 8012840:	42a3      	cmp	r3, r4
 8012842:	d20d      	bcs.n	8012860 <uxr_run_session_until_all_status+0x6c>
 8012844:	3301      	adds	r3, #1
 8012846:	f81c ef01 	ldrb.w	lr, [ip, #1]!
 801284a:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 801284e:	d1f7      	bne.n	8012840 <uxr_run_session_until_all_status+0x4c>
 8012850:	42a3      	cmp	r3, r4
 8012852:	f839 2013 	ldrh.w	r2, [r9, r3, lsl #1]
 8012856:	d213      	bcs.n	8012880 <uxr_run_session_until_all_status+0x8c>
 8012858:	2a00      	cmp	r2, #0
 801285a:	d0f3      	beq.n	8012844 <uxr_run_session_until_all_status+0x50>
 801285c:	2900      	cmp	r1, #0
 801285e:	dce2      	bgt.n	8012826 <uxr_run_session_until_all_status+0x32>
 8012860:	2300      	movs	r3, #0
 8012862:	67f3      	str	r3, [r6, #124]	@ 0x7c
 8012864:	442c      	add	r4, r5
 8012866:	e001      	b.n	801286c <uxr_run_session_until_all_status+0x78>
 8012868:	2b01      	cmp	r3, #1
 801286a:	d812      	bhi.n	8012892 <uxr_run_session_until_all_status+0x9e>
 801286c:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8012870:	4284      	cmp	r4, r0
 8012872:	d1f9      	bne.n	8012868 <uxr_run_session_until_all_status+0x74>
 8012874:	2b01      	cmp	r3, #1
 8012876:	bf8c      	ite	hi
 8012878:	2000      	movhi	r0, #0
 801287a:	2001      	movls	r0, #1
 801287c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012880:	2900      	cmp	r1, #0
 8012882:	dded      	ble.n	8012860 <uxr_run_session_until_all_status+0x6c>
 8012884:	2a00      	cmp	r2, #0
 8012886:	d1ce      	bne.n	8012826 <uxr_run_session_until_all_status+0x32>
 8012888:	e7ea      	b.n	8012860 <uxr_run_session_until_all_status+0x6c>
 801288a:	67f4      	str	r4, [r6, #124]	@ 0x7c
 801288c:	2001      	movs	r0, #1
 801288e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012892:	2000      	movs	r0, #0
 8012894:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08012898 <uxr_sync_session>:
 8012898:	b5f0      	push	{r4, r5, r6, r7, lr}
 801289a:	b093      	sub	sp, #76	@ 0x4c
 801289c:	4604      	mov	r4, r0
 801289e:	460d      	mov	r5, r1
 80128a0:	f000 fb52 	bl	8012f48 <uxr_session_header_offset>
 80128a4:	2214      	movs	r2, #20
 80128a6:	eb0d 0102 	add.w	r1, sp, r2
 80128aa:	9000      	str	r0, [sp, #0]
 80128ac:	2300      	movs	r3, #0
 80128ae:	a80a      	add	r0, sp, #40	@ 0x28
 80128b0:	f7fb fe34 	bl	800e51c <ucdr_init_buffer_origin_offset>
 80128b4:	2300      	movs	r3, #0
 80128b6:	2208      	movs	r2, #8
 80128b8:	210e      	movs	r1, #14
 80128ba:	a80a      	add	r0, sp, #40	@ 0x28
 80128bc:	f001 f946 	bl	8013b4c <uxr_buffer_submessage_header>
 80128c0:	f001 f9a4 	bl	8013c0c <uxr_nanos>
 80128c4:	a31c      	add	r3, pc, #112	@ (adr r3, 8012938 <uxr_sync_session+0xa0>)
 80128c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80128ca:	460e      	mov	r6, r1
 80128cc:	4607      	mov	r7, r0
 80128ce:	f7ee f9d5 	bl	8000c7c <__aeabi_ldivmod>
 80128d2:	4631      	mov	r1, r6
 80128d4:	9003      	str	r0, [sp, #12]
 80128d6:	a318      	add	r3, pc, #96	@ (adr r3, 8012938 <uxr_sync_session+0xa0>)
 80128d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80128dc:	4638      	mov	r0, r7
 80128de:	f7ee f9cd 	bl	8000c7c <__aeabi_ldivmod>
 80128e2:	a903      	add	r1, sp, #12
 80128e4:	a80a      	add	r0, sp, #40	@ 0x28
 80128e6:	9204      	str	r2, [sp, #16]
 80128e8:	f002 fb3c 	bl	8014f64 <uxr_serialize_TIMESTAMP_Payload>
 80128ec:	2200      	movs	r2, #0
 80128ee:	4611      	mov	r1, r2
 80128f0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80128f2:	4620      	mov	r0, r4
 80128f4:	f000 fad2 	bl	8012e9c <uxr_stamp_session_header>
 80128f8:	a80a      	add	r0, sp, #40	@ 0x28
 80128fa:	f7fb fe4d 	bl	800e598 <ucdr_buffer_length>
 80128fe:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8012900:	4602      	mov	r2, r0
 8012902:	a905      	add	r1, sp, #20
 8012904:	e9d3 0600 	ldrd	r0, r6, [r3]
 8012908:	47b0      	blx	r6
 801290a:	f001 f965 	bl	8013bd8 <uxr_millis>
 801290e:	2300      	movs	r3, #0
 8012910:	4606      	mov	r6, r0
 8012912:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
 8012916:	4629      	mov	r1, r5
 8012918:	e000      	b.n	801291c <uxr_sync_session+0x84>
 801291a:	b950      	cbnz	r0, 8012932 <uxr_sync_session+0x9a>
 801291c:	4620      	mov	r0, r4
 801291e:	f7ff fdc9 	bl	80124b4 <listen_message_reliably>
 8012922:	f001 f959 	bl	8013bd8 <uxr_millis>
 8012926:	1b83      	subs	r3, r0, r6
 8012928:	1ae9      	subs	r1, r5, r3
 801292a:	2900      	cmp	r1, #0
 801292c:	f894 00a0 	ldrb.w	r0, [r4, #160]	@ 0xa0
 8012930:	dcf3      	bgt.n	801291a <uxr_sync_session+0x82>
 8012932:	b013      	add	sp, #76	@ 0x4c
 8012934:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012936:	bf00      	nop
 8012938:	3b9aca00 	.word	0x3b9aca00
 801293c:	00000000 	.word	0x00000000

08012940 <wait_session_status>:
 8012940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012944:	4604      	mov	r4, r0
 8012946:	b09d      	sub	sp, #116	@ 0x74
 8012948:	20ff      	movs	r0, #255	@ 0xff
 801294a:	7160      	strb	r0, [r4, #5]
 801294c:	9303      	str	r3, [sp, #12]
 801294e:	2b00      	cmp	r3, #0
 8012950:	f000 80b6 	beq.w	8012ac0 <wait_session_status+0x180>
 8012954:	468a      	mov	sl, r1
 8012956:	4691      	mov	r9, r2
 8012958:	f04f 0b00 	mov.w	fp, #0
 801295c:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801295e:	464a      	mov	r2, r9
 8012960:	e9d3 0500 	ldrd	r0, r5, [r3]
 8012964:	4651      	mov	r1, sl
 8012966:	47a8      	blx	r5
 8012968:	f001 f936 	bl	8013bd8 <uxr_millis>
 801296c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8012970:	4605      	mov	r5, r0
 8012972:	e009      	b.n	8012988 <wait_session_status+0x48>
 8012974:	f001 f930 	bl	8013bd8 <uxr_millis>
 8012978:	1b40      	subs	r0, r0, r5
 801297a:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 801297e:	2b00      	cmp	r3, #0
 8012980:	dd40      	ble.n	8012a04 <wait_session_status+0xc4>
 8012982:	7960      	ldrb	r0, [r4, #5]
 8012984:	28ff      	cmp	r0, #255	@ 0xff
 8012986:	d145      	bne.n	8012a14 <wait_session_status+0xd4>
 8012988:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 801298a:	a908      	add	r1, sp, #32
 801298c:	6896      	ldr	r6, [r2, #8]
 801298e:	6810      	ldr	r0, [r2, #0]
 8012990:	aa09      	add	r2, sp, #36	@ 0x24
 8012992:	47b0      	blx	r6
 8012994:	2800      	cmp	r0, #0
 8012996:	d0ed      	beq.n	8012974 <wait_session_status+0x34>
 8012998:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 801299c:	a80c      	add	r0, sp, #48	@ 0x30
 801299e:	f7fb fdcf 	bl	800e540 <ucdr_init_buffer>
 80129a2:	2600      	movs	r6, #0
 80129a4:	f10d 031e 	add.w	r3, sp, #30
 80129a8:	aa07      	add	r2, sp, #28
 80129aa:	a90c      	add	r1, sp, #48	@ 0x30
 80129ac:	4620      	mov	r0, r4
 80129ae:	f88d 601c 	strb.w	r6, [sp, #28]
 80129b2:	f000 fa87 	bl	8012ec4 <uxr_read_session_header>
 80129b6:	2800      	cmp	r0, #0
 80129b8:	d0dc      	beq.n	8012974 <wait_session_status+0x34>
 80129ba:	4631      	mov	r1, r6
 80129bc:	f89d 001c 	ldrb.w	r0, [sp, #28]
 80129c0:	f000 ffb6 	bl	8013930 <uxr_stream_id_from_raw>
 80129c4:	f3c0 4707 	ubfx	r7, r0, #16, #8
 80129c8:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 80129cc:	9302      	str	r3, [sp, #8]
 80129ce:	2f01      	cmp	r7, #1
 80129d0:	e9cd 000a 	strd	r0, r0, [sp, #40]	@ 0x28
 80129d4:	f3c0 2607 	ubfx	r6, r0, #8, #8
 80129d8:	d05c      	beq.n	8012a94 <wait_session_status+0x154>
 80129da:	2f02      	cmp	r7, #2
 80129dc:	d020      	beq.n	8012a20 <wait_session_status+0xe0>
 80129de:	2f00      	cmp	r7, #0
 80129e0:	d1c8      	bne.n	8012974 <wait_session_status+0x34>
 80129e2:	4639      	mov	r1, r7
 80129e4:	4638      	mov	r0, r7
 80129e6:	f000 ffa3 	bl	8013930 <uxr_stream_id_from_raw>
 80129ea:	a90c      	add	r1, sp, #48	@ 0x30
 80129ec:	4602      	mov	r2, r0
 80129ee:	900b      	str	r0, [sp, #44]	@ 0x2c
 80129f0:	4620      	mov	r0, r4
 80129f2:	f7ff fbd7 	bl	80121a4 <read_submessage_list>
 80129f6:	f001 f8ef 	bl	8013bd8 <uxr_millis>
 80129fa:	1b40      	subs	r0, r0, r5
 80129fc:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 8012a00:	2b00      	cmp	r3, #0
 8012a02:	dcbe      	bgt.n	8012982 <wait_session_status+0x42>
 8012a04:	9b03      	ldr	r3, [sp, #12]
 8012a06:	7960      	ldrb	r0, [r4, #5]
 8012a08:	f10b 0b01 	add.w	fp, fp, #1
 8012a0c:	455b      	cmp	r3, fp
 8012a0e:	d001      	beq.n	8012a14 <wait_session_status+0xd4>
 8012a10:	28ff      	cmp	r0, #255	@ 0xff
 8012a12:	d0a3      	beq.n	801295c <wait_session_status+0x1c>
 8012a14:	38ff      	subs	r0, #255	@ 0xff
 8012a16:	bf18      	it	ne
 8012a18:	2001      	movne	r0, #1
 8012a1a:	b01d      	add	sp, #116	@ 0x74
 8012a1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012a20:	f89d 3028 	ldrb.w	r3, [sp, #40]	@ 0x28
 8012a24:	9304      	str	r3, [sp, #16]
 8012a26:	4631      	mov	r1, r6
 8012a28:	f104 0008 	add.w	r0, r4, #8
 8012a2c:	f001 f86e 	bl	8013b0c <uxr_get_input_reliable_stream>
 8012a30:	4680      	mov	r8, r0
 8012a32:	b348      	cbz	r0, 8012a88 <wait_session_status+0x148>
 8012a34:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8012a36:	9205      	str	r2, [sp, #20]
 8012a38:	a80c      	add	r0, sp, #48	@ 0x30
 8012a3a:	f7fb fdb1 	bl	800e5a0 <ucdr_buffer_remaining>
 8012a3e:	4603      	mov	r3, r0
 8012a40:	f10d 001d 	add.w	r0, sp, #29
 8012a44:	9000      	str	r0, [sp, #0]
 8012a46:	9a05      	ldr	r2, [sp, #20]
 8012a48:	9902      	ldr	r1, [sp, #8]
 8012a4a:	4640      	mov	r0, r8
 8012a4c:	f006 fe9c 	bl	8019788 <uxr_receive_reliable_message>
 8012a50:	b1d0      	cbz	r0, 8012a88 <wait_session_status+0x148>
 8012a52:	f89d 301d 	ldrb.w	r3, [sp, #29]
 8012a56:	2b00      	cmp	r3, #0
 8012a58:	d03a      	beq.n	8012ad0 <wait_session_status+0x190>
 8012a5a:	9f04      	ldr	r7, [sp, #16]
 8012a5c:	e00a      	b.n	8012a74 <wait_session_status+0x134>
 8012a5e:	f04f 0302 	mov.w	r3, #2
 8012a62:	f88d 702c 	strb.w	r7, [sp, #44]	@ 0x2c
 8012a66:	f88d 602d 	strb.w	r6, [sp, #45]	@ 0x2d
 8012a6a:	f88d 302e 	strb.w	r3, [sp, #46]	@ 0x2e
 8012a6e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8012a70:	f7ff fb98 	bl	80121a4 <read_submessage_list>
 8012a74:	a914      	add	r1, sp, #80	@ 0x50
 8012a76:	2204      	movs	r2, #4
 8012a78:	4640      	mov	r0, r8
 8012a7a:	f006 ff05 	bl	8019888 <uxr_next_input_reliable_buffer_available>
 8012a7e:	4603      	mov	r3, r0
 8012a80:	a914      	add	r1, sp, #80	@ 0x50
 8012a82:	4620      	mov	r0, r4
 8012a84:	2b00      	cmp	r3, #0
 8012a86:	d1ea      	bne.n	8012a5e <wait_session_status+0x11e>
 8012a88:	9904      	ldr	r1, [sp, #16]
 8012a8a:	4632      	mov	r2, r6
 8012a8c:	4620      	mov	r0, r4
 8012a8e:	f7ff fa03 	bl	8011e98 <write_submessage_acknack.isra.0>
 8012a92:	e76f      	b.n	8012974 <wait_session_status+0x34>
 8012a94:	4631      	mov	r1, r6
 8012a96:	f104 0008 	add.w	r0, r4, #8
 8012a9a:	f001 f82d 	bl	8013af8 <uxr_get_input_best_effort_stream>
 8012a9e:	2800      	cmp	r0, #0
 8012aa0:	f43f af68 	beq.w	8012974 <wait_session_status+0x34>
 8012aa4:	9902      	ldr	r1, [sp, #8]
 8012aa6:	f006 fddb 	bl	8019660 <uxr_receive_best_effort_message>
 8012aaa:	2800      	cmp	r0, #0
 8012aac:	f43f af62 	beq.w	8012974 <wait_session_status+0x34>
 8012ab0:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 8012ab4:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8012ab6:	a90c      	add	r1, sp, #48	@ 0x30
 8012ab8:	4620      	mov	r0, r4
 8012aba:	f7ff fb73 	bl	80121a4 <read_submessage_list>
 8012abe:	e759      	b.n	8012974 <wait_session_status+0x34>
 8012ac0:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8012ac2:	e9d3 0400 	ldrd	r0, r4, [r3]
 8012ac6:	47a0      	blx	r4
 8012ac8:	2001      	movs	r0, #1
 8012aca:	b01d      	add	sp, #116	@ 0x74
 8012acc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012ad0:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 8012ad4:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8012ad6:	a90c      	add	r1, sp, #48	@ 0x30
 8012ad8:	4620      	mov	r0, r4
 8012ada:	f7ff fb63 	bl	80121a4 <read_submessage_list>
 8012ade:	e7bc      	b.n	8012a5a <wait_session_status+0x11a>

08012ae0 <uxr_delete_session_retries>:
 8012ae0:	b530      	push	{r4, r5, lr}
 8012ae2:	b08f      	sub	sp, #60	@ 0x3c
 8012ae4:	4604      	mov	r4, r0
 8012ae6:	460d      	mov	r5, r1
 8012ae8:	f000 fa2e 	bl	8012f48 <uxr_session_header_offset>
 8012aec:	2300      	movs	r3, #0
 8012aee:	2210      	movs	r2, #16
 8012af0:	9000      	str	r0, [sp, #0]
 8012af2:	a902      	add	r1, sp, #8
 8012af4:	a806      	add	r0, sp, #24
 8012af6:	f7fb fd11 	bl	800e51c <ucdr_init_buffer_origin_offset>
 8012afa:	a906      	add	r1, sp, #24
 8012afc:	4620      	mov	r0, r4
 8012afe:	f000 f973 	bl	8012de8 <uxr_buffer_delete_session>
 8012b02:	2200      	movs	r2, #0
 8012b04:	4611      	mov	r1, r2
 8012b06:	9b06      	ldr	r3, [sp, #24]
 8012b08:	4620      	mov	r0, r4
 8012b0a:	f000 f9c7 	bl	8012e9c <uxr_stamp_session_header>
 8012b0e:	a806      	add	r0, sp, #24
 8012b10:	f7fb fd42 	bl	800e598 <ucdr_buffer_length>
 8012b14:	462b      	mov	r3, r5
 8012b16:	4602      	mov	r2, r0
 8012b18:	a902      	add	r1, sp, #8
 8012b1a:	4620      	mov	r0, r4
 8012b1c:	f7ff ff10 	bl	8012940 <wait_session_status>
 8012b20:	b118      	cbz	r0, 8012b2a <uxr_delete_session_retries+0x4a>
 8012b22:	7960      	ldrb	r0, [r4, #5]
 8012b24:	fab0 f080 	clz	r0, r0
 8012b28:	0940      	lsrs	r0, r0, #5
 8012b2a:	b00f      	add	sp, #60	@ 0x3c
 8012b2c:	bd30      	pop	{r4, r5, pc}
 8012b2e:	bf00      	nop

08012b30 <uxr_create_session>:
 8012b30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012b34:	f100 0b08 	add.w	fp, r0, #8
 8012b38:	b0ab      	sub	sp, #172	@ 0xac
 8012b3a:	4604      	mov	r4, r0
 8012b3c:	4658      	mov	r0, fp
 8012b3e:	f000 ff2b 	bl	8013998 <uxr_reset_stream_storage>
 8012b42:	4620      	mov	r0, r4
 8012b44:	f000 fa00 	bl	8012f48 <uxr_session_header_offset>
 8012b48:	2300      	movs	r3, #0
 8012b4a:	9000      	str	r0, [sp, #0]
 8012b4c:	221c      	movs	r2, #28
 8012b4e:	a90b      	add	r1, sp, #44	@ 0x2c
 8012b50:	a812      	add	r0, sp, #72	@ 0x48
 8012b52:	f7fb fce3 	bl	800e51c <ucdr_init_buffer_origin_offset>
 8012b56:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8012b58:	8a1a      	ldrh	r2, [r3, #16]
 8012b5a:	3a04      	subs	r2, #4
 8012b5c:	b292      	uxth	r2, r2
 8012b5e:	a912      	add	r1, sp, #72	@ 0x48
 8012b60:	4620      	mov	r0, r4
 8012b62:	f000 f917 	bl	8012d94 <uxr_buffer_create_session>
 8012b66:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8012b68:	4620      	mov	r0, r4
 8012b6a:	f000 f983 	bl	8012e74 <uxr_stamp_create_session_header>
 8012b6e:	a812      	add	r0, sp, #72	@ 0x48
 8012b70:	f7fb fd12 	bl	800e598 <ucdr_buffer_length>
 8012b74:	23ff      	movs	r3, #255	@ 0xff
 8012b76:	7163      	strb	r3, [r4, #5]
 8012b78:	230a      	movs	r3, #10
 8012b7a:	46da      	mov	sl, fp
 8012b7c:	9303      	str	r3, [sp, #12]
 8012b7e:	4683      	mov	fp, r0
 8012b80:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8012b82:	465a      	mov	r2, fp
 8012b84:	e9d3 0500 	ldrd	r0, r5, [r3]
 8012b88:	a90b      	add	r1, sp, #44	@ 0x2c
 8012b8a:	47a8      	blx	r5
 8012b8c:	f001 f824 	bl	8013bd8 <uxr_millis>
 8012b90:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8012b94:	4605      	mov	r5, r0
 8012b96:	e009      	b.n	8012bac <uxr_create_session+0x7c>
 8012b98:	f001 f81e 	bl	8013bd8 <uxr_millis>
 8012b9c:	1b40      	subs	r0, r0, r5
 8012b9e:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 8012ba2:	2b00      	cmp	r3, #0
 8012ba4:	7962      	ldrb	r2, [r4, #5]
 8012ba6:	dd38      	ble.n	8012c1a <uxr_create_session+0xea>
 8012ba8:	2aff      	cmp	r2, #255	@ 0xff
 8012baa:	d13c      	bne.n	8012c26 <uxr_create_session+0xf6>
 8012bac:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 8012bae:	a907      	add	r1, sp, #28
 8012bb0:	6896      	ldr	r6, [r2, #8]
 8012bb2:	6810      	ldr	r0, [r2, #0]
 8012bb4:	aa08      	add	r2, sp, #32
 8012bb6:	47b0      	blx	r6
 8012bb8:	2800      	cmp	r0, #0
 8012bba:	d0ed      	beq.n	8012b98 <uxr_create_session+0x68>
 8012bbc:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 8012bc0:	a81a      	add	r0, sp, #104	@ 0x68
 8012bc2:	f7fb fcbd 	bl	800e540 <ucdr_init_buffer>
 8012bc6:	2600      	movs	r6, #0
 8012bc8:	f10d 031a 	add.w	r3, sp, #26
 8012bcc:	aa06      	add	r2, sp, #24
 8012bce:	a91a      	add	r1, sp, #104	@ 0x68
 8012bd0:	4620      	mov	r0, r4
 8012bd2:	f88d 6018 	strb.w	r6, [sp, #24]
 8012bd6:	f000 f975 	bl	8012ec4 <uxr_read_session_header>
 8012bda:	2800      	cmp	r0, #0
 8012bdc:	d0dc      	beq.n	8012b98 <uxr_create_session+0x68>
 8012bde:	4631      	mov	r1, r6
 8012be0:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8012be4:	f000 fea4 	bl	8013930 <uxr_stream_id_from_raw>
 8012be8:	f3c0 4607 	ubfx	r6, r0, #16, #8
 8012bec:	2e01      	cmp	r6, #1
 8012bee:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 8012bf2:	f8bd 901a 	ldrh.w	r9, [sp, #26]
 8012bf6:	f3c0 2707 	ubfx	r7, r0, #8, #8
 8012bfa:	d053      	beq.n	8012ca4 <uxr_create_session+0x174>
 8012bfc:	2e02      	cmp	r6, #2
 8012bfe:	d018      	beq.n	8012c32 <uxr_create_session+0x102>
 8012c00:	2e00      	cmp	r6, #0
 8012c02:	d1c9      	bne.n	8012b98 <uxr_create_session+0x68>
 8012c04:	4631      	mov	r1, r6
 8012c06:	4630      	mov	r0, r6
 8012c08:	f000 fe92 	bl	8013930 <uxr_stream_id_from_raw>
 8012c0c:	a91a      	add	r1, sp, #104	@ 0x68
 8012c0e:	4602      	mov	r2, r0
 8012c10:	900a      	str	r0, [sp, #40]	@ 0x28
 8012c12:	4620      	mov	r0, r4
 8012c14:	f7ff fac6 	bl	80121a4 <read_submessage_list>
 8012c18:	e7be      	b.n	8012b98 <uxr_create_session+0x68>
 8012c1a:	9b03      	ldr	r3, [sp, #12]
 8012c1c:	3b01      	subs	r3, #1
 8012c1e:	9303      	str	r3, [sp, #12]
 8012c20:	d001      	beq.n	8012c26 <uxr_create_session+0xf6>
 8012c22:	2aff      	cmp	r2, #255	@ 0xff
 8012c24:	d0ac      	beq.n	8012b80 <uxr_create_session+0x50>
 8012c26:	2a00      	cmp	r2, #0
 8012c28:	d051      	beq.n	8012cce <uxr_create_session+0x19e>
 8012c2a:	2000      	movs	r0, #0
 8012c2c:	b02b      	add	sp, #172	@ 0xac
 8012c2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012c32:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 8012c36:	9304      	str	r3, [sp, #16]
 8012c38:	4639      	mov	r1, r7
 8012c3a:	4650      	mov	r0, sl
 8012c3c:	f000 ff66 	bl	8013b0c <uxr_get_input_reliable_stream>
 8012c40:	4680      	mov	r8, r0
 8012c42:	b348      	cbz	r0, 8012c98 <uxr_create_session+0x168>
 8012c44:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8012c46:	9205      	str	r2, [sp, #20]
 8012c48:	a81a      	add	r0, sp, #104	@ 0x68
 8012c4a:	f7fb fca9 	bl	800e5a0 <ucdr_buffer_remaining>
 8012c4e:	4603      	mov	r3, r0
 8012c50:	f10d 0019 	add.w	r0, sp, #25
 8012c54:	9000      	str	r0, [sp, #0]
 8012c56:	9a05      	ldr	r2, [sp, #20]
 8012c58:	4649      	mov	r1, r9
 8012c5a:	4640      	mov	r0, r8
 8012c5c:	f006 fd94 	bl	8019788 <uxr_receive_reliable_message>
 8012c60:	b1d0      	cbz	r0, 8012c98 <uxr_create_session+0x168>
 8012c62:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8012c66:	2b00      	cmp	r3, #0
 8012c68:	d038      	beq.n	8012cdc <uxr_create_session+0x1ac>
 8012c6a:	9e04      	ldr	r6, [sp, #16]
 8012c6c:	e00a      	b.n	8012c84 <uxr_create_session+0x154>
 8012c6e:	f04f 0302 	mov.w	r3, #2
 8012c72:	f88d 6028 	strb.w	r6, [sp, #40]	@ 0x28
 8012c76:	f88d 7029 	strb.w	r7, [sp, #41]	@ 0x29
 8012c7a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8012c7e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8012c80:	f7ff fa90 	bl	80121a4 <read_submessage_list>
 8012c84:	a922      	add	r1, sp, #136	@ 0x88
 8012c86:	2204      	movs	r2, #4
 8012c88:	4640      	mov	r0, r8
 8012c8a:	f006 fdfd 	bl	8019888 <uxr_next_input_reliable_buffer_available>
 8012c8e:	4603      	mov	r3, r0
 8012c90:	a922      	add	r1, sp, #136	@ 0x88
 8012c92:	4620      	mov	r0, r4
 8012c94:	2b00      	cmp	r3, #0
 8012c96:	d1ea      	bne.n	8012c6e <uxr_create_session+0x13e>
 8012c98:	9904      	ldr	r1, [sp, #16]
 8012c9a:	463a      	mov	r2, r7
 8012c9c:	4620      	mov	r0, r4
 8012c9e:	f7ff f8fb 	bl	8011e98 <write_submessage_acknack.isra.0>
 8012ca2:	e779      	b.n	8012b98 <uxr_create_session+0x68>
 8012ca4:	4639      	mov	r1, r7
 8012ca6:	4650      	mov	r0, sl
 8012ca8:	f000 ff26 	bl	8013af8 <uxr_get_input_best_effort_stream>
 8012cac:	2800      	cmp	r0, #0
 8012cae:	f43f af73 	beq.w	8012b98 <uxr_create_session+0x68>
 8012cb2:	4649      	mov	r1, r9
 8012cb4:	f006 fcd4 	bl	8019660 <uxr_receive_best_effort_message>
 8012cb8:	2800      	cmp	r0, #0
 8012cba:	f43f af6d 	beq.w	8012b98 <uxr_create_session+0x68>
 8012cbe:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 8012cc2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8012cc4:	a91a      	add	r1, sp, #104	@ 0x68
 8012cc6:	4620      	mov	r0, r4
 8012cc8:	f7ff fa6c 	bl	80121a4 <read_submessage_list>
 8012ccc:	e764      	b.n	8012b98 <uxr_create_session+0x68>
 8012cce:	4650      	mov	r0, sl
 8012cd0:	f000 fe62 	bl	8013998 <uxr_reset_stream_storage>
 8012cd4:	2001      	movs	r0, #1
 8012cd6:	b02b      	add	sp, #172	@ 0xac
 8012cd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012cdc:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 8012ce0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8012ce2:	a91a      	add	r1, sp, #104	@ 0x68
 8012ce4:	4620      	mov	r0, r4
 8012ce6:	f7ff fa5d 	bl	80121a4 <read_submessage_list>
 8012cea:	e7be      	b.n	8012c6a <uxr_create_session+0x13a>

08012cec <uxr_prepare_stream_to_write_submessage>:
 8012cec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012cf0:	b082      	sub	sp, #8
 8012cf2:	4682      	mov	sl, r0
 8012cf4:	4610      	mov	r0, r2
 8012cf6:	4615      	mov	r5, r2
 8012cf8:	461e      	mov	r6, r3
 8012cfa:	f89d 7028 	ldrb.w	r7, [sp, #40]	@ 0x28
 8012cfe:	f89d 802c 	ldrb.w	r8, [sp, #44]	@ 0x2c
 8012d02:	9101      	str	r1, [sp, #4]
 8012d04:	f3c1 2407 	ubfx	r4, r1, #8, #8
 8012d08:	f000 ff60 	bl	8013bcc <uxr_submessage_padding>
 8012d0c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8012d10:	f105 0904 	add.w	r9, r5, #4
 8012d14:	2b01      	cmp	r3, #1
 8012d16:	4481      	add	r9, r0
 8012d18:	d01d      	beq.n	8012d56 <uxr_prepare_stream_to_write_submessage+0x6a>
 8012d1a:	2b02      	cmp	r3, #2
 8012d1c:	d116      	bne.n	8012d4c <uxr_prepare_stream_to_write_submessage+0x60>
 8012d1e:	4621      	mov	r1, r4
 8012d20:	f10a 0008 	add.w	r0, sl, #8
 8012d24:	f000 fede 	bl	8013ae4 <uxr_get_output_reliable_stream>
 8012d28:	4604      	mov	r4, r0
 8012d2a:	b158      	cbz	r0, 8012d44 <uxr_prepare_stream_to_write_submessage+0x58>
 8012d2c:	4649      	mov	r1, r9
 8012d2e:	4632      	mov	r2, r6
 8012d30:	f006 ff66 	bl	8019c00 <uxr_prepare_reliable_buffer_to_write>
 8012d34:	4604      	mov	r4, r0
 8012d36:	b12c      	cbz	r4, 8012d44 <uxr_prepare_stream_to_write_submessage+0x58>
 8012d38:	4643      	mov	r3, r8
 8012d3a:	b2aa      	uxth	r2, r5
 8012d3c:	4639      	mov	r1, r7
 8012d3e:	4630      	mov	r0, r6
 8012d40:	f000 ff04 	bl	8013b4c <uxr_buffer_submessage_header>
 8012d44:	4620      	mov	r0, r4
 8012d46:	b002      	add	sp, #8
 8012d48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012d4c:	2400      	movs	r4, #0
 8012d4e:	4620      	mov	r0, r4
 8012d50:	b002      	add	sp, #8
 8012d52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012d56:	4621      	mov	r1, r4
 8012d58:	f10a 0008 	add.w	r0, sl, #8
 8012d5c:	f000 feba 	bl	8013ad4 <uxr_get_output_best_effort_stream>
 8012d60:	4604      	mov	r4, r0
 8012d62:	2800      	cmp	r0, #0
 8012d64:	d0ee      	beq.n	8012d44 <uxr_prepare_stream_to_write_submessage+0x58>
 8012d66:	4649      	mov	r1, r9
 8012d68:	4632      	mov	r2, r6
 8012d6a:	f006 fe79 	bl	8019a60 <uxr_prepare_best_effort_buffer_to_write>
 8012d6e:	4604      	mov	r4, r0
 8012d70:	e7e1      	b.n	8012d36 <uxr_prepare_stream_to_write_submessage+0x4a>
 8012d72:	bf00      	nop

08012d74 <uxr_init_session_info>:
 8012d74:	0e13      	lsrs	r3, r2, #24
 8012d76:	7043      	strb	r3, [r0, #1]
 8012d78:	f3c2 2307 	ubfx	r3, r2, #8, #8
 8012d7c:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 8012d80:	7001      	strb	r1, [r0, #0]
 8012d82:	70c3      	strb	r3, [r0, #3]
 8012d84:	2109      	movs	r1, #9
 8012d86:	23ff      	movs	r3, #255	@ 0xff
 8012d88:	f880 c002 	strb.w	ip, [r0, #2]
 8012d8c:	7102      	strb	r2, [r0, #4]
 8012d8e:	80c1      	strh	r1, [r0, #6]
 8012d90:	7143      	strb	r3, [r0, #5]
 8012d92:	4770      	bx	lr

08012d94 <uxr_buffer_create_session>:
 8012d94:	b530      	push	{r4, r5, lr}
 8012d96:	b089      	sub	sp, #36	@ 0x24
 8012d98:	2300      	movs	r3, #0
 8012d9a:	4d12      	ldr	r5, [pc, #72]	@ (8012de4 <uxr_buffer_create_session+0x50>)
 8012d9c:	9307      	str	r3, [sp, #28]
 8012d9e:	f8ad 201c 	strh.w	r2, [sp, #28]
 8012da2:	2201      	movs	r2, #1
 8012da4:	9301      	str	r3, [sp, #4]
 8012da6:	80c2      	strh	r2, [r0, #6]
 8012da8:	f88d 2004 	strb.w	r2, [sp, #4]
 8012dac:	682a      	ldr	r2, [r5, #0]
 8012dae:	9200      	str	r2, [sp, #0]
 8012db0:	88aa      	ldrh	r2, [r5, #4]
 8012db2:	f8ad 2006 	strh.w	r2, [sp, #6]
 8012db6:	f8d0 2001 	ldr.w	r2, [r0, #1]
 8012dba:	9202      	str	r2, [sp, #8]
 8012dbc:	460c      	mov	r4, r1
 8012dbe:	7802      	ldrb	r2, [r0, #0]
 8012dc0:	9303      	str	r3, [sp, #12]
 8012dc2:	4619      	mov	r1, r3
 8012dc4:	f88d 200c 	strb.w	r2, [sp, #12]
 8012dc8:	4620      	mov	r0, r4
 8012dca:	2210      	movs	r2, #16
 8012dcc:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8012dd0:	9306      	str	r3, [sp, #24]
 8012dd2:	f000 febb 	bl	8013b4c <uxr_buffer_submessage_header>
 8012dd6:	4669      	mov	r1, sp
 8012dd8:	4620      	mov	r0, r4
 8012dda:	f001 feff 	bl	8014bdc <uxr_serialize_CREATE_CLIENT_Payload>
 8012dde:	b009      	add	sp, #36	@ 0x24
 8012de0:	bd30      	pop	{r4, r5, pc}
 8012de2:	bf00      	nop
 8012de4:	0801d4f8 	.word	0x0801d4f8

08012de8 <uxr_buffer_delete_session>:
 8012de8:	b510      	push	{r4, lr}
 8012dea:	4b0c      	ldr	r3, [pc, #48]	@ (8012e1c <uxr_buffer_delete_session+0x34>)
 8012dec:	b082      	sub	sp, #8
 8012dee:	f8b3 c008 	ldrh.w	ip, [r3, #8]
 8012df2:	f8ad c006 	strh.w	ip, [sp, #6]
 8012df6:	460c      	mov	r4, r1
 8012df8:	2202      	movs	r2, #2
 8012dfa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8012dfe:	80c2      	strh	r2, [r0, #6]
 8012e00:	f8ad 3004 	strh.w	r3, [sp, #4]
 8012e04:	2204      	movs	r2, #4
 8012e06:	2300      	movs	r3, #0
 8012e08:	2103      	movs	r1, #3
 8012e0a:	4620      	mov	r0, r4
 8012e0c:	f000 fe9e 	bl	8013b4c <uxr_buffer_submessage_header>
 8012e10:	a901      	add	r1, sp, #4
 8012e12:	4620      	mov	r0, r4
 8012e14:	f001 ff88 	bl	8014d28 <uxr_serialize_DELETE_Payload>
 8012e18:	b002      	add	sp, #8
 8012e1a:	bd10      	pop	{r4, pc}
 8012e1c:	0801d4f8 	.word	0x0801d4f8

08012e20 <uxr_read_create_session_status>:
 8012e20:	b510      	push	{r4, lr}
 8012e22:	b088      	sub	sp, #32
 8012e24:	4604      	mov	r4, r0
 8012e26:	4608      	mov	r0, r1
 8012e28:	a901      	add	r1, sp, #4
 8012e2a:	f001 ff8d 	bl	8014d48 <uxr_deserialize_STATUS_AGENT_Payload>
 8012e2e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8012e32:	7163      	strb	r3, [r4, #5]
 8012e34:	b008      	add	sp, #32
 8012e36:	bd10      	pop	{r4, pc}

08012e38 <uxr_read_delete_session_status>:
 8012e38:	b510      	push	{r4, lr}
 8012e3a:	4604      	mov	r4, r0
 8012e3c:	b084      	sub	sp, #16
 8012e3e:	4608      	mov	r0, r1
 8012e40:	a902      	add	r1, sp, #8
 8012e42:	f001 ffb1 	bl	8014da8 <uxr_deserialize_STATUS_Payload>
 8012e46:	88e3      	ldrh	r3, [r4, #6]
 8012e48:	2b02      	cmp	r3, #2
 8012e4a:	d001      	beq.n	8012e50 <uxr_read_delete_session_status+0x18>
 8012e4c:	b004      	add	sp, #16
 8012e4e:	bd10      	pop	{r4, pc}
 8012e50:	f10d 000a 	add.w	r0, sp, #10
 8012e54:	f7fe fe76 	bl	8011b44 <uxr_object_id_from_raw>
 8012e58:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8012e5c:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8012e60:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8012e64:	b29b      	uxth	r3, r3
 8012e66:	2b02      	cmp	r3, #2
 8012e68:	bf04      	itt	eq
 8012e6a:	f89d 300c 	ldrbeq.w	r3, [sp, #12]
 8012e6e:	7163      	strbeq	r3, [r4, #5]
 8012e70:	b004      	add	sp, #16
 8012e72:	bd10      	pop	{r4, pc}

08012e74 <uxr_stamp_create_session_header>:
 8012e74:	b510      	push	{r4, lr}
 8012e76:	2208      	movs	r2, #8
 8012e78:	b08a      	sub	sp, #40	@ 0x28
 8012e7a:	4604      	mov	r4, r0
 8012e7c:	eb0d 0002 	add.w	r0, sp, r2
 8012e80:	f7fb fb5e 	bl	800e540 <ucdr_init_buffer>
 8012e84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012e88:	9400      	str	r4, [sp, #0]
 8012e8a:	2300      	movs	r3, #0
 8012e8c:	461a      	mov	r2, r3
 8012e8e:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 8012e92:	a802      	add	r0, sp, #8
 8012e94:	f001 f854 	bl	8013f40 <uxr_serialize_message_header>
 8012e98:	b00a      	add	sp, #40	@ 0x28
 8012e9a:	bd10      	pop	{r4, pc}

08012e9c <uxr_stamp_session_header>:
 8012e9c:	b530      	push	{r4, r5, lr}
 8012e9e:	b08d      	sub	sp, #52	@ 0x34
 8012ea0:	4604      	mov	r4, r0
 8012ea2:	460d      	mov	r5, r1
 8012ea4:	9203      	str	r2, [sp, #12]
 8012ea6:	4619      	mov	r1, r3
 8012ea8:	a804      	add	r0, sp, #16
 8012eaa:	2208      	movs	r2, #8
 8012eac:	f7fb fb48 	bl	800e540 <ucdr_init_buffer>
 8012eb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012eb4:	9b03      	ldr	r3, [sp, #12]
 8012eb6:	9400      	str	r4, [sp, #0]
 8012eb8:	462a      	mov	r2, r5
 8012eba:	a804      	add	r0, sp, #16
 8012ebc:	f001 f840 	bl	8013f40 <uxr_serialize_message_header>
 8012ec0:	b00d      	add	sp, #52	@ 0x34
 8012ec2:	bd30      	pop	{r4, r5, pc}

08012ec4 <uxr_read_session_header>:
 8012ec4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012ec8:	4607      	mov	r7, r0
 8012eca:	b084      	sub	sp, #16
 8012ecc:	4608      	mov	r0, r1
 8012ece:	460c      	mov	r4, r1
 8012ed0:	4615      	mov	r5, r2
 8012ed2:	461e      	mov	r6, r3
 8012ed4:	f7fb fb64 	bl	800e5a0 <ucdr_buffer_remaining>
 8012ed8:	2808      	cmp	r0, #8
 8012eda:	d803      	bhi.n	8012ee4 <uxr_read_session_header+0x20>
 8012edc:	2000      	movs	r0, #0
 8012ede:	b004      	add	sp, #16
 8012ee0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012ee4:	f10d 080c 	add.w	r8, sp, #12
 8012ee8:	4633      	mov	r3, r6
 8012eea:	462a      	mov	r2, r5
 8012eec:	f8cd 8000 	str.w	r8, [sp]
 8012ef0:	4620      	mov	r0, r4
 8012ef2:	f10d 010b 	add.w	r1, sp, #11
 8012ef6:	f001 f841 	bl	8013f7c <uxr_deserialize_message_header>
 8012efa:	783a      	ldrb	r2, [r7, #0]
 8012efc:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8012f00:	4293      	cmp	r3, r2
 8012f02:	d1eb      	bne.n	8012edc <uxr_read_session_header+0x18>
 8012f04:	061b      	lsls	r3, r3, #24
 8012f06:	d41c      	bmi.n	8012f42 <uxr_read_session_header+0x7e>
 8012f08:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8012f0c:	787b      	ldrb	r3, [r7, #1]
 8012f0e:	429a      	cmp	r2, r3
 8012f10:	d003      	beq.n	8012f1a <uxr_read_session_header+0x56>
 8012f12:	2001      	movs	r0, #1
 8012f14:	f080 0001 	eor.w	r0, r0, #1
 8012f18:	e7e1      	b.n	8012ede <uxr_read_session_header+0x1a>
 8012f1a:	f89d 200d 	ldrb.w	r2, [sp, #13]
 8012f1e:	78bb      	ldrb	r3, [r7, #2]
 8012f20:	429a      	cmp	r2, r3
 8012f22:	f107 0102 	add.w	r1, r7, #2
 8012f26:	d1f4      	bne.n	8012f12 <uxr_read_session_header+0x4e>
 8012f28:	f89d 200e 	ldrb.w	r2, [sp, #14]
 8012f2c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8012f30:	429a      	cmp	r2, r3
 8012f32:	d1ee      	bne.n	8012f12 <uxr_read_session_header+0x4e>
 8012f34:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8012f38:	784b      	ldrb	r3, [r1, #1]
 8012f3a:	429a      	cmp	r2, r3
 8012f3c:	d1e9      	bne.n	8012f12 <uxr_read_session_header+0x4e>
 8012f3e:	2000      	movs	r0, #0
 8012f40:	e7e8      	b.n	8012f14 <uxr_read_session_header+0x50>
 8012f42:	2001      	movs	r0, #1
 8012f44:	e7cb      	b.n	8012ede <uxr_read_session_header+0x1a>
 8012f46:	bf00      	nop

08012f48 <uxr_session_header_offset>:
 8012f48:	f990 3000 	ldrsb.w	r3, [r0]
 8012f4c:	2b00      	cmp	r3, #0
 8012f4e:	bfac      	ite	ge
 8012f50:	2008      	movge	r0, #8
 8012f52:	2004      	movlt	r0, #4
 8012f54:	4770      	bx	lr
 8012f56:	bf00      	nop

08012f58 <uxr_init_base_object_request>:
 8012f58:	b510      	push	{r4, lr}
 8012f5a:	88c3      	ldrh	r3, [r0, #6]
 8012f5c:	b082      	sub	sp, #8
 8012f5e:	f64f 74f4 	movw	r4, #65524	@ 0xfff4
 8012f62:	9101      	str	r1, [sp, #4]
 8012f64:	f1a3 010a 	sub.w	r1, r3, #10
 8012f68:	b289      	uxth	r1, r1
 8012f6a:	42a1      	cmp	r1, r4
 8012f6c:	d80e      	bhi.n	8012f8c <uxr_init_base_object_request+0x34>
 8012f6e:	3301      	adds	r3, #1
 8012f70:	b29c      	uxth	r4, r3
 8012f72:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8012f76:	b2db      	uxtb	r3, r3
 8012f78:	80c4      	strh	r4, [r0, #6]
 8012f7a:	9801      	ldr	r0, [sp, #4]
 8012f7c:	7011      	strb	r1, [r2, #0]
 8012f7e:	7053      	strb	r3, [r2, #1]
 8012f80:	1c91      	adds	r1, r2, #2
 8012f82:	f7fe fdf3 	bl	8011b6c <uxr_object_id_to_raw>
 8012f86:	4620      	mov	r0, r4
 8012f88:	b002      	add	sp, #8
 8012f8a:	bd10      	pop	{r4, pc}
 8012f8c:	230a      	movs	r3, #10
 8012f8e:	2100      	movs	r1, #0
 8012f90:	461c      	mov	r4, r3
 8012f92:	e7f1      	b.n	8012f78 <uxr_init_base_object_request+0x20>

08012f94 <uxr_parse_base_object_request>:
 8012f94:	b570      	push	{r4, r5, r6, lr}
 8012f96:	4604      	mov	r4, r0
 8012f98:	3002      	adds	r0, #2
 8012f9a:	460d      	mov	r5, r1
 8012f9c:	4616      	mov	r6, r2
 8012f9e:	f7fe fdd1 	bl	8011b44 <uxr_object_id_from_raw>
 8012fa2:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8012fa6:	8028      	strh	r0, [r5, #0]
 8012fa8:	806b      	strh	r3, [r5, #2]
 8012faa:	7822      	ldrb	r2, [r4, #0]
 8012fac:	7863      	ldrb	r3, [r4, #1]
 8012fae:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8012fb2:	8033      	strh	r3, [r6, #0]
 8012fb4:	bd70      	pop	{r4, r5, r6, pc}
 8012fb6:	bf00      	nop

08012fb8 <uxr_init_framing_io>:
 8012fb8:	2300      	movs	r3, #0
 8012fba:	7041      	strb	r1, [r0, #1]
 8012fbc:	7003      	strb	r3, [r0, #0]
 8012fbe:	8583      	strh	r3, [r0, #44]	@ 0x2c
 8012fc0:	4770      	bx	lr
 8012fc2:	bf00      	nop

08012fc4 <uxr_write_framed_msg>:
 8012fc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012fc8:	4617      	mov	r7, r2
 8012fca:	7842      	ldrb	r2, [r0, #1]
 8012fcc:	b083      	sub	sp, #12
 8012fce:	460e      	mov	r6, r1
 8012fd0:	f1a2 017d 	sub.w	r1, r2, #125	@ 0x7d
 8012fd4:	469a      	mov	sl, r3
 8012fd6:	2901      	cmp	r1, #1
 8012fd8:	f04f 037e 	mov.w	r3, #126	@ 0x7e
 8012fdc:	4604      	mov	r4, r0
 8012fde:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
 8012fe2:	f8dd b038 	ldr.w	fp, [sp, #56]	@ 0x38
 8012fe6:	f89d 0034 	ldrb.w	r0, [sp, #52]	@ 0x34
 8012fea:	f240 8137 	bls.w	801325c <uxr_write_framed_msg+0x298>
 8012fee:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 8012ff2:	f884 2039 	strb.w	r2, [r4, #57]	@ 0x39
 8012ff6:	2901      	cmp	r1, #1
 8012ff8:	f04f 0202 	mov.w	r2, #2
 8012ffc:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8013000:	f240 808f 	bls.w	8013122 <uxr_write_framed_msg+0x15e>
 8013004:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013006:	f884 003a 	strb.w	r0, [r4, #58]	@ 0x3a
 801300a:	b2dd      	uxtb	r5, r3
 801300c:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 8013010:	2203      	movs	r2, #3
 8013012:	2901      	cmp	r1, #1
 8013014:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8013018:	f240 809a 	bls.w	8013150 <uxr_write_framed_msg+0x18c>
 801301c:	18a1      	adds	r1, r4, r2
 801301e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013020:	f881 5038 	strb.w	r5, [r1, #56]	@ 0x38
 8013024:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8013028:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 801302c:	3201      	adds	r2, #1
 801302e:	2801      	cmp	r0, #1
 8013030:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8013034:	f240 80a0 	bls.w	8013178 <uxr_write_framed_msg+0x1b4>
 8013038:	18a0      	adds	r0, r4, r2
 801303a:	3201      	adds	r2, #1
 801303c:	b2d2      	uxtb	r2, r2
 801303e:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 8013042:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8013046:	2b00      	cmp	r3, #0
 8013048:	f000 80a9 	beq.w	801319e <uxr_write_framed_msg+0x1da>
 801304c:	f04f 0900 	mov.w	r9, #0
 8013050:	46c8      	mov	r8, r9
 8013052:	f81a 3008 	ldrb.w	r3, [sl, r8]
 8013056:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 801305a:	2901      	cmp	r1, #1
 801305c:	f240 80c3 	bls.w	80131e6 <uxr_write_framed_msg+0x222>
 8013060:	2a29      	cmp	r2, #41	@ 0x29
 8013062:	f200 809f 	bhi.w	80131a4 <uxr_write_framed_msg+0x1e0>
 8013066:	18a1      	adds	r1, r4, r2
 8013068:	3201      	adds	r2, #1
 801306a:	b2d2      	uxtb	r2, r2
 801306c:	f881 3038 	strb.w	r3, [r1, #56]	@ 0x38
 8013070:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8013074:	ea89 0303 	eor.w	r3, r9, r3
 8013078:	498c      	ldr	r1, [pc, #560]	@ (80132ac <uxr_write_framed_msg+0x2e8>)
 801307a:	b2db      	uxtb	r3, r3
 801307c:	f108 0801 	add.w	r8, r8, #1
 8013080:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8013084:	ea83 2919 	eor.w	r9, r3, r9, lsr #8
 8013088:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801308a:	4543      	cmp	r3, r8
 801308c:	d8e1      	bhi.n	8013052 <uxr_write_framed_msg+0x8e>
 801308e:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8013092:	fa5f f889 	uxtb.w	r8, r9
 8013096:	9301      	str	r3, [sp, #4]
 8013098:	f04f 0900 	mov.w	r9, #0
 801309c:	f1a8 0a7d 	sub.w	sl, r8, #125	@ 0x7d
 80130a0:	fa5f f18a 	uxtb.w	r1, sl
 80130a4:	2901      	cmp	r1, #1
 80130a6:	d921      	bls.n	80130ec <uxr_write_framed_msg+0x128>
 80130a8:	2a29      	cmp	r2, #41	@ 0x29
 80130aa:	f240 80af 	bls.w	801320c <uxr_write_framed_msg+0x248>
 80130ae:	2500      	movs	r5, #0
 80130b0:	e000      	b.n	80130b4 <uxr_write_framed_msg+0xf0>
 80130b2:	b160      	cbz	r0, 80130ce <uxr_write_framed_msg+0x10a>
 80130b4:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 80130b8:	1b52      	subs	r2, r2, r5
 80130ba:	465b      	mov	r3, fp
 80130bc:	4421      	add	r1, r4
 80130be:	4638      	mov	r0, r7
 80130c0:	47b0      	blx	r6
 80130c2:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 80130c6:	4405      	add	r5, r0
 80130c8:	4295      	cmp	r5, r2
 80130ca:	d3f2      	bcc.n	80130b2 <uxr_write_framed_msg+0xee>
 80130cc:	d003      	beq.n	80130d6 <uxr_write_framed_msg+0x112>
 80130ce:	2000      	movs	r0, #0
 80130d0:	b003      	add	sp, #12
 80130d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80130d6:	fa5f f18a 	uxtb.w	r1, sl
 80130da:	f04f 0300 	mov.w	r3, #0
 80130de:	2901      	cmp	r1, #1
 80130e0:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 80130e4:	f04f 0200 	mov.w	r2, #0
 80130e8:	f200 8090 	bhi.w	801320c <uxr_write_framed_msg+0x248>
 80130ec:	1c51      	adds	r1, r2, #1
 80130ee:	b2c9      	uxtb	r1, r1
 80130f0:	2929      	cmp	r1, #41	@ 0x29
 80130f2:	d8dc      	bhi.n	80130ae <uxr_write_framed_msg+0xea>
 80130f4:	18a5      	adds	r5, r4, r2
 80130f6:	4421      	add	r1, r4
 80130f8:	3202      	adds	r2, #2
 80130fa:	f088 0820 	eor.w	r8, r8, #32
 80130fe:	4648      	mov	r0, r9
 8013100:	f04f 037d 	mov.w	r3, #125	@ 0x7d
 8013104:	b2d2      	uxtb	r2, r2
 8013106:	f885 3038 	strb.w	r3, [r5, #56]	@ 0x38
 801310a:	f04f 0901 	mov.w	r9, #1
 801310e:	f881 8038 	strb.w	r8, [r1, #56]	@ 0x38
 8013112:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8013116:	2800      	cmp	r0, #0
 8013118:	f040 8085 	bne.w	8013226 <uxr_write_framed_msg+0x262>
 801311c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8013120:	e7bc      	b.n	801309c <uxr_write_framed_msg+0xd8>
 8013122:	4611      	mov	r1, r2
 8013124:	f04f 0c03 	mov.w	ip, #3
 8013128:	2204      	movs	r2, #4
 801312a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801312c:	4421      	add	r1, r4
 801312e:	b2dd      	uxtb	r5, r3
 8013130:	f04f 0e7d 	mov.w	lr, #125	@ 0x7d
 8013134:	f881 e038 	strb.w	lr, [r1, #56]	@ 0x38
 8013138:	44a4      	add	ip, r4
 801313a:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 801313e:	f080 0020 	eor.w	r0, r0, #32
 8013142:	2901      	cmp	r1, #1
 8013144:	f88c 0038 	strb.w	r0, [ip, #56]	@ 0x38
 8013148:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801314c:	f63f af66 	bhi.w	801301c <uxr_write_framed_msg+0x58>
 8013150:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013152:	18a0      	adds	r0, r4, r2
 8013154:	f085 0520 	eor.w	r5, r5, #32
 8013158:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 801315c:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8013160:	f880 c038 	strb.w	ip, [r0, #56]	@ 0x38
 8013164:	f880 5039 	strb.w	r5, [r0, #57]	@ 0x39
 8013168:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 801316c:	3202      	adds	r2, #2
 801316e:	2801      	cmp	r0, #1
 8013170:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8013174:	f63f af60 	bhi.w	8013038 <uxr_write_framed_msg+0x74>
 8013178:	1c50      	adds	r0, r2, #1
 801317a:	18a5      	adds	r5, r4, r2
 801317c:	fa54 f080 	uxtab	r0, r4, r0
 8013180:	3202      	adds	r2, #2
 8013182:	f081 0120 	eor.w	r1, r1, #32
 8013186:	b2d2      	uxtb	r2, r2
 8013188:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 801318c:	f885 c038 	strb.w	ip, [r5, #56]	@ 0x38
 8013190:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 8013194:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8013198:	2b00      	cmp	r3, #0
 801319a:	f47f af57 	bne.w	801304c <uxr_write_framed_msg+0x88>
 801319e:	9301      	str	r3, [sp, #4]
 80131a0:	4698      	mov	r8, r3
 80131a2:	e779      	b.n	8013098 <uxr_write_framed_msg+0xd4>
 80131a4:	2500      	movs	r5, #0
 80131a6:	e001      	b.n	80131ac <uxr_write_framed_msg+0x1e8>
 80131a8:	2800      	cmp	r0, #0
 80131aa:	d090      	beq.n	80130ce <uxr_write_framed_msg+0x10a>
 80131ac:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 80131b0:	1b52      	subs	r2, r2, r5
 80131b2:	465b      	mov	r3, fp
 80131b4:	4421      	add	r1, r4
 80131b6:	4638      	mov	r0, r7
 80131b8:	47b0      	blx	r6
 80131ba:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 80131be:	4405      	add	r5, r0
 80131c0:	4295      	cmp	r5, r2
 80131c2:	d3f1      	bcc.n	80131a8 <uxr_write_framed_msg+0x1e4>
 80131c4:	d183      	bne.n	80130ce <uxr_write_framed_msg+0x10a>
 80131c6:	f04f 0300 	mov.w	r3, #0
 80131ca:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 80131ce:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80131d0:	4543      	cmp	r3, r8
 80131d2:	d964      	bls.n	801329e <uxr_write_framed_msg+0x2da>
 80131d4:	f81a 3008 	ldrb.w	r3, [sl, r8]
 80131d8:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 80131dc:	2901      	cmp	r1, #1
 80131de:	f04f 0200 	mov.w	r2, #0
 80131e2:	f63f af3d 	bhi.w	8013060 <uxr_write_framed_msg+0x9c>
 80131e6:	1c51      	adds	r1, r2, #1
 80131e8:	b2c9      	uxtb	r1, r1
 80131ea:	2929      	cmp	r1, #41	@ 0x29
 80131ec:	d8da      	bhi.n	80131a4 <uxr_write_framed_msg+0x1e0>
 80131ee:	18a0      	adds	r0, r4, r2
 80131f0:	4421      	add	r1, r4
 80131f2:	f04f 057d 	mov.w	r5, #125	@ 0x7d
 80131f6:	3202      	adds	r2, #2
 80131f8:	f880 5038 	strb.w	r5, [r0, #56]	@ 0x38
 80131fc:	b2d2      	uxtb	r2, r2
 80131fe:	f083 0020 	eor.w	r0, r3, #32
 8013202:	f881 0038 	strb.w	r0, [r1, #56]	@ 0x38
 8013206:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801320a:	e733      	b.n	8013074 <uxr_write_framed_msg+0xb0>
 801320c:	18a1      	adds	r1, r4, r2
 801320e:	3201      	adds	r2, #1
 8013210:	4648      	mov	r0, r9
 8013212:	b2d2      	uxtb	r2, r2
 8013214:	f881 8038 	strb.w	r8, [r1, #56]	@ 0x38
 8013218:	f04f 0901 	mov.w	r9, #1
 801321c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8013220:	2800      	cmp	r0, #0
 8013222:	f43f af7b 	beq.w	801311c <uxr_write_framed_msg+0x158>
 8013226:	2500      	movs	r5, #0
 8013228:	e002      	b.n	8013230 <uxr_write_framed_msg+0x26c>
 801322a:	2800      	cmp	r0, #0
 801322c:	f43f af4f 	beq.w	80130ce <uxr_write_framed_msg+0x10a>
 8013230:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8013234:	1b52      	subs	r2, r2, r5
 8013236:	465b      	mov	r3, fp
 8013238:	4421      	add	r1, r4
 801323a:	4638      	mov	r0, r7
 801323c:	47b0      	blx	r6
 801323e:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8013242:	4405      	add	r5, r0
 8013244:	4295      	cmp	r5, r2
 8013246:	d3f0      	bcc.n	801322a <uxr_write_framed_msg+0x266>
 8013248:	f47f af41 	bne.w	80130ce <uxr_write_framed_msg+0x10a>
 801324c:	2300      	movs	r3, #0
 801324e:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8013252:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013254:	b298      	uxth	r0, r3
 8013256:	b003      	add	sp, #12
 8013258:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801325c:	217d      	movs	r1, #125	@ 0x7d
 801325e:	f082 0220 	eor.w	r2, r2, #32
 8013262:	f884 1039 	strb.w	r1, [r4, #57]	@ 0x39
 8013266:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 801326a:	f884 203a 	strb.w	r2, [r4, #58]	@ 0x3a
 801326e:	2901      	cmp	r1, #1
 8013270:	f04f 0203 	mov.w	r2, #3
 8013274:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8013278:	d804      	bhi.n	8013284 <uxr_write_framed_msg+0x2c0>
 801327a:	4611      	mov	r1, r2
 801327c:	f04f 0c04 	mov.w	ip, #4
 8013280:	2205      	movs	r2, #5
 8013282:	e752      	b.n	801312a <uxr_write_framed_msg+0x166>
 8013284:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013286:	f884 003b 	strb.w	r0, [r4, #59]	@ 0x3b
 801328a:	b2dd      	uxtb	r5, r3
 801328c:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 8013290:	2204      	movs	r2, #4
 8013292:	2901      	cmp	r1, #1
 8013294:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8013298:	f63f aec0 	bhi.w	801301c <uxr_write_framed_msg+0x58>
 801329c:	e758      	b.n	8013150 <uxr_write_framed_msg+0x18c>
 801329e:	ea4f 2319 	mov.w	r3, r9, lsr #8
 80132a2:	fa5f f889 	uxtb.w	r8, r9
 80132a6:	9301      	str	r3, [sp, #4]
 80132a8:	2200      	movs	r2, #0
 80132aa:	e6f5      	b.n	8013098 <uxr_write_framed_msg+0xd4>
 80132ac:	0801e74c 	.word	0x0801e74c

080132b0 <uxr_framing_read_transport>:
 80132b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80132b4:	4604      	mov	r4, r0
 80132b6:	b083      	sub	sp, #12
 80132b8:	461f      	mov	r7, r3
 80132ba:	f8dd b034 	ldr.w	fp, [sp, #52]	@ 0x34
 80132be:	4689      	mov	r9, r1
 80132c0:	4692      	mov	sl, r2
 80132c2:	f000 fc89 	bl	8013bd8 <uxr_millis>
 80132c6:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 80132ca:	f894 602d 	ldrb.w	r6, [r4, #45]	@ 0x2d
 80132ce:	42b3      	cmp	r3, r6
 80132d0:	4680      	mov	r8, r0
 80132d2:	d061      	beq.n	8013398 <uxr_framing_read_transport+0xe8>
 80132d4:	d81c      	bhi.n	8013310 <uxr_framing_read_transport+0x60>
 80132d6:	1e75      	subs	r5, r6, #1
 80132d8:	1aed      	subs	r5, r5, r3
 80132da:	b2ed      	uxtb	r5, r5
 80132dc:	2600      	movs	r6, #0
 80132de:	455d      	cmp	r5, fp
 80132e0:	d81f      	bhi.n	8013322 <uxr_framing_read_transport+0x72>
 80132e2:	19ab      	adds	r3, r5, r6
 80132e4:	455b      	cmp	r3, fp
 80132e6:	bf84      	itt	hi
 80132e8:	ebab 0605 	subhi.w	r6, fp, r5
 80132ec:	b2f6      	uxtbhi	r6, r6
 80132ee:	b9ed      	cbnz	r5, 801332c <uxr_framing_read_transport+0x7c>
 80132f0:	f04f 0b00 	mov.w	fp, #0
 80132f4:	f000 fc70 	bl	8013bd8 <uxr_millis>
 80132f8:	683b      	ldr	r3, [r7, #0]
 80132fa:	eba0 0808 	sub.w	r8, r0, r8
 80132fe:	eba3 0308 	sub.w	r3, r3, r8
 8013302:	4658      	mov	r0, fp
 8013304:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8013308:	603b      	str	r3, [r7, #0]
 801330a:	b003      	add	sp, #12
 801330c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013310:	2e00      	cmp	r6, #0
 8013312:	d049      	beq.n	80133a8 <uxr_framing_read_transport+0xf8>
 8013314:	f1c3 052a 	rsb	r5, r3, #42	@ 0x2a
 8013318:	b2ed      	uxtb	r5, r5
 801331a:	3e01      	subs	r6, #1
 801331c:	455d      	cmp	r5, fp
 801331e:	b2f6      	uxtb	r6, r6
 8013320:	d9df      	bls.n	80132e2 <uxr_framing_read_transport+0x32>
 8013322:	fa5f f58b 	uxtb.w	r5, fp
 8013326:	2600      	movs	r6, #0
 8013328:	2d00      	cmp	r5, #0
 801332a:	d0e1      	beq.n	80132f0 <uxr_framing_read_transport+0x40>
 801332c:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8013330:	3102      	adds	r1, #2
 8013332:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013334:	9300      	str	r3, [sp, #0]
 8013336:	683b      	ldr	r3, [r7, #0]
 8013338:	4421      	add	r1, r4
 801333a:	462a      	mov	r2, r5
 801333c:	4650      	mov	r0, sl
 801333e:	47c8      	blx	r9
 8013340:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8013344:	4a1a      	ldr	r2, [pc, #104]	@ (80133b0 <uxr_framing_read_transport+0x100>)
 8013346:	4403      	add	r3, r0
 8013348:	0859      	lsrs	r1, r3, #1
 801334a:	fba2 2101 	umull	r2, r1, r2, r1
 801334e:	0889      	lsrs	r1, r1, #2
 8013350:	222a      	movs	r2, #42	@ 0x2a
 8013352:	fb02 3111 	mls	r1, r2, r1, r3
 8013356:	4683      	mov	fp, r0
 8013358:	f884 102c 	strb.w	r1, [r4, #44]	@ 0x2c
 801335c:	2800      	cmp	r0, #0
 801335e:	d0c7      	beq.n	80132f0 <uxr_framing_read_transport+0x40>
 8013360:	42a8      	cmp	r0, r5
 8013362:	d1c7      	bne.n	80132f4 <uxr_framing_read_transport+0x44>
 8013364:	2e00      	cmp	r6, #0
 8013366:	d0c5      	beq.n	80132f4 <uxr_framing_read_transport+0x44>
 8013368:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801336a:	9300      	str	r3, [sp, #0]
 801336c:	3102      	adds	r1, #2
 801336e:	4632      	mov	r2, r6
 8013370:	4421      	add	r1, r4
 8013372:	2300      	movs	r3, #0
 8013374:	4650      	mov	r0, sl
 8013376:	47c8      	blx	r9
 8013378:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 801337c:	4a0c      	ldr	r2, [pc, #48]	@ (80133b0 <uxr_framing_read_transport+0x100>)
 801337e:	180b      	adds	r3, r1, r0
 8013380:	0859      	lsrs	r1, r3, #1
 8013382:	fba2 1201 	umull	r1, r2, r2, r1
 8013386:	0892      	lsrs	r2, r2, #2
 8013388:	212a      	movs	r1, #42	@ 0x2a
 801338a:	fb01 3312 	mls	r3, r1, r2, r3
 801338e:	eb00 0b05 	add.w	fp, r0, r5
 8013392:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 8013396:	e7ad      	b.n	80132f4 <uxr_framing_read_transport+0x44>
 8013398:	2600      	movs	r6, #0
 801339a:	f1bb 0f28 	cmp.w	fp, #40	@ 0x28
 801339e:	85a6      	strh	r6, [r4, #44]	@ 0x2c
 80133a0:	d9bf      	bls.n	8013322 <uxr_framing_read_transport+0x72>
 80133a2:	2102      	movs	r1, #2
 80133a4:	2529      	movs	r5, #41	@ 0x29
 80133a6:	e7c4      	b.n	8013332 <uxr_framing_read_transport+0x82>
 80133a8:	f1c3 0529 	rsb	r5, r3, #41	@ 0x29
 80133ac:	b2ed      	uxtb	r5, r5
 80133ae:	e796      	b.n	80132de <uxr_framing_read_transport+0x2e>
 80133b0:	30c30c31 	.word	0x30c30c31

080133b4 <uxr_read_framed_msg>:
 80133b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80133b8:	461e      	mov	r6, r3
 80133ba:	f890 502c 	ldrb.w	r5, [r0, #44]	@ 0x2c
 80133be:	f890 302d 	ldrb.w	r3, [r0, #45]	@ 0x2d
 80133c2:	429d      	cmp	r5, r3
 80133c4:	b083      	sub	sp, #12
 80133c6:	4604      	mov	r4, r0
 80133c8:	4688      	mov	r8, r1
 80133ca:	4691      	mov	r9, r2
 80133cc:	f000 8188 	beq.w	80136e0 <uxr_read_framed_msg+0x32c>
 80133d0:	7823      	ldrb	r3, [r4, #0]
 80133d2:	4dc1      	ldr	r5, [pc, #772]	@ (80136d8 <uxr_read_framed_msg+0x324>)
 80133d4:	4fc1      	ldr	r7, [pc, #772]	@ (80136dc <uxr_read_framed_msg+0x328>)
 80133d6:	2b07      	cmp	r3, #7
 80133d8:	d8fd      	bhi.n	80133d6 <uxr_read_framed_msg+0x22>
 80133da:	e8df f013 	tbh	[pc, r3, lsl #1]
 80133de:	0115      	.short	0x0115
 80133e0:	00d600f6 	.word	0x00d600f6
 80133e4:	009000b9 	.word	0x009000b9
 80133e8:	0030004d 	.word	0x0030004d
 80133ec:	0008      	.short	0x0008
 80133ee:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 80133f2:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 80133f6:	4299      	cmp	r1, r3
 80133f8:	f000 814a 	beq.w	8013690 <uxr_read_framed_msg+0x2dc>
 80133fc:	18e2      	adds	r2, r4, r3
 80133fe:	7892      	ldrb	r2, [r2, #2]
 8013400:	2a7d      	cmp	r2, #125	@ 0x7d
 8013402:	f000 8199 	beq.w	8013738 <uxr_read_framed_msg+0x384>
 8013406:	3301      	adds	r3, #1
 8013408:	0858      	lsrs	r0, r3, #1
 801340a:	fba5 1000 	umull	r1, r0, r5, r0
 801340e:	0880      	lsrs	r0, r0, #2
 8013410:	212a      	movs	r1, #42	@ 0x2a
 8013412:	fb01 3310 	mls	r3, r1, r0, r3
 8013416:	2a7e      	cmp	r2, #126	@ 0x7e
 8013418:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801341c:	f000 8252 	beq.w	80138c4 <uxr_read_framed_msg+0x510>
 8013420:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 8013422:	8ee1      	ldrh	r1, [r4, #54]	@ 0x36
 8013424:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8013428:	b29b      	uxth	r3, r3
 801342a:	2200      	movs	r2, #0
 801342c:	4299      	cmp	r1, r3
 801342e:	86a3      	strh	r3, [r4, #52]	@ 0x34
 8013430:	7022      	strb	r2, [r4, #0]
 8013432:	f000 8179 	beq.w	8013728 <uxr_read_framed_msg+0x374>
 8013436:	2000      	movs	r0, #0
 8013438:	b003      	add	sp, #12
 801343a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801343e:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8013442:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8013446:	4299      	cmp	r1, r3
 8013448:	f000 8131 	beq.w	80136ae <uxr_read_framed_msg+0x2fa>
 801344c:	18e2      	adds	r2, r4, r3
 801344e:	7890      	ldrb	r0, [r2, #2]
 8013450:	287d      	cmp	r0, #125	@ 0x7d
 8013452:	f000 8190 	beq.w	8013776 <uxr_read_framed_msg+0x3c2>
 8013456:	3301      	adds	r3, #1
 8013458:	085a      	lsrs	r2, r3, #1
 801345a:	fba5 1202 	umull	r1, r2, r5, r2
 801345e:	0892      	lsrs	r2, r2, #2
 8013460:	212a      	movs	r1, #42	@ 0x2a
 8013462:	fb01 3312 	mls	r3, r1, r2, r3
 8013466:	287e      	cmp	r0, #126	@ 0x7e
 8013468:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801346c:	f000 821a 	beq.w	80138a4 <uxr_read_framed_msg+0x4f0>
 8013470:	2307      	movs	r3, #7
 8013472:	86a0      	strh	r0, [r4, #52]	@ 0x34
 8013474:	7023      	strb	r3, [r4, #0]
 8013476:	e7ae      	b.n	80133d6 <uxr_read_framed_msg+0x22>
 8013478:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 801347a:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 801347e:	459e      	cmp	lr, r3
 8013480:	d938      	bls.n	80134f4 <uxr_read_framed_msg+0x140>
 8013482:	ee07 8a90 	vmov	s15, r8
 8013486:	212a      	movs	r1, #42	@ 0x2a
 8013488:	e020      	b.n	80134cc <uxr_read_framed_msg+0x118>
 801348a:	f89b c002 	ldrb.w	ip, [fp, #2]
 801348e:	f1bc 0f7d 	cmp.w	ip, #125	@ 0x7d
 8013492:	f000 80d4 	beq.w	801363e <uxr_read_framed_msg+0x28a>
 8013496:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 801349a:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 801349e:	f000 8219 	beq.w	80138d4 <uxr_read_framed_msg+0x520>
 80134a2:	f806 c003 	strb.w	ip, [r6, r3]
 80134a6:	f8b4 a036 	ldrh.w	sl, [r4, #54]	@ 0x36
 80134aa:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 80134ac:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 80134b0:	ea8a 000c 	eor.w	r0, sl, ip
 80134b4:	b2c0      	uxtb	r0, r0
 80134b6:	3301      	adds	r3, #1
 80134b8:	f837 2010 	ldrh.w	r2, [r7, r0, lsl #1]
 80134bc:	b29b      	uxth	r3, r3
 80134be:	ea82 221a 	eor.w	r2, r2, sl, lsr #8
 80134c2:	4573      	cmp	r3, lr
 80134c4:	8663      	strh	r3, [r4, #50]	@ 0x32
 80134c6:	86e2      	strh	r2, [r4, #54]	@ 0x36
 80134c8:	f080 8120 	bcs.w	801370c <uxr_read_framed_msg+0x358>
 80134cc:	f894 002d 	ldrb.w	r0, [r4, #45]	@ 0x2d
 80134d0:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 80134d4:	f100 0c01 	add.w	ip, r0, #1
 80134d8:	ea4f 025c 	mov.w	r2, ip, lsr #1
 80134dc:	fba5 8202 	umull	r8, r2, r5, r2
 80134e0:	0892      	lsrs	r2, r2, #2
 80134e2:	4582      	cmp	sl, r0
 80134e4:	eb04 0b00 	add.w	fp, r4, r0
 80134e8:	fb01 c212 	mls	r2, r1, r2, ip
 80134ec:	d1cd      	bne.n	801348a <uxr_read_framed_msg+0xd6>
 80134ee:	ee17 8a90 	vmov	r8, s15
 80134f2:	459e      	cmp	lr, r3
 80134f4:	f040 8111 	bne.w	801371a <uxr_read_framed_msg+0x366>
 80134f8:	2306      	movs	r3, #6
 80134fa:	7023      	strb	r3, [r4, #0]
 80134fc:	e76b      	b.n	80133d6 <uxr_read_framed_msg+0x22>
 80134fe:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8013502:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8013506:	4298      	cmp	r0, r3
 8013508:	f000 80c2 	beq.w	8013690 <uxr_read_framed_msg+0x2dc>
 801350c:	18e2      	adds	r2, r4, r3
 801350e:	7891      	ldrb	r1, [r2, #2]
 8013510:	297d      	cmp	r1, #125	@ 0x7d
 8013512:	f000 814c 	beq.w	80137ae <uxr_read_framed_msg+0x3fa>
 8013516:	3301      	adds	r3, #1
 8013518:	085a      	lsrs	r2, r3, #1
 801351a:	fba5 0202 	umull	r0, r2, r5, r2
 801351e:	0892      	lsrs	r2, r2, #2
 8013520:	202a      	movs	r0, #42	@ 0x2a
 8013522:	fb00 3312 	mls	r3, r0, r2, r3
 8013526:	297e      	cmp	r1, #126	@ 0x7e
 8013528:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801352c:	f000 81ca 	beq.w	80138c4 <uxr_read_framed_msg+0x510>
 8013530:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 8013532:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8013536:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8013538:	b29b      	uxth	r3, r3
 801353a:	2000      	movs	r0, #0
 801353c:	428b      	cmp	r3, r1
 801353e:	8623      	strh	r3, [r4, #48]	@ 0x30
 8013540:	8660      	strh	r0, [r4, #50]	@ 0x32
 8013542:	86e0      	strh	r0, [r4, #54]	@ 0x36
 8013544:	f240 80df 	bls.w	8013706 <uxr_read_framed_msg+0x352>
 8013548:	7020      	strb	r0, [r4, #0]
 801354a:	b003      	add	sp, #12
 801354c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013550:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8013554:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8013558:	4299      	cmp	r1, r3
 801355a:	f000 80a8 	beq.w	80136ae <uxr_read_framed_msg+0x2fa>
 801355e:	18e2      	adds	r2, r4, r3
 8013560:	7890      	ldrb	r0, [r2, #2]
 8013562:	287d      	cmp	r0, #125	@ 0x7d
 8013564:	f000 8164 	beq.w	8013830 <uxr_read_framed_msg+0x47c>
 8013568:	3301      	adds	r3, #1
 801356a:	085a      	lsrs	r2, r3, #1
 801356c:	fba5 1202 	umull	r1, r2, r5, r2
 8013570:	0892      	lsrs	r2, r2, #2
 8013572:	212a      	movs	r1, #42	@ 0x2a
 8013574:	fb01 3312 	mls	r3, r1, r2, r3
 8013578:	287e      	cmp	r0, #126	@ 0x7e
 801357a:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801357e:	f000 8191 	beq.w	80138a4 <uxr_read_framed_msg+0x4f0>
 8013582:	2304      	movs	r3, #4
 8013584:	8620      	strh	r0, [r4, #48]	@ 0x30
 8013586:	7023      	strb	r3, [r4, #0]
 8013588:	e725      	b.n	80133d6 <uxr_read_framed_msg+0x22>
 801358a:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 801358e:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8013592:	4290      	cmp	r0, r2
 8013594:	f000 80b3 	beq.w	80136fe <uxr_read_framed_msg+0x34a>
 8013598:	18a3      	adds	r3, r4, r2
 801359a:	7899      	ldrb	r1, [r3, #2]
 801359c:	297d      	cmp	r1, #125	@ 0x7d
 801359e:	f000 8164 	beq.w	801386a <uxr_read_framed_msg+0x4b6>
 80135a2:	3201      	adds	r2, #1
 80135a4:	0850      	lsrs	r0, r2, #1
 80135a6:	fba5 3000 	umull	r3, r0, r5, r0
 80135aa:	0880      	lsrs	r0, r0, #2
 80135ac:	232a      	movs	r3, #42	@ 0x2a
 80135ae:	fb03 2210 	mls	r2, r3, r0, r2
 80135b2:	297e      	cmp	r1, #126	@ 0x7e
 80135b4:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 80135b8:	f000 8188 	beq.w	80138cc <uxr_read_framed_msg+0x518>
 80135bc:	7863      	ldrb	r3, [r4, #1]
 80135be:	428b      	cmp	r3, r1
 80135c0:	bf0c      	ite	eq
 80135c2:	2303      	moveq	r3, #3
 80135c4:	2300      	movne	r3, #0
 80135c6:	7023      	strb	r3, [r4, #0]
 80135c8:	e705      	b.n	80133d6 <uxr_read_framed_msg+0x22>
 80135ca:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 80135ce:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 80135d2:	2200      	movs	r2, #0
 80135d4:	4299      	cmp	r1, r3
 80135d6:	f884 202e 	strb.w	r2, [r4, #46]	@ 0x2e
 80135da:	d06c      	beq.n	80136b6 <uxr_read_framed_msg+0x302>
 80135dc:	18e2      	adds	r2, r4, r3
 80135de:	7890      	ldrb	r0, [r2, #2]
 80135e0:	287d      	cmp	r0, #125	@ 0x7d
 80135e2:	f000 8101 	beq.w	80137e8 <uxr_read_framed_msg+0x434>
 80135e6:	3301      	adds	r3, #1
 80135e8:	085a      	lsrs	r2, r3, #1
 80135ea:	fba5 1202 	umull	r1, r2, r5, r2
 80135ee:	0892      	lsrs	r2, r2, #2
 80135f0:	212a      	movs	r1, #42	@ 0x2a
 80135f2:	fb01 3312 	mls	r3, r1, r2, r3
 80135f6:	287e      	cmp	r0, #126	@ 0x7e
 80135f8:	f884 002e 	strb.w	r0, [r4, #46]	@ 0x2e
 80135fc:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8013600:	d059      	beq.n	80136b6 <uxr_read_framed_msg+0x302>
 8013602:	2302      	movs	r3, #2
 8013604:	7023      	strb	r3, [r4, #0]
 8013606:	e6e6      	b.n	80133d6 <uxr_read_framed_msg+0x22>
 8013608:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 801360c:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8013610:	f04f 0e2a 	mov.w	lr, #42	@ 0x2a
 8013614:	1c51      	adds	r1, r2, #1
 8013616:	084b      	lsrs	r3, r1, #1
 8013618:	fba5 c303 	umull	ip, r3, r5, r3
 801361c:	089b      	lsrs	r3, r3, #2
 801361e:	fb0e 1313 	mls	r3, lr, r3, r1
 8013622:	4592      	cmp	sl, r2
 8013624:	eb04 0002 	add.w	r0, r4, r2
 8013628:	b2da      	uxtb	r2, r3
 801362a:	f43f af04 	beq.w	8013436 <uxr_read_framed_msg+0x82>
 801362e:	7883      	ldrb	r3, [r0, #2]
 8013630:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8013634:	2b7e      	cmp	r3, #126	@ 0x7e
 8013636:	d1ed      	bne.n	8013614 <uxr_read_framed_msg+0x260>
 8013638:	2301      	movs	r3, #1
 801363a:	7023      	strb	r3, [r4, #0]
 801363c:	e6cb      	b.n	80133d6 <uxr_read_framed_msg+0x22>
 801363e:	f100 0c01 	add.w	ip, r0, #1
 8013642:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8013646:	fba5 8202 	umull	r8, r2, r5, r2
 801364a:	0892      	lsrs	r2, r2, #2
 801364c:	fb01 c212 	mls	r2, r1, r2, ip
 8013650:	eb04 0c02 	add.w	ip, r4, r2
 8013654:	b2d2      	uxtb	r2, r2
 8013656:	4592      	cmp	sl, r2
 8013658:	f100 0002 	add.w	r0, r0, #2
 801365c:	f43f af47 	beq.w	80134ee <uxr_read_framed_msg+0x13a>
 8013660:	0842      	lsrs	r2, r0, #1
 8013662:	f89c a002 	ldrb.w	sl, [ip, #2]
 8013666:	fba5 8202 	umull	r8, r2, r5, r2
 801366a:	0892      	lsrs	r2, r2, #2
 801366c:	fb01 0012 	mls	r0, r1, r2, r0
 8013670:	f1ba 0f7e 	cmp.w	sl, #126	@ 0x7e
 8013674:	f08a 0c20 	eor.w	ip, sl, #32
 8013678:	f884 002d 	strb.w	r0, [r4, #45]	@ 0x2d
 801367c:	f47f af11 	bne.w	80134a2 <uxr_read_framed_msg+0xee>
 8013680:	459e      	cmp	lr, r3
 8013682:	ee17 8a90 	vmov	r8, s15
 8013686:	f43f af37 	beq.w	80134f8 <uxr_read_framed_msg+0x144>
 801368a:	2301      	movs	r3, #1
 801368c:	7023      	strb	r3, [r4, #0]
 801368e:	e6a2      	b.n	80133d6 <uxr_read_framed_msg+0x22>
 8013690:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013692:	9300      	str	r3, [sp, #0]
 8013694:	2301      	movs	r3, #1
 8013696:	9301      	str	r3, [sp, #4]
 8013698:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801369a:	464a      	mov	r2, r9
 801369c:	4641      	mov	r1, r8
 801369e:	4620      	mov	r0, r4
 80136a0:	f7ff fe06 	bl	80132b0 <uxr_framing_read_transport>
 80136a4:	2800      	cmp	r0, #0
 80136a6:	f43f aec6 	beq.w	8013436 <uxr_read_framed_msg+0x82>
 80136aa:	7823      	ldrb	r3, [r4, #0]
 80136ac:	e693      	b.n	80133d6 <uxr_read_framed_msg+0x22>
 80136ae:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80136b0:	9300      	str	r3, [sp, #0]
 80136b2:	2302      	movs	r3, #2
 80136b4:	e7ef      	b.n	8013696 <uxr_read_framed_msg+0x2e2>
 80136b6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80136b8:	9300      	str	r3, [sp, #0]
 80136ba:	2304      	movs	r3, #4
 80136bc:	9301      	str	r3, [sp, #4]
 80136be:	464a      	mov	r2, r9
 80136c0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80136c2:	4641      	mov	r1, r8
 80136c4:	4620      	mov	r0, r4
 80136c6:	f7ff fdf3 	bl	80132b0 <uxr_framing_read_transport>
 80136ca:	2800      	cmp	r0, #0
 80136cc:	d1ed      	bne.n	80136aa <uxr_read_framed_msg+0x2f6>
 80136ce:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 80136d2:	2b7e      	cmp	r3, #126	@ 0x7e
 80136d4:	d0e9      	beq.n	80136aa <uxr_read_framed_msg+0x2f6>
 80136d6:	e6ae      	b.n	8013436 <uxr_read_framed_msg+0x82>
 80136d8:	30c30c31 	.word	0x30c30c31
 80136dc:	0801e74c 	.word	0x0801e74c
 80136e0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80136e2:	9300      	str	r3, [sp, #0]
 80136e4:	2305      	movs	r3, #5
 80136e6:	9301      	str	r3, [sp, #4]
 80136e8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80136ea:	f7ff fde1 	bl	80132b0 <uxr_framing_read_transport>
 80136ee:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 80136f2:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 80136f6:	429a      	cmp	r2, r3
 80136f8:	f43f ae9d 	beq.w	8013436 <uxr_read_framed_msg+0x82>
 80136fc:	e668      	b.n	80133d0 <uxr_read_framed_msg+0x1c>
 80136fe:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013700:	9300      	str	r3, [sp, #0]
 8013702:	2303      	movs	r3, #3
 8013704:	e7c7      	b.n	8013696 <uxr_read_framed_msg+0x2e2>
 8013706:	2305      	movs	r3, #5
 8013708:	7023      	strb	r3, [r4, #0]
 801370a:	e664      	b.n	80133d6 <uxr_read_framed_msg+0x22>
 801370c:	ee17 8a90 	vmov	r8, s15
 8013710:	f43f aef2 	beq.w	80134f8 <uxr_read_framed_msg+0x144>
 8013714:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 8013718:	d08e      	beq.n	8013638 <uxr_read_framed_msg+0x284>
 801371a:	ebae 0303 	sub.w	r3, lr, r3
 801371e:	3302      	adds	r3, #2
 8013720:	9301      	str	r3, [sp, #4]
 8013722:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013724:	9300      	str	r3, [sp, #0]
 8013726:	e7b7      	b.n	8013698 <uxr_read_framed_msg+0x2e4>
 8013728:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801372a:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 801372e:	7013      	strb	r3, [r2, #0]
 8013730:	8e20      	ldrh	r0, [r4, #48]	@ 0x30
 8013732:	b003      	add	sp, #12
 8013734:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013738:	f103 0c01 	add.w	ip, r3, #1
 801373c:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8013740:	fba5 0202 	umull	r0, r2, r5, r2
 8013744:	0892      	lsrs	r2, r2, #2
 8013746:	202a      	movs	r0, #42	@ 0x2a
 8013748:	fb00 c212 	mls	r2, r0, r2, ip
 801374c:	fa5f fc82 	uxtb.w	ip, r2
 8013750:	4561      	cmp	r1, ip
 8013752:	d09d      	beq.n	8013690 <uxr_read_framed_msg+0x2dc>
 8013754:	3302      	adds	r3, #2
 8013756:	4422      	add	r2, r4
 8013758:	0859      	lsrs	r1, r3, #1
 801375a:	7892      	ldrb	r2, [r2, #2]
 801375c:	fba5 c101 	umull	ip, r1, r5, r1
 8013760:	0889      	lsrs	r1, r1, #2
 8013762:	fb00 3311 	mls	r3, r0, r1, r3
 8013766:	2a7e      	cmp	r2, #126	@ 0x7e
 8013768:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801376c:	f000 80aa 	beq.w	80138c4 <uxr_read_framed_msg+0x510>
 8013770:	f082 0220 	eor.w	r2, r2, #32
 8013774:	e654      	b.n	8013420 <uxr_read_framed_msg+0x6c>
 8013776:	1c58      	adds	r0, r3, #1
 8013778:	0842      	lsrs	r2, r0, #1
 801377a:	fba5 c202 	umull	ip, r2, r5, r2
 801377e:	0892      	lsrs	r2, r2, #2
 8013780:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8013784:	fb0c 0212 	mls	r2, ip, r2, r0
 8013788:	b2d0      	uxtb	r0, r2
 801378a:	4281      	cmp	r1, r0
 801378c:	d08f      	beq.n	80136ae <uxr_read_framed_msg+0x2fa>
 801378e:	4422      	add	r2, r4
 8013790:	3302      	adds	r3, #2
 8013792:	7890      	ldrb	r0, [r2, #2]
 8013794:	085a      	lsrs	r2, r3, #1
 8013796:	fba5 1202 	umull	r1, r2, r5, r2
 801379a:	0892      	lsrs	r2, r2, #2
 801379c:	fb0c 3312 	mls	r3, ip, r2, r3
 80137a0:	287e      	cmp	r0, #126	@ 0x7e
 80137a2:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80137a6:	d07d      	beq.n	80138a4 <uxr_read_framed_msg+0x4f0>
 80137a8:	f080 0020 	eor.w	r0, r0, #32
 80137ac:	e660      	b.n	8013470 <uxr_read_framed_msg+0xbc>
 80137ae:	1c59      	adds	r1, r3, #1
 80137b0:	084a      	lsrs	r2, r1, #1
 80137b2:	fba5 c202 	umull	ip, r2, r5, r2
 80137b6:	0892      	lsrs	r2, r2, #2
 80137b8:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 80137bc:	fb0c 1212 	mls	r2, ip, r2, r1
 80137c0:	b2d1      	uxtb	r1, r2
 80137c2:	4288      	cmp	r0, r1
 80137c4:	f43f af64 	beq.w	8013690 <uxr_read_framed_msg+0x2dc>
 80137c8:	4422      	add	r2, r4
 80137ca:	3302      	adds	r3, #2
 80137cc:	7891      	ldrb	r1, [r2, #2]
 80137ce:	085a      	lsrs	r2, r3, #1
 80137d0:	fba5 0202 	umull	r0, r2, r5, r2
 80137d4:	0892      	lsrs	r2, r2, #2
 80137d6:	fb0c 3312 	mls	r3, ip, r2, r3
 80137da:	297e      	cmp	r1, #126	@ 0x7e
 80137dc:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80137e0:	d070      	beq.n	80138c4 <uxr_read_framed_msg+0x510>
 80137e2:	f081 0120 	eor.w	r1, r1, #32
 80137e6:	e6a3      	b.n	8013530 <uxr_read_framed_msg+0x17c>
 80137e8:	f103 0c01 	add.w	ip, r3, #1
 80137ec:	ea4f 025c 	mov.w	r2, ip, lsr #1
 80137f0:	fba5 0202 	umull	r0, r2, r5, r2
 80137f4:	0892      	lsrs	r2, r2, #2
 80137f6:	202a      	movs	r0, #42	@ 0x2a
 80137f8:	fb00 c212 	mls	r2, r0, r2, ip
 80137fc:	fa5f fc82 	uxtb.w	ip, r2
 8013800:	4561      	cmp	r1, ip
 8013802:	f43f af58 	beq.w	80136b6 <uxr_read_framed_msg+0x302>
 8013806:	4422      	add	r2, r4
 8013808:	3302      	adds	r3, #2
 801380a:	7891      	ldrb	r1, [r2, #2]
 801380c:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 8013810:	085a      	lsrs	r2, r3, #1
 8013812:	fba5 c202 	umull	ip, r2, r5, r2
 8013816:	0892      	lsrs	r2, r2, #2
 8013818:	fb00 3312 	mls	r3, r0, r2, r3
 801381c:	297e      	cmp	r1, #126	@ 0x7e
 801381e:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8013822:	f43f af48 	beq.w	80136b6 <uxr_read_framed_msg+0x302>
 8013826:	f081 0120 	eor.w	r1, r1, #32
 801382a:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 801382e:	e6e8      	b.n	8013602 <uxr_read_framed_msg+0x24e>
 8013830:	1c58      	adds	r0, r3, #1
 8013832:	0842      	lsrs	r2, r0, #1
 8013834:	fba5 c202 	umull	ip, r2, r5, r2
 8013838:	0892      	lsrs	r2, r2, #2
 801383a:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 801383e:	fb0c 0212 	mls	r2, ip, r2, r0
 8013842:	b2d0      	uxtb	r0, r2
 8013844:	4281      	cmp	r1, r0
 8013846:	f43f af32 	beq.w	80136ae <uxr_read_framed_msg+0x2fa>
 801384a:	4422      	add	r2, r4
 801384c:	3302      	adds	r3, #2
 801384e:	7890      	ldrb	r0, [r2, #2]
 8013850:	085a      	lsrs	r2, r3, #1
 8013852:	fba5 1202 	umull	r1, r2, r5, r2
 8013856:	0892      	lsrs	r2, r2, #2
 8013858:	fb0c 3312 	mls	r3, ip, r2, r3
 801385c:	287e      	cmp	r0, #126	@ 0x7e
 801385e:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8013862:	d01f      	beq.n	80138a4 <uxr_read_framed_msg+0x4f0>
 8013864:	f080 0020 	eor.w	r0, r0, #32
 8013868:	e68b      	b.n	8013582 <uxr_read_framed_msg+0x1ce>
 801386a:	1c51      	adds	r1, r2, #1
 801386c:	084b      	lsrs	r3, r1, #1
 801386e:	fba5 c303 	umull	ip, r3, r5, r3
 8013872:	089b      	lsrs	r3, r3, #2
 8013874:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8013878:	fb0c 1313 	mls	r3, ip, r3, r1
 801387c:	b2d9      	uxtb	r1, r3
 801387e:	4288      	cmp	r0, r1
 8013880:	f43f af3d 	beq.w	80136fe <uxr_read_framed_msg+0x34a>
 8013884:	3202      	adds	r2, #2
 8013886:	4423      	add	r3, r4
 8013888:	0850      	lsrs	r0, r2, #1
 801388a:	789b      	ldrb	r3, [r3, #2]
 801388c:	fba5 1000 	umull	r1, r0, r5, r0
 8013890:	0880      	lsrs	r0, r0, #2
 8013892:	fb0c 2210 	mls	r2, ip, r0, r2
 8013896:	2b7e      	cmp	r3, #126	@ 0x7e
 8013898:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 801389c:	d016      	beq.n	80138cc <uxr_read_framed_msg+0x518>
 801389e:	f083 0120 	eor.w	r1, r3, #32
 80138a2:	e68b      	b.n	80135bc <uxr_read_framed_msg+0x208>
 80138a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80138a6:	9300      	str	r3, [sp, #0]
 80138a8:	2302      	movs	r3, #2
 80138aa:	9301      	str	r3, [sp, #4]
 80138ac:	464a      	mov	r2, r9
 80138ae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80138b0:	4641      	mov	r1, r8
 80138b2:	4620      	mov	r0, r4
 80138b4:	f7ff fcfc 	bl	80132b0 <uxr_framing_read_transport>
 80138b8:	2800      	cmp	r0, #0
 80138ba:	f47f aef6 	bne.w	80136aa <uxr_read_framed_msg+0x2f6>
 80138be:	2301      	movs	r3, #1
 80138c0:	7023      	strb	r3, [r4, #0]
 80138c2:	e588      	b.n	80133d6 <uxr_read_framed_msg+0x22>
 80138c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80138c6:	9300      	str	r3, [sp, #0]
 80138c8:	2301      	movs	r3, #1
 80138ca:	e7ee      	b.n	80138aa <uxr_read_framed_msg+0x4f6>
 80138cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80138ce:	9300      	str	r3, [sp, #0]
 80138d0:	2303      	movs	r3, #3
 80138d2:	e7ea      	b.n	80138aa <uxr_read_framed_msg+0x4f6>
 80138d4:	ee17 8a90 	vmov	r8, s15
 80138d8:	e6ae      	b.n	8013638 <uxr_read_framed_msg+0x284>
 80138da:	bf00      	nop

080138dc <uxr_stream_id>:
 80138dc:	2901      	cmp	r1, #1
 80138de:	b082      	sub	sp, #8
 80138e0:	d01d      	beq.n	801391e <uxr_stream_id+0x42>
 80138e2:	2902      	cmp	r1, #2
 80138e4:	f04f 0c00 	mov.w	ip, #0
 80138e8:	d01e      	beq.n	8013928 <uxr_stream_id+0x4c>
 80138ea:	2300      	movs	r3, #0
 80138ec:	f36c 0307 	bfi	r3, ip, #0, #8
 80138f0:	f360 230f 	bfi	r3, r0, #8, #8
 80138f4:	f361 4317 	bfi	r3, r1, #16, #8
 80138f8:	f362 631f 	bfi	r3, r2, #24, #8
 80138fc:	b2da      	uxtb	r2, r3
 80138fe:	2000      	movs	r0, #0
 8013900:	f362 0007 	bfi	r0, r2, #0, #8
 8013904:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8013908:	f362 200f 	bfi	r0, r2, #8, #8
 801390c:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8013910:	f362 4017 	bfi	r0, r2, #16, #8
 8013914:	0e1b      	lsrs	r3, r3, #24
 8013916:	f363 601f 	bfi	r0, r3, #24, #8
 801391a:	b002      	add	sp, #8
 801391c:	4770      	bx	lr
 801391e:	f100 0c01 	add.w	ip, r0, #1
 8013922:	fa5f fc8c 	uxtb.w	ip, ip
 8013926:	e7e0      	b.n	80138ea <uxr_stream_id+0xe>
 8013928:	f080 0c80 	eor.w	ip, r0, #128	@ 0x80
 801392c:	e7dd      	b.n	80138ea <uxr_stream_id+0xe>
 801392e:	bf00      	nop

08013930 <uxr_stream_id_from_raw>:
 8013930:	b082      	sub	sp, #8
 8013932:	b130      	cbz	r0, 8013942 <uxr_stream_id_from_raw+0x12>
 8013934:	0603      	lsls	r3, r0, #24
 8013936:	d420      	bmi.n	801397a <uxr_stream_id_from_raw+0x4a>
 8013938:	1e42      	subs	r2, r0, #1
 801393a:	b2d2      	uxtb	r2, r2
 801393c:	f04f 0c01 	mov.w	ip, #1
 8013940:	e001      	b.n	8013946 <uxr_stream_id_from_raw+0x16>
 8013942:	4684      	mov	ip, r0
 8013944:	4602      	mov	r2, r0
 8013946:	2300      	movs	r3, #0
 8013948:	f360 0307 	bfi	r3, r0, #0, #8
 801394c:	f362 230f 	bfi	r3, r2, #8, #8
 8013950:	f36c 4317 	bfi	r3, ip, #16, #8
 8013954:	f361 631f 	bfi	r3, r1, #24, #8
 8013958:	b2da      	uxtb	r2, r3
 801395a:	2000      	movs	r0, #0
 801395c:	f362 0007 	bfi	r0, r2, #0, #8
 8013960:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8013964:	f362 200f 	bfi	r0, r2, #8, #8
 8013968:	f3c3 4207 	ubfx	r2, r3, #16, #8
 801396c:	f362 4017 	bfi	r0, r2, #16, #8
 8013970:	0e1b      	lsrs	r3, r3, #24
 8013972:	f363 601f 	bfi	r0, r3, #24, #8
 8013976:	b002      	add	sp, #8
 8013978:	4770      	bx	lr
 801397a:	f080 0280 	eor.w	r2, r0, #128	@ 0x80
 801397e:	f04f 0c02 	mov.w	ip, #2
 8013982:	e7e0      	b.n	8013946 <uxr_stream_id_from_raw+0x16>

08013984 <uxr_init_stream_storage>:
 8013984:	2300      	movs	r3, #0
 8013986:	7403      	strb	r3, [r0, #16]
 8013988:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 801398c:	f880 3044 	strb.w	r3, [r0, #68]	@ 0x44
 8013990:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
 8013994:	4770      	bx	lr
 8013996:	bf00      	nop

08013998 <uxr_reset_stream_storage>:
 8013998:	b570      	push	{r4, r5, r6, lr}
 801399a:	7c03      	ldrb	r3, [r0, #16]
 801399c:	4604      	mov	r4, r0
 801399e:	b153      	cbz	r3, 80139b6 <uxr_reset_stream_storage+0x1e>
 80139a0:	4606      	mov	r6, r0
 80139a2:	2500      	movs	r5, #0
 80139a4:	4630      	mov	r0, r6
 80139a6:	f006 f855 	bl	8019a54 <uxr_reset_output_best_effort_stream>
 80139aa:	7c23      	ldrb	r3, [r4, #16]
 80139ac:	3501      	adds	r5, #1
 80139ae:	42ab      	cmp	r3, r5
 80139b0:	f106 0610 	add.w	r6, r6, #16
 80139b4:	d8f6      	bhi.n	80139a4 <uxr_reset_stream_storage+0xc>
 80139b6:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80139ba:	b163      	cbz	r3, 80139d6 <uxr_reset_stream_storage+0x3e>
 80139bc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80139c0:	2500      	movs	r5, #0
 80139c2:	4630      	mov	r0, r6
 80139c4:	f005 fe48 	bl	8019658 <uxr_reset_input_best_effort_stream>
 80139c8:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80139cc:	3501      	adds	r5, #1
 80139ce:	42ab      	cmp	r3, r5
 80139d0:	f106 0602 	add.w	r6, r6, #2
 80139d4:	d8f5      	bhi.n	80139c2 <uxr_reset_stream_storage+0x2a>
 80139d6:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 80139da:	b163      	cbz	r3, 80139f6 <uxr_reset_stream_storage+0x5e>
 80139dc:	f104 0618 	add.w	r6, r4, #24
 80139e0:	2500      	movs	r5, #0
 80139e2:	4630      	mov	r0, r6
 80139e4:	f006 f8e2 	bl	8019bac <uxr_reset_output_reliable_stream>
 80139e8:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 80139ec:	3501      	adds	r5, #1
 80139ee:	42ab      	cmp	r3, r5
 80139f0:	f106 0628 	add.w	r6, r6, #40	@ 0x28
 80139f4:	d8f5      	bhi.n	80139e2 <uxr_reset_stream_storage+0x4a>
 80139f6:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 80139fa:	b163      	cbz	r3, 8013a16 <uxr_reset_stream_storage+0x7e>
 80139fc:	f104 0648 	add.w	r6, r4, #72	@ 0x48
 8013a00:	2500      	movs	r5, #0
 8013a02:	4630      	mov	r0, r6
 8013a04:	f005 fe9c 	bl	8019740 <uxr_reset_input_reliable_stream>
 8013a08:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 8013a0c:	3501      	adds	r5, #1
 8013a0e:	42ab      	cmp	r3, r5
 8013a10:	f106 0618 	add.w	r6, r6, #24
 8013a14:	d8f5      	bhi.n	8013a02 <uxr_reset_stream_storage+0x6a>
 8013a16:	bd70      	pop	{r4, r5, r6, pc}

08013a18 <uxr_add_output_best_effort_buffer>:
 8013a18:	b510      	push	{r4, lr}
 8013a1a:	7c04      	ldrb	r4, [r0, #16]
 8013a1c:	f104 0c01 	add.w	ip, r4, #1
 8013a20:	b082      	sub	sp, #8
 8013a22:	f880 c010 	strb.w	ip, [r0, #16]
 8013a26:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 8013a2a:	f006 f809 	bl	8019a40 <uxr_init_output_best_effort_stream>
 8013a2e:	2201      	movs	r2, #1
 8013a30:	4611      	mov	r1, r2
 8013a32:	4620      	mov	r0, r4
 8013a34:	b002      	add	sp, #8
 8013a36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013a3a:	f7ff bf4f 	b.w	80138dc <uxr_stream_id>
 8013a3e:	bf00      	nop

08013a40 <uxr_add_output_reliable_buffer>:
 8013a40:	b510      	push	{r4, lr}
 8013a42:	b084      	sub	sp, #16
 8013a44:	4684      	mov	ip, r0
 8013a46:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8013a4a:	9000      	str	r0, [sp, #0]
 8013a4c:	f89c 4040 	ldrb.w	r4, [ip, #64]	@ 0x40
 8013a50:	2028      	movs	r0, #40	@ 0x28
 8013a52:	fb00 c004 	mla	r0, r0, r4, ip
 8013a56:	f104 0e01 	add.w	lr, r4, #1
 8013a5a:	3018      	adds	r0, #24
 8013a5c:	f88c e040 	strb.w	lr, [ip, #64]	@ 0x40
 8013a60:	f006 f86c 	bl	8019b3c <uxr_init_output_reliable_stream>
 8013a64:	2201      	movs	r2, #1
 8013a66:	2102      	movs	r1, #2
 8013a68:	4620      	mov	r0, r4
 8013a6a:	b004      	add	sp, #16
 8013a6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013a70:	f7ff bf34 	b.w	80138dc <uxr_stream_id>

08013a74 <uxr_add_input_best_effort_buffer>:
 8013a74:	b510      	push	{r4, lr}
 8013a76:	f890 4044 	ldrb.w	r4, [r0, #68]	@ 0x44
 8013a7a:	4603      	mov	r3, r0
 8013a7c:	1c62      	adds	r2, r4, #1
 8013a7e:	f104 0021 	add.w	r0, r4, #33	@ 0x21
 8013a82:	b082      	sub	sp, #8
 8013a84:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8013a88:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8013a8c:	f005 fde0 	bl	8019650 <uxr_init_input_best_effort_stream>
 8013a90:	2200      	movs	r2, #0
 8013a92:	2101      	movs	r1, #1
 8013a94:	4620      	mov	r0, r4
 8013a96:	b002      	add	sp, #8
 8013a98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013a9c:	f7ff bf1e 	b.w	80138dc <uxr_stream_id>

08013aa0 <uxr_add_input_reliable_buffer>:
 8013aa0:	b510      	push	{r4, lr}
 8013aa2:	b084      	sub	sp, #16
 8013aa4:	4684      	mov	ip, r0
 8013aa6:	9806      	ldr	r0, [sp, #24]
 8013aa8:	9000      	str	r0, [sp, #0]
 8013aaa:	f89c 4060 	ldrb.w	r4, [ip, #96]	@ 0x60
 8013aae:	2018      	movs	r0, #24
 8013ab0:	fb00 c004 	mla	r0, r0, r4, ip
 8013ab4:	f104 0e01 	add.w	lr, r4, #1
 8013ab8:	3048      	adds	r0, #72	@ 0x48
 8013aba:	f88c e060 	strb.w	lr, [ip, #96]	@ 0x60
 8013abe:	f005 fe13 	bl	80196e8 <uxr_init_input_reliable_stream>
 8013ac2:	2200      	movs	r2, #0
 8013ac4:	2102      	movs	r1, #2
 8013ac6:	4620      	mov	r0, r4
 8013ac8:	b004      	add	sp, #16
 8013aca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013ace:	f7ff bf05 	b.w	80138dc <uxr_stream_id>
 8013ad2:	bf00      	nop

08013ad4 <uxr_get_output_best_effort_stream>:
 8013ad4:	7c03      	ldrb	r3, [r0, #16]
 8013ad6:	428b      	cmp	r3, r1
 8013ad8:	bf8c      	ite	hi
 8013ada:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 8013ade:	2000      	movls	r0, #0
 8013ae0:	4770      	bx	lr
 8013ae2:	bf00      	nop

08013ae4 <uxr_get_output_reliable_stream>:
 8013ae4:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8013ae8:	428b      	cmp	r3, r1
 8013aea:	bf83      	ittte	hi
 8013aec:	2328      	movhi	r3, #40	@ 0x28
 8013aee:	fb03 0001 	mlahi	r0, r3, r1, r0
 8013af2:	3018      	addhi	r0, #24
 8013af4:	2000      	movls	r0, #0
 8013af6:	4770      	bx	lr

08013af8 <uxr_get_input_best_effort_stream>:
 8013af8:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 8013afc:	428b      	cmp	r3, r1
 8013afe:	bf86      	itte	hi
 8013b00:	3121      	addhi	r1, #33	@ 0x21
 8013b02:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
 8013b06:	2000      	movls	r0, #0
 8013b08:	4770      	bx	lr
 8013b0a:	bf00      	nop

08013b0c <uxr_get_input_reliable_stream>:
 8013b0c:	f890 3060 	ldrb.w	r3, [r0, #96]	@ 0x60
 8013b10:	428b      	cmp	r3, r1
 8013b12:	bf83      	ittte	hi
 8013b14:	2318      	movhi	r3, #24
 8013b16:	fb03 0001 	mlahi	r0, r3, r1, r0
 8013b1a:	3048      	addhi	r0, #72	@ 0x48
 8013b1c:	2000      	movls	r0, #0
 8013b1e:	4770      	bx	lr

08013b20 <uxr_output_streams_confirmed>:
 8013b20:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8013b24:	b183      	cbz	r3, 8013b48 <uxr_output_streams_confirmed+0x28>
 8013b26:	b570      	push	{r4, r5, r6, lr}
 8013b28:	4606      	mov	r6, r0
 8013b2a:	f100 0518 	add.w	r5, r0, #24
 8013b2e:	2400      	movs	r4, #0
 8013b30:	e001      	b.n	8013b36 <uxr_output_streams_confirmed+0x16>
 8013b32:	3528      	adds	r5, #40	@ 0x28
 8013b34:	b138      	cbz	r0, 8013b46 <uxr_output_streams_confirmed+0x26>
 8013b36:	4628      	mov	r0, r5
 8013b38:	f006 faa8 	bl	801a08c <uxr_is_output_up_to_date>
 8013b3c:	f896 3040 	ldrb.w	r3, [r6, #64]	@ 0x40
 8013b40:	3401      	adds	r4, #1
 8013b42:	42a3      	cmp	r3, r4
 8013b44:	d8f5      	bhi.n	8013b32 <uxr_output_streams_confirmed+0x12>
 8013b46:	bd70      	pop	{r4, r5, r6, pc}
 8013b48:	2001      	movs	r0, #1
 8013b4a:	4770      	bx	lr

08013b4c <uxr_buffer_submessage_header>:
 8013b4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013b4e:	4604      	mov	r4, r0
 8013b50:	460e      	mov	r6, r1
 8013b52:	2104      	movs	r1, #4
 8013b54:	4615      	mov	r5, r2
 8013b56:	461f      	mov	r7, r3
 8013b58:	f7fa fd0c 	bl	800e574 <ucdr_align_to>
 8013b5c:	2301      	movs	r3, #1
 8013b5e:	ea47 0203 	orr.w	r2, r7, r3
 8013b62:	4631      	mov	r1, r6
 8013b64:	7523      	strb	r3, [r4, #20]
 8013b66:	4620      	mov	r0, r4
 8013b68:	462b      	mov	r3, r5
 8013b6a:	f000 fa27 	bl	8013fbc <uxr_serialize_submessage_header>
 8013b6e:	4620      	mov	r0, r4
 8013b70:	f7fa fd16 	bl	800e5a0 <ucdr_buffer_remaining>
 8013b74:	42a8      	cmp	r0, r5
 8013b76:	bf34      	ite	cc
 8013b78:	2000      	movcc	r0, #0
 8013b7a:	2001      	movcs	r0, #1
 8013b7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013b7e:	bf00      	nop

08013b80 <uxr_read_submessage_header>:
 8013b80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013b84:	4604      	mov	r4, r0
 8013b86:	460d      	mov	r5, r1
 8013b88:	2104      	movs	r1, #4
 8013b8a:	4616      	mov	r6, r2
 8013b8c:	4698      	mov	r8, r3
 8013b8e:	f7fa fcf1 	bl	800e574 <ucdr_align_to>
 8013b92:	4620      	mov	r0, r4
 8013b94:	f7fa fd04 	bl	800e5a0 <ucdr_buffer_remaining>
 8013b98:	2803      	cmp	r0, #3
 8013b9a:	bf8c      	ite	hi
 8013b9c:	2701      	movhi	r7, #1
 8013b9e:	2700      	movls	r7, #0
 8013ba0:	d802      	bhi.n	8013ba8 <uxr_read_submessage_header+0x28>
 8013ba2:	4638      	mov	r0, r7
 8013ba4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013ba8:	4633      	mov	r3, r6
 8013baa:	4642      	mov	r2, r8
 8013bac:	4620      	mov	r0, r4
 8013bae:	4629      	mov	r1, r5
 8013bb0:	f000 fa18 	bl	8013fe4 <uxr_deserialize_submessage_header>
 8013bb4:	f898 3000 	ldrb.w	r3, [r8]
 8013bb8:	f003 0201 	and.w	r2, r3, #1
 8013bbc:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8013bc0:	f888 3000 	strb.w	r3, [r8]
 8013bc4:	7522      	strb	r2, [r4, #20]
 8013bc6:	4638      	mov	r0, r7
 8013bc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013bcc <uxr_submessage_padding>:
 8013bcc:	f010 0003 	ands.w	r0, r0, #3
 8013bd0:	bf18      	it	ne
 8013bd2:	f1c0 0004 	rsbne	r0, r0, #4
 8013bd6:	4770      	bx	lr

08013bd8 <uxr_millis>:
 8013bd8:	b510      	push	{r4, lr}
 8013bda:	b084      	sub	sp, #16
 8013bdc:	4669      	mov	r1, sp
 8013bde:	2001      	movs	r0, #1
 8013be0:	f7ef f9c2 	bl	8002f68 <clock_gettime>
 8013be4:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 8013be8:	4906      	ldr	r1, [pc, #24]	@ (8013c04 <uxr_millis+0x2c>)
 8013bea:	fba0 0301 	umull	r0, r3, r0, r1
 8013bee:	1900      	adds	r0, r0, r4
 8013bf0:	fb01 3102 	mla	r1, r1, r2, r3
 8013bf4:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 8013bf8:	4a03      	ldr	r2, [pc, #12]	@ (8013c08 <uxr_millis+0x30>)
 8013bfa:	2300      	movs	r3, #0
 8013bfc:	f7ed f83e 	bl	8000c7c <__aeabi_ldivmod>
 8013c00:	b004      	add	sp, #16
 8013c02:	bd10      	pop	{r4, pc}
 8013c04:	3b9aca00 	.word	0x3b9aca00
 8013c08:	000f4240 	.word	0x000f4240

08013c0c <uxr_nanos>:
 8013c0c:	b510      	push	{r4, lr}
 8013c0e:	b084      	sub	sp, #16
 8013c10:	4669      	mov	r1, sp
 8013c12:	2001      	movs	r0, #1
 8013c14:	f7ef f9a8 	bl	8002f68 <clock_gettime>
 8013c18:	4a06      	ldr	r2, [pc, #24]	@ (8013c34 <uxr_nanos+0x28>)
 8013c1a:	9800      	ldr	r0, [sp, #0]
 8013c1c:	9902      	ldr	r1, [sp, #8]
 8013c1e:	9c01      	ldr	r4, [sp, #4]
 8013c20:	fba0 0302 	umull	r0, r3, r0, r2
 8013c24:	1840      	adds	r0, r0, r1
 8013c26:	fb02 3304 	mla	r3, r2, r4, r3
 8013c2a:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 8013c2e:	b004      	add	sp, #16
 8013c30:	bd10      	pop	{r4, pc}
 8013c32:	bf00      	nop
 8013c34:	3b9aca00 	.word	0x3b9aca00

08013c38 <on_full_output_buffer_fragmented>:
 8013c38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013c3c:	460c      	mov	r4, r1
 8013c3e:	b08a      	sub	sp, #40	@ 0x28
 8013c40:	f891 10c1 	ldrb.w	r1, [r1, #193]	@ 0xc1
 8013c44:	4606      	mov	r6, r0
 8013c46:	f104 0008 	add.w	r0, r4, #8
 8013c4a:	f7ff ff4b 	bl	8013ae4 <uxr_get_output_reliable_stream>
 8013c4e:	4605      	mov	r5, r0
 8013c50:	f006 fa26 	bl	801a0a0 <get_available_free_slots>
 8013c54:	b968      	cbnz	r0, 8013c72 <on_full_output_buffer_fragmented+0x3a>
 8013c56:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	@ 0xb8
 8013c5a:	4620      	mov	r0, r4
 8013c5c:	4798      	blx	r3
 8013c5e:	b918      	cbnz	r0, 8013c68 <on_full_output_buffer_fragmented+0x30>
 8013c60:	2001      	movs	r0, #1
 8013c62:	b00a      	add	sp, #40	@ 0x28
 8013c64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013c68:	4628      	mov	r0, r5
 8013c6a:	f006 fa19 	bl	801a0a0 <get_available_free_slots>
 8013c6e:	2800      	cmp	r0, #0
 8013c70:	d0f6      	beq.n	8013c60 <on_full_output_buffer_fragmented+0x28>
 8013c72:	8929      	ldrh	r1, [r5, #8]
 8013c74:	89eb      	ldrh	r3, [r5, #14]
 8013c76:	7b28      	ldrb	r0, [r5, #12]
 8013c78:	686a      	ldr	r2, [r5, #4]
 8013c7a:	fbb2 f8f1 	udiv	r8, r2, r1
 8013c7e:	fbb3 f2f1 	udiv	r2, r3, r1
 8013c82:	fb01 3112 	mls	r1, r1, r2, r3
 8013c86:	f5c0 407f 	rsb	r0, r0, #65280	@ 0xff00
 8013c8a:	b289      	uxth	r1, r1
 8013c8c:	fb08 f101 	mul.w	r1, r8, r1
 8013c90:	30fc      	adds	r0, #252	@ 0xfc
 8013c92:	f1a8 0804 	sub.w	r8, r8, #4
 8013c96:	f8d4 30c4 	ldr.w	r3, [r4, #196]	@ 0xc4
 8013c9a:	4440      	add	r0, r8
 8013c9c:	b287      	uxth	r7, r0
 8013c9e:	1bdb      	subs	r3, r3, r7
 8013ca0:	f8c4 30c4 	str.w	r3, [r4, #196]	@ 0xc4
 8013ca4:	682b      	ldr	r3, [r5, #0]
 8013ca6:	3104      	adds	r1, #4
 8013ca8:	4419      	add	r1, r3
 8013caa:	4642      	mov	r2, r8
 8013cac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013cb0:	9300      	str	r3, [sp, #0]
 8013cb2:	a802      	add	r0, sp, #8
 8013cb4:	2300      	movs	r3, #0
 8013cb6:	f7fa fc31 	bl	800e51c <ucdr_init_buffer_origin_offset>
 8013cba:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 8013cbe:	f102 0308 	add.w	r3, r2, #8
 8013cc2:	4543      	cmp	r3, r8
 8013cc4:	d928      	bls.n	8013d18 <on_full_output_buffer_fragmented+0xe0>
 8013cc6:	463a      	mov	r2, r7
 8013cc8:	2300      	movs	r3, #0
 8013cca:	210d      	movs	r1, #13
 8013ccc:	a802      	add	r0, sp, #8
 8013cce:	f7ff ff3d 	bl	8013b4c <uxr_buffer_submessage_header>
 8013cd2:	8929      	ldrh	r1, [r5, #8]
 8013cd4:	89eb      	ldrh	r3, [r5, #14]
 8013cd6:	fbb3 f2f1 	udiv	r2, r3, r1
 8013cda:	fb01 3312 	mls	r3, r1, r2, r3
 8013cde:	b29b      	uxth	r3, r3
 8013ce0:	686a      	ldr	r2, [r5, #4]
 8013ce2:	fbb2 f2f1 	udiv	r2, r2, r1
 8013ce6:	fb02 f303 	mul.w	r3, r2, r3
 8013cea:	682a      	ldr	r2, [r5, #0]
 8013cec:	f842 8003 	str.w	r8, [r2, r3]
 8013cf0:	89e8      	ldrh	r0, [r5, #14]
 8013cf2:	2101      	movs	r1, #1
 8013cf4:	f006 f9f4 	bl	801a0e0 <uxr_seq_num_add>
 8013cf8:	9904      	ldr	r1, [sp, #16]
 8013cfa:	9a03      	ldr	r2, [sp, #12]
 8013cfc:	81e8      	strh	r0, [r5, #14]
 8013cfe:	1a52      	subs	r2, r2, r1
 8013d00:	4630      	mov	r0, r6
 8013d02:	f7fa fc1d 	bl	800e540 <ucdr_init_buffer>
 8013d06:	4630      	mov	r0, r6
 8013d08:	490f      	ldr	r1, [pc, #60]	@ (8013d48 <on_full_output_buffer_fragmented+0x110>)
 8013d0a:	4622      	mov	r2, r4
 8013d0c:	f7fa fbec 	bl	800e4e8 <ucdr_set_on_full_buffer_callback>
 8013d10:	2000      	movs	r0, #0
 8013d12:	b00a      	add	sp, #40	@ 0x28
 8013d14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013d18:	b292      	uxth	r2, r2
 8013d1a:	2302      	movs	r3, #2
 8013d1c:	210d      	movs	r1, #13
 8013d1e:	a802      	add	r0, sp, #8
 8013d20:	f7ff ff14 	bl	8013b4c <uxr_buffer_submessage_header>
 8013d24:	8928      	ldrh	r0, [r5, #8]
 8013d26:	89eb      	ldrh	r3, [r5, #14]
 8013d28:	fbb3 f1f0 	udiv	r1, r3, r0
 8013d2c:	fb00 3311 	mls	r3, r0, r1, r3
 8013d30:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 8013d34:	6869      	ldr	r1, [r5, #4]
 8013d36:	fbb1 f1f0 	udiv	r1, r1, r0
 8013d3a:	b29b      	uxth	r3, r3
 8013d3c:	fb01 f303 	mul.w	r3, r1, r3
 8013d40:	6829      	ldr	r1, [r5, #0]
 8013d42:	3208      	adds	r2, #8
 8013d44:	50ca      	str	r2, [r1, r3]
 8013d46:	e7d3      	b.n	8013cf0 <on_full_output_buffer_fragmented+0xb8>
 8013d48:	08013c39 	.word	0x08013c39

08013d4c <uxr_prepare_output_stream>:
 8013d4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013d4e:	b087      	sub	sp, #28
 8013d50:	2707      	movs	r7, #7
 8013d52:	9202      	str	r2, [sp, #8]
 8013d54:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8013d56:	9103      	str	r1, [sp, #12]
 8013d58:	2500      	movs	r5, #0
 8013d5a:	3204      	adds	r2, #4
 8013d5c:	e9cd 7500 	strd	r7, r5, [sp]
 8013d60:	461c      	mov	r4, r3
 8013d62:	4606      	mov	r6, r0
 8013d64:	f7fe ffc2 	bl	8012cec <uxr_prepare_stream_to_write_submessage>
 8013d68:	f080 0201 	eor.w	r2, r0, #1
 8013d6c:	b2d2      	uxtb	r2, r2
 8013d6e:	75a2      	strb	r2, [r4, #22]
 8013d70:	b112      	cbz	r2, 8013d78 <uxr_prepare_output_stream+0x2c>
 8013d72:	4628      	mov	r0, r5
 8013d74:	b007      	add	sp, #28
 8013d76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013d78:	aa05      	add	r2, sp, #20
 8013d7a:	9902      	ldr	r1, [sp, #8]
 8013d7c:	4630      	mov	r0, r6
 8013d7e:	f7ff f8eb 	bl	8012f58 <uxr_init_base_object_request>
 8013d82:	a905      	add	r1, sp, #20
 8013d84:	4605      	mov	r5, r0
 8013d86:	4620      	mov	r0, r4
 8013d88:	f001 f88c 	bl	8014ea4 <uxr_serialize_WRITE_DATA_Payload_Data>
 8013d8c:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 8013d90:	69a6      	ldr	r6, [r4, #24]
 8013d92:	69e7      	ldr	r7, [r4, #28]
 8013d94:	1a52      	subs	r2, r2, r1
 8013d96:	4620      	mov	r0, r4
 8013d98:	f7fa fbd2 	bl	800e540 <ucdr_init_buffer>
 8013d9c:	4620      	mov	r0, r4
 8013d9e:	463a      	mov	r2, r7
 8013da0:	4631      	mov	r1, r6
 8013da2:	f7fa fba1 	bl	800e4e8 <ucdr_set_on_full_buffer_callback>
 8013da6:	4628      	mov	r0, r5
 8013da8:	b007      	add	sp, #28
 8013daa:	bdf0      	pop	{r4, r5, r6, r7, pc}

08013dac <uxr_prepare_output_stream_fragmented>:
 8013dac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013db0:	b091      	sub	sp, #68	@ 0x44
 8013db2:	4605      	mov	r5, r0
 8013db4:	9105      	str	r1, [sp, #20]
 8013db6:	3008      	adds	r0, #8
 8013db8:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8013dbc:	461e      	mov	r6, r3
 8013dbe:	9204      	str	r2, [sp, #16]
 8013dc0:	f7ff fe90 	bl	8013ae4 <uxr_get_output_reliable_stream>
 8013dc4:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8013dc8:	2b01      	cmp	r3, #1
 8013dca:	f000 8091 	beq.w	8013ef0 <uxr_prepare_output_stream_fragmented+0x144>
 8013dce:	4604      	mov	r4, r0
 8013dd0:	2800      	cmp	r0, #0
 8013dd2:	f000 808d 	beq.w	8013ef0 <uxr_prepare_output_stream_fragmented+0x144>
 8013dd6:	f006 f963 	bl	801a0a0 <get_available_free_slots>
 8013dda:	2800      	cmp	r0, #0
 8013ddc:	f000 8083 	beq.w	8013ee6 <uxr_prepare_output_stream_fragmented+0x13a>
 8013de0:	8922      	ldrh	r2, [r4, #8]
 8013de2:	89e7      	ldrh	r7, [r4, #14]
 8013de4:	fbb7 f9f2 	udiv	r9, r7, r2
 8013de8:	fb02 7919 	mls	r9, r2, r9, r7
 8013dec:	fa1f f989 	uxth.w	r9, r9
 8013df0:	6863      	ldr	r3, [r4, #4]
 8013df2:	fbb3 f2f2 	udiv	r2, r3, r2
 8013df6:	6823      	ldr	r3, [r4, #0]
 8013df8:	9203      	str	r2, [sp, #12]
 8013dfa:	fb02 f909 	mul.w	r9, r2, r9
 8013dfe:	f109 0904 	add.w	r9, r9, #4
 8013e02:	4499      	add	r9, r3
 8013e04:	7b23      	ldrb	r3, [r4, #12]
 8013e06:	f859 8c04 	ldr.w	r8, [r9, #-4]
 8013e0a:	4543      	cmp	r3, r8
 8013e0c:	f1a2 0b04 	sub.w	fp, r2, #4
 8013e10:	d37a      	bcc.n	8013f08 <uxr_prepare_output_stream_fragmented+0x15c>
 8013e12:	f1ab 0a04 	sub.w	sl, fp, #4
 8013e16:	ebaa 0a03 	sub.w	sl, sl, r3
 8013e1a:	465a      	mov	r2, fp
 8013e1c:	2300      	movs	r3, #0
 8013e1e:	4649      	mov	r1, r9
 8013e20:	a808      	add	r0, sp, #32
 8013e22:	f8cd 8000 	str.w	r8, [sp]
 8013e26:	f7fa fb79 	bl	800e51c <ucdr_init_buffer_origin_offset>
 8013e2a:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8013e2c:	fa1f fa8a 	uxth.w	sl, sl
 8013e30:	4652      	mov	r2, sl
 8013e32:	f103 0a08 	add.w	sl, r3, #8
 8013e36:	45da      	cmp	sl, fp
 8013e38:	bf34      	ite	cc
 8013e3a:	2302      	movcc	r3, #2
 8013e3c:	2300      	movcs	r3, #0
 8013e3e:	210d      	movs	r1, #13
 8013e40:	a808      	add	r0, sp, #32
 8013e42:	f7ff fe83 	bl	8013b4c <uxr_buffer_submessage_header>
 8013e46:	8921      	ldrh	r1, [r4, #8]
 8013e48:	fbb7 f2f1 	udiv	r2, r7, r1
 8013e4c:	fb01 7212 	mls	r2, r1, r2, r7
 8013e50:	b292      	uxth	r2, r2
 8013e52:	6863      	ldr	r3, [r4, #4]
 8013e54:	fbb3 f3f1 	udiv	r3, r3, r1
 8013e58:	fb02 f303 	mul.w	r3, r2, r3
 8013e5c:	6822      	ldr	r2, [r4, #0]
 8013e5e:	4638      	mov	r0, r7
 8013e60:	f842 b003 	str.w	fp, [r2, r3]
 8013e64:	2101      	movs	r1, #1
 8013e66:	f006 f93b 	bl	801a0e0 <uxr_seq_num_add>
 8013e6a:	9b03      	ldr	r3, [sp, #12]
 8013e6c:	f108 0104 	add.w	r1, r8, #4
 8013e70:	f1a3 0208 	sub.w	r2, r3, #8
 8013e74:	eba2 0208 	sub.w	r2, r2, r8
 8013e78:	4449      	add	r1, r9
 8013e7a:	4607      	mov	r7, r0
 8013e7c:	4630      	mov	r0, r6
 8013e7e:	f7fa fb5f 	bl	800e540 <ucdr_init_buffer>
 8013e82:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8013e84:	81e7      	strh	r7, [r4, #14]
 8013e86:	1d1a      	adds	r2, r3, #4
 8013e88:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 8013e8c:	bf28      	it	cs
 8013e8e:	2200      	movcs	r2, #0
 8013e90:	2300      	movs	r3, #0
 8013e92:	b292      	uxth	r2, r2
 8013e94:	2107      	movs	r1, #7
 8013e96:	4630      	mov	r0, r6
 8013e98:	f7ff fe58 	bl	8013b4c <uxr_buffer_submessage_header>
 8013e9c:	9904      	ldr	r1, [sp, #16]
 8013e9e:	aa07      	add	r2, sp, #28
 8013ea0:	4628      	mov	r0, r5
 8013ea2:	f7ff f859 	bl	8012f58 <uxr_init_base_object_request>
 8013ea6:	4604      	mov	r4, r0
 8013ea8:	b318      	cbz	r0, 8013ef2 <uxr_prepare_output_stream_fragmented+0x146>
 8013eaa:	a907      	add	r1, sp, #28
 8013eac:	4630      	mov	r0, r6
 8013eae:	f000 fff9 	bl	8014ea4 <uxr_serialize_WRITE_DATA_Payload_Data>
 8013eb2:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 8013eb6:	4630      	mov	r0, r6
 8013eb8:	1a52      	subs	r2, r2, r1
 8013eba:	f7fa fb41 	bl	800e540 <ucdr_init_buffer>
 8013ebe:	9b05      	ldr	r3, [sp, #20]
 8013ec0:	f8c5 30c0 	str.w	r3, [r5, #192]	@ 0xc0
 8013ec4:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8013ec6:	f8c5 30b8 	str.w	r3, [r5, #184]	@ 0xb8
 8013eca:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8013ecc:	491b      	ldr	r1, [pc, #108]	@ (8013f3c <uxr_prepare_output_stream_fragmented+0x190>)
 8013ece:	f8c5 a0c4 	str.w	sl, [r5, #196]	@ 0xc4
 8013ed2:	4630      	mov	r0, r6
 8013ed4:	f8c5 30bc 	str.w	r3, [r5, #188]	@ 0xbc
 8013ed8:	462a      	mov	r2, r5
 8013eda:	f7fa fb05 	bl	800e4e8 <ucdr_set_on_full_buffer_callback>
 8013ede:	4620      	mov	r0, r4
 8013ee0:	b011      	add	sp, #68	@ 0x44
 8013ee2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013ee6:	991c      	ldr	r1, [sp, #112]	@ 0x70
 8013ee8:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8013eea:	4628      	mov	r0, r5
 8013eec:	4798      	blx	r3
 8013eee:	b920      	cbnz	r0, 8013efa <uxr_prepare_output_stream_fragmented+0x14e>
 8013ef0:	2400      	movs	r4, #0
 8013ef2:	4620      	mov	r0, r4
 8013ef4:	b011      	add	sp, #68	@ 0x44
 8013ef6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013efa:	4620      	mov	r0, r4
 8013efc:	f006 f8d0 	bl	801a0a0 <get_available_free_slots>
 8013f00:	2800      	cmp	r0, #0
 8013f02:	f47f af6d 	bne.w	8013de0 <uxr_prepare_output_stream_fragmented+0x34>
 8013f06:	e7f3      	b.n	8013ef0 <uxr_prepare_output_stream_fragmented+0x144>
 8013f08:	4638      	mov	r0, r7
 8013f0a:	2101      	movs	r1, #1
 8013f0c:	f006 f8e8 	bl	801a0e0 <uxr_seq_num_add>
 8013f10:	8921      	ldrh	r1, [r4, #8]
 8013f12:	fbb0 f2f1 	udiv	r2, r0, r1
 8013f16:	fb01 0912 	mls	r9, r1, r2, r0
 8013f1a:	fa1f f289 	uxth.w	r2, r9
 8013f1e:	6863      	ldr	r3, [r4, #4]
 8013f20:	fbb3 f9f1 	udiv	r9, r3, r1
 8013f24:	6823      	ldr	r3, [r4, #0]
 8013f26:	fb02 f909 	mul.w	r9, r2, r9
 8013f2a:	f109 0904 	add.w	r9, r9, #4
 8013f2e:	4499      	add	r9, r3
 8013f30:	4607      	mov	r7, r0
 8013f32:	7b23      	ldrb	r3, [r4, #12]
 8013f34:	f859 8c04 	ldr.w	r8, [r9, #-4]
 8013f38:	e76b      	b.n	8013e12 <uxr_prepare_output_stream_fragmented+0x66>
 8013f3a:	bf00      	nop
 8013f3c:	08013c39 	.word	0x08013c39

08013f40 <uxr_serialize_message_header>:
 8013f40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013f42:	b083      	sub	sp, #12
 8013f44:	4616      	mov	r6, r2
 8013f46:	4604      	mov	r4, r0
 8013f48:	9301      	str	r3, [sp, #4]
 8013f4a:	460d      	mov	r5, r1
 8013f4c:	9f08      	ldr	r7, [sp, #32]
 8013f4e:	f7f9 f815 	bl	800cf7c <ucdr_serialize_uint8_t>
 8013f52:	4631      	mov	r1, r6
 8013f54:	4620      	mov	r0, r4
 8013f56:	f7f9 f811 	bl	800cf7c <ucdr_serialize_uint8_t>
 8013f5a:	9a01      	ldr	r2, [sp, #4]
 8013f5c:	2101      	movs	r1, #1
 8013f5e:	4620      	mov	r0, r4
 8013f60:	f7f9 f8b8 	bl	800d0d4 <ucdr_serialize_endian_uint16_t>
 8013f64:	062b      	lsls	r3, r5, #24
 8013f66:	d501      	bpl.n	8013f6c <uxr_serialize_message_header+0x2c>
 8013f68:	b003      	add	sp, #12
 8013f6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013f6c:	2204      	movs	r2, #4
 8013f6e:	4639      	mov	r1, r7
 8013f70:	4620      	mov	r0, r4
 8013f72:	b003      	add	sp, #12
 8013f74:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8013f78:	f005 b9e0 	b.w	801933c <ucdr_serialize_array_uint8_t>

08013f7c <uxr_deserialize_message_header>:
 8013f7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013f7e:	b083      	sub	sp, #12
 8013f80:	4616      	mov	r6, r2
 8013f82:	4604      	mov	r4, r0
 8013f84:	9301      	str	r3, [sp, #4]
 8013f86:	460d      	mov	r5, r1
 8013f88:	9f08      	ldr	r7, [sp, #32]
 8013f8a:	f7f9 f80d 	bl	800cfa8 <ucdr_deserialize_uint8_t>
 8013f8e:	4631      	mov	r1, r6
 8013f90:	4620      	mov	r0, r4
 8013f92:	f7f9 f809 	bl	800cfa8 <ucdr_deserialize_uint8_t>
 8013f96:	9a01      	ldr	r2, [sp, #4]
 8013f98:	2101      	movs	r1, #1
 8013f9a:	4620      	mov	r0, r4
 8013f9c:	f7f9 f98e 	bl	800d2bc <ucdr_deserialize_endian_uint16_t>
 8013fa0:	f995 3000 	ldrsb.w	r3, [r5]
 8013fa4:	2b00      	cmp	r3, #0
 8013fa6:	da01      	bge.n	8013fac <uxr_deserialize_message_header+0x30>
 8013fa8:	b003      	add	sp, #12
 8013faa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013fac:	2204      	movs	r2, #4
 8013fae:	4639      	mov	r1, r7
 8013fb0:	4620      	mov	r0, r4
 8013fb2:	b003      	add	sp, #12
 8013fb4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8013fb8:	f005 ba24 	b.w	8019404 <ucdr_deserialize_array_uint8_t>

08013fbc <uxr_serialize_submessage_header>:
 8013fbc:	b530      	push	{r4, r5, lr}
 8013fbe:	b083      	sub	sp, #12
 8013fc0:	4615      	mov	r5, r2
 8013fc2:	4604      	mov	r4, r0
 8013fc4:	9301      	str	r3, [sp, #4]
 8013fc6:	f7f8 ffd9 	bl	800cf7c <ucdr_serialize_uint8_t>
 8013fca:	4629      	mov	r1, r5
 8013fcc:	4620      	mov	r0, r4
 8013fce:	f7f8 ffd5 	bl	800cf7c <ucdr_serialize_uint8_t>
 8013fd2:	9a01      	ldr	r2, [sp, #4]
 8013fd4:	2101      	movs	r1, #1
 8013fd6:	4620      	mov	r0, r4
 8013fd8:	b003      	add	sp, #12
 8013fda:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013fde:	f7f9 b879 	b.w	800d0d4 <ucdr_serialize_endian_uint16_t>
 8013fe2:	bf00      	nop

08013fe4 <uxr_deserialize_submessage_header>:
 8013fe4:	b530      	push	{r4, r5, lr}
 8013fe6:	b083      	sub	sp, #12
 8013fe8:	4615      	mov	r5, r2
 8013fea:	4604      	mov	r4, r0
 8013fec:	9301      	str	r3, [sp, #4]
 8013fee:	f7f8 ffdb 	bl	800cfa8 <ucdr_deserialize_uint8_t>
 8013ff2:	4629      	mov	r1, r5
 8013ff4:	4620      	mov	r0, r4
 8013ff6:	f7f8 ffd7 	bl	800cfa8 <ucdr_deserialize_uint8_t>
 8013ffa:	9a01      	ldr	r2, [sp, #4]
 8013ffc:	2101      	movs	r1, #1
 8013ffe:	4620      	mov	r0, r4
 8014000:	b003      	add	sp, #12
 8014002:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014006:	f7f9 b959 	b.w	800d2bc <ucdr_deserialize_endian_uint16_t>
 801400a:	bf00      	nop

0801400c <uxr_serialize_CLIENT_Representation>:
 801400c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014010:	2204      	movs	r2, #4
 8014012:	460e      	mov	r6, r1
 8014014:	4605      	mov	r5, r0
 8014016:	f005 f991 	bl	801933c <ucdr_serialize_array_uint8_t>
 801401a:	2202      	movs	r2, #2
 801401c:	4607      	mov	r7, r0
 801401e:	1d31      	adds	r1, r6, #4
 8014020:	4628      	mov	r0, r5
 8014022:	f005 f98b 	bl	801933c <ucdr_serialize_array_uint8_t>
 8014026:	4038      	ands	r0, r7
 8014028:	2202      	movs	r2, #2
 801402a:	1db1      	adds	r1, r6, #6
 801402c:	b2c7      	uxtb	r7, r0
 801402e:	4628      	mov	r0, r5
 8014030:	f005 f984 	bl	801933c <ucdr_serialize_array_uint8_t>
 8014034:	2204      	movs	r2, #4
 8014036:	4007      	ands	r7, r0
 8014038:	f106 0108 	add.w	r1, r6, #8
 801403c:	4628      	mov	r0, r5
 801403e:	f005 f97d 	bl	801933c <ucdr_serialize_array_uint8_t>
 8014042:	7b31      	ldrb	r1, [r6, #12]
 8014044:	4007      	ands	r7, r0
 8014046:	4628      	mov	r0, r5
 8014048:	f7f8 ff98 	bl	800cf7c <ucdr_serialize_uint8_t>
 801404c:	7b71      	ldrb	r1, [r6, #13]
 801404e:	4007      	ands	r7, r0
 8014050:	4628      	mov	r0, r5
 8014052:	f7f8 ff65 	bl	800cf20 <ucdr_serialize_bool>
 8014056:	7b73      	ldrb	r3, [r6, #13]
 8014058:	ea07 0800 	and.w	r8, r7, r0
 801405c:	b93b      	cbnz	r3, 801406e <uxr_serialize_CLIENT_Representation+0x62>
 801405e:	8bb1      	ldrh	r1, [r6, #28]
 8014060:	4628      	mov	r0, r5
 8014062:	f7f8 ffb7 	bl	800cfd4 <ucdr_serialize_uint16_t>
 8014066:	ea08 0000 	and.w	r0, r8, r0
 801406a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801406e:	6931      	ldr	r1, [r6, #16]
 8014070:	4628      	mov	r0, r5
 8014072:	f7f9 f999 	bl	800d3a8 <ucdr_serialize_uint32_t>
 8014076:	6933      	ldr	r3, [r6, #16]
 8014078:	b1e3      	cbz	r3, 80140b4 <uxr_serialize_CLIENT_Representation+0xa8>
 801407a:	b1c0      	cbz	r0, 80140ae <uxr_serialize_CLIENT_Representation+0xa2>
 801407c:	4637      	mov	r7, r6
 801407e:	f04f 0900 	mov.w	r9, #0
 8014082:	e001      	b.n	8014088 <uxr_serialize_CLIENT_Representation+0x7c>
 8014084:	3708      	adds	r7, #8
 8014086:	b194      	cbz	r4, 80140ae <uxr_serialize_CLIENT_Representation+0xa2>
 8014088:	6979      	ldr	r1, [r7, #20]
 801408a:	4628      	mov	r0, r5
 801408c:	f005 fac8 	bl	8019620 <ucdr_serialize_string>
 8014090:	69b9      	ldr	r1, [r7, #24]
 8014092:	4604      	mov	r4, r0
 8014094:	4628      	mov	r0, r5
 8014096:	f005 fac3 	bl	8019620 <ucdr_serialize_string>
 801409a:	6933      	ldr	r3, [r6, #16]
 801409c:	f109 0901 	add.w	r9, r9, #1
 80140a0:	4004      	ands	r4, r0
 80140a2:	4599      	cmp	r9, r3
 80140a4:	b2e4      	uxtb	r4, r4
 80140a6:	d3ed      	bcc.n	8014084 <uxr_serialize_CLIENT_Representation+0x78>
 80140a8:	ea08 0804 	and.w	r8, r8, r4
 80140ac:	e7d7      	b.n	801405e <uxr_serialize_CLIENT_Representation+0x52>
 80140ae:	f04f 0800 	mov.w	r8, #0
 80140b2:	e7d4      	b.n	801405e <uxr_serialize_CLIENT_Representation+0x52>
 80140b4:	ea08 0800 	and.w	r8, r8, r0
 80140b8:	e7d1      	b.n	801405e <uxr_serialize_CLIENT_Representation+0x52>
 80140ba:	bf00      	nop

080140bc <uxr_deserialize_CLIENT_Representation>:
 80140bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80140c0:	2204      	movs	r2, #4
 80140c2:	460c      	mov	r4, r1
 80140c4:	4605      	mov	r5, r0
 80140c6:	f005 f99d 	bl	8019404 <ucdr_deserialize_array_uint8_t>
 80140ca:	2202      	movs	r2, #2
 80140cc:	4607      	mov	r7, r0
 80140ce:	1d21      	adds	r1, r4, #4
 80140d0:	4628      	mov	r0, r5
 80140d2:	f005 f997 	bl	8019404 <ucdr_deserialize_array_uint8_t>
 80140d6:	4038      	ands	r0, r7
 80140d8:	2202      	movs	r2, #2
 80140da:	1da1      	adds	r1, r4, #6
 80140dc:	b2c6      	uxtb	r6, r0
 80140de:	4628      	mov	r0, r5
 80140e0:	f005 f990 	bl	8019404 <ucdr_deserialize_array_uint8_t>
 80140e4:	2204      	movs	r2, #4
 80140e6:	4006      	ands	r6, r0
 80140e8:	f104 0108 	add.w	r1, r4, #8
 80140ec:	4628      	mov	r0, r5
 80140ee:	f005 f989 	bl	8019404 <ucdr_deserialize_array_uint8_t>
 80140f2:	f104 010c 	add.w	r1, r4, #12
 80140f6:	4006      	ands	r6, r0
 80140f8:	4628      	mov	r0, r5
 80140fa:	f7f8 ff55 	bl	800cfa8 <ucdr_deserialize_uint8_t>
 80140fe:	f104 010d 	add.w	r1, r4, #13
 8014102:	ea06 0700 	and.w	r7, r6, r0
 8014106:	4628      	mov	r0, r5
 8014108:	f7f8 ff20 	bl	800cf4c <ucdr_deserialize_bool>
 801410c:	7b63      	ldrb	r3, [r4, #13]
 801410e:	4007      	ands	r7, r0
 8014110:	b93b      	cbnz	r3, 8014122 <uxr_deserialize_CLIENT_Representation+0x66>
 8014112:	f104 011c 	add.w	r1, r4, #28
 8014116:	4628      	mov	r0, r5
 8014118:	f7f9 f85c 	bl	800d1d4 <ucdr_deserialize_uint16_t>
 801411c:	4038      	ands	r0, r7
 801411e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014122:	f104 0110 	add.w	r1, r4, #16
 8014126:	4628      	mov	r0, r5
 8014128:	f7f9 fa6e 	bl	800d608 <ucdr_deserialize_uint32_t>
 801412c:	6923      	ldr	r3, [r4, #16]
 801412e:	2b01      	cmp	r3, #1
 8014130:	d903      	bls.n	801413a <uxr_deserialize_CLIENT_Representation+0x7e>
 8014132:	2301      	movs	r3, #1
 8014134:	75ab      	strb	r3, [r5, #22]
 8014136:	2700      	movs	r7, #0
 8014138:	e7eb      	b.n	8014112 <uxr_deserialize_CLIENT_Representation+0x56>
 801413a:	b30b      	cbz	r3, 8014180 <uxr_deserialize_CLIENT_Representation+0xc4>
 801413c:	2800      	cmp	r0, #0
 801413e:	d0fa      	beq.n	8014136 <uxr_deserialize_CLIENT_Representation+0x7a>
 8014140:	46a0      	mov	r8, r4
 8014142:	f04f 0900 	mov.w	r9, #0
 8014146:	e001      	b.n	801414c <uxr_deserialize_CLIENT_Representation+0x90>
 8014148:	2e00      	cmp	r6, #0
 801414a:	d0f4      	beq.n	8014136 <uxr_deserialize_CLIENT_Representation+0x7a>
 801414c:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8014150:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8014154:	4628      	mov	r0, r5
 8014156:	f005 fa73 	bl	8019640 <ucdr_deserialize_string>
 801415a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801415e:	4606      	mov	r6, r0
 8014160:	f8d8 1018 	ldr.w	r1, [r8, #24]
 8014164:	4628      	mov	r0, r5
 8014166:	f005 fa6b 	bl	8019640 <ucdr_deserialize_string>
 801416a:	6923      	ldr	r3, [r4, #16]
 801416c:	f109 0901 	add.w	r9, r9, #1
 8014170:	4006      	ands	r6, r0
 8014172:	4599      	cmp	r9, r3
 8014174:	f108 0808 	add.w	r8, r8, #8
 8014178:	b2f6      	uxtb	r6, r6
 801417a:	d3e5      	bcc.n	8014148 <uxr_deserialize_CLIENT_Representation+0x8c>
 801417c:	4037      	ands	r7, r6
 801417e:	e7c8      	b.n	8014112 <uxr_deserialize_CLIENT_Representation+0x56>
 8014180:	4007      	ands	r7, r0
 8014182:	e7c6      	b.n	8014112 <uxr_deserialize_CLIENT_Representation+0x56>

08014184 <uxr_serialize_AGENT_Representation>:
 8014184:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014188:	2204      	movs	r2, #4
 801418a:	460f      	mov	r7, r1
 801418c:	4605      	mov	r5, r0
 801418e:	f005 f8d5 	bl	801933c <ucdr_serialize_array_uint8_t>
 8014192:	2202      	movs	r2, #2
 8014194:	4604      	mov	r4, r0
 8014196:	1d39      	adds	r1, r7, #4
 8014198:	4628      	mov	r0, r5
 801419a:	f005 f8cf 	bl	801933c <ucdr_serialize_array_uint8_t>
 801419e:	4020      	ands	r0, r4
 80141a0:	2202      	movs	r2, #2
 80141a2:	1db9      	adds	r1, r7, #6
 80141a4:	b2c4      	uxtb	r4, r0
 80141a6:	4628      	mov	r0, r5
 80141a8:	f005 f8c8 	bl	801933c <ucdr_serialize_array_uint8_t>
 80141ac:	7a39      	ldrb	r1, [r7, #8]
 80141ae:	4004      	ands	r4, r0
 80141b0:	4628      	mov	r0, r5
 80141b2:	f7f8 feb5 	bl	800cf20 <ucdr_serialize_bool>
 80141b6:	7a3b      	ldrb	r3, [r7, #8]
 80141b8:	ea00 0804 	and.w	r8, r0, r4
 80141bc:	b913      	cbnz	r3, 80141c4 <uxr_serialize_AGENT_Representation+0x40>
 80141be:	4640      	mov	r0, r8
 80141c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80141c4:	68f9      	ldr	r1, [r7, #12]
 80141c6:	4628      	mov	r0, r5
 80141c8:	f7f9 f8ee 	bl	800d3a8 <ucdr_serialize_uint32_t>
 80141cc:	68fb      	ldr	r3, [r7, #12]
 80141ce:	b303      	cbz	r3, 8014212 <uxr_serialize_AGENT_Representation+0x8e>
 80141d0:	b1d0      	cbz	r0, 8014208 <uxr_serialize_AGENT_Representation+0x84>
 80141d2:	463e      	mov	r6, r7
 80141d4:	f04f 0900 	mov.w	r9, #0
 80141d8:	e001      	b.n	80141de <uxr_serialize_AGENT_Representation+0x5a>
 80141da:	3608      	adds	r6, #8
 80141dc:	b1a4      	cbz	r4, 8014208 <uxr_serialize_AGENT_Representation+0x84>
 80141de:	6931      	ldr	r1, [r6, #16]
 80141e0:	4628      	mov	r0, r5
 80141e2:	f005 fa1d 	bl	8019620 <ucdr_serialize_string>
 80141e6:	6971      	ldr	r1, [r6, #20]
 80141e8:	4604      	mov	r4, r0
 80141ea:	4628      	mov	r0, r5
 80141ec:	f005 fa18 	bl	8019620 <ucdr_serialize_string>
 80141f0:	68fb      	ldr	r3, [r7, #12]
 80141f2:	f109 0901 	add.w	r9, r9, #1
 80141f6:	4004      	ands	r4, r0
 80141f8:	4599      	cmp	r9, r3
 80141fa:	b2e4      	uxtb	r4, r4
 80141fc:	d3ed      	bcc.n	80141da <uxr_serialize_AGENT_Representation+0x56>
 80141fe:	ea08 0804 	and.w	r8, r8, r4
 8014202:	4640      	mov	r0, r8
 8014204:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014208:	f04f 0800 	mov.w	r8, #0
 801420c:	4640      	mov	r0, r8
 801420e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014212:	ea08 0800 	and.w	r8, r8, r0
 8014216:	e7d2      	b.n	80141be <uxr_serialize_AGENT_Representation+0x3a>

08014218 <uxr_serialize_DATAWRITER_Representation>:
 8014218:	b570      	push	{r4, r5, r6, lr}
 801421a:	460d      	mov	r5, r1
 801421c:	7809      	ldrb	r1, [r1, #0]
 801421e:	4606      	mov	r6, r0
 8014220:	f7f8 feac 	bl	800cf7c <ucdr_serialize_uint8_t>
 8014224:	4604      	mov	r4, r0
 8014226:	b130      	cbz	r0, 8014236 <uxr_serialize_DATAWRITER_Representation+0x1e>
 8014228:	782b      	ldrb	r3, [r5, #0]
 801422a:	2b02      	cmp	r3, #2
 801422c:	d00c      	beq.n	8014248 <uxr_serialize_DATAWRITER_Representation+0x30>
 801422e:	2b03      	cmp	r3, #3
 8014230:	d010      	beq.n	8014254 <uxr_serialize_DATAWRITER_Representation+0x3c>
 8014232:	2b01      	cmp	r3, #1
 8014234:	d008      	beq.n	8014248 <uxr_serialize_DATAWRITER_Representation+0x30>
 8014236:	2202      	movs	r2, #2
 8014238:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 801423c:	4630      	mov	r0, r6
 801423e:	f005 f87d 	bl	801933c <ucdr_serialize_array_uint8_t>
 8014242:	4020      	ands	r0, r4
 8014244:	b2c0      	uxtb	r0, r0
 8014246:	bd70      	pop	{r4, r5, r6, pc}
 8014248:	6869      	ldr	r1, [r5, #4]
 801424a:	4630      	mov	r0, r6
 801424c:	f005 f9e8 	bl	8019620 <ucdr_serialize_string>
 8014250:	4604      	mov	r4, r0
 8014252:	e7f0      	b.n	8014236 <uxr_serialize_DATAWRITER_Representation+0x1e>
 8014254:	4629      	mov	r1, r5
 8014256:	4630      	mov	r0, r6
 8014258:	f851 2f04 	ldr.w	r2, [r1, #4]!
 801425c:	3104      	adds	r1, #4
 801425e:	f7fd f947 	bl	80114f0 <ucdr_serialize_sequence_uint8_t>
 8014262:	4604      	mov	r4, r0
 8014264:	e7e7      	b.n	8014236 <uxr_serialize_DATAWRITER_Representation+0x1e>
 8014266:	bf00      	nop

08014268 <uxr_serialize_ObjectVariant.part.0>:
 8014268:	b570      	push	{r4, r5, r6, lr}
 801426a:	780b      	ldrb	r3, [r1, #0]
 801426c:	3b01      	subs	r3, #1
 801426e:	460c      	mov	r4, r1
 8014270:	4605      	mov	r5, r0
 8014272:	2b0d      	cmp	r3, #13
 8014274:	d854      	bhi.n	8014320 <uxr_serialize_ObjectVariant.part.0+0xb8>
 8014276:	e8df f003 	tbb	[pc, r3]
 801427a:	0730      	.short	0x0730
 801427c:	07071b1b 	.word	0x07071b1b
 8014280:	0c530707 	.word	0x0c530707
 8014284:	494e0c0c 	.word	0x494e0c0c
 8014288:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801428c:	3104      	adds	r1, #4
 801428e:	f7ff bfc3 	b.w	8014218 <uxr_serialize_DATAWRITER_Representation>
 8014292:	7909      	ldrb	r1, [r1, #4]
 8014294:	f7f8 fe72 	bl	800cf7c <ucdr_serialize_uint8_t>
 8014298:	b1e8      	cbz	r0, 80142d6 <uxr_serialize_ObjectVariant.part.0+0x6e>
 801429a:	7923      	ldrb	r3, [r4, #4]
 801429c:	2b01      	cmp	r3, #1
 801429e:	d001      	beq.n	80142a4 <uxr_serialize_ObjectVariant.part.0+0x3c>
 80142a0:	2b02      	cmp	r3, #2
 80142a2:	d13d      	bne.n	8014320 <uxr_serialize_ObjectVariant.part.0+0xb8>
 80142a4:	68a1      	ldr	r1, [r4, #8]
 80142a6:	4628      	mov	r0, r5
 80142a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80142ac:	f005 b9b8 	b.w	8019620 <ucdr_serialize_string>
 80142b0:	7909      	ldrb	r1, [r1, #4]
 80142b2:	f7f8 fe63 	bl	800cf7c <ucdr_serialize_uint8_t>
 80142b6:	4606      	mov	r6, r0
 80142b8:	b120      	cbz	r0, 80142c4 <uxr_serialize_ObjectVariant.part.0+0x5c>
 80142ba:	7923      	ldrb	r3, [r4, #4]
 80142bc:	2b02      	cmp	r3, #2
 80142be:	d039      	beq.n	8014334 <uxr_serialize_ObjectVariant.part.0+0xcc>
 80142c0:	2b03      	cmp	r3, #3
 80142c2:	d02f      	beq.n	8014324 <uxr_serialize_ObjectVariant.part.0+0xbc>
 80142c4:	2202      	movs	r2, #2
 80142c6:	f504 7103 	add.w	r1, r4, #524	@ 0x20c
 80142ca:	4628      	mov	r0, r5
 80142cc:	f005 f836 	bl	801933c <ucdr_serialize_array_uint8_t>
 80142d0:	4030      	ands	r0, r6
 80142d2:	b2c0      	uxtb	r0, r0
 80142d4:	bd70      	pop	{r4, r5, r6, pc}
 80142d6:	2000      	movs	r0, #0
 80142d8:	bd70      	pop	{r4, r5, r6, pc}
 80142da:	7909      	ldrb	r1, [r1, #4]
 80142dc:	f7f8 fe4e 	bl	800cf7c <ucdr_serialize_uint8_t>
 80142e0:	4606      	mov	r6, r0
 80142e2:	b158      	cbz	r0, 80142fc <uxr_serialize_ObjectVariant.part.0+0x94>
 80142e4:	7923      	ldrb	r3, [r4, #4]
 80142e6:	2b02      	cmp	r3, #2
 80142e8:	d003      	beq.n	80142f2 <uxr_serialize_ObjectVariant.part.0+0x8a>
 80142ea:	2b03      	cmp	r3, #3
 80142ec:	d028      	beq.n	8014340 <uxr_serialize_ObjectVariant.part.0+0xd8>
 80142ee:	2b01      	cmp	r3, #1
 80142f0:	d104      	bne.n	80142fc <uxr_serialize_ObjectVariant.part.0+0x94>
 80142f2:	68a1      	ldr	r1, [r4, #8]
 80142f4:	4628      	mov	r0, r5
 80142f6:	f005 f993 	bl	8019620 <ucdr_serialize_string>
 80142fa:	4606      	mov	r6, r0
 80142fc:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	@ 0x20c
 8014300:	4628      	mov	r0, r5
 8014302:	f7f9 fb77 	bl	800d9f4 <ucdr_serialize_int16_t>
 8014306:	4030      	ands	r0, r6
 8014308:	b2c0      	uxtb	r0, r0
 801430a:	bd70      	pop	{r4, r5, r6, pc}
 801430c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014310:	3104      	adds	r1, #4
 8014312:	f7ff be7b 	b.w	801400c <uxr_serialize_CLIENT_Representation>
 8014316:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801431a:	3104      	adds	r1, #4
 801431c:	f7ff bf32 	b.w	8014184 <uxr_serialize_AGENT_Representation>
 8014320:	2001      	movs	r0, #1
 8014322:	bd70      	pop	{r4, r5, r6, pc}
 8014324:	68a2      	ldr	r2, [r4, #8]
 8014326:	f104 010c 	add.w	r1, r4, #12
 801432a:	4628      	mov	r0, r5
 801432c:	f7fd f8e0 	bl	80114f0 <ucdr_serialize_sequence_uint8_t>
 8014330:	4606      	mov	r6, r0
 8014332:	e7c7      	b.n	80142c4 <uxr_serialize_ObjectVariant.part.0+0x5c>
 8014334:	68a1      	ldr	r1, [r4, #8]
 8014336:	4628      	mov	r0, r5
 8014338:	f005 f972 	bl	8019620 <ucdr_serialize_string>
 801433c:	4606      	mov	r6, r0
 801433e:	e7c1      	b.n	80142c4 <uxr_serialize_ObjectVariant.part.0+0x5c>
 8014340:	68a2      	ldr	r2, [r4, #8]
 8014342:	f104 010c 	add.w	r1, r4, #12
 8014346:	4628      	mov	r0, r5
 8014348:	f7fd f8d2 	bl	80114f0 <ucdr_serialize_sequence_uint8_t>
 801434c:	4606      	mov	r6, r0
 801434e:	e7d5      	b.n	80142fc <uxr_serialize_ObjectVariant.part.0+0x94>

08014350 <uxr_deserialize_DATAWRITER_Representation>:
 8014350:	b570      	push	{r4, r5, r6, lr}
 8014352:	4606      	mov	r6, r0
 8014354:	460d      	mov	r5, r1
 8014356:	f7f8 fe27 	bl	800cfa8 <ucdr_deserialize_uint8_t>
 801435a:	4604      	mov	r4, r0
 801435c:	b130      	cbz	r0, 801436c <uxr_deserialize_DATAWRITER_Representation+0x1c>
 801435e:	782b      	ldrb	r3, [r5, #0]
 8014360:	2b02      	cmp	r3, #2
 8014362:	d00c      	beq.n	801437e <uxr_deserialize_DATAWRITER_Representation+0x2e>
 8014364:	2b03      	cmp	r3, #3
 8014366:	d012      	beq.n	801438e <uxr_deserialize_DATAWRITER_Representation+0x3e>
 8014368:	2b01      	cmp	r3, #1
 801436a:	d008      	beq.n	801437e <uxr_deserialize_DATAWRITER_Representation+0x2e>
 801436c:	2202      	movs	r2, #2
 801436e:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 8014372:	4630      	mov	r0, r6
 8014374:	f005 f846 	bl	8019404 <ucdr_deserialize_array_uint8_t>
 8014378:	4020      	ands	r0, r4
 801437a:	b2c0      	uxtb	r0, r0
 801437c:	bd70      	pop	{r4, r5, r6, pc}
 801437e:	6869      	ldr	r1, [r5, #4]
 8014380:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8014384:	4630      	mov	r0, r6
 8014386:	f005 f95b 	bl	8019640 <ucdr_deserialize_string>
 801438a:	4604      	mov	r4, r0
 801438c:	e7ee      	b.n	801436c <uxr_deserialize_DATAWRITER_Representation+0x1c>
 801438e:	1d2b      	adds	r3, r5, #4
 8014390:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8014394:	f105 0108 	add.w	r1, r5, #8
 8014398:	4630      	mov	r0, r6
 801439a:	f7fd f8bb 	bl	8011514 <ucdr_deserialize_sequence_uint8_t>
 801439e:	4604      	mov	r4, r0
 80143a0:	e7e4      	b.n	801436c <uxr_deserialize_DATAWRITER_Representation+0x1c>
 80143a2:	bf00      	nop

080143a4 <uxr_serialize_OBJK_DomainParticipant_Binary>:
 80143a4:	b570      	push	{r4, r5, r6, lr}
 80143a6:	460d      	mov	r5, r1
 80143a8:	7809      	ldrb	r1, [r1, #0]
 80143aa:	4606      	mov	r6, r0
 80143ac:	f7f8 fdb8 	bl	800cf20 <ucdr_serialize_bool>
 80143b0:	782b      	ldrb	r3, [r5, #0]
 80143b2:	4604      	mov	r4, r0
 80143b4:	b94b      	cbnz	r3, 80143ca <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 80143b6:	7a29      	ldrb	r1, [r5, #8]
 80143b8:	4630      	mov	r0, r6
 80143ba:	f7f8 fdb1 	bl	800cf20 <ucdr_serialize_bool>
 80143be:	7a2b      	ldrb	r3, [r5, #8]
 80143c0:	4004      	ands	r4, r0
 80143c2:	b2e4      	uxtb	r4, r4
 80143c4:	b943      	cbnz	r3, 80143d8 <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 80143c6:	4620      	mov	r0, r4
 80143c8:	bd70      	pop	{r4, r5, r6, pc}
 80143ca:	6869      	ldr	r1, [r5, #4]
 80143cc:	4630      	mov	r0, r6
 80143ce:	f005 f927 	bl	8019620 <ucdr_serialize_string>
 80143d2:	4004      	ands	r4, r0
 80143d4:	b2e4      	uxtb	r4, r4
 80143d6:	e7ee      	b.n	80143b6 <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 80143d8:	68e9      	ldr	r1, [r5, #12]
 80143da:	4630      	mov	r0, r6
 80143dc:	f005 f920 	bl	8019620 <ucdr_serialize_string>
 80143e0:	4004      	ands	r4, r0
 80143e2:	4620      	mov	r0, r4
 80143e4:	bd70      	pop	{r4, r5, r6, pc}
 80143e6:	bf00      	nop

080143e8 <uxr_serialize_OBJK_Topic_Binary>:
 80143e8:	b570      	push	{r4, r5, r6, lr}
 80143ea:	460d      	mov	r5, r1
 80143ec:	6809      	ldr	r1, [r1, #0]
 80143ee:	4606      	mov	r6, r0
 80143f0:	f005 f916 	bl	8019620 <ucdr_serialize_string>
 80143f4:	7929      	ldrb	r1, [r5, #4]
 80143f6:	4604      	mov	r4, r0
 80143f8:	4630      	mov	r0, r6
 80143fa:	f7f8 fd91 	bl	800cf20 <ucdr_serialize_bool>
 80143fe:	792b      	ldrb	r3, [r5, #4]
 8014400:	4004      	ands	r4, r0
 8014402:	b2e4      	uxtb	r4, r4
 8014404:	b943      	cbnz	r3, 8014418 <uxr_serialize_OBJK_Topic_Binary+0x30>
 8014406:	7b29      	ldrb	r1, [r5, #12]
 8014408:	4630      	mov	r0, r6
 801440a:	f7f8 fd89 	bl	800cf20 <ucdr_serialize_bool>
 801440e:	7b2b      	ldrb	r3, [r5, #12]
 8014410:	4004      	ands	r4, r0
 8014412:	b93b      	cbnz	r3, 8014424 <uxr_serialize_OBJK_Topic_Binary+0x3c>
 8014414:	4620      	mov	r0, r4
 8014416:	bd70      	pop	{r4, r5, r6, pc}
 8014418:	68a9      	ldr	r1, [r5, #8]
 801441a:	4630      	mov	r0, r6
 801441c:	f005 f900 	bl	8019620 <ucdr_serialize_string>
 8014420:	4004      	ands	r4, r0
 8014422:	e7f0      	b.n	8014406 <uxr_serialize_OBJK_Topic_Binary+0x1e>
 8014424:	6929      	ldr	r1, [r5, #16]
 8014426:	4630      	mov	r0, r6
 8014428:	f005 f8fa 	bl	8019620 <ucdr_serialize_string>
 801442c:	4004      	ands	r4, r0
 801442e:	b2e4      	uxtb	r4, r4
 8014430:	4620      	mov	r0, r4
 8014432:	bd70      	pop	{r4, r5, r6, pc}

08014434 <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 8014434:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014438:	460c      	mov	r4, r1
 801443a:	7809      	ldrb	r1, [r1, #0]
 801443c:	4606      	mov	r6, r0
 801443e:	f7f8 fd6f 	bl	800cf20 <ucdr_serialize_bool>
 8014442:	7823      	ldrb	r3, [r4, #0]
 8014444:	4605      	mov	r5, r0
 8014446:	b96b      	cbnz	r3, 8014464 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 8014448:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 801444c:	4630      	mov	r0, r6
 801444e:	f7f8 fd67 	bl	800cf20 <ucdr_serialize_bool>
 8014452:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8014456:	4005      	ands	r5, r0
 8014458:	b2ed      	uxtb	r5, r5
 801445a:	2b00      	cmp	r3, #0
 801445c:	d169      	bne.n	8014532 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xfe>
 801445e:	4628      	mov	r0, r5
 8014460:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014464:	6861      	ldr	r1, [r4, #4]
 8014466:	4630      	mov	r0, r6
 8014468:	f7f8 ff9e 	bl	800d3a8 <ucdr_serialize_uint32_t>
 801446c:	6863      	ldr	r3, [r4, #4]
 801446e:	2b00      	cmp	r3, #0
 8014470:	d06b      	beq.n	801454a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x116>
 8014472:	2800      	cmp	r0, #0
 8014474:	d067      	beq.n	8014546 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8014476:	68a1      	ldr	r1, [r4, #8]
 8014478:	4630      	mov	r0, r6
 801447a:	f005 f8d1 	bl	8019620 <ucdr_serialize_string>
 801447e:	6863      	ldr	r3, [r4, #4]
 8014480:	2b01      	cmp	r3, #1
 8014482:	d953      	bls.n	801452c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8014484:	2800      	cmp	r0, #0
 8014486:	d05e      	beq.n	8014546 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8014488:	68e1      	ldr	r1, [r4, #12]
 801448a:	4630      	mov	r0, r6
 801448c:	f005 f8c8 	bl	8019620 <ucdr_serialize_string>
 8014490:	6863      	ldr	r3, [r4, #4]
 8014492:	2b02      	cmp	r3, #2
 8014494:	d94a      	bls.n	801452c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8014496:	2800      	cmp	r0, #0
 8014498:	d055      	beq.n	8014546 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801449a:	6921      	ldr	r1, [r4, #16]
 801449c:	4630      	mov	r0, r6
 801449e:	f005 f8bf 	bl	8019620 <ucdr_serialize_string>
 80144a2:	6863      	ldr	r3, [r4, #4]
 80144a4:	2b03      	cmp	r3, #3
 80144a6:	d941      	bls.n	801452c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80144a8:	2800      	cmp	r0, #0
 80144aa:	d04c      	beq.n	8014546 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80144ac:	6961      	ldr	r1, [r4, #20]
 80144ae:	4630      	mov	r0, r6
 80144b0:	f005 f8b6 	bl	8019620 <ucdr_serialize_string>
 80144b4:	6863      	ldr	r3, [r4, #4]
 80144b6:	2b04      	cmp	r3, #4
 80144b8:	d938      	bls.n	801452c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80144ba:	2800      	cmp	r0, #0
 80144bc:	d043      	beq.n	8014546 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80144be:	69a1      	ldr	r1, [r4, #24]
 80144c0:	4630      	mov	r0, r6
 80144c2:	f005 f8ad 	bl	8019620 <ucdr_serialize_string>
 80144c6:	6863      	ldr	r3, [r4, #4]
 80144c8:	2b05      	cmp	r3, #5
 80144ca:	d92f      	bls.n	801452c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80144cc:	2800      	cmp	r0, #0
 80144ce:	d03a      	beq.n	8014546 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80144d0:	69e1      	ldr	r1, [r4, #28]
 80144d2:	4630      	mov	r0, r6
 80144d4:	f005 f8a4 	bl	8019620 <ucdr_serialize_string>
 80144d8:	6863      	ldr	r3, [r4, #4]
 80144da:	2b06      	cmp	r3, #6
 80144dc:	d926      	bls.n	801452c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80144de:	b390      	cbz	r0, 8014546 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80144e0:	6a21      	ldr	r1, [r4, #32]
 80144e2:	4630      	mov	r0, r6
 80144e4:	f005 f89c 	bl	8019620 <ucdr_serialize_string>
 80144e8:	6863      	ldr	r3, [r4, #4]
 80144ea:	2b07      	cmp	r3, #7
 80144ec:	d91e      	bls.n	801452c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80144ee:	b350      	cbz	r0, 8014546 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80144f0:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80144f2:	4630      	mov	r0, r6
 80144f4:	f005 f894 	bl	8019620 <ucdr_serialize_string>
 80144f8:	6863      	ldr	r3, [r4, #4]
 80144fa:	2b08      	cmp	r3, #8
 80144fc:	d916      	bls.n	801452c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80144fe:	b310      	cbz	r0, 8014546 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8014500:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8014502:	4630      	mov	r0, r6
 8014504:	f005 f88c 	bl	8019620 <ucdr_serialize_string>
 8014508:	6863      	ldr	r3, [r4, #4]
 801450a:	2b09      	cmp	r3, #9
 801450c:	d90e      	bls.n	801452c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801450e:	b1d0      	cbz	r0, 8014546 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8014510:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 8014514:	2709      	movs	r7, #9
 8014516:	e000      	b.n	801451a <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 8014518:	b1a8      	cbz	r0, 8014546 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801451a:	f858 1b04 	ldr.w	r1, [r8], #4
 801451e:	4630      	mov	r0, r6
 8014520:	f005 f87e 	bl	8019620 <ucdr_serialize_string>
 8014524:	6862      	ldr	r2, [r4, #4]
 8014526:	3701      	adds	r7, #1
 8014528:	4297      	cmp	r7, r2
 801452a:	d3f5      	bcc.n	8014518 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 801452c:	4005      	ands	r5, r0
 801452e:	b2ed      	uxtb	r5, r5
 8014530:	e78a      	b.n	8014448 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 8014532:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8014534:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8014538:	4630      	mov	r0, r6
 801453a:	f7fc ffd9 	bl	80114f0 <ucdr_serialize_sequence_uint8_t>
 801453e:	4005      	ands	r5, r0
 8014540:	4628      	mov	r0, r5
 8014542:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014546:	2500      	movs	r5, #0
 8014548:	e77e      	b.n	8014448 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 801454a:	4028      	ands	r0, r5
 801454c:	b2c5      	uxtb	r5, r0
 801454e:	e77b      	b.n	8014448 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>

08014550 <uxr_serialize_OBJK_Publisher_Binary>:
 8014550:	b570      	push	{r4, r5, r6, lr}
 8014552:	460d      	mov	r5, r1
 8014554:	7809      	ldrb	r1, [r1, #0]
 8014556:	4606      	mov	r6, r0
 8014558:	f7f8 fce2 	bl	800cf20 <ucdr_serialize_bool>
 801455c:	782b      	ldrb	r3, [r5, #0]
 801455e:	4604      	mov	r4, r0
 8014560:	b94b      	cbnz	r3, 8014576 <uxr_serialize_OBJK_Publisher_Binary+0x26>
 8014562:	7a29      	ldrb	r1, [r5, #8]
 8014564:	4630      	mov	r0, r6
 8014566:	f7f8 fcdb 	bl	800cf20 <ucdr_serialize_bool>
 801456a:	7a2b      	ldrb	r3, [r5, #8]
 801456c:	4004      	ands	r4, r0
 801456e:	b2e4      	uxtb	r4, r4
 8014570:	b943      	cbnz	r3, 8014584 <uxr_serialize_OBJK_Publisher_Binary+0x34>
 8014572:	4620      	mov	r0, r4
 8014574:	bd70      	pop	{r4, r5, r6, pc}
 8014576:	6869      	ldr	r1, [r5, #4]
 8014578:	4630      	mov	r0, r6
 801457a:	f005 f851 	bl	8019620 <ucdr_serialize_string>
 801457e:	4004      	ands	r4, r0
 8014580:	b2e4      	uxtb	r4, r4
 8014582:	e7ee      	b.n	8014562 <uxr_serialize_OBJK_Publisher_Binary+0x12>
 8014584:	f105 010c 	add.w	r1, r5, #12
 8014588:	4630      	mov	r0, r6
 801458a:	f7ff ff53 	bl	8014434 <uxr_serialize_OBJK_Publisher_Binary_Qos>
 801458e:	4004      	ands	r4, r0
 8014590:	4620      	mov	r0, r4
 8014592:	bd70      	pop	{r4, r5, r6, pc}

08014594 <uxr_serialize_OBJK_Subscriber_Binary_Qos>:
 8014594:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014598:	460c      	mov	r4, r1
 801459a:	7809      	ldrb	r1, [r1, #0]
 801459c:	4606      	mov	r6, r0
 801459e:	f7f8 fcbf 	bl	800cf20 <ucdr_serialize_bool>
 80145a2:	7823      	ldrb	r3, [r4, #0]
 80145a4:	4605      	mov	r5, r0
 80145a6:	b96b      	cbnz	r3, 80145c4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x30>
 80145a8:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 80145ac:	4630      	mov	r0, r6
 80145ae:	f7f8 fcb7 	bl	800cf20 <ucdr_serialize_bool>
 80145b2:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 80145b6:	4005      	ands	r5, r0
 80145b8:	b2ed      	uxtb	r5, r5
 80145ba:	2b00      	cmp	r3, #0
 80145bc:	d169      	bne.n	8014692 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xfe>
 80145be:	4628      	mov	r0, r5
 80145c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80145c4:	6861      	ldr	r1, [r4, #4]
 80145c6:	4630      	mov	r0, r6
 80145c8:	f7f8 feee 	bl	800d3a8 <ucdr_serialize_uint32_t>
 80145cc:	6863      	ldr	r3, [r4, #4]
 80145ce:	2b00      	cmp	r3, #0
 80145d0:	d06b      	beq.n	80146aa <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x116>
 80145d2:	2800      	cmp	r0, #0
 80145d4:	d067      	beq.n	80146a6 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 80145d6:	68a1      	ldr	r1, [r4, #8]
 80145d8:	4630      	mov	r0, r6
 80145da:	f005 f821 	bl	8019620 <ucdr_serialize_string>
 80145de:	6863      	ldr	r3, [r4, #4]
 80145e0:	2b01      	cmp	r3, #1
 80145e2:	d953      	bls.n	801468c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80145e4:	2800      	cmp	r0, #0
 80145e6:	d05e      	beq.n	80146a6 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 80145e8:	68e1      	ldr	r1, [r4, #12]
 80145ea:	4630      	mov	r0, r6
 80145ec:	f005 f818 	bl	8019620 <ucdr_serialize_string>
 80145f0:	6863      	ldr	r3, [r4, #4]
 80145f2:	2b02      	cmp	r3, #2
 80145f4:	d94a      	bls.n	801468c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80145f6:	2800      	cmp	r0, #0
 80145f8:	d055      	beq.n	80146a6 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 80145fa:	6921      	ldr	r1, [r4, #16]
 80145fc:	4630      	mov	r0, r6
 80145fe:	f005 f80f 	bl	8019620 <ucdr_serialize_string>
 8014602:	6863      	ldr	r3, [r4, #4]
 8014604:	2b03      	cmp	r3, #3
 8014606:	d941      	bls.n	801468c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8014608:	2800      	cmp	r0, #0
 801460a:	d04c      	beq.n	80146a6 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801460c:	6961      	ldr	r1, [r4, #20]
 801460e:	4630      	mov	r0, r6
 8014610:	f005 f806 	bl	8019620 <ucdr_serialize_string>
 8014614:	6863      	ldr	r3, [r4, #4]
 8014616:	2b04      	cmp	r3, #4
 8014618:	d938      	bls.n	801468c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801461a:	2800      	cmp	r0, #0
 801461c:	d043      	beq.n	80146a6 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801461e:	69a1      	ldr	r1, [r4, #24]
 8014620:	4630      	mov	r0, r6
 8014622:	f004 fffd 	bl	8019620 <ucdr_serialize_string>
 8014626:	6863      	ldr	r3, [r4, #4]
 8014628:	2b05      	cmp	r3, #5
 801462a:	d92f      	bls.n	801468c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801462c:	2800      	cmp	r0, #0
 801462e:	d03a      	beq.n	80146a6 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8014630:	69e1      	ldr	r1, [r4, #28]
 8014632:	4630      	mov	r0, r6
 8014634:	f004 fff4 	bl	8019620 <ucdr_serialize_string>
 8014638:	6863      	ldr	r3, [r4, #4]
 801463a:	2b06      	cmp	r3, #6
 801463c:	d926      	bls.n	801468c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801463e:	b390      	cbz	r0, 80146a6 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8014640:	6a21      	ldr	r1, [r4, #32]
 8014642:	4630      	mov	r0, r6
 8014644:	f004 ffec 	bl	8019620 <ucdr_serialize_string>
 8014648:	6863      	ldr	r3, [r4, #4]
 801464a:	2b07      	cmp	r3, #7
 801464c:	d91e      	bls.n	801468c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801464e:	b350      	cbz	r0, 80146a6 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8014650:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8014652:	4630      	mov	r0, r6
 8014654:	f004 ffe4 	bl	8019620 <ucdr_serialize_string>
 8014658:	6863      	ldr	r3, [r4, #4]
 801465a:	2b08      	cmp	r3, #8
 801465c:	d916      	bls.n	801468c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801465e:	b310      	cbz	r0, 80146a6 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8014660:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8014662:	4630      	mov	r0, r6
 8014664:	f004 ffdc 	bl	8019620 <ucdr_serialize_string>
 8014668:	6863      	ldr	r3, [r4, #4]
 801466a:	2b09      	cmp	r3, #9
 801466c:	d90e      	bls.n	801468c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801466e:	b1d0      	cbz	r0, 80146a6 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8014670:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 8014674:	2709      	movs	r7, #9
 8014676:	e000      	b.n	801467a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe6>
 8014678:	b1a8      	cbz	r0, 80146a6 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801467a:	f858 1b04 	ldr.w	r1, [r8], #4
 801467e:	4630      	mov	r0, r6
 8014680:	f004 ffce 	bl	8019620 <ucdr_serialize_string>
 8014684:	6862      	ldr	r2, [r4, #4]
 8014686:	3701      	adds	r7, #1
 8014688:	4297      	cmp	r7, r2
 801468a:	d3f5      	bcc.n	8014678 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe4>
 801468c:	4005      	ands	r5, r0
 801468e:	b2ed      	uxtb	r5, r5
 8014690:	e78a      	b.n	80145a8 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 8014692:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8014694:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8014698:	4630      	mov	r0, r6
 801469a:	f7fc ff29 	bl	80114f0 <ucdr_serialize_sequence_uint8_t>
 801469e:	4005      	ands	r5, r0
 80146a0:	4628      	mov	r0, r5
 80146a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80146a6:	2500      	movs	r5, #0
 80146a8:	e77e      	b.n	80145a8 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 80146aa:	4028      	ands	r0, r5
 80146ac:	b2c5      	uxtb	r5, r0
 80146ae:	e77b      	b.n	80145a8 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>

080146b0 <uxr_serialize_OBJK_Subscriber_Binary>:
 80146b0:	b570      	push	{r4, r5, r6, lr}
 80146b2:	460d      	mov	r5, r1
 80146b4:	7809      	ldrb	r1, [r1, #0]
 80146b6:	4606      	mov	r6, r0
 80146b8:	f7f8 fc32 	bl	800cf20 <ucdr_serialize_bool>
 80146bc:	782b      	ldrb	r3, [r5, #0]
 80146be:	4604      	mov	r4, r0
 80146c0:	b94b      	cbnz	r3, 80146d6 <uxr_serialize_OBJK_Subscriber_Binary+0x26>
 80146c2:	7a29      	ldrb	r1, [r5, #8]
 80146c4:	4630      	mov	r0, r6
 80146c6:	f7f8 fc2b 	bl	800cf20 <ucdr_serialize_bool>
 80146ca:	7a2b      	ldrb	r3, [r5, #8]
 80146cc:	4004      	ands	r4, r0
 80146ce:	b2e4      	uxtb	r4, r4
 80146d0:	b943      	cbnz	r3, 80146e4 <uxr_serialize_OBJK_Subscriber_Binary+0x34>
 80146d2:	4620      	mov	r0, r4
 80146d4:	bd70      	pop	{r4, r5, r6, pc}
 80146d6:	6869      	ldr	r1, [r5, #4]
 80146d8:	4630      	mov	r0, r6
 80146da:	f004 ffa1 	bl	8019620 <ucdr_serialize_string>
 80146de:	4004      	ands	r4, r0
 80146e0:	b2e4      	uxtb	r4, r4
 80146e2:	e7ee      	b.n	80146c2 <uxr_serialize_OBJK_Subscriber_Binary+0x12>
 80146e4:	f105 010c 	add.w	r1, r5, #12
 80146e8:	4630      	mov	r0, r6
 80146ea:	f7ff ff53 	bl	8014594 <uxr_serialize_OBJK_Subscriber_Binary_Qos>
 80146ee:	4004      	ands	r4, r0
 80146f0:	4620      	mov	r0, r4
 80146f2:	bd70      	pop	{r4, r5, r6, pc}

080146f4 <uxr_serialize_OBJK_Endpoint_QosBinary>:
 80146f4:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 80146f8:	4688      	mov	r8, r1
 80146fa:	8809      	ldrh	r1, [r1, #0]
 80146fc:	4681      	mov	r9, r0
 80146fe:	f7f8 fc69 	bl	800cfd4 <ucdr_serialize_uint16_t>
 8014702:	f898 1002 	ldrb.w	r1, [r8, #2]
 8014706:	4606      	mov	r6, r0
 8014708:	4648      	mov	r0, r9
 801470a:	f7f8 fc09 	bl	800cf20 <ucdr_serialize_bool>
 801470e:	f898 3002 	ldrb.w	r3, [r8, #2]
 8014712:	4006      	ands	r6, r0
 8014714:	b2f5      	uxtb	r5, r6
 8014716:	b9eb      	cbnz	r3, 8014754 <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 8014718:	f898 1006 	ldrb.w	r1, [r8, #6]
 801471c:	4648      	mov	r0, r9
 801471e:	f7f8 fbff 	bl	800cf20 <ucdr_serialize_bool>
 8014722:	f898 3006 	ldrb.w	r3, [r8, #6]
 8014726:	4005      	ands	r5, r0
 8014728:	bb7b      	cbnz	r3, 801478a <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 801472a:	f898 100c 	ldrb.w	r1, [r8, #12]
 801472e:	4648      	mov	r0, r9
 8014730:	f7f8 fbf6 	bl	800cf20 <ucdr_serialize_bool>
 8014734:	f898 300c 	ldrb.w	r3, [r8, #12]
 8014738:	4005      	ands	r5, r0
 801473a:	b9f3      	cbnz	r3, 801477a <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 801473c:	f898 1014 	ldrb.w	r1, [r8, #20]
 8014740:	4648      	mov	r0, r9
 8014742:	f7f8 fbed 	bl	800cf20 <ucdr_serialize_bool>
 8014746:	f898 3014 	ldrb.w	r3, [r8, #20]
 801474a:	4005      	ands	r5, r0
 801474c:	b94b      	cbnz	r3, 8014762 <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 801474e:	4628      	mov	r0, r5
 8014750:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 8014754:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 8014758:	4648      	mov	r0, r9
 801475a:	f7f8 fc3b 	bl	800cfd4 <ucdr_serialize_uint16_t>
 801475e:	4005      	ands	r5, r0
 8014760:	e7da      	b.n	8014718 <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 8014762:	f8d8 2018 	ldr.w	r2, [r8, #24]
 8014766:	f108 011c 	add.w	r1, r8, #28
 801476a:	4648      	mov	r0, r9
 801476c:	f7fc fec0 	bl	80114f0 <ucdr_serialize_sequence_uint8_t>
 8014770:	4028      	ands	r0, r5
 8014772:	b2c5      	uxtb	r5, r0
 8014774:	4628      	mov	r0, r5
 8014776:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 801477a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801477e:	4648      	mov	r0, r9
 8014780:	f7f8 fe12 	bl	800d3a8 <ucdr_serialize_uint32_t>
 8014784:	4028      	ands	r0, r5
 8014786:	b2c5      	uxtb	r5, r0
 8014788:	e7d8      	b.n	801473c <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 801478a:	f8d8 1008 	ldr.w	r1, [r8, #8]
 801478e:	4648      	mov	r0, r9
 8014790:	f7f8 fe0a 	bl	800d3a8 <ucdr_serialize_uint32_t>
 8014794:	4028      	ands	r0, r5
 8014796:	b2c5      	uxtb	r5, r0
 8014798:	e7c7      	b.n	801472a <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 801479a:	bf00      	nop

0801479c <uxr_serialize_OBJK_DataReader_Binary>:
 801479c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801479e:	2202      	movs	r2, #2
 80147a0:	460c      	mov	r4, r1
 80147a2:	4606      	mov	r6, r0
 80147a4:	f004 fdca 	bl	801933c <ucdr_serialize_array_uint8_t>
 80147a8:	78a1      	ldrb	r1, [r4, #2]
 80147aa:	4605      	mov	r5, r0
 80147ac:	4630      	mov	r0, r6
 80147ae:	f7f8 fbb7 	bl	800cf20 <ucdr_serialize_bool>
 80147b2:	78a3      	ldrb	r3, [r4, #2]
 80147b4:	4005      	ands	r5, r0
 80147b6:	b2ed      	uxtb	r5, r5
 80147b8:	b90b      	cbnz	r3, 80147be <uxr_serialize_OBJK_DataReader_Binary+0x22>
 80147ba:	4628      	mov	r0, r5
 80147bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80147be:	f104 0108 	add.w	r1, r4, #8
 80147c2:	4630      	mov	r0, r6
 80147c4:	f7ff ff96 	bl	80146f4 <uxr_serialize_OBJK_Endpoint_QosBinary>
 80147c8:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 80147cc:	4607      	mov	r7, r0
 80147ce:	4630      	mov	r0, r6
 80147d0:	f7f8 fba6 	bl	800cf20 <ucdr_serialize_bool>
 80147d4:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 80147d8:	4038      	ands	r0, r7
 80147da:	b2c7      	uxtb	r7, r0
 80147dc:	b95b      	cbnz	r3, 80147f6 <uxr_serialize_OBJK_DataReader_Binary+0x5a>
 80147de:	f894 1038 	ldrb.w	r1, [r4, #56]	@ 0x38
 80147e2:	4630      	mov	r0, r6
 80147e4:	f7f8 fb9c 	bl	800cf20 <ucdr_serialize_bool>
 80147e8:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 80147ec:	4007      	ands	r7, r0
 80147ee:	b94b      	cbnz	r3, 8014804 <uxr_serialize_OBJK_DataReader_Binary+0x68>
 80147f0:	403d      	ands	r5, r7
 80147f2:	4628      	mov	r0, r5
 80147f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80147f6:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	@ 0x30
 80147fa:	4630      	mov	r0, r6
 80147fc:	f7f9 f82a 	bl	800d854 <ucdr_serialize_uint64_t>
 8014800:	4007      	ands	r7, r0
 8014802:	e7ec      	b.n	80147de <uxr_serialize_OBJK_DataReader_Binary+0x42>
 8014804:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 8014806:	4630      	mov	r0, r6
 8014808:	f004 ff0a 	bl	8019620 <ucdr_serialize_string>
 801480c:	4007      	ands	r7, r0
 801480e:	b2ff      	uxtb	r7, r7
 8014810:	e7ee      	b.n	80147f0 <uxr_serialize_OBJK_DataReader_Binary+0x54>
 8014812:	bf00      	nop

08014814 <uxr_serialize_OBJK_DataWriter_Binary>:
 8014814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014816:	2202      	movs	r2, #2
 8014818:	460d      	mov	r5, r1
 801481a:	4606      	mov	r6, r0
 801481c:	f004 fd8e 	bl	801933c <ucdr_serialize_array_uint8_t>
 8014820:	78a9      	ldrb	r1, [r5, #2]
 8014822:	4604      	mov	r4, r0
 8014824:	4630      	mov	r0, r6
 8014826:	f7f8 fb7b 	bl	800cf20 <ucdr_serialize_bool>
 801482a:	78ab      	ldrb	r3, [r5, #2]
 801482c:	4004      	ands	r4, r0
 801482e:	b2e4      	uxtb	r4, r4
 8014830:	b90b      	cbnz	r3, 8014836 <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 8014832:	4620      	mov	r0, r4
 8014834:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014836:	f105 0108 	add.w	r1, r5, #8
 801483a:	4630      	mov	r0, r6
 801483c:	f7ff ff5a 	bl	80146f4 <uxr_serialize_OBJK_Endpoint_QosBinary>
 8014840:	f895 102c 	ldrb.w	r1, [r5, #44]	@ 0x2c
 8014844:	4607      	mov	r7, r0
 8014846:	4630      	mov	r0, r6
 8014848:	f7f8 fb6a 	bl	800cf20 <ucdr_serialize_bool>
 801484c:	f895 302c 	ldrb.w	r3, [r5, #44]	@ 0x2c
 8014850:	4038      	ands	r0, r7
 8014852:	b2c7      	uxtb	r7, r0
 8014854:	b913      	cbnz	r3, 801485c <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 8014856:	403c      	ands	r4, r7
 8014858:	4620      	mov	r0, r4
 801485a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801485c:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	@ 0x30
 8014860:	4630      	mov	r0, r6
 8014862:	f7f8 fff7 	bl	800d854 <ucdr_serialize_uint64_t>
 8014866:	4007      	ands	r7, r0
 8014868:	e7f5      	b.n	8014856 <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 801486a:	bf00      	nop

0801486c <uxr_deserialize_ObjectVariant>:
 801486c:	b570      	push	{r4, r5, r6, lr}
 801486e:	4605      	mov	r5, r0
 8014870:	460e      	mov	r6, r1
 8014872:	f7f8 fb99 	bl	800cfa8 <ucdr_deserialize_uint8_t>
 8014876:	b168      	cbz	r0, 8014894 <uxr_deserialize_ObjectVariant+0x28>
 8014878:	7833      	ldrb	r3, [r6, #0]
 801487a:	3b01      	subs	r3, #1
 801487c:	4604      	mov	r4, r0
 801487e:	2b0d      	cmp	r3, #13
 8014880:	d809      	bhi.n	8014896 <uxr_deserialize_ObjectVariant+0x2a>
 8014882:	e8df f003 	tbb	[pc, r3]
 8014886:	0a41      	.short	0x0a41
 8014888:	0a0a2323 	.word	0x0a0a2323
 801488c:	10080a0a 	.word	0x10080a0a
 8014890:	565c1010 	.word	0x565c1010
 8014894:	2400      	movs	r4, #0
 8014896:	4620      	mov	r0, r4
 8014898:	bd70      	pop	{r4, r5, r6, pc}
 801489a:	1d31      	adds	r1, r6, #4
 801489c:	4628      	mov	r0, r5
 801489e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80148a2:	f7ff bd55 	b.w	8014350 <uxr_deserialize_DATAWRITER_Representation>
 80148a6:	1d31      	adds	r1, r6, #4
 80148a8:	4628      	mov	r0, r5
 80148aa:	f7f8 fb7d 	bl	800cfa8 <ucdr_deserialize_uint8_t>
 80148ae:	2800      	cmp	r0, #0
 80148b0:	d0f0      	beq.n	8014894 <uxr_deserialize_ObjectVariant+0x28>
 80148b2:	7933      	ldrb	r3, [r6, #4]
 80148b4:	2b01      	cmp	r3, #1
 80148b6:	d001      	beq.n	80148bc <uxr_deserialize_ObjectVariant+0x50>
 80148b8:	2b02      	cmp	r3, #2
 80148ba:	d1ec      	bne.n	8014896 <uxr_deserialize_ObjectVariant+0x2a>
 80148bc:	68b1      	ldr	r1, [r6, #8]
 80148be:	4628      	mov	r0, r5
 80148c0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80148c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80148c8:	f004 beba 	b.w	8019640 <ucdr_deserialize_string>
 80148cc:	1d31      	adds	r1, r6, #4
 80148ce:	4628      	mov	r0, r5
 80148d0:	f7f8 fb6a 	bl	800cfa8 <ucdr_deserialize_uint8_t>
 80148d4:	4604      	mov	r4, r0
 80148d6:	b170      	cbz	r0, 80148f6 <uxr_deserialize_ObjectVariant+0x8a>
 80148d8:	7933      	ldrb	r3, [r6, #4]
 80148da:	2b02      	cmp	r3, #2
 80148dc:	d04c      	beq.n	8014978 <uxr_deserialize_ObjectVariant+0x10c>
 80148de:	2b03      	cmp	r3, #3
 80148e0:	d109      	bne.n	80148f6 <uxr_deserialize_ObjectVariant+0x8a>
 80148e2:	f106 0308 	add.w	r3, r6, #8
 80148e6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80148ea:	f106 010c 	add.w	r1, r6, #12
 80148ee:	4628      	mov	r0, r5
 80148f0:	f7fc fe10 	bl	8011514 <ucdr_deserialize_sequence_uint8_t>
 80148f4:	4604      	mov	r4, r0
 80148f6:	2202      	movs	r2, #2
 80148f8:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 80148fc:	4628      	mov	r0, r5
 80148fe:	f004 fd81 	bl	8019404 <ucdr_deserialize_array_uint8_t>
 8014902:	4020      	ands	r0, r4
 8014904:	b2c4      	uxtb	r4, r0
 8014906:	e7c6      	b.n	8014896 <uxr_deserialize_ObjectVariant+0x2a>
 8014908:	1d31      	adds	r1, r6, #4
 801490a:	4628      	mov	r0, r5
 801490c:	f7f8 fb4c 	bl	800cfa8 <ucdr_deserialize_uint8_t>
 8014910:	4604      	mov	r4, r0
 8014912:	b130      	cbz	r0, 8014922 <uxr_deserialize_ObjectVariant+0xb6>
 8014914:	7933      	ldrb	r3, [r6, #4]
 8014916:	2b02      	cmp	r3, #2
 8014918:	d036      	beq.n	8014988 <uxr_deserialize_ObjectVariant+0x11c>
 801491a:	2b03      	cmp	r3, #3
 801491c:	d03c      	beq.n	8014998 <uxr_deserialize_ObjectVariant+0x12c>
 801491e:	2b01      	cmp	r3, #1
 8014920:	d032      	beq.n	8014988 <uxr_deserialize_ObjectVariant+0x11c>
 8014922:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 8014926:	4628      	mov	r0, r5
 8014928:	f7f9 f8e4 	bl	800daf4 <ucdr_deserialize_int16_t>
 801492c:	4020      	ands	r0, r4
 801492e:	b2c4      	uxtb	r4, r0
 8014930:	e7b1      	b.n	8014896 <uxr_deserialize_ObjectVariant+0x2a>
 8014932:	1d31      	adds	r1, r6, #4
 8014934:	4628      	mov	r0, r5
 8014936:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801493a:	f7ff bbbf 	b.w	80140bc <uxr_deserialize_CLIENT_Representation>
 801493e:	2204      	movs	r2, #4
 8014940:	18b1      	adds	r1, r6, r2
 8014942:	4628      	mov	r0, r5
 8014944:	f004 fd5e 	bl	8019404 <ucdr_deserialize_array_uint8_t>
 8014948:	2202      	movs	r2, #2
 801494a:	f106 0108 	add.w	r1, r6, #8
 801494e:	4604      	mov	r4, r0
 8014950:	4628      	mov	r0, r5
 8014952:	f004 fd57 	bl	8019404 <ucdr_deserialize_array_uint8_t>
 8014956:	2202      	movs	r2, #2
 8014958:	4004      	ands	r4, r0
 801495a:	f106 010a 	add.w	r1, r6, #10
 801495e:	4628      	mov	r0, r5
 8014960:	f004 fd50 	bl	8019404 <ucdr_deserialize_array_uint8_t>
 8014964:	b2e4      	uxtb	r4, r4
 8014966:	4603      	mov	r3, r0
 8014968:	f106 010c 	add.w	r1, r6, #12
 801496c:	4628      	mov	r0, r5
 801496e:	401c      	ands	r4, r3
 8014970:	f7f8 faec 	bl	800cf4c <ucdr_deserialize_bool>
 8014974:	4004      	ands	r4, r0
 8014976:	e78e      	b.n	8014896 <uxr_deserialize_ObjectVariant+0x2a>
 8014978:	68b1      	ldr	r1, [r6, #8]
 801497a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801497e:	4628      	mov	r0, r5
 8014980:	f004 fe5e 	bl	8019640 <ucdr_deserialize_string>
 8014984:	4604      	mov	r4, r0
 8014986:	e7b6      	b.n	80148f6 <uxr_deserialize_ObjectVariant+0x8a>
 8014988:	68b1      	ldr	r1, [r6, #8]
 801498a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801498e:	4628      	mov	r0, r5
 8014990:	f004 fe56 	bl	8019640 <ucdr_deserialize_string>
 8014994:	4604      	mov	r4, r0
 8014996:	e7c4      	b.n	8014922 <uxr_deserialize_ObjectVariant+0xb6>
 8014998:	f106 0308 	add.w	r3, r6, #8
 801499c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80149a0:	f106 010c 	add.w	r1, r6, #12
 80149a4:	4628      	mov	r0, r5
 80149a6:	f7fc fdb5 	bl	8011514 <ucdr_deserialize_sequence_uint8_t>
 80149aa:	4604      	mov	r4, r0
 80149ac:	e7b9      	b.n	8014922 <uxr_deserialize_ObjectVariant+0xb6>
 80149ae:	bf00      	nop

080149b0 <uxr_deserialize_BaseObjectRequest>:
 80149b0:	b570      	push	{r4, r5, r6, lr}
 80149b2:	2202      	movs	r2, #2
 80149b4:	4605      	mov	r5, r0
 80149b6:	460e      	mov	r6, r1
 80149b8:	f004 fd24 	bl	8019404 <ucdr_deserialize_array_uint8_t>
 80149bc:	2202      	movs	r2, #2
 80149be:	4604      	mov	r4, r0
 80149c0:	18b1      	adds	r1, r6, r2
 80149c2:	4628      	mov	r0, r5
 80149c4:	f004 fd1e 	bl	8019404 <ucdr_deserialize_array_uint8_t>
 80149c8:	4020      	ands	r0, r4
 80149ca:	b2c0      	uxtb	r0, r0
 80149cc:	bd70      	pop	{r4, r5, r6, pc}
 80149ce:	bf00      	nop

080149d0 <uxr_serialize_ActivityInfoVariant>:
 80149d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80149d4:	460d      	mov	r5, r1
 80149d6:	7809      	ldrb	r1, [r1, #0]
 80149d8:	4607      	mov	r7, r0
 80149da:	f7f8 facf 	bl	800cf7c <ucdr_serialize_uint8_t>
 80149de:	4681      	mov	r9, r0
 80149e0:	b138      	cbz	r0, 80149f2 <uxr_serialize_ActivityInfoVariant+0x22>
 80149e2:	782b      	ldrb	r3, [r5, #0]
 80149e4:	2b06      	cmp	r3, #6
 80149e6:	f000 8082 	beq.w	8014aee <uxr_serialize_ActivityInfoVariant+0x11e>
 80149ea:	2b0d      	cmp	r3, #13
 80149ec:	d016      	beq.n	8014a1c <uxr_serialize_ActivityInfoVariant+0x4c>
 80149ee:	2b05      	cmp	r3, #5
 80149f0:	d002      	beq.n	80149f8 <uxr_serialize_ActivityInfoVariant+0x28>
 80149f2:	4648      	mov	r0, r9
 80149f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80149f8:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 80149fc:	4638      	mov	r0, r7
 80149fe:	f7f8 fff9 	bl	800d9f4 <ucdr_serialize_int16_t>
 8014a02:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 8014a06:	4681      	mov	r9, r0
 8014a08:	4638      	mov	r0, r7
 8014a0a:	f7f8 ff23 	bl	800d854 <ucdr_serialize_uint64_t>
 8014a0e:	ea09 0000 	and.w	r0, r9, r0
 8014a12:	fa5f f980 	uxtb.w	r9, r0
 8014a16:	4648      	mov	r0, r9
 8014a18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014a1c:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8014a20:	4638      	mov	r0, r7
 8014a22:	f7f8 ffe7 	bl	800d9f4 <ucdr_serialize_int16_t>
 8014a26:	68e9      	ldr	r1, [r5, #12]
 8014a28:	4681      	mov	r9, r0
 8014a2a:	4638      	mov	r0, r7
 8014a2c:	f7f8 fcbc 	bl	800d3a8 <ucdr_serialize_uint32_t>
 8014a30:	68eb      	ldr	r3, [r5, #12]
 8014a32:	2b00      	cmp	r3, #0
 8014a34:	d0eb      	beq.n	8014a0e <uxr_serialize_ActivityInfoVariant+0x3e>
 8014a36:	b320      	cbz	r0, 8014a82 <uxr_serialize_ActivityInfoVariant+0xb2>
 8014a38:	f105 080c 	add.w	r8, r5, #12
 8014a3c:	2600      	movs	r6, #0
 8014a3e:	eb06 0a46 	add.w	sl, r6, r6, lsl #1
 8014a42:	eb05 0aca 	add.w	sl, r5, sl, lsl #3
 8014a46:	f89a 1010 	ldrb.w	r1, [sl, #16]
 8014a4a:	4638      	mov	r0, r7
 8014a4c:	f7f8 fa96 	bl	800cf7c <ucdr_serialize_uint8_t>
 8014a50:	2800      	cmp	r0, #0
 8014a52:	d053      	beq.n	8014afc <uxr_serialize_ActivityInfoVariant+0x12c>
 8014a54:	f89a 3010 	ldrb.w	r3, [sl, #16]
 8014a58:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 8014a5c:	0074      	lsls	r4, r6, #1
 8014a5e:	00c9      	lsls	r1, r1, #3
 8014a60:	2b03      	cmp	r3, #3
 8014a62:	d854      	bhi.n	8014b0e <uxr_serialize_ActivityInfoVariant+0x13e>
 8014a64:	e8df f003 	tbb	[pc, r3]
 8014a68:	02102132 	.word	0x02102132
 8014a6c:	4441      	add	r1, r8
 8014a6e:	4638      	mov	r0, r7
 8014a70:	6889      	ldr	r1, [r1, #8]
 8014a72:	f004 fdd5 	bl	8019620 <ucdr_serialize_string>
 8014a76:	68ea      	ldr	r2, [r5, #12]
 8014a78:	3601      	adds	r6, #1
 8014a7a:	4296      	cmp	r6, r2
 8014a7c:	d242      	bcs.n	8014b04 <uxr_serialize_ActivityInfoVariant+0x134>
 8014a7e:	2800      	cmp	r0, #0
 8014a80:	d1dd      	bne.n	8014a3e <uxr_serialize_ActivityInfoVariant+0x6e>
 8014a82:	f04f 0900 	mov.w	r9, #0
 8014a86:	e7b4      	b.n	80149f2 <uxr_serialize_ActivityInfoVariant+0x22>
 8014a88:	3108      	adds	r1, #8
 8014a8a:	4441      	add	r1, r8
 8014a8c:	2210      	movs	r2, #16
 8014a8e:	4638      	mov	r0, r7
 8014a90:	f004 fc54 	bl	801933c <ucdr_serialize_array_uint8_t>
 8014a94:	4434      	add	r4, r6
 8014a96:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 8014a9a:	4604      	mov	r4, r0
 8014a9c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8014a9e:	4638      	mov	r0, r7
 8014aa0:	f7f8 fc82 	bl	800d3a8 <ucdr_serialize_uint32_t>
 8014aa4:	4020      	ands	r0, r4
 8014aa6:	b2c0      	uxtb	r0, r0
 8014aa8:	e7e5      	b.n	8014a76 <uxr_serialize_ActivityInfoVariant+0xa6>
 8014aaa:	3108      	adds	r1, #8
 8014aac:	4441      	add	r1, r8
 8014aae:	2204      	movs	r2, #4
 8014ab0:	4638      	mov	r0, r7
 8014ab2:	f004 fc43 	bl	801933c <ucdr_serialize_array_uint8_t>
 8014ab6:	4434      	add	r4, r6
 8014ab8:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 8014abc:	4604      	mov	r4, r0
 8014abe:	8b19      	ldrh	r1, [r3, #24]
 8014ac0:	4638      	mov	r0, r7
 8014ac2:	f7f8 fa87 	bl	800cfd4 <ucdr_serialize_uint16_t>
 8014ac6:	4020      	ands	r0, r4
 8014ac8:	b2c0      	uxtb	r0, r0
 8014aca:	e7d4      	b.n	8014a76 <uxr_serialize_ActivityInfoVariant+0xa6>
 8014acc:	3108      	adds	r1, #8
 8014ace:	4441      	add	r1, r8
 8014ad0:	2202      	movs	r2, #2
 8014ad2:	4638      	mov	r0, r7
 8014ad4:	f004 fc32 	bl	801933c <ucdr_serialize_array_uint8_t>
 8014ad8:	4434      	add	r4, r6
 8014ada:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 8014ade:	4604      	mov	r4, r0
 8014ae0:	7d99      	ldrb	r1, [r3, #22]
 8014ae2:	4638      	mov	r0, r7
 8014ae4:	f7f8 fa4a 	bl	800cf7c <ucdr_serialize_uint8_t>
 8014ae8:	4020      	ands	r0, r4
 8014aea:	b2c0      	uxtb	r0, r0
 8014aec:	e7c3      	b.n	8014a76 <uxr_serialize_ActivityInfoVariant+0xa6>
 8014aee:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8014af2:	4638      	mov	r0, r7
 8014af4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014af8:	f7f8 bf7c 	b.w	800d9f4 <ucdr_serialize_int16_t>
 8014afc:	68ea      	ldr	r2, [r5, #12]
 8014afe:	3601      	adds	r6, #1
 8014b00:	42b2      	cmp	r2, r6
 8014b02:	d8be      	bhi.n	8014a82 <uxr_serialize_ActivityInfoVariant+0xb2>
 8014b04:	ea09 0900 	and.w	r9, r9, r0
 8014b08:	fa5f f989 	uxtb.w	r9, r9
 8014b0c:	e771      	b.n	80149f2 <uxr_serialize_ActivityInfoVariant+0x22>
 8014b0e:	68eb      	ldr	r3, [r5, #12]
 8014b10:	3601      	adds	r6, #1
 8014b12:	429e      	cmp	r6, r3
 8014b14:	f10a 0a18 	add.w	sl, sl, #24
 8014b18:	d395      	bcc.n	8014a46 <uxr_serialize_ActivityInfoVariant+0x76>
 8014b1a:	e76a      	b.n	80149f2 <uxr_serialize_ActivityInfoVariant+0x22>

08014b1c <uxr_deserialize_BaseObjectReply>:
 8014b1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014b20:	2202      	movs	r2, #2
 8014b22:	4606      	mov	r6, r0
 8014b24:	460f      	mov	r7, r1
 8014b26:	f004 fc6d 	bl	8019404 <ucdr_deserialize_array_uint8_t>
 8014b2a:	2202      	movs	r2, #2
 8014b2c:	18b9      	adds	r1, r7, r2
 8014b2e:	4605      	mov	r5, r0
 8014b30:	4630      	mov	r0, r6
 8014b32:	f004 fc67 	bl	8019404 <ucdr_deserialize_array_uint8_t>
 8014b36:	1d39      	adds	r1, r7, #4
 8014b38:	4680      	mov	r8, r0
 8014b3a:	4630      	mov	r0, r6
 8014b3c:	f7f8 fa34 	bl	800cfa8 <ucdr_deserialize_uint8_t>
 8014b40:	1d79      	adds	r1, r7, #5
 8014b42:	4604      	mov	r4, r0
 8014b44:	4630      	mov	r0, r6
 8014b46:	f7f8 fa2f 	bl	800cfa8 <ucdr_deserialize_uint8_t>
 8014b4a:	ea05 0508 	and.w	r5, r5, r8
 8014b4e:	402c      	ands	r4, r5
 8014b50:	4020      	ands	r0, r4
 8014b52:	b2c0      	uxtb	r0, r0
 8014b54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014b58 <uxr_serialize_ReadSpecification>:
 8014b58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014b5c:	460e      	mov	r6, r1
 8014b5e:	7809      	ldrb	r1, [r1, #0]
 8014b60:	4607      	mov	r7, r0
 8014b62:	f7f8 fa0b 	bl	800cf7c <ucdr_serialize_uint8_t>
 8014b66:	7871      	ldrb	r1, [r6, #1]
 8014b68:	4604      	mov	r4, r0
 8014b6a:	4638      	mov	r0, r7
 8014b6c:	f7f8 fa06 	bl	800cf7c <ucdr_serialize_uint8_t>
 8014b70:	78b1      	ldrb	r1, [r6, #2]
 8014b72:	4004      	ands	r4, r0
 8014b74:	4638      	mov	r0, r7
 8014b76:	f7f8 f9d3 	bl	800cf20 <ucdr_serialize_bool>
 8014b7a:	78b3      	ldrb	r3, [r6, #2]
 8014b7c:	b2e4      	uxtb	r4, r4
 8014b7e:	4004      	ands	r4, r0
 8014b80:	b94b      	cbnz	r3, 8014b96 <uxr_serialize_ReadSpecification+0x3e>
 8014b82:	7a31      	ldrb	r1, [r6, #8]
 8014b84:	4638      	mov	r0, r7
 8014b86:	f7f8 f9cb 	bl	800cf20 <ucdr_serialize_bool>
 8014b8a:	7a33      	ldrb	r3, [r6, #8]
 8014b8c:	4004      	ands	r4, r0
 8014b8e:	b943      	cbnz	r3, 8014ba2 <uxr_serialize_ReadSpecification+0x4a>
 8014b90:	4620      	mov	r0, r4
 8014b92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014b96:	6871      	ldr	r1, [r6, #4]
 8014b98:	4638      	mov	r0, r7
 8014b9a:	f004 fd41 	bl	8019620 <ucdr_serialize_string>
 8014b9e:	4004      	ands	r4, r0
 8014ba0:	e7ef      	b.n	8014b82 <uxr_serialize_ReadSpecification+0x2a>
 8014ba2:	8971      	ldrh	r1, [r6, #10]
 8014ba4:	4638      	mov	r0, r7
 8014ba6:	f7f8 fa15 	bl	800cfd4 <ucdr_serialize_uint16_t>
 8014baa:	89b1      	ldrh	r1, [r6, #12]
 8014bac:	4605      	mov	r5, r0
 8014bae:	4638      	mov	r0, r7
 8014bb0:	f7f8 fa10 	bl	800cfd4 <ucdr_serialize_uint16_t>
 8014bb4:	89f1      	ldrh	r1, [r6, #14]
 8014bb6:	4005      	ands	r5, r0
 8014bb8:	4638      	mov	r0, r7
 8014bba:	f7f8 fa0b 	bl	800cfd4 <ucdr_serialize_uint16_t>
 8014bbe:	8a31      	ldrh	r1, [r6, #16]
 8014bc0:	4680      	mov	r8, r0
 8014bc2:	4638      	mov	r0, r7
 8014bc4:	f7f8 fa06 	bl	800cfd4 <ucdr_serialize_uint16_t>
 8014bc8:	b2ed      	uxtb	r5, r5
 8014bca:	4025      	ands	r5, r4
 8014bcc:	ea08 0505 	and.w	r5, r8, r5
 8014bd0:	ea00 0405 	and.w	r4, r0, r5
 8014bd4:	4620      	mov	r0, r4
 8014bd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014bda:	bf00      	nop

08014bdc <uxr_serialize_CREATE_CLIENT_Payload>:
 8014bdc:	f7ff ba16 	b.w	801400c <uxr_serialize_CLIENT_Representation>

08014be0 <uxr_serialize_CREATE_Payload>:
 8014be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014be2:	2202      	movs	r2, #2
 8014be4:	4607      	mov	r7, r0
 8014be6:	460e      	mov	r6, r1
 8014be8:	f004 fba8 	bl	801933c <ucdr_serialize_array_uint8_t>
 8014bec:	2202      	movs	r2, #2
 8014bee:	18b1      	adds	r1, r6, r2
 8014bf0:	4605      	mov	r5, r0
 8014bf2:	4638      	mov	r0, r7
 8014bf4:	f004 fba2 	bl	801933c <ucdr_serialize_array_uint8_t>
 8014bf8:	7931      	ldrb	r1, [r6, #4]
 8014bfa:	4604      	mov	r4, r0
 8014bfc:	4638      	mov	r0, r7
 8014bfe:	f7f8 f9bd 	bl	800cf7c <ucdr_serialize_uint8_t>
 8014c02:	b170      	cbz	r0, 8014c22 <uxr_serialize_CREATE_Payload+0x42>
 8014c04:	7933      	ldrb	r3, [r6, #4]
 8014c06:	402c      	ands	r4, r5
 8014c08:	3b01      	subs	r3, #1
 8014c0a:	b2e4      	uxtb	r4, r4
 8014c0c:	2b0d      	cmp	r3, #13
 8014c0e:	d809      	bhi.n	8014c24 <uxr_serialize_CREATE_Payload+0x44>
 8014c10:	e8df f003 	tbb	[pc, r3]
 8014c14:	23230a4c 	.word	0x23230a4c
 8014c18:	0a0a0a0a 	.word	0x0a0a0a0a
 8014c1c:	12121208 	.word	0x12121208
 8014c20:	3e45      	.short	0x3e45
 8014c22:	2400      	movs	r4, #0
 8014c24:	4620      	mov	r0, r4
 8014c26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014c28:	f106 0108 	add.w	r1, r6, #8
 8014c2c:	4638      	mov	r0, r7
 8014c2e:	f7ff faf3 	bl	8014218 <uxr_serialize_DATAWRITER_Representation>
 8014c32:	4004      	ands	r4, r0
 8014c34:	4620      	mov	r0, r4
 8014c36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014c38:	7a31      	ldrb	r1, [r6, #8]
 8014c3a:	4638      	mov	r0, r7
 8014c3c:	f7f8 f99e 	bl	800cf7c <ucdr_serialize_uint8_t>
 8014c40:	2800      	cmp	r0, #0
 8014c42:	d0ee      	beq.n	8014c22 <uxr_serialize_CREATE_Payload+0x42>
 8014c44:	7a33      	ldrb	r3, [r6, #8]
 8014c46:	2b01      	cmp	r3, #1
 8014c48:	d001      	beq.n	8014c4e <uxr_serialize_CREATE_Payload+0x6e>
 8014c4a:	2b02      	cmp	r3, #2
 8014c4c:	d1ea      	bne.n	8014c24 <uxr_serialize_CREATE_Payload+0x44>
 8014c4e:	68f1      	ldr	r1, [r6, #12]
 8014c50:	4638      	mov	r0, r7
 8014c52:	f004 fce5 	bl	8019620 <ucdr_serialize_string>
 8014c56:	4004      	ands	r4, r0
 8014c58:	e7e4      	b.n	8014c24 <uxr_serialize_CREATE_Payload+0x44>
 8014c5a:	7a31      	ldrb	r1, [r6, #8]
 8014c5c:	4638      	mov	r0, r7
 8014c5e:	f7f8 f98d 	bl	800cf7c <ucdr_serialize_uint8_t>
 8014c62:	4605      	mov	r5, r0
 8014c64:	b158      	cbz	r0, 8014c7e <uxr_serialize_CREATE_Payload+0x9e>
 8014c66:	7a33      	ldrb	r3, [r6, #8]
 8014c68:	2b02      	cmp	r3, #2
 8014c6a:	d034      	beq.n	8014cd6 <uxr_serialize_CREATE_Payload+0xf6>
 8014c6c:	2b03      	cmp	r3, #3
 8014c6e:	d106      	bne.n	8014c7e <uxr_serialize_CREATE_Payload+0x9e>
 8014c70:	68f2      	ldr	r2, [r6, #12]
 8014c72:	f106 0110 	add.w	r1, r6, #16
 8014c76:	4638      	mov	r0, r7
 8014c78:	f7fc fc3a 	bl	80114f0 <ucdr_serialize_sequence_uint8_t>
 8014c7c:	4605      	mov	r5, r0
 8014c7e:	2202      	movs	r2, #2
 8014c80:	f506 7104 	add.w	r1, r6, #528	@ 0x210
 8014c84:	4638      	mov	r0, r7
 8014c86:	f004 fb59 	bl	801933c <ucdr_serialize_array_uint8_t>
 8014c8a:	4028      	ands	r0, r5
 8014c8c:	4004      	ands	r4, r0
 8014c8e:	e7c9      	b.n	8014c24 <uxr_serialize_CREATE_Payload+0x44>
 8014c90:	f106 0108 	add.w	r1, r6, #8
 8014c94:	4638      	mov	r0, r7
 8014c96:	f7ff f9b9 	bl	801400c <uxr_serialize_CLIENT_Representation>
 8014c9a:	4004      	ands	r4, r0
 8014c9c:	e7c2      	b.n	8014c24 <uxr_serialize_CREATE_Payload+0x44>
 8014c9e:	f106 0108 	add.w	r1, r6, #8
 8014ca2:	4638      	mov	r0, r7
 8014ca4:	f7ff fa6e 	bl	8014184 <uxr_serialize_AGENT_Representation>
 8014ca8:	4004      	ands	r4, r0
 8014caa:	e7bb      	b.n	8014c24 <uxr_serialize_CREATE_Payload+0x44>
 8014cac:	7a31      	ldrb	r1, [r6, #8]
 8014cae:	4638      	mov	r0, r7
 8014cb0:	f7f8 f964 	bl	800cf7c <ucdr_serialize_uint8_t>
 8014cb4:	4605      	mov	r5, r0
 8014cb6:	b130      	cbz	r0, 8014cc6 <uxr_serialize_CREATE_Payload+0xe6>
 8014cb8:	7a33      	ldrb	r3, [r6, #8]
 8014cba:	2b02      	cmp	r3, #2
 8014cbc:	d011      	beq.n	8014ce2 <uxr_serialize_CREATE_Payload+0x102>
 8014cbe:	2b03      	cmp	r3, #3
 8014cc0:	d015      	beq.n	8014cee <uxr_serialize_CREATE_Payload+0x10e>
 8014cc2:	2b01      	cmp	r3, #1
 8014cc4:	d00d      	beq.n	8014ce2 <uxr_serialize_CREATE_Payload+0x102>
 8014cc6:	f9b6 1210 	ldrsh.w	r1, [r6, #528]	@ 0x210
 8014cca:	4638      	mov	r0, r7
 8014ccc:	f7f8 fe92 	bl	800d9f4 <ucdr_serialize_int16_t>
 8014cd0:	4028      	ands	r0, r5
 8014cd2:	4004      	ands	r4, r0
 8014cd4:	e7a6      	b.n	8014c24 <uxr_serialize_CREATE_Payload+0x44>
 8014cd6:	68f1      	ldr	r1, [r6, #12]
 8014cd8:	4638      	mov	r0, r7
 8014cda:	f004 fca1 	bl	8019620 <ucdr_serialize_string>
 8014cde:	4605      	mov	r5, r0
 8014ce0:	e7cd      	b.n	8014c7e <uxr_serialize_CREATE_Payload+0x9e>
 8014ce2:	68f1      	ldr	r1, [r6, #12]
 8014ce4:	4638      	mov	r0, r7
 8014ce6:	f004 fc9b 	bl	8019620 <ucdr_serialize_string>
 8014cea:	4605      	mov	r5, r0
 8014cec:	e7eb      	b.n	8014cc6 <uxr_serialize_CREATE_Payload+0xe6>
 8014cee:	68f2      	ldr	r2, [r6, #12]
 8014cf0:	f106 0110 	add.w	r1, r6, #16
 8014cf4:	4638      	mov	r0, r7
 8014cf6:	f7fc fbfb 	bl	80114f0 <ucdr_serialize_sequence_uint8_t>
 8014cfa:	4605      	mov	r5, r0
 8014cfc:	e7e3      	b.n	8014cc6 <uxr_serialize_CREATE_Payload+0xe6>
 8014cfe:	bf00      	nop

08014d00 <uxr_deserialize_GET_INFO_Payload>:
 8014d00:	b570      	push	{r4, r5, r6, lr}
 8014d02:	2202      	movs	r2, #2
 8014d04:	4605      	mov	r5, r0
 8014d06:	460e      	mov	r6, r1
 8014d08:	f004 fb7c 	bl	8019404 <ucdr_deserialize_array_uint8_t>
 8014d0c:	2202      	movs	r2, #2
 8014d0e:	18b1      	adds	r1, r6, r2
 8014d10:	4604      	mov	r4, r0
 8014d12:	4628      	mov	r0, r5
 8014d14:	f004 fb76 	bl	8019404 <ucdr_deserialize_array_uint8_t>
 8014d18:	1d31      	adds	r1, r6, #4
 8014d1a:	4004      	ands	r4, r0
 8014d1c:	4628      	mov	r0, r5
 8014d1e:	f7f8 fc73 	bl	800d608 <ucdr_deserialize_uint32_t>
 8014d22:	b2e4      	uxtb	r4, r4
 8014d24:	4020      	ands	r0, r4
 8014d26:	bd70      	pop	{r4, r5, r6, pc}

08014d28 <uxr_serialize_DELETE_Payload>:
 8014d28:	b570      	push	{r4, r5, r6, lr}
 8014d2a:	2202      	movs	r2, #2
 8014d2c:	4605      	mov	r5, r0
 8014d2e:	460e      	mov	r6, r1
 8014d30:	f004 fb04 	bl	801933c <ucdr_serialize_array_uint8_t>
 8014d34:	2202      	movs	r2, #2
 8014d36:	4604      	mov	r4, r0
 8014d38:	18b1      	adds	r1, r6, r2
 8014d3a:	4628      	mov	r0, r5
 8014d3c:	f004 fafe 	bl	801933c <ucdr_serialize_array_uint8_t>
 8014d40:	4020      	ands	r0, r4
 8014d42:	b2c0      	uxtb	r0, r0
 8014d44:	bd70      	pop	{r4, r5, r6, pc}
 8014d46:	bf00      	nop

08014d48 <uxr_deserialize_STATUS_AGENT_Payload>:
 8014d48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014d4c:	4605      	mov	r5, r0
 8014d4e:	460e      	mov	r6, r1
 8014d50:	f7f8 f92a 	bl	800cfa8 <ucdr_deserialize_uint8_t>
 8014d54:	1c71      	adds	r1, r6, #1
 8014d56:	4604      	mov	r4, r0
 8014d58:	4628      	mov	r0, r5
 8014d5a:	f7f8 f925 	bl	800cfa8 <ucdr_deserialize_uint8_t>
 8014d5e:	2204      	movs	r2, #4
 8014d60:	18b1      	adds	r1, r6, r2
 8014d62:	4680      	mov	r8, r0
 8014d64:	4628      	mov	r0, r5
 8014d66:	f004 fb4d 	bl	8019404 <ucdr_deserialize_array_uint8_t>
 8014d6a:	f106 0108 	add.w	r1, r6, #8
 8014d6e:	4607      	mov	r7, r0
 8014d70:	2202      	movs	r2, #2
 8014d72:	4628      	mov	r0, r5
 8014d74:	f004 fb46 	bl	8019404 <ucdr_deserialize_array_uint8_t>
 8014d78:	ea04 0308 	and.w	r3, r4, r8
 8014d7c:	b2db      	uxtb	r3, r3
 8014d7e:	ea03 0407 	and.w	r4, r3, r7
 8014d82:	2202      	movs	r2, #2
 8014d84:	4607      	mov	r7, r0
 8014d86:	f106 010a 	add.w	r1, r6, #10
 8014d8a:	4628      	mov	r0, r5
 8014d8c:	f004 fb3a 	bl	8019404 <ucdr_deserialize_array_uint8_t>
 8014d90:	f106 010c 	add.w	r1, r6, #12
 8014d94:	4603      	mov	r3, r0
 8014d96:	4628      	mov	r0, r5
 8014d98:	461d      	mov	r5, r3
 8014d9a:	f7f8 f8d7 	bl	800cf4c <ucdr_deserialize_bool>
 8014d9e:	403c      	ands	r4, r7
 8014da0:	4025      	ands	r5, r4
 8014da2:	4028      	ands	r0, r5
 8014da4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014da8 <uxr_deserialize_STATUS_Payload>:
 8014da8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014dac:	2202      	movs	r2, #2
 8014dae:	4606      	mov	r6, r0
 8014db0:	460f      	mov	r7, r1
 8014db2:	f004 fb27 	bl	8019404 <ucdr_deserialize_array_uint8_t>
 8014db6:	2202      	movs	r2, #2
 8014db8:	18b9      	adds	r1, r7, r2
 8014dba:	4605      	mov	r5, r0
 8014dbc:	4630      	mov	r0, r6
 8014dbe:	f004 fb21 	bl	8019404 <ucdr_deserialize_array_uint8_t>
 8014dc2:	1d39      	adds	r1, r7, #4
 8014dc4:	4680      	mov	r8, r0
 8014dc6:	4630      	mov	r0, r6
 8014dc8:	f7f8 f8ee 	bl	800cfa8 <ucdr_deserialize_uint8_t>
 8014dcc:	1d79      	adds	r1, r7, #5
 8014dce:	4604      	mov	r4, r0
 8014dd0:	4630      	mov	r0, r6
 8014dd2:	f7f8 f8e9 	bl	800cfa8 <ucdr_deserialize_uint8_t>
 8014dd6:	ea05 0508 	and.w	r5, r5, r8
 8014dda:	402c      	ands	r4, r5
 8014ddc:	4020      	ands	r0, r4
 8014dde:	b2c0      	uxtb	r0, r0
 8014de0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014de4 <uxr_serialize_INFO_Payload>:
 8014de4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014de8:	2202      	movs	r2, #2
 8014dea:	460c      	mov	r4, r1
 8014dec:	4605      	mov	r5, r0
 8014dee:	f004 faa5 	bl	801933c <ucdr_serialize_array_uint8_t>
 8014df2:	2202      	movs	r2, #2
 8014df4:	18a1      	adds	r1, r4, r2
 8014df6:	4680      	mov	r8, r0
 8014df8:	4628      	mov	r0, r5
 8014dfa:	f004 fa9f 	bl	801933c <ucdr_serialize_array_uint8_t>
 8014dfe:	7921      	ldrb	r1, [r4, #4]
 8014e00:	4607      	mov	r7, r0
 8014e02:	4628      	mov	r0, r5
 8014e04:	f7f8 f8ba 	bl	800cf7c <ucdr_serialize_uint8_t>
 8014e08:	7961      	ldrb	r1, [r4, #5]
 8014e0a:	4606      	mov	r6, r0
 8014e0c:	4628      	mov	r0, r5
 8014e0e:	f7f8 f8b5 	bl	800cf7c <ucdr_serialize_uint8_t>
 8014e12:	ea08 0807 	and.w	r8, r8, r7
 8014e16:	ea06 0608 	and.w	r6, r6, r8
 8014e1a:	4006      	ands	r6, r0
 8014e1c:	7a21      	ldrb	r1, [r4, #8]
 8014e1e:	4628      	mov	r0, r5
 8014e20:	f7f8 f87e 	bl	800cf20 <ucdr_serialize_bool>
 8014e24:	7a23      	ldrb	r3, [r4, #8]
 8014e26:	b2f7      	uxtb	r7, r6
 8014e28:	4606      	mov	r6, r0
 8014e2a:	b96b      	cbnz	r3, 8014e48 <uxr_serialize_INFO_Payload+0x64>
 8014e2c:	f894 121c 	ldrb.w	r1, [r4, #540]	@ 0x21c
 8014e30:	4628      	mov	r0, r5
 8014e32:	f7f8 f875 	bl	800cf20 <ucdr_serialize_bool>
 8014e36:	f894 321c 	ldrb.w	r3, [r4, #540]	@ 0x21c
 8014e3a:	4030      	ands	r0, r6
 8014e3c:	b2c6      	uxtb	r6, r0
 8014e3e:	b983      	cbnz	r3, 8014e62 <uxr_serialize_INFO_Payload+0x7e>
 8014e40:	ea06 0007 	and.w	r0, r6, r7
 8014e44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014e48:	7b21      	ldrb	r1, [r4, #12]
 8014e4a:	4628      	mov	r0, r5
 8014e4c:	f7f8 f896 	bl	800cf7c <ucdr_serialize_uint8_t>
 8014e50:	b188      	cbz	r0, 8014e76 <uxr_serialize_INFO_Payload+0x92>
 8014e52:	f104 010c 	add.w	r1, r4, #12
 8014e56:	4628      	mov	r0, r5
 8014e58:	f7ff fa06 	bl	8014268 <uxr_serialize_ObjectVariant.part.0>
 8014e5c:	4030      	ands	r0, r6
 8014e5e:	b2c6      	uxtb	r6, r0
 8014e60:	e7e4      	b.n	8014e2c <uxr_serialize_INFO_Payload+0x48>
 8014e62:	f504 7108 	add.w	r1, r4, #544	@ 0x220
 8014e66:	4628      	mov	r0, r5
 8014e68:	f7ff fdb2 	bl	80149d0 <uxr_serialize_ActivityInfoVariant>
 8014e6c:	4006      	ands	r6, r0
 8014e6e:	ea06 0007 	and.w	r0, r6, r7
 8014e72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014e76:	4606      	mov	r6, r0
 8014e78:	e7d8      	b.n	8014e2c <uxr_serialize_INFO_Payload+0x48>
 8014e7a:	bf00      	nop

08014e7c <uxr_serialize_READ_DATA_Payload>:
 8014e7c:	b570      	push	{r4, r5, r6, lr}
 8014e7e:	2202      	movs	r2, #2
 8014e80:	4605      	mov	r5, r0
 8014e82:	460e      	mov	r6, r1
 8014e84:	f004 fa5a 	bl	801933c <ucdr_serialize_array_uint8_t>
 8014e88:	2202      	movs	r2, #2
 8014e8a:	18b1      	adds	r1, r6, r2
 8014e8c:	4604      	mov	r4, r0
 8014e8e:	4628      	mov	r0, r5
 8014e90:	f004 fa54 	bl	801933c <ucdr_serialize_array_uint8_t>
 8014e94:	1d31      	adds	r1, r6, #4
 8014e96:	4004      	ands	r4, r0
 8014e98:	4628      	mov	r0, r5
 8014e9a:	f7ff fe5d 	bl	8014b58 <uxr_serialize_ReadSpecification>
 8014e9e:	b2e4      	uxtb	r4, r4
 8014ea0:	4020      	ands	r0, r4
 8014ea2:	bd70      	pop	{r4, r5, r6, pc}

08014ea4 <uxr_serialize_WRITE_DATA_Payload_Data>:
 8014ea4:	b570      	push	{r4, r5, r6, lr}
 8014ea6:	2202      	movs	r2, #2
 8014ea8:	4605      	mov	r5, r0
 8014eaa:	460e      	mov	r6, r1
 8014eac:	f004 fa46 	bl	801933c <ucdr_serialize_array_uint8_t>
 8014eb0:	2202      	movs	r2, #2
 8014eb2:	4604      	mov	r4, r0
 8014eb4:	18b1      	adds	r1, r6, r2
 8014eb6:	4628      	mov	r0, r5
 8014eb8:	f004 fa40 	bl	801933c <ucdr_serialize_array_uint8_t>
 8014ebc:	4020      	ands	r0, r4
 8014ebe:	b2c0      	uxtb	r0, r0
 8014ec0:	bd70      	pop	{r4, r5, r6, pc}
 8014ec2:	bf00      	nop

08014ec4 <uxr_serialize_ACKNACK_Payload>:
 8014ec4:	b570      	push	{r4, r5, r6, lr}
 8014ec6:	460c      	mov	r4, r1
 8014ec8:	460e      	mov	r6, r1
 8014eca:	f834 1b02 	ldrh.w	r1, [r4], #2
 8014ece:	4605      	mov	r5, r0
 8014ed0:	f7f8 f880 	bl	800cfd4 <ucdr_serialize_uint16_t>
 8014ed4:	2202      	movs	r2, #2
 8014ed6:	4621      	mov	r1, r4
 8014ed8:	4604      	mov	r4, r0
 8014eda:	4628      	mov	r0, r5
 8014edc:	f004 fa2e 	bl	801933c <ucdr_serialize_array_uint8_t>
 8014ee0:	7931      	ldrb	r1, [r6, #4]
 8014ee2:	4004      	ands	r4, r0
 8014ee4:	4628      	mov	r0, r5
 8014ee6:	f7f8 f849 	bl	800cf7c <ucdr_serialize_uint8_t>
 8014eea:	b2e4      	uxtb	r4, r4
 8014eec:	4020      	ands	r0, r4
 8014eee:	bd70      	pop	{r4, r5, r6, pc}

08014ef0 <uxr_deserialize_ACKNACK_Payload>:
 8014ef0:	b570      	push	{r4, r5, r6, lr}
 8014ef2:	4605      	mov	r5, r0
 8014ef4:	460e      	mov	r6, r1
 8014ef6:	f7f8 f96d 	bl	800d1d4 <ucdr_deserialize_uint16_t>
 8014efa:	2202      	movs	r2, #2
 8014efc:	18b1      	adds	r1, r6, r2
 8014efe:	4604      	mov	r4, r0
 8014f00:	4628      	mov	r0, r5
 8014f02:	f004 fa7f 	bl	8019404 <ucdr_deserialize_array_uint8_t>
 8014f06:	1d31      	adds	r1, r6, #4
 8014f08:	4004      	ands	r4, r0
 8014f0a:	4628      	mov	r0, r5
 8014f0c:	f7f8 f84c 	bl	800cfa8 <ucdr_deserialize_uint8_t>
 8014f10:	b2e4      	uxtb	r4, r4
 8014f12:	4020      	ands	r0, r4
 8014f14:	bd70      	pop	{r4, r5, r6, pc}
 8014f16:	bf00      	nop

08014f18 <uxr_serialize_HEARTBEAT_Payload>:
 8014f18:	b570      	push	{r4, r5, r6, lr}
 8014f1a:	460d      	mov	r5, r1
 8014f1c:	8809      	ldrh	r1, [r1, #0]
 8014f1e:	4606      	mov	r6, r0
 8014f20:	f7f8 f858 	bl	800cfd4 <ucdr_serialize_uint16_t>
 8014f24:	8869      	ldrh	r1, [r5, #2]
 8014f26:	4604      	mov	r4, r0
 8014f28:	4630      	mov	r0, r6
 8014f2a:	f7f8 f853 	bl	800cfd4 <ucdr_serialize_uint16_t>
 8014f2e:	7929      	ldrb	r1, [r5, #4]
 8014f30:	4004      	ands	r4, r0
 8014f32:	4630      	mov	r0, r6
 8014f34:	f7f8 f822 	bl	800cf7c <ucdr_serialize_uint8_t>
 8014f38:	b2e4      	uxtb	r4, r4
 8014f3a:	4020      	ands	r0, r4
 8014f3c:	bd70      	pop	{r4, r5, r6, pc}
 8014f3e:	bf00      	nop

08014f40 <uxr_deserialize_HEARTBEAT_Payload>:
 8014f40:	b570      	push	{r4, r5, r6, lr}
 8014f42:	4605      	mov	r5, r0
 8014f44:	460e      	mov	r6, r1
 8014f46:	f7f8 f945 	bl	800d1d4 <ucdr_deserialize_uint16_t>
 8014f4a:	1cb1      	adds	r1, r6, #2
 8014f4c:	4604      	mov	r4, r0
 8014f4e:	4628      	mov	r0, r5
 8014f50:	f7f8 f940 	bl	800d1d4 <ucdr_deserialize_uint16_t>
 8014f54:	1d31      	adds	r1, r6, #4
 8014f56:	4004      	ands	r4, r0
 8014f58:	4628      	mov	r0, r5
 8014f5a:	f7f8 f825 	bl	800cfa8 <ucdr_deserialize_uint8_t>
 8014f5e:	b2e4      	uxtb	r4, r4
 8014f60:	4020      	ands	r0, r4
 8014f62:	bd70      	pop	{r4, r5, r6, pc}

08014f64 <uxr_serialize_TIMESTAMP_Payload>:
 8014f64:	b570      	push	{r4, r5, r6, lr}
 8014f66:	460d      	mov	r5, r1
 8014f68:	6809      	ldr	r1, [r1, #0]
 8014f6a:	4606      	mov	r6, r0
 8014f6c:	f7f8 fe36 	bl	800dbdc <ucdr_serialize_int32_t>
 8014f70:	6869      	ldr	r1, [r5, #4]
 8014f72:	4604      	mov	r4, r0
 8014f74:	4630      	mov	r0, r6
 8014f76:	f7f8 fa17 	bl	800d3a8 <ucdr_serialize_uint32_t>
 8014f7a:	4020      	ands	r0, r4
 8014f7c:	b2c0      	uxtb	r0, r0
 8014f7e:	bd70      	pop	{r4, r5, r6, pc}

08014f80 <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 8014f80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014f84:	4605      	mov	r5, r0
 8014f86:	460e      	mov	r6, r1
 8014f88:	f7f8 fec0 	bl	800dd0c <ucdr_deserialize_int32_t>
 8014f8c:	1d31      	adds	r1, r6, #4
 8014f8e:	4607      	mov	r7, r0
 8014f90:	4628      	mov	r0, r5
 8014f92:	f7f8 fb39 	bl	800d608 <ucdr_deserialize_uint32_t>
 8014f96:	f106 0108 	add.w	r1, r6, #8
 8014f9a:	4680      	mov	r8, r0
 8014f9c:	4628      	mov	r0, r5
 8014f9e:	f7f8 feb5 	bl	800dd0c <ucdr_deserialize_int32_t>
 8014fa2:	f106 010c 	add.w	r1, r6, #12
 8014fa6:	4604      	mov	r4, r0
 8014fa8:	4628      	mov	r0, r5
 8014faa:	f7f8 fb2d 	bl	800d608 <ucdr_deserialize_uint32_t>
 8014fae:	ea07 0708 	and.w	r7, r7, r8
 8014fb2:	403c      	ands	r4, r7
 8014fb4:	f106 0110 	add.w	r1, r6, #16
 8014fb8:	4004      	ands	r4, r0
 8014fba:	4628      	mov	r0, r5
 8014fbc:	f7f8 fea6 	bl	800dd0c <ucdr_deserialize_int32_t>
 8014fc0:	f106 0114 	add.w	r1, r6, #20
 8014fc4:	4607      	mov	r7, r0
 8014fc6:	4628      	mov	r0, r5
 8014fc8:	f7f8 fb1e 	bl	800d608 <ucdr_deserialize_uint32_t>
 8014fcc:	b2e4      	uxtb	r4, r4
 8014fce:	403c      	ands	r4, r7
 8014fd0:	4020      	ands	r0, r4
 8014fd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014fd6:	bf00      	nop

08014fd8 <uxr_serialize_SampleIdentity>:
 8014fd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014fdc:	220c      	movs	r2, #12
 8014fde:	4604      	mov	r4, r0
 8014fe0:	460d      	mov	r5, r1
 8014fe2:	f004 f9ab 	bl	801933c <ucdr_serialize_array_uint8_t>
 8014fe6:	2203      	movs	r2, #3
 8014fe8:	f105 010c 	add.w	r1, r5, #12
 8014fec:	4607      	mov	r7, r0
 8014fee:	4620      	mov	r0, r4
 8014ff0:	f004 f9a4 	bl	801933c <ucdr_serialize_array_uint8_t>
 8014ff4:	7be9      	ldrb	r1, [r5, #15]
 8014ff6:	4680      	mov	r8, r0
 8014ff8:	4620      	mov	r0, r4
 8014ffa:	f7f7 ffbf 	bl	800cf7c <ucdr_serialize_uint8_t>
 8014ffe:	6929      	ldr	r1, [r5, #16]
 8015000:	4606      	mov	r6, r0
 8015002:	4620      	mov	r0, r4
 8015004:	f7f8 fdea 	bl	800dbdc <ucdr_serialize_int32_t>
 8015008:	6969      	ldr	r1, [r5, #20]
 801500a:	4603      	mov	r3, r0
 801500c:	4620      	mov	r0, r4
 801500e:	ea07 0708 	and.w	r7, r7, r8
 8015012:	461c      	mov	r4, r3
 8015014:	f7f8 f9c8 	bl	800d3a8 <ucdr_serialize_uint32_t>
 8015018:	403e      	ands	r6, r7
 801501a:	4034      	ands	r4, r6
 801501c:	4020      	ands	r0, r4
 801501e:	b2c0      	uxtb	r0, r0
 8015020:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015024 <uxr_deserialize_SampleIdentity>:
 8015024:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015028:	220c      	movs	r2, #12
 801502a:	4604      	mov	r4, r0
 801502c:	460d      	mov	r5, r1
 801502e:	f004 f9e9 	bl	8019404 <ucdr_deserialize_array_uint8_t>
 8015032:	2203      	movs	r2, #3
 8015034:	f105 010c 	add.w	r1, r5, #12
 8015038:	4607      	mov	r7, r0
 801503a:	4620      	mov	r0, r4
 801503c:	f004 f9e2 	bl	8019404 <ucdr_deserialize_array_uint8_t>
 8015040:	f105 010f 	add.w	r1, r5, #15
 8015044:	4680      	mov	r8, r0
 8015046:	4620      	mov	r0, r4
 8015048:	f7f7 ffae 	bl	800cfa8 <ucdr_deserialize_uint8_t>
 801504c:	f105 0110 	add.w	r1, r5, #16
 8015050:	4606      	mov	r6, r0
 8015052:	4620      	mov	r0, r4
 8015054:	f7f8 fe5a 	bl	800dd0c <ucdr_deserialize_int32_t>
 8015058:	f105 0114 	add.w	r1, r5, #20
 801505c:	4603      	mov	r3, r0
 801505e:	4620      	mov	r0, r4
 8015060:	ea07 0708 	and.w	r7, r7, r8
 8015064:	461c      	mov	r4, r3
 8015066:	f7f8 facf 	bl	800d608 <ucdr_deserialize_uint32_t>
 801506a:	403e      	ands	r6, r7
 801506c:	4034      	ands	r4, r6
 801506e:	4020      	ands	r0, r4
 8015070:	b2c0      	uxtb	r0, r0
 8015072:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015076:	bf00      	nop

08015078 <rcl_client_get_rmw_handle>:
 8015078:	b118      	cbz	r0, 8015082 <rcl_client_get_rmw_handle+0xa>
 801507a:	6800      	ldr	r0, [r0, #0]
 801507c:	b108      	cbz	r0, 8015082 <rcl_client_get_rmw_handle+0xa>
 801507e:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8015082:	4770      	bx	lr

08015084 <rcl_send_request>:
 8015084:	b570      	push	{r4, r5, r6, lr}
 8015086:	b082      	sub	sp, #8
 8015088:	b1e8      	cbz	r0, 80150c6 <rcl_send_request+0x42>
 801508a:	4604      	mov	r4, r0
 801508c:	6800      	ldr	r0, [r0, #0]
 801508e:	b1d0      	cbz	r0, 80150c6 <rcl_send_request+0x42>
 8015090:	f8d0 3108 	ldr.w	r3, [r0, #264]	@ 0x108
 8015094:	b1bb      	cbz	r3, 80150c6 <rcl_send_request+0x42>
 8015096:	460e      	mov	r6, r1
 8015098:	b1d1      	cbz	r1, 80150d0 <rcl_send_request+0x4c>
 801509a:	4615      	mov	r5, r2
 801509c:	b1c2      	cbz	r2, 80150d0 <rcl_send_request+0x4c>
 801509e:	2105      	movs	r1, #5
 80150a0:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 80150a4:	f002 fd04 	bl	8017ab0 <__atomic_load_8>
 80150a8:	6823      	ldr	r3, [r4, #0]
 80150aa:	e9c5 0100 	strd	r0, r1, [r5]
 80150ae:	462a      	mov	r2, r5
 80150b0:	4631      	mov	r1, r6
 80150b2:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 80150b6:	f003 fbff 	bl	80188b8 <rmw_send_request>
 80150ba:	4606      	mov	r6, r0
 80150bc:	b160      	cbz	r0, 80150d8 <rcl_send_request+0x54>
 80150be:	2601      	movs	r6, #1
 80150c0:	4630      	mov	r0, r6
 80150c2:	b002      	add	sp, #8
 80150c4:	bd70      	pop	{r4, r5, r6, pc}
 80150c6:	f44f 76fa 	mov.w	r6, #500	@ 0x1f4
 80150ca:	4630      	mov	r0, r6
 80150cc:	b002      	add	sp, #8
 80150ce:	bd70      	pop	{r4, r5, r6, pc}
 80150d0:	260b      	movs	r6, #11
 80150d2:	4630      	mov	r0, r6
 80150d4:	b002      	add	sp, #8
 80150d6:	bd70      	pop	{r4, r5, r6, pc}
 80150d8:	6820      	ldr	r0, [r4, #0]
 80150da:	2105      	movs	r1, #5
 80150dc:	e9d5 2300 	ldrd	r2, r3, [r5]
 80150e0:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 80150e4:	9100      	str	r1, [sp, #0]
 80150e6:	f002 fd4f 	bl	8017b88 <__atomic_exchange_8>
 80150ea:	4630      	mov	r0, r6
 80150ec:	b002      	add	sp, #8
 80150ee:	bd70      	pop	{r4, r5, r6, pc}

080150f0 <rcl_take_response>:
 80150f0:	b570      	push	{r4, r5, r6, lr}
 80150f2:	468e      	mov	lr, r1
 80150f4:	460c      	mov	r4, r1
 80150f6:	4616      	mov	r6, r2
 80150f8:	4605      	mov	r5, r0
 80150fa:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80150fe:	b08c      	sub	sp, #48	@ 0x30
 8015100:	f10d 0c18 	add.w	ip, sp, #24
 8015104:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015108:	e89e 0003 	ldmia.w	lr, {r0, r1}
 801510c:	e88c 0003 	stmia.w	ip, {r0, r1}
 8015110:	b35d      	cbz	r5, 801516a <rcl_take_response+0x7a>
 8015112:	682b      	ldr	r3, [r5, #0]
 8015114:	b34b      	cbz	r3, 801516a <rcl_take_response+0x7a>
 8015116:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 801511a:	b330      	cbz	r0, 801516a <rcl_take_response+0x7a>
 801511c:	b346      	cbz	r6, 8015170 <rcl_take_response+0x80>
 801511e:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 8015178 <rcl_take_response+0x88>
 8015122:	2300      	movs	r3, #0
 8015124:	f88d 3007 	strb.w	r3, [sp, #7]
 8015128:	4632      	mov	r2, r6
 801512a:	f10d 0307 	add.w	r3, sp, #7
 801512e:	a902      	add	r1, sp, #8
 8015130:	ed8d 7b02 	vstr	d7, [sp, #8]
 8015134:	ed8d 7b04 	vstr	d7, [sp, #16]
 8015138:	f003 fcc6 	bl	8018ac8 <rmw_take_response>
 801513c:	4605      	mov	r5, r0
 801513e:	b9c8      	cbnz	r0, 8015174 <rcl_take_response+0x84>
 8015140:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8015144:	f240 13f5 	movw	r3, #501	@ 0x1f5
 8015148:	2a00      	cmp	r2, #0
 801514a:	bf08      	it	eq
 801514c:	461d      	moveq	r5, r3
 801514e:	f10d 0e18 	add.w	lr, sp, #24
 8015152:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8015156:	46a4      	mov	ip, r4
 8015158:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801515c:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8015160:	e88c 0003 	stmia.w	ip, {r0, r1}
 8015164:	4628      	mov	r0, r5
 8015166:	b00c      	add	sp, #48	@ 0x30
 8015168:	bd70      	pop	{r4, r5, r6, pc}
 801516a:	f44f 75fa 	mov.w	r5, #500	@ 0x1f4
 801516e:	e7ee      	b.n	801514e <rcl_take_response+0x5e>
 8015170:	250b      	movs	r5, #11
 8015172:	e7ec      	b.n	801514e <rcl_take_response+0x5e>
 8015174:	2501      	movs	r5, #1
 8015176:	e7ea      	b.n	801514e <rcl_take_response+0x5e>
	...

08015180 <rcl_client_is_valid>:
 8015180:	b130      	cbz	r0, 8015190 <rcl_client_is_valid+0x10>
 8015182:	6800      	ldr	r0, [r0, #0]
 8015184:	b120      	cbz	r0, 8015190 <rcl_client_is_valid+0x10>
 8015186:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 801518a:	3800      	subs	r0, #0
 801518c:	bf18      	it	ne
 801518e:	2001      	movne	r0, #1
 8015190:	4770      	bx	lr
 8015192:	bf00      	nop

08015194 <rcl_convert_rmw_ret_to_rcl_ret>:
 8015194:	280b      	cmp	r0, #11
 8015196:	dc0d      	bgt.n	80151b4 <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 8015198:	2800      	cmp	r0, #0
 801519a:	db09      	blt.n	80151b0 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 801519c:	280b      	cmp	r0, #11
 801519e:	d807      	bhi.n	80151b0 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 80151a0:	e8df f000 	tbb	[pc, r0]
 80151a4:	07060607 	.word	0x07060607
 80151a8:	06060606 	.word	0x06060606
 80151ac:	07070606 	.word	0x07070606
 80151b0:	2001      	movs	r0, #1
 80151b2:	4770      	bx	lr
 80151b4:	28cb      	cmp	r0, #203	@ 0xcb
 80151b6:	bf18      	it	ne
 80151b8:	2001      	movne	r0, #1
 80151ba:	4770      	bx	lr

080151bc <rcl_get_zero_initialized_context>:
 80151bc:	4a03      	ldr	r2, [pc, #12]	@ (80151cc <rcl_get_zero_initialized_context+0x10>)
 80151be:	4603      	mov	r3, r0
 80151c0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80151c4:	e883 0003 	stmia.w	r3, {r0, r1}
 80151c8:	4618      	mov	r0, r3
 80151ca:	4770      	bx	lr
 80151cc:	0801e94c 	.word	0x0801e94c

080151d0 <rcl_context_is_valid>:
 80151d0:	b118      	cbz	r0, 80151da <rcl_context_is_valid+0xa>
 80151d2:	6840      	ldr	r0, [r0, #4]
 80151d4:	3800      	subs	r0, #0
 80151d6:	bf18      	it	ne
 80151d8:	2001      	movne	r0, #1
 80151da:	4770      	bx	lr

080151dc <__cleanup_context>:
 80151dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80151e0:	4606      	mov	r6, r0
 80151e2:	6800      	ldr	r0, [r0, #0]
 80151e4:	2300      	movs	r3, #0
 80151e6:	6073      	str	r3, [r6, #4]
 80151e8:	2800      	cmp	r0, #0
 80151ea:	d049      	beq.n	8015280 <__cleanup_context+0xa4>
 80151ec:	6947      	ldr	r7, [r0, #20]
 80151ee:	f8d0 8004 	ldr.w	r8, [r0, #4]
 80151f2:	f8d0 9010 	ldr.w	r9, [r0, #16]
 80151f6:	b137      	cbz	r7, 8015206 <__cleanup_context+0x2a>
 80151f8:	3014      	adds	r0, #20
 80151fa:	f7f9 fa79 	bl	800e6f0 <rcl_init_options_fini>
 80151fe:	4607      	mov	r7, r0
 8015200:	2800      	cmp	r0, #0
 8015202:	d144      	bne.n	801528e <__cleanup_context+0xb2>
 8015204:	6830      	ldr	r0, [r6, #0]
 8015206:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8015208:	b143      	cbz	r3, 801521c <__cleanup_context+0x40>
 801520a:	3028      	adds	r0, #40	@ 0x28
 801520c:	f7fa fece 	bl	800ffac <rmw_context_fini>
 8015210:	b118      	cbz	r0, 801521a <__cleanup_context+0x3e>
 8015212:	2f00      	cmp	r7, #0
 8015214:	d03e      	beq.n	8015294 <__cleanup_context+0xb8>
 8015216:	f7fa fbd7 	bl	800f9c8 <rcutils_reset_error>
 801521a:	6830      	ldr	r0, [r6, #0]
 801521c:	6a03      	ldr	r3, [r0, #32]
 801521e:	b1db      	cbz	r3, 8015258 <__cleanup_context+0x7c>
 8015220:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 8015224:	2a01      	cmp	r2, #1
 8015226:	f17c 0100 	sbcs.w	r1, ip, #0
 801522a:	db11      	blt.n	8015250 <__cleanup_context+0x74>
 801522c:	2400      	movs	r4, #0
 801522e:	4625      	mov	r5, r4
 8015230:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8015234:	4649      	mov	r1, r9
 8015236:	b1b8      	cbz	r0, 8015268 <__cleanup_context+0x8c>
 8015238:	47c0      	blx	r8
 801523a:	6833      	ldr	r3, [r6, #0]
 801523c:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 8015240:	3401      	adds	r4, #1
 8015242:	f145 0500 	adc.w	r5, r5, #0
 8015246:	4294      	cmp	r4, r2
 8015248:	eb75 010c 	sbcs.w	r1, r5, ip
 801524c:	6a1b      	ldr	r3, [r3, #32]
 801524e:	dbef      	blt.n	8015230 <__cleanup_context+0x54>
 8015250:	4618      	mov	r0, r3
 8015252:	4649      	mov	r1, r9
 8015254:	47c0      	blx	r8
 8015256:	6830      	ldr	r0, [r6, #0]
 8015258:	4649      	mov	r1, r9
 801525a:	47c0      	blx	r8
 801525c:	2300      	movs	r3, #0
 801525e:	e9c6 3300 	strd	r3, r3, [r6]
 8015262:	4638      	mov	r0, r7
 8015264:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015268:	3401      	adds	r4, #1
 801526a:	f145 0500 	adc.w	r5, r5, #0
 801526e:	4294      	cmp	r4, r2
 8015270:	eb75 010c 	sbcs.w	r1, r5, ip
 8015274:	dbdc      	blt.n	8015230 <__cleanup_context+0x54>
 8015276:	4618      	mov	r0, r3
 8015278:	4649      	mov	r1, r9
 801527a:	47c0      	blx	r8
 801527c:	6830      	ldr	r0, [r6, #0]
 801527e:	e7eb      	b.n	8015258 <__cleanup_context+0x7c>
 8015280:	4607      	mov	r7, r0
 8015282:	2300      	movs	r3, #0
 8015284:	e9c6 3300 	strd	r3, r3, [r6]
 8015288:	4638      	mov	r0, r7
 801528a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801528e:	f7fa fb9b 	bl	800f9c8 <rcutils_reset_error>
 8015292:	e7b7      	b.n	8015204 <__cleanup_context+0x28>
 8015294:	f7ff ff7e 	bl	8015194 <rcl_convert_rmw_ret_to_rcl_ret>
 8015298:	4607      	mov	r7, r0
 801529a:	e7bc      	b.n	8015216 <__cleanup_context+0x3a>

0801529c <rcl_init>:
 801529c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80152a0:	1e05      	subs	r5, r0, #0
 80152a2:	b09c      	sub	sp, #112	@ 0x70
 80152a4:	460e      	mov	r6, r1
 80152a6:	4690      	mov	r8, r2
 80152a8:	461f      	mov	r7, r3
 80152aa:	f340 8099 	ble.w	80153e0 <rcl_init+0x144>
 80152ae:	2900      	cmp	r1, #0
 80152b0:	f000 8099 	beq.w	80153e6 <rcl_init+0x14a>
 80152b4:	f1a1 0e04 	sub.w	lr, r1, #4
 80152b8:	f04f 0c00 	mov.w	ip, #0
 80152bc:	f85e 4f04 	ldr.w	r4, [lr, #4]!
 80152c0:	f10c 0c01 	add.w	ip, ip, #1
 80152c4:	2c00      	cmp	r4, #0
 80152c6:	f000 808e 	beq.w	80153e6 <rcl_init+0x14a>
 80152ca:	4565      	cmp	r5, ip
 80152cc:	d1f6      	bne.n	80152bc <rcl_init+0x20>
 80152ce:	f1b8 0f00 	cmp.w	r8, #0
 80152d2:	f000 8088 	beq.w	80153e6 <rcl_init+0x14a>
 80152d6:	f8d8 4000 	ldr.w	r4, [r8]
 80152da:	2c00      	cmp	r4, #0
 80152dc:	f000 8083 	beq.w	80153e6 <rcl_init+0x14a>
 80152e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80152e2:	f10d 0c5c 	add.w	ip, sp, #92	@ 0x5c
 80152e6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80152ea:	6823      	ldr	r3, [r4, #0]
 80152ec:	f8cc 3000 	str.w	r3, [ip]
 80152f0:	a817      	add	r0, sp, #92	@ 0x5c
 80152f2:	f7fa fb43 	bl	800f97c <rcutils_allocator_is_valid>
 80152f6:	2800      	cmp	r0, #0
 80152f8:	d075      	beq.n	80153e6 <rcl_init+0x14a>
 80152fa:	2f00      	cmp	r7, #0
 80152fc:	d073      	beq.n	80153e6 <rcl_init+0x14a>
 80152fe:	683b      	ldr	r3, [r7, #0]
 8015300:	2b00      	cmp	r3, #0
 8015302:	d175      	bne.n	80153f0 <rcl_init+0x154>
 8015304:	e9dd 321a 	ldrd	r3, r2, [sp, #104]	@ 0x68
 8015308:	2178      	movs	r1, #120	@ 0x78
 801530a:	2001      	movs	r0, #1
 801530c:	4798      	blx	r3
 801530e:	4604      	mov	r4, r0
 8015310:	6038      	str	r0, [r7, #0]
 8015312:	2800      	cmp	r0, #0
 8015314:	f000 80a0 	beq.w	8015458 <rcl_init+0x1bc>
 8015318:	a802      	add	r0, sp, #8
 801531a:	f002 ff09 	bl	8018130 <rmw_get_zero_initialized_context>
 801531e:	a902      	add	r1, sp, #8
 8015320:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8015324:	2250      	movs	r2, #80	@ 0x50
 8015326:	ac17      	add	r4, sp, #92	@ 0x5c
 8015328:	f006 f8e9 	bl	801b4fe <memcpy>
 801532c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801532e:	f8d7 e000 	ldr.w	lr, [r7]
 8015332:	46f4      	mov	ip, lr
 8015334:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015338:	6823      	ldr	r3, [r4, #0]
 801533a:	f8cc 3000 	str.w	r3, [ip]
 801533e:	f10e 0114 	add.w	r1, lr, #20
 8015342:	4640      	mov	r0, r8
 8015344:	f7f9 f9fe 	bl	800e744 <rcl_init_options_copy>
 8015348:	4604      	mov	r4, r0
 801534a:	2800      	cmp	r0, #0
 801534c:	d144      	bne.n	80153d8 <rcl_init+0x13c>
 801534e:	f8d7 9000 	ldr.w	r9, [r7]
 8015352:	ea4f 78e5 	mov.w	r8, r5, asr #31
 8015356:	f8c9 0020 	str.w	r0, [r9, #32]
 801535a:	f8c9 5018 	str.w	r5, [r9, #24]
 801535e:	f8c9 801c 	str.w	r8, [r9, #28]
 8015362:	2d00      	cmp	r5, #0
 8015364:	d04b      	beq.n	80153fe <rcl_init+0x162>
 8015366:	2e00      	cmp	r6, #0
 8015368:	d049      	beq.n	80153fe <rcl_init+0x162>
 801536a:	e9dd 321a 	ldrd	r3, r2, [sp, #104]	@ 0x68
 801536e:	2104      	movs	r1, #4
 8015370:	4628      	mov	r0, r5
 8015372:	4798      	blx	r3
 8015374:	f8c9 0020 	str.w	r0, [r9, #32]
 8015378:	f8d7 9000 	ldr.w	r9, [r7]
 801537c:	f8d9 3020 	ldr.w	r3, [r9, #32]
 8015380:	46ca      	mov	sl, r9
 8015382:	b343      	cbz	r3, 80153d6 <rcl_init+0x13a>
 8015384:	2d01      	cmp	r5, #1
 8015386:	f178 0300 	sbcs.w	r3, r8, #0
 801538a:	db38      	blt.n	80153fe <rcl_init+0x162>
 801538c:	2400      	movs	r4, #0
 801538e:	3e04      	subs	r6, #4
 8015390:	46a1      	mov	r9, r4
 8015392:	e00b      	b.n	80153ac <rcl_init+0x110>
 8015394:	6831      	ldr	r1, [r6, #0]
 8015396:	f006 f8b2 	bl	801b4fe <memcpy>
 801539a:	3401      	adds	r4, #1
 801539c:	f149 0900 	adc.w	r9, r9, #0
 80153a0:	45c8      	cmp	r8, r9
 80153a2:	bf08      	it	eq
 80153a4:	42a5      	cmpeq	r5, r4
 80153a6:	d028      	beq.n	80153fa <rcl_init+0x15e>
 80153a8:	f8d7 a000 	ldr.w	sl, [r7]
 80153ac:	f856 0f04 	ldr.w	r0, [r6, #4]!
 80153b0:	f7ea ff40 	bl	8000234 <strlen>
 80153b4:	1c42      	adds	r2, r0, #1
 80153b6:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80153b8:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 80153ba:	f8da a020 	ldr.w	sl, [sl, #32]
 80153be:	9201      	str	r2, [sp, #4]
 80153c0:	4610      	mov	r0, r2
 80153c2:	4798      	blx	r3
 80153c4:	683b      	ldr	r3, [r7, #0]
 80153c6:	f84a 0024 	str.w	r0, [sl, r4, lsl #2]
 80153ca:	6a1b      	ldr	r3, [r3, #32]
 80153cc:	9a01      	ldr	r2, [sp, #4]
 80153ce:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80153d2:	2800      	cmp	r0, #0
 80153d4:	d1de      	bne.n	8015394 <rcl_init+0xf8>
 80153d6:	240a      	movs	r4, #10
 80153d8:	4638      	mov	r0, r7
 80153da:	f7ff feff 	bl	80151dc <__cleanup_context>
 80153de:	e003      	b.n	80153e8 <rcl_init+0x14c>
 80153e0:	2900      	cmp	r1, #0
 80153e2:	f43f af74 	beq.w	80152ce <rcl_init+0x32>
 80153e6:	240b      	movs	r4, #11
 80153e8:	4620      	mov	r0, r4
 80153ea:	b01c      	add	sp, #112	@ 0x70
 80153ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80153f0:	2464      	movs	r4, #100	@ 0x64
 80153f2:	4620      	mov	r0, r4
 80153f4:	b01c      	add	sp, #112	@ 0x70
 80153f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80153fa:	f8d7 9000 	ldr.w	r9, [r7]
 80153fe:	491d      	ldr	r1, [pc, #116]	@ (8015474 <rcl_init+0x1d8>)
 8015400:	680b      	ldr	r3, [r1, #0]
 8015402:	3301      	adds	r3, #1
 8015404:	d023      	beq.n	801544e <rcl_init+0x1b2>
 8015406:	600b      	str	r3, [r1, #0]
 8015408:	461a      	mov	r2, r3
 801540a:	2400      	movs	r4, #0
 801540c:	f8d9 0014 	ldr.w	r0, [r9, #20]
 8015410:	607b      	str	r3, [r7, #4]
 8015412:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8015414:	6182      	str	r2, [r0, #24]
 8015416:	3301      	adds	r3, #1
 8015418:	61c4      	str	r4, [r0, #28]
 801541a:	d01f      	beq.n	801545c <rcl_init+0x1c0>
 801541c:	f890 3030 	ldrb.w	r3, [r0, #48]	@ 0x30
 8015420:	b94b      	cbnz	r3, 8015436 <rcl_init+0x19a>
 8015422:	3030      	adds	r0, #48	@ 0x30
 8015424:	f000 f828 	bl	8015478 <rcl_get_localhost_only>
 8015428:	4604      	mov	r4, r0
 801542a:	2800      	cmp	r0, #0
 801542c:	d1d4      	bne.n	80153d8 <rcl_init+0x13c>
 801542e:	f8d7 9000 	ldr.w	r9, [r7]
 8015432:	f8d9 0014 	ldr.w	r0, [r9, #20]
 8015436:	f109 0128 	add.w	r1, r9, #40	@ 0x28
 801543a:	3018      	adds	r0, #24
 801543c:	f7fa fc80 	bl	800fd40 <rmw_init>
 8015440:	4604      	mov	r4, r0
 8015442:	2800      	cmp	r0, #0
 8015444:	d0d0      	beq.n	80153e8 <rcl_init+0x14c>
 8015446:	f7ff fea5 	bl	8015194 <rcl_convert_rmw_ret_to_rcl_ret>
 801544a:	4604      	mov	r4, r0
 801544c:	e7c4      	b.n	80153d8 <rcl_init+0x13c>
 801544e:	2201      	movs	r2, #1
 8015450:	461c      	mov	r4, r3
 8015452:	600a      	str	r2, [r1, #0]
 8015454:	4613      	mov	r3, r2
 8015456:	e7d9      	b.n	801540c <rcl_init+0x170>
 8015458:	240a      	movs	r4, #10
 801545a:	e7c5      	b.n	80153e8 <rcl_init+0x14c>
 801545c:	3024      	adds	r0, #36	@ 0x24
 801545e:	f004 fe5f 	bl	801a120 <rcl_get_default_domain_id>
 8015462:	4604      	mov	r4, r0
 8015464:	2800      	cmp	r0, #0
 8015466:	d1b7      	bne.n	80153d8 <rcl_init+0x13c>
 8015468:	f8d7 9000 	ldr.w	r9, [r7]
 801546c:	f8d9 0014 	ldr.w	r0, [r9, #20]
 8015470:	e7d4      	b.n	801541c <rcl_init+0x180>
 8015472:	bf00      	nop
 8015474:	2000b568 	.word	0x2000b568

08015478 <rcl_get_localhost_only>:
 8015478:	b510      	push	{r4, lr}
 801547a:	b082      	sub	sp, #8
 801547c:	2300      	movs	r3, #0
 801547e:	9301      	str	r3, [sp, #4]
 8015480:	b1b8      	cbz	r0, 80154b2 <rcl_get_localhost_only+0x3a>
 8015482:	4604      	mov	r4, r0
 8015484:	a901      	add	r1, sp, #4
 8015486:	480c      	ldr	r0, [pc, #48]	@ (80154b8 <rcl_get_localhost_only+0x40>)
 8015488:	f002 fbb6 	bl	8017bf8 <rcutils_get_env>
 801548c:	b110      	cbz	r0, 8015494 <rcl_get_localhost_only+0x1c>
 801548e:	2001      	movs	r0, #1
 8015490:	b002      	add	sp, #8
 8015492:	bd10      	pop	{r4, pc}
 8015494:	9b01      	ldr	r3, [sp, #4]
 8015496:	b113      	cbz	r3, 801549e <rcl_get_localhost_only+0x26>
 8015498:	781a      	ldrb	r2, [r3, #0]
 801549a:	2a31      	cmp	r2, #49	@ 0x31
 801549c:	d004      	beq.n	80154a8 <rcl_get_localhost_only+0x30>
 801549e:	2302      	movs	r3, #2
 80154a0:	2000      	movs	r0, #0
 80154a2:	7023      	strb	r3, [r4, #0]
 80154a4:	b002      	add	sp, #8
 80154a6:	bd10      	pop	{r4, pc}
 80154a8:	785b      	ldrb	r3, [r3, #1]
 80154aa:	2b00      	cmp	r3, #0
 80154ac:	d1f7      	bne.n	801549e <rcl_get_localhost_only+0x26>
 80154ae:	2301      	movs	r3, #1
 80154b0:	e7f6      	b.n	80154a0 <rcl_get_localhost_only+0x28>
 80154b2:	200b      	movs	r0, #11
 80154b4:	b002      	add	sp, #8
 80154b6:	bd10      	pop	{r4, pc}
 80154b8:	0801e058 	.word	0x0801e058

080154bc <rcl_get_zero_initialized_node>:
 80154bc:	4a03      	ldr	r2, [pc, #12]	@ (80154cc <rcl_get_zero_initialized_node+0x10>)
 80154be:	4603      	mov	r3, r0
 80154c0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80154c4:	e883 0003 	stmia.w	r3, {r0, r1}
 80154c8:	4618      	mov	r0, r3
 80154ca:	4770      	bx	lr
 80154cc:	0801e954 	.word	0x0801e954

080154d0 <rcl_node_init>:
 80154d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80154d4:	b0a9      	sub	sp, #164	@ 0xa4
 80154d6:	4604      	mov	r4, r0
 80154d8:	f8dd 80c8 	ldr.w	r8, [sp, #200]	@ 0xc8
 80154dc:	a823      	add	r0, sp, #140	@ 0x8c
 80154de:	460e      	mov	r6, r1
 80154e0:	4615      	mov	r5, r2
 80154e2:	461f      	mov	r7, r3
 80154e4:	f005 f890 	bl	801a608 <rcl_guard_condition_get_default_options>
 80154e8:	f1b8 0f00 	cmp.w	r8, #0
 80154ec:	f000 80e6 	beq.w	80156bc <rcl_node_init+0x1ec>
 80154f0:	4640      	mov	r0, r8
 80154f2:	f7fa fa43 	bl	800f97c <rcutils_allocator_is_valid>
 80154f6:	2800      	cmp	r0, #0
 80154f8:	f000 80e0 	beq.w	80156bc <rcl_node_init+0x1ec>
 80154fc:	2e00      	cmp	r6, #0
 80154fe:	f000 80dd 	beq.w	80156bc <rcl_node_init+0x1ec>
 8015502:	2d00      	cmp	r5, #0
 8015504:	f000 80da 	beq.w	80156bc <rcl_node_init+0x1ec>
 8015508:	2c00      	cmp	r4, #0
 801550a:	f000 80d7 	beq.w	80156bc <rcl_node_init+0x1ec>
 801550e:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8015512:	f1b9 0f00 	cmp.w	r9, #0
 8015516:	f040 80fd 	bne.w	8015714 <rcl_node_init+0x244>
 801551a:	2f00      	cmp	r7, #0
 801551c:	f000 80ce 	beq.w	80156bc <rcl_node_init+0x1ec>
 8015520:	4638      	mov	r0, r7
 8015522:	f7ff fe55 	bl	80151d0 <rcl_context_is_valid>
 8015526:	4682      	mov	sl, r0
 8015528:	2800      	cmp	r0, #0
 801552a:	f000 80cd 	beq.w	80156c8 <rcl_node_init+0x1f8>
 801552e:	464a      	mov	r2, r9
 8015530:	a922      	add	r1, sp, #136	@ 0x88
 8015532:	4630      	mov	r0, r6
 8015534:	f8cd 9088 	str.w	r9, [sp, #136]	@ 0x88
 8015538:	f002 ff98 	bl	801846c <rmw_validate_node_name>
 801553c:	4681      	mov	r9, r0
 801553e:	2800      	cmp	r0, #0
 8015540:	f040 80be 	bne.w	80156c0 <rcl_node_init+0x1f0>
 8015544:	9822      	ldr	r0, [sp, #136]	@ 0x88
 8015546:	2800      	cmp	r0, #0
 8015548:	f040 80f0 	bne.w	801572c <rcl_node_init+0x25c>
 801554c:	4628      	mov	r0, r5
 801554e:	f7ea fe71 	bl	8000234 <strlen>
 8015552:	2800      	cmp	r0, #0
 8015554:	f040 80bb 	bne.w	80156ce <rcl_node_init+0x1fe>
 8015558:	4d7c      	ldr	r5, [pc, #496]	@ (801574c <rcl_node_init+0x27c>)
 801555a:	a922      	add	r1, sp, #136	@ 0x88
 801555c:	2200      	movs	r2, #0
 801555e:	4628      	mov	r0, r5
 8015560:	f002 ff66 	bl	8018430 <rmw_validate_namespace>
 8015564:	4681      	mov	r9, r0
 8015566:	2800      	cmp	r0, #0
 8015568:	f040 80aa 	bne.w	80156c0 <rcl_node_init+0x1f0>
 801556c:	4682      	mov	sl, r0
 801556e:	9822      	ldr	r0, [sp, #136]	@ 0x88
 8015570:	2800      	cmp	r0, #0
 8015572:	f040 80e0 	bne.w	8015736 <rcl_node_init+0x266>
 8015576:	f8d8 3000 	ldr.w	r3, [r8]
 801557a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801557e:	2078      	movs	r0, #120	@ 0x78
 8015580:	4798      	blx	r3
 8015582:	4681      	mov	r9, r0
 8015584:	6060      	str	r0, [r4, #4]
 8015586:	2800      	cmp	r0, #0
 8015588:	f000 80ca 	beq.w	8015720 <rcl_node_init+0x250>
 801558c:	2200      	movs	r2, #0
 801558e:	2300      	movs	r3, #0
 8015590:	e9c9 231a 	strd	r2, r3, [r9, #104]	@ 0x68
 8015594:	e9c9 231c 	strd	r2, r3, [r9, #112]	@ 0x70
 8015598:	a808      	add	r0, sp, #32
 801559a:	f000 f907 	bl	80157ac <rcl_node_get_default_options>
 801559e:	a908      	add	r1, sp, #32
 80155a0:	4648      	mov	r0, r9
 80155a2:	2268      	movs	r2, #104	@ 0x68
 80155a4:	f005 ffab 	bl	801b4fe <memcpy>
 80155a8:	6861      	ldr	r1, [r4, #4]
 80155aa:	6027      	str	r7, [r4, #0]
 80155ac:	4640      	mov	r0, r8
 80155ae:	f000 f90b 	bl	80157c8 <rcl_node_options_copy>
 80155b2:	2800      	cmp	r0, #0
 80155b4:	d158      	bne.n	8015668 <rcl_node_init+0x198>
 80155b6:	4628      	mov	r0, r5
 80155b8:	f7ea fe3c 	bl	8000234 <strlen>
 80155bc:	4428      	add	r0, r5
 80155be:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 80155c2:	e9cd 5603 	strd	r5, r6, [sp, #12]
 80155c6:	2b2f      	cmp	r3, #47	@ 0x2f
 80155c8:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80155cc:	9300      	str	r3, [sp, #0]
 80155ce:	bf0c      	ite	eq
 80155d0:	4b5f      	ldreq	r3, [pc, #380]	@ (8015750 <rcl_node_init+0x280>)
 80155d2:	4b60      	ldrne	r3, [pc, #384]	@ (8015754 <rcl_node_init+0x284>)
 80155d4:	9302      	str	r3, [sp, #8]
 80155d6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80155da:	9301      	str	r3, [sp, #4]
 80155dc:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 80155e0:	f8d4 9004 	ldr.w	r9, [r4, #4]
 80155e4:	f002 fb20 	bl	8017c28 <rcutils_format_string_limit>
 80155e8:	6823      	ldr	r3, [r4, #0]
 80155ea:	f8c9 0074 	str.w	r0, [r9, #116]	@ 0x74
 80155ee:	6818      	ldr	r0, [r3, #0]
 80155f0:	4631      	mov	r1, r6
 80155f2:	3028      	adds	r0, #40	@ 0x28
 80155f4:	462a      	mov	r2, r5
 80155f6:	6866      	ldr	r6, [r4, #4]
 80155f8:	f7fa fd84 	bl	8010104 <rmw_create_node>
 80155fc:	6863      	ldr	r3, [r4, #4]
 80155fe:	66b0      	str	r0, [r6, #104]	@ 0x68
 8015600:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 8015602:	2800      	cmp	r0, #0
 8015604:	d032      	beq.n	801566c <rcl_node_init+0x19c>
 8015606:	f7fa fe11 	bl	801022c <rmw_node_get_graph_guard_condition>
 801560a:	4681      	mov	r9, r0
 801560c:	b360      	cbz	r0, 8015668 <rcl_node_init+0x198>
 801560e:	f8d8 3000 	ldr.w	r3, [r8]
 8015612:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8015616:	6866      	ldr	r6, [r4, #4]
 8015618:	2008      	movs	r0, #8
 801561a:	4798      	blx	r3
 801561c:	6863      	ldr	r3, [r4, #4]
 801561e:	66f0      	str	r0, [r6, #108]	@ 0x6c
 8015620:	f8d3 b06c 	ldr.w	fp, [r3, #108]	@ 0x6c
 8015624:	f1bb 0f00 	cmp.w	fp, #0
 8015628:	d020      	beq.n	801566c <rcl_node_init+0x19c>
 801562a:	a806      	add	r0, sp, #24
 801562c:	f004 ff10 	bl	801a450 <rcl_get_zero_initialized_guard_condition>
 8015630:	a806      	add	r0, sp, #24
 8015632:	c803      	ldmia	r0, {r0, r1}
 8015634:	6863      	ldr	r3, [r4, #4]
 8015636:	46c4      	mov	ip, r8
 8015638:	f8d3 e06c 	ldr.w	lr, [r3, #108]	@ 0x6c
 801563c:	e88b 0003 	stmia.w	fp, {r0, r1}
 8015640:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8015644:	ae23      	add	r6, sp, #140	@ 0x8c
 8015646:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8015648:	f8dc 3000 	ldr.w	r3, [ip]
 801564c:	6033      	str	r3, [r6, #0]
 801564e:	ab28      	add	r3, sp, #160	@ 0xa0
 8015650:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 8015654:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8015658:	4649      	mov	r1, r9
 801565a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801565c:	463a      	mov	r2, r7
 801565e:	4670      	mov	r0, lr
 8015660:	f004 ff4c 	bl	801a4fc <rcl_guard_condition_init_from_rmw>
 8015664:	4681      	mov	r9, r0
 8015666:	b328      	cbz	r0, 80156b4 <rcl_node_init+0x1e4>
 8015668:	6863      	ldr	r3, [r4, #4]
 801566a:	b1f3      	cbz	r3, 80156aa <rcl_node_init+0x1da>
 801566c:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 801566e:	b128      	cbz	r0, 801567c <rcl_node_init+0x1ac>
 8015670:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8015674:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8015678:	4798      	blx	r3
 801567a:	6863      	ldr	r3, [r4, #4]
 801567c:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 801567e:	b110      	cbz	r0, 8015686 <rcl_node_init+0x1b6>
 8015680:	f7fa fd58 	bl	8010134 <rmw_destroy_node>
 8015684:	6863      	ldr	r3, [r4, #4]
 8015686:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 8015688:	b148      	cbz	r0, 801569e <rcl_node_init+0x1ce>
 801568a:	f004 ff97 	bl	801a5bc <rcl_guard_condition_fini>
 801568e:	6863      	ldr	r3, [r4, #4]
 8015690:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8015694:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 8015696:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801569a:	4798      	blx	r3
 801569c:	6863      	ldr	r3, [r4, #4]
 801569e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80156a2:	4618      	mov	r0, r3
 80156a4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80156a8:	4798      	blx	r3
 80156aa:	2300      	movs	r3, #0
 80156ac:	e9c4 3300 	strd	r3, r3, [r4]
 80156b0:	f04f 0901 	mov.w	r9, #1
 80156b4:	f1ba 0f00 	cmp.w	sl, #0
 80156b8:	d125      	bne.n	8015706 <rcl_node_init+0x236>
 80156ba:	e001      	b.n	80156c0 <rcl_node_init+0x1f0>
 80156bc:	f04f 090b 	mov.w	r9, #11
 80156c0:	4648      	mov	r0, r9
 80156c2:	b029      	add	sp, #164	@ 0xa4
 80156c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80156c8:	f04f 0965 	mov.w	r9, #101	@ 0x65
 80156cc:	e7f8      	b.n	80156c0 <rcl_node_init+0x1f0>
 80156ce:	782b      	ldrb	r3, [r5, #0]
 80156d0:	2b2f      	cmp	r3, #47	@ 0x2f
 80156d2:	f43f af42 	beq.w	801555a <rcl_node_init+0x8a>
 80156d6:	9503      	str	r5, [sp, #12]
 80156d8:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80156dc:	9300      	str	r3, [sp, #0]
 80156de:	4b1e      	ldr	r3, [pc, #120]	@ (8015758 <rcl_node_init+0x288>)
 80156e0:	9302      	str	r3, [sp, #8]
 80156e2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80156e6:	9301      	str	r3, [sp, #4]
 80156e8:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 80156ec:	f002 fa9c 	bl	8017c28 <rcutils_format_string_limit>
 80156f0:	4605      	mov	r5, r0
 80156f2:	b340      	cbz	r0, 8015746 <rcl_node_init+0x276>
 80156f4:	2200      	movs	r2, #0
 80156f6:	a922      	add	r1, sp, #136	@ 0x88
 80156f8:	9222      	str	r2, [sp, #136]	@ 0x88
 80156fa:	f002 fe99 	bl	8018430 <rmw_validate_namespace>
 80156fe:	4681      	mov	r9, r0
 8015700:	2800      	cmp	r0, #0
 8015702:	f43f af34 	beq.w	801556e <rcl_node_init+0x9e>
 8015706:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801570a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801570e:	4628      	mov	r0, r5
 8015710:	4798      	blx	r3
 8015712:	e7d5      	b.n	80156c0 <rcl_node_init+0x1f0>
 8015714:	f04f 0964 	mov.w	r9, #100	@ 0x64
 8015718:	4648      	mov	r0, r9
 801571a:	b029      	add	sp, #164	@ 0xa4
 801571c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015720:	f04f 090a 	mov.w	r9, #10
 8015724:	f1ba 0f00 	cmp.w	sl, #0
 8015728:	d1ed      	bne.n	8015706 <rcl_node_init+0x236>
 801572a:	e7c9      	b.n	80156c0 <rcl_node_init+0x1f0>
 801572c:	f002 fef0 	bl	8018510 <rmw_node_name_validation_result_string>
 8015730:	f04f 09c9 	mov.w	r9, #201	@ 0xc9
 8015734:	e7c4      	b.n	80156c0 <rcl_node_init+0x1f0>
 8015736:	f002 fe8d 	bl	8018454 <rmw_namespace_validation_result_string>
 801573a:	f04f 09ca 	mov.w	r9, #202	@ 0xca
 801573e:	f1ba 0f00 	cmp.w	sl, #0
 8015742:	d1e0      	bne.n	8015706 <rcl_node_init+0x236>
 8015744:	e7bc      	b.n	80156c0 <rcl_node_init+0x1f0>
 8015746:	f04f 090a 	mov.w	r9, #10
 801574a:	e7b9      	b.n	80156c0 <rcl_node_init+0x1f0>
 801574c:	0801e070 	.word	0x0801e070
 8015750:	0801df08 	.word	0x0801df08
 8015754:	0801dee4 	.word	0x0801dee4
 8015758:	0801e074 	.word	0x0801e074

0801575c <rcl_node_is_valid>:
 801575c:	b130      	cbz	r0, 801576c <rcl_node_is_valid+0x10>
 801575e:	6843      	ldr	r3, [r0, #4]
 8015760:	b123      	cbz	r3, 801576c <rcl_node_is_valid+0x10>
 8015762:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8015764:	b113      	cbz	r3, 801576c <rcl_node_is_valid+0x10>
 8015766:	6800      	ldr	r0, [r0, #0]
 8015768:	f7ff bd32 	b.w	80151d0 <rcl_context_is_valid>
 801576c:	2000      	movs	r0, #0
 801576e:	4770      	bx	lr

08015770 <rcl_node_get_name>:
 8015770:	b120      	cbz	r0, 801577c <rcl_node_get_name+0xc>
 8015772:	6840      	ldr	r0, [r0, #4]
 8015774:	b110      	cbz	r0, 801577c <rcl_node_get_name+0xc>
 8015776:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8015778:	b100      	cbz	r0, 801577c <rcl_node_get_name+0xc>
 801577a:	6880      	ldr	r0, [r0, #8]
 801577c:	4770      	bx	lr
 801577e:	bf00      	nop

08015780 <rcl_node_get_namespace>:
 8015780:	b120      	cbz	r0, 801578c <rcl_node_get_namespace+0xc>
 8015782:	6840      	ldr	r0, [r0, #4]
 8015784:	b110      	cbz	r0, 801578c <rcl_node_get_namespace+0xc>
 8015786:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8015788:	b100      	cbz	r0, 801578c <rcl_node_get_namespace+0xc>
 801578a:	68c0      	ldr	r0, [r0, #12]
 801578c:	4770      	bx	lr
 801578e:	bf00      	nop

08015790 <rcl_node_get_options>:
 8015790:	b128      	cbz	r0, 801579e <rcl_node_get_options+0xe>
 8015792:	6840      	ldr	r0, [r0, #4]
 8015794:	b118      	cbz	r0, 801579e <rcl_node_get_options+0xe>
 8015796:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 8015798:	2b00      	cmp	r3, #0
 801579a:	bf08      	it	eq
 801579c:	2000      	moveq	r0, #0
 801579e:	4770      	bx	lr

080157a0 <rcl_node_get_rmw_handle>:
 80157a0:	b110      	cbz	r0, 80157a8 <rcl_node_get_rmw_handle+0x8>
 80157a2:	6840      	ldr	r0, [r0, #4]
 80157a4:	b100      	cbz	r0, 80157a8 <rcl_node_get_rmw_handle+0x8>
 80157a6:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 80157a8:	4770      	bx	lr
 80157aa:	bf00      	nop

080157ac <rcl_node_get_default_options>:
 80157ac:	b510      	push	{r4, lr}
 80157ae:	2268      	movs	r2, #104	@ 0x68
 80157b0:	4604      	mov	r4, r0
 80157b2:	2100      	movs	r1, #0
 80157b4:	f005 fdda 	bl	801b36c <memset>
 80157b8:	4620      	mov	r0, r4
 80157ba:	f7fa f8d1 	bl	800f960 <rcutils_get_default_allocator>
 80157be:	2301      	movs	r3, #1
 80157c0:	7523      	strb	r3, [r4, #20]
 80157c2:	4620      	mov	r0, r4
 80157c4:	bd10      	pop	{r4, pc}
 80157c6:	bf00      	nop

080157c8 <rcl_node_options_copy>:
 80157c8:	b1d0      	cbz	r0, 8015800 <rcl_node_options_copy+0x38>
 80157ca:	b570      	push	{r4, r5, r6, lr}
 80157cc:	460c      	mov	r4, r1
 80157ce:	b1a9      	cbz	r1, 80157fc <rcl_node_options_copy+0x34>
 80157d0:	4288      	cmp	r0, r1
 80157d2:	4684      	mov	ip, r0
 80157d4:	d012      	beq.n	80157fc <rcl_node_options_copy+0x34>
 80157d6:	4605      	mov	r5, r0
 80157d8:	8a86      	ldrh	r6, [r0, #20]
 80157da:	468e      	mov	lr, r1
 80157dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80157de:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80157e2:	682b      	ldr	r3, [r5, #0]
 80157e4:	f8ce 3000 	str.w	r3, [lr]
 80157e8:	f10c 0118 	add.w	r1, ip, #24
 80157ec:	2250      	movs	r2, #80	@ 0x50
 80157ee:	82a6      	strh	r6, [r4, #20]
 80157f0:	f104 0018 	add.w	r0, r4, #24
 80157f4:	f005 fe83 	bl	801b4fe <memcpy>
 80157f8:	2000      	movs	r0, #0
 80157fa:	bd70      	pop	{r4, r5, r6, pc}
 80157fc:	200b      	movs	r0, #11
 80157fe:	bd70      	pop	{r4, r5, r6, pc}
 8015800:	200b      	movs	r0, #11
 8015802:	4770      	bx	lr

08015804 <rcl_node_resolve_name>:
 8015804:	b082      	sub	sp, #8
 8015806:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801580a:	b091      	sub	sp, #68	@ 0x44
 801580c:	ac1a      	add	r4, sp, #104	@ 0x68
 801580e:	e884 000c 	stmia.w	r4, {r2, r3}
 8015812:	f89d 807c 	ldrb.w	r8, [sp, #124]	@ 0x7c
 8015816:	2800      	cmp	r0, #0
 8015818:	d03b      	beq.n	8015892 <rcl_node_resolve_name+0x8e>
 801581a:	460c      	mov	r4, r1
 801581c:	4605      	mov	r5, r0
 801581e:	f7ff ffb7 	bl	8015790 <rcl_node_get_options>
 8015822:	2800      	cmp	r0, #0
 8015824:	d037      	beq.n	8015896 <rcl_node_resolve_name+0x92>
 8015826:	4628      	mov	r0, r5
 8015828:	f7ff ffa2 	bl	8015770 <rcl_node_get_name>
 801582c:	4606      	mov	r6, r0
 801582e:	4628      	mov	r0, r5
 8015830:	f7ff ffa6 	bl	8015780 <rcl_node_get_namespace>
 8015834:	f10d 0e68 	add.w	lr, sp, #104	@ 0x68
 8015838:	4681      	mov	r9, r0
 801583a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801583e:	ad0b      	add	r5, sp, #44	@ 0x2c
 8015840:	46ac      	mov	ip, r5
 8015842:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015846:	f8de 3000 	ldr.w	r3, [lr]
 801584a:	f8cc 3000 	str.w	r3, [ip]
 801584e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8015850:	b1fb      	cbz	r3, 8015892 <rcl_node_resolve_name+0x8e>
 8015852:	468a      	mov	sl, r1
 8015854:	f8dd b078 	ldr.w	fp, [sp, #120]	@ 0x78
 8015858:	f002 fb3e 	bl	8017ed8 <rcutils_get_zero_initialized_string_map>
 801585c:	ab10      	add	r3, sp, #64	@ 0x40
 801585e:	9008      	str	r0, [sp, #32]
 8015860:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8015864:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8015868:	2100      	movs	r1, #0
 801586a:	e895 000c 	ldmia.w	r5, {r2, r3}
 801586e:	a808      	add	r0, sp, #32
 8015870:	f002 fbaa 	bl	8017fc8 <rcutils_string_map_init>
 8015874:	4607      	mov	r7, r0
 8015876:	b180      	cbz	r0, 801589a <rcl_node_resolve_name+0x96>
 8015878:	f7fa f88e 	bl	800f998 <rcutils_get_error_string>
 801587c:	f7fa f8a4 	bl	800f9c8 <rcutils_reset_error>
 8015880:	2f0a      	cmp	r7, #10
 8015882:	bf18      	it	ne
 8015884:	2701      	movne	r7, #1
 8015886:	4638      	mov	r0, r7
 8015888:	b011      	add	sp, #68	@ 0x44
 801588a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801588e:	b002      	add	sp, #8
 8015890:	4770      	bx	lr
 8015892:	270b      	movs	r7, #11
 8015894:	e7f7      	b.n	8015886 <rcl_node_resolve_name+0x82>
 8015896:	2701      	movs	r7, #1
 8015898:	e7f5      	b.n	8015886 <rcl_node_resolve_name+0x82>
 801589a:	9009      	str	r0, [sp, #36]	@ 0x24
 801589c:	9007      	str	r0, [sp, #28]
 801589e:	a808      	add	r0, sp, #32
 80158a0:	f004 fdd0 	bl	801a444 <rcl_get_default_topic_name_substitutions>
 80158a4:	4607      	mov	r7, r0
 80158a6:	b1a8      	cbz	r0, 80158d4 <rcl_node_resolve_name+0xd0>
 80158a8:	280a      	cmp	r0, #10
 80158aa:	9c07      	ldr	r4, [sp, #28]
 80158ac:	d000      	beq.n	80158b0 <rcl_node_resolve_name+0xac>
 80158ae:	2701      	movs	r7, #1
 80158b0:	a808      	add	r0, sp, #32
 80158b2:	f002 fbc9 	bl	8018048 <rcutils_string_map_fini>
 80158b6:	2800      	cmp	r0, #0
 80158b8:	d13d      	bne.n	8015936 <rcl_node_resolve_name+0x132>
 80158ba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80158bc:	4659      	mov	r1, fp
 80158be:	47d0      	blx	sl
 80158c0:	4659      	mov	r1, fp
 80158c2:	4620      	mov	r0, r4
 80158c4:	47d0      	blx	sl
 80158c6:	f1b8 0f00 	cmp.w	r8, #0
 80158ca:	d0dc      	beq.n	8015886 <rcl_node_resolve_name+0x82>
 80158cc:	2f67      	cmp	r7, #103	@ 0x67
 80158ce:	bf08      	it	eq
 80158d0:	2768      	moveq	r7, #104	@ 0x68
 80158d2:	e7d8      	b.n	8015886 <rcl_node_resolve_name+0x82>
 80158d4:	ab09      	add	r3, sp, #36	@ 0x24
 80158d6:	9305      	str	r3, [sp, #20]
 80158d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80158da:	46ec      	mov	ip, sp
 80158dc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80158e0:	682b      	ldr	r3, [r5, #0]
 80158e2:	f8cc 3000 	str.w	r3, [ip]
 80158e6:	464a      	mov	r2, r9
 80158e8:	4631      	mov	r1, r6
 80158ea:	4620      	mov	r0, r4
 80158ec:	ab08      	add	r3, sp, #32
 80158ee:	f004 fc4b 	bl	801a188 <rcl_expand_topic_name>
 80158f2:	4607      	mov	r7, r0
 80158f4:	b9b8      	cbnz	r0, 8015926 <rcl_node_resolve_name+0x122>
 80158f6:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 80158f8:	9009      	str	r0, [sp, #36]	@ 0x24
 80158fa:	4602      	mov	r2, r0
 80158fc:	a90a      	add	r1, sp, #40	@ 0x28
 80158fe:	4620      	mov	r0, r4
 8015900:	f002 fcd2 	bl	80182a8 <rmw_validate_full_topic_name>
 8015904:	b988      	cbnz	r0, 801592a <rcl_node_resolve_name+0x126>
 8015906:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8015908:	b9d5      	cbnz	r5, 8015940 <rcl_node_resolve_name+0x13c>
 801590a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801590c:	a808      	add	r0, sp, #32
 801590e:	601c      	str	r4, [r3, #0]
 8015910:	f002 fb9a 	bl	8018048 <rcutils_string_map_fini>
 8015914:	4607      	mov	r7, r0
 8015916:	b1a8      	cbz	r0, 8015944 <rcl_node_resolve_name+0x140>
 8015918:	f7fa f83e 	bl	800f998 <rcutils_get_error_string>
 801591c:	462c      	mov	r4, r5
 801591e:	f7fa f853 	bl	800f9c8 <rcutils_reset_error>
 8015922:	2701      	movs	r7, #1
 8015924:	e7c9      	b.n	80158ba <rcl_node_resolve_name+0xb6>
 8015926:	9c07      	ldr	r4, [sp, #28]
 8015928:	e7c2      	b.n	80158b0 <rcl_node_resolve_name+0xac>
 801592a:	f7fa f835 	bl	800f998 <rcutils_get_error_string>
 801592e:	2701      	movs	r7, #1
 8015930:	f7fa f84a 	bl	800f9c8 <rcutils_reset_error>
 8015934:	e7bc      	b.n	80158b0 <rcl_node_resolve_name+0xac>
 8015936:	f7fa f82f 	bl	800f998 <rcutils_get_error_string>
 801593a:	f7fa f845 	bl	800f9c8 <rcutils_reset_error>
 801593e:	e7bc      	b.n	80158ba <rcl_node_resolve_name+0xb6>
 8015940:	2767      	movs	r7, #103	@ 0x67
 8015942:	e7b5      	b.n	80158b0 <rcl_node_resolve_name+0xac>
 8015944:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8015946:	4659      	mov	r1, fp
 8015948:	47d0      	blx	sl
 801594a:	4659      	mov	r1, fp
 801594c:	4638      	mov	r0, r7
 801594e:	47d0      	blx	sl
 8015950:	e799      	b.n	8015886 <rcl_node_resolve_name+0x82>
 8015952:	bf00      	nop

08015954 <rcl_service_get_rmw_handle>:
 8015954:	b118      	cbz	r0, 801595e <rcl_service_get_rmw_handle+0xa>
 8015956:	6800      	ldr	r0, [r0, #0]
 8015958:	b108      	cbz	r0, 801595e <rcl_service_get_rmw_handle+0xa>
 801595a:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 801595e:	4770      	bx	lr

08015960 <rcl_take_request>:
 8015960:	b570      	push	{r4, r5, r6, lr}
 8015962:	468e      	mov	lr, r1
 8015964:	460c      	mov	r4, r1
 8015966:	4616      	mov	r6, r2
 8015968:	4605      	mov	r5, r0
 801596a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801596e:	b08c      	sub	sp, #48	@ 0x30
 8015970:	f10d 0c18 	add.w	ip, sp, #24
 8015974:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015978:	e89e 0003 	ldmia.w	lr, {r0, r1}
 801597c:	e88c 0003 	stmia.w	ip, {r0, r1}
 8015980:	b30d      	cbz	r5, 80159c6 <rcl_take_request+0x66>
 8015982:	682b      	ldr	r3, [r5, #0]
 8015984:	b1fb      	cbz	r3, 80159c6 <rcl_take_request+0x66>
 8015986:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 801598a:	b1e0      	cbz	r0, 80159c6 <rcl_take_request+0x66>
 801598c:	b336      	cbz	r6, 80159dc <rcl_take_request+0x7c>
 801598e:	2300      	movs	r3, #0
 8015990:	f88d 3007 	strb.w	r3, [sp, #7]
 8015994:	4632      	mov	r2, r6
 8015996:	f10d 0307 	add.w	r3, sp, #7
 801599a:	a902      	add	r1, sp, #8
 801599c:	f002 ffda 	bl	8018954 <rmw_take_request>
 80159a0:	4605      	mov	r5, r0
 80159a2:	b198      	cbz	r0, 80159cc <rcl_take_request+0x6c>
 80159a4:	280a      	cmp	r0, #10
 80159a6:	bf18      	it	ne
 80159a8:	2501      	movne	r5, #1
 80159aa:	f10d 0e18 	add.w	lr, sp, #24
 80159ae:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80159b2:	46a4      	mov	ip, r4
 80159b4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80159b8:	e89e 0003 	ldmia.w	lr, {r0, r1}
 80159bc:	e88c 0003 	stmia.w	ip, {r0, r1}
 80159c0:	4628      	mov	r0, r5
 80159c2:	b00c      	add	sp, #48	@ 0x30
 80159c4:	bd70      	pop	{r4, r5, r6, pc}
 80159c6:	f44f 7516 	mov.w	r5, #600	@ 0x258
 80159ca:	e7ee      	b.n	80159aa <rcl_take_request+0x4a>
 80159cc:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80159d0:	f240 2359 	movw	r3, #601	@ 0x259
 80159d4:	2a00      	cmp	r2, #0
 80159d6:	bf08      	it	eq
 80159d8:	461d      	moveq	r5, r3
 80159da:	e7e6      	b.n	80159aa <rcl_take_request+0x4a>
 80159dc:	250b      	movs	r5, #11
 80159de:	e7e4      	b.n	80159aa <rcl_take_request+0x4a>

080159e0 <rcl_send_response>:
 80159e0:	b170      	cbz	r0, 8015a00 <rcl_send_response+0x20>
 80159e2:	6800      	ldr	r0, [r0, #0]
 80159e4:	b160      	cbz	r0, 8015a00 <rcl_send_response+0x20>
 80159e6:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 80159ea:	b148      	cbz	r0, 8015a00 <rcl_send_response+0x20>
 80159ec:	b159      	cbz	r1, 8015a06 <rcl_send_response+0x26>
 80159ee:	b510      	push	{r4, lr}
 80159f0:	b15a      	cbz	r2, 8015a0a <rcl_send_response+0x2a>
 80159f2:	f003 f80d 	bl	8018a10 <rmw_send_response>
 80159f6:	b110      	cbz	r0, 80159fe <rcl_send_response+0x1e>
 80159f8:	2802      	cmp	r0, #2
 80159fa:	bf18      	it	ne
 80159fc:	2001      	movne	r0, #1
 80159fe:	bd10      	pop	{r4, pc}
 8015a00:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8015a04:	4770      	bx	lr
 8015a06:	200b      	movs	r0, #11
 8015a08:	4770      	bx	lr
 8015a0a:	200b      	movs	r0, #11
 8015a0c:	bd10      	pop	{r4, pc}
 8015a0e:	bf00      	nop

08015a10 <rcl_service_is_valid>:
 8015a10:	b130      	cbz	r0, 8015a20 <rcl_service_is_valid+0x10>
 8015a12:	6800      	ldr	r0, [r0, #0]
 8015a14:	b120      	cbz	r0, 8015a20 <rcl_service_is_valid+0x10>
 8015a16:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8015a1a:	3800      	subs	r0, #0
 8015a1c:	bf18      	it	ne
 8015a1e:	2001      	movne	r0, #1
 8015a20:	4770      	bx	lr
 8015a22:	bf00      	nop

08015a24 <rcl_get_zero_initialized_subscription>:
 8015a24:	4b01      	ldr	r3, [pc, #4]	@ (8015a2c <rcl_get_zero_initialized_subscription+0x8>)
 8015a26:	6818      	ldr	r0, [r3, #0]
 8015a28:	4770      	bx	lr
 8015a2a:	bf00      	nop
 8015a2c:	0801e95c 	.word	0x0801e95c

08015a30 <rcl_subscription_init>:
 8015a30:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015a34:	b089      	sub	sp, #36	@ 0x24
 8015a36:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8015a38:	b1d6      	cbz	r6, 8015a70 <rcl_subscription_init+0x40>
 8015a3a:	f106 0950 	add.w	r9, r6, #80	@ 0x50
 8015a3e:	4604      	mov	r4, r0
 8015a40:	4648      	mov	r0, r9
 8015a42:	460d      	mov	r5, r1
 8015a44:	4690      	mov	r8, r2
 8015a46:	461f      	mov	r7, r3
 8015a48:	f7f9 ff98 	bl	800f97c <rcutils_allocator_is_valid>
 8015a4c:	b180      	cbz	r0, 8015a70 <rcl_subscription_init+0x40>
 8015a4e:	b17c      	cbz	r4, 8015a70 <rcl_subscription_init+0x40>
 8015a50:	4628      	mov	r0, r5
 8015a52:	f7ff fe83 	bl	801575c <rcl_node_is_valid>
 8015a56:	2800      	cmp	r0, #0
 8015a58:	d054      	beq.n	8015b04 <rcl_subscription_init+0xd4>
 8015a5a:	f1b8 0f00 	cmp.w	r8, #0
 8015a5e:	d007      	beq.n	8015a70 <rcl_subscription_init+0x40>
 8015a60:	b137      	cbz	r7, 8015a70 <rcl_subscription_init+0x40>
 8015a62:	6823      	ldr	r3, [r4, #0]
 8015a64:	b14b      	cbz	r3, 8015a7a <rcl_subscription_init+0x4a>
 8015a66:	2764      	movs	r7, #100	@ 0x64
 8015a68:	4638      	mov	r0, r7
 8015a6a:	b009      	add	sp, #36	@ 0x24
 8015a6c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015a70:	270b      	movs	r7, #11
 8015a72:	4638      	mov	r0, r7
 8015a74:	b009      	add	sp, #36	@ 0x24
 8015a76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015a7a:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8015a7e:	aa07      	add	r2, sp, #28
 8015a80:	9205      	str	r2, [sp, #20]
 8015a82:	9307      	str	r3, [sp, #28]
 8015a84:	f106 0358 	add.w	r3, r6, #88	@ 0x58
 8015a88:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8015a8c:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8015a90:	4639      	mov	r1, r7
 8015a92:	e899 000c 	ldmia.w	r9, {r2, r3}
 8015a96:	4628      	mov	r0, r5
 8015a98:	f7ff feb4 	bl	8015804 <rcl_node_resolve_name>
 8015a9c:	4607      	mov	r7, r0
 8015a9e:	2800      	cmp	r0, #0
 8015aa0:	d15f      	bne.n	8015b62 <rcl_subscription_init+0x132>
 8015aa2:	e9d6 3217 	ldrd	r3, r2, [r6, #92]	@ 0x5c
 8015aa6:	21c8      	movs	r1, #200	@ 0xc8
 8015aa8:	2001      	movs	r0, #1
 8015aaa:	4798      	blx	r3
 8015aac:	6020      	str	r0, [r4, #0]
 8015aae:	2800      	cmp	r0, #0
 8015ab0:	d05d      	beq.n	8015b6e <rcl_subscription_init+0x13e>
 8015ab2:	4628      	mov	r0, r5
 8015ab4:	f7ff fe74 	bl	80157a0 <rcl_node_get_rmw_handle>
 8015ab8:	f106 0364 	add.w	r3, r6, #100	@ 0x64
 8015abc:	9300      	str	r3, [sp, #0]
 8015abe:	9a07      	ldr	r2, [sp, #28]
 8015ac0:	6827      	ldr	r7, [r4, #0]
 8015ac2:	4641      	mov	r1, r8
 8015ac4:	4633      	mov	r3, r6
 8015ac6:	f7fa fd9f 	bl	8010608 <rmw_create_subscription>
 8015aca:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0
 8015ace:	6827      	ldr	r7, [r4, #0]
 8015ad0:	f8d7 00c0 	ldr.w	r0, [r7, #192]	@ 0xc0
 8015ad4:	b348      	cbz	r0, 8015b2a <rcl_subscription_init+0xfa>
 8015ad6:	f107 0170 	add.w	r1, r7, #112	@ 0x70
 8015ada:	f7fa fe77 	bl	80107cc <rmw_subscription_get_actual_qos>
 8015ade:	4607      	mov	r7, r0
 8015ae0:	b9a8      	cbnz	r0, 8015b0e <rcl_subscription_init+0xde>
 8015ae2:	6820      	ldr	r0, [r4, #0]
 8015ae4:	f896 3048 	ldrb.w	r3, [r6, #72]	@ 0x48
 8015ae8:	f880 30b8 	strb.w	r3, [r0, #184]	@ 0xb8
 8015aec:	2270      	movs	r2, #112	@ 0x70
 8015aee:	4631      	mov	r1, r6
 8015af0:	f005 fd05 	bl	801b4fe <memcpy>
 8015af4:	9807      	ldr	r0, [sp, #28]
 8015af6:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 8015af8:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 8015afa:	4798      	blx	r3
 8015afc:	4638      	mov	r0, r7
 8015afe:	b009      	add	sp, #36	@ 0x24
 8015b00:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015b04:	27c8      	movs	r7, #200	@ 0xc8
 8015b06:	4638      	mov	r0, r7
 8015b08:	b009      	add	sp, #36	@ 0x24
 8015b0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015b0e:	6827      	ldr	r7, [r4, #0]
 8015b10:	b32f      	cbz	r7, 8015b5e <rcl_subscription_init+0x12e>
 8015b12:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8015b16:	b14b      	cbz	r3, 8015b2c <rcl_subscription_init+0xfc>
 8015b18:	4628      	mov	r0, r5
 8015b1a:	f7ff fe41 	bl	80157a0 <rcl_node_get_rmw_handle>
 8015b1e:	6823      	ldr	r3, [r4, #0]
 8015b20:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8015b24:	f7fa fe62 	bl	80107ec <rmw_destroy_subscription>
 8015b28:	6827      	ldr	r7, [r4, #0]
 8015b2a:	b197      	cbz	r7, 8015b52 <rcl_subscription_init+0x122>
 8015b2c:	f107 0550 	add.w	r5, r7, #80	@ 0x50
 8015b30:	4628      	mov	r0, r5
 8015b32:	f7f9 ff23 	bl	800f97c <rcutils_allocator_is_valid>
 8015b36:	b158      	cbz	r0, 8015b50 <rcl_subscription_init+0x120>
 8015b38:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8015b3a:	b148      	cbz	r0, 8015b50 <rcl_subscription_init+0x120>
 8015b3c:	4629      	mov	r1, r5
 8015b3e:	f002 fb07 	bl	8018150 <rmw_subscription_content_filter_options_fini>
 8015b42:	4605      	mov	r5, r0
 8015b44:	b9b8      	cbnz	r0, 8015b76 <rcl_subscription_init+0x146>
 8015b46:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8015b48:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8015b4a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8015b4c:	4798      	blx	r3
 8015b4e:	66fd      	str	r5, [r7, #108]	@ 0x6c
 8015b50:	6827      	ldr	r7, [r4, #0]
 8015b52:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 8015b54:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 8015b56:	4638      	mov	r0, r7
 8015b58:	4798      	blx	r3
 8015b5a:	2300      	movs	r3, #0
 8015b5c:	6023      	str	r3, [r4, #0]
 8015b5e:	2701      	movs	r7, #1
 8015b60:	e7c8      	b.n	8015af4 <rcl_subscription_init+0xc4>
 8015b62:	2867      	cmp	r0, #103	@ 0x67
 8015b64:	d0c6      	beq.n	8015af4 <rcl_subscription_init+0xc4>
 8015b66:	2869      	cmp	r0, #105	@ 0x69
 8015b68:	d003      	beq.n	8015b72 <rcl_subscription_init+0x142>
 8015b6a:	280a      	cmp	r0, #10
 8015b6c:	d1f7      	bne.n	8015b5e <rcl_subscription_init+0x12e>
 8015b6e:	270a      	movs	r7, #10
 8015b70:	e7c0      	b.n	8015af4 <rcl_subscription_init+0xc4>
 8015b72:	2767      	movs	r7, #103	@ 0x67
 8015b74:	e7be      	b.n	8015af4 <rcl_subscription_init+0xc4>
 8015b76:	f7ff fb0d 	bl	8015194 <rcl_convert_rmw_ret_to_rcl_ret>
 8015b7a:	6827      	ldr	r7, [r4, #0]
 8015b7c:	e7e9      	b.n	8015b52 <rcl_subscription_init+0x122>
 8015b7e:	bf00      	nop

08015b80 <rcl_subscription_get_default_options>:
 8015b80:	b570      	push	{r4, r5, r6, lr}
 8015b82:	4d14      	ldr	r5, [pc, #80]	@ (8015bd4 <rcl_subscription_get_default_options+0x54>)
 8015b84:	4914      	ldr	r1, [pc, #80]	@ (8015bd8 <rcl_subscription_get_default_options+0x58>)
 8015b86:	b08a      	sub	sp, #40	@ 0x28
 8015b88:	4604      	mov	r4, r0
 8015b8a:	2250      	movs	r2, #80	@ 0x50
 8015b8c:	4628      	mov	r0, r5
 8015b8e:	f005 fcb6 	bl	801b4fe <memcpy>
 8015b92:	a804      	add	r0, sp, #16
 8015b94:	f7f9 fee4 	bl	800f960 <rcutils_get_default_allocator>
 8015b98:	f10d 0c10 	add.w	ip, sp, #16
 8015b9c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8015ba0:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 8015ba4:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8015ba8:	466e      	mov	r6, sp
 8015baa:	f8dc 3000 	ldr.w	r3, [ip]
 8015bae:	f8ce 3000 	str.w	r3, [lr]
 8015bb2:	4630      	mov	r0, r6
 8015bb4:	f002 fae6 	bl	8018184 <rmw_get_default_subscription_options>
 8015bb8:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8015bbc:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 8015bc0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8015bc4:	2270      	movs	r2, #112	@ 0x70
 8015bc6:	4629      	mov	r1, r5
 8015bc8:	4620      	mov	r0, r4
 8015bca:	f005 fc98 	bl	801b4fe <memcpy>
 8015bce:	4620      	mov	r0, r4
 8015bd0:	b00a      	add	sp, #40	@ 0x28
 8015bd2:	bd70      	pop	{r4, r5, r6, pc}
 8015bd4:	2000b570 	.word	0x2000b570
 8015bd8:	0801e960 	.word	0x0801e960

08015bdc <rcl_take>:
 8015bdc:	2800      	cmp	r0, #0
 8015bde:	d04a      	beq.n	8015c76 <rcl_take+0x9a>
 8015be0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015be4:	4604      	mov	r4, r0
 8015be6:	6800      	ldr	r0, [r0, #0]
 8015be8:	b0a4      	sub	sp, #144	@ 0x90
 8015bea:	2800      	cmp	r0, #0
 8015bec:	d03b      	beq.n	8015c66 <rcl_take+0x8a>
 8015bee:	461f      	mov	r7, r3
 8015bf0:	f8d0 30c0 	ldr.w	r3, [r0, #192]	@ 0xc0
 8015bf4:	2b00      	cmp	r3, #0
 8015bf6:	d036      	beq.n	8015c66 <rcl_take+0x8a>
 8015bf8:	460e      	mov	r6, r1
 8015bfa:	2900      	cmp	r1, #0
 8015bfc:	d039      	beq.n	8015c72 <rcl_take+0x96>
 8015bfe:	4615      	mov	r5, r2
 8015c00:	2a00      	cmp	r2, #0
 8015c02:	d03c      	beq.n	8015c7e <rcl_take+0xa2>
 8015c04:	a802      	add	r0, sp, #8
 8015c06:	f002 fb47 	bl	8018298 <rmw_get_zero_initialized_message_info>
 8015c0a:	f10d 0c08 	add.w	ip, sp, #8
 8015c0e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8015c12:	46ae      	mov	lr, r5
 8015c14:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8015c18:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8015c1c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8015c20:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8015c24:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8015c28:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8015c2c:	f04f 0800 	mov.w	r8, #0
 8015c30:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 8015c34:	f88d 804f 	strb.w	r8, [sp, #79]	@ 0x4f
 8015c38:	6822      	ldr	r2, [r4, #0]
 8015c3a:	462b      	mov	r3, r5
 8015c3c:	f8d2 00c0 	ldr.w	r0, [r2, #192]	@ 0xc0
 8015c40:	9700      	str	r7, [sp, #0]
 8015c42:	f10d 024f 	add.w	r2, sp, #79	@ 0x4f
 8015c46:	4631      	mov	r1, r6
 8015c48:	f002 ff88 	bl	8018b5c <rmw_take_with_info>
 8015c4c:	4603      	mov	r3, r0
 8015c4e:	b9c0      	cbnz	r0, 8015c82 <rcl_take+0xa6>
 8015c50:	f89d 104f 	ldrb.w	r1, [sp, #79]	@ 0x4f
 8015c54:	f240 1291 	movw	r2, #401	@ 0x191
 8015c58:	2900      	cmp	r1, #0
 8015c5a:	bf08      	it	eq
 8015c5c:	4613      	moveq	r3, r2
 8015c5e:	4618      	mov	r0, r3
 8015c60:	b024      	add	sp, #144	@ 0x90
 8015c62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015c66:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8015c6a:	4618      	mov	r0, r3
 8015c6c:	b024      	add	sp, #144	@ 0x90
 8015c6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015c72:	230b      	movs	r3, #11
 8015c74:	e7f3      	b.n	8015c5e <rcl_take+0x82>
 8015c76:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8015c7a:	4618      	mov	r0, r3
 8015c7c:	4770      	bx	lr
 8015c7e:	ad14      	add	r5, sp, #80	@ 0x50
 8015c80:	e7c0      	b.n	8015c04 <rcl_take+0x28>
 8015c82:	f7ff fa87 	bl	8015194 <rcl_convert_rmw_ret_to_rcl_ret>
 8015c86:	4603      	mov	r3, r0
 8015c88:	e7e9      	b.n	8015c5e <rcl_take+0x82>
 8015c8a:	bf00      	nop

08015c8c <rcl_subscription_get_rmw_handle>:
 8015c8c:	b118      	cbz	r0, 8015c96 <rcl_subscription_get_rmw_handle+0xa>
 8015c8e:	6800      	ldr	r0, [r0, #0]
 8015c90:	b108      	cbz	r0, 8015c96 <rcl_subscription_get_rmw_handle+0xa>
 8015c92:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 8015c96:	4770      	bx	lr

08015c98 <rcl_subscription_is_valid>:
 8015c98:	b130      	cbz	r0, 8015ca8 <rcl_subscription_is_valid+0x10>
 8015c9a:	6800      	ldr	r0, [r0, #0]
 8015c9c:	b120      	cbz	r0, 8015ca8 <rcl_subscription_is_valid+0x10>
 8015c9e:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 8015ca2:	3800      	subs	r0, #0
 8015ca4:	bf18      	it	ne
 8015ca6:	2001      	movne	r0, #1
 8015ca8:	4770      	bx	lr
 8015caa:	bf00      	nop

08015cac <rcl_get_system_time>:
 8015cac:	4608      	mov	r0, r1
 8015cae:	f7f9 bea7 	b.w	800fa00 <rcutils_system_time_now>
 8015cb2:	bf00      	nop

08015cb4 <rcl_get_steady_time>:
 8015cb4:	4608      	mov	r0, r1
 8015cb6:	f7f9 becb 	b.w	800fa50 <rcutils_steady_time_now>
 8015cba:	bf00      	nop

08015cbc <rcl_get_ros_time>:
 8015cbc:	7a03      	ldrb	r3, [r0, #8]
 8015cbe:	b510      	push	{r4, lr}
 8015cc0:	460c      	mov	r4, r1
 8015cc2:	b133      	cbz	r3, 8015cd2 <rcl_get_ros_time+0x16>
 8015cc4:	2105      	movs	r1, #5
 8015cc6:	f001 fef3 	bl	8017ab0 <__atomic_load_8>
 8015cca:	e9c4 0100 	strd	r0, r1, [r4]
 8015cce:	2000      	movs	r0, #0
 8015cd0:	bd10      	pop	{r4, pc}
 8015cd2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015cd6:	4608      	mov	r0, r1
 8015cd8:	f7f9 be92 	b.w	800fa00 <rcutils_system_time_now>

08015cdc <rcl_clock_init>:
 8015cdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015cde:	4605      	mov	r5, r0
 8015ce0:	4610      	mov	r0, r2
 8015ce2:	4614      	mov	r4, r2
 8015ce4:	460e      	mov	r6, r1
 8015ce6:	f7f9 fe49 	bl	800f97c <rcutils_allocator_is_valid>
 8015cea:	b128      	cbz	r0, 8015cf8 <rcl_clock_init+0x1c>
 8015cec:	2d03      	cmp	r5, #3
 8015cee:	d803      	bhi.n	8015cf8 <rcl_clock_init+0x1c>
 8015cf0:	e8df f005 	tbb	[pc, r5]
 8015cf4:	06532e1d 	.word	0x06532e1d
 8015cf8:	f04f 0c0b 	mov.w	ip, #11
 8015cfc:	4660      	mov	r0, ip
 8015cfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015d00:	2e00      	cmp	r6, #0
 8015d02:	d0f9      	beq.n	8015cf8 <rcl_clock_init+0x1c>
 8015d04:	2c00      	cmp	r4, #0
 8015d06:	d0f7      	beq.n	8015cf8 <rcl_clock_init+0x1c>
 8015d08:	2300      	movs	r3, #0
 8015d0a:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8015d0e:	f8df e0b4 	ldr.w	lr, [pc, #180]	@ 8015dc4 <rcl_clock_init+0xe8>
 8015d12:	6133      	str	r3, [r6, #16]
 8015d14:	f106 0514 	add.w	r5, r6, #20
 8015d18:	469c      	mov	ip, r3
 8015d1a:	2703      	movs	r7, #3
 8015d1c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015d1e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8015d20:	6823      	ldr	r3, [r4, #0]
 8015d22:	602b      	str	r3, [r5, #0]
 8015d24:	7037      	strb	r7, [r6, #0]
 8015d26:	f8c6 e00c 	str.w	lr, [r6, #12]
 8015d2a:	4660      	mov	r0, ip
 8015d2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015d2e:	2e00      	cmp	r6, #0
 8015d30:	d0e2      	beq.n	8015cf8 <rcl_clock_init+0x1c>
 8015d32:	2300      	movs	r3, #0
 8015d34:	7033      	strb	r3, [r6, #0]
 8015d36:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8015d3a:	e9c6 3303 	strd	r3, r3, [r6, #12]
 8015d3e:	469c      	mov	ip, r3
 8015d40:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015d42:	f106 0514 	add.w	r5, r6, #20
 8015d46:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8015d48:	6823      	ldr	r3, [r4, #0]
 8015d4a:	602b      	str	r3, [r5, #0]
 8015d4c:	4660      	mov	r0, ip
 8015d4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015d50:	2e00      	cmp	r6, #0
 8015d52:	d0d1      	beq.n	8015cf8 <rcl_clock_init+0x1c>
 8015d54:	2c00      	cmp	r4, #0
 8015d56:	d0cf      	beq.n	8015cf8 <rcl_clock_init+0x1c>
 8015d58:	2700      	movs	r7, #0
 8015d5a:	7037      	strb	r7, [r6, #0]
 8015d5c:	46a4      	mov	ip, r4
 8015d5e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8015d62:	f106 0514 	add.w	r5, r6, #20
 8015d66:	e9c6 7701 	strd	r7, r7, [r6, #4]
 8015d6a:	e9c6 7703 	strd	r7, r7, [r6, #12]
 8015d6e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8015d70:	f8dc 3000 	ldr.w	r3, [ip]
 8015d74:	602b      	str	r3, [r5, #0]
 8015d76:	6921      	ldr	r1, [r4, #16]
 8015d78:	6823      	ldr	r3, [r4, #0]
 8015d7a:	2010      	movs	r0, #16
 8015d7c:	4798      	blx	r3
 8015d7e:	6130      	str	r0, [r6, #16]
 8015d80:	b1d0      	cbz	r0, 8015db8 <rcl_clock_init+0xdc>
 8015d82:	2200      	movs	r2, #0
 8015d84:	2300      	movs	r3, #0
 8015d86:	e9c0 2300 	strd	r2, r3, [r0]
 8015d8a:	2301      	movs	r3, #1
 8015d8c:	7207      	strb	r7, [r0, #8]
 8015d8e:	4a0c      	ldr	r2, [pc, #48]	@ (8015dc0 <rcl_clock_init+0xe4>)
 8015d90:	7033      	strb	r3, [r6, #0]
 8015d92:	46bc      	mov	ip, r7
 8015d94:	60f2      	str	r2, [r6, #12]
 8015d96:	4660      	mov	r0, ip
 8015d98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015d9a:	2e00      	cmp	r6, #0
 8015d9c:	d0ac      	beq.n	8015cf8 <rcl_clock_init+0x1c>
 8015d9e:	2c00      	cmp	r4, #0
 8015da0:	d0aa      	beq.n	8015cf8 <rcl_clock_init+0x1c>
 8015da2:	2300      	movs	r3, #0
 8015da4:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8015da8:	f8df e01c 	ldr.w	lr, [pc, #28]	@ 8015dc8 <rcl_clock_init+0xec>
 8015dac:	6133      	str	r3, [r6, #16]
 8015dae:	f106 0514 	add.w	r5, r6, #20
 8015db2:	469c      	mov	ip, r3
 8015db4:	2702      	movs	r7, #2
 8015db6:	e7b1      	b.n	8015d1c <rcl_clock_init+0x40>
 8015db8:	f04f 0c0a 	mov.w	ip, #10
 8015dbc:	e79e      	b.n	8015cfc <rcl_clock_init+0x20>
 8015dbe:	bf00      	nop
 8015dc0:	08015cbd 	.word	0x08015cbd
 8015dc4:	08015cb5 	.word	0x08015cb5
 8015dc8:	08015cad 	.word	0x08015cad

08015dcc <rcl_clock_get_now>:
 8015dcc:	b140      	cbz	r0, 8015de0 <rcl_clock_get_now+0x14>
 8015dce:	b139      	cbz	r1, 8015de0 <rcl_clock_get_now+0x14>
 8015dd0:	7803      	ldrb	r3, [r0, #0]
 8015dd2:	b11b      	cbz	r3, 8015ddc <rcl_clock_get_now+0x10>
 8015dd4:	68c3      	ldr	r3, [r0, #12]
 8015dd6:	b10b      	cbz	r3, 8015ddc <rcl_clock_get_now+0x10>
 8015dd8:	6900      	ldr	r0, [r0, #16]
 8015dda:	4718      	bx	r3
 8015ddc:	2001      	movs	r0, #1
 8015dde:	4770      	bx	lr
 8015de0:	200b      	movs	r0, #11
 8015de2:	4770      	bx	lr

08015de4 <rcl_clock_add_jump_callback>:
 8015de4:	b082      	sub	sp, #8
 8015de6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015dea:	a906      	add	r1, sp, #24
 8015dec:	e881 000c 	stmia.w	r1, {r2, r3}
 8015df0:	e9dd 650c 	ldrd	r6, r5, [sp, #48]	@ 0x30
 8015df4:	b320      	cbz	r0, 8015e40 <rcl_clock_add_jump_callback+0x5c>
 8015df6:	4604      	mov	r4, r0
 8015df8:	3014      	adds	r0, #20
 8015dfa:	f7f9 fdbf 	bl	800f97c <rcutils_allocator_is_valid>
 8015dfe:	b1f8      	cbz	r0, 8015e40 <rcl_clock_add_jump_callback+0x5c>
 8015e00:	b1f6      	cbz	r6, 8015e40 <rcl_clock_add_jump_callback+0x5c>
 8015e02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015e04:	2b00      	cmp	r3, #0
 8015e06:	db1b      	blt.n	8015e40 <rcl_clock_add_jump_callback+0x5c>
 8015e08:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 8015e0c:	2a01      	cmp	r2, #1
 8015e0e:	f173 0300 	sbcs.w	r3, r3, #0
 8015e12:	da15      	bge.n	8015e40 <rcl_clock_add_jump_callback+0x5c>
 8015e14:	e9d4 0701 	ldrd	r0, r7, [r4, #4]
 8015e18:	2f00      	cmp	r7, #0
 8015e1a:	d042      	beq.n	8015ea2 <rcl_clock_add_jump_callback+0xbe>
 8015e1c:	2300      	movs	r3, #0
 8015e1e:	4602      	mov	r2, r0
 8015e20:	e003      	b.n	8015e2a <rcl_clock_add_jump_callback+0x46>
 8015e22:	42bb      	cmp	r3, r7
 8015e24:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 8015e28:	d011      	beq.n	8015e4e <rcl_clock_add_jump_callback+0x6a>
 8015e2a:	6811      	ldr	r1, [r2, #0]
 8015e2c:	42b1      	cmp	r1, r6
 8015e2e:	f103 0301 	add.w	r3, r3, #1
 8015e32:	d1f6      	bne.n	8015e22 <rcl_clock_add_jump_callback+0x3e>
 8015e34:	6a11      	ldr	r1, [r2, #32]
 8015e36:	42a9      	cmp	r1, r5
 8015e38:	d1f3      	bne.n	8015e22 <rcl_clock_add_jump_callback+0x3e>
 8015e3a:	f04f 0e01 	mov.w	lr, #1
 8015e3e:	e001      	b.n	8015e44 <rcl_clock_add_jump_callback+0x60>
 8015e40:	f04f 0e0b 	mov.w	lr, #11
 8015e44:	4670      	mov	r0, lr
 8015e46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015e4a:	b002      	add	sp, #8
 8015e4c:	4770      	bx	lr
 8015e4e:	3301      	adds	r3, #1
 8015e50:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8015e54:	00d9      	lsls	r1, r3, #3
 8015e56:	69e3      	ldr	r3, [r4, #28]
 8015e58:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8015e5a:	4798      	blx	r3
 8015e5c:	b1f0      	cbz	r0, 8015e9c <rcl_clock_add_jump_callback+0xb8>
 8015e5e:	68a3      	ldr	r3, [r4, #8]
 8015e60:	6060      	str	r0, [r4, #4]
 8015e62:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8015e66:	f10d 0c18 	add.w	ip, sp, #24
 8015e6a:	f840 6032 	str.w	r6, [r0, r2, lsl #3]
 8015e6e:	f103 0801 	add.w	r8, r3, #1
 8015e72:	eb00 06c2 	add.w	r6, r0, r2, lsl #3
 8015e76:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8015e7a:	f106 0708 	add.w	r7, r6, #8
 8015e7e:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8015e80:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8015e84:	f04f 0e00 	mov.w	lr, #0
 8015e88:	e887 0003 	stmia.w	r7, {r0, r1}
 8015e8c:	6235      	str	r5, [r6, #32]
 8015e8e:	4670      	mov	r0, lr
 8015e90:	f8c4 8008 	str.w	r8, [r4, #8]
 8015e94:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015e98:	b002      	add	sp, #8
 8015e9a:	4770      	bx	lr
 8015e9c:	f04f 0e0a 	mov.w	lr, #10
 8015ea0:	e7d0      	b.n	8015e44 <rcl_clock_add_jump_callback+0x60>
 8015ea2:	2128      	movs	r1, #40	@ 0x28
 8015ea4:	e7d7      	b.n	8015e56 <rcl_clock_add_jump_callback+0x72>
 8015ea6:	bf00      	nop

08015ea8 <rcl_clock_remove_jump_callback>:
 8015ea8:	2800      	cmp	r0, #0
 8015eaa:	d057      	beq.n	8015f5c <rcl_clock_remove_jump_callback+0xb4>
 8015eac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015eb0:	4605      	mov	r5, r0
 8015eb2:	3014      	adds	r0, #20
 8015eb4:	4688      	mov	r8, r1
 8015eb6:	4692      	mov	sl, r2
 8015eb8:	f7f9 fd60 	bl	800f97c <rcutils_allocator_is_valid>
 8015ebc:	2800      	cmp	r0, #0
 8015ebe:	d03b      	beq.n	8015f38 <rcl_clock_remove_jump_callback+0x90>
 8015ec0:	f1b8 0f00 	cmp.w	r8, #0
 8015ec4:	d038      	beq.n	8015f38 <rcl_clock_remove_jump_callback+0x90>
 8015ec6:	68ae      	ldr	r6, [r5, #8]
 8015ec8:	b166      	cbz	r6, 8015ee4 <rcl_clock_remove_jump_callback+0x3c>
 8015eca:	f8d5 9004 	ldr.w	r9, [r5, #4]
 8015ece:	eb06 0786 	add.w	r7, r6, r6, lsl #2
 8015ed2:	eb09 07c7 	add.w	r7, r9, r7, lsl #3
 8015ed6:	464c      	mov	r4, r9
 8015ed8:	6823      	ldr	r3, [r4, #0]
 8015eda:	4543      	cmp	r3, r8
 8015edc:	d005      	beq.n	8015eea <rcl_clock_remove_jump_callback+0x42>
 8015ede:	3428      	adds	r4, #40	@ 0x28
 8015ee0:	42a7      	cmp	r7, r4
 8015ee2:	d1f9      	bne.n	8015ed8 <rcl_clock_remove_jump_callback+0x30>
 8015ee4:	2001      	movs	r0, #1
 8015ee6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015eea:	6a23      	ldr	r3, [r4, #32]
 8015eec:	3428      	adds	r4, #40	@ 0x28
 8015eee:	42bc      	cmp	r4, r7
 8015ef0:	d02d      	beq.n	8015f4e <rcl_clock_remove_jump_callback+0xa6>
 8015ef2:	4553      	cmp	r3, sl
 8015ef4:	d1f0      	bne.n	8015ed8 <rcl_clock_remove_jump_callback+0x30>
 8015ef6:	46a6      	mov	lr, r4
 8015ef8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8015efc:	f1a4 0c28 	sub.w	ip, r4, #40	@ 0x28
 8015f00:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015f04:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8015f08:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015f0c:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8015f10:	3428      	adds	r4, #40	@ 0x28
 8015f12:	42a7      	cmp	r7, r4
 8015f14:	e88c 0003 	stmia.w	ip, {r0, r1}
 8015f18:	d1ed      	bne.n	8015ef6 <rcl_clock_remove_jump_callback+0x4e>
 8015f1a:	3e01      	subs	r6, #1
 8015f1c:	60ae      	str	r6, [r5, #8]
 8015f1e:	b176      	cbz	r6, 8015f3e <rcl_clock_remove_jump_callback+0x96>
 8015f20:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 8015f24:	69eb      	ldr	r3, [r5, #28]
 8015f26:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
 8015f28:	00f1      	lsls	r1, r6, #3
 8015f2a:	4648      	mov	r0, r9
 8015f2c:	4798      	blx	r3
 8015f2e:	b1b8      	cbz	r0, 8015f60 <rcl_clock_remove_jump_callback+0xb8>
 8015f30:	6068      	str	r0, [r5, #4]
 8015f32:	2000      	movs	r0, #0
 8015f34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015f38:	200b      	movs	r0, #11
 8015f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015f3e:	4648      	mov	r0, r9
 8015f40:	69ab      	ldr	r3, [r5, #24]
 8015f42:	6a69      	ldr	r1, [r5, #36]	@ 0x24
 8015f44:	4798      	blx	r3
 8015f46:	606e      	str	r6, [r5, #4]
 8015f48:	4630      	mov	r0, r6
 8015f4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015f4e:	4553      	cmp	r3, sl
 8015f50:	d1c8      	bne.n	8015ee4 <rcl_clock_remove_jump_callback+0x3c>
 8015f52:	3e01      	subs	r6, #1
 8015f54:	60ae      	str	r6, [r5, #8]
 8015f56:	2e00      	cmp	r6, #0
 8015f58:	d1e2      	bne.n	8015f20 <rcl_clock_remove_jump_callback+0x78>
 8015f5a:	e7f0      	b.n	8015f3e <rcl_clock_remove_jump_callback+0x96>
 8015f5c:	200b      	movs	r0, #11
 8015f5e:	4770      	bx	lr
 8015f60:	200a      	movs	r0, #10
 8015f62:	e7ea      	b.n	8015f3a <rcl_clock_remove_jump_callback+0x92>

08015f64 <_rcl_timer_time_jump>:
 8015f64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015f68:	4605      	mov	r5, r0
 8015f6a:	b084      	sub	sp, #16
 8015f6c:	4614      	mov	r4, r2
 8015f6e:	b131      	cbz	r1, 8015f7e <_rcl_timer_time_jump+0x1a>
 8015f70:	7803      	ldrb	r3, [r0, #0]
 8015f72:	3b02      	subs	r3, #2
 8015f74:	2b01      	cmp	r3, #1
 8015f76:	d93f      	bls.n	8015ff8 <_rcl_timer_time_jump+0x94>
 8015f78:	b004      	add	sp, #16
 8015f7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015f7e:	6813      	ldr	r3, [r2, #0]
 8015f80:	a902      	add	r1, sp, #8
 8015f82:	6818      	ldr	r0, [r3, #0]
 8015f84:	f7ff ff22 	bl	8015dcc <rcl_clock_get_now>
 8015f88:	2800      	cmp	r0, #0
 8015f8a:	d1f5      	bne.n	8015f78 <_rcl_timer_time_jump+0x14>
 8015f8c:	6820      	ldr	r0, [r4, #0]
 8015f8e:	2105      	movs	r1, #5
 8015f90:	3020      	adds	r0, #32
 8015f92:	f001 fd8d 	bl	8017ab0 <__atomic_load_8>
 8015f96:	6823      	ldr	r3, [r4, #0]
 8015f98:	4681      	mov	r9, r0
 8015f9a:	4688      	mov	r8, r1
 8015f9c:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 8015fa0:	2105      	movs	r1, #5
 8015fa2:	f001 fd85 	bl	8017ab0 <__atomic_load_8>
 8015fa6:	4607      	mov	r7, r0
 8015fa8:	6820      	ldr	r0, [r4, #0]
 8015faa:	460e      	mov	r6, r1
 8015fac:	3018      	adds	r0, #24
 8015fae:	2105      	movs	r1, #5
 8015fb0:	f001 fd7e 	bl	8017ab0 <__atomic_load_8>
 8015fb4:	782b      	ldrb	r3, [r5, #0]
 8015fb6:	9a02      	ldr	r2, [sp, #8]
 8015fb8:	3b02      	subs	r3, #2
 8015fba:	2b01      	cmp	r3, #1
 8015fbc:	460d      	mov	r5, r1
 8015fbe:	9b03      	ldr	r3, [sp, #12]
 8015fc0:	4682      	mov	sl, r0
 8015fc2:	d937      	bls.n	8016034 <_rcl_timer_time_jump+0xd0>
 8015fc4:	42ba      	cmp	r2, r7
 8015fc6:	eb73 0106 	sbcs.w	r1, r3, r6
 8015fca:	da5f      	bge.n	801608c <_rcl_timer_time_jump+0x128>
 8015fcc:	454a      	cmp	r2, r9
 8015fce:	eb73 0108 	sbcs.w	r1, r3, r8
 8015fd2:	dad1      	bge.n	8015f78 <_rcl_timer_time_jump+0x14>
 8015fd4:	6820      	ldr	r0, [r4, #0]
 8015fd6:	eb1a 0202 	adds.w	r2, sl, r2
 8015fda:	eb43 0305 	adc.w	r3, r3, r5
 8015fde:	2505      	movs	r5, #5
 8015fe0:	3028      	adds	r0, #40	@ 0x28
 8015fe2:	9500      	str	r5, [sp, #0]
 8015fe4:	f001 fd9a 	bl	8017b1c <__atomic_store_8>
 8015fe8:	6820      	ldr	r0, [r4, #0]
 8015fea:	9500      	str	r5, [sp, #0]
 8015fec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8015ff0:	3020      	adds	r0, #32
 8015ff2:	f001 fd93 	bl	8017b1c <__atomic_store_8>
 8015ff6:	e7bf      	b.n	8015f78 <_rcl_timer_time_jump+0x14>
 8015ff8:	6813      	ldr	r3, [r2, #0]
 8015ffa:	a902      	add	r1, sp, #8
 8015ffc:	6818      	ldr	r0, [r3, #0]
 8015ffe:	f7ff fee5 	bl	8015dcc <rcl_clock_get_now>
 8016002:	2800      	cmp	r0, #0
 8016004:	d1b8      	bne.n	8015f78 <_rcl_timer_time_jump+0x14>
 8016006:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801600a:	4313      	orrs	r3, r2
 801600c:	d0b4      	beq.n	8015f78 <_rcl_timer_time_jump+0x14>
 801600e:	6820      	ldr	r0, [r4, #0]
 8016010:	2105      	movs	r1, #5
 8016012:	3028      	adds	r0, #40	@ 0x28
 8016014:	f001 fd4c 	bl	8017ab0 <__atomic_load_8>
 8016018:	9d02      	ldr	r5, [sp, #8]
 801601a:	9b03      	ldr	r3, [sp, #12]
 801601c:	4602      	mov	r2, r0
 801601e:	6820      	ldr	r0, [r4, #0]
 8016020:	1b52      	subs	r2, r2, r5
 8016022:	f04f 0405 	mov.w	r4, #5
 8016026:	9400      	str	r4, [sp, #0]
 8016028:	eb61 0303 	sbc.w	r3, r1, r3
 801602c:	3030      	adds	r0, #48	@ 0x30
 801602e:	f001 fd75 	bl	8017b1c <__atomic_store_8>
 8016032:	e7a1      	b.n	8015f78 <_rcl_timer_time_jump+0x14>
 8016034:	4313      	orrs	r3, r2
 8016036:	d09f      	beq.n	8015f78 <_rcl_timer_time_jump+0x14>
 8016038:	6820      	ldr	r0, [r4, #0]
 801603a:	f04f 0805 	mov.w	r8, #5
 801603e:	2300      	movs	r3, #0
 8016040:	f8cd 8000 	str.w	r8, [sp]
 8016044:	3030      	adds	r0, #48	@ 0x30
 8016046:	2200      	movs	r2, #0
 8016048:	f001 fd9e 	bl	8017b88 <__atomic_exchange_8>
 801604c:	ea51 0300 	orrs.w	r3, r1, r0
 8016050:	4606      	mov	r6, r0
 8016052:	460f      	mov	r7, r1
 8016054:	d090      	beq.n	8015f78 <_rcl_timer_time_jump+0x14>
 8016056:	9a02      	ldr	r2, [sp, #8]
 8016058:	9b03      	ldr	r3, [sp, #12]
 801605a:	f8cd 8000 	str.w	r8, [sp]
 801605e:	1a12      	subs	r2, r2, r0
 8016060:	6820      	ldr	r0, [r4, #0]
 8016062:	eb63 0301 	sbc.w	r3, r3, r1
 8016066:	eb12 020a 	adds.w	r2, r2, sl
 801606a:	eb43 0305 	adc.w	r3, r3, r5
 801606e:	3028      	adds	r0, #40	@ 0x28
 8016070:	f001 fd54 	bl	8017b1c <__atomic_store_8>
 8016074:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8016078:	f8cd 8000 	str.w	r8, [sp]
 801607c:	6820      	ldr	r0, [r4, #0]
 801607e:	1b92      	subs	r2, r2, r6
 8016080:	eb63 0307 	sbc.w	r3, r3, r7
 8016084:	3020      	adds	r0, #32
 8016086:	f001 fd49 	bl	8017b1c <__atomic_store_8>
 801608a:	e775      	b.n	8015f78 <_rcl_timer_time_jump+0x14>
 801608c:	6820      	ldr	r0, [r4, #0]
 801608e:	3008      	adds	r0, #8
 8016090:	f004 fad6 	bl	801a640 <rcl_trigger_guard_condition>
 8016094:	e770      	b.n	8015f78 <_rcl_timer_time_jump+0x14>
 8016096:	bf00      	nop

08016098 <rcl_get_zero_initialized_timer>:
 8016098:	4b01      	ldr	r3, [pc, #4]	@ (80160a0 <rcl_get_zero_initialized_timer+0x8>)
 801609a:	6818      	ldr	r0, [r3, #0]
 801609c:	4770      	bx	lr
 801609e:	bf00      	nop
 80160a0:	0801e9b0 	.word	0x0801e9b0
 80160a4:	00000000 	.word	0x00000000

080160a8 <rcl_timer_init>:
 80160a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80160ac:	b0aa      	sub	sp, #168	@ 0xa8
 80160ae:	4604      	mov	r4, r0
 80160b0:	a835      	add	r0, sp, #212	@ 0xd4
 80160b2:	e9dd 8732 	ldrd	r8, r7, [sp, #200]	@ 0xc8
 80160b6:	460d      	mov	r5, r1
 80160b8:	4692      	mov	sl, r2
 80160ba:	f7f9 fc5f 	bl	800f97c <rcutils_allocator_is_valid>
 80160be:	2800      	cmp	r0, #0
 80160c0:	d064      	beq.n	801618c <rcl_timer_init+0xe4>
 80160c2:	2c00      	cmp	r4, #0
 80160c4:	d062      	beq.n	801618c <rcl_timer_init+0xe4>
 80160c6:	2d00      	cmp	r5, #0
 80160c8:	d060      	beq.n	801618c <rcl_timer_init+0xe4>
 80160ca:	2f00      	cmp	r7, #0
 80160cc:	db5e      	blt.n	801618c <rcl_timer_init+0xe4>
 80160ce:	6823      	ldr	r3, [r4, #0]
 80160d0:	b123      	cbz	r3, 80160dc <rcl_timer_init+0x34>
 80160d2:	2664      	movs	r6, #100	@ 0x64
 80160d4:	4630      	mov	r0, r6
 80160d6:	b02a      	add	sp, #168	@ 0xa8
 80160d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80160dc:	a908      	add	r1, sp, #32
 80160de:	4628      	mov	r0, r5
 80160e0:	f7ff fe74 	bl	8015dcc <rcl_clock_get_now>
 80160e4:	4606      	mov	r6, r0
 80160e6:	2800      	cmp	r0, #0
 80160e8:	d1f4      	bne.n	80160d4 <rcl_timer_init+0x2c>
 80160ea:	ae06      	add	r6, sp, #24
 80160ec:	4630      	mov	r0, r6
 80160ee:	e9cd 5a16 	strd	r5, sl, [sp, #88]	@ 0x58
 80160f2:	f004 f9ad 	bl	801a450 <rcl_get_zero_initialized_guard_condition>
 80160f6:	e896 0003 	ldmia.w	r6, {r0, r1}
 80160fa:	f10d 0960 	add.w	r9, sp, #96	@ 0x60
 80160fe:	ae0b      	add	r6, sp, #44	@ 0x2c
 8016100:	e889 0003 	stmia.w	r9, {r0, r1}
 8016104:	4630      	mov	r0, r6
 8016106:	f004 fa7f 	bl	801a608 <rcl_guard_condition_get_default_options>
 801610a:	ab0d      	add	r3, sp, #52	@ 0x34
 801610c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8016110:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8016114:	4651      	mov	r1, sl
 8016116:	e896 000c 	ldmia.w	r6, {r2, r3}
 801611a:	4648      	mov	r0, r9
 801611c:	f004 f9a2 	bl	801a464 <rcl_guard_condition_init>
 8016120:	4606      	mov	r6, r0
 8016122:	2800      	cmp	r0, #0
 8016124:	d1d6      	bne.n	80160d4 <rcl_timer_init+0x2c>
 8016126:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8016128:	781b      	ldrb	r3, [r3, #0]
 801612a:	2b01      	cmp	r3, #1
 801612c:	d033      	beq.n	8016196 <rcl_timer_init+0xee>
 801612e:	9934      	ldr	r1, [sp, #208]	@ 0xd0
 8016130:	911a      	str	r1, [sp, #104]	@ 0x68
 8016132:	4642      	mov	r2, r8
 8016134:	463b      	mov	r3, r7
 8016136:	e9cd 231c 	strd	r2, r3, [sp, #112]	@ 0x70
 801613a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801613e:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 80161f0 <rcl_timer_init+0x148>
 8016142:	eb12 0008 	adds.w	r0, r2, r8
 8016146:	eb47 0103 	adc.w	r1, r7, r3
 801614a:	f10d 0ed4 	add.w	lr, sp, #212	@ 0xd4
 801614e:	ed8d 7b22 	vstr	d7, [sp, #136]	@ 0x88
 8016152:	e9cd 231e 	strd	r2, r3, [sp, #120]	@ 0x78
 8016156:	e9cd 0120 	strd	r0, r1, [sp, #128]	@ 0x80
 801615a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801615e:	f10d 0c94 	add.w	ip, sp, #148	@ 0x94
 8016162:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016166:	f8de 3000 	ldr.w	r3, [lr]
 801616a:	f8cc 3000 	str.w	r3, [ip]
 801616e:	f04f 0a00 	mov.w	sl, #0
 8016172:	4619      	mov	r1, r3
 8016174:	f88d a090 	strb.w	sl, [sp, #144]	@ 0x90
 8016178:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
 801617a:	2050      	movs	r0, #80	@ 0x50
 801617c:	4798      	blx	r3
 801617e:	6020      	str	r0, [r4, #0]
 8016180:	b358      	cbz	r0, 80161da <rcl_timer_init+0x132>
 8016182:	2250      	movs	r2, #80	@ 0x50
 8016184:	a916      	add	r1, sp, #88	@ 0x58
 8016186:	f005 f9ba 	bl	801b4fe <memcpy>
 801618a:	e7a3      	b.n	80160d4 <rcl_timer_init+0x2c>
 801618c:	260b      	movs	r6, #11
 801618e:	4630      	mov	r0, r6
 8016190:	b02a      	add	sp, #168	@ 0xa8
 8016192:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016196:	2001      	movs	r0, #1
 8016198:	2100      	movs	r1, #0
 801619a:	e9cd 0112 	strd	r0, r1, [sp, #72]	@ 0x48
 801619e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80161a2:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80161a6:	e9cd 0114 	strd	r0, r1, [sp, #80]	@ 0x50
 80161aa:	4a13      	ldr	r2, [pc, #76]	@ (80161f8 <rcl_timer_init+0x150>)
 80161ac:	f88d 3040 	strb.w	r3, [sp, #64]	@ 0x40
 80161b0:	9405      	str	r4, [sp, #20]
 80161b2:	9204      	str	r2, [sp, #16]
 80161b4:	ab12      	add	r3, sp, #72	@ 0x48
 80161b6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80161b8:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80161bc:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 80161c0:	e89c 000c 	ldmia.w	ip, {r2, r3}
 80161c4:	4628      	mov	r0, r5
 80161c6:	f7ff fe0d 	bl	8015de4 <rcl_clock_add_jump_callback>
 80161ca:	4682      	mov	sl, r0
 80161cc:	2800      	cmp	r0, #0
 80161ce:	d0ae      	beq.n	801612e <rcl_timer_init+0x86>
 80161d0:	4648      	mov	r0, r9
 80161d2:	f004 f9f3 	bl	801a5bc <rcl_guard_condition_fini>
 80161d6:	4656      	mov	r6, sl
 80161d8:	e77c      	b.n	80160d4 <rcl_timer_init+0x2c>
 80161da:	4648      	mov	r0, r9
 80161dc:	f004 f9ee 	bl	801a5bc <rcl_guard_condition_fini>
 80161e0:	4905      	ldr	r1, [pc, #20]	@ (80161f8 <rcl_timer_init+0x150>)
 80161e2:	4622      	mov	r2, r4
 80161e4:	4628      	mov	r0, r5
 80161e6:	f7ff fe5f 	bl	8015ea8 <rcl_clock_remove_jump_callback>
 80161ea:	260a      	movs	r6, #10
 80161ec:	e772      	b.n	80160d4 <rcl_timer_init+0x2c>
 80161ee:	bf00      	nop
	...
 80161f8:	08015f65 	.word	0x08015f65

080161fc <rcl_timer_call>:
 80161fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016200:	b087      	sub	sp, #28
 8016202:	2800      	cmp	r0, #0
 8016204:	d06d      	beq.n	80162e2 <rcl_timer_call+0xe6>
 8016206:	6803      	ldr	r3, [r0, #0]
 8016208:	4604      	mov	r4, r0
 801620a:	2b00      	cmp	r3, #0
 801620c:	d063      	beq.n	80162d6 <rcl_timer_call+0xda>
 801620e:	f3bf 8f5b 	dmb	ish
 8016212:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8016216:	f3bf 8f5b 	dmb	ish
 801621a:	2b00      	cmp	r3, #0
 801621c:	d150      	bne.n	80162c0 <rcl_timer_call+0xc4>
 801621e:	6803      	ldr	r3, [r0, #0]
 8016220:	a904      	add	r1, sp, #16
 8016222:	6818      	ldr	r0, [r3, #0]
 8016224:	f7ff fdd2 	bl	8015dcc <rcl_clock_get_now>
 8016228:	4605      	mov	r5, r0
 801622a:	2800      	cmp	r0, #0
 801622c:	d14a      	bne.n	80162c4 <rcl_timer_call+0xc8>
 801622e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8016232:	2b00      	cmp	r3, #0
 8016234:	db4a      	blt.n	80162cc <rcl_timer_call+0xd0>
 8016236:	6820      	ldr	r0, [r4, #0]
 8016238:	f04f 0a05 	mov.w	sl, #5
 801623c:	f8cd a000 	str.w	sl, [sp]
 8016240:	3020      	adds	r0, #32
 8016242:	f001 fca1 	bl	8017b88 <__atomic_exchange_8>
 8016246:	6823      	ldr	r3, [r4, #0]
 8016248:	f3bf 8f5b 	dmb	ish
 801624c:	4680      	mov	r8, r0
 801624e:	f8d3 b010 	ldr.w	fp, [r3, #16]
 8016252:	f3bf 8f5b 	dmb	ish
 8016256:	6820      	ldr	r0, [r4, #0]
 8016258:	4689      	mov	r9, r1
 801625a:	3028      	adds	r0, #40	@ 0x28
 801625c:	4651      	mov	r1, sl
 801625e:	f001 fc27 	bl	8017ab0 <__atomic_load_8>
 8016262:	4606      	mov	r6, r0
 8016264:	6820      	ldr	r0, [r4, #0]
 8016266:	460f      	mov	r7, r1
 8016268:	3018      	adds	r0, #24
 801626a:	4651      	mov	r1, sl
 801626c:	f001 fc20 	bl	8017ab0 <__atomic_load_8>
 8016270:	1836      	adds	r6, r6, r0
 8016272:	4602      	mov	r2, r0
 8016274:	4682      	mov	sl, r0
 8016276:	e9dd 0c04 	ldrd	r0, ip, [sp, #16]
 801627a:	eb47 0701 	adc.w	r7, r7, r1
 801627e:	4286      	cmp	r6, r0
 8016280:	460b      	mov	r3, r1
 8016282:	eb77 010c 	sbcs.w	r1, r7, ip
 8016286:	da04      	bge.n	8016292 <rcl_timer_call+0x96>
 8016288:	ea53 0102 	orrs.w	r1, r3, r2
 801628c:	d12e      	bne.n	80162ec <rcl_timer_call+0xf0>
 801628e:	4606      	mov	r6, r0
 8016290:	4667      	mov	r7, ip
 8016292:	6820      	ldr	r0, [r4, #0]
 8016294:	2105      	movs	r1, #5
 8016296:	4632      	mov	r2, r6
 8016298:	463b      	mov	r3, r7
 801629a:	3028      	adds	r0, #40	@ 0x28
 801629c:	9100      	str	r1, [sp, #0]
 801629e:	f001 fc3d 	bl	8017b1c <__atomic_store_8>
 80162a2:	f1bb 0f00 	cmp.w	fp, #0
 80162a6:	d00d      	beq.n	80162c4 <rcl_timer_call+0xc8>
 80162a8:	9a04      	ldr	r2, [sp, #16]
 80162aa:	9b05      	ldr	r3, [sp, #20]
 80162ac:	ebb2 0208 	subs.w	r2, r2, r8
 80162b0:	4620      	mov	r0, r4
 80162b2:	eb63 0309 	sbc.w	r3, r3, r9
 80162b6:	47d8      	blx	fp
 80162b8:	4628      	mov	r0, r5
 80162ba:	b007      	add	sp, #28
 80162bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80162c0:	f240 3521 	movw	r5, #801	@ 0x321
 80162c4:	4628      	mov	r0, r5
 80162c6:	b007      	add	sp, #28
 80162c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80162cc:	2501      	movs	r5, #1
 80162ce:	4628      	mov	r0, r5
 80162d0:	b007      	add	sp, #28
 80162d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80162d6:	f44f 7548 	mov.w	r5, #800	@ 0x320
 80162da:	4628      	mov	r0, r5
 80162dc:	b007      	add	sp, #28
 80162de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80162e2:	250b      	movs	r5, #11
 80162e4:	4628      	mov	r0, r5
 80162e6:	b007      	add	sp, #28
 80162e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80162ec:	1b80      	subs	r0, r0, r6
 80162ee:	eb6c 0107 	sbc.w	r1, ip, r7
 80162f2:	3801      	subs	r0, #1
 80162f4:	f161 0100 	sbc.w	r1, r1, #0
 80162f8:	e9cd 3202 	strd	r3, r2, [sp, #8]
 80162fc:	f7ea fcbe 	bl	8000c7c <__aeabi_ldivmod>
 8016300:	9b02      	ldr	r3, [sp, #8]
 8016302:	3001      	adds	r0, #1
 8016304:	f141 0100 	adc.w	r1, r1, #0
 8016308:	fb00 f303 	mul.w	r3, r0, r3
 801630c:	fb01 330a 	mla	r3, r1, sl, r3
 8016310:	fba0 0a0a 	umull	r0, sl, r0, sl
 8016314:	1986      	adds	r6, r0, r6
 8016316:	4453      	add	r3, sl
 8016318:	eb43 0707 	adc.w	r7, r3, r7
 801631c:	e7b9      	b.n	8016292 <rcl_timer_call+0x96>
 801631e:	bf00      	nop

08016320 <rcl_timer_is_ready>:
 8016320:	b570      	push	{r4, r5, r6, lr}
 8016322:	b082      	sub	sp, #8
 8016324:	b378      	cbz	r0, 8016386 <rcl_timer_is_ready+0x66>
 8016326:	6803      	ldr	r3, [r0, #0]
 8016328:	4604      	mov	r4, r0
 801632a:	b383      	cbz	r3, 801638e <rcl_timer_is_ready+0x6e>
 801632c:	460d      	mov	r5, r1
 801632e:	b351      	cbz	r1, 8016386 <rcl_timer_is_ready+0x66>
 8016330:	f3bf 8f5b 	dmb	ish
 8016334:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8016338:	f3bf 8f5b 	dmb	ish
 801633c:	b953      	cbnz	r3, 8016354 <rcl_timer_is_ready+0x34>
 801633e:	6803      	ldr	r3, [r0, #0]
 8016340:	4669      	mov	r1, sp
 8016342:	6818      	ldr	r0, [r3, #0]
 8016344:	f7ff fd42 	bl	8015dcc <rcl_clock_get_now>
 8016348:	4606      	mov	r6, r0
 801634a:	b140      	cbz	r0, 801635e <rcl_timer_is_ready+0x3e>
 801634c:	f240 3321 	movw	r3, #801	@ 0x321
 8016350:	4298      	cmp	r0, r3
 8016352:	d101      	bne.n	8016358 <rcl_timer_is_ready+0x38>
 8016354:	2600      	movs	r6, #0
 8016356:	702e      	strb	r6, [r5, #0]
 8016358:	4630      	mov	r0, r6
 801635a:	b002      	add	sp, #8
 801635c:	bd70      	pop	{r4, r5, r6, pc}
 801635e:	6820      	ldr	r0, [r4, #0]
 8016360:	2105      	movs	r1, #5
 8016362:	3028      	adds	r0, #40	@ 0x28
 8016364:	f001 fba4 	bl	8017ab0 <__atomic_load_8>
 8016368:	9b00      	ldr	r3, [sp, #0]
 801636a:	1ac0      	subs	r0, r0, r3
 801636c:	9b01      	ldr	r3, [sp, #4]
 801636e:	eb61 0103 	sbc.w	r1, r1, r3
 8016372:	2801      	cmp	r0, #1
 8016374:	f171 0300 	sbcs.w	r3, r1, #0
 8016378:	bfb4      	ite	lt
 801637a:	2301      	movlt	r3, #1
 801637c:	2300      	movge	r3, #0
 801637e:	4630      	mov	r0, r6
 8016380:	702b      	strb	r3, [r5, #0]
 8016382:	b002      	add	sp, #8
 8016384:	bd70      	pop	{r4, r5, r6, pc}
 8016386:	260b      	movs	r6, #11
 8016388:	4630      	mov	r0, r6
 801638a:	b002      	add	sp, #8
 801638c:	bd70      	pop	{r4, r5, r6, pc}
 801638e:	f44f 7648 	mov.w	r6, #800	@ 0x320
 8016392:	e7e1      	b.n	8016358 <rcl_timer_is_ready+0x38>

08016394 <rcl_timer_get_time_until_next_call>:
 8016394:	b570      	push	{r4, r5, r6, lr}
 8016396:	b082      	sub	sp, #8
 8016398:	b330      	cbz	r0, 80163e8 <rcl_timer_get_time_until_next_call+0x54>
 801639a:	6803      	ldr	r3, [r0, #0]
 801639c:	4604      	mov	r4, r0
 801639e:	b33b      	cbz	r3, 80163f0 <rcl_timer_get_time_until_next_call+0x5c>
 80163a0:	460d      	mov	r5, r1
 80163a2:	b309      	cbz	r1, 80163e8 <rcl_timer_get_time_until_next_call+0x54>
 80163a4:	f3bf 8f5b 	dmb	ish
 80163a8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80163ac:	f3bf 8f5b 	dmb	ish
 80163b0:	b9ab      	cbnz	r3, 80163de <rcl_timer_get_time_until_next_call+0x4a>
 80163b2:	6803      	ldr	r3, [r0, #0]
 80163b4:	4669      	mov	r1, sp
 80163b6:	6818      	ldr	r0, [r3, #0]
 80163b8:	f7ff fd08 	bl	8015dcc <rcl_clock_get_now>
 80163bc:	4606      	mov	r6, r0
 80163be:	b958      	cbnz	r0, 80163d8 <rcl_timer_get_time_until_next_call+0x44>
 80163c0:	6820      	ldr	r0, [r4, #0]
 80163c2:	2105      	movs	r1, #5
 80163c4:	3028      	adds	r0, #40	@ 0x28
 80163c6:	f001 fb73 	bl	8017ab0 <__atomic_load_8>
 80163ca:	9b00      	ldr	r3, [sp, #0]
 80163cc:	1ac0      	subs	r0, r0, r3
 80163ce:	9b01      	ldr	r3, [sp, #4]
 80163d0:	6028      	str	r0, [r5, #0]
 80163d2:	eb61 0103 	sbc.w	r1, r1, r3
 80163d6:	6069      	str	r1, [r5, #4]
 80163d8:	4630      	mov	r0, r6
 80163da:	b002      	add	sp, #8
 80163dc:	bd70      	pop	{r4, r5, r6, pc}
 80163de:	f240 3621 	movw	r6, #801	@ 0x321
 80163e2:	4630      	mov	r0, r6
 80163e4:	b002      	add	sp, #8
 80163e6:	bd70      	pop	{r4, r5, r6, pc}
 80163e8:	260b      	movs	r6, #11
 80163ea:	4630      	mov	r0, r6
 80163ec:	b002      	add	sp, #8
 80163ee:	bd70      	pop	{r4, r5, r6, pc}
 80163f0:	f44f 7648 	mov.w	r6, #800	@ 0x320
 80163f4:	e7f0      	b.n	80163d8 <rcl_timer_get_time_until_next_call+0x44>
 80163f6:	bf00      	nop

080163f8 <rcl_timer_get_guard_condition>:
 80163f8:	b130      	cbz	r0, 8016408 <rcl_timer_get_guard_condition+0x10>
 80163fa:	6800      	ldr	r0, [r0, #0]
 80163fc:	b120      	cbz	r0, 8016408 <rcl_timer_get_guard_condition+0x10>
 80163fe:	68c3      	ldr	r3, [r0, #12]
 8016400:	b10b      	cbz	r3, 8016406 <rcl_timer_get_guard_condition+0xe>
 8016402:	3008      	adds	r0, #8
 8016404:	4770      	bx	lr
 8016406:	4618      	mov	r0, r3
 8016408:	4770      	bx	lr
 801640a:	bf00      	nop

0801640c <rcl_get_zero_initialized_wait_set>:
 801640c:	b510      	push	{r4, lr}
 801640e:	4c08      	ldr	r4, [pc, #32]	@ (8016430 <rcl_get_zero_initialized_wait_set+0x24>)
 8016410:	4686      	mov	lr, r0
 8016412:	4684      	mov	ip, r0
 8016414:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016416:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801641a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801641c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016420:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016422:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016426:	6823      	ldr	r3, [r4, #0]
 8016428:	f8cc 3000 	str.w	r3, [ip]
 801642c:	4670      	mov	r0, lr
 801642e:	bd10      	pop	{r4, pc}
 8016430:	0801e9b4 	.word	0x0801e9b4

08016434 <rcl_wait_set_is_valid>:
 8016434:	b118      	cbz	r0, 801643e <rcl_wait_set_is_valid+0xa>
 8016436:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8016438:	3800      	subs	r0, #0
 801643a:	bf18      	it	ne
 801643c:	2001      	movne	r0, #1
 801643e:	4770      	bx	lr

08016440 <rcl_wait_set_fini>:
 8016440:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016444:	b082      	sub	sp, #8
 8016446:	2800      	cmp	r0, #0
 8016448:	f000 8095 	beq.w	8016576 <rcl_wait_set_fini+0x136>
 801644c:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 801644e:	4604      	mov	r4, r0
 8016450:	2e00      	cmp	r6, #0
 8016452:	f000 808c 	beq.w	801656e <rcl_wait_set_fini+0x12e>
 8016456:	6bf0      	ldr	r0, [r6, #60]	@ 0x3c
 8016458:	f002 fd56 	bl	8018f08 <rmw_destroy_wait_set>
 801645c:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801645e:	1e06      	subs	r6, r0, #0
 8016460:	bf18      	it	ne
 8016462:	f44f 7661 	movne.w	r6, #900	@ 0x384
 8016466:	2d00      	cmp	r5, #0
 8016468:	f000 8081 	beq.w	801656e <rcl_wait_set_fini+0x12e>
 801646c:	6820      	ldr	r0, [r4, #0]
 801646e:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 8016472:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8016474:	2700      	movs	r7, #0
 8016476:	6067      	str	r7, [r4, #4]
 8016478:	602f      	str	r7, [r5, #0]
 801647a:	b120      	cbz	r0, 8016486 <rcl_wait_set_fini+0x46>
 801647c:	9101      	str	r1, [sp, #4]
 801647e:	47c0      	blx	r8
 8016480:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8016482:	9901      	ldr	r1, [sp, #4]
 8016484:	6027      	str	r7, [r4, #0]
 8016486:	68a8      	ldr	r0, [r5, #8]
 8016488:	b120      	cbz	r0, 8016494 <rcl_wait_set_fini+0x54>
 801648a:	47c0      	blx	r8
 801648c:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801648e:	2300      	movs	r3, #0
 8016490:	e9c5 3301 	strd	r3, r3, [r5, #4]
 8016494:	68a0      	ldr	r0, [r4, #8]
 8016496:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8016498:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 801649a:	f04f 0800 	mov.w	r8, #0
 801649e:	f8c4 800c 	str.w	r8, [r4, #12]
 80164a2:	f8c5 800c 	str.w	r8, [r5, #12]
 80164a6:	b128      	cbz	r0, 80164b4 <rcl_wait_set_fini+0x74>
 80164a8:	47b8      	blx	r7
 80164aa:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80164ac:	f8c4 8008 	str.w	r8, [r4, #8]
 80164b0:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 80164b2:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80164b4:	6968      	ldr	r0, [r5, #20]
 80164b6:	f04f 0800 	mov.w	r8, #0
 80164ba:	f8c5 8010 	str.w	r8, [r5, #16]
 80164be:	b128      	cbz	r0, 80164cc <rcl_wait_set_fini+0x8c>
 80164c0:	47b8      	blx	r7
 80164c2:	f8c5 8014 	str.w	r8, [r5, #20]
 80164c6:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80164c8:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 80164ca:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80164cc:	6920      	ldr	r0, [r4, #16]
 80164ce:	f04f 0800 	mov.w	r8, #0
 80164d2:	f8c4 8014 	str.w	r8, [r4, #20]
 80164d6:	f8c5 8040 	str.w	r8, [r5, #64]	@ 0x40
 80164da:	b128      	cbz	r0, 80164e8 <rcl_wait_set_fini+0xa8>
 80164dc:	47b8      	blx	r7
 80164de:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80164e0:	f8c4 8010 	str.w	r8, [r4, #16]
 80164e4:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 80164e6:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80164e8:	69a0      	ldr	r0, [r4, #24]
 80164ea:	f04f 0800 	mov.w	r8, #0
 80164ee:	f8c4 801c 	str.w	r8, [r4, #28]
 80164f2:	f8c5 8018 	str.w	r8, [r5, #24]
 80164f6:	b128      	cbz	r0, 8016504 <rcl_wait_set_fini+0xc4>
 80164f8:	9101      	str	r1, [sp, #4]
 80164fa:	47b8      	blx	r7
 80164fc:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80164fe:	9901      	ldr	r1, [sp, #4]
 8016500:	f8c4 8018 	str.w	r8, [r4, #24]
 8016504:	6a28      	ldr	r0, [r5, #32]
 8016506:	b120      	cbz	r0, 8016512 <rcl_wait_set_fini+0xd2>
 8016508:	47b8      	blx	r7
 801650a:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801650c:	2300      	movs	r3, #0
 801650e:	e9c5 3307 	strd	r3, r3, [r5, #28]
 8016512:	6a20      	ldr	r0, [r4, #32]
 8016514:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 8016518:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 801651a:	2700      	movs	r7, #0
 801651c:	6267      	str	r7, [r4, #36]	@ 0x24
 801651e:	626f      	str	r7, [r5, #36]	@ 0x24
 8016520:	b120      	cbz	r0, 801652c <rcl_wait_set_fini+0xec>
 8016522:	9101      	str	r1, [sp, #4]
 8016524:	47c0      	blx	r8
 8016526:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8016528:	9901      	ldr	r1, [sp, #4]
 801652a:	6227      	str	r7, [r4, #32]
 801652c:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 801652e:	b120      	cbz	r0, 801653a <rcl_wait_set_fini+0xfa>
 8016530:	47c0      	blx	r8
 8016532:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8016534:	2300      	movs	r3, #0
 8016536:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 801653a:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 801653c:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 8016540:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8016542:	2700      	movs	r7, #0
 8016544:	62e7      	str	r7, [r4, #44]	@ 0x2c
 8016546:	632f      	str	r7, [r5, #48]	@ 0x30
 8016548:	b120      	cbz	r0, 8016554 <rcl_wait_set_fini+0x114>
 801654a:	9101      	str	r1, [sp, #4]
 801654c:	47c0      	blx	r8
 801654e:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8016550:	9901      	ldr	r1, [sp, #4]
 8016552:	62a7      	str	r7, [r4, #40]	@ 0x28
 8016554:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 8016556:	b120      	cbz	r0, 8016562 <rcl_wait_set_fini+0x122>
 8016558:	47c0      	blx	r8
 801655a:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801655c:	2300      	movs	r3, #0
 801655e:	e9c5 330d 	strd	r3, r3, [r5, #52]	@ 0x34
 8016562:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8016564:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8016566:	4628      	mov	r0, r5
 8016568:	4798      	blx	r3
 801656a:	2300      	movs	r3, #0
 801656c:	6323      	str	r3, [r4, #48]	@ 0x30
 801656e:	4630      	mov	r0, r6
 8016570:	b002      	add	sp, #8
 8016572:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016576:	260b      	movs	r6, #11
 8016578:	4630      	mov	r0, r6
 801657a:	b002      	add	sp, #8
 801657c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08016580 <rcl_wait_set_add_subscription>:
 8016580:	b318      	cbz	r0, 80165ca <rcl_wait_set_add_subscription+0x4a>
 8016582:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8016584:	b570      	push	{r4, r5, r6, lr}
 8016586:	4604      	mov	r4, r0
 8016588:	b30b      	cbz	r3, 80165ce <rcl_wait_set_add_subscription+0x4e>
 801658a:	b319      	cbz	r1, 80165d4 <rcl_wait_set_add_subscription+0x54>
 801658c:	681d      	ldr	r5, [r3, #0]
 801658e:	6840      	ldr	r0, [r0, #4]
 8016590:	4285      	cmp	r5, r0
 8016592:	d217      	bcs.n	80165c4 <rcl_wait_set_add_subscription+0x44>
 8016594:	6820      	ldr	r0, [r4, #0]
 8016596:	1c6e      	adds	r6, r5, #1
 8016598:	601e      	str	r6, [r3, #0]
 801659a:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 801659e:	b102      	cbz	r2, 80165a2 <rcl_wait_set_add_subscription+0x22>
 80165a0:	6015      	str	r5, [r2, #0]
 80165a2:	4608      	mov	r0, r1
 80165a4:	f7ff fb72 	bl	8015c8c <rcl_subscription_get_rmw_handle>
 80165a8:	b150      	cbz	r0, 80165c0 <rcl_wait_set_add_subscription+0x40>
 80165aa:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80165ac:	6842      	ldr	r2, [r0, #4]
 80165ae:	689b      	ldr	r3, [r3, #8]
 80165b0:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80165b4:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80165b6:	6853      	ldr	r3, [r2, #4]
 80165b8:	3301      	adds	r3, #1
 80165ba:	2000      	movs	r0, #0
 80165bc:	6053      	str	r3, [r2, #4]
 80165be:	bd70      	pop	{r4, r5, r6, pc}
 80165c0:	2001      	movs	r0, #1
 80165c2:	bd70      	pop	{r4, r5, r6, pc}
 80165c4:	f240 3086 	movw	r0, #902	@ 0x386
 80165c8:	bd70      	pop	{r4, r5, r6, pc}
 80165ca:	200b      	movs	r0, #11
 80165cc:	4770      	bx	lr
 80165ce:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80165d2:	bd70      	pop	{r4, r5, r6, pc}
 80165d4:	200b      	movs	r0, #11
 80165d6:	bd70      	pop	{r4, r5, r6, pc}

080165d8 <rcl_wait_set_clear>:
 80165d8:	2800      	cmp	r0, #0
 80165da:	d073      	beq.n	80166c4 <rcl_wait_set_clear+0xec>
 80165dc:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80165de:	b510      	push	{r4, lr}
 80165e0:	4604      	mov	r4, r0
 80165e2:	2b00      	cmp	r3, #0
 80165e4:	d070      	beq.n	80166c8 <rcl_wait_set_clear+0xf0>
 80165e6:	6800      	ldr	r0, [r0, #0]
 80165e8:	b138      	cbz	r0, 80165fa <rcl_wait_set_clear+0x22>
 80165ea:	6862      	ldr	r2, [r4, #4]
 80165ec:	2100      	movs	r1, #0
 80165ee:	0092      	lsls	r2, r2, #2
 80165f0:	f004 febc 	bl	801b36c <memset>
 80165f4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80165f6:	2200      	movs	r2, #0
 80165f8:	601a      	str	r2, [r3, #0]
 80165fa:	68a0      	ldr	r0, [r4, #8]
 80165fc:	b138      	cbz	r0, 801660e <rcl_wait_set_clear+0x36>
 80165fe:	68e2      	ldr	r2, [r4, #12]
 8016600:	2100      	movs	r1, #0
 8016602:	0092      	lsls	r2, r2, #2
 8016604:	f004 feb2 	bl	801b36c <memset>
 8016608:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801660a:	2200      	movs	r2, #0
 801660c:	60da      	str	r2, [r3, #12]
 801660e:	69a0      	ldr	r0, [r4, #24]
 8016610:	b138      	cbz	r0, 8016622 <rcl_wait_set_clear+0x4a>
 8016612:	69e2      	ldr	r2, [r4, #28]
 8016614:	2100      	movs	r1, #0
 8016616:	0092      	lsls	r2, r2, #2
 8016618:	f004 fea8 	bl	801b36c <memset>
 801661c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801661e:	2200      	movs	r2, #0
 8016620:	619a      	str	r2, [r3, #24]
 8016622:	6a20      	ldr	r0, [r4, #32]
 8016624:	b138      	cbz	r0, 8016636 <rcl_wait_set_clear+0x5e>
 8016626:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8016628:	2100      	movs	r1, #0
 801662a:	0092      	lsls	r2, r2, #2
 801662c:	f004 fe9e 	bl	801b36c <memset>
 8016630:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8016632:	2200      	movs	r2, #0
 8016634:	625a      	str	r2, [r3, #36]	@ 0x24
 8016636:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8016638:	b138      	cbz	r0, 801664a <rcl_wait_set_clear+0x72>
 801663a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 801663c:	2100      	movs	r1, #0
 801663e:	0092      	lsls	r2, r2, #2
 8016640:	f004 fe94 	bl	801b36c <memset>
 8016644:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8016646:	2200      	movs	r2, #0
 8016648:	631a      	str	r2, [r3, #48]	@ 0x30
 801664a:	6920      	ldr	r0, [r4, #16]
 801664c:	b138      	cbz	r0, 801665e <rcl_wait_set_clear+0x86>
 801664e:	6962      	ldr	r2, [r4, #20]
 8016650:	2100      	movs	r1, #0
 8016652:	0092      	lsls	r2, r2, #2
 8016654:	f004 fe8a 	bl	801b36c <memset>
 8016658:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801665a:	2200      	movs	r2, #0
 801665c:	641a      	str	r2, [r3, #64]	@ 0x40
 801665e:	6898      	ldr	r0, [r3, #8]
 8016660:	b138      	cbz	r0, 8016672 <rcl_wait_set_clear+0x9a>
 8016662:	685a      	ldr	r2, [r3, #4]
 8016664:	2100      	movs	r1, #0
 8016666:	0092      	lsls	r2, r2, #2
 8016668:	f004 fe80 	bl	801b36c <memset>
 801666c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801666e:	2200      	movs	r2, #0
 8016670:	605a      	str	r2, [r3, #4]
 8016672:	6958      	ldr	r0, [r3, #20]
 8016674:	b138      	cbz	r0, 8016686 <rcl_wait_set_clear+0xae>
 8016676:	691a      	ldr	r2, [r3, #16]
 8016678:	2100      	movs	r1, #0
 801667a:	0092      	lsls	r2, r2, #2
 801667c:	f004 fe76 	bl	801b36c <memset>
 8016680:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8016682:	2200      	movs	r2, #0
 8016684:	611a      	str	r2, [r3, #16]
 8016686:	6a18      	ldr	r0, [r3, #32]
 8016688:	b138      	cbz	r0, 801669a <rcl_wait_set_clear+0xc2>
 801668a:	69da      	ldr	r2, [r3, #28]
 801668c:	2100      	movs	r1, #0
 801668e:	0092      	lsls	r2, r2, #2
 8016690:	f004 fe6c 	bl	801b36c <memset>
 8016694:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8016696:	2200      	movs	r2, #0
 8016698:	61da      	str	r2, [r3, #28]
 801669a:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 801669c:	b138      	cbz	r0, 80166ae <rcl_wait_set_clear+0xd6>
 801669e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80166a0:	2100      	movs	r1, #0
 80166a2:	0092      	lsls	r2, r2, #2
 80166a4:	f004 fe62 	bl	801b36c <memset>
 80166a8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80166aa:	2200      	movs	r2, #0
 80166ac:	629a      	str	r2, [r3, #40]	@ 0x28
 80166ae:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80166b0:	b138      	cbz	r0, 80166c2 <rcl_wait_set_clear+0xea>
 80166b2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80166b4:	2100      	movs	r1, #0
 80166b6:	0092      	lsls	r2, r2, #2
 80166b8:	f004 fe58 	bl	801b36c <memset>
 80166bc:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80166be:	2000      	movs	r0, #0
 80166c0:	6358      	str	r0, [r3, #52]	@ 0x34
 80166c2:	bd10      	pop	{r4, pc}
 80166c4:	200b      	movs	r0, #11
 80166c6:	4770      	bx	lr
 80166c8:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80166cc:	bd10      	pop	{r4, pc}
 80166ce:	bf00      	nop

080166d0 <rcl_wait_set_resize>:
 80166d0:	2800      	cmp	r0, #0
 80166d2:	f000 8185 	beq.w	80169e0 <rcl_wait_set_resize+0x310>
 80166d6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80166da:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 80166dc:	b083      	sub	sp, #12
 80166de:	4605      	mov	r5, r0
 80166e0:	2c00      	cmp	r4, #0
 80166e2:	f000 817f 	beq.w	80169e4 <rcl_wait_set_resize+0x314>
 80166e6:	f04f 0900 	mov.w	r9, #0
 80166ea:	f8d4 a058 	ldr.w	sl, [r4, #88]	@ 0x58
 80166ee:	461f      	mov	r7, r3
 80166f0:	4688      	mov	r8, r1
 80166f2:	e9d4 b313 	ldrd	fp, r3, [r4, #76]	@ 0x4c
 80166f6:	4616      	mov	r6, r2
 80166f8:	f8c0 9004 	str.w	r9, [r0, #4]
 80166fc:	f8c4 9000 	str.w	r9, [r4]
 8016700:	2900      	cmp	r1, #0
 8016702:	f000 80bd 	beq.w	8016880 <rcl_wait_set_resize+0x1b0>
 8016706:	008c      	lsls	r4, r1, #2
 8016708:	6800      	ldr	r0, [r0, #0]
 801670a:	9301      	str	r3, [sp, #4]
 801670c:	4652      	mov	r2, sl
 801670e:	4621      	mov	r1, r4
 8016710:	4798      	blx	r3
 8016712:	9b01      	ldr	r3, [sp, #4]
 8016714:	6028      	str	r0, [r5, #0]
 8016716:	2800      	cmp	r0, #0
 8016718:	f000 80cb 	beq.w	80168b2 <rcl_wait_set_resize+0x1e2>
 801671c:	4622      	mov	r2, r4
 801671e:	4649      	mov	r1, r9
 8016720:	9301      	str	r3, [sp, #4]
 8016722:	f004 fe23 	bl	801b36c <memset>
 8016726:	f8c5 8004 	str.w	r8, [r5, #4]
 801672a:	f8d5 8030 	ldr.w	r8, [r5, #48]	@ 0x30
 801672e:	9b01      	ldr	r3, [sp, #4]
 8016730:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8016734:	f8c8 9004 	str.w	r9, [r8, #4]
 8016738:	4652      	mov	r2, sl
 801673a:	4621      	mov	r1, r4
 801673c:	4798      	blx	r3
 801673e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8016740:	f8c8 0008 	str.w	r0, [r8, #8]
 8016744:	689b      	ldr	r3, [r3, #8]
 8016746:	2b00      	cmp	r3, #0
 8016748:	f000 80ac 	beq.w	80168a4 <rcl_wait_set_resize+0x1d4>
 801674c:	4622      	mov	r2, r4
 801674e:	4649      	mov	r1, r9
 8016750:	4618      	mov	r0, r3
 8016752:	f004 fe0b 	bl	801b36c <memset>
 8016756:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8016758:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 801675c:	f04f 0800 	mov.w	r8, #0
 8016760:	e9d4 2313 	ldrd	r2, r3, [r4, #76]	@ 0x4c
 8016764:	f8c5 800c 	str.w	r8, [r5, #12]
 8016768:	f8c4 800c 	str.w	r8, [r4, #12]
 801676c:	2e00      	cmp	r6, #0
 801676e:	f040 80a4 	bne.w	80168ba <rcl_wait_set_resize+0x1ea>
 8016772:	68a8      	ldr	r0, [r5, #8]
 8016774:	b128      	cbz	r0, 8016782 <rcl_wait_set_resize+0xb2>
 8016776:	4649      	mov	r1, r9
 8016778:	4790      	blx	r2
 801677a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801677c:	60ae      	str	r6, [r5, #8]
 801677e:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8016782:	f04f 0800 	mov.w	r8, #0
 8016786:	19f6      	adds	r6, r6, r7
 8016788:	f8c4 8010 	str.w	r8, [r4, #16]
 801678c:	f040 80ac 	bne.w	80168e8 <rcl_wait_set_resize+0x218>
 8016790:	6960      	ldr	r0, [r4, #20]
 8016792:	b130      	cbz	r0, 80167a2 <rcl_wait_set_resize+0xd2>
 8016794:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8016796:	4649      	mov	r1, r9
 8016798:	4798      	blx	r3
 801679a:	6166      	str	r6, [r4, #20]
 801679c:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801679e:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 80167a2:	2600      	movs	r6, #0
 80167a4:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 80167a8:	616e      	str	r6, [r5, #20]
 80167aa:	6426      	str	r6, [r4, #64]	@ 0x40
 80167ac:	2f00      	cmp	r7, #0
 80167ae:	f040 80ad 	bne.w	801690c <rcl_wait_set_resize+0x23c>
 80167b2:	6928      	ldr	r0, [r5, #16]
 80167b4:	b138      	cbz	r0, 80167c6 <rcl_wait_set_resize+0xf6>
 80167b6:	4649      	mov	r1, r9
 80167b8:	47d0      	blx	sl
 80167ba:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80167bc:	612f      	str	r7, [r5, #16]
 80167be:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 80167c2:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 80167c6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80167c8:	2600      	movs	r6, #0
 80167ca:	61ee      	str	r6, [r5, #28]
 80167cc:	61a6      	str	r6, [r4, #24]
 80167ce:	2b00      	cmp	r3, #0
 80167d0:	f040 80af 	bne.w	8016932 <rcl_wait_set_resize+0x262>
 80167d4:	69a8      	ldr	r0, [r5, #24]
 80167d6:	b120      	cbz	r0, 80167e2 <rcl_wait_set_resize+0x112>
 80167d8:	4649      	mov	r1, r9
 80167da:	47d0      	blx	sl
 80167dc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80167de:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80167e0:	61ab      	str	r3, [r5, #24]
 80167e2:	6a20      	ldr	r0, [r4, #32]
 80167e4:	b128      	cbz	r0, 80167f2 <rcl_wait_set_resize+0x122>
 80167e6:	4649      	mov	r1, r9
 80167e8:	47d0      	blx	sl
 80167ea:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80167ec:	2300      	movs	r3, #0
 80167ee:	e9c4 3307 	strd	r3, r3, [r4, #28]
 80167f2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80167f4:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 80167f6:	2600      	movs	r6, #0
 80167f8:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 80167fc:	626e      	str	r6, [r5, #36]	@ 0x24
 80167fe:	6266      	str	r6, [r4, #36]	@ 0x24
 8016800:	2b00      	cmp	r3, #0
 8016802:	f000 80b6 	beq.w	8016972 <rcl_wait_set_resize+0x2a2>
 8016806:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 801680a:	6a28      	ldr	r0, [r5, #32]
 801680c:	463a      	mov	r2, r7
 801680e:	4651      	mov	r1, sl
 8016810:	47c8      	blx	r9
 8016812:	6228      	str	r0, [r5, #32]
 8016814:	2800      	cmp	r0, #0
 8016816:	d04c      	beq.n	80168b2 <rcl_wait_set_resize+0x1e2>
 8016818:	4652      	mov	r2, sl
 801681a:	4631      	mov	r1, r6
 801681c:	f004 fda6 	bl	801b36c <memset>
 8016820:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8016822:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8016824:	626b      	str	r3, [r5, #36]	@ 0x24
 8016826:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8016828:	62a6      	str	r6, [r4, #40]	@ 0x28
 801682a:	463a      	mov	r2, r7
 801682c:	4651      	mov	r1, sl
 801682e:	47c8      	blx	r9
 8016830:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8016832:	62e0      	str	r0, [r4, #44]	@ 0x2c
 8016834:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 8016836:	2c00      	cmp	r4, #0
 8016838:	f000 80f0 	beq.w	8016a1c <rcl_wait_set_resize+0x34c>
 801683c:	4620      	mov	r0, r4
 801683e:	4652      	mov	r2, sl
 8016840:	4631      	mov	r1, r6
 8016842:	f004 fd93 	bl	801b36c <memset>
 8016846:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8016848:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801684a:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 801684c:	2600      	movs	r6, #0
 801684e:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 8016852:	62ee      	str	r6, [r5, #44]	@ 0x2c
 8016854:	6326      	str	r6, [r4, #48]	@ 0x30
 8016856:	2b00      	cmp	r3, #0
 8016858:	f040 809d 	bne.w	8016996 <rcl_wait_set_resize+0x2c6>
 801685c:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 801685e:	b120      	cbz	r0, 801686a <rcl_wait_set_resize+0x19a>
 8016860:	4639      	mov	r1, r7
 8016862:	47c0      	blx	r8
 8016864:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016866:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8016868:	62ab      	str	r3, [r5, #40]	@ 0x28
 801686a:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 801686c:	b310      	cbz	r0, 80168b4 <rcl_wait_set_resize+0x1e4>
 801686e:	4639      	mov	r1, r7
 8016870:	47c0      	blx	r8
 8016872:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8016874:	2000      	movs	r0, #0
 8016876:	e9c3 000d 	strd	r0, r0, [r3, #52]	@ 0x34
 801687a:	b003      	add	sp, #12
 801687c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016880:	6800      	ldr	r0, [r0, #0]
 8016882:	b120      	cbz	r0, 801688e <rcl_wait_set_resize+0x1be>
 8016884:	4651      	mov	r1, sl
 8016886:	47d8      	blx	fp
 8016888:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801688a:	f8c5 8000 	str.w	r8, [r5]
 801688e:	68a0      	ldr	r0, [r4, #8]
 8016890:	2800      	cmp	r0, #0
 8016892:	f43f af61 	beq.w	8016758 <rcl_wait_set_resize+0x88>
 8016896:	4651      	mov	r1, sl
 8016898:	47d8      	blx	fp
 801689a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801689c:	2300      	movs	r3, #0
 801689e:	e9c4 3301 	strd	r3, r3, [r4, #4]
 80168a2:	e759      	b.n	8016758 <rcl_wait_set_resize+0x88>
 80168a4:	6828      	ldr	r0, [r5, #0]
 80168a6:	9301      	str	r3, [sp, #4]
 80168a8:	4651      	mov	r1, sl
 80168aa:	47d8      	blx	fp
 80168ac:	9b01      	ldr	r3, [sp, #4]
 80168ae:	e9c5 3300 	strd	r3, r3, [r5]
 80168b2:	200a      	movs	r0, #10
 80168b4:	b003      	add	sp, #12
 80168b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80168ba:	00b4      	lsls	r4, r6, #2
 80168bc:	68a8      	ldr	r0, [r5, #8]
 80168be:	464a      	mov	r2, r9
 80168c0:	4621      	mov	r1, r4
 80168c2:	4798      	blx	r3
 80168c4:	60a8      	str	r0, [r5, #8]
 80168c6:	2800      	cmp	r0, #0
 80168c8:	d0f3      	beq.n	80168b2 <rcl_wait_set_resize+0x1e2>
 80168ca:	4622      	mov	r2, r4
 80168cc:	4641      	mov	r1, r8
 80168ce:	f004 fd4d 	bl	801b36c <memset>
 80168d2:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80168d4:	60ee      	str	r6, [r5, #12]
 80168d6:	f04f 0800 	mov.w	r8, #0
 80168da:	19f6      	adds	r6, r6, r7
 80168dc:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 80168e0:	f8c4 8010 	str.w	r8, [r4, #16]
 80168e4:	f43f af54 	beq.w	8016790 <rcl_wait_set_resize+0xc0>
 80168e8:	00b6      	lsls	r6, r6, #2
 80168ea:	464a      	mov	r2, r9
 80168ec:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 80168ee:	6960      	ldr	r0, [r4, #20]
 80168f0:	4631      	mov	r1, r6
 80168f2:	4798      	blx	r3
 80168f4:	4681      	mov	r9, r0
 80168f6:	6160      	str	r0, [r4, #20]
 80168f8:	2800      	cmp	r0, #0
 80168fa:	d076      	beq.n	80169ea <rcl_wait_set_resize+0x31a>
 80168fc:	4632      	mov	r2, r6
 80168fe:	4641      	mov	r1, r8
 8016900:	f004 fd34 	bl	801b36c <memset>
 8016904:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8016906:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 801690a:	e74a      	b.n	80167a2 <rcl_wait_set_resize+0xd2>
 801690c:	00bc      	lsls	r4, r7, #2
 801690e:	6928      	ldr	r0, [r5, #16]
 8016910:	464a      	mov	r2, r9
 8016912:	4621      	mov	r1, r4
 8016914:	47c0      	blx	r8
 8016916:	6128      	str	r0, [r5, #16]
 8016918:	2800      	cmp	r0, #0
 801691a:	d0ca      	beq.n	80168b2 <rcl_wait_set_resize+0x1e2>
 801691c:	4622      	mov	r2, r4
 801691e:	4631      	mov	r1, r6
 8016920:	f004 fd24 	bl	801b36c <memset>
 8016924:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8016926:	616f      	str	r7, [r5, #20]
 8016928:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 801692c:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8016930:	e749      	b.n	80167c6 <rcl_wait_set_resize+0xf6>
 8016932:	009c      	lsls	r4, r3, #2
 8016934:	69a8      	ldr	r0, [r5, #24]
 8016936:	464a      	mov	r2, r9
 8016938:	4621      	mov	r1, r4
 801693a:	47c0      	blx	r8
 801693c:	61a8      	str	r0, [r5, #24]
 801693e:	2800      	cmp	r0, #0
 8016940:	d0b7      	beq.n	80168b2 <rcl_wait_set_resize+0x1e2>
 8016942:	4622      	mov	r2, r4
 8016944:	4631      	mov	r1, r6
 8016946:	f004 fd11 	bl	801b36c <memset>
 801694a:	6b2f      	ldr	r7, [r5, #48]	@ 0x30
 801694c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801694e:	61eb      	str	r3, [r5, #28]
 8016950:	6a38      	ldr	r0, [r7, #32]
 8016952:	61fe      	str	r6, [r7, #28]
 8016954:	464a      	mov	r2, r9
 8016956:	4621      	mov	r1, r4
 8016958:	47c0      	blx	r8
 801695a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801695c:	6238      	str	r0, [r7, #32]
 801695e:	6a1f      	ldr	r7, [r3, #32]
 8016960:	2f00      	cmp	r7, #0
 8016962:	d054      	beq.n	8016a0e <rcl_wait_set_resize+0x33e>
 8016964:	4622      	mov	r2, r4
 8016966:	4631      	mov	r1, r6
 8016968:	4638      	mov	r0, r7
 801696a:	f004 fcff 	bl	801b36c <memset>
 801696e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8016970:	e73f      	b.n	80167f2 <rcl_wait_set_resize+0x122>
 8016972:	6a28      	ldr	r0, [r5, #32]
 8016974:	b120      	cbz	r0, 8016980 <rcl_wait_set_resize+0x2b0>
 8016976:	4639      	mov	r1, r7
 8016978:	47c0      	blx	r8
 801697a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801697c:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801697e:	622b      	str	r3, [r5, #32]
 8016980:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8016982:	2800      	cmp	r0, #0
 8016984:	f43f af60 	beq.w	8016848 <rcl_wait_set_resize+0x178>
 8016988:	4639      	mov	r1, r7
 801698a:	47c0      	blx	r8
 801698c:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801698e:	2300      	movs	r3, #0
 8016990:	e9c4 330a 	strd	r3, r3, [r4, #40]	@ 0x28
 8016994:	e758      	b.n	8016848 <rcl_wait_set_resize+0x178>
 8016996:	009c      	lsls	r4, r3, #2
 8016998:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 801699a:	463a      	mov	r2, r7
 801699c:	4621      	mov	r1, r4
 801699e:	47c8      	blx	r9
 80169a0:	62a8      	str	r0, [r5, #40]	@ 0x28
 80169a2:	2800      	cmp	r0, #0
 80169a4:	d085      	beq.n	80168b2 <rcl_wait_set_resize+0x1e2>
 80169a6:	4622      	mov	r2, r4
 80169a8:	4631      	mov	r1, r6
 80169aa:	f004 fcdf 	bl	801b36c <memset>
 80169ae:	f8d5 a030 	ldr.w	sl, [r5, #48]	@ 0x30
 80169b2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80169b4:	62eb      	str	r3, [r5, #44]	@ 0x2c
 80169b6:	f8da 0038 	ldr.w	r0, [sl, #56]	@ 0x38
 80169ba:	f8ca 6034 	str.w	r6, [sl, #52]	@ 0x34
 80169be:	463a      	mov	r2, r7
 80169c0:	4621      	mov	r1, r4
 80169c2:	47c8      	blx	r9
 80169c4:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80169c6:	f8ca 0038 	str.w	r0, [sl, #56]	@ 0x38
 80169ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80169cc:	b36b      	cbz	r3, 8016a2a <rcl_wait_set_resize+0x35a>
 80169ce:	4622      	mov	r2, r4
 80169d0:	4631      	mov	r1, r6
 80169d2:	4618      	mov	r0, r3
 80169d4:	f004 fcca 	bl	801b36c <memset>
 80169d8:	4630      	mov	r0, r6
 80169da:	b003      	add	sp, #12
 80169dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80169e0:	200b      	movs	r0, #11
 80169e2:	4770      	bx	lr
 80169e4:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80169e8:	e764      	b.n	80168b4 <rcl_wait_set_resize+0x1e4>
 80169ea:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80169ec:	68a8      	ldr	r0, [r5, #8]
 80169ee:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 80169f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80169f2:	4798      	blx	r3
 80169f4:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80169f6:	6928      	ldr	r0, [r5, #16]
 80169f8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80169fa:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 80169fc:	f8c5 900c 	str.w	r9, [r5, #12]
 8016a00:	f8c5 9008 	str.w	r9, [r5, #8]
 8016a04:	4790      	blx	r2
 8016a06:	e9c5 9904 	strd	r9, r9, [r5, #16]
 8016a0a:	200a      	movs	r0, #10
 8016a0c:	e752      	b.n	80168b4 <rcl_wait_set_resize+0x1e4>
 8016a0e:	69a8      	ldr	r0, [r5, #24]
 8016a10:	4649      	mov	r1, r9
 8016a12:	47d0      	blx	sl
 8016a14:	e9c5 7706 	strd	r7, r7, [r5, #24]
 8016a18:	200a      	movs	r0, #10
 8016a1a:	e74b      	b.n	80168b4 <rcl_wait_set_resize+0x1e4>
 8016a1c:	6a28      	ldr	r0, [r5, #32]
 8016a1e:	4639      	mov	r1, r7
 8016a20:	47c0      	blx	r8
 8016a22:	e9c5 4408 	strd	r4, r4, [r5, #32]
 8016a26:	200a      	movs	r0, #10
 8016a28:	e744      	b.n	80168b4 <rcl_wait_set_resize+0x1e4>
 8016a2a:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8016a2c:	9301      	str	r3, [sp, #4]
 8016a2e:	4639      	mov	r1, r7
 8016a30:	47c0      	blx	r8
 8016a32:	9b01      	ldr	r3, [sp, #4]
 8016a34:	200a      	movs	r0, #10
 8016a36:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 8016a3a:	e73b      	b.n	80168b4 <rcl_wait_set_resize+0x1e4>

08016a3c <rcl_wait_set_init>:
 8016a3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016a40:	b084      	sub	sp, #16
 8016a42:	4604      	mov	r4, r0
 8016a44:	a810      	add	r0, sp, #64	@ 0x40
 8016a46:	f8dd a03c 	ldr.w	sl, [sp, #60]	@ 0x3c
 8016a4a:	460f      	mov	r7, r1
 8016a4c:	4690      	mov	r8, r2
 8016a4e:	4699      	mov	r9, r3
 8016a50:	f7f8 ff94 	bl	800f97c <rcutils_allocator_is_valid>
 8016a54:	2800      	cmp	r0, #0
 8016a56:	d06b      	beq.n	8016b30 <rcl_wait_set_init+0xf4>
 8016a58:	2c00      	cmp	r4, #0
 8016a5a:	d069      	beq.n	8016b30 <rcl_wait_set_init+0xf4>
 8016a5c:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8016a5e:	b125      	cbz	r5, 8016a6a <rcl_wait_set_init+0x2e>
 8016a60:	2564      	movs	r5, #100	@ 0x64
 8016a62:	4628      	mov	r0, r5
 8016a64:	b004      	add	sp, #16
 8016a66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016a6a:	f1ba 0f00 	cmp.w	sl, #0
 8016a6e:	d05f      	beq.n	8016b30 <rcl_wait_set_init+0xf4>
 8016a70:	4650      	mov	r0, sl
 8016a72:	f7fe fbad 	bl	80151d0 <rcl_context_is_valid>
 8016a76:	2800      	cmp	r0, #0
 8016a78:	d067      	beq.n	8016b4a <rcl_wait_set_init+0x10e>
 8016a7a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8016a7c:	9914      	ldr	r1, [sp, #80]	@ 0x50
 8016a7e:	205c      	movs	r0, #92	@ 0x5c
 8016a80:	4798      	blx	r3
 8016a82:	6320      	str	r0, [r4, #48]	@ 0x30
 8016a84:	2800      	cmp	r0, #0
 8016a86:	d062      	beq.n	8016b4e <rcl_wait_set_init+0x112>
 8016a88:	4629      	mov	r1, r5
 8016a8a:	225c      	movs	r2, #92	@ 0x5c
 8016a8c:	f004 fc6e 	bl	801b36c <memset>
 8016a90:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	@ 0x34
 8016a94:	eb03 0e02 	add.w	lr, r3, r2
 8016a98:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8016a9a:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 8016a9c:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 8016aa0:	449e      	add	lr, r3
 8016aa2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8016aa6:	e9c6 5501 	strd	r5, r5, [r6, #4]
 8016aaa:	e9c6 5504 	strd	r5, r5, [r6, #16]
 8016aae:	e9c6 5507 	strd	r5, r5, [r6, #28]
 8016ab2:	e9c6 550a 	strd	r5, r5, [r6, #40]	@ 0x28
 8016ab6:	e9c6 550d 	strd	r5, r5, [r6, #52]	@ 0x34
 8016aba:	f106 0548 	add.w	r5, r6, #72	@ 0x48
 8016abe:	f8c6 a044 	str.w	sl, [r6, #68]	@ 0x44
 8016ac2:	f8da a000 	ldr.w	sl, [sl]
 8016ac6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8016ac8:	44c6      	add	lr, r8
 8016aca:	f8dc 3000 	ldr.w	r3, [ip]
 8016ace:	602b      	str	r3, [r5, #0]
 8016ad0:	eb0e 0147 	add.w	r1, lr, r7, lsl #1
 8016ad4:	f10a 0028 	add.w	r0, sl, #40	@ 0x28
 8016ad8:	f002 fa0c 	bl	8018ef4 <rmw_create_wait_set>
 8016adc:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8016ade:	63f0      	str	r0, [r6, #60]	@ 0x3c
 8016ae0:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8016ae2:	b350      	cbz	r0, 8016b3a <rcl_wait_set_init+0xfe>
 8016ae4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016ae6:	9302      	str	r3, [sp, #8]
 8016ae8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8016aea:	9301      	str	r3, [sp, #4]
 8016aec:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8016aee:	9300      	str	r3, [sp, #0]
 8016af0:	4642      	mov	r2, r8
 8016af2:	464b      	mov	r3, r9
 8016af4:	4639      	mov	r1, r7
 8016af6:	4620      	mov	r0, r4
 8016af8:	f7ff fdea 	bl	80166d0 <rcl_wait_set_resize>
 8016afc:	4605      	mov	r5, r0
 8016afe:	2800      	cmp	r0, #0
 8016b00:	d0af      	beq.n	8016a62 <rcl_wait_set_init+0x26>
 8016b02:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8016b04:	bb2b      	cbnz	r3, 8016b52 <rcl_wait_set_init+0x116>
 8016b06:	2600      	movs	r6, #0
 8016b08:	e9cd 6601 	strd	r6, r6, [sp, #4]
 8016b0c:	9600      	str	r6, [sp, #0]
 8016b0e:	4633      	mov	r3, r6
 8016b10:	4632      	mov	r2, r6
 8016b12:	4631      	mov	r1, r6
 8016b14:	4620      	mov	r0, r4
 8016b16:	f7ff fddb 	bl	80166d0 <rcl_wait_set_resize>
 8016b1a:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8016b1c:	2800      	cmp	r0, #0
 8016b1e:	d0a0      	beq.n	8016a62 <rcl_wait_set_init+0x26>
 8016b20:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 8016b22:	6d81      	ldr	r1, [r0, #88]	@ 0x58
 8016b24:	4798      	blx	r3
 8016b26:	4628      	mov	r0, r5
 8016b28:	6326      	str	r6, [r4, #48]	@ 0x30
 8016b2a:	b004      	add	sp, #16
 8016b2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016b30:	250b      	movs	r5, #11
 8016b32:	4628      	mov	r0, r5
 8016b34:	b004      	add	sp, #16
 8016b36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016b3a:	2501      	movs	r5, #1
 8016b3c:	f002 f9e4 	bl	8018f08 <rmw_destroy_wait_set>
 8016b40:	2800      	cmp	r0, #0
 8016b42:	bf18      	it	ne
 8016b44:	f44f 7561 	movne.w	r5, #900	@ 0x384
 8016b48:	e7dd      	b.n	8016b06 <rcl_wait_set_init+0xca>
 8016b4a:	2565      	movs	r5, #101	@ 0x65
 8016b4c:	e789      	b.n	8016a62 <rcl_wait_set_init+0x26>
 8016b4e:	250a      	movs	r5, #10
 8016b50:	e787      	b.n	8016a62 <rcl_wait_set_init+0x26>
 8016b52:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8016b54:	e7f2      	b.n	8016b3c <rcl_wait_set_init+0x100>
 8016b56:	bf00      	nop

08016b58 <rcl_wait_set_add_guard_condition>:
 8016b58:	b318      	cbz	r0, 8016ba2 <rcl_wait_set_add_guard_condition+0x4a>
 8016b5a:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8016b5c:	b570      	push	{r4, r5, r6, lr}
 8016b5e:	4604      	mov	r4, r0
 8016b60:	b30b      	cbz	r3, 8016ba6 <rcl_wait_set_add_guard_condition+0x4e>
 8016b62:	b319      	cbz	r1, 8016bac <rcl_wait_set_add_guard_condition+0x54>
 8016b64:	68dd      	ldr	r5, [r3, #12]
 8016b66:	68c0      	ldr	r0, [r0, #12]
 8016b68:	4285      	cmp	r5, r0
 8016b6a:	d217      	bcs.n	8016b9c <rcl_wait_set_add_guard_condition+0x44>
 8016b6c:	68a0      	ldr	r0, [r4, #8]
 8016b6e:	1c6e      	adds	r6, r5, #1
 8016b70:	60de      	str	r6, [r3, #12]
 8016b72:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8016b76:	b102      	cbz	r2, 8016b7a <rcl_wait_set_add_guard_condition+0x22>
 8016b78:	6015      	str	r5, [r2, #0]
 8016b7a:	4608      	mov	r0, r1
 8016b7c:	f003 fd70 	bl	801a660 <rcl_guard_condition_get_rmw_handle>
 8016b80:	b150      	cbz	r0, 8016b98 <rcl_wait_set_add_guard_condition+0x40>
 8016b82:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8016b84:	6842      	ldr	r2, [r0, #4]
 8016b86:	695b      	ldr	r3, [r3, #20]
 8016b88:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8016b8c:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8016b8e:	6913      	ldr	r3, [r2, #16]
 8016b90:	3301      	adds	r3, #1
 8016b92:	2000      	movs	r0, #0
 8016b94:	6113      	str	r3, [r2, #16]
 8016b96:	bd70      	pop	{r4, r5, r6, pc}
 8016b98:	2001      	movs	r0, #1
 8016b9a:	bd70      	pop	{r4, r5, r6, pc}
 8016b9c:	f240 3086 	movw	r0, #902	@ 0x386
 8016ba0:	bd70      	pop	{r4, r5, r6, pc}
 8016ba2:	200b      	movs	r0, #11
 8016ba4:	4770      	bx	lr
 8016ba6:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8016baa:	bd70      	pop	{r4, r5, r6, pc}
 8016bac:	200b      	movs	r0, #11
 8016bae:	bd70      	pop	{r4, r5, r6, pc}

08016bb0 <rcl_wait_set_add_timer>:
 8016bb0:	b328      	cbz	r0, 8016bfe <rcl_wait_set_add_timer+0x4e>
 8016bb2:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8016bb4:	b570      	push	{r4, r5, r6, lr}
 8016bb6:	4604      	mov	r4, r0
 8016bb8:	b31b      	cbz	r3, 8016c02 <rcl_wait_set_add_timer+0x52>
 8016bba:	b329      	cbz	r1, 8016c08 <rcl_wait_set_add_timer+0x58>
 8016bbc:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8016bbe:	6965      	ldr	r5, [r4, #20]
 8016bc0:	42a8      	cmp	r0, r5
 8016bc2:	d219      	bcs.n	8016bf8 <rcl_wait_set_add_timer+0x48>
 8016bc4:	6925      	ldr	r5, [r4, #16]
 8016bc6:	1c46      	adds	r6, r0, #1
 8016bc8:	641e      	str	r6, [r3, #64]	@ 0x40
 8016bca:	f845 1020 	str.w	r1, [r5, r0, lsl #2]
 8016bce:	b102      	cbz	r2, 8016bd2 <rcl_wait_set_add_timer+0x22>
 8016bd0:	6010      	str	r0, [r2, #0]
 8016bd2:	4608      	mov	r0, r1
 8016bd4:	f7ff fc10 	bl	80163f8 <rcl_timer_get_guard_condition>
 8016bd8:	b168      	cbz	r0, 8016bf6 <rcl_wait_set_add_timer+0x46>
 8016bda:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8016bdc:	68e3      	ldr	r3, [r4, #12]
 8016bde:	6c15      	ldr	r5, [r2, #64]	@ 0x40
 8016be0:	3b01      	subs	r3, #1
 8016be2:	441d      	add	r5, r3
 8016be4:	f003 fd3c 	bl	801a660 <rcl_guard_condition_get_rmw_handle>
 8016be8:	b180      	cbz	r0, 8016c0c <rcl_wait_set_add_timer+0x5c>
 8016bea:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8016bec:	6842      	ldr	r2, [r0, #4]
 8016bee:	695b      	ldr	r3, [r3, #20]
 8016bf0:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8016bf4:	2000      	movs	r0, #0
 8016bf6:	bd70      	pop	{r4, r5, r6, pc}
 8016bf8:	f240 3086 	movw	r0, #902	@ 0x386
 8016bfc:	bd70      	pop	{r4, r5, r6, pc}
 8016bfe:	200b      	movs	r0, #11
 8016c00:	4770      	bx	lr
 8016c02:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8016c06:	bd70      	pop	{r4, r5, r6, pc}
 8016c08:	200b      	movs	r0, #11
 8016c0a:	bd70      	pop	{r4, r5, r6, pc}
 8016c0c:	2001      	movs	r0, #1
 8016c0e:	bd70      	pop	{r4, r5, r6, pc}

08016c10 <rcl_wait_set_add_client>:
 8016c10:	b318      	cbz	r0, 8016c5a <rcl_wait_set_add_client+0x4a>
 8016c12:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8016c14:	b570      	push	{r4, r5, r6, lr}
 8016c16:	4604      	mov	r4, r0
 8016c18:	b30b      	cbz	r3, 8016c5e <rcl_wait_set_add_client+0x4e>
 8016c1a:	b319      	cbz	r1, 8016c64 <rcl_wait_set_add_client+0x54>
 8016c1c:	699d      	ldr	r5, [r3, #24]
 8016c1e:	69c0      	ldr	r0, [r0, #28]
 8016c20:	4285      	cmp	r5, r0
 8016c22:	d217      	bcs.n	8016c54 <rcl_wait_set_add_client+0x44>
 8016c24:	69a0      	ldr	r0, [r4, #24]
 8016c26:	1c6e      	adds	r6, r5, #1
 8016c28:	619e      	str	r6, [r3, #24]
 8016c2a:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8016c2e:	b102      	cbz	r2, 8016c32 <rcl_wait_set_add_client+0x22>
 8016c30:	6015      	str	r5, [r2, #0]
 8016c32:	4608      	mov	r0, r1
 8016c34:	f7fe fa20 	bl	8015078 <rcl_client_get_rmw_handle>
 8016c38:	b150      	cbz	r0, 8016c50 <rcl_wait_set_add_client+0x40>
 8016c3a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8016c3c:	6842      	ldr	r2, [r0, #4]
 8016c3e:	6a1b      	ldr	r3, [r3, #32]
 8016c40:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8016c44:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8016c46:	69d3      	ldr	r3, [r2, #28]
 8016c48:	3301      	adds	r3, #1
 8016c4a:	2000      	movs	r0, #0
 8016c4c:	61d3      	str	r3, [r2, #28]
 8016c4e:	bd70      	pop	{r4, r5, r6, pc}
 8016c50:	2001      	movs	r0, #1
 8016c52:	bd70      	pop	{r4, r5, r6, pc}
 8016c54:	f240 3086 	movw	r0, #902	@ 0x386
 8016c58:	bd70      	pop	{r4, r5, r6, pc}
 8016c5a:	200b      	movs	r0, #11
 8016c5c:	4770      	bx	lr
 8016c5e:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8016c62:	bd70      	pop	{r4, r5, r6, pc}
 8016c64:	200b      	movs	r0, #11
 8016c66:	bd70      	pop	{r4, r5, r6, pc}

08016c68 <rcl_wait_set_add_service>:
 8016c68:	b318      	cbz	r0, 8016cb2 <rcl_wait_set_add_service+0x4a>
 8016c6a:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8016c6c:	b570      	push	{r4, r5, r6, lr}
 8016c6e:	4604      	mov	r4, r0
 8016c70:	b30b      	cbz	r3, 8016cb6 <rcl_wait_set_add_service+0x4e>
 8016c72:	b319      	cbz	r1, 8016cbc <rcl_wait_set_add_service+0x54>
 8016c74:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 8016c76:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8016c78:	4285      	cmp	r5, r0
 8016c7a:	d217      	bcs.n	8016cac <rcl_wait_set_add_service+0x44>
 8016c7c:	6a20      	ldr	r0, [r4, #32]
 8016c7e:	1c6e      	adds	r6, r5, #1
 8016c80:	625e      	str	r6, [r3, #36]	@ 0x24
 8016c82:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8016c86:	b102      	cbz	r2, 8016c8a <rcl_wait_set_add_service+0x22>
 8016c88:	6015      	str	r5, [r2, #0]
 8016c8a:	4608      	mov	r0, r1
 8016c8c:	f7fe fe62 	bl	8015954 <rcl_service_get_rmw_handle>
 8016c90:	b150      	cbz	r0, 8016ca8 <rcl_wait_set_add_service+0x40>
 8016c92:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8016c94:	6842      	ldr	r2, [r0, #4]
 8016c96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016c98:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8016c9c:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8016c9e:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 8016ca0:	3301      	adds	r3, #1
 8016ca2:	2000      	movs	r0, #0
 8016ca4:	6293      	str	r3, [r2, #40]	@ 0x28
 8016ca6:	bd70      	pop	{r4, r5, r6, pc}
 8016ca8:	2001      	movs	r0, #1
 8016caa:	bd70      	pop	{r4, r5, r6, pc}
 8016cac:	f240 3086 	movw	r0, #902	@ 0x386
 8016cb0:	bd70      	pop	{r4, r5, r6, pc}
 8016cb2:	200b      	movs	r0, #11
 8016cb4:	4770      	bx	lr
 8016cb6:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8016cba:	bd70      	pop	{r4, r5, r6, pc}
 8016cbc:	200b      	movs	r0, #11
 8016cbe:	bd70      	pop	{r4, r5, r6, pc}

08016cc0 <rcl_wait>:
 8016cc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016cc4:	ed2d 8b02 	vpush	{d8}
 8016cc8:	b08d      	sub	sp, #52	@ 0x34
 8016cca:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8016cce:	2800      	cmp	r0, #0
 8016cd0:	f000 8143 	beq.w	8016f5a <rcl_wait+0x29a>
 8016cd4:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 8016cd6:	4605      	mov	r5, r0
 8016cd8:	2e00      	cmp	r6, #0
 8016cda:	f000 8112 	beq.w	8016f02 <rcl_wait+0x242>
 8016cde:	6843      	ldr	r3, [r0, #4]
 8016ce0:	b983      	cbnz	r3, 8016d04 <rcl_wait+0x44>
 8016ce2:	68eb      	ldr	r3, [r5, #12]
 8016ce4:	b973      	cbnz	r3, 8016d04 <rcl_wait+0x44>
 8016ce6:	696b      	ldr	r3, [r5, #20]
 8016ce8:	b963      	cbnz	r3, 8016d04 <rcl_wait+0x44>
 8016cea:	69eb      	ldr	r3, [r5, #28]
 8016cec:	b953      	cbnz	r3, 8016d04 <rcl_wait+0x44>
 8016cee:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8016cf0:	b943      	cbnz	r3, 8016d04 <rcl_wait+0x44>
 8016cf2:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8016cf4:	b933      	cbnz	r3, 8016d04 <rcl_wait+0x44>
 8016cf6:	f240 3085 	movw	r0, #901	@ 0x385
 8016cfa:	b00d      	add	sp, #52	@ 0x34
 8016cfc:	ecbd 8b02 	vpop	{d8}
 8016d00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016d04:	9b04      	ldr	r3, [sp, #16]
 8016d06:	6c32      	ldr	r2, [r6, #64]	@ 0x40
 8016d08:	2b01      	cmp	r3, #1
 8016d0a:	9b05      	ldr	r3, [sp, #20]
 8016d0c:	f173 0300 	sbcs.w	r3, r3, #0
 8016d10:	f2c0 80f0 	blt.w	8016ef4 <rcl_wait+0x234>
 8016d14:	e9dd 8704 	ldrd	r8, r7, [sp, #16]
 8016d18:	4643      	mov	r3, r8
 8016d1a:	2a00      	cmp	r2, #0
 8016d1c:	f000 8133 	beq.w	8016f86 <rcl_wait+0x2c6>
 8016d20:	2400      	movs	r4, #0
 8016d22:	4613      	mov	r3, r2
 8016d24:	ed9f 8b9c 	vldr	d8, [pc, #624]	@ 8016f98 <rcl_wait+0x2d8>
 8016d28:	46a2      	mov	sl, r4
 8016d2a:	46a3      	mov	fp, r4
 8016d2c:	f240 3921 	movw	r9, #801	@ 0x321
 8016d30:	4632      	mov	r2, r6
 8016d32:	e014      	b.n	8016d5e <rcl_wait+0x9e>
 8016d34:	2800      	cmp	r0, #0
 8016d36:	d1e0      	bne.n	8016cfa <rcl_wait+0x3a>
 8016d38:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8016d3c:	4542      	cmp	r2, r8
 8016d3e:	eb73 0107 	sbcs.w	r1, r3, r7
 8016d42:	da03      	bge.n	8016d4c <rcl_wait+0x8c>
 8016d44:	4690      	mov	r8, r2
 8016d46:	461f      	mov	r7, r3
 8016d48:	f04f 0b01 	mov.w	fp, #1
 8016d4c:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 8016d4e:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8016d50:	3401      	adds	r4, #1
 8016d52:	f14a 0a00 	adc.w	sl, sl, #0
 8016d56:	429c      	cmp	r4, r3
 8016d58:	f17a 0100 	sbcs.w	r1, sl, #0
 8016d5c:	d228      	bcs.n	8016db0 <rcl_wait+0xf0>
 8016d5e:	6928      	ldr	r0, [r5, #16]
 8016d60:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8016d64:	a908      	add	r1, sp, #32
 8016d66:	00a6      	lsls	r6, r4, #2
 8016d68:	2800      	cmp	r0, #0
 8016d6a:	d0f1      	beq.n	8016d50 <rcl_wait+0x90>
 8016d6c:	68eb      	ldr	r3, [r5, #12]
 8016d6e:	f8d2 c014 	ldr.w	ip, [r2, #20]
 8016d72:	4423      	add	r3, r4
 8016d74:	f85c e023 	ldr.w	lr, [ip, r3, lsl #2]
 8016d78:	f1be 0f00 	cmp.w	lr, #0
 8016d7c:	d006      	beq.n	8016d8c <rcl_wait+0xcc>
 8016d7e:	6913      	ldr	r3, [r2, #16]
 8016d80:	f84c e023 	str.w	lr, [ip, r3, lsl #2]
 8016d84:	3301      	adds	r3, #1
 8016d86:	6113      	str	r3, [r2, #16]
 8016d88:	692b      	ldr	r3, [r5, #16]
 8016d8a:	5998      	ldr	r0, [r3, r6]
 8016d8c:	ed8d 8b08 	vstr	d8, [sp, #32]
 8016d90:	f7ff fb00 	bl	8016394 <rcl_timer_get_time_until_next_call>
 8016d94:	4548      	cmp	r0, r9
 8016d96:	d1cd      	bne.n	8016d34 <rcl_wait+0x74>
 8016d98:	692b      	ldr	r3, [r5, #16]
 8016d9a:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 8016d9c:	2100      	movs	r1, #0
 8016d9e:	5199      	str	r1, [r3, r6]
 8016da0:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8016da2:	3401      	adds	r4, #1
 8016da4:	f14a 0a00 	adc.w	sl, sl, #0
 8016da8:	429c      	cmp	r4, r3
 8016daa:	f17a 0100 	sbcs.w	r1, sl, #0
 8016dae:	d3d6      	bcc.n	8016d5e <rcl_wait+0x9e>
 8016db0:	4616      	mov	r6, r2
 8016db2:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8016db6:	4313      	orrs	r3, r2
 8016db8:	46d9      	mov	r9, fp
 8016dba:	f040 80a9 	bne.w	8016f10 <rcl_wait+0x250>
 8016dbe:	2300      	movs	r3, #0
 8016dc0:	2200      	movs	r2, #0
 8016dc2:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8016dc6:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 8016dca:	ab08      	add	r3, sp, #32
 8016dcc:	9302      	str	r3, [sp, #8]
 8016dce:	6bf2      	ldr	r2, [r6, #60]	@ 0x3c
 8016dd0:	f106 0334 	add.w	r3, r6, #52	@ 0x34
 8016dd4:	e9cd 3200 	strd	r3, r2, [sp]
 8016dd8:	f106 0110 	add.w	r1, r6, #16
 8016ddc:	f106 031c 	add.w	r3, r6, #28
 8016de0:	f106 0228 	add.w	r2, r6, #40	@ 0x28
 8016de4:	1d30      	adds	r0, r6, #4
 8016de6:	f001 ff0d 	bl	8018c04 <rmw_wait>
 8016dea:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8016dec:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8016dee:	4680      	mov	r8, r0
 8016df0:	b1ca      	cbz	r2, 8016e26 <rcl_wait+0x166>
 8016df2:	2400      	movs	r4, #0
 8016df4:	4627      	mov	r7, r4
 8016df6:	692a      	ldr	r2, [r5, #16]
 8016df8:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
 8016dfc:	f10d 011f 	add.w	r1, sp, #31
 8016e00:	00a6      	lsls	r6, r4, #2
 8016e02:	b160      	cbz	r0, 8016e1e <rcl_wait+0x15e>
 8016e04:	f88d 701f 	strb.w	r7, [sp, #31]
 8016e08:	f7ff fa8a 	bl	8016320 <rcl_timer_is_ready>
 8016e0c:	2800      	cmp	r0, #0
 8016e0e:	f47f af74 	bne.w	8016cfa <rcl_wait+0x3a>
 8016e12:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8016e16:	b90b      	cbnz	r3, 8016e1c <rcl_wait+0x15c>
 8016e18:	692a      	ldr	r2, [r5, #16]
 8016e1a:	5193      	str	r3, [r2, r6]
 8016e1c:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8016e1e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8016e20:	3401      	adds	r4, #1
 8016e22:	42a2      	cmp	r2, r4
 8016e24:	d8e7      	bhi.n	8016df6 <rcl_wait+0x136>
 8016e26:	f038 0002 	bics.w	r0, r8, #2
 8016e2a:	f040 8090 	bne.w	8016f4e <rcl_wait+0x28e>
 8016e2e:	686e      	ldr	r6, [r5, #4]
 8016e30:	4602      	mov	r2, r0
 8016e32:	b91e      	cbnz	r6, 8016e3c <rcl_wait+0x17c>
 8016e34:	e00d      	b.n	8016e52 <rcl_wait+0x192>
 8016e36:	3201      	adds	r2, #1
 8016e38:	42b2      	cmp	r2, r6
 8016e3a:	d00a      	beq.n	8016e52 <rcl_wait+0x192>
 8016e3c:	6899      	ldr	r1, [r3, #8]
 8016e3e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8016e42:	2900      	cmp	r1, #0
 8016e44:	d1f7      	bne.n	8016e36 <rcl_wait+0x176>
 8016e46:	682c      	ldr	r4, [r5, #0]
 8016e48:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8016e4c:	3201      	adds	r2, #1
 8016e4e:	42b2      	cmp	r2, r6
 8016e50:	d1f4      	bne.n	8016e3c <rcl_wait+0x17c>
 8016e52:	68ee      	ldr	r6, [r5, #12]
 8016e54:	2200      	movs	r2, #0
 8016e56:	b91e      	cbnz	r6, 8016e60 <rcl_wait+0x1a0>
 8016e58:	e00d      	b.n	8016e76 <rcl_wait+0x1b6>
 8016e5a:	3201      	adds	r2, #1
 8016e5c:	42b2      	cmp	r2, r6
 8016e5e:	d00a      	beq.n	8016e76 <rcl_wait+0x1b6>
 8016e60:	6959      	ldr	r1, [r3, #20]
 8016e62:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8016e66:	2900      	cmp	r1, #0
 8016e68:	d1f7      	bne.n	8016e5a <rcl_wait+0x19a>
 8016e6a:	68ac      	ldr	r4, [r5, #8]
 8016e6c:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8016e70:	3201      	adds	r2, #1
 8016e72:	42b2      	cmp	r2, r6
 8016e74:	d1f4      	bne.n	8016e60 <rcl_wait+0x1a0>
 8016e76:	69ee      	ldr	r6, [r5, #28]
 8016e78:	2200      	movs	r2, #0
 8016e7a:	b91e      	cbnz	r6, 8016e84 <rcl_wait+0x1c4>
 8016e7c:	e00d      	b.n	8016e9a <rcl_wait+0x1da>
 8016e7e:	3201      	adds	r2, #1
 8016e80:	42b2      	cmp	r2, r6
 8016e82:	d00a      	beq.n	8016e9a <rcl_wait+0x1da>
 8016e84:	6a19      	ldr	r1, [r3, #32]
 8016e86:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8016e8a:	2900      	cmp	r1, #0
 8016e8c:	d1f7      	bne.n	8016e7e <rcl_wait+0x1be>
 8016e8e:	69ac      	ldr	r4, [r5, #24]
 8016e90:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8016e94:	3201      	adds	r2, #1
 8016e96:	42b2      	cmp	r2, r6
 8016e98:	d1f4      	bne.n	8016e84 <rcl_wait+0x1c4>
 8016e9a:	6a6e      	ldr	r6, [r5, #36]	@ 0x24
 8016e9c:	2200      	movs	r2, #0
 8016e9e:	b91e      	cbnz	r6, 8016ea8 <rcl_wait+0x1e8>
 8016ea0:	e00d      	b.n	8016ebe <rcl_wait+0x1fe>
 8016ea2:	3201      	adds	r2, #1
 8016ea4:	4296      	cmp	r6, r2
 8016ea6:	d00a      	beq.n	8016ebe <rcl_wait+0x1fe>
 8016ea8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8016eaa:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8016eae:	2900      	cmp	r1, #0
 8016eb0:	d1f7      	bne.n	8016ea2 <rcl_wait+0x1e2>
 8016eb2:	6a2c      	ldr	r4, [r5, #32]
 8016eb4:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8016eb8:	3201      	adds	r2, #1
 8016eba:	4296      	cmp	r6, r2
 8016ebc:	d1f4      	bne.n	8016ea8 <rcl_wait+0x1e8>
 8016ebe:	6aee      	ldr	r6, [r5, #44]	@ 0x2c
 8016ec0:	2200      	movs	r2, #0
 8016ec2:	b91e      	cbnz	r6, 8016ecc <rcl_wait+0x20c>
 8016ec4:	e00d      	b.n	8016ee2 <rcl_wait+0x222>
 8016ec6:	3201      	adds	r2, #1
 8016ec8:	42b2      	cmp	r2, r6
 8016eca:	d00a      	beq.n	8016ee2 <rcl_wait+0x222>
 8016ecc:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8016ece:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8016ed2:	2900      	cmp	r1, #0
 8016ed4:	d1f7      	bne.n	8016ec6 <rcl_wait+0x206>
 8016ed6:	6aac      	ldr	r4, [r5, #40]	@ 0x28
 8016ed8:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8016edc:	3201      	adds	r2, #1
 8016ede:	42b2      	cmp	r2, r6
 8016ee0:	d1f4      	bne.n	8016ecc <rcl_wait+0x20c>
 8016ee2:	f1b8 0f02 	cmp.w	r8, #2
 8016ee6:	f47f af08 	bne.w	8016cfa <rcl_wait+0x3a>
 8016eea:	464b      	mov	r3, r9
 8016eec:	2b00      	cmp	r3, #0
 8016eee:	bf08      	it	eq
 8016ef0:	2002      	moveq	r0, #2
 8016ef2:	e702      	b.n	8016cfa <rcl_wait+0x3a>
 8016ef4:	2a00      	cmp	r2, #0
 8016ef6:	d03a      	beq.n	8016f6e <rcl_wait+0x2ae>
 8016ef8:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8016efc:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 8016f00:	e70e      	b.n	8016d20 <rcl_wait+0x60>
 8016f02:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8016f06:	b00d      	add	sp, #52	@ 0x34
 8016f08:	ecbd 8b02 	vpop	{d8}
 8016f0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016f10:	9b04      	ldr	r3, [sp, #16]
 8016f12:	2b01      	cmp	r3, #1
 8016f14:	9b05      	ldr	r3, [sp, #20]
 8016f16:	f173 0300 	sbcs.w	r3, r3, #0
 8016f1a:	db24      	blt.n	8016f66 <rcl_wait+0x2a6>
 8016f1c:	2f00      	cmp	r7, #0
 8016f1e:	bfbc      	itt	lt
 8016f20:	f04f 0800 	movlt.w	r8, #0
 8016f24:	4647      	movlt	r7, r8
 8016f26:	a31e      	add	r3, pc, #120	@ (adr r3, 8016fa0 <rcl_wait+0x2e0>)
 8016f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016f2c:	4640      	mov	r0, r8
 8016f2e:	4639      	mov	r1, r7
 8016f30:	f7e9 fea4 	bl	8000c7c <__aeabi_ldivmod>
 8016f34:	a31a      	add	r3, pc, #104	@ (adr r3, 8016fa0 <rcl_wait+0x2e0>)
 8016f36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016f3a:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8016f3e:	4640      	mov	r0, r8
 8016f40:	4639      	mov	r1, r7
 8016f42:	f7e9 fe9b 	bl	8000c7c <__aeabi_ldivmod>
 8016f46:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 8016f4a:	ab08      	add	r3, sp, #32
 8016f4c:	e73e      	b.n	8016dcc <rcl_wait+0x10c>
 8016f4e:	2001      	movs	r0, #1
 8016f50:	b00d      	add	sp, #52	@ 0x34
 8016f52:	ecbd 8b02 	vpop	{d8}
 8016f56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016f5a:	200b      	movs	r0, #11
 8016f5c:	b00d      	add	sp, #52	@ 0x34
 8016f5e:	ecbd 8b02 	vpop	{d8}
 8016f62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016f66:	465b      	mov	r3, fp
 8016f68:	2b00      	cmp	r3, #0
 8016f6a:	d1d7      	bne.n	8016f1c <rcl_wait+0x25c>
 8016f6c:	e72e      	b.n	8016dcc <rcl_wait+0x10c>
 8016f6e:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 8016f72:	430b      	orrs	r3, r1
 8016f74:	bf08      	it	eq
 8016f76:	4691      	moveq	r9, r2
 8016f78:	f43f af21 	beq.w	8016dbe <rcl_wait+0xfe>
 8016f7c:	9b04      	ldr	r3, [sp, #16]
 8016f7e:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8016f82:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 8016f86:	2b01      	cmp	r3, #1
 8016f88:	9b05      	ldr	r3, [sp, #20]
 8016f8a:	f173 0300 	sbcs.w	r3, r3, #0
 8016f8e:	f04f 0300 	mov.w	r3, #0
 8016f92:	4699      	mov	r9, r3
 8016f94:	dac2      	bge.n	8016f1c <rcl_wait+0x25c>
 8016f96:	e719      	b.n	8016dcc <rcl_wait+0x10c>
 8016f98:	ffffffff 	.word	0xffffffff
 8016f9c:	7fffffff 	.word	0x7fffffff
 8016fa0:	3b9aca00 	.word	0x3b9aca00
 8016fa4:	00000000 	.word	0x00000000

08016fa8 <rcl_action_take_goal_response>:
 8016fa8:	2800      	cmp	r0, #0
 8016faa:	d039      	beq.n	8017020 <rcl_action_take_goal_response+0x78>
 8016fac:	b570      	push	{r4, r5, r6, lr}
 8016fae:	4604      	mov	r4, r0
 8016fb0:	6800      	ldr	r0, [r0, #0]
 8016fb2:	b380      	cbz	r0, 8017016 <rcl_action_take_goal_response+0x6e>
 8016fb4:	460d      	mov	r5, r1
 8016fb6:	4616      	mov	r6, r2
 8016fb8:	f7fe f8e2 	bl	8015180 <rcl_client_is_valid>
 8016fbc:	b330      	cbz	r0, 801700c <rcl_action_take_goal_response+0x64>
 8016fbe:	6820      	ldr	r0, [r4, #0]
 8016fc0:	3004      	adds	r0, #4
 8016fc2:	f7fe f8dd 	bl	8015180 <rcl_client_is_valid>
 8016fc6:	b308      	cbz	r0, 801700c <rcl_action_take_goal_response+0x64>
 8016fc8:	6820      	ldr	r0, [r4, #0]
 8016fca:	3008      	adds	r0, #8
 8016fcc:	f7fe f8d8 	bl	8015180 <rcl_client_is_valid>
 8016fd0:	b1e0      	cbz	r0, 801700c <rcl_action_take_goal_response+0x64>
 8016fd2:	6820      	ldr	r0, [r4, #0]
 8016fd4:	300c      	adds	r0, #12
 8016fd6:	f7fe fe5f 	bl	8015c98 <rcl_subscription_is_valid>
 8016fda:	b1b8      	cbz	r0, 801700c <rcl_action_take_goal_response+0x64>
 8016fdc:	6820      	ldr	r0, [r4, #0]
 8016fde:	3010      	adds	r0, #16
 8016fe0:	f7fe fe5a 	bl	8015c98 <rcl_subscription_is_valid>
 8016fe4:	b190      	cbz	r0, 801700c <rcl_action_take_goal_response+0x64>
 8016fe6:	b1cd      	cbz	r5, 801701c <rcl_action_take_goal_response+0x74>
 8016fe8:	b1c6      	cbz	r6, 801701c <rcl_action_take_goal_response+0x74>
 8016fea:	6820      	ldr	r0, [r4, #0]
 8016fec:	4632      	mov	r2, r6
 8016fee:	4629      	mov	r1, r5
 8016ff0:	f7fe f87e 	bl	80150f0 <rcl_take_response>
 8016ff4:	b148      	cbz	r0, 801700a <rcl_action_take_goal_response+0x62>
 8016ff6:	280a      	cmp	r0, #10
 8016ff8:	d007      	beq.n	801700a <rcl_action_take_goal_response+0x62>
 8016ffa:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8016ffe:	f640 0337 	movw	r3, #2103	@ 0x837
 8017002:	4290      	cmp	r0, r2
 8017004:	bf0c      	ite	eq
 8017006:	4618      	moveq	r0, r3
 8017008:	2001      	movne	r0, #1
 801700a:	bd70      	pop	{r4, r5, r6, pc}
 801700c:	f7f8 fcdc 	bl	800f9c8 <rcutils_reset_error>
 8017010:	f640 0036 	movw	r0, #2102	@ 0x836
 8017014:	bd70      	pop	{r4, r5, r6, pc}
 8017016:	f640 0036 	movw	r0, #2102	@ 0x836
 801701a:	bd70      	pop	{r4, r5, r6, pc}
 801701c:	200b      	movs	r0, #11
 801701e:	bd70      	pop	{r4, r5, r6, pc}
 8017020:	f640 0036 	movw	r0, #2102	@ 0x836
 8017024:	4770      	bx	lr
 8017026:	bf00      	nop

08017028 <rcl_action_send_result_request>:
 8017028:	b390      	cbz	r0, 8017090 <rcl_action_send_result_request+0x68>
 801702a:	b570      	push	{r4, r5, r6, lr}
 801702c:	4604      	mov	r4, r0
 801702e:	6800      	ldr	r0, [r0, #0]
 8017030:	b348      	cbz	r0, 8017086 <rcl_action_send_result_request+0x5e>
 8017032:	460d      	mov	r5, r1
 8017034:	4616      	mov	r6, r2
 8017036:	f7fe f8a3 	bl	8015180 <rcl_client_is_valid>
 801703a:	b1f8      	cbz	r0, 801707c <rcl_action_send_result_request+0x54>
 801703c:	6820      	ldr	r0, [r4, #0]
 801703e:	3004      	adds	r0, #4
 8017040:	f7fe f89e 	bl	8015180 <rcl_client_is_valid>
 8017044:	b1d0      	cbz	r0, 801707c <rcl_action_send_result_request+0x54>
 8017046:	6820      	ldr	r0, [r4, #0]
 8017048:	3008      	adds	r0, #8
 801704a:	f7fe f899 	bl	8015180 <rcl_client_is_valid>
 801704e:	b1a8      	cbz	r0, 801707c <rcl_action_send_result_request+0x54>
 8017050:	6820      	ldr	r0, [r4, #0]
 8017052:	300c      	adds	r0, #12
 8017054:	f7fe fe20 	bl	8015c98 <rcl_subscription_is_valid>
 8017058:	b180      	cbz	r0, 801707c <rcl_action_send_result_request+0x54>
 801705a:	6820      	ldr	r0, [r4, #0]
 801705c:	3010      	adds	r0, #16
 801705e:	f7fe fe1b 	bl	8015c98 <rcl_subscription_is_valid>
 8017062:	b158      	cbz	r0, 801707c <rcl_action_send_result_request+0x54>
 8017064:	b195      	cbz	r5, 801708c <rcl_action_send_result_request+0x64>
 8017066:	b18e      	cbz	r6, 801708c <rcl_action_send_result_request+0x64>
 8017068:	6820      	ldr	r0, [r4, #0]
 801706a:	4632      	mov	r2, r6
 801706c:	4629      	mov	r1, r5
 801706e:	3008      	adds	r0, #8
 8017070:	f7fe f808 	bl	8015084 <rcl_send_request>
 8017074:	3800      	subs	r0, #0
 8017076:	bf18      	it	ne
 8017078:	2001      	movne	r0, #1
 801707a:	bd70      	pop	{r4, r5, r6, pc}
 801707c:	f7f8 fca4 	bl	800f9c8 <rcutils_reset_error>
 8017080:	f640 0036 	movw	r0, #2102	@ 0x836
 8017084:	bd70      	pop	{r4, r5, r6, pc}
 8017086:	f640 0036 	movw	r0, #2102	@ 0x836
 801708a:	bd70      	pop	{r4, r5, r6, pc}
 801708c:	200b      	movs	r0, #11
 801708e:	bd70      	pop	{r4, r5, r6, pc}
 8017090:	f640 0036 	movw	r0, #2102	@ 0x836
 8017094:	4770      	bx	lr
 8017096:	bf00      	nop

08017098 <rcl_action_take_result_response>:
 8017098:	2800      	cmp	r0, #0
 801709a:	d03a      	beq.n	8017112 <rcl_action_take_result_response+0x7a>
 801709c:	b570      	push	{r4, r5, r6, lr}
 801709e:	4604      	mov	r4, r0
 80170a0:	6800      	ldr	r0, [r0, #0]
 80170a2:	b388      	cbz	r0, 8017108 <rcl_action_take_result_response+0x70>
 80170a4:	460d      	mov	r5, r1
 80170a6:	4616      	mov	r6, r2
 80170a8:	f7fe f86a 	bl	8015180 <rcl_client_is_valid>
 80170ac:	b338      	cbz	r0, 80170fe <rcl_action_take_result_response+0x66>
 80170ae:	6820      	ldr	r0, [r4, #0]
 80170b0:	3004      	adds	r0, #4
 80170b2:	f7fe f865 	bl	8015180 <rcl_client_is_valid>
 80170b6:	b310      	cbz	r0, 80170fe <rcl_action_take_result_response+0x66>
 80170b8:	6820      	ldr	r0, [r4, #0]
 80170ba:	3008      	adds	r0, #8
 80170bc:	f7fe f860 	bl	8015180 <rcl_client_is_valid>
 80170c0:	b1e8      	cbz	r0, 80170fe <rcl_action_take_result_response+0x66>
 80170c2:	6820      	ldr	r0, [r4, #0]
 80170c4:	300c      	adds	r0, #12
 80170c6:	f7fe fde7 	bl	8015c98 <rcl_subscription_is_valid>
 80170ca:	b1c0      	cbz	r0, 80170fe <rcl_action_take_result_response+0x66>
 80170cc:	6820      	ldr	r0, [r4, #0]
 80170ce:	3010      	adds	r0, #16
 80170d0:	f7fe fde2 	bl	8015c98 <rcl_subscription_is_valid>
 80170d4:	b198      	cbz	r0, 80170fe <rcl_action_take_result_response+0x66>
 80170d6:	b1d5      	cbz	r5, 801710e <rcl_action_take_result_response+0x76>
 80170d8:	b1ce      	cbz	r6, 801710e <rcl_action_take_result_response+0x76>
 80170da:	6820      	ldr	r0, [r4, #0]
 80170dc:	4632      	mov	r2, r6
 80170de:	4629      	mov	r1, r5
 80170e0:	3008      	adds	r0, #8
 80170e2:	f7fe f805 	bl	80150f0 <rcl_take_response>
 80170e6:	b148      	cbz	r0, 80170fc <rcl_action_take_result_response+0x64>
 80170e8:	280a      	cmp	r0, #10
 80170ea:	d007      	beq.n	80170fc <rcl_action_take_result_response+0x64>
 80170ec:	f240 12f5 	movw	r2, #501	@ 0x1f5
 80170f0:	f640 0337 	movw	r3, #2103	@ 0x837
 80170f4:	4290      	cmp	r0, r2
 80170f6:	bf0c      	ite	eq
 80170f8:	4618      	moveq	r0, r3
 80170fa:	2001      	movne	r0, #1
 80170fc:	bd70      	pop	{r4, r5, r6, pc}
 80170fe:	f7f8 fc63 	bl	800f9c8 <rcutils_reset_error>
 8017102:	f640 0036 	movw	r0, #2102	@ 0x836
 8017106:	bd70      	pop	{r4, r5, r6, pc}
 8017108:	f640 0036 	movw	r0, #2102	@ 0x836
 801710c:	bd70      	pop	{r4, r5, r6, pc}
 801710e:	200b      	movs	r0, #11
 8017110:	bd70      	pop	{r4, r5, r6, pc}
 8017112:	f640 0036 	movw	r0, #2102	@ 0x836
 8017116:	4770      	bx	lr

08017118 <rcl_action_take_cancel_response>:
 8017118:	2800      	cmp	r0, #0
 801711a:	d03a      	beq.n	8017192 <rcl_action_take_cancel_response+0x7a>
 801711c:	b570      	push	{r4, r5, r6, lr}
 801711e:	4604      	mov	r4, r0
 8017120:	6800      	ldr	r0, [r0, #0]
 8017122:	b388      	cbz	r0, 8017188 <rcl_action_take_cancel_response+0x70>
 8017124:	460d      	mov	r5, r1
 8017126:	4616      	mov	r6, r2
 8017128:	f7fe f82a 	bl	8015180 <rcl_client_is_valid>
 801712c:	b338      	cbz	r0, 801717e <rcl_action_take_cancel_response+0x66>
 801712e:	6820      	ldr	r0, [r4, #0]
 8017130:	3004      	adds	r0, #4
 8017132:	f7fe f825 	bl	8015180 <rcl_client_is_valid>
 8017136:	b310      	cbz	r0, 801717e <rcl_action_take_cancel_response+0x66>
 8017138:	6820      	ldr	r0, [r4, #0]
 801713a:	3008      	adds	r0, #8
 801713c:	f7fe f820 	bl	8015180 <rcl_client_is_valid>
 8017140:	b1e8      	cbz	r0, 801717e <rcl_action_take_cancel_response+0x66>
 8017142:	6820      	ldr	r0, [r4, #0]
 8017144:	300c      	adds	r0, #12
 8017146:	f7fe fda7 	bl	8015c98 <rcl_subscription_is_valid>
 801714a:	b1c0      	cbz	r0, 801717e <rcl_action_take_cancel_response+0x66>
 801714c:	6820      	ldr	r0, [r4, #0]
 801714e:	3010      	adds	r0, #16
 8017150:	f7fe fda2 	bl	8015c98 <rcl_subscription_is_valid>
 8017154:	b198      	cbz	r0, 801717e <rcl_action_take_cancel_response+0x66>
 8017156:	b1d5      	cbz	r5, 801718e <rcl_action_take_cancel_response+0x76>
 8017158:	b1ce      	cbz	r6, 801718e <rcl_action_take_cancel_response+0x76>
 801715a:	6820      	ldr	r0, [r4, #0]
 801715c:	4632      	mov	r2, r6
 801715e:	4629      	mov	r1, r5
 8017160:	3004      	adds	r0, #4
 8017162:	f7fd ffc5 	bl	80150f0 <rcl_take_response>
 8017166:	b148      	cbz	r0, 801717c <rcl_action_take_cancel_response+0x64>
 8017168:	280a      	cmp	r0, #10
 801716a:	d007      	beq.n	801717c <rcl_action_take_cancel_response+0x64>
 801716c:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8017170:	f640 0337 	movw	r3, #2103	@ 0x837
 8017174:	4290      	cmp	r0, r2
 8017176:	bf0c      	ite	eq
 8017178:	4618      	moveq	r0, r3
 801717a:	2001      	movne	r0, #1
 801717c:	bd70      	pop	{r4, r5, r6, pc}
 801717e:	f7f8 fc23 	bl	800f9c8 <rcutils_reset_error>
 8017182:	f640 0036 	movw	r0, #2102	@ 0x836
 8017186:	bd70      	pop	{r4, r5, r6, pc}
 8017188:	f640 0036 	movw	r0, #2102	@ 0x836
 801718c:	bd70      	pop	{r4, r5, r6, pc}
 801718e:	200b      	movs	r0, #11
 8017190:	bd70      	pop	{r4, r5, r6, pc}
 8017192:	f640 0036 	movw	r0, #2102	@ 0x836
 8017196:	4770      	bx	lr

08017198 <rcl_action_take_feedback>:
 8017198:	2800      	cmp	r0, #0
 801719a:	d038      	beq.n	801720e <rcl_action_take_feedback+0x76>
 801719c:	b530      	push	{r4, r5, lr}
 801719e:	4604      	mov	r4, r0
 80171a0:	6800      	ldr	r0, [r0, #0]
 80171a2:	b091      	sub	sp, #68	@ 0x44
 80171a4:	b378      	cbz	r0, 8017206 <rcl_action_take_feedback+0x6e>
 80171a6:	460d      	mov	r5, r1
 80171a8:	f7fd ffea 	bl	8015180 <rcl_client_is_valid>
 80171ac:	b328      	cbz	r0, 80171fa <rcl_action_take_feedback+0x62>
 80171ae:	6820      	ldr	r0, [r4, #0]
 80171b0:	3004      	adds	r0, #4
 80171b2:	f7fd ffe5 	bl	8015180 <rcl_client_is_valid>
 80171b6:	b300      	cbz	r0, 80171fa <rcl_action_take_feedback+0x62>
 80171b8:	6820      	ldr	r0, [r4, #0]
 80171ba:	3008      	adds	r0, #8
 80171bc:	f7fd ffe0 	bl	8015180 <rcl_client_is_valid>
 80171c0:	b1d8      	cbz	r0, 80171fa <rcl_action_take_feedback+0x62>
 80171c2:	6820      	ldr	r0, [r4, #0]
 80171c4:	300c      	adds	r0, #12
 80171c6:	f7fe fd67 	bl	8015c98 <rcl_subscription_is_valid>
 80171ca:	b1b0      	cbz	r0, 80171fa <rcl_action_take_feedback+0x62>
 80171cc:	6820      	ldr	r0, [r4, #0]
 80171ce:	3010      	adds	r0, #16
 80171d0:	f7fe fd62 	bl	8015c98 <rcl_subscription_is_valid>
 80171d4:	b188      	cbz	r0, 80171fa <rcl_action_take_feedback+0x62>
 80171d6:	b1ed      	cbz	r5, 8017214 <rcl_action_take_feedback+0x7c>
 80171d8:	6820      	ldr	r0, [r4, #0]
 80171da:	2300      	movs	r3, #0
 80171dc:	466a      	mov	r2, sp
 80171de:	4629      	mov	r1, r5
 80171e0:	300c      	adds	r0, #12
 80171e2:	f7fe fcfb 	bl	8015bdc <rcl_take>
 80171e6:	b160      	cbz	r0, 8017202 <rcl_action_take_feedback+0x6a>
 80171e8:	f240 1391 	movw	r3, #401	@ 0x191
 80171ec:	4298      	cmp	r0, r3
 80171ee:	d014      	beq.n	801721a <rcl_action_take_feedback+0x82>
 80171f0:	280a      	cmp	r0, #10
 80171f2:	bf18      	it	ne
 80171f4:	2001      	movne	r0, #1
 80171f6:	b011      	add	sp, #68	@ 0x44
 80171f8:	bd30      	pop	{r4, r5, pc}
 80171fa:	f7f8 fbe5 	bl	800f9c8 <rcutils_reset_error>
 80171fe:	f640 0036 	movw	r0, #2102	@ 0x836
 8017202:	b011      	add	sp, #68	@ 0x44
 8017204:	bd30      	pop	{r4, r5, pc}
 8017206:	f640 0036 	movw	r0, #2102	@ 0x836
 801720a:	b011      	add	sp, #68	@ 0x44
 801720c:	bd30      	pop	{r4, r5, pc}
 801720e:	f640 0036 	movw	r0, #2102	@ 0x836
 8017212:	4770      	bx	lr
 8017214:	200b      	movs	r0, #11
 8017216:	b011      	add	sp, #68	@ 0x44
 8017218:	bd30      	pop	{r4, r5, pc}
 801721a:	f640 0037 	movw	r0, #2103	@ 0x837
 801721e:	e7f0      	b.n	8017202 <rcl_action_take_feedback+0x6a>

08017220 <rcl_action_wait_set_add_action_client>:
 8017220:	2800      	cmp	r0, #0
 8017222:	d048      	beq.n	80172b6 <rcl_action_wait_set_add_action_client+0x96>
 8017224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017226:	460c      	mov	r4, r1
 8017228:	2900      	cmp	r1, #0
 801722a:	d03c      	beq.n	80172a6 <rcl_action_wait_set_add_action_client+0x86>
 801722c:	4605      	mov	r5, r0
 801722e:	6808      	ldr	r0, [r1, #0]
 8017230:	2800      	cmp	r0, #0
 8017232:	d038      	beq.n	80172a6 <rcl_action_wait_set_add_action_client+0x86>
 8017234:	4617      	mov	r7, r2
 8017236:	461e      	mov	r6, r3
 8017238:	f7fd ffa2 	bl	8015180 <rcl_client_is_valid>
 801723c:	b3b0      	cbz	r0, 80172ac <rcl_action_wait_set_add_action_client+0x8c>
 801723e:	6820      	ldr	r0, [r4, #0]
 8017240:	3004      	adds	r0, #4
 8017242:	f7fd ff9d 	bl	8015180 <rcl_client_is_valid>
 8017246:	b388      	cbz	r0, 80172ac <rcl_action_wait_set_add_action_client+0x8c>
 8017248:	6820      	ldr	r0, [r4, #0]
 801724a:	3008      	adds	r0, #8
 801724c:	f7fd ff98 	bl	8015180 <rcl_client_is_valid>
 8017250:	b360      	cbz	r0, 80172ac <rcl_action_wait_set_add_action_client+0x8c>
 8017252:	6820      	ldr	r0, [r4, #0]
 8017254:	300c      	adds	r0, #12
 8017256:	f7fe fd1f 	bl	8015c98 <rcl_subscription_is_valid>
 801725a:	b338      	cbz	r0, 80172ac <rcl_action_wait_set_add_action_client+0x8c>
 801725c:	6820      	ldr	r0, [r4, #0]
 801725e:	3010      	adds	r0, #16
 8017260:	f7fe fd1a 	bl	8015c98 <rcl_subscription_is_valid>
 8017264:	b310      	cbz	r0, 80172ac <rcl_action_wait_set_add_action_client+0x8c>
 8017266:	6821      	ldr	r1, [r4, #0]
 8017268:	4628      	mov	r0, r5
 801726a:	f501 72e2 	add.w	r2, r1, #452	@ 0x1c4
 801726e:	f7ff fccf 	bl	8016c10 <rcl_wait_set_add_client>
 8017272:	b9b8      	cbnz	r0, 80172a4 <rcl_action_wait_set_add_action_client+0x84>
 8017274:	6821      	ldr	r1, [r4, #0]
 8017276:	4628      	mov	r0, r5
 8017278:	f501 72e4 	add.w	r2, r1, #456	@ 0x1c8
 801727c:	3104      	adds	r1, #4
 801727e:	f7ff fcc7 	bl	8016c10 <rcl_wait_set_add_client>
 8017282:	b978      	cbnz	r0, 80172a4 <rcl_action_wait_set_add_action_client+0x84>
 8017284:	6821      	ldr	r1, [r4, #0]
 8017286:	4628      	mov	r0, r5
 8017288:	f501 72e6 	add.w	r2, r1, #460	@ 0x1cc
 801728c:	3108      	adds	r1, #8
 801728e:	f7ff fcbf 	bl	8016c10 <rcl_wait_set_add_client>
 8017292:	b938      	cbnz	r0, 80172a4 <rcl_action_wait_set_add_action_client+0x84>
 8017294:	6821      	ldr	r1, [r4, #0]
 8017296:	4628      	mov	r0, r5
 8017298:	f501 72e8 	add.w	r2, r1, #464	@ 0x1d0
 801729c:	310c      	adds	r1, #12
 801729e:	f7ff f96f 	bl	8016580 <rcl_wait_set_add_subscription>
 80172a2:	b158      	cbz	r0, 80172bc <rcl_action_wait_set_add_action_client+0x9c>
 80172a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80172a6:	f640 0036 	movw	r0, #2102	@ 0x836
 80172aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80172ac:	f7f8 fb8c 	bl	800f9c8 <rcutils_reset_error>
 80172b0:	f640 0036 	movw	r0, #2102	@ 0x836
 80172b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80172b6:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80172ba:	4770      	bx	lr
 80172bc:	6821      	ldr	r1, [r4, #0]
 80172be:	4628      	mov	r0, r5
 80172c0:	f501 72ea 	add.w	r2, r1, #468	@ 0x1d4
 80172c4:	3110      	adds	r1, #16
 80172c6:	f7ff f95b 	bl	8016580 <rcl_wait_set_add_subscription>
 80172ca:	2800      	cmp	r0, #0
 80172cc:	d1ea      	bne.n	80172a4 <rcl_action_wait_set_add_action_client+0x84>
 80172ce:	b11f      	cbz	r7, 80172d8 <rcl_action_wait_set_add_action_client+0xb8>
 80172d0:	6823      	ldr	r3, [r4, #0]
 80172d2:	f8d3 31c4 	ldr.w	r3, [r3, #452]	@ 0x1c4
 80172d6:	603b      	str	r3, [r7, #0]
 80172d8:	2e00      	cmp	r6, #0
 80172da:	d0e3      	beq.n	80172a4 <rcl_action_wait_set_add_action_client+0x84>
 80172dc:	6823      	ldr	r3, [r4, #0]
 80172de:	f8d3 31d0 	ldr.w	r3, [r3, #464]	@ 0x1d0
 80172e2:	6033      	str	r3, [r6, #0]
 80172e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80172e6:	bf00      	nop

080172e8 <rcl_action_client_wait_set_get_entities_ready>:
 80172e8:	2800      	cmp	r0, #0
 80172ea:	f000 808d 	beq.w	8017408 <rcl_action_client_wait_set_get_entities_ready+0x120>
 80172ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80172f2:	460c      	mov	r4, r1
 80172f4:	2900      	cmp	r1, #0
 80172f6:	d077      	beq.n	80173e8 <rcl_action_client_wait_set_get_entities_ready+0x100>
 80172f8:	4605      	mov	r5, r0
 80172fa:	6808      	ldr	r0, [r1, #0]
 80172fc:	2800      	cmp	r0, #0
 80172fe:	d073      	beq.n	80173e8 <rcl_action_client_wait_set_get_entities_ready+0x100>
 8017300:	4616      	mov	r6, r2
 8017302:	461f      	mov	r7, r3
 8017304:	f7fd ff3c 	bl	8015180 <rcl_client_is_valid>
 8017308:	2800      	cmp	r0, #0
 801730a:	d071      	beq.n	80173f0 <rcl_action_client_wait_set_get_entities_ready+0x108>
 801730c:	6820      	ldr	r0, [r4, #0]
 801730e:	3004      	adds	r0, #4
 8017310:	f7fd ff36 	bl	8015180 <rcl_client_is_valid>
 8017314:	2800      	cmp	r0, #0
 8017316:	d06b      	beq.n	80173f0 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8017318:	6820      	ldr	r0, [r4, #0]
 801731a:	3008      	adds	r0, #8
 801731c:	f7fd ff30 	bl	8015180 <rcl_client_is_valid>
 8017320:	2800      	cmp	r0, #0
 8017322:	d065      	beq.n	80173f0 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8017324:	6820      	ldr	r0, [r4, #0]
 8017326:	300c      	adds	r0, #12
 8017328:	f7fe fcb6 	bl	8015c98 <rcl_subscription_is_valid>
 801732c:	2800      	cmp	r0, #0
 801732e:	d05f      	beq.n	80173f0 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8017330:	6820      	ldr	r0, [r4, #0]
 8017332:	3010      	adds	r0, #16
 8017334:	f7fe fcb0 	bl	8015c98 <rcl_subscription_is_valid>
 8017338:	2800      	cmp	r0, #0
 801733a:	d059      	beq.n	80173f0 <rcl_action_client_wait_set_get_entities_ready+0x108>
 801733c:	2e00      	cmp	r6, #0
 801733e:	d060      	beq.n	8017402 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8017340:	2f00      	cmp	r7, #0
 8017342:	d05e      	beq.n	8017402 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8017344:	9b06      	ldr	r3, [sp, #24]
 8017346:	2b00      	cmp	r3, #0
 8017348:	d05b      	beq.n	8017402 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 801734a:	9b07      	ldr	r3, [sp, #28]
 801734c:	2b00      	cmp	r3, #0
 801734e:	d058      	beq.n	8017402 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8017350:	9b08      	ldr	r3, [sp, #32]
 8017352:	2b00      	cmp	r3, #0
 8017354:	d055      	beq.n	8017402 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8017356:	6823      	ldr	r3, [r4, #0]
 8017358:	686a      	ldr	r2, [r5, #4]
 801735a:	f8d3 11d0 	ldr.w	r1, [r3, #464]	@ 0x1d0
 801735e:	428a      	cmp	r2, r1
 8017360:	d94c      	bls.n	80173fc <rcl_action_client_wait_set_get_entities_ready+0x114>
 8017362:	f8d3 01d4 	ldr.w	r0, [r3, #468]	@ 0x1d4
 8017366:	4282      	cmp	r2, r0
 8017368:	d948      	bls.n	80173fc <rcl_action_client_wait_set_get_entities_ready+0x114>
 801736a:	f8d3 41c4 	ldr.w	r4, [r3, #452]	@ 0x1c4
 801736e:	69ea      	ldr	r2, [r5, #28]
 8017370:	42a2      	cmp	r2, r4
 8017372:	d943      	bls.n	80173fc <rcl_action_client_wait_set_get_entities_ready+0x114>
 8017374:	f8d3 c1c8 	ldr.w	ip, [r3, #456]	@ 0x1c8
 8017378:	4562      	cmp	r2, ip
 801737a:	d93f      	bls.n	80173fc <rcl_action_client_wait_set_get_entities_ready+0x114>
 801737c:	f8d3 e1cc 	ldr.w	lr, [r3, #460]	@ 0x1cc
 8017380:	4572      	cmp	r2, lr
 8017382:	d93b      	bls.n	80173fc <rcl_action_client_wait_set_get_entities_ready+0x114>
 8017384:	69aa      	ldr	r2, [r5, #24]
 8017386:	682d      	ldr	r5, [r5, #0]
 8017388:	f852 8024 	ldr.w	r8, [r2, r4, lsl #2]
 801738c:	f855 4020 	ldr.w	r4, [r5, r0, lsl #2]
 8017390:	f855 5021 	ldr.w	r5, [r5, r1, lsl #2]
 8017394:	f852 102c 	ldr.w	r1, [r2, ip, lsl #2]
 8017398:	f852 202e 	ldr.w	r2, [r2, lr, lsl #2]
 801739c:	f103 0c0c 	add.w	ip, r3, #12
 80173a0:	eba5 050c 	sub.w	r5, r5, ip
 80173a4:	fab5 f585 	clz	r5, r5
 80173a8:	096d      	lsrs	r5, r5, #5
 80173aa:	7035      	strb	r5, [r6, #0]
 80173ac:	f103 0510 	add.w	r5, r3, #16
 80173b0:	1b64      	subs	r4, r4, r5
 80173b2:	fab4 f484 	clz	r4, r4
 80173b6:	0964      	lsrs	r4, r4, #5
 80173b8:	703c      	strb	r4, [r7, #0]
 80173ba:	eba3 0008 	sub.w	r0, r3, r8
 80173be:	1d1c      	adds	r4, r3, #4
 80173c0:	3308      	adds	r3, #8
 80173c2:	1ad3      	subs	r3, r2, r3
 80173c4:	fab0 f080 	clz	r0, r0
 80173c8:	9a06      	ldr	r2, [sp, #24]
 80173ca:	0940      	lsrs	r0, r0, #5
 80173cc:	1b09      	subs	r1, r1, r4
 80173ce:	7010      	strb	r0, [r2, #0]
 80173d0:	fab1 f181 	clz	r1, r1
 80173d4:	9a07      	ldr	r2, [sp, #28]
 80173d6:	0949      	lsrs	r1, r1, #5
 80173d8:	7011      	strb	r1, [r2, #0]
 80173da:	fab3 f383 	clz	r3, r3
 80173de:	9a08      	ldr	r2, [sp, #32]
 80173e0:	095b      	lsrs	r3, r3, #5
 80173e2:	2000      	movs	r0, #0
 80173e4:	7013      	strb	r3, [r2, #0]
 80173e6:	e001      	b.n	80173ec <rcl_action_client_wait_set_get_entities_ready+0x104>
 80173e8:	f640 0036 	movw	r0, #2102	@ 0x836
 80173ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80173f0:	f7f8 faea 	bl	800f9c8 <rcutils_reset_error>
 80173f4:	f640 0036 	movw	r0, #2102	@ 0x836
 80173f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80173fc:	2001      	movs	r0, #1
 80173fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017402:	200b      	movs	r0, #11
 8017404:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017408:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801740c:	4770      	bx	lr
 801740e:	bf00      	nop

08017410 <rcl_action_take_goal_request>:
 8017410:	2800      	cmp	r0, #0
 8017412:	d039      	beq.n	8017488 <rcl_action_take_goal_request+0x78>
 8017414:	b570      	push	{r4, r5, r6, lr}
 8017416:	4604      	mov	r4, r0
 8017418:	6800      	ldr	r0, [r0, #0]
 801741a:	b380      	cbz	r0, 801747e <rcl_action_take_goal_request+0x6e>
 801741c:	460d      	mov	r5, r1
 801741e:	4616      	mov	r6, r2
 8017420:	f7fe faf6 	bl	8015a10 <rcl_service_is_valid>
 8017424:	b330      	cbz	r0, 8017474 <rcl_action_take_goal_request+0x64>
 8017426:	6820      	ldr	r0, [r4, #0]
 8017428:	3004      	adds	r0, #4
 801742a:	f7fe faf1 	bl	8015a10 <rcl_service_is_valid>
 801742e:	b308      	cbz	r0, 8017474 <rcl_action_take_goal_request+0x64>
 8017430:	6820      	ldr	r0, [r4, #0]
 8017432:	3008      	adds	r0, #8
 8017434:	f7fe faec 	bl	8015a10 <rcl_service_is_valid>
 8017438:	b1e0      	cbz	r0, 8017474 <rcl_action_take_goal_request+0x64>
 801743a:	6820      	ldr	r0, [r4, #0]
 801743c:	300c      	adds	r0, #12
 801743e:	f7f7 fae3 	bl	800ea08 <rcl_publisher_is_valid>
 8017442:	b1b8      	cbz	r0, 8017474 <rcl_action_take_goal_request+0x64>
 8017444:	6820      	ldr	r0, [r4, #0]
 8017446:	3010      	adds	r0, #16
 8017448:	f7f7 fade 	bl	800ea08 <rcl_publisher_is_valid>
 801744c:	b190      	cbz	r0, 8017474 <rcl_action_take_goal_request+0x64>
 801744e:	b1cd      	cbz	r5, 8017484 <rcl_action_take_goal_request+0x74>
 8017450:	b1c6      	cbz	r6, 8017484 <rcl_action_take_goal_request+0x74>
 8017452:	6820      	ldr	r0, [r4, #0]
 8017454:	4632      	mov	r2, r6
 8017456:	4629      	mov	r1, r5
 8017458:	f7fe fa82 	bl	8015960 <rcl_take_request>
 801745c:	b148      	cbz	r0, 8017472 <rcl_action_take_goal_request+0x62>
 801745e:	280a      	cmp	r0, #10
 8017460:	d007      	beq.n	8017472 <rcl_action_take_goal_request+0x62>
 8017462:	f240 2259 	movw	r2, #601	@ 0x259
 8017466:	f640 0399 	movw	r3, #2201	@ 0x899
 801746a:	4290      	cmp	r0, r2
 801746c:	bf0c      	ite	eq
 801746e:	4618      	moveq	r0, r3
 8017470:	2001      	movne	r0, #1
 8017472:	bd70      	pop	{r4, r5, r6, pc}
 8017474:	f7f8 faa8 	bl	800f9c8 <rcutils_reset_error>
 8017478:	f640 0098 	movw	r0, #2200	@ 0x898
 801747c:	bd70      	pop	{r4, r5, r6, pc}
 801747e:	f640 0098 	movw	r0, #2200	@ 0x898
 8017482:	bd70      	pop	{r4, r5, r6, pc}
 8017484:	200b      	movs	r0, #11
 8017486:	bd70      	pop	{r4, r5, r6, pc}
 8017488:	f640 0098 	movw	r0, #2200	@ 0x898
 801748c:	4770      	bx	lr
 801748e:	bf00      	nop

08017490 <rcl_action_send_goal_response>:
 8017490:	b390      	cbz	r0, 80174f8 <rcl_action_send_goal_response+0x68>
 8017492:	b570      	push	{r4, r5, r6, lr}
 8017494:	4604      	mov	r4, r0
 8017496:	6800      	ldr	r0, [r0, #0]
 8017498:	b348      	cbz	r0, 80174ee <rcl_action_send_goal_response+0x5e>
 801749a:	460d      	mov	r5, r1
 801749c:	4616      	mov	r6, r2
 801749e:	f7fe fab7 	bl	8015a10 <rcl_service_is_valid>
 80174a2:	b1f8      	cbz	r0, 80174e4 <rcl_action_send_goal_response+0x54>
 80174a4:	6820      	ldr	r0, [r4, #0]
 80174a6:	3004      	adds	r0, #4
 80174a8:	f7fe fab2 	bl	8015a10 <rcl_service_is_valid>
 80174ac:	b1d0      	cbz	r0, 80174e4 <rcl_action_send_goal_response+0x54>
 80174ae:	6820      	ldr	r0, [r4, #0]
 80174b0:	3008      	adds	r0, #8
 80174b2:	f7fe faad 	bl	8015a10 <rcl_service_is_valid>
 80174b6:	b1a8      	cbz	r0, 80174e4 <rcl_action_send_goal_response+0x54>
 80174b8:	6820      	ldr	r0, [r4, #0]
 80174ba:	300c      	adds	r0, #12
 80174bc:	f7f7 faa4 	bl	800ea08 <rcl_publisher_is_valid>
 80174c0:	b180      	cbz	r0, 80174e4 <rcl_action_send_goal_response+0x54>
 80174c2:	6820      	ldr	r0, [r4, #0]
 80174c4:	3010      	adds	r0, #16
 80174c6:	f7f7 fa9f 	bl	800ea08 <rcl_publisher_is_valid>
 80174ca:	b158      	cbz	r0, 80174e4 <rcl_action_send_goal_response+0x54>
 80174cc:	b195      	cbz	r5, 80174f4 <rcl_action_send_goal_response+0x64>
 80174ce:	b18e      	cbz	r6, 80174f4 <rcl_action_send_goal_response+0x64>
 80174d0:	6820      	ldr	r0, [r4, #0]
 80174d2:	4632      	mov	r2, r6
 80174d4:	4629      	mov	r1, r5
 80174d6:	f7fe fa83 	bl	80159e0 <rcl_send_response>
 80174da:	b110      	cbz	r0, 80174e2 <rcl_action_send_goal_response+0x52>
 80174dc:	2802      	cmp	r0, #2
 80174de:	bf18      	it	ne
 80174e0:	2001      	movne	r0, #1
 80174e2:	bd70      	pop	{r4, r5, r6, pc}
 80174e4:	f7f8 fa70 	bl	800f9c8 <rcutils_reset_error>
 80174e8:	f640 0098 	movw	r0, #2200	@ 0x898
 80174ec:	bd70      	pop	{r4, r5, r6, pc}
 80174ee:	f640 0098 	movw	r0, #2200	@ 0x898
 80174f2:	bd70      	pop	{r4, r5, r6, pc}
 80174f4:	200b      	movs	r0, #11
 80174f6:	bd70      	pop	{r4, r5, r6, pc}
 80174f8:	f640 0098 	movw	r0, #2200	@ 0x898
 80174fc:	4770      	bx	lr
 80174fe:	bf00      	nop

08017500 <rcl_action_take_result_request>:
 8017500:	2800      	cmp	r0, #0
 8017502:	d03a      	beq.n	801757a <rcl_action_take_result_request+0x7a>
 8017504:	b570      	push	{r4, r5, r6, lr}
 8017506:	4604      	mov	r4, r0
 8017508:	6800      	ldr	r0, [r0, #0]
 801750a:	b388      	cbz	r0, 8017570 <rcl_action_take_result_request+0x70>
 801750c:	460d      	mov	r5, r1
 801750e:	4616      	mov	r6, r2
 8017510:	f7fe fa7e 	bl	8015a10 <rcl_service_is_valid>
 8017514:	b338      	cbz	r0, 8017566 <rcl_action_take_result_request+0x66>
 8017516:	6820      	ldr	r0, [r4, #0]
 8017518:	3004      	adds	r0, #4
 801751a:	f7fe fa79 	bl	8015a10 <rcl_service_is_valid>
 801751e:	b310      	cbz	r0, 8017566 <rcl_action_take_result_request+0x66>
 8017520:	6820      	ldr	r0, [r4, #0]
 8017522:	3008      	adds	r0, #8
 8017524:	f7fe fa74 	bl	8015a10 <rcl_service_is_valid>
 8017528:	b1e8      	cbz	r0, 8017566 <rcl_action_take_result_request+0x66>
 801752a:	6820      	ldr	r0, [r4, #0]
 801752c:	300c      	adds	r0, #12
 801752e:	f7f7 fa6b 	bl	800ea08 <rcl_publisher_is_valid>
 8017532:	b1c0      	cbz	r0, 8017566 <rcl_action_take_result_request+0x66>
 8017534:	6820      	ldr	r0, [r4, #0]
 8017536:	3010      	adds	r0, #16
 8017538:	f7f7 fa66 	bl	800ea08 <rcl_publisher_is_valid>
 801753c:	b198      	cbz	r0, 8017566 <rcl_action_take_result_request+0x66>
 801753e:	b1d5      	cbz	r5, 8017576 <rcl_action_take_result_request+0x76>
 8017540:	b1ce      	cbz	r6, 8017576 <rcl_action_take_result_request+0x76>
 8017542:	6820      	ldr	r0, [r4, #0]
 8017544:	4632      	mov	r2, r6
 8017546:	4629      	mov	r1, r5
 8017548:	3008      	adds	r0, #8
 801754a:	f7fe fa09 	bl	8015960 <rcl_take_request>
 801754e:	b148      	cbz	r0, 8017564 <rcl_action_take_result_request+0x64>
 8017550:	280a      	cmp	r0, #10
 8017552:	d007      	beq.n	8017564 <rcl_action_take_result_request+0x64>
 8017554:	f240 2259 	movw	r2, #601	@ 0x259
 8017558:	f640 0399 	movw	r3, #2201	@ 0x899
 801755c:	4290      	cmp	r0, r2
 801755e:	bf0c      	ite	eq
 8017560:	4618      	moveq	r0, r3
 8017562:	2001      	movne	r0, #1
 8017564:	bd70      	pop	{r4, r5, r6, pc}
 8017566:	f7f8 fa2f 	bl	800f9c8 <rcutils_reset_error>
 801756a:	f640 0098 	movw	r0, #2200	@ 0x898
 801756e:	bd70      	pop	{r4, r5, r6, pc}
 8017570:	f640 0098 	movw	r0, #2200	@ 0x898
 8017574:	bd70      	pop	{r4, r5, r6, pc}
 8017576:	200b      	movs	r0, #11
 8017578:	bd70      	pop	{r4, r5, r6, pc}
 801757a:	f640 0098 	movw	r0, #2200	@ 0x898
 801757e:	4770      	bx	lr

08017580 <rcl_action_take_cancel_request>:
 8017580:	2800      	cmp	r0, #0
 8017582:	d03a      	beq.n	80175fa <rcl_action_take_cancel_request+0x7a>
 8017584:	b570      	push	{r4, r5, r6, lr}
 8017586:	4604      	mov	r4, r0
 8017588:	6800      	ldr	r0, [r0, #0]
 801758a:	b388      	cbz	r0, 80175f0 <rcl_action_take_cancel_request+0x70>
 801758c:	460d      	mov	r5, r1
 801758e:	4616      	mov	r6, r2
 8017590:	f7fe fa3e 	bl	8015a10 <rcl_service_is_valid>
 8017594:	b338      	cbz	r0, 80175e6 <rcl_action_take_cancel_request+0x66>
 8017596:	6820      	ldr	r0, [r4, #0]
 8017598:	3004      	adds	r0, #4
 801759a:	f7fe fa39 	bl	8015a10 <rcl_service_is_valid>
 801759e:	b310      	cbz	r0, 80175e6 <rcl_action_take_cancel_request+0x66>
 80175a0:	6820      	ldr	r0, [r4, #0]
 80175a2:	3008      	adds	r0, #8
 80175a4:	f7fe fa34 	bl	8015a10 <rcl_service_is_valid>
 80175a8:	b1e8      	cbz	r0, 80175e6 <rcl_action_take_cancel_request+0x66>
 80175aa:	6820      	ldr	r0, [r4, #0]
 80175ac:	300c      	adds	r0, #12
 80175ae:	f7f7 fa2b 	bl	800ea08 <rcl_publisher_is_valid>
 80175b2:	b1c0      	cbz	r0, 80175e6 <rcl_action_take_cancel_request+0x66>
 80175b4:	6820      	ldr	r0, [r4, #0]
 80175b6:	3010      	adds	r0, #16
 80175b8:	f7f7 fa26 	bl	800ea08 <rcl_publisher_is_valid>
 80175bc:	b198      	cbz	r0, 80175e6 <rcl_action_take_cancel_request+0x66>
 80175be:	b1d5      	cbz	r5, 80175f6 <rcl_action_take_cancel_request+0x76>
 80175c0:	b1ce      	cbz	r6, 80175f6 <rcl_action_take_cancel_request+0x76>
 80175c2:	6820      	ldr	r0, [r4, #0]
 80175c4:	4632      	mov	r2, r6
 80175c6:	4629      	mov	r1, r5
 80175c8:	3004      	adds	r0, #4
 80175ca:	f7fe f9c9 	bl	8015960 <rcl_take_request>
 80175ce:	b148      	cbz	r0, 80175e4 <rcl_action_take_cancel_request+0x64>
 80175d0:	280a      	cmp	r0, #10
 80175d2:	d007      	beq.n	80175e4 <rcl_action_take_cancel_request+0x64>
 80175d4:	f240 2259 	movw	r2, #601	@ 0x259
 80175d8:	f640 0399 	movw	r3, #2201	@ 0x899
 80175dc:	4290      	cmp	r0, r2
 80175de:	bf0c      	ite	eq
 80175e0:	4618      	moveq	r0, r3
 80175e2:	2001      	movne	r0, #1
 80175e4:	bd70      	pop	{r4, r5, r6, pc}
 80175e6:	f7f8 f9ef 	bl	800f9c8 <rcutils_reset_error>
 80175ea:	f640 0098 	movw	r0, #2200	@ 0x898
 80175ee:	bd70      	pop	{r4, r5, r6, pc}
 80175f0:	f640 0098 	movw	r0, #2200	@ 0x898
 80175f4:	bd70      	pop	{r4, r5, r6, pc}
 80175f6:	200b      	movs	r0, #11
 80175f8:	bd70      	pop	{r4, r5, r6, pc}
 80175fa:	f640 0098 	movw	r0, #2200	@ 0x898
 80175fe:	4770      	bx	lr

08017600 <rcl_action_send_cancel_response>:
 8017600:	b398      	cbz	r0, 801766a <rcl_action_send_cancel_response+0x6a>
 8017602:	b570      	push	{r4, r5, r6, lr}
 8017604:	4604      	mov	r4, r0
 8017606:	6800      	ldr	r0, [r0, #0]
 8017608:	b350      	cbz	r0, 8017660 <rcl_action_send_cancel_response+0x60>
 801760a:	460d      	mov	r5, r1
 801760c:	4616      	mov	r6, r2
 801760e:	f7fe f9ff 	bl	8015a10 <rcl_service_is_valid>
 8017612:	b300      	cbz	r0, 8017656 <rcl_action_send_cancel_response+0x56>
 8017614:	6820      	ldr	r0, [r4, #0]
 8017616:	3004      	adds	r0, #4
 8017618:	f7fe f9fa 	bl	8015a10 <rcl_service_is_valid>
 801761c:	b1d8      	cbz	r0, 8017656 <rcl_action_send_cancel_response+0x56>
 801761e:	6820      	ldr	r0, [r4, #0]
 8017620:	3008      	adds	r0, #8
 8017622:	f7fe f9f5 	bl	8015a10 <rcl_service_is_valid>
 8017626:	b1b0      	cbz	r0, 8017656 <rcl_action_send_cancel_response+0x56>
 8017628:	6820      	ldr	r0, [r4, #0]
 801762a:	300c      	adds	r0, #12
 801762c:	f7f7 f9ec 	bl	800ea08 <rcl_publisher_is_valid>
 8017630:	b188      	cbz	r0, 8017656 <rcl_action_send_cancel_response+0x56>
 8017632:	6820      	ldr	r0, [r4, #0]
 8017634:	3010      	adds	r0, #16
 8017636:	f7f7 f9e7 	bl	800ea08 <rcl_publisher_is_valid>
 801763a:	b160      	cbz	r0, 8017656 <rcl_action_send_cancel_response+0x56>
 801763c:	b19d      	cbz	r5, 8017666 <rcl_action_send_cancel_response+0x66>
 801763e:	b196      	cbz	r6, 8017666 <rcl_action_send_cancel_response+0x66>
 8017640:	6820      	ldr	r0, [r4, #0]
 8017642:	4632      	mov	r2, r6
 8017644:	4629      	mov	r1, r5
 8017646:	3004      	adds	r0, #4
 8017648:	f7fe f9ca 	bl	80159e0 <rcl_send_response>
 801764c:	b110      	cbz	r0, 8017654 <rcl_action_send_cancel_response+0x54>
 801764e:	2802      	cmp	r0, #2
 8017650:	bf18      	it	ne
 8017652:	2001      	movne	r0, #1
 8017654:	bd70      	pop	{r4, r5, r6, pc}
 8017656:	f7f8 f9b7 	bl	800f9c8 <rcutils_reset_error>
 801765a:	f640 0098 	movw	r0, #2200	@ 0x898
 801765e:	bd70      	pop	{r4, r5, r6, pc}
 8017660:	f640 0098 	movw	r0, #2200	@ 0x898
 8017664:	bd70      	pop	{r4, r5, r6, pc}
 8017666:	200b      	movs	r0, #11
 8017668:	bd70      	pop	{r4, r5, r6, pc}
 801766a:	f640 0098 	movw	r0, #2200	@ 0x898
 801766e:	4770      	bx	lr

08017670 <rcl_action_wait_set_add_action_server>:
 8017670:	2800      	cmp	r0, #0
 8017672:	d04d      	beq.n	8017710 <rcl_action_wait_set_add_action_server+0xa0>
 8017674:	b570      	push	{r4, r5, r6, lr}
 8017676:	460c      	mov	r4, r1
 8017678:	b159      	cbz	r1, 8017692 <rcl_action_wait_set_add_action_server+0x22>
 801767a:	4605      	mov	r5, r0
 801767c:	6808      	ldr	r0, [r1, #0]
 801767e:	b140      	cbz	r0, 8017692 <rcl_action_wait_set_add_action_server+0x22>
 8017680:	4616      	mov	r6, r2
 8017682:	f7fe f9c5 	bl	8015a10 <rcl_service_is_valid>
 8017686:	b120      	cbz	r0, 8017692 <rcl_action_wait_set_add_action_server+0x22>
 8017688:	6820      	ldr	r0, [r4, #0]
 801768a:	3004      	adds	r0, #4
 801768c:	f7fe f9c0 	bl	8015a10 <rcl_service_is_valid>
 8017690:	b910      	cbnz	r0, 8017698 <rcl_action_wait_set_add_action_server+0x28>
 8017692:	f640 0098 	movw	r0, #2200	@ 0x898
 8017696:	bd70      	pop	{r4, r5, r6, pc}
 8017698:	6820      	ldr	r0, [r4, #0]
 801769a:	3008      	adds	r0, #8
 801769c:	f7fe f9b8 	bl	8015a10 <rcl_service_is_valid>
 80176a0:	2800      	cmp	r0, #0
 80176a2:	d0f6      	beq.n	8017692 <rcl_action_wait_set_add_action_server+0x22>
 80176a4:	6820      	ldr	r0, [r4, #0]
 80176a6:	300c      	adds	r0, #12
 80176a8:	f7f7 f9c6 	bl	800ea38 <rcl_publisher_is_valid_except_context>
 80176ac:	2800      	cmp	r0, #0
 80176ae:	d0f0      	beq.n	8017692 <rcl_action_wait_set_add_action_server+0x22>
 80176b0:	6820      	ldr	r0, [r4, #0]
 80176b2:	3010      	adds	r0, #16
 80176b4:	f7f7 f9c0 	bl	800ea38 <rcl_publisher_is_valid_except_context>
 80176b8:	2800      	cmp	r0, #0
 80176ba:	d0ea      	beq.n	8017692 <rcl_action_wait_set_add_action_server+0x22>
 80176bc:	6821      	ldr	r1, [r4, #0]
 80176be:	4628      	mov	r0, r5
 80176c0:	f501 72ee 	add.w	r2, r1, #476	@ 0x1dc
 80176c4:	f7ff fad0 	bl	8016c68 <rcl_wait_set_add_service>
 80176c8:	2800      	cmp	r0, #0
 80176ca:	d1e4      	bne.n	8017696 <rcl_action_wait_set_add_action_server+0x26>
 80176cc:	6821      	ldr	r1, [r4, #0]
 80176ce:	4628      	mov	r0, r5
 80176d0:	f501 72f0 	add.w	r2, r1, #480	@ 0x1e0
 80176d4:	3104      	adds	r1, #4
 80176d6:	f7ff fac7 	bl	8016c68 <rcl_wait_set_add_service>
 80176da:	2800      	cmp	r0, #0
 80176dc:	d1db      	bne.n	8017696 <rcl_action_wait_set_add_action_server+0x26>
 80176de:	6821      	ldr	r1, [r4, #0]
 80176e0:	4628      	mov	r0, r5
 80176e2:	f501 72f2 	add.w	r2, r1, #484	@ 0x1e4
 80176e6:	3108      	adds	r1, #8
 80176e8:	f7ff fabe 	bl	8016c68 <rcl_wait_set_add_service>
 80176ec:	2800      	cmp	r0, #0
 80176ee:	d1d2      	bne.n	8017696 <rcl_action_wait_set_add_action_server+0x26>
 80176f0:	6821      	ldr	r1, [r4, #0]
 80176f2:	4628      	mov	r0, r5
 80176f4:	f501 72f4 	add.w	r2, r1, #488	@ 0x1e8
 80176f8:	3114      	adds	r1, #20
 80176fa:	f7ff fa59 	bl	8016bb0 <rcl_wait_set_add_timer>
 80176fe:	2800      	cmp	r0, #0
 8017700:	d1c9      	bne.n	8017696 <rcl_action_wait_set_add_action_server+0x26>
 8017702:	2e00      	cmp	r6, #0
 8017704:	d0c7      	beq.n	8017696 <rcl_action_wait_set_add_action_server+0x26>
 8017706:	6823      	ldr	r3, [r4, #0]
 8017708:	f8d3 31dc 	ldr.w	r3, [r3, #476]	@ 0x1dc
 801770c:	6033      	str	r3, [r6, #0]
 801770e:	bd70      	pop	{r4, r5, r6, pc}
 8017710:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8017714:	4770      	bx	lr
 8017716:	bf00      	nop

08017718 <rcl_action_server_wait_set_get_entities_ready>:
 8017718:	2800      	cmp	r0, #0
 801771a:	d05a      	beq.n	80177d2 <rcl_action_server_wait_set_get_entities_ready+0xba>
 801771c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801771e:	460c      	mov	r4, r1
 8017720:	b161      	cbz	r1, 801773c <rcl_action_server_wait_set_get_entities_ready+0x24>
 8017722:	4605      	mov	r5, r0
 8017724:	6808      	ldr	r0, [r1, #0]
 8017726:	b148      	cbz	r0, 801773c <rcl_action_server_wait_set_get_entities_ready+0x24>
 8017728:	4616      	mov	r6, r2
 801772a:	461f      	mov	r7, r3
 801772c:	f7fe f970 	bl	8015a10 <rcl_service_is_valid>
 8017730:	b120      	cbz	r0, 801773c <rcl_action_server_wait_set_get_entities_ready+0x24>
 8017732:	6820      	ldr	r0, [r4, #0]
 8017734:	3004      	adds	r0, #4
 8017736:	f7fe f96b 	bl	8015a10 <rcl_service_is_valid>
 801773a:	b910      	cbnz	r0, 8017742 <rcl_action_server_wait_set_get_entities_ready+0x2a>
 801773c:	f640 0098 	movw	r0, #2200	@ 0x898
 8017740:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017742:	6820      	ldr	r0, [r4, #0]
 8017744:	3008      	adds	r0, #8
 8017746:	f7fe f963 	bl	8015a10 <rcl_service_is_valid>
 801774a:	2800      	cmp	r0, #0
 801774c:	d0f6      	beq.n	801773c <rcl_action_server_wait_set_get_entities_ready+0x24>
 801774e:	6820      	ldr	r0, [r4, #0]
 8017750:	300c      	adds	r0, #12
 8017752:	f7f7 f971 	bl	800ea38 <rcl_publisher_is_valid_except_context>
 8017756:	2800      	cmp	r0, #0
 8017758:	d0f0      	beq.n	801773c <rcl_action_server_wait_set_get_entities_ready+0x24>
 801775a:	6820      	ldr	r0, [r4, #0]
 801775c:	3010      	adds	r0, #16
 801775e:	f7f7 f96b 	bl	800ea38 <rcl_publisher_is_valid_except_context>
 8017762:	2800      	cmp	r0, #0
 8017764:	d0ea      	beq.n	801773c <rcl_action_server_wait_set_get_entities_ready+0x24>
 8017766:	b3be      	cbz	r6, 80177d8 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8017768:	b3b7      	cbz	r7, 80177d8 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 801776a:	9b06      	ldr	r3, [sp, #24]
 801776c:	b3a3      	cbz	r3, 80177d8 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 801776e:	9b07      	ldr	r3, [sp, #28]
 8017770:	b393      	cbz	r3, 80177d8 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8017772:	6821      	ldr	r1, [r4, #0]
 8017774:	692a      	ldr	r2, [r5, #16]
 8017776:	6a2c      	ldr	r4, [r5, #32]
 8017778:	f8d1 51e8 	ldr.w	r5, [r1, #488]	@ 0x1e8
 801777c:	f8d1 31e0 	ldr.w	r3, [r1, #480]	@ 0x1e0
 8017780:	f852 2025 	ldr.w	r2, [r2, r5, lsl #2]
 8017784:	f8d1 01e4 	ldr.w	r0, [r1, #484]	@ 0x1e4
 8017788:	f8d1 51dc 	ldr.w	r5, [r1, #476]	@ 0x1dc
 801778c:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 8017790:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8017794:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
 8017798:	1a64      	subs	r4, r4, r1
 801779a:	fab4 f484 	clz	r4, r4
 801779e:	0964      	lsrs	r4, r4, #5
 80177a0:	7034      	strb	r4, [r6, #0]
 80177a2:	1d0c      	adds	r4, r1, #4
 80177a4:	1b1b      	subs	r3, r3, r4
 80177a6:	fab3 f383 	clz	r3, r3
 80177aa:	095b      	lsrs	r3, r3, #5
 80177ac:	f101 0408 	add.w	r4, r1, #8
 80177b0:	703b      	strb	r3, [r7, #0]
 80177b2:	f101 0314 	add.w	r3, r1, #20
 80177b6:	1b01      	subs	r1, r0, r4
 80177b8:	1ad3      	subs	r3, r2, r3
 80177ba:	fab1 f181 	clz	r1, r1
 80177be:	9a06      	ldr	r2, [sp, #24]
 80177c0:	0949      	lsrs	r1, r1, #5
 80177c2:	7011      	strb	r1, [r2, #0]
 80177c4:	fab3 f383 	clz	r3, r3
 80177c8:	9a07      	ldr	r2, [sp, #28]
 80177ca:	095b      	lsrs	r3, r3, #5
 80177cc:	2000      	movs	r0, #0
 80177ce:	7013      	strb	r3, [r2, #0]
 80177d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80177d2:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80177d6:	4770      	bx	lr
 80177d8:	200b      	movs	r0, #11
 80177da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080177dc <_execute_event_handler>:
 80177dc:	2002      	movs	r0, #2
 80177de:	4770      	bx	lr

080177e0 <_cancel_goal_event_handler>:
 80177e0:	2003      	movs	r0, #3
 80177e2:	4770      	bx	lr

080177e4 <_succeed_event_handler>:
 80177e4:	2004      	movs	r0, #4
 80177e6:	4770      	bx	lr

080177e8 <_abort_event_handler>:
 80177e8:	2006      	movs	r0, #6
 80177ea:	4770      	bx	lr

080177ec <_canceled_event_handler>:
 80177ec:	2005      	movs	r0, #5
 80177ee:	4770      	bx	lr

080177f0 <rcl_action_transition_goal_state>:
 80177f0:	b2c2      	uxtb	r2, r0
 80177f2:	2a06      	cmp	r2, #6
 80177f4:	d80c      	bhi.n	8017810 <rcl_action_transition_goal_state+0x20>
 80177f6:	2904      	cmp	r1, #4
 80177f8:	d80a      	bhi.n	8017810 <rcl_action_transition_goal_state+0x20>
 80177fa:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 80177fe:	b410      	push	{r4}
 8017800:	1853      	adds	r3, r2, r1
 8017802:	4c06      	ldr	r4, [pc, #24]	@ (801781c <rcl_action_transition_goal_state+0x2c>)
 8017804:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8017808:	b123      	cbz	r3, 8017814 <rcl_action_transition_goal_state+0x24>
 801780a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801780e:	4718      	bx	r3
 8017810:	2000      	movs	r0, #0
 8017812:	4770      	bx	lr
 8017814:	2000      	movs	r0, #0
 8017816:	f85d 4b04 	ldr.w	r4, [sp], #4
 801781a:	4770      	bx	lr
 801781c:	0801e9e8 	.word	0x0801e9e8

08017820 <rcl_action_get_zero_initialized_cancel_response>:
 8017820:	b510      	push	{r4, lr}
 8017822:	4c07      	ldr	r4, [pc, #28]	@ (8017840 <rcl_action_get_zero_initialized_cancel_response+0x20>)
 8017824:	4686      	mov	lr, r0
 8017826:	4684      	mov	ip, r0
 8017828:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801782a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801782e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017830:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017834:	6823      	ldr	r3, [r4, #0]
 8017836:	f8cc 3000 	str.w	r3, [ip]
 801783a:	4670      	mov	r0, lr
 801783c:	bd10      	pop	{r4, pc}
 801783e:	bf00      	nop
 8017840:	0801ea74 	.word	0x0801ea74

08017844 <rclc_action_send_result_request>:
 8017844:	b1d0      	cbz	r0, 801787c <rclc_action_send_result_request+0x38>
 8017846:	b500      	push	{lr}
 8017848:	4684      	mov	ip, r0
 801784a:	b087      	sub	sp, #28
 801784c:	f8d0 0009 	ldr.w	r0, [r0, #9]
 8017850:	f8dc 100d 	ldr.w	r1, [ip, #13]
 8017854:	f8dc 2011 	ldr.w	r2, [ip, #17]
 8017858:	f8dc 3015 	ldr.w	r3, [ip, #21]
 801785c:	f10d 0e08 	add.w	lr, sp, #8
 8017860:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8017864:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8017868:	f10c 0240 	add.w	r2, ip, #64	@ 0x40
 801786c:	a902      	add	r1, sp, #8
 801786e:	3010      	adds	r0, #16
 8017870:	f7ff fbda 	bl	8017028 <rcl_action_send_result_request>
 8017874:	b920      	cbnz	r0, 8017880 <rclc_action_send_result_request+0x3c>
 8017876:	b007      	add	sp, #28
 8017878:	f85d fb04 	ldr.w	pc, [sp], #4
 801787c:	200b      	movs	r0, #11
 801787e:	4770      	bx	lr
 8017880:	9001      	str	r0, [sp, #4]
 8017882:	f7f8 f8a1 	bl	800f9c8 <rcutils_reset_error>
 8017886:	9801      	ldr	r0, [sp, #4]
 8017888:	b007      	add	sp, #28
 801788a:	f85d fb04 	ldr.w	pc, [sp], #4
 801788e:	bf00      	nop

08017890 <rclc_action_take_goal_handle>:
 8017890:	b160      	cbz	r0, 80178ac <rclc_action_take_goal_handle+0x1c>
 8017892:	6883      	ldr	r3, [r0, #8]
 8017894:	b143      	cbz	r3, 80178a8 <rclc_action_take_goal_handle+0x18>
 8017896:	6819      	ldr	r1, [r3, #0]
 8017898:	6081      	str	r1, [r0, #8]
 801789a:	2200      	movs	r2, #0
 801789c:	721a      	strb	r2, [r3, #8]
 801789e:	68c1      	ldr	r1, [r0, #12]
 80178a0:	6019      	str	r1, [r3, #0]
 80178a2:	621a      	str	r2, [r3, #32]
 80178a4:	849a      	strh	r2, [r3, #36]	@ 0x24
 80178a6:	60c3      	str	r3, [r0, #12]
 80178a8:	4618      	mov	r0, r3
 80178aa:	4770      	bx	lr
 80178ac:	4603      	mov	r3, r0
 80178ae:	e7fb      	b.n	80178a8 <rclc_action_take_goal_handle+0x18>

080178b0 <rclc_action_remove_used_goal_handle>:
 80178b0:	b180      	cbz	r0, 80178d4 <rclc_action_remove_used_goal_handle+0x24>
 80178b2:	b179      	cbz	r1, 80178d4 <rclc_action_remove_used_goal_handle+0x24>
 80178b4:	68c3      	ldr	r3, [r0, #12]
 80178b6:	4299      	cmp	r1, r3
 80178b8:	d00d      	beq.n	80178d6 <rclc_action_remove_used_goal_handle+0x26>
 80178ba:	b12b      	cbz	r3, 80178c8 <rclc_action_remove_used_goal_handle+0x18>
 80178bc:	681a      	ldr	r2, [r3, #0]
 80178be:	4291      	cmp	r1, r2
 80178c0:	d003      	beq.n	80178ca <rclc_action_remove_used_goal_handle+0x1a>
 80178c2:	4613      	mov	r3, r2
 80178c4:	2b00      	cmp	r3, #0
 80178c6:	d1f9      	bne.n	80178bc <rclc_action_remove_used_goal_handle+0xc>
 80178c8:	4770      	bx	lr
 80178ca:	680a      	ldr	r2, [r1, #0]
 80178cc:	601a      	str	r2, [r3, #0]
 80178ce:	6883      	ldr	r3, [r0, #8]
 80178d0:	600b      	str	r3, [r1, #0]
 80178d2:	6081      	str	r1, [r0, #8]
 80178d4:	4770      	bx	lr
 80178d6:	680b      	ldr	r3, [r1, #0]
 80178d8:	60c3      	str	r3, [r0, #12]
 80178da:	e7f8      	b.n	80178ce <rclc_action_remove_used_goal_handle+0x1e>

080178dc <rclc_action_find_goal_handle_by_uuid>:
 80178dc:	b538      	push	{r3, r4, r5, lr}
 80178de:	b180      	cbz	r0, 8017902 <rclc_action_find_goal_handle_by_uuid+0x26>
 80178e0:	460d      	mov	r5, r1
 80178e2:	b181      	cbz	r1, 8017906 <rclc_action_find_goal_handle_by_uuid+0x2a>
 80178e4:	68c4      	ldr	r4, [r0, #12]
 80178e6:	b914      	cbnz	r4, 80178ee <rclc_action_find_goal_handle_by_uuid+0x12>
 80178e8:	e009      	b.n	80178fe <rclc_action_find_goal_handle_by_uuid+0x22>
 80178ea:	6824      	ldr	r4, [r4, #0]
 80178ec:	b13c      	cbz	r4, 80178fe <rclc_action_find_goal_handle_by_uuid+0x22>
 80178ee:	f104 0009 	add.w	r0, r4, #9
 80178f2:	2210      	movs	r2, #16
 80178f4:	4629      	mov	r1, r5
 80178f6:	f003 fd0f 	bl	801b318 <memcmp>
 80178fa:	2800      	cmp	r0, #0
 80178fc:	d1f5      	bne.n	80178ea <rclc_action_find_goal_handle_by_uuid+0xe>
 80178fe:	4620      	mov	r0, r4
 8017900:	bd38      	pop	{r3, r4, r5, pc}
 8017902:	4604      	mov	r4, r0
 8017904:	e7fb      	b.n	80178fe <rclc_action_find_goal_handle_by_uuid+0x22>
 8017906:	460c      	mov	r4, r1
 8017908:	e7f9      	b.n	80178fe <rclc_action_find_goal_handle_by_uuid+0x22>
 801790a:	bf00      	nop

0801790c <rclc_action_find_first_handle_by_status>:
 801790c:	b140      	cbz	r0, 8017920 <rclc_action_find_first_handle_by_status+0x14>
 801790e:	68c0      	ldr	r0, [r0, #12]
 8017910:	b910      	cbnz	r0, 8017918 <rclc_action_find_first_handle_by_status+0xc>
 8017912:	e005      	b.n	8017920 <rclc_action_find_first_handle_by_status+0x14>
 8017914:	6800      	ldr	r0, [r0, #0]
 8017916:	b118      	cbz	r0, 8017920 <rclc_action_find_first_handle_by_status+0x14>
 8017918:	f990 3008 	ldrsb.w	r3, [r0, #8]
 801791c:	428b      	cmp	r3, r1
 801791e:	d1f9      	bne.n	8017914 <rclc_action_find_first_handle_by_status+0x8>
 8017920:	4770      	bx	lr
 8017922:	bf00      	nop

08017924 <rclc_action_find_first_terminated_handle>:
 8017924:	b140      	cbz	r0, 8017938 <rclc_action_find_first_terminated_handle+0x14>
 8017926:	68c0      	ldr	r0, [r0, #12]
 8017928:	b910      	cbnz	r0, 8017930 <rclc_action_find_first_terminated_handle+0xc>
 801792a:	e005      	b.n	8017938 <rclc_action_find_first_terminated_handle+0x14>
 801792c:	6800      	ldr	r0, [r0, #0]
 801792e:	b118      	cbz	r0, 8017938 <rclc_action_find_first_terminated_handle+0x14>
 8017930:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8017934:	2b03      	cmp	r3, #3
 8017936:	ddf9      	ble.n	801792c <rclc_action_find_first_terminated_handle+0x8>
 8017938:	4770      	bx	lr
 801793a:	bf00      	nop

0801793c <rclc_action_find_handle_by_goal_request_sequence_number>:
 801793c:	b170      	cbz	r0, 801795c <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 801793e:	68c0      	ldr	r0, [r0, #12]
 8017940:	b160      	cbz	r0, 801795c <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 8017942:	b410      	push	{r4}
 8017944:	e001      	b.n	801794a <rclc_action_find_handle_by_goal_request_sequence_number+0xe>
 8017946:	6800      	ldr	r0, [r0, #0]
 8017948:	b128      	cbz	r0, 8017956 <rclc_action_find_handle_by_goal_request_sequence_number+0x1a>
 801794a:	e9d0 410a 	ldrd	r4, r1, [r0, #40]	@ 0x28
 801794e:	4299      	cmp	r1, r3
 8017950:	bf08      	it	eq
 8017952:	4294      	cmpeq	r4, r2
 8017954:	d1f7      	bne.n	8017946 <rclc_action_find_handle_by_goal_request_sequence_number+0xa>
 8017956:	f85d 4b04 	ldr.w	r4, [sp], #4
 801795a:	4770      	bx	lr
 801795c:	4770      	bx	lr
 801795e:	bf00      	nop

08017960 <rclc_action_find_handle_by_result_request_sequence_number>:
 8017960:	b170      	cbz	r0, 8017980 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 8017962:	68c0      	ldr	r0, [r0, #12]
 8017964:	b160      	cbz	r0, 8017980 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 8017966:	b410      	push	{r4}
 8017968:	e001      	b.n	801796e <rclc_action_find_handle_by_result_request_sequence_number+0xe>
 801796a:	6800      	ldr	r0, [r0, #0]
 801796c:	b128      	cbz	r0, 801797a <rclc_action_find_handle_by_result_request_sequence_number+0x1a>
 801796e:	e9d0 4110 	ldrd	r4, r1, [r0, #64]	@ 0x40
 8017972:	4299      	cmp	r1, r3
 8017974:	bf08      	it	eq
 8017976:	4294      	cmpeq	r4, r2
 8017978:	d1f7      	bne.n	801796a <rclc_action_find_handle_by_result_request_sequence_number+0xa>
 801797a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801797e:	4770      	bx	lr
 8017980:	4770      	bx	lr
 8017982:	bf00      	nop

08017984 <rclc_action_find_handle_by_cancel_request_sequence_number>:
 8017984:	b170      	cbz	r0, 80179a4 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 8017986:	68c0      	ldr	r0, [r0, #12]
 8017988:	b160      	cbz	r0, 80179a4 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 801798a:	b410      	push	{r4}
 801798c:	e001      	b.n	8017992 <rclc_action_find_handle_by_cancel_request_sequence_number+0xe>
 801798e:	6800      	ldr	r0, [r0, #0]
 8017990:	b128      	cbz	r0, 801799e <rclc_action_find_handle_by_cancel_request_sequence_number+0x1a>
 8017992:	e9d0 4116 	ldrd	r4, r1, [r0, #88]	@ 0x58
 8017996:	4299      	cmp	r1, r3
 8017998:	bf08      	it	eq
 801799a:	4294      	cmpeq	r4, r2
 801799c:	d1f7      	bne.n	801798e <rclc_action_find_handle_by_cancel_request_sequence_number+0xa>
 801799e:	f85d 4b04 	ldr.w	r4, [sp], #4
 80179a2:	4770      	bx	lr
 80179a4:	4770      	bx	lr
 80179a6:	bf00      	nop

080179a8 <rclc_action_find_first_handle_with_goal_response>:
 80179a8:	b140      	cbz	r0, 80179bc <rclc_action_find_first_handle_with_goal_response+0x14>
 80179aa:	68c0      	ldr	r0, [r0, #12]
 80179ac:	b910      	cbnz	r0, 80179b4 <rclc_action_find_first_handle_with_goal_response+0xc>
 80179ae:	e005      	b.n	80179bc <rclc_action_find_first_handle_with_goal_response+0x14>
 80179b0:	6800      	ldr	r0, [r0, #0]
 80179b2:	b118      	cbz	r0, 80179bc <rclc_action_find_first_handle_with_goal_response+0x14>
 80179b4:	f890 3020 	ldrb.w	r3, [r0, #32]
 80179b8:	2b00      	cmp	r3, #0
 80179ba:	d0f9      	beq.n	80179b0 <rclc_action_find_first_handle_with_goal_response+0x8>
 80179bc:	4770      	bx	lr
 80179be:	bf00      	nop

080179c0 <rclc_action_find_first_handle_with_result_response>:
 80179c0:	b140      	cbz	r0, 80179d4 <rclc_action_find_first_handle_with_result_response+0x14>
 80179c2:	68c0      	ldr	r0, [r0, #12]
 80179c4:	b910      	cbnz	r0, 80179cc <rclc_action_find_first_handle_with_result_response+0xc>
 80179c6:	e005      	b.n	80179d4 <rclc_action_find_first_handle_with_result_response+0x14>
 80179c8:	6800      	ldr	r0, [r0, #0]
 80179ca:	b118      	cbz	r0, 80179d4 <rclc_action_find_first_handle_with_result_response+0x14>
 80179cc:	f890 3023 	ldrb.w	r3, [r0, #35]	@ 0x23
 80179d0:	2b00      	cmp	r3, #0
 80179d2:	d0f9      	beq.n	80179c8 <rclc_action_find_first_handle_with_result_response+0x8>
 80179d4:	4770      	bx	lr
 80179d6:	bf00      	nop

080179d8 <rclc_action_server_response_goal_request>:
 80179d8:	b198      	cbz	r0, 8017a02 <rclc_action_server_response_goal_request+0x2a>
 80179da:	b510      	push	{r4, lr}
 80179dc:	6844      	ldr	r4, [r0, #4]
 80179de:	b086      	sub	sp, #24
 80179e0:	2200      	movs	r2, #0
 80179e2:	e9cd 2203 	strd	r2, r2, [sp, #12]
 80179e6:	460b      	mov	r3, r1
 80179e8:	9205      	str	r2, [sp, #20]
 80179ea:	f100 0128 	add.w	r1, r0, #40	@ 0x28
 80179ee:	aa03      	add	r2, sp, #12
 80179f0:	f104 0010 	add.w	r0, r4, #16
 80179f4:	f88d 300c 	strb.w	r3, [sp, #12]
 80179f8:	f7ff fd4a 	bl	8017490 <rcl_action_send_goal_response>
 80179fc:	b918      	cbnz	r0, 8017a06 <rclc_action_server_response_goal_request+0x2e>
 80179fe:	b006      	add	sp, #24
 8017a00:	bd10      	pop	{r4, pc}
 8017a02:	200b      	movs	r0, #11
 8017a04:	4770      	bx	lr
 8017a06:	9001      	str	r0, [sp, #4]
 8017a08:	f7f7 ffde 	bl	800f9c8 <rcutils_reset_error>
 8017a0c:	9801      	ldr	r0, [sp, #4]
 8017a0e:	b006      	add	sp, #24
 8017a10:	bd10      	pop	{r4, pc}
 8017a12:	bf00      	nop
 8017a14:	0000      	movs	r0, r0
	...

08017a18 <rclc_action_server_goal_cancel_accept>:
 8017a18:	b310      	cbz	r0, 8017a60 <rclc_action_server_goal_cancel_accept+0x48>
 8017a1a:	b510      	push	{r4, lr}
 8017a1c:	b090      	sub	sp, #64	@ 0x40
 8017a1e:	4604      	mov	r4, r0
 8017a20:	a806      	add	r0, sp, #24
 8017a22:	f7ff fefd 	bl	8017820 <rcl_action_get_zero_initialized_cancel_response>
 8017a26:	2300      	movs	r3, #0
 8017a28:	f8d4 0009 	ldr.w	r0, [r4, #9]
 8017a2c:	f8d4 100d 	ldr.w	r1, [r4, #13]
 8017a30:	f8d4 2011 	ldr.w	r2, [r4, #17]
 8017a34:	f88d 3018 	strb.w	r3, [sp, #24]
 8017a38:	f8d4 3015 	ldr.w	r3, [r4, #21]
 8017a3c:	f8cd d01c 	str.w	sp, [sp, #28]
 8017a40:	46ec      	mov	ip, sp
 8017a42:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017a46:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 8017a68 <rclc_action_server_goal_cancel_accept+0x50>
 8017a4a:	6860      	ldr	r0, [r4, #4]
 8017a4c:	aa06      	add	r2, sp, #24
 8017a4e:	f104 0158 	add.w	r1, r4, #88	@ 0x58
 8017a52:	3010      	adds	r0, #16
 8017a54:	ed8d 7b08 	vstr	d7, [sp, #32]
 8017a58:	f7ff fdd2 	bl	8017600 <rcl_action_send_cancel_response>
 8017a5c:	b010      	add	sp, #64	@ 0x40
 8017a5e:	bd10      	pop	{r4, pc}
 8017a60:	200b      	movs	r0, #11
 8017a62:	4770      	bx	lr
 8017a64:	f3af 8000 	nop.w
 8017a68:	00000001 	.word	0x00000001
 8017a6c:	00000001 	.word	0x00000001

08017a70 <rclc_action_server_goal_cancel_reject>:
 8017a70:	b082      	sub	sp, #8
 8017a72:	b530      	push	{r4, r5, lr}
 8017a74:	b08b      	sub	sp, #44	@ 0x2c
 8017a76:	ac0e      	add	r4, sp, #56	@ 0x38
 8017a78:	e884 000c 	stmia.w	r4, {r2, r3}
 8017a7c:	b188      	cbz	r0, 8017aa2 <rclc_action_server_goal_cancel_reject+0x32>
 8017a7e:	4604      	mov	r4, r0
 8017a80:	a801      	add	r0, sp, #4
 8017a82:	460d      	mov	r5, r1
 8017a84:	f7ff fecc 	bl	8017820 <rcl_action_get_zero_initialized_cancel_response>
 8017a88:	aa01      	add	r2, sp, #4
 8017a8a:	a90e      	add	r1, sp, #56	@ 0x38
 8017a8c:	f104 0010 	add.w	r0, r4, #16
 8017a90:	f88d 5004 	strb.w	r5, [sp, #4]
 8017a94:	f7ff fdb4 	bl	8017600 <rcl_action_send_cancel_response>
 8017a98:	b00b      	add	sp, #44	@ 0x2c
 8017a9a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017a9e:	b002      	add	sp, #8
 8017aa0:	4770      	bx	lr
 8017aa2:	200b      	movs	r0, #11
 8017aa4:	b00b      	add	sp, #44	@ 0x2c
 8017aa6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017aaa:	b002      	add	sp, #8
 8017aac:	4770      	bx	lr
 8017aae:	bf00      	nop

08017ab0 <__atomic_load_8>:
 8017ab0:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 8017ab4:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 8017ab8:	4a15      	ldr	r2, [pc, #84]	@ (8017b10 <__atomic_load_8+0x60>)
 8017aba:	4b16      	ldr	r3, [pc, #88]	@ (8017b14 <__atomic_load_8+0x64>)
 8017abc:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8017ac0:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 8017ac4:	fb02 f101 	mul.w	r1, r2, r1
 8017ac8:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 8017acc:	fba3 2301 	umull	r2, r3, r3, r1
 8017ad0:	091b      	lsrs	r3, r3, #4
 8017ad2:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8017ad6:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 8017ada:	b4d0      	push	{r4, r6, r7}
 8017adc:	4c0e      	ldr	r4, [pc, #56]	@ (8017b18 <__atomic_load_8+0x68>)
 8017ade:	1ac9      	subs	r1, r1, r3
 8017ae0:	1862      	adds	r2, r4, r1
 8017ae2:	f04f 0c01 	mov.w	ip, #1
 8017ae6:	e8d2 3f4f 	ldrexb	r3, [r2]
 8017aea:	e8c2 cf46 	strexb	r6, ip, [r2]
 8017aee:	2e00      	cmp	r6, #0
 8017af0:	d1f9      	bne.n	8017ae6 <__atomic_load_8+0x36>
 8017af2:	f3bf 8f5b 	dmb	ish
 8017af6:	b2db      	uxtb	r3, r3
 8017af8:	2b00      	cmp	r3, #0
 8017afa:	d1f4      	bne.n	8017ae6 <__atomic_load_8+0x36>
 8017afc:	e9d0 6700 	ldrd	r6, r7, [r0]
 8017b00:	f3bf 8f5b 	dmb	ish
 8017b04:	5463      	strb	r3, [r4, r1]
 8017b06:	4630      	mov	r0, r6
 8017b08:	4639      	mov	r1, r7
 8017b0a:	bcd0      	pop	{r4, r6, r7}
 8017b0c:	4770      	bx	lr
 8017b0e:	bf00      	nop
 8017b10:	27d4eb2d 	.word	0x27d4eb2d
 8017b14:	b21642c9 	.word	0xb21642c9
 8017b18:	2000b5e0 	.word	0x2000b5e0

08017b1c <__atomic_store_8>:
 8017b1c:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 8017b20:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 8017b24:	b570      	push	{r4, r5, r6, lr}
 8017b26:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8017b2a:	4c14      	ldr	r4, [pc, #80]	@ (8017b7c <__atomic_store_8+0x60>)
 8017b2c:	4d14      	ldr	r5, [pc, #80]	@ (8017b80 <__atomic_store_8+0x64>)
 8017b2e:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 8017b32:	fb04 f101 	mul.w	r1, r4, r1
 8017b36:	4c13      	ldr	r4, [pc, #76]	@ (8017b84 <__atomic_store_8+0x68>)
 8017b38:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 8017b3c:	fba4 4e01 	umull	r4, lr, r4, r1
 8017b40:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
 8017b44:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
 8017b48:	ebce 0ec4 	rsb	lr, lr, r4, lsl #3
 8017b4c:	eba1 0e0e 	sub.w	lr, r1, lr
 8017b50:	eb05 0c0e 	add.w	ip, r5, lr
 8017b54:	f04f 0401 	mov.w	r4, #1
 8017b58:	e8dc 1f4f 	ldrexb	r1, [ip]
 8017b5c:	e8cc 4f46 	strexb	r6, r4, [ip]
 8017b60:	2e00      	cmp	r6, #0
 8017b62:	d1f9      	bne.n	8017b58 <__atomic_store_8+0x3c>
 8017b64:	f3bf 8f5b 	dmb	ish
 8017b68:	b2c9      	uxtb	r1, r1
 8017b6a:	2900      	cmp	r1, #0
 8017b6c:	d1f4      	bne.n	8017b58 <__atomic_store_8+0x3c>
 8017b6e:	e9c0 2300 	strd	r2, r3, [r0]
 8017b72:	f3bf 8f5b 	dmb	ish
 8017b76:	f805 100e 	strb.w	r1, [r5, lr]
 8017b7a:	bd70      	pop	{r4, r5, r6, pc}
 8017b7c:	27d4eb2d 	.word	0x27d4eb2d
 8017b80:	2000b5e0 	.word	0x2000b5e0
 8017b84:	b21642c9 	.word	0xb21642c9

08017b88 <__atomic_exchange_8>:
 8017b88:	ea80 4c10 	eor.w	ip, r0, r0, lsr #16
 8017b8c:	f08c 0c3d 	eor.w	ip, ip, #61	@ 0x3d
 8017b90:	4916      	ldr	r1, [pc, #88]	@ (8017bec <__atomic_exchange_8+0x64>)
 8017b92:	eb0c 0ccc 	add.w	ip, ip, ip, lsl #3
 8017b96:	ea8c 1c1c 	eor.w	ip, ip, ip, lsr #4
 8017b9a:	fb01 fc0c 	mul.w	ip, r1, ip
 8017b9e:	4914      	ldr	r1, [pc, #80]	@ (8017bf0 <__atomic_exchange_8+0x68>)
 8017ba0:	ea8c 3cdc 	eor.w	ip, ip, ip, lsr #15
 8017ba4:	b570      	push	{r4, r5, r6, lr}
 8017ba6:	4605      	mov	r5, r0
 8017ba8:	fba1 010c 	umull	r0, r1, r1, ip
 8017bac:	0909      	lsrs	r1, r1, #4
 8017bae:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 8017bb2:	ebc1 01c0 	rsb	r1, r1, r0, lsl #3
 8017bb6:	4e0f      	ldr	r6, [pc, #60]	@ (8017bf4 <__atomic_exchange_8+0x6c>)
 8017bb8:	ebac 0c01 	sub.w	ip, ip, r1
 8017bbc:	eb06 010c 	add.w	r1, r6, ip
 8017bc0:	f04f 0e01 	mov.w	lr, #1
 8017bc4:	e8d1 4f4f 	ldrexb	r4, [r1]
 8017bc8:	e8c1 ef40 	strexb	r0, lr, [r1]
 8017bcc:	2800      	cmp	r0, #0
 8017bce:	d1f9      	bne.n	8017bc4 <__atomic_exchange_8+0x3c>
 8017bd0:	f3bf 8f5b 	dmb	ish
 8017bd4:	b2e4      	uxtb	r4, r4
 8017bd6:	2c00      	cmp	r4, #0
 8017bd8:	d1f4      	bne.n	8017bc4 <__atomic_exchange_8+0x3c>
 8017bda:	e9d5 0100 	ldrd	r0, r1, [r5]
 8017bde:	e9c5 2300 	strd	r2, r3, [r5]
 8017be2:	f3bf 8f5b 	dmb	ish
 8017be6:	f806 400c 	strb.w	r4, [r6, ip]
 8017bea:	bd70      	pop	{r4, r5, r6, pc}
 8017bec:	27d4eb2d 	.word	0x27d4eb2d
 8017bf0:	b21642c9 	.word	0xb21642c9
 8017bf4:	2000b5e0 	.word	0x2000b5e0

08017bf8 <rcutils_get_env>:
 8017bf8:	b168      	cbz	r0, 8017c16 <rcutils_get_env+0x1e>
 8017bfa:	b510      	push	{r4, lr}
 8017bfc:	460c      	mov	r4, r1
 8017bfe:	b129      	cbz	r1, 8017c0c <rcutils_get_env+0x14>
 8017c00:	f002 fef2 	bl	801a9e8 <getenv>
 8017c04:	b120      	cbz	r0, 8017c10 <rcutils_get_env+0x18>
 8017c06:	6020      	str	r0, [r4, #0]
 8017c08:	2000      	movs	r0, #0
 8017c0a:	bd10      	pop	{r4, pc}
 8017c0c:	4803      	ldr	r0, [pc, #12]	@ (8017c1c <rcutils_get_env+0x24>)
 8017c0e:	bd10      	pop	{r4, pc}
 8017c10:	4b03      	ldr	r3, [pc, #12]	@ (8017c20 <rcutils_get_env+0x28>)
 8017c12:	6023      	str	r3, [r4, #0]
 8017c14:	bd10      	pop	{r4, pc}
 8017c16:	4803      	ldr	r0, [pc, #12]	@ (8017c24 <rcutils_get_env+0x2c>)
 8017c18:	4770      	bx	lr
 8017c1a:	bf00      	nop
 8017c1c:	0801e094 	.word	0x0801e094
 8017c20:	0801e458 	.word	0x0801e458
 8017c24:	0801e078 	.word	0x0801e078

08017c28 <rcutils_format_string_limit>:
 8017c28:	b40f      	push	{r0, r1, r2, r3}
 8017c2a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017c2c:	b083      	sub	sp, #12
 8017c2e:	ac08      	add	r4, sp, #32
 8017c30:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 8017c32:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8017c36:	b34e      	cbz	r6, 8017c8c <rcutils_format_string_limit+0x64>
 8017c38:	a808      	add	r0, sp, #32
 8017c3a:	f7f7 fe9f 	bl	800f97c <rcutils_allocator_is_valid>
 8017c3e:	b328      	cbz	r0, 8017c8c <rcutils_format_string_limit+0x64>
 8017c40:	2100      	movs	r1, #0
 8017c42:	ab0f      	add	r3, sp, #60	@ 0x3c
 8017c44:	4632      	mov	r2, r6
 8017c46:	4608      	mov	r0, r1
 8017c48:	e9cd 3300 	strd	r3, r3, [sp]
 8017c4c:	f000 f8f4 	bl	8017e38 <rcutils_vsnprintf>
 8017c50:	1c43      	adds	r3, r0, #1
 8017c52:	4605      	mov	r5, r0
 8017c54:	d01a      	beq.n	8017c8c <rcutils_format_string_limit+0x64>
 8017c56:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8017c58:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8017c5a:	1c47      	adds	r7, r0, #1
 8017c5c:	429f      	cmp	r7, r3
 8017c5e:	bf84      	itt	hi
 8017c60:	461f      	movhi	r7, r3
 8017c62:	f103 35ff 	addhi.w	r5, r3, #4294967295	@ 0xffffffff
 8017c66:	4638      	mov	r0, r7
 8017c68:	9b08      	ldr	r3, [sp, #32]
 8017c6a:	4798      	blx	r3
 8017c6c:	4604      	mov	r4, r0
 8017c6e:	b168      	cbz	r0, 8017c8c <rcutils_format_string_limit+0x64>
 8017c70:	9b01      	ldr	r3, [sp, #4]
 8017c72:	4632      	mov	r2, r6
 8017c74:	4639      	mov	r1, r7
 8017c76:	f000 f8df 	bl	8017e38 <rcutils_vsnprintf>
 8017c7a:	2800      	cmp	r0, #0
 8017c7c:	db02      	blt.n	8017c84 <rcutils_format_string_limit+0x5c>
 8017c7e:	2300      	movs	r3, #0
 8017c80:	5563      	strb	r3, [r4, r5]
 8017c82:	e004      	b.n	8017c8e <rcutils_format_string_limit+0x66>
 8017c84:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017c86:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8017c88:	4620      	mov	r0, r4
 8017c8a:	4798      	blx	r3
 8017c8c:	2400      	movs	r4, #0
 8017c8e:	4620      	mov	r0, r4
 8017c90:	b003      	add	sp, #12
 8017c92:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8017c96:	b004      	add	sp, #16
 8017c98:	4770      	bx	lr
 8017c9a:	bf00      	nop

08017c9c <rcutils_repl_str>:
 8017c9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017ca0:	ed2d 8b02 	vpush	{d8}
 8017ca4:	b087      	sub	sp, #28
 8017ca6:	4680      	mov	r8, r0
 8017ca8:	4608      	mov	r0, r1
 8017caa:	f8cd 8004 	str.w	r8, [sp, #4]
 8017cae:	ee08 2a10 	vmov	s16, r2
 8017cb2:	468a      	mov	sl, r1
 8017cb4:	4699      	mov	r9, r3
 8017cb6:	f7e8 fabd 	bl	8000234 <strlen>
 8017cba:	2600      	movs	r6, #0
 8017cbc:	4647      	mov	r7, r8
 8017cbe:	9002      	str	r0, [sp, #8]
 8017cc0:	46b3      	mov	fp, r6
 8017cc2:	2510      	movs	r5, #16
 8017cc4:	46b0      	mov	r8, r6
 8017cc6:	e01d      	b.n	8017d04 <rcutils_repl_str+0x68>
 8017cc8:	f10b 0b01 	add.w	fp, fp, #1
 8017ccc:	455e      	cmp	r6, fp
 8017cce:	d211      	bcs.n	8017cf4 <rcutils_repl_str+0x58>
 8017cd0:	442e      	add	r6, r5
 8017cd2:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8017cd6:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8017cda:	00b1      	lsls	r1, r6, #2
 8017cdc:	4798      	blx	r3
 8017cde:	2800      	cmp	r0, #0
 8017ce0:	f000 8088 	beq.w	8017df4 <rcutils_repl_str+0x158>
 8017ce4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8017ce8:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
 8017cec:	4680      	mov	r8, r0
 8017cee:	bf28      	it	cs
 8017cf0:	f44f 1580 	movcs.w	r5, #1048576	@ 0x100000
 8017cf4:	9a01      	ldr	r2, [sp, #4]
 8017cf6:	eb08 038b 	add.w	r3, r8, fp, lsl #2
 8017cfa:	1aa2      	subs	r2, r4, r2
 8017cfc:	f843 2c04 	str.w	r2, [r3, #-4]
 8017d00:	9b02      	ldr	r3, [sp, #8]
 8017d02:	18e7      	adds	r7, r4, r3
 8017d04:	4651      	mov	r1, sl
 8017d06:	4638      	mov	r0, r7
 8017d08:	f003 fb57 	bl	801b3ba <strstr>
 8017d0c:	4604      	mov	r4, r0
 8017d0e:	4640      	mov	r0, r8
 8017d10:	2c00      	cmp	r4, #0
 8017d12:	d1d9      	bne.n	8017cc8 <rcutils_repl_str+0x2c>
 8017d14:	46b8      	mov	r8, r7
 8017d16:	4607      	mov	r7, r0
 8017d18:	4640      	mov	r0, r8
 8017d1a:	f7e8 fa8b 	bl	8000234 <strlen>
 8017d1e:	9b01      	ldr	r3, [sp, #4]
 8017d20:	eba8 0303 	sub.w	r3, r8, r3
 8017d24:	181c      	adds	r4, r3, r0
 8017d26:	9404      	str	r4, [sp, #16]
 8017d28:	f1bb 0f00 	cmp.w	fp, #0
 8017d2c:	d04a      	beq.n	8017dc4 <rcutils_repl_str+0x128>
 8017d2e:	ee18 0a10 	vmov	r0, s16
 8017d32:	f7e8 fa7f 	bl	8000234 <strlen>
 8017d36:	9b02      	ldr	r3, [sp, #8]
 8017d38:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8017d3c:	1ac3      	subs	r3, r0, r3
 8017d3e:	fb0b 4303 	mla	r3, fp, r3, r4
 8017d42:	461a      	mov	r2, r3
 8017d44:	9305      	str	r3, [sp, #20]
 8017d46:	4606      	mov	r6, r0
 8017d48:	f8d9 3000 	ldr.w	r3, [r9]
 8017d4c:	1c50      	adds	r0, r2, #1
 8017d4e:	4798      	blx	r3
 8017d50:	9003      	str	r0, [sp, #12]
 8017d52:	2800      	cmp	r0, #0
 8017d54:	d04f      	beq.n	8017df6 <rcutils_repl_str+0x15a>
 8017d56:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8017d5a:	683a      	ldr	r2, [r7, #0]
 8017d5c:	4641      	mov	r1, r8
 8017d5e:	f003 fbce 	bl	801b4fe <memcpy>
 8017d62:	683d      	ldr	r5, [r7, #0]
 8017d64:	9b03      	ldr	r3, [sp, #12]
 8017d66:	9701      	str	r7, [sp, #4]
 8017d68:	46ba      	mov	sl, r7
 8017d6a:	441d      	add	r5, r3
 8017d6c:	9f02      	ldr	r7, [sp, #8]
 8017d6e:	f8cd 9008 	str.w	r9, [sp, #8]
 8017d72:	2401      	movs	r4, #1
 8017d74:	46d1      	mov	r9, sl
 8017d76:	ee18 aa10 	vmov	sl, s16
 8017d7a:	e00a      	b.n	8017d92 <rcutils_repl_str+0xf6>
 8017d7c:	f8d9 5000 	ldr.w	r5, [r9]
 8017d80:	1aaa      	subs	r2, r5, r2
 8017d82:	1885      	adds	r5, r0, r2
 8017d84:	f003 fbbb 	bl	801b4fe <memcpy>
 8017d88:	45a3      	cmp	fp, r4
 8017d8a:	f104 0201 	add.w	r2, r4, #1
 8017d8e:	d935      	bls.n	8017dfc <rcutils_repl_str+0x160>
 8017d90:	4614      	mov	r4, r2
 8017d92:	4632      	mov	r2, r6
 8017d94:	4651      	mov	r1, sl
 8017d96:	4628      	mov	r0, r5
 8017d98:	f003 fbb1 	bl	801b4fe <memcpy>
 8017d9c:	f859 2b04 	ldr.w	r2, [r9], #4
 8017da0:	45a3      	cmp	fp, r4
 8017da2:	443a      	add	r2, r7
 8017da4:	eb05 0006 	add.w	r0, r5, r6
 8017da8:	eb08 0102 	add.w	r1, r8, r2
 8017dac:	d1e6      	bne.n	8017d7c <rcutils_repl_str+0xe0>
 8017dae:	9b04      	ldr	r3, [sp, #16]
 8017db0:	1a9a      	subs	r2, r3, r2
 8017db2:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 8017db6:	f003 fba2 	bl	801b4fe <memcpy>
 8017dba:	9a03      	ldr	r2, [sp, #12]
 8017dbc:	9905      	ldr	r1, [sp, #20]
 8017dbe:	2300      	movs	r3, #0
 8017dc0:	5453      	strb	r3, [r2, r1]
 8017dc2:	e00b      	b.n	8017ddc <rcutils_repl_str+0x140>
 8017dc4:	4620      	mov	r0, r4
 8017dc6:	f8d9 3000 	ldr.w	r3, [r9]
 8017dca:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8017dce:	3001      	adds	r0, #1
 8017dd0:	4798      	blx	r3
 8017dd2:	9003      	str	r0, [sp, #12]
 8017dd4:	b110      	cbz	r0, 8017ddc <rcutils_repl_str+0x140>
 8017dd6:	9901      	ldr	r1, [sp, #4]
 8017dd8:	f003 fb89 	bl	801b4ee <strcpy>
 8017ddc:	4638      	mov	r0, r7
 8017dde:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8017de2:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8017de6:	4798      	blx	r3
 8017de8:	9803      	ldr	r0, [sp, #12]
 8017dea:	b007      	add	sp, #28
 8017dec:	ecbd 8b02 	vpop	{d8}
 8017df0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017df4:	4647      	mov	r7, r8
 8017df6:	2300      	movs	r3, #0
 8017df8:	9303      	str	r3, [sp, #12]
 8017dfa:	e7ef      	b.n	8017ddc <rcutils_repl_str+0x140>
 8017dfc:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 8017e00:	e7db      	b.n	8017dba <rcutils_repl_str+0x11e>
 8017e02:	bf00      	nop

08017e04 <rcutils_snprintf>:
 8017e04:	b40c      	push	{r2, r3}
 8017e06:	b530      	push	{r4, r5, lr}
 8017e08:	b083      	sub	sp, #12
 8017e0a:	ab06      	add	r3, sp, #24
 8017e0c:	f853 2b04 	ldr.w	r2, [r3], #4
 8017e10:	9301      	str	r3, [sp, #4]
 8017e12:	b152      	cbz	r2, 8017e2a <rcutils_snprintf+0x26>
 8017e14:	b138      	cbz	r0, 8017e26 <rcutils_snprintf+0x22>
 8017e16:	b141      	cbz	r1, 8017e2a <rcutils_snprintf+0x26>
 8017e18:	f003 f9dc 	bl	801b1d4 <vsniprintf>
 8017e1c:	b003      	add	sp, #12
 8017e1e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017e22:	b002      	add	sp, #8
 8017e24:	4770      	bx	lr
 8017e26:	2900      	cmp	r1, #0
 8017e28:	d0f6      	beq.n	8017e18 <rcutils_snprintf+0x14>
 8017e2a:	f003 fb33 	bl	801b494 <__errno>
 8017e2e:	2316      	movs	r3, #22
 8017e30:	6003      	str	r3, [r0, #0]
 8017e32:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017e36:	e7f1      	b.n	8017e1c <rcutils_snprintf+0x18>

08017e38 <rcutils_vsnprintf>:
 8017e38:	b570      	push	{r4, r5, r6, lr}
 8017e3a:	b13a      	cbz	r2, 8017e4c <rcutils_vsnprintf+0x14>
 8017e3c:	b120      	cbz	r0, 8017e48 <rcutils_vsnprintf+0x10>
 8017e3e:	b129      	cbz	r1, 8017e4c <rcutils_vsnprintf+0x14>
 8017e40:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017e44:	f003 b9c6 	b.w	801b1d4 <vsniprintf>
 8017e48:	2900      	cmp	r1, #0
 8017e4a:	d0f9      	beq.n	8017e40 <rcutils_vsnprintf+0x8>
 8017e4c:	f003 fb22 	bl	801b494 <__errno>
 8017e50:	2316      	movs	r3, #22
 8017e52:	6003      	str	r3, [r0, #0]
 8017e54:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017e58:	bd70      	pop	{r4, r5, r6, pc}
 8017e5a:	bf00      	nop

08017e5c <rcutils_strdup>:
 8017e5c:	b084      	sub	sp, #16
 8017e5e:	b570      	push	{r4, r5, r6, lr}
 8017e60:	b082      	sub	sp, #8
 8017e62:	ac07      	add	r4, sp, #28
 8017e64:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 8017e68:	4605      	mov	r5, r0
 8017e6a:	b1b0      	cbz	r0, 8017e9a <rcutils_strdup+0x3e>
 8017e6c:	f7e8 f9e2 	bl	8000234 <strlen>
 8017e70:	1c42      	adds	r2, r0, #1
 8017e72:	9b07      	ldr	r3, [sp, #28]
 8017e74:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8017e76:	9201      	str	r2, [sp, #4]
 8017e78:	4606      	mov	r6, r0
 8017e7a:	4610      	mov	r0, r2
 8017e7c:	4798      	blx	r3
 8017e7e:	4604      	mov	r4, r0
 8017e80:	b128      	cbz	r0, 8017e8e <rcutils_strdup+0x32>
 8017e82:	9a01      	ldr	r2, [sp, #4]
 8017e84:	4629      	mov	r1, r5
 8017e86:	f003 fb3a 	bl	801b4fe <memcpy>
 8017e8a:	2300      	movs	r3, #0
 8017e8c:	55a3      	strb	r3, [r4, r6]
 8017e8e:	4620      	mov	r0, r4
 8017e90:	b002      	add	sp, #8
 8017e92:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017e96:	b004      	add	sp, #16
 8017e98:	4770      	bx	lr
 8017e9a:	4604      	mov	r4, r0
 8017e9c:	e7f7      	b.n	8017e8e <rcutils_strdup+0x32>
 8017e9e:	bf00      	nop

08017ea0 <rcutils_strndup>:
 8017ea0:	b082      	sub	sp, #8
 8017ea2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017ea4:	ac06      	add	r4, sp, #24
 8017ea6:	e884 000c 	stmia.w	r4, {r2, r3}
 8017eaa:	4605      	mov	r5, r0
 8017eac:	b188      	cbz	r0, 8017ed2 <rcutils_strndup+0x32>
 8017eae:	1c4f      	adds	r7, r1, #1
 8017eb0:	460e      	mov	r6, r1
 8017eb2:	4638      	mov	r0, r7
 8017eb4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8017eb6:	4790      	blx	r2
 8017eb8:	4604      	mov	r4, r0
 8017eba:	b128      	cbz	r0, 8017ec8 <rcutils_strndup+0x28>
 8017ebc:	463a      	mov	r2, r7
 8017ebe:	4629      	mov	r1, r5
 8017ec0:	f003 fb1d 	bl	801b4fe <memcpy>
 8017ec4:	2300      	movs	r3, #0
 8017ec6:	55a3      	strb	r3, [r4, r6]
 8017ec8:	4620      	mov	r0, r4
 8017eca:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8017ece:	b002      	add	sp, #8
 8017ed0:	4770      	bx	lr
 8017ed2:	4604      	mov	r4, r0
 8017ed4:	e7f8      	b.n	8017ec8 <rcutils_strndup+0x28>
 8017ed6:	bf00      	nop

08017ed8 <rcutils_get_zero_initialized_string_map>:
 8017ed8:	4b01      	ldr	r3, [pc, #4]	@ (8017ee0 <rcutils_get_zero_initialized_string_map+0x8>)
 8017eda:	2000      	movs	r0, #0
 8017edc:	6018      	str	r0, [r3, #0]
 8017ede:	4770      	bx	lr
 8017ee0:	2000b5f8 	.word	0x2000b5f8

08017ee4 <rcutils_string_map_reserve>:
 8017ee4:	2800      	cmp	r0, #0
 8017ee6:	d05f      	beq.n	8017fa8 <rcutils_string_map_reserve+0xc4>
 8017ee8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017eec:	460c      	mov	r4, r1
 8017eee:	6801      	ldr	r1, [r0, #0]
 8017ef0:	b082      	sub	sp, #8
 8017ef2:	4605      	mov	r5, r0
 8017ef4:	b129      	cbz	r1, 8017f02 <rcutils_string_map_reserve+0x1e>
 8017ef6:	68cb      	ldr	r3, [r1, #12]
 8017ef8:	42a3      	cmp	r3, r4
 8017efa:	d906      	bls.n	8017f0a <rcutils_string_map_reserve+0x26>
 8017efc:	461c      	mov	r4, r3
 8017efe:	2900      	cmp	r1, #0
 8017f00:	d1f9      	bne.n	8017ef6 <rcutils_string_map_reserve+0x12>
 8017f02:	201f      	movs	r0, #31
 8017f04:	b002      	add	sp, #8
 8017f06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017f0a:	688b      	ldr	r3, [r1, #8]
 8017f0c:	42a3      	cmp	r3, r4
 8017f0e:	d047      	beq.n	8017fa0 <rcutils_string_map_reserve+0xbc>
 8017f10:	6a0e      	ldr	r6, [r1, #32]
 8017f12:	2c00      	cmp	r4, #0
 8017f14:	d034      	beq.n	8017f80 <rcutils_string_map_reserve+0x9c>
 8017f16:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 8017f1a:	d243      	bcs.n	8017fa4 <rcutils_string_map_reserve+0xc0>
 8017f1c:	00a7      	lsls	r7, r4, #2
 8017f1e:	f8d1 8018 	ldr.w	r8, [r1, #24]
 8017f22:	6808      	ldr	r0, [r1, #0]
 8017f24:	4632      	mov	r2, r6
 8017f26:	4639      	mov	r1, r7
 8017f28:	47c0      	blx	r8
 8017f2a:	2800      	cmp	r0, #0
 8017f2c:	d03a      	beq.n	8017fa4 <rcutils_string_map_reserve+0xc0>
 8017f2e:	682b      	ldr	r3, [r5, #0]
 8017f30:	4632      	mov	r2, r6
 8017f32:	6018      	str	r0, [r3, #0]
 8017f34:	4639      	mov	r1, r7
 8017f36:	6858      	ldr	r0, [r3, #4]
 8017f38:	47c0      	blx	r8
 8017f3a:	2800      	cmp	r0, #0
 8017f3c:	d032      	beq.n	8017fa4 <rcutils_string_map_reserve+0xc0>
 8017f3e:	682d      	ldr	r5, [r5, #0]
 8017f40:	68ab      	ldr	r3, [r5, #8]
 8017f42:	6068      	str	r0, [r5, #4]
 8017f44:	42a3      	cmp	r3, r4
 8017f46:	d226      	bcs.n	8017f96 <rcutils_string_map_reserve+0xb2>
 8017f48:	682a      	ldr	r2, [r5, #0]
 8017f4a:	eb00 0c07 	add.w	ip, r0, r7
 8017f4e:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
 8017f52:	45e6      	cmp	lr, ip
 8017f54:	ea4f 0183 	mov.w	r1, r3, lsl #2
 8017f58:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 8017f5c:	d203      	bcs.n	8017f66 <rcutils_string_map_reserve+0x82>
 8017f5e:	eb02 0c07 	add.w	ip, r2, r7
 8017f62:	4566      	cmp	r6, ip
 8017f64:	d322      	bcc.n	8017fac <rcutils_string_map_reserve+0xc8>
 8017f66:	1ae3      	subs	r3, r4, r3
 8017f68:	009a      	lsls	r2, r3, #2
 8017f6a:	4670      	mov	r0, lr
 8017f6c:	2100      	movs	r1, #0
 8017f6e:	9201      	str	r2, [sp, #4]
 8017f70:	f003 f9fc 	bl	801b36c <memset>
 8017f74:	9a01      	ldr	r2, [sp, #4]
 8017f76:	2100      	movs	r1, #0
 8017f78:	4630      	mov	r0, r6
 8017f7a:	f003 f9f7 	bl	801b36c <memset>
 8017f7e:	e00a      	b.n	8017f96 <rcutils_string_map_reserve+0xb2>
 8017f80:	694f      	ldr	r7, [r1, #20]
 8017f82:	6808      	ldr	r0, [r1, #0]
 8017f84:	4631      	mov	r1, r6
 8017f86:	47b8      	blx	r7
 8017f88:	682b      	ldr	r3, [r5, #0]
 8017f8a:	4631      	mov	r1, r6
 8017f8c:	6858      	ldr	r0, [r3, #4]
 8017f8e:	601c      	str	r4, [r3, #0]
 8017f90:	47b8      	blx	r7
 8017f92:	682d      	ldr	r5, [r5, #0]
 8017f94:	606c      	str	r4, [r5, #4]
 8017f96:	2000      	movs	r0, #0
 8017f98:	60ac      	str	r4, [r5, #8]
 8017f9a:	b002      	add	sp, #8
 8017f9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017fa0:	2000      	movs	r0, #0
 8017fa2:	e7af      	b.n	8017f04 <rcutils_string_map_reserve+0x20>
 8017fa4:	200a      	movs	r0, #10
 8017fa6:	e7ad      	b.n	8017f04 <rcutils_string_map_reserve+0x20>
 8017fa8:	200b      	movs	r0, #11
 8017faa:	4770      	bx	lr
 8017fac:	1f0b      	subs	r3, r1, #4
 8017fae:	4418      	add	r0, r3
 8017fb0:	4413      	add	r3, r2
 8017fb2:	3a04      	subs	r2, #4
 8017fb4:	4417      	add	r7, r2
 8017fb6:	2200      	movs	r2, #0
 8017fb8:	f843 2f04 	str.w	r2, [r3, #4]!
 8017fbc:	42bb      	cmp	r3, r7
 8017fbe:	f840 2f04 	str.w	r2, [r0, #4]!
 8017fc2:	d1f9      	bne.n	8017fb8 <rcutils_string_map_reserve+0xd4>
 8017fc4:	e7e7      	b.n	8017f96 <rcutils_string_map_reserve+0xb2>
 8017fc6:	bf00      	nop

08017fc8 <rcutils_string_map_init>:
 8017fc8:	b082      	sub	sp, #8
 8017fca:	b570      	push	{r4, r5, r6, lr}
 8017fcc:	ac04      	add	r4, sp, #16
 8017fce:	e884 000c 	stmia.w	r4, {r2, r3}
 8017fd2:	b380      	cbz	r0, 8018036 <rcutils_string_map_init+0x6e>
 8017fd4:	6806      	ldr	r6, [r0, #0]
 8017fd6:	4604      	mov	r4, r0
 8017fd8:	b12e      	cbz	r6, 8017fe6 <rcutils_string_map_init+0x1e>
 8017fda:	251e      	movs	r5, #30
 8017fdc:	4628      	mov	r0, r5
 8017fde:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017fe2:	b002      	add	sp, #8
 8017fe4:	4770      	bx	lr
 8017fe6:	a804      	add	r0, sp, #16
 8017fe8:	460d      	mov	r5, r1
 8017fea:	f7f7 fcc7 	bl	800f97c <rcutils_allocator_is_valid>
 8017fee:	b310      	cbz	r0, 8018036 <rcutils_string_map_init+0x6e>
 8017ff0:	9b04      	ldr	r3, [sp, #16]
 8017ff2:	9908      	ldr	r1, [sp, #32]
 8017ff4:	2024      	movs	r0, #36	@ 0x24
 8017ff6:	4798      	blx	r3
 8017ff8:	6020      	str	r0, [r4, #0]
 8017ffa:	b310      	cbz	r0, 8018042 <rcutils_string_map_init+0x7a>
 8017ffc:	f10d 0e10 	add.w	lr, sp, #16
 8018000:	e9c0 6600 	strd	r6, r6, [r0]
 8018004:	e9c0 6602 	strd	r6, r6, [r0, #8]
 8018008:	f100 0c10 	add.w	ip, r0, #16
 801800c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8018010:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8018014:	f8de 3000 	ldr.w	r3, [lr]
 8018018:	f8cc 3000 	str.w	r3, [ip]
 801801c:	4629      	mov	r1, r5
 801801e:	4620      	mov	r0, r4
 8018020:	f7ff ff60 	bl	8017ee4 <rcutils_string_map_reserve>
 8018024:	4605      	mov	r5, r0
 8018026:	2800      	cmp	r0, #0
 8018028:	d0d8      	beq.n	8017fdc <rcutils_string_map_init+0x14>
 801802a:	9b05      	ldr	r3, [sp, #20]
 801802c:	9908      	ldr	r1, [sp, #32]
 801802e:	6820      	ldr	r0, [r4, #0]
 8018030:	4798      	blx	r3
 8018032:	6026      	str	r6, [r4, #0]
 8018034:	e7d2      	b.n	8017fdc <rcutils_string_map_init+0x14>
 8018036:	250b      	movs	r5, #11
 8018038:	4628      	mov	r0, r5
 801803a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801803e:	b002      	add	sp, #8
 8018040:	4770      	bx	lr
 8018042:	250a      	movs	r5, #10
 8018044:	e7ca      	b.n	8017fdc <rcutils_string_map_init+0x14>
 8018046:	bf00      	nop

08018048 <rcutils_string_map_fini>:
 8018048:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801804c:	b082      	sub	sp, #8
 801804e:	2800      	cmp	r0, #0
 8018050:	d03a      	beq.n	80180c8 <rcutils_string_map_fini+0x80>
 8018052:	6804      	ldr	r4, [r0, #0]
 8018054:	4606      	mov	r6, r0
 8018056:	2c00      	cmp	r4, #0
 8018058:	d032      	beq.n	80180c0 <rcutils_string_map_fini+0x78>
 801805a:	68a3      	ldr	r3, [r4, #8]
 801805c:	b32b      	cbz	r3, 80180aa <rcutils_string_map_fini+0x62>
 801805e:	2500      	movs	r5, #0
 8018060:	6822      	ldr	r2, [r4, #0]
 8018062:	462f      	mov	r7, r5
 8018064:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8018068:	b1e0      	cbz	r0, 80180a4 <rcutils_string_map_fini+0x5c>
 801806a:	6a21      	ldr	r1, [r4, #32]
 801806c:	f8d4 8014 	ldr.w	r8, [r4, #20]
 8018070:	9101      	str	r1, [sp, #4]
 8018072:	47c0      	blx	r8
 8018074:	e9d4 2300 	ldrd	r2, r3, [r4]
 8018078:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 801807c:	9901      	ldr	r1, [sp, #4]
 801807e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8018082:	47c0      	blx	r8
 8018084:	68e3      	ldr	r3, [r4, #12]
 8018086:	6862      	ldr	r2, [r4, #4]
 8018088:	3b01      	subs	r3, #1
 801808a:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 801808e:	60e3      	str	r3, [r4, #12]
 8018090:	6834      	ldr	r4, [r6, #0]
 8018092:	68a3      	ldr	r3, [r4, #8]
 8018094:	3501      	adds	r5, #1
 8018096:	429d      	cmp	r5, r3
 8018098:	d207      	bcs.n	80180aa <rcutils_string_map_fini+0x62>
 801809a:	6822      	ldr	r2, [r4, #0]
 801809c:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 80180a0:	2800      	cmp	r0, #0
 80180a2:	d1e2      	bne.n	801806a <rcutils_string_map_fini+0x22>
 80180a4:	3501      	adds	r5, #1
 80180a6:	429d      	cmp	r5, r3
 80180a8:	d3dc      	bcc.n	8018064 <rcutils_string_map_fini+0x1c>
 80180aa:	2100      	movs	r1, #0
 80180ac:	4630      	mov	r0, r6
 80180ae:	f7ff ff19 	bl	8017ee4 <rcutils_string_map_reserve>
 80180b2:	4604      	mov	r4, r0
 80180b4:	b920      	cbnz	r0, 80180c0 <rcutils_string_map_fini+0x78>
 80180b6:	6830      	ldr	r0, [r6, #0]
 80180b8:	6943      	ldr	r3, [r0, #20]
 80180ba:	6a01      	ldr	r1, [r0, #32]
 80180bc:	4798      	blx	r3
 80180be:	6034      	str	r4, [r6, #0]
 80180c0:	4620      	mov	r0, r4
 80180c2:	b002      	add	sp, #8
 80180c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80180c8:	240b      	movs	r4, #11
 80180ca:	4620      	mov	r0, r4
 80180cc:	b002      	add	sp, #8
 80180ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80180d2:	bf00      	nop

080180d4 <rcutils_string_map_getn>:
 80180d4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80180d8:	b300      	cbz	r0, 801811c <rcutils_string_map_getn+0x48>
 80180da:	6807      	ldr	r7, [r0, #0]
 80180dc:	b1ff      	cbz	r7, 801811e <rcutils_string_map_getn+0x4a>
 80180de:	4688      	mov	r8, r1
 80180e0:	b1e1      	cbz	r1, 801811c <rcutils_string_map_getn+0x48>
 80180e2:	f8d7 a008 	ldr.w	sl, [r7, #8]
 80180e6:	683e      	ldr	r6, [r7, #0]
 80180e8:	f1ba 0f00 	cmp.w	sl, #0
 80180ec:	d016      	beq.n	801811c <rcutils_string_map_getn+0x48>
 80180ee:	4691      	mov	r9, r2
 80180f0:	3e04      	subs	r6, #4
 80180f2:	2400      	movs	r4, #0
 80180f4:	f856 5f04 	ldr.w	r5, [r6, #4]!
 80180f8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80180fc:	4628      	mov	r0, r5
 80180fe:	3401      	adds	r4, #1
 8018100:	b155      	cbz	r5, 8018118 <rcutils_string_map_getn+0x44>
 8018102:	f7e8 f897 	bl	8000234 <strlen>
 8018106:	4548      	cmp	r0, r9
 8018108:	4602      	mov	r2, r0
 801810a:	4629      	mov	r1, r5
 801810c:	bf38      	it	cc
 801810e:	464a      	movcc	r2, r9
 8018110:	4640      	mov	r0, r8
 8018112:	f003 f940 	bl	801b396 <strncmp>
 8018116:	b128      	cbz	r0, 8018124 <rcutils_string_map_getn+0x50>
 8018118:	45a2      	cmp	sl, r4
 801811a:	d1eb      	bne.n	80180f4 <rcutils_string_map_getn+0x20>
 801811c:	2700      	movs	r7, #0
 801811e:	4638      	mov	r0, r7
 8018120:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018124:	687b      	ldr	r3, [r7, #4]
 8018126:	f853 700b 	ldr.w	r7, [r3, fp]
 801812a:	4638      	mov	r0, r7
 801812c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018130 <rmw_get_zero_initialized_context>:
 8018130:	b510      	push	{r4, lr}
 8018132:	4604      	mov	r4, r0
 8018134:	3010      	adds	r0, #16
 8018136:	f7f7 fcb3 	bl	800faa0 <rmw_get_zero_initialized_init_options>
 801813a:	2300      	movs	r3, #0
 801813c:	2000      	movs	r0, #0
 801813e:	2100      	movs	r1, #0
 8018140:	e9c4 0100 	strd	r0, r1, [r4]
 8018144:	e9c4 3312 	strd	r3, r3, [r4, #72]	@ 0x48
 8018148:	60a3      	str	r3, [r4, #8]
 801814a:	4620      	mov	r0, r4
 801814c:	bd10      	pop	{r4, pc}
 801814e:	bf00      	nop

08018150 <rmw_subscription_content_filter_options_fini>:
 8018150:	b1b0      	cbz	r0, 8018180 <rmw_subscription_content_filter_options_fini+0x30>
 8018152:	b538      	push	{r3, r4, r5, lr}
 8018154:	4604      	mov	r4, r0
 8018156:	4608      	mov	r0, r1
 8018158:	460d      	mov	r5, r1
 801815a:	f7f7 fc0f 	bl	800f97c <rcutils_allocator_is_valid>
 801815e:	b168      	cbz	r0, 801817c <rmw_subscription_content_filter_options_fini+0x2c>
 8018160:	6820      	ldr	r0, [r4, #0]
 8018162:	b120      	cbz	r0, 801816e <rmw_subscription_content_filter_options_fini+0x1e>
 8018164:	686b      	ldr	r3, [r5, #4]
 8018166:	6929      	ldr	r1, [r5, #16]
 8018168:	4798      	blx	r3
 801816a:	2300      	movs	r3, #0
 801816c:	6023      	str	r3, [r4, #0]
 801816e:	1d20      	adds	r0, r4, #4
 8018170:	f002 fb4e 	bl	801a810 <rcutils_string_array_fini>
 8018174:	3800      	subs	r0, #0
 8018176:	bf18      	it	ne
 8018178:	2001      	movne	r0, #1
 801817a:	bd38      	pop	{r3, r4, r5, pc}
 801817c:	200b      	movs	r0, #11
 801817e:	bd38      	pop	{r3, r4, r5, pc}
 8018180:	200b      	movs	r0, #11
 8018182:	4770      	bx	lr

08018184 <rmw_get_default_subscription_options>:
 8018184:	2200      	movs	r2, #0
 8018186:	e9c0 2200 	strd	r2, r2, [r0]
 801818a:	6082      	str	r2, [r0, #8]
 801818c:	4770      	bx	lr
 801818e:	bf00      	nop

08018190 <rmw_time_equal>:
 8018190:	b4f0      	push	{r4, r5, r6, r7}
 8018192:	b084      	sub	sp, #16
 8018194:	ac04      	add	r4, sp, #16
 8018196:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 801819a:	4603      	mov	r3, r0
 801819c:	4924      	ldr	r1, [pc, #144]	@ (8018230 <rmw_time_equal+0xa0>)
 801819e:	9e03      	ldr	r6, [sp, #12]
 80181a0:	e9dd 5001 	ldrd	r5, r0, [sp, #4]
 80181a4:	2202      	movs	r2, #2
 80181a6:	4299      	cmp	r1, r3
 80181a8:	41aa      	sbcs	r2, r5
 80181aa:	d330      	bcc.n	801820e <rmw_time_equal+0x7e>
 80181ac:	4c21      	ldr	r4, [pc, #132]	@ (8018234 <rmw_time_equal+0xa4>)
 80181ae:	fba3 3204 	umull	r3, r2, r3, r4
 80181b2:	fb04 2205 	mla	r2, r4, r5, r2
 80181b6:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80181ba:	43dd      	mvns	r5, r3
 80181bc:	1a8c      	subs	r4, r1, r2
 80181be:	4285      	cmp	r5, r0
 80181c0:	41b4      	sbcs	r4, r6
 80181c2:	d332      	bcc.n	801822a <rmw_time_equal+0x9a>
 80181c4:	eb10 0c03 	adds.w	ip, r0, r3
 80181c8:	eb42 0106 	adc.w	r1, r2, r6
 80181cc:	e9dd 3608 	ldrd	r3, r6, [sp, #32]
 80181d0:	4817      	ldr	r0, [pc, #92]	@ (8018230 <rmw_time_equal+0xa0>)
 80181d2:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 80181d4:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80181d6:	2202      	movs	r2, #2
 80181d8:	4298      	cmp	r0, r3
 80181da:	41b2      	sbcs	r2, r6
 80181dc:	d31c      	bcc.n	8018218 <rmw_time_equal+0x88>
 80181de:	4c15      	ldr	r4, [pc, #84]	@ (8018234 <rmw_time_equal+0xa4>)
 80181e0:	fba3 3204 	umull	r3, r2, r3, r4
 80181e4:	fb04 2206 	mla	r2, r4, r6, r2
 80181e8:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 80181ec:	43de      	mvns	r6, r3
 80181ee:	1a84      	subs	r4, r0, r2
 80181f0:	42ae      	cmp	r6, r5
 80181f2:	41bc      	sbcs	r4, r7
 80181f4:	d315      	bcc.n	8018222 <rmw_time_equal+0x92>
 80181f6:	195b      	adds	r3, r3, r5
 80181f8:	eb42 0207 	adc.w	r2, r2, r7
 80181fc:	428a      	cmp	r2, r1
 80181fe:	bf08      	it	eq
 8018200:	4563      	cmpeq	r3, ip
 8018202:	bf0c      	ite	eq
 8018204:	2001      	moveq	r0, #1
 8018206:	2000      	movne	r0, #0
 8018208:	b004      	add	sp, #16
 801820a:	bcf0      	pop	{r4, r5, r6, r7}
 801820c:	4770      	bx	lr
 801820e:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8018212:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8018216:	e7d9      	b.n	80181cc <rmw_time_equal+0x3c>
 8018218:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801821c:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8018220:	e7ec      	b.n	80181fc <rmw_time_equal+0x6c>
 8018222:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8018226:	4602      	mov	r2, r0
 8018228:	e7e8      	b.n	80181fc <rmw_time_equal+0x6c>
 801822a:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 801822e:	e7cd      	b.n	80181cc <rmw_time_equal+0x3c>
 8018230:	25c17d04 	.word	0x25c17d04
 8018234:	3b9aca00 	.word	0x3b9aca00

08018238 <rmw_time_total_nsec>:
 8018238:	b470      	push	{r4, r5, r6}
 801823a:	b085      	sub	sp, #20
 801823c:	ac04      	add	r4, sp, #16
 801823e:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 8018242:	4603      	mov	r3, r0
 8018244:	4912      	ldr	r1, [pc, #72]	@ (8018290 <rmw_time_total_nsec+0x58>)
 8018246:	9e03      	ldr	r6, [sp, #12]
 8018248:	e9dd 5001 	ldrd	r5, r0, [sp, #4]
 801824c:	2202      	movs	r2, #2
 801824e:	4299      	cmp	r1, r3
 8018250:	41aa      	sbcs	r2, r5
 8018252:	d311      	bcc.n	8018278 <rmw_time_total_nsec+0x40>
 8018254:	4c0f      	ldr	r4, [pc, #60]	@ (8018294 <rmw_time_total_nsec+0x5c>)
 8018256:	fba3 3204 	umull	r3, r2, r3, r4
 801825a:	fb04 2205 	mla	r2, r4, r5, r2
 801825e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8018262:	43dd      	mvns	r5, r3
 8018264:	1a8c      	subs	r4, r1, r2
 8018266:	4285      	cmp	r5, r0
 8018268:	41b4      	sbcs	r4, r6
 801826a:	d30c      	bcc.n	8018286 <rmw_time_total_nsec+0x4e>
 801826c:	1818      	adds	r0, r3, r0
 801826e:	eb42 0106 	adc.w	r1, r2, r6
 8018272:	b005      	add	sp, #20
 8018274:	bc70      	pop	{r4, r5, r6}
 8018276:	4770      	bx	lr
 8018278:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801827c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8018280:	b005      	add	sp, #20
 8018282:	bc70      	pop	{r4, r5, r6}
 8018284:	4770      	bx	lr
 8018286:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801828a:	b005      	add	sp, #20
 801828c:	bc70      	pop	{r4, r5, r6}
 801828e:	4770      	bx	lr
 8018290:	25c17d04 	.word	0x25c17d04
 8018294:	3b9aca00 	.word	0x3b9aca00

08018298 <rmw_get_zero_initialized_message_info>:
 8018298:	b510      	push	{r4, lr}
 801829a:	2240      	movs	r2, #64	@ 0x40
 801829c:	4604      	mov	r4, r0
 801829e:	2100      	movs	r1, #0
 80182a0:	f003 f864 	bl	801b36c <memset>
 80182a4:	4620      	mov	r0, r4
 80182a6:	bd10      	pop	{r4, pc}

080182a8 <rmw_validate_full_topic_name>:
 80182a8:	2800      	cmp	r0, #0
 80182aa:	d057      	beq.n	801835c <rmw_validate_full_topic_name+0xb4>
 80182ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80182b0:	460d      	mov	r5, r1
 80182b2:	2900      	cmp	r1, #0
 80182b4:	d054      	beq.n	8018360 <rmw_validate_full_topic_name+0xb8>
 80182b6:	4616      	mov	r6, r2
 80182b8:	4604      	mov	r4, r0
 80182ba:	f7e7 ffbb 	bl	8000234 <strlen>
 80182be:	b148      	cbz	r0, 80182d4 <rmw_validate_full_topic_name+0x2c>
 80182c0:	7823      	ldrb	r3, [r4, #0]
 80182c2:	2b2f      	cmp	r3, #47	@ 0x2f
 80182c4:	d00d      	beq.n	80182e2 <rmw_validate_full_topic_name+0x3a>
 80182c6:	2302      	movs	r3, #2
 80182c8:	602b      	str	r3, [r5, #0]
 80182ca:	b13e      	cbz	r6, 80182dc <rmw_validate_full_topic_name+0x34>
 80182cc:	2000      	movs	r0, #0
 80182ce:	6030      	str	r0, [r6, #0]
 80182d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80182d4:	2301      	movs	r3, #1
 80182d6:	602b      	str	r3, [r5, #0]
 80182d8:	2e00      	cmp	r6, #0
 80182da:	d1f7      	bne.n	80182cc <rmw_validate_full_topic_name+0x24>
 80182dc:	2000      	movs	r0, #0
 80182de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80182e2:	1e43      	subs	r3, r0, #1
 80182e4:	5ce2      	ldrb	r2, [r4, r3]
 80182e6:	2a2f      	cmp	r2, #47	@ 0x2f
 80182e8:	d03c      	beq.n	8018364 <rmw_validate_full_topic_name+0xbc>
 80182ea:	1e63      	subs	r3, r4, #1
 80182ec:	eb03 0800 	add.w	r8, r3, r0
 80182f0:	f1c4 0e01 	rsb	lr, r4, #1
 80182f4:	eb0e 0703 	add.w	r7, lr, r3
 80182f8:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 80182fc:	f021 0220 	bic.w	r2, r1, #32
 8018300:	3a41      	subs	r2, #65	@ 0x41
 8018302:	2a19      	cmp	r2, #25
 8018304:	f1a1 0c2f 	sub.w	ip, r1, #47	@ 0x2f
 8018308:	d90b      	bls.n	8018322 <rmw_validate_full_topic_name+0x7a>
 801830a:	295f      	cmp	r1, #95	@ 0x5f
 801830c:	d009      	beq.n	8018322 <rmw_validate_full_topic_name+0x7a>
 801830e:	f1bc 0f0a 	cmp.w	ip, #10
 8018312:	d906      	bls.n	8018322 <rmw_validate_full_topic_name+0x7a>
 8018314:	2304      	movs	r3, #4
 8018316:	602b      	str	r3, [r5, #0]
 8018318:	2e00      	cmp	r6, #0
 801831a:	d0df      	beq.n	80182dc <rmw_validate_full_topic_name+0x34>
 801831c:	6037      	str	r7, [r6, #0]
 801831e:	2000      	movs	r0, #0
 8018320:	e7d6      	b.n	80182d0 <rmw_validate_full_topic_name+0x28>
 8018322:	4543      	cmp	r3, r8
 8018324:	d1e6      	bne.n	80182f4 <rmw_validate_full_topic_name+0x4c>
 8018326:	4f1a      	ldr	r7, [pc, #104]	@ (8018390 <rmw_validate_full_topic_name+0xe8>)
 8018328:	2301      	movs	r3, #1
 801832a:	e004      	b.n	8018336 <rmw_validate_full_topic_name+0x8e>
 801832c:	4298      	cmp	r0, r3
 801832e:	f104 0401 	add.w	r4, r4, #1
 8018332:	d91c      	bls.n	801836e <rmw_validate_full_topic_name+0xc6>
 8018334:	4613      	mov	r3, r2
 8018336:	4298      	cmp	r0, r3
 8018338:	f103 0201 	add.w	r2, r3, #1
 801833c:	d0f6      	beq.n	801832c <rmw_validate_full_topic_name+0x84>
 801833e:	7821      	ldrb	r1, [r4, #0]
 8018340:	292f      	cmp	r1, #47	@ 0x2f
 8018342:	d1f3      	bne.n	801832c <rmw_validate_full_topic_name+0x84>
 8018344:	7861      	ldrb	r1, [r4, #1]
 8018346:	292f      	cmp	r1, #47	@ 0x2f
 8018348:	d01c      	beq.n	8018384 <rmw_validate_full_topic_name+0xdc>
 801834a:	5dc9      	ldrb	r1, [r1, r7]
 801834c:	0749      	lsls	r1, r1, #29
 801834e:	d5ed      	bpl.n	801832c <rmw_validate_full_topic_name+0x84>
 8018350:	2206      	movs	r2, #6
 8018352:	602a      	str	r2, [r5, #0]
 8018354:	2e00      	cmp	r6, #0
 8018356:	d0c1      	beq.n	80182dc <rmw_validate_full_topic_name+0x34>
 8018358:	6033      	str	r3, [r6, #0]
 801835a:	e7bf      	b.n	80182dc <rmw_validate_full_topic_name+0x34>
 801835c:	200b      	movs	r0, #11
 801835e:	4770      	bx	lr
 8018360:	200b      	movs	r0, #11
 8018362:	e7b5      	b.n	80182d0 <rmw_validate_full_topic_name+0x28>
 8018364:	2203      	movs	r2, #3
 8018366:	602a      	str	r2, [r5, #0]
 8018368:	2e00      	cmp	r6, #0
 801836a:	d1f5      	bne.n	8018358 <rmw_validate_full_topic_name+0xb0>
 801836c:	e7b6      	b.n	80182dc <rmw_validate_full_topic_name+0x34>
 801836e:	28f7      	cmp	r0, #247	@ 0xf7
 8018370:	d802      	bhi.n	8018378 <rmw_validate_full_topic_name+0xd0>
 8018372:	2000      	movs	r0, #0
 8018374:	6028      	str	r0, [r5, #0]
 8018376:	e7ab      	b.n	80182d0 <rmw_validate_full_topic_name+0x28>
 8018378:	2307      	movs	r3, #7
 801837a:	602b      	str	r3, [r5, #0]
 801837c:	2e00      	cmp	r6, #0
 801837e:	d0ad      	beq.n	80182dc <rmw_validate_full_topic_name+0x34>
 8018380:	23f6      	movs	r3, #246	@ 0xf6
 8018382:	e7e9      	b.n	8018358 <rmw_validate_full_topic_name+0xb0>
 8018384:	2205      	movs	r2, #5
 8018386:	602a      	str	r2, [r5, #0]
 8018388:	2e00      	cmp	r6, #0
 801838a:	d1e5      	bne.n	8018358 <rmw_validate_full_topic_name+0xb0>
 801838c:	e7a6      	b.n	80182dc <rmw_validate_full_topic_name+0x34>
 801838e:	bf00      	nop
 8018390:	0801ebd3 	.word	0x0801ebd3

08018394 <rmw_validate_namespace_with_size>:
 8018394:	b340      	cbz	r0, 80183e8 <rmw_validate_namespace_with_size+0x54>
 8018396:	b570      	push	{r4, r5, r6, lr}
 8018398:	4614      	mov	r4, r2
 801839a:	b0c2      	sub	sp, #264	@ 0x108
 801839c:	b332      	cbz	r2, 80183ec <rmw_validate_namespace_with_size+0x58>
 801839e:	2901      	cmp	r1, #1
 80183a0:	460d      	mov	r5, r1
 80183a2:	461e      	mov	r6, r3
 80183a4:	d102      	bne.n	80183ac <rmw_validate_namespace_with_size+0x18>
 80183a6:	7803      	ldrb	r3, [r0, #0]
 80183a8:	2b2f      	cmp	r3, #47	@ 0x2f
 80183aa:	d012      	beq.n	80183d2 <rmw_validate_namespace_with_size+0x3e>
 80183ac:	aa01      	add	r2, sp, #4
 80183ae:	4669      	mov	r1, sp
 80183b0:	f7ff ff7a 	bl	80182a8 <rmw_validate_full_topic_name>
 80183b4:	b978      	cbnz	r0, 80183d6 <rmw_validate_namespace_with_size+0x42>
 80183b6:	9b00      	ldr	r3, [sp, #0]
 80183b8:	b14b      	cbz	r3, 80183ce <rmw_validate_namespace_with_size+0x3a>
 80183ba:	2b07      	cmp	r3, #7
 80183bc:	d007      	beq.n	80183ce <rmw_validate_namespace_with_size+0x3a>
 80183be:	1e5a      	subs	r2, r3, #1
 80183c0:	2a05      	cmp	r2, #5
 80183c2:	d82b      	bhi.n	801841c <rmw_validate_namespace_with_size+0x88>
 80183c4:	e8df f002 	tbb	[pc, r2]
 80183c8:	1e212427 	.word	0x1e212427
 80183cc:	141b      	.short	0x141b
 80183ce:	2df5      	cmp	r5, #245	@ 0xf5
 80183d0:	d803      	bhi.n	80183da <rmw_validate_namespace_with_size+0x46>
 80183d2:	2000      	movs	r0, #0
 80183d4:	6020      	str	r0, [r4, #0]
 80183d6:	b042      	add	sp, #264	@ 0x108
 80183d8:	bd70      	pop	{r4, r5, r6, pc}
 80183da:	2307      	movs	r3, #7
 80183dc:	6023      	str	r3, [r4, #0]
 80183de:	2e00      	cmp	r6, #0
 80183e0:	d0f9      	beq.n	80183d6 <rmw_validate_namespace_with_size+0x42>
 80183e2:	23f4      	movs	r3, #244	@ 0xf4
 80183e4:	6033      	str	r3, [r6, #0]
 80183e6:	e7f6      	b.n	80183d6 <rmw_validate_namespace_with_size+0x42>
 80183e8:	200b      	movs	r0, #11
 80183ea:	4770      	bx	lr
 80183ec:	200b      	movs	r0, #11
 80183ee:	e7f2      	b.n	80183d6 <rmw_validate_namespace_with_size+0x42>
 80183f0:	2306      	movs	r3, #6
 80183f2:	6023      	str	r3, [r4, #0]
 80183f4:	2e00      	cmp	r6, #0
 80183f6:	d0ee      	beq.n	80183d6 <rmw_validate_namespace_with_size+0x42>
 80183f8:	9b01      	ldr	r3, [sp, #4]
 80183fa:	6033      	str	r3, [r6, #0]
 80183fc:	e7eb      	b.n	80183d6 <rmw_validate_namespace_with_size+0x42>
 80183fe:	2305      	movs	r3, #5
 8018400:	6023      	str	r3, [r4, #0]
 8018402:	e7f7      	b.n	80183f4 <rmw_validate_namespace_with_size+0x60>
 8018404:	2304      	movs	r3, #4
 8018406:	6023      	str	r3, [r4, #0]
 8018408:	e7f4      	b.n	80183f4 <rmw_validate_namespace_with_size+0x60>
 801840a:	2303      	movs	r3, #3
 801840c:	6023      	str	r3, [r4, #0]
 801840e:	e7f1      	b.n	80183f4 <rmw_validate_namespace_with_size+0x60>
 8018410:	2302      	movs	r3, #2
 8018412:	6023      	str	r3, [r4, #0]
 8018414:	e7ee      	b.n	80183f4 <rmw_validate_namespace_with_size+0x60>
 8018416:	2301      	movs	r3, #1
 8018418:	6023      	str	r3, [r4, #0]
 801841a:	e7eb      	b.n	80183f4 <rmw_validate_namespace_with_size+0x60>
 801841c:	4a03      	ldr	r2, [pc, #12]	@ (801842c <rmw_validate_namespace_with_size+0x98>)
 801841e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8018422:	a802      	add	r0, sp, #8
 8018424:	f7ff fcee 	bl	8017e04 <rcutils_snprintf>
 8018428:	2001      	movs	r0, #1
 801842a:	e7d4      	b.n	80183d6 <rmw_validate_namespace_with_size+0x42>
 801842c:	0801e0b0 	.word	0x0801e0b0

08018430 <rmw_validate_namespace>:
 8018430:	b168      	cbz	r0, 801844e <rmw_validate_namespace+0x1e>
 8018432:	b570      	push	{r4, r5, r6, lr}
 8018434:	460d      	mov	r5, r1
 8018436:	4616      	mov	r6, r2
 8018438:	4604      	mov	r4, r0
 801843a:	f7e7 fefb 	bl	8000234 <strlen>
 801843e:	4633      	mov	r3, r6
 8018440:	4601      	mov	r1, r0
 8018442:	462a      	mov	r2, r5
 8018444:	4620      	mov	r0, r4
 8018446:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801844a:	f7ff bfa3 	b.w	8018394 <rmw_validate_namespace_with_size>
 801844e:	200b      	movs	r0, #11
 8018450:	4770      	bx	lr
 8018452:	bf00      	nop

08018454 <rmw_namespace_validation_result_string>:
 8018454:	2807      	cmp	r0, #7
 8018456:	bf9a      	itte	ls
 8018458:	4b02      	ldrls	r3, [pc, #8]	@ (8018464 <rmw_namespace_validation_result_string+0x10>)
 801845a:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 801845e:	4802      	ldrhi	r0, [pc, #8]	@ (8018468 <rmw_namespace_validation_result_string+0x14>)
 8018460:	4770      	bx	lr
 8018462:	bf00      	nop
 8018464:	0801ea98 	.word	0x0801ea98
 8018468:	0801e100 	.word	0x0801e100

0801846c <rmw_validate_node_name>:
 801846c:	2800      	cmp	r0, #0
 801846e:	d03b      	beq.n	80184e8 <rmw_validate_node_name+0x7c>
 8018470:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018474:	460d      	mov	r5, r1
 8018476:	2900      	cmp	r1, #0
 8018478:	d038      	beq.n	80184ec <rmw_validate_node_name+0x80>
 801847a:	4616      	mov	r6, r2
 801847c:	4604      	mov	r4, r0
 801847e:	f7e7 fed9 	bl	8000234 <strlen>
 8018482:	b1e0      	cbz	r0, 80184be <rmw_validate_node_name+0x52>
 8018484:	1e63      	subs	r3, r4, #1
 8018486:	eb03 0800 	add.w	r8, r3, r0
 801848a:	f1c4 0101 	rsb	r1, r4, #1
 801848e:	18cf      	adds	r7, r1, r3
 8018490:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 8018494:	f1ae 0230 	sub.w	r2, lr, #48	@ 0x30
 8018498:	f02e 0c20 	bic.w	ip, lr, #32
 801849c:	2a09      	cmp	r2, #9
 801849e:	f1ac 0c41 	sub.w	ip, ip, #65	@ 0x41
 80184a2:	d914      	bls.n	80184ce <rmw_validate_node_name+0x62>
 80184a4:	f1bc 0f19 	cmp.w	ip, #25
 80184a8:	d911      	bls.n	80184ce <rmw_validate_node_name+0x62>
 80184aa:	f1be 0f5f 	cmp.w	lr, #95	@ 0x5f
 80184ae:	d00e      	beq.n	80184ce <rmw_validate_node_name+0x62>
 80184b0:	2302      	movs	r3, #2
 80184b2:	602b      	str	r3, [r5, #0]
 80184b4:	b106      	cbz	r6, 80184b8 <rmw_validate_node_name+0x4c>
 80184b6:	6037      	str	r7, [r6, #0]
 80184b8:	2000      	movs	r0, #0
 80184ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80184be:	2301      	movs	r3, #1
 80184c0:	602b      	str	r3, [r5, #0]
 80184c2:	2e00      	cmp	r6, #0
 80184c4:	d0f8      	beq.n	80184b8 <rmw_validate_node_name+0x4c>
 80184c6:	2000      	movs	r0, #0
 80184c8:	6030      	str	r0, [r6, #0]
 80184ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80184ce:	4543      	cmp	r3, r8
 80184d0:	d1dd      	bne.n	801848e <rmw_validate_node_name+0x22>
 80184d2:	7822      	ldrb	r2, [r4, #0]
 80184d4:	4b0d      	ldr	r3, [pc, #52]	@ (801850c <rmw_validate_node_name+0xa0>)
 80184d6:	5cd3      	ldrb	r3, [r2, r3]
 80184d8:	f013 0304 	ands.w	r3, r3, #4
 80184dc:	d110      	bne.n	8018500 <rmw_validate_node_name+0x94>
 80184de:	28ff      	cmp	r0, #255	@ 0xff
 80184e0:	d806      	bhi.n	80184f0 <rmw_validate_node_name+0x84>
 80184e2:	602b      	str	r3, [r5, #0]
 80184e4:	4618      	mov	r0, r3
 80184e6:	e7e8      	b.n	80184ba <rmw_validate_node_name+0x4e>
 80184e8:	200b      	movs	r0, #11
 80184ea:	4770      	bx	lr
 80184ec:	200b      	movs	r0, #11
 80184ee:	e7e4      	b.n	80184ba <rmw_validate_node_name+0x4e>
 80184f0:	2204      	movs	r2, #4
 80184f2:	602a      	str	r2, [r5, #0]
 80184f4:	2e00      	cmp	r6, #0
 80184f6:	d0df      	beq.n	80184b8 <rmw_validate_node_name+0x4c>
 80184f8:	22fe      	movs	r2, #254	@ 0xfe
 80184fa:	6032      	str	r2, [r6, #0]
 80184fc:	4618      	mov	r0, r3
 80184fe:	e7dc      	b.n	80184ba <rmw_validate_node_name+0x4e>
 8018500:	2303      	movs	r3, #3
 8018502:	602b      	str	r3, [r5, #0]
 8018504:	2e00      	cmp	r6, #0
 8018506:	d1de      	bne.n	80184c6 <rmw_validate_node_name+0x5a>
 8018508:	e7d6      	b.n	80184b8 <rmw_validate_node_name+0x4c>
 801850a:	bf00      	nop
 801850c:	0801ebd3 	.word	0x0801ebd3

08018510 <rmw_node_name_validation_result_string>:
 8018510:	2804      	cmp	r0, #4
 8018512:	bf9a      	itte	ls
 8018514:	4b02      	ldrls	r3, [pc, #8]	@ (8018520 <rmw_node_name_validation_result_string+0x10>)
 8018516:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 801851a:	4802      	ldrhi	r0, [pc, #8]	@ (8018524 <rmw_node_name_validation_result_string+0x14>)
 801851c:	4770      	bx	lr
 801851e:	bf00      	nop
 8018520:	0801eab8 	.word	0x0801eab8
 8018524:	0801e2a8 	.word	0x0801e2a8

08018528 <on_status>:
 8018528:	b082      	sub	sp, #8
 801852a:	b002      	add	sp, #8
 801852c:	4770      	bx	lr
 801852e:	bf00      	nop

08018530 <on_topic>:
 8018530:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018534:	4a22      	ldr	r2, [pc, #136]	@ (80185c0 <on_topic+0x90>)
 8018536:	b094      	sub	sp, #80	@ 0x50
 8018538:	6812      	ldr	r2, [r2, #0]
 801853a:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 801853c:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 8018540:	e9cd 3112 	strd	r3, r1, [sp, #72]	@ 0x48
 8018544:	b3c2      	cbz	r2, 80185b8 <on_topic+0x88>
 8018546:	f8bd 104c 	ldrh.w	r1, [sp, #76]	@ 0x4c
 801854a:	f89d 004e 	ldrb.w	r0, [sp, #78]	@ 0x4e
 801854e:	e001      	b.n	8018554 <on_topic+0x24>
 8018550:	6852      	ldr	r2, [r2, #4]
 8018552:	b38a      	cbz	r2, 80185b8 <on_topic+0x88>
 8018554:	6894      	ldr	r4, [r2, #8]
 8018556:	8aa3      	ldrh	r3, [r4, #20]
 8018558:	428b      	cmp	r3, r1
 801855a:	d1f9      	bne.n	8018550 <on_topic+0x20>
 801855c:	7da3      	ldrb	r3, [r4, #22]
 801855e:	4283      	cmp	r3, r0
 8018560:	d1f6      	bne.n	8018550 <on_topic+0x20>
 8018562:	2248      	movs	r2, #72	@ 0x48
 8018564:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8018568:	4668      	mov	r0, sp
 801856a:	f002 ffc8 	bl	801b4fe <memcpy>
 801856e:	f104 0328 	add.w	r3, r4, #40	@ 0x28
 8018572:	cb0c      	ldmia	r3, {r2, r3}
 8018574:	4620      	mov	r0, r4
 8018576:	f7f8 fbb3 	bl	8010ce0 <rmw_uxrce_get_static_input_buffer_for_entity>
 801857a:	4607      	mov	r7, r0
 801857c:	b1e0      	cbz	r0, 80185b8 <on_topic+0x88>
 801857e:	f8d0 8008 	ldr.w	r8, [r0, #8]
 8018582:	4632      	mov	r2, r6
 8018584:	4628      	mov	r0, r5
 8018586:	f108 0110 	add.w	r1, r8, #16
 801858a:	f000 ff3b 	bl	8019404 <ucdr_deserialize_array_uint8_t>
 801858e:	b930      	cbnz	r0, 801859e <on_topic+0x6e>
 8018590:	480c      	ldr	r0, [pc, #48]	@ (80185c4 <on_topic+0x94>)
 8018592:	4639      	mov	r1, r7
 8018594:	b014      	add	sp, #80	@ 0x50
 8018596:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801859a:	f000 b8bd 	b.w	8018718 <put_memory>
 801859e:	f8c8 4814 	str.w	r4, [r8, #2068]	@ 0x814
 80185a2:	f8c8 6810 	str.w	r6, [r8, #2064]	@ 0x810
 80185a6:	f7f8 f999 	bl	80108dc <rmw_uros_epoch_nanos>
 80185aa:	f508 6202 	add.w	r2, r8, #2080	@ 0x820
 80185ae:	2305      	movs	r3, #5
 80185b0:	e942 0102 	strd	r0, r1, [r2, #-8]
 80185b4:	f888 3820 	strb.w	r3, [r8, #2080]	@ 0x820
 80185b8:	b014      	add	sp, #80	@ 0x50
 80185ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80185be:	bf00      	nop
 80185c0:	2000b534 	.word	0x2000b534
 80185c4:	2000b524 	.word	0x2000b524

080185c8 <on_request>:
 80185c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80185cc:	4823      	ldr	r0, [pc, #140]	@ (801865c <on_request+0x94>)
 80185ce:	b094      	sub	sp, #80	@ 0x50
 80185d0:	6800      	ldr	r0, [r0, #0]
 80185d2:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 80185d4:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 80185d8:	9113      	str	r1, [sp, #76]	@ 0x4c
 80185da:	2800      	cmp	r0, #0
 80185dc:	d03b      	beq.n	8018656 <on_request+0x8e>
 80185de:	461d      	mov	r5, r3
 80185e0:	e001      	b.n	80185e6 <on_request+0x1e>
 80185e2:	6840      	ldr	r0, [r0, #4]
 80185e4:	b3b8      	cbz	r0, 8018656 <on_request+0x8e>
 80185e6:	6884      	ldr	r4, [r0, #8]
 80185e8:	8b21      	ldrh	r1, [r4, #24]
 80185ea:	4291      	cmp	r1, r2
 80185ec:	d1f9      	bne.n	80185e2 <on_request+0x1a>
 80185ee:	2248      	movs	r2, #72	@ 0x48
 80185f0:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 80185f4:	4668      	mov	r0, sp
 80185f6:	f002 ff82 	bl	801b4fe <memcpy>
 80185fa:	f104 0320 	add.w	r3, r4, #32
 80185fe:	cb0c      	ldmia	r3, {r2, r3}
 8018600:	4620      	mov	r0, r4
 8018602:	f7f8 fb6d 	bl	8010ce0 <rmw_uxrce_get_static_input_buffer_for_entity>
 8018606:	4680      	mov	r8, r0
 8018608:	b328      	cbz	r0, 8018656 <on_request+0x8e>
 801860a:	4638      	mov	r0, r7
 801860c:	f8d8 7008 	ldr.w	r7, [r8, #8]
 8018610:	4632      	mov	r2, r6
 8018612:	f107 0110 	add.w	r1, r7, #16
 8018616:	f000 fef5 	bl	8019404 <ucdr_deserialize_array_uint8_t>
 801861a:	b930      	cbnz	r0, 801862a <on_request+0x62>
 801861c:	4810      	ldr	r0, [pc, #64]	@ (8018660 <on_request+0x98>)
 801861e:	4641      	mov	r1, r8
 8018620:	b014      	add	sp, #80	@ 0x50
 8018622:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018626:	f000 b877 	b.w	8018718 <put_memory>
 801862a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801862c:	f607 0c28 	addw	ip, r7, #2088	@ 0x828
 8018630:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 8018634:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 8018638:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801863c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8018640:	e88c 0003 	stmia.w	ip, {r0, r1}
 8018644:	f7f8 f94a 	bl	80108dc <rmw_uros_epoch_nanos>
 8018648:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 801864c:	2303      	movs	r3, #3
 801864e:	e942 0102 	strd	r0, r1, [r2, #-8]
 8018652:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 8018656:	b014      	add	sp, #80	@ 0x50
 8018658:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801865c:	2000b504 	.word	0x2000b504
 8018660:	2000b524 	.word	0x2000b524

08018664 <on_reply>:
 8018664:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018668:	4821      	ldr	r0, [pc, #132]	@ (80186f0 <on_reply+0x8c>)
 801866a:	b094      	sub	sp, #80	@ 0x50
 801866c:	6800      	ldr	r0, [r0, #0]
 801866e:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 8018670:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 8018674:	9113      	str	r1, [sp, #76]	@ 0x4c
 8018676:	b3b8      	cbz	r0, 80186e8 <on_reply+0x84>
 8018678:	461d      	mov	r5, r3
 801867a:	e001      	b.n	8018680 <on_reply+0x1c>
 801867c:	6840      	ldr	r0, [r0, #4]
 801867e:	b398      	cbz	r0, 80186e8 <on_reply+0x84>
 8018680:	6884      	ldr	r4, [r0, #8]
 8018682:	8b21      	ldrh	r1, [r4, #24]
 8018684:	4291      	cmp	r1, r2
 8018686:	d1f9      	bne.n	801867c <on_reply+0x18>
 8018688:	2248      	movs	r2, #72	@ 0x48
 801868a:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 801868e:	4668      	mov	r0, sp
 8018690:	f002 ff35 	bl	801b4fe <memcpy>
 8018694:	f104 0320 	add.w	r3, r4, #32
 8018698:	cb0c      	ldmia	r3, {r2, r3}
 801869a:	4620      	mov	r0, r4
 801869c:	f7f8 fb20 	bl	8010ce0 <rmw_uxrce_get_static_input_buffer_for_entity>
 80186a0:	4680      	mov	r8, r0
 80186a2:	b308      	cbz	r0, 80186e8 <on_reply+0x84>
 80186a4:	4638      	mov	r0, r7
 80186a6:	f8d8 7008 	ldr.w	r7, [r8, #8]
 80186aa:	4632      	mov	r2, r6
 80186ac:	f107 0110 	add.w	r1, r7, #16
 80186b0:	f000 fea8 	bl	8019404 <ucdr_deserialize_array_uint8_t>
 80186b4:	b930      	cbnz	r0, 80186c4 <on_reply+0x60>
 80186b6:	480f      	ldr	r0, [pc, #60]	@ (80186f4 <on_reply+0x90>)
 80186b8:	4641      	mov	r1, r8
 80186ba:	b014      	add	sp, #80	@ 0x50
 80186bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80186c0:	f000 b82a 	b.w	8018718 <put_memory>
 80186c4:	2200      	movs	r2, #0
 80186c6:	f8c7 282c 	str.w	r2, [r7, #2092]	@ 0x82c
 80186ca:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 80186ce:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 80186d2:	f8c7 5828 	str.w	r5, [r7, #2088]	@ 0x828
 80186d6:	f7f8 f901 	bl	80108dc <rmw_uros_epoch_nanos>
 80186da:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 80186de:	2304      	movs	r3, #4
 80186e0:	e942 0102 	strd	r0, r1, [r2, #-8]
 80186e4:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 80186e8:	b014      	add	sp, #80	@ 0x50
 80186ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80186ee:	bf00      	nop
 80186f0:	20006c14 	.word	0x20006c14
 80186f4:	2000b524 	.word	0x2000b524

080186f8 <get_memory>:
 80186f8:	4603      	mov	r3, r0
 80186fa:	6840      	ldr	r0, [r0, #4]
 80186fc:	b158      	cbz	r0, 8018716 <get_memory+0x1e>
 80186fe:	6842      	ldr	r2, [r0, #4]
 8018700:	605a      	str	r2, [r3, #4]
 8018702:	b10a      	cbz	r2, 8018708 <get_memory+0x10>
 8018704:	2100      	movs	r1, #0
 8018706:	6011      	str	r1, [r2, #0]
 8018708:	681a      	ldr	r2, [r3, #0]
 801870a:	6042      	str	r2, [r0, #4]
 801870c:	b102      	cbz	r2, 8018710 <get_memory+0x18>
 801870e:	6010      	str	r0, [r2, #0]
 8018710:	2200      	movs	r2, #0
 8018712:	6002      	str	r2, [r0, #0]
 8018714:	6018      	str	r0, [r3, #0]
 8018716:	4770      	bx	lr

08018718 <put_memory>:
 8018718:	680b      	ldr	r3, [r1, #0]
 801871a:	b10b      	cbz	r3, 8018720 <put_memory+0x8>
 801871c:	684a      	ldr	r2, [r1, #4]
 801871e:	605a      	str	r2, [r3, #4]
 8018720:	684a      	ldr	r2, [r1, #4]
 8018722:	b102      	cbz	r2, 8018726 <put_memory+0xe>
 8018724:	6013      	str	r3, [r2, #0]
 8018726:	6803      	ldr	r3, [r0, #0]
 8018728:	428b      	cmp	r3, r1
 801872a:	6843      	ldr	r3, [r0, #4]
 801872c:	bf08      	it	eq
 801872e:	6002      	streq	r2, [r0, #0]
 8018730:	604b      	str	r3, [r1, #4]
 8018732:	b103      	cbz	r3, 8018736 <put_memory+0x1e>
 8018734:	6019      	str	r1, [r3, #0]
 8018736:	2300      	movs	r3, #0
 8018738:	600b      	str	r3, [r1, #0]
 801873a:	6041      	str	r1, [r0, #4]
 801873c:	4770      	bx	lr
 801873e:	bf00      	nop

08018740 <rmw_destroy_client>:
 8018740:	b570      	push	{r4, r5, r6, lr}
 8018742:	b128      	cbz	r0, 8018750 <rmw_destroy_client+0x10>
 8018744:	4604      	mov	r4, r0
 8018746:	6800      	ldr	r0, [r0, #0]
 8018748:	460d      	mov	r5, r1
 801874a:	f7f8 fc3f 	bl	8010fcc <is_uxrce_rmw_identifier_valid>
 801874e:	b910      	cbnz	r0, 8018756 <rmw_destroy_client+0x16>
 8018750:	2401      	movs	r4, #1
 8018752:	4620      	mov	r0, r4
 8018754:	bd70      	pop	{r4, r5, r6, pc}
 8018756:	6863      	ldr	r3, [r4, #4]
 8018758:	2b00      	cmp	r3, #0
 801875a:	d0f9      	beq.n	8018750 <rmw_destroy_client+0x10>
 801875c:	2d00      	cmp	r5, #0
 801875e:	d0f7      	beq.n	8018750 <rmw_destroy_client+0x10>
 8018760:	6828      	ldr	r0, [r5, #0]
 8018762:	f7f8 fc33 	bl	8010fcc <is_uxrce_rmw_identifier_valid>
 8018766:	2800      	cmp	r0, #0
 8018768:	d0f2      	beq.n	8018750 <rmw_destroy_client+0x10>
 801876a:	686e      	ldr	r6, [r5, #4]
 801876c:	2e00      	cmp	r6, #0
 801876e:	d0ef      	beq.n	8018750 <rmw_destroy_client+0x10>
 8018770:	6864      	ldr	r4, [r4, #4]
 8018772:	6932      	ldr	r2, [r6, #16]
 8018774:	6920      	ldr	r0, [r4, #16]
 8018776:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801877a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801877e:	6819      	ldr	r1, [r3, #0]
 8018780:	f7f9 fa3c 	bl	8011bfc <uxr_buffer_cancel_data>
 8018784:	4602      	mov	r2, r0
 8018786:	6920      	ldr	r0, [r4, #16]
 8018788:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801878c:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8018790:	f7f8 fb9c 	bl	8010ecc <run_xrce_session>
 8018794:	6920      	ldr	r0, [r4, #16]
 8018796:	6932      	ldr	r2, [r6, #16]
 8018798:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801879c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80187a0:	6819      	ldr	r1, [r3, #0]
 80187a2:	f7f8 fefd 	bl	80115a0 <uxr_buffer_delete_entity>
 80187a6:	4602      	mov	r2, r0
 80187a8:	6920      	ldr	r0, [r4, #16]
 80187aa:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80187ae:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80187b2:	f7f8 fb8b 	bl	8010ecc <run_xrce_session>
 80187b6:	2800      	cmp	r0, #0
 80187b8:	4628      	mov	r0, r5
 80187ba:	bf14      	ite	ne
 80187bc:	2400      	movne	r4, #0
 80187be:	2402      	moveq	r4, #2
 80187c0:	f7f8 fa6c 	bl	8010c9c <rmw_uxrce_fini_client_memory>
 80187c4:	e7c5      	b.n	8018752 <rmw_destroy_client+0x12>
 80187c6:	bf00      	nop

080187c8 <rmw_get_implementation_identifier>:
 80187c8:	4b01      	ldr	r3, [pc, #4]	@ (80187d0 <rmw_get_implementation_identifier+0x8>)
 80187ca:	6818      	ldr	r0, [r3, #0]
 80187cc:	4770      	bx	lr
 80187ce:	bf00      	nop
 80187d0:	0801eacc 	.word	0x0801eacc

080187d4 <create_topic>:
 80187d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80187d8:	4605      	mov	r5, r0
 80187da:	b084      	sub	sp, #16
 80187dc:	4822      	ldr	r0, [pc, #136]	@ (8018868 <create_topic+0x94>)
 80187de:	460f      	mov	r7, r1
 80187e0:	4616      	mov	r6, r2
 80187e2:	f7ff ff89 	bl	80186f8 <get_memory>
 80187e6:	4604      	mov	r4, r0
 80187e8:	2800      	cmp	r0, #0
 80187ea:	d039      	beq.n	8018860 <create_topic+0x8c>
 80187ec:	692b      	ldr	r3, [r5, #16]
 80187ee:	6884      	ldr	r4, [r0, #8]
 80187f0:	f8df 807c 	ldr.w	r8, [pc, #124]	@ 8018870 <create_topic+0x9c>
 80187f4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80187f8:	e9c4 6505 	strd	r6, r5, [r4, #20]
 80187fc:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	@ 0x596
 8018800:	1c42      	adds	r2, r0, #1
 8018802:	2102      	movs	r1, #2
 8018804:	f8a3 2596 	strh.w	r2, [r3, #1430]	@ 0x596
 8018808:	f7f9 f98e 	bl	8011b28 <uxr_object_id>
 801880c:	223c      	movs	r2, #60	@ 0x3c
 801880e:	6120      	str	r0, [r4, #16]
 8018810:	4641      	mov	r1, r8
 8018812:	4638      	mov	r0, r7
 8018814:	f7f8 fbc0 	bl	8010f98 <generate_topic_name>
 8018818:	b1f0      	cbz	r0, 8018858 <create_topic+0x84>
 801881a:	4f14      	ldr	r7, [pc, #80]	@ (801886c <create_topic+0x98>)
 801881c:	4630      	mov	r0, r6
 801881e:	2264      	movs	r2, #100	@ 0x64
 8018820:	4639      	mov	r1, r7
 8018822:	f7f8 fb89 	bl	8010f38 <generate_type_name>
 8018826:	b1b8      	cbz	r0, 8018858 <create_topic+0x84>
 8018828:	6928      	ldr	r0, [r5, #16]
 801882a:	2306      	movs	r3, #6
 801882c:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 8018830:	f8cd 8000 	str.w	r8, [sp]
 8018834:	e9cd 7301 	strd	r7, r3, [sp, #4]
 8018838:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801883c:	6811      	ldr	r1, [r2, #0]
 801883e:	696b      	ldr	r3, [r5, #20]
 8018840:	6922      	ldr	r2, [r4, #16]
 8018842:	f7f8 ff2b 	bl	801169c <uxr_buffer_create_topic_bin>
 8018846:	4602      	mov	r2, r0
 8018848:	6928      	ldr	r0, [r5, #16]
 801884a:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 801884e:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8018852:	f7f8 fb3b 	bl	8010ecc <run_xrce_session>
 8018856:	b918      	cbnz	r0, 8018860 <create_topic+0x8c>
 8018858:	4620      	mov	r0, r4
 801885a:	f7f8 fa35 	bl	8010cc8 <rmw_uxrce_fini_topic_memory>
 801885e:	2400      	movs	r4, #0
 8018860:	4620      	mov	r0, r4
 8018862:	b004      	add	sp, #16
 8018864:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018868:	2000b544 	.word	0x2000b544
 801886c:	2000b638 	.word	0x2000b638
 8018870:	2000b5fc 	.word	0x2000b5fc

08018874 <destroy_topic>:
 8018874:	b538      	push	{r3, r4, r5, lr}
 8018876:	6985      	ldr	r5, [r0, #24]
 8018878:	b1d5      	cbz	r5, 80188b0 <destroy_topic+0x3c>
 801887a:	4604      	mov	r4, r0
 801887c:	6928      	ldr	r0, [r5, #16]
 801887e:	6922      	ldr	r2, [r4, #16]
 8018880:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8018884:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8018888:	6819      	ldr	r1, [r3, #0]
 801888a:	f7f8 fe89 	bl	80115a0 <uxr_buffer_delete_entity>
 801888e:	4602      	mov	r2, r0
 8018890:	6928      	ldr	r0, [r5, #16]
 8018892:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8018896:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801889a:	f7f8 fb17 	bl	8010ecc <run_xrce_session>
 801889e:	2800      	cmp	r0, #0
 80188a0:	4620      	mov	r0, r4
 80188a2:	bf14      	ite	ne
 80188a4:	2400      	movne	r4, #0
 80188a6:	2402      	moveq	r4, #2
 80188a8:	f7f8 fa0e 	bl	8010cc8 <rmw_uxrce_fini_topic_memory>
 80188ac:	4620      	mov	r0, r4
 80188ae:	bd38      	pop	{r3, r4, r5, pc}
 80188b0:	2401      	movs	r4, #1
 80188b2:	4620      	mov	r0, r4
 80188b4:	bd38      	pop	{r3, r4, r5, pc}
 80188b6:	bf00      	nop

080188b8 <rmw_send_request>:
 80188b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80188bc:	4604      	mov	r4, r0
 80188be:	6800      	ldr	r0, [r0, #0]
 80188c0:	b08b      	sub	sp, #44	@ 0x2c
 80188c2:	460e      	mov	r6, r1
 80188c4:	4615      	mov	r5, r2
 80188c6:	b128      	cbz	r0, 80188d4 <rmw_send_request+0x1c>
 80188c8:	4b21      	ldr	r3, [pc, #132]	@ (8018950 <rmw_send_request+0x98>)
 80188ca:	6819      	ldr	r1, [r3, #0]
 80188cc:	f7e7 fca8 	bl	8000220 <strcmp>
 80188d0:	2800      	cmp	r0, #0
 80188d2:	d139      	bne.n	8018948 <rmw_send_request+0x90>
 80188d4:	6864      	ldr	r4, [r4, #4]
 80188d6:	6963      	ldr	r3, [r4, #20]
 80188d8:	f8d4 8078 	ldr.w	r8, [r4, #120]	@ 0x78
 80188dc:	689b      	ldr	r3, [r3, #8]
 80188de:	4798      	blx	r3
 80188e0:	f8d0 9004 	ldr.w	r9, [r0, #4]
 80188e4:	4630      	mov	r0, r6
 80188e6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80188ea:	4798      	blx	r3
 80188ec:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80188f0:	9000      	str	r0, [sp, #0]
 80188f2:	6922      	ldr	r2, [r4, #16]
 80188f4:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 80188f6:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 80188fa:	ab02      	add	r3, sp, #8
 80188fc:	f7fb fa26 	bl	8013d4c <uxr_prepare_output_stream>
 8018900:	2700      	movs	r7, #0
 8018902:	6028      	str	r0, [r5, #0]
 8018904:	606f      	str	r7, [r5, #4]
 8018906:	b198      	cbz	r0, 8018930 <rmw_send_request+0x78>
 8018908:	f8d9 3008 	ldr.w	r3, [r9, #8]
 801890c:	a902      	add	r1, sp, #8
 801890e:	4630      	mov	r0, r6
 8018910:	4798      	blx	r3
 8018912:	f894 3072 	ldrb.w	r3, [r4, #114]	@ 0x72
 8018916:	f8d8 0010 	ldr.w	r0, [r8, #16]
 801891a:	2b01      	cmp	r3, #1
 801891c:	d00c      	beq.n	8018938 <rmw_send_request+0x80>
 801891e:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 8018920:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8018924:	f7f9 ff40 	bl	80127a8 <uxr_run_session_until_confirm_delivery>
 8018928:	4638      	mov	r0, r7
 801892a:	b00b      	add	sp, #44	@ 0x2c
 801892c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018930:	2001      	movs	r0, #1
 8018932:	b00b      	add	sp, #44	@ 0x2c
 8018934:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018938:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801893c:	f7f9 fb74 	bl	8012028 <uxr_flash_output_streams>
 8018940:	4638      	mov	r0, r7
 8018942:	b00b      	add	sp, #44	@ 0x2c
 8018944:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018948:	200c      	movs	r0, #12
 801894a:	b00b      	add	sp, #44	@ 0x2c
 801894c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018950:	0801eacc 	.word	0x0801eacc

08018954 <rmw_take_request>:
 8018954:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018958:	4605      	mov	r5, r0
 801895a:	6800      	ldr	r0, [r0, #0]
 801895c:	b089      	sub	sp, #36	@ 0x24
 801895e:	460c      	mov	r4, r1
 8018960:	4690      	mov	r8, r2
 8018962:	461e      	mov	r6, r3
 8018964:	b128      	cbz	r0, 8018972 <rmw_take_request+0x1e>
 8018966:	4b28      	ldr	r3, [pc, #160]	@ (8018a08 <rmw_take_request+0xb4>)
 8018968:	6819      	ldr	r1, [r3, #0]
 801896a:	f7e7 fc59 	bl	8000220 <strcmp>
 801896e:	2800      	cmp	r0, #0
 8018970:	d146      	bne.n	8018a00 <rmw_take_request+0xac>
 8018972:	b10e      	cbz	r6, 8018978 <rmw_take_request+0x24>
 8018974:	2300      	movs	r3, #0
 8018976:	7033      	strb	r3, [r6, #0]
 8018978:	f8d5 9004 	ldr.w	r9, [r5, #4]
 801897c:	f7f8 fa28 	bl	8010dd0 <rmw_uxrce_clean_expired_static_input_buffer>
 8018980:	4648      	mov	r0, r9
 8018982:	f7f8 f9fd 	bl	8010d80 <rmw_uxrce_find_static_input_buffer_by_owner>
 8018986:	4607      	mov	r7, r0
 8018988:	b3b0      	cbz	r0, 80189f8 <rmw_take_request+0xa4>
 801898a:	6885      	ldr	r5, [r0, #8]
 801898c:	f8d5 3838 	ldr.w	r3, [r5, #2104]	@ 0x838
 8018990:	f8d5 283c 	ldr.w	r2, [r5, #2108]	@ 0x83c
 8018994:	e9c4 2308 	strd	r2, r3, [r4, #32]
 8018998:	f895 3837 	ldrb.w	r3, [r5, #2103]	@ 0x837
 801899c:	7423      	strb	r3, [r4, #16]
 801899e:	f8b5 3834 	ldrh.w	r3, [r5, #2100]	@ 0x834
 80189a2:	f895 2836 	ldrb.w	r2, [r5, #2102]	@ 0x836
 80189a6:	74e2      	strb	r2, [r4, #19]
 80189a8:	f8a4 3011 	strh.w	r3, [r4, #17]
 80189ac:	f8d5 2828 	ldr.w	r2, [r5, #2088]	@ 0x828
 80189b0:	f8d5 382c 	ldr.w	r3, [r5, #2092]	@ 0x82c
 80189b4:	f8d5 1830 	ldr.w	r1, [r5, #2096]	@ 0x830
 80189b8:	61e1      	str	r1, [r4, #28]
 80189ba:	6162      	str	r2, [r4, #20]
 80189bc:	61a3      	str	r3, [r4, #24]
 80189be:	f8d9 3014 	ldr.w	r3, [r9, #20]
 80189c2:	689b      	ldr	r3, [r3, #8]
 80189c4:	4798      	blx	r3
 80189c6:	6844      	ldr	r4, [r0, #4]
 80189c8:	f8d5 2810 	ldr.w	r2, [r5, #2064]	@ 0x810
 80189cc:	f105 0110 	add.w	r1, r5, #16
 80189d0:	4668      	mov	r0, sp
 80189d2:	f7f5 fdb5 	bl	800e540 <ucdr_init_buffer>
 80189d6:	68e3      	ldr	r3, [r4, #12]
 80189d8:	4641      	mov	r1, r8
 80189da:	4668      	mov	r0, sp
 80189dc:	4798      	blx	r3
 80189de:	4639      	mov	r1, r7
 80189e0:	4604      	mov	r4, r0
 80189e2:	480a      	ldr	r0, [pc, #40]	@ (8018a0c <rmw_take_request+0xb8>)
 80189e4:	f7ff fe98 	bl	8018718 <put_memory>
 80189e8:	b106      	cbz	r6, 80189ec <rmw_take_request+0x98>
 80189ea:	7034      	strb	r4, [r6, #0]
 80189ec:	f084 0001 	eor.w	r0, r4, #1
 80189f0:	b2c0      	uxtb	r0, r0
 80189f2:	b009      	add	sp, #36	@ 0x24
 80189f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80189f8:	2001      	movs	r0, #1
 80189fa:	b009      	add	sp, #36	@ 0x24
 80189fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018a00:	200c      	movs	r0, #12
 8018a02:	b009      	add	sp, #36	@ 0x24
 8018a04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018a08:	0801eacc 	.word	0x0801eacc
 8018a0c:	2000b524 	.word	0x2000b524

08018a10 <rmw_send_response>:
 8018a10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018a12:	4605      	mov	r5, r0
 8018a14:	6800      	ldr	r0, [r0, #0]
 8018a16:	b091      	sub	sp, #68	@ 0x44
 8018a18:	460c      	mov	r4, r1
 8018a1a:	4616      	mov	r6, r2
 8018a1c:	b128      	cbz	r0, 8018a2a <rmw_send_response+0x1a>
 8018a1e:	4b29      	ldr	r3, [pc, #164]	@ (8018ac4 <rmw_send_response+0xb4>)
 8018a20:	6819      	ldr	r1, [r3, #0]
 8018a22:	f7e7 fbfd 	bl	8000220 <strcmp>
 8018a26:	2800      	cmp	r0, #0
 8018a28:	d141      	bne.n	8018aae <rmw_send_response+0x9e>
 8018a2a:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 8018a2e:	9306      	str	r3, [sp, #24]
 8018a30:	4623      	mov	r3, r4
 8018a32:	9207      	str	r2, [sp, #28]
 8018a34:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018a38:	686d      	ldr	r5, [r5, #4]
 8018a3a:	789b      	ldrb	r3, [r3, #2]
 8018a3c:	68a1      	ldr	r1, [r4, #8]
 8018a3e:	f88d 2017 	strb.w	r2, [sp, #23]
 8018a42:	f88d 3016 	strb.w	r3, [sp, #22]
 8018a46:	68e2      	ldr	r2, [r4, #12]
 8018a48:	f8b4 3001 	ldrh.w	r3, [r4, #1]
 8018a4c:	6860      	ldr	r0, [r4, #4]
 8018a4e:	f8ad 3014 	strh.w	r3, [sp, #20]
 8018a52:	ab02      	add	r3, sp, #8
 8018a54:	c307      	stmia	r3!, {r0, r1, r2}
 8018a56:	696b      	ldr	r3, [r5, #20]
 8018a58:	6faf      	ldr	r7, [r5, #120]	@ 0x78
 8018a5a:	68db      	ldr	r3, [r3, #12]
 8018a5c:	4798      	blx	r3
 8018a5e:	6844      	ldr	r4, [r0, #4]
 8018a60:	4630      	mov	r0, r6
 8018a62:	6923      	ldr	r3, [r4, #16]
 8018a64:	4798      	blx	r3
 8018a66:	f100 0318 	add.w	r3, r0, #24
 8018a6a:	6938      	ldr	r0, [r7, #16]
 8018a6c:	9300      	str	r3, [sp, #0]
 8018a6e:	692a      	ldr	r2, [r5, #16]
 8018a70:	6f29      	ldr	r1, [r5, #112]	@ 0x70
 8018a72:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8018a76:	ab08      	add	r3, sp, #32
 8018a78:	f7fb f968 	bl	8013d4c <uxr_prepare_output_stream>
 8018a7c:	b910      	cbnz	r0, 8018a84 <rmw_send_response+0x74>
 8018a7e:	2001      	movs	r0, #1
 8018a80:	b011      	add	sp, #68	@ 0x44
 8018a82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018a84:	a902      	add	r1, sp, #8
 8018a86:	a808      	add	r0, sp, #32
 8018a88:	f7fc faa6 	bl	8014fd8 <uxr_serialize_SampleIdentity>
 8018a8c:	68a3      	ldr	r3, [r4, #8]
 8018a8e:	a908      	add	r1, sp, #32
 8018a90:	4630      	mov	r0, r6
 8018a92:	4798      	blx	r3
 8018a94:	f895 3072 	ldrb.w	r3, [r5, #114]	@ 0x72
 8018a98:	6938      	ldr	r0, [r7, #16]
 8018a9a:	2b01      	cmp	r3, #1
 8018a9c:	d00a      	beq.n	8018ab4 <rmw_send_response+0xa4>
 8018a9e:	6f69      	ldr	r1, [r5, #116]	@ 0x74
 8018aa0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8018aa4:	f7f9 fe80 	bl	80127a8 <uxr_run_session_until_confirm_delivery>
 8018aa8:	2000      	movs	r0, #0
 8018aaa:	b011      	add	sp, #68	@ 0x44
 8018aac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018aae:	200c      	movs	r0, #12
 8018ab0:	b011      	add	sp, #68	@ 0x44
 8018ab2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018ab4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8018ab8:	f7f9 fab6 	bl	8012028 <uxr_flash_output_streams>
 8018abc:	2000      	movs	r0, #0
 8018abe:	b011      	add	sp, #68	@ 0x44
 8018ac0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018ac2:	bf00      	nop
 8018ac4:	0801eacc 	.word	0x0801eacc

08018ac8 <rmw_take_response>:
 8018ac8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018acc:	4604      	mov	r4, r0
 8018ace:	6800      	ldr	r0, [r0, #0]
 8018ad0:	b088      	sub	sp, #32
 8018ad2:	4688      	mov	r8, r1
 8018ad4:	4617      	mov	r7, r2
 8018ad6:	461d      	mov	r5, r3
 8018ad8:	b120      	cbz	r0, 8018ae4 <rmw_take_response+0x1c>
 8018ada:	4b1e      	ldr	r3, [pc, #120]	@ (8018b54 <rmw_take_response+0x8c>)
 8018adc:	6819      	ldr	r1, [r3, #0]
 8018ade:	f7e7 fb9f 	bl	8000220 <strcmp>
 8018ae2:	bb78      	cbnz	r0, 8018b44 <rmw_take_response+0x7c>
 8018ae4:	b10d      	cbz	r5, 8018aea <rmw_take_response+0x22>
 8018ae6:	2300      	movs	r3, #0
 8018ae8:	702b      	strb	r3, [r5, #0]
 8018aea:	6864      	ldr	r4, [r4, #4]
 8018aec:	f7f8 f970 	bl	8010dd0 <rmw_uxrce_clean_expired_static_input_buffer>
 8018af0:	4620      	mov	r0, r4
 8018af2:	f7f8 f945 	bl	8010d80 <rmw_uxrce_find_static_input_buffer_by_owner>
 8018af6:	4606      	mov	r6, r0
 8018af8:	b340      	cbz	r0, 8018b4c <rmw_take_response+0x84>
 8018afa:	6963      	ldr	r3, [r4, #20]
 8018afc:	6884      	ldr	r4, [r0, #8]
 8018afe:	68db      	ldr	r3, [r3, #12]
 8018b00:	f504 6203 	add.w	r2, r4, #2096	@ 0x830
 8018b04:	e952 0102 	ldrd	r0, r1, [r2, #-8]
 8018b08:	e9c8 0108 	strd	r0, r1, [r8, #32]
 8018b0c:	4798      	blx	r3
 8018b0e:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8018b12:	f8d4 2810 	ldr.w	r2, [r4, #2064]	@ 0x810
 8018b16:	f104 0110 	add.w	r1, r4, #16
 8018b1a:	4668      	mov	r0, sp
 8018b1c:	f7f5 fd10 	bl	800e540 <ucdr_init_buffer>
 8018b20:	4639      	mov	r1, r7
 8018b22:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8018b26:	4668      	mov	r0, sp
 8018b28:	4798      	blx	r3
 8018b2a:	4631      	mov	r1, r6
 8018b2c:	4604      	mov	r4, r0
 8018b2e:	480a      	ldr	r0, [pc, #40]	@ (8018b58 <rmw_take_response+0x90>)
 8018b30:	f7ff fdf2 	bl	8018718 <put_memory>
 8018b34:	b105      	cbz	r5, 8018b38 <rmw_take_response+0x70>
 8018b36:	702c      	strb	r4, [r5, #0]
 8018b38:	f084 0001 	eor.w	r0, r4, #1
 8018b3c:	b2c0      	uxtb	r0, r0
 8018b3e:	b008      	add	sp, #32
 8018b40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018b44:	200c      	movs	r0, #12
 8018b46:	b008      	add	sp, #32
 8018b48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018b4c:	2001      	movs	r0, #1
 8018b4e:	b008      	add	sp, #32
 8018b50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018b54:	0801eacc 	.word	0x0801eacc
 8018b58:	2000b524 	.word	0x2000b524

08018b5c <rmw_take_with_info>:
 8018b5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018b5e:	4604      	mov	r4, r0
 8018b60:	6800      	ldr	r0, [r0, #0]
 8018b62:	b089      	sub	sp, #36	@ 0x24
 8018b64:	460f      	mov	r7, r1
 8018b66:	4615      	mov	r5, r2
 8018b68:	b128      	cbz	r0, 8018b76 <rmw_take_with_info+0x1a>
 8018b6a:	4b24      	ldr	r3, [pc, #144]	@ (8018bfc <rmw_take_with_info+0xa0>)
 8018b6c:	6819      	ldr	r1, [r3, #0]
 8018b6e:	f7e7 fb57 	bl	8000220 <strcmp>
 8018b72:	2800      	cmp	r0, #0
 8018b74:	d13e      	bne.n	8018bf4 <rmw_take_with_info+0x98>
 8018b76:	b305      	cbz	r5, 8018bba <rmw_take_with_info+0x5e>
 8018b78:	6864      	ldr	r4, [r4, #4]
 8018b7a:	2300      	movs	r3, #0
 8018b7c:	702b      	strb	r3, [r5, #0]
 8018b7e:	f7f8 f927 	bl	8010dd0 <rmw_uxrce_clean_expired_static_input_buffer>
 8018b82:	4620      	mov	r0, r4
 8018b84:	f7f8 f8fc 	bl	8010d80 <rmw_uxrce_find_static_input_buffer_by_owner>
 8018b88:	4606      	mov	r6, r0
 8018b8a:	b1f0      	cbz	r0, 8018bca <rmw_take_with_info+0x6e>
 8018b8c:	6881      	ldr	r1, [r0, #8]
 8018b8e:	4668      	mov	r0, sp
 8018b90:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 8018b94:	3110      	adds	r1, #16
 8018b96:	f7f5 fcd3 	bl	800e540 <ucdr_init_buffer>
 8018b9a:	69a3      	ldr	r3, [r4, #24]
 8018b9c:	4639      	mov	r1, r7
 8018b9e:	68db      	ldr	r3, [r3, #12]
 8018ba0:	4668      	mov	r0, sp
 8018ba2:	4798      	blx	r3
 8018ba4:	4631      	mov	r1, r6
 8018ba6:	4604      	mov	r4, r0
 8018ba8:	4815      	ldr	r0, [pc, #84]	@ (8018c00 <rmw_take_with_info+0xa4>)
 8018baa:	f7ff fdb5 	bl	8018718 <put_memory>
 8018bae:	702c      	strb	r4, [r5, #0]
 8018bb0:	f084 0001 	eor.w	r0, r4, #1
 8018bb4:	b2c0      	uxtb	r0, r0
 8018bb6:	b009      	add	sp, #36	@ 0x24
 8018bb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018bba:	6864      	ldr	r4, [r4, #4]
 8018bbc:	f7f8 f908 	bl	8010dd0 <rmw_uxrce_clean_expired_static_input_buffer>
 8018bc0:	4620      	mov	r0, r4
 8018bc2:	f7f8 f8dd 	bl	8010d80 <rmw_uxrce_find_static_input_buffer_by_owner>
 8018bc6:	4605      	mov	r5, r0
 8018bc8:	b910      	cbnz	r0, 8018bd0 <rmw_take_with_info+0x74>
 8018bca:	2001      	movs	r0, #1
 8018bcc:	b009      	add	sp, #36	@ 0x24
 8018bce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018bd0:	68a9      	ldr	r1, [r5, #8]
 8018bd2:	4668      	mov	r0, sp
 8018bd4:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 8018bd8:	3110      	adds	r1, #16
 8018bda:	f7f5 fcb1 	bl	800e540 <ucdr_init_buffer>
 8018bde:	69a3      	ldr	r3, [r4, #24]
 8018be0:	4639      	mov	r1, r7
 8018be2:	68db      	ldr	r3, [r3, #12]
 8018be4:	4668      	mov	r0, sp
 8018be6:	4798      	blx	r3
 8018be8:	4629      	mov	r1, r5
 8018bea:	4604      	mov	r4, r0
 8018bec:	4804      	ldr	r0, [pc, #16]	@ (8018c00 <rmw_take_with_info+0xa4>)
 8018bee:	f7ff fd93 	bl	8018718 <put_memory>
 8018bf2:	e7dd      	b.n	8018bb0 <rmw_take_with_info+0x54>
 8018bf4:	200c      	movs	r0, #12
 8018bf6:	b009      	add	sp, #36	@ 0x24
 8018bf8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018bfa:	bf00      	nop
 8018bfc:	0801eacc 	.word	0x0801eacc
 8018c00:	2000b524 	.word	0x2000b524

08018c04 <rmw_wait>:
 8018c04:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018c08:	b089      	sub	sp, #36	@ 0x24
 8018c0a:	4605      	mov	r5, r0
 8018c0c:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8018c0e:	460e      	mov	r6, r1
 8018c10:	4698      	mov	r8, r3
 8018c12:	4691      	mov	r9, r2
 8018c14:	2a00      	cmp	r2, #0
 8018c16:	f000 810a 	beq.w	8018e2e <rmw_wait+0x22a>
 8018c1a:	b16c      	cbz	r4, 8018c38 <rmw_wait+0x34>
 8018c1c:	4bae      	ldr	r3, [pc, #696]	@ (8018ed8 <rmw_wait+0x2d4>)
 8018c1e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8018c20:	af04      	add	r7, sp, #16
 8018c22:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 8018c26:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8018c2a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8018c2e:	f7ff faaf 	bl	8018190 <rmw_time_equal>
 8018c32:	2800      	cmp	r0, #0
 8018c34:	f000 8127 	beq.w	8018e86 <rmw_wait+0x282>
 8018c38:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8018c3c:	f7f8 f8c8 	bl	8010dd0 <rmw_uxrce_clean_expired_static_input_buffer>
 8018c40:	4ba6      	ldr	r3, [pc, #664]	@ (8018edc <rmw_wait+0x2d8>)
 8018c42:	681c      	ldr	r4, [r3, #0]
 8018c44:	b14c      	cbz	r4, 8018c5a <rmw_wait+0x56>
 8018c46:	4623      	mov	r3, r4
 8018c48:	2100      	movs	r1, #0
 8018c4a:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
 8018c4e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8018c52:	f882 15a4 	strb.w	r1, [r2, #1444]	@ 0x5a4
 8018c56:	2b00      	cmp	r3, #0
 8018c58:	d1f7      	bne.n	8018c4a <rmw_wait+0x46>
 8018c5a:	f1b9 0f00 	cmp.w	r9, #0
 8018c5e:	d011      	beq.n	8018c84 <rmw_wait+0x80>
 8018c60:	f8d9 1000 	ldr.w	r1, [r9]
 8018c64:	b171      	cbz	r1, 8018c84 <rmw_wait+0x80>
 8018c66:	f8d9 c004 	ldr.w	ip, [r9, #4]
 8018c6a:	2300      	movs	r3, #0
 8018c6c:	2001      	movs	r0, #1
 8018c6e:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8018c72:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 8018c74:	6912      	ldr	r2, [r2, #16]
 8018c76:	3301      	adds	r3, #1
 8018c78:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8018c7c:	4299      	cmp	r1, r3
 8018c7e:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8018c82:	d1f4      	bne.n	8018c6e <rmw_wait+0x6a>
 8018c84:	f1b8 0f00 	cmp.w	r8, #0
 8018c88:	d011      	beq.n	8018cae <rmw_wait+0xaa>
 8018c8a:	f8d8 1000 	ldr.w	r1, [r8]
 8018c8e:	b171      	cbz	r1, 8018cae <rmw_wait+0xaa>
 8018c90:	f8d8 c004 	ldr.w	ip, [r8, #4]
 8018c94:	2300      	movs	r3, #0
 8018c96:	2001      	movs	r0, #1
 8018c98:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8018c9c:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 8018c9e:	6912      	ldr	r2, [r2, #16]
 8018ca0:	3301      	adds	r3, #1
 8018ca2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8018ca6:	4299      	cmp	r1, r3
 8018ca8:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8018cac:	d1f4      	bne.n	8018c98 <rmw_wait+0x94>
 8018cae:	b185      	cbz	r5, 8018cd2 <rmw_wait+0xce>
 8018cb0:	6829      	ldr	r1, [r5, #0]
 8018cb2:	b171      	cbz	r1, 8018cd2 <rmw_wait+0xce>
 8018cb4:	f8d5 c004 	ldr.w	ip, [r5, #4]
 8018cb8:	2300      	movs	r3, #0
 8018cba:	2001      	movs	r0, #1
 8018cbc:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8018cc0:	6a12      	ldr	r2, [r2, #32]
 8018cc2:	6912      	ldr	r2, [r2, #16]
 8018cc4:	3301      	adds	r3, #1
 8018cc6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8018cca:	4299      	cmp	r1, r3
 8018ccc:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8018cd0:	d1f4      	bne.n	8018cbc <rmw_wait+0xb8>
 8018cd2:	b34c      	cbz	r4, 8018d28 <rmw_wait+0x124>
 8018cd4:	4622      	mov	r2, r4
 8018cd6:	2300      	movs	r3, #0
 8018cd8:	e9d2 2101 	ldrd	r2, r1, [r2, #4]
 8018cdc:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 8018ce0:	f891 15a4 	ldrb.w	r1, [r1, #1444]	@ 0x5a4
 8018ce4:	440b      	add	r3, r1
 8018ce6:	b2db      	uxtb	r3, r3
 8018ce8:	2a00      	cmp	r2, #0
 8018cea:	d1f5      	bne.n	8018cd8 <rmw_wait+0xd4>
 8018cec:	2b00      	cmp	r3, #0
 8018cee:	f000 8084 	beq.w	8018dfa <rmw_wait+0x1f6>
 8018cf2:	1c7a      	adds	r2, r7, #1
 8018cf4:	d00d      	beq.n	8018d12 <rmw_wait+0x10e>
 8018cf6:	ee07 7a90 	vmov	s15, r7
 8018cfa:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8018cfe:	ee07 3a90 	vmov	s15, r3
 8018d02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8018d06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8018d0a:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 8018d0e:	ee17 7a90 	vmov	r7, s15
 8018d12:	68a0      	ldr	r0, [r4, #8]
 8018d14:	f500 5380 	add.w	r3, r0, #4096	@ 0x1000
 8018d18:	f893 35a4 	ldrb.w	r3, [r3, #1444]	@ 0x5a4
 8018d1c:	2b00      	cmp	r3, #0
 8018d1e:	f040 8090 	bne.w	8018e42 <rmw_wait+0x23e>
 8018d22:	6864      	ldr	r4, [r4, #4]
 8018d24:	2c00      	cmp	r4, #0
 8018d26:	d1f4      	bne.n	8018d12 <rmw_wait+0x10e>
 8018d28:	f1b9 0f00 	cmp.w	r9, #0
 8018d2c:	f000 80bc 	beq.w	8018ea8 <rmw_wait+0x2a4>
 8018d30:	f8d9 7000 	ldr.w	r7, [r9]
 8018d34:	2f00      	cmp	r7, #0
 8018d36:	f000 808e 	beq.w	8018e56 <rmw_wait+0x252>
 8018d3a:	2400      	movs	r4, #0
 8018d3c:	4627      	mov	r7, r4
 8018d3e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8018d42:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8018d46:	f7f8 f81b 	bl	8010d80 <rmw_uxrce_find_static_input_buffer_by_owner>
 8018d4a:	2800      	cmp	r0, #0
 8018d4c:	d05f      	beq.n	8018e0e <rmw_wait+0x20a>
 8018d4e:	f8d9 3000 	ldr.w	r3, [r9]
 8018d52:	3401      	adds	r4, #1
 8018d54:	42a3      	cmp	r3, r4
 8018d56:	f04f 0701 	mov.w	r7, #1
 8018d5a:	d8f0      	bhi.n	8018d3e <rmw_wait+0x13a>
 8018d5c:	f1b8 0f00 	cmp.w	r8, #0
 8018d60:	d012      	beq.n	8018d88 <rmw_wait+0x184>
 8018d62:	f8d8 3000 	ldr.w	r3, [r8]
 8018d66:	b17b      	cbz	r3, 8018d88 <rmw_wait+0x184>
 8018d68:	2400      	movs	r4, #0
 8018d6a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8018d6e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8018d72:	f7f8 f805 	bl	8010d80 <rmw_uxrce_find_static_input_buffer_by_owner>
 8018d76:	2800      	cmp	r0, #0
 8018d78:	d051      	beq.n	8018e1e <rmw_wait+0x21a>
 8018d7a:	f8d8 3000 	ldr.w	r3, [r8]
 8018d7e:	3401      	adds	r4, #1
 8018d80:	42a3      	cmp	r3, r4
 8018d82:	f04f 0701 	mov.w	r7, #1
 8018d86:	d8f0      	bhi.n	8018d6a <rmw_wait+0x166>
 8018d88:	b1dd      	cbz	r5, 8018dc2 <rmw_wait+0x1be>
 8018d8a:	682b      	ldr	r3, [r5, #0]
 8018d8c:	b1cb      	cbz	r3, 8018dc2 <rmw_wait+0x1be>
 8018d8e:	2400      	movs	r4, #0
 8018d90:	686b      	ldr	r3, [r5, #4]
 8018d92:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8018d96:	f7f7 fff3 	bl	8010d80 <rmw_uxrce_find_static_input_buffer_by_owner>
 8018d9a:	b158      	cbz	r0, 8018db4 <rmw_wait+0x1b0>
 8018d9c:	682b      	ldr	r3, [r5, #0]
 8018d9e:	3401      	adds	r4, #1
 8018da0:	42a3      	cmp	r3, r4
 8018da2:	d969      	bls.n	8018e78 <rmw_wait+0x274>
 8018da4:	686b      	ldr	r3, [r5, #4]
 8018da6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8018daa:	2701      	movs	r7, #1
 8018dac:	f7f7 ffe8 	bl	8010d80 <rmw_uxrce_find_static_input_buffer_by_owner>
 8018db0:	2800      	cmp	r0, #0
 8018db2:	d1f3      	bne.n	8018d9c <rmw_wait+0x198>
 8018db4:	e9d5 3200 	ldrd	r3, r2, [r5]
 8018db8:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8018dbc:	3401      	adds	r4, #1
 8018dbe:	42a3      	cmp	r3, r4
 8018dc0:	d8e6      	bhi.n	8018d90 <rmw_wait+0x18c>
 8018dc2:	b1a6      	cbz	r6, 8018dee <rmw_wait+0x1ea>
 8018dc4:	6834      	ldr	r4, [r6, #0]
 8018dc6:	b194      	cbz	r4, 8018dee <rmw_wait+0x1ea>
 8018dc8:	2300      	movs	r3, #0
 8018dca:	461d      	mov	r5, r3
 8018dcc:	e004      	b.n	8018dd8 <rmw_wait+0x1d4>
 8018dce:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 8018dd2:	3301      	adds	r3, #1
 8018dd4:	42a3      	cmp	r3, r4
 8018dd6:	d00a      	beq.n	8018dee <rmw_wait+0x1ea>
 8018dd8:	6870      	ldr	r0, [r6, #4]
 8018dda:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 8018dde:	7c0a      	ldrb	r2, [r1, #16]
 8018de0:	2a00      	cmp	r2, #0
 8018de2:	d0f4      	beq.n	8018dce <rmw_wait+0x1ca>
 8018de4:	3301      	adds	r3, #1
 8018de6:	42a3      	cmp	r3, r4
 8018de8:	740d      	strb	r5, [r1, #16]
 8018dea:	4617      	mov	r7, r2
 8018dec:	d1f4      	bne.n	8018dd8 <rmw_wait+0x1d4>
 8018dee:	2f00      	cmp	r7, #0
 8018df0:	d03e      	beq.n	8018e70 <rmw_wait+0x26c>
 8018df2:	2000      	movs	r0, #0
 8018df4:	b009      	add	sp, #36	@ 0x24
 8018df6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018dfa:	68a0      	ldr	r0, [r4, #8]
 8018dfc:	2100      	movs	r1, #0
 8018dfe:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8018e02:	f7f9 fc97 	bl	8012734 <uxr_run_session_timeout>
 8018e06:	6864      	ldr	r4, [r4, #4]
 8018e08:	2c00      	cmp	r4, #0
 8018e0a:	d1f6      	bne.n	8018dfa <rmw_wait+0x1f6>
 8018e0c:	e78c      	b.n	8018d28 <rmw_wait+0x124>
 8018e0e:	e9d9 3200 	ldrd	r3, r2, [r9]
 8018e12:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8018e16:	3401      	adds	r4, #1
 8018e18:	42a3      	cmp	r3, r4
 8018e1a:	d890      	bhi.n	8018d3e <rmw_wait+0x13a>
 8018e1c:	e79e      	b.n	8018d5c <rmw_wait+0x158>
 8018e1e:	e9d8 3200 	ldrd	r3, r2, [r8]
 8018e22:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8018e26:	3401      	adds	r4, #1
 8018e28:	429c      	cmp	r4, r3
 8018e2a:	d39e      	bcc.n	8018d6a <rmw_wait+0x166>
 8018e2c:	e7ac      	b.n	8018d88 <rmw_wait+0x184>
 8018e2e:	2b00      	cmp	r3, #0
 8018e30:	f47f aef3 	bne.w	8018c1a <rmw_wait+0x16>
 8018e34:	2800      	cmp	r0, #0
 8018e36:	f47f aef0 	bne.w	8018c1a <rmw_wait+0x16>
 8018e3a:	2900      	cmp	r1, #0
 8018e3c:	f47f aeed 	bne.w	8018c1a <rmw_wait+0x16>
 8018e40:	e7d7      	b.n	8018df2 <rmw_wait+0x1ee>
 8018e42:	4639      	mov	r1, r7
 8018e44:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8018e48:	f7f9 fc8e 	bl	8012768 <uxr_run_session_until_data>
 8018e4c:	6864      	ldr	r4, [r4, #4]
 8018e4e:	2c00      	cmp	r4, #0
 8018e50:	f47f af5f 	bne.w	8018d12 <rmw_wait+0x10e>
 8018e54:	e768      	b.n	8018d28 <rmw_wait+0x124>
 8018e56:	f1b8 0f00 	cmp.w	r8, #0
 8018e5a:	d032      	beq.n	8018ec2 <rmw_wait+0x2be>
 8018e5c:	f8d8 3000 	ldr.w	r3, [r8]
 8018e60:	2b00      	cmp	r3, #0
 8018e62:	d181      	bne.n	8018d68 <rmw_wait+0x164>
 8018e64:	461f      	mov	r7, r3
 8018e66:	2d00      	cmp	r5, #0
 8018e68:	d18f      	bne.n	8018d8a <rmw_wait+0x186>
 8018e6a:	462f      	mov	r7, r5
 8018e6c:	2e00      	cmp	r6, #0
 8018e6e:	d1a9      	bne.n	8018dc4 <rmw_wait+0x1c0>
 8018e70:	2002      	movs	r0, #2
 8018e72:	b009      	add	sp, #36	@ 0x24
 8018e74:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018e78:	2e00      	cmp	r6, #0
 8018e7a:	d0ba      	beq.n	8018df2 <rmw_wait+0x1ee>
 8018e7c:	6834      	ldr	r4, [r6, #0]
 8018e7e:	2701      	movs	r7, #1
 8018e80:	2c00      	cmp	r4, #0
 8018e82:	d1a1      	bne.n	8018dc8 <rmw_wait+0x1c4>
 8018e84:	e7b5      	b.n	8018df2 <rmw_wait+0x1ee>
 8018e86:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8018e8a:	f7ff f9d5 	bl	8018238 <rmw_time_total_nsec>
 8018e8e:	2300      	movs	r3, #0
 8018e90:	4a13      	ldr	r2, [pc, #76]	@ (8018ee0 <rmw_wait+0x2dc>)
 8018e92:	f7e7 ff43 	bl	8000d1c <__aeabi_uldivmod>
 8018e96:	f1b0 4f00 	cmp.w	r0, #2147483648	@ 0x80000000
 8018e9a:	f171 0300 	sbcs.w	r3, r1, #0
 8018e9e:	4607      	mov	r7, r0
 8018ea0:	bfa8      	it	ge
 8018ea2:	f06f 4700 	mvnge.w	r7, #2147483648	@ 0x80000000
 8018ea6:	e6c9      	b.n	8018c3c <rmw_wait+0x38>
 8018ea8:	f1b8 0f00 	cmp.w	r8, #0
 8018eac:	d009      	beq.n	8018ec2 <rmw_wait+0x2be>
 8018eae:	f8d8 3000 	ldr.w	r3, [r8]
 8018eb2:	464f      	mov	r7, r9
 8018eb4:	2b00      	cmp	r3, #0
 8018eb6:	f47f af57 	bne.w	8018d68 <rmw_wait+0x164>
 8018eba:	2d00      	cmp	r5, #0
 8018ebc:	f47f af65 	bne.w	8018d8a <rmw_wait+0x186>
 8018ec0:	e7d3      	b.n	8018e6a <rmw_wait+0x266>
 8018ec2:	b17d      	cbz	r5, 8018ee4 <rmw_wait+0x2e0>
 8018ec4:	682b      	ldr	r3, [r5, #0]
 8018ec6:	4647      	mov	r7, r8
 8018ec8:	2b00      	cmp	r3, #0
 8018eca:	f47f af60 	bne.w	8018d8e <rmw_wait+0x18a>
 8018ece:	2e00      	cmp	r6, #0
 8018ed0:	f47f af78 	bne.w	8018dc4 <rmw_wait+0x1c0>
 8018ed4:	e7cc      	b.n	8018e70 <rmw_wait+0x26c>
 8018ed6:	bf00      	nop
 8018ed8:	0801d508 	.word	0x0801d508
 8018edc:	2000b514 	.word	0x2000b514
 8018ee0:	000f4240 	.word	0x000f4240
 8018ee4:	2e00      	cmp	r6, #0
 8018ee6:	d0c3      	beq.n	8018e70 <rmw_wait+0x26c>
 8018ee8:	6834      	ldr	r4, [r6, #0]
 8018eea:	462f      	mov	r7, r5
 8018eec:	2c00      	cmp	r4, #0
 8018eee:	f47f af6b 	bne.w	8018dc8 <rmw_wait+0x1c4>
 8018ef2:	e7bd      	b.n	8018e70 <rmw_wait+0x26c>

08018ef4 <rmw_create_wait_set>:
 8018ef4:	b508      	push	{r3, lr}
 8018ef6:	4803      	ldr	r0, [pc, #12]	@ (8018f04 <rmw_create_wait_set+0x10>)
 8018ef8:	f7ff fbfe 	bl	80186f8 <get_memory>
 8018efc:	b108      	cbz	r0, 8018f02 <rmw_create_wait_set+0xe>
 8018efe:	6880      	ldr	r0, [r0, #8]
 8018f00:	3010      	adds	r0, #16
 8018f02:	bd08      	pop	{r3, pc}
 8018f04:	2000b554 	.word	0x2000b554

08018f08 <rmw_destroy_wait_set>:
 8018f08:	b508      	push	{r3, lr}
 8018f0a:	4b08      	ldr	r3, [pc, #32]	@ (8018f2c <rmw_destroy_wait_set+0x24>)
 8018f0c:	6819      	ldr	r1, [r3, #0]
 8018f0e:	b911      	cbnz	r1, 8018f16 <rmw_destroy_wait_set+0xe>
 8018f10:	e00a      	b.n	8018f28 <rmw_destroy_wait_set+0x20>
 8018f12:	6849      	ldr	r1, [r1, #4]
 8018f14:	b141      	cbz	r1, 8018f28 <rmw_destroy_wait_set+0x20>
 8018f16:	688b      	ldr	r3, [r1, #8]
 8018f18:	3310      	adds	r3, #16
 8018f1a:	4298      	cmp	r0, r3
 8018f1c:	d1f9      	bne.n	8018f12 <rmw_destroy_wait_set+0xa>
 8018f1e:	4803      	ldr	r0, [pc, #12]	@ (8018f2c <rmw_destroy_wait_set+0x24>)
 8018f20:	f7ff fbfa 	bl	8018718 <put_memory>
 8018f24:	2000      	movs	r0, #0
 8018f26:	bd08      	pop	{r3, pc}
 8018f28:	2001      	movs	r0, #1
 8018f2a:	bd08      	pop	{r3, pc}
 8018f2c:	2000b554 	.word	0x2000b554

08018f30 <rosidl_runtime_c__double__Sequence__init>:
 8018f30:	b530      	push	{r4, r5, lr}
 8018f32:	4604      	mov	r4, r0
 8018f34:	b087      	sub	sp, #28
 8018f36:	b130      	cbz	r0, 8018f46 <rosidl_runtime_c__double__Sequence__init+0x16>
 8018f38:	460d      	mov	r5, r1
 8018f3a:	b931      	cbnz	r1, 8018f4a <rosidl_runtime_c__double__Sequence__init+0x1a>
 8018f3c:	4608      	mov	r0, r1
 8018f3e:	e9c4 0500 	strd	r0, r5, [r4]
 8018f42:	60a5      	str	r5, [r4, #8]
 8018f44:	2001      	movs	r0, #1
 8018f46:	b007      	add	sp, #28
 8018f48:	bd30      	pop	{r4, r5, pc}
 8018f4a:	a801      	add	r0, sp, #4
 8018f4c:	f7f6 fd08 	bl	800f960 <rcutils_get_default_allocator>
 8018f50:	9b01      	ldr	r3, [sp, #4]
 8018f52:	9905      	ldr	r1, [sp, #20]
 8018f54:	00e8      	lsls	r0, r5, #3
 8018f56:	4798      	blx	r3
 8018f58:	2800      	cmp	r0, #0
 8018f5a:	d1f0      	bne.n	8018f3e <rosidl_runtime_c__double__Sequence__init+0xe>
 8018f5c:	e7f3      	b.n	8018f46 <rosidl_runtime_c__double__Sequence__init+0x16>
 8018f5e:	bf00      	nop

08018f60 <rosidl_runtime_c__double__Sequence__fini>:
 8018f60:	b188      	cbz	r0, 8018f86 <rosidl_runtime_c__double__Sequence__fini+0x26>
 8018f62:	b510      	push	{r4, lr}
 8018f64:	6803      	ldr	r3, [r0, #0]
 8018f66:	b086      	sub	sp, #24
 8018f68:	4604      	mov	r4, r0
 8018f6a:	b153      	cbz	r3, 8018f82 <rosidl_runtime_c__double__Sequence__fini+0x22>
 8018f6c:	a801      	add	r0, sp, #4
 8018f6e:	f7f6 fcf7 	bl	800f960 <rcutils_get_default_allocator>
 8018f72:	9b02      	ldr	r3, [sp, #8]
 8018f74:	9905      	ldr	r1, [sp, #20]
 8018f76:	6820      	ldr	r0, [r4, #0]
 8018f78:	4798      	blx	r3
 8018f7a:	2300      	movs	r3, #0
 8018f7c:	e9c4 3300 	strd	r3, r3, [r4]
 8018f80:	60a3      	str	r3, [r4, #8]
 8018f82:	b006      	add	sp, #24
 8018f84:	bd10      	pop	{r4, pc}
 8018f86:	4770      	bx	lr

08018f88 <std_msgs__msg__Float64MultiArray__init>:
 8018f88:	b570      	push	{r4, r5, r6, lr}
 8018f8a:	4605      	mov	r5, r0
 8018f8c:	b1b0      	cbz	r0, 8018fbc <std_msgs__msg__Float64MultiArray__init+0x34>
 8018f8e:	f000 f8b5 	bl	80190fc <std_msgs__msg__MultiArrayLayout__init>
 8018f92:	4604      	mov	r4, r0
 8018f94:	b148      	cbz	r0, 8018faa <std_msgs__msg__Float64MultiArray__init+0x22>
 8018f96:	f105 0610 	add.w	r6, r5, #16
 8018f9a:	2100      	movs	r1, #0
 8018f9c:	4630      	mov	r0, r6
 8018f9e:	f7ff ffc7 	bl	8018f30 <rosidl_runtime_c__double__Sequence__init>
 8018fa2:	4604      	mov	r4, r0
 8018fa4:	b168      	cbz	r0, 8018fc2 <std_msgs__msg__Float64MultiArray__init+0x3a>
 8018fa6:	4620      	mov	r0, r4
 8018fa8:	bd70      	pop	{r4, r5, r6, pc}
 8018faa:	4628      	mov	r0, r5
 8018fac:	f000 f8b8 	bl	8019120 <std_msgs__msg__MultiArrayLayout__fini>
 8018fb0:	f105 0010 	add.w	r0, r5, #16
 8018fb4:	f7ff ffd4 	bl	8018f60 <rosidl_runtime_c__double__Sequence__fini>
 8018fb8:	4620      	mov	r0, r4
 8018fba:	bd70      	pop	{r4, r5, r6, pc}
 8018fbc:	4604      	mov	r4, r0
 8018fbe:	4620      	mov	r0, r4
 8018fc0:	bd70      	pop	{r4, r5, r6, pc}
 8018fc2:	4628      	mov	r0, r5
 8018fc4:	f000 f8ac 	bl	8019120 <std_msgs__msg__MultiArrayLayout__fini>
 8018fc8:	4630      	mov	r0, r6
 8018fca:	f7ff ffc9 	bl	8018f60 <rosidl_runtime_c__double__Sequence__fini>
 8018fce:	e7ea      	b.n	8018fa6 <std_msgs__msg__Float64MultiArray__init+0x1e>

08018fd0 <std_msgs__msg__Float64MultiArray__fini>:
 8018fd0:	b148      	cbz	r0, 8018fe6 <std_msgs__msg__Float64MultiArray__fini+0x16>
 8018fd2:	b510      	push	{r4, lr}
 8018fd4:	4604      	mov	r4, r0
 8018fd6:	f000 f8a3 	bl	8019120 <std_msgs__msg__MultiArrayLayout__fini>
 8018fda:	f104 0010 	add.w	r0, r4, #16
 8018fde:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018fe2:	f7ff bfbd 	b.w	8018f60 <rosidl_runtime_c__double__Sequence__fini>
 8018fe6:	4770      	bx	lr

08018fe8 <std_msgs__msg__MultiArrayDimension__Sequence__init.part.0>:
 8018fe8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018fec:	b086      	sub	sp, #24
 8018fee:	4682      	mov	sl, r0
 8018ff0:	4689      	mov	r9, r1
 8018ff2:	a801      	add	r0, sp, #4
 8018ff4:	f7f6 fcb4 	bl	800f960 <rcutils_get_default_allocator>
 8018ff8:	f1b9 0f00 	cmp.w	r9, #0
 8018ffc:	d02f      	beq.n	801905e <std_msgs__msg__MultiArrayDimension__Sequence__init.part.0+0x76>
 8018ffe:	e9dd 3804 	ldrd	r3, r8, [sp, #16]
 8019002:	2114      	movs	r1, #20
 8019004:	4642      	mov	r2, r8
 8019006:	4648      	mov	r0, r9
 8019008:	4798      	blx	r3
 801900a:	4607      	mov	r7, r0
 801900c:	b388      	cbz	r0, 8019072 <std_msgs__msg__MultiArrayDimension__Sequence__init.part.0+0x8a>
 801900e:	4606      	mov	r6, r0
 8019010:	2400      	movs	r4, #0
 8019012:	e004      	b.n	801901e <std_msgs__msg__MultiArrayDimension__Sequence__init.part.0+0x36>
 8019014:	3401      	adds	r4, #1
 8019016:	45a1      	cmp	r9, r4
 8019018:	f106 0614 	add.w	r6, r6, #20
 801901c:	d020      	beq.n	8019060 <std_msgs__msg__MultiArrayDimension__Sequence__init.part.0+0x78>
 801901e:	4630      	mov	r0, r6
 8019020:	f001 fc56 	bl	801a8d0 <rosidl_runtime_c__String__init>
 8019024:	4605      	mov	r5, r0
 8019026:	2800      	cmp	r0, #0
 8019028:	d1f4      	bne.n	8019014 <std_msgs__msg__MultiArrayDimension__Sequence__init.part.0+0x2c>
 801902a:	4630      	mov	r0, r6
 801902c:	f001 fc66 	bl	801a8fc <rosidl_runtime_c__String__fini>
 8019030:	45a1      	cmp	r9, r4
 8019032:	d915      	bls.n	8019060 <std_msgs__msg__MultiArrayDimension__Sequence__init.part.0+0x78>
 8019034:	b15c      	cbz	r4, 801904e <std_msgs__msg__MultiArrayDimension__Sequence__init.part.0+0x66>
 8019036:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 801903a:	eb07 0484 	add.w	r4, r7, r4, lsl #2
 801903e:	3c14      	subs	r4, #20
 8019040:	4620      	mov	r0, r4
 8019042:	f001 fc5b 	bl	801a8fc <rosidl_runtime_c__String__fini>
 8019046:	42a7      	cmp	r7, r4
 8019048:	f1a4 0414 	sub.w	r4, r4, #20
 801904c:	d1f8      	bne.n	8019040 <std_msgs__msg__MultiArrayDimension__Sequence__init.part.0+0x58>
 801904e:	4638      	mov	r0, r7
 8019050:	9b02      	ldr	r3, [sp, #8]
 8019052:	4641      	mov	r1, r8
 8019054:	4798      	blx	r3
 8019056:	4628      	mov	r0, r5
 8019058:	b006      	add	sp, #24
 801905a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801905e:	464f      	mov	r7, r9
 8019060:	e9ca 7900 	strd	r7, r9, [sl]
 8019064:	f8ca 9008 	str.w	r9, [sl, #8]
 8019068:	2501      	movs	r5, #1
 801906a:	4628      	mov	r0, r5
 801906c:	b006      	add	sp, #24
 801906e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019072:	4605      	mov	r5, r0
 8019074:	e7f9      	b.n	801906a <std_msgs__msg__MultiArrayDimension__Sequence__init.part.0+0x82>
 8019076:	bf00      	nop

08019078 <std_msgs__msg__MultiArrayDimension__init>:
 8019078:	b538      	push	{r3, r4, r5, lr}
 801907a:	4604      	mov	r4, r0
 801907c:	b128      	cbz	r0, 801908a <std_msgs__msg__MultiArrayDimension__init+0x12>
 801907e:	f001 fc27 	bl	801a8d0 <rosidl_runtime_c__String__init>
 8019082:	4605      	mov	r5, r0
 8019084:	b120      	cbz	r0, 8019090 <std_msgs__msg__MultiArrayDimension__init+0x18>
 8019086:	4628      	mov	r0, r5
 8019088:	bd38      	pop	{r3, r4, r5, pc}
 801908a:	4605      	mov	r5, r0
 801908c:	4628      	mov	r0, r5
 801908e:	bd38      	pop	{r3, r4, r5, pc}
 8019090:	4620      	mov	r0, r4
 8019092:	f001 fc33 	bl	801a8fc <rosidl_runtime_c__String__fini>
 8019096:	4628      	mov	r0, r5
 8019098:	bd38      	pop	{r3, r4, r5, pc}
 801909a:	bf00      	nop

0801909c <std_msgs__msg__MultiArrayDimension__fini>:
 801909c:	b108      	cbz	r0, 80190a2 <std_msgs__msg__MultiArrayDimension__fini+0x6>
 801909e:	f001 bc2d 	b.w	801a8fc <rosidl_runtime_c__String__fini>
 80190a2:	4770      	bx	lr

080190a4 <std_msgs__msg__MultiArrayDimension__Sequence__init>:
 80190a4:	b108      	cbz	r0, 80190aa <std_msgs__msg__MultiArrayDimension__Sequence__init+0x6>
 80190a6:	f7ff bf9f 	b.w	8018fe8 <std_msgs__msg__MultiArrayDimension__Sequence__init.part.0>
 80190aa:	4770      	bx	lr

080190ac <std_msgs__msg__MultiArrayDimension__Sequence__fini>:
 80190ac:	b320      	cbz	r0, 80190f8 <std_msgs__msg__MultiArrayDimension__Sequence__fini+0x4c>
 80190ae:	b530      	push	{r4, r5, lr}
 80190b0:	4605      	mov	r5, r0
 80190b2:	b087      	sub	sp, #28
 80190b4:	a801      	add	r0, sp, #4
 80190b6:	f7f6 fc53 	bl	800f960 <rcutils_get_default_allocator>
 80190ba:	682a      	ldr	r2, [r5, #0]
 80190bc:	b1b2      	cbz	r2, 80190ec <std_msgs__msg__MultiArrayDimension__Sequence__fini+0x40>
 80190be:	68a9      	ldr	r1, [r5, #8]
 80190c0:	b161      	cbz	r1, 80190dc <std_msgs__msg__MultiArrayDimension__Sequence__fini+0x30>
 80190c2:	2400      	movs	r4, #0
 80190c4:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 80190c8:	eb12 0083 	adds.w	r0, r2, r3, lsl #2
 80190cc:	d010      	beq.n	80190f0 <std_msgs__msg__MultiArrayDimension__Sequence__fini+0x44>
 80190ce:	f001 fc15 	bl	801a8fc <rosidl_runtime_c__String__fini>
 80190d2:	68a9      	ldr	r1, [r5, #8]
 80190d4:	682a      	ldr	r2, [r5, #0]
 80190d6:	3401      	adds	r4, #1
 80190d8:	428c      	cmp	r4, r1
 80190da:	d3f3      	bcc.n	80190c4 <std_msgs__msg__MultiArrayDimension__Sequence__fini+0x18>
 80190dc:	9b02      	ldr	r3, [sp, #8]
 80190de:	9905      	ldr	r1, [sp, #20]
 80190e0:	4610      	mov	r0, r2
 80190e2:	4798      	blx	r3
 80190e4:	2300      	movs	r3, #0
 80190e6:	e9c5 3300 	strd	r3, r3, [r5]
 80190ea:	60ab      	str	r3, [r5, #8]
 80190ec:	b007      	add	sp, #28
 80190ee:	bd30      	pop	{r4, r5, pc}
 80190f0:	3401      	adds	r4, #1
 80190f2:	428c      	cmp	r4, r1
 80190f4:	d3e6      	bcc.n	80190c4 <std_msgs__msg__MultiArrayDimension__Sequence__fini+0x18>
 80190f6:	e7f1      	b.n	80190dc <std_msgs__msg__MultiArrayDimension__Sequence__fini+0x30>
 80190f8:	4770      	bx	lr
 80190fa:	bf00      	nop

080190fc <std_msgs__msg__MultiArrayLayout__init>:
 80190fc:	b538      	push	{r3, r4, r5, lr}
 80190fe:	4604      	mov	r4, r0
 8019100:	b130      	cbz	r0, 8019110 <std_msgs__msg__MultiArrayLayout__init+0x14>
 8019102:	2100      	movs	r1, #0
 8019104:	f7ff ffce 	bl	80190a4 <std_msgs__msg__MultiArrayDimension__Sequence__init>
 8019108:	4605      	mov	r5, r0
 801910a:	b120      	cbz	r0, 8019116 <std_msgs__msg__MultiArrayLayout__init+0x1a>
 801910c:	4628      	mov	r0, r5
 801910e:	bd38      	pop	{r3, r4, r5, pc}
 8019110:	4605      	mov	r5, r0
 8019112:	4628      	mov	r0, r5
 8019114:	bd38      	pop	{r3, r4, r5, pc}
 8019116:	4620      	mov	r0, r4
 8019118:	f7ff ffc8 	bl	80190ac <std_msgs__msg__MultiArrayDimension__Sequence__fini>
 801911c:	4628      	mov	r0, r5
 801911e:	bd38      	pop	{r3, r4, r5, pc}

08019120 <std_msgs__msg__MultiArrayLayout__fini>:
 8019120:	b108      	cbz	r0, 8019126 <std_msgs__msg__MultiArrayLayout__fini+0x6>
 8019122:	f7ff bfc3 	b.w	80190ac <std_msgs__msg__MultiArrayDimension__Sequence__fini>
 8019126:	4770      	bx	lr

08019128 <std_msgs__msg__MultiArrayDimension__rosidl_typesupport_introspection_c__MultiArrayDimension_init_function>:
 8019128:	f7ff bfa6 	b.w	8019078 <std_msgs__msg__MultiArrayDimension__init>

0801912c <std_msgs__msg__MultiArrayDimension__rosidl_typesupport_introspection_c__MultiArrayDimension_fini_function>:
 801912c:	f7ff bfb6 	b.w	801909c <std_msgs__msg__MultiArrayDimension__fini>

08019130 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension>:
 8019130:	4b04      	ldr	r3, [pc, #16]	@ (8019144 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension+0x14>)
 8019132:	681a      	ldr	r2, [r3, #0]
 8019134:	b10a      	cbz	r2, 801913a <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension+0xa>
 8019136:	4803      	ldr	r0, [pc, #12]	@ (8019144 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension+0x14>)
 8019138:	4770      	bx	lr
 801913a:	4a03      	ldr	r2, [pc, #12]	@ (8019148 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension+0x18>)
 801913c:	4801      	ldr	r0, [pc, #4]	@ (8019144 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension+0x14>)
 801913e:	6812      	ldr	r2, [r2, #0]
 8019140:	601a      	str	r2, [r3, #0]
 8019142:	4770      	bx	lr
 8019144:	200003f8 	.word	0x200003f8
 8019148:	200001d4 	.word	0x200001d4

0801914c <_MultiArrayDimension__cdr_serialize>:
 801914c:	b1d0      	cbz	r0, 8019184 <_MultiArrayDimension__cdr_serialize+0x38>
 801914e:	b570      	push	{r4, r5, r6, lr}
 8019150:	6806      	ldr	r6, [r0, #0]
 8019152:	460d      	mov	r5, r1
 8019154:	4604      	mov	r4, r0
 8019156:	b196      	cbz	r6, 801917e <_MultiArrayDimension__cdr_serialize+0x32>
 8019158:	4630      	mov	r0, r6
 801915a:	f7e7 f86b 	bl	8000234 <strlen>
 801915e:	1c42      	adds	r2, r0, #1
 8019160:	4631      	mov	r1, r6
 8019162:	6060      	str	r0, [r4, #4]
 8019164:	4628      	mov	r0, r5
 8019166:	f7f8 f997 	bl	8011498 <ucdr_serialize_sequence_char>
 801916a:	68e1      	ldr	r1, [r4, #12]
 801916c:	4628      	mov	r0, r5
 801916e:	f7f4 f91b 	bl	800d3a8 <ucdr_serialize_uint32_t>
 8019172:	6921      	ldr	r1, [r4, #16]
 8019174:	4628      	mov	r0, r5
 8019176:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801917a:	f7f4 b915 	b.w	800d3a8 <ucdr_serialize_uint32_t>
 801917e:	4632      	mov	r2, r6
 8019180:	4630      	mov	r0, r6
 8019182:	e7ed      	b.n	8019160 <_MultiArrayDimension__cdr_serialize+0x14>
 8019184:	4770      	bx	lr
 8019186:	bf00      	nop

08019188 <get_serialized_size_std_msgs__msg__MultiArrayDimension>:
 8019188:	b570      	push	{r4, r5, r6, lr}
 801918a:	4604      	mov	r4, r0
 801918c:	b1b0      	cbz	r0, 80191bc <get_serialized_size_std_msgs__msg__MultiArrayDimension+0x34>
 801918e:	460d      	mov	r5, r1
 8019190:	4628      	mov	r0, r5
 8019192:	2104      	movs	r1, #4
 8019194:	f7f5 f9d8 	bl	800e548 <ucdr_alignment>
 8019198:	6866      	ldr	r6, [r4, #4]
 801919a:	1d6b      	adds	r3, r5, #5
 801919c:	4433      	add	r3, r6
 801919e:	181e      	adds	r6, r3, r0
 80191a0:	2104      	movs	r1, #4
 80191a2:	4630      	mov	r0, r6
 80191a4:	f7f5 f9d0 	bl	800e548 <ucdr_alignment>
 80191a8:	1d04      	adds	r4, r0, #4
 80191aa:	4434      	add	r4, r6
 80191ac:	2104      	movs	r1, #4
 80191ae:	4620      	mov	r0, r4
 80191b0:	f7f5 f9ca 	bl	800e548 <ucdr_alignment>
 80191b4:	f1c5 0504 	rsb	r5, r5, #4
 80191b8:	4428      	add	r0, r5
 80191ba:	4420      	add	r0, r4
 80191bc:	bd70      	pop	{r4, r5, r6, pc}
 80191be:	bf00      	nop

080191c0 <_MultiArrayDimension__cdr_deserialize>:
 80191c0:	b570      	push	{r4, r5, r6, lr}
 80191c2:	460c      	mov	r4, r1
 80191c4:	b082      	sub	sp, #8
 80191c6:	b1d9      	cbz	r1, 8019200 <_MultiArrayDimension__cdr_deserialize+0x40>
 80191c8:	688e      	ldr	r6, [r1, #8]
 80191ca:	6809      	ldr	r1, [r1, #0]
 80191cc:	ab01      	add	r3, sp, #4
 80191ce:	4632      	mov	r2, r6
 80191d0:	4605      	mov	r5, r0
 80191d2:	f7f8 f973 	bl	80114bc <ucdr_deserialize_sequence_char>
 80191d6:	9b01      	ldr	r3, [sp, #4]
 80191d8:	b970      	cbnz	r0, 80191f8 <_MultiArrayDimension__cdr_deserialize+0x38>
 80191da:	429e      	cmp	r6, r3
 80191dc:	d313      	bcc.n	8019206 <_MultiArrayDimension__cdr_deserialize+0x46>
 80191de:	f104 010c 	add.w	r1, r4, #12
 80191e2:	4628      	mov	r0, r5
 80191e4:	f7f4 fa10 	bl	800d608 <ucdr_deserialize_uint32_t>
 80191e8:	f104 0110 	add.w	r1, r4, #16
 80191ec:	4628      	mov	r0, r5
 80191ee:	b002      	add	sp, #8
 80191f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80191f4:	f7f4 ba08 	b.w	800d608 <ucdr_deserialize_uint32_t>
 80191f8:	b103      	cbz	r3, 80191fc <_MultiArrayDimension__cdr_deserialize+0x3c>
 80191fa:	3b01      	subs	r3, #1
 80191fc:	6063      	str	r3, [r4, #4]
 80191fe:	e7ee      	b.n	80191de <_MultiArrayDimension__cdr_deserialize+0x1e>
 8019200:	4608      	mov	r0, r1
 8019202:	b002      	add	sp, #8
 8019204:	bd70      	pop	{r4, r5, r6, pc}
 8019206:	2101      	movs	r1, #1
 8019208:	75a8      	strb	r0, [r5, #22]
 801920a:	7569      	strb	r1, [r5, #21]
 801920c:	6060      	str	r0, [r4, #4]
 801920e:	4628      	mov	r0, r5
 8019210:	f7f5 f9b0 	bl	800e574 <ucdr_align_to>
 8019214:	9901      	ldr	r1, [sp, #4]
 8019216:	4628      	mov	r0, r5
 8019218:	f7f5 f9e2 	bl	800e5e0 <ucdr_advance_buffer>
 801921c:	e7df      	b.n	80191de <_MultiArrayDimension__cdr_deserialize+0x1e>
 801921e:	bf00      	nop

08019220 <_MultiArrayDimension__max_serialized_size>:
 8019220:	b510      	push	{r4, lr}
 8019222:	2104      	movs	r1, #4
 8019224:	2000      	movs	r0, #0
 8019226:	f7f5 f98f 	bl	800e548 <ucdr_alignment>
 801922a:	1d04      	adds	r4, r0, #4
 801922c:	2104      	movs	r1, #4
 801922e:	4620      	mov	r0, r4
 8019230:	f7f5 f98a 	bl	800e548 <ucdr_alignment>
 8019234:	3004      	adds	r0, #4
 8019236:	4420      	add	r0, r4
 8019238:	bd10      	pop	{r4, pc}
 801923a:	bf00      	nop

0801923c <_MultiArrayDimension__get_serialized_size>:
 801923c:	b510      	push	{r4, lr}
 801923e:	4604      	mov	r4, r0
 8019240:	b190      	cbz	r0, 8019268 <_MultiArrayDimension__get_serialized_size+0x2c>
 8019242:	2104      	movs	r1, #4
 8019244:	2000      	movs	r0, #0
 8019246:	f7f5 f97f 	bl	800e548 <ucdr_alignment>
 801924a:	6863      	ldr	r3, [r4, #4]
 801924c:	3305      	adds	r3, #5
 801924e:	181c      	adds	r4, r3, r0
 8019250:	2104      	movs	r1, #4
 8019252:	4620      	mov	r0, r4
 8019254:	f7f5 f978 	bl	800e548 <ucdr_alignment>
 8019258:	3004      	adds	r0, #4
 801925a:	4404      	add	r4, r0
 801925c:	2104      	movs	r1, #4
 801925e:	4620      	mov	r0, r4
 8019260:	f7f5 f972 	bl	800e548 <ucdr_alignment>
 8019264:	3004      	adds	r0, #4
 8019266:	4420      	add	r0, r4
 8019268:	bd10      	pop	{r4, pc}
 801926a:	bf00      	nop

0801926c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension>:
 801926c:	4800      	ldr	r0, [pc, #0]	@ (8019270 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension+0x4>)
 801926e:	4770      	bx	lr
 8019270:	20000404 	.word	0x20000404

08019274 <ucdr_serialize_endian_array_char>:
 8019274:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019278:	4619      	mov	r1, r3
 801927a:	461f      	mov	r7, r3
 801927c:	4605      	mov	r5, r0
 801927e:	4690      	mov	r8, r2
 8019280:	f7f5 f90a 	bl	800e498 <ucdr_check_buffer_available_for>
 8019284:	b9e0      	cbnz	r0, 80192c0 <ucdr_serialize_endian_array_char+0x4c>
 8019286:	463e      	mov	r6, r7
 8019288:	e009      	b.n	801929e <ucdr_serialize_endian_array_char+0x2a>
 801928a:	68a8      	ldr	r0, [r5, #8]
 801928c:	f002 f937 	bl	801b4fe <memcpy>
 8019290:	68ab      	ldr	r3, [r5, #8]
 8019292:	6928      	ldr	r0, [r5, #16]
 8019294:	4423      	add	r3, r4
 8019296:	4420      	add	r0, r4
 8019298:	1b36      	subs	r6, r6, r4
 801929a:	60ab      	str	r3, [r5, #8]
 801929c:	6128      	str	r0, [r5, #16]
 801929e:	4631      	mov	r1, r6
 80192a0:	2201      	movs	r2, #1
 80192a2:	4628      	mov	r0, r5
 80192a4:	f7f5 f980 	bl	800e5a8 <ucdr_check_final_buffer_behavior_array>
 80192a8:	1bb9      	subs	r1, r7, r6
 80192aa:	4441      	add	r1, r8
 80192ac:	4604      	mov	r4, r0
 80192ae:	4602      	mov	r2, r0
 80192b0:	2800      	cmp	r0, #0
 80192b2:	d1ea      	bne.n	801928a <ucdr_serialize_endian_array_char+0x16>
 80192b4:	2301      	movs	r3, #1
 80192b6:	7da8      	ldrb	r0, [r5, #22]
 80192b8:	756b      	strb	r3, [r5, #21]
 80192ba:	4058      	eors	r0, r3
 80192bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80192c0:	463a      	mov	r2, r7
 80192c2:	68a8      	ldr	r0, [r5, #8]
 80192c4:	4641      	mov	r1, r8
 80192c6:	f002 f91a 	bl	801b4fe <memcpy>
 80192ca:	68aa      	ldr	r2, [r5, #8]
 80192cc:	692b      	ldr	r3, [r5, #16]
 80192ce:	443a      	add	r2, r7
 80192d0:	443b      	add	r3, r7
 80192d2:	60aa      	str	r2, [r5, #8]
 80192d4:	612b      	str	r3, [r5, #16]
 80192d6:	e7ed      	b.n	80192b4 <ucdr_serialize_endian_array_char+0x40>

080192d8 <ucdr_deserialize_endian_array_char>:
 80192d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80192dc:	4619      	mov	r1, r3
 80192de:	461f      	mov	r7, r3
 80192e0:	4605      	mov	r5, r0
 80192e2:	4690      	mov	r8, r2
 80192e4:	f7f5 f8d8 	bl	800e498 <ucdr_check_buffer_available_for>
 80192e8:	b9e0      	cbnz	r0, 8019324 <ucdr_deserialize_endian_array_char+0x4c>
 80192ea:	463e      	mov	r6, r7
 80192ec:	e009      	b.n	8019302 <ucdr_deserialize_endian_array_char+0x2a>
 80192ee:	68a9      	ldr	r1, [r5, #8]
 80192f0:	f002 f905 	bl	801b4fe <memcpy>
 80192f4:	68ab      	ldr	r3, [r5, #8]
 80192f6:	6928      	ldr	r0, [r5, #16]
 80192f8:	4423      	add	r3, r4
 80192fa:	4420      	add	r0, r4
 80192fc:	1b36      	subs	r6, r6, r4
 80192fe:	60ab      	str	r3, [r5, #8]
 8019300:	6128      	str	r0, [r5, #16]
 8019302:	2201      	movs	r2, #1
 8019304:	4631      	mov	r1, r6
 8019306:	4628      	mov	r0, r5
 8019308:	f7f5 f94e 	bl	800e5a8 <ucdr_check_final_buffer_behavior_array>
 801930c:	4604      	mov	r4, r0
 801930e:	1bb8      	subs	r0, r7, r6
 8019310:	4440      	add	r0, r8
 8019312:	4622      	mov	r2, r4
 8019314:	2c00      	cmp	r4, #0
 8019316:	d1ea      	bne.n	80192ee <ucdr_deserialize_endian_array_char+0x16>
 8019318:	2301      	movs	r3, #1
 801931a:	7da8      	ldrb	r0, [r5, #22]
 801931c:	756b      	strb	r3, [r5, #21]
 801931e:	4058      	eors	r0, r3
 8019320:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019324:	463a      	mov	r2, r7
 8019326:	68a9      	ldr	r1, [r5, #8]
 8019328:	4640      	mov	r0, r8
 801932a:	f002 f8e8 	bl	801b4fe <memcpy>
 801932e:	68aa      	ldr	r2, [r5, #8]
 8019330:	692b      	ldr	r3, [r5, #16]
 8019332:	443a      	add	r2, r7
 8019334:	443b      	add	r3, r7
 8019336:	60aa      	str	r2, [r5, #8]
 8019338:	612b      	str	r3, [r5, #16]
 801933a:	e7ed      	b.n	8019318 <ucdr_deserialize_endian_array_char+0x40>

0801933c <ucdr_serialize_array_uint8_t>:
 801933c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019340:	4688      	mov	r8, r1
 8019342:	4611      	mov	r1, r2
 8019344:	4617      	mov	r7, r2
 8019346:	4605      	mov	r5, r0
 8019348:	f7f5 f8a6 	bl	800e498 <ucdr_check_buffer_available_for>
 801934c:	b9e0      	cbnz	r0, 8019388 <ucdr_serialize_array_uint8_t+0x4c>
 801934e:	463e      	mov	r6, r7
 8019350:	e009      	b.n	8019366 <ucdr_serialize_array_uint8_t+0x2a>
 8019352:	68a8      	ldr	r0, [r5, #8]
 8019354:	f002 f8d3 	bl	801b4fe <memcpy>
 8019358:	68aa      	ldr	r2, [r5, #8]
 801935a:	692b      	ldr	r3, [r5, #16]
 801935c:	4422      	add	r2, r4
 801935e:	4423      	add	r3, r4
 8019360:	1b36      	subs	r6, r6, r4
 8019362:	60aa      	str	r2, [r5, #8]
 8019364:	612b      	str	r3, [r5, #16]
 8019366:	4631      	mov	r1, r6
 8019368:	2201      	movs	r2, #1
 801936a:	4628      	mov	r0, r5
 801936c:	f7f5 f91c 	bl	800e5a8 <ucdr_check_final_buffer_behavior_array>
 8019370:	1bb9      	subs	r1, r7, r6
 8019372:	4441      	add	r1, r8
 8019374:	4604      	mov	r4, r0
 8019376:	4602      	mov	r2, r0
 8019378:	2800      	cmp	r0, #0
 801937a:	d1ea      	bne.n	8019352 <ucdr_serialize_array_uint8_t+0x16>
 801937c:	2301      	movs	r3, #1
 801937e:	7da8      	ldrb	r0, [r5, #22]
 8019380:	756b      	strb	r3, [r5, #21]
 8019382:	4058      	eors	r0, r3
 8019384:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019388:	463a      	mov	r2, r7
 801938a:	68a8      	ldr	r0, [r5, #8]
 801938c:	4641      	mov	r1, r8
 801938e:	f002 f8b6 	bl	801b4fe <memcpy>
 8019392:	68aa      	ldr	r2, [r5, #8]
 8019394:	692b      	ldr	r3, [r5, #16]
 8019396:	443a      	add	r2, r7
 8019398:	443b      	add	r3, r7
 801939a:	60aa      	str	r2, [r5, #8]
 801939c:	612b      	str	r3, [r5, #16]
 801939e:	e7ed      	b.n	801937c <ucdr_serialize_array_uint8_t+0x40>

080193a0 <ucdr_serialize_endian_array_uint8_t>:
 80193a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80193a4:	4619      	mov	r1, r3
 80193a6:	461f      	mov	r7, r3
 80193a8:	4605      	mov	r5, r0
 80193aa:	4690      	mov	r8, r2
 80193ac:	f7f5 f874 	bl	800e498 <ucdr_check_buffer_available_for>
 80193b0:	b9e0      	cbnz	r0, 80193ec <ucdr_serialize_endian_array_uint8_t+0x4c>
 80193b2:	463e      	mov	r6, r7
 80193b4:	e009      	b.n	80193ca <ucdr_serialize_endian_array_uint8_t+0x2a>
 80193b6:	68a8      	ldr	r0, [r5, #8]
 80193b8:	f002 f8a1 	bl	801b4fe <memcpy>
 80193bc:	68ab      	ldr	r3, [r5, #8]
 80193be:	6928      	ldr	r0, [r5, #16]
 80193c0:	4423      	add	r3, r4
 80193c2:	4420      	add	r0, r4
 80193c4:	1b36      	subs	r6, r6, r4
 80193c6:	60ab      	str	r3, [r5, #8]
 80193c8:	6128      	str	r0, [r5, #16]
 80193ca:	4631      	mov	r1, r6
 80193cc:	2201      	movs	r2, #1
 80193ce:	4628      	mov	r0, r5
 80193d0:	f7f5 f8ea 	bl	800e5a8 <ucdr_check_final_buffer_behavior_array>
 80193d4:	1bb9      	subs	r1, r7, r6
 80193d6:	4441      	add	r1, r8
 80193d8:	4604      	mov	r4, r0
 80193da:	4602      	mov	r2, r0
 80193dc:	2800      	cmp	r0, #0
 80193de:	d1ea      	bne.n	80193b6 <ucdr_serialize_endian_array_uint8_t+0x16>
 80193e0:	2301      	movs	r3, #1
 80193e2:	7da8      	ldrb	r0, [r5, #22]
 80193e4:	756b      	strb	r3, [r5, #21]
 80193e6:	4058      	eors	r0, r3
 80193e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80193ec:	463a      	mov	r2, r7
 80193ee:	68a8      	ldr	r0, [r5, #8]
 80193f0:	4641      	mov	r1, r8
 80193f2:	f002 f884 	bl	801b4fe <memcpy>
 80193f6:	68aa      	ldr	r2, [r5, #8]
 80193f8:	692b      	ldr	r3, [r5, #16]
 80193fa:	443a      	add	r2, r7
 80193fc:	443b      	add	r3, r7
 80193fe:	60aa      	str	r2, [r5, #8]
 8019400:	612b      	str	r3, [r5, #16]
 8019402:	e7ed      	b.n	80193e0 <ucdr_serialize_endian_array_uint8_t+0x40>

08019404 <ucdr_deserialize_array_uint8_t>:
 8019404:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019408:	4688      	mov	r8, r1
 801940a:	4611      	mov	r1, r2
 801940c:	4617      	mov	r7, r2
 801940e:	4605      	mov	r5, r0
 8019410:	f7f5 f842 	bl	800e498 <ucdr_check_buffer_available_for>
 8019414:	b9e0      	cbnz	r0, 8019450 <ucdr_deserialize_array_uint8_t+0x4c>
 8019416:	463e      	mov	r6, r7
 8019418:	e009      	b.n	801942e <ucdr_deserialize_array_uint8_t+0x2a>
 801941a:	68a9      	ldr	r1, [r5, #8]
 801941c:	f002 f86f 	bl	801b4fe <memcpy>
 8019420:	68aa      	ldr	r2, [r5, #8]
 8019422:	692b      	ldr	r3, [r5, #16]
 8019424:	4422      	add	r2, r4
 8019426:	4423      	add	r3, r4
 8019428:	1b36      	subs	r6, r6, r4
 801942a:	60aa      	str	r2, [r5, #8]
 801942c:	612b      	str	r3, [r5, #16]
 801942e:	2201      	movs	r2, #1
 8019430:	4631      	mov	r1, r6
 8019432:	4628      	mov	r0, r5
 8019434:	f7f5 f8b8 	bl	800e5a8 <ucdr_check_final_buffer_behavior_array>
 8019438:	4604      	mov	r4, r0
 801943a:	1bb8      	subs	r0, r7, r6
 801943c:	4440      	add	r0, r8
 801943e:	4622      	mov	r2, r4
 8019440:	2c00      	cmp	r4, #0
 8019442:	d1ea      	bne.n	801941a <ucdr_deserialize_array_uint8_t+0x16>
 8019444:	2301      	movs	r3, #1
 8019446:	7da8      	ldrb	r0, [r5, #22]
 8019448:	756b      	strb	r3, [r5, #21]
 801944a:	4058      	eors	r0, r3
 801944c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019450:	463a      	mov	r2, r7
 8019452:	68a9      	ldr	r1, [r5, #8]
 8019454:	4640      	mov	r0, r8
 8019456:	f002 f852 	bl	801b4fe <memcpy>
 801945a:	68aa      	ldr	r2, [r5, #8]
 801945c:	692b      	ldr	r3, [r5, #16]
 801945e:	443a      	add	r2, r7
 8019460:	443b      	add	r3, r7
 8019462:	60aa      	str	r2, [r5, #8]
 8019464:	612b      	str	r3, [r5, #16]
 8019466:	e7ed      	b.n	8019444 <ucdr_deserialize_array_uint8_t+0x40>

08019468 <ucdr_deserialize_endian_array_uint8_t>:
 8019468:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801946c:	4619      	mov	r1, r3
 801946e:	461f      	mov	r7, r3
 8019470:	4605      	mov	r5, r0
 8019472:	4690      	mov	r8, r2
 8019474:	f7f5 f810 	bl	800e498 <ucdr_check_buffer_available_for>
 8019478:	b9e0      	cbnz	r0, 80194b4 <ucdr_deserialize_endian_array_uint8_t+0x4c>
 801947a:	463e      	mov	r6, r7
 801947c:	e009      	b.n	8019492 <ucdr_deserialize_endian_array_uint8_t+0x2a>
 801947e:	68a9      	ldr	r1, [r5, #8]
 8019480:	f002 f83d 	bl	801b4fe <memcpy>
 8019484:	68ab      	ldr	r3, [r5, #8]
 8019486:	6928      	ldr	r0, [r5, #16]
 8019488:	4423      	add	r3, r4
 801948a:	4420      	add	r0, r4
 801948c:	1b36      	subs	r6, r6, r4
 801948e:	60ab      	str	r3, [r5, #8]
 8019490:	6128      	str	r0, [r5, #16]
 8019492:	2201      	movs	r2, #1
 8019494:	4631      	mov	r1, r6
 8019496:	4628      	mov	r0, r5
 8019498:	f7f5 f886 	bl	800e5a8 <ucdr_check_final_buffer_behavior_array>
 801949c:	4604      	mov	r4, r0
 801949e:	1bb8      	subs	r0, r7, r6
 80194a0:	4440      	add	r0, r8
 80194a2:	4622      	mov	r2, r4
 80194a4:	2c00      	cmp	r4, #0
 80194a6:	d1ea      	bne.n	801947e <ucdr_deserialize_endian_array_uint8_t+0x16>
 80194a8:	2301      	movs	r3, #1
 80194aa:	7da8      	ldrb	r0, [r5, #22]
 80194ac:	756b      	strb	r3, [r5, #21]
 80194ae:	4058      	eors	r0, r3
 80194b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80194b4:	463a      	mov	r2, r7
 80194b6:	68a9      	ldr	r1, [r5, #8]
 80194b8:	4640      	mov	r0, r8
 80194ba:	f002 f820 	bl	801b4fe <memcpy>
 80194be:	68aa      	ldr	r2, [r5, #8]
 80194c0:	692b      	ldr	r3, [r5, #16]
 80194c2:	443a      	add	r2, r7
 80194c4:	443b      	add	r3, r7
 80194c6:	60aa      	str	r2, [r5, #8]
 80194c8:	612b      	str	r3, [r5, #16]
 80194ca:	e7ed      	b.n	80194a8 <ucdr_deserialize_endian_array_uint8_t+0x40>

080194cc <ucdr_serialize_endian_array_double>:
 80194cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80194d0:	4688      	mov	r8, r1
 80194d2:	2108      	movs	r1, #8
 80194d4:	4604      	mov	r4, r0
 80194d6:	4616      	mov	r6, r2
 80194d8:	461f      	mov	r7, r3
 80194da:	f7f5 f83d 	bl	800e558 <ucdr_buffer_alignment>
 80194de:	4601      	mov	r1, r0
 80194e0:	4620      	mov	r0, r4
 80194e2:	7d65      	ldrb	r5, [r4, #21]
 80194e4:	f7f5 f87c 	bl	800e5e0 <ucdr_advance_buffer>
 80194e8:	f1b8 0f01 	cmp.w	r8, #1
 80194ec:	7565      	strb	r5, [r4, #21]
 80194ee:	d00f      	beq.n	8019510 <ucdr_serialize_endian_array_double+0x44>
 80194f0:	2500      	movs	r5, #0
 80194f2:	b147      	cbz	r7, 8019506 <ucdr_serialize_endian_array_double+0x3a>
 80194f4:	ecb6 0b02 	vldmia	r6!, {d0}
 80194f8:	4641      	mov	r1, r8
 80194fa:	4620      	mov	r0, r4
 80194fc:	3501      	adds	r5, #1
 80194fe:	f7f4 fd65 	bl	800dfcc <ucdr_serialize_endian_double>
 8019502:	42af      	cmp	r7, r5
 8019504:	d1f6      	bne.n	80194f4 <ucdr_serialize_endian_array_double+0x28>
 8019506:	7da0      	ldrb	r0, [r4, #22]
 8019508:	f080 0001 	eor.w	r0, r0, #1
 801950c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019510:	00ff      	lsls	r7, r7, #3
 8019512:	4639      	mov	r1, r7
 8019514:	4620      	mov	r0, r4
 8019516:	f7f4 ffbf 	bl	800e498 <ucdr_check_buffer_available_for>
 801951a:	b9f8      	cbnz	r0, 801955c <ucdr_serialize_endian_array_double+0x90>
 801951c:	46b8      	mov	r8, r7
 801951e:	e00a      	b.n	8019536 <ucdr_serialize_endian_array_double+0x6a>
 8019520:	68a0      	ldr	r0, [r4, #8]
 8019522:	f001 ffec 	bl	801b4fe <memcpy>
 8019526:	68a2      	ldr	r2, [r4, #8]
 8019528:	6923      	ldr	r3, [r4, #16]
 801952a:	442a      	add	r2, r5
 801952c:	442b      	add	r3, r5
 801952e:	eba8 0805 	sub.w	r8, r8, r5
 8019532:	60a2      	str	r2, [r4, #8]
 8019534:	6123      	str	r3, [r4, #16]
 8019536:	4641      	mov	r1, r8
 8019538:	2208      	movs	r2, #8
 801953a:	4620      	mov	r0, r4
 801953c:	f7f5 f834 	bl	800e5a8 <ucdr_check_final_buffer_behavior_array>
 8019540:	eba7 0108 	sub.w	r1, r7, r8
 8019544:	4431      	add	r1, r6
 8019546:	4605      	mov	r5, r0
 8019548:	4602      	mov	r2, r0
 801954a:	2800      	cmp	r0, #0
 801954c:	d1e8      	bne.n	8019520 <ucdr_serialize_endian_array_double+0x54>
 801954e:	7da0      	ldrb	r0, [r4, #22]
 8019550:	2308      	movs	r3, #8
 8019552:	7563      	strb	r3, [r4, #21]
 8019554:	f080 0001 	eor.w	r0, r0, #1
 8019558:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801955c:	463a      	mov	r2, r7
 801955e:	68a0      	ldr	r0, [r4, #8]
 8019560:	4631      	mov	r1, r6
 8019562:	f001 ffcc 	bl	801b4fe <memcpy>
 8019566:	68a2      	ldr	r2, [r4, #8]
 8019568:	6923      	ldr	r3, [r4, #16]
 801956a:	443a      	add	r2, r7
 801956c:	441f      	add	r7, r3
 801956e:	60a2      	str	r2, [r4, #8]
 8019570:	6127      	str	r7, [r4, #16]
 8019572:	e7ec      	b.n	801954e <ucdr_serialize_endian_array_double+0x82>

08019574 <ucdr_deserialize_endian_array_double>:
 8019574:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019578:	4688      	mov	r8, r1
 801957a:	2108      	movs	r1, #8
 801957c:	4605      	mov	r5, r0
 801957e:	4614      	mov	r4, r2
 8019580:	461f      	mov	r7, r3
 8019582:	f7f4 ffe9 	bl	800e558 <ucdr_buffer_alignment>
 8019586:	4601      	mov	r1, r0
 8019588:	4628      	mov	r0, r5
 801958a:	7d6e      	ldrb	r6, [r5, #21]
 801958c:	f7f5 f828 	bl	800e5e0 <ucdr_advance_buffer>
 8019590:	f1b8 0f01 	cmp.w	r8, #1
 8019594:	756e      	strb	r6, [r5, #21]
 8019596:	d010      	beq.n	80195ba <ucdr_deserialize_endian_array_double+0x46>
 8019598:	2600      	movs	r6, #0
 801959a:	b14f      	cbz	r7, 80195b0 <ucdr_deserialize_endian_array_double+0x3c>
 801959c:	4622      	mov	r2, r4
 801959e:	4641      	mov	r1, r8
 80195a0:	4628      	mov	r0, r5
 80195a2:	3601      	adds	r6, #1
 80195a4:	f7f4 feaa 	bl	800e2fc <ucdr_deserialize_endian_double>
 80195a8:	42b7      	cmp	r7, r6
 80195aa:	f104 0408 	add.w	r4, r4, #8
 80195ae:	d1f5      	bne.n	801959c <ucdr_deserialize_endian_array_double+0x28>
 80195b0:	7da8      	ldrb	r0, [r5, #22]
 80195b2:	f080 0001 	eor.w	r0, r0, #1
 80195b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80195ba:	00ff      	lsls	r7, r7, #3
 80195bc:	4639      	mov	r1, r7
 80195be:	4628      	mov	r0, r5
 80195c0:	f7f4 ff6a 	bl	800e498 <ucdr_check_buffer_available_for>
 80195c4:	b9f8      	cbnz	r0, 8019606 <ucdr_deserialize_endian_array_double+0x92>
 80195c6:	46b8      	mov	r8, r7
 80195c8:	e00a      	b.n	80195e0 <ucdr_deserialize_endian_array_double+0x6c>
 80195ca:	68a9      	ldr	r1, [r5, #8]
 80195cc:	f001 ff97 	bl	801b4fe <memcpy>
 80195d0:	68aa      	ldr	r2, [r5, #8]
 80195d2:	692b      	ldr	r3, [r5, #16]
 80195d4:	4432      	add	r2, r6
 80195d6:	4433      	add	r3, r6
 80195d8:	eba8 0806 	sub.w	r8, r8, r6
 80195dc:	60aa      	str	r2, [r5, #8]
 80195de:	612b      	str	r3, [r5, #16]
 80195e0:	2208      	movs	r2, #8
 80195e2:	4641      	mov	r1, r8
 80195e4:	4628      	mov	r0, r5
 80195e6:	f7f4 ffdf 	bl	800e5a8 <ucdr_check_final_buffer_behavior_array>
 80195ea:	4606      	mov	r6, r0
 80195ec:	eba7 0008 	sub.w	r0, r7, r8
 80195f0:	4420      	add	r0, r4
 80195f2:	4632      	mov	r2, r6
 80195f4:	2e00      	cmp	r6, #0
 80195f6:	d1e8      	bne.n	80195ca <ucdr_deserialize_endian_array_double+0x56>
 80195f8:	7da8      	ldrb	r0, [r5, #22]
 80195fa:	2308      	movs	r3, #8
 80195fc:	756b      	strb	r3, [r5, #21]
 80195fe:	f080 0001 	eor.w	r0, r0, #1
 8019602:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019606:	463a      	mov	r2, r7
 8019608:	68a9      	ldr	r1, [r5, #8]
 801960a:	4620      	mov	r0, r4
 801960c:	f001 ff77 	bl	801b4fe <memcpy>
 8019610:	68aa      	ldr	r2, [r5, #8]
 8019612:	692b      	ldr	r3, [r5, #16]
 8019614:	443a      	add	r2, r7
 8019616:	441f      	add	r7, r3
 8019618:	60aa      	str	r2, [r5, #8]
 801961a:	612f      	str	r7, [r5, #16]
 801961c:	e7ec      	b.n	80195f8 <ucdr_deserialize_endian_array_double+0x84>
 801961e:	bf00      	nop

08019620 <ucdr_serialize_string>:
 8019620:	b510      	push	{r4, lr}
 8019622:	b082      	sub	sp, #8
 8019624:	4604      	mov	r4, r0
 8019626:	4608      	mov	r0, r1
 8019628:	9101      	str	r1, [sp, #4]
 801962a:	f7e6 fe03 	bl	8000234 <strlen>
 801962e:	9901      	ldr	r1, [sp, #4]
 8019630:	1c42      	adds	r2, r0, #1
 8019632:	4620      	mov	r0, r4
 8019634:	b002      	add	sp, #8
 8019636:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801963a:	f7f7 bf2d 	b.w	8011498 <ucdr_serialize_sequence_char>
 801963e:	bf00      	nop

08019640 <ucdr_deserialize_string>:
 8019640:	b500      	push	{lr}
 8019642:	b083      	sub	sp, #12
 8019644:	ab01      	add	r3, sp, #4
 8019646:	f7f7 ff39 	bl	80114bc <ucdr_deserialize_sequence_char>
 801964a:	b003      	add	sp, #12
 801964c:	f85d fb04 	ldr.w	pc, [sp], #4

08019650 <uxr_init_input_best_effort_stream>:
 8019650:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8019654:	8003      	strh	r3, [r0, #0]
 8019656:	4770      	bx	lr

08019658 <uxr_reset_input_best_effort_stream>:
 8019658:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801965c:	8003      	strh	r3, [r0, #0]
 801965e:	4770      	bx	lr

08019660 <uxr_receive_best_effort_message>:
 8019660:	b538      	push	{r3, r4, r5, lr}
 8019662:	4604      	mov	r4, r0
 8019664:	8800      	ldrh	r0, [r0, #0]
 8019666:	460d      	mov	r5, r1
 8019668:	f000 fd42 	bl	801a0f0 <uxr_seq_num_cmp>
 801966c:	4603      	mov	r3, r0
 801966e:	2b00      	cmp	r3, #0
 8019670:	ea4f 70d0 	mov.w	r0, r0, lsr #31
 8019674:	bfb8      	it	lt
 8019676:	8025      	strhlt	r5, [r4, #0]
 8019678:	bd38      	pop	{r3, r4, r5, pc}
 801967a:	bf00      	nop

0801967c <on_full_input_buffer>:
 801967c:	b570      	push	{r4, r5, r6, lr}
 801967e:	4605      	mov	r5, r0
 8019680:	460c      	mov	r4, r1
 8019682:	682b      	ldr	r3, [r5, #0]
 8019684:	6809      	ldr	r1, [r1, #0]
 8019686:	8920      	ldrh	r0, [r4, #8]
 8019688:	6862      	ldr	r2, [r4, #4]
 801968a:	fbb2 f2f0 	udiv	r2, r2, r0
 801968e:	eba3 0c01 	sub.w	ip, r3, r1
 8019692:	fbbc fcf2 	udiv	ip, ip, r2
 8019696:	f10c 0c01 	add.w	ip, ip, #1
 801969a:	fa1f f38c 	uxth.w	r3, ip
 801969e:	fbb3 f6f0 	udiv	r6, r3, r0
 80196a2:	fb00 3316 	mls	r3, r0, r6, r3
 80196a6:	b29b      	uxth	r3, r3
 80196a8:	fb02 f303 	mul.w	r3, r2, r3
 80196ac:	1d18      	adds	r0, r3, #4
 80196ae:	4408      	add	r0, r1
 80196b0:	7d26      	ldrb	r6, [r4, #20]
 80196b2:	f850 2c04 	ldr.w	r2, [r0, #-4]
 80196b6:	b116      	cbz	r6, 80196be <on_full_input_buffer+0x42>
 80196b8:	2600      	movs	r6, #0
 80196ba:	f840 6c04 	str.w	r6, [r0, #-4]
 80196be:	2a03      	cmp	r2, #3
 80196c0:	d801      	bhi.n	80196c6 <on_full_input_buffer+0x4a>
 80196c2:	2001      	movs	r0, #1
 80196c4:	bd70      	pop	{r4, r5, r6, pc}
 80196c6:	3308      	adds	r3, #8
 80196c8:	4419      	add	r1, r3
 80196ca:	4628      	mov	r0, r5
 80196cc:	692b      	ldr	r3, [r5, #16]
 80196ce:	3a04      	subs	r2, #4
 80196d0:	f7f4 ff2e 	bl	800e530 <ucdr_init_buffer_origin>
 80196d4:	4628      	mov	r0, r5
 80196d6:	4903      	ldr	r1, [pc, #12]	@ (80196e4 <on_full_input_buffer+0x68>)
 80196d8:	4622      	mov	r2, r4
 80196da:	f7f4 ff05 	bl	800e4e8 <ucdr_set_on_full_buffer_callback>
 80196de:	2000      	movs	r0, #0
 80196e0:	bd70      	pop	{r4, r5, r6, pc}
 80196e2:	bf00      	nop
 80196e4:	0801967d 	.word	0x0801967d

080196e8 <uxr_init_input_reliable_stream>:
 80196e8:	b500      	push	{lr}
 80196ea:	e9c0 1200 	strd	r1, r2, [r0]
 80196ee:	f04f 0e00 	mov.w	lr, #0
 80196f2:	9a01      	ldr	r2, [sp, #4]
 80196f4:	8103      	strh	r3, [r0, #8]
 80196f6:	6102      	str	r2, [r0, #16]
 80196f8:	f880 e014 	strb.w	lr, [r0, #20]
 80196fc:	b1d3      	cbz	r3, 8019734 <uxr_init_input_reliable_stream+0x4c>
 80196fe:	f8c1 e000 	str.w	lr, [r1]
 8019702:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8019706:	f1bc 0f01 	cmp.w	ip, #1
 801970a:	d913      	bls.n	8019734 <uxr_init_input_reliable_stream+0x4c>
 801970c:	2301      	movs	r3, #1
 801970e:	fbb3 f1fc 	udiv	r1, r3, ip
 8019712:	fb0c 3111 	mls	r1, ip, r1, r3
 8019716:	b289      	uxth	r1, r1
 8019718:	6842      	ldr	r2, [r0, #4]
 801971a:	fbb2 f2fc 	udiv	r2, r2, ip
 801971e:	fb01 f202 	mul.w	r2, r1, r2
 8019722:	6801      	ldr	r1, [r0, #0]
 8019724:	f841 e002 	str.w	lr, [r1, r2]
 8019728:	3301      	adds	r3, #1
 801972a:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801972e:	b29b      	uxth	r3, r3
 8019730:	459c      	cmp	ip, r3
 8019732:	d8ec      	bhi.n	801970e <uxr_init_input_reliable_stream+0x26>
 8019734:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8019738:	60c3      	str	r3, [r0, #12]
 801973a:	f85d fb04 	ldr.w	pc, [sp], #4
 801973e:	bf00      	nop

08019740 <uxr_reset_input_reliable_stream>:
 8019740:	8901      	ldrh	r1, [r0, #8]
 8019742:	b1e9      	cbz	r1, 8019780 <uxr_reset_input_reliable_stream+0x40>
 8019744:	f04f 0c00 	mov.w	ip, #0
 8019748:	b500      	push	{lr}
 801974a:	4663      	mov	r3, ip
 801974c:	46e6      	mov	lr, ip
 801974e:	fbb3 f2f1 	udiv	r2, r3, r1
 8019752:	fb01 3312 	mls	r3, r1, r2, r3
 8019756:	b29b      	uxth	r3, r3
 8019758:	6842      	ldr	r2, [r0, #4]
 801975a:	fbb2 f2f1 	udiv	r2, r2, r1
 801975e:	fb02 f303 	mul.w	r3, r2, r3
 8019762:	6802      	ldr	r2, [r0, #0]
 8019764:	f842 e003 	str.w	lr, [r2, r3]
 8019768:	f10c 0c01 	add.w	ip, ip, #1
 801976c:	8901      	ldrh	r1, [r0, #8]
 801976e:	fa1f f38c 	uxth.w	r3, ip
 8019772:	4299      	cmp	r1, r3
 8019774:	d8eb      	bhi.n	801974e <uxr_reset_input_reliable_stream+0xe>
 8019776:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801977a:	60c3      	str	r3, [r0, #12]
 801977c:	f85d fb04 	ldr.w	pc, [sp], #4
 8019780:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8019784:	60c3      	str	r3, [r0, #12]
 8019786:	4770      	bx	lr

08019788 <uxr_receive_reliable_message>:
 8019788:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801978c:	4604      	mov	r4, r0
 801978e:	460d      	mov	r5, r1
 8019790:	8901      	ldrh	r1, [r0, #8]
 8019792:	8980      	ldrh	r0, [r0, #12]
 8019794:	4690      	mov	r8, r2
 8019796:	461f      	mov	r7, r3
 8019798:	f000 fca2 	bl	801a0e0 <uxr_seq_num_add>
 801979c:	4629      	mov	r1, r5
 801979e:	4606      	mov	r6, r0
 80197a0:	89a0      	ldrh	r0, [r4, #12]
 80197a2:	f000 fca5 	bl	801a0f0 <uxr_seq_num_cmp>
 80197a6:	2800      	cmp	r0, #0
 80197a8:	db0a      	blt.n	80197c0 <uxr_receive_reliable_message+0x38>
 80197aa:	2600      	movs	r6, #0
 80197ac:	89e0      	ldrh	r0, [r4, #14]
 80197ae:	4629      	mov	r1, r5
 80197b0:	f000 fc9e 	bl	801a0f0 <uxr_seq_num_cmp>
 80197b4:	2800      	cmp	r0, #0
 80197b6:	da00      	bge.n	80197ba <uxr_receive_reliable_message+0x32>
 80197b8:	81e5      	strh	r5, [r4, #14]
 80197ba:	4630      	mov	r0, r6
 80197bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80197c0:	4630      	mov	r0, r6
 80197c2:	4629      	mov	r1, r5
 80197c4:	f000 fc94 	bl	801a0f0 <uxr_seq_num_cmp>
 80197c8:	2800      	cmp	r0, #0
 80197ca:	dbee      	blt.n	80197aa <uxr_receive_reliable_message+0x22>
 80197cc:	6923      	ldr	r3, [r4, #16]
 80197ce:	4640      	mov	r0, r8
 80197d0:	4798      	blx	r3
 80197d2:	2101      	movs	r1, #1
 80197d4:	4681      	mov	r9, r0
 80197d6:	89a0      	ldrh	r0, [r4, #12]
 80197d8:	f000 fc82 	bl	801a0e0 <uxr_seq_num_add>
 80197dc:	f1b9 0f00 	cmp.w	r9, #0
 80197e0:	d101      	bne.n	80197e6 <uxr_receive_reliable_message+0x5e>
 80197e2:	4285      	cmp	r5, r0
 80197e4:	d047      	beq.n	8019876 <uxr_receive_reliable_message+0xee>
 80197e6:	8922      	ldrh	r2, [r4, #8]
 80197e8:	fbb5 f0f2 	udiv	r0, r5, r2
 80197ec:	fb02 5010 	mls	r0, r2, r0, r5
 80197f0:	b280      	uxth	r0, r0
 80197f2:	6863      	ldr	r3, [r4, #4]
 80197f4:	fbb3 f3f2 	udiv	r3, r3, r2
 80197f8:	fb00 f303 	mul.w	r3, r0, r3
 80197fc:	6820      	ldr	r0, [r4, #0]
 80197fe:	3304      	adds	r3, #4
 8019800:	4418      	add	r0, r3
 8019802:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8019806:	2b00      	cmp	r3, #0
 8019808:	d1cf      	bne.n	80197aa <uxr_receive_reliable_message+0x22>
 801980a:	4641      	mov	r1, r8
 801980c:	463a      	mov	r2, r7
 801980e:	f001 fe76 	bl	801b4fe <memcpy>
 8019812:	8921      	ldrh	r1, [r4, #8]
 8019814:	fbb5 f2f1 	udiv	r2, r5, r1
 8019818:	fb01 5212 	mls	r2, r1, r2, r5
 801981c:	b292      	uxth	r2, r2
 801981e:	6863      	ldr	r3, [r4, #4]
 8019820:	fbb3 f3f1 	udiv	r3, r3, r1
 8019824:	fb02 f303 	mul.w	r3, r2, r3
 8019828:	6822      	ldr	r2, [r4, #0]
 801982a:	50d7      	str	r7, [r2, r3]
 801982c:	9a08      	ldr	r2, [sp, #32]
 801982e:	2301      	movs	r3, #1
 8019830:	7013      	strb	r3, [r2, #0]
 8019832:	f1b9 0f00 	cmp.w	r9, #0
 8019836:	d0b8      	beq.n	80197aa <uxr_receive_reliable_message+0x22>
 8019838:	89a6      	ldrh	r6, [r4, #12]
 801983a:	4630      	mov	r0, r6
 801983c:	2101      	movs	r1, #1
 801983e:	f000 fc4f 	bl	801a0e0 <uxr_seq_num_add>
 8019842:	8922      	ldrh	r2, [r4, #8]
 8019844:	6863      	ldr	r3, [r4, #4]
 8019846:	fbb3 f3f2 	udiv	r3, r3, r2
 801984a:	4606      	mov	r6, r0
 801984c:	fbb0 f0f2 	udiv	r0, r0, r2
 8019850:	fb02 6010 	mls	r0, r2, r0, r6
 8019854:	b280      	uxth	r0, r0
 8019856:	fb00 f303 	mul.w	r3, r0, r3
 801985a:	6820      	ldr	r0, [r4, #0]
 801985c:	3304      	adds	r3, #4
 801985e:	4418      	add	r0, r3
 8019860:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8019864:	2b00      	cmp	r3, #0
 8019866:	d0a0      	beq.n	80197aa <uxr_receive_reliable_message+0x22>
 8019868:	6923      	ldr	r3, [r4, #16]
 801986a:	4798      	blx	r3
 801986c:	2802      	cmp	r0, #2
 801986e:	d008      	beq.n	8019882 <uxr_receive_reliable_message+0xfa>
 8019870:	2801      	cmp	r0, #1
 8019872:	d0e2      	beq.n	801983a <uxr_receive_reliable_message+0xb2>
 8019874:	e799      	b.n	80197aa <uxr_receive_reliable_message+0x22>
 8019876:	9b08      	ldr	r3, [sp, #32]
 8019878:	81a5      	strh	r5, [r4, #12]
 801987a:	2601      	movs	r6, #1
 801987c:	f883 9000 	strb.w	r9, [r3]
 8019880:	e794      	b.n	80197ac <uxr_receive_reliable_message+0x24>
 8019882:	2601      	movs	r6, #1
 8019884:	e792      	b.n	80197ac <uxr_receive_reliable_message+0x24>
 8019886:	bf00      	nop

08019888 <uxr_next_input_reliable_buffer_available>:
 8019888:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801988c:	4604      	mov	r4, r0
 801988e:	460f      	mov	r7, r1
 8019890:	8980      	ldrh	r0, [r0, #12]
 8019892:	2101      	movs	r1, #1
 8019894:	4690      	mov	r8, r2
 8019896:	f000 fc23 	bl	801a0e0 <uxr_seq_num_add>
 801989a:	8922      	ldrh	r2, [r4, #8]
 801989c:	fbb0 f6f2 	udiv	r6, r0, r2
 80198a0:	fb02 0616 	mls	r6, r2, r6, r0
 80198a4:	b2b6      	uxth	r6, r6
 80198a6:	6863      	ldr	r3, [r4, #4]
 80198a8:	fbb3 f3f2 	udiv	r3, r3, r2
 80198ac:	fb06 f303 	mul.w	r3, r6, r3
 80198b0:	6826      	ldr	r6, [r4, #0]
 80198b2:	3304      	adds	r3, #4
 80198b4:	441e      	add	r6, r3
 80198b6:	f856 9c04 	ldr.w	r9, [r6, #-4]
 80198ba:	f1b9 0f00 	cmp.w	r9, #0
 80198be:	d023      	beq.n	8019908 <uxr_next_input_reliable_buffer_available+0x80>
 80198c0:	6923      	ldr	r3, [r4, #16]
 80198c2:	4605      	mov	r5, r0
 80198c4:	4630      	mov	r0, r6
 80198c6:	4798      	blx	r3
 80198c8:	4682      	mov	sl, r0
 80198ca:	b300      	cbz	r0, 801990e <uxr_next_input_reliable_buffer_available+0x86>
 80198cc:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 80198d0:	2101      	movs	r1, #1
 80198d2:	4650      	mov	r0, sl
 80198d4:	f000 fc04 	bl	801a0e0 <uxr_seq_num_add>
 80198d8:	8921      	ldrh	r1, [r4, #8]
 80198da:	fbb0 f2f1 	udiv	r2, r0, r1
 80198de:	4682      	mov	sl, r0
 80198e0:	fb01 0212 	mls	r2, r1, r2, r0
 80198e4:	e9d4 0300 	ldrd	r0, r3, [r4]
 80198e8:	b292      	uxth	r2, r2
 80198ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80198ee:	fb02 f303 	mul.w	r3, r2, r3
 80198f2:	3304      	adds	r3, #4
 80198f4:	4418      	add	r0, r3
 80198f6:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80198fa:	b12b      	cbz	r3, 8019908 <uxr_next_input_reliable_buffer_available+0x80>
 80198fc:	6923      	ldr	r3, [r4, #16]
 80198fe:	4798      	blx	r3
 8019900:	2802      	cmp	r0, #2
 8019902:	d01b      	beq.n	801993c <uxr_next_input_reliable_buffer_available+0xb4>
 8019904:	2801      	cmp	r0, #1
 8019906:	d0e3      	beq.n	80198d0 <uxr_next_input_reliable_buffer_available+0x48>
 8019908:	2000      	movs	r0, #0
 801990a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801990e:	464a      	mov	r2, r9
 8019910:	4631      	mov	r1, r6
 8019912:	4638      	mov	r0, r7
 8019914:	f7f4 fe14 	bl	800e540 <ucdr_init_buffer>
 8019918:	8921      	ldrh	r1, [r4, #8]
 801991a:	fbb5 f2f1 	udiv	r2, r5, r1
 801991e:	fb01 5212 	mls	r2, r1, r2, r5
 8019922:	b292      	uxth	r2, r2
 8019924:	6863      	ldr	r3, [r4, #4]
 8019926:	fbb3 f3f1 	udiv	r3, r3, r1
 801992a:	fb02 f303 	mul.w	r3, r2, r3
 801992e:	6822      	ldr	r2, [r4, #0]
 8019930:	f842 a003 	str.w	sl, [r2, r3]
 8019934:	2001      	movs	r0, #1
 8019936:	81a5      	strh	r5, [r4, #12]
 8019938:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801993c:	8920      	ldrh	r0, [r4, #8]
 801993e:	fbb5 f3f0 	udiv	r3, r5, r0
 8019942:	fb00 5513 	mls	r5, r0, r3, r5
 8019946:	b2ad      	uxth	r5, r5
 8019948:	6863      	ldr	r3, [r4, #4]
 801994a:	fbb3 f3f0 	udiv	r3, r3, r0
 801994e:	fb03 f505 	mul.w	r5, r3, r5
 8019952:	6823      	ldr	r3, [r4, #0]
 8019954:	2000      	movs	r0, #0
 8019956:	5158      	str	r0, [r3, r5]
 8019958:	eb06 0108 	add.w	r1, r6, r8
 801995c:	eba9 0208 	sub.w	r2, r9, r8
 8019960:	4638      	mov	r0, r7
 8019962:	f7f4 fded 	bl	800e540 <ucdr_init_buffer>
 8019966:	4638      	mov	r0, r7
 8019968:	4903      	ldr	r1, [pc, #12]	@ (8019978 <uxr_next_input_reliable_buffer_available+0xf0>)
 801996a:	4622      	mov	r2, r4
 801996c:	f7f4 fdbc 	bl	800e4e8 <ucdr_set_on_full_buffer_callback>
 8019970:	f8a4 a00c 	strh.w	sl, [r4, #12]
 8019974:	2001      	movs	r0, #1
 8019976:	e7c8      	b.n	801990a <uxr_next_input_reliable_buffer_available+0x82>
 8019978:	0801967d 	.word	0x0801967d

0801997c <uxr_process_heartbeat>:
 801997c:	b538      	push	{r3, r4, r5, lr}
 801997e:	4611      	mov	r1, r2
 8019980:	4604      	mov	r4, r0
 8019982:	89c0      	ldrh	r0, [r0, #14]
 8019984:	4615      	mov	r5, r2
 8019986:	f000 fbb3 	bl	801a0f0 <uxr_seq_num_cmp>
 801998a:	2800      	cmp	r0, #0
 801998c:	bfb8      	it	lt
 801998e:	81e5      	strhlt	r5, [r4, #14]
 8019990:	bd38      	pop	{r3, r4, r5, pc}
 8019992:	bf00      	nop

08019994 <uxr_compute_acknack>:
 8019994:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019998:	8903      	ldrh	r3, [r0, #8]
 801999a:	8985      	ldrh	r5, [r0, #12]
 801999c:	4604      	mov	r4, r0
 801999e:	460e      	mov	r6, r1
 80199a0:	b1d3      	cbz	r3, 80199d8 <uxr_compute_acknack+0x44>
 80199a2:	4628      	mov	r0, r5
 80199a4:	2701      	movs	r7, #1
 80199a6:	e003      	b.n	80199b0 <uxr_compute_acknack+0x1c>
 80199a8:	4567      	cmp	r7, ip
 80199aa:	d215      	bcs.n	80199d8 <uxr_compute_acknack+0x44>
 80199ac:	89a0      	ldrh	r0, [r4, #12]
 80199ae:	3701      	adds	r7, #1
 80199b0:	b2b9      	uxth	r1, r7
 80199b2:	f000 fb95 	bl	801a0e0 <uxr_seq_num_add>
 80199b6:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 80199ba:	fbb0 f3fc 	udiv	r3, r0, ip
 80199be:	fb0c 0313 	mls	r3, ip, r3, r0
 80199c2:	b29a      	uxth	r2, r3
 80199c4:	e9d4 1300 	ldrd	r1, r3, [r4]
 80199c8:	fbb3 f3fc 	udiv	r3, r3, ip
 80199cc:	fb02 f303 	mul.w	r3, r2, r3
 80199d0:	58cb      	ldr	r3, [r1, r3]
 80199d2:	2b00      	cmp	r3, #0
 80199d4:	d1e8      	bne.n	80199a8 <uxr_compute_acknack+0x14>
 80199d6:	4605      	mov	r5, r0
 80199d8:	8035      	strh	r5, [r6, #0]
 80199da:	2101      	movs	r1, #1
 80199dc:	4628      	mov	r0, r5
 80199de:	89e7      	ldrh	r7, [r4, #14]
 80199e0:	f000 fb82 	bl	801a0e8 <uxr_seq_num_sub>
 80199e4:	4601      	mov	r1, r0
 80199e6:	4638      	mov	r0, r7
 80199e8:	f000 fb7e 	bl	801a0e8 <uxr_seq_num_sub>
 80199ec:	4605      	mov	r5, r0
 80199ee:	b318      	cbz	r0, 8019a38 <uxr_compute_acknack+0xa4>
 80199f0:	f04f 0900 	mov.w	r9, #0
 80199f4:	464f      	mov	r7, r9
 80199f6:	f04f 0801 	mov.w	r8, #1
 80199fa:	fa1f f189 	uxth.w	r1, r9
 80199fe:	8830      	ldrh	r0, [r6, #0]
 8019a00:	f000 fb6e 	bl	801a0e0 <uxr_seq_num_add>
 8019a04:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8019a08:	fbb0 f3fc 	udiv	r3, r0, ip
 8019a0c:	e9d4 1200 	ldrd	r1, r2, [r4]
 8019a10:	fb03 001c 	mls	r0, r3, ip, r0
 8019a14:	b283      	uxth	r3, r0
 8019a16:	fbb2 f2fc 	udiv	r2, r2, ip
 8019a1a:	fb02 f303 	mul.w	r3, r2, r3
 8019a1e:	fa08 f209 	lsl.w	r2, r8, r9
 8019a22:	58cb      	ldr	r3, [r1, r3]
 8019a24:	f109 0901 	add.w	r9, r9, #1
 8019a28:	b90b      	cbnz	r3, 8019a2e <uxr_compute_acknack+0x9a>
 8019a2a:	4317      	orrs	r7, r2
 8019a2c:	b2bf      	uxth	r7, r7
 8019a2e:	454d      	cmp	r5, r9
 8019a30:	d1e3      	bne.n	80199fa <uxr_compute_acknack+0x66>
 8019a32:	4638      	mov	r0, r7
 8019a34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019a38:	4607      	mov	r7, r0
 8019a3a:	4638      	mov	r0, r7
 8019a3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08019a40 <uxr_init_output_best_effort_stream>:
 8019a40:	f64f 7cff 	movw	ip, #65535	@ 0xffff
 8019a44:	e9c0 3201 	strd	r3, r2, [r0, #4]
 8019a48:	6001      	str	r1, [r0, #0]
 8019a4a:	7303      	strb	r3, [r0, #12]
 8019a4c:	f8a0 c00e 	strh.w	ip, [r0, #14]
 8019a50:	4770      	bx	lr
 8019a52:	bf00      	nop

08019a54 <uxr_reset_output_best_effort_stream>:
 8019a54:	7b02      	ldrb	r2, [r0, #12]
 8019a56:	6042      	str	r2, [r0, #4]
 8019a58:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8019a5c:	81c3      	strh	r3, [r0, #14]
 8019a5e:	4770      	bx	lr

08019a60 <uxr_prepare_best_effort_buffer_to_write>:
 8019a60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019a62:	4604      	mov	r4, r0
 8019a64:	b083      	sub	sp, #12
 8019a66:	6840      	ldr	r0, [r0, #4]
 8019a68:	460d      	mov	r5, r1
 8019a6a:	4616      	mov	r6, r2
 8019a6c:	f7fa f8ae 	bl	8013bcc <uxr_submessage_padding>
 8019a70:	6863      	ldr	r3, [r4, #4]
 8019a72:	4418      	add	r0, r3
 8019a74:	68a3      	ldr	r3, [r4, #8]
 8019a76:	1942      	adds	r2, r0, r5
 8019a78:	4293      	cmp	r3, r2
 8019a7a:	bf2c      	ite	cs
 8019a7c:	2701      	movcs	r7, #1
 8019a7e:	2700      	movcc	r7, #0
 8019a80:	d202      	bcs.n	8019a88 <uxr_prepare_best_effort_buffer_to_write+0x28>
 8019a82:	4638      	mov	r0, r7
 8019a84:	b003      	add	sp, #12
 8019a86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019a88:	9000      	str	r0, [sp, #0]
 8019a8a:	6821      	ldr	r1, [r4, #0]
 8019a8c:	4630      	mov	r0, r6
 8019a8e:	2300      	movs	r3, #0
 8019a90:	f7f4 fd44 	bl	800e51c <ucdr_init_buffer_origin_offset>
 8019a94:	6861      	ldr	r1, [r4, #4]
 8019a96:	4638      	mov	r0, r7
 8019a98:	4429      	add	r1, r5
 8019a9a:	6061      	str	r1, [r4, #4]
 8019a9c:	b003      	add	sp, #12
 8019a9e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08019aa0 <uxr_prepare_best_effort_buffer_to_send>:
 8019aa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019aa4:	4604      	mov	r4, r0
 8019aa6:	461d      	mov	r5, r3
 8019aa8:	6840      	ldr	r0, [r0, #4]
 8019aaa:	7b23      	ldrb	r3, [r4, #12]
 8019aac:	4298      	cmp	r0, r3
 8019aae:	bf8c      	ite	hi
 8019ab0:	2601      	movhi	r6, #1
 8019ab2:	2600      	movls	r6, #0
 8019ab4:	d802      	bhi.n	8019abc <uxr_prepare_best_effort_buffer_to_send+0x1c>
 8019ab6:	4630      	mov	r0, r6
 8019ab8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019abc:	4688      	mov	r8, r1
 8019abe:	89e0      	ldrh	r0, [r4, #14]
 8019ac0:	2101      	movs	r1, #1
 8019ac2:	4617      	mov	r7, r2
 8019ac4:	f000 fb0c 	bl	801a0e0 <uxr_seq_num_add>
 8019ac8:	6823      	ldr	r3, [r4, #0]
 8019aca:	81e0      	strh	r0, [r4, #14]
 8019acc:	8028      	strh	r0, [r5, #0]
 8019ace:	f8c8 3000 	str.w	r3, [r8]
 8019ad2:	6863      	ldr	r3, [r4, #4]
 8019ad4:	603b      	str	r3, [r7, #0]
 8019ad6:	7b23      	ldrb	r3, [r4, #12]
 8019ad8:	6063      	str	r3, [r4, #4]
 8019ada:	4630      	mov	r0, r6
 8019adc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08019ae0 <on_full_output_buffer>:
 8019ae0:	b538      	push	{r3, r4, r5, lr}
 8019ae2:	6802      	ldr	r2, [r0, #0]
 8019ae4:	460c      	mov	r4, r1
 8019ae6:	6809      	ldr	r1, [r1, #0]
 8019ae8:	8923      	ldrh	r3, [r4, #8]
 8019aea:	eba2 0c01 	sub.w	ip, r2, r1
 8019aee:	6862      	ldr	r2, [r4, #4]
 8019af0:	fbb2 f2f3 	udiv	r2, r2, r3
 8019af4:	fbbc fcf2 	udiv	ip, ip, r2
 8019af8:	f10c 0c01 	add.w	ip, ip, #1
 8019afc:	fa1f fc8c 	uxth.w	ip, ip
 8019b00:	fbbc fef3 	udiv	lr, ip, r3
 8019b04:	fb03 c31e 	mls	r3, r3, lr, ip
 8019b08:	b29b      	uxth	r3, r3
 8019b0a:	fb02 f303 	mul.w	r3, r2, r3
 8019b0e:	f894 c00c 	ldrb.w	ip, [r4, #12]
 8019b12:	58ca      	ldr	r2, [r1, r3]
 8019b14:	4463      	add	r3, ip
 8019b16:	eba2 020c 	sub.w	r2, r2, ip
 8019b1a:	3308      	adds	r3, #8
 8019b1c:	4605      	mov	r5, r0
 8019b1e:	4419      	add	r1, r3
 8019b20:	3a04      	subs	r2, #4
 8019b22:	6903      	ldr	r3, [r0, #16]
 8019b24:	f7f4 fd04 	bl	800e530 <ucdr_init_buffer_origin>
 8019b28:	4628      	mov	r0, r5
 8019b2a:	4903      	ldr	r1, [pc, #12]	@ (8019b38 <on_full_output_buffer+0x58>)
 8019b2c:	4622      	mov	r2, r4
 8019b2e:	f7f4 fcdb 	bl	800e4e8 <ucdr_set_on_full_buffer_callback>
 8019b32:	2000      	movs	r0, #0
 8019b34:	bd38      	pop	{r3, r4, r5, pc}
 8019b36:	bf00      	nop
 8019b38:	08019ae1 	.word	0x08019ae1

08019b3c <uxr_init_output_reliable_stream>:
 8019b3c:	b410      	push	{r4}
 8019b3e:	f89d c004 	ldrb.w	ip, [sp, #4]
 8019b42:	8103      	strh	r3, [r0, #8]
 8019b44:	e9c0 1200 	strd	r1, r2, [r0]
 8019b48:	f880 c00c 	strb.w	ip, [r0, #12]
 8019b4c:	b1d3      	cbz	r3, 8019b84 <uxr_init_output_reliable_stream+0x48>
 8019b4e:	f8c1 c000 	str.w	ip, [r1]
 8019b52:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8019b56:	f1bc 0f01 	cmp.w	ip, #1
 8019b5a:	d913      	bls.n	8019b84 <uxr_init_output_reliable_stream+0x48>
 8019b5c:	2301      	movs	r3, #1
 8019b5e:	fbb3 f1fc 	udiv	r1, r3, ip
 8019b62:	fb0c 3111 	mls	r1, ip, r1, r3
 8019b66:	b289      	uxth	r1, r1
 8019b68:	6842      	ldr	r2, [r0, #4]
 8019b6a:	6804      	ldr	r4, [r0, #0]
 8019b6c:	fbb2 f2fc 	udiv	r2, r2, ip
 8019b70:	fb01 f202 	mul.w	r2, r1, r2
 8019b74:	7b01      	ldrb	r1, [r0, #12]
 8019b76:	50a1      	str	r1, [r4, r2]
 8019b78:	3301      	adds	r3, #1
 8019b7a:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8019b7e:	b29b      	uxth	r3, r3
 8019b80:	459c      	cmp	ip, r3
 8019b82:	d8ec      	bhi.n	8019b5e <uxr_init_output_reliable_stream+0x22>
 8019b84:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8019b88:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8019b8c:	e9c0 2306 	strd	r2, r3, [r0, #24]
 8019b90:	4905      	ldr	r1, [pc, #20]	@ (8019ba8 <uxr_init_output_reliable_stream+0x6c>)
 8019b92:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019b96:	f8c0 100e 	str.w	r1, [r0, #14]
 8019b9a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8019b9e:	2300      	movs	r3, #0
 8019ba0:	8242      	strh	r2, [r0, #18]
 8019ba2:	8403      	strh	r3, [r0, #32]
 8019ba4:	4770      	bx	lr
 8019ba6:	bf00      	nop
 8019ba8:	ffff0000 	.word	0xffff0000

08019bac <uxr_reset_output_reliable_stream>:
 8019bac:	8901      	ldrh	r1, [r0, #8]
 8019bae:	b1b1      	cbz	r1, 8019bde <uxr_reset_output_reliable_stream+0x32>
 8019bb0:	f04f 0c00 	mov.w	ip, #0
 8019bb4:	4663      	mov	r3, ip
 8019bb6:	fbb3 f2f1 	udiv	r2, r3, r1
 8019bba:	fb01 3312 	mls	r3, r1, r2, r3
 8019bbe:	b29b      	uxth	r3, r3
 8019bc0:	6842      	ldr	r2, [r0, #4]
 8019bc2:	fbb2 f2f1 	udiv	r2, r2, r1
 8019bc6:	6801      	ldr	r1, [r0, #0]
 8019bc8:	fb02 f303 	mul.w	r3, r2, r3
 8019bcc:	7b02      	ldrb	r2, [r0, #12]
 8019bce:	50ca      	str	r2, [r1, r3]
 8019bd0:	f10c 0c01 	add.w	ip, ip, #1
 8019bd4:	8901      	ldrh	r1, [r0, #8]
 8019bd6:	fa1f f38c 	uxth.w	r3, ip
 8019bda:	4299      	cmp	r1, r3
 8019bdc:	d8eb      	bhi.n	8019bb6 <uxr_reset_output_reliable_stream+0xa>
 8019bde:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8019be2:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8019be6:	e9c0 2306 	strd	r2, r3, [r0, #24]
 8019bea:	4904      	ldr	r1, [pc, #16]	@ (8019bfc <uxr_reset_output_reliable_stream+0x50>)
 8019bec:	f8c0 100e 	str.w	r1, [r0, #14]
 8019bf0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8019bf4:	2300      	movs	r3, #0
 8019bf6:	8242      	strh	r2, [r0, #18]
 8019bf8:	8403      	strh	r3, [r0, #32]
 8019bfa:	4770      	bx	lr
 8019bfc:	ffff0000 	.word	0xffff0000

08019c00 <uxr_prepare_reliable_buffer_to_write>:
 8019c00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019c04:	4604      	mov	r4, r0
 8019c06:	b091      	sub	sp, #68	@ 0x44
 8019c08:	8900      	ldrh	r0, [r0, #8]
 8019c0a:	89e6      	ldrh	r6, [r4, #14]
 8019c0c:	6823      	ldr	r3, [r4, #0]
 8019c0e:	9204      	str	r2, [sp, #16]
 8019c10:	fbb6 f2f0 	udiv	r2, r6, r0
 8019c14:	fb00 6212 	mls	r2, r0, r2, r6
 8019c18:	b292      	uxth	r2, r2
 8019c1a:	6865      	ldr	r5, [r4, #4]
 8019c1c:	fbb5 f5f0 	udiv	r5, r5, r0
 8019c20:	fb05 3202 	mla	r2, r5, r2, r3
 8019c24:	3204      	adds	r2, #4
 8019c26:	f852 8c04 	ldr.w	r8, [r2, #-4]
 8019c2a:	f894 900c 	ldrb.w	r9, [r4, #12]
 8019c2e:	9203      	str	r2, [sp, #12]
 8019c30:	468b      	mov	fp, r1
 8019c32:	1f2f      	subs	r7, r5, #4
 8019c34:	2800      	cmp	r0, #0
 8019c36:	f000 814c 	beq.w	8019ed2 <uxr_prepare_reliable_buffer_to_write+0x2d2>
 8019c3a:	f04f 0c00 	mov.w	ip, #0
 8019c3e:	46e2      	mov	sl, ip
 8019c40:	4661      	mov	r1, ip
 8019c42:	fbb1 f2f0 	udiv	r2, r1, r0
 8019c46:	fb00 1212 	mls	r2, r0, r2, r1
 8019c4a:	b292      	uxth	r2, r2
 8019c4c:	fb05 f202 	mul.w	r2, r5, r2
 8019c50:	f10c 0c01 	add.w	ip, ip, #1
 8019c54:	589a      	ldr	r2, [r3, r2]
 8019c56:	454a      	cmp	r2, r9
 8019c58:	bf08      	it	eq
 8019c5a:	f10a 0a01 	addeq.w	sl, sl, #1
 8019c5e:	fa1f f18c 	uxth.w	r1, ip
 8019c62:	bf08      	it	eq
 8019c64:	fa1f fa8a 	uxtheq.w	sl, sl
 8019c68:	4281      	cmp	r1, r0
 8019c6a:	d3ea      	bcc.n	8019c42 <uxr_prepare_reliable_buffer_to_write+0x42>
 8019c6c:	4640      	mov	r0, r8
 8019c6e:	2104      	movs	r1, #4
 8019c70:	f8cd a014 	str.w	sl, [sp, #20]
 8019c74:	f7f4 fc68 	bl	800e548 <ucdr_alignment>
 8019c78:	4480      	add	r8, r0
 8019c7a:	eb08 020b 	add.w	r2, r8, fp
 8019c7e:	42ba      	cmp	r2, r7
 8019c80:	f240 80cd 	bls.w	8019e1e <uxr_prepare_reliable_buffer_to_write+0x21e>
 8019c84:	7b22      	ldrb	r2, [r4, #12]
 8019c86:	445a      	add	r2, fp
 8019c88:	42ba      	cmp	r2, r7
 8019c8a:	f240 80b5 	bls.w	8019df8 <uxr_prepare_reliable_buffer_to_write+0x1f8>
 8019c8e:	f5c9 437f 	rsb	r3, r9, #65280	@ 0xff00
 8019c92:	33fc      	adds	r3, #252	@ 0xfc
 8019c94:	b2ba      	uxth	r2, r7
 8019c96:	4413      	add	r3, r2
 8019c98:	b29b      	uxth	r3, r3
 8019c9a:	fb0a f903 	mul.w	r9, sl, r3
 8019c9e:	45d9      	cmp	r9, fp
 8019ca0:	9305      	str	r3, [sp, #20]
 8019ca2:	9306      	str	r3, [sp, #24]
 8019ca4:	f0c0 80b7 	bcc.w	8019e16 <uxr_prepare_reliable_buffer_to_write+0x216>
 8019ca8:	f108 0304 	add.w	r3, r8, #4
 8019cac:	42bb      	cmp	r3, r7
 8019cae:	f080 80db 	bcs.w	8019e68 <uxr_prepare_reliable_buffer_to_write+0x268>
 8019cb2:	f1a2 0904 	sub.w	r9, r2, #4
 8019cb6:	eba9 0908 	sub.w	r9, r9, r8
 8019cba:	9b05      	ldr	r3, [sp, #20]
 8019cbc:	fa1f f989 	uxth.w	r9, r9
 8019cc0:	ebab 0b09 	sub.w	fp, fp, r9
 8019cc4:	fbbb f2f3 	udiv	r2, fp, r3
 8019cc8:	fb03 b312 	mls	r3, r3, r2, fp
 8019ccc:	2b00      	cmp	r3, #0
 8019cce:	f000 80c8 	beq.w	8019e62 <uxr_prepare_reliable_buffer_to_write+0x262>
 8019cd2:	3201      	adds	r2, #1
 8019cd4:	b292      	uxth	r2, r2
 8019cd6:	9306      	str	r3, [sp, #24]
 8019cd8:	4552      	cmp	r2, sl
 8019cda:	f200 809c 	bhi.w	8019e16 <uxr_prepare_reliable_buffer_to_write+0x216>
 8019cde:	f10d 0b20 	add.w	fp, sp, #32
 8019ce2:	2a00      	cmp	r2, #0
 8019ce4:	d042      	beq.n	8019d6c <uxr_prepare_reliable_buffer_to_write+0x16c>
 8019ce6:	f8cd 801c 	str.w	r8, [sp, #28]
 8019cea:	f04f 0a00 	mov.w	sl, #0
 8019cee:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8019cf2:	9505      	str	r5, [sp, #20]
 8019cf4:	f10d 0b20 	add.w	fp, sp, #32
 8019cf8:	4615      	mov	r5, r2
 8019cfa:	e000      	b.n	8019cfe <uxr_prepare_reliable_buffer_to_write+0xfe>
 8019cfc:	46c1      	mov	r9, r8
 8019cfe:	8920      	ldrh	r0, [r4, #8]
 8019d00:	fbb6 f2f0 	udiv	r2, r6, r0
 8019d04:	fb00 6112 	mls	r1, r0, r2, r6
 8019d08:	b28a      	uxth	r2, r1
 8019d0a:	6863      	ldr	r3, [r4, #4]
 8019d0c:	fbb3 f1f0 	udiv	r1, r3, r0
 8019d10:	6823      	ldr	r3, [r4, #0]
 8019d12:	fb02 f101 	mul.w	r1, r2, r1
 8019d16:	3104      	adds	r1, #4
 8019d18:	4419      	add	r1, r3
 8019d1a:	4658      	mov	r0, fp
 8019d1c:	f851 2c04 	ldr.w	r2, [r1, #-4]
 8019d20:	9200      	str	r2, [sp, #0]
 8019d22:	2300      	movs	r3, #0
 8019d24:	463a      	mov	r2, r7
 8019d26:	f7f4 fbf9 	bl	800e51c <ucdr_init_buffer_origin_offset>
 8019d2a:	464a      	mov	r2, r9
 8019d2c:	2300      	movs	r3, #0
 8019d2e:	210d      	movs	r1, #13
 8019d30:	4658      	mov	r0, fp
 8019d32:	f7f9 ff0b 	bl	8013b4c <uxr_buffer_submessage_header>
 8019d36:	8921      	ldrh	r1, [r4, #8]
 8019d38:	fbb6 f2f1 	udiv	r2, r6, r1
 8019d3c:	fb01 6212 	mls	r2, r1, r2, r6
 8019d40:	b292      	uxth	r2, r2
 8019d42:	6863      	ldr	r3, [r4, #4]
 8019d44:	fbb3 f3f1 	udiv	r3, r3, r1
 8019d48:	fb02 f303 	mul.w	r3, r2, r3
 8019d4c:	6822      	ldr	r2, [r4, #0]
 8019d4e:	4630      	mov	r0, r6
 8019d50:	50d7      	str	r7, [r2, r3]
 8019d52:	2101      	movs	r1, #1
 8019d54:	f000 f9c4 	bl	801a0e0 <uxr_seq_num_add>
 8019d58:	f10a 0a01 	add.w	sl, sl, #1
 8019d5c:	fa1f f38a 	uxth.w	r3, sl
 8019d60:	429d      	cmp	r5, r3
 8019d62:	4606      	mov	r6, r0
 8019d64:	d8ca      	bhi.n	8019cfc <uxr_prepare_reliable_buffer_to_write+0xfc>
 8019d66:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8019d6a:	9d05      	ldr	r5, [sp, #20]
 8019d6c:	8920      	ldrh	r0, [r4, #8]
 8019d6e:	fbb6 f3f0 	udiv	r3, r6, r0
 8019d72:	fb00 6313 	mls	r3, r0, r3, r6
 8019d76:	b299      	uxth	r1, r3
 8019d78:	6863      	ldr	r3, [r4, #4]
 8019d7a:	fbb3 f3f0 	udiv	r3, r3, r0
 8019d7e:	fb01 f303 	mul.w	r3, r1, r3
 8019d82:	6821      	ldr	r1, [r4, #0]
 8019d84:	3304      	adds	r3, #4
 8019d86:	4419      	add	r1, r3
 8019d88:	463a      	mov	r2, r7
 8019d8a:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8019d8e:	9000      	str	r0, [sp, #0]
 8019d90:	2300      	movs	r3, #0
 8019d92:	4658      	mov	r0, fp
 8019d94:	f7f4 fbc2 	bl	800e51c <ucdr_init_buffer_origin_offset>
 8019d98:	f8dd 9018 	ldr.w	r9, [sp, #24]
 8019d9c:	4658      	mov	r0, fp
 8019d9e:	fa1f f289 	uxth.w	r2, r9
 8019da2:	2302      	movs	r3, #2
 8019da4:	210d      	movs	r1, #13
 8019da6:	f7f9 fed1 	bl	8013b4c <uxr_buffer_submessage_header>
 8019daa:	9b03      	ldr	r3, [sp, #12]
 8019dac:	8927      	ldrh	r7, [r4, #8]
 8019dae:	7b20      	ldrb	r0, [r4, #12]
 8019db0:	f108 0104 	add.w	r1, r8, #4
 8019db4:	440b      	add	r3, r1
 8019db6:	4619      	mov	r1, r3
 8019db8:	fbb6 f3f7 	udiv	r3, r6, r7
 8019dbc:	fb07 6313 	mls	r3, r7, r3, r6
 8019dc0:	f1a5 0208 	sub.w	r2, r5, #8
 8019dc4:	b29d      	uxth	r5, r3
 8019dc6:	3004      	adds	r0, #4
 8019dc8:	6863      	ldr	r3, [r4, #4]
 8019dca:	fbb3 f3f7 	udiv	r3, r3, r7
 8019dce:	fb05 f303 	mul.w	r3, r5, r3
 8019dd2:	6825      	ldr	r5, [r4, #0]
 8019dd4:	4448      	add	r0, r9
 8019dd6:	50e8      	str	r0, [r5, r3]
 8019dd8:	9d04      	ldr	r5, [sp, #16]
 8019dda:	eba2 0208 	sub.w	r2, r2, r8
 8019dde:	4628      	mov	r0, r5
 8019de0:	f7f4 fbae 	bl	800e540 <ucdr_init_buffer>
 8019de4:	4628      	mov	r0, r5
 8019de6:	493c      	ldr	r1, [pc, #240]	@ (8019ed8 <uxr_prepare_reliable_buffer_to_write+0x2d8>)
 8019de8:	4622      	mov	r2, r4
 8019dea:	f7f4 fb7d 	bl	800e4e8 <ucdr_set_on_full_buffer_callback>
 8019dee:	2001      	movs	r0, #1
 8019df0:	81e6      	strh	r6, [r4, #14]
 8019df2:	b011      	add	sp, #68	@ 0x44
 8019df4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019df8:	2101      	movs	r1, #1
 8019dfa:	89e0      	ldrh	r0, [r4, #14]
 8019dfc:	f000 f970 	bl	801a0e0 <uxr_seq_num_add>
 8019e00:	8921      	ldrh	r1, [r4, #8]
 8019e02:	4605      	mov	r5, r0
 8019e04:	8a60      	ldrh	r0, [r4, #18]
 8019e06:	f000 f96b 	bl	801a0e0 <uxr_seq_num_add>
 8019e0a:	4601      	mov	r1, r0
 8019e0c:	4628      	mov	r0, r5
 8019e0e:	f000 f96f 	bl	801a0f0 <uxr_seq_num_cmp>
 8019e12:	2800      	cmp	r0, #0
 8019e14:	dd42      	ble.n	8019e9c <uxr_prepare_reliable_buffer_to_write+0x29c>
 8019e16:	2000      	movs	r0, #0
 8019e18:	b011      	add	sp, #68	@ 0x44
 8019e1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019e1e:	8921      	ldrh	r1, [r4, #8]
 8019e20:	8a60      	ldrh	r0, [r4, #18]
 8019e22:	9205      	str	r2, [sp, #20]
 8019e24:	f000 f95c 	bl	801a0e0 <uxr_seq_num_add>
 8019e28:	4601      	mov	r1, r0
 8019e2a:	4630      	mov	r0, r6
 8019e2c:	f000 f960 	bl	801a0f0 <uxr_seq_num_cmp>
 8019e30:	2800      	cmp	r0, #0
 8019e32:	9a05      	ldr	r2, [sp, #20]
 8019e34:	dcef      	bgt.n	8019e16 <uxr_prepare_reliable_buffer_to_write+0x216>
 8019e36:	8927      	ldrh	r7, [r4, #8]
 8019e38:	fbb6 f3f7 	udiv	r3, r6, r7
 8019e3c:	fb07 6313 	mls	r3, r7, r3, r6
 8019e40:	b29d      	uxth	r5, r3
 8019e42:	6863      	ldr	r3, [r4, #4]
 8019e44:	6824      	ldr	r4, [r4, #0]
 8019e46:	fbb3 f3f7 	udiv	r3, r3, r7
 8019e4a:	fb05 f303 	mul.w	r3, r5, r3
 8019e4e:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 8019e52:	50e2      	str	r2, [r4, r3]
 8019e54:	2300      	movs	r3, #0
 8019e56:	f8cd 8000 	str.w	r8, [sp]
 8019e5a:	f7f4 fb5f 	bl	800e51c <ucdr_init_buffer_origin_offset>
 8019e5e:	2001      	movs	r0, #1
 8019e60:	e7da      	b.n	8019e18 <uxr_prepare_reliable_buffer_to_write+0x218>
 8019e62:	b293      	uxth	r3, r2
 8019e64:	461a      	mov	r2, r3
 8019e66:	e737      	b.n	8019cd8 <uxr_prepare_reliable_buffer_to_write+0xd8>
 8019e68:	4630      	mov	r0, r6
 8019e6a:	2101      	movs	r1, #1
 8019e6c:	9207      	str	r2, [sp, #28]
 8019e6e:	f000 f937 	bl	801a0e0 <uxr_seq_num_add>
 8019e72:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8019e76:	fbb0 f1fc 	udiv	r1, r0, ip
 8019e7a:	fb0c 0111 	mls	r1, ip, r1, r0
 8019e7e:	4606      	mov	r6, r0
 8019e80:	b288      	uxth	r0, r1
 8019e82:	6863      	ldr	r3, [r4, #4]
 8019e84:	fbb3 f1fc 	udiv	r1, r3, ip
 8019e88:	6823      	ldr	r3, [r4, #0]
 8019e8a:	9a07      	ldr	r2, [sp, #28]
 8019e8c:	fb00 f101 	mul.w	r1, r0, r1
 8019e90:	3104      	adds	r1, #4
 8019e92:	440b      	add	r3, r1
 8019e94:	9303      	str	r3, [sp, #12]
 8019e96:	f853 8c04 	ldr.w	r8, [r3, #-4]
 8019e9a:	e70a      	b.n	8019cb2 <uxr_prepare_reliable_buffer_to_write+0xb2>
 8019e9c:	8921      	ldrh	r1, [r4, #8]
 8019e9e:	fbb5 f3f1 	udiv	r3, r5, r1
 8019ea2:	fb01 5313 	mls	r3, r1, r3, r5
 8019ea6:	b29a      	uxth	r2, r3
 8019ea8:	6863      	ldr	r3, [r4, #4]
 8019eaa:	fbb3 f3f1 	udiv	r3, r3, r1
 8019eae:	6821      	ldr	r1, [r4, #0]
 8019eb0:	9804      	ldr	r0, [sp, #16]
 8019eb2:	fb02 f303 	mul.w	r3, r2, r3
 8019eb6:	3304      	adds	r3, #4
 8019eb8:	7b22      	ldrb	r2, [r4, #12]
 8019eba:	4419      	add	r1, r3
 8019ebc:	445a      	add	r2, fp
 8019ebe:	f841 2c04 	str.w	r2, [r1, #-4]
 8019ec2:	7b23      	ldrb	r3, [r4, #12]
 8019ec4:	9300      	str	r3, [sp, #0]
 8019ec6:	2300      	movs	r3, #0
 8019ec8:	f7f4 fb28 	bl	800e51c <ucdr_init_buffer_origin_offset>
 8019ecc:	81e5      	strh	r5, [r4, #14]
 8019ece:	2001      	movs	r0, #1
 8019ed0:	e7a2      	b.n	8019e18 <uxr_prepare_reliable_buffer_to_write+0x218>
 8019ed2:	4682      	mov	sl, r0
 8019ed4:	e6ca      	b.n	8019c6c <uxr_prepare_reliable_buffer_to_write+0x6c>
 8019ed6:	bf00      	nop
 8019ed8:	08019ae1 	.word	0x08019ae1

08019edc <uxr_prepare_next_reliable_buffer_to_send>:
 8019edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019ede:	4604      	mov	r4, r0
 8019ee0:	460f      	mov	r7, r1
 8019ee2:	8a00      	ldrh	r0, [r0, #16]
 8019ee4:	2101      	movs	r1, #1
 8019ee6:	4616      	mov	r6, r2
 8019ee8:	461d      	mov	r5, r3
 8019eea:	f000 f8f9 	bl	801a0e0 <uxr_seq_num_add>
 8019eee:	8028      	strh	r0, [r5, #0]
 8019ef0:	8922      	ldrh	r2, [r4, #8]
 8019ef2:	fbb0 f3f2 	udiv	r3, r0, r2
 8019ef6:	fb02 0c13 	mls	ip, r2, r3, r0
 8019efa:	fa1f fc8c 	uxth.w	ip, ip
 8019efe:	6863      	ldr	r3, [r4, #4]
 8019f00:	fbb3 f3f2 	udiv	r3, r3, r2
 8019f04:	fb0c fc03 	mul.w	ip, ip, r3
 8019f08:	6823      	ldr	r3, [r4, #0]
 8019f0a:	89e1      	ldrh	r1, [r4, #14]
 8019f0c:	f10c 0c04 	add.w	ip, ip, #4
 8019f10:	4463      	add	r3, ip
 8019f12:	603b      	str	r3, [r7, #0]
 8019f14:	6823      	ldr	r3, [r4, #0]
 8019f16:	449c      	add	ip, r3
 8019f18:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 8019f1c:	6033      	str	r3, [r6, #0]
 8019f1e:	f000 f8e7 	bl	801a0f0 <uxr_seq_num_cmp>
 8019f22:	2800      	cmp	r0, #0
 8019f24:	dd01      	ble.n	8019f2a <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 8019f26:	2000      	movs	r0, #0
 8019f28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019f2a:	7b23      	ldrb	r3, [r4, #12]
 8019f2c:	6832      	ldr	r2, [r6, #0]
 8019f2e:	429a      	cmp	r2, r3
 8019f30:	d9f9      	bls.n	8019f26 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8019f32:	8a61      	ldrh	r1, [r4, #18]
 8019f34:	8a20      	ldrh	r0, [r4, #16]
 8019f36:	f000 f8d7 	bl	801a0e8 <uxr_seq_num_sub>
 8019f3a:	8923      	ldrh	r3, [r4, #8]
 8019f3c:	4283      	cmp	r3, r0
 8019f3e:	d0f2      	beq.n	8019f26 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8019f40:	8828      	ldrh	r0, [r5, #0]
 8019f42:	89e3      	ldrh	r3, [r4, #14]
 8019f44:	8220      	strh	r0, [r4, #16]
 8019f46:	4298      	cmp	r0, r3
 8019f48:	d001      	beq.n	8019f4e <uxr_prepare_next_reliable_buffer_to_send+0x72>
 8019f4a:	2001      	movs	r0, #1
 8019f4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019f4e:	2101      	movs	r1, #1
 8019f50:	f000 f8c6 	bl	801a0e0 <uxr_seq_num_add>
 8019f54:	81e0      	strh	r0, [r4, #14]
 8019f56:	2001      	movs	r0, #1
 8019f58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019f5a:	bf00      	nop

08019f5c <uxr_update_output_stream_heartbeat_timestamp>:
 8019f5c:	b570      	push	{r4, r5, r6, lr}
 8019f5e:	8a01      	ldrh	r1, [r0, #16]
 8019f60:	4604      	mov	r4, r0
 8019f62:	8a40      	ldrh	r0, [r0, #18]
 8019f64:	4615      	mov	r5, r2
 8019f66:	461e      	mov	r6, r3
 8019f68:	f000 f8c2 	bl	801a0f0 <uxr_seq_num_cmp>
 8019f6c:	2800      	cmp	r0, #0
 8019f6e:	db07      	blt.n	8019f80 <uxr_update_output_stream_heartbeat_timestamp+0x24>
 8019f70:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8019f74:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8019f78:	e9c4 2306 	strd	r2, r3, [r4, #24]
 8019f7c:	2000      	movs	r0, #0
 8019f7e:	bd70      	pop	{r4, r5, r6, pc}
 8019f80:	f894 0020 	ldrb.w	r0, [r4, #32]
 8019f84:	b940      	cbnz	r0, 8019f98 <uxr_update_output_stream_heartbeat_timestamp+0x3c>
 8019f86:	2301      	movs	r3, #1
 8019f88:	f884 3020 	strb.w	r3, [r4, #32]
 8019f8c:	3564      	adds	r5, #100	@ 0x64
 8019f8e:	f146 0600 	adc.w	r6, r6, #0
 8019f92:	e9c4 5606 	strd	r5, r6, [r4, #24]
 8019f96:	bd70      	pop	{r4, r5, r6, pc}
 8019f98:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 8019f9c:	4295      	cmp	r5, r2
 8019f9e:	eb76 0303 	sbcs.w	r3, r6, r3
 8019fa2:	bfa5      	ittet	ge
 8019fa4:	3001      	addge	r0, #1
 8019fa6:	f884 0020 	strbge.w	r0, [r4, #32]
 8019faa:	2000      	movlt	r0, #0
 8019fac:	2001      	movge	r0, #1
 8019fae:	e7ed      	b.n	8019f8c <uxr_update_output_stream_heartbeat_timestamp+0x30>

08019fb0 <uxr_begin_output_nack_buffer_it>:
 8019fb0:	8a40      	ldrh	r0, [r0, #18]
 8019fb2:	4770      	bx	lr

08019fb4 <uxr_next_reliable_nack_buffer_to_send>:
 8019fb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019fb8:	f890 8021 	ldrb.w	r8, [r0, #33]	@ 0x21
 8019fbc:	b082      	sub	sp, #8
 8019fbe:	f1b8 0f00 	cmp.w	r8, #0
 8019fc2:	d011      	beq.n	8019fe8 <uxr_next_reliable_nack_buffer_to_send+0x34>
 8019fc4:	4604      	mov	r4, r0
 8019fc6:	8818      	ldrh	r0, [r3, #0]
 8019fc8:	460e      	mov	r6, r1
 8019fca:	4617      	mov	r7, r2
 8019fcc:	461d      	mov	r5, r3
 8019fce:	2101      	movs	r1, #1
 8019fd0:	f000 f886 	bl	801a0e0 <uxr_seq_num_add>
 8019fd4:	8028      	strh	r0, [r5, #0]
 8019fd6:	8a21      	ldrh	r1, [r4, #16]
 8019fd8:	f000 f88a 	bl	801a0f0 <uxr_seq_num_cmp>
 8019fdc:	2800      	cmp	r0, #0
 8019fde:	dd07      	ble.n	8019ff0 <uxr_next_reliable_nack_buffer_to_send+0x3c>
 8019fe0:	f04f 0800 	mov.w	r8, #0
 8019fe4:	f884 8021 	strb.w	r8, [r4, #33]	@ 0x21
 8019fe8:	4640      	mov	r0, r8
 8019fea:	b002      	add	sp, #8
 8019fec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019ff0:	8921      	ldrh	r1, [r4, #8]
 8019ff2:	8828      	ldrh	r0, [r5, #0]
 8019ff4:	6823      	ldr	r3, [r4, #0]
 8019ff6:	fbb0 f2f1 	udiv	r2, r0, r1
 8019ffa:	fb01 0c12 	mls	ip, r1, r2, r0
 8019ffe:	fa1f f28c 	uxth.w	r2, ip
 801a002:	9301      	str	r3, [sp, #4]
 801a004:	6863      	ldr	r3, [r4, #4]
 801a006:	fbb3 fcf1 	udiv	ip, r3, r1
 801a00a:	9b01      	ldr	r3, [sp, #4]
 801a00c:	fb02 fc0c 	mul.w	ip, r2, ip
 801a010:	f10c 0c04 	add.w	ip, ip, #4
 801a014:	4463      	add	r3, ip
 801a016:	6033      	str	r3, [r6, #0]
 801a018:	6823      	ldr	r3, [r4, #0]
 801a01a:	4463      	add	r3, ip
 801a01c:	f853 3c04 	ldr.w	r3, [r3, #-4]
 801a020:	603b      	str	r3, [r7, #0]
 801a022:	7b22      	ldrb	r2, [r4, #12]
 801a024:	429a      	cmp	r2, r3
 801a026:	d0d2      	beq.n	8019fce <uxr_next_reliable_nack_buffer_to_send+0x1a>
 801a028:	4640      	mov	r0, r8
 801a02a:	b002      	add	sp, #8
 801a02c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801a030 <uxr_process_acknack>:
 801a030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a032:	4604      	mov	r4, r0
 801a034:	460e      	mov	r6, r1
 801a036:	4610      	mov	r0, r2
 801a038:	2101      	movs	r1, #1
 801a03a:	f000 f855 	bl	801a0e8 <uxr_seq_num_sub>
 801a03e:	8a61      	ldrh	r1, [r4, #18]
 801a040:	f000 f852 	bl	801a0e8 <uxr_seq_num_sub>
 801a044:	b1c0      	cbz	r0, 801a078 <uxr_process_acknack+0x48>
 801a046:	4605      	mov	r5, r0
 801a048:	2700      	movs	r7, #0
 801a04a:	2101      	movs	r1, #1
 801a04c:	8a60      	ldrh	r0, [r4, #18]
 801a04e:	f000 f847 	bl	801a0e0 <uxr_seq_num_add>
 801a052:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801a056:	fbb0 f1fc 	udiv	r1, r0, ip
 801a05a:	e9d4 2300 	ldrd	r2, r3, [r4]
 801a05e:	fb0c 0111 	mls	r1, ip, r1, r0
 801a062:	b289      	uxth	r1, r1
 801a064:	3701      	adds	r7, #1
 801a066:	fbb3 f3fc 	udiv	r3, r3, ip
 801a06a:	fb01 f303 	mul.w	r3, r1, r3
 801a06e:	42bd      	cmp	r5, r7
 801a070:	7b21      	ldrb	r1, [r4, #12]
 801a072:	8260      	strh	r0, [r4, #18]
 801a074:	50d1      	str	r1, [r2, r3]
 801a076:	d1e8      	bne.n	801a04a <uxr_process_acknack+0x1a>
 801a078:	3e00      	subs	r6, #0
 801a07a:	f04f 0300 	mov.w	r3, #0
 801a07e:	bf18      	it	ne
 801a080:	2601      	movne	r6, #1
 801a082:	f884 3020 	strb.w	r3, [r4, #32]
 801a086:	f884 6021 	strb.w	r6, [r4, #33]	@ 0x21
 801a08a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801a08c <uxr_is_output_up_to_date>:
 801a08c:	8a01      	ldrh	r1, [r0, #16]
 801a08e:	8a40      	ldrh	r0, [r0, #18]
 801a090:	b508      	push	{r3, lr}
 801a092:	f000 f82d 	bl	801a0f0 <uxr_seq_num_cmp>
 801a096:	fab0 f080 	clz	r0, r0
 801a09a:	0940      	lsrs	r0, r0, #5
 801a09c:	bd08      	pop	{r3, pc}
 801a09e:	bf00      	nop

0801a0a0 <get_available_free_slots>:
 801a0a0:	8902      	ldrh	r2, [r0, #8]
 801a0a2:	b1da      	cbz	r2, 801a0dc <get_available_free_slots+0x3c>
 801a0a4:	b530      	push	{r4, r5, lr}
 801a0a6:	2100      	movs	r1, #0
 801a0a8:	6843      	ldr	r3, [r0, #4]
 801a0aa:	6805      	ldr	r5, [r0, #0]
 801a0ac:	7b04      	ldrb	r4, [r0, #12]
 801a0ae:	fbb3 fef2 	udiv	lr, r3, r2
 801a0b2:	4608      	mov	r0, r1
 801a0b4:	460b      	mov	r3, r1
 801a0b6:	fbb3 fcf2 	udiv	ip, r3, r2
 801a0ba:	fb02 331c 	mls	r3, r2, ip, r3
 801a0be:	b29b      	uxth	r3, r3
 801a0c0:	fb0e f303 	mul.w	r3, lr, r3
 801a0c4:	3101      	adds	r1, #1
 801a0c6:	f855 c003 	ldr.w	ip, [r5, r3]
 801a0ca:	4564      	cmp	r4, ip
 801a0cc:	bf08      	it	eq
 801a0ce:	3001      	addeq	r0, #1
 801a0d0:	b28b      	uxth	r3, r1
 801a0d2:	bf08      	it	eq
 801a0d4:	b280      	uxtheq	r0, r0
 801a0d6:	4293      	cmp	r3, r2
 801a0d8:	d3ed      	bcc.n	801a0b6 <get_available_free_slots+0x16>
 801a0da:	bd30      	pop	{r4, r5, pc}
 801a0dc:	4610      	mov	r0, r2
 801a0de:	4770      	bx	lr

0801a0e0 <uxr_seq_num_add>:
 801a0e0:	4408      	add	r0, r1
 801a0e2:	b280      	uxth	r0, r0
 801a0e4:	4770      	bx	lr
 801a0e6:	bf00      	nop

0801a0e8 <uxr_seq_num_sub>:
 801a0e8:	1a40      	subs	r0, r0, r1
 801a0ea:	b280      	uxth	r0, r0
 801a0ec:	4770      	bx	lr
 801a0ee:	bf00      	nop

0801a0f0 <uxr_seq_num_cmp>:
 801a0f0:	4288      	cmp	r0, r1
 801a0f2:	d011      	beq.n	801a118 <uxr_seq_num_cmp+0x28>
 801a0f4:	d309      	bcc.n	801a10a <uxr_seq_num_cmp+0x1a>
 801a0f6:	4288      	cmp	r0, r1
 801a0f8:	d910      	bls.n	801a11c <uxr_seq_num_cmp+0x2c>
 801a0fa:	1a40      	subs	r0, r0, r1
 801a0fc:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 801a100:	bfd4      	ite	le
 801a102:	2001      	movle	r0, #1
 801a104:	f04f 30ff 	movgt.w	r0, #4294967295	@ 0xffffffff
 801a108:	4770      	bx	lr
 801a10a:	1a0b      	subs	r3, r1, r0
 801a10c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801a110:	daf1      	bge.n	801a0f6 <uxr_seq_num_cmp+0x6>
 801a112:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801a116:	4770      	bx	lr
 801a118:	2000      	movs	r0, #0
 801a11a:	4770      	bx	lr
 801a11c:	2001      	movs	r0, #1
 801a11e:	4770      	bx	lr

0801a120 <rcl_get_default_domain_id>:
 801a120:	b530      	push	{r4, r5, lr}
 801a122:	b083      	sub	sp, #12
 801a124:	2300      	movs	r3, #0
 801a126:	9300      	str	r3, [sp, #0]
 801a128:	b1d0      	cbz	r0, 801a160 <rcl_get_default_domain_id+0x40>
 801a12a:	4604      	mov	r4, r0
 801a12c:	4669      	mov	r1, sp
 801a12e:	4815      	ldr	r0, [pc, #84]	@ (801a184 <rcl_get_default_domain_id+0x64>)
 801a130:	f7fd fd62 	bl	8017bf8 <rcutils_get_env>
 801a134:	4602      	mov	r2, r0
 801a136:	b110      	cbz	r0, 801a13e <rcl_get_default_domain_id+0x1e>
 801a138:	2001      	movs	r0, #1
 801a13a:	b003      	add	sp, #12
 801a13c:	bd30      	pop	{r4, r5, pc}
 801a13e:	9b00      	ldr	r3, [sp, #0]
 801a140:	b18b      	cbz	r3, 801a166 <rcl_get_default_domain_id+0x46>
 801a142:	7818      	ldrb	r0, [r3, #0]
 801a144:	2800      	cmp	r0, #0
 801a146:	d0f8      	beq.n	801a13a <rcl_get_default_domain_id+0x1a>
 801a148:	a901      	add	r1, sp, #4
 801a14a:	4618      	mov	r0, r3
 801a14c:	9201      	str	r2, [sp, #4]
 801a14e:	f000 fe61 	bl	801ae14 <strtoul>
 801a152:	4605      	mov	r5, r0
 801a154:	b150      	cbz	r0, 801a16c <rcl_get_default_domain_id+0x4c>
 801a156:	1c43      	adds	r3, r0, #1
 801a158:	d00d      	beq.n	801a176 <rcl_get_default_domain_id+0x56>
 801a15a:	6025      	str	r5, [r4, #0]
 801a15c:	2000      	movs	r0, #0
 801a15e:	e7ec      	b.n	801a13a <rcl_get_default_domain_id+0x1a>
 801a160:	200b      	movs	r0, #11
 801a162:	b003      	add	sp, #12
 801a164:	bd30      	pop	{r4, r5, pc}
 801a166:	4618      	mov	r0, r3
 801a168:	b003      	add	sp, #12
 801a16a:	bd30      	pop	{r4, r5, pc}
 801a16c:	9b01      	ldr	r3, [sp, #4]
 801a16e:	781b      	ldrb	r3, [r3, #0]
 801a170:	2b00      	cmp	r3, #0
 801a172:	d0f2      	beq.n	801a15a <rcl_get_default_domain_id+0x3a>
 801a174:	e7e0      	b.n	801a138 <rcl_get_default_domain_id+0x18>
 801a176:	f001 f98d 	bl	801b494 <__errno>
 801a17a:	6803      	ldr	r3, [r0, #0]
 801a17c:	2b22      	cmp	r3, #34	@ 0x22
 801a17e:	d1ec      	bne.n	801a15a <rcl_get_default_domain_id+0x3a>
 801a180:	e7da      	b.n	801a138 <rcl_get_default_domain_id+0x18>
 801a182:	bf00      	nop
 801a184:	0801e3d8 	.word	0x0801e3d8

0801a188 <rcl_expand_topic_name>:
 801a188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a18c:	b08b      	sub	sp, #44	@ 0x2c
 801a18e:	9306      	str	r3, [sp, #24]
 801a190:	2800      	cmp	r0, #0
 801a192:	f000 80ad 	beq.w	801a2f0 <rcl_expand_topic_name+0x168>
 801a196:	460e      	mov	r6, r1
 801a198:	2900      	cmp	r1, #0
 801a19a:	f000 80a9 	beq.w	801a2f0 <rcl_expand_topic_name+0x168>
 801a19e:	4617      	mov	r7, r2
 801a1a0:	2a00      	cmp	r2, #0
 801a1a2:	f000 80a5 	beq.w	801a2f0 <rcl_expand_topic_name+0x168>
 801a1a6:	2b00      	cmp	r3, #0
 801a1a8:	f000 80a2 	beq.w	801a2f0 <rcl_expand_topic_name+0x168>
 801a1ac:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801a1ae:	2b00      	cmp	r3, #0
 801a1b0:	f000 809e 	beq.w	801a2f0 <rcl_expand_topic_name+0x168>
 801a1b4:	2200      	movs	r2, #0
 801a1b6:	a909      	add	r1, sp, #36	@ 0x24
 801a1b8:	4680      	mov	r8, r0
 801a1ba:	f000 fa57 	bl	801a66c <rcl_validate_topic_name>
 801a1be:	4604      	mov	r4, r0
 801a1c0:	2800      	cmp	r0, #0
 801a1c2:	f040 8096 	bne.w	801a2f2 <rcl_expand_topic_name+0x16a>
 801a1c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a1c8:	2b00      	cmp	r3, #0
 801a1ca:	f040 809a 	bne.w	801a302 <rcl_expand_topic_name+0x17a>
 801a1ce:	4602      	mov	r2, r0
 801a1d0:	a909      	add	r1, sp, #36	@ 0x24
 801a1d2:	4630      	mov	r0, r6
 801a1d4:	f7fe f94a 	bl	801846c <rmw_validate_node_name>
 801a1d8:	2800      	cmp	r0, #0
 801a1da:	f040 808e 	bne.w	801a2fa <rcl_expand_topic_name+0x172>
 801a1de:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801a1e0:	2a00      	cmp	r2, #0
 801a1e2:	f040 8093 	bne.w	801a30c <rcl_expand_topic_name+0x184>
 801a1e6:	a909      	add	r1, sp, #36	@ 0x24
 801a1e8:	4638      	mov	r0, r7
 801a1ea:	f7fe f921 	bl	8018430 <rmw_validate_namespace>
 801a1ee:	2800      	cmp	r0, #0
 801a1f0:	f040 8083 	bne.w	801a2fa <rcl_expand_topic_name+0x172>
 801a1f4:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801a1f6:	2c00      	cmp	r4, #0
 801a1f8:	f040 80ed 	bne.w	801a3d6 <rcl_expand_topic_name+0x24e>
 801a1fc:	217b      	movs	r1, #123	@ 0x7b
 801a1fe:	4640      	mov	r0, r8
 801a200:	f001 f8bc 	bl	801b37c <strchr>
 801a204:	f898 3000 	ldrb.w	r3, [r8]
 801a208:	2b2f      	cmp	r3, #47	@ 0x2f
 801a20a:	4605      	mov	r5, r0
 801a20c:	f000 809e 	beq.w	801a34c <rcl_expand_topic_name+0x1c4>
 801a210:	2b7e      	cmp	r3, #126	@ 0x7e
 801a212:	f040 80a2 	bne.w	801a35a <rcl_expand_topic_name+0x1d2>
 801a216:	4638      	mov	r0, r7
 801a218:	f7e6 f80c 	bl	8000234 <strlen>
 801a21c:	4a82      	ldr	r2, [pc, #520]	@ (801a428 <rcl_expand_topic_name+0x2a0>)
 801a21e:	4b83      	ldr	r3, [pc, #524]	@ (801a42c <rcl_expand_topic_name+0x2a4>)
 801a220:	2801      	cmp	r0, #1
 801a222:	bf18      	it	ne
 801a224:	4613      	movne	r3, r2
 801a226:	9302      	str	r3, [sp, #8]
 801a228:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801a22a:	9300      	str	r3, [sp, #0]
 801a22c:	e9cd 7603 	strd	r7, r6, [sp, #12]
 801a230:	f108 0301 	add.w	r3, r8, #1
 801a234:	9305      	str	r3, [sp, #20]
 801a236:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801a23a:	9301      	str	r3, [sp, #4]
 801a23c:	ab14      	add	r3, sp, #80	@ 0x50
 801a23e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801a240:	f7fd fcf2 	bl	8017c28 <rcutils_format_string_limit>
 801a244:	4682      	mov	sl, r0
 801a246:	2800      	cmp	r0, #0
 801a248:	f000 80c7 	beq.w	801a3da <rcl_expand_topic_name+0x252>
 801a24c:	2d00      	cmp	r5, #0
 801a24e:	f000 80a2 	beq.w	801a396 <rcl_expand_topic_name+0x20e>
 801a252:	217b      	movs	r1, #123	@ 0x7b
 801a254:	f001 f892 	bl	801b37c <strchr>
 801a258:	46d1      	mov	r9, sl
 801a25a:	4605      	mov	r5, r0
 801a25c:	9407      	str	r4, [sp, #28]
 801a25e:	46d3      	mov	fp, sl
 801a260:	464c      	mov	r4, r9
 801a262:	2d00      	cmp	r5, #0
 801a264:	f000 80be 	beq.w	801a3e4 <rcl_expand_topic_name+0x25c>
 801a268:	217d      	movs	r1, #125	@ 0x7d
 801a26a:	4620      	mov	r0, r4
 801a26c:	f001 f886 	bl	801b37c <strchr>
 801a270:	eba0 0905 	sub.w	r9, r0, r5
 801a274:	f109 0a01 	add.w	sl, r9, #1
 801a278:	486d      	ldr	r0, [pc, #436]	@ (801a430 <rcl_expand_topic_name+0x2a8>)
 801a27a:	4652      	mov	r2, sl
 801a27c:	4629      	mov	r1, r5
 801a27e:	f001 f88a 	bl	801b396 <strncmp>
 801a282:	2800      	cmp	r0, #0
 801a284:	d067      	beq.n	801a356 <rcl_expand_topic_name+0x1ce>
 801a286:	486b      	ldr	r0, [pc, #428]	@ (801a434 <rcl_expand_topic_name+0x2ac>)
 801a288:	4652      	mov	r2, sl
 801a28a:	4629      	mov	r1, r5
 801a28c:	f001 f883 	bl	801b396 <strncmp>
 801a290:	b130      	cbz	r0, 801a2a0 <rcl_expand_topic_name+0x118>
 801a292:	4869      	ldr	r0, [pc, #420]	@ (801a438 <rcl_expand_topic_name+0x2b0>)
 801a294:	4652      	mov	r2, sl
 801a296:	4629      	mov	r1, r5
 801a298:	f001 f87d 	bl	801b396 <strncmp>
 801a29c:	2800      	cmp	r0, #0
 801a29e:	d137      	bne.n	801a310 <rcl_expand_topic_name+0x188>
 801a2a0:	46b9      	mov	r9, r7
 801a2a2:	ab16      	add	r3, sp, #88	@ 0x58
 801a2a4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801a2a8:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801a2ac:	ab14      	add	r3, sp, #80	@ 0x50
 801a2ae:	4628      	mov	r0, r5
 801a2b0:	cb0c      	ldmia	r3, {r2, r3}
 801a2b2:	4651      	mov	r1, sl
 801a2b4:	f7fd fdf4 	bl	8017ea0 <rcutils_strndup>
 801a2b8:	4605      	mov	r5, r0
 801a2ba:	2800      	cmp	r0, #0
 801a2bc:	f000 809c 	beq.w	801a3f8 <rcl_expand_topic_name+0x270>
 801a2c0:	464a      	mov	r2, r9
 801a2c2:	4620      	mov	r0, r4
 801a2c4:	ab14      	add	r3, sp, #80	@ 0x50
 801a2c6:	4629      	mov	r1, r5
 801a2c8:	f7fd fce8 	bl	8017c9c <rcutils_repl_str>
 801a2cc:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801a2ce:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801a2d0:	4604      	mov	r4, r0
 801a2d2:	4628      	mov	r0, r5
 801a2d4:	4798      	blx	r3
 801a2d6:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801a2d8:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801a2da:	4658      	mov	r0, fp
 801a2dc:	4798      	blx	r3
 801a2de:	2c00      	cmp	r4, #0
 801a2e0:	d07b      	beq.n	801a3da <rcl_expand_topic_name+0x252>
 801a2e2:	217b      	movs	r1, #123	@ 0x7b
 801a2e4:	4620      	mov	r0, r4
 801a2e6:	f001 f849 	bl	801b37c <strchr>
 801a2ea:	46a3      	mov	fp, r4
 801a2ec:	4605      	mov	r5, r0
 801a2ee:	e7b8      	b.n	801a262 <rcl_expand_topic_name+0xda>
 801a2f0:	240b      	movs	r4, #11
 801a2f2:	4620      	mov	r0, r4
 801a2f4:	b00b      	add	sp, #44	@ 0x2c
 801a2f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a2fa:	f7fa ff4b 	bl	8015194 <rcl_convert_rmw_ret_to_rcl_ret>
 801a2fe:	4604      	mov	r4, r0
 801a300:	e7f7      	b.n	801a2f2 <rcl_expand_topic_name+0x16a>
 801a302:	2467      	movs	r4, #103	@ 0x67
 801a304:	4620      	mov	r0, r4
 801a306:	b00b      	add	sp, #44	@ 0x2c
 801a308:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a30c:	24c9      	movs	r4, #201	@ 0xc9
 801a30e:	e7f0      	b.n	801a2f2 <rcl_expand_topic_name+0x16a>
 801a310:	f109 32ff 	add.w	r2, r9, #4294967295	@ 0xffffffff
 801a314:	9806      	ldr	r0, [sp, #24]
 801a316:	1c69      	adds	r1, r5, #1
 801a318:	f7fd fedc 	bl	80180d4 <rcutils_string_map_getn>
 801a31c:	4681      	mov	r9, r0
 801a31e:	2800      	cmp	r0, #0
 801a320:	d1bf      	bne.n	801a2a2 <rcl_expand_topic_name+0x11a>
 801a322:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801a324:	aa16      	add	r2, sp, #88	@ 0x58
 801a326:	6018      	str	r0, [r3, #0]
 801a328:	ca07      	ldmia	r2, {r0, r1, r2}
 801a32a:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801a32e:	ab14      	add	r3, sp, #80	@ 0x50
 801a330:	cb0c      	ldmia	r3, {r2, r3}
 801a332:	4651      	mov	r1, sl
 801a334:	4628      	mov	r0, r5
 801a336:	f7fd fdb3 	bl	8017ea0 <rcutils_strndup>
 801a33a:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801a33c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801a33e:	4798      	blx	r3
 801a340:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801a342:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801a344:	4658      	mov	r0, fp
 801a346:	2469      	movs	r4, #105	@ 0x69
 801a348:	4798      	blx	r3
 801a34a:	e7d2      	b.n	801a2f2 <rcl_expand_topic_name+0x16a>
 801a34c:	2800      	cmp	r0, #0
 801a34e:	d05b      	beq.n	801a408 <rcl_expand_topic_name+0x280>
 801a350:	46c1      	mov	r9, r8
 801a352:	46a2      	mov	sl, r4
 801a354:	e782      	b.n	801a25c <rcl_expand_topic_name+0xd4>
 801a356:	46b1      	mov	r9, r6
 801a358:	e7a3      	b.n	801a2a2 <rcl_expand_topic_name+0x11a>
 801a35a:	2800      	cmp	r0, #0
 801a35c:	d1f8      	bne.n	801a350 <rcl_expand_topic_name+0x1c8>
 801a35e:	4638      	mov	r0, r7
 801a360:	f7e5 ff68 	bl	8000234 <strlen>
 801a364:	4a35      	ldr	r2, [pc, #212]	@ (801a43c <rcl_expand_topic_name+0x2b4>)
 801a366:	4b36      	ldr	r3, [pc, #216]	@ (801a440 <rcl_expand_topic_name+0x2b8>)
 801a368:	f8cd 8010 	str.w	r8, [sp, #16]
 801a36c:	2801      	cmp	r0, #1
 801a36e:	bf18      	it	ne
 801a370:	4613      	movne	r3, r2
 801a372:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 801a376:	e9cd 1301 	strd	r1, r3, [sp, #4]
 801a37a:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801a37c:	9703      	str	r7, [sp, #12]
 801a37e:	9200      	str	r2, [sp, #0]
 801a380:	ab14      	add	r3, sp, #80	@ 0x50
 801a382:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801a384:	f7fd fc50 	bl	8017c28 <rcutils_format_string_limit>
 801a388:	4682      	mov	sl, r0
 801a38a:	4653      	mov	r3, sl
 801a38c:	b32b      	cbz	r3, 801a3da <rcl_expand_topic_name+0x252>
 801a38e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801a390:	f8c3 a000 	str.w	sl, [r3]
 801a394:	e7ad      	b.n	801a2f2 <rcl_expand_topic_name+0x16a>
 801a396:	f89a 3000 	ldrb.w	r3, [sl]
 801a39a:	2b2f      	cmp	r3, #47	@ 0x2f
 801a39c:	d0f7      	beq.n	801a38e <rcl_expand_topic_name+0x206>
 801a39e:	4638      	mov	r0, r7
 801a3a0:	f7e5 ff48 	bl	8000234 <strlen>
 801a3a4:	4a25      	ldr	r2, [pc, #148]	@ (801a43c <rcl_expand_topic_name+0x2b4>)
 801a3a6:	4b26      	ldr	r3, [pc, #152]	@ (801a440 <rcl_expand_topic_name+0x2b8>)
 801a3a8:	f8cd a010 	str.w	sl, [sp, #16]
 801a3ac:	2801      	cmp	r0, #1
 801a3ae:	bf18      	it	ne
 801a3b0:	4613      	movne	r3, r2
 801a3b2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 801a3b6:	e9cd 1301 	strd	r1, r3, [sp, #4]
 801a3ba:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801a3bc:	9703      	str	r7, [sp, #12]
 801a3be:	9200      	str	r2, [sp, #0]
 801a3c0:	ab14      	add	r3, sp, #80	@ 0x50
 801a3c2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801a3c4:	f7fd fc30 	bl	8017c28 <rcutils_format_string_limit>
 801a3c8:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801a3ca:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801a3cc:	4605      	mov	r5, r0
 801a3ce:	4650      	mov	r0, sl
 801a3d0:	4798      	blx	r3
 801a3d2:	46aa      	mov	sl, r5
 801a3d4:	e7d9      	b.n	801a38a <rcl_expand_topic_name+0x202>
 801a3d6:	24ca      	movs	r4, #202	@ 0xca
 801a3d8:	e78b      	b.n	801a2f2 <rcl_expand_topic_name+0x16a>
 801a3da:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801a3dc:	2300      	movs	r3, #0
 801a3de:	6013      	str	r3, [r2, #0]
 801a3e0:	240a      	movs	r4, #10
 801a3e2:	e786      	b.n	801a2f2 <rcl_expand_topic_name+0x16a>
 801a3e4:	465b      	mov	r3, fp
 801a3e6:	9c07      	ldr	r4, [sp, #28]
 801a3e8:	46da      	mov	sl, fp
 801a3ea:	2b00      	cmp	r3, #0
 801a3ec:	d1d3      	bne.n	801a396 <rcl_expand_topic_name+0x20e>
 801a3ee:	f898 3000 	ldrb.w	r3, [r8]
 801a3f2:	2b2f      	cmp	r3, #47	@ 0x2f
 801a3f4:	d0cb      	beq.n	801a38e <rcl_expand_topic_name+0x206>
 801a3f6:	e7b2      	b.n	801a35e <rcl_expand_topic_name+0x1d6>
 801a3f8:	e9dd 1218 	ldrd	r1, r2, [sp, #96]	@ 0x60
 801a3fc:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801a3fe:	6015      	str	r5, [r2, #0]
 801a400:	4658      	mov	r0, fp
 801a402:	4798      	blx	r3
 801a404:	240a      	movs	r4, #10
 801a406:	e774      	b.n	801a2f2 <rcl_expand_topic_name+0x16a>
 801a408:	ab17      	add	r3, sp, #92	@ 0x5c
 801a40a:	e893 0003 	ldmia.w	r3, {r0, r1}
 801a40e:	e88d 0003 	stmia.w	sp, {r0, r1}
 801a412:	ab14      	add	r3, sp, #80	@ 0x50
 801a414:	cb0e      	ldmia	r3, {r1, r2, r3}
 801a416:	4640      	mov	r0, r8
 801a418:	f7fd fd20 	bl	8017e5c <rcutils_strdup>
 801a41c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801a41e:	2800      	cmp	r0, #0
 801a420:	6018      	str	r0, [r3, #0]
 801a422:	bf08      	it	eq
 801a424:	240a      	moveq	r4, #10
 801a426:	e764      	b.n	801a2f2 <rcl_expand_topic_name+0x16a>
 801a428:	0801e3e8 	.word	0x0801e3e8
 801a42c:	0801def8 	.word	0x0801def8
 801a430:	0801e3f0 	.word	0x0801e3f0
 801a434:	0801e3f8 	.word	0x0801e3f8
 801a438:	0801e400 	.word	0x0801e400
 801a43c:	0801dee4 	.word	0x0801dee4
 801a440:	0801df08 	.word	0x0801df08

0801a444 <rcl_get_default_topic_name_substitutions>:
 801a444:	2800      	cmp	r0, #0
 801a446:	bf0c      	ite	eq
 801a448:	200b      	moveq	r0, #11
 801a44a:	2000      	movne	r0, #0
 801a44c:	4770      	bx	lr
 801a44e:	bf00      	nop

0801a450 <rcl_get_zero_initialized_guard_condition>:
 801a450:	4a03      	ldr	r2, [pc, #12]	@ (801a460 <rcl_get_zero_initialized_guard_condition+0x10>)
 801a452:	4603      	mov	r3, r0
 801a454:	e892 0003 	ldmia.w	r2, {r0, r1}
 801a458:	e883 0003 	stmia.w	r3, {r0, r1}
 801a45c:	4618      	mov	r0, r3
 801a45e:	4770      	bx	lr
 801a460:	0801eaec 	.word	0x0801eaec

0801a464 <rcl_guard_condition_init>:
 801a464:	b082      	sub	sp, #8
 801a466:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a468:	b087      	sub	sp, #28
 801a46a:	ac0c      	add	r4, sp, #48	@ 0x30
 801a46c:	e884 000c 	stmia.w	r4, {r2, r3}
 801a470:	46a6      	mov	lr, r4
 801a472:	460d      	mov	r5, r1
 801a474:	4604      	mov	r4, r0
 801a476:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801a47a:	f10d 0c04 	add.w	ip, sp, #4
 801a47e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801a482:	f8de 3000 	ldr.w	r3, [lr]
 801a486:	f8cc 3000 	str.w	r3, [ip]
 801a48a:	a801      	add	r0, sp, #4
 801a48c:	f7f5 fa76 	bl	800f97c <rcutils_allocator_is_valid>
 801a490:	b338      	cbz	r0, 801a4e2 <rcl_guard_condition_init+0x7e>
 801a492:	b334      	cbz	r4, 801a4e2 <rcl_guard_condition_init+0x7e>
 801a494:	6866      	ldr	r6, [r4, #4]
 801a496:	b9ee      	cbnz	r6, 801a4d4 <rcl_guard_condition_init+0x70>
 801a498:	b31d      	cbz	r5, 801a4e2 <rcl_guard_condition_init+0x7e>
 801a49a:	4628      	mov	r0, r5
 801a49c:	f7fa fe98 	bl	80151d0 <rcl_context_is_valid>
 801a4a0:	b308      	cbz	r0, 801a4e6 <rcl_guard_condition_init+0x82>
 801a4a2:	9b01      	ldr	r3, [sp, #4]
 801a4a4:	9905      	ldr	r1, [sp, #20]
 801a4a6:	201c      	movs	r0, #28
 801a4a8:	4798      	blx	r3
 801a4aa:	4607      	mov	r7, r0
 801a4ac:	6060      	str	r0, [r4, #4]
 801a4ae:	b310      	cbz	r0, 801a4f6 <rcl_guard_condition_init+0x92>
 801a4b0:	6828      	ldr	r0, [r5, #0]
 801a4b2:	3028      	adds	r0, #40	@ 0x28
 801a4b4:	f000 f9d4 	bl	801a860 <rmw_create_guard_condition>
 801a4b8:	6038      	str	r0, [r7, #0]
 801a4ba:	6860      	ldr	r0, [r4, #4]
 801a4bc:	6805      	ldr	r5, [r0, #0]
 801a4be:	b1a5      	cbz	r5, 801a4ea <rcl_guard_condition_init+0x86>
 801a4c0:	2301      	movs	r3, #1
 801a4c2:	ac01      	add	r4, sp, #4
 801a4c4:	7103      	strb	r3, [r0, #4]
 801a4c6:	f100 0708 	add.w	r7, r0, #8
 801a4ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801a4cc:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 801a4ce:	6823      	ldr	r3, [r4, #0]
 801a4d0:	603b      	str	r3, [r7, #0]
 801a4d2:	e000      	b.n	801a4d6 <rcl_guard_condition_init+0x72>
 801a4d4:	2664      	movs	r6, #100	@ 0x64
 801a4d6:	4630      	mov	r0, r6
 801a4d8:	b007      	add	sp, #28
 801a4da:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801a4de:	b002      	add	sp, #8
 801a4e0:	4770      	bx	lr
 801a4e2:	260b      	movs	r6, #11
 801a4e4:	e7f7      	b.n	801a4d6 <rcl_guard_condition_init+0x72>
 801a4e6:	2665      	movs	r6, #101	@ 0x65
 801a4e8:	e7f5      	b.n	801a4d6 <rcl_guard_condition_init+0x72>
 801a4ea:	9b02      	ldr	r3, [sp, #8]
 801a4ec:	9905      	ldr	r1, [sp, #20]
 801a4ee:	4798      	blx	r3
 801a4f0:	2601      	movs	r6, #1
 801a4f2:	6065      	str	r5, [r4, #4]
 801a4f4:	e7ef      	b.n	801a4d6 <rcl_guard_condition_init+0x72>
 801a4f6:	260a      	movs	r6, #10
 801a4f8:	e7ed      	b.n	801a4d6 <rcl_guard_condition_init+0x72>
 801a4fa:	bf00      	nop

0801a4fc <rcl_guard_condition_init_from_rmw>:
 801a4fc:	b082      	sub	sp, #8
 801a4fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a502:	b086      	sub	sp, #24
 801a504:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 801a508:	4604      	mov	r4, r0
 801a50a:	f84c 3f04 	str.w	r3, [ip, #4]!
 801a50e:	460e      	mov	r6, r1
 801a510:	4617      	mov	r7, r2
 801a512:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801a516:	f10d 0e04 	add.w	lr, sp, #4
 801a51a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801a51e:	f8dc 3000 	ldr.w	r3, [ip]
 801a522:	f8ce 3000 	str.w	r3, [lr]
 801a526:	a801      	add	r0, sp, #4
 801a528:	f7f5 fa28 	bl	800f97c <rcutils_allocator_is_valid>
 801a52c:	b350      	cbz	r0, 801a584 <rcl_guard_condition_init_from_rmw+0x88>
 801a52e:	b34c      	cbz	r4, 801a584 <rcl_guard_condition_init_from_rmw+0x88>
 801a530:	f8d4 8004 	ldr.w	r8, [r4, #4]
 801a534:	f1b8 0f00 	cmp.w	r8, #0
 801a538:	d11e      	bne.n	801a578 <rcl_guard_condition_init_from_rmw+0x7c>
 801a53a:	b31f      	cbz	r7, 801a584 <rcl_guard_condition_init_from_rmw+0x88>
 801a53c:	4638      	mov	r0, r7
 801a53e:	f7fa fe47 	bl	80151d0 <rcl_context_is_valid>
 801a542:	b328      	cbz	r0, 801a590 <rcl_guard_condition_init_from_rmw+0x94>
 801a544:	9b01      	ldr	r3, [sp, #4]
 801a546:	9905      	ldr	r1, [sp, #20]
 801a548:	201c      	movs	r0, #28
 801a54a:	4798      	blx	r3
 801a54c:	4605      	mov	r5, r0
 801a54e:	6060      	str	r0, [r4, #4]
 801a550:	b358      	cbz	r0, 801a5aa <rcl_guard_condition_init_from_rmw+0xae>
 801a552:	b1fe      	cbz	r6, 801a594 <rcl_guard_condition_init_from_rmw+0x98>
 801a554:	6006      	str	r6, [r0, #0]
 801a556:	f880 8004 	strb.w	r8, [r0, #4]
 801a55a:	ac01      	add	r4, sp, #4
 801a55c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801a55e:	f105 0c08 	add.w	ip, r5, #8
 801a562:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801a566:	6823      	ldr	r3, [r4, #0]
 801a568:	f8cc 3000 	str.w	r3, [ip]
 801a56c:	2000      	movs	r0, #0
 801a56e:	b006      	add	sp, #24
 801a570:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a574:	b002      	add	sp, #8
 801a576:	4770      	bx	lr
 801a578:	2064      	movs	r0, #100	@ 0x64
 801a57a:	b006      	add	sp, #24
 801a57c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a580:	b002      	add	sp, #8
 801a582:	4770      	bx	lr
 801a584:	200b      	movs	r0, #11
 801a586:	b006      	add	sp, #24
 801a588:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a58c:	b002      	add	sp, #8
 801a58e:	4770      	bx	lr
 801a590:	2065      	movs	r0, #101	@ 0x65
 801a592:	e7f2      	b.n	801a57a <rcl_guard_condition_init_from_rmw+0x7e>
 801a594:	6838      	ldr	r0, [r7, #0]
 801a596:	3028      	adds	r0, #40	@ 0x28
 801a598:	f000 f962 	bl	801a860 <rmw_create_guard_condition>
 801a59c:	6028      	str	r0, [r5, #0]
 801a59e:	6865      	ldr	r5, [r4, #4]
 801a5a0:	682e      	ldr	r6, [r5, #0]
 801a5a2:	b126      	cbz	r6, 801a5ae <rcl_guard_condition_init_from_rmw+0xb2>
 801a5a4:	2301      	movs	r3, #1
 801a5a6:	712b      	strb	r3, [r5, #4]
 801a5a8:	e7d7      	b.n	801a55a <rcl_guard_condition_init_from_rmw+0x5e>
 801a5aa:	200a      	movs	r0, #10
 801a5ac:	e7e5      	b.n	801a57a <rcl_guard_condition_init_from_rmw+0x7e>
 801a5ae:	4628      	mov	r0, r5
 801a5b0:	9b02      	ldr	r3, [sp, #8]
 801a5b2:	9905      	ldr	r1, [sp, #20]
 801a5b4:	4798      	blx	r3
 801a5b6:	6066      	str	r6, [r4, #4]
 801a5b8:	2001      	movs	r0, #1
 801a5ba:	e7de      	b.n	801a57a <rcl_guard_condition_init_from_rmw+0x7e>

0801a5bc <rcl_guard_condition_fini>:
 801a5bc:	b570      	push	{r4, r5, r6, lr}
 801a5be:	b082      	sub	sp, #8
 801a5c0:	b1f0      	cbz	r0, 801a600 <rcl_guard_condition_fini+0x44>
 801a5c2:	6843      	ldr	r3, [r0, #4]
 801a5c4:	4604      	mov	r4, r0
 801a5c6:	b163      	cbz	r3, 801a5e2 <rcl_guard_condition_fini+0x26>
 801a5c8:	6818      	ldr	r0, [r3, #0]
 801a5ca:	68de      	ldr	r6, [r3, #12]
 801a5cc:	6999      	ldr	r1, [r3, #24]
 801a5ce:	b160      	cbz	r0, 801a5ea <rcl_guard_condition_fini+0x2e>
 801a5d0:	791d      	ldrb	r5, [r3, #4]
 801a5d2:	b965      	cbnz	r5, 801a5ee <rcl_guard_condition_fini+0x32>
 801a5d4:	4618      	mov	r0, r3
 801a5d6:	47b0      	blx	r6
 801a5d8:	2300      	movs	r3, #0
 801a5da:	4628      	mov	r0, r5
 801a5dc:	6063      	str	r3, [r4, #4]
 801a5de:	b002      	add	sp, #8
 801a5e0:	bd70      	pop	{r4, r5, r6, pc}
 801a5e2:	461d      	mov	r5, r3
 801a5e4:	4628      	mov	r0, r5
 801a5e6:	b002      	add	sp, #8
 801a5e8:	bd70      	pop	{r4, r5, r6, pc}
 801a5ea:	4605      	mov	r5, r0
 801a5ec:	e7f2      	b.n	801a5d4 <rcl_guard_condition_fini+0x18>
 801a5ee:	9101      	str	r1, [sp, #4]
 801a5f0:	f000 f94a 	bl	801a888 <rmw_destroy_guard_condition>
 801a5f4:	1e05      	subs	r5, r0, #0
 801a5f6:	6863      	ldr	r3, [r4, #4]
 801a5f8:	9901      	ldr	r1, [sp, #4]
 801a5fa:	bf18      	it	ne
 801a5fc:	2501      	movne	r5, #1
 801a5fe:	e7e9      	b.n	801a5d4 <rcl_guard_condition_fini+0x18>
 801a600:	250b      	movs	r5, #11
 801a602:	4628      	mov	r0, r5
 801a604:	b002      	add	sp, #8
 801a606:	bd70      	pop	{r4, r5, r6, pc}

0801a608 <rcl_guard_condition_get_default_options>:
 801a608:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a60a:	b087      	sub	sp, #28
 801a60c:	4606      	mov	r6, r0
 801a60e:	4668      	mov	r0, sp
 801a610:	f7f5 f9a6 	bl	800f960 <rcutils_get_default_allocator>
 801a614:	4b09      	ldr	r3, [pc, #36]	@ (801a63c <rcl_guard_condition_get_default_options+0x34>)
 801a616:	46ee      	mov	lr, sp
 801a618:	469c      	mov	ip, r3
 801a61a:	461d      	mov	r5, r3
 801a61c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801a620:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801a624:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801a626:	4634      	mov	r4, r6
 801a628:	f8de 7000 	ldr.w	r7, [lr]
 801a62c:	f8cc 7000 	str.w	r7, [ip]
 801a630:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801a632:	4630      	mov	r0, r6
 801a634:	6027      	str	r7, [r4, #0]
 801a636:	b007      	add	sp, #28
 801a638:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a63a:	bf00      	nop
 801a63c:	2000b69c 	.word	0x2000b69c

0801a640 <rcl_trigger_guard_condition>:
 801a640:	b148      	cbz	r0, 801a656 <rcl_trigger_guard_condition+0x16>
 801a642:	b508      	push	{r3, lr}
 801a644:	6843      	ldr	r3, [r0, #4]
 801a646:	b143      	cbz	r3, 801a65a <rcl_trigger_guard_condition+0x1a>
 801a648:	6818      	ldr	r0, [r3, #0]
 801a64a:	f000 f931 	bl	801a8b0 <rmw_trigger_guard_condition>
 801a64e:	3800      	subs	r0, #0
 801a650:	bf18      	it	ne
 801a652:	2001      	movne	r0, #1
 801a654:	bd08      	pop	{r3, pc}
 801a656:	200b      	movs	r0, #11
 801a658:	4770      	bx	lr
 801a65a:	200b      	movs	r0, #11
 801a65c:	bd08      	pop	{r3, pc}
 801a65e:	bf00      	nop

0801a660 <rcl_guard_condition_get_rmw_handle>:
 801a660:	b110      	cbz	r0, 801a668 <rcl_guard_condition_get_rmw_handle+0x8>
 801a662:	6840      	ldr	r0, [r0, #4]
 801a664:	b100      	cbz	r0, 801a668 <rcl_guard_condition_get_rmw_handle+0x8>
 801a666:	6800      	ldr	r0, [r0, #0]
 801a668:	4770      	bx	lr
 801a66a:	bf00      	nop

0801a66c <rcl_validate_topic_name>:
 801a66c:	2800      	cmp	r0, #0
 801a66e:	d07a      	beq.n	801a766 <rcl_validate_topic_name+0xfa>
 801a670:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a674:	460e      	mov	r6, r1
 801a676:	2900      	cmp	r1, #0
 801a678:	d07c      	beq.n	801a774 <rcl_validate_topic_name+0x108>
 801a67a:	4617      	mov	r7, r2
 801a67c:	4605      	mov	r5, r0
 801a67e:	f7e5 fdd9 	bl	8000234 <strlen>
 801a682:	b1b0      	cbz	r0, 801a6b2 <rcl_validate_topic_name+0x46>
 801a684:	f895 9000 	ldrb.w	r9, [r5]
 801a688:	f8df c180 	ldr.w	ip, [pc, #384]	@ 801a80c <rcl_validate_topic_name+0x1a0>
 801a68c:	f81c 3009 	ldrb.w	r3, [ip, r9]
 801a690:	f013 0304 	ands.w	r3, r3, #4
 801a694:	d169      	bne.n	801a76a <rcl_validate_topic_name+0xfe>
 801a696:	f100 38ff 	add.w	r8, r0, #4294967295	@ 0xffffffff
 801a69a:	f815 2008 	ldrb.w	r2, [r5, r8]
 801a69e:	2a2f      	cmp	r2, #47	@ 0x2f
 801a6a0:	d10e      	bne.n	801a6c0 <rcl_validate_topic_name+0x54>
 801a6a2:	2202      	movs	r2, #2
 801a6a4:	6032      	str	r2, [r6, #0]
 801a6a6:	b36f      	cbz	r7, 801a704 <rcl_validate_topic_name+0x98>
 801a6a8:	f8c7 8000 	str.w	r8, [r7]
 801a6ac:	4618      	mov	r0, r3
 801a6ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a6b2:	2301      	movs	r3, #1
 801a6b4:	6033      	str	r3, [r6, #0]
 801a6b6:	b32f      	cbz	r7, 801a704 <rcl_validate_topic_name+0x98>
 801a6b8:	2000      	movs	r0, #0
 801a6ba:	6038      	str	r0, [r7, #0]
 801a6bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a6c0:	f105 3aff 	add.w	sl, r5, #4294967295	@ 0xffffffff
 801a6c4:	461c      	mov	r4, r3
 801a6c6:	4619      	mov	r1, r3
 801a6c8:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 801a6cc:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 801a6d0:	f1be 0f09 	cmp.w	lr, #9
 801a6d4:	d919      	bls.n	801a70a <rcl_validate_topic_name+0x9e>
 801a6d6:	f022 0e20 	bic.w	lr, r2, #32
 801a6da:	f1ae 0e41 	sub.w	lr, lr, #65	@ 0x41
 801a6de:	f1be 0f19 	cmp.w	lr, #25
 801a6e2:	d912      	bls.n	801a70a <rcl_validate_topic_name+0x9e>
 801a6e4:	2a5f      	cmp	r2, #95	@ 0x5f
 801a6e6:	d019      	beq.n	801a71c <rcl_validate_topic_name+0xb0>
 801a6e8:	2a2f      	cmp	r2, #47	@ 0x2f
 801a6ea:	d051      	beq.n	801a790 <rcl_validate_topic_name+0x124>
 801a6ec:	2a7e      	cmp	r2, #126	@ 0x7e
 801a6ee:	d048      	beq.n	801a782 <rcl_validate_topic_name+0x116>
 801a6f0:	2a7b      	cmp	r2, #123	@ 0x7b
 801a6f2:	d054      	beq.n	801a79e <rcl_validate_topic_name+0x132>
 801a6f4:	2a7d      	cmp	r2, #125	@ 0x7d
 801a6f6:	d161      	bne.n	801a7bc <rcl_validate_topic_name+0x150>
 801a6f8:	2c00      	cmp	r4, #0
 801a6fa:	d155      	bne.n	801a7a8 <rcl_validate_topic_name+0x13c>
 801a6fc:	2305      	movs	r3, #5
 801a6fe:	6033      	str	r3, [r6, #0]
 801a700:	b107      	cbz	r7, 801a704 <rcl_validate_topic_name+0x98>
 801a702:	6039      	str	r1, [r7, #0]
 801a704:	2000      	movs	r0, #0
 801a706:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a70a:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801a70e:	0752      	lsls	r2, r2, #29
 801a710:	d504      	bpl.n	801a71c <rcl_validate_topic_name+0xb0>
 801a712:	b11c      	cbz	r4, 801a71c <rcl_validate_topic_name+0xb0>
 801a714:	b111      	cbz	r1, 801a71c <rcl_validate_topic_name+0xb0>
 801a716:	1e4a      	subs	r2, r1, #1
 801a718:	429a      	cmp	r2, r3
 801a71a:	d02d      	beq.n	801a778 <rcl_validate_topic_name+0x10c>
 801a71c:	3101      	adds	r1, #1
 801a71e:	4288      	cmp	r0, r1
 801a720:	d1d2      	bne.n	801a6c8 <rcl_validate_topic_name+0x5c>
 801a722:	2c00      	cmp	r4, #0
 801a724:	d145      	bne.n	801a7b2 <rcl_validate_topic_name+0x146>
 801a726:	f1b9 0f7e 	cmp.w	r9, #126	@ 0x7e
 801a72a:	d04f      	beq.n	801a7cc <rcl_validate_topic_name+0x160>
 801a72c:	4620      	mov	r0, r4
 801a72e:	2301      	movs	r3, #1
 801a730:	e006      	b.n	801a740 <rcl_validate_topic_name+0xd4>
 801a732:	428b      	cmp	r3, r1
 801a734:	f105 0501 	add.w	r5, r5, #1
 801a738:	f103 0201 	add.w	r2, r3, #1
 801a73c:	d236      	bcs.n	801a7ac <rcl_validate_topic_name+0x140>
 801a73e:	4613      	mov	r3, r2
 801a740:	4580      	cmp	r8, r0
 801a742:	f100 0001 	add.w	r0, r0, #1
 801a746:	d0f4      	beq.n	801a732 <rcl_validate_topic_name+0xc6>
 801a748:	782a      	ldrb	r2, [r5, #0]
 801a74a:	2a2f      	cmp	r2, #47	@ 0x2f
 801a74c:	d1f1      	bne.n	801a732 <rcl_validate_topic_name+0xc6>
 801a74e:	786a      	ldrb	r2, [r5, #1]
 801a750:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801a754:	0754      	lsls	r4, r2, #29
 801a756:	d5ec      	bpl.n	801a732 <rcl_validate_topic_name+0xc6>
 801a758:	2204      	movs	r2, #4
 801a75a:	6032      	str	r2, [r6, #0]
 801a75c:	2f00      	cmp	r7, #0
 801a75e:	d0d1      	beq.n	801a704 <rcl_validate_topic_name+0x98>
 801a760:	603b      	str	r3, [r7, #0]
 801a762:	2000      	movs	r0, #0
 801a764:	e7aa      	b.n	801a6bc <rcl_validate_topic_name+0x50>
 801a766:	200b      	movs	r0, #11
 801a768:	4770      	bx	lr
 801a76a:	2304      	movs	r3, #4
 801a76c:	6033      	str	r3, [r6, #0]
 801a76e:	2f00      	cmp	r7, #0
 801a770:	d1a2      	bne.n	801a6b8 <rcl_validate_topic_name+0x4c>
 801a772:	e7c7      	b.n	801a704 <rcl_validate_topic_name+0x98>
 801a774:	200b      	movs	r0, #11
 801a776:	e7a1      	b.n	801a6bc <rcl_validate_topic_name+0x50>
 801a778:	2309      	movs	r3, #9
 801a77a:	6033      	str	r3, [r6, #0]
 801a77c:	2f00      	cmp	r7, #0
 801a77e:	d1c0      	bne.n	801a702 <rcl_validate_topic_name+0x96>
 801a780:	e7c0      	b.n	801a704 <rcl_validate_topic_name+0x98>
 801a782:	2900      	cmp	r1, #0
 801a784:	d0ca      	beq.n	801a71c <rcl_validate_topic_name+0xb0>
 801a786:	2306      	movs	r3, #6
 801a788:	6033      	str	r3, [r6, #0]
 801a78a:	2f00      	cmp	r7, #0
 801a78c:	d1b9      	bne.n	801a702 <rcl_validate_topic_name+0x96>
 801a78e:	e7b9      	b.n	801a704 <rcl_validate_topic_name+0x98>
 801a790:	2c00      	cmp	r4, #0
 801a792:	d0c3      	beq.n	801a71c <rcl_validate_topic_name+0xb0>
 801a794:	2308      	movs	r3, #8
 801a796:	6033      	str	r3, [r6, #0]
 801a798:	2f00      	cmp	r7, #0
 801a79a:	d1b2      	bne.n	801a702 <rcl_validate_topic_name+0x96>
 801a79c:	e7b2      	b.n	801a704 <rcl_validate_topic_name+0x98>
 801a79e:	2c00      	cmp	r4, #0
 801a7a0:	d1f8      	bne.n	801a794 <rcl_validate_topic_name+0x128>
 801a7a2:	460b      	mov	r3, r1
 801a7a4:	2401      	movs	r4, #1
 801a7a6:	e7b9      	b.n	801a71c <rcl_validate_topic_name+0xb0>
 801a7a8:	2400      	movs	r4, #0
 801a7aa:	e7b7      	b.n	801a71c <rcl_validate_topic_name+0xb0>
 801a7ac:	2000      	movs	r0, #0
 801a7ae:	6030      	str	r0, [r6, #0]
 801a7b0:	e784      	b.n	801a6bc <rcl_validate_topic_name+0x50>
 801a7b2:	2205      	movs	r2, #5
 801a7b4:	6032      	str	r2, [r6, #0]
 801a7b6:	2f00      	cmp	r7, #0
 801a7b8:	d1d2      	bne.n	801a760 <rcl_validate_topic_name+0xf4>
 801a7ba:	e7a3      	b.n	801a704 <rcl_validate_topic_name+0x98>
 801a7bc:	2c00      	cmp	r4, #0
 801a7be:	bf14      	ite	ne
 801a7c0:	2308      	movne	r3, #8
 801a7c2:	2303      	moveq	r3, #3
 801a7c4:	6033      	str	r3, [r6, #0]
 801a7c6:	2f00      	cmp	r7, #0
 801a7c8:	d19b      	bne.n	801a702 <rcl_validate_topic_name+0x96>
 801a7ca:	e79b      	b.n	801a704 <rcl_validate_topic_name+0x98>
 801a7cc:	2301      	movs	r3, #1
 801a7ce:	e00a      	b.n	801a7e6 <rcl_validate_topic_name+0x17a>
 801a7d0:	2c01      	cmp	r4, #1
 801a7d2:	d013      	beq.n	801a7fc <rcl_validate_topic_name+0x190>
 801a7d4:	4299      	cmp	r1, r3
 801a7d6:	f104 0401 	add.w	r4, r4, #1
 801a7da:	f105 0501 	add.w	r5, r5, #1
 801a7de:	f103 0201 	add.w	r2, r3, #1
 801a7e2:	d9e3      	bls.n	801a7ac <rcl_validate_topic_name+0x140>
 801a7e4:	4613      	mov	r3, r2
 801a7e6:	45a0      	cmp	r8, r4
 801a7e8:	d0f4      	beq.n	801a7d4 <rcl_validate_topic_name+0x168>
 801a7ea:	782a      	ldrb	r2, [r5, #0]
 801a7ec:	2a2f      	cmp	r2, #47	@ 0x2f
 801a7ee:	d1ef      	bne.n	801a7d0 <rcl_validate_topic_name+0x164>
 801a7f0:	786a      	ldrb	r2, [r5, #1]
 801a7f2:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801a7f6:	0752      	lsls	r2, r2, #29
 801a7f8:	d5ec      	bpl.n	801a7d4 <rcl_validate_topic_name+0x168>
 801a7fa:	e7ad      	b.n	801a758 <rcl_validate_topic_name+0xec>
 801a7fc:	2307      	movs	r3, #7
 801a7fe:	6033      	str	r3, [r6, #0]
 801a800:	2f00      	cmp	r7, #0
 801a802:	f43f af7f 	beq.w	801a704 <rcl_validate_topic_name+0x98>
 801a806:	603c      	str	r4, [r7, #0]
 801a808:	2000      	movs	r0, #0
 801a80a:	e757      	b.n	801a6bc <rcl_validate_topic_name+0x50>
 801a80c:	0801ebd3 	.word	0x0801ebd3

0801a810 <rcutils_string_array_fini>:
 801a810:	b320      	cbz	r0, 801a85c <rcutils_string_array_fini+0x4c>
 801a812:	b570      	push	{r4, r5, r6, lr}
 801a814:	4604      	mov	r4, r0
 801a816:	6840      	ldr	r0, [r0, #4]
 801a818:	b1d8      	cbz	r0, 801a852 <rcutils_string_array_fini+0x42>
 801a81a:	f104 0008 	add.w	r0, r4, #8
 801a81e:	f7f5 f8ad 	bl	800f97c <rcutils_allocator_is_valid>
 801a822:	b1b8      	cbz	r0, 801a854 <rcutils_string_array_fini+0x44>
 801a824:	6823      	ldr	r3, [r4, #0]
 801a826:	b1bb      	cbz	r3, 801a858 <rcutils_string_array_fini+0x48>
 801a828:	2500      	movs	r5, #0
 801a82a:	6860      	ldr	r0, [r4, #4]
 801a82c:	462e      	mov	r6, r5
 801a82e:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 801a832:	68e3      	ldr	r3, [r4, #12]
 801a834:	69a1      	ldr	r1, [r4, #24]
 801a836:	4798      	blx	r3
 801a838:	e9d4 3000 	ldrd	r3, r0, [r4]
 801a83c:	f840 6025 	str.w	r6, [r0, r5, lsl #2]
 801a840:	3501      	adds	r5, #1
 801a842:	429d      	cmp	r5, r3
 801a844:	d3f3      	bcc.n	801a82e <rcutils_string_array_fini+0x1e>
 801a846:	68e3      	ldr	r3, [r4, #12]
 801a848:	69a1      	ldr	r1, [r4, #24]
 801a84a:	4798      	blx	r3
 801a84c:	2000      	movs	r0, #0
 801a84e:	e9c4 0000 	strd	r0, r0, [r4]
 801a852:	bd70      	pop	{r4, r5, r6, pc}
 801a854:	200b      	movs	r0, #11
 801a856:	bd70      	pop	{r4, r5, r6, pc}
 801a858:	6860      	ldr	r0, [r4, #4]
 801a85a:	e7f4      	b.n	801a846 <rcutils_string_array_fini+0x36>
 801a85c:	200b      	movs	r0, #11
 801a85e:	4770      	bx	lr

0801a860 <rmw_create_guard_condition>:
 801a860:	b538      	push	{r3, r4, r5, lr}
 801a862:	4605      	mov	r5, r0
 801a864:	4807      	ldr	r0, [pc, #28]	@ (801a884 <rmw_create_guard_condition+0x24>)
 801a866:	f7fd ff47 	bl	80186f8 <get_memory>
 801a86a:	b148      	cbz	r0, 801a880 <rmw_create_guard_condition+0x20>
 801a86c:	6884      	ldr	r4, [r0, #8]
 801a86e:	2300      	movs	r3, #0
 801a870:	7423      	strb	r3, [r4, #16]
 801a872:	61e5      	str	r5, [r4, #28]
 801a874:	f7fd ffa8 	bl	80187c8 <rmw_get_implementation_identifier>
 801a878:	e9c4 0405 	strd	r0, r4, [r4, #20]
 801a87c:	f104 0014 	add.w	r0, r4, #20
 801a880:	bd38      	pop	{r3, r4, r5, pc}
 801a882:	bf00      	nop
 801a884:	2000b4c4 	.word	0x2000b4c4

0801a888 <rmw_destroy_guard_condition>:
 801a888:	b508      	push	{r3, lr}
 801a88a:	4b08      	ldr	r3, [pc, #32]	@ (801a8ac <rmw_destroy_guard_condition+0x24>)
 801a88c:	6819      	ldr	r1, [r3, #0]
 801a88e:	b911      	cbnz	r1, 801a896 <rmw_destroy_guard_condition+0xe>
 801a890:	e00a      	b.n	801a8a8 <rmw_destroy_guard_condition+0x20>
 801a892:	6849      	ldr	r1, [r1, #4]
 801a894:	b141      	cbz	r1, 801a8a8 <rmw_destroy_guard_condition+0x20>
 801a896:	688b      	ldr	r3, [r1, #8]
 801a898:	3314      	adds	r3, #20
 801a89a:	4298      	cmp	r0, r3
 801a89c:	d1f9      	bne.n	801a892 <rmw_destroy_guard_condition+0xa>
 801a89e:	4803      	ldr	r0, [pc, #12]	@ (801a8ac <rmw_destroy_guard_condition+0x24>)
 801a8a0:	f7fd ff3a 	bl	8018718 <put_memory>
 801a8a4:	2000      	movs	r0, #0
 801a8a6:	bd08      	pop	{r3, pc}
 801a8a8:	2001      	movs	r0, #1
 801a8aa:	bd08      	pop	{r3, pc}
 801a8ac:	2000b4c4 	.word	0x2000b4c4

0801a8b0 <rmw_trigger_guard_condition>:
 801a8b0:	b160      	cbz	r0, 801a8cc <rmw_trigger_guard_condition+0x1c>
 801a8b2:	b510      	push	{r4, lr}
 801a8b4:	4604      	mov	r4, r0
 801a8b6:	6800      	ldr	r0, [r0, #0]
 801a8b8:	f7f6 fb88 	bl	8010fcc <is_uxrce_rmw_identifier_valid>
 801a8bc:	b908      	cbnz	r0, 801a8c2 <rmw_trigger_guard_condition+0x12>
 801a8be:	2001      	movs	r0, #1
 801a8c0:	bd10      	pop	{r4, pc}
 801a8c2:	6863      	ldr	r3, [r4, #4]
 801a8c4:	2201      	movs	r2, #1
 801a8c6:	741a      	strb	r2, [r3, #16]
 801a8c8:	2000      	movs	r0, #0
 801a8ca:	bd10      	pop	{r4, pc}
 801a8cc:	2001      	movs	r0, #1
 801a8ce:	4770      	bx	lr

0801a8d0 <rosidl_runtime_c__String__init>:
 801a8d0:	b510      	push	{r4, lr}
 801a8d2:	4604      	mov	r4, r0
 801a8d4:	b086      	sub	sp, #24
 801a8d6:	b170      	cbz	r0, 801a8f6 <rosidl_runtime_c__String__init+0x26>
 801a8d8:	a801      	add	r0, sp, #4
 801a8da:	f7f5 f841 	bl	800f960 <rcutils_get_default_allocator>
 801a8de:	9b01      	ldr	r3, [sp, #4]
 801a8e0:	9905      	ldr	r1, [sp, #20]
 801a8e2:	2001      	movs	r0, #1
 801a8e4:	4798      	blx	r3
 801a8e6:	6020      	str	r0, [r4, #0]
 801a8e8:	b128      	cbz	r0, 801a8f6 <rosidl_runtime_c__String__init+0x26>
 801a8ea:	2100      	movs	r1, #0
 801a8ec:	2201      	movs	r2, #1
 801a8ee:	7001      	strb	r1, [r0, #0]
 801a8f0:	e9c4 1201 	strd	r1, r2, [r4, #4]
 801a8f4:	4610      	mov	r0, r2
 801a8f6:	b006      	add	sp, #24
 801a8f8:	bd10      	pop	{r4, pc}
 801a8fa:	bf00      	nop

0801a8fc <rosidl_runtime_c__String__fini>:
 801a8fc:	b320      	cbz	r0, 801a948 <rosidl_runtime_c__String__fini+0x4c>
 801a8fe:	b510      	push	{r4, lr}
 801a900:	6803      	ldr	r3, [r0, #0]
 801a902:	b086      	sub	sp, #24
 801a904:	4604      	mov	r4, r0
 801a906:	b173      	cbz	r3, 801a926 <rosidl_runtime_c__String__fini+0x2a>
 801a908:	6883      	ldr	r3, [r0, #8]
 801a90a:	b1f3      	cbz	r3, 801a94a <rosidl_runtime_c__String__fini+0x4e>
 801a90c:	a801      	add	r0, sp, #4
 801a90e:	f7f5 f827 	bl	800f960 <rcutils_get_default_allocator>
 801a912:	9b02      	ldr	r3, [sp, #8]
 801a914:	9905      	ldr	r1, [sp, #20]
 801a916:	6820      	ldr	r0, [r4, #0]
 801a918:	4798      	blx	r3
 801a91a:	2300      	movs	r3, #0
 801a91c:	e9c4 3300 	strd	r3, r3, [r4]
 801a920:	60a3      	str	r3, [r4, #8]
 801a922:	b006      	add	sp, #24
 801a924:	bd10      	pop	{r4, pc}
 801a926:	6843      	ldr	r3, [r0, #4]
 801a928:	b9db      	cbnz	r3, 801a962 <rosidl_runtime_c__String__fini+0x66>
 801a92a:	6883      	ldr	r3, [r0, #8]
 801a92c:	2b00      	cmp	r3, #0
 801a92e:	d0f8      	beq.n	801a922 <rosidl_runtime_c__String__fini+0x26>
 801a930:	4b12      	ldr	r3, [pc, #72]	@ (801a97c <rosidl_runtime_c__String__fini+0x80>)
 801a932:	4813      	ldr	r0, [pc, #76]	@ (801a980 <rosidl_runtime_c__String__fini+0x84>)
 801a934:	681b      	ldr	r3, [r3, #0]
 801a936:	2251      	movs	r2, #81	@ 0x51
 801a938:	68db      	ldr	r3, [r3, #12]
 801a93a:	2101      	movs	r1, #1
 801a93c:	f000 fb82 	bl	801b044 <fwrite>
 801a940:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801a944:	f000 f83e 	bl	801a9c4 <exit>
 801a948:	4770      	bx	lr
 801a94a:	4b0c      	ldr	r3, [pc, #48]	@ (801a97c <rosidl_runtime_c__String__fini+0x80>)
 801a94c:	480d      	ldr	r0, [pc, #52]	@ (801a984 <rosidl_runtime_c__String__fini+0x88>)
 801a94e:	681b      	ldr	r3, [r3, #0]
 801a950:	224c      	movs	r2, #76	@ 0x4c
 801a952:	68db      	ldr	r3, [r3, #12]
 801a954:	2101      	movs	r1, #1
 801a956:	f000 fb75 	bl	801b044 <fwrite>
 801a95a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801a95e:	f000 f831 	bl	801a9c4 <exit>
 801a962:	4b06      	ldr	r3, [pc, #24]	@ (801a97c <rosidl_runtime_c__String__fini+0x80>)
 801a964:	4808      	ldr	r0, [pc, #32]	@ (801a988 <rosidl_runtime_c__String__fini+0x8c>)
 801a966:	681b      	ldr	r3, [r3, #0]
 801a968:	224e      	movs	r2, #78	@ 0x4e
 801a96a:	68db      	ldr	r3, [r3, #12]
 801a96c:	2101      	movs	r1, #1
 801a96e:	f000 fb69 	bl	801b044 <fwrite>
 801a972:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801a976:	f000 f825 	bl	801a9c4 <exit>
 801a97a:	bf00      	nop
 801a97c:	20000438 	.word	0x20000438
 801a980:	0801e4ac 	.word	0x0801e4ac
 801a984:	0801e40c 	.word	0x0801e40c
 801a988:	0801e45c 	.word	0x0801e45c

0801a98c <calloc>:
 801a98c:	4b02      	ldr	r3, [pc, #8]	@ (801a998 <calloc+0xc>)
 801a98e:	460a      	mov	r2, r1
 801a990:	4601      	mov	r1, r0
 801a992:	6818      	ldr	r0, [r3, #0]
 801a994:	f000 b802 	b.w	801a99c <_calloc_r>
 801a998:	20000438 	.word	0x20000438

0801a99c <_calloc_r>:
 801a99c:	b570      	push	{r4, r5, r6, lr}
 801a99e:	fba1 5402 	umull	r5, r4, r1, r2
 801a9a2:	b934      	cbnz	r4, 801a9b2 <_calloc_r+0x16>
 801a9a4:	4629      	mov	r1, r5
 801a9a6:	f000 f899 	bl	801aadc <_malloc_r>
 801a9aa:	4606      	mov	r6, r0
 801a9ac:	b928      	cbnz	r0, 801a9ba <_calloc_r+0x1e>
 801a9ae:	4630      	mov	r0, r6
 801a9b0:	bd70      	pop	{r4, r5, r6, pc}
 801a9b2:	220c      	movs	r2, #12
 801a9b4:	6002      	str	r2, [r0, #0]
 801a9b6:	2600      	movs	r6, #0
 801a9b8:	e7f9      	b.n	801a9ae <_calloc_r+0x12>
 801a9ba:	462a      	mov	r2, r5
 801a9bc:	4621      	mov	r1, r4
 801a9be:	f000 fcd5 	bl	801b36c <memset>
 801a9c2:	e7f4      	b.n	801a9ae <_calloc_r+0x12>

0801a9c4 <exit>:
 801a9c4:	b508      	push	{r3, lr}
 801a9c6:	4b06      	ldr	r3, [pc, #24]	@ (801a9e0 <exit+0x1c>)
 801a9c8:	4604      	mov	r4, r0
 801a9ca:	b113      	cbz	r3, 801a9d2 <exit+0xe>
 801a9cc:	2100      	movs	r1, #0
 801a9ce:	f3af 8000 	nop.w
 801a9d2:	4b04      	ldr	r3, [pc, #16]	@ (801a9e4 <exit+0x20>)
 801a9d4:	681b      	ldr	r3, [r3, #0]
 801a9d6:	b103      	cbz	r3, 801a9da <exit+0x16>
 801a9d8:	4798      	blx	r3
 801a9da:	4620      	mov	r0, r4
 801a9dc:	f7e9 f928 	bl	8003c30 <_exit>
 801a9e0:	00000000 	.word	0x00000000
 801a9e4:	2000b7f0 	.word	0x2000b7f0

0801a9e8 <getenv>:
 801a9e8:	b507      	push	{r0, r1, r2, lr}
 801a9ea:	4b04      	ldr	r3, [pc, #16]	@ (801a9fc <getenv+0x14>)
 801a9ec:	4601      	mov	r1, r0
 801a9ee:	aa01      	add	r2, sp, #4
 801a9f0:	6818      	ldr	r0, [r3, #0]
 801a9f2:	f000 f805 	bl	801aa00 <_findenv_r>
 801a9f6:	b003      	add	sp, #12
 801a9f8:	f85d fb04 	ldr.w	pc, [sp], #4
 801a9fc:	20000438 	.word	0x20000438

0801aa00 <_findenv_r>:
 801aa00:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aa04:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 801aa74 <_findenv_r+0x74>
 801aa08:	4606      	mov	r6, r0
 801aa0a:	4689      	mov	r9, r1
 801aa0c:	4617      	mov	r7, r2
 801aa0e:	f000 fda3 	bl	801b558 <__env_lock>
 801aa12:	f8da 4000 	ldr.w	r4, [sl]
 801aa16:	b134      	cbz	r4, 801aa26 <_findenv_r+0x26>
 801aa18:	464b      	mov	r3, r9
 801aa1a:	4698      	mov	r8, r3
 801aa1c:	f813 2b01 	ldrb.w	r2, [r3], #1
 801aa20:	b13a      	cbz	r2, 801aa32 <_findenv_r+0x32>
 801aa22:	2a3d      	cmp	r2, #61	@ 0x3d
 801aa24:	d1f9      	bne.n	801aa1a <_findenv_r+0x1a>
 801aa26:	4630      	mov	r0, r6
 801aa28:	f000 fd9c 	bl	801b564 <__env_unlock>
 801aa2c:	2000      	movs	r0, #0
 801aa2e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aa32:	eba8 0809 	sub.w	r8, r8, r9
 801aa36:	46a3      	mov	fp, r4
 801aa38:	f854 0b04 	ldr.w	r0, [r4], #4
 801aa3c:	2800      	cmp	r0, #0
 801aa3e:	d0f2      	beq.n	801aa26 <_findenv_r+0x26>
 801aa40:	4642      	mov	r2, r8
 801aa42:	4649      	mov	r1, r9
 801aa44:	f000 fca7 	bl	801b396 <strncmp>
 801aa48:	2800      	cmp	r0, #0
 801aa4a:	d1f4      	bne.n	801aa36 <_findenv_r+0x36>
 801aa4c:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801aa50:	eb03 0508 	add.w	r5, r3, r8
 801aa54:	f813 3008 	ldrb.w	r3, [r3, r8]
 801aa58:	2b3d      	cmp	r3, #61	@ 0x3d
 801aa5a:	d1ec      	bne.n	801aa36 <_findenv_r+0x36>
 801aa5c:	f8da 3000 	ldr.w	r3, [sl]
 801aa60:	ebab 0303 	sub.w	r3, fp, r3
 801aa64:	109b      	asrs	r3, r3, #2
 801aa66:	4630      	mov	r0, r6
 801aa68:	603b      	str	r3, [r7, #0]
 801aa6a:	f000 fd7b 	bl	801b564 <__env_unlock>
 801aa6e:	1c68      	adds	r0, r5, #1
 801aa70:	e7dd      	b.n	801aa2e <_findenv_r+0x2e>
 801aa72:	bf00      	nop
 801aa74:	20000000 	.word	0x20000000

0801aa78 <malloc>:
 801aa78:	4b02      	ldr	r3, [pc, #8]	@ (801aa84 <malloc+0xc>)
 801aa7a:	4601      	mov	r1, r0
 801aa7c:	6818      	ldr	r0, [r3, #0]
 801aa7e:	f000 b82d 	b.w	801aadc <_malloc_r>
 801aa82:	bf00      	nop
 801aa84:	20000438 	.word	0x20000438

0801aa88 <free>:
 801aa88:	4b02      	ldr	r3, [pc, #8]	@ (801aa94 <free+0xc>)
 801aa8a:	4601      	mov	r1, r0
 801aa8c:	6818      	ldr	r0, [r3, #0]
 801aa8e:	f000 bd6f 	b.w	801b570 <_free_r>
 801aa92:	bf00      	nop
 801aa94:	20000438 	.word	0x20000438

0801aa98 <sbrk_aligned>:
 801aa98:	b570      	push	{r4, r5, r6, lr}
 801aa9a:	4e0f      	ldr	r6, [pc, #60]	@ (801aad8 <sbrk_aligned+0x40>)
 801aa9c:	460c      	mov	r4, r1
 801aa9e:	6831      	ldr	r1, [r6, #0]
 801aaa0:	4605      	mov	r5, r0
 801aaa2:	b911      	cbnz	r1, 801aaaa <sbrk_aligned+0x12>
 801aaa4:	f000 fcd4 	bl	801b450 <_sbrk_r>
 801aaa8:	6030      	str	r0, [r6, #0]
 801aaaa:	4621      	mov	r1, r4
 801aaac:	4628      	mov	r0, r5
 801aaae:	f000 fccf 	bl	801b450 <_sbrk_r>
 801aab2:	1c43      	adds	r3, r0, #1
 801aab4:	d103      	bne.n	801aabe <sbrk_aligned+0x26>
 801aab6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 801aaba:	4620      	mov	r0, r4
 801aabc:	bd70      	pop	{r4, r5, r6, pc}
 801aabe:	1cc4      	adds	r4, r0, #3
 801aac0:	f024 0403 	bic.w	r4, r4, #3
 801aac4:	42a0      	cmp	r0, r4
 801aac6:	d0f8      	beq.n	801aaba <sbrk_aligned+0x22>
 801aac8:	1a21      	subs	r1, r4, r0
 801aaca:	4628      	mov	r0, r5
 801aacc:	f000 fcc0 	bl	801b450 <_sbrk_r>
 801aad0:	3001      	adds	r0, #1
 801aad2:	d1f2      	bne.n	801aaba <sbrk_aligned+0x22>
 801aad4:	e7ef      	b.n	801aab6 <sbrk_aligned+0x1e>
 801aad6:	bf00      	nop
 801aad8:	2000b6b0 	.word	0x2000b6b0

0801aadc <_malloc_r>:
 801aadc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801aae0:	1ccd      	adds	r5, r1, #3
 801aae2:	f025 0503 	bic.w	r5, r5, #3
 801aae6:	3508      	adds	r5, #8
 801aae8:	2d0c      	cmp	r5, #12
 801aaea:	bf38      	it	cc
 801aaec:	250c      	movcc	r5, #12
 801aaee:	2d00      	cmp	r5, #0
 801aaf0:	4606      	mov	r6, r0
 801aaf2:	db01      	blt.n	801aaf8 <_malloc_r+0x1c>
 801aaf4:	42a9      	cmp	r1, r5
 801aaf6:	d904      	bls.n	801ab02 <_malloc_r+0x26>
 801aaf8:	230c      	movs	r3, #12
 801aafa:	6033      	str	r3, [r6, #0]
 801aafc:	2000      	movs	r0, #0
 801aafe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ab02:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801abd8 <_malloc_r+0xfc>
 801ab06:	f000 f869 	bl	801abdc <__malloc_lock>
 801ab0a:	f8d8 3000 	ldr.w	r3, [r8]
 801ab0e:	461c      	mov	r4, r3
 801ab10:	bb44      	cbnz	r4, 801ab64 <_malloc_r+0x88>
 801ab12:	4629      	mov	r1, r5
 801ab14:	4630      	mov	r0, r6
 801ab16:	f7ff ffbf 	bl	801aa98 <sbrk_aligned>
 801ab1a:	1c43      	adds	r3, r0, #1
 801ab1c:	4604      	mov	r4, r0
 801ab1e:	d158      	bne.n	801abd2 <_malloc_r+0xf6>
 801ab20:	f8d8 4000 	ldr.w	r4, [r8]
 801ab24:	4627      	mov	r7, r4
 801ab26:	2f00      	cmp	r7, #0
 801ab28:	d143      	bne.n	801abb2 <_malloc_r+0xd6>
 801ab2a:	2c00      	cmp	r4, #0
 801ab2c:	d04b      	beq.n	801abc6 <_malloc_r+0xea>
 801ab2e:	6823      	ldr	r3, [r4, #0]
 801ab30:	4639      	mov	r1, r7
 801ab32:	4630      	mov	r0, r6
 801ab34:	eb04 0903 	add.w	r9, r4, r3
 801ab38:	f000 fc8a 	bl	801b450 <_sbrk_r>
 801ab3c:	4581      	cmp	r9, r0
 801ab3e:	d142      	bne.n	801abc6 <_malloc_r+0xea>
 801ab40:	6821      	ldr	r1, [r4, #0]
 801ab42:	1a6d      	subs	r5, r5, r1
 801ab44:	4629      	mov	r1, r5
 801ab46:	4630      	mov	r0, r6
 801ab48:	f7ff ffa6 	bl	801aa98 <sbrk_aligned>
 801ab4c:	3001      	adds	r0, #1
 801ab4e:	d03a      	beq.n	801abc6 <_malloc_r+0xea>
 801ab50:	6823      	ldr	r3, [r4, #0]
 801ab52:	442b      	add	r3, r5
 801ab54:	6023      	str	r3, [r4, #0]
 801ab56:	f8d8 3000 	ldr.w	r3, [r8]
 801ab5a:	685a      	ldr	r2, [r3, #4]
 801ab5c:	bb62      	cbnz	r2, 801abb8 <_malloc_r+0xdc>
 801ab5e:	f8c8 7000 	str.w	r7, [r8]
 801ab62:	e00f      	b.n	801ab84 <_malloc_r+0xa8>
 801ab64:	6822      	ldr	r2, [r4, #0]
 801ab66:	1b52      	subs	r2, r2, r5
 801ab68:	d420      	bmi.n	801abac <_malloc_r+0xd0>
 801ab6a:	2a0b      	cmp	r2, #11
 801ab6c:	d917      	bls.n	801ab9e <_malloc_r+0xc2>
 801ab6e:	1961      	adds	r1, r4, r5
 801ab70:	42a3      	cmp	r3, r4
 801ab72:	6025      	str	r5, [r4, #0]
 801ab74:	bf18      	it	ne
 801ab76:	6059      	strne	r1, [r3, #4]
 801ab78:	6863      	ldr	r3, [r4, #4]
 801ab7a:	bf08      	it	eq
 801ab7c:	f8c8 1000 	streq.w	r1, [r8]
 801ab80:	5162      	str	r2, [r4, r5]
 801ab82:	604b      	str	r3, [r1, #4]
 801ab84:	4630      	mov	r0, r6
 801ab86:	f000 f82f 	bl	801abe8 <__malloc_unlock>
 801ab8a:	f104 000b 	add.w	r0, r4, #11
 801ab8e:	1d23      	adds	r3, r4, #4
 801ab90:	f020 0007 	bic.w	r0, r0, #7
 801ab94:	1ac2      	subs	r2, r0, r3
 801ab96:	bf1c      	itt	ne
 801ab98:	1a1b      	subne	r3, r3, r0
 801ab9a:	50a3      	strne	r3, [r4, r2]
 801ab9c:	e7af      	b.n	801aafe <_malloc_r+0x22>
 801ab9e:	6862      	ldr	r2, [r4, #4]
 801aba0:	42a3      	cmp	r3, r4
 801aba2:	bf0c      	ite	eq
 801aba4:	f8c8 2000 	streq.w	r2, [r8]
 801aba8:	605a      	strne	r2, [r3, #4]
 801abaa:	e7eb      	b.n	801ab84 <_malloc_r+0xa8>
 801abac:	4623      	mov	r3, r4
 801abae:	6864      	ldr	r4, [r4, #4]
 801abb0:	e7ae      	b.n	801ab10 <_malloc_r+0x34>
 801abb2:	463c      	mov	r4, r7
 801abb4:	687f      	ldr	r7, [r7, #4]
 801abb6:	e7b6      	b.n	801ab26 <_malloc_r+0x4a>
 801abb8:	461a      	mov	r2, r3
 801abba:	685b      	ldr	r3, [r3, #4]
 801abbc:	42a3      	cmp	r3, r4
 801abbe:	d1fb      	bne.n	801abb8 <_malloc_r+0xdc>
 801abc0:	2300      	movs	r3, #0
 801abc2:	6053      	str	r3, [r2, #4]
 801abc4:	e7de      	b.n	801ab84 <_malloc_r+0xa8>
 801abc6:	230c      	movs	r3, #12
 801abc8:	6033      	str	r3, [r6, #0]
 801abca:	4630      	mov	r0, r6
 801abcc:	f000 f80c 	bl	801abe8 <__malloc_unlock>
 801abd0:	e794      	b.n	801aafc <_malloc_r+0x20>
 801abd2:	6005      	str	r5, [r0, #0]
 801abd4:	e7d6      	b.n	801ab84 <_malloc_r+0xa8>
 801abd6:	bf00      	nop
 801abd8:	2000b6b4 	.word	0x2000b6b4

0801abdc <__malloc_lock>:
 801abdc:	4801      	ldr	r0, [pc, #4]	@ (801abe4 <__malloc_lock+0x8>)
 801abde:	f000 bc84 	b.w	801b4ea <__retarget_lock_acquire_recursive>
 801abe2:	bf00      	nop
 801abe4:	2000b7f9 	.word	0x2000b7f9

0801abe8 <__malloc_unlock>:
 801abe8:	4801      	ldr	r0, [pc, #4]	@ (801abf0 <__malloc_unlock+0x8>)
 801abea:	f000 bc7f 	b.w	801b4ec <__retarget_lock_release_recursive>
 801abee:	bf00      	nop
 801abf0:	2000b7f9 	.word	0x2000b7f9

0801abf4 <srand>:
 801abf4:	b538      	push	{r3, r4, r5, lr}
 801abf6:	4b10      	ldr	r3, [pc, #64]	@ (801ac38 <srand+0x44>)
 801abf8:	681d      	ldr	r5, [r3, #0]
 801abfa:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801abfc:	4604      	mov	r4, r0
 801abfe:	b9b3      	cbnz	r3, 801ac2e <srand+0x3a>
 801ac00:	2018      	movs	r0, #24
 801ac02:	f7ff ff39 	bl	801aa78 <malloc>
 801ac06:	4602      	mov	r2, r0
 801ac08:	6328      	str	r0, [r5, #48]	@ 0x30
 801ac0a:	b920      	cbnz	r0, 801ac16 <srand+0x22>
 801ac0c:	4b0b      	ldr	r3, [pc, #44]	@ (801ac3c <srand+0x48>)
 801ac0e:	480c      	ldr	r0, [pc, #48]	@ (801ac40 <srand+0x4c>)
 801ac10:	2146      	movs	r1, #70	@ 0x46
 801ac12:	f000 fc83 	bl	801b51c <__assert_func>
 801ac16:	490b      	ldr	r1, [pc, #44]	@ (801ac44 <srand+0x50>)
 801ac18:	4b0b      	ldr	r3, [pc, #44]	@ (801ac48 <srand+0x54>)
 801ac1a:	e9c0 1300 	strd	r1, r3, [r0]
 801ac1e:	4b0b      	ldr	r3, [pc, #44]	@ (801ac4c <srand+0x58>)
 801ac20:	6083      	str	r3, [r0, #8]
 801ac22:	230b      	movs	r3, #11
 801ac24:	8183      	strh	r3, [r0, #12]
 801ac26:	2100      	movs	r1, #0
 801ac28:	2001      	movs	r0, #1
 801ac2a:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801ac2e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801ac30:	2200      	movs	r2, #0
 801ac32:	611c      	str	r4, [r3, #16]
 801ac34:	615a      	str	r2, [r3, #20]
 801ac36:	bd38      	pop	{r3, r4, r5, pc}
 801ac38:	20000438 	.word	0x20000438
 801ac3c:	0801eaf4 	.word	0x0801eaf4
 801ac40:	0801eb0b 	.word	0x0801eb0b
 801ac44:	abcd330e 	.word	0xabcd330e
 801ac48:	e66d1234 	.word	0xe66d1234
 801ac4c:	0005deec 	.word	0x0005deec

0801ac50 <rand>:
 801ac50:	4b16      	ldr	r3, [pc, #88]	@ (801acac <rand+0x5c>)
 801ac52:	b510      	push	{r4, lr}
 801ac54:	681c      	ldr	r4, [r3, #0]
 801ac56:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801ac58:	b9b3      	cbnz	r3, 801ac88 <rand+0x38>
 801ac5a:	2018      	movs	r0, #24
 801ac5c:	f7ff ff0c 	bl	801aa78 <malloc>
 801ac60:	4602      	mov	r2, r0
 801ac62:	6320      	str	r0, [r4, #48]	@ 0x30
 801ac64:	b920      	cbnz	r0, 801ac70 <rand+0x20>
 801ac66:	4b12      	ldr	r3, [pc, #72]	@ (801acb0 <rand+0x60>)
 801ac68:	4812      	ldr	r0, [pc, #72]	@ (801acb4 <rand+0x64>)
 801ac6a:	2152      	movs	r1, #82	@ 0x52
 801ac6c:	f000 fc56 	bl	801b51c <__assert_func>
 801ac70:	4911      	ldr	r1, [pc, #68]	@ (801acb8 <rand+0x68>)
 801ac72:	4b12      	ldr	r3, [pc, #72]	@ (801acbc <rand+0x6c>)
 801ac74:	e9c0 1300 	strd	r1, r3, [r0]
 801ac78:	4b11      	ldr	r3, [pc, #68]	@ (801acc0 <rand+0x70>)
 801ac7a:	6083      	str	r3, [r0, #8]
 801ac7c:	230b      	movs	r3, #11
 801ac7e:	8183      	strh	r3, [r0, #12]
 801ac80:	2100      	movs	r1, #0
 801ac82:	2001      	movs	r0, #1
 801ac84:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801ac88:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801ac8a:	480e      	ldr	r0, [pc, #56]	@ (801acc4 <rand+0x74>)
 801ac8c:	690b      	ldr	r3, [r1, #16]
 801ac8e:	694c      	ldr	r4, [r1, #20]
 801ac90:	4a0d      	ldr	r2, [pc, #52]	@ (801acc8 <rand+0x78>)
 801ac92:	4358      	muls	r0, r3
 801ac94:	fb02 0004 	mla	r0, r2, r4, r0
 801ac98:	fba3 3202 	umull	r3, r2, r3, r2
 801ac9c:	3301      	adds	r3, #1
 801ac9e:	eb40 0002 	adc.w	r0, r0, r2
 801aca2:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801aca6:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 801acaa:	bd10      	pop	{r4, pc}
 801acac:	20000438 	.word	0x20000438
 801acb0:	0801eaf4 	.word	0x0801eaf4
 801acb4:	0801eb0b 	.word	0x0801eb0b
 801acb8:	abcd330e 	.word	0xabcd330e
 801acbc:	e66d1234 	.word	0xe66d1234
 801acc0:	0005deec 	.word	0x0005deec
 801acc4:	5851f42d 	.word	0x5851f42d
 801acc8:	4c957f2d 	.word	0x4c957f2d

0801accc <realloc>:
 801accc:	4b02      	ldr	r3, [pc, #8]	@ (801acd8 <realloc+0xc>)
 801acce:	460a      	mov	r2, r1
 801acd0:	4601      	mov	r1, r0
 801acd2:	6818      	ldr	r0, [r3, #0]
 801acd4:	f000 b802 	b.w	801acdc <_realloc_r>
 801acd8:	20000438 	.word	0x20000438

0801acdc <_realloc_r>:
 801acdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ace0:	4607      	mov	r7, r0
 801ace2:	4614      	mov	r4, r2
 801ace4:	460d      	mov	r5, r1
 801ace6:	b921      	cbnz	r1, 801acf2 <_realloc_r+0x16>
 801ace8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801acec:	4611      	mov	r1, r2
 801acee:	f7ff bef5 	b.w	801aadc <_malloc_r>
 801acf2:	b92a      	cbnz	r2, 801ad00 <_realloc_r+0x24>
 801acf4:	f000 fc3c 	bl	801b570 <_free_r>
 801acf8:	4625      	mov	r5, r4
 801acfa:	4628      	mov	r0, r5
 801acfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ad00:	f000 fc80 	bl	801b604 <_malloc_usable_size_r>
 801ad04:	4284      	cmp	r4, r0
 801ad06:	4606      	mov	r6, r0
 801ad08:	d802      	bhi.n	801ad10 <_realloc_r+0x34>
 801ad0a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801ad0e:	d8f4      	bhi.n	801acfa <_realloc_r+0x1e>
 801ad10:	4621      	mov	r1, r4
 801ad12:	4638      	mov	r0, r7
 801ad14:	f7ff fee2 	bl	801aadc <_malloc_r>
 801ad18:	4680      	mov	r8, r0
 801ad1a:	b908      	cbnz	r0, 801ad20 <_realloc_r+0x44>
 801ad1c:	4645      	mov	r5, r8
 801ad1e:	e7ec      	b.n	801acfa <_realloc_r+0x1e>
 801ad20:	42b4      	cmp	r4, r6
 801ad22:	4622      	mov	r2, r4
 801ad24:	4629      	mov	r1, r5
 801ad26:	bf28      	it	cs
 801ad28:	4632      	movcs	r2, r6
 801ad2a:	f000 fbe8 	bl	801b4fe <memcpy>
 801ad2e:	4629      	mov	r1, r5
 801ad30:	4638      	mov	r0, r7
 801ad32:	f000 fc1d 	bl	801b570 <_free_r>
 801ad36:	e7f1      	b.n	801ad1c <_realloc_r+0x40>

0801ad38 <_strtoul_l.isra.0>:
 801ad38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801ad3c:	4e34      	ldr	r6, [pc, #208]	@ (801ae10 <_strtoul_l.isra.0+0xd8>)
 801ad3e:	4686      	mov	lr, r0
 801ad40:	460d      	mov	r5, r1
 801ad42:	4628      	mov	r0, r5
 801ad44:	f815 4b01 	ldrb.w	r4, [r5], #1
 801ad48:	5d37      	ldrb	r7, [r6, r4]
 801ad4a:	f017 0708 	ands.w	r7, r7, #8
 801ad4e:	d1f8      	bne.n	801ad42 <_strtoul_l.isra.0+0xa>
 801ad50:	2c2d      	cmp	r4, #45	@ 0x2d
 801ad52:	d110      	bne.n	801ad76 <_strtoul_l.isra.0+0x3e>
 801ad54:	782c      	ldrb	r4, [r5, #0]
 801ad56:	2701      	movs	r7, #1
 801ad58:	1c85      	adds	r5, r0, #2
 801ad5a:	f033 0010 	bics.w	r0, r3, #16
 801ad5e:	d115      	bne.n	801ad8c <_strtoul_l.isra.0+0x54>
 801ad60:	2c30      	cmp	r4, #48	@ 0x30
 801ad62:	d10d      	bne.n	801ad80 <_strtoul_l.isra.0+0x48>
 801ad64:	7828      	ldrb	r0, [r5, #0]
 801ad66:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 801ad6a:	2858      	cmp	r0, #88	@ 0x58
 801ad6c:	d108      	bne.n	801ad80 <_strtoul_l.isra.0+0x48>
 801ad6e:	786c      	ldrb	r4, [r5, #1]
 801ad70:	3502      	adds	r5, #2
 801ad72:	2310      	movs	r3, #16
 801ad74:	e00a      	b.n	801ad8c <_strtoul_l.isra.0+0x54>
 801ad76:	2c2b      	cmp	r4, #43	@ 0x2b
 801ad78:	bf04      	itt	eq
 801ad7a:	782c      	ldrbeq	r4, [r5, #0]
 801ad7c:	1c85      	addeq	r5, r0, #2
 801ad7e:	e7ec      	b.n	801ad5a <_strtoul_l.isra.0+0x22>
 801ad80:	2b00      	cmp	r3, #0
 801ad82:	d1f6      	bne.n	801ad72 <_strtoul_l.isra.0+0x3a>
 801ad84:	2c30      	cmp	r4, #48	@ 0x30
 801ad86:	bf14      	ite	ne
 801ad88:	230a      	movne	r3, #10
 801ad8a:	2308      	moveq	r3, #8
 801ad8c:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 801ad90:	2600      	movs	r6, #0
 801ad92:	fbb8 f8f3 	udiv	r8, r8, r3
 801ad96:	fb03 f908 	mul.w	r9, r3, r8
 801ad9a:	ea6f 0909 	mvn.w	r9, r9
 801ad9e:	4630      	mov	r0, r6
 801ada0:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 801ada4:	f1bc 0f09 	cmp.w	ip, #9
 801ada8:	d810      	bhi.n	801adcc <_strtoul_l.isra.0+0x94>
 801adaa:	4664      	mov	r4, ip
 801adac:	42a3      	cmp	r3, r4
 801adae:	dd1e      	ble.n	801adee <_strtoul_l.isra.0+0xb6>
 801adb0:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 801adb4:	d007      	beq.n	801adc6 <_strtoul_l.isra.0+0x8e>
 801adb6:	4580      	cmp	r8, r0
 801adb8:	d316      	bcc.n	801ade8 <_strtoul_l.isra.0+0xb0>
 801adba:	d101      	bne.n	801adc0 <_strtoul_l.isra.0+0x88>
 801adbc:	45a1      	cmp	r9, r4
 801adbe:	db13      	blt.n	801ade8 <_strtoul_l.isra.0+0xb0>
 801adc0:	fb00 4003 	mla	r0, r0, r3, r4
 801adc4:	2601      	movs	r6, #1
 801adc6:	f815 4b01 	ldrb.w	r4, [r5], #1
 801adca:	e7e9      	b.n	801ada0 <_strtoul_l.isra.0+0x68>
 801adcc:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 801add0:	f1bc 0f19 	cmp.w	ip, #25
 801add4:	d801      	bhi.n	801adda <_strtoul_l.isra.0+0xa2>
 801add6:	3c37      	subs	r4, #55	@ 0x37
 801add8:	e7e8      	b.n	801adac <_strtoul_l.isra.0+0x74>
 801adda:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 801adde:	f1bc 0f19 	cmp.w	ip, #25
 801ade2:	d804      	bhi.n	801adee <_strtoul_l.isra.0+0xb6>
 801ade4:	3c57      	subs	r4, #87	@ 0x57
 801ade6:	e7e1      	b.n	801adac <_strtoul_l.isra.0+0x74>
 801ade8:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 801adec:	e7eb      	b.n	801adc6 <_strtoul_l.isra.0+0x8e>
 801adee:	1c73      	adds	r3, r6, #1
 801adf0:	d106      	bne.n	801ae00 <_strtoul_l.isra.0+0xc8>
 801adf2:	2322      	movs	r3, #34	@ 0x22
 801adf4:	f8ce 3000 	str.w	r3, [lr]
 801adf8:	4630      	mov	r0, r6
 801adfa:	b932      	cbnz	r2, 801ae0a <_strtoul_l.isra.0+0xd2>
 801adfc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801ae00:	b107      	cbz	r7, 801ae04 <_strtoul_l.isra.0+0xcc>
 801ae02:	4240      	negs	r0, r0
 801ae04:	2a00      	cmp	r2, #0
 801ae06:	d0f9      	beq.n	801adfc <_strtoul_l.isra.0+0xc4>
 801ae08:	b106      	cbz	r6, 801ae0c <_strtoul_l.isra.0+0xd4>
 801ae0a:	1e69      	subs	r1, r5, #1
 801ae0c:	6011      	str	r1, [r2, #0]
 801ae0e:	e7f5      	b.n	801adfc <_strtoul_l.isra.0+0xc4>
 801ae10:	0801ebd3 	.word	0x0801ebd3

0801ae14 <strtoul>:
 801ae14:	4613      	mov	r3, r2
 801ae16:	460a      	mov	r2, r1
 801ae18:	4601      	mov	r1, r0
 801ae1a:	4802      	ldr	r0, [pc, #8]	@ (801ae24 <strtoul+0x10>)
 801ae1c:	6800      	ldr	r0, [r0, #0]
 801ae1e:	f7ff bf8b 	b.w	801ad38 <_strtoul_l.isra.0>
 801ae22:	bf00      	nop
 801ae24:	20000438 	.word	0x20000438

0801ae28 <std>:
 801ae28:	2300      	movs	r3, #0
 801ae2a:	b510      	push	{r4, lr}
 801ae2c:	4604      	mov	r4, r0
 801ae2e:	e9c0 3300 	strd	r3, r3, [r0]
 801ae32:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801ae36:	6083      	str	r3, [r0, #8]
 801ae38:	8181      	strh	r1, [r0, #12]
 801ae3a:	6643      	str	r3, [r0, #100]	@ 0x64
 801ae3c:	81c2      	strh	r2, [r0, #14]
 801ae3e:	6183      	str	r3, [r0, #24]
 801ae40:	4619      	mov	r1, r3
 801ae42:	2208      	movs	r2, #8
 801ae44:	305c      	adds	r0, #92	@ 0x5c
 801ae46:	f000 fa91 	bl	801b36c <memset>
 801ae4a:	4b0d      	ldr	r3, [pc, #52]	@ (801ae80 <std+0x58>)
 801ae4c:	6263      	str	r3, [r4, #36]	@ 0x24
 801ae4e:	4b0d      	ldr	r3, [pc, #52]	@ (801ae84 <std+0x5c>)
 801ae50:	62a3      	str	r3, [r4, #40]	@ 0x28
 801ae52:	4b0d      	ldr	r3, [pc, #52]	@ (801ae88 <std+0x60>)
 801ae54:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801ae56:	4b0d      	ldr	r3, [pc, #52]	@ (801ae8c <std+0x64>)
 801ae58:	6323      	str	r3, [r4, #48]	@ 0x30
 801ae5a:	4b0d      	ldr	r3, [pc, #52]	@ (801ae90 <std+0x68>)
 801ae5c:	6224      	str	r4, [r4, #32]
 801ae5e:	429c      	cmp	r4, r3
 801ae60:	d006      	beq.n	801ae70 <std+0x48>
 801ae62:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801ae66:	4294      	cmp	r4, r2
 801ae68:	d002      	beq.n	801ae70 <std+0x48>
 801ae6a:	33d0      	adds	r3, #208	@ 0xd0
 801ae6c:	429c      	cmp	r4, r3
 801ae6e:	d105      	bne.n	801ae7c <std+0x54>
 801ae70:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801ae74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ae78:	f000 bb36 	b.w	801b4e8 <__retarget_lock_init_recursive>
 801ae7c:	bd10      	pop	{r4, pc}
 801ae7e:	bf00      	nop
 801ae80:	0801b0f1 	.word	0x0801b0f1
 801ae84:	0801b113 	.word	0x0801b113
 801ae88:	0801b14b 	.word	0x0801b14b
 801ae8c:	0801b16f 	.word	0x0801b16f
 801ae90:	2000b6b8 	.word	0x2000b6b8

0801ae94 <stdio_exit_handler>:
 801ae94:	4a02      	ldr	r2, [pc, #8]	@ (801aea0 <stdio_exit_handler+0xc>)
 801ae96:	4903      	ldr	r1, [pc, #12]	@ (801aea4 <stdio_exit_handler+0x10>)
 801ae98:	4803      	ldr	r0, [pc, #12]	@ (801aea8 <stdio_exit_handler+0x14>)
 801ae9a:	f000 b869 	b.w	801af70 <_fwalk_sglue>
 801ae9e:	bf00      	nop
 801aea0:	2000042c 	.word	0x2000042c
 801aea4:	0801bf69 	.word	0x0801bf69
 801aea8:	2000043c 	.word	0x2000043c

0801aeac <cleanup_stdio>:
 801aeac:	6841      	ldr	r1, [r0, #4]
 801aeae:	4b0c      	ldr	r3, [pc, #48]	@ (801aee0 <cleanup_stdio+0x34>)
 801aeb0:	4299      	cmp	r1, r3
 801aeb2:	b510      	push	{r4, lr}
 801aeb4:	4604      	mov	r4, r0
 801aeb6:	d001      	beq.n	801aebc <cleanup_stdio+0x10>
 801aeb8:	f001 f856 	bl	801bf68 <_fflush_r>
 801aebc:	68a1      	ldr	r1, [r4, #8]
 801aebe:	4b09      	ldr	r3, [pc, #36]	@ (801aee4 <cleanup_stdio+0x38>)
 801aec0:	4299      	cmp	r1, r3
 801aec2:	d002      	beq.n	801aeca <cleanup_stdio+0x1e>
 801aec4:	4620      	mov	r0, r4
 801aec6:	f001 f84f 	bl	801bf68 <_fflush_r>
 801aeca:	68e1      	ldr	r1, [r4, #12]
 801aecc:	4b06      	ldr	r3, [pc, #24]	@ (801aee8 <cleanup_stdio+0x3c>)
 801aece:	4299      	cmp	r1, r3
 801aed0:	d004      	beq.n	801aedc <cleanup_stdio+0x30>
 801aed2:	4620      	mov	r0, r4
 801aed4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801aed8:	f001 b846 	b.w	801bf68 <_fflush_r>
 801aedc:	bd10      	pop	{r4, pc}
 801aede:	bf00      	nop
 801aee0:	2000b6b8 	.word	0x2000b6b8
 801aee4:	2000b720 	.word	0x2000b720
 801aee8:	2000b788 	.word	0x2000b788

0801aeec <global_stdio_init.part.0>:
 801aeec:	b510      	push	{r4, lr}
 801aeee:	4b0b      	ldr	r3, [pc, #44]	@ (801af1c <global_stdio_init.part.0+0x30>)
 801aef0:	4c0b      	ldr	r4, [pc, #44]	@ (801af20 <global_stdio_init.part.0+0x34>)
 801aef2:	4a0c      	ldr	r2, [pc, #48]	@ (801af24 <global_stdio_init.part.0+0x38>)
 801aef4:	601a      	str	r2, [r3, #0]
 801aef6:	4620      	mov	r0, r4
 801aef8:	2200      	movs	r2, #0
 801aefa:	2104      	movs	r1, #4
 801aefc:	f7ff ff94 	bl	801ae28 <std>
 801af00:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801af04:	2201      	movs	r2, #1
 801af06:	2109      	movs	r1, #9
 801af08:	f7ff ff8e 	bl	801ae28 <std>
 801af0c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801af10:	2202      	movs	r2, #2
 801af12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801af16:	2112      	movs	r1, #18
 801af18:	f7ff bf86 	b.w	801ae28 <std>
 801af1c:	2000b7f0 	.word	0x2000b7f0
 801af20:	2000b6b8 	.word	0x2000b6b8
 801af24:	0801ae95 	.word	0x0801ae95

0801af28 <__sfp_lock_acquire>:
 801af28:	4801      	ldr	r0, [pc, #4]	@ (801af30 <__sfp_lock_acquire+0x8>)
 801af2a:	f000 bade 	b.w	801b4ea <__retarget_lock_acquire_recursive>
 801af2e:	bf00      	nop
 801af30:	2000b7fa 	.word	0x2000b7fa

0801af34 <__sfp_lock_release>:
 801af34:	4801      	ldr	r0, [pc, #4]	@ (801af3c <__sfp_lock_release+0x8>)
 801af36:	f000 bad9 	b.w	801b4ec <__retarget_lock_release_recursive>
 801af3a:	bf00      	nop
 801af3c:	2000b7fa 	.word	0x2000b7fa

0801af40 <__sinit>:
 801af40:	b510      	push	{r4, lr}
 801af42:	4604      	mov	r4, r0
 801af44:	f7ff fff0 	bl	801af28 <__sfp_lock_acquire>
 801af48:	6a23      	ldr	r3, [r4, #32]
 801af4a:	b11b      	cbz	r3, 801af54 <__sinit+0x14>
 801af4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801af50:	f7ff bff0 	b.w	801af34 <__sfp_lock_release>
 801af54:	4b04      	ldr	r3, [pc, #16]	@ (801af68 <__sinit+0x28>)
 801af56:	6223      	str	r3, [r4, #32]
 801af58:	4b04      	ldr	r3, [pc, #16]	@ (801af6c <__sinit+0x2c>)
 801af5a:	681b      	ldr	r3, [r3, #0]
 801af5c:	2b00      	cmp	r3, #0
 801af5e:	d1f5      	bne.n	801af4c <__sinit+0xc>
 801af60:	f7ff ffc4 	bl	801aeec <global_stdio_init.part.0>
 801af64:	e7f2      	b.n	801af4c <__sinit+0xc>
 801af66:	bf00      	nop
 801af68:	0801aead 	.word	0x0801aead
 801af6c:	2000b7f0 	.word	0x2000b7f0

0801af70 <_fwalk_sglue>:
 801af70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801af74:	4607      	mov	r7, r0
 801af76:	4688      	mov	r8, r1
 801af78:	4614      	mov	r4, r2
 801af7a:	2600      	movs	r6, #0
 801af7c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801af80:	f1b9 0901 	subs.w	r9, r9, #1
 801af84:	d505      	bpl.n	801af92 <_fwalk_sglue+0x22>
 801af86:	6824      	ldr	r4, [r4, #0]
 801af88:	2c00      	cmp	r4, #0
 801af8a:	d1f7      	bne.n	801af7c <_fwalk_sglue+0xc>
 801af8c:	4630      	mov	r0, r6
 801af8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801af92:	89ab      	ldrh	r3, [r5, #12]
 801af94:	2b01      	cmp	r3, #1
 801af96:	d907      	bls.n	801afa8 <_fwalk_sglue+0x38>
 801af98:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801af9c:	3301      	adds	r3, #1
 801af9e:	d003      	beq.n	801afa8 <_fwalk_sglue+0x38>
 801afa0:	4629      	mov	r1, r5
 801afa2:	4638      	mov	r0, r7
 801afa4:	47c0      	blx	r8
 801afa6:	4306      	orrs	r6, r0
 801afa8:	3568      	adds	r5, #104	@ 0x68
 801afaa:	e7e9      	b.n	801af80 <_fwalk_sglue+0x10>

0801afac <_fwrite_r>:
 801afac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801afb0:	9c08      	ldr	r4, [sp, #32]
 801afb2:	468a      	mov	sl, r1
 801afb4:	4690      	mov	r8, r2
 801afb6:	fb02 f903 	mul.w	r9, r2, r3
 801afba:	4606      	mov	r6, r0
 801afbc:	b118      	cbz	r0, 801afc6 <_fwrite_r+0x1a>
 801afbe:	6a03      	ldr	r3, [r0, #32]
 801afc0:	b90b      	cbnz	r3, 801afc6 <_fwrite_r+0x1a>
 801afc2:	f7ff ffbd 	bl	801af40 <__sinit>
 801afc6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801afc8:	07dd      	lsls	r5, r3, #31
 801afca:	d405      	bmi.n	801afd8 <_fwrite_r+0x2c>
 801afcc:	89a3      	ldrh	r3, [r4, #12]
 801afce:	0598      	lsls	r0, r3, #22
 801afd0:	d402      	bmi.n	801afd8 <_fwrite_r+0x2c>
 801afd2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801afd4:	f000 fa89 	bl	801b4ea <__retarget_lock_acquire_recursive>
 801afd8:	89a3      	ldrh	r3, [r4, #12]
 801afda:	0719      	lsls	r1, r3, #28
 801afdc:	d516      	bpl.n	801b00c <_fwrite_r+0x60>
 801afde:	6923      	ldr	r3, [r4, #16]
 801afe0:	b1a3      	cbz	r3, 801b00c <_fwrite_r+0x60>
 801afe2:	2500      	movs	r5, #0
 801afe4:	454d      	cmp	r5, r9
 801afe6:	d01f      	beq.n	801b028 <_fwrite_r+0x7c>
 801afe8:	68a7      	ldr	r7, [r4, #8]
 801afea:	f81a 1005 	ldrb.w	r1, [sl, r5]
 801afee:	3f01      	subs	r7, #1
 801aff0:	2f00      	cmp	r7, #0
 801aff2:	60a7      	str	r7, [r4, #8]
 801aff4:	da04      	bge.n	801b000 <_fwrite_r+0x54>
 801aff6:	69a3      	ldr	r3, [r4, #24]
 801aff8:	429f      	cmp	r7, r3
 801affa:	db0f      	blt.n	801b01c <_fwrite_r+0x70>
 801affc:	290a      	cmp	r1, #10
 801affe:	d00d      	beq.n	801b01c <_fwrite_r+0x70>
 801b000:	6823      	ldr	r3, [r4, #0]
 801b002:	1c5a      	adds	r2, r3, #1
 801b004:	6022      	str	r2, [r4, #0]
 801b006:	7019      	strb	r1, [r3, #0]
 801b008:	3501      	adds	r5, #1
 801b00a:	e7eb      	b.n	801afe4 <_fwrite_r+0x38>
 801b00c:	4621      	mov	r1, r4
 801b00e:	4630      	mov	r0, r6
 801b010:	f000 f92c 	bl	801b26c <__swsetup_r>
 801b014:	2800      	cmp	r0, #0
 801b016:	d0e4      	beq.n	801afe2 <_fwrite_r+0x36>
 801b018:	2500      	movs	r5, #0
 801b01a:	e005      	b.n	801b028 <_fwrite_r+0x7c>
 801b01c:	4622      	mov	r2, r4
 801b01e:	4630      	mov	r0, r6
 801b020:	f000 f8e6 	bl	801b1f0 <__swbuf_r>
 801b024:	3001      	adds	r0, #1
 801b026:	d1ef      	bne.n	801b008 <_fwrite_r+0x5c>
 801b028:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801b02a:	07da      	lsls	r2, r3, #31
 801b02c:	d405      	bmi.n	801b03a <_fwrite_r+0x8e>
 801b02e:	89a3      	ldrh	r3, [r4, #12]
 801b030:	059b      	lsls	r3, r3, #22
 801b032:	d402      	bmi.n	801b03a <_fwrite_r+0x8e>
 801b034:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801b036:	f000 fa59 	bl	801b4ec <__retarget_lock_release_recursive>
 801b03a:	fbb5 f0f8 	udiv	r0, r5, r8
 801b03e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

0801b044 <fwrite>:
 801b044:	b507      	push	{r0, r1, r2, lr}
 801b046:	9300      	str	r3, [sp, #0]
 801b048:	4613      	mov	r3, r2
 801b04a:	460a      	mov	r2, r1
 801b04c:	4601      	mov	r1, r0
 801b04e:	4803      	ldr	r0, [pc, #12]	@ (801b05c <fwrite+0x18>)
 801b050:	6800      	ldr	r0, [r0, #0]
 801b052:	f7ff ffab 	bl	801afac <_fwrite_r>
 801b056:	b003      	add	sp, #12
 801b058:	f85d fb04 	ldr.w	pc, [sp], #4
 801b05c:	20000438 	.word	0x20000438

0801b060 <iprintf>:
 801b060:	b40f      	push	{r0, r1, r2, r3}
 801b062:	b507      	push	{r0, r1, r2, lr}
 801b064:	4906      	ldr	r1, [pc, #24]	@ (801b080 <iprintf+0x20>)
 801b066:	ab04      	add	r3, sp, #16
 801b068:	6808      	ldr	r0, [r1, #0]
 801b06a:	f853 2b04 	ldr.w	r2, [r3], #4
 801b06e:	6881      	ldr	r1, [r0, #8]
 801b070:	9301      	str	r3, [sp, #4]
 801b072:	f000 fc51 	bl	801b918 <_vfiprintf_r>
 801b076:	b003      	add	sp, #12
 801b078:	f85d eb04 	ldr.w	lr, [sp], #4
 801b07c:	b004      	add	sp, #16
 801b07e:	4770      	bx	lr
 801b080:	20000438 	.word	0x20000438

0801b084 <sniprintf>:
 801b084:	b40c      	push	{r2, r3}
 801b086:	b530      	push	{r4, r5, lr}
 801b088:	4b18      	ldr	r3, [pc, #96]	@ (801b0ec <sniprintf+0x68>)
 801b08a:	1e0c      	subs	r4, r1, #0
 801b08c:	681d      	ldr	r5, [r3, #0]
 801b08e:	b09d      	sub	sp, #116	@ 0x74
 801b090:	da08      	bge.n	801b0a4 <sniprintf+0x20>
 801b092:	238b      	movs	r3, #139	@ 0x8b
 801b094:	602b      	str	r3, [r5, #0]
 801b096:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801b09a:	b01d      	add	sp, #116	@ 0x74
 801b09c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801b0a0:	b002      	add	sp, #8
 801b0a2:	4770      	bx	lr
 801b0a4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801b0a8:	f8ad 3014 	strh.w	r3, [sp, #20]
 801b0ac:	f04f 0300 	mov.w	r3, #0
 801b0b0:	931b      	str	r3, [sp, #108]	@ 0x6c
 801b0b2:	bf14      	ite	ne
 801b0b4:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 801b0b8:	4623      	moveq	r3, r4
 801b0ba:	9304      	str	r3, [sp, #16]
 801b0bc:	9307      	str	r3, [sp, #28]
 801b0be:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801b0c2:	9002      	str	r0, [sp, #8]
 801b0c4:	9006      	str	r0, [sp, #24]
 801b0c6:	f8ad 3016 	strh.w	r3, [sp, #22]
 801b0ca:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801b0cc:	ab21      	add	r3, sp, #132	@ 0x84
 801b0ce:	a902      	add	r1, sp, #8
 801b0d0:	4628      	mov	r0, r5
 801b0d2:	9301      	str	r3, [sp, #4]
 801b0d4:	f000 fafa 	bl	801b6cc <_svfiprintf_r>
 801b0d8:	1c43      	adds	r3, r0, #1
 801b0da:	bfbc      	itt	lt
 801b0dc:	238b      	movlt	r3, #139	@ 0x8b
 801b0de:	602b      	strlt	r3, [r5, #0]
 801b0e0:	2c00      	cmp	r4, #0
 801b0e2:	d0da      	beq.n	801b09a <sniprintf+0x16>
 801b0e4:	9b02      	ldr	r3, [sp, #8]
 801b0e6:	2200      	movs	r2, #0
 801b0e8:	701a      	strb	r2, [r3, #0]
 801b0ea:	e7d6      	b.n	801b09a <sniprintf+0x16>
 801b0ec:	20000438 	.word	0x20000438

0801b0f0 <__sread>:
 801b0f0:	b510      	push	{r4, lr}
 801b0f2:	460c      	mov	r4, r1
 801b0f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b0f8:	f000 f998 	bl	801b42c <_read_r>
 801b0fc:	2800      	cmp	r0, #0
 801b0fe:	bfab      	itete	ge
 801b100:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801b102:	89a3      	ldrhlt	r3, [r4, #12]
 801b104:	181b      	addge	r3, r3, r0
 801b106:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801b10a:	bfac      	ite	ge
 801b10c:	6563      	strge	r3, [r4, #84]	@ 0x54
 801b10e:	81a3      	strhlt	r3, [r4, #12]
 801b110:	bd10      	pop	{r4, pc}

0801b112 <__swrite>:
 801b112:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b116:	461f      	mov	r7, r3
 801b118:	898b      	ldrh	r3, [r1, #12]
 801b11a:	05db      	lsls	r3, r3, #23
 801b11c:	4605      	mov	r5, r0
 801b11e:	460c      	mov	r4, r1
 801b120:	4616      	mov	r6, r2
 801b122:	d505      	bpl.n	801b130 <__swrite+0x1e>
 801b124:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b128:	2302      	movs	r3, #2
 801b12a:	2200      	movs	r2, #0
 801b12c:	f000 f96c 	bl	801b408 <_lseek_r>
 801b130:	89a3      	ldrh	r3, [r4, #12]
 801b132:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801b136:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801b13a:	81a3      	strh	r3, [r4, #12]
 801b13c:	4632      	mov	r2, r6
 801b13e:	463b      	mov	r3, r7
 801b140:	4628      	mov	r0, r5
 801b142:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b146:	f000 b993 	b.w	801b470 <_write_r>

0801b14a <__sseek>:
 801b14a:	b510      	push	{r4, lr}
 801b14c:	460c      	mov	r4, r1
 801b14e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b152:	f000 f959 	bl	801b408 <_lseek_r>
 801b156:	1c43      	adds	r3, r0, #1
 801b158:	89a3      	ldrh	r3, [r4, #12]
 801b15a:	bf15      	itete	ne
 801b15c:	6560      	strne	r0, [r4, #84]	@ 0x54
 801b15e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801b162:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801b166:	81a3      	strheq	r3, [r4, #12]
 801b168:	bf18      	it	ne
 801b16a:	81a3      	strhne	r3, [r4, #12]
 801b16c:	bd10      	pop	{r4, pc}

0801b16e <__sclose>:
 801b16e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b172:	f000 b939 	b.w	801b3e8 <_close_r>

0801b176 <_vsniprintf_r>:
 801b176:	b530      	push	{r4, r5, lr}
 801b178:	4614      	mov	r4, r2
 801b17a:	2c00      	cmp	r4, #0
 801b17c:	b09b      	sub	sp, #108	@ 0x6c
 801b17e:	4605      	mov	r5, r0
 801b180:	461a      	mov	r2, r3
 801b182:	da05      	bge.n	801b190 <_vsniprintf_r+0x1a>
 801b184:	238b      	movs	r3, #139	@ 0x8b
 801b186:	6003      	str	r3, [r0, #0]
 801b188:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801b18c:	b01b      	add	sp, #108	@ 0x6c
 801b18e:	bd30      	pop	{r4, r5, pc}
 801b190:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801b194:	f8ad 300c 	strh.w	r3, [sp, #12]
 801b198:	f04f 0300 	mov.w	r3, #0
 801b19c:	9319      	str	r3, [sp, #100]	@ 0x64
 801b19e:	bf14      	ite	ne
 801b1a0:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 801b1a4:	4623      	moveq	r3, r4
 801b1a6:	9302      	str	r3, [sp, #8]
 801b1a8:	9305      	str	r3, [sp, #20]
 801b1aa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801b1ae:	9100      	str	r1, [sp, #0]
 801b1b0:	9104      	str	r1, [sp, #16]
 801b1b2:	f8ad 300e 	strh.w	r3, [sp, #14]
 801b1b6:	4669      	mov	r1, sp
 801b1b8:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801b1ba:	f000 fa87 	bl	801b6cc <_svfiprintf_r>
 801b1be:	1c43      	adds	r3, r0, #1
 801b1c0:	bfbc      	itt	lt
 801b1c2:	238b      	movlt	r3, #139	@ 0x8b
 801b1c4:	602b      	strlt	r3, [r5, #0]
 801b1c6:	2c00      	cmp	r4, #0
 801b1c8:	d0e0      	beq.n	801b18c <_vsniprintf_r+0x16>
 801b1ca:	9b00      	ldr	r3, [sp, #0]
 801b1cc:	2200      	movs	r2, #0
 801b1ce:	701a      	strb	r2, [r3, #0]
 801b1d0:	e7dc      	b.n	801b18c <_vsniprintf_r+0x16>
	...

0801b1d4 <vsniprintf>:
 801b1d4:	b507      	push	{r0, r1, r2, lr}
 801b1d6:	9300      	str	r3, [sp, #0]
 801b1d8:	4613      	mov	r3, r2
 801b1da:	460a      	mov	r2, r1
 801b1dc:	4601      	mov	r1, r0
 801b1de:	4803      	ldr	r0, [pc, #12]	@ (801b1ec <vsniprintf+0x18>)
 801b1e0:	6800      	ldr	r0, [r0, #0]
 801b1e2:	f7ff ffc8 	bl	801b176 <_vsniprintf_r>
 801b1e6:	b003      	add	sp, #12
 801b1e8:	f85d fb04 	ldr.w	pc, [sp], #4
 801b1ec:	20000438 	.word	0x20000438

0801b1f0 <__swbuf_r>:
 801b1f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b1f2:	460e      	mov	r6, r1
 801b1f4:	4614      	mov	r4, r2
 801b1f6:	4605      	mov	r5, r0
 801b1f8:	b118      	cbz	r0, 801b202 <__swbuf_r+0x12>
 801b1fa:	6a03      	ldr	r3, [r0, #32]
 801b1fc:	b90b      	cbnz	r3, 801b202 <__swbuf_r+0x12>
 801b1fe:	f7ff fe9f 	bl	801af40 <__sinit>
 801b202:	69a3      	ldr	r3, [r4, #24]
 801b204:	60a3      	str	r3, [r4, #8]
 801b206:	89a3      	ldrh	r3, [r4, #12]
 801b208:	071a      	lsls	r2, r3, #28
 801b20a:	d501      	bpl.n	801b210 <__swbuf_r+0x20>
 801b20c:	6923      	ldr	r3, [r4, #16]
 801b20e:	b943      	cbnz	r3, 801b222 <__swbuf_r+0x32>
 801b210:	4621      	mov	r1, r4
 801b212:	4628      	mov	r0, r5
 801b214:	f000 f82a 	bl	801b26c <__swsetup_r>
 801b218:	b118      	cbz	r0, 801b222 <__swbuf_r+0x32>
 801b21a:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 801b21e:	4638      	mov	r0, r7
 801b220:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b222:	6823      	ldr	r3, [r4, #0]
 801b224:	6922      	ldr	r2, [r4, #16]
 801b226:	1a98      	subs	r0, r3, r2
 801b228:	6963      	ldr	r3, [r4, #20]
 801b22a:	b2f6      	uxtb	r6, r6
 801b22c:	4283      	cmp	r3, r0
 801b22e:	4637      	mov	r7, r6
 801b230:	dc05      	bgt.n	801b23e <__swbuf_r+0x4e>
 801b232:	4621      	mov	r1, r4
 801b234:	4628      	mov	r0, r5
 801b236:	f000 fe97 	bl	801bf68 <_fflush_r>
 801b23a:	2800      	cmp	r0, #0
 801b23c:	d1ed      	bne.n	801b21a <__swbuf_r+0x2a>
 801b23e:	68a3      	ldr	r3, [r4, #8]
 801b240:	3b01      	subs	r3, #1
 801b242:	60a3      	str	r3, [r4, #8]
 801b244:	6823      	ldr	r3, [r4, #0]
 801b246:	1c5a      	adds	r2, r3, #1
 801b248:	6022      	str	r2, [r4, #0]
 801b24a:	701e      	strb	r6, [r3, #0]
 801b24c:	6962      	ldr	r2, [r4, #20]
 801b24e:	1c43      	adds	r3, r0, #1
 801b250:	429a      	cmp	r2, r3
 801b252:	d004      	beq.n	801b25e <__swbuf_r+0x6e>
 801b254:	89a3      	ldrh	r3, [r4, #12]
 801b256:	07db      	lsls	r3, r3, #31
 801b258:	d5e1      	bpl.n	801b21e <__swbuf_r+0x2e>
 801b25a:	2e0a      	cmp	r6, #10
 801b25c:	d1df      	bne.n	801b21e <__swbuf_r+0x2e>
 801b25e:	4621      	mov	r1, r4
 801b260:	4628      	mov	r0, r5
 801b262:	f000 fe81 	bl	801bf68 <_fflush_r>
 801b266:	2800      	cmp	r0, #0
 801b268:	d0d9      	beq.n	801b21e <__swbuf_r+0x2e>
 801b26a:	e7d6      	b.n	801b21a <__swbuf_r+0x2a>

0801b26c <__swsetup_r>:
 801b26c:	b538      	push	{r3, r4, r5, lr}
 801b26e:	4b29      	ldr	r3, [pc, #164]	@ (801b314 <__swsetup_r+0xa8>)
 801b270:	4605      	mov	r5, r0
 801b272:	6818      	ldr	r0, [r3, #0]
 801b274:	460c      	mov	r4, r1
 801b276:	b118      	cbz	r0, 801b280 <__swsetup_r+0x14>
 801b278:	6a03      	ldr	r3, [r0, #32]
 801b27a:	b90b      	cbnz	r3, 801b280 <__swsetup_r+0x14>
 801b27c:	f7ff fe60 	bl	801af40 <__sinit>
 801b280:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b284:	0719      	lsls	r1, r3, #28
 801b286:	d422      	bmi.n	801b2ce <__swsetup_r+0x62>
 801b288:	06da      	lsls	r2, r3, #27
 801b28a:	d407      	bmi.n	801b29c <__swsetup_r+0x30>
 801b28c:	2209      	movs	r2, #9
 801b28e:	602a      	str	r2, [r5, #0]
 801b290:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801b294:	81a3      	strh	r3, [r4, #12]
 801b296:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801b29a:	e033      	b.n	801b304 <__swsetup_r+0x98>
 801b29c:	0758      	lsls	r0, r3, #29
 801b29e:	d512      	bpl.n	801b2c6 <__swsetup_r+0x5a>
 801b2a0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801b2a2:	b141      	cbz	r1, 801b2b6 <__swsetup_r+0x4a>
 801b2a4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801b2a8:	4299      	cmp	r1, r3
 801b2aa:	d002      	beq.n	801b2b2 <__swsetup_r+0x46>
 801b2ac:	4628      	mov	r0, r5
 801b2ae:	f000 f95f 	bl	801b570 <_free_r>
 801b2b2:	2300      	movs	r3, #0
 801b2b4:	6363      	str	r3, [r4, #52]	@ 0x34
 801b2b6:	89a3      	ldrh	r3, [r4, #12]
 801b2b8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801b2bc:	81a3      	strh	r3, [r4, #12]
 801b2be:	2300      	movs	r3, #0
 801b2c0:	6063      	str	r3, [r4, #4]
 801b2c2:	6923      	ldr	r3, [r4, #16]
 801b2c4:	6023      	str	r3, [r4, #0]
 801b2c6:	89a3      	ldrh	r3, [r4, #12]
 801b2c8:	f043 0308 	orr.w	r3, r3, #8
 801b2cc:	81a3      	strh	r3, [r4, #12]
 801b2ce:	6923      	ldr	r3, [r4, #16]
 801b2d0:	b94b      	cbnz	r3, 801b2e6 <__swsetup_r+0x7a>
 801b2d2:	89a3      	ldrh	r3, [r4, #12]
 801b2d4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801b2d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801b2dc:	d003      	beq.n	801b2e6 <__swsetup_r+0x7a>
 801b2de:	4621      	mov	r1, r4
 801b2e0:	4628      	mov	r0, r5
 801b2e2:	f000 fea1 	bl	801c028 <__smakebuf_r>
 801b2e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b2ea:	f013 0201 	ands.w	r2, r3, #1
 801b2ee:	d00a      	beq.n	801b306 <__swsetup_r+0x9a>
 801b2f0:	2200      	movs	r2, #0
 801b2f2:	60a2      	str	r2, [r4, #8]
 801b2f4:	6962      	ldr	r2, [r4, #20]
 801b2f6:	4252      	negs	r2, r2
 801b2f8:	61a2      	str	r2, [r4, #24]
 801b2fa:	6922      	ldr	r2, [r4, #16]
 801b2fc:	b942      	cbnz	r2, 801b310 <__swsetup_r+0xa4>
 801b2fe:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801b302:	d1c5      	bne.n	801b290 <__swsetup_r+0x24>
 801b304:	bd38      	pop	{r3, r4, r5, pc}
 801b306:	0799      	lsls	r1, r3, #30
 801b308:	bf58      	it	pl
 801b30a:	6962      	ldrpl	r2, [r4, #20]
 801b30c:	60a2      	str	r2, [r4, #8]
 801b30e:	e7f4      	b.n	801b2fa <__swsetup_r+0x8e>
 801b310:	2000      	movs	r0, #0
 801b312:	e7f7      	b.n	801b304 <__swsetup_r+0x98>
 801b314:	20000438 	.word	0x20000438

0801b318 <memcmp>:
 801b318:	b510      	push	{r4, lr}
 801b31a:	3901      	subs	r1, #1
 801b31c:	4402      	add	r2, r0
 801b31e:	4290      	cmp	r0, r2
 801b320:	d101      	bne.n	801b326 <memcmp+0xe>
 801b322:	2000      	movs	r0, #0
 801b324:	e005      	b.n	801b332 <memcmp+0x1a>
 801b326:	7803      	ldrb	r3, [r0, #0]
 801b328:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801b32c:	42a3      	cmp	r3, r4
 801b32e:	d001      	beq.n	801b334 <memcmp+0x1c>
 801b330:	1b18      	subs	r0, r3, r4
 801b332:	bd10      	pop	{r4, pc}
 801b334:	3001      	adds	r0, #1
 801b336:	e7f2      	b.n	801b31e <memcmp+0x6>

0801b338 <memmove>:
 801b338:	4288      	cmp	r0, r1
 801b33a:	b510      	push	{r4, lr}
 801b33c:	eb01 0402 	add.w	r4, r1, r2
 801b340:	d902      	bls.n	801b348 <memmove+0x10>
 801b342:	4284      	cmp	r4, r0
 801b344:	4623      	mov	r3, r4
 801b346:	d807      	bhi.n	801b358 <memmove+0x20>
 801b348:	1e43      	subs	r3, r0, #1
 801b34a:	42a1      	cmp	r1, r4
 801b34c:	d008      	beq.n	801b360 <memmove+0x28>
 801b34e:	f811 2b01 	ldrb.w	r2, [r1], #1
 801b352:	f803 2f01 	strb.w	r2, [r3, #1]!
 801b356:	e7f8      	b.n	801b34a <memmove+0x12>
 801b358:	4402      	add	r2, r0
 801b35a:	4601      	mov	r1, r0
 801b35c:	428a      	cmp	r2, r1
 801b35e:	d100      	bne.n	801b362 <memmove+0x2a>
 801b360:	bd10      	pop	{r4, pc}
 801b362:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801b366:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801b36a:	e7f7      	b.n	801b35c <memmove+0x24>

0801b36c <memset>:
 801b36c:	4402      	add	r2, r0
 801b36e:	4603      	mov	r3, r0
 801b370:	4293      	cmp	r3, r2
 801b372:	d100      	bne.n	801b376 <memset+0xa>
 801b374:	4770      	bx	lr
 801b376:	f803 1b01 	strb.w	r1, [r3], #1
 801b37a:	e7f9      	b.n	801b370 <memset+0x4>

0801b37c <strchr>:
 801b37c:	b2c9      	uxtb	r1, r1
 801b37e:	4603      	mov	r3, r0
 801b380:	4618      	mov	r0, r3
 801b382:	f813 2b01 	ldrb.w	r2, [r3], #1
 801b386:	b112      	cbz	r2, 801b38e <strchr+0x12>
 801b388:	428a      	cmp	r2, r1
 801b38a:	d1f9      	bne.n	801b380 <strchr+0x4>
 801b38c:	4770      	bx	lr
 801b38e:	2900      	cmp	r1, #0
 801b390:	bf18      	it	ne
 801b392:	2000      	movne	r0, #0
 801b394:	4770      	bx	lr

0801b396 <strncmp>:
 801b396:	b510      	push	{r4, lr}
 801b398:	b16a      	cbz	r2, 801b3b6 <strncmp+0x20>
 801b39a:	3901      	subs	r1, #1
 801b39c:	1884      	adds	r4, r0, r2
 801b39e:	f810 2b01 	ldrb.w	r2, [r0], #1
 801b3a2:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801b3a6:	429a      	cmp	r2, r3
 801b3a8:	d103      	bne.n	801b3b2 <strncmp+0x1c>
 801b3aa:	42a0      	cmp	r0, r4
 801b3ac:	d001      	beq.n	801b3b2 <strncmp+0x1c>
 801b3ae:	2a00      	cmp	r2, #0
 801b3b0:	d1f5      	bne.n	801b39e <strncmp+0x8>
 801b3b2:	1ad0      	subs	r0, r2, r3
 801b3b4:	bd10      	pop	{r4, pc}
 801b3b6:	4610      	mov	r0, r2
 801b3b8:	e7fc      	b.n	801b3b4 <strncmp+0x1e>

0801b3ba <strstr>:
 801b3ba:	780a      	ldrb	r2, [r1, #0]
 801b3bc:	b570      	push	{r4, r5, r6, lr}
 801b3be:	b96a      	cbnz	r2, 801b3dc <strstr+0x22>
 801b3c0:	bd70      	pop	{r4, r5, r6, pc}
 801b3c2:	429a      	cmp	r2, r3
 801b3c4:	d109      	bne.n	801b3da <strstr+0x20>
 801b3c6:	460c      	mov	r4, r1
 801b3c8:	4605      	mov	r5, r0
 801b3ca:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 801b3ce:	2b00      	cmp	r3, #0
 801b3d0:	d0f6      	beq.n	801b3c0 <strstr+0x6>
 801b3d2:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 801b3d6:	429e      	cmp	r6, r3
 801b3d8:	d0f7      	beq.n	801b3ca <strstr+0x10>
 801b3da:	3001      	adds	r0, #1
 801b3dc:	7803      	ldrb	r3, [r0, #0]
 801b3de:	2b00      	cmp	r3, #0
 801b3e0:	d1ef      	bne.n	801b3c2 <strstr+0x8>
 801b3e2:	4618      	mov	r0, r3
 801b3e4:	e7ec      	b.n	801b3c0 <strstr+0x6>
	...

0801b3e8 <_close_r>:
 801b3e8:	b538      	push	{r3, r4, r5, lr}
 801b3ea:	4d06      	ldr	r5, [pc, #24]	@ (801b404 <_close_r+0x1c>)
 801b3ec:	2300      	movs	r3, #0
 801b3ee:	4604      	mov	r4, r0
 801b3f0:	4608      	mov	r0, r1
 801b3f2:	602b      	str	r3, [r5, #0]
 801b3f4:	f7e8 fc60 	bl	8003cb8 <_close>
 801b3f8:	1c43      	adds	r3, r0, #1
 801b3fa:	d102      	bne.n	801b402 <_close_r+0x1a>
 801b3fc:	682b      	ldr	r3, [r5, #0]
 801b3fe:	b103      	cbz	r3, 801b402 <_close_r+0x1a>
 801b400:	6023      	str	r3, [r4, #0]
 801b402:	bd38      	pop	{r3, r4, r5, pc}
 801b404:	2000b7f4 	.word	0x2000b7f4

0801b408 <_lseek_r>:
 801b408:	b538      	push	{r3, r4, r5, lr}
 801b40a:	4d07      	ldr	r5, [pc, #28]	@ (801b428 <_lseek_r+0x20>)
 801b40c:	4604      	mov	r4, r0
 801b40e:	4608      	mov	r0, r1
 801b410:	4611      	mov	r1, r2
 801b412:	2200      	movs	r2, #0
 801b414:	602a      	str	r2, [r5, #0]
 801b416:	461a      	mov	r2, r3
 801b418:	f7e8 fc75 	bl	8003d06 <_lseek>
 801b41c:	1c43      	adds	r3, r0, #1
 801b41e:	d102      	bne.n	801b426 <_lseek_r+0x1e>
 801b420:	682b      	ldr	r3, [r5, #0]
 801b422:	b103      	cbz	r3, 801b426 <_lseek_r+0x1e>
 801b424:	6023      	str	r3, [r4, #0]
 801b426:	bd38      	pop	{r3, r4, r5, pc}
 801b428:	2000b7f4 	.word	0x2000b7f4

0801b42c <_read_r>:
 801b42c:	b538      	push	{r3, r4, r5, lr}
 801b42e:	4d07      	ldr	r5, [pc, #28]	@ (801b44c <_read_r+0x20>)
 801b430:	4604      	mov	r4, r0
 801b432:	4608      	mov	r0, r1
 801b434:	4611      	mov	r1, r2
 801b436:	2200      	movs	r2, #0
 801b438:	602a      	str	r2, [r5, #0]
 801b43a:	461a      	mov	r2, r3
 801b43c:	f7e8 fc03 	bl	8003c46 <_read>
 801b440:	1c43      	adds	r3, r0, #1
 801b442:	d102      	bne.n	801b44a <_read_r+0x1e>
 801b444:	682b      	ldr	r3, [r5, #0]
 801b446:	b103      	cbz	r3, 801b44a <_read_r+0x1e>
 801b448:	6023      	str	r3, [r4, #0]
 801b44a:	bd38      	pop	{r3, r4, r5, pc}
 801b44c:	2000b7f4 	.word	0x2000b7f4

0801b450 <_sbrk_r>:
 801b450:	b538      	push	{r3, r4, r5, lr}
 801b452:	4d06      	ldr	r5, [pc, #24]	@ (801b46c <_sbrk_r+0x1c>)
 801b454:	2300      	movs	r3, #0
 801b456:	4604      	mov	r4, r0
 801b458:	4608      	mov	r0, r1
 801b45a:	602b      	str	r3, [r5, #0]
 801b45c:	f7e8 fc60 	bl	8003d20 <_sbrk>
 801b460:	1c43      	adds	r3, r0, #1
 801b462:	d102      	bne.n	801b46a <_sbrk_r+0x1a>
 801b464:	682b      	ldr	r3, [r5, #0]
 801b466:	b103      	cbz	r3, 801b46a <_sbrk_r+0x1a>
 801b468:	6023      	str	r3, [r4, #0]
 801b46a:	bd38      	pop	{r3, r4, r5, pc}
 801b46c:	2000b7f4 	.word	0x2000b7f4

0801b470 <_write_r>:
 801b470:	b538      	push	{r3, r4, r5, lr}
 801b472:	4d07      	ldr	r5, [pc, #28]	@ (801b490 <_write_r+0x20>)
 801b474:	4604      	mov	r4, r0
 801b476:	4608      	mov	r0, r1
 801b478:	4611      	mov	r1, r2
 801b47a:	2200      	movs	r2, #0
 801b47c:	602a      	str	r2, [r5, #0]
 801b47e:	461a      	mov	r2, r3
 801b480:	f7e8 fbfe 	bl	8003c80 <_write>
 801b484:	1c43      	adds	r3, r0, #1
 801b486:	d102      	bne.n	801b48e <_write_r+0x1e>
 801b488:	682b      	ldr	r3, [r5, #0]
 801b48a:	b103      	cbz	r3, 801b48e <_write_r+0x1e>
 801b48c:	6023      	str	r3, [r4, #0]
 801b48e:	bd38      	pop	{r3, r4, r5, pc}
 801b490:	2000b7f4 	.word	0x2000b7f4

0801b494 <__errno>:
 801b494:	4b01      	ldr	r3, [pc, #4]	@ (801b49c <__errno+0x8>)
 801b496:	6818      	ldr	r0, [r3, #0]
 801b498:	4770      	bx	lr
 801b49a:	bf00      	nop
 801b49c:	20000438 	.word	0x20000438

0801b4a0 <__libc_init_array>:
 801b4a0:	b570      	push	{r4, r5, r6, lr}
 801b4a2:	4d0d      	ldr	r5, [pc, #52]	@ (801b4d8 <__libc_init_array+0x38>)
 801b4a4:	4c0d      	ldr	r4, [pc, #52]	@ (801b4dc <__libc_init_array+0x3c>)
 801b4a6:	1b64      	subs	r4, r4, r5
 801b4a8:	10a4      	asrs	r4, r4, #2
 801b4aa:	2600      	movs	r6, #0
 801b4ac:	42a6      	cmp	r6, r4
 801b4ae:	d109      	bne.n	801b4c4 <__libc_init_array+0x24>
 801b4b0:	4d0b      	ldr	r5, [pc, #44]	@ (801b4e0 <__libc_init_array+0x40>)
 801b4b2:	4c0c      	ldr	r4, [pc, #48]	@ (801b4e4 <__libc_init_array+0x44>)
 801b4b4:	f001 ffd2 	bl	801d45c <_init>
 801b4b8:	1b64      	subs	r4, r4, r5
 801b4ba:	10a4      	asrs	r4, r4, #2
 801b4bc:	2600      	movs	r6, #0
 801b4be:	42a6      	cmp	r6, r4
 801b4c0:	d105      	bne.n	801b4ce <__libc_init_array+0x2e>
 801b4c2:	bd70      	pop	{r4, r5, r6, pc}
 801b4c4:	f855 3b04 	ldr.w	r3, [r5], #4
 801b4c8:	4798      	blx	r3
 801b4ca:	3601      	adds	r6, #1
 801b4cc:	e7ee      	b.n	801b4ac <__libc_init_array+0xc>
 801b4ce:	f855 3b04 	ldr.w	r3, [r5], #4
 801b4d2:	4798      	blx	r3
 801b4d4:	3601      	adds	r6, #1
 801b4d6:	e7f2      	b.n	801b4be <__libc_init_array+0x1e>
 801b4d8:	0801f0cc 	.word	0x0801f0cc
 801b4dc:	0801f0cc 	.word	0x0801f0cc
 801b4e0:	0801f0cc 	.word	0x0801f0cc
 801b4e4:	0801f0d8 	.word	0x0801f0d8

0801b4e8 <__retarget_lock_init_recursive>:
 801b4e8:	4770      	bx	lr

0801b4ea <__retarget_lock_acquire_recursive>:
 801b4ea:	4770      	bx	lr

0801b4ec <__retarget_lock_release_recursive>:
 801b4ec:	4770      	bx	lr

0801b4ee <strcpy>:
 801b4ee:	4603      	mov	r3, r0
 801b4f0:	f811 2b01 	ldrb.w	r2, [r1], #1
 801b4f4:	f803 2b01 	strb.w	r2, [r3], #1
 801b4f8:	2a00      	cmp	r2, #0
 801b4fa:	d1f9      	bne.n	801b4f0 <strcpy+0x2>
 801b4fc:	4770      	bx	lr

0801b4fe <memcpy>:
 801b4fe:	440a      	add	r2, r1
 801b500:	4291      	cmp	r1, r2
 801b502:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 801b506:	d100      	bne.n	801b50a <memcpy+0xc>
 801b508:	4770      	bx	lr
 801b50a:	b510      	push	{r4, lr}
 801b50c:	f811 4b01 	ldrb.w	r4, [r1], #1
 801b510:	f803 4f01 	strb.w	r4, [r3, #1]!
 801b514:	4291      	cmp	r1, r2
 801b516:	d1f9      	bne.n	801b50c <memcpy+0xe>
 801b518:	bd10      	pop	{r4, pc}
	...

0801b51c <__assert_func>:
 801b51c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801b51e:	4614      	mov	r4, r2
 801b520:	461a      	mov	r2, r3
 801b522:	4b09      	ldr	r3, [pc, #36]	@ (801b548 <__assert_func+0x2c>)
 801b524:	681b      	ldr	r3, [r3, #0]
 801b526:	4605      	mov	r5, r0
 801b528:	68d8      	ldr	r0, [r3, #12]
 801b52a:	b14c      	cbz	r4, 801b540 <__assert_func+0x24>
 801b52c:	4b07      	ldr	r3, [pc, #28]	@ (801b54c <__assert_func+0x30>)
 801b52e:	9100      	str	r1, [sp, #0]
 801b530:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801b534:	4906      	ldr	r1, [pc, #24]	@ (801b550 <__assert_func+0x34>)
 801b536:	462b      	mov	r3, r5
 801b538:	f000 fd3e 	bl	801bfb8 <fiprintf>
 801b53c:	f000 fdd2 	bl	801c0e4 <abort>
 801b540:	4b04      	ldr	r3, [pc, #16]	@ (801b554 <__assert_func+0x38>)
 801b542:	461c      	mov	r4, r3
 801b544:	e7f3      	b.n	801b52e <__assert_func+0x12>
 801b546:	bf00      	nop
 801b548:	20000438 	.word	0x20000438
 801b54c:	0801eb63 	.word	0x0801eb63
 801b550:	0801eb70 	.word	0x0801eb70
 801b554:	0801eb9e 	.word	0x0801eb9e

0801b558 <__env_lock>:
 801b558:	4801      	ldr	r0, [pc, #4]	@ (801b560 <__env_lock+0x8>)
 801b55a:	f7ff bfc6 	b.w	801b4ea <__retarget_lock_acquire_recursive>
 801b55e:	bf00      	nop
 801b560:	2000b7f8 	.word	0x2000b7f8

0801b564 <__env_unlock>:
 801b564:	4801      	ldr	r0, [pc, #4]	@ (801b56c <__env_unlock+0x8>)
 801b566:	f7ff bfc1 	b.w	801b4ec <__retarget_lock_release_recursive>
 801b56a:	bf00      	nop
 801b56c:	2000b7f8 	.word	0x2000b7f8

0801b570 <_free_r>:
 801b570:	b538      	push	{r3, r4, r5, lr}
 801b572:	4605      	mov	r5, r0
 801b574:	2900      	cmp	r1, #0
 801b576:	d041      	beq.n	801b5fc <_free_r+0x8c>
 801b578:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801b57c:	1f0c      	subs	r4, r1, #4
 801b57e:	2b00      	cmp	r3, #0
 801b580:	bfb8      	it	lt
 801b582:	18e4      	addlt	r4, r4, r3
 801b584:	f7ff fb2a 	bl	801abdc <__malloc_lock>
 801b588:	4a1d      	ldr	r2, [pc, #116]	@ (801b600 <_free_r+0x90>)
 801b58a:	6813      	ldr	r3, [r2, #0]
 801b58c:	b933      	cbnz	r3, 801b59c <_free_r+0x2c>
 801b58e:	6063      	str	r3, [r4, #4]
 801b590:	6014      	str	r4, [r2, #0]
 801b592:	4628      	mov	r0, r5
 801b594:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801b598:	f7ff bb26 	b.w	801abe8 <__malloc_unlock>
 801b59c:	42a3      	cmp	r3, r4
 801b59e:	d908      	bls.n	801b5b2 <_free_r+0x42>
 801b5a0:	6820      	ldr	r0, [r4, #0]
 801b5a2:	1821      	adds	r1, r4, r0
 801b5a4:	428b      	cmp	r3, r1
 801b5a6:	bf01      	itttt	eq
 801b5a8:	6819      	ldreq	r1, [r3, #0]
 801b5aa:	685b      	ldreq	r3, [r3, #4]
 801b5ac:	1809      	addeq	r1, r1, r0
 801b5ae:	6021      	streq	r1, [r4, #0]
 801b5b0:	e7ed      	b.n	801b58e <_free_r+0x1e>
 801b5b2:	461a      	mov	r2, r3
 801b5b4:	685b      	ldr	r3, [r3, #4]
 801b5b6:	b10b      	cbz	r3, 801b5bc <_free_r+0x4c>
 801b5b8:	42a3      	cmp	r3, r4
 801b5ba:	d9fa      	bls.n	801b5b2 <_free_r+0x42>
 801b5bc:	6811      	ldr	r1, [r2, #0]
 801b5be:	1850      	adds	r0, r2, r1
 801b5c0:	42a0      	cmp	r0, r4
 801b5c2:	d10b      	bne.n	801b5dc <_free_r+0x6c>
 801b5c4:	6820      	ldr	r0, [r4, #0]
 801b5c6:	4401      	add	r1, r0
 801b5c8:	1850      	adds	r0, r2, r1
 801b5ca:	4283      	cmp	r3, r0
 801b5cc:	6011      	str	r1, [r2, #0]
 801b5ce:	d1e0      	bne.n	801b592 <_free_r+0x22>
 801b5d0:	6818      	ldr	r0, [r3, #0]
 801b5d2:	685b      	ldr	r3, [r3, #4]
 801b5d4:	6053      	str	r3, [r2, #4]
 801b5d6:	4408      	add	r0, r1
 801b5d8:	6010      	str	r0, [r2, #0]
 801b5da:	e7da      	b.n	801b592 <_free_r+0x22>
 801b5dc:	d902      	bls.n	801b5e4 <_free_r+0x74>
 801b5de:	230c      	movs	r3, #12
 801b5e0:	602b      	str	r3, [r5, #0]
 801b5e2:	e7d6      	b.n	801b592 <_free_r+0x22>
 801b5e4:	6820      	ldr	r0, [r4, #0]
 801b5e6:	1821      	adds	r1, r4, r0
 801b5e8:	428b      	cmp	r3, r1
 801b5ea:	bf04      	itt	eq
 801b5ec:	6819      	ldreq	r1, [r3, #0]
 801b5ee:	685b      	ldreq	r3, [r3, #4]
 801b5f0:	6063      	str	r3, [r4, #4]
 801b5f2:	bf04      	itt	eq
 801b5f4:	1809      	addeq	r1, r1, r0
 801b5f6:	6021      	streq	r1, [r4, #0]
 801b5f8:	6054      	str	r4, [r2, #4]
 801b5fa:	e7ca      	b.n	801b592 <_free_r+0x22>
 801b5fc:	bd38      	pop	{r3, r4, r5, pc}
 801b5fe:	bf00      	nop
 801b600:	2000b6b4 	.word	0x2000b6b4

0801b604 <_malloc_usable_size_r>:
 801b604:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801b608:	1f18      	subs	r0, r3, #4
 801b60a:	2b00      	cmp	r3, #0
 801b60c:	bfbc      	itt	lt
 801b60e:	580b      	ldrlt	r3, [r1, r0]
 801b610:	18c0      	addlt	r0, r0, r3
 801b612:	4770      	bx	lr

0801b614 <__ssputs_r>:
 801b614:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b618:	688e      	ldr	r6, [r1, #8]
 801b61a:	461f      	mov	r7, r3
 801b61c:	42be      	cmp	r6, r7
 801b61e:	680b      	ldr	r3, [r1, #0]
 801b620:	4682      	mov	sl, r0
 801b622:	460c      	mov	r4, r1
 801b624:	4690      	mov	r8, r2
 801b626:	d82d      	bhi.n	801b684 <__ssputs_r+0x70>
 801b628:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801b62c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801b630:	d026      	beq.n	801b680 <__ssputs_r+0x6c>
 801b632:	6965      	ldr	r5, [r4, #20]
 801b634:	6909      	ldr	r1, [r1, #16]
 801b636:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801b63a:	eba3 0901 	sub.w	r9, r3, r1
 801b63e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801b642:	1c7b      	adds	r3, r7, #1
 801b644:	444b      	add	r3, r9
 801b646:	106d      	asrs	r5, r5, #1
 801b648:	429d      	cmp	r5, r3
 801b64a:	bf38      	it	cc
 801b64c:	461d      	movcc	r5, r3
 801b64e:	0553      	lsls	r3, r2, #21
 801b650:	d527      	bpl.n	801b6a2 <__ssputs_r+0x8e>
 801b652:	4629      	mov	r1, r5
 801b654:	f7ff fa42 	bl	801aadc <_malloc_r>
 801b658:	4606      	mov	r6, r0
 801b65a:	b360      	cbz	r0, 801b6b6 <__ssputs_r+0xa2>
 801b65c:	6921      	ldr	r1, [r4, #16]
 801b65e:	464a      	mov	r2, r9
 801b660:	f7ff ff4d 	bl	801b4fe <memcpy>
 801b664:	89a3      	ldrh	r3, [r4, #12]
 801b666:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801b66a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801b66e:	81a3      	strh	r3, [r4, #12]
 801b670:	6126      	str	r6, [r4, #16]
 801b672:	6165      	str	r5, [r4, #20]
 801b674:	444e      	add	r6, r9
 801b676:	eba5 0509 	sub.w	r5, r5, r9
 801b67a:	6026      	str	r6, [r4, #0]
 801b67c:	60a5      	str	r5, [r4, #8]
 801b67e:	463e      	mov	r6, r7
 801b680:	42be      	cmp	r6, r7
 801b682:	d900      	bls.n	801b686 <__ssputs_r+0x72>
 801b684:	463e      	mov	r6, r7
 801b686:	6820      	ldr	r0, [r4, #0]
 801b688:	4632      	mov	r2, r6
 801b68a:	4641      	mov	r1, r8
 801b68c:	f7ff fe54 	bl	801b338 <memmove>
 801b690:	68a3      	ldr	r3, [r4, #8]
 801b692:	1b9b      	subs	r3, r3, r6
 801b694:	60a3      	str	r3, [r4, #8]
 801b696:	6823      	ldr	r3, [r4, #0]
 801b698:	4433      	add	r3, r6
 801b69a:	6023      	str	r3, [r4, #0]
 801b69c:	2000      	movs	r0, #0
 801b69e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b6a2:	462a      	mov	r2, r5
 801b6a4:	f7ff fb1a 	bl	801acdc <_realloc_r>
 801b6a8:	4606      	mov	r6, r0
 801b6aa:	2800      	cmp	r0, #0
 801b6ac:	d1e0      	bne.n	801b670 <__ssputs_r+0x5c>
 801b6ae:	6921      	ldr	r1, [r4, #16]
 801b6b0:	4650      	mov	r0, sl
 801b6b2:	f7ff ff5d 	bl	801b570 <_free_r>
 801b6b6:	230c      	movs	r3, #12
 801b6b8:	f8ca 3000 	str.w	r3, [sl]
 801b6bc:	89a3      	ldrh	r3, [r4, #12]
 801b6be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801b6c2:	81a3      	strh	r3, [r4, #12]
 801b6c4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801b6c8:	e7e9      	b.n	801b69e <__ssputs_r+0x8a>
	...

0801b6cc <_svfiprintf_r>:
 801b6cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b6d0:	4698      	mov	r8, r3
 801b6d2:	898b      	ldrh	r3, [r1, #12]
 801b6d4:	061b      	lsls	r3, r3, #24
 801b6d6:	b09d      	sub	sp, #116	@ 0x74
 801b6d8:	4607      	mov	r7, r0
 801b6da:	460d      	mov	r5, r1
 801b6dc:	4614      	mov	r4, r2
 801b6de:	d510      	bpl.n	801b702 <_svfiprintf_r+0x36>
 801b6e0:	690b      	ldr	r3, [r1, #16]
 801b6e2:	b973      	cbnz	r3, 801b702 <_svfiprintf_r+0x36>
 801b6e4:	2140      	movs	r1, #64	@ 0x40
 801b6e6:	f7ff f9f9 	bl	801aadc <_malloc_r>
 801b6ea:	6028      	str	r0, [r5, #0]
 801b6ec:	6128      	str	r0, [r5, #16]
 801b6ee:	b930      	cbnz	r0, 801b6fe <_svfiprintf_r+0x32>
 801b6f0:	230c      	movs	r3, #12
 801b6f2:	603b      	str	r3, [r7, #0]
 801b6f4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801b6f8:	b01d      	add	sp, #116	@ 0x74
 801b6fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b6fe:	2340      	movs	r3, #64	@ 0x40
 801b700:	616b      	str	r3, [r5, #20]
 801b702:	2300      	movs	r3, #0
 801b704:	9309      	str	r3, [sp, #36]	@ 0x24
 801b706:	2320      	movs	r3, #32
 801b708:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801b70c:	f8cd 800c 	str.w	r8, [sp, #12]
 801b710:	2330      	movs	r3, #48	@ 0x30
 801b712:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801b8b0 <_svfiprintf_r+0x1e4>
 801b716:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801b71a:	f04f 0901 	mov.w	r9, #1
 801b71e:	4623      	mov	r3, r4
 801b720:	469a      	mov	sl, r3
 801b722:	f813 2b01 	ldrb.w	r2, [r3], #1
 801b726:	b10a      	cbz	r2, 801b72c <_svfiprintf_r+0x60>
 801b728:	2a25      	cmp	r2, #37	@ 0x25
 801b72a:	d1f9      	bne.n	801b720 <_svfiprintf_r+0x54>
 801b72c:	ebba 0b04 	subs.w	fp, sl, r4
 801b730:	d00b      	beq.n	801b74a <_svfiprintf_r+0x7e>
 801b732:	465b      	mov	r3, fp
 801b734:	4622      	mov	r2, r4
 801b736:	4629      	mov	r1, r5
 801b738:	4638      	mov	r0, r7
 801b73a:	f7ff ff6b 	bl	801b614 <__ssputs_r>
 801b73e:	3001      	adds	r0, #1
 801b740:	f000 80a7 	beq.w	801b892 <_svfiprintf_r+0x1c6>
 801b744:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801b746:	445a      	add	r2, fp
 801b748:	9209      	str	r2, [sp, #36]	@ 0x24
 801b74a:	f89a 3000 	ldrb.w	r3, [sl]
 801b74e:	2b00      	cmp	r3, #0
 801b750:	f000 809f 	beq.w	801b892 <_svfiprintf_r+0x1c6>
 801b754:	2300      	movs	r3, #0
 801b756:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801b75a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801b75e:	f10a 0a01 	add.w	sl, sl, #1
 801b762:	9304      	str	r3, [sp, #16]
 801b764:	9307      	str	r3, [sp, #28]
 801b766:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801b76a:	931a      	str	r3, [sp, #104]	@ 0x68
 801b76c:	4654      	mov	r4, sl
 801b76e:	2205      	movs	r2, #5
 801b770:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b774:	484e      	ldr	r0, [pc, #312]	@ (801b8b0 <_svfiprintf_r+0x1e4>)
 801b776:	f7e4 fd6b 	bl	8000250 <memchr>
 801b77a:	9a04      	ldr	r2, [sp, #16]
 801b77c:	b9d8      	cbnz	r0, 801b7b6 <_svfiprintf_r+0xea>
 801b77e:	06d0      	lsls	r0, r2, #27
 801b780:	bf44      	itt	mi
 801b782:	2320      	movmi	r3, #32
 801b784:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801b788:	0711      	lsls	r1, r2, #28
 801b78a:	bf44      	itt	mi
 801b78c:	232b      	movmi	r3, #43	@ 0x2b
 801b78e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801b792:	f89a 3000 	ldrb.w	r3, [sl]
 801b796:	2b2a      	cmp	r3, #42	@ 0x2a
 801b798:	d015      	beq.n	801b7c6 <_svfiprintf_r+0xfa>
 801b79a:	9a07      	ldr	r2, [sp, #28]
 801b79c:	4654      	mov	r4, sl
 801b79e:	2000      	movs	r0, #0
 801b7a0:	f04f 0c0a 	mov.w	ip, #10
 801b7a4:	4621      	mov	r1, r4
 801b7a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 801b7aa:	3b30      	subs	r3, #48	@ 0x30
 801b7ac:	2b09      	cmp	r3, #9
 801b7ae:	d94b      	bls.n	801b848 <_svfiprintf_r+0x17c>
 801b7b0:	b1b0      	cbz	r0, 801b7e0 <_svfiprintf_r+0x114>
 801b7b2:	9207      	str	r2, [sp, #28]
 801b7b4:	e014      	b.n	801b7e0 <_svfiprintf_r+0x114>
 801b7b6:	eba0 0308 	sub.w	r3, r0, r8
 801b7ba:	fa09 f303 	lsl.w	r3, r9, r3
 801b7be:	4313      	orrs	r3, r2
 801b7c0:	9304      	str	r3, [sp, #16]
 801b7c2:	46a2      	mov	sl, r4
 801b7c4:	e7d2      	b.n	801b76c <_svfiprintf_r+0xa0>
 801b7c6:	9b03      	ldr	r3, [sp, #12]
 801b7c8:	1d19      	adds	r1, r3, #4
 801b7ca:	681b      	ldr	r3, [r3, #0]
 801b7cc:	9103      	str	r1, [sp, #12]
 801b7ce:	2b00      	cmp	r3, #0
 801b7d0:	bfbb      	ittet	lt
 801b7d2:	425b      	neglt	r3, r3
 801b7d4:	f042 0202 	orrlt.w	r2, r2, #2
 801b7d8:	9307      	strge	r3, [sp, #28]
 801b7da:	9307      	strlt	r3, [sp, #28]
 801b7dc:	bfb8      	it	lt
 801b7de:	9204      	strlt	r2, [sp, #16]
 801b7e0:	7823      	ldrb	r3, [r4, #0]
 801b7e2:	2b2e      	cmp	r3, #46	@ 0x2e
 801b7e4:	d10a      	bne.n	801b7fc <_svfiprintf_r+0x130>
 801b7e6:	7863      	ldrb	r3, [r4, #1]
 801b7e8:	2b2a      	cmp	r3, #42	@ 0x2a
 801b7ea:	d132      	bne.n	801b852 <_svfiprintf_r+0x186>
 801b7ec:	9b03      	ldr	r3, [sp, #12]
 801b7ee:	1d1a      	adds	r2, r3, #4
 801b7f0:	681b      	ldr	r3, [r3, #0]
 801b7f2:	9203      	str	r2, [sp, #12]
 801b7f4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801b7f8:	3402      	adds	r4, #2
 801b7fa:	9305      	str	r3, [sp, #20]
 801b7fc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801b8c0 <_svfiprintf_r+0x1f4>
 801b800:	7821      	ldrb	r1, [r4, #0]
 801b802:	2203      	movs	r2, #3
 801b804:	4650      	mov	r0, sl
 801b806:	f7e4 fd23 	bl	8000250 <memchr>
 801b80a:	b138      	cbz	r0, 801b81c <_svfiprintf_r+0x150>
 801b80c:	9b04      	ldr	r3, [sp, #16]
 801b80e:	eba0 000a 	sub.w	r0, r0, sl
 801b812:	2240      	movs	r2, #64	@ 0x40
 801b814:	4082      	lsls	r2, r0
 801b816:	4313      	orrs	r3, r2
 801b818:	3401      	adds	r4, #1
 801b81a:	9304      	str	r3, [sp, #16]
 801b81c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b820:	4824      	ldr	r0, [pc, #144]	@ (801b8b4 <_svfiprintf_r+0x1e8>)
 801b822:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801b826:	2206      	movs	r2, #6
 801b828:	f7e4 fd12 	bl	8000250 <memchr>
 801b82c:	2800      	cmp	r0, #0
 801b82e:	d036      	beq.n	801b89e <_svfiprintf_r+0x1d2>
 801b830:	4b21      	ldr	r3, [pc, #132]	@ (801b8b8 <_svfiprintf_r+0x1ec>)
 801b832:	bb1b      	cbnz	r3, 801b87c <_svfiprintf_r+0x1b0>
 801b834:	9b03      	ldr	r3, [sp, #12]
 801b836:	3307      	adds	r3, #7
 801b838:	f023 0307 	bic.w	r3, r3, #7
 801b83c:	3308      	adds	r3, #8
 801b83e:	9303      	str	r3, [sp, #12]
 801b840:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b842:	4433      	add	r3, r6
 801b844:	9309      	str	r3, [sp, #36]	@ 0x24
 801b846:	e76a      	b.n	801b71e <_svfiprintf_r+0x52>
 801b848:	fb0c 3202 	mla	r2, ip, r2, r3
 801b84c:	460c      	mov	r4, r1
 801b84e:	2001      	movs	r0, #1
 801b850:	e7a8      	b.n	801b7a4 <_svfiprintf_r+0xd8>
 801b852:	2300      	movs	r3, #0
 801b854:	3401      	adds	r4, #1
 801b856:	9305      	str	r3, [sp, #20]
 801b858:	4619      	mov	r1, r3
 801b85a:	f04f 0c0a 	mov.w	ip, #10
 801b85e:	4620      	mov	r0, r4
 801b860:	f810 2b01 	ldrb.w	r2, [r0], #1
 801b864:	3a30      	subs	r2, #48	@ 0x30
 801b866:	2a09      	cmp	r2, #9
 801b868:	d903      	bls.n	801b872 <_svfiprintf_r+0x1a6>
 801b86a:	2b00      	cmp	r3, #0
 801b86c:	d0c6      	beq.n	801b7fc <_svfiprintf_r+0x130>
 801b86e:	9105      	str	r1, [sp, #20]
 801b870:	e7c4      	b.n	801b7fc <_svfiprintf_r+0x130>
 801b872:	fb0c 2101 	mla	r1, ip, r1, r2
 801b876:	4604      	mov	r4, r0
 801b878:	2301      	movs	r3, #1
 801b87a:	e7f0      	b.n	801b85e <_svfiprintf_r+0x192>
 801b87c:	ab03      	add	r3, sp, #12
 801b87e:	9300      	str	r3, [sp, #0]
 801b880:	462a      	mov	r2, r5
 801b882:	4b0e      	ldr	r3, [pc, #56]	@ (801b8bc <_svfiprintf_r+0x1f0>)
 801b884:	a904      	add	r1, sp, #16
 801b886:	4638      	mov	r0, r7
 801b888:	f3af 8000 	nop.w
 801b88c:	1c42      	adds	r2, r0, #1
 801b88e:	4606      	mov	r6, r0
 801b890:	d1d6      	bne.n	801b840 <_svfiprintf_r+0x174>
 801b892:	89ab      	ldrh	r3, [r5, #12]
 801b894:	065b      	lsls	r3, r3, #25
 801b896:	f53f af2d 	bmi.w	801b6f4 <_svfiprintf_r+0x28>
 801b89a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801b89c:	e72c      	b.n	801b6f8 <_svfiprintf_r+0x2c>
 801b89e:	ab03      	add	r3, sp, #12
 801b8a0:	9300      	str	r3, [sp, #0]
 801b8a2:	462a      	mov	r2, r5
 801b8a4:	4b05      	ldr	r3, [pc, #20]	@ (801b8bc <_svfiprintf_r+0x1f0>)
 801b8a6:	a904      	add	r1, sp, #16
 801b8a8:	4638      	mov	r0, r7
 801b8aa:	f000 f9bb 	bl	801bc24 <_printf_i>
 801b8ae:	e7ed      	b.n	801b88c <_svfiprintf_r+0x1c0>
 801b8b0:	0801eb9f 	.word	0x0801eb9f
 801b8b4:	0801eba9 	.word	0x0801eba9
 801b8b8:	00000000 	.word	0x00000000
 801b8bc:	0801b615 	.word	0x0801b615
 801b8c0:	0801eba5 	.word	0x0801eba5

0801b8c4 <__sfputc_r>:
 801b8c4:	6893      	ldr	r3, [r2, #8]
 801b8c6:	3b01      	subs	r3, #1
 801b8c8:	2b00      	cmp	r3, #0
 801b8ca:	b410      	push	{r4}
 801b8cc:	6093      	str	r3, [r2, #8]
 801b8ce:	da08      	bge.n	801b8e2 <__sfputc_r+0x1e>
 801b8d0:	6994      	ldr	r4, [r2, #24]
 801b8d2:	42a3      	cmp	r3, r4
 801b8d4:	db01      	blt.n	801b8da <__sfputc_r+0x16>
 801b8d6:	290a      	cmp	r1, #10
 801b8d8:	d103      	bne.n	801b8e2 <__sfputc_r+0x1e>
 801b8da:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b8de:	f7ff bc87 	b.w	801b1f0 <__swbuf_r>
 801b8e2:	6813      	ldr	r3, [r2, #0]
 801b8e4:	1c58      	adds	r0, r3, #1
 801b8e6:	6010      	str	r0, [r2, #0]
 801b8e8:	7019      	strb	r1, [r3, #0]
 801b8ea:	4608      	mov	r0, r1
 801b8ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b8f0:	4770      	bx	lr

0801b8f2 <__sfputs_r>:
 801b8f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b8f4:	4606      	mov	r6, r0
 801b8f6:	460f      	mov	r7, r1
 801b8f8:	4614      	mov	r4, r2
 801b8fa:	18d5      	adds	r5, r2, r3
 801b8fc:	42ac      	cmp	r4, r5
 801b8fe:	d101      	bne.n	801b904 <__sfputs_r+0x12>
 801b900:	2000      	movs	r0, #0
 801b902:	e007      	b.n	801b914 <__sfputs_r+0x22>
 801b904:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b908:	463a      	mov	r2, r7
 801b90a:	4630      	mov	r0, r6
 801b90c:	f7ff ffda 	bl	801b8c4 <__sfputc_r>
 801b910:	1c43      	adds	r3, r0, #1
 801b912:	d1f3      	bne.n	801b8fc <__sfputs_r+0xa>
 801b914:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801b918 <_vfiprintf_r>:
 801b918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b91c:	460d      	mov	r5, r1
 801b91e:	b09d      	sub	sp, #116	@ 0x74
 801b920:	4614      	mov	r4, r2
 801b922:	4698      	mov	r8, r3
 801b924:	4606      	mov	r6, r0
 801b926:	b118      	cbz	r0, 801b930 <_vfiprintf_r+0x18>
 801b928:	6a03      	ldr	r3, [r0, #32]
 801b92a:	b90b      	cbnz	r3, 801b930 <_vfiprintf_r+0x18>
 801b92c:	f7ff fb08 	bl	801af40 <__sinit>
 801b930:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801b932:	07d9      	lsls	r1, r3, #31
 801b934:	d405      	bmi.n	801b942 <_vfiprintf_r+0x2a>
 801b936:	89ab      	ldrh	r3, [r5, #12]
 801b938:	059a      	lsls	r2, r3, #22
 801b93a:	d402      	bmi.n	801b942 <_vfiprintf_r+0x2a>
 801b93c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801b93e:	f7ff fdd4 	bl	801b4ea <__retarget_lock_acquire_recursive>
 801b942:	89ab      	ldrh	r3, [r5, #12]
 801b944:	071b      	lsls	r3, r3, #28
 801b946:	d501      	bpl.n	801b94c <_vfiprintf_r+0x34>
 801b948:	692b      	ldr	r3, [r5, #16]
 801b94a:	b99b      	cbnz	r3, 801b974 <_vfiprintf_r+0x5c>
 801b94c:	4629      	mov	r1, r5
 801b94e:	4630      	mov	r0, r6
 801b950:	f7ff fc8c 	bl	801b26c <__swsetup_r>
 801b954:	b170      	cbz	r0, 801b974 <_vfiprintf_r+0x5c>
 801b956:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801b958:	07dc      	lsls	r4, r3, #31
 801b95a:	d504      	bpl.n	801b966 <_vfiprintf_r+0x4e>
 801b95c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801b960:	b01d      	add	sp, #116	@ 0x74
 801b962:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b966:	89ab      	ldrh	r3, [r5, #12]
 801b968:	0598      	lsls	r0, r3, #22
 801b96a:	d4f7      	bmi.n	801b95c <_vfiprintf_r+0x44>
 801b96c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801b96e:	f7ff fdbd 	bl	801b4ec <__retarget_lock_release_recursive>
 801b972:	e7f3      	b.n	801b95c <_vfiprintf_r+0x44>
 801b974:	2300      	movs	r3, #0
 801b976:	9309      	str	r3, [sp, #36]	@ 0x24
 801b978:	2320      	movs	r3, #32
 801b97a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801b97e:	f8cd 800c 	str.w	r8, [sp, #12]
 801b982:	2330      	movs	r3, #48	@ 0x30
 801b984:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801bb34 <_vfiprintf_r+0x21c>
 801b988:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801b98c:	f04f 0901 	mov.w	r9, #1
 801b990:	4623      	mov	r3, r4
 801b992:	469a      	mov	sl, r3
 801b994:	f813 2b01 	ldrb.w	r2, [r3], #1
 801b998:	b10a      	cbz	r2, 801b99e <_vfiprintf_r+0x86>
 801b99a:	2a25      	cmp	r2, #37	@ 0x25
 801b99c:	d1f9      	bne.n	801b992 <_vfiprintf_r+0x7a>
 801b99e:	ebba 0b04 	subs.w	fp, sl, r4
 801b9a2:	d00b      	beq.n	801b9bc <_vfiprintf_r+0xa4>
 801b9a4:	465b      	mov	r3, fp
 801b9a6:	4622      	mov	r2, r4
 801b9a8:	4629      	mov	r1, r5
 801b9aa:	4630      	mov	r0, r6
 801b9ac:	f7ff ffa1 	bl	801b8f2 <__sfputs_r>
 801b9b0:	3001      	adds	r0, #1
 801b9b2:	f000 80a7 	beq.w	801bb04 <_vfiprintf_r+0x1ec>
 801b9b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801b9b8:	445a      	add	r2, fp
 801b9ba:	9209      	str	r2, [sp, #36]	@ 0x24
 801b9bc:	f89a 3000 	ldrb.w	r3, [sl]
 801b9c0:	2b00      	cmp	r3, #0
 801b9c2:	f000 809f 	beq.w	801bb04 <_vfiprintf_r+0x1ec>
 801b9c6:	2300      	movs	r3, #0
 801b9c8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801b9cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801b9d0:	f10a 0a01 	add.w	sl, sl, #1
 801b9d4:	9304      	str	r3, [sp, #16]
 801b9d6:	9307      	str	r3, [sp, #28]
 801b9d8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801b9dc:	931a      	str	r3, [sp, #104]	@ 0x68
 801b9de:	4654      	mov	r4, sl
 801b9e0:	2205      	movs	r2, #5
 801b9e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b9e6:	4853      	ldr	r0, [pc, #332]	@ (801bb34 <_vfiprintf_r+0x21c>)
 801b9e8:	f7e4 fc32 	bl	8000250 <memchr>
 801b9ec:	9a04      	ldr	r2, [sp, #16]
 801b9ee:	b9d8      	cbnz	r0, 801ba28 <_vfiprintf_r+0x110>
 801b9f0:	06d1      	lsls	r1, r2, #27
 801b9f2:	bf44      	itt	mi
 801b9f4:	2320      	movmi	r3, #32
 801b9f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801b9fa:	0713      	lsls	r3, r2, #28
 801b9fc:	bf44      	itt	mi
 801b9fe:	232b      	movmi	r3, #43	@ 0x2b
 801ba00:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801ba04:	f89a 3000 	ldrb.w	r3, [sl]
 801ba08:	2b2a      	cmp	r3, #42	@ 0x2a
 801ba0a:	d015      	beq.n	801ba38 <_vfiprintf_r+0x120>
 801ba0c:	9a07      	ldr	r2, [sp, #28]
 801ba0e:	4654      	mov	r4, sl
 801ba10:	2000      	movs	r0, #0
 801ba12:	f04f 0c0a 	mov.w	ip, #10
 801ba16:	4621      	mov	r1, r4
 801ba18:	f811 3b01 	ldrb.w	r3, [r1], #1
 801ba1c:	3b30      	subs	r3, #48	@ 0x30
 801ba1e:	2b09      	cmp	r3, #9
 801ba20:	d94b      	bls.n	801baba <_vfiprintf_r+0x1a2>
 801ba22:	b1b0      	cbz	r0, 801ba52 <_vfiprintf_r+0x13a>
 801ba24:	9207      	str	r2, [sp, #28]
 801ba26:	e014      	b.n	801ba52 <_vfiprintf_r+0x13a>
 801ba28:	eba0 0308 	sub.w	r3, r0, r8
 801ba2c:	fa09 f303 	lsl.w	r3, r9, r3
 801ba30:	4313      	orrs	r3, r2
 801ba32:	9304      	str	r3, [sp, #16]
 801ba34:	46a2      	mov	sl, r4
 801ba36:	e7d2      	b.n	801b9de <_vfiprintf_r+0xc6>
 801ba38:	9b03      	ldr	r3, [sp, #12]
 801ba3a:	1d19      	adds	r1, r3, #4
 801ba3c:	681b      	ldr	r3, [r3, #0]
 801ba3e:	9103      	str	r1, [sp, #12]
 801ba40:	2b00      	cmp	r3, #0
 801ba42:	bfbb      	ittet	lt
 801ba44:	425b      	neglt	r3, r3
 801ba46:	f042 0202 	orrlt.w	r2, r2, #2
 801ba4a:	9307      	strge	r3, [sp, #28]
 801ba4c:	9307      	strlt	r3, [sp, #28]
 801ba4e:	bfb8      	it	lt
 801ba50:	9204      	strlt	r2, [sp, #16]
 801ba52:	7823      	ldrb	r3, [r4, #0]
 801ba54:	2b2e      	cmp	r3, #46	@ 0x2e
 801ba56:	d10a      	bne.n	801ba6e <_vfiprintf_r+0x156>
 801ba58:	7863      	ldrb	r3, [r4, #1]
 801ba5a:	2b2a      	cmp	r3, #42	@ 0x2a
 801ba5c:	d132      	bne.n	801bac4 <_vfiprintf_r+0x1ac>
 801ba5e:	9b03      	ldr	r3, [sp, #12]
 801ba60:	1d1a      	adds	r2, r3, #4
 801ba62:	681b      	ldr	r3, [r3, #0]
 801ba64:	9203      	str	r2, [sp, #12]
 801ba66:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801ba6a:	3402      	adds	r4, #2
 801ba6c:	9305      	str	r3, [sp, #20]
 801ba6e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801bb44 <_vfiprintf_r+0x22c>
 801ba72:	7821      	ldrb	r1, [r4, #0]
 801ba74:	2203      	movs	r2, #3
 801ba76:	4650      	mov	r0, sl
 801ba78:	f7e4 fbea 	bl	8000250 <memchr>
 801ba7c:	b138      	cbz	r0, 801ba8e <_vfiprintf_r+0x176>
 801ba7e:	9b04      	ldr	r3, [sp, #16]
 801ba80:	eba0 000a 	sub.w	r0, r0, sl
 801ba84:	2240      	movs	r2, #64	@ 0x40
 801ba86:	4082      	lsls	r2, r0
 801ba88:	4313      	orrs	r3, r2
 801ba8a:	3401      	adds	r4, #1
 801ba8c:	9304      	str	r3, [sp, #16]
 801ba8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ba92:	4829      	ldr	r0, [pc, #164]	@ (801bb38 <_vfiprintf_r+0x220>)
 801ba94:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801ba98:	2206      	movs	r2, #6
 801ba9a:	f7e4 fbd9 	bl	8000250 <memchr>
 801ba9e:	2800      	cmp	r0, #0
 801baa0:	d03f      	beq.n	801bb22 <_vfiprintf_r+0x20a>
 801baa2:	4b26      	ldr	r3, [pc, #152]	@ (801bb3c <_vfiprintf_r+0x224>)
 801baa4:	bb1b      	cbnz	r3, 801baee <_vfiprintf_r+0x1d6>
 801baa6:	9b03      	ldr	r3, [sp, #12]
 801baa8:	3307      	adds	r3, #7
 801baaa:	f023 0307 	bic.w	r3, r3, #7
 801baae:	3308      	adds	r3, #8
 801bab0:	9303      	str	r3, [sp, #12]
 801bab2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801bab4:	443b      	add	r3, r7
 801bab6:	9309      	str	r3, [sp, #36]	@ 0x24
 801bab8:	e76a      	b.n	801b990 <_vfiprintf_r+0x78>
 801baba:	fb0c 3202 	mla	r2, ip, r2, r3
 801babe:	460c      	mov	r4, r1
 801bac0:	2001      	movs	r0, #1
 801bac2:	e7a8      	b.n	801ba16 <_vfiprintf_r+0xfe>
 801bac4:	2300      	movs	r3, #0
 801bac6:	3401      	adds	r4, #1
 801bac8:	9305      	str	r3, [sp, #20]
 801baca:	4619      	mov	r1, r3
 801bacc:	f04f 0c0a 	mov.w	ip, #10
 801bad0:	4620      	mov	r0, r4
 801bad2:	f810 2b01 	ldrb.w	r2, [r0], #1
 801bad6:	3a30      	subs	r2, #48	@ 0x30
 801bad8:	2a09      	cmp	r2, #9
 801bada:	d903      	bls.n	801bae4 <_vfiprintf_r+0x1cc>
 801badc:	2b00      	cmp	r3, #0
 801bade:	d0c6      	beq.n	801ba6e <_vfiprintf_r+0x156>
 801bae0:	9105      	str	r1, [sp, #20]
 801bae2:	e7c4      	b.n	801ba6e <_vfiprintf_r+0x156>
 801bae4:	fb0c 2101 	mla	r1, ip, r1, r2
 801bae8:	4604      	mov	r4, r0
 801baea:	2301      	movs	r3, #1
 801baec:	e7f0      	b.n	801bad0 <_vfiprintf_r+0x1b8>
 801baee:	ab03      	add	r3, sp, #12
 801baf0:	9300      	str	r3, [sp, #0]
 801baf2:	462a      	mov	r2, r5
 801baf4:	4b12      	ldr	r3, [pc, #72]	@ (801bb40 <_vfiprintf_r+0x228>)
 801baf6:	a904      	add	r1, sp, #16
 801baf8:	4630      	mov	r0, r6
 801bafa:	f3af 8000 	nop.w
 801bafe:	4607      	mov	r7, r0
 801bb00:	1c78      	adds	r0, r7, #1
 801bb02:	d1d6      	bne.n	801bab2 <_vfiprintf_r+0x19a>
 801bb04:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801bb06:	07d9      	lsls	r1, r3, #31
 801bb08:	d405      	bmi.n	801bb16 <_vfiprintf_r+0x1fe>
 801bb0a:	89ab      	ldrh	r3, [r5, #12]
 801bb0c:	059a      	lsls	r2, r3, #22
 801bb0e:	d402      	bmi.n	801bb16 <_vfiprintf_r+0x1fe>
 801bb10:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801bb12:	f7ff fceb 	bl	801b4ec <__retarget_lock_release_recursive>
 801bb16:	89ab      	ldrh	r3, [r5, #12]
 801bb18:	065b      	lsls	r3, r3, #25
 801bb1a:	f53f af1f 	bmi.w	801b95c <_vfiprintf_r+0x44>
 801bb1e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801bb20:	e71e      	b.n	801b960 <_vfiprintf_r+0x48>
 801bb22:	ab03      	add	r3, sp, #12
 801bb24:	9300      	str	r3, [sp, #0]
 801bb26:	462a      	mov	r2, r5
 801bb28:	4b05      	ldr	r3, [pc, #20]	@ (801bb40 <_vfiprintf_r+0x228>)
 801bb2a:	a904      	add	r1, sp, #16
 801bb2c:	4630      	mov	r0, r6
 801bb2e:	f000 f879 	bl	801bc24 <_printf_i>
 801bb32:	e7e4      	b.n	801bafe <_vfiprintf_r+0x1e6>
 801bb34:	0801eb9f 	.word	0x0801eb9f
 801bb38:	0801eba9 	.word	0x0801eba9
 801bb3c:	00000000 	.word	0x00000000
 801bb40:	0801b8f3 	.word	0x0801b8f3
 801bb44:	0801eba5 	.word	0x0801eba5

0801bb48 <_printf_common>:
 801bb48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801bb4c:	4616      	mov	r6, r2
 801bb4e:	4698      	mov	r8, r3
 801bb50:	688a      	ldr	r2, [r1, #8]
 801bb52:	690b      	ldr	r3, [r1, #16]
 801bb54:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801bb58:	4293      	cmp	r3, r2
 801bb5a:	bfb8      	it	lt
 801bb5c:	4613      	movlt	r3, r2
 801bb5e:	6033      	str	r3, [r6, #0]
 801bb60:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801bb64:	4607      	mov	r7, r0
 801bb66:	460c      	mov	r4, r1
 801bb68:	b10a      	cbz	r2, 801bb6e <_printf_common+0x26>
 801bb6a:	3301      	adds	r3, #1
 801bb6c:	6033      	str	r3, [r6, #0]
 801bb6e:	6823      	ldr	r3, [r4, #0]
 801bb70:	0699      	lsls	r1, r3, #26
 801bb72:	bf42      	ittt	mi
 801bb74:	6833      	ldrmi	r3, [r6, #0]
 801bb76:	3302      	addmi	r3, #2
 801bb78:	6033      	strmi	r3, [r6, #0]
 801bb7a:	6825      	ldr	r5, [r4, #0]
 801bb7c:	f015 0506 	ands.w	r5, r5, #6
 801bb80:	d106      	bne.n	801bb90 <_printf_common+0x48>
 801bb82:	f104 0a19 	add.w	sl, r4, #25
 801bb86:	68e3      	ldr	r3, [r4, #12]
 801bb88:	6832      	ldr	r2, [r6, #0]
 801bb8a:	1a9b      	subs	r3, r3, r2
 801bb8c:	42ab      	cmp	r3, r5
 801bb8e:	dc26      	bgt.n	801bbde <_printf_common+0x96>
 801bb90:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801bb94:	6822      	ldr	r2, [r4, #0]
 801bb96:	3b00      	subs	r3, #0
 801bb98:	bf18      	it	ne
 801bb9a:	2301      	movne	r3, #1
 801bb9c:	0692      	lsls	r2, r2, #26
 801bb9e:	d42b      	bmi.n	801bbf8 <_printf_common+0xb0>
 801bba0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801bba4:	4641      	mov	r1, r8
 801bba6:	4638      	mov	r0, r7
 801bba8:	47c8      	blx	r9
 801bbaa:	3001      	adds	r0, #1
 801bbac:	d01e      	beq.n	801bbec <_printf_common+0xa4>
 801bbae:	6823      	ldr	r3, [r4, #0]
 801bbb0:	6922      	ldr	r2, [r4, #16]
 801bbb2:	f003 0306 	and.w	r3, r3, #6
 801bbb6:	2b04      	cmp	r3, #4
 801bbb8:	bf02      	ittt	eq
 801bbba:	68e5      	ldreq	r5, [r4, #12]
 801bbbc:	6833      	ldreq	r3, [r6, #0]
 801bbbe:	1aed      	subeq	r5, r5, r3
 801bbc0:	68a3      	ldr	r3, [r4, #8]
 801bbc2:	bf0c      	ite	eq
 801bbc4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801bbc8:	2500      	movne	r5, #0
 801bbca:	4293      	cmp	r3, r2
 801bbcc:	bfc4      	itt	gt
 801bbce:	1a9b      	subgt	r3, r3, r2
 801bbd0:	18ed      	addgt	r5, r5, r3
 801bbd2:	2600      	movs	r6, #0
 801bbd4:	341a      	adds	r4, #26
 801bbd6:	42b5      	cmp	r5, r6
 801bbd8:	d11a      	bne.n	801bc10 <_printf_common+0xc8>
 801bbda:	2000      	movs	r0, #0
 801bbdc:	e008      	b.n	801bbf0 <_printf_common+0xa8>
 801bbde:	2301      	movs	r3, #1
 801bbe0:	4652      	mov	r2, sl
 801bbe2:	4641      	mov	r1, r8
 801bbe4:	4638      	mov	r0, r7
 801bbe6:	47c8      	blx	r9
 801bbe8:	3001      	adds	r0, #1
 801bbea:	d103      	bne.n	801bbf4 <_printf_common+0xac>
 801bbec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801bbf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bbf4:	3501      	adds	r5, #1
 801bbf6:	e7c6      	b.n	801bb86 <_printf_common+0x3e>
 801bbf8:	18e1      	adds	r1, r4, r3
 801bbfa:	1c5a      	adds	r2, r3, #1
 801bbfc:	2030      	movs	r0, #48	@ 0x30
 801bbfe:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801bc02:	4422      	add	r2, r4
 801bc04:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801bc08:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801bc0c:	3302      	adds	r3, #2
 801bc0e:	e7c7      	b.n	801bba0 <_printf_common+0x58>
 801bc10:	2301      	movs	r3, #1
 801bc12:	4622      	mov	r2, r4
 801bc14:	4641      	mov	r1, r8
 801bc16:	4638      	mov	r0, r7
 801bc18:	47c8      	blx	r9
 801bc1a:	3001      	adds	r0, #1
 801bc1c:	d0e6      	beq.n	801bbec <_printf_common+0xa4>
 801bc1e:	3601      	adds	r6, #1
 801bc20:	e7d9      	b.n	801bbd6 <_printf_common+0x8e>
	...

0801bc24 <_printf_i>:
 801bc24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801bc28:	7e0f      	ldrb	r7, [r1, #24]
 801bc2a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801bc2c:	2f78      	cmp	r7, #120	@ 0x78
 801bc2e:	4691      	mov	r9, r2
 801bc30:	4680      	mov	r8, r0
 801bc32:	460c      	mov	r4, r1
 801bc34:	469a      	mov	sl, r3
 801bc36:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801bc3a:	d807      	bhi.n	801bc4c <_printf_i+0x28>
 801bc3c:	2f62      	cmp	r7, #98	@ 0x62
 801bc3e:	d80a      	bhi.n	801bc56 <_printf_i+0x32>
 801bc40:	2f00      	cmp	r7, #0
 801bc42:	f000 80d1 	beq.w	801bde8 <_printf_i+0x1c4>
 801bc46:	2f58      	cmp	r7, #88	@ 0x58
 801bc48:	f000 80b8 	beq.w	801bdbc <_printf_i+0x198>
 801bc4c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801bc50:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801bc54:	e03a      	b.n	801bccc <_printf_i+0xa8>
 801bc56:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801bc5a:	2b15      	cmp	r3, #21
 801bc5c:	d8f6      	bhi.n	801bc4c <_printf_i+0x28>
 801bc5e:	a101      	add	r1, pc, #4	@ (adr r1, 801bc64 <_printf_i+0x40>)
 801bc60:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801bc64:	0801bcbd 	.word	0x0801bcbd
 801bc68:	0801bcd1 	.word	0x0801bcd1
 801bc6c:	0801bc4d 	.word	0x0801bc4d
 801bc70:	0801bc4d 	.word	0x0801bc4d
 801bc74:	0801bc4d 	.word	0x0801bc4d
 801bc78:	0801bc4d 	.word	0x0801bc4d
 801bc7c:	0801bcd1 	.word	0x0801bcd1
 801bc80:	0801bc4d 	.word	0x0801bc4d
 801bc84:	0801bc4d 	.word	0x0801bc4d
 801bc88:	0801bc4d 	.word	0x0801bc4d
 801bc8c:	0801bc4d 	.word	0x0801bc4d
 801bc90:	0801bdcf 	.word	0x0801bdcf
 801bc94:	0801bcfb 	.word	0x0801bcfb
 801bc98:	0801bd89 	.word	0x0801bd89
 801bc9c:	0801bc4d 	.word	0x0801bc4d
 801bca0:	0801bc4d 	.word	0x0801bc4d
 801bca4:	0801bdf1 	.word	0x0801bdf1
 801bca8:	0801bc4d 	.word	0x0801bc4d
 801bcac:	0801bcfb 	.word	0x0801bcfb
 801bcb0:	0801bc4d 	.word	0x0801bc4d
 801bcb4:	0801bc4d 	.word	0x0801bc4d
 801bcb8:	0801bd91 	.word	0x0801bd91
 801bcbc:	6833      	ldr	r3, [r6, #0]
 801bcbe:	1d1a      	adds	r2, r3, #4
 801bcc0:	681b      	ldr	r3, [r3, #0]
 801bcc2:	6032      	str	r2, [r6, #0]
 801bcc4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801bcc8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801bccc:	2301      	movs	r3, #1
 801bcce:	e09c      	b.n	801be0a <_printf_i+0x1e6>
 801bcd0:	6833      	ldr	r3, [r6, #0]
 801bcd2:	6820      	ldr	r0, [r4, #0]
 801bcd4:	1d19      	adds	r1, r3, #4
 801bcd6:	6031      	str	r1, [r6, #0]
 801bcd8:	0606      	lsls	r6, r0, #24
 801bcda:	d501      	bpl.n	801bce0 <_printf_i+0xbc>
 801bcdc:	681d      	ldr	r5, [r3, #0]
 801bcde:	e003      	b.n	801bce8 <_printf_i+0xc4>
 801bce0:	0645      	lsls	r5, r0, #25
 801bce2:	d5fb      	bpl.n	801bcdc <_printf_i+0xb8>
 801bce4:	f9b3 5000 	ldrsh.w	r5, [r3]
 801bce8:	2d00      	cmp	r5, #0
 801bcea:	da03      	bge.n	801bcf4 <_printf_i+0xd0>
 801bcec:	232d      	movs	r3, #45	@ 0x2d
 801bcee:	426d      	negs	r5, r5
 801bcf0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801bcf4:	4858      	ldr	r0, [pc, #352]	@ (801be58 <_printf_i+0x234>)
 801bcf6:	230a      	movs	r3, #10
 801bcf8:	e011      	b.n	801bd1e <_printf_i+0xfa>
 801bcfa:	6821      	ldr	r1, [r4, #0]
 801bcfc:	6833      	ldr	r3, [r6, #0]
 801bcfe:	0608      	lsls	r0, r1, #24
 801bd00:	f853 5b04 	ldr.w	r5, [r3], #4
 801bd04:	d402      	bmi.n	801bd0c <_printf_i+0xe8>
 801bd06:	0649      	lsls	r1, r1, #25
 801bd08:	bf48      	it	mi
 801bd0a:	b2ad      	uxthmi	r5, r5
 801bd0c:	2f6f      	cmp	r7, #111	@ 0x6f
 801bd0e:	4852      	ldr	r0, [pc, #328]	@ (801be58 <_printf_i+0x234>)
 801bd10:	6033      	str	r3, [r6, #0]
 801bd12:	bf14      	ite	ne
 801bd14:	230a      	movne	r3, #10
 801bd16:	2308      	moveq	r3, #8
 801bd18:	2100      	movs	r1, #0
 801bd1a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801bd1e:	6866      	ldr	r6, [r4, #4]
 801bd20:	60a6      	str	r6, [r4, #8]
 801bd22:	2e00      	cmp	r6, #0
 801bd24:	db05      	blt.n	801bd32 <_printf_i+0x10e>
 801bd26:	6821      	ldr	r1, [r4, #0]
 801bd28:	432e      	orrs	r6, r5
 801bd2a:	f021 0104 	bic.w	r1, r1, #4
 801bd2e:	6021      	str	r1, [r4, #0]
 801bd30:	d04b      	beq.n	801bdca <_printf_i+0x1a6>
 801bd32:	4616      	mov	r6, r2
 801bd34:	fbb5 f1f3 	udiv	r1, r5, r3
 801bd38:	fb03 5711 	mls	r7, r3, r1, r5
 801bd3c:	5dc7      	ldrb	r7, [r0, r7]
 801bd3e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801bd42:	462f      	mov	r7, r5
 801bd44:	42bb      	cmp	r3, r7
 801bd46:	460d      	mov	r5, r1
 801bd48:	d9f4      	bls.n	801bd34 <_printf_i+0x110>
 801bd4a:	2b08      	cmp	r3, #8
 801bd4c:	d10b      	bne.n	801bd66 <_printf_i+0x142>
 801bd4e:	6823      	ldr	r3, [r4, #0]
 801bd50:	07df      	lsls	r7, r3, #31
 801bd52:	d508      	bpl.n	801bd66 <_printf_i+0x142>
 801bd54:	6923      	ldr	r3, [r4, #16]
 801bd56:	6861      	ldr	r1, [r4, #4]
 801bd58:	4299      	cmp	r1, r3
 801bd5a:	bfde      	ittt	le
 801bd5c:	2330      	movle	r3, #48	@ 0x30
 801bd5e:	f806 3c01 	strble.w	r3, [r6, #-1]
 801bd62:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 801bd66:	1b92      	subs	r2, r2, r6
 801bd68:	6122      	str	r2, [r4, #16]
 801bd6a:	f8cd a000 	str.w	sl, [sp]
 801bd6e:	464b      	mov	r3, r9
 801bd70:	aa03      	add	r2, sp, #12
 801bd72:	4621      	mov	r1, r4
 801bd74:	4640      	mov	r0, r8
 801bd76:	f7ff fee7 	bl	801bb48 <_printf_common>
 801bd7a:	3001      	adds	r0, #1
 801bd7c:	d14a      	bne.n	801be14 <_printf_i+0x1f0>
 801bd7e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801bd82:	b004      	add	sp, #16
 801bd84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bd88:	6823      	ldr	r3, [r4, #0]
 801bd8a:	f043 0320 	orr.w	r3, r3, #32
 801bd8e:	6023      	str	r3, [r4, #0]
 801bd90:	4832      	ldr	r0, [pc, #200]	@ (801be5c <_printf_i+0x238>)
 801bd92:	2778      	movs	r7, #120	@ 0x78
 801bd94:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801bd98:	6823      	ldr	r3, [r4, #0]
 801bd9a:	6831      	ldr	r1, [r6, #0]
 801bd9c:	061f      	lsls	r7, r3, #24
 801bd9e:	f851 5b04 	ldr.w	r5, [r1], #4
 801bda2:	d402      	bmi.n	801bdaa <_printf_i+0x186>
 801bda4:	065f      	lsls	r7, r3, #25
 801bda6:	bf48      	it	mi
 801bda8:	b2ad      	uxthmi	r5, r5
 801bdaa:	6031      	str	r1, [r6, #0]
 801bdac:	07d9      	lsls	r1, r3, #31
 801bdae:	bf44      	itt	mi
 801bdb0:	f043 0320 	orrmi.w	r3, r3, #32
 801bdb4:	6023      	strmi	r3, [r4, #0]
 801bdb6:	b11d      	cbz	r5, 801bdc0 <_printf_i+0x19c>
 801bdb8:	2310      	movs	r3, #16
 801bdba:	e7ad      	b.n	801bd18 <_printf_i+0xf4>
 801bdbc:	4826      	ldr	r0, [pc, #152]	@ (801be58 <_printf_i+0x234>)
 801bdbe:	e7e9      	b.n	801bd94 <_printf_i+0x170>
 801bdc0:	6823      	ldr	r3, [r4, #0]
 801bdc2:	f023 0320 	bic.w	r3, r3, #32
 801bdc6:	6023      	str	r3, [r4, #0]
 801bdc8:	e7f6      	b.n	801bdb8 <_printf_i+0x194>
 801bdca:	4616      	mov	r6, r2
 801bdcc:	e7bd      	b.n	801bd4a <_printf_i+0x126>
 801bdce:	6833      	ldr	r3, [r6, #0]
 801bdd0:	6825      	ldr	r5, [r4, #0]
 801bdd2:	6961      	ldr	r1, [r4, #20]
 801bdd4:	1d18      	adds	r0, r3, #4
 801bdd6:	6030      	str	r0, [r6, #0]
 801bdd8:	062e      	lsls	r6, r5, #24
 801bdda:	681b      	ldr	r3, [r3, #0]
 801bddc:	d501      	bpl.n	801bde2 <_printf_i+0x1be>
 801bdde:	6019      	str	r1, [r3, #0]
 801bde0:	e002      	b.n	801bde8 <_printf_i+0x1c4>
 801bde2:	0668      	lsls	r0, r5, #25
 801bde4:	d5fb      	bpl.n	801bdde <_printf_i+0x1ba>
 801bde6:	8019      	strh	r1, [r3, #0]
 801bde8:	2300      	movs	r3, #0
 801bdea:	6123      	str	r3, [r4, #16]
 801bdec:	4616      	mov	r6, r2
 801bdee:	e7bc      	b.n	801bd6a <_printf_i+0x146>
 801bdf0:	6833      	ldr	r3, [r6, #0]
 801bdf2:	1d1a      	adds	r2, r3, #4
 801bdf4:	6032      	str	r2, [r6, #0]
 801bdf6:	681e      	ldr	r6, [r3, #0]
 801bdf8:	6862      	ldr	r2, [r4, #4]
 801bdfa:	2100      	movs	r1, #0
 801bdfc:	4630      	mov	r0, r6
 801bdfe:	f7e4 fa27 	bl	8000250 <memchr>
 801be02:	b108      	cbz	r0, 801be08 <_printf_i+0x1e4>
 801be04:	1b80      	subs	r0, r0, r6
 801be06:	6060      	str	r0, [r4, #4]
 801be08:	6863      	ldr	r3, [r4, #4]
 801be0a:	6123      	str	r3, [r4, #16]
 801be0c:	2300      	movs	r3, #0
 801be0e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801be12:	e7aa      	b.n	801bd6a <_printf_i+0x146>
 801be14:	6923      	ldr	r3, [r4, #16]
 801be16:	4632      	mov	r2, r6
 801be18:	4649      	mov	r1, r9
 801be1a:	4640      	mov	r0, r8
 801be1c:	47d0      	blx	sl
 801be1e:	3001      	adds	r0, #1
 801be20:	d0ad      	beq.n	801bd7e <_printf_i+0x15a>
 801be22:	6823      	ldr	r3, [r4, #0]
 801be24:	079b      	lsls	r3, r3, #30
 801be26:	d413      	bmi.n	801be50 <_printf_i+0x22c>
 801be28:	68e0      	ldr	r0, [r4, #12]
 801be2a:	9b03      	ldr	r3, [sp, #12]
 801be2c:	4298      	cmp	r0, r3
 801be2e:	bfb8      	it	lt
 801be30:	4618      	movlt	r0, r3
 801be32:	e7a6      	b.n	801bd82 <_printf_i+0x15e>
 801be34:	2301      	movs	r3, #1
 801be36:	4632      	mov	r2, r6
 801be38:	4649      	mov	r1, r9
 801be3a:	4640      	mov	r0, r8
 801be3c:	47d0      	blx	sl
 801be3e:	3001      	adds	r0, #1
 801be40:	d09d      	beq.n	801bd7e <_printf_i+0x15a>
 801be42:	3501      	adds	r5, #1
 801be44:	68e3      	ldr	r3, [r4, #12]
 801be46:	9903      	ldr	r1, [sp, #12]
 801be48:	1a5b      	subs	r3, r3, r1
 801be4a:	42ab      	cmp	r3, r5
 801be4c:	dcf2      	bgt.n	801be34 <_printf_i+0x210>
 801be4e:	e7eb      	b.n	801be28 <_printf_i+0x204>
 801be50:	2500      	movs	r5, #0
 801be52:	f104 0619 	add.w	r6, r4, #25
 801be56:	e7f5      	b.n	801be44 <_printf_i+0x220>
 801be58:	0801ebb0 	.word	0x0801ebb0
 801be5c:	0801ebc1 	.word	0x0801ebc1

0801be60 <__sflush_r>:
 801be60:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801be64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801be68:	0716      	lsls	r6, r2, #28
 801be6a:	4605      	mov	r5, r0
 801be6c:	460c      	mov	r4, r1
 801be6e:	d454      	bmi.n	801bf1a <__sflush_r+0xba>
 801be70:	684b      	ldr	r3, [r1, #4]
 801be72:	2b00      	cmp	r3, #0
 801be74:	dc02      	bgt.n	801be7c <__sflush_r+0x1c>
 801be76:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801be78:	2b00      	cmp	r3, #0
 801be7a:	dd48      	ble.n	801bf0e <__sflush_r+0xae>
 801be7c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801be7e:	2e00      	cmp	r6, #0
 801be80:	d045      	beq.n	801bf0e <__sflush_r+0xae>
 801be82:	2300      	movs	r3, #0
 801be84:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801be88:	682f      	ldr	r7, [r5, #0]
 801be8a:	6a21      	ldr	r1, [r4, #32]
 801be8c:	602b      	str	r3, [r5, #0]
 801be8e:	d030      	beq.n	801bef2 <__sflush_r+0x92>
 801be90:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801be92:	89a3      	ldrh	r3, [r4, #12]
 801be94:	0759      	lsls	r1, r3, #29
 801be96:	d505      	bpl.n	801bea4 <__sflush_r+0x44>
 801be98:	6863      	ldr	r3, [r4, #4]
 801be9a:	1ad2      	subs	r2, r2, r3
 801be9c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801be9e:	b10b      	cbz	r3, 801bea4 <__sflush_r+0x44>
 801bea0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801bea2:	1ad2      	subs	r2, r2, r3
 801bea4:	2300      	movs	r3, #0
 801bea6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801bea8:	6a21      	ldr	r1, [r4, #32]
 801beaa:	4628      	mov	r0, r5
 801beac:	47b0      	blx	r6
 801beae:	1c43      	adds	r3, r0, #1
 801beb0:	89a3      	ldrh	r3, [r4, #12]
 801beb2:	d106      	bne.n	801bec2 <__sflush_r+0x62>
 801beb4:	6829      	ldr	r1, [r5, #0]
 801beb6:	291d      	cmp	r1, #29
 801beb8:	d82b      	bhi.n	801bf12 <__sflush_r+0xb2>
 801beba:	4a2a      	ldr	r2, [pc, #168]	@ (801bf64 <__sflush_r+0x104>)
 801bebc:	40ca      	lsrs	r2, r1
 801bebe:	07d6      	lsls	r6, r2, #31
 801bec0:	d527      	bpl.n	801bf12 <__sflush_r+0xb2>
 801bec2:	2200      	movs	r2, #0
 801bec4:	6062      	str	r2, [r4, #4]
 801bec6:	04d9      	lsls	r1, r3, #19
 801bec8:	6922      	ldr	r2, [r4, #16]
 801beca:	6022      	str	r2, [r4, #0]
 801becc:	d504      	bpl.n	801bed8 <__sflush_r+0x78>
 801bece:	1c42      	adds	r2, r0, #1
 801bed0:	d101      	bne.n	801bed6 <__sflush_r+0x76>
 801bed2:	682b      	ldr	r3, [r5, #0]
 801bed4:	b903      	cbnz	r3, 801bed8 <__sflush_r+0x78>
 801bed6:	6560      	str	r0, [r4, #84]	@ 0x54
 801bed8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801beda:	602f      	str	r7, [r5, #0]
 801bedc:	b1b9      	cbz	r1, 801bf0e <__sflush_r+0xae>
 801bede:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801bee2:	4299      	cmp	r1, r3
 801bee4:	d002      	beq.n	801beec <__sflush_r+0x8c>
 801bee6:	4628      	mov	r0, r5
 801bee8:	f7ff fb42 	bl	801b570 <_free_r>
 801beec:	2300      	movs	r3, #0
 801beee:	6363      	str	r3, [r4, #52]	@ 0x34
 801bef0:	e00d      	b.n	801bf0e <__sflush_r+0xae>
 801bef2:	2301      	movs	r3, #1
 801bef4:	4628      	mov	r0, r5
 801bef6:	47b0      	blx	r6
 801bef8:	4602      	mov	r2, r0
 801befa:	1c50      	adds	r0, r2, #1
 801befc:	d1c9      	bne.n	801be92 <__sflush_r+0x32>
 801befe:	682b      	ldr	r3, [r5, #0]
 801bf00:	2b00      	cmp	r3, #0
 801bf02:	d0c6      	beq.n	801be92 <__sflush_r+0x32>
 801bf04:	2b1d      	cmp	r3, #29
 801bf06:	d001      	beq.n	801bf0c <__sflush_r+0xac>
 801bf08:	2b16      	cmp	r3, #22
 801bf0a:	d11e      	bne.n	801bf4a <__sflush_r+0xea>
 801bf0c:	602f      	str	r7, [r5, #0]
 801bf0e:	2000      	movs	r0, #0
 801bf10:	e022      	b.n	801bf58 <__sflush_r+0xf8>
 801bf12:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801bf16:	b21b      	sxth	r3, r3
 801bf18:	e01b      	b.n	801bf52 <__sflush_r+0xf2>
 801bf1a:	690f      	ldr	r7, [r1, #16]
 801bf1c:	2f00      	cmp	r7, #0
 801bf1e:	d0f6      	beq.n	801bf0e <__sflush_r+0xae>
 801bf20:	0793      	lsls	r3, r2, #30
 801bf22:	680e      	ldr	r6, [r1, #0]
 801bf24:	bf08      	it	eq
 801bf26:	694b      	ldreq	r3, [r1, #20]
 801bf28:	600f      	str	r7, [r1, #0]
 801bf2a:	bf18      	it	ne
 801bf2c:	2300      	movne	r3, #0
 801bf2e:	eba6 0807 	sub.w	r8, r6, r7
 801bf32:	608b      	str	r3, [r1, #8]
 801bf34:	f1b8 0f00 	cmp.w	r8, #0
 801bf38:	dde9      	ble.n	801bf0e <__sflush_r+0xae>
 801bf3a:	6a21      	ldr	r1, [r4, #32]
 801bf3c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801bf3e:	4643      	mov	r3, r8
 801bf40:	463a      	mov	r2, r7
 801bf42:	4628      	mov	r0, r5
 801bf44:	47b0      	blx	r6
 801bf46:	2800      	cmp	r0, #0
 801bf48:	dc08      	bgt.n	801bf5c <__sflush_r+0xfc>
 801bf4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801bf4e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801bf52:	81a3      	strh	r3, [r4, #12]
 801bf54:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801bf58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bf5c:	4407      	add	r7, r0
 801bf5e:	eba8 0800 	sub.w	r8, r8, r0
 801bf62:	e7e7      	b.n	801bf34 <__sflush_r+0xd4>
 801bf64:	20400001 	.word	0x20400001

0801bf68 <_fflush_r>:
 801bf68:	b538      	push	{r3, r4, r5, lr}
 801bf6a:	690b      	ldr	r3, [r1, #16]
 801bf6c:	4605      	mov	r5, r0
 801bf6e:	460c      	mov	r4, r1
 801bf70:	b913      	cbnz	r3, 801bf78 <_fflush_r+0x10>
 801bf72:	2500      	movs	r5, #0
 801bf74:	4628      	mov	r0, r5
 801bf76:	bd38      	pop	{r3, r4, r5, pc}
 801bf78:	b118      	cbz	r0, 801bf82 <_fflush_r+0x1a>
 801bf7a:	6a03      	ldr	r3, [r0, #32]
 801bf7c:	b90b      	cbnz	r3, 801bf82 <_fflush_r+0x1a>
 801bf7e:	f7fe ffdf 	bl	801af40 <__sinit>
 801bf82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801bf86:	2b00      	cmp	r3, #0
 801bf88:	d0f3      	beq.n	801bf72 <_fflush_r+0xa>
 801bf8a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801bf8c:	07d0      	lsls	r0, r2, #31
 801bf8e:	d404      	bmi.n	801bf9a <_fflush_r+0x32>
 801bf90:	0599      	lsls	r1, r3, #22
 801bf92:	d402      	bmi.n	801bf9a <_fflush_r+0x32>
 801bf94:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801bf96:	f7ff faa8 	bl	801b4ea <__retarget_lock_acquire_recursive>
 801bf9a:	4628      	mov	r0, r5
 801bf9c:	4621      	mov	r1, r4
 801bf9e:	f7ff ff5f 	bl	801be60 <__sflush_r>
 801bfa2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801bfa4:	07da      	lsls	r2, r3, #31
 801bfa6:	4605      	mov	r5, r0
 801bfa8:	d4e4      	bmi.n	801bf74 <_fflush_r+0xc>
 801bfaa:	89a3      	ldrh	r3, [r4, #12]
 801bfac:	059b      	lsls	r3, r3, #22
 801bfae:	d4e1      	bmi.n	801bf74 <_fflush_r+0xc>
 801bfb0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801bfb2:	f7ff fa9b 	bl	801b4ec <__retarget_lock_release_recursive>
 801bfb6:	e7dd      	b.n	801bf74 <_fflush_r+0xc>

0801bfb8 <fiprintf>:
 801bfb8:	b40e      	push	{r1, r2, r3}
 801bfba:	b503      	push	{r0, r1, lr}
 801bfbc:	4601      	mov	r1, r0
 801bfbe:	ab03      	add	r3, sp, #12
 801bfc0:	4805      	ldr	r0, [pc, #20]	@ (801bfd8 <fiprintf+0x20>)
 801bfc2:	f853 2b04 	ldr.w	r2, [r3], #4
 801bfc6:	6800      	ldr	r0, [r0, #0]
 801bfc8:	9301      	str	r3, [sp, #4]
 801bfca:	f7ff fca5 	bl	801b918 <_vfiprintf_r>
 801bfce:	b002      	add	sp, #8
 801bfd0:	f85d eb04 	ldr.w	lr, [sp], #4
 801bfd4:	b003      	add	sp, #12
 801bfd6:	4770      	bx	lr
 801bfd8:	20000438 	.word	0x20000438

0801bfdc <__swhatbuf_r>:
 801bfdc:	b570      	push	{r4, r5, r6, lr}
 801bfde:	460c      	mov	r4, r1
 801bfe0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801bfe4:	2900      	cmp	r1, #0
 801bfe6:	b096      	sub	sp, #88	@ 0x58
 801bfe8:	4615      	mov	r5, r2
 801bfea:	461e      	mov	r6, r3
 801bfec:	da0d      	bge.n	801c00a <__swhatbuf_r+0x2e>
 801bfee:	89a3      	ldrh	r3, [r4, #12]
 801bff0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801bff4:	f04f 0100 	mov.w	r1, #0
 801bff8:	bf14      	ite	ne
 801bffa:	2340      	movne	r3, #64	@ 0x40
 801bffc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801c000:	2000      	movs	r0, #0
 801c002:	6031      	str	r1, [r6, #0]
 801c004:	602b      	str	r3, [r5, #0]
 801c006:	b016      	add	sp, #88	@ 0x58
 801c008:	bd70      	pop	{r4, r5, r6, pc}
 801c00a:	466a      	mov	r2, sp
 801c00c:	f000 f848 	bl	801c0a0 <_fstat_r>
 801c010:	2800      	cmp	r0, #0
 801c012:	dbec      	blt.n	801bfee <__swhatbuf_r+0x12>
 801c014:	9901      	ldr	r1, [sp, #4]
 801c016:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801c01a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801c01e:	4259      	negs	r1, r3
 801c020:	4159      	adcs	r1, r3
 801c022:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801c026:	e7eb      	b.n	801c000 <__swhatbuf_r+0x24>

0801c028 <__smakebuf_r>:
 801c028:	898b      	ldrh	r3, [r1, #12]
 801c02a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801c02c:	079d      	lsls	r5, r3, #30
 801c02e:	4606      	mov	r6, r0
 801c030:	460c      	mov	r4, r1
 801c032:	d507      	bpl.n	801c044 <__smakebuf_r+0x1c>
 801c034:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801c038:	6023      	str	r3, [r4, #0]
 801c03a:	6123      	str	r3, [r4, #16]
 801c03c:	2301      	movs	r3, #1
 801c03e:	6163      	str	r3, [r4, #20]
 801c040:	b003      	add	sp, #12
 801c042:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c044:	ab01      	add	r3, sp, #4
 801c046:	466a      	mov	r2, sp
 801c048:	f7ff ffc8 	bl	801bfdc <__swhatbuf_r>
 801c04c:	9f00      	ldr	r7, [sp, #0]
 801c04e:	4605      	mov	r5, r0
 801c050:	4639      	mov	r1, r7
 801c052:	4630      	mov	r0, r6
 801c054:	f7fe fd42 	bl	801aadc <_malloc_r>
 801c058:	b948      	cbnz	r0, 801c06e <__smakebuf_r+0x46>
 801c05a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c05e:	059a      	lsls	r2, r3, #22
 801c060:	d4ee      	bmi.n	801c040 <__smakebuf_r+0x18>
 801c062:	f023 0303 	bic.w	r3, r3, #3
 801c066:	f043 0302 	orr.w	r3, r3, #2
 801c06a:	81a3      	strh	r3, [r4, #12]
 801c06c:	e7e2      	b.n	801c034 <__smakebuf_r+0xc>
 801c06e:	89a3      	ldrh	r3, [r4, #12]
 801c070:	6020      	str	r0, [r4, #0]
 801c072:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801c076:	81a3      	strh	r3, [r4, #12]
 801c078:	9b01      	ldr	r3, [sp, #4]
 801c07a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801c07e:	b15b      	cbz	r3, 801c098 <__smakebuf_r+0x70>
 801c080:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801c084:	4630      	mov	r0, r6
 801c086:	f000 f81d 	bl	801c0c4 <_isatty_r>
 801c08a:	b128      	cbz	r0, 801c098 <__smakebuf_r+0x70>
 801c08c:	89a3      	ldrh	r3, [r4, #12]
 801c08e:	f023 0303 	bic.w	r3, r3, #3
 801c092:	f043 0301 	orr.w	r3, r3, #1
 801c096:	81a3      	strh	r3, [r4, #12]
 801c098:	89a3      	ldrh	r3, [r4, #12]
 801c09a:	431d      	orrs	r5, r3
 801c09c:	81a5      	strh	r5, [r4, #12]
 801c09e:	e7cf      	b.n	801c040 <__smakebuf_r+0x18>

0801c0a0 <_fstat_r>:
 801c0a0:	b538      	push	{r3, r4, r5, lr}
 801c0a2:	4d07      	ldr	r5, [pc, #28]	@ (801c0c0 <_fstat_r+0x20>)
 801c0a4:	2300      	movs	r3, #0
 801c0a6:	4604      	mov	r4, r0
 801c0a8:	4608      	mov	r0, r1
 801c0aa:	4611      	mov	r1, r2
 801c0ac:	602b      	str	r3, [r5, #0]
 801c0ae:	f7e7 fe0f 	bl	8003cd0 <_fstat>
 801c0b2:	1c43      	adds	r3, r0, #1
 801c0b4:	d102      	bne.n	801c0bc <_fstat_r+0x1c>
 801c0b6:	682b      	ldr	r3, [r5, #0]
 801c0b8:	b103      	cbz	r3, 801c0bc <_fstat_r+0x1c>
 801c0ba:	6023      	str	r3, [r4, #0]
 801c0bc:	bd38      	pop	{r3, r4, r5, pc}
 801c0be:	bf00      	nop
 801c0c0:	2000b7f4 	.word	0x2000b7f4

0801c0c4 <_isatty_r>:
 801c0c4:	b538      	push	{r3, r4, r5, lr}
 801c0c6:	4d06      	ldr	r5, [pc, #24]	@ (801c0e0 <_isatty_r+0x1c>)
 801c0c8:	2300      	movs	r3, #0
 801c0ca:	4604      	mov	r4, r0
 801c0cc:	4608      	mov	r0, r1
 801c0ce:	602b      	str	r3, [r5, #0]
 801c0d0:	f7e7 fe0e 	bl	8003cf0 <_isatty>
 801c0d4:	1c43      	adds	r3, r0, #1
 801c0d6:	d102      	bne.n	801c0de <_isatty_r+0x1a>
 801c0d8:	682b      	ldr	r3, [r5, #0]
 801c0da:	b103      	cbz	r3, 801c0de <_isatty_r+0x1a>
 801c0dc:	6023      	str	r3, [r4, #0]
 801c0de:	bd38      	pop	{r3, r4, r5, pc}
 801c0e0:	2000b7f4 	.word	0x2000b7f4

0801c0e4 <abort>:
 801c0e4:	b508      	push	{r3, lr}
 801c0e6:	2006      	movs	r0, #6
 801c0e8:	f000 f82c 	bl	801c144 <raise>
 801c0ec:	2001      	movs	r0, #1
 801c0ee:	f7e7 fd9f 	bl	8003c30 <_exit>

0801c0f2 <_raise_r>:
 801c0f2:	291f      	cmp	r1, #31
 801c0f4:	b538      	push	{r3, r4, r5, lr}
 801c0f6:	4605      	mov	r5, r0
 801c0f8:	460c      	mov	r4, r1
 801c0fa:	d904      	bls.n	801c106 <_raise_r+0x14>
 801c0fc:	2316      	movs	r3, #22
 801c0fe:	6003      	str	r3, [r0, #0]
 801c100:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801c104:	bd38      	pop	{r3, r4, r5, pc}
 801c106:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801c108:	b112      	cbz	r2, 801c110 <_raise_r+0x1e>
 801c10a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801c10e:	b94b      	cbnz	r3, 801c124 <_raise_r+0x32>
 801c110:	4628      	mov	r0, r5
 801c112:	f000 f831 	bl	801c178 <_getpid_r>
 801c116:	4622      	mov	r2, r4
 801c118:	4601      	mov	r1, r0
 801c11a:	4628      	mov	r0, r5
 801c11c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801c120:	f000 b818 	b.w	801c154 <_kill_r>
 801c124:	2b01      	cmp	r3, #1
 801c126:	d00a      	beq.n	801c13e <_raise_r+0x4c>
 801c128:	1c59      	adds	r1, r3, #1
 801c12a:	d103      	bne.n	801c134 <_raise_r+0x42>
 801c12c:	2316      	movs	r3, #22
 801c12e:	6003      	str	r3, [r0, #0]
 801c130:	2001      	movs	r0, #1
 801c132:	e7e7      	b.n	801c104 <_raise_r+0x12>
 801c134:	2100      	movs	r1, #0
 801c136:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801c13a:	4620      	mov	r0, r4
 801c13c:	4798      	blx	r3
 801c13e:	2000      	movs	r0, #0
 801c140:	e7e0      	b.n	801c104 <_raise_r+0x12>
	...

0801c144 <raise>:
 801c144:	4b02      	ldr	r3, [pc, #8]	@ (801c150 <raise+0xc>)
 801c146:	4601      	mov	r1, r0
 801c148:	6818      	ldr	r0, [r3, #0]
 801c14a:	f7ff bfd2 	b.w	801c0f2 <_raise_r>
 801c14e:	bf00      	nop
 801c150:	20000438 	.word	0x20000438

0801c154 <_kill_r>:
 801c154:	b538      	push	{r3, r4, r5, lr}
 801c156:	4d07      	ldr	r5, [pc, #28]	@ (801c174 <_kill_r+0x20>)
 801c158:	2300      	movs	r3, #0
 801c15a:	4604      	mov	r4, r0
 801c15c:	4608      	mov	r0, r1
 801c15e:	4611      	mov	r1, r2
 801c160:	602b      	str	r3, [r5, #0]
 801c162:	f7e7 fd55 	bl	8003c10 <_kill>
 801c166:	1c43      	adds	r3, r0, #1
 801c168:	d102      	bne.n	801c170 <_kill_r+0x1c>
 801c16a:	682b      	ldr	r3, [r5, #0]
 801c16c:	b103      	cbz	r3, 801c170 <_kill_r+0x1c>
 801c16e:	6023      	str	r3, [r4, #0]
 801c170:	bd38      	pop	{r3, r4, r5, pc}
 801c172:	bf00      	nop
 801c174:	2000b7f4 	.word	0x2000b7f4

0801c178 <_getpid_r>:
 801c178:	f7e7 bd42 	b.w	8003c00 <_getpid>

0801c17c <fmodf>:
 801c17c:	b508      	push	{r3, lr}
 801c17e:	ed2d 8b02 	vpush	{d8}
 801c182:	eef0 8a40 	vmov.f32	s17, s0
 801c186:	eeb0 8a60 	vmov.f32	s16, s1
 801c18a:	f000 f9cd 	bl	801c528 <__ieee754_fmodf>
 801c18e:	eef4 8a48 	vcmp.f32	s17, s16
 801c192:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c196:	d60c      	bvs.n	801c1b2 <fmodf+0x36>
 801c198:	eddf 8a07 	vldr	s17, [pc, #28]	@ 801c1b8 <fmodf+0x3c>
 801c19c:	eeb4 8a68 	vcmp.f32	s16, s17
 801c1a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c1a4:	d105      	bne.n	801c1b2 <fmodf+0x36>
 801c1a6:	f7ff f975 	bl	801b494 <__errno>
 801c1aa:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 801c1ae:	2321      	movs	r3, #33	@ 0x21
 801c1b0:	6003      	str	r3, [r0, #0]
 801c1b2:	ecbd 8b02 	vpop	{d8}
 801c1b6:	bd08      	pop	{r3, pc}
 801c1b8:	00000000 	.word	0x00000000

0801c1bc <powf>:
 801c1bc:	b508      	push	{r3, lr}
 801c1be:	ed2d 8b04 	vpush	{d8-d9}
 801c1c2:	eeb0 8a60 	vmov.f32	s16, s1
 801c1c6:	eeb0 9a40 	vmov.f32	s18, s0
 801c1ca:	f000 fa2f 	bl	801c62c <__ieee754_powf>
 801c1ce:	eeb4 8a48 	vcmp.f32	s16, s16
 801c1d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c1d6:	eef0 8a40 	vmov.f32	s17, s0
 801c1da:	d63e      	bvs.n	801c25a <powf+0x9e>
 801c1dc:	eeb5 9a40 	vcmp.f32	s18, #0.0
 801c1e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c1e4:	d112      	bne.n	801c20c <powf+0x50>
 801c1e6:	eeb5 8a40 	vcmp.f32	s16, #0.0
 801c1ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c1ee:	d039      	beq.n	801c264 <powf+0xa8>
 801c1f0:	eeb0 0a48 	vmov.f32	s0, s16
 801c1f4:	f000 f8c4 	bl	801c380 <finitef>
 801c1f8:	b378      	cbz	r0, 801c25a <powf+0x9e>
 801c1fa:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 801c1fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c202:	d52a      	bpl.n	801c25a <powf+0x9e>
 801c204:	f7ff f946 	bl	801b494 <__errno>
 801c208:	2322      	movs	r3, #34	@ 0x22
 801c20a:	e014      	b.n	801c236 <powf+0x7a>
 801c20c:	f000 f8b8 	bl	801c380 <finitef>
 801c210:	b998      	cbnz	r0, 801c23a <powf+0x7e>
 801c212:	eeb0 0a49 	vmov.f32	s0, s18
 801c216:	f000 f8b3 	bl	801c380 <finitef>
 801c21a:	b170      	cbz	r0, 801c23a <powf+0x7e>
 801c21c:	eeb0 0a48 	vmov.f32	s0, s16
 801c220:	f000 f8ae 	bl	801c380 <finitef>
 801c224:	b148      	cbz	r0, 801c23a <powf+0x7e>
 801c226:	eef4 8a68 	vcmp.f32	s17, s17
 801c22a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c22e:	d7e9      	bvc.n	801c204 <powf+0x48>
 801c230:	f7ff f930 	bl	801b494 <__errno>
 801c234:	2321      	movs	r3, #33	@ 0x21
 801c236:	6003      	str	r3, [r0, #0]
 801c238:	e00f      	b.n	801c25a <powf+0x9e>
 801c23a:	eef5 8a40 	vcmp.f32	s17, #0.0
 801c23e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c242:	d10a      	bne.n	801c25a <powf+0x9e>
 801c244:	eeb0 0a49 	vmov.f32	s0, s18
 801c248:	f000 f89a 	bl	801c380 <finitef>
 801c24c:	b128      	cbz	r0, 801c25a <powf+0x9e>
 801c24e:	eeb0 0a48 	vmov.f32	s0, s16
 801c252:	f000 f895 	bl	801c380 <finitef>
 801c256:	2800      	cmp	r0, #0
 801c258:	d1d4      	bne.n	801c204 <powf+0x48>
 801c25a:	eeb0 0a68 	vmov.f32	s0, s17
 801c25e:	ecbd 8b04 	vpop	{d8-d9}
 801c262:	bd08      	pop	{r3, pc}
 801c264:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 801c268:	e7f7      	b.n	801c25a <powf+0x9e>
	...

0801c26c <cosf>:
 801c26c:	ee10 3a10 	vmov	r3, s0
 801c270:	b507      	push	{r0, r1, r2, lr}
 801c272:	4a1e      	ldr	r2, [pc, #120]	@ (801c2ec <cosf+0x80>)
 801c274:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801c278:	4293      	cmp	r3, r2
 801c27a:	d806      	bhi.n	801c28a <cosf+0x1e>
 801c27c:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 801c2f0 <cosf+0x84>
 801c280:	b003      	add	sp, #12
 801c282:	f85d eb04 	ldr.w	lr, [sp], #4
 801c286:	f000 b8af 	b.w	801c3e8 <__kernel_cosf>
 801c28a:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 801c28e:	d304      	bcc.n	801c29a <cosf+0x2e>
 801c290:	ee30 0a40 	vsub.f32	s0, s0, s0
 801c294:	b003      	add	sp, #12
 801c296:	f85d fb04 	ldr.w	pc, [sp], #4
 801c29a:	4668      	mov	r0, sp
 801c29c:	f000 fc94 	bl	801cbc8 <__ieee754_rem_pio2f>
 801c2a0:	f000 0003 	and.w	r0, r0, #3
 801c2a4:	2801      	cmp	r0, #1
 801c2a6:	d009      	beq.n	801c2bc <cosf+0x50>
 801c2a8:	2802      	cmp	r0, #2
 801c2aa:	d010      	beq.n	801c2ce <cosf+0x62>
 801c2ac:	b9b0      	cbnz	r0, 801c2dc <cosf+0x70>
 801c2ae:	eddd 0a01 	vldr	s1, [sp, #4]
 801c2b2:	ed9d 0a00 	vldr	s0, [sp]
 801c2b6:	f000 f897 	bl	801c3e8 <__kernel_cosf>
 801c2ba:	e7eb      	b.n	801c294 <cosf+0x28>
 801c2bc:	eddd 0a01 	vldr	s1, [sp, #4]
 801c2c0:	ed9d 0a00 	vldr	s0, [sp]
 801c2c4:	f000 f8e8 	bl	801c498 <__kernel_sinf>
 801c2c8:	eeb1 0a40 	vneg.f32	s0, s0
 801c2cc:	e7e2      	b.n	801c294 <cosf+0x28>
 801c2ce:	eddd 0a01 	vldr	s1, [sp, #4]
 801c2d2:	ed9d 0a00 	vldr	s0, [sp]
 801c2d6:	f000 f887 	bl	801c3e8 <__kernel_cosf>
 801c2da:	e7f5      	b.n	801c2c8 <cosf+0x5c>
 801c2dc:	eddd 0a01 	vldr	s1, [sp, #4]
 801c2e0:	ed9d 0a00 	vldr	s0, [sp]
 801c2e4:	2001      	movs	r0, #1
 801c2e6:	f000 f8d7 	bl	801c498 <__kernel_sinf>
 801c2ea:	e7d3      	b.n	801c294 <cosf+0x28>
 801c2ec:	3f490fd8 	.word	0x3f490fd8
 801c2f0:	00000000 	.word	0x00000000

0801c2f4 <sinf>:
 801c2f4:	ee10 3a10 	vmov	r3, s0
 801c2f8:	b507      	push	{r0, r1, r2, lr}
 801c2fa:	4a1f      	ldr	r2, [pc, #124]	@ (801c378 <sinf+0x84>)
 801c2fc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801c300:	4293      	cmp	r3, r2
 801c302:	d807      	bhi.n	801c314 <sinf+0x20>
 801c304:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 801c37c <sinf+0x88>
 801c308:	2000      	movs	r0, #0
 801c30a:	b003      	add	sp, #12
 801c30c:	f85d eb04 	ldr.w	lr, [sp], #4
 801c310:	f000 b8c2 	b.w	801c498 <__kernel_sinf>
 801c314:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 801c318:	d304      	bcc.n	801c324 <sinf+0x30>
 801c31a:	ee30 0a40 	vsub.f32	s0, s0, s0
 801c31e:	b003      	add	sp, #12
 801c320:	f85d fb04 	ldr.w	pc, [sp], #4
 801c324:	4668      	mov	r0, sp
 801c326:	f000 fc4f 	bl	801cbc8 <__ieee754_rem_pio2f>
 801c32a:	f000 0003 	and.w	r0, r0, #3
 801c32e:	2801      	cmp	r0, #1
 801c330:	d00a      	beq.n	801c348 <sinf+0x54>
 801c332:	2802      	cmp	r0, #2
 801c334:	d00f      	beq.n	801c356 <sinf+0x62>
 801c336:	b9c0      	cbnz	r0, 801c36a <sinf+0x76>
 801c338:	eddd 0a01 	vldr	s1, [sp, #4]
 801c33c:	ed9d 0a00 	vldr	s0, [sp]
 801c340:	2001      	movs	r0, #1
 801c342:	f000 f8a9 	bl	801c498 <__kernel_sinf>
 801c346:	e7ea      	b.n	801c31e <sinf+0x2a>
 801c348:	eddd 0a01 	vldr	s1, [sp, #4]
 801c34c:	ed9d 0a00 	vldr	s0, [sp]
 801c350:	f000 f84a 	bl	801c3e8 <__kernel_cosf>
 801c354:	e7e3      	b.n	801c31e <sinf+0x2a>
 801c356:	eddd 0a01 	vldr	s1, [sp, #4]
 801c35a:	ed9d 0a00 	vldr	s0, [sp]
 801c35e:	2001      	movs	r0, #1
 801c360:	f000 f89a 	bl	801c498 <__kernel_sinf>
 801c364:	eeb1 0a40 	vneg.f32	s0, s0
 801c368:	e7d9      	b.n	801c31e <sinf+0x2a>
 801c36a:	eddd 0a01 	vldr	s1, [sp, #4]
 801c36e:	ed9d 0a00 	vldr	s0, [sp]
 801c372:	f000 f839 	bl	801c3e8 <__kernel_cosf>
 801c376:	e7f5      	b.n	801c364 <sinf+0x70>
 801c378:	3f490fd8 	.word	0x3f490fd8
 801c37c:	00000000 	.word	0x00000000

0801c380 <finitef>:
 801c380:	ee10 3a10 	vmov	r3, s0
 801c384:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 801c388:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 801c38c:	bfac      	ite	ge
 801c38e:	2000      	movge	r0, #0
 801c390:	2001      	movlt	r0, #1
 801c392:	4770      	bx	lr

0801c394 <with_errnof>:
 801c394:	b510      	push	{r4, lr}
 801c396:	ed2d 8b02 	vpush	{d8}
 801c39a:	eeb0 8a40 	vmov.f32	s16, s0
 801c39e:	4604      	mov	r4, r0
 801c3a0:	f7ff f878 	bl	801b494 <__errno>
 801c3a4:	eeb0 0a48 	vmov.f32	s0, s16
 801c3a8:	ecbd 8b02 	vpop	{d8}
 801c3ac:	6004      	str	r4, [r0, #0]
 801c3ae:	bd10      	pop	{r4, pc}

0801c3b0 <xflowf>:
 801c3b0:	b130      	cbz	r0, 801c3c0 <xflowf+0x10>
 801c3b2:	eef1 7a40 	vneg.f32	s15, s0
 801c3b6:	ee27 0a80 	vmul.f32	s0, s15, s0
 801c3ba:	2022      	movs	r0, #34	@ 0x22
 801c3bc:	f7ff bfea 	b.w	801c394 <with_errnof>
 801c3c0:	eef0 7a40 	vmov.f32	s15, s0
 801c3c4:	e7f7      	b.n	801c3b6 <xflowf+0x6>
	...

0801c3c8 <__math_uflowf>:
 801c3c8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 801c3d0 <__math_uflowf+0x8>
 801c3cc:	f7ff bff0 	b.w	801c3b0 <xflowf>
 801c3d0:	10000000 	.word	0x10000000

0801c3d4 <__math_oflowf>:
 801c3d4:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 801c3dc <__math_oflowf+0x8>
 801c3d8:	f7ff bfea 	b.w	801c3b0 <xflowf>
 801c3dc:	70000000 	.word	0x70000000

0801c3e0 <__ieee754_sqrtf>:
 801c3e0:	eeb1 0ac0 	vsqrt.f32	s0, s0
 801c3e4:	4770      	bx	lr
	...

0801c3e8 <__kernel_cosf>:
 801c3e8:	ee10 3a10 	vmov	r3, s0
 801c3ec:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801c3f0:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 801c3f4:	eef0 6a40 	vmov.f32	s13, s0
 801c3f8:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 801c3fc:	d204      	bcs.n	801c408 <__kernel_cosf+0x20>
 801c3fe:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 801c402:	ee17 2a90 	vmov	r2, s15
 801c406:	b342      	cbz	r2, 801c45a <__kernel_cosf+0x72>
 801c408:	ee26 7aa6 	vmul.f32	s14, s13, s13
 801c40c:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 801c478 <__kernel_cosf+0x90>
 801c410:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 801c47c <__kernel_cosf+0x94>
 801c414:	4a1a      	ldr	r2, [pc, #104]	@ (801c480 <__kernel_cosf+0x98>)
 801c416:	eea7 6a27 	vfma.f32	s12, s14, s15
 801c41a:	4293      	cmp	r3, r2
 801c41c:	eddf 7a19 	vldr	s15, [pc, #100]	@ 801c484 <__kernel_cosf+0x9c>
 801c420:	eee6 7a07 	vfma.f32	s15, s12, s14
 801c424:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 801c488 <__kernel_cosf+0xa0>
 801c428:	eea7 6a87 	vfma.f32	s12, s15, s14
 801c42c:	eddf 7a17 	vldr	s15, [pc, #92]	@ 801c48c <__kernel_cosf+0xa4>
 801c430:	eee6 7a07 	vfma.f32	s15, s12, s14
 801c434:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 801c490 <__kernel_cosf+0xa8>
 801c438:	eea7 6a87 	vfma.f32	s12, s15, s14
 801c43c:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 801c440:	ee26 6a07 	vmul.f32	s12, s12, s14
 801c444:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 801c448:	eee7 0a06 	vfma.f32	s1, s14, s12
 801c44c:	ee67 7a27 	vmul.f32	s15, s14, s15
 801c450:	d804      	bhi.n	801c45c <__kernel_cosf+0x74>
 801c452:	ee77 7ae0 	vsub.f32	s15, s15, s1
 801c456:	ee30 0a67 	vsub.f32	s0, s0, s15
 801c45a:	4770      	bx	lr
 801c45c:	4a0d      	ldr	r2, [pc, #52]	@ (801c494 <__kernel_cosf+0xac>)
 801c45e:	4293      	cmp	r3, r2
 801c460:	bf9a      	itte	ls
 801c462:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 801c466:	ee07 3a10 	vmovls	s14, r3
 801c46a:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 801c46e:	ee30 0a47 	vsub.f32	s0, s0, s14
 801c472:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801c476:	e7ec      	b.n	801c452 <__kernel_cosf+0x6a>
 801c478:	ad47d74e 	.word	0xad47d74e
 801c47c:	310f74f6 	.word	0x310f74f6
 801c480:	3e999999 	.word	0x3e999999
 801c484:	b493f27c 	.word	0xb493f27c
 801c488:	37d00d01 	.word	0x37d00d01
 801c48c:	bab60b61 	.word	0xbab60b61
 801c490:	3d2aaaab 	.word	0x3d2aaaab
 801c494:	3f480000 	.word	0x3f480000

0801c498 <__kernel_sinf>:
 801c498:	ee10 3a10 	vmov	r3, s0
 801c49c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801c4a0:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 801c4a4:	d204      	bcs.n	801c4b0 <__kernel_sinf+0x18>
 801c4a6:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801c4aa:	ee17 3a90 	vmov	r3, s15
 801c4ae:	b35b      	cbz	r3, 801c508 <__kernel_sinf+0x70>
 801c4b0:	ee20 7a00 	vmul.f32	s14, s0, s0
 801c4b4:	eddf 7a15 	vldr	s15, [pc, #84]	@ 801c50c <__kernel_sinf+0x74>
 801c4b8:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 801c510 <__kernel_sinf+0x78>
 801c4bc:	eea7 6a27 	vfma.f32	s12, s14, s15
 801c4c0:	eddf 7a14 	vldr	s15, [pc, #80]	@ 801c514 <__kernel_sinf+0x7c>
 801c4c4:	eee6 7a07 	vfma.f32	s15, s12, s14
 801c4c8:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 801c518 <__kernel_sinf+0x80>
 801c4cc:	eea7 6a87 	vfma.f32	s12, s15, s14
 801c4d0:	eddf 7a12 	vldr	s15, [pc, #72]	@ 801c51c <__kernel_sinf+0x84>
 801c4d4:	ee60 6a07 	vmul.f32	s13, s0, s14
 801c4d8:	eee6 7a07 	vfma.f32	s15, s12, s14
 801c4dc:	b930      	cbnz	r0, 801c4ec <__kernel_sinf+0x54>
 801c4de:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 801c520 <__kernel_sinf+0x88>
 801c4e2:	eea7 6a27 	vfma.f32	s12, s14, s15
 801c4e6:	eea6 0a26 	vfma.f32	s0, s12, s13
 801c4ea:	4770      	bx	lr
 801c4ec:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 801c4f0:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 801c4f4:	eee0 7a86 	vfma.f32	s15, s1, s12
 801c4f8:	eed7 0a87 	vfnms.f32	s1, s15, s14
 801c4fc:	eddf 7a09 	vldr	s15, [pc, #36]	@ 801c524 <__kernel_sinf+0x8c>
 801c500:	eee6 0aa7 	vfma.f32	s1, s13, s15
 801c504:	ee30 0a60 	vsub.f32	s0, s0, s1
 801c508:	4770      	bx	lr
 801c50a:	bf00      	nop
 801c50c:	2f2ec9d3 	.word	0x2f2ec9d3
 801c510:	b2d72f34 	.word	0xb2d72f34
 801c514:	3638ef1b 	.word	0x3638ef1b
 801c518:	b9500d01 	.word	0xb9500d01
 801c51c:	3c088889 	.word	0x3c088889
 801c520:	be2aaaab 	.word	0xbe2aaaab
 801c524:	3e2aaaab 	.word	0x3e2aaaab

0801c528 <__ieee754_fmodf>:
 801c528:	b570      	push	{r4, r5, r6, lr}
 801c52a:	ee10 6a90 	vmov	r6, s1
 801c52e:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 801c532:	1e5a      	subs	r2, r3, #1
 801c534:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 801c538:	d206      	bcs.n	801c548 <__ieee754_fmodf+0x20>
 801c53a:	ee10 4a10 	vmov	r4, s0
 801c53e:	f024 4100 	bic.w	r1, r4, #2147483648	@ 0x80000000
 801c542:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 801c546:	d304      	bcc.n	801c552 <__ieee754_fmodf+0x2a>
 801c548:	ee60 0a20 	vmul.f32	s1, s0, s1
 801c54c:	ee80 0aa0 	vdiv.f32	s0, s1, s1
 801c550:	bd70      	pop	{r4, r5, r6, pc}
 801c552:	4299      	cmp	r1, r3
 801c554:	dbfc      	blt.n	801c550 <__ieee754_fmodf+0x28>
 801c556:	f004 4500 	and.w	r5, r4, #2147483648	@ 0x80000000
 801c55a:	d105      	bne.n	801c568 <__ieee754_fmodf+0x40>
 801c55c:	4b32      	ldr	r3, [pc, #200]	@ (801c628 <__ieee754_fmodf+0x100>)
 801c55e:	eb03 7355 	add.w	r3, r3, r5, lsr #29
 801c562:	ed93 0a00 	vldr	s0, [r3]
 801c566:	e7f3      	b.n	801c550 <__ieee754_fmodf+0x28>
 801c568:	f014 4fff 	tst.w	r4, #2139095040	@ 0x7f800000
 801c56c:	d146      	bne.n	801c5fc <__ieee754_fmodf+0xd4>
 801c56e:	020a      	lsls	r2, r1, #8
 801c570:	f06f 007d 	mvn.w	r0, #125	@ 0x7d
 801c574:	2a00      	cmp	r2, #0
 801c576:	dc3e      	bgt.n	801c5f6 <__ieee754_fmodf+0xce>
 801c578:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 801c57c:	bf01      	itttt	eq
 801c57e:	021a      	lsleq	r2, r3, #8
 801c580:	fab2 f282 	clzeq	r2, r2
 801c584:	f1c2 22ff 	rsbeq	r2, r2, #4278255360	@ 0xff00ff00
 801c588:	f502 027f 	addeq.w	r2, r2, #16711680	@ 0xff0000
 801c58c:	bf16      	itet	ne
 801c58e:	15da      	asrne	r2, r3, #23
 801c590:	3282      	addeq	r2, #130	@ 0x82
 801c592:	3a7f      	subne	r2, #127	@ 0x7f
 801c594:	f110 0f7e 	cmn.w	r0, #126	@ 0x7e
 801c598:	bfbb      	ittet	lt
 801c59a:	f06f 047d 	mvnlt.w	r4, #125	@ 0x7d
 801c59e:	1a24      	sublt	r4, r4, r0
 801c5a0:	f3c4 0416 	ubfxge	r4, r4, #0, #23
 801c5a4:	40a1      	lsllt	r1, r4
 801c5a6:	bfa8      	it	ge
 801c5a8:	f444 0100 	orrge.w	r1, r4, #8388608	@ 0x800000
 801c5ac:	f112 0f7e 	cmn.w	r2, #126	@ 0x7e
 801c5b0:	bfb5      	itete	lt
 801c5b2:	f06f 047d 	mvnlt.w	r4, #125	@ 0x7d
 801c5b6:	f3c6 0616 	ubfxge	r6, r6, #0, #23
 801c5ba:	1aa4      	sublt	r4, r4, r2
 801c5bc:	f446 0400 	orrge.w	r4, r6, #8388608	@ 0x800000
 801c5c0:	bfb8      	it	lt
 801c5c2:	fa03 f404 	lsllt.w	r4, r3, r4
 801c5c6:	1a80      	subs	r0, r0, r2
 801c5c8:	1b0b      	subs	r3, r1, r4
 801c5ca:	b9d0      	cbnz	r0, 801c602 <__ieee754_fmodf+0xda>
 801c5cc:	ea33 0323 	bics.w	r3, r3, r3, asr #32
 801c5d0:	bf28      	it	cs
 801c5d2:	460b      	movcs	r3, r1
 801c5d4:	2b00      	cmp	r3, #0
 801c5d6:	d0c1      	beq.n	801c55c <__ieee754_fmodf+0x34>
 801c5d8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 801c5dc:	db19      	blt.n	801c612 <__ieee754_fmodf+0xea>
 801c5de:	f112 0f7e 	cmn.w	r2, #126	@ 0x7e
 801c5e2:	db19      	blt.n	801c618 <__ieee754_fmodf+0xf0>
 801c5e4:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 801c5e8:	327f      	adds	r2, #127	@ 0x7f
 801c5ea:	432b      	orrs	r3, r5
 801c5ec:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 801c5f0:	ee00 3a10 	vmov	s0, r3
 801c5f4:	e7ac      	b.n	801c550 <__ieee754_fmodf+0x28>
 801c5f6:	3801      	subs	r0, #1
 801c5f8:	0052      	lsls	r2, r2, #1
 801c5fa:	e7bb      	b.n	801c574 <__ieee754_fmodf+0x4c>
 801c5fc:	15c8      	asrs	r0, r1, #23
 801c5fe:	387f      	subs	r0, #127	@ 0x7f
 801c600:	e7ba      	b.n	801c578 <__ieee754_fmodf+0x50>
 801c602:	2b00      	cmp	r3, #0
 801c604:	da02      	bge.n	801c60c <__ieee754_fmodf+0xe4>
 801c606:	0049      	lsls	r1, r1, #1
 801c608:	3801      	subs	r0, #1
 801c60a:	e7dd      	b.n	801c5c8 <__ieee754_fmodf+0xa0>
 801c60c:	d0a6      	beq.n	801c55c <__ieee754_fmodf+0x34>
 801c60e:	0059      	lsls	r1, r3, #1
 801c610:	e7fa      	b.n	801c608 <__ieee754_fmodf+0xe0>
 801c612:	005b      	lsls	r3, r3, #1
 801c614:	3a01      	subs	r2, #1
 801c616:	e7df      	b.n	801c5d8 <__ieee754_fmodf+0xb0>
 801c618:	f1c2 22ff 	rsb	r2, r2, #4278255360	@ 0xff00ff00
 801c61c:	f502 027f 	add.w	r2, r2, #16711680	@ 0xff0000
 801c620:	3282      	adds	r2, #130	@ 0x82
 801c622:	4113      	asrs	r3, r2
 801c624:	432b      	orrs	r3, r5
 801c626:	e7e3      	b.n	801c5f0 <__ieee754_fmodf+0xc8>
 801c628:	0801ecd4 	.word	0x0801ecd4

0801c62c <__ieee754_powf>:
 801c62c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c630:	ee10 4a90 	vmov	r4, s1
 801c634:	f034 4900 	bics.w	r9, r4, #2147483648	@ 0x80000000
 801c638:	ed2d 8b02 	vpush	{d8}
 801c63c:	ee10 6a10 	vmov	r6, s0
 801c640:	eeb0 8a40 	vmov.f32	s16, s0
 801c644:	eef0 8a60 	vmov.f32	s17, s1
 801c648:	d10c      	bne.n	801c664 <__ieee754_powf+0x38>
 801c64a:	f486 0680 	eor.w	r6, r6, #4194304	@ 0x400000
 801c64e:	0076      	lsls	r6, r6, #1
 801c650:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 801c654:	f240 8274 	bls.w	801cb40 <__ieee754_powf+0x514>
 801c658:	ee38 0a28 	vadd.f32	s0, s16, s17
 801c65c:	ecbd 8b02 	vpop	{d8}
 801c660:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c664:	f026 4800 	bic.w	r8, r6, #2147483648	@ 0x80000000
 801c668:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 801c66c:	d802      	bhi.n	801c674 <__ieee754_powf+0x48>
 801c66e:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 801c672:	d908      	bls.n	801c686 <__ieee754_powf+0x5a>
 801c674:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 801c678:	d1ee      	bne.n	801c658 <__ieee754_powf+0x2c>
 801c67a:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 801c67e:	0064      	lsls	r4, r4, #1
 801c680:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 801c684:	e7e6      	b.n	801c654 <__ieee754_powf+0x28>
 801c686:	2e00      	cmp	r6, #0
 801c688:	da1f      	bge.n	801c6ca <__ieee754_powf+0x9e>
 801c68a:	f1b9 4f97 	cmp.w	r9, #1266679808	@ 0x4b800000
 801c68e:	f080 8260 	bcs.w	801cb52 <__ieee754_powf+0x526>
 801c692:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 801c696:	d32f      	bcc.n	801c6f8 <__ieee754_powf+0xcc>
 801c698:	ea4f 53e9 	mov.w	r3, r9, asr #23
 801c69c:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 801c6a0:	fa49 f503 	asr.w	r5, r9, r3
 801c6a4:	fa05 f303 	lsl.w	r3, r5, r3
 801c6a8:	454b      	cmp	r3, r9
 801c6aa:	d123      	bne.n	801c6f4 <__ieee754_powf+0xc8>
 801c6ac:	f005 0501 	and.w	r5, r5, #1
 801c6b0:	f1c5 0502 	rsb	r5, r5, #2
 801c6b4:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 801c6b8:	d11f      	bne.n	801c6fa <__ieee754_powf+0xce>
 801c6ba:	2c00      	cmp	r4, #0
 801c6bc:	f280 8246 	bge.w	801cb4c <__ieee754_powf+0x520>
 801c6c0:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 801c6c4:	ee87 0a88 	vdiv.f32	s0, s15, s16
 801c6c8:	e7c8      	b.n	801c65c <__ieee754_powf+0x30>
 801c6ca:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 801c6ce:	d111      	bne.n	801c6f4 <__ieee754_powf+0xc8>
 801c6d0:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 801c6d4:	f000 8234 	beq.w	801cb40 <__ieee754_powf+0x514>
 801c6d8:	d906      	bls.n	801c6e8 <__ieee754_powf+0xbc>
 801c6da:	ed9f 0ac5 	vldr	s0, [pc, #788]	@ 801c9f0 <__ieee754_powf+0x3c4>
 801c6de:	2c00      	cmp	r4, #0
 801c6e0:	bfa8      	it	ge
 801c6e2:	eeb0 0a68 	vmovge.f32	s0, s17
 801c6e6:	e7b9      	b.n	801c65c <__ieee754_powf+0x30>
 801c6e8:	2c00      	cmp	r4, #0
 801c6ea:	f280 822c 	bge.w	801cb46 <__ieee754_powf+0x51a>
 801c6ee:	eeb1 0a68 	vneg.f32	s0, s17
 801c6f2:	e7b3      	b.n	801c65c <__ieee754_powf+0x30>
 801c6f4:	2500      	movs	r5, #0
 801c6f6:	e7dd      	b.n	801c6b4 <__ieee754_powf+0x88>
 801c6f8:	2500      	movs	r5, #0
 801c6fa:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 801c6fe:	d102      	bne.n	801c706 <__ieee754_powf+0xda>
 801c700:	ee28 0a08 	vmul.f32	s0, s16, s16
 801c704:	e7aa      	b.n	801c65c <__ieee754_powf+0x30>
 801c706:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 801c70a:	f040 8227 	bne.w	801cb5c <__ieee754_powf+0x530>
 801c70e:	2e00      	cmp	r6, #0
 801c710:	f2c0 8224 	blt.w	801cb5c <__ieee754_powf+0x530>
 801c714:	eeb0 0a48 	vmov.f32	s0, s16
 801c718:	ecbd 8b02 	vpop	{d8}
 801c71c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c720:	f7ff be5e 	b.w	801c3e0 <__ieee754_sqrtf>
 801c724:	2d01      	cmp	r5, #1
 801c726:	d199      	bne.n	801c65c <__ieee754_powf+0x30>
 801c728:	eeb1 0a40 	vneg.f32	s0, s0
 801c72c:	e796      	b.n	801c65c <__ieee754_powf+0x30>
 801c72e:	0ff0      	lsrs	r0, r6, #31
 801c730:	3801      	subs	r0, #1
 801c732:	ea55 0300 	orrs.w	r3, r5, r0
 801c736:	d104      	bne.n	801c742 <__ieee754_powf+0x116>
 801c738:	ee38 8a48 	vsub.f32	s16, s16, s16
 801c73c:	ee88 0a08 	vdiv.f32	s0, s16, s16
 801c740:	e78c      	b.n	801c65c <__ieee754_powf+0x30>
 801c742:	f1b9 4f9a 	cmp.w	r9, #1291845632	@ 0x4d000000
 801c746:	d96d      	bls.n	801c824 <__ieee754_powf+0x1f8>
 801c748:	4baa      	ldr	r3, [pc, #680]	@ (801c9f4 <__ieee754_powf+0x3c8>)
 801c74a:	4598      	cmp	r8, r3
 801c74c:	d808      	bhi.n	801c760 <__ieee754_powf+0x134>
 801c74e:	2c00      	cmp	r4, #0
 801c750:	da0b      	bge.n	801c76a <__ieee754_powf+0x13e>
 801c752:	2000      	movs	r0, #0
 801c754:	ecbd 8b02 	vpop	{d8}
 801c758:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c75c:	f7ff be3a 	b.w	801c3d4 <__math_oflowf>
 801c760:	4ba5      	ldr	r3, [pc, #660]	@ (801c9f8 <__ieee754_powf+0x3cc>)
 801c762:	4598      	cmp	r8, r3
 801c764:	d908      	bls.n	801c778 <__ieee754_powf+0x14c>
 801c766:	2c00      	cmp	r4, #0
 801c768:	dcf3      	bgt.n	801c752 <__ieee754_powf+0x126>
 801c76a:	2000      	movs	r0, #0
 801c76c:	ecbd 8b02 	vpop	{d8}
 801c770:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c774:	f7ff be28 	b.w	801c3c8 <__math_uflowf>
 801c778:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 801c77c:	ee30 0a67 	vsub.f32	s0, s0, s15
 801c780:	eddf 6a9e 	vldr	s13, [pc, #632]	@ 801c9fc <__ieee754_powf+0x3d0>
 801c784:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 801c788:	eee0 6a67 	vfms.f32	s13, s0, s15
 801c78c:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 801c790:	eee6 7ac0 	vfms.f32	s15, s13, s0
 801c794:	ee20 7a00 	vmul.f32	s14, s0, s0
 801c798:	eddf 6a99 	vldr	s13, [pc, #612]	@ 801ca00 <__ieee754_powf+0x3d4>
 801c79c:	ee27 7a27 	vmul.f32	s14, s14, s15
 801c7a0:	eddf 7a98 	vldr	s15, [pc, #608]	@ 801ca04 <__ieee754_powf+0x3d8>
 801c7a4:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 801c7a8:	ed9f 7a97 	vldr	s14, [pc, #604]	@ 801ca08 <__ieee754_powf+0x3dc>
 801c7ac:	eee0 7a07 	vfma.f32	s15, s0, s14
 801c7b0:	eeb0 7a67 	vmov.f32	s14, s15
 801c7b4:	eea0 7a26 	vfma.f32	s14, s0, s13
 801c7b8:	ee17 3a10 	vmov	r3, s14
 801c7bc:	f36f 030b 	bfc	r3, #0, #12
 801c7c0:	ee07 3a10 	vmov	s14, r3
 801c7c4:	eeb0 6a47 	vmov.f32	s12, s14
 801c7c8:	eea0 6a66 	vfms.f32	s12, s0, s13
 801c7cc:	ee77 7ac6 	vsub.f32	s15, s15, s12
 801c7d0:	3d01      	subs	r5, #1
 801c7d2:	4305      	orrs	r5, r0
 801c7d4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801c7d8:	eebf 8a00 	vmov.f32	s16, #240	@ 0xbf800000 -1.0
 801c7dc:	f36f 040b 	bfc	r4, #0, #12
 801c7e0:	bf18      	it	ne
 801c7e2:	eeb0 8a66 	vmovne.f32	s16, s13
 801c7e6:	ee06 4a90 	vmov	s13, r4
 801c7ea:	ee67 0aa8 	vmul.f32	s1, s15, s17
 801c7ee:	ee38 6ae6 	vsub.f32	s12, s17, s13
 801c7f2:	ee67 7a26 	vmul.f32	s15, s14, s13
 801c7f6:	eee6 0a07 	vfma.f32	s1, s12, s14
 801c7fa:	ee30 7aa7 	vadd.f32	s14, s1, s15
 801c7fe:	ee17 1a10 	vmov	r1, s14
 801c802:	2900      	cmp	r1, #0
 801c804:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801c808:	f340 80dd 	ble.w	801c9c6 <__ieee754_powf+0x39a>
 801c80c:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 801c810:	f240 80ca 	bls.w	801c9a8 <__ieee754_powf+0x37c>
 801c814:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 801c818:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c81c:	bf4c      	ite	mi
 801c81e:	2001      	movmi	r0, #1
 801c820:	2000      	movpl	r0, #0
 801c822:	e797      	b.n	801c754 <__ieee754_powf+0x128>
 801c824:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 801c828:	bf01      	itttt	eq
 801c82a:	eddf 7a78 	vldreq	s15, [pc, #480]	@ 801ca0c <__ieee754_powf+0x3e0>
 801c82e:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 801c832:	f06f 0317 	mvneq.w	r3, #23
 801c836:	ee17 7a90 	vmoveq	r7, s15
 801c83a:	ea4f 52e7 	mov.w	r2, r7, asr #23
 801c83e:	bf18      	it	ne
 801c840:	2300      	movne	r3, #0
 801c842:	3a7f      	subs	r2, #127	@ 0x7f
 801c844:	441a      	add	r2, r3
 801c846:	4b72      	ldr	r3, [pc, #456]	@ (801ca10 <__ieee754_powf+0x3e4>)
 801c848:	f3c7 0716 	ubfx	r7, r7, #0, #23
 801c84c:	429f      	cmp	r7, r3
 801c84e:	f047 517e 	orr.w	r1, r7, #1065353216	@ 0x3f800000
 801c852:	dd06      	ble.n	801c862 <__ieee754_powf+0x236>
 801c854:	4b6f      	ldr	r3, [pc, #444]	@ (801ca14 <__ieee754_powf+0x3e8>)
 801c856:	429f      	cmp	r7, r3
 801c858:	f340 80a4 	ble.w	801c9a4 <__ieee754_powf+0x378>
 801c85c:	3201      	adds	r2, #1
 801c85e:	f5a1 0100 	sub.w	r1, r1, #8388608	@ 0x800000
 801c862:	2600      	movs	r6, #0
 801c864:	4b6c      	ldr	r3, [pc, #432]	@ (801ca18 <__ieee754_powf+0x3ec>)
 801c866:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 801c86a:	ee07 1a10 	vmov	s14, r1
 801c86e:	edd3 5a00 	vldr	s11, [r3]
 801c872:	4b6a      	ldr	r3, [pc, #424]	@ (801ca1c <__ieee754_powf+0x3f0>)
 801c874:	ee75 7a87 	vadd.f32	s15, s11, s14
 801c878:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801c87c:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 801c880:	1049      	asrs	r1, r1, #1
 801c882:	f041 5100 	orr.w	r1, r1, #536870912	@ 0x20000000
 801c886:	f501 2180 	add.w	r1, r1, #262144	@ 0x40000
 801c88a:	eb01 5146 	add.w	r1, r1, r6, lsl #21
 801c88e:	ee37 6a65 	vsub.f32	s12, s14, s11
 801c892:	ee07 1a90 	vmov	s15, r1
 801c896:	ee26 5a24 	vmul.f32	s10, s12, s9
 801c89a:	ee77 5ae5 	vsub.f32	s11, s15, s11
 801c89e:	ee15 7a10 	vmov	r7, s10
 801c8a2:	401f      	ands	r7, r3
 801c8a4:	ee06 7a90 	vmov	s13, r7
 801c8a8:	eea6 6ae7 	vfms.f32	s12, s13, s15
 801c8ac:	ee37 7a65 	vsub.f32	s14, s14, s11
 801c8b0:	ee65 7a05 	vmul.f32	s15, s10, s10
 801c8b4:	eea6 6ac7 	vfms.f32	s12, s13, s14
 801c8b8:	eddf 5a59 	vldr	s11, [pc, #356]	@ 801ca20 <__ieee754_powf+0x3f4>
 801c8bc:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 801ca24 <__ieee754_powf+0x3f8>
 801c8c0:	eee7 5a87 	vfma.f32	s11, s15, s14
 801c8c4:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 801ca28 <__ieee754_powf+0x3fc>
 801c8c8:	eea5 7aa7 	vfma.f32	s14, s11, s15
 801c8cc:	eddf 5a4b 	vldr	s11, [pc, #300]	@ 801c9fc <__ieee754_powf+0x3d0>
 801c8d0:	eee7 5a27 	vfma.f32	s11, s14, s15
 801c8d4:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 801ca2c <__ieee754_powf+0x400>
 801c8d8:	eea5 7aa7 	vfma.f32	s14, s11, s15
 801c8dc:	eddf 5a54 	vldr	s11, [pc, #336]	@ 801ca30 <__ieee754_powf+0x404>
 801c8e0:	ee26 6a24 	vmul.f32	s12, s12, s9
 801c8e4:	eee7 5a27 	vfma.f32	s11, s14, s15
 801c8e8:	ee35 7a26 	vadd.f32	s14, s10, s13
 801c8ec:	ee67 4aa7 	vmul.f32	s9, s15, s15
 801c8f0:	ee27 7a06 	vmul.f32	s14, s14, s12
 801c8f4:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 801c8f8:	eea4 7aa5 	vfma.f32	s14, s9, s11
 801c8fc:	eef0 5a67 	vmov.f32	s11, s15
 801c900:	eee6 5aa6 	vfma.f32	s11, s13, s13
 801c904:	ee75 5a87 	vadd.f32	s11, s11, s14
 801c908:	ee15 1a90 	vmov	r1, s11
 801c90c:	4019      	ands	r1, r3
 801c90e:	ee05 1a90 	vmov	s11, r1
 801c912:	ee75 7ae7 	vsub.f32	s15, s11, s15
 801c916:	eee6 7ae6 	vfms.f32	s15, s13, s13
 801c91a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801c91e:	ee67 7a85 	vmul.f32	s15, s15, s10
 801c922:	eee6 7a25 	vfma.f32	s15, s12, s11
 801c926:	eeb0 6a67 	vmov.f32	s12, s15
 801c92a:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801c92e:	ee16 1a10 	vmov	r1, s12
 801c932:	4019      	ands	r1, r3
 801c934:	ee06 1a10 	vmov	s12, r1
 801c938:	eeb0 7a46 	vmov.f32	s14, s12
 801c93c:	eea6 7ae5 	vfms.f32	s14, s13, s11
 801c940:	493c      	ldr	r1, [pc, #240]	@ (801ca34 <__ieee754_powf+0x408>)
 801c942:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 801c946:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801c94a:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 801ca38 <__ieee754_powf+0x40c>
 801c94e:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 801ca3c <__ieee754_powf+0x410>
 801c952:	ee67 7a87 	vmul.f32	s15, s15, s14
 801c956:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 801ca40 <__ieee754_powf+0x414>
 801c95a:	eee6 7a07 	vfma.f32	s15, s12, s14
 801c95e:	ed91 7a00 	vldr	s14, [r1]
 801c962:	ee77 7a87 	vadd.f32	s15, s15, s14
 801c966:	ee07 2a10 	vmov	s14, r2
 801c96a:	4a36      	ldr	r2, [pc, #216]	@ (801ca44 <__ieee754_powf+0x418>)
 801c96c:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 801c970:	eeb0 7a67 	vmov.f32	s14, s15
 801c974:	eea6 7a25 	vfma.f32	s14, s12, s11
 801c978:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 801c97c:	ed92 5a00 	vldr	s10, [r2]
 801c980:	ee37 7a05 	vadd.f32	s14, s14, s10
 801c984:	ee37 7a26 	vadd.f32	s14, s14, s13
 801c988:	ee17 2a10 	vmov	r2, s14
 801c98c:	401a      	ands	r2, r3
 801c98e:	ee07 2a10 	vmov	s14, r2
 801c992:	ee77 6a66 	vsub.f32	s13, s14, s13
 801c996:	ee76 6ac5 	vsub.f32	s13, s13, s10
 801c99a:	eee6 6a65 	vfms.f32	s13, s12, s11
 801c99e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801c9a2:	e715      	b.n	801c7d0 <__ieee754_powf+0x1a4>
 801c9a4:	2601      	movs	r6, #1
 801c9a6:	e75d      	b.n	801c864 <__ieee754_powf+0x238>
 801c9a8:	d152      	bne.n	801ca50 <__ieee754_powf+0x424>
 801c9aa:	eddf 6a27 	vldr	s13, [pc, #156]	@ 801ca48 <__ieee754_powf+0x41c>
 801c9ae:	ee37 7a67 	vsub.f32	s14, s14, s15
 801c9b2:	ee70 6aa6 	vadd.f32	s13, s1, s13
 801c9b6:	eef4 6ac7 	vcmpe.f32	s13, s14
 801c9ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c9be:	f73f af29 	bgt.w	801c814 <__ieee754_powf+0x1e8>
 801c9c2:	2386      	movs	r3, #134	@ 0x86
 801c9c4:	e048      	b.n	801ca58 <__ieee754_powf+0x42c>
 801c9c6:	4a21      	ldr	r2, [pc, #132]	@ (801ca4c <__ieee754_powf+0x420>)
 801c9c8:	4293      	cmp	r3, r2
 801c9ca:	d907      	bls.n	801c9dc <__ieee754_powf+0x3b0>
 801c9cc:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 801c9d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c9d4:	bf4c      	ite	mi
 801c9d6:	2001      	movmi	r0, #1
 801c9d8:	2000      	movpl	r0, #0
 801c9da:	e6c7      	b.n	801c76c <__ieee754_powf+0x140>
 801c9dc:	d138      	bne.n	801ca50 <__ieee754_powf+0x424>
 801c9de:	ee37 7a67 	vsub.f32	s14, s14, s15
 801c9e2:	eeb4 7ae0 	vcmpe.f32	s14, s1
 801c9e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c9ea:	dbea      	blt.n	801c9c2 <__ieee754_powf+0x396>
 801c9ec:	e7ee      	b.n	801c9cc <__ieee754_powf+0x3a0>
 801c9ee:	bf00      	nop
 801c9f0:	00000000 	.word	0x00000000
 801c9f4:	3f7ffff3 	.word	0x3f7ffff3
 801c9f8:	3f800007 	.word	0x3f800007
 801c9fc:	3eaaaaab 	.word	0x3eaaaaab
 801ca00:	3fb8aa00 	.word	0x3fb8aa00
 801ca04:	3fb8aa3b 	.word	0x3fb8aa3b
 801ca08:	36eca570 	.word	0x36eca570
 801ca0c:	4b800000 	.word	0x4b800000
 801ca10:	001cc471 	.word	0x001cc471
 801ca14:	005db3d6 	.word	0x005db3d6
 801ca18:	0801ecec 	.word	0x0801ecec
 801ca1c:	fffff000 	.word	0xfffff000
 801ca20:	3e6c3255 	.word	0x3e6c3255
 801ca24:	3e53f142 	.word	0x3e53f142
 801ca28:	3e8ba305 	.word	0x3e8ba305
 801ca2c:	3edb6db7 	.word	0x3edb6db7
 801ca30:	3f19999a 	.word	0x3f19999a
 801ca34:	0801ecdc 	.word	0x0801ecdc
 801ca38:	3f76384f 	.word	0x3f76384f
 801ca3c:	3f763800 	.word	0x3f763800
 801ca40:	369dc3a0 	.word	0x369dc3a0
 801ca44:	0801ece4 	.word	0x0801ece4
 801ca48:	3338aa3c 	.word	0x3338aa3c
 801ca4c:	43160000 	.word	0x43160000
 801ca50:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 801ca54:	d96f      	bls.n	801cb36 <__ieee754_powf+0x50a>
 801ca56:	15db      	asrs	r3, r3, #23
 801ca58:	3b7e      	subs	r3, #126	@ 0x7e
 801ca5a:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 801ca5e:	4118      	asrs	r0, r3
 801ca60:	4408      	add	r0, r1
 801ca62:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 801ca66:	4a4e      	ldr	r2, [pc, #312]	@ (801cba0 <__ieee754_powf+0x574>)
 801ca68:	3b7f      	subs	r3, #127	@ 0x7f
 801ca6a:	411a      	asrs	r2, r3
 801ca6c:	4002      	ands	r2, r0
 801ca6e:	ee07 2a10 	vmov	s14, r2
 801ca72:	f3c0 0016 	ubfx	r0, r0, #0, #23
 801ca76:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 801ca7a:	f1c3 0317 	rsb	r3, r3, #23
 801ca7e:	4118      	asrs	r0, r3
 801ca80:	2900      	cmp	r1, #0
 801ca82:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801ca86:	bfb8      	it	lt
 801ca88:	4240      	neglt	r0, r0
 801ca8a:	ee77 6aa0 	vadd.f32	s13, s15, s1
 801ca8e:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 801cba4 <__ieee754_powf+0x578>
 801ca92:	ed9f 6a45 	vldr	s12, [pc, #276]	@ 801cba8 <__ieee754_powf+0x57c>
 801ca96:	ee16 3a90 	vmov	r3, s13
 801ca9a:	f36f 030b 	bfc	r3, #0, #12
 801ca9e:	ee06 3a90 	vmov	s13, r3
 801caa2:	ee76 7ae7 	vsub.f32	s15, s13, s15
 801caa6:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 801caaa:	ee70 0ae7 	vsub.f32	s1, s1, s15
 801caae:	eddf 7a3f 	vldr	s15, [pc, #252]	@ 801cbac <__ieee754_powf+0x580>
 801cab2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801cab6:	eee0 7a87 	vfma.f32	s15, s1, s14
 801caba:	eeb0 7a67 	vmov.f32	s14, s15
 801cabe:	eea6 7a86 	vfma.f32	s14, s13, s12
 801cac2:	eef0 5a47 	vmov.f32	s11, s14
 801cac6:	eee6 5ac6 	vfms.f32	s11, s13, s12
 801caca:	ee67 6a07 	vmul.f32	s13, s14, s14
 801cace:	ee77 7ae5 	vsub.f32	s15, s15, s11
 801cad2:	ed9f 6a37 	vldr	s12, [pc, #220]	@ 801cbb0 <__ieee754_powf+0x584>
 801cad6:	eddf 5a37 	vldr	s11, [pc, #220]	@ 801cbb4 <__ieee754_powf+0x588>
 801cada:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801cade:	eddf 5a36 	vldr	s11, [pc, #216]	@ 801cbb8 <__ieee754_powf+0x58c>
 801cae2:	eee6 5a26 	vfma.f32	s11, s12, s13
 801cae6:	ed9f 6a35 	vldr	s12, [pc, #212]	@ 801cbbc <__ieee754_powf+0x590>
 801caea:	eea5 6aa6 	vfma.f32	s12, s11, s13
 801caee:	eddf 5a34 	vldr	s11, [pc, #208]	@ 801cbc0 <__ieee754_powf+0x594>
 801caf2:	eee6 5a26 	vfma.f32	s11, s12, s13
 801caf6:	eeb0 6a47 	vmov.f32	s12, s14
 801cafa:	eea5 6ae6 	vfms.f32	s12, s11, s13
 801cafe:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 801cb02:	ee67 5a06 	vmul.f32	s11, s14, s12
 801cb06:	ee36 6a66 	vsub.f32	s12, s12, s13
 801cb0a:	eee7 7a27 	vfma.f32	s15, s14, s15
 801cb0e:	eec5 6a86 	vdiv.f32	s13, s11, s12
 801cb12:	ee76 7ae7 	vsub.f32	s15, s13, s15
 801cb16:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801cb1a:	ee30 0a67 	vsub.f32	s0, s0, s15
 801cb1e:	ee10 3a10 	vmov	r3, s0
 801cb22:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 801cb26:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 801cb2a:	da06      	bge.n	801cb3a <__ieee754_powf+0x50e>
 801cb2c:	f000 f984 	bl	801ce38 <scalbnf>
 801cb30:	ee20 0a08 	vmul.f32	s0, s0, s16
 801cb34:	e592      	b.n	801c65c <__ieee754_powf+0x30>
 801cb36:	2000      	movs	r0, #0
 801cb38:	e7a7      	b.n	801ca8a <__ieee754_powf+0x45e>
 801cb3a:	ee00 3a10 	vmov	s0, r3
 801cb3e:	e7f7      	b.n	801cb30 <__ieee754_powf+0x504>
 801cb40:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 801cb44:	e58a      	b.n	801c65c <__ieee754_powf+0x30>
 801cb46:	ed9f 0a1f 	vldr	s0, [pc, #124]	@ 801cbc4 <__ieee754_powf+0x598>
 801cb4a:	e587      	b.n	801c65c <__ieee754_powf+0x30>
 801cb4c:	eeb0 0a48 	vmov.f32	s0, s16
 801cb50:	e584      	b.n	801c65c <__ieee754_powf+0x30>
 801cb52:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 801cb56:	f43f adbb 	beq.w	801c6d0 <__ieee754_powf+0xa4>
 801cb5a:	2502      	movs	r5, #2
 801cb5c:	eeb0 0a48 	vmov.f32	s0, s16
 801cb60:	f000 f962 	bl	801ce28 <fabsf>
 801cb64:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 801cb68:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 801cb6c:	4647      	mov	r7, r8
 801cb6e:	d003      	beq.n	801cb78 <__ieee754_powf+0x54c>
 801cb70:	f1b8 0f00 	cmp.w	r8, #0
 801cb74:	f47f addb 	bne.w	801c72e <__ieee754_powf+0x102>
 801cb78:	2c00      	cmp	r4, #0
 801cb7a:	bfbc      	itt	lt
 801cb7c:	eef7 7a00 	vmovlt.f32	s15, #112	@ 0x3f800000  1.0
 801cb80:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 801cb84:	2e00      	cmp	r6, #0
 801cb86:	f6bf ad69 	bge.w	801c65c <__ieee754_powf+0x30>
 801cb8a:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 801cb8e:	ea58 0805 	orrs.w	r8, r8, r5
 801cb92:	f47f adc7 	bne.w	801c724 <__ieee754_powf+0xf8>
 801cb96:	ee70 7a40 	vsub.f32	s15, s0, s0
 801cb9a:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 801cb9e:	e55d      	b.n	801c65c <__ieee754_powf+0x30>
 801cba0:	ff800000 	.word	0xff800000
 801cba4:	3f317218 	.word	0x3f317218
 801cba8:	3f317200 	.word	0x3f317200
 801cbac:	35bfbe8c 	.word	0x35bfbe8c
 801cbb0:	b5ddea0e 	.word	0xb5ddea0e
 801cbb4:	3331bb4c 	.word	0x3331bb4c
 801cbb8:	388ab355 	.word	0x388ab355
 801cbbc:	bb360b61 	.word	0xbb360b61
 801cbc0:	3e2aaaab 	.word	0x3e2aaaab
 801cbc4:	00000000 	.word	0x00000000

0801cbc8 <__ieee754_rem_pio2f>:
 801cbc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801cbca:	ee10 6a10 	vmov	r6, s0
 801cbce:	4b88      	ldr	r3, [pc, #544]	@ (801cdf0 <__ieee754_rem_pio2f+0x228>)
 801cbd0:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 801cbd4:	429d      	cmp	r5, r3
 801cbd6:	b087      	sub	sp, #28
 801cbd8:	4604      	mov	r4, r0
 801cbda:	d805      	bhi.n	801cbe8 <__ieee754_rem_pio2f+0x20>
 801cbdc:	2300      	movs	r3, #0
 801cbde:	ed80 0a00 	vstr	s0, [r0]
 801cbe2:	6043      	str	r3, [r0, #4]
 801cbe4:	2000      	movs	r0, #0
 801cbe6:	e022      	b.n	801cc2e <__ieee754_rem_pio2f+0x66>
 801cbe8:	4b82      	ldr	r3, [pc, #520]	@ (801cdf4 <__ieee754_rem_pio2f+0x22c>)
 801cbea:	429d      	cmp	r5, r3
 801cbec:	d83a      	bhi.n	801cc64 <__ieee754_rem_pio2f+0x9c>
 801cbee:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 801cbf2:	2e00      	cmp	r6, #0
 801cbf4:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 801cdf8 <__ieee754_rem_pio2f+0x230>
 801cbf8:	4a80      	ldr	r2, [pc, #512]	@ (801cdfc <__ieee754_rem_pio2f+0x234>)
 801cbfa:	f023 030f 	bic.w	r3, r3, #15
 801cbfe:	dd18      	ble.n	801cc32 <__ieee754_rem_pio2f+0x6a>
 801cc00:	4293      	cmp	r3, r2
 801cc02:	ee70 7a47 	vsub.f32	s15, s0, s14
 801cc06:	bf09      	itett	eq
 801cc08:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 801ce00 <__ieee754_rem_pio2f+0x238>
 801cc0c:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 801ce04 <__ieee754_rem_pio2f+0x23c>
 801cc10:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 801ce08 <__ieee754_rem_pio2f+0x240>
 801cc14:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 801cc18:	ee37 7ae6 	vsub.f32	s14, s15, s13
 801cc1c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801cc20:	ed80 7a00 	vstr	s14, [r0]
 801cc24:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801cc28:	edc0 7a01 	vstr	s15, [r0, #4]
 801cc2c:	2001      	movs	r0, #1
 801cc2e:	b007      	add	sp, #28
 801cc30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801cc32:	4293      	cmp	r3, r2
 801cc34:	ee70 7a07 	vadd.f32	s15, s0, s14
 801cc38:	bf09      	itett	eq
 801cc3a:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 801ce00 <__ieee754_rem_pio2f+0x238>
 801cc3e:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 801ce04 <__ieee754_rem_pio2f+0x23c>
 801cc42:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 801ce08 <__ieee754_rem_pio2f+0x240>
 801cc46:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 801cc4a:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801cc4e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801cc52:	ed80 7a00 	vstr	s14, [r0]
 801cc56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801cc5a:	edc0 7a01 	vstr	s15, [r0, #4]
 801cc5e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801cc62:	e7e4      	b.n	801cc2e <__ieee754_rem_pio2f+0x66>
 801cc64:	4b69      	ldr	r3, [pc, #420]	@ (801ce0c <__ieee754_rem_pio2f+0x244>)
 801cc66:	429d      	cmp	r5, r3
 801cc68:	d873      	bhi.n	801cd52 <__ieee754_rem_pio2f+0x18a>
 801cc6a:	f000 f8dd 	bl	801ce28 <fabsf>
 801cc6e:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 801ce10 <__ieee754_rem_pio2f+0x248>
 801cc72:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 801cc76:	eee0 7a07 	vfma.f32	s15, s0, s14
 801cc7a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801cc7e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801cc82:	ee17 0a90 	vmov	r0, s15
 801cc86:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 801cdf8 <__ieee754_rem_pio2f+0x230>
 801cc8a:	eea7 0a67 	vfms.f32	s0, s14, s15
 801cc8e:	281f      	cmp	r0, #31
 801cc90:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 801ce04 <__ieee754_rem_pio2f+0x23c>
 801cc94:	ee67 7a27 	vmul.f32	s15, s14, s15
 801cc98:	eeb1 6a47 	vneg.f32	s12, s14
 801cc9c:	ee70 6a67 	vsub.f32	s13, s0, s15
 801cca0:	ee16 1a90 	vmov	r1, s13
 801cca4:	dc09      	bgt.n	801ccba <__ieee754_rem_pio2f+0xf2>
 801cca6:	4a5b      	ldr	r2, [pc, #364]	@ (801ce14 <__ieee754_rem_pio2f+0x24c>)
 801cca8:	1e47      	subs	r7, r0, #1
 801ccaa:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 801ccae:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 801ccb2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 801ccb6:	4293      	cmp	r3, r2
 801ccb8:	d107      	bne.n	801ccca <__ieee754_rem_pio2f+0x102>
 801ccba:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 801ccbe:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 801ccc2:	2a08      	cmp	r2, #8
 801ccc4:	ea4f 53e5 	mov.w	r3, r5, asr #23
 801ccc8:	dc14      	bgt.n	801ccf4 <__ieee754_rem_pio2f+0x12c>
 801ccca:	6021      	str	r1, [r4, #0]
 801cccc:	ed94 7a00 	vldr	s14, [r4]
 801ccd0:	ee30 0a47 	vsub.f32	s0, s0, s14
 801ccd4:	2e00      	cmp	r6, #0
 801ccd6:	ee30 0a67 	vsub.f32	s0, s0, s15
 801ccda:	ed84 0a01 	vstr	s0, [r4, #4]
 801ccde:	daa6      	bge.n	801cc2e <__ieee754_rem_pio2f+0x66>
 801cce0:	eeb1 7a47 	vneg.f32	s14, s14
 801cce4:	eeb1 0a40 	vneg.f32	s0, s0
 801cce8:	ed84 7a00 	vstr	s14, [r4]
 801ccec:	ed84 0a01 	vstr	s0, [r4, #4]
 801ccf0:	4240      	negs	r0, r0
 801ccf2:	e79c      	b.n	801cc2e <__ieee754_rem_pio2f+0x66>
 801ccf4:	eddf 5a42 	vldr	s11, [pc, #264]	@ 801ce00 <__ieee754_rem_pio2f+0x238>
 801ccf8:	eef0 6a40 	vmov.f32	s13, s0
 801ccfc:	eee6 6a25 	vfma.f32	s13, s12, s11
 801cd00:	ee70 7a66 	vsub.f32	s15, s0, s13
 801cd04:	eee6 7a25 	vfma.f32	s15, s12, s11
 801cd08:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 801ce08 <__ieee754_rem_pio2f+0x240>
 801cd0c:	eed7 7a25 	vfnms.f32	s15, s14, s11
 801cd10:	ee76 5ae7 	vsub.f32	s11, s13, s15
 801cd14:	ee15 2a90 	vmov	r2, s11
 801cd18:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 801cd1c:	1a5b      	subs	r3, r3, r1
 801cd1e:	2b19      	cmp	r3, #25
 801cd20:	dc04      	bgt.n	801cd2c <__ieee754_rem_pio2f+0x164>
 801cd22:	edc4 5a00 	vstr	s11, [r4]
 801cd26:	eeb0 0a66 	vmov.f32	s0, s13
 801cd2a:	e7cf      	b.n	801cccc <__ieee754_rem_pio2f+0x104>
 801cd2c:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 801ce18 <__ieee754_rem_pio2f+0x250>
 801cd30:	eeb0 0a66 	vmov.f32	s0, s13
 801cd34:	eea6 0a25 	vfma.f32	s0, s12, s11
 801cd38:	ee76 7ac0 	vsub.f32	s15, s13, s0
 801cd3c:	eddf 6a37 	vldr	s13, [pc, #220]	@ 801ce1c <__ieee754_rem_pio2f+0x254>
 801cd40:	eee6 7a25 	vfma.f32	s15, s12, s11
 801cd44:	eed7 7a26 	vfnms.f32	s15, s14, s13
 801cd48:	ee30 7a67 	vsub.f32	s14, s0, s15
 801cd4c:	ed84 7a00 	vstr	s14, [r4]
 801cd50:	e7bc      	b.n	801cccc <__ieee754_rem_pio2f+0x104>
 801cd52:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 801cd56:	d306      	bcc.n	801cd66 <__ieee754_rem_pio2f+0x19e>
 801cd58:	ee70 7a40 	vsub.f32	s15, s0, s0
 801cd5c:	edc0 7a01 	vstr	s15, [r0, #4]
 801cd60:	edc0 7a00 	vstr	s15, [r0]
 801cd64:	e73e      	b.n	801cbe4 <__ieee754_rem_pio2f+0x1c>
 801cd66:	15ea      	asrs	r2, r5, #23
 801cd68:	3a86      	subs	r2, #134	@ 0x86
 801cd6a:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 801cd6e:	ee07 3a90 	vmov	s15, r3
 801cd72:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801cd76:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 801ce20 <__ieee754_rem_pio2f+0x258>
 801cd7a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801cd7e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801cd82:	ed8d 7a03 	vstr	s14, [sp, #12]
 801cd86:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801cd8a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801cd8e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801cd92:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801cd96:	ed8d 7a04 	vstr	s14, [sp, #16]
 801cd9a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801cd9e:	eef5 7a40 	vcmp.f32	s15, #0.0
 801cda2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cda6:	edcd 7a05 	vstr	s15, [sp, #20]
 801cdaa:	d11e      	bne.n	801cdea <__ieee754_rem_pio2f+0x222>
 801cdac:	eeb5 7a40 	vcmp.f32	s14, #0.0
 801cdb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cdb4:	bf0c      	ite	eq
 801cdb6:	2301      	moveq	r3, #1
 801cdb8:	2302      	movne	r3, #2
 801cdba:	491a      	ldr	r1, [pc, #104]	@ (801ce24 <__ieee754_rem_pio2f+0x25c>)
 801cdbc:	9101      	str	r1, [sp, #4]
 801cdbe:	2102      	movs	r1, #2
 801cdc0:	9100      	str	r1, [sp, #0]
 801cdc2:	a803      	add	r0, sp, #12
 801cdc4:	4621      	mov	r1, r4
 801cdc6:	f000 f89d 	bl	801cf04 <__kernel_rem_pio2f>
 801cdca:	2e00      	cmp	r6, #0
 801cdcc:	f6bf af2f 	bge.w	801cc2e <__ieee754_rem_pio2f+0x66>
 801cdd0:	edd4 7a00 	vldr	s15, [r4]
 801cdd4:	eef1 7a67 	vneg.f32	s15, s15
 801cdd8:	edc4 7a00 	vstr	s15, [r4]
 801cddc:	edd4 7a01 	vldr	s15, [r4, #4]
 801cde0:	eef1 7a67 	vneg.f32	s15, s15
 801cde4:	edc4 7a01 	vstr	s15, [r4, #4]
 801cde8:	e782      	b.n	801ccf0 <__ieee754_rem_pio2f+0x128>
 801cdea:	2303      	movs	r3, #3
 801cdec:	e7e5      	b.n	801cdba <__ieee754_rem_pio2f+0x1f2>
 801cdee:	bf00      	nop
 801cdf0:	3f490fd8 	.word	0x3f490fd8
 801cdf4:	4016cbe3 	.word	0x4016cbe3
 801cdf8:	3fc90f80 	.word	0x3fc90f80
 801cdfc:	3fc90fd0 	.word	0x3fc90fd0
 801ce00:	37354400 	.word	0x37354400
 801ce04:	37354443 	.word	0x37354443
 801ce08:	2e85a308 	.word	0x2e85a308
 801ce0c:	43490f80 	.word	0x43490f80
 801ce10:	3f22f984 	.word	0x3f22f984
 801ce14:	0801ecf4 	.word	0x0801ecf4
 801ce18:	2e85a300 	.word	0x2e85a300
 801ce1c:	248d3132 	.word	0x248d3132
 801ce20:	43800000 	.word	0x43800000
 801ce24:	0801ed74 	.word	0x0801ed74

0801ce28 <fabsf>:
 801ce28:	ee10 3a10 	vmov	r3, s0
 801ce2c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801ce30:	ee00 3a10 	vmov	s0, r3
 801ce34:	4770      	bx	lr
	...

0801ce38 <scalbnf>:
 801ce38:	ee10 3a10 	vmov	r3, s0
 801ce3c:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 801ce40:	d02b      	beq.n	801ce9a <scalbnf+0x62>
 801ce42:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 801ce46:	d302      	bcc.n	801ce4e <scalbnf+0x16>
 801ce48:	ee30 0a00 	vadd.f32	s0, s0, s0
 801ce4c:	4770      	bx	lr
 801ce4e:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 801ce52:	d123      	bne.n	801ce9c <scalbnf+0x64>
 801ce54:	4b24      	ldr	r3, [pc, #144]	@ (801cee8 <scalbnf+0xb0>)
 801ce56:	eddf 7a25 	vldr	s15, [pc, #148]	@ 801ceec <scalbnf+0xb4>
 801ce5a:	4298      	cmp	r0, r3
 801ce5c:	ee20 0a27 	vmul.f32	s0, s0, s15
 801ce60:	db17      	blt.n	801ce92 <scalbnf+0x5a>
 801ce62:	ee10 3a10 	vmov	r3, s0
 801ce66:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801ce6a:	3a19      	subs	r2, #25
 801ce6c:	f24c 3150 	movw	r1, #50000	@ 0xc350
 801ce70:	4288      	cmp	r0, r1
 801ce72:	dd15      	ble.n	801cea0 <scalbnf+0x68>
 801ce74:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 801cef0 <scalbnf+0xb8>
 801ce78:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 801cef4 <scalbnf+0xbc>
 801ce7c:	ee10 3a10 	vmov	r3, s0
 801ce80:	eeb0 7a67 	vmov.f32	s14, s15
 801ce84:	2b00      	cmp	r3, #0
 801ce86:	bfb8      	it	lt
 801ce88:	eef0 7a66 	vmovlt.f32	s15, s13
 801ce8c:	ee27 0a87 	vmul.f32	s0, s15, s14
 801ce90:	4770      	bx	lr
 801ce92:	eddf 7a19 	vldr	s15, [pc, #100]	@ 801cef8 <scalbnf+0xc0>
 801ce96:	ee27 0a80 	vmul.f32	s0, s15, s0
 801ce9a:	4770      	bx	lr
 801ce9c:	0dd2      	lsrs	r2, r2, #23
 801ce9e:	e7e5      	b.n	801ce6c <scalbnf+0x34>
 801cea0:	4410      	add	r0, r2
 801cea2:	28fe      	cmp	r0, #254	@ 0xfe
 801cea4:	dce6      	bgt.n	801ce74 <scalbnf+0x3c>
 801cea6:	2800      	cmp	r0, #0
 801cea8:	dd06      	ble.n	801ceb8 <scalbnf+0x80>
 801ceaa:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 801ceae:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 801ceb2:	ee00 3a10 	vmov	s0, r3
 801ceb6:	4770      	bx	lr
 801ceb8:	f110 0f16 	cmn.w	r0, #22
 801cebc:	da09      	bge.n	801ced2 <scalbnf+0x9a>
 801cebe:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 801cef8 <scalbnf+0xc0>
 801cec2:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 801cefc <scalbnf+0xc4>
 801cec6:	ee10 3a10 	vmov	r3, s0
 801ceca:	eeb0 7a67 	vmov.f32	s14, s15
 801cece:	2b00      	cmp	r3, #0
 801ced0:	e7d9      	b.n	801ce86 <scalbnf+0x4e>
 801ced2:	3019      	adds	r0, #25
 801ced4:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 801ced8:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 801cedc:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 801cf00 <scalbnf+0xc8>
 801cee0:	ee07 3a90 	vmov	s15, r3
 801cee4:	e7d7      	b.n	801ce96 <scalbnf+0x5e>
 801cee6:	bf00      	nop
 801cee8:	ffff3cb0 	.word	0xffff3cb0
 801ceec:	4c000000 	.word	0x4c000000
 801cef0:	7149f2ca 	.word	0x7149f2ca
 801cef4:	f149f2ca 	.word	0xf149f2ca
 801cef8:	0da24260 	.word	0x0da24260
 801cefc:	8da24260 	.word	0x8da24260
 801cf00:	33000000 	.word	0x33000000

0801cf04 <__kernel_rem_pio2f>:
 801cf04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cf08:	ed2d 8b04 	vpush	{d8-d9}
 801cf0c:	b0d9      	sub	sp, #356	@ 0x164
 801cf0e:	4690      	mov	r8, r2
 801cf10:	9001      	str	r0, [sp, #4]
 801cf12:	4ab6      	ldr	r2, [pc, #728]	@ (801d1ec <__kernel_rem_pio2f+0x2e8>)
 801cf14:	9866      	ldr	r0, [sp, #408]	@ 0x198
 801cf16:	f118 0f04 	cmn.w	r8, #4
 801cf1a:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 801cf1e:	460f      	mov	r7, r1
 801cf20:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 801cf24:	db26      	blt.n	801cf74 <__kernel_rem_pio2f+0x70>
 801cf26:	f1b8 0203 	subs.w	r2, r8, #3
 801cf2a:	bf48      	it	mi
 801cf2c:	f108 0204 	addmi.w	r2, r8, #4
 801cf30:	10d2      	asrs	r2, r2, #3
 801cf32:	1c55      	adds	r5, r2, #1
 801cf34:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 801cf36:	ed9f 7ab1 	vldr	s14, [pc, #708]	@ 801d1fc <__kernel_rem_pio2f+0x2f8>
 801cf3a:	00e8      	lsls	r0, r5, #3
 801cf3c:	eba2 060b 	sub.w	r6, r2, fp
 801cf40:	9002      	str	r0, [sp, #8]
 801cf42:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 801cf46:	eb0a 0c0b 	add.w	ip, sl, fp
 801cf4a:	ac1c      	add	r4, sp, #112	@ 0x70
 801cf4c:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 801cf50:	2000      	movs	r0, #0
 801cf52:	4560      	cmp	r0, ip
 801cf54:	dd10      	ble.n	801cf78 <__kernel_rem_pio2f+0x74>
 801cf56:	a91c      	add	r1, sp, #112	@ 0x70
 801cf58:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 801cf5c:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 801cf60:	2600      	movs	r6, #0
 801cf62:	4556      	cmp	r6, sl
 801cf64:	dc24      	bgt.n	801cfb0 <__kernel_rem_pio2f+0xac>
 801cf66:	f8dd e004 	ldr.w	lr, [sp, #4]
 801cf6a:	eddf 7aa4 	vldr	s15, [pc, #656]	@ 801d1fc <__kernel_rem_pio2f+0x2f8>
 801cf6e:	4684      	mov	ip, r0
 801cf70:	2400      	movs	r4, #0
 801cf72:	e016      	b.n	801cfa2 <__kernel_rem_pio2f+0x9e>
 801cf74:	2200      	movs	r2, #0
 801cf76:	e7dc      	b.n	801cf32 <__kernel_rem_pio2f+0x2e>
 801cf78:	42c6      	cmn	r6, r0
 801cf7a:	bf5d      	ittte	pl
 801cf7c:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 801cf80:	ee07 1a90 	vmovpl	s15, r1
 801cf84:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 801cf88:	eef0 7a47 	vmovmi.f32	s15, s14
 801cf8c:	ece4 7a01 	vstmia	r4!, {s15}
 801cf90:	3001      	adds	r0, #1
 801cf92:	e7de      	b.n	801cf52 <__kernel_rem_pio2f+0x4e>
 801cf94:	ecfe 6a01 	vldmia	lr!, {s13}
 801cf98:	ed3c 7a01 	vldmdb	ip!, {s14}
 801cf9c:	eee6 7a87 	vfma.f32	s15, s13, s14
 801cfa0:	3401      	adds	r4, #1
 801cfa2:	455c      	cmp	r4, fp
 801cfa4:	ddf6      	ble.n	801cf94 <__kernel_rem_pio2f+0x90>
 801cfa6:	ece9 7a01 	vstmia	r9!, {s15}
 801cfaa:	3601      	adds	r6, #1
 801cfac:	3004      	adds	r0, #4
 801cfae:	e7d8      	b.n	801cf62 <__kernel_rem_pio2f+0x5e>
 801cfb0:	a908      	add	r1, sp, #32
 801cfb2:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801cfb6:	9104      	str	r1, [sp, #16]
 801cfb8:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 801cfba:	eddf 8a8f 	vldr	s17, [pc, #572]	@ 801d1f8 <__kernel_rem_pio2f+0x2f4>
 801cfbe:	ed9f 9a8d 	vldr	s18, [pc, #564]	@ 801d1f4 <__kernel_rem_pio2f+0x2f0>
 801cfc2:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 801cfc6:	9203      	str	r2, [sp, #12]
 801cfc8:	4654      	mov	r4, sl
 801cfca:	00a2      	lsls	r2, r4, #2
 801cfcc:	9205      	str	r2, [sp, #20]
 801cfce:	aa58      	add	r2, sp, #352	@ 0x160
 801cfd0:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 801cfd4:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 801cfd8:	a944      	add	r1, sp, #272	@ 0x110
 801cfda:	aa08      	add	r2, sp, #32
 801cfdc:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 801cfe0:	4694      	mov	ip, r2
 801cfe2:	4626      	mov	r6, r4
 801cfe4:	2e00      	cmp	r6, #0
 801cfe6:	dc4c      	bgt.n	801d082 <__kernel_rem_pio2f+0x17e>
 801cfe8:	4628      	mov	r0, r5
 801cfea:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801cfee:	f7ff ff23 	bl	801ce38 <scalbnf>
 801cff2:	eeb0 8a40 	vmov.f32	s16, s0
 801cff6:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 801cffa:	ee28 0a00 	vmul.f32	s0, s16, s0
 801cffe:	f000 f9e9 	bl	801d3d4 <floorf>
 801d002:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 801d006:	eea0 8a67 	vfms.f32	s16, s0, s15
 801d00a:	2d00      	cmp	r5, #0
 801d00c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801d010:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 801d014:	ee17 9a90 	vmov	r9, s15
 801d018:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801d01c:	ee38 8a67 	vsub.f32	s16, s16, s15
 801d020:	dd41      	ble.n	801d0a6 <__kernel_rem_pio2f+0x1a2>
 801d022:	f104 3cff 	add.w	ip, r4, #4294967295	@ 0xffffffff
 801d026:	a908      	add	r1, sp, #32
 801d028:	f1c5 0e08 	rsb	lr, r5, #8
 801d02c:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 801d030:	fa46 f00e 	asr.w	r0, r6, lr
 801d034:	4481      	add	r9, r0
 801d036:	fa00 f00e 	lsl.w	r0, r0, lr
 801d03a:	1a36      	subs	r6, r6, r0
 801d03c:	f1c5 0007 	rsb	r0, r5, #7
 801d040:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 801d044:	4106      	asrs	r6, r0
 801d046:	2e00      	cmp	r6, #0
 801d048:	dd3c      	ble.n	801d0c4 <__kernel_rem_pio2f+0x1c0>
 801d04a:	f04f 0e00 	mov.w	lr, #0
 801d04e:	f109 0901 	add.w	r9, r9, #1
 801d052:	4670      	mov	r0, lr
 801d054:	4574      	cmp	r4, lr
 801d056:	dc68      	bgt.n	801d12a <__kernel_rem_pio2f+0x226>
 801d058:	2d00      	cmp	r5, #0
 801d05a:	dd03      	ble.n	801d064 <__kernel_rem_pio2f+0x160>
 801d05c:	2d01      	cmp	r5, #1
 801d05e:	d074      	beq.n	801d14a <__kernel_rem_pio2f+0x246>
 801d060:	2d02      	cmp	r5, #2
 801d062:	d07d      	beq.n	801d160 <__kernel_rem_pio2f+0x25c>
 801d064:	2e02      	cmp	r6, #2
 801d066:	d12d      	bne.n	801d0c4 <__kernel_rem_pio2f+0x1c0>
 801d068:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 801d06c:	ee30 8a48 	vsub.f32	s16, s0, s16
 801d070:	b340      	cbz	r0, 801d0c4 <__kernel_rem_pio2f+0x1c0>
 801d072:	4628      	mov	r0, r5
 801d074:	9306      	str	r3, [sp, #24]
 801d076:	f7ff fedf 	bl	801ce38 <scalbnf>
 801d07a:	9b06      	ldr	r3, [sp, #24]
 801d07c:	ee38 8a40 	vsub.f32	s16, s16, s0
 801d080:	e020      	b.n	801d0c4 <__kernel_rem_pio2f+0x1c0>
 801d082:	ee60 7a28 	vmul.f32	s15, s0, s17
 801d086:	3e01      	subs	r6, #1
 801d088:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801d08c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801d090:	eea7 0ac9 	vfms.f32	s0, s15, s18
 801d094:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801d098:	ecac 0a01 	vstmia	ip!, {s0}
 801d09c:	ed30 0a01 	vldmdb	r0!, {s0}
 801d0a0:	ee37 0a80 	vadd.f32	s0, s15, s0
 801d0a4:	e79e      	b.n	801cfe4 <__kernel_rem_pio2f+0xe0>
 801d0a6:	d105      	bne.n	801d0b4 <__kernel_rem_pio2f+0x1b0>
 801d0a8:	1e60      	subs	r0, r4, #1
 801d0aa:	a908      	add	r1, sp, #32
 801d0ac:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 801d0b0:	11f6      	asrs	r6, r6, #7
 801d0b2:	e7c8      	b.n	801d046 <__kernel_rem_pio2f+0x142>
 801d0b4:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 801d0b8:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801d0bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d0c0:	da31      	bge.n	801d126 <__kernel_rem_pio2f+0x222>
 801d0c2:	2600      	movs	r6, #0
 801d0c4:	eeb5 8a40 	vcmp.f32	s16, #0.0
 801d0c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d0cc:	f040 8098 	bne.w	801d200 <__kernel_rem_pio2f+0x2fc>
 801d0d0:	1e60      	subs	r0, r4, #1
 801d0d2:	2200      	movs	r2, #0
 801d0d4:	4550      	cmp	r0, sl
 801d0d6:	da4b      	bge.n	801d170 <__kernel_rem_pio2f+0x26c>
 801d0d8:	2a00      	cmp	r2, #0
 801d0da:	d065      	beq.n	801d1a8 <__kernel_rem_pio2f+0x2a4>
 801d0dc:	3c01      	subs	r4, #1
 801d0de:	ab08      	add	r3, sp, #32
 801d0e0:	3d08      	subs	r5, #8
 801d0e2:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 801d0e6:	2b00      	cmp	r3, #0
 801d0e8:	d0f8      	beq.n	801d0dc <__kernel_rem_pio2f+0x1d8>
 801d0ea:	4628      	mov	r0, r5
 801d0ec:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 801d0f0:	f7ff fea2 	bl	801ce38 <scalbnf>
 801d0f4:	1c63      	adds	r3, r4, #1
 801d0f6:	aa44      	add	r2, sp, #272	@ 0x110
 801d0f8:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 801d1f8 <__kernel_rem_pio2f+0x2f4>
 801d0fc:	0099      	lsls	r1, r3, #2
 801d0fe:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801d102:	4623      	mov	r3, r4
 801d104:	2b00      	cmp	r3, #0
 801d106:	f280 80a9 	bge.w	801d25c <__kernel_rem_pio2f+0x358>
 801d10a:	4623      	mov	r3, r4
 801d10c:	2b00      	cmp	r3, #0
 801d10e:	f2c0 80c7 	blt.w	801d2a0 <__kernel_rem_pio2f+0x39c>
 801d112:	aa44      	add	r2, sp, #272	@ 0x110
 801d114:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 801d118:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 801d1f0 <__kernel_rem_pio2f+0x2ec>
 801d11c:	eddf 7a37 	vldr	s15, [pc, #220]	@ 801d1fc <__kernel_rem_pio2f+0x2f8>
 801d120:	2000      	movs	r0, #0
 801d122:	1ae2      	subs	r2, r4, r3
 801d124:	e0b1      	b.n	801d28a <__kernel_rem_pio2f+0x386>
 801d126:	2602      	movs	r6, #2
 801d128:	e78f      	b.n	801d04a <__kernel_rem_pio2f+0x146>
 801d12a:	f852 1b04 	ldr.w	r1, [r2], #4
 801d12e:	b948      	cbnz	r0, 801d144 <__kernel_rem_pio2f+0x240>
 801d130:	b121      	cbz	r1, 801d13c <__kernel_rem_pio2f+0x238>
 801d132:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 801d136:	f842 1c04 	str.w	r1, [r2, #-4]
 801d13a:	2101      	movs	r1, #1
 801d13c:	f10e 0e01 	add.w	lr, lr, #1
 801d140:	4608      	mov	r0, r1
 801d142:	e787      	b.n	801d054 <__kernel_rem_pio2f+0x150>
 801d144:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 801d148:	e7f5      	b.n	801d136 <__kernel_rem_pio2f+0x232>
 801d14a:	f104 3cff 	add.w	ip, r4, #4294967295	@ 0xffffffff
 801d14e:	aa08      	add	r2, sp, #32
 801d150:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 801d154:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 801d158:	a908      	add	r1, sp, #32
 801d15a:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 801d15e:	e781      	b.n	801d064 <__kernel_rem_pio2f+0x160>
 801d160:	f104 3cff 	add.w	ip, r4, #4294967295	@ 0xffffffff
 801d164:	aa08      	add	r2, sp, #32
 801d166:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 801d16a:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 801d16e:	e7f3      	b.n	801d158 <__kernel_rem_pio2f+0x254>
 801d170:	a908      	add	r1, sp, #32
 801d172:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 801d176:	3801      	subs	r0, #1
 801d178:	430a      	orrs	r2, r1
 801d17a:	e7ab      	b.n	801d0d4 <__kernel_rem_pio2f+0x1d0>
 801d17c:	3201      	adds	r2, #1
 801d17e:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 801d182:	2e00      	cmp	r6, #0
 801d184:	d0fa      	beq.n	801d17c <__kernel_rem_pio2f+0x278>
 801d186:	9905      	ldr	r1, [sp, #20]
 801d188:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 801d18c:	eb0d 0001 	add.w	r0, sp, r1
 801d190:	18e6      	adds	r6, r4, r3
 801d192:	a91c      	add	r1, sp, #112	@ 0x70
 801d194:	f104 0c01 	add.w	ip, r4, #1
 801d198:	384c      	subs	r0, #76	@ 0x4c
 801d19a:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 801d19e:	4422      	add	r2, r4
 801d1a0:	4562      	cmp	r2, ip
 801d1a2:	da04      	bge.n	801d1ae <__kernel_rem_pio2f+0x2aa>
 801d1a4:	4614      	mov	r4, r2
 801d1a6:	e710      	b.n	801cfca <__kernel_rem_pio2f+0xc6>
 801d1a8:	9804      	ldr	r0, [sp, #16]
 801d1aa:	2201      	movs	r2, #1
 801d1ac:	e7e7      	b.n	801d17e <__kernel_rem_pio2f+0x27a>
 801d1ae:	9903      	ldr	r1, [sp, #12]
 801d1b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 801d1b4:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 801d1b8:	9105      	str	r1, [sp, #20]
 801d1ba:	ee07 1a90 	vmov	s15, r1
 801d1be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801d1c2:	2400      	movs	r4, #0
 801d1c4:	ece6 7a01 	vstmia	r6!, {s15}
 801d1c8:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 801d1fc <__kernel_rem_pio2f+0x2f8>
 801d1cc:	46b1      	mov	r9, r6
 801d1ce:	455c      	cmp	r4, fp
 801d1d0:	dd04      	ble.n	801d1dc <__kernel_rem_pio2f+0x2d8>
 801d1d2:	ece0 7a01 	vstmia	r0!, {s15}
 801d1d6:	f10c 0c01 	add.w	ip, ip, #1
 801d1da:	e7e1      	b.n	801d1a0 <__kernel_rem_pio2f+0x29c>
 801d1dc:	ecfe 6a01 	vldmia	lr!, {s13}
 801d1e0:	ed39 7a01 	vldmdb	r9!, {s14}
 801d1e4:	3401      	adds	r4, #1
 801d1e6:	eee6 7a87 	vfma.f32	s15, s13, s14
 801d1ea:	e7f0      	b.n	801d1ce <__kernel_rem_pio2f+0x2ca>
 801d1ec:	0801f0b8 	.word	0x0801f0b8
 801d1f0:	0801f08c 	.word	0x0801f08c
 801d1f4:	43800000 	.word	0x43800000
 801d1f8:	3b800000 	.word	0x3b800000
 801d1fc:	00000000 	.word	0x00000000
 801d200:	9b02      	ldr	r3, [sp, #8]
 801d202:	eeb0 0a48 	vmov.f32	s0, s16
 801d206:	eba3 0008 	sub.w	r0, r3, r8
 801d20a:	f7ff fe15 	bl	801ce38 <scalbnf>
 801d20e:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 801d1f4 <__kernel_rem_pio2f+0x2f0>
 801d212:	eeb4 0ac7 	vcmpe.f32	s0, s14
 801d216:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d21a:	db19      	blt.n	801d250 <__kernel_rem_pio2f+0x34c>
 801d21c:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 801d1f8 <__kernel_rem_pio2f+0x2f4>
 801d220:	ee60 7a27 	vmul.f32	s15, s0, s15
 801d224:	aa08      	add	r2, sp, #32
 801d226:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801d22a:	3508      	adds	r5, #8
 801d22c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801d230:	eea7 0ac7 	vfms.f32	s0, s15, s14
 801d234:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801d238:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801d23c:	ee10 3a10 	vmov	r3, s0
 801d240:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 801d244:	ee17 3a90 	vmov	r3, s15
 801d248:	3401      	adds	r4, #1
 801d24a:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 801d24e:	e74c      	b.n	801d0ea <__kernel_rem_pio2f+0x1e6>
 801d250:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801d254:	aa08      	add	r2, sp, #32
 801d256:	ee10 3a10 	vmov	r3, s0
 801d25a:	e7f6      	b.n	801d24a <__kernel_rem_pio2f+0x346>
 801d25c:	a808      	add	r0, sp, #32
 801d25e:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 801d262:	9001      	str	r0, [sp, #4]
 801d264:	ee07 0a90 	vmov	s15, r0
 801d268:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801d26c:	3b01      	subs	r3, #1
 801d26e:	ee67 7a80 	vmul.f32	s15, s15, s0
 801d272:	ee20 0a07 	vmul.f32	s0, s0, s14
 801d276:	ed62 7a01 	vstmdb	r2!, {s15}
 801d27a:	e743      	b.n	801d104 <__kernel_rem_pio2f+0x200>
 801d27c:	ecfc 6a01 	vldmia	ip!, {s13}
 801d280:	ecb5 7a01 	vldmia	r5!, {s14}
 801d284:	eee6 7a87 	vfma.f32	s15, s13, s14
 801d288:	3001      	adds	r0, #1
 801d28a:	4550      	cmp	r0, sl
 801d28c:	dc01      	bgt.n	801d292 <__kernel_rem_pio2f+0x38e>
 801d28e:	4290      	cmp	r0, r2
 801d290:	ddf4      	ble.n	801d27c <__kernel_rem_pio2f+0x378>
 801d292:	a858      	add	r0, sp, #352	@ 0x160
 801d294:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 801d298:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 801d29c:	3b01      	subs	r3, #1
 801d29e:	e735      	b.n	801d10c <__kernel_rem_pio2f+0x208>
 801d2a0:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 801d2a2:	2b02      	cmp	r3, #2
 801d2a4:	dc09      	bgt.n	801d2ba <__kernel_rem_pio2f+0x3b6>
 801d2a6:	2b00      	cmp	r3, #0
 801d2a8:	dc27      	bgt.n	801d2fa <__kernel_rem_pio2f+0x3f6>
 801d2aa:	d040      	beq.n	801d32e <__kernel_rem_pio2f+0x42a>
 801d2ac:	f009 0007 	and.w	r0, r9, #7
 801d2b0:	b059      	add	sp, #356	@ 0x164
 801d2b2:	ecbd 8b04 	vpop	{d8-d9}
 801d2b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d2ba:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 801d2bc:	2b03      	cmp	r3, #3
 801d2be:	d1f5      	bne.n	801d2ac <__kernel_rem_pio2f+0x3a8>
 801d2c0:	aa30      	add	r2, sp, #192	@ 0xc0
 801d2c2:	1f0b      	subs	r3, r1, #4
 801d2c4:	4413      	add	r3, r2
 801d2c6:	461a      	mov	r2, r3
 801d2c8:	4620      	mov	r0, r4
 801d2ca:	2800      	cmp	r0, #0
 801d2cc:	dc50      	bgt.n	801d370 <__kernel_rem_pio2f+0x46c>
 801d2ce:	4622      	mov	r2, r4
 801d2d0:	2a01      	cmp	r2, #1
 801d2d2:	dc5d      	bgt.n	801d390 <__kernel_rem_pio2f+0x48c>
 801d2d4:	ab30      	add	r3, sp, #192	@ 0xc0
 801d2d6:	ed5f 7a37 	vldr	s15, [pc, #-220]	@ 801d1fc <__kernel_rem_pio2f+0x2f8>
 801d2da:	440b      	add	r3, r1
 801d2dc:	2c01      	cmp	r4, #1
 801d2de:	dc67      	bgt.n	801d3b0 <__kernel_rem_pio2f+0x4ac>
 801d2e0:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 801d2e4:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 801d2e8:	2e00      	cmp	r6, #0
 801d2ea:	d167      	bne.n	801d3bc <__kernel_rem_pio2f+0x4b8>
 801d2ec:	edc7 6a00 	vstr	s13, [r7]
 801d2f0:	ed87 7a01 	vstr	s14, [r7, #4]
 801d2f4:	edc7 7a02 	vstr	s15, [r7, #8]
 801d2f8:	e7d8      	b.n	801d2ac <__kernel_rem_pio2f+0x3a8>
 801d2fa:	ab30      	add	r3, sp, #192	@ 0xc0
 801d2fc:	ed1f 7a41 	vldr	s14, [pc, #-260]	@ 801d1fc <__kernel_rem_pio2f+0x2f8>
 801d300:	440b      	add	r3, r1
 801d302:	4622      	mov	r2, r4
 801d304:	2a00      	cmp	r2, #0
 801d306:	da24      	bge.n	801d352 <__kernel_rem_pio2f+0x44e>
 801d308:	b34e      	cbz	r6, 801d35e <__kernel_rem_pio2f+0x45a>
 801d30a:	eef1 7a47 	vneg.f32	s15, s14
 801d30e:	edc7 7a00 	vstr	s15, [r7]
 801d312:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 801d316:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801d31a:	aa31      	add	r2, sp, #196	@ 0xc4
 801d31c:	2301      	movs	r3, #1
 801d31e:	429c      	cmp	r4, r3
 801d320:	da20      	bge.n	801d364 <__kernel_rem_pio2f+0x460>
 801d322:	b10e      	cbz	r6, 801d328 <__kernel_rem_pio2f+0x424>
 801d324:	eef1 7a67 	vneg.f32	s15, s15
 801d328:	edc7 7a01 	vstr	s15, [r7, #4]
 801d32c:	e7be      	b.n	801d2ac <__kernel_rem_pio2f+0x3a8>
 801d32e:	ab30      	add	r3, sp, #192	@ 0xc0
 801d330:	ed5f 7a4e 	vldr	s15, [pc, #-312]	@ 801d1fc <__kernel_rem_pio2f+0x2f8>
 801d334:	440b      	add	r3, r1
 801d336:	2c00      	cmp	r4, #0
 801d338:	da05      	bge.n	801d346 <__kernel_rem_pio2f+0x442>
 801d33a:	b10e      	cbz	r6, 801d340 <__kernel_rem_pio2f+0x43c>
 801d33c:	eef1 7a67 	vneg.f32	s15, s15
 801d340:	edc7 7a00 	vstr	s15, [r7]
 801d344:	e7b2      	b.n	801d2ac <__kernel_rem_pio2f+0x3a8>
 801d346:	ed33 7a01 	vldmdb	r3!, {s14}
 801d34a:	3c01      	subs	r4, #1
 801d34c:	ee77 7a87 	vadd.f32	s15, s15, s14
 801d350:	e7f1      	b.n	801d336 <__kernel_rem_pio2f+0x432>
 801d352:	ed73 7a01 	vldmdb	r3!, {s15}
 801d356:	3a01      	subs	r2, #1
 801d358:	ee37 7a27 	vadd.f32	s14, s14, s15
 801d35c:	e7d2      	b.n	801d304 <__kernel_rem_pio2f+0x400>
 801d35e:	eef0 7a47 	vmov.f32	s15, s14
 801d362:	e7d4      	b.n	801d30e <__kernel_rem_pio2f+0x40a>
 801d364:	ecb2 7a01 	vldmia	r2!, {s14}
 801d368:	3301      	adds	r3, #1
 801d36a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801d36e:	e7d6      	b.n	801d31e <__kernel_rem_pio2f+0x41a>
 801d370:	ed72 7a01 	vldmdb	r2!, {s15}
 801d374:	edd2 6a01 	vldr	s13, [r2, #4]
 801d378:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801d37c:	3801      	subs	r0, #1
 801d37e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801d382:	ed82 7a00 	vstr	s14, [r2]
 801d386:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801d38a:	edc2 7a01 	vstr	s15, [r2, #4]
 801d38e:	e79c      	b.n	801d2ca <__kernel_rem_pio2f+0x3c6>
 801d390:	ed73 7a01 	vldmdb	r3!, {s15}
 801d394:	edd3 6a01 	vldr	s13, [r3, #4]
 801d398:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801d39c:	3a01      	subs	r2, #1
 801d39e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801d3a2:	ed83 7a00 	vstr	s14, [r3]
 801d3a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801d3aa:	edc3 7a01 	vstr	s15, [r3, #4]
 801d3ae:	e78f      	b.n	801d2d0 <__kernel_rem_pio2f+0x3cc>
 801d3b0:	ed33 7a01 	vldmdb	r3!, {s14}
 801d3b4:	3c01      	subs	r4, #1
 801d3b6:	ee77 7a87 	vadd.f32	s15, s15, s14
 801d3ba:	e78f      	b.n	801d2dc <__kernel_rem_pio2f+0x3d8>
 801d3bc:	eef1 6a66 	vneg.f32	s13, s13
 801d3c0:	eeb1 7a47 	vneg.f32	s14, s14
 801d3c4:	edc7 6a00 	vstr	s13, [r7]
 801d3c8:	ed87 7a01 	vstr	s14, [r7, #4]
 801d3cc:	eef1 7a67 	vneg.f32	s15, s15
 801d3d0:	e790      	b.n	801d2f4 <__kernel_rem_pio2f+0x3f0>
 801d3d2:	bf00      	nop

0801d3d4 <floorf>:
 801d3d4:	ee10 3a10 	vmov	r3, s0
 801d3d8:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801d3dc:	3a7f      	subs	r2, #127	@ 0x7f
 801d3de:	2a16      	cmp	r2, #22
 801d3e0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 801d3e4:	dc2b      	bgt.n	801d43e <floorf+0x6a>
 801d3e6:	2a00      	cmp	r2, #0
 801d3e8:	da12      	bge.n	801d410 <floorf+0x3c>
 801d3ea:	eddf 7a19 	vldr	s15, [pc, #100]	@ 801d450 <floorf+0x7c>
 801d3ee:	ee30 0a27 	vadd.f32	s0, s0, s15
 801d3f2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801d3f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d3fa:	dd06      	ble.n	801d40a <floorf+0x36>
 801d3fc:	2b00      	cmp	r3, #0
 801d3fe:	da24      	bge.n	801d44a <floorf+0x76>
 801d400:	2900      	cmp	r1, #0
 801d402:	4b14      	ldr	r3, [pc, #80]	@ (801d454 <floorf+0x80>)
 801d404:	bf08      	it	eq
 801d406:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 801d40a:	ee00 3a10 	vmov	s0, r3
 801d40e:	4770      	bx	lr
 801d410:	4911      	ldr	r1, [pc, #68]	@ (801d458 <floorf+0x84>)
 801d412:	4111      	asrs	r1, r2
 801d414:	420b      	tst	r3, r1
 801d416:	d0fa      	beq.n	801d40e <floorf+0x3a>
 801d418:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 801d450 <floorf+0x7c>
 801d41c:	ee30 0a27 	vadd.f32	s0, s0, s15
 801d420:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801d424:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d428:	ddef      	ble.n	801d40a <floorf+0x36>
 801d42a:	2b00      	cmp	r3, #0
 801d42c:	bfbe      	ittt	lt
 801d42e:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 801d432:	fa40 f202 	asrlt.w	r2, r0, r2
 801d436:	189b      	addlt	r3, r3, r2
 801d438:	ea23 0301 	bic.w	r3, r3, r1
 801d43c:	e7e5      	b.n	801d40a <floorf+0x36>
 801d43e:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 801d442:	d3e4      	bcc.n	801d40e <floorf+0x3a>
 801d444:	ee30 0a00 	vadd.f32	s0, s0, s0
 801d448:	4770      	bx	lr
 801d44a:	2300      	movs	r3, #0
 801d44c:	e7dd      	b.n	801d40a <floorf+0x36>
 801d44e:	bf00      	nop
 801d450:	7149f2ca 	.word	0x7149f2ca
 801d454:	bf800000 	.word	0xbf800000
 801d458:	007fffff 	.word	0x007fffff

0801d45c <_init>:
 801d45c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d45e:	bf00      	nop
 801d460:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801d462:	bc08      	pop	{r3}
 801d464:	469e      	mov	lr, r3
 801d466:	4770      	bx	lr

0801d468 <_fini>:
 801d468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d46a:	bf00      	nop
 801d46c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801d46e:	bc08      	pop	{r3}
 801d470:	469e      	mov	lr, r3
 801d472:	4770      	bx	lr
