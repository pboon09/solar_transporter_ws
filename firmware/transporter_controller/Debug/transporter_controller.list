
transporter_controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005be4  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003e0  08005dbc  08005dbc  00006dbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800619c  0800619c  0000805c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  0800619c  0800619c  0000805c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  0800619c  0800619c  0000805c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800619c  0800619c  0000719c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080061a0  080061a0  000071a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080061a4  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004d8  2000005c  08006200  0000805c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000534  08006200  00008534  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000805c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f383  00000000  00000000  0000808c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002775  00000000  00000000  0001740f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000de0  00000000  00000000  00019b88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a8e  00000000  00000000  0001a968  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027887  00000000  00000000  0001b3f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010a3c  00000000  00000000  00042c7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f8184  00000000  00000000  000536b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014b83d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003dec  00000000  00000000  0014b880  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  0014f66c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000005c 	.word	0x2000005c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08005da4 	.word	0x08005da4

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000060 	.word	0x20000060
 8000214:	08005da4 	.word	0x08005da4

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__aeabi_d2uiz>:
 80009b4:	004a      	lsls	r2, r1, #1
 80009b6:	d211      	bcs.n	80009dc <__aeabi_d2uiz+0x28>
 80009b8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80009bc:	d211      	bcs.n	80009e2 <__aeabi_d2uiz+0x2e>
 80009be:	d50d      	bpl.n	80009dc <__aeabi_d2uiz+0x28>
 80009c0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80009c4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009c8:	d40e      	bmi.n	80009e8 <__aeabi_d2uiz+0x34>
 80009ca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009ce:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80009d2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009d6:	fa23 f002 	lsr.w	r0, r3, r2
 80009da:	4770      	bx	lr
 80009dc:	f04f 0000 	mov.w	r0, #0
 80009e0:	4770      	bx	lr
 80009e2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009e6:	d102      	bne.n	80009ee <__aeabi_d2uiz+0x3a>
 80009e8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80009ec:	4770      	bx	lr
 80009ee:	f04f 0000 	mov.w	r0, #0
 80009f2:	4770      	bx	lr

080009f4 <__aeabi_d2f>:
 80009f4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009f8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80009fc:	bf24      	itt	cs
 80009fe:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a02:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a06:	d90d      	bls.n	8000a24 <__aeabi_d2f+0x30>
 8000a08:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a0c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a10:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a14:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a18:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a1c:	bf08      	it	eq
 8000a1e:	f020 0001 	biceq.w	r0, r0, #1
 8000a22:	4770      	bx	lr
 8000a24:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a28:	d121      	bne.n	8000a6e <__aeabi_d2f+0x7a>
 8000a2a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a2e:	bfbc      	itt	lt
 8000a30:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a34:	4770      	bxlt	lr
 8000a36:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a3a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a3e:	f1c2 0218 	rsb	r2, r2, #24
 8000a42:	f1c2 0c20 	rsb	ip, r2, #32
 8000a46:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a4a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a4e:	bf18      	it	ne
 8000a50:	f040 0001 	orrne.w	r0, r0, #1
 8000a54:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a58:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a5c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a60:	ea40 000c 	orr.w	r0, r0, ip
 8000a64:	fa23 f302 	lsr.w	r3, r3, r2
 8000a68:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a6c:	e7cc      	b.n	8000a08 <__aeabi_d2f+0x14>
 8000a6e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a72:	d107      	bne.n	8000a84 <__aeabi_d2f+0x90>
 8000a74:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a78:	bf1e      	ittt	ne
 8000a7a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000a7e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a82:	4770      	bxne	lr
 8000a84:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a88:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a8c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop

08000a94 <PID_CONTROLLER_Init>:
  if (_u > _upper_limit) return _upper_limit;
  else if (_u < _lower_limit) return _lower_limit;
  return (int32_t)_u;
}

void PID_CONTROLLER_Init(PID_CONTROLLER *controller, float _Kp, float _Ki, float _Kd, float _u_max) {
 8000a94:	b480      	push	{r7}
 8000a96:	b087      	sub	sp, #28
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6178      	str	r0, [r7, #20]
 8000a9c:	ed87 0a04 	vstr	s0, [r7, #16]
 8000aa0:	edc7 0a03 	vstr	s1, [r7, #12]
 8000aa4:	ed87 1a02 	vstr	s2, [r7, #8]
 8000aa8:	edc7 1a01 	vstr	s3, [r7, #4]
  controller->Kp = _Kp;
 8000aac:	697b      	ldr	r3, [r7, #20]
 8000aae:	693a      	ldr	r2, [r7, #16]
 8000ab0:	601a      	str	r2, [r3, #0]
  controller->Ki = _Ki;
 8000ab2:	697b      	ldr	r3, [r7, #20]
 8000ab4:	68fa      	ldr	r2, [r7, #12]
 8000ab6:	605a      	str	r2, [r3, #4]
  controller->Kd = _Kd;
 8000ab8:	697b      	ldr	r3, [r7, #20]
 8000aba:	68ba      	ldr	r2, [r7, #8]
 8000abc:	609a      	str	r2, [r3, #8]
  controller->u_max = _u_max;
 8000abe:	697b      	ldr	r3, [r7, #20]
 8000ac0:	687a      	ldr	r2, [r7, #4]
 8000ac2:	60da      	str	r2, [r3, #12]
  controller->ek_1 = 0;
 8000ac4:	697b      	ldr	r3, [r7, #20]
 8000ac6:	f04f 0200 	mov.w	r2, #0
 8000aca:	611a      	str	r2, [r3, #16]
  controller->ek_2 = 0;
 8000acc:	697b      	ldr	r3, [r7, #20]
 8000ace:	f04f 0200 	mov.w	r2, #0
 8000ad2:	615a      	str	r2, [r3, #20]
  controller->u = 0;
 8000ad4:	697b      	ldr	r3, [r7, #20]
 8000ad6:	f04f 0200 	mov.w	r2, #0
 8000ada:	619a      	str	r2, [r3, #24]

}
 8000adc:	bf00      	nop
 8000ade:	371c      	adds	r7, #28
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae6:	4770      	bx	lr

08000ae8 <MDXX_GPIO_init>:
	PWM_init(&(mdxx->pwm), htimp, timp_chx);
	mdxx->mode = 0;
}

void MDXX_GPIO_init(MDXX *mdxx, TIM_HandleTypeDef *htimp, uint16_t timp_chx,
		GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b084      	sub	sp, #16
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	60f8      	str	r0, [r7, #12]
 8000af0:	60b9      	str	r1, [r7, #8]
 8000af2:	603b      	str	r3, [r7, #0]
 8000af4:	4613      	mov	r3, r2
 8000af6:	80fb      	strh	r3, [r7, #6]
	mdxx->htimp = htimp;
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	68ba      	ldr	r2, [r7, #8]
 8000afc:	609a      	str	r2, [r3, #8]
	mdxx->timp_chx = timp_chx;
 8000afe:	68fb      	ldr	r3, [r7, #12]
 8000b00:	88fa      	ldrh	r2, [r7, #6]
 8000b02:	819a      	strh	r2, [r3, #12]
	PWM_init(&(mdxx->pwm), htimp, timp_chx);
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	3328      	adds	r3, #40	@ 0x28
 8000b08:	88fa      	ldrh	r2, [r7, #6]
 8000b0a:	68b9      	ldr	r1, [r7, #8]
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	f000 fa63 	bl	8000fd8 <PWM_init>
	mdxx->GPIOx = GPIOx;
 8000b12:	68fb      	ldr	r3, [r7, #12]
 8000b14:	683a      	ldr	r2, [r7, #0]
 8000b16:	645a      	str	r2, [r3, #68]	@ 0x44
	mdxx->GPIO_Pin = GPIO_Pin;
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	8b3a      	ldrh	r2, [r7, #24]
 8000b1c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
	mdxx->mode = 1;
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	2201      	movs	r2, #1
 8000b24:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
}
 8000b28:	bf00      	nop
 8000b2a:	3710      	adds	r7, #16
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}

08000b30 <MDXX_set_range>:
			mdxx->cmd = fabs(duty);
		}
	}
}

void MDXX_set_range(MDXX *mdxx, float freq, float duty) {
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b084      	sub	sp, #16
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	60f8      	str	r0, [r7, #12]
 8000b38:	ed87 0a02 	vstr	s0, [r7, #8]
 8000b3c:	edc7 0a01 	vstr	s1, [r7, #4]
	if (mdxx->mode == 0) {
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d15f      	bne.n	8000c0a <MDXX_set_range+0xda>
		if (duty == 0) {
 8000b4a:	edd7 7a01 	vldr	s15, [r7, #4]
 8000b4e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000b52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b56:	d115      	bne.n	8000b84 <MDXX_set_range+0x54>
			PWM_write_range(&(mdxx->dir), freq, 0);
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	3310      	adds	r3, #16
 8000b5c:	eddf 0a5f 	vldr	s1, [pc, #380]	@ 8000cdc <MDXX_set_range+0x1ac>
 8000b60:	ed97 0a02 	vldr	s0, [r7, #8]
 8000b64:	4618      	mov	r0, r3
 8000b66:	f000 fa5b 	bl	8001020 <PWM_write_range>
			PWM_write_range(&(mdxx->pwm), freq, 0);
 8000b6a:	68fb      	ldr	r3, [r7, #12]
 8000b6c:	3328      	adds	r3, #40	@ 0x28
 8000b6e:	eddf 0a5b 	vldr	s1, [pc, #364]	@ 8000cdc <MDXX_set_range+0x1ac>
 8000b72:	ed97 0a02 	vldr	s0, [r7, #8]
 8000b76:	4618      	mov	r0, r3
 8000b78:	f000 fa52 	bl	8001020 <PWM_write_range>
			mdxx->cmd = 0;
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	2200      	movs	r2, #0
 8000b80:	641a      	str	r2, [r3, #64]	@ 0x40
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 1);
			PWM_write_range(&(mdxx->pwm), freq, fabs(duty));
			mdxx->cmd = fabs(duty);
		}
	}
}
 8000b82:	e0a6      	b.n	8000cd2 <MDXX_set_range+0x1a2>
		} else if (duty > 0) {
 8000b84:	edd7 7a01 	vldr	s15, [r7, #4]
 8000b88:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000b8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b90:	dd1a      	ble.n	8000bc8 <MDXX_set_range+0x98>
			PWM_write_range(&(mdxx->dir), freq, 0);
 8000b92:	68fb      	ldr	r3, [r7, #12]
 8000b94:	3310      	adds	r3, #16
 8000b96:	eddf 0a51 	vldr	s1, [pc, #324]	@ 8000cdc <MDXX_set_range+0x1ac>
 8000b9a:	ed97 0a02 	vldr	s0, [r7, #8]
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f000 fa3e 	bl	8001020 <PWM_write_range>
			PWM_write_range(&(mdxx->pwm), freq, duty);
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	3328      	adds	r3, #40	@ 0x28
 8000ba8:	edd7 0a01 	vldr	s1, [r7, #4]
 8000bac:	ed97 0a02 	vldr	s0, [r7, #8]
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f000 fa35 	bl	8001020 <PWM_write_range>
			mdxx->cmd = duty;
 8000bb6:	edd7 7a01 	vldr	s15, [r7, #4]
 8000bba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000bbe:	ee17 2a90 	vmov	r2, s15
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8000bc6:	e084      	b.n	8000cd2 <MDXX_set_range+0x1a2>
			PWM_write_range(&(mdxx->dir), freq, 100);
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	3310      	adds	r3, #16
 8000bcc:	eddf 0a44 	vldr	s1, [pc, #272]	@ 8000ce0 <MDXX_set_range+0x1b0>
 8000bd0:	ed97 0a02 	vldr	s0, [r7, #8]
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f000 fa23 	bl	8001020 <PWM_write_range>
			PWM_write_range(&(mdxx->pwm), freq, fabs(duty));
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	3328      	adds	r3, #40	@ 0x28
 8000bde:	edd7 7a01 	vldr	s15, [r7, #4]
 8000be2:	eef0 7ae7 	vabs.f32	s15, s15
 8000be6:	eef0 0a67 	vmov.f32	s1, s15
 8000bea:	ed97 0a02 	vldr	s0, [r7, #8]
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f000 fa16 	bl	8001020 <PWM_write_range>
			mdxx->cmd = fabs(duty);
 8000bf4:	edd7 7a01 	vldr	s15, [r7, #4]
 8000bf8:	eef0 7ae7 	vabs.f32	s15, s15
 8000bfc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000c00:	ee17 2a90 	vmov	r2, s15
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8000c08:	e063      	b.n	8000cd2 <MDXX_set_range+0x1a2>
	} else if (mdxx->mode == 1) {
 8000c0a:	68fb      	ldr	r3, [r7, #12]
 8000c0c:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 8000c10:	2b01      	cmp	r3, #1
 8000c12:	d15e      	bne.n	8000cd2 <MDXX_set_range+0x1a2>
		if (duty == 0) {
 8000c14:	edd7 7a01 	vldr	s15, [r7, #4]
 8000c18:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000c1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c20:	d115      	bne.n	8000c4e <MDXX_set_range+0x11e>
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 0);
 8000c22:	68fb      	ldr	r3, [r7, #12]
 8000c24:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	4619      	mov	r1, r3
 8000c30:	f001 fed4 	bl	80029dc <HAL_GPIO_WritePin>
			PWM_write_range(&(mdxx->pwm), freq, 0);
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	3328      	adds	r3, #40	@ 0x28
 8000c38:	eddf 0a28 	vldr	s1, [pc, #160]	@ 8000cdc <MDXX_set_range+0x1ac>
 8000c3c:	ed97 0a02 	vldr	s0, [r7, #8]
 8000c40:	4618      	mov	r0, r3
 8000c42:	f000 f9ed 	bl	8001020 <PWM_write_range>
			mdxx->cmd = 0;
 8000c46:	68fb      	ldr	r3, [r7, #12]
 8000c48:	2200      	movs	r2, #0
 8000c4a:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8000c4c:	e041      	b.n	8000cd2 <MDXX_set_range+0x1a2>
		} else if (duty > 0) {
 8000c4e:	edd7 7a01 	vldr	s15, [r7, #4]
 8000c52:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000c56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c5a:	dd1a      	ble.n	8000c92 <MDXX_set_range+0x162>
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 0);
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8000c66:	2200      	movs	r2, #0
 8000c68:	4619      	mov	r1, r3
 8000c6a:	f001 feb7 	bl	80029dc <HAL_GPIO_WritePin>
			PWM_write_range(&(mdxx->pwm), freq, duty);
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	3328      	adds	r3, #40	@ 0x28
 8000c72:	edd7 0a01 	vldr	s1, [r7, #4]
 8000c76:	ed97 0a02 	vldr	s0, [r7, #8]
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	f000 f9d0 	bl	8001020 <PWM_write_range>
			mdxx->cmd = duty;
 8000c80:	edd7 7a01 	vldr	s15, [r7, #4]
 8000c84:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000c88:	ee17 2a90 	vmov	r2, s15
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8000c90:	e01f      	b.n	8000cd2 <MDXX_set_range+0x1a2>
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 1);
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8000c9c:	2201      	movs	r2, #1
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	f001 fe9c 	bl	80029dc <HAL_GPIO_WritePin>
			PWM_write_range(&(mdxx->pwm), freq, fabs(duty));
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	3328      	adds	r3, #40	@ 0x28
 8000ca8:	edd7 7a01 	vldr	s15, [r7, #4]
 8000cac:	eef0 7ae7 	vabs.f32	s15, s15
 8000cb0:	eef0 0a67 	vmov.f32	s1, s15
 8000cb4:	ed97 0a02 	vldr	s0, [r7, #8]
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f000 f9b1 	bl	8001020 <PWM_write_range>
			mdxx->cmd = fabs(duty);
 8000cbe:	edd7 7a01 	vldr	s15, [r7, #4]
 8000cc2:	eef0 7ae7 	vabs.f32	s15, s15
 8000cc6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000cca:	ee17 2a90 	vmov	r2, s15
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8000cd2:	bf00      	nop
 8000cd4:	3710      	adds	r7, #16
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	00000000 	.word	0x00000000
 8000ce0:	42c80000 	.word	0x42c80000

08000ce4 <FIR_init>:
 *      Author: transporter
 */
#include "FIR.h"
#include "arm_math.h"

void FIR_init(FIR *fir, uint16_t numTaps, float cutoffFreq, float samplingFreq) {
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	ed2d 8b02 	vpush	{d8}
 8000cea:	b08a      	sub	sp, #40	@ 0x28
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	60f8      	str	r0, [r7, #12]
 8000cf0:	460b      	mov	r3, r1
 8000cf2:	ed87 0a01 	vstr	s0, [r7, #4]
 8000cf6:	edc7 0a00 	vstr	s1, [r7]
 8000cfa:	817b      	strh	r3, [r7, #10]
    // Make sure numTaps is odd
    if (numTaps % 2 == 0) {
 8000cfc:	897b      	ldrh	r3, [r7, #10]
 8000cfe:	f003 0301 	and.w	r3, r3, #1
 8000d02:	b29b      	uxth	r3, r3
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d102      	bne.n	8000d0e <FIR_init+0x2a>
        numTaps += 1;
 8000d08:	897b      	ldrh	r3, [r7, #10]
 8000d0a:	3301      	adds	r3, #1
 8000d0c:	817b      	strh	r3, [r7, #10]
    }

    fir->numTaps = numTaps;
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	897a      	ldrh	r2, [r7, #10]
 8000d12:	811a      	strh	r2, [r3, #8]
    fir->bufferIndex = 0;
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	2200      	movs	r2, #0
 8000d18:	815a      	strh	r2, [r3, #10]

    // Allocate memory for coefficients and buffer
    fir->coeffs = (float*)malloc(numTaps * sizeof(float));
 8000d1a:	897b      	ldrh	r3, [r7, #10]
 8000d1c:	009b      	lsls	r3, r3, #2
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f004 f9d2 	bl	80050c8 <malloc>
 8000d24:	4603      	mov	r3, r0
 8000d26:	461a      	mov	r2, r3
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	601a      	str	r2, [r3, #0]
    fir->buffer = (float*)malloc(numTaps * sizeof(float));
 8000d2c:	897b      	ldrh	r3, [r7, #10]
 8000d2e:	009b      	lsls	r3, r3, #2
 8000d30:	4618      	mov	r0, r3
 8000d32:	f004 f9c9 	bl	80050c8 <malloc>
 8000d36:	4603      	mov	r3, r0
 8000d38:	461a      	mov	r2, r3
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	605a      	str	r2, [r3, #4]

    if (fir->coeffs != NULL && fir->buffer != NULL) {
 8000d3e:	68fb      	ldr	r3, [r7, #12]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	f000 80e0 	beq.w	8000f08 <FIR_init+0x224>
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	685b      	ldr	r3, [r3, #4]
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	f000 80db 	beq.w	8000f08 <FIR_init+0x224>
        // Clear buffer
        for (uint16_t i = 0; i < numTaps; i++) {
 8000d52:	2300      	movs	r3, #0
 8000d54:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8000d56:	e00a      	b.n	8000d6e <FIR_init+0x8a>
            fir->buffer[i] = 0.0f;
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	685a      	ldr	r2, [r3, #4]
 8000d5c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000d5e:	009b      	lsls	r3, r3, #2
 8000d60:	4413      	add	r3, r2
 8000d62:	f04f 0200 	mov.w	r2, #0
 8000d66:	601a      	str	r2, [r3, #0]
        for (uint16_t i = 0; i < numTaps; i++) {
 8000d68:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000d6a:	3301      	adds	r3, #1
 8000d6c:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8000d6e:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8000d70:	897b      	ldrh	r3, [r7, #10]
 8000d72:	429a      	cmp	r2, r3
 8000d74:	d3f0      	bcc.n	8000d58 <FIR_init+0x74>
        }

        // Calculate normalized cutoff frequency (0 to 0.5)
        float omega = cutoffFreq / samplingFreq;
 8000d76:	edd7 6a01 	vldr	s13, [r7, #4]
 8000d7a:	ed97 7a00 	vldr	s14, [r7]
 8000d7e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000d82:	edc7 7a06 	vstr	s15, [r7, #24]

        // Calculate filter coefficients (low-pass)
        int16_t half_taps = numTaps / 2;
 8000d86:	897b      	ldrh	r3, [r7, #10]
 8000d88:	085b      	lsrs	r3, r3, #1
 8000d8a:	b29b      	uxth	r3, r3
 8000d8c:	82fb      	strh	r3, [r7, #22]
        for (int16_t i = 0; i < numTaps; i++) {
 8000d8e:	2300      	movs	r3, #0
 8000d90:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8000d92:	e077      	b.n	8000e84 <FIR_init+0x1a0>
            if (i == half_taps) {
 8000d94:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 8000d98:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000d9c:	429a      	cmp	r2, r3
 8000d9e:	d10c      	bne.n	8000dba <FIR_init+0xd6>
                // Center tap
                fir->coeffs[i] = 2.0f * omega;
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	681a      	ldr	r2, [r3, #0]
 8000da4:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8000da8:	009b      	lsls	r3, r3, #2
 8000daa:	4413      	add	r3, r2
 8000dac:	edd7 7a06 	vldr	s15, [r7, #24]
 8000db0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000db4:	edc3 7a00 	vstr	s15, [r3]
 8000db8:	e02c      	b.n	8000e14 <FIR_init+0x130>
            } else {
                // Side taps
                int16_t n = i - half_taps;
 8000dba:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8000dbc:	8afb      	ldrh	r3, [r7, #22]
 8000dbe:	1ad3      	subs	r3, r2, r3
 8000dc0:	b29b      	uxth	r3, r3
 8000dc2:	82bb      	strh	r3, [r7, #20]
                fir->coeffs[i] = sinf(2.0f * PI * omega * n) / (PI * n);
 8000dc4:	edd7 7a06 	vldr	s15, [r7, #24]
 8000dc8:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 8000f14 <FIR_init+0x230>
 8000dcc:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000dd0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000dd4:	ee07 3a90 	vmov	s15, r3
 8000dd8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ddc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000de0:	eeb0 0a67 	vmov.f32	s0, s15
 8000de4:	f004 faae 	bl	8005344 <sinf>
 8000de8:	eef0 6a40 	vmov.f32	s13, s0
 8000dec:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000df0:	ee07 3a90 	vmov	s15, r3
 8000df4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000df8:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 8000f18 <FIR_init+0x234>
 8000dfc:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	681a      	ldr	r2, [r3, #0]
 8000e04:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8000e08:	009b      	lsls	r3, r3, #2
 8000e0a:	4413      	add	r3, r2
 8000e0c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000e10:	edc3 7a00 	vstr	s15, [r3]
            }

            // Apply Hamming window
            fir->coeffs[i] *= (0.54f - 0.46f * cosf(2.0f * PI * i / (numTaps - 1)));
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	681a      	ldr	r2, [r3, #0]
 8000e18:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8000e1c:	009b      	lsls	r3, r3, #2
 8000e1e:	4413      	add	r3, r2
 8000e20:	ed93 8a00 	vldr	s16, [r3]
 8000e24:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8000e28:	ee07 3a90 	vmov	s15, r3
 8000e2c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e30:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8000f14 <FIR_init+0x230>
 8000e34:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000e38:	897b      	ldrh	r3, [r7, #10]
 8000e3a:	3b01      	subs	r3, #1
 8000e3c:	ee07 3a90 	vmov	s15, r3
 8000e40:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e44:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8000e48:	eeb0 0a66 	vmov.f32	s0, s13
 8000e4c:	f004 fa36 	bl	80052bc <cosf>
 8000e50:	eef0 7a40 	vmov.f32	s15, s0
 8000e54:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8000f1c <FIR_init+0x238>
 8000e58:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e5c:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8000f20 <FIR_init+0x23c>
 8000e60:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	681a      	ldr	r2, [r3, #0]
 8000e68:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8000e6c:	009b      	lsls	r3, r3, #2
 8000e6e:	4413      	add	r3, r2
 8000e70:	ee68 7a27 	vmul.f32	s15, s16, s15
 8000e74:	edc3 7a00 	vstr	s15, [r3]
        for (int16_t i = 0; i < numTaps; i++) {
 8000e78:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8000e7c:	b29b      	uxth	r3, r3
 8000e7e:	3301      	adds	r3, #1
 8000e80:	b29b      	uxth	r3, r3
 8000e82:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8000e84:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 8000e88:	897b      	ldrh	r3, [r7, #10]
 8000e8a:	429a      	cmp	r2, r3
 8000e8c:	db82      	blt.n	8000d94 <FIR_init+0xb0>
        }

        // Normalize gain
        float sum = 0.0f;
 8000e8e:	f04f 0300 	mov.w	r3, #0
 8000e92:	623b      	str	r3, [r7, #32]
        for (uint16_t i = 0; i < numTaps; i++) {
 8000e94:	2300      	movs	r3, #0
 8000e96:	83fb      	strh	r3, [r7, #30]
 8000e98:	e00f      	b.n	8000eba <FIR_init+0x1d6>
            sum += fir->coeffs[i];
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	681a      	ldr	r2, [r3, #0]
 8000e9e:	8bfb      	ldrh	r3, [r7, #30]
 8000ea0:	009b      	lsls	r3, r3, #2
 8000ea2:	4413      	add	r3, r2
 8000ea4:	edd3 7a00 	vldr	s15, [r3]
 8000ea8:	ed97 7a08 	vldr	s14, [r7, #32]
 8000eac:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000eb0:	edc7 7a08 	vstr	s15, [r7, #32]
        for (uint16_t i = 0; i < numTaps; i++) {
 8000eb4:	8bfb      	ldrh	r3, [r7, #30]
 8000eb6:	3301      	adds	r3, #1
 8000eb8:	83fb      	strh	r3, [r7, #30]
 8000eba:	8bfa      	ldrh	r2, [r7, #30]
 8000ebc:	897b      	ldrh	r3, [r7, #10]
 8000ebe:	429a      	cmp	r2, r3
 8000ec0:	d3eb      	bcc.n	8000e9a <FIR_init+0x1b6>
        }

        if (sum != 0.0f) {
 8000ec2:	edd7 7a08 	vldr	s15, [r7, #32]
 8000ec6:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000eca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ece:	d01b      	beq.n	8000f08 <FIR_init+0x224>
            for (uint16_t i = 0; i < numTaps; i++) {
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	83bb      	strh	r3, [r7, #28]
 8000ed4:	e014      	b.n	8000f00 <FIR_init+0x21c>
                fir->coeffs[i] /= sum;
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	681a      	ldr	r2, [r3, #0]
 8000eda:	8bbb      	ldrh	r3, [r7, #28]
 8000edc:	009b      	lsls	r3, r3, #2
 8000ede:	4413      	add	r3, r2
 8000ee0:	edd3 6a00 	vldr	s13, [r3]
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	681a      	ldr	r2, [r3, #0]
 8000ee8:	8bbb      	ldrh	r3, [r7, #28]
 8000eea:	009b      	lsls	r3, r3, #2
 8000eec:	4413      	add	r3, r2
 8000eee:	ed97 7a08 	vldr	s14, [r7, #32]
 8000ef2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000ef6:	edc3 7a00 	vstr	s15, [r3]
            for (uint16_t i = 0; i < numTaps; i++) {
 8000efa:	8bbb      	ldrh	r3, [r7, #28]
 8000efc:	3301      	adds	r3, #1
 8000efe:	83bb      	strh	r3, [r7, #28]
 8000f00:	8bba      	ldrh	r2, [r7, #28]
 8000f02:	897b      	ldrh	r3, [r7, #10]
 8000f04:	429a      	cmp	r2, r3
 8000f06:	d3e6      	bcc.n	8000ed6 <FIR_init+0x1f2>
            }
        }
    }
}
 8000f08:	bf00      	nop
 8000f0a:	3728      	adds	r7, #40	@ 0x28
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	ecbd 8b02 	vpop	{d8}
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	40c90fdb 	.word	0x40c90fdb
 8000f18:	40490fdb 	.word	0x40490fdb
 8000f1c:	3eeb851f 	.word	0x3eeb851f
 8000f20:	3f0a3d71 	.word	0x3f0a3d71

08000f24 <FIR_process>:

float FIR_process(FIR *fir, float input) {
 8000f24:	b480      	push	{r7}
 8000f26:	b085      	sub	sp, #20
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
 8000f2c:	ed87 0a00 	vstr	s0, [r7]
    // Update circular buffer with new input
    fir->buffer[fir->bufferIndex] = input;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	685a      	ldr	r2, [r3, #4]
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	895b      	ldrh	r3, [r3, #10]
 8000f38:	009b      	lsls	r3, r3, #2
 8000f3a:	4413      	add	r3, r2
 8000f3c:	683a      	ldr	r2, [r7, #0]
 8000f3e:	601a      	str	r2, [r3, #0]

    // Compute output (convolution)
    float output = 0.0f;
 8000f40:	f04f 0300 	mov.w	r3, #0
 8000f44:	60fb      	str	r3, [r7, #12]
    uint16_t index = fir->bufferIndex;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	895b      	ldrh	r3, [r3, #10]
 8000f4a:	817b      	strh	r3, [r7, #10]

    for (uint16_t i = 0; i < fir->numTaps; i++) {
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	813b      	strh	r3, [r7, #8]
 8000f50:	e023      	b.n	8000f9a <FIR_process+0x76>
        output += fir->buffer[index] * fir->coeffs[i];
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	685a      	ldr	r2, [r3, #4]
 8000f56:	897b      	ldrh	r3, [r7, #10]
 8000f58:	009b      	lsls	r3, r3, #2
 8000f5a:	4413      	add	r3, r2
 8000f5c:	ed93 7a00 	vldr	s14, [r3]
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681a      	ldr	r2, [r3, #0]
 8000f64:	893b      	ldrh	r3, [r7, #8]
 8000f66:	009b      	lsls	r3, r3, #2
 8000f68:	4413      	add	r3, r2
 8000f6a:	edd3 7a00 	vldr	s15, [r3]
 8000f6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f72:	ed97 7a03 	vldr	s14, [r7, #12]
 8000f76:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f7a:	edc7 7a03 	vstr	s15, [r7, #12]

        // Move back in circular buffer
        if (index == 0) {
 8000f7e:	897b      	ldrh	r3, [r7, #10]
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d104      	bne.n	8000f8e <FIR_process+0x6a>
            index = fir->numTaps - 1;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	891b      	ldrh	r3, [r3, #8]
 8000f88:	3b01      	subs	r3, #1
 8000f8a:	817b      	strh	r3, [r7, #10]
 8000f8c:	e002      	b.n	8000f94 <FIR_process+0x70>
        } else {
            index--;
 8000f8e:	897b      	ldrh	r3, [r7, #10]
 8000f90:	3b01      	subs	r3, #1
 8000f92:	817b      	strh	r3, [r7, #10]
    for (uint16_t i = 0; i < fir->numTaps; i++) {
 8000f94:	893b      	ldrh	r3, [r7, #8]
 8000f96:	3301      	adds	r3, #1
 8000f98:	813b      	strh	r3, [r7, #8]
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	891b      	ldrh	r3, [r3, #8]
 8000f9e:	893a      	ldrh	r2, [r7, #8]
 8000fa0:	429a      	cmp	r2, r3
 8000fa2:	d3d6      	bcc.n	8000f52 <FIR_process+0x2e>
        }
    }

    // Update buffer index for next input
    fir->bufferIndex++;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	895b      	ldrh	r3, [r3, #10]
 8000fa8:	3301      	adds	r3, #1
 8000faa:	b29a      	uxth	r2, r3
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	815a      	strh	r2, [r3, #10]
    if (fir->bufferIndex >= fir->numTaps) {
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	895a      	ldrh	r2, [r3, #10]
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	891b      	ldrh	r3, [r3, #8]
 8000fb8:	429a      	cmp	r2, r3
 8000fba:	d302      	bcc.n	8000fc2 <FIR_process+0x9e>
        fir->bufferIndex = 0;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	815a      	strh	r2, [r3, #10]
    }

    return output;
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	ee07 3a90 	vmov	s15, r3
}
 8000fc8:	eeb0 0a67 	vmov.f32	s0, s15
 8000fcc:	3714      	adds	r7, #20
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr
	...

08000fd8 <PWM_init>:
 *      Author: beamk
 */

#include "PWM.h"

void PWM_init(PWM* pwm, TIM_HandleTypeDef* htimx, uint16_t tim_chx){
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b084      	sub	sp, #16
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	60f8      	str	r0, [r7, #12]
 8000fe0:	60b9      	str	r1, [r7, #8]
 8000fe2:	4613      	mov	r3, r2
 8000fe4:	80fb      	strh	r3, [r7, #6]
	pwm->CPU_FREQ = 170e6;
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	4a0b      	ldr	r2, [pc, #44]	@ (8001018 <PWM_init+0x40>)
 8000fea:	611a      	str	r2, [r3, #16]
	pwm->htimx = htimx;
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	68ba      	ldr	r2, [r7, #8]
 8000ff0:	601a      	str	r2, [r3, #0]
	pwm->tim_chx = tim_chx;
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	88fa      	ldrh	r2, [r7, #6]
 8000ff6:	809a      	strh	r2, [r3, #4]
	pwm->OC = 0;
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	615a      	str	r2, [r3, #20]
	HAL_TIM_Base_Start(htimx);
 8000ffe:	68b8      	ldr	r0, [r7, #8]
 8001000:	f002 fb2a 	bl	8003658 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(htimx, tim_chx);
 8001004:	88fb      	ldrh	r3, [r7, #6]
 8001006:	4619      	mov	r1, r3
 8001008:	68b8      	ldr	r0, [r7, #8]
 800100a:	f002 fc65 	bl	80038d8 <HAL_TIM_PWM_Start>
}
 800100e:	bf00      	nop
 8001010:	3710      	adds	r7, #16
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	0a21fe80 	.word	0x0a21fe80
 800101c:	00000000 	.word	0x00000000

08001020 <PWM_write_range>:
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
    }
}

void PWM_write_range(PWM* pwm, float freq, float duty){
 8001020:	b5b0      	push	{r4, r5, r7, lr}
 8001022:	b084      	sub	sp, #16
 8001024:	af00      	add	r7, sp, #0
 8001026:	60f8      	str	r0, [r7, #12]
 8001028:	ed87 0a02 	vstr	s0, [r7, #8]
 800102c:	edc7 0a01 	vstr	s1, [r7, #4]
    if (freq == 0) {
 8001030:	edd7 7a02 	vldr	s15, [r7, #8]
 8001034:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001038:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800103c:	d137      	bne.n	80010ae <PWM_write_range+0x8e>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, 0);
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	889b      	ldrh	r3, [r3, #4]
 8001042:	2b00      	cmp	r3, #0
 8001044:	d105      	bne.n	8001052 <PWM_write_range+0x32>
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	2200      	movs	r2, #0
 800104e:	635a      	str	r2, [r3, #52]	@ 0x34
    	pwm->OC = (uint16_t) (pwm->overflow * fabs(duty) / 65535.0);
        __HAL_TIM_SET_PRESCALER(pwm->htimx, pwm->prescaler);
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
    }
}
 8001050:	e0e1      	b.n	8001216 <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, 0);
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	889b      	ldrh	r3, [r3, #4]
 8001056:	2b04      	cmp	r3, #4
 8001058:	d105      	bne.n	8001066 <PWM_write_range+0x46>
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	681a      	ldr	r2, [r3, #0]
 8001060:	2300      	movs	r3, #0
 8001062:	6393      	str	r3, [r2, #56]	@ 0x38
 8001064:	e0d7      	b.n	8001216 <PWM_write_range+0x1f6>
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	889b      	ldrh	r3, [r3, #4]
 800106a:	2b08      	cmp	r3, #8
 800106c:	d105      	bne.n	800107a <PWM_write_range+0x5a>
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	681a      	ldr	r2, [r3, #0]
 8001074:	2300      	movs	r3, #0
 8001076:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001078:	e0cd      	b.n	8001216 <PWM_write_range+0x1f6>
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	889b      	ldrh	r3, [r3, #4]
 800107e:	2b0c      	cmp	r3, #12
 8001080:	d105      	bne.n	800108e <PWM_write_range+0x6e>
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	681a      	ldr	r2, [r3, #0]
 8001088:	2300      	movs	r3, #0
 800108a:	6413      	str	r3, [r2, #64]	@ 0x40
 800108c:	e0c3      	b.n	8001216 <PWM_write_range+0x1f6>
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	889b      	ldrh	r3, [r3, #4]
 8001092:	2b10      	cmp	r3, #16
 8001094:	d105      	bne.n	80010a2 <PWM_write_range+0x82>
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	681a      	ldr	r2, [r3, #0]
 800109c:	2300      	movs	r3, #0
 800109e:	6493      	str	r3, [r2, #72]	@ 0x48
 80010a0:	e0b9      	b.n	8001216 <PWM_write_range+0x1f6>
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	681a      	ldr	r2, [r3, #0]
 80010a8:	2300      	movs	r3, #0
 80010aa:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80010ac:	e0b3      	b.n	8001216 <PWM_write_range+0x1f6>
    	pwm->period_cyc = (uint32_t) (pwm->CPU_FREQ / freq);
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	691b      	ldr	r3, [r3, #16]
 80010b2:	ee07 3a90 	vmov	s15, r3
 80010b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80010ba:	ed97 7a02 	vldr	s14, [r7, #8]
 80010be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80010c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80010c6:	ee17 2a90 	vmov	r2, s15
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	609a      	str	r2, [r3, #8]
    	pwm->prescaler = (uint16_t) ((pwm->period_cyc + 65535 - 1) / 65535) - 1; // Subtracting 1 since prescaler is zero-based
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	689b      	ldr	r3, [r3, #8]
 80010d2:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 80010d6:	33fe      	adds	r3, #254	@ 0xfe
 80010d8:	4a53      	ldr	r2, [pc, #332]	@ (8001228 <PWM_write_range+0x208>)
 80010da:	fba2 2303 	umull	r2, r3, r2, r3
 80010de:	0bdb      	lsrs	r3, r3, #15
 80010e0:	b29b      	uxth	r3, r3
 80010e2:	3b01      	subs	r3, #1
 80010e4:	b29a      	uxth	r2, r3
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	819a      	strh	r2, [r3, #12]
    	pwm->overflow = (uint16_t) ((pwm->CPU_FREQ / (float)(pwm->prescaler + 1) / freq) - 1);
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	691b      	ldr	r3, [r3, #16]
 80010ee:	ee07 3a90 	vmov	s15, r3
 80010f2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	899b      	ldrh	r3, [r3, #12]
 80010fa:	3301      	adds	r3, #1
 80010fc:	ee07 3a90 	vmov	s15, r3
 8001100:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001104:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001108:	ed97 7a02 	vldr	s14, [r7, #8]
 800110c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001110:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001114:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001118:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800111c:	ee17 3a90 	vmov	r3, s15
 8001120:	b29a      	uxth	r2, r3
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	81da      	strh	r2, [r3, #14]
    	pwm->OC = (uint16_t) (pwm->overflow * fabs(duty) / 65535.0);
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	89db      	ldrh	r3, [r3, #14]
 800112a:	4618      	mov	r0, r3
 800112c:	f7ff f9c6 	bl	80004bc <__aeabi_i2d>
 8001130:	4604      	mov	r4, r0
 8001132:	460d      	mov	r5, r1
 8001134:	edd7 7a01 	vldr	s15, [r7, #4]
 8001138:	eef0 7ae7 	vabs.f32	s15, s15
 800113c:	ee17 0a90 	vmov	r0, s15
 8001140:	f7ff f9ce 	bl	80004e0 <__aeabi_f2d>
 8001144:	4602      	mov	r2, r0
 8001146:	460b      	mov	r3, r1
 8001148:	4620      	mov	r0, r4
 800114a:	4629      	mov	r1, r5
 800114c:	f7ff fa20 	bl	8000590 <__aeabi_dmul>
 8001150:	4602      	mov	r2, r0
 8001152:	460b      	mov	r3, r1
 8001154:	4610      	mov	r0, r2
 8001156:	4619      	mov	r1, r3
 8001158:	a331      	add	r3, pc, #196	@ (adr r3, 8001220 <PWM_write_range+0x200>)
 800115a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800115e:	f7ff fb41 	bl	80007e4 <__aeabi_ddiv>
 8001162:	4602      	mov	r2, r0
 8001164:	460b      	mov	r3, r1
 8001166:	4610      	mov	r0, r2
 8001168:	4619      	mov	r1, r3
 800116a:	f7ff fc23 	bl	80009b4 <__aeabi_d2uiz>
 800116e:	4603      	mov	r3, r0
 8001170:	b29b      	uxth	r3, r3
 8001172:	461a      	mov	r2, r3
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	615a      	str	r2, [r3, #20]
        __HAL_TIM_SET_PRESCALER(pwm->htimx, pwm->prescaler);
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	899a      	ldrh	r2, [r3, #12]
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	629a      	str	r2, [r3, #40]	@ 0x28
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	89da      	ldrh	r2, [r3, #14]
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	89da      	ldrh	r2, [r3, #14]
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	60da      	str	r2, [r3, #12]
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	889b      	ldrh	r3, [r3, #4]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d106      	bne.n	80011b0 <PWM_write_range+0x190>
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	68fa      	ldr	r2, [r7, #12]
 80011aa:	6952      	ldr	r2, [r2, #20]
 80011ac:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80011ae:	e032      	b.n	8001216 <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	889b      	ldrh	r3, [r3, #4]
 80011b4:	2b04      	cmp	r3, #4
 80011b6:	d106      	bne.n	80011c6 <PWM_write_range+0x1a6>
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	681a      	ldr	r2, [r3, #0]
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	695b      	ldr	r3, [r3, #20]
 80011c2:	6393      	str	r3, [r2, #56]	@ 0x38
}
 80011c4:	e027      	b.n	8001216 <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	889b      	ldrh	r3, [r3, #4]
 80011ca:	2b08      	cmp	r3, #8
 80011cc:	d106      	bne.n	80011dc <PWM_write_range+0x1bc>
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	681a      	ldr	r2, [r3, #0]
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	695b      	ldr	r3, [r3, #20]
 80011d8:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 80011da:	e01c      	b.n	8001216 <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	889b      	ldrh	r3, [r3, #4]
 80011e0:	2b0c      	cmp	r3, #12
 80011e2:	d106      	bne.n	80011f2 <PWM_write_range+0x1d2>
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	681a      	ldr	r2, [r3, #0]
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	695b      	ldr	r3, [r3, #20]
 80011ee:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80011f0:	e011      	b.n	8001216 <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	889b      	ldrh	r3, [r3, #4]
 80011f6:	2b10      	cmp	r3, #16
 80011f8:	d106      	bne.n	8001208 <PWM_write_range+0x1e8>
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	681a      	ldr	r2, [r3, #0]
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	695b      	ldr	r3, [r3, #20]
 8001204:	6493      	str	r3, [r2, #72]	@ 0x48
}
 8001206:	e006      	b.n	8001216 <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	681a      	ldr	r2, [r3, #0]
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	695b      	ldr	r3, [r3, #20]
 8001212:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8001214:	e7ff      	b.n	8001216 <PWM_write_range+0x1f6>
 8001216:	bf00      	nop
 8001218:	3710      	adds	r7, #16
 800121a:	46bd      	mov	sp, r7
 800121c:	bdb0      	pop	{r4, r5, r7, pc}
 800121e:	bf00      	nop
 8001220:	00000000 	.word	0x00000000
 8001224:	40efffe0 	.word	0x40efffe0
 8001228:	80008001 	.word	0x80008001

0800122c <QEI_init>:
* Created on: Mar 30, 2024
* Author: beamk
*/
#include "QEI.h"

void QEI_init(QEI *qei, TIM_HandleTypeDef *htimx, int32_t ppr, uint32_t freq, float ratio) {
 800122c:	b580      	push	{r7, lr}
 800122e:	b086      	sub	sp, #24
 8001230:	af00      	add	r7, sp, #0
 8001232:	6178      	str	r0, [r7, #20]
 8001234:	6139      	str	r1, [r7, #16]
 8001236:	60fa      	str	r2, [r7, #12]
 8001238:	60bb      	str	r3, [r7, #8]
 800123a:	ed87 0a01 	vstr	s0, [r7, #4]
    qei->htimx = htimx;
 800123e:	697b      	ldr	r3, [r7, #20]
 8001240:	693a      	ldr	r2, [r7, #16]
 8001242:	611a      	str	r2, [r3, #16]
    qei->ppr = ppr;
 8001244:	697b      	ldr	r3, [r7, #20]
 8001246:	68fa      	ldr	r2, [r7, #12]
 8001248:	619a      	str	r2, [r3, #24]
    qei->freq = freq;
 800124a:	697b      	ldr	r3, [r7, #20]
 800124c:	68ba      	ldr	r2, [r7, #8]
 800124e:	621a      	str	r2, [r3, #32]
    qei->c[NOW] = 0;
 8001250:	697b      	ldr	r3, [r7, #20]
 8001252:	2200      	movs	r2, #0
 8001254:	601a      	str	r2, [r3, #0]
    qei->c[PREV] = 0;
 8001256:	697b      	ldr	r3, [r7, #20]
 8001258:	2200      	movs	r2, #0
 800125a:	605a      	str	r2, [r3, #4]
    qei->pps = 0;
 800125c:	697b      	ldr	r3, [r7, #20]
 800125e:	f04f 0200 	mov.w	r2, #0
 8001262:	625a      	str	r2, [r3, #36]	@ 0x24
    qei->rpm = 0;
 8001264:	697b      	ldr	r3, [r7, #20]
 8001266:	f04f 0200 	mov.w	r2, #0
 800126a:	629a      	str	r2, [r3, #40]	@ 0x28
    qei->radps = 0;
 800126c:	697b      	ldr	r3, [r7, #20]
 800126e:	f04f 0200 	mov.w	r2, #0
 8001272:	62da      	str	r2, [r3, #44]	@ 0x2c
    qei->enc_period = 65536 - (65536 % ppr);
 8001274:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001278:	68fa      	ldr	r2, [r7, #12]
 800127a:	fb93 f2f2 	sdiv	r2, r3, r2
 800127e:	68f9      	ldr	r1, [r7, #12]
 8001280:	fb01 f202 	mul.w	r2, r1, r2
 8001284:	1a9b      	subs	r3, r3, r2
 8001286:	f5c3 3280 	rsb	r2, r3, #65536	@ 0x10000
 800128a:	697b      	ldr	r3, [r7, #20]
 800128c:	615a      	str	r2, [r3, #20]
    qei->pulses = 0;
 800128e:	697b      	ldr	r3, [r7, #20]
 8001290:	2200      	movs	r2, #0
 8001292:	631a      	str	r2, [r3, #48]	@ 0x30
    //qei->pulsesf = 0;
    qei->revs = 0;
 8001294:	697b      	ldr	r3, [r7, #20]
 8001296:	f04f 0200 	mov.w	r2, #0
 800129a:	635a      	str	r2, [r3, #52]	@ 0x34
    qei->rads = 0;
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	f04f 0200 	mov.w	r2, #0
 80012a2:	639a      	str	r2, [r3, #56]	@ 0x38
    qei->mm = 0;
 80012a4:	697b      	ldr	r3, [r7, #20]
 80012a6:	f04f 0200 	mov.w	r2, #0
 80012aa:	641a      	str	r2, [r3, #64]	@ 0x40
    qei->mmps = 0;
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	f04f 0200 	mov.w	r2, #0
 80012b2:	645a      	str	r2, [r3, #68]	@ 0x44

    qei->ratio = ratio;  // Gear ratio or scaling factor
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	687a      	ldr	r2, [r7, #4]
 80012b8:	649a      	str	r2, [r3, #72]	@ 0x48
    HAL_TIM_Encoder_Start(htimx, TIM_CHANNEL_ALL);
 80012ba:	213c      	movs	r1, #60	@ 0x3c
 80012bc:	6938      	ldr	r0, [r7, #16]
 80012be:	f002 fcc3 	bl	8003c48 <HAL_TIM_Encoder_Start>
}
 80012c2:	bf00      	nop
 80012c4:	3718      	adds	r7, #24
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	0000      	movs	r0, r0
 80012cc:	0000      	movs	r0, r0
	...

080012d0 <QEI_get_diff_count>:

void QEI_get_diff_count(QEI *qei) {
 80012d0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80012d4:	b084      	sub	sp, #16
 80012d6:	af00      	add	r7, sp, #0
 80012d8:	6078      	str	r0, [r7, #4]
    qei->c[NOW] = __HAL_TIM_GET_COUNTER(qei->htimx); // Update the current count
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	691b      	ldr	r3, [r3, #16]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	601a      	str	r2, [r3, #0]

    // Calculate the difference in counts
    int32_t diff_counts = qei->c[NOW] - qei->c[PREV];
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681a      	ldr	r2, [r3, #0]
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	1ad3      	subs	r3, r2, r3
 80012f0:	60fb      	str	r3, [r7, #12]

    //Unwrap
    if (diff_counts > qei->enc_period / 2) {
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	695b      	ldr	r3, [r3, #20]
 80012f6:	0fda      	lsrs	r2, r3, #31
 80012f8:	4413      	add	r3, r2
 80012fa:	105b      	asrs	r3, r3, #1
 80012fc:	461a      	mov	r2, r3
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	4293      	cmp	r3, r2
 8001302:	dd05      	ble.n	8001310 <QEI_get_diff_count+0x40>
        diff_counts -= qei->enc_period;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	695b      	ldr	r3, [r3, #20]
 8001308:	68fa      	ldr	r2, [r7, #12]
 800130a:	1ad3      	subs	r3, r2, r3
 800130c:	60fb      	str	r3, [r7, #12]
 800130e:	e00e      	b.n	800132e <QEI_get_diff_count+0x5e>
    } else if (diff_counts < -(qei->enc_period) / 2) {
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	695b      	ldr	r3, [r3, #20]
 8001314:	425b      	negs	r3, r3
 8001316:	0fda      	lsrs	r2, r3, #31
 8001318:	4413      	add	r3, r2
 800131a:	105b      	asrs	r3, r3, #1
 800131c:	461a      	mov	r2, r3
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	4293      	cmp	r3, r2
 8001322:	da04      	bge.n	800132e <QEI_get_diff_count+0x5e>
        diff_counts += qei->enc_period;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	695b      	ldr	r3, [r3, #20]
 8001328:	68fa      	ldr	r2, [r7, #12]
 800132a:	4413      	add	r3, r2
 800132c:	60fb      	str	r3, [r7, #12]
    }

    qei->diff_counts = diff_counts;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	68fa      	ldr	r2, [r7, #12]
 8001332:	61da      	str	r2, [r3, #28]
    //qei->diff_countsf = (float)diff_counts*1.25;

    // Calculate Position with ratio adjustment
    qei->pulses += qei->diff_counts;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	69db      	ldr	r3, [r3, #28]
 800133c:	441a      	add	r2, r3
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	631a      	str	r2, [r3, #48]	@ 0x30
    //qei->pulsesf += qei->diff_countsf;

    // Apply ratio to all position calculations
    qei->revs += (qei->diff_counts / (float)(qei->ppr)) * qei->ratio;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	69db      	ldr	r3, [r3, #28]
 800134c:	ee07 3a90 	vmov	s15, r3
 8001350:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	699b      	ldr	r3, [r3, #24]
 8001358:	ee07 3a90 	vmov	s15, r3
 800135c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001360:	eec6 6a27 	vdiv.f32	s13, s12, s15
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 800136a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800136e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
    qei->mm += (qei->diff_counts / (float)(qei->ppr)) * 10.0 * qei->ratio;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800137c:	4618      	mov	r0, r3
 800137e:	f7ff f8af 	bl	80004e0 <__aeabi_f2d>
 8001382:	4604      	mov	r4, r0
 8001384:	460d      	mov	r5, r1
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	69db      	ldr	r3, [r3, #28]
 800138a:	ee07 3a90 	vmov	s15, r3
 800138e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	699b      	ldr	r3, [r3, #24]
 8001396:	ee07 3a90 	vmov	s15, r3
 800139a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800139e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80013a2:	ee16 0a90 	vmov	r0, s13
 80013a6:	f7ff f89b 	bl	80004e0 <__aeabi_f2d>
 80013aa:	f04f 0200 	mov.w	r2, #0
 80013ae:	4b36      	ldr	r3, [pc, #216]	@ (8001488 <QEI_get_diff_count+0x1b8>)
 80013b0:	f7ff f8ee 	bl	8000590 <__aeabi_dmul>
 80013b4:	4602      	mov	r2, r0
 80013b6:	460b      	mov	r3, r1
 80013b8:	4690      	mov	r8, r2
 80013ba:	4699      	mov	r9, r3
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80013c0:	4618      	mov	r0, r3
 80013c2:	f7ff f88d 	bl	80004e0 <__aeabi_f2d>
 80013c6:	4602      	mov	r2, r0
 80013c8:	460b      	mov	r3, r1
 80013ca:	4640      	mov	r0, r8
 80013cc:	4649      	mov	r1, r9
 80013ce:	f7ff f8df 	bl	8000590 <__aeabi_dmul>
 80013d2:	4602      	mov	r2, r0
 80013d4:	460b      	mov	r3, r1
 80013d6:	4620      	mov	r0, r4
 80013d8:	4629      	mov	r1, r5
 80013da:	f7fe ff23 	bl	8000224 <__adddf3>
 80013de:	4602      	mov	r2, r0
 80013e0:	460b      	mov	r3, r1
 80013e2:	4610      	mov	r0, r2
 80013e4:	4619      	mov	r1, r3
 80013e6:	f7ff fb05 	bl	80009f4 <__aeabi_d2f>
 80013ea:	4602      	mov	r2, r0
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	641a      	str	r2, [r3, #64]	@ 0x40
    qei->rads += (qei->diff_counts / (float)(qei->ppr)) * 2 * M_PI * qei->ratio;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80013f4:	4618      	mov	r0, r3
 80013f6:	f7ff f873 	bl	80004e0 <__aeabi_f2d>
 80013fa:	4604      	mov	r4, r0
 80013fc:	460d      	mov	r5, r1
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	69db      	ldr	r3, [r3, #28]
 8001402:	ee07 3a90 	vmov	s15, r3
 8001406:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	699b      	ldr	r3, [r3, #24]
 800140e:	ee07 3a90 	vmov	s15, r3
 8001412:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001416:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800141a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800141e:	ee17 0a90 	vmov	r0, s15
 8001422:	f7ff f85d 	bl	80004e0 <__aeabi_f2d>
 8001426:	a316      	add	r3, pc, #88	@ (adr r3, 8001480 <QEI_get_diff_count+0x1b0>)
 8001428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800142c:	f7ff f8b0 	bl	8000590 <__aeabi_dmul>
 8001430:	4602      	mov	r2, r0
 8001432:	460b      	mov	r3, r1
 8001434:	4690      	mov	r8, r2
 8001436:	4699      	mov	r9, r3
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800143c:	4618      	mov	r0, r3
 800143e:	f7ff f84f 	bl	80004e0 <__aeabi_f2d>
 8001442:	4602      	mov	r2, r0
 8001444:	460b      	mov	r3, r1
 8001446:	4640      	mov	r0, r8
 8001448:	4649      	mov	r1, r9
 800144a:	f7ff f8a1 	bl	8000590 <__aeabi_dmul>
 800144e:	4602      	mov	r2, r0
 8001450:	460b      	mov	r3, r1
 8001452:	4620      	mov	r0, r4
 8001454:	4629      	mov	r1, r5
 8001456:	f7fe fee5 	bl	8000224 <__adddf3>
 800145a:	4602      	mov	r2, r0
 800145c:	460b      	mov	r3, r1
 800145e:	4610      	mov	r0, r2
 8001460:	4619      	mov	r1, r3
 8001462:	f7ff fac7 	bl	80009f4 <__aeabi_d2f>
 8001466:	4602      	mov	r2, r0
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	639a      	str	r2, [r3, #56]	@ 0x38

    qei->c[PREV] = qei->c[NOW]; // Store the previous count
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681a      	ldr	r2, [r3, #0]
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	605a      	str	r2, [r3, #4]
}
 8001474:	bf00      	nop
 8001476:	3710      	adds	r7, #16
 8001478:	46bd      	mov	sp, r7
 800147a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800147e:	bf00      	nop
 8001480:	54442d18 	.word	0x54442d18
 8001484:	400921fb 	.word	0x400921fb
 8001488:	40240000 	.word	0x40240000
 800148c:	00000000 	.word	0x00000000

08001490 <QEI_compute_data>:

void QEI_compute_data(QEI *qei) {
 8001490:	b5b0      	push	{r4, r5, r7, lr}
 8001492:	b084      	sub	sp, #16
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
    // Calculate Velocity with ratio adjustment
    qei->pps = qei->diff_counts * ((int)(qei->freq));
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	69db      	ldr	r3, [r3, #28]
 800149c:	687a      	ldr	r2, [r7, #4]
 800149e:	6a12      	ldr	r2, [r2, #32]
 80014a0:	fb02 f303 	mul.w	r3, r2, r3
 80014a4:	ee07 3a90 	vmov	s15, r3
 80014a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

    // Apply ratio to all velocity calculations
    qei->rpm = qei->pps * 60.0 / (float)(qei->ppr) * qei->ratio;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014b6:	4618      	mov	r0, r3
 80014b8:	f7ff f812 	bl	80004e0 <__aeabi_f2d>
 80014bc:	f04f 0200 	mov.w	r2, #0
 80014c0:	4b6b      	ldr	r3, [pc, #428]	@ (8001670 <QEI_compute_data+0x1e0>)
 80014c2:	f7ff f865 	bl	8000590 <__aeabi_dmul>
 80014c6:	4602      	mov	r2, r0
 80014c8:	460b      	mov	r3, r1
 80014ca:	4614      	mov	r4, r2
 80014cc:	461d      	mov	r5, r3
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	699b      	ldr	r3, [r3, #24]
 80014d2:	ee07 3a90 	vmov	s15, r3
 80014d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014da:	ee17 0a90 	vmov	r0, s15
 80014de:	f7fe ffff 	bl	80004e0 <__aeabi_f2d>
 80014e2:	4602      	mov	r2, r0
 80014e4:	460b      	mov	r3, r1
 80014e6:	4620      	mov	r0, r4
 80014e8:	4629      	mov	r1, r5
 80014ea:	f7ff f97b 	bl	80007e4 <__aeabi_ddiv>
 80014ee:	4602      	mov	r2, r0
 80014f0:	460b      	mov	r3, r1
 80014f2:	4614      	mov	r4, r2
 80014f4:	461d      	mov	r5, r3
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80014fa:	4618      	mov	r0, r3
 80014fc:	f7fe fff0 	bl	80004e0 <__aeabi_f2d>
 8001500:	4602      	mov	r2, r0
 8001502:	460b      	mov	r3, r1
 8001504:	4620      	mov	r0, r4
 8001506:	4629      	mov	r1, r5
 8001508:	f7ff f842 	bl	8000590 <__aeabi_dmul>
 800150c:	4602      	mov	r2, r0
 800150e:	460b      	mov	r3, r1
 8001510:	4610      	mov	r0, r2
 8001512:	4619      	mov	r1, r3
 8001514:	f7ff fa6e 	bl	80009f4 <__aeabi_d2f>
 8001518:	4602      	mov	r2, r0
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	629a      	str	r2, [r3, #40]	@ 0x28
    qei->radps = qei->pps * 2 * M_PI / (float)(qei->ppr) * qei->ratio;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8001524:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001528:	ee17 0a90 	vmov	r0, s15
 800152c:	f7fe ffd8 	bl	80004e0 <__aeabi_f2d>
 8001530:	a34d      	add	r3, pc, #308	@ (adr r3, 8001668 <QEI_compute_data+0x1d8>)
 8001532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001536:	f7ff f82b 	bl	8000590 <__aeabi_dmul>
 800153a:	4602      	mov	r2, r0
 800153c:	460b      	mov	r3, r1
 800153e:	4614      	mov	r4, r2
 8001540:	461d      	mov	r5, r3
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	699b      	ldr	r3, [r3, #24]
 8001546:	ee07 3a90 	vmov	s15, r3
 800154a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800154e:	ee17 0a90 	vmov	r0, s15
 8001552:	f7fe ffc5 	bl	80004e0 <__aeabi_f2d>
 8001556:	4602      	mov	r2, r0
 8001558:	460b      	mov	r3, r1
 800155a:	4620      	mov	r0, r4
 800155c:	4629      	mov	r1, r5
 800155e:	f7ff f941 	bl	80007e4 <__aeabi_ddiv>
 8001562:	4602      	mov	r2, r0
 8001564:	460b      	mov	r3, r1
 8001566:	4614      	mov	r4, r2
 8001568:	461d      	mov	r5, r3
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800156e:	4618      	mov	r0, r3
 8001570:	f7fe ffb6 	bl	80004e0 <__aeabi_f2d>
 8001574:	4602      	mov	r2, r0
 8001576:	460b      	mov	r3, r1
 8001578:	4620      	mov	r0, r4
 800157a:	4629      	mov	r1, r5
 800157c:	f7ff f808 	bl	8000590 <__aeabi_dmul>
 8001580:	4602      	mov	r2, r0
 8001582:	460b      	mov	r3, r1
 8001584:	4610      	mov	r0, r2
 8001586:	4619      	mov	r1, r3
 8001588:	f7ff fa34 	bl	80009f4 <__aeabi_d2f>
 800158c:	4602      	mov	r2, r0
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	62da      	str	r2, [r3, #44]	@ 0x2c
    qei->mmps = qei->pps * 10.0 / (float)(qei->ppr) * qei->ratio;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001596:	4618      	mov	r0, r3
 8001598:	f7fe ffa2 	bl	80004e0 <__aeabi_f2d>
 800159c:	f04f 0200 	mov.w	r2, #0
 80015a0:	4b34      	ldr	r3, [pc, #208]	@ (8001674 <QEI_compute_data+0x1e4>)
 80015a2:	f7fe fff5 	bl	8000590 <__aeabi_dmul>
 80015a6:	4602      	mov	r2, r0
 80015a8:	460b      	mov	r3, r1
 80015aa:	4614      	mov	r4, r2
 80015ac:	461d      	mov	r5, r3
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	699b      	ldr	r3, [r3, #24]
 80015b2:	ee07 3a90 	vmov	s15, r3
 80015b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015ba:	ee17 0a90 	vmov	r0, s15
 80015be:	f7fe ff8f 	bl	80004e0 <__aeabi_f2d>
 80015c2:	4602      	mov	r2, r0
 80015c4:	460b      	mov	r3, r1
 80015c6:	4620      	mov	r0, r4
 80015c8:	4629      	mov	r1, r5
 80015ca:	f7ff f90b 	bl	80007e4 <__aeabi_ddiv>
 80015ce:	4602      	mov	r2, r0
 80015d0:	460b      	mov	r3, r1
 80015d2:	4614      	mov	r4, r2
 80015d4:	461d      	mov	r5, r3
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80015da:	4618      	mov	r0, r3
 80015dc:	f7fe ff80 	bl	80004e0 <__aeabi_f2d>
 80015e0:	4602      	mov	r2, r0
 80015e2:	460b      	mov	r3, r1
 80015e4:	4620      	mov	r0, r4
 80015e6:	4629      	mov	r1, r5
 80015e8:	f7fe ffd2 	bl	8000590 <__aeabi_dmul>
 80015ec:	4602      	mov	r2, r0
 80015ee:	460b      	mov	r3, r1
 80015f0:	4610      	mov	r0, r2
 80015f2:	4619      	mov	r1, r3
 80015f4:	f7ff f9fe 	bl	80009f4 <__aeabi_d2f>
 80015f8:	4602      	mov	r2, r0
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	645a      	str	r2, [r3, #68]	@ 0x44

    // Calculate Acceleration with ratio adjustment
    qei->r[NOW] = qei->radps;  // radps already has ratio applied
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	609a      	str	r2, [r3, #8]
    float diff_velocity = (qei->r[NOW] - qei->r[PREV]);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	ed93 7a02 	vldr	s14, [r3, #8]
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	edd3 7a03 	vldr	s15, [r3, #12]
 8001612:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001616:	edc7 7a03 	vstr	s15, [r7, #12]
    if (diff_velocity == 0) {
 800161a:	edd7 7a03 	vldr	s15, [r7, #12]
 800161e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001622:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001626:	d104      	bne.n	8001632 <QEI_compute_data+0x1a2>
        qei->radpss = 0;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	f04f 0200 	mov.w	r2, #0
 800162e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001630:	e00f      	b.n	8001652 <QEI_compute_data+0x1c2>
    } else {
        qei->radpss = diff_velocity / (1 / (qei->freq));
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6a1b      	ldr	r3, [r3, #32]
 8001636:	2b01      	cmp	r3, #1
 8001638:	d102      	bne.n	8001640 <QEI_compute_data+0x1b0>
 800163a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800163e:	e001      	b.n	8001644 <QEI_compute_data+0x1b4>
 8001640:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8001678 <QEI_compute_data+0x1e8>
 8001644:	edd7 6a03 	vldr	s13, [r7, #12]
 8001648:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
        // No need to multiply by ratio again since diff_velocity already includes it
    }
    qei->r[PREV] = qei->r[NOW]; // Store the previous count
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	689a      	ldr	r2, [r3, #8]
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	60da      	str	r2, [r3, #12]
}
 800165a:	bf00      	nop
 800165c:	3710      	adds	r7, #16
 800165e:	46bd      	mov	sp, r7
 8001660:	bdb0      	pop	{r4, r5, r7, pc}
 8001662:	bf00      	nop
 8001664:	f3af 8000 	nop.w
 8001668:	54442d18 	.word	0x54442d18
 800166c:	400921fb 	.word	0x400921fb
 8001670:	404e0000 	.word	0x404e0000
 8001674:	40240000 	.word	0x40240000
 8001678:	00000000 	.word	0x00000000

0800167c <MX_GPIO_Init>:
        * EXTI
     PA2   ------> LPUART1_TX
     PA3   ------> LPUART1_RX
*/
void MX_GPIO_Init(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b08a      	sub	sp, #40	@ 0x28
 8001680:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001682:	f107 0314 	add.w	r3, r7, #20
 8001686:	2200      	movs	r2, #0
 8001688:	601a      	str	r2, [r3, #0]
 800168a:	605a      	str	r2, [r3, #4]
 800168c:	609a      	str	r2, [r3, #8]
 800168e:	60da      	str	r2, [r3, #12]
 8001690:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001692:	4b43      	ldr	r3, [pc, #268]	@ (80017a0 <MX_GPIO_Init+0x124>)
 8001694:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001696:	4a42      	ldr	r2, [pc, #264]	@ (80017a0 <MX_GPIO_Init+0x124>)
 8001698:	f043 0304 	orr.w	r3, r3, #4
 800169c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800169e:	4b40      	ldr	r3, [pc, #256]	@ (80017a0 <MX_GPIO_Init+0x124>)
 80016a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016a2:	f003 0304 	and.w	r3, r3, #4
 80016a6:	613b      	str	r3, [r7, #16]
 80016a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80016aa:	4b3d      	ldr	r3, [pc, #244]	@ (80017a0 <MX_GPIO_Init+0x124>)
 80016ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016ae:	4a3c      	ldr	r2, [pc, #240]	@ (80017a0 <MX_GPIO_Init+0x124>)
 80016b0:	f043 0320 	orr.w	r3, r3, #32
 80016b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016b6:	4b3a      	ldr	r3, [pc, #232]	@ (80017a0 <MX_GPIO_Init+0x124>)
 80016b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016ba:	f003 0320 	and.w	r3, r3, #32
 80016be:	60fb      	str	r3, [r7, #12]
 80016c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016c2:	4b37      	ldr	r3, [pc, #220]	@ (80017a0 <MX_GPIO_Init+0x124>)
 80016c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016c6:	4a36      	ldr	r2, [pc, #216]	@ (80017a0 <MX_GPIO_Init+0x124>)
 80016c8:	f043 0301 	orr.w	r3, r3, #1
 80016cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016ce:	4b34      	ldr	r3, [pc, #208]	@ (80017a0 <MX_GPIO_Init+0x124>)
 80016d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016d2:	f003 0301 	and.w	r3, r3, #1
 80016d6:	60bb      	str	r3, [r7, #8]
 80016d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016da:	4b31      	ldr	r3, [pc, #196]	@ (80017a0 <MX_GPIO_Init+0x124>)
 80016dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016de:	4a30      	ldr	r2, [pc, #192]	@ (80017a0 <MX_GPIO_Init+0x124>)
 80016e0:	f043 0302 	orr.w	r3, r3, #2
 80016e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016e6:	4b2e      	ldr	r3, [pc, #184]	@ (80017a0 <MX_GPIO_Init+0x124>)
 80016e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016ea:	f003 0302 	and.w	r3, r3, #2
 80016ee:	607b      	str	r3, [r7, #4]
 80016f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_8, GPIO_PIN_RESET);
 80016f2:	2200      	movs	r2, #0
 80016f4:	f44f 7190 	mov.w	r1, #288	@ 0x120
 80016f8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80016fc:	f001 f96e 	bl	80029dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8001700:	2200      	movs	r2, #0
 8001702:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001706:	4827      	ldr	r0, [pc, #156]	@ (80017a4 <MX_GPIO_Init+0x128>)
 8001708:	f001 f968 	bl	80029dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800170c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001710:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001712:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001716:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001718:	2300      	movs	r3, #0
 800171a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800171c:	f107 0314 	add.w	r3, r7, #20
 8001720:	4619      	mov	r1, r3
 8001722:	4821      	ldr	r0, [pc, #132]	@ (80017a8 <MX_GPIO_Init+0x12c>)
 8001724:	f000 ffd8 	bl	80026d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPUART1_TX_Pin LPUART1_RX_Pin */
  GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8001728:	230c      	movs	r3, #12
 800172a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800172c:	2302      	movs	r3, #2
 800172e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001730:	2300      	movs	r3, #0
 8001732:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001734:	2300      	movs	r3, #0
 8001736:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8001738:	230c      	movs	r3, #12
 800173a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800173c:	f107 0314 	add.w	r3, r7, #20
 8001740:	4619      	mov	r1, r3
 8001742:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001746:	f000 ffc7 	bl	80026d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA8 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_8;
 800174a:	f44f 7390 	mov.w	r3, #288	@ 0x120
 800174e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001750:	2301      	movs	r3, #1
 8001752:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001754:	2300      	movs	r3, #0
 8001756:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001758:	2300      	movs	r3, #0
 800175a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800175c:	f107 0314 	add.w	r3, r7, #20
 8001760:	4619      	mov	r1, r3
 8001762:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001766:	f000 ffb7 	bl	80026d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800176a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800176e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001770:	2301      	movs	r3, #1
 8001772:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001774:	2300      	movs	r3, #0
 8001776:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001778:	2300      	movs	r3, #0
 800177a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800177c:	f107 0314 	add.w	r3, r7, #20
 8001780:	4619      	mov	r1, r3
 8001782:	4808      	ldr	r0, [pc, #32]	@ (80017a4 <MX_GPIO_Init+0x128>)
 8001784:	f000 ffa8 	bl	80026d8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001788:	2200      	movs	r2, #0
 800178a:	2100      	movs	r1, #0
 800178c:	2028      	movs	r0, #40	@ 0x28
 800178e:	f000 ff6e 	bl	800266e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001792:	2028      	movs	r0, #40	@ 0x28
 8001794:	f000 ff85 	bl	80026a2 <HAL_NVIC_EnableIRQ>

}
 8001798:	bf00      	nop
 800179a:	3728      	adds	r7, #40	@ 0x28
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}
 80017a0:	40021000 	.word	0x40021000
 80017a4:	48000400 	.word	0x48000400
 80017a8:	48000800 	.word	0x48000800

080017ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017b0:	f000 fe11 	bl	80023d6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017b4:	f000 f812 	bl	80017dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017b8:	f7ff ff60 	bl	800167c <MX_GPIO_Init>
  MX_TIM3_Init();
 80017bc:	f000 f9dc 	bl	8001b78 <MX_TIM3_Init>
  MX_TIM4_Init();
 80017c0:	f000 fa30 	bl	8001c24 <MX_TIM4_Init>
  MX_TIM5_Init();
 80017c4:	f000 fa84 	bl	8001cd0 <MX_TIM5_Init>
  MX_TIM20_Init();
 80017c8:	f000 fb90 	bl	8001eec <MX_TIM20_Init>
  MX_TIM8_Init();
 80017cc:	f000 fad6 	bl	8001d7c <MX_TIM8_Init>
  MX_TIM2_Init();
 80017d0:	f000 f984 	bl	8001adc <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
	transporter_begin();
 80017d4:	f000 fd56 	bl	8002284 <transporter_begin>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 80017d8:	bf00      	nop
 80017da:	e7fd      	b.n	80017d8 <main+0x2c>

080017dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b094      	sub	sp, #80	@ 0x50
 80017e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017e2:	f107 0318 	add.w	r3, r7, #24
 80017e6:	2238      	movs	r2, #56	@ 0x38
 80017e8:	2100      	movs	r1, #0
 80017ea:	4618      	mov	r0, r3
 80017ec:	f003 fd22 	bl	8005234 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017f0:	1d3b      	adds	r3, r7, #4
 80017f2:	2200      	movs	r2, #0
 80017f4:	601a      	str	r2, [r3, #0]
 80017f6:	605a      	str	r2, [r3, #4]
 80017f8:	609a      	str	r2, [r3, #8]
 80017fa:	60da      	str	r2, [r3, #12]
 80017fc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80017fe:	2000      	movs	r0, #0
 8001800:	f001 f928 	bl	8002a54 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001804:	2302      	movs	r3, #2
 8001806:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001808:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800180c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800180e:	2340      	movs	r3, #64	@ 0x40
 8001810:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001812:	2302      	movs	r3, #2
 8001814:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001816:	2302      	movs	r3, #2
 8001818:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800181a:	2304      	movs	r3, #4
 800181c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800181e:	2355      	movs	r3, #85	@ 0x55
 8001820:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001822:	2302      	movs	r3, #2
 8001824:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001826:	2302      	movs	r3, #2
 8001828:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800182a:	2302      	movs	r3, #2
 800182c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800182e:	f107 0318 	add.w	r3, r7, #24
 8001832:	4618      	mov	r0, r3
 8001834:	f001 f9c2 	bl	8002bbc <HAL_RCC_OscConfig>
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	d001      	beq.n	8001842 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800183e:	f000 f899 	bl	8001974 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001842:	230f      	movs	r3, #15
 8001844:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001846:	2303      	movs	r3, #3
 8001848:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800184a:	2300      	movs	r3, #0
 800184c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800184e:	2300      	movs	r3, #0
 8001850:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001852:	2300      	movs	r3, #0
 8001854:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001856:	1d3b      	adds	r3, r7, #4
 8001858:	2104      	movs	r1, #4
 800185a:	4618      	mov	r0, r3
 800185c:	f001 fcc0 	bl	80031e0 <HAL_RCC_ClockConfig>
 8001860:	4603      	mov	r3, r0
 8001862:	2b00      	cmp	r3, #0
 8001864:	d001      	beq.n	800186a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001866:	f000 f885 	bl	8001974 <Error_Handler>
  }
}
 800186a:	bf00      	nop
 800186c:	3750      	adds	r7, #80	@ 0x50
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}
	...

08001874 <HAL_TIM_PeriodElapsedCallback>:
//
//		MDXX_set_range(&motor3, 2000, 65535);
//		MDXX_set_range(&motor4, 2000, 65535);
//	}
//}
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001874:	b580      	push	{r7, lr}
 8001876:	b082      	sub	sp, #8
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
    if (htim == &htim2) {
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	4a2f      	ldr	r2, [pc, #188]	@ (800193c <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8001880:	4293      	cmp	r3, r2
 8001882:	d156      	bne.n	8001932 <HAL_TIM_PeriodElapsedCallback+0xbe>
        // Process encoders
        QEI_get_diff_count(&encoder3);
 8001884:	482e      	ldr	r0, [pc, #184]	@ (8001940 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8001886:	f7ff fd23 	bl	80012d0 <QEI_get_diff_count>
        QEI_compute_data(&encoder3);
 800188a:	482d      	ldr	r0, [pc, #180]	@ (8001940 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 800188c:	f7ff fe00 	bl	8001490 <QEI_compute_data>

        QEI_get_diff_count(&encoder4);
 8001890:	482c      	ldr	r0, [pc, #176]	@ (8001944 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8001892:	f7ff fd1d 	bl	80012d0 <QEI_get_diff_count>
        QEI_compute_data(&encoder4);
 8001896:	482b      	ldr	r0, [pc, #172]	@ (8001944 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8001898:	f7ff fdfa 	bl	8001490 <QEI_compute_data>

        // Increment counter (1ms per call)
        msCounter++;
 800189c:	4b2a      	ldr	r3, [pc, #168]	@ (8001948 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	3301      	adds	r3, #1
 80018a2:	4a29      	ldr	r2, [pc, #164]	@ (8001948 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 80018a4:	6013      	str	r3, [r2, #0]

        // Check if 3 seconds have passed
        if (msCounter >= DIRECTION_CHANGE_INTERVAL) {
 80018a6:	4b28      	ldr	r3, [pc, #160]	@ (8001948 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f242 7210 	movw	r2, #10000	@ 0x2710
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d30c      	bcc.n	80018cc <HAL_TIM_PeriodElapsedCallback+0x58>
            msCounter = 0; // Reset counter
 80018b2:	4b25      	ldr	r3, [pc, #148]	@ (8001948 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	601a      	str	r2, [r3, #0]
            motorDirection = !motorDirection; // Toggle direction
 80018b8:	4b24      	ldr	r3, [pc, #144]	@ (800194c <HAL_TIM_PeriodElapsedCallback+0xd8>)
 80018ba:	781b      	ldrb	r3, [r3, #0]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	bf0c      	ite	eq
 80018c0:	2301      	moveq	r3, #1
 80018c2:	2300      	movne	r3, #0
 80018c4:	b2db      	uxtb	r3, r3
 80018c6:	461a      	mov	r2, r3
 80018c8:	4b20      	ldr	r3, [pc, #128]	@ (800194c <HAL_TIM_PeriodElapsedCallback+0xd8>)
 80018ca:	701a      	strb	r2, [r3, #0]
        }

        // Set motor range based on direction
        if (motorDirection == 0) {
 80018cc:	4b1f      	ldr	r3, [pc, #124]	@ (800194c <HAL_TIM_PeriodElapsedCallback+0xd8>)
 80018ce:	781b      	ldrb	r3, [r3, #0]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d117      	bne.n	8001904 <HAL_TIM_PeriodElapsedCallback+0x90>
            // Positive direction
        	setpoint = 0.7/3;
 80018d4:	4b1e      	ldr	r3, [pc, #120]	@ (8001950 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 80018d6:	4a1f      	ldr	r2, [pc, #124]	@ (8001954 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 80018d8:	601a      	str	r2, [r3, #0]
            MDXX_set_range(&motor4, 2000, 65535);
 80018da:	eddf 0a1f 	vldr	s1, [pc, #124]	@ 8001958 <HAL_TIM_PeriodElapsedCallback+0xe4>
 80018de:	ed9f 0a1f 	vldr	s0, [pc, #124]	@ 800195c <HAL_TIM_PeriodElapsedCallback+0xe8>
 80018e2:	481f      	ldr	r0, [pc, #124]	@ (8001960 <HAL_TIM_PeriodElapsedCallback+0xec>)
 80018e4:	f7ff f924 	bl	8000b30 <MDXX_set_range>
            filteredValue = FIR_process(&lowPassFilter, encoder4.radps);
 80018e8:	4b16      	ldr	r3, [pc, #88]	@ (8001944 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 80018ea:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 80018ee:	eeb0 0a67 	vmov.f32	s0, s15
 80018f2:	481c      	ldr	r0, [pc, #112]	@ (8001964 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 80018f4:	f7ff fb16 	bl	8000f24 <FIR_process>
 80018f8:	eef0 7a40 	vmov.f32	s15, s0
 80018fc:	4b1a      	ldr	r3, [pc, #104]	@ (8001968 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 80018fe:	edc3 7a00 	vstr	s15, [r3]
        	setpoint = -0.7/3;
            MDXX_set_range(&motor4, 2000, -65535);
            filteredValue = FIR_process(&lowPassFilter, encoder4.radps);
        }
    }
}
 8001902:	e016      	b.n	8001932 <HAL_TIM_PeriodElapsedCallback+0xbe>
        	setpoint = -0.7/3;
 8001904:	4b12      	ldr	r3, [pc, #72]	@ (8001950 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8001906:	4a19      	ldr	r2, [pc, #100]	@ (800196c <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8001908:	601a      	str	r2, [r3, #0]
            MDXX_set_range(&motor4, 2000, -65535);
 800190a:	eddf 0a19 	vldr	s1, [pc, #100]	@ 8001970 <HAL_TIM_PeriodElapsedCallback+0xfc>
 800190e:	ed9f 0a13 	vldr	s0, [pc, #76]	@ 800195c <HAL_TIM_PeriodElapsedCallback+0xe8>
 8001912:	4813      	ldr	r0, [pc, #76]	@ (8001960 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8001914:	f7ff f90c 	bl	8000b30 <MDXX_set_range>
            filteredValue = FIR_process(&lowPassFilter, encoder4.radps);
 8001918:	4b0a      	ldr	r3, [pc, #40]	@ (8001944 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 800191a:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800191e:	eeb0 0a67 	vmov.f32	s0, s15
 8001922:	4810      	ldr	r0, [pc, #64]	@ (8001964 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8001924:	f7ff fafe 	bl	8000f24 <FIR_process>
 8001928:	eef0 7a40 	vmov.f32	s15, s0
 800192c:	4b0e      	ldr	r3, [pc, #56]	@ (8001968 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 800192e:	edc3 7a00 	vstr	s15, [r3]
}
 8001932:	bf00      	nop
 8001934:	3708      	adds	r7, #8
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	2000008c 	.word	0x2000008c
 8001940:	200002ec 	.word	0x200002ec
 8001944:	20000338 	.word	0x20000338
 8001948:	20000078 	.word	0x20000078
 800194c:	2000007c 	.word	0x2000007c
 8001950:	20000080 	.word	0x20000080
 8001954:	3e6eeeef 	.word	0x3e6eeeef
 8001958:	477fff00 	.word	0x477fff00
 800195c:	44fa0000 	.word	0x44fa0000
 8001960:	200002a0 	.word	0x200002a0
 8001964:	200003dc 	.word	0x200003dc
 8001968:	20000084 	.word	0x20000084
 800196c:	be6eeeef 	.word	0xbe6eeeef
 8001970:	c77fff00 	.word	0xc77fff00

08001974 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001978:	b672      	cpsid	i
}
 800197a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800197c:	bf00      	nop
 800197e:	e7fd      	b.n	800197c <Error_Handler+0x8>

08001980 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b082      	sub	sp, #8
 8001984:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001986:	4b0f      	ldr	r3, [pc, #60]	@ (80019c4 <HAL_MspInit+0x44>)
 8001988:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800198a:	4a0e      	ldr	r2, [pc, #56]	@ (80019c4 <HAL_MspInit+0x44>)
 800198c:	f043 0301 	orr.w	r3, r3, #1
 8001990:	6613      	str	r3, [r2, #96]	@ 0x60
 8001992:	4b0c      	ldr	r3, [pc, #48]	@ (80019c4 <HAL_MspInit+0x44>)
 8001994:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001996:	f003 0301 	and.w	r3, r3, #1
 800199a:	607b      	str	r3, [r7, #4]
 800199c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800199e:	4b09      	ldr	r3, [pc, #36]	@ (80019c4 <HAL_MspInit+0x44>)
 80019a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019a2:	4a08      	ldr	r2, [pc, #32]	@ (80019c4 <HAL_MspInit+0x44>)
 80019a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019a8:	6593      	str	r3, [r2, #88]	@ 0x58
 80019aa:	4b06      	ldr	r3, [pc, #24]	@ (80019c4 <HAL_MspInit+0x44>)
 80019ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019b2:	603b      	str	r3, [r7, #0]
 80019b4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80019b6:	f001 f8f1 	bl	8002b9c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019ba:	bf00      	nop
 80019bc:	3708      	adds	r7, #8
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	40021000 	.word	0x40021000

080019c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019c8:	b480      	push	{r7}
 80019ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80019cc:	bf00      	nop
 80019ce:	e7fd      	b.n	80019cc <NMI_Handler+0x4>

080019d0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019d0:	b480      	push	{r7}
 80019d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019d4:	bf00      	nop
 80019d6:	e7fd      	b.n	80019d4 <HardFault_Handler+0x4>

080019d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019d8:	b480      	push	{r7}
 80019da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019dc:	bf00      	nop
 80019de:	e7fd      	b.n	80019dc <MemManage_Handler+0x4>

080019e0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019e4:	bf00      	nop
 80019e6:	e7fd      	b.n	80019e4 <BusFault_Handler+0x4>

080019e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019e8:	b480      	push	{r7}
 80019ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019ec:	bf00      	nop
 80019ee:	e7fd      	b.n	80019ec <UsageFault_Handler+0x4>

080019f0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019f0:	b480      	push	{r7}
 80019f2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019f4:	bf00      	nop
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr

080019fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019fe:	b480      	push	{r7}
 8001a00:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a02:	bf00      	nop
 8001a04:	46bd      	mov	sp, r7
 8001a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0a:	4770      	bx	lr

08001a0c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a10:	bf00      	nop
 8001a12:	46bd      	mov	sp, r7
 8001a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a18:	4770      	bx	lr

08001a1a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a1a:	b580      	push	{r7, lr}
 8001a1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a1e:	f000 fd2d 	bl	800247c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a22:	bf00      	nop
 8001a24:	bd80      	pop	{r7, pc}
	...

08001a28 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001a2c:	4802      	ldr	r0, [pc, #8]	@ (8001a38 <TIM2_IRQHandler+0x10>)
 8001a2e:	f002 f999 	bl	8003d64 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001a32:	bf00      	nop
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	2000008c 	.word	0x2000008c

08001a3c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001a40:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001a44:	f000 ffe2 	bl	8002a0c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001a48:	bf00      	nop
 8001a4a:	bd80      	pop	{r7, pc}

08001a4c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b086      	sub	sp, #24
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a54:	4a14      	ldr	r2, [pc, #80]	@ (8001aa8 <_sbrk+0x5c>)
 8001a56:	4b15      	ldr	r3, [pc, #84]	@ (8001aac <_sbrk+0x60>)
 8001a58:	1ad3      	subs	r3, r2, r3
 8001a5a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a5c:	697b      	ldr	r3, [r7, #20]
 8001a5e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a60:	4b13      	ldr	r3, [pc, #76]	@ (8001ab0 <_sbrk+0x64>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d102      	bne.n	8001a6e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a68:	4b11      	ldr	r3, [pc, #68]	@ (8001ab0 <_sbrk+0x64>)
 8001a6a:	4a12      	ldr	r2, [pc, #72]	@ (8001ab4 <_sbrk+0x68>)
 8001a6c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a6e:	4b10      	ldr	r3, [pc, #64]	@ (8001ab0 <_sbrk+0x64>)
 8001a70:	681a      	ldr	r2, [r3, #0]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	4413      	add	r3, r2
 8001a76:	693a      	ldr	r2, [r7, #16]
 8001a78:	429a      	cmp	r2, r3
 8001a7a:	d207      	bcs.n	8001a8c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a7c:	f003 fbf2 	bl	8005264 <__errno>
 8001a80:	4603      	mov	r3, r0
 8001a82:	220c      	movs	r2, #12
 8001a84:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a86:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001a8a:	e009      	b.n	8001aa0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a8c:	4b08      	ldr	r3, [pc, #32]	@ (8001ab0 <_sbrk+0x64>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a92:	4b07      	ldr	r3, [pc, #28]	@ (8001ab0 <_sbrk+0x64>)
 8001a94:	681a      	ldr	r2, [r3, #0]
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	4413      	add	r3, r2
 8001a9a:	4a05      	ldr	r2, [pc, #20]	@ (8001ab0 <_sbrk+0x64>)
 8001a9c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a9e:	68fb      	ldr	r3, [r7, #12]
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	3718      	adds	r7, #24
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	20020000 	.word	0x20020000
 8001aac:	00000400 	.word	0x00000400
 8001ab0:	20000088 	.word	0x20000088
 8001ab4:	20000538 	.word	0x20000538

08001ab8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001abc:	4b06      	ldr	r3, [pc, #24]	@ (8001ad8 <SystemInit+0x20>)
 8001abe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ac2:	4a05      	ldr	r2, [pc, #20]	@ (8001ad8 <SystemInit+0x20>)
 8001ac4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001ac8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001acc:	bf00      	nop
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr
 8001ad6:	bf00      	nop
 8001ad8:	e000ed00 	.word	0xe000ed00

08001adc <MX_TIM2_Init>:
TIM_HandleTypeDef htim8;
TIM_HandleTypeDef htim20;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b088      	sub	sp, #32
 8001ae0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ae2:	f107 0310 	add.w	r3, r7, #16
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	601a      	str	r2, [r3, #0]
 8001aea:	605a      	str	r2, [r3, #4]
 8001aec:	609a      	str	r2, [r3, #8]
 8001aee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001af0:	1d3b      	adds	r3, r7, #4
 8001af2:	2200      	movs	r2, #0
 8001af4:	601a      	str	r2, [r3, #0]
 8001af6:	605a      	str	r2, [r3, #4]
 8001af8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001afa:	4b1e      	ldr	r3, [pc, #120]	@ (8001b74 <MX_TIM2_Init+0x98>)
 8001afc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001b00:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 169;
 8001b02:	4b1c      	ldr	r3, [pc, #112]	@ (8001b74 <MX_TIM2_Init+0x98>)
 8001b04:	22a9      	movs	r2, #169	@ 0xa9
 8001b06:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b08:	4b1a      	ldr	r3, [pc, #104]	@ (8001b74 <MX_TIM2_Init+0x98>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8001b0e:	4b19      	ldr	r3, [pc, #100]	@ (8001b74 <MX_TIM2_Init+0x98>)
 8001b10:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001b14:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b16:	4b17      	ldr	r3, [pc, #92]	@ (8001b74 <MX_TIM2_Init+0x98>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b1c:	4b15      	ldr	r3, [pc, #84]	@ (8001b74 <MX_TIM2_Init+0x98>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001b22:	4814      	ldr	r0, [pc, #80]	@ (8001b74 <MX_TIM2_Init+0x98>)
 8001b24:	f001 fd40 	bl	80035a8 <HAL_TIM_Base_Init>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d001      	beq.n	8001b32 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001b2e:	f7ff ff21 	bl	8001974 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b32:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b36:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001b38:	f107 0310 	add.w	r3, r7, #16
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	480d      	ldr	r0, [pc, #52]	@ (8001b74 <MX_TIM2_Init+0x98>)
 8001b40:	f002 fb74 	bl	800422c <HAL_TIM_ConfigClockSource>
 8001b44:	4603      	mov	r3, r0
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d001      	beq.n	8001b4e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001b4a:	f7ff ff13 	bl	8001974 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001b4e:	2320      	movs	r3, #32
 8001b50:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b52:	2300      	movs	r3, #0
 8001b54:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b56:	1d3b      	adds	r3, r7, #4
 8001b58:	4619      	mov	r1, r3
 8001b5a:	4806      	ldr	r0, [pc, #24]	@ (8001b74 <MX_TIM2_Init+0x98>)
 8001b5c:	f003 f944 	bl	8004de8 <HAL_TIMEx_MasterConfigSynchronization>
 8001b60:	4603      	mov	r3, r0
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d001      	beq.n	8001b6a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001b66:	f7ff ff05 	bl	8001974 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001b6a:	bf00      	nop
 8001b6c:	3720      	adds	r7, #32
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	2000008c 	.word	0x2000008c

08001b78 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b08c      	sub	sp, #48	@ 0x30
 8001b7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001b7e:	f107 030c 	add.w	r3, r7, #12
 8001b82:	2224      	movs	r2, #36	@ 0x24
 8001b84:	2100      	movs	r1, #0
 8001b86:	4618      	mov	r0, r3
 8001b88:	f003 fb54 	bl	8005234 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b8c:	463b      	mov	r3, r7
 8001b8e:	2200      	movs	r2, #0
 8001b90:	601a      	str	r2, [r3, #0]
 8001b92:	605a      	str	r2, [r3, #4]
 8001b94:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001b96:	4b21      	ldr	r3, [pc, #132]	@ (8001c1c <MX_TIM3_Init+0xa4>)
 8001b98:	4a21      	ldr	r2, [pc, #132]	@ (8001c20 <MX_TIM3_Init+0xa8>)
 8001b9a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001b9c:	4b1f      	ldr	r3, [pc, #124]	@ (8001c1c <MX_TIM3_Init+0xa4>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ba2:	4b1e      	ldr	r3, [pc, #120]	@ (8001c1c <MX_TIM3_Init+0xa4>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001ba8:	4b1c      	ldr	r3, [pc, #112]	@ (8001c1c <MX_TIM3_Init+0xa4>)
 8001baa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001bae:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bb0:	4b1a      	ldr	r3, [pc, #104]	@ (8001c1c <MX_TIM3_Init+0xa4>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bb6:	4b19      	ldr	r3, [pc, #100]	@ (8001c1c <MX_TIM3_Init+0xa4>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001bbc:	2303      	movs	r3, #3
 8001bbe:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001be0:	f107 030c 	add.w	r3, r7, #12
 8001be4:	4619      	mov	r1, r3
 8001be6:	480d      	ldr	r0, [pc, #52]	@ (8001c1c <MX_TIM3_Init+0xa4>)
 8001be8:	f001 ff88 	bl	8003afc <HAL_TIM_Encoder_Init>
 8001bec:	4603      	mov	r3, r0
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d001      	beq.n	8001bf6 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8001bf2:	f7ff febf 	bl	8001974 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001bfe:	463b      	mov	r3, r7
 8001c00:	4619      	mov	r1, r3
 8001c02:	4806      	ldr	r0, [pc, #24]	@ (8001c1c <MX_TIM3_Init+0xa4>)
 8001c04:	f003 f8f0 	bl	8004de8 <HAL_TIMEx_MasterConfigSynchronization>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d001      	beq.n	8001c12 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8001c0e:	f7ff feb1 	bl	8001974 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001c12:	bf00      	nop
 8001c14:	3730      	adds	r7, #48	@ 0x30
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	200000d8 	.word	0x200000d8
 8001c20:	40000400 	.word	0x40000400

08001c24 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b08c      	sub	sp, #48	@ 0x30
 8001c28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001c2a:	f107 030c 	add.w	r3, r7, #12
 8001c2e:	2224      	movs	r2, #36	@ 0x24
 8001c30:	2100      	movs	r1, #0
 8001c32:	4618      	mov	r0, r3
 8001c34:	f003 fafe 	bl	8005234 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c38:	463b      	mov	r3, r7
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	601a      	str	r2, [r3, #0]
 8001c3e:	605a      	str	r2, [r3, #4]
 8001c40:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001c42:	4b21      	ldr	r3, [pc, #132]	@ (8001cc8 <MX_TIM4_Init+0xa4>)
 8001c44:	4a21      	ldr	r2, [pc, #132]	@ (8001ccc <MX_TIM4_Init+0xa8>)
 8001c46:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001c48:	4b1f      	ldr	r3, [pc, #124]	@ (8001cc8 <MX_TIM4_Init+0xa4>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c4e:	4b1e      	ldr	r3, [pc, #120]	@ (8001cc8 <MX_TIM4_Init+0xa4>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001c54:	4b1c      	ldr	r3, [pc, #112]	@ (8001cc8 <MX_TIM4_Init+0xa4>)
 8001c56:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001c5a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c5c:	4b1a      	ldr	r3, [pc, #104]	@ (8001cc8 <MX_TIM4_Init+0xa4>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c62:	4b19      	ldr	r3, [pc, #100]	@ (8001cc8 <MX_TIM4_Init+0xa4>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001c68:	2303      	movs	r3, #3
 8001c6a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001c70:	2301      	movs	r3, #1
 8001c72:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001c74:	2300      	movs	r3, #0
 8001c76:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001c80:	2301      	movs	r3, #1
 8001c82:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001c84:	2300      	movs	r3, #0
 8001c86:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001c8c:	f107 030c 	add.w	r3, r7, #12
 8001c90:	4619      	mov	r1, r3
 8001c92:	480d      	ldr	r0, [pc, #52]	@ (8001cc8 <MX_TIM4_Init+0xa4>)
 8001c94:	f001 ff32 	bl	8003afc <HAL_TIM_Encoder_Init>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d001      	beq.n	8001ca2 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8001c9e:	f7ff fe69 	bl	8001974 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001caa:	463b      	mov	r3, r7
 8001cac:	4619      	mov	r1, r3
 8001cae:	4806      	ldr	r0, [pc, #24]	@ (8001cc8 <MX_TIM4_Init+0xa4>)
 8001cb0:	f003 f89a 	bl	8004de8 <HAL_TIMEx_MasterConfigSynchronization>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d001      	beq.n	8001cbe <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8001cba:	f7ff fe5b 	bl	8001974 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001cbe:	bf00      	nop
 8001cc0:	3730      	adds	r7, #48	@ 0x30
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	20000124 	.word	0x20000124
 8001ccc:	40000800 	.word	0x40000800

08001cd0 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b08c      	sub	sp, #48	@ 0x30
 8001cd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001cd6:	f107 030c 	add.w	r3, r7, #12
 8001cda:	2224      	movs	r2, #36	@ 0x24
 8001cdc:	2100      	movs	r1, #0
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f003 faa8 	bl	8005234 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ce4:	463b      	mov	r3, r7
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	601a      	str	r2, [r3, #0]
 8001cea:	605a      	str	r2, [r3, #4]
 8001cec:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001cee:	4b21      	ldr	r3, [pc, #132]	@ (8001d74 <MX_TIM5_Init+0xa4>)
 8001cf0:	4a21      	ldr	r2, [pc, #132]	@ (8001d78 <MX_TIM5_Init+0xa8>)
 8001cf2:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001cf4:	4b1f      	ldr	r3, [pc, #124]	@ (8001d74 <MX_TIM5_Init+0xa4>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cfa:	4b1e      	ldr	r3, [pc, #120]	@ (8001d74 <MX_TIM5_Init+0xa4>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001d00:	4b1c      	ldr	r3, [pc, #112]	@ (8001d74 <MX_TIM5_Init+0xa4>)
 8001d02:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001d06:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d08:	4b1a      	ldr	r3, [pc, #104]	@ (8001d74 <MX_TIM5_Init+0xa4>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d0e:	4b19      	ldr	r3, [pc, #100]	@ (8001d74 <MX_TIM5_Init+0xa4>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001d14:	2303      	movs	r3, #3
 8001d16:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001d20:	2300      	movs	r3, #0
 8001d22:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001d24:	2300      	movs	r3, #0
 8001d26:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001d30:	2300      	movs	r3, #0
 8001d32:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001d34:	2300      	movs	r3, #0
 8001d36:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8001d38:	f107 030c 	add.w	r3, r7, #12
 8001d3c:	4619      	mov	r1, r3
 8001d3e:	480d      	ldr	r0, [pc, #52]	@ (8001d74 <MX_TIM5_Init+0xa4>)
 8001d40:	f001 fedc 	bl	8003afc <HAL_TIM_Encoder_Init>
 8001d44:	4603      	mov	r3, r0
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d001      	beq.n	8001d4e <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 8001d4a:	f7ff fe13 	bl	8001974 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d52:	2300      	movs	r3, #0
 8001d54:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001d56:	463b      	mov	r3, r7
 8001d58:	4619      	mov	r1, r3
 8001d5a:	4806      	ldr	r0, [pc, #24]	@ (8001d74 <MX_TIM5_Init+0xa4>)
 8001d5c:	f003 f844 	bl	8004de8 <HAL_TIMEx_MasterConfigSynchronization>
 8001d60:	4603      	mov	r3, r0
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d001      	beq.n	8001d6a <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 8001d66:	f7ff fe05 	bl	8001974 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001d6a:	bf00      	nop
 8001d6c:	3730      	adds	r7, #48	@ 0x30
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	20000170 	.word	0x20000170
 8001d78:	40000c00 	.word	0x40000c00

08001d7c <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b098      	sub	sp, #96	@ 0x60
 8001d80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d82:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001d86:	2200      	movs	r2, #0
 8001d88:	601a      	str	r2, [r3, #0]
 8001d8a:	605a      	str	r2, [r3, #4]
 8001d8c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d8e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001d92:	2200      	movs	r2, #0
 8001d94:	601a      	str	r2, [r3, #0]
 8001d96:	605a      	str	r2, [r3, #4]
 8001d98:	609a      	str	r2, [r3, #8]
 8001d9a:	60da      	str	r2, [r3, #12]
 8001d9c:	611a      	str	r2, [r3, #16]
 8001d9e:	615a      	str	r2, [r3, #20]
 8001da0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001da2:	1d3b      	adds	r3, r7, #4
 8001da4:	2234      	movs	r2, #52	@ 0x34
 8001da6:	2100      	movs	r1, #0
 8001da8:	4618      	mov	r0, r3
 8001daa:	f003 fa43 	bl	8005234 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001dae:	4b4d      	ldr	r3, [pc, #308]	@ (8001ee4 <MX_TIM8_Init+0x168>)
 8001db0:	4a4d      	ldr	r2, [pc, #308]	@ (8001ee8 <MX_TIM8_Init+0x16c>)
 8001db2:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001db4:	4b4b      	ldr	r3, [pc, #300]	@ (8001ee4 <MX_TIM8_Init+0x168>)
 8001db6:	2200      	movs	r2, #0
 8001db8:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dba:	4b4a      	ldr	r3, [pc, #296]	@ (8001ee4 <MX_TIM8_Init+0x168>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001dc0:	4b48      	ldr	r3, [pc, #288]	@ (8001ee4 <MX_TIM8_Init+0x168>)
 8001dc2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001dc6:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dc8:	4b46      	ldr	r3, [pc, #280]	@ (8001ee4 <MX_TIM8_Init+0x168>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001dce:	4b45      	ldr	r3, [pc, #276]	@ (8001ee4 <MX_TIM8_Init+0x168>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dd4:	4b43      	ldr	r3, [pc, #268]	@ (8001ee4 <MX_TIM8_Init+0x168>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001dda:	4842      	ldr	r0, [pc, #264]	@ (8001ee4 <MX_TIM8_Init+0x168>)
 8001ddc:	f001 fd24 	bl	8003828 <HAL_TIM_PWM_Init>
 8001de0:	4603      	mov	r3, r0
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d001      	beq.n	8001dea <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 8001de6:	f7ff fdc5 	bl	8001974 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001dea:	2300      	movs	r3, #0
 8001dec:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001dee:	2300      	movs	r3, #0
 8001df0:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001df2:	2300      	movs	r3, #0
 8001df4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001df6:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	4839      	ldr	r0, [pc, #228]	@ (8001ee4 <MX_TIM8_Init+0x168>)
 8001dfe:	f002 fff3 	bl	8004de8 <HAL_TIMEx_MasterConfigSynchronization>
 8001e02:	4603      	mov	r3, r0
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d001      	beq.n	8001e0c <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 8001e08:	f7ff fdb4 	bl	8001974 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e0c:	2360      	movs	r3, #96	@ 0x60
 8001e0e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8001e10:	2300      	movs	r3, #0
 8001e12:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e14:	2300      	movs	r3, #0
 8001e16:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001e20:	2300      	movs	r3, #0
 8001e22:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001e24:	2300      	movs	r3, #0
 8001e26:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e28:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	4619      	mov	r1, r3
 8001e30:	482c      	ldr	r0, [pc, #176]	@ (8001ee4 <MX_TIM8_Init+0x168>)
 8001e32:	f002 f8e7 	bl	8004004 <HAL_TIM_PWM_ConfigChannel>
 8001e36:	4603      	mov	r3, r0
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d001      	beq.n	8001e40 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8001e3c:	f7ff fd9a 	bl	8001974 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001e40:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001e44:	2204      	movs	r2, #4
 8001e46:	4619      	mov	r1, r3
 8001e48:	4826      	ldr	r0, [pc, #152]	@ (8001ee4 <MX_TIM8_Init+0x168>)
 8001e4a:	f002 f8db 	bl	8004004 <HAL_TIM_PWM_ConfigChannel>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d001      	beq.n	8001e58 <MX_TIM8_Init+0xdc>
  {
    Error_Handler();
 8001e54:	f7ff fd8e 	bl	8001974 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001e58:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001e5c:	2208      	movs	r2, #8
 8001e5e:	4619      	mov	r1, r3
 8001e60:	4820      	ldr	r0, [pc, #128]	@ (8001ee4 <MX_TIM8_Init+0x168>)
 8001e62:	f002 f8cf 	bl	8004004 <HAL_TIM_PWM_ConfigChannel>
 8001e66:	4603      	mov	r3, r0
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d001      	beq.n	8001e70 <MX_TIM8_Init+0xf4>
  {
    Error_Handler();
 8001e6c:	f7ff fd82 	bl	8001974 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001e70:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001e74:	220c      	movs	r2, #12
 8001e76:	4619      	mov	r1, r3
 8001e78:	481a      	ldr	r0, [pc, #104]	@ (8001ee4 <MX_TIM8_Init+0x168>)
 8001e7a:	f002 f8c3 	bl	8004004 <HAL_TIM_PWM_ConfigChannel>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d001      	beq.n	8001e88 <MX_TIM8_Init+0x10c>
  {
    Error_Handler();
 8001e84:	f7ff fd76 	bl	8001974 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001e90:	2300      	movs	r3, #0
 8001e92:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001e94:	2300      	movs	r3, #0
 8001e96:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001e9c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001ea0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001eae:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001eb2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001ec0:	1d3b      	adds	r3, r7, #4
 8001ec2:	4619      	mov	r1, r3
 8001ec4:	4807      	ldr	r0, [pc, #28]	@ (8001ee4 <MX_TIM8_Init+0x168>)
 8001ec6:	f003 f825 	bl	8004f14 <HAL_TIMEx_ConfigBreakDeadTime>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d001      	beq.n	8001ed4 <MX_TIM8_Init+0x158>
  {
    Error_Handler();
 8001ed0:	f7ff fd50 	bl	8001974 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001ed4:	4803      	ldr	r0, [pc, #12]	@ (8001ee4 <MX_TIM8_Init+0x168>)
 8001ed6:	f000 f99d 	bl	8002214 <HAL_TIM_MspPostInit>

}
 8001eda:	bf00      	nop
 8001edc:	3760      	adds	r7, #96	@ 0x60
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	bf00      	nop
 8001ee4:	200001bc 	.word	0x200001bc
 8001ee8:	40013400 	.word	0x40013400

08001eec <MX_TIM20_Init>:
/* TIM20 init function */
void MX_TIM20_Init(void)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b08c      	sub	sp, #48	@ 0x30
 8001ef0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM20_Init 0 */

  /* USER CODE END TIM20_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001ef2:	f107 030c 	add.w	r3, r7, #12
 8001ef6:	2224      	movs	r2, #36	@ 0x24
 8001ef8:	2100      	movs	r1, #0
 8001efa:	4618      	mov	r0, r3
 8001efc:	f003 f99a 	bl	8005234 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f00:	463b      	mov	r3, r7
 8001f02:	2200      	movs	r2, #0
 8001f04:	601a      	str	r2, [r3, #0]
 8001f06:	605a      	str	r2, [r3, #4]
 8001f08:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM20_Init 1 */

  /* USER CODE END TIM20_Init 1 */
  htim20.Instance = TIM20;
 8001f0a:	4b23      	ldr	r3, [pc, #140]	@ (8001f98 <MX_TIM20_Init+0xac>)
 8001f0c:	4a23      	ldr	r2, [pc, #140]	@ (8001f9c <MX_TIM20_Init+0xb0>)
 8001f0e:	601a      	str	r2, [r3, #0]
  htim20.Init.Prescaler = 0;
 8001f10:	4b21      	ldr	r3, [pc, #132]	@ (8001f98 <MX_TIM20_Init+0xac>)
 8001f12:	2200      	movs	r2, #0
 8001f14:	605a      	str	r2, [r3, #4]
  htim20.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f16:	4b20      	ldr	r3, [pc, #128]	@ (8001f98 <MX_TIM20_Init+0xac>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	609a      	str	r2, [r3, #8]
  htim20.Init.Period = 65535;
 8001f1c:	4b1e      	ldr	r3, [pc, #120]	@ (8001f98 <MX_TIM20_Init+0xac>)
 8001f1e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001f22:	60da      	str	r2, [r3, #12]
  htim20.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f24:	4b1c      	ldr	r3, [pc, #112]	@ (8001f98 <MX_TIM20_Init+0xac>)
 8001f26:	2200      	movs	r2, #0
 8001f28:	611a      	str	r2, [r3, #16]
  htim20.Init.RepetitionCounter = 0;
 8001f2a:	4b1b      	ldr	r3, [pc, #108]	@ (8001f98 <MX_TIM20_Init+0xac>)
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	615a      	str	r2, [r3, #20]
  htim20.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f30:	4b19      	ldr	r3, [pc, #100]	@ (8001f98 <MX_TIM20_Init+0xac>)
 8001f32:	2200      	movs	r2, #0
 8001f34:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001f36:	2303      	movs	r3, #3
 8001f38:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001f42:	2300      	movs	r3, #0
 8001f44:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001f46:	2300      	movs	r3, #0
 8001f48:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001f52:	2300      	movs	r3, #0
 8001f54:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001f56:	2300      	movs	r3, #0
 8001f58:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim20, &sConfig) != HAL_OK)
 8001f5a:	f107 030c 	add.w	r3, r7, #12
 8001f5e:	4619      	mov	r1, r3
 8001f60:	480d      	ldr	r0, [pc, #52]	@ (8001f98 <MX_TIM20_Init+0xac>)
 8001f62:	f001 fdcb 	bl	8003afc <HAL_TIM_Encoder_Init>
 8001f66:	4603      	mov	r3, r0
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d001      	beq.n	8001f70 <MX_TIM20_Init+0x84>
  {
    Error_Handler();
 8001f6c:	f7ff fd02 	bl	8001974 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f70:	2300      	movs	r3, #0
 8001f72:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001f74:	2300      	movs	r3, #0
 8001f76:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim20, &sMasterConfig) != HAL_OK)
 8001f7c:	463b      	mov	r3, r7
 8001f7e:	4619      	mov	r1, r3
 8001f80:	4805      	ldr	r0, [pc, #20]	@ (8001f98 <MX_TIM20_Init+0xac>)
 8001f82:	f002 ff31 	bl	8004de8 <HAL_TIMEx_MasterConfigSynchronization>
 8001f86:	4603      	mov	r3, r0
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d001      	beq.n	8001f90 <MX_TIM20_Init+0xa4>
  {
    Error_Handler();
 8001f8c:	f7ff fcf2 	bl	8001974 <Error_Handler>
  }
  /* USER CODE BEGIN TIM20_Init 2 */

  /* USER CODE END TIM20_Init 2 */

}
 8001f90:	bf00      	nop
 8001f92:	3730      	adds	r7, #48	@ 0x30
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}
 8001f98:	20000208 	.word	0x20000208
 8001f9c:	40015000 	.word	0x40015000

08001fa0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b084      	sub	sp, #16
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001fb0:	d113      	bne.n	8001fda <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001fb2:	4b0c      	ldr	r3, [pc, #48]	@ (8001fe4 <HAL_TIM_Base_MspInit+0x44>)
 8001fb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fb6:	4a0b      	ldr	r2, [pc, #44]	@ (8001fe4 <HAL_TIM_Base_MspInit+0x44>)
 8001fb8:	f043 0301 	orr.w	r3, r3, #1
 8001fbc:	6593      	str	r3, [r2, #88]	@ 0x58
 8001fbe:	4b09      	ldr	r3, [pc, #36]	@ (8001fe4 <HAL_TIM_Base_MspInit+0x44>)
 8001fc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fc2:	f003 0301 	and.w	r3, r3, #1
 8001fc6:	60fb      	str	r3, [r7, #12]
 8001fc8:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001fca:	2200      	movs	r2, #0
 8001fcc:	2100      	movs	r1, #0
 8001fce:	201c      	movs	r0, #28
 8001fd0:	f000 fb4d 	bl	800266e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001fd4:	201c      	movs	r0, #28
 8001fd6:	f000 fb64 	bl	80026a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001fda:	bf00      	nop
 8001fdc:	3710      	adds	r7, #16
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	40021000 	.word	0x40021000

08001fe8 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b090      	sub	sp, #64	@ 0x40
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ff0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	601a      	str	r2, [r3, #0]
 8001ff8:	605a      	str	r2, [r3, #4]
 8001ffa:	609a      	str	r2, [r3, #8]
 8001ffc:	60da      	str	r2, [r3, #12]
 8001ffe:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a6c      	ldr	r2, [pc, #432]	@ (80021b8 <HAL_TIM_Encoder_MspInit+0x1d0>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d129      	bne.n	800205e <HAL_TIM_Encoder_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800200a:	4b6c      	ldr	r3, [pc, #432]	@ (80021bc <HAL_TIM_Encoder_MspInit+0x1d4>)
 800200c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800200e:	4a6b      	ldr	r2, [pc, #428]	@ (80021bc <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002010:	f043 0302 	orr.w	r3, r3, #2
 8002014:	6593      	str	r3, [r2, #88]	@ 0x58
 8002016:	4b69      	ldr	r3, [pc, #420]	@ (80021bc <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002018:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800201a:	f003 0302 	and.w	r3, r3, #2
 800201e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002020:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002022:	4b66      	ldr	r3, [pc, #408]	@ (80021bc <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002024:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002026:	4a65      	ldr	r2, [pc, #404]	@ (80021bc <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002028:	f043 0301 	orr.w	r3, r3, #1
 800202c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800202e:	4b63      	ldr	r3, [pc, #396]	@ (80021bc <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002030:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002032:	f003 0301 	and.w	r3, r3, #1
 8002036:	627b      	str	r3, [r7, #36]	@ 0x24
 8002038:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**TIM3 GPIO Configuration
    PA4     ------> TIM3_CH2
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 800203a:	2350      	movs	r3, #80	@ 0x50
 800203c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800203e:	2302      	movs	r3, #2
 8002040:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002042:	2300      	movs	r3, #0
 8002044:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002046:	2300      	movs	r3, #0
 8002048:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800204a:	2302      	movs	r3, #2
 800204c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800204e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002052:	4619      	mov	r1, r3
 8002054:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002058:	f000 fb3e 	bl	80026d8 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM20_MspInit 1 */

  /* USER CODE END TIM20_MspInit 1 */
  }
}
 800205c:	e0a7      	b.n	80021ae <HAL_TIM_Encoder_MspInit+0x1c6>
  else if(tim_encoderHandle->Instance==TIM4)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4a57      	ldr	r2, [pc, #348]	@ (80021c0 <HAL_TIM_Encoder_MspInit+0x1d8>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d12a      	bne.n	80020be <HAL_TIM_Encoder_MspInit+0xd6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002068:	4b54      	ldr	r3, [pc, #336]	@ (80021bc <HAL_TIM_Encoder_MspInit+0x1d4>)
 800206a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800206c:	4a53      	ldr	r2, [pc, #332]	@ (80021bc <HAL_TIM_Encoder_MspInit+0x1d4>)
 800206e:	f043 0304 	orr.w	r3, r3, #4
 8002072:	6593      	str	r3, [r2, #88]	@ 0x58
 8002074:	4b51      	ldr	r3, [pc, #324]	@ (80021bc <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002076:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002078:	f003 0304 	and.w	r3, r3, #4
 800207c:	623b      	str	r3, [r7, #32]
 800207e:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002080:	4b4e      	ldr	r3, [pc, #312]	@ (80021bc <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002082:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002084:	4a4d      	ldr	r2, [pc, #308]	@ (80021bc <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002086:	f043 0301 	orr.w	r3, r3, #1
 800208a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800208c:	4b4b      	ldr	r3, [pc, #300]	@ (80021bc <HAL_TIM_Encoder_MspInit+0x1d4>)
 800208e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002090:	f003 0301 	and.w	r3, r3, #1
 8002094:	61fb      	str	r3, [r7, #28]
 8002096:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002098:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800209c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800209e:	2302      	movs	r3, #2
 80020a0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a2:	2300      	movs	r3, #0
 80020a4:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020a6:	2300      	movs	r3, #0
 80020a8:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 80020aa:	230a      	movs	r3, #10
 80020ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020ae:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80020b2:	4619      	mov	r1, r3
 80020b4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80020b8:	f000 fb0e 	bl	80026d8 <HAL_GPIO_Init>
}
 80020bc:	e077      	b.n	80021ae <HAL_TIM_Encoder_MspInit+0x1c6>
  else if(tim_encoderHandle->Instance==TIM5)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4a40      	ldr	r2, [pc, #256]	@ (80021c4 <HAL_TIM_Encoder_MspInit+0x1dc>)
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d129      	bne.n	800211c <HAL_TIM_Encoder_MspInit+0x134>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80020c8:	4b3c      	ldr	r3, [pc, #240]	@ (80021bc <HAL_TIM_Encoder_MspInit+0x1d4>)
 80020ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020cc:	4a3b      	ldr	r2, [pc, #236]	@ (80021bc <HAL_TIM_Encoder_MspInit+0x1d4>)
 80020ce:	f043 0308 	orr.w	r3, r3, #8
 80020d2:	6593      	str	r3, [r2, #88]	@ 0x58
 80020d4:	4b39      	ldr	r3, [pc, #228]	@ (80021bc <HAL_TIM_Encoder_MspInit+0x1d4>)
 80020d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020d8:	f003 0308 	and.w	r3, r3, #8
 80020dc:	61bb      	str	r3, [r7, #24]
 80020de:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020e0:	4b36      	ldr	r3, [pc, #216]	@ (80021bc <HAL_TIM_Encoder_MspInit+0x1d4>)
 80020e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020e4:	4a35      	ldr	r2, [pc, #212]	@ (80021bc <HAL_TIM_Encoder_MspInit+0x1d4>)
 80020e6:	f043 0301 	orr.w	r3, r3, #1
 80020ea:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80020ec:	4b33      	ldr	r3, [pc, #204]	@ (80021bc <HAL_TIM_Encoder_MspInit+0x1d4>)
 80020ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020f0:	f003 0301 	and.w	r3, r3, #1
 80020f4:	617b      	str	r3, [r7, #20]
 80020f6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80020f8:	2303      	movs	r3, #3
 80020fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020fc:	2302      	movs	r3, #2
 80020fe:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002100:	2300      	movs	r3, #0
 8002102:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002104:	2300      	movs	r3, #0
 8002106:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002108:	2302      	movs	r3, #2
 800210a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800210c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002110:	4619      	mov	r1, r3
 8002112:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002116:	f000 fadf 	bl	80026d8 <HAL_GPIO_Init>
}
 800211a:	e048      	b.n	80021ae <HAL_TIM_Encoder_MspInit+0x1c6>
  else if(tim_encoderHandle->Instance==TIM20)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a29      	ldr	r2, [pc, #164]	@ (80021c8 <HAL_TIM_Encoder_MspInit+0x1e0>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d143      	bne.n	80021ae <HAL_TIM_Encoder_MspInit+0x1c6>
    __HAL_RCC_TIM20_CLK_ENABLE();
 8002126:	4b25      	ldr	r3, [pc, #148]	@ (80021bc <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002128:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800212a:	4a24      	ldr	r2, [pc, #144]	@ (80021bc <HAL_TIM_Encoder_MspInit+0x1d4>)
 800212c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002130:	6613      	str	r3, [r2, #96]	@ 0x60
 8002132:	4b22      	ldr	r3, [pc, #136]	@ (80021bc <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002134:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002136:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800213a:	613b      	str	r3, [r7, #16]
 800213c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800213e:	4b1f      	ldr	r3, [pc, #124]	@ (80021bc <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002140:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002142:	4a1e      	ldr	r2, [pc, #120]	@ (80021bc <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002144:	f043 0304 	orr.w	r3, r3, #4
 8002148:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800214a:	4b1c      	ldr	r3, [pc, #112]	@ (80021bc <HAL_TIM_Encoder_MspInit+0x1d4>)
 800214c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800214e:	f003 0304 	and.w	r3, r3, #4
 8002152:	60fb      	str	r3, [r7, #12]
 8002154:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002156:	4b19      	ldr	r3, [pc, #100]	@ (80021bc <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002158:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800215a:	4a18      	ldr	r2, [pc, #96]	@ (80021bc <HAL_TIM_Encoder_MspInit+0x1d4>)
 800215c:	f043 0302 	orr.w	r3, r3, #2
 8002160:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002162:	4b16      	ldr	r3, [pc, #88]	@ (80021bc <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002164:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002166:	f003 0302 	and.w	r3, r3, #2
 800216a:	60bb      	str	r3, [r7, #8]
 800216c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800216e:	2304      	movs	r3, #4
 8002170:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002172:	2302      	movs	r3, #2
 8002174:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002176:	2300      	movs	r3, #0
 8002178:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800217a:	2300      	movs	r3, #0
 800217c:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM20;
 800217e:	2306      	movs	r3, #6
 8002180:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002182:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002186:	4619      	mov	r1, r3
 8002188:	4810      	ldr	r0, [pc, #64]	@ (80021cc <HAL_TIM_Encoder_MspInit+0x1e4>)
 800218a:	f000 faa5 	bl	80026d8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800218e:	2304      	movs	r3, #4
 8002190:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002192:	2302      	movs	r3, #2
 8002194:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002196:	2300      	movs	r3, #0
 8002198:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800219a:	2300      	movs	r3, #0
 800219c:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM20;
 800219e:	2303      	movs	r3, #3
 80021a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021a2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80021a6:	4619      	mov	r1, r3
 80021a8:	4809      	ldr	r0, [pc, #36]	@ (80021d0 <HAL_TIM_Encoder_MspInit+0x1e8>)
 80021aa:	f000 fa95 	bl	80026d8 <HAL_GPIO_Init>
}
 80021ae:	bf00      	nop
 80021b0:	3740      	adds	r7, #64	@ 0x40
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop
 80021b8:	40000400 	.word	0x40000400
 80021bc:	40021000 	.word	0x40021000
 80021c0:	40000800 	.word	0x40000800
 80021c4:	40000c00 	.word	0x40000c00
 80021c8:	40015000 	.word	0x40015000
 80021cc:	48000800 	.word	0x48000800
 80021d0:	48000400 	.word	0x48000400

080021d4 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80021d4:	b480      	push	{r7}
 80021d6:	b085      	sub	sp, #20
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM8)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a0a      	ldr	r2, [pc, #40]	@ (800220c <HAL_TIM_PWM_MspInit+0x38>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d10b      	bne.n	80021fe <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* TIM8 clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 80021e6:	4b0a      	ldr	r3, [pc, #40]	@ (8002210 <HAL_TIM_PWM_MspInit+0x3c>)
 80021e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021ea:	4a09      	ldr	r2, [pc, #36]	@ (8002210 <HAL_TIM_PWM_MspInit+0x3c>)
 80021ec:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80021f0:	6613      	str	r3, [r2, #96]	@ 0x60
 80021f2:	4b07      	ldr	r3, [pc, #28]	@ (8002210 <HAL_TIM_PWM_MspInit+0x3c>)
 80021f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021f6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80021fa:	60fb      	str	r3, [r7, #12]
 80021fc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 80021fe:	bf00      	nop
 8002200:	3714      	adds	r7, #20
 8002202:	46bd      	mov	sp, r7
 8002204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002208:	4770      	bx	lr
 800220a:	bf00      	nop
 800220c:	40013400 	.word	0x40013400
 8002210:	40021000 	.word	0x40021000

08002214 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b088      	sub	sp, #32
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800221c:	f107 030c 	add.w	r3, r7, #12
 8002220:	2200      	movs	r2, #0
 8002222:	601a      	str	r2, [r3, #0]
 8002224:	605a      	str	r2, [r3, #4]
 8002226:	609a      	str	r2, [r3, #8]
 8002228:	60da      	str	r2, [r3, #12]
 800222a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM8)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a11      	ldr	r2, [pc, #68]	@ (8002278 <HAL_TIM_MspPostInit+0x64>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d11c      	bne.n	8002270 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002236:	4b11      	ldr	r3, [pc, #68]	@ (800227c <HAL_TIM_MspPostInit+0x68>)
 8002238:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800223a:	4a10      	ldr	r2, [pc, #64]	@ (800227c <HAL_TIM_MspPostInit+0x68>)
 800223c:	f043 0304 	orr.w	r3, r3, #4
 8002240:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002242:	4b0e      	ldr	r3, [pc, #56]	@ (800227c <HAL_TIM_MspPostInit+0x68>)
 8002244:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002246:	f003 0304 	and.w	r3, r3, #4
 800224a:	60bb      	str	r3, [r7, #8]
 800224c:	68bb      	ldr	r3, [r7, #8]
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    PC8     ------> TIM8_CH3
    PC9     ------> TIM8_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 800224e:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8002252:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002254:	2302      	movs	r3, #2
 8002256:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002258:	2300      	movs	r3, #0
 800225a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800225c:	2300      	movs	r3, #0
 800225e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8002260:	2304      	movs	r3, #4
 8002262:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002264:	f107 030c 	add.w	r3, r7, #12
 8002268:	4619      	mov	r1, r3
 800226a:	4805      	ldr	r0, [pc, #20]	@ (8002280 <HAL_TIM_MspPostInit+0x6c>)
 800226c:	f000 fa34 	bl	80026d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8002270:	bf00      	nop
 8002272:	3720      	adds	r7, #32
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}
 8002278:	40013400 	.word	0x40013400
 800227c:	40021000 	.word	0x40021000
 8002280:	48000800 	.word	0x48000800

08002284 <transporter_begin>:
PID_CONTROLLER pid3;
PID_CONTROLLER pid4;

FIR lowPassFilter;

void transporter_begin() {
 8002284:	b580      	push	{r7, lr}
 8002286:	b082      	sub	sp, #8
 8002288:	af02      	add	r7, sp, #8
//	QEI_init(&encoder1, ENC_TIM1, ENC_PPR, ENC_FREQ);
//	QEI_init(&encoder2, ENC_TIM2, ENC_PPR, ENC_FREQ);
	QEI_init(&encoder3, ENC_TIM3, ENC_PPR, ENC_FREQ, MOTOR_RATIO);
 800228a:	ed9f 0a2c 	vldr	s0, [pc, #176]	@ 800233c <transporter_begin+0xb8>
 800228e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002292:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002296:	492a      	ldr	r1, [pc, #168]	@ (8002340 <transporter_begin+0xbc>)
 8002298:	482a      	ldr	r0, [pc, #168]	@ (8002344 <transporter_begin+0xc0>)
 800229a:	f7fe ffc7 	bl	800122c <QEI_init>
	QEI_init(&encoder4, ENC_TIM4, ENC_PPR, ENC_FREQ, MOTOR_RATIO);
 800229e:	ed9f 0a27 	vldr	s0, [pc, #156]	@ 800233c <transporter_begin+0xb8>
 80022a2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80022a6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80022aa:	4927      	ldr	r1, [pc, #156]	@ (8002348 <transporter_begin+0xc4>)
 80022ac:	4827      	ldr	r0, [pc, #156]	@ (800234c <transporter_begin+0xc8>)
 80022ae:	f7fe ffbd 	bl	800122c <QEI_init>

//	MDXX_GPIO_init(&motor1, MOTOR1_TIM, MOTOR1_TIM_CH, MOTOR1_GPIOx, MOTOR1_GPIO_Pin);
//	MDXX_GPIO_init(&motor2, MOTOR2_TIM, MOTOR2_TIM_CH, MOTOR2_GPIOx, MOTOR2_GPIO_Pin);
	MDXX_GPIO_init(&motor3, MOTOR3_TIM, MOTOR3_TIM_CH, MOTOR3_GPIOx, MOTOR3_GPIO_Pin);
 80022b2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80022b6:	9300      	str	r3, [sp, #0]
 80022b8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80022bc:	2208      	movs	r2, #8
 80022be:	4924      	ldr	r1, [pc, #144]	@ (8002350 <transporter_begin+0xcc>)
 80022c0:	4824      	ldr	r0, [pc, #144]	@ (8002354 <transporter_begin+0xd0>)
 80022c2:	f7fe fc11 	bl	8000ae8 <MDXX_GPIO_init>
	MDXX_GPIO_init(&motor4, MOTOR4_TIM, MOTOR4_TIM_CH, MOTOR4_GPIOx, MOTOR4_GPIO_Pin);
 80022c6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80022ca:	9300      	str	r3, [sp, #0]
 80022cc:	4b22      	ldr	r3, [pc, #136]	@ (8002358 <transporter_begin+0xd4>)
 80022ce:	220c      	movs	r2, #12
 80022d0:	491f      	ldr	r1, [pc, #124]	@ (8002350 <transporter_begin+0xcc>)
 80022d2:	4822      	ldr	r0, [pc, #136]	@ (800235c <transporter_begin+0xd8>)
 80022d4:	f7fe fc08 	bl	8000ae8 <MDXX_GPIO_init>

//	MDXX_set_range(&motor1, 2000, 0);
//	MDXX_set_range(&motor2, 2000, 0);
	MDXX_set_range(&motor3, 2000, 0);
 80022d8:	eddf 0a21 	vldr	s1, [pc, #132]	@ 8002360 <transporter_begin+0xdc>
 80022dc:	ed9f 0a21 	vldr	s0, [pc, #132]	@ 8002364 <transporter_begin+0xe0>
 80022e0:	481c      	ldr	r0, [pc, #112]	@ (8002354 <transporter_begin+0xd0>)
 80022e2:	f7fe fc25 	bl	8000b30 <MDXX_set_range>
	MDXX_set_range(&motor4, 2000, 0);
 80022e6:	eddf 0a1e 	vldr	s1, [pc, #120]	@ 8002360 <transporter_begin+0xdc>
 80022ea:	ed9f 0a1e 	vldr	s0, [pc, #120]	@ 8002364 <transporter_begin+0xe0>
 80022ee:	481b      	ldr	r0, [pc, #108]	@ (800235c <transporter_begin+0xd8>)
 80022f0:	f7fe fc1e 	bl	8000b30 <MDXX_set_range>

//	PID_CONTROLLER_Init(&pid1, 1000, 100, 0, 65535);
//	PID_CONTROLLER_Init(&pid2, 1000, 100, 0, 65535);
	PID_CONTROLLER_Init(&pid3, 1000, 100, 0, 65535);
 80022f4:	eddf 1a1c 	vldr	s3, [pc, #112]	@ 8002368 <transporter_begin+0xe4>
 80022f8:	ed9f 1a19 	vldr	s2, [pc, #100]	@ 8002360 <transporter_begin+0xdc>
 80022fc:	eddf 0a1b 	vldr	s1, [pc, #108]	@ 800236c <transporter_begin+0xe8>
 8002300:	ed9f 0a1b 	vldr	s0, [pc, #108]	@ 8002370 <transporter_begin+0xec>
 8002304:	481b      	ldr	r0, [pc, #108]	@ (8002374 <transporter_begin+0xf0>)
 8002306:	f7fe fbc5 	bl	8000a94 <PID_CONTROLLER_Init>
	PID_CONTROLLER_Init(&pid4, 1000, 100, 0, 65535);
 800230a:	eddf 1a17 	vldr	s3, [pc, #92]	@ 8002368 <transporter_begin+0xe4>
 800230e:	ed9f 1a14 	vldr	s2, [pc, #80]	@ 8002360 <transporter_begin+0xdc>
 8002312:	eddf 0a16 	vldr	s1, [pc, #88]	@ 800236c <transporter_begin+0xe8>
 8002316:	ed9f 0a16 	vldr	s0, [pc, #88]	@ 8002370 <transporter_begin+0xec>
 800231a:	4817      	ldr	r0, [pc, #92]	@ (8002378 <transporter_begin+0xf4>)
 800231c:	f7fe fbba 	bl	8000a94 <PID_CONTROLLER_Init>

	FIR_init(&lowPassFilter, NUM_TAPS, CUTOFF_FREQ, SAMPLE_RATE);
 8002320:	eddf 0a13 	vldr	s1, [pc, #76]	@ 8002370 <transporter_begin+0xec>
 8002324:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 8002328:	211f      	movs	r1, #31
 800232a:	4814      	ldr	r0, [pc, #80]	@ (800237c <transporter_begin+0xf8>)
 800232c:	f7fe fcda 	bl	8000ce4 <FIR_init>

	HAL_TIM_Base_Start_IT(CONTROL_TIM);
 8002330:	4813      	ldr	r0, [pc, #76]	@ (8002380 <transporter_begin+0xfc>)
 8002332:	f001 fa01 	bl	8003738 <HAL_TIM_Base_Start_IT>
}
 8002336:	bf00      	nop
 8002338:	46bd      	mov	sp, r7
 800233a:	bd80      	pop	{r7, pc}
 800233c:	3ea8f5c3 	.word	0x3ea8f5c3
 8002340:	20000170 	.word	0x20000170
 8002344:	200002ec 	.word	0x200002ec
 8002348:	20000208 	.word	0x20000208
 800234c:	20000338 	.word	0x20000338
 8002350:	200001bc 	.word	0x200001bc
 8002354:	20000254 	.word	0x20000254
 8002358:	48000400 	.word	0x48000400
 800235c:	200002a0 	.word	0x200002a0
 8002360:	00000000 	.word	0x00000000
 8002364:	44fa0000 	.word	0x44fa0000
 8002368:	477fff00 	.word	0x477fff00
 800236c:	42c80000 	.word	0x42c80000
 8002370:	447a0000 	.word	0x447a0000
 8002374:	20000384 	.word	0x20000384
 8002378:	200003b0 	.word	0x200003b0
 800237c:	200003dc 	.word	0x200003dc
 8002380:	2000008c 	.word	0x2000008c

08002384 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002384:	480d      	ldr	r0, [pc, #52]	@ (80023bc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002386:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002388:	f7ff fb96 	bl	8001ab8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800238c:	480c      	ldr	r0, [pc, #48]	@ (80023c0 <LoopForever+0x6>)
  ldr r1, =_edata
 800238e:	490d      	ldr	r1, [pc, #52]	@ (80023c4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002390:	4a0d      	ldr	r2, [pc, #52]	@ (80023c8 <LoopForever+0xe>)
  movs r3, #0
 8002392:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002394:	e002      	b.n	800239c <LoopCopyDataInit>

08002396 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002396:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002398:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800239a:	3304      	adds	r3, #4

0800239c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800239c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800239e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023a0:	d3f9      	bcc.n	8002396 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023a2:	4a0a      	ldr	r2, [pc, #40]	@ (80023cc <LoopForever+0x12>)
  ldr r4, =_ebss
 80023a4:	4c0a      	ldr	r4, [pc, #40]	@ (80023d0 <LoopForever+0x16>)
  movs r3, #0
 80023a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023a8:	e001      	b.n	80023ae <LoopFillZerobss>

080023aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023ac:	3204      	adds	r2, #4

080023ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023b0:	d3fb      	bcc.n	80023aa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80023b2:	f002 ff5d 	bl	8005270 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80023b6:	f7ff f9f9 	bl	80017ac <main>

080023ba <LoopForever>:

LoopForever:
    b LoopForever
 80023ba:	e7fe      	b.n	80023ba <LoopForever>
  ldr   r0, =_estack
 80023bc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80023c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80023c4:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80023c8:	080061a4 	.word	0x080061a4
  ldr r2, =_sbss
 80023cc:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80023d0:	20000534 	.word	0x20000534

080023d4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80023d4:	e7fe      	b.n	80023d4 <ADC1_2_IRQHandler>

080023d6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023d6:	b580      	push	{r7, lr}
 80023d8:	b082      	sub	sp, #8
 80023da:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80023dc:	2300      	movs	r3, #0
 80023de:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023e0:	2003      	movs	r0, #3
 80023e2:	f000 f939 	bl	8002658 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80023e6:	2000      	movs	r0, #0
 80023e8:	f000 f80e 	bl	8002408 <HAL_InitTick>
 80023ec:	4603      	mov	r3, r0
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d002      	beq.n	80023f8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
 80023f4:	71fb      	strb	r3, [r7, #7]
 80023f6:	e001      	b.n	80023fc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80023f8:	f7ff fac2 	bl	8001980 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80023fc:	79fb      	ldrb	r3, [r7, #7]

}
 80023fe:	4618      	mov	r0, r3
 8002400:	3708      	adds	r7, #8
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}
	...

08002408 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b084      	sub	sp, #16
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002410:	2300      	movs	r3, #0
 8002412:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002414:	4b16      	ldr	r3, [pc, #88]	@ (8002470 <HAL_InitTick+0x68>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d022      	beq.n	8002462 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800241c:	4b15      	ldr	r3, [pc, #84]	@ (8002474 <HAL_InitTick+0x6c>)
 800241e:	681a      	ldr	r2, [r3, #0]
 8002420:	4b13      	ldr	r3, [pc, #76]	@ (8002470 <HAL_InitTick+0x68>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002428:	fbb1 f3f3 	udiv	r3, r1, r3
 800242c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002430:	4618      	mov	r0, r3
 8002432:	f000 f944 	bl	80026be <HAL_SYSTICK_Config>
 8002436:	4603      	mov	r3, r0
 8002438:	2b00      	cmp	r3, #0
 800243a:	d10f      	bne.n	800245c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2b0f      	cmp	r3, #15
 8002440:	d809      	bhi.n	8002456 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002442:	2200      	movs	r2, #0
 8002444:	6879      	ldr	r1, [r7, #4]
 8002446:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800244a:	f000 f910 	bl	800266e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800244e:	4a0a      	ldr	r2, [pc, #40]	@ (8002478 <HAL_InitTick+0x70>)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6013      	str	r3, [r2, #0]
 8002454:	e007      	b.n	8002466 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002456:	2301      	movs	r3, #1
 8002458:	73fb      	strb	r3, [r7, #15]
 800245a:	e004      	b.n	8002466 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800245c:	2301      	movs	r3, #1
 800245e:	73fb      	strb	r3, [r7, #15]
 8002460:	e001      	b.n	8002466 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002462:	2301      	movs	r3, #1
 8002464:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002466:	7bfb      	ldrb	r3, [r7, #15]
}
 8002468:	4618      	mov	r0, r3
 800246a:	3710      	adds	r7, #16
 800246c:	46bd      	mov	sp, r7
 800246e:	bd80      	pop	{r7, pc}
 8002470:	20000008 	.word	0x20000008
 8002474:	20000000 	.word	0x20000000
 8002478:	20000004 	.word	0x20000004

0800247c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800247c:	b480      	push	{r7}
 800247e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002480:	4b05      	ldr	r3, [pc, #20]	@ (8002498 <HAL_IncTick+0x1c>)
 8002482:	681a      	ldr	r2, [r3, #0]
 8002484:	4b05      	ldr	r3, [pc, #20]	@ (800249c <HAL_IncTick+0x20>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4413      	add	r3, r2
 800248a:	4a03      	ldr	r2, [pc, #12]	@ (8002498 <HAL_IncTick+0x1c>)
 800248c:	6013      	str	r3, [r2, #0]
}
 800248e:	bf00      	nop
 8002490:	46bd      	mov	sp, r7
 8002492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002496:	4770      	bx	lr
 8002498:	200003e8 	.word	0x200003e8
 800249c:	20000008 	.word	0x20000008

080024a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024a0:	b480      	push	{r7}
 80024a2:	af00      	add	r7, sp, #0
  return uwTick;
 80024a4:	4b03      	ldr	r3, [pc, #12]	@ (80024b4 <HAL_GetTick+0x14>)
 80024a6:	681b      	ldr	r3, [r3, #0]
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	46bd      	mov	sp, r7
 80024ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b0:	4770      	bx	lr
 80024b2:	bf00      	nop
 80024b4:	200003e8 	.word	0x200003e8

080024b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b085      	sub	sp, #20
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	f003 0307 	and.w	r3, r3, #7
 80024c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024c8:	4b0c      	ldr	r3, [pc, #48]	@ (80024fc <__NVIC_SetPriorityGrouping+0x44>)
 80024ca:	68db      	ldr	r3, [r3, #12]
 80024cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024ce:	68ba      	ldr	r2, [r7, #8]
 80024d0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80024d4:	4013      	ands	r3, r2
 80024d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024e0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80024e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80024e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024ea:	4a04      	ldr	r2, [pc, #16]	@ (80024fc <__NVIC_SetPriorityGrouping+0x44>)
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	60d3      	str	r3, [r2, #12]
}
 80024f0:	bf00      	nop
 80024f2:	3714      	adds	r7, #20
 80024f4:	46bd      	mov	sp, r7
 80024f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fa:	4770      	bx	lr
 80024fc:	e000ed00 	.word	0xe000ed00

08002500 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002500:	b480      	push	{r7}
 8002502:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002504:	4b04      	ldr	r3, [pc, #16]	@ (8002518 <__NVIC_GetPriorityGrouping+0x18>)
 8002506:	68db      	ldr	r3, [r3, #12]
 8002508:	0a1b      	lsrs	r3, r3, #8
 800250a:	f003 0307 	and.w	r3, r3, #7
}
 800250e:	4618      	mov	r0, r3
 8002510:	46bd      	mov	sp, r7
 8002512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002516:	4770      	bx	lr
 8002518:	e000ed00 	.word	0xe000ed00

0800251c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800251c:	b480      	push	{r7}
 800251e:	b083      	sub	sp, #12
 8002520:	af00      	add	r7, sp, #0
 8002522:	4603      	mov	r3, r0
 8002524:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002526:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800252a:	2b00      	cmp	r3, #0
 800252c:	db0b      	blt.n	8002546 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800252e:	79fb      	ldrb	r3, [r7, #7]
 8002530:	f003 021f 	and.w	r2, r3, #31
 8002534:	4907      	ldr	r1, [pc, #28]	@ (8002554 <__NVIC_EnableIRQ+0x38>)
 8002536:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800253a:	095b      	lsrs	r3, r3, #5
 800253c:	2001      	movs	r0, #1
 800253e:	fa00 f202 	lsl.w	r2, r0, r2
 8002542:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002546:	bf00      	nop
 8002548:	370c      	adds	r7, #12
 800254a:	46bd      	mov	sp, r7
 800254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002550:	4770      	bx	lr
 8002552:	bf00      	nop
 8002554:	e000e100 	.word	0xe000e100

08002558 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002558:	b480      	push	{r7}
 800255a:	b083      	sub	sp, #12
 800255c:	af00      	add	r7, sp, #0
 800255e:	4603      	mov	r3, r0
 8002560:	6039      	str	r1, [r7, #0]
 8002562:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002564:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002568:	2b00      	cmp	r3, #0
 800256a:	db0a      	blt.n	8002582 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	b2da      	uxtb	r2, r3
 8002570:	490c      	ldr	r1, [pc, #48]	@ (80025a4 <__NVIC_SetPriority+0x4c>)
 8002572:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002576:	0112      	lsls	r2, r2, #4
 8002578:	b2d2      	uxtb	r2, r2
 800257a:	440b      	add	r3, r1
 800257c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002580:	e00a      	b.n	8002598 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	b2da      	uxtb	r2, r3
 8002586:	4908      	ldr	r1, [pc, #32]	@ (80025a8 <__NVIC_SetPriority+0x50>)
 8002588:	79fb      	ldrb	r3, [r7, #7]
 800258a:	f003 030f 	and.w	r3, r3, #15
 800258e:	3b04      	subs	r3, #4
 8002590:	0112      	lsls	r2, r2, #4
 8002592:	b2d2      	uxtb	r2, r2
 8002594:	440b      	add	r3, r1
 8002596:	761a      	strb	r2, [r3, #24]
}
 8002598:	bf00      	nop
 800259a:	370c      	adds	r7, #12
 800259c:	46bd      	mov	sp, r7
 800259e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a2:	4770      	bx	lr
 80025a4:	e000e100 	.word	0xe000e100
 80025a8:	e000ed00 	.word	0xe000ed00

080025ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025ac:	b480      	push	{r7}
 80025ae:	b089      	sub	sp, #36	@ 0x24
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	60f8      	str	r0, [r7, #12]
 80025b4:	60b9      	str	r1, [r7, #8]
 80025b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	f003 0307 	and.w	r3, r3, #7
 80025be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025c0:	69fb      	ldr	r3, [r7, #28]
 80025c2:	f1c3 0307 	rsb	r3, r3, #7
 80025c6:	2b04      	cmp	r3, #4
 80025c8:	bf28      	it	cs
 80025ca:	2304      	movcs	r3, #4
 80025cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025ce:	69fb      	ldr	r3, [r7, #28]
 80025d0:	3304      	adds	r3, #4
 80025d2:	2b06      	cmp	r3, #6
 80025d4:	d902      	bls.n	80025dc <NVIC_EncodePriority+0x30>
 80025d6:	69fb      	ldr	r3, [r7, #28]
 80025d8:	3b03      	subs	r3, #3
 80025da:	e000      	b.n	80025de <NVIC_EncodePriority+0x32>
 80025dc:	2300      	movs	r3, #0
 80025de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025e0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80025e4:	69bb      	ldr	r3, [r7, #24]
 80025e6:	fa02 f303 	lsl.w	r3, r2, r3
 80025ea:	43da      	mvns	r2, r3
 80025ec:	68bb      	ldr	r3, [r7, #8]
 80025ee:	401a      	ands	r2, r3
 80025f0:	697b      	ldr	r3, [r7, #20]
 80025f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025f4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80025f8:	697b      	ldr	r3, [r7, #20]
 80025fa:	fa01 f303 	lsl.w	r3, r1, r3
 80025fe:	43d9      	mvns	r1, r3
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002604:	4313      	orrs	r3, r2
         );
}
 8002606:	4618      	mov	r0, r3
 8002608:	3724      	adds	r7, #36	@ 0x24
 800260a:	46bd      	mov	sp, r7
 800260c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002610:	4770      	bx	lr
	...

08002614 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b082      	sub	sp, #8
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	3b01      	subs	r3, #1
 8002620:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002624:	d301      	bcc.n	800262a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002626:	2301      	movs	r3, #1
 8002628:	e00f      	b.n	800264a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800262a:	4a0a      	ldr	r2, [pc, #40]	@ (8002654 <SysTick_Config+0x40>)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	3b01      	subs	r3, #1
 8002630:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002632:	210f      	movs	r1, #15
 8002634:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002638:	f7ff ff8e 	bl	8002558 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800263c:	4b05      	ldr	r3, [pc, #20]	@ (8002654 <SysTick_Config+0x40>)
 800263e:	2200      	movs	r2, #0
 8002640:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002642:	4b04      	ldr	r3, [pc, #16]	@ (8002654 <SysTick_Config+0x40>)
 8002644:	2207      	movs	r2, #7
 8002646:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002648:	2300      	movs	r3, #0
}
 800264a:	4618      	mov	r0, r3
 800264c:	3708      	adds	r7, #8
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}
 8002652:	bf00      	nop
 8002654:	e000e010 	.word	0xe000e010

08002658 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b082      	sub	sp, #8
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002660:	6878      	ldr	r0, [r7, #4]
 8002662:	f7ff ff29 	bl	80024b8 <__NVIC_SetPriorityGrouping>
}
 8002666:	bf00      	nop
 8002668:	3708      	adds	r7, #8
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}

0800266e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800266e:	b580      	push	{r7, lr}
 8002670:	b086      	sub	sp, #24
 8002672:	af00      	add	r7, sp, #0
 8002674:	4603      	mov	r3, r0
 8002676:	60b9      	str	r1, [r7, #8]
 8002678:	607a      	str	r2, [r7, #4]
 800267a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800267c:	f7ff ff40 	bl	8002500 <__NVIC_GetPriorityGrouping>
 8002680:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002682:	687a      	ldr	r2, [r7, #4]
 8002684:	68b9      	ldr	r1, [r7, #8]
 8002686:	6978      	ldr	r0, [r7, #20]
 8002688:	f7ff ff90 	bl	80025ac <NVIC_EncodePriority>
 800268c:	4602      	mov	r2, r0
 800268e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002692:	4611      	mov	r1, r2
 8002694:	4618      	mov	r0, r3
 8002696:	f7ff ff5f 	bl	8002558 <__NVIC_SetPriority>
}
 800269a:	bf00      	nop
 800269c:	3718      	adds	r7, #24
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}

080026a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026a2:	b580      	push	{r7, lr}
 80026a4:	b082      	sub	sp, #8
 80026a6:	af00      	add	r7, sp, #0
 80026a8:	4603      	mov	r3, r0
 80026aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026b0:	4618      	mov	r0, r3
 80026b2:	f7ff ff33 	bl	800251c <__NVIC_EnableIRQ>
}
 80026b6:	bf00      	nop
 80026b8:	3708      	adds	r7, #8
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}

080026be <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80026be:	b580      	push	{r7, lr}
 80026c0:	b082      	sub	sp, #8
 80026c2:	af00      	add	r7, sp, #0
 80026c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80026c6:	6878      	ldr	r0, [r7, #4]
 80026c8:	f7ff ffa4 	bl	8002614 <SysTick_Config>
 80026cc:	4603      	mov	r3, r0
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	3708      	adds	r7, #8
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}
	...

080026d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026d8:	b480      	push	{r7}
 80026da:	b087      	sub	sp, #28
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
 80026e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80026e2:	2300      	movs	r3, #0
 80026e4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80026e6:	e15a      	b.n	800299e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	681a      	ldr	r2, [r3, #0]
 80026ec:	2101      	movs	r1, #1
 80026ee:	697b      	ldr	r3, [r7, #20]
 80026f0:	fa01 f303 	lsl.w	r3, r1, r3
 80026f4:	4013      	ands	r3, r2
 80026f6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	f000 814c 	beq.w	8002998 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	f003 0303 	and.w	r3, r3, #3
 8002708:	2b01      	cmp	r3, #1
 800270a:	d005      	beq.n	8002718 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002714:	2b02      	cmp	r3, #2
 8002716:	d130      	bne.n	800277a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	689b      	ldr	r3, [r3, #8]
 800271c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	005b      	lsls	r3, r3, #1
 8002722:	2203      	movs	r2, #3
 8002724:	fa02 f303 	lsl.w	r3, r2, r3
 8002728:	43db      	mvns	r3, r3
 800272a:	693a      	ldr	r2, [r7, #16]
 800272c:	4013      	ands	r3, r2
 800272e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	68da      	ldr	r2, [r3, #12]
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	005b      	lsls	r3, r3, #1
 8002738:	fa02 f303 	lsl.w	r3, r2, r3
 800273c:	693a      	ldr	r2, [r7, #16]
 800273e:	4313      	orrs	r3, r2
 8002740:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	693a      	ldr	r2, [r7, #16]
 8002746:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800274e:	2201      	movs	r2, #1
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	fa02 f303 	lsl.w	r3, r2, r3
 8002756:	43db      	mvns	r3, r3
 8002758:	693a      	ldr	r2, [r7, #16]
 800275a:	4013      	ands	r3, r2
 800275c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	091b      	lsrs	r3, r3, #4
 8002764:	f003 0201 	and.w	r2, r3, #1
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	fa02 f303 	lsl.w	r3, r2, r3
 800276e:	693a      	ldr	r2, [r7, #16]
 8002770:	4313      	orrs	r3, r2
 8002772:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	693a      	ldr	r2, [r7, #16]
 8002778:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	f003 0303 	and.w	r3, r3, #3
 8002782:	2b03      	cmp	r3, #3
 8002784:	d017      	beq.n	80027b6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	68db      	ldr	r3, [r3, #12]
 800278a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	005b      	lsls	r3, r3, #1
 8002790:	2203      	movs	r2, #3
 8002792:	fa02 f303 	lsl.w	r3, r2, r3
 8002796:	43db      	mvns	r3, r3
 8002798:	693a      	ldr	r2, [r7, #16]
 800279a:	4013      	ands	r3, r2
 800279c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	689a      	ldr	r2, [r3, #8]
 80027a2:	697b      	ldr	r3, [r7, #20]
 80027a4:	005b      	lsls	r3, r3, #1
 80027a6:	fa02 f303 	lsl.w	r3, r2, r3
 80027aa:	693a      	ldr	r2, [r7, #16]
 80027ac:	4313      	orrs	r3, r2
 80027ae:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	693a      	ldr	r2, [r7, #16]
 80027b4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	f003 0303 	and.w	r3, r3, #3
 80027be:	2b02      	cmp	r3, #2
 80027c0:	d123      	bne.n	800280a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	08da      	lsrs	r2, r3, #3
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	3208      	adds	r2, #8
 80027ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027ce:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	f003 0307 	and.w	r3, r3, #7
 80027d6:	009b      	lsls	r3, r3, #2
 80027d8:	220f      	movs	r2, #15
 80027da:	fa02 f303 	lsl.w	r3, r2, r3
 80027de:	43db      	mvns	r3, r3
 80027e0:	693a      	ldr	r2, [r7, #16]
 80027e2:	4013      	ands	r3, r2
 80027e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	691a      	ldr	r2, [r3, #16]
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	f003 0307 	and.w	r3, r3, #7
 80027f0:	009b      	lsls	r3, r3, #2
 80027f2:	fa02 f303 	lsl.w	r3, r2, r3
 80027f6:	693a      	ldr	r2, [r7, #16]
 80027f8:	4313      	orrs	r3, r2
 80027fa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80027fc:	697b      	ldr	r3, [r7, #20]
 80027fe:	08da      	lsrs	r2, r3, #3
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	3208      	adds	r2, #8
 8002804:	6939      	ldr	r1, [r7, #16]
 8002806:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	005b      	lsls	r3, r3, #1
 8002814:	2203      	movs	r2, #3
 8002816:	fa02 f303 	lsl.w	r3, r2, r3
 800281a:	43db      	mvns	r3, r3
 800281c:	693a      	ldr	r2, [r7, #16]
 800281e:	4013      	ands	r3, r2
 8002820:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	f003 0203 	and.w	r2, r3, #3
 800282a:	697b      	ldr	r3, [r7, #20]
 800282c:	005b      	lsls	r3, r3, #1
 800282e:	fa02 f303 	lsl.w	r3, r2, r3
 8002832:	693a      	ldr	r2, [r7, #16]
 8002834:	4313      	orrs	r3, r2
 8002836:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	693a      	ldr	r2, [r7, #16]
 800283c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002846:	2b00      	cmp	r3, #0
 8002848:	f000 80a6 	beq.w	8002998 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800284c:	4b5b      	ldr	r3, [pc, #364]	@ (80029bc <HAL_GPIO_Init+0x2e4>)
 800284e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002850:	4a5a      	ldr	r2, [pc, #360]	@ (80029bc <HAL_GPIO_Init+0x2e4>)
 8002852:	f043 0301 	orr.w	r3, r3, #1
 8002856:	6613      	str	r3, [r2, #96]	@ 0x60
 8002858:	4b58      	ldr	r3, [pc, #352]	@ (80029bc <HAL_GPIO_Init+0x2e4>)
 800285a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800285c:	f003 0301 	and.w	r3, r3, #1
 8002860:	60bb      	str	r3, [r7, #8]
 8002862:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002864:	4a56      	ldr	r2, [pc, #344]	@ (80029c0 <HAL_GPIO_Init+0x2e8>)
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	089b      	lsrs	r3, r3, #2
 800286a:	3302      	adds	r3, #2
 800286c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002870:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002872:	697b      	ldr	r3, [r7, #20]
 8002874:	f003 0303 	and.w	r3, r3, #3
 8002878:	009b      	lsls	r3, r3, #2
 800287a:	220f      	movs	r2, #15
 800287c:	fa02 f303 	lsl.w	r3, r2, r3
 8002880:	43db      	mvns	r3, r3
 8002882:	693a      	ldr	r2, [r7, #16]
 8002884:	4013      	ands	r3, r2
 8002886:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800288e:	d01f      	beq.n	80028d0 <HAL_GPIO_Init+0x1f8>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	4a4c      	ldr	r2, [pc, #304]	@ (80029c4 <HAL_GPIO_Init+0x2ec>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d019      	beq.n	80028cc <HAL_GPIO_Init+0x1f4>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	4a4b      	ldr	r2, [pc, #300]	@ (80029c8 <HAL_GPIO_Init+0x2f0>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d013      	beq.n	80028c8 <HAL_GPIO_Init+0x1f0>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	4a4a      	ldr	r2, [pc, #296]	@ (80029cc <HAL_GPIO_Init+0x2f4>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d00d      	beq.n	80028c4 <HAL_GPIO_Init+0x1ec>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	4a49      	ldr	r2, [pc, #292]	@ (80029d0 <HAL_GPIO_Init+0x2f8>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d007      	beq.n	80028c0 <HAL_GPIO_Init+0x1e8>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	4a48      	ldr	r2, [pc, #288]	@ (80029d4 <HAL_GPIO_Init+0x2fc>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d101      	bne.n	80028bc <HAL_GPIO_Init+0x1e4>
 80028b8:	2305      	movs	r3, #5
 80028ba:	e00a      	b.n	80028d2 <HAL_GPIO_Init+0x1fa>
 80028bc:	2306      	movs	r3, #6
 80028be:	e008      	b.n	80028d2 <HAL_GPIO_Init+0x1fa>
 80028c0:	2304      	movs	r3, #4
 80028c2:	e006      	b.n	80028d2 <HAL_GPIO_Init+0x1fa>
 80028c4:	2303      	movs	r3, #3
 80028c6:	e004      	b.n	80028d2 <HAL_GPIO_Init+0x1fa>
 80028c8:	2302      	movs	r3, #2
 80028ca:	e002      	b.n	80028d2 <HAL_GPIO_Init+0x1fa>
 80028cc:	2301      	movs	r3, #1
 80028ce:	e000      	b.n	80028d2 <HAL_GPIO_Init+0x1fa>
 80028d0:	2300      	movs	r3, #0
 80028d2:	697a      	ldr	r2, [r7, #20]
 80028d4:	f002 0203 	and.w	r2, r2, #3
 80028d8:	0092      	lsls	r2, r2, #2
 80028da:	4093      	lsls	r3, r2
 80028dc:	693a      	ldr	r2, [r7, #16]
 80028de:	4313      	orrs	r3, r2
 80028e0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80028e2:	4937      	ldr	r1, [pc, #220]	@ (80029c0 <HAL_GPIO_Init+0x2e8>)
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	089b      	lsrs	r3, r3, #2
 80028e8:	3302      	adds	r3, #2
 80028ea:	693a      	ldr	r2, [r7, #16]
 80028ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80028f0:	4b39      	ldr	r3, [pc, #228]	@ (80029d8 <HAL_GPIO_Init+0x300>)
 80028f2:	689b      	ldr	r3, [r3, #8]
 80028f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	43db      	mvns	r3, r3
 80028fa:	693a      	ldr	r2, [r7, #16]
 80028fc:	4013      	ands	r3, r2
 80028fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002908:	2b00      	cmp	r3, #0
 800290a:	d003      	beq.n	8002914 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800290c:	693a      	ldr	r2, [r7, #16]
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	4313      	orrs	r3, r2
 8002912:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002914:	4a30      	ldr	r2, [pc, #192]	@ (80029d8 <HAL_GPIO_Init+0x300>)
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800291a:	4b2f      	ldr	r3, [pc, #188]	@ (80029d8 <HAL_GPIO_Init+0x300>)
 800291c:	68db      	ldr	r3, [r3, #12]
 800291e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	43db      	mvns	r3, r3
 8002924:	693a      	ldr	r2, [r7, #16]
 8002926:	4013      	ands	r3, r2
 8002928:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002932:	2b00      	cmp	r3, #0
 8002934:	d003      	beq.n	800293e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002936:	693a      	ldr	r2, [r7, #16]
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	4313      	orrs	r3, r2
 800293c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800293e:	4a26      	ldr	r2, [pc, #152]	@ (80029d8 <HAL_GPIO_Init+0x300>)
 8002940:	693b      	ldr	r3, [r7, #16]
 8002942:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002944:	4b24      	ldr	r3, [pc, #144]	@ (80029d8 <HAL_GPIO_Init+0x300>)
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	43db      	mvns	r3, r3
 800294e:	693a      	ldr	r2, [r7, #16]
 8002950:	4013      	ands	r3, r2
 8002952:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800295c:	2b00      	cmp	r3, #0
 800295e:	d003      	beq.n	8002968 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002960:	693a      	ldr	r2, [r7, #16]
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	4313      	orrs	r3, r2
 8002966:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002968:	4a1b      	ldr	r2, [pc, #108]	@ (80029d8 <HAL_GPIO_Init+0x300>)
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800296e:	4b1a      	ldr	r3, [pc, #104]	@ (80029d8 <HAL_GPIO_Init+0x300>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	43db      	mvns	r3, r3
 8002978:	693a      	ldr	r2, [r7, #16]
 800297a:	4013      	ands	r3, r2
 800297c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002986:	2b00      	cmp	r3, #0
 8002988:	d003      	beq.n	8002992 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800298a:	693a      	ldr	r2, [r7, #16]
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	4313      	orrs	r3, r2
 8002990:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002992:	4a11      	ldr	r2, [pc, #68]	@ (80029d8 <HAL_GPIO_Init+0x300>)
 8002994:	693b      	ldr	r3, [r7, #16]
 8002996:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002998:	697b      	ldr	r3, [r7, #20]
 800299a:	3301      	adds	r3, #1
 800299c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	681a      	ldr	r2, [r3, #0]
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	fa22 f303 	lsr.w	r3, r2, r3
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	f47f ae9d 	bne.w	80026e8 <HAL_GPIO_Init+0x10>
  }
}
 80029ae:	bf00      	nop
 80029b0:	bf00      	nop
 80029b2:	371c      	adds	r7, #28
 80029b4:	46bd      	mov	sp, r7
 80029b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ba:	4770      	bx	lr
 80029bc:	40021000 	.word	0x40021000
 80029c0:	40010000 	.word	0x40010000
 80029c4:	48000400 	.word	0x48000400
 80029c8:	48000800 	.word	0x48000800
 80029cc:	48000c00 	.word	0x48000c00
 80029d0:	48001000 	.word	0x48001000
 80029d4:	48001400 	.word	0x48001400
 80029d8:	40010400 	.word	0x40010400

080029dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029dc:	b480      	push	{r7}
 80029de:	b083      	sub	sp, #12
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
 80029e4:	460b      	mov	r3, r1
 80029e6:	807b      	strh	r3, [r7, #2]
 80029e8:	4613      	mov	r3, r2
 80029ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80029ec:	787b      	ldrb	r3, [r7, #1]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d003      	beq.n	80029fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80029f2:	887a      	ldrh	r2, [r7, #2]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80029f8:	e002      	b.n	8002a00 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80029fa:	887a      	ldrh	r2, [r7, #2]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002a00:	bf00      	nop
 8002a02:	370c      	adds	r7, #12
 8002a04:	46bd      	mov	sp, r7
 8002a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0a:	4770      	bx	lr

08002a0c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b082      	sub	sp, #8
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	4603      	mov	r3, r0
 8002a14:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002a16:	4b08      	ldr	r3, [pc, #32]	@ (8002a38 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002a18:	695a      	ldr	r2, [r3, #20]
 8002a1a:	88fb      	ldrh	r3, [r7, #6]
 8002a1c:	4013      	ands	r3, r2
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d006      	beq.n	8002a30 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002a22:	4a05      	ldr	r2, [pc, #20]	@ (8002a38 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002a24:	88fb      	ldrh	r3, [r7, #6]
 8002a26:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002a28:	88fb      	ldrh	r3, [r7, #6]
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f000 f806 	bl	8002a3c <HAL_GPIO_EXTI_Callback>
  }
}
 8002a30:	bf00      	nop
 8002a32:	3708      	adds	r7, #8
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bd80      	pop	{r7, pc}
 8002a38:	40010400 	.word	0x40010400

08002a3c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b083      	sub	sp, #12
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	4603      	mov	r3, r0
 8002a44:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002a46:	bf00      	nop
 8002a48:	370c      	adds	r7, #12
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a50:	4770      	bx	lr
	...

08002a54 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002a54:	b480      	push	{r7}
 8002a56:	b085      	sub	sp, #20
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d141      	bne.n	8002ae6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002a62:	4b4b      	ldr	r3, [pc, #300]	@ (8002b90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002a6a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a6e:	d131      	bne.n	8002ad4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002a70:	4b47      	ldr	r3, [pc, #284]	@ (8002b90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a72:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002a76:	4a46      	ldr	r2, [pc, #280]	@ (8002b90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a78:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002a7c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002a80:	4b43      	ldr	r3, [pc, #268]	@ (8002b90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002a88:	4a41      	ldr	r2, [pc, #260]	@ (8002b90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a8a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002a8e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002a90:	4b40      	ldr	r3, [pc, #256]	@ (8002b94 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	2232      	movs	r2, #50	@ 0x32
 8002a96:	fb02 f303 	mul.w	r3, r2, r3
 8002a9a:	4a3f      	ldr	r2, [pc, #252]	@ (8002b98 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002a9c:	fba2 2303 	umull	r2, r3, r2, r3
 8002aa0:	0c9b      	lsrs	r3, r3, #18
 8002aa2:	3301      	adds	r3, #1
 8002aa4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002aa6:	e002      	b.n	8002aae <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	3b01      	subs	r3, #1
 8002aac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002aae:	4b38      	ldr	r3, [pc, #224]	@ (8002b90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ab0:	695b      	ldr	r3, [r3, #20]
 8002ab2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ab6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002aba:	d102      	bne.n	8002ac2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d1f2      	bne.n	8002aa8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002ac2:	4b33      	ldr	r3, [pc, #204]	@ (8002b90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ac4:	695b      	ldr	r3, [r3, #20]
 8002ac6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002aca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ace:	d158      	bne.n	8002b82 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002ad0:	2303      	movs	r3, #3
 8002ad2:	e057      	b.n	8002b84 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002ad4:	4b2e      	ldr	r3, [pc, #184]	@ (8002b90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ad6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002ada:	4a2d      	ldr	r2, [pc, #180]	@ (8002b90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002adc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002ae0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002ae4:	e04d      	b.n	8002b82 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002aec:	d141      	bne.n	8002b72 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002aee:	4b28      	ldr	r3, [pc, #160]	@ (8002b90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002af6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002afa:	d131      	bne.n	8002b60 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002afc:	4b24      	ldr	r3, [pc, #144]	@ (8002b90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002afe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002b02:	4a23      	ldr	r2, [pc, #140]	@ (8002b90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b04:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b08:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002b0c:	4b20      	ldr	r3, [pc, #128]	@ (8002b90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002b14:	4a1e      	ldr	r2, [pc, #120]	@ (8002b90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b16:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002b1a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002b1c:	4b1d      	ldr	r3, [pc, #116]	@ (8002b94 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	2232      	movs	r2, #50	@ 0x32
 8002b22:	fb02 f303 	mul.w	r3, r2, r3
 8002b26:	4a1c      	ldr	r2, [pc, #112]	@ (8002b98 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002b28:	fba2 2303 	umull	r2, r3, r2, r3
 8002b2c:	0c9b      	lsrs	r3, r3, #18
 8002b2e:	3301      	adds	r3, #1
 8002b30:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b32:	e002      	b.n	8002b3a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	3b01      	subs	r3, #1
 8002b38:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b3a:	4b15      	ldr	r3, [pc, #84]	@ (8002b90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b3c:	695b      	ldr	r3, [r3, #20]
 8002b3e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b42:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b46:	d102      	bne.n	8002b4e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d1f2      	bne.n	8002b34 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002b4e:	4b10      	ldr	r3, [pc, #64]	@ (8002b90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b50:	695b      	ldr	r3, [r3, #20]
 8002b52:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b56:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b5a:	d112      	bne.n	8002b82 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002b5c:	2303      	movs	r3, #3
 8002b5e:	e011      	b.n	8002b84 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002b60:	4b0b      	ldr	r3, [pc, #44]	@ (8002b90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b62:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002b66:	4a0a      	ldr	r2, [pc, #40]	@ (8002b90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b68:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b6c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002b70:	e007      	b.n	8002b82 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002b72:	4b07      	ldr	r3, [pc, #28]	@ (8002b90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002b7a:	4a05      	ldr	r2, [pc, #20]	@ (8002b90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b7c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002b80:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002b82:	2300      	movs	r3, #0
}
 8002b84:	4618      	mov	r0, r3
 8002b86:	3714      	adds	r7, #20
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8e:	4770      	bx	lr
 8002b90:	40007000 	.word	0x40007000
 8002b94:	20000000 	.word	0x20000000
 8002b98:	431bde83 	.word	0x431bde83

08002b9c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002ba0:	4b05      	ldr	r3, [pc, #20]	@ (8002bb8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002ba2:	689b      	ldr	r3, [r3, #8]
 8002ba4:	4a04      	ldr	r2, [pc, #16]	@ (8002bb8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002ba6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002baa:	6093      	str	r3, [r2, #8]
}
 8002bac:	bf00      	nop
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb4:	4770      	bx	lr
 8002bb6:	bf00      	nop
 8002bb8:	40007000 	.word	0x40007000

08002bbc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b088      	sub	sp, #32
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d101      	bne.n	8002bce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	e2fe      	b.n	80031cc <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f003 0301 	and.w	r3, r3, #1
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d075      	beq.n	8002cc6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002bda:	4b97      	ldr	r3, [pc, #604]	@ (8002e38 <HAL_RCC_OscConfig+0x27c>)
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	f003 030c 	and.w	r3, r3, #12
 8002be2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002be4:	4b94      	ldr	r3, [pc, #592]	@ (8002e38 <HAL_RCC_OscConfig+0x27c>)
 8002be6:	68db      	ldr	r3, [r3, #12]
 8002be8:	f003 0303 	and.w	r3, r3, #3
 8002bec:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002bee:	69bb      	ldr	r3, [r7, #24]
 8002bf0:	2b0c      	cmp	r3, #12
 8002bf2:	d102      	bne.n	8002bfa <HAL_RCC_OscConfig+0x3e>
 8002bf4:	697b      	ldr	r3, [r7, #20]
 8002bf6:	2b03      	cmp	r3, #3
 8002bf8:	d002      	beq.n	8002c00 <HAL_RCC_OscConfig+0x44>
 8002bfa:	69bb      	ldr	r3, [r7, #24]
 8002bfc:	2b08      	cmp	r3, #8
 8002bfe:	d10b      	bne.n	8002c18 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c00:	4b8d      	ldr	r3, [pc, #564]	@ (8002e38 <HAL_RCC_OscConfig+0x27c>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d05b      	beq.n	8002cc4 <HAL_RCC_OscConfig+0x108>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d157      	bne.n	8002cc4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002c14:	2301      	movs	r3, #1
 8002c16:	e2d9      	b.n	80031cc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c20:	d106      	bne.n	8002c30 <HAL_RCC_OscConfig+0x74>
 8002c22:	4b85      	ldr	r3, [pc, #532]	@ (8002e38 <HAL_RCC_OscConfig+0x27c>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a84      	ldr	r2, [pc, #528]	@ (8002e38 <HAL_RCC_OscConfig+0x27c>)
 8002c28:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c2c:	6013      	str	r3, [r2, #0]
 8002c2e:	e01d      	b.n	8002c6c <HAL_RCC_OscConfig+0xb0>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002c38:	d10c      	bne.n	8002c54 <HAL_RCC_OscConfig+0x98>
 8002c3a:	4b7f      	ldr	r3, [pc, #508]	@ (8002e38 <HAL_RCC_OscConfig+0x27c>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a7e      	ldr	r2, [pc, #504]	@ (8002e38 <HAL_RCC_OscConfig+0x27c>)
 8002c40:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002c44:	6013      	str	r3, [r2, #0]
 8002c46:	4b7c      	ldr	r3, [pc, #496]	@ (8002e38 <HAL_RCC_OscConfig+0x27c>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a7b      	ldr	r2, [pc, #492]	@ (8002e38 <HAL_RCC_OscConfig+0x27c>)
 8002c4c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c50:	6013      	str	r3, [r2, #0]
 8002c52:	e00b      	b.n	8002c6c <HAL_RCC_OscConfig+0xb0>
 8002c54:	4b78      	ldr	r3, [pc, #480]	@ (8002e38 <HAL_RCC_OscConfig+0x27c>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a77      	ldr	r2, [pc, #476]	@ (8002e38 <HAL_RCC_OscConfig+0x27c>)
 8002c5a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c5e:	6013      	str	r3, [r2, #0]
 8002c60:	4b75      	ldr	r3, [pc, #468]	@ (8002e38 <HAL_RCC_OscConfig+0x27c>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a74      	ldr	r2, [pc, #464]	@ (8002e38 <HAL_RCC_OscConfig+0x27c>)
 8002c66:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002c6a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d013      	beq.n	8002c9c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c74:	f7ff fc14 	bl	80024a0 <HAL_GetTick>
 8002c78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c7a:	e008      	b.n	8002c8e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c7c:	f7ff fc10 	bl	80024a0 <HAL_GetTick>
 8002c80:	4602      	mov	r2, r0
 8002c82:	693b      	ldr	r3, [r7, #16]
 8002c84:	1ad3      	subs	r3, r2, r3
 8002c86:	2b64      	cmp	r3, #100	@ 0x64
 8002c88:	d901      	bls.n	8002c8e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002c8a:	2303      	movs	r3, #3
 8002c8c:	e29e      	b.n	80031cc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c8e:	4b6a      	ldr	r3, [pc, #424]	@ (8002e38 <HAL_RCC_OscConfig+0x27c>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d0f0      	beq.n	8002c7c <HAL_RCC_OscConfig+0xc0>
 8002c9a:	e014      	b.n	8002cc6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c9c:	f7ff fc00 	bl	80024a0 <HAL_GetTick>
 8002ca0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002ca2:	e008      	b.n	8002cb6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ca4:	f7ff fbfc 	bl	80024a0 <HAL_GetTick>
 8002ca8:	4602      	mov	r2, r0
 8002caa:	693b      	ldr	r3, [r7, #16]
 8002cac:	1ad3      	subs	r3, r2, r3
 8002cae:	2b64      	cmp	r3, #100	@ 0x64
 8002cb0:	d901      	bls.n	8002cb6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002cb2:	2303      	movs	r3, #3
 8002cb4:	e28a      	b.n	80031cc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002cb6:	4b60      	ldr	r3, [pc, #384]	@ (8002e38 <HAL_RCC_OscConfig+0x27c>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d1f0      	bne.n	8002ca4 <HAL_RCC_OscConfig+0xe8>
 8002cc2:	e000      	b.n	8002cc6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cc4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f003 0302 	and.w	r3, r3, #2
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d075      	beq.n	8002dbe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002cd2:	4b59      	ldr	r3, [pc, #356]	@ (8002e38 <HAL_RCC_OscConfig+0x27c>)
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	f003 030c 	and.w	r3, r3, #12
 8002cda:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002cdc:	4b56      	ldr	r3, [pc, #344]	@ (8002e38 <HAL_RCC_OscConfig+0x27c>)
 8002cde:	68db      	ldr	r3, [r3, #12]
 8002ce0:	f003 0303 	and.w	r3, r3, #3
 8002ce4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002ce6:	69bb      	ldr	r3, [r7, #24]
 8002ce8:	2b0c      	cmp	r3, #12
 8002cea:	d102      	bne.n	8002cf2 <HAL_RCC_OscConfig+0x136>
 8002cec:	697b      	ldr	r3, [r7, #20]
 8002cee:	2b02      	cmp	r3, #2
 8002cf0:	d002      	beq.n	8002cf8 <HAL_RCC_OscConfig+0x13c>
 8002cf2:	69bb      	ldr	r3, [r7, #24]
 8002cf4:	2b04      	cmp	r3, #4
 8002cf6:	d11f      	bne.n	8002d38 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002cf8:	4b4f      	ldr	r3, [pc, #316]	@ (8002e38 <HAL_RCC_OscConfig+0x27c>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d005      	beq.n	8002d10 <HAL_RCC_OscConfig+0x154>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	68db      	ldr	r3, [r3, #12]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d101      	bne.n	8002d10 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	e25d      	b.n	80031cc <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d10:	4b49      	ldr	r3, [pc, #292]	@ (8002e38 <HAL_RCC_OscConfig+0x27c>)
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	691b      	ldr	r3, [r3, #16]
 8002d1c:	061b      	lsls	r3, r3, #24
 8002d1e:	4946      	ldr	r1, [pc, #280]	@ (8002e38 <HAL_RCC_OscConfig+0x27c>)
 8002d20:	4313      	orrs	r3, r2
 8002d22:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002d24:	4b45      	ldr	r3, [pc, #276]	@ (8002e3c <HAL_RCC_OscConfig+0x280>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4618      	mov	r0, r3
 8002d2a:	f7ff fb6d 	bl	8002408 <HAL_InitTick>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d043      	beq.n	8002dbc <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002d34:	2301      	movs	r3, #1
 8002d36:	e249      	b.n	80031cc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	68db      	ldr	r3, [r3, #12]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d023      	beq.n	8002d88 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d40:	4b3d      	ldr	r3, [pc, #244]	@ (8002e38 <HAL_RCC_OscConfig+0x27c>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a3c      	ldr	r2, [pc, #240]	@ (8002e38 <HAL_RCC_OscConfig+0x27c>)
 8002d46:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d4c:	f7ff fba8 	bl	80024a0 <HAL_GetTick>
 8002d50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d52:	e008      	b.n	8002d66 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d54:	f7ff fba4 	bl	80024a0 <HAL_GetTick>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	693b      	ldr	r3, [r7, #16]
 8002d5c:	1ad3      	subs	r3, r2, r3
 8002d5e:	2b02      	cmp	r3, #2
 8002d60:	d901      	bls.n	8002d66 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002d62:	2303      	movs	r3, #3
 8002d64:	e232      	b.n	80031cc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d66:	4b34      	ldr	r3, [pc, #208]	@ (8002e38 <HAL_RCC_OscConfig+0x27c>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d0f0      	beq.n	8002d54 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d72:	4b31      	ldr	r3, [pc, #196]	@ (8002e38 <HAL_RCC_OscConfig+0x27c>)
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	691b      	ldr	r3, [r3, #16]
 8002d7e:	061b      	lsls	r3, r3, #24
 8002d80:	492d      	ldr	r1, [pc, #180]	@ (8002e38 <HAL_RCC_OscConfig+0x27c>)
 8002d82:	4313      	orrs	r3, r2
 8002d84:	604b      	str	r3, [r1, #4]
 8002d86:	e01a      	b.n	8002dbe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d88:	4b2b      	ldr	r3, [pc, #172]	@ (8002e38 <HAL_RCC_OscConfig+0x27c>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a2a      	ldr	r2, [pc, #168]	@ (8002e38 <HAL_RCC_OscConfig+0x27c>)
 8002d8e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002d92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d94:	f7ff fb84 	bl	80024a0 <HAL_GetTick>
 8002d98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002d9a:	e008      	b.n	8002dae <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d9c:	f7ff fb80 	bl	80024a0 <HAL_GetTick>
 8002da0:	4602      	mov	r2, r0
 8002da2:	693b      	ldr	r3, [r7, #16]
 8002da4:	1ad3      	subs	r3, r2, r3
 8002da6:	2b02      	cmp	r3, #2
 8002da8:	d901      	bls.n	8002dae <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002daa:	2303      	movs	r3, #3
 8002dac:	e20e      	b.n	80031cc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002dae:	4b22      	ldr	r3, [pc, #136]	@ (8002e38 <HAL_RCC_OscConfig+0x27c>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d1f0      	bne.n	8002d9c <HAL_RCC_OscConfig+0x1e0>
 8002dba:	e000      	b.n	8002dbe <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002dbc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f003 0308 	and.w	r3, r3, #8
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d041      	beq.n	8002e4e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	695b      	ldr	r3, [r3, #20]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d01c      	beq.n	8002e0c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002dd2:	4b19      	ldr	r3, [pc, #100]	@ (8002e38 <HAL_RCC_OscConfig+0x27c>)
 8002dd4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002dd8:	4a17      	ldr	r2, [pc, #92]	@ (8002e38 <HAL_RCC_OscConfig+0x27c>)
 8002dda:	f043 0301 	orr.w	r3, r3, #1
 8002dde:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002de2:	f7ff fb5d 	bl	80024a0 <HAL_GetTick>
 8002de6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002de8:	e008      	b.n	8002dfc <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002dea:	f7ff fb59 	bl	80024a0 <HAL_GetTick>
 8002dee:	4602      	mov	r2, r0
 8002df0:	693b      	ldr	r3, [r7, #16]
 8002df2:	1ad3      	subs	r3, r2, r3
 8002df4:	2b02      	cmp	r3, #2
 8002df6:	d901      	bls.n	8002dfc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002df8:	2303      	movs	r3, #3
 8002dfa:	e1e7      	b.n	80031cc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002dfc:	4b0e      	ldr	r3, [pc, #56]	@ (8002e38 <HAL_RCC_OscConfig+0x27c>)
 8002dfe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e02:	f003 0302 	and.w	r3, r3, #2
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d0ef      	beq.n	8002dea <HAL_RCC_OscConfig+0x22e>
 8002e0a:	e020      	b.n	8002e4e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e0c:	4b0a      	ldr	r3, [pc, #40]	@ (8002e38 <HAL_RCC_OscConfig+0x27c>)
 8002e0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e12:	4a09      	ldr	r2, [pc, #36]	@ (8002e38 <HAL_RCC_OscConfig+0x27c>)
 8002e14:	f023 0301 	bic.w	r3, r3, #1
 8002e18:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e1c:	f7ff fb40 	bl	80024a0 <HAL_GetTick>
 8002e20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002e22:	e00d      	b.n	8002e40 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e24:	f7ff fb3c 	bl	80024a0 <HAL_GetTick>
 8002e28:	4602      	mov	r2, r0
 8002e2a:	693b      	ldr	r3, [r7, #16]
 8002e2c:	1ad3      	subs	r3, r2, r3
 8002e2e:	2b02      	cmp	r3, #2
 8002e30:	d906      	bls.n	8002e40 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002e32:	2303      	movs	r3, #3
 8002e34:	e1ca      	b.n	80031cc <HAL_RCC_OscConfig+0x610>
 8002e36:	bf00      	nop
 8002e38:	40021000 	.word	0x40021000
 8002e3c:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002e40:	4b8c      	ldr	r3, [pc, #560]	@ (8003074 <HAL_RCC_OscConfig+0x4b8>)
 8002e42:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e46:	f003 0302 	and.w	r3, r3, #2
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d1ea      	bne.n	8002e24 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f003 0304 	and.w	r3, r3, #4
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	f000 80a6 	beq.w	8002fa8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002e60:	4b84      	ldr	r3, [pc, #528]	@ (8003074 <HAL_RCC_OscConfig+0x4b8>)
 8002e62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e64:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d101      	bne.n	8002e70 <HAL_RCC_OscConfig+0x2b4>
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	e000      	b.n	8002e72 <HAL_RCC_OscConfig+0x2b6>
 8002e70:	2300      	movs	r3, #0
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d00d      	beq.n	8002e92 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e76:	4b7f      	ldr	r3, [pc, #508]	@ (8003074 <HAL_RCC_OscConfig+0x4b8>)
 8002e78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e7a:	4a7e      	ldr	r2, [pc, #504]	@ (8003074 <HAL_RCC_OscConfig+0x4b8>)
 8002e7c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e80:	6593      	str	r3, [r2, #88]	@ 0x58
 8002e82:	4b7c      	ldr	r3, [pc, #496]	@ (8003074 <HAL_RCC_OscConfig+0x4b8>)
 8002e84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e8a:	60fb      	str	r3, [r7, #12]
 8002e8c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e92:	4b79      	ldr	r3, [pc, #484]	@ (8003078 <HAL_RCC_OscConfig+0x4bc>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d118      	bne.n	8002ed0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e9e:	4b76      	ldr	r3, [pc, #472]	@ (8003078 <HAL_RCC_OscConfig+0x4bc>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a75      	ldr	r2, [pc, #468]	@ (8003078 <HAL_RCC_OscConfig+0x4bc>)
 8002ea4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ea8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002eaa:	f7ff faf9 	bl	80024a0 <HAL_GetTick>
 8002eae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002eb0:	e008      	b.n	8002ec4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002eb2:	f7ff faf5 	bl	80024a0 <HAL_GetTick>
 8002eb6:	4602      	mov	r2, r0
 8002eb8:	693b      	ldr	r3, [r7, #16]
 8002eba:	1ad3      	subs	r3, r2, r3
 8002ebc:	2b02      	cmp	r3, #2
 8002ebe:	d901      	bls.n	8002ec4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002ec0:	2303      	movs	r3, #3
 8002ec2:	e183      	b.n	80031cc <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ec4:	4b6c      	ldr	r3, [pc, #432]	@ (8003078 <HAL_RCC_OscConfig+0x4bc>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d0f0      	beq.n	8002eb2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	2b01      	cmp	r3, #1
 8002ed6:	d108      	bne.n	8002eea <HAL_RCC_OscConfig+0x32e>
 8002ed8:	4b66      	ldr	r3, [pc, #408]	@ (8003074 <HAL_RCC_OscConfig+0x4b8>)
 8002eda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ede:	4a65      	ldr	r2, [pc, #404]	@ (8003074 <HAL_RCC_OscConfig+0x4b8>)
 8002ee0:	f043 0301 	orr.w	r3, r3, #1
 8002ee4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002ee8:	e024      	b.n	8002f34 <HAL_RCC_OscConfig+0x378>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	689b      	ldr	r3, [r3, #8]
 8002eee:	2b05      	cmp	r3, #5
 8002ef0:	d110      	bne.n	8002f14 <HAL_RCC_OscConfig+0x358>
 8002ef2:	4b60      	ldr	r3, [pc, #384]	@ (8003074 <HAL_RCC_OscConfig+0x4b8>)
 8002ef4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ef8:	4a5e      	ldr	r2, [pc, #376]	@ (8003074 <HAL_RCC_OscConfig+0x4b8>)
 8002efa:	f043 0304 	orr.w	r3, r3, #4
 8002efe:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002f02:	4b5c      	ldr	r3, [pc, #368]	@ (8003074 <HAL_RCC_OscConfig+0x4b8>)
 8002f04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f08:	4a5a      	ldr	r2, [pc, #360]	@ (8003074 <HAL_RCC_OscConfig+0x4b8>)
 8002f0a:	f043 0301 	orr.w	r3, r3, #1
 8002f0e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002f12:	e00f      	b.n	8002f34 <HAL_RCC_OscConfig+0x378>
 8002f14:	4b57      	ldr	r3, [pc, #348]	@ (8003074 <HAL_RCC_OscConfig+0x4b8>)
 8002f16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f1a:	4a56      	ldr	r2, [pc, #344]	@ (8003074 <HAL_RCC_OscConfig+0x4b8>)
 8002f1c:	f023 0301 	bic.w	r3, r3, #1
 8002f20:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002f24:	4b53      	ldr	r3, [pc, #332]	@ (8003074 <HAL_RCC_OscConfig+0x4b8>)
 8002f26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f2a:	4a52      	ldr	r2, [pc, #328]	@ (8003074 <HAL_RCC_OscConfig+0x4b8>)
 8002f2c:	f023 0304 	bic.w	r3, r3, #4
 8002f30:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d016      	beq.n	8002f6a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f3c:	f7ff fab0 	bl	80024a0 <HAL_GetTick>
 8002f40:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f42:	e00a      	b.n	8002f5a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f44:	f7ff faac 	bl	80024a0 <HAL_GetTick>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	693b      	ldr	r3, [r7, #16]
 8002f4c:	1ad3      	subs	r3, r2, r3
 8002f4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d901      	bls.n	8002f5a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002f56:	2303      	movs	r3, #3
 8002f58:	e138      	b.n	80031cc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f5a:	4b46      	ldr	r3, [pc, #280]	@ (8003074 <HAL_RCC_OscConfig+0x4b8>)
 8002f5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f60:	f003 0302 	and.w	r3, r3, #2
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d0ed      	beq.n	8002f44 <HAL_RCC_OscConfig+0x388>
 8002f68:	e015      	b.n	8002f96 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f6a:	f7ff fa99 	bl	80024a0 <HAL_GetTick>
 8002f6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f70:	e00a      	b.n	8002f88 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f72:	f7ff fa95 	bl	80024a0 <HAL_GetTick>
 8002f76:	4602      	mov	r2, r0
 8002f78:	693b      	ldr	r3, [r7, #16]
 8002f7a:	1ad3      	subs	r3, r2, r3
 8002f7c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d901      	bls.n	8002f88 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002f84:	2303      	movs	r3, #3
 8002f86:	e121      	b.n	80031cc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f88:	4b3a      	ldr	r3, [pc, #232]	@ (8003074 <HAL_RCC_OscConfig+0x4b8>)
 8002f8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f8e:	f003 0302 	and.w	r3, r3, #2
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d1ed      	bne.n	8002f72 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002f96:	7ffb      	ldrb	r3, [r7, #31]
 8002f98:	2b01      	cmp	r3, #1
 8002f9a:	d105      	bne.n	8002fa8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f9c:	4b35      	ldr	r3, [pc, #212]	@ (8003074 <HAL_RCC_OscConfig+0x4b8>)
 8002f9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fa0:	4a34      	ldr	r2, [pc, #208]	@ (8003074 <HAL_RCC_OscConfig+0x4b8>)
 8002fa2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002fa6:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f003 0320 	and.w	r3, r3, #32
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d03c      	beq.n	800302e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	699b      	ldr	r3, [r3, #24]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d01c      	beq.n	8002ff6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002fbc:	4b2d      	ldr	r3, [pc, #180]	@ (8003074 <HAL_RCC_OscConfig+0x4b8>)
 8002fbe:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002fc2:	4a2c      	ldr	r2, [pc, #176]	@ (8003074 <HAL_RCC_OscConfig+0x4b8>)
 8002fc4:	f043 0301 	orr.w	r3, r3, #1
 8002fc8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fcc:	f7ff fa68 	bl	80024a0 <HAL_GetTick>
 8002fd0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002fd2:	e008      	b.n	8002fe6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002fd4:	f7ff fa64 	bl	80024a0 <HAL_GetTick>
 8002fd8:	4602      	mov	r2, r0
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	1ad3      	subs	r3, r2, r3
 8002fde:	2b02      	cmp	r3, #2
 8002fe0:	d901      	bls.n	8002fe6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002fe2:	2303      	movs	r3, #3
 8002fe4:	e0f2      	b.n	80031cc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002fe6:	4b23      	ldr	r3, [pc, #140]	@ (8003074 <HAL_RCC_OscConfig+0x4b8>)
 8002fe8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002fec:	f003 0302 	and.w	r3, r3, #2
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d0ef      	beq.n	8002fd4 <HAL_RCC_OscConfig+0x418>
 8002ff4:	e01b      	b.n	800302e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002ff6:	4b1f      	ldr	r3, [pc, #124]	@ (8003074 <HAL_RCC_OscConfig+0x4b8>)
 8002ff8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002ffc:	4a1d      	ldr	r2, [pc, #116]	@ (8003074 <HAL_RCC_OscConfig+0x4b8>)
 8002ffe:	f023 0301 	bic.w	r3, r3, #1
 8003002:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003006:	f7ff fa4b 	bl	80024a0 <HAL_GetTick>
 800300a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800300c:	e008      	b.n	8003020 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800300e:	f7ff fa47 	bl	80024a0 <HAL_GetTick>
 8003012:	4602      	mov	r2, r0
 8003014:	693b      	ldr	r3, [r7, #16]
 8003016:	1ad3      	subs	r3, r2, r3
 8003018:	2b02      	cmp	r3, #2
 800301a:	d901      	bls.n	8003020 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800301c:	2303      	movs	r3, #3
 800301e:	e0d5      	b.n	80031cc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003020:	4b14      	ldr	r3, [pc, #80]	@ (8003074 <HAL_RCC_OscConfig+0x4b8>)
 8003022:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003026:	f003 0302 	and.w	r3, r3, #2
 800302a:	2b00      	cmp	r3, #0
 800302c:	d1ef      	bne.n	800300e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	69db      	ldr	r3, [r3, #28]
 8003032:	2b00      	cmp	r3, #0
 8003034:	f000 80c9 	beq.w	80031ca <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003038:	4b0e      	ldr	r3, [pc, #56]	@ (8003074 <HAL_RCC_OscConfig+0x4b8>)
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	f003 030c 	and.w	r3, r3, #12
 8003040:	2b0c      	cmp	r3, #12
 8003042:	f000 8083 	beq.w	800314c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	69db      	ldr	r3, [r3, #28]
 800304a:	2b02      	cmp	r3, #2
 800304c:	d15e      	bne.n	800310c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800304e:	4b09      	ldr	r3, [pc, #36]	@ (8003074 <HAL_RCC_OscConfig+0x4b8>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a08      	ldr	r2, [pc, #32]	@ (8003074 <HAL_RCC_OscConfig+0x4b8>)
 8003054:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003058:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800305a:	f7ff fa21 	bl	80024a0 <HAL_GetTick>
 800305e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003060:	e00c      	b.n	800307c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003062:	f7ff fa1d 	bl	80024a0 <HAL_GetTick>
 8003066:	4602      	mov	r2, r0
 8003068:	693b      	ldr	r3, [r7, #16]
 800306a:	1ad3      	subs	r3, r2, r3
 800306c:	2b02      	cmp	r3, #2
 800306e:	d905      	bls.n	800307c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003070:	2303      	movs	r3, #3
 8003072:	e0ab      	b.n	80031cc <HAL_RCC_OscConfig+0x610>
 8003074:	40021000 	.word	0x40021000
 8003078:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800307c:	4b55      	ldr	r3, [pc, #340]	@ (80031d4 <HAL_RCC_OscConfig+0x618>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003084:	2b00      	cmp	r3, #0
 8003086:	d1ec      	bne.n	8003062 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003088:	4b52      	ldr	r3, [pc, #328]	@ (80031d4 <HAL_RCC_OscConfig+0x618>)
 800308a:	68da      	ldr	r2, [r3, #12]
 800308c:	4b52      	ldr	r3, [pc, #328]	@ (80031d8 <HAL_RCC_OscConfig+0x61c>)
 800308e:	4013      	ands	r3, r2
 8003090:	687a      	ldr	r2, [r7, #4]
 8003092:	6a11      	ldr	r1, [r2, #32]
 8003094:	687a      	ldr	r2, [r7, #4]
 8003096:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003098:	3a01      	subs	r2, #1
 800309a:	0112      	lsls	r2, r2, #4
 800309c:	4311      	orrs	r1, r2
 800309e:	687a      	ldr	r2, [r7, #4]
 80030a0:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80030a2:	0212      	lsls	r2, r2, #8
 80030a4:	4311      	orrs	r1, r2
 80030a6:	687a      	ldr	r2, [r7, #4]
 80030a8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80030aa:	0852      	lsrs	r2, r2, #1
 80030ac:	3a01      	subs	r2, #1
 80030ae:	0552      	lsls	r2, r2, #21
 80030b0:	4311      	orrs	r1, r2
 80030b2:	687a      	ldr	r2, [r7, #4]
 80030b4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80030b6:	0852      	lsrs	r2, r2, #1
 80030b8:	3a01      	subs	r2, #1
 80030ba:	0652      	lsls	r2, r2, #25
 80030bc:	4311      	orrs	r1, r2
 80030be:	687a      	ldr	r2, [r7, #4]
 80030c0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80030c2:	06d2      	lsls	r2, r2, #27
 80030c4:	430a      	orrs	r2, r1
 80030c6:	4943      	ldr	r1, [pc, #268]	@ (80031d4 <HAL_RCC_OscConfig+0x618>)
 80030c8:	4313      	orrs	r3, r2
 80030ca:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030cc:	4b41      	ldr	r3, [pc, #260]	@ (80031d4 <HAL_RCC_OscConfig+0x618>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a40      	ldr	r2, [pc, #256]	@ (80031d4 <HAL_RCC_OscConfig+0x618>)
 80030d2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80030d6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80030d8:	4b3e      	ldr	r3, [pc, #248]	@ (80031d4 <HAL_RCC_OscConfig+0x618>)
 80030da:	68db      	ldr	r3, [r3, #12]
 80030dc:	4a3d      	ldr	r2, [pc, #244]	@ (80031d4 <HAL_RCC_OscConfig+0x618>)
 80030de:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80030e2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030e4:	f7ff f9dc 	bl	80024a0 <HAL_GetTick>
 80030e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030ea:	e008      	b.n	80030fe <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030ec:	f7ff f9d8 	bl	80024a0 <HAL_GetTick>
 80030f0:	4602      	mov	r2, r0
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	1ad3      	subs	r3, r2, r3
 80030f6:	2b02      	cmp	r3, #2
 80030f8:	d901      	bls.n	80030fe <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80030fa:	2303      	movs	r3, #3
 80030fc:	e066      	b.n	80031cc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030fe:	4b35      	ldr	r3, [pc, #212]	@ (80031d4 <HAL_RCC_OscConfig+0x618>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003106:	2b00      	cmp	r3, #0
 8003108:	d0f0      	beq.n	80030ec <HAL_RCC_OscConfig+0x530>
 800310a:	e05e      	b.n	80031ca <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800310c:	4b31      	ldr	r3, [pc, #196]	@ (80031d4 <HAL_RCC_OscConfig+0x618>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a30      	ldr	r2, [pc, #192]	@ (80031d4 <HAL_RCC_OscConfig+0x618>)
 8003112:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003116:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003118:	f7ff f9c2 	bl	80024a0 <HAL_GetTick>
 800311c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800311e:	e008      	b.n	8003132 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003120:	f7ff f9be 	bl	80024a0 <HAL_GetTick>
 8003124:	4602      	mov	r2, r0
 8003126:	693b      	ldr	r3, [r7, #16]
 8003128:	1ad3      	subs	r3, r2, r3
 800312a:	2b02      	cmp	r3, #2
 800312c:	d901      	bls.n	8003132 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800312e:	2303      	movs	r3, #3
 8003130:	e04c      	b.n	80031cc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003132:	4b28      	ldr	r3, [pc, #160]	@ (80031d4 <HAL_RCC_OscConfig+0x618>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800313a:	2b00      	cmp	r3, #0
 800313c:	d1f0      	bne.n	8003120 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800313e:	4b25      	ldr	r3, [pc, #148]	@ (80031d4 <HAL_RCC_OscConfig+0x618>)
 8003140:	68da      	ldr	r2, [r3, #12]
 8003142:	4924      	ldr	r1, [pc, #144]	@ (80031d4 <HAL_RCC_OscConfig+0x618>)
 8003144:	4b25      	ldr	r3, [pc, #148]	@ (80031dc <HAL_RCC_OscConfig+0x620>)
 8003146:	4013      	ands	r3, r2
 8003148:	60cb      	str	r3, [r1, #12]
 800314a:	e03e      	b.n	80031ca <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	69db      	ldr	r3, [r3, #28]
 8003150:	2b01      	cmp	r3, #1
 8003152:	d101      	bne.n	8003158 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8003154:	2301      	movs	r3, #1
 8003156:	e039      	b.n	80031cc <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003158:	4b1e      	ldr	r3, [pc, #120]	@ (80031d4 <HAL_RCC_OscConfig+0x618>)
 800315a:	68db      	ldr	r3, [r3, #12]
 800315c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800315e:	697b      	ldr	r3, [r7, #20]
 8003160:	f003 0203 	and.w	r2, r3, #3
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6a1b      	ldr	r3, [r3, #32]
 8003168:	429a      	cmp	r2, r3
 800316a:	d12c      	bne.n	80031c6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003176:	3b01      	subs	r3, #1
 8003178:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800317a:	429a      	cmp	r2, r3
 800317c:	d123      	bne.n	80031c6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800317e:	697b      	ldr	r3, [r7, #20]
 8003180:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003188:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800318a:	429a      	cmp	r2, r3
 800318c:	d11b      	bne.n	80031c6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800318e:	697b      	ldr	r3, [r7, #20]
 8003190:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003198:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800319a:	429a      	cmp	r2, r3
 800319c:	d113      	bne.n	80031c6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800319e:	697b      	ldr	r3, [r7, #20]
 80031a0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031a8:	085b      	lsrs	r3, r3, #1
 80031aa:	3b01      	subs	r3, #1
 80031ac:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80031ae:	429a      	cmp	r2, r3
 80031b0:	d109      	bne.n	80031c6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80031bc:	085b      	lsrs	r3, r3, #1
 80031be:	3b01      	subs	r3, #1
 80031c0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80031c2:	429a      	cmp	r2, r3
 80031c4:	d001      	beq.n	80031ca <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80031c6:	2301      	movs	r3, #1
 80031c8:	e000      	b.n	80031cc <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80031ca:	2300      	movs	r3, #0
}
 80031cc:	4618      	mov	r0, r3
 80031ce:	3720      	adds	r7, #32
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd80      	pop	{r7, pc}
 80031d4:	40021000 	.word	0x40021000
 80031d8:	019f800c 	.word	0x019f800c
 80031dc:	feeefffc 	.word	0xfeeefffc

080031e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b086      	sub	sp, #24
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
 80031e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80031ea:	2300      	movs	r3, #0
 80031ec:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d101      	bne.n	80031f8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80031f4:	2301      	movs	r3, #1
 80031f6:	e11e      	b.n	8003436 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80031f8:	4b91      	ldr	r3, [pc, #580]	@ (8003440 <HAL_RCC_ClockConfig+0x260>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f003 030f 	and.w	r3, r3, #15
 8003200:	683a      	ldr	r2, [r7, #0]
 8003202:	429a      	cmp	r2, r3
 8003204:	d910      	bls.n	8003228 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003206:	4b8e      	ldr	r3, [pc, #568]	@ (8003440 <HAL_RCC_ClockConfig+0x260>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f023 020f 	bic.w	r2, r3, #15
 800320e:	498c      	ldr	r1, [pc, #560]	@ (8003440 <HAL_RCC_ClockConfig+0x260>)
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	4313      	orrs	r3, r2
 8003214:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003216:	4b8a      	ldr	r3, [pc, #552]	@ (8003440 <HAL_RCC_ClockConfig+0x260>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f003 030f 	and.w	r3, r3, #15
 800321e:	683a      	ldr	r2, [r7, #0]
 8003220:	429a      	cmp	r2, r3
 8003222:	d001      	beq.n	8003228 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003224:	2301      	movs	r3, #1
 8003226:	e106      	b.n	8003436 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f003 0301 	and.w	r3, r3, #1
 8003230:	2b00      	cmp	r3, #0
 8003232:	d073      	beq.n	800331c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	2b03      	cmp	r3, #3
 800323a:	d129      	bne.n	8003290 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800323c:	4b81      	ldr	r3, [pc, #516]	@ (8003444 <HAL_RCC_ClockConfig+0x264>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003244:	2b00      	cmp	r3, #0
 8003246:	d101      	bne.n	800324c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	e0f4      	b.n	8003436 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800324c:	f000 f966 	bl	800351c <RCC_GetSysClockFreqFromPLLSource>
 8003250:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003252:	693b      	ldr	r3, [r7, #16]
 8003254:	4a7c      	ldr	r2, [pc, #496]	@ (8003448 <HAL_RCC_ClockConfig+0x268>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d93f      	bls.n	80032da <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800325a:	4b7a      	ldr	r3, [pc, #488]	@ (8003444 <HAL_RCC_ClockConfig+0x264>)
 800325c:	689b      	ldr	r3, [r3, #8]
 800325e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003262:	2b00      	cmp	r3, #0
 8003264:	d009      	beq.n	800327a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800326e:	2b00      	cmp	r3, #0
 8003270:	d033      	beq.n	80032da <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003276:	2b00      	cmp	r3, #0
 8003278:	d12f      	bne.n	80032da <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800327a:	4b72      	ldr	r3, [pc, #456]	@ (8003444 <HAL_RCC_ClockConfig+0x264>)
 800327c:	689b      	ldr	r3, [r3, #8]
 800327e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003282:	4a70      	ldr	r2, [pc, #448]	@ (8003444 <HAL_RCC_ClockConfig+0x264>)
 8003284:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003288:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800328a:	2380      	movs	r3, #128	@ 0x80
 800328c:	617b      	str	r3, [r7, #20]
 800328e:	e024      	b.n	80032da <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	2b02      	cmp	r3, #2
 8003296:	d107      	bne.n	80032a8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003298:	4b6a      	ldr	r3, [pc, #424]	@ (8003444 <HAL_RCC_ClockConfig+0x264>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d109      	bne.n	80032b8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80032a4:	2301      	movs	r3, #1
 80032a6:	e0c6      	b.n	8003436 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80032a8:	4b66      	ldr	r3, [pc, #408]	@ (8003444 <HAL_RCC_ClockConfig+0x264>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d101      	bne.n	80032b8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80032b4:	2301      	movs	r3, #1
 80032b6:	e0be      	b.n	8003436 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80032b8:	f000 f8ce 	bl	8003458 <HAL_RCC_GetSysClockFreq>
 80032bc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80032be:	693b      	ldr	r3, [r7, #16]
 80032c0:	4a61      	ldr	r2, [pc, #388]	@ (8003448 <HAL_RCC_ClockConfig+0x268>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d909      	bls.n	80032da <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80032c6:	4b5f      	ldr	r3, [pc, #380]	@ (8003444 <HAL_RCC_ClockConfig+0x264>)
 80032c8:	689b      	ldr	r3, [r3, #8]
 80032ca:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80032ce:	4a5d      	ldr	r2, [pc, #372]	@ (8003444 <HAL_RCC_ClockConfig+0x264>)
 80032d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80032d4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80032d6:	2380      	movs	r3, #128	@ 0x80
 80032d8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80032da:	4b5a      	ldr	r3, [pc, #360]	@ (8003444 <HAL_RCC_ClockConfig+0x264>)
 80032dc:	689b      	ldr	r3, [r3, #8]
 80032de:	f023 0203 	bic.w	r2, r3, #3
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	4957      	ldr	r1, [pc, #348]	@ (8003444 <HAL_RCC_ClockConfig+0x264>)
 80032e8:	4313      	orrs	r3, r2
 80032ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032ec:	f7ff f8d8 	bl	80024a0 <HAL_GetTick>
 80032f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032f2:	e00a      	b.n	800330a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032f4:	f7ff f8d4 	bl	80024a0 <HAL_GetTick>
 80032f8:	4602      	mov	r2, r0
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	1ad3      	subs	r3, r2, r3
 80032fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003302:	4293      	cmp	r3, r2
 8003304:	d901      	bls.n	800330a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003306:	2303      	movs	r3, #3
 8003308:	e095      	b.n	8003436 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800330a:	4b4e      	ldr	r3, [pc, #312]	@ (8003444 <HAL_RCC_ClockConfig+0x264>)
 800330c:	689b      	ldr	r3, [r3, #8]
 800330e:	f003 020c 	and.w	r2, r3, #12
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	009b      	lsls	r3, r3, #2
 8003318:	429a      	cmp	r2, r3
 800331a:	d1eb      	bne.n	80032f4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f003 0302 	and.w	r3, r3, #2
 8003324:	2b00      	cmp	r3, #0
 8003326:	d023      	beq.n	8003370 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f003 0304 	and.w	r3, r3, #4
 8003330:	2b00      	cmp	r3, #0
 8003332:	d005      	beq.n	8003340 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003334:	4b43      	ldr	r3, [pc, #268]	@ (8003444 <HAL_RCC_ClockConfig+0x264>)
 8003336:	689b      	ldr	r3, [r3, #8]
 8003338:	4a42      	ldr	r2, [pc, #264]	@ (8003444 <HAL_RCC_ClockConfig+0x264>)
 800333a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800333e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f003 0308 	and.w	r3, r3, #8
 8003348:	2b00      	cmp	r3, #0
 800334a:	d007      	beq.n	800335c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800334c:	4b3d      	ldr	r3, [pc, #244]	@ (8003444 <HAL_RCC_ClockConfig+0x264>)
 800334e:	689b      	ldr	r3, [r3, #8]
 8003350:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003354:	4a3b      	ldr	r2, [pc, #236]	@ (8003444 <HAL_RCC_ClockConfig+0x264>)
 8003356:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800335a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800335c:	4b39      	ldr	r3, [pc, #228]	@ (8003444 <HAL_RCC_ClockConfig+0x264>)
 800335e:	689b      	ldr	r3, [r3, #8]
 8003360:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	689b      	ldr	r3, [r3, #8]
 8003368:	4936      	ldr	r1, [pc, #216]	@ (8003444 <HAL_RCC_ClockConfig+0x264>)
 800336a:	4313      	orrs	r3, r2
 800336c:	608b      	str	r3, [r1, #8]
 800336e:	e008      	b.n	8003382 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003370:	697b      	ldr	r3, [r7, #20]
 8003372:	2b80      	cmp	r3, #128	@ 0x80
 8003374:	d105      	bne.n	8003382 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003376:	4b33      	ldr	r3, [pc, #204]	@ (8003444 <HAL_RCC_ClockConfig+0x264>)
 8003378:	689b      	ldr	r3, [r3, #8]
 800337a:	4a32      	ldr	r2, [pc, #200]	@ (8003444 <HAL_RCC_ClockConfig+0x264>)
 800337c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003380:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003382:	4b2f      	ldr	r3, [pc, #188]	@ (8003440 <HAL_RCC_ClockConfig+0x260>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f003 030f 	and.w	r3, r3, #15
 800338a:	683a      	ldr	r2, [r7, #0]
 800338c:	429a      	cmp	r2, r3
 800338e:	d21d      	bcs.n	80033cc <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003390:	4b2b      	ldr	r3, [pc, #172]	@ (8003440 <HAL_RCC_ClockConfig+0x260>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f023 020f 	bic.w	r2, r3, #15
 8003398:	4929      	ldr	r1, [pc, #164]	@ (8003440 <HAL_RCC_ClockConfig+0x260>)
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	4313      	orrs	r3, r2
 800339e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80033a0:	f7ff f87e 	bl	80024a0 <HAL_GetTick>
 80033a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033a6:	e00a      	b.n	80033be <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033a8:	f7ff f87a 	bl	80024a0 <HAL_GetTick>
 80033ac:	4602      	mov	r2, r0
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	1ad3      	subs	r3, r2, r3
 80033b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d901      	bls.n	80033be <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80033ba:	2303      	movs	r3, #3
 80033bc:	e03b      	b.n	8003436 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033be:	4b20      	ldr	r3, [pc, #128]	@ (8003440 <HAL_RCC_ClockConfig+0x260>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f003 030f 	and.w	r3, r3, #15
 80033c6:	683a      	ldr	r2, [r7, #0]
 80033c8:	429a      	cmp	r2, r3
 80033ca:	d1ed      	bne.n	80033a8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f003 0304 	and.w	r3, r3, #4
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d008      	beq.n	80033ea <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033d8:	4b1a      	ldr	r3, [pc, #104]	@ (8003444 <HAL_RCC_ClockConfig+0x264>)
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	68db      	ldr	r3, [r3, #12]
 80033e4:	4917      	ldr	r1, [pc, #92]	@ (8003444 <HAL_RCC_ClockConfig+0x264>)
 80033e6:	4313      	orrs	r3, r2
 80033e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f003 0308 	and.w	r3, r3, #8
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d009      	beq.n	800340a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80033f6:	4b13      	ldr	r3, [pc, #76]	@ (8003444 <HAL_RCC_ClockConfig+0x264>)
 80033f8:	689b      	ldr	r3, [r3, #8]
 80033fa:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	691b      	ldr	r3, [r3, #16]
 8003402:	00db      	lsls	r3, r3, #3
 8003404:	490f      	ldr	r1, [pc, #60]	@ (8003444 <HAL_RCC_ClockConfig+0x264>)
 8003406:	4313      	orrs	r3, r2
 8003408:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800340a:	f000 f825 	bl	8003458 <HAL_RCC_GetSysClockFreq>
 800340e:	4602      	mov	r2, r0
 8003410:	4b0c      	ldr	r3, [pc, #48]	@ (8003444 <HAL_RCC_ClockConfig+0x264>)
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	091b      	lsrs	r3, r3, #4
 8003416:	f003 030f 	and.w	r3, r3, #15
 800341a:	490c      	ldr	r1, [pc, #48]	@ (800344c <HAL_RCC_ClockConfig+0x26c>)
 800341c:	5ccb      	ldrb	r3, [r1, r3]
 800341e:	f003 031f 	and.w	r3, r3, #31
 8003422:	fa22 f303 	lsr.w	r3, r2, r3
 8003426:	4a0a      	ldr	r2, [pc, #40]	@ (8003450 <HAL_RCC_ClockConfig+0x270>)
 8003428:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800342a:	4b0a      	ldr	r3, [pc, #40]	@ (8003454 <HAL_RCC_ClockConfig+0x274>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4618      	mov	r0, r3
 8003430:	f7fe ffea 	bl	8002408 <HAL_InitTick>
 8003434:	4603      	mov	r3, r0
}
 8003436:	4618      	mov	r0, r3
 8003438:	3718      	adds	r7, #24
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}
 800343e:	bf00      	nop
 8003440:	40022000 	.word	0x40022000
 8003444:	40021000 	.word	0x40021000
 8003448:	04c4b400 	.word	0x04c4b400
 800344c:	08005dbc 	.word	0x08005dbc
 8003450:	20000000 	.word	0x20000000
 8003454:	20000004 	.word	0x20000004

08003458 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003458:	b480      	push	{r7}
 800345a:	b087      	sub	sp, #28
 800345c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800345e:	4b2c      	ldr	r3, [pc, #176]	@ (8003510 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003460:	689b      	ldr	r3, [r3, #8]
 8003462:	f003 030c 	and.w	r3, r3, #12
 8003466:	2b04      	cmp	r3, #4
 8003468:	d102      	bne.n	8003470 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800346a:	4b2a      	ldr	r3, [pc, #168]	@ (8003514 <HAL_RCC_GetSysClockFreq+0xbc>)
 800346c:	613b      	str	r3, [r7, #16]
 800346e:	e047      	b.n	8003500 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003470:	4b27      	ldr	r3, [pc, #156]	@ (8003510 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003472:	689b      	ldr	r3, [r3, #8]
 8003474:	f003 030c 	and.w	r3, r3, #12
 8003478:	2b08      	cmp	r3, #8
 800347a:	d102      	bne.n	8003482 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800347c:	4b26      	ldr	r3, [pc, #152]	@ (8003518 <HAL_RCC_GetSysClockFreq+0xc0>)
 800347e:	613b      	str	r3, [r7, #16]
 8003480:	e03e      	b.n	8003500 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003482:	4b23      	ldr	r3, [pc, #140]	@ (8003510 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003484:	689b      	ldr	r3, [r3, #8]
 8003486:	f003 030c 	and.w	r3, r3, #12
 800348a:	2b0c      	cmp	r3, #12
 800348c:	d136      	bne.n	80034fc <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800348e:	4b20      	ldr	r3, [pc, #128]	@ (8003510 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003490:	68db      	ldr	r3, [r3, #12]
 8003492:	f003 0303 	and.w	r3, r3, #3
 8003496:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003498:	4b1d      	ldr	r3, [pc, #116]	@ (8003510 <HAL_RCC_GetSysClockFreq+0xb8>)
 800349a:	68db      	ldr	r3, [r3, #12]
 800349c:	091b      	lsrs	r3, r3, #4
 800349e:	f003 030f 	and.w	r3, r3, #15
 80034a2:	3301      	adds	r3, #1
 80034a4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	2b03      	cmp	r3, #3
 80034aa:	d10c      	bne.n	80034c6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80034ac:	4a1a      	ldr	r2, [pc, #104]	@ (8003518 <HAL_RCC_GetSysClockFreq+0xc0>)
 80034ae:	68bb      	ldr	r3, [r7, #8]
 80034b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80034b4:	4a16      	ldr	r2, [pc, #88]	@ (8003510 <HAL_RCC_GetSysClockFreq+0xb8>)
 80034b6:	68d2      	ldr	r2, [r2, #12]
 80034b8:	0a12      	lsrs	r2, r2, #8
 80034ba:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80034be:	fb02 f303 	mul.w	r3, r2, r3
 80034c2:	617b      	str	r3, [r7, #20]
      break;
 80034c4:	e00c      	b.n	80034e0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80034c6:	4a13      	ldr	r2, [pc, #76]	@ (8003514 <HAL_RCC_GetSysClockFreq+0xbc>)
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80034ce:	4a10      	ldr	r2, [pc, #64]	@ (8003510 <HAL_RCC_GetSysClockFreq+0xb8>)
 80034d0:	68d2      	ldr	r2, [r2, #12]
 80034d2:	0a12      	lsrs	r2, r2, #8
 80034d4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80034d8:	fb02 f303 	mul.w	r3, r2, r3
 80034dc:	617b      	str	r3, [r7, #20]
      break;
 80034de:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80034e0:	4b0b      	ldr	r3, [pc, #44]	@ (8003510 <HAL_RCC_GetSysClockFreq+0xb8>)
 80034e2:	68db      	ldr	r3, [r3, #12]
 80034e4:	0e5b      	lsrs	r3, r3, #25
 80034e6:	f003 0303 	and.w	r3, r3, #3
 80034ea:	3301      	adds	r3, #1
 80034ec:	005b      	lsls	r3, r3, #1
 80034ee:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80034f0:	697a      	ldr	r2, [r7, #20]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80034f8:	613b      	str	r3, [r7, #16]
 80034fa:	e001      	b.n	8003500 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80034fc:	2300      	movs	r3, #0
 80034fe:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003500:	693b      	ldr	r3, [r7, #16]
}
 8003502:	4618      	mov	r0, r3
 8003504:	371c      	adds	r7, #28
 8003506:	46bd      	mov	sp, r7
 8003508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350c:	4770      	bx	lr
 800350e:	bf00      	nop
 8003510:	40021000 	.word	0x40021000
 8003514:	00f42400 	.word	0x00f42400
 8003518:	016e3600 	.word	0x016e3600

0800351c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800351c:	b480      	push	{r7}
 800351e:	b087      	sub	sp, #28
 8003520:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003522:	4b1e      	ldr	r3, [pc, #120]	@ (800359c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003524:	68db      	ldr	r3, [r3, #12]
 8003526:	f003 0303 	and.w	r3, r3, #3
 800352a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800352c:	4b1b      	ldr	r3, [pc, #108]	@ (800359c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800352e:	68db      	ldr	r3, [r3, #12]
 8003530:	091b      	lsrs	r3, r3, #4
 8003532:	f003 030f 	and.w	r3, r3, #15
 8003536:	3301      	adds	r3, #1
 8003538:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800353a:	693b      	ldr	r3, [r7, #16]
 800353c:	2b03      	cmp	r3, #3
 800353e:	d10c      	bne.n	800355a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003540:	4a17      	ldr	r2, [pc, #92]	@ (80035a0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	fbb2 f3f3 	udiv	r3, r2, r3
 8003548:	4a14      	ldr	r2, [pc, #80]	@ (800359c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800354a:	68d2      	ldr	r2, [r2, #12]
 800354c:	0a12      	lsrs	r2, r2, #8
 800354e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003552:	fb02 f303 	mul.w	r3, r2, r3
 8003556:	617b      	str	r3, [r7, #20]
    break;
 8003558:	e00c      	b.n	8003574 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800355a:	4a12      	ldr	r2, [pc, #72]	@ (80035a4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003562:	4a0e      	ldr	r2, [pc, #56]	@ (800359c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003564:	68d2      	ldr	r2, [r2, #12]
 8003566:	0a12      	lsrs	r2, r2, #8
 8003568:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800356c:	fb02 f303 	mul.w	r3, r2, r3
 8003570:	617b      	str	r3, [r7, #20]
    break;
 8003572:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003574:	4b09      	ldr	r3, [pc, #36]	@ (800359c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003576:	68db      	ldr	r3, [r3, #12]
 8003578:	0e5b      	lsrs	r3, r3, #25
 800357a:	f003 0303 	and.w	r3, r3, #3
 800357e:	3301      	adds	r3, #1
 8003580:	005b      	lsls	r3, r3, #1
 8003582:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003584:	697a      	ldr	r2, [r7, #20]
 8003586:	68bb      	ldr	r3, [r7, #8]
 8003588:	fbb2 f3f3 	udiv	r3, r2, r3
 800358c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800358e:	687b      	ldr	r3, [r7, #4]
}
 8003590:	4618      	mov	r0, r3
 8003592:	371c      	adds	r7, #28
 8003594:	46bd      	mov	sp, r7
 8003596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359a:	4770      	bx	lr
 800359c:	40021000 	.word	0x40021000
 80035a0:	016e3600 	.word	0x016e3600
 80035a4:	00f42400 	.word	0x00f42400

080035a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b082      	sub	sp, #8
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d101      	bne.n	80035ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80035b6:	2301      	movs	r3, #1
 80035b8:	e049      	b.n	800364e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80035c0:	b2db      	uxtb	r3, r3
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d106      	bne.n	80035d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2200      	movs	r2, #0
 80035ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80035ce:	6878      	ldr	r0, [r7, #4]
 80035d0:	f7fe fce6 	bl	8001fa0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2202      	movs	r2, #2
 80035d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681a      	ldr	r2, [r3, #0]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	3304      	adds	r3, #4
 80035e4:	4619      	mov	r1, r3
 80035e6:	4610      	mov	r0, r2
 80035e8:	f000 ff5e 	bl	80044a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2201      	movs	r2, #1
 80035f0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2201      	movs	r2, #1
 80035f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2201      	movs	r2, #1
 8003600:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2201      	movs	r2, #1
 8003608:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2201      	movs	r2, #1
 8003610:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2201      	movs	r2, #1
 8003618:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2201      	movs	r2, #1
 8003620:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2201      	movs	r2, #1
 8003628:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2201      	movs	r2, #1
 8003630:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2201      	movs	r2, #1
 8003638:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2201      	movs	r2, #1
 8003640:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2201      	movs	r2, #1
 8003648:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800364c:	2300      	movs	r3, #0
}
 800364e:	4618      	mov	r0, r3
 8003650:	3708      	adds	r7, #8
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}
	...

08003658 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003658:	b480      	push	{r7}
 800365a:	b085      	sub	sp, #20
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003666:	b2db      	uxtb	r3, r3
 8003668:	2b01      	cmp	r3, #1
 800366a:	d001      	beq.n	8003670 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800366c:	2301      	movs	r3, #1
 800366e:	e04c      	b.n	800370a <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2202      	movs	r2, #2
 8003674:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a26      	ldr	r2, [pc, #152]	@ (8003718 <HAL_TIM_Base_Start+0xc0>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d022      	beq.n	80036c8 <HAL_TIM_Base_Start+0x70>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800368a:	d01d      	beq.n	80036c8 <HAL_TIM_Base_Start+0x70>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a22      	ldr	r2, [pc, #136]	@ (800371c <HAL_TIM_Base_Start+0xc4>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d018      	beq.n	80036c8 <HAL_TIM_Base_Start+0x70>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a21      	ldr	r2, [pc, #132]	@ (8003720 <HAL_TIM_Base_Start+0xc8>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d013      	beq.n	80036c8 <HAL_TIM_Base_Start+0x70>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a1f      	ldr	r2, [pc, #124]	@ (8003724 <HAL_TIM_Base_Start+0xcc>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d00e      	beq.n	80036c8 <HAL_TIM_Base_Start+0x70>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a1e      	ldr	r2, [pc, #120]	@ (8003728 <HAL_TIM_Base_Start+0xd0>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d009      	beq.n	80036c8 <HAL_TIM_Base_Start+0x70>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a1c      	ldr	r2, [pc, #112]	@ (800372c <HAL_TIM_Base_Start+0xd4>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d004      	beq.n	80036c8 <HAL_TIM_Base_Start+0x70>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a1b      	ldr	r2, [pc, #108]	@ (8003730 <HAL_TIM_Base_Start+0xd8>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d115      	bne.n	80036f4 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	689a      	ldr	r2, [r3, #8]
 80036ce:	4b19      	ldr	r3, [pc, #100]	@ (8003734 <HAL_TIM_Base_Start+0xdc>)
 80036d0:	4013      	ands	r3, r2
 80036d2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	2b06      	cmp	r3, #6
 80036d8:	d015      	beq.n	8003706 <HAL_TIM_Base_Start+0xae>
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80036e0:	d011      	beq.n	8003706 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	681a      	ldr	r2, [r3, #0]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f042 0201 	orr.w	r2, r2, #1
 80036f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036f2:	e008      	b.n	8003706 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	681a      	ldr	r2, [r3, #0]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f042 0201 	orr.w	r2, r2, #1
 8003702:	601a      	str	r2, [r3, #0]
 8003704:	e000      	b.n	8003708 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003706:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003708:	2300      	movs	r3, #0
}
 800370a:	4618      	mov	r0, r3
 800370c:	3714      	adds	r7, #20
 800370e:	46bd      	mov	sp, r7
 8003710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003714:	4770      	bx	lr
 8003716:	bf00      	nop
 8003718:	40012c00 	.word	0x40012c00
 800371c:	40000400 	.word	0x40000400
 8003720:	40000800 	.word	0x40000800
 8003724:	40000c00 	.word	0x40000c00
 8003728:	40013400 	.word	0x40013400
 800372c:	40014000 	.word	0x40014000
 8003730:	40015000 	.word	0x40015000
 8003734:	00010007 	.word	0x00010007

08003738 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003738:	b480      	push	{r7}
 800373a:	b085      	sub	sp, #20
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003746:	b2db      	uxtb	r3, r3
 8003748:	2b01      	cmp	r3, #1
 800374a:	d001      	beq.n	8003750 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800374c:	2301      	movs	r3, #1
 800374e:	e054      	b.n	80037fa <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2202      	movs	r2, #2
 8003754:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	68da      	ldr	r2, [r3, #12]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f042 0201 	orr.w	r2, r2, #1
 8003766:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a26      	ldr	r2, [pc, #152]	@ (8003808 <HAL_TIM_Base_Start_IT+0xd0>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d022      	beq.n	80037b8 <HAL_TIM_Base_Start_IT+0x80>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800377a:	d01d      	beq.n	80037b8 <HAL_TIM_Base_Start_IT+0x80>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a22      	ldr	r2, [pc, #136]	@ (800380c <HAL_TIM_Base_Start_IT+0xd4>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d018      	beq.n	80037b8 <HAL_TIM_Base_Start_IT+0x80>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a21      	ldr	r2, [pc, #132]	@ (8003810 <HAL_TIM_Base_Start_IT+0xd8>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d013      	beq.n	80037b8 <HAL_TIM_Base_Start_IT+0x80>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a1f      	ldr	r2, [pc, #124]	@ (8003814 <HAL_TIM_Base_Start_IT+0xdc>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d00e      	beq.n	80037b8 <HAL_TIM_Base_Start_IT+0x80>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a1e      	ldr	r2, [pc, #120]	@ (8003818 <HAL_TIM_Base_Start_IT+0xe0>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d009      	beq.n	80037b8 <HAL_TIM_Base_Start_IT+0x80>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a1c      	ldr	r2, [pc, #112]	@ (800381c <HAL_TIM_Base_Start_IT+0xe4>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d004      	beq.n	80037b8 <HAL_TIM_Base_Start_IT+0x80>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a1b      	ldr	r2, [pc, #108]	@ (8003820 <HAL_TIM_Base_Start_IT+0xe8>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d115      	bne.n	80037e4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	689a      	ldr	r2, [r3, #8]
 80037be:	4b19      	ldr	r3, [pc, #100]	@ (8003824 <HAL_TIM_Base_Start_IT+0xec>)
 80037c0:	4013      	ands	r3, r2
 80037c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	2b06      	cmp	r3, #6
 80037c8:	d015      	beq.n	80037f6 <HAL_TIM_Base_Start_IT+0xbe>
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80037d0:	d011      	beq.n	80037f6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	681a      	ldr	r2, [r3, #0]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f042 0201 	orr.w	r2, r2, #1
 80037e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037e2:	e008      	b.n	80037f6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	681a      	ldr	r2, [r3, #0]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f042 0201 	orr.w	r2, r2, #1
 80037f2:	601a      	str	r2, [r3, #0]
 80037f4:	e000      	b.n	80037f8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037f6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80037f8:	2300      	movs	r3, #0
}
 80037fa:	4618      	mov	r0, r3
 80037fc:	3714      	adds	r7, #20
 80037fe:	46bd      	mov	sp, r7
 8003800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003804:	4770      	bx	lr
 8003806:	bf00      	nop
 8003808:	40012c00 	.word	0x40012c00
 800380c:	40000400 	.word	0x40000400
 8003810:	40000800 	.word	0x40000800
 8003814:	40000c00 	.word	0x40000c00
 8003818:	40013400 	.word	0x40013400
 800381c:	40014000 	.word	0x40014000
 8003820:	40015000 	.word	0x40015000
 8003824:	00010007 	.word	0x00010007

08003828 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b082      	sub	sp, #8
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d101      	bne.n	800383a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003836:	2301      	movs	r3, #1
 8003838:	e049      	b.n	80038ce <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003840:	b2db      	uxtb	r3, r3
 8003842:	2b00      	cmp	r3, #0
 8003844:	d106      	bne.n	8003854 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2200      	movs	r2, #0
 800384a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800384e:	6878      	ldr	r0, [r7, #4]
 8003850:	f7fe fcc0 	bl	80021d4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2202      	movs	r2, #2
 8003858:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681a      	ldr	r2, [r3, #0]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	3304      	adds	r3, #4
 8003864:	4619      	mov	r1, r3
 8003866:	4610      	mov	r0, r2
 8003868:	f000 fe1e 	bl	80044a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2201      	movs	r2, #1
 8003870:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2201      	movs	r2, #1
 8003878:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2201      	movs	r2, #1
 8003880:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2201      	movs	r2, #1
 8003888:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2201      	movs	r2, #1
 8003890:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2201      	movs	r2, #1
 8003898:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2201      	movs	r2, #1
 80038a0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2201      	movs	r2, #1
 80038a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2201      	movs	r2, #1
 80038b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2201      	movs	r2, #1
 80038b8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2201      	movs	r2, #1
 80038c0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2201      	movs	r2, #1
 80038c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80038cc:	2300      	movs	r3, #0
}
 80038ce:	4618      	mov	r0, r3
 80038d0:	3708      	adds	r7, #8
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}
	...

080038d8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b084      	sub	sp, #16
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
 80038e0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d109      	bne.n	80038fc <HAL_TIM_PWM_Start+0x24>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80038ee:	b2db      	uxtb	r3, r3
 80038f0:	2b01      	cmp	r3, #1
 80038f2:	bf14      	ite	ne
 80038f4:	2301      	movne	r3, #1
 80038f6:	2300      	moveq	r3, #0
 80038f8:	b2db      	uxtb	r3, r3
 80038fa:	e03c      	b.n	8003976 <HAL_TIM_PWM_Start+0x9e>
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	2b04      	cmp	r3, #4
 8003900:	d109      	bne.n	8003916 <HAL_TIM_PWM_Start+0x3e>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003908:	b2db      	uxtb	r3, r3
 800390a:	2b01      	cmp	r3, #1
 800390c:	bf14      	ite	ne
 800390e:	2301      	movne	r3, #1
 8003910:	2300      	moveq	r3, #0
 8003912:	b2db      	uxtb	r3, r3
 8003914:	e02f      	b.n	8003976 <HAL_TIM_PWM_Start+0x9e>
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	2b08      	cmp	r3, #8
 800391a:	d109      	bne.n	8003930 <HAL_TIM_PWM_Start+0x58>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003922:	b2db      	uxtb	r3, r3
 8003924:	2b01      	cmp	r3, #1
 8003926:	bf14      	ite	ne
 8003928:	2301      	movne	r3, #1
 800392a:	2300      	moveq	r3, #0
 800392c:	b2db      	uxtb	r3, r3
 800392e:	e022      	b.n	8003976 <HAL_TIM_PWM_Start+0x9e>
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	2b0c      	cmp	r3, #12
 8003934:	d109      	bne.n	800394a <HAL_TIM_PWM_Start+0x72>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800393c:	b2db      	uxtb	r3, r3
 800393e:	2b01      	cmp	r3, #1
 8003940:	bf14      	ite	ne
 8003942:	2301      	movne	r3, #1
 8003944:	2300      	moveq	r3, #0
 8003946:	b2db      	uxtb	r3, r3
 8003948:	e015      	b.n	8003976 <HAL_TIM_PWM_Start+0x9e>
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	2b10      	cmp	r3, #16
 800394e:	d109      	bne.n	8003964 <HAL_TIM_PWM_Start+0x8c>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003956:	b2db      	uxtb	r3, r3
 8003958:	2b01      	cmp	r3, #1
 800395a:	bf14      	ite	ne
 800395c:	2301      	movne	r3, #1
 800395e:	2300      	moveq	r3, #0
 8003960:	b2db      	uxtb	r3, r3
 8003962:	e008      	b.n	8003976 <HAL_TIM_PWM_Start+0x9e>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800396a:	b2db      	uxtb	r3, r3
 800396c:	2b01      	cmp	r3, #1
 800396e:	bf14      	ite	ne
 8003970:	2301      	movne	r3, #1
 8003972:	2300      	moveq	r3, #0
 8003974:	b2db      	uxtb	r3, r3
 8003976:	2b00      	cmp	r3, #0
 8003978:	d001      	beq.n	800397e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800397a:	2301      	movs	r3, #1
 800397c:	e0a6      	b.n	8003acc <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d104      	bne.n	800398e <HAL_TIM_PWM_Start+0xb6>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2202      	movs	r2, #2
 8003988:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800398c:	e023      	b.n	80039d6 <HAL_TIM_PWM_Start+0xfe>
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	2b04      	cmp	r3, #4
 8003992:	d104      	bne.n	800399e <HAL_TIM_PWM_Start+0xc6>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2202      	movs	r2, #2
 8003998:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800399c:	e01b      	b.n	80039d6 <HAL_TIM_PWM_Start+0xfe>
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	2b08      	cmp	r3, #8
 80039a2:	d104      	bne.n	80039ae <HAL_TIM_PWM_Start+0xd6>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2202      	movs	r2, #2
 80039a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80039ac:	e013      	b.n	80039d6 <HAL_TIM_PWM_Start+0xfe>
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	2b0c      	cmp	r3, #12
 80039b2:	d104      	bne.n	80039be <HAL_TIM_PWM_Start+0xe6>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2202      	movs	r2, #2
 80039b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80039bc:	e00b      	b.n	80039d6 <HAL_TIM_PWM_Start+0xfe>
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	2b10      	cmp	r3, #16
 80039c2:	d104      	bne.n	80039ce <HAL_TIM_PWM_Start+0xf6>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2202      	movs	r2, #2
 80039c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80039cc:	e003      	b.n	80039d6 <HAL_TIM_PWM_Start+0xfe>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2202      	movs	r2, #2
 80039d2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	2201      	movs	r2, #1
 80039dc:	6839      	ldr	r1, [r7, #0]
 80039de:	4618      	mov	r0, r3
 80039e0:	f001 f9dc 	bl	8004d9c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a3a      	ldr	r2, [pc, #232]	@ (8003ad4 <HAL_TIM_PWM_Start+0x1fc>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d018      	beq.n	8003a20 <HAL_TIM_PWM_Start+0x148>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a39      	ldr	r2, [pc, #228]	@ (8003ad8 <HAL_TIM_PWM_Start+0x200>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d013      	beq.n	8003a20 <HAL_TIM_PWM_Start+0x148>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a37      	ldr	r2, [pc, #220]	@ (8003adc <HAL_TIM_PWM_Start+0x204>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d00e      	beq.n	8003a20 <HAL_TIM_PWM_Start+0x148>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4a36      	ldr	r2, [pc, #216]	@ (8003ae0 <HAL_TIM_PWM_Start+0x208>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d009      	beq.n	8003a20 <HAL_TIM_PWM_Start+0x148>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a34      	ldr	r2, [pc, #208]	@ (8003ae4 <HAL_TIM_PWM_Start+0x20c>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d004      	beq.n	8003a20 <HAL_TIM_PWM_Start+0x148>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a33      	ldr	r2, [pc, #204]	@ (8003ae8 <HAL_TIM_PWM_Start+0x210>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d101      	bne.n	8003a24 <HAL_TIM_PWM_Start+0x14c>
 8003a20:	2301      	movs	r3, #1
 8003a22:	e000      	b.n	8003a26 <HAL_TIM_PWM_Start+0x14e>
 8003a24:	2300      	movs	r3, #0
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d007      	beq.n	8003a3a <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003a38:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a25      	ldr	r2, [pc, #148]	@ (8003ad4 <HAL_TIM_PWM_Start+0x1fc>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d022      	beq.n	8003a8a <HAL_TIM_PWM_Start+0x1b2>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a4c:	d01d      	beq.n	8003a8a <HAL_TIM_PWM_Start+0x1b2>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4a26      	ldr	r2, [pc, #152]	@ (8003aec <HAL_TIM_PWM_Start+0x214>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d018      	beq.n	8003a8a <HAL_TIM_PWM_Start+0x1b2>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a24      	ldr	r2, [pc, #144]	@ (8003af0 <HAL_TIM_PWM_Start+0x218>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d013      	beq.n	8003a8a <HAL_TIM_PWM_Start+0x1b2>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a23      	ldr	r2, [pc, #140]	@ (8003af4 <HAL_TIM_PWM_Start+0x21c>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d00e      	beq.n	8003a8a <HAL_TIM_PWM_Start+0x1b2>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a19      	ldr	r2, [pc, #100]	@ (8003ad8 <HAL_TIM_PWM_Start+0x200>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d009      	beq.n	8003a8a <HAL_TIM_PWM_Start+0x1b2>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a18      	ldr	r2, [pc, #96]	@ (8003adc <HAL_TIM_PWM_Start+0x204>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d004      	beq.n	8003a8a <HAL_TIM_PWM_Start+0x1b2>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4a18      	ldr	r2, [pc, #96]	@ (8003ae8 <HAL_TIM_PWM_Start+0x210>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d115      	bne.n	8003ab6 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	689a      	ldr	r2, [r3, #8]
 8003a90:	4b19      	ldr	r3, [pc, #100]	@ (8003af8 <HAL_TIM_PWM_Start+0x220>)
 8003a92:	4013      	ands	r3, r2
 8003a94:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	2b06      	cmp	r3, #6
 8003a9a:	d015      	beq.n	8003ac8 <HAL_TIM_PWM_Start+0x1f0>
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003aa2:	d011      	beq.n	8003ac8 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	681a      	ldr	r2, [r3, #0]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f042 0201 	orr.w	r2, r2, #1
 8003ab2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ab4:	e008      	b.n	8003ac8 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	681a      	ldr	r2, [r3, #0]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f042 0201 	orr.w	r2, r2, #1
 8003ac4:	601a      	str	r2, [r3, #0]
 8003ac6:	e000      	b.n	8003aca <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ac8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003aca:	2300      	movs	r3, #0
}
 8003acc:	4618      	mov	r0, r3
 8003ace:	3710      	adds	r7, #16
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	bd80      	pop	{r7, pc}
 8003ad4:	40012c00 	.word	0x40012c00
 8003ad8:	40013400 	.word	0x40013400
 8003adc:	40014000 	.word	0x40014000
 8003ae0:	40014400 	.word	0x40014400
 8003ae4:	40014800 	.word	0x40014800
 8003ae8:	40015000 	.word	0x40015000
 8003aec:	40000400 	.word	0x40000400
 8003af0:	40000800 	.word	0x40000800
 8003af4:	40000c00 	.word	0x40000c00
 8003af8:	00010007 	.word	0x00010007

08003afc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b086      	sub	sp, #24
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
 8003b04:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d101      	bne.n	8003b10 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	e097      	b.n	8003c40 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b16:	b2db      	uxtb	r3, r3
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d106      	bne.n	8003b2a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003b24:	6878      	ldr	r0, [r7, #4]
 8003b26:	f7fe fa5f 	bl	8001fe8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2202      	movs	r2, #2
 8003b2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	689b      	ldr	r3, [r3, #8]
 8003b38:	687a      	ldr	r2, [r7, #4]
 8003b3a:	6812      	ldr	r2, [r2, #0]
 8003b3c:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8003b40:	f023 0307 	bic.w	r3, r3, #7
 8003b44:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681a      	ldr	r2, [r3, #0]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	3304      	adds	r3, #4
 8003b4e:	4619      	mov	r1, r3
 8003b50:	4610      	mov	r0, r2
 8003b52:	f000 fca9 	bl	80044a8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	689b      	ldr	r3, [r3, #8]
 8003b5c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	699b      	ldr	r3, [r3, #24]
 8003b64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	6a1b      	ldr	r3, [r3, #32]
 8003b6c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	697a      	ldr	r2, [r7, #20]
 8003b74:	4313      	orrs	r3, r2
 8003b76:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003b78:	693b      	ldr	r3, [r7, #16]
 8003b7a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b7e:	f023 0303 	bic.w	r3, r3, #3
 8003b82:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	689a      	ldr	r2, [r3, #8]
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	699b      	ldr	r3, [r3, #24]
 8003b8c:	021b      	lsls	r3, r3, #8
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	693a      	ldr	r2, [r7, #16]
 8003b92:	4313      	orrs	r3, r2
 8003b94:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003b96:	693b      	ldr	r3, [r7, #16]
 8003b98:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8003b9c:	f023 030c 	bic.w	r3, r3, #12
 8003ba0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003ba2:	693b      	ldr	r3, [r7, #16]
 8003ba4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003ba8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003bac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	68da      	ldr	r2, [r3, #12]
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	69db      	ldr	r3, [r3, #28]
 8003bb6:	021b      	lsls	r3, r3, #8
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	693a      	ldr	r2, [r7, #16]
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	691b      	ldr	r3, [r3, #16]
 8003bc4:	011a      	lsls	r2, r3, #4
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	6a1b      	ldr	r3, [r3, #32]
 8003bca:	031b      	lsls	r3, r3, #12
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	693a      	ldr	r2, [r7, #16]
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8003bda:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8003be2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	685a      	ldr	r2, [r3, #4]
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	695b      	ldr	r3, [r3, #20]
 8003bec:	011b      	lsls	r3, r3, #4
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	68fa      	ldr	r2, [r7, #12]
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	697a      	ldr	r2, [r7, #20]
 8003bfc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	693a      	ldr	r2, [r7, #16]
 8003c04:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	68fa      	ldr	r2, [r7, #12]
 8003c0c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2201      	movs	r2, #1
 8003c12:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2201      	movs	r2, #1
 8003c1a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2201      	movs	r2, #1
 8003c22:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2201      	movs	r2, #1
 8003c2a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2201      	movs	r2, #1
 8003c32:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2201      	movs	r2, #1
 8003c3a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003c3e:	2300      	movs	r3, #0
}
 8003c40:	4618      	mov	r0, r3
 8003c42:	3718      	adds	r7, #24
 8003c44:	46bd      	mov	sp, r7
 8003c46:	bd80      	pop	{r7, pc}

08003c48 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b084      	sub	sp, #16
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
 8003c50:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003c58:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003c60:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003c68:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003c70:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d110      	bne.n	8003c9a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003c78:	7bfb      	ldrb	r3, [r7, #15]
 8003c7a:	2b01      	cmp	r3, #1
 8003c7c:	d102      	bne.n	8003c84 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003c7e:	7b7b      	ldrb	r3, [r7, #13]
 8003c80:	2b01      	cmp	r3, #1
 8003c82:	d001      	beq.n	8003c88 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8003c84:	2301      	movs	r3, #1
 8003c86:	e069      	b.n	8003d5c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2202      	movs	r2, #2
 8003c8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2202      	movs	r2, #2
 8003c94:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003c98:	e031      	b.n	8003cfe <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	2b04      	cmp	r3, #4
 8003c9e:	d110      	bne.n	8003cc2 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003ca0:	7bbb      	ldrb	r3, [r7, #14]
 8003ca2:	2b01      	cmp	r3, #1
 8003ca4:	d102      	bne.n	8003cac <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003ca6:	7b3b      	ldrb	r3, [r7, #12]
 8003ca8:	2b01      	cmp	r3, #1
 8003caa:	d001      	beq.n	8003cb0 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8003cac:	2301      	movs	r3, #1
 8003cae:	e055      	b.n	8003d5c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2202      	movs	r2, #2
 8003cb4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2202      	movs	r2, #2
 8003cbc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003cc0:	e01d      	b.n	8003cfe <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003cc2:	7bfb      	ldrb	r3, [r7, #15]
 8003cc4:	2b01      	cmp	r3, #1
 8003cc6:	d108      	bne.n	8003cda <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003cc8:	7bbb      	ldrb	r3, [r7, #14]
 8003cca:	2b01      	cmp	r3, #1
 8003ccc:	d105      	bne.n	8003cda <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003cce:	7b7b      	ldrb	r3, [r7, #13]
 8003cd0:	2b01      	cmp	r3, #1
 8003cd2:	d102      	bne.n	8003cda <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003cd4:	7b3b      	ldrb	r3, [r7, #12]
 8003cd6:	2b01      	cmp	r3, #1
 8003cd8:	d001      	beq.n	8003cde <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	e03e      	b.n	8003d5c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2202      	movs	r2, #2
 8003ce2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2202      	movs	r2, #2
 8003cea:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2202      	movs	r2, #2
 8003cf2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2202      	movs	r2, #2
 8003cfa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d003      	beq.n	8003d0c <HAL_TIM_Encoder_Start+0xc4>
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	2b04      	cmp	r3, #4
 8003d08:	d008      	beq.n	8003d1c <HAL_TIM_Encoder_Start+0xd4>
 8003d0a:	e00f      	b.n	8003d2c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	2201      	movs	r2, #1
 8003d12:	2100      	movs	r1, #0
 8003d14:	4618      	mov	r0, r3
 8003d16:	f001 f841 	bl	8004d9c <TIM_CCxChannelCmd>
      break;
 8003d1a:	e016      	b.n	8003d4a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	2201      	movs	r2, #1
 8003d22:	2104      	movs	r1, #4
 8003d24:	4618      	mov	r0, r3
 8003d26:	f001 f839 	bl	8004d9c <TIM_CCxChannelCmd>
      break;
 8003d2a:	e00e      	b.n	8003d4a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	2201      	movs	r2, #1
 8003d32:	2100      	movs	r1, #0
 8003d34:	4618      	mov	r0, r3
 8003d36:	f001 f831 	bl	8004d9c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	2201      	movs	r2, #1
 8003d40:	2104      	movs	r1, #4
 8003d42:	4618      	mov	r0, r3
 8003d44:	f001 f82a 	bl	8004d9c <TIM_CCxChannelCmd>
      break;
 8003d48:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	681a      	ldr	r2, [r3, #0]
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f042 0201 	orr.w	r2, r2, #1
 8003d58:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003d5a:	2300      	movs	r3, #0
}
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	3710      	adds	r7, #16
 8003d60:	46bd      	mov	sp, r7
 8003d62:	bd80      	pop	{r7, pc}

08003d64 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b084      	sub	sp, #16
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	68db      	ldr	r3, [r3, #12]
 8003d72:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	691b      	ldr	r3, [r3, #16]
 8003d7a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003d7c:	68bb      	ldr	r3, [r7, #8]
 8003d7e:	f003 0302 	and.w	r3, r3, #2
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d020      	beq.n	8003dc8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	f003 0302 	and.w	r3, r3, #2
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d01b      	beq.n	8003dc8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f06f 0202 	mvn.w	r2, #2
 8003d98:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2201      	movs	r2, #1
 8003d9e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	699b      	ldr	r3, [r3, #24]
 8003da6:	f003 0303 	and.w	r3, r3, #3
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d003      	beq.n	8003db6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003dae:	6878      	ldr	r0, [r7, #4]
 8003db0:	f000 fb5c 	bl	800446c <HAL_TIM_IC_CaptureCallback>
 8003db4:	e005      	b.n	8003dc2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003db6:	6878      	ldr	r0, [r7, #4]
 8003db8:	f000 fb4e 	bl	8004458 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003dbc:	6878      	ldr	r0, [r7, #4]
 8003dbe:	f000 fb5f 	bl	8004480 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003dc8:	68bb      	ldr	r3, [r7, #8]
 8003dca:	f003 0304 	and.w	r3, r3, #4
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d020      	beq.n	8003e14 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	f003 0304 	and.w	r3, r3, #4
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d01b      	beq.n	8003e14 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f06f 0204 	mvn.w	r2, #4
 8003de4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2202      	movs	r2, #2
 8003dea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	699b      	ldr	r3, [r3, #24]
 8003df2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d003      	beq.n	8003e02 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003dfa:	6878      	ldr	r0, [r7, #4]
 8003dfc:	f000 fb36 	bl	800446c <HAL_TIM_IC_CaptureCallback>
 8003e00:	e005      	b.n	8003e0e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e02:	6878      	ldr	r0, [r7, #4]
 8003e04:	f000 fb28 	bl	8004458 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e08:	6878      	ldr	r0, [r7, #4]
 8003e0a:	f000 fb39 	bl	8004480 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2200      	movs	r2, #0
 8003e12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003e14:	68bb      	ldr	r3, [r7, #8]
 8003e16:	f003 0308 	and.w	r3, r3, #8
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d020      	beq.n	8003e60 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	f003 0308 	and.w	r3, r3, #8
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d01b      	beq.n	8003e60 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f06f 0208 	mvn.w	r2, #8
 8003e30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2204      	movs	r2, #4
 8003e36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	69db      	ldr	r3, [r3, #28]
 8003e3e:	f003 0303 	and.w	r3, r3, #3
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d003      	beq.n	8003e4e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e46:	6878      	ldr	r0, [r7, #4]
 8003e48:	f000 fb10 	bl	800446c <HAL_TIM_IC_CaptureCallback>
 8003e4c:	e005      	b.n	8003e5a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e4e:	6878      	ldr	r0, [r7, #4]
 8003e50:	f000 fb02 	bl	8004458 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e54:	6878      	ldr	r0, [r7, #4]
 8003e56:	f000 fb13 	bl	8004480 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	f003 0310 	and.w	r3, r3, #16
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d020      	beq.n	8003eac <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	f003 0310 	and.w	r3, r3, #16
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d01b      	beq.n	8003eac <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f06f 0210 	mvn.w	r2, #16
 8003e7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2208      	movs	r2, #8
 8003e82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	69db      	ldr	r3, [r3, #28]
 8003e8a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d003      	beq.n	8003e9a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e92:	6878      	ldr	r0, [r7, #4]
 8003e94:	f000 faea 	bl	800446c <HAL_TIM_IC_CaptureCallback>
 8003e98:	e005      	b.n	8003ea6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e9a:	6878      	ldr	r0, [r7, #4]
 8003e9c:	f000 fadc 	bl	8004458 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ea0:	6878      	ldr	r0, [r7, #4]
 8003ea2:	f000 faed 	bl	8004480 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	f003 0301 	and.w	r3, r3, #1
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d00c      	beq.n	8003ed0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	f003 0301 	and.w	r3, r3, #1
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d007      	beq.n	8003ed0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f06f 0201 	mvn.w	r2, #1
 8003ec8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003eca:	6878      	ldr	r0, [r7, #4]
 8003ecc:	f7fd fcd2 	bl	8001874 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d104      	bne.n	8003ee4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8003eda:	68bb      	ldr	r3, [r7, #8]
 8003edc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d00c      	beq.n	8003efe <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d007      	beq.n	8003efe <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8003ef6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003ef8:	6878      	ldr	r0, [r7, #4]
 8003efa:	f001 f8a9 	bl	8005050 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003efe:	68bb      	ldr	r3, [r7, #8]
 8003f00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d00c      	beq.n	8003f22 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d007      	beq.n	8003f22 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003f1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003f1c:	6878      	ldr	r0, [r7, #4]
 8003f1e:	f001 f8a1 	bl	8005064 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003f22:	68bb      	ldr	r3, [r7, #8]
 8003f24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d00c      	beq.n	8003f46 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d007      	beq.n	8003f46 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003f3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003f40:	6878      	ldr	r0, [r7, #4]
 8003f42:	f000 faa7 	bl	8004494 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003f46:	68bb      	ldr	r3, [r7, #8]
 8003f48:	f003 0320 	and.w	r3, r3, #32
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d00c      	beq.n	8003f6a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	f003 0320 	and.w	r3, r3, #32
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d007      	beq.n	8003f6a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f06f 0220 	mvn.w	r2, #32
 8003f62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003f64:	6878      	ldr	r0, [r7, #4]
 8003f66:	f001 f869 	bl	800503c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8003f6a:	68bb      	ldr	r3, [r7, #8]
 8003f6c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d00c      	beq.n	8003f8e <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d007      	beq.n	8003f8e <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8003f86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8003f88:	6878      	ldr	r0, [r7, #4]
 8003f8a:	f001 f875 	bl	8005078 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8003f8e:	68bb      	ldr	r3, [r7, #8]
 8003f90:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d00c      	beq.n	8003fb2 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d007      	beq.n	8003fb2 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8003faa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8003fac:	6878      	ldr	r0, [r7, #4]
 8003fae:	f001 f86d 	bl	800508c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8003fb2:	68bb      	ldr	r3, [r7, #8]
 8003fb4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d00c      	beq.n	8003fd6 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d007      	beq.n	8003fd6 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8003fce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8003fd0:	6878      	ldr	r0, [r7, #4]
 8003fd2:	f001 f865 	bl	80050a0 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8003fd6:	68bb      	ldr	r3, [r7, #8]
 8003fd8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d00c      	beq.n	8003ffa <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d007      	beq.n	8003ffa <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8003ff2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8003ff4:	6878      	ldr	r0, [r7, #4]
 8003ff6:	f001 f85d 	bl	80050b4 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003ffa:	bf00      	nop
 8003ffc:	3710      	adds	r7, #16
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bd80      	pop	{r7, pc}
	...

08004004 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b086      	sub	sp, #24
 8004008:	af00      	add	r7, sp, #0
 800400a:	60f8      	str	r0, [r7, #12]
 800400c:	60b9      	str	r1, [r7, #8]
 800400e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004010:	2300      	movs	r3, #0
 8004012:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800401a:	2b01      	cmp	r3, #1
 800401c:	d101      	bne.n	8004022 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800401e:	2302      	movs	r3, #2
 8004020:	e0ff      	b.n	8004222 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	2201      	movs	r2, #1
 8004026:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2b14      	cmp	r3, #20
 800402e:	f200 80f0 	bhi.w	8004212 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004032:	a201      	add	r2, pc, #4	@ (adr r2, 8004038 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004034:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004038:	0800408d 	.word	0x0800408d
 800403c:	08004213 	.word	0x08004213
 8004040:	08004213 	.word	0x08004213
 8004044:	08004213 	.word	0x08004213
 8004048:	080040cd 	.word	0x080040cd
 800404c:	08004213 	.word	0x08004213
 8004050:	08004213 	.word	0x08004213
 8004054:	08004213 	.word	0x08004213
 8004058:	0800410f 	.word	0x0800410f
 800405c:	08004213 	.word	0x08004213
 8004060:	08004213 	.word	0x08004213
 8004064:	08004213 	.word	0x08004213
 8004068:	0800414f 	.word	0x0800414f
 800406c:	08004213 	.word	0x08004213
 8004070:	08004213 	.word	0x08004213
 8004074:	08004213 	.word	0x08004213
 8004078:	08004191 	.word	0x08004191
 800407c:	08004213 	.word	0x08004213
 8004080:	08004213 	.word	0x08004213
 8004084:	08004213 	.word	0x08004213
 8004088:	080041d1 	.word	0x080041d1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	68b9      	ldr	r1, [r7, #8]
 8004092:	4618      	mov	r0, r3
 8004094:	f000 fabc 	bl	8004610 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	699a      	ldr	r2, [r3, #24]
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f042 0208 	orr.w	r2, r2, #8
 80040a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	699a      	ldr	r2, [r3, #24]
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f022 0204 	bic.w	r2, r2, #4
 80040b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	6999      	ldr	r1, [r3, #24]
 80040be:	68bb      	ldr	r3, [r7, #8]
 80040c0:	691a      	ldr	r2, [r3, #16]
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	430a      	orrs	r2, r1
 80040c8:	619a      	str	r2, [r3, #24]
      break;
 80040ca:	e0a5      	b.n	8004218 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	68b9      	ldr	r1, [r7, #8]
 80040d2:	4618      	mov	r0, r3
 80040d4:	f000 fb36 	bl	8004744 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	699a      	ldr	r2, [r3, #24]
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80040e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	699a      	ldr	r2, [r3, #24]
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80040f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	6999      	ldr	r1, [r3, #24]
 80040fe:	68bb      	ldr	r3, [r7, #8]
 8004100:	691b      	ldr	r3, [r3, #16]
 8004102:	021a      	lsls	r2, r3, #8
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	430a      	orrs	r2, r1
 800410a:	619a      	str	r2, [r3, #24]
      break;
 800410c:	e084      	b.n	8004218 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	68b9      	ldr	r1, [r7, #8]
 8004114:	4618      	mov	r0, r3
 8004116:	f000 fba9 	bl	800486c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	69da      	ldr	r2, [r3, #28]
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f042 0208 	orr.w	r2, r2, #8
 8004128:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	69da      	ldr	r2, [r3, #28]
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f022 0204 	bic.w	r2, r2, #4
 8004138:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	69d9      	ldr	r1, [r3, #28]
 8004140:	68bb      	ldr	r3, [r7, #8]
 8004142:	691a      	ldr	r2, [r3, #16]
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	430a      	orrs	r2, r1
 800414a:	61da      	str	r2, [r3, #28]
      break;
 800414c:	e064      	b.n	8004218 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	68b9      	ldr	r1, [r7, #8]
 8004154:	4618      	mov	r0, r3
 8004156:	f000 fc1b 	bl	8004990 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	69da      	ldr	r2, [r3, #28]
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004168:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	69da      	ldr	r2, [r3, #28]
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004178:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	69d9      	ldr	r1, [r3, #28]
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	691b      	ldr	r3, [r3, #16]
 8004184:	021a      	lsls	r2, r3, #8
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	430a      	orrs	r2, r1
 800418c:	61da      	str	r2, [r3, #28]
      break;
 800418e:	e043      	b.n	8004218 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	68b9      	ldr	r1, [r7, #8]
 8004196:	4618      	mov	r0, r3
 8004198:	f000 fc8e 	bl	8004ab8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f042 0208 	orr.w	r2, r2, #8
 80041aa:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f022 0204 	bic.w	r2, r2, #4
 80041ba:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80041c2:	68bb      	ldr	r3, [r7, #8]
 80041c4:	691a      	ldr	r2, [r3, #16]
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	430a      	orrs	r2, r1
 80041cc:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80041ce:	e023      	b.n	8004218 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	68b9      	ldr	r1, [r7, #8]
 80041d6:	4618      	mov	r0, r3
 80041d8:	f000 fcd8 	bl	8004b8c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80041ea:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80041fa:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8004202:	68bb      	ldr	r3, [r7, #8]
 8004204:	691b      	ldr	r3, [r3, #16]
 8004206:	021a      	lsls	r2, r3, #8
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	430a      	orrs	r2, r1
 800420e:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8004210:	e002      	b.n	8004218 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004212:	2301      	movs	r3, #1
 8004214:	75fb      	strb	r3, [r7, #23]
      break;
 8004216:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	2200      	movs	r2, #0
 800421c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004220:	7dfb      	ldrb	r3, [r7, #23]
}
 8004222:	4618      	mov	r0, r3
 8004224:	3718      	adds	r7, #24
 8004226:	46bd      	mov	sp, r7
 8004228:	bd80      	pop	{r7, pc}
 800422a:	bf00      	nop

0800422c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b084      	sub	sp, #16
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
 8004234:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004236:	2300      	movs	r3, #0
 8004238:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004240:	2b01      	cmp	r3, #1
 8004242:	d101      	bne.n	8004248 <HAL_TIM_ConfigClockSource+0x1c>
 8004244:	2302      	movs	r3, #2
 8004246:	e0f6      	b.n	8004436 <HAL_TIM_ConfigClockSource+0x20a>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2201      	movs	r2, #1
 800424c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2202      	movs	r2, #2
 8004254:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	689b      	ldr	r3, [r3, #8]
 800425e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004260:	68bb      	ldr	r3, [r7, #8]
 8004262:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8004266:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800426a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004272:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	68ba      	ldr	r2, [r7, #8]
 800427a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4a6f      	ldr	r2, [pc, #444]	@ (8004440 <HAL_TIM_ConfigClockSource+0x214>)
 8004282:	4293      	cmp	r3, r2
 8004284:	f000 80c1 	beq.w	800440a <HAL_TIM_ConfigClockSource+0x1de>
 8004288:	4a6d      	ldr	r2, [pc, #436]	@ (8004440 <HAL_TIM_ConfigClockSource+0x214>)
 800428a:	4293      	cmp	r3, r2
 800428c:	f200 80c6 	bhi.w	800441c <HAL_TIM_ConfigClockSource+0x1f0>
 8004290:	4a6c      	ldr	r2, [pc, #432]	@ (8004444 <HAL_TIM_ConfigClockSource+0x218>)
 8004292:	4293      	cmp	r3, r2
 8004294:	f000 80b9 	beq.w	800440a <HAL_TIM_ConfigClockSource+0x1de>
 8004298:	4a6a      	ldr	r2, [pc, #424]	@ (8004444 <HAL_TIM_ConfigClockSource+0x218>)
 800429a:	4293      	cmp	r3, r2
 800429c:	f200 80be 	bhi.w	800441c <HAL_TIM_ConfigClockSource+0x1f0>
 80042a0:	4a69      	ldr	r2, [pc, #420]	@ (8004448 <HAL_TIM_ConfigClockSource+0x21c>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	f000 80b1 	beq.w	800440a <HAL_TIM_ConfigClockSource+0x1de>
 80042a8:	4a67      	ldr	r2, [pc, #412]	@ (8004448 <HAL_TIM_ConfigClockSource+0x21c>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	f200 80b6 	bhi.w	800441c <HAL_TIM_ConfigClockSource+0x1f0>
 80042b0:	4a66      	ldr	r2, [pc, #408]	@ (800444c <HAL_TIM_ConfigClockSource+0x220>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	f000 80a9 	beq.w	800440a <HAL_TIM_ConfigClockSource+0x1de>
 80042b8:	4a64      	ldr	r2, [pc, #400]	@ (800444c <HAL_TIM_ConfigClockSource+0x220>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	f200 80ae 	bhi.w	800441c <HAL_TIM_ConfigClockSource+0x1f0>
 80042c0:	4a63      	ldr	r2, [pc, #396]	@ (8004450 <HAL_TIM_ConfigClockSource+0x224>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	f000 80a1 	beq.w	800440a <HAL_TIM_ConfigClockSource+0x1de>
 80042c8:	4a61      	ldr	r2, [pc, #388]	@ (8004450 <HAL_TIM_ConfigClockSource+0x224>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	f200 80a6 	bhi.w	800441c <HAL_TIM_ConfigClockSource+0x1f0>
 80042d0:	4a60      	ldr	r2, [pc, #384]	@ (8004454 <HAL_TIM_ConfigClockSource+0x228>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	f000 8099 	beq.w	800440a <HAL_TIM_ConfigClockSource+0x1de>
 80042d8:	4a5e      	ldr	r2, [pc, #376]	@ (8004454 <HAL_TIM_ConfigClockSource+0x228>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	f200 809e 	bhi.w	800441c <HAL_TIM_ConfigClockSource+0x1f0>
 80042e0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80042e4:	f000 8091 	beq.w	800440a <HAL_TIM_ConfigClockSource+0x1de>
 80042e8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80042ec:	f200 8096 	bhi.w	800441c <HAL_TIM_ConfigClockSource+0x1f0>
 80042f0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80042f4:	f000 8089 	beq.w	800440a <HAL_TIM_ConfigClockSource+0x1de>
 80042f8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80042fc:	f200 808e 	bhi.w	800441c <HAL_TIM_ConfigClockSource+0x1f0>
 8004300:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004304:	d03e      	beq.n	8004384 <HAL_TIM_ConfigClockSource+0x158>
 8004306:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800430a:	f200 8087 	bhi.w	800441c <HAL_TIM_ConfigClockSource+0x1f0>
 800430e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004312:	f000 8086 	beq.w	8004422 <HAL_TIM_ConfigClockSource+0x1f6>
 8004316:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800431a:	d87f      	bhi.n	800441c <HAL_TIM_ConfigClockSource+0x1f0>
 800431c:	2b70      	cmp	r3, #112	@ 0x70
 800431e:	d01a      	beq.n	8004356 <HAL_TIM_ConfigClockSource+0x12a>
 8004320:	2b70      	cmp	r3, #112	@ 0x70
 8004322:	d87b      	bhi.n	800441c <HAL_TIM_ConfigClockSource+0x1f0>
 8004324:	2b60      	cmp	r3, #96	@ 0x60
 8004326:	d050      	beq.n	80043ca <HAL_TIM_ConfigClockSource+0x19e>
 8004328:	2b60      	cmp	r3, #96	@ 0x60
 800432a:	d877      	bhi.n	800441c <HAL_TIM_ConfigClockSource+0x1f0>
 800432c:	2b50      	cmp	r3, #80	@ 0x50
 800432e:	d03c      	beq.n	80043aa <HAL_TIM_ConfigClockSource+0x17e>
 8004330:	2b50      	cmp	r3, #80	@ 0x50
 8004332:	d873      	bhi.n	800441c <HAL_TIM_ConfigClockSource+0x1f0>
 8004334:	2b40      	cmp	r3, #64	@ 0x40
 8004336:	d058      	beq.n	80043ea <HAL_TIM_ConfigClockSource+0x1be>
 8004338:	2b40      	cmp	r3, #64	@ 0x40
 800433a:	d86f      	bhi.n	800441c <HAL_TIM_ConfigClockSource+0x1f0>
 800433c:	2b30      	cmp	r3, #48	@ 0x30
 800433e:	d064      	beq.n	800440a <HAL_TIM_ConfigClockSource+0x1de>
 8004340:	2b30      	cmp	r3, #48	@ 0x30
 8004342:	d86b      	bhi.n	800441c <HAL_TIM_ConfigClockSource+0x1f0>
 8004344:	2b20      	cmp	r3, #32
 8004346:	d060      	beq.n	800440a <HAL_TIM_ConfigClockSource+0x1de>
 8004348:	2b20      	cmp	r3, #32
 800434a:	d867      	bhi.n	800441c <HAL_TIM_ConfigClockSource+0x1f0>
 800434c:	2b00      	cmp	r3, #0
 800434e:	d05c      	beq.n	800440a <HAL_TIM_ConfigClockSource+0x1de>
 8004350:	2b10      	cmp	r3, #16
 8004352:	d05a      	beq.n	800440a <HAL_TIM_ConfigClockSource+0x1de>
 8004354:	e062      	b.n	800441c <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004366:	f000 fcf9 	bl	8004d5c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	689b      	ldr	r3, [r3, #8]
 8004370:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004372:	68bb      	ldr	r3, [r7, #8]
 8004374:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004378:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	68ba      	ldr	r2, [r7, #8]
 8004380:	609a      	str	r2, [r3, #8]
      break;
 8004382:	e04f      	b.n	8004424 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004394:	f000 fce2 	bl	8004d5c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	689a      	ldr	r2, [r3, #8]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80043a6:	609a      	str	r2, [r3, #8]
      break;
 80043a8:	e03c      	b.n	8004424 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80043b6:	461a      	mov	r2, r3
 80043b8:	f000 fc54 	bl	8004c64 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	2150      	movs	r1, #80	@ 0x50
 80043c2:	4618      	mov	r0, r3
 80043c4:	f000 fcad 	bl	8004d22 <TIM_ITRx_SetConfig>
      break;
 80043c8:	e02c      	b.n	8004424 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80043d6:	461a      	mov	r2, r3
 80043d8:	f000 fc73 	bl	8004cc2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	2160      	movs	r1, #96	@ 0x60
 80043e2:	4618      	mov	r0, r3
 80043e4:	f000 fc9d 	bl	8004d22 <TIM_ITRx_SetConfig>
      break;
 80043e8:	e01c      	b.n	8004424 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80043f6:	461a      	mov	r2, r3
 80043f8:	f000 fc34 	bl	8004c64 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	2140      	movs	r1, #64	@ 0x40
 8004402:	4618      	mov	r0, r3
 8004404:	f000 fc8d 	bl	8004d22 <TIM_ITRx_SetConfig>
      break;
 8004408:	e00c      	b.n	8004424 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681a      	ldr	r2, [r3, #0]
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4619      	mov	r1, r3
 8004414:	4610      	mov	r0, r2
 8004416:	f000 fc84 	bl	8004d22 <TIM_ITRx_SetConfig>
      break;
 800441a:	e003      	b.n	8004424 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 800441c:	2301      	movs	r3, #1
 800441e:	73fb      	strb	r3, [r7, #15]
      break;
 8004420:	e000      	b.n	8004424 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8004422:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2201      	movs	r2, #1
 8004428:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2200      	movs	r2, #0
 8004430:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004434:	7bfb      	ldrb	r3, [r7, #15]
}
 8004436:	4618      	mov	r0, r3
 8004438:	3710      	adds	r7, #16
 800443a:	46bd      	mov	sp, r7
 800443c:	bd80      	pop	{r7, pc}
 800443e:	bf00      	nop
 8004440:	00100070 	.word	0x00100070
 8004444:	00100060 	.word	0x00100060
 8004448:	00100050 	.word	0x00100050
 800444c:	00100040 	.word	0x00100040
 8004450:	00100030 	.word	0x00100030
 8004454:	00100020 	.word	0x00100020

08004458 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004458:	b480      	push	{r7}
 800445a:	b083      	sub	sp, #12
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004460:	bf00      	nop
 8004462:	370c      	adds	r7, #12
 8004464:	46bd      	mov	sp, r7
 8004466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446a:	4770      	bx	lr

0800446c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800446c:	b480      	push	{r7}
 800446e:	b083      	sub	sp, #12
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004474:	bf00      	nop
 8004476:	370c      	adds	r7, #12
 8004478:	46bd      	mov	sp, r7
 800447a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447e:	4770      	bx	lr

08004480 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004480:	b480      	push	{r7}
 8004482:	b083      	sub	sp, #12
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004488:	bf00      	nop
 800448a:	370c      	adds	r7, #12
 800448c:	46bd      	mov	sp, r7
 800448e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004492:	4770      	bx	lr

08004494 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004494:	b480      	push	{r7}
 8004496:	b083      	sub	sp, #12
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800449c:	bf00      	nop
 800449e:	370c      	adds	r7, #12
 80044a0:	46bd      	mov	sp, r7
 80044a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a6:	4770      	bx	lr

080044a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80044a8:	b480      	push	{r7}
 80044aa:	b085      	sub	sp, #20
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
 80044b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	4a4c      	ldr	r2, [pc, #304]	@ (80045ec <TIM_Base_SetConfig+0x144>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d017      	beq.n	80044f0 <TIM_Base_SetConfig+0x48>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80044c6:	d013      	beq.n	80044f0 <TIM_Base_SetConfig+0x48>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	4a49      	ldr	r2, [pc, #292]	@ (80045f0 <TIM_Base_SetConfig+0x148>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d00f      	beq.n	80044f0 <TIM_Base_SetConfig+0x48>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	4a48      	ldr	r2, [pc, #288]	@ (80045f4 <TIM_Base_SetConfig+0x14c>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d00b      	beq.n	80044f0 <TIM_Base_SetConfig+0x48>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	4a47      	ldr	r2, [pc, #284]	@ (80045f8 <TIM_Base_SetConfig+0x150>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	d007      	beq.n	80044f0 <TIM_Base_SetConfig+0x48>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	4a46      	ldr	r2, [pc, #280]	@ (80045fc <TIM_Base_SetConfig+0x154>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d003      	beq.n	80044f0 <TIM_Base_SetConfig+0x48>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	4a45      	ldr	r2, [pc, #276]	@ (8004600 <TIM_Base_SetConfig+0x158>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d108      	bne.n	8004502 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	68fa      	ldr	r2, [r7, #12]
 80044fe:	4313      	orrs	r3, r2
 8004500:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	4a39      	ldr	r2, [pc, #228]	@ (80045ec <TIM_Base_SetConfig+0x144>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d023      	beq.n	8004552 <TIM_Base_SetConfig+0xaa>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004510:	d01f      	beq.n	8004552 <TIM_Base_SetConfig+0xaa>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	4a36      	ldr	r2, [pc, #216]	@ (80045f0 <TIM_Base_SetConfig+0x148>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d01b      	beq.n	8004552 <TIM_Base_SetConfig+0xaa>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	4a35      	ldr	r2, [pc, #212]	@ (80045f4 <TIM_Base_SetConfig+0x14c>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d017      	beq.n	8004552 <TIM_Base_SetConfig+0xaa>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	4a34      	ldr	r2, [pc, #208]	@ (80045f8 <TIM_Base_SetConfig+0x150>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d013      	beq.n	8004552 <TIM_Base_SetConfig+0xaa>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	4a33      	ldr	r2, [pc, #204]	@ (80045fc <TIM_Base_SetConfig+0x154>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d00f      	beq.n	8004552 <TIM_Base_SetConfig+0xaa>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	4a33      	ldr	r2, [pc, #204]	@ (8004604 <TIM_Base_SetConfig+0x15c>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d00b      	beq.n	8004552 <TIM_Base_SetConfig+0xaa>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	4a32      	ldr	r2, [pc, #200]	@ (8004608 <TIM_Base_SetConfig+0x160>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d007      	beq.n	8004552 <TIM_Base_SetConfig+0xaa>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	4a31      	ldr	r2, [pc, #196]	@ (800460c <TIM_Base_SetConfig+0x164>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d003      	beq.n	8004552 <TIM_Base_SetConfig+0xaa>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	4a2c      	ldr	r2, [pc, #176]	@ (8004600 <TIM_Base_SetConfig+0x158>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d108      	bne.n	8004564 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004558:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	68db      	ldr	r3, [r3, #12]
 800455e:	68fa      	ldr	r2, [r7, #12]
 8004560:	4313      	orrs	r3, r2
 8004562:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	695b      	ldr	r3, [r3, #20]
 800456e:	4313      	orrs	r3, r2
 8004570:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	68fa      	ldr	r2, [r7, #12]
 8004576:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	689a      	ldr	r2, [r3, #8]
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	681a      	ldr	r2, [r3, #0]
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	4a18      	ldr	r2, [pc, #96]	@ (80045ec <TIM_Base_SetConfig+0x144>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d013      	beq.n	80045b8 <TIM_Base_SetConfig+0x110>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	4a1a      	ldr	r2, [pc, #104]	@ (80045fc <TIM_Base_SetConfig+0x154>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d00f      	beq.n	80045b8 <TIM_Base_SetConfig+0x110>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	4a1a      	ldr	r2, [pc, #104]	@ (8004604 <TIM_Base_SetConfig+0x15c>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d00b      	beq.n	80045b8 <TIM_Base_SetConfig+0x110>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	4a19      	ldr	r2, [pc, #100]	@ (8004608 <TIM_Base_SetConfig+0x160>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d007      	beq.n	80045b8 <TIM_Base_SetConfig+0x110>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	4a18      	ldr	r2, [pc, #96]	@ (800460c <TIM_Base_SetConfig+0x164>)
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d003      	beq.n	80045b8 <TIM_Base_SetConfig+0x110>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	4a13      	ldr	r2, [pc, #76]	@ (8004600 <TIM_Base_SetConfig+0x158>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d103      	bne.n	80045c0 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	691a      	ldr	r2, [r3, #16]
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2201      	movs	r2, #1
 80045c4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	691b      	ldr	r3, [r3, #16]
 80045ca:	f003 0301 	and.w	r3, r3, #1
 80045ce:	2b01      	cmp	r3, #1
 80045d0:	d105      	bne.n	80045de <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	691b      	ldr	r3, [r3, #16]
 80045d6:	f023 0201 	bic.w	r2, r3, #1
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	611a      	str	r2, [r3, #16]
  }
}
 80045de:	bf00      	nop
 80045e0:	3714      	adds	r7, #20
 80045e2:	46bd      	mov	sp, r7
 80045e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e8:	4770      	bx	lr
 80045ea:	bf00      	nop
 80045ec:	40012c00 	.word	0x40012c00
 80045f0:	40000400 	.word	0x40000400
 80045f4:	40000800 	.word	0x40000800
 80045f8:	40000c00 	.word	0x40000c00
 80045fc:	40013400 	.word	0x40013400
 8004600:	40015000 	.word	0x40015000
 8004604:	40014000 	.word	0x40014000
 8004608:	40014400 	.word	0x40014400
 800460c:	40014800 	.word	0x40014800

08004610 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004610:	b480      	push	{r7}
 8004612:	b087      	sub	sp, #28
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
 8004618:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6a1b      	ldr	r3, [r3, #32]
 800461e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6a1b      	ldr	r3, [r3, #32]
 8004624:	f023 0201 	bic.w	r2, r3, #1
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	699b      	ldr	r3, [r3, #24]
 8004636:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800463e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004642:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	f023 0303 	bic.w	r3, r3, #3
 800464a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	68fa      	ldr	r2, [r7, #12]
 8004652:	4313      	orrs	r3, r2
 8004654:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004656:	697b      	ldr	r3, [r7, #20]
 8004658:	f023 0302 	bic.w	r3, r3, #2
 800465c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	689b      	ldr	r3, [r3, #8]
 8004662:	697a      	ldr	r2, [r7, #20]
 8004664:	4313      	orrs	r3, r2
 8004666:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	4a30      	ldr	r2, [pc, #192]	@ (800472c <TIM_OC1_SetConfig+0x11c>)
 800466c:	4293      	cmp	r3, r2
 800466e:	d013      	beq.n	8004698 <TIM_OC1_SetConfig+0x88>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	4a2f      	ldr	r2, [pc, #188]	@ (8004730 <TIM_OC1_SetConfig+0x120>)
 8004674:	4293      	cmp	r3, r2
 8004676:	d00f      	beq.n	8004698 <TIM_OC1_SetConfig+0x88>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	4a2e      	ldr	r2, [pc, #184]	@ (8004734 <TIM_OC1_SetConfig+0x124>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d00b      	beq.n	8004698 <TIM_OC1_SetConfig+0x88>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	4a2d      	ldr	r2, [pc, #180]	@ (8004738 <TIM_OC1_SetConfig+0x128>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d007      	beq.n	8004698 <TIM_OC1_SetConfig+0x88>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	4a2c      	ldr	r2, [pc, #176]	@ (800473c <TIM_OC1_SetConfig+0x12c>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d003      	beq.n	8004698 <TIM_OC1_SetConfig+0x88>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	4a2b      	ldr	r2, [pc, #172]	@ (8004740 <TIM_OC1_SetConfig+0x130>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d10c      	bne.n	80046b2 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004698:	697b      	ldr	r3, [r7, #20]
 800469a:	f023 0308 	bic.w	r3, r3, #8
 800469e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	68db      	ldr	r3, [r3, #12]
 80046a4:	697a      	ldr	r2, [r7, #20]
 80046a6:	4313      	orrs	r3, r2
 80046a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80046aa:	697b      	ldr	r3, [r7, #20]
 80046ac:	f023 0304 	bic.w	r3, r3, #4
 80046b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	4a1d      	ldr	r2, [pc, #116]	@ (800472c <TIM_OC1_SetConfig+0x11c>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d013      	beq.n	80046e2 <TIM_OC1_SetConfig+0xd2>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	4a1c      	ldr	r2, [pc, #112]	@ (8004730 <TIM_OC1_SetConfig+0x120>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d00f      	beq.n	80046e2 <TIM_OC1_SetConfig+0xd2>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	4a1b      	ldr	r2, [pc, #108]	@ (8004734 <TIM_OC1_SetConfig+0x124>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d00b      	beq.n	80046e2 <TIM_OC1_SetConfig+0xd2>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	4a1a      	ldr	r2, [pc, #104]	@ (8004738 <TIM_OC1_SetConfig+0x128>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d007      	beq.n	80046e2 <TIM_OC1_SetConfig+0xd2>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	4a19      	ldr	r2, [pc, #100]	@ (800473c <TIM_OC1_SetConfig+0x12c>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d003      	beq.n	80046e2 <TIM_OC1_SetConfig+0xd2>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	4a18      	ldr	r2, [pc, #96]	@ (8004740 <TIM_OC1_SetConfig+0x130>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d111      	bne.n	8004706 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80046e2:	693b      	ldr	r3, [r7, #16]
 80046e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80046e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80046ea:	693b      	ldr	r3, [r7, #16]
 80046ec:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80046f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	695b      	ldr	r3, [r3, #20]
 80046f6:	693a      	ldr	r2, [r7, #16]
 80046f8:	4313      	orrs	r3, r2
 80046fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	699b      	ldr	r3, [r3, #24]
 8004700:	693a      	ldr	r2, [r7, #16]
 8004702:	4313      	orrs	r3, r2
 8004704:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	693a      	ldr	r2, [r7, #16]
 800470a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	68fa      	ldr	r2, [r7, #12]
 8004710:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	685a      	ldr	r2, [r3, #4]
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	697a      	ldr	r2, [r7, #20]
 800471e:	621a      	str	r2, [r3, #32]
}
 8004720:	bf00      	nop
 8004722:	371c      	adds	r7, #28
 8004724:	46bd      	mov	sp, r7
 8004726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472a:	4770      	bx	lr
 800472c:	40012c00 	.word	0x40012c00
 8004730:	40013400 	.word	0x40013400
 8004734:	40014000 	.word	0x40014000
 8004738:	40014400 	.word	0x40014400
 800473c:	40014800 	.word	0x40014800
 8004740:	40015000 	.word	0x40015000

08004744 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004744:	b480      	push	{r7}
 8004746:	b087      	sub	sp, #28
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
 800474c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6a1b      	ldr	r3, [r3, #32]
 8004752:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6a1b      	ldr	r3, [r3, #32]
 8004758:	f023 0210 	bic.w	r2, r3, #16
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	699b      	ldr	r3, [r3, #24]
 800476a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004772:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004776:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800477e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	021b      	lsls	r3, r3, #8
 8004786:	68fa      	ldr	r2, [r7, #12]
 8004788:	4313      	orrs	r3, r2
 800478a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800478c:	697b      	ldr	r3, [r7, #20]
 800478e:	f023 0320 	bic.w	r3, r3, #32
 8004792:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	689b      	ldr	r3, [r3, #8]
 8004798:	011b      	lsls	r3, r3, #4
 800479a:	697a      	ldr	r2, [r7, #20]
 800479c:	4313      	orrs	r3, r2
 800479e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	4a2c      	ldr	r2, [pc, #176]	@ (8004854 <TIM_OC2_SetConfig+0x110>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d007      	beq.n	80047b8 <TIM_OC2_SetConfig+0x74>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	4a2b      	ldr	r2, [pc, #172]	@ (8004858 <TIM_OC2_SetConfig+0x114>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d003      	beq.n	80047b8 <TIM_OC2_SetConfig+0x74>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	4a2a      	ldr	r2, [pc, #168]	@ (800485c <TIM_OC2_SetConfig+0x118>)
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d10d      	bne.n	80047d4 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80047b8:	697b      	ldr	r3, [r7, #20]
 80047ba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80047be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	68db      	ldr	r3, [r3, #12]
 80047c4:	011b      	lsls	r3, r3, #4
 80047c6:	697a      	ldr	r2, [r7, #20]
 80047c8:	4313      	orrs	r3, r2
 80047ca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80047cc:	697b      	ldr	r3, [r7, #20]
 80047ce:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80047d2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	4a1f      	ldr	r2, [pc, #124]	@ (8004854 <TIM_OC2_SetConfig+0x110>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d013      	beq.n	8004804 <TIM_OC2_SetConfig+0xc0>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	4a1e      	ldr	r2, [pc, #120]	@ (8004858 <TIM_OC2_SetConfig+0x114>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d00f      	beq.n	8004804 <TIM_OC2_SetConfig+0xc0>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	4a1e      	ldr	r2, [pc, #120]	@ (8004860 <TIM_OC2_SetConfig+0x11c>)
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d00b      	beq.n	8004804 <TIM_OC2_SetConfig+0xc0>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	4a1d      	ldr	r2, [pc, #116]	@ (8004864 <TIM_OC2_SetConfig+0x120>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d007      	beq.n	8004804 <TIM_OC2_SetConfig+0xc0>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	4a1c      	ldr	r2, [pc, #112]	@ (8004868 <TIM_OC2_SetConfig+0x124>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d003      	beq.n	8004804 <TIM_OC2_SetConfig+0xc0>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	4a17      	ldr	r2, [pc, #92]	@ (800485c <TIM_OC2_SetConfig+0x118>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d113      	bne.n	800482c <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004804:	693b      	ldr	r3, [r7, #16]
 8004806:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800480a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800480c:	693b      	ldr	r3, [r7, #16]
 800480e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004812:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	695b      	ldr	r3, [r3, #20]
 8004818:	009b      	lsls	r3, r3, #2
 800481a:	693a      	ldr	r2, [r7, #16]
 800481c:	4313      	orrs	r3, r2
 800481e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	699b      	ldr	r3, [r3, #24]
 8004824:	009b      	lsls	r3, r3, #2
 8004826:	693a      	ldr	r2, [r7, #16]
 8004828:	4313      	orrs	r3, r2
 800482a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	693a      	ldr	r2, [r7, #16]
 8004830:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	68fa      	ldr	r2, [r7, #12]
 8004836:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	685a      	ldr	r2, [r3, #4]
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	697a      	ldr	r2, [r7, #20]
 8004844:	621a      	str	r2, [r3, #32]
}
 8004846:	bf00      	nop
 8004848:	371c      	adds	r7, #28
 800484a:	46bd      	mov	sp, r7
 800484c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004850:	4770      	bx	lr
 8004852:	bf00      	nop
 8004854:	40012c00 	.word	0x40012c00
 8004858:	40013400 	.word	0x40013400
 800485c:	40015000 	.word	0x40015000
 8004860:	40014000 	.word	0x40014000
 8004864:	40014400 	.word	0x40014400
 8004868:	40014800 	.word	0x40014800

0800486c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800486c:	b480      	push	{r7}
 800486e:	b087      	sub	sp, #28
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
 8004874:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6a1b      	ldr	r3, [r3, #32]
 800487a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6a1b      	ldr	r3, [r3, #32]
 8004880:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	685b      	ldr	r3, [r3, #4]
 800488c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	69db      	ldr	r3, [r3, #28]
 8004892:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800489a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800489e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	f023 0303 	bic.w	r3, r3, #3
 80048a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	68fa      	ldr	r2, [r7, #12]
 80048ae:	4313      	orrs	r3, r2
 80048b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80048b2:	697b      	ldr	r3, [r7, #20]
 80048b4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80048b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	689b      	ldr	r3, [r3, #8]
 80048be:	021b      	lsls	r3, r3, #8
 80048c0:	697a      	ldr	r2, [r7, #20]
 80048c2:	4313      	orrs	r3, r2
 80048c4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	4a2b      	ldr	r2, [pc, #172]	@ (8004978 <TIM_OC3_SetConfig+0x10c>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d007      	beq.n	80048de <TIM_OC3_SetConfig+0x72>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	4a2a      	ldr	r2, [pc, #168]	@ (800497c <TIM_OC3_SetConfig+0x110>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d003      	beq.n	80048de <TIM_OC3_SetConfig+0x72>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	4a29      	ldr	r2, [pc, #164]	@ (8004980 <TIM_OC3_SetConfig+0x114>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d10d      	bne.n	80048fa <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80048de:	697b      	ldr	r3, [r7, #20]
 80048e0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80048e4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	68db      	ldr	r3, [r3, #12]
 80048ea:	021b      	lsls	r3, r3, #8
 80048ec:	697a      	ldr	r2, [r7, #20]
 80048ee:	4313      	orrs	r3, r2
 80048f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80048f2:	697b      	ldr	r3, [r7, #20]
 80048f4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80048f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	4a1e      	ldr	r2, [pc, #120]	@ (8004978 <TIM_OC3_SetConfig+0x10c>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d013      	beq.n	800492a <TIM_OC3_SetConfig+0xbe>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	4a1d      	ldr	r2, [pc, #116]	@ (800497c <TIM_OC3_SetConfig+0x110>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d00f      	beq.n	800492a <TIM_OC3_SetConfig+0xbe>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	4a1d      	ldr	r2, [pc, #116]	@ (8004984 <TIM_OC3_SetConfig+0x118>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d00b      	beq.n	800492a <TIM_OC3_SetConfig+0xbe>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	4a1c      	ldr	r2, [pc, #112]	@ (8004988 <TIM_OC3_SetConfig+0x11c>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d007      	beq.n	800492a <TIM_OC3_SetConfig+0xbe>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	4a1b      	ldr	r2, [pc, #108]	@ (800498c <TIM_OC3_SetConfig+0x120>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d003      	beq.n	800492a <TIM_OC3_SetConfig+0xbe>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	4a16      	ldr	r2, [pc, #88]	@ (8004980 <TIM_OC3_SetConfig+0x114>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d113      	bne.n	8004952 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800492a:	693b      	ldr	r3, [r7, #16]
 800492c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004930:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004932:	693b      	ldr	r3, [r7, #16]
 8004934:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004938:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	695b      	ldr	r3, [r3, #20]
 800493e:	011b      	lsls	r3, r3, #4
 8004940:	693a      	ldr	r2, [r7, #16]
 8004942:	4313      	orrs	r3, r2
 8004944:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	699b      	ldr	r3, [r3, #24]
 800494a:	011b      	lsls	r3, r3, #4
 800494c:	693a      	ldr	r2, [r7, #16]
 800494e:	4313      	orrs	r3, r2
 8004950:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	693a      	ldr	r2, [r7, #16]
 8004956:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	68fa      	ldr	r2, [r7, #12]
 800495c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	685a      	ldr	r2, [r3, #4]
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	697a      	ldr	r2, [r7, #20]
 800496a:	621a      	str	r2, [r3, #32]
}
 800496c:	bf00      	nop
 800496e:	371c      	adds	r7, #28
 8004970:	46bd      	mov	sp, r7
 8004972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004976:	4770      	bx	lr
 8004978:	40012c00 	.word	0x40012c00
 800497c:	40013400 	.word	0x40013400
 8004980:	40015000 	.word	0x40015000
 8004984:	40014000 	.word	0x40014000
 8004988:	40014400 	.word	0x40014400
 800498c:	40014800 	.word	0x40014800

08004990 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004990:	b480      	push	{r7}
 8004992:	b087      	sub	sp, #28
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
 8004998:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6a1b      	ldr	r3, [r3, #32]
 800499e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6a1b      	ldr	r3, [r3, #32]
 80049a4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	685b      	ldr	r3, [r3, #4]
 80049b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	69db      	ldr	r3, [r3, #28]
 80049b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80049be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80049c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80049ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	021b      	lsls	r3, r3, #8
 80049d2:	68fa      	ldr	r2, [r7, #12]
 80049d4:	4313      	orrs	r3, r2
 80049d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80049d8:	697b      	ldr	r3, [r7, #20]
 80049da:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80049de:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	689b      	ldr	r3, [r3, #8]
 80049e4:	031b      	lsls	r3, r3, #12
 80049e6:	697a      	ldr	r2, [r7, #20]
 80049e8:	4313      	orrs	r3, r2
 80049ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	4a2c      	ldr	r2, [pc, #176]	@ (8004aa0 <TIM_OC4_SetConfig+0x110>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d007      	beq.n	8004a04 <TIM_OC4_SetConfig+0x74>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	4a2b      	ldr	r2, [pc, #172]	@ (8004aa4 <TIM_OC4_SetConfig+0x114>)
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d003      	beq.n	8004a04 <TIM_OC4_SetConfig+0x74>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	4a2a      	ldr	r2, [pc, #168]	@ (8004aa8 <TIM_OC4_SetConfig+0x118>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d10d      	bne.n	8004a20 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8004a04:	697b      	ldr	r3, [r7, #20]
 8004a06:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004a0a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	68db      	ldr	r3, [r3, #12]
 8004a10:	031b      	lsls	r3, r3, #12
 8004a12:	697a      	ldr	r2, [r7, #20]
 8004a14:	4313      	orrs	r3, r2
 8004a16:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8004a18:	697b      	ldr	r3, [r7, #20]
 8004a1a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004a1e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	4a1f      	ldr	r2, [pc, #124]	@ (8004aa0 <TIM_OC4_SetConfig+0x110>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d013      	beq.n	8004a50 <TIM_OC4_SetConfig+0xc0>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	4a1e      	ldr	r2, [pc, #120]	@ (8004aa4 <TIM_OC4_SetConfig+0x114>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d00f      	beq.n	8004a50 <TIM_OC4_SetConfig+0xc0>
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	4a1e      	ldr	r2, [pc, #120]	@ (8004aac <TIM_OC4_SetConfig+0x11c>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d00b      	beq.n	8004a50 <TIM_OC4_SetConfig+0xc0>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	4a1d      	ldr	r2, [pc, #116]	@ (8004ab0 <TIM_OC4_SetConfig+0x120>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d007      	beq.n	8004a50 <TIM_OC4_SetConfig+0xc0>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	4a1c      	ldr	r2, [pc, #112]	@ (8004ab4 <TIM_OC4_SetConfig+0x124>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d003      	beq.n	8004a50 <TIM_OC4_SetConfig+0xc0>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	4a17      	ldr	r2, [pc, #92]	@ (8004aa8 <TIM_OC4_SetConfig+0x118>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d113      	bne.n	8004a78 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004a50:	693b      	ldr	r3, [r7, #16]
 8004a52:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004a56:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8004a58:	693b      	ldr	r3, [r7, #16]
 8004a5a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004a5e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	695b      	ldr	r3, [r3, #20]
 8004a64:	019b      	lsls	r3, r3, #6
 8004a66:	693a      	ldr	r2, [r7, #16]
 8004a68:	4313      	orrs	r3, r2
 8004a6a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	699b      	ldr	r3, [r3, #24]
 8004a70:	019b      	lsls	r3, r3, #6
 8004a72:	693a      	ldr	r2, [r7, #16]
 8004a74:	4313      	orrs	r3, r2
 8004a76:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	693a      	ldr	r2, [r7, #16]
 8004a7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	68fa      	ldr	r2, [r7, #12]
 8004a82:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	685a      	ldr	r2, [r3, #4]
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	697a      	ldr	r2, [r7, #20]
 8004a90:	621a      	str	r2, [r3, #32]
}
 8004a92:	bf00      	nop
 8004a94:	371c      	adds	r7, #28
 8004a96:	46bd      	mov	sp, r7
 8004a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9c:	4770      	bx	lr
 8004a9e:	bf00      	nop
 8004aa0:	40012c00 	.word	0x40012c00
 8004aa4:	40013400 	.word	0x40013400
 8004aa8:	40015000 	.word	0x40015000
 8004aac:	40014000 	.word	0x40014000
 8004ab0:	40014400 	.word	0x40014400
 8004ab4:	40014800 	.word	0x40014800

08004ab8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004ab8:	b480      	push	{r7}
 8004aba:	b087      	sub	sp, #28
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
 8004ac0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6a1b      	ldr	r3, [r3, #32]
 8004ac6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6a1b      	ldr	r3, [r3, #32]
 8004acc:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	685b      	ldr	r3, [r3, #4]
 8004ad8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ade:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004ae6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004aea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	68fa      	ldr	r2, [r7, #12]
 8004af2:	4313      	orrs	r3, r2
 8004af4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004af6:	693b      	ldr	r3, [r7, #16]
 8004af8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8004afc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	689b      	ldr	r3, [r3, #8]
 8004b02:	041b      	lsls	r3, r3, #16
 8004b04:	693a      	ldr	r2, [r7, #16]
 8004b06:	4313      	orrs	r3, r2
 8004b08:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	4a19      	ldr	r2, [pc, #100]	@ (8004b74 <TIM_OC5_SetConfig+0xbc>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d013      	beq.n	8004b3a <TIM_OC5_SetConfig+0x82>
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	4a18      	ldr	r2, [pc, #96]	@ (8004b78 <TIM_OC5_SetConfig+0xc0>)
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d00f      	beq.n	8004b3a <TIM_OC5_SetConfig+0x82>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	4a17      	ldr	r2, [pc, #92]	@ (8004b7c <TIM_OC5_SetConfig+0xc4>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d00b      	beq.n	8004b3a <TIM_OC5_SetConfig+0x82>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	4a16      	ldr	r2, [pc, #88]	@ (8004b80 <TIM_OC5_SetConfig+0xc8>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d007      	beq.n	8004b3a <TIM_OC5_SetConfig+0x82>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	4a15      	ldr	r2, [pc, #84]	@ (8004b84 <TIM_OC5_SetConfig+0xcc>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d003      	beq.n	8004b3a <TIM_OC5_SetConfig+0x82>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	4a14      	ldr	r2, [pc, #80]	@ (8004b88 <TIM_OC5_SetConfig+0xd0>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d109      	bne.n	8004b4e <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004b3a:	697b      	ldr	r3, [r7, #20]
 8004b3c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004b40:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	695b      	ldr	r3, [r3, #20]
 8004b46:	021b      	lsls	r3, r3, #8
 8004b48:	697a      	ldr	r2, [r7, #20]
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	697a      	ldr	r2, [r7, #20]
 8004b52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	68fa      	ldr	r2, [r7, #12]
 8004b58:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	685a      	ldr	r2, [r3, #4]
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	693a      	ldr	r2, [r7, #16]
 8004b66:	621a      	str	r2, [r3, #32]
}
 8004b68:	bf00      	nop
 8004b6a:	371c      	adds	r7, #28
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b72:	4770      	bx	lr
 8004b74:	40012c00 	.word	0x40012c00
 8004b78:	40013400 	.word	0x40013400
 8004b7c:	40014000 	.word	0x40014000
 8004b80:	40014400 	.word	0x40014400
 8004b84:	40014800 	.word	0x40014800
 8004b88:	40015000 	.word	0x40015000

08004b8c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	b087      	sub	sp, #28
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
 8004b94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6a1b      	ldr	r3, [r3, #32]
 8004b9a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6a1b      	ldr	r3, [r3, #32]
 8004ba0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	685b      	ldr	r3, [r3, #4]
 8004bac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004bb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004bba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004bbe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	021b      	lsls	r3, r3, #8
 8004bc6:	68fa      	ldr	r2, [r7, #12]
 8004bc8:	4313      	orrs	r3, r2
 8004bca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004bcc:	693b      	ldr	r3, [r7, #16]
 8004bce:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004bd2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	689b      	ldr	r3, [r3, #8]
 8004bd8:	051b      	lsls	r3, r3, #20
 8004bda:	693a      	ldr	r2, [r7, #16]
 8004bdc:	4313      	orrs	r3, r2
 8004bde:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	4a1a      	ldr	r2, [pc, #104]	@ (8004c4c <TIM_OC6_SetConfig+0xc0>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d013      	beq.n	8004c10 <TIM_OC6_SetConfig+0x84>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	4a19      	ldr	r2, [pc, #100]	@ (8004c50 <TIM_OC6_SetConfig+0xc4>)
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d00f      	beq.n	8004c10 <TIM_OC6_SetConfig+0x84>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	4a18      	ldr	r2, [pc, #96]	@ (8004c54 <TIM_OC6_SetConfig+0xc8>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d00b      	beq.n	8004c10 <TIM_OC6_SetConfig+0x84>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	4a17      	ldr	r2, [pc, #92]	@ (8004c58 <TIM_OC6_SetConfig+0xcc>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d007      	beq.n	8004c10 <TIM_OC6_SetConfig+0x84>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	4a16      	ldr	r2, [pc, #88]	@ (8004c5c <TIM_OC6_SetConfig+0xd0>)
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d003      	beq.n	8004c10 <TIM_OC6_SetConfig+0x84>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	4a15      	ldr	r2, [pc, #84]	@ (8004c60 <TIM_OC6_SetConfig+0xd4>)
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d109      	bne.n	8004c24 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004c10:	697b      	ldr	r3, [r7, #20]
 8004c12:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004c16:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	695b      	ldr	r3, [r3, #20]
 8004c1c:	029b      	lsls	r3, r3, #10
 8004c1e:	697a      	ldr	r2, [r7, #20]
 8004c20:	4313      	orrs	r3, r2
 8004c22:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	697a      	ldr	r2, [r7, #20]
 8004c28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	68fa      	ldr	r2, [r7, #12]
 8004c2e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	685a      	ldr	r2, [r3, #4]
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	693a      	ldr	r2, [r7, #16]
 8004c3c:	621a      	str	r2, [r3, #32]
}
 8004c3e:	bf00      	nop
 8004c40:	371c      	adds	r7, #28
 8004c42:	46bd      	mov	sp, r7
 8004c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c48:	4770      	bx	lr
 8004c4a:	bf00      	nop
 8004c4c:	40012c00 	.word	0x40012c00
 8004c50:	40013400 	.word	0x40013400
 8004c54:	40014000 	.word	0x40014000
 8004c58:	40014400 	.word	0x40014400
 8004c5c:	40014800 	.word	0x40014800
 8004c60:	40015000 	.word	0x40015000

08004c64 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c64:	b480      	push	{r7}
 8004c66:	b087      	sub	sp, #28
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	60f8      	str	r0, [r7, #12]
 8004c6c:	60b9      	str	r1, [r7, #8]
 8004c6e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	6a1b      	ldr	r3, [r3, #32]
 8004c74:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	6a1b      	ldr	r3, [r3, #32]
 8004c7a:	f023 0201 	bic.w	r2, r3, #1
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	699b      	ldr	r3, [r3, #24]
 8004c86:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004c88:	693b      	ldr	r3, [r7, #16]
 8004c8a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004c8e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	011b      	lsls	r3, r3, #4
 8004c94:	693a      	ldr	r2, [r7, #16]
 8004c96:	4313      	orrs	r3, r2
 8004c98:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004c9a:	697b      	ldr	r3, [r7, #20]
 8004c9c:	f023 030a 	bic.w	r3, r3, #10
 8004ca0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004ca2:	697a      	ldr	r2, [r7, #20]
 8004ca4:	68bb      	ldr	r3, [r7, #8]
 8004ca6:	4313      	orrs	r3, r2
 8004ca8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	693a      	ldr	r2, [r7, #16]
 8004cae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	697a      	ldr	r2, [r7, #20]
 8004cb4:	621a      	str	r2, [r3, #32]
}
 8004cb6:	bf00      	nop
 8004cb8:	371c      	adds	r7, #28
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc0:	4770      	bx	lr

08004cc2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004cc2:	b480      	push	{r7}
 8004cc4:	b087      	sub	sp, #28
 8004cc6:	af00      	add	r7, sp, #0
 8004cc8:	60f8      	str	r0, [r7, #12]
 8004cca:	60b9      	str	r1, [r7, #8]
 8004ccc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	6a1b      	ldr	r3, [r3, #32]
 8004cd2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	6a1b      	ldr	r3, [r3, #32]
 8004cd8:	f023 0210 	bic.w	r2, r3, #16
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	699b      	ldr	r3, [r3, #24]
 8004ce4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004ce6:	693b      	ldr	r3, [r7, #16]
 8004ce8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004cec:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	031b      	lsls	r3, r3, #12
 8004cf2:	693a      	ldr	r2, [r7, #16]
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004cf8:	697b      	ldr	r3, [r7, #20]
 8004cfa:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004cfe:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004d00:	68bb      	ldr	r3, [r7, #8]
 8004d02:	011b      	lsls	r3, r3, #4
 8004d04:	697a      	ldr	r2, [r7, #20]
 8004d06:	4313      	orrs	r3, r2
 8004d08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	693a      	ldr	r2, [r7, #16]
 8004d0e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	697a      	ldr	r2, [r7, #20]
 8004d14:	621a      	str	r2, [r3, #32]
}
 8004d16:	bf00      	nop
 8004d18:	371c      	adds	r7, #28
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d20:	4770      	bx	lr

08004d22 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004d22:	b480      	push	{r7}
 8004d24:	b085      	sub	sp, #20
 8004d26:	af00      	add	r7, sp, #0
 8004d28:	6078      	str	r0, [r7, #4]
 8004d2a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	689b      	ldr	r3, [r3, #8]
 8004d30:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8004d38:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d3c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004d3e:	683a      	ldr	r2, [r7, #0]
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	4313      	orrs	r3, r2
 8004d44:	f043 0307 	orr.w	r3, r3, #7
 8004d48:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	68fa      	ldr	r2, [r7, #12]
 8004d4e:	609a      	str	r2, [r3, #8]
}
 8004d50:	bf00      	nop
 8004d52:	3714      	adds	r7, #20
 8004d54:	46bd      	mov	sp, r7
 8004d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5a:	4770      	bx	lr

08004d5c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004d5c:	b480      	push	{r7}
 8004d5e:	b087      	sub	sp, #28
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	60f8      	str	r0, [r7, #12]
 8004d64:	60b9      	str	r1, [r7, #8]
 8004d66:	607a      	str	r2, [r7, #4]
 8004d68:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	689b      	ldr	r3, [r3, #8]
 8004d6e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d70:	697b      	ldr	r3, [r7, #20]
 8004d72:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004d76:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	021a      	lsls	r2, r3, #8
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	431a      	orrs	r2, r3
 8004d80:	68bb      	ldr	r3, [r7, #8]
 8004d82:	4313      	orrs	r3, r2
 8004d84:	697a      	ldr	r2, [r7, #20]
 8004d86:	4313      	orrs	r3, r2
 8004d88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	697a      	ldr	r2, [r7, #20]
 8004d8e:	609a      	str	r2, [r3, #8]
}
 8004d90:	bf00      	nop
 8004d92:	371c      	adds	r7, #28
 8004d94:	46bd      	mov	sp, r7
 8004d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9a:	4770      	bx	lr

08004d9c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	b087      	sub	sp, #28
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	60f8      	str	r0, [r7, #12]
 8004da4:	60b9      	str	r1, [r7, #8]
 8004da6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004da8:	68bb      	ldr	r3, [r7, #8]
 8004daa:	f003 031f 	and.w	r3, r3, #31
 8004dae:	2201      	movs	r2, #1
 8004db0:	fa02 f303 	lsl.w	r3, r2, r3
 8004db4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	6a1a      	ldr	r2, [r3, #32]
 8004dba:	697b      	ldr	r3, [r7, #20]
 8004dbc:	43db      	mvns	r3, r3
 8004dbe:	401a      	ands	r2, r3
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	6a1a      	ldr	r2, [r3, #32]
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	f003 031f 	and.w	r3, r3, #31
 8004dce:	6879      	ldr	r1, [r7, #4]
 8004dd0:	fa01 f303 	lsl.w	r3, r1, r3
 8004dd4:	431a      	orrs	r2, r3
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	621a      	str	r2, [r3, #32]
}
 8004dda:	bf00      	nop
 8004ddc:	371c      	adds	r7, #28
 8004dde:	46bd      	mov	sp, r7
 8004de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de4:	4770      	bx	lr
	...

08004de8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004de8:	b480      	push	{r7}
 8004dea:	b085      	sub	sp, #20
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
 8004df0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004df8:	2b01      	cmp	r3, #1
 8004dfa:	d101      	bne.n	8004e00 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004dfc:	2302      	movs	r3, #2
 8004dfe:	e074      	b.n	8004eea <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2201      	movs	r2, #1
 8004e04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2202      	movs	r2, #2
 8004e0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	685b      	ldr	r3, [r3, #4]
 8004e16:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	689b      	ldr	r3, [r3, #8]
 8004e1e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4a34      	ldr	r2, [pc, #208]	@ (8004ef8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d009      	beq.n	8004e3e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4a33      	ldr	r2, [pc, #204]	@ (8004efc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d004      	beq.n	8004e3e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4a31      	ldr	r2, [pc, #196]	@ (8004f00 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d108      	bne.n	8004e50 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004e44:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	685b      	ldr	r3, [r3, #4]
 8004e4a:	68fa      	ldr	r2, [r7, #12]
 8004e4c:	4313      	orrs	r3, r2
 8004e4e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8004e56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e5a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	68fa      	ldr	r2, [r7, #12]
 8004e62:	4313      	orrs	r3, r2
 8004e64:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	68fa      	ldr	r2, [r7, #12]
 8004e6c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4a21      	ldr	r2, [pc, #132]	@ (8004ef8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d022      	beq.n	8004ebe <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e80:	d01d      	beq.n	8004ebe <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4a1f      	ldr	r2, [pc, #124]	@ (8004f04 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d018      	beq.n	8004ebe <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4a1d      	ldr	r2, [pc, #116]	@ (8004f08 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d013      	beq.n	8004ebe <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4a1c      	ldr	r2, [pc, #112]	@ (8004f0c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d00e      	beq.n	8004ebe <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	4a15      	ldr	r2, [pc, #84]	@ (8004efc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d009      	beq.n	8004ebe <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	4a18      	ldr	r2, [pc, #96]	@ (8004f10 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d004      	beq.n	8004ebe <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	4a11      	ldr	r2, [pc, #68]	@ (8004f00 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d10c      	bne.n	8004ed8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004ebe:	68bb      	ldr	r3, [r7, #8]
 8004ec0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004ec4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	689b      	ldr	r3, [r3, #8]
 8004eca:	68ba      	ldr	r2, [r7, #8]
 8004ecc:	4313      	orrs	r3, r2
 8004ece:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	68ba      	ldr	r2, [r7, #8]
 8004ed6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2201      	movs	r2, #1
 8004edc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004ee8:	2300      	movs	r3, #0
}
 8004eea:	4618      	mov	r0, r3
 8004eec:	3714      	adds	r7, #20
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef4:	4770      	bx	lr
 8004ef6:	bf00      	nop
 8004ef8:	40012c00 	.word	0x40012c00
 8004efc:	40013400 	.word	0x40013400
 8004f00:	40015000 	.word	0x40015000
 8004f04:	40000400 	.word	0x40000400
 8004f08:	40000800 	.word	0x40000800
 8004f0c:	40000c00 	.word	0x40000c00
 8004f10:	40014000 	.word	0x40014000

08004f14 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004f14:	b480      	push	{r7}
 8004f16:	b085      	sub	sp, #20
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
 8004f1c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004f1e:	2300      	movs	r3, #0
 8004f20:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004f28:	2b01      	cmp	r3, #1
 8004f2a:	d101      	bne.n	8004f30 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004f2c:	2302      	movs	r3, #2
 8004f2e:	e078      	b.n	8005022 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2201      	movs	r2, #1
 8004f34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	68db      	ldr	r3, [r3, #12]
 8004f42:	4313      	orrs	r3, r2
 8004f44:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	689b      	ldr	r3, [r3, #8]
 8004f50:	4313      	orrs	r3, r2
 8004f52:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	685b      	ldr	r3, [r3, #4]
 8004f5e:	4313      	orrs	r3, r2
 8004f60:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	4313      	orrs	r3, r2
 8004f6e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	691b      	ldr	r3, [r3, #16]
 8004f7a:	4313      	orrs	r3, r2
 8004f7c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	695b      	ldr	r3, [r3, #20]
 8004f88:	4313      	orrs	r3, r2
 8004f8a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f96:	4313      	orrs	r3, r2
 8004f98:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	699b      	ldr	r3, [r3, #24]
 8004fa4:	041b      	lsls	r3, r3, #16
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	69db      	ldr	r3, [r3, #28]
 8004fb4:	4313      	orrs	r3, r2
 8004fb6:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4a1c      	ldr	r2, [pc, #112]	@ (8005030 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d009      	beq.n	8004fd6 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	4a1b      	ldr	r2, [pc, #108]	@ (8005034 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	d004      	beq.n	8004fd6 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4a19      	ldr	r2, [pc, #100]	@ (8005038 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d11c      	bne.n	8005010 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fe0:	051b      	lsls	r3, r3, #20
 8004fe2:	4313      	orrs	r3, r2
 8004fe4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	6a1b      	ldr	r3, [r3, #32]
 8004ff0:	4313      	orrs	r3, r2
 8004ff2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ffe:	4313      	orrs	r3, r2
 8005000:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800500c:	4313      	orrs	r3, r2
 800500e:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	68fa      	ldr	r2, [r7, #12]
 8005016:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2200      	movs	r2, #0
 800501c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005020:	2300      	movs	r3, #0
}
 8005022:	4618      	mov	r0, r3
 8005024:	3714      	adds	r7, #20
 8005026:	46bd      	mov	sp, r7
 8005028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502c:	4770      	bx	lr
 800502e:	bf00      	nop
 8005030:	40012c00 	.word	0x40012c00
 8005034:	40013400 	.word	0x40013400
 8005038:	40015000 	.word	0x40015000

0800503c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800503c:	b480      	push	{r7}
 800503e:	b083      	sub	sp, #12
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005044:	bf00      	nop
 8005046:	370c      	adds	r7, #12
 8005048:	46bd      	mov	sp, r7
 800504a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504e:	4770      	bx	lr

08005050 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005050:	b480      	push	{r7}
 8005052:	b083      	sub	sp, #12
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005058:	bf00      	nop
 800505a:	370c      	adds	r7, #12
 800505c:	46bd      	mov	sp, r7
 800505e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005062:	4770      	bx	lr

08005064 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005064:	b480      	push	{r7}
 8005066:	b083      	sub	sp, #12
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800506c:	bf00      	nop
 800506e:	370c      	adds	r7, #12
 8005070:	46bd      	mov	sp, r7
 8005072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005076:	4770      	bx	lr

08005078 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8005078:	b480      	push	{r7}
 800507a:	b083      	sub	sp, #12
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8005080:	bf00      	nop
 8005082:	370c      	adds	r7, #12
 8005084:	46bd      	mov	sp, r7
 8005086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508a:	4770      	bx	lr

0800508c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800508c:	b480      	push	{r7}
 800508e:	b083      	sub	sp, #12
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8005094:	bf00      	nop
 8005096:	370c      	adds	r7, #12
 8005098:	46bd      	mov	sp, r7
 800509a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509e:	4770      	bx	lr

080050a0 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80050a0:	b480      	push	{r7}
 80050a2:	b083      	sub	sp, #12
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80050a8:	bf00      	nop
 80050aa:	370c      	adds	r7, #12
 80050ac:	46bd      	mov	sp, r7
 80050ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b2:	4770      	bx	lr

080050b4 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80050b4:	b480      	push	{r7}
 80050b6:	b083      	sub	sp, #12
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80050bc:	bf00      	nop
 80050be:	370c      	adds	r7, #12
 80050c0:	46bd      	mov	sp, r7
 80050c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c6:	4770      	bx	lr

080050c8 <malloc>:
 80050c8:	4b02      	ldr	r3, [pc, #8]	@ (80050d4 <malloc+0xc>)
 80050ca:	4601      	mov	r1, r0
 80050cc:	6818      	ldr	r0, [r3, #0]
 80050ce:	f000 b825 	b.w	800511c <_malloc_r>
 80050d2:	bf00      	nop
 80050d4:	2000000c 	.word	0x2000000c

080050d8 <sbrk_aligned>:
 80050d8:	b570      	push	{r4, r5, r6, lr}
 80050da:	4e0f      	ldr	r6, [pc, #60]	@ (8005118 <sbrk_aligned+0x40>)
 80050dc:	460c      	mov	r4, r1
 80050de:	6831      	ldr	r1, [r6, #0]
 80050e0:	4605      	mov	r5, r0
 80050e2:	b911      	cbnz	r1, 80050ea <sbrk_aligned+0x12>
 80050e4:	f000 f8ae 	bl	8005244 <_sbrk_r>
 80050e8:	6030      	str	r0, [r6, #0]
 80050ea:	4621      	mov	r1, r4
 80050ec:	4628      	mov	r0, r5
 80050ee:	f000 f8a9 	bl	8005244 <_sbrk_r>
 80050f2:	1c43      	adds	r3, r0, #1
 80050f4:	d103      	bne.n	80050fe <sbrk_aligned+0x26>
 80050f6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80050fa:	4620      	mov	r0, r4
 80050fc:	bd70      	pop	{r4, r5, r6, pc}
 80050fe:	1cc4      	adds	r4, r0, #3
 8005100:	f024 0403 	bic.w	r4, r4, #3
 8005104:	42a0      	cmp	r0, r4
 8005106:	d0f8      	beq.n	80050fa <sbrk_aligned+0x22>
 8005108:	1a21      	subs	r1, r4, r0
 800510a:	4628      	mov	r0, r5
 800510c:	f000 f89a 	bl	8005244 <_sbrk_r>
 8005110:	3001      	adds	r0, #1
 8005112:	d1f2      	bne.n	80050fa <sbrk_aligned+0x22>
 8005114:	e7ef      	b.n	80050f6 <sbrk_aligned+0x1e>
 8005116:	bf00      	nop
 8005118:	200003ec 	.word	0x200003ec

0800511c <_malloc_r>:
 800511c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005120:	1ccd      	adds	r5, r1, #3
 8005122:	f025 0503 	bic.w	r5, r5, #3
 8005126:	3508      	adds	r5, #8
 8005128:	2d0c      	cmp	r5, #12
 800512a:	bf38      	it	cc
 800512c:	250c      	movcc	r5, #12
 800512e:	2d00      	cmp	r5, #0
 8005130:	4606      	mov	r6, r0
 8005132:	db01      	blt.n	8005138 <_malloc_r+0x1c>
 8005134:	42a9      	cmp	r1, r5
 8005136:	d904      	bls.n	8005142 <_malloc_r+0x26>
 8005138:	230c      	movs	r3, #12
 800513a:	6033      	str	r3, [r6, #0]
 800513c:	2000      	movs	r0, #0
 800513e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005142:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005218 <_malloc_r+0xfc>
 8005146:	f000 f869 	bl	800521c <__malloc_lock>
 800514a:	f8d8 3000 	ldr.w	r3, [r8]
 800514e:	461c      	mov	r4, r3
 8005150:	bb44      	cbnz	r4, 80051a4 <_malloc_r+0x88>
 8005152:	4629      	mov	r1, r5
 8005154:	4630      	mov	r0, r6
 8005156:	f7ff ffbf 	bl	80050d8 <sbrk_aligned>
 800515a:	1c43      	adds	r3, r0, #1
 800515c:	4604      	mov	r4, r0
 800515e:	d158      	bne.n	8005212 <_malloc_r+0xf6>
 8005160:	f8d8 4000 	ldr.w	r4, [r8]
 8005164:	4627      	mov	r7, r4
 8005166:	2f00      	cmp	r7, #0
 8005168:	d143      	bne.n	80051f2 <_malloc_r+0xd6>
 800516a:	2c00      	cmp	r4, #0
 800516c:	d04b      	beq.n	8005206 <_malloc_r+0xea>
 800516e:	6823      	ldr	r3, [r4, #0]
 8005170:	4639      	mov	r1, r7
 8005172:	4630      	mov	r0, r6
 8005174:	eb04 0903 	add.w	r9, r4, r3
 8005178:	f000 f864 	bl	8005244 <_sbrk_r>
 800517c:	4581      	cmp	r9, r0
 800517e:	d142      	bne.n	8005206 <_malloc_r+0xea>
 8005180:	6821      	ldr	r1, [r4, #0]
 8005182:	1a6d      	subs	r5, r5, r1
 8005184:	4629      	mov	r1, r5
 8005186:	4630      	mov	r0, r6
 8005188:	f7ff ffa6 	bl	80050d8 <sbrk_aligned>
 800518c:	3001      	adds	r0, #1
 800518e:	d03a      	beq.n	8005206 <_malloc_r+0xea>
 8005190:	6823      	ldr	r3, [r4, #0]
 8005192:	442b      	add	r3, r5
 8005194:	6023      	str	r3, [r4, #0]
 8005196:	f8d8 3000 	ldr.w	r3, [r8]
 800519a:	685a      	ldr	r2, [r3, #4]
 800519c:	bb62      	cbnz	r2, 80051f8 <_malloc_r+0xdc>
 800519e:	f8c8 7000 	str.w	r7, [r8]
 80051a2:	e00f      	b.n	80051c4 <_malloc_r+0xa8>
 80051a4:	6822      	ldr	r2, [r4, #0]
 80051a6:	1b52      	subs	r2, r2, r5
 80051a8:	d420      	bmi.n	80051ec <_malloc_r+0xd0>
 80051aa:	2a0b      	cmp	r2, #11
 80051ac:	d917      	bls.n	80051de <_malloc_r+0xc2>
 80051ae:	1961      	adds	r1, r4, r5
 80051b0:	42a3      	cmp	r3, r4
 80051b2:	6025      	str	r5, [r4, #0]
 80051b4:	bf18      	it	ne
 80051b6:	6059      	strne	r1, [r3, #4]
 80051b8:	6863      	ldr	r3, [r4, #4]
 80051ba:	bf08      	it	eq
 80051bc:	f8c8 1000 	streq.w	r1, [r8]
 80051c0:	5162      	str	r2, [r4, r5]
 80051c2:	604b      	str	r3, [r1, #4]
 80051c4:	4630      	mov	r0, r6
 80051c6:	f000 f82f 	bl	8005228 <__malloc_unlock>
 80051ca:	f104 000b 	add.w	r0, r4, #11
 80051ce:	1d23      	adds	r3, r4, #4
 80051d0:	f020 0007 	bic.w	r0, r0, #7
 80051d4:	1ac2      	subs	r2, r0, r3
 80051d6:	bf1c      	itt	ne
 80051d8:	1a1b      	subne	r3, r3, r0
 80051da:	50a3      	strne	r3, [r4, r2]
 80051dc:	e7af      	b.n	800513e <_malloc_r+0x22>
 80051de:	6862      	ldr	r2, [r4, #4]
 80051e0:	42a3      	cmp	r3, r4
 80051e2:	bf0c      	ite	eq
 80051e4:	f8c8 2000 	streq.w	r2, [r8]
 80051e8:	605a      	strne	r2, [r3, #4]
 80051ea:	e7eb      	b.n	80051c4 <_malloc_r+0xa8>
 80051ec:	4623      	mov	r3, r4
 80051ee:	6864      	ldr	r4, [r4, #4]
 80051f0:	e7ae      	b.n	8005150 <_malloc_r+0x34>
 80051f2:	463c      	mov	r4, r7
 80051f4:	687f      	ldr	r7, [r7, #4]
 80051f6:	e7b6      	b.n	8005166 <_malloc_r+0x4a>
 80051f8:	461a      	mov	r2, r3
 80051fa:	685b      	ldr	r3, [r3, #4]
 80051fc:	42a3      	cmp	r3, r4
 80051fe:	d1fb      	bne.n	80051f8 <_malloc_r+0xdc>
 8005200:	2300      	movs	r3, #0
 8005202:	6053      	str	r3, [r2, #4]
 8005204:	e7de      	b.n	80051c4 <_malloc_r+0xa8>
 8005206:	230c      	movs	r3, #12
 8005208:	6033      	str	r3, [r6, #0]
 800520a:	4630      	mov	r0, r6
 800520c:	f000 f80c 	bl	8005228 <__malloc_unlock>
 8005210:	e794      	b.n	800513c <_malloc_r+0x20>
 8005212:	6005      	str	r5, [r0, #0]
 8005214:	e7d6      	b.n	80051c4 <_malloc_r+0xa8>
 8005216:	bf00      	nop
 8005218:	200003f0 	.word	0x200003f0

0800521c <__malloc_lock>:
 800521c:	4801      	ldr	r0, [pc, #4]	@ (8005224 <__malloc_lock+0x8>)
 800521e:	f000 b84b 	b.w	80052b8 <__retarget_lock_acquire_recursive>
 8005222:	bf00      	nop
 8005224:	20000530 	.word	0x20000530

08005228 <__malloc_unlock>:
 8005228:	4801      	ldr	r0, [pc, #4]	@ (8005230 <__malloc_unlock+0x8>)
 800522a:	f000 b846 	b.w	80052ba <__retarget_lock_release_recursive>
 800522e:	bf00      	nop
 8005230:	20000530 	.word	0x20000530

08005234 <memset>:
 8005234:	4402      	add	r2, r0
 8005236:	4603      	mov	r3, r0
 8005238:	4293      	cmp	r3, r2
 800523a:	d100      	bne.n	800523e <memset+0xa>
 800523c:	4770      	bx	lr
 800523e:	f803 1b01 	strb.w	r1, [r3], #1
 8005242:	e7f9      	b.n	8005238 <memset+0x4>

08005244 <_sbrk_r>:
 8005244:	b538      	push	{r3, r4, r5, lr}
 8005246:	4d06      	ldr	r5, [pc, #24]	@ (8005260 <_sbrk_r+0x1c>)
 8005248:	2300      	movs	r3, #0
 800524a:	4604      	mov	r4, r0
 800524c:	4608      	mov	r0, r1
 800524e:	602b      	str	r3, [r5, #0]
 8005250:	f7fc fbfc 	bl	8001a4c <_sbrk>
 8005254:	1c43      	adds	r3, r0, #1
 8005256:	d102      	bne.n	800525e <_sbrk_r+0x1a>
 8005258:	682b      	ldr	r3, [r5, #0]
 800525a:	b103      	cbz	r3, 800525e <_sbrk_r+0x1a>
 800525c:	6023      	str	r3, [r4, #0]
 800525e:	bd38      	pop	{r3, r4, r5, pc}
 8005260:	2000052c 	.word	0x2000052c

08005264 <__errno>:
 8005264:	4b01      	ldr	r3, [pc, #4]	@ (800526c <__errno+0x8>)
 8005266:	6818      	ldr	r0, [r3, #0]
 8005268:	4770      	bx	lr
 800526a:	bf00      	nop
 800526c:	2000000c 	.word	0x2000000c

08005270 <__libc_init_array>:
 8005270:	b570      	push	{r4, r5, r6, lr}
 8005272:	4d0d      	ldr	r5, [pc, #52]	@ (80052a8 <__libc_init_array+0x38>)
 8005274:	4c0d      	ldr	r4, [pc, #52]	@ (80052ac <__libc_init_array+0x3c>)
 8005276:	1b64      	subs	r4, r4, r5
 8005278:	10a4      	asrs	r4, r4, #2
 800527a:	2600      	movs	r6, #0
 800527c:	42a6      	cmp	r6, r4
 800527e:	d109      	bne.n	8005294 <__libc_init_array+0x24>
 8005280:	4d0b      	ldr	r5, [pc, #44]	@ (80052b0 <__libc_init_array+0x40>)
 8005282:	4c0c      	ldr	r4, [pc, #48]	@ (80052b4 <__libc_init_array+0x44>)
 8005284:	f000 fd8e 	bl	8005da4 <_init>
 8005288:	1b64      	subs	r4, r4, r5
 800528a:	10a4      	asrs	r4, r4, #2
 800528c:	2600      	movs	r6, #0
 800528e:	42a6      	cmp	r6, r4
 8005290:	d105      	bne.n	800529e <__libc_init_array+0x2e>
 8005292:	bd70      	pop	{r4, r5, r6, pc}
 8005294:	f855 3b04 	ldr.w	r3, [r5], #4
 8005298:	4798      	blx	r3
 800529a:	3601      	adds	r6, #1
 800529c:	e7ee      	b.n	800527c <__libc_init_array+0xc>
 800529e:	f855 3b04 	ldr.w	r3, [r5], #4
 80052a2:	4798      	blx	r3
 80052a4:	3601      	adds	r6, #1
 80052a6:	e7f2      	b.n	800528e <__libc_init_array+0x1e>
 80052a8:	0800619c 	.word	0x0800619c
 80052ac:	0800619c 	.word	0x0800619c
 80052b0:	0800619c 	.word	0x0800619c
 80052b4:	080061a0 	.word	0x080061a0

080052b8 <__retarget_lock_acquire_recursive>:
 80052b8:	4770      	bx	lr

080052ba <__retarget_lock_release_recursive>:
 80052ba:	4770      	bx	lr

080052bc <cosf>:
 80052bc:	ee10 3a10 	vmov	r3, s0
 80052c0:	b507      	push	{r0, r1, r2, lr}
 80052c2:	4a1e      	ldr	r2, [pc, #120]	@ (800533c <cosf+0x80>)
 80052c4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d806      	bhi.n	80052da <cosf+0x1e>
 80052cc:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 8005340 <cosf+0x84>
 80052d0:	b003      	add	sp, #12
 80052d2:	f85d eb04 	ldr.w	lr, [sp], #4
 80052d6:	f000 b87b 	b.w	80053d0 <__kernel_cosf>
 80052da:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80052de:	d304      	bcc.n	80052ea <cosf+0x2e>
 80052e0:	ee30 0a40 	vsub.f32	s0, s0, s0
 80052e4:	b003      	add	sp, #12
 80052e6:	f85d fb04 	ldr.w	pc, [sp], #4
 80052ea:	4668      	mov	r0, sp
 80052ec:	f000 f910 	bl	8005510 <__ieee754_rem_pio2f>
 80052f0:	f000 0003 	and.w	r0, r0, #3
 80052f4:	2801      	cmp	r0, #1
 80052f6:	d009      	beq.n	800530c <cosf+0x50>
 80052f8:	2802      	cmp	r0, #2
 80052fa:	d010      	beq.n	800531e <cosf+0x62>
 80052fc:	b9b0      	cbnz	r0, 800532c <cosf+0x70>
 80052fe:	eddd 0a01 	vldr	s1, [sp, #4]
 8005302:	ed9d 0a00 	vldr	s0, [sp]
 8005306:	f000 f863 	bl	80053d0 <__kernel_cosf>
 800530a:	e7eb      	b.n	80052e4 <cosf+0x28>
 800530c:	eddd 0a01 	vldr	s1, [sp, #4]
 8005310:	ed9d 0a00 	vldr	s0, [sp]
 8005314:	f000 f8b4 	bl	8005480 <__kernel_sinf>
 8005318:	eeb1 0a40 	vneg.f32	s0, s0
 800531c:	e7e2      	b.n	80052e4 <cosf+0x28>
 800531e:	eddd 0a01 	vldr	s1, [sp, #4]
 8005322:	ed9d 0a00 	vldr	s0, [sp]
 8005326:	f000 f853 	bl	80053d0 <__kernel_cosf>
 800532a:	e7f5      	b.n	8005318 <cosf+0x5c>
 800532c:	eddd 0a01 	vldr	s1, [sp, #4]
 8005330:	ed9d 0a00 	vldr	s0, [sp]
 8005334:	2001      	movs	r0, #1
 8005336:	f000 f8a3 	bl	8005480 <__kernel_sinf>
 800533a:	e7d3      	b.n	80052e4 <cosf+0x28>
 800533c:	3f490fd8 	.word	0x3f490fd8
 8005340:	00000000 	.word	0x00000000

08005344 <sinf>:
 8005344:	ee10 3a10 	vmov	r3, s0
 8005348:	b507      	push	{r0, r1, r2, lr}
 800534a:	4a1f      	ldr	r2, [pc, #124]	@ (80053c8 <sinf+0x84>)
 800534c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005350:	4293      	cmp	r3, r2
 8005352:	d807      	bhi.n	8005364 <sinf+0x20>
 8005354:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 80053cc <sinf+0x88>
 8005358:	2000      	movs	r0, #0
 800535a:	b003      	add	sp, #12
 800535c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005360:	f000 b88e 	b.w	8005480 <__kernel_sinf>
 8005364:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8005368:	d304      	bcc.n	8005374 <sinf+0x30>
 800536a:	ee30 0a40 	vsub.f32	s0, s0, s0
 800536e:	b003      	add	sp, #12
 8005370:	f85d fb04 	ldr.w	pc, [sp], #4
 8005374:	4668      	mov	r0, sp
 8005376:	f000 f8cb 	bl	8005510 <__ieee754_rem_pio2f>
 800537a:	f000 0003 	and.w	r0, r0, #3
 800537e:	2801      	cmp	r0, #1
 8005380:	d00a      	beq.n	8005398 <sinf+0x54>
 8005382:	2802      	cmp	r0, #2
 8005384:	d00f      	beq.n	80053a6 <sinf+0x62>
 8005386:	b9c0      	cbnz	r0, 80053ba <sinf+0x76>
 8005388:	eddd 0a01 	vldr	s1, [sp, #4]
 800538c:	ed9d 0a00 	vldr	s0, [sp]
 8005390:	2001      	movs	r0, #1
 8005392:	f000 f875 	bl	8005480 <__kernel_sinf>
 8005396:	e7ea      	b.n	800536e <sinf+0x2a>
 8005398:	eddd 0a01 	vldr	s1, [sp, #4]
 800539c:	ed9d 0a00 	vldr	s0, [sp]
 80053a0:	f000 f816 	bl	80053d0 <__kernel_cosf>
 80053a4:	e7e3      	b.n	800536e <sinf+0x2a>
 80053a6:	eddd 0a01 	vldr	s1, [sp, #4]
 80053aa:	ed9d 0a00 	vldr	s0, [sp]
 80053ae:	2001      	movs	r0, #1
 80053b0:	f000 f866 	bl	8005480 <__kernel_sinf>
 80053b4:	eeb1 0a40 	vneg.f32	s0, s0
 80053b8:	e7d9      	b.n	800536e <sinf+0x2a>
 80053ba:	eddd 0a01 	vldr	s1, [sp, #4]
 80053be:	ed9d 0a00 	vldr	s0, [sp]
 80053c2:	f000 f805 	bl	80053d0 <__kernel_cosf>
 80053c6:	e7f5      	b.n	80053b4 <sinf+0x70>
 80053c8:	3f490fd8 	.word	0x3f490fd8
 80053cc:	00000000 	.word	0x00000000

080053d0 <__kernel_cosf>:
 80053d0:	ee10 3a10 	vmov	r3, s0
 80053d4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80053d8:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 80053dc:	eef0 6a40 	vmov.f32	s13, s0
 80053e0:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80053e4:	d204      	bcs.n	80053f0 <__kernel_cosf+0x20>
 80053e6:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 80053ea:	ee17 2a90 	vmov	r2, s15
 80053ee:	b342      	cbz	r2, 8005442 <__kernel_cosf+0x72>
 80053f0:	ee26 7aa6 	vmul.f32	s14, s13, s13
 80053f4:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 8005460 <__kernel_cosf+0x90>
 80053f8:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 8005464 <__kernel_cosf+0x94>
 80053fc:	4a1a      	ldr	r2, [pc, #104]	@ (8005468 <__kernel_cosf+0x98>)
 80053fe:	eea7 6a27 	vfma.f32	s12, s14, s15
 8005402:	4293      	cmp	r3, r2
 8005404:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800546c <__kernel_cosf+0x9c>
 8005408:	eee6 7a07 	vfma.f32	s15, s12, s14
 800540c:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 8005470 <__kernel_cosf+0xa0>
 8005410:	eea7 6a87 	vfma.f32	s12, s15, s14
 8005414:	eddf 7a17 	vldr	s15, [pc, #92]	@ 8005474 <__kernel_cosf+0xa4>
 8005418:	eee6 7a07 	vfma.f32	s15, s12, s14
 800541c:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 8005478 <__kernel_cosf+0xa8>
 8005420:	eea7 6a87 	vfma.f32	s12, s15, s14
 8005424:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 8005428:	ee26 6a07 	vmul.f32	s12, s12, s14
 800542c:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8005430:	eee7 0a06 	vfma.f32	s1, s14, s12
 8005434:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005438:	d804      	bhi.n	8005444 <__kernel_cosf+0x74>
 800543a:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800543e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8005442:	4770      	bx	lr
 8005444:	4a0d      	ldr	r2, [pc, #52]	@ (800547c <__kernel_cosf+0xac>)
 8005446:	4293      	cmp	r3, r2
 8005448:	bf9a      	itte	ls
 800544a:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 800544e:	ee07 3a10 	vmovls	s14, r3
 8005452:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 8005456:	ee30 0a47 	vsub.f32	s0, s0, s14
 800545a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800545e:	e7ec      	b.n	800543a <__kernel_cosf+0x6a>
 8005460:	ad47d74e 	.word	0xad47d74e
 8005464:	310f74f6 	.word	0x310f74f6
 8005468:	3e999999 	.word	0x3e999999
 800546c:	b493f27c 	.word	0xb493f27c
 8005470:	37d00d01 	.word	0x37d00d01
 8005474:	bab60b61 	.word	0xbab60b61
 8005478:	3d2aaaab 	.word	0x3d2aaaab
 800547c:	3f480000 	.word	0x3f480000

08005480 <__kernel_sinf>:
 8005480:	ee10 3a10 	vmov	r3, s0
 8005484:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005488:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800548c:	d204      	bcs.n	8005498 <__kernel_sinf+0x18>
 800548e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8005492:	ee17 3a90 	vmov	r3, s15
 8005496:	b35b      	cbz	r3, 80054f0 <__kernel_sinf+0x70>
 8005498:	ee20 7a00 	vmul.f32	s14, s0, s0
 800549c:	eddf 7a15 	vldr	s15, [pc, #84]	@ 80054f4 <__kernel_sinf+0x74>
 80054a0:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 80054f8 <__kernel_sinf+0x78>
 80054a4:	eea7 6a27 	vfma.f32	s12, s14, s15
 80054a8:	eddf 7a14 	vldr	s15, [pc, #80]	@ 80054fc <__kernel_sinf+0x7c>
 80054ac:	eee6 7a07 	vfma.f32	s15, s12, s14
 80054b0:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 8005500 <__kernel_sinf+0x80>
 80054b4:	eea7 6a87 	vfma.f32	s12, s15, s14
 80054b8:	eddf 7a12 	vldr	s15, [pc, #72]	@ 8005504 <__kernel_sinf+0x84>
 80054bc:	ee60 6a07 	vmul.f32	s13, s0, s14
 80054c0:	eee6 7a07 	vfma.f32	s15, s12, s14
 80054c4:	b930      	cbnz	r0, 80054d4 <__kernel_sinf+0x54>
 80054c6:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 8005508 <__kernel_sinf+0x88>
 80054ca:	eea7 6a27 	vfma.f32	s12, s14, s15
 80054ce:	eea6 0a26 	vfma.f32	s0, s12, s13
 80054d2:	4770      	bx	lr
 80054d4:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 80054d8:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 80054dc:	eee0 7a86 	vfma.f32	s15, s1, s12
 80054e0:	eed7 0a87 	vfnms.f32	s1, s15, s14
 80054e4:	eddf 7a09 	vldr	s15, [pc, #36]	@ 800550c <__kernel_sinf+0x8c>
 80054e8:	eee6 0aa7 	vfma.f32	s1, s13, s15
 80054ec:	ee30 0a60 	vsub.f32	s0, s0, s1
 80054f0:	4770      	bx	lr
 80054f2:	bf00      	nop
 80054f4:	2f2ec9d3 	.word	0x2f2ec9d3
 80054f8:	b2d72f34 	.word	0xb2d72f34
 80054fc:	3638ef1b 	.word	0x3638ef1b
 8005500:	b9500d01 	.word	0xb9500d01
 8005504:	3c088889 	.word	0x3c088889
 8005508:	be2aaaab 	.word	0xbe2aaaab
 800550c:	3e2aaaab 	.word	0x3e2aaaab

08005510 <__ieee754_rem_pio2f>:
 8005510:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005512:	ee10 6a10 	vmov	r6, s0
 8005516:	4b88      	ldr	r3, [pc, #544]	@ (8005738 <__ieee754_rem_pio2f+0x228>)
 8005518:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 800551c:	429d      	cmp	r5, r3
 800551e:	b087      	sub	sp, #28
 8005520:	4604      	mov	r4, r0
 8005522:	d805      	bhi.n	8005530 <__ieee754_rem_pio2f+0x20>
 8005524:	2300      	movs	r3, #0
 8005526:	ed80 0a00 	vstr	s0, [r0]
 800552a:	6043      	str	r3, [r0, #4]
 800552c:	2000      	movs	r0, #0
 800552e:	e022      	b.n	8005576 <__ieee754_rem_pio2f+0x66>
 8005530:	4b82      	ldr	r3, [pc, #520]	@ (800573c <__ieee754_rem_pio2f+0x22c>)
 8005532:	429d      	cmp	r5, r3
 8005534:	d83a      	bhi.n	80055ac <__ieee754_rem_pio2f+0x9c>
 8005536:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800553a:	2e00      	cmp	r6, #0
 800553c:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 8005740 <__ieee754_rem_pio2f+0x230>
 8005540:	4a80      	ldr	r2, [pc, #512]	@ (8005744 <__ieee754_rem_pio2f+0x234>)
 8005542:	f023 030f 	bic.w	r3, r3, #15
 8005546:	dd18      	ble.n	800557a <__ieee754_rem_pio2f+0x6a>
 8005548:	4293      	cmp	r3, r2
 800554a:	ee70 7a47 	vsub.f32	s15, s0, s14
 800554e:	bf09      	itett	eq
 8005550:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 8005748 <__ieee754_rem_pio2f+0x238>
 8005554:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 800574c <__ieee754_rem_pio2f+0x23c>
 8005558:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 8005750 <__ieee754_rem_pio2f+0x240>
 800555c:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8005560:	ee37 7ae6 	vsub.f32	s14, s15, s13
 8005564:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005568:	ed80 7a00 	vstr	s14, [r0]
 800556c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005570:	edc0 7a01 	vstr	s15, [r0, #4]
 8005574:	2001      	movs	r0, #1
 8005576:	b007      	add	sp, #28
 8005578:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800557a:	4293      	cmp	r3, r2
 800557c:	ee70 7a07 	vadd.f32	s15, s0, s14
 8005580:	bf09      	itett	eq
 8005582:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 8005748 <__ieee754_rem_pio2f+0x238>
 8005586:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 800574c <__ieee754_rem_pio2f+0x23c>
 800558a:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 8005750 <__ieee754_rem_pio2f+0x240>
 800558e:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8005592:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8005596:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800559a:	ed80 7a00 	vstr	s14, [r0]
 800559e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80055a2:	edc0 7a01 	vstr	s15, [r0, #4]
 80055a6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80055aa:	e7e4      	b.n	8005576 <__ieee754_rem_pio2f+0x66>
 80055ac:	4b69      	ldr	r3, [pc, #420]	@ (8005754 <__ieee754_rem_pio2f+0x244>)
 80055ae:	429d      	cmp	r5, r3
 80055b0:	d873      	bhi.n	800569a <__ieee754_rem_pio2f+0x18a>
 80055b2:	f000 f8dd 	bl	8005770 <fabsf>
 80055b6:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 8005758 <__ieee754_rem_pio2f+0x248>
 80055ba:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80055be:	eee0 7a07 	vfma.f32	s15, s0, s14
 80055c2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80055c6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80055ca:	ee17 0a90 	vmov	r0, s15
 80055ce:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8005740 <__ieee754_rem_pio2f+0x230>
 80055d2:	eea7 0a67 	vfms.f32	s0, s14, s15
 80055d6:	281f      	cmp	r0, #31
 80055d8:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800574c <__ieee754_rem_pio2f+0x23c>
 80055dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055e0:	eeb1 6a47 	vneg.f32	s12, s14
 80055e4:	ee70 6a67 	vsub.f32	s13, s0, s15
 80055e8:	ee16 1a90 	vmov	r1, s13
 80055ec:	dc09      	bgt.n	8005602 <__ieee754_rem_pio2f+0xf2>
 80055ee:	4a5b      	ldr	r2, [pc, #364]	@ (800575c <__ieee754_rem_pio2f+0x24c>)
 80055f0:	1e47      	subs	r7, r0, #1
 80055f2:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 80055f6:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 80055fa:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80055fe:	4293      	cmp	r3, r2
 8005600:	d107      	bne.n	8005612 <__ieee754_rem_pio2f+0x102>
 8005602:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 8005606:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 800560a:	2a08      	cmp	r2, #8
 800560c:	ea4f 53e5 	mov.w	r3, r5, asr #23
 8005610:	dc14      	bgt.n	800563c <__ieee754_rem_pio2f+0x12c>
 8005612:	6021      	str	r1, [r4, #0]
 8005614:	ed94 7a00 	vldr	s14, [r4]
 8005618:	ee30 0a47 	vsub.f32	s0, s0, s14
 800561c:	2e00      	cmp	r6, #0
 800561e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8005622:	ed84 0a01 	vstr	s0, [r4, #4]
 8005626:	daa6      	bge.n	8005576 <__ieee754_rem_pio2f+0x66>
 8005628:	eeb1 7a47 	vneg.f32	s14, s14
 800562c:	eeb1 0a40 	vneg.f32	s0, s0
 8005630:	ed84 7a00 	vstr	s14, [r4]
 8005634:	ed84 0a01 	vstr	s0, [r4, #4]
 8005638:	4240      	negs	r0, r0
 800563a:	e79c      	b.n	8005576 <__ieee754_rem_pio2f+0x66>
 800563c:	eddf 5a42 	vldr	s11, [pc, #264]	@ 8005748 <__ieee754_rem_pio2f+0x238>
 8005640:	eef0 6a40 	vmov.f32	s13, s0
 8005644:	eee6 6a25 	vfma.f32	s13, s12, s11
 8005648:	ee70 7a66 	vsub.f32	s15, s0, s13
 800564c:	eee6 7a25 	vfma.f32	s15, s12, s11
 8005650:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8005750 <__ieee754_rem_pio2f+0x240>
 8005654:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8005658:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800565c:	ee15 2a90 	vmov	r2, s11
 8005660:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8005664:	1a5b      	subs	r3, r3, r1
 8005666:	2b19      	cmp	r3, #25
 8005668:	dc04      	bgt.n	8005674 <__ieee754_rem_pio2f+0x164>
 800566a:	edc4 5a00 	vstr	s11, [r4]
 800566e:	eeb0 0a66 	vmov.f32	s0, s13
 8005672:	e7cf      	b.n	8005614 <__ieee754_rem_pio2f+0x104>
 8005674:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 8005760 <__ieee754_rem_pio2f+0x250>
 8005678:	eeb0 0a66 	vmov.f32	s0, s13
 800567c:	eea6 0a25 	vfma.f32	s0, s12, s11
 8005680:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8005684:	eddf 6a37 	vldr	s13, [pc, #220]	@ 8005764 <__ieee754_rem_pio2f+0x254>
 8005688:	eee6 7a25 	vfma.f32	s15, s12, s11
 800568c:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8005690:	ee30 7a67 	vsub.f32	s14, s0, s15
 8005694:	ed84 7a00 	vstr	s14, [r4]
 8005698:	e7bc      	b.n	8005614 <__ieee754_rem_pio2f+0x104>
 800569a:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 800569e:	d306      	bcc.n	80056ae <__ieee754_rem_pio2f+0x19e>
 80056a0:	ee70 7a40 	vsub.f32	s15, s0, s0
 80056a4:	edc0 7a01 	vstr	s15, [r0, #4]
 80056a8:	edc0 7a00 	vstr	s15, [r0]
 80056ac:	e73e      	b.n	800552c <__ieee754_rem_pio2f+0x1c>
 80056ae:	15ea      	asrs	r2, r5, #23
 80056b0:	3a86      	subs	r2, #134	@ 0x86
 80056b2:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 80056b6:	ee07 3a90 	vmov	s15, r3
 80056ba:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80056be:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 8005768 <__ieee754_rem_pio2f+0x258>
 80056c2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80056c6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80056ca:	ed8d 7a03 	vstr	s14, [sp, #12]
 80056ce:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80056d2:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80056d6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80056da:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80056de:	ed8d 7a04 	vstr	s14, [sp, #16]
 80056e2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80056e6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80056ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056ee:	edcd 7a05 	vstr	s15, [sp, #20]
 80056f2:	d11e      	bne.n	8005732 <__ieee754_rem_pio2f+0x222>
 80056f4:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80056f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056fc:	bf0c      	ite	eq
 80056fe:	2301      	moveq	r3, #1
 8005700:	2302      	movne	r3, #2
 8005702:	491a      	ldr	r1, [pc, #104]	@ (800576c <__ieee754_rem_pio2f+0x25c>)
 8005704:	9101      	str	r1, [sp, #4]
 8005706:	2102      	movs	r1, #2
 8005708:	9100      	str	r1, [sp, #0]
 800570a:	a803      	add	r0, sp, #12
 800570c:	4621      	mov	r1, r4
 800570e:	f000 f89d 	bl	800584c <__kernel_rem_pio2f>
 8005712:	2e00      	cmp	r6, #0
 8005714:	f6bf af2f 	bge.w	8005576 <__ieee754_rem_pio2f+0x66>
 8005718:	edd4 7a00 	vldr	s15, [r4]
 800571c:	eef1 7a67 	vneg.f32	s15, s15
 8005720:	edc4 7a00 	vstr	s15, [r4]
 8005724:	edd4 7a01 	vldr	s15, [r4, #4]
 8005728:	eef1 7a67 	vneg.f32	s15, s15
 800572c:	edc4 7a01 	vstr	s15, [r4, #4]
 8005730:	e782      	b.n	8005638 <__ieee754_rem_pio2f+0x128>
 8005732:	2303      	movs	r3, #3
 8005734:	e7e5      	b.n	8005702 <__ieee754_rem_pio2f+0x1f2>
 8005736:	bf00      	nop
 8005738:	3f490fd8 	.word	0x3f490fd8
 800573c:	4016cbe3 	.word	0x4016cbe3
 8005740:	3fc90f80 	.word	0x3fc90f80
 8005744:	3fc90fd0 	.word	0x3fc90fd0
 8005748:	37354400 	.word	0x37354400
 800574c:	37354443 	.word	0x37354443
 8005750:	2e85a308 	.word	0x2e85a308
 8005754:	43490f80 	.word	0x43490f80
 8005758:	3f22f984 	.word	0x3f22f984
 800575c:	08005dcc 	.word	0x08005dcc
 8005760:	2e85a300 	.word	0x2e85a300
 8005764:	248d3132 	.word	0x248d3132
 8005768:	43800000 	.word	0x43800000
 800576c:	08005e4c 	.word	0x08005e4c

08005770 <fabsf>:
 8005770:	ee10 3a10 	vmov	r3, s0
 8005774:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005778:	ee00 3a10 	vmov	s0, r3
 800577c:	4770      	bx	lr
	...

08005780 <scalbnf>:
 8005780:	ee10 3a10 	vmov	r3, s0
 8005784:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8005788:	d02b      	beq.n	80057e2 <scalbnf+0x62>
 800578a:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800578e:	d302      	bcc.n	8005796 <scalbnf+0x16>
 8005790:	ee30 0a00 	vadd.f32	s0, s0, s0
 8005794:	4770      	bx	lr
 8005796:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800579a:	d123      	bne.n	80057e4 <scalbnf+0x64>
 800579c:	4b24      	ldr	r3, [pc, #144]	@ (8005830 <scalbnf+0xb0>)
 800579e:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8005834 <scalbnf+0xb4>
 80057a2:	4298      	cmp	r0, r3
 80057a4:	ee20 0a27 	vmul.f32	s0, s0, s15
 80057a8:	db17      	blt.n	80057da <scalbnf+0x5a>
 80057aa:	ee10 3a10 	vmov	r3, s0
 80057ae:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80057b2:	3a19      	subs	r2, #25
 80057b4:	f24c 3150 	movw	r1, #50000	@ 0xc350
 80057b8:	4288      	cmp	r0, r1
 80057ba:	dd15      	ble.n	80057e8 <scalbnf+0x68>
 80057bc:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8005838 <scalbnf+0xb8>
 80057c0:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 800583c <scalbnf+0xbc>
 80057c4:	ee10 3a10 	vmov	r3, s0
 80057c8:	eeb0 7a67 	vmov.f32	s14, s15
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	bfb8      	it	lt
 80057d0:	eef0 7a66 	vmovlt.f32	s15, s13
 80057d4:	ee27 0a87 	vmul.f32	s0, s15, s14
 80057d8:	4770      	bx	lr
 80057da:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8005840 <scalbnf+0xc0>
 80057de:	ee27 0a80 	vmul.f32	s0, s15, s0
 80057e2:	4770      	bx	lr
 80057e4:	0dd2      	lsrs	r2, r2, #23
 80057e6:	e7e5      	b.n	80057b4 <scalbnf+0x34>
 80057e8:	4410      	add	r0, r2
 80057ea:	28fe      	cmp	r0, #254	@ 0xfe
 80057ec:	dce6      	bgt.n	80057bc <scalbnf+0x3c>
 80057ee:	2800      	cmp	r0, #0
 80057f0:	dd06      	ble.n	8005800 <scalbnf+0x80>
 80057f2:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80057f6:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 80057fa:	ee00 3a10 	vmov	s0, r3
 80057fe:	4770      	bx	lr
 8005800:	f110 0f16 	cmn.w	r0, #22
 8005804:	da09      	bge.n	800581a <scalbnf+0x9a>
 8005806:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8005840 <scalbnf+0xc0>
 800580a:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8005844 <scalbnf+0xc4>
 800580e:	ee10 3a10 	vmov	r3, s0
 8005812:	eeb0 7a67 	vmov.f32	s14, s15
 8005816:	2b00      	cmp	r3, #0
 8005818:	e7d9      	b.n	80057ce <scalbnf+0x4e>
 800581a:	3019      	adds	r0, #25
 800581c:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8005820:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8005824:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8005848 <scalbnf+0xc8>
 8005828:	ee07 3a90 	vmov	s15, r3
 800582c:	e7d7      	b.n	80057de <scalbnf+0x5e>
 800582e:	bf00      	nop
 8005830:	ffff3cb0 	.word	0xffff3cb0
 8005834:	4c000000 	.word	0x4c000000
 8005838:	7149f2ca 	.word	0x7149f2ca
 800583c:	f149f2ca 	.word	0xf149f2ca
 8005840:	0da24260 	.word	0x0da24260
 8005844:	8da24260 	.word	0x8da24260
 8005848:	33000000 	.word	0x33000000

0800584c <__kernel_rem_pio2f>:
 800584c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005850:	ed2d 8b04 	vpush	{d8-d9}
 8005854:	b0d9      	sub	sp, #356	@ 0x164
 8005856:	4690      	mov	r8, r2
 8005858:	9001      	str	r0, [sp, #4]
 800585a:	4ab6      	ldr	r2, [pc, #728]	@ (8005b34 <__kernel_rem_pio2f+0x2e8>)
 800585c:	9866      	ldr	r0, [sp, #408]	@ 0x198
 800585e:	f118 0f04 	cmn.w	r8, #4
 8005862:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 8005866:	460f      	mov	r7, r1
 8005868:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 800586c:	db26      	blt.n	80058bc <__kernel_rem_pio2f+0x70>
 800586e:	f1b8 0203 	subs.w	r2, r8, #3
 8005872:	bf48      	it	mi
 8005874:	f108 0204 	addmi.w	r2, r8, #4
 8005878:	10d2      	asrs	r2, r2, #3
 800587a:	1c55      	adds	r5, r2, #1
 800587c:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800587e:	ed9f 7ab1 	vldr	s14, [pc, #708]	@ 8005b44 <__kernel_rem_pio2f+0x2f8>
 8005882:	00e8      	lsls	r0, r5, #3
 8005884:	eba2 060b 	sub.w	r6, r2, fp
 8005888:	9002      	str	r0, [sp, #8]
 800588a:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 800588e:	eb0a 0c0b 	add.w	ip, sl, fp
 8005892:	ac1c      	add	r4, sp, #112	@ 0x70
 8005894:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 8005898:	2000      	movs	r0, #0
 800589a:	4560      	cmp	r0, ip
 800589c:	dd10      	ble.n	80058c0 <__kernel_rem_pio2f+0x74>
 800589e:	a91c      	add	r1, sp, #112	@ 0x70
 80058a0:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 80058a4:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 80058a8:	2600      	movs	r6, #0
 80058aa:	4556      	cmp	r6, sl
 80058ac:	dc24      	bgt.n	80058f8 <__kernel_rem_pio2f+0xac>
 80058ae:	f8dd e004 	ldr.w	lr, [sp, #4]
 80058b2:	eddf 7aa4 	vldr	s15, [pc, #656]	@ 8005b44 <__kernel_rem_pio2f+0x2f8>
 80058b6:	4684      	mov	ip, r0
 80058b8:	2400      	movs	r4, #0
 80058ba:	e016      	b.n	80058ea <__kernel_rem_pio2f+0x9e>
 80058bc:	2200      	movs	r2, #0
 80058be:	e7dc      	b.n	800587a <__kernel_rem_pio2f+0x2e>
 80058c0:	42c6      	cmn	r6, r0
 80058c2:	bf5d      	ittte	pl
 80058c4:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 80058c8:	ee07 1a90 	vmovpl	s15, r1
 80058cc:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 80058d0:	eef0 7a47 	vmovmi.f32	s15, s14
 80058d4:	ece4 7a01 	vstmia	r4!, {s15}
 80058d8:	3001      	adds	r0, #1
 80058da:	e7de      	b.n	800589a <__kernel_rem_pio2f+0x4e>
 80058dc:	ecfe 6a01 	vldmia	lr!, {s13}
 80058e0:	ed3c 7a01 	vldmdb	ip!, {s14}
 80058e4:	eee6 7a87 	vfma.f32	s15, s13, s14
 80058e8:	3401      	adds	r4, #1
 80058ea:	455c      	cmp	r4, fp
 80058ec:	ddf6      	ble.n	80058dc <__kernel_rem_pio2f+0x90>
 80058ee:	ece9 7a01 	vstmia	r9!, {s15}
 80058f2:	3601      	adds	r6, #1
 80058f4:	3004      	adds	r0, #4
 80058f6:	e7d8      	b.n	80058aa <__kernel_rem_pio2f+0x5e>
 80058f8:	a908      	add	r1, sp, #32
 80058fa:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80058fe:	9104      	str	r1, [sp, #16]
 8005900:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8005902:	eddf 8a8f 	vldr	s17, [pc, #572]	@ 8005b40 <__kernel_rem_pio2f+0x2f4>
 8005906:	ed9f 9a8d 	vldr	s18, [pc, #564]	@ 8005b3c <__kernel_rem_pio2f+0x2f0>
 800590a:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800590e:	9203      	str	r2, [sp, #12]
 8005910:	4654      	mov	r4, sl
 8005912:	00a2      	lsls	r2, r4, #2
 8005914:	9205      	str	r2, [sp, #20]
 8005916:	aa58      	add	r2, sp, #352	@ 0x160
 8005918:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 800591c:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 8005920:	a944      	add	r1, sp, #272	@ 0x110
 8005922:	aa08      	add	r2, sp, #32
 8005924:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 8005928:	4694      	mov	ip, r2
 800592a:	4626      	mov	r6, r4
 800592c:	2e00      	cmp	r6, #0
 800592e:	dc4c      	bgt.n	80059ca <__kernel_rem_pio2f+0x17e>
 8005930:	4628      	mov	r0, r5
 8005932:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005936:	f7ff ff23 	bl	8005780 <scalbnf>
 800593a:	eeb0 8a40 	vmov.f32	s16, s0
 800593e:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 8005942:	ee28 0a00 	vmul.f32	s0, s16, s0
 8005946:	f000 f9e9 	bl	8005d1c <floorf>
 800594a:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 800594e:	eea0 8a67 	vfms.f32	s16, s0, s15
 8005952:	2d00      	cmp	r5, #0
 8005954:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005958:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800595c:	ee17 9a90 	vmov	r9, s15
 8005960:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005964:	ee38 8a67 	vsub.f32	s16, s16, s15
 8005968:	dd41      	ble.n	80059ee <__kernel_rem_pio2f+0x1a2>
 800596a:	f104 3cff 	add.w	ip, r4, #4294967295	@ 0xffffffff
 800596e:	a908      	add	r1, sp, #32
 8005970:	f1c5 0e08 	rsb	lr, r5, #8
 8005974:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 8005978:	fa46 f00e 	asr.w	r0, r6, lr
 800597c:	4481      	add	r9, r0
 800597e:	fa00 f00e 	lsl.w	r0, r0, lr
 8005982:	1a36      	subs	r6, r6, r0
 8005984:	f1c5 0007 	rsb	r0, r5, #7
 8005988:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 800598c:	4106      	asrs	r6, r0
 800598e:	2e00      	cmp	r6, #0
 8005990:	dd3c      	ble.n	8005a0c <__kernel_rem_pio2f+0x1c0>
 8005992:	f04f 0e00 	mov.w	lr, #0
 8005996:	f109 0901 	add.w	r9, r9, #1
 800599a:	4670      	mov	r0, lr
 800599c:	4574      	cmp	r4, lr
 800599e:	dc68      	bgt.n	8005a72 <__kernel_rem_pio2f+0x226>
 80059a0:	2d00      	cmp	r5, #0
 80059a2:	dd03      	ble.n	80059ac <__kernel_rem_pio2f+0x160>
 80059a4:	2d01      	cmp	r5, #1
 80059a6:	d074      	beq.n	8005a92 <__kernel_rem_pio2f+0x246>
 80059a8:	2d02      	cmp	r5, #2
 80059aa:	d07d      	beq.n	8005aa8 <__kernel_rem_pio2f+0x25c>
 80059ac:	2e02      	cmp	r6, #2
 80059ae:	d12d      	bne.n	8005a0c <__kernel_rem_pio2f+0x1c0>
 80059b0:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80059b4:	ee30 8a48 	vsub.f32	s16, s0, s16
 80059b8:	b340      	cbz	r0, 8005a0c <__kernel_rem_pio2f+0x1c0>
 80059ba:	4628      	mov	r0, r5
 80059bc:	9306      	str	r3, [sp, #24]
 80059be:	f7ff fedf 	bl	8005780 <scalbnf>
 80059c2:	9b06      	ldr	r3, [sp, #24]
 80059c4:	ee38 8a40 	vsub.f32	s16, s16, s0
 80059c8:	e020      	b.n	8005a0c <__kernel_rem_pio2f+0x1c0>
 80059ca:	ee60 7a28 	vmul.f32	s15, s0, s17
 80059ce:	3e01      	subs	r6, #1
 80059d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80059d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80059d8:	eea7 0ac9 	vfms.f32	s0, s15, s18
 80059dc:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80059e0:	ecac 0a01 	vstmia	ip!, {s0}
 80059e4:	ed30 0a01 	vldmdb	r0!, {s0}
 80059e8:	ee37 0a80 	vadd.f32	s0, s15, s0
 80059ec:	e79e      	b.n	800592c <__kernel_rem_pio2f+0xe0>
 80059ee:	d105      	bne.n	80059fc <__kernel_rem_pio2f+0x1b0>
 80059f0:	1e60      	subs	r0, r4, #1
 80059f2:	a908      	add	r1, sp, #32
 80059f4:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 80059f8:	11f6      	asrs	r6, r6, #7
 80059fa:	e7c8      	b.n	800598e <__kernel_rem_pio2f+0x142>
 80059fc:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8005a00:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8005a04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a08:	da31      	bge.n	8005a6e <__kernel_rem_pio2f+0x222>
 8005a0a:	2600      	movs	r6, #0
 8005a0c:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8005a10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a14:	f040 8098 	bne.w	8005b48 <__kernel_rem_pio2f+0x2fc>
 8005a18:	1e60      	subs	r0, r4, #1
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	4550      	cmp	r0, sl
 8005a1e:	da4b      	bge.n	8005ab8 <__kernel_rem_pio2f+0x26c>
 8005a20:	2a00      	cmp	r2, #0
 8005a22:	d065      	beq.n	8005af0 <__kernel_rem_pio2f+0x2a4>
 8005a24:	3c01      	subs	r4, #1
 8005a26:	ab08      	add	r3, sp, #32
 8005a28:	3d08      	subs	r5, #8
 8005a2a:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d0f8      	beq.n	8005a24 <__kernel_rem_pio2f+0x1d8>
 8005a32:	4628      	mov	r0, r5
 8005a34:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8005a38:	f7ff fea2 	bl	8005780 <scalbnf>
 8005a3c:	1c63      	adds	r3, r4, #1
 8005a3e:	aa44      	add	r2, sp, #272	@ 0x110
 8005a40:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8005b40 <__kernel_rem_pio2f+0x2f4>
 8005a44:	0099      	lsls	r1, r3, #2
 8005a46:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8005a4a:	4623      	mov	r3, r4
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	f280 80a9 	bge.w	8005ba4 <__kernel_rem_pio2f+0x358>
 8005a52:	4623      	mov	r3, r4
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	f2c0 80c7 	blt.w	8005be8 <__kernel_rem_pio2f+0x39c>
 8005a5a:	aa44      	add	r2, sp, #272	@ 0x110
 8005a5c:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8005a60:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 8005b38 <__kernel_rem_pio2f+0x2ec>
 8005a64:	eddf 7a37 	vldr	s15, [pc, #220]	@ 8005b44 <__kernel_rem_pio2f+0x2f8>
 8005a68:	2000      	movs	r0, #0
 8005a6a:	1ae2      	subs	r2, r4, r3
 8005a6c:	e0b1      	b.n	8005bd2 <__kernel_rem_pio2f+0x386>
 8005a6e:	2602      	movs	r6, #2
 8005a70:	e78f      	b.n	8005992 <__kernel_rem_pio2f+0x146>
 8005a72:	f852 1b04 	ldr.w	r1, [r2], #4
 8005a76:	b948      	cbnz	r0, 8005a8c <__kernel_rem_pio2f+0x240>
 8005a78:	b121      	cbz	r1, 8005a84 <__kernel_rem_pio2f+0x238>
 8005a7a:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 8005a7e:	f842 1c04 	str.w	r1, [r2, #-4]
 8005a82:	2101      	movs	r1, #1
 8005a84:	f10e 0e01 	add.w	lr, lr, #1
 8005a88:	4608      	mov	r0, r1
 8005a8a:	e787      	b.n	800599c <__kernel_rem_pio2f+0x150>
 8005a8c:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 8005a90:	e7f5      	b.n	8005a7e <__kernel_rem_pio2f+0x232>
 8005a92:	f104 3cff 	add.w	ip, r4, #4294967295	@ 0xffffffff
 8005a96:	aa08      	add	r2, sp, #32
 8005a98:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8005a9c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005aa0:	a908      	add	r1, sp, #32
 8005aa2:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 8005aa6:	e781      	b.n	80059ac <__kernel_rem_pio2f+0x160>
 8005aa8:	f104 3cff 	add.w	ip, r4, #4294967295	@ 0xffffffff
 8005aac:	aa08      	add	r2, sp, #32
 8005aae:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8005ab2:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8005ab6:	e7f3      	b.n	8005aa0 <__kernel_rem_pio2f+0x254>
 8005ab8:	a908      	add	r1, sp, #32
 8005aba:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8005abe:	3801      	subs	r0, #1
 8005ac0:	430a      	orrs	r2, r1
 8005ac2:	e7ab      	b.n	8005a1c <__kernel_rem_pio2f+0x1d0>
 8005ac4:	3201      	adds	r2, #1
 8005ac6:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 8005aca:	2e00      	cmp	r6, #0
 8005acc:	d0fa      	beq.n	8005ac4 <__kernel_rem_pio2f+0x278>
 8005ace:	9905      	ldr	r1, [sp, #20]
 8005ad0:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 8005ad4:	eb0d 0001 	add.w	r0, sp, r1
 8005ad8:	18e6      	adds	r6, r4, r3
 8005ada:	a91c      	add	r1, sp, #112	@ 0x70
 8005adc:	f104 0c01 	add.w	ip, r4, #1
 8005ae0:	384c      	subs	r0, #76	@ 0x4c
 8005ae2:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 8005ae6:	4422      	add	r2, r4
 8005ae8:	4562      	cmp	r2, ip
 8005aea:	da04      	bge.n	8005af6 <__kernel_rem_pio2f+0x2aa>
 8005aec:	4614      	mov	r4, r2
 8005aee:	e710      	b.n	8005912 <__kernel_rem_pio2f+0xc6>
 8005af0:	9804      	ldr	r0, [sp, #16]
 8005af2:	2201      	movs	r2, #1
 8005af4:	e7e7      	b.n	8005ac6 <__kernel_rem_pio2f+0x27a>
 8005af6:	9903      	ldr	r1, [sp, #12]
 8005af8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8005afc:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 8005b00:	9105      	str	r1, [sp, #20]
 8005b02:	ee07 1a90 	vmov	s15, r1
 8005b06:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005b0a:	2400      	movs	r4, #0
 8005b0c:	ece6 7a01 	vstmia	r6!, {s15}
 8005b10:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 8005b44 <__kernel_rem_pio2f+0x2f8>
 8005b14:	46b1      	mov	r9, r6
 8005b16:	455c      	cmp	r4, fp
 8005b18:	dd04      	ble.n	8005b24 <__kernel_rem_pio2f+0x2d8>
 8005b1a:	ece0 7a01 	vstmia	r0!, {s15}
 8005b1e:	f10c 0c01 	add.w	ip, ip, #1
 8005b22:	e7e1      	b.n	8005ae8 <__kernel_rem_pio2f+0x29c>
 8005b24:	ecfe 6a01 	vldmia	lr!, {s13}
 8005b28:	ed39 7a01 	vldmdb	r9!, {s14}
 8005b2c:	3401      	adds	r4, #1
 8005b2e:	eee6 7a87 	vfma.f32	s15, s13, s14
 8005b32:	e7f0      	b.n	8005b16 <__kernel_rem_pio2f+0x2ca>
 8005b34:	08006190 	.word	0x08006190
 8005b38:	08006164 	.word	0x08006164
 8005b3c:	43800000 	.word	0x43800000
 8005b40:	3b800000 	.word	0x3b800000
 8005b44:	00000000 	.word	0x00000000
 8005b48:	9b02      	ldr	r3, [sp, #8]
 8005b4a:	eeb0 0a48 	vmov.f32	s0, s16
 8005b4e:	eba3 0008 	sub.w	r0, r3, r8
 8005b52:	f7ff fe15 	bl	8005780 <scalbnf>
 8005b56:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 8005b3c <__kernel_rem_pio2f+0x2f0>
 8005b5a:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8005b5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b62:	db19      	blt.n	8005b98 <__kernel_rem_pio2f+0x34c>
 8005b64:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 8005b40 <__kernel_rem_pio2f+0x2f4>
 8005b68:	ee60 7a27 	vmul.f32	s15, s0, s15
 8005b6c:	aa08      	add	r2, sp, #32
 8005b6e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005b72:	3508      	adds	r5, #8
 8005b74:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005b78:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8005b7c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005b80:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8005b84:	ee10 3a10 	vmov	r3, s0
 8005b88:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8005b8c:	ee17 3a90 	vmov	r3, s15
 8005b90:	3401      	adds	r4, #1
 8005b92:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8005b96:	e74c      	b.n	8005a32 <__kernel_rem_pio2f+0x1e6>
 8005b98:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8005b9c:	aa08      	add	r2, sp, #32
 8005b9e:	ee10 3a10 	vmov	r3, s0
 8005ba2:	e7f6      	b.n	8005b92 <__kernel_rem_pio2f+0x346>
 8005ba4:	a808      	add	r0, sp, #32
 8005ba6:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8005baa:	9001      	str	r0, [sp, #4]
 8005bac:	ee07 0a90 	vmov	s15, r0
 8005bb0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005bb4:	3b01      	subs	r3, #1
 8005bb6:	ee67 7a80 	vmul.f32	s15, s15, s0
 8005bba:	ee20 0a07 	vmul.f32	s0, s0, s14
 8005bbe:	ed62 7a01 	vstmdb	r2!, {s15}
 8005bc2:	e743      	b.n	8005a4c <__kernel_rem_pio2f+0x200>
 8005bc4:	ecfc 6a01 	vldmia	ip!, {s13}
 8005bc8:	ecb5 7a01 	vldmia	r5!, {s14}
 8005bcc:	eee6 7a87 	vfma.f32	s15, s13, s14
 8005bd0:	3001      	adds	r0, #1
 8005bd2:	4550      	cmp	r0, sl
 8005bd4:	dc01      	bgt.n	8005bda <__kernel_rem_pio2f+0x38e>
 8005bd6:	4290      	cmp	r0, r2
 8005bd8:	ddf4      	ble.n	8005bc4 <__kernel_rem_pio2f+0x378>
 8005bda:	a858      	add	r0, sp, #352	@ 0x160
 8005bdc:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8005be0:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 8005be4:	3b01      	subs	r3, #1
 8005be6:	e735      	b.n	8005a54 <__kernel_rem_pio2f+0x208>
 8005be8:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8005bea:	2b02      	cmp	r3, #2
 8005bec:	dc09      	bgt.n	8005c02 <__kernel_rem_pio2f+0x3b6>
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	dc27      	bgt.n	8005c42 <__kernel_rem_pio2f+0x3f6>
 8005bf2:	d040      	beq.n	8005c76 <__kernel_rem_pio2f+0x42a>
 8005bf4:	f009 0007 	and.w	r0, r9, #7
 8005bf8:	b059      	add	sp, #356	@ 0x164
 8005bfa:	ecbd 8b04 	vpop	{d8-d9}
 8005bfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c02:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8005c04:	2b03      	cmp	r3, #3
 8005c06:	d1f5      	bne.n	8005bf4 <__kernel_rem_pio2f+0x3a8>
 8005c08:	aa30      	add	r2, sp, #192	@ 0xc0
 8005c0a:	1f0b      	subs	r3, r1, #4
 8005c0c:	4413      	add	r3, r2
 8005c0e:	461a      	mov	r2, r3
 8005c10:	4620      	mov	r0, r4
 8005c12:	2800      	cmp	r0, #0
 8005c14:	dc50      	bgt.n	8005cb8 <__kernel_rem_pio2f+0x46c>
 8005c16:	4622      	mov	r2, r4
 8005c18:	2a01      	cmp	r2, #1
 8005c1a:	dc5d      	bgt.n	8005cd8 <__kernel_rem_pio2f+0x48c>
 8005c1c:	ab30      	add	r3, sp, #192	@ 0xc0
 8005c1e:	ed5f 7a37 	vldr	s15, [pc, #-220]	@ 8005b44 <__kernel_rem_pio2f+0x2f8>
 8005c22:	440b      	add	r3, r1
 8005c24:	2c01      	cmp	r4, #1
 8005c26:	dc67      	bgt.n	8005cf8 <__kernel_rem_pio2f+0x4ac>
 8005c28:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 8005c2c:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 8005c30:	2e00      	cmp	r6, #0
 8005c32:	d167      	bne.n	8005d04 <__kernel_rem_pio2f+0x4b8>
 8005c34:	edc7 6a00 	vstr	s13, [r7]
 8005c38:	ed87 7a01 	vstr	s14, [r7, #4]
 8005c3c:	edc7 7a02 	vstr	s15, [r7, #8]
 8005c40:	e7d8      	b.n	8005bf4 <__kernel_rem_pio2f+0x3a8>
 8005c42:	ab30      	add	r3, sp, #192	@ 0xc0
 8005c44:	ed1f 7a41 	vldr	s14, [pc, #-260]	@ 8005b44 <__kernel_rem_pio2f+0x2f8>
 8005c48:	440b      	add	r3, r1
 8005c4a:	4622      	mov	r2, r4
 8005c4c:	2a00      	cmp	r2, #0
 8005c4e:	da24      	bge.n	8005c9a <__kernel_rem_pio2f+0x44e>
 8005c50:	b34e      	cbz	r6, 8005ca6 <__kernel_rem_pio2f+0x45a>
 8005c52:	eef1 7a47 	vneg.f32	s15, s14
 8005c56:	edc7 7a00 	vstr	s15, [r7]
 8005c5a:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 8005c5e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005c62:	aa31      	add	r2, sp, #196	@ 0xc4
 8005c64:	2301      	movs	r3, #1
 8005c66:	429c      	cmp	r4, r3
 8005c68:	da20      	bge.n	8005cac <__kernel_rem_pio2f+0x460>
 8005c6a:	b10e      	cbz	r6, 8005c70 <__kernel_rem_pio2f+0x424>
 8005c6c:	eef1 7a67 	vneg.f32	s15, s15
 8005c70:	edc7 7a01 	vstr	s15, [r7, #4]
 8005c74:	e7be      	b.n	8005bf4 <__kernel_rem_pio2f+0x3a8>
 8005c76:	ab30      	add	r3, sp, #192	@ 0xc0
 8005c78:	ed5f 7a4e 	vldr	s15, [pc, #-312]	@ 8005b44 <__kernel_rem_pio2f+0x2f8>
 8005c7c:	440b      	add	r3, r1
 8005c7e:	2c00      	cmp	r4, #0
 8005c80:	da05      	bge.n	8005c8e <__kernel_rem_pio2f+0x442>
 8005c82:	b10e      	cbz	r6, 8005c88 <__kernel_rem_pio2f+0x43c>
 8005c84:	eef1 7a67 	vneg.f32	s15, s15
 8005c88:	edc7 7a00 	vstr	s15, [r7]
 8005c8c:	e7b2      	b.n	8005bf4 <__kernel_rem_pio2f+0x3a8>
 8005c8e:	ed33 7a01 	vldmdb	r3!, {s14}
 8005c92:	3c01      	subs	r4, #1
 8005c94:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005c98:	e7f1      	b.n	8005c7e <__kernel_rem_pio2f+0x432>
 8005c9a:	ed73 7a01 	vldmdb	r3!, {s15}
 8005c9e:	3a01      	subs	r2, #1
 8005ca0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005ca4:	e7d2      	b.n	8005c4c <__kernel_rem_pio2f+0x400>
 8005ca6:	eef0 7a47 	vmov.f32	s15, s14
 8005caa:	e7d4      	b.n	8005c56 <__kernel_rem_pio2f+0x40a>
 8005cac:	ecb2 7a01 	vldmia	r2!, {s14}
 8005cb0:	3301      	adds	r3, #1
 8005cb2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005cb6:	e7d6      	b.n	8005c66 <__kernel_rem_pio2f+0x41a>
 8005cb8:	ed72 7a01 	vldmdb	r2!, {s15}
 8005cbc:	edd2 6a01 	vldr	s13, [r2, #4]
 8005cc0:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8005cc4:	3801      	subs	r0, #1
 8005cc6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005cca:	ed82 7a00 	vstr	s14, [r2]
 8005cce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005cd2:	edc2 7a01 	vstr	s15, [r2, #4]
 8005cd6:	e79c      	b.n	8005c12 <__kernel_rem_pio2f+0x3c6>
 8005cd8:	ed73 7a01 	vldmdb	r3!, {s15}
 8005cdc:	edd3 6a01 	vldr	s13, [r3, #4]
 8005ce0:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8005ce4:	3a01      	subs	r2, #1
 8005ce6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005cea:	ed83 7a00 	vstr	s14, [r3]
 8005cee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005cf2:	edc3 7a01 	vstr	s15, [r3, #4]
 8005cf6:	e78f      	b.n	8005c18 <__kernel_rem_pio2f+0x3cc>
 8005cf8:	ed33 7a01 	vldmdb	r3!, {s14}
 8005cfc:	3c01      	subs	r4, #1
 8005cfe:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005d02:	e78f      	b.n	8005c24 <__kernel_rem_pio2f+0x3d8>
 8005d04:	eef1 6a66 	vneg.f32	s13, s13
 8005d08:	eeb1 7a47 	vneg.f32	s14, s14
 8005d0c:	edc7 6a00 	vstr	s13, [r7]
 8005d10:	ed87 7a01 	vstr	s14, [r7, #4]
 8005d14:	eef1 7a67 	vneg.f32	s15, s15
 8005d18:	e790      	b.n	8005c3c <__kernel_rem_pio2f+0x3f0>
 8005d1a:	bf00      	nop

08005d1c <floorf>:
 8005d1c:	ee10 3a10 	vmov	r3, s0
 8005d20:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8005d24:	3a7f      	subs	r2, #127	@ 0x7f
 8005d26:	2a16      	cmp	r2, #22
 8005d28:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8005d2c:	dc2b      	bgt.n	8005d86 <floorf+0x6a>
 8005d2e:	2a00      	cmp	r2, #0
 8005d30:	da12      	bge.n	8005d58 <floorf+0x3c>
 8005d32:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8005d98 <floorf+0x7c>
 8005d36:	ee30 0a27 	vadd.f32	s0, s0, s15
 8005d3a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8005d3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d42:	dd06      	ble.n	8005d52 <floorf+0x36>
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	da24      	bge.n	8005d92 <floorf+0x76>
 8005d48:	2900      	cmp	r1, #0
 8005d4a:	4b14      	ldr	r3, [pc, #80]	@ (8005d9c <floorf+0x80>)
 8005d4c:	bf08      	it	eq
 8005d4e:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 8005d52:	ee00 3a10 	vmov	s0, r3
 8005d56:	4770      	bx	lr
 8005d58:	4911      	ldr	r1, [pc, #68]	@ (8005da0 <floorf+0x84>)
 8005d5a:	4111      	asrs	r1, r2
 8005d5c:	420b      	tst	r3, r1
 8005d5e:	d0fa      	beq.n	8005d56 <floorf+0x3a>
 8005d60:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 8005d98 <floorf+0x7c>
 8005d64:	ee30 0a27 	vadd.f32	s0, s0, s15
 8005d68:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8005d6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d70:	ddef      	ble.n	8005d52 <floorf+0x36>
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	bfbe      	ittt	lt
 8005d76:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 8005d7a:	fa40 f202 	asrlt.w	r2, r0, r2
 8005d7e:	189b      	addlt	r3, r3, r2
 8005d80:	ea23 0301 	bic.w	r3, r3, r1
 8005d84:	e7e5      	b.n	8005d52 <floorf+0x36>
 8005d86:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8005d8a:	d3e4      	bcc.n	8005d56 <floorf+0x3a>
 8005d8c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8005d90:	4770      	bx	lr
 8005d92:	2300      	movs	r3, #0
 8005d94:	e7dd      	b.n	8005d52 <floorf+0x36>
 8005d96:	bf00      	nop
 8005d98:	7149f2ca 	.word	0x7149f2ca
 8005d9c:	bf800000 	.word	0xbf800000
 8005da0:	007fffff 	.word	0x007fffff

08005da4 <_init>:
 8005da4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005da6:	bf00      	nop
 8005da8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005daa:	bc08      	pop	{r3}
 8005dac:	469e      	mov	lr, r3
 8005dae:	4770      	bx	lr

08005db0 <_fini>:
 8005db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005db2:	bf00      	nop
 8005db4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005db6:	bc08      	pop	{r3}
 8005db8:	469e      	mov	lr, r3
 8005dba:	4770      	bx	lr
