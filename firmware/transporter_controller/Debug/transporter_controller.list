
transporter_controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001d284  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001c4c  0801d468  0801d468  0001e468  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801f0b4  0801f0b4  00021488  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0801f0b4  0801f0b4  000200b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801f0bc  0801f0bc  00021488  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  0801f0bc  0801f0bc  000200bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801f0c8  0801f0c8  000200c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000488  20000000  0801f0cc  00021000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000b374  20000488  0801f554  00021488  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000b7fc  0801f554  000217fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00021488  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002b918  00000000  00000000  000214b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000609d  00000000  00000000  0004cdd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001e50  00000000  00000000  00052e70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001725  00000000  00000000  00054cc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002f6f6  00000000  00000000  000563e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002980a  00000000  00000000  00085adb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00117491  00000000  00000000  000af2e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000076  00000000  00000000  001c6776  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008fd8  00000000  00000000  001c67ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  001cf7c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000488 	.word	0x20000488
 80001fc:	00000000 	.word	0x00000000
 8000200:	0801d44c 	.word	0x0801d44c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000048c 	.word	0x2000048c
 800021c:	0801d44c 	.word	0x0801d44c

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr

08000234 <strlen>:
 8000234:	4603      	mov	r3, r0
 8000236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023a:	2a00      	cmp	r2, #0
 800023c:	d1fb      	bne.n	8000236 <strlen+0x2>
 800023e:	1a18      	subs	r0, r3, r0
 8000240:	3801      	subs	r0, #1
 8000242:	4770      	bx	lr
	...

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	@ 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_dmul>:
 8000668:	b570      	push	{r4, r5, r6, lr}
 800066a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800066e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000672:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000676:	bf1d      	ittte	ne
 8000678:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800067c:	ea94 0f0c 	teqne	r4, ip
 8000680:	ea95 0f0c 	teqne	r5, ip
 8000684:	f000 f8de 	bleq	8000844 <__aeabi_dmul+0x1dc>
 8000688:	442c      	add	r4, r5
 800068a:	ea81 0603 	eor.w	r6, r1, r3
 800068e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000692:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000696:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800069a:	bf18      	it	ne
 800069c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006a0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006a4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80006a8:	d038      	beq.n	800071c <__aeabi_dmul+0xb4>
 80006aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80006ae:	f04f 0500 	mov.w	r5, #0
 80006b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006b6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006be:	f04f 0600 	mov.w	r6, #0
 80006c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006c6:	f09c 0f00 	teq	ip, #0
 80006ca:	bf18      	it	ne
 80006cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006d0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006d4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006d8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006dc:	d204      	bcs.n	80006e8 <__aeabi_dmul+0x80>
 80006de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006e2:	416d      	adcs	r5, r5
 80006e4:	eb46 0606 	adc.w	r6, r6, r6
 80006e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006fc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000700:	bf88      	it	hi
 8000702:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000706:	d81e      	bhi.n	8000746 <__aeabi_dmul+0xde>
 8000708:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800070c:	bf08      	it	eq
 800070e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000712:	f150 0000 	adcs.w	r0, r0, #0
 8000716:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000720:	ea46 0101 	orr.w	r1, r6, r1
 8000724:	ea40 0002 	orr.w	r0, r0, r2
 8000728:	ea81 0103 	eor.w	r1, r1, r3
 800072c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000730:	bfc2      	ittt	gt
 8000732:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000736:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800073a:	bd70      	popgt	{r4, r5, r6, pc}
 800073c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000740:	f04f 0e00 	mov.w	lr, #0
 8000744:	3c01      	subs	r4, #1
 8000746:	f300 80ab 	bgt.w	80008a0 <__aeabi_dmul+0x238>
 800074a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800074e:	bfde      	ittt	le
 8000750:	2000      	movle	r0, #0
 8000752:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000756:	bd70      	pople	{r4, r5, r6, pc}
 8000758:	f1c4 0400 	rsb	r4, r4, #0
 800075c:	3c20      	subs	r4, #32
 800075e:	da35      	bge.n	80007cc <__aeabi_dmul+0x164>
 8000760:	340c      	adds	r4, #12
 8000762:	dc1b      	bgt.n	800079c <__aeabi_dmul+0x134>
 8000764:	f104 0414 	add.w	r4, r4, #20
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f305 	lsl.w	r3, r0, r5
 8000770:	fa20 f004 	lsr.w	r0, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000780:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000784:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000788:	fa21 f604 	lsr.w	r6, r1, r4
 800078c:	eb42 0106 	adc.w	r1, r2, r6
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 040c 	rsb	r4, r4, #12
 80007a0:	f1c4 0520 	rsb	r5, r4, #32
 80007a4:	fa00 f304 	lsl.w	r3, r0, r4
 80007a8:	fa20 f005 	lsr.w	r0, r0, r5
 80007ac:	fa01 f204 	lsl.w	r2, r1, r4
 80007b0:	ea40 0002 	orr.w	r0, r0, r2
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007bc:	f141 0100 	adc.w	r1, r1, #0
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f1c4 0520 	rsb	r5, r4, #32
 80007d0:	fa00 f205 	lsl.w	r2, r0, r5
 80007d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007d8:	fa20 f304 	lsr.w	r3, r0, r4
 80007dc:	fa01 f205 	lsl.w	r2, r1, r5
 80007e0:	ea43 0302 	orr.w	r3, r3, r2
 80007e4:	fa21 f004 	lsr.w	r0, r1, r4
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ec:	fa21 f204 	lsr.w	r2, r1, r4
 80007f0:	ea20 0002 	bic.w	r0, r0, r2
 80007f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007fc:	bf08      	it	eq
 80007fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000802:	bd70      	pop	{r4, r5, r6, pc}
 8000804:	f094 0f00 	teq	r4, #0
 8000808:	d10f      	bne.n	800082a <__aeabi_dmul+0x1c2>
 800080a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800080e:	0040      	lsls	r0, r0, #1
 8000810:	eb41 0101 	adc.w	r1, r1, r1
 8000814:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3c01      	subeq	r4, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1a6>
 800081e:	ea41 0106 	orr.w	r1, r1, r6
 8000822:	f095 0f00 	teq	r5, #0
 8000826:	bf18      	it	ne
 8000828:	4770      	bxne	lr
 800082a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800082e:	0052      	lsls	r2, r2, #1
 8000830:	eb43 0303 	adc.w	r3, r3, r3
 8000834:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000838:	bf08      	it	eq
 800083a:	3d01      	subeq	r5, #1
 800083c:	d0f7      	beq.n	800082e <__aeabi_dmul+0x1c6>
 800083e:	ea43 0306 	orr.w	r3, r3, r6
 8000842:	4770      	bx	lr
 8000844:	ea94 0f0c 	teq	r4, ip
 8000848:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800084c:	bf18      	it	ne
 800084e:	ea95 0f0c 	teqne	r5, ip
 8000852:	d00c      	beq.n	800086e <__aeabi_dmul+0x206>
 8000854:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000858:	bf18      	it	ne
 800085a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085e:	d1d1      	bne.n	8000804 <__aeabi_dmul+0x19c>
 8000860:	ea81 0103 	eor.w	r1, r1, r3
 8000864:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000868:	f04f 0000 	mov.w	r0, #0
 800086c:	bd70      	pop	{r4, r5, r6, pc}
 800086e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000872:	bf06      	itte	eq
 8000874:	4610      	moveq	r0, r2
 8000876:	4619      	moveq	r1, r3
 8000878:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800087c:	d019      	beq.n	80008b2 <__aeabi_dmul+0x24a>
 800087e:	ea94 0f0c 	teq	r4, ip
 8000882:	d102      	bne.n	800088a <__aeabi_dmul+0x222>
 8000884:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000888:	d113      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800088a:	ea95 0f0c 	teq	r5, ip
 800088e:	d105      	bne.n	800089c <__aeabi_dmul+0x234>
 8000890:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000894:	bf1c      	itt	ne
 8000896:	4610      	movne	r0, r2
 8000898:	4619      	movne	r1, r3
 800089a:	d10a      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800089c:	ea81 0103 	eor.w	r1, r1, r3
 80008a0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80008a4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008a8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80008ac:	f04f 0000 	mov.w	r0, #0
 80008b0:	bd70      	pop	{r4, r5, r6, pc}
 80008b2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008b6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008ba:	bd70      	pop	{r4, r5, r6, pc}

080008bc <__aeabi_ddiv>:
 80008bc:	b570      	push	{r4, r5, r6, lr}
 80008be:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008c2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ca:	bf1d      	ittte	ne
 80008cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008d0:	ea94 0f0c 	teqne	r4, ip
 80008d4:	ea95 0f0c 	teqne	r5, ip
 80008d8:	f000 f8a7 	bleq	8000a2a <__aeabi_ddiv+0x16e>
 80008dc:	eba4 0405 	sub.w	r4, r4, r5
 80008e0:	ea81 0e03 	eor.w	lr, r1, r3
 80008e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ec:	f000 8088 	beq.w	8000a00 <__aeabi_ddiv+0x144>
 80008f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008f4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000900:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000904:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000908:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800090c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000910:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000914:	429d      	cmp	r5, r3
 8000916:	bf08      	it	eq
 8000918:	4296      	cmpeq	r6, r2
 800091a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800091e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000922:	d202      	bcs.n	800092a <__aeabi_ddiv+0x6e>
 8000924:	085b      	lsrs	r3, r3, #1
 8000926:	ea4f 0232 	mov.w	r2, r2, rrx
 800092a:	1ab6      	subs	r6, r6, r2
 800092c:	eb65 0503 	sbc.w	r5, r5, r3
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800093a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000968:	085b      	lsrs	r3, r3, #1
 800096a:	ea4f 0232 	mov.w	r2, r2, rrx
 800096e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000972:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000976:	bf22      	ittt	cs
 8000978:	1ab6      	subcs	r6, r6, r2
 800097a:	4675      	movcs	r5, lr
 800097c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000980:	085b      	lsrs	r3, r3, #1
 8000982:	ea4f 0232 	mov.w	r2, r2, rrx
 8000986:	ebb6 0e02 	subs.w	lr, r6, r2
 800098a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800098e:	bf22      	ittt	cs
 8000990:	1ab6      	subcs	r6, r6, r2
 8000992:	4675      	movcs	r5, lr
 8000994:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000998:	ea55 0e06 	orrs.w	lr, r5, r6
 800099c:	d018      	beq.n	80009d0 <__aeabi_ddiv+0x114>
 800099e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009ba:	d1c0      	bne.n	800093e <__aeabi_ddiv+0x82>
 80009bc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009c0:	d10b      	bne.n	80009da <__aeabi_ddiv+0x11e>
 80009c2:	ea41 0100 	orr.w	r1, r1, r0
 80009c6:	f04f 0000 	mov.w	r0, #0
 80009ca:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ce:	e7b6      	b.n	800093e <__aeabi_ddiv+0x82>
 80009d0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009d4:	bf04      	itt	eq
 80009d6:	4301      	orreq	r1, r0
 80009d8:	2000      	moveq	r0, #0
 80009da:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009de:	bf88      	it	hi
 80009e0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009e4:	f63f aeaf 	bhi.w	8000746 <__aeabi_dmul+0xde>
 80009e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ec:	bf04      	itt	eq
 80009ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009f6:	f150 0000 	adcs.w	r0, r0, #0
 80009fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009fe:	bd70      	pop	{r4, r5, r6, pc}
 8000a00:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000a04:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a08:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a0c:	bfc2      	ittt	gt
 8000a0e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a12:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a16:	bd70      	popgt	{r4, r5, r6, pc}
 8000a18:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a1c:	f04f 0e00 	mov.w	lr, #0
 8000a20:	3c01      	subs	r4, #1
 8000a22:	e690      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a24:	ea45 0e06 	orr.w	lr, r5, r6
 8000a28:	e68d      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a2a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a2e:	ea94 0f0c 	teq	r4, ip
 8000a32:	bf08      	it	eq
 8000a34:	ea95 0f0c 	teqeq	r5, ip
 8000a38:	f43f af3b 	beq.w	80008b2 <__aeabi_dmul+0x24a>
 8000a3c:	ea94 0f0c 	teq	r4, ip
 8000a40:	d10a      	bne.n	8000a58 <__aeabi_ddiv+0x19c>
 8000a42:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a46:	f47f af34 	bne.w	80008b2 <__aeabi_dmul+0x24a>
 8000a4a:	ea95 0f0c 	teq	r5, ip
 8000a4e:	f47f af25 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a52:	4610      	mov	r0, r2
 8000a54:	4619      	mov	r1, r3
 8000a56:	e72c      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a58:	ea95 0f0c 	teq	r5, ip
 8000a5c:	d106      	bne.n	8000a6c <__aeabi_ddiv+0x1b0>
 8000a5e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a62:	f43f aefd 	beq.w	8000860 <__aeabi_dmul+0x1f8>
 8000a66:	4610      	mov	r0, r2
 8000a68:	4619      	mov	r1, r3
 8000a6a:	e722      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a6c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a76:	f47f aec5 	bne.w	8000804 <__aeabi_dmul+0x19c>
 8000a7a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a7e:	f47f af0d 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a82:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a86:	f47f aeeb 	bne.w	8000860 <__aeabi_dmul+0x1f8>
 8000a8a:	e712      	b.n	80008b2 <__aeabi_dmul+0x24a>

08000a8c <__gedf2>:
 8000a8c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a90:	e006      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a92:	bf00      	nop

08000a94 <__ledf2>:
 8000a94:	f04f 0c01 	mov.w	ip, #1
 8000a98:	e002      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a9a:	bf00      	nop

08000a9c <__cmpdf2>:
 8000a9c:	f04f 0c01 	mov.w	ip, #1
 8000aa0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000aa4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab0:	bf18      	it	ne
 8000ab2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000ab6:	d01b      	beq.n	8000af0 <__cmpdf2+0x54>
 8000ab8:	b001      	add	sp, #4
 8000aba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000abe:	bf0c      	ite	eq
 8000ac0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ac4:	ea91 0f03 	teqne	r1, r3
 8000ac8:	bf02      	ittt	eq
 8000aca:	ea90 0f02 	teqeq	r0, r2
 8000ace:	2000      	moveq	r0, #0
 8000ad0:	4770      	bxeq	lr
 8000ad2:	f110 0f00 	cmn.w	r0, #0
 8000ad6:	ea91 0f03 	teq	r1, r3
 8000ada:	bf58      	it	pl
 8000adc:	4299      	cmppl	r1, r3
 8000ade:	bf08      	it	eq
 8000ae0:	4290      	cmpeq	r0, r2
 8000ae2:	bf2c      	ite	cs
 8000ae4:	17d8      	asrcs	r0, r3, #31
 8000ae6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aea:	f040 0001 	orr.w	r0, r0, #1
 8000aee:	4770      	bx	lr
 8000af0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d102      	bne.n	8000b00 <__cmpdf2+0x64>
 8000afa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000afe:	d107      	bne.n	8000b10 <__cmpdf2+0x74>
 8000b00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b08:	d1d6      	bne.n	8000ab8 <__cmpdf2+0x1c>
 8000b0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b0e:	d0d3      	beq.n	8000ab8 <__cmpdf2+0x1c>
 8000b10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdrcmple>:
 8000b18:	4684      	mov	ip, r0
 8000b1a:	4610      	mov	r0, r2
 8000b1c:	4662      	mov	r2, ip
 8000b1e:	468c      	mov	ip, r1
 8000b20:	4619      	mov	r1, r3
 8000b22:	4663      	mov	r3, ip
 8000b24:	e000      	b.n	8000b28 <__aeabi_cdcmpeq>
 8000b26:	bf00      	nop

08000b28 <__aeabi_cdcmpeq>:
 8000b28:	b501      	push	{r0, lr}
 8000b2a:	f7ff ffb7 	bl	8000a9c <__cmpdf2>
 8000b2e:	2800      	cmp	r0, #0
 8000b30:	bf48      	it	mi
 8000b32:	f110 0f00 	cmnmi.w	r0, #0
 8000b36:	bd01      	pop	{r0, pc}

08000b38 <__aeabi_dcmpeq>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff fff4 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b40:	bf0c      	ite	eq
 8000b42:	2001      	moveq	r0, #1
 8000b44:	2000      	movne	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmplt>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffea 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b54:	bf34      	ite	cc
 8000b56:	2001      	movcc	r0, #1
 8000b58:	2000      	movcs	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmple>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffe0 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b68:	bf94      	ite	ls
 8000b6a:	2001      	movls	r0, #1
 8000b6c:	2000      	movhi	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpge>:
 8000b74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b78:	f7ff ffce 	bl	8000b18 <__aeabi_cdrcmple>
 8000b7c:	bf94      	ite	ls
 8000b7e:	2001      	movls	r0, #1
 8000b80:	2000      	movhi	r0, #0
 8000b82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b86:	bf00      	nop

08000b88 <__aeabi_dcmpgt>:
 8000b88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b8c:	f7ff ffc4 	bl	8000b18 <__aeabi_cdrcmple>
 8000b90:	bf34      	ite	cc
 8000b92:	2001      	movcc	r0, #1
 8000b94:	2000      	movcs	r0, #0
 8000b96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b9a:	bf00      	nop

08000b9c <__aeabi_d2uiz>:
 8000b9c:	004a      	lsls	r2, r1, #1
 8000b9e:	d211      	bcs.n	8000bc4 <__aeabi_d2uiz+0x28>
 8000ba0:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba4:	d211      	bcs.n	8000bca <__aeabi_d2uiz+0x2e>
 8000ba6:	d50d      	bpl.n	8000bc4 <__aeabi_d2uiz+0x28>
 8000ba8:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bb0:	d40e      	bmi.n	8000bd0 <__aeabi_d2uiz+0x34>
 8000bb2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	4770      	bx	lr
 8000bc4:	f04f 0000 	mov.w	r0, #0
 8000bc8:	4770      	bx	lr
 8000bca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bce:	d102      	bne.n	8000bd6 <__aeabi_d2uiz+0x3a>
 8000bd0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000bd4:	4770      	bx	lr
 8000bd6:	f04f 0000 	mov.w	r0, #0
 8000bda:	4770      	bx	lr

08000bdc <__aeabi_d2f>:
 8000bdc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000be0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000be4:	bf24      	itt	cs
 8000be6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bea:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bee:	d90d      	bls.n	8000c0c <__aeabi_d2f+0x30>
 8000bf0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bf4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bf8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bfc:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c00:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c04:	bf08      	it	eq
 8000c06:	f020 0001 	biceq.w	r0, r0, #1
 8000c0a:	4770      	bx	lr
 8000c0c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c10:	d121      	bne.n	8000c56 <__aeabi_d2f+0x7a>
 8000c12:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c16:	bfbc      	itt	lt
 8000c18:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c1c:	4770      	bxlt	lr
 8000c1e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c22:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c26:	f1c2 0218 	rsb	r2, r2, #24
 8000c2a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c2e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c32:	fa20 f002 	lsr.w	r0, r0, r2
 8000c36:	bf18      	it	ne
 8000c38:	f040 0001 	orrne.w	r0, r0, #1
 8000c3c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c40:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c44:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c48:	ea40 000c 	orr.w	r0, r0, ip
 8000c4c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c50:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c54:	e7cc      	b.n	8000bf0 <__aeabi_d2f+0x14>
 8000c56:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c5a:	d107      	bne.n	8000c6c <__aeabi_d2f+0x90>
 8000c5c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c60:	bf1e      	ittt	ne
 8000c62:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c66:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c6a:	4770      	bxne	lr
 8000c6c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c70:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c74:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c78:	4770      	bx	lr
 8000c7a:	bf00      	nop

08000c7c <__aeabi_ldivmod>:
 8000c7c:	b97b      	cbnz	r3, 8000c9e <__aeabi_ldivmod+0x22>
 8000c7e:	b972      	cbnz	r2, 8000c9e <__aeabi_ldivmod+0x22>
 8000c80:	2900      	cmp	r1, #0
 8000c82:	bfbe      	ittt	lt
 8000c84:	2000      	movlt	r0, #0
 8000c86:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000c8a:	e006      	blt.n	8000c9a <__aeabi_ldivmod+0x1e>
 8000c8c:	bf08      	it	eq
 8000c8e:	2800      	cmpeq	r0, #0
 8000c90:	bf1c      	itt	ne
 8000c92:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000c96:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c9a:	f000 b9d3 	b.w	8001044 <__aeabi_idiv0>
 8000c9e:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca2:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca6:	2900      	cmp	r1, #0
 8000ca8:	db09      	blt.n	8000cbe <__aeabi_ldivmod+0x42>
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	db1a      	blt.n	8000ce4 <__aeabi_ldivmod+0x68>
 8000cae:	f000 f84d 	bl	8000d4c <__udivmoddi4>
 8000cb2:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cba:	b004      	add	sp, #16
 8000cbc:	4770      	bx	lr
 8000cbe:	4240      	negs	r0, r0
 8000cc0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	db1b      	blt.n	8000d00 <__aeabi_ldivmod+0x84>
 8000cc8:	f000 f840 	bl	8000d4c <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	4252      	negs	r2, r2
 8000cde:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000ce2:	4770      	bx	lr
 8000ce4:	4252      	negs	r2, r2
 8000ce6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cea:	f000 f82f 	bl	8000d4c <__udivmoddi4>
 8000cee:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf6:	b004      	add	sp, #16
 8000cf8:	4240      	negs	r0, r0
 8000cfa:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cfe:	4770      	bx	lr
 8000d00:	4252      	negs	r2, r2
 8000d02:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d06:	f000 f821 	bl	8000d4c <__udivmoddi4>
 8000d0a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d0e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d12:	b004      	add	sp, #16
 8000d14:	4252      	negs	r2, r2
 8000d16:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d1a:	4770      	bx	lr

08000d1c <__aeabi_uldivmod>:
 8000d1c:	b953      	cbnz	r3, 8000d34 <__aeabi_uldivmod+0x18>
 8000d1e:	b94a      	cbnz	r2, 8000d34 <__aeabi_uldivmod+0x18>
 8000d20:	2900      	cmp	r1, #0
 8000d22:	bf08      	it	eq
 8000d24:	2800      	cmpeq	r0, #0
 8000d26:	bf1c      	itt	ne
 8000d28:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000d2c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000d30:	f000 b988 	b.w	8001044 <__aeabi_idiv0>
 8000d34:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d38:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d3c:	f000 f806 	bl	8000d4c <__udivmoddi4>
 8000d40:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d44:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d48:	b004      	add	sp, #16
 8000d4a:	4770      	bx	lr

08000d4c <__udivmoddi4>:
 8000d4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d50:	9d08      	ldr	r5, [sp, #32]
 8000d52:	468e      	mov	lr, r1
 8000d54:	4604      	mov	r4, r0
 8000d56:	4688      	mov	r8, r1
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d14a      	bne.n	8000df2 <__udivmoddi4+0xa6>
 8000d5c:	428a      	cmp	r2, r1
 8000d5e:	4617      	mov	r7, r2
 8000d60:	d962      	bls.n	8000e28 <__udivmoddi4+0xdc>
 8000d62:	fab2 f682 	clz	r6, r2
 8000d66:	b14e      	cbz	r6, 8000d7c <__udivmoddi4+0x30>
 8000d68:	f1c6 0320 	rsb	r3, r6, #32
 8000d6c:	fa01 f806 	lsl.w	r8, r1, r6
 8000d70:	fa20 f303 	lsr.w	r3, r0, r3
 8000d74:	40b7      	lsls	r7, r6
 8000d76:	ea43 0808 	orr.w	r8, r3, r8
 8000d7a:	40b4      	lsls	r4, r6
 8000d7c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d80:	fa1f fc87 	uxth.w	ip, r7
 8000d84:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d88:	0c23      	lsrs	r3, r4, #16
 8000d8a:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d8e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d92:	fb01 f20c 	mul.w	r2, r1, ip
 8000d96:	429a      	cmp	r2, r3
 8000d98:	d909      	bls.n	8000dae <__udivmoddi4+0x62>
 8000d9a:	18fb      	adds	r3, r7, r3
 8000d9c:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000da0:	f080 80ea 	bcs.w	8000f78 <__udivmoddi4+0x22c>
 8000da4:	429a      	cmp	r2, r3
 8000da6:	f240 80e7 	bls.w	8000f78 <__udivmoddi4+0x22c>
 8000daa:	3902      	subs	r1, #2
 8000dac:	443b      	add	r3, r7
 8000dae:	1a9a      	subs	r2, r3, r2
 8000db0:	b2a3      	uxth	r3, r4
 8000db2:	fbb2 f0fe 	udiv	r0, r2, lr
 8000db6:	fb0e 2210 	mls	r2, lr, r0, r2
 8000dba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000dbe:	fb00 fc0c 	mul.w	ip, r0, ip
 8000dc2:	459c      	cmp	ip, r3
 8000dc4:	d909      	bls.n	8000dda <__udivmoddi4+0x8e>
 8000dc6:	18fb      	adds	r3, r7, r3
 8000dc8:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000dcc:	f080 80d6 	bcs.w	8000f7c <__udivmoddi4+0x230>
 8000dd0:	459c      	cmp	ip, r3
 8000dd2:	f240 80d3 	bls.w	8000f7c <__udivmoddi4+0x230>
 8000dd6:	443b      	add	r3, r7
 8000dd8:	3802      	subs	r0, #2
 8000dda:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dde:	eba3 030c 	sub.w	r3, r3, ip
 8000de2:	2100      	movs	r1, #0
 8000de4:	b11d      	cbz	r5, 8000dee <__udivmoddi4+0xa2>
 8000de6:	40f3      	lsrs	r3, r6
 8000de8:	2200      	movs	r2, #0
 8000dea:	e9c5 3200 	strd	r3, r2, [r5]
 8000dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df2:	428b      	cmp	r3, r1
 8000df4:	d905      	bls.n	8000e02 <__udivmoddi4+0xb6>
 8000df6:	b10d      	cbz	r5, 8000dfc <__udivmoddi4+0xb0>
 8000df8:	e9c5 0100 	strd	r0, r1, [r5]
 8000dfc:	2100      	movs	r1, #0
 8000dfe:	4608      	mov	r0, r1
 8000e00:	e7f5      	b.n	8000dee <__udivmoddi4+0xa2>
 8000e02:	fab3 f183 	clz	r1, r3
 8000e06:	2900      	cmp	r1, #0
 8000e08:	d146      	bne.n	8000e98 <__udivmoddi4+0x14c>
 8000e0a:	4573      	cmp	r3, lr
 8000e0c:	d302      	bcc.n	8000e14 <__udivmoddi4+0xc8>
 8000e0e:	4282      	cmp	r2, r0
 8000e10:	f200 8105 	bhi.w	800101e <__udivmoddi4+0x2d2>
 8000e14:	1a84      	subs	r4, r0, r2
 8000e16:	eb6e 0203 	sbc.w	r2, lr, r3
 8000e1a:	2001      	movs	r0, #1
 8000e1c:	4690      	mov	r8, r2
 8000e1e:	2d00      	cmp	r5, #0
 8000e20:	d0e5      	beq.n	8000dee <__udivmoddi4+0xa2>
 8000e22:	e9c5 4800 	strd	r4, r8, [r5]
 8000e26:	e7e2      	b.n	8000dee <__udivmoddi4+0xa2>
 8000e28:	2a00      	cmp	r2, #0
 8000e2a:	f000 8090 	beq.w	8000f4e <__udivmoddi4+0x202>
 8000e2e:	fab2 f682 	clz	r6, r2
 8000e32:	2e00      	cmp	r6, #0
 8000e34:	f040 80a4 	bne.w	8000f80 <__udivmoddi4+0x234>
 8000e38:	1a8a      	subs	r2, r1, r2
 8000e3a:	0c03      	lsrs	r3, r0, #16
 8000e3c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e40:	b280      	uxth	r0, r0
 8000e42:	b2bc      	uxth	r4, r7
 8000e44:	2101      	movs	r1, #1
 8000e46:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e4a:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e4e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e52:	fb04 f20c 	mul.w	r2, r4, ip
 8000e56:	429a      	cmp	r2, r3
 8000e58:	d907      	bls.n	8000e6a <__udivmoddi4+0x11e>
 8000e5a:	18fb      	adds	r3, r7, r3
 8000e5c:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000e60:	d202      	bcs.n	8000e68 <__udivmoddi4+0x11c>
 8000e62:	429a      	cmp	r2, r3
 8000e64:	f200 80e0 	bhi.w	8001028 <__udivmoddi4+0x2dc>
 8000e68:	46c4      	mov	ip, r8
 8000e6a:	1a9b      	subs	r3, r3, r2
 8000e6c:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e70:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e74:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e78:	fb02 f404 	mul.w	r4, r2, r4
 8000e7c:	429c      	cmp	r4, r3
 8000e7e:	d907      	bls.n	8000e90 <__udivmoddi4+0x144>
 8000e80:	18fb      	adds	r3, r7, r3
 8000e82:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x142>
 8000e88:	429c      	cmp	r4, r3
 8000e8a:	f200 80ca 	bhi.w	8001022 <__udivmoddi4+0x2d6>
 8000e8e:	4602      	mov	r2, r0
 8000e90:	1b1b      	subs	r3, r3, r4
 8000e92:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e96:	e7a5      	b.n	8000de4 <__udivmoddi4+0x98>
 8000e98:	f1c1 0620 	rsb	r6, r1, #32
 8000e9c:	408b      	lsls	r3, r1
 8000e9e:	fa22 f706 	lsr.w	r7, r2, r6
 8000ea2:	431f      	orrs	r7, r3
 8000ea4:	fa0e f401 	lsl.w	r4, lr, r1
 8000ea8:	fa20 f306 	lsr.w	r3, r0, r6
 8000eac:	fa2e fe06 	lsr.w	lr, lr, r6
 8000eb0:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000eb4:	4323      	orrs	r3, r4
 8000eb6:	fa00 f801 	lsl.w	r8, r0, r1
 8000eba:	fa1f fc87 	uxth.w	ip, r7
 8000ebe:	fbbe f0f9 	udiv	r0, lr, r9
 8000ec2:	0c1c      	lsrs	r4, r3, #16
 8000ec4:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ec8:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ecc:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ed0:	45a6      	cmp	lr, r4
 8000ed2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ed6:	d909      	bls.n	8000eec <__udivmoddi4+0x1a0>
 8000ed8:	193c      	adds	r4, r7, r4
 8000eda:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000ede:	f080 809c 	bcs.w	800101a <__udivmoddi4+0x2ce>
 8000ee2:	45a6      	cmp	lr, r4
 8000ee4:	f240 8099 	bls.w	800101a <__udivmoddi4+0x2ce>
 8000ee8:	3802      	subs	r0, #2
 8000eea:	443c      	add	r4, r7
 8000eec:	eba4 040e 	sub.w	r4, r4, lr
 8000ef0:	fa1f fe83 	uxth.w	lr, r3
 8000ef4:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ef8:	fb09 4413 	mls	r4, r9, r3, r4
 8000efc:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000f00:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f04:	45a4      	cmp	ip, r4
 8000f06:	d908      	bls.n	8000f1a <__udivmoddi4+0x1ce>
 8000f08:	193c      	adds	r4, r7, r4
 8000f0a:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000f0e:	f080 8082 	bcs.w	8001016 <__udivmoddi4+0x2ca>
 8000f12:	45a4      	cmp	ip, r4
 8000f14:	d97f      	bls.n	8001016 <__udivmoddi4+0x2ca>
 8000f16:	3b02      	subs	r3, #2
 8000f18:	443c      	add	r4, r7
 8000f1a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f1e:	eba4 040c 	sub.w	r4, r4, ip
 8000f22:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f26:	4564      	cmp	r4, ip
 8000f28:	4673      	mov	r3, lr
 8000f2a:	46e1      	mov	r9, ip
 8000f2c:	d362      	bcc.n	8000ff4 <__udivmoddi4+0x2a8>
 8000f2e:	d05f      	beq.n	8000ff0 <__udivmoddi4+0x2a4>
 8000f30:	b15d      	cbz	r5, 8000f4a <__udivmoddi4+0x1fe>
 8000f32:	ebb8 0203 	subs.w	r2, r8, r3
 8000f36:	eb64 0409 	sbc.w	r4, r4, r9
 8000f3a:	fa04 f606 	lsl.w	r6, r4, r6
 8000f3e:	fa22 f301 	lsr.w	r3, r2, r1
 8000f42:	431e      	orrs	r6, r3
 8000f44:	40cc      	lsrs	r4, r1
 8000f46:	e9c5 6400 	strd	r6, r4, [r5]
 8000f4a:	2100      	movs	r1, #0
 8000f4c:	e74f      	b.n	8000dee <__udivmoddi4+0xa2>
 8000f4e:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f52:	0c01      	lsrs	r1, r0, #16
 8000f54:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f58:	b280      	uxth	r0, r0
 8000f5a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f5e:	463b      	mov	r3, r7
 8000f60:	4638      	mov	r0, r7
 8000f62:	463c      	mov	r4, r7
 8000f64:	46b8      	mov	r8, r7
 8000f66:	46be      	mov	lr, r7
 8000f68:	2620      	movs	r6, #32
 8000f6a:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f6e:	eba2 0208 	sub.w	r2, r2, r8
 8000f72:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f76:	e766      	b.n	8000e46 <__udivmoddi4+0xfa>
 8000f78:	4601      	mov	r1, r0
 8000f7a:	e718      	b.n	8000dae <__udivmoddi4+0x62>
 8000f7c:	4610      	mov	r0, r2
 8000f7e:	e72c      	b.n	8000dda <__udivmoddi4+0x8e>
 8000f80:	f1c6 0220 	rsb	r2, r6, #32
 8000f84:	fa2e f302 	lsr.w	r3, lr, r2
 8000f88:	40b7      	lsls	r7, r6
 8000f8a:	40b1      	lsls	r1, r6
 8000f8c:	fa20 f202 	lsr.w	r2, r0, r2
 8000f90:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f94:	430a      	orrs	r2, r1
 8000f96:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f9a:	b2bc      	uxth	r4, r7
 8000f9c:	fb0e 3318 	mls	r3, lr, r8, r3
 8000fa0:	0c11      	lsrs	r1, r2, #16
 8000fa2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fa6:	fb08 f904 	mul.w	r9, r8, r4
 8000faa:	40b0      	lsls	r0, r6
 8000fac:	4589      	cmp	r9, r1
 8000fae:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000fb2:	b280      	uxth	r0, r0
 8000fb4:	d93e      	bls.n	8001034 <__udivmoddi4+0x2e8>
 8000fb6:	1879      	adds	r1, r7, r1
 8000fb8:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000fbc:	d201      	bcs.n	8000fc2 <__udivmoddi4+0x276>
 8000fbe:	4589      	cmp	r9, r1
 8000fc0:	d81f      	bhi.n	8001002 <__udivmoddi4+0x2b6>
 8000fc2:	eba1 0109 	sub.w	r1, r1, r9
 8000fc6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fca:	fb09 f804 	mul.w	r8, r9, r4
 8000fce:	fb0e 1119 	mls	r1, lr, r9, r1
 8000fd2:	b292      	uxth	r2, r2
 8000fd4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fd8:	4542      	cmp	r2, r8
 8000fda:	d229      	bcs.n	8001030 <__udivmoddi4+0x2e4>
 8000fdc:	18ba      	adds	r2, r7, r2
 8000fde:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000fe2:	d2c4      	bcs.n	8000f6e <__udivmoddi4+0x222>
 8000fe4:	4542      	cmp	r2, r8
 8000fe6:	d2c2      	bcs.n	8000f6e <__udivmoddi4+0x222>
 8000fe8:	f1a9 0102 	sub.w	r1, r9, #2
 8000fec:	443a      	add	r2, r7
 8000fee:	e7be      	b.n	8000f6e <__udivmoddi4+0x222>
 8000ff0:	45f0      	cmp	r8, lr
 8000ff2:	d29d      	bcs.n	8000f30 <__udivmoddi4+0x1e4>
 8000ff4:	ebbe 0302 	subs.w	r3, lr, r2
 8000ff8:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ffc:	3801      	subs	r0, #1
 8000ffe:	46e1      	mov	r9, ip
 8001000:	e796      	b.n	8000f30 <__udivmoddi4+0x1e4>
 8001002:	eba7 0909 	sub.w	r9, r7, r9
 8001006:	4449      	add	r1, r9
 8001008:	f1a8 0c02 	sub.w	ip, r8, #2
 800100c:	fbb1 f9fe 	udiv	r9, r1, lr
 8001010:	fb09 f804 	mul.w	r8, r9, r4
 8001014:	e7db      	b.n	8000fce <__udivmoddi4+0x282>
 8001016:	4673      	mov	r3, lr
 8001018:	e77f      	b.n	8000f1a <__udivmoddi4+0x1ce>
 800101a:	4650      	mov	r0, sl
 800101c:	e766      	b.n	8000eec <__udivmoddi4+0x1a0>
 800101e:	4608      	mov	r0, r1
 8001020:	e6fd      	b.n	8000e1e <__udivmoddi4+0xd2>
 8001022:	443b      	add	r3, r7
 8001024:	3a02      	subs	r2, #2
 8001026:	e733      	b.n	8000e90 <__udivmoddi4+0x144>
 8001028:	f1ac 0c02 	sub.w	ip, ip, #2
 800102c:	443b      	add	r3, r7
 800102e:	e71c      	b.n	8000e6a <__udivmoddi4+0x11e>
 8001030:	4649      	mov	r1, r9
 8001032:	e79c      	b.n	8000f6e <__udivmoddi4+0x222>
 8001034:	eba1 0109 	sub.w	r1, r1, r9
 8001038:	46c4      	mov	ip, r8
 800103a:	fbb1 f9fe 	udiv	r9, r1, lr
 800103e:	fb09 f804 	mul.w	r8, r9, r4
 8001042:	e7c4      	b.n	8000fce <__udivmoddi4+0x282>

08001044 <__aeabi_idiv0>:
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop

08001048 <PWM_Satuation>:
 *  Created on: Apr 14, 2024
 *      Author: beamk
 */
#include "Controller.h"

int32_t PWM_Satuation(float _u, int32_t _upper_limit, int32_t _lower_limit) {
 8001048:	b480      	push	{r7}
 800104a:	b085      	sub	sp, #20
 800104c:	af00      	add	r7, sp, #0
 800104e:	ed87 0a03 	vstr	s0, [r7, #12]
 8001052:	60b8      	str	r0, [r7, #8]
 8001054:	6079      	str	r1, [r7, #4]
  if (_u > _upper_limit) return _upper_limit;
 8001056:	68bb      	ldr	r3, [r7, #8]
 8001058:	ee07 3a90 	vmov	s15, r3
 800105c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001060:	ed97 7a03 	vldr	s14, [r7, #12]
 8001064:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001068:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800106c:	dd01      	ble.n	8001072 <PWM_Satuation+0x2a>
 800106e:	68bb      	ldr	r3, [r7, #8]
 8001070:	e013      	b.n	800109a <PWM_Satuation+0x52>
  else if (_u < _lower_limit) return _lower_limit;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	ee07 3a90 	vmov	s15, r3
 8001078:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800107c:	ed97 7a03 	vldr	s14, [r7, #12]
 8001080:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001084:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001088:	d501      	bpl.n	800108e <PWM_Satuation+0x46>
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	e005      	b.n	800109a <PWM_Satuation+0x52>
  return (int32_t)_u;
 800108e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001092:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001096:	ee17 3a90 	vmov	r3, s15
}
 800109a:	4618      	mov	r0, r3
 800109c:	3714      	adds	r7, #20
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr

080010a6 <PID_CONTROLLER_Init>:

void PID_CONTROLLER_Init(PID_CONTROLLER *controller, float _Kp, float _Ki, float _Kd, float _u_max) {
 80010a6:	b480      	push	{r7}
 80010a8:	b087      	sub	sp, #28
 80010aa:	af00      	add	r7, sp, #0
 80010ac:	6178      	str	r0, [r7, #20]
 80010ae:	ed87 0a04 	vstr	s0, [r7, #16]
 80010b2:	edc7 0a03 	vstr	s1, [r7, #12]
 80010b6:	ed87 1a02 	vstr	s2, [r7, #8]
 80010ba:	edc7 1a01 	vstr	s3, [r7, #4]
  controller->Kp = _Kp;
 80010be:	697b      	ldr	r3, [r7, #20]
 80010c0:	693a      	ldr	r2, [r7, #16]
 80010c2:	601a      	str	r2, [r3, #0]
  controller->Ki = _Ki;
 80010c4:	697b      	ldr	r3, [r7, #20]
 80010c6:	68fa      	ldr	r2, [r7, #12]
 80010c8:	605a      	str	r2, [r3, #4]
  controller->Kd = _Kd;
 80010ca:	697b      	ldr	r3, [r7, #20]
 80010cc:	68ba      	ldr	r2, [r7, #8]
 80010ce:	609a      	str	r2, [r3, #8]
  controller->u_max = _u_max;
 80010d0:	697b      	ldr	r3, [r7, #20]
 80010d2:	687a      	ldr	r2, [r7, #4]
 80010d4:	60da      	str	r2, [r3, #12]
  controller->ek_1 = 0;
 80010d6:	697b      	ldr	r3, [r7, #20]
 80010d8:	f04f 0200 	mov.w	r2, #0
 80010dc:	611a      	str	r2, [r3, #16]
  controller->ek_2 = 0;
 80010de:	697b      	ldr	r3, [r7, #20]
 80010e0:	f04f 0200 	mov.w	r2, #0
 80010e4:	615a      	str	r2, [r3, #20]
  controller->u = 0;
 80010e6:	697b      	ldr	r3, [r7, #20]
 80010e8:	f04f 0200 	mov.w	r2, #0
 80010ec:	619a      	str	r2, [r3, #24]

}
 80010ee:	bf00      	nop
 80010f0:	371c      	adds	r7, #28
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr

080010fa <PID_CONTROLLER_Compute>:

float PID_CONTROLLER_Compute(PID_CONTROLLER *controller, float ek) {
 80010fa:	b480      	push	{r7}
 80010fc:	b083      	sub	sp, #12
 80010fe:	af00      	add	r7, sp, #0
 8001100:	6078      	str	r0, [r7, #4]
 8001102:	ed87 0a00 	vstr	s0, [r7]
    if (!((controller->u >= controller->u_max && ek > 0) || (controller->u <= -controller->u_max && ek < 0))) {
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	ed93 7a06 	vldr	s14, [r3, #24]
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	edd3 7a03 	vldr	s15, [r3, #12]
 8001112:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001116:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800111a:	bfac      	ite	ge
 800111c:	2301      	movge	r3, #1
 800111e:	2300      	movlt	r3, #0
 8001120:	b2db      	uxtb	r3, r3
 8001122:	f083 0301 	eor.w	r3, r3, #1
 8001126:	b2db      	uxtb	r3, r3
 8001128:	2b00      	cmp	r3, #0
 800112a:	d10e      	bne.n	800114a <PID_CONTROLLER_Compute+0x50>
 800112c:	edd7 7a00 	vldr	s15, [r7]
 8001130:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001134:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001138:	bfcc      	ite	gt
 800113a:	2301      	movgt	r3, #1
 800113c:	2300      	movle	r3, #0
 800113e:	b2db      	uxtb	r3, r3
 8001140:	f083 0301 	eor.w	r3, r3, #1
 8001144:	b2db      	uxtb	r3, r3
 8001146:	2b00      	cmp	r3, #0
 8001148:	d057      	beq.n	80011fa <PID_CONTROLLER_Compute+0x100>
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	ed93 7a06 	vldr	s14, [r3, #24]
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	edd3 7a03 	vldr	s15, [r3, #12]
 8001156:	eef1 7a67 	vneg.f32	s15, s15
 800115a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800115e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001162:	bf94      	ite	ls
 8001164:	2301      	movls	r3, #1
 8001166:	2300      	movhi	r3, #0
 8001168:	b2db      	uxtb	r3, r3
 800116a:	f083 0301 	eor.w	r3, r3, #1
 800116e:	b2db      	uxtb	r3, r3
 8001170:	2b00      	cmp	r3, #0
 8001172:	d10e      	bne.n	8001192 <PID_CONTROLLER_Compute+0x98>
 8001174:	edd7 7a00 	vldr	s15, [r7]
 8001178:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800117c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001180:	bf4c      	ite	mi
 8001182:	2301      	movmi	r3, #1
 8001184:	2300      	movpl	r3, #0
 8001186:	b2db      	uxtb	r3, r3
 8001188:	f083 0301 	eor.w	r3, r3, #1
 800118c:	b2db      	uxtb	r3, r3
 800118e:	2b00      	cmp	r3, #0
 8001190:	d033      	beq.n	80011fa <PID_CONTROLLER_Compute+0x100>
        controller->u += ((controller->Kp + controller->Ki + controller->Kd) * ek)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	ed93 7a06 	vldr	s14, [r3, #24]
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	edd3 6a00 	vldr	s13, [r3]
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	edd3 7a01 	vldr	s15, [r3, #4]
 80011a4:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	edd3 7a02 	vldr	s15, [r3, #8]
 80011ae:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80011b2:	edd7 7a00 	vldr	s15, [r7]
 80011b6:	ee66 6aa7 	vmul.f32	s13, s13, s15
                         - ((controller->Kp + (2 * controller->Kd)) * controller->ek_1)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	ed93 6a00 	vldr	s12, [r3]
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	edd3 7a02 	vldr	s15, [r3, #8]
 80011c6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80011ca:	ee36 6a27 	vadd.f32	s12, s12, s15
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	edd3 7a04 	vldr	s15, [r3, #16]
 80011d4:	ee66 7a27 	vmul.f32	s15, s12, s15
 80011d8:	ee76 6ae7 	vsub.f32	s13, s13, s15
                         + (controller->Kd * controller->ek_2);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	ed93 6a02 	vldr	s12, [r3, #8]
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	edd3 7a05 	vldr	s15, [r3, #20]
 80011e8:	ee66 7a27 	vmul.f32	s15, s12, s15
 80011ec:	ee76 7aa7 	vadd.f32	s15, s13, s15
        controller->u += ((controller->Kp + controller->Ki + controller->Kd) * ek)
 80011f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	edc3 7a06 	vstr	s15, [r3, #24]
    }
    controller->ek_2 = controller->ek_1;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	691a      	ldr	r2, [r3, #16]
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	615a      	str	r2, [r3, #20]
    controller->ek_1 = ek;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	683a      	ldr	r2, [r7, #0]
 8001206:	611a      	str	r2, [r3, #16]
    return controller->u;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	699b      	ldr	r3, [r3, #24]
 800120c:	ee07 3a90 	vmov	s15, r3
}
 8001210:	eeb0 0a67 	vmov.f32	s0, s15
 8001214:	370c      	adds	r7, #12
 8001216:	46bd      	mov	sp, r7
 8001218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121c:	4770      	bx	lr

0800121e <MDXX_GPIO_init>:
	PWM_init(&(mdxx->pwm), htimp, timp_chx);
	mdxx->mode = 0;
}

void MDXX_GPIO_init(MDXX *mdxx, TIM_HandleTypeDef *htimp, uint16_t timp_chx,
		GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 800121e:	b580      	push	{r7, lr}
 8001220:	b084      	sub	sp, #16
 8001222:	af00      	add	r7, sp, #0
 8001224:	60f8      	str	r0, [r7, #12]
 8001226:	60b9      	str	r1, [r7, #8]
 8001228:	603b      	str	r3, [r7, #0]
 800122a:	4613      	mov	r3, r2
 800122c:	80fb      	strh	r3, [r7, #6]
	mdxx->htimp = htimp;
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	68ba      	ldr	r2, [r7, #8]
 8001232:	609a      	str	r2, [r3, #8]
	mdxx->timp_chx = timp_chx;
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	88fa      	ldrh	r2, [r7, #6]
 8001238:	819a      	strh	r2, [r3, #12]
	PWM_init(&(mdxx->pwm), htimp, timp_chx);
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	3328      	adds	r3, #40	@ 0x28
 800123e:	88fa      	ldrh	r2, [r7, #6]
 8001240:	68b9      	ldr	r1, [r7, #8]
 8001242:	4618      	mov	r0, r3
 8001244:	f000 fa64 	bl	8001710 <PWM_init>
	mdxx->GPIOx = GPIOx;
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	683a      	ldr	r2, [r7, #0]
 800124c:	645a      	str	r2, [r3, #68]	@ 0x44
	mdxx->GPIO_Pin = GPIO_Pin;
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	8b3a      	ldrh	r2, [r7, #24]
 8001252:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
	mdxx->mode = 1;
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	2201      	movs	r2, #1
 800125a:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
}
 800125e:	bf00      	nop
 8001260:	3710      	adds	r7, #16
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
	...

08001268 <MDXX_set_range>:
			mdxx->cmd = fabs(duty);
		}
	}
}

void MDXX_set_range(MDXX *mdxx, float freq, float duty) {
 8001268:	b580      	push	{r7, lr}
 800126a:	b084      	sub	sp, #16
 800126c:	af00      	add	r7, sp, #0
 800126e:	60f8      	str	r0, [r7, #12]
 8001270:	ed87 0a02 	vstr	s0, [r7, #8]
 8001274:	edc7 0a01 	vstr	s1, [r7, #4]
	if (mdxx->mode == 0) {
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 800127e:	2b00      	cmp	r3, #0
 8001280:	d15f      	bne.n	8001342 <MDXX_set_range+0xda>
		if (duty == 0) {
 8001282:	edd7 7a01 	vldr	s15, [r7, #4]
 8001286:	eef5 7a40 	vcmp.f32	s15, #0.0
 800128a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800128e:	d115      	bne.n	80012bc <MDXX_set_range+0x54>
			PWM_write_range(&(mdxx->dir), freq, 0);
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	3310      	adds	r3, #16
 8001294:	eddf 0a5f 	vldr	s1, [pc, #380]	@ 8001414 <MDXX_set_range+0x1ac>
 8001298:	ed97 0a02 	vldr	s0, [r7, #8]
 800129c:	4618      	mov	r0, r3
 800129e:	f000 fa5b 	bl	8001758 <PWM_write_range>
			PWM_write_range(&(mdxx->pwm), freq, 0);
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	3328      	adds	r3, #40	@ 0x28
 80012a6:	eddf 0a5b 	vldr	s1, [pc, #364]	@ 8001414 <MDXX_set_range+0x1ac>
 80012aa:	ed97 0a02 	vldr	s0, [r7, #8]
 80012ae:	4618      	mov	r0, r3
 80012b0:	f000 fa52 	bl	8001758 <PWM_write_range>
			mdxx->cmd = 0;
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	2200      	movs	r2, #0
 80012b8:	641a      	str	r2, [r3, #64]	@ 0x40
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 1);
			PWM_write_range(&(mdxx->pwm), freq, fabs(duty));
			mdxx->cmd = fabs(duty);
		}
	}
}
 80012ba:	e0a6      	b.n	800140a <MDXX_set_range+0x1a2>
		} else if (duty > 0) {
 80012bc:	edd7 7a01 	vldr	s15, [r7, #4]
 80012c0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80012c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012c8:	dd1a      	ble.n	8001300 <MDXX_set_range+0x98>
			PWM_write_range(&(mdxx->dir), freq, 0);
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	3310      	adds	r3, #16
 80012ce:	eddf 0a51 	vldr	s1, [pc, #324]	@ 8001414 <MDXX_set_range+0x1ac>
 80012d2:	ed97 0a02 	vldr	s0, [r7, #8]
 80012d6:	4618      	mov	r0, r3
 80012d8:	f000 fa3e 	bl	8001758 <PWM_write_range>
			PWM_write_range(&(mdxx->pwm), freq, duty);
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	3328      	adds	r3, #40	@ 0x28
 80012e0:	edd7 0a01 	vldr	s1, [r7, #4]
 80012e4:	ed97 0a02 	vldr	s0, [r7, #8]
 80012e8:	4618      	mov	r0, r3
 80012ea:	f000 fa35 	bl	8001758 <PWM_write_range>
			mdxx->cmd = duty;
 80012ee:	edd7 7a01 	vldr	s15, [r7, #4]
 80012f2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012f6:	ee17 2a90 	vmov	r2, s15
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80012fe:	e084      	b.n	800140a <MDXX_set_range+0x1a2>
			PWM_write_range(&(mdxx->dir), freq, 100);
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	3310      	adds	r3, #16
 8001304:	eddf 0a44 	vldr	s1, [pc, #272]	@ 8001418 <MDXX_set_range+0x1b0>
 8001308:	ed97 0a02 	vldr	s0, [r7, #8]
 800130c:	4618      	mov	r0, r3
 800130e:	f000 fa23 	bl	8001758 <PWM_write_range>
			PWM_write_range(&(mdxx->pwm), freq, fabs(duty));
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	3328      	adds	r3, #40	@ 0x28
 8001316:	edd7 7a01 	vldr	s15, [r7, #4]
 800131a:	eef0 7ae7 	vabs.f32	s15, s15
 800131e:	eef0 0a67 	vmov.f32	s1, s15
 8001322:	ed97 0a02 	vldr	s0, [r7, #8]
 8001326:	4618      	mov	r0, r3
 8001328:	f000 fa16 	bl	8001758 <PWM_write_range>
			mdxx->cmd = fabs(duty);
 800132c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001330:	eef0 7ae7 	vabs.f32	s15, s15
 8001334:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001338:	ee17 2a90 	vmov	r2, s15
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001340:	e063      	b.n	800140a <MDXX_set_range+0x1a2>
	} else if (mdxx->mode == 1) {
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 8001348:	2b01      	cmp	r3, #1
 800134a:	d15e      	bne.n	800140a <MDXX_set_range+0x1a2>
		if (duty == 0) {
 800134c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001350:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001354:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001358:	d115      	bne.n	8001386 <MDXX_set_range+0x11e>
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 0);
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8001364:	2200      	movs	r2, #0
 8001366:	4619      	mov	r1, r3
 8001368:	f004 f9b0 	bl	80056cc <HAL_GPIO_WritePin>
			PWM_write_range(&(mdxx->pwm), freq, 0);
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	3328      	adds	r3, #40	@ 0x28
 8001370:	eddf 0a28 	vldr	s1, [pc, #160]	@ 8001414 <MDXX_set_range+0x1ac>
 8001374:	ed97 0a02 	vldr	s0, [r7, #8]
 8001378:	4618      	mov	r0, r3
 800137a:	f000 f9ed 	bl	8001758 <PWM_write_range>
			mdxx->cmd = 0;
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	2200      	movs	r2, #0
 8001382:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001384:	e041      	b.n	800140a <MDXX_set_range+0x1a2>
		} else if (duty > 0) {
 8001386:	edd7 7a01 	vldr	s15, [r7, #4]
 800138a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800138e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001392:	dd1a      	ble.n	80013ca <MDXX_set_range+0x162>
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 0);
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800139e:	2200      	movs	r2, #0
 80013a0:	4619      	mov	r1, r3
 80013a2:	f004 f993 	bl	80056cc <HAL_GPIO_WritePin>
			PWM_write_range(&(mdxx->pwm), freq, duty);
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	3328      	adds	r3, #40	@ 0x28
 80013aa:	edd7 0a01 	vldr	s1, [r7, #4]
 80013ae:	ed97 0a02 	vldr	s0, [r7, #8]
 80013b2:	4618      	mov	r0, r3
 80013b4:	f000 f9d0 	bl	8001758 <PWM_write_range>
			mdxx->cmd = duty;
 80013b8:	edd7 7a01 	vldr	s15, [r7, #4]
 80013bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013c0:	ee17 2a90 	vmov	r2, s15
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80013c8:	e01f      	b.n	800140a <MDXX_set_range+0x1a2>
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 1);
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80013d4:	2201      	movs	r2, #1
 80013d6:	4619      	mov	r1, r3
 80013d8:	f004 f978 	bl	80056cc <HAL_GPIO_WritePin>
			PWM_write_range(&(mdxx->pwm), freq, fabs(duty));
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	3328      	adds	r3, #40	@ 0x28
 80013e0:	edd7 7a01 	vldr	s15, [r7, #4]
 80013e4:	eef0 7ae7 	vabs.f32	s15, s15
 80013e8:	eef0 0a67 	vmov.f32	s1, s15
 80013ec:	ed97 0a02 	vldr	s0, [r7, #8]
 80013f0:	4618      	mov	r0, r3
 80013f2:	f000 f9b1 	bl	8001758 <PWM_write_range>
			mdxx->cmd = fabs(duty);
 80013f6:	edd7 7a01 	vldr	s15, [r7, #4]
 80013fa:	eef0 7ae7 	vabs.f32	s15, s15
 80013fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001402:	ee17 2a90 	vmov	r2, s15
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800140a:	bf00      	nop
 800140c:	3710      	adds	r7, #16
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	00000000 	.word	0x00000000
 8001418:	42c80000 	.word	0x42c80000

0800141c <FIR_init>:
 *      Author: transporter
 */
#include "FIR.h"
#include "arm_math.h"

void FIR_init(FIR *fir, uint16_t numTaps, float cutoffFreq, float samplingFreq) {
 800141c:	b580      	push	{r7, lr}
 800141e:	ed2d 8b02 	vpush	{d8}
 8001422:	b08a      	sub	sp, #40	@ 0x28
 8001424:	af00      	add	r7, sp, #0
 8001426:	60f8      	str	r0, [r7, #12]
 8001428:	460b      	mov	r3, r1
 800142a:	ed87 0a01 	vstr	s0, [r7, #4]
 800142e:	edc7 0a00 	vstr	s1, [r7]
 8001432:	817b      	strh	r3, [r7, #10]
    // Make sure numTaps is odd
    if (numTaps % 2 == 0) {
 8001434:	897b      	ldrh	r3, [r7, #10]
 8001436:	f003 0301 	and.w	r3, r3, #1
 800143a:	b29b      	uxth	r3, r3
 800143c:	2b00      	cmp	r3, #0
 800143e:	d102      	bne.n	8001446 <FIR_init+0x2a>
        numTaps += 1;
 8001440:	897b      	ldrh	r3, [r7, #10]
 8001442:	3301      	adds	r3, #1
 8001444:	817b      	strh	r3, [r7, #10]
    }

    fir->numTaps = numTaps;
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	897a      	ldrh	r2, [r7, #10]
 800144a:	811a      	strh	r2, [r3, #8]
    fir->bufferIndex = 0;
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	2200      	movs	r2, #0
 8001450:	815a      	strh	r2, [r3, #10]

    // Allocate memory for coefficients and buffer
    fir->coeffs = (float*)malloc(numTaps * sizeof(float));
 8001452:	897b      	ldrh	r3, [r7, #10]
 8001454:	009b      	lsls	r3, r3, #2
 8001456:	4618      	mov	r0, r3
 8001458:	f019 fb06 	bl	801aa68 <malloc>
 800145c:	4603      	mov	r3, r0
 800145e:	461a      	mov	r2, r3
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	601a      	str	r2, [r3, #0]
    fir->buffer = (float*)malloc(numTaps * sizeof(float));
 8001464:	897b      	ldrh	r3, [r7, #10]
 8001466:	009b      	lsls	r3, r3, #2
 8001468:	4618      	mov	r0, r3
 800146a:	f019 fafd 	bl	801aa68 <malloc>
 800146e:	4603      	mov	r3, r0
 8001470:	461a      	mov	r2, r3
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	605a      	str	r2, [r3, #4]

    if (fir->coeffs != NULL && fir->buffer != NULL) {
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	2b00      	cmp	r3, #0
 800147c:	f000 80e0 	beq.w	8001640 <FIR_init+0x224>
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	2b00      	cmp	r3, #0
 8001486:	f000 80db 	beq.w	8001640 <FIR_init+0x224>
        // Clear buffer
        for (uint16_t i = 0; i < numTaps; i++) {
 800148a:	2300      	movs	r3, #0
 800148c:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800148e:	e00a      	b.n	80014a6 <FIR_init+0x8a>
            fir->buffer[i] = 0.0f;
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	685a      	ldr	r2, [r3, #4]
 8001494:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001496:	009b      	lsls	r3, r3, #2
 8001498:	4413      	add	r3, r2
 800149a:	f04f 0200 	mov.w	r2, #0
 800149e:	601a      	str	r2, [r3, #0]
        for (uint16_t i = 0; i < numTaps; i++) {
 80014a0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80014a2:	3301      	adds	r3, #1
 80014a4:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80014a6:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80014a8:	897b      	ldrh	r3, [r7, #10]
 80014aa:	429a      	cmp	r2, r3
 80014ac:	d3f0      	bcc.n	8001490 <FIR_init+0x74>
        }

        // Calculate normalized cutoff frequency (0 to 0.5)
        float omega = cutoffFreq / samplingFreq;
 80014ae:	edd7 6a01 	vldr	s13, [r7, #4]
 80014b2:	ed97 7a00 	vldr	s14, [r7]
 80014b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80014ba:	edc7 7a06 	vstr	s15, [r7, #24]

        // Calculate filter coefficients (low-pass)
        int16_t half_taps = numTaps / 2;
 80014be:	897b      	ldrh	r3, [r7, #10]
 80014c0:	085b      	lsrs	r3, r3, #1
 80014c2:	b29b      	uxth	r3, r3
 80014c4:	82fb      	strh	r3, [r7, #22]
        for (int16_t i = 0; i < numTaps; i++) {
 80014c6:	2300      	movs	r3, #0
 80014c8:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80014ca:	e077      	b.n	80015bc <FIR_init+0x1a0>
            if (i == half_taps) {
 80014cc:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 80014d0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80014d4:	429a      	cmp	r2, r3
 80014d6:	d10c      	bne.n	80014f2 <FIR_init+0xd6>
                // Center tap
                fir->coeffs[i] = 2.0f * omega;
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	681a      	ldr	r2, [r3, #0]
 80014dc:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 80014e0:	009b      	lsls	r3, r3, #2
 80014e2:	4413      	add	r3, r2
 80014e4:	edd7 7a06 	vldr	s15, [r7, #24]
 80014e8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80014ec:	edc3 7a00 	vstr	s15, [r3]
 80014f0:	e02c      	b.n	800154c <FIR_init+0x130>
            } else {
                // Side taps
                int16_t n = i - half_taps;
 80014f2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80014f4:	8afb      	ldrh	r3, [r7, #22]
 80014f6:	1ad3      	subs	r3, r2, r3
 80014f8:	b29b      	uxth	r3, r3
 80014fa:	82bb      	strh	r3, [r7, #20]
                fir->coeffs[i] = sinf(2.0f * PI * omega * n) / (PI * n);
 80014fc:	edd7 7a06 	vldr	s15, [r7, #24]
 8001500:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 800164c <FIR_init+0x230>
 8001504:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001508:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800150c:	ee07 3a90 	vmov	s15, r3
 8001510:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001514:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001518:	eeb0 0a67 	vmov.f32	s0, s15
 800151c:	f01a fee2 	bl	801c2e4 <sinf>
 8001520:	eef0 6a40 	vmov.f32	s13, s0
 8001524:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001528:	ee07 3a90 	vmov	s15, r3
 800152c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001530:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 8001650 <FIR_init+0x234>
 8001534:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	681a      	ldr	r2, [r3, #0]
 800153c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001540:	009b      	lsls	r3, r3, #2
 8001542:	4413      	add	r3, r2
 8001544:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001548:	edc3 7a00 	vstr	s15, [r3]
            }

            // Apply Hamming window
            fir->coeffs[i] *= (0.54f - 0.46f * cosf(2.0f * PI * i / (numTaps - 1)));
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	681a      	ldr	r2, [r3, #0]
 8001550:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001554:	009b      	lsls	r3, r3, #2
 8001556:	4413      	add	r3, r2
 8001558:	ed93 8a00 	vldr	s16, [r3]
 800155c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001560:	ee07 3a90 	vmov	s15, r3
 8001564:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001568:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 800164c <FIR_init+0x230>
 800156c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001570:	897b      	ldrh	r3, [r7, #10]
 8001572:	3b01      	subs	r3, #1
 8001574:	ee07 3a90 	vmov	s15, r3
 8001578:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800157c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001580:	eeb0 0a66 	vmov.f32	s0, s13
 8001584:	f01a fe6a 	bl	801c25c <cosf>
 8001588:	eef0 7a40 	vmov.f32	s15, s0
 800158c:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8001654 <FIR_init+0x238>
 8001590:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001594:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8001658 <FIR_init+0x23c>
 8001598:	ee77 7a67 	vsub.f32	s15, s14, s15
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	681a      	ldr	r2, [r3, #0]
 80015a0:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 80015a4:	009b      	lsls	r3, r3, #2
 80015a6:	4413      	add	r3, r2
 80015a8:	ee68 7a27 	vmul.f32	s15, s16, s15
 80015ac:	edc3 7a00 	vstr	s15, [r3]
        for (int16_t i = 0; i < numTaps; i++) {
 80015b0:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 80015b4:	b29b      	uxth	r3, r3
 80015b6:	3301      	adds	r3, #1
 80015b8:	b29b      	uxth	r3, r3
 80015ba:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80015bc:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 80015c0:	897b      	ldrh	r3, [r7, #10]
 80015c2:	429a      	cmp	r2, r3
 80015c4:	db82      	blt.n	80014cc <FIR_init+0xb0>
        }

        // Normalize gain
        float sum = 0.0f;
 80015c6:	f04f 0300 	mov.w	r3, #0
 80015ca:	623b      	str	r3, [r7, #32]
        for (uint16_t i = 0; i < numTaps; i++) {
 80015cc:	2300      	movs	r3, #0
 80015ce:	83fb      	strh	r3, [r7, #30]
 80015d0:	e00f      	b.n	80015f2 <FIR_init+0x1d6>
            sum += fir->coeffs[i];
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	681a      	ldr	r2, [r3, #0]
 80015d6:	8bfb      	ldrh	r3, [r7, #30]
 80015d8:	009b      	lsls	r3, r3, #2
 80015da:	4413      	add	r3, r2
 80015dc:	edd3 7a00 	vldr	s15, [r3]
 80015e0:	ed97 7a08 	vldr	s14, [r7, #32]
 80015e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015e8:	edc7 7a08 	vstr	s15, [r7, #32]
        for (uint16_t i = 0; i < numTaps; i++) {
 80015ec:	8bfb      	ldrh	r3, [r7, #30]
 80015ee:	3301      	adds	r3, #1
 80015f0:	83fb      	strh	r3, [r7, #30]
 80015f2:	8bfa      	ldrh	r2, [r7, #30]
 80015f4:	897b      	ldrh	r3, [r7, #10]
 80015f6:	429a      	cmp	r2, r3
 80015f8:	d3eb      	bcc.n	80015d2 <FIR_init+0x1b6>
        }

        if (sum != 0.0f) {
 80015fa:	edd7 7a08 	vldr	s15, [r7, #32]
 80015fe:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001602:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001606:	d01b      	beq.n	8001640 <FIR_init+0x224>
            for (uint16_t i = 0; i < numTaps; i++) {
 8001608:	2300      	movs	r3, #0
 800160a:	83bb      	strh	r3, [r7, #28]
 800160c:	e014      	b.n	8001638 <FIR_init+0x21c>
                fir->coeffs[i] /= sum;
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	681a      	ldr	r2, [r3, #0]
 8001612:	8bbb      	ldrh	r3, [r7, #28]
 8001614:	009b      	lsls	r3, r3, #2
 8001616:	4413      	add	r3, r2
 8001618:	edd3 6a00 	vldr	s13, [r3]
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	681a      	ldr	r2, [r3, #0]
 8001620:	8bbb      	ldrh	r3, [r7, #28]
 8001622:	009b      	lsls	r3, r3, #2
 8001624:	4413      	add	r3, r2
 8001626:	ed97 7a08 	vldr	s14, [r7, #32]
 800162a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800162e:	edc3 7a00 	vstr	s15, [r3]
            for (uint16_t i = 0; i < numTaps; i++) {
 8001632:	8bbb      	ldrh	r3, [r7, #28]
 8001634:	3301      	adds	r3, #1
 8001636:	83bb      	strh	r3, [r7, #28]
 8001638:	8bba      	ldrh	r2, [r7, #28]
 800163a:	897b      	ldrh	r3, [r7, #10]
 800163c:	429a      	cmp	r2, r3
 800163e:	d3e6      	bcc.n	800160e <FIR_init+0x1f2>
            }
        }
    }
}
 8001640:	bf00      	nop
 8001642:	3728      	adds	r7, #40	@ 0x28
 8001644:	46bd      	mov	sp, r7
 8001646:	ecbd 8b02 	vpop	{d8}
 800164a:	bd80      	pop	{r7, pc}
 800164c:	40c90fdb 	.word	0x40c90fdb
 8001650:	40490fdb 	.word	0x40490fdb
 8001654:	3eeb851f 	.word	0x3eeb851f
 8001658:	3f0a3d71 	.word	0x3f0a3d71

0800165c <FIR_process>:

float FIR_process(FIR *fir, float input) {
 800165c:	b480      	push	{r7}
 800165e:	b085      	sub	sp, #20
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
 8001664:	ed87 0a00 	vstr	s0, [r7]
    // Update circular buffer with new input
    fir->buffer[fir->bufferIndex] = input;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	685a      	ldr	r2, [r3, #4]
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	895b      	ldrh	r3, [r3, #10]
 8001670:	009b      	lsls	r3, r3, #2
 8001672:	4413      	add	r3, r2
 8001674:	683a      	ldr	r2, [r7, #0]
 8001676:	601a      	str	r2, [r3, #0]

    // Compute output (convolution)
    float output = 0.0f;
 8001678:	f04f 0300 	mov.w	r3, #0
 800167c:	60fb      	str	r3, [r7, #12]
    uint16_t index = fir->bufferIndex;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	895b      	ldrh	r3, [r3, #10]
 8001682:	817b      	strh	r3, [r7, #10]

    for (uint16_t i = 0; i < fir->numTaps; i++) {
 8001684:	2300      	movs	r3, #0
 8001686:	813b      	strh	r3, [r7, #8]
 8001688:	e023      	b.n	80016d2 <FIR_process+0x76>
        output += fir->buffer[index] * fir->coeffs[i];
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	685a      	ldr	r2, [r3, #4]
 800168e:	897b      	ldrh	r3, [r7, #10]
 8001690:	009b      	lsls	r3, r3, #2
 8001692:	4413      	add	r3, r2
 8001694:	ed93 7a00 	vldr	s14, [r3]
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681a      	ldr	r2, [r3, #0]
 800169c:	893b      	ldrh	r3, [r7, #8]
 800169e:	009b      	lsls	r3, r3, #2
 80016a0:	4413      	add	r3, r2
 80016a2:	edd3 7a00 	vldr	s15, [r3]
 80016a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016aa:	ed97 7a03 	vldr	s14, [r7, #12]
 80016ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016b2:	edc7 7a03 	vstr	s15, [r7, #12]

        // Move back in circular buffer
        if (index == 0) {
 80016b6:	897b      	ldrh	r3, [r7, #10]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d104      	bne.n	80016c6 <FIR_process+0x6a>
            index = fir->numTaps - 1;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	891b      	ldrh	r3, [r3, #8]
 80016c0:	3b01      	subs	r3, #1
 80016c2:	817b      	strh	r3, [r7, #10]
 80016c4:	e002      	b.n	80016cc <FIR_process+0x70>
        } else {
            index--;
 80016c6:	897b      	ldrh	r3, [r7, #10]
 80016c8:	3b01      	subs	r3, #1
 80016ca:	817b      	strh	r3, [r7, #10]
    for (uint16_t i = 0; i < fir->numTaps; i++) {
 80016cc:	893b      	ldrh	r3, [r7, #8]
 80016ce:	3301      	adds	r3, #1
 80016d0:	813b      	strh	r3, [r7, #8]
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	891b      	ldrh	r3, [r3, #8]
 80016d6:	893a      	ldrh	r2, [r7, #8]
 80016d8:	429a      	cmp	r2, r3
 80016da:	d3d6      	bcc.n	800168a <FIR_process+0x2e>
        }
    }

    // Update buffer index for next input
    fir->bufferIndex++;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	895b      	ldrh	r3, [r3, #10]
 80016e0:	3301      	adds	r3, #1
 80016e2:	b29a      	uxth	r2, r3
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	815a      	strh	r2, [r3, #10]
    if (fir->bufferIndex >= fir->numTaps) {
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	895a      	ldrh	r2, [r3, #10]
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	891b      	ldrh	r3, [r3, #8]
 80016f0:	429a      	cmp	r2, r3
 80016f2:	d302      	bcc.n	80016fa <FIR_process+0x9e>
        fir->bufferIndex = 0;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2200      	movs	r2, #0
 80016f8:	815a      	strh	r2, [r3, #10]
    }

    return output;
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	ee07 3a90 	vmov	s15, r3
}
 8001700:	eeb0 0a67 	vmov.f32	s0, s15
 8001704:	3714      	adds	r7, #20
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr
	...

08001710 <PWM_init>:
 *      Author: beamk
 */

#include "PWM.h"

void PWM_init(PWM* pwm, TIM_HandleTypeDef* htimx, uint16_t tim_chx){
 8001710:	b580      	push	{r7, lr}
 8001712:	b084      	sub	sp, #16
 8001714:	af00      	add	r7, sp, #0
 8001716:	60f8      	str	r0, [r7, #12]
 8001718:	60b9      	str	r1, [r7, #8]
 800171a:	4613      	mov	r3, r2
 800171c:	80fb      	strh	r3, [r7, #6]
	pwm->CPU_FREQ = 170e6;
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	4a0b      	ldr	r2, [pc, #44]	@ (8001750 <PWM_init+0x40>)
 8001722:	611a      	str	r2, [r3, #16]
	pwm->htimx = htimx;
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	68ba      	ldr	r2, [r7, #8]
 8001728:	601a      	str	r2, [r3, #0]
	pwm->tim_chx = tim_chx;
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	88fa      	ldrh	r2, [r7, #6]
 800172e:	809a      	strh	r2, [r3, #4]
	pwm->OC = 0;
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	2200      	movs	r2, #0
 8001734:	615a      	str	r2, [r3, #20]
	HAL_TIM_Base_Start(htimx);
 8001736:	68b8      	ldr	r0, [r7, #8]
 8001738:	f005 f926 	bl	8006988 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(htimx, tim_chx);
 800173c:	88fb      	ldrh	r3, [r7, #6]
 800173e:	4619      	mov	r1, r3
 8001740:	68b8      	ldr	r0, [r7, #8]
 8001742:	f005 fa61 	bl	8006c08 <HAL_TIM_PWM_Start>
}
 8001746:	bf00      	nop
 8001748:	3710      	adds	r7, #16
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	0a21fe80 	.word	0x0a21fe80
 8001754:	00000000 	.word	0x00000000

08001758 <PWM_write_range>:
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
    }
}

void PWM_write_range(PWM* pwm, float freq, float duty){
 8001758:	b5b0      	push	{r4, r5, r7, lr}
 800175a:	b084      	sub	sp, #16
 800175c:	af00      	add	r7, sp, #0
 800175e:	60f8      	str	r0, [r7, #12]
 8001760:	ed87 0a02 	vstr	s0, [r7, #8]
 8001764:	edc7 0a01 	vstr	s1, [r7, #4]
    if (freq == 0) {
 8001768:	edd7 7a02 	vldr	s15, [r7, #8]
 800176c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001770:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001774:	d137      	bne.n	80017e6 <PWM_write_range+0x8e>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, 0);
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	889b      	ldrh	r3, [r3, #4]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d105      	bne.n	800178a <PWM_write_range+0x32>
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	2200      	movs	r2, #0
 8001786:	635a      	str	r2, [r3, #52]	@ 0x34
    	pwm->OC = (uint16_t) (pwm->overflow * fabs(duty) / 65535.0);
        __HAL_TIM_SET_PRESCALER(pwm->htimx, pwm->prescaler);
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
    }
}
 8001788:	e0e1      	b.n	800194e <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, 0);
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	889b      	ldrh	r3, [r3, #4]
 800178e:	2b04      	cmp	r3, #4
 8001790:	d105      	bne.n	800179e <PWM_write_range+0x46>
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	681a      	ldr	r2, [r3, #0]
 8001798:	2300      	movs	r3, #0
 800179a:	6393      	str	r3, [r2, #56]	@ 0x38
 800179c:	e0d7      	b.n	800194e <PWM_write_range+0x1f6>
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	889b      	ldrh	r3, [r3, #4]
 80017a2:	2b08      	cmp	r3, #8
 80017a4:	d105      	bne.n	80017b2 <PWM_write_range+0x5a>
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	681a      	ldr	r2, [r3, #0]
 80017ac:	2300      	movs	r3, #0
 80017ae:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80017b0:	e0cd      	b.n	800194e <PWM_write_range+0x1f6>
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	889b      	ldrh	r3, [r3, #4]
 80017b6:	2b0c      	cmp	r3, #12
 80017b8:	d105      	bne.n	80017c6 <PWM_write_range+0x6e>
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	681a      	ldr	r2, [r3, #0]
 80017c0:	2300      	movs	r3, #0
 80017c2:	6413      	str	r3, [r2, #64]	@ 0x40
 80017c4:	e0c3      	b.n	800194e <PWM_write_range+0x1f6>
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	889b      	ldrh	r3, [r3, #4]
 80017ca:	2b10      	cmp	r3, #16
 80017cc:	d105      	bne.n	80017da <PWM_write_range+0x82>
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	681a      	ldr	r2, [r3, #0]
 80017d4:	2300      	movs	r3, #0
 80017d6:	6493      	str	r3, [r2, #72]	@ 0x48
 80017d8:	e0b9      	b.n	800194e <PWM_write_range+0x1f6>
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	681a      	ldr	r2, [r3, #0]
 80017e0:	2300      	movs	r3, #0
 80017e2:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80017e4:	e0b3      	b.n	800194e <PWM_write_range+0x1f6>
    	pwm->period_cyc = (uint32_t) (pwm->CPU_FREQ / freq);
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	691b      	ldr	r3, [r3, #16]
 80017ea:	ee07 3a90 	vmov	s15, r3
 80017ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80017f2:	ed97 7a02 	vldr	s14, [r7, #8]
 80017f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80017fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80017fe:	ee17 2a90 	vmov	r2, s15
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	609a      	str	r2, [r3, #8]
    	pwm->prescaler = (uint16_t) ((pwm->period_cyc + 65535 - 1) / 65535) - 1; // Subtracting 1 since prescaler is zero-based
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	689b      	ldr	r3, [r3, #8]
 800180a:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 800180e:	33fe      	adds	r3, #254	@ 0xfe
 8001810:	4a53      	ldr	r2, [pc, #332]	@ (8001960 <PWM_write_range+0x208>)
 8001812:	fba2 2303 	umull	r2, r3, r2, r3
 8001816:	0bdb      	lsrs	r3, r3, #15
 8001818:	b29b      	uxth	r3, r3
 800181a:	3b01      	subs	r3, #1
 800181c:	b29a      	uxth	r2, r3
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	819a      	strh	r2, [r3, #12]
    	pwm->overflow = (uint16_t) ((pwm->CPU_FREQ / (float)(pwm->prescaler + 1) / freq) - 1);
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	691b      	ldr	r3, [r3, #16]
 8001826:	ee07 3a90 	vmov	s15, r3
 800182a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	899b      	ldrh	r3, [r3, #12]
 8001832:	3301      	adds	r3, #1
 8001834:	ee07 3a90 	vmov	s15, r3
 8001838:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800183c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001840:	ed97 7a02 	vldr	s14, [r7, #8]
 8001844:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001848:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800184c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001850:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001854:	ee17 3a90 	vmov	r3, s15
 8001858:	b29a      	uxth	r2, r3
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	81da      	strh	r2, [r3, #14]
    	pwm->OC = (uint16_t) (pwm->overflow * fabs(duty) / 65535.0);
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	89db      	ldrh	r3, [r3, #14]
 8001862:	4618      	mov	r0, r3
 8001864:	f7fe fe96 	bl	8000594 <__aeabi_i2d>
 8001868:	4604      	mov	r4, r0
 800186a:	460d      	mov	r5, r1
 800186c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001870:	eef0 7ae7 	vabs.f32	s15, s15
 8001874:	ee17 0a90 	vmov	r0, s15
 8001878:	f7fe fe9e 	bl	80005b8 <__aeabi_f2d>
 800187c:	4602      	mov	r2, r0
 800187e:	460b      	mov	r3, r1
 8001880:	4620      	mov	r0, r4
 8001882:	4629      	mov	r1, r5
 8001884:	f7fe fef0 	bl	8000668 <__aeabi_dmul>
 8001888:	4602      	mov	r2, r0
 800188a:	460b      	mov	r3, r1
 800188c:	4610      	mov	r0, r2
 800188e:	4619      	mov	r1, r3
 8001890:	a331      	add	r3, pc, #196	@ (adr r3, 8001958 <PWM_write_range+0x200>)
 8001892:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001896:	f7ff f811 	bl	80008bc <__aeabi_ddiv>
 800189a:	4602      	mov	r2, r0
 800189c:	460b      	mov	r3, r1
 800189e:	4610      	mov	r0, r2
 80018a0:	4619      	mov	r1, r3
 80018a2:	f7ff f97b 	bl	8000b9c <__aeabi_d2uiz>
 80018a6:	4603      	mov	r3, r0
 80018a8:	b29b      	uxth	r3, r3
 80018aa:	461a      	mov	r2, r3
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	615a      	str	r2, [r3, #20]
        __HAL_TIM_SET_PRESCALER(pwm->htimx, pwm->prescaler);
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	899a      	ldrh	r2, [r3, #12]
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	629a      	str	r2, [r3, #40]	@ 0x28
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	89da      	ldrh	r2, [r3, #14]
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	62da      	str	r2, [r3, #44]	@ 0x2c
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	89da      	ldrh	r2, [r3, #14]
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	60da      	str	r2, [r3, #12]
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	889b      	ldrh	r3, [r3, #4]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d106      	bne.n	80018e8 <PWM_write_range+0x190>
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	68fa      	ldr	r2, [r7, #12]
 80018e2:	6952      	ldr	r2, [r2, #20]
 80018e4:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80018e6:	e032      	b.n	800194e <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	889b      	ldrh	r3, [r3, #4]
 80018ec:	2b04      	cmp	r3, #4
 80018ee:	d106      	bne.n	80018fe <PWM_write_range+0x1a6>
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	681a      	ldr	r2, [r3, #0]
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	695b      	ldr	r3, [r3, #20]
 80018fa:	6393      	str	r3, [r2, #56]	@ 0x38
}
 80018fc:	e027      	b.n	800194e <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	889b      	ldrh	r3, [r3, #4]
 8001902:	2b08      	cmp	r3, #8
 8001904:	d106      	bne.n	8001914 <PWM_write_range+0x1bc>
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	681a      	ldr	r2, [r3, #0]
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	695b      	ldr	r3, [r3, #20]
 8001910:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8001912:	e01c      	b.n	800194e <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	889b      	ldrh	r3, [r3, #4]
 8001918:	2b0c      	cmp	r3, #12
 800191a:	d106      	bne.n	800192a <PWM_write_range+0x1d2>
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	681a      	ldr	r2, [r3, #0]
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	695b      	ldr	r3, [r3, #20]
 8001926:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8001928:	e011      	b.n	800194e <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	889b      	ldrh	r3, [r3, #4]
 800192e:	2b10      	cmp	r3, #16
 8001930:	d106      	bne.n	8001940 <PWM_write_range+0x1e8>
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	681a      	ldr	r2, [r3, #0]
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	695b      	ldr	r3, [r3, #20]
 800193c:	6493      	str	r3, [r2, #72]	@ 0x48
}
 800193e:	e006      	b.n	800194e <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	681a      	ldr	r2, [r3, #0]
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	695b      	ldr	r3, [r3, #20]
 800194a:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 800194c:	e7ff      	b.n	800194e <PWM_write_range+0x1f6>
 800194e:	bf00      	nop
 8001950:	3710      	adds	r7, #16
 8001952:	46bd      	mov	sp, r7
 8001954:	bdb0      	pop	{r4, r5, r7, pc}
 8001956:	bf00      	nop
 8001958:	00000000 	.word	0x00000000
 800195c:	40efffe0 	.word	0x40efffe0
 8001960:	80008001 	.word	0x80008001

08001964 <QEI_init>:
* Created on: Mar 30, 2024
* Author: beamk
*/
#include "QEI.h"

void QEI_init(QEI *qei, TIM_HandleTypeDef *htimx, int32_t ppr, uint32_t freq, float ratio) {
 8001964:	b580      	push	{r7, lr}
 8001966:	b086      	sub	sp, #24
 8001968:	af00      	add	r7, sp, #0
 800196a:	6178      	str	r0, [r7, #20]
 800196c:	6139      	str	r1, [r7, #16]
 800196e:	60fa      	str	r2, [r7, #12]
 8001970:	60bb      	str	r3, [r7, #8]
 8001972:	ed87 0a01 	vstr	s0, [r7, #4]
    qei->htimx = htimx;
 8001976:	697b      	ldr	r3, [r7, #20]
 8001978:	693a      	ldr	r2, [r7, #16]
 800197a:	611a      	str	r2, [r3, #16]
    qei->ppr = ppr;
 800197c:	697b      	ldr	r3, [r7, #20]
 800197e:	68fa      	ldr	r2, [r7, #12]
 8001980:	619a      	str	r2, [r3, #24]
    qei->freq = freq;
 8001982:	697b      	ldr	r3, [r7, #20]
 8001984:	68ba      	ldr	r2, [r7, #8]
 8001986:	621a      	str	r2, [r3, #32]
    qei->c[NOW] = 0;
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	2200      	movs	r2, #0
 800198c:	601a      	str	r2, [r3, #0]
    qei->c[PREV] = 0;
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	2200      	movs	r2, #0
 8001992:	605a      	str	r2, [r3, #4]
    qei->pps = 0;
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	f04f 0200 	mov.w	r2, #0
 800199a:	625a      	str	r2, [r3, #36]	@ 0x24
    qei->rpm = 0;
 800199c:	697b      	ldr	r3, [r7, #20]
 800199e:	f04f 0200 	mov.w	r2, #0
 80019a2:	629a      	str	r2, [r3, #40]	@ 0x28
    qei->radps = 0;
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	f04f 0200 	mov.w	r2, #0
 80019aa:	62da      	str	r2, [r3, #44]	@ 0x2c
    qei->enc_period = 65536 - (65536 % ppr);
 80019ac:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80019b0:	68fa      	ldr	r2, [r7, #12]
 80019b2:	fb93 f2f2 	sdiv	r2, r3, r2
 80019b6:	68f9      	ldr	r1, [r7, #12]
 80019b8:	fb01 f202 	mul.w	r2, r1, r2
 80019bc:	1a9b      	subs	r3, r3, r2
 80019be:	f5c3 3280 	rsb	r2, r3, #65536	@ 0x10000
 80019c2:	697b      	ldr	r3, [r7, #20]
 80019c4:	615a      	str	r2, [r3, #20]
    qei->pulses = 0;
 80019c6:	697b      	ldr	r3, [r7, #20]
 80019c8:	2200      	movs	r2, #0
 80019ca:	631a      	str	r2, [r3, #48]	@ 0x30
    //qei->pulsesf = 0;
    qei->revs = 0;
 80019cc:	697b      	ldr	r3, [r7, #20]
 80019ce:	f04f 0200 	mov.w	r2, #0
 80019d2:	635a      	str	r2, [r3, #52]	@ 0x34
    qei->rads = 0;
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	f04f 0200 	mov.w	r2, #0
 80019da:	639a      	str	r2, [r3, #56]	@ 0x38
    qei->mm = 0;
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	f04f 0200 	mov.w	r2, #0
 80019e2:	641a      	str	r2, [r3, #64]	@ 0x40
    qei->mmps = 0;
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	f04f 0200 	mov.w	r2, #0
 80019ea:	645a      	str	r2, [r3, #68]	@ 0x44

    qei->ratio = ratio;  // Gear ratio or scaling factor
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	687a      	ldr	r2, [r7, #4]
 80019f0:	649a      	str	r2, [r3, #72]	@ 0x48
    HAL_TIM_Encoder_Start(htimx, TIM_CHANNEL_ALL);
 80019f2:	213c      	movs	r1, #60	@ 0x3c
 80019f4:	6938      	ldr	r0, [r7, #16]
 80019f6:	f005 fabf 	bl	8006f78 <HAL_TIM_Encoder_Start>
}
 80019fa:	bf00      	nop
 80019fc:	3718      	adds	r7, #24
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	0000      	movs	r0, r0
 8001a04:	0000      	movs	r0, r0
	...

08001a08 <QEI_get_diff_count>:

void QEI_get_diff_count(QEI *qei) {
 8001a08:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001a0c:	b084      	sub	sp, #16
 8001a0e:	af00      	add	r7, sp, #0
 8001a10:	6078      	str	r0, [r7, #4]
    qei->c[NOW] = __HAL_TIM_GET_COUNTER(qei->htimx); // Update the current count
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	691b      	ldr	r3, [r3, #16]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	601a      	str	r2, [r3, #0]

    // Calculate the difference in counts
    int32_t diff_counts = qei->c[NOW] - qei->c[PREV];
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681a      	ldr	r2, [r3, #0]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	1ad3      	subs	r3, r2, r3
 8001a28:	60fb      	str	r3, [r7, #12]

    //Unwrap
    if (diff_counts > qei->enc_period / 2) {
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	695b      	ldr	r3, [r3, #20]
 8001a2e:	0fda      	lsrs	r2, r3, #31
 8001a30:	4413      	add	r3, r2
 8001a32:	105b      	asrs	r3, r3, #1
 8001a34:	461a      	mov	r2, r3
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	dd05      	ble.n	8001a48 <QEI_get_diff_count+0x40>
        diff_counts -= qei->enc_period;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	695b      	ldr	r3, [r3, #20]
 8001a40:	68fa      	ldr	r2, [r7, #12]
 8001a42:	1ad3      	subs	r3, r2, r3
 8001a44:	60fb      	str	r3, [r7, #12]
 8001a46:	e00e      	b.n	8001a66 <QEI_get_diff_count+0x5e>
    } else if (diff_counts < -(qei->enc_period) / 2) {
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	695b      	ldr	r3, [r3, #20]
 8001a4c:	425b      	negs	r3, r3
 8001a4e:	0fda      	lsrs	r2, r3, #31
 8001a50:	4413      	add	r3, r2
 8001a52:	105b      	asrs	r3, r3, #1
 8001a54:	461a      	mov	r2, r3
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	da04      	bge.n	8001a66 <QEI_get_diff_count+0x5e>
        diff_counts += qei->enc_period;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	695b      	ldr	r3, [r3, #20]
 8001a60:	68fa      	ldr	r2, [r7, #12]
 8001a62:	4413      	add	r3, r2
 8001a64:	60fb      	str	r3, [r7, #12]
    }

    qei->diff_counts = diff_counts;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	68fa      	ldr	r2, [r7, #12]
 8001a6a:	61da      	str	r2, [r3, #28]
    //qei->diff_countsf = (float)diff_counts*1.25;

    // Calculate Position with ratio adjustment
    qei->pulses += qei->diff_counts;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	69db      	ldr	r3, [r3, #28]
 8001a74:	441a      	add	r2, r3
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	631a      	str	r2, [r3, #48]	@ 0x30
    //qei->pulsesf += qei->diff_countsf;

    // Apply ratio to all position calculations
    qei->revs += (qei->diff_counts / (float)(qei->ppr)) * qei->ratio;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	69db      	ldr	r3, [r3, #28]
 8001a84:	ee07 3a90 	vmov	s15, r3
 8001a88:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	699b      	ldr	r3, [r3, #24]
 8001a90:	ee07 3a90 	vmov	s15, r3
 8001a94:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a98:	eec6 6a27 	vdiv.f32	s13, s12, s15
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 8001aa2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001aa6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
    qei->mm += (qei->diff_counts / (float)(qei->ppr)) * 10.0 * qei->ratio;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f7fe fd7f 	bl	80005b8 <__aeabi_f2d>
 8001aba:	4604      	mov	r4, r0
 8001abc:	460d      	mov	r5, r1
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	69db      	ldr	r3, [r3, #28]
 8001ac2:	ee07 3a90 	vmov	s15, r3
 8001ac6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	699b      	ldr	r3, [r3, #24]
 8001ace:	ee07 3a90 	vmov	s15, r3
 8001ad2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ad6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001ada:	ee16 0a90 	vmov	r0, s13
 8001ade:	f7fe fd6b 	bl	80005b8 <__aeabi_f2d>
 8001ae2:	f04f 0200 	mov.w	r2, #0
 8001ae6:	4b36      	ldr	r3, [pc, #216]	@ (8001bc0 <QEI_get_diff_count+0x1b8>)
 8001ae8:	f7fe fdbe 	bl	8000668 <__aeabi_dmul>
 8001aec:	4602      	mov	r2, r0
 8001aee:	460b      	mov	r3, r1
 8001af0:	4690      	mov	r8, r2
 8001af2:	4699      	mov	r9, r3
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001af8:	4618      	mov	r0, r3
 8001afa:	f7fe fd5d 	bl	80005b8 <__aeabi_f2d>
 8001afe:	4602      	mov	r2, r0
 8001b00:	460b      	mov	r3, r1
 8001b02:	4640      	mov	r0, r8
 8001b04:	4649      	mov	r1, r9
 8001b06:	f7fe fdaf 	bl	8000668 <__aeabi_dmul>
 8001b0a:	4602      	mov	r2, r0
 8001b0c:	460b      	mov	r3, r1
 8001b0e:	4620      	mov	r0, r4
 8001b10:	4629      	mov	r1, r5
 8001b12:	f7fe fbf3 	bl	80002fc <__adddf3>
 8001b16:	4602      	mov	r2, r0
 8001b18:	460b      	mov	r3, r1
 8001b1a:	4610      	mov	r0, r2
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	f7ff f85d 	bl	8000bdc <__aeabi_d2f>
 8001b22:	4602      	mov	r2, r0
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	641a      	str	r2, [r3, #64]	@ 0x40
    qei->rads += (qei->diff_counts / (float)(qei->ppr)) * 2 * M_PI * qei->ratio;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f7fe fd43 	bl	80005b8 <__aeabi_f2d>
 8001b32:	4604      	mov	r4, r0
 8001b34:	460d      	mov	r5, r1
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	69db      	ldr	r3, [r3, #28]
 8001b3a:	ee07 3a90 	vmov	s15, r3
 8001b3e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	699b      	ldr	r3, [r3, #24]
 8001b46:	ee07 3a90 	vmov	s15, r3
 8001b4a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b4e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b52:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001b56:	ee17 0a90 	vmov	r0, s15
 8001b5a:	f7fe fd2d 	bl	80005b8 <__aeabi_f2d>
 8001b5e:	a316      	add	r3, pc, #88	@ (adr r3, 8001bb8 <QEI_get_diff_count+0x1b0>)
 8001b60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b64:	f7fe fd80 	bl	8000668 <__aeabi_dmul>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	460b      	mov	r3, r1
 8001b6c:	4690      	mov	r8, r2
 8001b6e:	4699      	mov	r9, r3
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b74:	4618      	mov	r0, r3
 8001b76:	f7fe fd1f 	bl	80005b8 <__aeabi_f2d>
 8001b7a:	4602      	mov	r2, r0
 8001b7c:	460b      	mov	r3, r1
 8001b7e:	4640      	mov	r0, r8
 8001b80:	4649      	mov	r1, r9
 8001b82:	f7fe fd71 	bl	8000668 <__aeabi_dmul>
 8001b86:	4602      	mov	r2, r0
 8001b88:	460b      	mov	r3, r1
 8001b8a:	4620      	mov	r0, r4
 8001b8c:	4629      	mov	r1, r5
 8001b8e:	f7fe fbb5 	bl	80002fc <__adddf3>
 8001b92:	4602      	mov	r2, r0
 8001b94:	460b      	mov	r3, r1
 8001b96:	4610      	mov	r0, r2
 8001b98:	4619      	mov	r1, r3
 8001b9a:	f7ff f81f 	bl	8000bdc <__aeabi_d2f>
 8001b9e:	4602      	mov	r2, r0
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	639a      	str	r2, [r3, #56]	@ 0x38

    qei->c[PREV] = qei->c[NOW]; // Store the previous count
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681a      	ldr	r2, [r3, #0]
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	605a      	str	r2, [r3, #4]
}
 8001bac:	bf00      	nop
 8001bae:	3710      	adds	r7, #16
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001bb6:	bf00      	nop
 8001bb8:	54442d18 	.word	0x54442d18
 8001bbc:	400921fb 	.word	0x400921fb
 8001bc0:	40240000 	.word	0x40240000
 8001bc4:	00000000 	.word	0x00000000

08001bc8 <QEI_compute_data>:

void QEI_compute_data(QEI *qei) {
 8001bc8:	b5b0      	push	{r4, r5, r7, lr}
 8001bca:	b084      	sub	sp, #16
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
    // Calculate Velocity with ratio adjustment
    qei->pps = qei->diff_counts * ((int)(qei->freq));
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	69db      	ldr	r3, [r3, #28]
 8001bd4:	687a      	ldr	r2, [r7, #4]
 8001bd6:	6a12      	ldr	r2, [r2, #32]
 8001bd8:	fb02 f303 	mul.w	r3, r2, r3
 8001bdc:	ee07 3a90 	vmov	s15, r3
 8001be0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

    // Apply ratio to all velocity calculations
    qei->rpm = qei->pps * 60.0 / (float)(qei->ppr) * qei->ratio;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f7fe fce2 	bl	80005b8 <__aeabi_f2d>
 8001bf4:	f04f 0200 	mov.w	r2, #0
 8001bf8:	4b6b      	ldr	r3, [pc, #428]	@ (8001da8 <QEI_compute_data+0x1e0>)
 8001bfa:	f7fe fd35 	bl	8000668 <__aeabi_dmul>
 8001bfe:	4602      	mov	r2, r0
 8001c00:	460b      	mov	r3, r1
 8001c02:	4614      	mov	r4, r2
 8001c04:	461d      	mov	r5, r3
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	699b      	ldr	r3, [r3, #24]
 8001c0a:	ee07 3a90 	vmov	s15, r3
 8001c0e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c12:	ee17 0a90 	vmov	r0, s15
 8001c16:	f7fe fccf 	bl	80005b8 <__aeabi_f2d>
 8001c1a:	4602      	mov	r2, r0
 8001c1c:	460b      	mov	r3, r1
 8001c1e:	4620      	mov	r0, r4
 8001c20:	4629      	mov	r1, r5
 8001c22:	f7fe fe4b 	bl	80008bc <__aeabi_ddiv>
 8001c26:	4602      	mov	r2, r0
 8001c28:	460b      	mov	r3, r1
 8001c2a:	4614      	mov	r4, r2
 8001c2c:	461d      	mov	r5, r3
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c32:	4618      	mov	r0, r3
 8001c34:	f7fe fcc0 	bl	80005b8 <__aeabi_f2d>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	460b      	mov	r3, r1
 8001c3c:	4620      	mov	r0, r4
 8001c3e:	4629      	mov	r1, r5
 8001c40:	f7fe fd12 	bl	8000668 <__aeabi_dmul>
 8001c44:	4602      	mov	r2, r0
 8001c46:	460b      	mov	r3, r1
 8001c48:	4610      	mov	r0, r2
 8001c4a:	4619      	mov	r1, r3
 8001c4c:	f7fe ffc6 	bl	8000bdc <__aeabi_d2f>
 8001c50:	4602      	mov	r2, r0
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	629a      	str	r2, [r3, #40]	@ 0x28
    qei->radps = qei->pps * 2 * M_PI / (float)(qei->ppr) * qei->ratio;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8001c5c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001c60:	ee17 0a90 	vmov	r0, s15
 8001c64:	f7fe fca8 	bl	80005b8 <__aeabi_f2d>
 8001c68:	a34d      	add	r3, pc, #308	@ (adr r3, 8001da0 <QEI_compute_data+0x1d8>)
 8001c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c6e:	f7fe fcfb 	bl	8000668 <__aeabi_dmul>
 8001c72:	4602      	mov	r2, r0
 8001c74:	460b      	mov	r3, r1
 8001c76:	4614      	mov	r4, r2
 8001c78:	461d      	mov	r5, r3
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	699b      	ldr	r3, [r3, #24]
 8001c7e:	ee07 3a90 	vmov	s15, r3
 8001c82:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c86:	ee17 0a90 	vmov	r0, s15
 8001c8a:	f7fe fc95 	bl	80005b8 <__aeabi_f2d>
 8001c8e:	4602      	mov	r2, r0
 8001c90:	460b      	mov	r3, r1
 8001c92:	4620      	mov	r0, r4
 8001c94:	4629      	mov	r1, r5
 8001c96:	f7fe fe11 	bl	80008bc <__aeabi_ddiv>
 8001c9a:	4602      	mov	r2, r0
 8001c9c:	460b      	mov	r3, r1
 8001c9e:	4614      	mov	r4, r2
 8001ca0:	461d      	mov	r5, r3
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f7fe fc86 	bl	80005b8 <__aeabi_f2d>
 8001cac:	4602      	mov	r2, r0
 8001cae:	460b      	mov	r3, r1
 8001cb0:	4620      	mov	r0, r4
 8001cb2:	4629      	mov	r1, r5
 8001cb4:	f7fe fcd8 	bl	8000668 <__aeabi_dmul>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	460b      	mov	r3, r1
 8001cbc:	4610      	mov	r0, r2
 8001cbe:	4619      	mov	r1, r3
 8001cc0:	f7fe ff8c 	bl	8000bdc <__aeabi_d2f>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	62da      	str	r2, [r3, #44]	@ 0x2c
    qei->mmps = qei->pps * 10.0 / (float)(qei->ppr) * qei->ratio;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f7fe fc72 	bl	80005b8 <__aeabi_f2d>
 8001cd4:	f04f 0200 	mov.w	r2, #0
 8001cd8:	4b34      	ldr	r3, [pc, #208]	@ (8001dac <QEI_compute_data+0x1e4>)
 8001cda:	f7fe fcc5 	bl	8000668 <__aeabi_dmul>
 8001cde:	4602      	mov	r2, r0
 8001ce0:	460b      	mov	r3, r1
 8001ce2:	4614      	mov	r4, r2
 8001ce4:	461d      	mov	r5, r3
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	699b      	ldr	r3, [r3, #24]
 8001cea:	ee07 3a90 	vmov	s15, r3
 8001cee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cf2:	ee17 0a90 	vmov	r0, s15
 8001cf6:	f7fe fc5f 	bl	80005b8 <__aeabi_f2d>
 8001cfa:	4602      	mov	r2, r0
 8001cfc:	460b      	mov	r3, r1
 8001cfe:	4620      	mov	r0, r4
 8001d00:	4629      	mov	r1, r5
 8001d02:	f7fe fddb 	bl	80008bc <__aeabi_ddiv>
 8001d06:	4602      	mov	r2, r0
 8001d08:	460b      	mov	r3, r1
 8001d0a:	4614      	mov	r4, r2
 8001d0c:	461d      	mov	r5, r3
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d12:	4618      	mov	r0, r3
 8001d14:	f7fe fc50 	bl	80005b8 <__aeabi_f2d>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	460b      	mov	r3, r1
 8001d1c:	4620      	mov	r0, r4
 8001d1e:	4629      	mov	r1, r5
 8001d20:	f7fe fca2 	bl	8000668 <__aeabi_dmul>
 8001d24:	4602      	mov	r2, r0
 8001d26:	460b      	mov	r3, r1
 8001d28:	4610      	mov	r0, r2
 8001d2a:	4619      	mov	r1, r3
 8001d2c:	f7fe ff56 	bl	8000bdc <__aeabi_d2f>
 8001d30:	4602      	mov	r2, r0
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	645a      	str	r2, [r3, #68]	@ 0x44

    // Calculate Acceleration with ratio adjustment
    qei->r[NOW] = qei->radps;  // radps already has ratio applied
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	609a      	str	r2, [r3, #8]
    float diff_velocity = (qei->r[NOW] - qei->r[PREV]);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	ed93 7a02 	vldr	s14, [r3, #8]
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	edd3 7a03 	vldr	s15, [r3, #12]
 8001d4a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d4e:	edc7 7a03 	vstr	s15, [r7, #12]
    if (diff_velocity == 0) {
 8001d52:	edd7 7a03 	vldr	s15, [r7, #12]
 8001d56:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001d5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d5e:	d104      	bne.n	8001d6a <QEI_compute_data+0x1a2>
        qei->radpss = 0;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	f04f 0200 	mov.w	r2, #0
 8001d66:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001d68:	e00f      	b.n	8001d8a <QEI_compute_data+0x1c2>
    } else {
        qei->radpss = diff_velocity / (1 / (qei->freq));
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6a1b      	ldr	r3, [r3, #32]
 8001d6e:	2b01      	cmp	r3, #1
 8001d70:	d102      	bne.n	8001d78 <QEI_compute_data+0x1b0>
 8001d72:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001d76:	e001      	b.n	8001d7c <QEI_compute_data+0x1b4>
 8001d78:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8001db0 <QEI_compute_data+0x1e8>
 8001d7c:	edd7 6a03 	vldr	s13, [r7, #12]
 8001d80:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
        // No need to multiply by ratio again since diff_velocity already includes it
    }
    qei->r[PREV] = qei->r[NOW]; // Store the previous count
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	689a      	ldr	r2, [r3, #8]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	60da      	str	r2, [r3, #12]
}
 8001d92:	bf00      	nop
 8001d94:	3710      	adds	r7, #16
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bdb0      	pop	{r4, r5, r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	f3af 8000 	nop.w
 8001da0:	54442d18 	.word	0x54442d18
 8001da4:	400921fb 	.word	0x400921fb
 8001da8:	404e0000 	.word	0x404e0000
 8001dac:	40240000 	.word	0x40240000
 8001db0:	00000000 	.word	0x00000000

08001db4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001db4:	b580      	push	{r7, lr}
 8001db6:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001db8:	4a04      	ldr	r2, [pc, #16]	@ (8001dcc <MX_FREERTOS_Init+0x18>)
 8001dba:	2100      	movs	r1, #0
 8001dbc:	4804      	ldr	r0, [pc, #16]	@ (8001dd0 <MX_FREERTOS_Init+0x1c>)
 8001dbe:	f008 fa0f 	bl	800a1e0 <osThreadNew>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	4a03      	ldr	r2, [pc, #12]	@ (8001dd4 <MX_FREERTOS_Init+0x20>)
 8001dc6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8001dc8:	bf00      	nop
 8001dca:	bd80      	pop	{r7, pc}
 8001dcc:	0801d508 	.word	0x0801d508
 8001dd0:	08002639 	.word	0x08002639
 8001dd4:	200004a4 	.word	0x200004a4

08001dd8 <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b08a      	sub	sp, #40	@ 0x28
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8001de0:	2300      	movs	r3, #0
 8001de2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8001de4:	f009 fad0 	bl	800b388 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8001de8:	4b5a      	ldr	r3, [pc, #360]	@ (8001f54 <pvPortMallocMicroROS+0x17c>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d101      	bne.n	8001df4 <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 8001df0:	f000 f986 	bl	8002100 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8001df4:	4b58      	ldr	r3, [pc, #352]	@ (8001f58 <pvPortMallocMicroROS+0x180>)
 8001df6:	681a      	ldr	r2, [r3, #0]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	4013      	ands	r3, r2
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	f040 8090 	bne.w	8001f22 <pvPortMallocMicroROS+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d01e      	beq.n	8001e46 <pvPortMallocMicroROS+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8001e08:	2208      	movs	r2, #8
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	4413      	add	r3, r2
 8001e0e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	f003 0307 	and.w	r3, r3, #7
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d015      	beq.n	8001e46 <pvPortMallocMicroROS+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	f023 0307 	bic.w	r3, r3, #7
 8001e20:	3308      	adds	r3, #8
 8001e22:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	f003 0307 	and.w	r3, r3, #7
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d00b      	beq.n	8001e46 <pvPortMallocMicroROS+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001e2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001e32:	f383 8811 	msr	BASEPRI, r3
 8001e36:	f3bf 8f6f 	isb	sy
 8001e3a:	f3bf 8f4f 	dsb	sy
 8001e3e:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001e40:	bf00      	nop
 8001e42:	bf00      	nop
 8001e44:	e7fd      	b.n	8001e42 <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d06a      	beq.n	8001f22 <pvPortMallocMicroROS+0x14a>
 8001e4c:	4b43      	ldr	r3, [pc, #268]	@ (8001f5c <pvPortMallocMicroROS+0x184>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	687a      	ldr	r2, [r7, #4]
 8001e52:	429a      	cmp	r2, r3
 8001e54:	d865      	bhi.n	8001f22 <pvPortMallocMicroROS+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8001e56:	4b42      	ldr	r3, [pc, #264]	@ (8001f60 <pvPortMallocMicroROS+0x188>)
 8001e58:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8001e5a:	4b41      	ldr	r3, [pc, #260]	@ (8001f60 <pvPortMallocMicroROS+0x188>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001e60:	e004      	b.n	8001e6c <pvPortMallocMicroROS+0x94>
				{
					pxPreviousBlock = pxBlock;
 8001e62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e64:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8001e66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001e6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	687a      	ldr	r2, [r7, #4]
 8001e72:	429a      	cmp	r2, r3
 8001e74:	d903      	bls.n	8001e7e <pvPortMallocMicroROS+0xa6>
 8001e76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d1f1      	bne.n	8001e62 <pvPortMallocMicroROS+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8001e7e:	4b35      	ldr	r3, [pc, #212]	@ (8001f54 <pvPortMallocMicroROS+0x17c>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001e84:	429a      	cmp	r2, r3
 8001e86:	d04c      	beq.n	8001f22 <pvPortMallocMicroROS+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001e88:	6a3b      	ldr	r3, [r7, #32]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	2208      	movs	r2, #8
 8001e8e:	4413      	add	r3, r2
 8001e90:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8001e92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e94:	681a      	ldr	r2, [r3, #0]
 8001e96:	6a3b      	ldr	r3, [r7, #32]
 8001e98:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8001e9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e9c:	685a      	ldr	r2, [r3, #4]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	1ad2      	subs	r2, r2, r3
 8001ea2:	2308      	movs	r3, #8
 8001ea4:	005b      	lsls	r3, r3, #1
 8001ea6:	429a      	cmp	r2, r3
 8001ea8:	d920      	bls.n	8001eec <pvPortMallocMicroROS+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8001eaa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	4413      	add	r3, r2
 8001eb0:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001eb2:	69bb      	ldr	r3, [r7, #24]
 8001eb4:	f003 0307 	and.w	r3, r3, #7
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d00b      	beq.n	8001ed4 <pvPortMallocMicroROS+0xfc>
	__asm volatile
 8001ebc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001ec0:	f383 8811 	msr	BASEPRI, r3
 8001ec4:	f3bf 8f6f 	isb	sy
 8001ec8:	f3bf 8f4f 	dsb	sy
 8001ecc:	613b      	str	r3, [r7, #16]
}
 8001ece:	bf00      	nop
 8001ed0:	bf00      	nop
 8001ed2:	e7fd      	b.n	8001ed0 <pvPortMallocMicroROS+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8001ed4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ed6:	685a      	ldr	r2, [r3, #4]
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	1ad2      	subs	r2, r2, r3
 8001edc:	69bb      	ldr	r3, [r7, #24]
 8001ede:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8001ee0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ee2:	687a      	ldr	r2, [r7, #4]
 8001ee4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8001ee6:	69b8      	ldr	r0, [r7, #24]
 8001ee8:	f000 f96c 	bl	80021c4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001eec:	4b1b      	ldr	r3, [pc, #108]	@ (8001f5c <pvPortMallocMicroROS+0x184>)
 8001eee:	681a      	ldr	r2, [r3, #0]
 8001ef0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	1ad3      	subs	r3, r2, r3
 8001ef6:	4a19      	ldr	r2, [pc, #100]	@ (8001f5c <pvPortMallocMicroROS+0x184>)
 8001ef8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001efa:	4b18      	ldr	r3, [pc, #96]	@ (8001f5c <pvPortMallocMicroROS+0x184>)
 8001efc:	681a      	ldr	r2, [r3, #0]
 8001efe:	4b19      	ldr	r3, [pc, #100]	@ (8001f64 <pvPortMallocMicroROS+0x18c>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	429a      	cmp	r2, r3
 8001f04:	d203      	bcs.n	8001f0e <pvPortMallocMicroROS+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8001f06:	4b15      	ldr	r3, [pc, #84]	@ (8001f5c <pvPortMallocMicroROS+0x184>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4a16      	ldr	r2, [pc, #88]	@ (8001f64 <pvPortMallocMicroROS+0x18c>)
 8001f0c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8001f0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f10:	685a      	ldr	r2, [r3, #4]
 8001f12:	4b11      	ldr	r3, [pc, #68]	@ (8001f58 <pvPortMallocMicroROS+0x180>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	431a      	orrs	r2, r3
 8001f18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f1a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8001f1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f1e:	2200      	movs	r2, #0
 8001f20:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8001f22:	f009 fa3f 	bl	800b3a4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8001f26:	69fb      	ldr	r3, [r7, #28]
 8001f28:	f003 0307 	and.w	r3, r3, #7
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d00b      	beq.n	8001f48 <pvPortMallocMicroROS+0x170>
	__asm volatile
 8001f30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001f34:	f383 8811 	msr	BASEPRI, r3
 8001f38:	f3bf 8f6f 	isb	sy
 8001f3c:	f3bf 8f4f 	dsb	sy
 8001f40:	60fb      	str	r3, [r7, #12]
}
 8001f42:	bf00      	nop
 8001f44:	bf00      	nop
 8001f46:	e7fd      	b.n	8001f44 <pvPortMallocMicroROS+0x16c>
	return pvReturn;
 8001f48:	69fb      	ldr	r3, [r7, #28]
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	3728      	adds	r7, #40	@ 0x28
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	bf00      	nop
 8001f54:	20003fec 	.word	0x20003fec
 8001f58:	20003ff8 	.word	0x20003ff8
 8001f5c:	20003ff0 	.word	0x20003ff0
 8001f60:	20003fe4 	.word	0x20003fe4
 8001f64:	20003ff4 	.word	0x20003ff4

08001f68 <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b086      	sub	sp, #24
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d04a      	beq.n	8002010 <vPortFreeMicroROS+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8001f7a:	2308      	movs	r3, #8
 8001f7c:	425b      	negs	r3, r3
 8001f7e:	697a      	ldr	r2, [r7, #20]
 8001f80:	4413      	add	r3, r2
 8001f82:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8001f88:	693b      	ldr	r3, [r7, #16]
 8001f8a:	685a      	ldr	r2, [r3, #4]
 8001f8c:	4b22      	ldr	r3, [pc, #136]	@ (8002018 <vPortFreeMicroROS+0xb0>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4013      	ands	r3, r2
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d10b      	bne.n	8001fae <vPortFreeMicroROS+0x46>
	__asm volatile
 8001f96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001f9a:	f383 8811 	msr	BASEPRI, r3
 8001f9e:	f3bf 8f6f 	isb	sy
 8001fa2:	f3bf 8f4f 	dsb	sy
 8001fa6:	60fb      	str	r3, [r7, #12]
}
 8001fa8:	bf00      	nop
 8001faa:	bf00      	nop
 8001fac:	e7fd      	b.n	8001faa <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8001fae:	693b      	ldr	r3, [r7, #16]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d00b      	beq.n	8001fce <vPortFreeMicroROS+0x66>
	__asm volatile
 8001fb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001fba:	f383 8811 	msr	BASEPRI, r3
 8001fbe:	f3bf 8f6f 	isb	sy
 8001fc2:	f3bf 8f4f 	dsb	sy
 8001fc6:	60bb      	str	r3, [r7, #8]
}
 8001fc8:	bf00      	nop
 8001fca:	bf00      	nop
 8001fcc:	e7fd      	b.n	8001fca <vPortFreeMicroROS+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	685a      	ldr	r2, [r3, #4]
 8001fd2:	4b11      	ldr	r3, [pc, #68]	@ (8002018 <vPortFreeMicroROS+0xb0>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4013      	ands	r3, r2
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d019      	beq.n	8002010 <vPortFreeMicroROS+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8001fdc:	693b      	ldr	r3, [r7, #16]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d115      	bne.n	8002010 <vPortFreeMicroROS+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8001fe4:	693b      	ldr	r3, [r7, #16]
 8001fe6:	685a      	ldr	r2, [r3, #4]
 8001fe8:	4b0b      	ldr	r3, [pc, #44]	@ (8002018 <vPortFreeMicroROS+0xb0>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	43db      	mvns	r3, r3
 8001fee:	401a      	ands	r2, r3
 8001ff0:	693b      	ldr	r3, [r7, #16]
 8001ff2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8001ff4:	f009 f9c8 	bl	800b388 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	685a      	ldr	r2, [r3, #4]
 8001ffc:	4b07      	ldr	r3, [pc, #28]	@ (800201c <vPortFreeMicroROS+0xb4>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4413      	add	r3, r2
 8002002:	4a06      	ldr	r2, [pc, #24]	@ (800201c <vPortFreeMicroROS+0xb4>)
 8002004:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002006:	6938      	ldr	r0, [r7, #16]
 8002008:	f000 f8dc 	bl	80021c4 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800200c:	f009 f9ca 	bl	800b3a4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8002010:	bf00      	nop
 8002012:	3718      	adds	r7, #24
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}
 8002018:	20003ff8 	.word	0x20003ff8
 800201c:	20003ff0 	.word	0x20003ff0

08002020 <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 8002020:	b480      	push	{r7}
 8002022:	b087      	sub	sp, #28
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 800202c:	2308      	movs	r3, #8
 800202e:	425b      	negs	r3, r3
 8002030:	697a      	ldr	r2, [r7, #20]
 8002032:	4413      	add	r3, r2
 8002034:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 8002036:	697b      	ldr	r3, [r7, #20]
 8002038:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	685a      	ldr	r2, [r3, #4]
 800203e:	4b06      	ldr	r3, [pc, #24]	@ (8002058 <getBlockSize+0x38>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	43db      	mvns	r3, r3
 8002044:	4013      	ands	r3, r2
 8002046:	60fb      	str	r3, [r7, #12]

	return count;
 8002048:	68fb      	ldr	r3, [r7, #12]
}
 800204a:	4618      	mov	r0, r3
 800204c:	371c      	adds	r7, #28
 800204e:	46bd      	mov	sp, r7
 8002050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002054:	4770      	bx	lr
 8002056:	bf00      	nop
 8002058:	20003ff8 	.word	0x20003ff8

0800205c <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b084      	sub	sp, #16
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
 8002064:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8002066:	f009 f98f 	bl	800b388 <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 800206a:	6838      	ldr	r0, [r7, #0]
 800206c:	f7ff feb4 	bl	8001dd8 <pvPortMallocMicroROS>
 8002070:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 8002072:	68bb      	ldr	r3, [r7, #8]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d017      	beq.n	80020a8 <pvPortReallocMicroROS+0x4c>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d014      	beq.n	80020a8 <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 800207e:	6878      	ldr	r0, [r7, #4]
 8002080:	f7ff ffce 	bl	8002020 <getBlockSize>
 8002084:	4603      	mov	r3, r0
 8002086:	2208      	movs	r2, #8
 8002088:	1a9b      	subs	r3, r3, r2
 800208a:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 800208c:	683a      	ldr	r2, [r7, #0]
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	429a      	cmp	r2, r3
 8002092:	d201      	bcs.n	8002098 <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 8002098:	68fa      	ldr	r2, [r7, #12]
 800209a:	6879      	ldr	r1, [r7, #4]
 800209c:	68b8      	ldr	r0, [r7, #8]
 800209e:	f019 fa26 	bl	801b4ee <memcpy>

		vPortFreeMicroROS(pv);
 80020a2:	6878      	ldr	r0, [r7, #4]
 80020a4:	f7ff ff60 	bl	8001f68 <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 80020a8:	f009 f97c 	bl	800b3a4 <xTaskResumeAll>

	return newmem;
 80020ac:	68bb      	ldr	r3, [r7, #8]
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	3710      	adds	r7, #16
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}

080020b6 <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 80020b6:	b580      	push	{r7, lr}
 80020b8:	b086      	sub	sp, #24
 80020ba:	af00      	add	r7, sp, #0
 80020bc:	6078      	str	r0, [r7, #4]
 80020be:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 80020c0:	f009 f962 	bl	800b388 <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	687a      	ldr	r2, [r7, #4]
 80020c8:	fb02 f303 	mul.w	r3, r2, r3
 80020cc:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 80020ce:	6978      	ldr	r0, [r7, #20]
 80020d0:	f7ff fe82 	bl	8001dd8 <pvPortMallocMicroROS>
 80020d4:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	613b      	str	r3, [r7, #16]

  	while(count--)
 80020da:	e004      	b.n	80020e6 <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 80020dc:	693b      	ldr	r3, [r7, #16]
 80020de:	1c5a      	adds	r2, r3, #1
 80020e0:	613a      	str	r2, [r7, #16]
 80020e2:	2200      	movs	r2, #0
 80020e4:	701a      	strb	r2, [r3, #0]
  	while(count--)
 80020e6:	697b      	ldr	r3, [r7, #20]
 80020e8:	1e5a      	subs	r2, r3, #1
 80020ea:	617a      	str	r2, [r7, #20]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d1f5      	bne.n	80020dc <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 80020f0:	f009 f958 	bl	800b3a4 <xTaskResumeAll>
  	return mem;
 80020f4:	68fb      	ldr	r3, [r7, #12]
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	3718      	adds	r7, #24
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}
	...

08002100 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8002100:	b480      	push	{r7}
 8002102:	b085      	sub	sp, #20
 8002104:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8002106:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800210a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800210c:	4b27      	ldr	r3, [pc, #156]	@ (80021ac <prvHeapInit+0xac>)
 800210e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	f003 0307 	and.w	r3, r3, #7
 8002116:	2b00      	cmp	r3, #0
 8002118:	d00c      	beq.n	8002134 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	3307      	adds	r3, #7
 800211e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	f023 0307 	bic.w	r3, r3, #7
 8002126:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8002128:	68ba      	ldr	r2, [r7, #8]
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	1ad3      	subs	r3, r2, r3
 800212e:	4a1f      	ldr	r2, [pc, #124]	@ (80021ac <prvHeapInit+0xac>)
 8002130:	4413      	add	r3, r2
 8002132:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002138:	4a1d      	ldr	r2, [pc, #116]	@ (80021b0 <prvHeapInit+0xb0>)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800213e:	4b1c      	ldr	r3, [pc, #112]	@ (80021b0 <prvHeapInit+0xb0>)
 8002140:	2200      	movs	r2, #0
 8002142:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	68ba      	ldr	r2, [r7, #8]
 8002148:	4413      	add	r3, r2
 800214a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800214c:	2208      	movs	r2, #8
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	1a9b      	subs	r3, r3, r2
 8002152:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	f023 0307 	bic.w	r3, r3, #7
 800215a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	4a15      	ldr	r2, [pc, #84]	@ (80021b4 <prvHeapInit+0xb4>)
 8002160:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8002162:	4b14      	ldr	r3, [pc, #80]	@ (80021b4 <prvHeapInit+0xb4>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	2200      	movs	r2, #0
 8002168:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800216a:	4b12      	ldr	r3, [pc, #72]	@ (80021b4 <prvHeapInit+0xb4>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	2200      	movs	r2, #0
 8002170:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	68fa      	ldr	r2, [r7, #12]
 800217a:	1ad2      	subs	r2, r2, r3
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002180:	4b0c      	ldr	r3, [pc, #48]	@ (80021b4 <prvHeapInit+0xb4>)
 8002182:	681a      	ldr	r2, [r3, #0]
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	4a0a      	ldr	r2, [pc, #40]	@ (80021b8 <prvHeapInit+0xb8>)
 800218e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	4a09      	ldr	r2, [pc, #36]	@ (80021bc <prvHeapInit+0xbc>)
 8002196:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8002198:	4b09      	ldr	r3, [pc, #36]	@ (80021c0 <prvHeapInit+0xc0>)
 800219a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800219e:	601a      	str	r2, [r3, #0]
}
 80021a0:	bf00      	nop
 80021a2:	3714      	adds	r7, #20
 80021a4:	46bd      	mov	sp, r7
 80021a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021aa:	4770      	bx	lr
 80021ac:	200033e4 	.word	0x200033e4
 80021b0:	20003fe4 	.word	0x20003fe4
 80021b4:	20003fec 	.word	0x20003fec
 80021b8:	20003ff4 	.word	0x20003ff4
 80021bc:	20003ff0 	.word	0x20003ff0
 80021c0:	20003ff8 	.word	0x20003ff8

080021c4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80021c4:	b480      	push	{r7}
 80021c6:	b085      	sub	sp, #20
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80021cc:	4b28      	ldr	r3, [pc, #160]	@ (8002270 <prvInsertBlockIntoFreeList+0xac>)
 80021ce:	60fb      	str	r3, [r7, #12]
 80021d0:	e002      	b.n	80021d8 <prvInsertBlockIntoFreeList+0x14>
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	60fb      	str	r3, [r7, #12]
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	687a      	ldr	r2, [r7, #4]
 80021de:	429a      	cmp	r2, r3
 80021e0:	d8f7      	bhi.n	80021d2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	68ba      	ldr	r2, [r7, #8]
 80021ec:	4413      	add	r3, r2
 80021ee:	687a      	ldr	r2, [r7, #4]
 80021f0:	429a      	cmp	r2, r3
 80021f2:	d108      	bne.n	8002206 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	685a      	ldr	r2, [r3, #4]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	441a      	add	r2, r3
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	68ba      	ldr	r2, [r7, #8]
 8002210:	441a      	add	r2, r3
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	429a      	cmp	r2, r3
 8002218:	d118      	bne.n	800224c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681a      	ldr	r2, [r3, #0]
 800221e:	4b15      	ldr	r3, [pc, #84]	@ (8002274 <prvInsertBlockIntoFreeList+0xb0>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	429a      	cmp	r2, r3
 8002224:	d00d      	beq.n	8002242 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	685a      	ldr	r2, [r3, #4]
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	441a      	add	r2, r3
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	681a      	ldr	r2, [r3, #0]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	601a      	str	r2, [r3, #0]
 8002240:	e008      	b.n	8002254 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8002242:	4b0c      	ldr	r3, [pc, #48]	@ (8002274 <prvInsertBlockIntoFreeList+0xb0>)
 8002244:	681a      	ldr	r2, [r3, #0]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	601a      	str	r2, [r3, #0]
 800224a:	e003      	b.n	8002254 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681a      	ldr	r2, [r3, #0]
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8002254:	68fa      	ldr	r2, [r7, #12]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	429a      	cmp	r2, r3
 800225a:	d002      	beq.n	8002262 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	687a      	ldr	r2, [r7, #4]
 8002260:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002262:	bf00      	nop
 8002264:	3714      	adds	r7, #20
 8002266:	46bd      	mov	sp, r7
 8002268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226c:	4770      	bx	lr
 800226e:	bf00      	nop
 8002270:	20003fe4 	.word	0x20003fe4
 8002274:	20003fec 	.word	0x20003fec

08002278 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b082      	sub	sp, #8
 800227c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800227e:	4b16      	ldr	r3, [pc, #88]	@ (80022d8 <MX_DMA_Init+0x60>)
 8002280:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002282:	4a15      	ldr	r2, [pc, #84]	@ (80022d8 <MX_DMA_Init+0x60>)
 8002284:	f043 0304 	orr.w	r3, r3, #4
 8002288:	6493      	str	r3, [r2, #72]	@ 0x48
 800228a:	4b13      	ldr	r3, [pc, #76]	@ (80022d8 <MX_DMA_Init+0x60>)
 800228c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800228e:	f003 0304 	and.w	r3, r3, #4
 8002292:	607b      	str	r3, [r7, #4]
 8002294:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002296:	4b10      	ldr	r3, [pc, #64]	@ (80022d8 <MX_DMA_Init+0x60>)
 8002298:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800229a:	4a0f      	ldr	r2, [pc, #60]	@ (80022d8 <MX_DMA_Init+0x60>)
 800229c:	f043 0301 	orr.w	r3, r3, #1
 80022a0:	6493      	str	r3, [r2, #72]	@ 0x48
 80022a2:	4b0d      	ldr	r3, [pc, #52]	@ (80022d8 <MX_DMA_Init+0x60>)
 80022a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80022a6:	f003 0301 	and.w	r3, r3, #1
 80022aa:	603b      	str	r3, [r7, #0]
 80022ac:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 80022ae:	2200      	movs	r2, #0
 80022b0:	2105      	movs	r1, #5
 80022b2:	200b      	movs	r0, #11
 80022b4:	f002 fd22 	bl	8004cfc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80022b8:	200b      	movs	r0, #11
 80022ba:	f002 fd39 	bl	8004d30 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 80022be:	2200      	movs	r2, #0
 80022c0:	2105      	movs	r1, #5
 80022c2:	200c      	movs	r0, #12
 80022c4:	f002 fd1a 	bl	8004cfc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80022c8:	200c      	movs	r0, #12
 80022ca:	f002 fd31 	bl	8004d30 <HAL_NVIC_EnableIRQ>

}
 80022ce:	bf00      	nop
 80022d0:	3708      	adds	r7, #8
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	bf00      	nop
 80022d8:	40021000 	.word	0x40021000

080022dc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b08a      	sub	sp, #40	@ 0x28
 80022e0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022e2:	f107 0314 	add.w	r3, r7, #20
 80022e6:	2200      	movs	r2, #0
 80022e8:	601a      	str	r2, [r3, #0]
 80022ea:	605a      	str	r2, [r3, #4]
 80022ec:	609a      	str	r2, [r3, #8]
 80022ee:	60da      	str	r2, [r3, #12]
 80022f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80022f2:	4b3b      	ldr	r3, [pc, #236]	@ (80023e0 <MX_GPIO_Init+0x104>)
 80022f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022f6:	4a3a      	ldr	r2, [pc, #232]	@ (80023e0 <MX_GPIO_Init+0x104>)
 80022f8:	f043 0304 	orr.w	r3, r3, #4
 80022fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80022fe:	4b38      	ldr	r3, [pc, #224]	@ (80023e0 <MX_GPIO_Init+0x104>)
 8002300:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002302:	f003 0304 	and.w	r3, r3, #4
 8002306:	613b      	str	r3, [r7, #16]
 8002308:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800230a:	4b35      	ldr	r3, [pc, #212]	@ (80023e0 <MX_GPIO_Init+0x104>)
 800230c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800230e:	4a34      	ldr	r2, [pc, #208]	@ (80023e0 <MX_GPIO_Init+0x104>)
 8002310:	f043 0320 	orr.w	r3, r3, #32
 8002314:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002316:	4b32      	ldr	r3, [pc, #200]	@ (80023e0 <MX_GPIO_Init+0x104>)
 8002318:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800231a:	f003 0320 	and.w	r3, r3, #32
 800231e:	60fb      	str	r3, [r7, #12]
 8002320:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002322:	4b2f      	ldr	r3, [pc, #188]	@ (80023e0 <MX_GPIO_Init+0x104>)
 8002324:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002326:	4a2e      	ldr	r2, [pc, #184]	@ (80023e0 <MX_GPIO_Init+0x104>)
 8002328:	f043 0301 	orr.w	r3, r3, #1
 800232c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800232e:	4b2c      	ldr	r3, [pc, #176]	@ (80023e0 <MX_GPIO_Init+0x104>)
 8002330:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002332:	f003 0301 	and.w	r3, r3, #1
 8002336:	60bb      	str	r3, [r7, #8]
 8002338:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800233a:	4b29      	ldr	r3, [pc, #164]	@ (80023e0 <MX_GPIO_Init+0x104>)
 800233c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800233e:	4a28      	ldr	r2, [pc, #160]	@ (80023e0 <MX_GPIO_Init+0x104>)
 8002340:	f043 0302 	orr.w	r3, r3, #2
 8002344:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002346:	4b26      	ldr	r3, [pc, #152]	@ (80023e0 <MX_GPIO_Init+0x104>)
 8002348:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800234a:	f003 0302 	and.w	r3, r3, #2
 800234e:	607b      	str	r3, [r7, #4]
 8002350:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_8, GPIO_PIN_RESET);
 8002352:	2200      	movs	r2, #0
 8002354:	f44f 7190 	mov.w	r1, #288	@ 0x120
 8002358:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800235c:	f003 f9b6 	bl	80056cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8002360:	2200      	movs	r2, #0
 8002362:	f44f 6186 	mov.w	r1, #1072	@ 0x430
 8002366:	481f      	ldr	r0, [pc, #124]	@ (80023e4 <MX_GPIO_Init+0x108>)
 8002368:	f003 f9b0 	bl	80056cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800236c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002370:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002372:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002376:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002378:	2300      	movs	r3, #0
 800237a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800237c:	f107 0314 	add.w	r3, r7, #20
 8002380:	4619      	mov	r1, r3
 8002382:	4819      	ldr	r0, [pc, #100]	@ (80023e8 <MX_GPIO_Init+0x10c>)
 8002384:	f003 f820 	bl	80053c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA8 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_8;
 8002388:	f44f 7390 	mov.w	r3, #288	@ 0x120
 800238c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800238e:	2301      	movs	r3, #1
 8002390:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002392:	2300      	movs	r3, #0
 8002394:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002396:	2300      	movs	r3, #0
 8002398:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800239a:	f107 0314 	add.w	r3, r7, #20
 800239e:	4619      	mov	r1, r3
 80023a0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80023a4:	f003 f810 	bl	80053c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_4|GPIO_PIN_5;
 80023a8:	f44f 6386 	mov.w	r3, #1072	@ 0x430
 80023ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023ae:	2301      	movs	r3, #1
 80023b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023b2:	2300      	movs	r3, #0
 80023b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023b6:	2300      	movs	r3, #0
 80023b8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023ba:	f107 0314 	add.w	r3, r7, #20
 80023be:	4619      	mov	r1, r3
 80023c0:	4808      	ldr	r0, [pc, #32]	@ (80023e4 <MX_GPIO_Init+0x108>)
 80023c2:	f003 f801 	bl	80053c8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80023c6:	2200      	movs	r2, #0
 80023c8:	2105      	movs	r1, #5
 80023ca:	2028      	movs	r0, #40	@ 0x28
 80023cc:	f002 fc96 	bl	8004cfc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80023d0:	2028      	movs	r0, #40	@ 0x28
 80023d2:	f002 fcad 	bl	8004d30 <HAL_NVIC_EnableIRQ>

}
 80023d6:	bf00      	nop
 80023d8:	3728      	adds	r7, #40	@ 0x28
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}
 80023de:	bf00      	nop
 80023e0:	40021000 	.word	0x40021000
 80023e4:	48000400 	.word	0x48000400
 80023e8:	48000800 	.word	0x48000800

080023ec <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 80023f0:	4b0b      	ldr	r3, [pc, #44]	@ (8002420 <MX_IWDG_Init+0x34>)
 80023f2:	4a0c      	ldr	r2, [pc, #48]	@ (8002424 <MX_IWDG_Init+0x38>)
 80023f4:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
 80023f6:	4b0a      	ldr	r3, [pc, #40]	@ (8002420 <MX_IWDG_Init+0x34>)
 80023f8:	2200      	movs	r2, #0
 80023fa:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 80023fc:	4b08      	ldr	r3, [pc, #32]	@ (8002420 <MX_IWDG_Init+0x34>)
 80023fe:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8002402:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 2499;
 8002404:	4b06      	ldr	r3, [pc, #24]	@ (8002420 <MX_IWDG_Init+0x34>)
 8002406:	f640 12c3 	movw	r2, #2499	@ 0x9c3
 800240a:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 800240c:	4804      	ldr	r0, [pc, #16]	@ (8002420 <MX_IWDG_Init+0x34>)
 800240e:	f003 f9b2 	bl	8005776 <HAL_IWDG_Init>
 8002412:	4603      	mov	r3, r0
 8002414:	2b00      	cmp	r3, #0
 8002416:	d001      	beq.n	800241c <MX_IWDG_Init+0x30>
  {
    Error_Handler();
 8002418:	f000 fcac 	bl	8002d74 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 800241c:	bf00      	nop
 800241e:	bd80      	pop	{r7, pc}
 8002420:	20003ffc 	.word	0x20003ffc
 8002424:	40003000 	.word	0x40003000

08002428 <timer_callback>:
void subscription_callback(const void *msgin);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void timer_callback(rcl_timer_t *timer, int64_t last_call_time) {
 8002428:	b590      	push	{r4, r7, lr}
 800242a:	b085      	sub	sp, #20
 800242c:	af00      	add	r7, sp, #0
 800242e:	60f8      	str	r0, [r7, #12]
 8002430:	e9c7 2300 	strd	r2, r3, [r7]
	static uint8_t cnt = 0;

	if (timer != NULL) {
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d075      	beq.n	8002526 <timer_callback+0xfe>
		// Sync micro-ROS session
		rmw_uros_sync_session(timeout_ms);
 800243a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800243e:	4618      	mov	r0, r3
 8002440:	f00e fa52 	bl	80108e8 <rmw_uros_sync_session>

		// Toggle LED every 50 cycles (approximately every 0.5 seconds)
		if (cnt == 0)
 8002444:	4b3a      	ldr	r3, [pc, #232]	@ (8002530 <timer_callback+0x108>)
 8002446:	781b      	ldrb	r3, [r3, #0]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d104      	bne.n	8002456 <timer_callback+0x2e>
			HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800244c:	2120      	movs	r1, #32
 800244e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002452:	f003 f953 	bl	80056fc <HAL_GPIO_TogglePin>
		cnt = (cnt + 1) % 50;
 8002456:	4b36      	ldr	r3, [pc, #216]	@ (8002530 <timer_callback+0x108>)
 8002458:	781b      	ldrb	r3, [r3, #0]
 800245a:	3301      	adds	r3, #1
 800245c:	4a35      	ldr	r2, [pc, #212]	@ (8002534 <timer_callback+0x10c>)
 800245e:	fb82 1203 	smull	r1, r2, r2, r3
 8002462:	1111      	asrs	r1, r2, #4
 8002464:	17da      	asrs	r2, r3, #31
 8002466:	1a8a      	subs	r2, r1, r2
 8002468:	2132      	movs	r1, #50	@ 0x32
 800246a:	fb01 f202 	mul.w	r2, r1, r2
 800246e:	1a9a      	subs	r2, r3, r2
 8002470:	b2d2      	uxtb	r2, r2
 8002472:	4b2f      	ldr	r3, [pc, #188]	@ (8002530 <timer_callback+0x108>)
 8002474:	701a      	strb	r2, [r3, #0]

		// Prepare and publish multi-array message with motor data
		if (pub_msg.data.data != NULL) {
 8002476:	4b30      	ldr	r3, [pc, #192]	@ (8002538 <timer_callback+0x110>)
 8002478:	691b      	ldr	r3, [r3, #16]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d050      	beq.n	8002520 <timer_callback+0xf8>
			pub_msg.data.data[0] = setpointL;
 800247e:	4b2f      	ldr	r3, [pc, #188]	@ (800253c <timer_callback+0x114>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a2d      	ldr	r2, [pc, #180]	@ (8002538 <timer_callback+0x110>)
 8002484:	6914      	ldr	r4, [r2, #16]
 8002486:	4618      	mov	r0, r3
 8002488:	f7fe f896 	bl	80005b8 <__aeabi_f2d>
 800248c:	4602      	mov	r2, r0
 800248e:	460b      	mov	r3, r1
 8002490:	e9c4 2300 	strd	r2, r3, [r4]
			pub_msg.data.data[1] = setpointR;
 8002494:	4b2a      	ldr	r3, [pc, #168]	@ (8002540 <timer_callback+0x118>)
 8002496:	681a      	ldr	r2, [r3, #0]
 8002498:	4b27      	ldr	r3, [pc, #156]	@ (8002538 <timer_callback+0x110>)
 800249a:	691b      	ldr	r3, [r3, #16]
 800249c:	f103 0408 	add.w	r4, r3, #8
 80024a0:	4610      	mov	r0, r2
 80024a2:	f7fe f889 	bl	80005b8 <__aeabi_f2d>
 80024a6:	4602      	mov	r2, r0
 80024a8:	460b      	mov	r3, r1
 80024aa:	e9c4 2300 	strd	r2, r3, [r4]
			pub_msg.data.data[2] = filteredValue1;
 80024ae:	4b25      	ldr	r3, [pc, #148]	@ (8002544 <timer_callback+0x11c>)
 80024b0:	681a      	ldr	r2, [r3, #0]
 80024b2:	4b21      	ldr	r3, [pc, #132]	@ (8002538 <timer_callback+0x110>)
 80024b4:	691b      	ldr	r3, [r3, #16]
 80024b6:	f103 0410 	add.w	r4, r3, #16
 80024ba:	4610      	mov	r0, r2
 80024bc:	f7fe f87c 	bl	80005b8 <__aeabi_f2d>
 80024c0:	4602      	mov	r2, r0
 80024c2:	460b      	mov	r3, r1
 80024c4:	e9c4 2300 	strd	r2, r3, [r4]
			pub_msg.data.data[3] = filteredValue2;
 80024c8:	4b1f      	ldr	r3, [pc, #124]	@ (8002548 <timer_callback+0x120>)
 80024ca:	681a      	ldr	r2, [r3, #0]
 80024cc:	4b1a      	ldr	r3, [pc, #104]	@ (8002538 <timer_callback+0x110>)
 80024ce:	691b      	ldr	r3, [r3, #16]
 80024d0:	f103 0418 	add.w	r4, r3, #24
 80024d4:	4610      	mov	r0, r2
 80024d6:	f7fe f86f 	bl	80005b8 <__aeabi_f2d>
 80024da:	4602      	mov	r2, r0
 80024dc:	460b      	mov	r3, r1
 80024de:	e9c4 2300 	strd	r2, r3, [r4]
			pub_msg.data.data[4] = filteredValue3;
 80024e2:	4b1a      	ldr	r3, [pc, #104]	@ (800254c <timer_callback+0x124>)
 80024e4:	681a      	ldr	r2, [r3, #0]
 80024e6:	4b14      	ldr	r3, [pc, #80]	@ (8002538 <timer_callback+0x110>)
 80024e8:	691b      	ldr	r3, [r3, #16]
 80024ea:	f103 0420 	add.w	r4, r3, #32
 80024ee:	4610      	mov	r0, r2
 80024f0:	f7fe f862 	bl	80005b8 <__aeabi_f2d>
 80024f4:	4602      	mov	r2, r0
 80024f6:	460b      	mov	r3, r1
 80024f8:	e9c4 2300 	strd	r2, r3, [r4]
			pub_msg.data.data[5] = filteredValue4;
 80024fc:	4b14      	ldr	r3, [pc, #80]	@ (8002550 <timer_callback+0x128>)
 80024fe:	681a      	ldr	r2, [r3, #0]
 8002500:	4b0d      	ldr	r3, [pc, #52]	@ (8002538 <timer_callback+0x110>)
 8002502:	691b      	ldr	r3, [r3, #16]
 8002504:	f103 0428 	add.w	r4, r3, #40	@ 0x28
 8002508:	4610      	mov	r0, r2
 800250a:	f7fe f855 	bl	80005b8 <__aeabi_f2d>
 800250e:	4602      	mov	r2, r0
 8002510:	460b      	mov	r3, r1
 8002512:	e9c4 2300 	strd	r2, r3, [r4]

			// Publish the multi-array message
			RCLSOFTCHECK(rcl_publish(&publisher, &pub_msg, NULL));
 8002516:	2200      	movs	r2, #0
 8002518:	4907      	ldr	r1, [pc, #28]	@ (8002538 <timer_callback+0x110>)
 800251a:	480e      	ldr	r0, [pc, #56]	@ (8002554 <timer_callback+0x12c>)
 800251c:	f00c fa48 	bl	800e9b0 <rcl_publish>
		}

		// Reinitialize watchdog timer
		HAL_IWDG_Init(&hiwdg);
 8002520:	480d      	ldr	r0, [pc, #52]	@ (8002558 <timer_callback+0x130>)
 8002522:	f003 f928 	bl	8005776 <HAL_IWDG_Init>
	}
}
 8002526:	bf00      	nop
 8002528:	3714      	adds	r7, #20
 800252a:	46bd      	mov	sp, r7
 800252c:	bd90      	pop	{r4, r7, pc}
 800252e:	bf00      	nop
 8002530:	200042ec 	.word	0x200042ec
 8002534:	51eb851f 	.word	0x51eb851f
 8002538:	20004280 	.word	0x20004280
 800253c:	2000400c 	.word	0x2000400c
 8002540:	20004010 	.word	0x20004010
 8002544:	20004014 	.word	0x20004014
 8002548:	20004018 	.word	0x20004018
 800254c:	2000401c 	.word	0x2000401c
 8002550:	20004020 	.word	0x20004020
 8002554:	20004278 	.word	0x20004278
 8002558:	20003ffc 	.word	0x20003ffc

0800255c <subscription_callback>:

void subscription_callback(const void *msgin) {
 800255c:	b580      	push	{r7, lr}
 800255e:	b084      	sub	sp, #16
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
	const geometry_msgs__msg__Twist *twist_msg =
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	60fb      	str	r3, [r7, #12]
			(const geometry_msgs__msg__Twist*) msgin;

	linear_x = twist_msg->linear.x;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800256e:	4610      	mov	r0, r2
 8002570:	4619      	mov	r1, r3
 8002572:	f7fe fb33 	bl	8000bdc <__aeabi_d2f>
 8002576:	4603      	mov	r3, r0
 8002578:	4a26      	ldr	r2, [pc, #152]	@ (8002614 <subscription_callback+0xb8>)
 800257a:	6013      	str	r3, [r2, #0]
	linear_y = twist_msg->linear.y;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002582:	4610      	mov	r0, r2
 8002584:	4619      	mov	r1, r3
 8002586:	f7fe fb29 	bl	8000bdc <__aeabi_d2f>
 800258a:	4603      	mov	r3, r0
 800258c:	4a22      	ldr	r2, [pc, #136]	@ (8002618 <subscription_callback+0xbc>)
 800258e:	6013      	str	r3, [r2, #0]
	linear_z = twist_msg->linear.z;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002596:	4610      	mov	r0, r2
 8002598:	4619      	mov	r1, r3
 800259a:	f7fe fb1f 	bl	8000bdc <__aeabi_d2f>
 800259e:	4603      	mov	r3, r0
 80025a0:	4a1e      	ldr	r2, [pc, #120]	@ (800261c <subscription_callback+0xc0>)
 80025a2:	6013      	str	r3, [r2, #0]

	angular_x = twist_msg->angular.x;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80025aa:	4610      	mov	r0, r2
 80025ac:	4619      	mov	r1, r3
 80025ae:	f7fe fb15 	bl	8000bdc <__aeabi_d2f>
 80025b2:	4603      	mov	r3, r0
 80025b4:	4a1a      	ldr	r2, [pc, #104]	@ (8002620 <subscription_callback+0xc4>)
 80025b6:	6013      	str	r3, [r2, #0]
	angular_y = twist_msg->angular.y;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80025be:	4610      	mov	r0, r2
 80025c0:	4619      	mov	r1, r3
 80025c2:	f7fe fb0b 	bl	8000bdc <__aeabi_d2f>
 80025c6:	4603      	mov	r3, r0
 80025c8:	4a16      	ldr	r2, [pc, #88]	@ (8002624 <subscription_callback+0xc8>)
 80025ca:	6013      	str	r3, [r2, #0]
	angular_z = twist_msg->angular.z;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 80025d2:	4610      	mov	r0, r2
 80025d4:	4619      	mov	r1, r3
 80025d6:	f7fe fb01 	bl	8000bdc <__aeabi_d2f>
 80025da:	4603      	mov	r3, r0
 80025dc:	4a12      	ldr	r2, [pc, #72]	@ (8002628 <subscription_callback+0xcc>)
 80025de:	6013      	str	r3, [r2, #0]

	SKID_inverse_kinematic(&robot_kinematics, linear_x, angular_z);
 80025e0:	4b0c      	ldr	r3, [pc, #48]	@ (8002614 <subscription_callback+0xb8>)
 80025e2:	edd3 7a00 	vldr	s15, [r3]
 80025e6:	4b10      	ldr	r3, [pc, #64]	@ (8002628 <subscription_callback+0xcc>)
 80025e8:	ed93 7a00 	vldr	s14, [r3]
 80025ec:	eef0 0a47 	vmov.f32	s1, s14
 80025f0:	eeb0 0a67 	vmov.f32	s0, s15
 80025f4:	480d      	ldr	r0, [pc, #52]	@ (800262c <subscription_callback+0xd0>)
 80025f6:	f001 f856 	bl	80036a6 <SKID_inverse_kinematic>

	setpointL = robot_kinematics.left_cmd;
 80025fa:	4b0c      	ldr	r3, [pc, #48]	@ (800262c <subscription_callback+0xd0>)
 80025fc:	691b      	ldr	r3, [r3, #16]
 80025fe:	4a0c      	ldr	r2, [pc, #48]	@ (8002630 <subscription_callback+0xd4>)
 8002600:	6013      	str	r3, [r2, #0]
	setpointR = robot_kinematics.right_cmd;
 8002602:	4b0a      	ldr	r3, [pc, #40]	@ (800262c <subscription_callback+0xd0>)
 8002604:	695b      	ldr	r3, [r3, #20]
 8002606:	4a0b      	ldr	r2, [pc, #44]	@ (8002634 <subscription_callback+0xd8>)
 8002608:	6013      	str	r3, [r2, #0]
}
 800260a:	bf00      	nop
 800260c:	3710      	adds	r7, #16
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}
 8002612:	bf00      	nop
 8002614:	200042d4 	.word	0x200042d4
 8002618:	200042d8 	.word	0x200042d8
 800261c:	200042dc 	.word	0x200042dc
 8002620:	200042e0 	.word	0x200042e0
 8002624:	200042e4 	.word	0x200042e4
 8002628:	200042e8 	.word	0x200042e8
 800262c:	20004854 	.word	0x20004854
 8002630:	2000400c 	.word	0x2000400c
 8002634:	20004010 	.word	0x20004010

08002638 <StartDefaultTask>:

void StartDefaultTask(void *argument) {
 8002638:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800263c:	b0b2      	sub	sp, #200	@ 0xc8
 800263e:	af02      	add	r7, sp, #8
 8002640:	f8c7 00a4 	str.w	r0, [r7, #164]	@ 0xa4

	// micro-ROS configuration
	rmw_uros_set_custom_transport(true, (void*) &hlpuart1,
 8002644:	4b69      	ldr	r3, [pc, #420]	@ (80027ec <StartDefaultTask+0x1b4>)
 8002646:	9301      	str	r3, [sp, #4]
 8002648:	4b69      	ldr	r3, [pc, #420]	@ (80027f0 <StartDefaultTask+0x1b8>)
 800264a:	9300      	str	r3, [sp, #0]
 800264c:	4b69      	ldr	r3, [pc, #420]	@ (80027f4 <StartDefaultTask+0x1bc>)
 800264e:	4a6a      	ldr	r2, [pc, #424]	@ (80027f8 <StartDefaultTask+0x1c0>)
 8002650:	496a      	ldr	r1, [pc, #424]	@ (80027fc <StartDefaultTask+0x1c4>)
 8002652:	2001      	movs	r0, #1
 8002654:	f00d fa34 	bl	800fac0 <rmw_uros_set_custom_transport>
			cubemx_transport_open, cubemx_transport_close,
			cubemx_transport_write, cubemx_transport_read);

	rcl_allocator_t freeRTOS_allocator =
			rcutils_get_zero_initialized_allocator();
 8002658:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800265c:	4618      	mov	r0, r3
 800265e:	f00d f94b 	bl	800f8f8 <rcutils_get_zero_initialized_allocator>
	freeRTOS_allocator.allocate = microros_allocate;
 8002662:	4b67      	ldr	r3, [pc, #412]	@ (8002800 <StartDefaultTask+0x1c8>)
 8002664:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
	freeRTOS_allocator.deallocate = microros_deallocate;
 8002668:	4b66      	ldr	r3, [pc, #408]	@ (8002804 <StartDefaultTask+0x1cc>)
 800266a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
	freeRTOS_allocator.reallocate = microros_reallocate;
 800266e:	4b66      	ldr	r3, [pc, #408]	@ (8002808 <StartDefaultTask+0x1d0>)
 8002670:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
	freeRTOS_allocator.zero_allocate = microros_zero_allocate;
 8002674:	4b65      	ldr	r3, [pc, #404]	@ (800280c <StartDefaultTask+0x1d4>)
 8002676:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8

	if (!rcutils_set_default_allocator(&freeRTOS_allocator)) {
 800267a:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800267e:	4618      	mov	r0, r3
 8002680:	f00d f948 	bl	800f914 <rcutils_set_default_allocator>
 8002684:	4603      	mov	r3, r0
 8002686:	f083 0301 	eor.w	r3, r3, #1
 800268a:	b2db      	uxtb	r3, r3
 800268c:	2b00      	cmp	r3, #0
 800268e:	d003      	beq.n	8002698 <StartDefaultTask+0x60>
		printf("Error on default allocators (line %d)\n", __LINE__);
 8002690:	21be      	movs	r1, #190	@ 0xbe
 8002692:	485f      	ldr	r0, [pc, #380]	@ (8002810 <StartDefaultTask+0x1d8>)
 8002694:	f018 fcdc 	bl	801b050 <iprintf>
	}
	allocator = rcl_get_default_allocator();
 8002698:	4c5e      	ldr	r4, [pc, #376]	@ (8002814 <StartDefaultTask+0x1dc>)
 800269a:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 800269e:	4618      	mov	r0, r3
 80026a0:	f00d f956 	bl	800f950 <rcutils_get_default_allocator>
 80026a4:	4625      	mov	r5, r4
 80026a6:	f107 0488 	add.w	r4, r7, #136	@ 0x88
 80026aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80026ae:	6823      	ldr	r3, [r4, #0]
 80026b0:	602b      	str	r3, [r5, #0]

	//create init
	init_options = rcl_get_zero_initialized_init_options();
 80026b2:	f00b ffad 	bl	800e610 <rcl_get_zero_initialized_init_options>
 80026b6:	4603      	mov	r3, r0
 80026b8:	4a57      	ldr	r2, [pc, #348]	@ (8002818 <StartDefaultTask+0x1e0>)
 80026ba:	6013      	str	r3, [r2, #0]
	RCLSOFTCHECK(rcl_init_options_init(&init_options, allocator));
 80026bc:	4b55      	ldr	r3, [pc, #340]	@ (8002814 <StartDefaultTask+0x1dc>)
 80026be:	466c      	mov	r4, sp
 80026c0:	f103 020c 	add.w	r2, r3, #12
 80026c4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80026c8:	e884 0003 	stmia.w	r4, {r0, r1}
 80026cc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80026ce:	4852      	ldr	r0, [pc, #328]	@ (8002818 <StartDefaultTask+0x1e0>)
 80026d0:	f00b ffa0 	bl	800e614 <rcl_init_options_init>
	RCLSOFTCHECK(rcl_init_options_set_domain_id(&init_options, 99));
 80026d4:	2163      	movs	r1, #99	@ 0x63
 80026d6:	4850      	ldr	r0, [pc, #320]	@ (8002818 <StartDefaultTask+0x1e0>)
 80026d8:	f00c f898 	bl	800e80c <rcl_init_options_set_domain_id>

	//create support
	rclc_support_init_with_options(&support, 0, NULL, &init_options,
 80026dc:	4b4d      	ldr	r3, [pc, #308]	@ (8002814 <StartDefaultTask+0x1dc>)
 80026de:	9300      	str	r3, [sp, #0]
 80026e0:	4b4d      	ldr	r3, [pc, #308]	@ (8002818 <StartDefaultTask+0x1e0>)
 80026e2:	2200      	movs	r2, #0
 80026e4:	2100      	movs	r1, #0
 80026e6:	484d      	ldr	r0, [pc, #308]	@ (800281c <StartDefaultTask+0x1e4>)
 80026e8:	f00c fff6 	bl	800f6d8 <rclc_support_init_with_options>
			&allocator);

	// create node
	rclc_node_init_default(&node, "uros_motor_node", "", &support);
 80026ec:	4b4b      	ldr	r3, [pc, #300]	@ (800281c <StartDefaultTask+0x1e4>)
 80026ee:	4a4c      	ldr	r2, [pc, #304]	@ (8002820 <StartDefaultTask+0x1e8>)
 80026f0:	494c      	ldr	r1, [pc, #304]	@ (8002824 <StartDefaultTask+0x1ec>)
 80026f2:	484d      	ldr	r0, [pc, #308]	@ (8002828 <StartDefaultTask+0x1f0>)
 80026f4:	f00d f824 	bl	800f740 <rclc_node_init_default>

	pub_msg.layout.dim.capacity = 1;
 80026f8:	4b4c      	ldr	r3, [pc, #304]	@ (800282c <StartDefaultTask+0x1f4>)
 80026fa:	2201      	movs	r2, #1
 80026fc:	609a      	str	r2, [r3, #8]
	pub_msg.layout.dim.size = 1;
 80026fe:	4b4b      	ldr	r3, [pc, #300]	@ (800282c <StartDefaultTask+0x1f4>)
 8002700:	2201      	movs	r2, #1
 8002702:	605a      	str	r2, [r3, #4]
	pub_msg.layout.dim.data = malloc(
 8002704:	2014      	movs	r0, #20
 8002706:	f018 f9af 	bl	801aa68 <malloc>
 800270a:	4603      	mov	r3, r0
 800270c:	461a      	mov	r2, r3
 800270e:	4b47      	ldr	r3, [pc, #284]	@ (800282c <StartDefaultTask+0x1f4>)
 8002710:	601a      	str	r2, [r3, #0]
			sizeof(std_msgs__msg__MultiArrayDimension) * 1);

	pub_msg.layout.dim.data[0].label.data = malloc(10);
 8002712:	4b46      	ldr	r3, [pc, #280]	@ (800282c <StartDefaultTask+0x1f4>)
 8002714:	681c      	ldr	r4, [r3, #0]
 8002716:	200a      	movs	r0, #10
 8002718:	f018 f9a6 	bl	801aa68 <malloc>
 800271c:	4603      	mov	r3, r0
 800271e:	6023      	str	r3, [r4, #0]
	pub_msg.layout.dim.data[0].label.capacity = 10;
 8002720:	4b42      	ldr	r3, [pc, #264]	@ (800282c <StartDefaultTask+0x1f4>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	220a      	movs	r2, #10
 8002726:	609a      	str	r2, [r3, #8]
	pub_msg.layout.dim.data[0].label.size = strlen("motor_data");
 8002728:	4b40      	ldr	r3, [pc, #256]	@ (800282c <StartDefaultTask+0x1f4>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	220a      	movs	r2, #10
 800272e:	605a      	str	r2, [r3, #4]
	strcpy(pub_msg.layout.dim.data[0].label.data, "motor_data");
 8002730:	4b3e      	ldr	r3, [pc, #248]	@ (800282c <StartDefaultTask+0x1f4>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	493e      	ldr	r1, [pc, #248]	@ (8002830 <StartDefaultTask+0x1f8>)
 8002738:	461a      	mov	r2, r3
 800273a:	460b      	mov	r3, r1
 800273c:	cb03      	ldmia	r3!, {r0, r1}
 800273e:	6010      	str	r0, [r2, #0]
 8002740:	6051      	str	r1, [r2, #4]
 8002742:	8819      	ldrh	r1, [r3, #0]
 8002744:	789b      	ldrb	r3, [r3, #2]
 8002746:	8111      	strh	r1, [r2, #8]
 8002748:	7293      	strb	r3, [r2, #10]

	pub_msg.layout.data_offset = 0;
 800274a:	4b38      	ldr	r3, [pc, #224]	@ (800282c <StartDefaultTask+0x1f4>)
 800274c:	2200      	movs	r2, #0
 800274e:	60da      	str	r2, [r3, #12]

	pub_msg.data.capacity = 6;
 8002750:	4b36      	ldr	r3, [pc, #216]	@ (800282c <StartDefaultTask+0x1f4>)
 8002752:	2206      	movs	r2, #6
 8002754:	619a      	str	r2, [r3, #24]
	pub_msg.data.size = 6;
 8002756:	4b35      	ldr	r3, [pc, #212]	@ (800282c <StartDefaultTask+0x1f4>)
 8002758:	2206      	movs	r2, #6
 800275a:	615a      	str	r2, [r3, #20]
	pub_msg.data.data = malloc(6 * sizeof(double));
 800275c:	2030      	movs	r0, #48	@ 0x30
 800275e:	f018 f983 	bl	801aa68 <malloc>
 8002762:	4603      	mov	r3, r0
 8002764:	461a      	mov	r2, r3
 8002766:	4b31      	ldr	r3, [pc, #196]	@ (800282c <StartDefaultTask+0x1f4>)
 8002768:	611a      	str	r2, [r3, #16]

	// Create publisher
	rclc_publisher_init_default(&publisher, &node,
 800276a:	f00e fc6f 	bl	801104c <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray>
 800276e:	4602      	mov	r2, r0
 8002770:	4b30      	ldr	r3, [pc, #192]	@ (8002834 <StartDefaultTask+0x1fc>)
 8002772:	492d      	ldr	r1, [pc, #180]	@ (8002828 <StartDefaultTask+0x1f0>)
 8002774:	4830      	ldr	r0, [pc, #192]	@ (8002838 <StartDefaultTask+0x200>)
 8002776:	f00d f81f 	bl	800f7b8 <rclc_publisher_init_default>
			ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Float64MultiArray),
			"robot_pos");

	// Create subscriber
	rclc_subscription_init_best_effort(&subscriber, &node,
 800277a:	f00a fa8d 	bl	800cc98 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist>
 800277e:	4602      	mov	r2, r0
 8002780:	4b2e      	ldr	r3, [pc, #184]	@ (800283c <StartDefaultTask+0x204>)
 8002782:	4929      	ldr	r1, [pc, #164]	@ (8002828 <StartDefaultTask+0x1f0>)
 8002784:	482e      	ldr	r0, [pc, #184]	@ (8002840 <StartDefaultTask+0x208>)
 8002786:	f00d f84b 	bl	800f820 <rclc_subscription_init_best_effort>
			ROSIDL_GET_MSG_TYPE_SUPPORT(geometry_msgs, msg, Twist), "cmd_vel");

	//create timer
	rclc_timer_init_default(&timer, &support, timer_period, timer_callback);
 800278a:	4a2e      	ldr	r2, [pc, #184]	@ (8002844 <StartDefaultTask+0x20c>)
 800278c:	2300      	movs	r3, #0
 800278e:	4690      	mov	r8, r2
 8002790:	4699      	mov	r9, r3
 8002792:	4b2d      	ldr	r3, [pc, #180]	@ (8002848 <StartDefaultTask+0x210>)
 8002794:	9300      	str	r3, [sp, #0]
 8002796:	4642      	mov	r2, r8
 8002798:	464b      	mov	r3, r9
 800279a:	4920      	ldr	r1, [pc, #128]	@ (800281c <StartDefaultTask+0x1e4>)
 800279c:	482b      	ldr	r0, [pc, #172]	@ (800284c <StartDefaultTask+0x214>)
 800279e:	f00d f873 	bl	800f888 <rclc_timer_init_default>

	//create executor
	executor = rclc_executor_get_zero_initialized_executor();
 80027a2:	4c2b      	ldr	r4, [pc, #172]	@ (8002850 <StartDefaultTask+0x218>)
 80027a4:	463b      	mov	r3, r7
 80027a6:	4618      	mov	r0, r3
 80027a8:	f00c fc90 	bl	800f0cc <rclc_executor_get_zero_initialized_executor>
 80027ac:	4620      	mov	r0, r4
 80027ae:	463b      	mov	r3, r7
 80027b0:	2288      	movs	r2, #136	@ 0x88
 80027b2:	4619      	mov	r1, r3
 80027b4:	f018 fe9b 	bl	801b4ee <memcpy>
	rclc_executor_init(&executor, &support.context, 2, &allocator); // total number of handles = #subscriptions + #timers
 80027b8:	4b16      	ldr	r3, [pc, #88]	@ (8002814 <StartDefaultTask+0x1dc>)
 80027ba:	2202      	movs	r2, #2
 80027bc:	4917      	ldr	r1, [pc, #92]	@ (800281c <StartDefaultTask+0x1e4>)
 80027be:	4824      	ldr	r0, [pc, #144]	@ (8002850 <StartDefaultTask+0x218>)
 80027c0:	f00c fc8e 	bl	800f0e0 <rclc_executor_init>
	rclc_executor_add_timer(&executor, &timer);
 80027c4:	4921      	ldr	r1, [pc, #132]	@ (800284c <StartDefaultTask+0x214>)
 80027c6:	4822      	ldr	r0, [pc, #136]	@ (8002850 <StartDefaultTask+0x218>)
 80027c8:	f00c fd2e 	bl	800f228 <rclc_executor_add_timer>
	rclc_executor_add_subscription(&executor, &subscriber, &sub_msg,
 80027cc:	2300      	movs	r3, #0
 80027ce:	9300      	str	r3, [sp, #0]
 80027d0:	4b20      	ldr	r3, [pc, #128]	@ (8002854 <StartDefaultTask+0x21c>)
 80027d2:	4a21      	ldr	r2, [pc, #132]	@ (8002858 <StartDefaultTask+0x220>)
 80027d4:	491a      	ldr	r1, [pc, #104]	@ (8002840 <StartDefaultTask+0x208>)
 80027d6:	481e      	ldr	r0, [pc, #120]	@ (8002850 <StartDefaultTask+0x218>)
 80027d8:	f00c fcf2 	bl	800f1c0 <rclc_executor_add_subscription>
			&subscription_callback, ON_NEW_DATA);
	rclc_executor_spin(&executor);
 80027dc:	481c      	ldr	r0, [pc, #112]	@ (8002850 <StartDefaultTask+0x218>)
 80027de:	f00c ff39 	bl	800f654 <rclc_executor_spin>
}
 80027e2:	bf00      	nop
 80027e4:	37c0      	adds	r7, #192	@ 0xc0
 80027e6:	46bd      	mov	sp, r7
 80027e8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80027ec:	08004a25 	.word	0x08004a25
 80027f0:	080049c1 	.word	0x080049c1
 80027f4:	080049a1 	.word	0x080049a1
 80027f8:	08004975 	.word	0x08004975
 80027fc:	2000487c 	.word	0x2000487c
 8002800:	08002d81 	.word	0x08002d81
 8002804:	08002dc5 	.word	0x08002dc5
 8002808:	08002dfd 	.word	0x08002dfd
 800280c:	08002e69 	.word	0x08002e69
 8002810:	0801d474 	.word	0x0801d474
 8002814:	200041d8 	.word	0x200041d8
 8002818:	200041ec 	.word	0x200041ec
 800281c:	200041a4 	.word	0x200041a4
 8002820:	0801d49c 	.word	0x0801d49c
 8002824:	0801d4a0 	.word	0x0801d4a0
 8002828:	2000419c 	.word	0x2000419c
 800282c:	20004280 	.word	0x20004280
 8002830:	0801d4b0 	.word	0x0801d4b0
 8002834:	0801d4bc 	.word	0x0801d4bc
 8002838:	20004278 	.word	0x20004278
 800283c:	0801d4c8 	.word	0x0801d4c8
 8002840:	2000427c 	.word	0x2000427c
 8002844:	00989680 	.word	0x00989680
 8002848:	08002429 	.word	0x08002429
 800284c:	200042d0 	.word	0x200042d0
 8002850:	200041f0 	.word	0x200041f0
 8002854:	0800255d 	.word	0x0800255d
 8002858:	200042a0 	.word	0x200042a0

0800285c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800285c:	b580      	push	{r7, lr}
 800285e:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8002860:	f002 f95d 	bl	8004b1e <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8002864:	f000 f89a 	bl	800299c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8002868:	f7ff fd38 	bl	80022dc <MX_GPIO_Init>
	MX_DMA_Init();
 800286c:	f7ff fd04 	bl	8002278 <MX_DMA_Init>
	MX_TIM3_Init();
 8002870:	f001 fae4 	bl	8003e3c <MX_TIM3_Init>
	MX_TIM4_Init();
 8002874:	f001 fb38 	bl	8003ee8 <MX_TIM4_Init>
	MX_TIM5_Init();
 8002878:	f001 fb8c 	bl	8003f94 <MX_TIM5_Init>
	MX_TIM20_Init();
 800287c:	f001 fc98 	bl	80041b0 <MX_TIM20_Init>
	MX_TIM8_Init();
 8002880:	f001 fbde 	bl	8004040 <MX_TIM8_Init>
	MX_TIM2_Init();
 8002884:	f001 fa8c 	bl	8003da0 <MX_TIM2_Init>
	MX_LPUART1_UART_Init();
 8002888:	f001 ff6c 	bl	8004764 <MX_LPUART1_UART_Init>
	MX_IWDG_Init();
 800288c:	f7ff fdae 	bl	80023ec <MX_IWDG_Init>
	/* USER CODE BEGIN 2 */
	transporter_begin();
 8002890:	f001 fe5a 	bl	8004548 <transporter_begin>

	// 1. Sine Wave Example
	SIGNAL_init(&sine_sg, SIGNAL_SINE);
 8002894:	2100      	movs	r1, #0
 8002896:	4837      	ldr	r0, [pc, #220]	@ (8002974 <main+0x118>)
 8002898:	f000 fc3c 	bl	8003114 <SIGNAL_init>
	SIGNAL_config_sine(&sine_sg, 0.7f / 3.0f,    // Amplitude
 800289c:	eddf 2a36 	vldr	s5, [pc, #216]	@ 8002978 <main+0x11c>
 80028a0:	ed9f 2a36 	vldr	s4, [pc, #216]	@ 800297c <main+0x120>
 80028a4:	eddf 1a36 	vldr	s3, [pc, #216]	@ 8002980 <main+0x124>
 80028a8:	ed9f 1a35 	vldr	s2, [pc, #212]	@ 8002980 <main+0x124>
 80028ac:	eddf 0a35 	vldr	s1, [pc, #212]	@ 8002984 <main+0x128>
 80028b0:	ed9f 0a31 	vldr	s0, [pc, #196]	@ 8002978 <main+0x11c>
 80028b4:	482f      	ldr	r0, [pc, #188]	@ (8002974 <main+0x118>)
 80028b6:	f000 fc8b 	bl	80031d0 <SIGNAL_config_sine>
			-0.7f / 3.0f,   // Min Setpoint
			0.7f / 3.0f     // Max Setpoint
					);

	// 2. Chirp Wave Example (Linear)
	SIGNAL_init(&chirp_linear_sg, SIGNAL_CHIRP);
 80028ba:	2101      	movs	r1, #1
 80028bc:	4832      	ldr	r0, [pc, #200]	@ (8002988 <main+0x12c>)
 80028be:	f000 fc29 	bl	8003114 <SIGNAL_init>
	SIGNAL_config_chirp(&chirp_linear_sg, 0.7f / 3.0f,        // Amplitude
 80028c2:	eddf 2a2d 	vldr	s5, [pc, #180]	@ 8002978 <main+0x11c>
 80028c6:	ed9f 2a2d 	vldr	s4, [pc, #180]	@ 800297c <main+0x120>
 80028ca:	2100      	movs	r1, #0
 80028cc:	eef1 1a04 	vmov.f32	s3, #20	@ 0x40a00000  5.0
 80028d0:	eeb2 1a04 	vmov.f32	s2, #36	@ 0x41200000  10.0
 80028d4:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 80028d8:	ed9f 0a27 	vldr	s0, [pc, #156]	@ 8002978 <main+0x11c>
 80028dc:	482a      	ldr	r0, [pc, #168]	@ (8002988 <main+0x12c>)
 80028de:	f000 fca2 	bl	8003226 <SIGNAL_config_chirp>
			-0.7f / 3.0f,       // Min Setpoint
			0.7f / 3.0f         // Max Setpoint
					);

	// 3. Chirp Wave Example (Logarithmic)
	SIGNAL_init(&chirp_log_sg, SIGNAL_CHIRP);
 80028e2:	2101      	movs	r1, #1
 80028e4:	4829      	ldr	r0, [pc, #164]	@ (800298c <main+0x130>)
 80028e6:	f000 fc15 	bl	8003114 <SIGNAL_init>
	SIGNAL_config_chirp(&chirp_log_sg, 0.7f / 3.0f,            // Amplitude
 80028ea:	eddf 2a23 	vldr	s5, [pc, #140]	@ 8002978 <main+0x11c>
 80028ee:	ed9f 2a23 	vldr	s4, [pc, #140]	@ 800297c <main+0x120>
 80028f2:	2101      	movs	r1, #1
 80028f4:	eef1 1a04 	vmov.f32	s3, #20	@ 0x40a00000  5.0
 80028f8:	eeb2 1a04 	vmov.f32	s2, #36	@ 0x41200000  10.0
 80028fc:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8002900:	ed9f 0a1d 	vldr	s0, [pc, #116]	@ 8002978 <main+0x11c>
 8002904:	4821      	ldr	r0, [pc, #132]	@ (800298c <main+0x130>)
 8002906:	f000 fc8e 	bl	8003226 <SIGNAL_config_chirp>
			-0.7f / 3.0f,           // Min Setpoint
			0.7f / 3.0f             // Max Setpoint
					);

	// 4. Square Wave Example
	SIGNAL_init(&square_sg, SIGNAL_SQUARE);
 800290a:	2102      	movs	r1, #2
 800290c:	4820      	ldr	r0, [pc, #128]	@ (8002990 <main+0x134>)
 800290e:	f000 fc01 	bl	8003114 <SIGNAL_init>
	SIGNAL_config_square(&square_sg, 0.7f / 3.0f,    // Amplitude
 8002912:	ed9f 3a19 	vldr	s6, [pc, #100]	@ 8002978 <main+0x11c>
 8002916:	eddf 2a19 	vldr	s5, [pc, #100]	@ 800297c <main+0x120>
 800291a:	ed9f 2a19 	vldr	s4, [pc, #100]	@ 8002980 <main+0x124>
 800291e:	eddf 1a18 	vldr	s3, [pc, #96]	@ 8002980 <main+0x124>
 8002922:	ed9f 1a1c 	vldr	s2, [pc, #112]	@ 8002994 <main+0x138>
 8002926:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 800292a:	ed9f 0a13 	vldr	s0, [pc, #76]	@ 8002978 <main+0x11c>
 800292e:	4818      	ldr	r0, [pc, #96]	@ (8002990 <main+0x134>)
 8002930:	f000 fcad 	bl	800328e <SIGNAL_config_square>
			-0.7f / 3.0f,   // Min Setpoint
			0.7f / 3.0f     // Max Setpoint
					);

	// 5. Ramp Wave Example
	SIGNAL_init(&ramp_sg, SIGNAL_RAMP);
 8002934:	2103      	movs	r1, #3
 8002936:	4818      	ldr	r0, [pc, #96]	@ (8002998 <main+0x13c>)
 8002938:	f000 fbec 	bl	8003114 <SIGNAL_init>
	SIGNAL_config_ramp(&ramp_sg, 0.7f / 3.0f,    // Amplitude
 800293c:	eddf 3a0e 	vldr	s7, [pc, #56]	@ 8002978 <main+0x11c>
 8002940:	ed9f 3a0e 	vldr	s6, [pc, #56]	@ 800297c <main+0x120>
 8002944:	eddf 2a0e 	vldr	s5, [pc, #56]	@ 8002980 <main+0x124>
 8002948:	ed9f 2a0d 	vldr	s4, [pc, #52]	@ 8002980 <main+0x124>
 800294c:	eddf 1a0a 	vldr	s3, [pc, #40]	@ 8002978 <main+0x11c>
 8002950:	ed9f 1a0a 	vldr	s2, [pc, #40]	@ 800297c <main+0x120>
 8002954:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8002958:	ed9f 0a07 	vldr	s0, [pc, #28]	@ 8002978 <main+0x11c>
 800295c:	480e      	ldr	r0, [pc, #56]	@ (8002998 <main+0x13c>)
 800295e:	f000 fcc6 	bl	80032ee <SIGNAL_config_ramp>
					);

	/* USER CODE END 2 */

	/* Init scheduler */
	osKernelInitialize();
 8002962:	f007 fbf3 	bl	800a14c <osKernelInitialize>

	/* Call init function for freertos objects (in cmsis_os2.c) */
	MX_FREERTOS_Init();
 8002966:	f7ff fa25 	bl	8001db4 <MX_FREERTOS_Init>

	/* Start scheduler */
	osKernelStart();
 800296a:	f007 fc13 	bl	800a194 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 800296e:	bf00      	nop
 8002970:	e7fd      	b.n	800296e <main+0x112>
 8002972:	bf00      	nop
 8002974:	20004034 	.word	0x20004034
 8002978:	3e6eeeef 	.word	0x3e6eeeef
 800297c:	be6eeeef 	.word	0xbe6eeeef
 8002980:	00000000 	.word	0x00000000
 8002984:	3d4ccccd 	.word	0x3d4ccccd
 8002988:	20004078 	.word	0x20004078
 800298c:	200040bc 	.word	0x200040bc
 8002990:	20004100 	.word	0x20004100
 8002994:	3e99999a 	.word	0x3e99999a
 8002998:	20004144 	.word	0x20004144

0800299c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800299c:	b580      	push	{r7, lr}
 800299e:	b094      	sub	sp, #80	@ 0x50
 80029a0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80029a2:	f107 0318 	add.w	r3, r7, #24
 80029a6:	2238      	movs	r2, #56	@ 0x38
 80029a8:	2100      	movs	r1, #0
 80029aa:	4618      	mov	r0, r3
 80029ac:	f018 fcd6 	bl	801b35c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80029b0:	1d3b      	adds	r3, r7, #4
 80029b2:	2200      	movs	r2, #0
 80029b4:	601a      	str	r2, [r3, #0]
 80029b6:	605a      	str	r2, [r3, #4]
 80029b8:	609a      	str	r2, [r3, #8]
 80029ba:	60da      	str	r2, [r3, #12]
 80029bc:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80029be:	2000      	movs	r0, #0
 80029c0:	f002 ff28 	bl	8005814 <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI
 80029c4:	230a      	movs	r3, #10
 80029c6:	61bb      	str	r3, [r7, #24]
			| RCC_OSCILLATORTYPE_LSI;
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80029c8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80029cc:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80029ce:	2340      	movs	r3, #64	@ 0x40
 80029d0:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80029d2:	2301      	movs	r3, #1
 80029d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80029d6:	2302      	movs	r3, #2
 80029d8:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80029da:	2302      	movs	r3, #2
 80029dc:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80029de:	2304      	movs	r3, #4
 80029e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 85;
 80029e2:	2355      	movs	r3, #85	@ 0x55
 80029e4:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80029e6:	2302      	movs	r3, #2
 80029e8:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80029ea:	2302      	movs	r3, #2
 80029ec:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80029ee:	2302      	movs	r3, #2
 80029f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80029f2:	f107 0318 	add.w	r3, r7, #24
 80029f6:	4618      	mov	r0, r3
 80029f8:	f002 ffc0 	bl	800597c <HAL_RCC_OscConfig>
 80029fc:	4603      	mov	r3, r0
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d001      	beq.n	8002a06 <SystemClock_Config+0x6a>
		Error_Handler();
 8002a02:	f000 f9b7 	bl	8002d74 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8002a06:	230f      	movs	r3, #15
 8002a08:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002a0a:	2303      	movs	r3, #3
 8002a0c:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002a12:	2300      	movs	r3, #0
 8002a14:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002a16:	2300      	movs	r3, #0
 8002a18:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 8002a1a:	1d3b      	adds	r3, r7, #4
 8002a1c:	2104      	movs	r1, #4
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f003 fabe 	bl	8005fa0 <HAL_RCC_ClockConfig>
 8002a24:	4603      	mov	r3, r0
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d001      	beq.n	8002a2e <SystemClock_Config+0x92>
		Error_Handler();
 8002a2a:	f000 f9a3 	bl	8002d74 <Error_Handler>
	}
}
 8002a2e:	bf00      	nop
 8002a30:	3750      	adds	r7, #80	@ 0x50
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}
	...

08002a38 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b084      	sub	sp, #16
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM1) {
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4aa1      	ldr	r2, [pc, #644]	@ (8002ccc <HAL_TIM_PeriodElapsedCallback+0x294>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d101      	bne.n	8002a4e <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8002a4a:	f002 f881 	bl	8004b50 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */
	if (htim == &htim2) {
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	4a9f      	ldr	r2, [pc, #636]	@ (8002cd0 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	f040 8135 	bne.w	8002cc2 <HAL_TIM_PeriodElapsedCallback+0x28a>
		QEI_get_diff_count(&encoder1);
 8002a58:	489e      	ldr	r0, [pc, #632]	@ (8002cd4 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8002a5a:	f7fe ffd5 	bl	8001a08 <QEI_get_diff_count>
		QEI_get_diff_count(&encoder2);
 8002a5e:	489e      	ldr	r0, [pc, #632]	@ (8002cd8 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8002a60:	f7fe ffd2 	bl	8001a08 <QEI_get_diff_count>
		QEI_get_diff_count(&encoder3);
 8002a64:	489d      	ldr	r0, [pc, #628]	@ (8002cdc <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8002a66:	f7fe ffcf 	bl	8001a08 <QEI_get_diff_count>
		QEI_get_diff_count(&encoder4);
 8002a6a:	489d      	ldr	r0, [pc, #628]	@ (8002ce0 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8002a6c:	f7fe ffcc 	bl	8001a08 <QEI_get_diff_count>

		QEI_compute_data(&encoder1);
 8002a70:	4898      	ldr	r0, [pc, #608]	@ (8002cd4 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8002a72:	f7ff f8a9 	bl	8001bc8 <QEI_compute_data>
		QEI_compute_data(&encoder2);
 8002a76:	4898      	ldr	r0, [pc, #608]	@ (8002cd8 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8002a78:	f7ff f8a6 	bl	8001bc8 <QEI_compute_data>
		QEI_compute_data(&encoder3);
 8002a7c:	4897      	ldr	r0, [pc, #604]	@ (8002cdc <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8002a7e:	f7ff f8a3 	bl	8001bc8 <QEI_compute_data>
		QEI_compute_data(&encoder4);
 8002a82:	4897      	ldr	r0, [pc, #604]	@ (8002ce0 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8002a84:	f7ff f8a0 	bl	8001bc8 <QEI_compute_data>

		sine_sample = SIGNAL_generate(&sine_sg, 0.001f);
 8002a88:	ed9f 0a96 	vldr	s0, [pc, #600]	@ 8002ce4 <HAL_TIM_PeriodElapsedCallback+0x2ac>
 8002a8c:	4896      	ldr	r0, [pc, #600]	@ (8002ce8 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8002a8e:	f000 fc63 	bl	8003358 <SIGNAL_generate>
 8002a92:	eef0 7a40 	vmov.f32	s15, s0
 8002a96:	4b95      	ldr	r3, [pc, #596]	@ (8002cec <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8002a98:	edc3 7a00 	vstr	s15, [r3]
		chirp_Linear_sample = SIGNAL_generate(&chirp_linear_sg, 0.001f);
 8002a9c:	ed9f 0a91 	vldr	s0, [pc, #580]	@ 8002ce4 <HAL_TIM_PeriodElapsedCallback+0x2ac>
 8002aa0:	4893      	ldr	r0, [pc, #588]	@ (8002cf0 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8002aa2:	f000 fc59 	bl	8003358 <SIGNAL_generate>
 8002aa6:	eef0 7a40 	vmov.f32	s15, s0
 8002aaa:	4b92      	ldr	r3, [pc, #584]	@ (8002cf4 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8002aac:	edc3 7a00 	vstr	s15, [r3]
		chirp_log_sample = SIGNAL_generate(&chirp_log_sg, 0.001f);
 8002ab0:	ed9f 0a8c 	vldr	s0, [pc, #560]	@ 8002ce4 <HAL_TIM_PeriodElapsedCallback+0x2ac>
 8002ab4:	4890      	ldr	r0, [pc, #576]	@ (8002cf8 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8002ab6:	f000 fc4f 	bl	8003358 <SIGNAL_generate>
 8002aba:	eef0 7a40 	vmov.f32	s15, s0
 8002abe:	4b8f      	ldr	r3, [pc, #572]	@ (8002cfc <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8002ac0:	edc3 7a00 	vstr	s15, [r3]
		square_sample = SIGNAL_generate(&square_sg, 0.001f);
 8002ac4:	ed9f 0a87 	vldr	s0, [pc, #540]	@ 8002ce4 <HAL_TIM_PeriodElapsedCallback+0x2ac>
 8002ac8:	488d      	ldr	r0, [pc, #564]	@ (8002d00 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8002aca:	f000 fc45 	bl	8003358 <SIGNAL_generate>
 8002ace:	eef0 7a40 	vmov.f32	s15, s0
 8002ad2:	4b8c      	ldr	r3, [pc, #560]	@ (8002d04 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8002ad4:	edc3 7a00 	vstr	s15, [r3]
		ramp_sample = SIGNAL_generate(&ramp_sg, 0.001f);
 8002ad8:	ed9f 0a82 	vldr	s0, [pc, #520]	@ 8002ce4 <HAL_TIM_PeriodElapsedCallback+0x2ac>
 8002adc:	488a      	ldr	r0, [pc, #552]	@ (8002d08 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8002ade:	f000 fc3b 	bl	8003358 <SIGNAL_generate>
 8002ae2:	eef0 7a40 	vmov.f32	s15, s0
 8002ae6:	4b89      	ldr	r3, [pc, #548]	@ (8002d0c <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8002ae8:	edc3 7a00 	vstr	s15, [r3]

		filteredValue1 = FIR_process(&lowPassFilter1, encoder1.radps);
 8002aec:	4b79      	ldr	r3, [pc, #484]	@ (8002cd4 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8002aee:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8002af2:	eeb0 0a67 	vmov.f32	s0, s15
 8002af6:	4886      	ldr	r0, [pc, #536]	@ (8002d10 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8002af8:	f7fe fdb0 	bl	800165c <FIR_process>
 8002afc:	eef0 7a40 	vmov.f32	s15, s0
 8002b00:	4b84      	ldr	r3, [pc, #528]	@ (8002d14 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8002b02:	edc3 7a00 	vstr	s15, [r3]
		filteredValue2 = FIR_process(&lowPassFilter2, encoder2.radps);
 8002b06:	4b74      	ldr	r3, [pc, #464]	@ (8002cd8 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8002b08:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8002b0c:	eeb0 0a67 	vmov.f32	s0, s15
 8002b10:	4881      	ldr	r0, [pc, #516]	@ (8002d18 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8002b12:	f7fe fda3 	bl	800165c <FIR_process>
 8002b16:	eef0 7a40 	vmov.f32	s15, s0
 8002b1a:	4b80      	ldr	r3, [pc, #512]	@ (8002d1c <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8002b1c:	edc3 7a00 	vstr	s15, [r3]
		filteredValue3 = FIR_process(&lowPassFilter3, encoder3.radps);
 8002b20:	4b6e      	ldr	r3, [pc, #440]	@ (8002cdc <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8002b22:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8002b26:	eeb0 0a67 	vmov.f32	s0, s15
 8002b2a:	487d      	ldr	r0, [pc, #500]	@ (8002d20 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8002b2c:	f7fe fd96 	bl	800165c <FIR_process>
 8002b30:	eef0 7a40 	vmov.f32	s15, s0
 8002b34:	4b7b      	ldr	r3, [pc, #492]	@ (8002d24 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8002b36:	edc3 7a00 	vstr	s15, [r3]
		filteredValue4 = FIR_process(&lowPassFilter4, encoder4.radps);
 8002b3a:	4b69      	ldr	r3, [pc, #420]	@ (8002ce0 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8002b3c:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8002b40:	eeb0 0a67 	vmov.f32	s0, s15
 8002b44:	4878      	ldr	r0, [pc, #480]	@ (8002d28 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8002b46:	f7fe fd89 	bl	800165c <FIR_process>
 8002b4a:	eef0 7a40 	vmov.f32	s15, s0
 8002b4e:	4b77      	ldr	r3, [pc, #476]	@ (8002d2c <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8002b50:	edc3 7a00 	vstr	s15, [r3]

		cmd_vel1 = PWM_Satuation(
 8002b54:	4b76      	ldr	r3, [pc, #472]	@ (8002d30 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8002b56:	ed93 7a00 	vldr	s14, [r3]
 8002b5a:	4b6e      	ldr	r3, [pc, #440]	@ (8002d14 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8002b5c:	edd3 7a00 	vldr	s15, [r3]
 8002b60:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b64:	eeb0 0a67 	vmov.f32	s0, s15
 8002b68:	4872      	ldr	r0, [pc, #456]	@ (8002d34 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8002b6a:	f7fe fac6 	bl	80010fa <PID_CONTROLLER_Compute>
 8002b6e:	eef0 7a40 	vmov.f32	s15, s0
 8002b72:	4971      	ldr	r1, [pc, #452]	@ (8002d38 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8002b74:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8002b78:	eeb0 0a67 	vmov.f32	s0, s15
 8002b7c:	f7fe fa64 	bl	8001048 <PWM_Satuation>
 8002b80:	ee07 0a90 	vmov	s15, r0
 8002b84:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b88:	4b6c      	ldr	r3, [pc, #432]	@ (8002d3c <HAL_TIM_PeriodElapsedCallback+0x304>)
 8002b8a:	edc3 7a00 	vstr	s15, [r3]
				PID_CONTROLLER_Compute(&pid1, setpointL - filteredValue1),
				65535, -65535);
		cmd_vel2 = PWM_Satuation(
 8002b8e:	4b68      	ldr	r3, [pc, #416]	@ (8002d30 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8002b90:	ed93 7a00 	vldr	s14, [r3]
 8002b94:	4b61      	ldr	r3, [pc, #388]	@ (8002d1c <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8002b96:	edd3 7a00 	vldr	s15, [r3]
 8002b9a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b9e:	eeb0 0a67 	vmov.f32	s0, s15
 8002ba2:	4867      	ldr	r0, [pc, #412]	@ (8002d40 <HAL_TIM_PeriodElapsedCallback+0x308>)
 8002ba4:	f7fe faa9 	bl	80010fa <PID_CONTROLLER_Compute>
 8002ba8:	eef0 7a40 	vmov.f32	s15, s0
 8002bac:	4962      	ldr	r1, [pc, #392]	@ (8002d38 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8002bae:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8002bb2:	eeb0 0a67 	vmov.f32	s0, s15
 8002bb6:	f7fe fa47 	bl	8001048 <PWM_Satuation>
 8002bba:	ee07 0a90 	vmov	s15, r0
 8002bbe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002bc2:	4b60      	ldr	r3, [pc, #384]	@ (8002d44 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8002bc4:	edc3 7a00 	vstr	s15, [r3]
				PID_CONTROLLER_Compute(&pid2, setpointL - filteredValue2),
				65535, -65535);
		cmd_vel3 = PWM_Satuation(
 8002bc8:	4b5f      	ldr	r3, [pc, #380]	@ (8002d48 <HAL_TIM_PeriodElapsedCallback+0x310>)
 8002bca:	ed93 7a00 	vldr	s14, [r3]
 8002bce:	4b55      	ldr	r3, [pc, #340]	@ (8002d24 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8002bd0:	edd3 7a00 	vldr	s15, [r3]
 8002bd4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002bd8:	eeb0 0a67 	vmov.f32	s0, s15
 8002bdc:	485b      	ldr	r0, [pc, #364]	@ (8002d4c <HAL_TIM_PeriodElapsedCallback+0x314>)
 8002bde:	f7fe fa8c 	bl	80010fa <PID_CONTROLLER_Compute>
 8002be2:	eef0 7a40 	vmov.f32	s15, s0
 8002be6:	4954      	ldr	r1, [pc, #336]	@ (8002d38 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8002be8:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8002bec:	eeb0 0a67 	vmov.f32	s0, s15
 8002bf0:	f7fe fa2a 	bl	8001048 <PWM_Satuation>
 8002bf4:	ee07 0a90 	vmov	s15, r0
 8002bf8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002bfc:	4b54      	ldr	r3, [pc, #336]	@ (8002d50 <HAL_TIM_PeriodElapsedCallback+0x318>)
 8002bfe:	edc3 7a00 	vstr	s15, [r3]
				PID_CONTROLLER_Compute(&pid3, setpointR - filteredValue3),
				65535, -65535);
		cmd_vel4 = PWM_Satuation(
 8002c02:	4b51      	ldr	r3, [pc, #324]	@ (8002d48 <HAL_TIM_PeriodElapsedCallback+0x310>)
 8002c04:	ed93 7a00 	vldr	s14, [r3]
 8002c08:	4b48      	ldr	r3, [pc, #288]	@ (8002d2c <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8002c0a:	edd3 7a00 	vldr	s15, [r3]
 8002c0e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c12:	eeb0 0a67 	vmov.f32	s0, s15
 8002c16:	484f      	ldr	r0, [pc, #316]	@ (8002d54 <HAL_TIM_PeriodElapsedCallback+0x31c>)
 8002c18:	f7fe fa6f 	bl	80010fa <PID_CONTROLLER_Compute>
 8002c1c:	eef0 7a40 	vmov.f32	s15, s0
 8002c20:	4945      	ldr	r1, [pc, #276]	@ (8002d38 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8002c22:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8002c26:	eeb0 0a67 	vmov.f32	s0, s15
 8002c2a:	f7fe fa0d 	bl	8001048 <PWM_Satuation>
 8002c2e:	ee07 0a90 	vmov	s15, r0
 8002c32:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c36:	4b48      	ldr	r3, [pc, #288]	@ (8002d58 <HAL_TIM_PeriodElapsedCallback+0x320>)
 8002c38:	edc3 7a00 	vstr	s15, [r3]
				PID_CONTROLLER_Compute(&pid4, setpointR - filteredValue4),
				65535, -65535);

		MDXX_set_range(&motor1, 2000, cmd_vel1);
 8002c3c:	4b3f      	ldr	r3, [pc, #252]	@ (8002d3c <HAL_TIM_PeriodElapsedCallback+0x304>)
 8002c3e:	edd3 7a00 	vldr	s15, [r3]
 8002c42:	eef0 0a67 	vmov.f32	s1, s15
 8002c46:	ed9f 0a45 	vldr	s0, [pc, #276]	@ 8002d5c <HAL_TIM_PeriodElapsedCallback+0x324>
 8002c4a:	4845      	ldr	r0, [pc, #276]	@ (8002d60 <HAL_TIM_PeriodElapsedCallback+0x328>)
 8002c4c:	f7fe fb0c 	bl	8001268 <MDXX_set_range>
		MDXX_set_range(&motor2, 2000, cmd_vel2);
 8002c50:	4b3c      	ldr	r3, [pc, #240]	@ (8002d44 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8002c52:	edd3 7a00 	vldr	s15, [r3]
 8002c56:	eef0 0a67 	vmov.f32	s1, s15
 8002c5a:	ed9f 0a40 	vldr	s0, [pc, #256]	@ 8002d5c <HAL_TIM_PeriodElapsedCallback+0x324>
 8002c5e:	4841      	ldr	r0, [pc, #260]	@ (8002d64 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 8002c60:	f7fe fb02 	bl	8001268 <MDXX_set_range>
		MDXX_set_range(&motor3, 2000, cmd_vel3);
 8002c64:	4b3a      	ldr	r3, [pc, #232]	@ (8002d50 <HAL_TIM_PeriodElapsedCallback+0x318>)
 8002c66:	edd3 7a00 	vldr	s15, [r3]
 8002c6a:	eef0 0a67 	vmov.f32	s1, s15
 8002c6e:	ed9f 0a3b 	vldr	s0, [pc, #236]	@ 8002d5c <HAL_TIM_PeriodElapsedCallback+0x324>
 8002c72:	483d      	ldr	r0, [pc, #244]	@ (8002d68 <HAL_TIM_PeriodElapsedCallback+0x330>)
 8002c74:	f7fe faf8 	bl	8001268 <MDXX_set_range>
		MDXX_set_range(&motor4, 2000, cmd_vel4);
 8002c78:	4b37      	ldr	r3, [pc, #220]	@ (8002d58 <HAL_TIM_PeriodElapsedCallback+0x320>)
 8002c7a:	edd3 7a00 	vldr	s15, [r3]
 8002c7e:	eef0 0a67 	vmov.f32	s1, s15
 8002c82:	ed9f 0a36 	vldr	s0, [pc, #216]	@ 8002d5c <HAL_TIM_PeriodElapsedCallback+0x324>
 8002c86:	4839      	ldr	r0, [pc, #228]	@ (8002d6c <HAL_TIM_PeriodElapsedCallback+0x334>)
 8002c88:	f7fe faee 	bl	8001268 <MDXX_set_range>

		uint32_t current_time = HAL_GetTick();
 8002c8c:	f001 ff72 	bl	8004b74 <HAL_GetTick>
 8002c90:	60f8      	str	r0, [r7, #12]
		SKID_calculate_pose(&robot_kinematics, cmd_vel1, cmd_vel2, cmd_vel3,
 8002c92:	4b2a      	ldr	r3, [pc, #168]	@ (8002d3c <HAL_TIM_PeriodElapsedCallback+0x304>)
 8002c94:	edd3 7a00 	vldr	s15, [r3]
 8002c98:	4b2a      	ldr	r3, [pc, #168]	@ (8002d44 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8002c9a:	ed93 7a00 	vldr	s14, [r3]
 8002c9e:	4b2c      	ldr	r3, [pc, #176]	@ (8002d50 <HAL_TIM_PeriodElapsedCallback+0x318>)
 8002ca0:	edd3 6a00 	vldr	s13, [r3]
 8002ca4:	4b2c      	ldr	r3, [pc, #176]	@ (8002d58 <HAL_TIM_PeriodElapsedCallback+0x320>)
 8002ca6:	ed93 6a00 	vldr	s12, [r3]
 8002caa:	68f9      	ldr	r1, [r7, #12]
 8002cac:	eef0 1a46 	vmov.f32	s3, s12
 8002cb0:	eeb0 1a66 	vmov.f32	s2, s13
 8002cb4:	eef0 0a47 	vmov.f32	s1, s14
 8002cb8:	eeb0 0a67 	vmov.f32	s0, s15
 8002cbc:	482c      	ldr	r0, [pc, #176]	@ (8002d70 <HAL_TIM_PeriodElapsedCallback+0x338>)
 8002cbe:	f000 fd8b 	bl	80037d8 <SKID_calculate_pose>
				cmd_vel4, current_time);
	}
	/* USER CODE END Callback 1 */
}
 8002cc2:	bf00      	nop
 8002cc4:	3710      	adds	r7, #16
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}
 8002cca:	bf00      	nop
 8002ccc:	40012c00 	.word	0x40012c00
 8002cd0:	2000434c 	.word	0x2000434c
 8002cd4:	20004644 	.word	0x20004644
 8002cd8:	20004690 	.word	0x20004690
 8002cdc:	200046dc 	.word	0x200046dc
 8002ce0:	20004728 	.word	0x20004728
 8002ce4:	3a83126f 	.word	0x3a83126f
 8002ce8:	20004034 	.word	0x20004034
 8002cec:	20004188 	.word	0x20004188
 8002cf0:	20004078 	.word	0x20004078
 8002cf4:	2000418c 	.word	0x2000418c
 8002cf8:	200040bc 	.word	0x200040bc
 8002cfc:	20004190 	.word	0x20004190
 8002d00:	20004100 	.word	0x20004100
 8002d04:	20004194 	.word	0x20004194
 8002d08:	20004144 	.word	0x20004144
 8002d0c:	20004198 	.word	0x20004198
 8002d10:	20004824 	.word	0x20004824
 8002d14:	20004014 	.word	0x20004014
 8002d18:	20004830 	.word	0x20004830
 8002d1c:	20004018 	.word	0x20004018
 8002d20:	2000483c 	.word	0x2000483c
 8002d24:	2000401c 	.word	0x2000401c
 8002d28:	20004848 	.word	0x20004848
 8002d2c:	20004020 	.word	0x20004020
 8002d30:	2000400c 	.word	0x2000400c
 8002d34:	20004774 	.word	0x20004774
 8002d38:	ffff0001 	.word	0xffff0001
 8002d3c:	20004024 	.word	0x20004024
 8002d40:	200047a0 	.word	0x200047a0
 8002d44:	20004028 	.word	0x20004028
 8002d48:	20004010 	.word	0x20004010
 8002d4c:	200047cc 	.word	0x200047cc
 8002d50:	2000402c 	.word	0x2000402c
 8002d54:	200047f8 	.word	0x200047f8
 8002d58:	20004030 	.word	0x20004030
 8002d5c:	44fa0000 	.word	0x44fa0000
 8002d60:	20004514 	.word	0x20004514
 8002d64:	20004560 	.word	0x20004560
 8002d68:	200045ac 	.word	0x200045ac
 8002d6c:	200045f8 	.word	0x200045f8
 8002d70:	20004854 	.word	0x20004854

08002d74 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8002d74:	b480      	push	{r7}
 8002d76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002d78:	b672      	cpsid	i
}
 8002d7a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002d7c:	bf00      	nop
 8002d7e:	e7fd      	b.n	8002d7c <Error_Handler+0x8>

08002d80 <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b082      	sub	sp, #8
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
 8002d88:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8002d8a:	4b0c      	ldr	r3, [pc, #48]	@ (8002dbc <microros_allocate+0x3c>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	461a      	mov	r2, r3
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	4413      	add	r3, r2
 8002d94:	461a      	mov	r2, r3
 8002d96:	4b09      	ldr	r3, [pc, #36]	@ (8002dbc <microros_allocate+0x3c>)
 8002d98:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8002d9a:	4b09      	ldr	r3, [pc, #36]	@ (8002dc0 <microros_allocate+0x40>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	461a      	mov	r2, r3
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	4413      	add	r3, r2
 8002da4:	461a      	mov	r2, r3
 8002da6:	4b06      	ldr	r3, [pc, #24]	@ (8002dc0 <microros_allocate+0x40>)
 8002da8:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 8002daa:	6878      	ldr	r0, [r7, #4]
 8002dac:	f7ff f814 	bl	8001dd8 <pvPortMallocMicroROS>
 8002db0:	4603      	mov	r3, r0
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	3708      	adds	r7, #8
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}
 8002dba:	bf00      	nop
 8002dbc:	200042f0 	.word	0x200042f0
 8002dc0:	200042f4 	.word	0x200042f4

08002dc4 <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b082      	sub	sp, #8
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
 8002dcc:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d00c      	beq.n	8002dee <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 8002dd4:	6878      	ldr	r0, [r7, #4]
 8002dd6:	f7ff f923 	bl	8002020 <getBlockSize>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	4a06      	ldr	r2, [pc, #24]	@ (8002df8 <microros_deallocate+0x34>)
 8002dde:	6812      	ldr	r2, [r2, #0]
 8002de0:	1ad3      	subs	r3, r2, r3
 8002de2:	461a      	mov	r2, r3
 8002de4:	4b04      	ldr	r3, [pc, #16]	@ (8002df8 <microros_deallocate+0x34>)
 8002de6:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 8002de8:	6878      	ldr	r0, [r7, #4]
 8002dea:	f7ff f8bd 	bl	8001f68 <vPortFreeMicroROS>
  }
}
 8002dee:	bf00      	nop
 8002df0:	3708      	adds	r7, #8
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}
 8002df6:	bf00      	nop
 8002df8:	200042f4 	.word	0x200042f4

08002dfc <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b084      	sub	sp, #16
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	60f8      	str	r0, [r7, #12]
 8002e04:	60b9      	str	r1, [r7, #8]
 8002e06:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8002e08:	4b15      	ldr	r3, [pc, #84]	@ (8002e60 <microros_reallocate+0x64>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	461a      	mov	r2, r3
 8002e0e:	68bb      	ldr	r3, [r7, #8]
 8002e10:	4413      	add	r3, r2
 8002e12:	461a      	mov	r2, r3
 8002e14:	4b12      	ldr	r3, [pc, #72]	@ (8002e60 <microros_reallocate+0x64>)
 8002e16:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8002e18:	4b12      	ldr	r3, [pc, #72]	@ (8002e64 <microros_reallocate+0x68>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	461a      	mov	r2, r3
 8002e1e:	68bb      	ldr	r3, [r7, #8]
 8002e20:	4413      	add	r3, r2
 8002e22:	461a      	mov	r2, r3
 8002e24:	4b0f      	ldr	r3, [pc, #60]	@ (8002e64 <microros_reallocate+0x68>)
 8002e26:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d104      	bne.n	8002e38 <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 8002e2e:	68b8      	ldr	r0, [r7, #8]
 8002e30:	f7fe ffd2 	bl	8001dd8 <pvPortMallocMicroROS>
 8002e34:	4603      	mov	r3, r0
 8002e36:	e00e      	b.n	8002e56 <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 8002e38:	68f8      	ldr	r0, [r7, #12]
 8002e3a:	f7ff f8f1 	bl	8002020 <getBlockSize>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	4a08      	ldr	r2, [pc, #32]	@ (8002e64 <microros_reallocate+0x68>)
 8002e42:	6812      	ldr	r2, [r2, #0]
 8002e44:	1ad3      	subs	r3, r2, r3
 8002e46:	461a      	mov	r2, r3
 8002e48:	4b06      	ldr	r3, [pc, #24]	@ (8002e64 <microros_reallocate+0x68>)
 8002e4a:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 8002e4c:	68b9      	ldr	r1, [r7, #8]
 8002e4e:	68f8      	ldr	r0, [r7, #12]
 8002e50:	f7ff f904 	bl	800205c <pvPortReallocMicroROS>
 8002e54:	4603      	mov	r3, r0
  }
}
 8002e56:	4618      	mov	r0, r3
 8002e58:	3710      	adds	r7, #16
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}
 8002e5e:	bf00      	nop
 8002e60:	200042f0 	.word	0x200042f0
 8002e64:	200042f4 	.word	0x200042f4

08002e68 <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b084      	sub	sp, #16
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	60f8      	str	r0, [r7, #12]
 8002e70:	60b9      	str	r1, [r7, #8]
 8002e72:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	68ba      	ldr	r2, [r7, #8]
 8002e78:	fb02 f303 	mul.w	r3, r2, r3
 8002e7c:	4a0c      	ldr	r2, [pc, #48]	@ (8002eb0 <microros_zero_allocate+0x48>)
 8002e7e:	6812      	ldr	r2, [r2, #0]
 8002e80:	4413      	add	r3, r2
 8002e82:	461a      	mov	r2, r3
 8002e84:	4b0a      	ldr	r3, [pc, #40]	@ (8002eb0 <microros_zero_allocate+0x48>)
 8002e86:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	68ba      	ldr	r2, [r7, #8]
 8002e8c:	fb02 f303 	mul.w	r3, r2, r3
 8002e90:	4a08      	ldr	r2, [pc, #32]	@ (8002eb4 <microros_zero_allocate+0x4c>)
 8002e92:	6812      	ldr	r2, [r2, #0]
 8002e94:	4413      	add	r3, r2
 8002e96:	461a      	mov	r2, r3
 8002e98:	4b06      	ldr	r3, [pc, #24]	@ (8002eb4 <microros_zero_allocate+0x4c>)
 8002e9a:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 8002e9c:	68b9      	ldr	r1, [r7, #8]
 8002e9e:	68f8      	ldr	r0, [r7, #12]
 8002ea0:	f7ff f909 	bl	80020b6 <pvPortCallocMicroROS>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	3710      	adds	r7, #16
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}
 8002eae:	bf00      	nop
 8002eb0:	200042f0 	.word	0x200042f0
 8002eb4:	200042f4 	.word	0x200042f4

08002eb8 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 8002eb8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002ebc:	b086      	sub	sp, #24
 8002ebe:	af00      	add	r7, sp, #0
 8002ec0:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8002ec4:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 8002eca:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002ece:	a320      	add	r3, pc, #128	@ (adr r3, 8002f50 <UTILS_NanosecondsToTimespec+0x98>)
 8002ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ed4:	f7fd fed2 	bl	8000c7c <__aeabi_ldivmod>
 8002ed8:	4602      	mov	r2, r0
 8002eda:	460b      	mov	r3, r1
 8002edc:	6879      	ldr	r1, [r7, #4]
 8002ede:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 8002ee2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002ee6:	a31a      	add	r3, pc, #104	@ (adr r3, 8002f50 <UTILS_NanosecondsToTimespec+0x98>)
 8002ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002eec:	f7fd fec6 	bl	8000c7c <__aeabi_ldivmod>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	689b      	ldr	r3, [r3, #8]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	da20      	bge.n	8002f3e <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	4a11      	ldr	r2, [pc, #68]	@ (8002f48 <UTILS_NanosecondsToTimespec+0x90>)
 8002f02:	fb82 1203 	smull	r1, r2, r2, r3
 8002f06:	1712      	asrs	r2, r2, #28
 8002f08:	17db      	asrs	r3, r3, #31
 8002f0a:	1ad3      	subs	r3, r2, r3
 8002f0c:	3301      	adds	r3, #1
 8002f0e:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f16:	6979      	ldr	r1, [r7, #20]
 8002f18:	17c8      	asrs	r0, r1, #31
 8002f1a:	460c      	mov	r4, r1
 8002f1c:	4605      	mov	r5, r0
 8002f1e:	ebb2 0804 	subs.w	r8, r2, r4
 8002f22:	eb63 0905 	sbc.w	r9, r3, r5
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	689a      	ldr	r2, [r3, #8]
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	4906      	ldr	r1, [pc, #24]	@ (8002f4c <UTILS_NanosecondsToTimespec+0x94>)
 8002f34:	fb01 f303 	mul.w	r3, r1, r3
 8002f38:	441a      	add	r2, r3
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	609a      	str	r2, [r3, #8]
    }
}
 8002f3e:	bf00      	nop
 8002f40:	3718      	adds	r7, #24
 8002f42:	46bd      	mov	sp, r7
 8002f44:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002f48:	44b82fa1 	.word	0x44b82fa1
 8002f4c:	3b9aca00 	.word	0x3b9aca00
 8002f50:	3b9aca00 	.word	0x3b9aca00
 8002f54:	00000000 	.word	0x00000000

08002f58 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 8002f58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f5c:	b08e      	sub	sp, #56	@ 0x38
 8002f5e:	af00      	add	r7, sp, #0
 8002f60:	6278      	str	r0, [r7, #36]	@ 0x24
 8002f62:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 8002f64:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8002f68:	2300      	movs	r3, #0
 8002f6a:	6013      	str	r3, [r2, #0]
 8002f6c:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 8002f6e:	f04f 0200 	mov.w	r2, #0
 8002f72:	f04f 0300 	mov.w	r3, #0
 8002f76:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 8002f7a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f008 fc8c 	bl	800b89c <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 8002f84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f86:	17da      	asrs	r2, r3, #31
 8002f88:	61bb      	str	r3, [r7, #24]
 8002f8a:	61fa      	str	r2, [r7, #28]
 8002f8c:	f04f 0200 	mov.w	r2, #0
 8002f90:	f04f 0300 	mov.w	r3, #0
 8002f94:	69b9      	ldr	r1, [r7, #24]
 8002f96:	000b      	movs	r3, r1
 8002f98:	2200      	movs	r2, #0
 8002f9a:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 8002f9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	461c      	mov	r4, r3
 8002fa4:	4615      	mov	r5, r2
 8002fa6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8002faa:	1911      	adds	r1, r2, r4
 8002fac:	60b9      	str	r1, [r7, #8]
 8002fae:	416b      	adcs	r3, r5
 8002fb0:	60fb      	str	r3, [r7, #12]
 8002fb2:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8002fb6:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 8002fba:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8002fbe:	4602      	mov	r2, r0
 8002fc0:	460b      	mov	r3, r1
 8002fc2:	f04f 0400 	mov.w	r4, #0
 8002fc6:	f04f 0500 	mov.w	r5, #0
 8002fca:	015d      	lsls	r5, r3, #5
 8002fcc:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8002fd0:	0154      	lsls	r4, r2, #5
 8002fd2:	4622      	mov	r2, r4
 8002fd4:	462b      	mov	r3, r5
 8002fd6:	ebb2 0800 	subs.w	r8, r2, r0
 8002fda:	eb63 0901 	sbc.w	r9, r3, r1
 8002fde:	f04f 0200 	mov.w	r2, #0
 8002fe2:	f04f 0300 	mov.w	r3, #0
 8002fe6:	ea4f 2349 	mov.w	r3, r9, lsl #9
 8002fea:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 8002fee:	ea4f 2248 	mov.w	r2, r8, lsl #9
 8002ff2:	4690      	mov	r8, r2
 8002ff4:	4699      	mov	r9, r3
 8002ff6:	eb18 0a00 	adds.w	sl, r8, r0
 8002ffa:	eb49 0b01 	adc.w	fp, r9, r1
 8002ffe:	f04f 0200 	mov.w	r2, #0
 8003002:	f04f 0300 	mov.w	r3, #0
 8003006:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800300a:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800300e:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003012:	ebb2 040a 	subs.w	r4, r2, sl
 8003016:	603c      	str	r4, [r7, #0]
 8003018:	eb63 030b 	sbc.w	r3, r3, fp
 800301c:	607b      	str	r3, [r7, #4]
 800301e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003022:	4623      	mov	r3, r4
 8003024:	181b      	adds	r3, r3, r0
 8003026:	613b      	str	r3, [r7, #16]
 8003028:	462b      	mov	r3, r5
 800302a:	eb41 0303 	adc.w	r3, r1, r3
 800302e:	617b      	str	r3, [r7, #20]
 8003030:	6a3a      	ldr	r2, [r7, #32]
 8003032:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003036:	f7ff ff3f 	bl	8002eb8 <UTILS_NanosecondsToTimespec>

    return 0;
 800303a:	2300      	movs	r3, #0
 800303c:	4618      	mov	r0, r3
 800303e:	3738      	adds	r7, #56	@ 0x38
 8003040:	46bd      	mov	sp, r7
 8003042:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08003048 <wrap_phase>:

// CMSIS-specific constants
#define ARM_PI_F32 3.14159265358979323846f

// Internal helper functions
static float32_t wrap_phase(float32_t phase) {
 8003048:	b480      	push	{r7}
 800304a:	b085      	sub	sp, #20
 800304c:	af00      	add	r7, sp, #0
 800304e:	ed87 0a01 	vstr	s0, [r7, #4]
    phase = fabsf(phase);
 8003052:	edd7 7a01 	vldr	s15, [r7, #4]
 8003056:	eef0 7ae7 	vabs.f32	s15, s15
 800305a:	edc7 7a01 	vstr	s15, [r7, #4]
    float32_t two_pi = 2.0f * ARM_PI_F32;
 800305e:	4b17      	ldr	r3, [pc, #92]	@ (80030bc <wrap_phase+0x74>)
 8003060:	60fb      	str	r3, [r7, #12]
    while (phase > two_pi) {
 8003062:	e007      	b.n	8003074 <wrap_phase+0x2c>
        phase -= two_pi;
 8003064:	ed97 7a01 	vldr	s14, [r7, #4]
 8003068:	edd7 7a03 	vldr	s15, [r7, #12]
 800306c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003070:	edc7 7a01 	vstr	s15, [r7, #4]
    while (phase > two_pi) {
 8003074:	ed97 7a01 	vldr	s14, [r7, #4]
 8003078:	edd7 7a03 	vldr	s15, [r7, #12]
 800307c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003080:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003084:	dcee      	bgt.n	8003064 <wrap_phase+0x1c>
    }
    while (phase < 0.0f) {
 8003086:	e007      	b.n	8003098 <wrap_phase+0x50>
        phase += two_pi;
 8003088:	ed97 7a01 	vldr	s14, [r7, #4]
 800308c:	edd7 7a03 	vldr	s15, [r7, #12]
 8003090:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003094:	edc7 7a01 	vstr	s15, [r7, #4]
    while (phase < 0.0f) {
 8003098:	edd7 7a01 	vldr	s15, [r7, #4]
 800309c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80030a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030a4:	d4f0      	bmi.n	8003088 <wrap_phase+0x40>
    }
    return phase;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	ee07 3a90 	vmov	s15, r3
}
 80030ac:	eeb0 0a67 	vmov.f32	s0, s15
 80030b0:	3714      	adds	r7, #20
 80030b2:	46bd      	mov	sp, r7
 80030b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b8:	4770      	bx	lr
 80030ba:	bf00      	nop
 80030bc:	40c90fdb 	.word	0x40c90fdb

080030c0 <limit_setpoint>:

// Limit output to specified setpoint range
static float32_t limit_setpoint(float32_t value, float32_t min_setpoint, float32_t max_setpoint) {
 80030c0:	b480      	push	{r7}
 80030c2:	b085      	sub	sp, #20
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	ed87 0a03 	vstr	s0, [r7, #12]
 80030ca:	edc7 0a02 	vstr	s1, [r7, #8]
 80030ce:	ed87 1a01 	vstr	s2, [r7, #4]
    if (value < min_setpoint) return min_setpoint;
 80030d2:	ed97 7a03 	vldr	s14, [r7, #12]
 80030d6:	edd7 7a02 	vldr	s15, [r7, #8]
 80030da:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80030de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030e2:	d501      	bpl.n	80030e8 <limit_setpoint+0x28>
 80030e4:	68bb      	ldr	r3, [r7, #8]
 80030e6:	e00b      	b.n	8003100 <limit_setpoint+0x40>
    if (value > max_setpoint) return max_setpoint;
 80030e8:	ed97 7a03 	vldr	s14, [r7, #12]
 80030ec:	edd7 7a01 	vldr	s15, [r7, #4]
 80030f0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80030f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030f8:	dd01      	ble.n	80030fe <limit_setpoint+0x3e>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	e000      	b.n	8003100 <limit_setpoint+0x40>
    return value;
 80030fe:	68fb      	ldr	r3, [r7, #12]
}
 8003100:	ee07 3a90 	vmov	s15, r3
 8003104:	eeb0 0a67 	vmov.f32	s0, s15
 8003108:	3714      	adds	r7, #20
 800310a:	46bd      	mov	sp, r7
 800310c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003110:	4770      	bx	lr
	...

08003114 <SIGNAL_init>:

// Initialization function
void SIGNAL_init(SignalGenerator* sg, SignalType type) {
 8003114:	b480      	push	{r7}
 8003116:	b083      	sub	sp, #12
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
 800311c:	460b      	mov	r3, r1
 800311e:	70fb      	strb	r3, [r7, #3]
    // Reset all parameters
    sg->type = type;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	78fa      	ldrb	r2, [r7, #3]
 8003124:	701a      	strb	r2, [r3, #0]
    sg->amplitude = 1.0f;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800312c:	605a      	str	r2, [r3, #4]
    sg->frequency = 1.0f;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8003134:	609a      	str	r2, [r3, #8]
    sg->phase = 0.0f;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	f04f 0200 	mov.w	r2, #0
 800313c:	60da      	str	r2, [r3, #12]
    sg->offset = 0.0f;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	f04f 0200 	mov.w	r2, #0
 8003144:	611a      	str	r2, [r3, #16]
    sg->current_phase = 0.0f;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	f04f 0200 	mov.w	r2, #0
 800314c:	635a      	str	r2, [r3, #52]	@ 0x34
    sg->time_elapsed = 0.0f;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	f04f 0200 	mov.w	r2, #0
 8003154:	639a      	str	r2, [r3, #56]	@ 0x38
    sg->min_setpoint = -1.0f;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	4a1b      	ldr	r2, [pc, #108]	@ (80031c8 <SIGNAL_init+0xb4>)
 800315a:	63da      	str	r2, [r3, #60]	@ 0x3c
    sg->max_setpoint = 1.0f;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8003162:	641a      	str	r2, [r3, #64]	@ 0x40

    // Type-specific initializations
    switch (type) {
 8003164:	78fb      	ldrb	r3, [r7, #3]
 8003166:	2b03      	cmp	r3, #3
 8003168:	d828      	bhi.n	80031bc <SIGNAL_init+0xa8>
 800316a:	a201      	add	r2, pc, #4	@ (adr r2, 8003170 <SIGNAL_init+0x5c>)
 800316c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003170:	080031bb 	.word	0x080031bb
 8003174:	08003181 	.word	0x08003181
 8003178:	0800319f 	.word	0x0800319f
 800317c:	080031a9 	.word	0x080031a9
        case SIGNAL_SINE:
            break;
        case SIGNAL_CHIRP:
            sg->chirp_type = CHIRP_LINEAR;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2200      	movs	r2, #0
 8003184:	751a      	strb	r2, [r3, #20]
            sg->f_start = 1.0f;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800318c:	619a      	str	r2, [r3, #24]
            sg->f_end = 10.0f;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	4a0e      	ldr	r2, [pc, #56]	@ (80031cc <SIGNAL_init+0xb8>)
 8003192:	61da      	str	r2, [r3, #28]
            sg->duration = 1.0f;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800319a:	621a      	str	r2, [r3, #32]
            break;
 800319c:	e00e      	b.n	80031bc <SIGNAL_init+0xa8>
        case SIGNAL_SQUARE:
            sg->duty_cycle = 0.5f;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 80031a4:	629a      	str	r2, [r3, #40]	@ 0x28
            break;
 80031a6:	e009      	b.n	80031bc <SIGNAL_init+0xa8>
        case SIGNAL_RAMP:
            sg->ramp_start = 0.0f;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	f04f 0200 	mov.w	r2, #0
 80031ae:	62da      	str	r2, [r3, #44]	@ 0x2c
            sg->ramp_end = 1.0f;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80031b6:	631a      	str	r2, [r3, #48]	@ 0x30
            break;
 80031b8:	e000      	b.n	80031bc <SIGNAL_init+0xa8>
            break;
 80031ba:	bf00      	nop
    }
}
 80031bc:	bf00      	nop
 80031be:	370c      	adds	r7, #12
 80031c0:	46bd      	mov	sp, r7
 80031c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c6:	4770      	bx	lr
 80031c8:	bf800000 	.word	0xbf800000
 80031cc:	41200000 	.word	0x41200000

080031d0 <SIGNAL_config_sine>:
                        float32_t amplitude,
                        float32_t frequency,
                        float32_t phase,
                        float32_t offset,
                        float32_t min_setpoint,
                        float32_t max_setpoint) {
 80031d0:	b480      	push	{r7}
 80031d2:	b089      	sub	sp, #36	@ 0x24
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	61f8      	str	r0, [r7, #28]
 80031d8:	ed87 0a06 	vstr	s0, [r7, #24]
 80031dc:	edc7 0a05 	vstr	s1, [r7, #20]
 80031e0:	ed87 1a04 	vstr	s2, [r7, #16]
 80031e4:	edc7 1a03 	vstr	s3, [r7, #12]
 80031e8:	ed87 2a02 	vstr	s4, [r7, #8]
 80031ec:	edc7 2a01 	vstr	s5, [r7, #4]
    sg->type = SIGNAL_SINE;
 80031f0:	69fb      	ldr	r3, [r7, #28]
 80031f2:	2200      	movs	r2, #0
 80031f4:	701a      	strb	r2, [r3, #0]
    sg->amplitude = amplitude;
 80031f6:	69fb      	ldr	r3, [r7, #28]
 80031f8:	69ba      	ldr	r2, [r7, #24]
 80031fa:	605a      	str	r2, [r3, #4]
    sg->frequency = frequency;
 80031fc:	69fb      	ldr	r3, [r7, #28]
 80031fe:	697a      	ldr	r2, [r7, #20]
 8003200:	609a      	str	r2, [r3, #8]
    sg->phase = phase;
 8003202:	69fb      	ldr	r3, [r7, #28]
 8003204:	693a      	ldr	r2, [r7, #16]
 8003206:	60da      	str	r2, [r3, #12]
    sg->offset = offset;
 8003208:	69fb      	ldr	r3, [r7, #28]
 800320a:	68fa      	ldr	r2, [r7, #12]
 800320c:	611a      	str	r2, [r3, #16]
    sg->min_setpoint = min_setpoint;
 800320e:	69fb      	ldr	r3, [r7, #28]
 8003210:	68ba      	ldr	r2, [r7, #8]
 8003212:	63da      	str	r2, [r3, #60]	@ 0x3c
    sg->max_setpoint = max_setpoint;
 8003214:	69fb      	ldr	r3, [r7, #28]
 8003216:	687a      	ldr	r2, [r7, #4]
 8003218:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800321a:	bf00      	nop
 800321c:	3724      	adds	r7, #36	@ 0x24
 800321e:	46bd      	mov	sp, r7
 8003220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003224:	4770      	bx	lr

08003226 <SIGNAL_config_chirp>:
                         float32_t f_start,
                         float32_t f_end,
                         float32_t duration,
                         ChirpType chirp_type,
                         float32_t min_setpoint,
                         float32_t max_setpoint) {
 8003226:	b480      	push	{r7}
 8003228:	b089      	sub	sp, #36	@ 0x24
 800322a:	af00      	add	r7, sp, #0
 800322c:	61f8      	str	r0, [r7, #28]
 800322e:	ed87 0a06 	vstr	s0, [r7, #24]
 8003232:	edc7 0a05 	vstr	s1, [r7, #20]
 8003236:	ed87 1a04 	vstr	s2, [r7, #16]
 800323a:	edc7 1a03 	vstr	s3, [r7, #12]
 800323e:	460b      	mov	r3, r1
 8003240:	ed87 2a01 	vstr	s4, [r7, #4]
 8003244:	edc7 2a00 	vstr	s5, [r7]
 8003248:	72fb      	strb	r3, [r7, #11]
    sg->type = SIGNAL_CHIRP;
 800324a:	69fb      	ldr	r3, [r7, #28]
 800324c:	2201      	movs	r2, #1
 800324e:	701a      	strb	r2, [r3, #0]
    sg->amplitude = amplitude;
 8003250:	69fb      	ldr	r3, [r7, #28]
 8003252:	69ba      	ldr	r2, [r7, #24]
 8003254:	605a      	str	r2, [r3, #4]
    sg->f_start = f_start;
 8003256:	69fb      	ldr	r3, [r7, #28]
 8003258:	697a      	ldr	r2, [r7, #20]
 800325a:	619a      	str	r2, [r3, #24]
    sg->f_end = f_end;
 800325c:	69fb      	ldr	r3, [r7, #28]
 800325e:	693a      	ldr	r2, [r7, #16]
 8003260:	61da      	str	r2, [r3, #28]
    sg->duration = duration;
 8003262:	69fb      	ldr	r3, [r7, #28]
 8003264:	68fa      	ldr	r2, [r7, #12]
 8003266:	621a      	str	r2, [r3, #32]
    sg->chirp_type = chirp_type;
 8003268:	69fb      	ldr	r3, [r7, #28]
 800326a:	7afa      	ldrb	r2, [r7, #11]
 800326c:	751a      	strb	r2, [r3, #20]
    sg->t = 0.0f;
 800326e:	69fb      	ldr	r3, [r7, #28]
 8003270:	f04f 0200 	mov.w	r2, #0
 8003274:	625a      	str	r2, [r3, #36]	@ 0x24
    sg->min_setpoint = min_setpoint;
 8003276:	69fb      	ldr	r3, [r7, #28]
 8003278:	687a      	ldr	r2, [r7, #4]
 800327a:	63da      	str	r2, [r3, #60]	@ 0x3c
    sg->max_setpoint = max_setpoint;
 800327c:	69fb      	ldr	r3, [r7, #28]
 800327e:	683a      	ldr	r2, [r7, #0]
 8003280:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8003282:	bf00      	nop
 8003284:	3724      	adds	r7, #36	@ 0x24
 8003286:	46bd      	mov	sp, r7
 8003288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328c:	4770      	bx	lr

0800328e <SIGNAL_config_square>:
                          float32_t frequency,
                          float32_t duty_cycle,
                          float32_t phase,
                          float32_t offset,
                          float32_t min_setpoint,
                          float32_t max_setpoint) {
 800328e:	b480      	push	{r7}
 8003290:	b089      	sub	sp, #36	@ 0x24
 8003292:	af00      	add	r7, sp, #0
 8003294:	61f8      	str	r0, [r7, #28]
 8003296:	ed87 0a06 	vstr	s0, [r7, #24]
 800329a:	edc7 0a05 	vstr	s1, [r7, #20]
 800329e:	ed87 1a04 	vstr	s2, [r7, #16]
 80032a2:	edc7 1a03 	vstr	s3, [r7, #12]
 80032a6:	ed87 2a02 	vstr	s4, [r7, #8]
 80032aa:	edc7 2a01 	vstr	s5, [r7, #4]
 80032ae:	ed87 3a00 	vstr	s6, [r7]
    sg->type = SIGNAL_SQUARE;
 80032b2:	69fb      	ldr	r3, [r7, #28]
 80032b4:	2202      	movs	r2, #2
 80032b6:	701a      	strb	r2, [r3, #0]
    sg->amplitude = amplitude;
 80032b8:	69fb      	ldr	r3, [r7, #28]
 80032ba:	69ba      	ldr	r2, [r7, #24]
 80032bc:	605a      	str	r2, [r3, #4]
    sg->frequency = frequency;
 80032be:	69fb      	ldr	r3, [r7, #28]
 80032c0:	697a      	ldr	r2, [r7, #20]
 80032c2:	609a      	str	r2, [r3, #8]
    sg->duty_cycle = duty_cycle;
 80032c4:	69fb      	ldr	r3, [r7, #28]
 80032c6:	693a      	ldr	r2, [r7, #16]
 80032c8:	629a      	str	r2, [r3, #40]	@ 0x28
    sg->phase = phase;
 80032ca:	69fb      	ldr	r3, [r7, #28]
 80032cc:	68fa      	ldr	r2, [r7, #12]
 80032ce:	60da      	str	r2, [r3, #12]
    sg->offset = offset;
 80032d0:	69fb      	ldr	r3, [r7, #28]
 80032d2:	68ba      	ldr	r2, [r7, #8]
 80032d4:	611a      	str	r2, [r3, #16]
    sg->min_setpoint = min_setpoint;
 80032d6:	69fb      	ldr	r3, [r7, #28]
 80032d8:	687a      	ldr	r2, [r7, #4]
 80032da:	63da      	str	r2, [r3, #60]	@ 0x3c
    sg->max_setpoint = max_setpoint;
 80032dc:	69fb      	ldr	r3, [r7, #28]
 80032de:	683a      	ldr	r2, [r7, #0]
 80032e0:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80032e2:	bf00      	nop
 80032e4:	3724      	adds	r7, #36	@ 0x24
 80032e6:	46bd      	mov	sp, r7
 80032e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ec:	4770      	bx	lr

080032ee <SIGNAL_config_ramp>:
                        float32_t ramp_start,
                        float32_t ramp_end,
                        float32_t phase,
                        float32_t offset,
                        float32_t min_setpoint,
                        float32_t max_setpoint) {
 80032ee:	b480      	push	{r7}
 80032f0:	b08b      	sub	sp, #44	@ 0x2c
 80032f2:	af00      	add	r7, sp, #0
 80032f4:	6278      	str	r0, [r7, #36]	@ 0x24
 80032f6:	ed87 0a08 	vstr	s0, [r7, #32]
 80032fa:	edc7 0a07 	vstr	s1, [r7, #28]
 80032fe:	ed87 1a06 	vstr	s2, [r7, #24]
 8003302:	edc7 1a05 	vstr	s3, [r7, #20]
 8003306:	ed87 2a04 	vstr	s4, [r7, #16]
 800330a:	edc7 2a03 	vstr	s5, [r7, #12]
 800330e:	ed87 3a02 	vstr	s6, [r7, #8]
 8003312:	edc7 3a01 	vstr	s7, [r7, #4]
    sg->type = SIGNAL_RAMP;
 8003316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003318:	2203      	movs	r2, #3
 800331a:	701a      	strb	r2, [r3, #0]
    sg->amplitude = amplitude;
 800331c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800331e:	6a3a      	ldr	r2, [r7, #32]
 8003320:	605a      	str	r2, [r3, #4]
    sg->frequency = frequency;
 8003322:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003324:	69fa      	ldr	r2, [r7, #28]
 8003326:	609a      	str	r2, [r3, #8]
    sg->ramp_start = ramp_start;
 8003328:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800332a:	69ba      	ldr	r2, [r7, #24]
 800332c:	62da      	str	r2, [r3, #44]	@ 0x2c
    sg->ramp_end = ramp_end;
 800332e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003330:	697a      	ldr	r2, [r7, #20]
 8003332:	631a      	str	r2, [r3, #48]	@ 0x30
    sg->phase = phase;
 8003334:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003336:	693a      	ldr	r2, [r7, #16]
 8003338:	60da      	str	r2, [r3, #12]
    sg->offset = offset;
 800333a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800333c:	68fa      	ldr	r2, [r7, #12]
 800333e:	611a      	str	r2, [r3, #16]
    sg->min_setpoint = min_setpoint;
 8003340:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003342:	68ba      	ldr	r2, [r7, #8]
 8003344:	63da      	str	r2, [r3, #60]	@ 0x3c
    sg->max_setpoint = max_setpoint;
 8003346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003348:	687a      	ldr	r2, [r7, #4]
 800334a:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800334c:	bf00      	nop
 800334e:	372c      	adds	r7, #44	@ 0x2c
 8003350:	46bd      	mov	sp, r7
 8003352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003356:	4770      	bx	lr

08003358 <SIGNAL_generate>:

// Signal generation function
float32_t SIGNAL_generate(SignalGenerator* sg, float32_t sample_time) {
 8003358:	b580      	push	{r7, lr}
 800335a:	ed2d 8b02 	vpush	{d8}
 800335e:	b08c      	sub	sp, #48	@ 0x30
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
 8003364:	ed87 0a00 	vstr	s0, [r7]
    float32_t output = 0.0f;
 8003368:	f04f 0300 	mov.w	r3, #0
 800336c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    float32_t two_pi = 2.0f * ARM_PI_F32;
 800336e:	4bb2      	ldr	r3, [pc, #712]	@ (8003638 <SIGNAL_generate+0x2e0>)
 8003370:	627b      	str	r3, [r7, #36]	@ 0x24

    // Update phase and time
    sg->current_phase = wrap_phase(sg->current_phase + two_pi * sg->frequency * sample_time);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	edd3 6a02 	vldr	s13, [r3, #8]
 800337e:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003382:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003386:	edd7 7a00 	vldr	s15, [r7]
 800338a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800338e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003392:	eeb0 0a67 	vmov.f32	s0, s15
 8003396:	f7ff fe57 	bl	8003048 <wrap_phase>
 800339a:	eef0 7a40 	vmov.f32	s15, s0
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
    sg->time_elapsed += sample_time;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 80033aa:	edd7 7a00 	vldr	s15, [r7]
 80033ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38

    switch (sg->type) {
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	781b      	ldrb	r3, [r3, #0]
 80033bc:	2b03      	cmp	r3, #3
 80033be:	f200 8123 	bhi.w	8003608 <SIGNAL_generate+0x2b0>
 80033c2:	a201      	add	r2, pc, #4	@ (adr r2, 80033c8 <SIGNAL_generate+0x70>)
 80033c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033c8:	080033d9 	.word	0x080033d9
 80033cc:	08003417 	.word	0x08003417
 80033d0:	08003531 	.word	0x08003531
 80033d4:	0800359d 	.word	0x0800359d
        case SIGNAL_SINE: {
            // Sine wave generation
            float32_t phase_input = sg->current_phase + sg->phase;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	edd3 7a03 	vldr	s15, [r3, #12]
 80033e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033e8:	edc7 7a02 	vstr	s15, [r7, #8]
            output = arm_sin_f32(phase_input);
 80033ec:	ed97 0a02 	vldr	s0, [r7, #8]
 80033f0:	f006 fde6 	bl	8009fc0 <arm_sin_f32>
 80033f4:	ed87 0a0b 	vstr	s0, [r7, #44]	@ 0x2c
            output = sg->amplitude * output + sg->offset;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	ed93 7a01 	vldr	s14, [r3, #4]
 80033fe:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8003402:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	edd3 7a04 	vldr	s15, [r3, #16]
 800340c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003410:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
            break;
 8003414:	e0f8      	b.n	8003608 <SIGNAL_generate+0x2b0>
        }

        case SIGNAL_CHIRP: {
            // Chirp signal generation
            float32_t inst_freq;
            float32_t progress = sg->time_elapsed / sg->duration;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	edd3 6a0e 	vldr	s13, [r3, #56]	@ 0x38
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	ed93 7a08 	vldr	s14, [r3, #32]
 8003422:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003426:	edc7 7a04 	vstr	s15, [r7, #16]

            // Calculate instantaneous frequency based on chirp type
            switch (sg->chirp_type) {
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	7d1b      	ldrb	r3, [r3, #20]
 800342e:	2b02      	cmp	r3, #2
 8003430:	d032      	beq.n	8003498 <SIGNAL_generate+0x140>
 8003432:	2b02      	cmp	r3, #2
 8003434:	dc48      	bgt.n	80034c8 <SIGNAL_generate+0x170>
 8003436:	2b00      	cmp	r3, #0
 8003438:	d002      	beq.n	8003440 <SIGNAL_generate+0xe8>
 800343a:	2b01      	cmp	r3, #1
 800343c:	d014      	beq.n	8003468 <SIGNAL_generate+0x110>
 800343e:	e043      	b.n	80034c8 <SIGNAL_generate+0x170>
                case CHIRP_LINEAR:
                    // Linear frequency sweep
                    inst_freq = sg->f_start + (sg->f_end - sg->f_start) * progress;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	ed93 7a06 	vldr	s14, [r3, #24]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	edd3 6a07 	vldr	s13, [r3, #28]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	edd3 7a06 	vldr	s15, [r3, #24]
 8003452:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003456:	edd7 7a04 	vldr	s15, [r7, #16]
 800345a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800345e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003462:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
                    break;
 8003466:	e02f      	b.n	80034c8 <SIGNAL_generate+0x170>
                case CHIRP_LOGARITHMIC:
                    // Logarithmic frequency sweep
                    inst_freq = sg->f_start * powf(sg->f_end / sg->f_start, progress);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	ed93 8a06 	vldr	s16, [r3, #24]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	ed93 7a07 	vldr	s14, [r3, #28]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	edd3 7a06 	vldr	s15, [r3, #24]
 800347a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800347e:	edd7 0a04 	vldr	s1, [r7, #16]
 8003482:	eeb0 0a66 	vmov.f32	s0, s13
 8003486:	f018 fe91 	bl	801c1ac <powf>
 800348a:	eef0 7a40 	vmov.f32	s15, s0
 800348e:	ee68 7a27 	vmul.f32	s15, s16, s15
 8003492:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
                    break;
 8003496:	e017      	b.n	80034c8 <SIGNAL_generate+0x170>
                case CHIRP_QUADRATIC:
                    // Quadratic frequency sweep
                    inst_freq = sg->f_start + (sg->f_end - sg->f_start) * progress * progress;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	ed93 7a06 	vldr	s14, [r3, #24]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	edd3 6a07 	vldr	s13, [r3, #28]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	edd3 7a06 	vldr	s15, [r3, #24]
 80034aa:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80034ae:	edd7 7a04 	vldr	s15, [r7, #16]
 80034b2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80034b6:	edd7 7a04 	vldr	s15, [r7, #16]
 80034ba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80034be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034c2:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
                    break;
 80034c6:	bf00      	nop
            }

            // Integrate instantaneous frequency
            float32_t chirp_phase = two_pi * inst_freq * sg->time_elapsed;
 80034c8:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80034cc:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80034d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 80034da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034de:	edc7 7a03 	vstr	s15, [r7, #12]
            output = arm_sin_f32(chirp_phase + sg->phase);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	ed93 7a03 	vldr	s14, [r3, #12]
 80034e8:	edd7 7a03 	vldr	s15, [r7, #12]
 80034ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034f0:	eeb0 0a67 	vmov.f32	s0, s15
 80034f4:	f006 fd64 	bl	8009fc0 <arm_sin_f32>
 80034f8:	ed87 0a0b 	vstr	s0, [r7, #44]	@ 0x2c
            output *= sg->amplitude;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	edd3 7a01 	vldr	s15, [r3, #4]
 8003502:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8003506:	ee67 7a27 	vmul.f32	s15, s14, s15
 800350a:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

            // Reset if duration exceeded
            if (sg->time_elapsed >= sg->duration) {
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	edd3 7a08 	vldr	s15, [r3, #32]
 800351a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800351e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003522:	da00      	bge.n	8003526 <SIGNAL_generate+0x1ce>
                sg->time_elapsed = 0.0f;
            }
            break;
 8003524:	e070      	b.n	8003608 <SIGNAL_generate+0x2b0>
                sg->time_elapsed = 0.0f;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	f04f 0200 	mov.w	r2, #0
 800352c:	639a      	str	r2, [r3, #56]	@ 0x38
            break;
 800352e:	e06b      	b.n	8003608 <SIGNAL_generate+0x2b0>
        }

        case SIGNAL_SQUARE: {
            // Square wave generation
            float32_t phase_normalized = fmodf(sg->current_phase + sg->phase, two_pi);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	edd3 7a03 	vldr	s15, [r3, #12]
 800353c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003540:	edd7 0a09 	vldr	s1, [r7, #36]	@ 0x24
 8003544:	eeb0 0a67 	vmov.f32	s0, s15
 8003548:	f018 fe10 	bl	801c16c <fmodf>
 800354c:	ed87 0a06 	vstr	s0, [r7, #24]

            float32_t threshold = two_pi * sg->duty_cycle;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8003556:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800355a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800355e:	edc7 7a05 	vstr	s15, [r7, #20]
            output = (phase_normalized < threshold) ?
                     sg->amplitude + sg->offset :
 8003562:	ed97 7a06 	vldr	s14, [r7, #24]
 8003566:	edd7 7a05 	vldr	s15, [r7, #20]
 800356a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800356e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003572:	d508      	bpl.n	8003586 <SIGNAL_generate+0x22e>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	ed93 7a01 	vldr	s14, [r3, #4]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	edd3 7a04 	vldr	s15, [r3, #16]
 8003580:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003584:	e007      	b.n	8003596 <SIGNAL_generate+0x23e>
                     -sg->amplitude + sg->offset;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	ed93 7a04 	vldr	s14, [r3, #16]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	edd3 7a01 	vldr	s15, [r3, #4]
                     sg->amplitude + sg->offset :
 8003592:	ee77 7a67 	vsub.f32	s15, s14, s15
            output = (phase_normalized < threshold) ?
 8003596:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
            break;
 800359a:	e035      	b.n	8003608 <SIGNAL_generate+0x2b0>
        }

        case SIGNAL_RAMP: {
            // Ramp signal generation
            float32_t phase_normalized = fmodf(sg->current_phase + sg->phase, two_pi);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	edd3 7a03 	vldr	s15, [r3, #12]
 80035a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80035ac:	edd7 0a09 	vldr	s1, [r7, #36]	@ 0x24
 80035b0:	eeb0 0a67 	vmov.f32	s0, s15
 80035b4:	f018 fdda 	bl	801c16c <fmodf>
 80035b8:	ed87 0a08 	vstr	s0, [r7, #32]
            float32_t ramp_ratio = phase_normalized / two_pi;
 80035bc:	edd7 6a08 	vldr	s13, [r7, #32]
 80035c0:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80035c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80035c8:	edc7 7a07 	vstr	s15, [r7, #28]

            output = sg->ramp_start +
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
                     (sg->ramp_end - sg->ramp_start) * ramp_ratio * sg->amplitude +
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 80035de:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80035e2:	edd7 7a07 	vldr	s15, [r7, #28]
 80035e6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	edd3 7a01 	vldr	s15, [r3, #4]
 80035f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
            output = sg->ramp_start +
 80035f4:	ee37 7a27 	vadd.f32	s14, s14, s15
                     sg->offset;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	edd3 7a04 	vldr	s15, [r3, #16]
            output = sg->ramp_start +
 80035fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003602:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
            break;
 8003606:	bf00      	nop
        }
    }

    // Limit output to specified setpoint range
    return limit_setpoint(output, sg->min_setpoint, sg->max_setpoint);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 8003614:	eeb0 1a47 	vmov.f32	s2, s14
 8003618:	eef0 0a67 	vmov.f32	s1, s15
 800361c:	ed97 0a0b 	vldr	s0, [r7, #44]	@ 0x2c
 8003620:	f7ff fd4e 	bl	80030c0 <limit_setpoint>
 8003624:	eef0 7a40 	vmov.f32	s15, s0
}
 8003628:	eeb0 0a67 	vmov.f32	s0, s15
 800362c:	3730      	adds	r7, #48	@ 0x30
 800362e:	46bd      	mov	sp, r7
 8003630:	ecbd 8b02 	vpop	{d8}
 8003634:	bd80      	pop	{r7, pc}
 8003636:	bf00      	nop
 8003638:	40c90fdb 	.word	0x40c90fdb

0800363c <SKID_init>:
#include "skid_kinematic.h"
#include <math.h>

void SKID_init(SKID_KINEMATIC* skid,
               float wheel_radius, float wheel_distance,
               float max_velocity, float max_angular_vel) {
 800363c:	b480      	push	{r7}
 800363e:	b087      	sub	sp, #28
 8003640:	af00      	add	r7, sp, #0
 8003642:	6178      	str	r0, [r7, #20]
 8003644:	ed87 0a04 	vstr	s0, [r7, #16]
 8003648:	edc7 0a03 	vstr	s1, [r7, #12]
 800364c:	ed87 1a02 	vstr	s2, [r7, #8]
 8003650:	edc7 1a01 	vstr	s3, [r7, #4]
    skid->wheel_radius = wheel_radius;
 8003654:	697b      	ldr	r3, [r7, #20]
 8003656:	693a      	ldr	r2, [r7, #16]
 8003658:	601a      	str	r2, [r3, #0]
    skid->wheel_distance = wheel_distance;
 800365a:	697b      	ldr	r3, [r7, #20]
 800365c:	68fa      	ldr	r2, [r7, #12]
 800365e:	605a      	str	r2, [r3, #4]
    skid->max_velocity = max_velocity;
 8003660:	697b      	ldr	r3, [r7, #20]
 8003662:	68ba      	ldr	r2, [r7, #8]
 8003664:	609a      	str	r2, [r3, #8]
    skid->max_angular_vel = max_angular_vel;
 8003666:	697b      	ldr	r3, [r7, #20]
 8003668:	687a      	ldr	r2, [r7, #4]
 800366a:	60da      	str	r2, [r3, #12]
    skid->left_cmd = 0.0f;
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	f04f 0200 	mov.w	r2, #0
 8003672:	611a      	str	r2, [r3, #16]
    skid->right_cmd = 0.0f;
 8003674:	697b      	ldr	r3, [r7, #20]
 8003676:	f04f 0200 	mov.w	r2, #0
 800367a:	615a      	str	r2, [r3, #20]

    // Initialize pose
    skid->x = 0.0f;
 800367c:	697b      	ldr	r3, [r7, #20]
 800367e:	f04f 0200 	mov.w	r2, #0
 8003682:	619a      	str	r2, [r3, #24]
    skid->y = 0.0f;
 8003684:	697b      	ldr	r3, [r7, #20]
 8003686:	f04f 0200 	mov.w	r2, #0
 800368a:	61da      	str	r2, [r3, #28]
    skid->theta = 0.0f;
 800368c:	697b      	ldr	r3, [r7, #20]
 800368e:	f04f 0200 	mov.w	r2, #0
 8003692:	621a      	str	r2, [r3, #32]
    skid->last_update_time = 0;
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	2200      	movs	r2, #0
 8003698:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800369a:	bf00      	nop
 800369c:	371c      	adds	r7, #28
 800369e:	46bd      	mov	sp, r7
 80036a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a4:	4770      	bx	lr

080036a6 <SKID_inverse_kinematic>:

void SKID_inverse_kinematic(SKID_KINEMATIC* skid, float linear_vel, float angular_vel) {
 80036a6:	b480      	push	{r7}
 80036a8:	b089      	sub	sp, #36	@ 0x24
 80036aa:	af00      	add	r7, sp, #0
 80036ac:	60f8      	str	r0, [r7, #12]
 80036ae:	ed87 0a02 	vstr	s0, [r7, #8]
 80036b2:	edc7 0a01 	vstr	s1, [r7, #4]
    // Clamp input velocities to maximum values
    if (linear_vel > skid->max_velocity) {
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	edd3 7a02 	vldr	s15, [r3, #8]
 80036bc:	ed97 7a02 	vldr	s14, [r7, #8]
 80036c0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80036c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036c8:	dd03      	ble.n	80036d2 <SKID_inverse_kinematic+0x2c>
        linear_vel = skid->max_velocity;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	689b      	ldr	r3, [r3, #8]
 80036ce:	60bb      	str	r3, [r7, #8]
 80036d0:	e012      	b.n	80036f8 <SKID_inverse_kinematic+0x52>
    } else if (linear_vel < -skid->max_velocity) {
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	edd3 7a02 	vldr	s15, [r3, #8]
 80036d8:	eef1 7a67 	vneg.f32	s15, s15
 80036dc:	ed97 7a02 	vldr	s14, [r7, #8]
 80036e0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80036e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036e8:	d506      	bpl.n	80036f8 <SKID_inverse_kinematic+0x52>
        linear_vel = -skid->max_velocity;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	edd3 7a02 	vldr	s15, [r3, #8]
 80036f0:	eef1 7a67 	vneg.f32	s15, s15
 80036f4:	edc7 7a02 	vstr	s15, [r7, #8]
    }

    if (angular_vel > skid->max_angular_vel) {
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	edd3 7a03 	vldr	s15, [r3, #12]
 80036fe:	ed97 7a01 	vldr	s14, [r7, #4]
 8003702:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003706:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800370a:	dd03      	ble.n	8003714 <SKID_inverse_kinematic+0x6e>
        angular_vel = skid->max_angular_vel;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	68db      	ldr	r3, [r3, #12]
 8003710:	607b      	str	r3, [r7, #4]
 8003712:	e012      	b.n	800373a <SKID_inverse_kinematic+0x94>
    } else if (angular_vel < -skid->max_angular_vel) {
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	edd3 7a03 	vldr	s15, [r3, #12]
 800371a:	eef1 7a67 	vneg.f32	s15, s15
 800371e:	ed97 7a01 	vldr	s14, [r7, #4]
 8003722:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003726:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800372a:	d506      	bpl.n	800373a <SKID_inverse_kinematic+0x94>
        angular_vel = -skid->max_angular_vel;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	edd3 7a03 	vldr	s15, [r3, #12]
 8003732:	eef1 7a67 	vneg.f32	s15, s15
 8003736:	edc7 7a01 	vstr	s15, [r7, #4]
    }

    // Calculate wheel velocities using the inverse kinematic model
    float left_wheel_vel = linear_vel - (angular_vel * skid->wheel_distance / 2.0f);
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	ed93 7a01 	vldr	s14, [r3, #4]
 8003740:	edd7 7a01 	vldr	s15, [r7, #4]
 8003744:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003748:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800374c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003750:	ed97 7a02 	vldr	s14, [r7, #8]
 8003754:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003758:	edc7 7a07 	vstr	s15, [r7, #28]
    float right_wheel_vel = linear_vel + (angular_vel * skid->wheel_distance / 2.0f);
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	ed93 7a01 	vldr	s14, [r3, #4]
 8003762:	edd7 7a01 	vldr	s15, [r7, #4]
 8003766:	ee27 7a27 	vmul.f32	s14, s14, s15
 800376a:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800376e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003772:	ed97 7a02 	vldr	s14, [r7, #8]
 8003776:	ee77 7a27 	vadd.f32	s15, s14, s15
 800377a:	edc7 7a06 	vstr	s15, [r7, #24]

    // Normalize to the range of -100 to 100 for motor commands
    float max_wheel_vel = skid->max_velocity + (skid->max_angular_vel * skid->wheel_distance / 2.0f);
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	ed93 7a02 	vldr	s14, [r3, #8]
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	edd3 6a03 	vldr	s13, [r3, #12]
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	edd3 7a01 	vldr	s15, [r3, #4]
 8003790:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003794:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 8003798:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800379c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80037a0:	edc7 7a05 	vstr	s15, [r7, #20]

    skid->left_cmd = (left_wheel_vel / max_wheel_vel);
 80037a4:	edd7 6a07 	vldr	s13, [r7, #28]
 80037a8:	ed97 7a05 	vldr	s14, [r7, #20]
 80037ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	edc3 7a04 	vstr	s15, [r3, #16]
    skid->right_cmd = (right_wheel_vel / max_wheel_vel);
 80037b6:	edd7 6a06 	vldr	s13, [r7, #24]
 80037ba:	ed97 7a05 	vldr	s14, [r7, #20]
 80037be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	edc3 7a05 	vstr	s15, [r3, #20]
}
 80037c8:	bf00      	nop
 80037ca:	3724      	adds	r7, #36	@ 0x24
 80037cc:	46bd      	mov	sp, r7
 80037ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d2:	4770      	bx	lr
 80037d4:	0000      	movs	r0, r0
	...

080037d8 <SKID_calculate_pose>:
        *angular_vel = -skid->max_angular_vel;
    }
}

void SKID_calculate_pose(SKID_KINEMATIC* skid, float omega_left_front, float omega_left_rear,
                         float omega_right_front, float omega_right_rear, uint32_t current_time) {
 80037d8:	b580      	push	{r7, lr}
 80037da:	ed2d 8b02 	vpush	{d8}
 80037de:	b090      	sub	sp, #64	@ 0x40
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6178      	str	r0, [r7, #20]
 80037e4:	ed87 0a04 	vstr	s0, [r7, #16]
 80037e8:	edc7 0a03 	vstr	s1, [r7, #12]
 80037ec:	ed87 1a02 	vstr	s2, [r7, #8]
 80037f0:	edc7 1a01 	vstr	s3, [r7, #4]
 80037f4:	6039      	str	r1, [r7, #0]
    // Skip if this is the first update
    if (skid->last_update_time == 0) {
 80037f6:	697b      	ldr	r3, [r7, #20]
 80037f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d103      	bne.n	8003806 <SKID_calculate_pose+0x2e>
        skid->last_update_time = current_time;
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	683a      	ldr	r2, [r7, #0]
 8003802:	625a      	str	r2, [r3, #36]	@ 0x24
        return;
 8003804:	e0f3      	b.n	80039ee <SKID_calculate_pose+0x216>
    }

    // Calculate time delta in seconds (1000Hz = 0.001 seconds per step)
    float dt = (float)(current_time - skid->last_update_time) / 1000.0f;
 8003806:	697b      	ldr	r3, [r7, #20]
 8003808:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800380a:	683a      	ldr	r2, [r7, #0]
 800380c:	1ad3      	subs	r3, r2, r3
 800380e:	ee07 3a90 	vmov	s15, r3
 8003812:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003816:	eddf 6a7e 	vldr	s13, [pc, #504]	@ 8003a10 <SKID_calculate_pose+0x238>
 800381a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800381e:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c

    // Ensure we're not processing too fast or if timer wrapped around
    if (dt <= 0 || dt > 0.1f) {
 8003822:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8003826:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800382a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800382e:	d908      	bls.n	8003842 <SKID_calculate_pose+0x6a>
 8003830:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8003834:	ed9f 7a77 	vldr	s14, [pc, #476]	@ 8003a14 <SKID_calculate_pose+0x23c>
 8003838:	eef4 7ac7 	vcmpe.f32	s15, s14
 800383c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003840:	dd03      	ble.n	800384a <SKID_calculate_pose+0x72>
        skid->last_update_time = current_time;
 8003842:	697b      	ldr	r3, [r7, #20]
 8003844:	683a      	ldr	r2, [r7, #0]
 8003846:	625a      	str	r2, [r3, #36]	@ 0x24
        return;
 8003848:	e0d1      	b.n	80039ee <SKID_calculate_pose+0x216>
    }

    // Average omega for each side (rad/s)
    float omega_left = (omega_left_front + omega_left_rear) / 2.0f;
 800384a:	ed97 7a04 	vldr	s14, [r7, #16]
 800384e:	edd7 7a03 	vldr	s15, [r7, #12]
 8003852:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003856:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800385a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800385e:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
    float omega_right = (omega_right_front + omega_right_rear) / 2.0f;
 8003862:	ed97 7a02 	vldr	s14, [r7, #8]
 8003866:	edd7 7a01 	vldr	s15, [r7, #4]
 800386a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800386e:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8003872:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003876:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34

    // Calculate wheel linear velocities from angular velocities
    float v_left = omega_left * skid->wheel_radius;
 800387a:	697b      	ldr	r3, [r7, #20]
 800387c:	edd3 7a00 	vldr	s15, [r3]
 8003880:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8003884:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003888:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
    float v_right = omega_right * skid->wheel_radius;
 800388c:	697b      	ldr	r3, [r7, #20]
 800388e:	edd3 7a00 	vldr	s15, [r3]
 8003892:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8003896:	ee67 7a27 	vmul.f32	s15, s14, s15
 800389a:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

    // Calculate robot velocities
    float v = (v_right + v_left) / 2.0f;                     // Linear velocity (m/s)
 800389e:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80038a2:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80038a6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80038aa:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80038ae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80038b2:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    float omega = (v_right - v_left) / skid->wheel_distance; // Angular velocity (rad/s)
 80038b6:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80038ba:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80038be:	ee77 6a67 	vsub.f32	s13, s14, s15
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	ed93 7a01 	vldr	s14, [r3, #4]
 80038c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80038cc:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

    // Update pose using simple Euler integration
    // For higher accuracy, consider using Runge-Kutta or similar methods
    float delta_theta = omega * dt;
 80038d0:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80038d4:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80038d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038dc:	edc7 7a08 	vstr	s15, [r7, #32]

    // Use average orientation during the time step for better accuracy
    float theta_avg = skid->theta + delta_theta / 2.0f;
 80038e0:	697b      	ldr	r3, [r7, #20]
 80038e2:	ed93 7a08 	vldr	s14, [r3, #32]
 80038e6:	edd7 6a08 	vldr	s13, [r7, #32]
 80038ea:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 80038ee:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80038f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80038f6:	edc7 7a07 	vstr	s15, [r7, #28]

    // Update position based on linear velocity and orientation
    skid->x += v * cosf(theta_avg) * dt;
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	ed93 8a06 	vldr	s16, [r3, #24]
 8003900:	ed97 0a07 	vldr	s0, [r7, #28]
 8003904:	f018 fcaa 	bl	801c25c <cosf>
 8003908:	eeb0 7a40 	vmov.f32	s14, s0
 800390c:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8003910:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003914:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8003918:	ee67 7a27 	vmul.f32	s15, s14, s15
 800391c:	ee78 7a27 	vadd.f32	s15, s16, s15
 8003920:	697b      	ldr	r3, [r7, #20]
 8003922:	edc3 7a06 	vstr	s15, [r3, #24]
    skid->y += v * sinf(theta_avg) * dt;
 8003926:	697b      	ldr	r3, [r7, #20]
 8003928:	ed93 8a07 	vldr	s16, [r3, #28]
 800392c:	ed97 0a07 	vldr	s0, [r7, #28]
 8003930:	f018 fcd8 	bl	801c2e4 <sinf>
 8003934:	eeb0 7a40 	vmov.f32	s14, s0
 8003938:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800393c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003940:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8003944:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003948:	ee78 7a27 	vadd.f32	s15, s16, s15
 800394c:	697b      	ldr	r3, [r7, #20]
 800394e:	edc3 7a07 	vstr	s15, [r3, #28]
    skid->theta += delta_theta;
 8003952:	697b      	ldr	r3, [r7, #20]
 8003954:	ed93 7a08 	vldr	s14, [r3, #32]
 8003958:	edd7 7a08 	vldr	s15, [r7, #32]
 800395c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003960:	697b      	ldr	r3, [r7, #20]
 8003962:	edc3 7a08 	vstr	s15, [r3, #32]

    // Normalize theta to -π to π range
    if (skid->theta > M_PI)
 8003966:	697b      	ldr	r3, [r7, #20]
 8003968:	6a1b      	ldr	r3, [r3, #32]
 800396a:	4618      	mov	r0, r3
 800396c:	f7fc fe24 	bl	80005b8 <__aeabi_f2d>
 8003970:	a321      	add	r3, pc, #132	@ (adr r3, 80039f8 <SKID_calculate_pose+0x220>)
 8003972:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003976:	f7fd f907 	bl	8000b88 <__aeabi_dcmpgt>
 800397a:	4603      	mov	r3, r0
 800397c:	2b00      	cmp	r3, #0
 800397e:	d013      	beq.n	80039a8 <SKID_calculate_pose+0x1d0>
        skid->theta -= 2.0f * M_PI;
 8003980:	697b      	ldr	r3, [r7, #20]
 8003982:	6a1b      	ldr	r3, [r3, #32]
 8003984:	4618      	mov	r0, r3
 8003986:	f7fc fe17 	bl	80005b8 <__aeabi_f2d>
 800398a:	a31d      	add	r3, pc, #116	@ (adr r3, 8003a00 <SKID_calculate_pose+0x228>)
 800398c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003990:	f7fc fcb2 	bl	80002f8 <__aeabi_dsub>
 8003994:	4602      	mov	r2, r0
 8003996:	460b      	mov	r3, r1
 8003998:	4610      	mov	r0, r2
 800399a:	4619      	mov	r1, r3
 800399c:	f7fd f91e 	bl	8000bdc <__aeabi_d2f>
 80039a0:	4602      	mov	r2, r0
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	621a      	str	r2, [r3, #32]
 80039a6:	e01f      	b.n	80039e8 <SKID_calculate_pose+0x210>
    else if (skid->theta < -M_PI)
 80039a8:	697b      	ldr	r3, [r7, #20]
 80039aa:	6a1b      	ldr	r3, [r3, #32]
 80039ac:	4618      	mov	r0, r3
 80039ae:	f7fc fe03 	bl	80005b8 <__aeabi_f2d>
 80039b2:	a315      	add	r3, pc, #84	@ (adr r3, 8003a08 <SKID_calculate_pose+0x230>)
 80039b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039b8:	f7fd f8c8 	bl	8000b4c <__aeabi_dcmplt>
 80039bc:	4603      	mov	r3, r0
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d012      	beq.n	80039e8 <SKID_calculate_pose+0x210>
        skid->theta += 2.0f * M_PI;
 80039c2:	697b      	ldr	r3, [r7, #20]
 80039c4:	6a1b      	ldr	r3, [r3, #32]
 80039c6:	4618      	mov	r0, r3
 80039c8:	f7fc fdf6 	bl	80005b8 <__aeabi_f2d>
 80039cc:	a30c      	add	r3, pc, #48	@ (adr r3, 8003a00 <SKID_calculate_pose+0x228>)
 80039ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039d2:	f7fc fc93 	bl	80002fc <__adddf3>
 80039d6:	4602      	mov	r2, r0
 80039d8:	460b      	mov	r3, r1
 80039da:	4610      	mov	r0, r2
 80039dc:	4619      	mov	r1, r3
 80039de:	f7fd f8fd 	bl	8000bdc <__aeabi_d2f>
 80039e2:	4602      	mov	r2, r0
 80039e4:	697b      	ldr	r3, [r7, #20]
 80039e6:	621a      	str	r2, [r3, #32]

    // Update last update time
    skid->last_update_time = current_time;
 80039e8:	697b      	ldr	r3, [r7, #20]
 80039ea:	683a      	ldr	r2, [r7, #0]
 80039ec:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80039ee:	3740      	adds	r7, #64	@ 0x40
 80039f0:	46bd      	mov	sp, r7
 80039f2:	ecbd 8b02 	vpop	{d8}
 80039f6:	bd80      	pop	{r7, pc}
 80039f8:	54442d18 	.word	0x54442d18
 80039fc:	400921fb 	.word	0x400921fb
 8003a00:	54442d18 	.word	0x54442d18
 8003a04:	401921fb 	.word	0x401921fb
 8003a08:	54442d18 	.word	0x54442d18
 8003a0c:	c00921fb 	.word	0xc00921fb
 8003a10:	447a0000 	.word	0x447a0000
 8003a14:	3dcccccd 	.word	0x3dcccccd

08003a18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b082      	sub	sp, #8
 8003a1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a1e:	4b12      	ldr	r3, [pc, #72]	@ (8003a68 <HAL_MspInit+0x50>)
 8003a20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a22:	4a11      	ldr	r2, [pc, #68]	@ (8003a68 <HAL_MspInit+0x50>)
 8003a24:	f043 0301 	orr.w	r3, r3, #1
 8003a28:	6613      	str	r3, [r2, #96]	@ 0x60
 8003a2a:	4b0f      	ldr	r3, [pc, #60]	@ (8003a68 <HAL_MspInit+0x50>)
 8003a2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a2e:	f003 0301 	and.w	r3, r3, #1
 8003a32:	607b      	str	r3, [r7, #4]
 8003a34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003a36:	4b0c      	ldr	r3, [pc, #48]	@ (8003a68 <HAL_MspInit+0x50>)
 8003a38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a3a:	4a0b      	ldr	r2, [pc, #44]	@ (8003a68 <HAL_MspInit+0x50>)
 8003a3c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a40:	6593      	str	r3, [r2, #88]	@ 0x58
 8003a42:	4b09      	ldr	r3, [pc, #36]	@ (8003a68 <HAL_MspInit+0x50>)
 8003a44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a4a:	603b      	str	r3, [r7, #0]
 8003a4c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003a4e:	2200      	movs	r2, #0
 8003a50:	210f      	movs	r1, #15
 8003a52:	f06f 0001 	mvn.w	r0, #1
 8003a56:	f001 f951 	bl	8004cfc <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8003a5a:	f001 ff7f 	bl	800595c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003a5e:	bf00      	nop
 8003a60:	3708      	adds	r7, #8
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd80      	pop	{r7, pc}
 8003a66:	bf00      	nop
 8003a68:	40021000 	.word	0x40021000

08003a6c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b08c      	sub	sp, #48	@ 0x30
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8003a74:	2300      	movs	r3, #0
 8003a76:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 8003a78:	2300      	movs	r3, #0
 8003a7a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8003a7c:	4b2c      	ldr	r3, [pc, #176]	@ (8003b30 <HAL_InitTick+0xc4>)
 8003a7e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a80:	4a2b      	ldr	r2, [pc, #172]	@ (8003b30 <HAL_InitTick+0xc4>)
 8003a82:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003a86:	6613      	str	r3, [r2, #96]	@ 0x60
 8003a88:	4b29      	ldr	r3, [pc, #164]	@ (8003b30 <HAL_InitTick+0xc4>)
 8003a8a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a8c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003a90:	60bb      	str	r3, [r7, #8]
 8003a92:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003a94:	f107 020c 	add.w	r2, r7, #12
 8003a98:	f107 0310 	add.w	r3, r7, #16
 8003a9c:	4611      	mov	r1, r2
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	f002 fc54 	bl	800634c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8003aa4:	f002 fc3c 	bl	8006320 <HAL_RCC_GetPCLK2Freq>
 8003aa8:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003aaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003aac:	4a21      	ldr	r2, [pc, #132]	@ (8003b34 <HAL_InitTick+0xc8>)
 8003aae:	fba2 2303 	umull	r2, r3, r2, r3
 8003ab2:	0c9b      	lsrs	r3, r3, #18
 8003ab4:	3b01      	subs	r3, #1
 8003ab6:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8003ab8:	4b1f      	ldr	r3, [pc, #124]	@ (8003b38 <HAL_InitTick+0xcc>)
 8003aba:	4a20      	ldr	r2, [pc, #128]	@ (8003b3c <HAL_InitTick+0xd0>)
 8003abc:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8003abe:	4b1e      	ldr	r3, [pc, #120]	@ (8003b38 <HAL_InitTick+0xcc>)
 8003ac0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003ac4:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8003ac6:	4a1c      	ldr	r2, [pc, #112]	@ (8003b38 <HAL_InitTick+0xcc>)
 8003ac8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aca:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8003acc:	4b1a      	ldr	r3, [pc, #104]	@ (8003b38 <HAL_InitTick+0xcc>)
 8003ace:	2200      	movs	r2, #0
 8003ad0:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003ad2:	4b19      	ldr	r3, [pc, #100]	@ (8003b38 <HAL_InitTick+0xcc>)
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim1);
 8003ad8:	4817      	ldr	r0, [pc, #92]	@ (8003b38 <HAL_InitTick+0xcc>)
 8003ada:	f002 fefd 	bl	80068d8 <HAL_TIM_Base_Init>
 8003ade:	4603      	mov	r3, r0
 8003ae0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8003ae4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d11b      	bne.n	8003b24 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8003aec:	4812      	ldr	r0, [pc, #72]	@ (8003b38 <HAL_InitTick+0xcc>)
 8003aee:	f002 ffbb 	bl	8006a68 <HAL_TIM_Base_Start_IT>
 8003af2:	4603      	mov	r3, r0
 8003af4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8003af8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d111      	bne.n	8003b24 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8003b00:	2019      	movs	r0, #25
 8003b02:	f001 f915 	bl	8004d30 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2b0f      	cmp	r3, #15
 8003b0a:	d808      	bhi.n	8003b1e <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	6879      	ldr	r1, [r7, #4]
 8003b10:	2019      	movs	r0, #25
 8003b12:	f001 f8f3 	bl	8004cfc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003b16:	4a0a      	ldr	r2, [pc, #40]	@ (8003b40 <HAL_InitTick+0xd4>)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6013      	str	r3, [r2, #0]
 8003b1c:	e002      	b.n	8003b24 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8003b24:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8003b28:	4618      	mov	r0, r3
 8003b2a:	3730      	adds	r7, #48	@ 0x30
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	bd80      	pop	{r7, pc}
 8003b30:	40021000 	.word	0x40021000
 8003b34:	431bde83 	.word	0x431bde83
 8003b38:	200042f8 	.word	0x200042f8
 8003b3c:	40012c00 	.word	0x40012c00
 8003b40:	20000008 	.word	0x20000008

08003b44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003b44:	b480      	push	{r7}
 8003b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003b48:	bf00      	nop
 8003b4a:	e7fd      	b.n	8003b48 <NMI_Handler+0x4>

08003b4c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003b50:	bf00      	nop
 8003b52:	e7fd      	b.n	8003b50 <HardFault_Handler+0x4>

08003b54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003b54:	b480      	push	{r7}
 8003b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003b58:	bf00      	nop
 8003b5a:	e7fd      	b.n	8003b58 <MemManage_Handler+0x4>

08003b5c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003b60:	bf00      	nop
 8003b62:	e7fd      	b.n	8003b60 <BusFault_Handler+0x4>

08003b64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003b64:	b480      	push	{r7}
 8003b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003b68:	bf00      	nop
 8003b6a:	e7fd      	b.n	8003b68 <UsageFault_Handler+0x4>

08003b6c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003b70:	bf00      	nop
 8003b72:	46bd      	mov	sp, r7
 8003b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b78:	4770      	bx	lr
	...

08003b7c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 8003b80:	4802      	ldr	r0, [pc, #8]	@ (8003b8c <DMA1_Channel1_IRQHandler+0x10>)
 8003b82:	f001 fac6 	bl	8005112 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003b86:	bf00      	nop
 8003b88:	bd80      	pop	{r7, pc}
 8003b8a:	bf00      	nop
 8003b8c:	20004910 	.word	0x20004910

08003b90 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8003b94:	4802      	ldr	r0, [pc, #8]	@ (8003ba0 <DMA1_Channel2_IRQHandler+0x10>)
 8003b96:	f001 fabc 	bl	8005112 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8003b9a:	bf00      	nop
 8003b9c:	bd80      	pop	{r7, pc}
 8003b9e:	bf00      	nop
 8003ba0:	20004970 	.word	0x20004970

08003ba4 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003ba8:	4802      	ldr	r0, [pc, #8]	@ (8003bb4 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8003baa:	f003 fa73 	bl	8007094 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8003bae:	bf00      	nop
 8003bb0:	bd80      	pop	{r7, pc}
 8003bb2:	bf00      	nop
 8003bb4:	200042f8 	.word	0x200042f8

08003bb8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003bbc:	4802      	ldr	r0, [pc, #8]	@ (8003bc8 <TIM2_IRQHandler+0x10>)
 8003bbe:	f003 fa69 	bl	8007094 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003bc2:	bf00      	nop
 8003bc4:	bd80      	pop	{r7, pc}
 8003bc6:	bf00      	nop
 8003bc8:	2000434c 	.word	0x2000434c

08003bcc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8003bd0:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8003bd4:	f001 fdac 	bl	8005730 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003bd8:	bf00      	nop
 8003bda:	bd80      	pop	{r7, pc}

08003bdc <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8003be0:	4802      	ldr	r0, [pc, #8]	@ (8003bec <LPUART1_IRQHandler+0x10>)
 8003be2:	f004 fdbb 	bl	800875c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8003be6:	bf00      	nop
 8003be8:	bd80      	pop	{r7, pc}
 8003bea:	bf00      	nop
 8003bec:	2000487c 	.word	0x2000487c

08003bf0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	af00      	add	r7, sp, #0
  return 1;
 8003bf4:	2301      	movs	r3, #1
}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfe:	4770      	bx	lr

08003c00 <_kill>:

int _kill(int pid, int sig)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b082      	sub	sp, #8
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
 8003c08:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003c0a:	f017 fc3b 	bl	801b484 <__errno>
 8003c0e:	4603      	mov	r3, r0
 8003c10:	2216      	movs	r2, #22
 8003c12:	601a      	str	r2, [r3, #0]
  return -1;
 8003c14:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8003c18:	4618      	mov	r0, r3
 8003c1a:	3708      	adds	r7, #8
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	bd80      	pop	{r7, pc}

08003c20 <_exit>:

void _exit (int status)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b082      	sub	sp, #8
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003c28:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003c2c:	6878      	ldr	r0, [r7, #4]
 8003c2e:	f7ff ffe7 	bl	8003c00 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003c32:	bf00      	nop
 8003c34:	e7fd      	b.n	8003c32 <_exit+0x12>

08003c36 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003c36:	b580      	push	{r7, lr}
 8003c38:	b086      	sub	sp, #24
 8003c3a:	af00      	add	r7, sp, #0
 8003c3c:	60f8      	str	r0, [r7, #12]
 8003c3e:	60b9      	str	r1, [r7, #8]
 8003c40:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c42:	2300      	movs	r3, #0
 8003c44:	617b      	str	r3, [r7, #20]
 8003c46:	e00a      	b.n	8003c5e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003c48:	f3af 8000 	nop.w
 8003c4c:	4601      	mov	r1, r0
 8003c4e:	68bb      	ldr	r3, [r7, #8]
 8003c50:	1c5a      	adds	r2, r3, #1
 8003c52:	60ba      	str	r2, [r7, #8]
 8003c54:	b2ca      	uxtb	r2, r1
 8003c56:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c58:	697b      	ldr	r3, [r7, #20]
 8003c5a:	3301      	adds	r3, #1
 8003c5c:	617b      	str	r3, [r7, #20]
 8003c5e:	697a      	ldr	r2, [r7, #20]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	429a      	cmp	r2, r3
 8003c64:	dbf0      	blt.n	8003c48 <_read+0x12>
  }

  return len;
 8003c66:	687b      	ldr	r3, [r7, #4]
}
 8003c68:	4618      	mov	r0, r3
 8003c6a:	3718      	adds	r7, #24
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bd80      	pop	{r7, pc}

08003c70 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b086      	sub	sp, #24
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	60f8      	str	r0, [r7, #12]
 8003c78:	60b9      	str	r1, [r7, #8]
 8003c7a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	617b      	str	r3, [r7, #20]
 8003c80:	e009      	b.n	8003c96 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003c82:	68bb      	ldr	r3, [r7, #8]
 8003c84:	1c5a      	adds	r2, r3, #1
 8003c86:	60ba      	str	r2, [r7, #8]
 8003c88:	781b      	ldrb	r3, [r3, #0]
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c90:	697b      	ldr	r3, [r7, #20]
 8003c92:	3301      	adds	r3, #1
 8003c94:	617b      	str	r3, [r7, #20]
 8003c96:	697a      	ldr	r2, [r7, #20]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	429a      	cmp	r2, r3
 8003c9c:	dbf1      	blt.n	8003c82 <_write+0x12>
  }
  return len;
 8003c9e:	687b      	ldr	r3, [r7, #4]
}
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	3718      	adds	r7, #24
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	bd80      	pop	{r7, pc}

08003ca8 <_close>:

int _close(int file)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	b083      	sub	sp, #12
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003cb0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	370c      	adds	r7, #12
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbe:	4770      	bx	lr

08003cc0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b083      	sub	sp, #12
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
 8003cc8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003cd0:	605a      	str	r2, [r3, #4]
  return 0;
 8003cd2:	2300      	movs	r3, #0
}
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	370c      	adds	r7, #12
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cde:	4770      	bx	lr

08003ce0 <_isatty>:

int _isatty(int file)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b083      	sub	sp, #12
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003ce8:	2301      	movs	r3, #1
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	370c      	adds	r7, #12
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf4:	4770      	bx	lr

08003cf6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003cf6:	b480      	push	{r7}
 8003cf8:	b085      	sub	sp, #20
 8003cfa:	af00      	add	r7, sp, #0
 8003cfc:	60f8      	str	r0, [r7, #12]
 8003cfe:	60b9      	str	r1, [r7, #8]
 8003d00:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003d02:	2300      	movs	r3, #0
}
 8003d04:	4618      	mov	r0, r3
 8003d06:	3714      	adds	r7, #20
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0e:	4770      	bx	lr

08003d10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b086      	sub	sp, #24
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003d18:	4a14      	ldr	r2, [pc, #80]	@ (8003d6c <_sbrk+0x5c>)
 8003d1a:	4b15      	ldr	r3, [pc, #84]	@ (8003d70 <_sbrk+0x60>)
 8003d1c:	1ad3      	subs	r3, r2, r3
 8003d1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003d20:	697b      	ldr	r3, [r7, #20]
 8003d22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003d24:	4b13      	ldr	r3, [pc, #76]	@ (8003d74 <_sbrk+0x64>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d102      	bne.n	8003d32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003d2c:	4b11      	ldr	r3, [pc, #68]	@ (8003d74 <_sbrk+0x64>)
 8003d2e:	4a12      	ldr	r2, [pc, #72]	@ (8003d78 <_sbrk+0x68>)
 8003d30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003d32:	4b10      	ldr	r3, [pc, #64]	@ (8003d74 <_sbrk+0x64>)
 8003d34:	681a      	ldr	r2, [r3, #0]
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	4413      	add	r3, r2
 8003d3a:	693a      	ldr	r2, [r7, #16]
 8003d3c:	429a      	cmp	r2, r3
 8003d3e:	d207      	bcs.n	8003d50 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003d40:	f017 fba0 	bl	801b484 <__errno>
 8003d44:	4603      	mov	r3, r0
 8003d46:	220c      	movs	r2, #12
 8003d48:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003d4a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003d4e:	e009      	b.n	8003d64 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003d50:	4b08      	ldr	r3, [pc, #32]	@ (8003d74 <_sbrk+0x64>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003d56:	4b07      	ldr	r3, [pc, #28]	@ (8003d74 <_sbrk+0x64>)
 8003d58:	681a      	ldr	r2, [r3, #0]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	4413      	add	r3, r2
 8003d5e:	4a05      	ldr	r2, [pc, #20]	@ (8003d74 <_sbrk+0x64>)
 8003d60:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003d62:	68fb      	ldr	r3, [r7, #12]
}
 8003d64:	4618      	mov	r0, r3
 8003d66:	3718      	adds	r7, #24
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	bd80      	pop	{r7, pc}
 8003d6c:	20020000 	.word	0x20020000
 8003d70:	00000400 	.word	0x00000400
 8003d74:	20004348 	.word	0x20004348
 8003d78:	2000b800 	.word	0x2000b800

08003d7c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003d80:	4b06      	ldr	r3, [pc, #24]	@ (8003d9c <SystemInit+0x20>)
 8003d82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d86:	4a05      	ldr	r2, [pc, #20]	@ (8003d9c <SystemInit+0x20>)
 8003d88:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003d8c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003d90:	bf00      	nop
 8003d92:	46bd      	mov	sp, r7
 8003d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d98:	4770      	bx	lr
 8003d9a:	bf00      	nop
 8003d9c:	e000ed00 	.word	0xe000ed00

08003da0 <MX_TIM2_Init>:
TIM_HandleTypeDef htim8;
TIM_HandleTypeDef htim20;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b088      	sub	sp, #32
 8003da4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003da6:	f107 0310 	add.w	r3, r7, #16
 8003daa:	2200      	movs	r2, #0
 8003dac:	601a      	str	r2, [r3, #0]
 8003dae:	605a      	str	r2, [r3, #4]
 8003db0:	609a      	str	r2, [r3, #8]
 8003db2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003db4:	1d3b      	adds	r3, r7, #4
 8003db6:	2200      	movs	r2, #0
 8003db8:	601a      	str	r2, [r3, #0]
 8003dba:	605a      	str	r2, [r3, #4]
 8003dbc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003dbe:	4b1e      	ldr	r3, [pc, #120]	@ (8003e38 <MX_TIM2_Init+0x98>)
 8003dc0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003dc4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 169;
 8003dc6:	4b1c      	ldr	r3, [pc, #112]	@ (8003e38 <MX_TIM2_Init+0x98>)
 8003dc8:	22a9      	movs	r2, #169	@ 0xa9
 8003dca:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003dcc:	4b1a      	ldr	r3, [pc, #104]	@ (8003e38 <MX_TIM2_Init+0x98>)
 8003dce:	2200      	movs	r2, #0
 8003dd0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8003dd2:	4b19      	ldr	r3, [pc, #100]	@ (8003e38 <MX_TIM2_Init+0x98>)
 8003dd4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003dd8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003dda:	4b17      	ldr	r3, [pc, #92]	@ (8003e38 <MX_TIM2_Init+0x98>)
 8003ddc:	2200      	movs	r2, #0
 8003dde:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003de0:	4b15      	ldr	r3, [pc, #84]	@ (8003e38 <MX_TIM2_Init+0x98>)
 8003de2:	2200      	movs	r2, #0
 8003de4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003de6:	4814      	ldr	r0, [pc, #80]	@ (8003e38 <MX_TIM2_Init+0x98>)
 8003de8:	f002 fd76 	bl	80068d8 <HAL_TIM_Base_Init>
 8003dec:	4603      	mov	r3, r0
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d001      	beq.n	8003df6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8003df2:	f7fe ffbf 	bl	8002d74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003df6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003dfa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003dfc:	f107 0310 	add.w	r3, r7, #16
 8003e00:	4619      	mov	r1, r3
 8003e02:	480d      	ldr	r0, [pc, #52]	@ (8003e38 <MX_TIM2_Init+0x98>)
 8003e04:	f003 fbaa 	bl	800755c <HAL_TIM_ConfigClockSource>
 8003e08:	4603      	mov	r3, r0
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d001      	beq.n	8003e12 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8003e0e:	f7fe ffb1 	bl	8002d74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8003e12:	2320      	movs	r3, #32
 8003e14:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003e16:	2300      	movs	r3, #0
 8003e18:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003e1a:	1d3b      	adds	r3, r7, #4
 8003e1c:	4619      	mov	r1, r3
 8003e1e:	4806      	ldr	r0, [pc, #24]	@ (8003e38 <MX_TIM2_Init+0x98>)
 8003e20:	f004 f97a 	bl	8008118 <HAL_TIMEx_MasterConfigSynchronization>
 8003e24:	4603      	mov	r3, r0
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d001      	beq.n	8003e2e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8003e2a:	f7fe ffa3 	bl	8002d74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003e2e:	bf00      	nop
 8003e30:	3720      	adds	r7, #32
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bd80      	pop	{r7, pc}
 8003e36:	bf00      	nop
 8003e38:	2000434c 	.word	0x2000434c

08003e3c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b08c      	sub	sp, #48	@ 0x30
 8003e40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003e42:	f107 030c 	add.w	r3, r7, #12
 8003e46:	2224      	movs	r2, #36	@ 0x24
 8003e48:	2100      	movs	r1, #0
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	f017 fa86 	bl	801b35c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003e50:	463b      	mov	r3, r7
 8003e52:	2200      	movs	r2, #0
 8003e54:	601a      	str	r2, [r3, #0]
 8003e56:	605a      	str	r2, [r3, #4]
 8003e58:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003e5a:	4b21      	ldr	r3, [pc, #132]	@ (8003ee0 <MX_TIM3_Init+0xa4>)
 8003e5c:	4a21      	ldr	r2, [pc, #132]	@ (8003ee4 <MX_TIM3_Init+0xa8>)
 8003e5e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8003e60:	4b1f      	ldr	r3, [pc, #124]	@ (8003ee0 <MX_TIM3_Init+0xa4>)
 8003e62:	2200      	movs	r2, #0
 8003e64:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003e66:	4b1e      	ldr	r3, [pc, #120]	@ (8003ee0 <MX_TIM3_Init+0xa4>)
 8003e68:	2200      	movs	r2, #0
 8003e6a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8003e6c:	4b1c      	ldr	r3, [pc, #112]	@ (8003ee0 <MX_TIM3_Init+0xa4>)
 8003e6e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003e72:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003e74:	4b1a      	ldr	r3, [pc, #104]	@ (8003ee0 <MX_TIM3_Init+0xa4>)
 8003e76:	2200      	movs	r2, #0
 8003e78:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003e7a:	4b19      	ldr	r3, [pc, #100]	@ (8003ee0 <MX_TIM3_Init+0xa4>)
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003e80:	2303      	movs	r3, #3
 8003e82:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003e84:	2300      	movs	r3, #0
 8003e86:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003e88:	2301      	movs	r3, #1
 8003e8a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003e90:	2300      	movs	r3, #0
 8003e92:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003e94:	2300      	movs	r3, #0
 8003e96:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8003ea4:	f107 030c 	add.w	r3, r7, #12
 8003ea8:	4619      	mov	r1, r3
 8003eaa:	480d      	ldr	r0, [pc, #52]	@ (8003ee0 <MX_TIM3_Init+0xa4>)
 8003eac:	f002 ffbe 	bl	8006e2c <HAL_TIM_Encoder_Init>
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d001      	beq.n	8003eba <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8003eb6:	f7fe ff5d 	bl	8002d74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003eba:	2300      	movs	r3, #0
 8003ebc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003ec2:	463b      	mov	r3, r7
 8003ec4:	4619      	mov	r1, r3
 8003ec6:	4806      	ldr	r0, [pc, #24]	@ (8003ee0 <MX_TIM3_Init+0xa4>)
 8003ec8:	f004 f926 	bl	8008118 <HAL_TIMEx_MasterConfigSynchronization>
 8003ecc:	4603      	mov	r3, r0
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d001      	beq.n	8003ed6 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8003ed2:	f7fe ff4f 	bl	8002d74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003ed6:	bf00      	nop
 8003ed8:	3730      	adds	r7, #48	@ 0x30
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bd80      	pop	{r7, pc}
 8003ede:	bf00      	nop
 8003ee0:	20004398 	.word	0x20004398
 8003ee4:	40000400 	.word	0x40000400

08003ee8 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b08c      	sub	sp, #48	@ 0x30
 8003eec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003eee:	f107 030c 	add.w	r3, r7, #12
 8003ef2:	2224      	movs	r2, #36	@ 0x24
 8003ef4:	2100      	movs	r1, #0
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	f017 fa30 	bl	801b35c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003efc:	463b      	mov	r3, r7
 8003efe:	2200      	movs	r2, #0
 8003f00:	601a      	str	r2, [r3, #0]
 8003f02:	605a      	str	r2, [r3, #4]
 8003f04:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003f06:	4b21      	ldr	r3, [pc, #132]	@ (8003f8c <MX_TIM4_Init+0xa4>)
 8003f08:	4a21      	ldr	r2, [pc, #132]	@ (8003f90 <MX_TIM4_Init+0xa8>)
 8003f0a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8003f0c:	4b1f      	ldr	r3, [pc, #124]	@ (8003f8c <MX_TIM4_Init+0xa4>)
 8003f0e:	2200      	movs	r2, #0
 8003f10:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003f12:	4b1e      	ldr	r3, [pc, #120]	@ (8003f8c <MX_TIM4_Init+0xa4>)
 8003f14:	2200      	movs	r2, #0
 8003f16:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8003f18:	4b1c      	ldr	r3, [pc, #112]	@ (8003f8c <MX_TIM4_Init+0xa4>)
 8003f1a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003f1e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003f20:	4b1a      	ldr	r3, [pc, #104]	@ (8003f8c <MX_TIM4_Init+0xa4>)
 8003f22:	2200      	movs	r2, #0
 8003f24:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003f26:	4b19      	ldr	r3, [pc, #100]	@ (8003f8c <MX_TIM4_Init+0xa4>)
 8003f28:	2200      	movs	r2, #0
 8003f2a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003f2c:	2303      	movs	r3, #3
 8003f2e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003f30:	2300      	movs	r3, #0
 8003f32:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003f34:	2301      	movs	r3, #1
 8003f36:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003f38:	2300      	movs	r3, #0
 8003f3a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003f40:	2300      	movs	r3, #0
 8003f42:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003f44:	2301      	movs	r3, #1
 8003f46:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003f48:	2300      	movs	r3, #0
 8003f4a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8003f50:	f107 030c 	add.w	r3, r7, #12
 8003f54:	4619      	mov	r1, r3
 8003f56:	480d      	ldr	r0, [pc, #52]	@ (8003f8c <MX_TIM4_Init+0xa4>)
 8003f58:	f002 ff68 	bl	8006e2c <HAL_TIM_Encoder_Init>
 8003f5c:	4603      	mov	r3, r0
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d001      	beq.n	8003f66 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8003f62:	f7fe ff07 	bl	8002d74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003f66:	2300      	movs	r3, #0
 8003f68:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003f6e:	463b      	mov	r3, r7
 8003f70:	4619      	mov	r1, r3
 8003f72:	4806      	ldr	r0, [pc, #24]	@ (8003f8c <MX_TIM4_Init+0xa4>)
 8003f74:	f004 f8d0 	bl	8008118 <HAL_TIMEx_MasterConfigSynchronization>
 8003f78:	4603      	mov	r3, r0
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d001      	beq.n	8003f82 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8003f7e:	f7fe fef9 	bl	8002d74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8003f82:	bf00      	nop
 8003f84:	3730      	adds	r7, #48	@ 0x30
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bd80      	pop	{r7, pc}
 8003f8a:	bf00      	nop
 8003f8c:	200043e4 	.word	0x200043e4
 8003f90:	40000800 	.word	0x40000800

08003f94 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b08c      	sub	sp, #48	@ 0x30
 8003f98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003f9a:	f107 030c 	add.w	r3, r7, #12
 8003f9e:	2224      	movs	r2, #36	@ 0x24
 8003fa0:	2100      	movs	r1, #0
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	f017 f9da 	bl	801b35c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003fa8:	463b      	mov	r3, r7
 8003faa:	2200      	movs	r2, #0
 8003fac:	601a      	str	r2, [r3, #0]
 8003fae:	605a      	str	r2, [r3, #4]
 8003fb0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8003fb2:	4b21      	ldr	r3, [pc, #132]	@ (8004038 <MX_TIM5_Init+0xa4>)
 8003fb4:	4a21      	ldr	r2, [pc, #132]	@ (800403c <MX_TIM5_Init+0xa8>)
 8003fb6:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8003fb8:	4b1f      	ldr	r3, [pc, #124]	@ (8004038 <MX_TIM5_Init+0xa4>)
 8003fba:	2200      	movs	r2, #0
 8003fbc:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003fbe:	4b1e      	ldr	r3, [pc, #120]	@ (8004038 <MX_TIM5_Init+0xa4>)
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8003fc4:	4b1c      	ldr	r3, [pc, #112]	@ (8004038 <MX_TIM5_Init+0xa4>)
 8003fc6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003fca:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003fcc:	4b1a      	ldr	r3, [pc, #104]	@ (8004038 <MX_TIM5_Init+0xa4>)
 8003fce:	2200      	movs	r2, #0
 8003fd0:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003fd2:	4b19      	ldr	r3, [pc, #100]	@ (8004038 <MX_TIM5_Init+0xa4>)
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003fd8:	2303      	movs	r3, #3
 8003fda:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003fdc:	2300      	movs	r3, #0
 8003fde:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003fe8:	2300      	movs	r3, #0
 8003fea:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003fec:	2300      	movs	r3, #0
 8003fee:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8003ffc:	f107 030c 	add.w	r3, r7, #12
 8004000:	4619      	mov	r1, r3
 8004002:	480d      	ldr	r0, [pc, #52]	@ (8004038 <MX_TIM5_Init+0xa4>)
 8004004:	f002 ff12 	bl	8006e2c <HAL_TIM_Encoder_Init>
 8004008:	4603      	mov	r3, r0
 800400a:	2b00      	cmp	r3, #0
 800400c:	d001      	beq.n	8004012 <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 800400e:	f7fe feb1 	bl	8002d74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004012:	2300      	movs	r3, #0
 8004014:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004016:	2300      	movs	r3, #0
 8004018:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800401a:	463b      	mov	r3, r7
 800401c:	4619      	mov	r1, r3
 800401e:	4806      	ldr	r0, [pc, #24]	@ (8004038 <MX_TIM5_Init+0xa4>)
 8004020:	f004 f87a 	bl	8008118 <HAL_TIMEx_MasterConfigSynchronization>
 8004024:	4603      	mov	r3, r0
 8004026:	2b00      	cmp	r3, #0
 8004028:	d001      	beq.n	800402e <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 800402a:	f7fe fea3 	bl	8002d74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800402e:	bf00      	nop
 8004030:	3730      	adds	r7, #48	@ 0x30
 8004032:	46bd      	mov	sp, r7
 8004034:	bd80      	pop	{r7, pc}
 8004036:	bf00      	nop
 8004038:	20004430 	.word	0x20004430
 800403c:	40000c00 	.word	0x40000c00

08004040 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b098      	sub	sp, #96	@ 0x60
 8004044:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004046:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800404a:	2200      	movs	r2, #0
 800404c:	601a      	str	r2, [r3, #0]
 800404e:	605a      	str	r2, [r3, #4]
 8004050:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004052:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8004056:	2200      	movs	r2, #0
 8004058:	601a      	str	r2, [r3, #0]
 800405a:	605a      	str	r2, [r3, #4]
 800405c:	609a      	str	r2, [r3, #8]
 800405e:	60da      	str	r2, [r3, #12]
 8004060:	611a      	str	r2, [r3, #16]
 8004062:	615a      	str	r2, [r3, #20]
 8004064:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004066:	1d3b      	adds	r3, r7, #4
 8004068:	2234      	movs	r2, #52	@ 0x34
 800406a:	2100      	movs	r1, #0
 800406c:	4618      	mov	r0, r3
 800406e:	f017 f975 	bl	801b35c <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8004072:	4b4d      	ldr	r3, [pc, #308]	@ (80041a8 <MX_TIM8_Init+0x168>)
 8004074:	4a4d      	ldr	r2, [pc, #308]	@ (80041ac <MX_TIM8_Init+0x16c>)
 8004076:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8004078:	4b4b      	ldr	r3, [pc, #300]	@ (80041a8 <MX_TIM8_Init+0x168>)
 800407a:	2200      	movs	r2, #0
 800407c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800407e:	4b4a      	ldr	r3, [pc, #296]	@ (80041a8 <MX_TIM8_Init+0x168>)
 8004080:	2200      	movs	r2, #0
 8004082:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8004084:	4b48      	ldr	r3, [pc, #288]	@ (80041a8 <MX_TIM8_Init+0x168>)
 8004086:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800408a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800408c:	4b46      	ldr	r3, [pc, #280]	@ (80041a8 <MX_TIM8_Init+0x168>)
 800408e:	2200      	movs	r2, #0
 8004090:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8004092:	4b45      	ldr	r3, [pc, #276]	@ (80041a8 <MX_TIM8_Init+0x168>)
 8004094:	2200      	movs	r2, #0
 8004096:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004098:	4b43      	ldr	r3, [pc, #268]	@ (80041a8 <MX_TIM8_Init+0x168>)
 800409a:	2200      	movs	r2, #0
 800409c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800409e:	4842      	ldr	r0, [pc, #264]	@ (80041a8 <MX_TIM8_Init+0x168>)
 80040a0:	f002 fd5a 	bl	8006b58 <HAL_TIM_PWM_Init>
 80040a4:	4603      	mov	r3, r0
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d001      	beq.n	80040ae <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 80040aa:	f7fe fe63 	bl	8002d74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80040ae:	2300      	movs	r3, #0
 80040b0:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80040b2:	2300      	movs	r3, #0
 80040b4:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80040b6:	2300      	movs	r3, #0
 80040b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80040ba:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80040be:	4619      	mov	r1, r3
 80040c0:	4839      	ldr	r0, [pc, #228]	@ (80041a8 <MX_TIM8_Init+0x168>)
 80040c2:	f004 f829 	bl	8008118 <HAL_TIMEx_MasterConfigSynchronization>
 80040c6:	4603      	mov	r3, r0
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d001      	beq.n	80040d0 <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 80040cc:	f7fe fe52 	bl	8002d74 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80040d0:	2360      	movs	r3, #96	@ 0x60
 80040d2:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 80040d4:	2300      	movs	r3, #0
 80040d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80040d8:	2300      	movs	r3, #0
 80040da:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80040dc:	2300      	movs	r3, #0
 80040de:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80040e0:	2300      	movs	r3, #0
 80040e2:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80040e4:	2300      	movs	r3, #0
 80040e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80040e8:	2300      	movs	r3, #0
 80040ea:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80040ec:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80040f0:	2200      	movs	r2, #0
 80040f2:	4619      	mov	r1, r3
 80040f4:	482c      	ldr	r0, [pc, #176]	@ (80041a8 <MX_TIM8_Init+0x168>)
 80040f6:	f003 f91d 	bl	8007334 <HAL_TIM_PWM_ConfigChannel>
 80040fa:	4603      	mov	r3, r0
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d001      	beq.n	8004104 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8004100:	f7fe fe38 	bl	8002d74 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004104:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8004108:	2204      	movs	r2, #4
 800410a:	4619      	mov	r1, r3
 800410c:	4826      	ldr	r0, [pc, #152]	@ (80041a8 <MX_TIM8_Init+0x168>)
 800410e:	f003 f911 	bl	8007334 <HAL_TIM_PWM_ConfigChannel>
 8004112:	4603      	mov	r3, r0
 8004114:	2b00      	cmp	r3, #0
 8004116:	d001      	beq.n	800411c <MX_TIM8_Init+0xdc>
  {
    Error_Handler();
 8004118:	f7fe fe2c 	bl	8002d74 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800411c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8004120:	2208      	movs	r2, #8
 8004122:	4619      	mov	r1, r3
 8004124:	4820      	ldr	r0, [pc, #128]	@ (80041a8 <MX_TIM8_Init+0x168>)
 8004126:	f003 f905 	bl	8007334 <HAL_TIM_PWM_ConfigChannel>
 800412a:	4603      	mov	r3, r0
 800412c:	2b00      	cmp	r3, #0
 800412e:	d001      	beq.n	8004134 <MX_TIM8_Init+0xf4>
  {
    Error_Handler();
 8004130:	f7fe fe20 	bl	8002d74 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004134:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8004138:	220c      	movs	r2, #12
 800413a:	4619      	mov	r1, r3
 800413c:	481a      	ldr	r0, [pc, #104]	@ (80041a8 <MX_TIM8_Init+0x168>)
 800413e:	f003 f8f9 	bl	8007334 <HAL_TIM_PWM_ConfigChannel>
 8004142:	4603      	mov	r3, r0
 8004144:	2b00      	cmp	r3, #0
 8004146:	d001      	beq.n	800414c <MX_TIM8_Init+0x10c>
  {
    Error_Handler();
 8004148:	f7fe fe14 	bl	8002d74 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800414c:	2300      	movs	r3, #0
 800414e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004150:	2300      	movs	r3, #0
 8004152:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004154:	2300      	movs	r3, #0
 8004156:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004158:	2300      	movs	r3, #0
 800415a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800415c:	2300      	movs	r3, #0
 800415e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004160:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004164:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8004166:	2300      	movs	r3, #0
 8004168:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800416a:	2300      	movs	r3, #0
 800416c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800416e:	2300      	movs	r3, #0
 8004170:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8004172:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004176:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8004178:	2300      	movs	r3, #0
 800417a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800417c:	2300      	movs	r3, #0
 800417e:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004180:	2300      	movs	r3, #0
 8004182:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8004184:	1d3b      	adds	r3, r7, #4
 8004186:	4619      	mov	r1, r3
 8004188:	4807      	ldr	r0, [pc, #28]	@ (80041a8 <MX_TIM8_Init+0x168>)
 800418a:	f004 f85b 	bl	8008244 <HAL_TIMEx_ConfigBreakDeadTime>
 800418e:	4603      	mov	r3, r0
 8004190:	2b00      	cmp	r3, #0
 8004192:	d001      	beq.n	8004198 <MX_TIM8_Init+0x158>
  {
    Error_Handler();
 8004194:	f7fe fdee 	bl	8002d74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8004198:	4803      	ldr	r0, [pc, #12]	@ (80041a8 <MX_TIM8_Init+0x168>)
 800419a:	f000 f99d 	bl	80044d8 <HAL_TIM_MspPostInit>

}
 800419e:	bf00      	nop
 80041a0:	3760      	adds	r7, #96	@ 0x60
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bd80      	pop	{r7, pc}
 80041a6:	bf00      	nop
 80041a8:	2000447c 	.word	0x2000447c
 80041ac:	40013400 	.word	0x40013400

080041b0 <MX_TIM20_Init>:
/* TIM20 init function */
void MX_TIM20_Init(void)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b08c      	sub	sp, #48	@ 0x30
 80041b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM20_Init 0 */

  /* USER CODE END TIM20_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80041b6:	f107 030c 	add.w	r3, r7, #12
 80041ba:	2224      	movs	r2, #36	@ 0x24
 80041bc:	2100      	movs	r1, #0
 80041be:	4618      	mov	r0, r3
 80041c0:	f017 f8cc 	bl	801b35c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80041c4:	463b      	mov	r3, r7
 80041c6:	2200      	movs	r2, #0
 80041c8:	601a      	str	r2, [r3, #0]
 80041ca:	605a      	str	r2, [r3, #4]
 80041cc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM20_Init 1 */

  /* USER CODE END TIM20_Init 1 */
  htim20.Instance = TIM20;
 80041ce:	4b23      	ldr	r3, [pc, #140]	@ (800425c <MX_TIM20_Init+0xac>)
 80041d0:	4a23      	ldr	r2, [pc, #140]	@ (8004260 <MX_TIM20_Init+0xb0>)
 80041d2:	601a      	str	r2, [r3, #0]
  htim20.Init.Prescaler = 0;
 80041d4:	4b21      	ldr	r3, [pc, #132]	@ (800425c <MX_TIM20_Init+0xac>)
 80041d6:	2200      	movs	r2, #0
 80041d8:	605a      	str	r2, [r3, #4]
  htim20.Init.CounterMode = TIM_COUNTERMODE_UP;
 80041da:	4b20      	ldr	r3, [pc, #128]	@ (800425c <MX_TIM20_Init+0xac>)
 80041dc:	2200      	movs	r2, #0
 80041de:	609a      	str	r2, [r3, #8]
  htim20.Init.Period = 65535;
 80041e0:	4b1e      	ldr	r3, [pc, #120]	@ (800425c <MX_TIM20_Init+0xac>)
 80041e2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80041e6:	60da      	str	r2, [r3, #12]
  htim20.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80041e8:	4b1c      	ldr	r3, [pc, #112]	@ (800425c <MX_TIM20_Init+0xac>)
 80041ea:	2200      	movs	r2, #0
 80041ec:	611a      	str	r2, [r3, #16]
  htim20.Init.RepetitionCounter = 0;
 80041ee:	4b1b      	ldr	r3, [pc, #108]	@ (800425c <MX_TIM20_Init+0xac>)
 80041f0:	2200      	movs	r2, #0
 80041f2:	615a      	str	r2, [r3, #20]
  htim20.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80041f4:	4b19      	ldr	r3, [pc, #100]	@ (800425c <MX_TIM20_Init+0xac>)
 80041f6:	2200      	movs	r2, #0
 80041f8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80041fa:	2303      	movs	r3, #3
 80041fc:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80041fe:	2300      	movs	r3, #0
 8004200:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8004202:	2301      	movs	r3, #1
 8004204:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8004206:	2300      	movs	r3, #0
 8004208:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800420a:	2300      	movs	r3, #0
 800420c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800420e:	2300      	movs	r3, #0
 8004210:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8004212:	2301      	movs	r3, #1
 8004214:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8004216:	2300      	movs	r3, #0
 8004218:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800421a:	2300      	movs	r3, #0
 800421c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim20, &sConfig) != HAL_OK)
 800421e:	f107 030c 	add.w	r3, r7, #12
 8004222:	4619      	mov	r1, r3
 8004224:	480d      	ldr	r0, [pc, #52]	@ (800425c <MX_TIM20_Init+0xac>)
 8004226:	f002 fe01 	bl	8006e2c <HAL_TIM_Encoder_Init>
 800422a:	4603      	mov	r3, r0
 800422c:	2b00      	cmp	r3, #0
 800422e:	d001      	beq.n	8004234 <MX_TIM20_Init+0x84>
  {
    Error_Handler();
 8004230:	f7fe fda0 	bl	8002d74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004234:	2300      	movs	r3, #0
 8004236:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8004238:	2300      	movs	r3, #0
 800423a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800423c:	2300      	movs	r3, #0
 800423e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim20, &sMasterConfig) != HAL_OK)
 8004240:	463b      	mov	r3, r7
 8004242:	4619      	mov	r1, r3
 8004244:	4805      	ldr	r0, [pc, #20]	@ (800425c <MX_TIM20_Init+0xac>)
 8004246:	f003 ff67 	bl	8008118 <HAL_TIMEx_MasterConfigSynchronization>
 800424a:	4603      	mov	r3, r0
 800424c:	2b00      	cmp	r3, #0
 800424e:	d001      	beq.n	8004254 <MX_TIM20_Init+0xa4>
  {
    Error_Handler();
 8004250:	f7fe fd90 	bl	8002d74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM20_Init 2 */

  /* USER CODE END TIM20_Init 2 */

}
 8004254:	bf00      	nop
 8004256:	3730      	adds	r7, #48	@ 0x30
 8004258:	46bd      	mov	sp, r7
 800425a:	bd80      	pop	{r7, pc}
 800425c:	200044c8 	.word	0x200044c8
 8004260:	40015000 	.word	0x40015000

08004264 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b084      	sub	sp, #16
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004274:	d113      	bne.n	800429e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004276:	4b0c      	ldr	r3, [pc, #48]	@ (80042a8 <HAL_TIM_Base_MspInit+0x44>)
 8004278:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800427a:	4a0b      	ldr	r2, [pc, #44]	@ (80042a8 <HAL_TIM_Base_MspInit+0x44>)
 800427c:	f043 0301 	orr.w	r3, r3, #1
 8004280:	6593      	str	r3, [r2, #88]	@ 0x58
 8004282:	4b09      	ldr	r3, [pc, #36]	@ (80042a8 <HAL_TIM_Base_MspInit+0x44>)
 8004284:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004286:	f003 0301 	and.w	r3, r3, #1
 800428a:	60fb      	str	r3, [r7, #12]
 800428c:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 800428e:	2200      	movs	r2, #0
 8004290:	2105      	movs	r1, #5
 8004292:	201c      	movs	r0, #28
 8004294:	f000 fd32 	bl	8004cfc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004298:	201c      	movs	r0, #28
 800429a:	f000 fd49 	bl	8004d30 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800429e:	bf00      	nop
 80042a0:	3710      	adds	r7, #16
 80042a2:	46bd      	mov	sp, r7
 80042a4:	bd80      	pop	{r7, pc}
 80042a6:	bf00      	nop
 80042a8:	40021000 	.word	0x40021000

080042ac <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b090      	sub	sp, #64	@ 0x40
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042b4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80042b8:	2200      	movs	r2, #0
 80042ba:	601a      	str	r2, [r3, #0]
 80042bc:	605a      	str	r2, [r3, #4]
 80042be:	609a      	str	r2, [r3, #8]
 80042c0:	60da      	str	r2, [r3, #12]
 80042c2:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4a6c      	ldr	r2, [pc, #432]	@ (800447c <HAL_TIM_Encoder_MspInit+0x1d0>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d129      	bne.n	8004322 <HAL_TIM_Encoder_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80042ce:	4b6c      	ldr	r3, [pc, #432]	@ (8004480 <HAL_TIM_Encoder_MspInit+0x1d4>)
 80042d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042d2:	4a6b      	ldr	r2, [pc, #428]	@ (8004480 <HAL_TIM_Encoder_MspInit+0x1d4>)
 80042d4:	f043 0302 	orr.w	r3, r3, #2
 80042d8:	6593      	str	r3, [r2, #88]	@ 0x58
 80042da:	4b69      	ldr	r3, [pc, #420]	@ (8004480 <HAL_TIM_Encoder_MspInit+0x1d4>)
 80042dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042de:	f003 0302 	and.w	r3, r3, #2
 80042e2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80042e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80042e6:	4b66      	ldr	r3, [pc, #408]	@ (8004480 <HAL_TIM_Encoder_MspInit+0x1d4>)
 80042e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042ea:	4a65      	ldr	r2, [pc, #404]	@ (8004480 <HAL_TIM_Encoder_MspInit+0x1d4>)
 80042ec:	f043 0301 	orr.w	r3, r3, #1
 80042f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80042f2:	4b63      	ldr	r3, [pc, #396]	@ (8004480 <HAL_TIM_Encoder_MspInit+0x1d4>)
 80042f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042f6:	f003 0301 	and.w	r3, r3, #1
 80042fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80042fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**TIM3 GPIO Configuration
    PA4     ------> TIM3_CH2
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 80042fe:	2350      	movs	r3, #80	@ 0x50
 8004300:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004302:	2302      	movs	r3, #2
 8004304:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004306:	2300      	movs	r3, #0
 8004308:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800430a:	2300      	movs	r3, #0
 800430c:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800430e:	2302      	movs	r3, #2
 8004310:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004312:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004316:	4619      	mov	r1, r3
 8004318:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800431c:	f001 f854 	bl	80053c8 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM20_MspInit 1 */

  /* USER CODE END TIM20_MspInit 1 */
  }
}
 8004320:	e0a7      	b.n	8004472 <HAL_TIM_Encoder_MspInit+0x1c6>
  else if(tim_encoderHandle->Instance==TIM4)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4a57      	ldr	r2, [pc, #348]	@ (8004484 <HAL_TIM_Encoder_MspInit+0x1d8>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d12a      	bne.n	8004382 <HAL_TIM_Encoder_MspInit+0xd6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800432c:	4b54      	ldr	r3, [pc, #336]	@ (8004480 <HAL_TIM_Encoder_MspInit+0x1d4>)
 800432e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004330:	4a53      	ldr	r2, [pc, #332]	@ (8004480 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8004332:	f043 0304 	orr.w	r3, r3, #4
 8004336:	6593      	str	r3, [r2, #88]	@ 0x58
 8004338:	4b51      	ldr	r3, [pc, #324]	@ (8004480 <HAL_TIM_Encoder_MspInit+0x1d4>)
 800433a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800433c:	f003 0304 	and.w	r3, r3, #4
 8004340:	623b      	str	r3, [r7, #32]
 8004342:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004344:	4b4e      	ldr	r3, [pc, #312]	@ (8004480 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8004346:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004348:	4a4d      	ldr	r2, [pc, #308]	@ (8004480 <HAL_TIM_Encoder_MspInit+0x1d4>)
 800434a:	f043 0301 	orr.w	r3, r3, #1
 800434e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004350:	4b4b      	ldr	r3, [pc, #300]	@ (8004480 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8004352:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004354:	f003 0301 	and.w	r3, r3, #1
 8004358:	61fb      	str	r3, [r7, #28]
 800435a:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800435c:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8004360:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004362:	2302      	movs	r3, #2
 8004364:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004366:	2300      	movs	r3, #0
 8004368:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800436a:	2300      	movs	r3, #0
 800436c:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 800436e:	230a      	movs	r3, #10
 8004370:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004372:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004376:	4619      	mov	r1, r3
 8004378:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800437c:	f001 f824 	bl	80053c8 <HAL_GPIO_Init>
}
 8004380:	e077      	b.n	8004472 <HAL_TIM_Encoder_MspInit+0x1c6>
  else if(tim_encoderHandle->Instance==TIM5)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a40      	ldr	r2, [pc, #256]	@ (8004488 <HAL_TIM_Encoder_MspInit+0x1dc>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d129      	bne.n	80043e0 <HAL_TIM_Encoder_MspInit+0x134>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800438c:	4b3c      	ldr	r3, [pc, #240]	@ (8004480 <HAL_TIM_Encoder_MspInit+0x1d4>)
 800438e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004390:	4a3b      	ldr	r2, [pc, #236]	@ (8004480 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8004392:	f043 0308 	orr.w	r3, r3, #8
 8004396:	6593      	str	r3, [r2, #88]	@ 0x58
 8004398:	4b39      	ldr	r3, [pc, #228]	@ (8004480 <HAL_TIM_Encoder_MspInit+0x1d4>)
 800439a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800439c:	f003 0308 	and.w	r3, r3, #8
 80043a0:	61bb      	str	r3, [r7, #24]
 80043a2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80043a4:	4b36      	ldr	r3, [pc, #216]	@ (8004480 <HAL_TIM_Encoder_MspInit+0x1d4>)
 80043a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80043a8:	4a35      	ldr	r2, [pc, #212]	@ (8004480 <HAL_TIM_Encoder_MspInit+0x1d4>)
 80043aa:	f043 0301 	orr.w	r3, r3, #1
 80043ae:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80043b0:	4b33      	ldr	r3, [pc, #204]	@ (8004480 <HAL_TIM_Encoder_MspInit+0x1d4>)
 80043b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80043b4:	f003 0301 	and.w	r3, r3, #1
 80043b8:	617b      	str	r3, [r7, #20]
 80043ba:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80043bc:	2303      	movs	r3, #3
 80043be:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043c0:	2302      	movs	r3, #2
 80043c2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043c4:	2300      	movs	r3, #0
 80043c6:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043c8:	2300      	movs	r3, #0
 80043ca:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80043cc:	2302      	movs	r3, #2
 80043ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80043d0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80043d4:	4619      	mov	r1, r3
 80043d6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80043da:	f000 fff5 	bl	80053c8 <HAL_GPIO_Init>
}
 80043de:	e048      	b.n	8004472 <HAL_TIM_Encoder_MspInit+0x1c6>
  else if(tim_encoderHandle->Instance==TIM20)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4a29      	ldr	r2, [pc, #164]	@ (800448c <HAL_TIM_Encoder_MspInit+0x1e0>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d143      	bne.n	8004472 <HAL_TIM_Encoder_MspInit+0x1c6>
    __HAL_RCC_TIM20_CLK_ENABLE();
 80043ea:	4b25      	ldr	r3, [pc, #148]	@ (8004480 <HAL_TIM_Encoder_MspInit+0x1d4>)
 80043ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80043ee:	4a24      	ldr	r2, [pc, #144]	@ (8004480 <HAL_TIM_Encoder_MspInit+0x1d4>)
 80043f0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80043f4:	6613      	str	r3, [r2, #96]	@ 0x60
 80043f6:	4b22      	ldr	r3, [pc, #136]	@ (8004480 <HAL_TIM_Encoder_MspInit+0x1d4>)
 80043f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80043fa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80043fe:	613b      	str	r3, [r7, #16]
 8004400:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004402:	4b1f      	ldr	r3, [pc, #124]	@ (8004480 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8004404:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004406:	4a1e      	ldr	r2, [pc, #120]	@ (8004480 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8004408:	f043 0304 	orr.w	r3, r3, #4
 800440c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800440e:	4b1c      	ldr	r3, [pc, #112]	@ (8004480 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8004410:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004412:	f003 0304 	and.w	r3, r3, #4
 8004416:	60fb      	str	r3, [r7, #12]
 8004418:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800441a:	4b19      	ldr	r3, [pc, #100]	@ (8004480 <HAL_TIM_Encoder_MspInit+0x1d4>)
 800441c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800441e:	4a18      	ldr	r2, [pc, #96]	@ (8004480 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8004420:	f043 0302 	orr.w	r3, r3, #2
 8004424:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004426:	4b16      	ldr	r3, [pc, #88]	@ (8004480 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8004428:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800442a:	f003 0302 	and.w	r3, r3, #2
 800442e:	60bb      	str	r3, [r7, #8]
 8004430:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004432:	2304      	movs	r3, #4
 8004434:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004436:	2302      	movs	r3, #2
 8004438:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800443a:	2300      	movs	r3, #0
 800443c:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800443e:	2300      	movs	r3, #0
 8004440:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM20;
 8004442:	2306      	movs	r3, #6
 8004444:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004446:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800444a:	4619      	mov	r1, r3
 800444c:	4810      	ldr	r0, [pc, #64]	@ (8004490 <HAL_TIM_Encoder_MspInit+0x1e4>)
 800444e:	f000 ffbb 	bl	80053c8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004452:	2304      	movs	r3, #4
 8004454:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004456:	2302      	movs	r3, #2
 8004458:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800445a:	2300      	movs	r3, #0
 800445c:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800445e:	2300      	movs	r3, #0
 8004460:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM20;
 8004462:	2303      	movs	r3, #3
 8004464:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004466:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800446a:	4619      	mov	r1, r3
 800446c:	4809      	ldr	r0, [pc, #36]	@ (8004494 <HAL_TIM_Encoder_MspInit+0x1e8>)
 800446e:	f000 ffab 	bl	80053c8 <HAL_GPIO_Init>
}
 8004472:	bf00      	nop
 8004474:	3740      	adds	r7, #64	@ 0x40
 8004476:	46bd      	mov	sp, r7
 8004478:	bd80      	pop	{r7, pc}
 800447a:	bf00      	nop
 800447c:	40000400 	.word	0x40000400
 8004480:	40021000 	.word	0x40021000
 8004484:	40000800 	.word	0x40000800
 8004488:	40000c00 	.word	0x40000c00
 800448c:	40015000 	.word	0x40015000
 8004490:	48000800 	.word	0x48000800
 8004494:	48000400 	.word	0x48000400

08004498 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8004498:	b480      	push	{r7}
 800449a:	b085      	sub	sp, #20
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM8)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a0a      	ldr	r2, [pc, #40]	@ (80044d0 <HAL_TIM_PWM_MspInit+0x38>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d10b      	bne.n	80044c2 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* TIM8 clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 80044aa:	4b0a      	ldr	r3, [pc, #40]	@ (80044d4 <HAL_TIM_PWM_MspInit+0x3c>)
 80044ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044ae:	4a09      	ldr	r2, [pc, #36]	@ (80044d4 <HAL_TIM_PWM_MspInit+0x3c>)
 80044b0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80044b4:	6613      	str	r3, [r2, #96]	@ 0x60
 80044b6:	4b07      	ldr	r3, [pc, #28]	@ (80044d4 <HAL_TIM_PWM_MspInit+0x3c>)
 80044b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044ba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80044be:	60fb      	str	r3, [r7, #12]
 80044c0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 80044c2:	bf00      	nop
 80044c4:	3714      	adds	r7, #20
 80044c6:	46bd      	mov	sp, r7
 80044c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044cc:	4770      	bx	lr
 80044ce:	bf00      	nop
 80044d0:	40013400 	.word	0x40013400
 80044d4:	40021000 	.word	0x40021000

080044d8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b088      	sub	sp, #32
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80044e0:	f107 030c 	add.w	r3, r7, #12
 80044e4:	2200      	movs	r2, #0
 80044e6:	601a      	str	r2, [r3, #0]
 80044e8:	605a      	str	r2, [r3, #4]
 80044ea:	609a      	str	r2, [r3, #8]
 80044ec:	60da      	str	r2, [r3, #12]
 80044ee:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM8)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4a11      	ldr	r2, [pc, #68]	@ (800453c <HAL_TIM_MspPostInit+0x64>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d11c      	bne.n	8004534 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80044fa:	4b11      	ldr	r3, [pc, #68]	@ (8004540 <HAL_TIM_MspPostInit+0x68>)
 80044fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80044fe:	4a10      	ldr	r2, [pc, #64]	@ (8004540 <HAL_TIM_MspPostInit+0x68>)
 8004500:	f043 0304 	orr.w	r3, r3, #4
 8004504:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004506:	4b0e      	ldr	r3, [pc, #56]	@ (8004540 <HAL_TIM_MspPostInit+0x68>)
 8004508:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800450a:	f003 0304 	and.w	r3, r3, #4
 800450e:	60bb      	str	r3, [r7, #8]
 8004510:	68bb      	ldr	r3, [r7, #8]
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    PC8     ------> TIM8_CH3
    PC9     ------> TIM8_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8004512:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8004516:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004518:	2302      	movs	r3, #2
 800451a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800451c:	2300      	movs	r3, #0
 800451e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004520:	2300      	movs	r3, #0
 8004522:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8004524:	2304      	movs	r3, #4
 8004526:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004528:	f107 030c 	add.w	r3, r7, #12
 800452c:	4619      	mov	r1, r3
 800452e:	4805      	ldr	r0, [pc, #20]	@ (8004544 <HAL_TIM_MspPostInit+0x6c>)
 8004530:	f000 ff4a 	bl	80053c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8004534:	bf00      	nop
 8004536:	3720      	adds	r7, #32
 8004538:	46bd      	mov	sp, r7
 800453a:	bd80      	pop	{r7, pc}
 800453c:	40013400 	.word	0x40013400
 8004540:	40021000 	.word	0x40021000
 8004544:	48000800 	.word	0x48000800

08004548 <transporter_begin>:
FIR lowPassFilter3;
FIR lowPassFilter4;

SKID_KINEMATIC robot_kinematics;

void transporter_begin() {
 8004548:	b580      	push	{r7, lr}
 800454a:	b082      	sub	sp, #8
 800454c:	af02      	add	r7, sp, #8
	SKID_init(&robot_kinematics, WHEEL_RADIUS, WHEEL_DISTANCE, MAX_LINEAR_VEL, MAX_ANGULAR_VEL);
 800454e:	eddf 1a62 	vldr	s3, [pc, #392]	@ 80046d8 <transporter_begin+0x190>
 8004552:	ed9f 1a62 	vldr	s2, [pc, #392]	@ 80046dc <transporter_begin+0x194>
 8004556:	eddf 0a62 	vldr	s1, [pc, #392]	@ 80046e0 <transporter_begin+0x198>
 800455a:	ed9f 0a62 	vldr	s0, [pc, #392]	@ 80046e4 <transporter_begin+0x19c>
 800455e:	4862      	ldr	r0, [pc, #392]	@ (80046e8 <transporter_begin+0x1a0>)
 8004560:	f7ff f86c 	bl	800363c <SKID_init>

	QEI_init(&encoder1, ENC_TIM1, ENC_PPR, ENC_FREQ, MOTOR_RATIO);
 8004564:	ed9f 0a61 	vldr	s0, [pc, #388]	@ 80046ec <transporter_begin+0x1a4>
 8004568:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800456c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004570:	495f      	ldr	r1, [pc, #380]	@ (80046f0 <transporter_begin+0x1a8>)
 8004572:	4860      	ldr	r0, [pc, #384]	@ (80046f4 <transporter_begin+0x1ac>)
 8004574:	f7fd f9f6 	bl	8001964 <QEI_init>
	QEI_init(&encoder2, ENC_TIM2, ENC_PPR, ENC_FREQ, MOTOR_RATIO);
 8004578:	ed9f 0a5c 	vldr	s0, [pc, #368]	@ 80046ec <transporter_begin+0x1a4>
 800457c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004580:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004584:	495c      	ldr	r1, [pc, #368]	@ (80046f8 <transporter_begin+0x1b0>)
 8004586:	485d      	ldr	r0, [pc, #372]	@ (80046fc <transporter_begin+0x1b4>)
 8004588:	f7fd f9ec 	bl	8001964 <QEI_init>
	QEI_init(&encoder3, ENC_TIM3, ENC_PPR, ENC_FREQ, MOTOR_RATIO);
 800458c:	ed9f 0a57 	vldr	s0, [pc, #348]	@ 80046ec <transporter_begin+0x1a4>
 8004590:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004594:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004598:	4959      	ldr	r1, [pc, #356]	@ (8004700 <transporter_begin+0x1b8>)
 800459a:	485a      	ldr	r0, [pc, #360]	@ (8004704 <transporter_begin+0x1bc>)
 800459c:	f7fd f9e2 	bl	8001964 <QEI_init>
	QEI_init(&encoder4, ENC_TIM4, ENC_PPR, ENC_FREQ, MOTOR_RATIO);
 80045a0:	ed9f 0a52 	vldr	s0, [pc, #328]	@ 80046ec <transporter_begin+0x1a4>
 80045a4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80045a8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80045ac:	4956      	ldr	r1, [pc, #344]	@ (8004708 <transporter_begin+0x1c0>)
 80045ae:	4857      	ldr	r0, [pc, #348]	@ (800470c <transporter_begin+0x1c4>)
 80045b0:	f7fd f9d8 	bl	8001964 <QEI_init>

	MDXX_GPIO_init(&motor1, MOTOR1_TIM, MOTOR1_TIM_CH, MOTOR1_GPIOx, MOTOR1_GPIO_Pin);
 80045b4:	2320      	movs	r3, #32
 80045b6:	9300      	str	r3, [sp, #0]
 80045b8:	4b55      	ldr	r3, [pc, #340]	@ (8004710 <transporter_begin+0x1c8>)
 80045ba:	2200      	movs	r2, #0
 80045bc:	4955      	ldr	r1, [pc, #340]	@ (8004714 <transporter_begin+0x1cc>)
 80045be:	4856      	ldr	r0, [pc, #344]	@ (8004718 <transporter_begin+0x1d0>)
 80045c0:	f7fc fe2d 	bl	800121e <MDXX_GPIO_init>
	MDXX_GPIO_init(&motor2, MOTOR2_TIM, MOTOR2_TIM_CH, MOTOR2_GPIOx, MOTOR2_GPIO_Pin);
 80045c4:	2310      	movs	r3, #16
 80045c6:	9300      	str	r3, [sp, #0]
 80045c8:	4b51      	ldr	r3, [pc, #324]	@ (8004710 <transporter_begin+0x1c8>)
 80045ca:	2204      	movs	r2, #4
 80045cc:	4951      	ldr	r1, [pc, #324]	@ (8004714 <transporter_begin+0x1cc>)
 80045ce:	4853      	ldr	r0, [pc, #332]	@ (800471c <transporter_begin+0x1d4>)
 80045d0:	f7fc fe25 	bl	800121e <MDXX_GPIO_init>
	MDXX_GPIO_init(&motor3, MOTOR3_TIM, MOTOR3_TIM_CH, MOTOR3_GPIOx, MOTOR3_GPIO_Pin);
 80045d4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80045d8:	9300      	str	r3, [sp, #0]
 80045da:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80045de:	2208      	movs	r2, #8
 80045e0:	494c      	ldr	r1, [pc, #304]	@ (8004714 <transporter_begin+0x1cc>)
 80045e2:	484f      	ldr	r0, [pc, #316]	@ (8004720 <transporter_begin+0x1d8>)
 80045e4:	f7fc fe1b 	bl	800121e <MDXX_GPIO_init>
	MDXX_GPIO_init(&motor4, MOTOR4_TIM, MOTOR4_TIM_CH, MOTOR4_GPIOx, MOTOR4_GPIO_Pin);
 80045e8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80045ec:	9300      	str	r3, [sp, #0]
 80045ee:	4b48      	ldr	r3, [pc, #288]	@ (8004710 <transporter_begin+0x1c8>)
 80045f0:	220c      	movs	r2, #12
 80045f2:	4948      	ldr	r1, [pc, #288]	@ (8004714 <transporter_begin+0x1cc>)
 80045f4:	484b      	ldr	r0, [pc, #300]	@ (8004724 <transporter_begin+0x1dc>)
 80045f6:	f7fc fe12 	bl	800121e <MDXX_GPIO_init>

	MDXX_set_range(&motor1, 2000, 0);
 80045fa:	eddf 0a4b 	vldr	s1, [pc, #300]	@ 8004728 <transporter_begin+0x1e0>
 80045fe:	ed9f 0a4b 	vldr	s0, [pc, #300]	@ 800472c <transporter_begin+0x1e4>
 8004602:	4845      	ldr	r0, [pc, #276]	@ (8004718 <transporter_begin+0x1d0>)
 8004604:	f7fc fe30 	bl	8001268 <MDXX_set_range>
	MDXX_set_range(&motor2, 2000, 0);
 8004608:	eddf 0a47 	vldr	s1, [pc, #284]	@ 8004728 <transporter_begin+0x1e0>
 800460c:	ed9f 0a47 	vldr	s0, [pc, #284]	@ 800472c <transporter_begin+0x1e4>
 8004610:	4842      	ldr	r0, [pc, #264]	@ (800471c <transporter_begin+0x1d4>)
 8004612:	f7fc fe29 	bl	8001268 <MDXX_set_range>
	MDXX_set_range(&motor3, 2000, 0);
 8004616:	eddf 0a44 	vldr	s1, [pc, #272]	@ 8004728 <transporter_begin+0x1e0>
 800461a:	ed9f 0a44 	vldr	s0, [pc, #272]	@ 800472c <transporter_begin+0x1e4>
 800461e:	4840      	ldr	r0, [pc, #256]	@ (8004720 <transporter_begin+0x1d8>)
 8004620:	f7fc fe22 	bl	8001268 <MDXX_set_range>
	MDXX_set_range(&motor4, 2000, 0);
 8004624:	eddf 0a40 	vldr	s1, [pc, #256]	@ 8004728 <transporter_begin+0x1e0>
 8004628:	ed9f 0a40 	vldr	s0, [pc, #256]	@ 800472c <transporter_begin+0x1e4>
 800462c:	483d      	ldr	r0, [pc, #244]	@ (8004724 <transporter_begin+0x1dc>)
 800462e:	f7fc fe1b 	bl	8001268 <MDXX_set_range>

	PID_CONTROLLER_Init(&pid1, 500000, 7500, 0, 65535);
 8004632:	eddf 1a3f 	vldr	s3, [pc, #252]	@ 8004730 <transporter_begin+0x1e8>
 8004636:	ed9f 1a3c 	vldr	s2, [pc, #240]	@ 8004728 <transporter_begin+0x1e0>
 800463a:	eddf 0a3e 	vldr	s1, [pc, #248]	@ 8004734 <transporter_begin+0x1ec>
 800463e:	ed9f 0a3e 	vldr	s0, [pc, #248]	@ 8004738 <transporter_begin+0x1f0>
 8004642:	483e      	ldr	r0, [pc, #248]	@ (800473c <transporter_begin+0x1f4>)
 8004644:	f7fc fd2f 	bl	80010a6 <PID_CONTROLLER_Init>
	PID_CONTROLLER_Init(&pid2, 500000, 7500, 0, 65535);
 8004648:	eddf 1a39 	vldr	s3, [pc, #228]	@ 8004730 <transporter_begin+0x1e8>
 800464c:	ed9f 1a36 	vldr	s2, [pc, #216]	@ 8004728 <transporter_begin+0x1e0>
 8004650:	eddf 0a38 	vldr	s1, [pc, #224]	@ 8004734 <transporter_begin+0x1ec>
 8004654:	ed9f 0a38 	vldr	s0, [pc, #224]	@ 8004738 <transporter_begin+0x1f0>
 8004658:	4839      	ldr	r0, [pc, #228]	@ (8004740 <transporter_begin+0x1f8>)
 800465a:	f7fc fd24 	bl	80010a6 <PID_CONTROLLER_Init>
	PID_CONTROLLER_Init(&pid3, 500000, 7500, 0, 65535);
 800465e:	eddf 1a34 	vldr	s3, [pc, #208]	@ 8004730 <transporter_begin+0x1e8>
 8004662:	ed9f 1a31 	vldr	s2, [pc, #196]	@ 8004728 <transporter_begin+0x1e0>
 8004666:	eddf 0a33 	vldr	s1, [pc, #204]	@ 8004734 <transporter_begin+0x1ec>
 800466a:	ed9f 0a33 	vldr	s0, [pc, #204]	@ 8004738 <transporter_begin+0x1f0>
 800466e:	4835      	ldr	r0, [pc, #212]	@ (8004744 <transporter_begin+0x1fc>)
 8004670:	f7fc fd19 	bl	80010a6 <PID_CONTROLLER_Init>
	PID_CONTROLLER_Init(&pid4, 500000, 7500, 0, 65535);
 8004674:	eddf 1a2e 	vldr	s3, [pc, #184]	@ 8004730 <transporter_begin+0x1e8>
 8004678:	ed9f 1a2b 	vldr	s2, [pc, #172]	@ 8004728 <transporter_begin+0x1e0>
 800467c:	eddf 0a2d 	vldr	s1, [pc, #180]	@ 8004734 <transporter_begin+0x1ec>
 8004680:	ed9f 0a2d 	vldr	s0, [pc, #180]	@ 8004738 <transporter_begin+0x1f0>
 8004684:	4830      	ldr	r0, [pc, #192]	@ (8004748 <transporter_begin+0x200>)
 8004686:	f7fc fd0e 	bl	80010a6 <PID_CONTROLLER_Init>
//	PID_CONTROLLER_Init(&pid4, 500000, 7500, 0, 65535);

	FIR_init(&lowPassFilter1, NUM_TAPS, CUTOFF_FREQ, SAMPLE_RATE);
 800468a:	eddf 0a30 	vldr	s1, [pc, #192]	@ 800474c <transporter_begin+0x204>
 800468e:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 8004692:	211f      	movs	r1, #31
 8004694:	482e      	ldr	r0, [pc, #184]	@ (8004750 <transporter_begin+0x208>)
 8004696:	f7fc fec1 	bl	800141c <FIR_init>
	FIR_init(&lowPassFilter2, NUM_TAPS, CUTOFF_FREQ, SAMPLE_RATE);
 800469a:	eddf 0a2c 	vldr	s1, [pc, #176]	@ 800474c <transporter_begin+0x204>
 800469e:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 80046a2:	211f      	movs	r1, #31
 80046a4:	482b      	ldr	r0, [pc, #172]	@ (8004754 <transporter_begin+0x20c>)
 80046a6:	f7fc feb9 	bl	800141c <FIR_init>
	FIR_init(&lowPassFilter3, NUM_TAPS, CUTOFF_FREQ, SAMPLE_RATE);
 80046aa:	eddf 0a28 	vldr	s1, [pc, #160]	@ 800474c <transporter_begin+0x204>
 80046ae:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 80046b2:	211f      	movs	r1, #31
 80046b4:	4828      	ldr	r0, [pc, #160]	@ (8004758 <transporter_begin+0x210>)
 80046b6:	f7fc feb1 	bl	800141c <FIR_init>
	FIR_init(&lowPassFilter4, NUM_TAPS, CUTOFF_FREQ, SAMPLE_RATE);
 80046ba:	eddf 0a24 	vldr	s1, [pc, #144]	@ 800474c <transporter_begin+0x204>
 80046be:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 80046c2:	211f      	movs	r1, #31
 80046c4:	4825      	ldr	r0, [pc, #148]	@ (800475c <transporter_begin+0x214>)
 80046c6:	f7fc fea9 	bl	800141c <FIR_init>

	HAL_TIM_Base_Start_IT(CONTROL_TIM);
 80046ca:	4825      	ldr	r0, [pc, #148]	@ (8004760 <transporter_begin+0x218>)
 80046cc:	f002 f9cc 	bl	8006a68 <HAL_TIM_Base_Start_IT>
}
 80046d0:	bf00      	nop
 80046d2:	46bd      	mov	sp, r7
 80046d4:	bd80      	pop	{r7, pc}
 80046d6:	bf00      	nop
 80046d8:	3e6eeeef 	.word	0x3e6eeeef
 80046dc:	3dae147b 	.word	0x3dae147b
 80046e0:	40733333 	.word	0x40733333
 80046e4:	3dfae148 	.word	0x3dfae148
 80046e8:	20004854 	.word	0x20004854
 80046ec:	3ea8f5c3 	.word	0x3ea8f5c3
 80046f0:	20004398 	.word	0x20004398
 80046f4:	20004644 	.word	0x20004644
 80046f8:	200043e4 	.word	0x200043e4
 80046fc:	20004690 	.word	0x20004690
 8004700:	20004430 	.word	0x20004430
 8004704:	200046dc 	.word	0x200046dc
 8004708:	200044c8 	.word	0x200044c8
 800470c:	20004728 	.word	0x20004728
 8004710:	48000400 	.word	0x48000400
 8004714:	2000447c 	.word	0x2000447c
 8004718:	20004514 	.word	0x20004514
 800471c:	20004560 	.word	0x20004560
 8004720:	200045ac 	.word	0x200045ac
 8004724:	200045f8 	.word	0x200045f8
 8004728:	00000000 	.word	0x00000000
 800472c:	44fa0000 	.word	0x44fa0000
 8004730:	477fff00 	.word	0x477fff00
 8004734:	45ea6000 	.word	0x45ea6000
 8004738:	48f42400 	.word	0x48f42400
 800473c:	20004774 	.word	0x20004774
 8004740:	200047a0 	.word	0x200047a0
 8004744:	200047cc 	.word	0x200047cc
 8004748:	200047f8 	.word	0x200047f8
 800474c:	447a0000 	.word	0x447a0000
 8004750:	20004824 	.word	0x20004824
 8004754:	20004830 	.word	0x20004830
 8004758:	2000483c 	.word	0x2000483c
 800475c:	20004848 	.word	0x20004848
 8004760:	2000434c 	.word	0x2000434c

08004764 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_lpuart1_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8004768:	4b20      	ldr	r3, [pc, #128]	@ (80047ec <MX_LPUART1_UART_Init+0x88>)
 800476a:	4a21      	ldr	r2, [pc, #132]	@ (80047f0 <MX_LPUART1_UART_Init+0x8c>)
 800476c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 2000000;
 800476e:	4b1f      	ldr	r3, [pc, #124]	@ (80047ec <MX_LPUART1_UART_Init+0x88>)
 8004770:	4a20      	ldr	r2, [pc, #128]	@ (80047f4 <MX_LPUART1_UART_Init+0x90>)
 8004772:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004774:	4b1d      	ldr	r3, [pc, #116]	@ (80047ec <MX_LPUART1_UART_Init+0x88>)
 8004776:	2200      	movs	r2, #0
 8004778:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800477a:	4b1c      	ldr	r3, [pc, #112]	@ (80047ec <MX_LPUART1_UART_Init+0x88>)
 800477c:	2200      	movs	r2, #0
 800477e:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8004780:	4b1a      	ldr	r3, [pc, #104]	@ (80047ec <MX_LPUART1_UART_Init+0x88>)
 8004782:	2200      	movs	r2, #0
 8004784:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8004786:	4b19      	ldr	r3, [pc, #100]	@ (80047ec <MX_LPUART1_UART_Init+0x88>)
 8004788:	220c      	movs	r2, #12
 800478a:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800478c:	4b17      	ldr	r3, [pc, #92]	@ (80047ec <MX_LPUART1_UART_Init+0x88>)
 800478e:	2200      	movs	r2, #0
 8004790:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004792:	4b16      	ldr	r3, [pc, #88]	@ (80047ec <MX_LPUART1_UART_Init+0x88>)
 8004794:	2200      	movs	r2, #0
 8004796:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004798:	4b14      	ldr	r3, [pc, #80]	@ (80047ec <MX_LPUART1_UART_Init+0x88>)
 800479a:	2200      	movs	r2, #0
 800479c:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800479e:	4b13      	ldr	r3, [pc, #76]	@ (80047ec <MX_LPUART1_UART_Init+0x88>)
 80047a0:	2200      	movs	r2, #0
 80047a2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80047a4:	4811      	ldr	r0, [pc, #68]	@ (80047ec <MX_LPUART1_UART_Init+0x88>)
 80047a6:	f003 fe27 	bl	80083f8 <HAL_UART_Init>
 80047aa:	4603      	mov	r3, r0
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d001      	beq.n	80047b4 <MX_LPUART1_UART_Init+0x50>
  {
    Error_Handler();
 80047b0:	f7fe fae0 	bl	8002d74 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80047b4:	2100      	movs	r1, #0
 80047b6:	480d      	ldr	r0, [pc, #52]	@ (80047ec <MX_LPUART1_UART_Init+0x88>)
 80047b8:	f005 fb37 	bl	8009e2a <HAL_UARTEx_SetTxFifoThreshold>
 80047bc:	4603      	mov	r3, r0
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d001      	beq.n	80047c6 <MX_LPUART1_UART_Init+0x62>
  {
    Error_Handler();
 80047c2:	f7fe fad7 	bl	8002d74 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80047c6:	2100      	movs	r1, #0
 80047c8:	4808      	ldr	r0, [pc, #32]	@ (80047ec <MX_LPUART1_UART_Init+0x88>)
 80047ca:	f005 fb6c 	bl	8009ea6 <HAL_UARTEx_SetRxFifoThreshold>
 80047ce:	4603      	mov	r3, r0
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d001      	beq.n	80047d8 <MX_LPUART1_UART_Init+0x74>
  {
    Error_Handler();
 80047d4:	f7fe face 	bl	8002d74 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80047d8:	4804      	ldr	r0, [pc, #16]	@ (80047ec <MX_LPUART1_UART_Init+0x88>)
 80047da:	f005 faed 	bl	8009db8 <HAL_UARTEx_DisableFifoMode>
 80047de:	4603      	mov	r3, r0
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d001      	beq.n	80047e8 <MX_LPUART1_UART_Init+0x84>
  {
    Error_Handler();
 80047e4:	f7fe fac6 	bl	8002d74 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80047e8:	bf00      	nop
 80047ea:	bd80      	pop	{r7, pc}
 80047ec:	2000487c 	.word	0x2000487c
 80047f0:	40008000 	.word	0x40008000
 80047f4:	001e8480 	.word	0x001e8480

080047f8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b09e      	sub	sp, #120	@ 0x78
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004800:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8004804:	2200      	movs	r2, #0
 8004806:	601a      	str	r2, [r3, #0]
 8004808:	605a      	str	r2, [r3, #4]
 800480a:	609a      	str	r2, [r3, #8]
 800480c:	60da      	str	r2, [r3, #12]
 800480e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004810:	f107 0310 	add.w	r3, r7, #16
 8004814:	2254      	movs	r2, #84	@ 0x54
 8004816:	2100      	movs	r1, #0
 8004818:	4618      	mov	r0, r3
 800481a:	f016 fd9f 	bl	801b35c <memset>
  if(uartHandle->Instance==LPUART1)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4a4e      	ldr	r2, [pc, #312]	@ (800495c <HAL_UART_MspInit+0x164>)
 8004824:	4293      	cmp	r3, r2
 8004826:	f040 8094 	bne.w	8004952 <HAL_UART_MspInit+0x15a>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 800482a:	2320      	movs	r3, #32
 800482c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800482e:	2300      	movs	r3, #0
 8004830:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004832:	f107 0310 	add.w	r3, r7, #16
 8004836:	4618      	mov	r0, r3
 8004838:	f001 fe00 	bl	800643c <HAL_RCCEx_PeriphCLKConfig>
 800483c:	4603      	mov	r3, r0
 800483e:	2b00      	cmp	r3, #0
 8004840:	d001      	beq.n	8004846 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8004842:	f7fe fa97 	bl	8002d74 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8004846:	4b46      	ldr	r3, [pc, #280]	@ (8004960 <HAL_UART_MspInit+0x168>)
 8004848:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800484a:	4a45      	ldr	r2, [pc, #276]	@ (8004960 <HAL_UART_MspInit+0x168>)
 800484c:	f043 0301 	orr.w	r3, r3, #1
 8004850:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8004852:	4b43      	ldr	r3, [pc, #268]	@ (8004960 <HAL_UART_MspInit+0x168>)
 8004854:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004856:	f003 0301 	and.w	r3, r3, #1
 800485a:	60fb      	str	r3, [r7, #12]
 800485c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800485e:	4b40      	ldr	r3, [pc, #256]	@ (8004960 <HAL_UART_MspInit+0x168>)
 8004860:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004862:	4a3f      	ldr	r2, [pc, #252]	@ (8004960 <HAL_UART_MspInit+0x168>)
 8004864:	f043 0301 	orr.w	r3, r3, #1
 8004868:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800486a:	4b3d      	ldr	r3, [pc, #244]	@ (8004960 <HAL_UART_MspInit+0x168>)
 800486c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800486e:	f003 0301 	and.w	r3, r3, #1
 8004872:	60bb      	str	r3, [r7, #8]
 8004874:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8004876:	230c      	movs	r3, #12
 8004878:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800487a:	2302      	movs	r3, #2
 800487c:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800487e:	2300      	movs	r3, #0
 8004880:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004882:	2300      	movs	r3, #0
 8004884:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8004886:	230c      	movs	r3, #12
 8004888:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800488a:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800488e:	4619      	mov	r1, r3
 8004890:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004894:	f000 fd98 	bl	80053c8 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel1;
 8004898:	4b32      	ldr	r3, [pc, #200]	@ (8004964 <HAL_UART_MspInit+0x16c>)
 800489a:	4a33      	ldr	r2, [pc, #204]	@ (8004968 <HAL_UART_MspInit+0x170>)
 800489c:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 800489e:	4b31      	ldr	r3, [pc, #196]	@ (8004964 <HAL_UART_MspInit+0x16c>)
 80048a0:	2222      	movs	r2, #34	@ 0x22
 80048a2:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80048a4:	4b2f      	ldr	r3, [pc, #188]	@ (8004964 <HAL_UART_MspInit+0x16c>)
 80048a6:	2200      	movs	r2, #0
 80048a8:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80048aa:	4b2e      	ldr	r3, [pc, #184]	@ (8004964 <HAL_UART_MspInit+0x16c>)
 80048ac:	2200      	movs	r2, #0
 80048ae:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80048b0:	4b2c      	ldr	r3, [pc, #176]	@ (8004964 <HAL_UART_MspInit+0x16c>)
 80048b2:	2280      	movs	r2, #128	@ 0x80
 80048b4:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80048b6:	4b2b      	ldr	r3, [pc, #172]	@ (8004964 <HAL_UART_MspInit+0x16c>)
 80048b8:	2200      	movs	r2, #0
 80048ba:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80048bc:	4b29      	ldr	r3, [pc, #164]	@ (8004964 <HAL_UART_MspInit+0x16c>)
 80048be:	2200      	movs	r2, #0
 80048c0:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_CIRCULAR;
 80048c2:	4b28      	ldr	r3, [pc, #160]	@ (8004964 <HAL_UART_MspInit+0x16c>)
 80048c4:	2220      	movs	r2, #32
 80048c6:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80048c8:	4b26      	ldr	r3, [pc, #152]	@ (8004964 <HAL_UART_MspInit+0x16c>)
 80048ca:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 80048ce:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 80048d0:	4824      	ldr	r0, [pc, #144]	@ (8004964 <HAL_UART_MspInit+0x16c>)
 80048d2:	f000 fa3b 	bl	8004d4c <HAL_DMA_Init>
 80048d6:	4603      	mov	r3, r0
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d001      	beq.n	80048e0 <HAL_UART_MspInit+0xe8>
    {
      Error_Handler();
 80048dc:	f7fe fa4a 	bl	8002d74 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	4a20      	ldr	r2, [pc, #128]	@ (8004964 <HAL_UART_MspInit+0x16c>)
 80048e4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80048e8:	4a1e      	ldr	r2, [pc, #120]	@ (8004964 <HAL_UART_MspInit+0x16c>)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel2;
 80048ee:	4b1f      	ldr	r3, [pc, #124]	@ (800496c <HAL_UART_MspInit+0x174>)
 80048f0:	4a1f      	ldr	r2, [pc, #124]	@ (8004970 <HAL_UART_MspInit+0x178>)
 80048f2:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 80048f4:	4b1d      	ldr	r3, [pc, #116]	@ (800496c <HAL_UART_MspInit+0x174>)
 80048f6:	2223      	movs	r2, #35	@ 0x23
 80048f8:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80048fa:	4b1c      	ldr	r3, [pc, #112]	@ (800496c <HAL_UART_MspInit+0x174>)
 80048fc:	2210      	movs	r2, #16
 80048fe:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004900:	4b1a      	ldr	r3, [pc, #104]	@ (800496c <HAL_UART_MspInit+0x174>)
 8004902:	2200      	movs	r2, #0
 8004904:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004906:	4b19      	ldr	r3, [pc, #100]	@ (800496c <HAL_UART_MspInit+0x174>)
 8004908:	2280      	movs	r2, #128	@ 0x80
 800490a:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800490c:	4b17      	ldr	r3, [pc, #92]	@ (800496c <HAL_UART_MspInit+0x174>)
 800490e:	2200      	movs	r2, #0
 8004910:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004912:	4b16      	ldr	r3, [pc, #88]	@ (800496c <HAL_UART_MspInit+0x174>)
 8004914:	2200      	movs	r2, #0
 8004916:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 8004918:	4b14      	ldr	r3, [pc, #80]	@ (800496c <HAL_UART_MspInit+0x174>)
 800491a:	2200      	movs	r2, #0
 800491c:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800491e:	4b13      	ldr	r3, [pc, #76]	@ (800496c <HAL_UART_MspInit+0x174>)
 8004920:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 8004924:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8004926:	4811      	ldr	r0, [pc, #68]	@ (800496c <HAL_UART_MspInit+0x174>)
 8004928:	f000 fa10 	bl	8004d4c <HAL_DMA_Init>
 800492c:	4603      	mov	r3, r0
 800492e:	2b00      	cmp	r3, #0
 8004930:	d001      	beq.n	8004936 <HAL_UART_MspInit+0x13e>
    {
      Error_Handler();
 8004932:	f7fe fa1f 	bl	8002d74 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_lpuart1_tx);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	4a0c      	ldr	r2, [pc, #48]	@ (800496c <HAL_UART_MspInit+0x174>)
 800493a:	67da      	str	r2, [r3, #124]	@ 0x7c
 800493c:	4a0b      	ldr	r2, [pc, #44]	@ (800496c <HAL_UART_MspInit+0x174>)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 5, 0);
 8004942:	2200      	movs	r2, #0
 8004944:	2105      	movs	r1, #5
 8004946:	205b      	movs	r0, #91	@ 0x5b
 8004948:	f000 f9d8 	bl	8004cfc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 800494c:	205b      	movs	r0, #91	@ 0x5b
 800494e:	f000 f9ef 	bl	8004d30 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 8004952:	bf00      	nop
 8004954:	3778      	adds	r7, #120	@ 0x78
 8004956:	46bd      	mov	sp, r7
 8004958:	bd80      	pop	{r7, pc}
 800495a:	bf00      	nop
 800495c:	40008000 	.word	0x40008000
 8004960:	40021000 	.word	0x40021000
 8004964:	20004910 	.word	0x20004910
 8004968:	40020008 	.word	0x40020008
 800496c:	20004970 	.word	0x20004970
 8004970:	4002001c 	.word	0x4002001c

08004974 <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 8004974:	b580      	push	{r7, lr}
 8004976:	b084      	sub	sp, #16
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8004982:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 8004984:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004988:	4904      	ldr	r1, [pc, #16]	@ (800499c <cubemx_transport_open+0x28>)
 800498a:	68f8      	ldr	r0, [r7, #12]
 800498c:	f003 fe04 	bl	8008598 <HAL_UART_Receive_DMA>
    return true;
 8004990:	2301      	movs	r3, #1
}
 8004992:	4618      	mov	r0, r3
 8004994:	3710      	adds	r7, #16
 8004996:	46bd      	mov	sp, r7
 8004998:	bd80      	pop	{r7, pc}
 800499a:	bf00      	nop
 800499c:	200049d0 	.word	0x200049d0

080049a0 <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b084      	sub	sp, #16
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 80049ae:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 80049b0:	68f8      	ldr	r0, [r7, #12]
 80049b2:	f003 fe3d 	bl	8008630 <HAL_UART_DMAStop>
    return true;
 80049b6:	2301      	movs	r3, #1
}
 80049b8:	4618      	mov	r0, r3
 80049ba:	3710      	adds	r7, #16
 80049bc:	46bd      	mov	sp, r7
 80049be:	bd80      	pop	{r7, pc}

080049c0 <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b086      	sub	sp, #24
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	60f8      	str	r0, [r7, #12]
 80049c8:	60b9      	str	r1, [r7, #8]
 80049ca:	607a      	str	r2, [r7, #4]
 80049cc:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 80049d4:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 80049d6:	697b      	ldr	r3, [r7, #20]
 80049d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049dc:	2b20      	cmp	r3, #32
 80049de:	d11b      	bne.n	8004a18 <cubemx_transport_write+0x58>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	b29b      	uxth	r3, r3
 80049e4:	461a      	mov	r2, r3
 80049e6:	68b9      	ldr	r1, [r7, #8]
 80049e8:	6978      	ldr	r0, [r7, #20]
 80049ea:	f003 fd55 	bl	8008498 <HAL_UART_Transmit_DMA>
 80049ee:	4603      	mov	r3, r0
 80049f0:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 80049f2:	e002      	b.n	80049fa <cubemx_transport_write+0x3a>
            osDelay(1);
 80049f4:	2001      	movs	r0, #1
 80049f6:	f005 fc85 	bl	800a304 <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 80049fa:	7cfb      	ldrb	r3, [r7, #19]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d104      	bne.n	8004a0a <cubemx_transport_write+0x4a>
 8004a00:	697b      	ldr	r3, [r7, #20]
 8004a02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a06:	2b20      	cmp	r3, #32
 8004a08:	d1f4      	bne.n	80049f4 <cubemx_transport_write+0x34>
        }

        return (ret == HAL_OK) ? len : 0;
 8004a0a:	7cfb      	ldrb	r3, [r7, #19]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d101      	bne.n	8004a14 <cubemx_transport_write+0x54>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	e002      	b.n	8004a1a <cubemx_transport_write+0x5a>
 8004a14:	2300      	movs	r3, #0
 8004a16:	e000      	b.n	8004a1a <cubemx_transport_write+0x5a>
    }else{
        return 0;
 8004a18:	2300      	movs	r3, #0
    }
}
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	3718      	adds	r7, #24
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	bd80      	pop	{r7, pc}
	...

08004a24 <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b088      	sub	sp, #32
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	60f8      	str	r0, [r7, #12]
 8004a2c:	60b9      	str	r1, [r7, #8]
 8004a2e:	607a      	str	r2, [r7, #4]
 8004a30:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8004a38:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8004a3e:	b672      	cpsid	i
}
 8004a40:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 8004a42:	697b      	ldr	r3, [r7, #20]
 8004a44:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	685b      	ldr	r3, [r3, #4]
 8004a4c:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 8004a50:	4a1b      	ldr	r2, [pc, #108]	@ (8004ac0 <cubemx_transport_read+0x9c>)
 8004a52:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004a54:	b662      	cpsie	i
}
 8004a56:	bf00      	nop
        __enable_irq();
        ms_used++;
 8004a58:	69fb      	ldr	r3, [r7, #28]
 8004a5a:	3301      	adds	r3, #1
 8004a5c:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 8004a5e:	2001      	movs	r0, #1
 8004a60:	f005 fc50 	bl	800a304 <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 8004a64:	4b17      	ldr	r3, [pc, #92]	@ (8004ac4 <cubemx_transport_read+0xa0>)
 8004a66:	681a      	ldr	r2, [r3, #0]
 8004a68:	4b15      	ldr	r3, [pc, #84]	@ (8004ac0 <cubemx_transport_read+0x9c>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	429a      	cmp	r2, r3
 8004a6e:	d103      	bne.n	8004a78 <cubemx_transport_read+0x54>
 8004a70:	69fa      	ldr	r2, [r7, #28]
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	429a      	cmp	r2, r3
 8004a76:	dbe2      	blt.n	8004a3e <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 8004a78:	2300      	movs	r3, #0
 8004a7a:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8004a7c:	e011      	b.n	8004aa2 <cubemx_transport_read+0x7e>
        buf[wrote] = dma_buffer[dma_head];
 8004a7e:	4b11      	ldr	r3, [pc, #68]	@ (8004ac4 <cubemx_transport_read+0xa0>)
 8004a80:	681a      	ldr	r2, [r3, #0]
 8004a82:	68b9      	ldr	r1, [r7, #8]
 8004a84:	69bb      	ldr	r3, [r7, #24]
 8004a86:	440b      	add	r3, r1
 8004a88:	490f      	ldr	r1, [pc, #60]	@ (8004ac8 <cubemx_transport_read+0xa4>)
 8004a8a:	5c8a      	ldrb	r2, [r1, r2]
 8004a8c:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 8004a8e:	4b0d      	ldr	r3, [pc, #52]	@ (8004ac4 <cubemx_transport_read+0xa0>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	3301      	adds	r3, #1
 8004a94:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004a98:	4a0a      	ldr	r2, [pc, #40]	@ (8004ac4 <cubemx_transport_read+0xa0>)
 8004a9a:	6013      	str	r3, [r2, #0]
        wrote++;
 8004a9c:	69bb      	ldr	r3, [r7, #24]
 8004a9e:	3301      	adds	r3, #1
 8004aa0:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8004aa2:	4b08      	ldr	r3, [pc, #32]	@ (8004ac4 <cubemx_transport_read+0xa0>)
 8004aa4:	681a      	ldr	r2, [r3, #0]
 8004aa6:	4b06      	ldr	r3, [pc, #24]	@ (8004ac0 <cubemx_transport_read+0x9c>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	429a      	cmp	r2, r3
 8004aac:	d003      	beq.n	8004ab6 <cubemx_transport_read+0x92>
 8004aae:	69ba      	ldr	r2, [r7, #24]
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	429a      	cmp	r2, r3
 8004ab4:	d3e3      	bcc.n	8004a7e <cubemx_transport_read+0x5a>
    }
    
    return wrote;
 8004ab6:	69bb      	ldr	r3, [r7, #24]
}
 8004ab8:	4618      	mov	r0, r3
 8004aba:	3720      	adds	r7, #32
 8004abc:	46bd      	mov	sp, r7
 8004abe:	bd80      	pop	{r7, pc}
 8004ac0:	200051d4 	.word	0x200051d4
 8004ac4:	200051d0 	.word	0x200051d0
 8004ac8:	200049d0 	.word	0x200049d0

08004acc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004acc:	480d      	ldr	r0, [pc, #52]	@ (8004b04 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8004ace:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8004ad0:	f7ff f954 	bl	8003d7c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004ad4:	480c      	ldr	r0, [pc, #48]	@ (8004b08 <LoopForever+0x6>)
  ldr r1, =_edata
 8004ad6:	490d      	ldr	r1, [pc, #52]	@ (8004b0c <LoopForever+0xa>)
  ldr r2, =_sidata
 8004ad8:	4a0d      	ldr	r2, [pc, #52]	@ (8004b10 <LoopForever+0xe>)
  movs r3, #0
 8004ada:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8004adc:	e002      	b.n	8004ae4 <LoopCopyDataInit>

08004ade <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004ade:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004ae0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004ae2:	3304      	adds	r3, #4

08004ae4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004ae4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004ae6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004ae8:	d3f9      	bcc.n	8004ade <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004aea:	4a0a      	ldr	r2, [pc, #40]	@ (8004b14 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004aec:	4c0a      	ldr	r4, [pc, #40]	@ (8004b18 <LoopForever+0x16>)
  movs r3, #0
 8004aee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004af0:	e001      	b.n	8004af6 <LoopFillZerobss>

08004af2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004af2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004af4:	3204      	adds	r2, #4

08004af6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004af6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004af8:	d3fb      	bcc.n	8004af2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004afa:	f016 fcc9 	bl	801b490 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004afe:	f7fd fead 	bl	800285c <main>

08004b02 <LoopForever>:

LoopForever:
    b LoopForever
 8004b02:	e7fe      	b.n	8004b02 <LoopForever>
  ldr   r0, =_estack
 8004b04:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004b08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004b0c:	20000488 	.word	0x20000488
  ldr r2, =_sidata
 8004b10:	0801f0cc 	.word	0x0801f0cc
  ldr r2, =_sbss
 8004b14:	20000488 	.word	0x20000488
  ldr r4, =_ebss
 8004b18:	2000b7fc 	.word	0x2000b7fc

08004b1c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004b1c:	e7fe      	b.n	8004b1c <ADC1_2_IRQHandler>

08004b1e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004b1e:	b580      	push	{r7, lr}
 8004b20:	b082      	sub	sp, #8
 8004b22:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004b24:	2300      	movs	r3, #0
 8004b26:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004b28:	2003      	movs	r0, #3
 8004b2a:	f000 f8dc 	bl	8004ce6 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004b2e:	200f      	movs	r0, #15
 8004b30:	f7fe ff9c 	bl	8003a6c <HAL_InitTick>
 8004b34:	4603      	mov	r3, r0
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d002      	beq.n	8004b40 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	71fb      	strb	r3, [r7, #7]
 8004b3e:	e001      	b.n	8004b44 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004b40:	f7fe ff6a 	bl	8003a18 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004b44:	79fb      	ldrb	r3, [r7, #7]

}
 8004b46:	4618      	mov	r0, r3
 8004b48:	3708      	adds	r7, #8
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	bd80      	pop	{r7, pc}
	...

08004b50 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004b50:	b480      	push	{r7}
 8004b52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004b54:	4b05      	ldr	r3, [pc, #20]	@ (8004b6c <HAL_IncTick+0x1c>)
 8004b56:	681a      	ldr	r2, [r3, #0]
 8004b58:	4b05      	ldr	r3, [pc, #20]	@ (8004b70 <HAL_IncTick+0x20>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4413      	add	r3, r2
 8004b5e:	4a03      	ldr	r2, [pc, #12]	@ (8004b6c <HAL_IncTick+0x1c>)
 8004b60:	6013      	str	r3, [r2, #0]
}
 8004b62:	bf00      	nop
 8004b64:	46bd      	mov	sp, r7
 8004b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6a:	4770      	bx	lr
 8004b6c:	200051d8 	.word	0x200051d8
 8004b70:	2000000c 	.word	0x2000000c

08004b74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004b74:	b480      	push	{r7}
 8004b76:	af00      	add	r7, sp, #0
  return uwTick;
 8004b78:	4b03      	ldr	r3, [pc, #12]	@ (8004b88 <HAL_GetTick+0x14>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
}
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b84:	4770      	bx	lr
 8004b86:	bf00      	nop
 8004b88:	200051d8 	.word	0x200051d8

08004b8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	b085      	sub	sp, #20
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	f003 0307 	and.w	r3, r3, #7
 8004b9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004b9c:	4b0c      	ldr	r3, [pc, #48]	@ (8004bd0 <__NVIC_SetPriorityGrouping+0x44>)
 8004b9e:	68db      	ldr	r3, [r3, #12]
 8004ba0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004ba2:	68ba      	ldr	r2, [r7, #8]
 8004ba4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004ba8:	4013      	ands	r3, r2
 8004baa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004bb0:	68bb      	ldr	r3, [r7, #8]
 8004bb2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004bb4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004bb8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004bbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004bbe:	4a04      	ldr	r2, [pc, #16]	@ (8004bd0 <__NVIC_SetPriorityGrouping+0x44>)
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	60d3      	str	r3, [r2, #12]
}
 8004bc4:	bf00      	nop
 8004bc6:	3714      	adds	r7, #20
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bce:	4770      	bx	lr
 8004bd0:	e000ed00 	.word	0xe000ed00

08004bd4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004bd4:	b480      	push	{r7}
 8004bd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004bd8:	4b04      	ldr	r3, [pc, #16]	@ (8004bec <__NVIC_GetPriorityGrouping+0x18>)
 8004bda:	68db      	ldr	r3, [r3, #12]
 8004bdc:	0a1b      	lsrs	r3, r3, #8
 8004bde:	f003 0307 	and.w	r3, r3, #7
}
 8004be2:	4618      	mov	r0, r3
 8004be4:	46bd      	mov	sp, r7
 8004be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bea:	4770      	bx	lr
 8004bec:	e000ed00 	.word	0xe000ed00

08004bf0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004bf0:	b480      	push	{r7}
 8004bf2:	b083      	sub	sp, #12
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	4603      	mov	r3, r0
 8004bf8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004bfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	db0b      	blt.n	8004c1a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004c02:	79fb      	ldrb	r3, [r7, #7]
 8004c04:	f003 021f 	and.w	r2, r3, #31
 8004c08:	4907      	ldr	r1, [pc, #28]	@ (8004c28 <__NVIC_EnableIRQ+0x38>)
 8004c0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c0e:	095b      	lsrs	r3, r3, #5
 8004c10:	2001      	movs	r0, #1
 8004c12:	fa00 f202 	lsl.w	r2, r0, r2
 8004c16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004c1a:	bf00      	nop
 8004c1c:	370c      	adds	r7, #12
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c24:	4770      	bx	lr
 8004c26:	bf00      	nop
 8004c28:	e000e100 	.word	0xe000e100

08004c2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	b083      	sub	sp, #12
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	4603      	mov	r3, r0
 8004c34:	6039      	str	r1, [r7, #0]
 8004c36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	db0a      	blt.n	8004c56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	b2da      	uxtb	r2, r3
 8004c44:	490c      	ldr	r1, [pc, #48]	@ (8004c78 <__NVIC_SetPriority+0x4c>)
 8004c46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c4a:	0112      	lsls	r2, r2, #4
 8004c4c:	b2d2      	uxtb	r2, r2
 8004c4e:	440b      	add	r3, r1
 8004c50:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004c54:	e00a      	b.n	8004c6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	b2da      	uxtb	r2, r3
 8004c5a:	4908      	ldr	r1, [pc, #32]	@ (8004c7c <__NVIC_SetPriority+0x50>)
 8004c5c:	79fb      	ldrb	r3, [r7, #7]
 8004c5e:	f003 030f 	and.w	r3, r3, #15
 8004c62:	3b04      	subs	r3, #4
 8004c64:	0112      	lsls	r2, r2, #4
 8004c66:	b2d2      	uxtb	r2, r2
 8004c68:	440b      	add	r3, r1
 8004c6a:	761a      	strb	r2, [r3, #24]
}
 8004c6c:	bf00      	nop
 8004c6e:	370c      	adds	r7, #12
 8004c70:	46bd      	mov	sp, r7
 8004c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c76:	4770      	bx	lr
 8004c78:	e000e100 	.word	0xe000e100
 8004c7c:	e000ed00 	.word	0xe000ed00

08004c80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004c80:	b480      	push	{r7}
 8004c82:	b089      	sub	sp, #36	@ 0x24
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	60f8      	str	r0, [r7, #12]
 8004c88:	60b9      	str	r1, [r7, #8]
 8004c8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	f003 0307 	and.w	r3, r3, #7
 8004c92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004c94:	69fb      	ldr	r3, [r7, #28]
 8004c96:	f1c3 0307 	rsb	r3, r3, #7
 8004c9a:	2b04      	cmp	r3, #4
 8004c9c:	bf28      	it	cs
 8004c9e:	2304      	movcs	r3, #4
 8004ca0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004ca2:	69fb      	ldr	r3, [r7, #28]
 8004ca4:	3304      	adds	r3, #4
 8004ca6:	2b06      	cmp	r3, #6
 8004ca8:	d902      	bls.n	8004cb0 <NVIC_EncodePriority+0x30>
 8004caa:	69fb      	ldr	r3, [r7, #28]
 8004cac:	3b03      	subs	r3, #3
 8004cae:	e000      	b.n	8004cb2 <NVIC_EncodePriority+0x32>
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004cb4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004cb8:	69bb      	ldr	r3, [r7, #24]
 8004cba:	fa02 f303 	lsl.w	r3, r2, r3
 8004cbe:	43da      	mvns	r2, r3
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	401a      	ands	r2, r3
 8004cc4:	697b      	ldr	r3, [r7, #20]
 8004cc6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004cc8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8004ccc:	697b      	ldr	r3, [r7, #20]
 8004cce:	fa01 f303 	lsl.w	r3, r1, r3
 8004cd2:	43d9      	mvns	r1, r3
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004cd8:	4313      	orrs	r3, r2
         );
}
 8004cda:	4618      	mov	r0, r3
 8004cdc:	3724      	adds	r7, #36	@ 0x24
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce4:	4770      	bx	lr

08004ce6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004ce6:	b580      	push	{r7, lr}
 8004ce8:	b082      	sub	sp, #8
 8004cea:	af00      	add	r7, sp, #0
 8004cec:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004cee:	6878      	ldr	r0, [r7, #4]
 8004cf0:	f7ff ff4c 	bl	8004b8c <__NVIC_SetPriorityGrouping>
}
 8004cf4:	bf00      	nop
 8004cf6:	3708      	adds	r7, #8
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	bd80      	pop	{r7, pc}

08004cfc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b086      	sub	sp, #24
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	4603      	mov	r3, r0
 8004d04:	60b9      	str	r1, [r7, #8]
 8004d06:	607a      	str	r2, [r7, #4]
 8004d08:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004d0a:	f7ff ff63 	bl	8004bd4 <__NVIC_GetPriorityGrouping>
 8004d0e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004d10:	687a      	ldr	r2, [r7, #4]
 8004d12:	68b9      	ldr	r1, [r7, #8]
 8004d14:	6978      	ldr	r0, [r7, #20]
 8004d16:	f7ff ffb3 	bl	8004c80 <NVIC_EncodePriority>
 8004d1a:	4602      	mov	r2, r0
 8004d1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d20:	4611      	mov	r1, r2
 8004d22:	4618      	mov	r0, r3
 8004d24:	f7ff ff82 	bl	8004c2c <__NVIC_SetPriority>
}
 8004d28:	bf00      	nop
 8004d2a:	3718      	adds	r7, #24
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	bd80      	pop	{r7, pc}

08004d30 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b082      	sub	sp, #8
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	4603      	mov	r3, r0
 8004d38:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004d3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d3e:	4618      	mov	r0, r3
 8004d40:	f7ff ff56 	bl	8004bf0 <__NVIC_EnableIRQ>
}
 8004d44:	bf00      	nop
 8004d46:	3708      	adds	r7, #8
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	bd80      	pop	{r7, pc}

08004d4c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b084      	sub	sp, #16
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d101      	bne.n	8004d5e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	e08d      	b.n	8004e7a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	461a      	mov	r2, r3
 8004d64:	4b47      	ldr	r3, [pc, #284]	@ (8004e84 <HAL_DMA_Init+0x138>)
 8004d66:	429a      	cmp	r2, r3
 8004d68:	d80f      	bhi.n	8004d8a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	461a      	mov	r2, r3
 8004d70:	4b45      	ldr	r3, [pc, #276]	@ (8004e88 <HAL_DMA_Init+0x13c>)
 8004d72:	4413      	add	r3, r2
 8004d74:	4a45      	ldr	r2, [pc, #276]	@ (8004e8c <HAL_DMA_Init+0x140>)
 8004d76:	fba2 2303 	umull	r2, r3, r2, r3
 8004d7a:	091b      	lsrs	r3, r3, #4
 8004d7c:	009a      	lsls	r2, r3, #2
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	4a42      	ldr	r2, [pc, #264]	@ (8004e90 <HAL_DMA_Init+0x144>)
 8004d86:	641a      	str	r2, [r3, #64]	@ 0x40
 8004d88:	e00e      	b.n	8004da8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	461a      	mov	r2, r3
 8004d90:	4b40      	ldr	r3, [pc, #256]	@ (8004e94 <HAL_DMA_Init+0x148>)
 8004d92:	4413      	add	r3, r2
 8004d94:	4a3d      	ldr	r2, [pc, #244]	@ (8004e8c <HAL_DMA_Init+0x140>)
 8004d96:	fba2 2303 	umull	r2, r3, r2, r3
 8004d9a:	091b      	lsrs	r3, r3, #4
 8004d9c:	009a      	lsls	r2, r3, #2
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	4a3c      	ldr	r2, [pc, #240]	@ (8004e98 <HAL_DMA_Init+0x14c>)
 8004da6:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2202      	movs	r2, #2
 8004dac:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8004dbe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004dc2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004dcc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	691b      	ldr	r3, [r3, #16]
 8004dd2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004dd8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	699b      	ldr	r3, [r3, #24]
 8004dde:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004de4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6a1b      	ldr	r3, [r3, #32]
 8004dea:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004dec:	68fa      	ldr	r2, [r7, #12]
 8004dee:	4313      	orrs	r3, r2
 8004df0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	68fa      	ldr	r2, [r7, #12]
 8004df8:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004dfa:	6878      	ldr	r0, [r7, #4]
 8004dfc:	f000 fa82 	bl	8005304 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	689b      	ldr	r3, [r3, #8]
 8004e04:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004e08:	d102      	bne.n	8004e10 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	685a      	ldr	r2, [r3, #4]
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e18:	b2d2      	uxtb	r2, r2
 8004e1a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004e20:	687a      	ldr	r2, [r7, #4]
 8004e22:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004e24:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	685b      	ldr	r3, [r3, #4]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d010      	beq.n	8004e50 <HAL_DMA_Init+0x104>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	685b      	ldr	r3, [r3, #4]
 8004e32:	2b04      	cmp	r3, #4
 8004e34:	d80c      	bhi.n	8004e50 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004e36:	6878      	ldr	r0, [r7, #4]
 8004e38:	f000 faa2 	bl	8005380 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e40:	2200      	movs	r2, #0
 8004e42:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e48:	687a      	ldr	r2, [r7, #4]
 8004e4a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004e4c:	605a      	str	r2, [r3, #4]
 8004e4e:	e008      	b.n	8004e62 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2200      	movs	r2, #0
 8004e54:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2200      	movs	r2, #0
 8004e5a:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2200      	movs	r2, #0
 8004e60:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2200      	movs	r2, #0
 8004e66:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2201      	movs	r2, #1
 8004e6c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2200      	movs	r2, #0
 8004e74:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004e78:	2300      	movs	r3, #0
}
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	3710      	adds	r7, #16
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	bd80      	pop	{r7, pc}
 8004e82:	bf00      	nop
 8004e84:	40020407 	.word	0x40020407
 8004e88:	bffdfff8 	.word	0xbffdfff8
 8004e8c:	cccccccd 	.word	0xcccccccd
 8004e90:	40020000 	.word	0x40020000
 8004e94:	bffdfbf8 	.word	0xbffdfbf8
 8004e98:	40020400 	.word	0x40020400

08004e9c <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b086      	sub	sp, #24
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	60f8      	str	r0, [r7, #12]
 8004ea4:	60b9      	str	r1, [r7, #8]
 8004ea6:	607a      	str	r2, [r7, #4]
 8004ea8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004eaa:	2300      	movs	r3, #0
 8004eac:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004eb4:	2b01      	cmp	r3, #1
 8004eb6:	d101      	bne.n	8004ebc <HAL_DMA_Start_IT+0x20>
 8004eb8:	2302      	movs	r3, #2
 8004eba:	e066      	b.n	8004f8a <HAL_DMA_Start_IT+0xee>
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	2201      	movs	r2, #1
 8004ec0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004eca:	b2db      	uxtb	r3, r3
 8004ecc:	2b01      	cmp	r3, #1
 8004ece:	d155      	bne.n	8004f7c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	2202      	movs	r2, #2
 8004ed4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	2200      	movs	r2, #0
 8004edc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	681a      	ldr	r2, [r3, #0]
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f022 0201 	bic.w	r2, r2, #1
 8004eec:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	687a      	ldr	r2, [r7, #4]
 8004ef2:	68b9      	ldr	r1, [r7, #8]
 8004ef4:	68f8      	ldr	r0, [r7, #12]
 8004ef6:	f000 f9c7 	bl	8005288 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d008      	beq.n	8004f14 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	681a      	ldr	r2, [r3, #0]
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f042 020e 	orr.w	r2, r2, #14
 8004f10:	601a      	str	r2, [r3, #0]
 8004f12:	e00f      	b.n	8004f34 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	681a      	ldr	r2, [r3, #0]
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f022 0204 	bic.w	r2, r2, #4
 8004f22:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	681a      	ldr	r2, [r3, #0]
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f042 020a 	orr.w	r2, r2, #10
 8004f32:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d007      	beq.n	8004f52 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f46:	681a      	ldr	r2, [r3, #0]
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f4c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004f50:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d007      	beq.n	8004f6a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f5e:	681a      	ldr	r2, [r3, #0]
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f64:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004f68:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	681a      	ldr	r2, [r3, #0]
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f042 0201 	orr.w	r2, r2, #1
 8004f78:	601a      	str	r2, [r3, #0]
 8004f7a:	e005      	b.n	8004f88 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	2200      	movs	r2, #0
 8004f80:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004f84:	2302      	movs	r3, #2
 8004f86:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004f88:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	3718      	adds	r7, #24
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	bd80      	pop	{r7, pc}

08004f92 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004f92:	b480      	push	{r7}
 8004f94:	b085      	sub	sp, #20
 8004f96:	af00      	add	r7, sp, #0
 8004f98:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004fa4:	b2db      	uxtb	r3, r3
 8004fa6:	2b02      	cmp	r3, #2
 8004fa8:	d005      	beq.n	8004fb6 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2204      	movs	r2, #4
 8004fae:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	73fb      	strb	r3, [r7, #15]
 8004fb4:	e037      	b.n	8005026 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	681a      	ldr	r2, [r3, #0]
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f022 020e 	bic.w	r2, r2, #14
 8004fc4:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004fca:	681a      	ldr	r2, [r3, #0]
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004fd0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004fd4:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	681a      	ldr	r2, [r3, #0]
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f022 0201 	bic.w	r2, r2, #1
 8004fe4:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fea:	f003 021f 	and.w	r2, r3, #31
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ff2:	2101      	movs	r1, #1
 8004ff4:	fa01 f202 	lsl.w	r2, r1, r2
 8004ff8:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ffe:	687a      	ldr	r2, [r7, #4]
 8005000:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005002:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005008:	2b00      	cmp	r3, #0
 800500a:	d00c      	beq.n	8005026 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005010:	681a      	ldr	r2, [r3, #0]
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005016:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800501a:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005020:	687a      	ldr	r2, [r7, #4]
 8005022:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005024:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2201      	movs	r2, #1
 800502a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2200      	movs	r2, #0
 8005032:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8005036:	7bfb      	ldrb	r3, [r7, #15]
}
 8005038:	4618      	mov	r0, r3
 800503a:	3714      	adds	r7, #20
 800503c:	46bd      	mov	sp, r7
 800503e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005042:	4770      	bx	lr

08005044 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b084      	sub	sp, #16
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800504c:	2300      	movs	r3, #0
 800504e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005056:	b2db      	uxtb	r3, r3
 8005058:	2b02      	cmp	r3, #2
 800505a:	d00d      	beq.n	8005078 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2204      	movs	r2, #4
 8005060:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2201      	movs	r2, #1
 8005066:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2200      	movs	r2, #0
 800506e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8005072:	2301      	movs	r3, #1
 8005074:	73fb      	strb	r3, [r7, #15]
 8005076:	e047      	b.n	8005108 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	681a      	ldr	r2, [r3, #0]
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f022 020e 	bic.w	r2, r2, #14
 8005086:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	681a      	ldr	r2, [r3, #0]
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f022 0201 	bic.w	r2, r2, #1
 8005096:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800509c:	681a      	ldr	r2, [r3, #0]
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80050a2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80050a6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050ac:	f003 021f 	and.w	r2, r3, #31
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050b4:	2101      	movs	r1, #1
 80050b6:	fa01 f202 	lsl.w	r2, r1, r2
 80050ba:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80050c0:	687a      	ldr	r2, [r7, #4]
 80050c2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80050c4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d00c      	beq.n	80050e8 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050d2:	681a      	ldr	r2, [r3, #0]
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050d8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80050dc:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050e2:	687a      	ldr	r2, [r7, #4]
 80050e4:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80050e6:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2201      	movs	r2, #1
 80050ec:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2200      	movs	r2, #0
 80050f4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d003      	beq.n	8005108 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005104:	6878      	ldr	r0, [r7, #4]
 8005106:	4798      	blx	r3
    }
  }
  return status;
 8005108:	7bfb      	ldrb	r3, [r7, #15]
}
 800510a:	4618      	mov	r0, r3
 800510c:	3710      	adds	r7, #16
 800510e:	46bd      	mov	sp, r7
 8005110:	bd80      	pop	{r7, pc}

08005112 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005112:	b580      	push	{r7, lr}
 8005114:	b084      	sub	sp, #16
 8005116:	af00      	add	r7, sp, #0
 8005118:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800512e:	f003 031f 	and.w	r3, r3, #31
 8005132:	2204      	movs	r2, #4
 8005134:	409a      	lsls	r2, r3
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	4013      	ands	r3, r2
 800513a:	2b00      	cmp	r3, #0
 800513c:	d026      	beq.n	800518c <HAL_DMA_IRQHandler+0x7a>
 800513e:	68bb      	ldr	r3, [r7, #8]
 8005140:	f003 0304 	and.w	r3, r3, #4
 8005144:	2b00      	cmp	r3, #0
 8005146:	d021      	beq.n	800518c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f003 0320 	and.w	r3, r3, #32
 8005152:	2b00      	cmp	r3, #0
 8005154:	d107      	bne.n	8005166 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	681a      	ldr	r2, [r3, #0]
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f022 0204 	bic.w	r2, r2, #4
 8005164:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800516a:	f003 021f 	and.w	r2, r3, #31
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005172:	2104      	movs	r1, #4
 8005174:	fa01 f202 	lsl.w	r2, r1, r2
 8005178:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800517e:	2b00      	cmp	r3, #0
 8005180:	d071      	beq.n	8005266 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005186:	6878      	ldr	r0, [r7, #4]
 8005188:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800518a:	e06c      	b.n	8005266 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005190:	f003 031f 	and.w	r3, r3, #31
 8005194:	2202      	movs	r2, #2
 8005196:	409a      	lsls	r2, r3
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	4013      	ands	r3, r2
 800519c:	2b00      	cmp	r3, #0
 800519e:	d02e      	beq.n	80051fe <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	f003 0302 	and.w	r3, r3, #2
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d029      	beq.n	80051fe <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f003 0320 	and.w	r3, r3, #32
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d10b      	bne.n	80051d0 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	681a      	ldr	r2, [r3, #0]
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f022 020a 	bic.w	r2, r2, #10
 80051c6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2201      	movs	r2, #1
 80051cc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051d4:	f003 021f 	and.w	r2, r3, #31
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051dc:	2102      	movs	r1, #2
 80051de:	fa01 f202 	lsl.w	r2, r1, r2
 80051e2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2200      	movs	r2, #0
 80051e8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d038      	beq.n	8005266 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051f8:	6878      	ldr	r0, [r7, #4]
 80051fa:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80051fc:	e033      	b.n	8005266 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005202:	f003 031f 	and.w	r3, r3, #31
 8005206:	2208      	movs	r2, #8
 8005208:	409a      	lsls	r2, r3
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	4013      	ands	r3, r2
 800520e:	2b00      	cmp	r3, #0
 8005210:	d02a      	beq.n	8005268 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8005212:	68bb      	ldr	r3, [r7, #8]
 8005214:	f003 0308 	and.w	r3, r3, #8
 8005218:	2b00      	cmp	r3, #0
 800521a:	d025      	beq.n	8005268 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	681a      	ldr	r2, [r3, #0]
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f022 020e 	bic.w	r2, r2, #14
 800522a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005230:	f003 021f 	and.w	r2, r3, #31
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005238:	2101      	movs	r1, #1
 800523a:	fa01 f202 	lsl.w	r2, r1, r2
 800523e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2201      	movs	r2, #1
 8005244:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2201      	movs	r2, #1
 800524a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2200      	movs	r2, #0
 8005252:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800525a:	2b00      	cmp	r3, #0
 800525c:	d004      	beq.n	8005268 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005262:	6878      	ldr	r0, [r7, #4]
 8005264:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005266:	bf00      	nop
 8005268:	bf00      	nop
}
 800526a:	3710      	adds	r7, #16
 800526c:	46bd      	mov	sp, r7
 800526e:	bd80      	pop	{r7, pc}

08005270 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8005270:	b480      	push	{r7}
 8005272:	b083      	sub	sp, #12
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 800527c:	4618      	mov	r0, r3
 800527e:	370c      	adds	r7, #12
 8005280:	46bd      	mov	sp, r7
 8005282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005286:	4770      	bx	lr

08005288 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005288:	b480      	push	{r7}
 800528a:	b085      	sub	sp, #20
 800528c:	af00      	add	r7, sp, #0
 800528e:	60f8      	str	r0, [r7, #12]
 8005290:	60b9      	str	r1, [r7, #8]
 8005292:	607a      	str	r2, [r7, #4]
 8005294:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800529a:	68fa      	ldr	r2, [r7, #12]
 800529c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800529e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d004      	beq.n	80052b2 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052ac:	68fa      	ldr	r2, [r7, #12]
 80052ae:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80052b0:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052b6:	f003 021f 	and.w	r2, r3, #31
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052be:	2101      	movs	r1, #1
 80052c0:	fa01 f202 	lsl.w	r2, r1, r2
 80052c4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	683a      	ldr	r2, [r7, #0]
 80052cc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	689b      	ldr	r3, [r3, #8]
 80052d2:	2b10      	cmp	r3, #16
 80052d4:	d108      	bne.n	80052e8 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	687a      	ldr	r2, [r7, #4]
 80052dc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	68ba      	ldr	r2, [r7, #8]
 80052e4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80052e6:	e007      	b.n	80052f8 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	68ba      	ldr	r2, [r7, #8]
 80052ee:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	687a      	ldr	r2, [r7, #4]
 80052f6:	60da      	str	r2, [r3, #12]
}
 80052f8:	bf00      	nop
 80052fa:	3714      	adds	r7, #20
 80052fc:	46bd      	mov	sp, r7
 80052fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005302:	4770      	bx	lr

08005304 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005304:	b480      	push	{r7}
 8005306:	b087      	sub	sp, #28
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	461a      	mov	r2, r3
 8005312:	4b16      	ldr	r3, [pc, #88]	@ (800536c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8005314:	429a      	cmp	r2, r3
 8005316:	d802      	bhi.n	800531e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8005318:	4b15      	ldr	r3, [pc, #84]	@ (8005370 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800531a:	617b      	str	r3, [r7, #20]
 800531c:	e001      	b.n	8005322 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800531e:	4b15      	ldr	r3, [pc, #84]	@ (8005374 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8005320:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8005322:	697b      	ldr	r3, [r7, #20]
 8005324:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	b2db      	uxtb	r3, r3
 800532c:	3b08      	subs	r3, #8
 800532e:	4a12      	ldr	r2, [pc, #72]	@ (8005378 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8005330:	fba2 2303 	umull	r2, r3, r2, r3
 8005334:	091b      	lsrs	r3, r3, #4
 8005336:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800533c:	089b      	lsrs	r3, r3, #2
 800533e:	009a      	lsls	r2, r3, #2
 8005340:	693b      	ldr	r3, [r7, #16]
 8005342:	4413      	add	r3, r2
 8005344:	461a      	mov	r2, r3
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	4a0b      	ldr	r2, [pc, #44]	@ (800537c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800534e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	f003 031f 	and.w	r3, r3, #31
 8005356:	2201      	movs	r2, #1
 8005358:	409a      	lsls	r2, r3
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800535e:	bf00      	nop
 8005360:	371c      	adds	r7, #28
 8005362:	46bd      	mov	sp, r7
 8005364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005368:	4770      	bx	lr
 800536a:	bf00      	nop
 800536c:	40020407 	.word	0x40020407
 8005370:	40020800 	.word	0x40020800
 8005374:	40020820 	.word	0x40020820
 8005378:	cccccccd 	.word	0xcccccccd
 800537c:	40020880 	.word	0x40020880

08005380 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005380:	b480      	push	{r7}
 8005382:	b085      	sub	sp, #20
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	685b      	ldr	r3, [r3, #4]
 800538c:	b2db      	uxtb	r3, r3
 800538e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005390:	68fa      	ldr	r2, [r7, #12]
 8005392:	4b0b      	ldr	r3, [pc, #44]	@ (80053c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8005394:	4413      	add	r3, r2
 8005396:	009b      	lsls	r3, r3, #2
 8005398:	461a      	mov	r2, r3
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	4a08      	ldr	r2, [pc, #32]	@ (80053c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80053a2:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	3b01      	subs	r3, #1
 80053a8:	f003 031f 	and.w	r3, r3, #31
 80053ac:	2201      	movs	r2, #1
 80053ae:	409a      	lsls	r2, r3
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80053b4:	bf00      	nop
 80053b6:	3714      	adds	r7, #20
 80053b8:	46bd      	mov	sp, r7
 80053ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053be:	4770      	bx	lr
 80053c0:	1000823f 	.word	0x1000823f
 80053c4:	40020940 	.word	0x40020940

080053c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80053c8:	b480      	push	{r7}
 80053ca:	b087      	sub	sp, #28
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
 80053d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80053d2:	2300      	movs	r3, #0
 80053d4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80053d6:	e15a      	b.n	800568e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	681a      	ldr	r2, [r3, #0]
 80053dc:	2101      	movs	r1, #1
 80053de:	697b      	ldr	r3, [r7, #20]
 80053e0:	fa01 f303 	lsl.w	r3, r1, r3
 80053e4:	4013      	ands	r3, r2
 80053e6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	f000 814c 	beq.w	8005688 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	685b      	ldr	r3, [r3, #4]
 80053f4:	f003 0303 	and.w	r3, r3, #3
 80053f8:	2b01      	cmp	r3, #1
 80053fa:	d005      	beq.n	8005408 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	685b      	ldr	r3, [r3, #4]
 8005400:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005404:	2b02      	cmp	r3, #2
 8005406:	d130      	bne.n	800546a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	689b      	ldr	r3, [r3, #8]
 800540c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800540e:	697b      	ldr	r3, [r7, #20]
 8005410:	005b      	lsls	r3, r3, #1
 8005412:	2203      	movs	r2, #3
 8005414:	fa02 f303 	lsl.w	r3, r2, r3
 8005418:	43db      	mvns	r3, r3
 800541a:	693a      	ldr	r2, [r7, #16]
 800541c:	4013      	ands	r3, r2
 800541e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	68da      	ldr	r2, [r3, #12]
 8005424:	697b      	ldr	r3, [r7, #20]
 8005426:	005b      	lsls	r3, r3, #1
 8005428:	fa02 f303 	lsl.w	r3, r2, r3
 800542c:	693a      	ldr	r2, [r7, #16]
 800542e:	4313      	orrs	r3, r2
 8005430:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	693a      	ldr	r2, [r7, #16]
 8005436:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	685b      	ldr	r3, [r3, #4]
 800543c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800543e:	2201      	movs	r2, #1
 8005440:	697b      	ldr	r3, [r7, #20]
 8005442:	fa02 f303 	lsl.w	r3, r2, r3
 8005446:	43db      	mvns	r3, r3
 8005448:	693a      	ldr	r2, [r7, #16]
 800544a:	4013      	ands	r3, r2
 800544c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	685b      	ldr	r3, [r3, #4]
 8005452:	091b      	lsrs	r3, r3, #4
 8005454:	f003 0201 	and.w	r2, r3, #1
 8005458:	697b      	ldr	r3, [r7, #20]
 800545a:	fa02 f303 	lsl.w	r3, r2, r3
 800545e:	693a      	ldr	r2, [r7, #16]
 8005460:	4313      	orrs	r3, r2
 8005462:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	693a      	ldr	r2, [r7, #16]
 8005468:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	685b      	ldr	r3, [r3, #4]
 800546e:	f003 0303 	and.w	r3, r3, #3
 8005472:	2b03      	cmp	r3, #3
 8005474:	d017      	beq.n	80054a6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	68db      	ldr	r3, [r3, #12]
 800547a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800547c:	697b      	ldr	r3, [r7, #20]
 800547e:	005b      	lsls	r3, r3, #1
 8005480:	2203      	movs	r2, #3
 8005482:	fa02 f303 	lsl.w	r3, r2, r3
 8005486:	43db      	mvns	r3, r3
 8005488:	693a      	ldr	r2, [r7, #16]
 800548a:	4013      	ands	r3, r2
 800548c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	689a      	ldr	r2, [r3, #8]
 8005492:	697b      	ldr	r3, [r7, #20]
 8005494:	005b      	lsls	r3, r3, #1
 8005496:	fa02 f303 	lsl.w	r3, r2, r3
 800549a:	693a      	ldr	r2, [r7, #16]
 800549c:	4313      	orrs	r3, r2
 800549e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	693a      	ldr	r2, [r7, #16]
 80054a4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	685b      	ldr	r3, [r3, #4]
 80054aa:	f003 0303 	and.w	r3, r3, #3
 80054ae:	2b02      	cmp	r3, #2
 80054b0:	d123      	bne.n	80054fa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80054b2:	697b      	ldr	r3, [r7, #20]
 80054b4:	08da      	lsrs	r2, r3, #3
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	3208      	adds	r2, #8
 80054ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054be:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80054c0:	697b      	ldr	r3, [r7, #20]
 80054c2:	f003 0307 	and.w	r3, r3, #7
 80054c6:	009b      	lsls	r3, r3, #2
 80054c8:	220f      	movs	r2, #15
 80054ca:	fa02 f303 	lsl.w	r3, r2, r3
 80054ce:	43db      	mvns	r3, r3
 80054d0:	693a      	ldr	r2, [r7, #16]
 80054d2:	4013      	ands	r3, r2
 80054d4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	691a      	ldr	r2, [r3, #16]
 80054da:	697b      	ldr	r3, [r7, #20]
 80054dc:	f003 0307 	and.w	r3, r3, #7
 80054e0:	009b      	lsls	r3, r3, #2
 80054e2:	fa02 f303 	lsl.w	r3, r2, r3
 80054e6:	693a      	ldr	r2, [r7, #16]
 80054e8:	4313      	orrs	r3, r2
 80054ea:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80054ec:	697b      	ldr	r3, [r7, #20]
 80054ee:	08da      	lsrs	r2, r3, #3
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	3208      	adds	r2, #8
 80054f4:	6939      	ldr	r1, [r7, #16]
 80054f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005500:	697b      	ldr	r3, [r7, #20]
 8005502:	005b      	lsls	r3, r3, #1
 8005504:	2203      	movs	r2, #3
 8005506:	fa02 f303 	lsl.w	r3, r2, r3
 800550a:	43db      	mvns	r3, r3
 800550c:	693a      	ldr	r2, [r7, #16]
 800550e:	4013      	ands	r3, r2
 8005510:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	685b      	ldr	r3, [r3, #4]
 8005516:	f003 0203 	and.w	r2, r3, #3
 800551a:	697b      	ldr	r3, [r7, #20]
 800551c:	005b      	lsls	r3, r3, #1
 800551e:	fa02 f303 	lsl.w	r3, r2, r3
 8005522:	693a      	ldr	r2, [r7, #16]
 8005524:	4313      	orrs	r3, r2
 8005526:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	693a      	ldr	r2, [r7, #16]
 800552c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	685b      	ldr	r3, [r3, #4]
 8005532:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005536:	2b00      	cmp	r3, #0
 8005538:	f000 80a6 	beq.w	8005688 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800553c:	4b5b      	ldr	r3, [pc, #364]	@ (80056ac <HAL_GPIO_Init+0x2e4>)
 800553e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005540:	4a5a      	ldr	r2, [pc, #360]	@ (80056ac <HAL_GPIO_Init+0x2e4>)
 8005542:	f043 0301 	orr.w	r3, r3, #1
 8005546:	6613      	str	r3, [r2, #96]	@ 0x60
 8005548:	4b58      	ldr	r3, [pc, #352]	@ (80056ac <HAL_GPIO_Init+0x2e4>)
 800554a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800554c:	f003 0301 	and.w	r3, r3, #1
 8005550:	60bb      	str	r3, [r7, #8]
 8005552:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005554:	4a56      	ldr	r2, [pc, #344]	@ (80056b0 <HAL_GPIO_Init+0x2e8>)
 8005556:	697b      	ldr	r3, [r7, #20]
 8005558:	089b      	lsrs	r3, r3, #2
 800555a:	3302      	adds	r3, #2
 800555c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005560:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005562:	697b      	ldr	r3, [r7, #20]
 8005564:	f003 0303 	and.w	r3, r3, #3
 8005568:	009b      	lsls	r3, r3, #2
 800556a:	220f      	movs	r2, #15
 800556c:	fa02 f303 	lsl.w	r3, r2, r3
 8005570:	43db      	mvns	r3, r3
 8005572:	693a      	ldr	r2, [r7, #16]
 8005574:	4013      	ands	r3, r2
 8005576:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800557e:	d01f      	beq.n	80055c0 <HAL_GPIO_Init+0x1f8>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	4a4c      	ldr	r2, [pc, #304]	@ (80056b4 <HAL_GPIO_Init+0x2ec>)
 8005584:	4293      	cmp	r3, r2
 8005586:	d019      	beq.n	80055bc <HAL_GPIO_Init+0x1f4>
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	4a4b      	ldr	r2, [pc, #300]	@ (80056b8 <HAL_GPIO_Init+0x2f0>)
 800558c:	4293      	cmp	r3, r2
 800558e:	d013      	beq.n	80055b8 <HAL_GPIO_Init+0x1f0>
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	4a4a      	ldr	r2, [pc, #296]	@ (80056bc <HAL_GPIO_Init+0x2f4>)
 8005594:	4293      	cmp	r3, r2
 8005596:	d00d      	beq.n	80055b4 <HAL_GPIO_Init+0x1ec>
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	4a49      	ldr	r2, [pc, #292]	@ (80056c0 <HAL_GPIO_Init+0x2f8>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d007      	beq.n	80055b0 <HAL_GPIO_Init+0x1e8>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	4a48      	ldr	r2, [pc, #288]	@ (80056c4 <HAL_GPIO_Init+0x2fc>)
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d101      	bne.n	80055ac <HAL_GPIO_Init+0x1e4>
 80055a8:	2305      	movs	r3, #5
 80055aa:	e00a      	b.n	80055c2 <HAL_GPIO_Init+0x1fa>
 80055ac:	2306      	movs	r3, #6
 80055ae:	e008      	b.n	80055c2 <HAL_GPIO_Init+0x1fa>
 80055b0:	2304      	movs	r3, #4
 80055b2:	e006      	b.n	80055c2 <HAL_GPIO_Init+0x1fa>
 80055b4:	2303      	movs	r3, #3
 80055b6:	e004      	b.n	80055c2 <HAL_GPIO_Init+0x1fa>
 80055b8:	2302      	movs	r3, #2
 80055ba:	e002      	b.n	80055c2 <HAL_GPIO_Init+0x1fa>
 80055bc:	2301      	movs	r3, #1
 80055be:	e000      	b.n	80055c2 <HAL_GPIO_Init+0x1fa>
 80055c0:	2300      	movs	r3, #0
 80055c2:	697a      	ldr	r2, [r7, #20]
 80055c4:	f002 0203 	and.w	r2, r2, #3
 80055c8:	0092      	lsls	r2, r2, #2
 80055ca:	4093      	lsls	r3, r2
 80055cc:	693a      	ldr	r2, [r7, #16]
 80055ce:	4313      	orrs	r3, r2
 80055d0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80055d2:	4937      	ldr	r1, [pc, #220]	@ (80056b0 <HAL_GPIO_Init+0x2e8>)
 80055d4:	697b      	ldr	r3, [r7, #20]
 80055d6:	089b      	lsrs	r3, r3, #2
 80055d8:	3302      	adds	r3, #2
 80055da:	693a      	ldr	r2, [r7, #16]
 80055dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80055e0:	4b39      	ldr	r3, [pc, #228]	@ (80056c8 <HAL_GPIO_Init+0x300>)
 80055e2:	689b      	ldr	r3, [r3, #8]
 80055e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	43db      	mvns	r3, r3
 80055ea:	693a      	ldr	r2, [r7, #16]
 80055ec:	4013      	ands	r3, r2
 80055ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	685b      	ldr	r3, [r3, #4]
 80055f4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d003      	beq.n	8005604 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80055fc:	693a      	ldr	r2, [r7, #16]
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	4313      	orrs	r3, r2
 8005602:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005604:	4a30      	ldr	r2, [pc, #192]	@ (80056c8 <HAL_GPIO_Init+0x300>)
 8005606:	693b      	ldr	r3, [r7, #16]
 8005608:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800560a:	4b2f      	ldr	r3, [pc, #188]	@ (80056c8 <HAL_GPIO_Init+0x300>)
 800560c:	68db      	ldr	r3, [r3, #12]
 800560e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	43db      	mvns	r3, r3
 8005614:	693a      	ldr	r2, [r7, #16]
 8005616:	4013      	ands	r3, r2
 8005618:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	685b      	ldr	r3, [r3, #4]
 800561e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005622:	2b00      	cmp	r3, #0
 8005624:	d003      	beq.n	800562e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8005626:	693a      	ldr	r2, [r7, #16]
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	4313      	orrs	r3, r2
 800562c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800562e:	4a26      	ldr	r2, [pc, #152]	@ (80056c8 <HAL_GPIO_Init+0x300>)
 8005630:	693b      	ldr	r3, [r7, #16]
 8005632:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8005634:	4b24      	ldr	r3, [pc, #144]	@ (80056c8 <HAL_GPIO_Init+0x300>)
 8005636:	685b      	ldr	r3, [r3, #4]
 8005638:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	43db      	mvns	r3, r3
 800563e:	693a      	ldr	r2, [r7, #16]
 8005640:	4013      	ands	r3, r2
 8005642:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	685b      	ldr	r3, [r3, #4]
 8005648:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800564c:	2b00      	cmp	r3, #0
 800564e:	d003      	beq.n	8005658 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8005650:	693a      	ldr	r2, [r7, #16]
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	4313      	orrs	r3, r2
 8005656:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005658:	4a1b      	ldr	r2, [pc, #108]	@ (80056c8 <HAL_GPIO_Init+0x300>)
 800565a:	693b      	ldr	r3, [r7, #16]
 800565c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800565e:	4b1a      	ldr	r3, [pc, #104]	@ (80056c8 <HAL_GPIO_Init+0x300>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	43db      	mvns	r3, r3
 8005668:	693a      	ldr	r2, [r7, #16]
 800566a:	4013      	ands	r3, r2
 800566c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	685b      	ldr	r3, [r3, #4]
 8005672:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005676:	2b00      	cmp	r3, #0
 8005678:	d003      	beq.n	8005682 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800567a:	693a      	ldr	r2, [r7, #16]
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	4313      	orrs	r3, r2
 8005680:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005682:	4a11      	ldr	r2, [pc, #68]	@ (80056c8 <HAL_GPIO_Init+0x300>)
 8005684:	693b      	ldr	r3, [r7, #16]
 8005686:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005688:	697b      	ldr	r3, [r7, #20]
 800568a:	3301      	adds	r3, #1
 800568c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	681a      	ldr	r2, [r3, #0]
 8005692:	697b      	ldr	r3, [r7, #20]
 8005694:	fa22 f303 	lsr.w	r3, r2, r3
 8005698:	2b00      	cmp	r3, #0
 800569a:	f47f ae9d 	bne.w	80053d8 <HAL_GPIO_Init+0x10>
  }
}
 800569e:	bf00      	nop
 80056a0:	bf00      	nop
 80056a2:	371c      	adds	r7, #28
 80056a4:	46bd      	mov	sp, r7
 80056a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056aa:	4770      	bx	lr
 80056ac:	40021000 	.word	0x40021000
 80056b0:	40010000 	.word	0x40010000
 80056b4:	48000400 	.word	0x48000400
 80056b8:	48000800 	.word	0x48000800
 80056bc:	48000c00 	.word	0x48000c00
 80056c0:	48001000 	.word	0x48001000
 80056c4:	48001400 	.word	0x48001400
 80056c8:	40010400 	.word	0x40010400

080056cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80056cc:	b480      	push	{r7}
 80056ce:	b083      	sub	sp, #12
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
 80056d4:	460b      	mov	r3, r1
 80056d6:	807b      	strh	r3, [r7, #2]
 80056d8:	4613      	mov	r3, r2
 80056da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80056dc:	787b      	ldrb	r3, [r7, #1]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d003      	beq.n	80056ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80056e2:	887a      	ldrh	r2, [r7, #2]
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80056e8:	e002      	b.n	80056f0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80056ea:	887a      	ldrh	r2, [r7, #2]
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80056f0:	bf00      	nop
 80056f2:	370c      	adds	r7, #12
 80056f4:	46bd      	mov	sp, r7
 80056f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fa:	4770      	bx	lr

080056fc <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80056fc:	b480      	push	{r7}
 80056fe:	b085      	sub	sp, #20
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
 8005704:	460b      	mov	r3, r1
 8005706:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	695b      	ldr	r3, [r3, #20]
 800570c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800570e:	887a      	ldrh	r2, [r7, #2]
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	4013      	ands	r3, r2
 8005714:	041a      	lsls	r2, r3, #16
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	43d9      	mvns	r1, r3
 800571a:	887b      	ldrh	r3, [r7, #2]
 800571c:	400b      	ands	r3, r1
 800571e:	431a      	orrs	r2, r3
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	619a      	str	r2, [r3, #24]
}
 8005724:	bf00      	nop
 8005726:	3714      	adds	r7, #20
 8005728:	46bd      	mov	sp, r7
 800572a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572e:	4770      	bx	lr

08005730 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005730:	b580      	push	{r7, lr}
 8005732:	b082      	sub	sp, #8
 8005734:	af00      	add	r7, sp, #0
 8005736:	4603      	mov	r3, r0
 8005738:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800573a:	4b08      	ldr	r3, [pc, #32]	@ (800575c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800573c:	695a      	ldr	r2, [r3, #20]
 800573e:	88fb      	ldrh	r3, [r7, #6]
 8005740:	4013      	ands	r3, r2
 8005742:	2b00      	cmp	r3, #0
 8005744:	d006      	beq.n	8005754 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005746:	4a05      	ldr	r2, [pc, #20]	@ (800575c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005748:	88fb      	ldrh	r3, [r7, #6]
 800574a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800574c:	88fb      	ldrh	r3, [r7, #6]
 800574e:	4618      	mov	r0, r3
 8005750:	f000 f806 	bl	8005760 <HAL_GPIO_EXTI_Callback>
  }
}
 8005754:	bf00      	nop
 8005756:	3708      	adds	r7, #8
 8005758:	46bd      	mov	sp, r7
 800575a:	bd80      	pop	{r7, pc}
 800575c:	40010400 	.word	0x40010400

08005760 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005760:	b480      	push	{r7}
 8005762:	b083      	sub	sp, #12
 8005764:	af00      	add	r7, sp, #0
 8005766:	4603      	mov	r3, r0
 8005768:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800576a:	bf00      	nop
 800576c:	370c      	adds	r7, #12
 800576e:	46bd      	mov	sp, r7
 8005770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005774:	4770      	bx	lr

08005776 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8005776:	b580      	push	{r7, lr}
 8005778:	b084      	sub	sp, #16
 800577a:	af00      	add	r7, sp, #0
 800577c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d101      	bne.n	8005788 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8005784:	2301      	movs	r3, #1
 8005786:	e041      	b.n	800580c <HAL_IWDG_Init+0x96>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f64c 42cc 	movw	r2, #52428	@ 0xcccc
 8005790:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f245 5255 	movw	r2, #21845	@ 0x5555
 800579a:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	687a      	ldr	r2, [r7, #4]
 80057a2:	6852      	ldr	r2, [r2, #4]
 80057a4:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	687a      	ldr	r2, [r7, #4]
 80057ac:	6892      	ldr	r2, [r2, #8]
 80057ae:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 80057b0:	f7ff f9e0 	bl	8004b74 <HAL_GetTick>
 80057b4:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80057b6:	e00f      	b.n	80057d8 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 80057b8:	f7ff f9dc 	bl	8004b74 <HAL_GetTick>
 80057bc:	4602      	mov	r2, r0
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	1ad3      	subs	r3, r2, r3
 80057c2:	2b31      	cmp	r3, #49	@ 0x31
 80057c4:	d908      	bls.n	80057d8 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	68db      	ldr	r3, [r3, #12]
 80057cc:	f003 0307 	and.w	r3, r3, #7
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d001      	beq.n	80057d8 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 80057d4:	2303      	movs	r3, #3
 80057d6:	e019      	b.n	800580c <HAL_IWDG_Init+0x96>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	68db      	ldr	r3, [r3, #12]
 80057de:	f003 0307 	and.w	r3, r3, #7
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d1e8      	bne.n	80057b8 <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	691a      	ldr	r2, [r3, #16]
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	68db      	ldr	r3, [r3, #12]
 80057f0:	429a      	cmp	r2, r3
 80057f2:	d005      	beq.n	8005800 <HAL_IWDG_Init+0x8a>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	687a      	ldr	r2, [r7, #4]
 80057fa:	68d2      	ldr	r2, [r2, #12]
 80057fc:	611a      	str	r2, [r3, #16]
 80057fe:	e004      	b.n	800580a <HAL_IWDG_Init+0x94>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 8005808:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800580a:	2300      	movs	r3, #0
}
 800580c:	4618      	mov	r0, r3
 800580e:	3710      	adds	r7, #16
 8005810:	46bd      	mov	sp, r7
 8005812:	bd80      	pop	{r7, pc}

08005814 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005814:	b480      	push	{r7}
 8005816:	b085      	sub	sp, #20
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d141      	bne.n	80058a6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005822:	4b4b      	ldr	r3, [pc, #300]	@ (8005950 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800582a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800582e:	d131      	bne.n	8005894 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005830:	4b47      	ldr	r3, [pc, #284]	@ (8005950 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005832:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005836:	4a46      	ldr	r2, [pc, #280]	@ (8005950 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005838:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800583c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005840:	4b43      	ldr	r3, [pc, #268]	@ (8005950 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005848:	4a41      	ldr	r2, [pc, #260]	@ (8005950 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800584a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800584e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005850:	4b40      	ldr	r3, [pc, #256]	@ (8005954 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	2232      	movs	r2, #50	@ 0x32
 8005856:	fb02 f303 	mul.w	r3, r2, r3
 800585a:	4a3f      	ldr	r2, [pc, #252]	@ (8005958 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800585c:	fba2 2303 	umull	r2, r3, r2, r3
 8005860:	0c9b      	lsrs	r3, r3, #18
 8005862:	3301      	adds	r3, #1
 8005864:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005866:	e002      	b.n	800586e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	3b01      	subs	r3, #1
 800586c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800586e:	4b38      	ldr	r3, [pc, #224]	@ (8005950 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005870:	695b      	ldr	r3, [r3, #20]
 8005872:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005876:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800587a:	d102      	bne.n	8005882 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d1f2      	bne.n	8005868 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005882:	4b33      	ldr	r3, [pc, #204]	@ (8005950 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005884:	695b      	ldr	r3, [r3, #20]
 8005886:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800588a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800588e:	d158      	bne.n	8005942 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005890:	2303      	movs	r3, #3
 8005892:	e057      	b.n	8005944 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005894:	4b2e      	ldr	r3, [pc, #184]	@ (8005950 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005896:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800589a:	4a2d      	ldr	r2, [pc, #180]	@ (8005950 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800589c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80058a0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80058a4:	e04d      	b.n	8005942 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80058ac:	d141      	bne.n	8005932 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80058ae:	4b28      	ldr	r3, [pc, #160]	@ (8005950 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80058b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80058ba:	d131      	bne.n	8005920 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80058bc:	4b24      	ldr	r3, [pc, #144]	@ (8005950 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80058be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80058c2:	4a23      	ldr	r2, [pc, #140]	@ (8005950 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80058c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80058c8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80058cc:	4b20      	ldr	r3, [pc, #128]	@ (8005950 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80058d4:	4a1e      	ldr	r2, [pc, #120]	@ (8005950 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80058d6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80058da:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80058dc:	4b1d      	ldr	r3, [pc, #116]	@ (8005954 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	2232      	movs	r2, #50	@ 0x32
 80058e2:	fb02 f303 	mul.w	r3, r2, r3
 80058e6:	4a1c      	ldr	r2, [pc, #112]	@ (8005958 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80058e8:	fba2 2303 	umull	r2, r3, r2, r3
 80058ec:	0c9b      	lsrs	r3, r3, #18
 80058ee:	3301      	adds	r3, #1
 80058f0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80058f2:	e002      	b.n	80058fa <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	3b01      	subs	r3, #1
 80058f8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80058fa:	4b15      	ldr	r3, [pc, #84]	@ (8005950 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80058fc:	695b      	ldr	r3, [r3, #20]
 80058fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005902:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005906:	d102      	bne.n	800590e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d1f2      	bne.n	80058f4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800590e:	4b10      	ldr	r3, [pc, #64]	@ (8005950 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005910:	695b      	ldr	r3, [r3, #20]
 8005912:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005916:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800591a:	d112      	bne.n	8005942 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800591c:	2303      	movs	r3, #3
 800591e:	e011      	b.n	8005944 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005920:	4b0b      	ldr	r3, [pc, #44]	@ (8005950 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005922:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005926:	4a0a      	ldr	r2, [pc, #40]	@ (8005950 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005928:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800592c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005930:	e007      	b.n	8005942 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005932:	4b07      	ldr	r3, [pc, #28]	@ (8005950 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800593a:	4a05      	ldr	r2, [pc, #20]	@ (8005950 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800593c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005940:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8005942:	2300      	movs	r3, #0
}
 8005944:	4618      	mov	r0, r3
 8005946:	3714      	adds	r7, #20
 8005948:	46bd      	mov	sp, r7
 800594a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594e:	4770      	bx	lr
 8005950:	40007000 	.word	0x40007000
 8005954:	20000004 	.word	0x20000004
 8005958:	431bde83 	.word	0x431bde83

0800595c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800595c:	b480      	push	{r7}
 800595e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8005960:	4b05      	ldr	r3, [pc, #20]	@ (8005978 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005962:	689b      	ldr	r3, [r3, #8]
 8005964:	4a04      	ldr	r2, [pc, #16]	@ (8005978 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005966:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800596a:	6093      	str	r3, [r2, #8]
}
 800596c:	bf00      	nop
 800596e:	46bd      	mov	sp, r7
 8005970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005974:	4770      	bx	lr
 8005976:	bf00      	nop
 8005978:	40007000 	.word	0x40007000

0800597c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800597c:	b580      	push	{r7, lr}
 800597e:	b088      	sub	sp, #32
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d101      	bne.n	800598e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800598a:	2301      	movs	r3, #1
 800598c:	e2fe      	b.n	8005f8c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f003 0301 	and.w	r3, r3, #1
 8005996:	2b00      	cmp	r3, #0
 8005998:	d075      	beq.n	8005a86 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800599a:	4b97      	ldr	r3, [pc, #604]	@ (8005bf8 <HAL_RCC_OscConfig+0x27c>)
 800599c:	689b      	ldr	r3, [r3, #8]
 800599e:	f003 030c 	and.w	r3, r3, #12
 80059a2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80059a4:	4b94      	ldr	r3, [pc, #592]	@ (8005bf8 <HAL_RCC_OscConfig+0x27c>)
 80059a6:	68db      	ldr	r3, [r3, #12]
 80059a8:	f003 0303 	and.w	r3, r3, #3
 80059ac:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80059ae:	69bb      	ldr	r3, [r7, #24]
 80059b0:	2b0c      	cmp	r3, #12
 80059b2:	d102      	bne.n	80059ba <HAL_RCC_OscConfig+0x3e>
 80059b4:	697b      	ldr	r3, [r7, #20]
 80059b6:	2b03      	cmp	r3, #3
 80059b8:	d002      	beq.n	80059c0 <HAL_RCC_OscConfig+0x44>
 80059ba:	69bb      	ldr	r3, [r7, #24]
 80059bc:	2b08      	cmp	r3, #8
 80059be:	d10b      	bne.n	80059d8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80059c0:	4b8d      	ldr	r3, [pc, #564]	@ (8005bf8 <HAL_RCC_OscConfig+0x27c>)
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d05b      	beq.n	8005a84 <HAL_RCC_OscConfig+0x108>
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	685b      	ldr	r3, [r3, #4]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d157      	bne.n	8005a84 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80059d4:	2301      	movs	r3, #1
 80059d6:	e2d9      	b.n	8005f8c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	685b      	ldr	r3, [r3, #4]
 80059dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80059e0:	d106      	bne.n	80059f0 <HAL_RCC_OscConfig+0x74>
 80059e2:	4b85      	ldr	r3, [pc, #532]	@ (8005bf8 <HAL_RCC_OscConfig+0x27c>)
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	4a84      	ldr	r2, [pc, #528]	@ (8005bf8 <HAL_RCC_OscConfig+0x27c>)
 80059e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80059ec:	6013      	str	r3, [r2, #0]
 80059ee:	e01d      	b.n	8005a2c <HAL_RCC_OscConfig+0xb0>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	685b      	ldr	r3, [r3, #4]
 80059f4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80059f8:	d10c      	bne.n	8005a14 <HAL_RCC_OscConfig+0x98>
 80059fa:	4b7f      	ldr	r3, [pc, #508]	@ (8005bf8 <HAL_RCC_OscConfig+0x27c>)
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	4a7e      	ldr	r2, [pc, #504]	@ (8005bf8 <HAL_RCC_OscConfig+0x27c>)
 8005a00:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005a04:	6013      	str	r3, [r2, #0]
 8005a06:	4b7c      	ldr	r3, [pc, #496]	@ (8005bf8 <HAL_RCC_OscConfig+0x27c>)
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	4a7b      	ldr	r2, [pc, #492]	@ (8005bf8 <HAL_RCC_OscConfig+0x27c>)
 8005a0c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005a10:	6013      	str	r3, [r2, #0]
 8005a12:	e00b      	b.n	8005a2c <HAL_RCC_OscConfig+0xb0>
 8005a14:	4b78      	ldr	r3, [pc, #480]	@ (8005bf8 <HAL_RCC_OscConfig+0x27c>)
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	4a77      	ldr	r2, [pc, #476]	@ (8005bf8 <HAL_RCC_OscConfig+0x27c>)
 8005a1a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005a1e:	6013      	str	r3, [r2, #0]
 8005a20:	4b75      	ldr	r3, [pc, #468]	@ (8005bf8 <HAL_RCC_OscConfig+0x27c>)
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	4a74      	ldr	r2, [pc, #464]	@ (8005bf8 <HAL_RCC_OscConfig+0x27c>)
 8005a26:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005a2a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	685b      	ldr	r3, [r3, #4]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d013      	beq.n	8005a5c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a34:	f7ff f89e 	bl	8004b74 <HAL_GetTick>
 8005a38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005a3a:	e008      	b.n	8005a4e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005a3c:	f7ff f89a 	bl	8004b74 <HAL_GetTick>
 8005a40:	4602      	mov	r2, r0
 8005a42:	693b      	ldr	r3, [r7, #16]
 8005a44:	1ad3      	subs	r3, r2, r3
 8005a46:	2b64      	cmp	r3, #100	@ 0x64
 8005a48:	d901      	bls.n	8005a4e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005a4a:	2303      	movs	r3, #3
 8005a4c:	e29e      	b.n	8005f8c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005a4e:	4b6a      	ldr	r3, [pc, #424]	@ (8005bf8 <HAL_RCC_OscConfig+0x27c>)
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d0f0      	beq.n	8005a3c <HAL_RCC_OscConfig+0xc0>
 8005a5a:	e014      	b.n	8005a86 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a5c:	f7ff f88a 	bl	8004b74 <HAL_GetTick>
 8005a60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005a62:	e008      	b.n	8005a76 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005a64:	f7ff f886 	bl	8004b74 <HAL_GetTick>
 8005a68:	4602      	mov	r2, r0
 8005a6a:	693b      	ldr	r3, [r7, #16]
 8005a6c:	1ad3      	subs	r3, r2, r3
 8005a6e:	2b64      	cmp	r3, #100	@ 0x64
 8005a70:	d901      	bls.n	8005a76 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005a72:	2303      	movs	r3, #3
 8005a74:	e28a      	b.n	8005f8c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005a76:	4b60      	ldr	r3, [pc, #384]	@ (8005bf8 <HAL_RCC_OscConfig+0x27c>)
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d1f0      	bne.n	8005a64 <HAL_RCC_OscConfig+0xe8>
 8005a82:	e000      	b.n	8005a86 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f003 0302 	and.w	r3, r3, #2
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d075      	beq.n	8005b7e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005a92:	4b59      	ldr	r3, [pc, #356]	@ (8005bf8 <HAL_RCC_OscConfig+0x27c>)
 8005a94:	689b      	ldr	r3, [r3, #8]
 8005a96:	f003 030c 	and.w	r3, r3, #12
 8005a9a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005a9c:	4b56      	ldr	r3, [pc, #344]	@ (8005bf8 <HAL_RCC_OscConfig+0x27c>)
 8005a9e:	68db      	ldr	r3, [r3, #12]
 8005aa0:	f003 0303 	and.w	r3, r3, #3
 8005aa4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8005aa6:	69bb      	ldr	r3, [r7, #24]
 8005aa8:	2b0c      	cmp	r3, #12
 8005aaa:	d102      	bne.n	8005ab2 <HAL_RCC_OscConfig+0x136>
 8005aac:	697b      	ldr	r3, [r7, #20]
 8005aae:	2b02      	cmp	r3, #2
 8005ab0:	d002      	beq.n	8005ab8 <HAL_RCC_OscConfig+0x13c>
 8005ab2:	69bb      	ldr	r3, [r7, #24]
 8005ab4:	2b04      	cmp	r3, #4
 8005ab6:	d11f      	bne.n	8005af8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005ab8:	4b4f      	ldr	r3, [pc, #316]	@ (8005bf8 <HAL_RCC_OscConfig+0x27c>)
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d005      	beq.n	8005ad0 <HAL_RCC_OscConfig+0x154>
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	68db      	ldr	r3, [r3, #12]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d101      	bne.n	8005ad0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8005acc:	2301      	movs	r3, #1
 8005ace:	e25d      	b.n	8005f8c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ad0:	4b49      	ldr	r3, [pc, #292]	@ (8005bf8 <HAL_RCC_OscConfig+0x27c>)
 8005ad2:	685b      	ldr	r3, [r3, #4]
 8005ad4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	691b      	ldr	r3, [r3, #16]
 8005adc:	061b      	lsls	r3, r3, #24
 8005ade:	4946      	ldr	r1, [pc, #280]	@ (8005bf8 <HAL_RCC_OscConfig+0x27c>)
 8005ae0:	4313      	orrs	r3, r2
 8005ae2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005ae4:	4b45      	ldr	r3, [pc, #276]	@ (8005bfc <HAL_RCC_OscConfig+0x280>)
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	4618      	mov	r0, r3
 8005aea:	f7fd ffbf 	bl	8003a6c <HAL_InitTick>
 8005aee:	4603      	mov	r3, r0
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d043      	beq.n	8005b7c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8005af4:	2301      	movs	r3, #1
 8005af6:	e249      	b.n	8005f8c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	68db      	ldr	r3, [r3, #12]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d023      	beq.n	8005b48 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005b00:	4b3d      	ldr	r3, [pc, #244]	@ (8005bf8 <HAL_RCC_OscConfig+0x27c>)
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	4a3c      	ldr	r2, [pc, #240]	@ (8005bf8 <HAL_RCC_OscConfig+0x27c>)
 8005b06:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005b0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b0c:	f7ff f832 	bl	8004b74 <HAL_GetTick>
 8005b10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005b12:	e008      	b.n	8005b26 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005b14:	f7ff f82e 	bl	8004b74 <HAL_GetTick>
 8005b18:	4602      	mov	r2, r0
 8005b1a:	693b      	ldr	r3, [r7, #16]
 8005b1c:	1ad3      	subs	r3, r2, r3
 8005b1e:	2b02      	cmp	r3, #2
 8005b20:	d901      	bls.n	8005b26 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005b22:	2303      	movs	r3, #3
 8005b24:	e232      	b.n	8005f8c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005b26:	4b34      	ldr	r3, [pc, #208]	@ (8005bf8 <HAL_RCC_OscConfig+0x27c>)
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d0f0      	beq.n	8005b14 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b32:	4b31      	ldr	r3, [pc, #196]	@ (8005bf8 <HAL_RCC_OscConfig+0x27c>)
 8005b34:	685b      	ldr	r3, [r3, #4]
 8005b36:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	691b      	ldr	r3, [r3, #16]
 8005b3e:	061b      	lsls	r3, r3, #24
 8005b40:	492d      	ldr	r1, [pc, #180]	@ (8005bf8 <HAL_RCC_OscConfig+0x27c>)
 8005b42:	4313      	orrs	r3, r2
 8005b44:	604b      	str	r3, [r1, #4]
 8005b46:	e01a      	b.n	8005b7e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005b48:	4b2b      	ldr	r3, [pc, #172]	@ (8005bf8 <HAL_RCC_OscConfig+0x27c>)
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	4a2a      	ldr	r2, [pc, #168]	@ (8005bf8 <HAL_RCC_OscConfig+0x27c>)
 8005b4e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005b52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b54:	f7ff f80e 	bl	8004b74 <HAL_GetTick>
 8005b58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005b5a:	e008      	b.n	8005b6e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005b5c:	f7ff f80a 	bl	8004b74 <HAL_GetTick>
 8005b60:	4602      	mov	r2, r0
 8005b62:	693b      	ldr	r3, [r7, #16]
 8005b64:	1ad3      	subs	r3, r2, r3
 8005b66:	2b02      	cmp	r3, #2
 8005b68:	d901      	bls.n	8005b6e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8005b6a:	2303      	movs	r3, #3
 8005b6c:	e20e      	b.n	8005f8c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005b6e:	4b22      	ldr	r3, [pc, #136]	@ (8005bf8 <HAL_RCC_OscConfig+0x27c>)
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d1f0      	bne.n	8005b5c <HAL_RCC_OscConfig+0x1e0>
 8005b7a:	e000      	b.n	8005b7e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005b7c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f003 0308 	and.w	r3, r3, #8
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d041      	beq.n	8005c0e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	695b      	ldr	r3, [r3, #20]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d01c      	beq.n	8005bcc <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005b92:	4b19      	ldr	r3, [pc, #100]	@ (8005bf8 <HAL_RCC_OscConfig+0x27c>)
 8005b94:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005b98:	4a17      	ldr	r2, [pc, #92]	@ (8005bf8 <HAL_RCC_OscConfig+0x27c>)
 8005b9a:	f043 0301 	orr.w	r3, r3, #1
 8005b9e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ba2:	f7fe ffe7 	bl	8004b74 <HAL_GetTick>
 8005ba6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005ba8:	e008      	b.n	8005bbc <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005baa:	f7fe ffe3 	bl	8004b74 <HAL_GetTick>
 8005bae:	4602      	mov	r2, r0
 8005bb0:	693b      	ldr	r3, [r7, #16]
 8005bb2:	1ad3      	subs	r3, r2, r3
 8005bb4:	2b02      	cmp	r3, #2
 8005bb6:	d901      	bls.n	8005bbc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005bb8:	2303      	movs	r3, #3
 8005bba:	e1e7      	b.n	8005f8c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005bbc:	4b0e      	ldr	r3, [pc, #56]	@ (8005bf8 <HAL_RCC_OscConfig+0x27c>)
 8005bbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005bc2:	f003 0302 	and.w	r3, r3, #2
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d0ef      	beq.n	8005baa <HAL_RCC_OscConfig+0x22e>
 8005bca:	e020      	b.n	8005c0e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005bcc:	4b0a      	ldr	r3, [pc, #40]	@ (8005bf8 <HAL_RCC_OscConfig+0x27c>)
 8005bce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005bd2:	4a09      	ldr	r2, [pc, #36]	@ (8005bf8 <HAL_RCC_OscConfig+0x27c>)
 8005bd4:	f023 0301 	bic.w	r3, r3, #1
 8005bd8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005bdc:	f7fe ffca 	bl	8004b74 <HAL_GetTick>
 8005be0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005be2:	e00d      	b.n	8005c00 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005be4:	f7fe ffc6 	bl	8004b74 <HAL_GetTick>
 8005be8:	4602      	mov	r2, r0
 8005bea:	693b      	ldr	r3, [r7, #16]
 8005bec:	1ad3      	subs	r3, r2, r3
 8005bee:	2b02      	cmp	r3, #2
 8005bf0:	d906      	bls.n	8005c00 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005bf2:	2303      	movs	r3, #3
 8005bf4:	e1ca      	b.n	8005f8c <HAL_RCC_OscConfig+0x610>
 8005bf6:	bf00      	nop
 8005bf8:	40021000 	.word	0x40021000
 8005bfc:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005c00:	4b8c      	ldr	r3, [pc, #560]	@ (8005e34 <HAL_RCC_OscConfig+0x4b8>)
 8005c02:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005c06:	f003 0302 	and.w	r3, r3, #2
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d1ea      	bne.n	8005be4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f003 0304 	and.w	r3, r3, #4
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	f000 80a6 	beq.w	8005d68 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005c20:	4b84      	ldr	r3, [pc, #528]	@ (8005e34 <HAL_RCC_OscConfig+0x4b8>)
 8005c22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c24:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d101      	bne.n	8005c30 <HAL_RCC_OscConfig+0x2b4>
 8005c2c:	2301      	movs	r3, #1
 8005c2e:	e000      	b.n	8005c32 <HAL_RCC_OscConfig+0x2b6>
 8005c30:	2300      	movs	r3, #0
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d00d      	beq.n	8005c52 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005c36:	4b7f      	ldr	r3, [pc, #508]	@ (8005e34 <HAL_RCC_OscConfig+0x4b8>)
 8005c38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c3a:	4a7e      	ldr	r2, [pc, #504]	@ (8005e34 <HAL_RCC_OscConfig+0x4b8>)
 8005c3c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005c40:	6593      	str	r3, [r2, #88]	@ 0x58
 8005c42:	4b7c      	ldr	r3, [pc, #496]	@ (8005e34 <HAL_RCC_OscConfig+0x4b8>)
 8005c44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005c4a:	60fb      	str	r3, [r7, #12]
 8005c4c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005c4e:	2301      	movs	r3, #1
 8005c50:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005c52:	4b79      	ldr	r3, [pc, #484]	@ (8005e38 <HAL_RCC_OscConfig+0x4bc>)
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d118      	bne.n	8005c90 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005c5e:	4b76      	ldr	r3, [pc, #472]	@ (8005e38 <HAL_RCC_OscConfig+0x4bc>)
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	4a75      	ldr	r2, [pc, #468]	@ (8005e38 <HAL_RCC_OscConfig+0x4bc>)
 8005c64:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005c68:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005c6a:	f7fe ff83 	bl	8004b74 <HAL_GetTick>
 8005c6e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005c70:	e008      	b.n	8005c84 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c72:	f7fe ff7f 	bl	8004b74 <HAL_GetTick>
 8005c76:	4602      	mov	r2, r0
 8005c78:	693b      	ldr	r3, [r7, #16]
 8005c7a:	1ad3      	subs	r3, r2, r3
 8005c7c:	2b02      	cmp	r3, #2
 8005c7e:	d901      	bls.n	8005c84 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8005c80:	2303      	movs	r3, #3
 8005c82:	e183      	b.n	8005f8c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005c84:	4b6c      	ldr	r3, [pc, #432]	@ (8005e38 <HAL_RCC_OscConfig+0x4bc>)
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d0f0      	beq.n	8005c72 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	689b      	ldr	r3, [r3, #8]
 8005c94:	2b01      	cmp	r3, #1
 8005c96:	d108      	bne.n	8005caa <HAL_RCC_OscConfig+0x32e>
 8005c98:	4b66      	ldr	r3, [pc, #408]	@ (8005e34 <HAL_RCC_OscConfig+0x4b8>)
 8005c9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c9e:	4a65      	ldr	r2, [pc, #404]	@ (8005e34 <HAL_RCC_OscConfig+0x4b8>)
 8005ca0:	f043 0301 	orr.w	r3, r3, #1
 8005ca4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005ca8:	e024      	b.n	8005cf4 <HAL_RCC_OscConfig+0x378>
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	689b      	ldr	r3, [r3, #8]
 8005cae:	2b05      	cmp	r3, #5
 8005cb0:	d110      	bne.n	8005cd4 <HAL_RCC_OscConfig+0x358>
 8005cb2:	4b60      	ldr	r3, [pc, #384]	@ (8005e34 <HAL_RCC_OscConfig+0x4b8>)
 8005cb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005cb8:	4a5e      	ldr	r2, [pc, #376]	@ (8005e34 <HAL_RCC_OscConfig+0x4b8>)
 8005cba:	f043 0304 	orr.w	r3, r3, #4
 8005cbe:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005cc2:	4b5c      	ldr	r3, [pc, #368]	@ (8005e34 <HAL_RCC_OscConfig+0x4b8>)
 8005cc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005cc8:	4a5a      	ldr	r2, [pc, #360]	@ (8005e34 <HAL_RCC_OscConfig+0x4b8>)
 8005cca:	f043 0301 	orr.w	r3, r3, #1
 8005cce:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005cd2:	e00f      	b.n	8005cf4 <HAL_RCC_OscConfig+0x378>
 8005cd4:	4b57      	ldr	r3, [pc, #348]	@ (8005e34 <HAL_RCC_OscConfig+0x4b8>)
 8005cd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005cda:	4a56      	ldr	r2, [pc, #344]	@ (8005e34 <HAL_RCC_OscConfig+0x4b8>)
 8005cdc:	f023 0301 	bic.w	r3, r3, #1
 8005ce0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005ce4:	4b53      	ldr	r3, [pc, #332]	@ (8005e34 <HAL_RCC_OscConfig+0x4b8>)
 8005ce6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005cea:	4a52      	ldr	r2, [pc, #328]	@ (8005e34 <HAL_RCC_OscConfig+0x4b8>)
 8005cec:	f023 0304 	bic.w	r3, r3, #4
 8005cf0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	689b      	ldr	r3, [r3, #8]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d016      	beq.n	8005d2a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005cfc:	f7fe ff3a 	bl	8004b74 <HAL_GetTick>
 8005d00:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005d02:	e00a      	b.n	8005d1a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d04:	f7fe ff36 	bl	8004b74 <HAL_GetTick>
 8005d08:	4602      	mov	r2, r0
 8005d0a:	693b      	ldr	r3, [r7, #16]
 8005d0c:	1ad3      	subs	r3, r2, r3
 8005d0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d901      	bls.n	8005d1a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8005d16:	2303      	movs	r3, #3
 8005d18:	e138      	b.n	8005f8c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005d1a:	4b46      	ldr	r3, [pc, #280]	@ (8005e34 <HAL_RCC_OscConfig+0x4b8>)
 8005d1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d20:	f003 0302 	and.w	r3, r3, #2
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d0ed      	beq.n	8005d04 <HAL_RCC_OscConfig+0x388>
 8005d28:	e015      	b.n	8005d56 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d2a:	f7fe ff23 	bl	8004b74 <HAL_GetTick>
 8005d2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005d30:	e00a      	b.n	8005d48 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d32:	f7fe ff1f 	bl	8004b74 <HAL_GetTick>
 8005d36:	4602      	mov	r2, r0
 8005d38:	693b      	ldr	r3, [r7, #16]
 8005d3a:	1ad3      	subs	r3, r2, r3
 8005d3c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005d40:	4293      	cmp	r3, r2
 8005d42:	d901      	bls.n	8005d48 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005d44:	2303      	movs	r3, #3
 8005d46:	e121      	b.n	8005f8c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005d48:	4b3a      	ldr	r3, [pc, #232]	@ (8005e34 <HAL_RCC_OscConfig+0x4b8>)
 8005d4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d4e:	f003 0302 	and.w	r3, r3, #2
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d1ed      	bne.n	8005d32 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005d56:	7ffb      	ldrb	r3, [r7, #31]
 8005d58:	2b01      	cmp	r3, #1
 8005d5a:	d105      	bne.n	8005d68 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005d5c:	4b35      	ldr	r3, [pc, #212]	@ (8005e34 <HAL_RCC_OscConfig+0x4b8>)
 8005d5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d60:	4a34      	ldr	r2, [pc, #208]	@ (8005e34 <HAL_RCC_OscConfig+0x4b8>)
 8005d62:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005d66:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f003 0320 	and.w	r3, r3, #32
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d03c      	beq.n	8005dee <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	699b      	ldr	r3, [r3, #24]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d01c      	beq.n	8005db6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005d7c:	4b2d      	ldr	r3, [pc, #180]	@ (8005e34 <HAL_RCC_OscConfig+0x4b8>)
 8005d7e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005d82:	4a2c      	ldr	r2, [pc, #176]	@ (8005e34 <HAL_RCC_OscConfig+0x4b8>)
 8005d84:	f043 0301 	orr.w	r3, r3, #1
 8005d88:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d8c:	f7fe fef2 	bl	8004b74 <HAL_GetTick>
 8005d90:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005d92:	e008      	b.n	8005da6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005d94:	f7fe feee 	bl	8004b74 <HAL_GetTick>
 8005d98:	4602      	mov	r2, r0
 8005d9a:	693b      	ldr	r3, [r7, #16]
 8005d9c:	1ad3      	subs	r3, r2, r3
 8005d9e:	2b02      	cmp	r3, #2
 8005da0:	d901      	bls.n	8005da6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8005da2:	2303      	movs	r3, #3
 8005da4:	e0f2      	b.n	8005f8c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005da6:	4b23      	ldr	r3, [pc, #140]	@ (8005e34 <HAL_RCC_OscConfig+0x4b8>)
 8005da8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005dac:	f003 0302 	and.w	r3, r3, #2
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d0ef      	beq.n	8005d94 <HAL_RCC_OscConfig+0x418>
 8005db4:	e01b      	b.n	8005dee <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005db6:	4b1f      	ldr	r3, [pc, #124]	@ (8005e34 <HAL_RCC_OscConfig+0x4b8>)
 8005db8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005dbc:	4a1d      	ldr	r2, [pc, #116]	@ (8005e34 <HAL_RCC_OscConfig+0x4b8>)
 8005dbe:	f023 0301 	bic.w	r3, r3, #1
 8005dc2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005dc6:	f7fe fed5 	bl	8004b74 <HAL_GetTick>
 8005dca:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005dcc:	e008      	b.n	8005de0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005dce:	f7fe fed1 	bl	8004b74 <HAL_GetTick>
 8005dd2:	4602      	mov	r2, r0
 8005dd4:	693b      	ldr	r3, [r7, #16]
 8005dd6:	1ad3      	subs	r3, r2, r3
 8005dd8:	2b02      	cmp	r3, #2
 8005dda:	d901      	bls.n	8005de0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8005ddc:	2303      	movs	r3, #3
 8005dde:	e0d5      	b.n	8005f8c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005de0:	4b14      	ldr	r3, [pc, #80]	@ (8005e34 <HAL_RCC_OscConfig+0x4b8>)
 8005de2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005de6:	f003 0302 	and.w	r3, r3, #2
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d1ef      	bne.n	8005dce <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	69db      	ldr	r3, [r3, #28]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	f000 80c9 	beq.w	8005f8a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005df8:	4b0e      	ldr	r3, [pc, #56]	@ (8005e34 <HAL_RCC_OscConfig+0x4b8>)
 8005dfa:	689b      	ldr	r3, [r3, #8]
 8005dfc:	f003 030c 	and.w	r3, r3, #12
 8005e00:	2b0c      	cmp	r3, #12
 8005e02:	f000 8083 	beq.w	8005f0c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	69db      	ldr	r3, [r3, #28]
 8005e0a:	2b02      	cmp	r3, #2
 8005e0c:	d15e      	bne.n	8005ecc <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e0e:	4b09      	ldr	r3, [pc, #36]	@ (8005e34 <HAL_RCC_OscConfig+0x4b8>)
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	4a08      	ldr	r2, [pc, #32]	@ (8005e34 <HAL_RCC_OscConfig+0x4b8>)
 8005e14:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005e18:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e1a:	f7fe feab 	bl	8004b74 <HAL_GetTick>
 8005e1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005e20:	e00c      	b.n	8005e3c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e22:	f7fe fea7 	bl	8004b74 <HAL_GetTick>
 8005e26:	4602      	mov	r2, r0
 8005e28:	693b      	ldr	r3, [r7, #16]
 8005e2a:	1ad3      	subs	r3, r2, r3
 8005e2c:	2b02      	cmp	r3, #2
 8005e2e:	d905      	bls.n	8005e3c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8005e30:	2303      	movs	r3, #3
 8005e32:	e0ab      	b.n	8005f8c <HAL_RCC_OscConfig+0x610>
 8005e34:	40021000 	.word	0x40021000
 8005e38:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005e3c:	4b55      	ldr	r3, [pc, #340]	@ (8005f94 <HAL_RCC_OscConfig+0x618>)
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d1ec      	bne.n	8005e22 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005e48:	4b52      	ldr	r3, [pc, #328]	@ (8005f94 <HAL_RCC_OscConfig+0x618>)
 8005e4a:	68da      	ldr	r2, [r3, #12]
 8005e4c:	4b52      	ldr	r3, [pc, #328]	@ (8005f98 <HAL_RCC_OscConfig+0x61c>)
 8005e4e:	4013      	ands	r3, r2
 8005e50:	687a      	ldr	r2, [r7, #4]
 8005e52:	6a11      	ldr	r1, [r2, #32]
 8005e54:	687a      	ldr	r2, [r7, #4]
 8005e56:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005e58:	3a01      	subs	r2, #1
 8005e5a:	0112      	lsls	r2, r2, #4
 8005e5c:	4311      	orrs	r1, r2
 8005e5e:	687a      	ldr	r2, [r7, #4]
 8005e60:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8005e62:	0212      	lsls	r2, r2, #8
 8005e64:	4311      	orrs	r1, r2
 8005e66:	687a      	ldr	r2, [r7, #4]
 8005e68:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005e6a:	0852      	lsrs	r2, r2, #1
 8005e6c:	3a01      	subs	r2, #1
 8005e6e:	0552      	lsls	r2, r2, #21
 8005e70:	4311      	orrs	r1, r2
 8005e72:	687a      	ldr	r2, [r7, #4]
 8005e74:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005e76:	0852      	lsrs	r2, r2, #1
 8005e78:	3a01      	subs	r2, #1
 8005e7a:	0652      	lsls	r2, r2, #25
 8005e7c:	4311      	orrs	r1, r2
 8005e7e:	687a      	ldr	r2, [r7, #4]
 8005e80:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005e82:	06d2      	lsls	r2, r2, #27
 8005e84:	430a      	orrs	r2, r1
 8005e86:	4943      	ldr	r1, [pc, #268]	@ (8005f94 <HAL_RCC_OscConfig+0x618>)
 8005e88:	4313      	orrs	r3, r2
 8005e8a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005e8c:	4b41      	ldr	r3, [pc, #260]	@ (8005f94 <HAL_RCC_OscConfig+0x618>)
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	4a40      	ldr	r2, [pc, #256]	@ (8005f94 <HAL_RCC_OscConfig+0x618>)
 8005e92:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005e96:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005e98:	4b3e      	ldr	r3, [pc, #248]	@ (8005f94 <HAL_RCC_OscConfig+0x618>)
 8005e9a:	68db      	ldr	r3, [r3, #12]
 8005e9c:	4a3d      	ldr	r2, [pc, #244]	@ (8005f94 <HAL_RCC_OscConfig+0x618>)
 8005e9e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005ea2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ea4:	f7fe fe66 	bl	8004b74 <HAL_GetTick>
 8005ea8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005eaa:	e008      	b.n	8005ebe <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005eac:	f7fe fe62 	bl	8004b74 <HAL_GetTick>
 8005eb0:	4602      	mov	r2, r0
 8005eb2:	693b      	ldr	r3, [r7, #16]
 8005eb4:	1ad3      	subs	r3, r2, r3
 8005eb6:	2b02      	cmp	r3, #2
 8005eb8:	d901      	bls.n	8005ebe <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8005eba:	2303      	movs	r3, #3
 8005ebc:	e066      	b.n	8005f8c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005ebe:	4b35      	ldr	r3, [pc, #212]	@ (8005f94 <HAL_RCC_OscConfig+0x618>)
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d0f0      	beq.n	8005eac <HAL_RCC_OscConfig+0x530>
 8005eca:	e05e      	b.n	8005f8a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ecc:	4b31      	ldr	r3, [pc, #196]	@ (8005f94 <HAL_RCC_OscConfig+0x618>)
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	4a30      	ldr	r2, [pc, #192]	@ (8005f94 <HAL_RCC_OscConfig+0x618>)
 8005ed2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005ed6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ed8:	f7fe fe4c 	bl	8004b74 <HAL_GetTick>
 8005edc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005ede:	e008      	b.n	8005ef2 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ee0:	f7fe fe48 	bl	8004b74 <HAL_GetTick>
 8005ee4:	4602      	mov	r2, r0
 8005ee6:	693b      	ldr	r3, [r7, #16]
 8005ee8:	1ad3      	subs	r3, r2, r3
 8005eea:	2b02      	cmp	r3, #2
 8005eec:	d901      	bls.n	8005ef2 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8005eee:	2303      	movs	r3, #3
 8005ef0:	e04c      	b.n	8005f8c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005ef2:	4b28      	ldr	r3, [pc, #160]	@ (8005f94 <HAL_RCC_OscConfig+0x618>)
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d1f0      	bne.n	8005ee0 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005efe:	4b25      	ldr	r3, [pc, #148]	@ (8005f94 <HAL_RCC_OscConfig+0x618>)
 8005f00:	68da      	ldr	r2, [r3, #12]
 8005f02:	4924      	ldr	r1, [pc, #144]	@ (8005f94 <HAL_RCC_OscConfig+0x618>)
 8005f04:	4b25      	ldr	r3, [pc, #148]	@ (8005f9c <HAL_RCC_OscConfig+0x620>)
 8005f06:	4013      	ands	r3, r2
 8005f08:	60cb      	str	r3, [r1, #12]
 8005f0a:	e03e      	b.n	8005f8a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	69db      	ldr	r3, [r3, #28]
 8005f10:	2b01      	cmp	r3, #1
 8005f12:	d101      	bne.n	8005f18 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8005f14:	2301      	movs	r3, #1
 8005f16:	e039      	b.n	8005f8c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005f18:	4b1e      	ldr	r3, [pc, #120]	@ (8005f94 <HAL_RCC_OscConfig+0x618>)
 8005f1a:	68db      	ldr	r3, [r3, #12]
 8005f1c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f1e:	697b      	ldr	r3, [r7, #20]
 8005f20:	f003 0203 	and.w	r2, r3, #3
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	6a1b      	ldr	r3, [r3, #32]
 8005f28:	429a      	cmp	r2, r3
 8005f2a:	d12c      	bne.n	8005f86 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005f2c:	697b      	ldr	r3, [r7, #20]
 8005f2e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f36:	3b01      	subs	r3, #1
 8005f38:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f3a:	429a      	cmp	r2, r3
 8005f3c:	d123      	bne.n	8005f86 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005f3e:	697b      	ldr	r3, [r7, #20]
 8005f40:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f48:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005f4a:	429a      	cmp	r2, r3
 8005f4c:	d11b      	bne.n	8005f86 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005f4e:	697b      	ldr	r3, [r7, #20]
 8005f50:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f58:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005f5a:	429a      	cmp	r2, r3
 8005f5c:	d113      	bne.n	8005f86 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005f5e:	697b      	ldr	r3, [r7, #20]
 8005f60:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f68:	085b      	lsrs	r3, r3, #1
 8005f6a:	3b01      	subs	r3, #1
 8005f6c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005f6e:	429a      	cmp	r2, r3
 8005f70:	d109      	bne.n	8005f86 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005f72:	697b      	ldr	r3, [r7, #20]
 8005f74:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f7c:	085b      	lsrs	r3, r3, #1
 8005f7e:	3b01      	subs	r3, #1
 8005f80:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005f82:	429a      	cmp	r2, r3
 8005f84:	d001      	beq.n	8005f8a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8005f86:	2301      	movs	r3, #1
 8005f88:	e000      	b.n	8005f8c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8005f8a:	2300      	movs	r3, #0
}
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	3720      	adds	r7, #32
 8005f90:	46bd      	mov	sp, r7
 8005f92:	bd80      	pop	{r7, pc}
 8005f94:	40021000 	.word	0x40021000
 8005f98:	019f800c 	.word	0x019f800c
 8005f9c:	feeefffc 	.word	0xfeeefffc

08005fa0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b086      	sub	sp, #24
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
 8005fa8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005faa:	2300      	movs	r3, #0
 8005fac:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d101      	bne.n	8005fb8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005fb4:	2301      	movs	r3, #1
 8005fb6:	e11e      	b.n	80061f6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005fb8:	4b91      	ldr	r3, [pc, #580]	@ (8006200 <HAL_RCC_ClockConfig+0x260>)
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f003 030f 	and.w	r3, r3, #15
 8005fc0:	683a      	ldr	r2, [r7, #0]
 8005fc2:	429a      	cmp	r2, r3
 8005fc4:	d910      	bls.n	8005fe8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005fc6:	4b8e      	ldr	r3, [pc, #568]	@ (8006200 <HAL_RCC_ClockConfig+0x260>)
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f023 020f 	bic.w	r2, r3, #15
 8005fce:	498c      	ldr	r1, [pc, #560]	@ (8006200 <HAL_RCC_ClockConfig+0x260>)
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	4313      	orrs	r3, r2
 8005fd4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005fd6:	4b8a      	ldr	r3, [pc, #552]	@ (8006200 <HAL_RCC_ClockConfig+0x260>)
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f003 030f 	and.w	r3, r3, #15
 8005fde:	683a      	ldr	r2, [r7, #0]
 8005fe0:	429a      	cmp	r2, r3
 8005fe2:	d001      	beq.n	8005fe8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005fe4:	2301      	movs	r3, #1
 8005fe6:	e106      	b.n	80061f6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f003 0301 	and.w	r3, r3, #1
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d073      	beq.n	80060dc <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	685b      	ldr	r3, [r3, #4]
 8005ff8:	2b03      	cmp	r3, #3
 8005ffa:	d129      	bne.n	8006050 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005ffc:	4b81      	ldr	r3, [pc, #516]	@ (8006204 <HAL_RCC_ClockConfig+0x264>)
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006004:	2b00      	cmp	r3, #0
 8006006:	d101      	bne.n	800600c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8006008:	2301      	movs	r3, #1
 800600a:	e0f4      	b.n	80061f6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800600c:	f000 f9d0 	bl	80063b0 <RCC_GetSysClockFreqFromPLLSource>
 8006010:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8006012:	693b      	ldr	r3, [r7, #16]
 8006014:	4a7c      	ldr	r2, [pc, #496]	@ (8006208 <HAL_RCC_ClockConfig+0x268>)
 8006016:	4293      	cmp	r3, r2
 8006018:	d93f      	bls.n	800609a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800601a:	4b7a      	ldr	r3, [pc, #488]	@ (8006204 <HAL_RCC_ClockConfig+0x264>)
 800601c:	689b      	ldr	r3, [r3, #8]
 800601e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006022:	2b00      	cmp	r3, #0
 8006024:	d009      	beq.n	800603a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800602e:	2b00      	cmp	r3, #0
 8006030:	d033      	beq.n	800609a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006036:	2b00      	cmp	r3, #0
 8006038:	d12f      	bne.n	800609a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800603a:	4b72      	ldr	r3, [pc, #456]	@ (8006204 <HAL_RCC_ClockConfig+0x264>)
 800603c:	689b      	ldr	r3, [r3, #8]
 800603e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006042:	4a70      	ldr	r2, [pc, #448]	@ (8006204 <HAL_RCC_ClockConfig+0x264>)
 8006044:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006048:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800604a:	2380      	movs	r3, #128	@ 0x80
 800604c:	617b      	str	r3, [r7, #20]
 800604e:	e024      	b.n	800609a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	685b      	ldr	r3, [r3, #4]
 8006054:	2b02      	cmp	r3, #2
 8006056:	d107      	bne.n	8006068 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006058:	4b6a      	ldr	r3, [pc, #424]	@ (8006204 <HAL_RCC_ClockConfig+0x264>)
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006060:	2b00      	cmp	r3, #0
 8006062:	d109      	bne.n	8006078 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006064:	2301      	movs	r3, #1
 8006066:	e0c6      	b.n	80061f6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006068:	4b66      	ldr	r3, [pc, #408]	@ (8006204 <HAL_RCC_ClockConfig+0x264>)
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006070:	2b00      	cmp	r3, #0
 8006072:	d101      	bne.n	8006078 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006074:	2301      	movs	r3, #1
 8006076:	e0be      	b.n	80061f6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8006078:	f000 f8ce 	bl	8006218 <HAL_RCC_GetSysClockFreq>
 800607c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800607e:	693b      	ldr	r3, [r7, #16]
 8006080:	4a61      	ldr	r2, [pc, #388]	@ (8006208 <HAL_RCC_ClockConfig+0x268>)
 8006082:	4293      	cmp	r3, r2
 8006084:	d909      	bls.n	800609a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006086:	4b5f      	ldr	r3, [pc, #380]	@ (8006204 <HAL_RCC_ClockConfig+0x264>)
 8006088:	689b      	ldr	r3, [r3, #8]
 800608a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800608e:	4a5d      	ldr	r2, [pc, #372]	@ (8006204 <HAL_RCC_ClockConfig+0x264>)
 8006090:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006094:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8006096:	2380      	movs	r3, #128	@ 0x80
 8006098:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800609a:	4b5a      	ldr	r3, [pc, #360]	@ (8006204 <HAL_RCC_ClockConfig+0x264>)
 800609c:	689b      	ldr	r3, [r3, #8]
 800609e:	f023 0203 	bic.w	r2, r3, #3
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	685b      	ldr	r3, [r3, #4]
 80060a6:	4957      	ldr	r1, [pc, #348]	@ (8006204 <HAL_RCC_ClockConfig+0x264>)
 80060a8:	4313      	orrs	r3, r2
 80060aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80060ac:	f7fe fd62 	bl	8004b74 <HAL_GetTick>
 80060b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80060b2:	e00a      	b.n	80060ca <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80060b4:	f7fe fd5e 	bl	8004b74 <HAL_GetTick>
 80060b8:	4602      	mov	r2, r0
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	1ad3      	subs	r3, r2, r3
 80060be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d901      	bls.n	80060ca <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80060c6:	2303      	movs	r3, #3
 80060c8:	e095      	b.n	80061f6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80060ca:	4b4e      	ldr	r3, [pc, #312]	@ (8006204 <HAL_RCC_ClockConfig+0x264>)
 80060cc:	689b      	ldr	r3, [r3, #8]
 80060ce:	f003 020c 	and.w	r2, r3, #12
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	685b      	ldr	r3, [r3, #4]
 80060d6:	009b      	lsls	r3, r3, #2
 80060d8:	429a      	cmp	r2, r3
 80060da:	d1eb      	bne.n	80060b4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f003 0302 	and.w	r3, r3, #2
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d023      	beq.n	8006130 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f003 0304 	and.w	r3, r3, #4
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d005      	beq.n	8006100 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80060f4:	4b43      	ldr	r3, [pc, #268]	@ (8006204 <HAL_RCC_ClockConfig+0x264>)
 80060f6:	689b      	ldr	r3, [r3, #8]
 80060f8:	4a42      	ldr	r2, [pc, #264]	@ (8006204 <HAL_RCC_ClockConfig+0x264>)
 80060fa:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80060fe:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f003 0308 	and.w	r3, r3, #8
 8006108:	2b00      	cmp	r3, #0
 800610a:	d007      	beq.n	800611c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800610c:	4b3d      	ldr	r3, [pc, #244]	@ (8006204 <HAL_RCC_ClockConfig+0x264>)
 800610e:	689b      	ldr	r3, [r3, #8]
 8006110:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006114:	4a3b      	ldr	r2, [pc, #236]	@ (8006204 <HAL_RCC_ClockConfig+0x264>)
 8006116:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800611a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800611c:	4b39      	ldr	r3, [pc, #228]	@ (8006204 <HAL_RCC_ClockConfig+0x264>)
 800611e:	689b      	ldr	r3, [r3, #8]
 8006120:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	689b      	ldr	r3, [r3, #8]
 8006128:	4936      	ldr	r1, [pc, #216]	@ (8006204 <HAL_RCC_ClockConfig+0x264>)
 800612a:	4313      	orrs	r3, r2
 800612c:	608b      	str	r3, [r1, #8]
 800612e:	e008      	b.n	8006142 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8006130:	697b      	ldr	r3, [r7, #20]
 8006132:	2b80      	cmp	r3, #128	@ 0x80
 8006134:	d105      	bne.n	8006142 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8006136:	4b33      	ldr	r3, [pc, #204]	@ (8006204 <HAL_RCC_ClockConfig+0x264>)
 8006138:	689b      	ldr	r3, [r3, #8]
 800613a:	4a32      	ldr	r2, [pc, #200]	@ (8006204 <HAL_RCC_ClockConfig+0x264>)
 800613c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006140:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006142:	4b2f      	ldr	r3, [pc, #188]	@ (8006200 <HAL_RCC_ClockConfig+0x260>)
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f003 030f 	and.w	r3, r3, #15
 800614a:	683a      	ldr	r2, [r7, #0]
 800614c:	429a      	cmp	r2, r3
 800614e:	d21d      	bcs.n	800618c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006150:	4b2b      	ldr	r3, [pc, #172]	@ (8006200 <HAL_RCC_ClockConfig+0x260>)
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f023 020f 	bic.w	r2, r3, #15
 8006158:	4929      	ldr	r1, [pc, #164]	@ (8006200 <HAL_RCC_ClockConfig+0x260>)
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	4313      	orrs	r3, r2
 800615e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006160:	f7fe fd08 	bl	8004b74 <HAL_GetTick>
 8006164:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006166:	e00a      	b.n	800617e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006168:	f7fe fd04 	bl	8004b74 <HAL_GetTick>
 800616c:	4602      	mov	r2, r0
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	1ad3      	subs	r3, r2, r3
 8006172:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006176:	4293      	cmp	r3, r2
 8006178:	d901      	bls.n	800617e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800617a:	2303      	movs	r3, #3
 800617c:	e03b      	b.n	80061f6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800617e:	4b20      	ldr	r3, [pc, #128]	@ (8006200 <HAL_RCC_ClockConfig+0x260>)
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f003 030f 	and.w	r3, r3, #15
 8006186:	683a      	ldr	r2, [r7, #0]
 8006188:	429a      	cmp	r2, r3
 800618a:	d1ed      	bne.n	8006168 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f003 0304 	and.w	r3, r3, #4
 8006194:	2b00      	cmp	r3, #0
 8006196:	d008      	beq.n	80061aa <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006198:	4b1a      	ldr	r3, [pc, #104]	@ (8006204 <HAL_RCC_ClockConfig+0x264>)
 800619a:	689b      	ldr	r3, [r3, #8]
 800619c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	68db      	ldr	r3, [r3, #12]
 80061a4:	4917      	ldr	r1, [pc, #92]	@ (8006204 <HAL_RCC_ClockConfig+0x264>)
 80061a6:	4313      	orrs	r3, r2
 80061a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f003 0308 	and.w	r3, r3, #8
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d009      	beq.n	80061ca <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80061b6:	4b13      	ldr	r3, [pc, #76]	@ (8006204 <HAL_RCC_ClockConfig+0x264>)
 80061b8:	689b      	ldr	r3, [r3, #8]
 80061ba:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	691b      	ldr	r3, [r3, #16]
 80061c2:	00db      	lsls	r3, r3, #3
 80061c4:	490f      	ldr	r1, [pc, #60]	@ (8006204 <HAL_RCC_ClockConfig+0x264>)
 80061c6:	4313      	orrs	r3, r2
 80061c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80061ca:	f000 f825 	bl	8006218 <HAL_RCC_GetSysClockFreq>
 80061ce:	4602      	mov	r2, r0
 80061d0:	4b0c      	ldr	r3, [pc, #48]	@ (8006204 <HAL_RCC_ClockConfig+0x264>)
 80061d2:	689b      	ldr	r3, [r3, #8]
 80061d4:	091b      	lsrs	r3, r3, #4
 80061d6:	f003 030f 	and.w	r3, r3, #15
 80061da:	490c      	ldr	r1, [pc, #48]	@ (800620c <HAL_RCC_ClockConfig+0x26c>)
 80061dc:	5ccb      	ldrb	r3, [r1, r3]
 80061de:	f003 031f 	and.w	r3, r3, #31
 80061e2:	fa22 f303 	lsr.w	r3, r2, r3
 80061e6:	4a0a      	ldr	r2, [pc, #40]	@ (8006210 <HAL_RCC_ClockConfig+0x270>)
 80061e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80061ea:	4b0a      	ldr	r3, [pc, #40]	@ (8006214 <HAL_RCC_ClockConfig+0x274>)
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	4618      	mov	r0, r3
 80061f0:	f7fd fc3c 	bl	8003a6c <HAL_InitTick>
 80061f4:	4603      	mov	r3, r0
}
 80061f6:	4618      	mov	r0, r3
 80061f8:	3718      	adds	r7, #24
 80061fa:	46bd      	mov	sp, r7
 80061fc:	bd80      	pop	{r7, pc}
 80061fe:	bf00      	nop
 8006200:	40022000 	.word	0x40022000
 8006204:	40021000 	.word	0x40021000
 8006208:	04c4b400 	.word	0x04c4b400
 800620c:	0801d52c 	.word	0x0801d52c
 8006210:	20000004 	.word	0x20000004
 8006214:	20000008 	.word	0x20000008

08006218 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006218:	b480      	push	{r7}
 800621a:	b087      	sub	sp, #28
 800621c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800621e:	4b2c      	ldr	r3, [pc, #176]	@ (80062d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006220:	689b      	ldr	r3, [r3, #8]
 8006222:	f003 030c 	and.w	r3, r3, #12
 8006226:	2b04      	cmp	r3, #4
 8006228:	d102      	bne.n	8006230 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800622a:	4b2a      	ldr	r3, [pc, #168]	@ (80062d4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800622c:	613b      	str	r3, [r7, #16]
 800622e:	e047      	b.n	80062c0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006230:	4b27      	ldr	r3, [pc, #156]	@ (80062d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006232:	689b      	ldr	r3, [r3, #8]
 8006234:	f003 030c 	and.w	r3, r3, #12
 8006238:	2b08      	cmp	r3, #8
 800623a:	d102      	bne.n	8006242 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800623c:	4b26      	ldr	r3, [pc, #152]	@ (80062d8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800623e:	613b      	str	r3, [r7, #16]
 8006240:	e03e      	b.n	80062c0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8006242:	4b23      	ldr	r3, [pc, #140]	@ (80062d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006244:	689b      	ldr	r3, [r3, #8]
 8006246:	f003 030c 	and.w	r3, r3, #12
 800624a:	2b0c      	cmp	r3, #12
 800624c:	d136      	bne.n	80062bc <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800624e:	4b20      	ldr	r3, [pc, #128]	@ (80062d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006250:	68db      	ldr	r3, [r3, #12]
 8006252:	f003 0303 	and.w	r3, r3, #3
 8006256:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006258:	4b1d      	ldr	r3, [pc, #116]	@ (80062d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800625a:	68db      	ldr	r3, [r3, #12]
 800625c:	091b      	lsrs	r3, r3, #4
 800625e:	f003 030f 	and.w	r3, r3, #15
 8006262:	3301      	adds	r3, #1
 8006264:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	2b03      	cmp	r3, #3
 800626a:	d10c      	bne.n	8006286 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800626c:	4a1a      	ldr	r2, [pc, #104]	@ (80062d8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800626e:	68bb      	ldr	r3, [r7, #8]
 8006270:	fbb2 f3f3 	udiv	r3, r2, r3
 8006274:	4a16      	ldr	r2, [pc, #88]	@ (80062d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006276:	68d2      	ldr	r2, [r2, #12]
 8006278:	0a12      	lsrs	r2, r2, #8
 800627a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800627e:	fb02 f303 	mul.w	r3, r2, r3
 8006282:	617b      	str	r3, [r7, #20]
      break;
 8006284:	e00c      	b.n	80062a0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006286:	4a13      	ldr	r2, [pc, #76]	@ (80062d4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006288:	68bb      	ldr	r3, [r7, #8]
 800628a:	fbb2 f3f3 	udiv	r3, r2, r3
 800628e:	4a10      	ldr	r2, [pc, #64]	@ (80062d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006290:	68d2      	ldr	r2, [r2, #12]
 8006292:	0a12      	lsrs	r2, r2, #8
 8006294:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006298:	fb02 f303 	mul.w	r3, r2, r3
 800629c:	617b      	str	r3, [r7, #20]
      break;
 800629e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80062a0:	4b0b      	ldr	r3, [pc, #44]	@ (80062d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80062a2:	68db      	ldr	r3, [r3, #12]
 80062a4:	0e5b      	lsrs	r3, r3, #25
 80062a6:	f003 0303 	and.w	r3, r3, #3
 80062aa:	3301      	adds	r3, #1
 80062ac:	005b      	lsls	r3, r3, #1
 80062ae:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80062b0:	697a      	ldr	r2, [r7, #20]
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80062b8:	613b      	str	r3, [r7, #16]
 80062ba:	e001      	b.n	80062c0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80062bc:	2300      	movs	r3, #0
 80062be:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80062c0:	693b      	ldr	r3, [r7, #16]
}
 80062c2:	4618      	mov	r0, r3
 80062c4:	371c      	adds	r7, #28
 80062c6:	46bd      	mov	sp, r7
 80062c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062cc:	4770      	bx	lr
 80062ce:	bf00      	nop
 80062d0:	40021000 	.word	0x40021000
 80062d4:	00f42400 	.word	0x00f42400
 80062d8:	016e3600 	.word	0x016e3600

080062dc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80062dc:	b480      	push	{r7}
 80062de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80062e0:	4b03      	ldr	r3, [pc, #12]	@ (80062f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80062e2:	681b      	ldr	r3, [r3, #0]
}
 80062e4:	4618      	mov	r0, r3
 80062e6:	46bd      	mov	sp, r7
 80062e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ec:	4770      	bx	lr
 80062ee:	bf00      	nop
 80062f0:	20000004 	.word	0x20000004

080062f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80062f8:	f7ff fff0 	bl	80062dc <HAL_RCC_GetHCLKFreq>
 80062fc:	4602      	mov	r2, r0
 80062fe:	4b06      	ldr	r3, [pc, #24]	@ (8006318 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006300:	689b      	ldr	r3, [r3, #8]
 8006302:	0a1b      	lsrs	r3, r3, #8
 8006304:	f003 0307 	and.w	r3, r3, #7
 8006308:	4904      	ldr	r1, [pc, #16]	@ (800631c <HAL_RCC_GetPCLK1Freq+0x28>)
 800630a:	5ccb      	ldrb	r3, [r1, r3]
 800630c:	f003 031f 	and.w	r3, r3, #31
 8006310:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006314:	4618      	mov	r0, r3
 8006316:	bd80      	pop	{r7, pc}
 8006318:	40021000 	.word	0x40021000
 800631c:	0801d53c 	.word	0x0801d53c

08006320 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006320:	b580      	push	{r7, lr}
 8006322:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006324:	f7ff ffda 	bl	80062dc <HAL_RCC_GetHCLKFreq>
 8006328:	4602      	mov	r2, r0
 800632a:	4b06      	ldr	r3, [pc, #24]	@ (8006344 <HAL_RCC_GetPCLK2Freq+0x24>)
 800632c:	689b      	ldr	r3, [r3, #8]
 800632e:	0adb      	lsrs	r3, r3, #11
 8006330:	f003 0307 	and.w	r3, r3, #7
 8006334:	4904      	ldr	r1, [pc, #16]	@ (8006348 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006336:	5ccb      	ldrb	r3, [r1, r3]
 8006338:	f003 031f 	and.w	r3, r3, #31
 800633c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006340:	4618      	mov	r0, r3
 8006342:	bd80      	pop	{r7, pc}
 8006344:	40021000 	.word	0x40021000
 8006348:	0801d53c 	.word	0x0801d53c

0800634c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800634c:	b480      	push	{r7}
 800634e:	b083      	sub	sp, #12
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
 8006354:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	220f      	movs	r2, #15
 800635a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800635c:	4b12      	ldr	r3, [pc, #72]	@ (80063a8 <HAL_RCC_GetClockConfig+0x5c>)
 800635e:	689b      	ldr	r3, [r3, #8]
 8006360:	f003 0203 	and.w	r2, r3, #3
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8006368:	4b0f      	ldr	r3, [pc, #60]	@ (80063a8 <HAL_RCC_GetClockConfig+0x5c>)
 800636a:	689b      	ldr	r3, [r3, #8]
 800636c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8006374:	4b0c      	ldr	r3, [pc, #48]	@ (80063a8 <HAL_RCC_GetClockConfig+0x5c>)
 8006376:	689b      	ldr	r3, [r3, #8]
 8006378:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8006380:	4b09      	ldr	r3, [pc, #36]	@ (80063a8 <HAL_RCC_GetClockConfig+0x5c>)
 8006382:	689b      	ldr	r3, [r3, #8]
 8006384:	08db      	lsrs	r3, r3, #3
 8006386:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800638e:	4b07      	ldr	r3, [pc, #28]	@ (80063ac <HAL_RCC_GetClockConfig+0x60>)
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f003 020f 	and.w	r2, r3, #15
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	601a      	str	r2, [r3, #0]
}
 800639a:	bf00      	nop
 800639c:	370c      	adds	r7, #12
 800639e:	46bd      	mov	sp, r7
 80063a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a4:	4770      	bx	lr
 80063a6:	bf00      	nop
 80063a8:	40021000 	.word	0x40021000
 80063ac:	40022000 	.word	0x40022000

080063b0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80063b0:	b480      	push	{r7}
 80063b2:	b087      	sub	sp, #28
 80063b4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80063b6:	4b1e      	ldr	r3, [pc, #120]	@ (8006430 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80063b8:	68db      	ldr	r3, [r3, #12]
 80063ba:	f003 0303 	and.w	r3, r3, #3
 80063be:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80063c0:	4b1b      	ldr	r3, [pc, #108]	@ (8006430 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80063c2:	68db      	ldr	r3, [r3, #12]
 80063c4:	091b      	lsrs	r3, r3, #4
 80063c6:	f003 030f 	and.w	r3, r3, #15
 80063ca:	3301      	adds	r3, #1
 80063cc:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80063ce:	693b      	ldr	r3, [r7, #16]
 80063d0:	2b03      	cmp	r3, #3
 80063d2:	d10c      	bne.n	80063ee <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80063d4:	4a17      	ldr	r2, [pc, #92]	@ (8006434 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80063dc:	4a14      	ldr	r2, [pc, #80]	@ (8006430 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80063de:	68d2      	ldr	r2, [r2, #12]
 80063e0:	0a12      	lsrs	r2, r2, #8
 80063e2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80063e6:	fb02 f303 	mul.w	r3, r2, r3
 80063ea:	617b      	str	r3, [r7, #20]
    break;
 80063ec:	e00c      	b.n	8006408 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80063ee:	4a12      	ldr	r2, [pc, #72]	@ (8006438 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80063f6:	4a0e      	ldr	r2, [pc, #56]	@ (8006430 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80063f8:	68d2      	ldr	r2, [r2, #12]
 80063fa:	0a12      	lsrs	r2, r2, #8
 80063fc:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006400:	fb02 f303 	mul.w	r3, r2, r3
 8006404:	617b      	str	r3, [r7, #20]
    break;
 8006406:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006408:	4b09      	ldr	r3, [pc, #36]	@ (8006430 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800640a:	68db      	ldr	r3, [r3, #12]
 800640c:	0e5b      	lsrs	r3, r3, #25
 800640e:	f003 0303 	and.w	r3, r3, #3
 8006412:	3301      	adds	r3, #1
 8006414:	005b      	lsls	r3, r3, #1
 8006416:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8006418:	697a      	ldr	r2, [r7, #20]
 800641a:	68bb      	ldr	r3, [r7, #8]
 800641c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006420:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8006422:	687b      	ldr	r3, [r7, #4]
}
 8006424:	4618      	mov	r0, r3
 8006426:	371c      	adds	r7, #28
 8006428:	46bd      	mov	sp, r7
 800642a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642e:	4770      	bx	lr
 8006430:	40021000 	.word	0x40021000
 8006434:	016e3600 	.word	0x016e3600
 8006438:	00f42400 	.word	0x00f42400

0800643c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800643c:	b580      	push	{r7, lr}
 800643e:	b086      	sub	sp, #24
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006444:	2300      	movs	r3, #0
 8006446:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006448:	2300      	movs	r3, #0
 800644a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006454:	2b00      	cmp	r3, #0
 8006456:	f000 8098 	beq.w	800658a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800645a:	2300      	movs	r3, #0
 800645c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800645e:	4b43      	ldr	r3, [pc, #268]	@ (800656c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006460:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006462:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006466:	2b00      	cmp	r3, #0
 8006468:	d10d      	bne.n	8006486 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800646a:	4b40      	ldr	r3, [pc, #256]	@ (800656c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800646c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800646e:	4a3f      	ldr	r2, [pc, #252]	@ (800656c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006470:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006474:	6593      	str	r3, [r2, #88]	@ 0x58
 8006476:	4b3d      	ldr	r3, [pc, #244]	@ (800656c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006478:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800647a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800647e:	60bb      	str	r3, [r7, #8]
 8006480:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006482:	2301      	movs	r3, #1
 8006484:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006486:	4b3a      	ldr	r3, [pc, #232]	@ (8006570 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	4a39      	ldr	r2, [pc, #228]	@ (8006570 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800648c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006490:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006492:	f7fe fb6f 	bl	8004b74 <HAL_GetTick>
 8006496:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006498:	e009      	b.n	80064ae <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800649a:	f7fe fb6b 	bl	8004b74 <HAL_GetTick>
 800649e:	4602      	mov	r2, r0
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	1ad3      	subs	r3, r2, r3
 80064a4:	2b02      	cmp	r3, #2
 80064a6:	d902      	bls.n	80064ae <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80064a8:	2303      	movs	r3, #3
 80064aa:	74fb      	strb	r3, [r7, #19]
        break;
 80064ac:	e005      	b.n	80064ba <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80064ae:	4b30      	ldr	r3, [pc, #192]	@ (8006570 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d0ef      	beq.n	800649a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80064ba:	7cfb      	ldrb	r3, [r7, #19]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d159      	bne.n	8006574 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80064c0:	4b2a      	ldr	r3, [pc, #168]	@ (800656c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80064c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80064c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80064ca:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80064cc:	697b      	ldr	r3, [r7, #20]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d01e      	beq.n	8006510 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80064d6:	697a      	ldr	r2, [r7, #20]
 80064d8:	429a      	cmp	r2, r3
 80064da:	d019      	beq.n	8006510 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80064dc:	4b23      	ldr	r3, [pc, #140]	@ (800656c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80064de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80064e2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80064e6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80064e8:	4b20      	ldr	r3, [pc, #128]	@ (800656c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80064ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80064ee:	4a1f      	ldr	r2, [pc, #124]	@ (800656c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80064f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80064f4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80064f8:	4b1c      	ldr	r3, [pc, #112]	@ (800656c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80064fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80064fe:	4a1b      	ldr	r2, [pc, #108]	@ (800656c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006500:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006504:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006508:	4a18      	ldr	r2, [pc, #96]	@ (800656c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800650a:	697b      	ldr	r3, [r7, #20]
 800650c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006510:	697b      	ldr	r3, [r7, #20]
 8006512:	f003 0301 	and.w	r3, r3, #1
 8006516:	2b00      	cmp	r3, #0
 8006518:	d016      	beq.n	8006548 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800651a:	f7fe fb2b 	bl	8004b74 <HAL_GetTick>
 800651e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006520:	e00b      	b.n	800653a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006522:	f7fe fb27 	bl	8004b74 <HAL_GetTick>
 8006526:	4602      	mov	r2, r0
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	1ad3      	subs	r3, r2, r3
 800652c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006530:	4293      	cmp	r3, r2
 8006532:	d902      	bls.n	800653a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8006534:	2303      	movs	r3, #3
 8006536:	74fb      	strb	r3, [r7, #19]
            break;
 8006538:	e006      	b.n	8006548 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800653a:	4b0c      	ldr	r3, [pc, #48]	@ (800656c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800653c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006540:	f003 0302 	and.w	r3, r3, #2
 8006544:	2b00      	cmp	r3, #0
 8006546:	d0ec      	beq.n	8006522 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8006548:	7cfb      	ldrb	r3, [r7, #19]
 800654a:	2b00      	cmp	r3, #0
 800654c:	d10b      	bne.n	8006566 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800654e:	4b07      	ldr	r3, [pc, #28]	@ (800656c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006550:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006554:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800655c:	4903      	ldr	r1, [pc, #12]	@ (800656c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800655e:	4313      	orrs	r3, r2
 8006560:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8006564:	e008      	b.n	8006578 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006566:	7cfb      	ldrb	r3, [r7, #19]
 8006568:	74bb      	strb	r3, [r7, #18]
 800656a:	e005      	b.n	8006578 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800656c:	40021000 	.word	0x40021000
 8006570:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006574:	7cfb      	ldrb	r3, [r7, #19]
 8006576:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006578:	7c7b      	ldrb	r3, [r7, #17]
 800657a:	2b01      	cmp	r3, #1
 800657c:	d105      	bne.n	800658a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800657e:	4ba7      	ldr	r3, [pc, #668]	@ (800681c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006580:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006582:	4aa6      	ldr	r2, [pc, #664]	@ (800681c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006584:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006588:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f003 0301 	and.w	r3, r3, #1
 8006592:	2b00      	cmp	r3, #0
 8006594:	d00a      	beq.n	80065ac <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006596:	4ba1      	ldr	r3, [pc, #644]	@ (800681c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006598:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800659c:	f023 0203 	bic.w	r2, r3, #3
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	685b      	ldr	r3, [r3, #4]
 80065a4:	499d      	ldr	r1, [pc, #628]	@ (800681c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80065a6:	4313      	orrs	r3, r2
 80065a8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f003 0302 	and.w	r3, r3, #2
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d00a      	beq.n	80065ce <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80065b8:	4b98      	ldr	r3, [pc, #608]	@ (800681c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80065ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065be:	f023 020c 	bic.w	r2, r3, #12
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	689b      	ldr	r3, [r3, #8]
 80065c6:	4995      	ldr	r1, [pc, #596]	@ (800681c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80065c8:	4313      	orrs	r3, r2
 80065ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	f003 0304 	and.w	r3, r3, #4
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d00a      	beq.n	80065f0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80065da:	4b90      	ldr	r3, [pc, #576]	@ (800681c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80065dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065e0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	68db      	ldr	r3, [r3, #12]
 80065e8:	498c      	ldr	r1, [pc, #560]	@ (800681c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80065ea:	4313      	orrs	r3, r2
 80065ec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f003 0308 	and.w	r3, r3, #8
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d00a      	beq.n	8006612 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80065fc:	4b87      	ldr	r3, [pc, #540]	@ (800681c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80065fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006602:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	691b      	ldr	r3, [r3, #16]
 800660a:	4984      	ldr	r1, [pc, #528]	@ (800681c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800660c:	4313      	orrs	r3, r2
 800660e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f003 0310 	and.w	r3, r3, #16
 800661a:	2b00      	cmp	r3, #0
 800661c:	d00a      	beq.n	8006634 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800661e:	4b7f      	ldr	r3, [pc, #508]	@ (800681c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006620:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006624:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	695b      	ldr	r3, [r3, #20]
 800662c:	497b      	ldr	r1, [pc, #492]	@ (800681c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800662e:	4313      	orrs	r3, r2
 8006630:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f003 0320 	and.w	r3, r3, #32
 800663c:	2b00      	cmp	r3, #0
 800663e:	d00a      	beq.n	8006656 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006640:	4b76      	ldr	r3, [pc, #472]	@ (800681c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006642:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006646:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	699b      	ldr	r3, [r3, #24]
 800664e:	4973      	ldr	r1, [pc, #460]	@ (800681c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006650:	4313      	orrs	r3, r2
 8006652:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800665e:	2b00      	cmp	r3, #0
 8006660:	d00a      	beq.n	8006678 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006662:	4b6e      	ldr	r3, [pc, #440]	@ (800681c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006664:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006668:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	69db      	ldr	r3, [r3, #28]
 8006670:	496a      	ldr	r1, [pc, #424]	@ (800681c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006672:	4313      	orrs	r3, r2
 8006674:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006680:	2b00      	cmp	r3, #0
 8006682:	d00a      	beq.n	800669a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006684:	4b65      	ldr	r3, [pc, #404]	@ (800681c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006686:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800668a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6a1b      	ldr	r3, [r3, #32]
 8006692:	4962      	ldr	r1, [pc, #392]	@ (800681c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006694:	4313      	orrs	r3, r2
 8006696:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d00a      	beq.n	80066bc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80066a6:	4b5d      	ldr	r3, [pc, #372]	@ (800681c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80066a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80066ac:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066b4:	4959      	ldr	r1, [pc, #356]	@ (800681c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80066b6:	4313      	orrs	r3, r2
 80066b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d00a      	beq.n	80066de <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80066c8:	4b54      	ldr	r3, [pc, #336]	@ (800681c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80066ca:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80066ce:	f023 0203 	bic.w	r2, r3, #3
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066d6:	4951      	ldr	r1, [pc, #324]	@ (800681c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80066d8:	4313      	orrs	r3, r2
 80066da:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d00a      	beq.n	8006700 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80066ea:	4b4c      	ldr	r3, [pc, #304]	@ (800681c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80066ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80066f0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066f8:	4948      	ldr	r1, [pc, #288]	@ (800681c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80066fa:	4313      	orrs	r3, r2
 80066fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006708:	2b00      	cmp	r3, #0
 800670a:	d015      	beq.n	8006738 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800670c:	4b43      	ldr	r3, [pc, #268]	@ (800681c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800670e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006712:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800671a:	4940      	ldr	r1, [pc, #256]	@ (800681c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800671c:	4313      	orrs	r3, r2
 800671e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006726:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800672a:	d105      	bne.n	8006738 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800672c:	4b3b      	ldr	r3, [pc, #236]	@ (800681c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800672e:	68db      	ldr	r3, [r3, #12]
 8006730:	4a3a      	ldr	r2, [pc, #232]	@ (800681c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006732:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006736:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006740:	2b00      	cmp	r3, #0
 8006742:	d015      	beq.n	8006770 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006744:	4b35      	ldr	r3, [pc, #212]	@ (800681c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006746:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800674a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006752:	4932      	ldr	r1, [pc, #200]	@ (800681c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006754:	4313      	orrs	r3, r2
 8006756:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800675e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006762:	d105      	bne.n	8006770 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006764:	4b2d      	ldr	r3, [pc, #180]	@ (800681c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006766:	68db      	ldr	r3, [r3, #12]
 8006768:	4a2c      	ldr	r2, [pc, #176]	@ (800681c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800676a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800676e:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006778:	2b00      	cmp	r3, #0
 800677a:	d015      	beq.n	80067a8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800677c:	4b27      	ldr	r3, [pc, #156]	@ (800681c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800677e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006782:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800678a:	4924      	ldr	r1, [pc, #144]	@ (800681c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800678c:	4313      	orrs	r3, r2
 800678e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006796:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800679a:	d105      	bne.n	80067a8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800679c:	4b1f      	ldr	r3, [pc, #124]	@ (800681c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800679e:	68db      	ldr	r3, [r3, #12]
 80067a0:	4a1e      	ldr	r2, [pc, #120]	@ (800681c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80067a2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80067a6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d015      	beq.n	80067e0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80067b4:	4b19      	ldr	r3, [pc, #100]	@ (800681c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80067b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80067ba:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80067c2:	4916      	ldr	r1, [pc, #88]	@ (800681c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80067c4:	4313      	orrs	r3, r2
 80067c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80067ce:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80067d2:	d105      	bne.n	80067e0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80067d4:	4b11      	ldr	r3, [pc, #68]	@ (800681c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80067d6:	68db      	ldr	r3, [r3, #12]
 80067d8:	4a10      	ldr	r2, [pc, #64]	@ (800681c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80067da:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80067de:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d019      	beq.n	8006820 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80067ec:	4b0b      	ldr	r3, [pc, #44]	@ (800681c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80067ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80067f2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067fa:	4908      	ldr	r1, [pc, #32]	@ (800681c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80067fc:	4313      	orrs	r3, r2
 80067fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006806:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800680a:	d109      	bne.n	8006820 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800680c:	4b03      	ldr	r3, [pc, #12]	@ (800681c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800680e:	68db      	ldr	r3, [r3, #12]
 8006810:	4a02      	ldr	r2, [pc, #8]	@ (800681c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006812:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006816:	60d3      	str	r3, [r2, #12]
 8006818:	e002      	b.n	8006820 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800681a:	bf00      	nop
 800681c:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006828:	2b00      	cmp	r3, #0
 800682a:	d015      	beq.n	8006858 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800682c:	4b29      	ldr	r3, [pc, #164]	@ (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800682e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006832:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800683a:	4926      	ldr	r1, [pc, #152]	@ (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800683c:	4313      	orrs	r3, r2
 800683e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006846:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800684a:	d105      	bne.n	8006858 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800684c:	4b21      	ldr	r3, [pc, #132]	@ (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800684e:	68db      	ldr	r3, [r3, #12]
 8006850:	4a20      	ldr	r2, [pc, #128]	@ (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006852:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006856:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006860:	2b00      	cmp	r3, #0
 8006862:	d015      	beq.n	8006890 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8006864:	4b1b      	ldr	r3, [pc, #108]	@ (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006866:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800686a:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006872:	4918      	ldr	r1, [pc, #96]	@ (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006874:	4313      	orrs	r3, r2
 8006876:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800687e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006882:	d105      	bne.n	8006890 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006884:	4b13      	ldr	r3, [pc, #76]	@ (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006886:	68db      	ldr	r3, [r3, #12]
 8006888:	4a12      	ldr	r2, [pc, #72]	@ (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800688a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800688e:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006898:	2b00      	cmp	r3, #0
 800689a:	d015      	beq.n	80068c8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800689c:	4b0d      	ldr	r3, [pc, #52]	@ (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800689e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80068a2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80068aa:	490a      	ldr	r1, [pc, #40]	@ (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80068ac:	4313      	orrs	r3, r2
 80068ae:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80068b6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80068ba:	d105      	bne.n	80068c8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80068bc:	4b05      	ldr	r3, [pc, #20]	@ (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80068be:	68db      	ldr	r3, [r3, #12]
 80068c0:	4a04      	ldr	r2, [pc, #16]	@ (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80068c2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80068c6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80068c8:	7cbb      	ldrb	r3, [r7, #18]
}
 80068ca:	4618      	mov	r0, r3
 80068cc:	3718      	adds	r7, #24
 80068ce:	46bd      	mov	sp, r7
 80068d0:	bd80      	pop	{r7, pc}
 80068d2:	bf00      	nop
 80068d4:	40021000 	.word	0x40021000

080068d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80068d8:	b580      	push	{r7, lr}
 80068da:	b082      	sub	sp, #8
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d101      	bne.n	80068ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80068e6:	2301      	movs	r3, #1
 80068e8:	e049      	b.n	800697e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80068f0:	b2db      	uxtb	r3, r3
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d106      	bne.n	8006904 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	2200      	movs	r2, #0
 80068fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80068fe:	6878      	ldr	r0, [r7, #4]
 8006900:	f7fd fcb0 	bl	8004264 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2202      	movs	r2, #2
 8006908:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681a      	ldr	r2, [r3, #0]
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	3304      	adds	r3, #4
 8006914:	4619      	mov	r1, r3
 8006916:	4610      	mov	r0, r2
 8006918:	f000 ff5e 	bl	80077d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2201      	movs	r2, #1
 8006920:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2201      	movs	r2, #1
 8006928:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2201      	movs	r2, #1
 8006930:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2201      	movs	r2, #1
 8006938:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2201      	movs	r2, #1
 8006940:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2201      	movs	r2, #1
 8006948:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2201      	movs	r2, #1
 8006950:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2201      	movs	r2, #1
 8006958:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2201      	movs	r2, #1
 8006960:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2201      	movs	r2, #1
 8006968:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2201      	movs	r2, #1
 8006970:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2201      	movs	r2, #1
 8006978:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800697c:	2300      	movs	r3, #0
}
 800697e:	4618      	mov	r0, r3
 8006980:	3708      	adds	r7, #8
 8006982:	46bd      	mov	sp, r7
 8006984:	bd80      	pop	{r7, pc}
	...

08006988 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006988:	b480      	push	{r7}
 800698a:	b085      	sub	sp, #20
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006996:	b2db      	uxtb	r3, r3
 8006998:	2b01      	cmp	r3, #1
 800699a:	d001      	beq.n	80069a0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800699c:	2301      	movs	r3, #1
 800699e:	e04c      	b.n	8006a3a <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2202      	movs	r2, #2
 80069a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	4a26      	ldr	r2, [pc, #152]	@ (8006a48 <HAL_TIM_Base_Start+0xc0>)
 80069ae:	4293      	cmp	r3, r2
 80069b0:	d022      	beq.n	80069f8 <HAL_TIM_Base_Start+0x70>
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80069ba:	d01d      	beq.n	80069f8 <HAL_TIM_Base_Start+0x70>
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	4a22      	ldr	r2, [pc, #136]	@ (8006a4c <HAL_TIM_Base_Start+0xc4>)
 80069c2:	4293      	cmp	r3, r2
 80069c4:	d018      	beq.n	80069f8 <HAL_TIM_Base_Start+0x70>
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	4a21      	ldr	r2, [pc, #132]	@ (8006a50 <HAL_TIM_Base_Start+0xc8>)
 80069cc:	4293      	cmp	r3, r2
 80069ce:	d013      	beq.n	80069f8 <HAL_TIM_Base_Start+0x70>
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	4a1f      	ldr	r2, [pc, #124]	@ (8006a54 <HAL_TIM_Base_Start+0xcc>)
 80069d6:	4293      	cmp	r3, r2
 80069d8:	d00e      	beq.n	80069f8 <HAL_TIM_Base_Start+0x70>
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	4a1e      	ldr	r2, [pc, #120]	@ (8006a58 <HAL_TIM_Base_Start+0xd0>)
 80069e0:	4293      	cmp	r3, r2
 80069e2:	d009      	beq.n	80069f8 <HAL_TIM_Base_Start+0x70>
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	4a1c      	ldr	r2, [pc, #112]	@ (8006a5c <HAL_TIM_Base_Start+0xd4>)
 80069ea:	4293      	cmp	r3, r2
 80069ec:	d004      	beq.n	80069f8 <HAL_TIM_Base_Start+0x70>
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	4a1b      	ldr	r2, [pc, #108]	@ (8006a60 <HAL_TIM_Base_Start+0xd8>)
 80069f4:	4293      	cmp	r3, r2
 80069f6:	d115      	bne.n	8006a24 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	689a      	ldr	r2, [r3, #8]
 80069fe:	4b19      	ldr	r3, [pc, #100]	@ (8006a64 <HAL_TIM_Base_Start+0xdc>)
 8006a00:	4013      	ands	r3, r2
 8006a02:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	2b06      	cmp	r3, #6
 8006a08:	d015      	beq.n	8006a36 <HAL_TIM_Base_Start+0xae>
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006a10:	d011      	beq.n	8006a36 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	681a      	ldr	r2, [r3, #0]
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	f042 0201 	orr.w	r2, r2, #1
 8006a20:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a22:	e008      	b.n	8006a36 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	681a      	ldr	r2, [r3, #0]
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	f042 0201 	orr.w	r2, r2, #1
 8006a32:	601a      	str	r2, [r3, #0]
 8006a34:	e000      	b.n	8006a38 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a36:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006a38:	2300      	movs	r3, #0
}
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	3714      	adds	r7, #20
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a44:	4770      	bx	lr
 8006a46:	bf00      	nop
 8006a48:	40012c00 	.word	0x40012c00
 8006a4c:	40000400 	.word	0x40000400
 8006a50:	40000800 	.word	0x40000800
 8006a54:	40000c00 	.word	0x40000c00
 8006a58:	40013400 	.word	0x40013400
 8006a5c:	40014000 	.word	0x40014000
 8006a60:	40015000 	.word	0x40015000
 8006a64:	00010007 	.word	0x00010007

08006a68 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006a68:	b480      	push	{r7}
 8006a6a:	b085      	sub	sp, #20
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006a76:	b2db      	uxtb	r3, r3
 8006a78:	2b01      	cmp	r3, #1
 8006a7a:	d001      	beq.n	8006a80 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006a7c:	2301      	movs	r3, #1
 8006a7e:	e054      	b.n	8006b2a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2202      	movs	r2, #2
 8006a84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	68da      	ldr	r2, [r3, #12]
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f042 0201 	orr.w	r2, r2, #1
 8006a96:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	4a26      	ldr	r2, [pc, #152]	@ (8006b38 <HAL_TIM_Base_Start_IT+0xd0>)
 8006a9e:	4293      	cmp	r3, r2
 8006aa0:	d022      	beq.n	8006ae8 <HAL_TIM_Base_Start_IT+0x80>
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006aaa:	d01d      	beq.n	8006ae8 <HAL_TIM_Base_Start_IT+0x80>
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	4a22      	ldr	r2, [pc, #136]	@ (8006b3c <HAL_TIM_Base_Start_IT+0xd4>)
 8006ab2:	4293      	cmp	r3, r2
 8006ab4:	d018      	beq.n	8006ae8 <HAL_TIM_Base_Start_IT+0x80>
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	4a21      	ldr	r2, [pc, #132]	@ (8006b40 <HAL_TIM_Base_Start_IT+0xd8>)
 8006abc:	4293      	cmp	r3, r2
 8006abe:	d013      	beq.n	8006ae8 <HAL_TIM_Base_Start_IT+0x80>
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	4a1f      	ldr	r2, [pc, #124]	@ (8006b44 <HAL_TIM_Base_Start_IT+0xdc>)
 8006ac6:	4293      	cmp	r3, r2
 8006ac8:	d00e      	beq.n	8006ae8 <HAL_TIM_Base_Start_IT+0x80>
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	4a1e      	ldr	r2, [pc, #120]	@ (8006b48 <HAL_TIM_Base_Start_IT+0xe0>)
 8006ad0:	4293      	cmp	r3, r2
 8006ad2:	d009      	beq.n	8006ae8 <HAL_TIM_Base_Start_IT+0x80>
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	4a1c      	ldr	r2, [pc, #112]	@ (8006b4c <HAL_TIM_Base_Start_IT+0xe4>)
 8006ada:	4293      	cmp	r3, r2
 8006adc:	d004      	beq.n	8006ae8 <HAL_TIM_Base_Start_IT+0x80>
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	4a1b      	ldr	r2, [pc, #108]	@ (8006b50 <HAL_TIM_Base_Start_IT+0xe8>)
 8006ae4:	4293      	cmp	r3, r2
 8006ae6:	d115      	bne.n	8006b14 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	689a      	ldr	r2, [r3, #8]
 8006aee:	4b19      	ldr	r3, [pc, #100]	@ (8006b54 <HAL_TIM_Base_Start_IT+0xec>)
 8006af0:	4013      	ands	r3, r2
 8006af2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	2b06      	cmp	r3, #6
 8006af8:	d015      	beq.n	8006b26 <HAL_TIM_Base_Start_IT+0xbe>
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006b00:	d011      	beq.n	8006b26 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	681a      	ldr	r2, [r3, #0]
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	f042 0201 	orr.w	r2, r2, #1
 8006b10:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b12:	e008      	b.n	8006b26 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	681a      	ldr	r2, [r3, #0]
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f042 0201 	orr.w	r2, r2, #1
 8006b22:	601a      	str	r2, [r3, #0]
 8006b24:	e000      	b.n	8006b28 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b26:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006b28:	2300      	movs	r3, #0
}
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	3714      	adds	r7, #20
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b34:	4770      	bx	lr
 8006b36:	bf00      	nop
 8006b38:	40012c00 	.word	0x40012c00
 8006b3c:	40000400 	.word	0x40000400
 8006b40:	40000800 	.word	0x40000800
 8006b44:	40000c00 	.word	0x40000c00
 8006b48:	40013400 	.word	0x40013400
 8006b4c:	40014000 	.word	0x40014000
 8006b50:	40015000 	.word	0x40015000
 8006b54:	00010007 	.word	0x00010007

08006b58 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b082      	sub	sp, #8
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d101      	bne.n	8006b6a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006b66:	2301      	movs	r3, #1
 8006b68:	e049      	b.n	8006bfe <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006b70:	b2db      	uxtb	r3, r3
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d106      	bne.n	8006b84 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	2200      	movs	r2, #0
 8006b7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006b7e:	6878      	ldr	r0, [r7, #4]
 8006b80:	f7fd fc8a 	bl	8004498 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2202      	movs	r2, #2
 8006b88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681a      	ldr	r2, [r3, #0]
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	3304      	adds	r3, #4
 8006b94:	4619      	mov	r1, r3
 8006b96:	4610      	mov	r0, r2
 8006b98:	f000 fe1e 	bl	80077d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2201      	movs	r2, #1
 8006ba0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2201      	movs	r2, #1
 8006ba8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2201      	movs	r2, #1
 8006bb0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2201      	movs	r2, #1
 8006bb8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2201      	movs	r2, #1
 8006bc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2201      	movs	r2, #1
 8006bc8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2201      	movs	r2, #1
 8006bd0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2201      	movs	r2, #1
 8006bd8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2201      	movs	r2, #1
 8006be0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2201      	movs	r2, #1
 8006be8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2201      	movs	r2, #1
 8006bf0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2201      	movs	r2, #1
 8006bf8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006bfc:	2300      	movs	r3, #0
}
 8006bfe:	4618      	mov	r0, r3
 8006c00:	3708      	adds	r7, #8
 8006c02:	46bd      	mov	sp, r7
 8006c04:	bd80      	pop	{r7, pc}
	...

08006c08 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b084      	sub	sp, #16
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
 8006c10:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006c12:	683b      	ldr	r3, [r7, #0]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d109      	bne.n	8006c2c <HAL_TIM_PWM_Start+0x24>
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006c1e:	b2db      	uxtb	r3, r3
 8006c20:	2b01      	cmp	r3, #1
 8006c22:	bf14      	ite	ne
 8006c24:	2301      	movne	r3, #1
 8006c26:	2300      	moveq	r3, #0
 8006c28:	b2db      	uxtb	r3, r3
 8006c2a:	e03c      	b.n	8006ca6 <HAL_TIM_PWM_Start+0x9e>
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	2b04      	cmp	r3, #4
 8006c30:	d109      	bne.n	8006c46 <HAL_TIM_PWM_Start+0x3e>
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006c38:	b2db      	uxtb	r3, r3
 8006c3a:	2b01      	cmp	r3, #1
 8006c3c:	bf14      	ite	ne
 8006c3e:	2301      	movne	r3, #1
 8006c40:	2300      	moveq	r3, #0
 8006c42:	b2db      	uxtb	r3, r3
 8006c44:	e02f      	b.n	8006ca6 <HAL_TIM_PWM_Start+0x9e>
 8006c46:	683b      	ldr	r3, [r7, #0]
 8006c48:	2b08      	cmp	r3, #8
 8006c4a:	d109      	bne.n	8006c60 <HAL_TIM_PWM_Start+0x58>
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006c52:	b2db      	uxtb	r3, r3
 8006c54:	2b01      	cmp	r3, #1
 8006c56:	bf14      	ite	ne
 8006c58:	2301      	movne	r3, #1
 8006c5a:	2300      	moveq	r3, #0
 8006c5c:	b2db      	uxtb	r3, r3
 8006c5e:	e022      	b.n	8006ca6 <HAL_TIM_PWM_Start+0x9e>
 8006c60:	683b      	ldr	r3, [r7, #0]
 8006c62:	2b0c      	cmp	r3, #12
 8006c64:	d109      	bne.n	8006c7a <HAL_TIM_PWM_Start+0x72>
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006c6c:	b2db      	uxtb	r3, r3
 8006c6e:	2b01      	cmp	r3, #1
 8006c70:	bf14      	ite	ne
 8006c72:	2301      	movne	r3, #1
 8006c74:	2300      	moveq	r3, #0
 8006c76:	b2db      	uxtb	r3, r3
 8006c78:	e015      	b.n	8006ca6 <HAL_TIM_PWM_Start+0x9e>
 8006c7a:	683b      	ldr	r3, [r7, #0]
 8006c7c:	2b10      	cmp	r3, #16
 8006c7e:	d109      	bne.n	8006c94 <HAL_TIM_PWM_Start+0x8c>
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006c86:	b2db      	uxtb	r3, r3
 8006c88:	2b01      	cmp	r3, #1
 8006c8a:	bf14      	ite	ne
 8006c8c:	2301      	movne	r3, #1
 8006c8e:	2300      	moveq	r3, #0
 8006c90:	b2db      	uxtb	r3, r3
 8006c92:	e008      	b.n	8006ca6 <HAL_TIM_PWM_Start+0x9e>
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8006c9a:	b2db      	uxtb	r3, r3
 8006c9c:	2b01      	cmp	r3, #1
 8006c9e:	bf14      	ite	ne
 8006ca0:	2301      	movne	r3, #1
 8006ca2:	2300      	moveq	r3, #0
 8006ca4:	b2db      	uxtb	r3, r3
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d001      	beq.n	8006cae <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006caa:	2301      	movs	r3, #1
 8006cac:	e0a6      	b.n	8006dfc <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006cae:	683b      	ldr	r3, [r7, #0]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d104      	bne.n	8006cbe <HAL_TIM_PWM_Start+0xb6>
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2202      	movs	r2, #2
 8006cb8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006cbc:	e023      	b.n	8006d06 <HAL_TIM_PWM_Start+0xfe>
 8006cbe:	683b      	ldr	r3, [r7, #0]
 8006cc0:	2b04      	cmp	r3, #4
 8006cc2:	d104      	bne.n	8006cce <HAL_TIM_PWM_Start+0xc6>
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2202      	movs	r2, #2
 8006cc8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006ccc:	e01b      	b.n	8006d06 <HAL_TIM_PWM_Start+0xfe>
 8006cce:	683b      	ldr	r3, [r7, #0]
 8006cd0:	2b08      	cmp	r3, #8
 8006cd2:	d104      	bne.n	8006cde <HAL_TIM_PWM_Start+0xd6>
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2202      	movs	r2, #2
 8006cd8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006cdc:	e013      	b.n	8006d06 <HAL_TIM_PWM_Start+0xfe>
 8006cde:	683b      	ldr	r3, [r7, #0]
 8006ce0:	2b0c      	cmp	r3, #12
 8006ce2:	d104      	bne.n	8006cee <HAL_TIM_PWM_Start+0xe6>
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2202      	movs	r2, #2
 8006ce8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006cec:	e00b      	b.n	8006d06 <HAL_TIM_PWM_Start+0xfe>
 8006cee:	683b      	ldr	r3, [r7, #0]
 8006cf0:	2b10      	cmp	r3, #16
 8006cf2:	d104      	bne.n	8006cfe <HAL_TIM_PWM_Start+0xf6>
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2202      	movs	r2, #2
 8006cf8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006cfc:	e003      	b.n	8006d06 <HAL_TIM_PWM_Start+0xfe>
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	2202      	movs	r2, #2
 8006d02:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	2201      	movs	r2, #1
 8006d0c:	6839      	ldr	r1, [r7, #0]
 8006d0e:	4618      	mov	r0, r3
 8006d10:	f001 f9dc 	bl	80080cc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	4a3a      	ldr	r2, [pc, #232]	@ (8006e04 <HAL_TIM_PWM_Start+0x1fc>)
 8006d1a:	4293      	cmp	r3, r2
 8006d1c:	d018      	beq.n	8006d50 <HAL_TIM_PWM_Start+0x148>
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	4a39      	ldr	r2, [pc, #228]	@ (8006e08 <HAL_TIM_PWM_Start+0x200>)
 8006d24:	4293      	cmp	r3, r2
 8006d26:	d013      	beq.n	8006d50 <HAL_TIM_PWM_Start+0x148>
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	4a37      	ldr	r2, [pc, #220]	@ (8006e0c <HAL_TIM_PWM_Start+0x204>)
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	d00e      	beq.n	8006d50 <HAL_TIM_PWM_Start+0x148>
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	4a36      	ldr	r2, [pc, #216]	@ (8006e10 <HAL_TIM_PWM_Start+0x208>)
 8006d38:	4293      	cmp	r3, r2
 8006d3a:	d009      	beq.n	8006d50 <HAL_TIM_PWM_Start+0x148>
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	4a34      	ldr	r2, [pc, #208]	@ (8006e14 <HAL_TIM_PWM_Start+0x20c>)
 8006d42:	4293      	cmp	r3, r2
 8006d44:	d004      	beq.n	8006d50 <HAL_TIM_PWM_Start+0x148>
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	4a33      	ldr	r2, [pc, #204]	@ (8006e18 <HAL_TIM_PWM_Start+0x210>)
 8006d4c:	4293      	cmp	r3, r2
 8006d4e:	d101      	bne.n	8006d54 <HAL_TIM_PWM_Start+0x14c>
 8006d50:	2301      	movs	r3, #1
 8006d52:	e000      	b.n	8006d56 <HAL_TIM_PWM_Start+0x14e>
 8006d54:	2300      	movs	r3, #0
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d007      	beq.n	8006d6a <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006d68:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	4a25      	ldr	r2, [pc, #148]	@ (8006e04 <HAL_TIM_PWM_Start+0x1fc>)
 8006d70:	4293      	cmp	r3, r2
 8006d72:	d022      	beq.n	8006dba <HAL_TIM_PWM_Start+0x1b2>
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d7c:	d01d      	beq.n	8006dba <HAL_TIM_PWM_Start+0x1b2>
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	4a26      	ldr	r2, [pc, #152]	@ (8006e1c <HAL_TIM_PWM_Start+0x214>)
 8006d84:	4293      	cmp	r3, r2
 8006d86:	d018      	beq.n	8006dba <HAL_TIM_PWM_Start+0x1b2>
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	4a24      	ldr	r2, [pc, #144]	@ (8006e20 <HAL_TIM_PWM_Start+0x218>)
 8006d8e:	4293      	cmp	r3, r2
 8006d90:	d013      	beq.n	8006dba <HAL_TIM_PWM_Start+0x1b2>
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	4a23      	ldr	r2, [pc, #140]	@ (8006e24 <HAL_TIM_PWM_Start+0x21c>)
 8006d98:	4293      	cmp	r3, r2
 8006d9a:	d00e      	beq.n	8006dba <HAL_TIM_PWM_Start+0x1b2>
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	4a19      	ldr	r2, [pc, #100]	@ (8006e08 <HAL_TIM_PWM_Start+0x200>)
 8006da2:	4293      	cmp	r3, r2
 8006da4:	d009      	beq.n	8006dba <HAL_TIM_PWM_Start+0x1b2>
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	4a18      	ldr	r2, [pc, #96]	@ (8006e0c <HAL_TIM_PWM_Start+0x204>)
 8006dac:	4293      	cmp	r3, r2
 8006dae:	d004      	beq.n	8006dba <HAL_TIM_PWM_Start+0x1b2>
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	4a18      	ldr	r2, [pc, #96]	@ (8006e18 <HAL_TIM_PWM_Start+0x210>)
 8006db6:	4293      	cmp	r3, r2
 8006db8:	d115      	bne.n	8006de6 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	689a      	ldr	r2, [r3, #8]
 8006dc0:	4b19      	ldr	r3, [pc, #100]	@ (8006e28 <HAL_TIM_PWM_Start+0x220>)
 8006dc2:	4013      	ands	r3, r2
 8006dc4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	2b06      	cmp	r3, #6
 8006dca:	d015      	beq.n	8006df8 <HAL_TIM_PWM_Start+0x1f0>
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006dd2:	d011      	beq.n	8006df8 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	681a      	ldr	r2, [r3, #0]
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	f042 0201 	orr.w	r2, r2, #1
 8006de2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006de4:	e008      	b.n	8006df8 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	681a      	ldr	r2, [r3, #0]
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	f042 0201 	orr.w	r2, r2, #1
 8006df4:	601a      	str	r2, [r3, #0]
 8006df6:	e000      	b.n	8006dfa <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006df8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006dfa:	2300      	movs	r3, #0
}
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	3710      	adds	r7, #16
 8006e00:	46bd      	mov	sp, r7
 8006e02:	bd80      	pop	{r7, pc}
 8006e04:	40012c00 	.word	0x40012c00
 8006e08:	40013400 	.word	0x40013400
 8006e0c:	40014000 	.word	0x40014000
 8006e10:	40014400 	.word	0x40014400
 8006e14:	40014800 	.word	0x40014800
 8006e18:	40015000 	.word	0x40015000
 8006e1c:	40000400 	.word	0x40000400
 8006e20:	40000800 	.word	0x40000800
 8006e24:	40000c00 	.word	0x40000c00
 8006e28:	00010007 	.word	0x00010007

08006e2c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	b086      	sub	sp, #24
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
 8006e34:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d101      	bne.n	8006e40 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006e3c:	2301      	movs	r3, #1
 8006e3e:	e097      	b.n	8006f70 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006e46:	b2db      	uxtb	r3, r3
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d106      	bne.n	8006e5a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2200      	movs	r2, #0
 8006e50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006e54:	6878      	ldr	r0, [r7, #4]
 8006e56:	f7fd fa29 	bl	80042ac <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	2202      	movs	r2, #2
 8006e5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	689b      	ldr	r3, [r3, #8]
 8006e68:	687a      	ldr	r2, [r7, #4]
 8006e6a:	6812      	ldr	r2, [r2, #0]
 8006e6c:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8006e70:	f023 0307 	bic.w	r3, r3, #7
 8006e74:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681a      	ldr	r2, [r3, #0]
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	3304      	adds	r3, #4
 8006e7e:	4619      	mov	r1, r3
 8006e80:	4610      	mov	r0, r2
 8006e82:	f000 fca9 	bl	80077d8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	689b      	ldr	r3, [r3, #8]
 8006e8c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	699b      	ldr	r3, [r3, #24]
 8006e94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	6a1b      	ldr	r3, [r3, #32]
 8006e9c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006e9e:	683b      	ldr	r3, [r7, #0]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	697a      	ldr	r2, [r7, #20]
 8006ea4:	4313      	orrs	r3, r2
 8006ea6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006ea8:	693b      	ldr	r3, [r7, #16]
 8006eaa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006eae:	f023 0303 	bic.w	r3, r3, #3
 8006eb2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006eb4:	683b      	ldr	r3, [r7, #0]
 8006eb6:	689a      	ldr	r2, [r3, #8]
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	699b      	ldr	r3, [r3, #24]
 8006ebc:	021b      	lsls	r3, r3, #8
 8006ebe:	4313      	orrs	r3, r2
 8006ec0:	693a      	ldr	r2, [r7, #16]
 8006ec2:	4313      	orrs	r3, r2
 8006ec4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006ec6:	693b      	ldr	r3, [r7, #16]
 8006ec8:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8006ecc:	f023 030c 	bic.w	r3, r3, #12
 8006ed0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006ed2:	693b      	ldr	r3, [r7, #16]
 8006ed4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006ed8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006edc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006ede:	683b      	ldr	r3, [r7, #0]
 8006ee0:	68da      	ldr	r2, [r3, #12]
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	69db      	ldr	r3, [r3, #28]
 8006ee6:	021b      	lsls	r3, r3, #8
 8006ee8:	4313      	orrs	r3, r2
 8006eea:	693a      	ldr	r2, [r7, #16]
 8006eec:	4313      	orrs	r3, r2
 8006eee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006ef0:	683b      	ldr	r3, [r7, #0]
 8006ef2:	691b      	ldr	r3, [r3, #16]
 8006ef4:	011a      	lsls	r2, r3, #4
 8006ef6:	683b      	ldr	r3, [r7, #0]
 8006ef8:	6a1b      	ldr	r3, [r3, #32]
 8006efa:	031b      	lsls	r3, r3, #12
 8006efc:	4313      	orrs	r3, r2
 8006efe:	693a      	ldr	r2, [r7, #16]
 8006f00:	4313      	orrs	r3, r2
 8006f02:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8006f0a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8006f12:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006f14:	683b      	ldr	r3, [r7, #0]
 8006f16:	685a      	ldr	r2, [r3, #4]
 8006f18:	683b      	ldr	r3, [r7, #0]
 8006f1a:	695b      	ldr	r3, [r3, #20]
 8006f1c:	011b      	lsls	r3, r3, #4
 8006f1e:	4313      	orrs	r3, r2
 8006f20:	68fa      	ldr	r2, [r7, #12]
 8006f22:	4313      	orrs	r3, r2
 8006f24:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	697a      	ldr	r2, [r7, #20]
 8006f2c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	693a      	ldr	r2, [r7, #16]
 8006f34:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	68fa      	ldr	r2, [r7, #12]
 8006f3c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	2201      	movs	r2, #1
 8006f42:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	2201      	movs	r2, #1
 8006f4a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	2201      	movs	r2, #1
 8006f52:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	2201      	movs	r2, #1
 8006f5a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	2201      	movs	r2, #1
 8006f62:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	2201      	movs	r2, #1
 8006f6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006f6e:	2300      	movs	r3, #0
}
 8006f70:	4618      	mov	r0, r3
 8006f72:	3718      	adds	r7, #24
 8006f74:	46bd      	mov	sp, r7
 8006f76:	bd80      	pop	{r7, pc}

08006f78 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	b084      	sub	sp, #16
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
 8006f80:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006f88:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006f90:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006f98:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006fa0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d110      	bne.n	8006fca <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006fa8:	7bfb      	ldrb	r3, [r7, #15]
 8006faa:	2b01      	cmp	r3, #1
 8006fac:	d102      	bne.n	8006fb4 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006fae:	7b7b      	ldrb	r3, [r7, #13]
 8006fb0:	2b01      	cmp	r3, #1
 8006fb2:	d001      	beq.n	8006fb8 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006fb4:	2301      	movs	r3, #1
 8006fb6:	e069      	b.n	800708c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2202      	movs	r2, #2
 8006fbc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	2202      	movs	r2, #2
 8006fc4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006fc8:	e031      	b.n	800702e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006fca:	683b      	ldr	r3, [r7, #0]
 8006fcc:	2b04      	cmp	r3, #4
 8006fce:	d110      	bne.n	8006ff2 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006fd0:	7bbb      	ldrb	r3, [r7, #14]
 8006fd2:	2b01      	cmp	r3, #1
 8006fd4:	d102      	bne.n	8006fdc <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006fd6:	7b3b      	ldrb	r3, [r7, #12]
 8006fd8:	2b01      	cmp	r3, #1
 8006fda:	d001      	beq.n	8006fe0 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8006fdc:	2301      	movs	r3, #1
 8006fde:	e055      	b.n	800708c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2202      	movs	r2, #2
 8006fe4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2202      	movs	r2, #2
 8006fec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006ff0:	e01d      	b.n	800702e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006ff2:	7bfb      	ldrb	r3, [r7, #15]
 8006ff4:	2b01      	cmp	r3, #1
 8006ff6:	d108      	bne.n	800700a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006ff8:	7bbb      	ldrb	r3, [r7, #14]
 8006ffa:	2b01      	cmp	r3, #1
 8006ffc:	d105      	bne.n	800700a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006ffe:	7b7b      	ldrb	r3, [r7, #13]
 8007000:	2b01      	cmp	r3, #1
 8007002:	d102      	bne.n	800700a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007004:	7b3b      	ldrb	r3, [r7, #12]
 8007006:	2b01      	cmp	r3, #1
 8007008:	d001      	beq.n	800700e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800700a:	2301      	movs	r3, #1
 800700c:	e03e      	b.n	800708c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	2202      	movs	r2, #2
 8007012:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	2202      	movs	r2, #2
 800701a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	2202      	movs	r2, #2
 8007022:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	2202      	movs	r2, #2
 800702a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d003      	beq.n	800703c <HAL_TIM_Encoder_Start+0xc4>
 8007034:	683b      	ldr	r3, [r7, #0]
 8007036:	2b04      	cmp	r3, #4
 8007038:	d008      	beq.n	800704c <HAL_TIM_Encoder_Start+0xd4>
 800703a:	e00f      	b.n	800705c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	2201      	movs	r2, #1
 8007042:	2100      	movs	r1, #0
 8007044:	4618      	mov	r0, r3
 8007046:	f001 f841 	bl	80080cc <TIM_CCxChannelCmd>
      break;
 800704a:	e016      	b.n	800707a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	2201      	movs	r2, #1
 8007052:	2104      	movs	r1, #4
 8007054:	4618      	mov	r0, r3
 8007056:	f001 f839 	bl	80080cc <TIM_CCxChannelCmd>
      break;
 800705a:	e00e      	b.n	800707a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	2201      	movs	r2, #1
 8007062:	2100      	movs	r1, #0
 8007064:	4618      	mov	r0, r3
 8007066:	f001 f831 	bl	80080cc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	2201      	movs	r2, #1
 8007070:	2104      	movs	r1, #4
 8007072:	4618      	mov	r0, r3
 8007074:	f001 f82a 	bl	80080cc <TIM_CCxChannelCmd>
      break;
 8007078:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	681a      	ldr	r2, [r3, #0]
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	f042 0201 	orr.w	r2, r2, #1
 8007088:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800708a:	2300      	movs	r3, #0
}
 800708c:	4618      	mov	r0, r3
 800708e:	3710      	adds	r7, #16
 8007090:	46bd      	mov	sp, r7
 8007092:	bd80      	pop	{r7, pc}

08007094 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007094:	b580      	push	{r7, lr}
 8007096:	b084      	sub	sp, #16
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	68db      	ldr	r3, [r3, #12]
 80070a2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	691b      	ldr	r3, [r3, #16]
 80070aa:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80070ac:	68bb      	ldr	r3, [r7, #8]
 80070ae:	f003 0302 	and.w	r3, r3, #2
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d020      	beq.n	80070f8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	f003 0302 	and.w	r3, r3, #2
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d01b      	beq.n	80070f8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f06f 0202 	mvn.w	r2, #2
 80070c8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	2201      	movs	r2, #1
 80070ce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	699b      	ldr	r3, [r3, #24]
 80070d6:	f003 0303 	and.w	r3, r3, #3
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d003      	beq.n	80070e6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80070de:	6878      	ldr	r0, [r7, #4]
 80070e0:	f000 fb5c 	bl	800779c <HAL_TIM_IC_CaptureCallback>
 80070e4:	e005      	b.n	80070f2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80070e6:	6878      	ldr	r0, [r7, #4]
 80070e8:	f000 fb4e 	bl	8007788 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80070ec:	6878      	ldr	r0, [r7, #4]
 80070ee:	f000 fb5f 	bl	80077b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	2200      	movs	r2, #0
 80070f6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80070f8:	68bb      	ldr	r3, [r7, #8]
 80070fa:	f003 0304 	and.w	r3, r3, #4
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d020      	beq.n	8007144 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	f003 0304 	and.w	r3, r3, #4
 8007108:	2b00      	cmp	r3, #0
 800710a:	d01b      	beq.n	8007144 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	f06f 0204 	mvn.w	r2, #4
 8007114:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	2202      	movs	r2, #2
 800711a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	699b      	ldr	r3, [r3, #24]
 8007122:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007126:	2b00      	cmp	r3, #0
 8007128:	d003      	beq.n	8007132 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800712a:	6878      	ldr	r0, [r7, #4]
 800712c:	f000 fb36 	bl	800779c <HAL_TIM_IC_CaptureCallback>
 8007130:	e005      	b.n	800713e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007132:	6878      	ldr	r0, [r7, #4]
 8007134:	f000 fb28 	bl	8007788 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007138:	6878      	ldr	r0, [r7, #4]
 800713a:	f000 fb39 	bl	80077b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	2200      	movs	r2, #0
 8007142:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007144:	68bb      	ldr	r3, [r7, #8]
 8007146:	f003 0308 	and.w	r3, r3, #8
 800714a:	2b00      	cmp	r3, #0
 800714c:	d020      	beq.n	8007190 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	f003 0308 	and.w	r3, r3, #8
 8007154:	2b00      	cmp	r3, #0
 8007156:	d01b      	beq.n	8007190 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	f06f 0208 	mvn.w	r2, #8
 8007160:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	2204      	movs	r2, #4
 8007166:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	69db      	ldr	r3, [r3, #28]
 800716e:	f003 0303 	and.w	r3, r3, #3
 8007172:	2b00      	cmp	r3, #0
 8007174:	d003      	beq.n	800717e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007176:	6878      	ldr	r0, [r7, #4]
 8007178:	f000 fb10 	bl	800779c <HAL_TIM_IC_CaptureCallback>
 800717c:	e005      	b.n	800718a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800717e:	6878      	ldr	r0, [r7, #4]
 8007180:	f000 fb02 	bl	8007788 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007184:	6878      	ldr	r0, [r7, #4]
 8007186:	f000 fb13 	bl	80077b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	2200      	movs	r2, #0
 800718e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007190:	68bb      	ldr	r3, [r7, #8]
 8007192:	f003 0310 	and.w	r3, r3, #16
 8007196:	2b00      	cmp	r3, #0
 8007198:	d020      	beq.n	80071dc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	f003 0310 	and.w	r3, r3, #16
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d01b      	beq.n	80071dc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	f06f 0210 	mvn.w	r2, #16
 80071ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	2208      	movs	r2, #8
 80071b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	69db      	ldr	r3, [r3, #28]
 80071ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d003      	beq.n	80071ca <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80071c2:	6878      	ldr	r0, [r7, #4]
 80071c4:	f000 faea 	bl	800779c <HAL_TIM_IC_CaptureCallback>
 80071c8:	e005      	b.n	80071d6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80071ca:	6878      	ldr	r0, [r7, #4]
 80071cc:	f000 fadc 	bl	8007788 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80071d0:	6878      	ldr	r0, [r7, #4]
 80071d2:	f000 faed 	bl	80077b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	2200      	movs	r2, #0
 80071da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80071dc:	68bb      	ldr	r3, [r7, #8]
 80071de:	f003 0301 	and.w	r3, r3, #1
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d00c      	beq.n	8007200 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	f003 0301 	and.w	r3, r3, #1
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d007      	beq.n	8007200 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	f06f 0201 	mvn.w	r2, #1
 80071f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80071fa:	6878      	ldr	r0, [r7, #4]
 80071fc:	f7fb fc1c 	bl	8002a38 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007200:	68bb      	ldr	r3, [r7, #8]
 8007202:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007206:	2b00      	cmp	r3, #0
 8007208:	d104      	bne.n	8007214 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800720a:	68bb      	ldr	r3, [r7, #8]
 800720c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007210:	2b00      	cmp	r3, #0
 8007212:	d00c      	beq.n	800722e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800721a:	2b00      	cmp	r3, #0
 800721c:	d007      	beq.n	800722e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8007226:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007228:	6878      	ldr	r0, [r7, #4]
 800722a:	f001 f8a9 	bl	8008380 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800722e:	68bb      	ldr	r3, [r7, #8]
 8007230:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007234:	2b00      	cmp	r3, #0
 8007236:	d00c      	beq.n	8007252 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800723e:	2b00      	cmp	r3, #0
 8007240:	d007      	beq.n	8007252 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800724a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800724c:	6878      	ldr	r0, [r7, #4]
 800724e:	f001 f8a1 	bl	8008394 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007252:	68bb      	ldr	r3, [r7, #8]
 8007254:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007258:	2b00      	cmp	r3, #0
 800725a:	d00c      	beq.n	8007276 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007262:	2b00      	cmp	r3, #0
 8007264:	d007      	beq.n	8007276 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800726e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007270:	6878      	ldr	r0, [r7, #4]
 8007272:	f000 faa7 	bl	80077c4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007276:	68bb      	ldr	r3, [r7, #8]
 8007278:	f003 0320 	and.w	r3, r3, #32
 800727c:	2b00      	cmp	r3, #0
 800727e:	d00c      	beq.n	800729a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	f003 0320 	and.w	r3, r3, #32
 8007286:	2b00      	cmp	r3, #0
 8007288:	d007      	beq.n	800729a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	f06f 0220 	mvn.w	r2, #32
 8007292:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007294:	6878      	ldr	r0, [r7, #4]
 8007296:	f001 f869 	bl	800836c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800729a:	68bb      	ldr	r3, [r7, #8]
 800729c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d00c      	beq.n	80072be <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d007      	beq.n	80072be <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 80072b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80072b8:	6878      	ldr	r0, [r7, #4]
 80072ba:	f001 f875 	bl	80083a8 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80072be:	68bb      	ldr	r3, [r7, #8]
 80072c0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d00c      	beq.n	80072e2 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d007      	beq.n	80072e2 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 80072da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80072dc:	6878      	ldr	r0, [r7, #4]
 80072de:	f001 f86d 	bl	80083bc <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80072e2:	68bb      	ldr	r3, [r7, #8]
 80072e4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d00c      	beq.n	8007306 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d007      	beq.n	8007306 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 80072fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8007300:	6878      	ldr	r0, [r7, #4]
 8007302:	f001 f865 	bl	80083d0 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8007306:	68bb      	ldr	r3, [r7, #8]
 8007308:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800730c:	2b00      	cmp	r3, #0
 800730e:	d00c      	beq.n	800732a <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007316:	2b00      	cmp	r3, #0
 8007318:	d007      	beq.n	800732a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8007322:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8007324:	6878      	ldr	r0, [r7, #4]
 8007326:	f001 f85d 	bl	80083e4 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800732a:	bf00      	nop
 800732c:	3710      	adds	r7, #16
 800732e:	46bd      	mov	sp, r7
 8007330:	bd80      	pop	{r7, pc}
	...

08007334 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007334:	b580      	push	{r7, lr}
 8007336:	b086      	sub	sp, #24
 8007338:	af00      	add	r7, sp, #0
 800733a:	60f8      	str	r0, [r7, #12]
 800733c:	60b9      	str	r1, [r7, #8]
 800733e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007340:	2300      	movs	r3, #0
 8007342:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800734a:	2b01      	cmp	r3, #1
 800734c:	d101      	bne.n	8007352 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800734e:	2302      	movs	r3, #2
 8007350:	e0ff      	b.n	8007552 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	2201      	movs	r2, #1
 8007356:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	2b14      	cmp	r3, #20
 800735e:	f200 80f0 	bhi.w	8007542 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007362:	a201      	add	r2, pc, #4	@ (adr r2, 8007368 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007364:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007368:	080073bd 	.word	0x080073bd
 800736c:	08007543 	.word	0x08007543
 8007370:	08007543 	.word	0x08007543
 8007374:	08007543 	.word	0x08007543
 8007378:	080073fd 	.word	0x080073fd
 800737c:	08007543 	.word	0x08007543
 8007380:	08007543 	.word	0x08007543
 8007384:	08007543 	.word	0x08007543
 8007388:	0800743f 	.word	0x0800743f
 800738c:	08007543 	.word	0x08007543
 8007390:	08007543 	.word	0x08007543
 8007394:	08007543 	.word	0x08007543
 8007398:	0800747f 	.word	0x0800747f
 800739c:	08007543 	.word	0x08007543
 80073a0:	08007543 	.word	0x08007543
 80073a4:	08007543 	.word	0x08007543
 80073a8:	080074c1 	.word	0x080074c1
 80073ac:	08007543 	.word	0x08007543
 80073b0:	08007543 	.word	0x08007543
 80073b4:	08007543 	.word	0x08007543
 80073b8:	08007501 	.word	0x08007501
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	68b9      	ldr	r1, [r7, #8]
 80073c2:	4618      	mov	r0, r3
 80073c4:	f000 fabc 	bl	8007940 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	699a      	ldr	r2, [r3, #24]
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	f042 0208 	orr.w	r2, r2, #8
 80073d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	699a      	ldr	r2, [r3, #24]
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	f022 0204 	bic.w	r2, r2, #4
 80073e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	6999      	ldr	r1, [r3, #24]
 80073ee:	68bb      	ldr	r3, [r7, #8]
 80073f0:	691a      	ldr	r2, [r3, #16]
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	430a      	orrs	r2, r1
 80073f8:	619a      	str	r2, [r3, #24]
      break;
 80073fa:	e0a5      	b.n	8007548 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	68b9      	ldr	r1, [r7, #8]
 8007402:	4618      	mov	r0, r3
 8007404:	f000 fb36 	bl	8007a74 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	699a      	ldr	r2, [r3, #24]
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007416:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	699a      	ldr	r2, [r3, #24]
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007426:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	6999      	ldr	r1, [r3, #24]
 800742e:	68bb      	ldr	r3, [r7, #8]
 8007430:	691b      	ldr	r3, [r3, #16]
 8007432:	021a      	lsls	r2, r3, #8
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	430a      	orrs	r2, r1
 800743a:	619a      	str	r2, [r3, #24]
      break;
 800743c:	e084      	b.n	8007548 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	68b9      	ldr	r1, [r7, #8]
 8007444:	4618      	mov	r0, r3
 8007446:	f000 fba9 	bl	8007b9c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	69da      	ldr	r2, [r3, #28]
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	f042 0208 	orr.w	r2, r2, #8
 8007458:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	69da      	ldr	r2, [r3, #28]
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	f022 0204 	bic.w	r2, r2, #4
 8007468:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	69d9      	ldr	r1, [r3, #28]
 8007470:	68bb      	ldr	r3, [r7, #8]
 8007472:	691a      	ldr	r2, [r3, #16]
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	430a      	orrs	r2, r1
 800747a:	61da      	str	r2, [r3, #28]
      break;
 800747c:	e064      	b.n	8007548 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	68b9      	ldr	r1, [r7, #8]
 8007484:	4618      	mov	r0, r3
 8007486:	f000 fc1b 	bl	8007cc0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	69da      	ldr	r2, [r3, #28]
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007498:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	69da      	ldr	r2, [r3, #28]
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80074a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	69d9      	ldr	r1, [r3, #28]
 80074b0:	68bb      	ldr	r3, [r7, #8]
 80074b2:	691b      	ldr	r3, [r3, #16]
 80074b4:	021a      	lsls	r2, r3, #8
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	430a      	orrs	r2, r1
 80074bc:	61da      	str	r2, [r3, #28]
      break;
 80074be:	e043      	b.n	8007548 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	68b9      	ldr	r1, [r7, #8]
 80074c6:	4618      	mov	r0, r3
 80074c8:	f000 fc8e 	bl	8007de8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	f042 0208 	orr.w	r2, r2, #8
 80074da:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	f022 0204 	bic.w	r2, r2, #4
 80074ea:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80074f2:	68bb      	ldr	r3, [r7, #8]
 80074f4:	691a      	ldr	r2, [r3, #16]
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	430a      	orrs	r2, r1
 80074fc:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80074fe:	e023      	b.n	8007548 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	68b9      	ldr	r1, [r7, #8]
 8007506:	4618      	mov	r0, r3
 8007508:	f000 fcd8 	bl	8007ebc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800751a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800752a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8007532:	68bb      	ldr	r3, [r7, #8]
 8007534:	691b      	ldr	r3, [r3, #16]
 8007536:	021a      	lsls	r2, r3, #8
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	430a      	orrs	r2, r1
 800753e:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8007540:	e002      	b.n	8007548 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007542:	2301      	movs	r3, #1
 8007544:	75fb      	strb	r3, [r7, #23]
      break;
 8007546:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	2200      	movs	r2, #0
 800754c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007550:	7dfb      	ldrb	r3, [r7, #23]
}
 8007552:	4618      	mov	r0, r3
 8007554:	3718      	adds	r7, #24
 8007556:	46bd      	mov	sp, r7
 8007558:	bd80      	pop	{r7, pc}
 800755a:	bf00      	nop

0800755c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800755c:	b580      	push	{r7, lr}
 800755e:	b084      	sub	sp, #16
 8007560:	af00      	add	r7, sp, #0
 8007562:	6078      	str	r0, [r7, #4]
 8007564:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007566:	2300      	movs	r3, #0
 8007568:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007570:	2b01      	cmp	r3, #1
 8007572:	d101      	bne.n	8007578 <HAL_TIM_ConfigClockSource+0x1c>
 8007574:	2302      	movs	r3, #2
 8007576:	e0f6      	b.n	8007766 <HAL_TIM_ConfigClockSource+0x20a>
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	2201      	movs	r2, #1
 800757c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2202      	movs	r2, #2
 8007584:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	689b      	ldr	r3, [r3, #8]
 800758e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007590:	68bb      	ldr	r3, [r7, #8]
 8007592:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8007596:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800759a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800759c:	68bb      	ldr	r3, [r7, #8]
 800759e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80075a2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	68ba      	ldr	r2, [r7, #8]
 80075aa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80075ac:	683b      	ldr	r3, [r7, #0]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	4a6f      	ldr	r2, [pc, #444]	@ (8007770 <HAL_TIM_ConfigClockSource+0x214>)
 80075b2:	4293      	cmp	r3, r2
 80075b4:	f000 80c1 	beq.w	800773a <HAL_TIM_ConfigClockSource+0x1de>
 80075b8:	4a6d      	ldr	r2, [pc, #436]	@ (8007770 <HAL_TIM_ConfigClockSource+0x214>)
 80075ba:	4293      	cmp	r3, r2
 80075bc:	f200 80c6 	bhi.w	800774c <HAL_TIM_ConfigClockSource+0x1f0>
 80075c0:	4a6c      	ldr	r2, [pc, #432]	@ (8007774 <HAL_TIM_ConfigClockSource+0x218>)
 80075c2:	4293      	cmp	r3, r2
 80075c4:	f000 80b9 	beq.w	800773a <HAL_TIM_ConfigClockSource+0x1de>
 80075c8:	4a6a      	ldr	r2, [pc, #424]	@ (8007774 <HAL_TIM_ConfigClockSource+0x218>)
 80075ca:	4293      	cmp	r3, r2
 80075cc:	f200 80be 	bhi.w	800774c <HAL_TIM_ConfigClockSource+0x1f0>
 80075d0:	4a69      	ldr	r2, [pc, #420]	@ (8007778 <HAL_TIM_ConfigClockSource+0x21c>)
 80075d2:	4293      	cmp	r3, r2
 80075d4:	f000 80b1 	beq.w	800773a <HAL_TIM_ConfigClockSource+0x1de>
 80075d8:	4a67      	ldr	r2, [pc, #412]	@ (8007778 <HAL_TIM_ConfigClockSource+0x21c>)
 80075da:	4293      	cmp	r3, r2
 80075dc:	f200 80b6 	bhi.w	800774c <HAL_TIM_ConfigClockSource+0x1f0>
 80075e0:	4a66      	ldr	r2, [pc, #408]	@ (800777c <HAL_TIM_ConfigClockSource+0x220>)
 80075e2:	4293      	cmp	r3, r2
 80075e4:	f000 80a9 	beq.w	800773a <HAL_TIM_ConfigClockSource+0x1de>
 80075e8:	4a64      	ldr	r2, [pc, #400]	@ (800777c <HAL_TIM_ConfigClockSource+0x220>)
 80075ea:	4293      	cmp	r3, r2
 80075ec:	f200 80ae 	bhi.w	800774c <HAL_TIM_ConfigClockSource+0x1f0>
 80075f0:	4a63      	ldr	r2, [pc, #396]	@ (8007780 <HAL_TIM_ConfigClockSource+0x224>)
 80075f2:	4293      	cmp	r3, r2
 80075f4:	f000 80a1 	beq.w	800773a <HAL_TIM_ConfigClockSource+0x1de>
 80075f8:	4a61      	ldr	r2, [pc, #388]	@ (8007780 <HAL_TIM_ConfigClockSource+0x224>)
 80075fa:	4293      	cmp	r3, r2
 80075fc:	f200 80a6 	bhi.w	800774c <HAL_TIM_ConfigClockSource+0x1f0>
 8007600:	4a60      	ldr	r2, [pc, #384]	@ (8007784 <HAL_TIM_ConfigClockSource+0x228>)
 8007602:	4293      	cmp	r3, r2
 8007604:	f000 8099 	beq.w	800773a <HAL_TIM_ConfigClockSource+0x1de>
 8007608:	4a5e      	ldr	r2, [pc, #376]	@ (8007784 <HAL_TIM_ConfigClockSource+0x228>)
 800760a:	4293      	cmp	r3, r2
 800760c:	f200 809e 	bhi.w	800774c <HAL_TIM_ConfigClockSource+0x1f0>
 8007610:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8007614:	f000 8091 	beq.w	800773a <HAL_TIM_ConfigClockSource+0x1de>
 8007618:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800761c:	f200 8096 	bhi.w	800774c <HAL_TIM_ConfigClockSource+0x1f0>
 8007620:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007624:	f000 8089 	beq.w	800773a <HAL_TIM_ConfigClockSource+0x1de>
 8007628:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800762c:	f200 808e 	bhi.w	800774c <HAL_TIM_ConfigClockSource+0x1f0>
 8007630:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007634:	d03e      	beq.n	80076b4 <HAL_TIM_ConfigClockSource+0x158>
 8007636:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800763a:	f200 8087 	bhi.w	800774c <HAL_TIM_ConfigClockSource+0x1f0>
 800763e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007642:	f000 8086 	beq.w	8007752 <HAL_TIM_ConfigClockSource+0x1f6>
 8007646:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800764a:	d87f      	bhi.n	800774c <HAL_TIM_ConfigClockSource+0x1f0>
 800764c:	2b70      	cmp	r3, #112	@ 0x70
 800764e:	d01a      	beq.n	8007686 <HAL_TIM_ConfigClockSource+0x12a>
 8007650:	2b70      	cmp	r3, #112	@ 0x70
 8007652:	d87b      	bhi.n	800774c <HAL_TIM_ConfigClockSource+0x1f0>
 8007654:	2b60      	cmp	r3, #96	@ 0x60
 8007656:	d050      	beq.n	80076fa <HAL_TIM_ConfigClockSource+0x19e>
 8007658:	2b60      	cmp	r3, #96	@ 0x60
 800765a:	d877      	bhi.n	800774c <HAL_TIM_ConfigClockSource+0x1f0>
 800765c:	2b50      	cmp	r3, #80	@ 0x50
 800765e:	d03c      	beq.n	80076da <HAL_TIM_ConfigClockSource+0x17e>
 8007660:	2b50      	cmp	r3, #80	@ 0x50
 8007662:	d873      	bhi.n	800774c <HAL_TIM_ConfigClockSource+0x1f0>
 8007664:	2b40      	cmp	r3, #64	@ 0x40
 8007666:	d058      	beq.n	800771a <HAL_TIM_ConfigClockSource+0x1be>
 8007668:	2b40      	cmp	r3, #64	@ 0x40
 800766a:	d86f      	bhi.n	800774c <HAL_TIM_ConfigClockSource+0x1f0>
 800766c:	2b30      	cmp	r3, #48	@ 0x30
 800766e:	d064      	beq.n	800773a <HAL_TIM_ConfigClockSource+0x1de>
 8007670:	2b30      	cmp	r3, #48	@ 0x30
 8007672:	d86b      	bhi.n	800774c <HAL_TIM_ConfigClockSource+0x1f0>
 8007674:	2b20      	cmp	r3, #32
 8007676:	d060      	beq.n	800773a <HAL_TIM_ConfigClockSource+0x1de>
 8007678:	2b20      	cmp	r3, #32
 800767a:	d867      	bhi.n	800774c <HAL_TIM_ConfigClockSource+0x1f0>
 800767c:	2b00      	cmp	r3, #0
 800767e:	d05c      	beq.n	800773a <HAL_TIM_ConfigClockSource+0x1de>
 8007680:	2b10      	cmp	r3, #16
 8007682:	d05a      	beq.n	800773a <HAL_TIM_ConfigClockSource+0x1de>
 8007684:	e062      	b.n	800774c <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800768a:	683b      	ldr	r3, [r7, #0]
 800768c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800768e:	683b      	ldr	r3, [r7, #0]
 8007690:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007692:	683b      	ldr	r3, [r7, #0]
 8007694:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007696:	f000 fcf9 	bl	800808c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	689b      	ldr	r3, [r3, #8]
 80076a0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80076a2:	68bb      	ldr	r3, [r7, #8]
 80076a4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80076a8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	68ba      	ldr	r2, [r7, #8]
 80076b0:	609a      	str	r2, [r3, #8]
      break;
 80076b2:	e04f      	b.n	8007754 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80076b8:	683b      	ldr	r3, [r7, #0]
 80076ba:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80076bc:	683b      	ldr	r3, [r7, #0]
 80076be:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80076c0:	683b      	ldr	r3, [r7, #0]
 80076c2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80076c4:	f000 fce2 	bl	800808c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	689a      	ldr	r2, [r3, #8]
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80076d6:	609a      	str	r2, [r3, #8]
      break;
 80076d8:	e03c      	b.n	8007754 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80076de:	683b      	ldr	r3, [r7, #0]
 80076e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80076e2:	683b      	ldr	r3, [r7, #0]
 80076e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80076e6:	461a      	mov	r2, r3
 80076e8:	f000 fc54 	bl	8007f94 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	2150      	movs	r1, #80	@ 0x50
 80076f2:	4618      	mov	r0, r3
 80076f4:	f000 fcad 	bl	8008052 <TIM_ITRx_SetConfig>
      break;
 80076f8:	e02c      	b.n	8007754 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80076fe:	683b      	ldr	r3, [r7, #0]
 8007700:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007702:	683b      	ldr	r3, [r7, #0]
 8007704:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007706:	461a      	mov	r2, r3
 8007708:	f000 fc73 	bl	8007ff2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	2160      	movs	r1, #96	@ 0x60
 8007712:	4618      	mov	r0, r3
 8007714:	f000 fc9d 	bl	8008052 <TIM_ITRx_SetConfig>
      break;
 8007718:	e01c      	b.n	8007754 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800771e:	683b      	ldr	r3, [r7, #0]
 8007720:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007722:	683b      	ldr	r3, [r7, #0]
 8007724:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007726:	461a      	mov	r2, r3
 8007728:	f000 fc34 	bl	8007f94 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	2140      	movs	r1, #64	@ 0x40
 8007732:	4618      	mov	r0, r3
 8007734:	f000 fc8d 	bl	8008052 <TIM_ITRx_SetConfig>
      break;
 8007738:	e00c      	b.n	8007754 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681a      	ldr	r2, [r3, #0]
 800773e:	683b      	ldr	r3, [r7, #0]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	4619      	mov	r1, r3
 8007744:	4610      	mov	r0, r2
 8007746:	f000 fc84 	bl	8008052 <TIM_ITRx_SetConfig>
      break;
 800774a:	e003      	b.n	8007754 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 800774c:	2301      	movs	r3, #1
 800774e:	73fb      	strb	r3, [r7, #15]
      break;
 8007750:	e000      	b.n	8007754 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8007752:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2201      	movs	r2, #1
 8007758:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2200      	movs	r2, #0
 8007760:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007764:	7bfb      	ldrb	r3, [r7, #15]
}
 8007766:	4618      	mov	r0, r3
 8007768:	3710      	adds	r7, #16
 800776a:	46bd      	mov	sp, r7
 800776c:	bd80      	pop	{r7, pc}
 800776e:	bf00      	nop
 8007770:	00100070 	.word	0x00100070
 8007774:	00100060 	.word	0x00100060
 8007778:	00100050 	.word	0x00100050
 800777c:	00100040 	.word	0x00100040
 8007780:	00100030 	.word	0x00100030
 8007784:	00100020 	.word	0x00100020

08007788 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007788:	b480      	push	{r7}
 800778a:	b083      	sub	sp, #12
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007790:	bf00      	nop
 8007792:	370c      	adds	r7, #12
 8007794:	46bd      	mov	sp, r7
 8007796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779a:	4770      	bx	lr

0800779c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800779c:	b480      	push	{r7}
 800779e:	b083      	sub	sp, #12
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80077a4:	bf00      	nop
 80077a6:	370c      	adds	r7, #12
 80077a8:	46bd      	mov	sp, r7
 80077aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ae:	4770      	bx	lr

080077b0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80077b0:	b480      	push	{r7}
 80077b2:	b083      	sub	sp, #12
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80077b8:	bf00      	nop
 80077ba:	370c      	adds	r7, #12
 80077bc:	46bd      	mov	sp, r7
 80077be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c2:	4770      	bx	lr

080077c4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80077c4:	b480      	push	{r7}
 80077c6:	b083      	sub	sp, #12
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80077cc:	bf00      	nop
 80077ce:	370c      	adds	r7, #12
 80077d0:	46bd      	mov	sp, r7
 80077d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d6:	4770      	bx	lr

080077d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80077d8:	b480      	push	{r7}
 80077da:	b085      	sub	sp, #20
 80077dc:	af00      	add	r7, sp, #0
 80077de:	6078      	str	r0, [r7, #4]
 80077e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	4a4c      	ldr	r2, [pc, #304]	@ (800791c <TIM_Base_SetConfig+0x144>)
 80077ec:	4293      	cmp	r3, r2
 80077ee:	d017      	beq.n	8007820 <TIM_Base_SetConfig+0x48>
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80077f6:	d013      	beq.n	8007820 <TIM_Base_SetConfig+0x48>
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	4a49      	ldr	r2, [pc, #292]	@ (8007920 <TIM_Base_SetConfig+0x148>)
 80077fc:	4293      	cmp	r3, r2
 80077fe:	d00f      	beq.n	8007820 <TIM_Base_SetConfig+0x48>
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	4a48      	ldr	r2, [pc, #288]	@ (8007924 <TIM_Base_SetConfig+0x14c>)
 8007804:	4293      	cmp	r3, r2
 8007806:	d00b      	beq.n	8007820 <TIM_Base_SetConfig+0x48>
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	4a47      	ldr	r2, [pc, #284]	@ (8007928 <TIM_Base_SetConfig+0x150>)
 800780c:	4293      	cmp	r3, r2
 800780e:	d007      	beq.n	8007820 <TIM_Base_SetConfig+0x48>
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	4a46      	ldr	r2, [pc, #280]	@ (800792c <TIM_Base_SetConfig+0x154>)
 8007814:	4293      	cmp	r3, r2
 8007816:	d003      	beq.n	8007820 <TIM_Base_SetConfig+0x48>
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	4a45      	ldr	r2, [pc, #276]	@ (8007930 <TIM_Base_SetConfig+0x158>)
 800781c:	4293      	cmp	r3, r2
 800781e:	d108      	bne.n	8007832 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007826:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007828:	683b      	ldr	r3, [r7, #0]
 800782a:	685b      	ldr	r3, [r3, #4]
 800782c:	68fa      	ldr	r2, [r7, #12]
 800782e:	4313      	orrs	r3, r2
 8007830:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	4a39      	ldr	r2, [pc, #228]	@ (800791c <TIM_Base_SetConfig+0x144>)
 8007836:	4293      	cmp	r3, r2
 8007838:	d023      	beq.n	8007882 <TIM_Base_SetConfig+0xaa>
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007840:	d01f      	beq.n	8007882 <TIM_Base_SetConfig+0xaa>
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	4a36      	ldr	r2, [pc, #216]	@ (8007920 <TIM_Base_SetConfig+0x148>)
 8007846:	4293      	cmp	r3, r2
 8007848:	d01b      	beq.n	8007882 <TIM_Base_SetConfig+0xaa>
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	4a35      	ldr	r2, [pc, #212]	@ (8007924 <TIM_Base_SetConfig+0x14c>)
 800784e:	4293      	cmp	r3, r2
 8007850:	d017      	beq.n	8007882 <TIM_Base_SetConfig+0xaa>
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	4a34      	ldr	r2, [pc, #208]	@ (8007928 <TIM_Base_SetConfig+0x150>)
 8007856:	4293      	cmp	r3, r2
 8007858:	d013      	beq.n	8007882 <TIM_Base_SetConfig+0xaa>
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	4a33      	ldr	r2, [pc, #204]	@ (800792c <TIM_Base_SetConfig+0x154>)
 800785e:	4293      	cmp	r3, r2
 8007860:	d00f      	beq.n	8007882 <TIM_Base_SetConfig+0xaa>
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	4a33      	ldr	r2, [pc, #204]	@ (8007934 <TIM_Base_SetConfig+0x15c>)
 8007866:	4293      	cmp	r3, r2
 8007868:	d00b      	beq.n	8007882 <TIM_Base_SetConfig+0xaa>
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	4a32      	ldr	r2, [pc, #200]	@ (8007938 <TIM_Base_SetConfig+0x160>)
 800786e:	4293      	cmp	r3, r2
 8007870:	d007      	beq.n	8007882 <TIM_Base_SetConfig+0xaa>
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	4a31      	ldr	r2, [pc, #196]	@ (800793c <TIM_Base_SetConfig+0x164>)
 8007876:	4293      	cmp	r3, r2
 8007878:	d003      	beq.n	8007882 <TIM_Base_SetConfig+0xaa>
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	4a2c      	ldr	r2, [pc, #176]	@ (8007930 <TIM_Base_SetConfig+0x158>)
 800787e:	4293      	cmp	r3, r2
 8007880:	d108      	bne.n	8007894 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007888:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800788a:	683b      	ldr	r3, [r7, #0]
 800788c:	68db      	ldr	r3, [r3, #12]
 800788e:	68fa      	ldr	r2, [r7, #12]
 8007890:	4313      	orrs	r3, r2
 8007892:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800789a:	683b      	ldr	r3, [r7, #0]
 800789c:	695b      	ldr	r3, [r3, #20]
 800789e:	4313      	orrs	r3, r2
 80078a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	68fa      	ldr	r2, [r7, #12]
 80078a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80078a8:	683b      	ldr	r3, [r7, #0]
 80078aa:	689a      	ldr	r2, [r3, #8]
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80078b0:	683b      	ldr	r3, [r7, #0]
 80078b2:	681a      	ldr	r2, [r3, #0]
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	4a18      	ldr	r2, [pc, #96]	@ (800791c <TIM_Base_SetConfig+0x144>)
 80078bc:	4293      	cmp	r3, r2
 80078be:	d013      	beq.n	80078e8 <TIM_Base_SetConfig+0x110>
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	4a1a      	ldr	r2, [pc, #104]	@ (800792c <TIM_Base_SetConfig+0x154>)
 80078c4:	4293      	cmp	r3, r2
 80078c6:	d00f      	beq.n	80078e8 <TIM_Base_SetConfig+0x110>
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	4a1a      	ldr	r2, [pc, #104]	@ (8007934 <TIM_Base_SetConfig+0x15c>)
 80078cc:	4293      	cmp	r3, r2
 80078ce:	d00b      	beq.n	80078e8 <TIM_Base_SetConfig+0x110>
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	4a19      	ldr	r2, [pc, #100]	@ (8007938 <TIM_Base_SetConfig+0x160>)
 80078d4:	4293      	cmp	r3, r2
 80078d6:	d007      	beq.n	80078e8 <TIM_Base_SetConfig+0x110>
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	4a18      	ldr	r2, [pc, #96]	@ (800793c <TIM_Base_SetConfig+0x164>)
 80078dc:	4293      	cmp	r3, r2
 80078de:	d003      	beq.n	80078e8 <TIM_Base_SetConfig+0x110>
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	4a13      	ldr	r2, [pc, #76]	@ (8007930 <TIM_Base_SetConfig+0x158>)
 80078e4:	4293      	cmp	r3, r2
 80078e6:	d103      	bne.n	80078f0 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80078e8:	683b      	ldr	r3, [r7, #0]
 80078ea:	691a      	ldr	r2, [r3, #16]
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	2201      	movs	r2, #1
 80078f4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	691b      	ldr	r3, [r3, #16]
 80078fa:	f003 0301 	and.w	r3, r3, #1
 80078fe:	2b01      	cmp	r3, #1
 8007900:	d105      	bne.n	800790e <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	691b      	ldr	r3, [r3, #16]
 8007906:	f023 0201 	bic.w	r2, r3, #1
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	611a      	str	r2, [r3, #16]
  }
}
 800790e:	bf00      	nop
 8007910:	3714      	adds	r7, #20
 8007912:	46bd      	mov	sp, r7
 8007914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007918:	4770      	bx	lr
 800791a:	bf00      	nop
 800791c:	40012c00 	.word	0x40012c00
 8007920:	40000400 	.word	0x40000400
 8007924:	40000800 	.word	0x40000800
 8007928:	40000c00 	.word	0x40000c00
 800792c:	40013400 	.word	0x40013400
 8007930:	40015000 	.word	0x40015000
 8007934:	40014000 	.word	0x40014000
 8007938:	40014400 	.word	0x40014400
 800793c:	40014800 	.word	0x40014800

08007940 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007940:	b480      	push	{r7}
 8007942:	b087      	sub	sp, #28
 8007944:	af00      	add	r7, sp, #0
 8007946:	6078      	str	r0, [r7, #4]
 8007948:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	6a1b      	ldr	r3, [r3, #32]
 800794e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	6a1b      	ldr	r3, [r3, #32]
 8007954:	f023 0201 	bic.w	r2, r3, #1
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	685b      	ldr	r3, [r3, #4]
 8007960:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	699b      	ldr	r3, [r3, #24]
 8007966:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800796e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007972:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	f023 0303 	bic.w	r3, r3, #3
 800797a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800797c:	683b      	ldr	r3, [r7, #0]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	68fa      	ldr	r2, [r7, #12]
 8007982:	4313      	orrs	r3, r2
 8007984:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007986:	697b      	ldr	r3, [r7, #20]
 8007988:	f023 0302 	bic.w	r3, r3, #2
 800798c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800798e:	683b      	ldr	r3, [r7, #0]
 8007990:	689b      	ldr	r3, [r3, #8]
 8007992:	697a      	ldr	r2, [r7, #20]
 8007994:	4313      	orrs	r3, r2
 8007996:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	4a30      	ldr	r2, [pc, #192]	@ (8007a5c <TIM_OC1_SetConfig+0x11c>)
 800799c:	4293      	cmp	r3, r2
 800799e:	d013      	beq.n	80079c8 <TIM_OC1_SetConfig+0x88>
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	4a2f      	ldr	r2, [pc, #188]	@ (8007a60 <TIM_OC1_SetConfig+0x120>)
 80079a4:	4293      	cmp	r3, r2
 80079a6:	d00f      	beq.n	80079c8 <TIM_OC1_SetConfig+0x88>
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	4a2e      	ldr	r2, [pc, #184]	@ (8007a64 <TIM_OC1_SetConfig+0x124>)
 80079ac:	4293      	cmp	r3, r2
 80079ae:	d00b      	beq.n	80079c8 <TIM_OC1_SetConfig+0x88>
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	4a2d      	ldr	r2, [pc, #180]	@ (8007a68 <TIM_OC1_SetConfig+0x128>)
 80079b4:	4293      	cmp	r3, r2
 80079b6:	d007      	beq.n	80079c8 <TIM_OC1_SetConfig+0x88>
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	4a2c      	ldr	r2, [pc, #176]	@ (8007a6c <TIM_OC1_SetConfig+0x12c>)
 80079bc:	4293      	cmp	r3, r2
 80079be:	d003      	beq.n	80079c8 <TIM_OC1_SetConfig+0x88>
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	4a2b      	ldr	r2, [pc, #172]	@ (8007a70 <TIM_OC1_SetConfig+0x130>)
 80079c4:	4293      	cmp	r3, r2
 80079c6:	d10c      	bne.n	80079e2 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80079c8:	697b      	ldr	r3, [r7, #20]
 80079ca:	f023 0308 	bic.w	r3, r3, #8
 80079ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80079d0:	683b      	ldr	r3, [r7, #0]
 80079d2:	68db      	ldr	r3, [r3, #12]
 80079d4:	697a      	ldr	r2, [r7, #20]
 80079d6:	4313      	orrs	r3, r2
 80079d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80079da:	697b      	ldr	r3, [r7, #20]
 80079dc:	f023 0304 	bic.w	r3, r3, #4
 80079e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	4a1d      	ldr	r2, [pc, #116]	@ (8007a5c <TIM_OC1_SetConfig+0x11c>)
 80079e6:	4293      	cmp	r3, r2
 80079e8:	d013      	beq.n	8007a12 <TIM_OC1_SetConfig+0xd2>
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	4a1c      	ldr	r2, [pc, #112]	@ (8007a60 <TIM_OC1_SetConfig+0x120>)
 80079ee:	4293      	cmp	r3, r2
 80079f0:	d00f      	beq.n	8007a12 <TIM_OC1_SetConfig+0xd2>
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	4a1b      	ldr	r2, [pc, #108]	@ (8007a64 <TIM_OC1_SetConfig+0x124>)
 80079f6:	4293      	cmp	r3, r2
 80079f8:	d00b      	beq.n	8007a12 <TIM_OC1_SetConfig+0xd2>
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	4a1a      	ldr	r2, [pc, #104]	@ (8007a68 <TIM_OC1_SetConfig+0x128>)
 80079fe:	4293      	cmp	r3, r2
 8007a00:	d007      	beq.n	8007a12 <TIM_OC1_SetConfig+0xd2>
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	4a19      	ldr	r2, [pc, #100]	@ (8007a6c <TIM_OC1_SetConfig+0x12c>)
 8007a06:	4293      	cmp	r3, r2
 8007a08:	d003      	beq.n	8007a12 <TIM_OC1_SetConfig+0xd2>
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	4a18      	ldr	r2, [pc, #96]	@ (8007a70 <TIM_OC1_SetConfig+0x130>)
 8007a0e:	4293      	cmp	r3, r2
 8007a10:	d111      	bne.n	8007a36 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007a12:	693b      	ldr	r3, [r7, #16]
 8007a14:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007a18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007a1a:	693b      	ldr	r3, [r7, #16]
 8007a1c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007a20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007a22:	683b      	ldr	r3, [r7, #0]
 8007a24:	695b      	ldr	r3, [r3, #20]
 8007a26:	693a      	ldr	r2, [r7, #16]
 8007a28:	4313      	orrs	r3, r2
 8007a2a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007a2c:	683b      	ldr	r3, [r7, #0]
 8007a2e:	699b      	ldr	r3, [r3, #24]
 8007a30:	693a      	ldr	r2, [r7, #16]
 8007a32:	4313      	orrs	r3, r2
 8007a34:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	693a      	ldr	r2, [r7, #16]
 8007a3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	68fa      	ldr	r2, [r7, #12]
 8007a40:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007a42:	683b      	ldr	r3, [r7, #0]
 8007a44:	685a      	ldr	r2, [r3, #4]
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	697a      	ldr	r2, [r7, #20]
 8007a4e:	621a      	str	r2, [r3, #32]
}
 8007a50:	bf00      	nop
 8007a52:	371c      	adds	r7, #28
 8007a54:	46bd      	mov	sp, r7
 8007a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5a:	4770      	bx	lr
 8007a5c:	40012c00 	.word	0x40012c00
 8007a60:	40013400 	.word	0x40013400
 8007a64:	40014000 	.word	0x40014000
 8007a68:	40014400 	.word	0x40014400
 8007a6c:	40014800 	.word	0x40014800
 8007a70:	40015000 	.word	0x40015000

08007a74 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007a74:	b480      	push	{r7}
 8007a76:	b087      	sub	sp, #28
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
 8007a7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	6a1b      	ldr	r3, [r3, #32]
 8007a82:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	6a1b      	ldr	r3, [r3, #32]
 8007a88:	f023 0210 	bic.w	r2, r3, #16
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	685b      	ldr	r3, [r3, #4]
 8007a94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	699b      	ldr	r3, [r3, #24]
 8007a9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007aa2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007aa6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007aae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007ab0:	683b      	ldr	r3, [r7, #0]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	021b      	lsls	r3, r3, #8
 8007ab6:	68fa      	ldr	r2, [r7, #12]
 8007ab8:	4313      	orrs	r3, r2
 8007aba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007abc:	697b      	ldr	r3, [r7, #20]
 8007abe:	f023 0320 	bic.w	r3, r3, #32
 8007ac2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007ac4:	683b      	ldr	r3, [r7, #0]
 8007ac6:	689b      	ldr	r3, [r3, #8]
 8007ac8:	011b      	lsls	r3, r3, #4
 8007aca:	697a      	ldr	r2, [r7, #20]
 8007acc:	4313      	orrs	r3, r2
 8007ace:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	4a2c      	ldr	r2, [pc, #176]	@ (8007b84 <TIM_OC2_SetConfig+0x110>)
 8007ad4:	4293      	cmp	r3, r2
 8007ad6:	d007      	beq.n	8007ae8 <TIM_OC2_SetConfig+0x74>
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	4a2b      	ldr	r2, [pc, #172]	@ (8007b88 <TIM_OC2_SetConfig+0x114>)
 8007adc:	4293      	cmp	r3, r2
 8007ade:	d003      	beq.n	8007ae8 <TIM_OC2_SetConfig+0x74>
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	4a2a      	ldr	r2, [pc, #168]	@ (8007b8c <TIM_OC2_SetConfig+0x118>)
 8007ae4:	4293      	cmp	r3, r2
 8007ae6:	d10d      	bne.n	8007b04 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007ae8:	697b      	ldr	r3, [r7, #20]
 8007aea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007aee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007af0:	683b      	ldr	r3, [r7, #0]
 8007af2:	68db      	ldr	r3, [r3, #12]
 8007af4:	011b      	lsls	r3, r3, #4
 8007af6:	697a      	ldr	r2, [r7, #20]
 8007af8:	4313      	orrs	r3, r2
 8007afa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007afc:	697b      	ldr	r3, [r7, #20]
 8007afe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007b02:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	4a1f      	ldr	r2, [pc, #124]	@ (8007b84 <TIM_OC2_SetConfig+0x110>)
 8007b08:	4293      	cmp	r3, r2
 8007b0a:	d013      	beq.n	8007b34 <TIM_OC2_SetConfig+0xc0>
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	4a1e      	ldr	r2, [pc, #120]	@ (8007b88 <TIM_OC2_SetConfig+0x114>)
 8007b10:	4293      	cmp	r3, r2
 8007b12:	d00f      	beq.n	8007b34 <TIM_OC2_SetConfig+0xc0>
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	4a1e      	ldr	r2, [pc, #120]	@ (8007b90 <TIM_OC2_SetConfig+0x11c>)
 8007b18:	4293      	cmp	r3, r2
 8007b1a:	d00b      	beq.n	8007b34 <TIM_OC2_SetConfig+0xc0>
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	4a1d      	ldr	r2, [pc, #116]	@ (8007b94 <TIM_OC2_SetConfig+0x120>)
 8007b20:	4293      	cmp	r3, r2
 8007b22:	d007      	beq.n	8007b34 <TIM_OC2_SetConfig+0xc0>
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	4a1c      	ldr	r2, [pc, #112]	@ (8007b98 <TIM_OC2_SetConfig+0x124>)
 8007b28:	4293      	cmp	r3, r2
 8007b2a:	d003      	beq.n	8007b34 <TIM_OC2_SetConfig+0xc0>
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	4a17      	ldr	r2, [pc, #92]	@ (8007b8c <TIM_OC2_SetConfig+0x118>)
 8007b30:	4293      	cmp	r3, r2
 8007b32:	d113      	bne.n	8007b5c <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007b34:	693b      	ldr	r3, [r7, #16]
 8007b36:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007b3a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007b3c:	693b      	ldr	r3, [r7, #16]
 8007b3e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007b42:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007b44:	683b      	ldr	r3, [r7, #0]
 8007b46:	695b      	ldr	r3, [r3, #20]
 8007b48:	009b      	lsls	r3, r3, #2
 8007b4a:	693a      	ldr	r2, [r7, #16]
 8007b4c:	4313      	orrs	r3, r2
 8007b4e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007b50:	683b      	ldr	r3, [r7, #0]
 8007b52:	699b      	ldr	r3, [r3, #24]
 8007b54:	009b      	lsls	r3, r3, #2
 8007b56:	693a      	ldr	r2, [r7, #16]
 8007b58:	4313      	orrs	r3, r2
 8007b5a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	693a      	ldr	r2, [r7, #16]
 8007b60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	68fa      	ldr	r2, [r7, #12]
 8007b66:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007b68:	683b      	ldr	r3, [r7, #0]
 8007b6a:	685a      	ldr	r2, [r3, #4]
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	697a      	ldr	r2, [r7, #20]
 8007b74:	621a      	str	r2, [r3, #32]
}
 8007b76:	bf00      	nop
 8007b78:	371c      	adds	r7, #28
 8007b7a:	46bd      	mov	sp, r7
 8007b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b80:	4770      	bx	lr
 8007b82:	bf00      	nop
 8007b84:	40012c00 	.word	0x40012c00
 8007b88:	40013400 	.word	0x40013400
 8007b8c:	40015000 	.word	0x40015000
 8007b90:	40014000 	.word	0x40014000
 8007b94:	40014400 	.word	0x40014400
 8007b98:	40014800 	.word	0x40014800

08007b9c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007b9c:	b480      	push	{r7}
 8007b9e:	b087      	sub	sp, #28
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	6078      	str	r0, [r7, #4]
 8007ba4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	6a1b      	ldr	r3, [r3, #32]
 8007baa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	6a1b      	ldr	r3, [r3, #32]
 8007bb0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	685b      	ldr	r3, [r3, #4]
 8007bbc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	69db      	ldr	r3, [r3, #28]
 8007bc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007bca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007bce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	f023 0303 	bic.w	r3, r3, #3
 8007bd6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007bd8:	683b      	ldr	r3, [r7, #0]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	68fa      	ldr	r2, [r7, #12]
 8007bde:	4313      	orrs	r3, r2
 8007be0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007be2:	697b      	ldr	r3, [r7, #20]
 8007be4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007be8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007bea:	683b      	ldr	r3, [r7, #0]
 8007bec:	689b      	ldr	r3, [r3, #8]
 8007bee:	021b      	lsls	r3, r3, #8
 8007bf0:	697a      	ldr	r2, [r7, #20]
 8007bf2:	4313      	orrs	r3, r2
 8007bf4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	4a2b      	ldr	r2, [pc, #172]	@ (8007ca8 <TIM_OC3_SetConfig+0x10c>)
 8007bfa:	4293      	cmp	r3, r2
 8007bfc:	d007      	beq.n	8007c0e <TIM_OC3_SetConfig+0x72>
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	4a2a      	ldr	r2, [pc, #168]	@ (8007cac <TIM_OC3_SetConfig+0x110>)
 8007c02:	4293      	cmp	r3, r2
 8007c04:	d003      	beq.n	8007c0e <TIM_OC3_SetConfig+0x72>
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	4a29      	ldr	r2, [pc, #164]	@ (8007cb0 <TIM_OC3_SetConfig+0x114>)
 8007c0a:	4293      	cmp	r3, r2
 8007c0c:	d10d      	bne.n	8007c2a <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007c0e:	697b      	ldr	r3, [r7, #20]
 8007c10:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007c14:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007c16:	683b      	ldr	r3, [r7, #0]
 8007c18:	68db      	ldr	r3, [r3, #12]
 8007c1a:	021b      	lsls	r3, r3, #8
 8007c1c:	697a      	ldr	r2, [r7, #20]
 8007c1e:	4313      	orrs	r3, r2
 8007c20:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007c22:	697b      	ldr	r3, [r7, #20]
 8007c24:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007c28:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	4a1e      	ldr	r2, [pc, #120]	@ (8007ca8 <TIM_OC3_SetConfig+0x10c>)
 8007c2e:	4293      	cmp	r3, r2
 8007c30:	d013      	beq.n	8007c5a <TIM_OC3_SetConfig+0xbe>
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	4a1d      	ldr	r2, [pc, #116]	@ (8007cac <TIM_OC3_SetConfig+0x110>)
 8007c36:	4293      	cmp	r3, r2
 8007c38:	d00f      	beq.n	8007c5a <TIM_OC3_SetConfig+0xbe>
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	4a1d      	ldr	r2, [pc, #116]	@ (8007cb4 <TIM_OC3_SetConfig+0x118>)
 8007c3e:	4293      	cmp	r3, r2
 8007c40:	d00b      	beq.n	8007c5a <TIM_OC3_SetConfig+0xbe>
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	4a1c      	ldr	r2, [pc, #112]	@ (8007cb8 <TIM_OC3_SetConfig+0x11c>)
 8007c46:	4293      	cmp	r3, r2
 8007c48:	d007      	beq.n	8007c5a <TIM_OC3_SetConfig+0xbe>
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	4a1b      	ldr	r2, [pc, #108]	@ (8007cbc <TIM_OC3_SetConfig+0x120>)
 8007c4e:	4293      	cmp	r3, r2
 8007c50:	d003      	beq.n	8007c5a <TIM_OC3_SetConfig+0xbe>
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	4a16      	ldr	r2, [pc, #88]	@ (8007cb0 <TIM_OC3_SetConfig+0x114>)
 8007c56:	4293      	cmp	r3, r2
 8007c58:	d113      	bne.n	8007c82 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007c5a:	693b      	ldr	r3, [r7, #16]
 8007c5c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007c60:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007c62:	693b      	ldr	r3, [r7, #16]
 8007c64:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007c68:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007c6a:	683b      	ldr	r3, [r7, #0]
 8007c6c:	695b      	ldr	r3, [r3, #20]
 8007c6e:	011b      	lsls	r3, r3, #4
 8007c70:	693a      	ldr	r2, [r7, #16]
 8007c72:	4313      	orrs	r3, r2
 8007c74:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007c76:	683b      	ldr	r3, [r7, #0]
 8007c78:	699b      	ldr	r3, [r3, #24]
 8007c7a:	011b      	lsls	r3, r3, #4
 8007c7c:	693a      	ldr	r2, [r7, #16]
 8007c7e:	4313      	orrs	r3, r2
 8007c80:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	693a      	ldr	r2, [r7, #16]
 8007c86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	68fa      	ldr	r2, [r7, #12]
 8007c8c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007c8e:	683b      	ldr	r3, [r7, #0]
 8007c90:	685a      	ldr	r2, [r3, #4]
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	697a      	ldr	r2, [r7, #20]
 8007c9a:	621a      	str	r2, [r3, #32]
}
 8007c9c:	bf00      	nop
 8007c9e:	371c      	adds	r7, #28
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca6:	4770      	bx	lr
 8007ca8:	40012c00 	.word	0x40012c00
 8007cac:	40013400 	.word	0x40013400
 8007cb0:	40015000 	.word	0x40015000
 8007cb4:	40014000 	.word	0x40014000
 8007cb8:	40014400 	.word	0x40014400
 8007cbc:	40014800 	.word	0x40014800

08007cc0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007cc0:	b480      	push	{r7}
 8007cc2:	b087      	sub	sp, #28
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	6078      	str	r0, [r7, #4]
 8007cc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	6a1b      	ldr	r3, [r3, #32]
 8007cce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	6a1b      	ldr	r3, [r3, #32]
 8007cd4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	685b      	ldr	r3, [r3, #4]
 8007ce0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	69db      	ldr	r3, [r3, #28]
 8007ce6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007cee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007cf2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007cfa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007cfc:	683b      	ldr	r3, [r7, #0]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	021b      	lsls	r3, r3, #8
 8007d02:	68fa      	ldr	r2, [r7, #12]
 8007d04:	4313      	orrs	r3, r2
 8007d06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007d08:	697b      	ldr	r3, [r7, #20]
 8007d0a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007d0e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007d10:	683b      	ldr	r3, [r7, #0]
 8007d12:	689b      	ldr	r3, [r3, #8]
 8007d14:	031b      	lsls	r3, r3, #12
 8007d16:	697a      	ldr	r2, [r7, #20]
 8007d18:	4313      	orrs	r3, r2
 8007d1a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	4a2c      	ldr	r2, [pc, #176]	@ (8007dd0 <TIM_OC4_SetConfig+0x110>)
 8007d20:	4293      	cmp	r3, r2
 8007d22:	d007      	beq.n	8007d34 <TIM_OC4_SetConfig+0x74>
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	4a2b      	ldr	r2, [pc, #172]	@ (8007dd4 <TIM_OC4_SetConfig+0x114>)
 8007d28:	4293      	cmp	r3, r2
 8007d2a:	d003      	beq.n	8007d34 <TIM_OC4_SetConfig+0x74>
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	4a2a      	ldr	r2, [pc, #168]	@ (8007dd8 <TIM_OC4_SetConfig+0x118>)
 8007d30:	4293      	cmp	r3, r2
 8007d32:	d10d      	bne.n	8007d50 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8007d34:	697b      	ldr	r3, [r7, #20]
 8007d36:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007d3a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8007d3c:	683b      	ldr	r3, [r7, #0]
 8007d3e:	68db      	ldr	r3, [r3, #12]
 8007d40:	031b      	lsls	r3, r3, #12
 8007d42:	697a      	ldr	r2, [r7, #20]
 8007d44:	4313      	orrs	r3, r2
 8007d46:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8007d48:	697b      	ldr	r3, [r7, #20]
 8007d4a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007d4e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	4a1f      	ldr	r2, [pc, #124]	@ (8007dd0 <TIM_OC4_SetConfig+0x110>)
 8007d54:	4293      	cmp	r3, r2
 8007d56:	d013      	beq.n	8007d80 <TIM_OC4_SetConfig+0xc0>
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	4a1e      	ldr	r2, [pc, #120]	@ (8007dd4 <TIM_OC4_SetConfig+0x114>)
 8007d5c:	4293      	cmp	r3, r2
 8007d5e:	d00f      	beq.n	8007d80 <TIM_OC4_SetConfig+0xc0>
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	4a1e      	ldr	r2, [pc, #120]	@ (8007ddc <TIM_OC4_SetConfig+0x11c>)
 8007d64:	4293      	cmp	r3, r2
 8007d66:	d00b      	beq.n	8007d80 <TIM_OC4_SetConfig+0xc0>
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	4a1d      	ldr	r2, [pc, #116]	@ (8007de0 <TIM_OC4_SetConfig+0x120>)
 8007d6c:	4293      	cmp	r3, r2
 8007d6e:	d007      	beq.n	8007d80 <TIM_OC4_SetConfig+0xc0>
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	4a1c      	ldr	r2, [pc, #112]	@ (8007de4 <TIM_OC4_SetConfig+0x124>)
 8007d74:	4293      	cmp	r3, r2
 8007d76:	d003      	beq.n	8007d80 <TIM_OC4_SetConfig+0xc0>
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	4a17      	ldr	r2, [pc, #92]	@ (8007dd8 <TIM_OC4_SetConfig+0x118>)
 8007d7c:	4293      	cmp	r3, r2
 8007d7e:	d113      	bne.n	8007da8 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007d80:	693b      	ldr	r3, [r7, #16]
 8007d82:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007d86:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8007d88:	693b      	ldr	r3, [r7, #16]
 8007d8a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007d8e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007d90:	683b      	ldr	r3, [r7, #0]
 8007d92:	695b      	ldr	r3, [r3, #20]
 8007d94:	019b      	lsls	r3, r3, #6
 8007d96:	693a      	ldr	r2, [r7, #16]
 8007d98:	4313      	orrs	r3, r2
 8007d9a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8007d9c:	683b      	ldr	r3, [r7, #0]
 8007d9e:	699b      	ldr	r3, [r3, #24]
 8007da0:	019b      	lsls	r3, r3, #6
 8007da2:	693a      	ldr	r2, [r7, #16]
 8007da4:	4313      	orrs	r3, r2
 8007da6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	693a      	ldr	r2, [r7, #16]
 8007dac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	68fa      	ldr	r2, [r7, #12]
 8007db2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007db4:	683b      	ldr	r3, [r7, #0]
 8007db6:	685a      	ldr	r2, [r3, #4]
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	697a      	ldr	r2, [r7, #20]
 8007dc0:	621a      	str	r2, [r3, #32]
}
 8007dc2:	bf00      	nop
 8007dc4:	371c      	adds	r7, #28
 8007dc6:	46bd      	mov	sp, r7
 8007dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dcc:	4770      	bx	lr
 8007dce:	bf00      	nop
 8007dd0:	40012c00 	.word	0x40012c00
 8007dd4:	40013400 	.word	0x40013400
 8007dd8:	40015000 	.word	0x40015000
 8007ddc:	40014000 	.word	0x40014000
 8007de0:	40014400 	.word	0x40014400
 8007de4:	40014800 	.word	0x40014800

08007de8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007de8:	b480      	push	{r7}
 8007dea:	b087      	sub	sp, #28
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	6078      	str	r0, [r7, #4]
 8007df0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	6a1b      	ldr	r3, [r3, #32]
 8007df6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	6a1b      	ldr	r3, [r3, #32]
 8007dfc:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	685b      	ldr	r3, [r3, #4]
 8007e08:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007e0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007e16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007e1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007e1c:	683b      	ldr	r3, [r7, #0]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	68fa      	ldr	r2, [r7, #12]
 8007e22:	4313      	orrs	r3, r2
 8007e24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007e26:	693b      	ldr	r3, [r7, #16]
 8007e28:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8007e2c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007e2e:	683b      	ldr	r3, [r7, #0]
 8007e30:	689b      	ldr	r3, [r3, #8]
 8007e32:	041b      	lsls	r3, r3, #16
 8007e34:	693a      	ldr	r2, [r7, #16]
 8007e36:	4313      	orrs	r3, r2
 8007e38:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	4a19      	ldr	r2, [pc, #100]	@ (8007ea4 <TIM_OC5_SetConfig+0xbc>)
 8007e3e:	4293      	cmp	r3, r2
 8007e40:	d013      	beq.n	8007e6a <TIM_OC5_SetConfig+0x82>
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	4a18      	ldr	r2, [pc, #96]	@ (8007ea8 <TIM_OC5_SetConfig+0xc0>)
 8007e46:	4293      	cmp	r3, r2
 8007e48:	d00f      	beq.n	8007e6a <TIM_OC5_SetConfig+0x82>
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	4a17      	ldr	r2, [pc, #92]	@ (8007eac <TIM_OC5_SetConfig+0xc4>)
 8007e4e:	4293      	cmp	r3, r2
 8007e50:	d00b      	beq.n	8007e6a <TIM_OC5_SetConfig+0x82>
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	4a16      	ldr	r2, [pc, #88]	@ (8007eb0 <TIM_OC5_SetConfig+0xc8>)
 8007e56:	4293      	cmp	r3, r2
 8007e58:	d007      	beq.n	8007e6a <TIM_OC5_SetConfig+0x82>
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	4a15      	ldr	r2, [pc, #84]	@ (8007eb4 <TIM_OC5_SetConfig+0xcc>)
 8007e5e:	4293      	cmp	r3, r2
 8007e60:	d003      	beq.n	8007e6a <TIM_OC5_SetConfig+0x82>
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	4a14      	ldr	r2, [pc, #80]	@ (8007eb8 <TIM_OC5_SetConfig+0xd0>)
 8007e66:	4293      	cmp	r3, r2
 8007e68:	d109      	bne.n	8007e7e <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007e6a:	697b      	ldr	r3, [r7, #20]
 8007e6c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007e70:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007e72:	683b      	ldr	r3, [r7, #0]
 8007e74:	695b      	ldr	r3, [r3, #20]
 8007e76:	021b      	lsls	r3, r3, #8
 8007e78:	697a      	ldr	r2, [r7, #20]
 8007e7a:	4313      	orrs	r3, r2
 8007e7c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	697a      	ldr	r2, [r7, #20]
 8007e82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	68fa      	ldr	r2, [r7, #12]
 8007e88:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007e8a:	683b      	ldr	r3, [r7, #0]
 8007e8c:	685a      	ldr	r2, [r3, #4]
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	693a      	ldr	r2, [r7, #16]
 8007e96:	621a      	str	r2, [r3, #32]
}
 8007e98:	bf00      	nop
 8007e9a:	371c      	adds	r7, #28
 8007e9c:	46bd      	mov	sp, r7
 8007e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea2:	4770      	bx	lr
 8007ea4:	40012c00 	.word	0x40012c00
 8007ea8:	40013400 	.word	0x40013400
 8007eac:	40014000 	.word	0x40014000
 8007eb0:	40014400 	.word	0x40014400
 8007eb4:	40014800 	.word	0x40014800
 8007eb8:	40015000 	.word	0x40015000

08007ebc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007ebc:	b480      	push	{r7}
 8007ebe:	b087      	sub	sp, #28
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	6078      	str	r0, [r7, #4]
 8007ec4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	6a1b      	ldr	r3, [r3, #32]
 8007eca:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	6a1b      	ldr	r3, [r3, #32]
 8007ed0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	685b      	ldr	r3, [r3, #4]
 8007edc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007ee2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007eea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007eee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007ef0:	683b      	ldr	r3, [r7, #0]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	021b      	lsls	r3, r3, #8
 8007ef6:	68fa      	ldr	r2, [r7, #12]
 8007ef8:	4313      	orrs	r3, r2
 8007efa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007efc:	693b      	ldr	r3, [r7, #16]
 8007efe:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007f02:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007f04:	683b      	ldr	r3, [r7, #0]
 8007f06:	689b      	ldr	r3, [r3, #8]
 8007f08:	051b      	lsls	r3, r3, #20
 8007f0a:	693a      	ldr	r2, [r7, #16]
 8007f0c:	4313      	orrs	r3, r2
 8007f0e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	4a1a      	ldr	r2, [pc, #104]	@ (8007f7c <TIM_OC6_SetConfig+0xc0>)
 8007f14:	4293      	cmp	r3, r2
 8007f16:	d013      	beq.n	8007f40 <TIM_OC6_SetConfig+0x84>
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	4a19      	ldr	r2, [pc, #100]	@ (8007f80 <TIM_OC6_SetConfig+0xc4>)
 8007f1c:	4293      	cmp	r3, r2
 8007f1e:	d00f      	beq.n	8007f40 <TIM_OC6_SetConfig+0x84>
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	4a18      	ldr	r2, [pc, #96]	@ (8007f84 <TIM_OC6_SetConfig+0xc8>)
 8007f24:	4293      	cmp	r3, r2
 8007f26:	d00b      	beq.n	8007f40 <TIM_OC6_SetConfig+0x84>
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	4a17      	ldr	r2, [pc, #92]	@ (8007f88 <TIM_OC6_SetConfig+0xcc>)
 8007f2c:	4293      	cmp	r3, r2
 8007f2e:	d007      	beq.n	8007f40 <TIM_OC6_SetConfig+0x84>
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	4a16      	ldr	r2, [pc, #88]	@ (8007f8c <TIM_OC6_SetConfig+0xd0>)
 8007f34:	4293      	cmp	r3, r2
 8007f36:	d003      	beq.n	8007f40 <TIM_OC6_SetConfig+0x84>
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	4a15      	ldr	r2, [pc, #84]	@ (8007f90 <TIM_OC6_SetConfig+0xd4>)
 8007f3c:	4293      	cmp	r3, r2
 8007f3e:	d109      	bne.n	8007f54 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007f40:	697b      	ldr	r3, [r7, #20]
 8007f42:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007f46:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007f48:	683b      	ldr	r3, [r7, #0]
 8007f4a:	695b      	ldr	r3, [r3, #20]
 8007f4c:	029b      	lsls	r3, r3, #10
 8007f4e:	697a      	ldr	r2, [r7, #20]
 8007f50:	4313      	orrs	r3, r2
 8007f52:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	697a      	ldr	r2, [r7, #20]
 8007f58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	68fa      	ldr	r2, [r7, #12]
 8007f5e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007f60:	683b      	ldr	r3, [r7, #0]
 8007f62:	685a      	ldr	r2, [r3, #4]
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	693a      	ldr	r2, [r7, #16]
 8007f6c:	621a      	str	r2, [r3, #32]
}
 8007f6e:	bf00      	nop
 8007f70:	371c      	adds	r7, #28
 8007f72:	46bd      	mov	sp, r7
 8007f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f78:	4770      	bx	lr
 8007f7a:	bf00      	nop
 8007f7c:	40012c00 	.word	0x40012c00
 8007f80:	40013400 	.word	0x40013400
 8007f84:	40014000 	.word	0x40014000
 8007f88:	40014400 	.word	0x40014400
 8007f8c:	40014800 	.word	0x40014800
 8007f90:	40015000 	.word	0x40015000

08007f94 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007f94:	b480      	push	{r7}
 8007f96:	b087      	sub	sp, #28
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	60f8      	str	r0, [r7, #12]
 8007f9c:	60b9      	str	r1, [r7, #8]
 8007f9e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	6a1b      	ldr	r3, [r3, #32]
 8007fa4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	6a1b      	ldr	r3, [r3, #32]
 8007faa:	f023 0201 	bic.w	r2, r3, #1
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	699b      	ldr	r3, [r3, #24]
 8007fb6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007fb8:	693b      	ldr	r3, [r7, #16]
 8007fba:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007fbe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	011b      	lsls	r3, r3, #4
 8007fc4:	693a      	ldr	r2, [r7, #16]
 8007fc6:	4313      	orrs	r3, r2
 8007fc8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007fca:	697b      	ldr	r3, [r7, #20]
 8007fcc:	f023 030a 	bic.w	r3, r3, #10
 8007fd0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007fd2:	697a      	ldr	r2, [r7, #20]
 8007fd4:	68bb      	ldr	r3, [r7, #8]
 8007fd6:	4313      	orrs	r3, r2
 8007fd8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	693a      	ldr	r2, [r7, #16]
 8007fde:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	697a      	ldr	r2, [r7, #20]
 8007fe4:	621a      	str	r2, [r3, #32]
}
 8007fe6:	bf00      	nop
 8007fe8:	371c      	adds	r7, #28
 8007fea:	46bd      	mov	sp, r7
 8007fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff0:	4770      	bx	lr

08007ff2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007ff2:	b480      	push	{r7}
 8007ff4:	b087      	sub	sp, #28
 8007ff6:	af00      	add	r7, sp, #0
 8007ff8:	60f8      	str	r0, [r7, #12]
 8007ffa:	60b9      	str	r1, [r7, #8]
 8007ffc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	6a1b      	ldr	r3, [r3, #32]
 8008002:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	6a1b      	ldr	r3, [r3, #32]
 8008008:	f023 0210 	bic.w	r2, r3, #16
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	699b      	ldr	r3, [r3, #24]
 8008014:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008016:	693b      	ldr	r3, [r7, #16]
 8008018:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800801c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	031b      	lsls	r3, r3, #12
 8008022:	693a      	ldr	r2, [r7, #16]
 8008024:	4313      	orrs	r3, r2
 8008026:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008028:	697b      	ldr	r3, [r7, #20]
 800802a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800802e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008030:	68bb      	ldr	r3, [r7, #8]
 8008032:	011b      	lsls	r3, r3, #4
 8008034:	697a      	ldr	r2, [r7, #20]
 8008036:	4313      	orrs	r3, r2
 8008038:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	693a      	ldr	r2, [r7, #16]
 800803e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	697a      	ldr	r2, [r7, #20]
 8008044:	621a      	str	r2, [r3, #32]
}
 8008046:	bf00      	nop
 8008048:	371c      	adds	r7, #28
 800804a:	46bd      	mov	sp, r7
 800804c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008050:	4770      	bx	lr

08008052 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008052:	b480      	push	{r7}
 8008054:	b085      	sub	sp, #20
 8008056:	af00      	add	r7, sp, #0
 8008058:	6078      	str	r0, [r7, #4]
 800805a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	689b      	ldr	r3, [r3, #8]
 8008060:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8008068:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800806c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800806e:	683a      	ldr	r2, [r7, #0]
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	4313      	orrs	r3, r2
 8008074:	f043 0307 	orr.w	r3, r3, #7
 8008078:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	68fa      	ldr	r2, [r7, #12]
 800807e:	609a      	str	r2, [r3, #8]
}
 8008080:	bf00      	nop
 8008082:	3714      	adds	r7, #20
 8008084:	46bd      	mov	sp, r7
 8008086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808a:	4770      	bx	lr

0800808c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800808c:	b480      	push	{r7}
 800808e:	b087      	sub	sp, #28
 8008090:	af00      	add	r7, sp, #0
 8008092:	60f8      	str	r0, [r7, #12]
 8008094:	60b9      	str	r1, [r7, #8]
 8008096:	607a      	str	r2, [r7, #4]
 8008098:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	689b      	ldr	r3, [r3, #8]
 800809e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80080a0:	697b      	ldr	r3, [r7, #20]
 80080a2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80080a6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80080a8:	683b      	ldr	r3, [r7, #0]
 80080aa:	021a      	lsls	r2, r3, #8
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	431a      	orrs	r2, r3
 80080b0:	68bb      	ldr	r3, [r7, #8]
 80080b2:	4313      	orrs	r3, r2
 80080b4:	697a      	ldr	r2, [r7, #20]
 80080b6:	4313      	orrs	r3, r2
 80080b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	697a      	ldr	r2, [r7, #20]
 80080be:	609a      	str	r2, [r3, #8]
}
 80080c0:	bf00      	nop
 80080c2:	371c      	adds	r7, #28
 80080c4:	46bd      	mov	sp, r7
 80080c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ca:	4770      	bx	lr

080080cc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80080cc:	b480      	push	{r7}
 80080ce:	b087      	sub	sp, #28
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	60f8      	str	r0, [r7, #12]
 80080d4:	60b9      	str	r1, [r7, #8]
 80080d6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80080d8:	68bb      	ldr	r3, [r7, #8]
 80080da:	f003 031f 	and.w	r3, r3, #31
 80080de:	2201      	movs	r2, #1
 80080e0:	fa02 f303 	lsl.w	r3, r2, r3
 80080e4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	6a1a      	ldr	r2, [r3, #32]
 80080ea:	697b      	ldr	r3, [r7, #20]
 80080ec:	43db      	mvns	r3, r3
 80080ee:	401a      	ands	r2, r3
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	6a1a      	ldr	r2, [r3, #32]
 80080f8:	68bb      	ldr	r3, [r7, #8]
 80080fa:	f003 031f 	and.w	r3, r3, #31
 80080fe:	6879      	ldr	r1, [r7, #4]
 8008100:	fa01 f303 	lsl.w	r3, r1, r3
 8008104:	431a      	orrs	r2, r3
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	621a      	str	r2, [r3, #32]
}
 800810a:	bf00      	nop
 800810c:	371c      	adds	r7, #28
 800810e:	46bd      	mov	sp, r7
 8008110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008114:	4770      	bx	lr
	...

08008118 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008118:	b480      	push	{r7}
 800811a:	b085      	sub	sp, #20
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]
 8008120:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008128:	2b01      	cmp	r3, #1
 800812a:	d101      	bne.n	8008130 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800812c:	2302      	movs	r3, #2
 800812e:	e074      	b.n	800821a <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	2201      	movs	r2, #1
 8008134:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	2202      	movs	r2, #2
 800813c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	685b      	ldr	r3, [r3, #4]
 8008146:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	689b      	ldr	r3, [r3, #8]
 800814e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	4a34      	ldr	r2, [pc, #208]	@ (8008228 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008156:	4293      	cmp	r3, r2
 8008158:	d009      	beq.n	800816e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	4a33      	ldr	r2, [pc, #204]	@ (800822c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008160:	4293      	cmp	r3, r2
 8008162:	d004      	beq.n	800816e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	4a31      	ldr	r2, [pc, #196]	@ (8008230 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800816a:	4293      	cmp	r3, r2
 800816c:	d108      	bne.n	8008180 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8008174:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008176:	683b      	ldr	r3, [r7, #0]
 8008178:	685b      	ldr	r3, [r3, #4]
 800817a:	68fa      	ldr	r2, [r7, #12]
 800817c:	4313      	orrs	r3, r2
 800817e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8008186:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800818a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800818c:	683b      	ldr	r3, [r7, #0]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	68fa      	ldr	r2, [r7, #12]
 8008192:	4313      	orrs	r3, r2
 8008194:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	68fa      	ldr	r2, [r7, #12]
 800819c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	4a21      	ldr	r2, [pc, #132]	@ (8008228 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80081a4:	4293      	cmp	r3, r2
 80081a6:	d022      	beq.n	80081ee <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80081b0:	d01d      	beq.n	80081ee <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	4a1f      	ldr	r2, [pc, #124]	@ (8008234 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80081b8:	4293      	cmp	r3, r2
 80081ba:	d018      	beq.n	80081ee <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	4a1d      	ldr	r2, [pc, #116]	@ (8008238 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80081c2:	4293      	cmp	r3, r2
 80081c4:	d013      	beq.n	80081ee <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	4a1c      	ldr	r2, [pc, #112]	@ (800823c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80081cc:	4293      	cmp	r3, r2
 80081ce:	d00e      	beq.n	80081ee <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	4a15      	ldr	r2, [pc, #84]	@ (800822c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80081d6:	4293      	cmp	r3, r2
 80081d8:	d009      	beq.n	80081ee <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	4a18      	ldr	r2, [pc, #96]	@ (8008240 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80081e0:	4293      	cmp	r3, r2
 80081e2:	d004      	beq.n	80081ee <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	4a11      	ldr	r2, [pc, #68]	@ (8008230 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80081ea:	4293      	cmp	r3, r2
 80081ec:	d10c      	bne.n	8008208 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80081ee:	68bb      	ldr	r3, [r7, #8]
 80081f0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80081f4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80081f6:	683b      	ldr	r3, [r7, #0]
 80081f8:	689b      	ldr	r3, [r3, #8]
 80081fa:	68ba      	ldr	r2, [r7, #8]
 80081fc:	4313      	orrs	r3, r2
 80081fe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	68ba      	ldr	r2, [r7, #8]
 8008206:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	2201      	movs	r2, #1
 800820c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	2200      	movs	r2, #0
 8008214:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008218:	2300      	movs	r3, #0
}
 800821a:	4618      	mov	r0, r3
 800821c:	3714      	adds	r7, #20
 800821e:	46bd      	mov	sp, r7
 8008220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008224:	4770      	bx	lr
 8008226:	bf00      	nop
 8008228:	40012c00 	.word	0x40012c00
 800822c:	40013400 	.word	0x40013400
 8008230:	40015000 	.word	0x40015000
 8008234:	40000400 	.word	0x40000400
 8008238:	40000800 	.word	0x40000800
 800823c:	40000c00 	.word	0x40000c00
 8008240:	40014000 	.word	0x40014000

08008244 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008244:	b480      	push	{r7}
 8008246:	b085      	sub	sp, #20
 8008248:	af00      	add	r7, sp, #0
 800824a:	6078      	str	r0, [r7, #4]
 800824c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800824e:	2300      	movs	r3, #0
 8008250:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008258:	2b01      	cmp	r3, #1
 800825a:	d101      	bne.n	8008260 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800825c:	2302      	movs	r3, #2
 800825e:	e078      	b.n	8008352 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	2201      	movs	r2, #1
 8008264:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800826e:	683b      	ldr	r3, [r7, #0]
 8008270:	68db      	ldr	r3, [r3, #12]
 8008272:	4313      	orrs	r3, r2
 8008274:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800827c:	683b      	ldr	r3, [r7, #0]
 800827e:	689b      	ldr	r3, [r3, #8]
 8008280:	4313      	orrs	r3, r2
 8008282:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800828a:	683b      	ldr	r3, [r7, #0]
 800828c:	685b      	ldr	r3, [r3, #4]
 800828e:	4313      	orrs	r3, r2
 8008290:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8008298:	683b      	ldr	r3, [r7, #0]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	4313      	orrs	r3, r2
 800829e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80082a6:	683b      	ldr	r3, [r7, #0]
 80082a8:	691b      	ldr	r3, [r3, #16]
 80082aa:	4313      	orrs	r3, r2
 80082ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80082b4:	683b      	ldr	r3, [r7, #0]
 80082b6:	695b      	ldr	r3, [r3, #20]
 80082b8:	4313      	orrs	r3, r2
 80082ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80082c2:	683b      	ldr	r3, [r7, #0]
 80082c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80082c6:	4313      	orrs	r3, r2
 80082c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80082d0:	683b      	ldr	r3, [r7, #0]
 80082d2:	699b      	ldr	r3, [r3, #24]
 80082d4:	041b      	lsls	r3, r3, #16
 80082d6:	4313      	orrs	r3, r2
 80082d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80082e0:	683b      	ldr	r3, [r7, #0]
 80082e2:	69db      	ldr	r3, [r3, #28]
 80082e4:	4313      	orrs	r3, r2
 80082e6:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	4a1c      	ldr	r2, [pc, #112]	@ (8008360 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 80082ee:	4293      	cmp	r3, r2
 80082f0:	d009      	beq.n	8008306 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	4a1b      	ldr	r2, [pc, #108]	@ (8008364 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 80082f8:	4293      	cmp	r3, r2
 80082fa:	d004      	beq.n	8008306 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	4a19      	ldr	r2, [pc, #100]	@ (8008368 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8008302:	4293      	cmp	r3, r2
 8008304:	d11c      	bne.n	8008340 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800830c:	683b      	ldr	r3, [r7, #0]
 800830e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008310:	051b      	lsls	r3, r3, #20
 8008312:	4313      	orrs	r3, r2
 8008314:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800831c:	683b      	ldr	r3, [r7, #0]
 800831e:	6a1b      	ldr	r3, [r3, #32]
 8008320:	4313      	orrs	r3, r2
 8008322:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800832a:	683b      	ldr	r3, [r7, #0]
 800832c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800832e:	4313      	orrs	r3, r2
 8008330:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8008338:	683b      	ldr	r3, [r7, #0]
 800833a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800833c:	4313      	orrs	r3, r2
 800833e:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	68fa      	ldr	r2, [r7, #12]
 8008346:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	2200      	movs	r2, #0
 800834c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008350:	2300      	movs	r3, #0
}
 8008352:	4618      	mov	r0, r3
 8008354:	3714      	adds	r7, #20
 8008356:	46bd      	mov	sp, r7
 8008358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835c:	4770      	bx	lr
 800835e:	bf00      	nop
 8008360:	40012c00 	.word	0x40012c00
 8008364:	40013400 	.word	0x40013400
 8008368:	40015000 	.word	0x40015000

0800836c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800836c:	b480      	push	{r7}
 800836e:	b083      	sub	sp, #12
 8008370:	af00      	add	r7, sp, #0
 8008372:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008374:	bf00      	nop
 8008376:	370c      	adds	r7, #12
 8008378:	46bd      	mov	sp, r7
 800837a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837e:	4770      	bx	lr

08008380 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008380:	b480      	push	{r7}
 8008382:	b083      	sub	sp, #12
 8008384:	af00      	add	r7, sp, #0
 8008386:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008388:	bf00      	nop
 800838a:	370c      	adds	r7, #12
 800838c:	46bd      	mov	sp, r7
 800838e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008392:	4770      	bx	lr

08008394 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008394:	b480      	push	{r7}
 8008396:	b083      	sub	sp, #12
 8008398:	af00      	add	r7, sp, #0
 800839a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800839c:	bf00      	nop
 800839e:	370c      	adds	r7, #12
 80083a0:	46bd      	mov	sp, r7
 80083a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a6:	4770      	bx	lr

080083a8 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80083a8:	b480      	push	{r7}
 80083aa:	b083      	sub	sp, #12
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80083b0:	bf00      	nop
 80083b2:	370c      	adds	r7, #12
 80083b4:	46bd      	mov	sp, r7
 80083b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ba:	4770      	bx	lr

080083bc <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80083bc:	b480      	push	{r7}
 80083be:	b083      	sub	sp, #12
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80083c4:	bf00      	nop
 80083c6:	370c      	adds	r7, #12
 80083c8:	46bd      	mov	sp, r7
 80083ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ce:	4770      	bx	lr

080083d0 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80083d0:	b480      	push	{r7}
 80083d2:	b083      	sub	sp, #12
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80083d8:	bf00      	nop
 80083da:	370c      	adds	r7, #12
 80083dc:	46bd      	mov	sp, r7
 80083de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e2:	4770      	bx	lr

080083e4 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80083e4:	b480      	push	{r7}
 80083e6:	b083      	sub	sp, #12
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80083ec:	bf00      	nop
 80083ee:	370c      	adds	r7, #12
 80083f0:	46bd      	mov	sp, r7
 80083f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f6:	4770      	bx	lr

080083f8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80083f8:	b580      	push	{r7, lr}
 80083fa:	b082      	sub	sp, #8
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	2b00      	cmp	r3, #0
 8008404:	d101      	bne.n	800840a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008406:	2301      	movs	r3, #1
 8008408:	e042      	b.n	8008490 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008410:	2b00      	cmp	r3, #0
 8008412:	d106      	bne.n	8008422 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	2200      	movs	r2, #0
 8008418:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800841c:	6878      	ldr	r0, [r7, #4]
 800841e:	f7fc f9eb 	bl	80047f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	2224      	movs	r2, #36	@ 0x24
 8008426:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	681a      	ldr	r2, [r3, #0]
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	f022 0201 	bic.w	r2, r2, #1
 8008438:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800843e:	2b00      	cmp	r3, #0
 8008440:	d002      	beq.n	8008448 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8008442:	6878      	ldr	r0, [r7, #4]
 8008444:	f001 f806 	bl	8009454 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008448:	6878      	ldr	r0, [r7, #4]
 800844a:	f000 fd07 	bl	8008e5c <UART_SetConfig>
 800844e:	4603      	mov	r3, r0
 8008450:	2b01      	cmp	r3, #1
 8008452:	d101      	bne.n	8008458 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8008454:	2301      	movs	r3, #1
 8008456:	e01b      	b.n	8008490 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	685a      	ldr	r2, [r3, #4]
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008466:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	689a      	ldr	r2, [r3, #8]
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008476:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	681a      	ldr	r2, [r3, #0]
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	f042 0201 	orr.w	r2, r2, #1
 8008486:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008488:	6878      	ldr	r0, [r7, #4]
 800848a:	f001 f885 	bl	8009598 <UART_CheckIdleState>
 800848e:	4603      	mov	r3, r0
}
 8008490:	4618      	mov	r0, r3
 8008492:	3708      	adds	r7, #8
 8008494:	46bd      	mov	sp, r7
 8008496:	bd80      	pop	{r7, pc}

08008498 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008498:	b580      	push	{r7, lr}
 800849a:	b08a      	sub	sp, #40	@ 0x28
 800849c:	af00      	add	r7, sp, #0
 800849e:	60f8      	str	r0, [r7, #12]
 80084a0:	60b9      	str	r1, [r7, #8]
 80084a2:	4613      	mov	r3, r2
 80084a4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80084ac:	2b20      	cmp	r3, #32
 80084ae:	d167      	bne.n	8008580 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 80084b0:	68bb      	ldr	r3, [r7, #8]
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d002      	beq.n	80084bc <HAL_UART_Transmit_DMA+0x24>
 80084b6:	88fb      	ldrh	r3, [r7, #6]
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d101      	bne.n	80084c0 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 80084bc:	2301      	movs	r3, #1
 80084be:	e060      	b.n	8008582 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	68ba      	ldr	r2, [r7, #8]
 80084c4:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	88fa      	ldrh	r2, [r7, #6]
 80084ca:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	88fa      	ldrh	r2, [r7, #6]
 80084d2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	2200      	movs	r2, #0
 80084da:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	2221      	movs	r2, #33	@ 0x21
 80084e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d028      	beq.n	8008540 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80084f2:	4a26      	ldr	r2, [pc, #152]	@ (800858c <HAL_UART_Transmit_DMA+0xf4>)
 80084f4:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80084fa:	4a25      	ldr	r2, [pc, #148]	@ (8008590 <HAL_UART_Transmit_DMA+0xf8>)
 80084fc:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008502:	4a24      	ldr	r2, [pc, #144]	@ (8008594 <HAL_UART_Transmit_DMA+0xfc>)
 8008504:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800850a:	2200      	movs	r2, #0
 800850c:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008516:	4619      	mov	r1, r3
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	3328      	adds	r3, #40	@ 0x28
 800851e:	461a      	mov	r2, r3
 8008520:	88fb      	ldrh	r3, [r7, #6]
 8008522:	f7fc fcbb 	bl	8004e9c <HAL_DMA_Start_IT>
 8008526:	4603      	mov	r3, r0
 8008528:	2b00      	cmp	r3, #0
 800852a:	d009      	beq.n	8008540 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	2210      	movs	r2, #16
 8008530:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	2220      	movs	r2, #32
 8008538:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 800853c:	2301      	movs	r3, #1
 800853e:	e020      	b.n	8008582 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	2240      	movs	r2, #64	@ 0x40
 8008546:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	3308      	adds	r3, #8
 800854e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008550:	697b      	ldr	r3, [r7, #20]
 8008552:	e853 3f00 	ldrex	r3, [r3]
 8008556:	613b      	str	r3, [r7, #16]
   return(result);
 8008558:	693b      	ldr	r3, [r7, #16]
 800855a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800855e:	627b      	str	r3, [r7, #36]	@ 0x24
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	3308      	adds	r3, #8
 8008566:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008568:	623a      	str	r2, [r7, #32]
 800856a:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800856c:	69f9      	ldr	r1, [r7, #28]
 800856e:	6a3a      	ldr	r2, [r7, #32]
 8008570:	e841 2300 	strex	r3, r2, [r1]
 8008574:	61bb      	str	r3, [r7, #24]
   return(result);
 8008576:	69bb      	ldr	r3, [r7, #24]
 8008578:	2b00      	cmp	r3, #0
 800857a:	d1e5      	bne.n	8008548 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 800857c:	2300      	movs	r3, #0
 800857e:	e000      	b.n	8008582 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8008580:	2302      	movs	r3, #2
  }
}
 8008582:	4618      	mov	r0, r3
 8008584:	3728      	adds	r7, #40	@ 0x28
 8008586:	46bd      	mov	sp, r7
 8008588:	bd80      	pop	{r7, pc}
 800858a:	bf00      	nop
 800858c:	08009a63 	.word	0x08009a63
 8008590:	08009afd 	.word	0x08009afd
 8008594:	08009c83 	.word	0x08009c83

08008598 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008598:	b580      	push	{r7, lr}
 800859a:	b08a      	sub	sp, #40	@ 0x28
 800859c:	af00      	add	r7, sp, #0
 800859e:	60f8      	str	r0, [r7, #12]
 80085a0:	60b9      	str	r1, [r7, #8]
 80085a2:	4613      	mov	r3, r2
 80085a4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80085ac:	2b20      	cmp	r3, #32
 80085ae:	d137      	bne.n	8008620 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80085b0:	68bb      	ldr	r3, [r7, #8]
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d002      	beq.n	80085bc <HAL_UART_Receive_DMA+0x24>
 80085b6:	88fb      	ldrh	r3, [r7, #6]
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d101      	bne.n	80085c0 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 80085bc:	2301      	movs	r3, #1
 80085be:	e030      	b.n	8008622 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	2200      	movs	r2, #0
 80085c4:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	4a18      	ldr	r2, [pc, #96]	@ (800862c <HAL_UART_Receive_DMA+0x94>)
 80085cc:	4293      	cmp	r3, r2
 80085ce:	d01f      	beq.n	8008610 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	685b      	ldr	r3, [r3, #4]
 80085d6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d018      	beq.n	8008610 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085e4:	697b      	ldr	r3, [r7, #20]
 80085e6:	e853 3f00 	ldrex	r3, [r3]
 80085ea:	613b      	str	r3, [r7, #16]
   return(result);
 80085ec:	693b      	ldr	r3, [r7, #16]
 80085ee:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80085f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	461a      	mov	r2, r3
 80085fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085fc:	623b      	str	r3, [r7, #32]
 80085fe:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008600:	69f9      	ldr	r1, [r7, #28]
 8008602:	6a3a      	ldr	r2, [r7, #32]
 8008604:	e841 2300 	strex	r3, r2, [r1]
 8008608:	61bb      	str	r3, [r7, #24]
   return(result);
 800860a:	69bb      	ldr	r3, [r7, #24]
 800860c:	2b00      	cmp	r3, #0
 800860e:	d1e6      	bne.n	80085de <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8008610:	88fb      	ldrh	r3, [r7, #6]
 8008612:	461a      	mov	r2, r3
 8008614:	68b9      	ldr	r1, [r7, #8]
 8008616:	68f8      	ldr	r0, [r7, #12]
 8008618:	f001 f8d6 	bl	80097c8 <UART_Start_Receive_DMA>
 800861c:	4603      	mov	r3, r0
 800861e:	e000      	b.n	8008622 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008620:	2302      	movs	r3, #2
  }
}
 8008622:	4618      	mov	r0, r3
 8008624:	3728      	adds	r7, #40	@ 0x28
 8008626:	46bd      	mov	sp, r7
 8008628:	bd80      	pop	{r7, pc}
 800862a:	bf00      	nop
 800862c:	40008000 	.word	0x40008000

08008630 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8008630:	b580      	push	{r7, lr}
 8008632:	b090      	sub	sp, #64	@ 0x40
 8008634:	af00      	add	r7, sp, #0
 8008636:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800863e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008646:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	689b      	ldr	r3, [r3, #8]
 800864e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008652:	2b80      	cmp	r3, #128	@ 0x80
 8008654:	d139      	bne.n	80086ca <HAL_UART_DMAStop+0x9a>
 8008656:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008658:	2b21      	cmp	r3, #33	@ 0x21
 800865a:	d136      	bne.n	80086ca <HAL_UART_DMAStop+0x9a>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	3308      	adds	r3, #8
 8008662:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008664:	6a3b      	ldr	r3, [r7, #32]
 8008666:	e853 3f00 	ldrex	r3, [r3]
 800866a:	61fb      	str	r3, [r7, #28]
   return(result);
 800866c:	69fb      	ldr	r3, [r7, #28]
 800866e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008672:	637b      	str	r3, [r7, #52]	@ 0x34
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	3308      	adds	r3, #8
 800867a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800867c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800867e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008680:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008682:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008684:	e841 2300 	strex	r3, r2, [r1]
 8008688:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800868a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800868c:	2b00      	cmp	r3, #0
 800868e:	d1e5      	bne.n	800865c <HAL_UART_DMAStop+0x2c>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008694:	2b00      	cmp	r3, #0
 8008696:	d015      	beq.n	80086c4 <HAL_UART_DMAStop+0x94>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800869c:	4618      	mov	r0, r3
 800869e:	f7fc fc78 	bl	8004f92 <HAL_DMA_Abort>
 80086a2:	4603      	mov	r3, r0
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d00d      	beq.n	80086c4 <HAL_UART_DMAStop+0x94>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80086ac:	4618      	mov	r0, r3
 80086ae:	f7fc fddf 	bl	8005270 <HAL_DMA_GetError>
 80086b2:	4603      	mov	r3, r0
 80086b4:	2b20      	cmp	r3, #32
 80086b6:	d105      	bne.n	80086c4 <HAL_UART_DMAStop+0x94>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	2210      	movs	r2, #16
 80086bc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 80086c0:	2303      	movs	r3, #3
 80086c2:	e047      	b.n	8008754 <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndTxTransfer(huart);
 80086c4:	6878      	ldr	r0, [r7, #4]
 80086c6:	f001 f925 	bl	8009914 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	689b      	ldr	r3, [r3, #8]
 80086d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80086d4:	2b40      	cmp	r3, #64	@ 0x40
 80086d6:	d13c      	bne.n	8008752 <HAL_UART_DMAStop+0x122>
 80086d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086da:	2b22      	cmp	r3, #34	@ 0x22
 80086dc:	d139      	bne.n	8008752 <HAL_UART_DMAStop+0x122>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	3308      	adds	r3, #8
 80086e4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	e853 3f00 	ldrex	r3, [r3]
 80086ec:	60bb      	str	r3, [r7, #8]
   return(result);
 80086ee:	68bb      	ldr	r3, [r7, #8]
 80086f0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80086f4:	633b      	str	r3, [r7, #48]	@ 0x30
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	3308      	adds	r3, #8
 80086fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80086fe:	61ba      	str	r2, [r7, #24]
 8008700:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008702:	6979      	ldr	r1, [r7, #20]
 8008704:	69ba      	ldr	r2, [r7, #24]
 8008706:	e841 2300 	strex	r3, r2, [r1]
 800870a:	613b      	str	r3, [r7, #16]
   return(result);
 800870c:	693b      	ldr	r3, [r7, #16]
 800870e:	2b00      	cmp	r3, #0
 8008710:	d1e5      	bne.n	80086de <HAL_UART_DMAStop+0xae>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008718:	2b00      	cmp	r3, #0
 800871a:	d017      	beq.n	800874c <HAL_UART_DMAStop+0x11c>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008722:	4618      	mov	r0, r3
 8008724:	f7fc fc35 	bl	8004f92 <HAL_DMA_Abort>
 8008728:	4603      	mov	r3, r0
 800872a:	2b00      	cmp	r3, #0
 800872c:	d00e      	beq.n	800874c <HAL_UART_DMAStop+0x11c>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008734:	4618      	mov	r0, r3
 8008736:	f7fc fd9b 	bl	8005270 <HAL_DMA_GetError>
 800873a:	4603      	mov	r3, r0
 800873c:	2b20      	cmp	r3, #32
 800873e:	d105      	bne.n	800874c <HAL_UART_DMAStop+0x11c>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	2210      	movs	r2, #16
 8008744:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 8008748:	2303      	movs	r3, #3
 800874a:	e003      	b.n	8008754 <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndRxTransfer(huart);
 800874c:	6878      	ldr	r0, [r7, #4]
 800874e:	f001 f922 	bl	8009996 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8008752:	2300      	movs	r3, #0
}
 8008754:	4618      	mov	r0, r3
 8008756:	3740      	adds	r7, #64	@ 0x40
 8008758:	46bd      	mov	sp, r7
 800875a:	bd80      	pop	{r7, pc}

0800875c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800875c:	b580      	push	{r7, lr}
 800875e:	b0ba      	sub	sp, #232	@ 0xe8
 8008760:	af00      	add	r7, sp, #0
 8008762:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	69db      	ldr	r3, [r3, #28]
 800876a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	689b      	ldr	r3, [r3, #8]
 800877e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008782:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8008786:	f640 030f 	movw	r3, #2063	@ 0x80f
 800878a:	4013      	ands	r3, r2
 800878c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8008790:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008794:	2b00      	cmp	r3, #0
 8008796:	d11b      	bne.n	80087d0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008798:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800879c:	f003 0320 	and.w	r3, r3, #32
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d015      	beq.n	80087d0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80087a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80087a8:	f003 0320 	and.w	r3, r3, #32
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d105      	bne.n	80087bc <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80087b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80087b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d009      	beq.n	80087d0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	f000 8300 	beq.w	8008dc6 <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80087ca:	6878      	ldr	r0, [r7, #4]
 80087cc:	4798      	blx	r3
      }
      return;
 80087ce:	e2fa      	b.n	8008dc6 <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80087d0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	f000 8123 	beq.w	8008a20 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80087da:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80087de:	4b8d      	ldr	r3, [pc, #564]	@ (8008a14 <HAL_UART_IRQHandler+0x2b8>)
 80087e0:	4013      	ands	r3, r2
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d106      	bne.n	80087f4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80087e6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80087ea:	4b8b      	ldr	r3, [pc, #556]	@ (8008a18 <HAL_UART_IRQHandler+0x2bc>)
 80087ec:	4013      	ands	r3, r2
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	f000 8116 	beq.w	8008a20 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80087f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80087f8:	f003 0301 	and.w	r3, r3, #1
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d011      	beq.n	8008824 <HAL_UART_IRQHandler+0xc8>
 8008800:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008804:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008808:	2b00      	cmp	r3, #0
 800880a:	d00b      	beq.n	8008824 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	2201      	movs	r2, #1
 8008812:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800881a:	f043 0201 	orr.w	r2, r3, #1
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008824:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008828:	f003 0302 	and.w	r3, r3, #2
 800882c:	2b00      	cmp	r3, #0
 800882e:	d011      	beq.n	8008854 <HAL_UART_IRQHandler+0xf8>
 8008830:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008834:	f003 0301 	and.w	r3, r3, #1
 8008838:	2b00      	cmp	r3, #0
 800883a:	d00b      	beq.n	8008854 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	2202      	movs	r2, #2
 8008842:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800884a:	f043 0204 	orr.w	r2, r3, #4
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008854:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008858:	f003 0304 	and.w	r3, r3, #4
 800885c:	2b00      	cmp	r3, #0
 800885e:	d011      	beq.n	8008884 <HAL_UART_IRQHandler+0x128>
 8008860:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008864:	f003 0301 	and.w	r3, r3, #1
 8008868:	2b00      	cmp	r3, #0
 800886a:	d00b      	beq.n	8008884 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	2204      	movs	r2, #4
 8008872:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800887a:	f043 0202 	orr.w	r2, r3, #2
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008884:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008888:	f003 0308 	and.w	r3, r3, #8
 800888c:	2b00      	cmp	r3, #0
 800888e:	d017      	beq.n	80088c0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008890:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008894:	f003 0320 	and.w	r3, r3, #32
 8008898:	2b00      	cmp	r3, #0
 800889a:	d105      	bne.n	80088a8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800889c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80088a0:	4b5c      	ldr	r3, [pc, #368]	@ (8008a14 <HAL_UART_IRQHandler+0x2b8>)
 80088a2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d00b      	beq.n	80088c0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	2208      	movs	r2, #8
 80088ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80088b6:	f043 0208 	orr.w	r2, r3, #8
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80088c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80088c4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d012      	beq.n	80088f2 <HAL_UART_IRQHandler+0x196>
 80088cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80088d0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d00c      	beq.n	80088f2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80088e0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80088e8:	f043 0220 	orr.w	r2, r3, #32
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	f000 8266 	beq.w	8008dca <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80088fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008902:	f003 0320 	and.w	r3, r3, #32
 8008906:	2b00      	cmp	r3, #0
 8008908:	d013      	beq.n	8008932 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800890a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800890e:	f003 0320 	and.w	r3, r3, #32
 8008912:	2b00      	cmp	r3, #0
 8008914:	d105      	bne.n	8008922 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008916:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800891a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800891e:	2b00      	cmp	r3, #0
 8008920:	d007      	beq.n	8008932 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008926:	2b00      	cmp	r3, #0
 8008928:	d003      	beq.n	8008932 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800892e:	6878      	ldr	r0, [r7, #4]
 8008930:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008938:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	689b      	ldr	r3, [r3, #8]
 8008942:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008946:	2b40      	cmp	r3, #64	@ 0x40
 8008948:	d005      	beq.n	8008956 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800894a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800894e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008952:	2b00      	cmp	r3, #0
 8008954:	d054      	beq.n	8008a00 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008956:	6878      	ldr	r0, [r7, #4]
 8008958:	f001 f81d 	bl	8009996 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	689b      	ldr	r3, [r3, #8]
 8008962:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008966:	2b40      	cmp	r3, #64	@ 0x40
 8008968:	d146      	bne.n	80089f8 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	3308      	adds	r3, #8
 8008970:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008974:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008978:	e853 3f00 	ldrex	r3, [r3]
 800897c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008980:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008984:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008988:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	3308      	adds	r3, #8
 8008992:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8008996:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800899a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800899e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80089a2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80089a6:	e841 2300 	strex	r3, r2, [r1]
 80089aa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80089ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d1d9      	bne.n	800896a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d017      	beq.n	80089f0 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80089c6:	4a15      	ldr	r2, [pc, #84]	@ (8008a1c <HAL_UART_IRQHandler+0x2c0>)
 80089c8:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80089d0:	4618      	mov	r0, r3
 80089d2:	f7fc fb37 	bl	8005044 <HAL_DMA_Abort_IT>
 80089d6:	4603      	mov	r3, r0
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d019      	beq.n	8008a10 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80089e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089e4:	687a      	ldr	r2, [r7, #4]
 80089e6:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80089ea:	4610      	mov	r0, r2
 80089ec:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80089ee:	e00f      	b.n	8008a10 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80089f0:	6878      	ldr	r0, [r7, #4]
 80089f2:	f000 fa1d 	bl	8008e30 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80089f6:	e00b      	b.n	8008a10 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80089f8:	6878      	ldr	r0, [r7, #4]
 80089fa:	f000 fa19 	bl	8008e30 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80089fe:	e007      	b.n	8008a10 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008a00:	6878      	ldr	r0, [r7, #4]
 8008a02:	f000 fa15 	bl	8008e30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	2200      	movs	r2, #0
 8008a0a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8008a0e:	e1dc      	b.n	8008dca <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a10:	bf00      	nop
    return;
 8008a12:	e1da      	b.n	8008dca <HAL_UART_IRQHandler+0x66e>
 8008a14:	10000001 	.word	0x10000001
 8008a18:	04000120 	.word	0x04000120
 8008a1c:	08009d03 	.word	0x08009d03

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008a24:	2b01      	cmp	r3, #1
 8008a26:	f040 8170 	bne.w	8008d0a <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008a2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008a2e:	f003 0310 	and.w	r3, r3, #16
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	f000 8169 	beq.w	8008d0a <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008a38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008a3c:	f003 0310 	and.w	r3, r3, #16
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	f000 8162 	beq.w	8008d0a <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	2210      	movs	r2, #16
 8008a4c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	689b      	ldr	r3, [r3, #8]
 8008a54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a58:	2b40      	cmp	r3, #64	@ 0x40
 8008a5a:	f040 80d8 	bne.w	8008c0e <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	685b      	ldr	r3, [r3, #4]
 8008a68:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008a6c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	f000 80af 	beq.w	8008bd4 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008a7c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008a80:	429a      	cmp	r2, r3
 8008a82:	f080 80a7 	bcs.w	8008bd4 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008a8c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	f003 0320 	and.w	r3, r3, #32
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	f040 8087 	bne.w	8008bb2 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008aac:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008ab0:	e853 3f00 	ldrex	r3, [r3]
 8008ab4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008ab8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008abc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008ac0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	461a      	mov	r2, r3
 8008aca:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008ace:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008ad2:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ad6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008ada:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008ade:	e841 2300 	strex	r3, r2, [r1]
 8008ae2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008ae6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d1da      	bne.n	8008aa4 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	3308      	adds	r3, #8
 8008af4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008af6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008af8:	e853 3f00 	ldrex	r3, [r3]
 8008afc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008afe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008b00:	f023 0301 	bic.w	r3, r3, #1
 8008b04:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	3308      	adds	r3, #8
 8008b0e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008b12:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8008b16:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b18:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008b1a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008b1e:	e841 2300 	strex	r3, r2, [r1]
 8008b22:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008b24:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d1e1      	bne.n	8008aee <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	3308      	adds	r3, #8
 8008b30:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b32:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008b34:	e853 3f00 	ldrex	r3, [r3]
 8008b38:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008b3a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008b3c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008b40:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	3308      	adds	r3, #8
 8008b4a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008b4e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008b50:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b52:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008b54:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008b56:	e841 2300 	strex	r3, r2, [r1]
 8008b5a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008b5c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d1e3      	bne.n	8008b2a <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	2220      	movs	r2, #32
 8008b66:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	2200      	movs	r2, #0
 8008b6e:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b76:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008b78:	e853 3f00 	ldrex	r3, [r3]
 8008b7c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008b7e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008b80:	f023 0310 	bic.w	r3, r3, #16
 8008b84:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	461a      	mov	r2, r3
 8008b8e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008b92:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008b94:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b96:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008b98:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008b9a:	e841 2300 	strex	r3, r2, [r1]
 8008b9e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008ba0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d1e4      	bne.n	8008b70 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008bac:	4618      	mov	r0, r3
 8008bae:	f7fc f9f0 	bl	8004f92 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	2202      	movs	r2, #2
 8008bb6:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008bc4:	b29b      	uxth	r3, r3
 8008bc6:	1ad3      	subs	r3, r2, r3
 8008bc8:	b29b      	uxth	r3, r3
 8008bca:	4619      	mov	r1, r3
 8008bcc:	6878      	ldr	r0, [r7, #4]
 8008bce:	f000 f939 	bl	8008e44 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8008bd2:	e0fc      	b.n	8008dce <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008bda:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008bde:	429a      	cmp	r2, r3
 8008be0:	f040 80f5 	bne.w	8008dce <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	f003 0320 	and.w	r3, r3, #32
 8008bf2:	2b20      	cmp	r3, #32
 8008bf4:	f040 80eb 	bne.w	8008dce <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	2202      	movs	r2, #2
 8008bfc:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008c04:	4619      	mov	r1, r3
 8008c06:	6878      	ldr	r0, [r7, #4]
 8008c08:	f000 f91c 	bl	8008e44 <HAL_UARTEx_RxEventCallback>
      return;
 8008c0c:	e0df      	b.n	8008dce <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008c1a:	b29b      	uxth	r3, r3
 8008c1c:	1ad3      	subs	r3, r2, r3
 8008c1e:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008c28:	b29b      	uxth	r3, r3
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	f000 80d1 	beq.w	8008dd2 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8008c30:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	f000 80cc 	beq.w	8008dd2 <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c42:	e853 3f00 	ldrex	r3, [r3]
 8008c46:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008c48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c4a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008c4e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	461a      	mov	r2, r3
 8008c58:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008c5c:	647b      	str	r3, [r7, #68]	@ 0x44
 8008c5e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c60:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008c62:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008c64:	e841 2300 	strex	r3, r2, [r1]
 8008c68:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008c6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d1e4      	bne.n	8008c3a <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	3308      	adds	r3, #8
 8008c76:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c7a:	e853 3f00 	ldrex	r3, [r3]
 8008c7e:	623b      	str	r3, [r7, #32]
   return(result);
 8008c80:	6a3b      	ldr	r3, [r7, #32]
 8008c82:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008c86:	f023 0301 	bic.w	r3, r3, #1
 8008c8a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	3308      	adds	r3, #8
 8008c94:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008c98:	633a      	str	r2, [r7, #48]	@ 0x30
 8008c9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c9c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008c9e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008ca0:	e841 2300 	strex	r3, r2, [r1]
 8008ca4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008ca6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d1e1      	bne.n	8008c70 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	2220      	movs	r2, #32
 8008cb0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	2200      	movs	r2, #0
 8008cb8:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	2200      	movs	r2, #0
 8008cbe:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cc6:	693b      	ldr	r3, [r7, #16]
 8008cc8:	e853 3f00 	ldrex	r3, [r3]
 8008ccc:	60fb      	str	r3, [r7, #12]
   return(result);
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	f023 0310 	bic.w	r3, r3, #16
 8008cd4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	461a      	mov	r2, r3
 8008cde:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8008ce2:	61fb      	str	r3, [r7, #28]
 8008ce4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ce6:	69b9      	ldr	r1, [r7, #24]
 8008ce8:	69fa      	ldr	r2, [r7, #28]
 8008cea:	e841 2300 	strex	r3, r2, [r1]
 8008cee:	617b      	str	r3, [r7, #20]
   return(result);
 8008cf0:	697b      	ldr	r3, [r7, #20]
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d1e4      	bne.n	8008cc0 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	2202      	movs	r2, #2
 8008cfa:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008cfc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008d00:	4619      	mov	r1, r3
 8008d02:	6878      	ldr	r0, [r7, #4]
 8008d04:	f000 f89e 	bl	8008e44 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008d08:	e063      	b.n	8008dd2 <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008d0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008d0e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d00e      	beq.n	8008d34 <HAL_UART_IRQHandler+0x5d8>
 8008d16:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008d1a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d008      	beq.n	8008d34 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8008d2a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008d2c:	6878      	ldr	r0, [r7, #4]
 8008d2e:	f001 f825 	bl	8009d7c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008d32:	e051      	b.n	8008dd8 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008d34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008d38:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d014      	beq.n	8008d6a <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008d40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008d44:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d105      	bne.n	8008d58 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008d4c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008d50:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d008      	beq.n	8008d6a <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d03a      	beq.n	8008dd6 <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008d64:	6878      	ldr	r0, [r7, #4]
 8008d66:	4798      	blx	r3
    }
    return;
 8008d68:	e035      	b.n	8008dd6 <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008d6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008d6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d009      	beq.n	8008d8a <HAL_UART_IRQHandler+0x62e>
 8008d76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008d7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d003      	beq.n	8008d8a <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 8008d82:	6878      	ldr	r0, [r7, #4]
 8008d84:	f000 ffcf 	bl	8009d26 <UART_EndTransmit_IT>
    return;
 8008d88:	e026      	b.n	8008dd8 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008d8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008d8e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d009      	beq.n	8008daa <HAL_UART_IRQHandler+0x64e>
 8008d96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008d9a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d003      	beq.n	8008daa <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008da2:	6878      	ldr	r0, [r7, #4]
 8008da4:	f000 fffe 	bl	8009da4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008da8:	e016      	b.n	8008dd8 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008daa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008dae:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d010      	beq.n	8008dd8 <HAL_UART_IRQHandler+0x67c>
 8008db6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	da0c      	bge.n	8008dd8 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8008dbe:	6878      	ldr	r0, [r7, #4]
 8008dc0:	f000 ffe6 	bl	8009d90 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008dc4:	e008      	b.n	8008dd8 <HAL_UART_IRQHandler+0x67c>
      return;
 8008dc6:	bf00      	nop
 8008dc8:	e006      	b.n	8008dd8 <HAL_UART_IRQHandler+0x67c>
    return;
 8008dca:	bf00      	nop
 8008dcc:	e004      	b.n	8008dd8 <HAL_UART_IRQHandler+0x67c>
      return;
 8008dce:	bf00      	nop
 8008dd0:	e002      	b.n	8008dd8 <HAL_UART_IRQHandler+0x67c>
      return;
 8008dd2:	bf00      	nop
 8008dd4:	e000      	b.n	8008dd8 <HAL_UART_IRQHandler+0x67c>
    return;
 8008dd6:	bf00      	nop
  }
}
 8008dd8:	37e8      	adds	r7, #232	@ 0xe8
 8008dda:	46bd      	mov	sp, r7
 8008ddc:	bd80      	pop	{r7, pc}
 8008dde:	bf00      	nop

08008de0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008de0:	b480      	push	{r7}
 8008de2:	b083      	sub	sp, #12
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008de8:	bf00      	nop
 8008dea:	370c      	adds	r7, #12
 8008dec:	46bd      	mov	sp, r7
 8008dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df2:	4770      	bx	lr

08008df4 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008df4:	b480      	push	{r7}
 8008df6:	b083      	sub	sp, #12
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8008dfc:	bf00      	nop
 8008dfe:	370c      	adds	r7, #12
 8008e00:	46bd      	mov	sp, r7
 8008e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e06:	4770      	bx	lr

08008e08 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008e08:	b480      	push	{r7}
 8008e0a:	b083      	sub	sp, #12
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8008e10:	bf00      	nop
 8008e12:	370c      	adds	r7, #12
 8008e14:	46bd      	mov	sp, r7
 8008e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e1a:	4770      	bx	lr

08008e1c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008e1c:	b480      	push	{r7}
 8008e1e:	b083      	sub	sp, #12
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8008e24:	bf00      	nop
 8008e26:	370c      	adds	r7, #12
 8008e28:	46bd      	mov	sp, r7
 8008e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e2e:	4770      	bx	lr

08008e30 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008e30:	b480      	push	{r7}
 8008e32:	b083      	sub	sp, #12
 8008e34:	af00      	add	r7, sp, #0
 8008e36:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008e38:	bf00      	nop
 8008e3a:	370c      	adds	r7, #12
 8008e3c:	46bd      	mov	sp, r7
 8008e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e42:	4770      	bx	lr

08008e44 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008e44:	b480      	push	{r7}
 8008e46:	b083      	sub	sp, #12
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	6078      	str	r0, [r7, #4]
 8008e4c:	460b      	mov	r3, r1
 8008e4e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008e50:	bf00      	nop
 8008e52:	370c      	adds	r7, #12
 8008e54:	46bd      	mov	sp, r7
 8008e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e5a:	4770      	bx	lr

08008e5c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008e5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008e60:	b08c      	sub	sp, #48	@ 0x30
 8008e62:	af00      	add	r7, sp, #0
 8008e64:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008e66:	2300      	movs	r3, #0
 8008e68:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008e6c:	697b      	ldr	r3, [r7, #20]
 8008e6e:	689a      	ldr	r2, [r3, #8]
 8008e70:	697b      	ldr	r3, [r7, #20]
 8008e72:	691b      	ldr	r3, [r3, #16]
 8008e74:	431a      	orrs	r2, r3
 8008e76:	697b      	ldr	r3, [r7, #20]
 8008e78:	695b      	ldr	r3, [r3, #20]
 8008e7a:	431a      	orrs	r2, r3
 8008e7c:	697b      	ldr	r3, [r7, #20]
 8008e7e:	69db      	ldr	r3, [r3, #28]
 8008e80:	4313      	orrs	r3, r2
 8008e82:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008e84:	697b      	ldr	r3, [r7, #20]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	681a      	ldr	r2, [r3, #0]
 8008e8a:	4baa      	ldr	r3, [pc, #680]	@ (8009134 <UART_SetConfig+0x2d8>)
 8008e8c:	4013      	ands	r3, r2
 8008e8e:	697a      	ldr	r2, [r7, #20]
 8008e90:	6812      	ldr	r2, [r2, #0]
 8008e92:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008e94:	430b      	orrs	r3, r1
 8008e96:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008e98:	697b      	ldr	r3, [r7, #20]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	685b      	ldr	r3, [r3, #4]
 8008e9e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008ea2:	697b      	ldr	r3, [r7, #20]
 8008ea4:	68da      	ldr	r2, [r3, #12]
 8008ea6:	697b      	ldr	r3, [r7, #20]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	430a      	orrs	r2, r1
 8008eac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008eae:	697b      	ldr	r3, [r7, #20]
 8008eb0:	699b      	ldr	r3, [r3, #24]
 8008eb2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008eb4:	697b      	ldr	r3, [r7, #20]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	4a9f      	ldr	r2, [pc, #636]	@ (8009138 <UART_SetConfig+0x2dc>)
 8008eba:	4293      	cmp	r3, r2
 8008ebc:	d004      	beq.n	8008ec8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008ebe:	697b      	ldr	r3, [r7, #20]
 8008ec0:	6a1b      	ldr	r3, [r3, #32]
 8008ec2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008ec4:	4313      	orrs	r3, r2
 8008ec6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008ec8:	697b      	ldr	r3, [r7, #20]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	689b      	ldr	r3, [r3, #8]
 8008ece:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8008ed2:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8008ed6:	697a      	ldr	r2, [r7, #20]
 8008ed8:	6812      	ldr	r2, [r2, #0]
 8008eda:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008edc:	430b      	orrs	r3, r1
 8008ede:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008ee0:	697b      	ldr	r3, [r7, #20]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ee6:	f023 010f 	bic.w	r1, r3, #15
 8008eea:	697b      	ldr	r3, [r7, #20]
 8008eec:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008eee:	697b      	ldr	r3, [r7, #20]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	430a      	orrs	r2, r1
 8008ef4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008ef6:	697b      	ldr	r3, [r7, #20]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	4a90      	ldr	r2, [pc, #576]	@ (800913c <UART_SetConfig+0x2e0>)
 8008efc:	4293      	cmp	r3, r2
 8008efe:	d125      	bne.n	8008f4c <UART_SetConfig+0xf0>
 8008f00:	4b8f      	ldr	r3, [pc, #572]	@ (8009140 <UART_SetConfig+0x2e4>)
 8008f02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008f06:	f003 0303 	and.w	r3, r3, #3
 8008f0a:	2b03      	cmp	r3, #3
 8008f0c:	d81a      	bhi.n	8008f44 <UART_SetConfig+0xe8>
 8008f0e:	a201      	add	r2, pc, #4	@ (adr r2, 8008f14 <UART_SetConfig+0xb8>)
 8008f10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f14:	08008f25 	.word	0x08008f25
 8008f18:	08008f35 	.word	0x08008f35
 8008f1c:	08008f2d 	.word	0x08008f2d
 8008f20:	08008f3d 	.word	0x08008f3d
 8008f24:	2301      	movs	r3, #1
 8008f26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008f2a:	e116      	b.n	800915a <UART_SetConfig+0x2fe>
 8008f2c:	2302      	movs	r3, #2
 8008f2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008f32:	e112      	b.n	800915a <UART_SetConfig+0x2fe>
 8008f34:	2304      	movs	r3, #4
 8008f36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008f3a:	e10e      	b.n	800915a <UART_SetConfig+0x2fe>
 8008f3c:	2308      	movs	r3, #8
 8008f3e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008f42:	e10a      	b.n	800915a <UART_SetConfig+0x2fe>
 8008f44:	2310      	movs	r3, #16
 8008f46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008f4a:	e106      	b.n	800915a <UART_SetConfig+0x2fe>
 8008f4c:	697b      	ldr	r3, [r7, #20]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	4a7c      	ldr	r2, [pc, #496]	@ (8009144 <UART_SetConfig+0x2e8>)
 8008f52:	4293      	cmp	r3, r2
 8008f54:	d138      	bne.n	8008fc8 <UART_SetConfig+0x16c>
 8008f56:	4b7a      	ldr	r3, [pc, #488]	@ (8009140 <UART_SetConfig+0x2e4>)
 8008f58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008f5c:	f003 030c 	and.w	r3, r3, #12
 8008f60:	2b0c      	cmp	r3, #12
 8008f62:	d82d      	bhi.n	8008fc0 <UART_SetConfig+0x164>
 8008f64:	a201      	add	r2, pc, #4	@ (adr r2, 8008f6c <UART_SetConfig+0x110>)
 8008f66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f6a:	bf00      	nop
 8008f6c:	08008fa1 	.word	0x08008fa1
 8008f70:	08008fc1 	.word	0x08008fc1
 8008f74:	08008fc1 	.word	0x08008fc1
 8008f78:	08008fc1 	.word	0x08008fc1
 8008f7c:	08008fb1 	.word	0x08008fb1
 8008f80:	08008fc1 	.word	0x08008fc1
 8008f84:	08008fc1 	.word	0x08008fc1
 8008f88:	08008fc1 	.word	0x08008fc1
 8008f8c:	08008fa9 	.word	0x08008fa9
 8008f90:	08008fc1 	.word	0x08008fc1
 8008f94:	08008fc1 	.word	0x08008fc1
 8008f98:	08008fc1 	.word	0x08008fc1
 8008f9c:	08008fb9 	.word	0x08008fb9
 8008fa0:	2300      	movs	r3, #0
 8008fa2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008fa6:	e0d8      	b.n	800915a <UART_SetConfig+0x2fe>
 8008fa8:	2302      	movs	r3, #2
 8008faa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008fae:	e0d4      	b.n	800915a <UART_SetConfig+0x2fe>
 8008fb0:	2304      	movs	r3, #4
 8008fb2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008fb6:	e0d0      	b.n	800915a <UART_SetConfig+0x2fe>
 8008fb8:	2308      	movs	r3, #8
 8008fba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008fbe:	e0cc      	b.n	800915a <UART_SetConfig+0x2fe>
 8008fc0:	2310      	movs	r3, #16
 8008fc2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008fc6:	e0c8      	b.n	800915a <UART_SetConfig+0x2fe>
 8008fc8:	697b      	ldr	r3, [r7, #20]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	4a5e      	ldr	r2, [pc, #376]	@ (8009148 <UART_SetConfig+0x2ec>)
 8008fce:	4293      	cmp	r3, r2
 8008fd0:	d125      	bne.n	800901e <UART_SetConfig+0x1c2>
 8008fd2:	4b5b      	ldr	r3, [pc, #364]	@ (8009140 <UART_SetConfig+0x2e4>)
 8008fd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008fd8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8008fdc:	2b30      	cmp	r3, #48	@ 0x30
 8008fde:	d016      	beq.n	800900e <UART_SetConfig+0x1b2>
 8008fe0:	2b30      	cmp	r3, #48	@ 0x30
 8008fe2:	d818      	bhi.n	8009016 <UART_SetConfig+0x1ba>
 8008fe4:	2b20      	cmp	r3, #32
 8008fe6:	d00a      	beq.n	8008ffe <UART_SetConfig+0x1a2>
 8008fe8:	2b20      	cmp	r3, #32
 8008fea:	d814      	bhi.n	8009016 <UART_SetConfig+0x1ba>
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d002      	beq.n	8008ff6 <UART_SetConfig+0x19a>
 8008ff0:	2b10      	cmp	r3, #16
 8008ff2:	d008      	beq.n	8009006 <UART_SetConfig+0x1aa>
 8008ff4:	e00f      	b.n	8009016 <UART_SetConfig+0x1ba>
 8008ff6:	2300      	movs	r3, #0
 8008ff8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008ffc:	e0ad      	b.n	800915a <UART_SetConfig+0x2fe>
 8008ffe:	2302      	movs	r3, #2
 8009000:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009004:	e0a9      	b.n	800915a <UART_SetConfig+0x2fe>
 8009006:	2304      	movs	r3, #4
 8009008:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800900c:	e0a5      	b.n	800915a <UART_SetConfig+0x2fe>
 800900e:	2308      	movs	r3, #8
 8009010:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009014:	e0a1      	b.n	800915a <UART_SetConfig+0x2fe>
 8009016:	2310      	movs	r3, #16
 8009018:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800901c:	e09d      	b.n	800915a <UART_SetConfig+0x2fe>
 800901e:	697b      	ldr	r3, [r7, #20]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	4a4a      	ldr	r2, [pc, #296]	@ (800914c <UART_SetConfig+0x2f0>)
 8009024:	4293      	cmp	r3, r2
 8009026:	d125      	bne.n	8009074 <UART_SetConfig+0x218>
 8009028:	4b45      	ldr	r3, [pc, #276]	@ (8009140 <UART_SetConfig+0x2e4>)
 800902a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800902e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8009032:	2bc0      	cmp	r3, #192	@ 0xc0
 8009034:	d016      	beq.n	8009064 <UART_SetConfig+0x208>
 8009036:	2bc0      	cmp	r3, #192	@ 0xc0
 8009038:	d818      	bhi.n	800906c <UART_SetConfig+0x210>
 800903a:	2b80      	cmp	r3, #128	@ 0x80
 800903c:	d00a      	beq.n	8009054 <UART_SetConfig+0x1f8>
 800903e:	2b80      	cmp	r3, #128	@ 0x80
 8009040:	d814      	bhi.n	800906c <UART_SetConfig+0x210>
 8009042:	2b00      	cmp	r3, #0
 8009044:	d002      	beq.n	800904c <UART_SetConfig+0x1f0>
 8009046:	2b40      	cmp	r3, #64	@ 0x40
 8009048:	d008      	beq.n	800905c <UART_SetConfig+0x200>
 800904a:	e00f      	b.n	800906c <UART_SetConfig+0x210>
 800904c:	2300      	movs	r3, #0
 800904e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009052:	e082      	b.n	800915a <UART_SetConfig+0x2fe>
 8009054:	2302      	movs	r3, #2
 8009056:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800905a:	e07e      	b.n	800915a <UART_SetConfig+0x2fe>
 800905c:	2304      	movs	r3, #4
 800905e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009062:	e07a      	b.n	800915a <UART_SetConfig+0x2fe>
 8009064:	2308      	movs	r3, #8
 8009066:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800906a:	e076      	b.n	800915a <UART_SetConfig+0x2fe>
 800906c:	2310      	movs	r3, #16
 800906e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009072:	e072      	b.n	800915a <UART_SetConfig+0x2fe>
 8009074:	697b      	ldr	r3, [r7, #20]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	4a35      	ldr	r2, [pc, #212]	@ (8009150 <UART_SetConfig+0x2f4>)
 800907a:	4293      	cmp	r3, r2
 800907c:	d12a      	bne.n	80090d4 <UART_SetConfig+0x278>
 800907e:	4b30      	ldr	r3, [pc, #192]	@ (8009140 <UART_SetConfig+0x2e4>)
 8009080:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009084:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009088:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800908c:	d01a      	beq.n	80090c4 <UART_SetConfig+0x268>
 800908e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009092:	d81b      	bhi.n	80090cc <UART_SetConfig+0x270>
 8009094:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009098:	d00c      	beq.n	80090b4 <UART_SetConfig+0x258>
 800909a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800909e:	d815      	bhi.n	80090cc <UART_SetConfig+0x270>
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d003      	beq.n	80090ac <UART_SetConfig+0x250>
 80090a4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80090a8:	d008      	beq.n	80090bc <UART_SetConfig+0x260>
 80090aa:	e00f      	b.n	80090cc <UART_SetConfig+0x270>
 80090ac:	2300      	movs	r3, #0
 80090ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80090b2:	e052      	b.n	800915a <UART_SetConfig+0x2fe>
 80090b4:	2302      	movs	r3, #2
 80090b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80090ba:	e04e      	b.n	800915a <UART_SetConfig+0x2fe>
 80090bc:	2304      	movs	r3, #4
 80090be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80090c2:	e04a      	b.n	800915a <UART_SetConfig+0x2fe>
 80090c4:	2308      	movs	r3, #8
 80090c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80090ca:	e046      	b.n	800915a <UART_SetConfig+0x2fe>
 80090cc:	2310      	movs	r3, #16
 80090ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80090d2:	e042      	b.n	800915a <UART_SetConfig+0x2fe>
 80090d4:	697b      	ldr	r3, [r7, #20]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	4a17      	ldr	r2, [pc, #92]	@ (8009138 <UART_SetConfig+0x2dc>)
 80090da:	4293      	cmp	r3, r2
 80090dc:	d13a      	bne.n	8009154 <UART_SetConfig+0x2f8>
 80090de:	4b18      	ldr	r3, [pc, #96]	@ (8009140 <UART_SetConfig+0x2e4>)
 80090e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80090e4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80090e8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80090ec:	d01a      	beq.n	8009124 <UART_SetConfig+0x2c8>
 80090ee:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80090f2:	d81b      	bhi.n	800912c <UART_SetConfig+0x2d0>
 80090f4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80090f8:	d00c      	beq.n	8009114 <UART_SetConfig+0x2b8>
 80090fa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80090fe:	d815      	bhi.n	800912c <UART_SetConfig+0x2d0>
 8009100:	2b00      	cmp	r3, #0
 8009102:	d003      	beq.n	800910c <UART_SetConfig+0x2b0>
 8009104:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009108:	d008      	beq.n	800911c <UART_SetConfig+0x2c0>
 800910a:	e00f      	b.n	800912c <UART_SetConfig+0x2d0>
 800910c:	2300      	movs	r3, #0
 800910e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009112:	e022      	b.n	800915a <UART_SetConfig+0x2fe>
 8009114:	2302      	movs	r3, #2
 8009116:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800911a:	e01e      	b.n	800915a <UART_SetConfig+0x2fe>
 800911c:	2304      	movs	r3, #4
 800911e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009122:	e01a      	b.n	800915a <UART_SetConfig+0x2fe>
 8009124:	2308      	movs	r3, #8
 8009126:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800912a:	e016      	b.n	800915a <UART_SetConfig+0x2fe>
 800912c:	2310      	movs	r3, #16
 800912e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009132:	e012      	b.n	800915a <UART_SetConfig+0x2fe>
 8009134:	cfff69f3 	.word	0xcfff69f3
 8009138:	40008000 	.word	0x40008000
 800913c:	40013800 	.word	0x40013800
 8009140:	40021000 	.word	0x40021000
 8009144:	40004400 	.word	0x40004400
 8009148:	40004800 	.word	0x40004800
 800914c:	40004c00 	.word	0x40004c00
 8009150:	40005000 	.word	0x40005000
 8009154:	2310      	movs	r3, #16
 8009156:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800915a:	697b      	ldr	r3, [r7, #20]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	4aae      	ldr	r2, [pc, #696]	@ (8009418 <UART_SetConfig+0x5bc>)
 8009160:	4293      	cmp	r3, r2
 8009162:	f040 8097 	bne.w	8009294 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009166:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800916a:	2b08      	cmp	r3, #8
 800916c:	d823      	bhi.n	80091b6 <UART_SetConfig+0x35a>
 800916e:	a201      	add	r2, pc, #4	@ (adr r2, 8009174 <UART_SetConfig+0x318>)
 8009170:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009174:	08009199 	.word	0x08009199
 8009178:	080091b7 	.word	0x080091b7
 800917c:	080091a1 	.word	0x080091a1
 8009180:	080091b7 	.word	0x080091b7
 8009184:	080091a7 	.word	0x080091a7
 8009188:	080091b7 	.word	0x080091b7
 800918c:	080091b7 	.word	0x080091b7
 8009190:	080091b7 	.word	0x080091b7
 8009194:	080091af 	.word	0x080091af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009198:	f7fd f8ac 	bl	80062f4 <HAL_RCC_GetPCLK1Freq>
 800919c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800919e:	e010      	b.n	80091c2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80091a0:	4b9e      	ldr	r3, [pc, #632]	@ (800941c <UART_SetConfig+0x5c0>)
 80091a2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80091a4:	e00d      	b.n	80091c2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80091a6:	f7fd f837 	bl	8006218 <HAL_RCC_GetSysClockFreq>
 80091aa:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80091ac:	e009      	b.n	80091c2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80091ae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80091b2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80091b4:	e005      	b.n	80091c2 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80091b6:	2300      	movs	r3, #0
 80091b8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80091ba:	2301      	movs	r3, #1
 80091bc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80091c0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80091c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	f000 8130 	beq.w	800942a <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80091ca:	697b      	ldr	r3, [r7, #20]
 80091cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80091ce:	4a94      	ldr	r2, [pc, #592]	@ (8009420 <UART_SetConfig+0x5c4>)
 80091d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80091d4:	461a      	mov	r2, r3
 80091d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091d8:	fbb3 f3f2 	udiv	r3, r3, r2
 80091dc:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80091de:	697b      	ldr	r3, [r7, #20]
 80091e0:	685a      	ldr	r2, [r3, #4]
 80091e2:	4613      	mov	r3, r2
 80091e4:	005b      	lsls	r3, r3, #1
 80091e6:	4413      	add	r3, r2
 80091e8:	69ba      	ldr	r2, [r7, #24]
 80091ea:	429a      	cmp	r2, r3
 80091ec:	d305      	bcc.n	80091fa <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80091ee:	697b      	ldr	r3, [r7, #20]
 80091f0:	685b      	ldr	r3, [r3, #4]
 80091f2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80091f4:	69ba      	ldr	r2, [r7, #24]
 80091f6:	429a      	cmp	r2, r3
 80091f8:	d903      	bls.n	8009202 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80091fa:	2301      	movs	r3, #1
 80091fc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009200:	e113      	b.n	800942a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009202:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009204:	2200      	movs	r2, #0
 8009206:	60bb      	str	r3, [r7, #8]
 8009208:	60fa      	str	r2, [r7, #12]
 800920a:	697b      	ldr	r3, [r7, #20]
 800920c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800920e:	4a84      	ldr	r2, [pc, #528]	@ (8009420 <UART_SetConfig+0x5c4>)
 8009210:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009214:	b29b      	uxth	r3, r3
 8009216:	2200      	movs	r2, #0
 8009218:	603b      	str	r3, [r7, #0]
 800921a:	607a      	str	r2, [r7, #4]
 800921c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009220:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009224:	f7f7 fd7a 	bl	8000d1c <__aeabi_uldivmod>
 8009228:	4602      	mov	r2, r0
 800922a:	460b      	mov	r3, r1
 800922c:	4610      	mov	r0, r2
 800922e:	4619      	mov	r1, r3
 8009230:	f04f 0200 	mov.w	r2, #0
 8009234:	f04f 0300 	mov.w	r3, #0
 8009238:	020b      	lsls	r3, r1, #8
 800923a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800923e:	0202      	lsls	r2, r0, #8
 8009240:	6979      	ldr	r1, [r7, #20]
 8009242:	6849      	ldr	r1, [r1, #4]
 8009244:	0849      	lsrs	r1, r1, #1
 8009246:	2000      	movs	r0, #0
 8009248:	460c      	mov	r4, r1
 800924a:	4605      	mov	r5, r0
 800924c:	eb12 0804 	adds.w	r8, r2, r4
 8009250:	eb43 0905 	adc.w	r9, r3, r5
 8009254:	697b      	ldr	r3, [r7, #20]
 8009256:	685b      	ldr	r3, [r3, #4]
 8009258:	2200      	movs	r2, #0
 800925a:	469a      	mov	sl, r3
 800925c:	4693      	mov	fp, r2
 800925e:	4652      	mov	r2, sl
 8009260:	465b      	mov	r3, fp
 8009262:	4640      	mov	r0, r8
 8009264:	4649      	mov	r1, r9
 8009266:	f7f7 fd59 	bl	8000d1c <__aeabi_uldivmod>
 800926a:	4602      	mov	r2, r0
 800926c:	460b      	mov	r3, r1
 800926e:	4613      	mov	r3, r2
 8009270:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009272:	6a3b      	ldr	r3, [r7, #32]
 8009274:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009278:	d308      	bcc.n	800928c <UART_SetConfig+0x430>
 800927a:	6a3b      	ldr	r3, [r7, #32]
 800927c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009280:	d204      	bcs.n	800928c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8009282:	697b      	ldr	r3, [r7, #20]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	6a3a      	ldr	r2, [r7, #32]
 8009288:	60da      	str	r2, [r3, #12]
 800928a:	e0ce      	b.n	800942a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800928c:	2301      	movs	r3, #1
 800928e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009292:	e0ca      	b.n	800942a <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009294:	697b      	ldr	r3, [r7, #20]
 8009296:	69db      	ldr	r3, [r3, #28]
 8009298:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800929c:	d166      	bne.n	800936c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800929e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80092a2:	2b08      	cmp	r3, #8
 80092a4:	d827      	bhi.n	80092f6 <UART_SetConfig+0x49a>
 80092a6:	a201      	add	r2, pc, #4	@ (adr r2, 80092ac <UART_SetConfig+0x450>)
 80092a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092ac:	080092d1 	.word	0x080092d1
 80092b0:	080092d9 	.word	0x080092d9
 80092b4:	080092e1 	.word	0x080092e1
 80092b8:	080092f7 	.word	0x080092f7
 80092bc:	080092e7 	.word	0x080092e7
 80092c0:	080092f7 	.word	0x080092f7
 80092c4:	080092f7 	.word	0x080092f7
 80092c8:	080092f7 	.word	0x080092f7
 80092cc:	080092ef 	.word	0x080092ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80092d0:	f7fd f810 	bl	80062f4 <HAL_RCC_GetPCLK1Freq>
 80092d4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80092d6:	e014      	b.n	8009302 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80092d8:	f7fd f822 	bl	8006320 <HAL_RCC_GetPCLK2Freq>
 80092dc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80092de:	e010      	b.n	8009302 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80092e0:	4b4e      	ldr	r3, [pc, #312]	@ (800941c <UART_SetConfig+0x5c0>)
 80092e2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80092e4:	e00d      	b.n	8009302 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80092e6:	f7fc ff97 	bl	8006218 <HAL_RCC_GetSysClockFreq>
 80092ea:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80092ec:	e009      	b.n	8009302 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80092ee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80092f2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80092f4:	e005      	b.n	8009302 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80092f6:	2300      	movs	r3, #0
 80092f8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80092fa:	2301      	movs	r3, #1
 80092fc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009300:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009302:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009304:	2b00      	cmp	r3, #0
 8009306:	f000 8090 	beq.w	800942a <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800930a:	697b      	ldr	r3, [r7, #20]
 800930c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800930e:	4a44      	ldr	r2, [pc, #272]	@ (8009420 <UART_SetConfig+0x5c4>)
 8009310:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009314:	461a      	mov	r2, r3
 8009316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009318:	fbb3 f3f2 	udiv	r3, r3, r2
 800931c:	005a      	lsls	r2, r3, #1
 800931e:	697b      	ldr	r3, [r7, #20]
 8009320:	685b      	ldr	r3, [r3, #4]
 8009322:	085b      	lsrs	r3, r3, #1
 8009324:	441a      	add	r2, r3
 8009326:	697b      	ldr	r3, [r7, #20]
 8009328:	685b      	ldr	r3, [r3, #4]
 800932a:	fbb2 f3f3 	udiv	r3, r2, r3
 800932e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009330:	6a3b      	ldr	r3, [r7, #32]
 8009332:	2b0f      	cmp	r3, #15
 8009334:	d916      	bls.n	8009364 <UART_SetConfig+0x508>
 8009336:	6a3b      	ldr	r3, [r7, #32]
 8009338:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800933c:	d212      	bcs.n	8009364 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800933e:	6a3b      	ldr	r3, [r7, #32]
 8009340:	b29b      	uxth	r3, r3
 8009342:	f023 030f 	bic.w	r3, r3, #15
 8009346:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009348:	6a3b      	ldr	r3, [r7, #32]
 800934a:	085b      	lsrs	r3, r3, #1
 800934c:	b29b      	uxth	r3, r3
 800934e:	f003 0307 	and.w	r3, r3, #7
 8009352:	b29a      	uxth	r2, r3
 8009354:	8bfb      	ldrh	r3, [r7, #30]
 8009356:	4313      	orrs	r3, r2
 8009358:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800935a:	697b      	ldr	r3, [r7, #20]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	8bfa      	ldrh	r2, [r7, #30]
 8009360:	60da      	str	r2, [r3, #12]
 8009362:	e062      	b.n	800942a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8009364:	2301      	movs	r3, #1
 8009366:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800936a:	e05e      	b.n	800942a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800936c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009370:	2b08      	cmp	r3, #8
 8009372:	d828      	bhi.n	80093c6 <UART_SetConfig+0x56a>
 8009374:	a201      	add	r2, pc, #4	@ (adr r2, 800937c <UART_SetConfig+0x520>)
 8009376:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800937a:	bf00      	nop
 800937c:	080093a1 	.word	0x080093a1
 8009380:	080093a9 	.word	0x080093a9
 8009384:	080093b1 	.word	0x080093b1
 8009388:	080093c7 	.word	0x080093c7
 800938c:	080093b7 	.word	0x080093b7
 8009390:	080093c7 	.word	0x080093c7
 8009394:	080093c7 	.word	0x080093c7
 8009398:	080093c7 	.word	0x080093c7
 800939c:	080093bf 	.word	0x080093bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80093a0:	f7fc ffa8 	bl	80062f4 <HAL_RCC_GetPCLK1Freq>
 80093a4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80093a6:	e014      	b.n	80093d2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80093a8:	f7fc ffba 	bl	8006320 <HAL_RCC_GetPCLK2Freq>
 80093ac:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80093ae:	e010      	b.n	80093d2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80093b0:	4b1a      	ldr	r3, [pc, #104]	@ (800941c <UART_SetConfig+0x5c0>)
 80093b2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80093b4:	e00d      	b.n	80093d2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80093b6:	f7fc ff2f 	bl	8006218 <HAL_RCC_GetSysClockFreq>
 80093ba:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80093bc:	e009      	b.n	80093d2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80093be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80093c2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80093c4:	e005      	b.n	80093d2 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80093c6:	2300      	movs	r3, #0
 80093c8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80093ca:	2301      	movs	r3, #1
 80093cc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80093d0:	bf00      	nop
    }

    if (pclk != 0U)
 80093d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d028      	beq.n	800942a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80093d8:	697b      	ldr	r3, [r7, #20]
 80093da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80093dc:	4a10      	ldr	r2, [pc, #64]	@ (8009420 <UART_SetConfig+0x5c4>)
 80093de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80093e2:	461a      	mov	r2, r3
 80093e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093e6:	fbb3 f2f2 	udiv	r2, r3, r2
 80093ea:	697b      	ldr	r3, [r7, #20]
 80093ec:	685b      	ldr	r3, [r3, #4]
 80093ee:	085b      	lsrs	r3, r3, #1
 80093f0:	441a      	add	r2, r3
 80093f2:	697b      	ldr	r3, [r7, #20]
 80093f4:	685b      	ldr	r3, [r3, #4]
 80093f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80093fa:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80093fc:	6a3b      	ldr	r3, [r7, #32]
 80093fe:	2b0f      	cmp	r3, #15
 8009400:	d910      	bls.n	8009424 <UART_SetConfig+0x5c8>
 8009402:	6a3b      	ldr	r3, [r7, #32]
 8009404:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009408:	d20c      	bcs.n	8009424 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800940a:	6a3b      	ldr	r3, [r7, #32]
 800940c:	b29a      	uxth	r2, r3
 800940e:	697b      	ldr	r3, [r7, #20]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	60da      	str	r2, [r3, #12]
 8009414:	e009      	b.n	800942a <UART_SetConfig+0x5ce>
 8009416:	bf00      	nop
 8009418:	40008000 	.word	0x40008000
 800941c:	00f42400 	.word	0x00f42400
 8009420:	0801d544 	.word	0x0801d544
      }
      else
      {
        ret = HAL_ERROR;
 8009424:	2301      	movs	r3, #1
 8009426:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800942a:	697b      	ldr	r3, [r7, #20]
 800942c:	2201      	movs	r2, #1
 800942e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8009432:	697b      	ldr	r3, [r7, #20]
 8009434:	2201      	movs	r2, #1
 8009436:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800943a:	697b      	ldr	r3, [r7, #20]
 800943c:	2200      	movs	r2, #0
 800943e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8009440:	697b      	ldr	r3, [r7, #20]
 8009442:	2200      	movs	r2, #0
 8009444:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8009446:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800944a:	4618      	mov	r0, r3
 800944c:	3730      	adds	r7, #48	@ 0x30
 800944e:	46bd      	mov	sp, r7
 8009450:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08009454 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009454:	b480      	push	{r7}
 8009456:	b083      	sub	sp, #12
 8009458:	af00      	add	r7, sp, #0
 800945a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009460:	f003 0308 	and.w	r3, r3, #8
 8009464:	2b00      	cmp	r3, #0
 8009466:	d00a      	beq.n	800947e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	685b      	ldr	r3, [r3, #4]
 800946e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	430a      	orrs	r2, r1
 800947c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009482:	f003 0301 	and.w	r3, r3, #1
 8009486:	2b00      	cmp	r3, #0
 8009488:	d00a      	beq.n	80094a0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	685b      	ldr	r3, [r3, #4]
 8009490:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	430a      	orrs	r2, r1
 800949e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80094a4:	f003 0302 	and.w	r3, r3, #2
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d00a      	beq.n	80094c2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	685b      	ldr	r3, [r3, #4]
 80094b2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	430a      	orrs	r2, r1
 80094c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80094c6:	f003 0304 	and.w	r3, r3, #4
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d00a      	beq.n	80094e4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	685b      	ldr	r3, [r3, #4]
 80094d4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	430a      	orrs	r2, r1
 80094e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80094e8:	f003 0310 	and.w	r3, r3, #16
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d00a      	beq.n	8009506 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	689b      	ldr	r3, [r3, #8]
 80094f6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	430a      	orrs	r2, r1
 8009504:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800950a:	f003 0320 	and.w	r3, r3, #32
 800950e:	2b00      	cmp	r3, #0
 8009510:	d00a      	beq.n	8009528 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	689b      	ldr	r3, [r3, #8]
 8009518:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	430a      	orrs	r2, r1
 8009526:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800952c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009530:	2b00      	cmp	r3, #0
 8009532:	d01a      	beq.n	800956a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	685b      	ldr	r3, [r3, #4]
 800953a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	430a      	orrs	r2, r1
 8009548:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800954e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009552:	d10a      	bne.n	800956a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	685b      	ldr	r3, [r3, #4]
 800955a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	430a      	orrs	r2, r1
 8009568:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800956e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009572:	2b00      	cmp	r3, #0
 8009574:	d00a      	beq.n	800958c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	685b      	ldr	r3, [r3, #4]
 800957c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	430a      	orrs	r2, r1
 800958a:	605a      	str	r2, [r3, #4]
  }
}
 800958c:	bf00      	nop
 800958e:	370c      	adds	r7, #12
 8009590:	46bd      	mov	sp, r7
 8009592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009596:	4770      	bx	lr

08009598 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009598:	b580      	push	{r7, lr}
 800959a:	b098      	sub	sp, #96	@ 0x60
 800959c:	af02      	add	r7, sp, #8
 800959e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	2200      	movs	r2, #0
 80095a4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80095a8:	f7fb fae4 	bl	8004b74 <HAL_GetTick>
 80095ac:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	f003 0308 	and.w	r3, r3, #8
 80095b8:	2b08      	cmp	r3, #8
 80095ba:	d12f      	bne.n	800961c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80095bc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80095c0:	9300      	str	r3, [sp, #0]
 80095c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80095c4:	2200      	movs	r2, #0
 80095c6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80095ca:	6878      	ldr	r0, [r7, #4]
 80095cc:	f000 f88e 	bl	80096ec <UART_WaitOnFlagUntilTimeout>
 80095d0:	4603      	mov	r3, r0
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d022      	beq.n	800961c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095de:	e853 3f00 	ldrex	r3, [r3]
 80095e2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80095e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80095e6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80095ea:	653b      	str	r3, [r7, #80]	@ 0x50
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	461a      	mov	r2, r3
 80095f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80095f4:	647b      	str	r3, [r7, #68]	@ 0x44
 80095f6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095f8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80095fa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80095fc:	e841 2300 	strex	r3, r2, [r1]
 8009600:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009602:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009604:	2b00      	cmp	r3, #0
 8009606:	d1e6      	bne.n	80095d6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	2220      	movs	r2, #32
 800960c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	2200      	movs	r2, #0
 8009614:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009618:	2303      	movs	r3, #3
 800961a:	e063      	b.n	80096e4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	f003 0304 	and.w	r3, r3, #4
 8009626:	2b04      	cmp	r3, #4
 8009628:	d149      	bne.n	80096be <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800962a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800962e:	9300      	str	r3, [sp, #0]
 8009630:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009632:	2200      	movs	r2, #0
 8009634:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009638:	6878      	ldr	r0, [r7, #4]
 800963a:	f000 f857 	bl	80096ec <UART_WaitOnFlagUntilTimeout>
 800963e:	4603      	mov	r3, r0
 8009640:	2b00      	cmp	r3, #0
 8009642:	d03c      	beq.n	80096be <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800964a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800964c:	e853 3f00 	ldrex	r3, [r3]
 8009650:	623b      	str	r3, [r7, #32]
   return(result);
 8009652:	6a3b      	ldr	r3, [r7, #32]
 8009654:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009658:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	461a      	mov	r2, r3
 8009660:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009662:	633b      	str	r3, [r7, #48]	@ 0x30
 8009664:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009666:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009668:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800966a:	e841 2300 	strex	r3, r2, [r1]
 800966e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009670:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009672:	2b00      	cmp	r3, #0
 8009674:	d1e6      	bne.n	8009644 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	3308      	adds	r3, #8
 800967c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800967e:	693b      	ldr	r3, [r7, #16]
 8009680:	e853 3f00 	ldrex	r3, [r3]
 8009684:	60fb      	str	r3, [r7, #12]
   return(result);
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	f023 0301 	bic.w	r3, r3, #1
 800968c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	3308      	adds	r3, #8
 8009694:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009696:	61fa      	str	r2, [r7, #28]
 8009698:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800969a:	69b9      	ldr	r1, [r7, #24]
 800969c:	69fa      	ldr	r2, [r7, #28]
 800969e:	e841 2300 	strex	r3, r2, [r1]
 80096a2:	617b      	str	r3, [r7, #20]
   return(result);
 80096a4:	697b      	ldr	r3, [r7, #20]
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d1e5      	bne.n	8009676 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	2220      	movs	r2, #32
 80096ae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	2200      	movs	r2, #0
 80096b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80096ba:	2303      	movs	r3, #3
 80096bc:	e012      	b.n	80096e4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	2220      	movs	r2, #32
 80096c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	2220      	movs	r2, #32
 80096ca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	2200      	movs	r2, #0
 80096d2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	2200      	movs	r2, #0
 80096d8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	2200      	movs	r2, #0
 80096de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80096e2:	2300      	movs	r3, #0
}
 80096e4:	4618      	mov	r0, r3
 80096e6:	3758      	adds	r7, #88	@ 0x58
 80096e8:	46bd      	mov	sp, r7
 80096ea:	bd80      	pop	{r7, pc}

080096ec <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80096ec:	b580      	push	{r7, lr}
 80096ee:	b084      	sub	sp, #16
 80096f0:	af00      	add	r7, sp, #0
 80096f2:	60f8      	str	r0, [r7, #12]
 80096f4:	60b9      	str	r1, [r7, #8]
 80096f6:	603b      	str	r3, [r7, #0]
 80096f8:	4613      	mov	r3, r2
 80096fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80096fc:	e04f      	b.n	800979e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80096fe:	69bb      	ldr	r3, [r7, #24]
 8009700:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009704:	d04b      	beq.n	800979e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009706:	f7fb fa35 	bl	8004b74 <HAL_GetTick>
 800970a:	4602      	mov	r2, r0
 800970c:	683b      	ldr	r3, [r7, #0]
 800970e:	1ad3      	subs	r3, r2, r3
 8009710:	69ba      	ldr	r2, [r7, #24]
 8009712:	429a      	cmp	r2, r3
 8009714:	d302      	bcc.n	800971c <UART_WaitOnFlagUntilTimeout+0x30>
 8009716:	69bb      	ldr	r3, [r7, #24]
 8009718:	2b00      	cmp	r3, #0
 800971a:	d101      	bne.n	8009720 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800971c:	2303      	movs	r3, #3
 800971e:	e04e      	b.n	80097be <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	f003 0304 	and.w	r3, r3, #4
 800972a:	2b00      	cmp	r3, #0
 800972c:	d037      	beq.n	800979e <UART_WaitOnFlagUntilTimeout+0xb2>
 800972e:	68bb      	ldr	r3, [r7, #8]
 8009730:	2b80      	cmp	r3, #128	@ 0x80
 8009732:	d034      	beq.n	800979e <UART_WaitOnFlagUntilTimeout+0xb2>
 8009734:	68bb      	ldr	r3, [r7, #8]
 8009736:	2b40      	cmp	r3, #64	@ 0x40
 8009738:	d031      	beq.n	800979e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	69db      	ldr	r3, [r3, #28]
 8009740:	f003 0308 	and.w	r3, r3, #8
 8009744:	2b08      	cmp	r3, #8
 8009746:	d110      	bne.n	800976a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	2208      	movs	r2, #8
 800974e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009750:	68f8      	ldr	r0, [r7, #12]
 8009752:	f000 f920 	bl	8009996 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	2208      	movs	r2, #8
 800975a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	2200      	movs	r2, #0
 8009762:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8009766:	2301      	movs	r3, #1
 8009768:	e029      	b.n	80097be <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	69db      	ldr	r3, [r3, #28]
 8009770:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009774:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009778:	d111      	bne.n	800979e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009782:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009784:	68f8      	ldr	r0, [r7, #12]
 8009786:	f000 f906 	bl	8009996 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	2220      	movs	r2, #32
 800978e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	2200      	movs	r2, #0
 8009796:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800979a:	2303      	movs	r3, #3
 800979c:	e00f      	b.n	80097be <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	69da      	ldr	r2, [r3, #28]
 80097a4:	68bb      	ldr	r3, [r7, #8]
 80097a6:	4013      	ands	r3, r2
 80097a8:	68ba      	ldr	r2, [r7, #8]
 80097aa:	429a      	cmp	r2, r3
 80097ac:	bf0c      	ite	eq
 80097ae:	2301      	moveq	r3, #1
 80097b0:	2300      	movne	r3, #0
 80097b2:	b2db      	uxtb	r3, r3
 80097b4:	461a      	mov	r2, r3
 80097b6:	79fb      	ldrb	r3, [r7, #7]
 80097b8:	429a      	cmp	r2, r3
 80097ba:	d0a0      	beq.n	80096fe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80097bc:	2300      	movs	r3, #0
}
 80097be:	4618      	mov	r0, r3
 80097c0:	3710      	adds	r7, #16
 80097c2:	46bd      	mov	sp, r7
 80097c4:	bd80      	pop	{r7, pc}
	...

080097c8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80097c8:	b580      	push	{r7, lr}
 80097ca:	b096      	sub	sp, #88	@ 0x58
 80097cc:	af00      	add	r7, sp, #0
 80097ce:	60f8      	str	r0, [r7, #12]
 80097d0:	60b9      	str	r1, [r7, #8]
 80097d2:	4613      	mov	r3, r2
 80097d4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	68ba      	ldr	r2, [r7, #8]
 80097da:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	88fa      	ldrh	r2, [r7, #6]
 80097e0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	2200      	movs	r2, #0
 80097e8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	2222      	movs	r2, #34	@ 0x22
 80097f0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d02d      	beq.n	800985a <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009804:	4a40      	ldr	r2, [pc, #256]	@ (8009908 <UART_Start_Receive_DMA+0x140>)
 8009806:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800980e:	4a3f      	ldr	r2, [pc, #252]	@ (800990c <UART_Start_Receive_DMA+0x144>)
 8009810:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009818:	4a3d      	ldr	r2, [pc, #244]	@ (8009910 <UART_Start_Receive_DMA+0x148>)
 800981a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009822:	2200      	movs	r2, #0
 8009824:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	3324      	adds	r3, #36	@ 0x24
 8009832:	4619      	mov	r1, r3
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009838:	461a      	mov	r2, r3
 800983a:	88fb      	ldrh	r3, [r7, #6]
 800983c:	f7fb fb2e 	bl	8004e9c <HAL_DMA_Start_IT>
 8009840:	4603      	mov	r3, r0
 8009842:	2b00      	cmp	r3, #0
 8009844:	d009      	beq.n	800985a <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	2210      	movs	r2, #16
 800984a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	2220      	movs	r2, #32
 8009852:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 8009856:	2301      	movs	r3, #1
 8009858:	e051      	b.n	80098fe <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	691b      	ldr	r3, [r3, #16]
 800985e:	2b00      	cmp	r3, #0
 8009860:	d018      	beq.n	8009894 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009868:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800986a:	e853 3f00 	ldrex	r3, [r3]
 800986e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009870:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009872:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009876:	657b      	str	r3, [r7, #84]	@ 0x54
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	461a      	mov	r2, r3
 800987e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009880:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009882:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009884:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009886:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009888:	e841 2300 	strex	r3, r2, [r1]
 800988c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800988e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009890:	2b00      	cmp	r3, #0
 8009892:	d1e6      	bne.n	8009862 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	3308      	adds	r3, #8
 800989a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800989c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800989e:	e853 3f00 	ldrex	r3, [r3]
 80098a2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80098a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098a6:	f043 0301 	orr.w	r3, r3, #1
 80098aa:	653b      	str	r3, [r7, #80]	@ 0x50
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	3308      	adds	r3, #8
 80098b2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80098b4:	637a      	str	r2, [r7, #52]	@ 0x34
 80098b6:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098b8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80098ba:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80098bc:	e841 2300 	strex	r3, r2, [r1]
 80098c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80098c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d1e5      	bne.n	8009894 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	3308      	adds	r3, #8
 80098ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098d0:	697b      	ldr	r3, [r7, #20]
 80098d2:	e853 3f00 	ldrex	r3, [r3]
 80098d6:	613b      	str	r3, [r7, #16]
   return(result);
 80098d8:	693b      	ldr	r3, [r7, #16]
 80098da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80098de:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	3308      	adds	r3, #8
 80098e6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80098e8:	623a      	str	r2, [r7, #32]
 80098ea:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098ec:	69f9      	ldr	r1, [r7, #28]
 80098ee:	6a3a      	ldr	r2, [r7, #32]
 80098f0:	e841 2300 	strex	r3, r2, [r1]
 80098f4:	61bb      	str	r3, [r7, #24]
   return(result);
 80098f6:	69bb      	ldr	r3, [r7, #24]
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d1e5      	bne.n	80098c8 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 80098fc:	2300      	movs	r3, #0
}
 80098fe:	4618      	mov	r0, r3
 8009900:	3758      	adds	r7, #88	@ 0x58
 8009902:	46bd      	mov	sp, r7
 8009904:	bd80      	pop	{r7, pc}
 8009906:	bf00      	nop
 8009908:	08009b19 	.word	0x08009b19
 800990c:	08009c45 	.word	0x08009c45
 8009910:	08009c83 	.word	0x08009c83

08009914 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009914:	b480      	push	{r7}
 8009916:	b08f      	sub	sp, #60	@ 0x3c
 8009918:	af00      	add	r7, sp, #0
 800991a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009922:	6a3b      	ldr	r3, [r7, #32]
 8009924:	e853 3f00 	ldrex	r3, [r3]
 8009928:	61fb      	str	r3, [r7, #28]
   return(result);
 800992a:	69fb      	ldr	r3, [r7, #28]
 800992c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8009930:	637b      	str	r3, [r7, #52]	@ 0x34
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	461a      	mov	r2, r3
 8009938:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800993a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800993c:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800993e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009940:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009942:	e841 2300 	strex	r3, r2, [r1]
 8009946:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009948:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800994a:	2b00      	cmp	r3, #0
 800994c:	d1e6      	bne.n	800991c <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	3308      	adds	r3, #8
 8009954:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	e853 3f00 	ldrex	r3, [r3]
 800995c:	60bb      	str	r3, [r7, #8]
   return(result);
 800995e:	68bb      	ldr	r3, [r7, #8]
 8009960:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8009964:	633b      	str	r3, [r7, #48]	@ 0x30
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	3308      	adds	r3, #8
 800996c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800996e:	61ba      	str	r2, [r7, #24]
 8009970:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009972:	6979      	ldr	r1, [r7, #20]
 8009974:	69ba      	ldr	r2, [r7, #24]
 8009976:	e841 2300 	strex	r3, r2, [r1]
 800997a:	613b      	str	r3, [r7, #16]
   return(result);
 800997c:	693b      	ldr	r3, [r7, #16]
 800997e:	2b00      	cmp	r3, #0
 8009980:	d1e5      	bne.n	800994e <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	2220      	movs	r2, #32
 8009986:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800998a:	bf00      	nop
 800998c:	373c      	adds	r7, #60	@ 0x3c
 800998e:	46bd      	mov	sp, r7
 8009990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009994:	4770      	bx	lr

08009996 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009996:	b480      	push	{r7}
 8009998:	b095      	sub	sp, #84	@ 0x54
 800999a:	af00      	add	r7, sp, #0
 800999c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80099a6:	e853 3f00 	ldrex	r3, [r3]
 80099aa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80099ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099ae:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80099b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	461a      	mov	r2, r3
 80099ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80099bc:	643b      	str	r3, [r7, #64]	@ 0x40
 80099be:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099c0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80099c2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80099c4:	e841 2300 	strex	r3, r2, [r1]
 80099c8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80099ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d1e6      	bne.n	800999e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	3308      	adds	r3, #8
 80099d6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099d8:	6a3b      	ldr	r3, [r7, #32]
 80099da:	e853 3f00 	ldrex	r3, [r3]
 80099de:	61fb      	str	r3, [r7, #28]
   return(result);
 80099e0:	69fb      	ldr	r3, [r7, #28]
 80099e2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80099e6:	f023 0301 	bic.w	r3, r3, #1
 80099ea:	64bb      	str	r3, [r7, #72]	@ 0x48
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	3308      	adds	r3, #8
 80099f2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80099f4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80099f6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099f8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80099fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80099fc:	e841 2300 	strex	r3, r2, [r1]
 8009a00:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009a02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d1e3      	bne.n	80099d0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009a0c:	2b01      	cmp	r3, #1
 8009a0e:	d118      	bne.n	8009a42 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	e853 3f00 	ldrex	r3, [r3]
 8009a1c:	60bb      	str	r3, [r7, #8]
   return(result);
 8009a1e:	68bb      	ldr	r3, [r7, #8]
 8009a20:	f023 0310 	bic.w	r3, r3, #16
 8009a24:	647b      	str	r3, [r7, #68]	@ 0x44
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	461a      	mov	r2, r3
 8009a2c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009a2e:	61bb      	str	r3, [r7, #24]
 8009a30:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a32:	6979      	ldr	r1, [r7, #20]
 8009a34:	69ba      	ldr	r2, [r7, #24]
 8009a36:	e841 2300 	strex	r3, r2, [r1]
 8009a3a:	613b      	str	r3, [r7, #16]
   return(result);
 8009a3c:	693b      	ldr	r3, [r7, #16]
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d1e6      	bne.n	8009a10 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	2220      	movs	r2, #32
 8009a46:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	2200      	movs	r2, #0
 8009a4e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	2200      	movs	r2, #0
 8009a54:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8009a56:	bf00      	nop
 8009a58:	3754      	adds	r7, #84	@ 0x54
 8009a5a:	46bd      	mov	sp, r7
 8009a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a60:	4770      	bx	lr

08009a62 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009a62:	b580      	push	{r7, lr}
 8009a64:	b090      	sub	sp, #64	@ 0x40
 8009a66:	af00      	add	r7, sp, #0
 8009a68:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a6e:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	f003 0320 	and.w	r3, r3, #32
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d137      	bne.n	8009aee <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8009a7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009a80:	2200      	movs	r2, #0
 8009a82:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009a86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	3308      	adds	r3, #8
 8009a8c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a90:	e853 3f00 	ldrex	r3, [r3]
 8009a94:	623b      	str	r3, [r7, #32]
   return(result);
 8009a96:	6a3b      	ldr	r3, [r7, #32]
 8009a98:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009a9c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009a9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	3308      	adds	r3, #8
 8009aa4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009aa6:	633a      	str	r2, [r7, #48]	@ 0x30
 8009aa8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009aaa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009aac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009aae:	e841 2300 	strex	r3, r2, [r1]
 8009ab2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009ab4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d1e5      	bne.n	8009a86 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009aba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ac0:	693b      	ldr	r3, [r7, #16]
 8009ac2:	e853 3f00 	ldrex	r3, [r3]
 8009ac6:	60fb      	str	r3, [r7, #12]
   return(result);
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009ace:	637b      	str	r3, [r7, #52]	@ 0x34
 8009ad0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	461a      	mov	r2, r3
 8009ad6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ad8:	61fb      	str	r3, [r7, #28]
 8009ada:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009adc:	69b9      	ldr	r1, [r7, #24]
 8009ade:	69fa      	ldr	r2, [r7, #28]
 8009ae0:	e841 2300 	strex	r3, r2, [r1]
 8009ae4:	617b      	str	r3, [r7, #20]
   return(result);
 8009ae6:	697b      	ldr	r3, [r7, #20]
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d1e6      	bne.n	8009aba <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009aec:	e002      	b.n	8009af4 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8009aee:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8009af0:	f7ff f976 	bl	8008de0 <HAL_UART_TxCpltCallback>
}
 8009af4:	bf00      	nop
 8009af6:	3740      	adds	r7, #64	@ 0x40
 8009af8:	46bd      	mov	sp, r7
 8009afa:	bd80      	pop	{r7, pc}

08009afc <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009afc:	b580      	push	{r7, lr}
 8009afe:	b084      	sub	sp, #16
 8009b00:	af00      	add	r7, sp, #0
 8009b02:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b08:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8009b0a:	68f8      	ldr	r0, [r7, #12]
 8009b0c:	f7ff f972 	bl	8008df4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009b10:	bf00      	nop
 8009b12:	3710      	adds	r7, #16
 8009b14:	46bd      	mov	sp, r7
 8009b16:	bd80      	pop	{r7, pc}

08009b18 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009b18:	b580      	push	{r7, lr}
 8009b1a:	b09c      	sub	sp, #112	@ 0x70
 8009b1c:	af00      	add	r7, sp, #0
 8009b1e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b24:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	f003 0320 	and.w	r3, r3, #32
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d171      	bne.n	8009c18 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8009b34:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009b36:	2200      	movs	r2, #0
 8009b38:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009b3c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b42:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009b44:	e853 3f00 	ldrex	r3, [r3]
 8009b48:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009b4a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009b4c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009b50:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009b52:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	461a      	mov	r2, r3
 8009b58:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009b5a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009b5c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b5e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009b60:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009b62:	e841 2300 	strex	r3, r2, [r1]
 8009b66:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009b68:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d1e6      	bne.n	8009b3c <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009b6e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	3308      	adds	r3, #8
 8009b74:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b78:	e853 3f00 	ldrex	r3, [r3]
 8009b7c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009b7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b80:	f023 0301 	bic.w	r3, r3, #1
 8009b84:	667b      	str	r3, [r7, #100]	@ 0x64
 8009b86:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	3308      	adds	r3, #8
 8009b8c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8009b8e:	647a      	str	r2, [r7, #68]	@ 0x44
 8009b90:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b92:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009b94:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009b96:	e841 2300 	strex	r3, r2, [r1]
 8009b9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009b9c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d1e5      	bne.n	8009b6e <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009ba2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	3308      	adds	r3, #8
 8009ba8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009baa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bac:	e853 3f00 	ldrex	r3, [r3]
 8009bb0:	623b      	str	r3, [r7, #32]
   return(result);
 8009bb2:	6a3b      	ldr	r3, [r7, #32]
 8009bb4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009bb8:	663b      	str	r3, [r7, #96]	@ 0x60
 8009bba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	3308      	adds	r3, #8
 8009bc0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8009bc2:	633a      	str	r2, [r7, #48]	@ 0x30
 8009bc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bc6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009bc8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009bca:	e841 2300 	strex	r3, r2, [r1]
 8009bce:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009bd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d1e5      	bne.n	8009ba2 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009bd6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009bd8:	2220      	movs	r2, #32
 8009bda:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009bde:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009be0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009be2:	2b01      	cmp	r3, #1
 8009be4:	d118      	bne.n	8009c18 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009be6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bec:	693b      	ldr	r3, [r7, #16]
 8009bee:	e853 3f00 	ldrex	r3, [r3]
 8009bf2:	60fb      	str	r3, [r7, #12]
   return(result);
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	f023 0310 	bic.w	r3, r3, #16
 8009bfa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009bfc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	461a      	mov	r2, r3
 8009c02:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009c04:	61fb      	str	r3, [r7, #28]
 8009c06:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c08:	69b9      	ldr	r1, [r7, #24]
 8009c0a:	69fa      	ldr	r2, [r7, #28]
 8009c0c:	e841 2300 	strex	r3, r2, [r1]
 8009c10:	617b      	str	r3, [r7, #20]
   return(result);
 8009c12:	697b      	ldr	r3, [r7, #20]
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d1e6      	bne.n	8009be6 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009c18:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009c1a:	2200      	movs	r2, #0
 8009c1c:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009c1e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009c20:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009c22:	2b01      	cmp	r3, #1
 8009c24:	d107      	bne.n	8009c36 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009c26:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009c28:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009c2c:	4619      	mov	r1, r3
 8009c2e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8009c30:	f7ff f908 	bl	8008e44 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009c34:	e002      	b.n	8009c3c <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8009c36:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8009c38:	f7ff f8e6 	bl	8008e08 <HAL_UART_RxCpltCallback>
}
 8009c3c:	bf00      	nop
 8009c3e:	3770      	adds	r7, #112	@ 0x70
 8009c40:	46bd      	mov	sp, r7
 8009c42:	bd80      	pop	{r7, pc}

08009c44 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009c44:	b580      	push	{r7, lr}
 8009c46:	b084      	sub	sp, #16
 8009c48:	af00      	add	r7, sp, #0
 8009c4a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c50:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	2201      	movs	r2, #1
 8009c56:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009c5c:	2b01      	cmp	r3, #1
 8009c5e:	d109      	bne.n	8009c74 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009c66:	085b      	lsrs	r3, r3, #1
 8009c68:	b29b      	uxth	r3, r3
 8009c6a:	4619      	mov	r1, r3
 8009c6c:	68f8      	ldr	r0, [r7, #12]
 8009c6e:	f7ff f8e9 	bl	8008e44 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009c72:	e002      	b.n	8009c7a <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8009c74:	68f8      	ldr	r0, [r7, #12]
 8009c76:	f7ff f8d1 	bl	8008e1c <HAL_UART_RxHalfCpltCallback>
}
 8009c7a:	bf00      	nop
 8009c7c:	3710      	adds	r7, #16
 8009c7e:	46bd      	mov	sp, r7
 8009c80:	bd80      	pop	{r7, pc}

08009c82 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009c82:	b580      	push	{r7, lr}
 8009c84:	b086      	sub	sp, #24
 8009c86:	af00      	add	r7, sp, #0
 8009c88:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c8e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8009c90:	697b      	ldr	r3, [r7, #20]
 8009c92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009c96:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8009c98:	697b      	ldr	r3, [r7, #20]
 8009c9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009c9e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8009ca0:	697b      	ldr	r3, [r7, #20]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	689b      	ldr	r3, [r3, #8]
 8009ca6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009caa:	2b80      	cmp	r3, #128	@ 0x80
 8009cac:	d109      	bne.n	8009cc2 <UART_DMAError+0x40>
 8009cae:	693b      	ldr	r3, [r7, #16]
 8009cb0:	2b21      	cmp	r3, #33	@ 0x21
 8009cb2:	d106      	bne.n	8009cc2 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8009cb4:	697b      	ldr	r3, [r7, #20]
 8009cb6:	2200      	movs	r2, #0
 8009cb8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8009cbc:	6978      	ldr	r0, [r7, #20]
 8009cbe:	f7ff fe29 	bl	8009914 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8009cc2:	697b      	ldr	r3, [r7, #20]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	689b      	ldr	r3, [r3, #8]
 8009cc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009ccc:	2b40      	cmp	r3, #64	@ 0x40
 8009cce:	d109      	bne.n	8009ce4 <UART_DMAError+0x62>
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	2b22      	cmp	r3, #34	@ 0x22
 8009cd4:	d106      	bne.n	8009ce4 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8009cd6:	697b      	ldr	r3, [r7, #20]
 8009cd8:	2200      	movs	r2, #0
 8009cda:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8009cde:	6978      	ldr	r0, [r7, #20]
 8009ce0:	f7ff fe59 	bl	8009996 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009ce4:	697b      	ldr	r3, [r7, #20]
 8009ce6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009cea:	f043 0210 	orr.w	r2, r3, #16
 8009cee:	697b      	ldr	r3, [r7, #20]
 8009cf0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009cf4:	6978      	ldr	r0, [r7, #20]
 8009cf6:	f7ff f89b 	bl	8008e30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009cfa:	bf00      	nop
 8009cfc:	3718      	adds	r7, #24
 8009cfe:	46bd      	mov	sp, r7
 8009d00:	bd80      	pop	{r7, pc}

08009d02 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009d02:	b580      	push	{r7, lr}
 8009d04:	b084      	sub	sp, #16
 8009d06:	af00      	add	r7, sp, #0
 8009d08:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d0e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	2200      	movs	r2, #0
 8009d14:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009d18:	68f8      	ldr	r0, [r7, #12]
 8009d1a:	f7ff f889 	bl	8008e30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009d1e:	bf00      	nop
 8009d20:	3710      	adds	r7, #16
 8009d22:	46bd      	mov	sp, r7
 8009d24:	bd80      	pop	{r7, pc}

08009d26 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009d26:	b580      	push	{r7, lr}
 8009d28:	b088      	sub	sp, #32
 8009d2a:	af00      	add	r7, sp, #0
 8009d2c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	e853 3f00 	ldrex	r3, [r3]
 8009d3a:	60bb      	str	r3, [r7, #8]
   return(result);
 8009d3c:	68bb      	ldr	r3, [r7, #8]
 8009d3e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009d42:	61fb      	str	r3, [r7, #28]
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	461a      	mov	r2, r3
 8009d4a:	69fb      	ldr	r3, [r7, #28]
 8009d4c:	61bb      	str	r3, [r7, #24]
 8009d4e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d50:	6979      	ldr	r1, [r7, #20]
 8009d52:	69ba      	ldr	r2, [r7, #24]
 8009d54:	e841 2300 	strex	r3, r2, [r1]
 8009d58:	613b      	str	r3, [r7, #16]
   return(result);
 8009d5a:	693b      	ldr	r3, [r7, #16]
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d1e6      	bne.n	8009d2e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	2220      	movs	r2, #32
 8009d64:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	2200      	movs	r2, #0
 8009d6c:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009d6e:	6878      	ldr	r0, [r7, #4]
 8009d70:	f7ff f836 	bl	8008de0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009d74:	bf00      	nop
 8009d76:	3720      	adds	r7, #32
 8009d78:	46bd      	mov	sp, r7
 8009d7a:	bd80      	pop	{r7, pc}

08009d7c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009d7c:	b480      	push	{r7}
 8009d7e:	b083      	sub	sp, #12
 8009d80:	af00      	add	r7, sp, #0
 8009d82:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009d84:	bf00      	nop
 8009d86:	370c      	adds	r7, #12
 8009d88:	46bd      	mov	sp, r7
 8009d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d8e:	4770      	bx	lr

08009d90 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009d90:	b480      	push	{r7}
 8009d92:	b083      	sub	sp, #12
 8009d94:	af00      	add	r7, sp, #0
 8009d96:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009d98:	bf00      	nop
 8009d9a:	370c      	adds	r7, #12
 8009d9c:	46bd      	mov	sp, r7
 8009d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da2:	4770      	bx	lr

08009da4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009da4:	b480      	push	{r7}
 8009da6:	b083      	sub	sp, #12
 8009da8:	af00      	add	r7, sp, #0
 8009daa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009dac:	bf00      	nop
 8009dae:	370c      	adds	r7, #12
 8009db0:	46bd      	mov	sp, r7
 8009db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db6:	4770      	bx	lr

08009db8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009db8:	b480      	push	{r7}
 8009dba:	b085      	sub	sp, #20
 8009dbc:	af00      	add	r7, sp, #0
 8009dbe:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009dc6:	2b01      	cmp	r3, #1
 8009dc8:	d101      	bne.n	8009dce <HAL_UARTEx_DisableFifoMode+0x16>
 8009dca:	2302      	movs	r3, #2
 8009dcc:	e027      	b.n	8009e1e <HAL_UARTEx_DisableFifoMode+0x66>
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	2201      	movs	r2, #1
 8009dd2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	2224      	movs	r2, #36	@ 0x24
 8009dda:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	681a      	ldr	r2, [r3, #0]
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	f022 0201 	bic.w	r2, r2, #1
 8009df4:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8009dfc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	2200      	movs	r2, #0
 8009e02:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	68fa      	ldr	r2, [r7, #12]
 8009e0a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	2220      	movs	r2, #32
 8009e10:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	2200      	movs	r2, #0
 8009e18:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009e1c:	2300      	movs	r3, #0
}
 8009e1e:	4618      	mov	r0, r3
 8009e20:	3714      	adds	r7, #20
 8009e22:	46bd      	mov	sp, r7
 8009e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e28:	4770      	bx	lr

08009e2a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009e2a:	b580      	push	{r7, lr}
 8009e2c:	b084      	sub	sp, #16
 8009e2e:	af00      	add	r7, sp, #0
 8009e30:	6078      	str	r0, [r7, #4]
 8009e32:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009e3a:	2b01      	cmp	r3, #1
 8009e3c:	d101      	bne.n	8009e42 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009e3e:	2302      	movs	r3, #2
 8009e40:	e02d      	b.n	8009e9e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	2201      	movs	r2, #1
 8009e46:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	2224      	movs	r2, #36	@ 0x24
 8009e4e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	681a      	ldr	r2, [r3, #0]
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	f022 0201 	bic.w	r2, r2, #1
 8009e68:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	689b      	ldr	r3, [r3, #8]
 8009e70:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	683a      	ldr	r2, [r7, #0]
 8009e7a:	430a      	orrs	r2, r1
 8009e7c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009e7e:	6878      	ldr	r0, [r7, #4]
 8009e80:	f000 f850 	bl	8009f24 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	68fa      	ldr	r2, [r7, #12]
 8009e8a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	2220      	movs	r2, #32
 8009e90:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	2200      	movs	r2, #0
 8009e98:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009e9c:	2300      	movs	r3, #0
}
 8009e9e:	4618      	mov	r0, r3
 8009ea0:	3710      	adds	r7, #16
 8009ea2:	46bd      	mov	sp, r7
 8009ea4:	bd80      	pop	{r7, pc}

08009ea6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009ea6:	b580      	push	{r7, lr}
 8009ea8:	b084      	sub	sp, #16
 8009eaa:	af00      	add	r7, sp, #0
 8009eac:	6078      	str	r0, [r7, #4]
 8009eae:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009eb6:	2b01      	cmp	r3, #1
 8009eb8:	d101      	bne.n	8009ebe <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009eba:	2302      	movs	r3, #2
 8009ebc:	e02d      	b.n	8009f1a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	2201      	movs	r2, #1
 8009ec2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	2224      	movs	r2, #36	@ 0x24
 8009eca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	681a      	ldr	r2, [r3, #0]
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	f022 0201 	bic.w	r2, r2, #1
 8009ee4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	689b      	ldr	r3, [r3, #8]
 8009eec:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	683a      	ldr	r2, [r7, #0]
 8009ef6:	430a      	orrs	r2, r1
 8009ef8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009efa:	6878      	ldr	r0, [r7, #4]
 8009efc:	f000 f812 	bl	8009f24 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	68fa      	ldr	r2, [r7, #12]
 8009f06:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	2220      	movs	r2, #32
 8009f0c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	2200      	movs	r2, #0
 8009f14:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009f18:	2300      	movs	r3, #0
}
 8009f1a:	4618      	mov	r0, r3
 8009f1c:	3710      	adds	r7, #16
 8009f1e:	46bd      	mov	sp, r7
 8009f20:	bd80      	pop	{r7, pc}
	...

08009f24 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009f24:	b480      	push	{r7}
 8009f26:	b085      	sub	sp, #20
 8009f28:	af00      	add	r7, sp, #0
 8009f2a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d108      	bne.n	8009f46 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	2201      	movs	r2, #1
 8009f38:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	2201      	movs	r2, #1
 8009f40:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009f44:	e031      	b.n	8009faa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009f46:	2308      	movs	r3, #8
 8009f48:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009f4a:	2308      	movs	r3, #8
 8009f4c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	689b      	ldr	r3, [r3, #8]
 8009f54:	0e5b      	lsrs	r3, r3, #25
 8009f56:	b2db      	uxtb	r3, r3
 8009f58:	f003 0307 	and.w	r3, r3, #7
 8009f5c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	689b      	ldr	r3, [r3, #8]
 8009f64:	0f5b      	lsrs	r3, r3, #29
 8009f66:	b2db      	uxtb	r3, r3
 8009f68:	f003 0307 	and.w	r3, r3, #7
 8009f6c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009f6e:	7bbb      	ldrb	r3, [r7, #14]
 8009f70:	7b3a      	ldrb	r2, [r7, #12]
 8009f72:	4911      	ldr	r1, [pc, #68]	@ (8009fb8 <UARTEx_SetNbDataToProcess+0x94>)
 8009f74:	5c8a      	ldrb	r2, [r1, r2]
 8009f76:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009f7a:	7b3a      	ldrb	r2, [r7, #12]
 8009f7c:	490f      	ldr	r1, [pc, #60]	@ (8009fbc <UARTEx_SetNbDataToProcess+0x98>)
 8009f7e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009f80:	fb93 f3f2 	sdiv	r3, r3, r2
 8009f84:	b29a      	uxth	r2, r3
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009f8c:	7bfb      	ldrb	r3, [r7, #15]
 8009f8e:	7b7a      	ldrb	r2, [r7, #13]
 8009f90:	4909      	ldr	r1, [pc, #36]	@ (8009fb8 <UARTEx_SetNbDataToProcess+0x94>)
 8009f92:	5c8a      	ldrb	r2, [r1, r2]
 8009f94:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009f98:	7b7a      	ldrb	r2, [r7, #13]
 8009f9a:	4908      	ldr	r1, [pc, #32]	@ (8009fbc <UARTEx_SetNbDataToProcess+0x98>)
 8009f9c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009f9e:	fb93 f3f2 	sdiv	r3, r3, r2
 8009fa2:	b29a      	uxth	r2, r3
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8009faa:	bf00      	nop
 8009fac:	3714      	adds	r7, #20
 8009fae:	46bd      	mov	sp, r7
 8009fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb4:	4770      	bx	lr
 8009fb6:	bf00      	nop
 8009fb8:	0801d55c 	.word	0x0801d55c
 8009fbc:	0801d564 	.word	0x0801d564

08009fc0 <arm_sin_f32>:
  @return        sin(x)
 */

float32_t arm_sin_f32(
  float32_t x)
{
 8009fc0:	b480      	push	{r7}
 8009fc2:	b08b      	sub	sp, #44	@ 0x2c
 8009fc4:	af00      	add	r7, sp, #0
 8009fc6:	ed87 0a01 	vstr	s0, [r7, #4]
  int32_t n;
  float32_t findex;

  /* input x is in radians */
  /* Scale input to [0 1] range from [0 2*PI] , divide input by 2*pi */
  in = x * 0.159154943092f;
 8009fca:	edd7 7a01 	vldr	s15, [r7, #4]
 8009fce:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 800a0b8 <arm_sin_f32+0xf8>
 8009fd2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009fd6:	edc7 7a06 	vstr	s15, [r7, #24]

  /* Calculation of floor value of input */
  n = (int32_t) in;
 8009fda:	edd7 7a06 	vldr	s15, [r7, #24]
 8009fde:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009fe2:	ee17 3a90 	vmov	r3, s15
 8009fe6:	623b      	str	r3, [r7, #32]

  /* Make negative values towards -infinity */
  if (in < 0.0f)
 8009fe8:	edd7 7a06 	vldr	s15, [r7, #24]
 8009fec:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009ff0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ff4:	d502      	bpl.n	8009ffc <arm_sin_f32+0x3c>
  {
    n--;
 8009ff6:	6a3b      	ldr	r3, [r7, #32]
 8009ff8:	3b01      	subs	r3, #1
 8009ffa:	623b      	str	r3, [r7, #32]
  }

  /* Map input value to [0 1] */
  in = in - (float32_t) n;
 8009ffc:	6a3b      	ldr	r3, [r7, #32]
 8009ffe:	ee07 3a90 	vmov	s15, r3
 800a002:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a006:	ed97 7a06 	vldr	s14, [r7, #24]
 800a00a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a00e:	edc7 7a06 	vstr	s15, [r7, #24]

  /* Calculation of index of the table */
  findex = (float32_t)FAST_MATH_TABLE_SIZE * in;
 800a012:	edd7 7a06 	vldr	s15, [r7, #24]
 800a016:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 800a0bc <arm_sin_f32+0xfc>
 800a01a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a01e:	edc7 7a07 	vstr	s15, [r7, #28]
  index = (uint16_t)findex;
 800a022:	edd7 7a07 	vldr	s15, [r7, #28]
 800a026:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a02a:	ee17 3a90 	vmov	r3, s15
 800a02e:	84fb      	strh	r3, [r7, #38]	@ 0x26

  /* when "in" is exactly 1, we need to rotate the index down to 0 */
  if (index >= FAST_MATH_TABLE_SIZE) {
 800a030:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800a032:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a036:	d309      	bcc.n	800a04c <arm_sin_f32+0x8c>
    index = 0;
 800a038:	2300      	movs	r3, #0
 800a03a:	84fb      	strh	r3, [r7, #38]	@ 0x26
    findex -= (float32_t)FAST_MATH_TABLE_SIZE;
 800a03c:	edd7 7a07 	vldr	s15, [r7, #28]
 800a040:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 800a0bc <arm_sin_f32+0xfc>
 800a044:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a048:	edc7 7a07 	vstr	s15, [r7, #28]
  }

  /* fractional value calculation */
  fract = findex - (float32_t) index;
 800a04c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800a04e:	ee07 3a90 	vmov	s15, r3
 800a052:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a056:	ed97 7a07 	vldr	s14, [r7, #28]
 800a05a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a05e:	edc7 7a05 	vstr	s15, [r7, #20]

  /* Read two nearest values of input value from the sin table */
  a = sinTable_f32[index];
 800a062:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800a064:	4a16      	ldr	r2, [pc, #88]	@ (800a0c0 <arm_sin_f32+0x100>)
 800a066:	009b      	lsls	r3, r3, #2
 800a068:	4413      	add	r3, r2
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	613b      	str	r3, [r7, #16]
  b = sinTable_f32[index+1];
 800a06e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800a070:	3301      	adds	r3, #1
 800a072:	4a13      	ldr	r2, [pc, #76]	@ (800a0c0 <arm_sin_f32+0x100>)
 800a074:	009b      	lsls	r3, r3, #2
 800a076:	4413      	add	r3, r2
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	60fb      	str	r3, [r7, #12]

  /* Linear interpolation process */
  sinVal = (1.0f - fract) * a + fract * b;
 800a07c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a080:	edd7 7a05 	vldr	s15, [r7, #20]
 800a084:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a088:	edd7 7a04 	vldr	s15, [r7, #16]
 800a08c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a090:	edd7 6a05 	vldr	s13, [r7, #20]
 800a094:	edd7 7a03 	vldr	s15, [r7, #12]
 800a098:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a09c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a0a0:	edc7 7a02 	vstr	s15, [r7, #8]

  /* Return output value */
  return (sinVal);
 800a0a4:	68bb      	ldr	r3, [r7, #8]
 800a0a6:	ee07 3a90 	vmov	s15, r3
}
 800a0aa:	eeb0 0a67 	vmov.f32	s0, s15
 800a0ae:	372c      	adds	r7, #44	@ 0x2c
 800a0b0:	46bd      	mov	sp, r7
 800a0b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b6:	4770      	bx	lr
 800a0b8:	3e22f983 	.word	0x3e22f983
 800a0bc:	44000000 	.word	0x44000000
 800a0c0:	0801d56c 	.word	0x0801d56c

0800a0c4 <__NVIC_SetPriority>:
{
 800a0c4:	b480      	push	{r7}
 800a0c6:	b083      	sub	sp, #12
 800a0c8:	af00      	add	r7, sp, #0
 800a0ca:	4603      	mov	r3, r0
 800a0cc:	6039      	str	r1, [r7, #0]
 800a0ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a0d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	db0a      	blt.n	800a0ee <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a0d8:	683b      	ldr	r3, [r7, #0]
 800a0da:	b2da      	uxtb	r2, r3
 800a0dc:	490c      	ldr	r1, [pc, #48]	@ (800a110 <__NVIC_SetPriority+0x4c>)
 800a0de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a0e2:	0112      	lsls	r2, r2, #4
 800a0e4:	b2d2      	uxtb	r2, r2
 800a0e6:	440b      	add	r3, r1
 800a0e8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800a0ec:	e00a      	b.n	800a104 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a0ee:	683b      	ldr	r3, [r7, #0]
 800a0f0:	b2da      	uxtb	r2, r3
 800a0f2:	4908      	ldr	r1, [pc, #32]	@ (800a114 <__NVIC_SetPriority+0x50>)
 800a0f4:	79fb      	ldrb	r3, [r7, #7]
 800a0f6:	f003 030f 	and.w	r3, r3, #15
 800a0fa:	3b04      	subs	r3, #4
 800a0fc:	0112      	lsls	r2, r2, #4
 800a0fe:	b2d2      	uxtb	r2, r2
 800a100:	440b      	add	r3, r1
 800a102:	761a      	strb	r2, [r3, #24]
}
 800a104:	bf00      	nop
 800a106:	370c      	adds	r7, #12
 800a108:	46bd      	mov	sp, r7
 800a10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a10e:	4770      	bx	lr
 800a110:	e000e100 	.word	0xe000e100
 800a114:	e000ed00 	.word	0xe000ed00

0800a118 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800a118:	b580      	push	{r7, lr}
 800a11a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800a11c:	4b05      	ldr	r3, [pc, #20]	@ (800a134 <SysTick_Handler+0x1c>)
 800a11e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800a120:	f001 fd40 	bl	800bba4 <xTaskGetSchedulerState>
 800a124:	4603      	mov	r3, r0
 800a126:	2b01      	cmp	r3, #1
 800a128:	d001      	beq.n	800a12e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800a12a:	f002 fb35 	bl	800c798 <xPortSysTickHandler>
  }
}
 800a12e:	bf00      	nop
 800a130:	bd80      	pop	{r7, pc}
 800a132:	bf00      	nop
 800a134:	e000e010 	.word	0xe000e010

0800a138 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800a138:	b580      	push	{r7, lr}
 800a13a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800a13c:	2100      	movs	r1, #0
 800a13e:	f06f 0004 	mvn.w	r0, #4
 800a142:	f7ff ffbf 	bl	800a0c4 <__NVIC_SetPriority>
#endif
}
 800a146:	bf00      	nop
 800a148:	bd80      	pop	{r7, pc}
	...

0800a14c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800a14c:	b480      	push	{r7}
 800a14e:	b083      	sub	sp, #12
 800a150:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a152:	f3ef 8305 	mrs	r3, IPSR
 800a156:	603b      	str	r3, [r7, #0]
  return(result);
 800a158:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d003      	beq.n	800a166 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800a15e:	f06f 0305 	mvn.w	r3, #5
 800a162:	607b      	str	r3, [r7, #4]
 800a164:	e00c      	b.n	800a180 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800a166:	4b0a      	ldr	r3, [pc, #40]	@ (800a190 <osKernelInitialize+0x44>)
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d105      	bne.n	800a17a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800a16e:	4b08      	ldr	r3, [pc, #32]	@ (800a190 <osKernelInitialize+0x44>)
 800a170:	2201      	movs	r2, #1
 800a172:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800a174:	2300      	movs	r3, #0
 800a176:	607b      	str	r3, [r7, #4]
 800a178:	e002      	b.n	800a180 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800a17a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a17e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a180:	687b      	ldr	r3, [r7, #4]
}
 800a182:	4618      	mov	r0, r3
 800a184:	370c      	adds	r7, #12
 800a186:	46bd      	mov	sp, r7
 800a188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a18c:	4770      	bx	lr
 800a18e:	bf00      	nop
 800a190:	200051dc 	.word	0x200051dc

0800a194 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800a194:	b580      	push	{r7, lr}
 800a196:	b082      	sub	sp, #8
 800a198:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a19a:	f3ef 8305 	mrs	r3, IPSR
 800a19e:	603b      	str	r3, [r7, #0]
  return(result);
 800a1a0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d003      	beq.n	800a1ae <osKernelStart+0x1a>
    stat = osErrorISR;
 800a1a6:	f06f 0305 	mvn.w	r3, #5
 800a1aa:	607b      	str	r3, [r7, #4]
 800a1ac:	e010      	b.n	800a1d0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800a1ae:	4b0b      	ldr	r3, [pc, #44]	@ (800a1dc <osKernelStart+0x48>)
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	2b01      	cmp	r3, #1
 800a1b4:	d109      	bne.n	800a1ca <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800a1b6:	f7ff ffbf 	bl	800a138 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800a1ba:	4b08      	ldr	r3, [pc, #32]	@ (800a1dc <osKernelStart+0x48>)
 800a1bc:	2202      	movs	r2, #2
 800a1be:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800a1c0:	f001 f87a 	bl	800b2b8 <vTaskStartScheduler>
      stat = osOK;
 800a1c4:	2300      	movs	r3, #0
 800a1c6:	607b      	str	r3, [r7, #4]
 800a1c8:	e002      	b.n	800a1d0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800a1ca:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a1ce:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a1d0:	687b      	ldr	r3, [r7, #4]
}
 800a1d2:	4618      	mov	r0, r3
 800a1d4:	3708      	adds	r7, #8
 800a1d6:	46bd      	mov	sp, r7
 800a1d8:	bd80      	pop	{r7, pc}
 800a1da:	bf00      	nop
 800a1dc:	200051dc 	.word	0x200051dc

0800a1e0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800a1e0:	b580      	push	{r7, lr}
 800a1e2:	b08e      	sub	sp, #56	@ 0x38
 800a1e4:	af04      	add	r7, sp, #16
 800a1e6:	60f8      	str	r0, [r7, #12]
 800a1e8:	60b9      	str	r1, [r7, #8]
 800a1ea:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800a1ec:	2300      	movs	r3, #0
 800a1ee:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a1f0:	f3ef 8305 	mrs	r3, IPSR
 800a1f4:	617b      	str	r3, [r7, #20]
  return(result);
 800a1f6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d17e      	bne.n	800a2fa <osThreadNew+0x11a>
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d07b      	beq.n	800a2fa <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800a202:	2380      	movs	r3, #128	@ 0x80
 800a204:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800a206:	2318      	movs	r3, #24
 800a208:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800a20a:	2300      	movs	r3, #0
 800a20c:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800a20e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a212:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	2b00      	cmp	r3, #0
 800a218:	d045      	beq.n	800a2a6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d002      	beq.n	800a228 <osThreadNew+0x48>
        name = attr->name;
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	699b      	ldr	r3, [r3, #24]
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d002      	beq.n	800a236 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	699b      	ldr	r3, [r3, #24]
 800a234:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800a236:	69fb      	ldr	r3, [r7, #28]
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d008      	beq.n	800a24e <osThreadNew+0x6e>
 800a23c:	69fb      	ldr	r3, [r7, #28]
 800a23e:	2b38      	cmp	r3, #56	@ 0x38
 800a240:	d805      	bhi.n	800a24e <osThreadNew+0x6e>
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	685b      	ldr	r3, [r3, #4]
 800a246:	f003 0301 	and.w	r3, r3, #1
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d001      	beq.n	800a252 <osThreadNew+0x72>
        return (NULL);
 800a24e:	2300      	movs	r3, #0
 800a250:	e054      	b.n	800a2fc <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	695b      	ldr	r3, [r3, #20]
 800a256:	2b00      	cmp	r3, #0
 800a258:	d003      	beq.n	800a262 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	695b      	ldr	r3, [r3, #20]
 800a25e:	089b      	lsrs	r3, r3, #2
 800a260:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	689b      	ldr	r3, [r3, #8]
 800a266:	2b00      	cmp	r3, #0
 800a268:	d00e      	beq.n	800a288 <osThreadNew+0xa8>
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	68db      	ldr	r3, [r3, #12]
 800a26e:	2b5b      	cmp	r3, #91	@ 0x5b
 800a270:	d90a      	bls.n	800a288 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a276:	2b00      	cmp	r3, #0
 800a278:	d006      	beq.n	800a288 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	695b      	ldr	r3, [r3, #20]
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d002      	beq.n	800a288 <osThreadNew+0xa8>
        mem = 1;
 800a282:	2301      	movs	r3, #1
 800a284:	61bb      	str	r3, [r7, #24]
 800a286:	e010      	b.n	800a2aa <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	689b      	ldr	r3, [r3, #8]
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d10c      	bne.n	800a2aa <osThreadNew+0xca>
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	68db      	ldr	r3, [r3, #12]
 800a294:	2b00      	cmp	r3, #0
 800a296:	d108      	bne.n	800a2aa <osThreadNew+0xca>
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	691b      	ldr	r3, [r3, #16]
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d104      	bne.n	800a2aa <osThreadNew+0xca>
          mem = 0;
 800a2a0:	2300      	movs	r3, #0
 800a2a2:	61bb      	str	r3, [r7, #24]
 800a2a4:	e001      	b.n	800a2aa <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800a2a6:	2300      	movs	r3, #0
 800a2a8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800a2aa:	69bb      	ldr	r3, [r7, #24]
 800a2ac:	2b01      	cmp	r3, #1
 800a2ae:	d110      	bne.n	800a2d2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800a2b4:	687a      	ldr	r2, [r7, #4]
 800a2b6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a2b8:	9202      	str	r2, [sp, #8]
 800a2ba:	9301      	str	r3, [sp, #4]
 800a2bc:	69fb      	ldr	r3, [r7, #28]
 800a2be:	9300      	str	r3, [sp, #0]
 800a2c0:	68bb      	ldr	r3, [r7, #8]
 800a2c2:	6a3a      	ldr	r2, [r7, #32]
 800a2c4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a2c6:	68f8      	ldr	r0, [r7, #12]
 800a2c8:	f000 fe1a 	bl	800af00 <xTaskCreateStatic>
 800a2cc:	4603      	mov	r3, r0
 800a2ce:	613b      	str	r3, [r7, #16]
 800a2d0:	e013      	b.n	800a2fa <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800a2d2:	69bb      	ldr	r3, [r7, #24]
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d110      	bne.n	800a2fa <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800a2d8:	6a3b      	ldr	r3, [r7, #32]
 800a2da:	b29a      	uxth	r2, r3
 800a2dc:	f107 0310 	add.w	r3, r7, #16
 800a2e0:	9301      	str	r3, [sp, #4]
 800a2e2:	69fb      	ldr	r3, [r7, #28]
 800a2e4:	9300      	str	r3, [sp, #0]
 800a2e6:	68bb      	ldr	r3, [r7, #8]
 800a2e8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a2ea:	68f8      	ldr	r0, [r7, #12]
 800a2ec:	f000 fe68 	bl	800afc0 <xTaskCreate>
 800a2f0:	4603      	mov	r3, r0
 800a2f2:	2b01      	cmp	r3, #1
 800a2f4:	d001      	beq.n	800a2fa <osThreadNew+0x11a>
            hTask = NULL;
 800a2f6:	2300      	movs	r3, #0
 800a2f8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800a2fa:	693b      	ldr	r3, [r7, #16]
}
 800a2fc:	4618      	mov	r0, r3
 800a2fe:	3728      	adds	r7, #40	@ 0x28
 800a300:	46bd      	mov	sp, r7
 800a302:	bd80      	pop	{r7, pc}

0800a304 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800a304:	b580      	push	{r7, lr}
 800a306:	b084      	sub	sp, #16
 800a308:	af00      	add	r7, sp, #0
 800a30a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a30c:	f3ef 8305 	mrs	r3, IPSR
 800a310:	60bb      	str	r3, [r7, #8]
  return(result);
 800a312:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a314:	2b00      	cmp	r3, #0
 800a316:	d003      	beq.n	800a320 <osDelay+0x1c>
    stat = osErrorISR;
 800a318:	f06f 0305 	mvn.w	r3, #5
 800a31c:	60fb      	str	r3, [r7, #12]
 800a31e:	e007      	b.n	800a330 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800a320:	2300      	movs	r3, #0
 800a322:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	2b00      	cmp	r3, #0
 800a328:	d002      	beq.n	800a330 <osDelay+0x2c>
      vTaskDelay(ticks);
 800a32a:	6878      	ldr	r0, [r7, #4]
 800a32c:	f000 ff8e 	bl	800b24c <vTaskDelay>
    }
  }

  return (stat);
 800a330:	68fb      	ldr	r3, [r7, #12]
}
 800a332:	4618      	mov	r0, r3
 800a334:	3710      	adds	r7, #16
 800a336:	46bd      	mov	sp, r7
 800a338:	bd80      	pop	{r7, pc}
	...

0800a33c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800a33c:	b480      	push	{r7}
 800a33e:	b085      	sub	sp, #20
 800a340:	af00      	add	r7, sp, #0
 800a342:	60f8      	str	r0, [r7, #12]
 800a344:	60b9      	str	r1, [r7, #8]
 800a346:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	4a07      	ldr	r2, [pc, #28]	@ (800a368 <vApplicationGetIdleTaskMemory+0x2c>)
 800a34c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a34e:	68bb      	ldr	r3, [r7, #8]
 800a350:	4a06      	ldr	r2, [pc, #24]	@ (800a36c <vApplicationGetIdleTaskMemory+0x30>)
 800a352:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	2280      	movs	r2, #128	@ 0x80
 800a358:	601a      	str	r2, [r3, #0]
}
 800a35a:	bf00      	nop
 800a35c:	3714      	adds	r7, #20
 800a35e:	46bd      	mov	sp, r7
 800a360:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a364:	4770      	bx	lr
 800a366:	bf00      	nop
 800a368:	200051e0 	.word	0x200051e0
 800a36c:	2000523c 	.word	0x2000523c

0800a370 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800a370:	b480      	push	{r7}
 800a372:	b085      	sub	sp, #20
 800a374:	af00      	add	r7, sp, #0
 800a376:	60f8      	str	r0, [r7, #12]
 800a378:	60b9      	str	r1, [r7, #8]
 800a37a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	4a07      	ldr	r2, [pc, #28]	@ (800a39c <vApplicationGetTimerTaskMemory+0x2c>)
 800a380:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800a382:	68bb      	ldr	r3, [r7, #8]
 800a384:	4a06      	ldr	r2, [pc, #24]	@ (800a3a0 <vApplicationGetTimerTaskMemory+0x30>)
 800a386:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a38e:	601a      	str	r2, [r3, #0]
}
 800a390:	bf00      	nop
 800a392:	3714      	adds	r7, #20
 800a394:	46bd      	mov	sp, r7
 800a396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a39a:	4770      	bx	lr
 800a39c:	2000543c 	.word	0x2000543c
 800a3a0:	20005498 	.word	0x20005498

0800a3a4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a3a4:	b480      	push	{r7}
 800a3a6:	b083      	sub	sp, #12
 800a3a8:	af00      	add	r7, sp, #0
 800a3aa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	f103 0208 	add.w	r2, r3, #8
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a3bc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	f103 0208 	add.w	r2, r3, #8
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	f103 0208 	add.w	r2, r3, #8
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	2200      	movs	r2, #0
 800a3d6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a3d8:	bf00      	nop
 800a3da:	370c      	adds	r7, #12
 800a3dc:	46bd      	mov	sp, r7
 800a3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e2:	4770      	bx	lr

0800a3e4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a3e4:	b480      	push	{r7}
 800a3e6:	b083      	sub	sp, #12
 800a3e8:	af00      	add	r7, sp, #0
 800a3ea:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	2200      	movs	r2, #0
 800a3f0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a3f2:	bf00      	nop
 800a3f4:	370c      	adds	r7, #12
 800a3f6:	46bd      	mov	sp, r7
 800a3f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3fc:	4770      	bx	lr

0800a3fe <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a3fe:	b480      	push	{r7}
 800a400:	b085      	sub	sp, #20
 800a402:	af00      	add	r7, sp, #0
 800a404:	6078      	str	r0, [r7, #4]
 800a406:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	685b      	ldr	r3, [r3, #4]
 800a40c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a40e:	683b      	ldr	r3, [r7, #0]
 800a410:	68fa      	ldr	r2, [r7, #12]
 800a412:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	689a      	ldr	r2, [r3, #8]
 800a418:	683b      	ldr	r3, [r7, #0]
 800a41a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	689b      	ldr	r3, [r3, #8]
 800a420:	683a      	ldr	r2, [r7, #0]
 800a422:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	683a      	ldr	r2, [r7, #0]
 800a428:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a42a:	683b      	ldr	r3, [r7, #0]
 800a42c:	687a      	ldr	r2, [r7, #4]
 800a42e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	1c5a      	adds	r2, r3, #1
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	601a      	str	r2, [r3, #0]
}
 800a43a:	bf00      	nop
 800a43c:	3714      	adds	r7, #20
 800a43e:	46bd      	mov	sp, r7
 800a440:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a444:	4770      	bx	lr

0800a446 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a446:	b480      	push	{r7}
 800a448:	b085      	sub	sp, #20
 800a44a:	af00      	add	r7, sp, #0
 800a44c:	6078      	str	r0, [r7, #4]
 800a44e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a450:	683b      	ldr	r3, [r7, #0]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a456:	68bb      	ldr	r3, [r7, #8]
 800a458:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a45c:	d103      	bne.n	800a466 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	691b      	ldr	r3, [r3, #16]
 800a462:	60fb      	str	r3, [r7, #12]
 800a464:	e00c      	b.n	800a480 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	3308      	adds	r3, #8
 800a46a:	60fb      	str	r3, [r7, #12]
 800a46c:	e002      	b.n	800a474 <vListInsert+0x2e>
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	685b      	ldr	r3, [r3, #4]
 800a472:	60fb      	str	r3, [r7, #12]
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	685b      	ldr	r3, [r3, #4]
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	68ba      	ldr	r2, [r7, #8]
 800a47c:	429a      	cmp	r2, r3
 800a47e:	d2f6      	bcs.n	800a46e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	685a      	ldr	r2, [r3, #4]
 800a484:	683b      	ldr	r3, [r7, #0]
 800a486:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a488:	683b      	ldr	r3, [r7, #0]
 800a48a:	685b      	ldr	r3, [r3, #4]
 800a48c:	683a      	ldr	r2, [r7, #0]
 800a48e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a490:	683b      	ldr	r3, [r7, #0]
 800a492:	68fa      	ldr	r2, [r7, #12]
 800a494:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	683a      	ldr	r2, [r7, #0]
 800a49a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a49c:	683b      	ldr	r3, [r7, #0]
 800a49e:	687a      	ldr	r2, [r7, #4]
 800a4a0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	1c5a      	adds	r2, r3, #1
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	601a      	str	r2, [r3, #0]
}
 800a4ac:	bf00      	nop
 800a4ae:	3714      	adds	r7, #20
 800a4b0:	46bd      	mov	sp, r7
 800a4b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b6:	4770      	bx	lr

0800a4b8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a4b8:	b480      	push	{r7}
 800a4ba:	b085      	sub	sp, #20
 800a4bc:	af00      	add	r7, sp, #0
 800a4be:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	691b      	ldr	r3, [r3, #16]
 800a4c4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	685b      	ldr	r3, [r3, #4]
 800a4ca:	687a      	ldr	r2, [r7, #4]
 800a4cc:	6892      	ldr	r2, [r2, #8]
 800a4ce:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	689b      	ldr	r3, [r3, #8]
 800a4d4:	687a      	ldr	r2, [r7, #4]
 800a4d6:	6852      	ldr	r2, [r2, #4]
 800a4d8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	685b      	ldr	r3, [r3, #4]
 800a4de:	687a      	ldr	r2, [r7, #4]
 800a4e0:	429a      	cmp	r2, r3
 800a4e2:	d103      	bne.n	800a4ec <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	689a      	ldr	r2, [r3, #8]
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	2200      	movs	r2, #0
 800a4f0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	1e5a      	subs	r2, r3, #1
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	681b      	ldr	r3, [r3, #0]
}
 800a500:	4618      	mov	r0, r3
 800a502:	3714      	adds	r7, #20
 800a504:	46bd      	mov	sp, r7
 800a506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a50a:	4770      	bx	lr

0800a50c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a50c:	b580      	push	{r7, lr}
 800a50e:	b084      	sub	sp, #16
 800a510:	af00      	add	r7, sp, #0
 800a512:	6078      	str	r0, [r7, #4]
 800a514:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d10b      	bne.n	800a538 <xQueueGenericReset+0x2c>
	__asm volatile
 800a520:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a524:	f383 8811 	msr	BASEPRI, r3
 800a528:	f3bf 8f6f 	isb	sy
 800a52c:	f3bf 8f4f 	dsb	sy
 800a530:	60bb      	str	r3, [r7, #8]
}
 800a532:	bf00      	nop
 800a534:	bf00      	nop
 800a536:	e7fd      	b.n	800a534 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a538:	f002 f89e 	bl	800c678 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	681a      	ldr	r2, [r3, #0]
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a544:	68f9      	ldr	r1, [r7, #12]
 800a546:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800a548:	fb01 f303 	mul.w	r3, r1, r3
 800a54c:	441a      	add	r2, r3
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	2200      	movs	r2, #0
 800a556:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	681a      	ldr	r2, [r3, #0]
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	681a      	ldr	r2, [r3, #0]
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a568:	3b01      	subs	r3, #1
 800a56a:	68f9      	ldr	r1, [r7, #12]
 800a56c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800a56e:	fb01 f303 	mul.w	r3, r1, r3
 800a572:	441a      	add	r2, r3
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	22ff      	movs	r2, #255	@ 0xff
 800a57c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	22ff      	movs	r2, #255	@ 0xff
 800a584:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800a588:	683b      	ldr	r3, [r7, #0]
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d114      	bne.n	800a5b8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	691b      	ldr	r3, [r3, #16]
 800a592:	2b00      	cmp	r3, #0
 800a594:	d01a      	beq.n	800a5cc <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	3310      	adds	r3, #16
 800a59a:	4618      	mov	r0, r3
 800a59c:	f001 f91a 	bl	800b7d4 <xTaskRemoveFromEventList>
 800a5a0:	4603      	mov	r3, r0
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d012      	beq.n	800a5cc <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a5a6:	4b0d      	ldr	r3, [pc, #52]	@ (800a5dc <xQueueGenericReset+0xd0>)
 800a5a8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a5ac:	601a      	str	r2, [r3, #0]
 800a5ae:	f3bf 8f4f 	dsb	sy
 800a5b2:	f3bf 8f6f 	isb	sy
 800a5b6:	e009      	b.n	800a5cc <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	3310      	adds	r3, #16
 800a5bc:	4618      	mov	r0, r3
 800a5be:	f7ff fef1 	bl	800a3a4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	3324      	adds	r3, #36	@ 0x24
 800a5c6:	4618      	mov	r0, r3
 800a5c8:	f7ff feec 	bl	800a3a4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a5cc:	f002 f886 	bl	800c6dc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a5d0:	2301      	movs	r3, #1
}
 800a5d2:	4618      	mov	r0, r3
 800a5d4:	3710      	adds	r7, #16
 800a5d6:	46bd      	mov	sp, r7
 800a5d8:	bd80      	pop	{r7, pc}
 800a5da:	bf00      	nop
 800a5dc:	e000ed04 	.word	0xe000ed04

0800a5e0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a5e0:	b580      	push	{r7, lr}
 800a5e2:	b08e      	sub	sp, #56	@ 0x38
 800a5e4:	af02      	add	r7, sp, #8
 800a5e6:	60f8      	str	r0, [r7, #12]
 800a5e8:	60b9      	str	r1, [r7, #8]
 800a5ea:	607a      	str	r2, [r7, #4]
 800a5ec:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d10b      	bne.n	800a60c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800a5f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5f8:	f383 8811 	msr	BASEPRI, r3
 800a5fc:	f3bf 8f6f 	isb	sy
 800a600:	f3bf 8f4f 	dsb	sy
 800a604:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a606:	bf00      	nop
 800a608:	bf00      	nop
 800a60a:	e7fd      	b.n	800a608 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a60c:	683b      	ldr	r3, [r7, #0]
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d10b      	bne.n	800a62a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800a612:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a616:	f383 8811 	msr	BASEPRI, r3
 800a61a:	f3bf 8f6f 	isb	sy
 800a61e:	f3bf 8f4f 	dsb	sy
 800a622:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a624:	bf00      	nop
 800a626:	bf00      	nop
 800a628:	e7fd      	b.n	800a626 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d002      	beq.n	800a636 <xQueueGenericCreateStatic+0x56>
 800a630:	68bb      	ldr	r3, [r7, #8]
 800a632:	2b00      	cmp	r3, #0
 800a634:	d001      	beq.n	800a63a <xQueueGenericCreateStatic+0x5a>
 800a636:	2301      	movs	r3, #1
 800a638:	e000      	b.n	800a63c <xQueueGenericCreateStatic+0x5c>
 800a63a:	2300      	movs	r3, #0
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d10b      	bne.n	800a658 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800a640:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a644:	f383 8811 	msr	BASEPRI, r3
 800a648:	f3bf 8f6f 	isb	sy
 800a64c:	f3bf 8f4f 	dsb	sy
 800a650:	623b      	str	r3, [r7, #32]
}
 800a652:	bf00      	nop
 800a654:	bf00      	nop
 800a656:	e7fd      	b.n	800a654 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d102      	bne.n	800a664 <xQueueGenericCreateStatic+0x84>
 800a65e:	68bb      	ldr	r3, [r7, #8]
 800a660:	2b00      	cmp	r3, #0
 800a662:	d101      	bne.n	800a668 <xQueueGenericCreateStatic+0x88>
 800a664:	2301      	movs	r3, #1
 800a666:	e000      	b.n	800a66a <xQueueGenericCreateStatic+0x8a>
 800a668:	2300      	movs	r3, #0
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d10b      	bne.n	800a686 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800a66e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a672:	f383 8811 	msr	BASEPRI, r3
 800a676:	f3bf 8f6f 	isb	sy
 800a67a:	f3bf 8f4f 	dsb	sy
 800a67e:	61fb      	str	r3, [r7, #28]
}
 800a680:	bf00      	nop
 800a682:	bf00      	nop
 800a684:	e7fd      	b.n	800a682 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a686:	2350      	movs	r3, #80	@ 0x50
 800a688:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a68a:	697b      	ldr	r3, [r7, #20]
 800a68c:	2b50      	cmp	r3, #80	@ 0x50
 800a68e:	d00b      	beq.n	800a6a8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800a690:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a694:	f383 8811 	msr	BASEPRI, r3
 800a698:	f3bf 8f6f 	isb	sy
 800a69c:	f3bf 8f4f 	dsb	sy
 800a6a0:	61bb      	str	r3, [r7, #24]
}
 800a6a2:	bf00      	nop
 800a6a4:	bf00      	nop
 800a6a6:	e7fd      	b.n	800a6a4 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a6a8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a6aa:	683b      	ldr	r3, [r7, #0]
 800a6ac:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800a6ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d00d      	beq.n	800a6d0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a6b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a6b6:	2201      	movs	r2, #1
 800a6b8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a6bc:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800a6c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a6c2:	9300      	str	r3, [sp, #0]
 800a6c4:	4613      	mov	r3, r2
 800a6c6:	687a      	ldr	r2, [r7, #4]
 800a6c8:	68b9      	ldr	r1, [r7, #8]
 800a6ca:	68f8      	ldr	r0, [r7, #12]
 800a6cc:	f000 f805 	bl	800a6da <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a6d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800a6d2:	4618      	mov	r0, r3
 800a6d4:	3730      	adds	r7, #48	@ 0x30
 800a6d6:	46bd      	mov	sp, r7
 800a6d8:	bd80      	pop	{r7, pc}

0800a6da <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a6da:	b580      	push	{r7, lr}
 800a6dc:	b084      	sub	sp, #16
 800a6de:	af00      	add	r7, sp, #0
 800a6e0:	60f8      	str	r0, [r7, #12]
 800a6e2:	60b9      	str	r1, [r7, #8]
 800a6e4:	607a      	str	r2, [r7, #4]
 800a6e6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a6e8:	68bb      	ldr	r3, [r7, #8]
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d103      	bne.n	800a6f6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a6ee:	69bb      	ldr	r3, [r7, #24]
 800a6f0:	69ba      	ldr	r2, [r7, #24]
 800a6f2:	601a      	str	r2, [r3, #0]
 800a6f4:	e002      	b.n	800a6fc <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a6f6:	69bb      	ldr	r3, [r7, #24]
 800a6f8:	687a      	ldr	r2, [r7, #4]
 800a6fa:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a6fc:	69bb      	ldr	r3, [r7, #24]
 800a6fe:	68fa      	ldr	r2, [r7, #12]
 800a700:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a702:	69bb      	ldr	r3, [r7, #24]
 800a704:	68ba      	ldr	r2, [r7, #8]
 800a706:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a708:	2101      	movs	r1, #1
 800a70a:	69b8      	ldr	r0, [r7, #24]
 800a70c:	f7ff fefe 	bl	800a50c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a710:	69bb      	ldr	r3, [r7, #24]
 800a712:	78fa      	ldrb	r2, [r7, #3]
 800a714:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a718:	bf00      	nop
 800a71a:	3710      	adds	r7, #16
 800a71c:	46bd      	mov	sp, r7
 800a71e:	bd80      	pop	{r7, pc}

0800a720 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a720:	b580      	push	{r7, lr}
 800a722:	b08e      	sub	sp, #56	@ 0x38
 800a724:	af00      	add	r7, sp, #0
 800a726:	60f8      	str	r0, [r7, #12]
 800a728:	60b9      	str	r1, [r7, #8]
 800a72a:	607a      	str	r2, [r7, #4]
 800a72c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a72e:	2300      	movs	r3, #0
 800a730:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800a736:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d10b      	bne.n	800a754 <xQueueGenericSend+0x34>
	__asm volatile
 800a73c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a740:	f383 8811 	msr	BASEPRI, r3
 800a744:	f3bf 8f6f 	isb	sy
 800a748:	f3bf 8f4f 	dsb	sy
 800a74c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a74e:	bf00      	nop
 800a750:	bf00      	nop
 800a752:	e7fd      	b.n	800a750 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a754:	68bb      	ldr	r3, [r7, #8]
 800a756:	2b00      	cmp	r3, #0
 800a758:	d103      	bne.n	800a762 <xQueueGenericSend+0x42>
 800a75a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a75c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d101      	bne.n	800a766 <xQueueGenericSend+0x46>
 800a762:	2301      	movs	r3, #1
 800a764:	e000      	b.n	800a768 <xQueueGenericSend+0x48>
 800a766:	2300      	movs	r3, #0
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d10b      	bne.n	800a784 <xQueueGenericSend+0x64>
	__asm volatile
 800a76c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a770:	f383 8811 	msr	BASEPRI, r3
 800a774:	f3bf 8f6f 	isb	sy
 800a778:	f3bf 8f4f 	dsb	sy
 800a77c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a77e:	bf00      	nop
 800a780:	bf00      	nop
 800a782:	e7fd      	b.n	800a780 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a784:	683b      	ldr	r3, [r7, #0]
 800a786:	2b02      	cmp	r3, #2
 800a788:	d103      	bne.n	800a792 <xQueueGenericSend+0x72>
 800a78a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a78c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a78e:	2b01      	cmp	r3, #1
 800a790:	d101      	bne.n	800a796 <xQueueGenericSend+0x76>
 800a792:	2301      	movs	r3, #1
 800a794:	e000      	b.n	800a798 <xQueueGenericSend+0x78>
 800a796:	2300      	movs	r3, #0
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d10b      	bne.n	800a7b4 <xQueueGenericSend+0x94>
	__asm volatile
 800a79c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7a0:	f383 8811 	msr	BASEPRI, r3
 800a7a4:	f3bf 8f6f 	isb	sy
 800a7a8:	f3bf 8f4f 	dsb	sy
 800a7ac:	623b      	str	r3, [r7, #32]
}
 800a7ae:	bf00      	nop
 800a7b0:	bf00      	nop
 800a7b2:	e7fd      	b.n	800a7b0 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a7b4:	f001 f9f6 	bl	800bba4 <xTaskGetSchedulerState>
 800a7b8:	4603      	mov	r3, r0
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d102      	bne.n	800a7c4 <xQueueGenericSend+0xa4>
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d101      	bne.n	800a7c8 <xQueueGenericSend+0xa8>
 800a7c4:	2301      	movs	r3, #1
 800a7c6:	e000      	b.n	800a7ca <xQueueGenericSend+0xaa>
 800a7c8:	2300      	movs	r3, #0
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d10b      	bne.n	800a7e6 <xQueueGenericSend+0xc6>
	__asm volatile
 800a7ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7d2:	f383 8811 	msr	BASEPRI, r3
 800a7d6:	f3bf 8f6f 	isb	sy
 800a7da:	f3bf 8f4f 	dsb	sy
 800a7de:	61fb      	str	r3, [r7, #28]
}
 800a7e0:	bf00      	nop
 800a7e2:	bf00      	nop
 800a7e4:	e7fd      	b.n	800a7e2 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a7e6:	f001 ff47 	bl	800c678 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a7ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7ec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a7ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a7f2:	429a      	cmp	r2, r3
 800a7f4:	d302      	bcc.n	800a7fc <xQueueGenericSend+0xdc>
 800a7f6:	683b      	ldr	r3, [r7, #0]
 800a7f8:	2b02      	cmp	r3, #2
 800a7fa:	d129      	bne.n	800a850 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a7fc:	683a      	ldr	r2, [r7, #0]
 800a7fe:	68b9      	ldr	r1, [r7, #8]
 800a800:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a802:	f000 fa0f 	bl	800ac24 <prvCopyDataToQueue>
 800a806:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a808:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a80a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d010      	beq.n	800a832 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a810:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a812:	3324      	adds	r3, #36	@ 0x24
 800a814:	4618      	mov	r0, r3
 800a816:	f000 ffdd 	bl	800b7d4 <xTaskRemoveFromEventList>
 800a81a:	4603      	mov	r3, r0
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d013      	beq.n	800a848 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a820:	4b3f      	ldr	r3, [pc, #252]	@ (800a920 <xQueueGenericSend+0x200>)
 800a822:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a826:	601a      	str	r2, [r3, #0]
 800a828:	f3bf 8f4f 	dsb	sy
 800a82c:	f3bf 8f6f 	isb	sy
 800a830:	e00a      	b.n	800a848 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a832:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a834:	2b00      	cmp	r3, #0
 800a836:	d007      	beq.n	800a848 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a838:	4b39      	ldr	r3, [pc, #228]	@ (800a920 <xQueueGenericSend+0x200>)
 800a83a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a83e:	601a      	str	r2, [r3, #0]
 800a840:	f3bf 8f4f 	dsb	sy
 800a844:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a848:	f001 ff48 	bl	800c6dc <vPortExitCritical>
				return pdPASS;
 800a84c:	2301      	movs	r3, #1
 800a84e:	e063      	b.n	800a918 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	2b00      	cmp	r3, #0
 800a854:	d103      	bne.n	800a85e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a856:	f001 ff41 	bl	800c6dc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a85a:	2300      	movs	r3, #0
 800a85c:	e05c      	b.n	800a918 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a85e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a860:	2b00      	cmp	r3, #0
 800a862:	d106      	bne.n	800a872 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a864:	f107 0314 	add.w	r3, r7, #20
 800a868:	4618      	mov	r0, r3
 800a86a:	f001 f83f 	bl	800b8ec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a86e:	2301      	movs	r3, #1
 800a870:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a872:	f001 ff33 	bl	800c6dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a876:	f000 fd87 	bl	800b388 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a87a:	f001 fefd 	bl	800c678 <vPortEnterCritical>
 800a87e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a880:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a884:	b25b      	sxtb	r3, r3
 800a886:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a88a:	d103      	bne.n	800a894 <xQueueGenericSend+0x174>
 800a88c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a88e:	2200      	movs	r2, #0
 800a890:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a894:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a896:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a89a:	b25b      	sxtb	r3, r3
 800a89c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a8a0:	d103      	bne.n	800a8aa <xQueueGenericSend+0x18a>
 800a8a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8a4:	2200      	movs	r2, #0
 800a8a6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a8aa:	f001 ff17 	bl	800c6dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a8ae:	1d3a      	adds	r2, r7, #4
 800a8b0:	f107 0314 	add.w	r3, r7, #20
 800a8b4:	4611      	mov	r1, r2
 800a8b6:	4618      	mov	r0, r3
 800a8b8:	f001 f82e 	bl	800b918 <xTaskCheckForTimeOut>
 800a8bc:	4603      	mov	r3, r0
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d124      	bne.n	800a90c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a8c2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a8c4:	f000 faa6 	bl	800ae14 <prvIsQueueFull>
 800a8c8:	4603      	mov	r3, r0
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d018      	beq.n	800a900 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a8ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8d0:	3310      	adds	r3, #16
 800a8d2:	687a      	ldr	r2, [r7, #4]
 800a8d4:	4611      	mov	r1, r2
 800a8d6:	4618      	mov	r0, r3
 800a8d8:	f000 ff2a 	bl	800b730 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a8dc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a8de:	f000 fa31 	bl	800ad44 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a8e2:	f000 fd5f 	bl	800b3a4 <xTaskResumeAll>
 800a8e6:	4603      	mov	r3, r0
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	f47f af7c 	bne.w	800a7e6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800a8ee:	4b0c      	ldr	r3, [pc, #48]	@ (800a920 <xQueueGenericSend+0x200>)
 800a8f0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a8f4:	601a      	str	r2, [r3, #0]
 800a8f6:	f3bf 8f4f 	dsb	sy
 800a8fa:	f3bf 8f6f 	isb	sy
 800a8fe:	e772      	b.n	800a7e6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a900:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a902:	f000 fa1f 	bl	800ad44 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a906:	f000 fd4d 	bl	800b3a4 <xTaskResumeAll>
 800a90a:	e76c      	b.n	800a7e6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a90c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a90e:	f000 fa19 	bl	800ad44 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a912:	f000 fd47 	bl	800b3a4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a916:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a918:	4618      	mov	r0, r3
 800a91a:	3738      	adds	r7, #56	@ 0x38
 800a91c:	46bd      	mov	sp, r7
 800a91e:	bd80      	pop	{r7, pc}
 800a920:	e000ed04 	.word	0xe000ed04

0800a924 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a924:	b580      	push	{r7, lr}
 800a926:	b090      	sub	sp, #64	@ 0x40
 800a928:	af00      	add	r7, sp, #0
 800a92a:	60f8      	str	r0, [r7, #12]
 800a92c:	60b9      	str	r1, [r7, #8]
 800a92e:	607a      	str	r2, [r7, #4]
 800a930:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800a936:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d10b      	bne.n	800a954 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800a93c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a940:	f383 8811 	msr	BASEPRI, r3
 800a944:	f3bf 8f6f 	isb	sy
 800a948:	f3bf 8f4f 	dsb	sy
 800a94c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a94e:	bf00      	nop
 800a950:	bf00      	nop
 800a952:	e7fd      	b.n	800a950 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a954:	68bb      	ldr	r3, [r7, #8]
 800a956:	2b00      	cmp	r3, #0
 800a958:	d103      	bne.n	800a962 <xQueueGenericSendFromISR+0x3e>
 800a95a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a95c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d101      	bne.n	800a966 <xQueueGenericSendFromISR+0x42>
 800a962:	2301      	movs	r3, #1
 800a964:	e000      	b.n	800a968 <xQueueGenericSendFromISR+0x44>
 800a966:	2300      	movs	r3, #0
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d10b      	bne.n	800a984 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800a96c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a970:	f383 8811 	msr	BASEPRI, r3
 800a974:	f3bf 8f6f 	isb	sy
 800a978:	f3bf 8f4f 	dsb	sy
 800a97c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a97e:	bf00      	nop
 800a980:	bf00      	nop
 800a982:	e7fd      	b.n	800a980 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a984:	683b      	ldr	r3, [r7, #0]
 800a986:	2b02      	cmp	r3, #2
 800a988:	d103      	bne.n	800a992 <xQueueGenericSendFromISR+0x6e>
 800a98a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a98c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a98e:	2b01      	cmp	r3, #1
 800a990:	d101      	bne.n	800a996 <xQueueGenericSendFromISR+0x72>
 800a992:	2301      	movs	r3, #1
 800a994:	e000      	b.n	800a998 <xQueueGenericSendFromISR+0x74>
 800a996:	2300      	movs	r3, #0
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d10b      	bne.n	800a9b4 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800a99c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9a0:	f383 8811 	msr	BASEPRI, r3
 800a9a4:	f3bf 8f6f 	isb	sy
 800a9a8:	f3bf 8f4f 	dsb	sy
 800a9ac:	623b      	str	r3, [r7, #32]
}
 800a9ae:	bf00      	nop
 800a9b0:	bf00      	nop
 800a9b2:	e7fd      	b.n	800a9b0 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a9b4:	f001 ff40 	bl	800c838 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a9b8:	f3ef 8211 	mrs	r2, BASEPRI
 800a9bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9c0:	f383 8811 	msr	BASEPRI, r3
 800a9c4:	f3bf 8f6f 	isb	sy
 800a9c8:	f3bf 8f4f 	dsb	sy
 800a9cc:	61fa      	str	r2, [r7, #28]
 800a9ce:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a9d0:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a9d2:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a9d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9d6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a9d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a9dc:	429a      	cmp	r2, r3
 800a9de:	d302      	bcc.n	800a9e6 <xQueueGenericSendFromISR+0xc2>
 800a9e0:	683b      	ldr	r3, [r7, #0]
 800a9e2:	2b02      	cmp	r3, #2
 800a9e4:	d12f      	bne.n	800aa46 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a9e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9e8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a9ec:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a9f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a9f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a9f6:	683a      	ldr	r2, [r7, #0]
 800a9f8:	68b9      	ldr	r1, [r7, #8]
 800a9fa:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800a9fc:	f000 f912 	bl	800ac24 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800aa00:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800aa04:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800aa08:	d112      	bne.n	800aa30 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800aa0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d016      	beq.n	800aa40 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800aa12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa14:	3324      	adds	r3, #36	@ 0x24
 800aa16:	4618      	mov	r0, r3
 800aa18:	f000 fedc 	bl	800b7d4 <xTaskRemoveFromEventList>
 800aa1c:	4603      	mov	r3, r0
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d00e      	beq.n	800aa40 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d00b      	beq.n	800aa40 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	2201      	movs	r2, #1
 800aa2c:	601a      	str	r2, [r3, #0]
 800aa2e:	e007      	b.n	800aa40 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800aa30:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800aa34:	3301      	adds	r3, #1
 800aa36:	b2db      	uxtb	r3, r3
 800aa38:	b25a      	sxtb	r2, r3
 800aa3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa3c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800aa40:	2301      	movs	r3, #1
 800aa42:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800aa44:	e001      	b.n	800aa4a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800aa46:	2300      	movs	r3, #0
 800aa48:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800aa4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa4c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800aa4e:	697b      	ldr	r3, [r7, #20]
 800aa50:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800aa54:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800aa56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800aa58:	4618      	mov	r0, r3
 800aa5a:	3740      	adds	r7, #64	@ 0x40
 800aa5c:	46bd      	mov	sp, r7
 800aa5e:	bd80      	pop	{r7, pc}

0800aa60 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800aa60:	b580      	push	{r7, lr}
 800aa62:	b08c      	sub	sp, #48	@ 0x30
 800aa64:	af00      	add	r7, sp, #0
 800aa66:	60f8      	str	r0, [r7, #12]
 800aa68:	60b9      	str	r1, [r7, #8]
 800aa6a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800aa6c:	2300      	movs	r3, #0
 800aa6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800aa74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d10b      	bne.n	800aa92 <xQueueReceive+0x32>
	__asm volatile
 800aa7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa7e:	f383 8811 	msr	BASEPRI, r3
 800aa82:	f3bf 8f6f 	isb	sy
 800aa86:	f3bf 8f4f 	dsb	sy
 800aa8a:	623b      	str	r3, [r7, #32]
}
 800aa8c:	bf00      	nop
 800aa8e:	bf00      	nop
 800aa90:	e7fd      	b.n	800aa8e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800aa92:	68bb      	ldr	r3, [r7, #8]
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d103      	bne.n	800aaa0 <xQueueReceive+0x40>
 800aa98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d101      	bne.n	800aaa4 <xQueueReceive+0x44>
 800aaa0:	2301      	movs	r3, #1
 800aaa2:	e000      	b.n	800aaa6 <xQueueReceive+0x46>
 800aaa4:	2300      	movs	r3, #0
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d10b      	bne.n	800aac2 <xQueueReceive+0x62>
	__asm volatile
 800aaaa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aaae:	f383 8811 	msr	BASEPRI, r3
 800aab2:	f3bf 8f6f 	isb	sy
 800aab6:	f3bf 8f4f 	dsb	sy
 800aaba:	61fb      	str	r3, [r7, #28]
}
 800aabc:	bf00      	nop
 800aabe:	bf00      	nop
 800aac0:	e7fd      	b.n	800aabe <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800aac2:	f001 f86f 	bl	800bba4 <xTaskGetSchedulerState>
 800aac6:	4603      	mov	r3, r0
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d102      	bne.n	800aad2 <xQueueReceive+0x72>
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d101      	bne.n	800aad6 <xQueueReceive+0x76>
 800aad2:	2301      	movs	r3, #1
 800aad4:	e000      	b.n	800aad8 <xQueueReceive+0x78>
 800aad6:	2300      	movs	r3, #0
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d10b      	bne.n	800aaf4 <xQueueReceive+0x94>
	__asm volatile
 800aadc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aae0:	f383 8811 	msr	BASEPRI, r3
 800aae4:	f3bf 8f6f 	isb	sy
 800aae8:	f3bf 8f4f 	dsb	sy
 800aaec:	61bb      	str	r3, [r7, #24]
}
 800aaee:	bf00      	nop
 800aaf0:	bf00      	nop
 800aaf2:	e7fd      	b.n	800aaf0 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800aaf4:	f001 fdc0 	bl	800c678 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800aaf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aafa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aafc:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800aafe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d01f      	beq.n	800ab44 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ab04:	68b9      	ldr	r1, [r7, #8]
 800ab06:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ab08:	f000 f8f6 	bl	800acf8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ab0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab0e:	1e5a      	subs	r2, r3, #1
 800ab10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab12:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ab14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab16:	691b      	ldr	r3, [r3, #16]
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d00f      	beq.n	800ab3c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ab1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab1e:	3310      	adds	r3, #16
 800ab20:	4618      	mov	r0, r3
 800ab22:	f000 fe57 	bl	800b7d4 <xTaskRemoveFromEventList>
 800ab26:	4603      	mov	r3, r0
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d007      	beq.n	800ab3c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ab2c:	4b3c      	ldr	r3, [pc, #240]	@ (800ac20 <xQueueReceive+0x1c0>)
 800ab2e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ab32:	601a      	str	r2, [r3, #0]
 800ab34:	f3bf 8f4f 	dsb	sy
 800ab38:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ab3c:	f001 fdce 	bl	800c6dc <vPortExitCritical>
				return pdPASS;
 800ab40:	2301      	movs	r3, #1
 800ab42:	e069      	b.n	800ac18 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d103      	bne.n	800ab52 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ab4a:	f001 fdc7 	bl	800c6dc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ab4e:	2300      	movs	r3, #0
 800ab50:	e062      	b.n	800ac18 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ab52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d106      	bne.n	800ab66 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ab58:	f107 0310 	add.w	r3, r7, #16
 800ab5c:	4618      	mov	r0, r3
 800ab5e:	f000 fec5 	bl	800b8ec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ab62:	2301      	movs	r3, #1
 800ab64:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ab66:	f001 fdb9 	bl	800c6dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ab6a:	f000 fc0d 	bl	800b388 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ab6e:	f001 fd83 	bl	800c678 <vPortEnterCritical>
 800ab72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab74:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ab78:	b25b      	sxtb	r3, r3
 800ab7a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ab7e:	d103      	bne.n	800ab88 <xQueueReceive+0x128>
 800ab80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab82:	2200      	movs	r2, #0
 800ab84:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ab88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab8a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ab8e:	b25b      	sxtb	r3, r3
 800ab90:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ab94:	d103      	bne.n	800ab9e <xQueueReceive+0x13e>
 800ab96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab98:	2200      	movs	r2, #0
 800ab9a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ab9e:	f001 fd9d 	bl	800c6dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800aba2:	1d3a      	adds	r2, r7, #4
 800aba4:	f107 0310 	add.w	r3, r7, #16
 800aba8:	4611      	mov	r1, r2
 800abaa:	4618      	mov	r0, r3
 800abac:	f000 feb4 	bl	800b918 <xTaskCheckForTimeOut>
 800abb0:	4603      	mov	r3, r0
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d123      	bne.n	800abfe <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800abb6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800abb8:	f000 f916 	bl	800ade8 <prvIsQueueEmpty>
 800abbc:	4603      	mov	r3, r0
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d017      	beq.n	800abf2 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800abc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800abc4:	3324      	adds	r3, #36	@ 0x24
 800abc6:	687a      	ldr	r2, [r7, #4]
 800abc8:	4611      	mov	r1, r2
 800abca:	4618      	mov	r0, r3
 800abcc:	f000 fdb0 	bl	800b730 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800abd0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800abd2:	f000 f8b7 	bl	800ad44 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800abd6:	f000 fbe5 	bl	800b3a4 <xTaskResumeAll>
 800abda:	4603      	mov	r3, r0
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d189      	bne.n	800aaf4 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800abe0:	4b0f      	ldr	r3, [pc, #60]	@ (800ac20 <xQueueReceive+0x1c0>)
 800abe2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800abe6:	601a      	str	r2, [r3, #0]
 800abe8:	f3bf 8f4f 	dsb	sy
 800abec:	f3bf 8f6f 	isb	sy
 800abf0:	e780      	b.n	800aaf4 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800abf2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800abf4:	f000 f8a6 	bl	800ad44 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800abf8:	f000 fbd4 	bl	800b3a4 <xTaskResumeAll>
 800abfc:	e77a      	b.n	800aaf4 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800abfe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ac00:	f000 f8a0 	bl	800ad44 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ac04:	f000 fbce 	bl	800b3a4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ac08:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ac0a:	f000 f8ed 	bl	800ade8 <prvIsQueueEmpty>
 800ac0e:	4603      	mov	r3, r0
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	f43f af6f 	beq.w	800aaf4 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ac16:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ac18:	4618      	mov	r0, r3
 800ac1a:	3730      	adds	r7, #48	@ 0x30
 800ac1c:	46bd      	mov	sp, r7
 800ac1e:	bd80      	pop	{r7, pc}
 800ac20:	e000ed04 	.word	0xe000ed04

0800ac24 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800ac24:	b580      	push	{r7, lr}
 800ac26:	b086      	sub	sp, #24
 800ac28:	af00      	add	r7, sp, #0
 800ac2a:	60f8      	str	r0, [r7, #12]
 800ac2c:	60b9      	str	r1, [r7, #8]
 800ac2e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800ac30:	2300      	movs	r3, #0
 800ac32:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac38:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d10d      	bne.n	800ac5e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d14d      	bne.n	800ace6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	689b      	ldr	r3, [r3, #8]
 800ac4e:	4618      	mov	r0, r3
 800ac50:	f000 ffc6 	bl	800bbe0 <xTaskPriorityDisinherit>
 800ac54:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	2200      	movs	r2, #0
 800ac5a:	609a      	str	r2, [r3, #8]
 800ac5c:	e043      	b.n	800ace6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d119      	bne.n	800ac98 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	6858      	ldr	r0, [r3, #4]
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ac6c:	461a      	mov	r2, r3
 800ac6e:	68b9      	ldr	r1, [r7, #8]
 800ac70:	f010 fc3d 	bl	801b4ee <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	685a      	ldr	r2, [r3, #4]
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ac7c:	441a      	add	r2, r3
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	685a      	ldr	r2, [r3, #4]
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	689b      	ldr	r3, [r3, #8]
 800ac8a:	429a      	cmp	r2, r3
 800ac8c:	d32b      	bcc.n	800ace6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	681a      	ldr	r2, [r3, #0]
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	605a      	str	r2, [r3, #4]
 800ac96:	e026      	b.n	800ace6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	68d8      	ldr	r0, [r3, #12]
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aca0:	461a      	mov	r2, r3
 800aca2:	68b9      	ldr	r1, [r7, #8]
 800aca4:	f010 fc23 	bl	801b4ee <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	68da      	ldr	r2, [r3, #12]
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800acb0:	425b      	negs	r3, r3
 800acb2:	441a      	add	r2, r3
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	68da      	ldr	r2, [r3, #12]
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	429a      	cmp	r2, r3
 800acc2:	d207      	bcs.n	800acd4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	689a      	ldr	r2, [r3, #8]
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800accc:	425b      	negs	r3, r3
 800acce:	441a      	add	r2, r3
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	2b02      	cmp	r3, #2
 800acd8:	d105      	bne.n	800ace6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800acda:	693b      	ldr	r3, [r7, #16]
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d002      	beq.n	800ace6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800ace0:	693b      	ldr	r3, [r7, #16]
 800ace2:	3b01      	subs	r3, #1
 800ace4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ace6:	693b      	ldr	r3, [r7, #16]
 800ace8:	1c5a      	adds	r2, r3, #1
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800acee:	697b      	ldr	r3, [r7, #20]
}
 800acf0:	4618      	mov	r0, r3
 800acf2:	3718      	adds	r7, #24
 800acf4:	46bd      	mov	sp, r7
 800acf6:	bd80      	pop	{r7, pc}

0800acf8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800acf8:	b580      	push	{r7, lr}
 800acfa:	b082      	sub	sp, #8
 800acfc:	af00      	add	r7, sp, #0
 800acfe:	6078      	str	r0, [r7, #4]
 800ad00:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d018      	beq.n	800ad3c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	68da      	ldr	r2, [r3, #12]
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad12:	441a      	add	r2, r3
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	68da      	ldr	r2, [r3, #12]
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	689b      	ldr	r3, [r3, #8]
 800ad20:	429a      	cmp	r2, r3
 800ad22:	d303      	bcc.n	800ad2c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	681a      	ldr	r2, [r3, #0]
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	68d9      	ldr	r1, [r3, #12]
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad34:	461a      	mov	r2, r3
 800ad36:	6838      	ldr	r0, [r7, #0]
 800ad38:	f010 fbd9 	bl	801b4ee <memcpy>
	}
}
 800ad3c:	bf00      	nop
 800ad3e:	3708      	adds	r7, #8
 800ad40:	46bd      	mov	sp, r7
 800ad42:	bd80      	pop	{r7, pc}

0800ad44 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800ad44:	b580      	push	{r7, lr}
 800ad46:	b084      	sub	sp, #16
 800ad48:	af00      	add	r7, sp, #0
 800ad4a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800ad4c:	f001 fc94 	bl	800c678 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ad56:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ad58:	e011      	b.n	800ad7e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d012      	beq.n	800ad88 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	3324      	adds	r3, #36	@ 0x24
 800ad66:	4618      	mov	r0, r3
 800ad68:	f000 fd34 	bl	800b7d4 <xTaskRemoveFromEventList>
 800ad6c:	4603      	mov	r3, r0
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d001      	beq.n	800ad76 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800ad72:	f000 fe35 	bl	800b9e0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800ad76:	7bfb      	ldrb	r3, [r7, #15]
 800ad78:	3b01      	subs	r3, #1
 800ad7a:	b2db      	uxtb	r3, r3
 800ad7c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ad7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	dce9      	bgt.n	800ad5a <prvUnlockQueue+0x16>
 800ad86:	e000      	b.n	800ad8a <prvUnlockQueue+0x46>
					break;
 800ad88:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	22ff      	movs	r2, #255	@ 0xff
 800ad8e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800ad92:	f001 fca3 	bl	800c6dc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800ad96:	f001 fc6f 	bl	800c678 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ada0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ada2:	e011      	b.n	800adc8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	691b      	ldr	r3, [r3, #16]
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d012      	beq.n	800add2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	3310      	adds	r3, #16
 800adb0:	4618      	mov	r0, r3
 800adb2:	f000 fd0f 	bl	800b7d4 <xTaskRemoveFromEventList>
 800adb6:	4603      	mov	r3, r0
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d001      	beq.n	800adc0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800adbc:	f000 fe10 	bl	800b9e0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800adc0:	7bbb      	ldrb	r3, [r7, #14]
 800adc2:	3b01      	subs	r3, #1
 800adc4:	b2db      	uxtb	r3, r3
 800adc6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800adc8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800adcc:	2b00      	cmp	r3, #0
 800adce:	dce9      	bgt.n	800ada4 <prvUnlockQueue+0x60>
 800add0:	e000      	b.n	800add4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800add2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	22ff      	movs	r2, #255	@ 0xff
 800add8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800addc:	f001 fc7e 	bl	800c6dc <vPortExitCritical>
}
 800ade0:	bf00      	nop
 800ade2:	3710      	adds	r7, #16
 800ade4:	46bd      	mov	sp, r7
 800ade6:	bd80      	pop	{r7, pc}

0800ade8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800ade8:	b580      	push	{r7, lr}
 800adea:	b084      	sub	sp, #16
 800adec:	af00      	add	r7, sp, #0
 800adee:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800adf0:	f001 fc42 	bl	800c678 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d102      	bne.n	800ae02 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800adfc:	2301      	movs	r3, #1
 800adfe:	60fb      	str	r3, [r7, #12]
 800ae00:	e001      	b.n	800ae06 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800ae02:	2300      	movs	r3, #0
 800ae04:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ae06:	f001 fc69 	bl	800c6dc <vPortExitCritical>

	return xReturn;
 800ae0a:	68fb      	ldr	r3, [r7, #12]
}
 800ae0c:	4618      	mov	r0, r3
 800ae0e:	3710      	adds	r7, #16
 800ae10:	46bd      	mov	sp, r7
 800ae12:	bd80      	pop	{r7, pc}

0800ae14 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800ae14:	b580      	push	{r7, lr}
 800ae16:	b084      	sub	sp, #16
 800ae18:	af00      	add	r7, sp, #0
 800ae1a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ae1c:	f001 fc2c 	bl	800c678 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ae28:	429a      	cmp	r2, r3
 800ae2a:	d102      	bne.n	800ae32 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800ae2c:	2301      	movs	r3, #1
 800ae2e:	60fb      	str	r3, [r7, #12]
 800ae30:	e001      	b.n	800ae36 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800ae32:	2300      	movs	r3, #0
 800ae34:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ae36:	f001 fc51 	bl	800c6dc <vPortExitCritical>

	return xReturn;
 800ae3a:	68fb      	ldr	r3, [r7, #12]
}
 800ae3c:	4618      	mov	r0, r3
 800ae3e:	3710      	adds	r7, #16
 800ae40:	46bd      	mov	sp, r7
 800ae42:	bd80      	pop	{r7, pc}

0800ae44 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800ae44:	b480      	push	{r7}
 800ae46:	b085      	sub	sp, #20
 800ae48:	af00      	add	r7, sp, #0
 800ae4a:	6078      	str	r0, [r7, #4]
 800ae4c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ae4e:	2300      	movs	r3, #0
 800ae50:	60fb      	str	r3, [r7, #12]
 800ae52:	e014      	b.n	800ae7e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800ae54:	4a0f      	ldr	r2, [pc, #60]	@ (800ae94 <vQueueAddToRegistry+0x50>)
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d10b      	bne.n	800ae78 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800ae60:	490c      	ldr	r1, [pc, #48]	@ (800ae94 <vQueueAddToRegistry+0x50>)
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	683a      	ldr	r2, [r7, #0]
 800ae66:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800ae6a:	4a0a      	ldr	r2, [pc, #40]	@ (800ae94 <vQueueAddToRegistry+0x50>)
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	00db      	lsls	r3, r3, #3
 800ae70:	4413      	add	r3, r2
 800ae72:	687a      	ldr	r2, [r7, #4]
 800ae74:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800ae76:	e006      	b.n	800ae86 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	3301      	adds	r3, #1
 800ae7c:	60fb      	str	r3, [r7, #12]
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	2b07      	cmp	r3, #7
 800ae82:	d9e7      	bls.n	800ae54 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800ae84:	bf00      	nop
 800ae86:	bf00      	nop
 800ae88:	3714      	adds	r7, #20
 800ae8a:	46bd      	mov	sp, r7
 800ae8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae90:	4770      	bx	lr
 800ae92:	bf00      	nop
 800ae94:	20005898 	.word	0x20005898

0800ae98 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ae98:	b580      	push	{r7, lr}
 800ae9a:	b086      	sub	sp, #24
 800ae9c:	af00      	add	r7, sp, #0
 800ae9e:	60f8      	str	r0, [r7, #12]
 800aea0:	60b9      	str	r1, [r7, #8]
 800aea2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800aea8:	f001 fbe6 	bl	800c678 <vPortEnterCritical>
 800aeac:	697b      	ldr	r3, [r7, #20]
 800aeae:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800aeb2:	b25b      	sxtb	r3, r3
 800aeb4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800aeb8:	d103      	bne.n	800aec2 <vQueueWaitForMessageRestricted+0x2a>
 800aeba:	697b      	ldr	r3, [r7, #20]
 800aebc:	2200      	movs	r2, #0
 800aebe:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800aec2:	697b      	ldr	r3, [r7, #20]
 800aec4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800aec8:	b25b      	sxtb	r3, r3
 800aeca:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800aece:	d103      	bne.n	800aed8 <vQueueWaitForMessageRestricted+0x40>
 800aed0:	697b      	ldr	r3, [r7, #20]
 800aed2:	2200      	movs	r2, #0
 800aed4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800aed8:	f001 fc00 	bl	800c6dc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800aedc:	697b      	ldr	r3, [r7, #20]
 800aede:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d106      	bne.n	800aef2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800aee4:	697b      	ldr	r3, [r7, #20]
 800aee6:	3324      	adds	r3, #36	@ 0x24
 800aee8:	687a      	ldr	r2, [r7, #4]
 800aeea:	68b9      	ldr	r1, [r7, #8]
 800aeec:	4618      	mov	r0, r3
 800aeee:	f000 fc45 	bl	800b77c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800aef2:	6978      	ldr	r0, [r7, #20]
 800aef4:	f7ff ff26 	bl	800ad44 <prvUnlockQueue>
	}
 800aef8:	bf00      	nop
 800aefa:	3718      	adds	r7, #24
 800aefc:	46bd      	mov	sp, r7
 800aefe:	bd80      	pop	{r7, pc}

0800af00 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800af00:	b580      	push	{r7, lr}
 800af02:	b08e      	sub	sp, #56	@ 0x38
 800af04:	af04      	add	r7, sp, #16
 800af06:	60f8      	str	r0, [r7, #12]
 800af08:	60b9      	str	r1, [r7, #8]
 800af0a:	607a      	str	r2, [r7, #4]
 800af0c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800af0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800af10:	2b00      	cmp	r3, #0
 800af12:	d10b      	bne.n	800af2c <xTaskCreateStatic+0x2c>
	__asm volatile
 800af14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af18:	f383 8811 	msr	BASEPRI, r3
 800af1c:	f3bf 8f6f 	isb	sy
 800af20:	f3bf 8f4f 	dsb	sy
 800af24:	623b      	str	r3, [r7, #32]
}
 800af26:	bf00      	nop
 800af28:	bf00      	nop
 800af2a:	e7fd      	b.n	800af28 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800af2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d10b      	bne.n	800af4a <xTaskCreateStatic+0x4a>
	__asm volatile
 800af32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af36:	f383 8811 	msr	BASEPRI, r3
 800af3a:	f3bf 8f6f 	isb	sy
 800af3e:	f3bf 8f4f 	dsb	sy
 800af42:	61fb      	str	r3, [r7, #28]
}
 800af44:	bf00      	nop
 800af46:	bf00      	nop
 800af48:	e7fd      	b.n	800af46 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800af4a:	235c      	movs	r3, #92	@ 0x5c
 800af4c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800af4e:	693b      	ldr	r3, [r7, #16]
 800af50:	2b5c      	cmp	r3, #92	@ 0x5c
 800af52:	d00b      	beq.n	800af6c <xTaskCreateStatic+0x6c>
	__asm volatile
 800af54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af58:	f383 8811 	msr	BASEPRI, r3
 800af5c:	f3bf 8f6f 	isb	sy
 800af60:	f3bf 8f4f 	dsb	sy
 800af64:	61bb      	str	r3, [r7, #24]
}
 800af66:	bf00      	nop
 800af68:	bf00      	nop
 800af6a:	e7fd      	b.n	800af68 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800af6c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800af6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af70:	2b00      	cmp	r3, #0
 800af72:	d01e      	beq.n	800afb2 <xTaskCreateStatic+0xb2>
 800af74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800af76:	2b00      	cmp	r3, #0
 800af78:	d01b      	beq.n	800afb2 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800af7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af7c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800af7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af80:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800af82:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800af84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af86:	2202      	movs	r2, #2
 800af88:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800af8c:	2300      	movs	r3, #0
 800af8e:	9303      	str	r3, [sp, #12]
 800af90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af92:	9302      	str	r3, [sp, #8]
 800af94:	f107 0314 	add.w	r3, r7, #20
 800af98:	9301      	str	r3, [sp, #4]
 800af9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af9c:	9300      	str	r3, [sp, #0]
 800af9e:	683b      	ldr	r3, [r7, #0]
 800afa0:	687a      	ldr	r2, [r7, #4]
 800afa2:	68b9      	ldr	r1, [r7, #8]
 800afa4:	68f8      	ldr	r0, [r7, #12]
 800afa6:	f000 f850 	bl	800b04a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800afaa:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800afac:	f000 f8de 	bl	800b16c <prvAddNewTaskToReadyList>
 800afb0:	e001      	b.n	800afb6 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800afb2:	2300      	movs	r3, #0
 800afb4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800afb6:	697b      	ldr	r3, [r7, #20]
	}
 800afb8:	4618      	mov	r0, r3
 800afba:	3728      	adds	r7, #40	@ 0x28
 800afbc:	46bd      	mov	sp, r7
 800afbe:	bd80      	pop	{r7, pc}

0800afc0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800afc0:	b580      	push	{r7, lr}
 800afc2:	b08c      	sub	sp, #48	@ 0x30
 800afc4:	af04      	add	r7, sp, #16
 800afc6:	60f8      	str	r0, [r7, #12]
 800afc8:	60b9      	str	r1, [r7, #8]
 800afca:	603b      	str	r3, [r7, #0]
 800afcc:	4613      	mov	r3, r2
 800afce:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800afd0:	88fb      	ldrh	r3, [r7, #6]
 800afd2:	009b      	lsls	r3, r3, #2
 800afd4:	4618      	mov	r0, r3
 800afd6:	f001 fc71 	bl	800c8bc <pvPortMalloc>
 800afda:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800afdc:	697b      	ldr	r3, [r7, #20]
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d00e      	beq.n	800b000 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800afe2:	205c      	movs	r0, #92	@ 0x5c
 800afe4:	f001 fc6a 	bl	800c8bc <pvPortMalloc>
 800afe8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800afea:	69fb      	ldr	r3, [r7, #28]
 800afec:	2b00      	cmp	r3, #0
 800afee:	d003      	beq.n	800aff8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800aff0:	69fb      	ldr	r3, [r7, #28]
 800aff2:	697a      	ldr	r2, [r7, #20]
 800aff4:	631a      	str	r2, [r3, #48]	@ 0x30
 800aff6:	e005      	b.n	800b004 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800aff8:	6978      	ldr	r0, [r7, #20]
 800affa:	f001 fd2d 	bl	800ca58 <vPortFree>
 800affe:	e001      	b.n	800b004 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b000:	2300      	movs	r3, #0
 800b002:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b004:	69fb      	ldr	r3, [r7, #28]
 800b006:	2b00      	cmp	r3, #0
 800b008:	d017      	beq.n	800b03a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b00a:	69fb      	ldr	r3, [r7, #28]
 800b00c:	2200      	movs	r2, #0
 800b00e:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b012:	88fa      	ldrh	r2, [r7, #6]
 800b014:	2300      	movs	r3, #0
 800b016:	9303      	str	r3, [sp, #12]
 800b018:	69fb      	ldr	r3, [r7, #28]
 800b01a:	9302      	str	r3, [sp, #8]
 800b01c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b01e:	9301      	str	r3, [sp, #4]
 800b020:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b022:	9300      	str	r3, [sp, #0]
 800b024:	683b      	ldr	r3, [r7, #0]
 800b026:	68b9      	ldr	r1, [r7, #8]
 800b028:	68f8      	ldr	r0, [r7, #12]
 800b02a:	f000 f80e 	bl	800b04a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b02e:	69f8      	ldr	r0, [r7, #28]
 800b030:	f000 f89c 	bl	800b16c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b034:	2301      	movs	r3, #1
 800b036:	61bb      	str	r3, [r7, #24]
 800b038:	e002      	b.n	800b040 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b03a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b03e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b040:	69bb      	ldr	r3, [r7, #24]
	}
 800b042:	4618      	mov	r0, r3
 800b044:	3720      	adds	r7, #32
 800b046:	46bd      	mov	sp, r7
 800b048:	bd80      	pop	{r7, pc}

0800b04a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b04a:	b580      	push	{r7, lr}
 800b04c:	b088      	sub	sp, #32
 800b04e:	af00      	add	r7, sp, #0
 800b050:	60f8      	str	r0, [r7, #12]
 800b052:	60b9      	str	r1, [r7, #8]
 800b054:	607a      	str	r2, [r7, #4]
 800b056:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b058:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b05a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	009b      	lsls	r3, r3, #2
 800b060:	461a      	mov	r2, r3
 800b062:	21a5      	movs	r1, #165	@ 0xa5
 800b064:	f010 f97a 	bl	801b35c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b068:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b06a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b072:	3b01      	subs	r3, #1
 800b074:	009b      	lsls	r3, r3, #2
 800b076:	4413      	add	r3, r2
 800b078:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b07a:	69bb      	ldr	r3, [r7, #24]
 800b07c:	f023 0307 	bic.w	r3, r3, #7
 800b080:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b082:	69bb      	ldr	r3, [r7, #24]
 800b084:	f003 0307 	and.w	r3, r3, #7
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d00b      	beq.n	800b0a4 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800b08c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b090:	f383 8811 	msr	BASEPRI, r3
 800b094:	f3bf 8f6f 	isb	sy
 800b098:	f3bf 8f4f 	dsb	sy
 800b09c:	617b      	str	r3, [r7, #20]
}
 800b09e:	bf00      	nop
 800b0a0:	bf00      	nop
 800b0a2:	e7fd      	b.n	800b0a0 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b0a4:	68bb      	ldr	r3, [r7, #8]
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d01f      	beq.n	800b0ea <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b0aa:	2300      	movs	r3, #0
 800b0ac:	61fb      	str	r3, [r7, #28]
 800b0ae:	e012      	b.n	800b0d6 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b0b0:	68ba      	ldr	r2, [r7, #8]
 800b0b2:	69fb      	ldr	r3, [r7, #28]
 800b0b4:	4413      	add	r3, r2
 800b0b6:	7819      	ldrb	r1, [r3, #0]
 800b0b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b0ba:	69fb      	ldr	r3, [r7, #28]
 800b0bc:	4413      	add	r3, r2
 800b0be:	3334      	adds	r3, #52	@ 0x34
 800b0c0:	460a      	mov	r2, r1
 800b0c2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b0c4:	68ba      	ldr	r2, [r7, #8]
 800b0c6:	69fb      	ldr	r3, [r7, #28]
 800b0c8:	4413      	add	r3, r2
 800b0ca:	781b      	ldrb	r3, [r3, #0]
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d006      	beq.n	800b0de <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b0d0:	69fb      	ldr	r3, [r7, #28]
 800b0d2:	3301      	adds	r3, #1
 800b0d4:	61fb      	str	r3, [r7, #28]
 800b0d6:	69fb      	ldr	r3, [r7, #28]
 800b0d8:	2b0f      	cmp	r3, #15
 800b0da:	d9e9      	bls.n	800b0b0 <prvInitialiseNewTask+0x66>
 800b0dc:	e000      	b.n	800b0e0 <prvInitialiseNewTask+0x96>
			{
				break;
 800b0de:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b0e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0e2:	2200      	movs	r2, #0
 800b0e4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800b0e8:	e003      	b.n	800b0f2 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b0ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0ec:	2200      	movs	r2, #0
 800b0ee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b0f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b0f4:	2b37      	cmp	r3, #55	@ 0x37
 800b0f6:	d901      	bls.n	800b0fc <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b0f8:	2337      	movs	r3, #55	@ 0x37
 800b0fa:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b0fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0fe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b100:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b102:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b104:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b106:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800b108:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b10a:	2200      	movs	r2, #0
 800b10c:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b10e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b110:	3304      	adds	r3, #4
 800b112:	4618      	mov	r0, r3
 800b114:	f7ff f966 	bl	800a3e4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b118:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b11a:	3318      	adds	r3, #24
 800b11c:	4618      	mov	r0, r3
 800b11e:	f7ff f961 	bl	800a3e4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b122:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b124:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b126:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b128:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b12a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800b12e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b130:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b132:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b134:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b136:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b138:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b13a:	2200      	movs	r2, #0
 800b13c:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b13e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b140:	2200      	movs	r2, #0
 800b142:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b146:	683a      	ldr	r2, [r7, #0]
 800b148:	68f9      	ldr	r1, [r7, #12]
 800b14a:	69b8      	ldr	r0, [r7, #24]
 800b14c:	f001 f966 	bl	800c41c <pxPortInitialiseStack>
 800b150:	4602      	mov	r2, r0
 800b152:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b154:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b156:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d002      	beq.n	800b162 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b15c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b15e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b160:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b162:	bf00      	nop
 800b164:	3720      	adds	r7, #32
 800b166:	46bd      	mov	sp, r7
 800b168:	bd80      	pop	{r7, pc}
	...

0800b16c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b16c:	b580      	push	{r7, lr}
 800b16e:	b082      	sub	sp, #8
 800b170:	af00      	add	r7, sp, #0
 800b172:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b174:	f001 fa80 	bl	800c678 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b178:	4b2d      	ldr	r3, [pc, #180]	@ (800b230 <prvAddNewTaskToReadyList+0xc4>)
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	3301      	adds	r3, #1
 800b17e:	4a2c      	ldr	r2, [pc, #176]	@ (800b230 <prvAddNewTaskToReadyList+0xc4>)
 800b180:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b182:	4b2c      	ldr	r3, [pc, #176]	@ (800b234 <prvAddNewTaskToReadyList+0xc8>)
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	2b00      	cmp	r3, #0
 800b188:	d109      	bne.n	800b19e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b18a:	4a2a      	ldr	r2, [pc, #168]	@ (800b234 <prvAddNewTaskToReadyList+0xc8>)
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b190:	4b27      	ldr	r3, [pc, #156]	@ (800b230 <prvAddNewTaskToReadyList+0xc4>)
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	2b01      	cmp	r3, #1
 800b196:	d110      	bne.n	800b1ba <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b198:	f000 fc46 	bl	800ba28 <prvInitialiseTaskLists>
 800b19c:	e00d      	b.n	800b1ba <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b19e:	4b26      	ldr	r3, [pc, #152]	@ (800b238 <prvAddNewTaskToReadyList+0xcc>)
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d109      	bne.n	800b1ba <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b1a6:	4b23      	ldr	r3, [pc, #140]	@ (800b234 <prvAddNewTaskToReadyList+0xc8>)
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b1b0:	429a      	cmp	r2, r3
 800b1b2:	d802      	bhi.n	800b1ba <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b1b4:	4a1f      	ldr	r2, [pc, #124]	@ (800b234 <prvAddNewTaskToReadyList+0xc8>)
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b1ba:	4b20      	ldr	r3, [pc, #128]	@ (800b23c <prvAddNewTaskToReadyList+0xd0>)
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	3301      	adds	r3, #1
 800b1c0:	4a1e      	ldr	r2, [pc, #120]	@ (800b23c <prvAddNewTaskToReadyList+0xd0>)
 800b1c2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b1c4:	4b1d      	ldr	r3, [pc, #116]	@ (800b23c <prvAddNewTaskToReadyList+0xd0>)
 800b1c6:	681a      	ldr	r2, [r3, #0]
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b1d0:	4b1b      	ldr	r3, [pc, #108]	@ (800b240 <prvAddNewTaskToReadyList+0xd4>)
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	429a      	cmp	r2, r3
 800b1d6:	d903      	bls.n	800b1e0 <prvAddNewTaskToReadyList+0x74>
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b1dc:	4a18      	ldr	r2, [pc, #96]	@ (800b240 <prvAddNewTaskToReadyList+0xd4>)
 800b1de:	6013      	str	r3, [r2, #0]
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b1e4:	4613      	mov	r3, r2
 800b1e6:	009b      	lsls	r3, r3, #2
 800b1e8:	4413      	add	r3, r2
 800b1ea:	009b      	lsls	r3, r3, #2
 800b1ec:	4a15      	ldr	r2, [pc, #84]	@ (800b244 <prvAddNewTaskToReadyList+0xd8>)
 800b1ee:	441a      	add	r2, r3
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	3304      	adds	r3, #4
 800b1f4:	4619      	mov	r1, r3
 800b1f6:	4610      	mov	r0, r2
 800b1f8:	f7ff f901 	bl	800a3fe <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b1fc:	f001 fa6e 	bl	800c6dc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b200:	4b0d      	ldr	r3, [pc, #52]	@ (800b238 <prvAddNewTaskToReadyList+0xcc>)
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	2b00      	cmp	r3, #0
 800b206:	d00e      	beq.n	800b226 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b208:	4b0a      	ldr	r3, [pc, #40]	@ (800b234 <prvAddNewTaskToReadyList+0xc8>)
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b212:	429a      	cmp	r2, r3
 800b214:	d207      	bcs.n	800b226 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b216:	4b0c      	ldr	r3, [pc, #48]	@ (800b248 <prvAddNewTaskToReadyList+0xdc>)
 800b218:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b21c:	601a      	str	r2, [r3, #0]
 800b21e:	f3bf 8f4f 	dsb	sy
 800b222:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b226:	bf00      	nop
 800b228:	3708      	adds	r7, #8
 800b22a:	46bd      	mov	sp, r7
 800b22c:	bd80      	pop	{r7, pc}
 800b22e:	bf00      	nop
 800b230:	20005dac 	.word	0x20005dac
 800b234:	200058d8 	.word	0x200058d8
 800b238:	20005db8 	.word	0x20005db8
 800b23c:	20005dc8 	.word	0x20005dc8
 800b240:	20005db4 	.word	0x20005db4
 800b244:	200058dc 	.word	0x200058dc
 800b248:	e000ed04 	.word	0xe000ed04

0800b24c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b24c:	b580      	push	{r7, lr}
 800b24e:	b084      	sub	sp, #16
 800b250:	af00      	add	r7, sp, #0
 800b252:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b254:	2300      	movs	r3, #0
 800b256:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d018      	beq.n	800b290 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b25e:	4b14      	ldr	r3, [pc, #80]	@ (800b2b0 <vTaskDelay+0x64>)
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	2b00      	cmp	r3, #0
 800b264:	d00b      	beq.n	800b27e <vTaskDelay+0x32>
	__asm volatile
 800b266:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b26a:	f383 8811 	msr	BASEPRI, r3
 800b26e:	f3bf 8f6f 	isb	sy
 800b272:	f3bf 8f4f 	dsb	sy
 800b276:	60bb      	str	r3, [r7, #8]
}
 800b278:	bf00      	nop
 800b27a:	bf00      	nop
 800b27c:	e7fd      	b.n	800b27a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b27e:	f000 f883 	bl	800b388 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b282:	2100      	movs	r1, #0
 800b284:	6878      	ldr	r0, [r7, #4]
 800b286:	f000 fd1b 	bl	800bcc0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b28a:	f000 f88b 	bl	800b3a4 <xTaskResumeAll>
 800b28e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	2b00      	cmp	r3, #0
 800b294:	d107      	bne.n	800b2a6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800b296:	4b07      	ldr	r3, [pc, #28]	@ (800b2b4 <vTaskDelay+0x68>)
 800b298:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b29c:	601a      	str	r2, [r3, #0]
 800b29e:	f3bf 8f4f 	dsb	sy
 800b2a2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b2a6:	bf00      	nop
 800b2a8:	3710      	adds	r7, #16
 800b2aa:	46bd      	mov	sp, r7
 800b2ac:	bd80      	pop	{r7, pc}
 800b2ae:	bf00      	nop
 800b2b0:	20005dd4 	.word	0x20005dd4
 800b2b4:	e000ed04 	.word	0xe000ed04

0800b2b8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b2b8:	b580      	push	{r7, lr}
 800b2ba:	b08a      	sub	sp, #40	@ 0x28
 800b2bc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b2be:	2300      	movs	r3, #0
 800b2c0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b2c2:	2300      	movs	r3, #0
 800b2c4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b2c6:	463a      	mov	r2, r7
 800b2c8:	1d39      	adds	r1, r7, #4
 800b2ca:	f107 0308 	add.w	r3, r7, #8
 800b2ce:	4618      	mov	r0, r3
 800b2d0:	f7ff f834 	bl	800a33c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b2d4:	6839      	ldr	r1, [r7, #0]
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	68ba      	ldr	r2, [r7, #8]
 800b2da:	9202      	str	r2, [sp, #8]
 800b2dc:	9301      	str	r3, [sp, #4]
 800b2de:	2300      	movs	r3, #0
 800b2e0:	9300      	str	r3, [sp, #0]
 800b2e2:	2300      	movs	r3, #0
 800b2e4:	460a      	mov	r2, r1
 800b2e6:	4922      	ldr	r1, [pc, #136]	@ (800b370 <vTaskStartScheduler+0xb8>)
 800b2e8:	4822      	ldr	r0, [pc, #136]	@ (800b374 <vTaskStartScheduler+0xbc>)
 800b2ea:	f7ff fe09 	bl	800af00 <xTaskCreateStatic>
 800b2ee:	4603      	mov	r3, r0
 800b2f0:	4a21      	ldr	r2, [pc, #132]	@ (800b378 <vTaskStartScheduler+0xc0>)
 800b2f2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b2f4:	4b20      	ldr	r3, [pc, #128]	@ (800b378 <vTaskStartScheduler+0xc0>)
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d002      	beq.n	800b302 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b2fc:	2301      	movs	r3, #1
 800b2fe:	617b      	str	r3, [r7, #20]
 800b300:	e001      	b.n	800b306 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b302:	2300      	movs	r3, #0
 800b304:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b306:	697b      	ldr	r3, [r7, #20]
 800b308:	2b01      	cmp	r3, #1
 800b30a:	d102      	bne.n	800b312 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b30c:	f000 fd2c 	bl	800bd68 <xTimerCreateTimerTask>
 800b310:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b312:	697b      	ldr	r3, [r7, #20]
 800b314:	2b01      	cmp	r3, #1
 800b316:	d116      	bne.n	800b346 <vTaskStartScheduler+0x8e>
	__asm volatile
 800b318:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b31c:	f383 8811 	msr	BASEPRI, r3
 800b320:	f3bf 8f6f 	isb	sy
 800b324:	f3bf 8f4f 	dsb	sy
 800b328:	613b      	str	r3, [r7, #16]
}
 800b32a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b32c:	4b13      	ldr	r3, [pc, #76]	@ (800b37c <vTaskStartScheduler+0xc4>)
 800b32e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b332:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b334:	4b12      	ldr	r3, [pc, #72]	@ (800b380 <vTaskStartScheduler+0xc8>)
 800b336:	2201      	movs	r2, #1
 800b338:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b33a:	4b12      	ldr	r3, [pc, #72]	@ (800b384 <vTaskStartScheduler+0xcc>)
 800b33c:	2200      	movs	r2, #0
 800b33e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b340:	f001 f8f6 	bl	800c530 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b344:	e00f      	b.n	800b366 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b346:	697b      	ldr	r3, [r7, #20]
 800b348:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b34c:	d10b      	bne.n	800b366 <vTaskStartScheduler+0xae>
	__asm volatile
 800b34e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b352:	f383 8811 	msr	BASEPRI, r3
 800b356:	f3bf 8f6f 	isb	sy
 800b35a:	f3bf 8f4f 	dsb	sy
 800b35e:	60fb      	str	r3, [r7, #12]
}
 800b360:	bf00      	nop
 800b362:	bf00      	nop
 800b364:	e7fd      	b.n	800b362 <vTaskStartScheduler+0xaa>
}
 800b366:	bf00      	nop
 800b368:	3718      	adds	r7, #24
 800b36a:	46bd      	mov	sp, r7
 800b36c:	bd80      	pop	{r7, pc}
 800b36e:	bf00      	nop
 800b370:	0801d4d0 	.word	0x0801d4d0
 800b374:	0800b9f9 	.word	0x0800b9f9
 800b378:	20005dd0 	.word	0x20005dd0
 800b37c:	20005dcc 	.word	0x20005dcc
 800b380:	20005db8 	.word	0x20005db8
 800b384:	20005db0 	.word	0x20005db0

0800b388 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b388:	b480      	push	{r7}
 800b38a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b38c:	4b04      	ldr	r3, [pc, #16]	@ (800b3a0 <vTaskSuspendAll+0x18>)
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	3301      	adds	r3, #1
 800b392:	4a03      	ldr	r2, [pc, #12]	@ (800b3a0 <vTaskSuspendAll+0x18>)
 800b394:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b396:	bf00      	nop
 800b398:	46bd      	mov	sp, r7
 800b39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b39e:	4770      	bx	lr
 800b3a0:	20005dd4 	.word	0x20005dd4

0800b3a4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b3a4:	b580      	push	{r7, lr}
 800b3a6:	b084      	sub	sp, #16
 800b3a8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b3aa:	2300      	movs	r3, #0
 800b3ac:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b3ae:	2300      	movs	r3, #0
 800b3b0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b3b2:	4b42      	ldr	r3, [pc, #264]	@ (800b4bc <xTaskResumeAll+0x118>)
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d10b      	bne.n	800b3d2 <xTaskResumeAll+0x2e>
	__asm volatile
 800b3ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b3be:	f383 8811 	msr	BASEPRI, r3
 800b3c2:	f3bf 8f6f 	isb	sy
 800b3c6:	f3bf 8f4f 	dsb	sy
 800b3ca:	603b      	str	r3, [r7, #0]
}
 800b3cc:	bf00      	nop
 800b3ce:	bf00      	nop
 800b3d0:	e7fd      	b.n	800b3ce <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b3d2:	f001 f951 	bl	800c678 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b3d6:	4b39      	ldr	r3, [pc, #228]	@ (800b4bc <xTaskResumeAll+0x118>)
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	3b01      	subs	r3, #1
 800b3dc:	4a37      	ldr	r2, [pc, #220]	@ (800b4bc <xTaskResumeAll+0x118>)
 800b3de:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b3e0:	4b36      	ldr	r3, [pc, #216]	@ (800b4bc <xTaskResumeAll+0x118>)
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d162      	bne.n	800b4ae <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b3e8:	4b35      	ldr	r3, [pc, #212]	@ (800b4c0 <xTaskResumeAll+0x11c>)
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d05e      	beq.n	800b4ae <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b3f0:	e02f      	b.n	800b452 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b3f2:	4b34      	ldr	r3, [pc, #208]	@ (800b4c4 <xTaskResumeAll+0x120>)
 800b3f4:	68db      	ldr	r3, [r3, #12]
 800b3f6:	68db      	ldr	r3, [r3, #12]
 800b3f8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b3fa:	68fb      	ldr	r3, [r7, #12]
 800b3fc:	3318      	adds	r3, #24
 800b3fe:	4618      	mov	r0, r3
 800b400:	f7ff f85a 	bl	800a4b8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	3304      	adds	r3, #4
 800b408:	4618      	mov	r0, r3
 800b40a:	f7ff f855 	bl	800a4b8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b412:	4b2d      	ldr	r3, [pc, #180]	@ (800b4c8 <xTaskResumeAll+0x124>)
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	429a      	cmp	r2, r3
 800b418:	d903      	bls.n	800b422 <xTaskResumeAll+0x7e>
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b41e:	4a2a      	ldr	r2, [pc, #168]	@ (800b4c8 <xTaskResumeAll+0x124>)
 800b420:	6013      	str	r3, [r2, #0]
 800b422:	68fb      	ldr	r3, [r7, #12]
 800b424:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b426:	4613      	mov	r3, r2
 800b428:	009b      	lsls	r3, r3, #2
 800b42a:	4413      	add	r3, r2
 800b42c:	009b      	lsls	r3, r3, #2
 800b42e:	4a27      	ldr	r2, [pc, #156]	@ (800b4cc <xTaskResumeAll+0x128>)
 800b430:	441a      	add	r2, r3
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	3304      	adds	r3, #4
 800b436:	4619      	mov	r1, r3
 800b438:	4610      	mov	r0, r2
 800b43a:	f7fe ffe0 	bl	800a3fe <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b43e:	68fb      	ldr	r3, [r7, #12]
 800b440:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b442:	4b23      	ldr	r3, [pc, #140]	@ (800b4d0 <xTaskResumeAll+0x12c>)
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b448:	429a      	cmp	r2, r3
 800b44a:	d302      	bcc.n	800b452 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800b44c:	4b21      	ldr	r3, [pc, #132]	@ (800b4d4 <xTaskResumeAll+0x130>)
 800b44e:	2201      	movs	r2, #1
 800b450:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b452:	4b1c      	ldr	r3, [pc, #112]	@ (800b4c4 <xTaskResumeAll+0x120>)
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	2b00      	cmp	r3, #0
 800b458:	d1cb      	bne.n	800b3f2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d001      	beq.n	800b464 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b460:	f000 fb80 	bl	800bb64 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b464:	4b1c      	ldr	r3, [pc, #112]	@ (800b4d8 <xTaskResumeAll+0x134>)
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d010      	beq.n	800b492 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b470:	f000 f846 	bl	800b500 <xTaskIncrementTick>
 800b474:	4603      	mov	r3, r0
 800b476:	2b00      	cmp	r3, #0
 800b478:	d002      	beq.n	800b480 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800b47a:	4b16      	ldr	r3, [pc, #88]	@ (800b4d4 <xTaskResumeAll+0x130>)
 800b47c:	2201      	movs	r2, #1
 800b47e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	3b01      	subs	r3, #1
 800b484:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d1f1      	bne.n	800b470 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800b48c:	4b12      	ldr	r3, [pc, #72]	@ (800b4d8 <xTaskResumeAll+0x134>)
 800b48e:	2200      	movs	r2, #0
 800b490:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b492:	4b10      	ldr	r3, [pc, #64]	@ (800b4d4 <xTaskResumeAll+0x130>)
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	2b00      	cmp	r3, #0
 800b498:	d009      	beq.n	800b4ae <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b49a:	2301      	movs	r3, #1
 800b49c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b49e:	4b0f      	ldr	r3, [pc, #60]	@ (800b4dc <xTaskResumeAll+0x138>)
 800b4a0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b4a4:	601a      	str	r2, [r3, #0]
 800b4a6:	f3bf 8f4f 	dsb	sy
 800b4aa:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b4ae:	f001 f915 	bl	800c6dc <vPortExitCritical>

	return xAlreadyYielded;
 800b4b2:	68bb      	ldr	r3, [r7, #8]
}
 800b4b4:	4618      	mov	r0, r3
 800b4b6:	3710      	adds	r7, #16
 800b4b8:	46bd      	mov	sp, r7
 800b4ba:	bd80      	pop	{r7, pc}
 800b4bc:	20005dd4 	.word	0x20005dd4
 800b4c0:	20005dac 	.word	0x20005dac
 800b4c4:	20005d6c 	.word	0x20005d6c
 800b4c8:	20005db4 	.word	0x20005db4
 800b4cc:	200058dc 	.word	0x200058dc
 800b4d0:	200058d8 	.word	0x200058d8
 800b4d4:	20005dc0 	.word	0x20005dc0
 800b4d8:	20005dbc 	.word	0x20005dbc
 800b4dc:	e000ed04 	.word	0xe000ed04

0800b4e0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b4e0:	b480      	push	{r7}
 800b4e2:	b083      	sub	sp, #12
 800b4e4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b4e6:	4b05      	ldr	r3, [pc, #20]	@ (800b4fc <xTaskGetTickCount+0x1c>)
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b4ec:	687b      	ldr	r3, [r7, #4]
}
 800b4ee:	4618      	mov	r0, r3
 800b4f0:	370c      	adds	r7, #12
 800b4f2:	46bd      	mov	sp, r7
 800b4f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4f8:	4770      	bx	lr
 800b4fa:	bf00      	nop
 800b4fc:	20005db0 	.word	0x20005db0

0800b500 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b500:	b580      	push	{r7, lr}
 800b502:	b086      	sub	sp, #24
 800b504:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b506:	2300      	movs	r3, #0
 800b508:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b50a:	4b4f      	ldr	r3, [pc, #316]	@ (800b648 <xTaskIncrementTick+0x148>)
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	2b00      	cmp	r3, #0
 800b510:	f040 8090 	bne.w	800b634 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b514:	4b4d      	ldr	r3, [pc, #308]	@ (800b64c <xTaskIncrementTick+0x14c>)
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	3301      	adds	r3, #1
 800b51a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b51c:	4a4b      	ldr	r2, [pc, #300]	@ (800b64c <xTaskIncrementTick+0x14c>)
 800b51e:	693b      	ldr	r3, [r7, #16]
 800b520:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b522:	693b      	ldr	r3, [r7, #16]
 800b524:	2b00      	cmp	r3, #0
 800b526:	d121      	bne.n	800b56c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800b528:	4b49      	ldr	r3, [pc, #292]	@ (800b650 <xTaskIncrementTick+0x150>)
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d00b      	beq.n	800b54a <xTaskIncrementTick+0x4a>
	__asm volatile
 800b532:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b536:	f383 8811 	msr	BASEPRI, r3
 800b53a:	f3bf 8f6f 	isb	sy
 800b53e:	f3bf 8f4f 	dsb	sy
 800b542:	603b      	str	r3, [r7, #0]
}
 800b544:	bf00      	nop
 800b546:	bf00      	nop
 800b548:	e7fd      	b.n	800b546 <xTaskIncrementTick+0x46>
 800b54a:	4b41      	ldr	r3, [pc, #260]	@ (800b650 <xTaskIncrementTick+0x150>)
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	60fb      	str	r3, [r7, #12]
 800b550:	4b40      	ldr	r3, [pc, #256]	@ (800b654 <xTaskIncrementTick+0x154>)
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	4a3e      	ldr	r2, [pc, #248]	@ (800b650 <xTaskIncrementTick+0x150>)
 800b556:	6013      	str	r3, [r2, #0]
 800b558:	4a3e      	ldr	r2, [pc, #248]	@ (800b654 <xTaskIncrementTick+0x154>)
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	6013      	str	r3, [r2, #0]
 800b55e:	4b3e      	ldr	r3, [pc, #248]	@ (800b658 <xTaskIncrementTick+0x158>)
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	3301      	adds	r3, #1
 800b564:	4a3c      	ldr	r2, [pc, #240]	@ (800b658 <xTaskIncrementTick+0x158>)
 800b566:	6013      	str	r3, [r2, #0]
 800b568:	f000 fafc 	bl	800bb64 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b56c:	4b3b      	ldr	r3, [pc, #236]	@ (800b65c <xTaskIncrementTick+0x15c>)
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	693a      	ldr	r2, [r7, #16]
 800b572:	429a      	cmp	r2, r3
 800b574:	d349      	bcc.n	800b60a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b576:	4b36      	ldr	r3, [pc, #216]	@ (800b650 <xTaskIncrementTick+0x150>)
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d104      	bne.n	800b58a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b580:	4b36      	ldr	r3, [pc, #216]	@ (800b65c <xTaskIncrementTick+0x15c>)
 800b582:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b586:	601a      	str	r2, [r3, #0]
					break;
 800b588:	e03f      	b.n	800b60a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b58a:	4b31      	ldr	r3, [pc, #196]	@ (800b650 <xTaskIncrementTick+0x150>)
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	68db      	ldr	r3, [r3, #12]
 800b590:	68db      	ldr	r3, [r3, #12]
 800b592:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b594:	68bb      	ldr	r3, [r7, #8]
 800b596:	685b      	ldr	r3, [r3, #4]
 800b598:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b59a:	693a      	ldr	r2, [r7, #16]
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	429a      	cmp	r2, r3
 800b5a0:	d203      	bcs.n	800b5aa <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b5a2:	4a2e      	ldr	r2, [pc, #184]	@ (800b65c <xTaskIncrementTick+0x15c>)
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b5a8:	e02f      	b.n	800b60a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b5aa:	68bb      	ldr	r3, [r7, #8]
 800b5ac:	3304      	adds	r3, #4
 800b5ae:	4618      	mov	r0, r3
 800b5b0:	f7fe ff82 	bl	800a4b8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b5b4:	68bb      	ldr	r3, [r7, #8]
 800b5b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d004      	beq.n	800b5c6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b5bc:	68bb      	ldr	r3, [r7, #8]
 800b5be:	3318      	adds	r3, #24
 800b5c0:	4618      	mov	r0, r3
 800b5c2:	f7fe ff79 	bl	800a4b8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b5c6:	68bb      	ldr	r3, [r7, #8]
 800b5c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b5ca:	4b25      	ldr	r3, [pc, #148]	@ (800b660 <xTaskIncrementTick+0x160>)
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	429a      	cmp	r2, r3
 800b5d0:	d903      	bls.n	800b5da <xTaskIncrementTick+0xda>
 800b5d2:	68bb      	ldr	r3, [r7, #8]
 800b5d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b5d6:	4a22      	ldr	r2, [pc, #136]	@ (800b660 <xTaskIncrementTick+0x160>)
 800b5d8:	6013      	str	r3, [r2, #0]
 800b5da:	68bb      	ldr	r3, [r7, #8]
 800b5dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b5de:	4613      	mov	r3, r2
 800b5e0:	009b      	lsls	r3, r3, #2
 800b5e2:	4413      	add	r3, r2
 800b5e4:	009b      	lsls	r3, r3, #2
 800b5e6:	4a1f      	ldr	r2, [pc, #124]	@ (800b664 <xTaskIncrementTick+0x164>)
 800b5e8:	441a      	add	r2, r3
 800b5ea:	68bb      	ldr	r3, [r7, #8]
 800b5ec:	3304      	adds	r3, #4
 800b5ee:	4619      	mov	r1, r3
 800b5f0:	4610      	mov	r0, r2
 800b5f2:	f7fe ff04 	bl	800a3fe <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b5f6:	68bb      	ldr	r3, [r7, #8]
 800b5f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b5fa:	4b1b      	ldr	r3, [pc, #108]	@ (800b668 <xTaskIncrementTick+0x168>)
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b600:	429a      	cmp	r2, r3
 800b602:	d3b8      	bcc.n	800b576 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800b604:	2301      	movs	r3, #1
 800b606:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b608:	e7b5      	b.n	800b576 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b60a:	4b17      	ldr	r3, [pc, #92]	@ (800b668 <xTaskIncrementTick+0x168>)
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b610:	4914      	ldr	r1, [pc, #80]	@ (800b664 <xTaskIncrementTick+0x164>)
 800b612:	4613      	mov	r3, r2
 800b614:	009b      	lsls	r3, r3, #2
 800b616:	4413      	add	r3, r2
 800b618:	009b      	lsls	r3, r3, #2
 800b61a:	440b      	add	r3, r1
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	2b01      	cmp	r3, #1
 800b620:	d901      	bls.n	800b626 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800b622:	2301      	movs	r3, #1
 800b624:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b626:	4b11      	ldr	r3, [pc, #68]	@ (800b66c <xTaskIncrementTick+0x16c>)
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d007      	beq.n	800b63e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800b62e:	2301      	movs	r3, #1
 800b630:	617b      	str	r3, [r7, #20]
 800b632:	e004      	b.n	800b63e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b634:	4b0e      	ldr	r3, [pc, #56]	@ (800b670 <xTaskIncrementTick+0x170>)
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	3301      	adds	r3, #1
 800b63a:	4a0d      	ldr	r2, [pc, #52]	@ (800b670 <xTaskIncrementTick+0x170>)
 800b63c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b63e:	697b      	ldr	r3, [r7, #20]
}
 800b640:	4618      	mov	r0, r3
 800b642:	3718      	adds	r7, #24
 800b644:	46bd      	mov	sp, r7
 800b646:	bd80      	pop	{r7, pc}
 800b648:	20005dd4 	.word	0x20005dd4
 800b64c:	20005db0 	.word	0x20005db0
 800b650:	20005d64 	.word	0x20005d64
 800b654:	20005d68 	.word	0x20005d68
 800b658:	20005dc4 	.word	0x20005dc4
 800b65c:	20005dcc 	.word	0x20005dcc
 800b660:	20005db4 	.word	0x20005db4
 800b664:	200058dc 	.word	0x200058dc
 800b668:	200058d8 	.word	0x200058d8
 800b66c:	20005dc0 	.word	0x20005dc0
 800b670:	20005dbc 	.word	0x20005dbc

0800b674 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b674:	b480      	push	{r7}
 800b676:	b085      	sub	sp, #20
 800b678:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b67a:	4b28      	ldr	r3, [pc, #160]	@ (800b71c <vTaskSwitchContext+0xa8>)
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	2b00      	cmp	r3, #0
 800b680:	d003      	beq.n	800b68a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b682:	4b27      	ldr	r3, [pc, #156]	@ (800b720 <vTaskSwitchContext+0xac>)
 800b684:	2201      	movs	r2, #1
 800b686:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b688:	e042      	b.n	800b710 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800b68a:	4b25      	ldr	r3, [pc, #148]	@ (800b720 <vTaskSwitchContext+0xac>)
 800b68c:	2200      	movs	r2, #0
 800b68e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b690:	4b24      	ldr	r3, [pc, #144]	@ (800b724 <vTaskSwitchContext+0xb0>)
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	60fb      	str	r3, [r7, #12]
 800b696:	e011      	b.n	800b6bc <vTaskSwitchContext+0x48>
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d10b      	bne.n	800b6b6 <vTaskSwitchContext+0x42>
	__asm volatile
 800b69e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b6a2:	f383 8811 	msr	BASEPRI, r3
 800b6a6:	f3bf 8f6f 	isb	sy
 800b6aa:	f3bf 8f4f 	dsb	sy
 800b6ae:	607b      	str	r3, [r7, #4]
}
 800b6b0:	bf00      	nop
 800b6b2:	bf00      	nop
 800b6b4:	e7fd      	b.n	800b6b2 <vTaskSwitchContext+0x3e>
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	3b01      	subs	r3, #1
 800b6ba:	60fb      	str	r3, [r7, #12]
 800b6bc:	491a      	ldr	r1, [pc, #104]	@ (800b728 <vTaskSwitchContext+0xb4>)
 800b6be:	68fa      	ldr	r2, [r7, #12]
 800b6c0:	4613      	mov	r3, r2
 800b6c2:	009b      	lsls	r3, r3, #2
 800b6c4:	4413      	add	r3, r2
 800b6c6:	009b      	lsls	r3, r3, #2
 800b6c8:	440b      	add	r3, r1
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d0e3      	beq.n	800b698 <vTaskSwitchContext+0x24>
 800b6d0:	68fa      	ldr	r2, [r7, #12]
 800b6d2:	4613      	mov	r3, r2
 800b6d4:	009b      	lsls	r3, r3, #2
 800b6d6:	4413      	add	r3, r2
 800b6d8:	009b      	lsls	r3, r3, #2
 800b6da:	4a13      	ldr	r2, [pc, #76]	@ (800b728 <vTaskSwitchContext+0xb4>)
 800b6dc:	4413      	add	r3, r2
 800b6de:	60bb      	str	r3, [r7, #8]
 800b6e0:	68bb      	ldr	r3, [r7, #8]
 800b6e2:	685b      	ldr	r3, [r3, #4]
 800b6e4:	685a      	ldr	r2, [r3, #4]
 800b6e6:	68bb      	ldr	r3, [r7, #8]
 800b6e8:	605a      	str	r2, [r3, #4]
 800b6ea:	68bb      	ldr	r3, [r7, #8]
 800b6ec:	685a      	ldr	r2, [r3, #4]
 800b6ee:	68bb      	ldr	r3, [r7, #8]
 800b6f0:	3308      	adds	r3, #8
 800b6f2:	429a      	cmp	r2, r3
 800b6f4:	d104      	bne.n	800b700 <vTaskSwitchContext+0x8c>
 800b6f6:	68bb      	ldr	r3, [r7, #8]
 800b6f8:	685b      	ldr	r3, [r3, #4]
 800b6fa:	685a      	ldr	r2, [r3, #4]
 800b6fc:	68bb      	ldr	r3, [r7, #8]
 800b6fe:	605a      	str	r2, [r3, #4]
 800b700:	68bb      	ldr	r3, [r7, #8]
 800b702:	685b      	ldr	r3, [r3, #4]
 800b704:	68db      	ldr	r3, [r3, #12]
 800b706:	4a09      	ldr	r2, [pc, #36]	@ (800b72c <vTaskSwitchContext+0xb8>)
 800b708:	6013      	str	r3, [r2, #0]
 800b70a:	4a06      	ldr	r2, [pc, #24]	@ (800b724 <vTaskSwitchContext+0xb0>)
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	6013      	str	r3, [r2, #0]
}
 800b710:	bf00      	nop
 800b712:	3714      	adds	r7, #20
 800b714:	46bd      	mov	sp, r7
 800b716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b71a:	4770      	bx	lr
 800b71c:	20005dd4 	.word	0x20005dd4
 800b720:	20005dc0 	.word	0x20005dc0
 800b724:	20005db4 	.word	0x20005db4
 800b728:	200058dc 	.word	0x200058dc
 800b72c:	200058d8 	.word	0x200058d8

0800b730 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b730:	b580      	push	{r7, lr}
 800b732:	b084      	sub	sp, #16
 800b734:	af00      	add	r7, sp, #0
 800b736:	6078      	str	r0, [r7, #4]
 800b738:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	d10b      	bne.n	800b758 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800b740:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b744:	f383 8811 	msr	BASEPRI, r3
 800b748:	f3bf 8f6f 	isb	sy
 800b74c:	f3bf 8f4f 	dsb	sy
 800b750:	60fb      	str	r3, [r7, #12]
}
 800b752:	bf00      	nop
 800b754:	bf00      	nop
 800b756:	e7fd      	b.n	800b754 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b758:	4b07      	ldr	r3, [pc, #28]	@ (800b778 <vTaskPlaceOnEventList+0x48>)
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	3318      	adds	r3, #24
 800b75e:	4619      	mov	r1, r3
 800b760:	6878      	ldr	r0, [r7, #4]
 800b762:	f7fe fe70 	bl	800a446 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b766:	2101      	movs	r1, #1
 800b768:	6838      	ldr	r0, [r7, #0]
 800b76a:	f000 faa9 	bl	800bcc0 <prvAddCurrentTaskToDelayedList>
}
 800b76e:	bf00      	nop
 800b770:	3710      	adds	r7, #16
 800b772:	46bd      	mov	sp, r7
 800b774:	bd80      	pop	{r7, pc}
 800b776:	bf00      	nop
 800b778:	200058d8 	.word	0x200058d8

0800b77c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b77c:	b580      	push	{r7, lr}
 800b77e:	b086      	sub	sp, #24
 800b780:	af00      	add	r7, sp, #0
 800b782:	60f8      	str	r0, [r7, #12]
 800b784:	60b9      	str	r1, [r7, #8]
 800b786:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d10b      	bne.n	800b7a6 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800b78e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b792:	f383 8811 	msr	BASEPRI, r3
 800b796:	f3bf 8f6f 	isb	sy
 800b79a:	f3bf 8f4f 	dsb	sy
 800b79e:	617b      	str	r3, [r7, #20]
}
 800b7a0:	bf00      	nop
 800b7a2:	bf00      	nop
 800b7a4:	e7fd      	b.n	800b7a2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b7a6:	4b0a      	ldr	r3, [pc, #40]	@ (800b7d0 <vTaskPlaceOnEventListRestricted+0x54>)
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	3318      	adds	r3, #24
 800b7ac:	4619      	mov	r1, r3
 800b7ae:	68f8      	ldr	r0, [r7, #12]
 800b7b0:	f7fe fe25 	bl	800a3fe <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d002      	beq.n	800b7c0 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800b7ba:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b7be:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b7c0:	6879      	ldr	r1, [r7, #4]
 800b7c2:	68b8      	ldr	r0, [r7, #8]
 800b7c4:	f000 fa7c 	bl	800bcc0 <prvAddCurrentTaskToDelayedList>
	}
 800b7c8:	bf00      	nop
 800b7ca:	3718      	adds	r7, #24
 800b7cc:	46bd      	mov	sp, r7
 800b7ce:	bd80      	pop	{r7, pc}
 800b7d0:	200058d8 	.word	0x200058d8

0800b7d4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b7d4:	b580      	push	{r7, lr}
 800b7d6:	b086      	sub	sp, #24
 800b7d8:	af00      	add	r7, sp, #0
 800b7da:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	68db      	ldr	r3, [r3, #12]
 800b7e0:	68db      	ldr	r3, [r3, #12]
 800b7e2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b7e4:	693b      	ldr	r3, [r7, #16]
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d10b      	bne.n	800b802 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800b7ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b7ee:	f383 8811 	msr	BASEPRI, r3
 800b7f2:	f3bf 8f6f 	isb	sy
 800b7f6:	f3bf 8f4f 	dsb	sy
 800b7fa:	60fb      	str	r3, [r7, #12]
}
 800b7fc:	bf00      	nop
 800b7fe:	bf00      	nop
 800b800:	e7fd      	b.n	800b7fe <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b802:	693b      	ldr	r3, [r7, #16]
 800b804:	3318      	adds	r3, #24
 800b806:	4618      	mov	r0, r3
 800b808:	f7fe fe56 	bl	800a4b8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b80c:	4b1d      	ldr	r3, [pc, #116]	@ (800b884 <xTaskRemoveFromEventList+0xb0>)
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	2b00      	cmp	r3, #0
 800b812:	d11d      	bne.n	800b850 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b814:	693b      	ldr	r3, [r7, #16]
 800b816:	3304      	adds	r3, #4
 800b818:	4618      	mov	r0, r3
 800b81a:	f7fe fe4d 	bl	800a4b8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b81e:	693b      	ldr	r3, [r7, #16]
 800b820:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b822:	4b19      	ldr	r3, [pc, #100]	@ (800b888 <xTaskRemoveFromEventList+0xb4>)
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	429a      	cmp	r2, r3
 800b828:	d903      	bls.n	800b832 <xTaskRemoveFromEventList+0x5e>
 800b82a:	693b      	ldr	r3, [r7, #16]
 800b82c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b82e:	4a16      	ldr	r2, [pc, #88]	@ (800b888 <xTaskRemoveFromEventList+0xb4>)
 800b830:	6013      	str	r3, [r2, #0]
 800b832:	693b      	ldr	r3, [r7, #16]
 800b834:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b836:	4613      	mov	r3, r2
 800b838:	009b      	lsls	r3, r3, #2
 800b83a:	4413      	add	r3, r2
 800b83c:	009b      	lsls	r3, r3, #2
 800b83e:	4a13      	ldr	r2, [pc, #76]	@ (800b88c <xTaskRemoveFromEventList+0xb8>)
 800b840:	441a      	add	r2, r3
 800b842:	693b      	ldr	r3, [r7, #16]
 800b844:	3304      	adds	r3, #4
 800b846:	4619      	mov	r1, r3
 800b848:	4610      	mov	r0, r2
 800b84a:	f7fe fdd8 	bl	800a3fe <vListInsertEnd>
 800b84e:	e005      	b.n	800b85c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b850:	693b      	ldr	r3, [r7, #16]
 800b852:	3318      	adds	r3, #24
 800b854:	4619      	mov	r1, r3
 800b856:	480e      	ldr	r0, [pc, #56]	@ (800b890 <xTaskRemoveFromEventList+0xbc>)
 800b858:	f7fe fdd1 	bl	800a3fe <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b85c:	693b      	ldr	r3, [r7, #16]
 800b85e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b860:	4b0c      	ldr	r3, [pc, #48]	@ (800b894 <xTaskRemoveFromEventList+0xc0>)
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b866:	429a      	cmp	r2, r3
 800b868:	d905      	bls.n	800b876 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b86a:	2301      	movs	r3, #1
 800b86c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b86e:	4b0a      	ldr	r3, [pc, #40]	@ (800b898 <xTaskRemoveFromEventList+0xc4>)
 800b870:	2201      	movs	r2, #1
 800b872:	601a      	str	r2, [r3, #0]
 800b874:	e001      	b.n	800b87a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800b876:	2300      	movs	r3, #0
 800b878:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b87a:	697b      	ldr	r3, [r7, #20]
}
 800b87c:	4618      	mov	r0, r3
 800b87e:	3718      	adds	r7, #24
 800b880:	46bd      	mov	sp, r7
 800b882:	bd80      	pop	{r7, pc}
 800b884:	20005dd4 	.word	0x20005dd4
 800b888:	20005db4 	.word	0x20005db4
 800b88c:	200058dc 	.word	0x200058dc
 800b890:	20005d6c 	.word	0x20005d6c
 800b894:	200058d8 	.word	0x200058d8
 800b898:	20005dc0 	.word	0x20005dc0

0800b89c <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b89c:	b580      	push	{r7, lr}
 800b89e:	b084      	sub	sp, #16
 800b8a0:	af00      	add	r7, sp, #0
 800b8a2:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d10b      	bne.n	800b8c2 <vTaskSetTimeOutState+0x26>
	__asm volatile
 800b8aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b8ae:	f383 8811 	msr	BASEPRI, r3
 800b8b2:	f3bf 8f6f 	isb	sy
 800b8b6:	f3bf 8f4f 	dsb	sy
 800b8ba:	60fb      	str	r3, [r7, #12]
}
 800b8bc:	bf00      	nop
 800b8be:	bf00      	nop
 800b8c0:	e7fd      	b.n	800b8be <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 800b8c2:	f000 fed9 	bl	800c678 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b8c6:	4b07      	ldr	r3, [pc, #28]	@ (800b8e4 <vTaskSetTimeOutState+0x48>)
 800b8c8:	681a      	ldr	r2, [r3, #0]
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 800b8ce:	4b06      	ldr	r3, [pc, #24]	@ (800b8e8 <vTaskSetTimeOutState+0x4c>)
 800b8d0:	681a      	ldr	r2, [r3, #0]
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 800b8d6:	f000 ff01 	bl	800c6dc <vPortExitCritical>
}
 800b8da:	bf00      	nop
 800b8dc:	3710      	adds	r7, #16
 800b8de:	46bd      	mov	sp, r7
 800b8e0:	bd80      	pop	{r7, pc}
 800b8e2:	bf00      	nop
 800b8e4:	20005dc4 	.word	0x20005dc4
 800b8e8:	20005db0 	.word	0x20005db0

0800b8ec <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b8ec:	b480      	push	{r7}
 800b8ee:	b083      	sub	sp, #12
 800b8f0:	af00      	add	r7, sp, #0
 800b8f2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b8f4:	4b06      	ldr	r3, [pc, #24]	@ (800b910 <vTaskInternalSetTimeOutState+0x24>)
 800b8f6:	681a      	ldr	r2, [r3, #0]
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b8fc:	4b05      	ldr	r3, [pc, #20]	@ (800b914 <vTaskInternalSetTimeOutState+0x28>)
 800b8fe:	681a      	ldr	r2, [r3, #0]
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	605a      	str	r2, [r3, #4]
}
 800b904:	bf00      	nop
 800b906:	370c      	adds	r7, #12
 800b908:	46bd      	mov	sp, r7
 800b90a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b90e:	4770      	bx	lr
 800b910:	20005dc4 	.word	0x20005dc4
 800b914:	20005db0 	.word	0x20005db0

0800b918 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b918:	b580      	push	{r7, lr}
 800b91a:	b088      	sub	sp, #32
 800b91c:	af00      	add	r7, sp, #0
 800b91e:	6078      	str	r0, [r7, #4]
 800b920:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	2b00      	cmp	r3, #0
 800b926:	d10b      	bne.n	800b940 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800b928:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b92c:	f383 8811 	msr	BASEPRI, r3
 800b930:	f3bf 8f6f 	isb	sy
 800b934:	f3bf 8f4f 	dsb	sy
 800b938:	613b      	str	r3, [r7, #16]
}
 800b93a:	bf00      	nop
 800b93c:	bf00      	nop
 800b93e:	e7fd      	b.n	800b93c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b940:	683b      	ldr	r3, [r7, #0]
 800b942:	2b00      	cmp	r3, #0
 800b944:	d10b      	bne.n	800b95e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800b946:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b94a:	f383 8811 	msr	BASEPRI, r3
 800b94e:	f3bf 8f6f 	isb	sy
 800b952:	f3bf 8f4f 	dsb	sy
 800b956:	60fb      	str	r3, [r7, #12]
}
 800b958:	bf00      	nop
 800b95a:	bf00      	nop
 800b95c:	e7fd      	b.n	800b95a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800b95e:	f000 fe8b 	bl	800c678 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b962:	4b1d      	ldr	r3, [pc, #116]	@ (800b9d8 <xTaskCheckForTimeOut+0xc0>)
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	685b      	ldr	r3, [r3, #4]
 800b96c:	69ba      	ldr	r2, [r7, #24]
 800b96e:	1ad3      	subs	r3, r2, r3
 800b970:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b972:	683b      	ldr	r3, [r7, #0]
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b97a:	d102      	bne.n	800b982 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b97c:	2300      	movs	r3, #0
 800b97e:	61fb      	str	r3, [r7, #28]
 800b980:	e023      	b.n	800b9ca <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	681a      	ldr	r2, [r3, #0]
 800b986:	4b15      	ldr	r3, [pc, #84]	@ (800b9dc <xTaskCheckForTimeOut+0xc4>)
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	429a      	cmp	r2, r3
 800b98c:	d007      	beq.n	800b99e <xTaskCheckForTimeOut+0x86>
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	685b      	ldr	r3, [r3, #4]
 800b992:	69ba      	ldr	r2, [r7, #24]
 800b994:	429a      	cmp	r2, r3
 800b996:	d302      	bcc.n	800b99e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b998:	2301      	movs	r3, #1
 800b99a:	61fb      	str	r3, [r7, #28]
 800b99c:	e015      	b.n	800b9ca <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b99e:	683b      	ldr	r3, [r7, #0]
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	697a      	ldr	r2, [r7, #20]
 800b9a4:	429a      	cmp	r2, r3
 800b9a6:	d20b      	bcs.n	800b9c0 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b9a8:	683b      	ldr	r3, [r7, #0]
 800b9aa:	681a      	ldr	r2, [r3, #0]
 800b9ac:	697b      	ldr	r3, [r7, #20]
 800b9ae:	1ad2      	subs	r2, r2, r3
 800b9b0:	683b      	ldr	r3, [r7, #0]
 800b9b2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b9b4:	6878      	ldr	r0, [r7, #4]
 800b9b6:	f7ff ff99 	bl	800b8ec <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b9ba:	2300      	movs	r3, #0
 800b9bc:	61fb      	str	r3, [r7, #28]
 800b9be:	e004      	b.n	800b9ca <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800b9c0:	683b      	ldr	r3, [r7, #0]
 800b9c2:	2200      	movs	r2, #0
 800b9c4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b9c6:	2301      	movs	r3, #1
 800b9c8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b9ca:	f000 fe87 	bl	800c6dc <vPortExitCritical>

	return xReturn;
 800b9ce:	69fb      	ldr	r3, [r7, #28]
}
 800b9d0:	4618      	mov	r0, r3
 800b9d2:	3720      	adds	r7, #32
 800b9d4:	46bd      	mov	sp, r7
 800b9d6:	bd80      	pop	{r7, pc}
 800b9d8:	20005db0 	.word	0x20005db0
 800b9dc:	20005dc4 	.word	0x20005dc4

0800b9e0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b9e0:	b480      	push	{r7}
 800b9e2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b9e4:	4b03      	ldr	r3, [pc, #12]	@ (800b9f4 <vTaskMissedYield+0x14>)
 800b9e6:	2201      	movs	r2, #1
 800b9e8:	601a      	str	r2, [r3, #0]
}
 800b9ea:	bf00      	nop
 800b9ec:	46bd      	mov	sp, r7
 800b9ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9f2:	4770      	bx	lr
 800b9f4:	20005dc0 	.word	0x20005dc0

0800b9f8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b9f8:	b580      	push	{r7, lr}
 800b9fa:	b082      	sub	sp, #8
 800b9fc:	af00      	add	r7, sp, #0
 800b9fe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800ba00:	f000 f852 	bl	800baa8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800ba04:	4b06      	ldr	r3, [pc, #24]	@ (800ba20 <prvIdleTask+0x28>)
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	2b01      	cmp	r3, #1
 800ba0a:	d9f9      	bls.n	800ba00 <prvIdleTask+0x8>
			{
				taskYIELD();
 800ba0c:	4b05      	ldr	r3, [pc, #20]	@ (800ba24 <prvIdleTask+0x2c>)
 800ba0e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ba12:	601a      	str	r2, [r3, #0]
 800ba14:	f3bf 8f4f 	dsb	sy
 800ba18:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800ba1c:	e7f0      	b.n	800ba00 <prvIdleTask+0x8>
 800ba1e:	bf00      	nop
 800ba20:	200058dc 	.word	0x200058dc
 800ba24:	e000ed04 	.word	0xe000ed04

0800ba28 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800ba28:	b580      	push	{r7, lr}
 800ba2a:	b082      	sub	sp, #8
 800ba2c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ba2e:	2300      	movs	r3, #0
 800ba30:	607b      	str	r3, [r7, #4]
 800ba32:	e00c      	b.n	800ba4e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ba34:	687a      	ldr	r2, [r7, #4]
 800ba36:	4613      	mov	r3, r2
 800ba38:	009b      	lsls	r3, r3, #2
 800ba3a:	4413      	add	r3, r2
 800ba3c:	009b      	lsls	r3, r3, #2
 800ba3e:	4a12      	ldr	r2, [pc, #72]	@ (800ba88 <prvInitialiseTaskLists+0x60>)
 800ba40:	4413      	add	r3, r2
 800ba42:	4618      	mov	r0, r3
 800ba44:	f7fe fcae 	bl	800a3a4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	3301      	adds	r3, #1
 800ba4c:	607b      	str	r3, [r7, #4]
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	2b37      	cmp	r3, #55	@ 0x37
 800ba52:	d9ef      	bls.n	800ba34 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800ba54:	480d      	ldr	r0, [pc, #52]	@ (800ba8c <prvInitialiseTaskLists+0x64>)
 800ba56:	f7fe fca5 	bl	800a3a4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ba5a:	480d      	ldr	r0, [pc, #52]	@ (800ba90 <prvInitialiseTaskLists+0x68>)
 800ba5c:	f7fe fca2 	bl	800a3a4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ba60:	480c      	ldr	r0, [pc, #48]	@ (800ba94 <prvInitialiseTaskLists+0x6c>)
 800ba62:	f7fe fc9f 	bl	800a3a4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ba66:	480c      	ldr	r0, [pc, #48]	@ (800ba98 <prvInitialiseTaskLists+0x70>)
 800ba68:	f7fe fc9c 	bl	800a3a4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ba6c:	480b      	ldr	r0, [pc, #44]	@ (800ba9c <prvInitialiseTaskLists+0x74>)
 800ba6e:	f7fe fc99 	bl	800a3a4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ba72:	4b0b      	ldr	r3, [pc, #44]	@ (800baa0 <prvInitialiseTaskLists+0x78>)
 800ba74:	4a05      	ldr	r2, [pc, #20]	@ (800ba8c <prvInitialiseTaskLists+0x64>)
 800ba76:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ba78:	4b0a      	ldr	r3, [pc, #40]	@ (800baa4 <prvInitialiseTaskLists+0x7c>)
 800ba7a:	4a05      	ldr	r2, [pc, #20]	@ (800ba90 <prvInitialiseTaskLists+0x68>)
 800ba7c:	601a      	str	r2, [r3, #0]
}
 800ba7e:	bf00      	nop
 800ba80:	3708      	adds	r7, #8
 800ba82:	46bd      	mov	sp, r7
 800ba84:	bd80      	pop	{r7, pc}
 800ba86:	bf00      	nop
 800ba88:	200058dc 	.word	0x200058dc
 800ba8c:	20005d3c 	.word	0x20005d3c
 800ba90:	20005d50 	.word	0x20005d50
 800ba94:	20005d6c 	.word	0x20005d6c
 800ba98:	20005d80 	.word	0x20005d80
 800ba9c:	20005d98 	.word	0x20005d98
 800baa0:	20005d64 	.word	0x20005d64
 800baa4:	20005d68 	.word	0x20005d68

0800baa8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800baa8:	b580      	push	{r7, lr}
 800baaa:	b082      	sub	sp, #8
 800baac:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800baae:	e019      	b.n	800bae4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800bab0:	f000 fde2 	bl	800c678 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bab4:	4b10      	ldr	r3, [pc, #64]	@ (800baf8 <prvCheckTasksWaitingTermination+0x50>)
 800bab6:	68db      	ldr	r3, [r3, #12]
 800bab8:	68db      	ldr	r3, [r3, #12]
 800baba:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	3304      	adds	r3, #4
 800bac0:	4618      	mov	r0, r3
 800bac2:	f7fe fcf9 	bl	800a4b8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800bac6:	4b0d      	ldr	r3, [pc, #52]	@ (800bafc <prvCheckTasksWaitingTermination+0x54>)
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	3b01      	subs	r3, #1
 800bacc:	4a0b      	ldr	r2, [pc, #44]	@ (800bafc <prvCheckTasksWaitingTermination+0x54>)
 800bace:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800bad0:	4b0b      	ldr	r3, [pc, #44]	@ (800bb00 <prvCheckTasksWaitingTermination+0x58>)
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	3b01      	subs	r3, #1
 800bad6:	4a0a      	ldr	r2, [pc, #40]	@ (800bb00 <prvCheckTasksWaitingTermination+0x58>)
 800bad8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800bada:	f000 fdff 	bl	800c6dc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800bade:	6878      	ldr	r0, [r7, #4]
 800bae0:	f000 f810 	bl	800bb04 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bae4:	4b06      	ldr	r3, [pc, #24]	@ (800bb00 <prvCheckTasksWaitingTermination+0x58>)
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d1e1      	bne.n	800bab0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800baec:	bf00      	nop
 800baee:	bf00      	nop
 800baf0:	3708      	adds	r7, #8
 800baf2:	46bd      	mov	sp, r7
 800baf4:	bd80      	pop	{r7, pc}
 800baf6:	bf00      	nop
 800baf8:	20005d80 	.word	0x20005d80
 800bafc:	20005dac 	.word	0x20005dac
 800bb00:	20005d94 	.word	0x20005d94

0800bb04 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800bb04:	b580      	push	{r7, lr}
 800bb06:	b084      	sub	sp, #16
 800bb08:	af00      	add	r7, sp, #0
 800bb0a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d108      	bne.n	800bb28 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bb1a:	4618      	mov	r0, r3
 800bb1c:	f000 ff9c 	bl	800ca58 <vPortFree>
				vPortFree( pxTCB );
 800bb20:	6878      	ldr	r0, [r7, #4]
 800bb22:	f000 ff99 	bl	800ca58 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800bb26:	e019      	b.n	800bb5c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800bb2e:	2b01      	cmp	r3, #1
 800bb30:	d103      	bne.n	800bb3a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800bb32:	6878      	ldr	r0, [r7, #4]
 800bb34:	f000 ff90 	bl	800ca58 <vPortFree>
	}
 800bb38:	e010      	b.n	800bb5c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800bb40:	2b02      	cmp	r3, #2
 800bb42:	d00b      	beq.n	800bb5c <prvDeleteTCB+0x58>
	__asm volatile
 800bb44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb48:	f383 8811 	msr	BASEPRI, r3
 800bb4c:	f3bf 8f6f 	isb	sy
 800bb50:	f3bf 8f4f 	dsb	sy
 800bb54:	60fb      	str	r3, [r7, #12]
}
 800bb56:	bf00      	nop
 800bb58:	bf00      	nop
 800bb5a:	e7fd      	b.n	800bb58 <prvDeleteTCB+0x54>
	}
 800bb5c:	bf00      	nop
 800bb5e:	3710      	adds	r7, #16
 800bb60:	46bd      	mov	sp, r7
 800bb62:	bd80      	pop	{r7, pc}

0800bb64 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800bb64:	b480      	push	{r7}
 800bb66:	b083      	sub	sp, #12
 800bb68:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bb6a:	4b0c      	ldr	r3, [pc, #48]	@ (800bb9c <prvResetNextTaskUnblockTime+0x38>)
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d104      	bne.n	800bb7e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800bb74:	4b0a      	ldr	r3, [pc, #40]	@ (800bba0 <prvResetNextTaskUnblockTime+0x3c>)
 800bb76:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800bb7a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800bb7c:	e008      	b.n	800bb90 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bb7e:	4b07      	ldr	r3, [pc, #28]	@ (800bb9c <prvResetNextTaskUnblockTime+0x38>)
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	68db      	ldr	r3, [r3, #12]
 800bb84:	68db      	ldr	r3, [r3, #12]
 800bb86:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	685b      	ldr	r3, [r3, #4]
 800bb8c:	4a04      	ldr	r2, [pc, #16]	@ (800bba0 <prvResetNextTaskUnblockTime+0x3c>)
 800bb8e:	6013      	str	r3, [r2, #0]
}
 800bb90:	bf00      	nop
 800bb92:	370c      	adds	r7, #12
 800bb94:	46bd      	mov	sp, r7
 800bb96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb9a:	4770      	bx	lr
 800bb9c:	20005d64 	.word	0x20005d64
 800bba0:	20005dcc 	.word	0x20005dcc

0800bba4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800bba4:	b480      	push	{r7}
 800bba6:	b083      	sub	sp, #12
 800bba8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800bbaa:	4b0b      	ldr	r3, [pc, #44]	@ (800bbd8 <xTaskGetSchedulerState+0x34>)
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d102      	bne.n	800bbb8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800bbb2:	2301      	movs	r3, #1
 800bbb4:	607b      	str	r3, [r7, #4]
 800bbb6:	e008      	b.n	800bbca <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bbb8:	4b08      	ldr	r3, [pc, #32]	@ (800bbdc <xTaskGetSchedulerState+0x38>)
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d102      	bne.n	800bbc6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800bbc0:	2302      	movs	r3, #2
 800bbc2:	607b      	str	r3, [r7, #4]
 800bbc4:	e001      	b.n	800bbca <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800bbc6:	2300      	movs	r3, #0
 800bbc8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800bbca:	687b      	ldr	r3, [r7, #4]
	}
 800bbcc:	4618      	mov	r0, r3
 800bbce:	370c      	adds	r7, #12
 800bbd0:	46bd      	mov	sp, r7
 800bbd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbd6:	4770      	bx	lr
 800bbd8:	20005db8 	.word	0x20005db8
 800bbdc:	20005dd4 	.word	0x20005dd4

0800bbe0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800bbe0:	b580      	push	{r7, lr}
 800bbe2:	b086      	sub	sp, #24
 800bbe4:	af00      	add	r7, sp, #0
 800bbe6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800bbec:	2300      	movs	r3, #0
 800bbee:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d058      	beq.n	800bca8 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800bbf6:	4b2f      	ldr	r3, [pc, #188]	@ (800bcb4 <xTaskPriorityDisinherit+0xd4>)
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	693a      	ldr	r2, [r7, #16]
 800bbfc:	429a      	cmp	r2, r3
 800bbfe:	d00b      	beq.n	800bc18 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800bc00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc04:	f383 8811 	msr	BASEPRI, r3
 800bc08:	f3bf 8f6f 	isb	sy
 800bc0c:	f3bf 8f4f 	dsb	sy
 800bc10:	60fb      	str	r3, [r7, #12]
}
 800bc12:	bf00      	nop
 800bc14:	bf00      	nop
 800bc16:	e7fd      	b.n	800bc14 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800bc18:	693b      	ldr	r3, [r7, #16]
 800bc1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d10b      	bne.n	800bc38 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800bc20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc24:	f383 8811 	msr	BASEPRI, r3
 800bc28:	f3bf 8f6f 	isb	sy
 800bc2c:	f3bf 8f4f 	dsb	sy
 800bc30:	60bb      	str	r3, [r7, #8]
}
 800bc32:	bf00      	nop
 800bc34:	bf00      	nop
 800bc36:	e7fd      	b.n	800bc34 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800bc38:	693b      	ldr	r3, [r7, #16]
 800bc3a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bc3c:	1e5a      	subs	r2, r3, #1
 800bc3e:	693b      	ldr	r3, [r7, #16]
 800bc40:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800bc42:	693b      	ldr	r3, [r7, #16]
 800bc44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bc46:	693b      	ldr	r3, [r7, #16]
 800bc48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bc4a:	429a      	cmp	r2, r3
 800bc4c:	d02c      	beq.n	800bca8 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800bc4e:	693b      	ldr	r3, [r7, #16]
 800bc50:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d128      	bne.n	800bca8 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bc56:	693b      	ldr	r3, [r7, #16]
 800bc58:	3304      	adds	r3, #4
 800bc5a:	4618      	mov	r0, r3
 800bc5c:	f7fe fc2c 	bl	800a4b8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800bc60:	693b      	ldr	r3, [r7, #16]
 800bc62:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800bc64:	693b      	ldr	r3, [r7, #16]
 800bc66:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bc68:	693b      	ldr	r3, [r7, #16]
 800bc6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc6c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800bc70:	693b      	ldr	r3, [r7, #16]
 800bc72:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800bc74:	693b      	ldr	r3, [r7, #16]
 800bc76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bc78:	4b0f      	ldr	r3, [pc, #60]	@ (800bcb8 <xTaskPriorityDisinherit+0xd8>)
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	429a      	cmp	r2, r3
 800bc7e:	d903      	bls.n	800bc88 <xTaskPriorityDisinherit+0xa8>
 800bc80:	693b      	ldr	r3, [r7, #16]
 800bc82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc84:	4a0c      	ldr	r2, [pc, #48]	@ (800bcb8 <xTaskPriorityDisinherit+0xd8>)
 800bc86:	6013      	str	r3, [r2, #0]
 800bc88:	693b      	ldr	r3, [r7, #16]
 800bc8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bc8c:	4613      	mov	r3, r2
 800bc8e:	009b      	lsls	r3, r3, #2
 800bc90:	4413      	add	r3, r2
 800bc92:	009b      	lsls	r3, r3, #2
 800bc94:	4a09      	ldr	r2, [pc, #36]	@ (800bcbc <xTaskPriorityDisinherit+0xdc>)
 800bc96:	441a      	add	r2, r3
 800bc98:	693b      	ldr	r3, [r7, #16]
 800bc9a:	3304      	adds	r3, #4
 800bc9c:	4619      	mov	r1, r3
 800bc9e:	4610      	mov	r0, r2
 800bca0:	f7fe fbad 	bl	800a3fe <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800bca4:	2301      	movs	r3, #1
 800bca6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bca8:	697b      	ldr	r3, [r7, #20]
	}
 800bcaa:	4618      	mov	r0, r3
 800bcac:	3718      	adds	r7, #24
 800bcae:	46bd      	mov	sp, r7
 800bcb0:	bd80      	pop	{r7, pc}
 800bcb2:	bf00      	nop
 800bcb4:	200058d8 	.word	0x200058d8
 800bcb8:	20005db4 	.word	0x20005db4
 800bcbc:	200058dc 	.word	0x200058dc

0800bcc0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800bcc0:	b580      	push	{r7, lr}
 800bcc2:	b084      	sub	sp, #16
 800bcc4:	af00      	add	r7, sp, #0
 800bcc6:	6078      	str	r0, [r7, #4]
 800bcc8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800bcca:	4b21      	ldr	r3, [pc, #132]	@ (800bd50 <prvAddCurrentTaskToDelayedList+0x90>)
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bcd0:	4b20      	ldr	r3, [pc, #128]	@ (800bd54 <prvAddCurrentTaskToDelayedList+0x94>)
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	3304      	adds	r3, #4
 800bcd6:	4618      	mov	r0, r3
 800bcd8:	f7fe fbee 	bl	800a4b8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800bce2:	d10a      	bne.n	800bcfa <prvAddCurrentTaskToDelayedList+0x3a>
 800bce4:	683b      	ldr	r3, [r7, #0]
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d007      	beq.n	800bcfa <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bcea:	4b1a      	ldr	r3, [pc, #104]	@ (800bd54 <prvAddCurrentTaskToDelayedList+0x94>)
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	3304      	adds	r3, #4
 800bcf0:	4619      	mov	r1, r3
 800bcf2:	4819      	ldr	r0, [pc, #100]	@ (800bd58 <prvAddCurrentTaskToDelayedList+0x98>)
 800bcf4:	f7fe fb83 	bl	800a3fe <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800bcf8:	e026      	b.n	800bd48 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800bcfa:	68fa      	ldr	r2, [r7, #12]
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	4413      	add	r3, r2
 800bd00:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800bd02:	4b14      	ldr	r3, [pc, #80]	@ (800bd54 <prvAddCurrentTaskToDelayedList+0x94>)
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	68ba      	ldr	r2, [r7, #8]
 800bd08:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800bd0a:	68ba      	ldr	r2, [r7, #8]
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	429a      	cmp	r2, r3
 800bd10:	d209      	bcs.n	800bd26 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bd12:	4b12      	ldr	r3, [pc, #72]	@ (800bd5c <prvAddCurrentTaskToDelayedList+0x9c>)
 800bd14:	681a      	ldr	r2, [r3, #0]
 800bd16:	4b0f      	ldr	r3, [pc, #60]	@ (800bd54 <prvAddCurrentTaskToDelayedList+0x94>)
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	3304      	adds	r3, #4
 800bd1c:	4619      	mov	r1, r3
 800bd1e:	4610      	mov	r0, r2
 800bd20:	f7fe fb91 	bl	800a446 <vListInsert>
}
 800bd24:	e010      	b.n	800bd48 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bd26:	4b0e      	ldr	r3, [pc, #56]	@ (800bd60 <prvAddCurrentTaskToDelayedList+0xa0>)
 800bd28:	681a      	ldr	r2, [r3, #0]
 800bd2a:	4b0a      	ldr	r3, [pc, #40]	@ (800bd54 <prvAddCurrentTaskToDelayedList+0x94>)
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	3304      	adds	r3, #4
 800bd30:	4619      	mov	r1, r3
 800bd32:	4610      	mov	r0, r2
 800bd34:	f7fe fb87 	bl	800a446 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800bd38:	4b0a      	ldr	r3, [pc, #40]	@ (800bd64 <prvAddCurrentTaskToDelayedList+0xa4>)
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	68ba      	ldr	r2, [r7, #8]
 800bd3e:	429a      	cmp	r2, r3
 800bd40:	d202      	bcs.n	800bd48 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800bd42:	4a08      	ldr	r2, [pc, #32]	@ (800bd64 <prvAddCurrentTaskToDelayedList+0xa4>)
 800bd44:	68bb      	ldr	r3, [r7, #8]
 800bd46:	6013      	str	r3, [r2, #0]
}
 800bd48:	bf00      	nop
 800bd4a:	3710      	adds	r7, #16
 800bd4c:	46bd      	mov	sp, r7
 800bd4e:	bd80      	pop	{r7, pc}
 800bd50:	20005db0 	.word	0x20005db0
 800bd54:	200058d8 	.word	0x200058d8
 800bd58:	20005d98 	.word	0x20005d98
 800bd5c:	20005d68 	.word	0x20005d68
 800bd60:	20005d64 	.word	0x20005d64
 800bd64:	20005dcc 	.word	0x20005dcc

0800bd68 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800bd68:	b580      	push	{r7, lr}
 800bd6a:	b08a      	sub	sp, #40	@ 0x28
 800bd6c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800bd6e:	2300      	movs	r3, #0
 800bd70:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800bd72:	f000 fb13 	bl	800c39c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800bd76:	4b1d      	ldr	r3, [pc, #116]	@ (800bdec <xTimerCreateTimerTask+0x84>)
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d021      	beq.n	800bdc2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800bd7e:	2300      	movs	r3, #0
 800bd80:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800bd82:	2300      	movs	r3, #0
 800bd84:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800bd86:	1d3a      	adds	r2, r7, #4
 800bd88:	f107 0108 	add.w	r1, r7, #8
 800bd8c:	f107 030c 	add.w	r3, r7, #12
 800bd90:	4618      	mov	r0, r3
 800bd92:	f7fe faed 	bl	800a370 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800bd96:	6879      	ldr	r1, [r7, #4]
 800bd98:	68bb      	ldr	r3, [r7, #8]
 800bd9a:	68fa      	ldr	r2, [r7, #12]
 800bd9c:	9202      	str	r2, [sp, #8]
 800bd9e:	9301      	str	r3, [sp, #4]
 800bda0:	2302      	movs	r3, #2
 800bda2:	9300      	str	r3, [sp, #0]
 800bda4:	2300      	movs	r3, #0
 800bda6:	460a      	mov	r2, r1
 800bda8:	4911      	ldr	r1, [pc, #68]	@ (800bdf0 <xTimerCreateTimerTask+0x88>)
 800bdaa:	4812      	ldr	r0, [pc, #72]	@ (800bdf4 <xTimerCreateTimerTask+0x8c>)
 800bdac:	f7ff f8a8 	bl	800af00 <xTaskCreateStatic>
 800bdb0:	4603      	mov	r3, r0
 800bdb2:	4a11      	ldr	r2, [pc, #68]	@ (800bdf8 <xTimerCreateTimerTask+0x90>)
 800bdb4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800bdb6:	4b10      	ldr	r3, [pc, #64]	@ (800bdf8 <xTimerCreateTimerTask+0x90>)
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d001      	beq.n	800bdc2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800bdbe:	2301      	movs	r3, #1
 800bdc0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800bdc2:	697b      	ldr	r3, [r7, #20]
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	d10b      	bne.n	800bde0 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800bdc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bdcc:	f383 8811 	msr	BASEPRI, r3
 800bdd0:	f3bf 8f6f 	isb	sy
 800bdd4:	f3bf 8f4f 	dsb	sy
 800bdd8:	613b      	str	r3, [r7, #16]
}
 800bdda:	bf00      	nop
 800bddc:	bf00      	nop
 800bdde:	e7fd      	b.n	800bddc <xTimerCreateTimerTask+0x74>
	return xReturn;
 800bde0:	697b      	ldr	r3, [r7, #20]
}
 800bde2:	4618      	mov	r0, r3
 800bde4:	3718      	adds	r7, #24
 800bde6:	46bd      	mov	sp, r7
 800bde8:	bd80      	pop	{r7, pc}
 800bdea:	bf00      	nop
 800bdec:	20005e08 	.word	0x20005e08
 800bdf0:	0801d4d8 	.word	0x0801d4d8
 800bdf4:	0800bf35 	.word	0x0800bf35
 800bdf8:	20005e0c 	.word	0x20005e0c

0800bdfc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800bdfc:	b580      	push	{r7, lr}
 800bdfe:	b08a      	sub	sp, #40	@ 0x28
 800be00:	af00      	add	r7, sp, #0
 800be02:	60f8      	str	r0, [r7, #12]
 800be04:	60b9      	str	r1, [r7, #8]
 800be06:	607a      	str	r2, [r7, #4]
 800be08:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800be0a:	2300      	movs	r3, #0
 800be0c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800be0e:	68fb      	ldr	r3, [r7, #12]
 800be10:	2b00      	cmp	r3, #0
 800be12:	d10b      	bne.n	800be2c <xTimerGenericCommand+0x30>
	__asm volatile
 800be14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be18:	f383 8811 	msr	BASEPRI, r3
 800be1c:	f3bf 8f6f 	isb	sy
 800be20:	f3bf 8f4f 	dsb	sy
 800be24:	623b      	str	r3, [r7, #32]
}
 800be26:	bf00      	nop
 800be28:	bf00      	nop
 800be2a:	e7fd      	b.n	800be28 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800be2c:	4b19      	ldr	r3, [pc, #100]	@ (800be94 <xTimerGenericCommand+0x98>)
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	2b00      	cmp	r3, #0
 800be32:	d02a      	beq.n	800be8a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800be34:	68bb      	ldr	r3, [r7, #8]
 800be36:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800be3c:	68fb      	ldr	r3, [r7, #12]
 800be3e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800be40:	68bb      	ldr	r3, [r7, #8]
 800be42:	2b05      	cmp	r3, #5
 800be44:	dc18      	bgt.n	800be78 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800be46:	f7ff fead 	bl	800bba4 <xTaskGetSchedulerState>
 800be4a:	4603      	mov	r3, r0
 800be4c:	2b02      	cmp	r3, #2
 800be4e:	d109      	bne.n	800be64 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800be50:	4b10      	ldr	r3, [pc, #64]	@ (800be94 <xTimerGenericCommand+0x98>)
 800be52:	6818      	ldr	r0, [r3, #0]
 800be54:	f107 0110 	add.w	r1, r7, #16
 800be58:	2300      	movs	r3, #0
 800be5a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800be5c:	f7fe fc60 	bl	800a720 <xQueueGenericSend>
 800be60:	6278      	str	r0, [r7, #36]	@ 0x24
 800be62:	e012      	b.n	800be8a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800be64:	4b0b      	ldr	r3, [pc, #44]	@ (800be94 <xTimerGenericCommand+0x98>)
 800be66:	6818      	ldr	r0, [r3, #0]
 800be68:	f107 0110 	add.w	r1, r7, #16
 800be6c:	2300      	movs	r3, #0
 800be6e:	2200      	movs	r2, #0
 800be70:	f7fe fc56 	bl	800a720 <xQueueGenericSend>
 800be74:	6278      	str	r0, [r7, #36]	@ 0x24
 800be76:	e008      	b.n	800be8a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800be78:	4b06      	ldr	r3, [pc, #24]	@ (800be94 <xTimerGenericCommand+0x98>)
 800be7a:	6818      	ldr	r0, [r3, #0]
 800be7c:	f107 0110 	add.w	r1, r7, #16
 800be80:	2300      	movs	r3, #0
 800be82:	683a      	ldr	r2, [r7, #0]
 800be84:	f7fe fd4e 	bl	800a924 <xQueueGenericSendFromISR>
 800be88:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800be8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800be8c:	4618      	mov	r0, r3
 800be8e:	3728      	adds	r7, #40	@ 0x28
 800be90:	46bd      	mov	sp, r7
 800be92:	bd80      	pop	{r7, pc}
 800be94:	20005e08 	.word	0x20005e08

0800be98 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800be98:	b580      	push	{r7, lr}
 800be9a:	b088      	sub	sp, #32
 800be9c:	af02      	add	r7, sp, #8
 800be9e:	6078      	str	r0, [r7, #4]
 800bea0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bea2:	4b23      	ldr	r3, [pc, #140]	@ (800bf30 <prvProcessExpiredTimer+0x98>)
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	68db      	ldr	r3, [r3, #12]
 800bea8:	68db      	ldr	r3, [r3, #12]
 800beaa:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800beac:	697b      	ldr	r3, [r7, #20]
 800beae:	3304      	adds	r3, #4
 800beb0:	4618      	mov	r0, r3
 800beb2:	f7fe fb01 	bl	800a4b8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800beb6:	697b      	ldr	r3, [r7, #20]
 800beb8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bebc:	f003 0304 	and.w	r3, r3, #4
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	d023      	beq.n	800bf0c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800bec4:	697b      	ldr	r3, [r7, #20]
 800bec6:	699a      	ldr	r2, [r3, #24]
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	18d1      	adds	r1, r2, r3
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	683a      	ldr	r2, [r7, #0]
 800bed0:	6978      	ldr	r0, [r7, #20]
 800bed2:	f000 f8d5 	bl	800c080 <prvInsertTimerInActiveList>
 800bed6:	4603      	mov	r3, r0
 800bed8:	2b00      	cmp	r3, #0
 800beda:	d020      	beq.n	800bf1e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bedc:	2300      	movs	r3, #0
 800bede:	9300      	str	r3, [sp, #0]
 800bee0:	2300      	movs	r3, #0
 800bee2:	687a      	ldr	r2, [r7, #4]
 800bee4:	2100      	movs	r1, #0
 800bee6:	6978      	ldr	r0, [r7, #20]
 800bee8:	f7ff ff88 	bl	800bdfc <xTimerGenericCommand>
 800beec:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800beee:	693b      	ldr	r3, [r7, #16]
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	d114      	bne.n	800bf1e <prvProcessExpiredTimer+0x86>
	__asm volatile
 800bef4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bef8:	f383 8811 	msr	BASEPRI, r3
 800befc:	f3bf 8f6f 	isb	sy
 800bf00:	f3bf 8f4f 	dsb	sy
 800bf04:	60fb      	str	r3, [r7, #12]
}
 800bf06:	bf00      	nop
 800bf08:	bf00      	nop
 800bf0a:	e7fd      	b.n	800bf08 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bf0c:	697b      	ldr	r3, [r7, #20]
 800bf0e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bf12:	f023 0301 	bic.w	r3, r3, #1
 800bf16:	b2da      	uxtb	r2, r3
 800bf18:	697b      	ldr	r3, [r7, #20]
 800bf1a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bf1e:	697b      	ldr	r3, [r7, #20]
 800bf20:	6a1b      	ldr	r3, [r3, #32]
 800bf22:	6978      	ldr	r0, [r7, #20]
 800bf24:	4798      	blx	r3
}
 800bf26:	bf00      	nop
 800bf28:	3718      	adds	r7, #24
 800bf2a:	46bd      	mov	sp, r7
 800bf2c:	bd80      	pop	{r7, pc}
 800bf2e:	bf00      	nop
 800bf30:	20005e00 	.word	0x20005e00

0800bf34 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800bf34:	b580      	push	{r7, lr}
 800bf36:	b084      	sub	sp, #16
 800bf38:	af00      	add	r7, sp, #0
 800bf3a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bf3c:	f107 0308 	add.w	r3, r7, #8
 800bf40:	4618      	mov	r0, r3
 800bf42:	f000 f859 	bl	800bff8 <prvGetNextExpireTime>
 800bf46:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800bf48:	68bb      	ldr	r3, [r7, #8]
 800bf4a:	4619      	mov	r1, r3
 800bf4c:	68f8      	ldr	r0, [r7, #12]
 800bf4e:	f000 f805 	bl	800bf5c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800bf52:	f000 f8d7 	bl	800c104 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bf56:	bf00      	nop
 800bf58:	e7f0      	b.n	800bf3c <prvTimerTask+0x8>
	...

0800bf5c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800bf5c:	b580      	push	{r7, lr}
 800bf5e:	b084      	sub	sp, #16
 800bf60:	af00      	add	r7, sp, #0
 800bf62:	6078      	str	r0, [r7, #4]
 800bf64:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800bf66:	f7ff fa0f 	bl	800b388 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bf6a:	f107 0308 	add.w	r3, r7, #8
 800bf6e:	4618      	mov	r0, r3
 800bf70:	f000 f866 	bl	800c040 <prvSampleTimeNow>
 800bf74:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800bf76:	68bb      	ldr	r3, [r7, #8]
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d130      	bne.n	800bfde <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800bf7c:	683b      	ldr	r3, [r7, #0]
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	d10a      	bne.n	800bf98 <prvProcessTimerOrBlockTask+0x3c>
 800bf82:	687a      	ldr	r2, [r7, #4]
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	429a      	cmp	r2, r3
 800bf88:	d806      	bhi.n	800bf98 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800bf8a:	f7ff fa0b 	bl	800b3a4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800bf8e:	68f9      	ldr	r1, [r7, #12]
 800bf90:	6878      	ldr	r0, [r7, #4]
 800bf92:	f7ff ff81 	bl	800be98 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800bf96:	e024      	b.n	800bfe2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800bf98:	683b      	ldr	r3, [r7, #0]
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d008      	beq.n	800bfb0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800bf9e:	4b13      	ldr	r3, [pc, #76]	@ (800bfec <prvProcessTimerOrBlockTask+0x90>)
 800bfa0:	681b      	ldr	r3, [r3, #0]
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	d101      	bne.n	800bfac <prvProcessTimerOrBlockTask+0x50>
 800bfa8:	2301      	movs	r3, #1
 800bfaa:	e000      	b.n	800bfae <prvProcessTimerOrBlockTask+0x52>
 800bfac:	2300      	movs	r3, #0
 800bfae:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800bfb0:	4b0f      	ldr	r3, [pc, #60]	@ (800bff0 <prvProcessTimerOrBlockTask+0x94>)
 800bfb2:	6818      	ldr	r0, [r3, #0]
 800bfb4:	687a      	ldr	r2, [r7, #4]
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	1ad3      	subs	r3, r2, r3
 800bfba:	683a      	ldr	r2, [r7, #0]
 800bfbc:	4619      	mov	r1, r3
 800bfbe:	f7fe ff6b 	bl	800ae98 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800bfc2:	f7ff f9ef 	bl	800b3a4 <xTaskResumeAll>
 800bfc6:	4603      	mov	r3, r0
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	d10a      	bne.n	800bfe2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800bfcc:	4b09      	ldr	r3, [pc, #36]	@ (800bff4 <prvProcessTimerOrBlockTask+0x98>)
 800bfce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bfd2:	601a      	str	r2, [r3, #0]
 800bfd4:	f3bf 8f4f 	dsb	sy
 800bfd8:	f3bf 8f6f 	isb	sy
}
 800bfdc:	e001      	b.n	800bfe2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800bfde:	f7ff f9e1 	bl	800b3a4 <xTaskResumeAll>
}
 800bfe2:	bf00      	nop
 800bfe4:	3710      	adds	r7, #16
 800bfe6:	46bd      	mov	sp, r7
 800bfe8:	bd80      	pop	{r7, pc}
 800bfea:	bf00      	nop
 800bfec:	20005e04 	.word	0x20005e04
 800bff0:	20005e08 	.word	0x20005e08
 800bff4:	e000ed04 	.word	0xe000ed04

0800bff8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800bff8:	b480      	push	{r7}
 800bffa:	b085      	sub	sp, #20
 800bffc:	af00      	add	r7, sp, #0
 800bffe:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c000:	4b0e      	ldr	r3, [pc, #56]	@ (800c03c <prvGetNextExpireTime+0x44>)
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	2b00      	cmp	r3, #0
 800c008:	d101      	bne.n	800c00e <prvGetNextExpireTime+0x16>
 800c00a:	2201      	movs	r2, #1
 800c00c:	e000      	b.n	800c010 <prvGetNextExpireTime+0x18>
 800c00e:	2200      	movs	r2, #0
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	2b00      	cmp	r3, #0
 800c01a:	d105      	bne.n	800c028 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c01c:	4b07      	ldr	r3, [pc, #28]	@ (800c03c <prvGetNextExpireTime+0x44>)
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	68db      	ldr	r3, [r3, #12]
 800c022:	681b      	ldr	r3, [r3, #0]
 800c024:	60fb      	str	r3, [r7, #12]
 800c026:	e001      	b.n	800c02c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c028:	2300      	movs	r3, #0
 800c02a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c02c:	68fb      	ldr	r3, [r7, #12]
}
 800c02e:	4618      	mov	r0, r3
 800c030:	3714      	adds	r7, #20
 800c032:	46bd      	mov	sp, r7
 800c034:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c038:	4770      	bx	lr
 800c03a:	bf00      	nop
 800c03c:	20005e00 	.word	0x20005e00

0800c040 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c040:	b580      	push	{r7, lr}
 800c042:	b084      	sub	sp, #16
 800c044:	af00      	add	r7, sp, #0
 800c046:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c048:	f7ff fa4a 	bl	800b4e0 <xTaskGetTickCount>
 800c04c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c04e:	4b0b      	ldr	r3, [pc, #44]	@ (800c07c <prvSampleTimeNow+0x3c>)
 800c050:	681b      	ldr	r3, [r3, #0]
 800c052:	68fa      	ldr	r2, [r7, #12]
 800c054:	429a      	cmp	r2, r3
 800c056:	d205      	bcs.n	800c064 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c058:	f000 f93a 	bl	800c2d0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	2201      	movs	r2, #1
 800c060:	601a      	str	r2, [r3, #0]
 800c062:	e002      	b.n	800c06a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	2200      	movs	r2, #0
 800c068:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c06a:	4a04      	ldr	r2, [pc, #16]	@ (800c07c <prvSampleTimeNow+0x3c>)
 800c06c:	68fb      	ldr	r3, [r7, #12]
 800c06e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c070:	68fb      	ldr	r3, [r7, #12]
}
 800c072:	4618      	mov	r0, r3
 800c074:	3710      	adds	r7, #16
 800c076:	46bd      	mov	sp, r7
 800c078:	bd80      	pop	{r7, pc}
 800c07a:	bf00      	nop
 800c07c:	20005e10 	.word	0x20005e10

0800c080 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c080:	b580      	push	{r7, lr}
 800c082:	b086      	sub	sp, #24
 800c084:	af00      	add	r7, sp, #0
 800c086:	60f8      	str	r0, [r7, #12]
 800c088:	60b9      	str	r1, [r7, #8]
 800c08a:	607a      	str	r2, [r7, #4]
 800c08c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c08e:	2300      	movs	r3, #0
 800c090:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c092:	68fb      	ldr	r3, [r7, #12]
 800c094:	68ba      	ldr	r2, [r7, #8]
 800c096:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c098:	68fb      	ldr	r3, [r7, #12]
 800c09a:	68fa      	ldr	r2, [r7, #12]
 800c09c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c09e:	68ba      	ldr	r2, [r7, #8]
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	429a      	cmp	r2, r3
 800c0a4:	d812      	bhi.n	800c0cc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c0a6:	687a      	ldr	r2, [r7, #4]
 800c0a8:	683b      	ldr	r3, [r7, #0]
 800c0aa:	1ad2      	subs	r2, r2, r3
 800c0ac:	68fb      	ldr	r3, [r7, #12]
 800c0ae:	699b      	ldr	r3, [r3, #24]
 800c0b0:	429a      	cmp	r2, r3
 800c0b2:	d302      	bcc.n	800c0ba <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c0b4:	2301      	movs	r3, #1
 800c0b6:	617b      	str	r3, [r7, #20]
 800c0b8:	e01b      	b.n	800c0f2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c0ba:	4b10      	ldr	r3, [pc, #64]	@ (800c0fc <prvInsertTimerInActiveList+0x7c>)
 800c0bc:	681a      	ldr	r2, [r3, #0]
 800c0be:	68fb      	ldr	r3, [r7, #12]
 800c0c0:	3304      	adds	r3, #4
 800c0c2:	4619      	mov	r1, r3
 800c0c4:	4610      	mov	r0, r2
 800c0c6:	f7fe f9be 	bl	800a446 <vListInsert>
 800c0ca:	e012      	b.n	800c0f2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c0cc:	687a      	ldr	r2, [r7, #4]
 800c0ce:	683b      	ldr	r3, [r7, #0]
 800c0d0:	429a      	cmp	r2, r3
 800c0d2:	d206      	bcs.n	800c0e2 <prvInsertTimerInActiveList+0x62>
 800c0d4:	68ba      	ldr	r2, [r7, #8]
 800c0d6:	683b      	ldr	r3, [r7, #0]
 800c0d8:	429a      	cmp	r2, r3
 800c0da:	d302      	bcc.n	800c0e2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c0dc:	2301      	movs	r3, #1
 800c0de:	617b      	str	r3, [r7, #20]
 800c0e0:	e007      	b.n	800c0f2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c0e2:	4b07      	ldr	r3, [pc, #28]	@ (800c100 <prvInsertTimerInActiveList+0x80>)
 800c0e4:	681a      	ldr	r2, [r3, #0]
 800c0e6:	68fb      	ldr	r3, [r7, #12]
 800c0e8:	3304      	adds	r3, #4
 800c0ea:	4619      	mov	r1, r3
 800c0ec:	4610      	mov	r0, r2
 800c0ee:	f7fe f9aa 	bl	800a446 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c0f2:	697b      	ldr	r3, [r7, #20]
}
 800c0f4:	4618      	mov	r0, r3
 800c0f6:	3718      	adds	r7, #24
 800c0f8:	46bd      	mov	sp, r7
 800c0fa:	bd80      	pop	{r7, pc}
 800c0fc:	20005e04 	.word	0x20005e04
 800c100:	20005e00 	.word	0x20005e00

0800c104 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c104:	b580      	push	{r7, lr}
 800c106:	b08e      	sub	sp, #56	@ 0x38
 800c108:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c10a:	e0ce      	b.n	800c2aa <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	2b00      	cmp	r3, #0
 800c110:	da19      	bge.n	800c146 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c112:	1d3b      	adds	r3, r7, #4
 800c114:	3304      	adds	r3, #4
 800c116:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c118:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d10b      	bne.n	800c136 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800c11e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c122:	f383 8811 	msr	BASEPRI, r3
 800c126:	f3bf 8f6f 	isb	sy
 800c12a:	f3bf 8f4f 	dsb	sy
 800c12e:	61fb      	str	r3, [r7, #28]
}
 800c130:	bf00      	nop
 800c132:	bf00      	nop
 800c134:	e7fd      	b.n	800c132 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c136:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c13c:	6850      	ldr	r0, [r2, #4]
 800c13e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c140:	6892      	ldr	r2, [r2, #8]
 800c142:	4611      	mov	r1, r2
 800c144:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	2b00      	cmp	r3, #0
 800c14a:	f2c0 80ae 	blt.w	800c2aa <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c14e:	68fb      	ldr	r3, [r7, #12]
 800c150:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c152:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c154:	695b      	ldr	r3, [r3, #20]
 800c156:	2b00      	cmp	r3, #0
 800c158:	d004      	beq.n	800c164 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c15a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c15c:	3304      	adds	r3, #4
 800c15e:	4618      	mov	r0, r3
 800c160:	f7fe f9aa 	bl	800a4b8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c164:	463b      	mov	r3, r7
 800c166:	4618      	mov	r0, r3
 800c168:	f7ff ff6a 	bl	800c040 <prvSampleTimeNow>
 800c16c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	2b09      	cmp	r3, #9
 800c172:	f200 8097 	bhi.w	800c2a4 <prvProcessReceivedCommands+0x1a0>
 800c176:	a201      	add	r2, pc, #4	@ (adr r2, 800c17c <prvProcessReceivedCommands+0x78>)
 800c178:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c17c:	0800c1a5 	.word	0x0800c1a5
 800c180:	0800c1a5 	.word	0x0800c1a5
 800c184:	0800c1a5 	.word	0x0800c1a5
 800c188:	0800c21b 	.word	0x0800c21b
 800c18c:	0800c22f 	.word	0x0800c22f
 800c190:	0800c27b 	.word	0x0800c27b
 800c194:	0800c1a5 	.word	0x0800c1a5
 800c198:	0800c1a5 	.word	0x0800c1a5
 800c19c:	0800c21b 	.word	0x0800c21b
 800c1a0:	0800c22f 	.word	0x0800c22f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c1a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c1a6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c1aa:	f043 0301 	orr.w	r3, r3, #1
 800c1ae:	b2da      	uxtb	r2, r3
 800c1b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c1b2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c1b6:	68ba      	ldr	r2, [r7, #8]
 800c1b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c1ba:	699b      	ldr	r3, [r3, #24]
 800c1bc:	18d1      	adds	r1, r2, r3
 800c1be:	68bb      	ldr	r3, [r7, #8]
 800c1c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c1c2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c1c4:	f7ff ff5c 	bl	800c080 <prvInsertTimerInActiveList>
 800c1c8:	4603      	mov	r3, r0
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	d06c      	beq.n	800c2a8 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c1ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c1d0:	6a1b      	ldr	r3, [r3, #32]
 800c1d2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c1d4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c1d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c1d8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c1dc:	f003 0304 	and.w	r3, r3, #4
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d061      	beq.n	800c2a8 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c1e4:	68ba      	ldr	r2, [r7, #8]
 800c1e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c1e8:	699b      	ldr	r3, [r3, #24]
 800c1ea:	441a      	add	r2, r3
 800c1ec:	2300      	movs	r3, #0
 800c1ee:	9300      	str	r3, [sp, #0]
 800c1f0:	2300      	movs	r3, #0
 800c1f2:	2100      	movs	r1, #0
 800c1f4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c1f6:	f7ff fe01 	bl	800bdfc <xTimerGenericCommand>
 800c1fa:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c1fc:	6a3b      	ldr	r3, [r7, #32]
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	d152      	bne.n	800c2a8 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800c202:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c206:	f383 8811 	msr	BASEPRI, r3
 800c20a:	f3bf 8f6f 	isb	sy
 800c20e:	f3bf 8f4f 	dsb	sy
 800c212:	61bb      	str	r3, [r7, #24]
}
 800c214:	bf00      	nop
 800c216:	bf00      	nop
 800c218:	e7fd      	b.n	800c216 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c21a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c21c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c220:	f023 0301 	bic.w	r3, r3, #1
 800c224:	b2da      	uxtb	r2, r3
 800c226:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c228:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800c22c:	e03d      	b.n	800c2aa <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c22e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c230:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c234:	f043 0301 	orr.w	r3, r3, #1
 800c238:	b2da      	uxtb	r2, r3
 800c23a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c23c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c240:	68ba      	ldr	r2, [r7, #8]
 800c242:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c244:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c246:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c248:	699b      	ldr	r3, [r3, #24]
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d10b      	bne.n	800c266 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800c24e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c252:	f383 8811 	msr	BASEPRI, r3
 800c256:	f3bf 8f6f 	isb	sy
 800c25a:	f3bf 8f4f 	dsb	sy
 800c25e:	617b      	str	r3, [r7, #20]
}
 800c260:	bf00      	nop
 800c262:	bf00      	nop
 800c264:	e7fd      	b.n	800c262 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c266:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c268:	699a      	ldr	r2, [r3, #24]
 800c26a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c26c:	18d1      	adds	r1, r2, r3
 800c26e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c270:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c272:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c274:	f7ff ff04 	bl	800c080 <prvInsertTimerInActiveList>
					break;
 800c278:	e017      	b.n	800c2aa <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c27a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c27c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c280:	f003 0302 	and.w	r3, r3, #2
 800c284:	2b00      	cmp	r3, #0
 800c286:	d103      	bne.n	800c290 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800c288:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c28a:	f000 fbe5 	bl	800ca58 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c28e:	e00c      	b.n	800c2aa <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c290:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c292:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c296:	f023 0301 	bic.w	r3, r3, #1
 800c29a:	b2da      	uxtb	r2, r3
 800c29c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c29e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800c2a2:	e002      	b.n	800c2aa <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800c2a4:	bf00      	nop
 800c2a6:	e000      	b.n	800c2aa <prvProcessReceivedCommands+0x1a6>
					break;
 800c2a8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c2aa:	4b08      	ldr	r3, [pc, #32]	@ (800c2cc <prvProcessReceivedCommands+0x1c8>)
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	1d39      	adds	r1, r7, #4
 800c2b0:	2200      	movs	r2, #0
 800c2b2:	4618      	mov	r0, r3
 800c2b4:	f7fe fbd4 	bl	800aa60 <xQueueReceive>
 800c2b8:	4603      	mov	r3, r0
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	f47f af26 	bne.w	800c10c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800c2c0:	bf00      	nop
 800c2c2:	bf00      	nop
 800c2c4:	3730      	adds	r7, #48	@ 0x30
 800c2c6:	46bd      	mov	sp, r7
 800c2c8:	bd80      	pop	{r7, pc}
 800c2ca:	bf00      	nop
 800c2cc:	20005e08 	.word	0x20005e08

0800c2d0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c2d0:	b580      	push	{r7, lr}
 800c2d2:	b088      	sub	sp, #32
 800c2d4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c2d6:	e049      	b.n	800c36c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c2d8:	4b2e      	ldr	r3, [pc, #184]	@ (800c394 <prvSwitchTimerLists+0xc4>)
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	68db      	ldr	r3, [r3, #12]
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c2e2:	4b2c      	ldr	r3, [pc, #176]	@ (800c394 <prvSwitchTimerLists+0xc4>)
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	68db      	ldr	r3, [r3, #12]
 800c2e8:	68db      	ldr	r3, [r3, #12]
 800c2ea:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c2ec:	68fb      	ldr	r3, [r7, #12]
 800c2ee:	3304      	adds	r3, #4
 800c2f0:	4618      	mov	r0, r3
 800c2f2:	f7fe f8e1 	bl	800a4b8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c2f6:	68fb      	ldr	r3, [r7, #12]
 800c2f8:	6a1b      	ldr	r3, [r3, #32]
 800c2fa:	68f8      	ldr	r0, [r7, #12]
 800c2fc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c2fe:	68fb      	ldr	r3, [r7, #12]
 800c300:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c304:	f003 0304 	and.w	r3, r3, #4
 800c308:	2b00      	cmp	r3, #0
 800c30a:	d02f      	beq.n	800c36c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c30c:	68fb      	ldr	r3, [r7, #12]
 800c30e:	699b      	ldr	r3, [r3, #24]
 800c310:	693a      	ldr	r2, [r7, #16]
 800c312:	4413      	add	r3, r2
 800c314:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c316:	68ba      	ldr	r2, [r7, #8]
 800c318:	693b      	ldr	r3, [r7, #16]
 800c31a:	429a      	cmp	r2, r3
 800c31c:	d90e      	bls.n	800c33c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c31e:	68fb      	ldr	r3, [r7, #12]
 800c320:	68ba      	ldr	r2, [r7, #8]
 800c322:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c324:	68fb      	ldr	r3, [r7, #12]
 800c326:	68fa      	ldr	r2, [r7, #12]
 800c328:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c32a:	4b1a      	ldr	r3, [pc, #104]	@ (800c394 <prvSwitchTimerLists+0xc4>)
 800c32c:	681a      	ldr	r2, [r3, #0]
 800c32e:	68fb      	ldr	r3, [r7, #12]
 800c330:	3304      	adds	r3, #4
 800c332:	4619      	mov	r1, r3
 800c334:	4610      	mov	r0, r2
 800c336:	f7fe f886 	bl	800a446 <vListInsert>
 800c33a:	e017      	b.n	800c36c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c33c:	2300      	movs	r3, #0
 800c33e:	9300      	str	r3, [sp, #0]
 800c340:	2300      	movs	r3, #0
 800c342:	693a      	ldr	r2, [r7, #16]
 800c344:	2100      	movs	r1, #0
 800c346:	68f8      	ldr	r0, [r7, #12]
 800c348:	f7ff fd58 	bl	800bdfc <xTimerGenericCommand>
 800c34c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	2b00      	cmp	r3, #0
 800c352:	d10b      	bne.n	800c36c <prvSwitchTimerLists+0x9c>
	__asm volatile
 800c354:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c358:	f383 8811 	msr	BASEPRI, r3
 800c35c:	f3bf 8f6f 	isb	sy
 800c360:	f3bf 8f4f 	dsb	sy
 800c364:	603b      	str	r3, [r7, #0]
}
 800c366:	bf00      	nop
 800c368:	bf00      	nop
 800c36a:	e7fd      	b.n	800c368 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c36c:	4b09      	ldr	r3, [pc, #36]	@ (800c394 <prvSwitchTimerLists+0xc4>)
 800c36e:	681b      	ldr	r3, [r3, #0]
 800c370:	681b      	ldr	r3, [r3, #0]
 800c372:	2b00      	cmp	r3, #0
 800c374:	d1b0      	bne.n	800c2d8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c376:	4b07      	ldr	r3, [pc, #28]	@ (800c394 <prvSwitchTimerLists+0xc4>)
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c37c:	4b06      	ldr	r3, [pc, #24]	@ (800c398 <prvSwitchTimerLists+0xc8>)
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	4a04      	ldr	r2, [pc, #16]	@ (800c394 <prvSwitchTimerLists+0xc4>)
 800c382:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c384:	4a04      	ldr	r2, [pc, #16]	@ (800c398 <prvSwitchTimerLists+0xc8>)
 800c386:	697b      	ldr	r3, [r7, #20]
 800c388:	6013      	str	r3, [r2, #0]
}
 800c38a:	bf00      	nop
 800c38c:	3718      	adds	r7, #24
 800c38e:	46bd      	mov	sp, r7
 800c390:	bd80      	pop	{r7, pc}
 800c392:	bf00      	nop
 800c394:	20005e00 	.word	0x20005e00
 800c398:	20005e04 	.word	0x20005e04

0800c39c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c39c:	b580      	push	{r7, lr}
 800c39e:	b082      	sub	sp, #8
 800c3a0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c3a2:	f000 f969 	bl	800c678 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c3a6:	4b15      	ldr	r3, [pc, #84]	@ (800c3fc <prvCheckForValidListAndQueue+0x60>)
 800c3a8:	681b      	ldr	r3, [r3, #0]
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	d120      	bne.n	800c3f0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c3ae:	4814      	ldr	r0, [pc, #80]	@ (800c400 <prvCheckForValidListAndQueue+0x64>)
 800c3b0:	f7fd fff8 	bl	800a3a4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c3b4:	4813      	ldr	r0, [pc, #76]	@ (800c404 <prvCheckForValidListAndQueue+0x68>)
 800c3b6:	f7fd fff5 	bl	800a3a4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c3ba:	4b13      	ldr	r3, [pc, #76]	@ (800c408 <prvCheckForValidListAndQueue+0x6c>)
 800c3bc:	4a10      	ldr	r2, [pc, #64]	@ (800c400 <prvCheckForValidListAndQueue+0x64>)
 800c3be:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c3c0:	4b12      	ldr	r3, [pc, #72]	@ (800c40c <prvCheckForValidListAndQueue+0x70>)
 800c3c2:	4a10      	ldr	r2, [pc, #64]	@ (800c404 <prvCheckForValidListAndQueue+0x68>)
 800c3c4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c3c6:	2300      	movs	r3, #0
 800c3c8:	9300      	str	r3, [sp, #0]
 800c3ca:	4b11      	ldr	r3, [pc, #68]	@ (800c410 <prvCheckForValidListAndQueue+0x74>)
 800c3cc:	4a11      	ldr	r2, [pc, #68]	@ (800c414 <prvCheckForValidListAndQueue+0x78>)
 800c3ce:	2110      	movs	r1, #16
 800c3d0:	200a      	movs	r0, #10
 800c3d2:	f7fe f905 	bl	800a5e0 <xQueueGenericCreateStatic>
 800c3d6:	4603      	mov	r3, r0
 800c3d8:	4a08      	ldr	r2, [pc, #32]	@ (800c3fc <prvCheckForValidListAndQueue+0x60>)
 800c3da:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c3dc:	4b07      	ldr	r3, [pc, #28]	@ (800c3fc <prvCheckForValidListAndQueue+0x60>)
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	d005      	beq.n	800c3f0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c3e4:	4b05      	ldr	r3, [pc, #20]	@ (800c3fc <prvCheckForValidListAndQueue+0x60>)
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	490b      	ldr	r1, [pc, #44]	@ (800c418 <prvCheckForValidListAndQueue+0x7c>)
 800c3ea:	4618      	mov	r0, r3
 800c3ec:	f7fe fd2a 	bl	800ae44 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c3f0:	f000 f974 	bl	800c6dc <vPortExitCritical>
}
 800c3f4:	bf00      	nop
 800c3f6:	46bd      	mov	sp, r7
 800c3f8:	bd80      	pop	{r7, pc}
 800c3fa:	bf00      	nop
 800c3fc:	20005e08 	.word	0x20005e08
 800c400:	20005dd8 	.word	0x20005dd8
 800c404:	20005dec 	.word	0x20005dec
 800c408:	20005e00 	.word	0x20005e00
 800c40c:	20005e04 	.word	0x20005e04
 800c410:	20005eb4 	.word	0x20005eb4
 800c414:	20005e14 	.word	0x20005e14
 800c418:	0801d4e0 	.word	0x0801d4e0

0800c41c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c41c:	b480      	push	{r7}
 800c41e:	b085      	sub	sp, #20
 800c420:	af00      	add	r7, sp, #0
 800c422:	60f8      	str	r0, [r7, #12]
 800c424:	60b9      	str	r1, [r7, #8]
 800c426:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c428:	68fb      	ldr	r3, [r7, #12]
 800c42a:	3b04      	subs	r3, #4
 800c42c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c42e:	68fb      	ldr	r3, [r7, #12]
 800c430:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800c434:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c436:	68fb      	ldr	r3, [r7, #12]
 800c438:	3b04      	subs	r3, #4
 800c43a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c43c:	68bb      	ldr	r3, [r7, #8]
 800c43e:	f023 0201 	bic.w	r2, r3, #1
 800c442:	68fb      	ldr	r3, [r7, #12]
 800c444:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c446:	68fb      	ldr	r3, [r7, #12]
 800c448:	3b04      	subs	r3, #4
 800c44a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c44c:	4a0c      	ldr	r2, [pc, #48]	@ (800c480 <pxPortInitialiseStack+0x64>)
 800c44e:	68fb      	ldr	r3, [r7, #12]
 800c450:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c452:	68fb      	ldr	r3, [r7, #12]
 800c454:	3b14      	subs	r3, #20
 800c456:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c458:	687a      	ldr	r2, [r7, #4]
 800c45a:	68fb      	ldr	r3, [r7, #12]
 800c45c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c45e:	68fb      	ldr	r3, [r7, #12]
 800c460:	3b04      	subs	r3, #4
 800c462:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c464:	68fb      	ldr	r3, [r7, #12]
 800c466:	f06f 0202 	mvn.w	r2, #2
 800c46a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c46c:	68fb      	ldr	r3, [r7, #12]
 800c46e:	3b20      	subs	r3, #32
 800c470:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c472:	68fb      	ldr	r3, [r7, #12]
}
 800c474:	4618      	mov	r0, r3
 800c476:	3714      	adds	r7, #20
 800c478:	46bd      	mov	sp, r7
 800c47a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c47e:	4770      	bx	lr
 800c480:	0800c485 	.word	0x0800c485

0800c484 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c484:	b480      	push	{r7}
 800c486:	b085      	sub	sp, #20
 800c488:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c48a:	2300      	movs	r3, #0
 800c48c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c48e:	4b13      	ldr	r3, [pc, #76]	@ (800c4dc <prvTaskExitError+0x58>)
 800c490:	681b      	ldr	r3, [r3, #0]
 800c492:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c496:	d00b      	beq.n	800c4b0 <prvTaskExitError+0x2c>
	__asm volatile
 800c498:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c49c:	f383 8811 	msr	BASEPRI, r3
 800c4a0:	f3bf 8f6f 	isb	sy
 800c4a4:	f3bf 8f4f 	dsb	sy
 800c4a8:	60fb      	str	r3, [r7, #12]
}
 800c4aa:	bf00      	nop
 800c4ac:	bf00      	nop
 800c4ae:	e7fd      	b.n	800c4ac <prvTaskExitError+0x28>
	__asm volatile
 800c4b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c4b4:	f383 8811 	msr	BASEPRI, r3
 800c4b8:	f3bf 8f6f 	isb	sy
 800c4bc:	f3bf 8f4f 	dsb	sy
 800c4c0:	60bb      	str	r3, [r7, #8]
}
 800c4c2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c4c4:	bf00      	nop
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d0fc      	beq.n	800c4c6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c4cc:	bf00      	nop
 800c4ce:	bf00      	nop
 800c4d0:	3714      	adds	r7, #20
 800c4d2:	46bd      	mov	sp, r7
 800c4d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4d8:	4770      	bx	lr
 800c4da:	bf00      	nop
 800c4dc:	20000010 	.word	0x20000010

0800c4e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c4e0:	4b07      	ldr	r3, [pc, #28]	@ (800c500 <pxCurrentTCBConst2>)
 800c4e2:	6819      	ldr	r1, [r3, #0]
 800c4e4:	6808      	ldr	r0, [r1, #0]
 800c4e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4ea:	f380 8809 	msr	PSP, r0
 800c4ee:	f3bf 8f6f 	isb	sy
 800c4f2:	f04f 0000 	mov.w	r0, #0
 800c4f6:	f380 8811 	msr	BASEPRI, r0
 800c4fa:	4770      	bx	lr
 800c4fc:	f3af 8000 	nop.w

0800c500 <pxCurrentTCBConst2>:
 800c500:	200058d8 	.word	0x200058d8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c504:	bf00      	nop
 800c506:	bf00      	nop

0800c508 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c508:	4808      	ldr	r0, [pc, #32]	@ (800c52c <prvPortStartFirstTask+0x24>)
 800c50a:	6800      	ldr	r0, [r0, #0]
 800c50c:	6800      	ldr	r0, [r0, #0]
 800c50e:	f380 8808 	msr	MSP, r0
 800c512:	f04f 0000 	mov.w	r0, #0
 800c516:	f380 8814 	msr	CONTROL, r0
 800c51a:	b662      	cpsie	i
 800c51c:	b661      	cpsie	f
 800c51e:	f3bf 8f4f 	dsb	sy
 800c522:	f3bf 8f6f 	isb	sy
 800c526:	df00      	svc	0
 800c528:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c52a:	bf00      	nop
 800c52c:	e000ed08 	.word	0xe000ed08

0800c530 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c530:	b580      	push	{r7, lr}
 800c532:	b086      	sub	sp, #24
 800c534:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c536:	4b47      	ldr	r3, [pc, #284]	@ (800c654 <xPortStartScheduler+0x124>)
 800c538:	681b      	ldr	r3, [r3, #0]
 800c53a:	4a47      	ldr	r2, [pc, #284]	@ (800c658 <xPortStartScheduler+0x128>)
 800c53c:	4293      	cmp	r3, r2
 800c53e:	d10b      	bne.n	800c558 <xPortStartScheduler+0x28>
	__asm volatile
 800c540:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c544:	f383 8811 	msr	BASEPRI, r3
 800c548:	f3bf 8f6f 	isb	sy
 800c54c:	f3bf 8f4f 	dsb	sy
 800c550:	60fb      	str	r3, [r7, #12]
}
 800c552:	bf00      	nop
 800c554:	bf00      	nop
 800c556:	e7fd      	b.n	800c554 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c558:	4b3e      	ldr	r3, [pc, #248]	@ (800c654 <xPortStartScheduler+0x124>)
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	4a3f      	ldr	r2, [pc, #252]	@ (800c65c <xPortStartScheduler+0x12c>)
 800c55e:	4293      	cmp	r3, r2
 800c560:	d10b      	bne.n	800c57a <xPortStartScheduler+0x4a>
	__asm volatile
 800c562:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c566:	f383 8811 	msr	BASEPRI, r3
 800c56a:	f3bf 8f6f 	isb	sy
 800c56e:	f3bf 8f4f 	dsb	sy
 800c572:	613b      	str	r3, [r7, #16]
}
 800c574:	bf00      	nop
 800c576:	bf00      	nop
 800c578:	e7fd      	b.n	800c576 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c57a:	4b39      	ldr	r3, [pc, #228]	@ (800c660 <xPortStartScheduler+0x130>)
 800c57c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c57e:	697b      	ldr	r3, [r7, #20]
 800c580:	781b      	ldrb	r3, [r3, #0]
 800c582:	b2db      	uxtb	r3, r3
 800c584:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c586:	697b      	ldr	r3, [r7, #20]
 800c588:	22ff      	movs	r2, #255	@ 0xff
 800c58a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c58c:	697b      	ldr	r3, [r7, #20]
 800c58e:	781b      	ldrb	r3, [r3, #0]
 800c590:	b2db      	uxtb	r3, r3
 800c592:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c594:	78fb      	ldrb	r3, [r7, #3]
 800c596:	b2db      	uxtb	r3, r3
 800c598:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800c59c:	b2da      	uxtb	r2, r3
 800c59e:	4b31      	ldr	r3, [pc, #196]	@ (800c664 <xPortStartScheduler+0x134>)
 800c5a0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c5a2:	4b31      	ldr	r3, [pc, #196]	@ (800c668 <xPortStartScheduler+0x138>)
 800c5a4:	2207      	movs	r2, #7
 800c5a6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c5a8:	e009      	b.n	800c5be <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800c5aa:	4b2f      	ldr	r3, [pc, #188]	@ (800c668 <xPortStartScheduler+0x138>)
 800c5ac:	681b      	ldr	r3, [r3, #0]
 800c5ae:	3b01      	subs	r3, #1
 800c5b0:	4a2d      	ldr	r2, [pc, #180]	@ (800c668 <xPortStartScheduler+0x138>)
 800c5b2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c5b4:	78fb      	ldrb	r3, [r7, #3]
 800c5b6:	b2db      	uxtb	r3, r3
 800c5b8:	005b      	lsls	r3, r3, #1
 800c5ba:	b2db      	uxtb	r3, r3
 800c5bc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c5be:	78fb      	ldrb	r3, [r7, #3]
 800c5c0:	b2db      	uxtb	r3, r3
 800c5c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c5c6:	2b80      	cmp	r3, #128	@ 0x80
 800c5c8:	d0ef      	beq.n	800c5aa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c5ca:	4b27      	ldr	r3, [pc, #156]	@ (800c668 <xPortStartScheduler+0x138>)
 800c5cc:	681b      	ldr	r3, [r3, #0]
 800c5ce:	f1c3 0307 	rsb	r3, r3, #7
 800c5d2:	2b04      	cmp	r3, #4
 800c5d4:	d00b      	beq.n	800c5ee <xPortStartScheduler+0xbe>
	__asm volatile
 800c5d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c5da:	f383 8811 	msr	BASEPRI, r3
 800c5de:	f3bf 8f6f 	isb	sy
 800c5e2:	f3bf 8f4f 	dsb	sy
 800c5e6:	60bb      	str	r3, [r7, #8]
}
 800c5e8:	bf00      	nop
 800c5ea:	bf00      	nop
 800c5ec:	e7fd      	b.n	800c5ea <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c5ee:	4b1e      	ldr	r3, [pc, #120]	@ (800c668 <xPortStartScheduler+0x138>)
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	021b      	lsls	r3, r3, #8
 800c5f4:	4a1c      	ldr	r2, [pc, #112]	@ (800c668 <xPortStartScheduler+0x138>)
 800c5f6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c5f8:	4b1b      	ldr	r3, [pc, #108]	@ (800c668 <xPortStartScheduler+0x138>)
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800c600:	4a19      	ldr	r2, [pc, #100]	@ (800c668 <xPortStartScheduler+0x138>)
 800c602:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	b2da      	uxtb	r2, r3
 800c608:	697b      	ldr	r3, [r7, #20]
 800c60a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c60c:	4b17      	ldr	r3, [pc, #92]	@ (800c66c <xPortStartScheduler+0x13c>)
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	4a16      	ldr	r2, [pc, #88]	@ (800c66c <xPortStartScheduler+0x13c>)
 800c612:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800c616:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c618:	4b14      	ldr	r3, [pc, #80]	@ (800c66c <xPortStartScheduler+0x13c>)
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	4a13      	ldr	r2, [pc, #76]	@ (800c66c <xPortStartScheduler+0x13c>)
 800c61e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800c622:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c624:	f000 f8da 	bl	800c7dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c628:	4b11      	ldr	r3, [pc, #68]	@ (800c670 <xPortStartScheduler+0x140>)
 800c62a:	2200      	movs	r2, #0
 800c62c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c62e:	f000 f8f9 	bl	800c824 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c632:	4b10      	ldr	r3, [pc, #64]	@ (800c674 <xPortStartScheduler+0x144>)
 800c634:	681b      	ldr	r3, [r3, #0]
 800c636:	4a0f      	ldr	r2, [pc, #60]	@ (800c674 <xPortStartScheduler+0x144>)
 800c638:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800c63c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c63e:	f7ff ff63 	bl	800c508 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c642:	f7ff f817 	bl	800b674 <vTaskSwitchContext>
	prvTaskExitError();
 800c646:	f7ff ff1d 	bl	800c484 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c64a:	2300      	movs	r3, #0
}
 800c64c:	4618      	mov	r0, r3
 800c64e:	3718      	adds	r7, #24
 800c650:	46bd      	mov	sp, r7
 800c652:	bd80      	pop	{r7, pc}
 800c654:	e000ed00 	.word	0xe000ed00
 800c658:	410fc271 	.word	0x410fc271
 800c65c:	410fc270 	.word	0x410fc270
 800c660:	e000e400 	.word	0xe000e400
 800c664:	20005f04 	.word	0x20005f04
 800c668:	20005f08 	.word	0x20005f08
 800c66c:	e000ed20 	.word	0xe000ed20
 800c670:	20000010 	.word	0x20000010
 800c674:	e000ef34 	.word	0xe000ef34

0800c678 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c678:	b480      	push	{r7}
 800c67a:	b083      	sub	sp, #12
 800c67c:	af00      	add	r7, sp, #0
	__asm volatile
 800c67e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c682:	f383 8811 	msr	BASEPRI, r3
 800c686:	f3bf 8f6f 	isb	sy
 800c68a:	f3bf 8f4f 	dsb	sy
 800c68e:	607b      	str	r3, [r7, #4]
}
 800c690:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c692:	4b10      	ldr	r3, [pc, #64]	@ (800c6d4 <vPortEnterCritical+0x5c>)
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	3301      	adds	r3, #1
 800c698:	4a0e      	ldr	r2, [pc, #56]	@ (800c6d4 <vPortEnterCritical+0x5c>)
 800c69a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c69c:	4b0d      	ldr	r3, [pc, #52]	@ (800c6d4 <vPortEnterCritical+0x5c>)
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	2b01      	cmp	r3, #1
 800c6a2:	d110      	bne.n	800c6c6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c6a4:	4b0c      	ldr	r3, [pc, #48]	@ (800c6d8 <vPortEnterCritical+0x60>)
 800c6a6:	681b      	ldr	r3, [r3, #0]
 800c6a8:	b2db      	uxtb	r3, r3
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	d00b      	beq.n	800c6c6 <vPortEnterCritical+0x4e>
	__asm volatile
 800c6ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c6b2:	f383 8811 	msr	BASEPRI, r3
 800c6b6:	f3bf 8f6f 	isb	sy
 800c6ba:	f3bf 8f4f 	dsb	sy
 800c6be:	603b      	str	r3, [r7, #0]
}
 800c6c0:	bf00      	nop
 800c6c2:	bf00      	nop
 800c6c4:	e7fd      	b.n	800c6c2 <vPortEnterCritical+0x4a>
	}
}
 800c6c6:	bf00      	nop
 800c6c8:	370c      	adds	r7, #12
 800c6ca:	46bd      	mov	sp, r7
 800c6cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6d0:	4770      	bx	lr
 800c6d2:	bf00      	nop
 800c6d4:	20000010 	.word	0x20000010
 800c6d8:	e000ed04 	.word	0xe000ed04

0800c6dc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c6dc:	b480      	push	{r7}
 800c6de:	b083      	sub	sp, #12
 800c6e0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c6e2:	4b12      	ldr	r3, [pc, #72]	@ (800c72c <vPortExitCritical+0x50>)
 800c6e4:	681b      	ldr	r3, [r3, #0]
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	d10b      	bne.n	800c702 <vPortExitCritical+0x26>
	__asm volatile
 800c6ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c6ee:	f383 8811 	msr	BASEPRI, r3
 800c6f2:	f3bf 8f6f 	isb	sy
 800c6f6:	f3bf 8f4f 	dsb	sy
 800c6fa:	607b      	str	r3, [r7, #4]
}
 800c6fc:	bf00      	nop
 800c6fe:	bf00      	nop
 800c700:	e7fd      	b.n	800c6fe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c702:	4b0a      	ldr	r3, [pc, #40]	@ (800c72c <vPortExitCritical+0x50>)
 800c704:	681b      	ldr	r3, [r3, #0]
 800c706:	3b01      	subs	r3, #1
 800c708:	4a08      	ldr	r2, [pc, #32]	@ (800c72c <vPortExitCritical+0x50>)
 800c70a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c70c:	4b07      	ldr	r3, [pc, #28]	@ (800c72c <vPortExitCritical+0x50>)
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	2b00      	cmp	r3, #0
 800c712:	d105      	bne.n	800c720 <vPortExitCritical+0x44>
 800c714:	2300      	movs	r3, #0
 800c716:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c718:	683b      	ldr	r3, [r7, #0]
 800c71a:	f383 8811 	msr	BASEPRI, r3
}
 800c71e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c720:	bf00      	nop
 800c722:	370c      	adds	r7, #12
 800c724:	46bd      	mov	sp, r7
 800c726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c72a:	4770      	bx	lr
 800c72c:	20000010 	.word	0x20000010

0800c730 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c730:	f3ef 8009 	mrs	r0, PSP
 800c734:	f3bf 8f6f 	isb	sy
 800c738:	4b15      	ldr	r3, [pc, #84]	@ (800c790 <pxCurrentTCBConst>)
 800c73a:	681a      	ldr	r2, [r3, #0]
 800c73c:	f01e 0f10 	tst.w	lr, #16
 800c740:	bf08      	it	eq
 800c742:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c746:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c74a:	6010      	str	r0, [r2, #0]
 800c74c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c750:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800c754:	f380 8811 	msr	BASEPRI, r0
 800c758:	f3bf 8f4f 	dsb	sy
 800c75c:	f3bf 8f6f 	isb	sy
 800c760:	f7fe ff88 	bl	800b674 <vTaskSwitchContext>
 800c764:	f04f 0000 	mov.w	r0, #0
 800c768:	f380 8811 	msr	BASEPRI, r0
 800c76c:	bc09      	pop	{r0, r3}
 800c76e:	6819      	ldr	r1, [r3, #0]
 800c770:	6808      	ldr	r0, [r1, #0]
 800c772:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c776:	f01e 0f10 	tst.w	lr, #16
 800c77a:	bf08      	it	eq
 800c77c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c780:	f380 8809 	msr	PSP, r0
 800c784:	f3bf 8f6f 	isb	sy
 800c788:	4770      	bx	lr
 800c78a:	bf00      	nop
 800c78c:	f3af 8000 	nop.w

0800c790 <pxCurrentTCBConst>:
 800c790:	200058d8 	.word	0x200058d8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c794:	bf00      	nop
 800c796:	bf00      	nop

0800c798 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c798:	b580      	push	{r7, lr}
 800c79a:	b082      	sub	sp, #8
 800c79c:	af00      	add	r7, sp, #0
	__asm volatile
 800c79e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c7a2:	f383 8811 	msr	BASEPRI, r3
 800c7a6:	f3bf 8f6f 	isb	sy
 800c7aa:	f3bf 8f4f 	dsb	sy
 800c7ae:	607b      	str	r3, [r7, #4]
}
 800c7b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c7b2:	f7fe fea5 	bl	800b500 <xTaskIncrementTick>
 800c7b6:	4603      	mov	r3, r0
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	d003      	beq.n	800c7c4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c7bc:	4b06      	ldr	r3, [pc, #24]	@ (800c7d8 <xPortSysTickHandler+0x40>)
 800c7be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c7c2:	601a      	str	r2, [r3, #0]
 800c7c4:	2300      	movs	r3, #0
 800c7c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c7c8:	683b      	ldr	r3, [r7, #0]
 800c7ca:	f383 8811 	msr	BASEPRI, r3
}
 800c7ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c7d0:	bf00      	nop
 800c7d2:	3708      	adds	r7, #8
 800c7d4:	46bd      	mov	sp, r7
 800c7d6:	bd80      	pop	{r7, pc}
 800c7d8:	e000ed04 	.word	0xe000ed04

0800c7dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c7dc:	b480      	push	{r7}
 800c7de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c7e0:	4b0b      	ldr	r3, [pc, #44]	@ (800c810 <vPortSetupTimerInterrupt+0x34>)
 800c7e2:	2200      	movs	r2, #0
 800c7e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c7e6:	4b0b      	ldr	r3, [pc, #44]	@ (800c814 <vPortSetupTimerInterrupt+0x38>)
 800c7e8:	2200      	movs	r2, #0
 800c7ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c7ec:	4b0a      	ldr	r3, [pc, #40]	@ (800c818 <vPortSetupTimerInterrupt+0x3c>)
 800c7ee:	681b      	ldr	r3, [r3, #0]
 800c7f0:	4a0a      	ldr	r2, [pc, #40]	@ (800c81c <vPortSetupTimerInterrupt+0x40>)
 800c7f2:	fba2 2303 	umull	r2, r3, r2, r3
 800c7f6:	099b      	lsrs	r3, r3, #6
 800c7f8:	4a09      	ldr	r2, [pc, #36]	@ (800c820 <vPortSetupTimerInterrupt+0x44>)
 800c7fa:	3b01      	subs	r3, #1
 800c7fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c7fe:	4b04      	ldr	r3, [pc, #16]	@ (800c810 <vPortSetupTimerInterrupt+0x34>)
 800c800:	2207      	movs	r2, #7
 800c802:	601a      	str	r2, [r3, #0]
}
 800c804:	bf00      	nop
 800c806:	46bd      	mov	sp, r7
 800c808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c80c:	4770      	bx	lr
 800c80e:	bf00      	nop
 800c810:	e000e010 	.word	0xe000e010
 800c814:	e000e018 	.word	0xe000e018
 800c818:	20000004 	.word	0x20000004
 800c81c:	10624dd3 	.word	0x10624dd3
 800c820:	e000e014 	.word	0xe000e014

0800c824 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c824:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800c834 <vPortEnableVFP+0x10>
 800c828:	6801      	ldr	r1, [r0, #0]
 800c82a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800c82e:	6001      	str	r1, [r0, #0]
 800c830:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c832:	bf00      	nop
 800c834:	e000ed88 	.word	0xe000ed88

0800c838 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c838:	b480      	push	{r7}
 800c83a:	b085      	sub	sp, #20
 800c83c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c83e:	f3ef 8305 	mrs	r3, IPSR
 800c842:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c844:	68fb      	ldr	r3, [r7, #12]
 800c846:	2b0f      	cmp	r3, #15
 800c848:	d915      	bls.n	800c876 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c84a:	4a18      	ldr	r2, [pc, #96]	@ (800c8ac <vPortValidateInterruptPriority+0x74>)
 800c84c:	68fb      	ldr	r3, [r7, #12]
 800c84e:	4413      	add	r3, r2
 800c850:	781b      	ldrb	r3, [r3, #0]
 800c852:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c854:	4b16      	ldr	r3, [pc, #88]	@ (800c8b0 <vPortValidateInterruptPriority+0x78>)
 800c856:	781b      	ldrb	r3, [r3, #0]
 800c858:	7afa      	ldrb	r2, [r7, #11]
 800c85a:	429a      	cmp	r2, r3
 800c85c:	d20b      	bcs.n	800c876 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800c85e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c862:	f383 8811 	msr	BASEPRI, r3
 800c866:	f3bf 8f6f 	isb	sy
 800c86a:	f3bf 8f4f 	dsb	sy
 800c86e:	607b      	str	r3, [r7, #4]
}
 800c870:	bf00      	nop
 800c872:	bf00      	nop
 800c874:	e7fd      	b.n	800c872 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c876:	4b0f      	ldr	r3, [pc, #60]	@ (800c8b4 <vPortValidateInterruptPriority+0x7c>)
 800c878:	681b      	ldr	r3, [r3, #0]
 800c87a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800c87e:	4b0e      	ldr	r3, [pc, #56]	@ (800c8b8 <vPortValidateInterruptPriority+0x80>)
 800c880:	681b      	ldr	r3, [r3, #0]
 800c882:	429a      	cmp	r2, r3
 800c884:	d90b      	bls.n	800c89e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800c886:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c88a:	f383 8811 	msr	BASEPRI, r3
 800c88e:	f3bf 8f6f 	isb	sy
 800c892:	f3bf 8f4f 	dsb	sy
 800c896:	603b      	str	r3, [r7, #0]
}
 800c898:	bf00      	nop
 800c89a:	bf00      	nop
 800c89c:	e7fd      	b.n	800c89a <vPortValidateInterruptPriority+0x62>
	}
 800c89e:	bf00      	nop
 800c8a0:	3714      	adds	r7, #20
 800c8a2:	46bd      	mov	sp, r7
 800c8a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8a8:	4770      	bx	lr
 800c8aa:	bf00      	nop
 800c8ac:	e000e3f0 	.word	0xe000e3f0
 800c8b0:	20005f04 	.word	0x20005f04
 800c8b4:	e000ed0c 	.word	0xe000ed0c
 800c8b8:	20005f08 	.word	0x20005f08

0800c8bc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c8bc:	b580      	push	{r7, lr}
 800c8be:	b08a      	sub	sp, #40	@ 0x28
 800c8c0:	af00      	add	r7, sp, #0
 800c8c2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c8c4:	2300      	movs	r3, #0
 800c8c6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c8c8:	f7fe fd5e 	bl	800b388 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c8cc:	4b5c      	ldr	r3, [pc, #368]	@ (800ca40 <pvPortMalloc+0x184>)
 800c8ce:	681b      	ldr	r3, [r3, #0]
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	d101      	bne.n	800c8d8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c8d4:	f000 f924 	bl	800cb20 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c8d8:	4b5a      	ldr	r3, [pc, #360]	@ (800ca44 <pvPortMalloc+0x188>)
 800c8da:	681a      	ldr	r2, [r3, #0]
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	4013      	ands	r3, r2
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	f040 8095 	bne.w	800ca10 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	d01e      	beq.n	800c92a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800c8ec:	2208      	movs	r2, #8
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	4413      	add	r3, r2
 800c8f2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	f003 0307 	and.w	r3, r3, #7
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	d015      	beq.n	800c92a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	f023 0307 	bic.w	r3, r3, #7
 800c904:	3308      	adds	r3, #8
 800c906:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	f003 0307 	and.w	r3, r3, #7
 800c90e:	2b00      	cmp	r3, #0
 800c910:	d00b      	beq.n	800c92a <pvPortMalloc+0x6e>
	__asm volatile
 800c912:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c916:	f383 8811 	msr	BASEPRI, r3
 800c91a:	f3bf 8f6f 	isb	sy
 800c91e:	f3bf 8f4f 	dsb	sy
 800c922:	617b      	str	r3, [r7, #20]
}
 800c924:	bf00      	nop
 800c926:	bf00      	nop
 800c928:	e7fd      	b.n	800c926 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	d06f      	beq.n	800ca10 <pvPortMalloc+0x154>
 800c930:	4b45      	ldr	r3, [pc, #276]	@ (800ca48 <pvPortMalloc+0x18c>)
 800c932:	681b      	ldr	r3, [r3, #0]
 800c934:	687a      	ldr	r2, [r7, #4]
 800c936:	429a      	cmp	r2, r3
 800c938:	d86a      	bhi.n	800ca10 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c93a:	4b44      	ldr	r3, [pc, #272]	@ (800ca4c <pvPortMalloc+0x190>)
 800c93c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c93e:	4b43      	ldr	r3, [pc, #268]	@ (800ca4c <pvPortMalloc+0x190>)
 800c940:	681b      	ldr	r3, [r3, #0]
 800c942:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c944:	e004      	b.n	800c950 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800c946:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c948:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c94a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c94c:	681b      	ldr	r3, [r3, #0]
 800c94e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c950:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c952:	685b      	ldr	r3, [r3, #4]
 800c954:	687a      	ldr	r2, [r7, #4]
 800c956:	429a      	cmp	r2, r3
 800c958:	d903      	bls.n	800c962 <pvPortMalloc+0xa6>
 800c95a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	2b00      	cmp	r3, #0
 800c960:	d1f1      	bne.n	800c946 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c962:	4b37      	ldr	r3, [pc, #220]	@ (800ca40 <pvPortMalloc+0x184>)
 800c964:	681b      	ldr	r3, [r3, #0]
 800c966:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c968:	429a      	cmp	r2, r3
 800c96a:	d051      	beq.n	800ca10 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c96c:	6a3b      	ldr	r3, [r7, #32]
 800c96e:	681b      	ldr	r3, [r3, #0]
 800c970:	2208      	movs	r2, #8
 800c972:	4413      	add	r3, r2
 800c974:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c976:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c978:	681a      	ldr	r2, [r3, #0]
 800c97a:	6a3b      	ldr	r3, [r7, #32]
 800c97c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c97e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c980:	685a      	ldr	r2, [r3, #4]
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	1ad2      	subs	r2, r2, r3
 800c986:	2308      	movs	r3, #8
 800c988:	005b      	lsls	r3, r3, #1
 800c98a:	429a      	cmp	r2, r3
 800c98c:	d920      	bls.n	800c9d0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c98e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	4413      	add	r3, r2
 800c994:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c996:	69bb      	ldr	r3, [r7, #24]
 800c998:	f003 0307 	and.w	r3, r3, #7
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	d00b      	beq.n	800c9b8 <pvPortMalloc+0xfc>
	__asm volatile
 800c9a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c9a4:	f383 8811 	msr	BASEPRI, r3
 800c9a8:	f3bf 8f6f 	isb	sy
 800c9ac:	f3bf 8f4f 	dsb	sy
 800c9b0:	613b      	str	r3, [r7, #16]
}
 800c9b2:	bf00      	nop
 800c9b4:	bf00      	nop
 800c9b6:	e7fd      	b.n	800c9b4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c9b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9ba:	685a      	ldr	r2, [r3, #4]
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	1ad2      	subs	r2, r2, r3
 800c9c0:	69bb      	ldr	r3, [r7, #24]
 800c9c2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c9c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9c6:	687a      	ldr	r2, [r7, #4]
 800c9c8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c9ca:	69b8      	ldr	r0, [r7, #24]
 800c9cc:	f000 f90a 	bl	800cbe4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c9d0:	4b1d      	ldr	r3, [pc, #116]	@ (800ca48 <pvPortMalloc+0x18c>)
 800c9d2:	681a      	ldr	r2, [r3, #0]
 800c9d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9d6:	685b      	ldr	r3, [r3, #4]
 800c9d8:	1ad3      	subs	r3, r2, r3
 800c9da:	4a1b      	ldr	r2, [pc, #108]	@ (800ca48 <pvPortMalloc+0x18c>)
 800c9dc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c9de:	4b1a      	ldr	r3, [pc, #104]	@ (800ca48 <pvPortMalloc+0x18c>)
 800c9e0:	681a      	ldr	r2, [r3, #0]
 800c9e2:	4b1b      	ldr	r3, [pc, #108]	@ (800ca50 <pvPortMalloc+0x194>)
 800c9e4:	681b      	ldr	r3, [r3, #0]
 800c9e6:	429a      	cmp	r2, r3
 800c9e8:	d203      	bcs.n	800c9f2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c9ea:	4b17      	ldr	r3, [pc, #92]	@ (800ca48 <pvPortMalloc+0x18c>)
 800c9ec:	681b      	ldr	r3, [r3, #0]
 800c9ee:	4a18      	ldr	r2, [pc, #96]	@ (800ca50 <pvPortMalloc+0x194>)
 800c9f0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c9f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9f4:	685a      	ldr	r2, [r3, #4]
 800c9f6:	4b13      	ldr	r3, [pc, #76]	@ (800ca44 <pvPortMalloc+0x188>)
 800c9f8:	681b      	ldr	r3, [r3, #0]
 800c9fa:	431a      	orrs	r2, r3
 800c9fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9fe:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ca00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca02:	2200      	movs	r2, #0
 800ca04:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800ca06:	4b13      	ldr	r3, [pc, #76]	@ (800ca54 <pvPortMalloc+0x198>)
 800ca08:	681b      	ldr	r3, [r3, #0]
 800ca0a:	3301      	adds	r3, #1
 800ca0c:	4a11      	ldr	r2, [pc, #68]	@ (800ca54 <pvPortMalloc+0x198>)
 800ca0e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ca10:	f7fe fcc8 	bl	800b3a4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ca14:	69fb      	ldr	r3, [r7, #28]
 800ca16:	f003 0307 	and.w	r3, r3, #7
 800ca1a:	2b00      	cmp	r3, #0
 800ca1c:	d00b      	beq.n	800ca36 <pvPortMalloc+0x17a>
	__asm volatile
 800ca1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca22:	f383 8811 	msr	BASEPRI, r3
 800ca26:	f3bf 8f6f 	isb	sy
 800ca2a:	f3bf 8f4f 	dsb	sy
 800ca2e:	60fb      	str	r3, [r7, #12]
}
 800ca30:	bf00      	nop
 800ca32:	bf00      	nop
 800ca34:	e7fd      	b.n	800ca32 <pvPortMalloc+0x176>
	return pvReturn;
 800ca36:	69fb      	ldr	r3, [r7, #28]
}
 800ca38:	4618      	mov	r0, r3
 800ca3a:	3728      	adds	r7, #40	@ 0x28
 800ca3c:	46bd      	mov	sp, r7
 800ca3e:	bd80      	pop	{r7, pc}
 800ca40:	20006b14 	.word	0x20006b14
 800ca44:	20006b28 	.word	0x20006b28
 800ca48:	20006b18 	.word	0x20006b18
 800ca4c:	20006b0c 	.word	0x20006b0c
 800ca50:	20006b1c 	.word	0x20006b1c
 800ca54:	20006b20 	.word	0x20006b20

0800ca58 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ca58:	b580      	push	{r7, lr}
 800ca5a:	b086      	sub	sp, #24
 800ca5c:	af00      	add	r7, sp, #0
 800ca5e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	d04f      	beq.n	800cb0a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ca6a:	2308      	movs	r3, #8
 800ca6c:	425b      	negs	r3, r3
 800ca6e:	697a      	ldr	r2, [r7, #20]
 800ca70:	4413      	add	r3, r2
 800ca72:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ca74:	697b      	ldr	r3, [r7, #20]
 800ca76:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ca78:	693b      	ldr	r3, [r7, #16]
 800ca7a:	685a      	ldr	r2, [r3, #4]
 800ca7c:	4b25      	ldr	r3, [pc, #148]	@ (800cb14 <vPortFree+0xbc>)
 800ca7e:	681b      	ldr	r3, [r3, #0]
 800ca80:	4013      	ands	r3, r2
 800ca82:	2b00      	cmp	r3, #0
 800ca84:	d10b      	bne.n	800ca9e <vPortFree+0x46>
	__asm volatile
 800ca86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca8a:	f383 8811 	msr	BASEPRI, r3
 800ca8e:	f3bf 8f6f 	isb	sy
 800ca92:	f3bf 8f4f 	dsb	sy
 800ca96:	60fb      	str	r3, [r7, #12]
}
 800ca98:	bf00      	nop
 800ca9a:	bf00      	nop
 800ca9c:	e7fd      	b.n	800ca9a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ca9e:	693b      	ldr	r3, [r7, #16]
 800caa0:	681b      	ldr	r3, [r3, #0]
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	d00b      	beq.n	800cabe <vPortFree+0x66>
	__asm volatile
 800caa6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800caaa:	f383 8811 	msr	BASEPRI, r3
 800caae:	f3bf 8f6f 	isb	sy
 800cab2:	f3bf 8f4f 	dsb	sy
 800cab6:	60bb      	str	r3, [r7, #8]
}
 800cab8:	bf00      	nop
 800caba:	bf00      	nop
 800cabc:	e7fd      	b.n	800caba <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800cabe:	693b      	ldr	r3, [r7, #16]
 800cac0:	685a      	ldr	r2, [r3, #4]
 800cac2:	4b14      	ldr	r3, [pc, #80]	@ (800cb14 <vPortFree+0xbc>)
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	4013      	ands	r3, r2
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d01e      	beq.n	800cb0a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800cacc:	693b      	ldr	r3, [r7, #16]
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	2b00      	cmp	r3, #0
 800cad2:	d11a      	bne.n	800cb0a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800cad4:	693b      	ldr	r3, [r7, #16]
 800cad6:	685a      	ldr	r2, [r3, #4]
 800cad8:	4b0e      	ldr	r3, [pc, #56]	@ (800cb14 <vPortFree+0xbc>)
 800cada:	681b      	ldr	r3, [r3, #0]
 800cadc:	43db      	mvns	r3, r3
 800cade:	401a      	ands	r2, r3
 800cae0:	693b      	ldr	r3, [r7, #16]
 800cae2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800cae4:	f7fe fc50 	bl	800b388 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800cae8:	693b      	ldr	r3, [r7, #16]
 800caea:	685a      	ldr	r2, [r3, #4]
 800caec:	4b0a      	ldr	r3, [pc, #40]	@ (800cb18 <vPortFree+0xc0>)
 800caee:	681b      	ldr	r3, [r3, #0]
 800caf0:	4413      	add	r3, r2
 800caf2:	4a09      	ldr	r2, [pc, #36]	@ (800cb18 <vPortFree+0xc0>)
 800caf4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800caf6:	6938      	ldr	r0, [r7, #16]
 800caf8:	f000 f874 	bl	800cbe4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800cafc:	4b07      	ldr	r3, [pc, #28]	@ (800cb1c <vPortFree+0xc4>)
 800cafe:	681b      	ldr	r3, [r3, #0]
 800cb00:	3301      	adds	r3, #1
 800cb02:	4a06      	ldr	r2, [pc, #24]	@ (800cb1c <vPortFree+0xc4>)
 800cb04:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800cb06:	f7fe fc4d 	bl	800b3a4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800cb0a:	bf00      	nop
 800cb0c:	3718      	adds	r7, #24
 800cb0e:	46bd      	mov	sp, r7
 800cb10:	bd80      	pop	{r7, pc}
 800cb12:	bf00      	nop
 800cb14:	20006b28 	.word	0x20006b28
 800cb18:	20006b18 	.word	0x20006b18
 800cb1c:	20006b24 	.word	0x20006b24

0800cb20 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800cb20:	b480      	push	{r7}
 800cb22:	b085      	sub	sp, #20
 800cb24:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800cb26:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800cb2a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800cb2c:	4b27      	ldr	r3, [pc, #156]	@ (800cbcc <prvHeapInit+0xac>)
 800cb2e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800cb30:	68fb      	ldr	r3, [r7, #12]
 800cb32:	f003 0307 	and.w	r3, r3, #7
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	d00c      	beq.n	800cb54 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800cb3a:	68fb      	ldr	r3, [r7, #12]
 800cb3c:	3307      	adds	r3, #7
 800cb3e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cb40:	68fb      	ldr	r3, [r7, #12]
 800cb42:	f023 0307 	bic.w	r3, r3, #7
 800cb46:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800cb48:	68ba      	ldr	r2, [r7, #8]
 800cb4a:	68fb      	ldr	r3, [r7, #12]
 800cb4c:	1ad3      	subs	r3, r2, r3
 800cb4e:	4a1f      	ldr	r2, [pc, #124]	@ (800cbcc <prvHeapInit+0xac>)
 800cb50:	4413      	add	r3, r2
 800cb52:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800cb54:	68fb      	ldr	r3, [r7, #12]
 800cb56:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800cb58:	4a1d      	ldr	r2, [pc, #116]	@ (800cbd0 <prvHeapInit+0xb0>)
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800cb5e:	4b1c      	ldr	r3, [pc, #112]	@ (800cbd0 <prvHeapInit+0xb0>)
 800cb60:	2200      	movs	r2, #0
 800cb62:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	68ba      	ldr	r2, [r7, #8]
 800cb68:	4413      	add	r3, r2
 800cb6a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800cb6c:	2208      	movs	r2, #8
 800cb6e:	68fb      	ldr	r3, [r7, #12]
 800cb70:	1a9b      	subs	r3, r3, r2
 800cb72:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cb74:	68fb      	ldr	r3, [r7, #12]
 800cb76:	f023 0307 	bic.w	r3, r3, #7
 800cb7a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800cb7c:	68fb      	ldr	r3, [r7, #12]
 800cb7e:	4a15      	ldr	r2, [pc, #84]	@ (800cbd4 <prvHeapInit+0xb4>)
 800cb80:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800cb82:	4b14      	ldr	r3, [pc, #80]	@ (800cbd4 <prvHeapInit+0xb4>)
 800cb84:	681b      	ldr	r3, [r3, #0]
 800cb86:	2200      	movs	r2, #0
 800cb88:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800cb8a:	4b12      	ldr	r3, [pc, #72]	@ (800cbd4 <prvHeapInit+0xb4>)
 800cb8c:	681b      	ldr	r3, [r3, #0]
 800cb8e:	2200      	movs	r2, #0
 800cb90:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800cb96:	683b      	ldr	r3, [r7, #0]
 800cb98:	68fa      	ldr	r2, [r7, #12]
 800cb9a:	1ad2      	subs	r2, r2, r3
 800cb9c:	683b      	ldr	r3, [r7, #0]
 800cb9e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800cba0:	4b0c      	ldr	r3, [pc, #48]	@ (800cbd4 <prvHeapInit+0xb4>)
 800cba2:	681a      	ldr	r2, [r3, #0]
 800cba4:	683b      	ldr	r3, [r7, #0]
 800cba6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cba8:	683b      	ldr	r3, [r7, #0]
 800cbaa:	685b      	ldr	r3, [r3, #4]
 800cbac:	4a0a      	ldr	r2, [pc, #40]	@ (800cbd8 <prvHeapInit+0xb8>)
 800cbae:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cbb0:	683b      	ldr	r3, [r7, #0]
 800cbb2:	685b      	ldr	r3, [r3, #4]
 800cbb4:	4a09      	ldr	r2, [pc, #36]	@ (800cbdc <prvHeapInit+0xbc>)
 800cbb6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800cbb8:	4b09      	ldr	r3, [pc, #36]	@ (800cbe0 <prvHeapInit+0xc0>)
 800cbba:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800cbbe:	601a      	str	r2, [r3, #0]
}
 800cbc0:	bf00      	nop
 800cbc2:	3714      	adds	r7, #20
 800cbc4:	46bd      	mov	sp, r7
 800cbc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbca:	4770      	bx	lr
 800cbcc:	20005f0c 	.word	0x20005f0c
 800cbd0:	20006b0c 	.word	0x20006b0c
 800cbd4:	20006b14 	.word	0x20006b14
 800cbd8:	20006b1c 	.word	0x20006b1c
 800cbdc:	20006b18 	.word	0x20006b18
 800cbe0:	20006b28 	.word	0x20006b28

0800cbe4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800cbe4:	b480      	push	{r7}
 800cbe6:	b085      	sub	sp, #20
 800cbe8:	af00      	add	r7, sp, #0
 800cbea:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800cbec:	4b28      	ldr	r3, [pc, #160]	@ (800cc90 <prvInsertBlockIntoFreeList+0xac>)
 800cbee:	60fb      	str	r3, [r7, #12]
 800cbf0:	e002      	b.n	800cbf8 <prvInsertBlockIntoFreeList+0x14>
 800cbf2:	68fb      	ldr	r3, [r7, #12]
 800cbf4:	681b      	ldr	r3, [r3, #0]
 800cbf6:	60fb      	str	r3, [r7, #12]
 800cbf8:	68fb      	ldr	r3, [r7, #12]
 800cbfa:	681b      	ldr	r3, [r3, #0]
 800cbfc:	687a      	ldr	r2, [r7, #4]
 800cbfe:	429a      	cmp	r2, r3
 800cc00:	d8f7      	bhi.n	800cbf2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800cc02:	68fb      	ldr	r3, [r7, #12]
 800cc04:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800cc06:	68fb      	ldr	r3, [r7, #12]
 800cc08:	685b      	ldr	r3, [r3, #4]
 800cc0a:	68ba      	ldr	r2, [r7, #8]
 800cc0c:	4413      	add	r3, r2
 800cc0e:	687a      	ldr	r2, [r7, #4]
 800cc10:	429a      	cmp	r2, r3
 800cc12:	d108      	bne.n	800cc26 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800cc14:	68fb      	ldr	r3, [r7, #12]
 800cc16:	685a      	ldr	r2, [r3, #4]
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	685b      	ldr	r3, [r3, #4]
 800cc1c:	441a      	add	r2, r3
 800cc1e:	68fb      	ldr	r3, [r7, #12]
 800cc20:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800cc22:	68fb      	ldr	r3, [r7, #12]
 800cc24:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	685b      	ldr	r3, [r3, #4]
 800cc2e:	68ba      	ldr	r2, [r7, #8]
 800cc30:	441a      	add	r2, r3
 800cc32:	68fb      	ldr	r3, [r7, #12]
 800cc34:	681b      	ldr	r3, [r3, #0]
 800cc36:	429a      	cmp	r2, r3
 800cc38:	d118      	bne.n	800cc6c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800cc3a:	68fb      	ldr	r3, [r7, #12]
 800cc3c:	681a      	ldr	r2, [r3, #0]
 800cc3e:	4b15      	ldr	r3, [pc, #84]	@ (800cc94 <prvInsertBlockIntoFreeList+0xb0>)
 800cc40:	681b      	ldr	r3, [r3, #0]
 800cc42:	429a      	cmp	r2, r3
 800cc44:	d00d      	beq.n	800cc62 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	685a      	ldr	r2, [r3, #4]
 800cc4a:	68fb      	ldr	r3, [r7, #12]
 800cc4c:	681b      	ldr	r3, [r3, #0]
 800cc4e:	685b      	ldr	r3, [r3, #4]
 800cc50:	441a      	add	r2, r3
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800cc56:	68fb      	ldr	r3, [r7, #12]
 800cc58:	681b      	ldr	r3, [r3, #0]
 800cc5a:	681a      	ldr	r2, [r3, #0]
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	601a      	str	r2, [r3, #0]
 800cc60:	e008      	b.n	800cc74 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800cc62:	4b0c      	ldr	r3, [pc, #48]	@ (800cc94 <prvInsertBlockIntoFreeList+0xb0>)
 800cc64:	681a      	ldr	r2, [r3, #0]
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	601a      	str	r2, [r3, #0]
 800cc6a:	e003      	b.n	800cc74 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800cc6c:	68fb      	ldr	r3, [r7, #12]
 800cc6e:	681a      	ldr	r2, [r3, #0]
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800cc74:	68fa      	ldr	r2, [r7, #12]
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	429a      	cmp	r2, r3
 800cc7a:	d002      	beq.n	800cc82 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800cc7c:	68fb      	ldr	r3, [r7, #12]
 800cc7e:	687a      	ldr	r2, [r7, #4]
 800cc80:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cc82:	bf00      	nop
 800cc84:	3714      	adds	r7, #20
 800cc86:	46bd      	mov	sp, r7
 800cc88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc8c:	4770      	bx	lr
 800cc8e:	bf00      	nop
 800cc90:	20006b0c 	.word	0x20006b0c
 800cc94:	20006b14 	.word	0x20006b14

0800cc98 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 800cc98:	4b04      	ldr	r3, [pc, #16]	@ (800ccac <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x14>)
 800cc9a:	681a      	ldr	r2, [r3, #0]
 800cc9c:	b10a      	cbz	r2, 800cca2 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0xa>
 800cc9e:	4803      	ldr	r0, [pc, #12]	@ (800ccac <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x14>)
 800cca0:	4770      	bx	lr
 800cca2:	4a03      	ldr	r2, [pc, #12]	@ (800ccb0 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x18>)
 800cca4:	4801      	ldr	r0, [pc, #4]	@ (800ccac <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x14>)
 800cca6:	6812      	ldr	r2, [r2, #0]
 800cca8:	601a      	str	r2, [r3, #0]
 800ccaa:	4770      	bx	lr
 800ccac:	2000001c 	.word	0x2000001c
 800ccb0:	200001d0 	.word	0x200001d0

0800ccb4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 800ccb4:	4a02      	ldr	r2, [pc, #8]	@ (800ccc0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0xc>)
 800ccb6:	4b03      	ldr	r3, [pc, #12]	@ (800ccc4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x10>)
 800ccb8:	6812      	ldr	r2, [r2, #0]
 800ccba:	601a      	str	r2, [r3, #0]
 800ccbc:	4770      	bx	lr
 800ccbe:	bf00      	nop
 800ccc0:	200001d0 	.word	0x200001d0
 800ccc4:	2000001c 	.word	0x2000001c

0800ccc8 <geometry_msgs__msg__Twist__rosidl_typesupport_introspection_c__Twist_init_function>:
 800ccc8:	f004 bba8 	b.w	801141c <geometry_msgs__msg__Twist__init>

0800cccc <geometry_msgs__msg__Twist__rosidl_typesupport_introspection_c__Twist_fini_function>:
 800cccc:	f004 bbca 	b.w	8011464 <geometry_msgs__msg__Twist__fini>

0800ccd0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 800ccd0:	b510      	push	{r4, lr}
 800ccd2:	f000 f819 	bl	800cd08 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800ccd6:	4c07      	ldr	r4, [pc, #28]	@ (800ccf4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x24>)
 800ccd8:	60e0      	str	r0, [r4, #12]
 800ccda:	f000 f815 	bl	800cd08 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800ccde:	4b06      	ldr	r3, [pc, #24]	@ (800ccf8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x28>)
 800cce0:	64a0      	str	r0, [r4, #72]	@ 0x48
 800cce2:	681a      	ldr	r2, [r3, #0]
 800cce4:	b10a      	cbz	r2, 800ccea <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x1a>
 800cce6:	4804      	ldr	r0, [pc, #16]	@ (800ccf8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x28>)
 800cce8:	bd10      	pop	{r4, pc}
 800ccea:	4a04      	ldr	r2, [pc, #16]	@ (800ccfc <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x2c>)
 800ccec:	4802      	ldr	r0, [pc, #8]	@ (800ccf8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x28>)
 800ccee:	6812      	ldr	r2, [r2, #0]
 800ccf0:	601a      	str	r2, [r3, #0]
 800ccf2:	bd10      	pop	{r4, pc}
 800ccf4:	20000028 	.word	0x20000028
 800ccf8:	200000a0 	.word	0x200000a0
 800ccfc:	200001d4 	.word	0x200001d4

0800cd00 <geometry_msgs__msg__Vector3__rosidl_typesupport_introspection_c__Vector3_init_function>:
 800cd00:	f004 bbbc 	b.w	801147c <geometry_msgs__msg__Vector3__init>

0800cd04 <geometry_msgs__msg__Vector3__rosidl_typesupport_introspection_c__Vector3_fini_function>:
 800cd04:	f004 bbbe 	b.w	8011484 <geometry_msgs__msg__Vector3__fini>

0800cd08 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>:
 800cd08:	4b04      	ldr	r3, [pc, #16]	@ (800cd1c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 800cd0a:	681a      	ldr	r2, [r3, #0]
 800cd0c:	b10a      	cbz	r2, 800cd12 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0xa>
 800cd0e:	4803      	ldr	r0, [pc, #12]	@ (800cd1c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 800cd10:	4770      	bx	lr
 800cd12:	4a03      	ldr	r2, [pc, #12]	@ (800cd20 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x18>)
 800cd14:	4801      	ldr	r0, [pc, #4]	@ (800cd1c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 800cd16:	6812      	ldr	r2, [r2, #0]
 800cd18:	601a      	str	r2, [r3, #0]
 800cd1a:	4770      	bx	lr
 800cd1c:	20000160 	.word	0x20000160
 800cd20:	200001d4 	.word	0x200001d4

0800cd24 <get_serialized_size_geometry_msgs__msg__Twist>:
 800cd24:	b570      	push	{r4, r5, r6, lr}
 800cd26:	4604      	mov	r4, r0
 800cd28:	b148      	cbz	r0, 800cd3e <get_serialized_size_geometry_msgs__msg__Twist+0x1a>
 800cd2a:	460d      	mov	r5, r1
 800cd2c:	f000 f860 	bl	800cdf0 <get_serialized_size_geometry_msgs__msg__Vector3>
 800cd30:	4606      	mov	r6, r0
 800cd32:	1829      	adds	r1, r5, r0
 800cd34:	f104 0018 	add.w	r0, r4, #24
 800cd38:	f000 f85a 	bl	800cdf0 <get_serialized_size_geometry_msgs__msg__Vector3>
 800cd3c:	4430      	add	r0, r6
 800cd3e:	bd70      	pop	{r4, r5, r6, pc}

0800cd40 <_Twist__cdr_deserialize>:
 800cd40:	b570      	push	{r4, r5, r6, lr}
 800cd42:	460c      	mov	r4, r1
 800cd44:	b189      	cbz	r1, 800cd6a <_Twist__cdr_deserialize+0x2a>
 800cd46:	4605      	mov	r5, r0
 800cd48:	f000 f8de 	bl	800cf08 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800cd4c:	6843      	ldr	r3, [r0, #4]
 800cd4e:	4621      	mov	r1, r4
 800cd50:	68db      	ldr	r3, [r3, #12]
 800cd52:	4628      	mov	r0, r5
 800cd54:	4798      	blx	r3
 800cd56:	f000 f8d7 	bl	800cf08 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800cd5a:	6843      	ldr	r3, [r0, #4]
 800cd5c:	f104 0118 	add.w	r1, r4, #24
 800cd60:	4628      	mov	r0, r5
 800cd62:	68db      	ldr	r3, [r3, #12]
 800cd64:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800cd68:	4718      	bx	r3
 800cd6a:	4608      	mov	r0, r1
 800cd6c:	bd70      	pop	{r4, r5, r6, pc}
 800cd6e:	bf00      	nop

0800cd70 <_Twist__cdr_serialize>:
 800cd70:	b510      	push	{r4, lr}
 800cd72:	b082      	sub	sp, #8
 800cd74:	9101      	str	r1, [sp, #4]
 800cd76:	b190      	cbz	r0, 800cd9e <_Twist__cdr_serialize+0x2e>
 800cd78:	4604      	mov	r4, r0
 800cd7a:	f000 f8c5 	bl	800cf08 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800cd7e:	6843      	ldr	r3, [r0, #4]
 800cd80:	9901      	ldr	r1, [sp, #4]
 800cd82:	689b      	ldr	r3, [r3, #8]
 800cd84:	4620      	mov	r0, r4
 800cd86:	4798      	blx	r3
 800cd88:	f000 f8be 	bl	800cf08 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800cd8c:	6843      	ldr	r3, [r0, #4]
 800cd8e:	9901      	ldr	r1, [sp, #4]
 800cd90:	689b      	ldr	r3, [r3, #8]
 800cd92:	f104 0018 	add.w	r0, r4, #24
 800cd96:	b002      	add	sp, #8
 800cd98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cd9c:	4718      	bx	r3
 800cd9e:	b002      	add	sp, #8
 800cda0:	bd10      	pop	{r4, pc}
 800cda2:	bf00      	nop

0800cda4 <_Twist__get_serialized_size>:
 800cda4:	b538      	push	{r3, r4, r5, lr}
 800cda6:	4604      	mov	r4, r0
 800cda8:	b148      	cbz	r0, 800cdbe <_Twist__get_serialized_size+0x1a>
 800cdaa:	2100      	movs	r1, #0
 800cdac:	f000 f820 	bl	800cdf0 <get_serialized_size_geometry_msgs__msg__Vector3>
 800cdb0:	4605      	mov	r5, r0
 800cdb2:	4601      	mov	r1, r0
 800cdb4:	f104 0018 	add.w	r0, r4, #24
 800cdb8:	f000 f81a 	bl	800cdf0 <get_serialized_size_geometry_msgs__msg__Vector3>
 800cdbc:	4428      	add	r0, r5
 800cdbe:	bd38      	pop	{r3, r4, r5, pc}

0800cdc0 <_Twist__max_serialized_size>:
 800cdc0:	b510      	push	{r4, lr}
 800cdc2:	b082      	sub	sp, #8
 800cdc4:	2301      	movs	r3, #1
 800cdc6:	2100      	movs	r1, #0
 800cdc8:	f10d 0007 	add.w	r0, sp, #7
 800cdcc:	f88d 3007 	strb.w	r3, [sp, #7]
 800cdd0:	f000 f87e 	bl	800ced0 <max_serialized_size_geometry_msgs__msg__Vector3>
 800cdd4:	4604      	mov	r4, r0
 800cdd6:	4601      	mov	r1, r0
 800cdd8:	f10d 0007 	add.w	r0, sp, #7
 800cddc:	f000 f878 	bl	800ced0 <max_serialized_size_geometry_msgs__msg__Vector3>
 800cde0:	4420      	add	r0, r4
 800cde2:	b002      	add	sp, #8
 800cde4:	bd10      	pop	{r4, pc}
 800cde6:	bf00      	nop

0800cde8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 800cde8:	4800      	ldr	r0, [pc, #0]	@ (800cdec <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x4>)
 800cdea:	4770      	bx	lr
 800cdec:	2000016c 	.word	0x2000016c

0800cdf0 <get_serialized_size_geometry_msgs__msg__Vector3>:
 800cdf0:	b1b8      	cbz	r0, 800ce22 <get_serialized_size_geometry_msgs__msg__Vector3+0x32>
 800cdf2:	b538      	push	{r3, r4, r5, lr}
 800cdf4:	460d      	mov	r5, r1
 800cdf6:	4628      	mov	r0, r5
 800cdf8:	2108      	movs	r1, #8
 800cdfa:	f001 fb9d 	bl	800e538 <ucdr_alignment>
 800cdfe:	f105 0308 	add.w	r3, r5, #8
 800ce02:	181c      	adds	r4, r3, r0
 800ce04:	2108      	movs	r1, #8
 800ce06:	4620      	mov	r0, r4
 800ce08:	f001 fb96 	bl	800e538 <ucdr_alignment>
 800ce0c:	3008      	adds	r0, #8
 800ce0e:	4404      	add	r4, r0
 800ce10:	2108      	movs	r1, #8
 800ce12:	4620      	mov	r0, r4
 800ce14:	f001 fb90 	bl	800e538 <ucdr_alignment>
 800ce18:	f1c5 0508 	rsb	r5, r5, #8
 800ce1c:	4428      	add	r0, r5
 800ce1e:	4420      	add	r0, r4
 800ce20:	bd38      	pop	{r3, r4, r5, pc}
 800ce22:	4770      	bx	lr

0800ce24 <_Vector3__cdr_deserialize>:
 800ce24:	b538      	push	{r3, r4, r5, lr}
 800ce26:	460c      	mov	r4, r1
 800ce28:	b171      	cbz	r1, 800ce48 <_Vector3__cdr_deserialize+0x24>
 800ce2a:	4605      	mov	r5, r0
 800ce2c:	f001 f998 	bl	800e160 <ucdr_deserialize_double>
 800ce30:	f104 0108 	add.w	r1, r4, #8
 800ce34:	4628      	mov	r0, r5
 800ce36:	f001 f993 	bl	800e160 <ucdr_deserialize_double>
 800ce3a:	f104 0110 	add.w	r1, r4, #16
 800ce3e:	4628      	mov	r0, r5
 800ce40:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ce44:	f001 b98c 	b.w	800e160 <ucdr_deserialize_double>
 800ce48:	4608      	mov	r0, r1
 800ce4a:	bd38      	pop	{r3, r4, r5, pc}

0800ce4c <_Vector3__cdr_serialize>:
 800ce4c:	b198      	cbz	r0, 800ce76 <_Vector3__cdr_serialize+0x2a>
 800ce4e:	b538      	push	{r3, r4, r5, lr}
 800ce50:	ed90 0b00 	vldr	d0, [r0]
 800ce54:	460d      	mov	r5, r1
 800ce56:	4604      	mov	r4, r0
 800ce58:	4608      	mov	r0, r1
 800ce5a:	f000 ffdf 	bl	800de1c <ucdr_serialize_double>
 800ce5e:	ed94 0b02 	vldr	d0, [r4, #8]
 800ce62:	4628      	mov	r0, r5
 800ce64:	f000 ffda 	bl	800de1c <ucdr_serialize_double>
 800ce68:	ed94 0b04 	vldr	d0, [r4, #16]
 800ce6c:	4628      	mov	r0, r5
 800ce6e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ce72:	f000 bfd3 	b.w	800de1c <ucdr_serialize_double>
 800ce76:	4770      	bx	lr

0800ce78 <_Vector3__get_serialized_size>:
 800ce78:	b198      	cbz	r0, 800cea2 <_Vector3__get_serialized_size+0x2a>
 800ce7a:	b510      	push	{r4, lr}
 800ce7c:	2108      	movs	r1, #8
 800ce7e:	2000      	movs	r0, #0
 800ce80:	f001 fb5a 	bl	800e538 <ucdr_alignment>
 800ce84:	f100 0408 	add.w	r4, r0, #8
 800ce88:	2108      	movs	r1, #8
 800ce8a:	4620      	mov	r0, r4
 800ce8c:	f001 fb54 	bl	800e538 <ucdr_alignment>
 800ce90:	3008      	adds	r0, #8
 800ce92:	4404      	add	r4, r0
 800ce94:	2108      	movs	r1, #8
 800ce96:	4620      	mov	r0, r4
 800ce98:	f001 fb4e 	bl	800e538 <ucdr_alignment>
 800ce9c:	3008      	adds	r0, #8
 800ce9e:	4420      	add	r0, r4
 800cea0:	bd10      	pop	{r4, pc}
 800cea2:	4770      	bx	lr

0800cea4 <_Vector3__max_serialized_size>:
 800cea4:	b538      	push	{r3, r4, r5, lr}
 800cea6:	2108      	movs	r1, #8
 800cea8:	2000      	movs	r0, #0
 800ceaa:	f001 fb45 	bl	800e538 <ucdr_alignment>
 800ceae:	f100 0508 	add.w	r5, r0, #8
 800ceb2:	2108      	movs	r1, #8
 800ceb4:	4628      	mov	r0, r5
 800ceb6:	f001 fb3f 	bl	800e538 <ucdr_alignment>
 800ceba:	f100 0408 	add.w	r4, r0, #8
 800cebe:	442c      	add	r4, r5
 800cec0:	2108      	movs	r1, #8
 800cec2:	4620      	mov	r0, r4
 800cec4:	f001 fb38 	bl	800e538 <ucdr_alignment>
 800cec8:	3008      	adds	r0, #8
 800ceca:	4420      	add	r0, r4
 800cecc:	bd38      	pop	{r3, r4, r5, pc}
 800cece:	bf00      	nop

0800ced0 <max_serialized_size_geometry_msgs__msg__Vector3>:
 800ced0:	b570      	push	{r4, r5, r6, lr}
 800ced2:	2301      	movs	r3, #1
 800ced4:	460c      	mov	r4, r1
 800ced6:	7003      	strb	r3, [r0, #0]
 800ced8:	2108      	movs	r1, #8
 800ceda:	4620      	mov	r0, r4
 800cedc:	f001 fb2c 	bl	800e538 <ucdr_alignment>
 800cee0:	f104 0508 	add.w	r5, r4, #8
 800cee4:	1946      	adds	r6, r0, r5
 800cee6:	2108      	movs	r1, #8
 800cee8:	4630      	mov	r0, r6
 800ceea:	f001 fb25 	bl	800e538 <ucdr_alignment>
 800ceee:	f100 0508 	add.w	r5, r0, #8
 800cef2:	4435      	add	r5, r6
 800cef4:	2108      	movs	r1, #8
 800cef6:	4628      	mov	r0, r5
 800cef8:	f001 fb1e 	bl	800e538 <ucdr_alignment>
 800cefc:	f1c4 0408 	rsb	r4, r4, #8
 800cf00:	4420      	add	r0, r4
 800cf02:	4428      	add	r0, r5
 800cf04:	bd70      	pop	{r4, r5, r6, pc}
 800cf06:	bf00      	nop

0800cf08 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>:
 800cf08:	4800      	ldr	r0, [pc, #0]	@ (800cf0c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x4>)
 800cf0a:	4770      	bx	lr
 800cf0c:	20000194 	.word	0x20000194

0800cf10 <ucdr_serialize_bool>:
 800cf10:	b538      	push	{r3, r4, r5, lr}
 800cf12:	460d      	mov	r5, r1
 800cf14:	2101      	movs	r1, #1
 800cf16:	4604      	mov	r4, r0
 800cf18:	f001 fac2 	bl	800e4a0 <ucdr_check_final_buffer_behavior>
 800cf1c:	b148      	cbz	r0, 800cf32 <ucdr_serialize_bool+0x22>
 800cf1e:	68a3      	ldr	r3, [r4, #8]
 800cf20:	701d      	strb	r5, [r3, #0]
 800cf22:	68a2      	ldr	r2, [r4, #8]
 800cf24:	6923      	ldr	r3, [r4, #16]
 800cf26:	2101      	movs	r1, #1
 800cf28:	440a      	add	r2, r1
 800cf2a:	440b      	add	r3, r1
 800cf2c:	60a2      	str	r2, [r4, #8]
 800cf2e:	6123      	str	r3, [r4, #16]
 800cf30:	7561      	strb	r1, [r4, #21]
 800cf32:	7da0      	ldrb	r0, [r4, #22]
 800cf34:	f080 0001 	eor.w	r0, r0, #1
 800cf38:	bd38      	pop	{r3, r4, r5, pc}
 800cf3a:	bf00      	nop

0800cf3c <ucdr_deserialize_bool>:
 800cf3c:	b538      	push	{r3, r4, r5, lr}
 800cf3e:	460d      	mov	r5, r1
 800cf40:	2101      	movs	r1, #1
 800cf42:	4604      	mov	r4, r0
 800cf44:	f001 faac 	bl	800e4a0 <ucdr_check_final_buffer_behavior>
 800cf48:	b160      	cbz	r0, 800cf64 <ucdr_deserialize_bool+0x28>
 800cf4a:	68a2      	ldr	r2, [r4, #8]
 800cf4c:	6923      	ldr	r3, [r4, #16]
 800cf4e:	f812 1b01 	ldrb.w	r1, [r2], #1
 800cf52:	3900      	subs	r1, #0
 800cf54:	bf18      	it	ne
 800cf56:	2101      	movne	r1, #1
 800cf58:	7029      	strb	r1, [r5, #0]
 800cf5a:	3301      	adds	r3, #1
 800cf5c:	2101      	movs	r1, #1
 800cf5e:	60a2      	str	r2, [r4, #8]
 800cf60:	6123      	str	r3, [r4, #16]
 800cf62:	7561      	strb	r1, [r4, #21]
 800cf64:	7da0      	ldrb	r0, [r4, #22]
 800cf66:	f080 0001 	eor.w	r0, r0, #1
 800cf6a:	bd38      	pop	{r3, r4, r5, pc}

0800cf6c <ucdr_serialize_uint8_t>:
 800cf6c:	b538      	push	{r3, r4, r5, lr}
 800cf6e:	460d      	mov	r5, r1
 800cf70:	2101      	movs	r1, #1
 800cf72:	4604      	mov	r4, r0
 800cf74:	f001 fa94 	bl	800e4a0 <ucdr_check_final_buffer_behavior>
 800cf78:	b148      	cbz	r0, 800cf8e <ucdr_serialize_uint8_t+0x22>
 800cf7a:	68a3      	ldr	r3, [r4, #8]
 800cf7c:	701d      	strb	r5, [r3, #0]
 800cf7e:	68a2      	ldr	r2, [r4, #8]
 800cf80:	6923      	ldr	r3, [r4, #16]
 800cf82:	2101      	movs	r1, #1
 800cf84:	440a      	add	r2, r1
 800cf86:	440b      	add	r3, r1
 800cf88:	60a2      	str	r2, [r4, #8]
 800cf8a:	6123      	str	r3, [r4, #16]
 800cf8c:	7561      	strb	r1, [r4, #21]
 800cf8e:	7da0      	ldrb	r0, [r4, #22]
 800cf90:	f080 0001 	eor.w	r0, r0, #1
 800cf94:	bd38      	pop	{r3, r4, r5, pc}
 800cf96:	bf00      	nop

0800cf98 <ucdr_deserialize_uint8_t>:
 800cf98:	b538      	push	{r3, r4, r5, lr}
 800cf9a:	460d      	mov	r5, r1
 800cf9c:	2101      	movs	r1, #1
 800cf9e:	4604      	mov	r4, r0
 800cfa0:	f001 fa7e 	bl	800e4a0 <ucdr_check_final_buffer_behavior>
 800cfa4:	b150      	cbz	r0, 800cfbc <ucdr_deserialize_uint8_t+0x24>
 800cfa6:	68a3      	ldr	r3, [r4, #8]
 800cfa8:	781b      	ldrb	r3, [r3, #0]
 800cfaa:	702b      	strb	r3, [r5, #0]
 800cfac:	68a2      	ldr	r2, [r4, #8]
 800cfae:	6923      	ldr	r3, [r4, #16]
 800cfb0:	2101      	movs	r1, #1
 800cfb2:	440a      	add	r2, r1
 800cfb4:	440b      	add	r3, r1
 800cfb6:	60a2      	str	r2, [r4, #8]
 800cfb8:	6123      	str	r3, [r4, #16]
 800cfba:	7561      	strb	r1, [r4, #21]
 800cfbc:	7da0      	ldrb	r0, [r4, #22]
 800cfbe:	f080 0001 	eor.w	r0, r0, #1
 800cfc2:	bd38      	pop	{r3, r4, r5, pc}

0800cfc4 <ucdr_serialize_uint16_t>:
 800cfc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cfc8:	b082      	sub	sp, #8
 800cfca:	460b      	mov	r3, r1
 800cfcc:	2102      	movs	r1, #2
 800cfce:	4604      	mov	r4, r0
 800cfd0:	f8ad 3006 	strh.w	r3, [sp, #6]
 800cfd4:	f001 fab8 	bl	800e548 <ucdr_buffer_alignment>
 800cfd8:	4601      	mov	r1, r0
 800cfda:	4620      	mov	r0, r4
 800cfdc:	7d67      	ldrb	r7, [r4, #21]
 800cfde:	f001 faf7 	bl	800e5d0 <ucdr_advance_buffer>
 800cfe2:	2102      	movs	r1, #2
 800cfe4:	4620      	mov	r0, r4
 800cfe6:	f001 fa4f 	bl	800e488 <ucdr_check_buffer_available_for>
 800cfea:	bb78      	cbnz	r0, 800d04c <ucdr_serialize_uint16_t+0x88>
 800cfec:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800cff0:	42ab      	cmp	r3, r5
 800cff2:	d926      	bls.n	800d042 <ucdr_serialize_uint16_t+0x7e>
 800cff4:	1b5e      	subs	r6, r3, r5
 800cff6:	60a3      	str	r3, [r4, #8]
 800cff8:	6923      	ldr	r3, [r4, #16]
 800cffa:	f1c6 0802 	rsb	r8, r6, #2
 800cffe:	4433      	add	r3, r6
 800d000:	6123      	str	r3, [r4, #16]
 800d002:	4641      	mov	r1, r8
 800d004:	4620      	mov	r0, r4
 800d006:	f001 fa4b 	bl	800e4a0 <ucdr_check_final_buffer_behavior>
 800d00a:	2800      	cmp	r0, #0
 800d00c:	d03b      	beq.n	800d086 <ucdr_serialize_uint16_t+0xc2>
 800d00e:	7d23      	ldrb	r3, [r4, #20]
 800d010:	2b01      	cmp	r3, #1
 800d012:	d04a      	beq.n	800d0aa <ucdr_serialize_uint16_t+0xe6>
 800d014:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800d018:	702b      	strb	r3, [r5, #0]
 800d01a:	2e00      	cmp	r6, #0
 800d01c:	d040      	beq.n	800d0a0 <ucdr_serialize_uint16_t+0xdc>
 800d01e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800d022:	706b      	strb	r3, [r5, #1]
 800d024:	6923      	ldr	r3, [r4, #16]
 800d026:	68a2      	ldr	r2, [r4, #8]
 800d028:	7da0      	ldrb	r0, [r4, #22]
 800d02a:	3302      	adds	r3, #2
 800d02c:	1b9e      	subs	r6, r3, r6
 800d02e:	4442      	add	r2, r8
 800d030:	2302      	movs	r3, #2
 800d032:	f080 0001 	eor.w	r0, r0, #1
 800d036:	60a2      	str	r2, [r4, #8]
 800d038:	6126      	str	r6, [r4, #16]
 800d03a:	7563      	strb	r3, [r4, #21]
 800d03c:	b002      	add	sp, #8
 800d03e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d042:	2102      	movs	r1, #2
 800d044:	4620      	mov	r0, r4
 800d046:	f001 fa2b 	bl	800e4a0 <ucdr_check_final_buffer_behavior>
 800d04a:	b190      	cbz	r0, 800d072 <ucdr_serialize_uint16_t+0xae>
 800d04c:	7d23      	ldrb	r3, [r4, #20]
 800d04e:	2b01      	cmp	r3, #1
 800d050:	68a3      	ldr	r3, [r4, #8]
 800d052:	d014      	beq.n	800d07e <ucdr_serialize_uint16_t+0xba>
 800d054:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800d058:	701a      	strb	r2, [r3, #0]
 800d05a:	68a3      	ldr	r3, [r4, #8]
 800d05c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d060:	705a      	strb	r2, [r3, #1]
 800d062:	68a2      	ldr	r2, [r4, #8]
 800d064:	6923      	ldr	r3, [r4, #16]
 800d066:	3202      	adds	r2, #2
 800d068:	3302      	adds	r3, #2
 800d06a:	2102      	movs	r1, #2
 800d06c:	60a2      	str	r2, [r4, #8]
 800d06e:	6123      	str	r3, [r4, #16]
 800d070:	7561      	strb	r1, [r4, #21]
 800d072:	7da0      	ldrb	r0, [r4, #22]
 800d074:	f080 0001 	eor.w	r0, r0, #1
 800d078:	b002      	add	sp, #8
 800d07a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d07e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800d082:	801a      	strh	r2, [r3, #0]
 800d084:	e7ed      	b.n	800d062 <ucdr_serialize_uint16_t+0x9e>
 800d086:	68a2      	ldr	r2, [r4, #8]
 800d088:	6923      	ldr	r3, [r4, #16]
 800d08a:	7da0      	ldrb	r0, [r4, #22]
 800d08c:	7567      	strb	r7, [r4, #21]
 800d08e:	1b92      	subs	r2, r2, r6
 800d090:	1b9b      	subs	r3, r3, r6
 800d092:	f080 0001 	eor.w	r0, r0, #1
 800d096:	60a2      	str	r2, [r4, #8]
 800d098:	6123      	str	r3, [r4, #16]
 800d09a:	b002      	add	sp, #8
 800d09c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d0a0:	68a3      	ldr	r3, [r4, #8]
 800d0a2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d0a6:	701a      	strb	r2, [r3, #0]
 800d0a8:	e7bc      	b.n	800d024 <ucdr_serialize_uint16_t+0x60>
 800d0aa:	4628      	mov	r0, r5
 800d0ac:	f10d 0506 	add.w	r5, sp, #6
 800d0b0:	4629      	mov	r1, r5
 800d0b2:	4632      	mov	r2, r6
 800d0b4:	f00e fa1b 	bl	801b4ee <memcpy>
 800d0b8:	68a0      	ldr	r0, [r4, #8]
 800d0ba:	4642      	mov	r2, r8
 800d0bc:	19a9      	adds	r1, r5, r6
 800d0be:	f00e fa16 	bl	801b4ee <memcpy>
 800d0c2:	e7af      	b.n	800d024 <ucdr_serialize_uint16_t+0x60>

0800d0c4 <ucdr_serialize_endian_uint16_t>:
 800d0c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d0c8:	b083      	sub	sp, #12
 800d0ca:	460d      	mov	r5, r1
 800d0cc:	2102      	movs	r1, #2
 800d0ce:	4604      	mov	r4, r0
 800d0d0:	f8ad 2006 	strh.w	r2, [sp, #6]
 800d0d4:	f001 fa38 	bl	800e548 <ucdr_buffer_alignment>
 800d0d8:	4601      	mov	r1, r0
 800d0da:	4620      	mov	r0, r4
 800d0dc:	f894 8015 	ldrb.w	r8, [r4, #21]
 800d0e0:	f001 fa76 	bl	800e5d0 <ucdr_advance_buffer>
 800d0e4:	2102      	movs	r1, #2
 800d0e6:	4620      	mov	r0, r4
 800d0e8:	f001 f9ce 	bl	800e488 <ucdr_check_buffer_available_for>
 800d0ec:	bb70      	cbnz	r0, 800d14c <ucdr_serialize_endian_uint16_t+0x88>
 800d0ee:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800d0f2:	42be      	cmp	r6, r7
 800d0f4:	d925      	bls.n	800d142 <ucdr_serialize_endian_uint16_t+0x7e>
 800d0f6:	6923      	ldr	r3, [r4, #16]
 800d0f8:	60a6      	str	r6, [r4, #8]
 800d0fa:	1bf6      	subs	r6, r6, r7
 800d0fc:	4433      	add	r3, r6
 800d0fe:	f1c6 0902 	rsb	r9, r6, #2
 800d102:	6123      	str	r3, [r4, #16]
 800d104:	4649      	mov	r1, r9
 800d106:	4620      	mov	r0, r4
 800d108:	f001 f9ca 	bl	800e4a0 <ucdr_check_final_buffer_behavior>
 800d10c:	2800      	cmp	r0, #0
 800d10e:	d039      	beq.n	800d184 <ucdr_serialize_endian_uint16_t+0xc0>
 800d110:	2d01      	cmp	r5, #1
 800d112:	d04a      	beq.n	800d1aa <ucdr_serialize_endian_uint16_t+0xe6>
 800d114:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800d118:	703b      	strb	r3, [r7, #0]
 800d11a:	2e00      	cmp	r6, #0
 800d11c:	d040      	beq.n	800d1a0 <ucdr_serialize_endian_uint16_t+0xdc>
 800d11e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800d122:	707b      	strb	r3, [r7, #1]
 800d124:	6923      	ldr	r3, [r4, #16]
 800d126:	68a2      	ldr	r2, [r4, #8]
 800d128:	7da0      	ldrb	r0, [r4, #22]
 800d12a:	3302      	adds	r3, #2
 800d12c:	444a      	add	r2, r9
 800d12e:	1b9b      	subs	r3, r3, r6
 800d130:	2102      	movs	r1, #2
 800d132:	f080 0001 	eor.w	r0, r0, #1
 800d136:	60a2      	str	r2, [r4, #8]
 800d138:	6123      	str	r3, [r4, #16]
 800d13a:	7561      	strb	r1, [r4, #21]
 800d13c:	b003      	add	sp, #12
 800d13e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d142:	2102      	movs	r1, #2
 800d144:	4620      	mov	r0, r4
 800d146:	f001 f9ab 	bl	800e4a0 <ucdr_check_final_buffer_behavior>
 800d14a:	b188      	cbz	r0, 800d170 <ucdr_serialize_endian_uint16_t+0xac>
 800d14c:	2d01      	cmp	r5, #1
 800d14e:	68a3      	ldr	r3, [r4, #8]
 800d150:	d014      	beq.n	800d17c <ucdr_serialize_endian_uint16_t+0xb8>
 800d152:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800d156:	701a      	strb	r2, [r3, #0]
 800d158:	68a3      	ldr	r3, [r4, #8]
 800d15a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d15e:	705a      	strb	r2, [r3, #1]
 800d160:	68a2      	ldr	r2, [r4, #8]
 800d162:	6923      	ldr	r3, [r4, #16]
 800d164:	3202      	adds	r2, #2
 800d166:	3302      	adds	r3, #2
 800d168:	2102      	movs	r1, #2
 800d16a:	60a2      	str	r2, [r4, #8]
 800d16c:	6123      	str	r3, [r4, #16]
 800d16e:	7561      	strb	r1, [r4, #21]
 800d170:	7da0      	ldrb	r0, [r4, #22]
 800d172:	f080 0001 	eor.w	r0, r0, #1
 800d176:	b003      	add	sp, #12
 800d178:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d17c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800d180:	801a      	strh	r2, [r3, #0]
 800d182:	e7ed      	b.n	800d160 <ucdr_serialize_endian_uint16_t+0x9c>
 800d184:	68a2      	ldr	r2, [r4, #8]
 800d186:	6923      	ldr	r3, [r4, #16]
 800d188:	7da0      	ldrb	r0, [r4, #22]
 800d18a:	f884 8015 	strb.w	r8, [r4, #21]
 800d18e:	1b92      	subs	r2, r2, r6
 800d190:	1b9b      	subs	r3, r3, r6
 800d192:	f080 0001 	eor.w	r0, r0, #1
 800d196:	60a2      	str	r2, [r4, #8]
 800d198:	6123      	str	r3, [r4, #16]
 800d19a:	b003      	add	sp, #12
 800d19c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d1a0:	68a3      	ldr	r3, [r4, #8]
 800d1a2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d1a6:	701a      	strb	r2, [r3, #0]
 800d1a8:	e7bc      	b.n	800d124 <ucdr_serialize_endian_uint16_t+0x60>
 800d1aa:	f10d 0506 	add.w	r5, sp, #6
 800d1ae:	4629      	mov	r1, r5
 800d1b0:	4632      	mov	r2, r6
 800d1b2:	4638      	mov	r0, r7
 800d1b4:	f00e f99b 	bl	801b4ee <memcpy>
 800d1b8:	68a0      	ldr	r0, [r4, #8]
 800d1ba:	464a      	mov	r2, r9
 800d1bc:	19a9      	adds	r1, r5, r6
 800d1be:	f00e f996 	bl	801b4ee <memcpy>
 800d1c2:	e7af      	b.n	800d124 <ucdr_serialize_endian_uint16_t+0x60>

0800d1c4 <ucdr_deserialize_uint16_t>:
 800d1c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d1c8:	460d      	mov	r5, r1
 800d1ca:	2102      	movs	r1, #2
 800d1cc:	4604      	mov	r4, r0
 800d1ce:	f001 f9bb 	bl	800e548 <ucdr_buffer_alignment>
 800d1d2:	4601      	mov	r1, r0
 800d1d4:	4620      	mov	r0, r4
 800d1d6:	f894 8015 	ldrb.w	r8, [r4, #21]
 800d1da:	f001 f9f9 	bl	800e5d0 <ucdr_advance_buffer>
 800d1de:	2102      	movs	r1, #2
 800d1e0:	4620      	mov	r0, r4
 800d1e2:	f001 f951 	bl	800e488 <ucdr_check_buffer_available_for>
 800d1e6:	bb60      	cbnz	r0, 800d242 <ucdr_deserialize_uint16_t+0x7e>
 800d1e8:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800d1ec:	42be      	cmp	r6, r7
 800d1ee:	d923      	bls.n	800d238 <ucdr_deserialize_uint16_t+0x74>
 800d1f0:	6923      	ldr	r3, [r4, #16]
 800d1f2:	60a6      	str	r6, [r4, #8]
 800d1f4:	1bf6      	subs	r6, r6, r7
 800d1f6:	4433      	add	r3, r6
 800d1f8:	f1c6 0902 	rsb	r9, r6, #2
 800d1fc:	6123      	str	r3, [r4, #16]
 800d1fe:	4649      	mov	r1, r9
 800d200:	4620      	mov	r0, r4
 800d202:	f001 f94d 	bl	800e4a0 <ucdr_check_final_buffer_behavior>
 800d206:	2800      	cmp	r0, #0
 800d208:	d034      	beq.n	800d274 <ucdr_deserialize_uint16_t+0xb0>
 800d20a:	7d23      	ldrb	r3, [r4, #20]
 800d20c:	2b01      	cmp	r3, #1
 800d20e:	d042      	beq.n	800d296 <ucdr_deserialize_uint16_t+0xd2>
 800d210:	787b      	ldrb	r3, [r7, #1]
 800d212:	702b      	strb	r3, [r5, #0]
 800d214:	2e00      	cmp	r6, #0
 800d216:	d03a      	beq.n	800d28e <ucdr_deserialize_uint16_t+0xca>
 800d218:	783b      	ldrb	r3, [r7, #0]
 800d21a:	706b      	strb	r3, [r5, #1]
 800d21c:	6923      	ldr	r3, [r4, #16]
 800d21e:	68a2      	ldr	r2, [r4, #8]
 800d220:	7da0      	ldrb	r0, [r4, #22]
 800d222:	2102      	movs	r1, #2
 800d224:	3302      	adds	r3, #2
 800d226:	444a      	add	r2, r9
 800d228:	1b9b      	subs	r3, r3, r6
 800d22a:	7561      	strb	r1, [r4, #21]
 800d22c:	60a2      	str	r2, [r4, #8]
 800d22e:	6123      	str	r3, [r4, #16]
 800d230:	f080 0001 	eor.w	r0, r0, #1
 800d234:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d238:	2102      	movs	r1, #2
 800d23a:	4620      	mov	r0, r4
 800d23c:	f001 f930 	bl	800e4a0 <ucdr_check_final_buffer_behavior>
 800d240:	b180      	cbz	r0, 800d264 <ucdr_deserialize_uint16_t+0xa0>
 800d242:	7d23      	ldrb	r3, [r4, #20]
 800d244:	2b01      	cmp	r3, #1
 800d246:	68a3      	ldr	r3, [r4, #8]
 800d248:	d011      	beq.n	800d26e <ucdr_deserialize_uint16_t+0xaa>
 800d24a:	785b      	ldrb	r3, [r3, #1]
 800d24c:	702b      	strb	r3, [r5, #0]
 800d24e:	68a3      	ldr	r3, [r4, #8]
 800d250:	781b      	ldrb	r3, [r3, #0]
 800d252:	706b      	strb	r3, [r5, #1]
 800d254:	68a2      	ldr	r2, [r4, #8]
 800d256:	6923      	ldr	r3, [r4, #16]
 800d258:	3202      	adds	r2, #2
 800d25a:	3302      	adds	r3, #2
 800d25c:	2102      	movs	r1, #2
 800d25e:	60a2      	str	r2, [r4, #8]
 800d260:	6123      	str	r3, [r4, #16]
 800d262:	7561      	strb	r1, [r4, #21]
 800d264:	7da0      	ldrb	r0, [r4, #22]
 800d266:	f080 0001 	eor.w	r0, r0, #1
 800d26a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d26e:	881b      	ldrh	r3, [r3, #0]
 800d270:	802b      	strh	r3, [r5, #0]
 800d272:	e7ef      	b.n	800d254 <ucdr_deserialize_uint16_t+0x90>
 800d274:	68a2      	ldr	r2, [r4, #8]
 800d276:	6923      	ldr	r3, [r4, #16]
 800d278:	7da0      	ldrb	r0, [r4, #22]
 800d27a:	f884 8015 	strb.w	r8, [r4, #21]
 800d27e:	1b92      	subs	r2, r2, r6
 800d280:	1b9b      	subs	r3, r3, r6
 800d282:	60a2      	str	r2, [r4, #8]
 800d284:	6123      	str	r3, [r4, #16]
 800d286:	f080 0001 	eor.w	r0, r0, #1
 800d28a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d28e:	68a3      	ldr	r3, [r4, #8]
 800d290:	781b      	ldrb	r3, [r3, #0]
 800d292:	706b      	strb	r3, [r5, #1]
 800d294:	e7c2      	b.n	800d21c <ucdr_deserialize_uint16_t+0x58>
 800d296:	4639      	mov	r1, r7
 800d298:	4632      	mov	r2, r6
 800d29a:	4628      	mov	r0, r5
 800d29c:	f00e f927 	bl	801b4ee <memcpy>
 800d2a0:	68a1      	ldr	r1, [r4, #8]
 800d2a2:	464a      	mov	r2, r9
 800d2a4:	19a8      	adds	r0, r5, r6
 800d2a6:	f00e f922 	bl	801b4ee <memcpy>
 800d2aa:	e7b7      	b.n	800d21c <ucdr_deserialize_uint16_t+0x58>

0800d2ac <ucdr_deserialize_endian_uint16_t>:
 800d2ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d2b0:	460e      	mov	r6, r1
 800d2b2:	2102      	movs	r1, #2
 800d2b4:	4604      	mov	r4, r0
 800d2b6:	4615      	mov	r5, r2
 800d2b8:	f001 f946 	bl	800e548 <ucdr_buffer_alignment>
 800d2bc:	4601      	mov	r1, r0
 800d2be:	4620      	mov	r0, r4
 800d2c0:	f894 9015 	ldrb.w	r9, [r4, #21]
 800d2c4:	f001 f984 	bl	800e5d0 <ucdr_advance_buffer>
 800d2c8:	2102      	movs	r1, #2
 800d2ca:	4620      	mov	r0, r4
 800d2cc:	f001 f8dc 	bl	800e488 <ucdr_check_buffer_available_for>
 800d2d0:	bb70      	cbnz	r0, 800d330 <ucdr_deserialize_endian_uint16_t+0x84>
 800d2d2:	e9d4 7801 	ldrd	r7, r8, [r4, #4]
 800d2d6:	4547      	cmp	r7, r8
 800d2d8:	d925      	bls.n	800d326 <ucdr_deserialize_endian_uint16_t+0x7a>
 800d2da:	6923      	ldr	r3, [r4, #16]
 800d2dc:	60a7      	str	r7, [r4, #8]
 800d2de:	eba7 0708 	sub.w	r7, r7, r8
 800d2e2:	443b      	add	r3, r7
 800d2e4:	f1c7 0a02 	rsb	sl, r7, #2
 800d2e8:	6123      	str	r3, [r4, #16]
 800d2ea:	4651      	mov	r1, sl
 800d2ec:	4620      	mov	r0, r4
 800d2ee:	f001 f8d7 	bl	800e4a0 <ucdr_check_final_buffer_behavior>
 800d2f2:	2800      	cmp	r0, #0
 800d2f4:	d034      	beq.n	800d360 <ucdr_deserialize_endian_uint16_t+0xb4>
 800d2f6:	2e01      	cmp	r6, #1
 800d2f8:	d043      	beq.n	800d382 <ucdr_deserialize_endian_uint16_t+0xd6>
 800d2fa:	f898 3001 	ldrb.w	r3, [r8, #1]
 800d2fe:	702b      	strb	r3, [r5, #0]
 800d300:	2f00      	cmp	r7, #0
 800d302:	d03a      	beq.n	800d37a <ucdr_deserialize_endian_uint16_t+0xce>
 800d304:	f898 3000 	ldrb.w	r3, [r8]
 800d308:	706b      	strb	r3, [r5, #1]
 800d30a:	6923      	ldr	r3, [r4, #16]
 800d30c:	68a2      	ldr	r2, [r4, #8]
 800d30e:	7da0      	ldrb	r0, [r4, #22]
 800d310:	2102      	movs	r1, #2
 800d312:	3302      	adds	r3, #2
 800d314:	4452      	add	r2, sl
 800d316:	1bdb      	subs	r3, r3, r7
 800d318:	7561      	strb	r1, [r4, #21]
 800d31a:	60a2      	str	r2, [r4, #8]
 800d31c:	6123      	str	r3, [r4, #16]
 800d31e:	f080 0001 	eor.w	r0, r0, #1
 800d322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d326:	2102      	movs	r1, #2
 800d328:	4620      	mov	r0, r4
 800d32a:	f001 f8b9 	bl	800e4a0 <ucdr_check_final_buffer_behavior>
 800d32e:	b178      	cbz	r0, 800d350 <ucdr_deserialize_endian_uint16_t+0xa4>
 800d330:	2e01      	cmp	r6, #1
 800d332:	68a3      	ldr	r3, [r4, #8]
 800d334:	d011      	beq.n	800d35a <ucdr_deserialize_endian_uint16_t+0xae>
 800d336:	785b      	ldrb	r3, [r3, #1]
 800d338:	702b      	strb	r3, [r5, #0]
 800d33a:	68a3      	ldr	r3, [r4, #8]
 800d33c:	781b      	ldrb	r3, [r3, #0]
 800d33e:	706b      	strb	r3, [r5, #1]
 800d340:	68a2      	ldr	r2, [r4, #8]
 800d342:	6923      	ldr	r3, [r4, #16]
 800d344:	3202      	adds	r2, #2
 800d346:	3302      	adds	r3, #2
 800d348:	2102      	movs	r1, #2
 800d34a:	60a2      	str	r2, [r4, #8]
 800d34c:	6123      	str	r3, [r4, #16]
 800d34e:	7561      	strb	r1, [r4, #21]
 800d350:	7da0      	ldrb	r0, [r4, #22]
 800d352:	f080 0001 	eor.w	r0, r0, #1
 800d356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d35a:	881b      	ldrh	r3, [r3, #0]
 800d35c:	802b      	strh	r3, [r5, #0]
 800d35e:	e7ef      	b.n	800d340 <ucdr_deserialize_endian_uint16_t+0x94>
 800d360:	68a2      	ldr	r2, [r4, #8]
 800d362:	6923      	ldr	r3, [r4, #16]
 800d364:	7da0      	ldrb	r0, [r4, #22]
 800d366:	f884 9015 	strb.w	r9, [r4, #21]
 800d36a:	1bd2      	subs	r2, r2, r7
 800d36c:	1bdb      	subs	r3, r3, r7
 800d36e:	60a2      	str	r2, [r4, #8]
 800d370:	6123      	str	r3, [r4, #16]
 800d372:	f080 0001 	eor.w	r0, r0, #1
 800d376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d37a:	68a3      	ldr	r3, [r4, #8]
 800d37c:	781b      	ldrb	r3, [r3, #0]
 800d37e:	706b      	strb	r3, [r5, #1]
 800d380:	e7c3      	b.n	800d30a <ucdr_deserialize_endian_uint16_t+0x5e>
 800d382:	4641      	mov	r1, r8
 800d384:	463a      	mov	r2, r7
 800d386:	4628      	mov	r0, r5
 800d388:	f00e f8b1 	bl	801b4ee <memcpy>
 800d38c:	68a1      	ldr	r1, [r4, #8]
 800d38e:	4652      	mov	r2, sl
 800d390:	19e8      	adds	r0, r5, r7
 800d392:	f00e f8ac 	bl	801b4ee <memcpy>
 800d396:	e7b8      	b.n	800d30a <ucdr_deserialize_endian_uint16_t+0x5e>

0800d398 <ucdr_serialize_uint32_t>:
 800d398:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d39c:	b082      	sub	sp, #8
 800d39e:	4604      	mov	r4, r0
 800d3a0:	9101      	str	r1, [sp, #4]
 800d3a2:	2104      	movs	r1, #4
 800d3a4:	f001 f8d0 	bl	800e548 <ucdr_buffer_alignment>
 800d3a8:	4601      	mov	r1, r0
 800d3aa:	4620      	mov	r0, r4
 800d3ac:	7d67      	ldrb	r7, [r4, #21]
 800d3ae:	f001 f90f 	bl	800e5d0 <ucdr_advance_buffer>
 800d3b2:	2104      	movs	r1, #4
 800d3b4:	4620      	mov	r0, r4
 800d3b6:	f001 f867 	bl	800e488 <ucdr_check_buffer_available_for>
 800d3ba:	2800      	cmp	r0, #0
 800d3bc:	d139      	bne.n	800d432 <ucdr_serialize_uint32_t+0x9a>
 800d3be:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800d3c2:	42ab      	cmp	r3, r5
 800d3c4:	d930      	bls.n	800d428 <ucdr_serialize_uint32_t+0x90>
 800d3c6:	1b5e      	subs	r6, r3, r5
 800d3c8:	60a3      	str	r3, [r4, #8]
 800d3ca:	6923      	ldr	r3, [r4, #16]
 800d3cc:	f1c6 0804 	rsb	r8, r6, #4
 800d3d0:	4433      	add	r3, r6
 800d3d2:	6123      	str	r3, [r4, #16]
 800d3d4:	4641      	mov	r1, r8
 800d3d6:	4620      	mov	r0, r4
 800d3d8:	f001 f862 	bl	800e4a0 <ucdr_check_final_buffer_behavior>
 800d3dc:	2800      	cmp	r0, #0
 800d3de:	d04c      	beq.n	800d47a <ucdr_serialize_uint32_t+0xe2>
 800d3e0:	7d23      	ldrb	r3, [r4, #20]
 800d3e2:	2b01      	cmp	r3, #1
 800d3e4:	d063      	beq.n	800d4ae <ucdr_serialize_uint32_t+0x116>
 800d3e6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800d3ea:	702b      	strb	r3, [r5, #0]
 800d3ec:	2e00      	cmp	r6, #0
 800d3ee:	d051      	beq.n	800d494 <ucdr_serialize_uint32_t+0xfc>
 800d3f0:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800d3f4:	706b      	strb	r3, [r5, #1]
 800d3f6:	2e01      	cmp	r6, #1
 800d3f8:	d050      	beq.n	800d49c <ucdr_serialize_uint32_t+0x104>
 800d3fa:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800d3fe:	70ab      	strb	r3, [r5, #2]
 800d400:	2e02      	cmp	r6, #2
 800d402:	d04f      	beq.n	800d4a4 <ucdr_serialize_uint32_t+0x10c>
 800d404:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800d408:	70eb      	strb	r3, [r5, #3]
 800d40a:	6923      	ldr	r3, [r4, #16]
 800d40c:	68a2      	ldr	r2, [r4, #8]
 800d40e:	7da0      	ldrb	r0, [r4, #22]
 800d410:	3304      	adds	r3, #4
 800d412:	1b9e      	subs	r6, r3, r6
 800d414:	4442      	add	r2, r8
 800d416:	2304      	movs	r3, #4
 800d418:	f080 0001 	eor.w	r0, r0, #1
 800d41c:	60a2      	str	r2, [r4, #8]
 800d41e:	6126      	str	r6, [r4, #16]
 800d420:	7563      	strb	r3, [r4, #21]
 800d422:	b002      	add	sp, #8
 800d424:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d428:	2104      	movs	r1, #4
 800d42a:	4620      	mov	r0, r4
 800d42c:	f001 f838 	bl	800e4a0 <ucdr_check_final_buffer_behavior>
 800d430:	b1d0      	cbz	r0, 800d468 <ucdr_serialize_uint32_t+0xd0>
 800d432:	7d23      	ldrb	r3, [r4, #20]
 800d434:	2b01      	cmp	r3, #1
 800d436:	68a3      	ldr	r3, [r4, #8]
 800d438:	d01c      	beq.n	800d474 <ucdr_serialize_uint32_t+0xdc>
 800d43a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800d43e:	701a      	strb	r2, [r3, #0]
 800d440:	68a3      	ldr	r3, [r4, #8]
 800d442:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d446:	705a      	strb	r2, [r3, #1]
 800d448:	68a3      	ldr	r3, [r4, #8]
 800d44a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800d44e:	709a      	strb	r2, [r3, #2]
 800d450:	68a3      	ldr	r3, [r4, #8]
 800d452:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800d456:	70da      	strb	r2, [r3, #3]
 800d458:	68a2      	ldr	r2, [r4, #8]
 800d45a:	6923      	ldr	r3, [r4, #16]
 800d45c:	3204      	adds	r2, #4
 800d45e:	3304      	adds	r3, #4
 800d460:	2104      	movs	r1, #4
 800d462:	60a2      	str	r2, [r4, #8]
 800d464:	6123      	str	r3, [r4, #16]
 800d466:	7561      	strb	r1, [r4, #21]
 800d468:	7da0      	ldrb	r0, [r4, #22]
 800d46a:	f080 0001 	eor.w	r0, r0, #1
 800d46e:	b002      	add	sp, #8
 800d470:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d474:	9a01      	ldr	r2, [sp, #4]
 800d476:	601a      	str	r2, [r3, #0]
 800d478:	e7ee      	b.n	800d458 <ucdr_serialize_uint32_t+0xc0>
 800d47a:	68a2      	ldr	r2, [r4, #8]
 800d47c:	6923      	ldr	r3, [r4, #16]
 800d47e:	7da0      	ldrb	r0, [r4, #22]
 800d480:	7567      	strb	r7, [r4, #21]
 800d482:	1b92      	subs	r2, r2, r6
 800d484:	1b9b      	subs	r3, r3, r6
 800d486:	f080 0001 	eor.w	r0, r0, #1
 800d48a:	60a2      	str	r2, [r4, #8]
 800d48c:	6123      	str	r3, [r4, #16]
 800d48e:	b002      	add	sp, #8
 800d490:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d494:	68a3      	ldr	r3, [r4, #8]
 800d496:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d49a:	701a      	strb	r2, [r3, #0]
 800d49c:	68a3      	ldr	r3, [r4, #8]
 800d49e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800d4a2:	701a      	strb	r2, [r3, #0]
 800d4a4:	68a3      	ldr	r3, [r4, #8]
 800d4a6:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800d4aa:	701a      	strb	r2, [r3, #0]
 800d4ac:	e7ad      	b.n	800d40a <ucdr_serialize_uint32_t+0x72>
 800d4ae:	4628      	mov	r0, r5
 800d4b0:	ad01      	add	r5, sp, #4
 800d4b2:	4629      	mov	r1, r5
 800d4b4:	4632      	mov	r2, r6
 800d4b6:	f00e f81a 	bl	801b4ee <memcpy>
 800d4ba:	68a0      	ldr	r0, [r4, #8]
 800d4bc:	4642      	mov	r2, r8
 800d4be:	19a9      	adds	r1, r5, r6
 800d4c0:	f00e f815 	bl	801b4ee <memcpy>
 800d4c4:	e7a1      	b.n	800d40a <ucdr_serialize_uint32_t+0x72>
 800d4c6:	bf00      	nop

0800d4c8 <ucdr_serialize_endian_uint32_t>:
 800d4c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d4cc:	b083      	sub	sp, #12
 800d4ce:	460d      	mov	r5, r1
 800d4d0:	2104      	movs	r1, #4
 800d4d2:	4604      	mov	r4, r0
 800d4d4:	9201      	str	r2, [sp, #4]
 800d4d6:	f001 f837 	bl	800e548 <ucdr_buffer_alignment>
 800d4da:	4601      	mov	r1, r0
 800d4dc:	4620      	mov	r0, r4
 800d4de:	f894 8015 	ldrb.w	r8, [r4, #21]
 800d4e2:	f001 f875 	bl	800e5d0 <ucdr_advance_buffer>
 800d4e6:	2104      	movs	r1, #4
 800d4e8:	4620      	mov	r0, r4
 800d4ea:	f000 ffcd 	bl	800e488 <ucdr_check_buffer_available_for>
 800d4ee:	2800      	cmp	r0, #0
 800d4f0:	d138      	bne.n	800d564 <ucdr_serialize_endian_uint32_t+0x9c>
 800d4f2:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800d4f6:	42b7      	cmp	r7, r6
 800d4f8:	d92f      	bls.n	800d55a <ucdr_serialize_endian_uint32_t+0x92>
 800d4fa:	6923      	ldr	r3, [r4, #16]
 800d4fc:	60a7      	str	r7, [r4, #8]
 800d4fe:	1bbf      	subs	r7, r7, r6
 800d500:	443b      	add	r3, r7
 800d502:	f1c7 0904 	rsb	r9, r7, #4
 800d506:	6123      	str	r3, [r4, #16]
 800d508:	4649      	mov	r1, r9
 800d50a:	4620      	mov	r0, r4
 800d50c:	f000 ffc8 	bl	800e4a0 <ucdr_check_final_buffer_behavior>
 800d510:	2800      	cmp	r0, #0
 800d512:	d04a      	beq.n	800d5aa <ucdr_serialize_endian_uint32_t+0xe2>
 800d514:	2d01      	cmp	r5, #1
 800d516:	d063      	beq.n	800d5e0 <ucdr_serialize_endian_uint32_t+0x118>
 800d518:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800d51c:	7033      	strb	r3, [r6, #0]
 800d51e:	2f00      	cmp	r7, #0
 800d520:	d051      	beq.n	800d5c6 <ucdr_serialize_endian_uint32_t+0xfe>
 800d522:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800d526:	7073      	strb	r3, [r6, #1]
 800d528:	2f01      	cmp	r7, #1
 800d52a:	d050      	beq.n	800d5ce <ucdr_serialize_endian_uint32_t+0x106>
 800d52c:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800d530:	70b3      	strb	r3, [r6, #2]
 800d532:	2f02      	cmp	r7, #2
 800d534:	d04f      	beq.n	800d5d6 <ucdr_serialize_endian_uint32_t+0x10e>
 800d536:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800d53a:	70f3      	strb	r3, [r6, #3]
 800d53c:	6923      	ldr	r3, [r4, #16]
 800d53e:	68a2      	ldr	r2, [r4, #8]
 800d540:	7da0      	ldrb	r0, [r4, #22]
 800d542:	3304      	adds	r3, #4
 800d544:	444a      	add	r2, r9
 800d546:	1bdb      	subs	r3, r3, r7
 800d548:	2104      	movs	r1, #4
 800d54a:	f080 0001 	eor.w	r0, r0, #1
 800d54e:	60a2      	str	r2, [r4, #8]
 800d550:	6123      	str	r3, [r4, #16]
 800d552:	7561      	strb	r1, [r4, #21]
 800d554:	b003      	add	sp, #12
 800d556:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d55a:	2104      	movs	r1, #4
 800d55c:	4620      	mov	r0, r4
 800d55e:	f000 ff9f 	bl	800e4a0 <ucdr_check_final_buffer_behavior>
 800d562:	b1c8      	cbz	r0, 800d598 <ucdr_serialize_endian_uint32_t+0xd0>
 800d564:	2d01      	cmp	r5, #1
 800d566:	68a3      	ldr	r3, [r4, #8]
 800d568:	d01c      	beq.n	800d5a4 <ucdr_serialize_endian_uint32_t+0xdc>
 800d56a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800d56e:	701a      	strb	r2, [r3, #0]
 800d570:	68a3      	ldr	r3, [r4, #8]
 800d572:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d576:	705a      	strb	r2, [r3, #1]
 800d578:	68a3      	ldr	r3, [r4, #8]
 800d57a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800d57e:	709a      	strb	r2, [r3, #2]
 800d580:	68a3      	ldr	r3, [r4, #8]
 800d582:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800d586:	70da      	strb	r2, [r3, #3]
 800d588:	68a2      	ldr	r2, [r4, #8]
 800d58a:	6923      	ldr	r3, [r4, #16]
 800d58c:	3204      	adds	r2, #4
 800d58e:	3304      	adds	r3, #4
 800d590:	2104      	movs	r1, #4
 800d592:	60a2      	str	r2, [r4, #8]
 800d594:	6123      	str	r3, [r4, #16]
 800d596:	7561      	strb	r1, [r4, #21]
 800d598:	7da0      	ldrb	r0, [r4, #22]
 800d59a:	f080 0001 	eor.w	r0, r0, #1
 800d59e:	b003      	add	sp, #12
 800d5a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d5a4:	9a01      	ldr	r2, [sp, #4]
 800d5a6:	601a      	str	r2, [r3, #0]
 800d5a8:	e7ee      	b.n	800d588 <ucdr_serialize_endian_uint32_t+0xc0>
 800d5aa:	68a2      	ldr	r2, [r4, #8]
 800d5ac:	6923      	ldr	r3, [r4, #16]
 800d5ae:	7da0      	ldrb	r0, [r4, #22]
 800d5b0:	f884 8015 	strb.w	r8, [r4, #21]
 800d5b4:	1bd2      	subs	r2, r2, r7
 800d5b6:	1bdb      	subs	r3, r3, r7
 800d5b8:	f080 0001 	eor.w	r0, r0, #1
 800d5bc:	60a2      	str	r2, [r4, #8]
 800d5be:	6123      	str	r3, [r4, #16]
 800d5c0:	b003      	add	sp, #12
 800d5c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d5c6:	68a3      	ldr	r3, [r4, #8]
 800d5c8:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d5cc:	701a      	strb	r2, [r3, #0]
 800d5ce:	68a3      	ldr	r3, [r4, #8]
 800d5d0:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800d5d4:	701a      	strb	r2, [r3, #0]
 800d5d6:	68a3      	ldr	r3, [r4, #8]
 800d5d8:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800d5dc:	701a      	strb	r2, [r3, #0]
 800d5de:	e7ad      	b.n	800d53c <ucdr_serialize_endian_uint32_t+0x74>
 800d5e0:	ad01      	add	r5, sp, #4
 800d5e2:	4629      	mov	r1, r5
 800d5e4:	463a      	mov	r2, r7
 800d5e6:	4630      	mov	r0, r6
 800d5e8:	f00d ff81 	bl	801b4ee <memcpy>
 800d5ec:	68a0      	ldr	r0, [r4, #8]
 800d5ee:	464a      	mov	r2, r9
 800d5f0:	19e9      	adds	r1, r5, r7
 800d5f2:	f00d ff7c 	bl	801b4ee <memcpy>
 800d5f6:	e7a1      	b.n	800d53c <ucdr_serialize_endian_uint32_t+0x74>

0800d5f8 <ucdr_deserialize_uint32_t>:
 800d5f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d5fc:	460d      	mov	r5, r1
 800d5fe:	2104      	movs	r1, #4
 800d600:	4604      	mov	r4, r0
 800d602:	f000 ffa1 	bl	800e548 <ucdr_buffer_alignment>
 800d606:	4601      	mov	r1, r0
 800d608:	4620      	mov	r0, r4
 800d60a:	f894 8015 	ldrb.w	r8, [r4, #21]
 800d60e:	f000 ffdf 	bl	800e5d0 <ucdr_advance_buffer>
 800d612:	2104      	movs	r1, #4
 800d614:	4620      	mov	r0, r4
 800d616:	f000 ff37 	bl	800e488 <ucdr_check_buffer_available_for>
 800d61a:	2800      	cmp	r0, #0
 800d61c:	d138      	bne.n	800d690 <ucdr_deserialize_uint32_t+0x98>
 800d61e:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800d622:	42b7      	cmp	r7, r6
 800d624:	d92f      	bls.n	800d686 <ucdr_deserialize_uint32_t+0x8e>
 800d626:	6923      	ldr	r3, [r4, #16]
 800d628:	60a7      	str	r7, [r4, #8]
 800d62a:	1bbf      	subs	r7, r7, r6
 800d62c:	443b      	add	r3, r7
 800d62e:	f1c7 0904 	rsb	r9, r7, #4
 800d632:	6123      	str	r3, [r4, #16]
 800d634:	4649      	mov	r1, r9
 800d636:	4620      	mov	r0, r4
 800d638:	f000 ff32 	bl	800e4a0 <ucdr_check_final_buffer_behavior>
 800d63c:	2800      	cmp	r0, #0
 800d63e:	d046      	beq.n	800d6ce <ucdr_deserialize_uint32_t+0xd6>
 800d640:	7d23      	ldrb	r3, [r4, #20]
 800d642:	2b01      	cmp	r3, #1
 800d644:	d05c      	beq.n	800d700 <ucdr_deserialize_uint32_t+0x108>
 800d646:	78f3      	ldrb	r3, [r6, #3]
 800d648:	702b      	strb	r3, [r5, #0]
 800d64a:	2f00      	cmp	r7, #0
 800d64c:	d04c      	beq.n	800d6e8 <ucdr_deserialize_uint32_t+0xf0>
 800d64e:	78b3      	ldrb	r3, [r6, #2]
 800d650:	706b      	strb	r3, [r5, #1]
 800d652:	2f01      	cmp	r7, #1
 800d654:	f105 0302 	add.w	r3, r5, #2
 800d658:	d04a      	beq.n	800d6f0 <ucdr_deserialize_uint32_t+0xf8>
 800d65a:	7873      	ldrb	r3, [r6, #1]
 800d65c:	70ab      	strb	r3, [r5, #2]
 800d65e:	2f02      	cmp	r7, #2
 800d660:	f105 0303 	add.w	r3, r5, #3
 800d664:	d048      	beq.n	800d6f8 <ucdr_deserialize_uint32_t+0x100>
 800d666:	7833      	ldrb	r3, [r6, #0]
 800d668:	70eb      	strb	r3, [r5, #3]
 800d66a:	6923      	ldr	r3, [r4, #16]
 800d66c:	68a2      	ldr	r2, [r4, #8]
 800d66e:	7da0      	ldrb	r0, [r4, #22]
 800d670:	2104      	movs	r1, #4
 800d672:	3304      	adds	r3, #4
 800d674:	444a      	add	r2, r9
 800d676:	1bdb      	subs	r3, r3, r7
 800d678:	7561      	strb	r1, [r4, #21]
 800d67a:	60a2      	str	r2, [r4, #8]
 800d67c:	6123      	str	r3, [r4, #16]
 800d67e:	f080 0001 	eor.w	r0, r0, #1
 800d682:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d686:	2104      	movs	r1, #4
 800d688:	4620      	mov	r0, r4
 800d68a:	f000 ff09 	bl	800e4a0 <ucdr_check_final_buffer_behavior>
 800d68e:	b1b0      	cbz	r0, 800d6be <ucdr_deserialize_uint32_t+0xc6>
 800d690:	7d23      	ldrb	r3, [r4, #20]
 800d692:	2b01      	cmp	r3, #1
 800d694:	68a3      	ldr	r3, [r4, #8]
 800d696:	d017      	beq.n	800d6c8 <ucdr_deserialize_uint32_t+0xd0>
 800d698:	78db      	ldrb	r3, [r3, #3]
 800d69a:	702b      	strb	r3, [r5, #0]
 800d69c:	68a3      	ldr	r3, [r4, #8]
 800d69e:	789b      	ldrb	r3, [r3, #2]
 800d6a0:	706b      	strb	r3, [r5, #1]
 800d6a2:	68a3      	ldr	r3, [r4, #8]
 800d6a4:	785b      	ldrb	r3, [r3, #1]
 800d6a6:	70ab      	strb	r3, [r5, #2]
 800d6a8:	68a3      	ldr	r3, [r4, #8]
 800d6aa:	781b      	ldrb	r3, [r3, #0]
 800d6ac:	70eb      	strb	r3, [r5, #3]
 800d6ae:	68a2      	ldr	r2, [r4, #8]
 800d6b0:	6923      	ldr	r3, [r4, #16]
 800d6b2:	3204      	adds	r2, #4
 800d6b4:	3304      	adds	r3, #4
 800d6b6:	2104      	movs	r1, #4
 800d6b8:	60a2      	str	r2, [r4, #8]
 800d6ba:	6123      	str	r3, [r4, #16]
 800d6bc:	7561      	strb	r1, [r4, #21]
 800d6be:	7da0      	ldrb	r0, [r4, #22]
 800d6c0:	f080 0001 	eor.w	r0, r0, #1
 800d6c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d6c8:	681b      	ldr	r3, [r3, #0]
 800d6ca:	602b      	str	r3, [r5, #0]
 800d6cc:	e7ef      	b.n	800d6ae <ucdr_deserialize_uint32_t+0xb6>
 800d6ce:	68a2      	ldr	r2, [r4, #8]
 800d6d0:	6923      	ldr	r3, [r4, #16]
 800d6d2:	7da0      	ldrb	r0, [r4, #22]
 800d6d4:	f884 8015 	strb.w	r8, [r4, #21]
 800d6d8:	1bd2      	subs	r2, r2, r7
 800d6da:	1bdb      	subs	r3, r3, r7
 800d6dc:	60a2      	str	r2, [r4, #8]
 800d6de:	6123      	str	r3, [r4, #16]
 800d6e0:	f080 0001 	eor.w	r0, r0, #1
 800d6e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d6e8:	68a3      	ldr	r3, [r4, #8]
 800d6ea:	789b      	ldrb	r3, [r3, #2]
 800d6ec:	706b      	strb	r3, [r5, #1]
 800d6ee:	1cab      	adds	r3, r5, #2
 800d6f0:	68a2      	ldr	r2, [r4, #8]
 800d6f2:	7852      	ldrb	r2, [r2, #1]
 800d6f4:	f803 2b01 	strb.w	r2, [r3], #1
 800d6f8:	68a2      	ldr	r2, [r4, #8]
 800d6fa:	7812      	ldrb	r2, [r2, #0]
 800d6fc:	701a      	strb	r2, [r3, #0]
 800d6fe:	e7b4      	b.n	800d66a <ucdr_deserialize_uint32_t+0x72>
 800d700:	4631      	mov	r1, r6
 800d702:	463a      	mov	r2, r7
 800d704:	4628      	mov	r0, r5
 800d706:	f00d fef2 	bl	801b4ee <memcpy>
 800d70a:	68a1      	ldr	r1, [r4, #8]
 800d70c:	464a      	mov	r2, r9
 800d70e:	19e8      	adds	r0, r5, r7
 800d710:	f00d feed 	bl	801b4ee <memcpy>
 800d714:	e7a9      	b.n	800d66a <ucdr_deserialize_uint32_t+0x72>
 800d716:	bf00      	nop

0800d718 <ucdr_deserialize_endian_uint32_t>:
 800d718:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d71c:	460e      	mov	r6, r1
 800d71e:	2104      	movs	r1, #4
 800d720:	4604      	mov	r4, r0
 800d722:	4615      	mov	r5, r2
 800d724:	f000 ff10 	bl	800e548 <ucdr_buffer_alignment>
 800d728:	4601      	mov	r1, r0
 800d72a:	4620      	mov	r0, r4
 800d72c:	f894 9015 	ldrb.w	r9, [r4, #21]
 800d730:	f000 ff4e 	bl	800e5d0 <ucdr_advance_buffer>
 800d734:	2104      	movs	r1, #4
 800d736:	4620      	mov	r0, r4
 800d738:	f000 fea6 	bl	800e488 <ucdr_check_buffer_available_for>
 800d73c:	2800      	cmp	r0, #0
 800d73e:	d13c      	bne.n	800d7ba <ucdr_deserialize_endian_uint32_t+0xa2>
 800d740:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 800d744:	42bb      	cmp	r3, r7
 800d746:	d933      	bls.n	800d7b0 <ucdr_deserialize_endian_uint32_t+0x98>
 800d748:	eba3 0807 	sub.w	r8, r3, r7
 800d74c:	60a3      	str	r3, [r4, #8]
 800d74e:	6923      	ldr	r3, [r4, #16]
 800d750:	f1c8 0a04 	rsb	sl, r8, #4
 800d754:	4443      	add	r3, r8
 800d756:	6123      	str	r3, [r4, #16]
 800d758:	4651      	mov	r1, sl
 800d75a:	4620      	mov	r0, r4
 800d75c:	f000 fea0 	bl	800e4a0 <ucdr_check_final_buffer_behavior>
 800d760:	2800      	cmp	r0, #0
 800d762:	d048      	beq.n	800d7f6 <ucdr_deserialize_endian_uint32_t+0xde>
 800d764:	2e01      	cmp	r6, #1
 800d766:	d061      	beq.n	800d82c <ucdr_deserialize_endian_uint32_t+0x114>
 800d768:	78fb      	ldrb	r3, [r7, #3]
 800d76a:	702b      	strb	r3, [r5, #0]
 800d76c:	f1b8 0f00 	cmp.w	r8, #0
 800d770:	d050      	beq.n	800d814 <ucdr_deserialize_endian_uint32_t+0xfc>
 800d772:	78bb      	ldrb	r3, [r7, #2]
 800d774:	706b      	strb	r3, [r5, #1]
 800d776:	f1b8 0f01 	cmp.w	r8, #1
 800d77a:	f105 0302 	add.w	r3, r5, #2
 800d77e:	d04d      	beq.n	800d81c <ucdr_deserialize_endian_uint32_t+0x104>
 800d780:	787b      	ldrb	r3, [r7, #1]
 800d782:	70ab      	strb	r3, [r5, #2]
 800d784:	f1b8 0f02 	cmp.w	r8, #2
 800d788:	f105 0303 	add.w	r3, r5, #3
 800d78c:	d04a      	beq.n	800d824 <ucdr_deserialize_endian_uint32_t+0x10c>
 800d78e:	783b      	ldrb	r3, [r7, #0]
 800d790:	70eb      	strb	r3, [r5, #3]
 800d792:	6923      	ldr	r3, [r4, #16]
 800d794:	68a2      	ldr	r2, [r4, #8]
 800d796:	7da0      	ldrb	r0, [r4, #22]
 800d798:	2104      	movs	r1, #4
 800d79a:	3304      	adds	r3, #4
 800d79c:	4452      	add	r2, sl
 800d79e:	eba3 0308 	sub.w	r3, r3, r8
 800d7a2:	7561      	strb	r1, [r4, #21]
 800d7a4:	60a2      	str	r2, [r4, #8]
 800d7a6:	6123      	str	r3, [r4, #16]
 800d7a8:	f080 0001 	eor.w	r0, r0, #1
 800d7ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d7b0:	2104      	movs	r1, #4
 800d7b2:	4620      	mov	r0, r4
 800d7b4:	f000 fe74 	bl	800e4a0 <ucdr_check_final_buffer_behavior>
 800d7b8:	b1a8      	cbz	r0, 800d7e6 <ucdr_deserialize_endian_uint32_t+0xce>
 800d7ba:	2e01      	cmp	r6, #1
 800d7bc:	68a3      	ldr	r3, [r4, #8]
 800d7be:	d017      	beq.n	800d7f0 <ucdr_deserialize_endian_uint32_t+0xd8>
 800d7c0:	78db      	ldrb	r3, [r3, #3]
 800d7c2:	702b      	strb	r3, [r5, #0]
 800d7c4:	68a3      	ldr	r3, [r4, #8]
 800d7c6:	789b      	ldrb	r3, [r3, #2]
 800d7c8:	706b      	strb	r3, [r5, #1]
 800d7ca:	68a3      	ldr	r3, [r4, #8]
 800d7cc:	785b      	ldrb	r3, [r3, #1]
 800d7ce:	70ab      	strb	r3, [r5, #2]
 800d7d0:	68a3      	ldr	r3, [r4, #8]
 800d7d2:	781b      	ldrb	r3, [r3, #0]
 800d7d4:	70eb      	strb	r3, [r5, #3]
 800d7d6:	68a2      	ldr	r2, [r4, #8]
 800d7d8:	6923      	ldr	r3, [r4, #16]
 800d7da:	3204      	adds	r2, #4
 800d7dc:	3304      	adds	r3, #4
 800d7de:	2104      	movs	r1, #4
 800d7e0:	60a2      	str	r2, [r4, #8]
 800d7e2:	6123      	str	r3, [r4, #16]
 800d7e4:	7561      	strb	r1, [r4, #21]
 800d7e6:	7da0      	ldrb	r0, [r4, #22]
 800d7e8:	f080 0001 	eor.w	r0, r0, #1
 800d7ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d7f0:	681b      	ldr	r3, [r3, #0]
 800d7f2:	602b      	str	r3, [r5, #0]
 800d7f4:	e7ef      	b.n	800d7d6 <ucdr_deserialize_endian_uint32_t+0xbe>
 800d7f6:	68a2      	ldr	r2, [r4, #8]
 800d7f8:	6923      	ldr	r3, [r4, #16]
 800d7fa:	7da0      	ldrb	r0, [r4, #22]
 800d7fc:	f884 9015 	strb.w	r9, [r4, #21]
 800d800:	eba2 0208 	sub.w	r2, r2, r8
 800d804:	eba3 0308 	sub.w	r3, r3, r8
 800d808:	60a2      	str	r2, [r4, #8]
 800d80a:	6123      	str	r3, [r4, #16]
 800d80c:	f080 0001 	eor.w	r0, r0, #1
 800d810:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d814:	68a3      	ldr	r3, [r4, #8]
 800d816:	789b      	ldrb	r3, [r3, #2]
 800d818:	706b      	strb	r3, [r5, #1]
 800d81a:	1cab      	adds	r3, r5, #2
 800d81c:	68a2      	ldr	r2, [r4, #8]
 800d81e:	7852      	ldrb	r2, [r2, #1]
 800d820:	f803 2b01 	strb.w	r2, [r3], #1
 800d824:	68a2      	ldr	r2, [r4, #8]
 800d826:	7812      	ldrb	r2, [r2, #0]
 800d828:	701a      	strb	r2, [r3, #0]
 800d82a:	e7b2      	b.n	800d792 <ucdr_deserialize_endian_uint32_t+0x7a>
 800d82c:	4639      	mov	r1, r7
 800d82e:	4642      	mov	r2, r8
 800d830:	4628      	mov	r0, r5
 800d832:	f00d fe5c 	bl	801b4ee <memcpy>
 800d836:	68a1      	ldr	r1, [r4, #8]
 800d838:	4652      	mov	r2, sl
 800d83a:	eb05 0008 	add.w	r0, r5, r8
 800d83e:	f00d fe56 	bl	801b4ee <memcpy>
 800d842:	e7a6      	b.n	800d792 <ucdr_deserialize_endian_uint32_t+0x7a>

0800d844 <ucdr_serialize_uint64_t>:
 800d844:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d848:	2108      	movs	r1, #8
 800d84a:	b082      	sub	sp, #8
 800d84c:	4604      	mov	r4, r0
 800d84e:	e9cd 2300 	strd	r2, r3, [sp]
 800d852:	f000 fe79 	bl	800e548 <ucdr_buffer_alignment>
 800d856:	4601      	mov	r1, r0
 800d858:	4620      	mov	r0, r4
 800d85a:	7d67      	ldrb	r7, [r4, #21]
 800d85c:	f000 feb8 	bl	800e5d0 <ucdr_advance_buffer>
 800d860:	2108      	movs	r1, #8
 800d862:	4620      	mov	r0, r4
 800d864:	f000 fe10 	bl	800e488 <ucdr_check_buffer_available_for>
 800d868:	2800      	cmp	r0, #0
 800d86a:	d14e      	bne.n	800d90a <ucdr_serialize_uint64_t+0xc6>
 800d86c:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800d870:	42ab      	cmp	r3, r5
 800d872:	d945      	bls.n	800d900 <ucdr_serialize_uint64_t+0xbc>
 800d874:	1b5e      	subs	r6, r3, r5
 800d876:	60a3      	str	r3, [r4, #8]
 800d878:	6923      	ldr	r3, [r4, #16]
 800d87a:	f1c6 0808 	rsb	r8, r6, #8
 800d87e:	4433      	add	r3, r6
 800d880:	6123      	str	r3, [r4, #16]
 800d882:	4641      	mov	r1, r8
 800d884:	4620      	mov	r0, r4
 800d886:	f000 fe0b 	bl	800e4a0 <ucdr_check_final_buffer_behavior>
 800d88a:	2800      	cmp	r0, #0
 800d88c:	d074      	beq.n	800d978 <ucdr_serialize_uint64_t+0x134>
 800d88e:	7d23      	ldrb	r3, [r4, #20]
 800d890:	2b01      	cmp	r3, #1
 800d892:	f000 809b 	beq.w	800d9cc <ucdr_serialize_uint64_t+0x188>
 800d896:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800d89a:	702b      	strb	r3, [r5, #0]
 800d89c:	2e00      	cmp	r6, #0
 800d89e:	d078      	beq.n	800d992 <ucdr_serialize_uint64_t+0x14e>
 800d8a0:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800d8a4:	706b      	strb	r3, [r5, #1]
 800d8a6:	2e01      	cmp	r6, #1
 800d8a8:	d077      	beq.n	800d99a <ucdr_serialize_uint64_t+0x156>
 800d8aa:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800d8ae:	70ab      	strb	r3, [r5, #2]
 800d8b0:	2e02      	cmp	r6, #2
 800d8b2:	d076      	beq.n	800d9a2 <ucdr_serialize_uint64_t+0x15e>
 800d8b4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800d8b8:	70eb      	strb	r3, [r5, #3]
 800d8ba:	2e03      	cmp	r6, #3
 800d8bc:	d075      	beq.n	800d9aa <ucdr_serialize_uint64_t+0x166>
 800d8be:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800d8c2:	712b      	strb	r3, [r5, #4]
 800d8c4:	2e04      	cmp	r6, #4
 800d8c6:	d074      	beq.n	800d9b2 <ucdr_serialize_uint64_t+0x16e>
 800d8c8:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800d8cc:	716b      	strb	r3, [r5, #5]
 800d8ce:	2e05      	cmp	r6, #5
 800d8d0:	d073      	beq.n	800d9ba <ucdr_serialize_uint64_t+0x176>
 800d8d2:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800d8d6:	71ab      	strb	r3, [r5, #6]
 800d8d8:	2e06      	cmp	r6, #6
 800d8da:	d072      	beq.n	800d9c2 <ucdr_serialize_uint64_t+0x17e>
 800d8dc:	f89d 3000 	ldrb.w	r3, [sp]
 800d8e0:	71eb      	strb	r3, [r5, #7]
 800d8e2:	6923      	ldr	r3, [r4, #16]
 800d8e4:	68a2      	ldr	r2, [r4, #8]
 800d8e6:	7da0      	ldrb	r0, [r4, #22]
 800d8e8:	3308      	adds	r3, #8
 800d8ea:	1b9e      	subs	r6, r3, r6
 800d8ec:	4442      	add	r2, r8
 800d8ee:	2308      	movs	r3, #8
 800d8f0:	f080 0001 	eor.w	r0, r0, #1
 800d8f4:	60a2      	str	r2, [r4, #8]
 800d8f6:	6126      	str	r6, [r4, #16]
 800d8f8:	7563      	strb	r3, [r4, #21]
 800d8fa:	b002      	add	sp, #8
 800d8fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d900:	2108      	movs	r1, #8
 800d902:	4620      	mov	r0, r4
 800d904:	f000 fdcc 	bl	800e4a0 <ucdr_check_final_buffer_behavior>
 800d908:	b350      	cbz	r0, 800d960 <ucdr_serialize_uint64_t+0x11c>
 800d90a:	7d23      	ldrb	r3, [r4, #20]
 800d90c:	2b01      	cmp	r3, #1
 800d90e:	d02d      	beq.n	800d96c <ucdr_serialize_uint64_t+0x128>
 800d910:	68a3      	ldr	r3, [r4, #8]
 800d912:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800d916:	701a      	strb	r2, [r3, #0]
 800d918:	68a3      	ldr	r3, [r4, #8]
 800d91a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d91e:	705a      	strb	r2, [r3, #1]
 800d920:	68a3      	ldr	r3, [r4, #8]
 800d922:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800d926:	709a      	strb	r2, [r3, #2]
 800d928:	68a3      	ldr	r3, [r4, #8]
 800d92a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800d92e:	70da      	strb	r2, [r3, #3]
 800d930:	68a3      	ldr	r3, [r4, #8]
 800d932:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800d936:	711a      	strb	r2, [r3, #4]
 800d938:	68a3      	ldr	r3, [r4, #8]
 800d93a:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800d93e:	715a      	strb	r2, [r3, #5]
 800d940:	68a3      	ldr	r3, [r4, #8]
 800d942:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800d946:	719a      	strb	r2, [r3, #6]
 800d948:	68a3      	ldr	r3, [r4, #8]
 800d94a:	f89d 2000 	ldrb.w	r2, [sp]
 800d94e:	71da      	strb	r2, [r3, #7]
 800d950:	68a2      	ldr	r2, [r4, #8]
 800d952:	6923      	ldr	r3, [r4, #16]
 800d954:	3208      	adds	r2, #8
 800d956:	3308      	adds	r3, #8
 800d958:	2108      	movs	r1, #8
 800d95a:	60a2      	str	r2, [r4, #8]
 800d95c:	6123      	str	r3, [r4, #16]
 800d95e:	7561      	strb	r1, [r4, #21]
 800d960:	7da0      	ldrb	r0, [r4, #22]
 800d962:	f080 0001 	eor.w	r0, r0, #1
 800d966:	b002      	add	sp, #8
 800d968:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d96c:	466b      	mov	r3, sp
 800d96e:	cb03      	ldmia	r3!, {r0, r1}
 800d970:	68a3      	ldr	r3, [r4, #8]
 800d972:	6018      	str	r0, [r3, #0]
 800d974:	6059      	str	r1, [r3, #4]
 800d976:	e7eb      	b.n	800d950 <ucdr_serialize_uint64_t+0x10c>
 800d978:	68a2      	ldr	r2, [r4, #8]
 800d97a:	6923      	ldr	r3, [r4, #16]
 800d97c:	7da0      	ldrb	r0, [r4, #22]
 800d97e:	7567      	strb	r7, [r4, #21]
 800d980:	1b92      	subs	r2, r2, r6
 800d982:	1b9b      	subs	r3, r3, r6
 800d984:	f080 0001 	eor.w	r0, r0, #1
 800d988:	60a2      	str	r2, [r4, #8]
 800d98a:	6123      	str	r3, [r4, #16]
 800d98c:	b002      	add	sp, #8
 800d98e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d992:	68a3      	ldr	r3, [r4, #8]
 800d994:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d998:	701a      	strb	r2, [r3, #0]
 800d99a:	68a3      	ldr	r3, [r4, #8]
 800d99c:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800d9a0:	701a      	strb	r2, [r3, #0]
 800d9a2:	68a3      	ldr	r3, [r4, #8]
 800d9a4:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800d9a8:	701a      	strb	r2, [r3, #0]
 800d9aa:	68a3      	ldr	r3, [r4, #8]
 800d9ac:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800d9b0:	701a      	strb	r2, [r3, #0]
 800d9b2:	68a3      	ldr	r3, [r4, #8]
 800d9b4:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800d9b8:	701a      	strb	r2, [r3, #0]
 800d9ba:	68a3      	ldr	r3, [r4, #8]
 800d9bc:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800d9c0:	701a      	strb	r2, [r3, #0]
 800d9c2:	68a3      	ldr	r3, [r4, #8]
 800d9c4:	f89d 2000 	ldrb.w	r2, [sp]
 800d9c8:	701a      	strb	r2, [r3, #0]
 800d9ca:	e78a      	b.n	800d8e2 <ucdr_serialize_uint64_t+0x9e>
 800d9cc:	4628      	mov	r0, r5
 800d9ce:	466d      	mov	r5, sp
 800d9d0:	4629      	mov	r1, r5
 800d9d2:	4632      	mov	r2, r6
 800d9d4:	f00d fd8b 	bl	801b4ee <memcpy>
 800d9d8:	68a0      	ldr	r0, [r4, #8]
 800d9da:	4642      	mov	r2, r8
 800d9dc:	19a9      	adds	r1, r5, r6
 800d9de:	f00d fd86 	bl	801b4ee <memcpy>
 800d9e2:	e77e      	b.n	800d8e2 <ucdr_serialize_uint64_t+0x9e>

0800d9e4 <ucdr_serialize_int16_t>:
 800d9e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d9e8:	b082      	sub	sp, #8
 800d9ea:	460b      	mov	r3, r1
 800d9ec:	2102      	movs	r1, #2
 800d9ee:	4604      	mov	r4, r0
 800d9f0:	f8ad 3006 	strh.w	r3, [sp, #6]
 800d9f4:	f000 fda8 	bl	800e548 <ucdr_buffer_alignment>
 800d9f8:	4601      	mov	r1, r0
 800d9fa:	4620      	mov	r0, r4
 800d9fc:	7d67      	ldrb	r7, [r4, #21]
 800d9fe:	f000 fde7 	bl	800e5d0 <ucdr_advance_buffer>
 800da02:	2102      	movs	r1, #2
 800da04:	4620      	mov	r0, r4
 800da06:	f000 fd3f 	bl	800e488 <ucdr_check_buffer_available_for>
 800da0a:	bb78      	cbnz	r0, 800da6c <ucdr_serialize_int16_t+0x88>
 800da0c:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800da10:	42ab      	cmp	r3, r5
 800da12:	d926      	bls.n	800da62 <ucdr_serialize_int16_t+0x7e>
 800da14:	1b5e      	subs	r6, r3, r5
 800da16:	60a3      	str	r3, [r4, #8]
 800da18:	6923      	ldr	r3, [r4, #16]
 800da1a:	f1c6 0802 	rsb	r8, r6, #2
 800da1e:	4433      	add	r3, r6
 800da20:	6123      	str	r3, [r4, #16]
 800da22:	4641      	mov	r1, r8
 800da24:	4620      	mov	r0, r4
 800da26:	f000 fd3b 	bl	800e4a0 <ucdr_check_final_buffer_behavior>
 800da2a:	2800      	cmp	r0, #0
 800da2c:	d03b      	beq.n	800daa6 <ucdr_serialize_int16_t+0xc2>
 800da2e:	7d23      	ldrb	r3, [r4, #20]
 800da30:	2b01      	cmp	r3, #1
 800da32:	d04a      	beq.n	800daca <ucdr_serialize_int16_t+0xe6>
 800da34:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800da38:	702b      	strb	r3, [r5, #0]
 800da3a:	2e00      	cmp	r6, #0
 800da3c:	d040      	beq.n	800dac0 <ucdr_serialize_int16_t+0xdc>
 800da3e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800da42:	706b      	strb	r3, [r5, #1]
 800da44:	6923      	ldr	r3, [r4, #16]
 800da46:	68a2      	ldr	r2, [r4, #8]
 800da48:	7da0      	ldrb	r0, [r4, #22]
 800da4a:	3302      	adds	r3, #2
 800da4c:	1b9e      	subs	r6, r3, r6
 800da4e:	4442      	add	r2, r8
 800da50:	2302      	movs	r3, #2
 800da52:	f080 0001 	eor.w	r0, r0, #1
 800da56:	60a2      	str	r2, [r4, #8]
 800da58:	6126      	str	r6, [r4, #16]
 800da5a:	7563      	strb	r3, [r4, #21]
 800da5c:	b002      	add	sp, #8
 800da5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800da62:	2102      	movs	r1, #2
 800da64:	4620      	mov	r0, r4
 800da66:	f000 fd1b 	bl	800e4a0 <ucdr_check_final_buffer_behavior>
 800da6a:	b190      	cbz	r0, 800da92 <ucdr_serialize_int16_t+0xae>
 800da6c:	7d23      	ldrb	r3, [r4, #20]
 800da6e:	2b01      	cmp	r3, #1
 800da70:	68a3      	ldr	r3, [r4, #8]
 800da72:	d014      	beq.n	800da9e <ucdr_serialize_int16_t+0xba>
 800da74:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800da78:	701a      	strb	r2, [r3, #0]
 800da7a:	68a3      	ldr	r3, [r4, #8]
 800da7c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800da80:	705a      	strb	r2, [r3, #1]
 800da82:	68a2      	ldr	r2, [r4, #8]
 800da84:	6923      	ldr	r3, [r4, #16]
 800da86:	3202      	adds	r2, #2
 800da88:	3302      	adds	r3, #2
 800da8a:	2102      	movs	r1, #2
 800da8c:	60a2      	str	r2, [r4, #8]
 800da8e:	6123      	str	r3, [r4, #16]
 800da90:	7561      	strb	r1, [r4, #21]
 800da92:	7da0      	ldrb	r0, [r4, #22]
 800da94:	f080 0001 	eor.w	r0, r0, #1
 800da98:	b002      	add	sp, #8
 800da9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800da9e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800daa2:	801a      	strh	r2, [r3, #0]
 800daa4:	e7ed      	b.n	800da82 <ucdr_serialize_int16_t+0x9e>
 800daa6:	68a2      	ldr	r2, [r4, #8]
 800daa8:	6923      	ldr	r3, [r4, #16]
 800daaa:	7da0      	ldrb	r0, [r4, #22]
 800daac:	7567      	strb	r7, [r4, #21]
 800daae:	1b92      	subs	r2, r2, r6
 800dab0:	1b9b      	subs	r3, r3, r6
 800dab2:	f080 0001 	eor.w	r0, r0, #1
 800dab6:	60a2      	str	r2, [r4, #8]
 800dab8:	6123      	str	r3, [r4, #16]
 800daba:	b002      	add	sp, #8
 800dabc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dac0:	68a3      	ldr	r3, [r4, #8]
 800dac2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800dac6:	701a      	strb	r2, [r3, #0]
 800dac8:	e7bc      	b.n	800da44 <ucdr_serialize_int16_t+0x60>
 800daca:	4628      	mov	r0, r5
 800dacc:	f10d 0506 	add.w	r5, sp, #6
 800dad0:	4629      	mov	r1, r5
 800dad2:	4632      	mov	r2, r6
 800dad4:	f00d fd0b 	bl	801b4ee <memcpy>
 800dad8:	68a0      	ldr	r0, [r4, #8]
 800dada:	4642      	mov	r2, r8
 800dadc:	19a9      	adds	r1, r5, r6
 800dade:	f00d fd06 	bl	801b4ee <memcpy>
 800dae2:	e7af      	b.n	800da44 <ucdr_serialize_int16_t+0x60>

0800dae4 <ucdr_deserialize_int16_t>:
 800dae4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dae8:	460d      	mov	r5, r1
 800daea:	2102      	movs	r1, #2
 800daec:	4604      	mov	r4, r0
 800daee:	f000 fd2b 	bl	800e548 <ucdr_buffer_alignment>
 800daf2:	4601      	mov	r1, r0
 800daf4:	4620      	mov	r0, r4
 800daf6:	f894 8015 	ldrb.w	r8, [r4, #21]
 800dafa:	f000 fd69 	bl	800e5d0 <ucdr_advance_buffer>
 800dafe:	2102      	movs	r1, #2
 800db00:	4620      	mov	r0, r4
 800db02:	f000 fcc1 	bl	800e488 <ucdr_check_buffer_available_for>
 800db06:	bb60      	cbnz	r0, 800db62 <ucdr_deserialize_int16_t+0x7e>
 800db08:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800db0c:	42be      	cmp	r6, r7
 800db0e:	d923      	bls.n	800db58 <ucdr_deserialize_int16_t+0x74>
 800db10:	6923      	ldr	r3, [r4, #16]
 800db12:	60a6      	str	r6, [r4, #8]
 800db14:	1bf6      	subs	r6, r6, r7
 800db16:	4433      	add	r3, r6
 800db18:	f1c6 0902 	rsb	r9, r6, #2
 800db1c:	6123      	str	r3, [r4, #16]
 800db1e:	4649      	mov	r1, r9
 800db20:	4620      	mov	r0, r4
 800db22:	f000 fcbd 	bl	800e4a0 <ucdr_check_final_buffer_behavior>
 800db26:	2800      	cmp	r0, #0
 800db28:	d034      	beq.n	800db94 <ucdr_deserialize_int16_t+0xb0>
 800db2a:	7d23      	ldrb	r3, [r4, #20]
 800db2c:	2b01      	cmp	r3, #1
 800db2e:	d042      	beq.n	800dbb6 <ucdr_deserialize_int16_t+0xd2>
 800db30:	787b      	ldrb	r3, [r7, #1]
 800db32:	702b      	strb	r3, [r5, #0]
 800db34:	2e00      	cmp	r6, #0
 800db36:	d03a      	beq.n	800dbae <ucdr_deserialize_int16_t+0xca>
 800db38:	783b      	ldrb	r3, [r7, #0]
 800db3a:	706b      	strb	r3, [r5, #1]
 800db3c:	6923      	ldr	r3, [r4, #16]
 800db3e:	68a2      	ldr	r2, [r4, #8]
 800db40:	7da0      	ldrb	r0, [r4, #22]
 800db42:	2102      	movs	r1, #2
 800db44:	3302      	adds	r3, #2
 800db46:	444a      	add	r2, r9
 800db48:	1b9b      	subs	r3, r3, r6
 800db4a:	7561      	strb	r1, [r4, #21]
 800db4c:	60a2      	str	r2, [r4, #8]
 800db4e:	6123      	str	r3, [r4, #16]
 800db50:	f080 0001 	eor.w	r0, r0, #1
 800db54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800db58:	2102      	movs	r1, #2
 800db5a:	4620      	mov	r0, r4
 800db5c:	f000 fca0 	bl	800e4a0 <ucdr_check_final_buffer_behavior>
 800db60:	b180      	cbz	r0, 800db84 <ucdr_deserialize_int16_t+0xa0>
 800db62:	7d23      	ldrb	r3, [r4, #20]
 800db64:	2b01      	cmp	r3, #1
 800db66:	68a3      	ldr	r3, [r4, #8]
 800db68:	d011      	beq.n	800db8e <ucdr_deserialize_int16_t+0xaa>
 800db6a:	785b      	ldrb	r3, [r3, #1]
 800db6c:	702b      	strb	r3, [r5, #0]
 800db6e:	68a3      	ldr	r3, [r4, #8]
 800db70:	781b      	ldrb	r3, [r3, #0]
 800db72:	706b      	strb	r3, [r5, #1]
 800db74:	68a2      	ldr	r2, [r4, #8]
 800db76:	6923      	ldr	r3, [r4, #16]
 800db78:	3202      	adds	r2, #2
 800db7a:	3302      	adds	r3, #2
 800db7c:	2102      	movs	r1, #2
 800db7e:	60a2      	str	r2, [r4, #8]
 800db80:	6123      	str	r3, [r4, #16]
 800db82:	7561      	strb	r1, [r4, #21]
 800db84:	7da0      	ldrb	r0, [r4, #22]
 800db86:	f080 0001 	eor.w	r0, r0, #1
 800db8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800db8e:	881b      	ldrh	r3, [r3, #0]
 800db90:	802b      	strh	r3, [r5, #0]
 800db92:	e7ef      	b.n	800db74 <ucdr_deserialize_int16_t+0x90>
 800db94:	68a2      	ldr	r2, [r4, #8]
 800db96:	6923      	ldr	r3, [r4, #16]
 800db98:	7da0      	ldrb	r0, [r4, #22]
 800db9a:	f884 8015 	strb.w	r8, [r4, #21]
 800db9e:	1b92      	subs	r2, r2, r6
 800dba0:	1b9b      	subs	r3, r3, r6
 800dba2:	60a2      	str	r2, [r4, #8]
 800dba4:	6123      	str	r3, [r4, #16]
 800dba6:	f080 0001 	eor.w	r0, r0, #1
 800dbaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dbae:	68a3      	ldr	r3, [r4, #8]
 800dbb0:	781b      	ldrb	r3, [r3, #0]
 800dbb2:	706b      	strb	r3, [r5, #1]
 800dbb4:	e7c2      	b.n	800db3c <ucdr_deserialize_int16_t+0x58>
 800dbb6:	4639      	mov	r1, r7
 800dbb8:	4632      	mov	r2, r6
 800dbba:	4628      	mov	r0, r5
 800dbbc:	f00d fc97 	bl	801b4ee <memcpy>
 800dbc0:	68a1      	ldr	r1, [r4, #8]
 800dbc2:	464a      	mov	r2, r9
 800dbc4:	19a8      	adds	r0, r5, r6
 800dbc6:	f00d fc92 	bl	801b4ee <memcpy>
 800dbca:	e7b7      	b.n	800db3c <ucdr_deserialize_int16_t+0x58>

0800dbcc <ucdr_serialize_int32_t>:
 800dbcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dbd0:	b082      	sub	sp, #8
 800dbd2:	4604      	mov	r4, r0
 800dbd4:	9101      	str	r1, [sp, #4]
 800dbd6:	2104      	movs	r1, #4
 800dbd8:	f000 fcb6 	bl	800e548 <ucdr_buffer_alignment>
 800dbdc:	4601      	mov	r1, r0
 800dbde:	4620      	mov	r0, r4
 800dbe0:	7d67      	ldrb	r7, [r4, #21]
 800dbe2:	f000 fcf5 	bl	800e5d0 <ucdr_advance_buffer>
 800dbe6:	2104      	movs	r1, #4
 800dbe8:	4620      	mov	r0, r4
 800dbea:	f000 fc4d 	bl	800e488 <ucdr_check_buffer_available_for>
 800dbee:	2800      	cmp	r0, #0
 800dbf0:	d139      	bne.n	800dc66 <ucdr_serialize_int32_t+0x9a>
 800dbf2:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800dbf6:	42ab      	cmp	r3, r5
 800dbf8:	d930      	bls.n	800dc5c <ucdr_serialize_int32_t+0x90>
 800dbfa:	1b5e      	subs	r6, r3, r5
 800dbfc:	60a3      	str	r3, [r4, #8]
 800dbfe:	6923      	ldr	r3, [r4, #16]
 800dc00:	f1c6 0804 	rsb	r8, r6, #4
 800dc04:	4433      	add	r3, r6
 800dc06:	6123      	str	r3, [r4, #16]
 800dc08:	4641      	mov	r1, r8
 800dc0a:	4620      	mov	r0, r4
 800dc0c:	f000 fc48 	bl	800e4a0 <ucdr_check_final_buffer_behavior>
 800dc10:	2800      	cmp	r0, #0
 800dc12:	d04c      	beq.n	800dcae <ucdr_serialize_int32_t+0xe2>
 800dc14:	7d23      	ldrb	r3, [r4, #20]
 800dc16:	2b01      	cmp	r3, #1
 800dc18:	d063      	beq.n	800dce2 <ucdr_serialize_int32_t+0x116>
 800dc1a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800dc1e:	702b      	strb	r3, [r5, #0]
 800dc20:	2e00      	cmp	r6, #0
 800dc22:	d051      	beq.n	800dcc8 <ucdr_serialize_int32_t+0xfc>
 800dc24:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800dc28:	706b      	strb	r3, [r5, #1]
 800dc2a:	2e01      	cmp	r6, #1
 800dc2c:	d050      	beq.n	800dcd0 <ucdr_serialize_int32_t+0x104>
 800dc2e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800dc32:	70ab      	strb	r3, [r5, #2]
 800dc34:	2e02      	cmp	r6, #2
 800dc36:	d04f      	beq.n	800dcd8 <ucdr_serialize_int32_t+0x10c>
 800dc38:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800dc3c:	70eb      	strb	r3, [r5, #3]
 800dc3e:	6923      	ldr	r3, [r4, #16]
 800dc40:	68a2      	ldr	r2, [r4, #8]
 800dc42:	7da0      	ldrb	r0, [r4, #22]
 800dc44:	3304      	adds	r3, #4
 800dc46:	1b9e      	subs	r6, r3, r6
 800dc48:	4442      	add	r2, r8
 800dc4a:	2304      	movs	r3, #4
 800dc4c:	f080 0001 	eor.w	r0, r0, #1
 800dc50:	60a2      	str	r2, [r4, #8]
 800dc52:	6126      	str	r6, [r4, #16]
 800dc54:	7563      	strb	r3, [r4, #21]
 800dc56:	b002      	add	sp, #8
 800dc58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dc5c:	2104      	movs	r1, #4
 800dc5e:	4620      	mov	r0, r4
 800dc60:	f000 fc1e 	bl	800e4a0 <ucdr_check_final_buffer_behavior>
 800dc64:	b1d0      	cbz	r0, 800dc9c <ucdr_serialize_int32_t+0xd0>
 800dc66:	7d23      	ldrb	r3, [r4, #20]
 800dc68:	2b01      	cmp	r3, #1
 800dc6a:	68a3      	ldr	r3, [r4, #8]
 800dc6c:	d01c      	beq.n	800dca8 <ucdr_serialize_int32_t+0xdc>
 800dc6e:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800dc72:	701a      	strb	r2, [r3, #0]
 800dc74:	68a3      	ldr	r3, [r4, #8]
 800dc76:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800dc7a:	705a      	strb	r2, [r3, #1]
 800dc7c:	68a3      	ldr	r3, [r4, #8]
 800dc7e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800dc82:	709a      	strb	r2, [r3, #2]
 800dc84:	68a3      	ldr	r3, [r4, #8]
 800dc86:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800dc8a:	70da      	strb	r2, [r3, #3]
 800dc8c:	68a2      	ldr	r2, [r4, #8]
 800dc8e:	6923      	ldr	r3, [r4, #16]
 800dc90:	3204      	adds	r2, #4
 800dc92:	3304      	adds	r3, #4
 800dc94:	2104      	movs	r1, #4
 800dc96:	60a2      	str	r2, [r4, #8]
 800dc98:	6123      	str	r3, [r4, #16]
 800dc9a:	7561      	strb	r1, [r4, #21]
 800dc9c:	7da0      	ldrb	r0, [r4, #22]
 800dc9e:	f080 0001 	eor.w	r0, r0, #1
 800dca2:	b002      	add	sp, #8
 800dca4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dca8:	9a01      	ldr	r2, [sp, #4]
 800dcaa:	601a      	str	r2, [r3, #0]
 800dcac:	e7ee      	b.n	800dc8c <ucdr_serialize_int32_t+0xc0>
 800dcae:	68a2      	ldr	r2, [r4, #8]
 800dcb0:	6923      	ldr	r3, [r4, #16]
 800dcb2:	7da0      	ldrb	r0, [r4, #22]
 800dcb4:	7567      	strb	r7, [r4, #21]
 800dcb6:	1b92      	subs	r2, r2, r6
 800dcb8:	1b9b      	subs	r3, r3, r6
 800dcba:	f080 0001 	eor.w	r0, r0, #1
 800dcbe:	60a2      	str	r2, [r4, #8]
 800dcc0:	6123      	str	r3, [r4, #16]
 800dcc2:	b002      	add	sp, #8
 800dcc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dcc8:	68a3      	ldr	r3, [r4, #8]
 800dcca:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800dcce:	701a      	strb	r2, [r3, #0]
 800dcd0:	68a3      	ldr	r3, [r4, #8]
 800dcd2:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800dcd6:	701a      	strb	r2, [r3, #0]
 800dcd8:	68a3      	ldr	r3, [r4, #8]
 800dcda:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800dcde:	701a      	strb	r2, [r3, #0]
 800dce0:	e7ad      	b.n	800dc3e <ucdr_serialize_int32_t+0x72>
 800dce2:	4628      	mov	r0, r5
 800dce4:	ad01      	add	r5, sp, #4
 800dce6:	4629      	mov	r1, r5
 800dce8:	4632      	mov	r2, r6
 800dcea:	f00d fc00 	bl	801b4ee <memcpy>
 800dcee:	68a0      	ldr	r0, [r4, #8]
 800dcf0:	4642      	mov	r2, r8
 800dcf2:	19a9      	adds	r1, r5, r6
 800dcf4:	f00d fbfb 	bl	801b4ee <memcpy>
 800dcf8:	e7a1      	b.n	800dc3e <ucdr_serialize_int32_t+0x72>
 800dcfa:	bf00      	nop

0800dcfc <ucdr_deserialize_int32_t>:
 800dcfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dd00:	460d      	mov	r5, r1
 800dd02:	2104      	movs	r1, #4
 800dd04:	4604      	mov	r4, r0
 800dd06:	f000 fc1f 	bl	800e548 <ucdr_buffer_alignment>
 800dd0a:	4601      	mov	r1, r0
 800dd0c:	4620      	mov	r0, r4
 800dd0e:	f894 8015 	ldrb.w	r8, [r4, #21]
 800dd12:	f000 fc5d 	bl	800e5d0 <ucdr_advance_buffer>
 800dd16:	2104      	movs	r1, #4
 800dd18:	4620      	mov	r0, r4
 800dd1a:	f000 fbb5 	bl	800e488 <ucdr_check_buffer_available_for>
 800dd1e:	2800      	cmp	r0, #0
 800dd20:	d138      	bne.n	800dd94 <ucdr_deserialize_int32_t+0x98>
 800dd22:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800dd26:	42b7      	cmp	r7, r6
 800dd28:	d92f      	bls.n	800dd8a <ucdr_deserialize_int32_t+0x8e>
 800dd2a:	6923      	ldr	r3, [r4, #16]
 800dd2c:	60a7      	str	r7, [r4, #8]
 800dd2e:	1bbf      	subs	r7, r7, r6
 800dd30:	443b      	add	r3, r7
 800dd32:	f1c7 0904 	rsb	r9, r7, #4
 800dd36:	6123      	str	r3, [r4, #16]
 800dd38:	4649      	mov	r1, r9
 800dd3a:	4620      	mov	r0, r4
 800dd3c:	f000 fbb0 	bl	800e4a0 <ucdr_check_final_buffer_behavior>
 800dd40:	2800      	cmp	r0, #0
 800dd42:	d046      	beq.n	800ddd2 <ucdr_deserialize_int32_t+0xd6>
 800dd44:	7d23      	ldrb	r3, [r4, #20]
 800dd46:	2b01      	cmp	r3, #1
 800dd48:	d05c      	beq.n	800de04 <ucdr_deserialize_int32_t+0x108>
 800dd4a:	78f3      	ldrb	r3, [r6, #3]
 800dd4c:	702b      	strb	r3, [r5, #0]
 800dd4e:	2f00      	cmp	r7, #0
 800dd50:	d04c      	beq.n	800ddec <ucdr_deserialize_int32_t+0xf0>
 800dd52:	78b3      	ldrb	r3, [r6, #2]
 800dd54:	706b      	strb	r3, [r5, #1]
 800dd56:	2f01      	cmp	r7, #1
 800dd58:	f105 0302 	add.w	r3, r5, #2
 800dd5c:	d04a      	beq.n	800ddf4 <ucdr_deserialize_int32_t+0xf8>
 800dd5e:	7873      	ldrb	r3, [r6, #1]
 800dd60:	70ab      	strb	r3, [r5, #2]
 800dd62:	2f02      	cmp	r7, #2
 800dd64:	f105 0303 	add.w	r3, r5, #3
 800dd68:	d048      	beq.n	800ddfc <ucdr_deserialize_int32_t+0x100>
 800dd6a:	7833      	ldrb	r3, [r6, #0]
 800dd6c:	70eb      	strb	r3, [r5, #3]
 800dd6e:	6923      	ldr	r3, [r4, #16]
 800dd70:	68a2      	ldr	r2, [r4, #8]
 800dd72:	7da0      	ldrb	r0, [r4, #22]
 800dd74:	2104      	movs	r1, #4
 800dd76:	3304      	adds	r3, #4
 800dd78:	444a      	add	r2, r9
 800dd7a:	1bdb      	subs	r3, r3, r7
 800dd7c:	7561      	strb	r1, [r4, #21]
 800dd7e:	60a2      	str	r2, [r4, #8]
 800dd80:	6123      	str	r3, [r4, #16]
 800dd82:	f080 0001 	eor.w	r0, r0, #1
 800dd86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dd8a:	2104      	movs	r1, #4
 800dd8c:	4620      	mov	r0, r4
 800dd8e:	f000 fb87 	bl	800e4a0 <ucdr_check_final_buffer_behavior>
 800dd92:	b1b0      	cbz	r0, 800ddc2 <ucdr_deserialize_int32_t+0xc6>
 800dd94:	7d23      	ldrb	r3, [r4, #20]
 800dd96:	2b01      	cmp	r3, #1
 800dd98:	68a3      	ldr	r3, [r4, #8]
 800dd9a:	d017      	beq.n	800ddcc <ucdr_deserialize_int32_t+0xd0>
 800dd9c:	78db      	ldrb	r3, [r3, #3]
 800dd9e:	702b      	strb	r3, [r5, #0]
 800dda0:	68a3      	ldr	r3, [r4, #8]
 800dda2:	789b      	ldrb	r3, [r3, #2]
 800dda4:	706b      	strb	r3, [r5, #1]
 800dda6:	68a3      	ldr	r3, [r4, #8]
 800dda8:	785b      	ldrb	r3, [r3, #1]
 800ddaa:	70ab      	strb	r3, [r5, #2]
 800ddac:	68a3      	ldr	r3, [r4, #8]
 800ddae:	781b      	ldrb	r3, [r3, #0]
 800ddb0:	70eb      	strb	r3, [r5, #3]
 800ddb2:	68a2      	ldr	r2, [r4, #8]
 800ddb4:	6923      	ldr	r3, [r4, #16]
 800ddb6:	3204      	adds	r2, #4
 800ddb8:	3304      	adds	r3, #4
 800ddba:	2104      	movs	r1, #4
 800ddbc:	60a2      	str	r2, [r4, #8]
 800ddbe:	6123      	str	r3, [r4, #16]
 800ddc0:	7561      	strb	r1, [r4, #21]
 800ddc2:	7da0      	ldrb	r0, [r4, #22]
 800ddc4:	f080 0001 	eor.w	r0, r0, #1
 800ddc8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ddcc:	681b      	ldr	r3, [r3, #0]
 800ddce:	602b      	str	r3, [r5, #0]
 800ddd0:	e7ef      	b.n	800ddb2 <ucdr_deserialize_int32_t+0xb6>
 800ddd2:	68a2      	ldr	r2, [r4, #8]
 800ddd4:	6923      	ldr	r3, [r4, #16]
 800ddd6:	7da0      	ldrb	r0, [r4, #22]
 800ddd8:	f884 8015 	strb.w	r8, [r4, #21]
 800dddc:	1bd2      	subs	r2, r2, r7
 800ddde:	1bdb      	subs	r3, r3, r7
 800dde0:	60a2      	str	r2, [r4, #8]
 800dde2:	6123      	str	r3, [r4, #16]
 800dde4:	f080 0001 	eor.w	r0, r0, #1
 800dde8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ddec:	68a3      	ldr	r3, [r4, #8]
 800ddee:	789b      	ldrb	r3, [r3, #2]
 800ddf0:	706b      	strb	r3, [r5, #1]
 800ddf2:	1cab      	adds	r3, r5, #2
 800ddf4:	68a2      	ldr	r2, [r4, #8]
 800ddf6:	7852      	ldrb	r2, [r2, #1]
 800ddf8:	f803 2b01 	strb.w	r2, [r3], #1
 800ddfc:	68a2      	ldr	r2, [r4, #8]
 800ddfe:	7812      	ldrb	r2, [r2, #0]
 800de00:	701a      	strb	r2, [r3, #0]
 800de02:	e7b4      	b.n	800dd6e <ucdr_deserialize_int32_t+0x72>
 800de04:	4631      	mov	r1, r6
 800de06:	463a      	mov	r2, r7
 800de08:	4628      	mov	r0, r5
 800de0a:	f00d fb70 	bl	801b4ee <memcpy>
 800de0e:	68a1      	ldr	r1, [r4, #8]
 800de10:	464a      	mov	r2, r9
 800de12:	19e8      	adds	r0, r5, r7
 800de14:	f00d fb6b 	bl	801b4ee <memcpy>
 800de18:	e7a9      	b.n	800dd6e <ucdr_deserialize_int32_t+0x72>
 800de1a:	bf00      	nop

0800de1c <ucdr_serialize_double>:
 800de1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800de20:	2108      	movs	r1, #8
 800de22:	b082      	sub	sp, #8
 800de24:	4604      	mov	r4, r0
 800de26:	ed8d 0b00 	vstr	d0, [sp]
 800de2a:	f000 fb8d 	bl	800e548 <ucdr_buffer_alignment>
 800de2e:	4601      	mov	r1, r0
 800de30:	4620      	mov	r0, r4
 800de32:	7d67      	ldrb	r7, [r4, #21]
 800de34:	f000 fbcc 	bl	800e5d0 <ucdr_advance_buffer>
 800de38:	2108      	movs	r1, #8
 800de3a:	4620      	mov	r0, r4
 800de3c:	f000 fb24 	bl	800e488 <ucdr_check_buffer_available_for>
 800de40:	2800      	cmp	r0, #0
 800de42:	d14e      	bne.n	800dee2 <ucdr_serialize_double+0xc6>
 800de44:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800de48:	42ab      	cmp	r3, r5
 800de4a:	d945      	bls.n	800ded8 <ucdr_serialize_double+0xbc>
 800de4c:	1b5e      	subs	r6, r3, r5
 800de4e:	60a3      	str	r3, [r4, #8]
 800de50:	6923      	ldr	r3, [r4, #16]
 800de52:	f1c6 0808 	rsb	r8, r6, #8
 800de56:	4433      	add	r3, r6
 800de58:	6123      	str	r3, [r4, #16]
 800de5a:	4641      	mov	r1, r8
 800de5c:	4620      	mov	r0, r4
 800de5e:	f000 fb1f 	bl	800e4a0 <ucdr_check_final_buffer_behavior>
 800de62:	2800      	cmp	r0, #0
 800de64:	d074      	beq.n	800df50 <ucdr_serialize_double+0x134>
 800de66:	7d23      	ldrb	r3, [r4, #20]
 800de68:	2b01      	cmp	r3, #1
 800de6a:	f000 809b 	beq.w	800dfa4 <ucdr_serialize_double+0x188>
 800de6e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800de72:	702b      	strb	r3, [r5, #0]
 800de74:	2e00      	cmp	r6, #0
 800de76:	d078      	beq.n	800df6a <ucdr_serialize_double+0x14e>
 800de78:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800de7c:	706b      	strb	r3, [r5, #1]
 800de7e:	2e01      	cmp	r6, #1
 800de80:	d077      	beq.n	800df72 <ucdr_serialize_double+0x156>
 800de82:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800de86:	70ab      	strb	r3, [r5, #2]
 800de88:	2e02      	cmp	r6, #2
 800de8a:	d076      	beq.n	800df7a <ucdr_serialize_double+0x15e>
 800de8c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800de90:	70eb      	strb	r3, [r5, #3]
 800de92:	2e03      	cmp	r6, #3
 800de94:	d075      	beq.n	800df82 <ucdr_serialize_double+0x166>
 800de96:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800de9a:	712b      	strb	r3, [r5, #4]
 800de9c:	2e04      	cmp	r6, #4
 800de9e:	d074      	beq.n	800df8a <ucdr_serialize_double+0x16e>
 800dea0:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800dea4:	716b      	strb	r3, [r5, #5]
 800dea6:	2e05      	cmp	r6, #5
 800dea8:	d073      	beq.n	800df92 <ucdr_serialize_double+0x176>
 800deaa:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800deae:	71ab      	strb	r3, [r5, #6]
 800deb0:	2e06      	cmp	r6, #6
 800deb2:	d072      	beq.n	800df9a <ucdr_serialize_double+0x17e>
 800deb4:	f89d 3000 	ldrb.w	r3, [sp]
 800deb8:	71eb      	strb	r3, [r5, #7]
 800deba:	6923      	ldr	r3, [r4, #16]
 800debc:	68a2      	ldr	r2, [r4, #8]
 800debe:	7da0      	ldrb	r0, [r4, #22]
 800dec0:	3308      	adds	r3, #8
 800dec2:	1b9e      	subs	r6, r3, r6
 800dec4:	4442      	add	r2, r8
 800dec6:	2308      	movs	r3, #8
 800dec8:	f080 0001 	eor.w	r0, r0, #1
 800decc:	60a2      	str	r2, [r4, #8]
 800dece:	6126      	str	r6, [r4, #16]
 800ded0:	7563      	strb	r3, [r4, #21]
 800ded2:	b002      	add	sp, #8
 800ded4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ded8:	2108      	movs	r1, #8
 800deda:	4620      	mov	r0, r4
 800dedc:	f000 fae0 	bl	800e4a0 <ucdr_check_final_buffer_behavior>
 800dee0:	b350      	cbz	r0, 800df38 <ucdr_serialize_double+0x11c>
 800dee2:	7d23      	ldrb	r3, [r4, #20]
 800dee4:	2b01      	cmp	r3, #1
 800dee6:	d02d      	beq.n	800df44 <ucdr_serialize_double+0x128>
 800dee8:	68a3      	ldr	r3, [r4, #8]
 800deea:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800deee:	701a      	strb	r2, [r3, #0]
 800def0:	68a3      	ldr	r3, [r4, #8]
 800def2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800def6:	705a      	strb	r2, [r3, #1]
 800def8:	68a3      	ldr	r3, [r4, #8]
 800defa:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800defe:	709a      	strb	r2, [r3, #2]
 800df00:	68a3      	ldr	r3, [r4, #8]
 800df02:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800df06:	70da      	strb	r2, [r3, #3]
 800df08:	68a3      	ldr	r3, [r4, #8]
 800df0a:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800df0e:	711a      	strb	r2, [r3, #4]
 800df10:	68a3      	ldr	r3, [r4, #8]
 800df12:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800df16:	715a      	strb	r2, [r3, #5]
 800df18:	68a3      	ldr	r3, [r4, #8]
 800df1a:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800df1e:	719a      	strb	r2, [r3, #6]
 800df20:	68a3      	ldr	r3, [r4, #8]
 800df22:	f89d 2000 	ldrb.w	r2, [sp]
 800df26:	71da      	strb	r2, [r3, #7]
 800df28:	68a2      	ldr	r2, [r4, #8]
 800df2a:	6923      	ldr	r3, [r4, #16]
 800df2c:	3208      	adds	r2, #8
 800df2e:	3308      	adds	r3, #8
 800df30:	2108      	movs	r1, #8
 800df32:	60a2      	str	r2, [r4, #8]
 800df34:	6123      	str	r3, [r4, #16]
 800df36:	7561      	strb	r1, [r4, #21]
 800df38:	7da0      	ldrb	r0, [r4, #22]
 800df3a:	f080 0001 	eor.w	r0, r0, #1
 800df3e:	b002      	add	sp, #8
 800df40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800df44:	466b      	mov	r3, sp
 800df46:	cb03      	ldmia	r3!, {r0, r1}
 800df48:	68a3      	ldr	r3, [r4, #8]
 800df4a:	6018      	str	r0, [r3, #0]
 800df4c:	6059      	str	r1, [r3, #4]
 800df4e:	e7eb      	b.n	800df28 <ucdr_serialize_double+0x10c>
 800df50:	68a2      	ldr	r2, [r4, #8]
 800df52:	6923      	ldr	r3, [r4, #16]
 800df54:	7da0      	ldrb	r0, [r4, #22]
 800df56:	7567      	strb	r7, [r4, #21]
 800df58:	1b92      	subs	r2, r2, r6
 800df5a:	1b9b      	subs	r3, r3, r6
 800df5c:	f080 0001 	eor.w	r0, r0, #1
 800df60:	60a2      	str	r2, [r4, #8]
 800df62:	6123      	str	r3, [r4, #16]
 800df64:	b002      	add	sp, #8
 800df66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800df6a:	68a3      	ldr	r3, [r4, #8]
 800df6c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800df70:	701a      	strb	r2, [r3, #0]
 800df72:	68a3      	ldr	r3, [r4, #8]
 800df74:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800df78:	701a      	strb	r2, [r3, #0]
 800df7a:	68a3      	ldr	r3, [r4, #8]
 800df7c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800df80:	701a      	strb	r2, [r3, #0]
 800df82:	68a3      	ldr	r3, [r4, #8]
 800df84:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800df88:	701a      	strb	r2, [r3, #0]
 800df8a:	68a3      	ldr	r3, [r4, #8]
 800df8c:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800df90:	701a      	strb	r2, [r3, #0]
 800df92:	68a3      	ldr	r3, [r4, #8]
 800df94:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800df98:	701a      	strb	r2, [r3, #0]
 800df9a:	68a3      	ldr	r3, [r4, #8]
 800df9c:	f89d 2000 	ldrb.w	r2, [sp]
 800dfa0:	701a      	strb	r2, [r3, #0]
 800dfa2:	e78a      	b.n	800deba <ucdr_serialize_double+0x9e>
 800dfa4:	4628      	mov	r0, r5
 800dfa6:	466d      	mov	r5, sp
 800dfa8:	4629      	mov	r1, r5
 800dfaa:	4632      	mov	r2, r6
 800dfac:	f00d fa9f 	bl	801b4ee <memcpy>
 800dfb0:	68a0      	ldr	r0, [r4, #8]
 800dfb2:	4642      	mov	r2, r8
 800dfb4:	19a9      	adds	r1, r5, r6
 800dfb6:	f00d fa9a 	bl	801b4ee <memcpy>
 800dfba:	e77e      	b.n	800deba <ucdr_serialize_double+0x9e>

0800dfbc <ucdr_serialize_endian_double>:
 800dfbc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dfc0:	460e      	mov	r6, r1
 800dfc2:	b083      	sub	sp, #12
 800dfc4:	2108      	movs	r1, #8
 800dfc6:	4604      	mov	r4, r0
 800dfc8:	ed8d 0b00 	vstr	d0, [sp]
 800dfcc:	f000 fabc 	bl	800e548 <ucdr_buffer_alignment>
 800dfd0:	4601      	mov	r1, r0
 800dfd2:	4620      	mov	r0, r4
 800dfd4:	f894 8015 	ldrb.w	r8, [r4, #21]
 800dfd8:	f000 fafa 	bl	800e5d0 <ucdr_advance_buffer>
 800dfdc:	2108      	movs	r1, #8
 800dfde:	4620      	mov	r0, r4
 800dfe0:	f000 fa52 	bl	800e488 <ucdr_check_buffer_available_for>
 800dfe4:	2800      	cmp	r0, #0
 800dfe6:	d14d      	bne.n	800e084 <ucdr_serialize_endian_double+0xc8>
 800dfe8:	e9d4 5701 	ldrd	r5, r7, [r4, #4]
 800dfec:	42bd      	cmp	r5, r7
 800dfee:	d944      	bls.n	800e07a <ucdr_serialize_endian_double+0xbe>
 800dff0:	6923      	ldr	r3, [r4, #16]
 800dff2:	60a5      	str	r5, [r4, #8]
 800dff4:	1bed      	subs	r5, r5, r7
 800dff6:	442b      	add	r3, r5
 800dff8:	f1c5 0908 	rsb	r9, r5, #8
 800dffc:	6123      	str	r3, [r4, #16]
 800dffe:	4649      	mov	r1, r9
 800e000:	4620      	mov	r0, r4
 800e002:	f000 fa4d 	bl	800e4a0 <ucdr_check_final_buffer_behavior>
 800e006:	2800      	cmp	r0, #0
 800e008:	d072      	beq.n	800e0f0 <ucdr_serialize_endian_double+0x134>
 800e00a:	2e01      	cmp	r6, #1
 800e00c:	f000 809b 	beq.w	800e146 <ucdr_serialize_endian_double+0x18a>
 800e010:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800e014:	703b      	strb	r3, [r7, #0]
 800e016:	2d00      	cmp	r5, #0
 800e018:	d078      	beq.n	800e10c <ucdr_serialize_endian_double+0x150>
 800e01a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800e01e:	707b      	strb	r3, [r7, #1]
 800e020:	2d01      	cmp	r5, #1
 800e022:	d077      	beq.n	800e114 <ucdr_serialize_endian_double+0x158>
 800e024:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800e028:	70bb      	strb	r3, [r7, #2]
 800e02a:	2d02      	cmp	r5, #2
 800e02c:	d076      	beq.n	800e11c <ucdr_serialize_endian_double+0x160>
 800e02e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800e032:	70fb      	strb	r3, [r7, #3]
 800e034:	2d03      	cmp	r5, #3
 800e036:	d075      	beq.n	800e124 <ucdr_serialize_endian_double+0x168>
 800e038:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800e03c:	713b      	strb	r3, [r7, #4]
 800e03e:	2d04      	cmp	r5, #4
 800e040:	d074      	beq.n	800e12c <ucdr_serialize_endian_double+0x170>
 800e042:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800e046:	717b      	strb	r3, [r7, #5]
 800e048:	2d05      	cmp	r5, #5
 800e04a:	d073      	beq.n	800e134 <ucdr_serialize_endian_double+0x178>
 800e04c:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800e050:	71bb      	strb	r3, [r7, #6]
 800e052:	2d06      	cmp	r5, #6
 800e054:	d072      	beq.n	800e13c <ucdr_serialize_endian_double+0x180>
 800e056:	f89d 3000 	ldrb.w	r3, [sp]
 800e05a:	71fb      	strb	r3, [r7, #7]
 800e05c:	6923      	ldr	r3, [r4, #16]
 800e05e:	68a2      	ldr	r2, [r4, #8]
 800e060:	7da0      	ldrb	r0, [r4, #22]
 800e062:	3308      	adds	r3, #8
 800e064:	1b5d      	subs	r5, r3, r5
 800e066:	444a      	add	r2, r9
 800e068:	2308      	movs	r3, #8
 800e06a:	f080 0001 	eor.w	r0, r0, #1
 800e06e:	60a2      	str	r2, [r4, #8]
 800e070:	6125      	str	r5, [r4, #16]
 800e072:	7563      	strb	r3, [r4, #21]
 800e074:	b003      	add	sp, #12
 800e076:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e07a:	2108      	movs	r1, #8
 800e07c:	4620      	mov	r0, r4
 800e07e:	f000 fa0f 	bl	800e4a0 <ucdr_check_final_buffer_behavior>
 800e082:	b348      	cbz	r0, 800e0d8 <ucdr_serialize_endian_double+0x11c>
 800e084:	2e01      	cmp	r6, #1
 800e086:	d02d      	beq.n	800e0e4 <ucdr_serialize_endian_double+0x128>
 800e088:	68a3      	ldr	r3, [r4, #8]
 800e08a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800e08e:	701a      	strb	r2, [r3, #0]
 800e090:	68a3      	ldr	r3, [r4, #8]
 800e092:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800e096:	705a      	strb	r2, [r3, #1]
 800e098:	68a3      	ldr	r3, [r4, #8]
 800e09a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800e09e:	709a      	strb	r2, [r3, #2]
 800e0a0:	68a3      	ldr	r3, [r4, #8]
 800e0a2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800e0a6:	70da      	strb	r2, [r3, #3]
 800e0a8:	68a3      	ldr	r3, [r4, #8]
 800e0aa:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800e0ae:	711a      	strb	r2, [r3, #4]
 800e0b0:	68a3      	ldr	r3, [r4, #8]
 800e0b2:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800e0b6:	715a      	strb	r2, [r3, #5]
 800e0b8:	68a3      	ldr	r3, [r4, #8]
 800e0ba:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800e0be:	719a      	strb	r2, [r3, #6]
 800e0c0:	68a3      	ldr	r3, [r4, #8]
 800e0c2:	f89d 2000 	ldrb.w	r2, [sp]
 800e0c6:	71da      	strb	r2, [r3, #7]
 800e0c8:	68a2      	ldr	r2, [r4, #8]
 800e0ca:	6923      	ldr	r3, [r4, #16]
 800e0cc:	3208      	adds	r2, #8
 800e0ce:	3308      	adds	r3, #8
 800e0d0:	2108      	movs	r1, #8
 800e0d2:	60a2      	str	r2, [r4, #8]
 800e0d4:	6123      	str	r3, [r4, #16]
 800e0d6:	7561      	strb	r1, [r4, #21]
 800e0d8:	7da0      	ldrb	r0, [r4, #22]
 800e0da:	f080 0001 	eor.w	r0, r0, #1
 800e0de:	b003      	add	sp, #12
 800e0e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e0e4:	466b      	mov	r3, sp
 800e0e6:	cb03      	ldmia	r3!, {r0, r1}
 800e0e8:	68a3      	ldr	r3, [r4, #8]
 800e0ea:	6018      	str	r0, [r3, #0]
 800e0ec:	6059      	str	r1, [r3, #4]
 800e0ee:	e7eb      	b.n	800e0c8 <ucdr_serialize_endian_double+0x10c>
 800e0f0:	68a2      	ldr	r2, [r4, #8]
 800e0f2:	6923      	ldr	r3, [r4, #16]
 800e0f4:	7da0      	ldrb	r0, [r4, #22]
 800e0f6:	f884 8015 	strb.w	r8, [r4, #21]
 800e0fa:	1b52      	subs	r2, r2, r5
 800e0fc:	1b5b      	subs	r3, r3, r5
 800e0fe:	f080 0001 	eor.w	r0, r0, #1
 800e102:	60a2      	str	r2, [r4, #8]
 800e104:	6123      	str	r3, [r4, #16]
 800e106:	b003      	add	sp, #12
 800e108:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e10c:	68a3      	ldr	r3, [r4, #8]
 800e10e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800e112:	701a      	strb	r2, [r3, #0]
 800e114:	68a3      	ldr	r3, [r4, #8]
 800e116:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800e11a:	701a      	strb	r2, [r3, #0]
 800e11c:	68a3      	ldr	r3, [r4, #8]
 800e11e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800e122:	701a      	strb	r2, [r3, #0]
 800e124:	68a3      	ldr	r3, [r4, #8]
 800e126:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800e12a:	701a      	strb	r2, [r3, #0]
 800e12c:	68a3      	ldr	r3, [r4, #8]
 800e12e:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800e132:	701a      	strb	r2, [r3, #0]
 800e134:	68a3      	ldr	r3, [r4, #8]
 800e136:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800e13a:	701a      	strb	r2, [r3, #0]
 800e13c:	68a3      	ldr	r3, [r4, #8]
 800e13e:	f89d 2000 	ldrb.w	r2, [sp]
 800e142:	701a      	strb	r2, [r3, #0]
 800e144:	e78a      	b.n	800e05c <ucdr_serialize_endian_double+0xa0>
 800e146:	466e      	mov	r6, sp
 800e148:	4631      	mov	r1, r6
 800e14a:	462a      	mov	r2, r5
 800e14c:	4638      	mov	r0, r7
 800e14e:	f00d f9ce 	bl	801b4ee <memcpy>
 800e152:	68a0      	ldr	r0, [r4, #8]
 800e154:	464a      	mov	r2, r9
 800e156:	1971      	adds	r1, r6, r5
 800e158:	f00d f9c9 	bl	801b4ee <memcpy>
 800e15c:	e77e      	b.n	800e05c <ucdr_serialize_endian_double+0xa0>
 800e15e:	bf00      	nop

0800e160 <ucdr_deserialize_double>:
 800e160:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e164:	460d      	mov	r5, r1
 800e166:	2108      	movs	r1, #8
 800e168:	4604      	mov	r4, r0
 800e16a:	f000 f9ed 	bl	800e548 <ucdr_buffer_alignment>
 800e16e:	4601      	mov	r1, r0
 800e170:	4620      	mov	r0, r4
 800e172:	f894 9015 	ldrb.w	r9, [r4, #21]
 800e176:	f000 fa2b 	bl	800e5d0 <ucdr_advance_buffer>
 800e17a:	2108      	movs	r1, #8
 800e17c:	4620      	mov	r0, r4
 800e17e:	f000 f983 	bl	800e488 <ucdr_check_buffer_available_for>
 800e182:	2800      	cmp	r0, #0
 800e184:	d151      	bne.n	800e22a <ucdr_deserialize_double+0xca>
 800e186:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800e18a:	42be      	cmp	r6, r7
 800e18c:	d948      	bls.n	800e220 <ucdr_deserialize_double+0xc0>
 800e18e:	6923      	ldr	r3, [r4, #16]
 800e190:	60a6      	str	r6, [r4, #8]
 800e192:	1bf6      	subs	r6, r6, r7
 800e194:	4433      	add	r3, r6
 800e196:	f1c6 0808 	rsb	r8, r6, #8
 800e19a:	6123      	str	r3, [r4, #16]
 800e19c:	4641      	mov	r1, r8
 800e19e:	4620      	mov	r0, r4
 800e1a0:	f000 f97e 	bl	800e4a0 <ucdr_check_final_buffer_behavior>
 800e1a4:	2800      	cmp	r0, #0
 800e1a6:	d06d      	beq.n	800e284 <ucdr_deserialize_double+0x124>
 800e1a8:	7d23      	ldrb	r3, [r4, #20]
 800e1aa:	2b01      	cmp	r3, #1
 800e1ac:	f000 8093 	beq.w	800e2d6 <ucdr_deserialize_double+0x176>
 800e1b0:	79fb      	ldrb	r3, [r7, #7]
 800e1b2:	702b      	strb	r3, [r5, #0]
 800e1b4:	2e00      	cmp	r6, #0
 800e1b6:	d072      	beq.n	800e29e <ucdr_deserialize_double+0x13e>
 800e1b8:	79bb      	ldrb	r3, [r7, #6]
 800e1ba:	706b      	strb	r3, [r5, #1]
 800e1bc:	2e01      	cmp	r6, #1
 800e1be:	f105 0302 	add.w	r3, r5, #2
 800e1c2:	d070      	beq.n	800e2a6 <ucdr_deserialize_double+0x146>
 800e1c4:	797b      	ldrb	r3, [r7, #5]
 800e1c6:	70ab      	strb	r3, [r5, #2]
 800e1c8:	2e02      	cmp	r6, #2
 800e1ca:	f105 0303 	add.w	r3, r5, #3
 800e1ce:	d06e      	beq.n	800e2ae <ucdr_deserialize_double+0x14e>
 800e1d0:	793b      	ldrb	r3, [r7, #4]
 800e1d2:	70eb      	strb	r3, [r5, #3]
 800e1d4:	2e03      	cmp	r6, #3
 800e1d6:	f105 0304 	add.w	r3, r5, #4
 800e1da:	d06c      	beq.n	800e2b6 <ucdr_deserialize_double+0x156>
 800e1dc:	78fb      	ldrb	r3, [r7, #3]
 800e1de:	712b      	strb	r3, [r5, #4]
 800e1e0:	2e04      	cmp	r6, #4
 800e1e2:	f105 0305 	add.w	r3, r5, #5
 800e1e6:	d06a      	beq.n	800e2be <ucdr_deserialize_double+0x15e>
 800e1e8:	78bb      	ldrb	r3, [r7, #2]
 800e1ea:	716b      	strb	r3, [r5, #5]
 800e1ec:	2e05      	cmp	r6, #5
 800e1ee:	f105 0306 	add.w	r3, r5, #6
 800e1f2:	d068      	beq.n	800e2c6 <ucdr_deserialize_double+0x166>
 800e1f4:	787b      	ldrb	r3, [r7, #1]
 800e1f6:	71ab      	strb	r3, [r5, #6]
 800e1f8:	2e06      	cmp	r6, #6
 800e1fa:	f105 0307 	add.w	r3, r5, #7
 800e1fe:	d066      	beq.n	800e2ce <ucdr_deserialize_double+0x16e>
 800e200:	783b      	ldrb	r3, [r7, #0]
 800e202:	71eb      	strb	r3, [r5, #7]
 800e204:	6923      	ldr	r3, [r4, #16]
 800e206:	68a2      	ldr	r2, [r4, #8]
 800e208:	7da0      	ldrb	r0, [r4, #22]
 800e20a:	3308      	adds	r3, #8
 800e20c:	1b9e      	subs	r6, r3, r6
 800e20e:	2308      	movs	r3, #8
 800e210:	4442      	add	r2, r8
 800e212:	7563      	strb	r3, [r4, #21]
 800e214:	60a2      	str	r2, [r4, #8]
 800e216:	6126      	str	r6, [r4, #16]
 800e218:	f080 0001 	eor.w	r0, r0, #1
 800e21c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e220:	2108      	movs	r1, #8
 800e222:	4620      	mov	r0, r4
 800e224:	f000 f93c 	bl	800e4a0 <ucdr_check_final_buffer_behavior>
 800e228:	b310      	cbz	r0, 800e270 <ucdr_deserialize_double+0x110>
 800e22a:	7d23      	ldrb	r3, [r4, #20]
 800e22c:	2b01      	cmp	r3, #1
 800e22e:	68a3      	ldr	r3, [r4, #8]
 800e230:	d023      	beq.n	800e27a <ucdr_deserialize_double+0x11a>
 800e232:	79db      	ldrb	r3, [r3, #7]
 800e234:	702b      	strb	r3, [r5, #0]
 800e236:	68a3      	ldr	r3, [r4, #8]
 800e238:	799b      	ldrb	r3, [r3, #6]
 800e23a:	706b      	strb	r3, [r5, #1]
 800e23c:	68a3      	ldr	r3, [r4, #8]
 800e23e:	795b      	ldrb	r3, [r3, #5]
 800e240:	70ab      	strb	r3, [r5, #2]
 800e242:	68a3      	ldr	r3, [r4, #8]
 800e244:	791b      	ldrb	r3, [r3, #4]
 800e246:	70eb      	strb	r3, [r5, #3]
 800e248:	68a3      	ldr	r3, [r4, #8]
 800e24a:	78db      	ldrb	r3, [r3, #3]
 800e24c:	712b      	strb	r3, [r5, #4]
 800e24e:	68a3      	ldr	r3, [r4, #8]
 800e250:	789b      	ldrb	r3, [r3, #2]
 800e252:	716b      	strb	r3, [r5, #5]
 800e254:	68a3      	ldr	r3, [r4, #8]
 800e256:	785b      	ldrb	r3, [r3, #1]
 800e258:	71ab      	strb	r3, [r5, #6]
 800e25a:	68a3      	ldr	r3, [r4, #8]
 800e25c:	781b      	ldrb	r3, [r3, #0]
 800e25e:	71eb      	strb	r3, [r5, #7]
 800e260:	68a2      	ldr	r2, [r4, #8]
 800e262:	6923      	ldr	r3, [r4, #16]
 800e264:	3208      	adds	r2, #8
 800e266:	3308      	adds	r3, #8
 800e268:	2108      	movs	r1, #8
 800e26a:	60a2      	str	r2, [r4, #8]
 800e26c:	6123      	str	r3, [r4, #16]
 800e26e:	7561      	strb	r1, [r4, #21]
 800e270:	7da0      	ldrb	r0, [r4, #22]
 800e272:	f080 0001 	eor.w	r0, r0, #1
 800e276:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e27a:	681a      	ldr	r2, [r3, #0]
 800e27c:	685b      	ldr	r3, [r3, #4]
 800e27e:	606b      	str	r3, [r5, #4]
 800e280:	602a      	str	r2, [r5, #0]
 800e282:	e7ed      	b.n	800e260 <ucdr_deserialize_double+0x100>
 800e284:	68a2      	ldr	r2, [r4, #8]
 800e286:	6923      	ldr	r3, [r4, #16]
 800e288:	7da0      	ldrb	r0, [r4, #22]
 800e28a:	f884 9015 	strb.w	r9, [r4, #21]
 800e28e:	1b92      	subs	r2, r2, r6
 800e290:	1b9b      	subs	r3, r3, r6
 800e292:	60a2      	str	r2, [r4, #8]
 800e294:	6123      	str	r3, [r4, #16]
 800e296:	f080 0001 	eor.w	r0, r0, #1
 800e29a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e29e:	68a3      	ldr	r3, [r4, #8]
 800e2a0:	799b      	ldrb	r3, [r3, #6]
 800e2a2:	706b      	strb	r3, [r5, #1]
 800e2a4:	1cab      	adds	r3, r5, #2
 800e2a6:	68a2      	ldr	r2, [r4, #8]
 800e2a8:	7952      	ldrb	r2, [r2, #5]
 800e2aa:	f803 2b01 	strb.w	r2, [r3], #1
 800e2ae:	68a2      	ldr	r2, [r4, #8]
 800e2b0:	7912      	ldrb	r2, [r2, #4]
 800e2b2:	f803 2b01 	strb.w	r2, [r3], #1
 800e2b6:	68a2      	ldr	r2, [r4, #8]
 800e2b8:	78d2      	ldrb	r2, [r2, #3]
 800e2ba:	f803 2b01 	strb.w	r2, [r3], #1
 800e2be:	68a2      	ldr	r2, [r4, #8]
 800e2c0:	7892      	ldrb	r2, [r2, #2]
 800e2c2:	f803 2b01 	strb.w	r2, [r3], #1
 800e2c6:	68a2      	ldr	r2, [r4, #8]
 800e2c8:	7852      	ldrb	r2, [r2, #1]
 800e2ca:	f803 2b01 	strb.w	r2, [r3], #1
 800e2ce:	68a2      	ldr	r2, [r4, #8]
 800e2d0:	7812      	ldrb	r2, [r2, #0]
 800e2d2:	701a      	strb	r2, [r3, #0]
 800e2d4:	e796      	b.n	800e204 <ucdr_deserialize_double+0xa4>
 800e2d6:	4639      	mov	r1, r7
 800e2d8:	4632      	mov	r2, r6
 800e2da:	4628      	mov	r0, r5
 800e2dc:	f00d f907 	bl	801b4ee <memcpy>
 800e2e0:	68a1      	ldr	r1, [r4, #8]
 800e2e2:	4642      	mov	r2, r8
 800e2e4:	19a8      	adds	r0, r5, r6
 800e2e6:	f00d f902 	bl	801b4ee <memcpy>
 800e2ea:	e78b      	b.n	800e204 <ucdr_deserialize_double+0xa4>

0800e2ec <ucdr_deserialize_endian_double>:
 800e2ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e2f0:	460f      	mov	r7, r1
 800e2f2:	2108      	movs	r1, #8
 800e2f4:	4604      	mov	r4, r0
 800e2f6:	4615      	mov	r5, r2
 800e2f8:	f000 f926 	bl	800e548 <ucdr_buffer_alignment>
 800e2fc:	4601      	mov	r1, r0
 800e2fe:	4620      	mov	r0, r4
 800e300:	f894 9015 	ldrb.w	r9, [r4, #21]
 800e304:	f000 f964 	bl	800e5d0 <ucdr_advance_buffer>
 800e308:	2108      	movs	r1, #8
 800e30a:	4620      	mov	r0, r4
 800e30c:	f000 f8bc 	bl	800e488 <ucdr_check_buffer_available_for>
 800e310:	2800      	cmp	r0, #0
 800e312:	d159      	bne.n	800e3c8 <ucdr_deserialize_endian_double+0xdc>
 800e314:	e9d4 6801 	ldrd	r6, r8, [r4, #4]
 800e318:	4546      	cmp	r6, r8
 800e31a:	d950      	bls.n	800e3be <ucdr_deserialize_endian_double+0xd2>
 800e31c:	6923      	ldr	r3, [r4, #16]
 800e31e:	60a6      	str	r6, [r4, #8]
 800e320:	eba6 0608 	sub.w	r6, r6, r8
 800e324:	4433      	add	r3, r6
 800e326:	f1c6 0a08 	rsb	sl, r6, #8
 800e32a:	6123      	str	r3, [r4, #16]
 800e32c:	4651      	mov	r1, sl
 800e32e:	4620      	mov	r0, r4
 800e330:	f000 f8b6 	bl	800e4a0 <ucdr_check_final_buffer_behavior>
 800e334:	2800      	cmp	r0, #0
 800e336:	d073      	beq.n	800e420 <ucdr_deserialize_endian_double+0x134>
 800e338:	2f01      	cmp	r7, #1
 800e33a:	f000 809a 	beq.w	800e472 <ucdr_deserialize_endian_double+0x186>
 800e33e:	f898 3007 	ldrb.w	r3, [r8, #7]
 800e342:	702b      	strb	r3, [r5, #0]
 800e344:	2e00      	cmp	r6, #0
 800e346:	d078      	beq.n	800e43a <ucdr_deserialize_endian_double+0x14e>
 800e348:	f898 3006 	ldrb.w	r3, [r8, #6]
 800e34c:	706b      	strb	r3, [r5, #1]
 800e34e:	2e01      	cmp	r6, #1
 800e350:	f105 0302 	add.w	r3, r5, #2
 800e354:	d075      	beq.n	800e442 <ucdr_deserialize_endian_double+0x156>
 800e356:	f898 3005 	ldrb.w	r3, [r8, #5]
 800e35a:	70ab      	strb	r3, [r5, #2]
 800e35c:	2e02      	cmp	r6, #2
 800e35e:	f105 0303 	add.w	r3, r5, #3
 800e362:	d072      	beq.n	800e44a <ucdr_deserialize_endian_double+0x15e>
 800e364:	f898 3004 	ldrb.w	r3, [r8, #4]
 800e368:	70eb      	strb	r3, [r5, #3]
 800e36a:	2e03      	cmp	r6, #3
 800e36c:	f105 0304 	add.w	r3, r5, #4
 800e370:	d06f      	beq.n	800e452 <ucdr_deserialize_endian_double+0x166>
 800e372:	f898 3003 	ldrb.w	r3, [r8, #3]
 800e376:	712b      	strb	r3, [r5, #4]
 800e378:	2e04      	cmp	r6, #4
 800e37a:	f105 0305 	add.w	r3, r5, #5
 800e37e:	d06c      	beq.n	800e45a <ucdr_deserialize_endian_double+0x16e>
 800e380:	f898 3002 	ldrb.w	r3, [r8, #2]
 800e384:	716b      	strb	r3, [r5, #5]
 800e386:	2e05      	cmp	r6, #5
 800e388:	f105 0306 	add.w	r3, r5, #6
 800e38c:	d069      	beq.n	800e462 <ucdr_deserialize_endian_double+0x176>
 800e38e:	f898 3001 	ldrb.w	r3, [r8, #1]
 800e392:	71ab      	strb	r3, [r5, #6]
 800e394:	2e06      	cmp	r6, #6
 800e396:	f105 0307 	add.w	r3, r5, #7
 800e39a:	d066      	beq.n	800e46a <ucdr_deserialize_endian_double+0x17e>
 800e39c:	f898 3000 	ldrb.w	r3, [r8]
 800e3a0:	71eb      	strb	r3, [r5, #7]
 800e3a2:	6923      	ldr	r3, [r4, #16]
 800e3a4:	68a2      	ldr	r2, [r4, #8]
 800e3a6:	7da0      	ldrb	r0, [r4, #22]
 800e3a8:	3308      	adds	r3, #8
 800e3aa:	1b9e      	subs	r6, r3, r6
 800e3ac:	2308      	movs	r3, #8
 800e3ae:	4452      	add	r2, sl
 800e3b0:	7563      	strb	r3, [r4, #21]
 800e3b2:	60a2      	str	r2, [r4, #8]
 800e3b4:	6126      	str	r6, [r4, #16]
 800e3b6:	f080 0001 	eor.w	r0, r0, #1
 800e3ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e3be:	2108      	movs	r1, #8
 800e3c0:	4620      	mov	r0, r4
 800e3c2:	f000 f86d 	bl	800e4a0 <ucdr_check_final_buffer_behavior>
 800e3c6:	b308      	cbz	r0, 800e40c <ucdr_deserialize_endian_double+0x120>
 800e3c8:	2f01      	cmp	r7, #1
 800e3ca:	68a3      	ldr	r3, [r4, #8]
 800e3cc:	d023      	beq.n	800e416 <ucdr_deserialize_endian_double+0x12a>
 800e3ce:	79db      	ldrb	r3, [r3, #7]
 800e3d0:	702b      	strb	r3, [r5, #0]
 800e3d2:	68a3      	ldr	r3, [r4, #8]
 800e3d4:	799b      	ldrb	r3, [r3, #6]
 800e3d6:	706b      	strb	r3, [r5, #1]
 800e3d8:	68a3      	ldr	r3, [r4, #8]
 800e3da:	795b      	ldrb	r3, [r3, #5]
 800e3dc:	70ab      	strb	r3, [r5, #2]
 800e3de:	68a3      	ldr	r3, [r4, #8]
 800e3e0:	791b      	ldrb	r3, [r3, #4]
 800e3e2:	70eb      	strb	r3, [r5, #3]
 800e3e4:	68a3      	ldr	r3, [r4, #8]
 800e3e6:	78db      	ldrb	r3, [r3, #3]
 800e3e8:	712b      	strb	r3, [r5, #4]
 800e3ea:	68a3      	ldr	r3, [r4, #8]
 800e3ec:	789b      	ldrb	r3, [r3, #2]
 800e3ee:	716b      	strb	r3, [r5, #5]
 800e3f0:	68a3      	ldr	r3, [r4, #8]
 800e3f2:	785b      	ldrb	r3, [r3, #1]
 800e3f4:	71ab      	strb	r3, [r5, #6]
 800e3f6:	68a3      	ldr	r3, [r4, #8]
 800e3f8:	781b      	ldrb	r3, [r3, #0]
 800e3fa:	71eb      	strb	r3, [r5, #7]
 800e3fc:	68a2      	ldr	r2, [r4, #8]
 800e3fe:	6923      	ldr	r3, [r4, #16]
 800e400:	3208      	adds	r2, #8
 800e402:	3308      	adds	r3, #8
 800e404:	2108      	movs	r1, #8
 800e406:	60a2      	str	r2, [r4, #8]
 800e408:	6123      	str	r3, [r4, #16]
 800e40a:	7561      	strb	r1, [r4, #21]
 800e40c:	7da0      	ldrb	r0, [r4, #22]
 800e40e:	f080 0001 	eor.w	r0, r0, #1
 800e412:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e416:	681a      	ldr	r2, [r3, #0]
 800e418:	685b      	ldr	r3, [r3, #4]
 800e41a:	606b      	str	r3, [r5, #4]
 800e41c:	602a      	str	r2, [r5, #0]
 800e41e:	e7ed      	b.n	800e3fc <ucdr_deserialize_endian_double+0x110>
 800e420:	68a2      	ldr	r2, [r4, #8]
 800e422:	6923      	ldr	r3, [r4, #16]
 800e424:	7da0      	ldrb	r0, [r4, #22]
 800e426:	f884 9015 	strb.w	r9, [r4, #21]
 800e42a:	1b92      	subs	r2, r2, r6
 800e42c:	1b9b      	subs	r3, r3, r6
 800e42e:	60a2      	str	r2, [r4, #8]
 800e430:	6123      	str	r3, [r4, #16]
 800e432:	f080 0001 	eor.w	r0, r0, #1
 800e436:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e43a:	68a3      	ldr	r3, [r4, #8]
 800e43c:	799b      	ldrb	r3, [r3, #6]
 800e43e:	706b      	strb	r3, [r5, #1]
 800e440:	1cab      	adds	r3, r5, #2
 800e442:	68a2      	ldr	r2, [r4, #8]
 800e444:	7952      	ldrb	r2, [r2, #5]
 800e446:	f803 2b01 	strb.w	r2, [r3], #1
 800e44a:	68a2      	ldr	r2, [r4, #8]
 800e44c:	7912      	ldrb	r2, [r2, #4]
 800e44e:	f803 2b01 	strb.w	r2, [r3], #1
 800e452:	68a2      	ldr	r2, [r4, #8]
 800e454:	78d2      	ldrb	r2, [r2, #3]
 800e456:	f803 2b01 	strb.w	r2, [r3], #1
 800e45a:	68a2      	ldr	r2, [r4, #8]
 800e45c:	7892      	ldrb	r2, [r2, #2]
 800e45e:	f803 2b01 	strb.w	r2, [r3], #1
 800e462:	68a2      	ldr	r2, [r4, #8]
 800e464:	7852      	ldrb	r2, [r2, #1]
 800e466:	f803 2b01 	strb.w	r2, [r3], #1
 800e46a:	68a2      	ldr	r2, [r4, #8]
 800e46c:	7812      	ldrb	r2, [r2, #0]
 800e46e:	701a      	strb	r2, [r3, #0]
 800e470:	e797      	b.n	800e3a2 <ucdr_deserialize_endian_double+0xb6>
 800e472:	4641      	mov	r1, r8
 800e474:	4632      	mov	r2, r6
 800e476:	4628      	mov	r0, r5
 800e478:	f00d f839 	bl	801b4ee <memcpy>
 800e47c:	68a1      	ldr	r1, [r4, #8]
 800e47e:	4652      	mov	r2, sl
 800e480:	19a8      	adds	r0, r5, r6
 800e482:	f00d f834 	bl	801b4ee <memcpy>
 800e486:	e78c      	b.n	800e3a2 <ucdr_deserialize_endian_double+0xb6>

0800e488 <ucdr_check_buffer_available_for>:
 800e488:	7d83      	ldrb	r3, [r0, #22]
 800e48a:	b93b      	cbnz	r3, 800e49c <ucdr_check_buffer_available_for+0x14>
 800e48c:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 800e490:	4419      	add	r1, r3
 800e492:	4288      	cmp	r0, r1
 800e494:	bf34      	ite	cc
 800e496:	2000      	movcc	r0, #0
 800e498:	2001      	movcs	r0, #1
 800e49a:	4770      	bx	lr
 800e49c:	2000      	movs	r0, #0
 800e49e:	4770      	bx	lr

0800e4a0 <ucdr_check_final_buffer_behavior>:
 800e4a0:	7d83      	ldrb	r3, [r0, #22]
 800e4a2:	b943      	cbnz	r3, 800e4b6 <ucdr_check_final_buffer_behavior+0x16>
 800e4a4:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 800e4a8:	4291      	cmp	r1, r2
 800e4aa:	b510      	push	{r4, lr}
 800e4ac:	4604      	mov	r4, r0
 800e4ae:	d205      	bcs.n	800e4bc <ucdr_check_final_buffer_behavior+0x1c>
 800e4b0:	2301      	movs	r3, #1
 800e4b2:	4618      	mov	r0, r3
 800e4b4:	bd10      	pop	{r4, pc}
 800e4b6:	2300      	movs	r3, #0
 800e4b8:	4618      	mov	r0, r3
 800e4ba:	4770      	bx	lr
 800e4bc:	6982      	ldr	r2, [r0, #24]
 800e4be:	b13a      	cbz	r2, 800e4d0 <ucdr_check_final_buffer_behavior+0x30>
 800e4c0:	69c1      	ldr	r1, [r0, #28]
 800e4c2:	4790      	blx	r2
 800e4c4:	f080 0301 	eor.w	r3, r0, #1
 800e4c8:	b2db      	uxtb	r3, r3
 800e4ca:	75a0      	strb	r0, [r4, #22]
 800e4cc:	4618      	mov	r0, r3
 800e4ce:	bd10      	pop	{r4, pc}
 800e4d0:	2001      	movs	r0, #1
 800e4d2:	75a0      	strb	r0, [r4, #22]
 800e4d4:	e7fa      	b.n	800e4cc <ucdr_check_final_buffer_behavior+0x2c>
 800e4d6:	bf00      	nop

0800e4d8 <ucdr_set_on_full_buffer_callback>:
 800e4d8:	e9c0 1206 	strd	r1, r2, [r0, #24]
 800e4dc:	4770      	bx	lr
 800e4de:	bf00      	nop

0800e4e0 <ucdr_init_buffer_origin_offset_endian>:
 800e4e0:	b410      	push	{r4}
 800e4e2:	9c01      	ldr	r4, [sp, #4]
 800e4e4:	6001      	str	r1, [r0, #0]
 800e4e6:	440a      	add	r2, r1
 800e4e8:	6042      	str	r2, [r0, #4]
 800e4ea:	190a      	adds	r2, r1, r4
 800e4ec:	441c      	add	r4, r3
 800e4ee:	e9c0 3403 	strd	r3, r4, [r0, #12]
 800e4f2:	6082      	str	r2, [r0, #8]
 800e4f4:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800e4f8:	7503      	strb	r3, [r0, #20]
 800e4fa:	2200      	movs	r2, #0
 800e4fc:	e9c0 2206 	strd	r2, r2, [r0, #24]
 800e500:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e504:	7542      	strb	r2, [r0, #21]
 800e506:	7582      	strb	r2, [r0, #22]
 800e508:	4770      	bx	lr
 800e50a:	bf00      	nop

0800e50c <ucdr_init_buffer_origin_offset>:
 800e50c:	b510      	push	{r4, lr}
 800e50e:	b082      	sub	sp, #8
 800e510:	9c04      	ldr	r4, [sp, #16]
 800e512:	9400      	str	r4, [sp, #0]
 800e514:	2401      	movs	r4, #1
 800e516:	9401      	str	r4, [sp, #4]
 800e518:	f7ff ffe2 	bl	800e4e0 <ucdr_init_buffer_origin_offset_endian>
 800e51c:	b002      	add	sp, #8
 800e51e:	bd10      	pop	{r4, pc}

0800e520 <ucdr_init_buffer_origin>:
 800e520:	b510      	push	{r4, lr}
 800e522:	b082      	sub	sp, #8
 800e524:	2400      	movs	r4, #0
 800e526:	9400      	str	r4, [sp, #0]
 800e528:	f7ff fff0 	bl	800e50c <ucdr_init_buffer_origin_offset>
 800e52c:	b002      	add	sp, #8
 800e52e:	bd10      	pop	{r4, pc}

0800e530 <ucdr_init_buffer>:
 800e530:	2300      	movs	r3, #0
 800e532:	f7ff bff5 	b.w	800e520 <ucdr_init_buffer_origin>
 800e536:	bf00      	nop

0800e538 <ucdr_alignment>:
 800e538:	fbb0 f3f1 	udiv	r3, r0, r1
 800e53c:	fb03 0011 	mls	r0, r3, r1, r0
 800e540:	1a08      	subs	r0, r1, r0
 800e542:	3901      	subs	r1, #1
 800e544:	4008      	ands	r0, r1
 800e546:	4770      	bx	lr

0800e548 <ucdr_buffer_alignment>:
 800e548:	7d43      	ldrb	r3, [r0, #21]
 800e54a:	428b      	cmp	r3, r1
 800e54c:	d208      	bcs.n	800e560 <ucdr_buffer_alignment+0x18>
 800e54e:	6900      	ldr	r0, [r0, #16]
 800e550:	fbb0 f3f1 	udiv	r3, r0, r1
 800e554:	fb01 0013 	mls	r0, r1, r3, r0
 800e558:	1a08      	subs	r0, r1, r0
 800e55a:	3901      	subs	r1, #1
 800e55c:	4008      	ands	r0, r1
 800e55e:	4770      	bx	lr
 800e560:	2000      	movs	r0, #0
 800e562:	4770      	bx	lr

0800e564 <ucdr_align_to>:
 800e564:	b538      	push	{r3, r4, r5, lr}
 800e566:	4604      	mov	r4, r0
 800e568:	460d      	mov	r5, r1
 800e56a:	f7ff ffed 	bl	800e548 <ucdr_buffer_alignment>
 800e56e:	68a3      	ldr	r3, [r4, #8]
 800e570:	6921      	ldr	r1, [r4, #16]
 800e572:	7565      	strb	r5, [r4, #21]
 800e574:	181a      	adds	r2, r3, r0
 800e576:	6863      	ldr	r3, [r4, #4]
 800e578:	4293      	cmp	r3, r2
 800e57a:	4408      	add	r0, r1
 800e57c:	bf28      	it	cs
 800e57e:	4613      	movcs	r3, r2
 800e580:	6120      	str	r0, [r4, #16]
 800e582:	60a3      	str	r3, [r4, #8]
 800e584:	bd38      	pop	{r3, r4, r5, pc}
 800e586:	bf00      	nop

0800e588 <ucdr_buffer_length>:
 800e588:	6882      	ldr	r2, [r0, #8]
 800e58a:	6800      	ldr	r0, [r0, #0]
 800e58c:	1a10      	subs	r0, r2, r0
 800e58e:	4770      	bx	lr

0800e590 <ucdr_buffer_remaining>:
 800e590:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 800e594:	1a10      	subs	r0, r2, r0
 800e596:	4770      	bx	lr

0800e598 <ucdr_check_final_buffer_behavior_array>:
 800e598:	b538      	push	{r3, r4, r5, lr}
 800e59a:	7d83      	ldrb	r3, [r0, #22]
 800e59c:	b963      	cbnz	r3, 800e5b8 <ucdr_check_final_buffer_behavior_array+0x20>
 800e59e:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 800e5a2:	429a      	cmp	r2, r3
 800e5a4:	4604      	mov	r4, r0
 800e5a6:	460d      	mov	r5, r1
 800e5a8:	d308      	bcc.n	800e5bc <ucdr_check_final_buffer_behavior_array+0x24>
 800e5aa:	b139      	cbz	r1, 800e5bc <ucdr_check_final_buffer_behavior_array+0x24>
 800e5ac:	6983      	ldr	r3, [r0, #24]
 800e5ae:	b163      	cbz	r3, 800e5ca <ucdr_check_final_buffer_behavior_array+0x32>
 800e5b0:	69c1      	ldr	r1, [r0, #28]
 800e5b2:	4798      	blx	r3
 800e5b4:	75a0      	strb	r0, [r4, #22]
 800e5b6:	b108      	cbz	r0, 800e5bc <ucdr_check_final_buffer_behavior_array+0x24>
 800e5b8:	2000      	movs	r0, #0
 800e5ba:	bd38      	pop	{r3, r4, r5, pc}
 800e5bc:	4620      	mov	r0, r4
 800e5be:	f7ff ffe7 	bl	800e590 <ucdr_buffer_remaining>
 800e5c2:	42a8      	cmp	r0, r5
 800e5c4:	bf28      	it	cs
 800e5c6:	4628      	movcs	r0, r5
 800e5c8:	bd38      	pop	{r3, r4, r5, pc}
 800e5ca:	2301      	movs	r3, #1
 800e5cc:	7583      	strb	r3, [r0, #22]
 800e5ce:	e7f3      	b.n	800e5b8 <ucdr_check_final_buffer_behavior_array+0x20>

0800e5d0 <ucdr_advance_buffer>:
 800e5d0:	b538      	push	{r3, r4, r5, lr}
 800e5d2:	4604      	mov	r4, r0
 800e5d4:	460d      	mov	r5, r1
 800e5d6:	f7ff ff57 	bl	800e488 <ucdr_check_buffer_available_for>
 800e5da:	b178      	cbz	r0, 800e5fc <ucdr_advance_buffer+0x2c>
 800e5dc:	6923      	ldr	r3, [r4, #16]
 800e5de:	68a2      	ldr	r2, [r4, #8]
 800e5e0:	442b      	add	r3, r5
 800e5e2:	6123      	str	r3, [r4, #16]
 800e5e4:	2301      	movs	r3, #1
 800e5e6:	442a      	add	r2, r5
 800e5e8:	7563      	strb	r3, [r4, #21]
 800e5ea:	60a2      	str	r2, [r4, #8]
 800e5ec:	bd38      	pop	{r3, r4, r5, pc}
 800e5ee:	68a2      	ldr	r2, [r4, #8]
 800e5f0:	6923      	ldr	r3, [r4, #16]
 800e5f2:	4402      	add	r2, r0
 800e5f4:	4403      	add	r3, r0
 800e5f6:	1a2d      	subs	r5, r5, r0
 800e5f8:	60a2      	str	r2, [r4, #8]
 800e5fa:	6123      	str	r3, [r4, #16]
 800e5fc:	4629      	mov	r1, r5
 800e5fe:	2201      	movs	r2, #1
 800e600:	4620      	mov	r0, r4
 800e602:	f7ff ffc9 	bl	800e598 <ucdr_check_final_buffer_behavior_array>
 800e606:	2800      	cmp	r0, #0
 800e608:	d1f1      	bne.n	800e5ee <ucdr_advance_buffer+0x1e>
 800e60a:	2301      	movs	r3, #1
 800e60c:	7563      	strb	r3, [r4, #21]
 800e60e:	bd38      	pop	{r3, r4, r5, pc}

0800e610 <rcl_get_zero_initialized_init_options>:
 800e610:	2000      	movs	r0, #0
 800e612:	4770      	bx	lr

0800e614 <rcl_init_options_init>:
 800e614:	b084      	sub	sp, #16
 800e616:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e618:	b097      	sub	sp, #92	@ 0x5c
 800e61a:	ae1d      	add	r6, sp, #116	@ 0x74
 800e61c:	e886 000e 	stmia.w	r6, {r1, r2, r3}
 800e620:	2800      	cmp	r0, #0
 800e622:	d058      	beq.n	800e6d6 <rcl_init_options_init+0xc2>
 800e624:	6803      	ldr	r3, [r0, #0]
 800e626:	4605      	mov	r5, r0
 800e628:	b133      	cbz	r3, 800e638 <rcl_init_options_init+0x24>
 800e62a:	2464      	movs	r4, #100	@ 0x64
 800e62c:	4620      	mov	r0, r4
 800e62e:	b017      	add	sp, #92	@ 0x5c
 800e630:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800e634:	b004      	add	sp, #16
 800e636:	4770      	bx	lr
 800e638:	4630      	mov	r0, r6
 800e63a:	f001 f997 	bl	800f96c <rcutils_allocator_is_valid>
 800e63e:	2800      	cmp	r0, #0
 800e640:	d049      	beq.n	800e6d6 <rcl_init_options_init+0xc2>
 800e642:	46b4      	mov	ip, r6
 800e644:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e648:	ac11      	add	r4, sp, #68	@ 0x44
 800e64a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e64c:	f8dc 3000 	ldr.w	r3, [ip]
 800e650:	6023      	str	r3, [r4, #0]
 800e652:	9921      	ldr	r1, [sp, #132]	@ 0x84
 800e654:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800e656:	2050      	movs	r0, #80	@ 0x50
 800e658:	4798      	blx	r3
 800e65a:	4604      	mov	r4, r0
 800e65c:	6028      	str	r0, [r5, #0]
 800e65e:	2800      	cmp	r0, #0
 800e660:	d03b      	beq.n	800e6da <rcl_init_options_init+0xc6>
 800e662:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 800e666:	4686      	mov	lr, r0
 800e668:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e66c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800e670:	f8dc 3000 	ldr.w	r3, [ip]
 800e674:	f8ce 3000 	str.w	r3, [lr]
 800e678:	a802      	add	r0, sp, #8
 800e67a:	f001 fa09 	bl	800fa90 <rmw_get_zero_initialized_init_options>
 800e67e:	f10d 0e08 	add.w	lr, sp, #8
 800e682:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800e686:	f104 0c18 	add.w	ip, r4, #24
 800e68a:	682f      	ldr	r7, [r5, #0]
 800e68c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e690:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800e694:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e698:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800e69c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e6a0:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800e6a4:	ac20      	add	r4, sp, #128	@ 0x80
 800e6a6:	e88c 0003 	stmia.w	ip, {r0, r1}
 800e6aa:	e894 0003 	ldmia.w	r4, {r0, r1}
 800e6ae:	e88d 0003 	stmia.w	sp, {r0, r1}
 800e6b2:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800e6b6:	f107 0018 	add.w	r0, r7, #24
 800e6ba:	f001 fa17 	bl	800faec <rmw_init_options_init>
 800e6be:	4604      	mov	r4, r0
 800e6c0:	2800      	cmp	r0, #0
 800e6c2:	d0b3      	beq.n	800e62c <rcl_init_options_init+0x18>
 800e6c4:	9921      	ldr	r1, [sp, #132]	@ 0x84
 800e6c6:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800e6c8:	6828      	ldr	r0, [r5, #0]
 800e6ca:	4798      	blx	r3
 800e6cc:	4620      	mov	r0, r4
 800e6ce:	f006 fd59 	bl	8015184 <rcl_convert_rmw_ret_to_rcl_ret>
 800e6d2:	4604      	mov	r4, r0
 800e6d4:	e7aa      	b.n	800e62c <rcl_init_options_init+0x18>
 800e6d6:	240b      	movs	r4, #11
 800e6d8:	e7a8      	b.n	800e62c <rcl_init_options_init+0x18>
 800e6da:	240a      	movs	r4, #10
 800e6dc:	e7a6      	b.n	800e62c <rcl_init_options_init+0x18>
 800e6de:	bf00      	nop

0800e6e0 <rcl_init_options_fini>:
 800e6e0:	b530      	push	{r4, r5, lr}
 800e6e2:	b087      	sub	sp, #28
 800e6e4:	b1f0      	cbz	r0, 800e724 <rcl_init_options_fini+0x44>
 800e6e6:	6803      	ldr	r3, [r0, #0]
 800e6e8:	4604      	mov	r4, r0
 800e6ea:	b1db      	cbz	r3, 800e724 <rcl_init_options_fini+0x44>
 800e6ec:	469c      	mov	ip, r3
 800e6ee:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e6f2:	f10d 0e04 	add.w	lr, sp, #4
 800e6f6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800e6fa:	f8dc 3000 	ldr.w	r3, [ip]
 800e6fe:	f8ce 3000 	str.w	r3, [lr]
 800e702:	a801      	add	r0, sp, #4
 800e704:	f001 f932 	bl	800f96c <rcutils_allocator_is_valid>
 800e708:	b160      	cbz	r0, 800e724 <rcl_init_options_fini+0x44>
 800e70a:	6820      	ldr	r0, [r4, #0]
 800e70c:	3018      	adds	r0, #24
 800e70e:	f001 fac3 	bl	800fc98 <rmw_init_options_fini>
 800e712:	4605      	mov	r5, r0
 800e714:	b950      	cbnz	r0, 800e72c <rcl_init_options_fini+0x4c>
 800e716:	6820      	ldr	r0, [r4, #0]
 800e718:	9b02      	ldr	r3, [sp, #8]
 800e71a:	9905      	ldr	r1, [sp, #20]
 800e71c:	4798      	blx	r3
 800e71e:	4628      	mov	r0, r5
 800e720:	b007      	add	sp, #28
 800e722:	bd30      	pop	{r4, r5, pc}
 800e724:	250b      	movs	r5, #11
 800e726:	4628      	mov	r0, r5
 800e728:	b007      	add	sp, #28
 800e72a:	bd30      	pop	{r4, r5, pc}
 800e72c:	f006 fd2a 	bl	8015184 <rcl_convert_rmw_ret_to_rcl_ret>
 800e730:	4605      	mov	r5, r0
 800e732:	e7f8      	b.n	800e726 <rcl_init_options_fini+0x46>

0800e734 <rcl_init_options_copy>:
 800e734:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e738:	b094      	sub	sp, #80	@ 0x50
 800e73a:	2800      	cmp	r0, #0
 800e73c:	d058      	beq.n	800e7f0 <rcl_init_options_copy+0xbc>
 800e73e:	4604      	mov	r4, r0
 800e740:	6800      	ldr	r0, [r0, #0]
 800e742:	2800      	cmp	r0, #0
 800e744:	d054      	beq.n	800e7f0 <rcl_init_options_copy+0xbc>
 800e746:	460e      	mov	r6, r1
 800e748:	f001 f910 	bl	800f96c <rcutils_allocator_is_valid>
 800e74c:	2800      	cmp	r0, #0
 800e74e:	d04f      	beq.n	800e7f0 <rcl_init_options_copy+0xbc>
 800e750:	2e00      	cmp	r6, #0
 800e752:	d04d      	beq.n	800e7f0 <rcl_init_options_copy+0xbc>
 800e754:	6833      	ldr	r3, [r6, #0]
 800e756:	b123      	cbz	r3, 800e762 <rcl_init_options_copy+0x2e>
 800e758:	2464      	movs	r4, #100	@ 0x64
 800e75a:	4620      	mov	r0, r4
 800e75c:	b014      	add	sp, #80	@ 0x50
 800e75e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e762:	6827      	ldr	r7, [r4, #0]
 800e764:	46bc      	mov	ip, r7
 800e766:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e76a:	ad0f      	add	r5, sp, #60	@ 0x3c
 800e76c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800e76e:	f8dc 3000 	ldr.w	r3, [ip]
 800e772:	f8d7 8000 	ldr.w	r8, [r7]
 800e776:	602b      	str	r3, [r5, #0]
 800e778:	4619      	mov	r1, r3
 800e77a:	2050      	movs	r0, #80	@ 0x50
 800e77c:	47c0      	blx	r8
 800e77e:	4605      	mov	r5, r0
 800e780:	6030      	str	r0, [r6, #0]
 800e782:	b3d0      	cbz	r0, 800e7fa <rcl_init_options_copy+0xc6>
 800e784:	f10d 0c3c 	add.w	ip, sp, #60	@ 0x3c
 800e788:	4686      	mov	lr, r0
 800e78a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e78e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800e792:	f8dc 3000 	ldr.w	r3, [ip]
 800e796:	f8ce 3000 	str.w	r3, [lr]
 800e79a:	4668      	mov	r0, sp
 800e79c:	f001 f978 	bl	800fa90 <rmw_get_zero_initialized_init_options>
 800e7a0:	46ee      	mov	lr, sp
 800e7a2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800e7a6:	f105 0c18 	add.w	ip, r5, #24
 800e7aa:	6824      	ldr	r4, [r4, #0]
 800e7ac:	6835      	ldr	r5, [r6, #0]
 800e7ae:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e7b2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800e7b6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e7ba:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800e7be:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e7c2:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800e7c6:	e88c 0003 	stmia.w	ip, {r0, r1}
 800e7ca:	f104 0018 	add.w	r0, r4, #24
 800e7ce:	f105 0118 	add.w	r1, r5, #24
 800e7d2:	f001 f9ed 	bl	800fbb0 <rmw_init_options_copy>
 800e7d6:	4604      	mov	r4, r0
 800e7d8:	2800      	cmp	r0, #0
 800e7da:	d0be      	beq.n	800e75a <rcl_init_options_copy+0x26>
 800e7dc:	f001 f8d4 	bl	800f988 <rcutils_get_error_string>
 800e7e0:	f001 f8ea 	bl	800f9b8 <rcutils_reset_error>
 800e7e4:	4630      	mov	r0, r6
 800e7e6:	f7ff ff7b 	bl	800e6e0 <rcl_init_options_fini>
 800e7ea:	b140      	cbz	r0, 800e7fe <rcl_init_options_copy+0xca>
 800e7ec:	4604      	mov	r4, r0
 800e7ee:	e7b4      	b.n	800e75a <rcl_init_options_copy+0x26>
 800e7f0:	240b      	movs	r4, #11
 800e7f2:	4620      	mov	r0, r4
 800e7f4:	b014      	add	sp, #80	@ 0x50
 800e7f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e7fa:	240a      	movs	r4, #10
 800e7fc:	e7ad      	b.n	800e75a <rcl_init_options_copy+0x26>
 800e7fe:	4620      	mov	r0, r4
 800e800:	b014      	add	sp, #80	@ 0x50
 800e802:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e806:	f006 bcbd 	b.w	8015184 <rcl_convert_rmw_ret_to_rcl_ret>
 800e80a:	bf00      	nop

0800e80c <rcl_init_options_set_domain_id>:
 800e80c:	b120      	cbz	r0, 800e818 <rcl_init_options_set_domain_id+0xc>
 800e80e:	6803      	ldr	r3, [r0, #0]
 800e810:	b113      	cbz	r3, 800e818 <rcl_init_options_set_domain_id+0xc>
 800e812:	6259      	str	r1, [r3, #36]	@ 0x24
 800e814:	2000      	movs	r0, #0
 800e816:	4770      	bx	lr
 800e818:	200b      	movs	r0, #11
 800e81a:	4770      	bx	lr

0800e81c <rcl_get_zero_initialized_publisher>:
 800e81c:	4b01      	ldr	r3, [pc, #4]	@ (800e824 <rcl_get_zero_initialized_publisher+0x8>)
 800e81e:	6818      	ldr	r0, [r3, #0]
 800e820:	4770      	bx	lr
 800e822:	bf00      	nop
 800e824:	0801e54c 	.word	0x0801e54c

0800e828 <rcl_publisher_init>:
 800e828:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e82c:	b088      	sub	sp, #32
 800e82e:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 800e830:	2d00      	cmp	r5, #0
 800e832:	d069      	beq.n	800e908 <rcl_publisher_init+0xe0>
 800e834:	f105 0950 	add.w	r9, r5, #80	@ 0x50
 800e838:	4604      	mov	r4, r0
 800e83a:	4648      	mov	r0, r9
 800e83c:	460e      	mov	r6, r1
 800e83e:	4690      	mov	r8, r2
 800e840:	461f      	mov	r7, r3
 800e842:	f001 f893 	bl	800f96c <rcutils_allocator_is_valid>
 800e846:	2800      	cmp	r0, #0
 800e848:	d05e      	beq.n	800e908 <rcl_publisher_init+0xe0>
 800e84a:	2c00      	cmp	r4, #0
 800e84c:	d05c      	beq.n	800e908 <rcl_publisher_init+0xe0>
 800e84e:	f8d4 a000 	ldr.w	sl, [r4]
 800e852:	f1ba 0f00 	cmp.w	sl, #0
 800e856:	d004      	beq.n	800e862 <rcl_publisher_init+0x3a>
 800e858:	2764      	movs	r7, #100	@ 0x64
 800e85a:	4638      	mov	r0, r7
 800e85c:	b008      	add	sp, #32
 800e85e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e862:	4630      	mov	r0, r6
 800e864:	f006 ff72 	bl	801574c <rcl_node_is_valid>
 800e868:	2800      	cmp	r0, #0
 800e86a:	d052      	beq.n	800e912 <rcl_publisher_init+0xea>
 800e86c:	f1b8 0f00 	cmp.w	r8, #0
 800e870:	d04a      	beq.n	800e908 <rcl_publisher_init+0xe0>
 800e872:	2f00      	cmp	r7, #0
 800e874:	d048      	beq.n	800e908 <rcl_publisher_init+0xe0>
 800e876:	e9cd aa03 	strd	sl, sl, [sp, #12]
 800e87a:	aa07      	add	r2, sp, #28
 800e87c:	9205      	str	r2, [sp, #20]
 800e87e:	f105 0358 	add.w	r3, r5, #88	@ 0x58
 800e882:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800e886:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800e88a:	f8cd a01c 	str.w	sl, [sp, #28]
 800e88e:	4639      	mov	r1, r7
 800e890:	e899 000c 	ldmia.w	r9, {r2, r3}
 800e894:	4630      	mov	r0, r6
 800e896:	f006 ffad 	bl	80157f4 <rcl_node_resolve_name>
 800e89a:	4607      	mov	r7, r0
 800e89c:	2800      	cmp	r0, #0
 800e89e:	d14f      	bne.n	800e940 <rcl_publisher_init+0x118>
 800e8a0:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 800e8a2:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800e8a4:	20c8      	movs	r0, #200	@ 0xc8
 800e8a6:	4798      	blx	r3
 800e8a8:	6020      	str	r0, [r4, #0]
 800e8aa:	2800      	cmp	r0, #0
 800e8ac:	d04e      	beq.n	800e94c <rcl_publisher_init+0x124>
 800e8ae:	4630      	mov	r0, r6
 800e8b0:	f006 ff6e 	bl	8015790 <rcl_node_get_rmw_handle>
 800e8b4:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 800e8b8:	9300      	str	r3, [sp, #0]
 800e8ba:	9a07      	ldr	r2, [sp, #28]
 800e8bc:	6827      	ldr	r7, [r4, #0]
 800e8be:	462b      	mov	r3, r5
 800e8c0:	4641      	mov	r1, r8
 800e8c2:	f001 fd15 	bl	80102f0 <rmw_create_publisher>
 800e8c6:	6823      	ldr	r3, [r4, #0]
 800e8c8:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
 800e8cc:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800e8d0:	b370      	cbz	r0, 800e930 <rcl_publisher_init+0x108>
 800e8d2:	f103 0170 	add.w	r1, r3, #112	@ 0x70
 800e8d6:	f001 fde9 	bl	80104ac <rmw_publisher_get_actual_qos>
 800e8da:	6823      	ldr	r3, [r4, #0]
 800e8dc:	4607      	mov	r7, r0
 800e8de:	b9d0      	cbnz	r0, 800e916 <rcl_publisher_init+0xee>
 800e8e0:	f895 2048 	ldrb.w	r2, [r5, #72]	@ 0x48
 800e8e4:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
 800e8e8:	4629      	mov	r1, r5
 800e8ea:	2270      	movs	r2, #112	@ 0x70
 800e8ec:	4618      	mov	r0, r3
 800e8ee:	f00c fdfe 	bl	801b4ee <memcpy>
 800e8f2:	6832      	ldr	r2, [r6, #0]
 800e8f4:	f8c0 20c0 	str.w	r2, [r0, #192]	@ 0xc0
 800e8f8:	9807      	ldr	r0, [sp, #28]
 800e8fa:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 800e8fc:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800e8fe:	4798      	blx	r3
 800e900:	4638      	mov	r0, r7
 800e902:	b008      	add	sp, #32
 800e904:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e908:	270b      	movs	r7, #11
 800e90a:	4638      	mov	r0, r7
 800e90c:	b008      	add	sp, #32
 800e90e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e912:	27c8      	movs	r7, #200	@ 0xc8
 800e914:	e7a1      	b.n	800e85a <rcl_publisher_init+0x32>
 800e916:	b18b      	cbz	r3, 800e93c <rcl_publisher_init+0x114>
 800e918:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800e91c:	b142      	cbz	r2, 800e930 <rcl_publisher_init+0x108>
 800e91e:	4630      	mov	r0, r6
 800e920:	f006 ff36 	bl	8015790 <rcl_node_get_rmw_handle>
 800e924:	6823      	ldr	r3, [r4, #0]
 800e926:	f8d3 10c4 	ldr.w	r1, [r3, #196]	@ 0xc4
 800e92a:	f001 fdcf 	bl	80104cc <rmw_destroy_publisher>
 800e92e:	6823      	ldr	r3, [r4, #0]
 800e930:	6d6a      	ldr	r2, [r5, #84]	@ 0x54
 800e932:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800e934:	4618      	mov	r0, r3
 800e936:	4790      	blx	r2
 800e938:	2300      	movs	r3, #0
 800e93a:	6023      	str	r3, [r4, #0]
 800e93c:	2701      	movs	r7, #1
 800e93e:	e7db      	b.n	800e8f8 <rcl_publisher_init+0xd0>
 800e940:	2867      	cmp	r0, #103	@ 0x67
 800e942:	d0d9      	beq.n	800e8f8 <rcl_publisher_init+0xd0>
 800e944:	2869      	cmp	r0, #105	@ 0x69
 800e946:	d003      	beq.n	800e950 <rcl_publisher_init+0x128>
 800e948:	280a      	cmp	r0, #10
 800e94a:	d1f7      	bne.n	800e93c <rcl_publisher_init+0x114>
 800e94c:	270a      	movs	r7, #10
 800e94e:	e7d3      	b.n	800e8f8 <rcl_publisher_init+0xd0>
 800e950:	2767      	movs	r7, #103	@ 0x67
 800e952:	e7d1      	b.n	800e8f8 <rcl_publisher_init+0xd0>

0800e954 <rcl_publisher_get_default_options>:
 800e954:	b570      	push	{r4, r5, r6, lr}
 800e956:	4d14      	ldr	r5, [pc, #80]	@ (800e9a8 <rcl_publisher_get_default_options+0x54>)
 800e958:	4914      	ldr	r1, [pc, #80]	@ (800e9ac <rcl_publisher_get_default_options+0x58>)
 800e95a:	b088      	sub	sp, #32
 800e95c:	4604      	mov	r4, r0
 800e95e:	2250      	movs	r2, #80	@ 0x50
 800e960:	4628      	mov	r0, r5
 800e962:	f00c fdc4 	bl	801b4ee <memcpy>
 800e966:	a802      	add	r0, sp, #8
 800e968:	f000 fff2 	bl	800f950 <rcutils_get_default_allocator>
 800e96c:	f10d 0c08 	add.w	ip, sp, #8
 800e970:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e974:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 800e978:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800e97c:	466e      	mov	r6, sp
 800e97e:	f8dc 3000 	ldr.w	r3, [ip]
 800e982:	f8ce 3000 	str.w	r3, [lr]
 800e986:	4630      	mov	r0, r6
 800e988:	f001 f892 	bl	800fab0 <rmw_get_default_publisher_options>
 800e98c:	e896 0003 	ldmia.w	r6, {r0, r1}
 800e990:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 800e994:	e883 0003 	stmia.w	r3, {r0, r1}
 800e998:	2270      	movs	r2, #112	@ 0x70
 800e99a:	4629      	mov	r1, r5
 800e99c:	4620      	mov	r0, r4
 800e99e:	f00c fda6 	bl	801b4ee <memcpy>
 800e9a2:	4620      	mov	r0, r4
 800e9a4:	b008      	add	sp, #32
 800e9a6:	bd70      	pop	{r4, r5, r6, pc}
 800e9a8:	20006b30 	.word	0x20006b30
 800e9ac:	0801e550 	.word	0x0801e550

0800e9b0 <rcl_publish>:
 800e9b0:	b1f8      	cbz	r0, 800e9f2 <rcl_publish+0x42>
 800e9b2:	6803      	ldr	r3, [r0, #0]
 800e9b4:	b570      	push	{r4, r5, r6, lr}
 800e9b6:	4604      	mov	r4, r0
 800e9b8:	b1b3      	cbz	r3, 800e9e8 <rcl_publish+0x38>
 800e9ba:	4616      	mov	r6, r2
 800e9bc:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800e9c0:	b192      	cbz	r2, 800e9e8 <rcl_publish+0x38>
 800e9c2:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 800e9c6:	460d      	mov	r5, r1
 800e9c8:	f006 fbfa 	bl	80151c0 <rcl_context_is_valid>
 800e9cc:	b160      	cbz	r0, 800e9e8 <rcl_publish+0x38>
 800e9ce:	6823      	ldr	r3, [r4, #0]
 800e9d0:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800e9d4:	b140      	cbz	r0, 800e9e8 <rcl_publish+0x38>
 800e9d6:	b155      	cbz	r5, 800e9ee <rcl_publish+0x3e>
 800e9d8:	4632      	mov	r2, r6
 800e9da:	4629      	mov	r1, r5
 800e9dc:	f001 fc28 	bl	8010230 <rmw_publish>
 800e9e0:	3800      	subs	r0, #0
 800e9e2:	bf18      	it	ne
 800e9e4:	2001      	movne	r0, #1
 800e9e6:	bd70      	pop	{r4, r5, r6, pc}
 800e9e8:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800e9ec:	bd70      	pop	{r4, r5, r6, pc}
 800e9ee:	200b      	movs	r0, #11
 800e9f0:	bd70      	pop	{r4, r5, r6, pc}
 800e9f2:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800e9f6:	4770      	bx	lr

0800e9f8 <rcl_publisher_is_valid>:
 800e9f8:	b1a0      	cbz	r0, 800ea24 <rcl_publisher_is_valid+0x2c>
 800e9fa:	6803      	ldr	r3, [r0, #0]
 800e9fc:	b510      	push	{r4, lr}
 800e9fe:	4604      	mov	r4, r0
 800ea00:	b173      	cbz	r3, 800ea20 <rcl_publisher_is_valid+0x28>
 800ea02:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800ea06:	b15a      	cbz	r2, 800ea20 <rcl_publisher_is_valid+0x28>
 800ea08:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 800ea0c:	f006 fbd8 	bl	80151c0 <rcl_context_is_valid>
 800ea10:	b130      	cbz	r0, 800ea20 <rcl_publisher_is_valid+0x28>
 800ea12:	6823      	ldr	r3, [r4, #0]
 800ea14:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800ea18:	3800      	subs	r0, #0
 800ea1a:	bf18      	it	ne
 800ea1c:	2001      	movne	r0, #1
 800ea1e:	bd10      	pop	{r4, pc}
 800ea20:	2000      	movs	r0, #0
 800ea22:	bd10      	pop	{r4, pc}
 800ea24:	2000      	movs	r0, #0
 800ea26:	4770      	bx	lr

0800ea28 <rcl_publisher_is_valid_except_context>:
 800ea28:	b130      	cbz	r0, 800ea38 <rcl_publisher_is_valid_except_context+0x10>
 800ea2a:	6800      	ldr	r0, [r0, #0]
 800ea2c:	b120      	cbz	r0, 800ea38 <rcl_publisher_is_valid_except_context+0x10>
 800ea2e:	f8d0 00c4 	ldr.w	r0, [r0, #196]	@ 0xc4
 800ea32:	3800      	subs	r0, #0
 800ea34:	bf18      	it	ne
 800ea36:	2001      	movne	r0, #1
 800ea38:	4770      	bx	lr
 800ea3a:	bf00      	nop

0800ea3c <_rclc_check_for_new_data>:
 800ea3c:	2800      	cmp	r0, #0
 800ea3e:	d046      	beq.n	800eace <_rclc_check_for_new_data+0x92>
 800ea40:	b510      	push	{r4, lr}
 800ea42:	7802      	ldrb	r2, [r0, #0]
 800ea44:	b084      	sub	sp, #16
 800ea46:	4603      	mov	r3, r0
 800ea48:	2a0a      	cmp	r2, #10
 800ea4a:	d842      	bhi.n	800ead2 <_rclc_check_for_new_data+0x96>
 800ea4c:	e8df f002 	tbb	[pc, r2]
 800ea50:	14181212 	.word	0x14181212
 800ea54:	06060614 	.word	0x06060614
 800ea58:	2e1a      	.short	0x2e1a
 800ea5a:	16          	.byte	0x16
 800ea5b:	00          	.byte	0x00
 800ea5c:	6a0a      	ldr	r2, [r1, #32]
 800ea5e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800ea60:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800ea64:	2000      	movs	r0, #0
 800ea66:	1a12      	subs	r2, r2, r0
 800ea68:	bf18      	it	ne
 800ea6a:	2201      	movne	r2, #1
 800ea6c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 800ea70:	b004      	add	sp, #16
 800ea72:	bd10      	pop	{r4, pc}
 800ea74:	680a      	ldr	r2, [r1, #0]
 800ea76:	e7f2      	b.n	800ea5e <_rclc_check_for_new_data+0x22>
 800ea78:	698a      	ldr	r2, [r1, #24]
 800ea7a:	e7f0      	b.n	800ea5e <_rclc_check_for_new_data+0x22>
 800ea7c:	688a      	ldr	r2, [r1, #8]
 800ea7e:	e7ee      	b.n	800ea5e <_rclc_check_for_new_data+0x22>
 800ea80:	690a      	ldr	r2, [r1, #16]
 800ea82:	e7ec      	b.n	800ea5e <_rclc_check_for_new_data+0x22>
 800ea84:	685c      	ldr	r4, [r3, #4]
 800ea86:	4608      	mov	r0, r1
 800ea88:	f104 0244 	add.w	r2, r4, #68	@ 0x44
 800ea8c:	f104 0143 	add.w	r1, r4, #67	@ 0x43
 800ea90:	f104 0342 	add.w	r3, r4, #66	@ 0x42
 800ea94:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800ea98:	9300      	str	r3, [sp, #0]
 800ea9a:	f104 0240 	add.w	r2, r4, #64	@ 0x40
 800ea9e:	f104 0341 	add.w	r3, r4, #65	@ 0x41
 800eaa2:	f104 0110 	add.w	r1, r4, #16
 800eaa6:	f008 fc17 	bl	80172d8 <rcl_action_client_wait_set_get_entities_ready>
 800eaaa:	e7e1      	b.n	800ea70 <_rclc_check_for_new_data+0x34>
 800eaac:	685c      	ldr	r4, [r3, #4]
 800eaae:	f104 0223 	add.w	r2, r4, #35	@ 0x23
 800eab2:	f104 0322 	add.w	r3, r4, #34	@ 0x22
 800eab6:	e9cd 3200 	strd	r3, r2, [sp]
 800eaba:	4608      	mov	r0, r1
 800eabc:	f104 0321 	add.w	r3, r4, #33	@ 0x21
 800eac0:	f104 0220 	add.w	r2, r4, #32
 800eac4:	f104 0110 	add.w	r1, r4, #16
 800eac8:	f008 fe1e 	bl	8017708 <rcl_action_server_wait_set_get_entities_ready>
 800eacc:	e7d0      	b.n	800ea70 <_rclc_check_for_new_data+0x34>
 800eace:	200b      	movs	r0, #11
 800ead0:	4770      	bx	lr
 800ead2:	2001      	movs	r0, #1
 800ead4:	e7cc      	b.n	800ea70 <_rclc_check_for_new_data+0x34>
 800ead6:	bf00      	nop

0800ead8 <_rclc_take_new_data>:
 800ead8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eada:	b09b      	sub	sp, #108	@ 0x6c
 800eadc:	2800      	cmp	r0, #0
 800eade:	f000 8088 	beq.w	800ebf2 <_rclc_take_new_data+0x11a>
 800eae2:	7803      	ldrb	r3, [r0, #0]
 800eae4:	4604      	mov	r4, r0
 800eae6:	2b0a      	cmp	r3, #10
 800eae8:	f200 8167 	bhi.w	800edba <_rclc_take_new_data+0x2e2>
 800eaec:	e8df f003 	tbb	[pc, r3]
 800eaf0:	44152d2d 	.word	0x44152d2d
 800eaf4:	19191944 	.word	0x19191944
 800eaf8:	065a      	.short	0x065a
 800eafa:	15          	.byte	0x15
 800eafb:	00          	.byte	0x00
 800eafc:	6840      	ldr	r0, [r0, #4]
 800eafe:	f890 3020 	ldrb.w	r3, [r0, #32]
 800eb02:	2b00      	cmp	r3, #0
 800eb04:	f040 80b2 	bne.w	800ec6c <_rclc_take_new_data+0x194>
 800eb08:	f890 3022 	ldrb.w	r3, [r0, #34]	@ 0x22
 800eb0c:	2b00      	cmp	r3, #0
 800eb0e:	f040 80e4 	bne.w	800ecda <_rclc_take_new_data+0x202>
 800eb12:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 800eb16:	2b00      	cmp	r3, #0
 800eb18:	d16f      	bne.n	800ebfa <_rclc_take_new_data+0x122>
 800eb1a:	2500      	movs	r5, #0
 800eb1c:	4628      	mov	r0, r5
 800eb1e:	b01b      	add	sp, #108	@ 0x6c
 800eb20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eb22:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800eb24:	6a0b      	ldr	r3, [r1, #32]
 800eb26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eb2a:	2b00      	cmp	r3, #0
 800eb2c:	d0f5      	beq.n	800eb1a <_rclc_take_new_data+0x42>
 800eb2e:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800eb32:	f104 0110 	add.w	r1, r4, #16
 800eb36:	f006 ff0b 	bl	8015950 <rcl_take_request>
 800eb3a:	4605      	mov	r5, r0
 800eb3c:	2800      	cmp	r0, #0
 800eb3e:	d0ec      	beq.n	800eb1a <_rclc_take_new_data+0x42>
 800eb40:	f240 2359 	movw	r3, #601	@ 0x259
 800eb44:	4298      	cmp	r0, r3
 800eb46:	d013      	beq.n	800eb70 <_rclc_take_new_data+0x98>
 800eb48:	e029      	b.n	800eb9e <_rclc_take_new_data+0xc6>
 800eb4a:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800eb4c:	680b      	ldr	r3, [r1, #0]
 800eb4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eb52:	2b00      	cmp	r3, #0
 800eb54:	d0e1      	beq.n	800eb1a <_rclc_take_new_data+0x42>
 800eb56:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 800eb5a:	2300      	movs	r3, #0
 800eb5c:	aa0a      	add	r2, sp, #40	@ 0x28
 800eb5e:	f007 f835 	bl	8015bcc <rcl_take>
 800eb62:	4605      	mov	r5, r0
 800eb64:	2800      	cmp	r0, #0
 800eb66:	d0d9      	beq.n	800eb1c <_rclc_take_new_data+0x44>
 800eb68:	f240 1391 	movw	r3, #401	@ 0x191
 800eb6c:	4298      	cmp	r0, r3
 800eb6e:	d116      	bne.n	800eb9e <_rclc_take_new_data+0xc6>
 800eb70:	2300      	movs	r3, #0
 800eb72:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
 800eb76:	e7d1      	b.n	800eb1c <_rclc_take_new_data+0x44>
 800eb78:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800eb7a:	698b      	ldr	r3, [r1, #24]
 800eb7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eb80:	2b00      	cmp	r3, #0
 800eb82:	d0ca      	beq.n	800eb1a <_rclc_take_new_data+0x42>
 800eb84:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800eb88:	f104 0110 	add.w	r1, r4, #16
 800eb8c:	f006 faa8 	bl	80150e0 <rcl_take_response>
 800eb90:	4605      	mov	r5, r0
 800eb92:	2800      	cmp	r0, #0
 800eb94:	d0c1      	beq.n	800eb1a <_rclc_take_new_data+0x42>
 800eb96:	f240 13f5 	movw	r3, #501	@ 0x1f5
 800eb9a:	4298      	cmp	r0, r3
 800eb9c:	d0be      	beq.n	800eb1c <_rclc_take_new_data+0x44>
 800eb9e:	f000 ff0b 	bl	800f9b8 <rcutils_reset_error>
 800eba2:	e7bb      	b.n	800eb1c <_rclc_take_new_data+0x44>
 800eba4:	6840      	ldr	r0, [r0, #4]
 800eba6:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800ebaa:	2b00      	cmp	r3, #0
 800ebac:	d17d      	bne.n	800ecaa <_rclc_take_new_data+0x1d2>
 800ebae:	69c3      	ldr	r3, [r0, #28]
 800ebb0:	b11b      	cbz	r3, 800ebba <_rclc_take_new_data+0xe2>
 800ebb2:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800ebb6:	2b00      	cmp	r3, #0
 800ebb8:	d144      	bne.n	800ec44 <_rclc_take_new_data+0x16c>
 800ebba:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800ebbe:	2b00      	cmp	r3, #0
 800ebc0:	f040 80ac 	bne.w	800ed1c <_rclc_take_new_data+0x244>
 800ebc4:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800ebc8:	2b00      	cmp	r3, #0
 800ebca:	d0a6      	beq.n	800eb1a <_rclc_take_new_data+0x42>
 800ebcc:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 800ebce:	a90a      	add	r1, sp, #40	@ 0x28
 800ebd0:	3010      	adds	r0, #16
 800ebd2:	f008 fa59 	bl	8017088 <rcl_action_take_result_response>
 800ebd6:	4605      	mov	r5, r0
 800ebd8:	2800      	cmp	r0, #0
 800ebda:	d1e0      	bne.n	800eb9e <_rclc_take_new_data+0xc6>
 800ebdc:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800ebe0:	6860      	ldr	r0, [r4, #4]
 800ebe2:	f008 feb5 	bl	8017950 <rclc_action_find_handle_by_result_request_sequence_number>
 800ebe6:	2800      	cmp	r0, #0
 800ebe8:	d098      	beq.n	800eb1c <_rclc_take_new_data+0x44>
 800ebea:	2301      	movs	r3, #1
 800ebec:	f880 3023 	strb.w	r3, [r0, #35]	@ 0x23
 800ebf0:	e794      	b.n	800eb1c <_rclc_take_new_data+0x44>
 800ebf2:	250b      	movs	r5, #11
 800ebf4:	4628      	mov	r0, r5
 800ebf6:	b01b      	add	sp, #108	@ 0x6c
 800ebf8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ebfa:	ae04      	add	r6, sp, #16
 800ebfc:	aa0a      	add	r2, sp, #40	@ 0x28
 800ebfe:	3010      	adds	r0, #16
 800ec00:	4631      	mov	r1, r6
 800ec02:	f008 fcb5 	bl	8017570 <rcl_action_take_cancel_request>
 800ec06:	4605      	mov	r5, r0
 800ec08:	2800      	cmp	r0, #0
 800ec0a:	d1c8      	bne.n	800eb9e <_rclc_take_new_data+0xc6>
 800ec0c:	6860      	ldr	r0, [r4, #4]
 800ec0e:	a90a      	add	r1, sp, #40	@ 0x28
 800ec10:	f008 fe5c 	bl	80178cc <rclc_action_find_goal_handle_by_uuid>
 800ec14:	4607      	mov	r7, r0
 800ec16:	2800      	cmp	r0, #0
 800ec18:	f000 80bb 	beq.w	800ed92 <_rclc_take_new_data+0x2ba>
 800ec1c:	f990 0008 	ldrsb.w	r0, [r0, #8]
 800ec20:	2101      	movs	r1, #1
 800ec22:	f008 fddd 	bl	80177e0 <rcl_action_transition_goal_state>
 800ec26:	2803      	cmp	r0, #3
 800ec28:	4684      	mov	ip, r0
 800ec2a:	f040 80a7 	bne.w	800ed7c <_rclc_take_new_data+0x2a4>
 800ec2e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800ec30:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 800ec34:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ec36:	e896 0003 	ldmia.w	r6, {r0, r1}
 800ec3a:	e884 0003 	stmia.w	r4, {r0, r1}
 800ec3e:	f887 c008 	strb.w	ip, [r7, #8]
 800ec42:	e76b      	b.n	800eb1c <_rclc_take_new_data+0x44>
 800ec44:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800ec46:	3010      	adds	r0, #16
 800ec48:	f008 fa9e 	bl	8017188 <rcl_action_take_feedback>
 800ec4c:	4605      	mov	r5, r0
 800ec4e:	2800      	cmp	r0, #0
 800ec50:	d1a5      	bne.n	800eb9e <_rclc_take_new_data+0xc6>
 800ec52:	6860      	ldr	r0, [r4, #4]
 800ec54:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800ec56:	f008 fe39 	bl	80178cc <rclc_action_find_goal_handle_by_uuid>
 800ec5a:	4603      	mov	r3, r0
 800ec5c:	2800      	cmp	r0, #0
 800ec5e:	f000 80a3 	beq.w	800eda8 <_rclc_take_new_data+0x2d0>
 800ec62:	2201      	movs	r2, #1
 800ec64:	6860      	ldr	r0, [r4, #4]
 800ec66:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 800ec6a:	e7a6      	b.n	800ebba <_rclc_take_new_data+0xe2>
 800ec6c:	f008 fe08 	bl	8017880 <rclc_action_take_goal_handle>
 800ec70:	4606      	mov	r6, r0
 800ec72:	6860      	ldr	r0, [r4, #4]
 800ec74:	2e00      	cmp	r6, #0
 800ec76:	f43f af47 	beq.w	800eb08 <_rclc_take_new_data+0x30>
 800ec7a:	6070      	str	r0, [r6, #4]
 800ec7c:	69f2      	ldr	r2, [r6, #28]
 800ec7e:	f106 0128 	add.w	r1, r6, #40	@ 0x28
 800ec82:	3010      	adds	r0, #16
 800ec84:	f008 fbbc 	bl	8017400 <rcl_action_take_goal_request>
 800ec88:	4605      	mov	r5, r0
 800ec8a:	2800      	cmp	r0, #0
 800ec8c:	f040 808e 	bne.w	800edac <_rclc_take_new_data+0x2d4>
 800ec90:	69f7      	ldr	r7, [r6, #28]
 800ec92:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800ec94:	7235      	strb	r5, [r6, #8]
 800ec96:	f8c6 0009 	str.w	r0, [r6, #9]
 800ec9a:	f8c6 100d 	str.w	r1, [r6, #13]
 800ec9e:	6860      	ldr	r0, [r4, #4]
 800eca0:	f8c6 2011 	str.w	r2, [r6, #17]
 800eca4:	f8c6 3015 	str.w	r3, [r6, #21]
 800eca8:	e72e      	b.n	800eb08 <_rclc_take_new_data+0x30>
 800ecaa:	aa04      	add	r2, sp, #16
 800ecac:	a90a      	add	r1, sp, #40	@ 0x28
 800ecae:	3010      	adds	r0, #16
 800ecb0:	f008 f972 	bl	8016f98 <rcl_action_take_goal_response>
 800ecb4:	4605      	mov	r5, r0
 800ecb6:	2800      	cmp	r0, #0
 800ecb8:	f47f af71 	bne.w	800eb9e <_rclc_take_new_data+0xc6>
 800ecbc:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800ecc0:	6860      	ldr	r0, [r4, #4]
 800ecc2:	f008 fe33 	bl	801792c <rclc_action_find_handle_by_goal_request_sequence_number>
 800ecc6:	b130      	cbz	r0, 800ecd6 <_rclc_take_new_data+0x1fe>
 800ecc8:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800eccc:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 800ecd0:	2201      	movs	r2, #1
 800ecd2:	f880 2020 	strb.w	r2, [r0, #32]
 800ecd6:	6860      	ldr	r0, [r4, #4]
 800ecd8:	e769      	b.n	800ebae <_rclc_take_new_data+0xd6>
 800ecda:	aa04      	add	r2, sp, #16
 800ecdc:	3010      	adds	r0, #16
 800ecde:	a90a      	add	r1, sp, #40	@ 0x28
 800ece0:	f008 fc06 	bl	80174f0 <rcl_action_take_result_request>
 800ece4:	4605      	mov	r5, r0
 800ece6:	2800      	cmp	r0, #0
 800ece8:	f47f af59 	bne.w	800eb9e <_rclc_take_new_data+0xc6>
 800ecec:	6860      	ldr	r0, [r4, #4]
 800ecee:	a904      	add	r1, sp, #16
 800ecf0:	f008 fdec 	bl	80178cc <rclc_action_find_goal_handle_by_uuid>
 800ecf4:	4607      	mov	r7, r0
 800ecf6:	b160      	cbz	r0, 800ed12 <_rclc_take_new_data+0x23a>
 800ecf8:	ad0a      	add	r5, sp, #40	@ 0x28
 800ecfa:	f100 0640 	add.w	r6, r0, #64	@ 0x40
 800ecfe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ed00:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800ed02:	e895 0003 	ldmia.w	r5, {r0, r1}
 800ed06:	f04f 0c02 	mov.w	ip, #2
 800ed0a:	e886 0003 	stmia.w	r6, {r0, r1}
 800ed0e:	f887 c008 	strb.w	ip, [r7, #8]
 800ed12:	6860      	ldr	r0, [r4, #4]
 800ed14:	2300      	movs	r3, #0
 800ed16:	f880 3022 	strb.w	r3, [r0, #34]	@ 0x22
 800ed1a:	e6fa      	b.n	800eb12 <_rclc_take_new_data+0x3a>
 800ed1c:	f100 0230 	add.w	r2, r0, #48	@ 0x30
 800ed20:	a90a      	add	r1, sp, #40	@ 0x28
 800ed22:	3010      	adds	r0, #16
 800ed24:	f008 f9f0 	bl	8017108 <rcl_action_take_cancel_response>
 800ed28:	4605      	mov	r5, r0
 800ed2a:	2800      	cmp	r0, #0
 800ed2c:	f47f af37 	bne.w	800eb9e <_rclc_take_new_data+0xc6>
 800ed30:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800ed34:	6860      	ldr	r0, [r4, #4]
 800ed36:	f008 fe1d 	bl	8017974 <rclc_action_find_handle_by_cancel_request_sequence_number>
 800ed3a:	4606      	mov	r6, r0
 800ed3c:	6860      	ldr	r0, [r4, #4]
 800ed3e:	2e00      	cmp	r6, #0
 800ed40:	f43f af40 	beq.w	800ebc4 <_rclc_take_new_data+0xec>
 800ed44:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800ed46:	2701      	movs	r7, #1
 800ed48:	84b7      	strh	r7, [r6, #36]	@ 0x24
 800ed4a:	2b00      	cmp	r3, #0
 800ed4c:	f43f af3a 	beq.w	800ebc4 <_rclc_take_new_data+0xec>
 800ed50:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800ed52:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 800ed56:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800ed5a:	f008 fdb7 	bl	80178cc <rclc_action_find_goal_handle_by_uuid>
 800ed5e:	b138      	cbz	r0, 800ed70 <_rclc_take_new_data+0x298>
 800ed60:	6860      	ldr	r0, [r4, #4]
 800ed62:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800ed64:	f886 7025 	strb.w	r7, [r6, #37]	@ 0x25
 800ed68:	3501      	adds	r5, #1
 800ed6a:	42ab      	cmp	r3, r5
 800ed6c:	d8f0      	bhi.n	800ed50 <_rclc_take_new_data+0x278>
 800ed6e:	e729      	b.n	800ebc4 <_rclc_take_new_data+0xec>
 800ed70:	6860      	ldr	r0, [r4, #4]
 800ed72:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800ed74:	3501      	adds	r5, #1
 800ed76:	42ab      	cmp	r3, r5
 800ed78:	d8ea      	bhi.n	800ed50 <_rclc_take_new_data+0x278>
 800ed7a:	e723      	b.n	800ebc4 <_rclc_take_new_data+0xec>
 800ed7c:	ab06      	add	r3, sp, #24
 800ed7e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ed80:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800ed84:	2103      	movs	r1, #3
 800ed86:	e896 000c 	ldmia.w	r6, {r2, r3}
 800ed8a:	6860      	ldr	r0, [r4, #4]
 800ed8c:	f008 fe68 	bl	8017a60 <rclc_action_server_goal_cancel_reject>
 800ed90:	e6c4      	b.n	800eb1c <_rclc_take_new_data+0x44>
 800ed92:	ab06      	add	r3, sp, #24
 800ed94:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ed96:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800ed9a:	2102      	movs	r1, #2
 800ed9c:	e896 000c 	ldmia.w	r6, {r2, r3}
 800eda0:	6860      	ldr	r0, [r4, #4]
 800eda2:	f008 fe5d 	bl	8017a60 <rclc_action_server_goal_cancel_reject>
 800eda6:	e6b9      	b.n	800eb1c <_rclc_take_new_data+0x44>
 800eda8:	6860      	ldr	r0, [r4, #4]
 800edaa:	e706      	b.n	800ebba <_rclc_take_new_data+0xe2>
 800edac:	6860      	ldr	r0, [r4, #4]
 800edae:	4631      	mov	r1, r6
 800edb0:	f008 fd76 	bl	80178a0 <rclc_action_remove_used_goal_handle>
 800edb4:	f000 fe00 	bl	800f9b8 <rcutils_reset_error>
 800edb8:	e6b0      	b.n	800eb1c <_rclc_take_new_data+0x44>
 800edba:	2501      	movs	r5, #1
 800edbc:	e6ae      	b.n	800eb1c <_rclc_take_new_data+0x44>
 800edbe:	bf00      	nop

0800edc0 <_rclc_execute.part.0>:
 800edc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800edc2:	7803      	ldrb	r3, [r0, #0]
 800edc4:	b087      	sub	sp, #28
 800edc6:	4604      	mov	r4, r0
 800edc8:	2b0a      	cmp	r3, #10
 800edca:	f200 8136 	bhi.w	800f03a <_rclc_execute.part.0+0x27a>
 800edce:	e8df f003 	tbb	[pc, r3]
 800edd2:	435e      	.short	0x435e
 800edd4:	06a1664f 	.word	0x06a1664f
 800edd8:	6c1e0606 	.word	0x6c1e0606
 800eddc:	59          	.byte	0x59
 800eddd:	00          	.byte	0x00
 800edde:	2b06      	cmp	r3, #6
 800ede0:	f000 8122 	beq.w	800f028 <_rclc_execute.part.0+0x268>
 800ede4:	2b07      	cmp	r3, #7
 800ede6:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800ede8:	f040 8118 	bne.w	800f01c <_rclc_execute.part.0+0x25c>
 800edec:	e9d0 120a 	ldrd	r1, r2, [r0, #40]	@ 0x28
 800edf0:	6880      	ldr	r0, [r0, #8]
 800edf2:	4798      	blx	r3
 800edf4:	f104 0110 	add.w	r1, r4, #16
 800edf8:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800edfa:	6860      	ldr	r0, [r4, #4]
 800edfc:	f006 fde8 	bl	80159d0 <rcl_send_response>
 800ee00:	2800      	cmp	r0, #0
 800ee02:	d033      	beq.n	800ee6c <_rclc_execute.part.0+0xac>
 800ee04:	9005      	str	r0, [sp, #20]
 800ee06:	f000 fdd7 	bl	800f9b8 <rcutils_reset_error>
 800ee0a:	9805      	ldr	r0, [sp, #20]
 800ee0c:	e02e      	b.n	800ee6c <_rclc_execute.part.0+0xac>
 800ee0e:	6840      	ldr	r0, [r0, #4]
 800ee10:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800ee14:	2b00      	cmp	r3, #0
 800ee16:	f000 8086 	beq.w	800ef26 <_rclc_execute.part.0+0x166>
 800ee1a:	2600      	movs	r6, #0
 800ee1c:	2701      	movs	r7, #1
 800ee1e:	e004      	b.n	800ee2a <_rclc_execute.part.0+0x6a>
 800ee20:	f008 fd08 	bl	8017834 <rclc_action_send_result_request>
 800ee24:	b998      	cbnz	r0, 800ee4e <_rclc_execute.part.0+0x8e>
 800ee26:	722f      	strb	r7, [r5, #8]
 800ee28:	6860      	ldr	r0, [r4, #4]
 800ee2a:	f008 fdb5 	bl	8017998 <rclc_action_find_first_handle_with_goal_response>
 800ee2e:	4605      	mov	r5, r0
 800ee30:	2800      	cmp	r0, #0
 800ee32:	d077      	beq.n	800ef24 <_rclc_execute.part.0+0x164>
 800ee34:	6863      	ldr	r3, [r4, #4]
 800ee36:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800ee38:	699b      	ldr	r3, [r3, #24]
 800ee3a:	f895 1021 	ldrb.w	r1, [r5, #33]	@ 0x21
 800ee3e:	f885 6020 	strb.w	r6, [r5, #32]
 800ee42:	4798      	blx	r3
 800ee44:	f895 3021 	ldrb.w	r3, [r5, #33]	@ 0x21
 800ee48:	4628      	mov	r0, r5
 800ee4a:	2b00      	cmp	r3, #0
 800ee4c:	d1e8      	bne.n	800ee20 <_rclc_execute.part.0+0x60>
 800ee4e:	6860      	ldr	r0, [r4, #4]
 800ee50:	4629      	mov	r1, r5
 800ee52:	f008 fd25 	bl	80178a0 <rclc_action_remove_used_goal_handle>
 800ee56:	e7e7      	b.n	800ee28 <_rclc_execute.part.0+0x68>
 800ee58:	f890 5039 	ldrb.w	r5, [r0, #57]	@ 0x39
 800ee5c:	e9d0 130b 	ldrd	r1, r3, [r0, #44]	@ 0x2c
 800ee60:	2d00      	cmp	r5, #0
 800ee62:	f000 80c9 	beq.w	800eff8 <_rclc_execute.part.0+0x238>
 800ee66:	6880      	ldr	r0, [r0, #8]
 800ee68:	4798      	blx	r3
 800ee6a:	2000      	movs	r0, #0
 800ee6c:	b007      	add	sp, #28
 800ee6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ee70:	6840      	ldr	r0, [r0, #4]
 800ee72:	f007 f9bb 	bl	80161ec <rcl_timer_call>
 800ee76:	f240 3321 	movw	r3, #801	@ 0x321
 800ee7a:	4298      	cmp	r0, r3
 800ee7c:	d004      	beq.n	800ee88 <_rclc_execute.part.0+0xc8>
 800ee7e:	2800      	cmp	r0, #0
 800ee80:	d0f4      	beq.n	800ee6c <_rclc_execute.part.0+0xac>
 800ee82:	e7bf      	b.n	800ee04 <_rclc_execute.part.0+0x44>
 800ee84:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800ee86:	4798      	blx	r3
 800ee88:	2000      	movs	r0, #0
 800ee8a:	b007      	add	sp, #28
 800ee8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ee8e:	f890 5039 	ldrb.w	r5, [r0, #57]	@ 0x39
 800ee92:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800ee94:	b925      	cbnz	r5, 800eea0 <_rclc_execute.part.0+0xe0>
 800ee96:	4628      	mov	r0, r5
 800ee98:	4798      	blx	r3
 800ee9a:	4628      	mov	r0, r5
 800ee9c:	e7e6      	b.n	800ee6c <_rclc_execute.part.0+0xac>
 800ee9e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800eea0:	68a0      	ldr	r0, [r4, #8]
 800eea2:	4798      	blx	r3
 800eea4:	2000      	movs	r0, #0
 800eea6:	b007      	add	sp, #28
 800eea8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eeaa:	6840      	ldr	r0, [r0, #4]
 800eeac:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 800eeb0:	bb3b      	cbnz	r3, 800ef02 <_rclc_execute.part.0+0x142>
 800eeb2:	f890 3020 	ldrb.w	r3, [r0, #32]
 800eeb6:	2b00      	cmp	r3, #0
 800eeb8:	d07b      	beq.n	800efb2 <_rclc_execute.part.0+0x1f2>
 800eeba:	f640 0634 	movw	r6, #2100	@ 0x834
 800eebe:	2701      	movs	r7, #1
 800eec0:	e007      	b.n	800eed2 <_rclc_execute.part.0+0x112>
 800eec2:	4628      	mov	r0, r5
 800eec4:	f008 fd80 	bl	80179c8 <rclc_action_server_response_goal_request>
 800eec8:	6860      	ldr	r0, [r4, #4]
 800eeca:	4629      	mov	r1, r5
 800eecc:	f008 fce8 	bl	80178a0 <rclc_action_remove_used_goal_handle>
 800eed0:	6860      	ldr	r0, [r4, #4]
 800eed2:	2100      	movs	r1, #0
 800eed4:	f008 fd12 	bl	80178fc <rclc_action_find_first_handle_by_status>
 800eed8:	4605      	mov	r5, r0
 800eeda:	2800      	cmp	r0, #0
 800eedc:	d066      	beq.n	800efac <_rclc_execute.part.0+0x1ec>
 800eede:	6863      	ldr	r3, [r4, #4]
 800eee0:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800eee2:	699b      	ldr	r3, [r3, #24]
 800eee4:	4798      	blx	r3
 800eee6:	42b0      	cmp	r0, r6
 800eee8:	f04f 0100 	mov.w	r1, #0
 800eeec:	d1e9      	bne.n	800eec2 <_rclc_execute.part.0+0x102>
 800eeee:	2101      	movs	r1, #1
 800eef0:	4628      	mov	r0, r5
 800eef2:	f008 fd69 	bl	80179c8 <rclc_action_server_response_goal_request>
 800eef6:	722f      	strb	r7, [r5, #8]
 800eef8:	e7ea      	b.n	800eed0 <_rclc_execute.part.0+0x110>
 800eefa:	6848      	ldr	r0, [r1, #4]
 800eefc:	f008 fcd0 	bl	80178a0 <rclc_action_remove_used_goal_handle>
 800ef00:	6860      	ldr	r0, [r4, #4]
 800ef02:	f008 fd07 	bl	8017914 <rclc_action_find_first_terminated_handle>
 800ef06:	4601      	mov	r1, r0
 800ef08:	2800      	cmp	r0, #0
 800ef0a:	d1f6      	bne.n	800eefa <_rclc_execute.part.0+0x13a>
 800ef0c:	6860      	ldr	r0, [r4, #4]
 800ef0e:	f880 1024 	strb.w	r1, [r0, #36]	@ 0x24
 800ef12:	e7ce      	b.n	800eeb2 <_rclc_execute.part.0+0xf2>
 800ef14:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800ef16:	6880      	ldr	r0, [r0, #8]
 800ef18:	f104 0110 	add.w	r1, r4, #16
 800ef1c:	4798      	blx	r3
 800ef1e:	2000      	movs	r0, #0
 800ef20:	b007      	add	sp, #28
 800ef22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ef24:	6860      	ldr	r0, [r4, #4]
 800ef26:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800ef2a:	b18b      	cbz	r3, 800ef50 <_rclc_execute.part.0+0x190>
 800ef2c:	68c5      	ldr	r5, [r0, #12]
 800ef2e:	b32d      	cbz	r5, 800ef7c <_rclc_execute.part.0+0x1bc>
 800ef30:	2600      	movs	r6, #0
 800ef32:	f895 3022 	ldrb.w	r3, [r5, #34]	@ 0x22
 800ef36:	b143      	cbz	r3, 800ef4a <_rclc_execute.part.0+0x18a>
 800ef38:	69c3      	ldr	r3, [r0, #28]
 800ef3a:	f885 6022 	strb.w	r6, [r5, #34]	@ 0x22
 800ef3e:	b123      	cbz	r3, 800ef4a <_rclc_execute.part.0+0x18a>
 800ef40:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800ef42:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800ef44:	4628      	mov	r0, r5
 800ef46:	4798      	blx	r3
 800ef48:	6860      	ldr	r0, [r4, #4]
 800ef4a:	682d      	ldr	r5, [r5, #0]
 800ef4c:	2d00      	cmp	r5, #0
 800ef4e:	d1f0      	bne.n	800ef32 <_rclc_execute.part.0+0x172>
 800ef50:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800ef54:	b193      	cbz	r3, 800ef7c <_rclc_execute.part.0+0x1bc>
 800ef56:	68c5      	ldr	r5, [r0, #12]
 800ef58:	b185      	cbz	r5, 800ef7c <_rclc_execute.part.0+0x1bc>
 800ef5a:	2600      	movs	r6, #0
 800ef5c:	f895 3024 	ldrb.w	r3, [r5, #36]	@ 0x24
 800ef60:	b14b      	cbz	r3, 800ef76 <_rclc_execute.part.0+0x1b6>
 800ef62:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800ef64:	f885 6024 	strb.w	r6, [r5, #36]	@ 0x24
 800ef68:	b12b      	cbz	r3, 800ef76 <_rclc_execute.part.0+0x1b6>
 800ef6a:	4628      	mov	r0, r5
 800ef6c:	f895 1025 	ldrb.w	r1, [r5, #37]	@ 0x25
 800ef70:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800ef72:	4798      	blx	r3
 800ef74:	6860      	ldr	r0, [r4, #4]
 800ef76:	682d      	ldr	r5, [r5, #0]
 800ef78:	2d00      	cmp	r5, #0
 800ef7a:	d1ef      	bne.n	800ef5c <_rclc_execute.part.0+0x19c>
 800ef7c:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800ef80:	2b00      	cmp	r3, #0
 800ef82:	d081      	beq.n	800ee88 <_rclc_execute.part.0+0xc8>
 800ef84:	2700      	movs	r7, #0
 800ef86:	e00b      	b.n	800efa0 <_rclc_execute.part.0+0x1e0>
 800ef88:	6863      	ldr	r3, [r4, #4]
 800ef8a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800ef8c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800ef8e:	6a1e      	ldr	r6, [r3, #32]
 800ef90:	f885 7023 	strb.w	r7, [r5, #35]	@ 0x23
 800ef94:	47b0      	blx	r6
 800ef96:	6860      	ldr	r0, [r4, #4]
 800ef98:	4629      	mov	r1, r5
 800ef9a:	f008 fc81 	bl	80178a0 <rclc_action_remove_used_goal_handle>
 800ef9e:	6860      	ldr	r0, [r4, #4]
 800efa0:	f008 fd06 	bl	80179b0 <rclc_action_find_first_handle_with_result_response>
 800efa4:	4605      	mov	r5, r0
 800efa6:	2800      	cmp	r0, #0
 800efa8:	d1ee      	bne.n	800ef88 <_rclc_execute.part.0+0x1c8>
 800efaa:	e76d      	b.n	800ee88 <_rclc_execute.part.0+0xc8>
 800efac:	6860      	ldr	r0, [r4, #4]
 800efae:	f880 5020 	strb.w	r5, [r0, #32]
 800efb2:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 800efb6:	2b00      	cmp	r3, #0
 800efb8:	f43f af66 	beq.w	800ee88 <_rclc_execute.part.0+0xc8>
 800efbc:	68c5      	ldr	r5, [r0, #12]
 800efbe:	b1b5      	cbz	r5, 800efee <_rclc_execute.part.0+0x22e>
 800efc0:	2602      	movs	r6, #2
 800efc2:	e001      	b.n	800efc8 <_rclc_execute.part.0+0x208>
 800efc4:	682d      	ldr	r5, [r5, #0]
 800efc6:	b195      	cbz	r5, 800efee <_rclc_execute.part.0+0x22e>
 800efc8:	f995 3008 	ldrsb.w	r3, [r5, #8]
 800efcc:	2b03      	cmp	r3, #3
 800efce:	d1f9      	bne.n	800efc4 <_rclc_execute.part.0+0x204>
 800efd0:	69c3      	ldr	r3, [r0, #28]
 800efd2:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800efd4:	4628      	mov	r0, r5
 800efd6:	4798      	blx	r3
 800efd8:	4603      	mov	r3, r0
 800efda:	f105 0260 	add.w	r2, r5, #96	@ 0x60
 800efde:	4628      	mov	r0, r5
 800efe0:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 800efe4:	b163      	cbz	r3, 800f000 <_rclc_execute.part.0+0x240>
 800efe6:	f008 fd0f 	bl	8017a08 <rclc_action_server_goal_cancel_accept>
 800efea:	6860      	ldr	r0, [r4, #4]
 800efec:	e7ea      	b.n	800efc4 <_rclc_execute.part.0+0x204>
 800efee:	2300      	movs	r3, #0
 800eff0:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 800eff4:	4618      	mov	r0, r3
 800eff6:	e739      	b.n	800ee6c <_rclc_execute.part.0+0xac>
 800eff8:	4628      	mov	r0, r5
 800effa:	4798      	blx	r3
 800effc:	4628      	mov	r0, r5
 800effe:	e735      	b.n	800ee6c <_rclc_execute.part.0+0xac>
 800f000:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 800f002:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800f006:	f105 0758 	add.w	r7, r5, #88	@ 0x58
 800f00a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f00e:	6860      	ldr	r0, [r4, #4]
 800f010:	2101      	movs	r1, #1
 800f012:	f008 fd25 	bl	8017a60 <rclc_action_server_goal_cancel_reject>
 800f016:	722e      	strb	r6, [r5, #8]
 800f018:	6860      	ldr	r0, [r4, #4]
 800f01a:	e7d3      	b.n	800efc4 <_rclc_execute.part.0+0x204>
 800f01c:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800f01e:	6880      	ldr	r0, [r0, #8]
 800f020:	4798      	blx	r3
 800f022:	f104 0110 	add.w	r1, r4, #16
 800f026:	e6e7      	b.n	800edf8 <_rclc_execute.part.0+0x38>
 800f028:	f100 0110 	add.w	r1, r0, #16
 800f02c:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800f02e:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 800f030:	6880      	ldr	r0, [r0, #8]
 800f032:	9105      	str	r1, [sp, #20]
 800f034:	4798      	blx	r3
 800f036:	9905      	ldr	r1, [sp, #20]
 800f038:	e6de      	b.n	800edf8 <_rclc_execute.part.0+0x38>
 800f03a:	2001      	movs	r0, #1
 800f03c:	e716      	b.n	800ee6c <_rclc_execute.part.0+0xac>
 800f03e:	bf00      	nop

0800f040 <rclc_executor_trigger_any>:
 800f040:	2800      	cmp	r0, #0
 800f042:	d03f      	beq.n	800f0c4 <rclc_executor_trigger_any+0x84>
 800f044:	2900      	cmp	r1, #0
 800f046:	d03e      	beq.n	800f0c6 <rclc_executor_trigger_any+0x86>
 800f048:	4603      	mov	r3, r0
 800f04a:	f890 0038 	ldrb.w	r0, [r0, #56]	@ 0x38
 800f04e:	2200      	movs	r2, #0
 800f050:	2800      	cmp	r0, #0
 800f052:	d037      	beq.n	800f0c4 <rclc_executor_trigger_any+0x84>
 800f054:	b430      	push	{r4, r5}
 800f056:	f893 c000 	ldrb.w	ip, [r3]
 800f05a:	f1bc 0f08 	cmp.w	ip, #8
 800f05e:	d11e      	bne.n	800f09e <rclc_executor_trigger_any+0x5e>
 800f060:	685c      	ldr	r4, [r3, #4]
 800f062:	6c25      	ldr	r5, [r4, #64]	@ 0x40
 800f064:	f035 457f 	bics.w	r5, r5, #4278190080	@ 0xff000000
 800f068:	d105      	bne.n	800f076 <rclc_executor_trigger_any+0x36>
 800f06a:	f894 0044 	ldrb.w	r0, [r4, #68]	@ 0x44
 800f06e:	b910      	cbnz	r0, 800f076 <rclc_executor_trigger_any+0x36>
 800f070:	f894 0043 	ldrb.w	r0, [r4, #67]	@ 0x43
 800f074:	b128      	cbz	r0, 800f082 <rclc_executor_trigger_any+0x42>
 800f076:	bc30      	pop	{r4, r5}
 800f078:	4770      	bx	lr
 800f07a:	f893 0039 	ldrb.w	r0, [r3, #57]	@ 0x39
 800f07e:	2800      	cmp	r0, #0
 800f080:	d1f9      	bne.n	800f076 <rclc_executor_trigger_any+0x36>
 800f082:	3201      	adds	r2, #1
 800f084:	4291      	cmp	r1, r2
 800f086:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 800f08a:	d018      	beq.n	800f0be <rclc_executor_trigger_any+0x7e>
 800f08c:	f893 0038 	ldrb.w	r0, [r3, #56]	@ 0x38
 800f090:	2800      	cmp	r0, #0
 800f092:	d0f0      	beq.n	800f076 <rclc_executor_trigger_any+0x36>
 800f094:	f893 c000 	ldrb.w	ip, [r3]
 800f098:	f1bc 0f08 	cmp.w	ip, #8
 800f09c:	d0e0      	beq.n	800f060 <rclc_executor_trigger_any+0x20>
 800f09e:	f1bc 0f09 	cmp.w	ip, #9
 800f0a2:	d1ea      	bne.n	800f07a <rclc_executor_trigger_any+0x3a>
 800f0a4:	685c      	ldr	r4, [r3, #4]
 800f0a6:	6a25      	ldr	r5, [r4, #32]
 800f0a8:	2d00      	cmp	r5, #0
 800f0aa:	d1e4      	bne.n	800f076 <rclc_executor_trigger_any+0x36>
 800f0ac:	f894 0024 	ldrb.w	r0, [r4, #36]	@ 0x24
 800f0b0:	2800      	cmp	r0, #0
 800f0b2:	d1e0      	bne.n	800f076 <rclc_executor_trigger_any+0x36>
 800f0b4:	3201      	adds	r2, #1
 800f0b6:	4291      	cmp	r1, r2
 800f0b8:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 800f0bc:	d1e6      	bne.n	800f08c <rclc_executor_trigger_any+0x4c>
 800f0be:	2000      	movs	r0, #0
 800f0c0:	bc30      	pop	{r4, r5}
 800f0c2:	4770      	bx	lr
 800f0c4:	4770      	bx	lr
 800f0c6:	4608      	mov	r0, r1
 800f0c8:	4770      	bx	lr
 800f0ca:	bf00      	nop

0800f0cc <rclc_executor_get_zero_initialized_executor>:
 800f0cc:	b510      	push	{r4, lr}
 800f0ce:	4903      	ldr	r1, [pc, #12]	@ (800f0dc <rclc_executor_get_zero_initialized_executor+0x10>)
 800f0d0:	4604      	mov	r4, r0
 800f0d2:	2288      	movs	r2, #136	@ 0x88
 800f0d4:	f00c fa0b 	bl	801b4ee <memcpy>
 800f0d8:	4620      	mov	r0, r4
 800f0da:	bd10      	pop	{r4, pc}
 800f0dc:	0801e5a0 	.word	0x0801e5a0

0800f0e0 <rclc_executor_init>:
 800f0e0:	2800      	cmp	r0, #0
 800f0e2:	d05f      	beq.n	800f1a4 <rclc_executor_init+0xc4>
 800f0e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f0e8:	460c      	mov	r4, r1
 800f0ea:	b0b0      	sub	sp, #192	@ 0xc0
 800f0ec:	2900      	cmp	r1, #0
 800f0ee:	d051      	beq.n	800f194 <rclc_executor_init+0xb4>
 800f0f0:	4605      	mov	r5, r0
 800f0f2:	4618      	mov	r0, r3
 800f0f4:	4616      	mov	r6, r2
 800f0f6:	461f      	mov	r7, r3
 800f0f8:	f000 fc38 	bl	800f96c <rcutils_allocator_is_valid>
 800f0fc:	2800      	cmp	r0, #0
 800f0fe:	d049      	beq.n	800f194 <rclc_executor_init+0xb4>
 800f100:	2e00      	cmp	r6, #0
 800f102:	d047      	beq.n	800f194 <rclc_executor_init+0xb4>
 800f104:	492c      	ldr	r1, [pc, #176]	@ (800f1b8 <rclc_executor_init+0xd8>)
 800f106:	2288      	movs	r2, #136	@ 0x88
 800f108:	a80e      	add	r0, sp, #56	@ 0x38
 800f10a:	f00c f9f0 	bl	801b4ee <memcpy>
 800f10e:	a90e      	add	r1, sp, #56	@ 0x38
 800f110:	2288      	movs	r2, #136	@ 0x88
 800f112:	4628      	mov	r0, r5
 800f114:	f00c f9eb 	bl	801b4ee <memcpy>
 800f118:	602c      	str	r4, [r5, #0]
 800f11a:	4668      	mov	r0, sp
 800f11c:	60ae      	str	r6, [r5, #8]
 800f11e:	466c      	mov	r4, sp
 800f120:	f007 f96c 	bl	80163fc <rcl_get_zero_initialized_wait_set>
 800f124:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f126:	f105 0c14 	add.w	ip, r5, #20
 800f12a:	f8d7 8000 	ldr.w	r8, [r7]
 800f12e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f132:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f134:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f138:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f13a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f13e:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 800f1b0 <rclc_executor_init+0xd0>
 800f142:	6823      	ldr	r3, [r4, #0]
 800f144:	f8cc 3000 	str.w	r3, [ip]
 800f148:	6939      	ldr	r1, [r7, #16]
 800f14a:	612f      	str	r7, [r5, #16]
 800f14c:	ed85 7b1a 	vstr	d7, [r5, #104]	@ 0x68
 800f150:	01b0      	lsls	r0, r6, #6
 800f152:	47c0      	blx	r8
 800f154:	6068      	str	r0, [r5, #4]
 800f156:	b338      	cbz	r0, 800f1a8 <rclc_executor_init+0xc8>
 800f158:	2400      	movs	r4, #0
 800f15a:	e000      	b.n	800f15e <rclc_executor_init+0x7e>
 800f15c:	6868      	ldr	r0, [r5, #4]
 800f15e:	eb00 1084 	add.w	r0, r0, r4, lsl #6
 800f162:	4631      	mov	r1, r6
 800f164:	3401      	adds	r4, #1
 800f166:	f000 fa9f 	bl	800f6a8 <rclc_executor_handle_init>
 800f16a:	42a6      	cmp	r6, r4
 800f16c:	d1f6      	bne.n	800f15c <rclc_executor_init+0x7c>
 800f16e:	f105 0048 	add.w	r0, r5, #72	@ 0x48
 800f172:	f000 fa8d 	bl	800f690 <rclc_executor_handle_counters_zero_init>
 800f176:	4a11      	ldr	r2, [pc, #68]	@ (800f1bc <rclc_executor_init+0xdc>)
 800f178:	686b      	ldr	r3, [r5, #4]
 800f17a:	2000      	movs	r0, #0
 800f17c:	e9c5 201e 	strd	r2, r0, [r5, #120]	@ 0x78
 800f180:	b163      	cbz	r3, 800f19c <rclc_executor_init+0xbc>
 800f182:	692b      	ldr	r3, [r5, #16]
 800f184:	b153      	cbz	r3, 800f19c <rclc_executor_init+0xbc>
 800f186:	68ab      	ldr	r3, [r5, #8]
 800f188:	b143      	cbz	r3, 800f19c <rclc_executor_init+0xbc>
 800f18a:	f885 0080 	strb.w	r0, [r5, #128]	@ 0x80
 800f18e:	b030      	add	sp, #192	@ 0xc0
 800f190:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f194:	200b      	movs	r0, #11
 800f196:	b030      	add	sp, #192	@ 0xc0
 800f198:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f19c:	4618      	mov	r0, r3
 800f19e:	b030      	add	sp, #192	@ 0xc0
 800f1a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f1a4:	200b      	movs	r0, #11
 800f1a6:	4770      	bx	lr
 800f1a8:	200a      	movs	r0, #10
 800f1aa:	e7f4      	b.n	800f196 <rclc_executor_init+0xb6>
 800f1ac:	f3af 8000 	nop.w
 800f1b0:	3b9aca00 	.word	0x3b9aca00
 800f1b4:	00000000 	.word	0x00000000
 800f1b8:	0801e5a0 	.word	0x0801e5a0
 800f1bc:	0800f041 	.word	0x0800f041

0800f1c0 <rclc_executor_add_subscription>:
 800f1c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f1c2:	f89d e018 	ldrb.w	lr, [sp, #24]
 800f1c6:	b338      	cbz	r0, 800f218 <rclc_executor_add_subscription+0x58>
 800f1c8:	b331      	cbz	r1, 800f218 <rclc_executor_add_subscription+0x58>
 800f1ca:	b32a      	cbz	r2, 800f218 <rclc_executor_add_subscription+0x58>
 800f1cc:	b323      	cbz	r3, 800f218 <rclc_executor_add_subscription+0x58>
 800f1ce:	4604      	mov	r4, r0
 800f1d0:	e9d0 5002 	ldrd	r5, r0, [r0, #8]
 800f1d4:	42a8      	cmp	r0, r5
 800f1d6:	d301      	bcc.n	800f1dc <rclc_executor_add_subscription+0x1c>
 800f1d8:	2001      	movs	r0, #1
 800f1da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f1dc:	6866      	ldr	r6, [r4, #4]
 800f1de:	0187      	lsls	r7, r0, #6
 800f1e0:	eb06 1c80 	add.w	ip, r6, r0, lsl #6
 800f1e4:	2500      	movs	r5, #0
 800f1e6:	55f5      	strb	r5, [r6, r7]
 800f1e8:	3001      	adds	r0, #1
 800f1ea:	f8cc 3030 	str.w	r3, [ip, #48]	@ 0x30
 800f1ee:	f8cc 502c 	str.w	r5, [ip, #44]	@ 0x2c
 800f1f2:	2301      	movs	r3, #1
 800f1f4:	f104 0514 	add.w	r5, r4, #20
 800f1f8:	e9cc 1201 	strd	r1, r2, [ip, #4]
 800f1fc:	f88c e001 	strb.w	lr, [ip, #1]
 800f200:	f8ac 3038 	strh.w	r3, [ip, #56]	@ 0x38
 800f204:	60e0      	str	r0, [r4, #12]
 800f206:	4628      	mov	r0, r5
 800f208:	f007 f90c 	bl	8016424 <rcl_wait_set_is_valid>
 800f20c:	b930      	cbnz	r0, 800f21c <rclc_executor_add_subscription+0x5c>
 800f20e:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 800f210:	3301      	adds	r3, #1
 800f212:	2000      	movs	r0, #0
 800f214:	64a3      	str	r3, [r4, #72]	@ 0x48
 800f216:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f218:	200b      	movs	r0, #11
 800f21a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f21c:	4628      	mov	r0, r5
 800f21e:	f007 f907 	bl	8016430 <rcl_wait_set_fini>
 800f222:	2800      	cmp	r0, #0
 800f224:	d0f3      	beq.n	800f20e <rclc_executor_add_subscription+0x4e>
 800f226:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f228 <rclc_executor_add_timer>:
 800f228:	b300      	cbz	r0, 800f26c <rclc_executor_add_timer+0x44>
 800f22a:	b1f9      	cbz	r1, 800f26c <rclc_executor_add_timer+0x44>
 800f22c:	b538      	push	{r3, r4, r5, lr}
 800f22e:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
 800f232:	4293      	cmp	r3, r2
 800f234:	4604      	mov	r4, r0
 800f236:	d301      	bcc.n	800f23c <rclc_executor_add_timer+0x14>
 800f238:	2001      	movs	r0, #1
 800f23a:	bd38      	pop	{r3, r4, r5, pc}
 800f23c:	6840      	ldr	r0, [r0, #4]
 800f23e:	eb00 1283 	add.w	r2, r0, r3, lsl #6
 800f242:	019d      	lsls	r5, r3, #6
 800f244:	6051      	str	r1, [r2, #4]
 800f246:	2102      	movs	r1, #2
 800f248:	5341      	strh	r1, [r0, r5]
 800f24a:	3301      	adds	r3, #1
 800f24c:	2000      	movs	r0, #0
 800f24e:	2101      	movs	r1, #1
 800f250:	f104 0514 	add.w	r5, r4, #20
 800f254:	62d0      	str	r0, [r2, #44]	@ 0x2c
 800f256:	8711      	strh	r1, [r2, #56]	@ 0x38
 800f258:	4628      	mov	r0, r5
 800f25a:	60e3      	str	r3, [r4, #12]
 800f25c:	f007 f8e2 	bl	8016424 <rcl_wait_set_is_valid>
 800f260:	b930      	cbnz	r0, 800f270 <rclc_executor_add_timer+0x48>
 800f262:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800f264:	3301      	adds	r3, #1
 800f266:	2000      	movs	r0, #0
 800f268:	64e3      	str	r3, [r4, #76]	@ 0x4c
 800f26a:	bd38      	pop	{r3, r4, r5, pc}
 800f26c:	200b      	movs	r0, #11
 800f26e:	4770      	bx	lr
 800f270:	4628      	mov	r0, r5
 800f272:	f007 f8dd 	bl	8016430 <rcl_wait_set_fini>
 800f276:	2800      	cmp	r0, #0
 800f278:	d0f3      	beq.n	800f262 <rclc_executor_add_timer+0x3a>
 800f27a:	bd38      	pop	{r3, r4, r5, pc}

0800f27c <rclc_executor_prepare>:
 800f27c:	2800      	cmp	r0, #0
 800f27e:	d044      	beq.n	800f30a <rclc_executor_prepare+0x8e>
 800f280:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f282:	f100 0514 	add.w	r5, r0, #20
 800f286:	b09b      	sub	sp, #108	@ 0x6c
 800f288:	4604      	mov	r4, r0
 800f28a:	4628      	mov	r0, r5
 800f28c:	f007 f8ca 	bl	8016424 <rcl_wait_set_is_valid>
 800f290:	b110      	cbz	r0, 800f298 <rclc_executor_prepare+0x1c>
 800f292:	2000      	movs	r0, #0
 800f294:	b01b      	add	sp, #108	@ 0x6c
 800f296:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f298:	4628      	mov	r0, r5
 800f29a:	f007 f8c9 	bl	8016430 <rcl_wait_set_fini>
 800f29e:	2800      	cmp	r0, #0
 800f2a0:	d130      	bne.n	800f304 <rclc_executor_prepare+0x88>
 800f2a2:	a80c      	add	r0, sp, #48	@ 0x30
 800f2a4:	f007 f8aa 	bl	80163fc <rcl_get_zero_initialized_wait_set>
 800f2a8:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 800f2ac:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f2b0:	46ae      	mov	lr, r5
 800f2b2:	6927      	ldr	r7, [r4, #16]
 800f2b4:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800f2b8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f2bc:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800f2c0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f2c4:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800f2c8:	f8dc 3000 	ldr.w	r3, [ip]
 800f2cc:	f8ce 3000 	str.w	r3, [lr]
 800f2d0:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800f2d2:	ae04      	add	r6, sp, #16
 800f2d4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800f2d6:	683b      	ldr	r3, [r7, #0]
 800f2d8:	6822      	ldr	r2, [r4, #0]
 800f2da:	6033      	str	r3, [r6, #0]
 800f2dc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f2de:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 800f2e0:	e9cd 3202 	strd	r3, r2, [sp, #8]
 800f2e4:	e9d4 3213 	ldrd	r3, r2, [r4, #76]	@ 0x4c
 800f2e8:	e9cd 2100 	strd	r2, r1, [sp]
 800f2ec:	4628      	mov	r0, r5
 800f2ee:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 800f2f0:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800f2f2:	f007 fb9b 	bl	8016a2c <rcl_wait_set_init>
 800f2f6:	2800      	cmp	r0, #0
 800f2f8:	d0cc      	beq.n	800f294 <rclc_executor_prepare+0x18>
 800f2fa:	900b      	str	r0, [sp, #44]	@ 0x2c
 800f2fc:	f000 fb5c 	bl	800f9b8 <rcutils_reset_error>
 800f300:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800f302:	e7c7      	b.n	800f294 <rclc_executor_prepare+0x18>
 800f304:	f000 fb58 	bl	800f9b8 <rcutils_reset_error>
 800f308:	e7cb      	b.n	800f2a2 <rclc_executor_prepare+0x26>
 800f30a:	200b      	movs	r0, #11
 800f30c:	4770      	bx	lr
 800f30e:	bf00      	nop

0800f310 <rclc_executor_spin_some.part.0>:
 800f310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f314:	f100 0614 	add.w	r6, r0, #20
 800f318:	b083      	sub	sp, #12
 800f31a:	4691      	mov	r9, r2
 800f31c:	4698      	mov	r8, r3
 800f31e:	4605      	mov	r5, r0
 800f320:	f7ff ffac 	bl	800f27c <rclc_executor_prepare>
 800f324:	4630      	mov	r0, r6
 800f326:	f007 f94f 	bl	80165c8 <rcl_wait_set_clear>
 800f32a:	4607      	mov	r7, r0
 800f32c:	2800      	cmp	r0, #0
 800f32e:	f040 80ed 	bne.w	800f50c <rclc_executor_spin_some.part.0+0x1fc>
 800f332:	68ab      	ldr	r3, [r5, #8]
 800f334:	4604      	mov	r4, r0
 800f336:	b303      	cbz	r3, 800f37a <rclc_executor_spin_some.part.0+0x6a>
 800f338:	6869      	ldr	r1, [r5, #4]
 800f33a:	eb01 1c84 	add.w	ip, r1, r4, lsl #6
 800f33e:	01a2      	lsls	r2, r4, #6
 800f340:	f89c 3038 	ldrb.w	r3, [ip, #56]	@ 0x38
 800f344:	b1cb      	cbz	r3, 800f37a <rclc_executor_spin_some.part.0+0x6a>
 800f346:	5c8b      	ldrb	r3, [r1, r2]
 800f348:	2b0a      	cmp	r3, #10
 800f34a:	f200 80d8 	bhi.w	800f4fe <rclc_executor_spin_some.part.0+0x1ee>
 800f34e:	e8df f003 	tbb	[pc, r3]
 800f352:	9c9c      	.short	0x9c9c
 800f354:	068c8ca7 	.word	0x068c8ca7
 800f358:	bdc90606 	.word	0xbdc90606
 800f35c:	b2          	.byte	0xb2
 800f35d:	00          	.byte	0x00
 800f35e:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800f362:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800f366:	4630      	mov	r0, r6
 800f368:	f007 fc76 	bl	8016c58 <rcl_wait_set_add_service>
 800f36c:	2800      	cmp	r0, #0
 800f36e:	f040 8086 	bne.w	800f47e <rclc_executor_spin_some.part.0+0x16e>
 800f372:	68ab      	ldr	r3, [r5, #8]
 800f374:	3401      	adds	r4, #1
 800f376:	429c      	cmp	r4, r3
 800f378:	d3de      	bcc.n	800f338 <rclc_executor_spin_some.part.0+0x28>
 800f37a:	4643      	mov	r3, r8
 800f37c:	464a      	mov	r2, r9
 800f37e:	4630      	mov	r0, r6
 800f380:	f007 fc96 	bl	8016cb0 <rcl_wait>
 800f384:	f895 3080 	ldrb.w	r3, [r5, #128]	@ 0x80
 800f388:	2b00      	cmp	r3, #0
 800f38a:	f000 80c7 	beq.w	800f51c <rclc_executor_spin_some.part.0+0x20c>
 800f38e:	2b01      	cmp	r3, #1
 800f390:	f040 80b5 	bne.w	800f4fe <rclc_executor_spin_some.part.0+0x1ee>
 800f394:	68ab      	ldr	r3, [r5, #8]
 800f396:	2b00      	cmp	r3, #0
 800f398:	f000 8159 	beq.w	800f64e <rclc_executor_spin_some.part.0+0x33e>
 800f39c:	2400      	movs	r4, #0
 800f39e:	46a0      	mov	r8, r4
 800f3a0:	f240 1991 	movw	r9, #401	@ 0x191
 800f3a4:	e00a      	b.n	800f3bc <rclc_executor_spin_some.part.0+0xac>
 800f3a6:	f7ff fb49 	bl	800ea3c <_rclc_check_for_new_data>
 800f3aa:	4604      	mov	r4, r0
 800f3ac:	b110      	cbz	r0, 800f3b4 <rclc_executor_spin_some.part.0+0xa4>
 800f3ae:	4548      	cmp	r0, r9
 800f3b0:	f040 80b2 	bne.w	800f518 <rclc_executor_spin_some.part.0+0x208>
 800f3b4:	68ab      	ldr	r3, [r5, #8]
 800f3b6:	4598      	cmp	r8, r3
 800f3b8:	f080 8126 	bcs.w	800f608 <rclc_executor_spin_some.part.0+0x2f8>
 800f3bc:	686a      	ldr	r2, [r5, #4]
 800f3be:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 800f3c2:	4631      	mov	r1, r6
 800f3c4:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 800f3c8:	f108 0801 	add.w	r8, r8, #1
 800f3cc:	f1bc 0f00 	cmp.w	ip, #0
 800f3d0:	d1e9      	bne.n	800f3a6 <rclc_executor_spin_some.part.0+0x96>
 800f3d2:	4619      	mov	r1, r3
 800f3d4:	4610      	mov	r0, r2
 800f3d6:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 800f3da:	4798      	blx	r3
 800f3dc:	2800      	cmp	r0, #0
 800f3de:	f000 809b 	beq.w	800f518 <rclc_executor_spin_some.part.0+0x208>
 800f3e2:	68ab      	ldr	r3, [r5, #8]
 800f3e4:	2b00      	cmp	r3, #0
 800f3e6:	f000 8097 	beq.w	800f518 <rclc_executor_spin_some.part.0+0x208>
 800f3ea:	f04f 0800 	mov.w	r8, #0
 800f3ee:	f240 1991 	movw	r9, #401	@ 0x191
 800f3f2:	e009      	b.n	800f408 <rclc_executor_spin_some.part.0+0xf8>
 800f3f4:	f7ff fb70 	bl	800ead8 <_rclc_take_new_data>
 800f3f8:	4604      	mov	r4, r0
 800f3fa:	b110      	cbz	r0, 800f402 <rclc_executor_spin_some.part.0+0xf2>
 800f3fc:	4548      	cmp	r0, r9
 800f3fe:	f040 808b 	bne.w	800f518 <rclc_executor_spin_some.part.0+0x208>
 800f402:	68ab      	ldr	r3, [r5, #8]
 800f404:	4598      	cmp	r8, r3
 800f406:	d209      	bcs.n	800f41c <rclc_executor_spin_some.part.0+0x10c>
 800f408:	6868      	ldr	r0, [r5, #4]
 800f40a:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 800f40e:	4631      	mov	r1, r6
 800f410:	f890 2038 	ldrb.w	r2, [r0, #56]	@ 0x38
 800f414:	f108 0801 	add.w	r8, r8, #1
 800f418:	2a00      	cmp	r2, #0
 800f41a:	d1eb      	bne.n	800f3f4 <rclc_executor_spin_some.part.0+0xe4>
 800f41c:	2600      	movs	r6, #0
 800f41e:	b97b      	cbnz	r3, 800f440 <rclc_executor_spin_some.part.0+0x130>
 800f420:	e07a      	b.n	800f518 <rclc_executor_spin_some.part.0+0x208>
 800f422:	f812 200c 	ldrb.w	r2, [r2, ip]
 800f426:	2a08      	cmp	r2, #8
 800f428:	f000 80fd 	beq.w	800f626 <rclc_executor_spin_some.part.0+0x316>
 800f42c:	2a09      	cmp	r2, #9
 800f42e:	f000 80ef 	beq.w	800f610 <rclc_executor_spin_some.part.0+0x300>
 800f432:	f890 2039 	ldrb.w	r2, [r0, #57]	@ 0x39
 800f436:	b98a      	cbnz	r2, 800f45c <rclc_executor_spin_some.part.0+0x14c>
 800f438:	3601      	adds	r6, #1
 800f43a:	429e      	cmp	r6, r3
 800f43c:	d262      	bcs.n	800f504 <rclc_executor_spin_some.part.0+0x1f4>
 800f43e:	2400      	movs	r4, #0
 800f440:	686a      	ldr	r2, [r5, #4]
 800f442:	eb02 1086 	add.w	r0, r2, r6, lsl #6
 800f446:	ea4f 1c86 	mov.w	ip, r6, lsl #6
 800f44a:	f890 1038 	ldrb.w	r1, [r0, #56]	@ 0x38
 800f44e:	2900      	cmp	r1, #0
 800f450:	d062      	beq.n	800f518 <rclc_executor_spin_some.part.0+0x208>
 800f452:	7841      	ldrb	r1, [r0, #1]
 800f454:	2900      	cmp	r1, #0
 800f456:	d0e4      	beq.n	800f422 <rclc_executor_spin_some.part.0+0x112>
 800f458:	2901      	cmp	r1, #1
 800f45a:	d1ed      	bne.n	800f438 <rclc_executor_spin_some.part.0+0x128>
 800f45c:	f7ff fcb0 	bl	800edc0 <_rclc_execute.part.0>
 800f460:	2800      	cmp	r0, #0
 800f462:	f040 80b6 	bne.w	800f5d2 <rclc_executor_spin_some.part.0+0x2c2>
 800f466:	68ab      	ldr	r3, [r5, #8]
 800f468:	e7e6      	b.n	800f438 <rclc_executor_spin_some.part.0+0x128>
 800f46a:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800f46e:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800f472:	4630      	mov	r0, r6
 800f474:	f007 fbc4 	bl	8016c00 <rcl_wait_set_add_client>
 800f478:	2800      	cmp	r0, #0
 800f47a:	f43f af7a 	beq.w	800f372 <rclc_executor_spin_some.part.0+0x62>
 800f47e:	9001      	str	r0, [sp, #4]
 800f480:	f000 fa9a 	bl	800f9b8 <rcutils_reset_error>
 800f484:	9801      	ldr	r0, [sp, #4]
 800f486:	4607      	mov	r7, r0
 800f488:	e03c      	b.n	800f504 <rclc_executor_spin_some.part.0+0x1f4>
 800f48a:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800f48e:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800f492:	4630      	mov	r0, r6
 800f494:	f007 f86c 	bl	8016570 <rcl_wait_set_add_subscription>
 800f498:	2800      	cmp	r0, #0
 800f49a:	f43f af6a 	beq.w	800f372 <rclc_executor_spin_some.part.0+0x62>
 800f49e:	e7ee      	b.n	800f47e <rclc_executor_spin_some.part.0+0x16e>
 800f4a0:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800f4a4:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800f4a8:	4630      	mov	r0, r6
 800f4aa:	f007 fb79 	bl	8016ba0 <rcl_wait_set_add_timer>
 800f4ae:	2800      	cmp	r0, #0
 800f4b0:	f43f af5f 	beq.w	800f372 <rclc_executor_spin_some.part.0+0x62>
 800f4b4:	e7e3      	b.n	800f47e <rclc_executor_spin_some.part.0+0x16e>
 800f4b6:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800f4ba:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800f4be:	4630      	mov	r0, r6
 800f4c0:	f007 fb42 	bl	8016b48 <rcl_wait_set_add_guard_condition>
 800f4c4:	2800      	cmp	r0, #0
 800f4c6:	f43f af54 	beq.w	800f372 <rclc_executor_spin_some.part.0+0x62>
 800f4ca:	e7d8      	b.n	800f47e <rclc_executor_spin_some.part.0+0x16e>
 800f4cc:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800f4d0:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800f4d4:	3110      	adds	r1, #16
 800f4d6:	4630      	mov	r0, r6
 800f4d8:	f008 f8c2 	bl	8017660 <rcl_action_wait_set_add_action_server>
 800f4dc:	2800      	cmp	r0, #0
 800f4de:	f43f af48 	beq.w	800f372 <rclc_executor_spin_some.part.0+0x62>
 800f4e2:	e7cc      	b.n	800f47e <rclc_executor_spin_some.part.0+0x16e>
 800f4e4:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800f4e8:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800f4ec:	3110      	adds	r1, #16
 800f4ee:	2300      	movs	r3, #0
 800f4f0:	4630      	mov	r0, r6
 800f4f2:	f007 fe8d 	bl	8017210 <rcl_action_wait_set_add_action_client>
 800f4f6:	2800      	cmp	r0, #0
 800f4f8:	f43f af3b 	beq.w	800f372 <rclc_executor_spin_some.part.0+0x62>
 800f4fc:	e7bf      	b.n	800f47e <rclc_executor_spin_some.part.0+0x16e>
 800f4fe:	f000 fa5b 	bl	800f9b8 <rcutils_reset_error>
 800f502:	2701      	movs	r7, #1
 800f504:	4638      	mov	r0, r7
 800f506:	b003      	add	sp, #12
 800f508:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f50c:	f000 fa54 	bl	800f9b8 <rcutils_reset_error>
 800f510:	4638      	mov	r0, r7
 800f512:	b003      	add	sp, #12
 800f514:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f518:	4627      	mov	r7, r4
 800f51a:	e7f3      	b.n	800f504 <rclc_executor_spin_some.part.0+0x1f4>
 800f51c:	68ab      	ldr	r3, [r5, #8]
 800f51e:	2b00      	cmp	r3, #0
 800f520:	f000 8092 	beq.w	800f648 <rclc_executor_spin_some.part.0+0x338>
 800f524:	2400      	movs	r4, #0
 800f526:	46a0      	mov	r8, r4
 800f528:	f240 1991 	movw	r9, #401	@ 0x191
 800f52c:	e008      	b.n	800f540 <rclc_executor_spin_some.part.0+0x230>
 800f52e:	f7ff fa85 	bl	800ea3c <_rclc_check_for_new_data>
 800f532:	4604      	mov	r4, r0
 800f534:	b108      	cbz	r0, 800f53a <rclc_executor_spin_some.part.0+0x22a>
 800f536:	4548      	cmp	r0, r9
 800f538:	d1ee      	bne.n	800f518 <rclc_executor_spin_some.part.0+0x208>
 800f53a:	68ab      	ldr	r3, [r5, #8]
 800f53c:	4598      	cmp	r8, r3
 800f53e:	d265      	bcs.n	800f60c <rclc_executor_spin_some.part.0+0x2fc>
 800f540:	686a      	ldr	r2, [r5, #4]
 800f542:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 800f546:	4631      	mov	r1, r6
 800f548:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 800f54c:	f108 0801 	add.w	r8, r8, #1
 800f550:	f1bc 0f00 	cmp.w	ip, #0
 800f554:	d1eb      	bne.n	800f52e <rclc_executor_spin_some.part.0+0x21e>
 800f556:	4619      	mov	r1, r3
 800f558:	4610      	mov	r0, r2
 800f55a:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 800f55e:	4798      	blx	r3
 800f560:	2800      	cmp	r0, #0
 800f562:	d0d9      	beq.n	800f518 <rclc_executor_spin_some.part.0+0x208>
 800f564:	68ab      	ldr	r3, [r5, #8]
 800f566:	2b00      	cmp	r3, #0
 800f568:	d0d6      	beq.n	800f518 <rclc_executor_spin_some.part.0+0x208>
 800f56a:	f04f 0800 	mov.w	r8, #0
 800f56e:	f240 1991 	movw	r9, #401	@ 0x191
 800f572:	f240 2a59 	movw	sl, #601	@ 0x259
 800f576:	e00e      	b.n	800f596 <rclc_executor_spin_some.part.0+0x286>
 800f578:	f813 300b 	ldrb.w	r3, [r3, fp]
 800f57c:	2b08      	cmp	r3, #8
 800f57e:	d033      	beq.n	800f5e8 <rclc_executor_spin_some.part.0+0x2d8>
 800f580:	2b09      	cmp	r3, #9
 800f582:	d028      	beq.n	800f5d6 <rclc_executor_spin_some.part.0+0x2c6>
 800f584:	f890 3039 	ldrb.w	r3, [r0, #57]	@ 0x39
 800f588:	b9fb      	cbnz	r3, 800f5ca <rclc_executor_spin_some.part.0+0x2ba>
 800f58a:	68ab      	ldr	r3, [r5, #8]
 800f58c:	f108 0801 	add.w	r8, r8, #1
 800f590:	4598      	cmp	r8, r3
 800f592:	d2b7      	bcs.n	800f504 <rclc_executor_spin_some.part.0+0x1f4>
 800f594:	2400      	movs	r4, #0
 800f596:	6868      	ldr	r0, [r5, #4]
 800f598:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 800f59c:	ea4f 1b88 	mov.w	fp, r8, lsl #6
 800f5a0:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 800f5a4:	2b00      	cmp	r3, #0
 800f5a6:	d0b7      	beq.n	800f518 <rclc_executor_spin_some.part.0+0x208>
 800f5a8:	4631      	mov	r1, r6
 800f5aa:	f7ff fa95 	bl	800ead8 <_rclc_take_new_data>
 800f5ae:	b118      	cbz	r0, 800f5b8 <rclc_executor_spin_some.part.0+0x2a8>
 800f5b0:	4548      	cmp	r0, r9
 800f5b2:	d001      	beq.n	800f5b8 <rclc_executor_spin_some.part.0+0x2a8>
 800f5b4:	4550      	cmp	r0, sl
 800f5b6:	d10c      	bne.n	800f5d2 <rclc_executor_spin_some.part.0+0x2c2>
 800f5b8:	686b      	ldr	r3, [r5, #4]
 800f5ba:	eb13 000b 	adds.w	r0, r3, fp
 800f5be:	d021      	beq.n	800f604 <rclc_executor_spin_some.part.0+0x2f4>
 800f5c0:	7842      	ldrb	r2, [r0, #1]
 800f5c2:	2a00      	cmp	r2, #0
 800f5c4:	d0d8      	beq.n	800f578 <rclc_executor_spin_some.part.0+0x268>
 800f5c6:	2a01      	cmp	r2, #1
 800f5c8:	d1df      	bne.n	800f58a <rclc_executor_spin_some.part.0+0x27a>
 800f5ca:	f7ff fbf9 	bl	800edc0 <_rclc_execute.part.0>
 800f5ce:	2800      	cmp	r0, #0
 800f5d0:	d0db      	beq.n	800f58a <rclc_executor_spin_some.part.0+0x27a>
 800f5d2:	4607      	mov	r7, r0
 800f5d4:	e796      	b.n	800f504 <rclc_executor_spin_some.part.0+0x1f4>
 800f5d6:	6843      	ldr	r3, [r0, #4]
 800f5d8:	6a1a      	ldr	r2, [r3, #32]
 800f5da:	2a00      	cmp	r2, #0
 800f5dc:	d1f5      	bne.n	800f5ca <rclc_executor_spin_some.part.0+0x2ba>
 800f5de:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800f5e2:	2b00      	cmp	r3, #0
 800f5e4:	d0d1      	beq.n	800f58a <rclc_executor_spin_some.part.0+0x27a>
 800f5e6:	e7f0      	b.n	800f5ca <rclc_executor_spin_some.part.0+0x2ba>
 800f5e8:	6843      	ldr	r3, [r0, #4]
 800f5ea:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800f5ec:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800f5f0:	d1eb      	bne.n	800f5ca <rclc_executor_spin_some.part.0+0x2ba>
 800f5f2:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800f5f6:	2a00      	cmp	r2, #0
 800f5f8:	d1e7      	bne.n	800f5ca <rclc_executor_spin_some.part.0+0x2ba>
 800f5fa:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800f5fe:	2b00      	cmp	r3, #0
 800f600:	d0c3      	beq.n	800f58a <rclc_executor_spin_some.part.0+0x27a>
 800f602:	e7e2      	b.n	800f5ca <rclc_executor_spin_some.part.0+0x2ba>
 800f604:	270b      	movs	r7, #11
 800f606:	e77d      	b.n	800f504 <rclc_executor_spin_some.part.0+0x1f4>
 800f608:	686a      	ldr	r2, [r5, #4]
 800f60a:	e6e2      	b.n	800f3d2 <rclc_executor_spin_some.part.0+0xc2>
 800f60c:	686a      	ldr	r2, [r5, #4]
 800f60e:	e7a2      	b.n	800f556 <rclc_executor_spin_some.part.0+0x246>
 800f610:	6842      	ldr	r2, [r0, #4]
 800f612:	6a11      	ldr	r1, [r2, #32]
 800f614:	2900      	cmp	r1, #0
 800f616:	f47f af21 	bne.w	800f45c <rclc_executor_spin_some.part.0+0x14c>
 800f61a:	f892 2024 	ldrb.w	r2, [r2, #36]	@ 0x24
 800f61e:	2a00      	cmp	r2, #0
 800f620:	f43f af0a 	beq.w	800f438 <rclc_executor_spin_some.part.0+0x128>
 800f624:	e71a      	b.n	800f45c <rclc_executor_spin_some.part.0+0x14c>
 800f626:	6842      	ldr	r2, [r0, #4]
 800f628:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 800f62a:	f031 417f 	bics.w	r1, r1, #4278190080	@ 0xff000000
 800f62e:	f47f af15 	bne.w	800f45c <rclc_executor_spin_some.part.0+0x14c>
 800f632:	f892 1044 	ldrb.w	r1, [r2, #68]	@ 0x44
 800f636:	2900      	cmp	r1, #0
 800f638:	f47f af10 	bne.w	800f45c <rclc_executor_spin_some.part.0+0x14c>
 800f63c:	f892 2043 	ldrb.w	r2, [r2, #67]	@ 0x43
 800f640:	2a00      	cmp	r2, #0
 800f642:	f43f aef9 	beq.w	800f438 <rclc_executor_spin_some.part.0+0x128>
 800f646:	e709      	b.n	800f45c <rclc_executor_spin_some.part.0+0x14c>
 800f648:	686a      	ldr	r2, [r5, #4]
 800f64a:	461c      	mov	r4, r3
 800f64c:	e783      	b.n	800f556 <rclc_executor_spin_some.part.0+0x246>
 800f64e:	686a      	ldr	r2, [r5, #4]
 800f650:	461c      	mov	r4, r3
 800f652:	e6be      	b.n	800f3d2 <rclc_executor_spin_some.part.0+0xc2>

0800f654 <rclc_executor_spin>:
 800f654:	b1d0      	cbz	r0, 800f68c <rclc_executor_spin+0x38>
 800f656:	b510      	push	{r4, lr}
 800f658:	4604      	mov	r4, r0
 800f65a:	b082      	sub	sp, #8
 800f65c:	e9d4 231a 	ldrd	r2, r3, [r4, #104]	@ 0x68
 800f660:	6820      	ldr	r0, [r4, #0]
 800f662:	e9cd 2300 	strd	r2, r3, [sp]
 800f666:	f005 fdab 	bl	80151c0 <rcl_context_is_valid>
 800f66a:	4601      	mov	r1, r0
 800f66c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f670:	4620      	mov	r0, r4
 800f672:	b131      	cbz	r1, 800f682 <rclc_executor_spin+0x2e>
 800f674:	f7ff fe4c 	bl	800f310 <rclc_executor_spin_some.part.0>
 800f678:	f030 0302 	bics.w	r3, r0, #2
 800f67c:	d0ee      	beq.n	800f65c <rclc_executor_spin+0x8>
 800f67e:	b002      	add	sp, #8
 800f680:	bd10      	pop	{r4, pc}
 800f682:	f000 f999 	bl	800f9b8 <rcutils_reset_error>
 800f686:	2001      	movs	r0, #1
 800f688:	b002      	add	sp, #8
 800f68a:	bd10      	pop	{r4, pc}
 800f68c:	200b      	movs	r0, #11
 800f68e:	4770      	bx	lr

0800f690 <rclc_executor_handle_counters_zero_init>:
 800f690:	b130      	cbz	r0, 800f6a0 <rclc_executor_handle_counters_zero_init+0x10>
 800f692:	b508      	push	{r3, lr}
 800f694:	2220      	movs	r2, #32
 800f696:	2100      	movs	r1, #0
 800f698:	f00b fe60 	bl	801b35c <memset>
 800f69c:	2000      	movs	r0, #0
 800f69e:	bd08      	pop	{r3, pc}
 800f6a0:	200b      	movs	r0, #11
 800f6a2:	4770      	bx	lr
 800f6a4:	0000      	movs	r0, r0
	...

0800f6a8 <rclc_executor_handle_init>:
 800f6a8:	b168      	cbz	r0, 800f6c6 <rclc_executor_handle_init+0x1e>
 800f6aa:	ed9f 7b09 	vldr	d7, [pc, #36]	@ 800f6d0 <rclc_executor_handle_init+0x28>
 800f6ae:	2300      	movs	r3, #0
 800f6b0:	220b      	movs	r2, #11
 800f6b2:	ed80 7b0a 	vstr	d7, [r0, #40]	@ 0x28
 800f6b6:	e9c0 3301 	strd	r3, r3, [r0, #4]
 800f6ba:	e9c0 310c 	strd	r3, r1, [r0, #48]	@ 0x30
 800f6be:	8002      	strh	r2, [r0, #0]
 800f6c0:	8703      	strh	r3, [r0, #56]	@ 0x38
 800f6c2:	4618      	mov	r0, r3
 800f6c4:	4770      	bx	lr
 800f6c6:	200b      	movs	r0, #11
 800f6c8:	4770      	bx	lr
 800f6ca:	bf00      	nop
 800f6cc:	f3af 8000 	nop.w
	...

0800f6d8 <rclc_support_init_with_options>:
 800f6d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f6dc:	b083      	sub	sp, #12
 800f6de:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800f6e0:	b340      	cbz	r0, 800f734 <rclc_support_init_with_options+0x5c>
 800f6e2:	461d      	mov	r5, r3
 800f6e4:	b333      	cbz	r3, 800f734 <rclc_support_init_with_options+0x5c>
 800f6e6:	b32e      	cbz	r6, 800f734 <rclc_support_init_with_options+0x5c>
 800f6e8:	46e9      	mov	r9, sp
 800f6ea:	4604      	mov	r4, r0
 800f6ec:	4648      	mov	r0, r9
 800f6ee:	460f      	mov	r7, r1
 800f6f0:	4690      	mov	r8, r2
 800f6f2:	f005 fd5b 	bl	80151ac <rcl_get_zero_initialized_context>
 800f6f6:	e899 0003 	ldmia.w	r9, {r0, r1}
 800f6fa:	462a      	mov	r2, r5
 800f6fc:	e884 0003 	stmia.w	r4, {r0, r1}
 800f700:	4623      	mov	r3, r4
 800f702:	4641      	mov	r1, r8
 800f704:	4638      	mov	r0, r7
 800f706:	f005 fdc1 	bl	801528c <rcl_init>
 800f70a:	4605      	mov	r5, r0
 800f70c:	b960      	cbnz	r0, 800f728 <rclc_support_init_with_options+0x50>
 800f70e:	60a6      	str	r6, [r4, #8]
 800f710:	4632      	mov	r2, r6
 800f712:	f104 010c 	add.w	r1, r4, #12
 800f716:	2003      	movs	r0, #3
 800f718:	f006 fad8 	bl	8015ccc <rcl_clock_init>
 800f71c:	4605      	mov	r5, r0
 800f71e:	b918      	cbnz	r0, 800f728 <rclc_support_init_with_options+0x50>
 800f720:	4628      	mov	r0, r5
 800f722:	b003      	add	sp, #12
 800f724:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f728:	f000 f946 	bl	800f9b8 <rcutils_reset_error>
 800f72c:	4628      	mov	r0, r5
 800f72e:	b003      	add	sp, #12
 800f730:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f734:	250b      	movs	r5, #11
 800f736:	4628      	mov	r0, r5
 800f738:	b003      	add	sp, #12
 800f73a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f73e:	bf00      	nop

0800f740 <rclc_node_init_default>:
 800f740:	b3b8      	cbz	r0, 800f7b2 <rclc_node_init_default+0x72>
 800f742:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f746:	460d      	mov	r5, r1
 800f748:	b0a1      	sub	sp, #132	@ 0x84
 800f74a:	b329      	cbz	r1, 800f798 <rclc_node_init_default+0x58>
 800f74c:	4616      	mov	r6, r2
 800f74e:	b31a      	cbz	r2, 800f798 <rclc_node_init_default+0x58>
 800f750:	461f      	mov	r7, r3
 800f752:	b30b      	cbz	r3, 800f798 <rclc_node_init_default+0x58>
 800f754:	f10d 0810 	add.w	r8, sp, #16
 800f758:	4604      	mov	r4, r0
 800f75a:	4640      	mov	r0, r8
 800f75c:	f005 fea6 	bl	80154ac <rcl_get_zero_initialized_node>
 800f760:	e898 0003 	ldmia.w	r8, {r0, r1}
 800f764:	f10d 0918 	add.w	r9, sp, #24
 800f768:	e884 0003 	stmia.w	r4, {r0, r1}
 800f76c:	4648      	mov	r0, r9
 800f76e:	f006 f815 	bl	801579c <rcl_node_get_default_options>
 800f772:	4640      	mov	r0, r8
 800f774:	f005 fe9a 	bl	80154ac <rcl_get_zero_initialized_node>
 800f778:	f8cd 9000 	str.w	r9, [sp]
 800f77c:	e898 0003 	ldmia.w	r8, {r0, r1}
 800f780:	463b      	mov	r3, r7
 800f782:	e884 0003 	stmia.w	r4, {r0, r1}
 800f786:	4632      	mov	r2, r6
 800f788:	4629      	mov	r1, r5
 800f78a:	4620      	mov	r0, r4
 800f78c:	f005 fe98 	bl	80154c0 <rcl_node_init>
 800f790:	b930      	cbnz	r0, 800f7a0 <rclc_node_init_default+0x60>
 800f792:	b021      	add	sp, #132	@ 0x84
 800f794:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f798:	200b      	movs	r0, #11
 800f79a:	b021      	add	sp, #132	@ 0x84
 800f79c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f7a0:	9003      	str	r0, [sp, #12]
 800f7a2:	f000 f909 	bl	800f9b8 <rcutils_reset_error>
 800f7a6:	f000 f907 	bl	800f9b8 <rcutils_reset_error>
 800f7aa:	9803      	ldr	r0, [sp, #12]
 800f7ac:	b021      	add	sp, #132	@ 0x84
 800f7ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f7b2:	200b      	movs	r0, #11
 800f7b4:	4770      	bx	lr
 800f7b6:	bf00      	nop

0800f7b8 <rclc_publisher_init_default>:
 800f7b8:	b368      	cbz	r0, 800f816 <rclc_publisher_init_default+0x5e>
 800f7ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f7be:	460d      	mov	r5, r1
 800f7c0:	b0a0      	sub	sp, #128	@ 0x80
 800f7c2:	b321      	cbz	r1, 800f80e <rclc_publisher_init_default+0x56>
 800f7c4:	4616      	mov	r6, r2
 800f7c6:	b312      	cbz	r2, 800f80e <rclc_publisher_init_default+0x56>
 800f7c8:	461f      	mov	r7, r3
 800f7ca:	b303      	cbz	r3, 800f80e <rclc_publisher_init_default+0x56>
 800f7cc:	4604      	mov	r4, r0
 800f7ce:	f7ff f825 	bl	800e81c <rcl_get_zero_initialized_publisher>
 800f7d2:	f10d 0810 	add.w	r8, sp, #16
 800f7d6:	6020      	str	r0, [r4, #0]
 800f7d8:	4640      	mov	r0, r8
 800f7da:	f7ff f8bb 	bl	800e954 <rcl_publisher_get_default_options>
 800f7de:	490f      	ldr	r1, [pc, #60]	@ (800f81c <rclc_publisher_init_default+0x64>)
 800f7e0:	2250      	movs	r2, #80	@ 0x50
 800f7e2:	4640      	mov	r0, r8
 800f7e4:	f00b fe83 	bl	801b4ee <memcpy>
 800f7e8:	f8cd 8000 	str.w	r8, [sp]
 800f7ec:	463b      	mov	r3, r7
 800f7ee:	4632      	mov	r2, r6
 800f7f0:	4629      	mov	r1, r5
 800f7f2:	4620      	mov	r0, r4
 800f7f4:	f7ff f818 	bl	800e828 <rcl_publisher_init>
 800f7f8:	b910      	cbnz	r0, 800f800 <rclc_publisher_init_default+0x48>
 800f7fa:	b020      	add	sp, #128	@ 0x80
 800f7fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f800:	9003      	str	r0, [sp, #12]
 800f802:	f000 f8d9 	bl	800f9b8 <rcutils_reset_error>
 800f806:	9803      	ldr	r0, [sp, #12]
 800f808:	b020      	add	sp, #128	@ 0x80
 800f80a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f80e:	200b      	movs	r0, #11
 800f810:	b020      	add	sp, #128	@ 0x80
 800f812:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f816:	200b      	movs	r0, #11
 800f818:	4770      	bx	lr
 800f81a:	bf00      	nop
 800f81c:	0801e628 	.word	0x0801e628

0800f820 <rclc_subscription_init_best_effort>:
 800f820:	b368      	cbz	r0, 800f87e <rclc_subscription_init_best_effort+0x5e>
 800f822:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f826:	460d      	mov	r5, r1
 800f828:	b0a0      	sub	sp, #128	@ 0x80
 800f82a:	b321      	cbz	r1, 800f876 <rclc_subscription_init_best_effort+0x56>
 800f82c:	4616      	mov	r6, r2
 800f82e:	b312      	cbz	r2, 800f876 <rclc_subscription_init_best_effort+0x56>
 800f830:	461f      	mov	r7, r3
 800f832:	b303      	cbz	r3, 800f876 <rclc_subscription_init_best_effort+0x56>
 800f834:	4604      	mov	r4, r0
 800f836:	f006 f8ed 	bl	8015a14 <rcl_get_zero_initialized_subscription>
 800f83a:	f10d 0810 	add.w	r8, sp, #16
 800f83e:	6020      	str	r0, [r4, #0]
 800f840:	4640      	mov	r0, r8
 800f842:	f006 f995 	bl	8015b70 <rcl_subscription_get_default_options>
 800f846:	490f      	ldr	r1, [pc, #60]	@ (800f884 <rclc_subscription_init_best_effort+0x64>)
 800f848:	2250      	movs	r2, #80	@ 0x50
 800f84a:	4640      	mov	r0, r8
 800f84c:	f00b fe4f 	bl	801b4ee <memcpy>
 800f850:	f8cd 8000 	str.w	r8, [sp]
 800f854:	463b      	mov	r3, r7
 800f856:	4632      	mov	r2, r6
 800f858:	4629      	mov	r1, r5
 800f85a:	4620      	mov	r0, r4
 800f85c:	f006 f8e0 	bl	8015a20 <rcl_subscription_init>
 800f860:	b910      	cbnz	r0, 800f868 <rclc_subscription_init_best_effort+0x48>
 800f862:	b020      	add	sp, #128	@ 0x80
 800f864:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f868:	9003      	str	r0, [sp, #12]
 800f86a:	f000 f8a5 	bl	800f9b8 <rcutils_reset_error>
 800f86e:	9803      	ldr	r0, [sp, #12]
 800f870:	b020      	add	sp, #128	@ 0x80
 800f872:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f876:	200b      	movs	r0, #11
 800f878:	b020      	add	sp, #128	@ 0x80
 800f87a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f87e:	200b      	movs	r0, #11
 800f880:	4770      	bx	lr
 800f882:	bf00      	nop
 800f884:	0801e678 	.word	0x0801e678

0800f888 <rclc_timer_init_default>:
 800f888:	b360      	cbz	r0, 800f8e4 <rclc_timer_init_default+0x5c>
 800f88a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f88e:	460e      	mov	r6, r1
 800f890:	b08a      	sub	sp, #40	@ 0x28
 800f892:	b319      	cbz	r1, 800f8dc <rclc_timer_init_default+0x54>
 800f894:	4690      	mov	r8, r2
 800f896:	461f      	mov	r7, r3
 800f898:	4605      	mov	r5, r0
 800f89a:	f006 fbf5 	bl	8016088 <rcl_get_zero_initialized_timer>
 800f89e:	68b4      	ldr	r4, [r6, #8]
 800f8a0:	6028      	str	r0, [r5, #0]
 800f8a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f8a4:	f10d 0c0c 	add.w	ip, sp, #12
 800f8a8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f8ac:	6823      	ldr	r3, [r4, #0]
 800f8ae:	f8cc 3000 	str.w	r3, [ip]
 800f8b2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800f8b4:	9302      	str	r3, [sp, #8]
 800f8b6:	e9cd 8700 	strd	r8, r7, [sp]
 800f8ba:	4628      	mov	r0, r5
 800f8bc:	4632      	mov	r2, r6
 800f8be:	f106 010c 	add.w	r1, r6, #12
 800f8c2:	f006 fbe9 	bl	8016098 <rcl_timer_init>
 800f8c6:	b910      	cbnz	r0, 800f8ce <rclc_timer_init_default+0x46>
 800f8c8:	b00a      	add	sp, #40	@ 0x28
 800f8ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f8ce:	9009      	str	r0, [sp, #36]	@ 0x24
 800f8d0:	f000 f872 	bl	800f9b8 <rcutils_reset_error>
 800f8d4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f8d6:	b00a      	add	sp, #40	@ 0x28
 800f8d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f8dc:	200b      	movs	r0, #11
 800f8de:	b00a      	add	sp, #40	@ 0x28
 800f8e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f8e4:	200b      	movs	r0, #11
 800f8e6:	4770      	bx	lr

0800f8e8 <__default_zero_allocate>:
 800f8e8:	f00b b848 	b.w	801a97c <calloc>

0800f8ec <__default_reallocate>:
 800f8ec:	f00b b9e6 	b.w	801acbc <realloc>

0800f8f0 <__default_deallocate>:
 800f8f0:	f00b b8c2 	b.w	801aa78 <free>

0800f8f4 <__default_allocate>:
 800f8f4:	f00b b8b8 	b.w	801aa68 <malloc>

0800f8f8 <rcutils_get_zero_initialized_allocator>:
 800f8f8:	b510      	push	{r4, lr}
 800f8fa:	4c05      	ldr	r4, [pc, #20]	@ (800f910 <rcutils_get_zero_initialized_allocator+0x18>)
 800f8fc:	4686      	mov	lr, r0
 800f8fe:	4684      	mov	ip, r0
 800f900:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f902:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f906:	6823      	ldr	r3, [r4, #0]
 800f908:	f8cc 3000 	str.w	r3, [ip]
 800f90c:	4670      	mov	r0, lr
 800f90e:	bd10      	pop	{r4, pc}
 800f910:	0801e6c8 	.word	0x0801e6c8

0800f914 <rcutils_set_default_allocator>:
 800f914:	b1a8      	cbz	r0, 800f942 <rcutils_set_default_allocator+0x2e>
 800f916:	6802      	ldr	r2, [r0, #0]
 800f918:	b1a2      	cbz	r2, 800f944 <rcutils_set_default_allocator+0x30>
 800f91a:	6841      	ldr	r1, [r0, #4]
 800f91c:	b1a1      	cbz	r1, 800f948 <rcutils_set_default_allocator+0x34>
 800f91e:	b410      	push	{r4}
 800f920:	68c4      	ldr	r4, [r0, #12]
 800f922:	b164      	cbz	r4, 800f93e <rcutils_set_default_allocator+0x2a>
 800f924:	6880      	ldr	r0, [r0, #8]
 800f926:	b138      	cbz	r0, 800f938 <rcutils_set_default_allocator+0x24>
 800f928:	4b08      	ldr	r3, [pc, #32]	@ (800f94c <rcutils_set_default_allocator+0x38>)
 800f92a:	601a      	str	r2, [r3, #0]
 800f92c:	2200      	movs	r2, #0
 800f92e:	e9c3 4203 	strd	r4, r2, [r3, #12]
 800f932:	e9c3 1001 	strd	r1, r0, [r3, #4]
 800f936:	2001      	movs	r0, #1
 800f938:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f93c:	4770      	bx	lr
 800f93e:	4620      	mov	r0, r4
 800f940:	e7fa      	b.n	800f938 <rcutils_set_default_allocator+0x24>
 800f942:	4770      	bx	lr
 800f944:	4610      	mov	r0, r2
 800f946:	4770      	bx	lr
 800f948:	4608      	mov	r0, r1
 800f94a:	4770      	bx	lr
 800f94c:	200001bc 	.word	0x200001bc

0800f950 <rcutils_get_default_allocator>:
 800f950:	b510      	push	{r4, lr}
 800f952:	4c05      	ldr	r4, [pc, #20]	@ (800f968 <rcutils_get_default_allocator+0x18>)
 800f954:	4686      	mov	lr, r0
 800f956:	4684      	mov	ip, r0
 800f958:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f95a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f95e:	6823      	ldr	r3, [r4, #0]
 800f960:	f8cc 3000 	str.w	r3, [ip]
 800f964:	4670      	mov	r0, lr
 800f966:	bd10      	pop	{r4, pc}
 800f968:	200001bc 	.word	0x200001bc

0800f96c <rcutils_allocator_is_valid>:
 800f96c:	b158      	cbz	r0, 800f986 <rcutils_allocator_is_valid+0x1a>
 800f96e:	6803      	ldr	r3, [r0, #0]
 800f970:	b143      	cbz	r3, 800f984 <rcutils_allocator_is_valid+0x18>
 800f972:	6843      	ldr	r3, [r0, #4]
 800f974:	b133      	cbz	r3, 800f984 <rcutils_allocator_is_valid+0x18>
 800f976:	68c3      	ldr	r3, [r0, #12]
 800f978:	b123      	cbz	r3, 800f984 <rcutils_allocator_is_valid+0x18>
 800f97a:	6880      	ldr	r0, [r0, #8]
 800f97c:	3800      	subs	r0, #0
 800f97e:	bf18      	it	ne
 800f980:	2001      	movne	r0, #1
 800f982:	4770      	bx	lr
 800f984:	4618      	mov	r0, r3
 800f986:	4770      	bx	lr

0800f988 <rcutils_get_error_string>:
 800f988:	4b06      	ldr	r3, [pc, #24]	@ (800f9a4 <rcutils_get_error_string+0x1c>)
 800f98a:	781b      	ldrb	r3, [r3, #0]
 800f98c:	b13b      	cbz	r3, 800f99e <rcutils_get_error_string+0x16>
 800f98e:	4b06      	ldr	r3, [pc, #24]	@ (800f9a8 <rcutils_get_error_string+0x20>)
 800f990:	781a      	ldrb	r2, [r3, #0]
 800f992:	b90a      	cbnz	r2, 800f998 <rcutils_get_error_string+0x10>
 800f994:	2201      	movs	r2, #1
 800f996:	701a      	strb	r2, [r3, #0]
 800f998:	4b04      	ldr	r3, [pc, #16]	@ (800f9ac <rcutils_get_error_string+0x24>)
 800f99a:	7818      	ldrb	r0, [r3, #0]
 800f99c:	4770      	bx	lr
 800f99e:	4b04      	ldr	r3, [pc, #16]	@ (800f9b0 <rcutils_get_error_string+0x28>)
 800f9a0:	7818      	ldrb	r0, [r3, #0]
 800f9a2:	4770      	bx	lr
 800f9a4:	20006ba0 	.word	0x20006ba0
 800f9a8:	20006bb9 	.word	0x20006bb9
 800f9ac:	20006bb8 	.word	0x20006bb8
 800f9b0:	0801ded0 	.word	0x0801ded0
 800f9b4:	00000000 	.word	0x00000000

0800f9b8 <rcutils_reset_error>:
 800f9b8:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 800f9d8 <rcutils_reset_error+0x20>
 800f9bc:	4a08      	ldr	r2, [pc, #32]	@ (800f9e0 <rcutils_reset_error+0x28>)
 800f9be:	4809      	ldr	r0, [pc, #36]	@ (800f9e4 <rcutils_reset_error+0x2c>)
 800f9c0:	4909      	ldr	r1, [pc, #36]	@ (800f9e8 <rcutils_reset_error+0x30>)
 800f9c2:	2300      	movs	r3, #0
 800f9c4:	8013      	strh	r3, [r2, #0]
 800f9c6:	ed82 7b02 	vstr	d7, [r2, #8]
 800f9ca:	4a08      	ldr	r2, [pc, #32]	@ (800f9ec <rcutils_reset_error+0x34>)
 800f9cc:	7003      	strb	r3, [r0, #0]
 800f9ce:	700b      	strb	r3, [r1, #0]
 800f9d0:	7013      	strb	r3, [r2, #0]
 800f9d2:	4770      	bx	lr
 800f9d4:	f3af 8000 	nop.w
	...
 800f9e0:	20006ba8 	.word	0x20006ba8
 800f9e4:	20006bb9 	.word	0x20006bb9
 800f9e8:	20006bb8 	.word	0x20006bb8
 800f9ec:	20006ba0 	.word	0x20006ba0

0800f9f0 <rcutils_system_time_now>:
 800f9f0:	b308      	cbz	r0, 800fa36 <rcutils_system_time_now+0x46>
 800f9f2:	b570      	push	{r4, r5, r6, lr}
 800f9f4:	b084      	sub	sp, #16
 800f9f6:	4604      	mov	r4, r0
 800f9f8:	4669      	mov	r1, sp
 800f9fa:	2001      	movs	r0, #1
 800f9fc:	f7f3 faac 	bl	8002f58 <clock_gettime>
 800fa00:	e9dd 3500 	ldrd	r3, r5, [sp]
 800fa04:	2d00      	cmp	r5, #0
 800fa06:	db13      	blt.n	800fa30 <rcutils_system_time_now+0x40>
 800fa08:	9902      	ldr	r1, [sp, #8]
 800fa0a:	2900      	cmp	r1, #0
 800fa0c:	db0d      	blt.n	800fa2a <rcutils_system_time_now+0x3a>
 800fa0e:	4e0b      	ldr	r6, [pc, #44]	@ (800fa3c <rcutils_system_time_now+0x4c>)
 800fa10:	fba3 3206 	umull	r3, r2, r3, r6
 800fa14:	185b      	adds	r3, r3, r1
 800fa16:	fb06 2205 	mla	r2, r6, r5, r2
 800fa1a:	f04f 0000 	mov.w	r0, #0
 800fa1e:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 800fa22:	e9c4 3200 	strd	r3, r2, [r4]
 800fa26:	b004      	add	sp, #16
 800fa28:	bd70      	pop	{r4, r5, r6, pc}
 800fa2a:	ea53 0205 	orrs.w	r2, r3, r5
 800fa2e:	d1ee      	bne.n	800fa0e <rcutils_system_time_now+0x1e>
 800fa30:	2002      	movs	r0, #2
 800fa32:	b004      	add	sp, #16
 800fa34:	bd70      	pop	{r4, r5, r6, pc}
 800fa36:	200b      	movs	r0, #11
 800fa38:	4770      	bx	lr
 800fa3a:	bf00      	nop
 800fa3c:	3b9aca00 	.word	0x3b9aca00

0800fa40 <rcutils_steady_time_now>:
 800fa40:	b308      	cbz	r0, 800fa86 <rcutils_steady_time_now+0x46>
 800fa42:	b570      	push	{r4, r5, r6, lr}
 800fa44:	b084      	sub	sp, #16
 800fa46:	4604      	mov	r4, r0
 800fa48:	4669      	mov	r1, sp
 800fa4a:	2000      	movs	r0, #0
 800fa4c:	f7f3 fa84 	bl	8002f58 <clock_gettime>
 800fa50:	e9dd 3500 	ldrd	r3, r5, [sp]
 800fa54:	2d00      	cmp	r5, #0
 800fa56:	db13      	blt.n	800fa80 <rcutils_steady_time_now+0x40>
 800fa58:	9902      	ldr	r1, [sp, #8]
 800fa5a:	2900      	cmp	r1, #0
 800fa5c:	db0d      	blt.n	800fa7a <rcutils_steady_time_now+0x3a>
 800fa5e:	4e0b      	ldr	r6, [pc, #44]	@ (800fa8c <rcutils_steady_time_now+0x4c>)
 800fa60:	fba3 3206 	umull	r3, r2, r3, r6
 800fa64:	185b      	adds	r3, r3, r1
 800fa66:	fb06 2205 	mla	r2, r6, r5, r2
 800fa6a:	f04f 0000 	mov.w	r0, #0
 800fa6e:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 800fa72:	e9c4 3200 	strd	r3, r2, [r4]
 800fa76:	b004      	add	sp, #16
 800fa78:	bd70      	pop	{r4, r5, r6, pc}
 800fa7a:	ea53 0205 	orrs.w	r2, r3, r5
 800fa7e:	d1ee      	bne.n	800fa5e <rcutils_steady_time_now+0x1e>
 800fa80:	2002      	movs	r0, #2
 800fa82:	b004      	add	sp, #16
 800fa84:	bd70      	pop	{r4, r5, r6, pc}
 800fa86:	200b      	movs	r0, #11
 800fa88:	4770      	bx	lr
 800fa8a:	bf00      	nop
 800fa8c:	3b9aca00 	.word	0x3b9aca00

0800fa90 <rmw_get_zero_initialized_init_options>:
 800fa90:	b510      	push	{r4, lr}
 800fa92:	2238      	movs	r2, #56	@ 0x38
 800fa94:	4604      	mov	r4, r0
 800fa96:	2100      	movs	r1, #0
 800fa98:	f00b fc60 	bl	801b35c <memset>
 800fa9c:	f104 0010 	add.w	r0, r4, #16
 800faa0:	f000 f80a 	bl	800fab8 <rmw_get_default_security_options>
 800faa4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800faa8:	60e3      	str	r3, [r4, #12]
 800faaa:	4620      	mov	r0, r4
 800faac:	bd10      	pop	{r4, pc}
 800faae:	bf00      	nop

0800fab0 <rmw_get_default_publisher_options>:
 800fab0:	2200      	movs	r2, #0
 800fab2:	6002      	str	r2, [r0, #0]
 800fab4:	7102      	strb	r2, [r0, #4]
 800fab6:	4770      	bx	lr

0800fab8 <rmw_get_default_security_options>:
 800fab8:	2200      	movs	r2, #0
 800faba:	7002      	strb	r2, [r0, #0]
 800fabc:	6042      	str	r2, [r0, #4]
 800fabe:	4770      	bx	lr

0800fac0 <rmw_uros_set_custom_transport>:
 800fac0:	b470      	push	{r4, r5, r6}
 800fac2:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 800fac6:	b162      	cbz	r2, 800fae2 <rmw_uros_set_custom_transport+0x22>
 800fac8:	b15b      	cbz	r3, 800fae2 <rmw_uros_set_custom_transport+0x22>
 800faca:	b155      	cbz	r5, 800fae2 <rmw_uros_set_custom_transport+0x22>
 800facc:	b14e      	cbz	r6, 800fae2 <rmw_uros_set_custom_transport+0x22>
 800face:	4c06      	ldr	r4, [pc, #24]	@ (800fae8 <rmw_uros_set_custom_transport+0x28>)
 800fad0:	7020      	strb	r0, [r4, #0]
 800fad2:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800fad6:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800fada:	6166      	str	r6, [r4, #20]
 800fadc:	2000      	movs	r0, #0
 800fade:	bc70      	pop	{r4, r5, r6}
 800fae0:	4770      	bx	lr
 800fae2:	200b      	movs	r0, #11
 800fae4:	bc70      	pop	{r4, r5, r6}
 800fae6:	4770      	bx	lr
 800fae8:	20006bbc 	.word	0x20006bbc

0800faec <rmw_init_options_init>:
 800faec:	b084      	sub	sp, #16
 800faee:	b5f0      	push	{r4, r5, r6, r7, lr}
 800faf0:	b083      	sub	sp, #12
 800faf2:	ad09      	add	r5, sp, #36	@ 0x24
 800faf4:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 800faf8:	b130      	cbz	r0, 800fb08 <rmw_init_options_init+0x1c>
 800fafa:	4604      	mov	r4, r0
 800fafc:	4628      	mov	r0, r5
 800fafe:	f7ff ff35 	bl	800f96c <rcutils_allocator_is_valid>
 800fb02:	b108      	cbz	r0, 800fb08 <rmw_init_options_init+0x1c>
 800fb04:	68a6      	ldr	r6, [r4, #8]
 800fb06:	b12e      	cbz	r6, 800fb14 <rmw_init_options_init+0x28>
 800fb08:	200b      	movs	r0, #11
 800fb0a:	b003      	add	sp, #12
 800fb0c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800fb10:	b004      	add	sp, #16
 800fb12:	4770      	bx	lr
 800fb14:	2200      	movs	r2, #0
 800fb16:	2300      	movs	r3, #0
 800fb18:	e9c4 2300 	strd	r2, r3, [r4]
 800fb1c:	4b20      	ldr	r3, [pc, #128]	@ (800fba0 <rmw_init_options_init+0xb4>)
 800fb1e:	681b      	ldr	r3, [r3, #0]
 800fb20:	60a3      	str	r3, [r4, #8]
 800fb22:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fb24:	f104 0c20 	add.w	ip, r4, #32
 800fb28:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800fb2c:	466f      	mov	r7, sp
 800fb2e:	682b      	ldr	r3, [r5, #0]
 800fb30:	f8cc 3000 	str.w	r3, [ip]
 800fb34:	4638      	mov	r0, r7
 800fb36:	61e6      	str	r6, [r4, #28]
 800fb38:	60e6      	str	r6, [r4, #12]
 800fb3a:	f7ff ffbd 	bl	800fab8 <rmw_get_default_security_options>
 800fb3e:	e897 0003 	ldmia.w	r7, {r0, r1}
 800fb42:	f104 0310 	add.w	r3, r4, #16
 800fb46:	e883 0003 	stmia.w	r3, {r0, r1}
 800fb4a:	2203      	movs	r2, #3
 800fb4c:	4815      	ldr	r0, [pc, #84]	@ (800fba4 <rmw_init_options_init+0xb8>)
 800fb4e:	4916      	ldr	r1, [pc, #88]	@ (800fba8 <rmw_init_options_init+0xbc>)
 800fb50:	7626      	strb	r6, [r4, #24]
 800fb52:	f000 ffdb 	bl	8010b0c <rmw_uxrce_init_init_options_impl_memory>
 800fb56:	4813      	ldr	r0, [pc, #76]	@ (800fba4 <rmw_init_options_init+0xb8>)
 800fb58:	f008 fdc6 	bl	80186e8 <get_memory>
 800fb5c:	b1f0      	cbz	r0, 800fb9c <rmw_init_options_init+0xb0>
 800fb5e:	4a13      	ldr	r2, [pc, #76]	@ (800fbac <rmw_init_options_init+0xc0>)
 800fb60:	6883      	ldr	r3, [r0, #8]
 800fb62:	6851      	ldr	r1, [r2, #4]
 800fb64:	7810      	ldrb	r0, [r2, #0]
 800fb66:	6363      	str	r3, [r4, #52]	@ 0x34
 800fb68:	7418      	strb	r0, [r3, #16]
 800fb6a:	6159      	str	r1, [r3, #20]
 800fb6c:	68d1      	ldr	r1, [r2, #12]
 800fb6e:	61d9      	str	r1, [r3, #28]
 800fb70:	6911      	ldr	r1, [r2, #16]
 800fb72:	6219      	str	r1, [r3, #32]
 800fb74:	6951      	ldr	r1, [r2, #20]
 800fb76:	6892      	ldr	r2, [r2, #8]
 800fb78:	619a      	str	r2, [r3, #24]
 800fb7a:	6259      	str	r1, [r3, #36]	@ 0x24
 800fb7c:	f004 f83e 	bl	8013bfc <uxr_nanos>
 800fb80:	f00b f830 	bl	801abe4 <srand>
 800fb84:	f00b f85c 	bl	801ac40 <rand>
 800fb88:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800fb8a:	6298      	str	r0, [r3, #40]	@ 0x28
 800fb8c:	2800      	cmp	r0, #0
 800fb8e:	d0f9      	beq.n	800fb84 <rmw_init_options_init+0x98>
 800fb90:	2000      	movs	r0, #0
 800fb92:	b003      	add	sp, #12
 800fb94:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800fb98:	b004      	add	sp, #16
 800fb9a:	4770      	bx	lr
 800fb9c:	2001      	movs	r0, #1
 800fb9e:	e7b4      	b.n	800fb0a <rmw_init_options_init+0x1e>
 800fba0:	0801eabc 	.word	0x0801eabc
 800fba4:	2000b4d4 	.word	0x2000b4d4
 800fba8:	20006d70 	.word	0x20006d70
 800fbac:	20006bbc 	.word	0x20006bbc

0800fbb0 <rmw_init_options_copy>:
 800fbb0:	b570      	push	{r4, r5, r6, lr}
 800fbb2:	b088      	sub	sp, #32
 800fbb4:	b160      	cbz	r0, 800fbd0 <rmw_init_options_copy+0x20>
 800fbb6:	460d      	mov	r5, r1
 800fbb8:	b151      	cbz	r1, 800fbd0 <rmw_init_options_copy+0x20>
 800fbba:	4604      	mov	r4, r0
 800fbbc:	6880      	ldr	r0, [r0, #8]
 800fbbe:	b128      	cbz	r0, 800fbcc <rmw_init_options_copy+0x1c>
 800fbc0:	4b33      	ldr	r3, [pc, #204]	@ (800fc90 <rmw_init_options_copy+0xe0>)
 800fbc2:	6819      	ldr	r1, [r3, #0]
 800fbc4:	f7f0 fb2c 	bl	8000220 <strcmp>
 800fbc8:	2800      	cmp	r0, #0
 800fbca:	d154      	bne.n	800fc76 <rmw_init_options_copy+0xc6>
 800fbcc:	68ab      	ldr	r3, [r5, #8]
 800fbce:	b11b      	cbz	r3, 800fbd8 <rmw_init_options_copy+0x28>
 800fbd0:	240b      	movs	r4, #11
 800fbd2:	4620      	mov	r0, r4
 800fbd4:	b008      	add	sp, #32
 800fbd6:	bd70      	pop	{r4, r5, r6, pc}
 800fbd8:	4623      	mov	r3, r4
 800fbda:	462a      	mov	r2, r5
 800fbdc:	f104 0630 	add.w	r6, r4, #48	@ 0x30
 800fbe0:	f8d3 c000 	ldr.w	ip, [r3]
 800fbe4:	6858      	ldr	r0, [r3, #4]
 800fbe6:	6899      	ldr	r1, [r3, #8]
 800fbe8:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 800fbec:	f8c2 e00c 	str.w	lr, [r2, #12]
 800fbf0:	3310      	adds	r3, #16
 800fbf2:	42b3      	cmp	r3, r6
 800fbf4:	f8c2 c000 	str.w	ip, [r2]
 800fbf8:	6050      	str	r0, [r2, #4]
 800fbfa:	6091      	str	r1, [r2, #8]
 800fbfc:	f102 0210 	add.w	r2, r2, #16
 800fc00:	d1ee      	bne.n	800fbe0 <rmw_init_options_copy+0x30>
 800fc02:	6819      	ldr	r1, [r3, #0]
 800fc04:	685b      	ldr	r3, [r3, #4]
 800fc06:	6053      	str	r3, [r2, #4]
 800fc08:	6011      	str	r1, [r2, #0]
 800fc0a:	f104 0e20 	add.w	lr, r4, #32
 800fc0e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800fc12:	f10d 0c0c 	add.w	ip, sp, #12
 800fc16:	4666      	mov	r6, ip
 800fc18:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800fc1c:	f8de 3000 	ldr.w	r3, [lr]
 800fc20:	f8cc 3000 	str.w	r3, [ip]
 800fc24:	4630      	mov	r0, r6
 800fc26:	f7ff fea1 	bl	800f96c <rcutils_allocator_is_valid>
 800fc2a:	2800      	cmp	r0, #0
 800fc2c:	d0d0      	beq.n	800fbd0 <rmw_init_options_copy+0x20>
 800fc2e:	ab08      	add	r3, sp, #32
 800fc30:	e913 0003 	ldmdb	r3, {r0, r1}
 800fc34:	e88d 0003 	stmia.w	sp, {r0, r1}
 800fc38:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800fc3c:	69e0      	ldr	r0, [r4, #28]
 800fc3e:	f008 f905 	bl	8017e4c <rcutils_strdup>
 800fc42:	61e8      	str	r0, [r5, #28]
 800fc44:	69e3      	ldr	r3, [r4, #28]
 800fc46:	b103      	cbz	r3, 800fc4a <rmw_init_options_copy+0x9a>
 800fc48:	b1f8      	cbz	r0, 800fc8a <rmw_init_options_copy+0xda>
 800fc4a:	4812      	ldr	r0, [pc, #72]	@ (800fc94 <rmw_init_options_copy+0xe4>)
 800fc4c:	f008 fd4c 	bl	80186e8 <get_memory>
 800fc50:	b1a8      	cbz	r0, 800fc7e <rmw_init_options_copy+0xce>
 800fc52:	6883      	ldr	r3, [r0, #8]
 800fc54:	636b      	str	r3, [r5, #52]	@ 0x34
 800fc56:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800fc58:	f102 0c10 	add.w	ip, r2, #16
 800fc5c:	f103 0510 	add.w	r5, r3, #16
 800fc60:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800fc64:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800fc66:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 800fc6a:	2400      	movs	r4, #0
 800fc6c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800fc70:	4620      	mov	r0, r4
 800fc72:	b008      	add	sp, #32
 800fc74:	bd70      	pop	{r4, r5, r6, pc}
 800fc76:	240c      	movs	r4, #12
 800fc78:	4620      	mov	r0, r4
 800fc7a:	b008      	add	sp, #32
 800fc7c:	bd70      	pop	{r4, r5, r6, pc}
 800fc7e:	9b04      	ldr	r3, [sp, #16]
 800fc80:	9907      	ldr	r1, [sp, #28]
 800fc82:	69e8      	ldr	r0, [r5, #28]
 800fc84:	4798      	blx	r3
 800fc86:	2401      	movs	r4, #1
 800fc88:	e7a3      	b.n	800fbd2 <rmw_init_options_copy+0x22>
 800fc8a:	240a      	movs	r4, #10
 800fc8c:	e7a1      	b.n	800fbd2 <rmw_init_options_copy+0x22>
 800fc8e:	bf00      	nop
 800fc90:	0801eabc 	.word	0x0801eabc
 800fc94:	2000b4d4 	.word	0x2000b4d4

0800fc98 <rmw_init_options_fini>:
 800fc98:	2800      	cmp	r0, #0
 800fc9a:	d041      	beq.n	800fd20 <rmw_init_options_fini+0x88>
 800fc9c:	b510      	push	{r4, lr}
 800fc9e:	4604      	mov	r4, r0
 800fca0:	b08e      	sub	sp, #56	@ 0x38
 800fca2:	3020      	adds	r0, #32
 800fca4:	f7ff fe62 	bl	800f96c <rcutils_allocator_is_valid>
 800fca8:	b380      	cbz	r0, 800fd0c <rmw_init_options_fini+0x74>
 800fcaa:	68a0      	ldr	r0, [r4, #8]
 800fcac:	b120      	cbz	r0, 800fcb8 <rmw_init_options_fini+0x20>
 800fcae:	4b1e      	ldr	r3, [pc, #120]	@ (800fd28 <rmw_init_options_fini+0x90>)
 800fcb0:	6819      	ldr	r1, [r3, #0]
 800fcb2:	f7f0 fab5 	bl	8000220 <strcmp>
 800fcb6:	bb88      	cbnz	r0, 800fd1c <rmw_init_options_fini+0x84>
 800fcb8:	4b1c      	ldr	r3, [pc, #112]	@ (800fd2c <rmw_init_options_fini+0x94>)
 800fcba:	6819      	ldr	r1, [r3, #0]
 800fcbc:	b351      	cbz	r1, 800fd14 <rmw_init_options_fini+0x7c>
 800fcbe:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800fcc0:	e001      	b.n	800fcc6 <rmw_init_options_fini+0x2e>
 800fcc2:	6849      	ldr	r1, [r1, #4]
 800fcc4:	b331      	cbz	r1, 800fd14 <rmw_init_options_fini+0x7c>
 800fcc6:	688b      	ldr	r3, [r1, #8]
 800fcc8:	429a      	cmp	r2, r3
 800fcca:	d1fa      	bne.n	800fcc2 <rmw_init_options_fini+0x2a>
 800fccc:	4817      	ldr	r0, [pc, #92]	@ (800fd2c <rmw_init_options_fini+0x94>)
 800fcce:	f008 fd1b 	bl	8018708 <put_memory>
 800fcd2:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800fcd4:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800fcd6:	69e0      	ldr	r0, [r4, #28]
 800fcd8:	4798      	blx	r3
 800fcda:	4668      	mov	r0, sp
 800fcdc:	f7ff fed8 	bl	800fa90 <rmw_get_zero_initialized_init_options>
 800fce0:	46ee      	mov	lr, sp
 800fce2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800fce6:	46a4      	mov	ip, r4
 800fce8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800fcec:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800fcf0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800fcf4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800fcf8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800fcfc:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800fd00:	e88c 0003 	stmia.w	ip, {r0, r1}
 800fd04:	2300      	movs	r3, #0
 800fd06:	4618      	mov	r0, r3
 800fd08:	b00e      	add	sp, #56	@ 0x38
 800fd0a:	bd10      	pop	{r4, pc}
 800fd0c:	230b      	movs	r3, #11
 800fd0e:	4618      	mov	r0, r3
 800fd10:	b00e      	add	sp, #56	@ 0x38
 800fd12:	bd10      	pop	{r4, pc}
 800fd14:	2301      	movs	r3, #1
 800fd16:	4618      	mov	r0, r3
 800fd18:	b00e      	add	sp, #56	@ 0x38
 800fd1a:	bd10      	pop	{r4, pc}
 800fd1c:	230c      	movs	r3, #12
 800fd1e:	e7f2      	b.n	800fd06 <rmw_init_options_fini+0x6e>
 800fd20:	230b      	movs	r3, #11
 800fd22:	4618      	mov	r0, r3
 800fd24:	4770      	bx	lr
 800fd26:	bf00      	nop
 800fd28:	0801eabc 	.word	0x0801eabc
 800fd2c:	2000b4d4 	.word	0x2000b4d4

0800fd30 <rmw_init>:
 800fd30:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fd34:	b083      	sub	sp, #12
 800fd36:	2800      	cmp	r0, #0
 800fd38:	f000 80d3 	beq.w	800fee2 <rmw_init+0x1b2>
 800fd3c:	460e      	mov	r6, r1
 800fd3e:	2900      	cmp	r1, #0
 800fd40:	f000 80cf 	beq.w	800fee2 <rmw_init+0x1b2>
 800fd44:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800fd46:	4605      	mov	r5, r0
 800fd48:	2b00      	cmp	r3, #0
 800fd4a:	f000 80ca 	beq.w	800fee2 <rmw_init+0x1b2>
 800fd4e:	4b78      	ldr	r3, [pc, #480]	@ (800ff30 <rmw_init+0x200>)
 800fd50:	6880      	ldr	r0, [r0, #8]
 800fd52:	681f      	ldr	r7, [r3, #0]
 800fd54:	b128      	cbz	r0, 800fd62 <rmw_init+0x32>
 800fd56:	4639      	mov	r1, r7
 800fd58:	f7f0 fa62 	bl	8000220 <strcmp>
 800fd5c:	2800      	cmp	r0, #0
 800fd5e:	f040 80ca 	bne.w	800fef6 <rmw_init+0x1c6>
 800fd62:	e9d5 2300 	ldrd	r2, r3, [r5]
 800fd66:	4c73      	ldr	r4, [pc, #460]	@ (800ff34 <rmw_init+0x204>)
 800fd68:	4973      	ldr	r1, [pc, #460]	@ (800ff38 <rmw_init+0x208>)
 800fd6a:	4874      	ldr	r0, [pc, #464]	@ (800ff3c <rmw_init+0x20c>)
 800fd6c:	60b7      	str	r7, [r6, #8]
 800fd6e:	e9c6 2300 	strd	r2, r3, [r6]
 800fd72:	68eb      	ldr	r3, [r5, #12]
 800fd74:	64b3      	str	r3, [r6, #72]	@ 0x48
 800fd76:	2201      	movs	r2, #1
 800fd78:	f000 fe68 	bl	8010a4c <rmw_uxrce_init_session_memory>
 800fd7c:	4620      	mov	r0, r4
 800fd7e:	4970      	ldr	r1, [pc, #448]	@ (800ff40 <rmw_init+0x210>)
 800fd80:	2204      	movs	r2, #4
 800fd82:	f000 fea3 	bl	8010acc <rmw_uxrce_init_static_input_buffer_memory>
 800fd86:	f04f 0800 	mov.w	r8, #0
 800fd8a:	486c      	ldr	r0, [pc, #432]	@ (800ff3c <rmw_init+0x20c>)
 800fd8c:	f884 800d 	strb.w	r8, [r4, #13]
 800fd90:	f008 fcaa 	bl	80186e8 <get_memory>
 800fd94:	2800      	cmp	r0, #0
 800fd96:	f000 80a9 	beq.w	800feec <rmw_init+0x1bc>
 800fd9a:	6884      	ldr	r4, [r0, #8]
 800fd9c:	6b68      	ldr	r0, [r5, #52]	@ 0x34
 800fd9e:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 800fda0:	f890 c010 	ldrb.w	ip, [r0, #16]
 800fda4:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 800fda8:	9101      	str	r1, [sp, #4]
 800fdaa:	6a00      	ldr	r0, [r0, #32]
 800fdac:	9000      	str	r0, [sp, #0]
 800fdae:	f104 0910 	add.w	r9, r4, #16
 800fdb2:	4661      	mov	r1, ip
 800fdb4:	4648      	mov	r0, r9
 800fdb6:	f001 fe69 	bl	8011a8c <uxr_set_custom_transport_callbacks>
 800fdba:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
 800fdbe:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800fdc2:	e9c4 22e3 	strd	r2, r2, [r4, #908]	@ 0x38c
 800fdc6:	f504 725e 	add.w	r2, r4, #888	@ 0x378
 800fdca:	e9c4 22e1 	strd	r2, r2, [r4, #900]	@ 0x384
 800fdce:	495d      	ldr	r1, [pc, #372]	@ (800ff44 <rmw_init+0x214>)
 800fdd0:	f8c3 8594 	str.w	r8, [r3, #1428]	@ 0x594
 800fdd4:	f8c3 8598 	str.w	r8, [r3, #1432]	@ 0x598
 800fdd8:	f8c3 859c 	str.w	r8, [r3, #1436]	@ 0x59c
 800fddc:	f8c3 85a0 	str.w	r8, [r3, #1440]	@ 0x5a0
 800fde0:	4859      	ldr	r0, [pc, #356]	@ (800ff48 <rmw_init+0x218>)
 800fde2:	e9c4 78da 	strd	r7, r8, [r4, #872]	@ 0x368
 800fde6:	2201      	movs	r2, #1
 800fde8:	64f4      	str	r4, [r6, #76]	@ 0x4c
 800fdea:	f000 fe0f 	bl	8010a0c <rmw_uxrce_init_node_memory>
 800fdee:	4957      	ldr	r1, [pc, #348]	@ (800ff4c <rmw_init+0x21c>)
 800fdf0:	4857      	ldr	r0, [pc, #348]	@ (800ff50 <rmw_init+0x220>)
 800fdf2:	2205      	movs	r2, #5
 800fdf4:	f000 fdea 	bl	80109cc <rmw_uxrce_init_subscription_memory>
 800fdf8:	4956      	ldr	r1, [pc, #344]	@ (800ff54 <rmw_init+0x224>)
 800fdfa:	4857      	ldr	r0, [pc, #348]	@ (800ff58 <rmw_init+0x228>)
 800fdfc:	220a      	movs	r2, #10
 800fdfe:	f000 fdc5 	bl	801098c <rmw_uxrce_init_publisher_memory>
 800fe02:	4956      	ldr	r1, [pc, #344]	@ (800ff5c <rmw_init+0x22c>)
 800fe04:	4856      	ldr	r0, [pc, #344]	@ (800ff60 <rmw_init+0x230>)
 800fe06:	2201      	movs	r2, #1
 800fe08:	f000 fd80 	bl	801090c <rmw_uxrce_init_service_memory>
 800fe0c:	4955      	ldr	r1, [pc, #340]	@ (800ff64 <rmw_init+0x234>)
 800fe0e:	4856      	ldr	r0, [pc, #344]	@ (800ff68 <rmw_init+0x238>)
 800fe10:	2201      	movs	r2, #1
 800fe12:	f000 fd9b 	bl	801094c <rmw_uxrce_init_client_memory>
 800fe16:	4955      	ldr	r1, [pc, #340]	@ (800ff6c <rmw_init+0x23c>)
 800fe18:	4855      	ldr	r0, [pc, #340]	@ (800ff70 <rmw_init+0x240>)
 800fe1a:	220f      	movs	r2, #15
 800fe1c:	f000 fe36 	bl	8010a8c <rmw_uxrce_init_topic_memory>
 800fe20:	4954      	ldr	r1, [pc, #336]	@ (800ff74 <rmw_init+0x244>)
 800fe22:	4855      	ldr	r0, [pc, #340]	@ (800ff78 <rmw_init+0x248>)
 800fe24:	2203      	movs	r2, #3
 800fe26:	f000 fe71 	bl	8010b0c <rmw_uxrce_init_init_options_impl_memory>
 800fe2a:	4954      	ldr	r1, [pc, #336]	@ (800ff7c <rmw_init+0x24c>)
 800fe2c:	4854      	ldr	r0, [pc, #336]	@ (800ff80 <rmw_init+0x250>)
 800fe2e:	2204      	movs	r2, #4
 800fe30:	f000 fe8c 	bl	8010b4c <rmw_uxrce_init_wait_set_memory>
 800fe34:	4953      	ldr	r1, [pc, #332]	@ (800ff84 <rmw_init+0x254>)
 800fe36:	4854      	ldr	r0, [pc, #336]	@ (800ff88 <rmw_init+0x258>)
 800fe38:	2204      	movs	r2, #4
 800fe3a:	f000 fea7 	bl	8010b8c <rmw_uxrce_init_guard_condition_memory>
 800fe3e:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 800fe40:	6cf0      	ldr	r0, [r6, #76]	@ 0x4c
 800fe42:	4642      	mov	r2, r8
 800fe44:	f000 fd2a 	bl	801089c <rmw_uxrce_transport_init>
 800fe48:	4607      	mov	r7, r0
 800fe4a:	2800      	cmp	r0, #0
 800fe4c:	d158      	bne.n	800ff00 <rmw_init+0x1d0>
 800fe4e:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 800fe50:	f504 7528 	add.w	r5, r4, #672	@ 0x2a0
 800fe54:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800fe56:	f504 7122 	add.w	r1, r4, #648	@ 0x288
 800fe5a:	4628      	mov	r0, r5
 800fe5c:	f002 f84c 	bl	8011ef8 <uxr_init_session>
 800fe60:	494a      	ldr	r1, [pc, #296]	@ (800ff8c <rmw_init+0x25c>)
 800fe62:	4622      	mov	r2, r4
 800fe64:	4628      	mov	r0, r5
 800fe66:	f002 f86b 	bl	8011f40 <uxr_set_topic_callback>
 800fe6a:	4949      	ldr	r1, [pc, #292]	@ (800ff90 <rmw_init+0x260>)
 800fe6c:	463a      	mov	r2, r7
 800fe6e:	4628      	mov	r0, r5
 800fe70:	f002 f862 	bl	8011f38 <uxr_set_status_callback>
 800fe74:	4947      	ldr	r1, [pc, #284]	@ (800ff94 <rmw_init+0x264>)
 800fe76:	463a      	mov	r2, r7
 800fe78:	4628      	mov	r0, r5
 800fe7a:	f002 f865 	bl	8011f48 <uxr_set_request_callback>
 800fe7e:	4946      	ldr	r1, [pc, #280]	@ (800ff98 <rmw_init+0x268>)
 800fe80:	463a      	mov	r2, r7
 800fe82:	4628      	mov	r0, r5
 800fe84:	f002 f864 	bl	8011f50 <uxr_set_reply_callback>
 800fe88:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 800fe8c:	2304      	movs	r3, #4
 800fe8e:	0092      	lsls	r2, r2, #2
 800fe90:	f504 7165 	add.w	r1, r4, #916	@ 0x394
 800fe94:	4628      	mov	r0, r5
 800fe96:	f002 f899 	bl	8011fcc <uxr_create_input_reliable_stream>
 800fe9a:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 800fe9e:	f8c4 0374 	str.w	r0, [r4, #884]	@ 0x374
 800fea2:	0092      	lsls	r2, r2, #2
 800fea4:	2304      	movs	r3, #4
 800fea6:	f604 3194 	addw	r1, r4, #2964	@ 0xb94
 800feaa:	4628      	mov	r0, r5
 800feac:	f002 f866 	bl	8011f7c <uxr_create_output_reliable_stream>
 800feb0:	f8c4 0378 	str.w	r0, [r4, #888]	@ 0x378
 800feb4:	4628      	mov	r0, r5
 800feb6:	f002 f883 	bl	8011fc0 <uxr_create_input_best_effort_stream>
 800feba:	f504 519c 	add.w	r1, r4, #4992	@ 0x1380
 800febe:	f8c4 0380 	str.w	r0, [r4, #896]	@ 0x380
 800fec2:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 800fec6:	3114      	adds	r1, #20
 800fec8:	4628      	mov	r0, r5
 800feca:	f002 f845 	bl	8011f58 <uxr_create_output_best_effort_stream>
 800fece:	f8c4 037c 	str.w	r0, [r4, #892]	@ 0x37c
 800fed2:	4628      	mov	r0, r5
 800fed4:	f002 fe24 	bl	8012b20 <uxr_create_session>
 800fed8:	b1f8      	cbz	r0, 800ff1a <rmw_init+0x1ea>
 800feda:	4638      	mov	r0, r7
 800fedc:	b003      	add	sp, #12
 800fede:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fee2:	270b      	movs	r7, #11
 800fee4:	4638      	mov	r0, r7
 800fee6:	b003      	add	sp, #12
 800fee8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800feec:	2701      	movs	r7, #1
 800feee:	4638      	mov	r0, r7
 800fef0:	b003      	add	sp, #12
 800fef2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fef6:	270c      	movs	r7, #12
 800fef8:	4638      	mov	r0, r7
 800fefa:	b003      	add	sp, #12
 800fefc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ff00:	4648      	mov	r0, r9
 800ff02:	f001 fe05 	bl	8011b10 <uxr_close_custom_transport>
 800ff06:	480d      	ldr	r0, [pc, #52]	@ (800ff3c <rmw_init+0x20c>)
 800ff08:	4621      	mov	r1, r4
 800ff0a:	f008 fbfd 	bl	8018708 <put_memory>
 800ff0e:	4638      	mov	r0, r7
 800ff10:	f8c6 804c 	str.w	r8, [r6, #76]	@ 0x4c
 800ff14:	b003      	add	sp, #12
 800ff16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ff1a:	4648      	mov	r0, r9
 800ff1c:	f001 fdf8 	bl	8011b10 <uxr_close_custom_transport>
 800ff20:	4806      	ldr	r0, [pc, #24]	@ (800ff3c <rmw_init+0x20c>)
 800ff22:	4621      	mov	r1, r4
 800ff24:	f008 fbf0 	bl	8018708 <put_memory>
 800ff28:	64f7      	str	r7, [r6, #76]	@ 0x4c
 800ff2a:	2701      	movs	r7, #1
 800ff2c:	e7d5      	b.n	800feda <rmw_init+0x1aa>
 800ff2e:	bf00      	nop
 800ff30:	0801eabc 	.word	0x0801eabc
 800ff34:	2000b524 	.word	0x2000b524
 800ff38:	200077d0 	.word	0x200077d0
 800ff3c:	2000b514 	.word	0x2000b514
 800ff40:	20008d78 	.word	0x20008d78
 800ff44:	20006df4 	.word	0x20006df4
 800ff48:	2000b4e4 	.word	0x2000b4e4
 800ff4c:	2000ae78 	.word	0x2000ae78
 800ff50:	2000b534 	.word	0x2000b534
 800ff54:	20006e98 	.word	0x20006e98
 800ff58:	2000b4f4 	.word	0x2000b4f4
 800ff5c:	20007708 	.word	0x20007708
 800ff60:	2000b504 	.word	0x2000b504
 800ff64:	20006c28 	.word	0x20006c28
 800ff68:	20006c14 	.word	0x20006c14
 800ff6c:	2000b2b0 	.word	0x2000b2b0
 800ff70:	2000b544 	.word	0x2000b544
 800ff74:	20006d70 	.word	0x20006d70
 800ff78:	2000b4d4 	.word	0x2000b4d4
 800ff7c:	2000b454 	.word	0x2000b454
 800ff80:	2000b554 	.word	0x2000b554
 800ff84:	20006cf0 	.word	0x20006cf0
 800ff88:	2000b4c4 	.word	0x2000b4c4
 800ff8c:	08018521 	.word	0x08018521
 800ff90:	08018519 	.word	0x08018519
 800ff94:	080185b9 	.word	0x080185b9
 800ff98:	08018655 	.word	0x08018655

0800ff9c <rmw_context_fini>:
 800ff9c:	4b17      	ldr	r3, [pc, #92]	@ (800fffc <rmw_context_fini+0x60>)
 800ff9e:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 800ffa0:	b570      	push	{r4, r5, r6, lr}
 800ffa2:	681c      	ldr	r4, [r3, #0]
 800ffa4:	4605      	mov	r5, r0
 800ffa6:	b334      	cbz	r4, 800fff6 <rmw_context_fini+0x5a>
 800ffa8:	2600      	movs	r6, #0
 800ffaa:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 800ffae:	6902      	ldr	r2, [r0, #16]
 800ffb0:	428a      	cmp	r2, r1
 800ffb2:	d018      	beq.n	800ffe6 <rmw_context_fini+0x4a>
 800ffb4:	2c00      	cmp	r4, #0
 800ffb6:	d1f8      	bne.n	800ffaa <rmw_context_fini+0xe>
 800ffb8:	b189      	cbz	r1, 800ffde <rmw_context_fini+0x42>
 800ffba:	f8d1 3388 	ldr.w	r3, [r1, #904]	@ 0x388
 800ffbe:	789b      	ldrb	r3, [r3, #2]
 800ffc0:	2b01      	cmp	r3, #1
 800ffc2:	f501 7028 	add.w	r0, r1, #672	@ 0x2a0
 800ffc6:	bf14      	ite	ne
 800ffc8:	210a      	movne	r1, #10
 800ffca:	2100      	moveq	r1, #0
 800ffcc:	f002 fd80 	bl	8012ad0 <uxr_delete_session_retries>
 800ffd0:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 800ffd2:	f000 fdfb 	bl	8010bcc <rmw_uxrce_fini_session_memory>
 800ffd6:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 800ffd8:	3010      	adds	r0, #16
 800ffda:	f001 fd99 	bl	8011b10 <uxr_close_custom_transport>
 800ffde:	2300      	movs	r3, #0
 800ffe0:	64eb      	str	r3, [r5, #76]	@ 0x4c
 800ffe2:	4630      	mov	r0, r6
 800ffe4:	bd70      	pop	{r4, r5, r6, pc}
 800ffe6:	3018      	adds	r0, #24
 800ffe8:	f000 f89c 	bl	8010124 <rmw_destroy_node>
 800ffec:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800ffee:	4606      	mov	r6, r0
 800fff0:	2c00      	cmp	r4, #0
 800fff2:	d1da      	bne.n	800ffaa <rmw_context_fini+0xe>
 800fff4:	e7e0      	b.n	800ffb8 <rmw_context_fini+0x1c>
 800fff6:	4626      	mov	r6, r4
 800fff8:	e7de      	b.n	800ffb8 <rmw_context_fini+0x1c>
 800fffa:	bf00      	nop
 800fffc:	2000b4e4 	.word	0x2000b4e4

08010000 <create_node>:
 8010000:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010004:	b083      	sub	sp, #12
 8010006:	2b00      	cmp	r3, #0
 8010008:	d05f      	beq.n	80100ca <create_node+0xca>
 801000a:	4606      	mov	r6, r0
 801000c:	4835      	ldr	r0, [pc, #212]	@ (80100e4 <create_node+0xe4>)
 801000e:	460f      	mov	r7, r1
 8010010:	4690      	mov	r8, r2
 8010012:	461d      	mov	r5, r3
 8010014:	f008 fb68 	bl	80186e8 <get_memory>
 8010018:	2800      	cmp	r0, #0
 801001a:	d056      	beq.n	80100ca <create_node+0xca>
 801001c:	6884      	ldr	r4, [r0, #8]
 801001e:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8010020:	6123      	str	r3, [r4, #16]
 8010022:	f008 fbc9 	bl	80187b8 <rmw_get_implementation_identifier>
 8010026:	f104 092c 	add.w	r9, r4, #44	@ 0x2c
 801002a:	e9c4 0406 	strd	r0, r4, [r4, #24]
 801002e:	f8c4 9020 	str.w	r9, [r4, #32]
 8010032:	4630      	mov	r0, r6
 8010034:	f7f0 f8fe 	bl	8000234 <strlen>
 8010038:	1c42      	adds	r2, r0, #1
 801003a:	2a3c      	cmp	r2, #60	@ 0x3c
 801003c:	f104 0518 	add.w	r5, r4, #24
 8010040:	d840      	bhi.n	80100c4 <create_node+0xc4>
 8010042:	4648      	mov	r0, r9
 8010044:	4631      	mov	r1, r6
 8010046:	f104 0968 	add.w	r9, r4, #104	@ 0x68
 801004a:	f00b fa50 	bl	801b4ee <memcpy>
 801004e:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
 8010052:	4638      	mov	r0, r7
 8010054:	f7f0 f8ee 	bl	8000234 <strlen>
 8010058:	1c42      	adds	r2, r0, #1
 801005a:	2a3c      	cmp	r2, #60	@ 0x3c
 801005c:	d832      	bhi.n	80100c4 <create_node+0xc4>
 801005e:	4639      	mov	r1, r7
 8010060:	4648      	mov	r0, r9
 8010062:	f00b fa44 	bl	801b4ee <memcpy>
 8010066:	6923      	ldr	r3, [r4, #16]
 8010068:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801006c:	2101      	movs	r1, #1
 801006e:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	@ 0x594
 8010072:	1842      	adds	r2, r0, r1
 8010074:	f8a3 2594 	strh.w	r2, [r3, #1428]	@ 0x594
 8010078:	f001 fd4e 	bl	8011b18 <uxr_object_id>
 801007c:	6160      	str	r0, [r4, #20]
 801007e:	783b      	ldrb	r3, [r7, #0]
 8010080:	2b2f      	cmp	r3, #47	@ 0x2f
 8010082:	d127      	bne.n	80100d4 <create_node+0xd4>
 8010084:	787b      	ldrb	r3, [r7, #1]
 8010086:	bb2b      	cbnz	r3, 80100d4 <create_node+0xd4>
 8010088:	4a17      	ldr	r2, [pc, #92]	@ (80100e8 <create_node+0xe8>)
 801008a:	4818      	ldr	r0, [pc, #96]	@ (80100ec <create_node+0xec>)
 801008c:	4633      	mov	r3, r6
 801008e:	213c      	movs	r1, #60	@ 0x3c
 8010090:	f00a fff0 	bl	801b074 <sniprintf>
 8010094:	6920      	ldr	r0, [r4, #16]
 8010096:	4915      	ldr	r1, [pc, #84]	@ (80100ec <create_node+0xec>)
 8010098:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 801009c:	9100      	str	r1, [sp, #0]
 801009e:	2106      	movs	r1, #6
 80100a0:	9101      	str	r1, [sp, #4]
 80100a2:	6811      	ldr	r1, [r2, #0]
 80100a4:	6962      	ldr	r2, [r4, #20]
 80100a6:	fa1f f388 	uxth.w	r3, r8
 80100aa:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80100ae:	f001 fabb 	bl	8011628 <uxr_buffer_create_participant_bin>
 80100b2:	4602      	mov	r2, r0
 80100b4:	6920      	ldr	r0, [r4, #16]
 80100b6:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 80100ba:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 80100be:	f000 fefd 	bl	8010ebc <run_xrce_session>
 80100c2:	b918      	cbnz	r0, 80100cc <create_node+0xcc>
 80100c4:	4628      	mov	r0, r5
 80100c6:	f000 fd87 	bl	8010bd8 <rmw_uxrce_fini_node_memory>
 80100ca:	2500      	movs	r5, #0
 80100cc:	4628      	mov	r0, r5
 80100ce:	b003      	add	sp, #12
 80100d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80100d4:	4a06      	ldr	r2, [pc, #24]	@ (80100f0 <create_node+0xf0>)
 80100d6:	9600      	str	r6, [sp, #0]
 80100d8:	463b      	mov	r3, r7
 80100da:	213c      	movs	r1, #60	@ 0x3c
 80100dc:	4803      	ldr	r0, [pc, #12]	@ (80100ec <create_node+0xec>)
 80100de:	f00a ffc9 	bl	801b074 <sniprintf>
 80100e2:	e7d7      	b.n	8010094 <create_node+0x94>
 80100e4:	2000b4e4 	.word	0x2000b4e4
 80100e8:	0801deec 	.word	0x0801deec
 80100ec:	20006bd8 	.word	0x20006bd8
 80100f0:	0801ded4 	.word	0x0801ded4

080100f4 <rmw_create_node>:
 80100f4:	b199      	cbz	r1, 801011e <rmw_create_node+0x2a>
 80100f6:	780b      	ldrb	r3, [r1, #0]
 80100f8:	468c      	mov	ip, r1
 80100fa:	b183      	cbz	r3, 801011e <rmw_create_node+0x2a>
 80100fc:	b410      	push	{r4}
 80100fe:	4614      	mov	r4, r2
 8010100:	b14a      	cbz	r2, 8010116 <rmw_create_node+0x22>
 8010102:	7813      	ldrb	r3, [r2, #0]
 8010104:	b13b      	cbz	r3, 8010116 <rmw_create_node+0x22>
 8010106:	6c82      	ldr	r2, [r0, #72]	@ 0x48
 8010108:	4603      	mov	r3, r0
 801010a:	4621      	mov	r1, r4
 801010c:	4660      	mov	r0, ip
 801010e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010112:	f7ff bf75 	b.w	8010000 <create_node>
 8010116:	2000      	movs	r0, #0
 8010118:	f85d 4b04 	ldr.w	r4, [sp], #4
 801011c:	4770      	bx	lr
 801011e:	2000      	movs	r0, #0
 8010120:	4770      	bx	lr
 8010122:	bf00      	nop

08010124 <rmw_destroy_node>:
 8010124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010126:	b328      	cbz	r0, 8010174 <rmw_destroy_node+0x50>
 8010128:	4607      	mov	r7, r0
 801012a:	6800      	ldr	r0, [r0, #0]
 801012c:	b120      	cbz	r0, 8010138 <rmw_destroy_node+0x14>
 801012e:	4b36      	ldr	r3, [pc, #216]	@ (8010208 <rmw_destroy_node+0xe4>)
 8010130:	6819      	ldr	r1, [r3, #0]
 8010132:	f7f0 f875 	bl	8000220 <strcmp>
 8010136:	b9e8      	cbnz	r0, 8010174 <rmw_destroy_node+0x50>
 8010138:	687d      	ldr	r5, [r7, #4]
 801013a:	b1dd      	cbz	r5, 8010174 <rmw_destroy_node+0x50>
 801013c:	4b33      	ldr	r3, [pc, #204]	@ (801020c <rmw_destroy_node+0xe8>)
 801013e:	681c      	ldr	r4, [r3, #0]
 8010140:	2c00      	cmp	r4, #0
 8010142:	d05f      	beq.n	8010204 <rmw_destroy_node+0xe0>
 8010144:	2600      	movs	r6, #0
 8010146:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 801014a:	f8d1 3080 	ldr.w	r3, [r1, #128]	@ 0x80
 801014e:	429d      	cmp	r5, r3
 8010150:	d013      	beq.n	801017a <rmw_destroy_node+0x56>
 8010152:	2c00      	cmp	r4, #0
 8010154:	d1f7      	bne.n	8010146 <rmw_destroy_node+0x22>
 8010156:	4b2e      	ldr	r3, [pc, #184]	@ (8010210 <rmw_destroy_node+0xec>)
 8010158:	681c      	ldr	r4, [r3, #0]
 801015a:	b1c4      	cbz	r4, 801018e <rmw_destroy_node+0x6a>
 801015c:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8010160:	6a0b      	ldr	r3, [r1, #32]
 8010162:	429d      	cmp	r5, r3
 8010164:	d1f9      	bne.n	801015a <rmw_destroy_node+0x36>
 8010166:	317c      	adds	r1, #124	@ 0x7c
 8010168:	4638      	mov	r0, r7
 801016a:	f000 fb37 	bl	80107dc <rmw_destroy_subscription>
 801016e:	2801      	cmp	r0, #1
 8010170:	4606      	mov	r6, r0
 8010172:	d1f2      	bne.n	801015a <rmw_destroy_node+0x36>
 8010174:	2601      	movs	r6, #1
 8010176:	4630      	mov	r0, r6
 8010178:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801017a:	3184      	adds	r1, #132	@ 0x84
 801017c:	4638      	mov	r0, r7
 801017e:	f000 f9a5 	bl	80104cc <rmw_destroy_publisher>
 8010182:	2801      	cmp	r0, #1
 8010184:	4606      	mov	r6, r0
 8010186:	d0f5      	beq.n	8010174 <rmw_destroy_node+0x50>
 8010188:	2c00      	cmp	r4, #0
 801018a:	d1dc      	bne.n	8010146 <rmw_destroy_node+0x22>
 801018c:	e7e3      	b.n	8010156 <rmw_destroy_node+0x32>
 801018e:	4b21      	ldr	r3, [pc, #132]	@ (8010214 <rmw_destroy_node+0xf0>)
 8010190:	681c      	ldr	r4, [r3, #0]
 8010192:	b16c      	cbz	r4, 80101b0 <rmw_destroy_node+0x8c>
 8010194:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8010198:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 801019a:	429d      	cmp	r5, r3
 801019c:	d1f9      	bne.n	8010192 <rmw_destroy_node+0x6e>
 801019e:	317c      	adds	r1, #124	@ 0x7c
 80101a0:	4638      	mov	r0, r7
 80101a2:	f000 f9e5 	bl	8010570 <rmw_destroy_service>
 80101a6:	2801      	cmp	r0, #1
 80101a8:	4606      	mov	r6, r0
 80101aa:	d0e3      	beq.n	8010174 <rmw_destroy_node+0x50>
 80101ac:	2c00      	cmp	r4, #0
 80101ae:	d1f1      	bne.n	8010194 <rmw_destroy_node+0x70>
 80101b0:	4b19      	ldr	r3, [pc, #100]	@ (8010218 <rmw_destroy_node+0xf4>)
 80101b2:	681c      	ldr	r4, [r3, #0]
 80101b4:	b16c      	cbz	r4, 80101d2 <rmw_destroy_node+0xae>
 80101b6:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 80101ba:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 80101bc:	429d      	cmp	r5, r3
 80101be:	d1f9      	bne.n	80101b4 <rmw_destroy_node+0x90>
 80101c0:	317c      	adds	r1, #124	@ 0x7c
 80101c2:	4638      	mov	r0, r7
 80101c4:	f008 fab4 	bl	8018730 <rmw_destroy_client>
 80101c8:	2801      	cmp	r0, #1
 80101ca:	4606      	mov	r6, r0
 80101cc:	d0d2      	beq.n	8010174 <rmw_destroy_node+0x50>
 80101ce:	2c00      	cmp	r4, #0
 80101d0:	d1f1      	bne.n	80101b6 <rmw_destroy_node+0x92>
 80101d2:	6928      	ldr	r0, [r5, #16]
 80101d4:	696a      	ldr	r2, [r5, #20]
 80101d6:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80101da:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80101de:	6819      	ldr	r1, [r3, #0]
 80101e0:	f001 f9d6 	bl	8011590 <uxr_buffer_delete_entity>
 80101e4:	4602      	mov	r2, r0
 80101e6:	6928      	ldr	r0, [r5, #16]
 80101e8:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80101ec:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80101f0:	f000 fe64 	bl	8010ebc <run_xrce_session>
 80101f4:	2800      	cmp	r0, #0
 80101f6:	bf08      	it	eq
 80101f8:	2602      	moveq	r6, #2
 80101fa:	4638      	mov	r0, r7
 80101fc:	f000 fcec 	bl	8010bd8 <rmw_uxrce_fini_node_memory>
 8010200:	4630      	mov	r0, r6
 8010202:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010204:	4626      	mov	r6, r4
 8010206:	e7a6      	b.n	8010156 <rmw_destroy_node+0x32>
 8010208:	0801eabc 	.word	0x0801eabc
 801020c:	2000b4f4 	.word	0x2000b4f4
 8010210:	2000b534 	.word	0x2000b534
 8010214:	2000b504 	.word	0x2000b504
 8010218:	20006c14 	.word	0x20006c14

0801021c <rmw_node_get_graph_guard_condition>:
 801021c:	6843      	ldr	r3, [r0, #4]
 801021e:	6918      	ldr	r0, [r3, #16]
 8010220:	f500 705a 	add.w	r0, r0, #872	@ 0x368
 8010224:	4770      	bx	lr
 8010226:	bf00      	nop

08010228 <flush_session>:
 8010228:	6fc9      	ldr	r1, [r1, #124]	@ 0x7c
 801022a:	f002 bab5 	b.w	8012798 <uxr_run_session_until_confirm_delivery>
 801022e:	bf00      	nop

08010230 <rmw_publish>:
 8010230:	2800      	cmp	r0, #0
 8010232:	d053      	beq.n	80102dc <rmw_publish+0xac>
 8010234:	b570      	push	{r4, r5, r6, lr}
 8010236:	460d      	mov	r5, r1
 8010238:	b08e      	sub	sp, #56	@ 0x38
 801023a:	2900      	cmp	r1, #0
 801023c:	d04b      	beq.n	80102d6 <rmw_publish+0xa6>
 801023e:	4604      	mov	r4, r0
 8010240:	6800      	ldr	r0, [r0, #0]
 8010242:	f000 febb 	bl	8010fbc <is_uxrce_rmw_identifier_valid>
 8010246:	2800      	cmp	r0, #0
 8010248:	d045      	beq.n	80102d6 <rmw_publish+0xa6>
 801024a:	6866      	ldr	r6, [r4, #4]
 801024c:	2e00      	cmp	r6, #0
 801024e:	d042      	beq.n	80102d6 <rmw_publish+0xa6>
 8010250:	69b4      	ldr	r4, [r6, #24]
 8010252:	4628      	mov	r0, r5
 8010254:	6923      	ldr	r3, [r4, #16]
 8010256:	4798      	blx	r3
 8010258:	69f3      	ldr	r3, [r6, #28]
 801025a:	9005      	str	r0, [sp, #20]
 801025c:	b113      	cbz	r3, 8010264 <rmw_publish+0x34>
 801025e:	a805      	add	r0, sp, #20
 8010260:	4798      	blx	r3
 8010262:	9805      	ldr	r0, [sp, #20]
 8010264:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 8010268:	691b      	ldr	r3, [r3, #16]
 801026a:	9000      	str	r0, [sp, #0]
 801026c:	6972      	ldr	r2, [r6, #20]
 801026e:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 8010270:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 8010274:	ab06      	add	r3, sp, #24
 8010276:	f003 fd61 	bl	8013d3c <uxr_prepare_output_stream>
 801027a:	b1d8      	cbz	r0, 80102b4 <rmw_publish+0x84>
 801027c:	68a3      	ldr	r3, [r4, #8]
 801027e:	a906      	add	r1, sp, #24
 8010280:	4628      	mov	r0, r5
 8010282:	4798      	blx	r3
 8010284:	6a33      	ldr	r3, [r6, #32]
 8010286:	4604      	mov	r4, r0
 8010288:	b10b      	cbz	r3, 801028e <rmw_publish+0x5e>
 801028a:	a806      	add	r0, sp, #24
 801028c:	4798      	blx	r3
 801028e:	f896 307a 	ldrb.w	r3, [r6, #122]	@ 0x7a
 8010292:	2b01      	cmp	r3, #1
 8010294:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 8010298:	d022      	beq.n	80102e0 <rmw_publish+0xb0>
 801029a:	6918      	ldr	r0, [r3, #16]
 801029c:	6ff1      	ldr	r1, [r6, #124]	@ 0x7c
 801029e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80102a2:	f002 fa79 	bl	8012798 <uxr_run_session_until_confirm_delivery>
 80102a6:	4020      	ands	r0, r4
 80102a8:	b2c4      	uxtb	r4, r0
 80102aa:	f084 0001 	eor.w	r0, r4, #1
 80102ae:	b2c0      	uxtb	r0, r0
 80102b0:	b00e      	add	sp, #56	@ 0x38
 80102b2:	bd70      	pop	{r4, r5, r6, pc}
 80102b4:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 80102b8:	6918      	ldr	r0, [r3, #16]
 80102ba:	9b05      	ldr	r3, [sp, #20]
 80102bc:	9300      	str	r3, [sp, #0]
 80102be:	4b0b      	ldr	r3, [pc, #44]	@ (80102ec <rmw_publish+0xbc>)
 80102c0:	9301      	str	r3, [sp, #4]
 80102c2:	9602      	str	r6, [sp, #8]
 80102c4:	6972      	ldr	r2, [r6, #20]
 80102c6:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 80102c8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80102cc:	ab06      	add	r3, sp, #24
 80102ce:	f003 fd65 	bl	8013d9c <uxr_prepare_output_stream_fragmented>
 80102d2:	2800      	cmp	r0, #0
 80102d4:	d1d2      	bne.n	801027c <rmw_publish+0x4c>
 80102d6:	2001      	movs	r0, #1
 80102d8:	b00e      	add	sp, #56	@ 0x38
 80102da:	bd70      	pop	{r4, r5, r6, pc}
 80102dc:	2001      	movs	r0, #1
 80102de:	4770      	bx	lr
 80102e0:	6918      	ldr	r0, [r3, #16]
 80102e2:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80102e6:	f001 fe97 	bl	8012018 <uxr_flash_output_streams>
 80102ea:	e7de      	b.n	80102aa <rmw_publish+0x7a>
 80102ec:	08010229 	.word	0x08010229

080102f0 <rmw_create_publisher>:
 80102f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80102f4:	b087      	sub	sp, #28
 80102f6:	2800      	cmp	r0, #0
 80102f8:	f000 80cc 	beq.w	8010494 <rmw_create_publisher+0x1a4>
 80102fc:	460e      	mov	r6, r1
 80102fe:	2900      	cmp	r1, #0
 8010300:	f000 80c8 	beq.w	8010494 <rmw_create_publisher+0x1a4>
 8010304:	4604      	mov	r4, r0
 8010306:	6800      	ldr	r0, [r0, #0]
 8010308:	4615      	mov	r5, r2
 801030a:	4698      	mov	r8, r3
 801030c:	f000 fe56 	bl	8010fbc <is_uxrce_rmw_identifier_valid>
 8010310:	2800      	cmp	r0, #0
 8010312:	f000 80bf 	beq.w	8010494 <rmw_create_publisher+0x1a4>
 8010316:	2d00      	cmp	r5, #0
 8010318:	f000 80bc 	beq.w	8010494 <rmw_create_publisher+0x1a4>
 801031c:	782b      	ldrb	r3, [r5, #0]
 801031e:	2b00      	cmp	r3, #0
 8010320:	f000 80b8 	beq.w	8010494 <rmw_create_publisher+0x1a4>
 8010324:	f1b8 0f00 	cmp.w	r8, #0
 8010328:	f000 80b4 	beq.w	8010494 <rmw_create_publisher+0x1a4>
 801032c:	485c      	ldr	r0, [pc, #368]	@ (80104a0 <rmw_create_publisher+0x1b0>)
 801032e:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8010332:	f008 f9d9 	bl	80186e8 <get_memory>
 8010336:	2800      	cmp	r0, #0
 8010338:	f000 80ac 	beq.w	8010494 <rmw_create_publisher+0x1a4>
 801033c:	6884      	ldr	r4, [r0, #8]
 801033e:	f8c4 4088 	str.w	r4, [r4, #136]	@ 0x88
 8010342:	f008 fa39 	bl	80187b8 <rmw_get_implementation_identifier>
 8010346:	f104 0a9c 	add.w	sl, r4, #156	@ 0x9c
 801034a:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
 801034e:	f8c4 a08c 	str.w	sl, [r4, #140]	@ 0x8c
 8010352:	4628      	mov	r0, r5
 8010354:	f7ef ff6e 	bl	8000234 <strlen>
 8010358:	3001      	adds	r0, #1
 801035a:	283c      	cmp	r0, #60	@ 0x3c
 801035c:	f104 0784 	add.w	r7, r4, #132	@ 0x84
 8010360:	f200 8091 	bhi.w	8010486 <rmw_create_publisher+0x196>
 8010364:	4a4f      	ldr	r2, [pc, #316]	@ (80104a4 <rmw_create_publisher+0x1b4>)
 8010366:	462b      	mov	r3, r5
 8010368:	213c      	movs	r1, #60	@ 0x3c
 801036a:	4650      	mov	r0, sl
 801036c:	f00a fe82 	bl	801b074 <sniprintf>
 8010370:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8010374:	67e3      	str	r3, [r4, #124]	@ 0x7c
 8010376:	4641      	mov	r1, r8
 8010378:	f8c4 9080 	str.w	r9, [r4, #128]	@ 0x80
 801037c:	2250      	movs	r2, #80	@ 0x50
 801037e:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8010382:	f00b f8b4 	bl	801b4ee <memcpy>
 8010386:	f898 3008 	ldrb.w	r3, [r8, #8]
 801038a:	4947      	ldr	r1, [pc, #284]	@ (80104a8 <rmw_create_publisher+0x1b8>)
 801038c:	2b02      	cmp	r3, #2
 801038e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010392:	bf0c      	ite	eq
 8010394:	f8d3 337c 	ldreq.w	r3, [r3, #892]	@ 0x37c
 8010398:	f8d3 3378 	ldrne.w	r3, [r3, #888]	@ 0x378
 801039c:	67a3      	str	r3, [r4, #120]	@ 0x78
 801039e:	2300      	movs	r3, #0
 80103a0:	e9c4 3307 	strd	r3, r3, [r4, #28]
 80103a4:	4630      	mov	r0, r6
 80103a6:	f000 fe17 	bl	8010fd8 <get_message_typesupport_handle>
 80103aa:	2800      	cmp	r0, #0
 80103ac:	d06b      	beq.n	8010486 <rmw_create_publisher+0x196>
 80103ae:	6842      	ldr	r2, [r0, #4]
 80103b0:	61a2      	str	r2, [r4, #24]
 80103b2:	2a00      	cmp	r2, #0
 80103b4:	d067      	beq.n	8010486 <rmw_create_publisher+0x196>
 80103b6:	4629      	mov	r1, r5
 80103b8:	4643      	mov	r3, r8
 80103ba:	4648      	mov	r0, r9
 80103bc:	f008 fa02 	bl	80187c4 <create_topic>
 80103c0:	6260      	str	r0, [r4, #36]	@ 0x24
 80103c2:	2800      	cmp	r0, #0
 80103c4:	d063      	beq.n	801048e <rmw_create_publisher+0x19e>
 80103c6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80103ca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80103ce:	2103      	movs	r1, #3
 80103d0:	f8b3 0598 	ldrh.w	r0, [r3, #1432]	@ 0x598
 80103d4:	1c42      	adds	r2, r0, #1
 80103d6:	f8a3 2598 	strh.w	r2, [r3, #1432]	@ 0x598
 80103da:	f001 fb9d 	bl	8011b18 <uxr_object_id>
 80103de:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 80103e2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80103e6:	6120      	str	r0, [r4, #16]
 80103e8:	f8d3 3384 	ldr.w	r3, [r3, #900]	@ 0x384
 80103ec:	6910      	ldr	r0, [r2, #16]
 80103ee:	2506      	movs	r5, #6
 80103f0:	9500      	str	r5, [sp, #0]
 80103f2:	6819      	ldr	r1, [r3, #0]
 80103f4:	6922      	ldr	r2, [r4, #16]
 80103f6:	f8d9 3014 	ldr.w	r3, [r9, #20]
 80103fa:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80103fe:	f001 f97b 	bl	80116f8 <uxr_buffer_create_publisher_bin>
 8010402:	4602      	mov	r2, r0
 8010404:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8010408:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 801040c:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8010410:	f000 fd54 	bl	8010ebc <run_xrce_session>
 8010414:	b3b8      	cbz	r0, 8010486 <rmw_create_publisher+0x196>
 8010416:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801041a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801041e:	2105      	movs	r1, #5
 8010420:	f8b3 059a 	ldrh.w	r0, [r3, #1434]	@ 0x59a
 8010424:	1c42      	adds	r2, r0, #1
 8010426:	f8a3 259a 	strh.w	r2, [r3, #1434]	@ 0x59a
 801042a:	f001 fb75 	bl	8011b18 <uxr_object_id>
 801042e:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 8010432:	6160      	str	r0, [r4, #20]
 8010434:	691e      	ldr	r6, [r3, #16]
 8010436:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801043a:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
 801043e:	f10d 0a10 	add.w	sl, sp, #16
 8010442:	4641      	mov	r1, r8
 8010444:	4650      	mov	r0, sl
 8010446:	f8d3 8384 	ldr.w	r8, [r3, #900]	@ 0x384
 801044a:	f000 fd53 	bl	8010ef4 <convert_qos_profile>
 801044e:	9503      	str	r5, [sp, #12]
 8010450:	e89a 0003 	ldmia.w	sl, {r0, r1}
 8010454:	9001      	str	r0, [sp, #4]
 8010456:	f8ad 1008 	strh.w	r1, [sp, #8]
 801045a:	f8db 3010 	ldr.w	r3, [fp, #16]
 801045e:	9300      	str	r3, [sp, #0]
 8010460:	f506 7628 	add.w	r6, r6, #672	@ 0x2a0
 8010464:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 8010468:	f8d8 1000 	ldr.w	r1, [r8]
 801046c:	4630      	mov	r0, r6
 801046e:	f001 f9a3 	bl	80117b8 <uxr_buffer_create_datawriter_bin>
 8010472:	4602      	mov	r2, r0
 8010474:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8010478:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 801047c:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8010480:	f000 fd1c 	bl	8010ebc <run_xrce_session>
 8010484:	b938      	cbnz	r0, 8010496 <rmw_create_publisher+0x1a6>
 8010486:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8010488:	b108      	cbz	r0, 801048e <rmw_create_publisher+0x19e>
 801048a:	f000 fc15 	bl	8010cb8 <rmw_uxrce_fini_topic_memory>
 801048e:	4638      	mov	r0, r7
 8010490:	f000 fbba 	bl	8010c08 <rmw_uxrce_fini_publisher_memory>
 8010494:	2700      	movs	r7, #0
 8010496:	4638      	mov	r0, r7
 8010498:	b007      	add	sp, #28
 801049a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801049e:	bf00      	nop
 80104a0:	2000b4f4 	.word	0x2000b4f4
 80104a4:	0801deec 	.word	0x0801deec
 80104a8:	0801de64 	.word	0x0801de64

080104ac <rmw_publisher_get_actual_qos>:
 80104ac:	b150      	cbz	r0, 80104c4 <rmw_publisher_get_actual_qos+0x18>
 80104ae:	b508      	push	{r3, lr}
 80104b0:	460b      	mov	r3, r1
 80104b2:	b149      	cbz	r1, 80104c8 <rmw_publisher_get_actual_qos+0x1c>
 80104b4:	6841      	ldr	r1, [r0, #4]
 80104b6:	2250      	movs	r2, #80	@ 0x50
 80104b8:	3128      	adds	r1, #40	@ 0x28
 80104ba:	4618      	mov	r0, r3
 80104bc:	f00b f817 	bl	801b4ee <memcpy>
 80104c0:	2000      	movs	r0, #0
 80104c2:	bd08      	pop	{r3, pc}
 80104c4:	200b      	movs	r0, #11
 80104c6:	4770      	bx	lr
 80104c8:	200b      	movs	r0, #11
 80104ca:	bd08      	pop	{r3, pc}

080104cc <rmw_destroy_publisher>:
 80104cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80104ce:	b128      	cbz	r0, 80104dc <rmw_destroy_publisher+0x10>
 80104d0:	4604      	mov	r4, r0
 80104d2:	6800      	ldr	r0, [r0, #0]
 80104d4:	460d      	mov	r5, r1
 80104d6:	f000 fd71 	bl	8010fbc <is_uxrce_rmw_identifier_valid>
 80104da:	b910      	cbnz	r0, 80104e2 <rmw_destroy_publisher+0x16>
 80104dc:	2401      	movs	r4, #1
 80104de:	4620      	mov	r0, r4
 80104e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80104e2:	6863      	ldr	r3, [r4, #4]
 80104e4:	2b00      	cmp	r3, #0
 80104e6:	d0f9      	beq.n	80104dc <rmw_destroy_publisher+0x10>
 80104e8:	2d00      	cmp	r5, #0
 80104ea:	d0f7      	beq.n	80104dc <rmw_destroy_publisher+0x10>
 80104ec:	6828      	ldr	r0, [r5, #0]
 80104ee:	f000 fd65 	bl	8010fbc <is_uxrce_rmw_identifier_valid>
 80104f2:	2800      	cmp	r0, #0
 80104f4:	d0f2      	beq.n	80104dc <rmw_destroy_publisher+0x10>
 80104f6:	686c      	ldr	r4, [r5, #4]
 80104f8:	2c00      	cmp	r4, #0
 80104fa:	d0ef      	beq.n	80104dc <rmw_destroy_publisher+0x10>
 80104fc:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 80104fe:	f8d4 7080 	ldr.w	r7, [r4, #128]	@ 0x80
 8010502:	f008 f9af 	bl	8018864 <destroy_topic>
 8010506:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 801050a:	6962      	ldr	r2, [r4, #20]
 801050c:	6918      	ldr	r0, [r3, #16]
 801050e:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8010512:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8010516:	6819      	ldr	r1, [r3, #0]
 8010518:	f001 f83a 	bl	8011590 <uxr_buffer_delete_entity>
 801051c:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 8010520:	6922      	ldr	r2, [r4, #16]
 8010522:	691b      	ldr	r3, [r3, #16]
 8010524:	f8d3 1388 	ldr.w	r1, [r3, #904]	@ 0x388
 8010528:	4604      	mov	r4, r0
 801052a:	6809      	ldr	r1, [r1, #0]
 801052c:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 8010530:	f001 f82e 	bl	8011590 <uxr_buffer_delete_entity>
 8010534:	693e      	ldr	r6, [r7, #16]
 8010536:	4622      	mov	r2, r4
 8010538:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 801053c:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 8010540:	4604      	mov	r4, r0
 8010542:	4630      	mov	r0, r6
 8010544:	f000 fcba 	bl	8010ebc <run_xrce_session>
 8010548:	693e      	ldr	r6, [r7, #16]
 801054a:	4622      	mov	r2, r4
 801054c:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 8010550:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 8010554:	4604      	mov	r4, r0
 8010556:	4630      	mov	r0, r6
 8010558:	f000 fcb0 	bl	8010ebc <run_xrce_session>
 801055c:	b12c      	cbz	r4, 801056a <rmw_destroy_publisher+0x9e>
 801055e:	b120      	cbz	r0, 801056a <rmw_destroy_publisher+0x9e>
 8010560:	2400      	movs	r4, #0
 8010562:	4628      	mov	r0, r5
 8010564:	f000 fb50 	bl	8010c08 <rmw_uxrce_fini_publisher_memory>
 8010568:	e7b9      	b.n	80104de <rmw_destroy_publisher+0x12>
 801056a:	2402      	movs	r4, #2
 801056c:	e7f9      	b.n	8010562 <rmw_destroy_publisher+0x96>
 801056e:	bf00      	nop

08010570 <rmw_destroy_service>:
 8010570:	b570      	push	{r4, r5, r6, lr}
 8010572:	b128      	cbz	r0, 8010580 <rmw_destroy_service+0x10>
 8010574:	4604      	mov	r4, r0
 8010576:	6800      	ldr	r0, [r0, #0]
 8010578:	460d      	mov	r5, r1
 801057a:	f000 fd1f 	bl	8010fbc <is_uxrce_rmw_identifier_valid>
 801057e:	b910      	cbnz	r0, 8010586 <rmw_destroy_service+0x16>
 8010580:	2401      	movs	r4, #1
 8010582:	4620      	mov	r0, r4
 8010584:	bd70      	pop	{r4, r5, r6, pc}
 8010586:	6863      	ldr	r3, [r4, #4]
 8010588:	2b00      	cmp	r3, #0
 801058a:	d0f9      	beq.n	8010580 <rmw_destroy_service+0x10>
 801058c:	2d00      	cmp	r5, #0
 801058e:	d0f7      	beq.n	8010580 <rmw_destroy_service+0x10>
 8010590:	6828      	ldr	r0, [r5, #0]
 8010592:	f000 fd13 	bl	8010fbc <is_uxrce_rmw_identifier_valid>
 8010596:	2800      	cmp	r0, #0
 8010598:	d0f2      	beq.n	8010580 <rmw_destroy_service+0x10>
 801059a:	686e      	ldr	r6, [r5, #4]
 801059c:	2e00      	cmp	r6, #0
 801059e:	d0ef      	beq.n	8010580 <rmw_destroy_service+0x10>
 80105a0:	6864      	ldr	r4, [r4, #4]
 80105a2:	6932      	ldr	r2, [r6, #16]
 80105a4:	6920      	ldr	r0, [r4, #16]
 80105a6:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80105aa:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80105ae:	6819      	ldr	r1, [r3, #0]
 80105b0:	f001 fb1c 	bl	8011bec <uxr_buffer_cancel_data>
 80105b4:	4602      	mov	r2, r0
 80105b6:	6920      	ldr	r0, [r4, #16]
 80105b8:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80105bc:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80105c0:	f000 fc7c 	bl	8010ebc <run_xrce_session>
 80105c4:	6920      	ldr	r0, [r4, #16]
 80105c6:	6932      	ldr	r2, [r6, #16]
 80105c8:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80105cc:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80105d0:	6819      	ldr	r1, [r3, #0]
 80105d2:	f000 ffdd 	bl	8011590 <uxr_buffer_delete_entity>
 80105d6:	4602      	mov	r2, r0
 80105d8:	6920      	ldr	r0, [r4, #16]
 80105da:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80105de:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80105e2:	f000 fc6b 	bl	8010ebc <run_xrce_session>
 80105e6:	2800      	cmp	r0, #0
 80105e8:	4628      	mov	r0, r5
 80105ea:	bf14      	ite	ne
 80105ec:	2400      	movne	r4, #0
 80105ee:	2402      	moveq	r4, #2
 80105f0:	f000 fb36 	bl	8010c60 <rmw_uxrce_fini_service_memory>
 80105f4:	e7c5      	b.n	8010582 <rmw_destroy_service+0x12>
 80105f6:	bf00      	nop

080105f8 <rmw_create_subscription>:
 80105f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80105fc:	b08d      	sub	sp, #52	@ 0x34
 80105fe:	2800      	cmp	r0, #0
 8010600:	f000 80d1 	beq.w	80107a6 <rmw_create_subscription+0x1ae>
 8010604:	460e      	mov	r6, r1
 8010606:	2900      	cmp	r1, #0
 8010608:	f000 80cd 	beq.w	80107a6 <rmw_create_subscription+0x1ae>
 801060c:	4604      	mov	r4, r0
 801060e:	6800      	ldr	r0, [r0, #0]
 8010610:	4615      	mov	r5, r2
 8010612:	4698      	mov	r8, r3
 8010614:	f000 fcd2 	bl	8010fbc <is_uxrce_rmw_identifier_valid>
 8010618:	2800      	cmp	r0, #0
 801061a:	f000 80c4 	beq.w	80107a6 <rmw_create_subscription+0x1ae>
 801061e:	2d00      	cmp	r5, #0
 8010620:	f000 80c1 	beq.w	80107a6 <rmw_create_subscription+0x1ae>
 8010624:	782b      	ldrb	r3, [r5, #0]
 8010626:	2b00      	cmp	r3, #0
 8010628:	f000 80bd 	beq.w	80107a6 <rmw_create_subscription+0x1ae>
 801062c:	f1b8 0f00 	cmp.w	r8, #0
 8010630:	f000 80b9 	beq.w	80107a6 <rmw_create_subscription+0x1ae>
 8010634:	485e      	ldr	r0, [pc, #376]	@ (80107b0 <rmw_create_subscription+0x1b8>)
 8010636:	f8d4 9004 	ldr.w	r9, [r4, #4]
 801063a:	f008 f855 	bl	80186e8 <get_memory>
 801063e:	4604      	mov	r4, r0
 8010640:	2800      	cmp	r0, #0
 8010642:	f000 80b1 	beq.w	80107a8 <rmw_create_subscription+0x1b0>
 8010646:	6887      	ldr	r7, [r0, #8]
 8010648:	f8c7 7080 	str.w	r7, [r7, #128]	@ 0x80
 801064c:	f008 f8b4 	bl	80187b8 <rmw_get_implementation_identifier>
 8010650:	f107 0a98 	add.w	sl, r7, #152	@ 0x98
 8010654:	67f8      	str	r0, [r7, #124]	@ 0x7c
 8010656:	f8c7 a084 	str.w	sl, [r7, #132]	@ 0x84
 801065a:	4628      	mov	r0, r5
 801065c:	f7ef fdea 	bl	8000234 <strlen>
 8010660:	3001      	adds	r0, #1
 8010662:	283c      	cmp	r0, #60	@ 0x3c
 8010664:	f107 047c 	add.w	r4, r7, #124	@ 0x7c
 8010668:	f200 8096 	bhi.w	8010798 <rmw_create_subscription+0x1a0>
 801066c:	4a51      	ldr	r2, [pc, #324]	@ (80107b4 <rmw_create_subscription+0x1bc>)
 801066e:	462b      	mov	r3, r5
 8010670:	213c      	movs	r1, #60	@ 0x3c
 8010672:	4650      	mov	r0, sl
 8010674:	f00a fcfe 	bl	801b074 <sniprintf>
 8010678:	4641      	mov	r1, r8
 801067a:	f8c7 9020 	str.w	r9, [r7, #32]
 801067e:	2250      	movs	r2, #80	@ 0x50
 8010680:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8010684:	f00a ff33 	bl	801b4ee <memcpy>
 8010688:	494b      	ldr	r1, [pc, #300]	@ (80107b8 <rmw_create_subscription+0x1c0>)
 801068a:	4630      	mov	r0, r6
 801068c:	f000 fca4 	bl	8010fd8 <get_message_typesupport_handle>
 8010690:	2800      	cmp	r0, #0
 8010692:	f000 8081 	beq.w	8010798 <rmw_create_subscription+0x1a0>
 8010696:	6842      	ldr	r2, [r0, #4]
 8010698:	61ba      	str	r2, [r7, #24]
 801069a:	2a00      	cmp	r2, #0
 801069c:	d07c      	beq.n	8010798 <rmw_create_subscription+0x1a0>
 801069e:	4629      	mov	r1, r5
 80106a0:	4643      	mov	r3, r8
 80106a2:	4648      	mov	r0, r9
 80106a4:	f008 f88e 	bl	80187c4 <create_topic>
 80106a8:	61f8      	str	r0, [r7, #28]
 80106aa:	2800      	cmp	r0, #0
 80106ac:	d078      	beq.n	80107a0 <rmw_create_subscription+0x1a8>
 80106ae:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80106b2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80106b6:	2104      	movs	r1, #4
 80106b8:	f8b3 059c 	ldrh.w	r0, [r3, #1436]	@ 0x59c
 80106bc:	1c42      	adds	r2, r0, #1
 80106be:	f8a3 259c 	strh.w	r2, [r3, #1436]	@ 0x59c
 80106c2:	f001 fa29 	bl	8011b18 <uxr_object_id>
 80106c6:	6138      	str	r0, [r7, #16]
 80106c8:	f8d9 0010 	ldr.w	r0, [r9, #16]
 80106cc:	2506      	movs	r5, #6
 80106ce:	f8d0 3384 	ldr.w	r3, [r0, #900]	@ 0x384
 80106d2:	9500      	str	r5, [sp, #0]
 80106d4:	6819      	ldr	r1, [r3, #0]
 80106d6:	693a      	ldr	r2, [r7, #16]
 80106d8:	f8d9 3014 	ldr.w	r3, [r9, #20]
 80106dc:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80106e0:	f001 f83a 	bl	8011758 <uxr_buffer_create_subscriber_bin>
 80106e4:	4602      	mov	r2, r0
 80106e6:	f8d9 0010 	ldr.w	r0, [r9, #16]
 80106ea:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 80106ee:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 80106f2:	f000 fbe3 	bl	8010ebc <run_xrce_session>
 80106f6:	2800      	cmp	r0, #0
 80106f8:	d04e      	beq.n	8010798 <rmw_create_subscription+0x1a0>
 80106fa:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80106fe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8010702:	4629      	mov	r1, r5
 8010704:	f8b3 059e 	ldrh.w	r0, [r3, #1438]	@ 0x59e
 8010708:	1c42      	adds	r2, r0, #1
 801070a:	f8a3 259e 	strh.w	r2, [r3, #1438]	@ 0x59e
 801070e:	f001 fa03 	bl	8011b18 <uxr_object_id>
 8010712:	ae08      	add	r6, sp, #32
 8010714:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8010718:	69fb      	ldr	r3, [r7, #28]
 801071a:	6178      	str	r0, [r7, #20]
 801071c:	4641      	mov	r1, r8
 801071e:	4630      	mov	r0, r6
 8010720:	f8da b384 	ldr.w	fp, [sl, #900]	@ 0x384
 8010724:	9305      	str	r3, [sp, #20]
 8010726:	f000 fbe5 	bl	8010ef4 <convert_qos_profile>
 801072a:	9503      	str	r5, [sp, #12]
 801072c:	e896 0003 	ldmia.w	r6, {r0, r1}
 8010730:	9b05      	ldr	r3, [sp, #20]
 8010732:	9001      	str	r0, [sp, #4]
 8010734:	f8ad 1008 	strh.w	r1, [sp, #8]
 8010738:	691b      	ldr	r3, [r3, #16]
 801073a:	9300      	str	r3, [sp, #0]
 801073c:	e9d7 3204 	ldrd	r3, r2, [r7, #16]
 8010740:	f8db 1000 	ldr.w	r1, [fp]
 8010744:	f50a 7028 	add.w	r0, sl, #672	@ 0x2a0
 8010748:	f001 f8ac 	bl	80118a4 <uxr_buffer_create_datareader_bin>
 801074c:	4602      	mov	r2, r0
 801074e:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8010752:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8010756:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 801075a:	f000 fbaf 	bl	8010ebc <run_xrce_session>
 801075e:	b1d8      	cbz	r0, 8010798 <rmw_create_subscription+0x1a0>
 8010760:	f898 3008 	ldrb.w	r3, [r8, #8]
 8010764:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8010768:	2b02      	cmp	r3, #2
 801076a:	bf0c      	ite	eq
 801076c:	f8d0 3380 	ldreq.w	r3, [r0, #896]	@ 0x380
 8010770:	f8d0 3374 	ldrne.w	r3, [r0, #884]	@ 0x374
 8010774:	9307      	str	r3, [sp, #28]
 8010776:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 801077a:	2200      	movs	r2, #0
 801077c:	e9cd 120a 	strd	r1, r2, [sp, #40]	@ 0x28
 8010780:	ab0a      	add	r3, sp, #40	@ 0x28
 8010782:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8010786:	9300      	str	r3, [sp, #0]
 8010788:	697a      	ldr	r2, [r7, #20]
 801078a:	9b07      	ldr	r3, [sp, #28]
 801078c:	6809      	ldr	r1, [r1, #0]
 801078e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8010792:	f001 f9f1 	bl	8011b78 <uxr_buffer_request_data>
 8010796:	e007      	b.n	80107a8 <rmw_create_subscription+0x1b0>
 8010798:	69f8      	ldr	r0, [r7, #28]
 801079a:	b108      	cbz	r0, 80107a0 <rmw_create_subscription+0x1a8>
 801079c:	f000 fa8c 	bl	8010cb8 <rmw_uxrce_fini_topic_memory>
 80107a0:	4620      	mov	r0, r4
 80107a2:	f000 fa47 	bl	8010c34 <rmw_uxrce_fini_subscription_memory>
 80107a6:	2400      	movs	r4, #0
 80107a8:	4620      	mov	r0, r4
 80107aa:	b00d      	add	sp, #52	@ 0x34
 80107ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80107b0:	2000b534 	.word	0x2000b534
 80107b4:	0801deec 	.word	0x0801deec
 80107b8:	0801de64 	.word	0x0801de64

080107bc <rmw_subscription_get_actual_qos>:
 80107bc:	b150      	cbz	r0, 80107d4 <rmw_subscription_get_actual_qos+0x18>
 80107be:	b508      	push	{r3, lr}
 80107c0:	460b      	mov	r3, r1
 80107c2:	b149      	cbz	r1, 80107d8 <rmw_subscription_get_actual_qos+0x1c>
 80107c4:	6841      	ldr	r1, [r0, #4]
 80107c6:	2250      	movs	r2, #80	@ 0x50
 80107c8:	3128      	adds	r1, #40	@ 0x28
 80107ca:	4618      	mov	r0, r3
 80107cc:	f00a fe8f 	bl	801b4ee <memcpy>
 80107d0:	2000      	movs	r0, #0
 80107d2:	bd08      	pop	{r3, pc}
 80107d4:	200b      	movs	r0, #11
 80107d6:	4770      	bx	lr
 80107d8:	200b      	movs	r0, #11
 80107da:	bd08      	pop	{r3, pc}

080107dc <rmw_destroy_subscription>:
 80107dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80107de:	b128      	cbz	r0, 80107ec <rmw_destroy_subscription+0x10>
 80107e0:	4604      	mov	r4, r0
 80107e2:	6800      	ldr	r0, [r0, #0]
 80107e4:	460d      	mov	r5, r1
 80107e6:	f000 fbe9 	bl	8010fbc <is_uxrce_rmw_identifier_valid>
 80107ea:	b910      	cbnz	r0, 80107f2 <rmw_destroy_subscription+0x16>
 80107ec:	2401      	movs	r4, #1
 80107ee:	4620      	mov	r0, r4
 80107f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80107f2:	6863      	ldr	r3, [r4, #4]
 80107f4:	2b00      	cmp	r3, #0
 80107f6:	d0f9      	beq.n	80107ec <rmw_destroy_subscription+0x10>
 80107f8:	2d00      	cmp	r5, #0
 80107fa:	d0f7      	beq.n	80107ec <rmw_destroy_subscription+0x10>
 80107fc:	6828      	ldr	r0, [r5, #0]
 80107fe:	f000 fbdd 	bl	8010fbc <is_uxrce_rmw_identifier_valid>
 8010802:	2800      	cmp	r0, #0
 8010804:	d0f2      	beq.n	80107ec <rmw_destroy_subscription+0x10>
 8010806:	686c      	ldr	r4, [r5, #4]
 8010808:	2c00      	cmp	r4, #0
 801080a:	d0ef      	beq.n	80107ec <rmw_destroy_subscription+0x10>
 801080c:	6a26      	ldr	r6, [r4, #32]
 801080e:	6962      	ldr	r2, [r4, #20]
 8010810:	6930      	ldr	r0, [r6, #16]
 8010812:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8010816:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801081a:	6819      	ldr	r1, [r3, #0]
 801081c:	f001 f9e6 	bl	8011bec <uxr_buffer_cancel_data>
 8010820:	4602      	mov	r2, r0
 8010822:	6930      	ldr	r0, [r6, #16]
 8010824:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8010828:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801082c:	f000 fb46 	bl	8010ebc <run_xrce_session>
 8010830:	69e0      	ldr	r0, [r4, #28]
 8010832:	f008 f817 	bl	8018864 <destroy_topic>
 8010836:	6a23      	ldr	r3, [r4, #32]
 8010838:	6962      	ldr	r2, [r4, #20]
 801083a:	6918      	ldr	r0, [r3, #16]
 801083c:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8010840:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8010844:	6819      	ldr	r1, [r3, #0]
 8010846:	f000 fea3 	bl	8011590 <uxr_buffer_delete_entity>
 801084a:	6a23      	ldr	r3, [r4, #32]
 801084c:	6922      	ldr	r2, [r4, #16]
 801084e:	691b      	ldr	r3, [r3, #16]
 8010850:	f8d3 1388 	ldr.w	r1, [r3, #904]	@ 0x388
 8010854:	4604      	mov	r4, r0
 8010856:	6809      	ldr	r1, [r1, #0]
 8010858:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 801085c:	f000 fe98 	bl	8011590 <uxr_buffer_delete_entity>
 8010860:	6937      	ldr	r7, [r6, #16]
 8010862:	4622      	mov	r2, r4
 8010864:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 8010868:	f8d7 1388 	ldr.w	r1, [r7, #904]	@ 0x388
 801086c:	4604      	mov	r4, r0
 801086e:	4638      	mov	r0, r7
 8010870:	f000 fb24 	bl	8010ebc <run_xrce_session>
 8010874:	6936      	ldr	r6, [r6, #16]
 8010876:	4622      	mov	r2, r4
 8010878:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 801087c:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 8010880:	4604      	mov	r4, r0
 8010882:	4630      	mov	r0, r6
 8010884:	f000 fb1a 	bl	8010ebc <run_xrce_session>
 8010888:	b12c      	cbz	r4, 8010896 <rmw_destroy_subscription+0xba>
 801088a:	b120      	cbz	r0, 8010896 <rmw_destroy_subscription+0xba>
 801088c:	2400      	movs	r4, #0
 801088e:	4628      	mov	r0, r5
 8010890:	f000 f9d0 	bl	8010c34 <rmw_uxrce_fini_subscription_memory>
 8010894:	e7ab      	b.n	80107ee <rmw_destroy_subscription+0x12>
 8010896:	2402      	movs	r4, #2
 8010898:	e7f9      	b.n	801088e <rmw_destroy_subscription+0xb2>
 801089a:	bf00      	nop

0801089c <rmw_uxrce_transport_init>:
 801089c:	b508      	push	{r3, lr}
 801089e:	b108      	cbz	r0, 80108a4 <rmw_uxrce_transport_init+0x8>
 80108a0:	f100 0210 	add.w	r2, r0, #16
 80108a4:	b139      	cbz	r1, 80108b6 <rmw_uxrce_transport_init+0x1a>
 80108a6:	6949      	ldr	r1, [r1, #20]
 80108a8:	4610      	mov	r0, r2
 80108aa:	f001 f8fd 	bl	8011aa8 <uxr_init_custom_transport>
 80108ae:	f080 0001 	eor.w	r0, r0, #1
 80108b2:	b2c0      	uxtb	r0, r0
 80108b4:	bd08      	pop	{r3, pc}
 80108b6:	4b04      	ldr	r3, [pc, #16]	@ (80108c8 <rmw_uxrce_transport_init+0x2c>)
 80108b8:	4610      	mov	r0, r2
 80108ba:	6859      	ldr	r1, [r3, #4]
 80108bc:	f001 f8f4 	bl	8011aa8 <uxr_init_custom_transport>
 80108c0:	f080 0001 	eor.w	r0, r0, #1
 80108c4:	b2c0      	uxtb	r0, r0
 80108c6:	bd08      	pop	{r3, pc}
 80108c8:	20006bbc 	.word	0x20006bbc

080108cc <rmw_uros_epoch_nanos>:
 80108cc:	4b05      	ldr	r3, [pc, #20]	@ (80108e4 <rmw_uros_epoch_nanos+0x18>)
 80108ce:	681b      	ldr	r3, [r3, #0]
 80108d0:	b123      	cbz	r3, 80108dc <rmw_uros_epoch_nanos+0x10>
 80108d2:	6898      	ldr	r0, [r3, #8]
 80108d4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80108d8:	f001 bb94 	b.w	8012004 <uxr_epoch_nanos>
 80108dc:	2000      	movs	r0, #0
 80108de:	2100      	movs	r1, #0
 80108e0:	4770      	bx	lr
 80108e2:	bf00      	nop
 80108e4:	2000b514 	.word	0x2000b514

080108e8 <rmw_uros_sync_session>:
 80108e8:	b508      	push	{r3, lr}
 80108ea:	4b07      	ldr	r3, [pc, #28]	@ (8010908 <rmw_uros_sync_session+0x20>)
 80108ec:	681b      	ldr	r3, [r3, #0]
 80108ee:	b14b      	cbz	r3, 8010904 <rmw_uros_sync_session+0x1c>
 80108f0:	4601      	mov	r1, r0
 80108f2:	6898      	ldr	r0, [r3, #8]
 80108f4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80108f8:	f001 ffc6 	bl	8012888 <uxr_sync_session>
 80108fc:	f080 0001 	eor.w	r0, r0, #1
 8010900:	b2c0      	uxtb	r0, r0
 8010902:	bd08      	pop	{r3, pc}
 8010904:	2001      	movs	r0, #1
 8010906:	bd08      	pop	{r3, pc}
 8010908:	2000b514 	.word	0x2000b514

0801090c <rmw_uxrce_init_service_memory>:
 801090c:	b1e2      	cbz	r2, 8010948 <rmw_uxrce_init_service_memory+0x3c>
 801090e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010912:	7b05      	ldrb	r5, [r0, #12]
 8010914:	4606      	mov	r6, r0
 8010916:	b9ad      	cbnz	r5, 8010944 <rmw_uxrce_init_service_memory+0x38>
 8010918:	23c8      	movs	r3, #200	@ 0xc8
 801091a:	e9c0 5500 	strd	r5, r5, [r0]
 801091e:	6083      	str	r3, [r0, #8]
 8010920:	f240 1301 	movw	r3, #257	@ 0x101
 8010924:	4617      	mov	r7, r2
 8010926:	8183      	strh	r3, [r0, #12]
 8010928:	460c      	mov	r4, r1
 801092a:	46a8      	mov	r8, r5
 801092c:	4621      	mov	r1, r4
 801092e:	4630      	mov	r0, r6
 8010930:	3501      	adds	r5, #1
 8010932:	f007 fee9 	bl	8018708 <put_memory>
 8010936:	42af      	cmp	r7, r5
 8010938:	60a4      	str	r4, [r4, #8]
 801093a:	f884 800c 	strb.w	r8, [r4, #12]
 801093e:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 8010942:	d1f3      	bne.n	801092c <rmw_uxrce_init_service_memory+0x20>
 8010944:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010948:	4770      	bx	lr
 801094a:	bf00      	nop

0801094c <rmw_uxrce_init_client_memory>:
 801094c:	b1e2      	cbz	r2, 8010988 <rmw_uxrce_init_client_memory+0x3c>
 801094e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010952:	7b05      	ldrb	r5, [r0, #12]
 8010954:	4606      	mov	r6, r0
 8010956:	b9ad      	cbnz	r5, 8010984 <rmw_uxrce_init_client_memory+0x38>
 8010958:	23c8      	movs	r3, #200	@ 0xc8
 801095a:	e9c0 5500 	strd	r5, r5, [r0]
 801095e:	6083      	str	r3, [r0, #8]
 8010960:	f240 1301 	movw	r3, #257	@ 0x101
 8010964:	4617      	mov	r7, r2
 8010966:	8183      	strh	r3, [r0, #12]
 8010968:	460c      	mov	r4, r1
 801096a:	46a8      	mov	r8, r5
 801096c:	4621      	mov	r1, r4
 801096e:	4630      	mov	r0, r6
 8010970:	3501      	adds	r5, #1
 8010972:	f007 fec9 	bl	8018708 <put_memory>
 8010976:	42af      	cmp	r7, r5
 8010978:	60a4      	str	r4, [r4, #8]
 801097a:	f884 800c 	strb.w	r8, [r4, #12]
 801097e:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 8010982:	d1f3      	bne.n	801096c <rmw_uxrce_init_client_memory+0x20>
 8010984:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010988:	4770      	bx	lr
 801098a:	bf00      	nop

0801098c <rmw_uxrce_init_publisher_memory>:
 801098c:	b1e2      	cbz	r2, 80109c8 <rmw_uxrce_init_publisher_memory+0x3c>
 801098e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010992:	7b05      	ldrb	r5, [r0, #12]
 8010994:	4606      	mov	r6, r0
 8010996:	b9ad      	cbnz	r5, 80109c4 <rmw_uxrce_init_publisher_memory+0x38>
 8010998:	23d8      	movs	r3, #216	@ 0xd8
 801099a:	e9c0 5500 	strd	r5, r5, [r0]
 801099e:	6083      	str	r3, [r0, #8]
 80109a0:	f240 1301 	movw	r3, #257	@ 0x101
 80109a4:	4617      	mov	r7, r2
 80109a6:	8183      	strh	r3, [r0, #12]
 80109a8:	460c      	mov	r4, r1
 80109aa:	46a8      	mov	r8, r5
 80109ac:	4621      	mov	r1, r4
 80109ae:	4630      	mov	r0, r6
 80109b0:	3501      	adds	r5, #1
 80109b2:	f007 fea9 	bl	8018708 <put_memory>
 80109b6:	42af      	cmp	r7, r5
 80109b8:	60a4      	str	r4, [r4, #8]
 80109ba:	f884 800c 	strb.w	r8, [r4, #12]
 80109be:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 80109c2:	d1f3      	bne.n	80109ac <rmw_uxrce_init_publisher_memory+0x20>
 80109c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80109c8:	4770      	bx	lr
 80109ca:	bf00      	nop

080109cc <rmw_uxrce_init_subscription_memory>:
 80109cc:	b1e2      	cbz	r2, 8010a08 <rmw_uxrce_init_subscription_memory+0x3c>
 80109ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80109d2:	7b05      	ldrb	r5, [r0, #12]
 80109d4:	4606      	mov	r6, r0
 80109d6:	b9ad      	cbnz	r5, 8010a04 <rmw_uxrce_init_subscription_memory+0x38>
 80109d8:	23d8      	movs	r3, #216	@ 0xd8
 80109da:	e9c0 5500 	strd	r5, r5, [r0]
 80109de:	6083      	str	r3, [r0, #8]
 80109e0:	f240 1301 	movw	r3, #257	@ 0x101
 80109e4:	4617      	mov	r7, r2
 80109e6:	8183      	strh	r3, [r0, #12]
 80109e8:	460c      	mov	r4, r1
 80109ea:	46a8      	mov	r8, r5
 80109ec:	4621      	mov	r1, r4
 80109ee:	4630      	mov	r0, r6
 80109f0:	3501      	adds	r5, #1
 80109f2:	f007 fe89 	bl	8018708 <put_memory>
 80109f6:	42af      	cmp	r7, r5
 80109f8:	60a4      	str	r4, [r4, #8]
 80109fa:	f884 800c 	strb.w	r8, [r4, #12]
 80109fe:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 8010a02:	d1f3      	bne.n	80109ec <rmw_uxrce_init_subscription_memory+0x20>
 8010a04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010a08:	4770      	bx	lr
 8010a0a:	bf00      	nop

08010a0c <rmw_uxrce_init_node_memory>:
 8010a0c:	b1e2      	cbz	r2, 8010a48 <rmw_uxrce_init_node_memory+0x3c>
 8010a0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010a12:	7b05      	ldrb	r5, [r0, #12]
 8010a14:	4606      	mov	r6, r0
 8010a16:	b9ad      	cbnz	r5, 8010a44 <rmw_uxrce_init_node_memory+0x38>
 8010a18:	23a4      	movs	r3, #164	@ 0xa4
 8010a1a:	e9c0 5500 	strd	r5, r5, [r0]
 8010a1e:	6083      	str	r3, [r0, #8]
 8010a20:	f240 1301 	movw	r3, #257	@ 0x101
 8010a24:	4617      	mov	r7, r2
 8010a26:	8183      	strh	r3, [r0, #12]
 8010a28:	460c      	mov	r4, r1
 8010a2a:	46a8      	mov	r8, r5
 8010a2c:	4621      	mov	r1, r4
 8010a2e:	4630      	mov	r0, r6
 8010a30:	3501      	adds	r5, #1
 8010a32:	f007 fe69 	bl	8018708 <put_memory>
 8010a36:	42af      	cmp	r7, r5
 8010a38:	60a4      	str	r4, [r4, #8]
 8010a3a:	f884 800c 	strb.w	r8, [r4, #12]
 8010a3e:	f104 04a4 	add.w	r4, r4, #164	@ 0xa4
 8010a42:	d1f3      	bne.n	8010a2c <rmw_uxrce_init_node_memory+0x20>
 8010a44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010a48:	4770      	bx	lr
 8010a4a:	bf00      	nop

08010a4c <rmw_uxrce_init_session_memory>:
 8010a4c:	b1ea      	cbz	r2, 8010a8a <rmw_uxrce_init_session_memory+0x3e>
 8010a4e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010a52:	7b05      	ldrb	r5, [r0, #12]
 8010a54:	4606      	mov	r6, r0
 8010a56:	b9b5      	cbnz	r5, 8010a86 <rmw_uxrce_init_session_memory+0x3a>
 8010a58:	e9c0 5500 	strd	r5, r5, [r0]
 8010a5c:	f241 58a8 	movw	r8, #5544	@ 0x15a8
 8010a60:	f240 1301 	movw	r3, #257	@ 0x101
 8010a64:	4617      	mov	r7, r2
 8010a66:	f8c0 8008 	str.w	r8, [r0, #8]
 8010a6a:	460c      	mov	r4, r1
 8010a6c:	8183      	strh	r3, [r0, #12]
 8010a6e:	46a9      	mov	r9, r5
 8010a70:	4621      	mov	r1, r4
 8010a72:	4630      	mov	r0, r6
 8010a74:	3501      	adds	r5, #1
 8010a76:	f007 fe47 	bl	8018708 <put_memory>
 8010a7a:	42af      	cmp	r7, r5
 8010a7c:	60a4      	str	r4, [r4, #8]
 8010a7e:	f884 900c 	strb.w	r9, [r4, #12]
 8010a82:	4444      	add	r4, r8
 8010a84:	d1f4      	bne.n	8010a70 <rmw_uxrce_init_session_memory+0x24>
 8010a86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010a8a:	4770      	bx	lr

08010a8c <rmw_uxrce_init_topic_memory>:
 8010a8c:	b1e2      	cbz	r2, 8010ac8 <rmw_uxrce_init_topic_memory+0x3c>
 8010a8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010a92:	7b05      	ldrb	r5, [r0, #12]
 8010a94:	4606      	mov	r6, r0
 8010a96:	b9ad      	cbnz	r5, 8010ac4 <rmw_uxrce_init_topic_memory+0x38>
 8010a98:	231c      	movs	r3, #28
 8010a9a:	e9c0 5500 	strd	r5, r5, [r0]
 8010a9e:	6083      	str	r3, [r0, #8]
 8010aa0:	f240 1301 	movw	r3, #257	@ 0x101
 8010aa4:	4617      	mov	r7, r2
 8010aa6:	8183      	strh	r3, [r0, #12]
 8010aa8:	460c      	mov	r4, r1
 8010aaa:	46a8      	mov	r8, r5
 8010aac:	4621      	mov	r1, r4
 8010aae:	4630      	mov	r0, r6
 8010ab0:	3501      	adds	r5, #1
 8010ab2:	f007 fe29 	bl	8018708 <put_memory>
 8010ab6:	42af      	cmp	r7, r5
 8010ab8:	60a4      	str	r4, [r4, #8]
 8010aba:	f884 800c 	strb.w	r8, [r4, #12]
 8010abe:	f104 041c 	add.w	r4, r4, #28
 8010ac2:	d1f3      	bne.n	8010aac <rmw_uxrce_init_topic_memory+0x20>
 8010ac4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010ac8:	4770      	bx	lr
 8010aca:	bf00      	nop

08010acc <rmw_uxrce_init_static_input_buffer_memory>:
 8010acc:	b1ea      	cbz	r2, 8010b0a <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 8010ace:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010ad2:	7b05      	ldrb	r5, [r0, #12]
 8010ad4:	4606      	mov	r6, r0
 8010ad6:	b9b5      	cbnz	r5, 8010b06 <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 8010ad8:	f44f 6304 	mov.w	r3, #2112	@ 0x840
 8010adc:	e9c0 5500 	strd	r5, r5, [r0]
 8010ae0:	6083      	str	r3, [r0, #8]
 8010ae2:	f240 1301 	movw	r3, #257	@ 0x101
 8010ae6:	4617      	mov	r7, r2
 8010ae8:	8183      	strh	r3, [r0, #12]
 8010aea:	460c      	mov	r4, r1
 8010aec:	46a8      	mov	r8, r5
 8010aee:	4621      	mov	r1, r4
 8010af0:	4630      	mov	r0, r6
 8010af2:	3501      	adds	r5, #1
 8010af4:	f007 fe08 	bl	8018708 <put_memory>
 8010af8:	42af      	cmp	r7, r5
 8010afa:	60a4      	str	r4, [r4, #8]
 8010afc:	f884 800c 	strb.w	r8, [r4, #12]
 8010b00:	f504 6404 	add.w	r4, r4, #2112	@ 0x840
 8010b04:	d1f3      	bne.n	8010aee <rmw_uxrce_init_static_input_buffer_memory+0x22>
 8010b06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010b0a:	4770      	bx	lr

08010b0c <rmw_uxrce_init_init_options_impl_memory>:
 8010b0c:	b1e2      	cbz	r2, 8010b48 <rmw_uxrce_init_init_options_impl_memory+0x3c>
 8010b0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010b12:	7b05      	ldrb	r5, [r0, #12]
 8010b14:	4606      	mov	r6, r0
 8010b16:	b9ad      	cbnz	r5, 8010b44 <rmw_uxrce_init_init_options_impl_memory+0x38>
 8010b18:	232c      	movs	r3, #44	@ 0x2c
 8010b1a:	e9c0 5500 	strd	r5, r5, [r0]
 8010b1e:	6083      	str	r3, [r0, #8]
 8010b20:	f240 1301 	movw	r3, #257	@ 0x101
 8010b24:	4617      	mov	r7, r2
 8010b26:	8183      	strh	r3, [r0, #12]
 8010b28:	460c      	mov	r4, r1
 8010b2a:	46a8      	mov	r8, r5
 8010b2c:	4621      	mov	r1, r4
 8010b2e:	4630      	mov	r0, r6
 8010b30:	3501      	adds	r5, #1
 8010b32:	f007 fde9 	bl	8018708 <put_memory>
 8010b36:	42af      	cmp	r7, r5
 8010b38:	60a4      	str	r4, [r4, #8]
 8010b3a:	f884 800c 	strb.w	r8, [r4, #12]
 8010b3e:	f104 042c 	add.w	r4, r4, #44	@ 0x2c
 8010b42:	d1f3      	bne.n	8010b2c <rmw_uxrce_init_init_options_impl_memory+0x20>
 8010b44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010b48:	4770      	bx	lr
 8010b4a:	bf00      	nop

08010b4c <rmw_uxrce_init_wait_set_memory>:
 8010b4c:	b1e2      	cbz	r2, 8010b88 <rmw_uxrce_init_wait_set_memory+0x3c>
 8010b4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010b52:	7b05      	ldrb	r5, [r0, #12]
 8010b54:	4606      	mov	r6, r0
 8010b56:	b9ad      	cbnz	r5, 8010b84 <rmw_uxrce_init_wait_set_memory+0x38>
 8010b58:	231c      	movs	r3, #28
 8010b5a:	e9c0 5500 	strd	r5, r5, [r0]
 8010b5e:	6083      	str	r3, [r0, #8]
 8010b60:	f240 1301 	movw	r3, #257	@ 0x101
 8010b64:	4617      	mov	r7, r2
 8010b66:	8183      	strh	r3, [r0, #12]
 8010b68:	460c      	mov	r4, r1
 8010b6a:	46a8      	mov	r8, r5
 8010b6c:	4621      	mov	r1, r4
 8010b6e:	4630      	mov	r0, r6
 8010b70:	3501      	adds	r5, #1
 8010b72:	f007 fdc9 	bl	8018708 <put_memory>
 8010b76:	42af      	cmp	r7, r5
 8010b78:	60a4      	str	r4, [r4, #8]
 8010b7a:	f884 800c 	strb.w	r8, [r4, #12]
 8010b7e:	f104 041c 	add.w	r4, r4, #28
 8010b82:	d1f3      	bne.n	8010b6c <rmw_uxrce_init_wait_set_memory+0x20>
 8010b84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010b88:	4770      	bx	lr
 8010b8a:	bf00      	nop

08010b8c <rmw_uxrce_init_guard_condition_memory>:
 8010b8c:	b1e2      	cbz	r2, 8010bc8 <rmw_uxrce_init_guard_condition_memory+0x3c>
 8010b8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010b92:	7b05      	ldrb	r5, [r0, #12]
 8010b94:	4606      	mov	r6, r0
 8010b96:	b9ad      	cbnz	r5, 8010bc4 <rmw_uxrce_init_guard_condition_memory+0x38>
 8010b98:	2320      	movs	r3, #32
 8010b9a:	e9c0 5500 	strd	r5, r5, [r0]
 8010b9e:	6083      	str	r3, [r0, #8]
 8010ba0:	f240 1301 	movw	r3, #257	@ 0x101
 8010ba4:	4617      	mov	r7, r2
 8010ba6:	8183      	strh	r3, [r0, #12]
 8010ba8:	460c      	mov	r4, r1
 8010baa:	46a8      	mov	r8, r5
 8010bac:	4621      	mov	r1, r4
 8010bae:	4630      	mov	r0, r6
 8010bb0:	3501      	adds	r5, #1
 8010bb2:	f007 fda9 	bl	8018708 <put_memory>
 8010bb6:	42af      	cmp	r7, r5
 8010bb8:	60a4      	str	r4, [r4, #8]
 8010bba:	f884 800c 	strb.w	r8, [r4, #12]
 8010bbe:	f104 0420 	add.w	r4, r4, #32
 8010bc2:	d1f3      	bne.n	8010bac <rmw_uxrce_init_guard_condition_memory+0x20>
 8010bc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010bc8:	4770      	bx	lr
 8010bca:	bf00      	nop

08010bcc <rmw_uxrce_fini_session_memory>:
 8010bcc:	4601      	mov	r1, r0
 8010bce:	4801      	ldr	r0, [pc, #4]	@ (8010bd4 <rmw_uxrce_fini_session_memory+0x8>)
 8010bd0:	f007 bd9a 	b.w	8018708 <put_memory>
 8010bd4:	2000b514 	.word	0x2000b514

08010bd8 <rmw_uxrce_fini_node_memory>:
 8010bd8:	b538      	push	{r3, r4, r5, lr}
 8010bda:	4604      	mov	r4, r0
 8010bdc:	6800      	ldr	r0, [r0, #0]
 8010bde:	b128      	cbz	r0, 8010bec <rmw_uxrce_fini_node_memory+0x14>
 8010be0:	4b07      	ldr	r3, [pc, #28]	@ (8010c00 <rmw_uxrce_fini_node_memory+0x28>)
 8010be2:	6819      	ldr	r1, [r3, #0]
 8010be4:	f7ef fb1c 	bl	8000220 <strcmp>
 8010be8:	b940      	cbnz	r0, 8010bfc <rmw_uxrce_fini_node_memory+0x24>
 8010bea:	6020      	str	r0, [r4, #0]
 8010bec:	6861      	ldr	r1, [r4, #4]
 8010bee:	b129      	cbz	r1, 8010bfc <rmw_uxrce_fini_node_memory+0x24>
 8010bf0:	2500      	movs	r5, #0
 8010bf2:	4804      	ldr	r0, [pc, #16]	@ (8010c04 <rmw_uxrce_fini_node_memory+0x2c>)
 8010bf4:	610d      	str	r5, [r1, #16]
 8010bf6:	f007 fd87 	bl	8018708 <put_memory>
 8010bfa:	6065      	str	r5, [r4, #4]
 8010bfc:	bd38      	pop	{r3, r4, r5, pc}
 8010bfe:	bf00      	nop
 8010c00:	0801eabc 	.word	0x0801eabc
 8010c04:	2000b4e4 	.word	0x2000b4e4

08010c08 <rmw_uxrce_fini_publisher_memory>:
 8010c08:	b510      	push	{r4, lr}
 8010c0a:	4604      	mov	r4, r0
 8010c0c:	6800      	ldr	r0, [r0, #0]
 8010c0e:	b128      	cbz	r0, 8010c1c <rmw_uxrce_fini_publisher_memory+0x14>
 8010c10:	4b06      	ldr	r3, [pc, #24]	@ (8010c2c <rmw_uxrce_fini_publisher_memory+0x24>)
 8010c12:	6819      	ldr	r1, [r3, #0]
 8010c14:	f7ef fb04 	bl	8000220 <strcmp>
 8010c18:	b938      	cbnz	r0, 8010c2a <rmw_uxrce_fini_publisher_memory+0x22>
 8010c1a:	6020      	str	r0, [r4, #0]
 8010c1c:	6861      	ldr	r1, [r4, #4]
 8010c1e:	b121      	cbz	r1, 8010c2a <rmw_uxrce_fini_publisher_memory+0x22>
 8010c20:	4803      	ldr	r0, [pc, #12]	@ (8010c30 <rmw_uxrce_fini_publisher_memory+0x28>)
 8010c22:	f007 fd71 	bl	8018708 <put_memory>
 8010c26:	2300      	movs	r3, #0
 8010c28:	6063      	str	r3, [r4, #4]
 8010c2a:	bd10      	pop	{r4, pc}
 8010c2c:	0801eabc 	.word	0x0801eabc
 8010c30:	2000b4f4 	.word	0x2000b4f4

08010c34 <rmw_uxrce_fini_subscription_memory>:
 8010c34:	b510      	push	{r4, lr}
 8010c36:	4604      	mov	r4, r0
 8010c38:	6800      	ldr	r0, [r0, #0]
 8010c3a:	b128      	cbz	r0, 8010c48 <rmw_uxrce_fini_subscription_memory+0x14>
 8010c3c:	4b06      	ldr	r3, [pc, #24]	@ (8010c58 <rmw_uxrce_fini_subscription_memory+0x24>)
 8010c3e:	6819      	ldr	r1, [r3, #0]
 8010c40:	f7ef faee 	bl	8000220 <strcmp>
 8010c44:	b938      	cbnz	r0, 8010c56 <rmw_uxrce_fini_subscription_memory+0x22>
 8010c46:	6020      	str	r0, [r4, #0]
 8010c48:	6861      	ldr	r1, [r4, #4]
 8010c4a:	b121      	cbz	r1, 8010c56 <rmw_uxrce_fini_subscription_memory+0x22>
 8010c4c:	4803      	ldr	r0, [pc, #12]	@ (8010c5c <rmw_uxrce_fini_subscription_memory+0x28>)
 8010c4e:	f007 fd5b 	bl	8018708 <put_memory>
 8010c52:	2300      	movs	r3, #0
 8010c54:	6063      	str	r3, [r4, #4]
 8010c56:	bd10      	pop	{r4, pc}
 8010c58:	0801eabc 	.word	0x0801eabc
 8010c5c:	2000b534 	.word	0x2000b534

08010c60 <rmw_uxrce_fini_service_memory>:
 8010c60:	b510      	push	{r4, lr}
 8010c62:	4604      	mov	r4, r0
 8010c64:	6800      	ldr	r0, [r0, #0]
 8010c66:	b128      	cbz	r0, 8010c74 <rmw_uxrce_fini_service_memory+0x14>
 8010c68:	4b06      	ldr	r3, [pc, #24]	@ (8010c84 <rmw_uxrce_fini_service_memory+0x24>)
 8010c6a:	6819      	ldr	r1, [r3, #0]
 8010c6c:	f7ef fad8 	bl	8000220 <strcmp>
 8010c70:	b938      	cbnz	r0, 8010c82 <rmw_uxrce_fini_service_memory+0x22>
 8010c72:	6020      	str	r0, [r4, #0]
 8010c74:	6861      	ldr	r1, [r4, #4]
 8010c76:	b121      	cbz	r1, 8010c82 <rmw_uxrce_fini_service_memory+0x22>
 8010c78:	4803      	ldr	r0, [pc, #12]	@ (8010c88 <rmw_uxrce_fini_service_memory+0x28>)
 8010c7a:	f007 fd45 	bl	8018708 <put_memory>
 8010c7e:	2300      	movs	r3, #0
 8010c80:	6063      	str	r3, [r4, #4]
 8010c82:	bd10      	pop	{r4, pc}
 8010c84:	0801eabc 	.word	0x0801eabc
 8010c88:	2000b504 	.word	0x2000b504

08010c8c <rmw_uxrce_fini_client_memory>:
 8010c8c:	b510      	push	{r4, lr}
 8010c8e:	4604      	mov	r4, r0
 8010c90:	6800      	ldr	r0, [r0, #0]
 8010c92:	b128      	cbz	r0, 8010ca0 <rmw_uxrce_fini_client_memory+0x14>
 8010c94:	4b06      	ldr	r3, [pc, #24]	@ (8010cb0 <rmw_uxrce_fini_client_memory+0x24>)
 8010c96:	6819      	ldr	r1, [r3, #0]
 8010c98:	f7ef fac2 	bl	8000220 <strcmp>
 8010c9c:	b938      	cbnz	r0, 8010cae <rmw_uxrce_fini_client_memory+0x22>
 8010c9e:	6020      	str	r0, [r4, #0]
 8010ca0:	6861      	ldr	r1, [r4, #4]
 8010ca2:	b121      	cbz	r1, 8010cae <rmw_uxrce_fini_client_memory+0x22>
 8010ca4:	4803      	ldr	r0, [pc, #12]	@ (8010cb4 <rmw_uxrce_fini_client_memory+0x28>)
 8010ca6:	f007 fd2f 	bl	8018708 <put_memory>
 8010caa:	2300      	movs	r3, #0
 8010cac:	6063      	str	r3, [r4, #4]
 8010cae:	bd10      	pop	{r4, pc}
 8010cb0:	0801eabc 	.word	0x0801eabc
 8010cb4:	20006c14 	.word	0x20006c14

08010cb8 <rmw_uxrce_fini_topic_memory>:
 8010cb8:	b510      	push	{r4, lr}
 8010cba:	4604      	mov	r4, r0
 8010cbc:	4621      	mov	r1, r4
 8010cbe:	4803      	ldr	r0, [pc, #12]	@ (8010ccc <rmw_uxrce_fini_topic_memory+0x14>)
 8010cc0:	f007 fd22 	bl	8018708 <put_memory>
 8010cc4:	2300      	movs	r3, #0
 8010cc6:	61a3      	str	r3, [r4, #24]
 8010cc8:	bd10      	pop	{r4, pc}
 8010cca:	bf00      	nop
 8010ccc:	2000b544 	.word	0x2000b544

08010cd0 <rmw_uxrce_get_static_input_buffer_for_entity>:
 8010cd0:	b082      	sub	sp, #8
 8010cd2:	b530      	push	{r4, r5, lr}
 8010cd4:	4925      	ldr	r1, [pc, #148]	@ (8010d6c <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 8010cd6:	680d      	ldr	r5, [r1, #0]
 8010cd8:	ac03      	add	r4, sp, #12
 8010cda:	e884 000c 	stmia.w	r4, {r2, r3}
 8010cde:	461c      	mov	r4, r3
 8010ce0:	2d00      	cmp	r5, #0
 8010ce2:	d041      	beq.n	8010d68 <rmw_uxrce_get_static_input_buffer_for_entity+0x98>
 8010ce4:	462b      	mov	r3, r5
 8010ce6:	2100      	movs	r1, #0
 8010ce8:	689a      	ldr	r2, [r3, #8]
 8010cea:	685b      	ldr	r3, [r3, #4]
 8010cec:	f8d2 2814 	ldr.w	r2, [r2, #2068]	@ 0x814
 8010cf0:	4290      	cmp	r0, r2
 8010cf2:	bf08      	it	eq
 8010cf4:	3101      	addeq	r1, #1
 8010cf6:	2b00      	cmp	r3, #0
 8010cf8:	d1f6      	bne.n	8010ce8 <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 8010cfa:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8010cfe:	2b02      	cmp	r3, #2
 8010d00:	d029      	beq.n	8010d56 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 8010d02:	d907      	bls.n	8010d14 <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 8010d04:	2b03      	cmp	r3, #3
 8010d06:	d005      	beq.n	8010d14 <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 8010d08:	2100      	movs	r1, #0
 8010d0a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010d0e:	4608      	mov	r0, r1
 8010d10:	b002      	add	sp, #8
 8010d12:	4770      	bx	lr
 8010d14:	b314      	cbz	r4, 8010d5c <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 8010d16:	428c      	cmp	r4, r1
 8010d18:	d820      	bhi.n	8010d5c <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 8010d1a:	2d00      	cmp	r5, #0
 8010d1c:	d0f4      	beq.n	8010d08 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 8010d1e:	2100      	movs	r1, #0
 8010d20:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8010d24:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 8010d28:	e002      	b.n	8010d30 <rmw_uxrce_get_static_input_buffer_for_entity+0x60>
 8010d2a:	686d      	ldr	r5, [r5, #4]
 8010d2c:	2d00      	cmp	r5, #0
 8010d2e:	d0ec      	beq.n	8010d0a <rmw_uxrce_get_static_input_buffer_for_entity+0x3a>
 8010d30:	68ab      	ldr	r3, [r5, #8]
 8010d32:	f8d3 2814 	ldr.w	r2, [r3, #2068]	@ 0x814
 8010d36:	4290      	cmp	r0, r2
 8010d38:	d1f7      	bne.n	8010d2a <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 8010d3a:	f8d3 2818 	ldr.w	r2, [r3, #2072]	@ 0x818
 8010d3e:	f503 6302 	add.w	r3, r3, #2080	@ 0x820
 8010d42:	4562      	cmp	r2, ip
 8010d44:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8010d48:	eb73 0e04 	sbcs.w	lr, r3, r4
 8010d4c:	daed      	bge.n	8010d2a <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 8010d4e:	4694      	mov	ip, r2
 8010d50:	461c      	mov	r4, r3
 8010d52:	4629      	mov	r1, r5
 8010d54:	e7e9      	b.n	8010d2a <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 8010d56:	b10c      	cbz	r4, 8010d5c <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 8010d58:	428c      	cmp	r4, r1
 8010d5a:	d9d5      	bls.n	8010d08 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 8010d5c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010d60:	4802      	ldr	r0, [pc, #8]	@ (8010d6c <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 8010d62:	b002      	add	sp, #8
 8010d64:	f007 bcc0 	b.w	80186e8 <get_memory>
 8010d68:	4629      	mov	r1, r5
 8010d6a:	e7c6      	b.n	8010cfa <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 8010d6c:	2000b524 	.word	0x2000b524

08010d70 <rmw_uxrce_find_static_input_buffer_by_owner>:
 8010d70:	4b11      	ldr	r3, [pc, #68]	@ (8010db8 <rmw_uxrce_find_static_input_buffer_by_owner+0x48>)
 8010d72:	681b      	ldr	r3, [r3, #0]
 8010d74:	b530      	push	{r4, r5, lr}
 8010d76:	b1e3      	cbz	r3, 8010db2 <rmw_uxrce_find_static_input_buffer_by_owner+0x42>
 8010d78:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 8010d7c:	f06f 4c00 	mvn.w	ip, #2147483648	@ 0x80000000
 8010d80:	2400      	movs	r4, #0
 8010d82:	e001      	b.n	8010d88 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 8010d84:	685b      	ldr	r3, [r3, #4]
 8010d86:	b193      	cbz	r3, 8010dae <rmw_uxrce_find_static_input_buffer_by_owner+0x3e>
 8010d88:	689a      	ldr	r2, [r3, #8]
 8010d8a:	f8d2 1814 	ldr.w	r1, [r2, #2068]	@ 0x814
 8010d8e:	4288      	cmp	r0, r1
 8010d90:	d1f8      	bne.n	8010d84 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 8010d92:	f8d2 1818 	ldr.w	r1, [r2, #2072]	@ 0x818
 8010d96:	f8d2 281c 	ldr.w	r2, [r2, #2076]	@ 0x81c
 8010d9a:	4571      	cmp	r1, lr
 8010d9c:	eb72 050c 	sbcs.w	r5, r2, ip
 8010da0:	daf0      	bge.n	8010d84 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 8010da2:	461c      	mov	r4, r3
 8010da4:	685b      	ldr	r3, [r3, #4]
 8010da6:	468e      	mov	lr, r1
 8010da8:	4694      	mov	ip, r2
 8010daa:	2b00      	cmp	r3, #0
 8010dac:	d1ec      	bne.n	8010d88 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 8010dae:	4620      	mov	r0, r4
 8010db0:	bd30      	pop	{r4, r5, pc}
 8010db2:	461c      	mov	r4, r3
 8010db4:	4620      	mov	r0, r4
 8010db6:	bd30      	pop	{r4, r5, pc}
 8010db8:	2000b524 	.word	0x2000b524
 8010dbc:	00000000 	.word	0x00000000

08010dc0 <rmw_uxrce_clean_expired_static_input_buffer>:
 8010dc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010dc4:	4b3c      	ldr	r3, [pc, #240]	@ (8010eb8 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 8010dc6:	ed2d 8b06 	vpush	{d8-d10}
 8010dca:	681f      	ldr	r7, [r3, #0]
 8010dcc:	b08d      	sub	sp, #52	@ 0x34
 8010dce:	f7ff fd7d 	bl	80108cc <rmw_uros_epoch_nanos>
 8010dd2:	2f00      	cmp	r7, #0
 8010dd4:	d05d      	beq.n	8010e92 <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 8010dd6:	46b8      	mov	r8, r7
 8010dd8:	ed9f 8b31 	vldr	d8, [pc, #196]	@ 8010ea0 <rmw_uxrce_clean_expired_static_input_buffer+0xe0>
 8010ddc:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8010de0:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 8010de4:	2b04      	cmp	r3, #4
 8010de6:	ed9f ab30 	vldr	d10, [pc, #192]	@ 8010ea8 <rmw_uxrce_clean_expired_static_input_buffer+0xe8>
 8010dea:	ed9f 9b31 	vldr	d9, [pc, #196]	@ 8010eb0 <rmw_uxrce_clean_expired_static_input_buffer+0xf0>
 8010dee:	4681      	mov	r9, r0
 8010df0:	468a      	mov	sl, r1
 8010df2:	ac04      	add	r4, sp, #16
 8010df4:	d03f      	beq.n	8010e76 <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 8010df6:	2b05      	cmp	r3, #5
 8010df8:	d044      	beq.n	8010e84 <rmw_uxrce_clean_expired_static_input_buffer+0xc4>
 8010dfa:	2b03      	cmp	r3, #3
 8010dfc:	d03b      	beq.n	8010e76 <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 8010dfe:	ed8d 8b04 	vstr	d8, [sp, #16]
 8010e02:	ed8d ab06 	vstr	d10, [sp, #24]
 8010e06:	ed8d 8b08 	vstr	d8, [sp, #32]
 8010e0a:	ed8d 8b0a 	vstr	d8, [sp, #40]	@ 0x28
 8010e0e:	ab08      	add	r3, sp, #32
 8010e10:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8010e12:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8010e16:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8010e1a:	f007 f9b1 	bl	8018180 <rmw_time_equal>
 8010e1e:	b118      	cbz	r0, 8010e28 <rmw_uxrce_clean_expired_static_input_buffer+0x68>
 8010e20:	ed8d 9b04 	vstr	d9, [sp, #16]
 8010e24:	ed8d 8b06 	vstr	d8, [sp, #24]
 8010e28:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8010e2c:	f8d5 6818 	ldr.w	r6, [r5, #2072]	@ 0x818
 8010e30:	f8d5 781c 	ldr.w	r7, [r5, #2076]	@ 0x81c
 8010e34:	f8d8 b004 	ldr.w	fp, [r8, #4]
 8010e38:	f007 f9f6 	bl	8018228 <rmw_time_total_nsec>
 8010e3c:	1830      	adds	r0, r6, r0
 8010e3e:	eb47 0101 	adc.w	r1, r7, r1
 8010e42:	4548      	cmp	r0, r9
 8010e44:	eb71 030a 	sbcs.w	r3, r1, sl
 8010e48:	f505 6502 	add.w	r5, r5, #2080	@ 0x820
 8010e4c:	db05      	blt.n	8010e5a <rmw_uxrce_clean_expired_static_input_buffer+0x9a>
 8010e4e:	e955 2302 	ldrd	r2, r3, [r5, #-8]
 8010e52:	4591      	cmp	r9, r2
 8010e54:	eb7a 0303 	sbcs.w	r3, sl, r3
 8010e58:	da03      	bge.n	8010e62 <rmw_uxrce_clean_expired_static_input_buffer+0xa2>
 8010e5a:	4817      	ldr	r0, [pc, #92]	@ (8010eb8 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 8010e5c:	4641      	mov	r1, r8
 8010e5e:	f007 fc53 	bl	8018708 <put_memory>
 8010e62:	f1bb 0f00 	cmp.w	fp, #0
 8010e66:	d014      	beq.n	8010e92 <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 8010e68:	46d8      	mov	r8, fp
 8010e6a:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8010e6e:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 8010e72:	2b04      	cmp	r3, #4
 8010e74:	d1bf      	bne.n	8010df6 <rmw_uxrce_clean_expired_static_input_buffer+0x36>
 8010e76:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 8010e7a:	3340      	adds	r3, #64	@ 0x40
 8010e7c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8010e7e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8010e82:	e7c0      	b.n	8010e06 <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 8010e84:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 8010e88:	3348      	adds	r3, #72	@ 0x48
 8010e8a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8010e8c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8010e90:	e7b9      	b.n	8010e06 <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 8010e92:	b00d      	add	sp, #52	@ 0x34
 8010e94:	ecbd 8b06 	vpop	{d8-d10}
 8010e98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010e9c:	f3af 8000 	nop.w
	...
 8010ea8:	00000001 	.word	0x00000001
 8010eac:	00000000 	.word	0x00000000
 8010eb0:	0000001e 	.word	0x0000001e
 8010eb4:	00000000 	.word	0x00000000
 8010eb8:	2000b524 	.word	0x2000b524

08010ebc <run_xrce_session>:
 8010ebc:	b510      	push	{r4, lr}
 8010ebe:	788c      	ldrb	r4, [r1, #2]
 8010ec0:	b086      	sub	sp, #24
 8010ec2:	2c01      	cmp	r4, #1
 8010ec4:	f8ad 200e 	strh.w	r2, [sp, #14]
 8010ec8:	d00c      	beq.n	8010ee4 <run_xrce_session+0x28>
 8010eca:	4619      	mov	r1, r3
 8010ecc:	2301      	movs	r3, #1
 8010ece:	9300      	str	r3, [sp, #0]
 8010ed0:	f10d 020e 	add.w	r2, sp, #14
 8010ed4:	f10d 0317 	add.w	r3, sp, #23
 8010ed8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8010edc:	f001 fc82 	bl	80127e4 <uxr_run_session_until_all_status>
 8010ee0:	b006      	add	sp, #24
 8010ee2:	bd10      	pop	{r4, pc}
 8010ee4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8010ee8:	f001 f896 	bl	8012018 <uxr_flash_output_streams>
 8010eec:	4620      	mov	r0, r4
 8010eee:	b006      	add	sp, #24
 8010ef0:	bd10      	pop	{r4, pc}
 8010ef2:	bf00      	nop

08010ef4 <convert_qos_profile>:
 8010ef4:	7a4a      	ldrb	r2, [r1, #9]
 8010ef6:	f891 c008 	ldrb.w	ip, [r1, #8]
 8010efa:	2a02      	cmp	r2, #2
 8010efc:	bf18      	it	ne
 8010efe:	2200      	movne	r2, #0
 8010f00:	7002      	strb	r2, [r0, #0]
 8010f02:	780a      	ldrb	r2, [r1, #0]
 8010f04:	8889      	ldrh	r1, [r1, #4]
 8010f06:	8081      	strh	r1, [r0, #4]
 8010f08:	f1ac 0c02 	sub.w	ip, ip, #2
 8010f0c:	f1a2 0202 	sub.w	r2, r2, #2
 8010f10:	fabc fc8c 	clz	ip, ip
 8010f14:	fab2 f282 	clz	r2, r2
 8010f18:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8010f1c:	0952      	lsrs	r2, r2, #5
 8010f1e:	f880 c001 	strb.w	ip, [r0, #1]
 8010f22:	7082      	strb	r2, [r0, #2]
 8010f24:	4770      	bx	lr
 8010f26:	bf00      	nop

08010f28 <generate_type_name>:
 8010f28:	b530      	push	{r4, r5, lr}
 8010f2a:	2300      	movs	r3, #0
 8010f2c:	700b      	strb	r3, [r1, #0]
 8010f2e:	6803      	ldr	r3, [r0, #0]
 8010f30:	b087      	sub	sp, #28
 8010f32:	4614      	mov	r4, r2
 8010f34:	b1d3      	cbz	r3, 8010f6c <generate_type_name+0x44>
 8010f36:	4a0f      	ldr	r2, [pc, #60]	@ (8010f74 <generate_type_name+0x4c>)
 8010f38:	4615      	mov	r5, r2
 8010f3a:	9203      	str	r2, [sp, #12]
 8010f3c:	9500      	str	r5, [sp, #0]
 8010f3e:	6842      	ldr	r2, [r0, #4]
 8010f40:	480d      	ldr	r0, [pc, #52]	@ (8010f78 <generate_type_name+0x50>)
 8010f42:	9001      	str	r0, [sp, #4]
 8010f44:	4608      	mov	r0, r1
 8010f46:	490d      	ldr	r1, [pc, #52]	@ (8010f7c <generate_type_name+0x54>)
 8010f48:	9204      	str	r2, [sp, #16]
 8010f4a:	9105      	str	r1, [sp, #20]
 8010f4c:	9102      	str	r1, [sp, #8]
 8010f4e:	4a0c      	ldr	r2, [pc, #48]	@ (8010f80 <generate_type_name+0x58>)
 8010f50:	4621      	mov	r1, r4
 8010f52:	f00a f88f 	bl	801b074 <sniprintf>
 8010f56:	2800      	cmp	r0, #0
 8010f58:	db05      	blt.n	8010f66 <generate_type_name+0x3e>
 8010f5a:	4284      	cmp	r4, r0
 8010f5c:	bfd4      	ite	le
 8010f5e:	2000      	movle	r0, #0
 8010f60:	2001      	movgt	r0, #1
 8010f62:	b007      	add	sp, #28
 8010f64:	bd30      	pop	{r4, r5, pc}
 8010f66:	2000      	movs	r0, #0
 8010f68:	b007      	add	sp, #28
 8010f6a:	bd30      	pop	{r4, r5, pc}
 8010f6c:	4b05      	ldr	r3, [pc, #20]	@ (8010f84 <generate_type_name+0x5c>)
 8010f6e:	4a01      	ldr	r2, [pc, #4]	@ (8010f74 <generate_type_name+0x4c>)
 8010f70:	461d      	mov	r5, r3
 8010f72:	e7e2      	b.n	8010f3a <generate_type_name+0x12>
 8010f74:	0801dedc 	.word	0x0801dedc
 8010f78:	0801def4 	.word	0x0801def4
 8010f7c:	0801def0 	.word	0x0801def0
 8010f80:	0801dee0 	.word	0x0801dee0
 8010f84:	0801e448 	.word	0x0801e448

08010f88 <generate_topic_name>:
 8010f88:	b510      	push	{r4, lr}
 8010f8a:	b082      	sub	sp, #8
 8010f8c:	4614      	mov	r4, r2
 8010f8e:	9000      	str	r0, [sp, #0]
 8010f90:	4b08      	ldr	r3, [pc, #32]	@ (8010fb4 <generate_topic_name+0x2c>)
 8010f92:	4a09      	ldr	r2, [pc, #36]	@ (8010fb8 <generate_topic_name+0x30>)
 8010f94:	4608      	mov	r0, r1
 8010f96:	4621      	mov	r1, r4
 8010f98:	f00a f86c 	bl	801b074 <sniprintf>
 8010f9c:	2800      	cmp	r0, #0
 8010f9e:	db05      	blt.n	8010fac <generate_topic_name+0x24>
 8010fa0:	4284      	cmp	r4, r0
 8010fa2:	bfd4      	ite	le
 8010fa4:	2000      	movle	r0, #0
 8010fa6:	2001      	movgt	r0, #1
 8010fa8:	b002      	add	sp, #8
 8010faa:	bd10      	pop	{r4, pc}
 8010fac:	2000      	movs	r0, #0
 8010fae:	b002      	add	sp, #8
 8010fb0:	bd10      	pop	{r4, pc}
 8010fb2:	bf00      	nop
 8010fb4:	0801e6dc 	.word	0x0801e6dc
 8010fb8:	0801def8 	.word	0x0801def8

08010fbc <is_uxrce_rmw_identifier_valid>:
 8010fbc:	b510      	push	{r4, lr}
 8010fbe:	4604      	mov	r4, r0
 8010fc0:	b140      	cbz	r0, 8010fd4 <is_uxrce_rmw_identifier_valid+0x18>
 8010fc2:	f007 fbf9 	bl	80187b8 <rmw_get_implementation_identifier>
 8010fc6:	4601      	mov	r1, r0
 8010fc8:	4620      	mov	r0, r4
 8010fca:	f7ef f929 	bl	8000220 <strcmp>
 8010fce:	fab0 f080 	clz	r0, r0
 8010fd2:	0940      	lsrs	r0, r0, #5
 8010fd4:	bd10      	pop	{r4, pc}
 8010fd6:	bf00      	nop

08010fd8 <get_message_typesupport_handle>:
 8010fd8:	6883      	ldr	r3, [r0, #8]
 8010fda:	4718      	bx	r3

08010fdc <get_message_typesupport_handle_function>:
 8010fdc:	b510      	push	{r4, lr}
 8010fde:	4604      	mov	r4, r0
 8010fe0:	6800      	ldr	r0, [r0, #0]
 8010fe2:	f7ef f91d 	bl	8000220 <strcmp>
 8010fe6:	2800      	cmp	r0, #0
 8010fe8:	bf0c      	ite	eq
 8010fea:	4620      	moveq	r0, r4
 8010fec:	2000      	movne	r0, #0
 8010fee:	bd10      	pop	{r4, pc}

08010ff0 <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 8010ff0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010ff4:	6805      	ldr	r5, [r0, #0]
 8010ff6:	4604      	mov	r4, r0
 8010ff8:	4628      	mov	r0, r5
 8010ffa:	460e      	mov	r6, r1
 8010ffc:	f7ef f910 	bl	8000220 <strcmp>
 8011000:	b1c8      	cbz	r0, 8011036 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x46>
 8011002:	4b11      	ldr	r3, [pc, #68]	@ (8011048 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x58>)
 8011004:	681b      	ldr	r3, [r3, #0]
 8011006:	429d      	cmp	r5, r3
 8011008:	d112      	bne.n	8011030 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 801100a:	f8d4 8004 	ldr.w	r8, [r4, #4]
 801100e:	f8d8 4000 	ldr.w	r4, [r8]
 8011012:	b16c      	cbz	r4, 8011030 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 8011014:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8011018:	2700      	movs	r7, #0
 801101a:	3d04      	subs	r5, #4
 801101c:	f855 0f04 	ldr.w	r0, [r5, #4]!
 8011020:	4631      	mov	r1, r6
 8011022:	f7ef f8fd 	bl	8000220 <strcmp>
 8011026:	00bb      	lsls	r3, r7, #2
 8011028:	b140      	cbz	r0, 801103c <rosidl_typesupport_c__get_message_typesupport_handle_function+0x4c>
 801102a:	3701      	adds	r7, #1
 801102c:	42bc      	cmp	r4, r7
 801102e:	d1f5      	bne.n	801101c <rosidl_typesupport_c__get_message_typesupport_handle_function+0x2c>
 8011030:	2000      	movs	r0, #0
 8011032:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011036:	4620      	mov	r0, r4
 8011038:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801103c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8011040:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011044:	58d3      	ldr	r3, [r2, r3]
 8011046:	4718      	bx	r3
 8011048:	200001d0 	.word	0x200001d0

0801104c <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray>:
 801104c:	4b04      	ldr	r3, [pc, #16]	@ (8011060 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray+0x14>)
 801104e:	681a      	ldr	r2, [r3, #0]
 8011050:	b10a      	cbz	r2, 8011056 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray+0xa>
 8011052:	4803      	ldr	r0, [pc, #12]	@ (8011060 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray+0x14>)
 8011054:	4770      	bx	lr
 8011056:	4a03      	ldr	r2, [pc, #12]	@ (8011064 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray+0x18>)
 8011058:	4801      	ldr	r0, [pc, #4]	@ (8011060 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray+0x14>)
 801105a:	6812      	ldr	r2, [r2, #0]
 801105c:	601a      	str	r2, [r3, #0]
 801105e:	4770      	bx	lr
 8011060:	200001e0 	.word	0x200001e0
 8011064:	200001d0 	.word	0x200001d0

08011068 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray>:
 8011068:	4a02      	ldr	r2, [pc, #8]	@ (8011074 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray+0xc>)
 801106a:	4b03      	ldr	r3, [pc, #12]	@ (8011078 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray+0x10>)
 801106c:	6812      	ldr	r2, [r2, #0]
 801106e:	601a      	str	r2, [r3, #0]
 8011070:	4770      	bx	lr
 8011072:	bf00      	nop
 8011074:	200001d0 	.word	0x200001d0
 8011078:	200001e0 	.word	0x200001e0

0801107c <std_msgs__msg__Float64MultiArray__rosidl_typesupport_introspection_c__size_function__Float64MultiArray__data>:
 801107c:	6840      	ldr	r0, [r0, #4]
 801107e:	4770      	bx	lr

08011080 <std_msgs__msg__Float64MultiArray__rosidl_typesupport_introspection_c__get_const_function__Float64MultiArray__data>:
 8011080:	6800      	ldr	r0, [r0, #0]
 8011082:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 8011086:	4770      	bx	lr

08011088 <std_msgs__msg__Float64MultiArray__rosidl_typesupport_introspection_c__fetch_function__Float64MultiArray__data>:
 8011088:	6803      	ldr	r3, [r0, #0]
 801108a:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 801108e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011092:	e9c2 0100 	strd	r0, r1, [r2]
 8011096:	4770      	bx	lr

08011098 <std_msgs__msg__Float64MultiArray__rosidl_typesupport_introspection_c__assign_function__Float64MultiArray__data>:
 8011098:	6803      	ldr	r3, [r0, #0]
 801109a:	ed92 7b00 	vldr	d7, [r2]
 801109e:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 80110a2:	ed81 7b00 	vstr	d7, [r1]
 80110a6:	4770      	bx	lr

080110a8 <std_msgs__msg__Float64MultiArray__rosidl_typesupport_introspection_c__Float64MultiArray_init_function>:
 80110a8:	f007 bf66 	b.w	8018f78 <std_msgs__msg__Float64MultiArray__init>

080110ac <std_msgs__msg__Float64MultiArray__rosidl_typesupport_introspection_c__Float64MultiArray_fini_function>:
 80110ac:	f007 bf88 	b.w	8018fc0 <std_msgs__msg__Float64MultiArray__fini>

080110b0 <std_msgs__msg__Float64MultiArray__rosidl_typesupport_introspection_c__resize_function__Float64MultiArray__data>:
 80110b0:	b510      	push	{r4, lr}
 80110b2:	b082      	sub	sp, #8
 80110b4:	4604      	mov	r4, r0
 80110b6:	9101      	str	r1, [sp, #4]
 80110b8:	f007 ff4a 	bl	8018f50 <rosidl_runtime_c__double__Sequence__fini>
 80110bc:	9901      	ldr	r1, [sp, #4]
 80110be:	4620      	mov	r0, r4
 80110c0:	b002      	add	sp, #8
 80110c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80110c6:	f007 bf2b 	b.w	8018f20 <rosidl_runtime_c__double__Sequence__init>
 80110ca:	bf00      	nop

080110cc <std_msgs__msg__Float64MultiArray__rosidl_typesupport_introspection_c__get_function__Float64MultiArray__data>:
 80110cc:	6800      	ldr	r0, [r0, #0]
 80110ce:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 80110d2:	4770      	bx	lr

080110d4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray>:
 80110d4:	b508      	push	{r3, lr}
 80110d6:	f000 f857 	bl	8011188 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout>
 80110da:	4b06      	ldr	r3, [pc, #24]	@ (80110f4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray+0x20>)
 80110dc:	4906      	ldr	r1, [pc, #24]	@ (80110f8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray+0x24>)
 80110de:	681a      	ldr	r2, [r3, #0]
 80110e0:	60c8      	str	r0, [r1, #12]
 80110e2:	b10a      	cbz	r2, 80110e8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray+0x14>
 80110e4:	4803      	ldr	r0, [pc, #12]	@ (80110f4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray+0x20>)
 80110e6:	bd08      	pop	{r3, pc}
 80110e8:	4a04      	ldr	r2, [pc, #16]	@ (80110fc <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray+0x28>)
 80110ea:	4802      	ldr	r0, [pc, #8]	@ (80110f4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray+0x20>)
 80110ec:	6812      	ldr	r2, [r2, #0]
 80110ee:	601a      	str	r2, [r3, #0]
 80110f0:	bd08      	pop	{r3, pc}
 80110f2:	bf00      	nop
 80110f4:	20000264 	.word	0x20000264
 80110f8:	200001ec 	.word	0x200001ec
 80110fc:	200001d4 	.word	0x200001d4

08011100 <std_msgs__msg__MultiArrayLayout__rosidl_typesupport_introspection_c__size_function__MultiArrayLayout__dim>:
 8011100:	6840      	ldr	r0, [r0, #4]
 8011102:	4770      	bx	lr

08011104 <std_msgs__msg__MultiArrayLayout__rosidl_typesupport_introspection_c__get_const_function__MultiArrayLayout__dim>:
 8011104:	6800      	ldr	r0, [r0, #0]
 8011106:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 801110a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 801110e:	4770      	bx	lr

08011110 <std_msgs__msg__MultiArrayLayout__rosidl_typesupport_introspection_c__fetch_function__MultiArrayLayout__dim>:
 8011110:	6803      	ldr	r3, [r0, #0]
 8011112:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8011116:	b500      	push	{lr}
 8011118:	eb03 0e81 	add.w	lr, r3, r1, lsl #2
 801111c:	4694      	mov	ip, r2
 801111e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8011122:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011126:	f8de 3000 	ldr.w	r3, [lr]
 801112a:	f8cc 3000 	str.w	r3, [ip]
 801112e:	f85d fb04 	ldr.w	pc, [sp], #4
 8011132:	bf00      	nop

08011134 <std_msgs__msg__MultiArrayLayout__rosidl_typesupport_introspection_c__assign_function__MultiArrayLayout__dim>:
 8011134:	6803      	ldr	r3, [r0, #0]
 8011136:	b500      	push	{lr}
 8011138:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 801113c:	4696      	mov	lr, r2
 801113e:	eb03 0c81 	add.w	ip, r3, r1, lsl #2
 8011142:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8011146:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801114a:	f8de 3000 	ldr.w	r3, [lr]
 801114e:	f8cc 3000 	str.w	r3, [ip]
 8011152:	f85d fb04 	ldr.w	pc, [sp], #4
 8011156:	bf00      	nop

08011158 <std_msgs__msg__MultiArrayLayout__rosidl_typesupport_introspection_c__MultiArrayLayout_init_function>:
 8011158:	f007 bfc8 	b.w	80190ec <std_msgs__msg__MultiArrayLayout__init>

0801115c <std_msgs__msg__MultiArrayLayout__rosidl_typesupport_introspection_c__MultiArrayLayout_fini_function>:
 801115c:	f007 bfd8 	b.w	8019110 <std_msgs__msg__MultiArrayLayout__fini>

08011160 <std_msgs__msg__MultiArrayLayout__rosidl_typesupport_introspection_c__resize_function__MultiArrayLayout__dim>:
 8011160:	b510      	push	{r4, lr}
 8011162:	b082      	sub	sp, #8
 8011164:	4604      	mov	r4, r0
 8011166:	9101      	str	r1, [sp, #4]
 8011168:	f007 ff98 	bl	801909c <std_msgs__msg__MultiArrayDimension__Sequence__fini>
 801116c:	9901      	ldr	r1, [sp, #4]
 801116e:	4620      	mov	r0, r4
 8011170:	b002      	add	sp, #8
 8011172:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011176:	f007 bf8d 	b.w	8019094 <std_msgs__msg__MultiArrayDimension__Sequence__init>
 801117a:	bf00      	nop

0801117c <std_msgs__msg__MultiArrayLayout__rosidl_typesupport_introspection_c__get_function__MultiArrayLayout__dim>:
 801117c:	6800      	ldr	r0, [r0, #0]
 801117e:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8011182:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8011186:	4770      	bx	lr

08011188 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout>:
 8011188:	b508      	push	{r3, lr}
 801118a:	f007 ffc9 	bl	8019120 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension>
 801118e:	4b06      	ldr	r3, [pc, #24]	@ (80111a8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout+0x20>)
 8011190:	4906      	ldr	r1, [pc, #24]	@ (80111ac <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout+0x24>)
 8011192:	681a      	ldr	r2, [r3, #0]
 8011194:	60c8      	str	r0, [r1, #12]
 8011196:	b10a      	cbz	r2, 801119c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout+0x14>
 8011198:	4803      	ldr	r0, [pc, #12]	@ (80111a8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout+0x20>)
 801119a:	bd08      	pop	{r3, pc}
 801119c:	4a04      	ldr	r2, [pc, #16]	@ (80111b0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout+0x28>)
 801119e:	4802      	ldr	r0, [pc, #8]	@ (80111a8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout+0x20>)
 80111a0:	6812      	ldr	r2, [r2, #0]
 80111a2:	601a      	str	r2, [r3, #0]
 80111a4:	bd08      	pop	{r3, pc}
 80111a6:	bf00      	nop
 80111a8:	200002e8 	.word	0x200002e8
 80111ac:	20000270 	.word	0x20000270
 80111b0:	200001d4 	.word	0x200001d4

080111b4 <_Float64MultiArray__max_serialized_size>:
 80111b4:	b500      	push	{lr}
 80111b6:	b083      	sub	sp, #12
 80111b8:	2301      	movs	r3, #1
 80111ba:	2100      	movs	r1, #0
 80111bc:	f10d 0007 	add.w	r0, sp, #7
 80111c0:	f88d 3007 	strb.w	r3, [sp, #7]
 80111c4:	f000 f91c 	bl	8011400 <max_serialized_size_std_msgs__msg__MultiArrayLayout>
 80111c8:	b003      	add	sp, #12
 80111ca:	f85d fb04 	ldr.w	pc, [sp], #4
 80111ce:	bf00      	nop

080111d0 <get_serialized_size_std_msgs__msg__Float64MultiArray>:
 80111d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80111d2:	4604      	mov	r4, r0
 80111d4:	b160      	cbz	r0, 80111f0 <get_serialized_size_std_msgs__msg__Float64MultiArray+0x20>
 80111d6:	460d      	mov	r5, r1
 80111d8:	f000 f8b6 	bl	8011348 <get_serialized_size_std_msgs__msg__MultiArrayLayout>
 80111dc:	182e      	adds	r6, r5, r0
 80111de:	4630      	mov	r0, r6
 80111e0:	2104      	movs	r1, #4
 80111e2:	6967      	ldr	r7, [r4, #20]
 80111e4:	f7fd f9a8 	bl	800e538 <ucdr_alignment>
 80111e8:	1d03      	adds	r3, r0, #4
 80111ea:	441e      	add	r6, r3
 80111ec:	b90f      	cbnz	r7, 80111f2 <get_serialized_size_std_msgs__msg__Float64MultiArray+0x22>
 80111ee:	1b70      	subs	r0, r6, r5
 80111f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80111f2:	4630      	mov	r0, r6
 80111f4:	2108      	movs	r1, #8
 80111f6:	f7fd f99f 	bl	800e538 <ucdr_alignment>
 80111fa:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 80111fe:	181e      	adds	r6, r3, r0
 8011200:	1b70      	subs	r0, r6, r5
 8011202:	e7f5      	b.n	80111f0 <get_serialized_size_std_msgs__msg__Float64MultiArray+0x20>

08011204 <_Float64MultiArray__cdr_deserialize>:
 8011204:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011206:	460c      	mov	r4, r1
 8011208:	b083      	sub	sp, #12
 801120a:	b1d1      	cbz	r1, 8011242 <_Float64MultiArray__cdr_deserialize+0x3e>
 801120c:	4606      	mov	r6, r0
 801120e:	f000 f901 	bl	8011414 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout>
 8011212:	6843      	ldr	r3, [r0, #4]
 8011214:	4621      	mov	r1, r4
 8011216:	68db      	ldr	r3, [r3, #12]
 8011218:	4630      	mov	r0, r6
 801121a:	4798      	blx	r3
 801121c:	69a7      	ldr	r7, [r4, #24]
 801121e:	6921      	ldr	r1, [r4, #16]
 8011220:	ab01      	add	r3, sp, #4
 8011222:	463a      	mov	r2, r7
 8011224:	4630      	mov	r0, r6
 8011226:	f000 f999 	bl	801155c <ucdr_deserialize_sequence_double>
 801122a:	9b01      	ldr	r3, [sp, #4]
 801122c:	4605      	mov	r5, r0
 801122e:	b920      	cbnz	r0, 801123a <_Float64MultiArray__cdr_deserialize+0x36>
 8011230:	429f      	cmp	r7, r3
 8011232:	d30a      	bcc.n	801124a <_Float64MultiArray__cdr_deserialize+0x46>
 8011234:	4628      	mov	r0, r5
 8011236:	b003      	add	sp, #12
 8011238:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801123a:	4628      	mov	r0, r5
 801123c:	6163      	str	r3, [r4, #20]
 801123e:	b003      	add	sp, #12
 8011240:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011242:	460d      	mov	r5, r1
 8011244:	4628      	mov	r0, r5
 8011246:	b003      	add	sp, #12
 8011248:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801124a:	2301      	movs	r3, #1
 801124c:	75b0      	strb	r0, [r6, #22]
 801124e:	7573      	strb	r3, [r6, #21]
 8011250:	4630      	mov	r0, r6
 8011252:	6165      	str	r5, [r4, #20]
 8011254:	2108      	movs	r1, #8
 8011256:	f7fd f985 	bl	800e564 <ucdr_align_to>
 801125a:	9901      	ldr	r1, [sp, #4]
 801125c:	4630      	mov	r0, r6
 801125e:	00c9      	lsls	r1, r1, #3
 8011260:	f7fd f9b6 	bl	800e5d0 <ucdr_advance_buffer>
 8011264:	4628      	mov	r0, r5
 8011266:	b003      	add	sp, #12
 8011268:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801126a:	bf00      	nop

0801126c <_Float64MultiArray__cdr_serialize>:
 801126c:	b180      	cbz	r0, 8011290 <_Float64MultiArray__cdr_serialize+0x24>
 801126e:	b538      	push	{r3, r4, r5, lr}
 8011270:	460d      	mov	r5, r1
 8011272:	4604      	mov	r4, r0
 8011274:	f000 f8ce 	bl	8011414 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout>
 8011278:	6843      	ldr	r3, [r0, #4]
 801127a:	4629      	mov	r1, r5
 801127c:	689b      	ldr	r3, [r3, #8]
 801127e:	4620      	mov	r0, r4
 8011280:	4798      	blx	r3
 8011282:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
 8011286:	4628      	mov	r0, r5
 8011288:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801128c:	f000 b954 	b.w	8011538 <ucdr_serialize_sequence_double>
 8011290:	4770      	bx	lr
 8011292:	bf00      	nop

08011294 <_Float64MultiArray__get_serialized_size>:
 8011294:	b570      	push	{r4, r5, r6, lr}
 8011296:	4604      	mov	r4, r0
 8011298:	b150      	cbz	r0, 80112b0 <_Float64MultiArray__get_serialized_size+0x1c>
 801129a:	2100      	movs	r1, #0
 801129c:	f000 f854 	bl	8011348 <get_serialized_size_std_msgs__msg__MultiArrayLayout>
 80112a0:	2104      	movs	r1, #4
 80112a2:	6966      	ldr	r6, [r4, #20]
 80112a4:	4605      	mov	r5, r0
 80112a6:	f7fd f947 	bl	800e538 <ucdr_alignment>
 80112aa:	4428      	add	r0, r5
 80112ac:	1d04      	adds	r4, r0, #4
 80112ae:	b90e      	cbnz	r6, 80112b4 <_Float64MultiArray__get_serialized_size+0x20>
 80112b0:	4620      	mov	r0, r4
 80112b2:	bd70      	pop	{r4, r5, r6, pc}
 80112b4:	4620      	mov	r0, r4
 80112b6:	2108      	movs	r1, #8
 80112b8:	f7fd f93e 	bl	800e538 <ucdr_alignment>
 80112bc:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 80112c0:	4404      	add	r4, r0
 80112c2:	4620      	mov	r0, r4
 80112c4:	bd70      	pop	{r4, r5, r6, pc}
 80112c6:	bf00      	nop

080112c8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray>:
 80112c8:	4800      	ldr	r0, [pc, #0]	@ (80112cc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray+0x4>)
 80112ca:	4770      	bx	lr
 80112cc:	200002f4 	.word	0x200002f4

080112d0 <_MultiArrayLayout__max_serialized_size>:
 80112d0:	b508      	push	{r3, lr}
 80112d2:	2104      	movs	r1, #4
 80112d4:	2000      	movs	r0, #0
 80112d6:	f7fd f92f 	bl	800e538 <ucdr_alignment>
 80112da:	3004      	adds	r0, #4
 80112dc:	bd08      	pop	{r3, pc}
 80112de:	bf00      	nop

080112e0 <get_serialized_size_std_msgs__msg__MultiArrayLayout.part.0>:
 80112e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80112e4:	4689      	mov	r9, r1
 80112e6:	f8d0 8004 	ldr.w	r8, [r0, #4]
 80112ea:	4607      	mov	r7, r0
 80112ec:	2104      	movs	r1, #4
 80112ee:	4648      	mov	r0, r9
 80112f0:	f7fd f922 	bl	800e538 <ucdr_alignment>
 80112f4:	f109 0304 	add.w	r3, r9, #4
 80112f8:	18c6      	adds	r6, r0, r3
 80112fa:	f1b8 0f00 	cmp.w	r8, #0
 80112fe:	d018      	beq.n	8011332 <get_serialized_size_std_msgs__msg__MultiArrayLayout.part.0+0x52>
 8011300:	2500      	movs	r5, #0
 8011302:	f007 ffab 	bl	801925c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension>
 8011306:	683a      	ldr	r2, [r7, #0]
 8011308:	6843      	ldr	r3, [r0, #4]
 801130a:	eb05 0085 	add.w	r0, r5, r5, lsl #2
 801130e:	4631      	mov	r1, r6
 8011310:	695b      	ldr	r3, [r3, #20]
 8011312:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 8011316:	4798      	blx	r3
 8011318:	4604      	mov	r4, r0
 801131a:	2c04      	cmp	r4, #4
 801131c:	4621      	mov	r1, r4
 801131e:	4630      	mov	r0, r6
 8011320:	bf28      	it	cs
 8011322:	2104      	movcs	r1, #4
 8011324:	f7fd f908 	bl	800e538 <ucdr_alignment>
 8011328:	3501      	adds	r5, #1
 801132a:	4404      	add	r4, r0
 801132c:	45a8      	cmp	r8, r5
 801132e:	4426      	add	r6, r4
 8011330:	d1e7      	bne.n	8011302 <get_serialized_size_std_msgs__msg__MultiArrayLayout.part.0+0x22>
 8011332:	2104      	movs	r1, #4
 8011334:	4630      	mov	r0, r6
 8011336:	f7fd f8ff 	bl	800e538 <ucdr_alignment>
 801133a:	f1c9 0904 	rsb	r9, r9, #4
 801133e:	444e      	add	r6, r9
 8011340:	4430      	add	r0, r6
 8011342:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011346:	bf00      	nop

08011348 <get_serialized_size_std_msgs__msg__MultiArrayLayout>:
 8011348:	b108      	cbz	r0, 801134e <get_serialized_size_std_msgs__msg__MultiArrayLayout+0x6>
 801134a:	f7ff bfc9 	b.w	80112e0 <get_serialized_size_std_msgs__msg__MultiArrayLayout.part.0>
 801134e:	4770      	bx	lr

08011350 <_MultiArrayLayout__get_serialized_size>:
 8011350:	b110      	cbz	r0, 8011358 <_MultiArrayLayout__get_serialized_size+0x8>
 8011352:	2100      	movs	r1, #0
 8011354:	f7ff bfc4 	b.w	80112e0 <get_serialized_size_std_msgs__msg__MultiArrayLayout.part.0>
 8011358:	4770      	bx	lr
 801135a:	bf00      	nop

0801135c <_MultiArrayLayout__cdr_deserialize>:
 801135c:	b349      	cbz	r1, 80113b2 <_MultiArrayLayout__cdr_deserialize+0x56>
 801135e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011360:	460e      	mov	r6, r1
 8011362:	b083      	sub	sp, #12
 8011364:	a901      	add	r1, sp, #4
 8011366:	4607      	mov	r7, r0
 8011368:	f7fc f946 	bl	800d5f8 <ucdr_deserialize_uint32_t>
 801136c:	9b01      	ldr	r3, [sp, #4]
 801136e:	68b2      	ldr	r2, [r6, #8]
 8011370:	429a      	cmp	r2, r3
 8011372:	d31b      	bcc.n	80113ac <_MultiArrayLayout__cdr_deserialize+0x50>
 8011374:	6073      	str	r3, [r6, #4]
 8011376:	b18b      	cbz	r3, 801139c <_MultiArrayLayout__cdr_deserialize+0x40>
 8011378:	2400      	movs	r4, #0
 801137a:	4625      	mov	r5, r4
 801137c:	e002      	b.n	8011384 <_MultiArrayLayout__cdr_deserialize+0x28>
 801137e:	9b01      	ldr	r3, [sp, #4]
 8011380:	429d      	cmp	r5, r3
 8011382:	d20b      	bcs.n	801139c <_MultiArrayLayout__cdr_deserialize+0x40>
 8011384:	f007 ff6a 	bl	801925c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension>
 8011388:	6831      	ldr	r1, [r6, #0]
 801138a:	6843      	ldr	r3, [r0, #4]
 801138c:	4421      	add	r1, r4
 801138e:	68db      	ldr	r3, [r3, #12]
 8011390:	4638      	mov	r0, r7
 8011392:	4798      	blx	r3
 8011394:	3501      	adds	r5, #1
 8011396:	3414      	adds	r4, #20
 8011398:	2800      	cmp	r0, #0
 801139a:	d1f0      	bne.n	801137e <_MultiArrayLayout__cdr_deserialize+0x22>
 801139c:	f106 010c 	add.w	r1, r6, #12
 80113a0:	4638      	mov	r0, r7
 80113a2:	b003      	add	sp, #12
 80113a4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80113a8:	f7fc b926 	b.w	800d5f8 <ucdr_deserialize_uint32_t>
 80113ac:	2000      	movs	r0, #0
 80113ae:	b003      	add	sp, #12
 80113b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80113b2:	2000      	movs	r0, #0
 80113b4:	4770      	bx	lr
 80113b6:	bf00      	nop

080113b8 <_MultiArrayLayout__cdr_serialize>:
 80113b8:	b308      	cbz	r0, 80113fe <_MultiArrayLayout__cdr_serialize+0x46>
 80113ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80113bc:	6847      	ldr	r7, [r0, #4]
 80113be:	460e      	mov	r6, r1
 80113c0:	4605      	mov	r5, r0
 80113c2:	4608      	mov	r0, r1
 80113c4:	4639      	mov	r1, r7
 80113c6:	f7fb ffe7 	bl	800d398 <ucdr_serialize_uint32_t>
 80113ca:	b190      	cbz	r0, 80113f2 <_MultiArrayLayout__cdr_serialize+0x3a>
 80113cc:	b18f      	cbz	r7, 80113f2 <_MultiArrayLayout__cdr_serialize+0x3a>
 80113ce:	2400      	movs	r4, #0
 80113d0:	e001      	b.n	80113d6 <_MultiArrayLayout__cdr_serialize+0x1e>
 80113d2:	42a7      	cmp	r7, r4
 80113d4:	d00d      	beq.n	80113f2 <_MultiArrayLayout__cdr_serialize+0x3a>
 80113d6:	f007 ff41 	bl	801925c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension>
 80113da:	682a      	ldr	r2, [r5, #0]
 80113dc:	6843      	ldr	r3, [r0, #4]
 80113de:	eb04 0084 	add.w	r0, r4, r4, lsl #2
 80113e2:	689b      	ldr	r3, [r3, #8]
 80113e4:	4631      	mov	r1, r6
 80113e6:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 80113ea:	3401      	adds	r4, #1
 80113ec:	4798      	blx	r3
 80113ee:	2800      	cmp	r0, #0
 80113f0:	d1ef      	bne.n	80113d2 <_MultiArrayLayout__cdr_serialize+0x1a>
 80113f2:	68e9      	ldr	r1, [r5, #12]
 80113f4:	4630      	mov	r0, r6
 80113f6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80113fa:	f7fb bfcd 	b.w	800d398 <ucdr_serialize_uint32_t>
 80113fe:	4770      	bx	lr

08011400 <max_serialized_size_std_msgs__msg__MultiArrayLayout>:
 8011400:	b508      	push	{r3, lr}
 8011402:	4603      	mov	r3, r0
 8011404:	2200      	movs	r2, #0
 8011406:	4608      	mov	r0, r1
 8011408:	701a      	strb	r2, [r3, #0]
 801140a:	2104      	movs	r1, #4
 801140c:	f7fd f894 	bl	800e538 <ucdr_alignment>
 8011410:	3004      	adds	r0, #4
 8011412:	bd08      	pop	{r3, pc}

08011414 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout>:
 8011414:	4800      	ldr	r0, [pc, #0]	@ (8011418 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout+0x4>)
 8011416:	4770      	bx	lr
 8011418:	2000031c 	.word	0x2000031c

0801141c <geometry_msgs__msg__Twist__init>:
 801141c:	b570      	push	{r4, r5, r6, lr}
 801141e:	4605      	mov	r5, r0
 8011420:	b1a8      	cbz	r0, 801144e <geometry_msgs__msg__Twist__init+0x32>
 8011422:	f000 f82b 	bl	801147c <geometry_msgs__msg__Vector3__init>
 8011426:	4604      	mov	r4, r0
 8011428:	b140      	cbz	r0, 801143c <geometry_msgs__msg__Twist__init+0x20>
 801142a:	f105 0618 	add.w	r6, r5, #24
 801142e:	4630      	mov	r0, r6
 8011430:	f000 f824 	bl	801147c <geometry_msgs__msg__Vector3__init>
 8011434:	4604      	mov	r4, r0
 8011436:	b168      	cbz	r0, 8011454 <geometry_msgs__msg__Twist__init+0x38>
 8011438:	4620      	mov	r0, r4
 801143a:	bd70      	pop	{r4, r5, r6, pc}
 801143c:	4628      	mov	r0, r5
 801143e:	f000 f821 	bl	8011484 <geometry_msgs__msg__Vector3__fini>
 8011442:	f105 0018 	add.w	r0, r5, #24
 8011446:	f000 f81d 	bl	8011484 <geometry_msgs__msg__Vector3__fini>
 801144a:	4620      	mov	r0, r4
 801144c:	bd70      	pop	{r4, r5, r6, pc}
 801144e:	4604      	mov	r4, r0
 8011450:	4620      	mov	r0, r4
 8011452:	bd70      	pop	{r4, r5, r6, pc}
 8011454:	4628      	mov	r0, r5
 8011456:	f000 f815 	bl	8011484 <geometry_msgs__msg__Vector3__fini>
 801145a:	4630      	mov	r0, r6
 801145c:	f000 f812 	bl	8011484 <geometry_msgs__msg__Vector3__fini>
 8011460:	e7ea      	b.n	8011438 <geometry_msgs__msg__Twist__init+0x1c>
 8011462:	bf00      	nop

08011464 <geometry_msgs__msg__Twist__fini>:
 8011464:	b148      	cbz	r0, 801147a <geometry_msgs__msg__Twist__fini+0x16>
 8011466:	b510      	push	{r4, lr}
 8011468:	4604      	mov	r4, r0
 801146a:	f000 f80b 	bl	8011484 <geometry_msgs__msg__Vector3__fini>
 801146e:	f104 0018 	add.w	r0, r4, #24
 8011472:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011476:	f000 b805 	b.w	8011484 <geometry_msgs__msg__Vector3__fini>
 801147a:	4770      	bx	lr

0801147c <geometry_msgs__msg__Vector3__init>:
 801147c:	3800      	subs	r0, #0
 801147e:	bf18      	it	ne
 8011480:	2001      	movne	r0, #1
 8011482:	4770      	bx	lr

08011484 <geometry_msgs__msg__Vector3__fini>:
 8011484:	4770      	bx	lr
 8011486:	bf00      	nop

08011488 <ucdr_serialize_sequence_char>:
 8011488:	b570      	push	{r4, r5, r6, lr}
 801148a:	4615      	mov	r5, r2
 801148c:	460e      	mov	r6, r1
 801148e:	7d01      	ldrb	r1, [r0, #20]
 8011490:	4604      	mov	r4, r0
 8011492:	f7fc f819 	bl	800d4c8 <ucdr_serialize_endian_uint32_t>
 8011496:	b90d      	cbnz	r5, 801149c <ucdr_serialize_sequence_char+0x14>
 8011498:	2001      	movs	r0, #1
 801149a:	bd70      	pop	{r4, r5, r6, pc}
 801149c:	7d21      	ldrb	r1, [r4, #20]
 801149e:	462b      	mov	r3, r5
 80114a0:	4632      	mov	r2, r6
 80114a2:	4620      	mov	r0, r4
 80114a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80114a8:	f007 bedc 	b.w	8019264 <ucdr_serialize_endian_array_char>

080114ac <ucdr_deserialize_sequence_char>:
 80114ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80114b0:	461d      	mov	r5, r3
 80114b2:	4616      	mov	r6, r2
 80114b4:	460f      	mov	r7, r1
 80114b6:	461a      	mov	r2, r3
 80114b8:	7d01      	ldrb	r1, [r0, #20]
 80114ba:	4604      	mov	r4, r0
 80114bc:	f7fc f92c 	bl	800d718 <ucdr_deserialize_endian_uint32_t>
 80114c0:	682b      	ldr	r3, [r5, #0]
 80114c2:	429e      	cmp	r6, r3
 80114c4:	bf3c      	itt	cc
 80114c6:	2201      	movcc	r2, #1
 80114c8:	75a2      	strbcc	r2, [r4, #22]
 80114ca:	b913      	cbnz	r3, 80114d2 <ucdr_deserialize_sequence_char+0x26>
 80114cc:	2001      	movs	r0, #1
 80114ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80114d2:	7d21      	ldrb	r1, [r4, #20]
 80114d4:	463a      	mov	r2, r7
 80114d6:	4620      	mov	r0, r4
 80114d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80114dc:	f007 bef4 	b.w	80192c8 <ucdr_deserialize_endian_array_char>

080114e0 <ucdr_serialize_sequence_uint8_t>:
 80114e0:	b570      	push	{r4, r5, r6, lr}
 80114e2:	4615      	mov	r5, r2
 80114e4:	460e      	mov	r6, r1
 80114e6:	7d01      	ldrb	r1, [r0, #20]
 80114e8:	4604      	mov	r4, r0
 80114ea:	f7fb ffed 	bl	800d4c8 <ucdr_serialize_endian_uint32_t>
 80114ee:	b90d      	cbnz	r5, 80114f4 <ucdr_serialize_sequence_uint8_t+0x14>
 80114f0:	2001      	movs	r0, #1
 80114f2:	bd70      	pop	{r4, r5, r6, pc}
 80114f4:	7d21      	ldrb	r1, [r4, #20]
 80114f6:	462b      	mov	r3, r5
 80114f8:	4632      	mov	r2, r6
 80114fa:	4620      	mov	r0, r4
 80114fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011500:	f007 bf46 	b.w	8019390 <ucdr_serialize_endian_array_uint8_t>

08011504 <ucdr_deserialize_sequence_uint8_t>:
 8011504:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011508:	461d      	mov	r5, r3
 801150a:	4616      	mov	r6, r2
 801150c:	460f      	mov	r7, r1
 801150e:	461a      	mov	r2, r3
 8011510:	7d01      	ldrb	r1, [r0, #20]
 8011512:	4604      	mov	r4, r0
 8011514:	f7fc f900 	bl	800d718 <ucdr_deserialize_endian_uint32_t>
 8011518:	682b      	ldr	r3, [r5, #0]
 801151a:	429e      	cmp	r6, r3
 801151c:	bf3c      	itt	cc
 801151e:	2201      	movcc	r2, #1
 8011520:	75a2      	strbcc	r2, [r4, #22]
 8011522:	b913      	cbnz	r3, 801152a <ucdr_deserialize_sequence_uint8_t+0x26>
 8011524:	2001      	movs	r0, #1
 8011526:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801152a:	7d21      	ldrb	r1, [r4, #20]
 801152c:	463a      	mov	r2, r7
 801152e:	4620      	mov	r0, r4
 8011530:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011534:	f007 bf90 	b.w	8019458 <ucdr_deserialize_endian_array_uint8_t>

08011538 <ucdr_serialize_sequence_double>:
 8011538:	b570      	push	{r4, r5, r6, lr}
 801153a:	4615      	mov	r5, r2
 801153c:	460e      	mov	r6, r1
 801153e:	7d01      	ldrb	r1, [r0, #20]
 8011540:	4604      	mov	r4, r0
 8011542:	f7fb ffc1 	bl	800d4c8 <ucdr_serialize_endian_uint32_t>
 8011546:	b90d      	cbnz	r5, 801154c <ucdr_serialize_sequence_double+0x14>
 8011548:	2001      	movs	r0, #1
 801154a:	bd70      	pop	{r4, r5, r6, pc}
 801154c:	7d21      	ldrb	r1, [r4, #20]
 801154e:	462b      	mov	r3, r5
 8011550:	4632      	mov	r2, r6
 8011552:	4620      	mov	r0, r4
 8011554:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011558:	f007 bfb0 	b.w	80194bc <ucdr_serialize_endian_array_double>

0801155c <ucdr_deserialize_sequence_double>:
 801155c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011560:	461d      	mov	r5, r3
 8011562:	4616      	mov	r6, r2
 8011564:	460f      	mov	r7, r1
 8011566:	461a      	mov	r2, r3
 8011568:	7d01      	ldrb	r1, [r0, #20]
 801156a:	4604      	mov	r4, r0
 801156c:	f7fc f8d4 	bl	800d718 <ucdr_deserialize_endian_uint32_t>
 8011570:	682b      	ldr	r3, [r5, #0]
 8011572:	429e      	cmp	r6, r3
 8011574:	bf3c      	itt	cc
 8011576:	2201      	movcc	r2, #1
 8011578:	75a2      	strbcc	r2, [r4, #22]
 801157a:	b913      	cbnz	r3, 8011582 <ucdr_deserialize_sequence_double+0x26>
 801157c:	2001      	movs	r0, #1
 801157e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011582:	7d21      	ldrb	r1, [r4, #20]
 8011584:	463a      	mov	r2, r7
 8011586:	4620      	mov	r0, r4
 8011588:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801158c:	f007 bfea 	b.w	8019564 <ucdr_deserialize_endian_array_double>

08011590 <uxr_buffer_delete_entity>:
 8011590:	b510      	push	{r4, lr}
 8011592:	2300      	movs	r3, #0
 8011594:	b08e      	sub	sp, #56	@ 0x38
 8011596:	e9cd 3201 	strd	r3, r2, [sp, #4]
 801159a:	2303      	movs	r3, #3
 801159c:	9300      	str	r3, [sp, #0]
 801159e:	2204      	movs	r2, #4
 80115a0:	ab06      	add	r3, sp, #24
 80115a2:	4604      	mov	r4, r0
 80115a4:	9103      	str	r1, [sp, #12]
 80115a6:	f001 fb99 	bl	8012cdc <uxr_prepare_stream_to_write_submessage>
 80115aa:	b918      	cbnz	r0, 80115b4 <uxr_buffer_delete_entity+0x24>
 80115ac:	4604      	mov	r4, r0
 80115ae:	4620      	mov	r0, r4
 80115b0:	b00e      	add	sp, #56	@ 0x38
 80115b2:	bd10      	pop	{r4, pc}
 80115b4:	9902      	ldr	r1, [sp, #8]
 80115b6:	aa05      	add	r2, sp, #20
 80115b8:	4620      	mov	r0, r4
 80115ba:	f001 fcc5 	bl	8012f48 <uxr_init_base_object_request>
 80115be:	a905      	add	r1, sp, #20
 80115c0:	4604      	mov	r4, r0
 80115c2:	a806      	add	r0, sp, #24
 80115c4:	f003 fba8 	bl	8014d18 <uxr_serialize_DELETE_Payload>
 80115c8:	4620      	mov	r0, r4
 80115ca:	b00e      	add	sp, #56	@ 0x38
 80115cc:	bd10      	pop	{r4, pc}
 80115ce:	bf00      	nop

080115d0 <uxr_common_create_entity>:
 80115d0:	b510      	push	{r4, lr}
 80115d2:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 80115d6:	b08c      	sub	sp, #48	@ 0x30
 80115d8:	e9cd 2102 	strd	r2, r1, [sp, #8]
 80115dc:	f1bc 0f01 	cmp.w	ip, #1
 80115e0:	bf0c      	ite	eq
 80115e2:	f003 0201 	andeq.w	r2, r3, #1
 80115e6:	2200      	movne	r2, #0
 80115e8:	330e      	adds	r3, #14
 80115ea:	f89d 1038 	ldrb.w	r1, [sp, #56]	@ 0x38
 80115ee:	9101      	str	r1, [sp, #4]
 80115f0:	441a      	add	r2, r3
 80115f2:	2301      	movs	r3, #1
 80115f4:	9300      	str	r3, [sp, #0]
 80115f6:	9903      	ldr	r1, [sp, #12]
 80115f8:	ab04      	add	r3, sp, #16
 80115fa:	b292      	uxth	r2, r2
 80115fc:	4604      	mov	r4, r0
 80115fe:	f001 fb6d 	bl	8012cdc <uxr_prepare_stream_to_write_submessage>
 8011602:	b918      	cbnz	r0, 801160c <uxr_common_create_entity+0x3c>
 8011604:	4604      	mov	r4, r0
 8011606:	4620      	mov	r0, r4
 8011608:	b00c      	add	sp, #48	@ 0x30
 801160a:	bd10      	pop	{r4, pc}
 801160c:	9902      	ldr	r1, [sp, #8]
 801160e:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8011610:	4620      	mov	r0, r4
 8011612:	f001 fc99 	bl	8012f48 <uxr_init_base_object_request>
 8011616:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8011618:	4604      	mov	r4, r0
 801161a:	a804      	add	r0, sp, #16
 801161c:	f003 fad8 	bl	8014bd0 <uxr_serialize_CREATE_Payload>
 8011620:	4620      	mov	r0, r4
 8011622:	b00c      	add	sp, #48	@ 0x30
 8011624:	bd10      	pop	{r4, pc}
 8011626:	bf00      	nop

08011628 <uxr_buffer_create_participant_bin>:
 8011628:	b570      	push	{r4, r5, r6, lr}
 801162a:	f5ad 7d16 	sub.w	sp, sp, #600	@ 0x258
 801162e:	ac11      	add	r4, sp, #68	@ 0x44
 8011630:	f8ad 3254 	strh.w	r3, [sp, #596]	@ 0x254
 8011634:	2303      	movs	r3, #3
 8011636:	e9cd 2102 	strd	r2, r1, [sp, #8]
 801163a:	7223      	strb	r3, [r4, #8]
 801163c:	9b9a      	ldr	r3, [sp, #616]	@ 0x268
 801163e:	f89d 626c 	ldrb.w	r6, [sp, #620]	@ 0x26c
 8011642:	2201      	movs	r2, #1
 8011644:	2100      	movs	r1, #0
 8011646:	4605      	mov	r5, r0
 8011648:	7122      	strb	r2, [r4, #4]
 801164a:	f88d 1014 	strb.w	r1, [sp, #20]
 801164e:	b1cb      	cbz	r3, 8011684 <uxr_buffer_create_participant_bin+0x5c>
 8011650:	f88d 201c 	strb.w	r2, [sp, #28]
 8011654:	9308      	str	r3, [sp, #32]
 8011656:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801165a:	a915      	add	r1, sp, #84	@ 0x54
 801165c:	a809      	add	r0, sp, #36	@ 0x24
 801165e:	f7fc ff67 	bl	800e530 <ucdr_init_buffer>
 8011662:	a905      	add	r1, sp, #20
 8011664:	a809      	add	r0, sp, #36	@ 0x24
 8011666:	f002 fe95 	bl	8014394 <uxr_serialize_OBJK_DomainParticipant_Binary>
 801166a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801166c:	9600      	str	r6, [sp, #0]
 801166e:	9401      	str	r4, [sp, #4]
 8011670:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8011674:	60e3      	str	r3, [r4, #12]
 8011676:	4628      	mov	r0, r5
 8011678:	b29b      	uxth	r3, r3
 801167a:	f7ff ffa9 	bl	80115d0 <uxr_common_create_entity>
 801167e:	f50d 7d16 	add.w	sp, sp, #600	@ 0x258
 8011682:	bd70      	pop	{r4, r5, r6, pc}
 8011684:	f88d 301c 	strb.w	r3, [sp, #28]
 8011688:	e7e5      	b.n	8011656 <uxr_buffer_create_participant_bin+0x2e>
 801168a:	bf00      	nop

0801168c <uxr_buffer_create_topic_bin>:
 801168c:	b570      	push	{r4, r5, r6, lr}
 801168e:	f5ad 7d18 	sub.w	sp, sp, #608	@ 0x260
 8011692:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8011696:	9105      	str	r1, [sp, #20]
 8011698:	4605      	mov	r5, r0
 801169a:	a997      	add	r1, sp, #604	@ 0x25c
 801169c:	4618      	mov	r0, r3
 801169e:	2302      	movs	r3, #2
 80116a0:	f89d 6278 	ldrb.w	r6, [sp, #632]	@ 0x278
 80116a4:	f88d 3050 	strb.w	r3, [sp, #80]	@ 0x50
 80116a8:	f000 fa58 	bl	8011b5c <uxr_object_id_to_raw>
 80116ac:	9b9c      	ldr	r3, [sp, #624]	@ 0x270
 80116ae:	9306      	str	r3, [sp, #24]
 80116b0:	9b9d      	ldr	r3, [sp, #628]	@ 0x274
 80116b2:	930a      	str	r3, [sp, #40]	@ 0x28
 80116b4:	2303      	movs	r3, #3
 80116b6:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 80116ba:	2301      	movs	r3, #1
 80116bc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80116c0:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 80116c4:	a917      	add	r1, sp, #92	@ 0x5c
 80116c6:	2300      	movs	r3, #0
 80116c8:	a80b      	add	r0, sp, #44	@ 0x2c
 80116ca:	f88d 301c 	strb.w	r3, [sp, #28]
 80116ce:	f7fc ff2f 	bl	800e530 <ucdr_init_buffer>
 80116d2:	a906      	add	r1, sp, #24
 80116d4:	a80b      	add	r0, sp, #44	@ 0x2c
 80116d6:	f002 fe7f 	bl	80143d8 <uxr_serialize_OBJK_Topic_Binary>
 80116da:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80116dc:	9316      	str	r3, [sp, #88]	@ 0x58
 80116de:	ac13      	add	r4, sp, #76	@ 0x4c
 80116e0:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 80116e4:	9600      	str	r6, [sp, #0]
 80116e6:	9401      	str	r4, [sp, #4]
 80116e8:	b29b      	uxth	r3, r3
 80116ea:	4628      	mov	r0, r5
 80116ec:	f7ff ff70 	bl	80115d0 <uxr_common_create_entity>
 80116f0:	f50d 7d18 	add.w	sp, sp, #608	@ 0x260
 80116f4:	bd70      	pop	{r4, r5, r6, pc}
 80116f6:	bf00      	nop

080116f8 <uxr_buffer_create_publisher_bin>:
 80116f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80116fa:	f2ad 4d8c 	subw	sp, sp, #1164	@ 0x48c
 80116fe:	4605      	mov	r5, r0
 8011700:	9105      	str	r1, [sp, #20]
 8011702:	4618      	mov	r0, r3
 8011704:	2603      	movs	r6, #3
 8011706:	a992      	add	r1, sp, #584	@ 0x248
 8011708:	e9cd 3203 	strd	r3, r2, [sp, #12]
 801170c:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	@ 0x4a0
 8011710:	f88d 603c 	strb.w	r6, [sp, #60]	@ 0x3c
 8011714:	f000 fa22 	bl	8011b5c <uxr_object_id_to_raw>
 8011718:	2300      	movs	r3, #0
 801171a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801171e:	a912      	add	r1, sp, #72	@ 0x48
 8011720:	a806      	add	r0, sp, #24
 8011722:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 8011726:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 801172a:	f88d 6040 	strb.w	r6, [sp, #64]	@ 0x40
 801172e:	f7fc feff 	bl	800e530 <ucdr_init_buffer>
 8011732:	a993      	add	r1, sp, #588	@ 0x24c
 8011734:	a806      	add	r0, sp, #24
 8011736:	f002 ff03 	bl	8014540 <uxr_serialize_OBJK_Publisher_Binary>
 801173a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801173c:	9311      	str	r3, [sp, #68]	@ 0x44
 801173e:	ac0e      	add	r4, sp, #56	@ 0x38
 8011740:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8011744:	9700      	str	r7, [sp, #0]
 8011746:	9401      	str	r4, [sp, #4]
 8011748:	b29b      	uxth	r3, r3
 801174a:	4628      	mov	r0, r5
 801174c:	f7ff ff40 	bl	80115d0 <uxr_common_create_entity>
 8011750:	f20d 4d8c 	addw	sp, sp, #1164	@ 0x48c
 8011754:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011756:	bf00      	nop

08011758 <uxr_buffer_create_subscriber_bin>:
 8011758:	b570      	push	{r4, r5, r6, lr}
 801175a:	f5ad 6d91 	sub.w	sp, sp, #1160	@ 0x488
 801175e:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8011762:	9105      	str	r1, [sp, #20]
 8011764:	4605      	mov	r5, r0
 8011766:	a992      	add	r1, sp, #584	@ 0x248
 8011768:	4618      	mov	r0, r3
 801176a:	2304      	movs	r3, #4
 801176c:	f89d 6498 	ldrb.w	r6, [sp, #1176]	@ 0x498
 8011770:	f88d 303c 	strb.w	r3, [sp, #60]	@ 0x3c
 8011774:	f000 f9f2 	bl	8011b5c <uxr_object_id_to_raw>
 8011778:	2300      	movs	r3, #0
 801177a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801177e:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 8011782:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 8011786:	a912      	add	r1, sp, #72	@ 0x48
 8011788:	2303      	movs	r3, #3
 801178a:	a806      	add	r0, sp, #24
 801178c:	f88d 3040 	strb.w	r3, [sp, #64]	@ 0x40
 8011790:	f7fc fece 	bl	800e530 <ucdr_init_buffer>
 8011794:	a993      	add	r1, sp, #588	@ 0x24c
 8011796:	a806      	add	r0, sp, #24
 8011798:	f002 ff82 	bl	80146a0 <uxr_serialize_OBJK_Subscriber_Binary>
 801179c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801179e:	9311      	str	r3, [sp, #68]	@ 0x44
 80117a0:	ac0e      	add	r4, sp, #56	@ 0x38
 80117a2:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 80117a6:	9600      	str	r6, [sp, #0]
 80117a8:	9401      	str	r4, [sp, #4]
 80117aa:	b29b      	uxth	r3, r3
 80117ac:	4628      	mov	r0, r5
 80117ae:	f7ff ff0f 	bl	80115d0 <uxr_common_create_entity>
 80117b2:	f50d 6d91 	add.w	sp, sp, #1160	@ 0x488
 80117b6:	bd70      	pop	{r4, r5, r6, pc}

080117b8 <uxr_buffer_create_datawriter_bin>:
 80117b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80117bc:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 80117c0:	ac1d      	add	r4, sp, #116	@ 0x74
 80117c2:	e9cd 3203 	strd	r3, r2, [sp, #12]
 80117c6:	f8bd 52a8 	ldrh.w	r5, [sp, #680]	@ 0x2a8
 80117ca:	9105      	str	r1, [sp, #20]
 80117cc:	4606      	mov	r6, r0
 80117ce:	a9a1      	add	r1, sp, #644	@ 0x284
 80117d0:	4618      	mov	r0, r3
 80117d2:	2305      	movs	r3, #5
 80117d4:	7123      	strb	r3, [r4, #4]
 80117d6:	f89d 82ac 	ldrb.w	r8, [sp, #684]	@ 0x2ac
 80117da:	2703      	movs	r7, #3
 80117dc:	f000 f9be 	bl	8011b5c <uxr_object_id_to_raw>
 80117e0:	98a8      	ldr	r0, [sp, #672]	@ 0x2a0
 80117e2:	7227      	strb	r7, [r4, #8]
 80117e4:	a90e      	add	r1, sp, #56	@ 0x38
 80117e6:	f000 f9b9 	bl	8011b5c <uxr_object_id_to_raw>
 80117ea:	2300      	movs	r3, #0
 80117ec:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 80117f0:	f89d 22a5 	ldrb.w	r2, [sp, #677]	@ 0x2a5
 80117f4:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 80117f8:	3d00      	subs	r5, #0
 80117fa:	bf18      	it	ne
 80117fc:	2501      	movne	r5, #1
 80117fe:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 8011802:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 8011806:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 801180a:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 801180e:	2301      	movs	r3, #1
 8011810:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 8011814:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 8011818:	bb8a      	cbnz	r2, 801187e <uxr_buffer_create_datawriter_bin+0xc6>
 801181a:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 801181e:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 8011822:	f04f 0c13 	mov.w	ip, #19
 8011826:	250b      	movs	r5, #11
 8011828:	2221      	movs	r2, #33	@ 0x21
 801182a:	2111      	movs	r1, #17
 801182c:	2009      	movs	r0, #9
 801182e:	f89d 32a6 	ldrb.w	r3, [sp, #678]	@ 0x2a6
 8011832:	b923      	cbnz	r3, 801183e <uxr_buffer_create_datawriter_bin+0x86>
 8011834:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 8011838:	4672      	mov	r2, lr
 801183a:	4661      	mov	r1, ip
 801183c:	4628      	mov	r0, r5
 801183e:	f89d 32a4 	ldrb.w	r3, [sp, #676]	@ 0x2a4
 8011842:	2b01      	cmp	r3, #1
 8011844:	d025      	beq.n	8011892 <uxr_buffer_create_datawriter_bin+0xda>
 8011846:	2b03      	cmp	r3, #3
 8011848:	d029      	beq.n	801189e <uxr_buffer_create_datawriter_bin+0xe6>
 801184a:	b32b      	cbz	r3, 8011898 <uxr_buffer_create_datawriter_bin+0xe0>
 801184c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011850:	a921      	add	r1, sp, #132	@ 0x84
 8011852:	a806      	add	r0, sp, #24
 8011854:	f7fc fe6c 	bl	800e530 <ucdr_init_buffer>
 8011858:	a90e      	add	r1, sp, #56	@ 0x38
 801185a:	a806      	add	r0, sp, #24
 801185c:	f002 ffd2 	bl	8014804 <uxr_serialize_OBJK_DataWriter_Binary>
 8011860:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011862:	f8cd 8000 	str.w	r8, [sp]
 8011866:	9401      	str	r4, [sp, #4]
 8011868:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 801186c:	60e3      	str	r3, [r4, #12]
 801186e:	4630      	mov	r0, r6
 8011870:	b29b      	uxth	r3, r3
 8011872:	f7ff fead 	bl	80115d0 <uxr_common_create_entity>
 8011876:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 801187a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801187e:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 8011882:	f04f 0c12 	mov.w	ip, #18
 8011886:	250a      	movs	r5, #10
 8011888:	2220      	movs	r2, #32
 801188a:	2110      	movs	r1, #16
 801188c:	2008      	movs	r0, #8
 801188e:	2702      	movs	r7, #2
 8011890:	e7cd      	b.n	801182e <uxr_buffer_create_datawriter_bin+0x76>
 8011892:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 8011896:	e7d9      	b.n	801184c <uxr_buffer_create_datawriter_bin+0x94>
 8011898:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 801189c:	e7d6      	b.n	801184c <uxr_buffer_create_datawriter_bin+0x94>
 801189e:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 80118a2:	e7d3      	b.n	801184c <uxr_buffer_create_datawriter_bin+0x94>

080118a4 <uxr_buffer_create_datareader_bin>:
 80118a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80118a8:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 80118ac:	ac1f      	add	r4, sp, #124	@ 0x7c
 80118ae:	e9cd 3203 	strd	r3, r2, [sp, #12]
 80118b2:	f8bd 52b0 	ldrh.w	r5, [sp, #688]	@ 0x2b0
 80118b6:	9105      	str	r1, [sp, #20]
 80118b8:	4606      	mov	r6, r0
 80118ba:	a9a3      	add	r1, sp, #652	@ 0x28c
 80118bc:	4618      	mov	r0, r3
 80118be:	2306      	movs	r3, #6
 80118c0:	7123      	strb	r3, [r4, #4]
 80118c2:	f89d 82b4 	ldrb.w	r8, [sp, #692]	@ 0x2b4
 80118c6:	2703      	movs	r7, #3
 80118c8:	f000 f948 	bl	8011b5c <uxr_object_id_to_raw>
 80118cc:	98aa      	ldr	r0, [sp, #680]	@ 0x2a8
 80118ce:	7227      	strb	r7, [r4, #8]
 80118d0:	a90e      	add	r1, sp, #56	@ 0x38
 80118d2:	f000 f943 	bl	8011b5c <uxr_object_id_to_raw>
 80118d6:	2300      	movs	r3, #0
 80118d8:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 80118dc:	f89d 22ad 	ldrb.w	r2, [sp, #685]	@ 0x2ad
 80118e0:	f88d 3070 	strb.w	r3, [sp, #112]	@ 0x70
 80118e4:	3d00      	subs	r5, #0
 80118e6:	bf18      	it	ne
 80118e8:	2501      	movne	r5, #1
 80118ea:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 80118ee:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 80118f2:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 80118f6:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 80118fa:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 80118fe:	2301      	movs	r3, #1
 8011900:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 8011904:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 8011908:	bb8a      	cbnz	r2, 801196e <uxr_buffer_create_datareader_bin+0xca>
 801190a:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 801190e:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 8011912:	f04f 0c13 	mov.w	ip, #19
 8011916:	250b      	movs	r5, #11
 8011918:	2221      	movs	r2, #33	@ 0x21
 801191a:	2111      	movs	r1, #17
 801191c:	2009      	movs	r0, #9
 801191e:	f89d 32ae 	ldrb.w	r3, [sp, #686]	@ 0x2ae
 8011922:	b923      	cbnz	r3, 801192e <uxr_buffer_create_datareader_bin+0x8a>
 8011924:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 8011928:	4672      	mov	r2, lr
 801192a:	4661      	mov	r1, ip
 801192c:	4628      	mov	r0, r5
 801192e:	f89d 32ac 	ldrb.w	r3, [sp, #684]	@ 0x2ac
 8011932:	2b01      	cmp	r3, #1
 8011934:	d025      	beq.n	8011982 <uxr_buffer_create_datareader_bin+0xde>
 8011936:	2b03      	cmp	r3, #3
 8011938:	d029      	beq.n	801198e <uxr_buffer_create_datareader_bin+0xea>
 801193a:	b32b      	cbz	r3, 8011988 <uxr_buffer_create_datareader_bin+0xe4>
 801193c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011940:	a923      	add	r1, sp, #140	@ 0x8c
 8011942:	a806      	add	r0, sp, #24
 8011944:	f7fc fdf4 	bl	800e530 <ucdr_init_buffer>
 8011948:	a90e      	add	r1, sp, #56	@ 0x38
 801194a:	a806      	add	r0, sp, #24
 801194c:	f002 ff1e 	bl	801478c <uxr_serialize_OBJK_DataReader_Binary>
 8011950:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011952:	f8cd 8000 	str.w	r8, [sp]
 8011956:	9401      	str	r4, [sp, #4]
 8011958:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 801195c:	60e3      	str	r3, [r4, #12]
 801195e:	4630      	mov	r0, r6
 8011960:	b29b      	uxth	r3, r3
 8011962:	f7ff fe35 	bl	80115d0 <uxr_common_create_entity>
 8011966:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 801196a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801196e:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 8011972:	f04f 0c12 	mov.w	ip, #18
 8011976:	250a      	movs	r5, #10
 8011978:	2220      	movs	r2, #32
 801197a:	2110      	movs	r1, #16
 801197c:	2008      	movs	r0, #8
 801197e:	2702      	movs	r7, #2
 8011980:	e7cd      	b.n	801191e <uxr_buffer_create_datareader_bin+0x7a>
 8011982:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 8011986:	e7d9      	b.n	801193c <uxr_buffer_create_datareader_bin+0x98>
 8011988:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 801198c:	e7d6      	b.n	801193c <uxr_buffer_create_datareader_bin+0x98>
 801198e:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 8011992:	e7d3      	b.n	801193c <uxr_buffer_create_datareader_bin+0x98>

08011994 <get_custom_error>:
 8011994:	4b01      	ldr	r3, [pc, #4]	@ (801199c <get_custom_error+0x8>)
 8011996:	7818      	ldrb	r0, [r3, #0]
 8011998:	4770      	bx	lr
 801199a:	bf00      	nop
 801199c:	2000b564 	.word	0x2000b564

080119a0 <recv_custom_msg>:
 80119a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80119a4:	4693      	mov	fp, r2
 80119a6:	b089      	sub	sp, #36	@ 0x24
 80119a8:	f890 2200 	ldrb.w	r2, [r0, #512]	@ 0x200
 80119ac:	9305      	str	r3, [sp, #20]
 80119ae:	468a      	mov	sl, r1
 80119b0:	2100      	movs	r1, #0
 80119b2:	4604      	mov	r4, r0
 80119b4:	f88d 101e 	strb.w	r1, [sp, #30]
 80119b8:	b322      	cbz	r2, 8011a04 <recv_custom_msg+0x64>
 80119ba:	f200 2902 	addw	r9, r0, #514	@ 0x202
 80119be:	f10d 081f 	add.w	r8, sp, #31
 80119c2:	af05      	add	r7, sp, #20
 80119c4:	f10d 061e 	add.w	r6, sp, #30
 80119c8:	f44f 7500 	mov.w	r5, #512	@ 0x200
 80119cc:	e002      	b.n	80119d4 <recv_custom_msg+0x34>
 80119ce:	9b05      	ldr	r3, [sp, #20]
 80119d0:	2b00      	cmp	r3, #0
 80119d2:	dd0f      	ble.n	80119f4 <recv_custom_msg+0x54>
 80119d4:	f8d4 1274 	ldr.w	r1, [r4, #628]	@ 0x274
 80119d8:	4623      	mov	r3, r4
 80119da:	e9cd 7802 	strd	r7, r8, [sp, #8]
 80119de:	e9cd 5600 	strd	r5, r6, [sp]
 80119e2:	4622      	mov	r2, r4
 80119e4:	4648      	mov	r0, r9
 80119e6:	f001 fcdd 	bl	80133a4 <uxr_read_framed_msg>
 80119ea:	2800      	cmp	r0, #0
 80119ec:	d0ef      	beq.n	80119ce <recv_custom_msg+0x2e>
 80119ee:	f89d 301e 	ldrb.w	r3, [sp, #30]
 80119f2:	b1b3      	cbz	r3, 8011a22 <recv_custom_msg+0x82>
 80119f4:	4b0f      	ldr	r3, [pc, #60]	@ (8011a34 <recv_custom_msg+0x94>)
 80119f6:	f89d 201f 	ldrb.w	r2, [sp, #31]
 80119fa:	701a      	strb	r2, [r3, #0]
 80119fc:	2000      	movs	r0, #0
 80119fe:	b009      	add	sp, #36	@ 0x24
 8011a00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011a04:	f10d 021f 	add.w	r2, sp, #31
 8011a08:	9200      	str	r2, [sp, #0]
 8011a0a:	f8d0 5274 	ldr.w	r5, [r0, #628]	@ 0x274
 8011a0e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011a12:	4601      	mov	r1, r0
 8011a14:	47a8      	blx	r5
 8011a16:	2800      	cmp	r0, #0
 8011a18:	d0ec      	beq.n	80119f4 <recv_custom_msg+0x54>
 8011a1a:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8011a1e:	2b00      	cmp	r3, #0
 8011a20:	d1e8      	bne.n	80119f4 <recv_custom_msg+0x54>
 8011a22:	f8cb 0000 	str.w	r0, [fp]
 8011a26:	2001      	movs	r0, #1
 8011a28:	f8ca 4000 	str.w	r4, [sl]
 8011a2c:	b009      	add	sp, #36	@ 0x24
 8011a2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011a32:	bf00      	nop
 8011a34:	2000b564 	.word	0x2000b564

08011a38 <send_custom_msg>:
 8011a38:	b530      	push	{r4, r5, lr}
 8011a3a:	f890 4200 	ldrb.w	r4, [r0, #512]	@ 0x200
 8011a3e:	b087      	sub	sp, #28
 8011a40:	4615      	mov	r5, r2
 8011a42:	b974      	cbnz	r4, 8011a62 <send_custom_msg+0x2a>
 8011a44:	f8d0 4270 	ldr.w	r4, [r0, #624]	@ 0x270
 8011a48:	f10d 0317 	add.w	r3, sp, #23
 8011a4c:	47a0      	blx	r4
 8011a4e:	b108      	cbz	r0, 8011a54 <send_custom_msg+0x1c>
 8011a50:	42a8      	cmp	r0, r5
 8011a52:	d015      	beq.n	8011a80 <send_custom_msg+0x48>
 8011a54:	4b0c      	ldr	r3, [pc, #48]	@ (8011a88 <send_custom_msg+0x50>)
 8011a56:	f89d 2017 	ldrb.w	r2, [sp, #23]
 8011a5a:	701a      	strb	r2, [r3, #0]
 8011a5c:	2000      	movs	r0, #0
 8011a5e:	b007      	add	sp, #28
 8011a60:	bd30      	pop	{r4, r5, pc}
 8011a62:	460b      	mov	r3, r1
 8011a64:	2200      	movs	r2, #0
 8011a66:	f10d 0117 	add.w	r1, sp, #23
 8011a6a:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8011a6e:	4602      	mov	r2, r0
 8011a70:	f8d0 1270 	ldr.w	r1, [r0, #624]	@ 0x270
 8011a74:	9500      	str	r5, [sp, #0]
 8011a76:	f200 2002 	addw	r0, r0, #514	@ 0x202
 8011a7a:	f001 fa9b 	bl	8012fb4 <uxr_write_framed_msg>
 8011a7e:	e7e6      	b.n	8011a4e <send_custom_msg+0x16>
 8011a80:	2001      	movs	r0, #1
 8011a82:	b007      	add	sp, #28
 8011a84:	bd30      	pop	{r4, r5, pc}
 8011a86:	bf00      	nop
 8011a88:	2000b564 	.word	0x2000b564

08011a8c <uxr_set_custom_transport_callbacks>:
 8011a8c:	b410      	push	{r4}
 8011a8e:	9c01      	ldr	r4, [sp, #4]
 8011a90:	f8c0 4270 	str.w	r4, [r0, #624]	@ 0x270
 8011a94:	e9c0 239a 	strd	r2, r3, [r0, #616]	@ 0x268
 8011a98:	9b02      	ldr	r3, [sp, #8]
 8011a9a:	f880 1200 	strb.w	r1, [r0, #512]	@ 0x200
 8011a9e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011aa2:	f8c0 3274 	str.w	r3, [r0, #628]	@ 0x274
 8011aa6:	4770      	bx	lr

08011aa8 <uxr_init_custom_transport>:
 8011aa8:	b538      	push	{r3, r4, r5, lr}
 8011aaa:	f8d0 3268 	ldr.w	r3, [r0, #616]	@ 0x268
 8011aae:	b303      	cbz	r3, 8011af2 <uxr_init_custom_transport+0x4a>
 8011ab0:	f8d0 226c 	ldr.w	r2, [r0, #620]	@ 0x26c
 8011ab4:	4604      	mov	r4, r0
 8011ab6:	b1e2      	cbz	r2, 8011af2 <uxr_init_custom_transport+0x4a>
 8011ab8:	f8d0 2270 	ldr.w	r2, [r0, #624]	@ 0x270
 8011abc:	b1ca      	cbz	r2, 8011af2 <uxr_init_custom_transport+0x4a>
 8011abe:	f8d0 2274 	ldr.w	r2, [r0, #628]	@ 0x274
 8011ac2:	b1b2      	cbz	r2, 8011af2 <uxr_init_custom_transport+0x4a>
 8011ac4:	f8c0 128c 	str.w	r1, [r0, #652]	@ 0x28c
 8011ac8:	4798      	blx	r3
 8011aca:	4605      	mov	r5, r0
 8011acc:	b188      	cbz	r0, 8011af2 <uxr_init_custom_transport+0x4a>
 8011ace:	f894 3200 	ldrb.w	r3, [r4, #512]	@ 0x200
 8011ad2:	b98b      	cbnz	r3, 8011af8 <uxr_init_custom_transport+0x50>
 8011ad4:	490b      	ldr	r1, [pc, #44]	@ (8011b04 <uxr_init_custom_transport+0x5c>)
 8011ad6:	4b0c      	ldr	r3, [pc, #48]	@ (8011b08 <uxr_init_custom_transport+0x60>)
 8011ad8:	4a0c      	ldr	r2, [pc, #48]	@ (8011b0c <uxr_init_custom_transport+0x64>)
 8011ada:	f8c4 3280 	str.w	r3, [r4, #640]	@ 0x280
 8011ade:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8011ae2:	e9c4 419e 	strd	r4, r1, [r4, #632]	@ 0x278
 8011ae6:	f8c4 2284 	str.w	r2, [r4, #644]	@ 0x284
 8011aea:	f8a4 3288 	strh.w	r3, [r4, #648]	@ 0x288
 8011aee:	4628      	mov	r0, r5
 8011af0:	bd38      	pop	{r3, r4, r5, pc}
 8011af2:	2500      	movs	r5, #0
 8011af4:	4628      	mov	r0, r5
 8011af6:	bd38      	pop	{r3, r4, r5, pc}
 8011af8:	2100      	movs	r1, #0
 8011afa:	f204 2002 	addw	r0, r4, #514	@ 0x202
 8011afe:	f001 fa53 	bl	8012fa8 <uxr_init_framing_io>
 8011b02:	e7e7      	b.n	8011ad4 <uxr_init_custom_transport+0x2c>
 8011b04:	08011a39 	.word	0x08011a39
 8011b08:	080119a1 	.word	0x080119a1
 8011b0c:	08011995 	.word	0x08011995

08011b10 <uxr_close_custom_transport>:
 8011b10:	f8d0 326c 	ldr.w	r3, [r0, #620]	@ 0x26c
 8011b14:	4718      	bx	r3
 8011b16:	bf00      	nop

08011b18 <uxr_object_id>:
 8011b18:	b082      	sub	sp, #8
 8011b1a:	2300      	movs	r3, #0
 8011b1c:	f88d 1006 	strb.w	r1, [sp, #6]
 8011b20:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8011b24:	f360 030f 	bfi	r3, r0, #0, #16
 8011b28:	f362 431f 	bfi	r3, r2, #16, #16
 8011b2c:	4618      	mov	r0, r3
 8011b2e:	b002      	add	sp, #8
 8011b30:	4770      	bx	lr
 8011b32:	bf00      	nop

08011b34 <uxr_object_id_from_raw>:
 8011b34:	7843      	ldrb	r3, [r0, #1]
 8011b36:	7801      	ldrb	r1, [r0, #0]
 8011b38:	b082      	sub	sp, #8
 8011b3a:	f003 020f 	and.w	r2, r3, #15
 8011b3e:	f88d 2006 	strb.w	r2, [sp, #6]
 8011b42:	091b      	lsrs	r3, r3, #4
 8011b44:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8011b48:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8011b4c:	2000      	movs	r0, #0
 8011b4e:	f363 000f 	bfi	r0, r3, #0, #16
 8011b52:	f362 401f 	bfi	r0, r2, #16, #16
 8011b56:	b002      	add	sp, #8
 8011b58:	4770      	bx	lr
 8011b5a:	bf00      	nop

08011b5c <uxr_object_id_to_raw>:
 8011b5c:	4602      	mov	r2, r0
 8011b5e:	f3c0 4303 	ubfx	r3, r0, #16, #4
 8011b62:	b082      	sub	sp, #8
 8011b64:	f3c2 1c0b 	ubfx	ip, r2, #4, #12
 8011b68:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 8011b6c:	f881 c000 	strb.w	ip, [r1]
 8011b70:	7048      	strb	r0, [r1, #1]
 8011b72:	b002      	add	sp, #8
 8011b74:	4770      	bx	lr
 8011b76:	bf00      	nop

08011b78 <uxr_buffer_request_data>:
 8011b78:	b530      	push	{r4, r5, lr}
 8011b7a:	b095      	sub	sp, #84	@ 0x54
 8011b7c:	e9cd 2104 	strd	r2, r1, [sp, #16]
 8011b80:	9d18      	ldr	r5, [sp, #96]	@ 0x60
 8011b82:	9303      	str	r3, [sp, #12]
 8011b84:	2200      	movs	r2, #0
 8011b86:	2d00      	cmp	r5, #0
 8011b88:	bf14      	ite	ne
 8011b8a:	2101      	movne	r1, #1
 8011b8c:	4611      	moveq	r1, r2
 8011b8e:	4604      	mov	r4, r0
 8011b90:	f88d 301c 	strb.w	r3, [sp, #28]
 8011b94:	f88d 201d 	strb.w	r2, [sp, #29]
 8011b98:	f88d 201e 	strb.w	r2, [sp, #30]
 8011b9c:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 8011ba0:	d021      	beq.n	8011be6 <uxr_buffer_request_data+0x6e>
 8011ba2:	682a      	ldr	r2, [r5, #0]
 8011ba4:	686b      	ldr	r3, [r5, #4]
 8011ba6:	f8cd 2026 	str.w	r2, [sp, #38]	@ 0x26
 8011baa:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 8011bae:	2210      	movs	r2, #16
 8011bb0:	2308      	movs	r3, #8
 8011bb2:	2100      	movs	r1, #0
 8011bb4:	e9cd 3100 	strd	r3, r1, [sp]
 8011bb8:	4620      	mov	r0, r4
 8011bba:	9905      	ldr	r1, [sp, #20]
 8011bbc:	ab0c      	add	r3, sp, #48	@ 0x30
 8011bbe:	f001 f88d 	bl	8012cdc <uxr_prepare_stream_to_write_submessage>
 8011bc2:	b918      	cbnz	r0, 8011bcc <uxr_buffer_request_data+0x54>
 8011bc4:	4604      	mov	r4, r0
 8011bc6:	4620      	mov	r0, r4
 8011bc8:	b015      	add	sp, #84	@ 0x54
 8011bca:	bd30      	pop	{r4, r5, pc}
 8011bcc:	9904      	ldr	r1, [sp, #16]
 8011bce:	aa06      	add	r2, sp, #24
 8011bd0:	4620      	mov	r0, r4
 8011bd2:	f001 f9b9 	bl	8012f48 <uxr_init_base_object_request>
 8011bd6:	a906      	add	r1, sp, #24
 8011bd8:	4604      	mov	r4, r0
 8011bda:	a80c      	add	r0, sp, #48	@ 0x30
 8011bdc:	f003 f946 	bl	8014e6c <uxr_serialize_READ_DATA_Payload>
 8011be0:	4620      	mov	r0, r4
 8011be2:	b015      	add	sp, #84	@ 0x54
 8011be4:	bd30      	pop	{r4, r5, pc}
 8011be6:	2208      	movs	r2, #8
 8011be8:	e7e2      	b.n	8011bb0 <uxr_buffer_request_data+0x38>
 8011bea:	bf00      	nop

08011bec <uxr_buffer_cancel_data>:
 8011bec:	b510      	push	{r4, lr}
 8011bee:	b094      	sub	sp, #80	@ 0x50
 8011bf0:	2300      	movs	r3, #0
 8011bf2:	9202      	str	r2, [sp, #8]
 8011bf4:	9205      	str	r2, [sp, #20]
 8011bf6:	9301      	str	r3, [sp, #4]
 8011bf8:	2201      	movs	r2, #1
 8011bfa:	f8ad 301c 	strh.w	r3, [sp, #28]
 8011bfe:	f88d 301e 	strb.w	r3, [sp, #30]
 8011c02:	f8cd 3026 	str.w	r3, [sp, #38]	@ 0x26
 8011c06:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 8011c0a:	2308      	movs	r3, #8
 8011c0c:	f88d 2024 	strb.w	r2, [sp, #36]	@ 0x24
 8011c10:	9300      	str	r3, [sp, #0]
 8011c12:	2210      	movs	r2, #16
 8011c14:	ab0c      	add	r3, sp, #48	@ 0x30
 8011c16:	4604      	mov	r4, r0
 8011c18:	9103      	str	r1, [sp, #12]
 8011c1a:	f001 f85f 	bl	8012cdc <uxr_prepare_stream_to_write_submessage>
 8011c1e:	b918      	cbnz	r0, 8011c28 <uxr_buffer_cancel_data+0x3c>
 8011c20:	4604      	mov	r4, r0
 8011c22:	4620      	mov	r0, r4
 8011c24:	b014      	add	sp, #80	@ 0x50
 8011c26:	bd10      	pop	{r4, pc}
 8011c28:	9905      	ldr	r1, [sp, #20]
 8011c2a:	aa06      	add	r2, sp, #24
 8011c2c:	4620      	mov	r0, r4
 8011c2e:	f001 f98b 	bl	8012f48 <uxr_init_base_object_request>
 8011c32:	a906      	add	r1, sp, #24
 8011c34:	4604      	mov	r4, r0
 8011c36:	a80c      	add	r0, sp, #48	@ 0x30
 8011c38:	f003 f918 	bl	8014e6c <uxr_serialize_READ_DATA_Payload>
 8011c3c:	4620      	mov	r0, r4
 8011c3e:	b014      	add	sp, #80	@ 0x50
 8011c40:	bd10      	pop	{r4, pc}
 8011c42:	bf00      	nop

08011c44 <read_submessage_format>:
 8011c44:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011c48:	b095      	sub	sp, #84	@ 0x54
 8011c4a:	f8bd 6078 	ldrh.w	r6, [sp, #120]	@ 0x78
 8011c4e:	b113      	cbz	r3, 8011c56 <read_submessage_format+0x12>
 8011c50:	b015      	add	sp, #84	@ 0x54
 8011c52:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011c56:	460c      	mov	r4, r1
 8011c58:	4615      	mov	r5, r2
 8011c5a:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8011c5e:	4607      	mov	r7, r0
 8011c60:	981c      	ldr	r0, [sp, #112]	@ 0x70
 8011c62:	9004      	str	r0, [sp, #16]
 8011c64:	981d      	ldr	r0, [sp, #116]	@ 0x74
 8011c66:	9005      	str	r0, [sp, #20]
 8011c68:	1a52      	subs	r2, r2, r1
 8011c6a:	a80c      	add	r0, sp, #48	@ 0x30
 8011c6c:	4699      	mov	r9, r3
 8011c6e:	f89d 8076 	ldrb.w	r8, [sp, #118]	@ 0x76
 8011c72:	f7fc fc5d 	bl	800e530 <ucdr_init_buffer>
 8011c76:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8011c7a:	a80c      	add	r0, sp, #48	@ 0x30
 8011c7c:	f7fc fc2c 	bl	800e4d8 <ucdr_set_on_full_buffer_callback>
 8011c80:	69e2      	ldr	r2, [r4, #28]
 8011c82:	b19a      	cbz	r2, 8011cac <read_submessage_format+0x68>
 8011c84:	f1b8 0f07 	cmp.w	r8, #7
 8011c88:	f882 9014 	strb.w	r9, [r2, #20]
 8011c8c:	d040      	beq.n	8011d10 <read_submessage_format+0xcc>
 8011c8e:	f1b8 0f08 	cmp.w	r8, #8
 8011c92:	d02e      	beq.n	8011cf2 <read_submessage_format+0xae>
 8011c94:	f1b8 0f06 	cmp.w	r8, #6
 8011c98:	d011      	beq.n	8011cbe <read_submessage_format+0x7a>
 8011c9a:	2301      	movs	r3, #1
 8011c9c:	7513      	strb	r3, [r2, #20]
 8011c9e:	4629      	mov	r1, r5
 8011ca0:	4620      	mov	r0, r4
 8011ca2:	f7fc fc95 	bl	800e5d0 <ucdr_advance_buffer>
 8011ca6:	b015      	add	sp, #84	@ 0x54
 8011ca8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011cac:	f1b8 0f07 	cmp.w	r8, #7
 8011cb0:	d02e      	beq.n	8011d10 <read_submessage_format+0xcc>
 8011cb2:	f1b8 0f08 	cmp.w	r8, #8
 8011cb6:	d01c      	beq.n	8011cf2 <read_submessage_format+0xae>
 8011cb8:	f1b8 0f06 	cmp.w	r8, #6
 8011cbc:	d1ef      	bne.n	8011c9e <read_submessage_format+0x5a>
 8011cbe:	f8d7 8088 	ldr.w	r8, [r7, #136]	@ 0x88
 8011cc2:	f1b8 0f00 	cmp.w	r8, #0
 8011cc6:	d011      	beq.n	8011cec <read_submessage_format+0xa8>
 8011cc8:	ab0c      	add	r3, sp, #48	@ 0x30
 8011cca:	e9cd 3500 	strd	r3, r5, [sp]
 8011cce:	2306      	movs	r3, #6
 8011cd0:	f88d 3016 	strb.w	r3, [sp, #22]
 8011cd4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8011cd8:	9302      	str	r3, [sp, #8]
 8011cda:	4632      	mov	r2, r6
 8011cdc:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 8011ce0:	4638      	mov	r0, r7
 8011ce2:	47c0      	blx	r8
 8011ce4:	2301      	movs	r3, #1
 8011ce6:	69e2      	ldr	r2, [r4, #28]
 8011ce8:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 8011cec:	2a00      	cmp	r2, #0
 8011cee:	d1d4      	bne.n	8011c9a <read_submessage_format+0x56>
 8011cf0:	e7d5      	b.n	8011c9e <read_submessage_format+0x5a>
 8011cf2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8011cf6:	2b00      	cmp	r3, #0
 8011cf8:	d0f8      	beq.n	8011cec <read_submessage_format+0xa8>
 8011cfa:	a906      	add	r1, sp, #24
 8011cfc:	a80c      	add	r0, sp, #48	@ 0x30
 8011cfe:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 8011d02:	f003 f987 	bl	8015014 <uxr_deserialize_SampleIdentity>
 8011d06:	b9a0      	cbnz	r0, 8011d32 <read_submessage_format+0xee>
 8011d08:	69e2      	ldr	r2, [r4, #28]
 8011d0a:	2a00      	cmp	r2, #0
 8011d0c:	d1c5      	bne.n	8011c9a <read_submessage_format+0x56>
 8011d0e:	e7c6      	b.n	8011c9e <read_submessage_format+0x5a>
 8011d10:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011d14:	b13b      	cbz	r3, 8011d26 <read_submessage_format+0xe2>
 8011d16:	a906      	add	r1, sp, #24
 8011d18:	a80c      	add	r0, sp, #48	@ 0x30
 8011d1a:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 8011d1e:	f002 fe3f 	bl	80149a0 <uxr_deserialize_BaseObjectRequest>
 8011d22:	bb60      	cbnz	r0, 8011d7e <read_submessage_format+0x13a>
 8011d24:	69e2      	ldr	r2, [r4, #28]
 8011d26:	68a3      	ldr	r3, [r4, #8]
 8011d28:	442b      	add	r3, r5
 8011d2a:	60a3      	str	r3, [r4, #8]
 8011d2c:	2a00      	cmp	r2, #0
 8011d2e:	d1b4      	bne.n	8011c9a <read_submessage_format+0x56>
 8011d30:	e7b5      	b.n	8011c9e <read_submessage_format+0x5a>
 8011d32:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 8011d36:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8011d38:	1a52      	subs	r2, r2, r1
 8011d3a:	eba8 0803 	sub.w	r8, r8, r3
 8011d3e:	a80c      	add	r0, sp, #48	@ 0x30
 8011d40:	f7fc fbf6 	bl	800e530 <ucdr_init_buffer>
 8011d44:	44a8      	add	r8, r5
 8011d46:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8011d4a:	a80c      	add	r0, sp, #48	@ 0x30
 8011d4c:	f7fc fbc4 	bl	800e4d8 <ucdr_set_on_full_buffer_callback>
 8011d50:	fa1f f888 	uxth.w	r8, r8
 8011d54:	ab0c      	add	r3, sp, #48	@ 0x30
 8011d56:	9300      	str	r3, [sp, #0]
 8011d58:	f8cd 8004 	str.w	r8, [sp, #4]
 8011d5c:	2108      	movs	r1, #8
 8011d5e:	f88d 1016 	strb.w	r1, [sp, #22]
 8011d62:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 8011d66:	9102      	str	r1, [sp, #8]
 8011d68:	ab06      	add	r3, sp, #24
 8011d6a:	4632      	mov	r2, r6
 8011d6c:	9905      	ldr	r1, [sp, #20]
 8011d6e:	f8d7 60a4 	ldr.w	r6, [r7, #164]	@ 0xa4
 8011d72:	4638      	mov	r0, r7
 8011d74:	47b0      	blx	r6
 8011d76:	2301      	movs	r3, #1
 8011d78:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 8011d7c:	e7c4      	b.n	8011d08 <read_submessage_format+0xc4>
 8011d7e:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 8011d82:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8011d84:	1a52      	subs	r2, r2, r1
 8011d86:	a80c      	add	r0, sp, #48	@ 0x30
 8011d88:	eba8 0803 	sub.w	r8, r8, r3
 8011d8c:	f7fc fbd0 	bl	800e530 <ucdr_init_buffer>
 8011d90:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8011d94:	a80c      	add	r0, sp, #48	@ 0x30
 8011d96:	f7fc fb9f 	bl	800e4d8 <ucdr_set_on_full_buffer_callback>
 8011d9a:	ab0c      	add	r3, sp, #48	@ 0x30
 8011d9c:	9300      	str	r3, [sp, #0]
 8011d9e:	f89d 1018 	ldrb.w	r1, [sp, #24]
 8011da2:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8011da6:	44a8      	add	r8, r5
 8011da8:	fa1f f888 	uxth.w	r8, r8
 8011dac:	f8cd 8004 	str.w	r8, [sp, #4]
 8011db0:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8011db4:	2107      	movs	r1, #7
 8011db6:	f88d 1016 	strb.w	r1, [sp, #22]
 8011dba:	f8d7 10b0 	ldr.w	r1, [r7, #176]	@ 0xb0
 8011dbe:	9102      	str	r1, [sp, #8]
 8011dc0:	4632      	mov	r2, r6
 8011dc2:	b29b      	uxth	r3, r3
 8011dc4:	f8d7 60ac 	ldr.w	r6, [r7, #172]	@ 0xac
 8011dc8:	9905      	ldr	r1, [sp, #20]
 8011dca:	4638      	mov	r0, r7
 8011dcc:	47b0      	blx	r6
 8011dce:	2301      	movs	r3, #1
 8011dd0:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 8011dd4:	e7a6      	b.n	8011d24 <read_submessage_format+0xe0>
 8011dd6:	bf00      	nop

08011dd8 <on_get_fragmentation_info>:
 8011dd8:	b500      	push	{lr}
 8011dda:	b08b      	sub	sp, #44	@ 0x2c
 8011ddc:	4601      	mov	r1, r0
 8011dde:	2204      	movs	r2, #4
 8011de0:	a802      	add	r0, sp, #8
 8011de2:	f7fc fba5 	bl	800e530 <ucdr_init_buffer>
 8011de6:	f10d 0305 	add.w	r3, sp, #5
 8011dea:	f10d 0206 	add.w	r2, sp, #6
 8011dee:	a901      	add	r1, sp, #4
 8011df0:	a802      	add	r0, sp, #8
 8011df2:	f001 febd 	bl	8013b70 <uxr_read_submessage_header>
 8011df6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8011dfa:	2b0d      	cmp	r3, #13
 8011dfc:	d003      	beq.n	8011e06 <on_get_fragmentation_info+0x2e>
 8011dfe:	2000      	movs	r0, #0
 8011e00:	b00b      	add	sp, #44	@ 0x2c
 8011e02:	f85d fb04 	ldr.w	pc, [sp], #4
 8011e06:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8011e0a:	f013 0f02 	tst.w	r3, #2
 8011e0e:	bf14      	ite	ne
 8011e10:	2002      	movne	r0, #2
 8011e12:	2001      	moveq	r0, #1
 8011e14:	b00b      	add	sp, #44	@ 0x2c
 8011e16:	f85d fb04 	ldr.w	pc, [sp], #4
 8011e1a:	bf00      	nop

08011e1c <read_submessage_get_info>:
 8011e1c:	b570      	push	{r4, r5, r6, lr}
 8011e1e:	2500      	movs	r5, #0
 8011e20:	f5ad 7d34 	sub.w	sp, sp, #720	@ 0x2d0
 8011e24:	4604      	mov	r4, r0
 8011e26:	f44f 7224 	mov.w	r2, #656	@ 0x290
 8011e2a:	460e      	mov	r6, r1
 8011e2c:	a810      	add	r0, sp, #64	@ 0x40
 8011e2e:	4629      	mov	r1, r5
 8011e30:	e9cd 5503 	strd	r5, r5, [sp, #12]
 8011e34:	f009 fa92 	bl	801b35c <memset>
 8011e38:	a903      	add	r1, sp, #12
 8011e3a:	4630      	mov	r0, r6
 8011e3c:	f002 ff58 	bl	8014cf0 <uxr_deserialize_GET_INFO_Payload>
 8011e40:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8011e44:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8011e48:	4620      	mov	r0, r4
 8011e4a:	f001 f875 	bl	8012f38 <uxr_session_header_offset>
 8011e4e:	462b      	mov	r3, r5
 8011e50:	9000      	str	r0, [sp, #0]
 8011e52:	220c      	movs	r2, #12
 8011e54:	a905      	add	r1, sp, #20
 8011e56:	a808      	add	r0, sp, #32
 8011e58:	f7fc fb58 	bl	800e50c <ucdr_init_buffer_origin_offset>
 8011e5c:	a910      	add	r1, sp, #64	@ 0x40
 8011e5e:	a808      	add	r0, sp, #32
 8011e60:	f002 ffb8 	bl	8014dd4 <uxr_serialize_INFO_Payload>
 8011e64:	9b08      	ldr	r3, [sp, #32]
 8011e66:	462a      	mov	r2, r5
 8011e68:	4629      	mov	r1, r5
 8011e6a:	4620      	mov	r0, r4
 8011e6c:	f001 f80e 	bl	8012e8c <uxr_stamp_session_header>
 8011e70:	a808      	add	r0, sp, #32
 8011e72:	f7fc fb89 	bl	800e588 <ucdr_buffer_length>
 8011e76:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8011e78:	4602      	mov	r2, r0
 8011e7a:	a905      	add	r1, sp, #20
 8011e7c:	e9d3 0400 	ldrd	r0, r4, [r3]
 8011e80:	47a0      	blx	r4
 8011e82:	f50d 7d34 	add.w	sp, sp, #720	@ 0x2d0
 8011e86:	bd70      	pop	{r4, r5, r6, pc}

08011e88 <write_submessage_acknack.isra.0>:
 8011e88:	b570      	push	{r4, r5, r6, lr}
 8011e8a:	b092      	sub	sp, #72	@ 0x48
 8011e8c:	4605      	mov	r5, r0
 8011e8e:	460e      	mov	r6, r1
 8011e90:	4614      	mov	r4, r2
 8011e92:	f001 f851 	bl	8012f38 <uxr_session_header_offset>
 8011e96:	a905      	add	r1, sp, #20
 8011e98:	9000      	str	r0, [sp, #0]
 8011e9a:	2300      	movs	r3, #0
 8011e9c:	a80a      	add	r0, sp, #40	@ 0x28
 8011e9e:	2211      	movs	r2, #17
 8011ea0:	f7fc fb34 	bl	800e50c <ucdr_init_buffer_origin_offset>
 8011ea4:	2218      	movs	r2, #24
 8011ea6:	fb02 5404 	mla	r4, r2, r4, r5
 8011eaa:	2300      	movs	r3, #0
 8011eac:	2205      	movs	r2, #5
 8011eae:	3450      	adds	r4, #80	@ 0x50
 8011eb0:	210a      	movs	r1, #10
 8011eb2:	a80a      	add	r0, sp, #40	@ 0x28
 8011eb4:	f001 fe42 	bl	8013b3c <uxr_buffer_submessage_header>
 8011eb8:	a903      	add	r1, sp, #12
 8011eba:	4620      	mov	r0, r4
 8011ebc:	f007 fd62 	bl	8019984 <uxr_compute_acknack>
 8011ec0:	ba40      	rev16	r0, r0
 8011ec2:	f8ad 000e 	strh.w	r0, [sp, #14]
 8011ec6:	a903      	add	r1, sp, #12
 8011ec8:	a80a      	add	r0, sp, #40	@ 0x28
 8011eca:	f88d 6010 	strb.w	r6, [sp, #16]
 8011ece:	f002 fff1 	bl	8014eb4 <uxr_serialize_ACKNACK_Payload>
 8011ed2:	2200      	movs	r2, #0
 8011ed4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011ed6:	4611      	mov	r1, r2
 8011ed8:	4628      	mov	r0, r5
 8011eda:	f000 ffd7 	bl	8012e8c <uxr_stamp_session_header>
 8011ede:	a80a      	add	r0, sp, #40	@ 0x28
 8011ee0:	f7fc fb52 	bl	800e588 <ucdr_buffer_length>
 8011ee4:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8011ee6:	4602      	mov	r2, r0
 8011ee8:	a905      	add	r1, sp, #20
 8011eea:	e9d3 0400 	ldrd	r0, r4, [r3]
 8011eee:	47a0      	blx	r4
 8011ef0:	b012      	add	sp, #72	@ 0x48
 8011ef2:	bd70      	pop	{r4, r5, r6, pc}
 8011ef4:	0000      	movs	r0, r0
	...

08011ef8 <uxr_init_session>:
 8011ef8:	b510      	push	{r4, lr}
 8011efa:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 8011f30 <uxr_init_session+0x38>
 8011efe:	2300      	movs	r3, #0
 8011f00:	e9c0 131c 	strd	r1, r3, [r0, #112]	@ 0x70
 8011f04:	4604      	mov	r4, r0
 8011f06:	e9c0 331e 	strd	r3, r3, [r0, #120]	@ 0x78
 8011f0a:	e9c0 3320 	strd	r3, r3, [r0, #128]	@ 0x80
 8011f0e:	e9c0 3322 	strd	r3, r3, [r0, #136]	@ 0x88
 8011f12:	e9c0 3324 	strd	r3, r3, [r0, #144]	@ 0x90
 8011f16:	ed80 7b26 	vstr	d7, [r0, #152]	@ 0x98
 8011f1a:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
 8011f1e:	2181      	movs	r1, #129	@ 0x81
 8011f20:	f000 ff20 	bl	8012d64 <uxr_init_session_info>
 8011f24:	f104 0008 	add.w	r0, r4, #8
 8011f28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011f2c:	f001 bd22 	b.w	8013974 <uxr_init_stream_storage>
	...

08011f38 <uxr_set_status_callback>:
 8011f38:	e9c0 1220 	strd	r1, r2, [r0, #128]	@ 0x80
 8011f3c:	4770      	bx	lr
 8011f3e:	bf00      	nop

08011f40 <uxr_set_topic_callback>:
 8011f40:	e9c0 1222 	strd	r1, r2, [r0, #136]	@ 0x88
 8011f44:	4770      	bx	lr
 8011f46:	bf00      	nop

08011f48 <uxr_set_request_callback>:
 8011f48:	e9c0 1229 	strd	r1, r2, [r0, #164]	@ 0xa4
 8011f4c:	4770      	bx	lr
 8011f4e:	bf00      	nop

08011f50 <uxr_set_reply_callback>:
 8011f50:	e9c0 122b 	strd	r1, r2, [r0, #172]	@ 0xac
 8011f54:	4770      	bx	lr
 8011f56:	bf00      	nop

08011f58 <uxr_create_output_best_effort_stream>:
 8011f58:	b510      	push	{r4, lr}
 8011f5a:	b084      	sub	sp, #16
 8011f5c:	e9cd 2100 	strd	r2, r1, [sp]
 8011f60:	4604      	mov	r4, r0
 8011f62:	f000 ffe9 	bl	8012f38 <uxr_session_header_offset>
 8011f66:	e9dd 2100 	ldrd	r2, r1, [sp]
 8011f6a:	4603      	mov	r3, r0
 8011f6c:	f104 0008 	add.w	r0, r4, #8
 8011f70:	b004      	add	sp, #16
 8011f72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011f76:	f001 bd47 	b.w	8013a08 <uxr_add_output_best_effort_buffer>
 8011f7a:	bf00      	nop

08011f7c <uxr_create_output_reliable_stream>:
 8011f7c:	b510      	push	{r4, lr}
 8011f7e:	b088      	sub	sp, #32
 8011f80:	e9cd 2104 	strd	r2, r1, [sp, #16]
 8011f84:	4604      	mov	r4, r0
 8011f86:	9303      	str	r3, [sp, #12]
 8011f88:	f000 ffd6 	bl	8012f38 <uxr_session_header_offset>
 8011f8c:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 8011f90:	9000      	str	r0, [sp, #0]
 8011f92:	9905      	ldr	r1, [sp, #20]
 8011f94:	f104 0008 	add.w	r0, r4, #8
 8011f98:	f001 fd4a 	bl	8013a30 <uxr_add_output_reliable_buffer>
 8011f9c:	2200      	movs	r2, #0
 8011f9e:	b2c3      	uxtb	r3, r0
 8011fa0:	f363 0207 	bfi	r2, r3, #0, #8
 8011fa4:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8011fa8:	f363 220f 	bfi	r2, r3, #8, #8
 8011fac:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8011fb0:	f363 4217 	bfi	r2, r3, #16, #8
 8011fb4:	0e03      	lsrs	r3, r0, #24
 8011fb6:	f363 621f 	bfi	r2, r3, #24, #8
 8011fba:	4610      	mov	r0, r2
 8011fbc:	b008      	add	sp, #32
 8011fbe:	bd10      	pop	{r4, pc}

08011fc0 <uxr_create_input_best_effort_stream>:
 8011fc0:	b082      	sub	sp, #8
 8011fc2:	3008      	adds	r0, #8
 8011fc4:	b002      	add	sp, #8
 8011fc6:	f001 bd4d 	b.w	8013a64 <uxr_add_input_best_effort_buffer>
 8011fca:	bf00      	nop

08011fcc <uxr_create_input_reliable_stream>:
 8011fcc:	b510      	push	{r4, lr}
 8011fce:	b084      	sub	sp, #16
 8011fd0:	4c0b      	ldr	r4, [pc, #44]	@ (8012000 <uxr_create_input_reliable_stream+0x34>)
 8011fd2:	9400      	str	r4, [sp, #0]
 8011fd4:	3008      	adds	r0, #8
 8011fd6:	f001 fd5b 	bl	8013a90 <uxr_add_input_reliable_buffer>
 8011fda:	2200      	movs	r2, #0
 8011fdc:	b2c3      	uxtb	r3, r0
 8011fde:	f363 0207 	bfi	r2, r3, #0, #8
 8011fe2:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8011fe6:	f363 220f 	bfi	r2, r3, #8, #8
 8011fea:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8011fee:	f363 4217 	bfi	r2, r3, #16, #8
 8011ff2:	0e03      	lsrs	r3, r0, #24
 8011ff4:	f363 621f 	bfi	r2, r3, #24, #8
 8011ff8:	4610      	mov	r0, r2
 8011ffa:	b004      	add	sp, #16
 8011ffc:	bd10      	pop	{r4, pc}
 8011ffe:	bf00      	nop
 8012000:	08011dd9 	.word	0x08011dd9

08012004 <uxr_epoch_nanos>:
 8012004:	b510      	push	{r4, lr}
 8012006:	4604      	mov	r4, r0
 8012008:	f001 fdf8 	bl	8013bfc <uxr_nanos>
 801200c:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	@ 0x98
 8012010:	1ac0      	subs	r0, r0, r3
 8012012:	eb61 0102 	sbc.w	r1, r1, r2
 8012016:	bd10      	pop	{r4, pc}

08012018 <uxr_flash_output_streams>:
 8012018:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801201c:	7e03      	ldrb	r3, [r0, #24]
 801201e:	b084      	sub	sp, #16
 8012020:	4604      	mov	r4, r0
 8012022:	2b00      	cmp	r3, #0
 8012024:	d035      	beq.n	8012092 <uxr_flash_output_streams+0x7a>
 8012026:	f04f 0900 	mov.w	r9, #0
 801202a:	4648      	mov	r0, r9
 801202c:	f10d 0802 	add.w	r8, sp, #2
 8012030:	af03      	add	r7, sp, #12
 8012032:	ae02      	add	r6, sp, #8
 8012034:	e006      	b.n	8012044 <uxr_flash_output_streams+0x2c>
 8012036:	7e23      	ldrb	r3, [r4, #24]
 8012038:	f109 0901 	add.w	r9, r9, #1
 801203c:	fa5f f089 	uxtb.w	r0, r9
 8012040:	4283      	cmp	r3, r0
 8012042:	d926      	bls.n	8012092 <uxr_flash_output_streams+0x7a>
 8012044:	2201      	movs	r2, #1
 8012046:	4611      	mov	r1, r2
 8012048:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 801204c:	f001 fc3e 	bl	80138cc <uxr_stream_id>
 8012050:	3508      	adds	r5, #8
 8012052:	4684      	mov	ip, r0
 8012054:	4643      	mov	r3, r8
 8012056:	463a      	mov	r2, r7
 8012058:	4631      	mov	r1, r6
 801205a:	4628      	mov	r0, r5
 801205c:	f8cd c004 	str.w	ip, [sp, #4]
 8012060:	f007 fd16 	bl	8019a90 <uxr_prepare_best_effort_buffer_to_send>
 8012064:	2800      	cmp	r0, #0
 8012066:	d0e6      	beq.n	8012036 <uxr_flash_output_streams+0x1e>
 8012068:	9b02      	ldr	r3, [sp, #8]
 801206a:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 801206e:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8012072:	4620      	mov	r0, r4
 8012074:	f000 ff0a 	bl	8012e8c <uxr_stamp_session_header>
 8012078:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801207a:	9a03      	ldr	r2, [sp, #12]
 801207c:	685d      	ldr	r5, [r3, #4]
 801207e:	6818      	ldr	r0, [r3, #0]
 8012080:	9902      	ldr	r1, [sp, #8]
 8012082:	47a8      	blx	r5
 8012084:	f109 0901 	add.w	r9, r9, #1
 8012088:	7e23      	ldrb	r3, [r4, #24]
 801208a:	fa5f f089 	uxtb.w	r0, r9
 801208e:	4283      	cmp	r3, r0
 8012090:	d8d8      	bhi.n	8012044 <uxr_flash_output_streams+0x2c>
 8012092:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 8012096:	b38b      	cbz	r3, 80120fc <uxr_flash_output_streams+0xe4>
 8012098:	f04f 0900 	mov.w	r9, #0
 801209c:	f10d 0802 	add.w	r8, sp, #2
 80120a0:	af03      	add	r7, sp, #12
 80120a2:	ae02      	add	r6, sp, #8
 80120a4:	4648      	mov	r0, r9
 80120a6:	2201      	movs	r2, #1
 80120a8:	2102      	movs	r1, #2
 80120aa:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 80120ae:	f001 fc0d 	bl	80138cc <uxr_stream_id>
 80120b2:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 80120b6:	3520      	adds	r5, #32
 80120b8:	9001      	str	r0, [sp, #4]
 80120ba:	e00d      	b.n	80120d8 <uxr_flash_output_streams+0xc0>
 80120bc:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 80120c0:	f89d 1004 	ldrb.w	r1, [sp, #4]
 80120c4:	9b02      	ldr	r3, [sp, #8]
 80120c6:	f000 fee1 	bl	8012e8c <uxr_stamp_session_header>
 80120ca:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 80120cc:	9a03      	ldr	r2, [sp, #12]
 80120ce:	f8d3 a004 	ldr.w	sl, [r3, #4]
 80120d2:	9902      	ldr	r1, [sp, #8]
 80120d4:	6818      	ldr	r0, [r3, #0]
 80120d6:	47d0      	blx	sl
 80120d8:	4643      	mov	r3, r8
 80120da:	463a      	mov	r2, r7
 80120dc:	4631      	mov	r1, r6
 80120de:	4628      	mov	r0, r5
 80120e0:	f007 fef4 	bl	8019ecc <uxr_prepare_next_reliable_buffer_to_send>
 80120e4:	4603      	mov	r3, r0
 80120e6:	4620      	mov	r0, r4
 80120e8:	2b00      	cmp	r3, #0
 80120ea:	d1e7      	bne.n	80120bc <uxr_flash_output_streams+0xa4>
 80120ec:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 80120f0:	f109 0901 	add.w	r9, r9, #1
 80120f4:	fa5f f089 	uxtb.w	r0, r9
 80120f8:	4283      	cmp	r3, r0
 80120fa:	d8d4      	bhi.n	80120a6 <uxr_flash_output_streams+0x8e>
 80120fc:	b004      	add	sp, #16
 80120fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012102:	bf00      	nop

08012104 <read_submessage_info>:
 8012104:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012108:	460d      	mov	r5, r1
 801210a:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 801210e:	4669      	mov	r1, sp
 8012110:	4607      	mov	r7, r0
 8012112:	4628      	mov	r0, r5
 8012114:	f002 fcfa 	bl	8014b0c <uxr_deserialize_BaseObjectReply>
 8012118:	a902      	add	r1, sp, #8
 801211a:	4604      	mov	r4, r0
 801211c:	4628      	mov	r0, r5
 801211e:	f89d 8005 	ldrb.w	r8, [sp, #5]
 8012122:	f7fa ff0b 	bl	800cf3c <ucdr_deserialize_bool>
 8012126:	f89d 3008 	ldrb.w	r3, [sp, #8]
 801212a:	4004      	ands	r4, r0
 801212c:	b2e4      	uxtb	r4, r4
 801212e:	b95b      	cbnz	r3, 8012148 <read_submessage_info+0x44>
 8012130:	a987      	add	r1, sp, #540	@ 0x21c
 8012132:	4628      	mov	r0, r5
 8012134:	f7fa ff02 	bl	800cf3c <ucdr_deserialize_bool>
 8012138:	f89d 321c 	ldrb.w	r3, [sp, #540]	@ 0x21c
 801213c:	4606      	mov	r6, r0
 801213e:	b94b      	cbnz	r3, 8012154 <read_submessage_info+0x50>
 8012140:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 8012144:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012148:	a903      	add	r1, sp, #12
 801214a:	4628      	mov	r0, r5
 801214c:	f002 fb86 	bl	801485c <uxr_deserialize_ObjectVariant>
 8012150:	4004      	ands	r4, r0
 8012152:	e7ed      	b.n	8012130 <read_submessage_info+0x2c>
 8012154:	a988      	add	r1, sp, #544	@ 0x220
 8012156:	4628      	mov	r0, r5
 8012158:	f7fa ff1e 	bl	800cf98 <ucdr_deserialize_uint8_t>
 801215c:	4234      	tst	r4, r6
 801215e:	d0ef      	beq.n	8012140 <read_submessage_info+0x3c>
 8012160:	2800      	cmp	r0, #0
 8012162:	d0ed      	beq.n	8012140 <read_submessage_info+0x3c>
 8012164:	f89d 3220 	ldrb.w	r3, [sp, #544]	@ 0x220
 8012168:	2b0d      	cmp	r3, #13
 801216a:	d1e9      	bne.n	8012140 <read_submessage_info+0x3c>
 801216c:	a98a      	add	r1, sp, #552	@ 0x228
 801216e:	4628      	mov	r0, r5
 8012170:	f7fb fcb8 	bl	800dae4 <ucdr_deserialize_int16_t>
 8012174:	b140      	cbz	r0, 8012188 <read_submessage_info+0x84>
 8012176:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	@ 0x228
 801217a:	2b00      	cmp	r3, #0
 801217c:	dd07      	ble.n	801218e <read_submessage_info+0x8a>
 801217e:	f1b8 0f00 	cmp.w	r8, #0
 8012182:	bf14      	ite	ne
 8012184:	2001      	movne	r0, #1
 8012186:	2002      	moveq	r0, #2
 8012188:	f887 00b5 	strb.w	r0, [r7, #181]	@ 0xb5
 801218c:	e7d8      	b.n	8012140 <read_submessage_info+0x3c>
 801218e:	2000      	movs	r0, #0
 8012190:	e7fa      	b.n	8012188 <read_submessage_info+0x84>
 8012192:	bf00      	nop

08012194 <read_submessage_list>:
 8012194:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012198:	b097      	sub	sp, #92	@ 0x5c
 801219a:	4ec1      	ldr	r6, [pc, #772]	@ (80124a0 <read_submessage_list+0x30c>)
 801219c:	9209      	str	r2, [sp, #36]	@ 0x24
 801219e:	4604      	mov	r4, r0
 80121a0:	460d      	mov	r5, r1
 80121a2:	f04f 0801 	mov.w	r8, #1
 80121a6:	f10d 032f 	add.w	r3, sp, #47	@ 0x2f
 80121aa:	aa0c      	add	r2, sp, #48	@ 0x30
 80121ac:	f10d 012e 	add.w	r1, sp, #46	@ 0x2e
 80121b0:	4628      	mov	r0, r5
 80121b2:	f001 fcdd 	bl	8013b70 <uxr_read_submessage_header>
 80121b6:	2800      	cmp	r0, #0
 80121b8:	f000 813e 	beq.w	8012438 <read_submessage_list+0x2a4>
 80121bc:	f89d 302e 	ldrb.w	r3, [sp, #46]	@ 0x2e
 80121c0:	f89d 2026 	ldrb.w	r2, [sp, #38]	@ 0x26
 80121c4:	3b02      	subs	r3, #2
 80121c6:	2b0d      	cmp	r3, #13
 80121c8:	d8ed      	bhi.n	80121a6 <read_submessage_list+0x12>
 80121ca:	a101      	add	r1, pc, #4	@ (adr r1, 80121d0 <read_submessage_list+0x3c>)
 80121cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80121d0:	0801242f 	.word	0x0801242f
 80121d4:	080121a7 	.word	0x080121a7
 80121d8:	0801241f 	.word	0x0801241f
 80121dc:	080123bd 	.word	0x080123bd
 80121e0:	080123b3 	.word	0x080123b3
 80121e4:	080121a7 	.word	0x080121a7
 80121e8:	080121a7 	.word	0x080121a7
 80121ec:	08012313 	.word	0x08012313
 80121f0:	080122a3 	.word	0x080122a3
 80121f4:	08012263 	.word	0x08012263
 80121f8:	080121a7 	.word	0x080121a7
 80121fc:	080121a7 	.word	0x080121a7
 8012200:	080121a7 	.word	0x080121a7
 8012204:	08012209 	.word	0x08012209
 8012208:	a910      	add	r1, sp, #64	@ 0x40
 801220a:	4628      	mov	r0, r5
 801220c:	f002 feb0 	bl	8014f70 <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 8012210:	f8d4 9090 	ldr.w	r9, [r4, #144]	@ 0x90
 8012214:	f1b9 0f00 	cmp.w	r9, #0
 8012218:	f000 8116 	beq.w	8012448 <read_submessage_list+0x2b4>
 801221c:	f001 fcee 	bl	8013bfc <uxr_nanos>
 8012220:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 8012222:	4602      	mov	r2, r0
 8012224:	460b      	mov	r3, r1
 8012226:	9814      	ldr	r0, [sp, #80]	@ 0x50
 8012228:	2100      	movs	r1, #0
 801222a:	468c      	mov	ip, r1
 801222c:	fbc0 7c06 	smlal	r7, ip, r0, r6
 8012230:	e9cd 7c04 	strd	r7, ip, [sp, #16]
 8012234:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8012236:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 8012238:	468c      	mov	ip, r1
 801223a:	fbc0 7c06 	smlal	r7, ip, r0, r6
 801223e:	46e2      	mov	sl, ip
 8012240:	46bc      	mov	ip, r7
 8012242:	e9dd 0712 	ldrd	r0, r7, [sp, #72]	@ 0x48
 8012246:	fbc0 7106 	smlal	r7, r1, r0, r6
 801224a:	e9cd ca02 	strd	ip, sl, [sp, #8]
 801224e:	e9cd 7100 	strd	r7, r1, [sp]
 8012252:	f8d4 1094 	ldr.w	r1, [r4, #148]	@ 0x94
 8012256:	9106      	str	r1, [sp, #24]
 8012258:	4620      	mov	r0, r4
 801225a:	47c8      	blx	r9
 801225c:	f884 80a0 	strb.w	r8, [r4, #160]	@ 0xa0
 8012260:	e7a1      	b.n	80121a6 <read_submessage_list+0x12>
 8012262:	a910      	add	r1, sp, #64	@ 0x40
 8012264:	4628      	mov	r0, r5
 8012266:	f002 fe63 	bl	8014f30 <uxr_deserialize_HEARTBEAT_Payload>
 801226a:	2100      	movs	r1, #0
 801226c:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 8012270:	f001 fb56 	bl	8013920 <uxr_stream_id_from_raw>
 8012274:	f3c0 2707 	ubfx	r7, r0, #8, #8
 8012278:	900f      	str	r0, [sp, #60]	@ 0x3c
 801227a:	4639      	mov	r1, r7
 801227c:	f104 0008 	add.w	r0, r4, #8
 8012280:	f001 fc3c 	bl	8013afc <uxr_get_input_reliable_stream>
 8012284:	2800      	cmp	r0, #0
 8012286:	d08e      	beq.n	80121a6 <read_submessage_list+0x12>
 8012288:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 801228c:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
 8012290:	f007 fb6c 	bl	801996c <uxr_process_heartbeat>
 8012294:	f89d 103c 	ldrb.w	r1, [sp, #60]	@ 0x3c
 8012298:	463a      	mov	r2, r7
 801229a:	4620      	mov	r0, r4
 801229c:	f7ff fdf4 	bl	8011e88 <write_submessage_acknack.isra.0>
 80122a0:	e781      	b.n	80121a6 <read_submessage_list+0x12>
 80122a2:	a910      	add	r1, sp, #64	@ 0x40
 80122a4:	4628      	mov	r0, r5
 80122a6:	f002 fe1b 	bl	8014ee0 <uxr_deserialize_ACKNACK_Payload>
 80122aa:	2100      	movs	r1, #0
 80122ac:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 80122b0:	f001 fb36 	bl	8013920 <uxr_stream_id_from_raw>
 80122b4:	900d      	str	r0, [sp, #52]	@ 0x34
 80122b6:	f3c0 2107 	ubfx	r1, r0, #8, #8
 80122ba:	f104 0008 	add.w	r0, r4, #8
 80122be:	f001 fc09 	bl	8013ad4 <uxr_get_output_reliable_stream>
 80122c2:	4607      	mov	r7, r0
 80122c4:	2800      	cmp	r0, #0
 80122c6:	f43f af6e 	beq.w	80121a6 <read_submessage_list+0x12>
 80122ca:	f89d 3042 	ldrb.w	r3, [sp, #66]	@ 0x42
 80122ce:	f89d 1043 	ldrb.w	r1, [sp, #67]	@ 0x43
 80122d2:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 80122d6:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 80122da:	b289      	uxth	r1, r1
 80122dc:	f007 fea0 	bl	801a020 <uxr_process_acknack>
 80122e0:	4638      	mov	r0, r7
 80122e2:	f007 fe5d 	bl	8019fa0 <uxr_begin_output_nack_buffer_it>
 80122e6:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 80122ea:	f8ad 0032 	strh.w	r0, [sp, #50]	@ 0x32
 80122ee:	e006      	b.n	80122fe <read_submessage_list+0x16a>
 80122f0:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 80122f2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80122f4:	f8d3 9004 	ldr.w	r9, [r3, #4]
 80122f8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80122fa:	6818      	ldr	r0, [r3, #0]
 80122fc:	47c8      	blx	r9
 80122fe:	f10d 0332 	add.w	r3, sp, #50	@ 0x32
 8012302:	aa0f      	add	r2, sp, #60	@ 0x3c
 8012304:	4651      	mov	r1, sl
 8012306:	4638      	mov	r0, r7
 8012308:	f007 fe4c 	bl	8019fa4 <uxr_next_reliable_nack_buffer_to_send>
 801230c:	2800      	cmp	r0, #0
 801230e:	d1ef      	bne.n	80122f0 <read_submessage_list+0x15c>
 8012310:	e749      	b.n	80121a6 <read_submessage_list+0x12>
 8012312:	f89d 3025 	ldrb.w	r3, [sp, #37]	@ 0x25
 8012316:	f88d 3035 	strb.w	r3, [sp, #53]	@ 0x35
 801231a:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 801231e:	f89d 3027 	ldrb.w	r3, [sp, #39]	@ 0x27
 8012322:	f88d 3037 	strb.w	r3, [sp, #55]	@ 0x37
 8012326:	4651      	mov	r1, sl
 8012328:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 801232c:	f8bd 7030 	ldrh.w	r7, [sp, #48]	@ 0x30
 8012330:	f89d 902f 	ldrb.w	r9, [sp, #47]	@ 0x2f
 8012334:	f88d 2036 	strb.w	r2, [sp, #54]	@ 0x36
 8012338:	4628      	mov	r0, r5
 801233a:	f88d 3034 	strb.w	r3, [sp, #52]	@ 0x34
 801233e:	f002 fb2f 	bl	80149a0 <uxr_deserialize_BaseObjectRequest>
 8012342:	4650      	mov	r0, sl
 8012344:	a90f      	add	r1, sp, #60	@ 0x3c
 8012346:	f10d 0232 	add.w	r2, sp, #50	@ 0x32
 801234a:	f000 fe1b 	bl	8012f84 <uxr_parse_base_object_request>
 801234e:	f8d4 b080 	ldr.w	fp, [r4, #128]	@ 0x80
 8012352:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8012354:	f8bd a032 	ldrh.w	sl, [sp, #50]	@ 0x32
 8012358:	9110      	str	r1, [sp, #64]	@ 0x40
 801235a:	3f04      	subs	r7, #4
 801235c:	f009 090e 	and.w	r9, r9, #14
 8012360:	b2bf      	uxth	r7, r7
 8012362:	f1bb 0f00 	cmp.w	fp, #0
 8012366:	d006      	beq.n	8012376 <read_submessage_list+0x1e2>
 8012368:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 801236c:	9300      	str	r3, [sp, #0]
 801236e:	4652      	mov	r2, sl
 8012370:	2300      	movs	r3, #0
 8012372:	4620      	mov	r0, r4
 8012374:	47d8      	blx	fp
 8012376:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 8012378:	b16a      	cbz	r2, 8012396 <read_submessage_list+0x202>
 801237a:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 801237c:	2100      	movs	r1, #0
 801237e:	3802      	subs	r0, #2
 8012380:	e002      	b.n	8012388 <read_submessage_list+0x1f4>
 8012382:	3101      	adds	r1, #1
 8012384:	4291      	cmp	r1, r2
 8012386:	d006      	beq.n	8012396 <read_submessage_list+0x202>
 8012388:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 801238c:	4553      	cmp	r3, sl
 801238e:	d1f8      	bne.n	8012382 <read_submessage_list+0x1ee>
 8012390:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8012392:	2200      	movs	r2, #0
 8012394:	545a      	strb	r2, [r3, r1]
 8012396:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 801239a:	9102      	str	r1, [sp, #8]
 801239c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801239e:	9101      	str	r1, [sp, #4]
 80123a0:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80123a2:	9100      	str	r1, [sp, #0]
 80123a4:	464b      	mov	r3, r9
 80123a6:	463a      	mov	r2, r7
 80123a8:	4629      	mov	r1, r5
 80123aa:	4620      	mov	r0, r4
 80123ac:	f7ff fc4a 	bl	8011c44 <read_submessage_format>
 80123b0:	e6f9      	b.n	80121a6 <read_submessage_list+0x12>
 80123b2:	4629      	mov	r1, r5
 80123b4:	4620      	mov	r0, r4
 80123b6:	f7ff fea5 	bl	8012104 <read_submessage_info>
 80123ba:	e6f4      	b.n	80121a6 <read_submessage_list+0x12>
 80123bc:	2a00      	cmp	r2, #0
 80123be:	d03e      	beq.n	801243e <read_submessage_list+0x2aa>
 80123c0:	a910      	add	r1, sp, #64	@ 0x40
 80123c2:	4628      	mov	r0, r5
 80123c4:	f002 fce8 	bl	8014d98 <uxr_deserialize_STATUS_Payload>
 80123c8:	a90e      	add	r1, sp, #56	@ 0x38
 80123ca:	aa0d      	add	r2, sp, #52	@ 0x34
 80123cc:	a810      	add	r0, sp, #64	@ 0x40
 80123ce:	f000 fdd9 	bl	8012f84 <uxr_parse_base_object_request>
 80123d2:	f8d4 a080 	ldr.w	sl, [r4, #128]	@ 0x80
 80123d6:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80123d8:	f89d 9044 	ldrb.w	r9, [sp, #68]	@ 0x44
 80123dc:	f8bd 7034 	ldrh.w	r7, [sp, #52]	@ 0x34
 80123e0:	910f      	str	r1, [sp, #60]	@ 0x3c
 80123e2:	f1ba 0f00 	cmp.w	sl, #0
 80123e6:	d006      	beq.n	80123f6 <read_submessage_list+0x262>
 80123e8:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 80123ec:	9300      	str	r3, [sp, #0]
 80123ee:	463a      	mov	r2, r7
 80123f0:	464b      	mov	r3, r9
 80123f2:	4620      	mov	r0, r4
 80123f4:	47d0      	blx	sl
 80123f6:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 80123f8:	2a00      	cmp	r2, #0
 80123fa:	f43f aed4 	beq.w	80121a6 <read_submessage_list+0x12>
 80123fe:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 8012400:	2100      	movs	r1, #0
 8012402:	3802      	subs	r0, #2
 8012404:	e003      	b.n	801240e <read_submessage_list+0x27a>
 8012406:	3101      	adds	r1, #1
 8012408:	4291      	cmp	r1, r2
 801240a:	f43f aecc 	beq.w	80121a6 <read_submessage_list+0x12>
 801240e:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 8012412:	42bb      	cmp	r3, r7
 8012414:	d1f7      	bne.n	8012406 <read_submessage_list+0x272>
 8012416:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8012418:	f803 9001 	strb.w	r9, [r3, r1]
 801241c:	e6c3      	b.n	80121a6 <read_submessage_list+0x12>
 801241e:	2a00      	cmp	r2, #0
 8012420:	f47f aec1 	bne.w	80121a6 <read_submessage_list+0x12>
 8012424:	4629      	mov	r1, r5
 8012426:	4620      	mov	r0, r4
 8012428:	f000 fcf2 	bl	8012e10 <uxr_read_create_session_status>
 801242c:	e6bb      	b.n	80121a6 <read_submessage_list+0x12>
 801242e:	4629      	mov	r1, r5
 8012430:	4620      	mov	r0, r4
 8012432:	f7ff fcf3 	bl	8011e1c <read_submessage_get_info>
 8012436:	e6b6      	b.n	80121a6 <read_submessage_list+0x12>
 8012438:	b017      	add	sp, #92	@ 0x5c
 801243a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801243e:	4629      	mov	r1, r5
 8012440:	4620      	mov	r0, r4
 8012442:	f000 fcf1 	bl	8012e28 <uxr_read_delete_session_status>
 8012446:	e6ae      	b.n	80121a6 <read_submessage_list+0x12>
 8012448:	f001 fbd8 	bl	8013bfc <uxr_nanos>
 801244c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801244e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8012450:	464f      	mov	r7, r9
 8012452:	fbc3 2706 	smlal	r2, r7, r3, r6
 8012456:	1812      	adds	r2, r2, r0
 8012458:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801245a:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801245c:	eb47 0101 	adc.w	r1, r7, r1
 8012460:	464f      	mov	r7, r9
 8012462:	fbc3 0706 	smlal	r0, r7, r3, r6
 8012466:	463b      	mov	r3, r7
 8012468:	4684      	mov	ip, r0
 801246a:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	@ 0x40
 801246e:	fbc7 0906 	smlal	r0, r9, r7, r6
 8012472:	eb1c 0c00 	adds.w	ip, ip, r0
 8012476:	464f      	mov	r7, r9
 8012478:	eb43 0307 	adc.w	r3, r3, r7
 801247c:	ebb2 0c0c 	subs.w	ip, r2, ip
 8012480:	eb61 0303 	sbc.w	r3, r1, r3
 8012484:	0fda      	lsrs	r2, r3, #31
 8012486:	eb12 020c 	adds.w	r2, r2, ip
 801248a:	f143 0300 	adc.w	r3, r3, #0
 801248e:	0852      	lsrs	r2, r2, #1
 8012490:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
 8012494:	105b      	asrs	r3, r3, #1
 8012496:	f8c4 2098 	str.w	r2, [r4, #152]	@ 0x98
 801249a:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
 801249e:	e6dd      	b.n	801225c <read_submessage_list+0xc8>
 80124a0:	3b9aca00 	.word	0x3b9aca00

080124a4 <listen_message_reliably>:
 80124a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80124a8:	1e0b      	subs	r3, r1, #0
 80124aa:	b09d      	sub	sp, #116	@ 0x74
 80124ac:	bfb8      	it	lt
 80124ae:	f06f 4300 	mvnlt.w	r3, #2147483648	@ 0x80000000
 80124b2:	4680      	mov	r8, r0
 80124b4:	9305      	str	r3, [sp, #20]
 80124b6:	f001 fb87 	bl	8013bc8 <uxr_millis>
 80124ba:	f898 2048 	ldrb.w	r2, [r8, #72]	@ 0x48
 80124be:	4681      	mov	r9, r0
 80124c0:	2a00      	cmp	r2, #0
 80124c2:	f000 80a1 	beq.w	8012608 <listen_message_reliably+0x164>
 80124c6:	2600      	movs	r6, #0
 80124c8:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80124cc:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 80124d0:	9303      	str	r3, [sp, #12]
 80124d2:	4630      	mov	r0, r6
 80124d4:	460f      	mov	r7, r1
 80124d6:	e00f      	b.n	80124f8 <listen_message_reliably+0x54>
 80124d8:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 80124dc:	9903      	ldr	r1, [sp, #12]
 80124de:	455a      	cmp	r2, fp
 80124e0:	f106 0601 	add.w	r6, r6, #1
 80124e4:	eb73 0101 	sbcs.w	r1, r3, r1
 80124e8:	b2f0      	uxtb	r0, r6
 80124ea:	da01      	bge.n	80124f0 <listen_message_reliably+0x4c>
 80124ec:	4693      	mov	fp, r2
 80124ee:	9303      	str	r3, [sp, #12]
 80124f0:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 80124f4:	4283      	cmp	r3, r0
 80124f6:	d960      	bls.n	80125ba <listen_message_reliably+0x116>
 80124f8:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 80124fc:	2102      	movs	r1, #2
 80124fe:	2201      	movs	r2, #1
 8012500:	f001 f9e4 	bl	80138cc <uxr_stream_id>
 8012504:	00e4      	lsls	r4, r4, #3
 8012506:	f104 0520 	add.w	r5, r4, #32
 801250a:	4445      	add	r5, r8
 801250c:	4601      	mov	r1, r0
 801250e:	463b      	mov	r3, r7
 8012510:	464a      	mov	r2, r9
 8012512:	4628      	mov	r0, r5
 8012514:	9109      	str	r1, [sp, #36]	@ 0x24
 8012516:	f007 fd19 	bl	8019f4c <uxr_update_output_stream_heartbeat_timestamp>
 801251a:	eb08 0304 	add.w	r3, r8, r4
 801251e:	2800      	cmp	r0, #0
 8012520:	d0da      	beq.n	80124d8 <listen_message_reliably+0x34>
 8012522:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 8012526:	f89d 5025 	ldrb.w	r5, [sp, #37]	@ 0x25
 801252a:	9304      	str	r3, [sp, #16]
 801252c:	4640      	mov	r0, r8
 801252e:	f000 fd03 	bl	8012f38 <uxr_session_header_offset>
 8012532:	3501      	adds	r5, #1
 8012534:	f10d 0a50 	add.w	sl, sp, #80	@ 0x50
 8012538:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 801253c:	eb08 05c5 	add.w	r5, r8, r5, lsl #3
 8012540:	2300      	movs	r3, #0
 8012542:	2211      	movs	r2, #17
 8012544:	9000      	str	r0, [sp, #0]
 8012546:	a90c      	add	r1, sp, #48	@ 0x30
 8012548:	4650      	mov	r0, sl
 801254a:	f7fb ffdf 	bl	800e50c <ucdr_init_buffer_origin_offset>
 801254e:	2300      	movs	r3, #0
 8012550:	2205      	movs	r2, #5
 8012552:	210b      	movs	r1, #11
 8012554:	4650      	mov	r0, sl
 8012556:	f001 faf1 	bl	8013b3c <uxr_buffer_submessage_header>
 801255a:	8968      	ldrh	r0, [r5, #10]
 801255c:	2101      	movs	r1, #1
 801255e:	f007 fdb7 	bl	801a0d0 <uxr_seq_num_add>
 8012562:	892b      	ldrh	r3, [r5, #8]
 8012564:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 8012568:	4602      	mov	r2, r0
 801256a:	9b04      	ldr	r3, [sp, #16]
 801256c:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 8012570:	a90a      	add	r1, sp, #40	@ 0x28
 8012572:	4650      	mov	r0, sl
 8012574:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 8012578:	f002 fcc6 	bl	8014f08 <uxr_serialize_HEARTBEAT_Payload>
 801257c:	2200      	movs	r2, #0
 801257e:	4611      	mov	r1, r2
 8012580:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8012582:	4640      	mov	r0, r8
 8012584:	f000 fc82 	bl	8012e8c <uxr_stamp_session_header>
 8012588:	4650      	mov	r0, sl
 801258a:	f7fb fffd 	bl	800e588 <ucdr_buffer_length>
 801258e:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 8012592:	4602      	mov	r2, r0
 8012594:	a90c      	add	r1, sp, #48	@ 0x30
 8012596:	e9d3 0500 	ldrd	r0, r5, [r3]
 801259a:	4444      	add	r4, r8
 801259c:	47a8      	blx	r5
 801259e:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	@ 0x38
 80125a2:	9903      	ldr	r1, [sp, #12]
 80125a4:	455a      	cmp	r2, fp
 80125a6:	f106 0601 	add.w	r6, r6, #1
 80125aa:	eb73 0101 	sbcs.w	r1, r3, r1
 80125ae:	b2f0      	uxtb	r0, r6
 80125b0:	db9c      	blt.n	80124ec <listen_message_reliably+0x48>
 80125b2:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 80125b6:	4283      	cmp	r3, r0
 80125b8:	d89e      	bhi.n	80124f8 <listen_message_reliably+0x54>
 80125ba:	9a03      	ldr	r2, [sp, #12]
 80125bc:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80125c0:	429a      	cmp	r2, r3
 80125c2:	bf08      	it	eq
 80125c4:	f1bb 3fff 	cmpeq.w	fp, #4294967295	@ 0xffffffff
 80125c8:	d01e      	beq.n	8012608 <listen_message_reliably+0x164>
 80125ca:	ebab 0309 	sub.w	r3, fp, r9
 80125ce:	9905      	ldr	r1, [sp, #20]
 80125d0:	f8d8 2070 	ldr.w	r2, [r8, #112]	@ 0x70
 80125d4:	2b00      	cmp	r3, #0
 80125d6:	bf08      	it	eq
 80125d8:	2301      	moveq	r3, #1
 80125da:	4299      	cmp	r1, r3
 80125dc:	bfa8      	it	ge
 80125de:	4619      	movge	r1, r3
 80125e0:	6894      	ldr	r4, [r2, #8]
 80125e2:	6810      	ldr	r0, [r2, #0]
 80125e4:	4689      	mov	r9, r1
 80125e6:	460b      	mov	r3, r1
 80125e8:	aa08      	add	r2, sp, #32
 80125ea:	a907      	add	r1, sp, #28
 80125ec:	47a0      	blx	r4
 80125ee:	b968      	cbnz	r0, 801260c <listen_message_reliably+0x168>
 80125f0:	9b05      	ldr	r3, [sp, #20]
 80125f2:	eba3 0309 	sub.w	r3, r3, r9
 80125f6:	2b00      	cmp	r3, #0
 80125f8:	9305      	str	r3, [sp, #20]
 80125fa:	f73f af5c 	bgt.w	80124b6 <listen_message_reliably+0x12>
 80125fe:	4604      	mov	r4, r0
 8012600:	4620      	mov	r0, r4
 8012602:	b01d      	add	sp, #116	@ 0x74
 8012604:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012608:	9b05      	ldr	r3, [sp, #20]
 801260a:	e7e0      	b.n	80125ce <listen_message_reliably+0x12a>
 801260c:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 8012610:	4604      	mov	r4, r0
 8012612:	a80c      	add	r0, sp, #48	@ 0x30
 8012614:	f7fb ff8c 	bl	800e530 <ucdr_init_buffer>
 8012618:	2500      	movs	r5, #0
 801261a:	f10d 031a 	add.w	r3, sp, #26
 801261e:	aa06      	add	r2, sp, #24
 8012620:	a90c      	add	r1, sp, #48	@ 0x30
 8012622:	4640      	mov	r0, r8
 8012624:	f88d 5018 	strb.w	r5, [sp, #24]
 8012628:	f000 fc44 	bl	8012eb4 <uxr_read_session_header>
 801262c:	b918      	cbnz	r0, 8012636 <listen_message_reliably+0x192>
 801262e:	4620      	mov	r0, r4
 8012630:	b01d      	add	sp, #116	@ 0x74
 8012632:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012636:	4629      	mov	r1, r5
 8012638:	f89d 0018 	ldrb.w	r0, [sp, #24]
 801263c:	f001 f970 	bl	8013920 <uxr_stream_id_from_raw>
 8012640:	f3c0 4507 	ubfx	r5, r0, #16, #8
 8012644:	2d01      	cmp	r5, #1
 8012646:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 801264a:	f8bd a01a 	ldrh.w	sl, [sp, #26]
 801264e:	f3c0 2607 	ubfx	r6, r0, #8, #8
 8012652:	d04b      	beq.n	80126ec <listen_message_reliably+0x248>
 8012654:	2d02      	cmp	r5, #2
 8012656:	d00f      	beq.n	8012678 <listen_message_reliably+0x1d4>
 8012658:	2d00      	cmp	r5, #0
 801265a:	d1e8      	bne.n	801262e <listen_message_reliably+0x18a>
 801265c:	4629      	mov	r1, r5
 801265e:	4628      	mov	r0, r5
 8012660:	f001 f95e 	bl	8013920 <uxr_stream_id_from_raw>
 8012664:	a90c      	add	r1, sp, #48	@ 0x30
 8012666:	4602      	mov	r2, r0
 8012668:	4640      	mov	r0, r8
 801266a:	920a      	str	r2, [sp, #40]	@ 0x28
 801266c:	f7ff fd92 	bl	8012194 <read_submessage_list>
 8012670:	4620      	mov	r0, r4
 8012672:	b01d      	add	sp, #116	@ 0x74
 8012674:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012678:	4631      	mov	r1, r6
 801267a:	f108 0008 	add.w	r0, r8, #8
 801267e:	f89d 9024 	ldrb.w	r9, [sp, #36]	@ 0x24
 8012682:	f001 fa3b 	bl	8013afc <uxr_get_input_reliable_stream>
 8012686:	4607      	mov	r7, r0
 8012688:	b338      	cbz	r0, 80126da <listen_message_reliably+0x236>
 801268a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801268c:	9203      	str	r2, [sp, #12]
 801268e:	a80c      	add	r0, sp, #48	@ 0x30
 8012690:	f7fb ff7e 	bl	800e590 <ucdr_buffer_remaining>
 8012694:	4603      	mov	r3, r0
 8012696:	f10d 0019 	add.w	r0, sp, #25
 801269a:	9000      	str	r0, [sp, #0]
 801269c:	9a03      	ldr	r2, [sp, #12]
 801269e:	4651      	mov	r1, sl
 80126a0:	4638      	mov	r0, r7
 80126a2:	f007 f869 	bl	8019778 <uxr_receive_reliable_message>
 80126a6:	b1c0      	cbz	r0, 80126da <listen_message_reliably+0x236>
 80126a8:	f89d 3019 	ldrb.w	r3, [sp, #25]
 80126ac:	b393      	cbz	r3, 8012714 <listen_message_reliably+0x270>
 80126ae:	ad14      	add	r5, sp, #80	@ 0x50
 80126b0:	f04f 0a02 	mov.w	sl, #2
 80126b4:	e00a      	b.n	80126cc <listen_message_reliably+0x228>
 80126b6:	f88d 9028 	strb.w	r9, [sp, #40]	@ 0x28
 80126ba:	f88d 6029 	strb.w	r6, [sp, #41]	@ 0x29
 80126be:	f88d a02a 	strb.w	sl, [sp, #42]	@ 0x2a
 80126c2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80126c4:	4629      	mov	r1, r5
 80126c6:	4640      	mov	r0, r8
 80126c8:	f7ff fd64 	bl	8012194 <read_submessage_list>
 80126cc:	2204      	movs	r2, #4
 80126ce:	4629      	mov	r1, r5
 80126d0:	4638      	mov	r0, r7
 80126d2:	f007 f8d1 	bl	8019878 <uxr_next_input_reliable_buffer_available>
 80126d6:	2800      	cmp	r0, #0
 80126d8:	d1ed      	bne.n	80126b6 <listen_message_reliably+0x212>
 80126da:	4640      	mov	r0, r8
 80126dc:	4632      	mov	r2, r6
 80126de:	4649      	mov	r1, r9
 80126e0:	f7ff fbd2 	bl	8011e88 <write_submessage_acknack.isra.0>
 80126e4:	4620      	mov	r0, r4
 80126e6:	b01d      	add	sp, #116	@ 0x74
 80126e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80126ec:	4631      	mov	r1, r6
 80126ee:	f108 0008 	add.w	r0, r8, #8
 80126f2:	f001 f9f9 	bl	8013ae8 <uxr_get_input_best_effort_stream>
 80126f6:	2800      	cmp	r0, #0
 80126f8:	d099      	beq.n	801262e <listen_message_reliably+0x18a>
 80126fa:	4651      	mov	r1, sl
 80126fc:	f006 ffa8 	bl	8019650 <uxr_receive_best_effort_message>
 8012700:	2800      	cmp	r0, #0
 8012702:	d094      	beq.n	801262e <listen_message_reliably+0x18a>
 8012704:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 8012708:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801270a:	a90c      	add	r1, sp, #48	@ 0x30
 801270c:	4640      	mov	r0, r8
 801270e:	f7ff fd41 	bl	8012194 <read_submessage_list>
 8012712:	e78c      	b.n	801262e <listen_message_reliably+0x18a>
 8012714:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 8012718:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801271a:	a90c      	add	r1, sp, #48	@ 0x30
 801271c:	4640      	mov	r0, r8
 801271e:	f7ff fd39 	bl	8012194 <read_submessage_list>
 8012722:	e7c4      	b.n	80126ae <listen_message_reliably+0x20a>

08012724 <uxr_run_session_timeout>:
 8012724:	b570      	push	{r4, r5, r6, lr}
 8012726:	4604      	mov	r4, r0
 8012728:	460d      	mov	r5, r1
 801272a:	f001 fa4d 	bl	8013bc8 <uxr_millis>
 801272e:	4606      	mov	r6, r0
 8012730:	4620      	mov	r0, r4
 8012732:	f7ff fc71 	bl	8012018 <uxr_flash_output_streams>
 8012736:	4629      	mov	r1, r5
 8012738:	4620      	mov	r0, r4
 801273a:	f7ff feb3 	bl	80124a4 <listen_message_reliably>
 801273e:	f001 fa43 	bl	8013bc8 <uxr_millis>
 8012742:	1b83      	subs	r3, r0, r6
 8012744:	1ae9      	subs	r1, r5, r3
 8012746:	2900      	cmp	r1, #0
 8012748:	dcf6      	bgt.n	8012738 <uxr_run_session_timeout+0x14>
 801274a:	f104 0008 	add.w	r0, r4, #8
 801274e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012752:	f001 b9dd 	b.w	8013b10 <uxr_output_streams_confirmed>
 8012756:	bf00      	nop

08012758 <uxr_run_session_until_data>:
 8012758:	b570      	push	{r4, r5, r6, lr}
 801275a:	4604      	mov	r4, r0
 801275c:	460d      	mov	r5, r1
 801275e:	f001 fa33 	bl	8013bc8 <uxr_millis>
 8012762:	4606      	mov	r6, r0
 8012764:	4620      	mov	r0, r4
 8012766:	f7ff fc57 	bl	8012018 <uxr_flash_output_streams>
 801276a:	2300      	movs	r3, #0
 801276c:	f884 30b4 	strb.w	r3, [r4, #180]	@ 0xb4
 8012770:	4629      	mov	r1, r5
 8012772:	e005      	b.n	8012780 <uxr_run_session_until_data+0x28>
 8012774:	f001 fa28 	bl	8013bc8 <uxr_millis>
 8012778:	1b83      	subs	r3, r0, r6
 801277a:	1ae9      	subs	r1, r5, r3
 801277c:	2900      	cmp	r1, #0
 801277e:	dd07      	ble.n	8012790 <uxr_run_session_until_data+0x38>
 8012780:	4620      	mov	r0, r4
 8012782:	f7ff fe8f 	bl	80124a4 <listen_message_reliably>
 8012786:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 801278a:	2800      	cmp	r0, #0
 801278c:	d0f2      	beq.n	8012774 <uxr_run_session_until_data+0x1c>
 801278e:	bd70      	pop	{r4, r5, r6, pc}
 8012790:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 8012794:	bd70      	pop	{r4, r5, r6, pc}
 8012796:	bf00      	nop

08012798 <uxr_run_session_until_confirm_delivery>:
 8012798:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801279c:	4606      	mov	r6, r0
 801279e:	460d      	mov	r5, r1
 80127a0:	f001 fa12 	bl	8013bc8 <uxr_millis>
 80127a4:	4607      	mov	r7, r0
 80127a6:	4630      	mov	r0, r6
 80127a8:	f7ff fc36 	bl	8012018 <uxr_flash_output_streams>
 80127ac:	2d00      	cmp	r5, #0
 80127ae:	f106 0808 	add.w	r8, r6, #8
 80127b2:	bfa8      	it	ge
 80127b4:	462c      	movge	r4, r5
 80127b6:	da07      	bge.n	80127c8 <uxr_run_session_until_confirm_delivery+0x30>
 80127b8:	e00e      	b.n	80127d8 <uxr_run_session_until_confirm_delivery+0x40>
 80127ba:	f7ff fe73 	bl	80124a4 <listen_message_reliably>
 80127be:	f001 fa03 	bl	8013bc8 <uxr_millis>
 80127c2:	1bc3      	subs	r3, r0, r7
 80127c4:	1aec      	subs	r4, r5, r3
 80127c6:	d407      	bmi.n	80127d8 <uxr_run_session_until_confirm_delivery+0x40>
 80127c8:	4640      	mov	r0, r8
 80127ca:	f001 f9a1 	bl	8013b10 <uxr_output_streams_confirmed>
 80127ce:	4603      	mov	r3, r0
 80127d0:	4621      	mov	r1, r4
 80127d2:	4630      	mov	r0, r6
 80127d4:	2b00      	cmp	r3, #0
 80127d6:	d0f0      	beq.n	80127ba <uxr_run_session_until_confirm_delivery+0x22>
 80127d8:	4640      	mov	r0, r8
 80127da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80127de:	f001 b997 	b.w	8013b10 <uxr_output_streams_confirmed>
 80127e2:	bf00      	nop

080127e4 <uxr_run_session_until_all_status>:
 80127e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80127e8:	9c08      	ldr	r4, [sp, #32]
 80127ea:	4606      	mov	r6, r0
 80127ec:	460f      	mov	r7, r1
 80127ee:	4691      	mov	r9, r2
 80127f0:	461d      	mov	r5, r3
 80127f2:	f7ff fc11 	bl	8012018 <uxr_flash_output_streams>
 80127f6:	b124      	cbz	r4, 8012802 <uxr_run_session_until_all_status+0x1e>
 80127f8:	4622      	mov	r2, r4
 80127fa:	21ff      	movs	r1, #255	@ 0xff
 80127fc:	4628      	mov	r0, r5
 80127fe:	f008 fdad 	bl	801b35c <memset>
 8012802:	e9c6 951d 	strd	r9, r5, [r6, #116]	@ 0x74
 8012806:	67f4      	str	r4, [r6, #124]	@ 0x7c
 8012808:	f001 f9de 	bl	8013bc8 <uxr_millis>
 801280c:	3d01      	subs	r5, #1
 801280e:	f1a9 0902 	sub.w	r9, r9, #2
 8012812:	4680      	mov	r8, r0
 8012814:	4639      	mov	r1, r7
 8012816:	4630      	mov	r0, r6
 8012818:	f7ff fe44 	bl	80124a4 <listen_message_reliably>
 801281c:	f001 f9d4 	bl	8013bc8 <uxr_millis>
 8012820:	eba0 0008 	sub.w	r0, r0, r8
 8012824:	1a39      	subs	r1, r7, r0
 8012826:	b344      	cbz	r4, 801287a <uxr_run_session_until_all_status+0x96>
 8012828:	4628      	mov	r0, r5
 801282a:	46ac      	mov	ip, r5
 801282c:	2301      	movs	r3, #1
 801282e:	e002      	b.n	8012836 <uxr_run_session_until_all_status+0x52>
 8012830:	42a3      	cmp	r3, r4
 8012832:	d20d      	bcs.n	8012850 <uxr_run_session_until_all_status+0x6c>
 8012834:	3301      	adds	r3, #1
 8012836:	f81c ef01 	ldrb.w	lr, [ip, #1]!
 801283a:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 801283e:	d1f7      	bne.n	8012830 <uxr_run_session_until_all_status+0x4c>
 8012840:	42a3      	cmp	r3, r4
 8012842:	f839 2013 	ldrh.w	r2, [r9, r3, lsl #1]
 8012846:	d213      	bcs.n	8012870 <uxr_run_session_until_all_status+0x8c>
 8012848:	2a00      	cmp	r2, #0
 801284a:	d0f3      	beq.n	8012834 <uxr_run_session_until_all_status+0x50>
 801284c:	2900      	cmp	r1, #0
 801284e:	dce2      	bgt.n	8012816 <uxr_run_session_until_all_status+0x32>
 8012850:	2300      	movs	r3, #0
 8012852:	67f3      	str	r3, [r6, #124]	@ 0x7c
 8012854:	442c      	add	r4, r5
 8012856:	e001      	b.n	801285c <uxr_run_session_until_all_status+0x78>
 8012858:	2b01      	cmp	r3, #1
 801285a:	d812      	bhi.n	8012882 <uxr_run_session_until_all_status+0x9e>
 801285c:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8012860:	4284      	cmp	r4, r0
 8012862:	d1f9      	bne.n	8012858 <uxr_run_session_until_all_status+0x74>
 8012864:	2b01      	cmp	r3, #1
 8012866:	bf8c      	ite	hi
 8012868:	2000      	movhi	r0, #0
 801286a:	2001      	movls	r0, #1
 801286c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012870:	2900      	cmp	r1, #0
 8012872:	dded      	ble.n	8012850 <uxr_run_session_until_all_status+0x6c>
 8012874:	2a00      	cmp	r2, #0
 8012876:	d1ce      	bne.n	8012816 <uxr_run_session_until_all_status+0x32>
 8012878:	e7ea      	b.n	8012850 <uxr_run_session_until_all_status+0x6c>
 801287a:	67f4      	str	r4, [r6, #124]	@ 0x7c
 801287c:	2001      	movs	r0, #1
 801287e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012882:	2000      	movs	r0, #0
 8012884:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08012888 <uxr_sync_session>:
 8012888:	b5f0      	push	{r4, r5, r6, r7, lr}
 801288a:	b093      	sub	sp, #76	@ 0x4c
 801288c:	4604      	mov	r4, r0
 801288e:	460d      	mov	r5, r1
 8012890:	f000 fb52 	bl	8012f38 <uxr_session_header_offset>
 8012894:	2214      	movs	r2, #20
 8012896:	eb0d 0102 	add.w	r1, sp, r2
 801289a:	9000      	str	r0, [sp, #0]
 801289c:	2300      	movs	r3, #0
 801289e:	a80a      	add	r0, sp, #40	@ 0x28
 80128a0:	f7fb fe34 	bl	800e50c <ucdr_init_buffer_origin_offset>
 80128a4:	2300      	movs	r3, #0
 80128a6:	2208      	movs	r2, #8
 80128a8:	210e      	movs	r1, #14
 80128aa:	a80a      	add	r0, sp, #40	@ 0x28
 80128ac:	f001 f946 	bl	8013b3c <uxr_buffer_submessage_header>
 80128b0:	f001 f9a4 	bl	8013bfc <uxr_nanos>
 80128b4:	a31c      	add	r3, pc, #112	@ (adr r3, 8012928 <uxr_sync_session+0xa0>)
 80128b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80128ba:	460e      	mov	r6, r1
 80128bc:	4607      	mov	r7, r0
 80128be:	f7ee f9dd 	bl	8000c7c <__aeabi_ldivmod>
 80128c2:	4631      	mov	r1, r6
 80128c4:	9003      	str	r0, [sp, #12]
 80128c6:	a318      	add	r3, pc, #96	@ (adr r3, 8012928 <uxr_sync_session+0xa0>)
 80128c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80128cc:	4638      	mov	r0, r7
 80128ce:	f7ee f9d5 	bl	8000c7c <__aeabi_ldivmod>
 80128d2:	a903      	add	r1, sp, #12
 80128d4:	a80a      	add	r0, sp, #40	@ 0x28
 80128d6:	9204      	str	r2, [sp, #16]
 80128d8:	f002 fb3c 	bl	8014f54 <uxr_serialize_TIMESTAMP_Payload>
 80128dc:	2200      	movs	r2, #0
 80128de:	4611      	mov	r1, r2
 80128e0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80128e2:	4620      	mov	r0, r4
 80128e4:	f000 fad2 	bl	8012e8c <uxr_stamp_session_header>
 80128e8:	a80a      	add	r0, sp, #40	@ 0x28
 80128ea:	f7fb fe4d 	bl	800e588 <ucdr_buffer_length>
 80128ee:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 80128f0:	4602      	mov	r2, r0
 80128f2:	a905      	add	r1, sp, #20
 80128f4:	e9d3 0600 	ldrd	r0, r6, [r3]
 80128f8:	47b0      	blx	r6
 80128fa:	f001 f965 	bl	8013bc8 <uxr_millis>
 80128fe:	2300      	movs	r3, #0
 8012900:	4606      	mov	r6, r0
 8012902:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
 8012906:	4629      	mov	r1, r5
 8012908:	e000      	b.n	801290c <uxr_sync_session+0x84>
 801290a:	b950      	cbnz	r0, 8012922 <uxr_sync_session+0x9a>
 801290c:	4620      	mov	r0, r4
 801290e:	f7ff fdc9 	bl	80124a4 <listen_message_reliably>
 8012912:	f001 f959 	bl	8013bc8 <uxr_millis>
 8012916:	1b83      	subs	r3, r0, r6
 8012918:	1ae9      	subs	r1, r5, r3
 801291a:	2900      	cmp	r1, #0
 801291c:	f894 00a0 	ldrb.w	r0, [r4, #160]	@ 0xa0
 8012920:	dcf3      	bgt.n	801290a <uxr_sync_session+0x82>
 8012922:	b013      	add	sp, #76	@ 0x4c
 8012924:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012926:	bf00      	nop
 8012928:	3b9aca00 	.word	0x3b9aca00
 801292c:	00000000 	.word	0x00000000

08012930 <wait_session_status>:
 8012930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012934:	4604      	mov	r4, r0
 8012936:	b09d      	sub	sp, #116	@ 0x74
 8012938:	20ff      	movs	r0, #255	@ 0xff
 801293a:	7160      	strb	r0, [r4, #5]
 801293c:	9303      	str	r3, [sp, #12]
 801293e:	2b00      	cmp	r3, #0
 8012940:	f000 80b6 	beq.w	8012ab0 <wait_session_status+0x180>
 8012944:	468a      	mov	sl, r1
 8012946:	4691      	mov	r9, r2
 8012948:	f04f 0b00 	mov.w	fp, #0
 801294c:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801294e:	464a      	mov	r2, r9
 8012950:	e9d3 0500 	ldrd	r0, r5, [r3]
 8012954:	4651      	mov	r1, sl
 8012956:	47a8      	blx	r5
 8012958:	f001 f936 	bl	8013bc8 <uxr_millis>
 801295c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8012960:	4605      	mov	r5, r0
 8012962:	e009      	b.n	8012978 <wait_session_status+0x48>
 8012964:	f001 f930 	bl	8013bc8 <uxr_millis>
 8012968:	1b40      	subs	r0, r0, r5
 801296a:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 801296e:	2b00      	cmp	r3, #0
 8012970:	dd40      	ble.n	80129f4 <wait_session_status+0xc4>
 8012972:	7960      	ldrb	r0, [r4, #5]
 8012974:	28ff      	cmp	r0, #255	@ 0xff
 8012976:	d145      	bne.n	8012a04 <wait_session_status+0xd4>
 8012978:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 801297a:	a908      	add	r1, sp, #32
 801297c:	6896      	ldr	r6, [r2, #8]
 801297e:	6810      	ldr	r0, [r2, #0]
 8012980:	aa09      	add	r2, sp, #36	@ 0x24
 8012982:	47b0      	blx	r6
 8012984:	2800      	cmp	r0, #0
 8012986:	d0ed      	beq.n	8012964 <wait_session_status+0x34>
 8012988:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 801298c:	a80c      	add	r0, sp, #48	@ 0x30
 801298e:	f7fb fdcf 	bl	800e530 <ucdr_init_buffer>
 8012992:	2600      	movs	r6, #0
 8012994:	f10d 031e 	add.w	r3, sp, #30
 8012998:	aa07      	add	r2, sp, #28
 801299a:	a90c      	add	r1, sp, #48	@ 0x30
 801299c:	4620      	mov	r0, r4
 801299e:	f88d 601c 	strb.w	r6, [sp, #28]
 80129a2:	f000 fa87 	bl	8012eb4 <uxr_read_session_header>
 80129a6:	2800      	cmp	r0, #0
 80129a8:	d0dc      	beq.n	8012964 <wait_session_status+0x34>
 80129aa:	4631      	mov	r1, r6
 80129ac:	f89d 001c 	ldrb.w	r0, [sp, #28]
 80129b0:	f000 ffb6 	bl	8013920 <uxr_stream_id_from_raw>
 80129b4:	f3c0 4707 	ubfx	r7, r0, #16, #8
 80129b8:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 80129bc:	9302      	str	r3, [sp, #8]
 80129be:	2f01      	cmp	r7, #1
 80129c0:	e9cd 000a 	strd	r0, r0, [sp, #40]	@ 0x28
 80129c4:	f3c0 2607 	ubfx	r6, r0, #8, #8
 80129c8:	d05c      	beq.n	8012a84 <wait_session_status+0x154>
 80129ca:	2f02      	cmp	r7, #2
 80129cc:	d020      	beq.n	8012a10 <wait_session_status+0xe0>
 80129ce:	2f00      	cmp	r7, #0
 80129d0:	d1c8      	bne.n	8012964 <wait_session_status+0x34>
 80129d2:	4639      	mov	r1, r7
 80129d4:	4638      	mov	r0, r7
 80129d6:	f000 ffa3 	bl	8013920 <uxr_stream_id_from_raw>
 80129da:	a90c      	add	r1, sp, #48	@ 0x30
 80129dc:	4602      	mov	r2, r0
 80129de:	900b      	str	r0, [sp, #44]	@ 0x2c
 80129e0:	4620      	mov	r0, r4
 80129e2:	f7ff fbd7 	bl	8012194 <read_submessage_list>
 80129e6:	f001 f8ef 	bl	8013bc8 <uxr_millis>
 80129ea:	1b40      	subs	r0, r0, r5
 80129ec:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 80129f0:	2b00      	cmp	r3, #0
 80129f2:	dcbe      	bgt.n	8012972 <wait_session_status+0x42>
 80129f4:	9b03      	ldr	r3, [sp, #12]
 80129f6:	7960      	ldrb	r0, [r4, #5]
 80129f8:	f10b 0b01 	add.w	fp, fp, #1
 80129fc:	455b      	cmp	r3, fp
 80129fe:	d001      	beq.n	8012a04 <wait_session_status+0xd4>
 8012a00:	28ff      	cmp	r0, #255	@ 0xff
 8012a02:	d0a3      	beq.n	801294c <wait_session_status+0x1c>
 8012a04:	38ff      	subs	r0, #255	@ 0xff
 8012a06:	bf18      	it	ne
 8012a08:	2001      	movne	r0, #1
 8012a0a:	b01d      	add	sp, #116	@ 0x74
 8012a0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012a10:	f89d 3028 	ldrb.w	r3, [sp, #40]	@ 0x28
 8012a14:	9304      	str	r3, [sp, #16]
 8012a16:	4631      	mov	r1, r6
 8012a18:	f104 0008 	add.w	r0, r4, #8
 8012a1c:	f001 f86e 	bl	8013afc <uxr_get_input_reliable_stream>
 8012a20:	4680      	mov	r8, r0
 8012a22:	b348      	cbz	r0, 8012a78 <wait_session_status+0x148>
 8012a24:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8012a26:	9205      	str	r2, [sp, #20]
 8012a28:	a80c      	add	r0, sp, #48	@ 0x30
 8012a2a:	f7fb fdb1 	bl	800e590 <ucdr_buffer_remaining>
 8012a2e:	4603      	mov	r3, r0
 8012a30:	f10d 001d 	add.w	r0, sp, #29
 8012a34:	9000      	str	r0, [sp, #0]
 8012a36:	9a05      	ldr	r2, [sp, #20]
 8012a38:	9902      	ldr	r1, [sp, #8]
 8012a3a:	4640      	mov	r0, r8
 8012a3c:	f006 fe9c 	bl	8019778 <uxr_receive_reliable_message>
 8012a40:	b1d0      	cbz	r0, 8012a78 <wait_session_status+0x148>
 8012a42:	f89d 301d 	ldrb.w	r3, [sp, #29]
 8012a46:	2b00      	cmp	r3, #0
 8012a48:	d03a      	beq.n	8012ac0 <wait_session_status+0x190>
 8012a4a:	9f04      	ldr	r7, [sp, #16]
 8012a4c:	e00a      	b.n	8012a64 <wait_session_status+0x134>
 8012a4e:	f04f 0302 	mov.w	r3, #2
 8012a52:	f88d 702c 	strb.w	r7, [sp, #44]	@ 0x2c
 8012a56:	f88d 602d 	strb.w	r6, [sp, #45]	@ 0x2d
 8012a5a:	f88d 302e 	strb.w	r3, [sp, #46]	@ 0x2e
 8012a5e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8012a60:	f7ff fb98 	bl	8012194 <read_submessage_list>
 8012a64:	a914      	add	r1, sp, #80	@ 0x50
 8012a66:	2204      	movs	r2, #4
 8012a68:	4640      	mov	r0, r8
 8012a6a:	f006 ff05 	bl	8019878 <uxr_next_input_reliable_buffer_available>
 8012a6e:	4603      	mov	r3, r0
 8012a70:	a914      	add	r1, sp, #80	@ 0x50
 8012a72:	4620      	mov	r0, r4
 8012a74:	2b00      	cmp	r3, #0
 8012a76:	d1ea      	bne.n	8012a4e <wait_session_status+0x11e>
 8012a78:	9904      	ldr	r1, [sp, #16]
 8012a7a:	4632      	mov	r2, r6
 8012a7c:	4620      	mov	r0, r4
 8012a7e:	f7ff fa03 	bl	8011e88 <write_submessage_acknack.isra.0>
 8012a82:	e76f      	b.n	8012964 <wait_session_status+0x34>
 8012a84:	4631      	mov	r1, r6
 8012a86:	f104 0008 	add.w	r0, r4, #8
 8012a8a:	f001 f82d 	bl	8013ae8 <uxr_get_input_best_effort_stream>
 8012a8e:	2800      	cmp	r0, #0
 8012a90:	f43f af68 	beq.w	8012964 <wait_session_status+0x34>
 8012a94:	9902      	ldr	r1, [sp, #8]
 8012a96:	f006 fddb 	bl	8019650 <uxr_receive_best_effort_message>
 8012a9a:	2800      	cmp	r0, #0
 8012a9c:	f43f af62 	beq.w	8012964 <wait_session_status+0x34>
 8012aa0:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 8012aa4:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8012aa6:	a90c      	add	r1, sp, #48	@ 0x30
 8012aa8:	4620      	mov	r0, r4
 8012aaa:	f7ff fb73 	bl	8012194 <read_submessage_list>
 8012aae:	e759      	b.n	8012964 <wait_session_status+0x34>
 8012ab0:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8012ab2:	e9d3 0400 	ldrd	r0, r4, [r3]
 8012ab6:	47a0      	blx	r4
 8012ab8:	2001      	movs	r0, #1
 8012aba:	b01d      	add	sp, #116	@ 0x74
 8012abc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012ac0:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 8012ac4:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8012ac6:	a90c      	add	r1, sp, #48	@ 0x30
 8012ac8:	4620      	mov	r0, r4
 8012aca:	f7ff fb63 	bl	8012194 <read_submessage_list>
 8012ace:	e7bc      	b.n	8012a4a <wait_session_status+0x11a>

08012ad0 <uxr_delete_session_retries>:
 8012ad0:	b530      	push	{r4, r5, lr}
 8012ad2:	b08f      	sub	sp, #60	@ 0x3c
 8012ad4:	4604      	mov	r4, r0
 8012ad6:	460d      	mov	r5, r1
 8012ad8:	f000 fa2e 	bl	8012f38 <uxr_session_header_offset>
 8012adc:	2300      	movs	r3, #0
 8012ade:	2210      	movs	r2, #16
 8012ae0:	9000      	str	r0, [sp, #0]
 8012ae2:	a902      	add	r1, sp, #8
 8012ae4:	a806      	add	r0, sp, #24
 8012ae6:	f7fb fd11 	bl	800e50c <ucdr_init_buffer_origin_offset>
 8012aea:	a906      	add	r1, sp, #24
 8012aec:	4620      	mov	r0, r4
 8012aee:	f000 f973 	bl	8012dd8 <uxr_buffer_delete_session>
 8012af2:	2200      	movs	r2, #0
 8012af4:	4611      	mov	r1, r2
 8012af6:	9b06      	ldr	r3, [sp, #24]
 8012af8:	4620      	mov	r0, r4
 8012afa:	f000 f9c7 	bl	8012e8c <uxr_stamp_session_header>
 8012afe:	a806      	add	r0, sp, #24
 8012b00:	f7fb fd42 	bl	800e588 <ucdr_buffer_length>
 8012b04:	462b      	mov	r3, r5
 8012b06:	4602      	mov	r2, r0
 8012b08:	a902      	add	r1, sp, #8
 8012b0a:	4620      	mov	r0, r4
 8012b0c:	f7ff ff10 	bl	8012930 <wait_session_status>
 8012b10:	b118      	cbz	r0, 8012b1a <uxr_delete_session_retries+0x4a>
 8012b12:	7960      	ldrb	r0, [r4, #5]
 8012b14:	fab0 f080 	clz	r0, r0
 8012b18:	0940      	lsrs	r0, r0, #5
 8012b1a:	b00f      	add	sp, #60	@ 0x3c
 8012b1c:	bd30      	pop	{r4, r5, pc}
 8012b1e:	bf00      	nop

08012b20 <uxr_create_session>:
 8012b20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012b24:	f100 0b08 	add.w	fp, r0, #8
 8012b28:	b0ab      	sub	sp, #172	@ 0xac
 8012b2a:	4604      	mov	r4, r0
 8012b2c:	4658      	mov	r0, fp
 8012b2e:	f000 ff2b 	bl	8013988 <uxr_reset_stream_storage>
 8012b32:	4620      	mov	r0, r4
 8012b34:	f000 fa00 	bl	8012f38 <uxr_session_header_offset>
 8012b38:	2300      	movs	r3, #0
 8012b3a:	9000      	str	r0, [sp, #0]
 8012b3c:	221c      	movs	r2, #28
 8012b3e:	a90b      	add	r1, sp, #44	@ 0x2c
 8012b40:	a812      	add	r0, sp, #72	@ 0x48
 8012b42:	f7fb fce3 	bl	800e50c <ucdr_init_buffer_origin_offset>
 8012b46:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8012b48:	8a1a      	ldrh	r2, [r3, #16]
 8012b4a:	3a04      	subs	r2, #4
 8012b4c:	b292      	uxth	r2, r2
 8012b4e:	a912      	add	r1, sp, #72	@ 0x48
 8012b50:	4620      	mov	r0, r4
 8012b52:	f000 f917 	bl	8012d84 <uxr_buffer_create_session>
 8012b56:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8012b58:	4620      	mov	r0, r4
 8012b5a:	f000 f983 	bl	8012e64 <uxr_stamp_create_session_header>
 8012b5e:	a812      	add	r0, sp, #72	@ 0x48
 8012b60:	f7fb fd12 	bl	800e588 <ucdr_buffer_length>
 8012b64:	23ff      	movs	r3, #255	@ 0xff
 8012b66:	7163      	strb	r3, [r4, #5]
 8012b68:	230a      	movs	r3, #10
 8012b6a:	46da      	mov	sl, fp
 8012b6c:	9303      	str	r3, [sp, #12]
 8012b6e:	4683      	mov	fp, r0
 8012b70:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8012b72:	465a      	mov	r2, fp
 8012b74:	e9d3 0500 	ldrd	r0, r5, [r3]
 8012b78:	a90b      	add	r1, sp, #44	@ 0x2c
 8012b7a:	47a8      	blx	r5
 8012b7c:	f001 f824 	bl	8013bc8 <uxr_millis>
 8012b80:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8012b84:	4605      	mov	r5, r0
 8012b86:	e009      	b.n	8012b9c <uxr_create_session+0x7c>
 8012b88:	f001 f81e 	bl	8013bc8 <uxr_millis>
 8012b8c:	1b40      	subs	r0, r0, r5
 8012b8e:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 8012b92:	2b00      	cmp	r3, #0
 8012b94:	7962      	ldrb	r2, [r4, #5]
 8012b96:	dd38      	ble.n	8012c0a <uxr_create_session+0xea>
 8012b98:	2aff      	cmp	r2, #255	@ 0xff
 8012b9a:	d13c      	bne.n	8012c16 <uxr_create_session+0xf6>
 8012b9c:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 8012b9e:	a907      	add	r1, sp, #28
 8012ba0:	6896      	ldr	r6, [r2, #8]
 8012ba2:	6810      	ldr	r0, [r2, #0]
 8012ba4:	aa08      	add	r2, sp, #32
 8012ba6:	47b0      	blx	r6
 8012ba8:	2800      	cmp	r0, #0
 8012baa:	d0ed      	beq.n	8012b88 <uxr_create_session+0x68>
 8012bac:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 8012bb0:	a81a      	add	r0, sp, #104	@ 0x68
 8012bb2:	f7fb fcbd 	bl	800e530 <ucdr_init_buffer>
 8012bb6:	2600      	movs	r6, #0
 8012bb8:	f10d 031a 	add.w	r3, sp, #26
 8012bbc:	aa06      	add	r2, sp, #24
 8012bbe:	a91a      	add	r1, sp, #104	@ 0x68
 8012bc0:	4620      	mov	r0, r4
 8012bc2:	f88d 6018 	strb.w	r6, [sp, #24]
 8012bc6:	f000 f975 	bl	8012eb4 <uxr_read_session_header>
 8012bca:	2800      	cmp	r0, #0
 8012bcc:	d0dc      	beq.n	8012b88 <uxr_create_session+0x68>
 8012bce:	4631      	mov	r1, r6
 8012bd0:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8012bd4:	f000 fea4 	bl	8013920 <uxr_stream_id_from_raw>
 8012bd8:	f3c0 4607 	ubfx	r6, r0, #16, #8
 8012bdc:	2e01      	cmp	r6, #1
 8012bde:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 8012be2:	f8bd 901a 	ldrh.w	r9, [sp, #26]
 8012be6:	f3c0 2707 	ubfx	r7, r0, #8, #8
 8012bea:	d053      	beq.n	8012c94 <uxr_create_session+0x174>
 8012bec:	2e02      	cmp	r6, #2
 8012bee:	d018      	beq.n	8012c22 <uxr_create_session+0x102>
 8012bf0:	2e00      	cmp	r6, #0
 8012bf2:	d1c9      	bne.n	8012b88 <uxr_create_session+0x68>
 8012bf4:	4631      	mov	r1, r6
 8012bf6:	4630      	mov	r0, r6
 8012bf8:	f000 fe92 	bl	8013920 <uxr_stream_id_from_raw>
 8012bfc:	a91a      	add	r1, sp, #104	@ 0x68
 8012bfe:	4602      	mov	r2, r0
 8012c00:	900a      	str	r0, [sp, #40]	@ 0x28
 8012c02:	4620      	mov	r0, r4
 8012c04:	f7ff fac6 	bl	8012194 <read_submessage_list>
 8012c08:	e7be      	b.n	8012b88 <uxr_create_session+0x68>
 8012c0a:	9b03      	ldr	r3, [sp, #12]
 8012c0c:	3b01      	subs	r3, #1
 8012c0e:	9303      	str	r3, [sp, #12]
 8012c10:	d001      	beq.n	8012c16 <uxr_create_session+0xf6>
 8012c12:	2aff      	cmp	r2, #255	@ 0xff
 8012c14:	d0ac      	beq.n	8012b70 <uxr_create_session+0x50>
 8012c16:	2a00      	cmp	r2, #0
 8012c18:	d051      	beq.n	8012cbe <uxr_create_session+0x19e>
 8012c1a:	2000      	movs	r0, #0
 8012c1c:	b02b      	add	sp, #172	@ 0xac
 8012c1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012c22:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 8012c26:	9304      	str	r3, [sp, #16]
 8012c28:	4639      	mov	r1, r7
 8012c2a:	4650      	mov	r0, sl
 8012c2c:	f000 ff66 	bl	8013afc <uxr_get_input_reliable_stream>
 8012c30:	4680      	mov	r8, r0
 8012c32:	b348      	cbz	r0, 8012c88 <uxr_create_session+0x168>
 8012c34:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8012c36:	9205      	str	r2, [sp, #20]
 8012c38:	a81a      	add	r0, sp, #104	@ 0x68
 8012c3a:	f7fb fca9 	bl	800e590 <ucdr_buffer_remaining>
 8012c3e:	4603      	mov	r3, r0
 8012c40:	f10d 0019 	add.w	r0, sp, #25
 8012c44:	9000      	str	r0, [sp, #0]
 8012c46:	9a05      	ldr	r2, [sp, #20]
 8012c48:	4649      	mov	r1, r9
 8012c4a:	4640      	mov	r0, r8
 8012c4c:	f006 fd94 	bl	8019778 <uxr_receive_reliable_message>
 8012c50:	b1d0      	cbz	r0, 8012c88 <uxr_create_session+0x168>
 8012c52:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8012c56:	2b00      	cmp	r3, #0
 8012c58:	d038      	beq.n	8012ccc <uxr_create_session+0x1ac>
 8012c5a:	9e04      	ldr	r6, [sp, #16]
 8012c5c:	e00a      	b.n	8012c74 <uxr_create_session+0x154>
 8012c5e:	f04f 0302 	mov.w	r3, #2
 8012c62:	f88d 6028 	strb.w	r6, [sp, #40]	@ 0x28
 8012c66:	f88d 7029 	strb.w	r7, [sp, #41]	@ 0x29
 8012c6a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8012c6e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8012c70:	f7ff fa90 	bl	8012194 <read_submessage_list>
 8012c74:	a922      	add	r1, sp, #136	@ 0x88
 8012c76:	2204      	movs	r2, #4
 8012c78:	4640      	mov	r0, r8
 8012c7a:	f006 fdfd 	bl	8019878 <uxr_next_input_reliable_buffer_available>
 8012c7e:	4603      	mov	r3, r0
 8012c80:	a922      	add	r1, sp, #136	@ 0x88
 8012c82:	4620      	mov	r0, r4
 8012c84:	2b00      	cmp	r3, #0
 8012c86:	d1ea      	bne.n	8012c5e <uxr_create_session+0x13e>
 8012c88:	9904      	ldr	r1, [sp, #16]
 8012c8a:	463a      	mov	r2, r7
 8012c8c:	4620      	mov	r0, r4
 8012c8e:	f7ff f8fb 	bl	8011e88 <write_submessage_acknack.isra.0>
 8012c92:	e779      	b.n	8012b88 <uxr_create_session+0x68>
 8012c94:	4639      	mov	r1, r7
 8012c96:	4650      	mov	r0, sl
 8012c98:	f000 ff26 	bl	8013ae8 <uxr_get_input_best_effort_stream>
 8012c9c:	2800      	cmp	r0, #0
 8012c9e:	f43f af73 	beq.w	8012b88 <uxr_create_session+0x68>
 8012ca2:	4649      	mov	r1, r9
 8012ca4:	f006 fcd4 	bl	8019650 <uxr_receive_best_effort_message>
 8012ca8:	2800      	cmp	r0, #0
 8012caa:	f43f af6d 	beq.w	8012b88 <uxr_create_session+0x68>
 8012cae:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 8012cb2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8012cb4:	a91a      	add	r1, sp, #104	@ 0x68
 8012cb6:	4620      	mov	r0, r4
 8012cb8:	f7ff fa6c 	bl	8012194 <read_submessage_list>
 8012cbc:	e764      	b.n	8012b88 <uxr_create_session+0x68>
 8012cbe:	4650      	mov	r0, sl
 8012cc0:	f000 fe62 	bl	8013988 <uxr_reset_stream_storage>
 8012cc4:	2001      	movs	r0, #1
 8012cc6:	b02b      	add	sp, #172	@ 0xac
 8012cc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012ccc:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 8012cd0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8012cd2:	a91a      	add	r1, sp, #104	@ 0x68
 8012cd4:	4620      	mov	r0, r4
 8012cd6:	f7ff fa5d 	bl	8012194 <read_submessage_list>
 8012cda:	e7be      	b.n	8012c5a <uxr_create_session+0x13a>

08012cdc <uxr_prepare_stream_to_write_submessage>:
 8012cdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012ce0:	b082      	sub	sp, #8
 8012ce2:	4682      	mov	sl, r0
 8012ce4:	4610      	mov	r0, r2
 8012ce6:	4615      	mov	r5, r2
 8012ce8:	461e      	mov	r6, r3
 8012cea:	f89d 7028 	ldrb.w	r7, [sp, #40]	@ 0x28
 8012cee:	f89d 802c 	ldrb.w	r8, [sp, #44]	@ 0x2c
 8012cf2:	9101      	str	r1, [sp, #4]
 8012cf4:	f3c1 2407 	ubfx	r4, r1, #8, #8
 8012cf8:	f000 ff60 	bl	8013bbc <uxr_submessage_padding>
 8012cfc:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8012d00:	f105 0904 	add.w	r9, r5, #4
 8012d04:	2b01      	cmp	r3, #1
 8012d06:	4481      	add	r9, r0
 8012d08:	d01d      	beq.n	8012d46 <uxr_prepare_stream_to_write_submessage+0x6a>
 8012d0a:	2b02      	cmp	r3, #2
 8012d0c:	d116      	bne.n	8012d3c <uxr_prepare_stream_to_write_submessage+0x60>
 8012d0e:	4621      	mov	r1, r4
 8012d10:	f10a 0008 	add.w	r0, sl, #8
 8012d14:	f000 fede 	bl	8013ad4 <uxr_get_output_reliable_stream>
 8012d18:	4604      	mov	r4, r0
 8012d1a:	b158      	cbz	r0, 8012d34 <uxr_prepare_stream_to_write_submessage+0x58>
 8012d1c:	4649      	mov	r1, r9
 8012d1e:	4632      	mov	r2, r6
 8012d20:	f006 ff66 	bl	8019bf0 <uxr_prepare_reliable_buffer_to_write>
 8012d24:	4604      	mov	r4, r0
 8012d26:	b12c      	cbz	r4, 8012d34 <uxr_prepare_stream_to_write_submessage+0x58>
 8012d28:	4643      	mov	r3, r8
 8012d2a:	b2aa      	uxth	r2, r5
 8012d2c:	4639      	mov	r1, r7
 8012d2e:	4630      	mov	r0, r6
 8012d30:	f000 ff04 	bl	8013b3c <uxr_buffer_submessage_header>
 8012d34:	4620      	mov	r0, r4
 8012d36:	b002      	add	sp, #8
 8012d38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012d3c:	2400      	movs	r4, #0
 8012d3e:	4620      	mov	r0, r4
 8012d40:	b002      	add	sp, #8
 8012d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012d46:	4621      	mov	r1, r4
 8012d48:	f10a 0008 	add.w	r0, sl, #8
 8012d4c:	f000 feba 	bl	8013ac4 <uxr_get_output_best_effort_stream>
 8012d50:	4604      	mov	r4, r0
 8012d52:	2800      	cmp	r0, #0
 8012d54:	d0ee      	beq.n	8012d34 <uxr_prepare_stream_to_write_submessage+0x58>
 8012d56:	4649      	mov	r1, r9
 8012d58:	4632      	mov	r2, r6
 8012d5a:	f006 fe79 	bl	8019a50 <uxr_prepare_best_effort_buffer_to_write>
 8012d5e:	4604      	mov	r4, r0
 8012d60:	e7e1      	b.n	8012d26 <uxr_prepare_stream_to_write_submessage+0x4a>
 8012d62:	bf00      	nop

08012d64 <uxr_init_session_info>:
 8012d64:	0e13      	lsrs	r3, r2, #24
 8012d66:	7043      	strb	r3, [r0, #1]
 8012d68:	f3c2 2307 	ubfx	r3, r2, #8, #8
 8012d6c:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 8012d70:	7001      	strb	r1, [r0, #0]
 8012d72:	70c3      	strb	r3, [r0, #3]
 8012d74:	2109      	movs	r1, #9
 8012d76:	23ff      	movs	r3, #255	@ 0xff
 8012d78:	f880 c002 	strb.w	ip, [r0, #2]
 8012d7c:	7102      	strb	r2, [r0, #4]
 8012d7e:	80c1      	strh	r1, [r0, #6]
 8012d80:	7143      	strb	r3, [r0, #5]
 8012d82:	4770      	bx	lr

08012d84 <uxr_buffer_create_session>:
 8012d84:	b530      	push	{r4, r5, lr}
 8012d86:	b089      	sub	sp, #36	@ 0x24
 8012d88:	2300      	movs	r3, #0
 8012d8a:	4d12      	ldr	r5, [pc, #72]	@ (8012dd4 <uxr_buffer_create_session+0x50>)
 8012d8c:	9307      	str	r3, [sp, #28]
 8012d8e:	f8ad 201c 	strh.w	r2, [sp, #28]
 8012d92:	2201      	movs	r2, #1
 8012d94:	9301      	str	r3, [sp, #4]
 8012d96:	80c2      	strh	r2, [r0, #6]
 8012d98:	f88d 2004 	strb.w	r2, [sp, #4]
 8012d9c:	682a      	ldr	r2, [r5, #0]
 8012d9e:	9200      	str	r2, [sp, #0]
 8012da0:	88aa      	ldrh	r2, [r5, #4]
 8012da2:	f8ad 2006 	strh.w	r2, [sp, #6]
 8012da6:	f8d0 2001 	ldr.w	r2, [r0, #1]
 8012daa:	9202      	str	r2, [sp, #8]
 8012dac:	460c      	mov	r4, r1
 8012dae:	7802      	ldrb	r2, [r0, #0]
 8012db0:	9303      	str	r3, [sp, #12]
 8012db2:	4619      	mov	r1, r3
 8012db4:	f88d 200c 	strb.w	r2, [sp, #12]
 8012db8:	4620      	mov	r0, r4
 8012dba:	2210      	movs	r2, #16
 8012dbc:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8012dc0:	9306      	str	r3, [sp, #24]
 8012dc2:	f000 febb 	bl	8013b3c <uxr_buffer_submessage_header>
 8012dc6:	4669      	mov	r1, sp
 8012dc8:	4620      	mov	r0, r4
 8012dca:	f001 feff 	bl	8014bcc <uxr_serialize_CREATE_CLIENT_Payload>
 8012dce:	b009      	add	sp, #36	@ 0x24
 8012dd0:	bd30      	pop	{r4, r5, pc}
 8012dd2:	bf00      	nop
 8012dd4:	0801d4e8 	.word	0x0801d4e8

08012dd8 <uxr_buffer_delete_session>:
 8012dd8:	b510      	push	{r4, lr}
 8012dda:	4b0c      	ldr	r3, [pc, #48]	@ (8012e0c <uxr_buffer_delete_session+0x34>)
 8012ddc:	b082      	sub	sp, #8
 8012dde:	f8b3 c008 	ldrh.w	ip, [r3, #8]
 8012de2:	f8ad c006 	strh.w	ip, [sp, #6]
 8012de6:	460c      	mov	r4, r1
 8012de8:	2202      	movs	r2, #2
 8012dea:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8012dee:	80c2      	strh	r2, [r0, #6]
 8012df0:	f8ad 3004 	strh.w	r3, [sp, #4]
 8012df4:	2204      	movs	r2, #4
 8012df6:	2300      	movs	r3, #0
 8012df8:	2103      	movs	r1, #3
 8012dfa:	4620      	mov	r0, r4
 8012dfc:	f000 fe9e 	bl	8013b3c <uxr_buffer_submessage_header>
 8012e00:	a901      	add	r1, sp, #4
 8012e02:	4620      	mov	r0, r4
 8012e04:	f001 ff88 	bl	8014d18 <uxr_serialize_DELETE_Payload>
 8012e08:	b002      	add	sp, #8
 8012e0a:	bd10      	pop	{r4, pc}
 8012e0c:	0801d4e8 	.word	0x0801d4e8

08012e10 <uxr_read_create_session_status>:
 8012e10:	b510      	push	{r4, lr}
 8012e12:	b088      	sub	sp, #32
 8012e14:	4604      	mov	r4, r0
 8012e16:	4608      	mov	r0, r1
 8012e18:	a901      	add	r1, sp, #4
 8012e1a:	f001 ff8d 	bl	8014d38 <uxr_deserialize_STATUS_AGENT_Payload>
 8012e1e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8012e22:	7163      	strb	r3, [r4, #5]
 8012e24:	b008      	add	sp, #32
 8012e26:	bd10      	pop	{r4, pc}

08012e28 <uxr_read_delete_session_status>:
 8012e28:	b510      	push	{r4, lr}
 8012e2a:	4604      	mov	r4, r0
 8012e2c:	b084      	sub	sp, #16
 8012e2e:	4608      	mov	r0, r1
 8012e30:	a902      	add	r1, sp, #8
 8012e32:	f001 ffb1 	bl	8014d98 <uxr_deserialize_STATUS_Payload>
 8012e36:	88e3      	ldrh	r3, [r4, #6]
 8012e38:	2b02      	cmp	r3, #2
 8012e3a:	d001      	beq.n	8012e40 <uxr_read_delete_session_status+0x18>
 8012e3c:	b004      	add	sp, #16
 8012e3e:	bd10      	pop	{r4, pc}
 8012e40:	f10d 000a 	add.w	r0, sp, #10
 8012e44:	f7fe fe76 	bl	8011b34 <uxr_object_id_from_raw>
 8012e48:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8012e4c:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8012e50:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8012e54:	b29b      	uxth	r3, r3
 8012e56:	2b02      	cmp	r3, #2
 8012e58:	bf04      	itt	eq
 8012e5a:	f89d 300c 	ldrbeq.w	r3, [sp, #12]
 8012e5e:	7163      	strbeq	r3, [r4, #5]
 8012e60:	b004      	add	sp, #16
 8012e62:	bd10      	pop	{r4, pc}

08012e64 <uxr_stamp_create_session_header>:
 8012e64:	b510      	push	{r4, lr}
 8012e66:	2208      	movs	r2, #8
 8012e68:	b08a      	sub	sp, #40	@ 0x28
 8012e6a:	4604      	mov	r4, r0
 8012e6c:	eb0d 0002 	add.w	r0, sp, r2
 8012e70:	f7fb fb5e 	bl	800e530 <ucdr_init_buffer>
 8012e74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012e78:	9400      	str	r4, [sp, #0]
 8012e7a:	2300      	movs	r3, #0
 8012e7c:	461a      	mov	r2, r3
 8012e7e:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 8012e82:	a802      	add	r0, sp, #8
 8012e84:	f001 f854 	bl	8013f30 <uxr_serialize_message_header>
 8012e88:	b00a      	add	sp, #40	@ 0x28
 8012e8a:	bd10      	pop	{r4, pc}

08012e8c <uxr_stamp_session_header>:
 8012e8c:	b530      	push	{r4, r5, lr}
 8012e8e:	b08d      	sub	sp, #52	@ 0x34
 8012e90:	4604      	mov	r4, r0
 8012e92:	460d      	mov	r5, r1
 8012e94:	9203      	str	r2, [sp, #12]
 8012e96:	4619      	mov	r1, r3
 8012e98:	a804      	add	r0, sp, #16
 8012e9a:	2208      	movs	r2, #8
 8012e9c:	f7fb fb48 	bl	800e530 <ucdr_init_buffer>
 8012ea0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012ea4:	9b03      	ldr	r3, [sp, #12]
 8012ea6:	9400      	str	r4, [sp, #0]
 8012ea8:	462a      	mov	r2, r5
 8012eaa:	a804      	add	r0, sp, #16
 8012eac:	f001 f840 	bl	8013f30 <uxr_serialize_message_header>
 8012eb0:	b00d      	add	sp, #52	@ 0x34
 8012eb2:	bd30      	pop	{r4, r5, pc}

08012eb4 <uxr_read_session_header>:
 8012eb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012eb8:	4607      	mov	r7, r0
 8012eba:	b084      	sub	sp, #16
 8012ebc:	4608      	mov	r0, r1
 8012ebe:	460c      	mov	r4, r1
 8012ec0:	4615      	mov	r5, r2
 8012ec2:	461e      	mov	r6, r3
 8012ec4:	f7fb fb64 	bl	800e590 <ucdr_buffer_remaining>
 8012ec8:	2808      	cmp	r0, #8
 8012eca:	d803      	bhi.n	8012ed4 <uxr_read_session_header+0x20>
 8012ecc:	2000      	movs	r0, #0
 8012ece:	b004      	add	sp, #16
 8012ed0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012ed4:	f10d 080c 	add.w	r8, sp, #12
 8012ed8:	4633      	mov	r3, r6
 8012eda:	462a      	mov	r2, r5
 8012edc:	f8cd 8000 	str.w	r8, [sp]
 8012ee0:	4620      	mov	r0, r4
 8012ee2:	f10d 010b 	add.w	r1, sp, #11
 8012ee6:	f001 f841 	bl	8013f6c <uxr_deserialize_message_header>
 8012eea:	783a      	ldrb	r2, [r7, #0]
 8012eec:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8012ef0:	4293      	cmp	r3, r2
 8012ef2:	d1eb      	bne.n	8012ecc <uxr_read_session_header+0x18>
 8012ef4:	061b      	lsls	r3, r3, #24
 8012ef6:	d41c      	bmi.n	8012f32 <uxr_read_session_header+0x7e>
 8012ef8:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8012efc:	787b      	ldrb	r3, [r7, #1]
 8012efe:	429a      	cmp	r2, r3
 8012f00:	d003      	beq.n	8012f0a <uxr_read_session_header+0x56>
 8012f02:	2001      	movs	r0, #1
 8012f04:	f080 0001 	eor.w	r0, r0, #1
 8012f08:	e7e1      	b.n	8012ece <uxr_read_session_header+0x1a>
 8012f0a:	f89d 200d 	ldrb.w	r2, [sp, #13]
 8012f0e:	78bb      	ldrb	r3, [r7, #2]
 8012f10:	429a      	cmp	r2, r3
 8012f12:	f107 0102 	add.w	r1, r7, #2
 8012f16:	d1f4      	bne.n	8012f02 <uxr_read_session_header+0x4e>
 8012f18:	f89d 200e 	ldrb.w	r2, [sp, #14]
 8012f1c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8012f20:	429a      	cmp	r2, r3
 8012f22:	d1ee      	bne.n	8012f02 <uxr_read_session_header+0x4e>
 8012f24:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8012f28:	784b      	ldrb	r3, [r1, #1]
 8012f2a:	429a      	cmp	r2, r3
 8012f2c:	d1e9      	bne.n	8012f02 <uxr_read_session_header+0x4e>
 8012f2e:	2000      	movs	r0, #0
 8012f30:	e7e8      	b.n	8012f04 <uxr_read_session_header+0x50>
 8012f32:	2001      	movs	r0, #1
 8012f34:	e7cb      	b.n	8012ece <uxr_read_session_header+0x1a>
 8012f36:	bf00      	nop

08012f38 <uxr_session_header_offset>:
 8012f38:	f990 3000 	ldrsb.w	r3, [r0]
 8012f3c:	2b00      	cmp	r3, #0
 8012f3e:	bfac      	ite	ge
 8012f40:	2008      	movge	r0, #8
 8012f42:	2004      	movlt	r0, #4
 8012f44:	4770      	bx	lr
 8012f46:	bf00      	nop

08012f48 <uxr_init_base_object_request>:
 8012f48:	b510      	push	{r4, lr}
 8012f4a:	88c3      	ldrh	r3, [r0, #6]
 8012f4c:	b082      	sub	sp, #8
 8012f4e:	f64f 74f4 	movw	r4, #65524	@ 0xfff4
 8012f52:	9101      	str	r1, [sp, #4]
 8012f54:	f1a3 010a 	sub.w	r1, r3, #10
 8012f58:	b289      	uxth	r1, r1
 8012f5a:	42a1      	cmp	r1, r4
 8012f5c:	d80e      	bhi.n	8012f7c <uxr_init_base_object_request+0x34>
 8012f5e:	3301      	adds	r3, #1
 8012f60:	b29c      	uxth	r4, r3
 8012f62:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8012f66:	b2db      	uxtb	r3, r3
 8012f68:	80c4      	strh	r4, [r0, #6]
 8012f6a:	9801      	ldr	r0, [sp, #4]
 8012f6c:	7011      	strb	r1, [r2, #0]
 8012f6e:	7053      	strb	r3, [r2, #1]
 8012f70:	1c91      	adds	r1, r2, #2
 8012f72:	f7fe fdf3 	bl	8011b5c <uxr_object_id_to_raw>
 8012f76:	4620      	mov	r0, r4
 8012f78:	b002      	add	sp, #8
 8012f7a:	bd10      	pop	{r4, pc}
 8012f7c:	230a      	movs	r3, #10
 8012f7e:	2100      	movs	r1, #0
 8012f80:	461c      	mov	r4, r3
 8012f82:	e7f1      	b.n	8012f68 <uxr_init_base_object_request+0x20>

08012f84 <uxr_parse_base_object_request>:
 8012f84:	b570      	push	{r4, r5, r6, lr}
 8012f86:	4604      	mov	r4, r0
 8012f88:	3002      	adds	r0, #2
 8012f8a:	460d      	mov	r5, r1
 8012f8c:	4616      	mov	r6, r2
 8012f8e:	f7fe fdd1 	bl	8011b34 <uxr_object_id_from_raw>
 8012f92:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8012f96:	8028      	strh	r0, [r5, #0]
 8012f98:	806b      	strh	r3, [r5, #2]
 8012f9a:	7822      	ldrb	r2, [r4, #0]
 8012f9c:	7863      	ldrb	r3, [r4, #1]
 8012f9e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8012fa2:	8033      	strh	r3, [r6, #0]
 8012fa4:	bd70      	pop	{r4, r5, r6, pc}
 8012fa6:	bf00      	nop

08012fa8 <uxr_init_framing_io>:
 8012fa8:	2300      	movs	r3, #0
 8012faa:	7041      	strb	r1, [r0, #1]
 8012fac:	7003      	strb	r3, [r0, #0]
 8012fae:	8583      	strh	r3, [r0, #44]	@ 0x2c
 8012fb0:	4770      	bx	lr
 8012fb2:	bf00      	nop

08012fb4 <uxr_write_framed_msg>:
 8012fb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012fb8:	4617      	mov	r7, r2
 8012fba:	7842      	ldrb	r2, [r0, #1]
 8012fbc:	b083      	sub	sp, #12
 8012fbe:	460e      	mov	r6, r1
 8012fc0:	f1a2 017d 	sub.w	r1, r2, #125	@ 0x7d
 8012fc4:	469a      	mov	sl, r3
 8012fc6:	2901      	cmp	r1, #1
 8012fc8:	f04f 037e 	mov.w	r3, #126	@ 0x7e
 8012fcc:	4604      	mov	r4, r0
 8012fce:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
 8012fd2:	f8dd b038 	ldr.w	fp, [sp, #56]	@ 0x38
 8012fd6:	f89d 0034 	ldrb.w	r0, [sp, #52]	@ 0x34
 8012fda:	f240 8137 	bls.w	801324c <uxr_write_framed_msg+0x298>
 8012fde:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 8012fe2:	f884 2039 	strb.w	r2, [r4, #57]	@ 0x39
 8012fe6:	2901      	cmp	r1, #1
 8012fe8:	f04f 0202 	mov.w	r2, #2
 8012fec:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8012ff0:	f240 808f 	bls.w	8013112 <uxr_write_framed_msg+0x15e>
 8012ff4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012ff6:	f884 003a 	strb.w	r0, [r4, #58]	@ 0x3a
 8012ffa:	b2dd      	uxtb	r5, r3
 8012ffc:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 8013000:	2203      	movs	r2, #3
 8013002:	2901      	cmp	r1, #1
 8013004:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8013008:	f240 809a 	bls.w	8013140 <uxr_write_framed_msg+0x18c>
 801300c:	18a1      	adds	r1, r4, r2
 801300e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013010:	f881 5038 	strb.w	r5, [r1, #56]	@ 0x38
 8013014:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8013018:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 801301c:	3201      	adds	r2, #1
 801301e:	2801      	cmp	r0, #1
 8013020:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8013024:	f240 80a0 	bls.w	8013168 <uxr_write_framed_msg+0x1b4>
 8013028:	18a0      	adds	r0, r4, r2
 801302a:	3201      	adds	r2, #1
 801302c:	b2d2      	uxtb	r2, r2
 801302e:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 8013032:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8013036:	2b00      	cmp	r3, #0
 8013038:	f000 80a9 	beq.w	801318e <uxr_write_framed_msg+0x1da>
 801303c:	f04f 0900 	mov.w	r9, #0
 8013040:	46c8      	mov	r8, r9
 8013042:	f81a 3008 	ldrb.w	r3, [sl, r8]
 8013046:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 801304a:	2901      	cmp	r1, #1
 801304c:	f240 80c3 	bls.w	80131d6 <uxr_write_framed_msg+0x222>
 8013050:	2a29      	cmp	r2, #41	@ 0x29
 8013052:	f200 809f 	bhi.w	8013194 <uxr_write_framed_msg+0x1e0>
 8013056:	18a1      	adds	r1, r4, r2
 8013058:	3201      	adds	r2, #1
 801305a:	b2d2      	uxtb	r2, r2
 801305c:	f881 3038 	strb.w	r3, [r1, #56]	@ 0x38
 8013060:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8013064:	ea89 0303 	eor.w	r3, r9, r3
 8013068:	498c      	ldr	r1, [pc, #560]	@ (801329c <uxr_write_framed_msg+0x2e8>)
 801306a:	b2db      	uxtb	r3, r3
 801306c:	f108 0801 	add.w	r8, r8, #1
 8013070:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8013074:	ea83 2919 	eor.w	r9, r3, r9, lsr #8
 8013078:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801307a:	4543      	cmp	r3, r8
 801307c:	d8e1      	bhi.n	8013042 <uxr_write_framed_msg+0x8e>
 801307e:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8013082:	fa5f f889 	uxtb.w	r8, r9
 8013086:	9301      	str	r3, [sp, #4]
 8013088:	f04f 0900 	mov.w	r9, #0
 801308c:	f1a8 0a7d 	sub.w	sl, r8, #125	@ 0x7d
 8013090:	fa5f f18a 	uxtb.w	r1, sl
 8013094:	2901      	cmp	r1, #1
 8013096:	d921      	bls.n	80130dc <uxr_write_framed_msg+0x128>
 8013098:	2a29      	cmp	r2, #41	@ 0x29
 801309a:	f240 80af 	bls.w	80131fc <uxr_write_framed_msg+0x248>
 801309e:	2500      	movs	r5, #0
 80130a0:	e000      	b.n	80130a4 <uxr_write_framed_msg+0xf0>
 80130a2:	b160      	cbz	r0, 80130be <uxr_write_framed_msg+0x10a>
 80130a4:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 80130a8:	1b52      	subs	r2, r2, r5
 80130aa:	465b      	mov	r3, fp
 80130ac:	4421      	add	r1, r4
 80130ae:	4638      	mov	r0, r7
 80130b0:	47b0      	blx	r6
 80130b2:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 80130b6:	4405      	add	r5, r0
 80130b8:	4295      	cmp	r5, r2
 80130ba:	d3f2      	bcc.n	80130a2 <uxr_write_framed_msg+0xee>
 80130bc:	d003      	beq.n	80130c6 <uxr_write_framed_msg+0x112>
 80130be:	2000      	movs	r0, #0
 80130c0:	b003      	add	sp, #12
 80130c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80130c6:	fa5f f18a 	uxtb.w	r1, sl
 80130ca:	f04f 0300 	mov.w	r3, #0
 80130ce:	2901      	cmp	r1, #1
 80130d0:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 80130d4:	f04f 0200 	mov.w	r2, #0
 80130d8:	f200 8090 	bhi.w	80131fc <uxr_write_framed_msg+0x248>
 80130dc:	1c51      	adds	r1, r2, #1
 80130de:	b2c9      	uxtb	r1, r1
 80130e0:	2929      	cmp	r1, #41	@ 0x29
 80130e2:	d8dc      	bhi.n	801309e <uxr_write_framed_msg+0xea>
 80130e4:	18a5      	adds	r5, r4, r2
 80130e6:	4421      	add	r1, r4
 80130e8:	3202      	adds	r2, #2
 80130ea:	f088 0820 	eor.w	r8, r8, #32
 80130ee:	4648      	mov	r0, r9
 80130f0:	f04f 037d 	mov.w	r3, #125	@ 0x7d
 80130f4:	b2d2      	uxtb	r2, r2
 80130f6:	f885 3038 	strb.w	r3, [r5, #56]	@ 0x38
 80130fa:	f04f 0901 	mov.w	r9, #1
 80130fe:	f881 8038 	strb.w	r8, [r1, #56]	@ 0x38
 8013102:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8013106:	2800      	cmp	r0, #0
 8013108:	f040 8085 	bne.w	8013216 <uxr_write_framed_msg+0x262>
 801310c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8013110:	e7bc      	b.n	801308c <uxr_write_framed_msg+0xd8>
 8013112:	4611      	mov	r1, r2
 8013114:	f04f 0c03 	mov.w	ip, #3
 8013118:	2204      	movs	r2, #4
 801311a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801311c:	4421      	add	r1, r4
 801311e:	b2dd      	uxtb	r5, r3
 8013120:	f04f 0e7d 	mov.w	lr, #125	@ 0x7d
 8013124:	f881 e038 	strb.w	lr, [r1, #56]	@ 0x38
 8013128:	44a4      	add	ip, r4
 801312a:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 801312e:	f080 0020 	eor.w	r0, r0, #32
 8013132:	2901      	cmp	r1, #1
 8013134:	f88c 0038 	strb.w	r0, [ip, #56]	@ 0x38
 8013138:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801313c:	f63f af66 	bhi.w	801300c <uxr_write_framed_msg+0x58>
 8013140:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013142:	18a0      	adds	r0, r4, r2
 8013144:	f085 0520 	eor.w	r5, r5, #32
 8013148:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 801314c:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8013150:	f880 c038 	strb.w	ip, [r0, #56]	@ 0x38
 8013154:	f880 5039 	strb.w	r5, [r0, #57]	@ 0x39
 8013158:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 801315c:	3202      	adds	r2, #2
 801315e:	2801      	cmp	r0, #1
 8013160:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8013164:	f63f af60 	bhi.w	8013028 <uxr_write_framed_msg+0x74>
 8013168:	1c50      	adds	r0, r2, #1
 801316a:	18a5      	adds	r5, r4, r2
 801316c:	fa54 f080 	uxtab	r0, r4, r0
 8013170:	3202      	adds	r2, #2
 8013172:	f081 0120 	eor.w	r1, r1, #32
 8013176:	b2d2      	uxtb	r2, r2
 8013178:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 801317c:	f885 c038 	strb.w	ip, [r5, #56]	@ 0x38
 8013180:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 8013184:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8013188:	2b00      	cmp	r3, #0
 801318a:	f47f af57 	bne.w	801303c <uxr_write_framed_msg+0x88>
 801318e:	9301      	str	r3, [sp, #4]
 8013190:	4698      	mov	r8, r3
 8013192:	e779      	b.n	8013088 <uxr_write_framed_msg+0xd4>
 8013194:	2500      	movs	r5, #0
 8013196:	e001      	b.n	801319c <uxr_write_framed_msg+0x1e8>
 8013198:	2800      	cmp	r0, #0
 801319a:	d090      	beq.n	80130be <uxr_write_framed_msg+0x10a>
 801319c:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 80131a0:	1b52      	subs	r2, r2, r5
 80131a2:	465b      	mov	r3, fp
 80131a4:	4421      	add	r1, r4
 80131a6:	4638      	mov	r0, r7
 80131a8:	47b0      	blx	r6
 80131aa:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 80131ae:	4405      	add	r5, r0
 80131b0:	4295      	cmp	r5, r2
 80131b2:	d3f1      	bcc.n	8013198 <uxr_write_framed_msg+0x1e4>
 80131b4:	d183      	bne.n	80130be <uxr_write_framed_msg+0x10a>
 80131b6:	f04f 0300 	mov.w	r3, #0
 80131ba:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 80131be:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80131c0:	4543      	cmp	r3, r8
 80131c2:	d964      	bls.n	801328e <uxr_write_framed_msg+0x2da>
 80131c4:	f81a 3008 	ldrb.w	r3, [sl, r8]
 80131c8:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 80131cc:	2901      	cmp	r1, #1
 80131ce:	f04f 0200 	mov.w	r2, #0
 80131d2:	f63f af3d 	bhi.w	8013050 <uxr_write_framed_msg+0x9c>
 80131d6:	1c51      	adds	r1, r2, #1
 80131d8:	b2c9      	uxtb	r1, r1
 80131da:	2929      	cmp	r1, #41	@ 0x29
 80131dc:	d8da      	bhi.n	8013194 <uxr_write_framed_msg+0x1e0>
 80131de:	18a0      	adds	r0, r4, r2
 80131e0:	4421      	add	r1, r4
 80131e2:	f04f 057d 	mov.w	r5, #125	@ 0x7d
 80131e6:	3202      	adds	r2, #2
 80131e8:	f880 5038 	strb.w	r5, [r0, #56]	@ 0x38
 80131ec:	b2d2      	uxtb	r2, r2
 80131ee:	f083 0020 	eor.w	r0, r3, #32
 80131f2:	f881 0038 	strb.w	r0, [r1, #56]	@ 0x38
 80131f6:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80131fa:	e733      	b.n	8013064 <uxr_write_framed_msg+0xb0>
 80131fc:	18a1      	adds	r1, r4, r2
 80131fe:	3201      	adds	r2, #1
 8013200:	4648      	mov	r0, r9
 8013202:	b2d2      	uxtb	r2, r2
 8013204:	f881 8038 	strb.w	r8, [r1, #56]	@ 0x38
 8013208:	f04f 0901 	mov.w	r9, #1
 801320c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8013210:	2800      	cmp	r0, #0
 8013212:	f43f af7b 	beq.w	801310c <uxr_write_framed_msg+0x158>
 8013216:	2500      	movs	r5, #0
 8013218:	e002      	b.n	8013220 <uxr_write_framed_msg+0x26c>
 801321a:	2800      	cmp	r0, #0
 801321c:	f43f af4f 	beq.w	80130be <uxr_write_framed_msg+0x10a>
 8013220:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8013224:	1b52      	subs	r2, r2, r5
 8013226:	465b      	mov	r3, fp
 8013228:	4421      	add	r1, r4
 801322a:	4638      	mov	r0, r7
 801322c:	47b0      	blx	r6
 801322e:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8013232:	4405      	add	r5, r0
 8013234:	4295      	cmp	r5, r2
 8013236:	d3f0      	bcc.n	801321a <uxr_write_framed_msg+0x266>
 8013238:	f47f af41 	bne.w	80130be <uxr_write_framed_msg+0x10a>
 801323c:	2300      	movs	r3, #0
 801323e:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8013242:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013244:	b298      	uxth	r0, r3
 8013246:	b003      	add	sp, #12
 8013248:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801324c:	217d      	movs	r1, #125	@ 0x7d
 801324e:	f082 0220 	eor.w	r2, r2, #32
 8013252:	f884 1039 	strb.w	r1, [r4, #57]	@ 0x39
 8013256:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 801325a:	f884 203a 	strb.w	r2, [r4, #58]	@ 0x3a
 801325e:	2901      	cmp	r1, #1
 8013260:	f04f 0203 	mov.w	r2, #3
 8013264:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8013268:	d804      	bhi.n	8013274 <uxr_write_framed_msg+0x2c0>
 801326a:	4611      	mov	r1, r2
 801326c:	f04f 0c04 	mov.w	ip, #4
 8013270:	2205      	movs	r2, #5
 8013272:	e752      	b.n	801311a <uxr_write_framed_msg+0x166>
 8013274:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013276:	f884 003b 	strb.w	r0, [r4, #59]	@ 0x3b
 801327a:	b2dd      	uxtb	r5, r3
 801327c:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 8013280:	2204      	movs	r2, #4
 8013282:	2901      	cmp	r1, #1
 8013284:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8013288:	f63f aec0 	bhi.w	801300c <uxr_write_framed_msg+0x58>
 801328c:	e758      	b.n	8013140 <uxr_write_framed_msg+0x18c>
 801328e:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8013292:	fa5f f889 	uxtb.w	r8, r9
 8013296:	9301      	str	r3, [sp, #4]
 8013298:	2200      	movs	r2, #0
 801329a:	e6f5      	b.n	8013088 <uxr_write_framed_msg+0xd4>
 801329c:	0801e73c 	.word	0x0801e73c

080132a0 <uxr_framing_read_transport>:
 80132a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80132a4:	4604      	mov	r4, r0
 80132a6:	b083      	sub	sp, #12
 80132a8:	461f      	mov	r7, r3
 80132aa:	f8dd b034 	ldr.w	fp, [sp, #52]	@ 0x34
 80132ae:	4689      	mov	r9, r1
 80132b0:	4692      	mov	sl, r2
 80132b2:	f000 fc89 	bl	8013bc8 <uxr_millis>
 80132b6:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 80132ba:	f894 602d 	ldrb.w	r6, [r4, #45]	@ 0x2d
 80132be:	42b3      	cmp	r3, r6
 80132c0:	4680      	mov	r8, r0
 80132c2:	d061      	beq.n	8013388 <uxr_framing_read_transport+0xe8>
 80132c4:	d81c      	bhi.n	8013300 <uxr_framing_read_transport+0x60>
 80132c6:	1e75      	subs	r5, r6, #1
 80132c8:	1aed      	subs	r5, r5, r3
 80132ca:	b2ed      	uxtb	r5, r5
 80132cc:	2600      	movs	r6, #0
 80132ce:	455d      	cmp	r5, fp
 80132d0:	d81f      	bhi.n	8013312 <uxr_framing_read_transport+0x72>
 80132d2:	19ab      	adds	r3, r5, r6
 80132d4:	455b      	cmp	r3, fp
 80132d6:	bf84      	itt	hi
 80132d8:	ebab 0605 	subhi.w	r6, fp, r5
 80132dc:	b2f6      	uxtbhi	r6, r6
 80132de:	b9ed      	cbnz	r5, 801331c <uxr_framing_read_transport+0x7c>
 80132e0:	f04f 0b00 	mov.w	fp, #0
 80132e4:	f000 fc70 	bl	8013bc8 <uxr_millis>
 80132e8:	683b      	ldr	r3, [r7, #0]
 80132ea:	eba0 0808 	sub.w	r8, r0, r8
 80132ee:	eba3 0308 	sub.w	r3, r3, r8
 80132f2:	4658      	mov	r0, fp
 80132f4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80132f8:	603b      	str	r3, [r7, #0]
 80132fa:	b003      	add	sp, #12
 80132fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013300:	2e00      	cmp	r6, #0
 8013302:	d049      	beq.n	8013398 <uxr_framing_read_transport+0xf8>
 8013304:	f1c3 052a 	rsb	r5, r3, #42	@ 0x2a
 8013308:	b2ed      	uxtb	r5, r5
 801330a:	3e01      	subs	r6, #1
 801330c:	455d      	cmp	r5, fp
 801330e:	b2f6      	uxtb	r6, r6
 8013310:	d9df      	bls.n	80132d2 <uxr_framing_read_transport+0x32>
 8013312:	fa5f f58b 	uxtb.w	r5, fp
 8013316:	2600      	movs	r6, #0
 8013318:	2d00      	cmp	r5, #0
 801331a:	d0e1      	beq.n	80132e0 <uxr_framing_read_transport+0x40>
 801331c:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8013320:	3102      	adds	r1, #2
 8013322:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013324:	9300      	str	r3, [sp, #0]
 8013326:	683b      	ldr	r3, [r7, #0]
 8013328:	4421      	add	r1, r4
 801332a:	462a      	mov	r2, r5
 801332c:	4650      	mov	r0, sl
 801332e:	47c8      	blx	r9
 8013330:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8013334:	4a1a      	ldr	r2, [pc, #104]	@ (80133a0 <uxr_framing_read_transport+0x100>)
 8013336:	4403      	add	r3, r0
 8013338:	0859      	lsrs	r1, r3, #1
 801333a:	fba2 2101 	umull	r2, r1, r2, r1
 801333e:	0889      	lsrs	r1, r1, #2
 8013340:	222a      	movs	r2, #42	@ 0x2a
 8013342:	fb02 3111 	mls	r1, r2, r1, r3
 8013346:	4683      	mov	fp, r0
 8013348:	f884 102c 	strb.w	r1, [r4, #44]	@ 0x2c
 801334c:	2800      	cmp	r0, #0
 801334e:	d0c7      	beq.n	80132e0 <uxr_framing_read_transport+0x40>
 8013350:	42a8      	cmp	r0, r5
 8013352:	d1c7      	bne.n	80132e4 <uxr_framing_read_transport+0x44>
 8013354:	2e00      	cmp	r6, #0
 8013356:	d0c5      	beq.n	80132e4 <uxr_framing_read_transport+0x44>
 8013358:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801335a:	9300      	str	r3, [sp, #0]
 801335c:	3102      	adds	r1, #2
 801335e:	4632      	mov	r2, r6
 8013360:	4421      	add	r1, r4
 8013362:	2300      	movs	r3, #0
 8013364:	4650      	mov	r0, sl
 8013366:	47c8      	blx	r9
 8013368:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 801336c:	4a0c      	ldr	r2, [pc, #48]	@ (80133a0 <uxr_framing_read_transport+0x100>)
 801336e:	180b      	adds	r3, r1, r0
 8013370:	0859      	lsrs	r1, r3, #1
 8013372:	fba2 1201 	umull	r1, r2, r2, r1
 8013376:	0892      	lsrs	r2, r2, #2
 8013378:	212a      	movs	r1, #42	@ 0x2a
 801337a:	fb01 3312 	mls	r3, r1, r2, r3
 801337e:	eb00 0b05 	add.w	fp, r0, r5
 8013382:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 8013386:	e7ad      	b.n	80132e4 <uxr_framing_read_transport+0x44>
 8013388:	2600      	movs	r6, #0
 801338a:	f1bb 0f28 	cmp.w	fp, #40	@ 0x28
 801338e:	85a6      	strh	r6, [r4, #44]	@ 0x2c
 8013390:	d9bf      	bls.n	8013312 <uxr_framing_read_transport+0x72>
 8013392:	2102      	movs	r1, #2
 8013394:	2529      	movs	r5, #41	@ 0x29
 8013396:	e7c4      	b.n	8013322 <uxr_framing_read_transport+0x82>
 8013398:	f1c3 0529 	rsb	r5, r3, #41	@ 0x29
 801339c:	b2ed      	uxtb	r5, r5
 801339e:	e796      	b.n	80132ce <uxr_framing_read_transport+0x2e>
 80133a0:	30c30c31 	.word	0x30c30c31

080133a4 <uxr_read_framed_msg>:
 80133a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80133a8:	461e      	mov	r6, r3
 80133aa:	f890 502c 	ldrb.w	r5, [r0, #44]	@ 0x2c
 80133ae:	f890 302d 	ldrb.w	r3, [r0, #45]	@ 0x2d
 80133b2:	429d      	cmp	r5, r3
 80133b4:	b083      	sub	sp, #12
 80133b6:	4604      	mov	r4, r0
 80133b8:	4688      	mov	r8, r1
 80133ba:	4691      	mov	r9, r2
 80133bc:	f000 8188 	beq.w	80136d0 <uxr_read_framed_msg+0x32c>
 80133c0:	7823      	ldrb	r3, [r4, #0]
 80133c2:	4dc1      	ldr	r5, [pc, #772]	@ (80136c8 <uxr_read_framed_msg+0x324>)
 80133c4:	4fc1      	ldr	r7, [pc, #772]	@ (80136cc <uxr_read_framed_msg+0x328>)
 80133c6:	2b07      	cmp	r3, #7
 80133c8:	d8fd      	bhi.n	80133c6 <uxr_read_framed_msg+0x22>
 80133ca:	e8df f013 	tbh	[pc, r3, lsl #1]
 80133ce:	0115      	.short	0x0115
 80133d0:	00d600f6 	.word	0x00d600f6
 80133d4:	009000b9 	.word	0x009000b9
 80133d8:	0030004d 	.word	0x0030004d
 80133dc:	0008      	.short	0x0008
 80133de:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 80133e2:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 80133e6:	4299      	cmp	r1, r3
 80133e8:	f000 814a 	beq.w	8013680 <uxr_read_framed_msg+0x2dc>
 80133ec:	18e2      	adds	r2, r4, r3
 80133ee:	7892      	ldrb	r2, [r2, #2]
 80133f0:	2a7d      	cmp	r2, #125	@ 0x7d
 80133f2:	f000 8199 	beq.w	8013728 <uxr_read_framed_msg+0x384>
 80133f6:	3301      	adds	r3, #1
 80133f8:	0858      	lsrs	r0, r3, #1
 80133fa:	fba5 1000 	umull	r1, r0, r5, r0
 80133fe:	0880      	lsrs	r0, r0, #2
 8013400:	212a      	movs	r1, #42	@ 0x2a
 8013402:	fb01 3310 	mls	r3, r1, r0, r3
 8013406:	2a7e      	cmp	r2, #126	@ 0x7e
 8013408:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801340c:	f000 8252 	beq.w	80138b4 <uxr_read_framed_msg+0x510>
 8013410:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 8013412:	8ee1      	ldrh	r1, [r4, #54]	@ 0x36
 8013414:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8013418:	b29b      	uxth	r3, r3
 801341a:	2200      	movs	r2, #0
 801341c:	4299      	cmp	r1, r3
 801341e:	86a3      	strh	r3, [r4, #52]	@ 0x34
 8013420:	7022      	strb	r2, [r4, #0]
 8013422:	f000 8179 	beq.w	8013718 <uxr_read_framed_msg+0x374>
 8013426:	2000      	movs	r0, #0
 8013428:	b003      	add	sp, #12
 801342a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801342e:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8013432:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8013436:	4299      	cmp	r1, r3
 8013438:	f000 8131 	beq.w	801369e <uxr_read_framed_msg+0x2fa>
 801343c:	18e2      	adds	r2, r4, r3
 801343e:	7890      	ldrb	r0, [r2, #2]
 8013440:	287d      	cmp	r0, #125	@ 0x7d
 8013442:	f000 8190 	beq.w	8013766 <uxr_read_framed_msg+0x3c2>
 8013446:	3301      	adds	r3, #1
 8013448:	085a      	lsrs	r2, r3, #1
 801344a:	fba5 1202 	umull	r1, r2, r5, r2
 801344e:	0892      	lsrs	r2, r2, #2
 8013450:	212a      	movs	r1, #42	@ 0x2a
 8013452:	fb01 3312 	mls	r3, r1, r2, r3
 8013456:	287e      	cmp	r0, #126	@ 0x7e
 8013458:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801345c:	f000 821a 	beq.w	8013894 <uxr_read_framed_msg+0x4f0>
 8013460:	2307      	movs	r3, #7
 8013462:	86a0      	strh	r0, [r4, #52]	@ 0x34
 8013464:	7023      	strb	r3, [r4, #0]
 8013466:	e7ae      	b.n	80133c6 <uxr_read_framed_msg+0x22>
 8013468:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 801346a:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 801346e:	459e      	cmp	lr, r3
 8013470:	d938      	bls.n	80134e4 <uxr_read_framed_msg+0x140>
 8013472:	ee07 8a90 	vmov	s15, r8
 8013476:	212a      	movs	r1, #42	@ 0x2a
 8013478:	e020      	b.n	80134bc <uxr_read_framed_msg+0x118>
 801347a:	f89b c002 	ldrb.w	ip, [fp, #2]
 801347e:	f1bc 0f7d 	cmp.w	ip, #125	@ 0x7d
 8013482:	f000 80d4 	beq.w	801362e <uxr_read_framed_msg+0x28a>
 8013486:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 801348a:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 801348e:	f000 8219 	beq.w	80138c4 <uxr_read_framed_msg+0x520>
 8013492:	f806 c003 	strb.w	ip, [r6, r3]
 8013496:	f8b4 a036 	ldrh.w	sl, [r4, #54]	@ 0x36
 801349a:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 801349c:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 80134a0:	ea8a 000c 	eor.w	r0, sl, ip
 80134a4:	b2c0      	uxtb	r0, r0
 80134a6:	3301      	adds	r3, #1
 80134a8:	f837 2010 	ldrh.w	r2, [r7, r0, lsl #1]
 80134ac:	b29b      	uxth	r3, r3
 80134ae:	ea82 221a 	eor.w	r2, r2, sl, lsr #8
 80134b2:	4573      	cmp	r3, lr
 80134b4:	8663      	strh	r3, [r4, #50]	@ 0x32
 80134b6:	86e2      	strh	r2, [r4, #54]	@ 0x36
 80134b8:	f080 8120 	bcs.w	80136fc <uxr_read_framed_msg+0x358>
 80134bc:	f894 002d 	ldrb.w	r0, [r4, #45]	@ 0x2d
 80134c0:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 80134c4:	f100 0c01 	add.w	ip, r0, #1
 80134c8:	ea4f 025c 	mov.w	r2, ip, lsr #1
 80134cc:	fba5 8202 	umull	r8, r2, r5, r2
 80134d0:	0892      	lsrs	r2, r2, #2
 80134d2:	4582      	cmp	sl, r0
 80134d4:	eb04 0b00 	add.w	fp, r4, r0
 80134d8:	fb01 c212 	mls	r2, r1, r2, ip
 80134dc:	d1cd      	bne.n	801347a <uxr_read_framed_msg+0xd6>
 80134de:	ee17 8a90 	vmov	r8, s15
 80134e2:	459e      	cmp	lr, r3
 80134e4:	f040 8111 	bne.w	801370a <uxr_read_framed_msg+0x366>
 80134e8:	2306      	movs	r3, #6
 80134ea:	7023      	strb	r3, [r4, #0]
 80134ec:	e76b      	b.n	80133c6 <uxr_read_framed_msg+0x22>
 80134ee:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 80134f2:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 80134f6:	4298      	cmp	r0, r3
 80134f8:	f000 80c2 	beq.w	8013680 <uxr_read_framed_msg+0x2dc>
 80134fc:	18e2      	adds	r2, r4, r3
 80134fe:	7891      	ldrb	r1, [r2, #2]
 8013500:	297d      	cmp	r1, #125	@ 0x7d
 8013502:	f000 814c 	beq.w	801379e <uxr_read_framed_msg+0x3fa>
 8013506:	3301      	adds	r3, #1
 8013508:	085a      	lsrs	r2, r3, #1
 801350a:	fba5 0202 	umull	r0, r2, r5, r2
 801350e:	0892      	lsrs	r2, r2, #2
 8013510:	202a      	movs	r0, #42	@ 0x2a
 8013512:	fb00 3312 	mls	r3, r0, r2, r3
 8013516:	297e      	cmp	r1, #126	@ 0x7e
 8013518:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801351c:	f000 81ca 	beq.w	80138b4 <uxr_read_framed_msg+0x510>
 8013520:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 8013522:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8013526:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8013528:	b29b      	uxth	r3, r3
 801352a:	2000      	movs	r0, #0
 801352c:	428b      	cmp	r3, r1
 801352e:	8623      	strh	r3, [r4, #48]	@ 0x30
 8013530:	8660      	strh	r0, [r4, #50]	@ 0x32
 8013532:	86e0      	strh	r0, [r4, #54]	@ 0x36
 8013534:	f240 80df 	bls.w	80136f6 <uxr_read_framed_msg+0x352>
 8013538:	7020      	strb	r0, [r4, #0]
 801353a:	b003      	add	sp, #12
 801353c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013540:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8013544:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8013548:	4299      	cmp	r1, r3
 801354a:	f000 80a8 	beq.w	801369e <uxr_read_framed_msg+0x2fa>
 801354e:	18e2      	adds	r2, r4, r3
 8013550:	7890      	ldrb	r0, [r2, #2]
 8013552:	287d      	cmp	r0, #125	@ 0x7d
 8013554:	f000 8164 	beq.w	8013820 <uxr_read_framed_msg+0x47c>
 8013558:	3301      	adds	r3, #1
 801355a:	085a      	lsrs	r2, r3, #1
 801355c:	fba5 1202 	umull	r1, r2, r5, r2
 8013560:	0892      	lsrs	r2, r2, #2
 8013562:	212a      	movs	r1, #42	@ 0x2a
 8013564:	fb01 3312 	mls	r3, r1, r2, r3
 8013568:	287e      	cmp	r0, #126	@ 0x7e
 801356a:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801356e:	f000 8191 	beq.w	8013894 <uxr_read_framed_msg+0x4f0>
 8013572:	2304      	movs	r3, #4
 8013574:	8620      	strh	r0, [r4, #48]	@ 0x30
 8013576:	7023      	strb	r3, [r4, #0]
 8013578:	e725      	b.n	80133c6 <uxr_read_framed_msg+0x22>
 801357a:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 801357e:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8013582:	4290      	cmp	r0, r2
 8013584:	f000 80b3 	beq.w	80136ee <uxr_read_framed_msg+0x34a>
 8013588:	18a3      	adds	r3, r4, r2
 801358a:	7899      	ldrb	r1, [r3, #2]
 801358c:	297d      	cmp	r1, #125	@ 0x7d
 801358e:	f000 8164 	beq.w	801385a <uxr_read_framed_msg+0x4b6>
 8013592:	3201      	adds	r2, #1
 8013594:	0850      	lsrs	r0, r2, #1
 8013596:	fba5 3000 	umull	r3, r0, r5, r0
 801359a:	0880      	lsrs	r0, r0, #2
 801359c:	232a      	movs	r3, #42	@ 0x2a
 801359e:	fb03 2210 	mls	r2, r3, r0, r2
 80135a2:	297e      	cmp	r1, #126	@ 0x7e
 80135a4:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 80135a8:	f000 8188 	beq.w	80138bc <uxr_read_framed_msg+0x518>
 80135ac:	7863      	ldrb	r3, [r4, #1]
 80135ae:	428b      	cmp	r3, r1
 80135b0:	bf0c      	ite	eq
 80135b2:	2303      	moveq	r3, #3
 80135b4:	2300      	movne	r3, #0
 80135b6:	7023      	strb	r3, [r4, #0]
 80135b8:	e705      	b.n	80133c6 <uxr_read_framed_msg+0x22>
 80135ba:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 80135be:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 80135c2:	2200      	movs	r2, #0
 80135c4:	4299      	cmp	r1, r3
 80135c6:	f884 202e 	strb.w	r2, [r4, #46]	@ 0x2e
 80135ca:	d06c      	beq.n	80136a6 <uxr_read_framed_msg+0x302>
 80135cc:	18e2      	adds	r2, r4, r3
 80135ce:	7890      	ldrb	r0, [r2, #2]
 80135d0:	287d      	cmp	r0, #125	@ 0x7d
 80135d2:	f000 8101 	beq.w	80137d8 <uxr_read_framed_msg+0x434>
 80135d6:	3301      	adds	r3, #1
 80135d8:	085a      	lsrs	r2, r3, #1
 80135da:	fba5 1202 	umull	r1, r2, r5, r2
 80135de:	0892      	lsrs	r2, r2, #2
 80135e0:	212a      	movs	r1, #42	@ 0x2a
 80135e2:	fb01 3312 	mls	r3, r1, r2, r3
 80135e6:	287e      	cmp	r0, #126	@ 0x7e
 80135e8:	f884 002e 	strb.w	r0, [r4, #46]	@ 0x2e
 80135ec:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80135f0:	d059      	beq.n	80136a6 <uxr_read_framed_msg+0x302>
 80135f2:	2302      	movs	r3, #2
 80135f4:	7023      	strb	r3, [r4, #0]
 80135f6:	e6e6      	b.n	80133c6 <uxr_read_framed_msg+0x22>
 80135f8:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 80135fc:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8013600:	f04f 0e2a 	mov.w	lr, #42	@ 0x2a
 8013604:	1c51      	adds	r1, r2, #1
 8013606:	084b      	lsrs	r3, r1, #1
 8013608:	fba5 c303 	umull	ip, r3, r5, r3
 801360c:	089b      	lsrs	r3, r3, #2
 801360e:	fb0e 1313 	mls	r3, lr, r3, r1
 8013612:	4592      	cmp	sl, r2
 8013614:	eb04 0002 	add.w	r0, r4, r2
 8013618:	b2da      	uxtb	r2, r3
 801361a:	f43f af04 	beq.w	8013426 <uxr_read_framed_msg+0x82>
 801361e:	7883      	ldrb	r3, [r0, #2]
 8013620:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8013624:	2b7e      	cmp	r3, #126	@ 0x7e
 8013626:	d1ed      	bne.n	8013604 <uxr_read_framed_msg+0x260>
 8013628:	2301      	movs	r3, #1
 801362a:	7023      	strb	r3, [r4, #0]
 801362c:	e6cb      	b.n	80133c6 <uxr_read_framed_msg+0x22>
 801362e:	f100 0c01 	add.w	ip, r0, #1
 8013632:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8013636:	fba5 8202 	umull	r8, r2, r5, r2
 801363a:	0892      	lsrs	r2, r2, #2
 801363c:	fb01 c212 	mls	r2, r1, r2, ip
 8013640:	eb04 0c02 	add.w	ip, r4, r2
 8013644:	b2d2      	uxtb	r2, r2
 8013646:	4592      	cmp	sl, r2
 8013648:	f100 0002 	add.w	r0, r0, #2
 801364c:	f43f af47 	beq.w	80134de <uxr_read_framed_msg+0x13a>
 8013650:	0842      	lsrs	r2, r0, #1
 8013652:	f89c a002 	ldrb.w	sl, [ip, #2]
 8013656:	fba5 8202 	umull	r8, r2, r5, r2
 801365a:	0892      	lsrs	r2, r2, #2
 801365c:	fb01 0012 	mls	r0, r1, r2, r0
 8013660:	f1ba 0f7e 	cmp.w	sl, #126	@ 0x7e
 8013664:	f08a 0c20 	eor.w	ip, sl, #32
 8013668:	f884 002d 	strb.w	r0, [r4, #45]	@ 0x2d
 801366c:	f47f af11 	bne.w	8013492 <uxr_read_framed_msg+0xee>
 8013670:	459e      	cmp	lr, r3
 8013672:	ee17 8a90 	vmov	r8, s15
 8013676:	f43f af37 	beq.w	80134e8 <uxr_read_framed_msg+0x144>
 801367a:	2301      	movs	r3, #1
 801367c:	7023      	strb	r3, [r4, #0]
 801367e:	e6a2      	b.n	80133c6 <uxr_read_framed_msg+0x22>
 8013680:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013682:	9300      	str	r3, [sp, #0]
 8013684:	2301      	movs	r3, #1
 8013686:	9301      	str	r3, [sp, #4]
 8013688:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801368a:	464a      	mov	r2, r9
 801368c:	4641      	mov	r1, r8
 801368e:	4620      	mov	r0, r4
 8013690:	f7ff fe06 	bl	80132a0 <uxr_framing_read_transport>
 8013694:	2800      	cmp	r0, #0
 8013696:	f43f aec6 	beq.w	8013426 <uxr_read_framed_msg+0x82>
 801369a:	7823      	ldrb	r3, [r4, #0]
 801369c:	e693      	b.n	80133c6 <uxr_read_framed_msg+0x22>
 801369e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80136a0:	9300      	str	r3, [sp, #0]
 80136a2:	2302      	movs	r3, #2
 80136a4:	e7ef      	b.n	8013686 <uxr_read_framed_msg+0x2e2>
 80136a6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80136a8:	9300      	str	r3, [sp, #0]
 80136aa:	2304      	movs	r3, #4
 80136ac:	9301      	str	r3, [sp, #4]
 80136ae:	464a      	mov	r2, r9
 80136b0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80136b2:	4641      	mov	r1, r8
 80136b4:	4620      	mov	r0, r4
 80136b6:	f7ff fdf3 	bl	80132a0 <uxr_framing_read_transport>
 80136ba:	2800      	cmp	r0, #0
 80136bc:	d1ed      	bne.n	801369a <uxr_read_framed_msg+0x2f6>
 80136be:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 80136c2:	2b7e      	cmp	r3, #126	@ 0x7e
 80136c4:	d0e9      	beq.n	801369a <uxr_read_framed_msg+0x2f6>
 80136c6:	e6ae      	b.n	8013426 <uxr_read_framed_msg+0x82>
 80136c8:	30c30c31 	.word	0x30c30c31
 80136cc:	0801e73c 	.word	0x0801e73c
 80136d0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80136d2:	9300      	str	r3, [sp, #0]
 80136d4:	2305      	movs	r3, #5
 80136d6:	9301      	str	r3, [sp, #4]
 80136d8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80136da:	f7ff fde1 	bl	80132a0 <uxr_framing_read_transport>
 80136de:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 80136e2:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 80136e6:	429a      	cmp	r2, r3
 80136e8:	f43f ae9d 	beq.w	8013426 <uxr_read_framed_msg+0x82>
 80136ec:	e668      	b.n	80133c0 <uxr_read_framed_msg+0x1c>
 80136ee:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80136f0:	9300      	str	r3, [sp, #0]
 80136f2:	2303      	movs	r3, #3
 80136f4:	e7c7      	b.n	8013686 <uxr_read_framed_msg+0x2e2>
 80136f6:	2305      	movs	r3, #5
 80136f8:	7023      	strb	r3, [r4, #0]
 80136fa:	e664      	b.n	80133c6 <uxr_read_framed_msg+0x22>
 80136fc:	ee17 8a90 	vmov	r8, s15
 8013700:	f43f aef2 	beq.w	80134e8 <uxr_read_framed_msg+0x144>
 8013704:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 8013708:	d08e      	beq.n	8013628 <uxr_read_framed_msg+0x284>
 801370a:	ebae 0303 	sub.w	r3, lr, r3
 801370e:	3302      	adds	r3, #2
 8013710:	9301      	str	r3, [sp, #4]
 8013712:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013714:	9300      	str	r3, [sp, #0]
 8013716:	e7b7      	b.n	8013688 <uxr_read_framed_msg+0x2e4>
 8013718:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801371a:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 801371e:	7013      	strb	r3, [r2, #0]
 8013720:	8e20      	ldrh	r0, [r4, #48]	@ 0x30
 8013722:	b003      	add	sp, #12
 8013724:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013728:	f103 0c01 	add.w	ip, r3, #1
 801372c:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8013730:	fba5 0202 	umull	r0, r2, r5, r2
 8013734:	0892      	lsrs	r2, r2, #2
 8013736:	202a      	movs	r0, #42	@ 0x2a
 8013738:	fb00 c212 	mls	r2, r0, r2, ip
 801373c:	fa5f fc82 	uxtb.w	ip, r2
 8013740:	4561      	cmp	r1, ip
 8013742:	d09d      	beq.n	8013680 <uxr_read_framed_msg+0x2dc>
 8013744:	3302      	adds	r3, #2
 8013746:	4422      	add	r2, r4
 8013748:	0859      	lsrs	r1, r3, #1
 801374a:	7892      	ldrb	r2, [r2, #2]
 801374c:	fba5 c101 	umull	ip, r1, r5, r1
 8013750:	0889      	lsrs	r1, r1, #2
 8013752:	fb00 3311 	mls	r3, r0, r1, r3
 8013756:	2a7e      	cmp	r2, #126	@ 0x7e
 8013758:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801375c:	f000 80aa 	beq.w	80138b4 <uxr_read_framed_msg+0x510>
 8013760:	f082 0220 	eor.w	r2, r2, #32
 8013764:	e654      	b.n	8013410 <uxr_read_framed_msg+0x6c>
 8013766:	1c58      	adds	r0, r3, #1
 8013768:	0842      	lsrs	r2, r0, #1
 801376a:	fba5 c202 	umull	ip, r2, r5, r2
 801376e:	0892      	lsrs	r2, r2, #2
 8013770:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8013774:	fb0c 0212 	mls	r2, ip, r2, r0
 8013778:	b2d0      	uxtb	r0, r2
 801377a:	4281      	cmp	r1, r0
 801377c:	d08f      	beq.n	801369e <uxr_read_framed_msg+0x2fa>
 801377e:	4422      	add	r2, r4
 8013780:	3302      	adds	r3, #2
 8013782:	7890      	ldrb	r0, [r2, #2]
 8013784:	085a      	lsrs	r2, r3, #1
 8013786:	fba5 1202 	umull	r1, r2, r5, r2
 801378a:	0892      	lsrs	r2, r2, #2
 801378c:	fb0c 3312 	mls	r3, ip, r2, r3
 8013790:	287e      	cmp	r0, #126	@ 0x7e
 8013792:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8013796:	d07d      	beq.n	8013894 <uxr_read_framed_msg+0x4f0>
 8013798:	f080 0020 	eor.w	r0, r0, #32
 801379c:	e660      	b.n	8013460 <uxr_read_framed_msg+0xbc>
 801379e:	1c59      	adds	r1, r3, #1
 80137a0:	084a      	lsrs	r2, r1, #1
 80137a2:	fba5 c202 	umull	ip, r2, r5, r2
 80137a6:	0892      	lsrs	r2, r2, #2
 80137a8:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 80137ac:	fb0c 1212 	mls	r2, ip, r2, r1
 80137b0:	b2d1      	uxtb	r1, r2
 80137b2:	4288      	cmp	r0, r1
 80137b4:	f43f af64 	beq.w	8013680 <uxr_read_framed_msg+0x2dc>
 80137b8:	4422      	add	r2, r4
 80137ba:	3302      	adds	r3, #2
 80137bc:	7891      	ldrb	r1, [r2, #2]
 80137be:	085a      	lsrs	r2, r3, #1
 80137c0:	fba5 0202 	umull	r0, r2, r5, r2
 80137c4:	0892      	lsrs	r2, r2, #2
 80137c6:	fb0c 3312 	mls	r3, ip, r2, r3
 80137ca:	297e      	cmp	r1, #126	@ 0x7e
 80137cc:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80137d0:	d070      	beq.n	80138b4 <uxr_read_framed_msg+0x510>
 80137d2:	f081 0120 	eor.w	r1, r1, #32
 80137d6:	e6a3      	b.n	8013520 <uxr_read_framed_msg+0x17c>
 80137d8:	f103 0c01 	add.w	ip, r3, #1
 80137dc:	ea4f 025c 	mov.w	r2, ip, lsr #1
 80137e0:	fba5 0202 	umull	r0, r2, r5, r2
 80137e4:	0892      	lsrs	r2, r2, #2
 80137e6:	202a      	movs	r0, #42	@ 0x2a
 80137e8:	fb00 c212 	mls	r2, r0, r2, ip
 80137ec:	fa5f fc82 	uxtb.w	ip, r2
 80137f0:	4561      	cmp	r1, ip
 80137f2:	f43f af58 	beq.w	80136a6 <uxr_read_framed_msg+0x302>
 80137f6:	4422      	add	r2, r4
 80137f8:	3302      	adds	r3, #2
 80137fa:	7891      	ldrb	r1, [r2, #2]
 80137fc:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 8013800:	085a      	lsrs	r2, r3, #1
 8013802:	fba5 c202 	umull	ip, r2, r5, r2
 8013806:	0892      	lsrs	r2, r2, #2
 8013808:	fb00 3312 	mls	r3, r0, r2, r3
 801380c:	297e      	cmp	r1, #126	@ 0x7e
 801380e:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8013812:	f43f af48 	beq.w	80136a6 <uxr_read_framed_msg+0x302>
 8013816:	f081 0120 	eor.w	r1, r1, #32
 801381a:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 801381e:	e6e8      	b.n	80135f2 <uxr_read_framed_msg+0x24e>
 8013820:	1c58      	adds	r0, r3, #1
 8013822:	0842      	lsrs	r2, r0, #1
 8013824:	fba5 c202 	umull	ip, r2, r5, r2
 8013828:	0892      	lsrs	r2, r2, #2
 801382a:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 801382e:	fb0c 0212 	mls	r2, ip, r2, r0
 8013832:	b2d0      	uxtb	r0, r2
 8013834:	4281      	cmp	r1, r0
 8013836:	f43f af32 	beq.w	801369e <uxr_read_framed_msg+0x2fa>
 801383a:	4422      	add	r2, r4
 801383c:	3302      	adds	r3, #2
 801383e:	7890      	ldrb	r0, [r2, #2]
 8013840:	085a      	lsrs	r2, r3, #1
 8013842:	fba5 1202 	umull	r1, r2, r5, r2
 8013846:	0892      	lsrs	r2, r2, #2
 8013848:	fb0c 3312 	mls	r3, ip, r2, r3
 801384c:	287e      	cmp	r0, #126	@ 0x7e
 801384e:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8013852:	d01f      	beq.n	8013894 <uxr_read_framed_msg+0x4f0>
 8013854:	f080 0020 	eor.w	r0, r0, #32
 8013858:	e68b      	b.n	8013572 <uxr_read_framed_msg+0x1ce>
 801385a:	1c51      	adds	r1, r2, #1
 801385c:	084b      	lsrs	r3, r1, #1
 801385e:	fba5 c303 	umull	ip, r3, r5, r3
 8013862:	089b      	lsrs	r3, r3, #2
 8013864:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8013868:	fb0c 1313 	mls	r3, ip, r3, r1
 801386c:	b2d9      	uxtb	r1, r3
 801386e:	4288      	cmp	r0, r1
 8013870:	f43f af3d 	beq.w	80136ee <uxr_read_framed_msg+0x34a>
 8013874:	3202      	adds	r2, #2
 8013876:	4423      	add	r3, r4
 8013878:	0850      	lsrs	r0, r2, #1
 801387a:	789b      	ldrb	r3, [r3, #2]
 801387c:	fba5 1000 	umull	r1, r0, r5, r0
 8013880:	0880      	lsrs	r0, r0, #2
 8013882:	fb0c 2210 	mls	r2, ip, r0, r2
 8013886:	2b7e      	cmp	r3, #126	@ 0x7e
 8013888:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 801388c:	d016      	beq.n	80138bc <uxr_read_framed_msg+0x518>
 801388e:	f083 0120 	eor.w	r1, r3, #32
 8013892:	e68b      	b.n	80135ac <uxr_read_framed_msg+0x208>
 8013894:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013896:	9300      	str	r3, [sp, #0]
 8013898:	2302      	movs	r3, #2
 801389a:	9301      	str	r3, [sp, #4]
 801389c:	464a      	mov	r2, r9
 801389e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80138a0:	4641      	mov	r1, r8
 80138a2:	4620      	mov	r0, r4
 80138a4:	f7ff fcfc 	bl	80132a0 <uxr_framing_read_transport>
 80138a8:	2800      	cmp	r0, #0
 80138aa:	f47f aef6 	bne.w	801369a <uxr_read_framed_msg+0x2f6>
 80138ae:	2301      	movs	r3, #1
 80138b0:	7023      	strb	r3, [r4, #0]
 80138b2:	e588      	b.n	80133c6 <uxr_read_framed_msg+0x22>
 80138b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80138b6:	9300      	str	r3, [sp, #0]
 80138b8:	2301      	movs	r3, #1
 80138ba:	e7ee      	b.n	801389a <uxr_read_framed_msg+0x4f6>
 80138bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80138be:	9300      	str	r3, [sp, #0]
 80138c0:	2303      	movs	r3, #3
 80138c2:	e7ea      	b.n	801389a <uxr_read_framed_msg+0x4f6>
 80138c4:	ee17 8a90 	vmov	r8, s15
 80138c8:	e6ae      	b.n	8013628 <uxr_read_framed_msg+0x284>
 80138ca:	bf00      	nop

080138cc <uxr_stream_id>:
 80138cc:	2901      	cmp	r1, #1
 80138ce:	b082      	sub	sp, #8
 80138d0:	d01d      	beq.n	801390e <uxr_stream_id+0x42>
 80138d2:	2902      	cmp	r1, #2
 80138d4:	f04f 0c00 	mov.w	ip, #0
 80138d8:	d01e      	beq.n	8013918 <uxr_stream_id+0x4c>
 80138da:	2300      	movs	r3, #0
 80138dc:	f36c 0307 	bfi	r3, ip, #0, #8
 80138e0:	f360 230f 	bfi	r3, r0, #8, #8
 80138e4:	f361 4317 	bfi	r3, r1, #16, #8
 80138e8:	f362 631f 	bfi	r3, r2, #24, #8
 80138ec:	b2da      	uxtb	r2, r3
 80138ee:	2000      	movs	r0, #0
 80138f0:	f362 0007 	bfi	r0, r2, #0, #8
 80138f4:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80138f8:	f362 200f 	bfi	r0, r2, #8, #8
 80138fc:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8013900:	f362 4017 	bfi	r0, r2, #16, #8
 8013904:	0e1b      	lsrs	r3, r3, #24
 8013906:	f363 601f 	bfi	r0, r3, #24, #8
 801390a:	b002      	add	sp, #8
 801390c:	4770      	bx	lr
 801390e:	f100 0c01 	add.w	ip, r0, #1
 8013912:	fa5f fc8c 	uxtb.w	ip, ip
 8013916:	e7e0      	b.n	80138da <uxr_stream_id+0xe>
 8013918:	f080 0c80 	eor.w	ip, r0, #128	@ 0x80
 801391c:	e7dd      	b.n	80138da <uxr_stream_id+0xe>
 801391e:	bf00      	nop

08013920 <uxr_stream_id_from_raw>:
 8013920:	b082      	sub	sp, #8
 8013922:	b130      	cbz	r0, 8013932 <uxr_stream_id_from_raw+0x12>
 8013924:	0603      	lsls	r3, r0, #24
 8013926:	d420      	bmi.n	801396a <uxr_stream_id_from_raw+0x4a>
 8013928:	1e42      	subs	r2, r0, #1
 801392a:	b2d2      	uxtb	r2, r2
 801392c:	f04f 0c01 	mov.w	ip, #1
 8013930:	e001      	b.n	8013936 <uxr_stream_id_from_raw+0x16>
 8013932:	4684      	mov	ip, r0
 8013934:	4602      	mov	r2, r0
 8013936:	2300      	movs	r3, #0
 8013938:	f360 0307 	bfi	r3, r0, #0, #8
 801393c:	f362 230f 	bfi	r3, r2, #8, #8
 8013940:	f36c 4317 	bfi	r3, ip, #16, #8
 8013944:	f361 631f 	bfi	r3, r1, #24, #8
 8013948:	b2da      	uxtb	r2, r3
 801394a:	2000      	movs	r0, #0
 801394c:	f362 0007 	bfi	r0, r2, #0, #8
 8013950:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8013954:	f362 200f 	bfi	r0, r2, #8, #8
 8013958:	f3c3 4207 	ubfx	r2, r3, #16, #8
 801395c:	f362 4017 	bfi	r0, r2, #16, #8
 8013960:	0e1b      	lsrs	r3, r3, #24
 8013962:	f363 601f 	bfi	r0, r3, #24, #8
 8013966:	b002      	add	sp, #8
 8013968:	4770      	bx	lr
 801396a:	f080 0280 	eor.w	r2, r0, #128	@ 0x80
 801396e:	f04f 0c02 	mov.w	ip, #2
 8013972:	e7e0      	b.n	8013936 <uxr_stream_id_from_raw+0x16>

08013974 <uxr_init_stream_storage>:
 8013974:	2300      	movs	r3, #0
 8013976:	7403      	strb	r3, [r0, #16]
 8013978:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 801397c:	f880 3044 	strb.w	r3, [r0, #68]	@ 0x44
 8013980:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
 8013984:	4770      	bx	lr
 8013986:	bf00      	nop

08013988 <uxr_reset_stream_storage>:
 8013988:	b570      	push	{r4, r5, r6, lr}
 801398a:	7c03      	ldrb	r3, [r0, #16]
 801398c:	4604      	mov	r4, r0
 801398e:	b153      	cbz	r3, 80139a6 <uxr_reset_stream_storage+0x1e>
 8013990:	4606      	mov	r6, r0
 8013992:	2500      	movs	r5, #0
 8013994:	4630      	mov	r0, r6
 8013996:	f006 f855 	bl	8019a44 <uxr_reset_output_best_effort_stream>
 801399a:	7c23      	ldrb	r3, [r4, #16]
 801399c:	3501      	adds	r5, #1
 801399e:	42ab      	cmp	r3, r5
 80139a0:	f106 0610 	add.w	r6, r6, #16
 80139a4:	d8f6      	bhi.n	8013994 <uxr_reset_stream_storage+0xc>
 80139a6:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80139aa:	b163      	cbz	r3, 80139c6 <uxr_reset_stream_storage+0x3e>
 80139ac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80139b0:	2500      	movs	r5, #0
 80139b2:	4630      	mov	r0, r6
 80139b4:	f005 fe48 	bl	8019648 <uxr_reset_input_best_effort_stream>
 80139b8:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80139bc:	3501      	adds	r5, #1
 80139be:	42ab      	cmp	r3, r5
 80139c0:	f106 0602 	add.w	r6, r6, #2
 80139c4:	d8f5      	bhi.n	80139b2 <uxr_reset_stream_storage+0x2a>
 80139c6:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 80139ca:	b163      	cbz	r3, 80139e6 <uxr_reset_stream_storage+0x5e>
 80139cc:	f104 0618 	add.w	r6, r4, #24
 80139d0:	2500      	movs	r5, #0
 80139d2:	4630      	mov	r0, r6
 80139d4:	f006 f8e2 	bl	8019b9c <uxr_reset_output_reliable_stream>
 80139d8:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 80139dc:	3501      	adds	r5, #1
 80139de:	42ab      	cmp	r3, r5
 80139e0:	f106 0628 	add.w	r6, r6, #40	@ 0x28
 80139e4:	d8f5      	bhi.n	80139d2 <uxr_reset_stream_storage+0x4a>
 80139e6:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 80139ea:	b163      	cbz	r3, 8013a06 <uxr_reset_stream_storage+0x7e>
 80139ec:	f104 0648 	add.w	r6, r4, #72	@ 0x48
 80139f0:	2500      	movs	r5, #0
 80139f2:	4630      	mov	r0, r6
 80139f4:	f005 fe9c 	bl	8019730 <uxr_reset_input_reliable_stream>
 80139f8:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 80139fc:	3501      	adds	r5, #1
 80139fe:	42ab      	cmp	r3, r5
 8013a00:	f106 0618 	add.w	r6, r6, #24
 8013a04:	d8f5      	bhi.n	80139f2 <uxr_reset_stream_storage+0x6a>
 8013a06:	bd70      	pop	{r4, r5, r6, pc}

08013a08 <uxr_add_output_best_effort_buffer>:
 8013a08:	b510      	push	{r4, lr}
 8013a0a:	7c04      	ldrb	r4, [r0, #16]
 8013a0c:	f104 0c01 	add.w	ip, r4, #1
 8013a10:	b082      	sub	sp, #8
 8013a12:	f880 c010 	strb.w	ip, [r0, #16]
 8013a16:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 8013a1a:	f006 f809 	bl	8019a30 <uxr_init_output_best_effort_stream>
 8013a1e:	2201      	movs	r2, #1
 8013a20:	4611      	mov	r1, r2
 8013a22:	4620      	mov	r0, r4
 8013a24:	b002      	add	sp, #8
 8013a26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013a2a:	f7ff bf4f 	b.w	80138cc <uxr_stream_id>
 8013a2e:	bf00      	nop

08013a30 <uxr_add_output_reliable_buffer>:
 8013a30:	b510      	push	{r4, lr}
 8013a32:	b084      	sub	sp, #16
 8013a34:	4684      	mov	ip, r0
 8013a36:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8013a3a:	9000      	str	r0, [sp, #0]
 8013a3c:	f89c 4040 	ldrb.w	r4, [ip, #64]	@ 0x40
 8013a40:	2028      	movs	r0, #40	@ 0x28
 8013a42:	fb00 c004 	mla	r0, r0, r4, ip
 8013a46:	f104 0e01 	add.w	lr, r4, #1
 8013a4a:	3018      	adds	r0, #24
 8013a4c:	f88c e040 	strb.w	lr, [ip, #64]	@ 0x40
 8013a50:	f006 f86c 	bl	8019b2c <uxr_init_output_reliable_stream>
 8013a54:	2201      	movs	r2, #1
 8013a56:	2102      	movs	r1, #2
 8013a58:	4620      	mov	r0, r4
 8013a5a:	b004      	add	sp, #16
 8013a5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013a60:	f7ff bf34 	b.w	80138cc <uxr_stream_id>

08013a64 <uxr_add_input_best_effort_buffer>:
 8013a64:	b510      	push	{r4, lr}
 8013a66:	f890 4044 	ldrb.w	r4, [r0, #68]	@ 0x44
 8013a6a:	4603      	mov	r3, r0
 8013a6c:	1c62      	adds	r2, r4, #1
 8013a6e:	f104 0021 	add.w	r0, r4, #33	@ 0x21
 8013a72:	b082      	sub	sp, #8
 8013a74:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8013a78:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8013a7c:	f005 fde0 	bl	8019640 <uxr_init_input_best_effort_stream>
 8013a80:	2200      	movs	r2, #0
 8013a82:	2101      	movs	r1, #1
 8013a84:	4620      	mov	r0, r4
 8013a86:	b002      	add	sp, #8
 8013a88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013a8c:	f7ff bf1e 	b.w	80138cc <uxr_stream_id>

08013a90 <uxr_add_input_reliable_buffer>:
 8013a90:	b510      	push	{r4, lr}
 8013a92:	b084      	sub	sp, #16
 8013a94:	4684      	mov	ip, r0
 8013a96:	9806      	ldr	r0, [sp, #24]
 8013a98:	9000      	str	r0, [sp, #0]
 8013a9a:	f89c 4060 	ldrb.w	r4, [ip, #96]	@ 0x60
 8013a9e:	2018      	movs	r0, #24
 8013aa0:	fb00 c004 	mla	r0, r0, r4, ip
 8013aa4:	f104 0e01 	add.w	lr, r4, #1
 8013aa8:	3048      	adds	r0, #72	@ 0x48
 8013aaa:	f88c e060 	strb.w	lr, [ip, #96]	@ 0x60
 8013aae:	f005 fe13 	bl	80196d8 <uxr_init_input_reliable_stream>
 8013ab2:	2200      	movs	r2, #0
 8013ab4:	2102      	movs	r1, #2
 8013ab6:	4620      	mov	r0, r4
 8013ab8:	b004      	add	sp, #16
 8013aba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013abe:	f7ff bf05 	b.w	80138cc <uxr_stream_id>
 8013ac2:	bf00      	nop

08013ac4 <uxr_get_output_best_effort_stream>:
 8013ac4:	7c03      	ldrb	r3, [r0, #16]
 8013ac6:	428b      	cmp	r3, r1
 8013ac8:	bf8c      	ite	hi
 8013aca:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 8013ace:	2000      	movls	r0, #0
 8013ad0:	4770      	bx	lr
 8013ad2:	bf00      	nop

08013ad4 <uxr_get_output_reliable_stream>:
 8013ad4:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8013ad8:	428b      	cmp	r3, r1
 8013ada:	bf83      	ittte	hi
 8013adc:	2328      	movhi	r3, #40	@ 0x28
 8013ade:	fb03 0001 	mlahi	r0, r3, r1, r0
 8013ae2:	3018      	addhi	r0, #24
 8013ae4:	2000      	movls	r0, #0
 8013ae6:	4770      	bx	lr

08013ae8 <uxr_get_input_best_effort_stream>:
 8013ae8:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 8013aec:	428b      	cmp	r3, r1
 8013aee:	bf86      	itte	hi
 8013af0:	3121      	addhi	r1, #33	@ 0x21
 8013af2:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
 8013af6:	2000      	movls	r0, #0
 8013af8:	4770      	bx	lr
 8013afa:	bf00      	nop

08013afc <uxr_get_input_reliable_stream>:
 8013afc:	f890 3060 	ldrb.w	r3, [r0, #96]	@ 0x60
 8013b00:	428b      	cmp	r3, r1
 8013b02:	bf83      	ittte	hi
 8013b04:	2318      	movhi	r3, #24
 8013b06:	fb03 0001 	mlahi	r0, r3, r1, r0
 8013b0a:	3048      	addhi	r0, #72	@ 0x48
 8013b0c:	2000      	movls	r0, #0
 8013b0e:	4770      	bx	lr

08013b10 <uxr_output_streams_confirmed>:
 8013b10:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8013b14:	b183      	cbz	r3, 8013b38 <uxr_output_streams_confirmed+0x28>
 8013b16:	b570      	push	{r4, r5, r6, lr}
 8013b18:	4606      	mov	r6, r0
 8013b1a:	f100 0518 	add.w	r5, r0, #24
 8013b1e:	2400      	movs	r4, #0
 8013b20:	e001      	b.n	8013b26 <uxr_output_streams_confirmed+0x16>
 8013b22:	3528      	adds	r5, #40	@ 0x28
 8013b24:	b138      	cbz	r0, 8013b36 <uxr_output_streams_confirmed+0x26>
 8013b26:	4628      	mov	r0, r5
 8013b28:	f006 faa8 	bl	801a07c <uxr_is_output_up_to_date>
 8013b2c:	f896 3040 	ldrb.w	r3, [r6, #64]	@ 0x40
 8013b30:	3401      	adds	r4, #1
 8013b32:	42a3      	cmp	r3, r4
 8013b34:	d8f5      	bhi.n	8013b22 <uxr_output_streams_confirmed+0x12>
 8013b36:	bd70      	pop	{r4, r5, r6, pc}
 8013b38:	2001      	movs	r0, #1
 8013b3a:	4770      	bx	lr

08013b3c <uxr_buffer_submessage_header>:
 8013b3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013b3e:	4604      	mov	r4, r0
 8013b40:	460e      	mov	r6, r1
 8013b42:	2104      	movs	r1, #4
 8013b44:	4615      	mov	r5, r2
 8013b46:	461f      	mov	r7, r3
 8013b48:	f7fa fd0c 	bl	800e564 <ucdr_align_to>
 8013b4c:	2301      	movs	r3, #1
 8013b4e:	ea47 0203 	orr.w	r2, r7, r3
 8013b52:	4631      	mov	r1, r6
 8013b54:	7523      	strb	r3, [r4, #20]
 8013b56:	4620      	mov	r0, r4
 8013b58:	462b      	mov	r3, r5
 8013b5a:	f000 fa27 	bl	8013fac <uxr_serialize_submessage_header>
 8013b5e:	4620      	mov	r0, r4
 8013b60:	f7fa fd16 	bl	800e590 <ucdr_buffer_remaining>
 8013b64:	42a8      	cmp	r0, r5
 8013b66:	bf34      	ite	cc
 8013b68:	2000      	movcc	r0, #0
 8013b6a:	2001      	movcs	r0, #1
 8013b6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013b6e:	bf00      	nop

08013b70 <uxr_read_submessage_header>:
 8013b70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013b74:	4604      	mov	r4, r0
 8013b76:	460d      	mov	r5, r1
 8013b78:	2104      	movs	r1, #4
 8013b7a:	4616      	mov	r6, r2
 8013b7c:	4698      	mov	r8, r3
 8013b7e:	f7fa fcf1 	bl	800e564 <ucdr_align_to>
 8013b82:	4620      	mov	r0, r4
 8013b84:	f7fa fd04 	bl	800e590 <ucdr_buffer_remaining>
 8013b88:	2803      	cmp	r0, #3
 8013b8a:	bf8c      	ite	hi
 8013b8c:	2701      	movhi	r7, #1
 8013b8e:	2700      	movls	r7, #0
 8013b90:	d802      	bhi.n	8013b98 <uxr_read_submessage_header+0x28>
 8013b92:	4638      	mov	r0, r7
 8013b94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013b98:	4633      	mov	r3, r6
 8013b9a:	4642      	mov	r2, r8
 8013b9c:	4620      	mov	r0, r4
 8013b9e:	4629      	mov	r1, r5
 8013ba0:	f000 fa18 	bl	8013fd4 <uxr_deserialize_submessage_header>
 8013ba4:	f898 3000 	ldrb.w	r3, [r8]
 8013ba8:	f003 0201 	and.w	r2, r3, #1
 8013bac:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8013bb0:	f888 3000 	strb.w	r3, [r8]
 8013bb4:	7522      	strb	r2, [r4, #20]
 8013bb6:	4638      	mov	r0, r7
 8013bb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013bbc <uxr_submessage_padding>:
 8013bbc:	f010 0003 	ands.w	r0, r0, #3
 8013bc0:	bf18      	it	ne
 8013bc2:	f1c0 0004 	rsbne	r0, r0, #4
 8013bc6:	4770      	bx	lr

08013bc8 <uxr_millis>:
 8013bc8:	b510      	push	{r4, lr}
 8013bca:	b084      	sub	sp, #16
 8013bcc:	4669      	mov	r1, sp
 8013bce:	2001      	movs	r0, #1
 8013bd0:	f7ef f9c2 	bl	8002f58 <clock_gettime>
 8013bd4:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 8013bd8:	4906      	ldr	r1, [pc, #24]	@ (8013bf4 <uxr_millis+0x2c>)
 8013bda:	fba0 0301 	umull	r0, r3, r0, r1
 8013bde:	1900      	adds	r0, r0, r4
 8013be0:	fb01 3102 	mla	r1, r1, r2, r3
 8013be4:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 8013be8:	4a03      	ldr	r2, [pc, #12]	@ (8013bf8 <uxr_millis+0x30>)
 8013bea:	2300      	movs	r3, #0
 8013bec:	f7ed f846 	bl	8000c7c <__aeabi_ldivmod>
 8013bf0:	b004      	add	sp, #16
 8013bf2:	bd10      	pop	{r4, pc}
 8013bf4:	3b9aca00 	.word	0x3b9aca00
 8013bf8:	000f4240 	.word	0x000f4240

08013bfc <uxr_nanos>:
 8013bfc:	b510      	push	{r4, lr}
 8013bfe:	b084      	sub	sp, #16
 8013c00:	4669      	mov	r1, sp
 8013c02:	2001      	movs	r0, #1
 8013c04:	f7ef f9a8 	bl	8002f58 <clock_gettime>
 8013c08:	4a06      	ldr	r2, [pc, #24]	@ (8013c24 <uxr_nanos+0x28>)
 8013c0a:	9800      	ldr	r0, [sp, #0]
 8013c0c:	9902      	ldr	r1, [sp, #8]
 8013c0e:	9c01      	ldr	r4, [sp, #4]
 8013c10:	fba0 0302 	umull	r0, r3, r0, r2
 8013c14:	1840      	adds	r0, r0, r1
 8013c16:	fb02 3304 	mla	r3, r2, r4, r3
 8013c1a:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 8013c1e:	b004      	add	sp, #16
 8013c20:	bd10      	pop	{r4, pc}
 8013c22:	bf00      	nop
 8013c24:	3b9aca00 	.word	0x3b9aca00

08013c28 <on_full_output_buffer_fragmented>:
 8013c28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013c2c:	460c      	mov	r4, r1
 8013c2e:	b08a      	sub	sp, #40	@ 0x28
 8013c30:	f891 10c1 	ldrb.w	r1, [r1, #193]	@ 0xc1
 8013c34:	4606      	mov	r6, r0
 8013c36:	f104 0008 	add.w	r0, r4, #8
 8013c3a:	f7ff ff4b 	bl	8013ad4 <uxr_get_output_reliable_stream>
 8013c3e:	4605      	mov	r5, r0
 8013c40:	f006 fa26 	bl	801a090 <get_available_free_slots>
 8013c44:	b968      	cbnz	r0, 8013c62 <on_full_output_buffer_fragmented+0x3a>
 8013c46:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	@ 0xb8
 8013c4a:	4620      	mov	r0, r4
 8013c4c:	4798      	blx	r3
 8013c4e:	b918      	cbnz	r0, 8013c58 <on_full_output_buffer_fragmented+0x30>
 8013c50:	2001      	movs	r0, #1
 8013c52:	b00a      	add	sp, #40	@ 0x28
 8013c54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013c58:	4628      	mov	r0, r5
 8013c5a:	f006 fa19 	bl	801a090 <get_available_free_slots>
 8013c5e:	2800      	cmp	r0, #0
 8013c60:	d0f6      	beq.n	8013c50 <on_full_output_buffer_fragmented+0x28>
 8013c62:	8929      	ldrh	r1, [r5, #8]
 8013c64:	89eb      	ldrh	r3, [r5, #14]
 8013c66:	7b28      	ldrb	r0, [r5, #12]
 8013c68:	686a      	ldr	r2, [r5, #4]
 8013c6a:	fbb2 f8f1 	udiv	r8, r2, r1
 8013c6e:	fbb3 f2f1 	udiv	r2, r3, r1
 8013c72:	fb01 3112 	mls	r1, r1, r2, r3
 8013c76:	f5c0 407f 	rsb	r0, r0, #65280	@ 0xff00
 8013c7a:	b289      	uxth	r1, r1
 8013c7c:	fb08 f101 	mul.w	r1, r8, r1
 8013c80:	30fc      	adds	r0, #252	@ 0xfc
 8013c82:	f1a8 0804 	sub.w	r8, r8, #4
 8013c86:	f8d4 30c4 	ldr.w	r3, [r4, #196]	@ 0xc4
 8013c8a:	4440      	add	r0, r8
 8013c8c:	b287      	uxth	r7, r0
 8013c8e:	1bdb      	subs	r3, r3, r7
 8013c90:	f8c4 30c4 	str.w	r3, [r4, #196]	@ 0xc4
 8013c94:	682b      	ldr	r3, [r5, #0]
 8013c96:	3104      	adds	r1, #4
 8013c98:	4419      	add	r1, r3
 8013c9a:	4642      	mov	r2, r8
 8013c9c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013ca0:	9300      	str	r3, [sp, #0]
 8013ca2:	a802      	add	r0, sp, #8
 8013ca4:	2300      	movs	r3, #0
 8013ca6:	f7fa fc31 	bl	800e50c <ucdr_init_buffer_origin_offset>
 8013caa:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 8013cae:	f102 0308 	add.w	r3, r2, #8
 8013cb2:	4543      	cmp	r3, r8
 8013cb4:	d928      	bls.n	8013d08 <on_full_output_buffer_fragmented+0xe0>
 8013cb6:	463a      	mov	r2, r7
 8013cb8:	2300      	movs	r3, #0
 8013cba:	210d      	movs	r1, #13
 8013cbc:	a802      	add	r0, sp, #8
 8013cbe:	f7ff ff3d 	bl	8013b3c <uxr_buffer_submessage_header>
 8013cc2:	8929      	ldrh	r1, [r5, #8]
 8013cc4:	89eb      	ldrh	r3, [r5, #14]
 8013cc6:	fbb3 f2f1 	udiv	r2, r3, r1
 8013cca:	fb01 3312 	mls	r3, r1, r2, r3
 8013cce:	b29b      	uxth	r3, r3
 8013cd0:	686a      	ldr	r2, [r5, #4]
 8013cd2:	fbb2 f2f1 	udiv	r2, r2, r1
 8013cd6:	fb02 f303 	mul.w	r3, r2, r3
 8013cda:	682a      	ldr	r2, [r5, #0]
 8013cdc:	f842 8003 	str.w	r8, [r2, r3]
 8013ce0:	89e8      	ldrh	r0, [r5, #14]
 8013ce2:	2101      	movs	r1, #1
 8013ce4:	f006 f9f4 	bl	801a0d0 <uxr_seq_num_add>
 8013ce8:	9904      	ldr	r1, [sp, #16]
 8013cea:	9a03      	ldr	r2, [sp, #12]
 8013cec:	81e8      	strh	r0, [r5, #14]
 8013cee:	1a52      	subs	r2, r2, r1
 8013cf0:	4630      	mov	r0, r6
 8013cf2:	f7fa fc1d 	bl	800e530 <ucdr_init_buffer>
 8013cf6:	4630      	mov	r0, r6
 8013cf8:	490f      	ldr	r1, [pc, #60]	@ (8013d38 <on_full_output_buffer_fragmented+0x110>)
 8013cfa:	4622      	mov	r2, r4
 8013cfc:	f7fa fbec 	bl	800e4d8 <ucdr_set_on_full_buffer_callback>
 8013d00:	2000      	movs	r0, #0
 8013d02:	b00a      	add	sp, #40	@ 0x28
 8013d04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013d08:	b292      	uxth	r2, r2
 8013d0a:	2302      	movs	r3, #2
 8013d0c:	210d      	movs	r1, #13
 8013d0e:	a802      	add	r0, sp, #8
 8013d10:	f7ff ff14 	bl	8013b3c <uxr_buffer_submessage_header>
 8013d14:	8928      	ldrh	r0, [r5, #8]
 8013d16:	89eb      	ldrh	r3, [r5, #14]
 8013d18:	fbb3 f1f0 	udiv	r1, r3, r0
 8013d1c:	fb00 3311 	mls	r3, r0, r1, r3
 8013d20:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 8013d24:	6869      	ldr	r1, [r5, #4]
 8013d26:	fbb1 f1f0 	udiv	r1, r1, r0
 8013d2a:	b29b      	uxth	r3, r3
 8013d2c:	fb01 f303 	mul.w	r3, r1, r3
 8013d30:	6829      	ldr	r1, [r5, #0]
 8013d32:	3208      	adds	r2, #8
 8013d34:	50ca      	str	r2, [r1, r3]
 8013d36:	e7d3      	b.n	8013ce0 <on_full_output_buffer_fragmented+0xb8>
 8013d38:	08013c29 	.word	0x08013c29

08013d3c <uxr_prepare_output_stream>:
 8013d3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013d3e:	b087      	sub	sp, #28
 8013d40:	2707      	movs	r7, #7
 8013d42:	9202      	str	r2, [sp, #8]
 8013d44:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8013d46:	9103      	str	r1, [sp, #12]
 8013d48:	2500      	movs	r5, #0
 8013d4a:	3204      	adds	r2, #4
 8013d4c:	e9cd 7500 	strd	r7, r5, [sp]
 8013d50:	461c      	mov	r4, r3
 8013d52:	4606      	mov	r6, r0
 8013d54:	f7fe ffc2 	bl	8012cdc <uxr_prepare_stream_to_write_submessage>
 8013d58:	f080 0201 	eor.w	r2, r0, #1
 8013d5c:	b2d2      	uxtb	r2, r2
 8013d5e:	75a2      	strb	r2, [r4, #22]
 8013d60:	b112      	cbz	r2, 8013d68 <uxr_prepare_output_stream+0x2c>
 8013d62:	4628      	mov	r0, r5
 8013d64:	b007      	add	sp, #28
 8013d66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013d68:	aa05      	add	r2, sp, #20
 8013d6a:	9902      	ldr	r1, [sp, #8]
 8013d6c:	4630      	mov	r0, r6
 8013d6e:	f7ff f8eb 	bl	8012f48 <uxr_init_base_object_request>
 8013d72:	a905      	add	r1, sp, #20
 8013d74:	4605      	mov	r5, r0
 8013d76:	4620      	mov	r0, r4
 8013d78:	f001 f88c 	bl	8014e94 <uxr_serialize_WRITE_DATA_Payload_Data>
 8013d7c:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 8013d80:	69a6      	ldr	r6, [r4, #24]
 8013d82:	69e7      	ldr	r7, [r4, #28]
 8013d84:	1a52      	subs	r2, r2, r1
 8013d86:	4620      	mov	r0, r4
 8013d88:	f7fa fbd2 	bl	800e530 <ucdr_init_buffer>
 8013d8c:	4620      	mov	r0, r4
 8013d8e:	463a      	mov	r2, r7
 8013d90:	4631      	mov	r1, r6
 8013d92:	f7fa fba1 	bl	800e4d8 <ucdr_set_on_full_buffer_callback>
 8013d96:	4628      	mov	r0, r5
 8013d98:	b007      	add	sp, #28
 8013d9a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08013d9c <uxr_prepare_output_stream_fragmented>:
 8013d9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013da0:	b091      	sub	sp, #68	@ 0x44
 8013da2:	4605      	mov	r5, r0
 8013da4:	9105      	str	r1, [sp, #20]
 8013da6:	3008      	adds	r0, #8
 8013da8:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8013dac:	461e      	mov	r6, r3
 8013dae:	9204      	str	r2, [sp, #16]
 8013db0:	f7ff fe90 	bl	8013ad4 <uxr_get_output_reliable_stream>
 8013db4:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8013db8:	2b01      	cmp	r3, #1
 8013dba:	f000 8091 	beq.w	8013ee0 <uxr_prepare_output_stream_fragmented+0x144>
 8013dbe:	4604      	mov	r4, r0
 8013dc0:	2800      	cmp	r0, #0
 8013dc2:	f000 808d 	beq.w	8013ee0 <uxr_prepare_output_stream_fragmented+0x144>
 8013dc6:	f006 f963 	bl	801a090 <get_available_free_slots>
 8013dca:	2800      	cmp	r0, #0
 8013dcc:	f000 8083 	beq.w	8013ed6 <uxr_prepare_output_stream_fragmented+0x13a>
 8013dd0:	8922      	ldrh	r2, [r4, #8]
 8013dd2:	89e7      	ldrh	r7, [r4, #14]
 8013dd4:	fbb7 f9f2 	udiv	r9, r7, r2
 8013dd8:	fb02 7919 	mls	r9, r2, r9, r7
 8013ddc:	fa1f f989 	uxth.w	r9, r9
 8013de0:	6863      	ldr	r3, [r4, #4]
 8013de2:	fbb3 f2f2 	udiv	r2, r3, r2
 8013de6:	6823      	ldr	r3, [r4, #0]
 8013de8:	9203      	str	r2, [sp, #12]
 8013dea:	fb02 f909 	mul.w	r9, r2, r9
 8013dee:	f109 0904 	add.w	r9, r9, #4
 8013df2:	4499      	add	r9, r3
 8013df4:	7b23      	ldrb	r3, [r4, #12]
 8013df6:	f859 8c04 	ldr.w	r8, [r9, #-4]
 8013dfa:	4543      	cmp	r3, r8
 8013dfc:	f1a2 0b04 	sub.w	fp, r2, #4
 8013e00:	d37a      	bcc.n	8013ef8 <uxr_prepare_output_stream_fragmented+0x15c>
 8013e02:	f1ab 0a04 	sub.w	sl, fp, #4
 8013e06:	ebaa 0a03 	sub.w	sl, sl, r3
 8013e0a:	465a      	mov	r2, fp
 8013e0c:	2300      	movs	r3, #0
 8013e0e:	4649      	mov	r1, r9
 8013e10:	a808      	add	r0, sp, #32
 8013e12:	f8cd 8000 	str.w	r8, [sp]
 8013e16:	f7fa fb79 	bl	800e50c <ucdr_init_buffer_origin_offset>
 8013e1a:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8013e1c:	fa1f fa8a 	uxth.w	sl, sl
 8013e20:	4652      	mov	r2, sl
 8013e22:	f103 0a08 	add.w	sl, r3, #8
 8013e26:	45da      	cmp	sl, fp
 8013e28:	bf34      	ite	cc
 8013e2a:	2302      	movcc	r3, #2
 8013e2c:	2300      	movcs	r3, #0
 8013e2e:	210d      	movs	r1, #13
 8013e30:	a808      	add	r0, sp, #32
 8013e32:	f7ff fe83 	bl	8013b3c <uxr_buffer_submessage_header>
 8013e36:	8921      	ldrh	r1, [r4, #8]
 8013e38:	fbb7 f2f1 	udiv	r2, r7, r1
 8013e3c:	fb01 7212 	mls	r2, r1, r2, r7
 8013e40:	b292      	uxth	r2, r2
 8013e42:	6863      	ldr	r3, [r4, #4]
 8013e44:	fbb3 f3f1 	udiv	r3, r3, r1
 8013e48:	fb02 f303 	mul.w	r3, r2, r3
 8013e4c:	6822      	ldr	r2, [r4, #0]
 8013e4e:	4638      	mov	r0, r7
 8013e50:	f842 b003 	str.w	fp, [r2, r3]
 8013e54:	2101      	movs	r1, #1
 8013e56:	f006 f93b 	bl	801a0d0 <uxr_seq_num_add>
 8013e5a:	9b03      	ldr	r3, [sp, #12]
 8013e5c:	f108 0104 	add.w	r1, r8, #4
 8013e60:	f1a3 0208 	sub.w	r2, r3, #8
 8013e64:	eba2 0208 	sub.w	r2, r2, r8
 8013e68:	4449      	add	r1, r9
 8013e6a:	4607      	mov	r7, r0
 8013e6c:	4630      	mov	r0, r6
 8013e6e:	f7fa fb5f 	bl	800e530 <ucdr_init_buffer>
 8013e72:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8013e74:	81e7      	strh	r7, [r4, #14]
 8013e76:	1d1a      	adds	r2, r3, #4
 8013e78:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 8013e7c:	bf28      	it	cs
 8013e7e:	2200      	movcs	r2, #0
 8013e80:	2300      	movs	r3, #0
 8013e82:	b292      	uxth	r2, r2
 8013e84:	2107      	movs	r1, #7
 8013e86:	4630      	mov	r0, r6
 8013e88:	f7ff fe58 	bl	8013b3c <uxr_buffer_submessage_header>
 8013e8c:	9904      	ldr	r1, [sp, #16]
 8013e8e:	aa07      	add	r2, sp, #28
 8013e90:	4628      	mov	r0, r5
 8013e92:	f7ff f859 	bl	8012f48 <uxr_init_base_object_request>
 8013e96:	4604      	mov	r4, r0
 8013e98:	b318      	cbz	r0, 8013ee2 <uxr_prepare_output_stream_fragmented+0x146>
 8013e9a:	a907      	add	r1, sp, #28
 8013e9c:	4630      	mov	r0, r6
 8013e9e:	f000 fff9 	bl	8014e94 <uxr_serialize_WRITE_DATA_Payload_Data>
 8013ea2:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 8013ea6:	4630      	mov	r0, r6
 8013ea8:	1a52      	subs	r2, r2, r1
 8013eaa:	f7fa fb41 	bl	800e530 <ucdr_init_buffer>
 8013eae:	9b05      	ldr	r3, [sp, #20]
 8013eb0:	f8c5 30c0 	str.w	r3, [r5, #192]	@ 0xc0
 8013eb4:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8013eb6:	f8c5 30b8 	str.w	r3, [r5, #184]	@ 0xb8
 8013eba:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8013ebc:	491b      	ldr	r1, [pc, #108]	@ (8013f2c <uxr_prepare_output_stream_fragmented+0x190>)
 8013ebe:	f8c5 a0c4 	str.w	sl, [r5, #196]	@ 0xc4
 8013ec2:	4630      	mov	r0, r6
 8013ec4:	f8c5 30bc 	str.w	r3, [r5, #188]	@ 0xbc
 8013ec8:	462a      	mov	r2, r5
 8013eca:	f7fa fb05 	bl	800e4d8 <ucdr_set_on_full_buffer_callback>
 8013ece:	4620      	mov	r0, r4
 8013ed0:	b011      	add	sp, #68	@ 0x44
 8013ed2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013ed6:	991c      	ldr	r1, [sp, #112]	@ 0x70
 8013ed8:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8013eda:	4628      	mov	r0, r5
 8013edc:	4798      	blx	r3
 8013ede:	b920      	cbnz	r0, 8013eea <uxr_prepare_output_stream_fragmented+0x14e>
 8013ee0:	2400      	movs	r4, #0
 8013ee2:	4620      	mov	r0, r4
 8013ee4:	b011      	add	sp, #68	@ 0x44
 8013ee6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013eea:	4620      	mov	r0, r4
 8013eec:	f006 f8d0 	bl	801a090 <get_available_free_slots>
 8013ef0:	2800      	cmp	r0, #0
 8013ef2:	f47f af6d 	bne.w	8013dd0 <uxr_prepare_output_stream_fragmented+0x34>
 8013ef6:	e7f3      	b.n	8013ee0 <uxr_prepare_output_stream_fragmented+0x144>
 8013ef8:	4638      	mov	r0, r7
 8013efa:	2101      	movs	r1, #1
 8013efc:	f006 f8e8 	bl	801a0d0 <uxr_seq_num_add>
 8013f00:	8921      	ldrh	r1, [r4, #8]
 8013f02:	fbb0 f2f1 	udiv	r2, r0, r1
 8013f06:	fb01 0912 	mls	r9, r1, r2, r0
 8013f0a:	fa1f f289 	uxth.w	r2, r9
 8013f0e:	6863      	ldr	r3, [r4, #4]
 8013f10:	fbb3 f9f1 	udiv	r9, r3, r1
 8013f14:	6823      	ldr	r3, [r4, #0]
 8013f16:	fb02 f909 	mul.w	r9, r2, r9
 8013f1a:	f109 0904 	add.w	r9, r9, #4
 8013f1e:	4499      	add	r9, r3
 8013f20:	4607      	mov	r7, r0
 8013f22:	7b23      	ldrb	r3, [r4, #12]
 8013f24:	f859 8c04 	ldr.w	r8, [r9, #-4]
 8013f28:	e76b      	b.n	8013e02 <uxr_prepare_output_stream_fragmented+0x66>
 8013f2a:	bf00      	nop
 8013f2c:	08013c29 	.word	0x08013c29

08013f30 <uxr_serialize_message_header>:
 8013f30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013f32:	b083      	sub	sp, #12
 8013f34:	4616      	mov	r6, r2
 8013f36:	4604      	mov	r4, r0
 8013f38:	9301      	str	r3, [sp, #4]
 8013f3a:	460d      	mov	r5, r1
 8013f3c:	9f08      	ldr	r7, [sp, #32]
 8013f3e:	f7f9 f815 	bl	800cf6c <ucdr_serialize_uint8_t>
 8013f42:	4631      	mov	r1, r6
 8013f44:	4620      	mov	r0, r4
 8013f46:	f7f9 f811 	bl	800cf6c <ucdr_serialize_uint8_t>
 8013f4a:	9a01      	ldr	r2, [sp, #4]
 8013f4c:	2101      	movs	r1, #1
 8013f4e:	4620      	mov	r0, r4
 8013f50:	f7f9 f8b8 	bl	800d0c4 <ucdr_serialize_endian_uint16_t>
 8013f54:	062b      	lsls	r3, r5, #24
 8013f56:	d501      	bpl.n	8013f5c <uxr_serialize_message_header+0x2c>
 8013f58:	b003      	add	sp, #12
 8013f5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013f5c:	2204      	movs	r2, #4
 8013f5e:	4639      	mov	r1, r7
 8013f60:	4620      	mov	r0, r4
 8013f62:	b003      	add	sp, #12
 8013f64:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8013f68:	f005 b9e0 	b.w	801932c <ucdr_serialize_array_uint8_t>

08013f6c <uxr_deserialize_message_header>:
 8013f6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013f6e:	b083      	sub	sp, #12
 8013f70:	4616      	mov	r6, r2
 8013f72:	4604      	mov	r4, r0
 8013f74:	9301      	str	r3, [sp, #4]
 8013f76:	460d      	mov	r5, r1
 8013f78:	9f08      	ldr	r7, [sp, #32]
 8013f7a:	f7f9 f80d 	bl	800cf98 <ucdr_deserialize_uint8_t>
 8013f7e:	4631      	mov	r1, r6
 8013f80:	4620      	mov	r0, r4
 8013f82:	f7f9 f809 	bl	800cf98 <ucdr_deserialize_uint8_t>
 8013f86:	9a01      	ldr	r2, [sp, #4]
 8013f88:	2101      	movs	r1, #1
 8013f8a:	4620      	mov	r0, r4
 8013f8c:	f7f9 f98e 	bl	800d2ac <ucdr_deserialize_endian_uint16_t>
 8013f90:	f995 3000 	ldrsb.w	r3, [r5]
 8013f94:	2b00      	cmp	r3, #0
 8013f96:	da01      	bge.n	8013f9c <uxr_deserialize_message_header+0x30>
 8013f98:	b003      	add	sp, #12
 8013f9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013f9c:	2204      	movs	r2, #4
 8013f9e:	4639      	mov	r1, r7
 8013fa0:	4620      	mov	r0, r4
 8013fa2:	b003      	add	sp, #12
 8013fa4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8013fa8:	f005 ba24 	b.w	80193f4 <ucdr_deserialize_array_uint8_t>

08013fac <uxr_serialize_submessage_header>:
 8013fac:	b530      	push	{r4, r5, lr}
 8013fae:	b083      	sub	sp, #12
 8013fb0:	4615      	mov	r5, r2
 8013fb2:	4604      	mov	r4, r0
 8013fb4:	9301      	str	r3, [sp, #4]
 8013fb6:	f7f8 ffd9 	bl	800cf6c <ucdr_serialize_uint8_t>
 8013fba:	4629      	mov	r1, r5
 8013fbc:	4620      	mov	r0, r4
 8013fbe:	f7f8 ffd5 	bl	800cf6c <ucdr_serialize_uint8_t>
 8013fc2:	9a01      	ldr	r2, [sp, #4]
 8013fc4:	2101      	movs	r1, #1
 8013fc6:	4620      	mov	r0, r4
 8013fc8:	b003      	add	sp, #12
 8013fca:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013fce:	f7f9 b879 	b.w	800d0c4 <ucdr_serialize_endian_uint16_t>
 8013fd2:	bf00      	nop

08013fd4 <uxr_deserialize_submessage_header>:
 8013fd4:	b530      	push	{r4, r5, lr}
 8013fd6:	b083      	sub	sp, #12
 8013fd8:	4615      	mov	r5, r2
 8013fda:	4604      	mov	r4, r0
 8013fdc:	9301      	str	r3, [sp, #4]
 8013fde:	f7f8 ffdb 	bl	800cf98 <ucdr_deserialize_uint8_t>
 8013fe2:	4629      	mov	r1, r5
 8013fe4:	4620      	mov	r0, r4
 8013fe6:	f7f8 ffd7 	bl	800cf98 <ucdr_deserialize_uint8_t>
 8013fea:	9a01      	ldr	r2, [sp, #4]
 8013fec:	2101      	movs	r1, #1
 8013fee:	4620      	mov	r0, r4
 8013ff0:	b003      	add	sp, #12
 8013ff2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013ff6:	f7f9 b959 	b.w	800d2ac <ucdr_deserialize_endian_uint16_t>
 8013ffa:	bf00      	nop

08013ffc <uxr_serialize_CLIENT_Representation>:
 8013ffc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014000:	2204      	movs	r2, #4
 8014002:	460e      	mov	r6, r1
 8014004:	4605      	mov	r5, r0
 8014006:	f005 f991 	bl	801932c <ucdr_serialize_array_uint8_t>
 801400a:	2202      	movs	r2, #2
 801400c:	4607      	mov	r7, r0
 801400e:	1d31      	adds	r1, r6, #4
 8014010:	4628      	mov	r0, r5
 8014012:	f005 f98b 	bl	801932c <ucdr_serialize_array_uint8_t>
 8014016:	4038      	ands	r0, r7
 8014018:	2202      	movs	r2, #2
 801401a:	1db1      	adds	r1, r6, #6
 801401c:	b2c7      	uxtb	r7, r0
 801401e:	4628      	mov	r0, r5
 8014020:	f005 f984 	bl	801932c <ucdr_serialize_array_uint8_t>
 8014024:	2204      	movs	r2, #4
 8014026:	4007      	ands	r7, r0
 8014028:	f106 0108 	add.w	r1, r6, #8
 801402c:	4628      	mov	r0, r5
 801402e:	f005 f97d 	bl	801932c <ucdr_serialize_array_uint8_t>
 8014032:	7b31      	ldrb	r1, [r6, #12]
 8014034:	4007      	ands	r7, r0
 8014036:	4628      	mov	r0, r5
 8014038:	f7f8 ff98 	bl	800cf6c <ucdr_serialize_uint8_t>
 801403c:	7b71      	ldrb	r1, [r6, #13]
 801403e:	4007      	ands	r7, r0
 8014040:	4628      	mov	r0, r5
 8014042:	f7f8 ff65 	bl	800cf10 <ucdr_serialize_bool>
 8014046:	7b73      	ldrb	r3, [r6, #13]
 8014048:	ea07 0800 	and.w	r8, r7, r0
 801404c:	b93b      	cbnz	r3, 801405e <uxr_serialize_CLIENT_Representation+0x62>
 801404e:	8bb1      	ldrh	r1, [r6, #28]
 8014050:	4628      	mov	r0, r5
 8014052:	f7f8 ffb7 	bl	800cfc4 <ucdr_serialize_uint16_t>
 8014056:	ea08 0000 	and.w	r0, r8, r0
 801405a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801405e:	6931      	ldr	r1, [r6, #16]
 8014060:	4628      	mov	r0, r5
 8014062:	f7f9 f999 	bl	800d398 <ucdr_serialize_uint32_t>
 8014066:	6933      	ldr	r3, [r6, #16]
 8014068:	b1e3      	cbz	r3, 80140a4 <uxr_serialize_CLIENT_Representation+0xa8>
 801406a:	b1c0      	cbz	r0, 801409e <uxr_serialize_CLIENT_Representation+0xa2>
 801406c:	4637      	mov	r7, r6
 801406e:	f04f 0900 	mov.w	r9, #0
 8014072:	e001      	b.n	8014078 <uxr_serialize_CLIENT_Representation+0x7c>
 8014074:	3708      	adds	r7, #8
 8014076:	b194      	cbz	r4, 801409e <uxr_serialize_CLIENT_Representation+0xa2>
 8014078:	6979      	ldr	r1, [r7, #20]
 801407a:	4628      	mov	r0, r5
 801407c:	f005 fac8 	bl	8019610 <ucdr_serialize_string>
 8014080:	69b9      	ldr	r1, [r7, #24]
 8014082:	4604      	mov	r4, r0
 8014084:	4628      	mov	r0, r5
 8014086:	f005 fac3 	bl	8019610 <ucdr_serialize_string>
 801408a:	6933      	ldr	r3, [r6, #16]
 801408c:	f109 0901 	add.w	r9, r9, #1
 8014090:	4004      	ands	r4, r0
 8014092:	4599      	cmp	r9, r3
 8014094:	b2e4      	uxtb	r4, r4
 8014096:	d3ed      	bcc.n	8014074 <uxr_serialize_CLIENT_Representation+0x78>
 8014098:	ea08 0804 	and.w	r8, r8, r4
 801409c:	e7d7      	b.n	801404e <uxr_serialize_CLIENT_Representation+0x52>
 801409e:	f04f 0800 	mov.w	r8, #0
 80140a2:	e7d4      	b.n	801404e <uxr_serialize_CLIENT_Representation+0x52>
 80140a4:	ea08 0800 	and.w	r8, r8, r0
 80140a8:	e7d1      	b.n	801404e <uxr_serialize_CLIENT_Representation+0x52>
 80140aa:	bf00      	nop

080140ac <uxr_deserialize_CLIENT_Representation>:
 80140ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80140b0:	2204      	movs	r2, #4
 80140b2:	460c      	mov	r4, r1
 80140b4:	4605      	mov	r5, r0
 80140b6:	f005 f99d 	bl	80193f4 <ucdr_deserialize_array_uint8_t>
 80140ba:	2202      	movs	r2, #2
 80140bc:	4607      	mov	r7, r0
 80140be:	1d21      	adds	r1, r4, #4
 80140c0:	4628      	mov	r0, r5
 80140c2:	f005 f997 	bl	80193f4 <ucdr_deserialize_array_uint8_t>
 80140c6:	4038      	ands	r0, r7
 80140c8:	2202      	movs	r2, #2
 80140ca:	1da1      	adds	r1, r4, #6
 80140cc:	b2c6      	uxtb	r6, r0
 80140ce:	4628      	mov	r0, r5
 80140d0:	f005 f990 	bl	80193f4 <ucdr_deserialize_array_uint8_t>
 80140d4:	2204      	movs	r2, #4
 80140d6:	4006      	ands	r6, r0
 80140d8:	f104 0108 	add.w	r1, r4, #8
 80140dc:	4628      	mov	r0, r5
 80140de:	f005 f989 	bl	80193f4 <ucdr_deserialize_array_uint8_t>
 80140e2:	f104 010c 	add.w	r1, r4, #12
 80140e6:	4006      	ands	r6, r0
 80140e8:	4628      	mov	r0, r5
 80140ea:	f7f8 ff55 	bl	800cf98 <ucdr_deserialize_uint8_t>
 80140ee:	f104 010d 	add.w	r1, r4, #13
 80140f2:	ea06 0700 	and.w	r7, r6, r0
 80140f6:	4628      	mov	r0, r5
 80140f8:	f7f8 ff20 	bl	800cf3c <ucdr_deserialize_bool>
 80140fc:	7b63      	ldrb	r3, [r4, #13]
 80140fe:	4007      	ands	r7, r0
 8014100:	b93b      	cbnz	r3, 8014112 <uxr_deserialize_CLIENT_Representation+0x66>
 8014102:	f104 011c 	add.w	r1, r4, #28
 8014106:	4628      	mov	r0, r5
 8014108:	f7f9 f85c 	bl	800d1c4 <ucdr_deserialize_uint16_t>
 801410c:	4038      	ands	r0, r7
 801410e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014112:	f104 0110 	add.w	r1, r4, #16
 8014116:	4628      	mov	r0, r5
 8014118:	f7f9 fa6e 	bl	800d5f8 <ucdr_deserialize_uint32_t>
 801411c:	6923      	ldr	r3, [r4, #16]
 801411e:	2b01      	cmp	r3, #1
 8014120:	d903      	bls.n	801412a <uxr_deserialize_CLIENT_Representation+0x7e>
 8014122:	2301      	movs	r3, #1
 8014124:	75ab      	strb	r3, [r5, #22]
 8014126:	2700      	movs	r7, #0
 8014128:	e7eb      	b.n	8014102 <uxr_deserialize_CLIENT_Representation+0x56>
 801412a:	b30b      	cbz	r3, 8014170 <uxr_deserialize_CLIENT_Representation+0xc4>
 801412c:	2800      	cmp	r0, #0
 801412e:	d0fa      	beq.n	8014126 <uxr_deserialize_CLIENT_Representation+0x7a>
 8014130:	46a0      	mov	r8, r4
 8014132:	f04f 0900 	mov.w	r9, #0
 8014136:	e001      	b.n	801413c <uxr_deserialize_CLIENT_Representation+0x90>
 8014138:	2e00      	cmp	r6, #0
 801413a:	d0f4      	beq.n	8014126 <uxr_deserialize_CLIENT_Representation+0x7a>
 801413c:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8014140:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8014144:	4628      	mov	r0, r5
 8014146:	f005 fa73 	bl	8019630 <ucdr_deserialize_string>
 801414a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801414e:	4606      	mov	r6, r0
 8014150:	f8d8 1018 	ldr.w	r1, [r8, #24]
 8014154:	4628      	mov	r0, r5
 8014156:	f005 fa6b 	bl	8019630 <ucdr_deserialize_string>
 801415a:	6923      	ldr	r3, [r4, #16]
 801415c:	f109 0901 	add.w	r9, r9, #1
 8014160:	4006      	ands	r6, r0
 8014162:	4599      	cmp	r9, r3
 8014164:	f108 0808 	add.w	r8, r8, #8
 8014168:	b2f6      	uxtb	r6, r6
 801416a:	d3e5      	bcc.n	8014138 <uxr_deserialize_CLIENT_Representation+0x8c>
 801416c:	4037      	ands	r7, r6
 801416e:	e7c8      	b.n	8014102 <uxr_deserialize_CLIENT_Representation+0x56>
 8014170:	4007      	ands	r7, r0
 8014172:	e7c6      	b.n	8014102 <uxr_deserialize_CLIENT_Representation+0x56>

08014174 <uxr_serialize_AGENT_Representation>:
 8014174:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014178:	2204      	movs	r2, #4
 801417a:	460f      	mov	r7, r1
 801417c:	4605      	mov	r5, r0
 801417e:	f005 f8d5 	bl	801932c <ucdr_serialize_array_uint8_t>
 8014182:	2202      	movs	r2, #2
 8014184:	4604      	mov	r4, r0
 8014186:	1d39      	adds	r1, r7, #4
 8014188:	4628      	mov	r0, r5
 801418a:	f005 f8cf 	bl	801932c <ucdr_serialize_array_uint8_t>
 801418e:	4020      	ands	r0, r4
 8014190:	2202      	movs	r2, #2
 8014192:	1db9      	adds	r1, r7, #6
 8014194:	b2c4      	uxtb	r4, r0
 8014196:	4628      	mov	r0, r5
 8014198:	f005 f8c8 	bl	801932c <ucdr_serialize_array_uint8_t>
 801419c:	7a39      	ldrb	r1, [r7, #8]
 801419e:	4004      	ands	r4, r0
 80141a0:	4628      	mov	r0, r5
 80141a2:	f7f8 feb5 	bl	800cf10 <ucdr_serialize_bool>
 80141a6:	7a3b      	ldrb	r3, [r7, #8]
 80141a8:	ea00 0804 	and.w	r8, r0, r4
 80141ac:	b913      	cbnz	r3, 80141b4 <uxr_serialize_AGENT_Representation+0x40>
 80141ae:	4640      	mov	r0, r8
 80141b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80141b4:	68f9      	ldr	r1, [r7, #12]
 80141b6:	4628      	mov	r0, r5
 80141b8:	f7f9 f8ee 	bl	800d398 <ucdr_serialize_uint32_t>
 80141bc:	68fb      	ldr	r3, [r7, #12]
 80141be:	b303      	cbz	r3, 8014202 <uxr_serialize_AGENT_Representation+0x8e>
 80141c0:	b1d0      	cbz	r0, 80141f8 <uxr_serialize_AGENT_Representation+0x84>
 80141c2:	463e      	mov	r6, r7
 80141c4:	f04f 0900 	mov.w	r9, #0
 80141c8:	e001      	b.n	80141ce <uxr_serialize_AGENT_Representation+0x5a>
 80141ca:	3608      	adds	r6, #8
 80141cc:	b1a4      	cbz	r4, 80141f8 <uxr_serialize_AGENT_Representation+0x84>
 80141ce:	6931      	ldr	r1, [r6, #16]
 80141d0:	4628      	mov	r0, r5
 80141d2:	f005 fa1d 	bl	8019610 <ucdr_serialize_string>
 80141d6:	6971      	ldr	r1, [r6, #20]
 80141d8:	4604      	mov	r4, r0
 80141da:	4628      	mov	r0, r5
 80141dc:	f005 fa18 	bl	8019610 <ucdr_serialize_string>
 80141e0:	68fb      	ldr	r3, [r7, #12]
 80141e2:	f109 0901 	add.w	r9, r9, #1
 80141e6:	4004      	ands	r4, r0
 80141e8:	4599      	cmp	r9, r3
 80141ea:	b2e4      	uxtb	r4, r4
 80141ec:	d3ed      	bcc.n	80141ca <uxr_serialize_AGENT_Representation+0x56>
 80141ee:	ea08 0804 	and.w	r8, r8, r4
 80141f2:	4640      	mov	r0, r8
 80141f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80141f8:	f04f 0800 	mov.w	r8, #0
 80141fc:	4640      	mov	r0, r8
 80141fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014202:	ea08 0800 	and.w	r8, r8, r0
 8014206:	e7d2      	b.n	80141ae <uxr_serialize_AGENT_Representation+0x3a>

08014208 <uxr_serialize_DATAWRITER_Representation>:
 8014208:	b570      	push	{r4, r5, r6, lr}
 801420a:	460d      	mov	r5, r1
 801420c:	7809      	ldrb	r1, [r1, #0]
 801420e:	4606      	mov	r6, r0
 8014210:	f7f8 feac 	bl	800cf6c <ucdr_serialize_uint8_t>
 8014214:	4604      	mov	r4, r0
 8014216:	b130      	cbz	r0, 8014226 <uxr_serialize_DATAWRITER_Representation+0x1e>
 8014218:	782b      	ldrb	r3, [r5, #0]
 801421a:	2b02      	cmp	r3, #2
 801421c:	d00c      	beq.n	8014238 <uxr_serialize_DATAWRITER_Representation+0x30>
 801421e:	2b03      	cmp	r3, #3
 8014220:	d010      	beq.n	8014244 <uxr_serialize_DATAWRITER_Representation+0x3c>
 8014222:	2b01      	cmp	r3, #1
 8014224:	d008      	beq.n	8014238 <uxr_serialize_DATAWRITER_Representation+0x30>
 8014226:	2202      	movs	r2, #2
 8014228:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 801422c:	4630      	mov	r0, r6
 801422e:	f005 f87d 	bl	801932c <ucdr_serialize_array_uint8_t>
 8014232:	4020      	ands	r0, r4
 8014234:	b2c0      	uxtb	r0, r0
 8014236:	bd70      	pop	{r4, r5, r6, pc}
 8014238:	6869      	ldr	r1, [r5, #4]
 801423a:	4630      	mov	r0, r6
 801423c:	f005 f9e8 	bl	8019610 <ucdr_serialize_string>
 8014240:	4604      	mov	r4, r0
 8014242:	e7f0      	b.n	8014226 <uxr_serialize_DATAWRITER_Representation+0x1e>
 8014244:	4629      	mov	r1, r5
 8014246:	4630      	mov	r0, r6
 8014248:	f851 2f04 	ldr.w	r2, [r1, #4]!
 801424c:	3104      	adds	r1, #4
 801424e:	f7fd f947 	bl	80114e0 <ucdr_serialize_sequence_uint8_t>
 8014252:	4604      	mov	r4, r0
 8014254:	e7e7      	b.n	8014226 <uxr_serialize_DATAWRITER_Representation+0x1e>
 8014256:	bf00      	nop

08014258 <uxr_serialize_ObjectVariant.part.0>:
 8014258:	b570      	push	{r4, r5, r6, lr}
 801425a:	780b      	ldrb	r3, [r1, #0]
 801425c:	3b01      	subs	r3, #1
 801425e:	460c      	mov	r4, r1
 8014260:	4605      	mov	r5, r0
 8014262:	2b0d      	cmp	r3, #13
 8014264:	d854      	bhi.n	8014310 <uxr_serialize_ObjectVariant.part.0+0xb8>
 8014266:	e8df f003 	tbb	[pc, r3]
 801426a:	0730      	.short	0x0730
 801426c:	07071b1b 	.word	0x07071b1b
 8014270:	0c530707 	.word	0x0c530707
 8014274:	494e0c0c 	.word	0x494e0c0c
 8014278:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801427c:	3104      	adds	r1, #4
 801427e:	f7ff bfc3 	b.w	8014208 <uxr_serialize_DATAWRITER_Representation>
 8014282:	7909      	ldrb	r1, [r1, #4]
 8014284:	f7f8 fe72 	bl	800cf6c <ucdr_serialize_uint8_t>
 8014288:	b1e8      	cbz	r0, 80142c6 <uxr_serialize_ObjectVariant.part.0+0x6e>
 801428a:	7923      	ldrb	r3, [r4, #4]
 801428c:	2b01      	cmp	r3, #1
 801428e:	d001      	beq.n	8014294 <uxr_serialize_ObjectVariant.part.0+0x3c>
 8014290:	2b02      	cmp	r3, #2
 8014292:	d13d      	bne.n	8014310 <uxr_serialize_ObjectVariant.part.0+0xb8>
 8014294:	68a1      	ldr	r1, [r4, #8]
 8014296:	4628      	mov	r0, r5
 8014298:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801429c:	f005 b9b8 	b.w	8019610 <ucdr_serialize_string>
 80142a0:	7909      	ldrb	r1, [r1, #4]
 80142a2:	f7f8 fe63 	bl	800cf6c <ucdr_serialize_uint8_t>
 80142a6:	4606      	mov	r6, r0
 80142a8:	b120      	cbz	r0, 80142b4 <uxr_serialize_ObjectVariant.part.0+0x5c>
 80142aa:	7923      	ldrb	r3, [r4, #4]
 80142ac:	2b02      	cmp	r3, #2
 80142ae:	d039      	beq.n	8014324 <uxr_serialize_ObjectVariant.part.0+0xcc>
 80142b0:	2b03      	cmp	r3, #3
 80142b2:	d02f      	beq.n	8014314 <uxr_serialize_ObjectVariant.part.0+0xbc>
 80142b4:	2202      	movs	r2, #2
 80142b6:	f504 7103 	add.w	r1, r4, #524	@ 0x20c
 80142ba:	4628      	mov	r0, r5
 80142bc:	f005 f836 	bl	801932c <ucdr_serialize_array_uint8_t>
 80142c0:	4030      	ands	r0, r6
 80142c2:	b2c0      	uxtb	r0, r0
 80142c4:	bd70      	pop	{r4, r5, r6, pc}
 80142c6:	2000      	movs	r0, #0
 80142c8:	bd70      	pop	{r4, r5, r6, pc}
 80142ca:	7909      	ldrb	r1, [r1, #4]
 80142cc:	f7f8 fe4e 	bl	800cf6c <ucdr_serialize_uint8_t>
 80142d0:	4606      	mov	r6, r0
 80142d2:	b158      	cbz	r0, 80142ec <uxr_serialize_ObjectVariant.part.0+0x94>
 80142d4:	7923      	ldrb	r3, [r4, #4]
 80142d6:	2b02      	cmp	r3, #2
 80142d8:	d003      	beq.n	80142e2 <uxr_serialize_ObjectVariant.part.0+0x8a>
 80142da:	2b03      	cmp	r3, #3
 80142dc:	d028      	beq.n	8014330 <uxr_serialize_ObjectVariant.part.0+0xd8>
 80142de:	2b01      	cmp	r3, #1
 80142e0:	d104      	bne.n	80142ec <uxr_serialize_ObjectVariant.part.0+0x94>
 80142e2:	68a1      	ldr	r1, [r4, #8]
 80142e4:	4628      	mov	r0, r5
 80142e6:	f005 f993 	bl	8019610 <ucdr_serialize_string>
 80142ea:	4606      	mov	r6, r0
 80142ec:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	@ 0x20c
 80142f0:	4628      	mov	r0, r5
 80142f2:	f7f9 fb77 	bl	800d9e4 <ucdr_serialize_int16_t>
 80142f6:	4030      	ands	r0, r6
 80142f8:	b2c0      	uxtb	r0, r0
 80142fa:	bd70      	pop	{r4, r5, r6, pc}
 80142fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014300:	3104      	adds	r1, #4
 8014302:	f7ff be7b 	b.w	8013ffc <uxr_serialize_CLIENT_Representation>
 8014306:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801430a:	3104      	adds	r1, #4
 801430c:	f7ff bf32 	b.w	8014174 <uxr_serialize_AGENT_Representation>
 8014310:	2001      	movs	r0, #1
 8014312:	bd70      	pop	{r4, r5, r6, pc}
 8014314:	68a2      	ldr	r2, [r4, #8]
 8014316:	f104 010c 	add.w	r1, r4, #12
 801431a:	4628      	mov	r0, r5
 801431c:	f7fd f8e0 	bl	80114e0 <ucdr_serialize_sequence_uint8_t>
 8014320:	4606      	mov	r6, r0
 8014322:	e7c7      	b.n	80142b4 <uxr_serialize_ObjectVariant.part.0+0x5c>
 8014324:	68a1      	ldr	r1, [r4, #8]
 8014326:	4628      	mov	r0, r5
 8014328:	f005 f972 	bl	8019610 <ucdr_serialize_string>
 801432c:	4606      	mov	r6, r0
 801432e:	e7c1      	b.n	80142b4 <uxr_serialize_ObjectVariant.part.0+0x5c>
 8014330:	68a2      	ldr	r2, [r4, #8]
 8014332:	f104 010c 	add.w	r1, r4, #12
 8014336:	4628      	mov	r0, r5
 8014338:	f7fd f8d2 	bl	80114e0 <ucdr_serialize_sequence_uint8_t>
 801433c:	4606      	mov	r6, r0
 801433e:	e7d5      	b.n	80142ec <uxr_serialize_ObjectVariant.part.0+0x94>

08014340 <uxr_deserialize_DATAWRITER_Representation>:
 8014340:	b570      	push	{r4, r5, r6, lr}
 8014342:	4606      	mov	r6, r0
 8014344:	460d      	mov	r5, r1
 8014346:	f7f8 fe27 	bl	800cf98 <ucdr_deserialize_uint8_t>
 801434a:	4604      	mov	r4, r0
 801434c:	b130      	cbz	r0, 801435c <uxr_deserialize_DATAWRITER_Representation+0x1c>
 801434e:	782b      	ldrb	r3, [r5, #0]
 8014350:	2b02      	cmp	r3, #2
 8014352:	d00c      	beq.n	801436e <uxr_deserialize_DATAWRITER_Representation+0x2e>
 8014354:	2b03      	cmp	r3, #3
 8014356:	d012      	beq.n	801437e <uxr_deserialize_DATAWRITER_Representation+0x3e>
 8014358:	2b01      	cmp	r3, #1
 801435a:	d008      	beq.n	801436e <uxr_deserialize_DATAWRITER_Representation+0x2e>
 801435c:	2202      	movs	r2, #2
 801435e:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 8014362:	4630      	mov	r0, r6
 8014364:	f005 f846 	bl	80193f4 <ucdr_deserialize_array_uint8_t>
 8014368:	4020      	ands	r0, r4
 801436a:	b2c0      	uxtb	r0, r0
 801436c:	bd70      	pop	{r4, r5, r6, pc}
 801436e:	6869      	ldr	r1, [r5, #4]
 8014370:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8014374:	4630      	mov	r0, r6
 8014376:	f005 f95b 	bl	8019630 <ucdr_deserialize_string>
 801437a:	4604      	mov	r4, r0
 801437c:	e7ee      	b.n	801435c <uxr_deserialize_DATAWRITER_Representation+0x1c>
 801437e:	1d2b      	adds	r3, r5, #4
 8014380:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8014384:	f105 0108 	add.w	r1, r5, #8
 8014388:	4630      	mov	r0, r6
 801438a:	f7fd f8bb 	bl	8011504 <ucdr_deserialize_sequence_uint8_t>
 801438e:	4604      	mov	r4, r0
 8014390:	e7e4      	b.n	801435c <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8014392:	bf00      	nop

08014394 <uxr_serialize_OBJK_DomainParticipant_Binary>:
 8014394:	b570      	push	{r4, r5, r6, lr}
 8014396:	460d      	mov	r5, r1
 8014398:	7809      	ldrb	r1, [r1, #0]
 801439a:	4606      	mov	r6, r0
 801439c:	f7f8 fdb8 	bl	800cf10 <ucdr_serialize_bool>
 80143a0:	782b      	ldrb	r3, [r5, #0]
 80143a2:	4604      	mov	r4, r0
 80143a4:	b94b      	cbnz	r3, 80143ba <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 80143a6:	7a29      	ldrb	r1, [r5, #8]
 80143a8:	4630      	mov	r0, r6
 80143aa:	f7f8 fdb1 	bl	800cf10 <ucdr_serialize_bool>
 80143ae:	7a2b      	ldrb	r3, [r5, #8]
 80143b0:	4004      	ands	r4, r0
 80143b2:	b2e4      	uxtb	r4, r4
 80143b4:	b943      	cbnz	r3, 80143c8 <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 80143b6:	4620      	mov	r0, r4
 80143b8:	bd70      	pop	{r4, r5, r6, pc}
 80143ba:	6869      	ldr	r1, [r5, #4]
 80143bc:	4630      	mov	r0, r6
 80143be:	f005 f927 	bl	8019610 <ucdr_serialize_string>
 80143c2:	4004      	ands	r4, r0
 80143c4:	b2e4      	uxtb	r4, r4
 80143c6:	e7ee      	b.n	80143a6 <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 80143c8:	68e9      	ldr	r1, [r5, #12]
 80143ca:	4630      	mov	r0, r6
 80143cc:	f005 f920 	bl	8019610 <ucdr_serialize_string>
 80143d0:	4004      	ands	r4, r0
 80143d2:	4620      	mov	r0, r4
 80143d4:	bd70      	pop	{r4, r5, r6, pc}
 80143d6:	bf00      	nop

080143d8 <uxr_serialize_OBJK_Topic_Binary>:
 80143d8:	b570      	push	{r4, r5, r6, lr}
 80143da:	460d      	mov	r5, r1
 80143dc:	6809      	ldr	r1, [r1, #0]
 80143de:	4606      	mov	r6, r0
 80143e0:	f005 f916 	bl	8019610 <ucdr_serialize_string>
 80143e4:	7929      	ldrb	r1, [r5, #4]
 80143e6:	4604      	mov	r4, r0
 80143e8:	4630      	mov	r0, r6
 80143ea:	f7f8 fd91 	bl	800cf10 <ucdr_serialize_bool>
 80143ee:	792b      	ldrb	r3, [r5, #4]
 80143f0:	4004      	ands	r4, r0
 80143f2:	b2e4      	uxtb	r4, r4
 80143f4:	b943      	cbnz	r3, 8014408 <uxr_serialize_OBJK_Topic_Binary+0x30>
 80143f6:	7b29      	ldrb	r1, [r5, #12]
 80143f8:	4630      	mov	r0, r6
 80143fa:	f7f8 fd89 	bl	800cf10 <ucdr_serialize_bool>
 80143fe:	7b2b      	ldrb	r3, [r5, #12]
 8014400:	4004      	ands	r4, r0
 8014402:	b93b      	cbnz	r3, 8014414 <uxr_serialize_OBJK_Topic_Binary+0x3c>
 8014404:	4620      	mov	r0, r4
 8014406:	bd70      	pop	{r4, r5, r6, pc}
 8014408:	68a9      	ldr	r1, [r5, #8]
 801440a:	4630      	mov	r0, r6
 801440c:	f005 f900 	bl	8019610 <ucdr_serialize_string>
 8014410:	4004      	ands	r4, r0
 8014412:	e7f0      	b.n	80143f6 <uxr_serialize_OBJK_Topic_Binary+0x1e>
 8014414:	6929      	ldr	r1, [r5, #16]
 8014416:	4630      	mov	r0, r6
 8014418:	f005 f8fa 	bl	8019610 <ucdr_serialize_string>
 801441c:	4004      	ands	r4, r0
 801441e:	b2e4      	uxtb	r4, r4
 8014420:	4620      	mov	r0, r4
 8014422:	bd70      	pop	{r4, r5, r6, pc}

08014424 <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 8014424:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014428:	460c      	mov	r4, r1
 801442a:	7809      	ldrb	r1, [r1, #0]
 801442c:	4606      	mov	r6, r0
 801442e:	f7f8 fd6f 	bl	800cf10 <ucdr_serialize_bool>
 8014432:	7823      	ldrb	r3, [r4, #0]
 8014434:	4605      	mov	r5, r0
 8014436:	b96b      	cbnz	r3, 8014454 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 8014438:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 801443c:	4630      	mov	r0, r6
 801443e:	f7f8 fd67 	bl	800cf10 <ucdr_serialize_bool>
 8014442:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8014446:	4005      	ands	r5, r0
 8014448:	b2ed      	uxtb	r5, r5
 801444a:	2b00      	cmp	r3, #0
 801444c:	d169      	bne.n	8014522 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xfe>
 801444e:	4628      	mov	r0, r5
 8014450:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014454:	6861      	ldr	r1, [r4, #4]
 8014456:	4630      	mov	r0, r6
 8014458:	f7f8 ff9e 	bl	800d398 <ucdr_serialize_uint32_t>
 801445c:	6863      	ldr	r3, [r4, #4]
 801445e:	2b00      	cmp	r3, #0
 8014460:	d06b      	beq.n	801453a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x116>
 8014462:	2800      	cmp	r0, #0
 8014464:	d067      	beq.n	8014536 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8014466:	68a1      	ldr	r1, [r4, #8]
 8014468:	4630      	mov	r0, r6
 801446a:	f005 f8d1 	bl	8019610 <ucdr_serialize_string>
 801446e:	6863      	ldr	r3, [r4, #4]
 8014470:	2b01      	cmp	r3, #1
 8014472:	d953      	bls.n	801451c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8014474:	2800      	cmp	r0, #0
 8014476:	d05e      	beq.n	8014536 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8014478:	68e1      	ldr	r1, [r4, #12]
 801447a:	4630      	mov	r0, r6
 801447c:	f005 f8c8 	bl	8019610 <ucdr_serialize_string>
 8014480:	6863      	ldr	r3, [r4, #4]
 8014482:	2b02      	cmp	r3, #2
 8014484:	d94a      	bls.n	801451c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8014486:	2800      	cmp	r0, #0
 8014488:	d055      	beq.n	8014536 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801448a:	6921      	ldr	r1, [r4, #16]
 801448c:	4630      	mov	r0, r6
 801448e:	f005 f8bf 	bl	8019610 <ucdr_serialize_string>
 8014492:	6863      	ldr	r3, [r4, #4]
 8014494:	2b03      	cmp	r3, #3
 8014496:	d941      	bls.n	801451c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8014498:	2800      	cmp	r0, #0
 801449a:	d04c      	beq.n	8014536 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801449c:	6961      	ldr	r1, [r4, #20]
 801449e:	4630      	mov	r0, r6
 80144a0:	f005 f8b6 	bl	8019610 <ucdr_serialize_string>
 80144a4:	6863      	ldr	r3, [r4, #4]
 80144a6:	2b04      	cmp	r3, #4
 80144a8:	d938      	bls.n	801451c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80144aa:	2800      	cmp	r0, #0
 80144ac:	d043      	beq.n	8014536 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80144ae:	69a1      	ldr	r1, [r4, #24]
 80144b0:	4630      	mov	r0, r6
 80144b2:	f005 f8ad 	bl	8019610 <ucdr_serialize_string>
 80144b6:	6863      	ldr	r3, [r4, #4]
 80144b8:	2b05      	cmp	r3, #5
 80144ba:	d92f      	bls.n	801451c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80144bc:	2800      	cmp	r0, #0
 80144be:	d03a      	beq.n	8014536 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80144c0:	69e1      	ldr	r1, [r4, #28]
 80144c2:	4630      	mov	r0, r6
 80144c4:	f005 f8a4 	bl	8019610 <ucdr_serialize_string>
 80144c8:	6863      	ldr	r3, [r4, #4]
 80144ca:	2b06      	cmp	r3, #6
 80144cc:	d926      	bls.n	801451c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80144ce:	b390      	cbz	r0, 8014536 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80144d0:	6a21      	ldr	r1, [r4, #32]
 80144d2:	4630      	mov	r0, r6
 80144d4:	f005 f89c 	bl	8019610 <ucdr_serialize_string>
 80144d8:	6863      	ldr	r3, [r4, #4]
 80144da:	2b07      	cmp	r3, #7
 80144dc:	d91e      	bls.n	801451c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80144de:	b350      	cbz	r0, 8014536 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80144e0:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80144e2:	4630      	mov	r0, r6
 80144e4:	f005 f894 	bl	8019610 <ucdr_serialize_string>
 80144e8:	6863      	ldr	r3, [r4, #4]
 80144ea:	2b08      	cmp	r3, #8
 80144ec:	d916      	bls.n	801451c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80144ee:	b310      	cbz	r0, 8014536 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80144f0:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 80144f2:	4630      	mov	r0, r6
 80144f4:	f005 f88c 	bl	8019610 <ucdr_serialize_string>
 80144f8:	6863      	ldr	r3, [r4, #4]
 80144fa:	2b09      	cmp	r3, #9
 80144fc:	d90e      	bls.n	801451c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80144fe:	b1d0      	cbz	r0, 8014536 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8014500:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 8014504:	2709      	movs	r7, #9
 8014506:	e000      	b.n	801450a <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 8014508:	b1a8      	cbz	r0, 8014536 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801450a:	f858 1b04 	ldr.w	r1, [r8], #4
 801450e:	4630      	mov	r0, r6
 8014510:	f005 f87e 	bl	8019610 <ucdr_serialize_string>
 8014514:	6862      	ldr	r2, [r4, #4]
 8014516:	3701      	adds	r7, #1
 8014518:	4297      	cmp	r7, r2
 801451a:	d3f5      	bcc.n	8014508 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 801451c:	4005      	ands	r5, r0
 801451e:	b2ed      	uxtb	r5, r5
 8014520:	e78a      	b.n	8014438 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 8014522:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8014524:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8014528:	4630      	mov	r0, r6
 801452a:	f7fc ffd9 	bl	80114e0 <ucdr_serialize_sequence_uint8_t>
 801452e:	4005      	ands	r5, r0
 8014530:	4628      	mov	r0, r5
 8014532:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014536:	2500      	movs	r5, #0
 8014538:	e77e      	b.n	8014438 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 801453a:	4028      	ands	r0, r5
 801453c:	b2c5      	uxtb	r5, r0
 801453e:	e77b      	b.n	8014438 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>

08014540 <uxr_serialize_OBJK_Publisher_Binary>:
 8014540:	b570      	push	{r4, r5, r6, lr}
 8014542:	460d      	mov	r5, r1
 8014544:	7809      	ldrb	r1, [r1, #0]
 8014546:	4606      	mov	r6, r0
 8014548:	f7f8 fce2 	bl	800cf10 <ucdr_serialize_bool>
 801454c:	782b      	ldrb	r3, [r5, #0]
 801454e:	4604      	mov	r4, r0
 8014550:	b94b      	cbnz	r3, 8014566 <uxr_serialize_OBJK_Publisher_Binary+0x26>
 8014552:	7a29      	ldrb	r1, [r5, #8]
 8014554:	4630      	mov	r0, r6
 8014556:	f7f8 fcdb 	bl	800cf10 <ucdr_serialize_bool>
 801455a:	7a2b      	ldrb	r3, [r5, #8]
 801455c:	4004      	ands	r4, r0
 801455e:	b2e4      	uxtb	r4, r4
 8014560:	b943      	cbnz	r3, 8014574 <uxr_serialize_OBJK_Publisher_Binary+0x34>
 8014562:	4620      	mov	r0, r4
 8014564:	bd70      	pop	{r4, r5, r6, pc}
 8014566:	6869      	ldr	r1, [r5, #4]
 8014568:	4630      	mov	r0, r6
 801456a:	f005 f851 	bl	8019610 <ucdr_serialize_string>
 801456e:	4004      	ands	r4, r0
 8014570:	b2e4      	uxtb	r4, r4
 8014572:	e7ee      	b.n	8014552 <uxr_serialize_OBJK_Publisher_Binary+0x12>
 8014574:	f105 010c 	add.w	r1, r5, #12
 8014578:	4630      	mov	r0, r6
 801457a:	f7ff ff53 	bl	8014424 <uxr_serialize_OBJK_Publisher_Binary_Qos>
 801457e:	4004      	ands	r4, r0
 8014580:	4620      	mov	r0, r4
 8014582:	bd70      	pop	{r4, r5, r6, pc}

08014584 <uxr_serialize_OBJK_Subscriber_Binary_Qos>:
 8014584:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014588:	460c      	mov	r4, r1
 801458a:	7809      	ldrb	r1, [r1, #0]
 801458c:	4606      	mov	r6, r0
 801458e:	f7f8 fcbf 	bl	800cf10 <ucdr_serialize_bool>
 8014592:	7823      	ldrb	r3, [r4, #0]
 8014594:	4605      	mov	r5, r0
 8014596:	b96b      	cbnz	r3, 80145b4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x30>
 8014598:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 801459c:	4630      	mov	r0, r6
 801459e:	f7f8 fcb7 	bl	800cf10 <ucdr_serialize_bool>
 80145a2:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 80145a6:	4005      	ands	r5, r0
 80145a8:	b2ed      	uxtb	r5, r5
 80145aa:	2b00      	cmp	r3, #0
 80145ac:	d169      	bne.n	8014682 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xfe>
 80145ae:	4628      	mov	r0, r5
 80145b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80145b4:	6861      	ldr	r1, [r4, #4]
 80145b6:	4630      	mov	r0, r6
 80145b8:	f7f8 feee 	bl	800d398 <ucdr_serialize_uint32_t>
 80145bc:	6863      	ldr	r3, [r4, #4]
 80145be:	2b00      	cmp	r3, #0
 80145c0:	d06b      	beq.n	801469a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x116>
 80145c2:	2800      	cmp	r0, #0
 80145c4:	d067      	beq.n	8014696 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 80145c6:	68a1      	ldr	r1, [r4, #8]
 80145c8:	4630      	mov	r0, r6
 80145ca:	f005 f821 	bl	8019610 <ucdr_serialize_string>
 80145ce:	6863      	ldr	r3, [r4, #4]
 80145d0:	2b01      	cmp	r3, #1
 80145d2:	d953      	bls.n	801467c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80145d4:	2800      	cmp	r0, #0
 80145d6:	d05e      	beq.n	8014696 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 80145d8:	68e1      	ldr	r1, [r4, #12]
 80145da:	4630      	mov	r0, r6
 80145dc:	f005 f818 	bl	8019610 <ucdr_serialize_string>
 80145e0:	6863      	ldr	r3, [r4, #4]
 80145e2:	2b02      	cmp	r3, #2
 80145e4:	d94a      	bls.n	801467c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80145e6:	2800      	cmp	r0, #0
 80145e8:	d055      	beq.n	8014696 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 80145ea:	6921      	ldr	r1, [r4, #16]
 80145ec:	4630      	mov	r0, r6
 80145ee:	f005 f80f 	bl	8019610 <ucdr_serialize_string>
 80145f2:	6863      	ldr	r3, [r4, #4]
 80145f4:	2b03      	cmp	r3, #3
 80145f6:	d941      	bls.n	801467c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80145f8:	2800      	cmp	r0, #0
 80145fa:	d04c      	beq.n	8014696 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 80145fc:	6961      	ldr	r1, [r4, #20]
 80145fe:	4630      	mov	r0, r6
 8014600:	f005 f806 	bl	8019610 <ucdr_serialize_string>
 8014604:	6863      	ldr	r3, [r4, #4]
 8014606:	2b04      	cmp	r3, #4
 8014608:	d938      	bls.n	801467c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801460a:	2800      	cmp	r0, #0
 801460c:	d043      	beq.n	8014696 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801460e:	69a1      	ldr	r1, [r4, #24]
 8014610:	4630      	mov	r0, r6
 8014612:	f004 fffd 	bl	8019610 <ucdr_serialize_string>
 8014616:	6863      	ldr	r3, [r4, #4]
 8014618:	2b05      	cmp	r3, #5
 801461a:	d92f      	bls.n	801467c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801461c:	2800      	cmp	r0, #0
 801461e:	d03a      	beq.n	8014696 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8014620:	69e1      	ldr	r1, [r4, #28]
 8014622:	4630      	mov	r0, r6
 8014624:	f004 fff4 	bl	8019610 <ucdr_serialize_string>
 8014628:	6863      	ldr	r3, [r4, #4]
 801462a:	2b06      	cmp	r3, #6
 801462c:	d926      	bls.n	801467c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801462e:	b390      	cbz	r0, 8014696 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8014630:	6a21      	ldr	r1, [r4, #32]
 8014632:	4630      	mov	r0, r6
 8014634:	f004 ffec 	bl	8019610 <ucdr_serialize_string>
 8014638:	6863      	ldr	r3, [r4, #4]
 801463a:	2b07      	cmp	r3, #7
 801463c:	d91e      	bls.n	801467c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801463e:	b350      	cbz	r0, 8014696 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8014640:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8014642:	4630      	mov	r0, r6
 8014644:	f004 ffe4 	bl	8019610 <ucdr_serialize_string>
 8014648:	6863      	ldr	r3, [r4, #4]
 801464a:	2b08      	cmp	r3, #8
 801464c:	d916      	bls.n	801467c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801464e:	b310      	cbz	r0, 8014696 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8014650:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8014652:	4630      	mov	r0, r6
 8014654:	f004 ffdc 	bl	8019610 <ucdr_serialize_string>
 8014658:	6863      	ldr	r3, [r4, #4]
 801465a:	2b09      	cmp	r3, #9
 801465c:	d90e      	bls.n	801467c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801465e:	b1d0      	cbz	r0, 8014696 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8014660:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 8014664:	2709      	movs	r7, #9
 8014666:	e000      	b.n	801466a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe6>
 8014668:	b1a8      	cbz	r0, 8014696 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801466a:	f858 1b04 	ldr.w	r1, [r8], #4
 801466e:	4630      	mov	r0, r6
 8014670:	f004 ffce 	bl	8019610 <ucdr_serialize_string>
 8014674:	6862      	ldr	r2, [r4, #4]
 8014676:	3701      	adds	r7, #1
 8014678:	4297      	cmp	r7, r2
 801467a:	d3f5      	bcc.n	8014668 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe4>
 801467c:	4005      	ands	r5, r0
 801467e:	b2ed      	uxtb	r5, r5
 8014680:	e78a      	b.n	8014598 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 8014682:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8014684:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8014688:	4630      	mov	r0, r6
 801468a:	f7fc ff29 	bl	80114e0 <ucdr_serialize_sequence_uint8_t>
 801468e:	4005      	ands	r5, r0
 8014690:	4628      	mov	r0, r5
 8014692:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014696:	2500      	movs	r5, #0
 8014698:	e77e      	b.n	8014598 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 801469a:	4028      	ands	r0, r5
 801469c:	b2c5      	uxtb	r5, r0
 801469e:	e77b      	b.n	8014598 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>

080146a0 <uxr_serialize_OBJK_Subscriber_Binary>:
 80146a0:	b570      	push	{r4, r5, r6, lr}
 80146a2:	460d      	mov	r5, r1
 80146a4:	7809      	ldrb	r1, [r1, #0]
 80146a6:	4606      	mov	r6, r0
 80146a8:	f7f8 fc32 	bl	800cf10 <ucdr_serialize_bool>
 80146ac:	782b      	ldrb	r3, [r5, #0]
 80146ae:	4604      	mov	r4, r0
 80146b0:	b94b      	cbnz	r3, 80146c6 <uxr_serialize_OBJK_Subscriber_Binary+0x26>
 80146b2:	7a29      	ldrb	r1, [r5, #8]
 80146b4:	4630      	mov	r0, r6
 80146b6:	f7f8 fc2b 	bl	800cf10 <ucdr_serialize_bool>
 80146ba:	7a2b      	ldrb	r3, [r5, #8]
 80146bc:	4004      	ands	r4, r0
 80146be:	b2e4      	uxtb	r4, r4
 80146c0:	b943      	cbnz	r3, 80146d4 <uxr_serialize_OBJK_Subscriber_Binary+0x34>
 80146c2:	4620      	mov	r0, r4
 80146c4:	bd70      	pop	{r4, r5, r6, pc}
 80146c6:	6869      	ldr	r1, [r5, #4]
 80146c8:	4630      	mov	r0, r6
 80146ca:	f004 ffa1 	bl	8019610 <ucdr_serialize_string>
 80146ce:	4004      	ands	r4, r0
 80146d0:	b2e4      	uxtb	r4, r4
 80146d2:	e7ee      	b.n	80146b2 <uxr_serialize_OBJK_Subscriber_Binary+0x12>
 80146d4:	f105 010c 	add.w	r1, r5, #12
 80146d8:	4630      	mov	r0, r6
 80146da:	f7ff ff53 	bl	8014584 <uxr_serialize_OBJK_Subscriber_Binary_Qos>
 80146de:	4004      	ands	r4, r0
 80146e0:	4620      	mov	r0, r4
 80146e2:	bd70      	pop	{r4, r5, r6, pc}

080146e4 <uxr_serialize_OBJK_Endpoint_QosBinary>:
 80146e4:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 80146e8:	4688      	mov	r8, r1
 80146ea:	8809      	ldrh	r1, [r1, #0]
 80146ec:	4681      	mov	r9, r0
 80146ee:	f7f8 fc69 	bl	800cfc4 <ucdr_serialize_uint16_t>
 80146f2:	f898 1002 	ldrb.w	r1, [r8, #2]
 80146f6:	4606      	mov	r6, r0
 80146f8:	4648      	mov	r0, r9
 80146fa:	f7f8 fc09 	bl	800cf10 <ucdr_serialize_bool>
 80146fe:	f898 3002 	ldrb.w	r3, [r8, #2]
 8014702:	4006      	ands	r6, r0
 8014704:	b2f5      	uxtb	r5, r6
 8014706:	b9eb      	cbnz	r3, 8014744 <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 8014708:	f898 1006 	ldrb.w	r1, [r8, #6]
 801470c:	4648      	mov	r0, r9
 801470e:	f7f8 fbff 	bl	800cf10 <ucdr_serialize_bool>
 8014712:	f898 3006 	ldrb.w	r3, [r8, #6]
 8014716:	4005      	ands	r5, r0
 8014718:	bb7b      	cbnz	r3, 801477a <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 801471a:	f898 100c 	ldrb.w	r1, [r8, #12]
 801471e:	4648      	mov	r0, r9
 8014720:	f7f8 fbf6 	bl	800cf10 <ucdr_serialize_bool>
 8014724:	f898 300c 	ldrb.w	r3, [r8, #12]
 8014728:	4005      	ands	r5, r0
 801472a:	b9f3      	cbnz	r3, 801476a <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 801472c:	f898 1014 	ldrb.w	r1, [r8, #20]
 8014730:	4648      	mov	r0, r9
 8014732:	f7f8 fbed 	bl	800cf10 <ucdr_serialize_bool>
 8014736:	f898 3014 	ldrb.w	r3, [r8, #20]
 801473a:	4005      	ands	r5, r0
 801473c:	b94b      	cbnz	r3, 8014752 <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 801473e:	4628      	mov	r0, r5
 8014740:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 8014744:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 8014748:	4648      	mov	r0, r9
 801474a:	f7f8 fc3b 	bl	800cfc4 <ucdr_serialize_uint16_t>
 801474e:	4005      	ands	r5, r0
 8014750:	e7da      	b.n	8014708 <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 8014752:	f8d8 2018 	ldr.w	r2, [r8, #24]
 8014756:	f108 011c 	add.w	r1, r8, #28
 801475a:	4648      	mov	r0, r9
 801475c:	f7fc fec0 	bl	80114e0 <ucdr_serialize_sequence_uint8_t>
 8014760:	4028      	ands	r0, r5
 8014762:	b2c5      	uxtb	r5, r0
 8014764:	4628      	mov	r0, r5
 8014766:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 801476a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801476e:	4648      	mov	r0, r9
 8014770:	f7f8 fe12 	bl	800d398 <ucdr_serialize_uint32_t>
 8014774:	4028      	ands	r0, r5
 8014776:	b2c5      	uxtb	r5, r0
 8014778:	e7d8      	b.n	801472c <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 801477a:	f8d8 1008 	ldr.w	r1, [r8, #8]
 801477e:	4648      	mov	r0, r9
 8014780:	f7f8 fe0a 	bl	800d398 <ucdr_serialize_uint32_t>
 8014784:	4028      	ands	r0, r5
 8014786:	b2c5      	uxtb	r5, r0
 8014788:	e7c7      	b.n	801471a <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 801478a:	bf00      	nop

0801478c <uxr_serialize_OBJK_DataReader_Binary>:
 801478c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801478e:	2202      	movs	r2, #2
 8014790:	460c      	mov	r4, r1
 8014792:	4606      	mov	r6, r0
 8014794:	f004 fdca 	bl	801932c <ucdr_serialize_array_uint8_t>
 8014798:	78a1      	ldrb	r1, [r4, #2]
 801479a:	4605      	mov	r5, r0
 801479c:	4630      	mov	r0, r6
 801479e:	f7f8 fbb7 	bl	800cf10 <ucdr_serialize_bool>
 80147a2:	78a3      	ldrb	r3, [r4, #2]
 80147a4:	4005      	ands	r5, r0
 80147a6:	b2ed      	uxtb	r5, r5
 80147a8:	b90b      	cbnz	r3, 80147ae <uxr_serialize_OBJK_DataReader_Binary+0x22>
 80147aa:	4628      	mov	r0, r5
 80147ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80147ae:	f104 0108 	add.w	r1, r4, #8
 80147b2:	4630      	mov	r0, r6
 80147b4:	f7ff ff96 	bl	80146e4 <uxr_serialize_OBJK_Endpoint_QosBinary>
 80147b8:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 80147bc:	4607      	mov	r7, r0
 80147be:	4630      	mov	r0, r6
 80147c0:	f7f8 fba6 	bl	800cf10 <ucdr_serialize_bool>
 80147c4:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 80147c8:	4038      	ands	r0, r7
 80147ca:	b2c7      	uxtb	r7, r0
 80147cc:	b95b      	cbnz	r3, 80147e6 <uxr_serialize_OBJK_DataReader_Binary+0x5a>
 80147ce:	f894 1038 	ldrb.w	r1, [r4, #56]	@ 0x38
 80147d2:	4630      	mov	r0, r6
 80147d4:	f7f8 fb9c 	bl	800cf10 <ucdr_serialize_bool>
 80147d8:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 80147dc:	4007      	ands	r7, r0
 80147de:	b94b      	cbnz	r3, 80147f4 <uxr_serialize_OBJK_DataReader_Binary+0x68>
 80147e0:	403d      	ands	r5, r7
 80147e2:	4628      	mov	r0, r5
 80147e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80147e6:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	@ 0x30
 80147ea:	4630      	mov	r0, r6
 80147ec:	f7f9 f82a 	bl	800d844 <ucdr_serialize_uint64_t>
 80147f0:	4007      	ands	r7, r0
 80147f2:	e7ec      	b.n	80147ce <uxr_serialize_OBJK_DataReader_Binary+0x42>
 80147f4:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 80147f6:	4630      	mov	r0, r6
 80147f8:	f004 ff0a 	bl	8019610 <ucdr_serialize_string>
 80147fc:	4007      	ands	r7, r0
 80147fe:	b2ff      	uxtb	r7, r7
 8014800:	e7ee      	b.n	80147e0 <uxr_serialize_OBJK_DataReader_Binary+0x54>
 8014802:	bf00      	nop

08014804 <uxr_serialize_OBJK_DataWriter_Binary>:
 8014804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014806:	2202      	movs	r2, #2
 8014808:	460d      	mov	r5, r1
 801480a:	4606      	mov	r6, r0
 801480c:	f004 fd8e 	bl	801932c <ucdr_serialize_array_uint8_t>
 8014810:	78a9      	ldrb	r1, [r5, #2]
 8014812:	4604      	mov	r4, r0
 8014814:	4630      	mov	r0, r6
 8014816:	f7f8 fb7b 	bl	800cf10 <ucdr_serialize_bool>
 801481a:	78ab      	ldrb	r3, [r5, #2]
 801481c:	4004      	ands	r4, r0
 801481e:	b2e4      	uxtb	r4, r4
 8014820:	b90b      	cbnz	r3, 8014826 <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 8014822:	4620      	mov	r0, r4
 8014824:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014826:	f105 0108 	add.w	r1, r5, #8
 801482a:	4630      	mov	r0, r6
 801482c:	f7ff ff5a 	bl	80146e4 <uxr_serialize_OBJK_Endpoint_QosBinary>
 8014830:	f895 102c 	ldrb.w	r1, [r5, #44]	@ 0x2c
 8014834:	4607      	mov	r7, r0
 8014836:	4630      	mov	r0, r6
 8014838:	f7f8 fb6a 	bl	800cf10 <ucdr_serialize_bool>
 801483c:	f895 302c 	ldrb.w	r3, [r5, #44]	@ 0x2c
 8014840:	4038      	ands	r0, r7
 8014842:	b2c7      	uxtb	r7, r0
 8014844:	b913      	cbnz	r3, 801484c <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 8014846:	403c      	ands	r4, r7
 8014848:	4620      	mov	r0, r4
 801484a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801484c:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	@ 0x30
 8014850:	4630      	mov	r0, r6
 8014852:	f7f8 fff7 	bl	800d844 <ucdr_serialize_uint64_t>
 8014856:	4007      	ands	r7, r0
 8014858:	e7f5      	b.n	8014846 <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 801485a:	bf00      	nop

0801485c <uxr_deserialize_ObjectVariant>:
 801485c:	b570      	push	{r4, r5, r6, lr}
 801485e:	4605      	mov	r5, r0
 8014860:	460e      	mov	r6, r1
 8014862:	f7f8 fb99 	bl	800cf98 <ucdr_deserialize_uint8_t>
 8014866:	b168      	cbz	r0, 8014884 <uxr_deserialize_ObjectVariant+0x28>
 8014868:	7833      	ldrb	r3, [r6, #0]
 801486a:	3b01      	subs	r3, #1
 801486c:	4604      	mov	r4, r0
 801486e:	2b0d      	cmp	r3, #13
 8014870:	d809      	bhi.n	8014886 <uxr_deserialize_ObjectVariant+0x2a>
 8014872:	e8df f003 	tbb	[pc, r3]
 8014876:	0a41      	.short	0x0a41
 8014878:	0a0a2323 	.word	0x0a0a2323
 801487c:	10080a0a 	.word	0x10080a0a
 8014880:	565c1010 	.word	0x565c1010
 8014884:	2400      	movs	r4, #0
 8014886:	4620      	mov	r0, r4
 8014888:	bd70      	pop	{r4, r5, r6, pc}
 801488a:	1d31      	adds	r1, r6, #4
 801488c:	4628      	mov	r0, r5
 801488e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014892:	f7ff bd55 	b.w	8014340 <uxr_deserialize_DATAWRITER_Representation>
 8014896:	1d31      	adds	r1, r6, #4
 8014898:	4628      	mov	r0, r5
 801489a:	f7f8 fb7d 	bl	800cf98 <ucdr_deserialize_uint8_t>
 801489e:	2800      	cmp	r0, #0
 80148a0:	d0f0      	beq.n	8014884 <uxr_deserialize_ObjectVariant+0x28>
 80148a2:	7933      	ldrb	r3, [r6, #4]
 80148a4:	2b01      	cmp	r3, #1
 80148a6:	d001      	beq.n	80148ac <uxr_deserialize_ObjectVariant+0x50>
 80148a8:	2b02      	cmp	r3, #2
 80148aa:	d1ec      	bne.n	8014886 <uxr_deserialize_ObjectVariant+0x2a>
 80148ac:	68b1      	ldr	r1, [r6, #8]
 80148ae:	4628      	mov	r0, r5
 80148b0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80148b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80148b8:	f004 beba 	b.w	8019630 <ucdr_deserialize_string>
 80148bc:	1d31      	adds	r1, r6, #4
 80148be:	4628      	mov	r0, r5
 80148c0:	f7f8 fb6a 	bl	800cf98 <ucdr_deserialize_uint8_t>
 80148c4:	4604      	mov	r4, r0
 80148c6:	b170      	cbz	r0, 80148e6 <uxr_deserialize_ObjectVariant+0x8a>
 80148c8:	7933      	ldrb	r3, [r6, #4]
 80148ca:	2b02      	cmp	r3, #2
 80148cc:	d04c      	beq.n	8014968 <uxr_deserialize_ObjectVariant+0x10c>
 80148ce:	2b03      	cmp	r3, #3
 80148d0:	d109      	bne.n	80148e6 <uxr_deserialize_ObjectVariant+0x8a>
 80148d2:	f106 0308 	add.w	r3, r6, #8
 80148d6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80148da:	f106 010c 	add.w	r1, r6, #12
 80148de:	4628      	mov	r0, r5
 80148e0:	f7fc fe10 	bl	8011504 <ucdr_deserialize_sequence_uint8_t>
 80148e4:	4604      	mov	r4, r0
 80148e6:	2202      	movs	r2, #2
 80148e8:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 80148ec:	4628      	mov	r0, r5
 80148ee:	f004 fd81 	bl	80193f4 <ucdr_deserialize_array_uint8_t>
 80148f2:	4020      	ands	r0, r4
 80148f4:	b2c4      	uxtb	r4, r0
 80148f6:	e7c6      	b.n	8014886 <uxr_deserialize_ObjectVariant+0x2a>
 80148f8:	1d31      	adds	r1, r6, #4
 80148fa:	4628      	mov	r0, r5
 80148fc:	f7f8 fb4c 	bl	800cf98 <ucdr_deserialize_uint8_t>
 8014900:	4604      	mov	r4, r0
 8014902:	b130      	cbz	r0, 8014912 <uxr_deserialize_ObjectVariant+0xb6>
 8014904:	7933      	ldrb	r3, [r6, #4]
 8014906:	2b02      	cmp	r3, #2
 8014908:	d036      	beq.n	8014978 <uxr_deserialize_ObjectVariant+0x11c>
 801490a:	2b03      	cmp	r3, #3
 801490c:	d03c      	beq.n	8014988 <uxr_deserialize_ObjectVariant+0x12c>
 801490e:	2b01      	cmp	r3, #1
 8014910:	d032      	beq.n	8014978 <uxr_deserialize_ObjectVariant+0x11c>
 8014912:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 8014916:	4628      	mov	r0, r5
 8014918:	f7f9 f8e4 	bl	800dae4 <ucdr_deserialize_int16_t>
 801491c:	4020      	ands	r0, r4
 801491e:	b2c4      	uxtb	r4, r0
 8014920:	e7b1      	b.n	8014886 <uxr_deserialize_ObjectVariant+0x2a>
 8014922:	1d31      	adds	r1, r6, #4
 8014924:	4628      	mov	r0, r5
 8014926:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801492a:	f7ff bbbf 	b.w	80140ac <uxr_deserialize_CLIENT_Representation>
 801492e:	2204      	movs	r2, #4
 8014930:	18b1      	adds	r1, r6, r2
 8014932:	4628      	mov	r0, r5
 8014934:	f004 fd5e 	bl	80193f4 <ucdr_deserialize_array_uint8_t>
 8014938:	2202      	movs	r2, #2
 801493a:	f106 0108 	add.w	r1, r6, #8
 801493e:	4604      	mov	r4, r0
 8014940:	4628      	mov	r0, r5
 8014942:	f004 fd57 	bl	80193f4 <ucdr_deserialize_array_uint8_t>
 8014946:	2202      	movs	r2, #2
 8014948:	4004      	ands	r4, r0
 801494a:	f106 010a 	add.w	r1, r6, #10
 801494e:	4628      	mov	r0, r5
 8014950:	f004 fd50 	bl	80193f4 <ucdr_deserialize_array_uint8_t>
 8014954:	b2e4      	uxtb	r4, r4
 8014956:	4603      	mov	r3, r0
 8014958:	f106 010c 	add.w	r1, r6, #12
 801495c:	4628      	mov	r0, r5
 801495e:	401c      	ands	r4, r3
 8014960:	f7f8 faec 	bl	800cf3c <ucdr_deserialize_bool>
 8014964:	4004      	ands	r4, r0
 8014966:	e78e      	b.n	8014886 <uxr_deserialize_ObjectVariant+0x2a>
 8014968:	68b1      	ldr	r1, [r6, #8]
 801496a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801496e:	4628      	mov	r0, r5
 8014970:	f004 fe5e 	bl	8019630 <ucdr_deserialize_string>
 8014974:	4604      	mov	r4, r0
 8014976:	e7b6      	b.n	80148e6 <uxr_deserialize_ObjectVariant+0x8a>
 8014978:	68b1      	ldr	r1, [r6, #8]
 801497a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801497e:	4628      	mov	r0, r5
 8014980:	f004 fe56 	bl	8019630 <ucdr_deserialize_string>
 8014984:	4604      	mov	r4, r0
 8014986:	e7c4      	b.n	8014912 <uxr_deserialize_ObjectVariant+0xb6>
 8014988:	f106 0308 	add.w	r3, r6, #8
 801498c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8014990:	f106 010c 	add.w	r1, r6, #12
 8014994:	4628      	mov	r0, r5
 8014996:	f7fc fdb5 	bl	8011504 <ucdr_deserialize_sequence_uint8_t>
 801499a:	4604      	mov	r4, r0
 801499c:	e7b9      	b.n	8014912 <uxr_deserialize_ObjectVariant+0xb6>
 801499e:	bf00      	nop

080149a0 <uxr_deserialize_BaseObjectRequest>:
 80149a0:	b570      	push	{r4, r5, r6, lr}
 80149a2:	2202      	movs	r2, #2
 80149a4:	4605      	mov	r5, r0
 80149a6:	460e      	mov	r6, r1
 80149a8:	f004 fd24 	bl	80193f4 <ucdr_deserialize_array_uint8_t>
 80149ac:	2202      	movs	r2, #2
 80149ae:	4604      	mov	r4, r0
 80149b0:	18b1      	adds	r1, r6, r2
 80149b2:	4628      	mov	r0, r5
 80149b4:	f004 fd1e 	bl	80193f4 <ucdr_deserialize_array_uint8_t>
 80149b8:	4020      	ands	r0, r4
 80149ba:	b2c0      	uxtb	r0, r0
 80149bc:	bd70      	pop	{r4, r5, r6, pc}
 80149be:	bf00      	nop

080149c0 <uxr_serialize_ActivityInfoVariant>:
 80149c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80149c4:	460d      	mov	r5, r1
 80149c6:	7809      	ldrb	r1, [r1, #0]
 80149c8:	4607      	mov	r7, r0
 80149ca:	f7f8 facf 	bl	800cf6c <ucdr_serialize_uint8_t>
 80149ce:	4681      	mov	r9, r0
 80149d0:	b138      	cbz	r0, 80149e2 <uxr_serialize_ActivityInfoVariant+0x22>
 80149d2:	782b      	ldrb	r3, [r5, #0]
 80149d4:	2b06      	cmp	r3, #6
 80149d6:	f000 8082 	beq.w	8014ade <uxr_serialize_ActivityInfoVariant+0x11e>
 80149da:	2b0d      	cmp	r3, #13
 80149dc:	d016      	beq.n	8014a0c <uxr_serialize_ActivityInfoVariant+0x4c>
 80149de:	2b05      	cmp	r3, #5
 80149e0:	d002      	beq.n	80149e8 <uxr_serialize_ActivityInfoVariant+0x28>
 80149e2:	4648      	mov	r0, r9
 80149e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80149e8:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 80149ec:	4638      	mov	r0, r7
 80149ee:	f7f8 fff9 	bl	800d9e4 <ucdr_serialize_int16_t>
 80149f2:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 80149f6:	4681      	mov	r9, r0
 80149f8:	4638      	mov	r0, r7
 80149fa:	f7f8 ff23 	bl	800d844 <ucdr_serialize_uint64_t>
 80149fe:	ea09 0000 	and.w	r0, r9, r0
 8014a02:	fa5f f980 	uxtb.w	r9, r0
 8014a06:	4648      	mov	r0, r9
 8014a08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014a0c:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8014a10:	4638      	mov	r0, r7
 8014a12:	f7f8 ffe7 	bl	800d9e4 <ucdr_serialize_int16_t>
 8014a16:	68e9      	ldr	r1, [r5, #12]
 8014a18:	4681      	mov	r9, r0
 8014a1a:	4638      	mov	r0, r7
 8014a1c:	f7f8 fcbc 	bl	800d398 <ucdr_serialize_uint32_t>
 8014a20:	68eb      	ldr	r3, [r5, #12]
 8014a22:	2b00      	cmp	r3, #0
 8014a24:	d0eb      	beq.n	80149fe <uxr_serialize_ActivityInfoVariant+0x3e>
 8014a26:	b320      	cbz	r0, 8014a72 <uxr_serialize_ActivityInfoVariant+0xb2>
 8014a28:	f105 080c 	add.w	r8, r5, #12
 8014a2c:	2600      	movs	r6, #0
 8014a2e:	eb06 0a46 	add.w	sl, r6, r6, lsl #1
 8014a32:	eb05 0aca 	add.w	sl, r5, sl, lsl #3
 8014a36:	f89a 1010 	ldrb.w	r1, [sl, #16]
 8014a3a:	4638      	mov	r0, r7
 8014a3c:	f7f8 fa96 	bl	800cf6c <ucdr_serialize_uint8_t>
 8014a40:	2800      	cmp	r0, #0
 8014a42:	d053      	beq.n	8014aec <uxr_serialize_ActivityInfoVariant+0x12c>
 8014a44:	f89a 3010 	ldrb.w	r3, [sl, #16]
 8014a48:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 8014a4c:	0074      	lsls	r4, r6, #1
 8014a4e:	00c9      	lsls	r1, r1, #3
 8014a50:	2b03      	cmp	r3, #3
 8014a52:	d854      	bhi.n	8014afe <uxr_serialize_ActivityInfoVariant+0x13e>
 8014a54:	e8df f003 	tbb	[pc, r3]
 8014a58:	02102132 	.word	0x02102132
 8014a5c:	4441      	add	r1, r8
 8014a5e:	4638      	mov	r0, r7
 8014a60:	6889      	ldr	r1, [r1, #8]
 8014a62:	f004 fdd5 	bl	8019610 <ucdr_serialize_string>
 8014a66:	68ea      	ldr	r2, [r5, #12]
 8014a68:	3601      	adds	r6, #1
 8014a6a:	4296      	cmp	r6, r2
 8014a6c:	d242      	bcs.n	8014af4 <uxr_serialize_ActivityInfoVariant+0x134>
 8014a6e:	2800      	cmp	r0, #0
 8014a70:	d1dd      	bne.n	8014a2e <uxr_serialize_ActivityInfoVariant+0x6e>
 8014a72:	f04f 0900 	mov.w	r9, #0
 8014a76:	e7b4      	b.n	80149e2 <uxr_serialize_ActivityInfoVariant+0x22>
 8014a78:	3108      	adds	r1, #8
 8014a7a:	4441      	add	r1, r8
 8014a7c:	2210      	movs	r2, #16
 8014a7e:	4638      	mov	r0, r7
 8014a80:	f004 fc54 	bl	801932c <ucdr_serialize_array_uint8_t>
 8014a84:	4434      	add	r4, r6
 8014a86:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 8014a8a:	4604      	mov	r4, r0
 8014a8c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8014a8e:	4638      	mov	r0, r7
 8014a90:	f7f8 fc82 	bl	800d398 <ucdr_serialize_uint32_t>
 8014a94:	4020      	ands	r0, r4
 8014a96:	b2c0      	uxtb	r0, r0
 8014a98:	e7e5      	b.n	8014a66 <uxr_serialize_ActivityInfoVariant+0xa6>
 8014a9a:	3108      	adds	r1, #8
 8014a9c:	4441      	add	r1, r8
 8014a9e:	2204      	movs	r2, #4
 8014aa0:	4638      	mov	r0, r7
 8014aa2:	f004 fc43 	bl	801932c <ucdr_serialize_array_uint8_t>
 8014aa6:	4434      	add	r4, r6
 8014aa8:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 8014aac:	4604      	mov	r4, r0
 8014aae:	8b19      	ldrh	r1, [r3, #24]
 8014ab0:	4638      	mov	r0, r7
 8014ab2:	f7f8 fa87 	bl	800cfc4 <ucdr_serialize_uint16_t>
 8014ab6:	4020      	ands	r0, r4
 8014ab8:	b2c0      	uxtb	r0, r0
 8014aba:	e7d4      	b.n	8014a66 <uxr_serialize_ActivityInfoVariant+0xa6>
 8014abc:	3108      	adds	r1, #8
 8014abe:	4441      	add	r1, r8
 8014ac0:	2202      	movs	r2, #2
 8014ac2:	4638      	mov	r0, r7
 8014ac4:	f004 fc32 	bl	801932c <ucdr_serialize_array_uint8_t>
 8014ac8:	4434      	add	r4, r6
 8014aca:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 8014ace:	4604      	mov	r4, r0
 8014ad0:	7d99      	ldrb	r1, [r3, #22]
 8014ad2:	4638      	mov	r0, r7
 8014ad4:	f7f8 fa4a 	bl	800cf6c <ucdr_serialize_uint8_t>
 8014ad8:	4020      	ands	r0, r4
 8014ada:	b2c0      	uxtb	r0, r0
 8014adc:	e7c3      	b.n	8014a66 <uxr_serialize_ActivityInfoVariant+0xa6>
 8014ade:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8014ae2:	4638      	mov	r0, r7
 8014ae4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014ae8:	f7f8 bf7c 	b.w	800d9e4 <ucdr_serialize_int16_t>
 8014aec:	68ea      	ldr	r2, [r5, #12]
 8014aee:	3601      	adds	r6, #1
 8014af0:	42b2      	cmp	r2, r6
 8014af2:	d8be      	bhi.n	8014a72 <uxr_serialize_ActivityInfoVariant+0xb2>
 8014af4:	ea09 0900 	and.w	r9, r9, r0
 8014af8:	fa5f f989 	uxtb.w	r9, r9
 8014afc:	e771      	b.n	80149e2 <uxr_serialize_ActivityInfoVariant+0x22>
 8014afe:	68eb      	ldr	r3, [r5, #12]
 8014b00:	3601      	adds	r6, #1
 8014b02:	429e      	cmp	r6, r3
 8014b04:	f10a 0a18 	add.w	sl, sl, #24
 8014b08:	d395      	bcc.n	8014a36 <uxr_serialize_ActivityInfoVariant+0x76>
 8014b0a:	e76a      	b.n	80149e2 <uxr_serialize_ActivityInfoVariant+0x22>

08014b0c <uxr_deserialize_BaseObjectReply>:
 8014b0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014b10:	2202      	movs	r2, #2
 8014b12:	4606      	mov	r6, r0
 8014b14:	460f      	mov	r7, r1
 8014b16:	f004 fc6d 	bl	80193f4 <ucdr_deserialize_array_uint8_t>
 8014b1a:	2202      	movs	r2, #2
 8014b1c:	18b9      	adds	r1, r7, r2
 8014b1e:	4605      	mov	r5, r0
 8014b20:	4630      	mov	r0, r6
 8014b22:	f004 fc67 	bl	80193f4 <ucdr_deserialize_array_uint8_t>
 8014b26:	1d39      	adds	r1, r7, #4
 8014b28:	4680      	mov	r8, r0
 8014b2a:	4630      	mov	r0, r6
 8014b2c:	f7f8 fa34 	bl	800cf98 <ucdr_deserialize_uint8_t>
 8014b30:	1d79      	adds	r1, r7, #5
 8014b32:	4604      	mov	r4, r0
 8014b34:	4630      	mov	r0, r6
 8014b36:	f7f8 fa2f 	bl	800cf98 <ucdr_deserialize_uint8_t>
 8014b3a:	ea05 0508 	and.w	r5, r5, r8
 8014b3e:	402c      	ands	r4, r5
 8014b40:	4020      	ands	r0, r4
 8014b42:	b2c0      	uxtb	r0, r0
 8014b44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014b48 <uxr_serialize_ReadSpecification>:
 8014b48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014b4c:	460e      	mov	r6, r1
 8014b4e:	7809      	ldrb	r1, [r1, #0]
 8014b50:	4607      	mov	r7, r0
 8014b52:	f7f8 fa0b 	bl	800cf6c <ucdr_serialize_uint8_t>
 8014b56:	7871      	ldrb	r1, [r6, #1]
 8014b58:	4604      	mov	r4, r0
 8014b5a:	4638      	mov	r0, r7
 8014b5c:	f7f8 fa06 	bl	800cf6c <ucdr_serialize_uint8_t>
 8014b60:	78b1      	ldrb	r1, [r6, #2]
 8014b62:	4004      	ands	r4, r0
 8014b64:	4638      	mov	r0, r7
 8014b66:	f7f8 f9d3 	bl	800cf10 <ucdr_serialize_bool>
 8014b6a:	78b3      	ldrb	r3, [r6, #2]
 8014b6c:	b2e4      	uxtb	r4, r4
 8014b6e:	4004      	ands	r4, r0
 8014b70:	b94b      	cbnz	r3, 8014b86 <uxr_serialize_ReadSpecification+0x3e>
 8014b72:	7a31      	ldrb	r1, [r6, #8]
 8014b74:	4638      	mov	r0, r7
 8014b76:	f7f8 f9cb 	bl	800cf10 <ucdr_serialize_bool>
 8014b7a:	7a33      	ldrb	r3, [r6, #8]
 8014b7c:	4004      	ands	r4, r0
 8014b7e:	b943      	cbnz	r3, 8014b92 <uxr_serialize_ReadSpecification+0x4a>
 8014b80:	4620      	mov	r0, r4
 8014b82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014b86:	6871      	ldr	r1, [r6, #4]
 8014b88:	4638      	mov	r0, r7
 8014b8a:	f004 fd41 	bl	8019610 <ucdr_serialize_string>
 8014b8e:	4004      	ands	r4, r0
 8014b90:	e7ef      	b.n	8014b72 <uxr_serialize_ReadSpecification+0x2a>
 8014b92:	8971      	ldrh	r1, [r6, #10]
 8014b94:	4638      	mov	r0, r7
 8014b96:	f7f8 fa15 	bl	800cfc4 <ucdr_serialize_uint16_t>
 8014b9a:	89b1      	ldrh	r1, [r6, #12]
 8014b9c:	4605      	mov	r5, r0
 8014b9e:	4638      	mov	r0, r7
 8014ba0:	f7f8 fa10 	bl	800cfc4 <ucdr_serialize_uint16_t>
 8014ba4:	89f1      	ldrh	r1, [r6, #14]
 8014ba6:	4005      	ands	r5, r0
 8014ba8:	4638      	mov	r0, r7
 8014baa:	f7f8 fa0b 	bl	800cfc4 <ucdr_serialize_uint16_t>
 8014bae:	8a31      	ldrh	r1, [r6, #16]
 8014bb0:	4680      	mov	r8, r0
 8014bb2:	4638      	mov	r0, r7
 8014bb4:	f7f8 fa06 	bl	800cfc4 <ucdr_serialize_uint16_t>
 8014bb8:	b2ed      	uxtb	r5, r5
 8014bba:	4025      	ands	r5, r4
 8014bbc:	ea08 0505 	and.w	r5, r8, r5
 8014bc0:	ea00 0405 	and.w	r4, r0, r5
 8014bc4:	4620      	mov	r0, r4
 8014bc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014bca:	bf00      	nop

08014bcc <uxr_serialize_CREATE_CLIENT_Payload>:
 8014bcc:	f7ff ba16 	b.w	8013ffc <uxr_serialize_CLIENT_Representation>

08014bd0 <uxr_serialize_CREATE_Payload>:
 8014bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014bd2:	2202      	movs	r2, #2
 8014bd4:	4607      	mov	r7, r0
 8014bd6:	460e      	mov	r6, r1
 8014bd8:	f004 fba8 	bl	801932c <ucdr_serialize_array_uint8_t>
 8014bdc:	2202      	movs	r2, #2
 8014bde:	18b1      	adds	r1, r6, r2
 8014be0:	4605      	mov	r5, r0
 8014be2:	4638      	mov	r0, r7
 8014be4:	f004 fba2 	bl	801932c <ucdr_serialize_array_uint8_t>
 8014be8:	7931      	ldrb	r1, [r6, #4]
 8014bea:	4604      	mov	r4, r0
 8014bec:	4638      	mov	r0, r7
 8014bee:	f7f8 f9bd 	bl	800cf6c <ucdr_serialize_uint8_t>
 8014bf2:	b170      	cbz	r0, 8014c12 <uxr_serialize_CREATE_Payload+0x42>
 8014bf4:	7933      	ldrb	r3, [r6, #4]
 8014bf6:	402c      	ands	r4, r5
 8014bf8:	3b01      	subs	r3, #1
 8014bfa:	b2e4      	uxtb	r4, r4
 8014bfc:	2b0d      	cmp	r3, #13
 8014bfe:	d809      	bhi.n	8014c14 <uxr_serialize_CREATE_Payload+0x44>
 8014c00:	e8df f003 	tbb	[pc, r3]
 8014c04:	23230a4c 	.word	0x23230a4c
 8014c08:	0a0a0a0a 	.word	0x0a0a0a0a
 8014c0c:	12121208 	.word	0x12121208
 8014c10:	3e45      	.short	0x3e45
 8014c12:	2400      	movs	r4, #0
 8014c14:	4620      	mov	r0, r4
 8014c16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014c18:	f106 0108 	add.w	r1, r6, #8
 8014c1c:	4638      	mov	r0, r7
 8014c1e:	f7ff faf3 	bl	8014208 <uxr_serialize_DATAWRITER_Representation>
 8014c22:	4004      	ands	r4, r0
 8014c24:	4620      	mov	r0, r4
 8014c26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014c28:	7a31      	ldrb	r1, [r6, #8]
 8014c2a:	4638      	mov	r0, r7
 8014c2c:	f7f8 f99e 	bl	800cf6c <ucdr_serialize_uint8_t>
 8014c30:	2800      	cmp	r0, #0
 8014c32:	d0ee      	beq.n	8014c12 <uxr_serialize_CREATE_Payload+0x42>
 8014c34:	7a33      	ldrb	r3, [r6, #8]
 8014c36:	2b01      	cmp	r3, #1
 8014c38:	d001      	beq.n	8014c3e <uxr_serialize_CREATE_Payload+0x6e>
 8014c3a:	2b02      	cmp	r3, #2
 8014c3c:	d1ea      	bne.n	8014c14 <uxr_serialize_CREATE_Payload+0x44>
 8014c3e:	68f1      	ldr	r1, [r6, #12]
 8014c40:	4638      	mov	r0, r7
 8014c42:	f004 fce5 	bl	8019610 <ucdr_serialize_string>
 8014c46:	4004      	ands	r4, r0
 8014c48:	e7e4      	b.n	8014c14 <uxr_serialize_CREATE_Payload+0x44>
 8014c4a:	7a31      	ldrb	r1, [r6, #8]
 8014c4c:	4638      	mov	r0, r7
 8014c4e:	f7f8 f98d 	bl	800cf6c <ucdr_serialize_uint8_t>
 8014c52:	4605      	mov	r5, r0
 8014c54:	b158      	cbz	r0, 8014c6e <uxr_serialize_CREATE_Payload+0x9e>
 8014c56:	7a33      	ldrb	r3, [r6, #8]
 8014c58:	2b02      	cmp	r3, #2
 8014c5a:	d034      	beq.n	8014cc6 <uxr_serialize_CREATE_Payload+0xf6>
 8014c5c:	2b03      	cmp	r3, #3
 8014c5e:	d106      	bne.n	8014c6e <uxr_serialize_CREATE_Payload+0x9e>
 8014c60:	68f2      	ldr	r2, [r6, #12]
 8014c62:	f106 0110 	add.w	r1, r6, #16
 8014c66:	4638      	mov	r0, r7
 8014c68:	f7fc fc3a 	bl	80114e0 <ucdr_serialize_sequence_uint8_t>
 8014c6c:	4605      	mov	r5, r0
 8014c6e:	2202      	movs	r2, #2
 8014c70:	f506 7104 	add.w	r1, r6, #528	@ 0x210
 8014c74:	4638      	mov	r0, r7
 8014c76:	f004 fb59 	bl	801932c <ucdr_serialize_array_uint8_t>
 8014c7a:	4028      	ands	r0, r5
 8014c7c:	4004      	ands	r4, r0
 8014c7e:	e7c9      	b.n	8014c14 <uxr_serialize_CREATE_Payload+0x44>
 8014c80:	f106 0108 	add.w	r1, r6, #8
 8014c84:	4638      	mov	r0, r7
 8014c86:	f7ff f9b9 	bl	8013ffc <uxr_serialize_CLIENT_Representation>
 8014c8a:	4004      	ands	r4, r0
 8014c8c:	e7c2      	b.n	8014c14 <uxr_serialize_CREATE_Payload+0x44>
 8014c8e:	f106 0108 	add.w	r1, r6, #8
 8014c92:	4638      	mov	r0, r7
 8014c94:	f7ff fa6e 	bl	8014174 <uxr_serialize_AGENT_Representation>
 8014c98:	4004      	ands	r4, r0
 8014c9a:	e7bb      	b.n	8014c14 <uxr_serialize_CREATE_Payload+0x44>
 8014c9c:	7a31      	ldrb	r1, [r6, #8]
 8014c9e:	4638      	mov	r0, r7
 8014ca0:	f7f8 f964 	bl	800cf6c <ucdr_serialize_uint8_t>
 8014ca4:	4605      	mov	r5, r0
 8014ca6:	b130      	cbz	r0, 8014cb6 <uxr_serialize_CREATE_Payload+0xe6>
 8014ca8:	7a33      	ldrb	r3, [r6, #8]
 8014caa:	2b02      	cmp	r3, #2
 8014cac:	d011      	beq.n	8014cd2 <uxr_serialize_CREATE_Payload+0x102>
 8014cae:	2b03      	cmp	r3, #3
 8014cb0:	d015      	beq.n	8014cde <uxr_serialize_CREATE_Payload+0x10e>
 8014cb2:	2b01      	cmp	r3, #1
 8014cb4:	d00d      	beq.n	8014cd2 <uxr_serialize_CREATE_Payload+0x102>
 8014cb6:	f9b6 1210 	ldrsh.w	r1, [r6, #528]	@ 0x210
 8014cba:	4638      	mov	r0, r7
 8014cbc:	f7f8 fe92 	bl	800d9e4 <ucdr_serialize_int16_t>
 8014cc0:	4028      	ands	r0, r5
 8014cc2:	4004      	ands	r4, r0
 8014cc4:	e7a6      	b.n	8014c14 <uxr_serialize_CREATE_Payload+0x44>
 8014cc6:	68f1      	ldr	r1, [r6, #12]
 8014cc8:	4638      	mov	r0, r7
 8014cca:	f004 fca1 	bl	8019610 <ucdr_serialize_string>
 8014cce:	4605      	mov	r5, r0
 8014cd0:	e7cd      	b.n	8014c6e <uxr_serialize_CREATE_Payload+0x9e>
 8014cd2:	68f1      	ldr	r1, [r6, #12]
 8014cd4:	4638      	mov	r0, r7
 8014cd6:	f004 fc9b 	bl	8019610 <ucdr_serialize_string>
 8014cda:	4605      	mov	r5, r0
 8014cdc:	e7eb      	b.n	8014cb6 <uxr_serialize_CREATE_Payload+0xe6>
 8014cde:	68f2      	ldr	r2, [r6, #12]
 8014ce0:	f106 0110 	add.w	r1, r6, #16
 8014ce4:	4638      	mov	r0, r7
 8014ce6:	f7fc fbfb 	bl	80114e0 <ucdr_serialize_sequence_uint8_t>
 8014cea:	4605      	mov	r5, r0
 8014cec:	e7e3      	b.n	8014cb6 <uxr_serialize_CREATE_Payload+0xe6>
 8014cee:	bf00      	nop

08014cf0 <uxr_deserialize_GET_INFO_Payload>:
 8014cf0:	b570      	push	{r4, r5, r6, lr}
 8014cf2:	2202      	movs	r2, #2
 8014cf4:	4605      	mov	r5, r0
 8014cf6:	460e      	mov	r6, r1
 8014cf8:	f004 fb7c 	bl	80193f4 <ucdr_deserialize_array_uint8_t>
 8014cfc:	2202      	movs	r2, #2
 8014cfe:	18b1      	adds	r1, r6, r2
 8014d00:	4604      	mov	r4, r0
 8014d02:	4628      	mov	r0, r5
 8014d04:	f004 fb76 	bl	80193f4 <ucdr_deserialize_array_uint8_t>
 8014d08:	1d31      	adds	r1, r6, #4
 8014d0a:	4004      	ands	r4, r0
 8014d0c:	4628      	mov	r0, r5
 8014d0e:	f7f8 fc73 	bl	800d5f8 <ucdr_deserialize_uint32_t>
 8014d12:	b2e4      	uxtb	r4, r4
 8014d14:	4020      	ands	r0, r4
 8014d16:	bd70      	pop	{r4, r5, r6, pc}

08014d18 <uxr_serialize_DELETE_Payload>:
 8014d18:	b570      	push	{r4, r5, r6, lr}
 8014d1a:	2202      	movs	r2, #2
 8014d1c:	4605      	mov	r5, r0
 8014d1e:	460e      	mov	r6, r1
 8014d20:	f004 fb04 	bl	801932c <ucdr_serialize_array_uint8_t>
 8014d24:	2202      	movs	r2, #2
 8014d26:	4604      	mov	r4, r0
 8014d28:	18b1      	adds	r1, r6, r2
 8014d2a:	4628      	mov	r0, r5
 8014d2c:	f004 fafe 	bl	801932c <ucdr_serialize_array_uint8_t>
 8014d30:	4020      	ands	r0, r4
 8014d32:	b2c0      	uxtb	r0, r0
 8014d34:	bd70      	pop	{r4, r5, r6, pc}
 8014d36:	bf00      	nop

08014d38 <uxr_deserialize_STATUS_AGENT_Payload>:
 8014d38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014d3c:	4605      	mov	r5, r0
 8014d3e:	460e      	mov	r6, r1
 8014d40:	f7f8 f92a 	bl	800cf98 <ucdr_deserialize_uint8_t>
 8014d44:	1c71      	adds	r1, r6, #1
 8014d46:	4604      	mov	r4, r0
 8014d48:	4628      	mov	r0, r5
 8014d4a:	f7f8 f925 	bl	800cf98 <ucdr_deserialize_uint8_t>
 8014d4e:	2204      	movs	r2, #4
 8014d50:	18b1      	adds	r1, r6, r2
 8014d52:	4680      	mov	r8, r0
 8014d54:	4628      	mov	r0, r5
 8014d56:	f004 fb4d 	bl	80193f4 <ucdr_deserialize_array_uint8_t>
 8014d5a:	f106 0108 	add.w	r1, r6, #8
 8014d5e:	4607      	mov	r7, r0
 8014d60:	2202      	movs	r2, #2
 8014d62:	4628      	mov	r0, r5
 8014d64:	f004 fb46 	bl	80193f4 <ucdr_deserialize_array_uint8_t>
 8014d68:	ea04 0308 	and.w	r3, r4, r8
 8014d6c:	b2db      	uxtb	r3, r3
 8014d6e:	ea03 0407 	and.w	r4, r3, r7
 8014d72:	2202      	movs	r2, #2
 8014d74:	4607      	mov	r7, r0
 8014d76:	f106 010a 	add.w	r1, r6, #10
 8014d7a:	4628      	mov	r0, r5
 8014d7c:	f004 fb3a 	bl	80193f4 <ucdr_deserialize_array_uint8_t>
 8014d80:	f106 010c 	add.w	r1, r6, #12
 8014d84:	4603      	mov	r3, r0
 8014d86:	4628      	mov	r0, r5
 8014d88:	461d      	mov	r5, r3
 8014d8a:	f7f8 f8d7 	bl	800cf3c <ucdr_deserialize_bool>
 8014d8e:	403c      	ands	r4, r7
 8014d90:	4025      	ands	r5, r4
 8014d92:	4028      	ands	r0, r5
 8014d94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014d98 <uxr_deserialize_STATUS_Payload>:
 8014d98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014d9c:	2202      	movs	r2, #2
 8014d9e:	4606      	mov	r6, r0
 8014da0:	460f      	mov	r7, r1
 8014da2:	f004 fb27 	bl	80193f4 <ucdr_deserialize_array_uint8_t>
 8014da6:	2202      	movs	r2, #2
 8014da8:	18b9      	adds	r1, r7, r2
 8014daa:	4605      	mov	r5, r0
 8014dac:	4630      	mov	r0, r6
 8014dae:	f004 fb21 	bl	80193f4 <ucdr_deserialize_array_uint8_t>
 8014db2:	1d39      	adds	r1, r7, #4
 8014db4:	4680      	mov	r8, r0
 8014db6:	4630      	mov	r0, r6
 8014db8:	f7f8 f8ee 	bl	800cf98 <ucdr_deserialize_uint8_t>
 8014dbc:	1d79      	adds	r1, r7, #5
 8014dbe:	4604      	mov	r4, r0
 8014dc0:	4630      	mov	r0, r6
 8014dc2:	f7f8 f8e9 	bl	800cf98 <ucdr_deserialize_uint8_t>
 8014dc6:	ea05 0508 	and.w	r5, r5, r8
 8014dca:	402c      	ands	r4, r5
 8014dcc:	4020      	ands	r0, r4
 8014dce:	b2c0      	uxtb	r0, r0
 8014dd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014dd4 <uxr_serialize_INFO_Payload>:
 8014dd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014dd8:	2202      	movs	r2, #2
 8014dda:	460c      	mov	r4, r1
 8014ddc:	4605      	mov	r5, r0
 8014dde:	f004 faa5 	bl	801932c <ucdr_serialize_array_uint8_t>
 8014de2:	2202      	movs	r2, #2
 8014de4:	18a1      	adds	r1, r4, r2
 8014de6:	4680      	mov	r8, r0
 8014de8:	4628      	mov	r0, r5
 8014dea:	f004 fa9f 	bl	801932c <ucdr_serialize_array_uint8_t>
 8014dee:	7921      	ldrb	r1, [r4, #4]
 8014df0:	4607      	mov	r7, r0
 8014df2:	4628      	mov	r0, r5
 8014df4:	f7f8 f8ba 	bl	800cf6c <ucdr_serialize_uint8_t>
 8014df8:	7961      	ldrb	r1, [r4, #5]
 8014dfa:	4606      	mov	r6, r0
 8014dfc:	4628      	mov	r0, r5
 8014dfe:	f7f8 f8b5 	bl	800cf6c <ucdr_serialize_uint8_t>
 8014e02:	ea08 0807 	and.w	r8, r8, r7
 8014e06:	ea06 0608 	and.w	r6, r6, r8
 8014e0a:	4006      	ands	r6, r0
 8014e0c:	7a21      	ldrb	r1, [r4, #8]
 8014e0e:	4628      	mov	r0, r5
 8014e10:	f7f8 f87e 	bl	800cf10 <ucdr_serialize_bool>
 8014e14:	7a23      	ldrb	r3, [r4, #8]
 8014e16:	b2f7      	uxtb	r7, r6
 8014e18:	4606      	mov	r6, r0
 8014e1a:	b96b      	cbnz	r3, 8014e38 <uxr_serialize_INFO_Payload+0x64>
 8014e1c:	f894 121c 	ldrb.w	r1, [r4, #540]	@ 0x21c
 8014e20:	4628      	mov	r0, r5
 8014e22:	f7f8 f875 	bl	800cf10 <ucdr_serialize_bool>
 8014e26:	f894 321c 	ldrb.w	r3, [r4, #540]	@ 0x21c
 8014e2a:	4030      	ands	r0, r6
 8014e2c:	b2c6      	uxtb	r6, r0
 8014e2e:	b983      	cbnz	r3, 8014e52 <uxr_serialize_INFO_Payload+0x7e>
 8014e30:	ea06 0007 	and.w	r0, r6, r7
 8014e34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014e38:	7b21      	ldrb	r1, [r4, #12]
 8014e3a:	4628      	mov	r0, r5
 8014e3c:	f7f8 f896 	bl	800cf6c <ucdr_serialize_uint8_t>
 8014e40:	b188      	cbz	r0, 8014e66 <uxr_serialize_INFO_Payload+0x92>
 8014e42:	f104 010c 	add.w	r1, r4, #12
 8014e46:	4628      	mov	r0, r5
 8014e48:	f7ff fa06 	bl	8014258 <uxr_serialize_ObjectVariant.part.0>
 8014e4c:	4030      	ands	r0, r6
 8014e4e:	b2c6      	uxtb	r6, r0
 8014e50:	e7e4      	b.n	8014e1c <uxr_serialize_INFO_Payload+0x48>
 8014e52:	f504 7108 	add.w	r1, r4, #544	@ 0x220
 8014e56:	4628      	mov	r0, r5
 8014e58:	f7ff fdb2 	bl	80149c0 <uxr_serialize_ActivityInfoVariant>
 8014e5c:	4006      	ands	r6, r0
 8014e5e:	ea06 0007 	and.w	r0, r6, r7
 8014e62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014e66:	4606      	mov	r6, r0
 8014e68:	e7d8      	b.n	8014e1c <uxr_serialize_INFO_Payload+0x48>
 8014e6a:	bf00      	nop

08014e6c <uxr_serialize_READ_DATA_Payload>:
 8014e6c:	b570      	push	{r4, r5, r6, lr}
 8014e6e:	2202      	movs	r2, #2
 8014e70:	4605      	mov	r5, r0
 8014e72:	460e      	mov	r6, r1
 8014e74:	f004 fa5a 	bl	801932c <ucdr_serialize_array_uint8_t>
 8014e78:	2202      	movs	r2, #2
 8014e7a:	18b1      	adds	r1, r6, r2
 8014e7c:	4604      	mov	r4, r0
 8014e7e:	4628      	mov	r0, r5
 8014e80:	f004 fa54 	bl	801932c <ucdr_serialize_array_uint8_t>
 8014e84:	1d31      	adds	r1, r6, #4
 8014e86:	4004      	ands	r4, r0
 8014e88:	4628      	mov	r0, r5
 8014e8a:	f7ff fe5d 	bl	8014b48 <uxr_serialize_ReadSpecification>
 8014e8e:	b2e4      	uxtb	r4, r4
 8014e90:	4020      	ands	r0, r4
 8014e92:	bd70      	pop	{r4, r5, r6, pc}

08014e94 <uxr_serialize_WRITE_DATA_Payload_Data>:
 8014e94:	b570      	push	{r4, r5, r6, lr}
 8014e96:	2202      	movs	r2, #2
 8014e98:	4605      	mov	r5, r0
 8014e9a:	460e      	mov	r6, r1
 8014e9c:	f004 fa46 	bl	801932c <ucdr_serialize_array_uint8_t>
 8014ea0:	2202      	movs	r2, #2
 8014ea2:	4604      	mov	r4, r0
 8014ea4:	18b1      	adds	r1, r6, r2
 8014ea6:	4628      	mov	r0, r5
 8014ea8:	f004 fa40 	bl	801932c <ucdr_serialize_array_uint8_t>
 8014eac:	4020      	ands	r0, r4
 8014eae:	b2c0      	uxtb	r0, r0
 8014eb0:	bd70      	pop	{r4, r5, r6, pc}
 8014eb2:	bf00      	nop

08014eb4 <uxr_serialize_ACKNACK_Payload>:
 8014eb4:	b570      	push	{r4, r5, r6, lr}
 8014eb6:	460c      	mov	r4, r1
 8014eb8:	460e      	mov	r6, r1
 8014eba:	f834 1b02 	ldrh.w	r1, [r4], #2
 8014ebe:	4605      	mov	r5, r0
 8014ec0:	f7f8 f880 	bl	800cfc4 <ucdr_serialize_uint16_t>
 8014ec4:	2202      	movs	r2, #2
 8014ec6:	4621      	mov	r1, r4
 8014ec8:	4604      	mov	r4, r0
 8014eca:	4628      	mov	r0, r5
 8014ecc:	f004 fa2e 	bl	801932c <ucdr_serialize_array_uint8_t>
 8014ed0:	7931      	ldrb	r1, [r6, #4]
 8014ed2:	4004      	ands	r4, r0
 8014ed4:	4628      	mov	r0, r5
 8014ed6:	f7f8 f849 	bl	800cf6c <ucdr_serialize_uint8_t>
 8014eda:	b2e4      	uxtb	r4, r4
 8014edc:	4020      	ands	r0, r4
 8014ede:	bd70      	pop	{r4, r5, r6, pc}

08014ee0 <uxr_deserialize_ACKNACK_Payload>:
 8014ee0:	b570      	push	{r4, r5, r6, lr}
 8014ee2:	4605      	mov	r5, r0
 8014ee4:	460e      	mov	r6, r1
 8014ee6:	f7f8 f96d 	bl	800d1c4 <ucdr_deserialize_uint16_t>
 8014eea:	2202      	movs	r2, #2
 8014eec:	18b1      	adds	r1, r6, r2
 8014eee:	4604      	mov	r4, r0
 8014ef0:	4628      	mov	r0, r5
 8014ef2:	f004 fa7f 	bl	80193f4 <ucdr_deserialize_array_uint8_t>
 8014ef6:	1d31      	adds	r1, r6, #4
 8014ef8:	4004      	ands	r4, r0
 8014efa:	4628      	mov	r0, r5
 8014efc:	f7f8 f84c 	bl	800cf98 <ucdr_deserialize_uint8_t>
 8014f00:	b2e4      	uxtb	r4, r4
 8014f02:	4020      	ands	r0, r4
 8014f04:	bd70      	pop	{r4, r5, r6, pc}
 8014f06:	bf00      	nop

08014f08 <uxr_serialize_HEARTBEAT_Payload>:
 8014f08:	b570      	push	{r4, r5, r6, lr}
 8014f0a:	460d      	mov	r5, r1
 8014f0c:	8809      	ldrh	r1, [r1, #0]
 8014f0e:	4606      	mov	r6, r0
 8014f10:	f7f8 f858 	bl	800cfc4 <ucdr_serialize_uint16_t>
 8014f14:	8869      	ldrh	r1, [r5, #2]
 8014f16:	4604      	mov	r4, r0
 8014f18:	4630      	mov	r0, r6
 8014f1a:	f7f8 f853 	bl	800cfc4 <ucdr_serialize_uint16_t>
 8014f1e:	7929      	ldrb	r1, [r5, #4]
 8014f20:	4004      	ands	r4, r0
 8014f22:	4630      	mov	r0, r6
 8014f24:	f7f8 f822 	bl	800cf6c <ucdr_serialize_uint8_t>
 8014f28:	b2e4      	uxtb	r4, r4
 8014f2a:	4020      	ands	r0, r4
 8014f2c:	bd70      	pop	{r4, r5, r6, pc}
 8014f2e:	bf00      	nop

08014f30 <uxr_deserialize_HEARTBEAT_Payload>:
 8014f30:	b570      	push	{r4, r5, r6, lr}
 8014f32:	4605      	mov	r5, r0
 8014f34:	460e      	mov	r6, r1
 8014f36:	f7f8 f945 	bl	800d1c4 <ucdr_deserialize_uint16_t>
 8014f3a:	1cb1      	adds	r1, r6, #2
 8014f3c:	4604      	mov	r4, r0
 8014f3e:	4628      	mov	r0, r5
 8014f40:	f7f8 f940 	bl	800d1c4 <ucdr_deserialize_uint16_t>
 8014f44:	1d31      	adds	r1, r6, #4
 8014f46:	4004      	ands	r4, r0
 8014f48:	4628      	mov	r0, r5
 8014f4a:	f7f8 f825 	bl	800cf98 <ucdr_deserialize_uint8_t>
 8014f4e:	b2e4      	uxtb	r4, r4
 8014f50:	4020      	ands	r0, r4
 8014f52:	bd70      	pop	{r4, r5, r6, pc}

08014f54 <uxr_serialize_TIMESTAMP_Payload>:
 8014f54:	b570      	push	{r4, r5, r6, lr}
 8014f56:	460d      	mov	r5, r1
 8014f58:	6809      	ldr	r1, [r1, #0]
 8014f5a:	4606      	mov	r6, r0
 8014f5c:	f7f8 fe36 	bl	800dbcc <ucdr_serialize_int32_t>
 8014f60:	6869      	ldr	r1, [r5, #4]
 8014f62:	4604      	mov	r4, r0
 8014f64:	4630      	mov	r0, r6
 8014f66:	f7f8 fa17 	bl	800d398 <ucdr_serialize_uint32_t>
 8014f6a:	4020      	ands	r0, r4
 8014f6c:	b2c0      	uxtb	r0, r0
 8014f6e:	bd70      	pop	{r4, r5, r6, pc}

08014f70 <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 8014f70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014f74:	4605      	mov	r5, r0
 8014f76:	460e      	mov	r6, r1
 8014f78:	f7f8 fec0 	bl	800dcfc <ucdr_deserialize_int32_t>
 8014f7c:	1d31      	adds	r1, r6, #4
 8014f7e:	4607      	mov	r7, r0
 8014f80:	4628      	mov	r0, r5
 8014f82:	f7f8 fb39 	bl	800d5f8 <ucdr_deserialize_uint32_t>
 8014f86:	f106 0108 	add.w	r1, r6, #8
 8014f8a:	4680      	mov	r8, r0
 8014f8c:	4628      	mov	r0, r5
 8014f8e:	f7f8 feb5 	bl	800dcfc <ucdr_deserialize_int32_t>
 8014f92:	f106 010c 	add.w	r1, r6, #12
 8014f96:	4604      	mov	r4, r0
 8014f98:	4628      	mov	r0, r5
 8014f9a:	f7f8 fb2d 	bl	800d5f8 <ucdr_deserialize_uint32_t>
 8014f9e:	ea07 0708 	and.w	r7, r7, r8
 8014fa2:	403c      	ands	r4, r7
 8014fa4:	f106 0110 	add.w	r1, r6, #16
 8014fa8:	4004      	ands	r4, r0
 8014faa:	4628      	mov	r0, r5
 8014fac:	f7f8 fea6 	bl	800dcfc <ucdr_deserialize_int32_t>
 8014fb0:	f106 0114 	add.w	r1, r6, #20
 8014fb4:	4607      	mov	r7, r0
 8014fb6:	4628      	mov	r0, r5
 8014fb8:	f7f8 fb1e 	bl	800d5f8 <ucdr_deserialize_uint32_t>
 8014fbc:	b2e4      	uxtb	r4, r4
 8014fbe:	403c      	ands	r4, r7
 8014fc0:	4020      	ands	r0, r4
 8014fc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014fc6:	bf00      	nop

08014fc8 <uxr_serialize_SampleIdentity>:
 8014fc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014fcc:	220c      	movs	r2, #12
 8014fce:	4604      	mov	r4, r0
 8014fd0:	460d      	mov	r5, r1
 8014fd2:	f004 f9ab 	bl	801932c <ucdr_serialize_array_uint8_t>
 8014fd6:	2203      	movs	r2, #3
 8014fd8:	f105 010c 	add.w	r1, r5, #12
 8014fdc:	4607      	mov	r7, r0
 8014fde:	4620      	mov	r0, r4
 8014fe0:	f004 f9a4 	bl	801932c <ucdr_serialize_array_uint8_t>
 8014fe4:	7be9      	ldrb	r1, [r5, #15]
 8014fe6:	4680      	mov	r8, r0
 8014fe8:	4620      	mov	r0, r4
 8014fea:	f7f7 ffbf 	bl	800cf6c <ucdr_serialize_uint8_t>
 8014fee:	6929      	ldr	r1, [r5, #16]
 8014ff0:	4606      	mov	r6, r0
 8014ff2:	4620      	mov	r0, r4
 8014ff4:	f7f8 fdea 	bl	800dbcc <ucdr_serialize_int32_t>
 8014ff8:	6969      	ldr	r1, [r5, #20]
 8014ffa:	4603      	mov	r3, r0
 8014ffc:	4620      	mov	r0, r4
 8014ffe:	ea07 0708 	and.w	r7, r7, r8
 8015002:	461c      	mov	r4, r3
 8015004:	f7f8 f9c8 	bl	800d398 <ucdr_serialize_uint32_t>
 8015008:	403e      	ands	r6, r7
 801500a:	4034      	ands	r4, r6
 801500c:	4020      	ands	r0, r4
 801500e:	b2c0      	uxtb	r0, r0
 8015010:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015014 <uxr_deserialize_SampleIdentity>:
 8015014:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015018:	220c      	movs	r2, #12
 801501a:	4604      	mov	r4, r0
 801501c:	460d      	mov	r5, r1
 801501e:	f004 f9e9 	bl	80193f4 <ucdr_deserialize_array_uint8_t>
 8015022:	2203      	movs	r2, #3
 8015024:	f105 010c 	add.w	r1, r5, #12
 8015028:	4607      	mov	r7, r0
 801502a:	4620      	mov	r0, r4
 801502c:	f004 f9e2 	bl	80193f4 <ucdr_deserialize_array_uint8_t>
 8015030:	f105 010f 	add.w	r1, r5, #15
 8015034:	4680      	mov	r8, r0
 8015036:	4620      	mov	r0, r4
 8015038:	f7f7 ffae 	bl	800cf98 <ucdr_deserialize_uint8_t>
 801503c:	f105 0110 	add.w	r1, r5, #16
 8015040:	4606      	mov	r6, r0
 8015042:	4620      	mov	r0, r4
 8015044:	f7f8 fe5a 	bl	800dcfc <ucdr_deserialize_int32_t>
 8015048:	f105 0114 	add.w	r1, r5, #20
 801504c:	4603      	mov	r3, r0
 801504e:	4620      	mov	r0, r4
 8015050:	ea07 0708 	and.w	r7, r7, r8
 8015054:	461c      	mov	r4, r3
 8015056:	f7f8 facf 	bl	800d5f8 <ucdr_deserialize_uint32_t>
 801505a:	403e      	ands	r6, r7
 801505c:	4034      	ands	r4, r6
 801505e:	4020      	ands	r0, r4
 8015060:	b2c0      	uxtb	r0, r0
 8015062:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015066:	bf00      	nop

08015068 <rcl_client_get_rmw_handle>:
 8015068:	b118      	cbz	r0, 8015072 <rcl_client_get_rmw_handle+0xa>
 801506a:	6800      	ldr	r0, [r0, #0]
 801506c:	b108      	cbz	r0, 8015072 <rcl_client_get_rmw_handle+0xa>
 801506e:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8015072:	4770      	bx	lr

08015074 <rcl_send_request>:
 8015074:	b570      	push	{r4, r5, r6, lr}
 8015076:	b082      	sub	sp, #8
 8015078:	b1e8      	cbz	r0, 80150b6 <rcl_send_request+0x42>
 801507a:	4604      	mov	r4, r0
 801507c:	6800      	ldr	r0, [r0, #0]
 801507e:	b1d0      	cbz	r0, 80150b6 <rcl_send_request+0x42>
 8015080:	f8d0 3108 	ldr.w	r3, [r0, #264]	@ 0x108
 8015084:	b1bb      	cbz	r3, 80150b6 <rcl_send_request+0x42>
 8015086:	460e      	mov	r6, r1
 8015088:	b1d1      	cbz	r1, 80150c0 <rcl_send_request+0x4c>
 801508a:	4615      	mov	r5, r2
 801508c:	b1c2      	cbz	r2, 80150c0 <rcl_send_request+0x4c>
 801508e:	2105      	movs	r1, #5
 8015090:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 8015094:	f002 fd04 	bl	8017aa0 <__atomic_load_8>
 8015098:	6823      	ldr	r3, [r4, #0]
 801509a:	e9c5 0100 	strd	r0, r1, [r5]
 801509e:	462a      	mov	r2, r5
 80150a0:	4631      	mov	r1, r6
 80150a2:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 80150a6:	f003 fbff 	bl	80188a8 <rmw_send_request>
 80150aa:	4606      	mov	r6, r0
 80150ac:	b160      	cbz	r0, 80150c8 <rcl_send_request+0x54>
 80150ae:	2601      	movs	r6, #1
 80150b0:	4630      	mov	r0, r6
 80150b2:	b002      	add	sp, #8
 80150b4:	bd70      	pop	{r4, r5, r6, pc}
 80150b6:	f44f 76fa 	mov.w	r6, #500	@ 0x1f4
 80150ba:	4630      	mov	r0, r6
 80150bc:	b002      	add	sp, #8
 80150be:	bd70      	pop	{r4, r5, r6, pc}
 80150c0:	260b      	movs	r6, #11
 80150c2:	4630      	mov	r0, r6
 80150c4:	b002      	add	sp, #8
 80150c6:	bd70      	pop	{r4, r5, r6, pc}
 80150c8:	6820      	ldr	r0, [r4, #0]
 80150ca:	2105      	movs	r1, #5
 80150cc:	e9d5 2300 	ldrd	r2, r3, [r5]
 80150d0:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 80150d4:	9100      	str	r1, [sp, #0]
 80150d6:	f002 fd4f 	bl	8017b78 <__atomic_exchange_8>
 80150da:	4630      	mov	r0, r6
 80150dc:	b002      	add	sp, #8
 80150de:	bd70      	pop	{r4, r5, r6, pc}

080150e0 <rcl_take_response>:
 80150e0:	b570      	push	{r4, r5, r6, lr}
 80150e2:	468e      	mov	lr, r1
 80150e4:	460c      	mov	r4, r1
 80150e6:	4616      	mov	r6, r2
 80150e8:	4605      	mov	r5, r0
 80150ea:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80150ee:	b08c      	sub	sp, #48	@ 0x30
 80150f0:	f10d 0c18 	add.w	ip, sp, #24
 80150f4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80150f8:	e89e 0003 	ldmia.w	lr, {r0, r1}
 80150fc:	e88c 0003 	stmia.w	ip, {r0, r1}
 8015100:	b35d      	cbz	r5, 801515a <rcl_take_response+0x7a>
 8015102:	682b      	ldr	r3, [r5, #0]
 8015104:	b34b      	cbz	r3, 801515a <rcl_take_response+0x7a>
 8015106:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 801510a:	b330      	cbz	r0, 801515a <rcl_take_response+0x7a>
 801510c:	b346      	cbz	r6, 8015160 <rcl_take_response+0x80>
 801510e:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 8015168 <rcl_take_response+0x88>
 8015112:	2300      	movs	r3, #0
 8015114:	f88d 3007 	strb.w	r3, [sp, #7]
 8015118:	4632      	mov	r2, r6
 801511a:	f10d 0307 	add.w	r3, sp, #7
 801511e:	a902      	add	r1, sp, #8
 8015120:	ed8d 7b02 	vstr	d7, [sp, #8]
 8015124:	ed8d 7b04 	vstr	d7, [sp, #16]
 8015128:	f003 fcc6 	bl	8018ab8 <rmw_take_response>
 801512c:	4605      	mov	r5, r0
 801512e:	b9c8      	cbnz	r0, 8015164 <rcl_take_response+0x84>
 8015130:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8015134:	f240 13f5 	movw	r3, #501	@ 0x1f5
 8015138:	2a00      	cmp	r2, #0
 801513a:	bf08      	it	eq
 801513c:	461d      	moveq	r5, r3
 801513e:	f10d 0e18 	add.w	lr, sp, #24
 8015142:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8015146:	46a4      	mov	ip, r4
 8015148:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801514c:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8015150:	e88c 0003 	stmia.w	ip, {r0, r1}
 8015154:	4628      	mov	r0, r5
 8015156:	b00c      	add	sp, #48	@ 0x30
 8015158:	bd70      	pop	{r4, r5, r6, pc}
 801515a:	f44f 75fa 	mov.w	r5, #500	@ 0x1f4
 801515e:	e7ee      	b.n	801513e <rcl_take_response+0x5e>
 8015160:	250b      	movs	r5, #11
 8015162:	e7ec      	b.n	801513e <rcl_take_response+0x5e>
 8015164:	2501      	movs	r5, #1
 8015166:	e7ea      	b.n	801513e <rcl_take_response+0x5e>
	...

08015170 <rcl_client_is_valid>:
 8015170:	b130      	cbz	r0, 8015180 <rcl_client_is_valid+0x10>
 8015172:	6800      	ldr	r0, [r0, #0]
 8015174:	b120      	cbz	r0, 8015180 <rcl_client_is_valid+0x10>
 8015176:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 801517a:	3800      	subs	r0, #0
 801517c:	bf18      	it	ne
 801517e:	2001      	movne	r0, #1
 8015180:	4770      	bx	lr
 8015182:	bf00      	nop

08015184 <rcl_convert_rmw_ret_to_rcl_ret>:
 8015184:	280b      	cmp	r0, #11
 8015186:	dc0d      	bgt.n	80151a4 <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 8015188:	2800      	cmp	r0, #0
 801518a:	db09      	blt.n	80151a0 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 801518c:	280b      	cmp	r0, #11
 801518e:	d807      	bhi.n	80151a0 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8015190:	e8df f000 	tbb	[pc, r0]
 8015194:	07060607 	.word	0x07060607
 8015198:	06060606 	.word	0x06060606
 801519c:	07070606 	.word	0x07070606
 80151a0:	2001      	movs	r0, #1
 80151a2:	4770      	bx	lr
 80151a4:	28cb      	cmp	r0, #203	@ 0xcb
 80151a6:	bf18      	it	ne
 80151a8:	2001      	movne	r0, #1
 80151aa:	4770      	bx	lr

080151ac <rcl_get_zero_initialized_context>:
 80151ac:	4a03      	ldr	r2, [pc, #12]	@ (80151bc <rcl_get_zero_initialized_context+0x10>)
 80151ae:	4603      	mov	r3, r0
 80151b0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80151b4:	e883 0003 	stmia.w	r3, {r0, r1}
 80151b8:	4618      	mov	r0, r3
 80151ba:	4770      	bx	lr
 80151bc:	0801e93c 	.word	0x0801e93c

080151c0 <rcl_context_is_valid>:
 80151c0:	b118      	cbz	r0, 80151ca <rcl_context_is_valid+0xa>
 80151c2:	6840      	ldr	r0, [r0, #4]
 80151c4:	3800      	subs	r0, #0
 80151c6:	bf18      	it	ne
 80151c8:	2001      	movne	r0, #1
 80151ca:	4770      	bx	lr

080151cc <__cleanup_context>:
 80151cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80151d0:	4606      	mov	r6, r0
 80151d2:	6800      	ldr	r0, [r0, #0]
 80151d4:	2300      	movs	r3, #0
 80151d6:	6073      	str	r3, [r6, #4]
 80151d8:	2800      	cmp	r0, #0
 80151da:	d049      	beq.n	8015270 <__cleanup_context+0xa4>
 80151dc:	6947      	ldr	r7, [r0, #20]
 80151de:	f8d0 8004 	ldr.w	r8, [r0, #4]
 80151e2:	f8d0 9010 	ldr.w	r9, [r0, #16]
 80151e6:	b137      	cbz	r7, 80151f6 <__cleanup_context+0x2a>
 80151e8:	3014      	adds	r0, #20
 80151ea:	f7f9 fa79 	bl	800e6e0 <rcl_init_options_fini>
 80151ee:	4607      	mov	r7, r0
 80151f0:	2800      	cmp	r0, #0
 80151f2:	d144      	bne.n	801527e <__cleanup_context+0xb2>
 80151f4:	6830      	ldr	r0, [r6, #0]
 80151f6:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80151f8:	b143      	cbz	r3, 801520c <__cleanup_context+0x40>
 80151fa:	3028      	adds	r0, #40	@ 0x28
 80151fc:	f7fa fece 	bl	800ff9c <rmw_context_fini>
 8015200:	b118      	cbz	r0, 801520a <__cleanup_context+0x3e>
 8015202:	2f00      	cmp	r7, #0
 8015204:	d03e      	beq.n	8015284 <__cleanup_context+0xb8>
 8015206:	f7fa fbd7 	bl	800f9b8 <rcutils_reset_error>
 801520a:	6830      	ldr	r0, [r6, #0]
 801520c:	6a03      	ldr	r3, [r0, #32]
 801520e:	b1db      	cbz	r3, 8015248 <__cleanup_context+0x7c>
 8015210:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 8015214:	2a01      	cmp	r2, #1
 8015216:	f17c 0100 	sbcs.w	r1, ip, #0
 801521a:	db11      	blt.n	8015240 <__cleanup_context+0x74>
 801521c:	2400      	movs	r4, #0
 801521e:	4625      	mov	r5, r4
 8015220:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8015224:	4649      	mov	r1, r9
 8015226:	b1b8      	cbz	r0, 8015258 <__cleanup_context+0x8c>
 8015228:	47c0      	blx	r8
 801522a:	6833      	ldr	r3, [r6, #0]
 801522c:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 8015230:	3401      	adds	r4, #1
 8015232:	f145 0500 	adc.w	r5, r5, #0
 8015236:	4294      	cmp	r4, r2
 8015238:	eb75 010c 	sbcs.w	r1, r5, ip
 801523c:	6a1b      	ldr	r3, [r3, #32]
 801523e:	dbef      	blt.n	8015220 <__cleanup_context+0x54>
 8015240:	4618      	mov	r0, r3
 8015242:	4649      	mov	r1, r9
 8015244:	47c0      	blx	r8
 8015246:	6830      	ldr	r0, [r6, #0]
 8015248:	4649      	mov	r1, r9
 801524a:	47c0      	blx	r8
 801524c:	2300      	movs	r3, #0
 801524e:	e9c6 3300 	strd	r3, r3, [r6]
 8015252:	4638      	mov	r0, r7
 8015254:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015258:	3401      	adds	r4, #1
 801525a:	f145 0500 	adc.w	r5, r5, #0
 801525e:	4294      	cmp	r4, r2
 8015260:	eb75 010c 	sbcs.w	r1, r5, ip
 8015264:	dbdc      	blt.n	8015220 <__cleanup_context+0x54>
 8015266:	4618      	mov	r0, r3
 8015268:	4649      	mov	r1, r9
 801526a:	47c0      	blx	r8
 801526c:	6830      	ldr	r0, [r6, #0]
 801526e:	e7eb      	b.n	8015248 <__cleanup_context+0x7c>
 8015270:	4607      	mov	r7, r0
 8015272:	2300      	movs	r3, #0
 8015274:	e9c6 3300 	strd	r3, r3, [r6]
 8015278:	4638      	mov	r0, r7
 801527a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801527e:	f7fa fb9b 	bl	800f9b8 <rcutils_reset_error>
 8015282:	e7b7      	b.n	80151f4 <__cleanup_context+0x28>
 8015284:	f7ff ff7e 	bl	8015184 <rcl_convert_rmw_ret_to_rcl_ret>
 8015288:	4607      	mov	r7, r0
 801528a:	e7bc      	b.n	8015206 <__cleanup_context+0x3a>

0801528c <rcl_init>:
 801528c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015290:	1e05      	subs	r5, r0, #0
 8015292:	b09c      	sub	sp, #112	@ 0x70
 8015294:	460e      	mov	r6, r1
 8015296:	4690      	mov	r8, r2
 8015298:	461f      	mov	r7, r3
 801529a:	f340 8099 	ble.w	80153d0 <rcl_init+0x144>
 801529e:	2900      	cmp	r1, #0
 80152a0:	f000 8099 	beq.w	80153d6 <rcl_init+0x14a>
 80152a4:	f1a1 0e04 	sub.w	lr, r1, #4
 80152a8:	f04f 0c00 	mov.w	ip, #0
 80152ac:	f85e 4f04 	ldr.w	r4, [lr, #4]!
 80152b0:	f10c 0c01 	add.w	ip, ip, #1
 80152b4:	2c00      	cmp	r4, #0
 80152b6:	f000 808e 	beq.w	80153d6 <rcl_init+0x14a>
 80152ba:	4565      	cmp	r5, ip
 80152bc:	d1f6      	bne.n	80152ac <rcl_init+0x20>
 80152be:	f1b8 0f00 	cmp.w	r8, #0
 80152c2:	f000 8088 	beq.w	80153d6 <rcl_init+0x14a>
 80152c6:	f8d8 4000 	ldr.w	r4, [r8]
 80152ca:	2c00      	cmp	r4, #0
 80152cc:	f000 8083 	beq.w	80153d6 <rcl_init+0x14a>
 80152d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80152d2:	f10d 0c5c 	add.w	ip, sp, #92	@ 0x5c
 80152d6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80152da:	6823      	ldr	r3, [r4, #0]
 80152dc:	f8cc 3000 	str.w	r3, [ip]
 80152e0:	a817      	add	r0, sp, #92	@ 0x5c
 80152e2:	f7fa fb43 	bl	800f96c <rcutils_allocator_is_valid>
 80152e6:	2800      	cmp	r0, #0
 80152e8:	d075      	beq.n	80153d6 <rcl_init+0x14a>
 80152ea:	2f00      	cmp	r7, #0
 80152ec:	d073      	beq.n	80153d6 <rcl_init+0x14a>
 80152ee:	683b      	ldr	r3, [r7, #0]
 80152f0:	2b00      	cmp	r3, #0
 80152f2:	d175      	bne.n	80153e0 <rcl_init+0x154>
 80152f4:	e9dd 321a 	ldrd	r3, r2, [sp, #104]	@ 0x68
 80152f8:	2178      	movs	r1, #120	@ 0x78
 80152fa:	2001      	movs	r0, #1
 80152fc:	4798      	blx	r3
 80152fe:	4604      	mov	r4, r0
 8015300:	6038      	str	r0, [r7, #0]
 8015302:	2800      	cmp	r0, #0
 8015304:	f000 80a0 	beq.w	8015448 <rcl_init+0x1bc>
 8015308:	a802      	add	r0, sp, #8
 801530a:	f002 ff09 	bl	8018120 <rmw_get_zero_initialized_context>
 801530e:	a902      	add	r1, sp, #8
 8015310:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8015314:	2250      	movs	r2, #80	@ 0x50
 8015316:	ac17      	add	r4, sp, #92	@ 0x5c
 8015318:	f006 f8e9 	bl	801b4ee <memcpy>
 801531c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801531e:	f8d7 e000 	ldr.w	lr, [r7]
 8015322:	46f4      	mov	ip, lr
 8015324:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015328:	6823      	ldr	r3, [r4, #0]
 801532a:	f8cc 3000 	str.w	r3, [ip]
 801532e:	f10e 0114 	add.w	r1, lr, #20
 8015332:	4640      	mov	r0, r8
 8015334:	f7f9 f9fe 	bl	800e734 <rcl_init_options_copy>
 8015338:	4604      	mov	r4, r0
 801533a:	2800      	cmp	r0, #0
 801533c:	d144      	bne.n	80153c8 <rcl_init+0x13c>
 801533e:	f8d7 9000 	ldr.w	r9, [r7]
 8015342:	ea4f 78e5 	mov.w	r8, r5, asr #31
 8015346:	f8c9 0020 	str.w	r0, [r9, #32]
 801534a:	f8c9 5018 	str.w	r5, [r9, #24]
 801534e:	f8c9 801c 	str.w	r8, [r9, #28]
 8015352:	2d00      	cmp	r5, #0
 8015354:	d04b      	beq.n	80153ee <rcl_init+0x162>
 8015356:	2e00      	cmp	r6, #0
 8015358:	d049      	beq.n	80153ee <rcl_init+0x162>
 801535a:	e9dd 321a 	ldrd	r3, r2, [sp, #104]	@ 0x68
 801535e:	2104      	movs	r1, #4
 8015360:	4628      	mov	r0, r5
 8015362:	4798      	blx	r3
 8015364:	f8c9 0020 	str.w	r0, [r9, #32]
 8015368:	f8d7 9000 	ldr.w	r9, [r7]
 801536c:	f8d9 3020 	ldr.w	r3, [r9, #32]
 8015370:	46ca      	mov	sl, r9
 8015372:	b343      	cbz	r3, 80153c6 <rcl_init+0x13a>
 8015374:	2d01      	cmp	r5, #1
 8015376:	f178 0300 	sbcs.w	r3, r8, #0
 801537a:	db38      	blt.n	80153ee <rcl_init+0x162>
 801537c:	2400      	movs	r4, #0
 801537e:	3e04      	subs	r6, #4
 8015380:	46a1      	mov	r9, r4
 8015382:	e00b      	b.n	801539c <rcl_init+0x110>
 8015384:	6831      	ldr	r1, [r6, #0]
 8015386:	f006 f8b2 	bl	801b4ee <memcpy>
 801538a:	3401      	adds	r4, #1
 801538c:	f149 0900 	adc.w	r9, r9, #0
 8015390:	45c8      	cmp	r8, r9
 8015392:	bf08      	it	eq
 8015394:	42a5      	cmpeq	r5, r4
 8015396:	d028      	beq.n	80153ea <rcl_init+0x15e>
 8015398:	f8d7 a000 	ldr.w	sl, [r7]
 801539c:	f856 0f04 	ldr.w	r0, [r6, #4]!
 80153a0:	f7ea ff48 	bl	8000234 <strlen>
 80153a4:	1c42      	adds	r2, r0, #1
 80153a6:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80153a8:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 80153aa:	f8da a020 	ldr.w	sl, [sl, #32]
 80153ae:	9201      	str	r2, [sp, #4]
 80153b0:	4610      	mov	r0, r2
 80153b2:	4798      	blx	r3
 80153b4:	683b      	ldr	r3, [r7, #0]
 80153b6:	f84a 0024 	str.w	r0, [sl, r4, lsl #2]
 80153ba:	6a1b      	ldr	r3, [r3, #32]
 80153bc:	9a01      	ldr	r2, [sp, #4]
 80153be:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80153c2:	2800      	cmp	r0, #0
 80153c4:	d1de      	bne.n	8015384 <rcl_init+0xf8>
 80153c6:	240a      	movs	r4, #10
 80153c8:	4638      	mov	r0, r7
 80153ca:	f7ff feff 	bl	80151cc <__cleanup_context>
 80153ce:	e003      	b.n	80153d8 <rcl_init+0x14c>
 80153d0:	2900      	cmp	r1, #0
 80153d2:	f43f af74 	beq.w	80152be <rcl_init+0x32>
 80153d6:	240b      	movs	r4, #11
 80153d8:	4620      	mov	r0, r4
 80153da:	b01c      	add	sp, #112	@ 0x70
 80153dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80153e0:	2464      	movs	r4, #100	@ 0x64
 80153e2:	4620      	mov	r0, r4
 80153e4:	b01c      	add	sp, #112	@ 0x70
 80153e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80153ea:	f8d7 9000 	ldr.w	r9, [r7]
 80153ee:	491d      	ldr	r1, [pc, #116]	@ (8015464 <rcl_init+0x1d8>)
 80153f0:	680b      	ldr	r3, [r1, #0]
 80153f2:	3301      	adds	r3, #1
 80153f4:	d023      	beq.n	801543e <rcl_init+0x1b2>
 80153f6:	600b      	str	r3, [r1, #0]
 80153f8:	461a      	mov	r2, r3
 80153fa:	2400      	movs	r4, #0
 80153fc:	f8d9 0014 	ldr.w	r0, [r9, #20]
 8015400:	607b      	str	r3, [r7, #4]
 8015402:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8015404:	6182      	str	r2, [r0, #24]
 8015406:	3301      	adds	r3, #1
 8015408:	61c4      	str	r4, [r0, #28]
 801540a:	d01f      	beq.n	801544c <rcl_init+0x1c0>
 801540c:	f890 3030 	ldrb.w	r3, [r0, #48]	@ 0x30
 8015410:	b94b      	cbnz	r3, 8015426 <rcl_init+0x19a>
 8015412:	3030      	adds	r0, #48	@ 0x30
 8015414:	f000 f828 	bl	8015468 <rcl_get_localhost_only>
 8015418:	4604      	mov	r4, r0
 801541a:	2800      	cmp	r0, #0
 801541c:	d1d4      	bne.n	80153c8 <rcl_init+0x13c>
 801541e:	f8d7 9000 	ldr.w	r9, [r7]
 8015422:	f8d9 0014 	ldr.w	r0, [r9, #20]
 8015426:	f109 0128 	add.w	r1, r9, #40	@ 0x28
 801542a:	3018      	adds	r0, #24
 801542c:	f7fa fc80 	bl	800fd30 <rmw_init>
 8015430:	4604      	mov	r4, r0
 8015432:	2800      	cmp	r0, #0
 8015434:	d0d0      	beq.n	80153d8 <rcl_init+0x14c>
 8015436:	f7ff fea5 	bl	8015184 <rcl_convert_rmw_ret_to_rcl_ret>
 801543a:	4604      	mov	r4, r0
 801543c:	e7c4      	b.n	80153c8 <rcl_init+0x13c>
 801543e:	2201      	movs	r2, #1
 8015440:	461c      	mov	r4, r3
 8015442:	600a      	str	r2, [r1, #0]
 8015444:	4613      	mov	r3, r2
 8015446:	e7d9      	b.n	80153fc <rcl_init+0x170>
 8015448:	240a      	movs	r4, #10
 801544a:	e7c5      	b.n	80153d8 <rcl_init+0x14c>
 801544c:	3024      	adds	r0, #36	@ 0x24
 801544e:	f004 fe5f 	bl	801a110 <rcl_get_default_domain_id>
 8015452:	4604      	mov	r4, r0
 8015454:	2800      	cmp	r0, #0
 8015456:	d1b7      	bne.n	80153c8 <rcl_init+0x13c>
 8015458:	f8d7 9000 	ldr.w	r9, [r7]
 801545c:	f8d9 0014 	ldr.w	r0, [r9, #20]
 8015460:	e7d4      	b.n	801540c <rcl_init+0x180>
 8015462:	bf00      	nop
 8015464:	2000b568 	.word	0x2000b568

08015468 <rcl_get_localhost_only>:
 8015468:	b510      	push	{r4, lr}
 801546a:	b082      	sub	sp, #8
 801546c:	2300      	movs	r3, #0
 801546e:	9301      	str	r3, [sp, #4]
 8015470:	b1b8      	cbz	r0, 80154a2 <rcl_get_localhost_only+0x3a>
 8015472:	4604      	mov	r4, r0
 8015474:	a901      	add	r1, sp, #4
 8015476:	480c      	ldr	r0, [pc, #48]	@ (80154a8 <rcl_get_localhost_only+0x40>)
 8015478:	f002 fbb6 	bl	8017be8 <rcutils_get_env>
 801547c:	b110      	cbz	r0, 8015484 <rcl_get_localhost_only+0x1c>
 801547e:	2001      	movs	r0, #1
 8015480:	b002      	add	sp, #8
 8015482:	bd10      	pop	{r4, pc}
 8015484:	9b01      	ldr	r3, [sp, #4]
 8015486:	b113      	cbz	r3, 801548e <rcl_get_localhost_only+0x26>
 8015488:	781a      	ldrb	r2, [r3, #0]
 801548a:	2a31      	cmp	r2, #49	@ 0x31
 801548c:	d004      	beq.n	8015498 <rcl_get_localhost_only+0x30>
 801548e:	2302      	movs	r3, #2
 8015490:	2000      	movs	r0, #0
 8015492:	7023      	strb	r3, [r4, #0]
 8015494:	b002      	add	sp, #8
 8015496:	bd10      	pop	{r4, pc}
 8015498:	785b      	ldrb	r3, [r3, #1]
 801549a:	2b00      	cmp	r3, #0
 801549c:	d1f7      	bne.n	801548e <rcl_get_localhost_only+0x26>
 801549e:	2301      	movs	r3, #1
 80154a0:	e7f6      	b.n	8015490 <rcl_get_localhost_only+0x28>
 80154a2:	200b      	movs	r0, #11
 80154a4:	b002      	add	sp, #8
 80154a6:	bd10      	pop	{r4, pc}
 80154a8:	0801e048 	.word	0x0801e048

080154ac <rcl_get_zero_initialized_node>:
 80154ac:	4a03      	ldr	r2, [pc, #12]	@ (80154bc <rcl_get_zero_initialized_node+0x10>)
 80154ae:	4603      	mov	r3, r0
 80154b0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80154b4:	e883 0003 	stmia.w	r3, {r0, r1}
 80154b8:	4618      	mov	r0, r3
 80154ba:	4770      	bx	lr
 80154bc:	0801e944 	.word	0x0801e944

080154c0 <rcl_node_init>:
 80154c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80154c4:	b0a9      	sub	sp, #164	@ 0xa4
 80154c6:	4604      	mov	r4, r0
 80154c8:	f8dd 80c8 	ldr.w	r8, [sp, #200]	@ 0xc8
 80154cc:	a823      	add	r0, sp, #140	@ 0x8c
 80154ce:	460e      	mov	r6, r1
 80154d0:	4615      	mov	r5, r2
 80154d2:	461f      	mov	r7, r3
 80154d4:	f005 f890 	bl	801a5f8 <rcl_guard_condition_get_default_options>
 80154d8:	f1b8 0f00 	cmp.w	r8, #0
 80154dc:	f000 80e6 	beq.w	80156ac <rcl_node_init+0x1ec>
 80154e0:	4640      	mov	r0, r8
 80154e2:	f7fa fa43 	bl	800f96c <rcutils_allocator_is_valid>
 80154e6:	2800      	cmp	r0, #0
 80154e8:	f000 80e0 	beq.w	80156ac <rcl_node_init+0x1ec>
 80154ec:	2e00      	cmp	r6, #0
 80154ee:	f000 80dd 	beq.w	80156ac <rcl_node_init+0x1ec>
 80154f2:	2d00      	cmp	r5, #0
 80154f4:	f000 80da 	beq.w	80156ac <rcl_node_init+0x1ec>
 80154f8:	2c00      	cmp	r4, #0
 80154fa:	f000 80d7 	beq.w	80156ac <rcl_node_init+0x1ec>
 80154fe:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8015502:	f1b9 0f00 	cmp.w	r9, #0
 8015506:	f040 80fd 	bne.w	8015704 <rcl_node_init+0x244>
 801550a:	2f00      	cmp	r7, #0
 801550c:	f000 80ce 	beq.w	80156ac <rcl_node_init+0x1ec>
 8015510:	4638      	mov	r0, r7
 8015512:	f7ff fe55 	bl	80151c0 <rcl_context_is_valid>
 8015516:	4682      	mov	sl, r0
 8015518:	2800      	cmp	r0, #0
 801551a:	f000 80cd 	beq.w	80156b8 <rcl_node_init+0x1f8>
 801551e:	464a      	mov	r2, r9
 8015520:	a922      	add	r1, sp, #136	@ 0x88
 8015522:	4630      	mov	r0, r6
 8015524:	f8cd 9088 	str.w	r9, [sp, #136]	@ 0x88
 8015528:	f002 ff98 	bl	801845c <rmw_validate_node_name>
 801552c:	4681      	mov	r9, r0
 801552e:	2800      	cmp	r0, #0
 8015530:	f040 80be 	bne.w	80156b0 <rcl_node_init+0x1f0>
 8015534:	9822      	ldr	r0, [sp, #136]	@ 0x88
 8015536:	2800      	cmp	r0, #0
 8015538:	f040 80f0 	bne.w	801571c <rcl_node_init+0x25c>
 801553c:	4628      	mov	r0, r5
 801553e:	f7ea fe79 	bl	8000234 <strlen>
 8015542:	2800      	cmp	r0, #0
 8015544:	f040 80bb 	bne.w	80156be <rcl_node_init+0x1fe>
 8015548:	4d7c      	ldr	r5, [pc, #496]	@ (801573c <rcl_node_init+0x27c>)
 801554a:	a922      	add	r1, sp, #136	@ 0x88
 801554c:	2200      	movs	r2, #0
 801554e:	4628      	mov	r0, r5
 8015550:	f002 ff66 	bl	8018420 <rmw_validate_namespace>
 8015554:	4681      	mov	r9, r0
 8015556:	2800      	cmp	r0, #0
 8015558:	f040 80aa 	bne.w	80156b0 <rcl_node_init+0x1f0>
 801555c:	4682      	mov	sl, r0
 801555e:	9822      	ldr	r0, [sp, #136]	@ 0x88
 8015560:	2800      	cmp	r0, #0
 8015562:	f040 80e0 	bne.w	8015726 <rcl_node_init+0x266>
 8015566:	f8d8 3000 	ldr.w	r3, [r8]
 801556a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801556e:	2078      	movs	r0, #120	@ 0x78
 8015570:	4798      	blx	r3
 8015572:	4681      	mov	r9, r0
 8015574:	6060      	str	r0, [r4, #4]
 8015576:	2800      	cmp	r0, #0
 8015578:	f000 80ca 	beq.w	8015710 <rcl_node_init+0x250>
 801557c:	2200      	movs	r2, #0
 801557e:	2300      	movs	r3, #0
 8015580:	e9c9 231a 	strd	r2, r3, [r9, #104]	@ 0x68
 8015584:	e9c9 231c 	strd	r2, r3, [r9, #112]	@ 0x70
 8015588:	a808      	add	r0, sp, #32
 801558a:	f000 f907 	bl	801579c <rcl_node_get_default_options>
 801558e:	a908      	add	r1, sp, #32
 8015590:	4648      	mov	r0, r9
 8015592:	2268      	movs	r2, #104	@ 0x68
 8015594:	f005 ffab 	bl	801b4ee <memcpy>
 8015598:	6861      	ldr	r1, [r4, #4]
 801559a:	6027      	str	r7, [r4, #0]
 801559c:	4640      	mov	r0, r8
 801559e:	f000 f90b 	bl	80157b8 <rcl_node_options_copy>
 80155a2:	2800      	cmp	r0, #0
 80155a4:	d158      	bne.n	8015658 <rcl_node_init+0x198>
 80155a6:	4628      	mov	r0, r5
 80155a8:	f7ea fe44 	bl	8000234 <strlen>
 80155ac:	4428      	add	r0, r5
 80155ae:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 80155b2:	e9cd 5603 	strd	r5, r6, [sp, #12]
 80155b6:	2b2f      	cmp	r3, #47	@ 0x2f
 80155b8:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80155bc:	9300      	str	r3, [sp, #0]
 80155be:	bf0c      	ite	eq
 80155c0:	4b5f      	ldreq	r3, [pc, #380]	@ (8015740 <rcl_node_init+0x280>)
 80155c2:	4b60      	ldrne	r3, [pc, #384]	@ (8015744 <rcl_node_init+0x284>)
 80155c4:	9302      	str	r3, [sp, #8]
 80155c6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80155ca:	9301      	str	r3, [sp, #4]
 80155cc:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 80155d0:	f8d4 9004 	ldr.w	r9, [r4, #4]
 80155d4:	f002 fb20 	bl	8017c18 <rcutils_format_string_limit>
 80155d8:	6823      	ldr	r3, [r4, #0]
 80155da:	f8c9 0074 	str.w	r0, [r9, #116]	@ 0x74
 80155de:	6818      	ldr	r0, [r3, #0]
 80155e0:	4631      	mov	r1, r6
 80155e2:	3028      	adds	r0, #40	@ 0x28
 80155e4:	462a      	mov	r2, r5
 80155e6:	6866      	ldr	r6, [r4, #4]
 80155e8:	f7fa fd84 	bl	80100f4 <rmw_create_node>
 80155ec:	6863      	ldr	r3, [r4, #4]
 80155ee:	66b0      	str	r0, [r6, #104]	@ 0x68
 80155f0:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 80155f2:	2800      	cmp	r0, #0
 80155f4:	d032      	beq.n	801565c <rcl_node_init+0x19c>
 80155f6:	f7fa fe11 	bl	801021c <rmw_node_get_graph_guard_condition>
 80155fa:	4681      	mov	r9, r0
 80155fc:	b360      	cbz	r0, 8015658 <rcl_node_init+0x198>
 80155fe:	f8d8 3000 	ldr.w	r3, [r8]
 8015602:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8015606:	6866      	ldr	r6, [r4, #4]
 8015608:	2008      	movs	r0, #8
 801560a:	4798      	blx	r3
 801560c:	6863      	ldr	r3, [r4, #4]
 801560e:	66f0      	str	r0, [r6, #108]	@ 0x6c
 8015610:	f8d3 b06c 	ldr.w	fp, [r3, #108]	@ 0x6c
 8015614:	f1bb 0f00 	cmp.w	fp, #0
 8015618:	d020      	beq.n	801565c <rcl_node_init+0x19c>
 801561a:	a806      	add	r0, sp, #24
 801561c:	f004 ff10 	bl	801a440 <rcl_get_zero_initialized_guard_condition>
 8015620:	a806      	add	r0, sp, #24
 8015622:	c803      	ldmia	r0, {r0, r1}
 8015624:	6863      	ldr	r3, [r4, #4]
 8015626:	46c4      	mov	ip, r8
 8015628:	f8d3 e06c 	ldr.w	lr, [r3, #108]	@ 0x6c
 801562c:	e88b 0003 	stmia.w	fp, {r0, r1}
 8015630:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8015634:	ae23      	add	r6, sp, #140	@ 0x8c
 8015636:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8015638:	f8dc 3000 	ldr.w	r3, [ip]
 801563c:	6033      	str	r3, [r6, #0]
 801563e:	ab28      	add	r3, sp, #160	@ 0xa0
 8015640:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 8015644:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8015648:	4649      	mov	r1, r9
 801564a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801564c:	463a      	mov	r2, r7
 801564e:	4670      	mov	r0, lr
 8015650:	f004 ff4c 	bl	801a4ec <rcl_guard_condition_init_from_rmw>
 8015654:	4681      	mov	r9, r0
 8015656:	b328      	cbz	r0, 80156a4 <rcl_node_init+0x1e4>
 8015658:	6863      	ldr	r3, [r4, #4]
 801565a:	b1f3      	cbz	r3, 801569a <rcl_node_init+0x1da>
 801565c:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 801565e:	b128      	cbz	r0, 801566c <rcl_node_init+0x1ac>
 8015660:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8015664:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8015668:	4798      	blx	r3
 801566a:	6863      	ldr	r3, [r4, #4]
 801566c:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 801566e:	b110      	cbz	r0, 8015676 <rcl_node_init+0x1b6>
 8015670:	f7fa fd58 	bl	8010124 <rmw_destroy_node>
 8015674:	6863      	ldr	r3, [r4, #4]
 8015676:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 8015678:	b148      	cbz	r0, 801568e <rcl_node_init+0x1ce>
 801567a:	f004 ff97 	bl	801a5ac <rcl_guard_condition_fini>
 801567e:	6863      	ldr	r3, [r4, #4]
 8015680:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8015684:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 8015686:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801568a:	4798      	blx	r3
 801568c:	6863      	ldr	r3, [r4, #4]
 801568e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8015692:	4618      	mov	r0, r3
 8015694:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8015698:	4798      	blx	r3
 801569a:	2300      	movs	r3, #0
 801569c:	e9c4 3300 	strd	r3, r3, [r4]
 80156a0:	f04f 0901 	mov.w	r9, #1
 80156a4:	f1ba 0f00 	cmp.w	sl, #0
 80156a8:	d125      	bne.n	80156f6 <rcl_node_init+0x236>
 80156aa:	e001      	b.n	80156b0 <rcl_node_init+0x1f0>
 80156ac:	f04f 090b 	mov.w	r9, #11
 80156b0:	4648      	mov	r0, r9
 80156b2:	b029      	add	sp, #164	@ 0xa4
 80156b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80156b8:	f04f 0965 	mov.w	r9, #101	@ 0x65
 80156bc:	e7f8      	b.n	80156b0 <rcl_node_init+0x1f0>
 80156be:	782b      	ldrb	r3, [r5, #0]
 80156c0:	2b2f      	cmp	r3, #47	@ 0x2f
 80156c2:	f43f af42 	beq.w	801554a <rcl_node_init+0x8a>
 80156c6:	9503      	str	r5, [sp, #12]
 80156c8:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80156cc:	9300      	str	r3, [sp, #0]
 80156ce:	4b1e      	ldr	r3, [pc, #120]	@ (8015748 <rcl_node_init+0x288>)
 80156d0:	9302      	str	r3, [sp, #8]
 80156d2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80156d6:	9301      	str	r3, [sp, #4]
 80156d8:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 80156dc:	f002 fa9c 	bl	8017c18 <rcutils_format_string_limit>
 80156e0:	4605      	mov	r5, r0
 80156e2:	b340      	cbz	r0, 8015736 <rcl_node_init+0x276>
 80156e4:	2200      	movs	r2, #0
 80156e6:	a922      	add	r1, sp, #136	@ 0x88
 80156e8:	9222      	str	r2, [sp, #136]	@ 0x88
 80156ea:	f002 fe99 	bl	8018420 <rmw_validate_namespace>
 80156ee:	4681      	mov	r9, r0
 80156f0:	2800      	cmp	r0, #0
 80156f2:	f43f af34 	beq.w	801555e <rcl_node_init+0x9e>
 80156f6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80156fa:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80156fe:	4628      	mov	r0, r5
 8015700:	4798      	blx	r3
 8015702:	e7d5      	b.n	80156b0 <rcl_node_init+0x1f0>
 8015704:	f04f 0964 	mov.w	r9, #100	@ 0x64
 8015708:	4648      	mov	r0, r9
 801570a:	b029      	add	sp, #164	@ 0xa4
 801570c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015710:	f04f 090a 	mov.w	r9, #10
 8015714:	f1ba 0f00 	cmp.w	sl, #0
 8015718:	d1ed      	bne.n	80156f6 <rcl_node_init+0x236>
 801571a:	e7c9      	b.n	80156b0 <rcl_node_init+0x1f0>
 801571c:	f002 fef0 	bl	8018500 <rmw_node_name_validation_result_string>
 8015720:	f04f 09c9 	mov.w	r9, #201	@ 0xc9
 8015724:	e7c4      	b.n	80156b0 <rcl_node_init+0x1f0>
 8015726:	f002 fe8d 	bl	8018444 <rmw_namespace_validation_result_string>
 801572a:	f04f 09ca 	mov.w	r9, #202	@ 0xca
 801572e:	f1ba 0f00 	cmp.w	sl, #0
 8015732:	d1e0      	bne.n	80156f6 <rcl_node_init+0x236>
 8015734:	e7bc      	b.n	80156b0 <rcl_node_init+0x1f0>
 8015736:	f04f 090a 	mov.w	r9, #10
 801573a:	e7b9      	b.n	80156b0 <rcl_node_init+0x1f0>
 801573c:	0801e060 	.word	0x0801e060
 8015740:	0801def8 	.word	0x0801def8
 8015744:	0801ded4 	.word	0x0801ded4
 8015748:	0801e064 	.word	0x0801e064

0801574c <rcl_node_is_valid>:
 801574c:	b130      	cbz	r0, 801575c <rcl_node_is_valid+0x10>
 801574e:	6843      	ldr	r3, [r0, #4]
 8015750:	b123      	cbz	r3, 801575c <rcl_node_is_valid+0x10>
 8015752:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8015754:	b113      	cbz	r3, 801575c <rcl_node_is_valid+0x10>
 8015756:	6800      	ldr	r0, [r0, #0]
 8015758:	f7ff bd32 	b.w	80151c0 <rcl_context_is_valid>
 801575c:	2000      	movs	r0, #0
 801575e:	4770      	bx	lr

08015760 <rcl_node_get_name>:
 8015760:	b120      	cbz	r0, 801576c <rcl_node_get_name+0xc>
 8015762:	6840      	ldr	r0, [r0, #4]
 8015764:	b110      	cbz	r0, 801576c <rcl_node_get_name+0xc>
 8015766:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8015768:	b100      	cbz	r0, 801576c <rcl_node_get_name+0xc>
 801576a:	6880      	ldr	r0, [r0, #8]
 801576c:	4770      	bx	lr
 801576e:	bf00      	nop

08015770 <rcl_node_get_namespace>:
 8015770:	b120      	cbz	r0, 801577c <rcl_node_get_namespace+0xc>
 8015772:	6840      	ldr	r0, [r0, #4]
 8015774:	b110      	cbz	r0, 801577c <rcl_node_get_namespace+0xc>
 8015776:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8015778:	b100      	cbz	r0, 801577c <rcl_node_get_namespace+0xc>
 801577a:	68c0      	ldr	r0, [r0, #12]
 801577c:	4770      	bx	lr
 801577e:	bf00      	nop

08015780 <rcl_node_get_options>:
 8015780:	b128      	cbz	r0, 801578e <rcl_node_get_options+0xe>
 8015782:	6840      	ldr	r0, [r0, #4]
 8015784:	b118      	cbz	r0, 801578e <rcl_node_get_options+0xe>
 8015786:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 8015788:	2b00      	cmp	r3, #0
 801578a:	bf08      	it	eq
 801578c:	2000      	moveq	r0, #0
 801578e:	4770      	bx	lr

08015790 <rcl_node_get_rmw_handle>:
 8015790:	b110      	cbz	r0, 8015798 <rcl_node_get_rmw_handle+0x8>
 8015792:	6840      	ldr	r0, [r0, #4]
 8015794:	b100      	cbz	r0, 8015798 <rcl_node_get_rmw_handle+0x8>
 8015796:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8015798:	4770      	bx	lr
 801579a:	bf00      	nop

0801579c <rcl_node_get_default_options>:
 801579c:	b510      	push	{r4, lr}
 801579e:	2268      	movs	r2, #104	@ 0x68
 80157a0:	4604      	mov	r4, r0
 80157a2:	2100      	movs	r1, #0
 80157a4:	f005 fdda 	bl	801b35c <memset>
 80157a8:	4620      	mov	r0, r4
 80157aa:	f7fa f8d1 	bl	800f950 <rcutils_get_default_allocator>
 80157ae:	2301      	movs	r3, #1
 80157b0:	7523      	strb	r3, [r4, #20]
 80157b2:	4620      	mov	r0, r4
 80157b4:	bd10      	pop	{r4, pc}
 80157b6:	bf00      	nop

080157b8 <rcl_node_options_copy>:
 80157b8:	b1d0      	cbz	r0, 80157f0 <rcl_node_options_copy+0x38>
 80157ba:	b570      	push	{r4, r5, r6, lr}
 80157bc:	460c      	mov	r4, r1
 80157be:	b1a9      	cbz	r1, 80157ec <rcl_node_options_copy+0x34>
 80157c0:	4288      	cmp	r0, r1
 80157c2:	4684      	mov	ip, r0
 80157c4:	d012      	beq.n	80157ec <rcl_node_options_copy+0x34>
 80157c6:	4605      	mov	r5, r0
 80157c8:	8a86      	ldrh	r6, [r0, #20]
 80157ca:	468e      	mov	lr, r1
 80157cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80157ce:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80157d2:	682b      	ldr	r3, [r5, #0]
 80157d4:	f8ce 3000 	str.w	r3, [lr]
 80157d8:	f10c 0118 	add.w	r1, ip, #24
 80157dc:	2250      	movs	r2, #80	@ 0x50
 80157de:	82a6      	strh	r6, [r4, #20]
 80157e0:	f104 0018 	add.w	r0, r4, #24
 80157e4:	f005 fe83 	bl	801b4ee <memcpy>
 80157e8:	2000      	movs	r0, #0
 80157ea:	bd70      	pop	{r4, r5, r6, pc}
 80157ec:	200b      	movs	r0, #11
 80157ee:	bd70      	pop	{r4, r5, r6, pc}
 80157f0:	200b      	movs	r0, #11
 80157f2:	4770      	bx	lr

080157f4 <rcl_node_resolve_name>:
 80157f4:	b082      	sub	sp, #8
 80157f6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80157fa:	b091      	sub	sp, #68	@ 0x44
 80157fc:	ac1a      	add	r4, sp, #104	@ 0x68
 80157fe:	e884 000c 	stmia.w	r4, {r2, r3}
 8015802:	f89d 807c 	ldrb.w	r8, [sp, #124]	@ 0x7c
 8015806:	2800      	cmp	r0, #0
 8015808:	d03b      	beq.n	8015882 <rcl_node_resolve_name+0x8e>
 801580a:	460c      	mov	r4, r1
 801580c:	4605      	mov	r5, r0
 801580e:	f7ff ffb7 	bl	8015780 <rcl_node_get_options>
 8015812:	2800      	cmp	r0, #0
 8015814:	d037      	beq.n	8015886 <rcl_node_resolve_name+0x92>
 8015816:	4628      	mov	r0, r5
 8015818:	f7ff ffa2 	bl	8015760 <rcl_node_get_name>
 801581c:	4606      	mov	r6, r0
 801581e:	4628      	mov	r0, r5
 8015820:	f7ff ffa6 	bl	8015770 <rcl_node_get_namespace>
 8015824:	f10d 0e68 	add.w	lr, sp, #104	@ 0x68
 8015828:	4681      	mov	r9, r0
 801582a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801582e:	ad0b      	add	r5, sp, #44	@ 0x2c
 8015830:	46ac      	mov	ip, r5
 8015832:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015836:	f8de 3000 	ldr.w	r3, [lr]
 801583a:	f8cc 3000 	str.w	r3, [ip]
 801583e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8015840:	b1fb      	cbz	r3, 8015882 <rcl_node_resolve_name+0x8e>
 8015842:	468a      	mov	sl, r1
 8015844:	f8dd b078 	ldr.w	fp, [sp, #120]	@ 0x78
 8015848:	f002 fb3e 	bl	8017ec8 <rcutils_get_zero_initialized_string_map>
 801584c:	ab10      	add	r3, sp, #64	@ 0x40
 801584e:	9008      	str	r0, [sp, #32]
 8015850:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8015854:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8015858:	2100      	movs	r1, #0
 801585a:	e895 000c 	ldmia.w	r5, {r2, r3}
 801585e:	a808      	add	r0, sp, #32
 8015860:	f002 fbaa 	bl	8017fb8 <rcutils_string_map_init>
 8015864:	4607      	mov	r7, r0
 8015866:	b180      	cbz	r0, 801588a <rcl_node_resolve_name+0x96>
 8015868:	f7fa f88e 	bl	800f988 <rcutils_get_error_string>
 801586c:	f7fa f8a4 	bl	800f9b8 <rcutils_reset_error>
 8015870:	2f0a      	cmp	r7, #10
 8015872:	bf18      	it	ne
 8015874:	2701      	movne	r7, #1
 8015876:	4638      	mov	r0, r7
 8015878:	b011      	add	sp, #68	@ 0x44
 801587a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801587e:	b002      	add	sp, #8
 8015880:	4770      	bx	lr
 8015882:	270b      	movs	r7, #11
 8015884:	e7f7      	b.n	8015876 <rcl_node_resolve_name+0x82>
 8015886:	2701      	movs	r7, #1
 8015888:	e7f5      	b.n	8015876 <rcl_node_resolve_name+0x82>
 801588a:	9009      	str	r0, [sp, #36]	@ 0x24
 801588c:	9007      	str	r0, [sp, #28]
 801588e:	a808      	add	r0, sp, #32
 8015890:	f004 fdd0 	bl	801a434 <rcl_get_default_topic_name_substitutions>
 8015894:	4607      	mov	r7, r0
 8015896:	b1a8      	cbz	r0, 80158c4 <rcl_node_resolve_name+0xd0>
 8015898:	280a      	cmp	r0, #10
 801589a:	9c07      	ldr	r4, [sp, #28]
 801589c:	d000      	beq.n	80158a0 <rcl_node_resolve_name+0xac>
 801589e:	2701      	movs	r7, #1
 80158a0:	a808      	add	r0, sp, #32
 80158a2:	f002 fbc9 	bl	8018038 <rcutils_string_map_fini>
 80158a6:	2800      	cmp	r0, #0
 80158a8:	d13d      	bne.n	8015926 <rcl_node_resolve_name+0x132>
 80158aa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80158ac:	4659      	mov	r1, fp
 80158ae:	47d0      	blx	sl
 80158b0:	4659      	mov	r1, fp
 80158b2:	4620      	mov	r0, r4
 80158b4:	47d0      	blx	sl
 80158b6:	f1b8 0f00 	cmp.w	r8, #0
 80158ba:	d0dc      	beq.n	8015876 <rcl_node_resolve_name+0x82>
 80158bc:	2f67      	cmp	r7, #103	@ 0x67
 80158be:	bf08      	it	eq
 80158c0:	2768      	moveq	r7, #104	@ 0x68
 80158c2:	e7d8      	b.n	8015876 <rcl_node_resolve_name+0x82>
 80158c4:	ab09      	add	r3, sp, #36	@ 0x24
 80158c6:	9305      	str	r3, [sp, #20]
 80158c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80158ca:	46ec      	mov	ip, sp
 80158cc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80158d0:	682b      	ldr	r3, [r5, #0]
 80158d2:	f8cc 3000 	str.w	r3, [ip]
 80158d6:	464a      	mov	r2, r9
 80158d8:	4631      	mov	r1, r6
 80158da:	4620      	mov	r0, r4
 80158dc:	ab08      	add	r3, sp, #32
 80158de:	f004 fc4b 	bl	801a178 <rcl_expand_topic_name>
 80158e2:	4607      	mov	r7, r0
 80158e4:	b9b8      	cbnz	r0, 8015916 <rcl_node_resolve_name+0x122>
 80158e6:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 80158e8:	9009      	str	r0, [sp, #36]	@ 0x24
 80158ea:	4602      	mov	r2, r0
 80158ec:	a90a      	add	r1, sp, #40	@ 0x28
 80158ee:	4620      	mov	r0, r4
 80158f0:	f002 fcd2 	bl	8018298 <rmw_validate_full_topic_name>
 80158f4:	b988      	cbnz	r0, 801591a <rcl_node_resolve_name+0x126>
 80158f6:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 80158f8:	b9d5      	cbnz	r5, 8015930 <rcl_node_resolve_name+0x13c>
 80158fa:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80158fc:	a808      	add	r0, sp, #32
 80158fe:	601c      	str	r4, [r3, #0]
 8015900:	f002 fb9a 	bl	8018038 <rcutils_string_map_fini>
 8015904:	4607      	mov	r7, r0
 8015906:	b1a8      	cbz	r0, 8015934 <rcl_node_resolve_name+0x140>
 8015908:	f7fa f83e 	bl	800f988 <rcutils_get_error_string>
 801590c:	462c      	mov	r4, r5
 801590e:	f7fa f853 	bl	800f9b8 <rcutils_reset_error>
 8015912:	2701      	movs	r7, #1
 8015914:	e7c9      	b.n	80158aa <rcl_node_resolve_name+0xb6>
 8015916:	9c07      	ldr	r4, [sp, #28]
 8015918:	e7c2      	b.n	80158a0 <rcl_node_resolve_name+0xac>
 801591a:	f7fa f835 	bl	800f988 <rcutils_get_error_string>
 801591e:	2701      	movs	r7, #1
 8015920:	f7fa f84a 	bl	800f9b8 <rcutils_reset_error>
 8015924:	e7bc      	b.n	80158a0 <rcl_node_resolve_name+0xac>
 8015926:	f7fa f82f 	bl	800f988 <rcutils_get_error_string>
 801592a:	f7fa f845 	bl	800f9b8 <rcutils_reset_error>
 801592e:	e7bc      	b.n	80158aa <rcl_node_resolve_name+0xb6>
 8015930:	2767      	movs	r7, #103	@ 0x67
 8015932:	e7b5      	b.n	80158a0 <rcl_node_resolve_name+0xac>
 8015934:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8015936:	4659      	mov	r1, fp
 8015938:	47d0      	blx	sl
 801593a:	4659      	mov	r1, fp
 801593c:	4638      	mov	r0, r7
 801593e:	47d0      	blx	sl
 8015940:	e799      	b.n	8015876 <rcl_node_resolve_name+0x82>
 8015942:	bf00      	nop

08015944 <rcl_service_get_rmw_handle>:
 8015944:	b118      	cbz	r0, 801594e <rcl_service_get_rmw_handle+0xa>
 8015946:	6800      	ldr	r0, [r0, #0]
 8015948:	b108      	cbz	r0, 801594e <rcl_service_get_rmw_handle+0xa>
 801594a:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 801594e:	4770      	bx	lr

08015950 <rcl_take_request>:
 8015950:	b570      	push	{r4, r5, r6, lr}
 8015952:	468e      	mov	lr, r1
 8015954:	460c      	mov	r4, r1
 8015956:	4616      	mov	r6, r2
 8015958:	4605      	mov	r5, r0
 801595a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801595e:	b08c      	sub	sp, #48	@ 0x30
 8015960:	f10d 0c18 	add.w	ip, sp, #24
 8015964:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015968:	e89e 0003 	ldmia.w	lr, {r0, r1}
 801596c:	e88c 0003 	stmia.w	ip, {r0, r1}
 8015970:	b30d      	cbz	r5, 80159b6 <rcl_take_request+0x66>
 8015972:	682b      	ldr	r3, [r5, #0]
 8015974:	b1fb      	cbz	r3, 80159b6 <rcl_take_request+0x66>
 8015976:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 801597a:	b1e0      	cbz	r0, 80159b6 <rcl_take_request+0x66>
 801597c:	b336      	cbz	r6, 80159cc <rcl_take_request+0x7c>
 801597e:	2300      	movs	r3, #0
 8015980:	f88d 3007 	strb.w	r3, [sp, #7]
 8015984:	4632      	mov	r2, r6
 8015986:	f10d 0307 	add.w	r3, sp, #7
 801598a:	a902      	add	r1, sp, #8
 801598c:	f002 ffda 	bl	8018944 <rmw_take_request>
 8015990:	4605      	mov	r5, r0
 8015992:	b198      	cbz	r0, 80159bc <rcl_take_request+0x6c>
 8015994:	280a      	cmp	r0, #10
 8015996:	bf18      	it	ne
 8015998:	2501      	movne	r5, #1
 801599a:	f10d 0e18 	add.w	lr, sp, #24
 801599e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80159a2:	46a4      	mov	ip, r4
 80159a4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80159a8:	e89e 0003 	ldmia.w	lr, {r0, r1}
 80159ac:	e88c 0003 	stmia.w	ip, {r0, r1}
 80159b0:	4628      	mov	r0, r5
 80159b2:	b00c      	add	sp, #48	@ 0x30
 80159b4:	bd70      	pop	{r4, r5, r6, pc}
 80159b6:	f44f 7516 	mov.w	r5, #600	@ 0x258
 80159ba:	e7ee      	b.n	801599a <rcl_take_request+0x4a>
 80159bc:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80159c0:	f240 2359 	movw	r3, #601	@ 0x259
 80159c4:	2a00      	cmp	r2, #0
 80159c6:	bf08      	it	eq
 80159c8:	461d      	moveq	r5, r3
 80159ca:	e7e6      	b.n	801599a <rcl_take_request+0x4a>
 80159cc:	250b      	movs	r5, #11
 80159ce:	e7e4      	b.n	801599a <rcl_take_request+0x4a>

080159d0 <rcl_send_response>:
 80159d0:	b170      	cbz	r0, 80159f0 <rcl_send_response+0x20>
 80159d2:	6800      	ldr	r0, [r0, #0]
 80159d4:	b160      	cbz	r0, 80159f0 <rcl_send_response+0x20>
 80159d6:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 80159da:	b148      	cbz	r0, 80159f0 <rcl_send_response+0x20>
 80159dc:	b159      	cbz	r1, 80159f6 <rcl_send_response+0x26>
 80159de:	b510      	push	{r4, lr}
 80159e0:	b15a      	cbz	r2, 80159fa <rcl_send_response+0x2a>
 80159e2:	f003 f80d 	bl	8018a00 <rmw_send_response>
 80159e6:	b110      	cbz	r0, 80159ee <rcl_send_response+0x1e>
 80159e8:	2802      	cmp	r0, #2
 80159ea:	bf18      	it	ne
 80159ec:	2001      	movne	r0, #1
 80159ee:	bd10      	pop	{r4, pc}
 80159f0:	f44f 7016 	mov.w	r0, #600	@ 0x258
 80159f4:	4770      	bx	lr
 80159f6:	200b      	movs	r0, #11
 80159f8:	4770      	bx	lr
 80159fa:	200b      	movs	r0, #11
 80159fc:	bd10      	pop	{r4, pc}
 80159fe:	bf00      	nop

08015a00 <rcl_service_is_valid>:
 8015a00:	b130      	cbz	r0, 8015a10 <rcl_service_is_valid+0x10>
 8015a02:	6800      	ldr	r0, [r0, #0]
 8015a04:	b120      	cbz	r0, 8015a10 <rcl_service_is_valid+0x10>
 8015a06:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8015a0a:	3800      	subs	r0, #0
 8015a0c:	bf18      	it	ne
 8015a0e:	2001      	movne	r0, #1
 8015a10:	4770      	bx	lr
 8015a12:	bf00      	nop

08015a14 <rcl_get_zero_initialized_subscription>:
 8015a14:	4b01      	ldr	r3, [pc, #4]	@ (8015a1c <rcl_get_zero_initialized_subscription+0x8>)
 8015a16:	6818      	ldr	r0, [r3, #0]
 8015a18:	4770      	bx	lr
 8015a1a:	bf00      	nop
 8015a1c:	0801e94c 	.word	0x0801e94c

08015a20 <rcl_subscription_init>:
 8015a20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015a24:	b089      	sub	sp, #36	@ 0x24
 8015a26:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8015a28:	b1d6      	cbz	r6, 8015a60 <rcl_subscription_init+0x40>
 8015a2a:	f106 0950 	add.w	r9, r6, #80	@ 0x50
 8015a2e:	4604      	mov	r4, r0
 8015a30:	4648      	mov	r0, r9
 8015a32:	460d      	mov	r5, r1
 8015a34:	4690      	mov	r8, r2
 8015a36:	461f      	mov	r7, r3
 8015a38:	f7f9 ff98 	bl	800f96c <rcutils_allocator_is_valid>
 8015a3c:	b180      	cbz	r0, 8015a60 <rcl_subscription_init+0x40>
 8015a3e:	b17c      	cbz	r4, 8015a60 <rcl_subscription_init+0x40>
 8015a40:	4628      	mov	r0, r5
 8015a42:	f7ff fe83 	bl	801574c <rcl_node_is_valid>
 8015a46:	2800      	cmp	r0, #0
 8015a48:	d054      	beq.n	8015af4 <rcl_subscription_init+0xd4>
 8015a4a:	f1b8 0f00 	cmp.w	r8, #0
 8015a4e:	d007      	beq.n	8015a60 <rcl_subscription_init+0x40>
 8015a50:	b137      	cbz	r7, 8015a60 <rcl_subscription_init+0x40>
 8015a52:	6823      	ldr	r3, [r4, #0]
 8015a54:	b14b      	cbz	r3, 8015a6a <rcl_subscription_init+0x4a>
 8015a56:	2764      	movs	r7, #100	@ 0x64
 8015a58:	4638      	mov	r0, r7
 8015a5a:	b009      	add	sp, #36	@ 0x24
 8015a5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015a60:	270b      	movs	r7, #11
 8015a62:	4638      	mov	r0, r7
 8015a64:	b009      	add	sp, #36	@ 0x24
 8015a66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015a6a:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8015a6e:	aa07      	add	r2, sp, #28
 8015a70:	9205      	str	r2, [sp, #20]
 8015a72:	9307      	str	r3, [sp, #28]
 8015a74:	f106 0358 	add.w	r3, r6, #88	@ 0x58
 8015a78:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8015a7c:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8015a80:	4639      	mov	r1, r7
 8015a82:	e899 000c 	ldmia.w	r9, {r2, r3}
 8015a86:	4628      	mov	r0, r5
 8015a88:	f7ff feb4 	bl	80157f4 <rcl_node_resolve_name>
 8015a8c:	4607      	mov	r7, r0
 8015a8e:	2800      	cmp	r0, #0
 8015a90:	d15f      	bne.n	8015b52 <rcl_subscription_init+0x132>
 8015a92:	e9d6 3217 	ldrd	r3, r2, [r6, #92]	@ 0x5c
 8015a96:	21c8      	movs	r1, #200	@ 0xc8
 8015a98:	2001      	movs	r0, #1
 8015a9a:	4798      	blx	r3
 8015a9c:	6020      	str	r0, [r4, #0]
 8015a9e:	2800      	cmp	r0, #0
 8015aa0:	d05d      	beq.n	8015b5e <rcl_subscription_init+0x13e>
 8015aa2:	4628      	mov	r0, r5
 8015aa4:	f7ff fe74 	bl	8015790 <rcl_node_get_rmw_handle>
 8015aa8:	f106 0364 	add.w	r3, r6, #100	@ 0x64
 8015aac:	9300      	str	r3, [sp, #0]
 8015aae:	9a07      	ldr	r2, [sp, #28]
 8015ab0:	6827      	ldr	r7, [r4, #0]
 8015ab2:	4641      	mov	r1, r8
 8015ab4:	4633      	mov	r3, r6
 8015ab6:	f7fa fd9f 	bl	80105f8 <rmw_create_subscription>
 8015aba:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0
 8015abe:	6827      	ldr	r7, [r4, #0]
 8015ac0:	f8d7 00c0 	ldr.w	r0, [r7, #192]	@ 0xc0
 8015ac4:	b348      	cbz	r0, 8015b1a <rcl_subscription_init+0xfa>
 8015ac6:	f107 0170 	add.w	r1, r7, #112	@ 0x70
 8015aca:	f7fa fe77 	bl	80107bc <rmw_subscription_get_actual_qos>
 8015ace:	4607      	mov	r7, r0
 8015ad0:	b9a8      	cbnz	r0, 8015afe <rcl_subscription_init+0xde>
 8015ad2:	6820      	ldr	r0, [r4, #0]
 8015ad4:	f896 3048 	ldrb.w	r3, [r6, #72]	@ 0x48
 8015ad8:	f880 30b8 	strb.w	r3, [r0, #184]	@ 0xb8
 8015adc:	2270      	movs	r2, #112	@ 0x70
 8015ade:	4631      	mov	r1, r6
 8015ae0:	f005 fd05 	bl	801b4ee <memcpy>
 8015ae4:	9807      	ldr	r0, [sp, #28]
 8015ae6:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 8015ae8:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 8015aea:	4798      	blx	r3
 8015aec:	4638      	mov	r0, r7
 8015aee:	b009      	add	sp, #36	@ 0x24
 8015af0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015af4:	27c8      	movs	r7, #200	@ 0xc8
 8015af6:	4638      	mov	r0, r7
 8015af8:	b009      	add	sp, #36	@ 0x24
 8015afa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015afe:	6827      	ldr	r7, [r4, #0]
 8015b00:	b32f      	cbz	r7, 8015b4e <rcl_subscription_init+0x12e>
 8015b02:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8015b06:	b14b      	cbz	r3, 8015b1c <rcl_subscription_init+0xfc>
 8015b08:	4628      	mov	r0, r5
 8015b0a:	f7ff fe41 	bl	8015790 <rcl_node_get_rmw_handle>
 8015b0e:	6823      	ldr	r3, [r4, #0]
 8015b10:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8015b14:	f7fa fe62 	bl	80107dc <rmw_destroy_subscription>
 8015b18:	6827      	ldr	r7, [r4, #0]
 8015b1a:	b197      	cbz	r7, 8015b42 <rcl_subscription_init+0x122>
 8015b1c:	f107 0550 	add.w	r5, r7, #80	@ 0x50
 8015b20:	4628      	mov	r0, r5
 8015b22:	f7f9 ff23 	bl	800f96c <rcutils_allocator_is_valid>
 8015b26:	b158      	cbz	r0, 8015b40 <rcl_subscription_init+0x120>
 8015b28:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8015b2a:	b148      	cbz	r0, 8015b40 <rcl_subscription_init+0x120>
 8015b2c:	4629      	mov	r1, r5
 8015b2e:	f002 fb07 	bl	8018140 <rmw_subscription_content_filter_options_fini>
 8015b32:	4605      	mov	r5, r0
 8015b34:	b9b8      	cbnz	r0, 8015b66 <rcl_subscription_init+0x146>
 8015b36:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8015b38:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8015b3a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8015b3c:	4798      	blx	r3
 8015b3e:	66fd      	str	r5, [r7, #108]	@ 0x6c
 8015b40:	6827      	ldr	r7, [r4, #0]
 8015b42:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 8015b44:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 8015b46:	4638      	mov	r0, r7
 8015b48:	4798      	blx	r3
 8015b4a:	2300      	movs	r3, #0
 8015b4c:	6023      	str	r3, [r4, #0]
 8015b4e:	2701      	movs	r7, #1
 8015b50:	e7c8      	b.n	8015ae4 <rcl_subscription_init+0xc4>
 8015b52:	2867      	cmp	r0, #103	@ 0x67
 8015b54:	d0c6      	beq.n	8015ae4 <rcl_subscription_init+0xc4>
 8015b56:	2869      	cmp	r0, #105	@ 0x69
 8015b58:	d003      	beq.n	8015b62 <rcl_subscription_init+0x142>
 8015b5a:	280a      	cmp	r0, #10
 8015b5c:	d1f7      	bne.n	8015b4e <rcl_subscription_init+0x12e>
 8015b5e:	270a      	movs	r7, #10
 8015b60:	e7c0      	b.n	8015ae4 <rcl_subscription_init+0xc4>
 8015b62:	2767      	movs	r7, #103	@ 0x67
 8015b64:	e7be      	b.n	8015ae4 <rcl_subscription_init+0xc4>
 8015b66:	f7ff fb0d 	bl	8015184 <rcl_convert_rmw_ret_to_rcl_ret>
 8015b6a:	6827      	ldr	r7, [r4, #0]
 8015b6c:	e7e9      	b.n	8015b42 <rcl_subscription_init+0x122>
 8015b6e:	bf00      	nop

08015b70 <rcl_subscription_get_default_options>:
 8015b70:	b570      	push	{r4, r5, r6, lr}
 8015b72:	4d14      	ldr	r5, [pc, #80]	@ (8015bc4 <rcl_subscription_get_default_options+0x54>)
 8015b74:	4914      	ldr	r1, [pc, #80]	@ (8015bc8 <rcl_subscription_get_default_options+0x58>)
 8015b76:	b08a      	sub	sp, #40	@ 0x28
 8015b78:	4604      	mov	r4, r0
 8015b7a:	2250      	movs	r2, #80	@ 0x50
 8015b7c:	4628      	mov	r0, r5
 8015b7e:	f005 fcb6 	bl	801b4ee <memcpy>
 8015b82:	a804      	add	r0, sp, #16
 8015b84:	f7f9 fee4 	bl	800f950 <rcutils_get_default_allocator>
 8015b88:	f10d 0c10 	add.w	ip, sp, #16
 8015b8c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8015b90:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 8015b94:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8015b98:	466e      	mov	r6, sp
 8015b9a:	f8dc 3000 	ldr.w	r3, [ip]
 8015b9e:	f8ce 3000 	str.w	r3, [lr]
 8015ba2:	4630      	mov	r0, r6
 8015ba4:	f002 fae6 	bl	8018174 <rmw_get_default_subscription_options>
 8015ba8:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8015bac:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 8015bb0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8015bb4:	2270      	movs	r2, #112	@ 0x70
 8015bb6:	4629      	mov	r1, r5
 8015bb8:	4620      	mov	r0, r4
 8015bba:	f005 fc98 	bl	801b4ee <memcpy>
 8015bbe:	4620      	mov	r0, r4
 8015bc0:	b00a      	add	sp, #40	@ 0x28
 8015bc2:	bd70      	pop	{r4, r5, r6, pc}
 8015bc4:	2000b570 	.word	0x2000b570
 8015bc8:	0801e950 	.word	0x0801e950

08015bcc <rcl_take>:
 8015bcc:	2800      	cmp	r0, #0
 8015bce:	d04a      	beq.n	8015c66 <rcl_take+0x9a>
 8015bd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015bd4:	4604      	mov	r4, r0
 8015bd6:	6800      	ldr	r0, [r0, #0]
 8015bd8:	b0a4      	sub	sp, #144	@ 0x90
 8015bda:	2800      	cmp	r0, #0
 8015bdc:	d03b      	beq.n	8015c56 <rcl_take+0x8a>
 8015bde:	461f      	mov	r7, r3
 8015be0:	f8d0 30c0 	ldr.w	r3, [r0, #192]	@ 0xc0
 8015be4:	2b00      	cmp	r3, #0
 8015be6:	d036      	beq.n	8015c56 <rcl_take+0x8a>
 8015be8:	460e      	mov	r6, r1
 8015bea:	2900      	cmp	r1, #0
 8015bec:	d039      	beq.n	8015c62 <rcl_take+0x96>
 8015bee:	4615      	mov	r5, r2
 8015bf0:	2a00      	cmp	r2, #0
 8015bf2:	d03c      	beq.n	8015c6e <rcl_take+0xa2>
 8015bf4:	a802      	add	r0, sp, #8
 8015bf6:	f002 fb47 	bl	8018288 <rmw_get_zero_initialized_message_info>
 8015bfa:	f10d 0c08 	add.w	ip, sp, #8
 8015bfe:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8015c02:	46ae      	mov	lr, r5
 8015c04:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8015c08:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8015c0c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8015c10:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8015c14:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8015c18:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8015c1c:	f04f 0800 	mov.w	r8, #0
 8015c20:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 8015c24:	f88d 804f 	strb.w	r8, [sp, #79]	@ 0x4f
 8015c28:	6822      	ldr	r2, [r4, #0]
 8015c2a:	462b      	mov	r3, r5
 8015c2c:	f8d2 00c0 	ldr.w	r0, [r2, #192]	@ 0xc0
 8015c30:	9700      	str	r7, [sp, #0]
 8015c32:	f10d 024f 	add.w	r2, sp, #79	@ 0x4f
 8015c36:	4631      	mov	r1, r6
 8015c38:	f002 ff88 	bl	8018b4c <rmw_take_with_info>
 8015c3c:	4603      	mov	r3, r0
 8015c3e:	b9c0      	cbnz	r0, 8015c72 <rcl_take+0xa6>
 8015c40:	f89d 104f 	ldrb.w	r1, [sp, #79]	@ 0x4f
 8015c44:	f240 1291 	movw	r2, #401	@ 0x191
 8015c48:	2900      	cmp	r1, #0
 8015c4a:	bf08      	it	eq
 8015c4c:	4613      	moveq	r3, r2
 8015c4e:	4618      	mov	r0, r3
 8015c50:	b024      	add	sp, #144	@ 0x90
 8015c52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015c56:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8015c5a:	4618      	mov	r0, r3
 8015c5c:	b024      	add	sp, #144	@ 0x90
 8015c5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015c62:	230b      	movs	r3, #11
 8015c64:	e7f3      	b.n	8015c4e <rcl_take+0x82>
 8015c66:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8015c6a:	4618      	mov	r0, r3
 8015c6c:	4770      	bx	lr
 8015c6e:	ad14      	add	r5, sp, #80	@ 0x50
 8015c70:	e7c0      	b.n	8015bf4 <rcl_take+0x28>
 8015c72:	f7ff fa87 	bl	8015184 <rcl_convert_rmw_ret_to_rcl_ret>
 8015c76:	4603      	mov	r3, r0
 8015c78:	e7e9      	b.n	8015c4e <rcl_take+0x82>
 8015c7a:	bf00      	nop

08015c7c <rcl_subscription_get_rmw_handle>:
 8015c7c:	b118      	cbz	r0, 8015c86 <rcl_subscription_get_rmw_handle+0xa>
 8015c7e:	6800      	ldr	r0, [r0, #0]
 8015c80:	b108      	cbz	r0, 8015c86 <rcl_subscription_get_rmw_handle+0xa>
 8015c82:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 8015c86:	4770      	bx	lr

08015c88 <rcl_subscription_is_valid>:
 8015c88:	b130      	cbz	r0, 8015c98 <rcl_subscription_is_valid+0x10>
 8015c8a:	6800      	ldr	r0, [r0, #0]
 8015c8c:	b120      	cbz	r0, 8015c98 <rcl_subscription_is_valid+0x10>
 8015c8e:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 8015c92:	3800      	subs	r0, #0
 8015c94:	bf18      	it	ne
 8015c96:	2001      	movne	r0, #1
 8015c98:	4770      	bx	lr
 8015c9a:	bf00      	nop

08015c9c <rcl_get_system_time>:
 8015c9c:	4608      	mov	r0, r1
 8015c9e:	f7f9 bea7 	b.w	800f9f0 <rcutils_system_time_now>
 8015ca2:	bf00      	nop

08015ca4 <rcl_get_steady_time>:
 8015ca4:	4608      	mov	r0, r1
 8015ca6:	f7f9 becb 	b.w	800fa40 <rcutils_steady_time_now>
 8015caa:	bf00      	nop

08015cac <rcl_get_ros_time>:
 8015cac:	7a03      	ldrb	r3, [r0, #8]
 8015cae:	b510      	push	{r4, lr}
 8015cb0:	460c      	mov	r4, r1
 8015cb2:	b133      	cbz	r3, 8015cc2 <rcl_get_ros_time+0x16>
 8015cb4:	2105      	movs	r1, #5
 8015cb6:	f001 fef3 	bl	8017aa0 <__atomic_load_8>
 8015cba:	e9c4 0100 	strd	r0, r1, [r4]
 8015cbe:	2000      	movs	r0, #0
 8015cc0:	bd10      	pop	{r4, pc}
 8015cc2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015cc6:	4608      	mov	r0, r1
 8015cc8:	f7f9 be92 	b.w	800f9f0 <rcutils_system_time_now>

08015ccc <rcl_clock_init>:
 8015ccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015cce:	4605      	mov	r5, r0
 8015cd0:	4610      	mov	r0, r2
 8015cd2:	4614      	mov	r4, r2
 8015cd4:	460e      	mov	r6, r1
 8015cd6:	f7f9 fe49 	bl	800f96c <rcutils_allocator_is_valid>
 8015cda:	b128      	cbz	r0, 8015ce8 <rcl_clock_init+0x1c>
 8015cdc:	2d03      	cmp	r5, #3
 8015cde:	d803      	bhi.n	8015ce8 <rcl_clock_init+0x1c>
 8015ce0:	e8df f005 	tbb	[pc, r5]
 8015ce4:	06532e1d 	.word	0x06532e1d
 8015ce8:	f04f 0c0b 	mov.w	ip, #11
 8015cec:	4660      	mov	r0, ip
 8015cee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015cf0:	2e00      	cmp	r6, #0
 8015cf2:	d0f9      	beq.n	8015ce8 <rcl_clock_init+0x1c>
 8015cf4:	2c00      	cmp	r4, #0
 8015cf6:	d0f7      	beq.n	8015ce8 <rcl_clock_init+0x1c>
 8015cf8:	2300      	movs	r3, #0
 8015cfa:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8015cfe:	f8df e0b4 	ldr.w	lr, [pc, #180]	@ 8015db4 <rcl_clock_init+0xe8>
 8015d02:	6133      	str	r3, [r6, #16]
 8015d04:	f106 0514 	add.w	r5, r6, #20
 8015d08:	469c      	mov	ip, r3
 8015d0a:	2703      	movs	r7, #3
 8015d0c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015d0e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8015d10:	6823      	ldr	r3, [r4, #0]
 8015d12:	602b      	str	r3, [r5, #0]
 8015d14:	7037      	strb	r7, [r6, #0]
 8015d16:	f8c6 e00c 	str.w	lr, [r6, #12]
 8015d1a:	4660      	mov	r0, ip
 8015d1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015d1e:	2e00      	cmp	r6, #0
 8015d20:	d0e2      	beq.n	8015ce8 <rcl_clock_init+0x1c>
 8015d22:	2300      	movs	r3, #0
 8015d24:	7033      	strb	r3, [r6, #0]
 8015d26:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8015d2a:	e9c6 3303 	strd	r3, r3, [r6, #12]
 8015d2e:	469c      	mov	ip, r3
 8015d30:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015d32:	f106 0514 	add.w	r5, r6, #20
 8015d36:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8015d38:	6823      	ldr	r3, [r4, #0]
 8015d3a:	602b      	str	r3, [r5, #0]
 8015d3c:	4660      	mov	r0, ip
 8015d3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015d40:	2e00      	cmp	r6, #0
 8015d42:	d0d1      	beq.n	8015ce8 <rcl_clock_init+0x1c>
 8015d44:	2c00      	cmp	r4, #0
 8015d46:	d0cf      	beq.n	8015ce8 <rcl_clock_init+0x1c>
 8015d48:	2700      	movs	r7, #0
 8015d4a:	7037      	strb	r7, [r6, #0]
 8015d4c:	46a4      	mov	ip, r4
 8015d4e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8015d52:	f106 0514 	add.w	r5, r6, #20
 8015d56:	e9c6 7701 	strd	r7, r7, [r6, #4]
 8015d5a:	e9c6 7703 	strd	r7, r7, [r6, #12]
 8015d5e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8015d60:	f8dc 3000 	ldr.w	r3, [ip]
 8015d64:	602b      	str	r3, [r5, #0]
 8015d66:	6921      	ldr	r1, [r4, #16]
 8015d68:	6823      	ldr	r3, [r4, #0]
 8015d6a:	2010      	movs	r0, #16
 8015d6c:	4798      	blx	r3
 8015d6e:	6130      	str	r0, [r6, #16]
 8015d70:	b1d0      	cbz	r0, 8015da8 <rcl_clock_init+0xdc>
 8015d72:	2200      	movs	r2, #0
 8015d74:	2300      	movs	r3, #0
 8015d76:	e9c0 2300 	strd	r2, r3, [r0]
 8015d7a:	2301      	movs	r3, #1
 8015d7c:	7207      	strb	r7, [r0, #8]
 8015d7e:	4a0c      	ldr	r2, [pc, #48]	@ (8015db0 <rcl_clock_init+0xe4>)
 8015d80:	7033      	strb	r3, [r6, #0]
 8015d82:	46bc      	mov	ip, r7
 8015d84:	60f2      	str	r2, [r6, #12]
 8015d86:	4660      	mov	r0, ip
 8015d88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015d8a:	2e00      	cmp	r6, #0
 8015d8c:	d0ac      	beq.n	8015ce8 <rcl_clock_init+0x1c>
 8015d8e:	2c00      	cmp	r4, #0
 8015d90:	d0aa      	beq.n	8015ce8 <rcl_clock_init+0x1c>
 8015d92:	2300      	movs	r3, #0
 8015d94:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8015d98:	f8df e01c 	ldr.w	lr, [pc, #28]	@ 8015db8 <rcl_clock_init+0xec>
 8015d9c:	6133      	str	r3, [r6, #16]
 8015d9e:	f106 0514 	add.w	r5, r6, #20
 8015da2:	469c      	mov	ip, r3
 8015da4:	2702      	movs	r7, #2
 8015da6:	e7b1      	b.n	8015d0c <rcl_clock_init+0x40>
 8015da8:	f04f 0c0a 	mov.w	ip, #10
 8015dac:	e79e      	b.n	8015cec <rcl_clock_init+0x20>
 8015dae:	bf00      	nop
 8015db0:	08015cad 	.word	0x08015cad
 8015db4:	08015ca5 	.word	0x08015ca5
 8015db8:	08015c9d 	.word	0x08015c9d

08015dbc <rcl_clock_get_now>:
 8015dbc:	b140      	cbz	r0, 8015dd0 <rcl_clock_get_now+0x14>
 8015dbe:	b139      	cbz	r1, 8015dd0 <rcl_clock_get_now+0x14>
 8015dc0:	7803      	ldrb	r3, [r0, #0]
 8015dc2:	b11b      	cbz	r3, 8015dcc <rcl_clock_get_now+0x10>
 8015dc4:	68c3      	ldr	r3, [r0, #12]
 8015dc6:	b10b      	cbz	r3, 8015dcc <rcl_clock_get_now+0x10>
 8015dc8:	6900      	ldr	r0, [r0, #16]
 8015dca:	4718      	bx	r3
 8015dcc:	2001      	movs	r0, #1
 8015dce:	4770      	bx	lr
 8015dd0:	200b      	movs	r0, #11
 8015dd2:	4770      	bx	lr

08015dd4 <rcl_clock_add_jump_callback>:
 8015dd4:	b082      	sub	sp, #8
 8015dd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015dda:	a906      	add	r1, sp, #24
 8015ddc:	e881 000c 	stmia.w	r1, {r2, r3}
 8015de0:	e9dd 650c 	ldrd	r6, r5, [sp, #48]	@ 0x30
 8015de4:	b320      	cbz	r0, 8015e30 <rcl_clock_add_jump_callback+0x5c>
 8015de6:	4604      	mov	r4, r0
 8015de8:	3014      	adds	r0, #20
 8015dea:	f7f9 fdbf 	bl	800f96c <rcutils_allocator_is_valid>
 8015dee:	b1f8      	cbz	r0, 8015e30 <rcl_clock_add_jump_callback+0x5c>
 8015df0:	b1f6      	cbz	r6, 8015e30 <rcl_clock_add_jump_callback+0x5c>
 8015df2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015df4:	2b00      	cmp	r3, #0
 8015df6:	db1b      	blt.n	8015e30 <rcl_clock_add_jump_callback+0x5c>
 8015df8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 8015dfc:	2a01      	cmp	r2, #1
 8015dfe:	f173 0300 	sbcs.w	r3, r3, #0
 8015e02:	da15      	bge.n	8015e30 <rcl_clock_add_jump_callback+0x5c>
 8015e04:	e9d4 0701 	ldrd	r0, r7, [r4, #4]
 8015e08:	2f00      	cmp	r7, #0
 8015e0a:	d042      	beq.n	8015e92 <rcl_clock_add_jump_callback+0xbe>
 8015e0c:	2300      	movs	r3, #0
 8015e0e:	4602      	mov	r2, r0
 8015e10:	e003      	b.n	8015e1a <rcl_clock_add_jump_callback+0x46>
 8015e12:	42bb      	cmp	r3, r7
 8015e14:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 8015e18:	d011      	beq.n	8015e3e <rcl_clock_add_jump_callback+0x6a>
 8015e1a:	6811      	ldr	r1, [r2, #0]
 8015e1c:	42b1      	cmp	r1, r6
 8015e1e:	f103 0301 	add.w	r3, r3, #1
 8015e22:	d1f6      	bne.n	8015e12 <rcl_clock_add_jump_callback+0x3e>
 8015e24:	6a11      	ldr	r1, [r2, #32]
 8015e26:	42a9      	cmp	r1, r5
 8015e28:	d1f3      	bne.n	8015e12 <rcl_clock_add_jump_callback+0x3e>
 8015e2a:	f04f 0e01 	mov.w	lr, #1
 8015e2e:	e001      	b.n	8015e34 <rcl_clock_add_jump_callback+0x60>
 8015e30:	f04f 0e0b 	mov.w	lr, #11
 8015e34:	4670      	mov	r0, lr
 8015e36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015e3a:	b002      	add	sp, #8
 8015e3c:	4770      	bx	lr
 8015e3e:	3301      	adds	r3, #1
 8015e40:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8015e44:	00d9      	lsls	r1, r3, #3
 8015e46:	69e3      	ldr	r3, [r4, #28]
 8015e48:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8015e4a:	4798      	blx	r3
 8015e4c:	b1f0      	cbz	r0, 8015e8c <rcl_clock_add_jump_callback+0xb8>
 8015e4e:	68a3      	ldr	r3, [r4, #8]
 8015e50:	6060      	str	r0, [r4, #4]
 8015e52:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8015e56:	f10d 0c18 	add.w	ip, sp, #24
 8015e5a:	f840 6032 	str.w	r6, [r0, r2, lsl #3]
 8015e5e:	f103 0801 	add.w	r8, r3, #1
 8015e62:	eb00 06c2 	add.w	r6, r0, r2, lsl #3
 8015e66:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8015e6a:	f106 0708 	add.w	r7, r6, #8
 8015e6e:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8015e70:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8015e74:	f04f 0e00 	mov.w	lr, #0
 8015e78:	e887 0003 	stmia.w	r7, {r0, r1}
 8015e7c:	6235      	str	r5, [r6, #32]
 8015e7e:	4670      	mov	r0, lr
 8015e80:	f8c4 8008 	str.w	r8, [r4, #8]
 8015e84:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015e88:	b002      	add	sp, #8
 8015e8a:	4770      	bx	lr
 8015e8c:	f04f 0e0a 	mov.w	lr, #10
 8015e90:	e7d0      	b.n	8015e34 <rcl_clock_add_jump_callback+0x60>
 8015e92:	2128      	movs	r1, #40	@ 0x28
 8015e94:	e7d7      	b.n	8015e46 <rcl_clock_add_jump_callback+0x72>
 8015e96:	bf00      	nop

08015e98 <rcl_clock_remove_jump_callback>:
 8015e98:	2800      	cmp	r0, #0
 8015e9a:	d057      	beq.n	8015f4c <rcl_clock_remove_jump_callback+0xb4>
 8015e9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015ea0:	4605      	mov	r5, r0
 8015ea2:	3014      	adds	r0, #20
 8015ea4:	4688      	mov	r8, r1
 8015ea6:	4692      	mov	sl, r2
 8015ea8:	f7f9 fd60 	bl	800f96c <rcutils_allocator_is_valid>
 8015eac:	2800      	cmp	r0, #0
 8015eae:	d03b      	beq.n	8015f28 <rcl_clock_remove_jump_callback+0x90>
 8015eb0:	f1b8 0f00 	cmp.w	r8, #0
 8015eb4:	d038      	beq.n	8015f28 <rcl_clock_remove_jump_callback+0x90>
 8015eb6:	68ae      	ldr	r6, [r5, #8]
 8015eb8:	b166      	cbz	r6, 8015ed4 <rcl_clock_remove_jump_callback+0x3c>
 8015eba:	f8d5 9004 	ldr.w	r9, [r5, #4]
 8015ebe:	eb06 0786 	add.w	r7, r6, r6, lsl #2
 8015ec2:	eb09 07c7 	add.w	r7, r9, r7, lsl #3
 8015ec6:	464c      	mov	r4, r9
 8015ec8:	6823      	ldr	r3, [r4, #0]
 8015eca:	4543      	cmp	r3, r8
 8015ecc:	d005      	beq.n	8015eda <rcl_clock_remove_jump_callback+0x42>
 8015ece:	3428      	adds	r4, #40	@ 0x28
 8015ed0:	42a7      	cmp	r7, r4
 8015ed2:	d1f9      	bne.n	8015ec8 <rcl_clock_remove_jump_callback+0x30>
 8015ed4:	2001      	movs	r0, #1
 8015ed6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015eda:	6a23      	ldr	r3, [r4, #32]
 8015edc:	3428      	adds	r4, #40	@ 0x28
 8015ede:	42bc      	cmp	r4, r7
 8015ee0:	d02d      	beq.n	8015f3e <rcl_clock_remove_jump_callback+0xa6>
 8015ee2:	4553      	cmp	r3, sl
 8015ee4:	d1f0      	bne.n	8015ec8 <rcl_clock_remove_jump_callback+0x30>
 8015ee6:	46a6      	mov	lr, r4
 8015ee8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8015eec:	f1a4 0c28 	sub.w	ip, r4, #40	@ 0x28
 8015ef0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015ef4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8015ef8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015efc:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8015f00:	3428      	adds	r4, #40	@ 0x28
 8015f02:	42a7      	cmp	r7, r4
 8015f04:	e88c 0003 	stmia.w	ip, {r0, r1}
 8015f08:	d1ed      	bne.n	8015ee6 <rcl_clock_remove_jump_callback+0x4e>
 8015f0a:	3e01      	subs	r6, #1
 8015f0c:	60ae      	str	r6, [r5, #8]
 8015f0e:	b176      	cbz	r6, 8015f2e <rcl_clock_remove_jump_callback+0x96>
 8015f10:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 8015f14:	69eb      	ldr	r3, [r5, #28]
 8015f16:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
 8015f18:	00f1      	lsls	r1, r6, #3
 8015f1a:	4648      	mov	r0, r9
 8015f1c:	4798      	blx	r3
 8015f1e:	b1b8      	cbz	r0, 8015f50 <rcl_clock_remove_jump_callback+0xb8>
 8015f20:	6068      	str	r0, [r5, #4]
 8015f22:	2000      	movs	r0, #0
 8015f24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015f28:	200b      	movs	r0, #11
 8015f2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015f2e:	4648      	mov	r0, r9
 8015f30:	69ab      	ldr	r3, [r5, #24]
 8015f32:	6a69      	ldr	r1, [r5, #36]	@ 0x24
 8015f34:	4798      	blx	r3
 8015f36:	606e      	str	r6, [r5, #4]
 8015f38:	4630      	mov	r0, r6
 8015f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015f3e:	4553      	cmp	r3, sl
 8015f40:	d1c8      	bne.n	8015ed4 <rcl_clock_remove_jump_callback+0x3c>
 8015f42:	3e01      	subs	r6, #1
 8015f44:	60ae      	str	r6, [r5, #8]
 8015f46:	2e00      	cmp	r6, #0
 8015f48:	d1e2      	bne.n	8015f10 <rcl_clock_remove_jump_callback+0x78>
 8015f4a:	e7f0      	b.n	8015f2e <rcl_clock_remove_jump_callback+0x96>
 8015f4c:	200b      	movs	r0, #11
 8015f4e:	4770      	bx	lr
 8015f50:	200a      	movs	r0, #10
 8015f52:	e7ea      	b.n	8015f2a <rcl_clock_remove_jump_callback+0x92>

08015f54 <_rcl_timer_time_jump>:
 8015f54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015f58:	4605      	mov	r5, r0
 8015f5a:	b084      	sub	sp, #16
 8015f5c:	4614      	mov	r4, r2
 8015f5e:	b131      	cbz	r1, 8015f6e <_rcl_timer_time_jump+0x1a>
 8015f60:	7803      	ldrb	r3, [r0, #0]
 8015f62:	3b02      	subs	r3, #2
 8015f64:	2b01      	cmp	r3, #1
 8015f66:	d93f      	bls.n	8015fe8 <_rcl_timer_time_jump+0x94>
 8015f68:	b004      	add	sp, #16
 8015f6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015f6e:	6813      	ldr	r3, [r2, #0]
 8015f70:	a902      	add	r1, sp, #8
 8015f72:	6818      	ldr	r0, [r3, #0]
 8015f74:	f7ff ff22 	bl	8015dbc <rcl_clock_get_now>
 8015f78:	2800      	cmp	r0, #0
 8015f7a:	d1f5      	bne.n	8015f68 <_rcl_timer_time_jump+0x14>
 8015f7c:	6820      	ldr	r0, [r4, #0]
 8015f7e:	2105      	movs	r1, #5
 8015f80:	3020      	adds	r0, #32
 8015f82:	f001 fd8d 	bl	8017aa0 <__atomic_load_8>
 8015f86:	6823      	ldr	r3, [r4, #0]
 8015f88:	4681      	mov	r9, r0
 8015f8a:	4688      	mov	r8, r1
 8015f8c:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 8015f90:	2105      	movs	r1, #5
 8015f92:	f001 fd85 	bl	8017aa0 <__atomic_load_8>
 8015f96:	4607      	mov	r7, r0
 8015f98:	6820      	ldr	r0, [r4, #0]
 8015f9a:	460e      	mov	r6, r1
 8015f9c:	3018      	adds	r0, #24
 8015f9e:	2105      	movs	r1, #5
 8015fa0:	f001 fd7e 	bl	8017aa0 <__atomic_load_8>
 8015fa4:	782b      	ldrb	r3, [r5, #0]
 8015fa6:	9a02      	ldr	r2, [sp, #8]
 8015fa8:	3b02      	subs	r3, #2
 8015faa:	2b01      	cmp	r3, #1
 8015fac:	460d      	mov	r5, r1
 8015fae:	9b03      	ldr	r3, [sp, #12]
 8015fb0:	4682      	mov	sl, r0
 8015fb2:	d937      	bls.n	8016024 <_rcl_timer_time_jump+0xd0>
 8015fb4:	42ba      	cmp	r2, r7
 8015fb6:	eb73 0106 	sbcs.w	r1, r3, r6
 8015fba:	da5f      	bge.n	801607c <_rcl_timer_time_jump+0x128>
 8015fbc:	454a      	cmp	r2, r9
 8015fbe:	eb73 0108 	sbcs.w	r1, r3, r8
 8015fc2:	dad1      	bge.n	8015f68 <_rcl_timer_time_jump+0x14>
 8015fc4:	6820      	ldr	r0, [r4, #0]
 8015fc6:	eb1a 0202 	adds.w	r2, sl, r2
 8015fca:	eb43 0305 	adc.w	r3, r3, r5
 8015fce:	2505      	movs	r5, #5
 8015fd0:	3028      	adds	r0, #40	@ 0x28
 8015fd2:	9500      	str	r5, [sp, #0]
 8015fd4:	f001 fd9a 	bl	8017b0c <__atomic_store_8>
 8015fd8:	6820      	ldr	r0, [r4, #0]
 8015fda:	9500      	str	r5, [sp, #0]
 8015fdc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8015fe0:	3020      	adds	r0, #32
 8015fe2:	f001 fd93 	bl	8017b0c <__atomic_store_8>
 8015fe6:	e7bf      	b.n	8015f68 <_rcl_timer_time_jump+0x14>
 8015fe8:	6813      	ldr	r3, [r2, #0]
 8015fea:	a902      	add	r1, sp, #8
 8015fec:	6818      	ldr	r0, [r3, #0]
 8015fee:	f7ff fee5 	bl	8015dbc <rcl_clock_get_now>
 8015ff2:	2800      	cmp	r0, #0
 8015ff4:	d1b8      	bne.n	8015f68 <_rcl_timer_time_jump+0x14>
 8015ff6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8015ffa:	4313      	orrs	r3, r2
 8015ffc:	d0b4      	beq.n	8015f68 <_rcl_timer_time_jump+0x14>
 8015ffe:	6820      	ldr	r0, [r4, #0]
 8016000:	2105      	movs	r1, #5
 8016002:	3028      	adds	r0, #40	@ 0x28
 8016004:	f001 fd4c 	bl	8017aa0 <__atomic_load_8>
 8016008:	9d02      	ldr	r5, [sp, #8]
 801600a:	9b03      	ldr	r3, [sp, #12]
 801600c:	4602      	mov	r2, r0
 801600e:	6820      	ldr	r0, [r4, #0]
 8016010:	1b52      	subs	r2, r2, r5
 8016012:	f04f 0405 	mov.w	r4, #5
 8016016:	9400      	str	r4, [sp, #0]
 8016018:	eb61 0303 	sbc.w	r3, r1, r3
 801601c:	3030      	adds	r0, #48	@ 0x30
 801601e:	f001 fd75 	bl	8017b0c <__atomic_store_8>
 8016022:	e7a1      	b.n	8015f68 <_rcl_timer_time_jump+0x14>
 8016024:	4313      	orrs	r3, r2
 8016026:	d09f      	beq.n	8015f68 <_rcl_timer_time_jump+0x14>
 8016028:	6820      	ldr	r0, [r4, #0]
 801602a:	f04f 0805 	mov.w	r8, #5
 801602e:	2300      	movs	r3, #0
 8016030:	f8cd 8000 	str.w	r8, [sp]
 8016034:	3030      	adds	r0, #48	@ 0x30
 8016036:	2200      	movs	r2, #0
 8016038:	f001 fd9e 	bl	8017b78 <__atomic_exchange_8>
 801603c:	ea51 0300 	orrs.w	r3, r1, r0
 8016040:	4606      	mov	r6, r0
 8016042:	460f      	mov	r7, r1
 8016044:	d090      	beq.n	8015f68 <_rcl_timer_time_jump+0x14>
 8016046:	9a02      	ldr	r2, [sp, #8]
 8016048:	9b03      	ldr	r3, [sp, #12]
 801604a:	f8cd 8000 	str.w	r8, [sp]
 801604e:	1a12      	subs	r2, r2, r0
 8016050:	6820      	ldr	r0, [r4, #0]
 8016052:	eb63 0301 	sbc.w	r3, r3, r1
 8016056:	eb12 020a 	adds.w	r2, r2, sl
 801605a:	eb43 0305 	adc.w	r3, r3, r5
 801605e:	3028      	adds	r0, #40	@ 0x28
 8016060:	f001 fd54 	bl	8017b0c <__atomic_store_8>
 8016064:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8016068:	f8cd 8000 	str.w	r8, [sp]
 801606c:	6820      	ldr	r0, [r4, #0]
 801606e:	1b92      	subs	r2, r2, r6
 8016070:	eb63 0307 	sbc.w	r3, r3, r7
 8016074:	3020      	adds	r0, #32
 8016076:	f001 fd49 	bl	8017b0c <__atomic_store_8>
 801607a:	e775      	b.n	8015f68 <_rcl_timer_time_jump+0x14>
 801607c:	6820      	ldr	r0, [r4, #0]
 801607e:	3008      	adds	r0, #8
 8016080:	f004 fad6 	bl	801a630 <rcl_trigger_guard_condition>
 8016084:	e770      	b.n	8015f68 <_rcl_timer_time_jump+0x14>
 8016086:	bf00      	nop

08016088 <rcl_get_zero_initialized_timer>:
 8016088:	4b01      	ldr	r3, [pc, #4]	@ (8016090 <rcl_get_zero_initialized_timer+0x8>)
 801608a:	6818      	ldr	r0, [r3, #0]
 801608c:	4770      	bx	lr
 801608e:	bf00      	nop
 8016090:	0801e9a0 	.word	0x0801e9a0
 8016094:	00000000 	.word	0x00000000

08016098 <rcl_timer_init>:
 8016098:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801609c:	b0aa      	sub	sp, #168	@ 0xa8
 801609e:	4604      	mov	r4, r0
 80160a0:	a835      	add	r0, sp, #212	@ 0xd4
 80160a2:	e9dd 8732 	ldrd	r8, r7, [sp, #200]	@ 0xc8
 80160a6:	460d      	mov	r5, r1
 80160a8:	4692      	mov	sl, r2
 80160aa:	f7f9 fc5f 	bl	800f96c <rcutils_allocator_is_valid>
 80160ae:	2800      	cmp	r0, #0
 80160b0:	d064      	beq.n	801617c <rcl_timer_init+0xe4>
 80160b2:	2c00      	cmp	r4, #0
 80160b4:	d062      	beq.n	801617c <rcl_timer_init+0xe4>
 80160b6:	2d00      	cmp	r5, #0
 80160b8:	d060      	beq.n	801617c <rcl_timer_init+0xe4>
 80160ba:	2f00      	cmp	r7, #0
 80160bc:	db5e      	blt.n	801617c <rcl_timer_init+0xe4>
 80160be:	6823      	ldr	r3, [r4, #0]
 80160c0:	b123      	cbz	r3, 80160cc <rcl_timer_init+0x34>
 80160c2:	2664      	movs	r6, #100	@ 0x64
 80160c4:	4630      	mov	r0, r6
 80160c6:	b02a      	add	sp, #168	@ 0xa8
 80160c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80160cc:	a908      	add	r1, sp, #32
 80160ce:	4628      	mov	r0, r5
 80160d0:	f7ff fe74 	bl	8015dbc <rcl_clock_get_now>
 80160d4:	4606      	mov	r6, r0
 80160d6:	2800      	cmp	r0, #0
 80160d8:	d1f4      	bne.n	80160c4 <rcl_timer_init+0x2c>
 80160da:	ae06      	add	r6, sp, #24
 80160dc:	4630      	mov	r0, r6
 80160de:	e9cd 5a16 	strd	r5, sl, [sp, #88]	@ 0x58
 80160e2:	f004 f9ad 	bl	801a440 <rcl_get_zero_initialized_guard_condition>
 80160e6:	e896 0003 	ldmia.w	r6, {r0, r1}
 80160ea:	f10d 0960 	add.w	r9, sp, #96	@ 0x60
 80160ee:	ae0b      	add	r6, sp, #44	@ 0x2c
 80160f0:	e889 0003 	stmia.w	r9, {r0, r1}
 80160f4:	4630      	mov	r0, r6
 80160f6:	f004 fa7f 	bl	801a5f8 <rcl_guard_condition_get_default_options>
 80160fa:	ab0d      	add	r3, sp, #52	@ 0x34
 80160fc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8016100:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8016104:	4651      	mov	r1, sl
 8016106:	e896 000c 	ldmia.w	r6, {r2, r3}
 801610a:	4648      	mov	r0, r9
 801610c:	f004 f9a2 	bl	801a454 <rcl_guard_condition_init>
 8016110:	4606      	mov	r6, r0
 8016112:	2800      	cmp	r0, #0
 8016114:	d1d6      	bne.n	80160c4 <rcl_timer_init+0x2c>
 8016116:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8016118:	781b      	ldrb	r3, [r3, #0]
 801611a:	2b01      	cmp	r3, #1
 801611c:	d033      	beq.n	8016186 <rcl_timer_init+0xee>
 801611e:	9934      	ldr	r1, [sp, #208]	@ 0xd0
 8016120:	911a      	str	r1, [sp, #104]	@ 0x68
 8016122:	4642      	mov	r2, r8
 8016124:	463b      	mov	r3, r7
 8016126:	e9cd 231c 	strd	r2, r3, [sp, #112]	@ 0x70
 801612a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801612e:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 80161e0 <rcl_timer_init+0x148>
 8016132:	eb12 0008 	adds.w	r0, r2, r8
 8016136:	eb47 0103 	adc.w	r1, r7, r3
 801613a:	f10d 0ed4 	add.w	lr, sp, #212	@ 0xd4
 801613e:	ed8d 7b22 	vstr	d7, [sp, #136]	@ 0x88
 8016142:	e9cd 231e 	strd	r2, r3, [sp, #120]	@ 0x78
 8016146:	e9cd 0120 	strd	r0, r1, [sp, #128]	@ 0x80
 801614a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801614e:	f10d 0c94 	add.w	ip, sp, #148	@ 0x94
 8016152:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016156:	f8de 3000 	ldr.w	r3, [lr]
 801615a:	f8cc 3000 	str.w	r3, [ip]
 801615e:	f04f 0a00 	mov.w	sl, #0
 8016162:	4619      	mov	r1, r3
 8016164:	f88d a090 	strb.w	sl, [sp, #144]	@ 0x90
 8016168:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
 801616a:	2050      	movs	r0, #80	@ 0x50
 801616c:	4798      	blx	r3
 801616e:	6020      	str	r0, [r4, #0]
 8016170:	b358      	cbz	r0, 80161ca <rcl_timer_init+0x132>
 8016172:	2250      	movs	r2, #80	@ 0x50
 8016174:	a916      	add	r1, sp, #88	@ 0x58
 8016176:	f005 f9ba 	bl	801b4ee <memcpy>
 801617a:	e7a3      	b.n	80160c4 <rcl_timer_init+0x2c>
 801617c:	260b      	movs	r6, #11
 801617e:	4630      	mov	r0, r6
 8016180:	b02a      	add	sp, #168	@ 0xa8
 8016182:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016186:	2001      	movs	r0, #1
 8016188:	2100      	movs	r1, #0
 801618a:	e9cd 0112 	strd	r0, r1, [sp, #72]	@ 0x48
 801618e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8016192:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8016196:	e9cd 0114 	strd	r0, r1, [sp, #80]	@ 0x50
 801619a:	4a13      	ldr	r2, [pc, #76]	@ (80161e8 <rcl_timer_init+0x150>)
 801619c:	f88d 3040 	strb.w	r3, [sp, #64]	@ 0x40
 80161a0:	9405      	str	r4, [sp, #20]
 80161a2:	9204      	str	r2, [sp, #16]
 80161a4:	ab12      	add	r3, sp, #72	@ 0x48
 80161a6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80161a8:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80161ac:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 80161b0:	e89c 000c 	ldmia.w	ip, {r2, r3}
 80161b4:	4628      	mov	r0, r5
 80161b6:	f7ff fe0d 	bl	8015dd4 <rcl_clock_add_jump_callback>
 80161ba:	4682      	mov	sl, r0
 80161bc:	2800      	cmp	r0, #0
 80161be:	d0ae      	beq.n	801611e <rcl_timer_init+0x86>
 80161c0:	4648      	mov	r0, r9
 80161c2:	f004 f9f3 	bl	801a5ac <rcl_guard_condition_fini>
 80161c6:	4656      	mov	r6, sl
 80161c8:	e77c      	b.n	80160c4 <rcl_timer_init+0x2c>
 80161ca:	4648      	mov	r0, r9
 80161cc:	f004 f9ee 	bl	801a5ac <rcl_guard_condition_fini>
 80161d0:	4905      	ldr	r1, [pc, #20]	@ (80161e8 <rcl_timer_init+0x150>)
 80161d2:	4622      	mov	r2, r4
 80161d4:	4628      	mov	r0, r5
 80161d6:	f7ff fe5f 	bl	8015e98 <rcl_clock_remove_jump_callback>
 80161da:	260a      	movs	r6, #10
 80161dc:	e772      	b.n	80160c4 <rcl_timer_init+0x2c>
 80161de:	bf00      	nop
	...
 80161e8:	08015f55 	.word	0x08015f55

080161ec <rcl_timer_call>:
 80161ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80161f0:	b087      	sub	sp, #28
 80161f2:	2800      	cmp	r0, #0
 80161f4:	d06d      	beq.n	80162d2 <rcl_timer_call+0xe6>
 80161f6:	6803      	ldr	r3, [r0, #0]
 80161f8:	4604      	mov	r4, r0
 80161fa:	2b00      	cmp	r3, #0
 80161fc:	d063      	beq.n	80162c6 <rcl_timer_call+0xda>
 80161fe:	f3bf 8f5b 	dmb	ish
 8016202:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8016206:	f3bf 8f5b 	dmb	ish
 801620a:	2b00      	cmp	r3, #0
 801620c:	d150      	bne.n	80162b0 <rcl_timer_call+0xc4>
 801620e:	6803      	ldr	r3, [r0, #0]
 8016210:	a904      	add	r1, sp, #16
 8016212:	6818      	ldr	r0, [r3, #0]
 8016214:	f7ff fdd2 	bl	8015dbc <rcl_clock_get_now>
 8016218:	4605      	mov	r5, r0
 801621a:	2800      	cmp	r0, #0
 801621c:	d14a      	bne.n	80162b4 <rcl_timer_call+0xc8>
 801621e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8016222:	2b00      	cmp	r3, #0
 8016224:	db4a      	blt.n	80162bc <rcl_timer_call+0xd0>
 8016226:	6820      	ldr	r0, [r4, #0]
 8016228:	f04f 0a05 	mov.w	sl, #5
 801622c:	f8cd a000 	str.w	sl, [sp]
 8016230:	3020      	adds	r0, #32
 8016232:	f001 fca1 	bl	8017b78 <__atomic_exchange_8>
 8016236:	6823      	ldr	r3, [r4, #0]
 8016238:	f3bf 8f5b 	dmb	ish
 801623c:	4680      	mov	r8, r0
 801623e:	f8d3 b010 	ldr.w	fp, [r3, #16]
 8016242:	f3bf 8f5b 	dmb	ish
 8016246:	6820      	ldr	r0, [r4, #0]
 8016248:	4689      	mov	r9, r1
 801624a:	3028      	adds	r0, #40	@ 0x28
 801624c:	4651      	mov	r1, sl
 801624e:	f001 fc27 	bl	8017aa0 <__atomic_load_8>
 8016252:	4606      	mov	r6, r0
 8016254:	6820      	ldr	r0, [r4, #0]
 8016256:	460f      	mov	r7, r1
 8016258:	3018      	adds	r0, #24
 801625a:	4651      	mov	r1, sl
 801625c:	f001 fc20 	bl	8017aa0 <__atomic_load_8>
 8016260:	1836      	adds	r6, r6, r0
 8016262:	4602      	mov	r2, r0
 8016264:	4682      	mov	sl, r0
 8016266:	e9dd 0c04 	ldrd	r0, ip, [sp, #16]
 801626a:	eb47 0701 	adc.w	r7, r7, r1
 801626e:	4286      	cmp	r6, r0
 8016270:	460b      	mov	r3, r1
 8016272:	eb77 010c 	sbcs.w	r1, r7, ip
 8016276:	da04      	bge.n	8016282 <rcl_timer_call+0x96>
 8016278:	ea53 0102 	orrs.w	r1, r3, r2
 801627c:	d12e      	bne.n	80162dc <rcl_timer_call+0xf0>
 801627e:	4606      	mov	r6, r0
 8016280:	4667      	mov	r7, ip
 8016282:	6820      	ldr	r0, [r4, #0]
 8016284:	2105      	movs	r1, #5
 8016286:	4632      	mov	r2, r6
 8016288:	463b      	mov	r3, r7
 801628a:	3028      	adds	r0, #40	@ 0x28
 801628c:	9100      	str	r1, [sp, #0]
 801628e:	f001 fc3d 	bl	8017b0c <__atomic_store_8>
 8016292:	f1bb 0f00 	cmp.w	fp, #0
 8016296:	d00d      	beq.n	80162b4 <rcl_timer_call+0xc8>
 8016298:	9a04      	ldr	r2, [sp, #16]
 801629a:	9b05      	ldr	r3, [sp, #20]
 801629c:	ebb2 0208 	subs.w	r2, r2, r8
 80162a0:	4620      	mov	r0, r4
 80162a2:	eb63 0309 	sbc.w	r3, r3, r9
 80162a6:	47d8      	blx	fp
 80162a8:	4628      	mov	r0, r5
 80162aa:	b007      	add	sp, #28
 80162ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80162b0:	f240 3521 	movw	r5, #801	@ 0x321
 80162b4:	4628      	mov	r0, r5
 80162b6:	b007      	add	sp, #28
 80162b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80162bc:	2501      	movs	r5, #1
 80162be:	4628      	mov	r0, r5
 80162c0:	b007      	add	sp, #28
 80162c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80162c6:	f44f 7548 	mov.w	r5, #800	@ 0x320
 80162ca:	4628      	mov	r0, r5
 80162cc:	b007      	add	sp, #28
 80162ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80162d2:	250b      	movs	r5, #11
 80162d4:	4628      	mov	r0, r5
 80162d6:	b007      	add	sp, #28
 80162d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80162dc:	1b80      	subs	r0, r0, r6
 80162de:	eb6c 0107 	sbc.w	r1, ip, r7
 80162e2:	3801      	subs	r0, #1
 80162e4:	f161 0100 	sbc.w	r1, r1, #0
 80162e8:	e9cd 3202 	strd	r3, r2, [sp, #8]
 80162ec:	f7ea fcc6 	bl	8000c7c <__aeabi_ldivmod>
 80162f0:	9b02      	ldr	r3, [sp, #8]
 80162f2:	3001      	adds	r0, #1
 80162f4:	f141 0100 	adc.w	r1, r1, #0
 80162f8:	fb00 f303 	mul.w	r3, r0, r3
 80162fc:	fb01 330a 	mla	r3, r1, sl, r3
 8016300:	fba0 0a0a 	umull	r0, sl, r0, sl
 8016304:	1986      	adds	r6, r0, r6
 8016306:	4453      	add	r3, sl
 8016308:	eb43 0707 	adc.w	r7, r3, r7
 801630c:	e7b9      	b.n	8016282 <rcl_timer_call+0x96>
 801630e:	bf00      	nop

08016310 <rcl_timer_is_ready>:
 8016310:	b570      	push	{r4, r5, r6, lr}
 8016312:	b082      	sub	sp, #8
 8016314:	b378      	cbz	r0, 8016376 <rcl_timer_is_ready+0x66>
 8016316:	6803      	ldr	r3, [r0, #0]
 8016318:	4604      	mov	r4, r0
 801631a:	b383      	cbz	r3, 801637e <rcl_timer_is_ready+0x6e>
 801631c:	460d      	mov	r5, r1
 801631e:	b351      	cbz	r1, 8016376 <rcl_timer_is_ready+0x66>
 8016320:	f3bf 8f5b 	dmb	ish
 8016324:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8016328:	f3bf 8f5b 	dmb	ish
 801632c:	b953      	cbnz	r3, 8016344 <rcl_timer_is_ready+0x34>
 801632e:	6803      	ldr	r3, [r0, #0]
 8016330:	4669      	mov	r1, sp
 8016332:	6818      	ldr	r0, [r3, #0]
 8016334:	f7ff fd42 	bl	8015dbc <rcl_clock_get_now>
 8016338:	4606      	mov	r6, r0
 801633a:	b140      	cbz	r0, 801634e <rcl_timer_is_ready+0x3e>
 801633c:	f240 3321 	movw	r3, #801	@ 0x321
 8016340:	4298      	cmp	r0, r3
 8016342:	d101      	bne.n	8016348 <rcl_timer_is_ready+0x38>
 8016344:	2600      	movs	r6, #0
 8016346:	702e      	strb	r6, [r5, #0]
 8016348:	4630      	mov	r0, r6
 801634a:	b002      	add	sp, #8
 801634c:	bd70      	pop	{r4, r5, r6, pc}
 801634e:	6820      	ldr	r0, [r4, #0]
 8016350:	2105      	movs	r1, #5
 8016352:	3028      	adds	r0, #40	@ 0x28
 8016354:	f001 fba4 	bl	8017aa0 <__atomic_load_8>
 8016358:	9b00      	ldr	r3, [sp, #0]
 801635a:	1ac0      	subs	r0, r0, r3
 801635c:	9b01      	ldr	r3, [sp, #4]
 801635e:	eb61 0103 	sbc.w	r1, r1, r3
 8016362:	2801      	cmp	r0, #1
 8016364:	f171 0300 	sbcs.w	r3, r1, #0
 8016368:	bfb4      	ite	lt
 801636a:	2301      	movlt	r3, #1
 801636c:	2300      	movge	r3, #0
 801636e:	4630      	mov	r0, r6
 8016370:	702b      	strb	r3, [r5, #0]
 8016372:	b002      	add	sp, #8
 8016374:	bd70      	pop	{r4, r5, r6, pc}
 8016376:	260b      	movs	r6, #11
 8016378:	4630      	mov	r0, r6
 801637a:	b002      	add	sp, #8
 801637c:	bd70      	pop	{r4, r5, r6, pc}
 801637e:	f44f 7648 	mov.w	r6, #800	@ 0x320
 8016382:	e7e1      	b.n	8016348 <rcl_timer_is_ready+0x38>

08016384 <rcl_timer_get_time_until_next_call>:
 8016384:	b570      	push	{r4, r5, r6, lr}
 8016386:	b082      	sub	sp, #8
 8016388:	b330      	cbz	r0, 80163d8 <rcl_timer_get_time_until_next_call+0x54>
 801638a:	6803      	ldr	r3, [r0, #0]
 801638c:	4604      	mov	r4, r0
 801638e:	b33b      	cbz	r3, 80163e0 <rcl_timer_get_time_until_next_call+0x5c>
 8016390:	460d      	mov	r5, r1
 8016392:	b309      	cbz	r1, 80163d8 <rcl_timer_get_time_until_next_call+0x54>
 8016394:	f3bf 8f5b 	dmb	ish
 8016398:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 801639c:	f3bf 8f5b 	dmb	ish
 80163a0:	b9ab      	cbnz	r3, 80163ce <rcl_timer_get_time_until_next_call+0x4a>
 80163a2:	6803      	ldr	r3, [r0, #0]
 80163a4:	4669      	mov	r1, sp
 80163a6:	6818      	ldr	r0, [r3, #0]
 80163a8:	f7ff fd08 	bl	8015dbc <rcl_clock_get_now>
 80163ac:	4606      	mov	r6, r0
 80163ae:	b958      	cbnz	r0, 80163c8 <rcl_timer_get_time_until_next_call+0x44>
 80163b0:	6820      	ldr	r0, [r4, #0]
 80163b2:	2105      	movs	r1, #5
 80163b4:	3028      	adds	r0, #40	@ 0x28
 80163b6:	f001 fb73 	bl	8017aa0 <__atomic_load_8>
 80163ba:	9b00      	ldr	r3, [sp, #0]
 80163bc:	1ac0      	subs	r0, r0, r3
 80163be:	9b01      	ldr	r3, [sp, #4]
 80163c0:	6028      	str	r0, [r5, #0]
 80163c2:	eb61 0103 	sbc.w	r1, r1, r3
 80163c6:	6069      	str	r1, [r5, #4]
 80163c8:	4630      	mov	r0, r6
 80163ca:	b002      	add	sp, #8
 80163cc:	bd70      	pop	{r4, r5, r6, pc}
 80163ce:	f240 3621 	movw	r6, #801	@ 0x321
 80163d2:	4630      	mov	r0, r6
 80163d4:	b002      	add	sp, #8
 80163d6:	bd70      	pop	{r4, r5, r6, pc}
 80163d8:	260b      	movs	r6, #11
 80163da:	4630      	mov	r0, r6
 80163dc:	b002      	add	sp, #8
 80163de:	bd70      	pop	{r4, r5, r6, pc}
 80163e0:	f44f 7648 	mov.w	r6, #800	@ 0x320
 80163e4:	e7f0      	b.n	80163c8 <rcl_timer_get_time_until_next_call+0x44>
 80163e6:	bf00      	nop

080163e8 <rcl_timer_get_guard_condition>:
 80163e8:	b130      	cbz	r0, 80163f8 <rcl_timer_get_guard_condition+0x10>
 80163ea:	6800      	ldr	r0, [r0, #0]
 80163ec:	b120      	cbz	r0, 80163f8 <rcl_timer_get_guard_condition+0x10>
 80163ee:	68c3      	ldr	r3, [r0, #12]
 80163f0:	b10b      	cbz	r3, 80163f6 <rcl_timer_get_guard_condition+0xe>
 80163f2:	3008      	adds	r0, #8
 80163f4:	4770      	bx	lr
 80163f6:	4618      	mov	r0, r3
 80163f8:	4770      	bx	lr
 80163fa:	bf00      	nop

080163fc <rcl_get_zero_initialized_wait_set>:
 80163fc:	b510      	push	{r4, lr}
 80163fe:	4c08      	ldr	r4, [pc, #32]	@ (8016420 <rcl_get_zero_initialized_wait_set+0x24>)
 8016400:	4686      	mov	lr, r0
 8016402:	4684      	mov	ip, r0
 8016404:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016406:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801640a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801640c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016410:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016412:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016416:	6823      	ldr	r3, [r4, #0]
 8016418:	f8cc 3000 	str.w	r3, [ip]
 801641c:	4670      	mov	r0, lr
 801641e:	bd10      	pop	{r4, pc}
 8016420:	0801e9a4 	.word	0x0801e9a4

08016424 <rcl_wait_set_is_valid>:
 8016424:	b118      	cbz	r0, 801642e <rcl_wait_set_is_valid+0xa>
 8016426:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8016428:	3800      	subs	r0, #0
 801642a:	bf18      	it	ne
 801642c:	2001      	movne	r0, #1
 801642e:	4770      	bx	lr

08016430 <rcl_wait_set_fini>:
 8016430:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016434:	b082      	sub	sp, #8
 8016436:	2800      	cmp	r0, #0
 8016438:	f000 8095 	beq.w	8016566 <rcl_wait_set_fini+0x136>
 801643c:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 801643e:	4604      	mov	r4, r0
 8016440:	2e00      	cmp	r6, #0
 8016442:	f000 808c 	beq.w	801655e <rcl_wait_set_fini+0x12e>
 8016446:	6bf0      	ldr	r0, [r6, #60]	@ 0x3c
 8016448:	f002 fd56 	bl	8018ef8 <rmw_destroy_wait_set>
 801644c:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801644e:	1e06      	subs	r6, r0, #0
 8016450:	bf18      	it	ne
 8016452:	f44f 7661 	movne.w	r6, #900	@ 0x384
 8016456:	2d00      	cmp	r5, #0
 8016458:	f000 8081 	beq.w	801655e <rcl_wait_set_fini+0x12e>
 801645c:	6820      	ldr	r0, [r4, #0]
 801645e:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 8016462:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8016464:	2700      	movs	r7, #0
 8016466:	6067      	str	r7, [r4, #4]
 8016468:	602f      	str	r7, [r5, #0]
 801646a:	b120      	cbz	r0, 8016476 <rcl_wait_set_fini+0x46>
 801646c:	9101      	str	r1, [sp, #4]
 801646e:	47c0      	blx	r8
 8016470:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8016472:	9901      	ldr	r1, [sp, #4]
 8016474:	6027      	str	r7, [r4, #0]
 8016476:	68a8      	ldr	r0, [r5, #8]
 8016478:	b120      	cbz	r0, 8016484 <rcl_wait_set_fini+0x54>
 801647a:	47c0      	blx	r8
 801647c:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801647e:	2300      	movs	r3, #0
 8016480:	e9c5 3301 	strd	r3, r3, [r5, #4]
 8016484:	68a0      	ldr	r0, [r4, #8]
 8016486:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8016488:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 801648a:	f04f 0800 	mov.w	r8, #0
 801648e:	f8c4 800c 	str.w	r8, [r4, #12]
 8016492:	f8c5 800c 	str.w	r8, [r5, #12]
 8016496:	b128      	cbz	r0, 80164a4 <rcl_wait_set_fini+0x74>
 8016498:	47b8      	blx	r7
 801649a:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801649c:	f8c4 8008 	str.w	r8, [r4, #8]
 80164a0:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 80164a2:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80164a4:	6968      	ldr	r0, [r5, #20]
 80164a6:	f04f 0800 	mov.w	r8, #0
 80164aa:	f8c5 8010 	str.w	r8, [r5, #16]
 80164ae:	b128      	cbz	r0, 80164bc <rcl_wait_set_fini+0x8c>
 80164b0:	47b8      	blx	r7
 80164b2:	f8c5 8014 	str.w	r8, [r5, #20]
 80164b6:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80164b8:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 80164ba:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80164bc:	6920      	ldr	r0, [r4, #16]
 80164be:	f04f 0800 	mov.w	r8, #0
 80164c2:	f8c4 8014 	str.w	r8, [r4, #20]
 80164c6:	f8c5 8040 	str.w	r8, [r5, #64]	@ 0x40
 80164ca:	b128      	cbz	r0, 80164d8 <rcl_wait_set_fini+0xa8>
 80164cc:	47b8      	blx	r7
 80164ce:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80164d0:	f8c4 8010 	str.w	r8, [r4, #16]
 80164d4:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 80164d6:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80164d8:	69a0      	ldr	r0, [r4, #24]
 80164da:	f04f 0800 	mov.w	r8, #0
 80164de:	f8c4 801c 	str.w	r8, [r4, #28]
 80164e2:	f8c5 8018 	str.w	r8, [r5, #24]
 80164e6:	b128      	cbz	r0, 80164f4 <rcl_wait_set_fini+0xc4>
 80164e8:	9101      	str	r1, [sp, #4]
 80164ea:	47b8      	blx	r7
 80164ec:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80164ee:	9901      	ldr	r1, [sp, #4]
 80164f0:	f8c4 8018 	str.w	r8, [r4, #24]
 80164f4:	6a28      	ldr	r0, [r5, #32]
 80164f6:	b120      	cbz	r0, 8016502 <rcl_wait_set_fini+0xd2>
 80164f8:	47b8      	blx	r7
 80164fa:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80164fc:	2300      	movs	r3, #0
 80164fe:	e9c5 3307 	strd	r3, r3, [r5, #28]
 8016502:	6a20      	ldr	r0, [r4, #32]
 8016504:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 8016508:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 801650a:	2700      	movs	r7, #0
 801650c:	6267      	str	r7, [r4, #36]	@ 0x24
 801650e:	626f      	str	r7, [r5, #36]	@ 0x24
 8016510:	b120      	cbz	r0, 801651c <rcl_wait_set_fini+0xec>
 8016512:	9101      	str	r1, [sp, #4]
 8016514:	47c0      	blx	r8
 8016516:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8016518:	9901      	ldr	r1, [sp, #4]
 801651a:	6227      	str	r7, [r4, #32]
 801651c:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 801651e:	b120      	cbz	r0, 801652a <rcl_wait_set_fini+0xfa>
 8016520:	47c0      	blx	r8
 8016522:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8016524:	2300      	movs	r3, #0
 8016526:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 801652a:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 801652c:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 8016530:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8016532:	2700      	movs	r7, #0
 8016534:	62e7      	str	r7, [r4, #44]	@ 0x2c
 8016536:	632f      	str	r7, [r5, #48]	@ 0x30
 8016538:	b120      	cbz	r0, 8016544 <rcl_wait_set_fini+0x114>
 801653a:	9101      	str	r1, [sp, #4]
 801653c:	47c0      	blx	r8
 801653e:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8016540:	9901      	ldr	r1, [sp, #4]
 8016542:	62a7      	str	r7, [r4, #40]	@ 0x28
 8016544:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 8016546:	b120      	cbz	r0, 8016552 <rcl_wait_set_fini+0x122>
 8016548:	47c0      	blx	r8
 801654a:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801654c:	2300      	movs	r3, #0
 801654e:	e9c5 330d 	strd	r3, r3, [r5, #52]	@ 0x34
 8016552:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8016554:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8016556:	4628      	mov	r0, r5
 8016558:	4798      	blx	r3
 801655a:	2300      	movs	r3, #0
 801655c:	6323      	str	r3, [r4, #48]	@ 0x30
 801655e:	4630      	mov	r0, r6
 8016560:	b002      	add	sp, #8
 8016562:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016566:	260b      	movs	r6, #11
 8016568:	4630      	mov	r0, r6
 801656a:	b002      	add	sp, #8
 801656c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08016570 <rcl_wait_set_add_subscription>:
 8016570:	b318      	cbz	r0, 80165ba <rcl_wait_set_add_subscription+0x4a>
 8016572:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8016574:	b570      	push	{r4, r5, r6, lr}
 8016576:	4604      	mov	r4, r0
 8016578:	b30b      	cbz	r3, 80165be <rcl_wait_set_add_subscription+0x4e>
 801657a:	b319      	cbz	r1, 80165c4 <rcl_wait_set_add_subscription+0x54>
 801657c:	681d      	ldr	r5, [r3, #0]
 801657e:	6840      	ldr	r0, [r0, #4]
 8016580:	4285      	cmp	r5, r0
 8016582:	d217      	bcs.n	80165b4 <rcl_wait_set_add_subscription+0x44>
 8016584:	6820      	ldr	r0, [r4, #0]
 8016586:	1c6e      	adds	r6, r5, #1
 8016588:	601e      	str	r6, [r3, #0]
 801658a:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 801658e:	b102      	cbz	r2, 8016592 <rcl_wait_set_add_subscription+0x22>
 8016590:	6015      	str	r5, [r2, #0]
 8016592:	4608      	mov	r0, r1
 8016594:	f7ff fb72 	bl	8015c7c <rcl_subscription_get_rmw_handle>
 8016598:	b150      	cbz	r0, 80165b0 <rcl_wait_set_add_subscription+0x40>
 801659a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801659c:	6842      	ldr	r2, [r0, #4]
 801659e:	689b      	ldr	r3, [r3, #8]
 80165a0:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80165a4:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80165a6:	6853      	ldr	r3, [r2, #4]
 80165a8:	3301      	adds	r3, #1
 80165aa:	2000      	movs	r0, #0
 80165ac:	6053      	str	r3, [r2, #4]
 80165ae:	bd70      	pop	{r4, r5, r6, pc}
 80165b0:	2001      	movs	r0, #1
 80165b2:	bd70      	pop	{r4, r5, r6, pc}
 80165b4:	f240 3086 	movw	r0, #902	@ 0x386
 80165b8:	bd70      	pop	{r4, r5, r6, pc}
 80165ba:	200b      	movs	r0, #11
 80165bc:	4770      	bx	lr
 80165be:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80165c2:	bd70      	pop	{r4, r5, r6, pc}
 80165c4:	200b      	movs	r0, #11
 80165c6:	bd70      	pop	{r4, r5, r6, pc}

080165c8 <rcl_wait_set_clear>:
 80165c8:	2800      	cmp	r0, #0
 80165ca:	d073      	beq.n	80166b4 <rcl_wait_set_clear+0xec>
 80165cc:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80165ce:	b510      	push	{r4, lr}
 80165d0:	4604      	mov	r4, r0
 80165d2:	2b00      	cmp	r3, #0
 80165d4:	d070      	beq.n	80166b8 <rcl_wait_set_clear+0xf0>
 80165d6:	6800      	ldr	r0, [r0, #0]
 80165d8:	b138      	cbz	r0, 80165ea <rcl_wait_set_clear+0x22>
 80165da:	6862      	ldr	r2, [r4, #4]
 80165dc:	2100      	movs	r1, #0
 80165de:	0092      	lsls	r2, r2, #2
 80165e0:	f004 febc 	bl	801b35c <memset>
 80165e4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80165e6:	2200      	movs	r2, #0
 80165e8:	601a      	str	r2, [r3, #0]
 80165ea:	68a0      	ldr	r0, [r4, #8]
 80165ec:	b138      	cbz	r0, 80165fe <rcl_wait_set_clear+0x36>
 80165ee:	68e2      	ldr	r2, [r4, #12]
 80165f0:	2100      	movs	r1, #0
 80165f2:	0092      	lsls	r2, r2, #2
 80165f4:	f004 feb2 	bl	801b35c <memset>
 80165f8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80165fa:	2200      	movs	r2, #0
 80165fc:	60da      	str	r2, [r3, #12]
 80165fe:	69a0      	ldr	r0, [r4, #24]
 8016600:	b138      	cbz	r0, 8016612 <rcl_wait_set_clear+0x4a>
 8016602:	69e2      	ldr	r2, [r4, #28]
 8016604:	2100      	movs	r1, #0
 8016606:	0092      	lsls	r2, r2, #2
 8016608:	f004 fea8 	bl	801b35c <memset>
 801660c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801660e:	2200      	movs	r2, #0
 8016610:	619a      	str	r2, [r3, #24]
 8016612:	6a20      	ldr	r0, [r4, #32]
 8016614:	b138      	cbz	r0, 8016626 <rcl_wait_set_clear+0x5e>
 8016616:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8016618:	2100      	movs	r1, #0
 801661a:	0092      	lsls	r2, r2, #2
 801661c:	f004 fe9e 	bl	801b35c <memset>
 8016620:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8016622:	2200      	movs	r2, #0
 8016624:	625a      	str	r2, [r3, #36]	@ 0x24
 8016626:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8016628:	b138      	cbz	r0, 801663a <rcl_wait_set_clear+0x72>
 801662a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 801662c:	2100      	movs	r1, #0
 801662e:	0092      	lsls	r2, r2, #2
 8016630:	f004 fe94 	bl	801b35c <memset>
 8016634:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8016636:	2200      	movs	r2, #0
 8016638:	631a      	str	r2, [r3, #48]	@ 0x30
 801663a:	6920      	ldr	r0, [r4, #16]
 801663c:	b138      	cbz	r0, 801664e <rcl_wait_set_clear+0x86>
 801663e:	6962      	ldr	r2, [r4, #20]
 8016640:	2100      	movs	r1, #0
 8016642:	0092      	lsls	r2, r2, #2
 8016644:	f004 fe8a 	bl	801b35c <memset>
 8016648:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801664a:	2200      	movs	r2, #0
 801664c:	641a      	str	r2, [r3, #64]	@ 0x40
 801664e:	6898      	ldr	r0, [r3, #8]
 8016650:	b138      	cbz	r0, 8016662 <rcl_wait_set_clear+0x9a>
 8016652:	685a      	ldr	r2, [r3, #4]
 8016654:	2100      	movs	r1, #0
 8016656:	0092      	lsls	r2, r2, #2
 8016658:	f004 fe80 	bl	801b35c <memset>
 801665c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801665e:	2200      	movs	r2, #0
 8016660:	605a      	str	r2, [r3, #4]
 8016662:	6958      	ldr	r0, [r3, #20]
 8016664:	b138      	cbz	r0, 8016676 <rcl_wait_set_clear+0xae>
 8016666:	691a      	ldr	r2, [r3, #16]
 8016668:	2100      	movs	r1, #0
 801666a:	0092      	lsls	r2, r2, #2
 801666c:	f004 fe76 	bl	801b35c <memset>
 8016670:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8016672:	2200      	movs	r2, #0
 8016674:	611a      	str	r2, [r3, #16]
 8016676:	6a18      	ldr	r0, [r3, #32]
 8016678:	b138      	cbz	r0, 801668a <rcl_wait_set_clear+0xc2>
 801667a:	69da      	ldr	r2, [r3, #28]
 801667c:	2100      	movs	r1, #0
 801667e:	0092      	lsls	r2, r2, #2
 8016680:	f004 fe6c 	bl	801b35c <memset>
 8016684:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8016686:	2200      	movs	r2, #0
 8016688:	61da      	str	r2, [r3, #28]
 801668a:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 801668c:	b138      	cbz	r0, 801669e <rcl_wait_set_clear+0xd6>
 801668e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8016690:	2100      	movs	r1, #0
 8016692:	0092      	lsls	r2, r2, #2
 8016694:	f004 fe62 	bl	801b35c <memset>
 8016698:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801669a:	2200      	movs	r2, #0
 801669c:	629a      	str	r2, [r3, #40]	@ 0x28
 801669e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80166a0:	b138      	cbz	r0, 80166b2 <rcl_wait_set_clear+0xea>
 80166a2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80166a4:	2100      	movs	r1, #0
 80166a6:	0092      	lsls	r2, r2, #2
 80166a8:	f004 fe58 	bl	801b35c <memset>
 80166ac:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80166ae:	2000      	movs	r0, #0
 80166b0:	6358      	str	r0, [r3, #52]	@ 0x34
 80166b2:	bd10      	pop	{r4, pc}
 80166b4:	200b      	movs	r0, #11
 80166b6:	4770      	bx	lr
 80166b8:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80166bc:	bd10      	pop	{r4, pc}
 80166be:	bf00      	nop

080166c0 <rcl_wait_set_resize>:
 80166c0:	2800      	cmp	r0, #0
 80166c2:	f000 8185 	beq.w	80169d0 <rcl_wait_set_resize+0x310>
 80166c6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80166ca:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 80166cc:	b083      	sub	sp, #12
 80166ce:	4605      	mov	r5, r0
 80166d0:	2c00      	cmp	r4, #0
 80166d2:	f000 817f 	beq.w	80169d4 <rcl_wait_set_resize+0x314>
 80166d6:	f04f 0900 	mov.w	r9, #0
 80166da:	f8d4 a058 	ldr.w	sl, [r4, #88]	@ 0x58
 80166de:	461f      	mov	r7, r3
 80166e0:	4688      	mov	r8, r1
 80166e2:	e9d4 b313 	ldrd	fp, r3, [r4, #76]	@ 0x4c
 80166e6:	4616      	mov	r6, r2
 80166e8:	f8c0 9004 	str.w	r9, [r0, #4]
 80166ec:	f8c4 9000 	str.w	r9, [r4]
 80166f0:	2900      	cmp	r1, #0
 80166f2:	f000 80bd 	beq.w	8016870 <rcl_wait_set_resize+0x1b0>
 80166f6:	008c      	lsls	r4, r1, #2
 80166f8:	6800      	ldr	r0, [r0, #0]
 80166fa:	9301      	str	r3, [sp, #4]
 80166fc:	4652      	mov	r2, sl
 80166fe:	4621      	mov	r1, r4
 8016700:	4798      	blx	r3
 8016702:	9b01      	ldr	r3, [sp, #4]
 8016704:	6028      	str	r0, [r5, #0]
 8016706:	2800      	cmp	r0, #0
 8016708:	f000 80cb 	beq.w	80168a2 <rcl_wait_set_resize+0x1e2>
 801670c:	4622      	mov	r2, r4
 801670e:	4649      	mov	r1, r9
 8016710:	9301      	str	r3, [sp, #4]
 8016712:	f004 fe23 	bl	801b35c <memset>
 8016716:	f8c5 8004 	str.w	r8, [r5, #4]
 801671a:	f8d5 8030 	ldr.w	r8, [r5, #48]	@ 0x30
 801671e:	9b01      	ldr	r3, [sp, #4]
 8016720:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8016724:	f8c8 9004 	str.w	r9, [r8, #4]
 8016728:	4652      	mov	r2, sl
 801672a:	4621      	mov	r1, r4
 801672c:	4798      	blx	r3
 801672e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8016730:	f8c8 0008 	str.w	r0, [r8, #8]
 8016734:	689b      	ldr	r3, [r3, #8]
 8016736:	2b00      	cmp	r3, #0
 8016738:	f000 80ac 	beq.w	8016894 <rcl_wait_set_resize+0x1d4>
 801673c:	4622      	mov	r2, r4
 801673e:	4649      	mov	r1, r9
 8016740:	4618      	mov	r0, r3
 8016742:	f004 fe0b 	bl	801b35c <memset>
 8016746:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8016748:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 801674c:	f04f 0800 	mov.w	r8, #0
 8016750:	e9d4 2313 	ldrd	r2, r3, [r4, #76]	@ 0x4c
 8016754:	f8c5 800c 	str.w	r8, [r5, #12]
 8016758:	f8c4 800c 	str.w	r8, [r4, #12]
 801675c:	2e00      	cmp	r6, #0
 801675e:	f040 80a4 	bne.w	80168aa <rcl_wait_set_resize+0x1ea>
 8016762:	68a8      	ldr	r0, [r5, #8]
 8016764:	b128      	cbz	r0, 8016772 <rcl_wait_set_resize+0xb2>
 8016766:	4649      	mov	r1, r9
 8016768:	4790      	blx	r2
 801676a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801676c:	60ae      	str	r6, [r5, #8]
 801676e:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8016772:	f04f 0800 	mov.w	r8, #0
 8016776:	19f6      	adds	r6, r6, r7
 8016778:	f8c4 8010 	str.w	r8, [r4, #16]
 801677c:	f040 80ac 	bne.w	80168d8 <rcl_wait_set_resize+0x218>
 8016780:	6960      	ldr	r0, [r4, #20]
 8016782:	b130      	cbz	r0, 8016792 <rcl_wait_set_resize+0xd2>
 8016784:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8016786:	4649      	mov	r1, r9
 8016788:	4798      	blx	r3
 801678a:	6166      	str	r6, [r4, #20]
 801678c:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801678e:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8016792:	2600      	movs	r6, #0
 8016794:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 8016798:	616e      	str	r6, [r5, #20]
 801679a:	6426      	str	r6, [r4, #64]	@ 0x40
 801679c:	2f00      	cmp	r7, #0
 801679e:	f040 80ad 	bne.w	80168fc <rcl_wait_set_resize+0x23c>
 80167a2:	6928      	ldr	r0, [r5, #16]
 80167a4:	b138      	cbz	r0, 80167b6 <rcl_wait_set_resize+0xf6>
 80167a6:	4649      	mov	r1, r9
 80167a8:	47d0      	blx	sl
 80167aa:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80167ac:	612f      	str	r7, [r5, #16]
 80167ae:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 80167b2:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 80167b6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80167b8:	2600      	movs	r6, #0
 80167ba:	61ee      	str	r6, [r5, #28]
 80167bc:	61a6      	str	r6, [r4, #24]
 80167be:	2b00      	cmp	r3, #0
 80167c0:	f040 80af 	bne.w	8016922 <rcl_wait_set_resize+0x262>
 80167c4:	69a8      	ldr	r0, [r5, #24]
 80167c6:	b120      	cbz	r0, 80167d2 <rcl_wait_set_resize+0x112>
 80167c8:	4649      	mov	r1, r9
 80167ca:	47d0      	blx	sl
 80167cc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80167ce:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80167d0:	61ab      	str	r3, [r5, #24]
 80167d2:	6a20      	ldr	r0, [r4, #32]
 80167d4:	b128      	cbz	r0, 80167e2 <rcl_wait_set_resize+0x122>
 80167d6:	4649      	mov	r1, r9
 80167d8:	47d0      	blx	sl
 80167da:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80167dc:	2300      	movs	r3, #0
 80167de:	e9c4 3307 	strd	r3, r3, [r4, #28]
 80167e2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80167e4:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 80167e6:	2600      	movs	r6, #0
 80167e8:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 80167ec:	626e      	str	r6, [r5, #36]	@ 0x24
 80167ee:	6266      	str	r6, [r4, #36]	@ 0x24
 80167f0:	2b00      	cmp	r3, #0
 80167f2:	f000 80b6 	beq.w	8016962 <rcl_wait_set_resize+0x2a2>
 80167f6:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 80167fa:	6a28      	ldr	r0, [r5, #32]
 80167fc:	463a      	mov	r2, r7
 80167fe:	4651      	mov	r1, sl
 8016800:	47c8      	blx	r9
 8016802:	6228      	str	r0, [r5, #32]
 8016804:	2800      	cmp	r0, #0
 8016806:	d04c      	beq.n	80168a2 <rcl_wait_set_resize+0x1e2>
 8016808:	4652      	mov	r2, sl
 801680a:	4631      	mov	r1, r6
 801680c:	f004 fda6 	bl	801b35c <memset>
 8016810:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8016812:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8016814:	626b      	str	r3, [r5, #36]	@ 0x24
 8016816:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8016818:	62a6      	str	r6, [r4, #40]	@ 0x28
 801681a:	463a      	mov	r2, r7
 801681c:	4651      	mov	r1, sl
 801681e:	47c8      	blx	r9
 8016820:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8016822:	62e0      	str	r0, [r4, #44]	@ 0x2c
 8016824:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 8016826:	2c00      	cmp	r4, #0
 8016828:	f000 80f0 	beq.w	8016a0c <rcl_wait_set_resize+0x34c>
 801682c:	4620      	mov	r0, r4
 801682e:	4652      	mov	r2, sl
 8016830:	4631      	mov	r1, r6
 8016832:	f004 fd93 	bl	801b35c <memset>
 8016836:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8016838:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801683a:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 801683c:	2600      	movs	r6, #0
 801683e:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 8016842:	62ee      	str	r6, [r5, #44]	@ 0x2c
 8016844:	6326      	str	r6, [r4, #48]	@ 0x30
 8016846:	2b00      	cmp	r3, #0
 8016848:	f040 809d 	bne.w	8016986 <rcl_wait_set_resize+0x2c6>
 801684c:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 801684e:	b120      	cbz	r0, 801685a <rcl_wait_set_resize+0x19a>
 8016850:	4639      	mov	r1, r7
 8016852:	47c0      	blx	r8
 8016854:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016856:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8016858:	62ab      	str	r3, [r5, #40]	@ 0x28
 801685a:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 801685c:	b310      	cbz	r0, 80168a4 <rcl_wait_set_resize+0x1e4>
 801685e:	4639      	mov	r1, r7
 8016860:	47c0      	blx	r8
 8016862:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8016864:	2000      	movs	r0, #0
 8016866:	e9c3 000d 	strd	r0, r0, [r3, #52]	@ 0x34
 801686a:	b003      	add	sp, #12
 801686c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016870:	6800      	ldr	r0, [r0, #0]
 8016872:	b120      	cbz	r0, 801687e <rcl_wait_set_resize+0x1be>
 8016874:	4651      	mov	r1, sl
 8016876:	47d8      	blx	fp
 8016878:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801687a:	f8c5 8000 	str.w	r8, [r5]
 801687e:	68a0      	ldr	r0, [r4, #8]
 8016880:	2800      	cmp	r0, #0
 8016882:	f43f af61 	beq.w	8016748 <rcl_wait_set_resize+0x88>
 8016886:	4651      	mov	r1, sl
 8016888:	47d8      	blx	fp
 801688a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801688c:	2300      	movs	r3, #0
 801688e:	e9c4 3301 	strd	r3, r3, [r4, #4]
 8016892:	e759      	b.n	8016748 <rcl_wait_set_resize+0x88>
 8016894:	6828      	ldr	r0, [r5, #0]
 8016896:	9301      	str	r3, [sp, #4]
 8016898:	4651      	mov	r1, sl
 801689a:	47d8      	blx	fp
 801689c:	9b01      	ldr	r3, [sp, #4]
 801689e:	e9c5 3300 	strd	r3, r3, [r5]
 80168a2:	200a      	movs	r0, #10
 80168a4:	b003      	add	sp, #12
 80168a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80168aa:	00b4      	lsls	r4, r6, #2
 80168ac:	68a8      	ldr	r0, [r5, #8]
 80168ae:	464a      	mov	r2, r9
 80168b0:	4621      	mov	r1, r4
 80168b2:	4798      	blx	r3
 80168b4:	60a8      	str	r0, [r5, #8]
 80168b6:	2800      	cmp	r0, #0
 80168b8:	d0f3      	beq.n	80168a2 <rcl_wait_set_resize+0x1e2>
 80168ba:	4622      	mov	r2, r4
 80168bc:	4641      	mov	r1, r8
 80168be:	f004 fd4d 	bl	801b35c <memset>
 80168c2:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80168c4:	60ee      	str	r6, [r5, #12]
 80168c6:	f04f 0800 	mov.w	r8, #0
 80168ca:	19f6      	adds	r6, r6, r7
 80168cc:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 80168d0:	f8c4 8010 	str.w	r8, [r4, #16]
 80168d4:	f43f af54 	beq.w	8016780 <rcl_wait_set_resize+0xc0>
 80168d8:	00b6      	lsls	r6, r6, #2
 80168da:	464a      	mov	r2, r9
 80168dc:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 80168de:	6960      	ldr	r0, [r4, #20]
 80168e0:	4631      	mov	r1, r6
 80168e2:	4798      	blx	r3
 80168e4:	4681      	mov	r9, r0
 80168e6:	6160      	str	r0, [r4, #20]
 80168e8:	2800      	cmp	r0, #0
 80168ea:	d076      	beq.n	80169da <rcl_wait_set_resize+0x31a>
 80168ec:	4632      	mov	r2, r6
 80168ee:	4641      	mov	r1, r8
 80168f0:	f004 fd34 	bl	801b35c <memset>
 80168f4:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80168f6:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 80168fa:	e74a      	b.n	8016792 <rcl_wait_set_resize+0xd2>
 80168fc:	00bc      	lsls	r4, r7, #2
 80168fe:	6928      	ldr	r0, [r5, #16]
 8016900:	464a      	mov	r2, r9
 8016902:	4621      	mov	r1, r4
 8016904:	47c0      	blx	r8
 8016906:	6128      	str	r0, [r5, #16]
 8016908:	2800      	cmp	r0, #0
 801690a:	d0ca      	beq.n	80168a2 <rcl_wait_set_resize+0x1e2>
 801690c:	4622      	mov	r2, r4
 801690e:	4631      	mov	r1, r6
 8016910:	f004 fd24 	bl	801b35c <memset>
 8016914:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8016916:	616f      	str	r7, [r5, #20]
 8016918:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 801691c:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8016920:	e749      	b.n	80167b6 <rcl_wait_set_resize+0xf6>
 8016922:	009c      	lsls	r4, r3, #2
 8016924:	69a8      	ldr	r0, [r5, #24]
 8016926:	464a      	mov	r2, r9
 8016928:	4621      	mov	r1, r4
 801692a:	47c0      	blx	r8
 801692c:	61a8      	str	r0, [r5, #24]
 801692e:	2800      	cmp	r0, #0
 8016930:	d0b7      	beq.n	80168a2 <rcl_wait_set_resize+0x1e2>
 8016932:	4622      	mov	r2, r4
 8016934:	4631      	mov	r1, r6
 8016936:	f004 fd11 	bl	801b35c <memset>
 801693a:	6b2f      	ldr	r7, [r5, #48]	@ 0x30
 801693c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801693e:	61eb      	str	r3, [r5, #28]
 8016940:	6a38      	ldr	r0, [r7, #32]
 8016942:	61fe      	str	r6, [r7, #28]
 8016944:	464a      	mov	r2, r9
 8016946:	4621      	mov	r1, r4
 8016948:	47c0      	blx	r8
 801694a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801694c:	6238      	str	r0, [r7, #32]
 801694e:	6a1f      	ldr	r7, [r3, #32]
 8016950:	2f00      	cmp	r7, #0
 8016952:	d054      	beq.n	80169fe <rcl_wait_set_resize+0x33e>
 8016954:	4622      	mov	r2, r4
 8016956:	4631      	mov	r1, r6
 8016958:	4638      	mov	r0, r7
 801695a:	f004 fcff 	bl	801b35c <memset>
 801695e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8016960:	e73f      	b.n	80167e2 <rcl_wait_set_resize+0x122>
 8016962:	6a28      	ldr	r0, [r5, #32]
 8016964:	b120      	cbz	r0, 8016970 <rcl_wait_set_resize+0x2b0>
 8016966:	4639      	mov	r1, r7
 8016968:	47c0      	blx	r8
 801696a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801696c:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801696e:	622b      	str	r3, [r5, #32]
 8016970:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8016972:	2800      	cmp	r0, #0
 8016974:	f43f af60 	beq.w	8016838 <rcl_wait_set_resize+0x178>
 8016978:	4639      	mov	r1, r7
 801697a:	47c0      	blx	r8
 801697c:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801697e:	2300      	movs	r3, #0
 8016980:	e9c4 330a 	strd	r3, r3, [r4, #40]	@ 0x28
 8016984:	e758      	b.n	8016838 <rcl_wait_set_resize+0x178>
 8016986:	009c      	lsls	r4, r3, #2
 8016988:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 801698a:	463a      	mov	r2, r7
 801698c:	4621      	mov	r1, r4
 801698e:	47c8      	blx	r9
 8016990:	62a8      	str	r0, [r5, #40]	@ 0x28
 8016992:	2800      	cmp	r0, #0
 8016994:	d085      	beq.n	80168a2 <rcl_wait_set_resize+0x1e2>
 8016996:	4622      	mov	r2, r4
 8016998:	4631      	mov	r1, r6
 801699a:	f004 fcdf 	bl	801b35c <memset>
 801699e:	f8d5 a030 	ldr.w	sl, [r5, #48]	@ 0x30
 80169a2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80169a4:	62eb      	str	r3, [r5, #44]	@ 0x2c
 80169a6:	f8da 0038 	ldr.w	r0, [sl, #56]	@ 0x38
 80169aa:	f8ca 6034 	str.w	r6, [sl, #52]	@ 0x34
 80169ae:	463a      	mov	r2, r7
 80169b0:	4621      	mov	r1, r4
 80169b2:	47c8      	blx	r9
 80169b4:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80169b6:	f8ca 0038 	str.w	r0, [sl, #56]	@ 0x38
 80169ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80169bc:	b36b      	cbz	r3, 8016a1a <rcl_wait_set_resize+0x35a>
 80169be:	4622      	mov	r2, r4
 80169c0:	4631      	mov	r1, r6
 80169c2:	4618      	mov	r0, r3
 80169c4:	f004 fcca 	bl	801b35c <memset>
 80169c8:	4630      	mov	r0, r6
 80169ca:	b003      	add	sp, #12
 80169cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80169d0:	200b      	movs	r0, #11
 80169d2:	4770      	bx	lr
 80169d4:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80169d8:	e764      	b.n	80168a4 <rcl_wait_set_resize+0x1e4>
 80169da:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80169dc:	68a8      	ldr	r0, [r5, #8]
 80169de:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 80169e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80169e2:	4798      	blx	r3
 80169e4:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80169e6:	6928      	ldr	r0, [r5, #16]
 80169e8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80169ea:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 80169ec:	f8c5 900c 	str.w	r9, [r5, #12]
 80169f0:	f8c5 9008 	str.w	r9, [r5, #8]
 80169f4:	4790      	blx	r2
 80169f6:	e9c5 9904 	strd	r9, r9, [r5, #16]
 80169fa:	200a      	movs	r0, #10
 80169fc:	e752      	b.n	80168a4 <rcl_wait_set_resize+0x1e4>
 80169fe:	69a8      	ldr	r0, [r5, #24]
 8016a00:	4649      	mov	r1, r9
 8016a02:	47d0      	blx	sl
 8016a04:	e9c5 7706 	strd	r7, r7, [r5, #24]
 8016a08:	200a      	movs	r0, #10
 8016a0a:	e74b      	b.n	80168a4 <rcl_wait_set_resize+0x1e4>
 8016a0c:	6a28      	ldr	r0, [r5, #32]
 8016a0e:	4639      	mov	r1, r7
 8016a10:	47c0      	blx	r8
 8016a12:	e9c5 4408 	strd	r4, r4, [r5, #32]
 8016a16:	200a      	movs	r0, #10
 8016a18:	e744      	b.n	80168a4 <rcl_wait_set_resize+0x1e4>
 8016a1a:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8016a1c:	9301      	str	r3, [sp, #4]
 8016a1e:	4639      	mov	r1, r7
 8016a20:	47c0      	blx	r8
 8016a22:	9b01      	ldr	r3, [sp, #4]
 8016a24:	200a      	movs	r0, #10
 8016a26:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 8016a2a:	e73b      	b.n	80168a4 <rcl_wait_set_resize+0x1e4>

08016a2c <rcl_wait_set_init>:
 8016a2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016a30:	b084      	sub	sp, #16
 8016a32:	4604      	mov	r4, r0
 8016a34:	a810      	add	r0, sp, #64	@ 0x40
 8016a36:	f8dd a03c 	ldr.w	sl, [sp, #60]	@ 0x3c
 8016a3a:	460f      	mov	r7, r1
 8016a3c:	4690      	mov	r8, r2
 8016a3e:	4699      	mov	r9, r3
 8016a40:	f7f8 ff94 	bl	800f96c <rcutils_allocator_is_valid>
 8016a44:	2800      	cmp	r0, #0
 8016a46:	d06b      	beq.n	8016b20 <rcl_wait_set_init+0xf4>
 8016a48:	2c00      	cmp	r4, #0
 8016a4a:	d069      	beq.n	8016b20 <rcl_wait_set_init+0xf4>
 8016a4c:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8016a4e:	b125      	cbz	r5, 8016a5a <rcl_wait_set_init+0x2e>
 8016a50:	2564      	movs	r5, #100	@ 0x64
 8016a52:	4628      	mov	r0, r5
 8016a54:	b004      	add	sp, #16
 8016a56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016a5a:	f1ba 0f00 	cmp.w	sl, #0
 8016a5e:	d05f      	beq.n	8016b20 <rcl_wait_set_init+0xf4>
 8016a60:	4650      	mov	r0, sl
 8016a62:	f7fe fbad 	bl	80151c0 <rcl_context_is_valid>
 8016a66:	2800      	cmp	r0, #0
 8016a68:	d067      	beq.n	8016b3a <rcl_wait_set_init+0x10e>
 8016a6a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8016a6c:	9914      	ldr	r1, [sp, #80]	@ 0x50
 8016a6e:	205c      	movs	r0, #92	@ 0x5c
 8016a70:	4798      	blx	r3
 8016a72:	6320      	str	r0, [r4, #48]	@ 0x30
 8016a74:	2800      	cmp	r0, #0
 8016a76:	d062      	beq.n	8016b3e <rcl_wait_set_init+0x112>
 8016a78:	4629      	mov	r1, r5
 8016a7a:	225c      	movs	r2, #92	@ 0x5c
 8016a7c:	f004 fc6e 	bl	801b35c <memset>
 8016a80:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	@ 0x34
 8016a84:	eb03 0e02 	add.w	lr, r3, r2
 8016a88:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8016a8a:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 8016a8c:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 8016a90:	449e      	add	lr, r3
 8016a92:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8016a96:	e9c6 5501 	strd	r5, r5, [r6, #4]
 8016a9a:	e9c6 5504 	strd	r5, r5, [r6, #16]
 8016a9e:	e9c6 5507 	strd	r5, r5, [r6, #28]
 8016aa2:	e9c6 550a 	strd	r5, r5, [r6, #40]	@ 0x28
 8016aa6:	e9c6 550d 	strd	r5, r5, [r6, #52]	@ 0x34
 8016aaa:	f106 0548 	add.w	r5, r6, #72	@ 0x48
 8016aae:	f8c6 a044 	str.w	sl, [r6, #68]	@ 0x44
 8016ab2:	f8da a000 	ldr.w	sl, [sl]
 8016ab6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8016ab8:	44c6      	add	lr, r8
 8016aba:	f8dc 3000 	ldr.w	r3, [ip]
 8016abe:	602b      	str	r3, [r5, #0]
 8016ac0:	eb0e 0147 	add.w	r1, lr, r7, lsl #1
 8016ac4:	f10a 0028 	add.w	r0, sl, #40	@ 0x28
 8016ac8:	f002 fa0c 	bl	8018ee4 <rmw_create_wait_set>
 8016acc:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8016ace:	63f0      	str	r0, [r6, #60]	@ 0x3c
 8016ad0:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8016ad2:	b350      	cbz	r0, 8016b2a <rcl_wait_set_init+0xfe>
 8016ad4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016ad6:	9302      	str	r3, [sp, #8]
 8016ad8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8016ada:	9301      	str	r3, [sp, #4]
 8016adc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8016ade:	9300      	str	r3, [sp, #0]
 8016ae0:	4642      	mov	r2, r8
 8016ae2:	464b      	mov	r3, r9
 8016ae4:	4639      	mov	r1, r7
 8016ae6:	4620      	mov	r0, r4
 8016ae8:	f7ff fdea 	bl	80166c0 <rcl_wait_set_resize>
 8016aec:	4605      	mov	r5, r0
 8016aee:	2800      	cmp	r0, #0
 8016af0:	d0af      	beq.n	8016a52 <rcl_wait_set_init+0x26>
 8016af2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8016af4:	bb2b      	cbnz	r3, 8016b42 <rcl_wait_set_init+0x116>
 8016af6:	2600      	movs	r6, #0
 8016af8:	e9cd 6601 	strd	r6, r6, [sp, #4]
 8016afc:	9600      	str	r6, [sp, #0]
 8016afe:	4633      	mov	r3, r6
 8016b00:	4632      	mov	r2, r6
 8016b02:	4631      	mov	r1, r6
 8016b04:	4620      	mov	r0, r4
 8016b06:	f7ff fddb 	bl	80166c0 <rcl_wait_set_resize>
 8016b0a:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8016b0c:	2800      	cmp	r0, #0
 8016b0e:	d0a0      	beq.n	8016a52 <rcl_wait_set_init+0x26>
 8016b10:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 8016b12:	6d81      	ldr	r1, [r0, #88]	@ 0x58
 8016b14:	4798      	blx	r3
 8016b16:	4628      	mov	r0, r5
 8016b18:	6326      	str	r6, [r4, #48]	@ 0x30
 8016b1a:	b004      	add	sp, #16
 8016b1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016b20:	250b      	movs	r5, #11
 8016b22:	4628      	mov	r0, r5
 8016b24:	b004      	add	sp, #16
 8016b26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016b2a:	2501      	movs	r5, #1
 8016b2c:	f002 f9e4 	bl	8018ef8 <rmw_destroy_wait_set>
 8016b30:	2800      	cmp	r0, #0
 8016b32:	bf18      	it	ne
 8016b34:	f44f 7561 	movne.w	r5, #900	@ 0x384
 8016b38:	e7dd      	b.n	8016af6 <rcl_wait_set_init+0xca>
 8016b3a:	2565      	movs	r5, #101	@ 0x65
 8016b3c:	e789      	b.n	8016a52 <rcl_wait_set_init+0x26>
 8016b3e:	250a      	movs	r5, #10
 8016b40:	e787      	b.n	8016a52 <rcl_wait_set_init+0x26>
 8016b42:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8016b44:	e7f2      	b.n	8016b2c <rcl_wait_set_init+0x100>
 8016b46:	bf00      	nop

08016b48 <rcl_wait_set_add_guard_condition>:
 8016b48:	b318      	cbz	r0, 8016b92 <rcl_wait_set_add_guard_condition+0x4a>
 8016b4a:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8016b4c:	b570      	push	{r4, r5, r6, lr}
 8016b4e:	4604      	mov	r4, r0
 8016b50:	b30b      	cbz	r3, 8016b96 <rcl_wait_set_add_guard_condition+0x4e>
 8016b52:	b319      	cbz	r1, 8016b9c <rcl_wait_set_add_guard_condition+0x54>
 8016b54:	68dd      	ldr	r5, [r3, #12]
 8016b56:	68c0      	ldr	r0, [r0, #12]
 8016b58:	4285      	cmp	r5, r0
 8016b5a:	d217      	bcs.n	8016b8c <rcl_wait_set_add_guard_condition+0x44>
 8016b5c:	68a0      	ldr	r0, [r4, #8]
 8016b5e:	1c6e      	adds	r6, r5, #1
 8016b60:	60de      	str	r6, [r3, #12]
 8016b62:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8016b66:	b102      	cbz	r2, 8016b6a <rcl_wait_set_add_guard_condition+0x22>
 8016b68:	6015      	str	r5, [r2, #0]
 8016b6a:	4608      	mov	r0, r1
 8016b6c:	f003 fd70 	bl	801a650 <rcl_guard_condition_get_rmw_handle>
 8016b70:	b150      	cbz	r0, 8016b88 <rcl_wait_set_add_guard_condition+0x40>
 8016b72:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8016b74:	6842      	ldr	r2, [r0, #4]
 8016b76:	695b      	ldr	r3, [r3, #20]
 8016b78:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8016b7c:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8016b7e:	6913      	ldr	r3, [r2, #16]
 8016b80:	3301      	adds	r3, #1
 8016b82:	2000      	movs	r0, #0
 8016b84:	6113      	str	r3, [r2, #16]
 8016b86:	bd70      	pop	{r4, r5, r6, pc}
 8016b88:	2001      	movs	r0, #1
 8016b8a:	bd70      	pop	{r4, r5, r6, pc}
 8016b8c:	f240 3086 	movw	r0, #902	@ 0x386
 8016b90:	bd70      	pop	{r4, r5, r6, pc}
 8016b92:	200b      	movs	r0, #11
 8016b94:	4770      	bx	lr
 8016b96:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8016b9a:	bd70      	pop	{r4, r5, r6, pc}
 8016b9c:	200b      	movs	r0, #11
 8016b9e:	bd70      	pop	{r4, r5, r6, pc}

08016ba0 <rcl_wait_set_add_timer>:
 8016ba0:	b328      	cbz	r0, 8016bee <rcl_wait_set_add_timer+0x4e>
 8016ba2:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8016ba4:	b570      	push	{r4, r5, r6, lr}
 8016ba6:	4604      	mov	r4, r0
 8016ba8:	b31b      	cbz	r3, 8016bf2 <rcl_wait_set_add_timer+0x52>
 8016baa:	b329      	cbz	r1, 8016bf8 <rcl_wait_set_add_timer+0x58>
 8016bac:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8016bae:	6965      	ldr	r5, [r4, #20]
 8016bb0:	42a8      	cmp	r0, r5
 8016bb2:	d219      	bcs.n	8016be8 <rcl_wait_set_add_timer+0x48>
 8016bb4:	6925      	ldr	r5, [r4, #16]
 8016bb6:	1c46      	adds	r6, r0, #1
 8016bb8:	641e      	str	r6, [r3, #64]	@ 0x40
 8016bba:	f845 1020 	str.w	r1, [r5, r0, lsl #2]
 8016bbe:	b102      	cbz	r2, 8016bc2 <rcl_wait_set_add_timer+0x22>
 8016bc0:	6010      	str	r0, [r2, #0]
 8016bc2:	4608      	mov	r0, r1
 8016bc4:	f7ff fc10 	bl	80163e8 <rcl_timer_get_guard_condition>
 8016bc8:	b168      	cbz	r0, 8016be6 <rcl_wait_set_add_timer+0x46>
 8016bca:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8016bcc:	68e3      	ldr	r3, [r4, #12]
 8016bce:	6c15      	ldr	r5, [r2, #64]	@ 0x40
 8016bd0:	3b01      	subs	r3, #1
 8016bd2:	441d      	add	r5, r3
 8016bd4:	f003 fd3c 	bl	801a650 <rcl_guard_condition_get_rmw_handle>
 8016bd8:	b180      	cbz	r0, 8016bfc <rcl_wait_set_add_timer+0x5c>
 8016bda:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8016bdc:	6842      	ldr	r2, [r0, #4]
 8016bde:	695b      	ldr	r3, [r3, #20]
 8016be0:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8016be4:	2000      	movs	r0, #0
 8016be6:	bd70      	pop	{r4, r5, r6, pc}
 8016be8:	f240 3086 	movw	r0, #902	@ 0x386
 8016bec:	bd70      	pop	{r4, r5, r6, pc}
 8016bee:	200b      	movs	r0, #11
 8016bf0:	4770      	bx	lr
 8016bf2:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8016bf6:	bd70      	pop	{r4, r5, r6, pc}
 8016bf8:	200b      	movs	r0, #11
 8016bfa:	bd70      	pop	{r4, r5, r6, pc}
 8016bfc:	2001      	movs	r0, #1
 8016bfe:	bd70      	pop	{r4, r5, r6, pc}

08016c00 <rcl_wait_set_add_client>:
 8016c00:	b318      	cbz	r0, 8016c4a <rcl_wait_set_add_client+0x4a>
 8016c02:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8016c04:	b570      	push	{r4, r5, r6, lr}
 8016c06:	4604      	mov	r4, r0
 8016c08:	b30b      	cbz	r3, 8016c4e <rcl_wait_set_add_client+0x4e>
 8016c0a:	b319      	cbz	r1, 8016c54 <rcl_wait_set_add_client+0x54>
 8016c0c:	699d      	ldr	r5, [r3, #24]
 8016c0e:	69c0      	ldr	r0, [r0, #28]
 8016c10:	4285      	cmp	r5, r0
 8016c12:	d217      	bcs.n	8016c44 <rcl_wait_set_add_client+0x44>
 8016c14:	69a0      	ldr	r0, [r4, #24]
 8016c16:	1c6e      	adds	r6, r5, #1
 8016c18:	619e      	str	r6, [r3, #24]
 8016c1a:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8016c1e:	b102      	cbz	r2, 8016c22 <rcl_wait_set_add_client+0x22>
 8016c20:	6015      	str	r5, [r2, #0]
 8016c22:	4608      	mov	r0, r1
 8016c24:	f7fe fa20 	bl	8015068 <rcl_client_get_rmw_handle>
 8016c28:	b150      	cbz	r0, 8016c40 <rcl_wait_set_add_client+0x40>
 8016c2a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8016c2c:	6842      	ldr	r2, [r0, #4]
 8016c2e:	6a1b      	ldr	r3, [r3, #32]
 8016c30:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8016c34:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8016c36:	69d3      	ldr	r3, [r2, #28]
 8016c38:	3301      	adds	r3, #1
 8016c3a:	2000      	movs	r0, #0
 8016c3c:	61d3      	str	r3, [r2, #28]
 8016c3e:	bd70      	pop	{r4, r5, r6, pc}
 8016c40:	2001      	movs	r0, #1
 8016c42:	bd70      	pop	{r4, r5, r6, pc}
 8016c44:	f240 3086 	movw	r0, #902	@ 0x386
 8016c48:	bd70      	pop	{r4, r5, r6, pc}
 8016c4a:	200b      	movs	r0, #11
 8016c4c:	4770      	bx	lr
 8016c4e:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8016c52:	bd70      	pop	{r4, r5, r6, pc}
 8016c54:	200b      	movs	r0, #11
 8016c56:	bd70      	pop	{r4, r5, r6, pc}

08016c58 <rcl_wait_set_add_service>:
 8016c58:	b318      	cbz	r0, 8016ca2 <rcl_wait_set_add_service+0x4a>
 8016c5a:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8016c5c:	b570      	push	{r4, r5, r6, lr}
 8016c5e:	4604      	mov	r4, r0
 8016c60:	b30b      	cbz	r3, 8016ca6 <rcl_wait_set_add_service+0x4e>
 8016c62:	b319      	cbz	r1, 8016cac <rcl_wait_set_add_service+0x54>
 8016c64:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 8016c66:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8016c68:	4285      	cmp	r5, r0
 8016c6a:	d217      	bcs.n	8016c9c <rcl_wait_set_add_service+0x44>
 8016c6c:	6a20      	ldr	r0, [r4, #32]
 8016c6e:	1c6e      	adds	r6, r5, #1
 8016c70:	625e      	str	r6, [r3, #36]	@ 0x24
 8016c72:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8016c76:	b102      	cbz	r2, 8016c7a <rcl_wait_set_add_service+0x22>
 8016c78:	6015      	str	r5, [r2, #0]
 8016c7a:	4608      	mov	r0, r1
 8016c7c:	f7fe fe62 	bl	8015944 <rcl_service_get_rmw_handle>
 8016c80:	b150      	cbz	r0, 8016c98 <rcl_wait_set_add_service+0x40>
 8016c82:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8016c84:	6842      	ldr	r2, [r0, #4]
 8016c86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016c88:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8016c8c:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8016c8e:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 8016c90:	3301      	adds	r3, #1
 8016c92:	2000      	movs	r0, #0
 8016c94:	6293      	str	r3, [r2, #40]	@ 0x28
 8016c96:	bd70      	pop	{r4, r5, r6, pc}
 8016c98:	2001      	movs	r0, #1
 8016c9a:	bd70      	pop	{r4, r5, r6, pc}
 8016c9c:	f240 3086 	movw	r0, #902	@ 0x386
 8016ca0:	bd70      	pop	{r4, r5, r6, pc}
 8016ca2:	200b      	movs	r0, #11
 8016ca4:	4770      	bx	lr
 8016ca6:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8016caa:	bd70      	pop	{r4, r5, r6, pc}
 8016cac:	200b      	movs	r0, #11
 8016cae:	bd70      	pop	{r4, r5, r6, pc}

08016cb0 <rcl_wait>:
 8016cb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016cb4:	ed2d 8b02 	vpush	{d8}
 8016cb8:	b08d      	sub	sp, #52	@ 0x34
 8016cba:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8016cbe:	2800      	cmp	r0, #0
 8016cc0:	f000 8143 	beq.w	8016f4a <rcl_wait+0x29a>
 8016cc4:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 8016cc6:	4605      	mov	r5, r0
 8016cc8:	2e00      	cmp	r6, #0
 8016cca:	f000 8112 	beq.w	8016ef2 <rcl_wait+0x242>
 8016cce:	6843      	ldr	r3, [r0, #4]
 8016cd0:	b983      	cbnz	r3, 8016cf4 <rcl_wait+0x44>
 8016cd2:	68eb      	ldr	r3, [r5, #12]
 8016cd4:	b973      	cbnz	r3, 8016cf4 <rcl_wait+0x44>
 8016cd6:	696b      	ldr	r3, [r5, #20]
 8016cd8:	b963      	cbnz	r3, 8016cf4 <rcl_wait+0x44>
 8016cda:	69eb      	ldr	r3, [r5, #28]
 8016cdc:	b953      	cbnz	r3, 8016cf4 <rcl_wait+0x44>
 8016cde:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8016ce0:	b943      	cbnz	r3, 8016cf4 <rcl_wait+0x44>
 8016ce2:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8016ce4:	b933      	cbnz	r3, 8016cf4 <rcl_wait+0x44>
 8016ce6:	f240 3085 	movw	r0, #901	@ 0x385
 8016cea:	b00d      	add	sp, #52	@ 0x34
 8016cec:	ecbd 8b02 	vpop	{d8}
 8016cf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016cf4:	9b04      	ldr	r3, [sp, #16]
 8016cf6:	6c32      	ldr	r2, [r6, #64]	@ 0x40
 8016cf8:	2b01      	cmp	r3, #1
 8016cfa:	9b05      	ldr	r3, [sp, #20]
 8016cfc:	f173 0300 	sbcs.w	r3, r3, #0
 8016d00:	f2c0 80f0 	blt.w	8016ee4 <rcl_wait+0x234>
 8016d04:	e9dd 8704 	ldrd	r8, r7, [sp, #16]
 8016d08:	4643      	mov	r3, r8
 8016d0a:	2a00      	cmp	r2, #0
 8016d0c:	f000 8133 	beq.w	8016f76 <rcl_wait+0x2c6>
 8016d10:	2400      	movs	r4, #0
 8016d12:	4613      	mov	r3, r2
 8016d14:	ed9f 8b9c 	vldr	d8, [pc, #624]	@ 8016f88 <rcl_wait+0x2d8>
 8016d18:	46a2      	mov	sl, r4
 8016d1a:	46a3      	mov	fp, r4
 8016d1c:	f240 3921 	movw	r9, #801	@ 0x321
 8016d20:	4632      	mov	r2, r6
 8016d22:	e014      	b.n	8016d4e <rcl_wait+0x9e>
 8016d24:	2800      	cmp	r0, #0
 8016d26:	d1e0      	bne.n	8016cea <rcl_wait+0x3a>
 8016d28:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8016d2c:	4542      	cmp	r2, r8
 8016d2e:	eb73 0107 	sbcs.w	r1, r3, r7
 8016d32:	da03      	bge.n	8016d3c <rcl_wait+0x8c>
 8016d34:	4690      	mov	r8, r2
 8016d36:	461f      	mov	r7, r3
 8016d38:	f04f 0b01 	mov.w	fp, #1
 8016d3c:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 8016d3e:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8016d40:	3401      	adds	r4, #1
 8016d42:	f14a 0a00 	adc.w	sl, sl, #0
 8016d46:	429c      	cmp	r4, r3
 8016d48:	f17a 0100 	sbcs.w	r1, sl, #0
 8016d4c:	d228      	bcs.n	8016da0 <rcl_wait+0xf0>
 8016d4e:	6928      	ldr	r0, [r5, #16]
 8016d50:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8016d54:	a908      	add	r1, sp, #32
 8016d56:	00a6      	lsls	r6, r4, #2
 8016d58:	2800      	cmp	r0, #0
 8016d5a:	d0f1      	beq.n	8016d40 <rcl_wait+0x90>
 8016d5c:	68eb      	ldr	r3, [r5, #12]
 8016d5e:	f8d2 c014 	ldr.w	ip, [r2, #20]
 8016d62:	4423      	add	r3, r4
 8016d64:	f85c e023 	ldr.w	lr, [ip, r3, lsl #2]
 8016d68:	f1be 0f00 	cmp.w	lr, #0
 8016d6c:	d006      	beq.n	8016d7c <rcl_wait+0xcc>
 8016d6e:	6913      	ldr	r3, [r2, #16]
 8016d70:	f84c e023 	str.w	lr, [ip, r3, lsl #2]
 8016d74:	3301      	adds	r3, #1
 8016d76:	6113      	str	r3, [r2, #16]
 8016d78:	692b      	ldr	r3, [r5, #16]
 8016d7a:	5998      	ldr	r0, [r3, r6]
 8016d7c:	ed8d 8b08 	vstr	d8, [sp, #32]
 8016d80:	f7ff fb00 	bl	8016384 <rcl_timer_get_time_until_next_call>
 8016d84:	4548      	cmp	r0, r9
 8016d86:	d1cd      	bne.n	8016d24 <rcl_wait+0x74>
 8016d88:	692b      	ldr	r3, [r5, #16]
 8016d8a:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 8016d8c:	2100      	movs	r1, #0
 8016d8e:	5199      	str	r1, [r3, r6]
 8016d90:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8016d92:	3401      	adds	r4, #1
 8016d94:	f14a 0a00 	adc.w	sl, sl, #0
 8016d98:	429c      	cmp	r4, r3
 8016d9a:	f17a 0100 	sbcs.w	r1, sl, #0
 8016d9e:	d3d6      	bcc.n	8016d4e <rcl_wait+0x9e>
 8016da0:	4616      	mov	r6, r2
 8016da2:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8016da6:	4313      	orrs	r3, r2
 8016da8:	46d9      	mov	r9, fp
 8016daa:	f040 80a9 	bne.w	8016f00 <rcl_wait+0x250>
 8016dae:	2300      	movs	r3, #0
 8016db0:	2200      	movs	r2, #0
 8016db2:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8016db6:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 8016dba:	ab08      	add	r3, sp, #32
 8016dbc:	9302      	str	r3, [sp, #8]
 8016dbe:	6bf2      	ldr	r2, [r6, #60]	@ 0x3c
 8016dc0:	f106 0334 	add.w	r3, r6, #52	@ 0x34
 8016dc4:	e9cd 3200 	strd	r3, r2, [sp]
 8016dc8:	f106 0110 	add.w	r1, r6, #16
 8016dcc:	f106 031c 	add.w	r3, r6, #28
 8016dd0:	f106 0228 	add.w	r2, r6, #40	@ 0x28
 8016dd4:	1d30      	adds	r0, r6, #4
 8016dd6:	f001 ff0d 	bl	8018bf4 <rmw_wait>
 8016dda:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8016ddc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8016dde:	4680      	mov	r8, r0
 8016de0:	b1ca      	cbz	r2, 8016e16 <rcl_wait+0x166>
 8016de2:	2400      	movs	r4, #0
 8016de4:	4627      	mov	r7, r4
 8016de6:	692a      	ldr	r2, [r5, #16]
 8016de8:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
 8016dec:	f10d 011f 	add.w	r1, sp, #31
 8016df0:	00a6      	lsls	r6, r4, #2
 8016df2:	b160      	cbz	r0, 8016e0e <rcl_wait+0x15e>
 8016df4:	f88d 701f 	strb.w	r7, [sp, #31]
 8016df8:	f7ff fa8a 	bl	8016310 <rcl_timer_is_ready>
 8016dfc:	2800      	cmp	r0, #0
 8016dfe:	f47f af74 	bne.w	8016cea <rcl_wait+0x3a>
 8016e02:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8016e06:	b90b      	cbnz	r3, 8016e0c <rcl_wait+0x15c>
 8016e08:	692a      	ldr	r2, [r5, #16]
 8016e0a:	5193      	str	r3, [r2, r6]
 8016e0c:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8016e0e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8016e10:	3401      	adds	r4, #1
 8016e12:	42a2      	cmp	r2, r4
 8016e14:	d8e7      	bhi.n	8016de6 <rcl_wait+0x136>
 8016e16:	f038 0002 	bics.w	r0, r8, #2
 8016e1a:	f040 8090 	bne.w	8016f3e <rcl_wait+0x28e>
 8016e1e:	686e      	ldr	r6, [r5, #4]
 8016e20:	4602      	mov	r2, r0
 8016e22:	b91e      	cbnz	r6, 8016e2c <rcl_wait+0x17c>
 8016e24:	e00d      	b.n	8016e42 <rcl_wait+0x192>
 8016e26:	3201      	adds	r2, #1
 8016e28:	42b2      	cmp	r2, r6
 8016e2a:	d00a      	beq.n	8016e42 <rcl_wait+0x192>
 8016e2c:	6899      	ldr	r1, [r3, #8]
 8016e2e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8016e32:	2900      	cmp	r1, #0
 8016e34:	d1f7      	bne.n	8016e26 <rcl_wait+0x176>
 8016e36:	682c      	ldr	r4, [r5, #0]
 8016e38:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8016e3c:	3201      	adds	r2, #1
 8016e3e:	42b2      	cmp	r2, r6
 8016e40:	d1f4      	bne.n	8016e2c <rcl_wait+0x17c>
 8016e42:	68ee      	ldr	r6, [r5, #12]
 8016e44:	2200      	movs	r2, #0
 8016e46:	b91e      	cbnz	r6, 8016e50 <rcl_wait+0x1a0>
 8016e48:	e00d      	b.n	8016e66 <rcl_wait+0x1b6>
 8016e4a:	3201      	adds	r2, #1
 8016e4c:	42b2      	cmp	r2, r6
 8016e4e:	d00a      	beq.n	8016e66 <rcl_wait+0x1b6>
 8016e50:	6959      	ldr	r1, [r3, #20]
 8016e52:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8016e56:	2900      	cmp	r1, #0
 8016e58:	d1f7      	bne.n	8016e4a <rcl_wait+0x19a>
 8016e5a:	68ac      	ldr	r4, [r5, #8]
 8016e5c:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8016e60:	3201      	adds	r2, #1
 8016e62:	42b2      	cmp	r2, r6
 8016e64:	d1f4      	bne.n	8016e50 <rcl_wait+0x1a0>
 8016e66:	69ee      	ldr	r6, [r5, #28]
 8016e68:	2200      	movs	r2, #0
 8016e6a:	b91e      	cbnz	r6, 8016e74 <rcl_wait+0x1c4>
 8016e6c:	e00d      	b.n	8016e8a <rcl_wait+0x1da>
 8016e6e:	3201      	adds	r2, #1
 8016e70:	42b2      	cmp	r2, r6
 8016e72:	d00a      	beq.n	8016e8a <rcl_wait+0x1da>
 8016e74:	6a19      	ldr	r1, [r3, #32]
 8016e76:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8016e7a:	2900      	cmp	r1, #0
 8016e7c:	d1f7      	bne.n	8016e6e <rcl_wait+0x1be>
 8016e7e:	69ac      	ldr	r4, [r5, #24]
 8016e80:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8016e84:	3201      	adds	r2, #1
 8016e86:	42b2      	cmp	r2, r6
 8016e88:	d1f4      	bne.n	8016e74 <rcl_wait+0x1c4>
 8016e8a:	6a6e      	ldr	r6, [r5, #36]	@ 0x24
 8016e8c:	2200      	movs	r2, #0
 8016e8e:	b91e      	cbnz	r6, 8016e98 <rcl_wait+0x1e8>
 8016e90:	e00d      	b.n	8016eae <rcl_wait+0x1fe>
 8016e92:	3201      	adds	r2, #1
 8016e94:	4296      	cmp	r6, r2
 8016e96:	d00a      	beq.n	8016eae <rcl_wait+0x1fe>
 8016e98:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8016e9a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8016e9e:	2900      	cmp	r1, #0
 8016ea0:	d1f7      	bne.n	8016e92 <rcl_wait+0x1e2>
 8016ea2:	6a2c      	ldr	r4, [r5, #32]
 8016ea4:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8016ea8:	3201      	adds	r2, #1
 8016eaa:	4296      	cmp	r6, r2
 8016eac:	d1f4      	bne.n	8016e98 <rcl_wait+0x1e8>
 8016eae:	6aee      	ldr	r6, [r5, #44]	@ 0x2c
 8016eb0:	2200      	movs	r2, #0
 8016eb2:	b91e      	cbnz	r6, 8016ebc <rcl_wait+0x20c>
 8016eb4:	e00d      	b.n	8016ed2 <rcl_wait+0x222>
 8016eb6:	3201      	adds	r2, #1
 8016eb8:	42b2      	cmp	r2, r6
 8016eba:	d00a      	beq.n	8016ed2 <rcl_wait+0x222>
 8016ebc:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8016ebe:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8016ec2:	2900      	cmp	r1, #0
 8016ec4:	d1f7      	bne.n	8016eb6 <rcl_wait+0x206>
 8016ec6:	6aac      	ldr	r4, [r5, #40]	@ 0x28
 8016ec8:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8016ecc:	3201      	adds	r2, #1
 8016ece:	42b2      	cmp	r2, r6
 8016ed0:	d1f4      	bne.n	8016ebc <rcl_wait+0x20c>
 8016ed2:	f1b8 0f02 	cmp.w	r8, #2
 8016ed6:	f47f af08 	bne.w	8016cea <rcl_wait+0x3a>
 8016eda:	464b      	mov	r3, r9
 8016edc:	2b00      	cmp	r3, #0
 8016ede:	bf08      	it	eq
 8016ee0:	2002      	moveq	r0, #2
 8016ee2:	e702      	b.n	8016cea <rcl_wait+0x3a>
 8016ee4:	2a00      	cmp	r2, #0
 8016ee6:	d03a      	beq.n	8016f5e <rcl_wait+0x2ae>
 8016ee8:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8016eec:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 8016ef0:	e70e      	b.n	8016d10 <rcl_wait+0x60>
 8016ef2:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8016ef6:	b00d      	add	sp, #52	@ 0x34
 8016ef8:	ecbd 8b02 	vpop	{d8}
 8016efc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016f00:	9b04      	ldr	r3, [sp, #16]
 8016f02:	2b01      	cmp	r3, #1
 8016f04:	9b05      	ldr	r3, [sp, #20]
 8016f06:	f173 0300 	sbcs.w	r3, r3, #0
 8016f0a:	db24      	blt.n	8016f56 <rcl_wait+0x2a6>
 8016f0c:	2f00      	cmp	r7, #0
 8016f0e:	bfbc      	itt	lt
 8016f10:	f04f 0800 	movlt.w	r8, #0
 8016f14:	4647      	movlt	r7, r8
 8016f16:	a31e      	add	r3, pc, #120	@ (adr r3, 8016f90 <rcl_wait+0x2e0>)
 8016f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016f1c:	4640      	mov	r0, r8
 8016f1e:	4639      	mov	r1, r7
 8016f20:	f7e9 feac 	bl	8000c7c <__aeabi_ldivmod>
 8016f24:	a31a      	add	r3, pc, #104	@ (adr r3, 8016f90 <rcl_wait+0x2e0>)
 8016f26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016f2a:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8016f2e:	4640      	mov	r0, r8
 8016f30:	4639      	mov	r1, r7
 8016f32:	f7e9 fea3 	bl	8000c7c <__aeabi_ldivmod>
 8016f36:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 8016f3a:	ab08      	add	r3, sp, #32
 8016f3c:	e73e      	b.n	8016dbc <rcl_wait+0x10c>
 8016f3e:	2001      	movs	r0, #1
 8016f40:	b00d      	add	sp, #52	@ 0x34
 8016f42:	ecbd 8b02 	vpop	{d8}
 8016f46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016f4a:	200b      	movs	r0, #11
 8016f4c:	b00d      	add	sp, #52	@ 0x34
 8016f4e:	ecbd 8b02 	vpop	{d8}
 8016f52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016f56:	465b      	mov	r3, fp
 8016f58:	2b00      	cmp	r3, #0
 8016f5a:	d1d7      	bne.n	8016f0c <rcl_wait+0x25c>
 8016f5c:	e72e      	b.n	8016dbc <rcl_wait+0x10c>
 8016f5e:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 8016f62:	430b      	orrs	r3, r1
 8016f64:	bf08      	it	eq
 8016f66:	4691      	moveq	r9, r2
 8016f68:	f43f af21 	beq.w	8016dae <rcl_wait+0xfe>
 8016f6c:	9b04      	ldr	r3, [sp, #16]
 8016f6e:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8016f72:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 8016f76:	2b01      	cmp	r3, #1
 8016f78:	9b05      	ldr	r3, [sp, #20]
 8016f7a:	f173 0300 	sbcs.w	r3, r3, #0
 8016f7e:	f04f 0300 	mov.w	r3, #0
 8016f82:	4699      	mov	r9, r3
 8016f84:	dac2      	bge.n	8016f0c <rcl_wait+0x25c>
 8016f86:	e719      	b.n	8016dbc <rcl_wait+0x10c>
 8016f88:	ffffffff 	.word	0xffffffff
 8016f8c:	7fffffff 	.word	0x7fffffff
 8016f90:	3b9aca00 	.word	0x3b9aca00
 8016f94:	00000000 	.word	0x00000000

08016f98 <rcl_action_take_goal_response>:
 8016f98:	2800      	cmp	r0, #0
 8016f9a:	d039      	beq.n	8017010 <rcl_action_take_goal_response+0x78>
 8016f9c:	b570      	push	{r4, r5, r6, lr}
 8016f9e:	4604      	mov	r4, r0
 8016fa0:	6800      	ldr	r0, [r0, #0]
 8016fa2:	b380      	cbz	r0, 8017006 <rcl_action_take_goal_response+0x6e>
 8016fa4:	460d      	mov	r5, r1
 8016fa6:	4616      	mov	r6, r2
 8016fa8:	f7fe f8e2 	bl	8015170 <rcl_client_is_valid>
 8016fac:	b330      	cbz	r0, 8016ffc <rcl_action_take_goal_response+0x64>
 8016fae:	6820      	ldr	r0, [r4, #0]
 8016fb0:	3004      	adds	r0, #4
 8016fb2:	f7fe f8dd 	bl	8015170 <rcl_client_is_valid>
 8016fb6:	b308      	cbz	r0, 8016ffc <rcl_action_take_goal_response+0x64>
 8016fb8:	6820      	ldr	r0, [r4, #0]
 8016fba:	3008      	adds	r0, #8
 8016fbc:	f7fe f8d8 	bl	8015170 <rcl_client_is_valid>
 8016fc0:	b1e0      	cbz	r0, 8016ffc <rcl_action_take_goal_response+0x64>
 8016fc2:	6820      	ldr	r0, [r4, #0]
 8016fc4:	300c      	adds	r0, #12
 8016fc6:	f7fe fe5f 	bl	8015c88 <rcl_subscription_is_valid>
 8016fca:	b1b8      	cbz	r0, 8016ffc <rcl_action_take_goal_response+0x64>
 8016fcc:	6820      	ldr	r0, [r4, #0]
 8016fce:	3010      	adds	r0, #16
 8016fd0:	f7fe fe5a 	bl	8015c88 <rcl_subscription_is_valid>
 8016fd4:	b190      	cbz	r0, 8016ffc <rcl_action_take_goal_response+0x64>
 8016fd6:	b1cd      	cbz	r5, 801700c <rcl_action_take_goal_response+0x74>
 8016fd8:	b1c6      	cbz	r6, 801700c <rcl_action_take_goal_response+0x74>
 8016fda:	6820      	ldr	r0, [r4, #0]
 8016fdc:	4632      	mov	r2, r6
 8016fde:	4629      	mov	r1, r5
 8016fe0:	f7fe f87e 	bl	80150e0 <rcl_take_response>
 8016fe4:	b148      	cbz	r0, 8016ffa <rcl_action_take_goal_response+0x62>
 8016fe6:	280a      	cmp	r0, #10
 8016fe8:	d007      	beq.n	8016ffa <rcl_action_take_goal_response+0x62>
 8016fea:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8016fee:	f640 0337 	movw	r3, #2103	@ 0x837
 8016ff2:	4290      	cmp	r0, r2
 8016ff4:	bf0c      	ite	eq
 8016ff6:	4618      	moveq	r0, r3
 8016ff8:	2001      	movne	r0, #1
 8016ffa:	bd70      	pop	{r4, r5, r6, pc}
 8016ffc:	f7f8 fcdc 	bl	800f9b8 <rcutils_reset_error>
 8017000:	f640 0036 	movw	r0, #2102	@ 0x836
 8017004:	bd70      	pop	{r4, r5, r6, pc}
 8017006:	f640 0036 	movw	r0, #2102	@ 0x836
 801700a:	bd70      	pop	{r4, r5, r6, pc}
 801700c:	200b      	movs	r0, #11
 801700e:	bd70      	pop	{r4, r5, r6, pc}
 8017010:	f640 0036 	movw	r0, #2102	@ 0x836
 8017014:	4770      	bx	lr
 8017016:	bf00      	nop

08017018 <rcl_action_send_result_request>:
 8017018:	b390      	cbz	r0, 8017080 <rcl_action_send_result_request+0x68>
 801701a:	b570      	push	{r4, r5, r6, lr}
 801701c:	4604      	mov	r4, r0
 801701e:	6800      	ldr	r0, [r0, #0]
 8017020:	b348      	cbz	r0, 8017076 <rcl_action_send_result_request+0x5e>
 8017022:	460d      	mov	r5, r1
 8017024:	4616      	mov	r6, r2
 8017026:	f7fe f8a3 	bl	8015170 <rcl_client_is_valid>
 801702a:	b1f8      	cbz	r0, 801706c <rcl_action_send_result_request+0x54>
 801702c:	6820      	ldr	r0, [r4, #0]
 801702e:	3004      	adds	r0, #4
 8017030:	f7fe f89e 	bl	8015170 <rcl_client_is_valid>
 8017034:	b1d0      	cbz	r0, 801706c <rcl_action_send_result_request+0x54>
 8017036:	6820      	ldr	r0, [r4, #0]
 8017038:	3008      	adds	r0, #8
 801703a:	f7fe f899 	bl	8015170 <rcl_client_is_valid>
 801703e:	b1a8      	cbz	r0, 801706c <rcl_action_send_result_request+0x54>
 8017040:	6820      	ldr	r0, [r4, #0]
 8017042:	300c      	adds	r0, #12
 8017044:	f7fe fe20 	bl	8015c88 <rcl_subscription_is_valid>
 8017048:	b180      	cbz	r0, 801706c <rcl_action_send_result_request+0x54>
 801704a:	6820      	ldr	r0, [r4, #0]
 801704c:	3010      	adds	r0, #16
 801704e:	f7fe fe1b 	bl	8015c88 <rcl_subscription_is_valid>
 8017052:	b158      	cbz	r0, 801706c <rcl_action_send_result_request+0x54>
 8017054:	b195      	cbz	r5, 801707c <rcl_action_send_result_request+0x64>
 8017056:	b18e      	cbz	r6, 801707c <rcl_action_send_result_request+0x64>
 8017058:	6820      	ldr	r0, [r4, #0]
 801705a:	4632      	mov	r2, r6
 801705c:	4629      	mov	r1, r5
 801705e:	3008      	adds	r0, #8
 8017060:	f7fe f808 	bl	8015074 <rcl_send_request>
 8017064:	3800      	subs	r0, #0
 8017066:	bf18      	it	ne
 8017068:	2001      	movne	r0, #1
 801706a:	bd70      	pop	{r4, r5, r6, pc}
 801706c:	f7f8 fca4 	bl	800f9b8 <rcutils_reset_error>
 8017070:	f640 0036 	movw	r0, #2102	@ 0x836
 8017074:	bd70      	pop	{r4, r5, r6, pc}
 8017076:	f640 0036 	movw	r0, #2102	@ 0x836
 801707a:	bd70      	pop	{r4, r5, r6, pc}
 801707c:	200b      	movs	r0, #11
 801707e:	bd70      	pop	{r4, r5, r6, pc}
 8017080:	f640 0036 	movw	r0, #2102	@ 0x836
 8017084:	4770      	bx	lr
 8017086:	bf00      	nop

08017088 <rcl_action_take_result_response>:
 8017088:	2800      	cmp	r0, #0
 801708a:	d03a      	beq.n	8017102 <rcl_action_take_result_response+0x7a>
 801708c:	b570      	push	{r4, r5, r6, lr}
 801708e:	4604      	mov	r4, r0
 8017090:	6800      	ldr	r0, [r0, #0]
 8017092:	b388      	cbz	r0, 80170f8 <rcl_action_take_result_response+0x70>
 8017094:	460d      	mov	r5, r1
 8017096:	4616      	mov	r6, r2
 8017098:	f7fe f86a 	bl	8015170 <rcl_client_is_valid>
 801709c:	b338      	cbz	r0, 80170ee <rcl_action_take_result_response+0x66>
 801709e:	6820      	ldr	r0, [r4, #0]
 80170a0:	3004      	adds	r0, #4
 80170a2:	f7fe f865 	bl	8015170 <rcl_client_is_valid>
 80170a6:	b310      	cbz	r0, 80170ee <rcl_action_take_result_response+0x66>
 80170a8:	6820      	ldr	r0, [r4, #0]
 80170aa:	3008      	adds	r0, #8
 80170ac:	f7fe f860 	bl	8015170 <rcl_client_is_valid>
 80170b0:	b1e8      	cbz	r0, 80170ee <rcl_action_take_result_response+0x66>
 80170b2:	6820      	ldr	r0, [r4, #0]
 80170b4:	300c      	adds	r0, #12
 80170b6:	f7fe fde7 	bl	8015c88 <rcl_subscription_is_valid>
 80170ba:	b1c0      	cbz	r0, 80170ee <rcl_action_take_result_response+0x66>
 80170bc:	6820      	ldr	r0, [r4, #0]
 80170be:	3010      	adds	r0, #16
 80170c0:	f7fe fde2 	bl	8015c88 <rcl_subscription_is_valid>
 80170c4:	b198      	cbz	r0, 80170ee <rcl_action_take_result_response+0x66>
 80170c6:	b1d5      	cbz	r5, 80170fe <rcl_action_take_result_response+0x76>
 80170c8:	b1ce      	cbz	r6, 80170fe <rcl_action_take_result_response+0x76>
 80170ca:	6820      	ldr	r0, [r4, #0]
 80170cc:	4632      	mov	r2, r6
 80170ce:	4629      	mov	r1, r5
 80170d0:	3008      	adds	r0, #8
 80170d2:	f7fe f805 	bl	80150e0 <rcl_take_response>
 80170d6:	b148      	cbz	r0, 80170ec <rcl_action_take_result_response+0x64>
 80170d8:	280a      	cmp	r0, #10
 80170da:	d007      	beq.n	80170ec <rcl_action_take_result_response+0x64>
 80170dc:	f240 12f5 	movw	r2, #501	@ 0x1f5
 80170e0:	f640 0337 	movw	r3, #2103	@ 0x837
 80170e4:	4290      	cmp	r0, r2
 80170e6:	bf0c      	ite	eq
 80170e8:	4618      	moveq	r0, r3
 80170ea:	2001      	movne	r0, #1
 80170ec:	bd70      	pop	{r4, r5, r6, pc}
 80170ee:	f7f8 fc63 	bl	800f9b8 <rcutils_reset_error>
 80170f2:	f640 0036 	movw	r0, #2102	@ 0x836
 80170f6:	bd70      	pop	{r4, r5, r6, pc}
 80170f8:	f640 0036 	movw	r0, #2102	@ 0x836
 80170fc:	bd70      	pop	{r4, r5, r6, pc}
 80170fe:	200b      	movs	r0, #11
 8017100:	bd70      	pop	{r4, r5, r6, pc}
 8017102:	f640 0036 	movw	r0, #2102	@ 0x836
 8017106:	4770      	bx	lr

08017108 <rcl_action_take_cancel_response>:
 8017108:	2800      	cmp	r0, #0
 801710a:	d03a      	beq.n	8017182 <rcl_action_take_cancel_response+0x7a>
 801710c:	b570      	push	{r4, r5, r6, lr}
 801710e:	4604      	mov	r4, r0
 8017110:	6800      	ldr	r0, [r0, #0]
 8017112:	b388      	cbz	r0, 8017178 <rcl_action_take_cancel_response+0x70>
 8017114:	460d      	mov	r5, r1
 8017116:	4616      	mov	r6, r2
 8017118:	f7fe f82a 	bl	8015170 <rcl_client_is_valid>
 801711c:	b338      	cbz	r0, 801716e <rcl_action_take_cancel_response+0x66>
 801711e:	6820      	ldr	r0, [r4, #0]
 8017120:	3004      	adds	r0, #4
 8017122:	f7fe f825 	bl	8015170 <rcl_client_is_valid>
 8017126:	b310      	cbz	r0, 801716e <rcl_action_take_cancel_response+0x66>
 8017128:	6820      	ldr	r0, [r4, #0]
 801712a:	3008      	adds	r0, #8
 801712c:	f7fe f820 	bl	8015170 <rcl_client_is_valid>
 8017130:	b1e8      	cbz	r0, 801716e <rcl_action_take_cancel_response+0x66>
 8017132:	6820      	ldr	r0, [r4, #0]
 8017134:	300c      	adds	r0, #12
 8017136:	f7fe fda7 	bl	8015c88 <rcl_subscription_is_valid>
 801713a:	b1c0      	cbz	r0, 801716e <rcl_action_take_cancel_response+0x66>
 801713c:	6820      	ldr	r0, [r4, #0]
 801713e:	3010      	adds	r0, #16
 8017140:	f7fe fda2 	bl	8015c88 <rcl_subscription_is_valid>
 8017144:	b198      	cbz	r0, 801716e <rcl_action_take_cancel_response+0x66>
 8017146:	b1d5      	cbz	r5, 801717e <rcl_action_take_cancel_response+0x76>
 8017148:	b1ce      	cbz	r6, 801717e <rcl_action_take_cancel_response+0x76>
 801714a:	6820      	ldr	r0, [r4, #0]
 801714c:	4632      	mov	r2, r6
 801714e:	4629      	mov	r1, r5
 8017150:	3004      	adds	r0, #4
 8017152:	f7fd ffc5 	bl	80150e0 <rcl_take_response>
 8017156:	b148      	cbz	r0, 801716c <rcl_action_take_cancel_response+0x64>
 8017158:	280a      	cmp	r0, #10
 801715a:	d007      	beq.n	801716c <rcl_action_take_cancel_response+0x64>
 801715c:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8017160:	f640 0337 	movw	r3, #2103	@ 0x837
 8017164:	4290      	cmp	r0, r2
 8017166:	bf0c      	ite	eq
 8017168:	4618      	moveq	r0, r3
 801716a:	2001      	movne	r0, #1
 801716c:	bd70      	pop	{r4, r5, r6, pc}
 801716e:	f7f8 fc23 	bl	800f9b8 <rcutils_reset_error>
 8017172:	f640 0036 	movw	r0, #2102	@ 0x836
 8017176:	bd70      	pop	{r4, r5, r6, pc}
 8017178:	f640 0036 	movw	r0, #2102	@ 0x836
 801717c:	bd70      	pop	{r4, r5, r6, pc}
 801717e:	200b      	movs	r0, #11
 8017180:	bd70      	pop	{r4, r5, r6, pc}
 8017182:	f640 0036 	movw	r0, #2102	@ 0x836
 8017186:	4770      	bx	lr

08017188 <rcl_action_take_feedback>:
 8017188:	2800      	cmp	r0, #0
 801718a:	d038      	beq.n	80171fe <rcl_action_take_feedback+0x76>
 801718c:	b530      	push	{r4, r5, lr}
 801718e:	4604      	mov	r4, r0
 8017190:	6800      	ldr	r0, [r0, #0]
 8017192:	b091      	sub	sp, #68	@ 0x44
 8017194:	b378      	cbz	r0, 80171f6 <rcl_action_take_feedback+0x6e>
 8017196:	460d      	mov	r5, r1
 8017198:	f7fd ffea 	bl	8015170 <rcl_client_is_valid>
 801719c:	b328      	cbz	r0, 80171ea <rcl_action_take_feedback+0x62>
 801719e:	6820      	ldr	r0, [r4, #0]
 80171a0:	3004      	adds	r0, #4
 80171a2:	f7fd ffe5 	bl	8015170 <rcl_client_is_valid>
 80171a6:	b300      	cbz	r0, 80171ea <rcl_action_take_feedback+0x62>
 80171a8:	6820      	ldr	r0, [r4, #0]
 80171aa:	3008      	adds	r0, #8
 80171ac:	f7fd ffe0 	bl	8015170 <rcl_client_is_valid>
 80171b0:	b1d8      	cbz	r0, 80171ea <rcl_action_take_feedback+0x62>
 80171b2:	6820      	ldr	r0, [r4, #0]
 80171b4:	300c      	adds	r0, #12
 80171b6:	f7fe fd67 	bl	8015c88 <rcl_subscription_is_valid>
 80171ba:	b1b0      	cbz	r0, 80171ea <rcl_action_take_feedback+0x62>
 80171bc:	6820      	ldr	r0, [r4, #0]
 80171be:	3010      	adds	r0, #16
 80171c0:	f7fe fd62 	bl	8015c88 <rcl_subscription_is_valid>
 80171c4:	b188      	cbz	r0, 80171ea <rcl_action_take_feedback+0x62>
 80171c6:	b1ed      	cbz	r5, 8017204 <rcl_action_take_feedback+0x7c>
 80171c8:	6820      	ldr	r0, [r4, #0]
 80171ca:	2300      	movs	r3, #0
 80171cc:	466a      	mov	r2, sp
 80171ce:	4629      	mov	r1, r5
 80171d0:	300c      	adds	r0, #12
 80171d2:	f7fe fcfb 	bl	8015bcc <rcl_take>
 80171d6:	b160      	cbz	r0, 80171f2 <rcl_action_take_feedback+0x6a>
 80171d8:	f240 1391 	movw	r3, #401	@ 0x191
 80171dc:	4298      	cmp	r0, r3
 80171de:	d014      	beq.n	801720a <rcl_action_take_feedback+0x82>
 80171e0:	280a      	cmp	r0, #10
 80171e2:	bf18      	it	ne
 80171e4:	2001      	movne	r0, #1
 80171e6:	b011      	add	sp, #68	@ 0x44
 80171e8:	bd30      	pop	{r4, r5, pc}
 80171ea:	f7f8 fbe5 	bl	800f9b8 <rcutils_reset_error>
 80171ee:	f640 0036 	movw	r0, #2102	@ 0x836
 80171f2:	b011      	add	sp, #68	@ 0x44
 80171f4:	bd30      	pop	{r4, r5, pc}
 80171f6:	f640 0036 	movw	r0, #2102	@ 0x836
 80171fa:	b011      	add	sp, #68	@ 0x44
 80171fc:	bd30      	pop	{r4, r5, pc}
 80171fe:	f640 0036 	movw	r0, #2102	@ 0x836
 8017202:	4770      	bx	lr
 8017204:	200b      	movs	r0, #11
 8017206:	b011      	add	sp, #68	@ 0x44
 8017208:	bd30      	pop	{r4, r5, pc}
 801720a:	f640 0037 	movw	r0, #2103	@ 0x837
 801720e:	e7f0      	b.n	80171f2 <rcl_action_take_feedback+0x6a>

08017210 <rcl_action_wait_set_add_action_client>:
 8017210:	2800      	cmp	r0, #0
 8017212:	d048      	beq.n	80172a6 <rcl_action_wait_set_add_action_client+0x96>
 8017214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017216:	460c      	mov	r4, r1
 8017218:	2900      	cmp	r1, #0
 801721a:	d03c      	beq.n	8017296 <rcl_action_wait_set_add_action_client+0x86>
 801721c:	4605      	mov	r5, r0
 801721e:	6808      	ldr	r0, [r1, #0]
 8017220:	2800      	cmp	r0, #0
 8017222:	d038      	beq.n	8017296 <rcl_action_wait_set_add_action_client+0x86>
 8017224:	4617      	mov	r7, r2
 8017226:	461e      	mov	r6, r3
 8017228:	f7fd ffa2 	bl	8015170 <rcl_client_is_valid>
 801722c:	b3b0      	cbz	r0, 801729c <rcl_action_wait_set_add_action_client+0x8c>
 801722e:	6820      	ldr	r0, [r4, #0]
 8017230:	3004      	adds	r0, #4
 8017232:	f7fd ff9d 	bl	8015170 <rcl_client_is_valid>
 8017236:	b388      	cbz	r0, 801729c <rcl_action_wait_set_add_action_client+0x8c>
 8017238:	6820      	ldr	r0, [r4, #0]
 801723a:	3008      	adds	r0, #8
 801723c:	f7fd ff98 	bl	8015170 <rcl_client_is_valid>
 8017240:	b360      	cbz	r0, 801729c <rcl_action_wait_set_add_action_client+0x8c>
 8017242:	6820      	ldr	r0, [r4, #0]
 8017244:	300c      	adds	r0, #12
 8017246:	f7fe fd1f 	bl	8015c88 <rcl_subscription_is_valid>
 801724a:	b338      	cbz	r0, 801729c <rcl_action_wait_set_add_action_client+0x8c>
 801724c:	6820      	ldr	r0, [r4, #0]
 801724e:	3010      	adds	r0, #16
 8017250:	f7fe fd1a 	bl	8015c88 <rcl_subscription_is_valid>
 8017254:	b310      	cbz	r0, 801729c <rcl_action_wait_set_add_action_client+0x8c>
 8017256:	6821      	ldr	r1, [r4, #0]
 8017258:	4628      	mov	r0, r5
 801725a:	f501 72e2 	add.w	r2, r1, #452	@ 0x1c4
 801725e:	f7ff fccf 	bl	8016c00 <rcl_wait_set_add_client>
 8017262:	b9b8      	cbnz	r0, 8017294 <rcl_action_wait_set_add_action_client+0x84>
 8017264:	6821      	ldr	r1, [r4, #0]
 8017266:	4628      	mov	r0, r5
 8017268:	f501 72e4 	add.w	r2, r1, #456	@ 0x1c8
 801726c:	3104      	adds	r1, #4
 801726e:	f7ff fcc7 	bl	8016c00 <rcl_wait_set_add_client>
 8017272:	b978      	cbnz	r0, 8017294 <rcl_action_wait_set_add_action_client+0x84>
 8017274:	6821      	ldr	r1, [r4, #0]
 8017276:	4628      	mov	r0, r5
 8017278:	f501 72e6 	add.w	r2, r1, #460	@ 0x1cc
 801727c:	3108      	adds	r1, #8
 801727e:	f7ff fcbf 	bl	8016c00 <rcl_wait_set_add_client>
 8017282:	b938      	cbnz	r0, 8017294 <rcl_action_wait_set_add_action_client+0x84>
 8017284:	6821      	ldr	r1, [r4, #0]
 8017286:	4628      	mov	r0, r5
 8017288:	f501 72e8 	add.w	r2, r1, #464	@ 0x1d0
 801728c:	310c      	adds	r1, #12
 801728e:	f7ff f96f 	bl	8016570 <rcl_wait_set_add_subscription>
 8017292:	b158      	cbz	r0, 80172ac <rcl_action_wait_set_add_action_client+0x9c>
 8017294:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017296:	f640 0036 	movw	r0, #2102	@ 0x836
 801729a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801729c:	f7f8 fb8c 	bl	800f9b8 <rcutils_reset_error>
 80172a0:	f640 0036 	movw	r0, #2102	@ 0x836
 80172a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80172a6:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80172aa:	4770      	bx	lr
 80172ac:	6821      	ldr	r1, [r4, #0]
 80172ae:	4628      	mov	r0, r5
 80172b0:	f501 72ea 	add.w	r2, r1, #468	@ 0x1d4
 80172b4:	3110      	adds	r1, #16
 80172b6:	f7ff f95b 	bl	8016570 <rcl_wait_set_add_subscription>
 80172ba:	2800      	cmp	r0, #0
 80172bc:	d1ea      	bne.n	8017294 <rcl_action_wait_set_add_action_client+0x84>
 80172be:	b11f      	cbz	r7, 80172c8 <rcl_action_wait_set_add_action_client+0xb8>
 80172c0:	6823      	ldr	r3, [r4, #0]
 80172c2:	f8d3 31c4 	ldr.w	r3, [r3, #452]	@ 0x1c4
 80172c6:	603b      	str	r3, [r7, #0]
 80172c8:	2e00      	cmp	r6, #0
 80172ca:	d0e3      	beq.n	8017294 <rcl_action_wait_set_add_action_client+0x84>
 80172cc:	6823      	ldr	r3, [r4, #0]
 80172ce:	f8d3 31d0 	ldr.w	r3, [r3, #464]	@ 0x1d0
 80172d2:	6033      	str	r3, [r6, #0]
 80172d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80172d6:	bf00      	nop

080172d8 <rcl_action_client_wait_set_get_entities_ready>:
 80172d8:	2800      	cmp	r0, #0
 80172da:	f000 808d 	beq.w	80173f8 <rcl_action_client_wait_set_get_entities_ready+0x120>
 80172de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80172e2:	460c      	mov	r4, r1
 80172e4:	2900      	cmp	r1, #0
 80172e6:	d077      	beq.n	80173d8 <rcl_action_client_wait_set_get_entities_ready+0x100>
 80172e8:	4605      	mov	r5, r0
 80172ea:	6808      	ldr	r0, [r1, #0]
 80172ec:	2800      	cmp	r0, #0
 80172ee:	d073      	beq.n	80173d8 <rcl_action_client_wait_set_get_entities_ready+0x100>
 80172f0:	4616      	mov	r6, r2
 80172f2:	461f      	mov	r7, r3
 80172f4:	f7fd ff3c 	bl	8015170 <rcl_client_is_valid>
 80172f8:	2800      	cmp	r0, #0
 80172fa:	d071      	beq.n	80173e0 <rcl_action_client_wait_set_get_entities_ready+0x108>
 80172fc:	6820      	ldr	r0, [r4, #0]
 80172fe:	3004      	adds	r0, #4
 8017300:	f7fd ff36 	bl	8015170 <rcl_client_is_valid>
 8017304:	2800      	cmp	r0, #0
 8017306:	d06b      	beq.n	80173e0 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8017308:	6820      	ldr	r0, [r4, #0]
 801730a:	3008      	adds	r0, #8
 801730c:	f7fd ff30 	bl	8015170 <rcl_client_is_valid>
 8017310:	2800      	cmp	r0, #0
 8017312:	d065      	beq.n	80173e0 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8017314:	6820      	ldr	r0, [r4, #0]
 8017316:	300c      	adds	r0, #12
 8017318:	f7fe fcb6 	bl	8015c88 <rcl_subscription_is_valid>
 801731c:	2800      	cmp	r0, #0
 801731e:	d05f      	beq.n	80173e0 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8017320:	6820      	ldr	r0, [r4, #0]
 8017322:	3010      	adds	r0, #16
 8017324:	f7fe fcb0 	bl	8015c88 <rcl_subscription_is_valid>
 8017328:	2800      	cmp	r0, #0
 801732a:	d059      	beq.n	80173e0 <rcl_action_client_wait_set_get_entities_ready+0x108>
 801732c:	2e00      	cmp	r6, #0
 801732e:	d060      	beq.n	80173f2 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8017330:	2f00      	cmp	r7, #0
 8017332:	d05e      	beq.n	80173f2 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8017334:	9b06      	ldr	r3, [sp, #24]
 8017336:	2b00      	cmp	r3, #0
 8017338:	d05b      	beq.n	80173f2 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 801733a:	9b07      	ldr	r3, [sp, #28]
 801733c:	2b00      	cmp	r3, #0
 801733e:	d058      	beq.n	80173f2 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8017340:	9b08      	ldr	r3, [sp, #32]
 8017342:	2b00      	cmp	r3, #0
 8017344:	d055      	beq.n	80173f2 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8017346:	6823      	ldr	r3, [r4, #0]
 8017348:	686a      	ldr	r2, [r5, #4]
 801734a:	f8d3 11d0 	ldr.w	r1, [r3, #464]	@ 0x1d0
 801734e:	428a      	cmp	r2, r1
 8017350:	d94c      	bls.n	80173ec <rcl_action_client_wait_set_get_entities_ready+0x114>
 8017352:	f8d3 01d4 	ldr.w	r0, [r3, #468]	@ 0x1d4
 8017356:	4282      	cmp	r2, r0
 8017358:	d948      	bls.n	80173ec <rcl_action_client_wait_set_get_entities_ready+0x114>
 801735a:	f8d3 41c4 	ldr.w	r4, [r3, #452]	@ 0x1c4
 801735e:	69ea      	ldr	r2, [r5, #28]
 8017360:	42a2      	cmp	r2, r4
 8017362:	d943      	bls.n	80173ec <rcl_action_client_wait_set_get_entities_ready+0x114>
 8017364:	f8d3 c1c8 	ldr.w	ip, [r3, #456]	@ 0x1c8
 8017368:	4562      	cmp	r2, ip
 801736a:	d93f      	bls.n	80173ec <rcl_action_client_wait_set_get_entities_ready+0x114>
 801736c:	f8d3 e1cc 	ldr.w	lr, [r3, #460]	@ 0x1cc
 8017370:	4572      	cmp	r2, lr
 8017372:	d93b      	bls.n	80173ec <rcl_action_client_wait_set_get_entities_ready+0x114>
 8017374:	69aa      	ldr	r2, [r5, #24]
 8017376:	682d      	ldr	r5, [r5, #0]
 8017378:	f852 8024 	ldr.w	r8, [r2, r4, lsl #2]
 801737c:	f855 4020 	ldr.w	r4, [r5, r0, lsl #2]
 8017380:	f855 5021 	ldr.w	r5, [r5, r1, lsl #2]
 8017384:	f852 102c 	ldr.w	r1, [r2, ip, lsl #2]
 8017388:	f852 202e 	ldr.w	r2, [r2, lr, lsl #2]
 801738c:	f103 0c0c 	add.w	ip, r3, #12
 8017390:	eba5 050c 	sub.w	r5, r5, ip
 8017394:	fab5 f585 	clz	r5, r5
 8017398:	096d      	lsrs	r5, r5, #5
 801739a:	7035      	strb	r5, [r6, #0]
 801739c:	f103 0510 	add.w	r5, r3, #16
 80173a0:	1b64      	subs	r4, r4, r5
 80173a2:	fab4 f484 	clz	r4, r4
 80173a6:	0964      	lsrs	r4, r4, #5
 80173a8:	703c      	strb	r4, [r7, #0]
 80173aa:	eba3 0008 	sub.w	r0, r3, r8
 80173ae:	1d1c      	adds	r4, r3, #4
 80173b0:	3308      	adds	r3, #8
 80173b2:	1ad3      	subs	r3, r2, r3
 80173b4:	fab0 f080 	clz	r0, r0
 80173b8:	9a06      	ldr	r2, [sp, #24]
 80173ba:	0940      	lsrs	r0, r0, #5
 80173bc:	1b09      	subs	r1, r1, r4
 80173be:	7010      	strb	r0, [r2, #0]
 80173c0:	fab1 f181 	clz	r1, r1
 80173c4:	9a07      	ldr	r2, [sp, #28]
 80173c6:	0949      	lsrs	r1, r1, #5
 80173c8:	7011      	strb	r1, [r2, #0]
 80173ca:	fab3 f383 	clz	r3, r3
 80173ce:	9a08      	ldr	r2, [sp, #32]
 80173d0:	095b      	lsrs	r3, r3, #5
 80173d2:	2000      	movs	r0, #0
 80173d4:	7013      	strb	r3, [r2, #0]
 80173d6:	e001      	b.n	80173dc <rcl_action_client_wait_set_get_entities_ready+0x104>
 80173d8:	f640 0036 	movw	r0, #2102	@ 0x836
 80173dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80173e0:	f7f8 faea 	bl	800f9b8 <rcutils_reset_error>
 80173e4:	f640 0036 	movw	r0, #2102	@ 0x836
 80173e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80173ec:	2001      	movs	r0, #1
 80173ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80173f2:	200b      	movs	r0, #11
 80173f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80173f8:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80173fc:	4770      	bx	lr
 80173fe:	bf00      	nop

08017400 <rcl_action_take_goal_request>:
 8017400:	2800      	cmp	r0, #0
 8017402:	d039      	beq.n	8017478 <rcl_action_take_goal_request+0x78>
 8017404:	b570      	push	{r4, r5, r6, lr}
 8017406:	4604      	mov	r4, r0
 8017408:	6800      	ldr	r0, [r0, #0]
 801740a:	b380      	cbz	r0, 801746e <rcl_action_take_goal_request+0x6e>
 801740c:	460d      	mov	r5, r1
 801740e:	4616      	mov	r6, r2
 8017410:	f7fe faf6 	bl	8015a00 <rcl_service_is_valid>
 8017414:	b330      	cbz	r0, 8017464 <rcl_action_take_goal_request+0x64>
 8017416:	6820      	ldr	r0, [r4, #0]
 8017418:	3004      	adds	r0, #4
 801741a:	f7fe faf1 	bl	8015a00 <rcl_service_is_valid>
 801741e:	b308      	cbz	r0, 8017464 <rcl_action_take_goal_request+0x64>
 8017420:	6820      	ldr	r0, [r4, #0]
 8017422:	3008      	adds	r0, #8
 8017424:	f7fe faec 	bl	8015a00 <rcl_service_is_valid>
 8017428:	b1e0      	cbz	r0, 8017464 <rcl_action_take_goal_request+0x64>
 801742a:	6820      	ldr	r0, [r4, #0]
 801742c:	300c      	adds	r0, #12
 801742e:	f7f7 fae3 	bl	800e9f8 <rcl_publisher_is_valid>
 8017432:	b1b8      	cbz	r0, 8017464 <rcl_action_take_goal_request+0x64>
 8017434:	6820      	ldr	r0, [r4, #0]
 8017436:	3010      	adds	r0, #16
 8017438:	f7f7 fade 	bl	800e9f8 <rcl_publisher_is_valid>
 801743c:	b190      	cbz	r0, 8017464 <rcl_action_take_goal_request+0x64>
 801743e:	b1cd      	cbz	r5, 8017474 <rcl_action_take_goal_request+0x74>
 8017440:	b1c6      	cbz	r6, 8017474 <rcl_action_take_goal_request+0x74>
 8017442:	6820      	ldr	r0, [r4, #0]
 8017444:	4632      	mov	r2, r6
 8017446:	4629      	mov	r1, r5
 8017448:	f7fe fa82 	bl	8015950 <rcl_take_request>
 801744c:	b148      	cbz	r0, 8017462 <rcl_action_take_goal_request+0x62>
 801744e:	280a      	cmp	r0, #10
 8017450:	d007      	beq.n	8017462 <rcl_action_take_goal_request+0x62>
 8017452:	f240 2259 	movw	r2, #601	@ 0x259
 8017456:	f640 0399 	movw	r3, #2201	@ 0x899
 801745a:	4290      	cmp	r0, r2
 801745c:	bf0c      	ite	eq
 801745e:	4618      	moveq	r0, r3
 8017460:	2001      	movne	r0, #1
 8017462:	bd70      	pop	{r4, r5, r6, pc}
 8017464:	f7f8 faa8 	bl	800f9b8 <rcutils_reset_error>
 8017468:	f640 0098 	movw	r0, #2200	@ 0x898
 801746c:	bd70      	pop	{r4, r5, r6, pc}
 801746e:	f640 0098 	movw	r0, #2200	@ 0x898
 8017472:	bd70      	pop	{r4, r5, r6, pc}
 8017474:	200b      	movs	r0, #11
 8017476:	bd70      	pop	{r4, r5, r6, pc}
 8017478:	f640 0098 	movw	r0, #2200	@ 0x898
 801747c:	4770      	bx	lr
 801747e:	bf00      	nop

08017480 <rcl_action_send_goal_response>:
 8017480:	b390      	cbz	r0, 80174e8 <rcl_action_send_goal_response+0x68>
 8017482:	b570      	push	{r4, r5, r6, lr}
 8017484:	4604      	mov	r4, r0
 8017486:	6800      	ldr	r0, [r0, #0]
 8017488:	b348      	cbz	r0, 80174de <rcl_action_send_goal_response+0x5e>
 801748a:	460d      	mov	r5, r1
 801748c:	4616      	mov	r6, r2
 801748e:	f7fe fab7 	bl	8015a00 <rcl_service_is_valid>
 8017492:	b1f8      	cbz	r0, 80174d4 <rcl_action_send_goal_response+0x54>
 8017494:	6820      	ldr	r0, [r4, #0]
 8017496:	3004      	adds	r0, #4
 8017498:	f7fe fab2 	bl	8015a00 <rcl_service_is_valid>
 801749c:	b1d0      	cbz	r0, 80174d4 <rcl_action_send_goal_response+0x54>
 801749e:	6820      	ldr	r0, [r4, #0]
 80174a0:	3008      	adds	r0, #8
 80174a2:	f7fe faad 	bl	8015a00 <rcl_service_is_valid>
 80174a6:	b1a8      	cbz	r0, 80174d4 <rcl_action_send_goal_response+0x54>
 80174a8:	6820      	ldr	r0, [r4, #0]
 80174aa:	300c      	adds	r0, #12
 80174ac:	f7f7 faa4 	bl	800e9f8 <rcl_publisher_is_valid>
 80174b0:	b180      	cbz	r0, 80174d4 <rcl_action_send_goal_response+0x54>
 80174b2:	6820      	ldr	r0, [r4, #0]
 80174b4:	3010      	adds	r0, #16
 80174b6:	f7f7 fa9f 	bl	800e9f8 <rcl_publisher_is_valid>
 80174ba:	b158      	cbz	r0, 80174d4 <rcl_action_send_goal_response+0x54>
 80174bc:	b195      	cbz	r5, 80174e4 <rcl_action_send_goal_response+0x64>
 80174be:	b18e      	cbz	r6, 80174e4 <rcl_action_send_goal_response+0x64>
 80174c0:	6820      	ldr	r0, [r4, #0]
 80174c2:	4632      	mov	r2, r6
 80174c4:	4629      	mov	r1, r5
 80174c6:	f7fe fa83 	bl	80159d0 <rcl_send_response>
 80174ca:	b110      	cbz	r0, 80174d2 <rcl_action_send_goal_response+0x52>
 80174cc:	2802      	cmp	r0, #2
 80174ce:	bf18      	it	ne
 80174d0:	2001      	movne	r0, #1
 80174d2:	bd70      	pop	{r4, r5, r6, pc}
 80174d4:	f7f8 fa70 	bl	800f9b8 <rcutils_reset_error>
 80174d8:	f640 0098 	movw	r0, #2200	@ 0x898
 80174dc:	bd70      	pop	{r4, r5, r6, pc}
 80174de:	f640 0098 	movw	r0, #2200	@ 0x898
 80174e2:	bd70      	pop	{r4, r5, r6, pc}
 80174e4:	200b      	movs	r0, #11
 80174e6:	bd70      	pop	{r4, r5, r6, pc}
 80174e8:	f640 0098 	movw	r0, #2200	@ 0x898
 80174ec:	4770      	bx	lr
 80174ee:	bf00      	nop

080174f0 <rcl_action_take_result_request>:
 80174f0:	2800      	cmp	r0, #0
 80174f2:	d03a      	beq.n	801756a <rcl_action_take_result_request+0x7a>
 80174f4:	b570      	push	{r4, r5, r6, lr}
 80174f6:	4604      	mov	r4, r0
 80174f8:	6800      	ldr	r0, [r0, #0]
 80174fa:	b388      	cbz	r0, 8017560 <rcl_action_take_result_request+0x70>
 80174fc:	460d      	mov	r5, r1
 80174fe:	4616      	mov	r6, r2
 8017500:	f7fe fa7e 	bl	8015a00 <rcl_service_is_valid>
 8017504:	b338      	cbz	r0, 8017556 <rcl_action_take_result_request+0x66>
 8017506:	6820      	ldr	r0, [r4, #0]
 8017508:	3004      	adds	r0, #4
 801750a:	f7fe fa79 	bl	8015a00 <rcl_service_is_valid>
 801750e:	b310      	cbz	r0, 8017556 <rcl_action_take_result_request+0x66>
 8017510:	6820      	ldr	r0, [r4, #0]
 8017512:	3008      	adds	r0, #8
 8017514:	f7fe fa74 	bl	8015a00 <rcl_service_is_valid>
 8017518:	b1e8      	cbz	r0, 8017556 <rcl_action_take_result_request+0x66>
 801751a:	6820      	ldr	r0, [r4, #0]
 801751c:	300c      	adds	r0, #12
 801751e:	f7f7 fa6b 	bl	800e9f8 <rcl_publisher_is_valid>
 8017522:	b1c0      	cbz	r0, 8017556 <rcl_action_take_result_request+0x66>
 8017524:	6820      	ldr	r0, [r4, #0]
 8017526:	3010      	adds	r0, #16
 8017528:	f7f7 fa66 	bl	800e9f8 <rcl_publisher_is_valid>
 801752c:	b198      	cbz	r0, 8017556 <rcl_action_take_result_request+0x66>
 801752e:	b1d5      	cbz	r5, 8017566 <rcl_action_take_result_request+0x76>
 8017530:	b1ce      	cbz	r6, 8017566 <rcl_action_take_result_request+0x76>
 8017532:	6820      	ldr	r0, [r4, #0]
 8017534:	4632      	mov	r2, r6
 8017536:	4629      	mov	r1, r5
 8017538:	3008      	adds	r0, #8
 801753a:	f7fe fa09 	bl	8015950 <rcl_take_request>
 801753e:	b148      	cbz	r0, 8017554 <rcl_action_take_result_request+0x64>
 8017540:	280a      	cmp	r0, #10
 8017542:	d007      	beq.n	8017554 <rcl_action_take_result_request+0x64>
 8017544:	f240 2259 	movw	r2, #601	@ 0x259
 8017548:	f640 0399 	movw	r3, #2201	@ 0x899
 801754c:	4290      	cmp	r0, r2
 801754e:	bf0c      	ite	eq
 8017550:	4618      	moveq	r0, r3
 8017552:	2001      	movne	r0, #1
 8017554:	bd70      	pop	{r4, r5, r6, pc}
 8017556:	f7f8 fa2f 	bl	800f9b8 <rcutils_reset_error>
 801755a:	f640 0098 	movw	r0, #2200	@ 0x898
 801755e:	bd70      	pop	{r4, r5, r6, pc}
 8017560:	f640 0098 	movw	r0, #2200	@ 0x898
 8017564:	bd70      	pop	{r4, r5, r6, pc}
 8017566:	200b      	movs	r0, #11
 8017568:	bd70      	pop	{r4, r5, r6, pc}
 801756a:	f640 0098 	movw	r0, #2200	@ 0x898
 801756e:	4770      	bx	lr

08017570 <rcl_action_take_cancel_request>:
 8017570:	2800      	cmp	r0, #0
 8017572:	d03a      	beq.n	80175ea <rcl_action_take_cancel_request+0x7a>
 8017574:	b570      	push	{r4, r5, r6, lr}
 8017576:	4604      	mov	r4, r0
 8017578:	6800      	ldr	r0, [r0, #0]
 801757a:	b388      	cbz	r0, 80175e0 <rcl_action_take_cancel_request+0x70>
 801757c:	460d      	mov	r5, r1
 801757e:	4616      	mov	r6, r2
 8017580:	f7fe fa3e 	bl	8015a00 <rcl_service_is_valid>
 8017584:	b338      	cbz	r0, 80175d6 <rcl_action_take_cancel_request+0x66>
 8017586:	6820      	ldr	r0, [r4, #0]
 8017588:	3004      	adds	r0, #4
 801758a:	f7fe fa39 	bl	8015a00 <rcl_service_is_valid>
 801758e:	b310      	cbz	r0, 80175d6 <rcl_action_take_cancel_request+0x66>
 8017590:	6820      	ldr	r0, [r4, #0]
 8017592:	3008      	adds	r0, #8
 8017594:	f7fe fa34 	bl	8015a00 <rcl_service_is_valid>
 8017598:	b1e8      	cbz	r0, 80175d6 <rcl_action_take_cancel_request+0x66>
 801759a:	6820      	ldr	r0, [r4, #0]
 801759c:	300c      	adds	r0, #12
 801759e:	f7f7 fa2b 	bl	800e9f8 <rcl_publisher_is_valid>
 80175a2:	b1c0      	cbz	r0, 80175d6 <rcl_action_take_cancel_request+0x66>
 80175a4:	6820      	ldr	r0, [r4, #0]
 80175a6:	3010      	adds	r0, #16
 80175a8:	f7f7 fa26 	bl	800e9f8 <rcl_publisher_is_valid>
 80175ac:	b198      	cbz	r0, 80175d6 <rcl_action_take_cancel_request+0x66>
 80175ae:	b1d5      	cbz	r5, 80175e6 <rcl_action_take_cancel_request+0x76>
 80175b0:	b1ce      	cbz	r6, 80175e6 <rcl_action_take_cancel_request+0x76>
 80175b2:	6820      	ldr	r0, [r4, #0]
 80175b4:	4632      	mov	r2, r6
 80175b6:	4629      	mov	r1, r5
 80175b8:	3004      	adds	r0, #4
 80175ba:	f7fe f9c9 	bl	8015950 <rcl_take_request>
 80175be:	b148      	cbz	r0, 80175d4 <rcl_action_take_cancel_request+0x64>
 80175c0:	280a      	cmp	r0, #10
 80175c2:	d007      	beq.n	80175d4 <rcl_action_take_cancel_request+0x64>
 80175c4:	f240 2259 	movw	r2, #601	@ 0x259
 80175c8:	f640 0399 	movw	r3, #2201	@ 0x899
 80175cc:	4290      	cmp	r0, r2
 80175ce:	bf0c      	ite	eq
 80175d0:	4618      	moveq	r0, r3
 80175d2:	2001      	movne	r0, #1
 80175d4:	bd70      	pop	{r4, r5, r6, pc}
 80175d6:	f7f8 f9ef 	bl	800f9b8 <rcutils_reset_error>
 80175da:	f640 0098 	movw	r0, #2200	@ 0x898
 80175de:	bd70      	pop	{r4, r5, r6, pc}
 80175e0:	f640 0098 	movw	r0, #2200	@ 0x898
 80175e4:	bd70      	pop	{r4, r5, r6, pc}
 80175e6:	200b      	movs	r0, #11
 80175e8:	bd70      	pop	{r4, r5, r6, pc}
 80175ea:	f640 0098 	movw	r0, #2200	@ 0x898
 80175ee:	4770      	bx	lr

080175f0 <rcl_action_send_cancel_response>:
 80175f0:	b398      	cbz	r0, 801765a <rcl_action_send_cancel_response+0x6a>
 80175f2:	b570      	push	{r4, r5, r6, lr}
 80175f4:	4604      	mov	r4, r0
 80175f6:	6800      	ldr	r0, [r0, #0]
 80175f8:	b350      	cbz	r0, 8017650 <rcl_action_send_cancel_response+0x60>
 80175fa:	460d      	mov	r5, r1
 80175fc:	4616      	mov	r6, r2
 80175fe:	f7fe f9ff 	bl	8015a00 <rcl_service_is_valid>
 8017602:	b300      	cbz	r0, 8017646 <rcl_action_send_cancel_response+0x56>
 8017604:	6820      	ldr	r0, [r4, #0]
 8017606:	3004      	adds	r0, #4
 8017608:	f7fe f9fa 	bl	8015a00 <rcl_service_is_valid>
 801760c:	b1d8      	cbz	r0, 8017646 <rcl_action_send_cancel_response+0x56>
 801760e:	6820      	ldr	r0, [r4, #0]
 8017610:	3008      	adds	r0, #8
 8017612:	f7fe f9f5 	bl	8015a00 <rcl_service_is_valid>
 8017616:	b1b0      	cbz	r0, 8017646 <rcl_action_send_cancel_response+0x56>
 8017618:	6820      	ldr	r0, [r4, #0]
 801761a:	300c      	adds	r0, #12
 801761c:	f7f7 f9ec 	bl	800e9f8 <rcl_publisher_is_valid>
 8017620:	b188      	cbz	r0, 8017646 <rcl_action_send_cancel_response+0x56>
 8017622:	6820      	ldr	r0, [r4, #0]
 8017624:	3010      	adds	r0, #16
 8017626:	f7f7 f9e7 	bl	800e9f8 <rcl_publisher_is_valid>
 801762a:	b160      	cbz	r0, 8017646 <rcl_action_send_cancel_response+0x56>
 801762c:	b19d      	cbz	r5, 8017656 <rcl_action_send_cancel_response+0x66>
 801762e:	b196      	cbz	r6, 8017656 <rcl_action_send_cancel_response+0x66>
 8017630:	6820      	ldr	r0, [r4, #0]
 8017632:	4632      	mov	r2, r6
 8017634:	4629      	mov	r1, r5
 8017636:	3004      	adds	r0, #4
 8017638:	f7fe f9ca 	bl	80159d0 <rcl_send_response>
 801763c:	b110      	cbz	r0, 8017644 <rcl_action_send_cancel_response+0x54>
 801763e:	2802      	cmp	r0, #2
 8017640:	bf18      	it	ne
 8017642:	2001      	movne	r0, #1
 8017644:	bd70      	pop	{r4, r5, r6, pc}
 8017646:	f7f8 f9b7 	bl	800f9b8 <rcutils_reset_error>
 801764a:	f640 0098 	movw	r0, #2200	@ 0x898
 801764e:	bd70      	pop	{r4, r5, r6, pc}
 8017650:	f640 0098 	movw	r0, #2200	@ 0x898
 8017654:	bd70      	pop	{r4, r5, r6, pc}
 8017656:	200b      	movs	r0, #11
 8017658:	bd70      	pop	{r4, r5, r6, pc}
 801765a:	f640 0098 	movw	r0, #2200	@ 0x898
 801765e:	4770      	bx	lr

08017660 <rcl_action_wait_set_add_action_server>:
 8017660:	2800      	cmp	r0, #0
 8017662:	d04d      	beq.n	8017700 <rcl_action_wait_set_add_action_server+0xa0>
 8017664:	b570      	push	{r4, r5, r6, lr}
 8017666:	460c      	mov	r4, r1
 8017668:	b159      	cbz	r1, 8017682 <rcl_action_wait_set_add_action_server+0x22>
 801766a:	4605      	mov	r5, r0
 801766c:	6808      	ldr	r0, [r1, #0]
 801766e:	b140      	cbz	r0, 8017682 <rcl_action_wait_set_add_action_server+0x22>
 8017670:	4616      	mov	r6, r2
 8017672:	f7fe f9c5 	bl	8015a00 <rcl_service_is_valid>
 8017676:	b120      	cbz	r0, 8017682 <rcl_action_wait_set_add_action_server+0x22>
 8017678:	6820      	ldr	r0, [r4, #0]
 801767a:	3004      	adds	r0, #4
 801767c:	f7fe f9c0 	bl	8015a00 <rcl_service_is_valid>
 8017680:	b910      	cbnz	r0, 8017688 <rcl_action_wait_set_add_action_server+0x28>
 8017682:	f640 0098 	movw	r0, #2200	@ 0x898
 8017686:	bd70      	pop	{r4, r5, r6, pc}
 8017688:	6820      	ldr	r0, [r4, #0]
 801768a:	3008      	adds	r0, #8
 801768c:	f7fe f9b8 	bl	8015a00 <rcl_service_is_valid>
 8017690:	2800      	cmp	r0, #0
 8017692:	d0f6      	beq.n	8017682 <rcl_action_wait_set_add_action_server+0x22>
 8017694:	6820      	ldr	r0, [r4, #0]
 8017696:	300c      	adds	r0, #12
 8017698:	f7f7 f9c6 	bl	800ea28 <rcl_publisher_is_valid_except_context>
 801769c:	2800      	cmp	r0, #0
 801769e:	d0f0      	beq.n	8017682 <rcl_action_wait_set_add_action_server+0x22>
 80176a0:	6820      	ldr	r0, [r4, #0]
 80176a2:	3010      	adds	r0, #16
 80176a4:	f7f7 f9c0 	bl	800ea28 <rcl_publisher_is_valid_except_context>
 80176a8:	2800      	cmp	r0, #0
 80176aa:	d0ea      	beq.n	8017682 <rcl_action_wait_set_add_action_server+0x22>
 80176ac:	6821      	ldr	r1, [r4, #0]
 80176ae:	4628      	mov	r0, r5
 80176b0:	f501 72ee 	add.w	r2, r1, #476	@ 0x1dc
 80176b4:	f7ff fad0 	bl	8016c58 <rcl_wait_set_add_service>
 80176b8:	2800      	cmp	r0, #0
 80176ba:	d1e4      	bne.n	8017686 <rcl_action_wait_set_add_action_server+0x26>
 80176bc:	6821      	ldr	r1, [r4, #0]
 80176be:	4628      	mov	r0, r5
 80176c0:	f501 72f0 	add.w	r2, r1, #480	@ 0x1e0
 80176c4:	3104      	adds	r1, #4
 80176c6:	f7ff fac7 	bl	8016c58 <rcl_wait_set_add_service>
 80176ca:	2800      	cmp	r0, #0
 80176cc:	d1db      	bne.n	8017686 <rcl_action_wait_set_add_action_server+0x26>
 80176ce:	6821      	ldr	r1, [r4, #0]
 80176d0:	4628      	mov	r0, r5
 80176d2:	f501 72f2 	add.w	r2, r1, #484	@ 0x1e4
 80176d6:	3108      	adds	r1, #8
 80176d8:	f7ff fabe 	bl	8016c58 <rcl_wait_set_add_service>
 80176dc:	2800      	cmp	r0, #0
 80176de:	d1d2      	bne.n	8017686 <rcl_action_wait_set_add_action_server+0x26>
 80176e0:	6821      	ldr	r1, [r4, #0]
 80176e2:	4628      	mov	r0, r5
 80176e4:	f501 72f4 	add.w	r2, r1, #488	@ 0x1e8
 80176e8:	3114      	adds	r1, #20
 80176ea:	f7ff fa59 	bl	8016ba0 <rcl_wait_set_add_timer>
 80176ee:	2800      	cmp	r0, #0
 80176f0:	d1c9      	bne.n	8017686 <rcl_action_wait_set_add_action_server+0x26>
 80176f2:	2e00      	cmp	r6, #0
 80176f4:	d0c7      	beq.n	8017686 <rcl_action_wait_set_add_action_server+0x26>
 80176f6:	6823      	ldr	r3, [r4, #0]
 80176f8:	f8d3 31dc 	ldr.w	r3, [r3, #476]	@ 0x1dc
 80176fc:	6033      	str	r3, [r6, #0]
 80176fe:	bd70      	pop	{r4, r5, r6, pc}
 8017700:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8017704:	4770      	bx	lr
 8017706:	bf00      	nop

08017708 <rcl_action_server_wait_set_get_entities_ready>:
 8017708:	2800      	cmp	r0, #0
 801770a:	d05a      	beq.n	80177c2 <rcl_action_server_wait_set_get_entities_ready+0xba>
 801770c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801770e:	460c      	mov	r4, r1
 8017710:	b161      	cbz	r1, 801772c <rcl_action_server_wait_set_get_entities_ready+0x24>
 8017712:	4605      	mov	r5, r0
 8017714:	6808      	ldr	r0, [r1, #0]
 8017716:	b148      	cbz	r0, 801772c <rcl_action_server_wait_set_get_entities_ready+0x24>
 8017718:	4616      	mov	r6, r2
 801771a:	461f      	mov	r7, r3
 801771c:	f7fe f970 	bl	8015a00 <rcl_service_is_valid>
 8017720:	b120      	cbz	r0, 801772c <rcl_action_server_wait_set_get_entities_ready+0x24>
 8017722:	6820      	ldr	r0, [r4, #0]
 8017724:	3004      	adds	r0, #4
 8017726:	f7fe f96b 	bl	8015a00 <rcl_service_is_valid>
 801772a:	b910      	cbnz	r0, 8017732 <rcl_action_server_wait_set_get_entities_ready+0x2a>
 801772c:	f640 0098 	movw	r0, #2200	@ 0x898
 8017730:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017732:	6820      	ldr	r0, [r4, #0]
 8017734:	3008      	adds	r0, #8
 8017736:	f7fe f963 	bl	8015a00 <rcl_service_is_valid>
 801773a:	2800      	cmp	r0, #0
 801773c:	d0f6      	beq.n	801772c <rcl_action_server_wait_set_get_entities_ready+0x24>
 801773e:	6820      	ldr	r0, [r4, #0]
 8017740:	300c      	adds	r0, #12
 8017742:	f7f7 f971 	bl	800ea28 <rcl_publisher_is_valid_except_context>
 8017746:	2800      	cmp	r0, #0
 8017748:	d0f0      	beq.n	801772c <rcl_action_server_wait_set_get_entities_ready+0x24>
 801774a:	6820      	ldr	r0, [r4, #0]
 801774c:	3010      	adds	r0, #16
 801774e:	f7f7 f96b 	bl	800ea28 <rcl_publisher_is_valid_except_context>
 8017752:	2800      	cmp	r0, #0
 8017754:	d0ea      	beq.n	801772c <rcl_action_server_wait_set_get_entities_ready+0x24>
 8017756:	b3be      	cbz	r6, 80177c8 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8017758:	b3b7      	cbz	r7, 80177c8 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 801775a:	9b06      	ldr	r3, [sp, #24]
 801775c:	b3a3      	cbz	r3, 80177c8 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 801775e:	9b07      	ldr	r3, [sp, #28]
 8017760:	b393      	cbz	r3, 80177c8 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8017762:	6821      	ldr	r1, [r4, #0]
 8017764:	692a      	ldr	r2, [r5, #16]
 8017766:	6a2c      	ldr	r4, [r5, #32]
 8017768:	f8d1 51e8 	ldr.w	r5, [r1, #488]	@ 0x1e8
 801776c:	f8d1 31e0 	ldr.w	r3, [r1, #480]	@ 0x1e0
 8017770:	f852 2025 	ldr.w	r2, [r2, r5, lsl #2]
 8017774:	f8d1 01e4 	ldr.w	r0, [r1, #484]	@ 0x1e4
 8017778:	f8d1 51dc 	ldr.w	r5, [r1, #476]	@ 0x1dc
 801777c:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 8017780:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8017784:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
 8017788:	1a64      	subs	r4, r4, r1
 801778a:	fab4 f484 	clz	r4, r4
 801778e:	0964      	lsrs	r4, r4, #5
 8017790:	7034      	strb	r4, [r6, #0]
 8017792:	1d0c      	adds	r4, r1, #4
 8017794:	1b1b      	subs	r3, r3, r4
 8017796:	fab3 f383 	clz	r3, r3
 801779a:	095b      	lsrs	r3, r3, #5
 801779c:	f101 0408 	add.w	r4, r1, #8
 80177a0:	703b      	strb	r3, [r7, #0]
 80177a2:	f101 0314 	add.w	r3, r1, #20
 80177a6:	1b01      	subs	r1, r0, r4
 80177a8:	1ad3      	subs	r3, r2, r3
 80177aa:	fab1 f181 	clz	r1, r1
 80177ae:	9a06      	ldr	r2, [sp, #24]
 80177b0:	0949      	lsrs	r1, r1, #5
 80177b2:	7011      	strb	r1, [r2, #0]
 80177b4:	fab3 f383 	clz	r3, r3
 80177b8:	9a07      	ldr	r2, [sp, #28]
 80177ba:	095b      	lsrs	r3, r3, #5
 80177bc:	2000      	movs	r0, #0
 80177be:	7013      	strb	r3, [r2, #0]
 80177c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80177c2:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80177c6:	4770      	bx	lr
 80177c8:	200b      	movs	r0, #11
 80177ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080177cc <_execute_event_handler>:
 80177cc:	2002      	movs	r0, #2
 80177ce:	4770      	bx	lr

080177d0 <_cancel_goal_event_handler>:
 80177d0:	2003      	movs	r0, #3
 80177d2:	4770      	bx	lr

080177d4 <_succeed_event_handler>:
 80177d4:	2004      	movs	r0, #4
 80177d6:	4770      	bx	lr

080177d8 <_abort_event_handler>:
 80177d8:	2006      	movs	r0, #6
 80177da:	4770      	bx	lr

080177dc <_canceled_event_handler>:
 80177dc:	2005      	movs	r0, #5
 80177de:	4770      	bx	lr

080177e0 <rcl_action_transition_goal_state>:
 80177e0:	b2c2      	uxtb	r2, r0
 80177e2:	2a06      	cmp	r2, #6
 80177e4:	d80c      	bhi.n	8017800 <rcl_action_transition_goal_state+0x20>
 80177e6:	2904      	cmp	r1, #4
 80177e8:	d80a      	bhi.n	8017800 <rcl_action_transition_goal_state+0x20>
 80177ea:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 80177ee:	b410      	push	{r4}
 80177f0:	1853      	adds	r3, r2, r1
 80177f2:	4c06      	ldr	r4, [pc, #24]	@ (801780c <rcl_action_transition_goal_state+0x2c>)
 80177f4:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80177f8:	b123      	cbz	r3, 8017804 <rcl_action_transition_goal_state+0x24>
 80177fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80177fe:	4718      	bx	r3
 8017800:	2000      	movs	r0, #0
 8017802:	4770      	bx	lr
 8017804:	2000      	movs	r0, #0
 8017806:	f85d 4b04 	ldr.w	r4, [sp], #4
 801780a:	4770      	bx	lr
 801780c:	0801e9d8 	.word	0x0801e9d8

08017810 <rcl_action_get_zero_initialized_cancel_response>:
 8017810:	b510      	push	{r4, lr}
 8017812:	4c07      	ldr	r4, [pc, #28]	@ (8017830 <rcl_action_get_zero_initialized_cancel_response+0x20>)
 8017814:	4686      	mov	lr, r0
 8017816:	4684      	mov	ip, r0
 8017818:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801781a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801781e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017820:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017824:	6823      	ldr	r3, [r4, #0]
 8017826:	f8cc 3000 	str.w	r3, [ip]
 801782a:	4670      	mov	r0, lr
 801782c:	bd10      	pop	{r4, pc}
 801782e:	bf00      	nop
 8017830:	0801ea64 	.word	0x0801ea64

08017834 <rclc_action_send_result_request>:
 8017834:	b1d0      	cbz	r0, 801786c <rclc_action_send_result_request+0x38>
 8017836:	b500      	push	{lr}
 8017838:	4684      	mov	ip, r0
 801783a:	b087      	sub	sp, #28
 801783c:	f8d0 0009 	ldr.w	r0, [r0, #9]
 8017840:	f8dc 100d 	ldr.w	r1, [ip, #13]
 8017844:	f8dc 2011 	ldr.w	r2, [ip, #17]
 8017848:	f8dc 3015 	ldr.w	r3, [ip, #21]
 801784c:	f10d 0e08 	add.w	lr, sp, #8
 8017850:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8017854:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8017858:	f10c 0240 	add.w	r2, ip, #64	@ 0x40
 801785c:	a902      	add	r1, sp, #8
 801785e:	3010      	adds	r0, #16
 8017860:	f7ff fbda 	bl	8017018 <rcl_action_send_result_request>
 8017864:	b920      	cbnz	r0, 8017870 <rclc_action_send_result_request+0x3c>
 8017866:	b007      	add	sp, #28
 8017868:	f85d fb04 	ldr.w	pc, [sp], #4
 801786c:	200b      	movs	r0, #11
 801786e:	4770      	bx	lr
 8017870:	9001      	str	r0, [sp, #4]
 8017872:	f7f8 f8a1 	bl	800f9b8 <rcutils_reset_error>
 8017876:	9801      	ldr	r0, [sp, #4]
 8017878:	b007      	add	sp, #28
 801787a:	f85d fb04 	ldr.w	pc, [sp], #4
 801787e:	bf00      	nop

08017880 <rclc_action_take_goal_handle>:
 8017880:	b160      	cbz	r0, 801789c <rclc_action_take_goal_handle+0x1c>
 8017882:	6883      	ldr	r3, [r0, #8]
 8017884:	b143      	cbz	r3, 8017898 <rclc_action_take_goal_handle+0x18>
 8017886:	6819      	ldr	r1, [r3, #0]
 8017888:	6081      	str	r1, [r0, #8]
 801788a:	2200      	movs	r2, #0
 801788c:	721a      	strb	r2, [r3, #8]
 801788e:	68c1      	ldr	r1, [r0, #12]
 8017890:	6019      	str	r1, [r3, #0]
 8017892:	621a      	str	r2, [r3, #32]
 8017894:	849a      	strh	r2, [r3, #36]	@ 0x24
 8017896:	60c3      	str	r3, [r0, #12]
 8017898:	4618      	mov	r0, r3
 801789a:	4770      	bx	lr
 801789c:	4603      	mov	r3, r0
 801789e:	e7fb      	b.n	8017898 <rclc_action_take_goal_handle+0x18>

080178a0 <rclc_action_remove_used_goal_handle>:
 80178a0:	b180      	cbz	r0, 80178c4 <rclc_action_remove_used_goal_handle+0x24>
 80178a2:	b179      	cbz	r1, 80178c4 <rclc_action_remove_used_goal_handle+0x24>
 80178a4:	68c3      	ldr	r3, [r0, #12]
 80178a6:	4299      	cmp	r1, r3
 80178a8:	d00d      	beq.n	80178c6 <rclc_action_remove_used_goal_handle+0x26>
 80178aa:	b12b      	cbz	r3, 80178b8 <rclc_action_remove_used_goal_handle+0x18>
 80178ac:	681a      	ldr	r2, [r3, #0]
 80178ae:	4291      	cmp	r1, r2
 80178b0:	d003      	beq.n	80178ba <rclc_action_remove_used_goal_handle+0x1a>
 80178b2:	4613      	mov	r3, r2
 80178b4:	2b00      	cmp	r3, #0
 80178b6:	d1f9      	bne.n	80178ac <rclc_action_remove_used_goal_handle+0xc>
 80178b8:	4770      	bx	lr
 80178ba:	680a      	ldr	r2, [r1, #0]
 80178bc:	601a      	str	r2, [r3, #0]
 80178be:	6883      	ldr	r3, [r0, #8]
 80178c0:	600b      	str	r3, [r1, #0]
 80178c2:	6081      	str	r1, [r0, #8]
 80178c4:	4770      	bx	lr
 80178c6:	680b      	ldr	r3, [r1, #0]
 80178c8:	60c3      	str	r3, [r0, #12]
 80178ca:	e7f8      	b.n	80178be <rclc_action_remove_used_goal_handle+0x1e>

080178cc <rclc_action_find_goal_handle_by_uuid>:
 80178cc:	b538      	push	{r3, r4, r5, lr}
 80178ce:	b180      	cbz	r0, 80178f2 <rclc_action_find_goal_handle_by_uuid+0x26>
 80178d0:	460d      	mov	r5, r1
 80178d2:	b181      	cbz	r1, 80178f6 <rclc_action_find_goal_handle_by_uuid+0x2a>
 80178d4:	68c4      	ldr	r4, [r0, #12]
 80178d6:	b914      	cbnz	r4, 80178de <rclc_action_find_goal_handle_by_uuid+0x12>
 80178d8:	e009      	b.n	80178ee <rclc_action_find_goal_handle_by_uuid+0x22>
 80178da:	6824      	ldr	r4, [r4, #0]
 80178dc:	b13c      	cbz	r4, 80178ee <rclc_action_find_goal_handle_by_uuid+0x22>
 80178de:	f104 0009 	add.w	r0, r4, #9
 80178e2:	2210      	movs	r2, #16
 80178e4:	4629      	mov	r1, r5
 80178e6:	f003 fd0f 	bl	801b308 <memcmp>
 80178ea:	2800      	cmp	r0, #0
 80178ec:	d1f5      	bne.n	80178da <rclc_action_find_goal_handle_by_uuid+0xe>
 80178ee:	4620      	mov	r0, r4
 80178f0:	bd38      	pop	{r3, r4, r5, pc}
 80178f2:	4604      	mov	r4, r0
 80178f4:	e7fb      	b.n	80178ee <rclc_action_find_goal_handle_by_uuid+0x22>
 80178f6:	460c      	mov	r4, r1
 80178f8:	e7f9      	b.n	80178ee <rclc_action_find_goal_handle_by_uuid+0x22>
 80178fa:	bf00      	nop

080178fc <rclc_action_find_first_handle_by_status>:
 80178fc:	b140      	cbz	r0, 8017910 <rclc_action_find_first_handle_by_status+0x14>
 80178fe:	68c0      	ldr	r0, [r0, #12]
 8017900:	b910      	cbnz	r0, 8017908 <rclc_action_find_first_handle_by_status+0xc>
 8017902:	e005      	b.n	8017910 <rclc_action_find_first_handle_by_status+0x14>
 8017904:	6800      	ldr	r0, [r0, #0]
 8017906:	b118      	cbz	r0, 8017910 <rclc_action_find_first_handle_by_status+0x14>
 8017908:	f990 3008 	ldrsb.w	r3, [r0, #8]
 801790c:	428b      	cmp	r3, r1
 801790e:	d1f9      	bne.n	8017904 <rclc_action_find_first_handle_by_status+0x8>
 8017910:	4770      	bx	lr
 8017912:	bf00      	nop

08017914 <rclc_action_find_first_terminated_handle>:
 8017914:	b140      	cbz	r0, 8017928 <rclc_action_find_first_terminated_handle+0x14>
 8017916:	68c0      	ldr	r0, [r0, #12]
 8017918:	b910      	cbnz	r0, 8017920 <rclc_action_find_first_terminated_handle+0xc>
 801791a:	e005      	b.n	8017928 <rclc_action_find_first_terminated_handle+0x14>
 801791c:	6800      	ldr	r0, [r0, #0]
 801791e:	b118      	cbz	r0, 8017928 <rclc_action_find_first_terminated_handle+0x14>
 8017920:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8017924:	2b03      	cmp	r3, #3
 8017926:	ddf9      	ble.n	801791c <rclc_action_find_first_terminated_handle+0x8>
 8017928:	4770      	bx	lr
 801792a:	bf00      	nop

0801792c <rclc_action_find_handle_by_goal_request_sequence_number>:
 801792c:	b170      	cbz	r0, 801794c <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 801792e:	68c0      	ldr	r0, [r0, #12]
 8017930:	b160      	cbz	r0, 801794c <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 8017932:	b410      	push	{r4}
 8017934:	e001      	b.n	801793a <rclc_action_find_handle_by_goal_request_sequence_number+0xe>
 8017936:	6800      	ldr	r0, [r0, #0]
 8017938:	b128      	cbz	r0, 8017946 <rclc_action_find_handle_by_goal_request_sequence_number+0x1a>
 801793a:	e9d0 410a 	ldrd	r4, r1, [r0, #40]	@ 0x28
 801793e:	4299      	cmp	r1, r3
 8017940:	bf08      	it	eq
 8017942:	4294      	cmpeq	r4, r2
 8017944:	d1f7      	bne.n	8017936 <rclc_action_find_handle_by_goal_request_sequence_number+0xa>
 8017946:	f85d 4b04 	ldr.w	r4, [sp], #4
 801794a:	4770      	bx	lr
 801794c:	4770      	bx	lr
 801794e:	bf00      	nop

08017950 <rclc_action_find_handle_by_result_request_sequence_number>:
 8017950:	b170      	cbz	r0, 8017970 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 8017952:	68c0      	ldr	r0, [r0, #12]
 8017954:	b160      	cbz	r0, 8017970 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 8017956:	b410      	push	{r4}
 8017958:	e001      	b.n	801795e <rclc_action_find_handle_by_result_request_sequence_number+0xe>
 801795a:	6800      	ldr	r0, [r0, #0]
 801795c:	b128      	cbz	r0, 801796a <rclc_action_find_handle_by_result_request_sequence_number+0x1a>
 801795e:	e9d0 4110 	ldrd	r4, r1, [r0, #64]	@ 0x40
 8017962:	4299      	cmp	r1, r3
 8017964:	bf08      	it	eq
 8017966:	4294      	cmpeq	r4, r2
 8017968:	d1f7      	bne.n	801795a <rclc_action_find_handle_by_result_request_sequence_number+0xa>
 801796a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801796e:	4770      	bx	lr
 8017970:	4770      	bx	lr
 8017972:	bf00      	nop

08017974 <rclc_action_find_handle_by_cancel_request_sequence_number>:
 8017974:	b170      	cbz	r0, 8017994 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 8017976:	68c0      	ldr	r0, [r0, #12]
 8017978:	b160      	cbz	r0, 8017994 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 801797a:	b410      	push	{r4}
 801797c:	e001      	b.n	8017982 <rclc_action_find_handle_by_cancel_request_sequence_number+0xe>
 801797e:	6800      	ldr	r0, [r0, #0]
 8017980:	b128      	cbz	r0, 801798e <rclc_action_find_handle_by_cancel_request_sequence_number+0x1a>
 8017982:	e9d0 4116 	ldrd	r4, r1, [r0, #88]	@ 0x58
 8017986:	4299      	cmp	r1, r3
 8017988:	bf08      	it	eq
 801798a:	4294      	cmpeq	r4, r2
 801798c:	d1f7      	bne.n	801797e <rclc_action_find_handle_by_cancel_request_sequence_number+0xa>
 801798e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017992:	4770      	bx	lr
 8017994:	4770      	bx	lr
 8017996:	bf00      	nop

08017998 <rclc_action_find_first_handle_with_goal_response>:
 8017998:	b140      	cbz	r0, 80179ac <rclc_action_find_first_handle_with_goal_response+0x14>
 801799a:	68c0      	ldr	r0, [r0, #12]
 801799c:	b910      	cbnz	r0, 80179a4 <rclc_action_find_first_handle_with_goal_response+0xc>
 801799e:	e005      	b.n	80179ac <rclc_action_find_first_handle_with_goal_response+0x14>
 80179a0:	6800      	ldr	r0, [r0, #0]
 80179a2:	b118      	cbz	r0, 80179ac <rclc_action_find_first_handle_with_goal_response+0x14>
 80179a4:	f890 3020 	ldrb.w	r3, [r0, #32]
 80179a8:	2b00      	cmp	r3, #0
 80179aa:	d0f9      	beq.n	80179a0 <rclc_action_find_first_handle_with_goal_response+0x8>
 80179ac:	4770      	bx	lr
 80179ae:	bf00      	nop

080179b0 <rclc_action_find_first_handle_with_result_response>:
 80179b0:	b140      	cbz	r0, 80179c4 <rclc_action_find_first_handle_with_result_response+0x14>
 80179b2:	68c0      	ldr	r0, [r0, #12]
 80179b4:	b910      	cbnz	r0, 80179bc <rclc_action_find_first_handle_with_result_response+0xc>
 80179b6:	e005      	b.n	80179c4 <rclc_action_find_first_handle_with_result_response+0x14>
 80179b8:	6800      	ldr	r0, [r0, #0]
 80179ba:	b118      	cbz	r0, 80179c4 <rclc_action_find_first_handle_with_result_response+0x14>
 80179bc:	f890 3023 	ldrb.w	r3, [r0, #35]	@ 0x23
 80179c0:	2b00      	cmp	r3, #0
 80179c2:	d0f9      	beq.n	80179b8 <rclc_action_find_first_handle_with_result_response+0x8>
 80179c4:	4770      	bx	lr
 80179c6:	bf00      	nop

080179c8 <rclc_action_server_response_goal_request>:
 80179c8:	b198      	cbz	r0, 80179f2 <rclc_action_server_response_goal_request+0x2a>
 80179ca:	b510      	push	{r4, lr}
 80179cc:	6844      	ldr	r4, [r0, #4]
 80179ce:	b086      	sub	sp, #24
 80179d0:	2200      	movs	r2, #0
 80179d2:	e9cd 2203 	strd	r2, r2, [sp, #12]
 80179d6:	460b      	mov	r3, r1
 80179d8:	9205      	str	r2, [sp, #20]
 80179da:	f100 0128 	add.w	r1, r0, #40	@ 0x28
 80179de:	aa03      	add	r2, sp, #12
 80179e0:	f104 0010 	add.w	r0, r4, #16
 80179e4:	f88d 300c 	strb.w	r3, [sp, #12]
 80179e8:	f7ff fd4a 	bl	8017480 <rcl_action_send_goal_response>
 80179ec:	b918      	cbnz	r0, 80179f6 <rclc_action_server_response_goal_request+0x2e>
 80179ee:	b006      	add	sp, #24
 80179f0:	bd10      	pop	{r4, pc}
 80179f2:	200b      	movs	r0, #11
 80179f4:	4770      	bx	lr
 80179f6:	9001      	str	r0, [sp, #4]
 80179f8:	f7f7 ffde 	bl	800f9b8 <rcutils_reset_error>
 80179fc:	9801      	ldr	r0, [sp, #4]
 80179fe:	b006      	add	sp, #24
 8017a00:	bd10      	pop	{r4, pc}
 8017a02:	bf00      	nop
 8017a04:	0000      	movs	r0, r0
	...

08017a08 <rclc_action_server_goal_cancel_accept>:
 8017a08:	b310      	cbz	r0, 8017a50 <rclc_action_server_goal_cancel_accept+0x48>
 8017a0a:	b510      	push	{r4, lr}
 8017a0c:	b090      	sub	sp, #64	@ 0x40
 8017a0e:	4604      	mov	r4, r0
 8017a10:	a806      	add	r0, sp, #24
 8017a12:	f7ff fefd 	bl	8017810 <rcl_action_get_zero_initialized_cancel_response>
 8017a16:	2300      	movs	r3, #0
 8017a18:	f8d4 0009 	ldr.w	r0, [r4, #9]
 8017a1c:	f8d4 100d 	ldr.w	r1, [r4, #13]
 8017a20:	f8d4 2011 	ldr.w	r2, [r4, #17]
 8017a24:	f88d 3018 	strb.w	r3, [sp, #24]
 8017a28:	f8d4 3015 	ldr.w	r3, [r4, #21]
 8017a2c:	f8cd d01c 	str.w	sp, [sp, #28]
 8017a30:	46ec      	mov	ip, sp
 8017a32:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017a36:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 8017a58 <rclc_action_server_goal_cancel_accept+0x50>
 8017a3a:	6860      	ldr	r0, [r4, #4]
 8017a3c:	aa06      	add	r2, sp, #24
 8017a3e:	f104 0158 	add.w	r1, r4, #88	@ 0x58
 8017a42:	3010      	adds	r0, #16
 8017a44:	ed8d 7b08 	vstr	d7, [sp, #32]
 8017a48:	f7ff fdd2 	bl	80175f0 <rcl_action_send_cancel_response>
 8017a4c:	b010      	add	sp, #64	@ 0x40
 8017a4e:	bd10      	pop	{r4, pc}
 8017a50:	200b      	movs	r0, #11
 8017a52:	4770      	bx	lr
 8017a54:	f3af 8000 	nop.w
 8017a58:	00000001 	.word	0x00000001
 8017a5c:	00000001 	.word	0x00000001

08017a60 <rclc_action_server_goal_cancel_reject>:
 8017a60:	b082      	sub	sp, #8
 8017a62:	b530      	push	{r4, r5, lr}
 8017a64:	b08b      	sub	sp, #44	@ 0x2c
 8017a66:	ac0e      	add	r4, sp, #56	@ 0x38
 8017a68:	e884 000c 	stmia.w	r4, {r2, r3}
 8017a6c:	b188      	cbz	r0, 8017a92 <rclc_action_server_goal_cancel_reject+0x32>
 8017a6e:	4604      	mov	r4, r0
 8017a70:	a801      	add	r0, sp, #4
 8017a72:	460d      	mov	r5, r1
 8017a74:	f7ff fecc 	bl	8017810 <rcl_action_get_zero_initialized_cancel_response>
 8017a78:	aa01      	add	r2, sp, #4
 8017a7a:	a90e      	add	r1, sp, #56	@ 0x38
 8017a7c:	f104 0010 	add.w	r0, r4, #16
 8017a80:	f88d 5004 	strb.w	r5, [sp, #4]
 8017a84:	f7ff fdb4 	bl	80175f0 <rcl_action_send_cancel_response>
 8017a88:	b00b      	add	sp, #44	@ 0x2c
 8017a8a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017a8e:	b002      	add	sp, #8
 8017a90:	4770      	bx	lr
 8017a92:	200b      	movs	r0, #11
 8017a94:	b00b      	add	sp, #44	@ 0x2c
 8017a96:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017a9a:	b002      	add	sp, #8
 8017a9c:	4770      	bx	lr
 8017a9e:	bf00      	nop

08017aa0 <__atomic_load_8>:
 8017aa0:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 8017aa4:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 8017aa8:	4a15      	ldr	r2, [pc, #84]	@ (8017b00 <__atomic_load_8+0x60>)
 8017aaa:	4b16      	ldr	r3, [pc, #88]	@ (8017b04 <__atomic_load_8+0x64>)
 8017aac:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8017ab0:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 8017ab4:	fb02 f101 	mul.w	r1, r2, r1
 8017ab8:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 8017abc:	fba3 2301 	umull	r2, r3, r3, r1
 8017ac0:	091b      	lsrs	r3, r3, #4
 8017ac2:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8017ac6:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 8017aca:	b4d0      	push	{r4, r6, r7}
 8017acc:	4c0e      	ldr	r4, [pc, #56]	@ (8017b08 <__atomic_load_8+0x68>)
 8017ace:	1ac9      	subs	r1, r1, r3
 8017ad0:	1862      	adds	r2, r4, r1
 8017ad2:	f04f 0c01 	mov.w	ip, #1
 8017ad6:	e8d2 3f4f 	ldrexb	r3, [r2]
 8017ada:	e8c2 cf46 	strexb	r6, ip, [r2]
 8017ade:	2e00      	cmp	r6, #0
 8017ae0:	d1f9      	bne.n	8017ad6 <__atomic_load_8+0x36>
 8017ae2:	f3bf 8f5b 	dmb	ish
 8017ae6:	b2db      	uxtb	r3, r3
 8017ae8:	2b00      	cmp	r3, #0
 8017aea:	d1f4      	bne.n	8017ad6 <__atomic_load_8+0x36>
 8017aec:	e9d0 6700 	ldrd	r6, r7, [r0]
 8017af0:	f3bf 8f5b 	dmb	ish
 8017af4:	5463      	strb	r3, [r4, r1]
 8017af6:	4630      	mov	r0, r6
 8017af8:	4639      	mov	r1, r7
 8017afa:	bcd0      	pop	{r4, r6, r7}
 8017afc:	4770      	bx	lr
 8017afe:	bf00      	nop
 8017b00:	27d4eb2d 	.word	0x27d4eb2d
 8017b04:	b21642c9 	.word	0xb21642c9
 8017b08:	2000b5e0 	.word	0x2000b5e0

08017b0c <__atomic_store_8>:
 8017b0c:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 8017b10:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 8017b14:	b570      	push	{r4, r5, r6, lr}
 8017b16:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8017b1a:	4c14      	ldr	r4, [pc, #80]	@ (8017b6c <__atomic_store_8+0x60>)
 8017b1c:	4d14      	ldr	r5, [pc, #80]	@ (8017b70 <__atomic_store_8+0x64>)
 8017b1e:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 8017b22:	fb04 f101 	mul.w	r1, r4, r1
 8017b26:	4c13      	ldr	r4, [pc, #76]	@ (8017b74 <__atomic_store_8+0x68>)
 8017b28:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 8017b2c:	fba4 4e01 	umull	r4, lr, r4, r1
 8017b30:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
 8017b34:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
 8017b38:	ebce 0ec4 	rsb	lr, lr, r4, lsl #3
 8017b3c:	eba1 0e0e 	sub.w	lr, r1, lr
 8017b40:	eb05 0c0e 	add.w	ip, r5, lr
 8017b44:	f04f 0401 	mov.w	r4, #1
 8017b48:	e8dc 1f4f 	ldrexb	r1, [ip]
 8017b4c:	e8cc 4f46 	strexb	r6, r4, [ip]
 8017b50:	2e00      	cmp	r6, #0
 8017b52:	d1f9      	bne.n	8017b48 <__atomic_store_8+0x3c>
 8017b54:	f3bf 8f5b 	dmb	ish
 8017b58:	b2c9      	uxtb	r1, r1
 8017b5a:	2900      	cmp	r1, #0
 8017b5c:	d1f4      	bne.n	8017b48 <__atomic_store_8+0x3c>
 8017b5e:	e9c0 2300 	strd	r2, r3, [r0]
 8017b62:	f3bf 8f5b 	dmb	ish
 8017b66:	f805 100e 	strb.w	r1, [r5, lr]
 8017b6a:	bd70      	pop	{r4, r5, r6, pc}
 8017b6c:	27d4eb2d 	.word	0x27d4eb2d
 8017b70:	2000b5e0 	.word	0x2000b5e0
 8017b74:	b21642c9 	.word	0xb21642c9

08017b78 <__atomic_exchange_8>:
 8017b78:	ea80 4c10 	eor.w	ip, r0, r0, lsr #16
 8017b7c:	f08c 0c3d 	eor.w	ip, ip, #61	@ 0x3d
 8017b80:	4916      	ldr	r1, [pc, #88]	@ (8017bdc <__atomic_exchange_8+0x64>)
 8017b82:	eb0c 0ccc 	add.w	ip, ip, ip, lsl #3
 8017b86:	ea8c 1c1c 	eor.w	ip, ip, ip, lsr #4
 8017b8a:	fb01 fc0c 	mul.w	ip, r1, ip
 8017b8e:	4914      	ldr	r1, [pc, #80]	@ (8017be0 <__atomic_exchange_8+0x68>)
 8017b90:	ea8c 3cdc 	eor.w	ip, ip, ip, lsr #15
 8017b94:	b570      	push	{r4, r5, r6, lr}
 8017b96:	4605      	mov	r5, r0
 8017b98:	fba1 010c 	umull	r0, r1, r1, ip
 8017b9c:	0909      	lsrs	r1, r1, #4
 8017b9e:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 8017ba2:	ebc1 01c0 	rsb	r1, r1, r0, lsl #3
 8017ba6:	4e0f      	ldr	r6, [pc, #60]	@ (8017be4 <__atomic_exchange_8+0x6c>)
 8017ba8:	ebac 0c01 	sub.w	ip, ip, r1
 8017bac:	eb06 010c 	add.w	r1, r6, ip
 8017bb0:	f04f 0e01 	mov.w	lr, #1
 8017bb4:	e8d1 4f4f 	ldrexb	r4, [r1]
 8017bb8:	e8c1 ef40 	strexb	r0, lr, [r1]
 8017bbc:	2800      	cmp	r0, #0
 8017bbe:	d1f9      	bne.n	8017bb4 <__atomic_exchange_8+0x3c>
 8017bc0:	f3bf 8f5b 	dmb	ish
 8017bc4:	b2e4      	uxtb	r4, r4
 8017bc6:	2c00      	cmp	r4, #0
 8017bc8:	d1f4      	bne.n	8017bb4 <__atomic_exchange_8+0x3c>
 8017bca:	e9d5 0100 	ldrd	r0, r1, [r5]
 8017bce:	e9c5 2300 	strd	r2, r3, [r5]
 8017bd2:	f3bf 8f5b 	dmb	ish
 8017bd6:	f806 400c 	strb.w	r4, [r6, ip]
 8017bda:	bd70      	pop	{r4, r5, r6, pc}
 8017bdc:	27d4eb2d 	.word	0x27d4eb2d
 8017be0:	b21642c9 	.word	0xb21642c9
 8017be4:	2000b5e0 	.word	0x2000b5e0

08017be8 <rcutils_get_env>:
 8017be8:	b168      	cbz	r0, 8017c06 <rcutils_get_env+0x1e>
 8017bea:	b510      	push	{r4, lr}
 8017bec:	460c      	mov	r4, r1
 8017bee:	b129      	cbz	r1, 8017bfc <rcutils_get_env+0x14>
 8017bf0:	f002 fef2 	bl	801a9d8 <getenv>
 8017bf4:	b120      	cbz	r0, 8017c00 <rcutils_get_env+0x18>
 8017bf6:	6020      	str	r0, [r4, #0]
 8017bf8:	2000      	movs	r0, #0
 8017bfa:	bd10      	pop	{r4, pc}
 8017bfc:	4803      	ldr	r0, [pc, #12]	@ (8017c0c <rcutils_get_env+0x24>)
 8017bfe:	bd10      	pop	{r4, pc}
 8017c00:	4b03      	ldr	r3, [pc, #12]	@ (8017c10 <rcutils_get_env+0x28>)
 8017c02:	6023      	str	r3, [r4, #0]
 8017c04:	bd10      	pop	{r4, pc}
 8017c06:	4803      	ldr	r0, [pc, #12]	@ (8017c14 <rcutils_get_env+0x2c>)
 8017c08:	4770      	bx	lr
 8017c0a:	bf00      	nop
 8017c0c:	0801e084 	.word	0x0801e084
 8017c10:	0801e448 	.word	0x0801e448
 8017c14:	0801e068 	.word	0x0801e068

08017c18 <rcutils_format_string_limit>:
 8017c18:	b40f      	push	{r0, r1, r2, r3}
 8017c1a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017c1c:	b083      	sub	sp, #12
 8017c1e:	ac08      	add	r4, sp, #32
 8017c20:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 8017c22:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8017c26:	b34e      	cbz	r6, 8017c7c <rcutils_format_string_limit+0x64>
 8017c28:	a808      	add	r0, sp, #32
 8017c2a:	f7f7 fe9f 	bl	800f96c <rcutils_allocator_is_valid>
 8017c2e:	b328      	cbz	r0, 8017c7c <rcutils_format_string_limit+0x64>
 8017c30:	2100      	movs	r1, #0
 8017c32:	ab0f      	add	r3, sp, #60	@ 0x3c
 8017c34:	4632      	mov	r2, r6
 8017c36:	4608      	mov	r0, r1
 8017c38:	e9cd 3300 	strd	r3, r3, [sp]
 8017c3c:	f000 f8f4 	bl	8017e28 <rcutils_vsnprintf>
 8017c40:	1c43      	adds	r3, r0, #1
 8017c42:	4605      	mov	r5, r0
 8017c44:	d01a      	beq.n	8017c7c <rcutils_format_string_limit+0x64>
 8017c46:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8017c48:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8017c4a:	1c47      	adds	r7, r0, #1
 8017c4c:	429f      	cmp	r7, r3
 8017c4e:	bf84      	itt	hi
 8017c50:	461f      	movhi	r7, r3
 8017c52:	f103 35ff 	addhi.w	r5, r3, #4294967295	@ 0xffffffff
 8017c56:	4638      	mov	r0, r7
 8017c58:	9b08      	ldr	r3, [sp, #32]
 8017c5a:	4798      	blx	r3
 8017c5c:	4604      	mov	r4, r0
 8017c5e:	b168      	cbz	r0, 8017c7c <rcutils_format_string_limit+0x64>
 8017c60:	9b01      	ldr	r3, [sp, #4]
 8017c62:	4632      	mov	r2, r6
 8017c64:	4639      	mov	r1, r7
 8017c66:	f000 f8df 	bl	8017e28 <rcutils_vsnprintf>
 8017c6a:	2800      	cmp	r0, #0
 8017c6c:	db02      	blt.n	8017c74 <rcutils_format_string_limit+0x5c>
 8017c6e:	2300      	movs	r3, #0
 8017c70:	5563      	strb	r3, [r4, r5]
 8017c72:	e004      	b.n	8017c7e <rcutils_format_string_limit+0x66>
 8017c74:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017c76:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8017c78:	4620      	mov	r0, r4
 8017c7a:	4798      	blx	r3
 8017c7c:	2400      	movs	r4, #0
 8017c7e:	4620      	mov	r0, r4
 8017c80:	b003      	add	sp, #12
 8017c82:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8017c86:	b004      	add	sp, #16
 8017c88:	4770      	bx	lr
 8017c8a:	bf00      	nop

08017c8c <rcutils_repl_str>:
 8017c8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017c90:	ed2d 8b02 	vpush	{d8}
 8017c94:	b087      	sub	sp, #28
 8017c96:	4680      	mov	r8, r0
 8017c98:	4608      	mov	r0, r1
 8017c9a:	f8cd 8004 	str.w	r8, [sp, #4]
 8017c9e:	ee08 2a10 	vmov	s16, r2
 8017ca2:	468a      	mov	sl, r1
 8017ca4:	4699      	mov	r9, r3
 8017ca6:	f7e8 fac5 	bl	8000234 <strlen>
 8017caa:	2600      	movs	r6, #0
 8017cac:	4647      	mov	r7, r8
 8017cae:	9002      	str	r0, [sp, #8]
 8017cb0:	46b3      	mov	fp, r6
 8017cb2:	2510      	movs	r5, #16
 8017cb4:	46b0      	mov	r8, r6
 8017cb6:	e01d      	b.n	8017cf4 <rcutils_repl_str+0x68>
 8017cb8:	f10b 0b01 	add.w	fp, fp, #1
 8017cbc:	455e      	cmp	r6, fp
 8017cbe:	d211      	bcs.n	8017ce4 <rcutils_repl_str+0x58>
 8017cc0:	442e      	add	r6, r5
 8017cc2:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8017cc6:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8017cca:	00b1      	lsls	r1, r6, #2
 8017ccc:	4798      	blx	r3
 8017cce:	2800      	cmp	r0, #0
 8017cd0:	f000 8088 	beq.w	8017de4 <rcutils_repl_str+0x158>
 8017cd4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8017cd8:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
 8017cdc:	4680      	mov	r8, r0
 8017cde:	bf28      	it	cs
 8017ce0:	f44f 1580 	movcs.w	r5, #1048576	@ 0x100000
 8017ce4:	9a01      	ldr	r2, [sp, #4]
 8017ce6:	eb08 038b 	add.w	r3, r8, fp, lsl #2
 8017cea:	1aa2      	subs	r2, r4, r2
 8017cec:	f843 2c04 	str.w	r2, [r3, #-4]
 8017cf0:	9b02      	ldr	r3, [sp, #8]
 8017cf2:	18e7      	adds	r7, r4, r3
 8017cf4:	4651      	mov	r1, sl
 8017cf6:	4638      	mov	r0, r7
 8017cf8:	f003 fb57 	bl	801b3aa <strstr>
 8017cfc:	4604      	mov	r4, r0
 8017cfe:	4640      	mov	r0, r8
 8017d00:	2c00      	cmp	r4, #0
 8017d02:	d1d9      	bne.n	8017cb8 <rcutils_repl_str+0x2c>
 8017d04:	46b8      	mov	r8, r7
 8017d06:	4607      	mov	r7, r0
 8017d08:	4640      	mov	r0, r8
 8017d0a:	f7e8 fa93 	bl	8000234 <strlen>
 8017d0e:	9b01      	ldr	r3, [sp, #4]
 8017d10:	eba8 0303 	sub.w	r3, r8, r3
 8017d14:	181c      	adds	r4, r3, r0
 8017d16:	9404      	str	r4, [sp, #16]
 8017d18:	f1bb 0f00 	cmp.w	fp, #0
 8017d1c:	d04a      	beq.n	8017db4 <rcutils_repl_str+0x128>
 8017d1e:	ee18 0a10 	vmov	r0, s16
 8017d22:	f7e8 fa87 	bl	8000234 <strlen>
 8017d26:	9b02      	ldr	r3, [sp, #8]
 8017d28:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8017d2c:	1ac3      	subs	r3, r0, r3
 8017d2e:	fb0b 4303 	mla	r3, fp, r3, r4
 8017d32:	461a      	mov	r2, r3
 8017d34:	9305      	str	r3, [sp, #20]
 8017d36:	4606      	mov	r6, r0
 8017d38:	f8d9 3000 	ldr.w	r3, [r9]
 8017d3c:	1c50      	adds	r0, r2, #1
 8017d3e:	4798      	blx	r3
 8017d40:	9003      	str	r0, [sp, #12]
 8017d42:	2800      	cmp	r0, #0
 8017d44:	d04f      	beq.n	8017de6 <rcutils_repl_str+0x15a>
 8017d46:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8017d4a:	683a      	ldr	r2, [r7, #0]
 8017d4c:	4641      	mov	r1, r8
 8017d4e:	f003 fbce 	bl	801b4ee <memcpy>
 8017d52:	683d      	ldr	r5, [r7, #0]
 8017d54:	9b03      	ldr	r3, [sp, #12]
 8017d56:	9701      	str	r7, [sp, #4]
 8017d58:	46ba      	mov	sl, r7
 8017d5a:	441d      	add	r5, r3
 8017d5c:	9f02      	ldr	r7, [sp, #8]
 8017d5e:	f8cd 9008 	str.w	r9, [sp, #8]
 8017d62:	2401      	movs	r4, #1
 8017d64:	46d1      	mov	r9, sl
 8017d66:	ee18 aa10 	vmov	sl, s16
 8017d6a:	e00a      	b.n	8017d82 <rcutils_repl_str+0xf6>
 8017d6c:	f8d9 5000 	ldr.w	r5, [r9]
 8017d70:	1aaa      	subs	r2, r5, r2
 8017d72:	1885      	adds	r5, r0, r2
 8017d74:	f003 fbbb 	bl	801b4ee <memcpy>
 8017d78:	45a3      	cmp	fp, r4
 8017d7a:	f104 0201 	add.w	r2, r4, #1
 8017d7e:	d935      	bls.n	8017dec <rcutils_repl_str+0x160>
 8017d80:	4614      	mov	r4, r2
 8017d82:	4632      	mov	r2, r6
 8017d84:	4651      	mov	r1, sl
 8017d86:	4628      	mov	r0, r5
 8017d88:	f003 fbb1 	bl	801b4ee <memcpy>
 8017d8c:	f859 2b04 	ldr.w	r2, [r9], #4
 8017d90:	45a3      	cmp	fp, r4
 8017d92:	443a      	add	r2, r7
 8017d94:	eb05 0006 	add.w	r0, r5, r6
 8017d98:	eb08 0102 	add.w	r1, r8, r2
 8017d9c:	d1e6      	bne.n	8017d6c <rcutils_repl_str+0xe0>
 8017d9e:	9b04      	ldr	r3, [sp, #16]
 8017da0:	1a9a      	subs	r2, r3, r2
 8017da2:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 8017da6:	f003 fba2 	bl	801b4ee <memcpy>
 8017daa:	9a03      	ldr	r2, [sp, #12]
 8017dac:	9905      	ldr	r1, [sp, #20]
 8017dae:	2300      	movs	r3, #0
 8017db0:	5453      	strb	r3, [r2, r1]
 8017db2:	e00b      	b.n	8017dcc <rcutils_repl_str+0x140>
 8017db4:	4620      	mov	r0, r4
 8017db6:	f8d9 3000 	ldr.w	r3, [r9]
 8017dba:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8017dbe:	3001      	adds	r0, #1
 8017dc0:	4798      	blx	r3
 8017dc2:	9003      	str	r0, [sp, #12]
 8017dc4:	b110      	cbz	r0, 8017dcc <rcutils_repl_str+0x140>
 8017dc6:	9901      	ldr	r1, [sp, #4]
 8017dc8:	f003 fb89 	bl	801b4de <strcpy>
 8017dcc:	4638      	mov	r0, r7
 8017dce:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8017dd2:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8017dd6:	4798      	blx	r3
 8017dd8:	9803      	ldr	r0, [sp, #12]
 8017dda:	b007      	add	sp, #28
 8017ddc:	ecbd 8b02 	vpop	{d8}
 8017de0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017de4:	4647      	mov	r7, r8
 8017de6:	2300      	movs	r3, #0
 8017de8:	9303      	str	r3, [sp, #12]
 8017dea:	e7ef      	b.n	8017dcc <rcutils_repl_str+0x140>
 8017dec:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 8017df0:	e7db      	b.n	8017daa <rcutils_repl_str+0x11e>
 8017df2:	bf00      	nop

08017df4 <rcutils_snprintf>:
 8017df4:	b40c      	push	{r2, r3}
 8017df6:	b530      	push	{r4, r5, lr}
 8017df8:	b083      	sub	sp, #12
 8017dfa:	ab06      	add	r3, sp, #24
 8017dfc:	f853 2b04 	ldr.w	r2, [r3], #4
 8017e00:	9301      	str	r3, [sp, #4]
 8017e02:	b152      	cbz	r2, 8017e1a <rcutils_snprintf+0x26>
 8017e04:	b138      	cbz	r0, 8017e16 <rcutils_snprintf+0x22>
 8017e06:	b141      	cbz	r1, 8017e1a <rcutils_snprintf+0x26>
 8017e08:	f003 f9dc 	bl	801b1c4 <vsniprintf>
 8017e0c:	b003      	add	sp, #12
 8017e0e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017e12:	b002      	add	sp, #8
 8017e14:	4770      	bx	lr
 8017e16:	2900      	cmp	r1, #0
 8017e18:	d0f6      	beq.n	8017e08 <rcutils_snprintf+0x14>
 8017e1a:	f003 fb33 	bl	801b484 <__errno>
 8017e1e:	2316      	movs	r3, #22
 8017e20:	6003      	str	r3, [r0, #0]
 8017e22:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017e26:	e7f1      	b.n	8017e0c <rcutils_snprintf+0x18>

08017e28 <rcutils_vsnprintf>:
 8017e28:	b570      	push	{r4, r5, r6, lr}
 8017e2a:	b13a      	cbz	r2, 8017e3c <rcutils_vsnprintf+0x14>
 8017e2c:	b120      	cbz	r0, 8017e38 <rcutils_vsnprintf+0x10>
 8017e2e:	b129      	cbz	r1, 8017e3c <rcutils_vsnprintf+0x14>
 8017e30:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017e34:	f003 b9c6 	b.w	801b1c4 <vsniprintf>
 8017e38:	2900      	cmp	r1, #0
 8017e3a:	d0f9      	beq.n	8017e30 <rcutils_vsnprintf+0x8>
 8017e3c:	f003 fb22 	bl	801b484 <__errno>
 8017e40:	2316      	movs	r3, #22
 8017e42:	6003      	str	r3, [r0, #0]
 8017e44:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017e48:	bd70      	pop	{r4, r5, r6, pc}
 8017e4a:	bf00      	nop

08017e4c <rcutils_strdup>:
 8017e4c:	b084      	sub	sp, #16
 8017e4e:	b570      	push	{r4, r5, r6, lr}
 8017e50:	b082      	sub	sp, #8
 8017e52:	ac07      	add	r4, sp, #28
 8017e54:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 8017e58:	4605      	mov	r5, r0
 8017e5a:	b1b0      	cbz	r0, 8017e8a <rcutils_strdup+0x3e>
 8017e5c:	f7e8 f9ea 	bl	8000234 <strlen>
 8017e60:	1c42      	adds	r2, r0, #1
 8017e62:	9b07      	ldr	r3, [sp, #28]
 8017e64:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8017e66:	9201      	str	r2, [sp, #4]
 8017e68:	4606      	mov	r6, r0
 8017e6a:	4610      	mov	r0, r2
 8017e6c:	4798      	blx	r3
 8017e6e:	4604      	mov	r4, r0
 8017e70:	b128      	cbz	r0, 8017e7e <rcutils_strdup+0x32>
 8017e72:	9a01      	ldr	r2, [sp, #4]
 8017e74:	4629      	mov	r1, r5
 8017e76:	f003 fb3a 	bl	801b4ee <memcpy>
 8017e7a:	2300      	movs	r3, #0
 8017e7c:	55a3      	strb	r3, [r4, r6]
 8017e7e:	4620      	mov	r0, r4
 8017e80:	b002      	add	sp, #8
 8017e82:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017e86:	b004      	add	sp, #16
 8017e88:	4770      	bx	lr
 8017e8a:	4604      	mov	r4, r0
 8017e8c:	e7f7      	b.n	8017e7e <rcutils_strdup+0x32>
 8017e8e:	bf00      	nop

08017e90 <rcutils_strndup>:
 8017e90:	b082      	sub	sp, #8
 8017e92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017e94:	ac06      	add	r4, sp, #24
 8017e96:	e884 000c 	stmia.w	r4, {r2, r3}
 8017e9a:	4605      	mov	r5, r0
 8017e9c:	b188      	cbz	r0, 8017ec2 <rcutils_strndup+0x32>
 8017e9e:	1c4f      	adds	r7, r1, #1
 8017ea0:	460e      	mov	r6, r1
 8017ea2:	4638      	mov	r0, r7
 8017ea4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8017ea6:	4790      	blx	r2
 8017ea8:	4604      	mov	r4, r0
 8017eaa:	b128      	cbz	r0, 8017eb8 <rcutils_strndup+0x28>
 8017eac:	463a      	mov	r2, r7
 8017eae:	4629      	mov	r1, r5
 8017eb0:	f003 fb1d 	bl	801b4ee <memcpy>
 8017eb4:	2300      	movs	r3, #0
 8017eb6:	55a3      	strb	r3, [r4, r6]
 8017eb8:	4620      	mov	r0, r4
 8017eba:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8017ebe:	b002      	add	sp, #8
 8017ec0:	4770      	bx	lr
 8017ec2:	4604      	mov	r4, r0
 8017ec4:	e7f8      	b.n	8017eb8 <rcutils_strndup+0x28>
 8017ec6:	bf00      	nop

08017ec8 <rcutils_get_zero_initialized_string_map>:
 8017ec8:	4b01      	ldr	r3, [pc, #4]	@ (8017ed0 <rcutils_get_zero_initialized_string_map+0x8>)
 8017eca:	2000      	movs	r0, #0
 8017ecc:	6018      	str	r0, [r3, #0]
 8017ece:	4770      	bx	lr
 8017ed0:	2000b5f8 	.word	0x2000b5f8

08017ed4 <rcutils_string_map_reserve>:
 8017ed4:	2800      	cmp	r0, #0
 8017ed6:	d05f      	beq.n	8017f98 <rcutils_string_map_reserve+0xc4>
 8017ed8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017edc:	460c      	mov	r4, r1
 8017ede:	6801      	ldr	r1, [r0, #0]
 8017ee0:	b082      	sub	sp, #8
 8017ee2:	4605      	mov	r5, r0
 8017ee4:	b129      	cbz	r1, 8017ef2 <rcutils_string_map_reserve+0x1e>
 8017ee6:	68cb      	ldr	r3, [r1, #12]
 8017ee8:	42a3      	cmp	r3, r4
 8017eea:	d906      	bls.n	8017efa <rcutils_string_map_reserve+0x26>
 8017eec:	461c      	mov	r4, r3
 8017eee:	2900      	cmp	r1, #0
 8017ef0:	d1f9      	bne.n	8017ee6 <rcutils_string_map_reserve+0x12>
 8017ef2:	201f      	movs	r0, #31
 8017ef4:	b002      	add	sp, #8
 8017ef6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017efa:	688b      	ldr	r3, [r1, #8]
 8017efc:	42a3      	cmp	r3, r4
 8017efe:	d047      	beq.n	8017f90 <rcutils_string_map_reserve+0xbc>
 8017f00:	6a0e      	ldr	r6, [r1, #32]
 8017f02:	2c00      	cmp	r4, #0
 8017f04:	d034      	beq.n	8017f70 <rcutils_string_map_reserve+0x9c>
 8017f06:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 8017f0a:	d243      	bcs.n	8017f94 <rcutils_string_map_reserve+0xc0>
 8017f0c:	00a7      	lsls	r7, r4, #2
 8017f0e:	f8d1 8018 	ldr.w	r8, [r1, #24]
 8017f12:	6808      	ldr	r0, [r1, #0]
 8017f14:	4632      	mov	r2, r6
 8017f16:	4639      	mov	r1, r7
 8017f18:	47c0      	blx	r8
 8017f1a:	2800      	cmp	r0, #0
 8017f1c:	d03a      	beq.n	8017f94 <rcutils_string_map_reserve+0xc0>
 8017f1e:	682b      	ldr	r3, [r5, #0]
 8017f20:	4632      	mov	r2, r6
 8017f22:	6018      	str	r0, [r3, #0]
 8017f24:	4639      	mov	r1, r7
 8017f26:	6858      	ldr	r0, [r3, #4]
 8017f28:	47c0      	blx	r8
 8017f2a:	2800      	cmp	r0, #0
 8017f2c:	d032      	beq.n	8017f94 <rcutils_string_map_reserve+0xc0>
 8017f2e:	682d      	ldr	r5, [r5, #0]
 8017f30:	68ab      	ldr	r3, [r5, #8]
 8017f32:	6068      	str	r0, [r5, #4]
 8017f34:	42a3      	cmp	r3, r4
 8017f36:	d226      	bcs.n	8017f86 <rcutils_string_map_reserve+0xb2>
 8017f38:	682a      	ldr	r2, [r5, #0]
 8017f3a:	eb00 0c07 	add.w	ip, r0, r7
 8017f3e:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
 8017f42:	45e6      	cmp	lr, ip
 8017f44:	ea4f 0183 	mov.w	r1, r3, lsl #2
 8017f48:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 8017f4c:	d203      	bcs.n	8017f56 <rcutils_string_map_reserve+0x82>
 8017f4e:	eb02 0c07 	add.w	ip, r2, r7
 8017f52:	4566      	cmp	r6, ip
 8017f54:	d322      	bcc.n	8017f9c <rcutils_string_map_reserve+0xc8>
 8017f56:	1ae3      	subs	r3, r4, r3
 8017f58:	009a      	lsls	r2, r3, #2
 8017f5a:	4670      	mov	r0, lr
 8017f5c:	2100      	movs	r1, #0
 8017f5e:	9201      	str	r2, [sp, #4]
 8017f60:	f003 f9fc 	bl	801b35c <memset>
 8017f64:	9a01      	ldr	r2, [sp, #4]
 8017f66:	2100      	movs	r1, #0
 8017f68:	4630      	mov	r0, r6
 8017f6a:	f003 f9f7 	bl	801b35c <memset>
 8017f6e:	e00a      	b.n	8017f86 <rcutils_string_map_reserve+0xb2>
 8017f70:	694f      	ldr	r7, [r1, #20]
 8017f72:	6808      	ldr	r0, [r1, #0]
 8017f74:	4631      	mov	r1, r6
 8017f76:	47b8      	blx	r7
 8017f78:	682b      	ldr	r3, [r5, #0]
 8017f7a:	4631      	mov	r1, r6
 8017f7c:	6858      	ldr	r0, [r3, #4]
 8017f7e:	601c      	str	r4, [r3, #0]
 8017f80:	47b8      	blx	r7
 8017f82:	682d      	ldr	r5, [r5, #0]
 8017f84:	606c      	str	r4, [r5, #4]
 8017f86:	2000      	movs	r0, #0
 8017f88:	60ac      	str	r4, [r5, #8]
 8017f8a:	b002      	add	sp, #8
 8017f8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017f90:	2000      	movs	r0, #0
 8017f92:	e7af      	b.n	8017ef4 <rcutils_string_map_reserve+0x20>
 8017f94:	200a      	movs	r0, #10
 8017f96:	e7ad      	b.n	8017ef4 <rcutils_string_map_reserve+0x20>
 8017f98:	200b      	movs	r0, #11
 8017f9a:	4770      	bx	lr
 8017f9c:	1f0b      	subs	r3, r1, #4
 8017f9e:	4418      	add	r0, r3
 8017fa0:	4413      	add	r3, r2
 8017fa2:	3a04      	subs	r2, #4
 8017fa4:	4417      	add	r7, r2
 8017fa6:	2200      	movs	r2, #0
 8017fa8:	f843 2f04 	str.w	r2, [r3, #4]!
 8017fac:	42bb      	cmp	r3, r7
 8017fae:	f840 2f04 	str.w	r2, [r0, #4]!
 8017fb2:	d1f9      	bne.n	8017fa8 <rcutils_string_map_reserve+0xd4>
 8017fb4:	e7e7      	b.n	8017f86 <rcutils_string_map_reserve+0xb2>
 8017fb6:	bf00      	nop

08017fb8 <rcutils_string_map_init>:
 8017fb8:	b082      	sub	sp, #8
 8017fba:	b570      	push	{r4, r5, r6, lr}
 8017fbc:	ac04      	add	r4, sp, #16
 8017fbe:	e884 000c 	stmia.w	r4, {r2, r3}
 8017fc2:	b380      	cbz	r0, 8018026 <rcutils_string_map_init+0x6e>
 8017fc4:	6806      	ldr	r6, [r0, #0]
 8017fc6:	4604      	mov	r4, r0
 8017fc8:	b12e      	cbz	r6, 8017fd6 <rcutils_string_map_init+0x1e>
 8017fca:	251e      	movs	r5, #30
 8017fcc:	4628      	mov	r0, r5
 8017fce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017fd2:	b002      	add	sp, #8
 8017fd4:	4770      	bx	lr
 8017fd6:	a804      	add	r0, sp, #16
 8017fd8:	460d      	mov	r5, r1
 8017fda:	f7f7 fcc7 	bl	800f96c <rcutils_allocator_is_valid>
 8017fde:	b310      	cbz	r0, 8018026 <rcutils_string_map_init+0x6e>
 8017fe0:	9b04      	ldr	r3, [sp, #16]
 8017fe2:	9908      	ldr	r1, [sp, #32]
 8017fe4:	2024      	movs	r0, #36	@ 0x24
 8017fe6:	4798      	blx	r3
 8017fe8:	6020      	str	r0, [r4, #0]
 8017fea:	b310      	cbz	r0, 8018032 <rcutils_string_map_init+0x7a>
 8017fec:	f10d 0e10 	add.w	lr, sp, #16
 8017ff0:	e9c0 6600 	strd	r6, r6, [r0]
 8017ff4:	e9c0 6602 	strd	r6, r6, [r0, #8]
 8017ff8:	f100 0c10 	add.w	ip, r0, #16
 8017ffc:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8018000:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8018004:	f8de 3000 	ldr.w	r3, [lr]
 8018008:	f8cc 3000 	str.w	r3, [ip]
 801800c:	4629      	mov	r1, r5
 801800e:	4620      	mov	r0, r4
 8018010:	f7ff ff60 	bl	8017ed4 <rcutils_string_map_reserve>
 8018014:	4605      	mov	r5, r0
 8018016:	2800      	cmp	r0, #0
 8018018:	d0d8      	beq.n	8017fcc <rcutils_string_map_init+0x14>
 801801a:	9b05      	ldr	r3, [sp, #20]
 801801c:	9908      	ldr	r1, [sp, #32]
 801801e:	6820      	ldr	r0, [r4, #0]
 8018020:	4798      	blx	r3
 8018022:	6026      	str	r6, [r4, #0]
 8018024:	e7d2      	b.n	8017fcc <rcutils_string_map_init+0x14>
 8018026:	250b      	movs	r5, #11
 8018028:	4628      	mov	r0, r5
 801802a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801802e:	b002      	add	sp, #8
 8018030:	4770      	bx	lr
 8018032:	250a      	movs	r5, #10
 8018034:	e7ca      	b.n	8017fcc <rcutils_string_map_init+0x14>
 8018036:	bf00      	nop

08018038 <rcutils_string_map_fini>:
 8018038:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801803c:	b082      	sub	sp, #8
 801803e:	2800      	cmp	r0, #0
 8018040:	d03a      	beq.n	80180b8 <rcutils_string_map_fini+0x80>
 8018042:	6804      	ldr	r4, [r0, #0]
 8018044:	4606      	mov	r6, r0
 8018046:	2c00      	cmp	r4, #0
 8018048:	d032      	beq.n	80180b0 <rcutils_string_map_fini+0x78>
 801804a:	68a3      	ldr	r3, [r4, #8]
 801804c:	b32b      	cbz	r3, 801809a <rcutils_string_map_fini+0x62>
 801804e:	2500      	movs	r5, #0
 8018050:	6822      	ldr	r2, [r4, #0]
 8018052:	462f      	mov	r7, r5
 8018054:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8018058:	b1e0      	cbz	r0, 8018094 <rcutils_string_map_fini+0x5c>
 801805a:	6a21      	ldr	r1, [r4, #32]
 801805c:	f8d4 8014 	ldr.w	r8, [r4, #20]
 8018060:	9101      	str	r1, [sp, #4]
 8018062:	47c0      	blx	r8
 8018064:	e9d4 2300 	ldrd	r2, r3, [r4]
 8018068:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 801806c:	9901      	ldr	r1, [sp, #4]
 801806e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8018072:	47c0      	blx	r8
 8018074:	68e3      	ldr	r3, [r4, #12]
 8018076:	6862      	ldr	r2, [r4, #4]
 8018078:	3b01      	subs	r3, #1
 801807a:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 801807e:	60e3      	str	r3, [r4, #12]
 8018080:	6834      	ldr	r4, [r6, #0]
 8018082:	68a3      	ldr	r3, [r4, #8]
 8018084:	3501      	adds	r5, #1
 8018086:	429d      	cmp	r5, r3
 8018088:	d207      	bcs.n	801809a <rcutils_string_map_fini+0x62>
 801808a:	6822      	ldr	r2, [r4, #0]
 801808c:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8018090:	2800      	cmp	r0, #0
 8018092:	d1e2      	bne.n	801805a <rcutils_string_map_fini+0x22>
 8018094:	3501      	adds	r5, #1
 8018096:	429d      	cmp	r5, r3
 8018098:	d3dc      	bcc.n	8018054 <rcutils_string_map_fini+0x1c>
 801809a:	2100      	movs	r1, #0
 801809c:	4630      	mov	r0, r6
 801809e:	f7ff ff19 	bl	8017ed4 <rcutils_string_map_reserve>
 80180a2:	4604      	mov	r4, r0
 80180a4:	b920      	cbnz	r0, 80180b0 <rcutils_string_map_fini+0x78>
 80180a6:	6830      	ldr	r0, [r6, #0]
 80180a8:	6943      	ldr	r3, [r0, #20]
 80180aa:	6a01      	ldr	r1, [r0, #32]
 80180ac:	4798      	blx	r3
 80180ae:	6034      	str	r4, [r6, #0]
 80180b0:	4620      	mov	r0, r4
 80180b2:	b002      	add	sp, #8
 80180b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80180b8:	240b      	movs	r4, #11
 80180ba:	4620      	mov	r0, r4
 80180bc:	b002      	add	sp, #8
 80180be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80180c2:	bf00      	nop

080180c4 <rcutils_string_map_getn>:
 80180c4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80180c8:	b300      	cbz	r0, 801810c <rcutils_string_map_getn+0x48>
 80180ca:	6807      	ldr	r7, [r0, #0]
 80180cc:	b1ff      	cbz	r7, 801810e <rcutils_string_map_getn+0x4a>
 80180ce:	4688      	mov	r8, r1
 80180d0:	b1e1      	cbz	r1, 801810c <rcutils_string_map_getn+0x48>
 80180d2:	f8d7 a008 	ldr.w	sl, [r7, #8]
 80180d6:	683e      	ldr	r6, [r7, #0]
 80180d8:	f1ba 0f00 	cmp.w	sl, #0
 80180dc:	d016      	beq.n	801810c <rcutils_string_map_getn+0x48>
 80180de:	4691      	mov	r9, r2
 80180e0:	3e04      	subs	r6, #4
 80180e2:	2400      	movs	r4, #0
 80180e4:	f856 5f04 	ldr.w	r5, [r6, #4]!
 80180e8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80180ec:	4628      	mov	r0, r5
 80180ee:	3401      	adds	r4, #1
 80180f0:	b155      	cbz	r5, 8018108 <rcutils_string_map_getn+0x44>
 80180f2:	f7e8 f89f 	bl	8000234 <strlen>
 80180f6:	4548      	cmp	r0, r9
 80180f8:	4602      	mov	r2, r0
 80180fa:	4629      	mov	r1, r5
 80180fc:	bf38      	it	cc
 80180fe:	464a      	movcc	r2, r9
 8018100:	4640      	mov	r0, r8
 8018102:	f003 f940 	bl	801b386 <strncmp>
 8018106:	b128      	cbz	r0, 8018114 <rcutils_string_map_getn+0x50>
 8018108:	45a2      	cmp	sl, r4
 801810a:	d1eb      	bne.n	80180e4 <rcutils_string_map_getn+0x20>
 801810c:	2700      	movs	r7, #0
 801810e:	4638      	mov	r0, r7
 8018110:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018114:	687b      	ldr	r3, [r7, #4]
 8018116:	f853 700b 	ldr.w	r7, [r3, fp]
 801811a:	4638      	mov	r0, r7
 801811c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018120 <rmw_get_zero_initialized_context>:
 8018120:	b510      	push	{r4, lr}
 8018122:	4604      	mov	r4, r0
 8018124:	3010      	adds	r0, #16
 8018126:	f7f7 fcb3 	bl	800fa90 <rmw_get_zero_initialized_init_options>
 801812a:	2300      	movs	r3, #0
 801812c:	2000      	movs	r0, #0
 801812e:	2100      	movs	r1, #0
 8018130:	e9c4 0100 	strd	r0, r1, [r4]
 8018134:	e9c4 3312 	strd	r3, r3, [r4, #72]	@ 0x48
 8018138:	60a3      	str	r3, [r4, #8]
 801813a:	4620      	mov	r0, r4
 801813c:	bd10      	pop	{r4, pc}
 801813e:	bf00      	nop

08018140 <rmw_subscription_content_filter_options_fini>:
 8018140:	b1b0      	cbz	r0, 8018170 <rmw_subscription_content_filter_options_fini+0x30>
 8018142:	b538      	push	{r3, r4, r5, lr}
 8018144:	4604      	mov	r4, r0
 8018146:	4608      	mov	r0, r1
 8018148:	460d      	mov	r5, r1
 801814a:	f7f7 fc0f 	bl	800f96c <rcutils_allocator_is_valid>
 801814e:	b168      	cbz	r0, 801816c <rmw_subscription_content_filter_options_fini+0x2c>
 8018150:	6820      	ldr	r0, [r4, #0]
 8018152:	b120      	cbz	r0, 801815e <rmw_subscription_content_filter_options_fini+0x1e>
 8018154:	686b      	ldr	r3, [r5, #4]
 8018156:	6929      	ldr	r1, [r5, #16]
 8018158:	4798      	blx	r3
 801815a:	2300      	movs	r3, #0
 801815c:	6023      	str	r3, [r4, #0]
 801815e:	1d20      	adds	r0, r4, #4
 8018160:	f002 fb4e 	bl	801a800 <rcutils_string_array_fini>
 8018164:	3800      	subs	r0, #0
 8018166:	bf18      	it	ne
 8018168:	2001      	movne	r0, #1
 801816a:	bd38      	pop	{r3, r4, r5, pc}
 801816c:	200b      	movs	r0, #11
 801816e:	bd38      	pop	{r3, r4, r5, pc}
 8018170:	200b      	movs	r0, #11
 8018172:	4770      	bx	lr

08018174 <rmw_get_default_subscription_options>:
 8018174:	2200      	movs	r2, #0
 8018176:	e9c0 2200 	strd	r2, r2, [r0]
 801817a:	6082      	str	r2, [r0, #8]
 801817c:	4770      	bx	lr
 801817e:	bf00      	nop

08018180 <rmw_time_equal>:
 8018180:	b4f0      	push	{r4, r5, r6, r7}
 8018182:	b084      	sub	sp, #16
 8018184:	ac04      	add	r4, sp, #16
 8018186:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 801818a:	4603      	mov	r3, r0
 801818c:	4924      	ldr	r1, [pc, #144]	@ (8018220 <rmw_time_equal+0xa0>)
 801818e:	9e03      	ldr	r6, [sp, #12]
 8018190:	e9dd 5001 	ldrd	r5, r0, [sp, #4]
 8018194:	2202      	movs	r2, #2
 8018196:	4299      	cmp	r1, r3
 8018198:	41aa      	sbcs	r2, r5
 801819a:	d330      	bcc.n	80181fe <rmw_time_equal+0x7e>
 801819c:	4c21      	ldr	r4, [pc, #132]	@ (8018224 <rmw_time_equal+0xa4>)
 801819e:	fba3 3204 	umull	r3, r2, r3, r4
 80181a2:	fb04 2205 	mla	r2, r4, r5, r2
 80181a6:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80181aa:	43dd      	mvns	r5, r3
 80181ac:	1a8c      	subs	r4, r1, r2
 80181ae:	4285      	cmp	r5, r0
 80181b0:	41b4      	sbcs	r4, r6
 80181b2:	d332      	bcc.n	801821a <rmw_time_equal+0x9a>
 80181b4:	eb10 0c03 	adds.w	ip, r0, r3
 80181b8:	eb42 0106 	adc.w	r1, r2, r6
 80181bc:	e9dd 3608 	ldrd	r3, r6, [sp, #32]
 80181c0:	4817      	ldr	r0, [pc, #92]	@ (8018220 <rmw_time_equal+0xa0>)
 80181c2:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 80181c4:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80181c6:	2202      	movs	r2, #2
 80181c8:	4298      	cmp	r0, r3
 80181ca:	41b2      	sbcs	r2, r6
 80181cc:	d31c      	bcc.n	8018208 <rmw_time_equal+0x88>
 80181ce:	4c15      	ldr	r4, [pc, #84]	@ (8018224 <rmw_time_equal+0xa4>)
 80181d0:	fba3 3204 	umull	r3, r2, r3, r4
 80181d4:	fb04 2206 	mla	r2, r4, r6, r2
 80181d8:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 80181dc:	43de      	mvns	r6, r3
 80181de:	1a84      	subs	r4, r0, r2
 80181e0:	42ae      	cmp	r6, r5
 80181e2:	41bc      	sbcs	r4, r7
 80181e4:	d315      	bcc.n	8018212 <rmw_time_equal+0x92>
 80181e6:	195b      	adds	r3, r3, r5
 80181e8:	eb42 0207 	adc.w	r2, r2, r7
 80181ec:	428a      	cmp	r2, r1
 80181ee:	bf08      	it	eq
 80181f0:	4563      	cmpeq	r3, ip
 80181f2:	bf0c      	ite	eq
 80181f4:	2001      	moveq	r0, #1
 80181f6:	2000      	movne	r0, #0
 80181f8:	b004      	add	sp, #16
 80181fa:	bcf0      	pop	{r4, r5, r6, r7}
 80181fc:	4770      	bx	lr
 80181fe:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8018202:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8018206:	e7d9      	b.n	80181bc <rmw_time_equal+0x3c>
 8018208:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801820c:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8018210:	e7ec      	b.n	80181ec <rmw_time_equal+0x6c>
 8018212:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8018216:	4602      	mov	r2, r0
 8018218:	e7e8      	b.n	80181ec <rmw_time_equal+0x6c>
 801821a:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 801821e:	e7cd      	b.n	80181bc <rmw_time_equal+0x3c>
 8018220:	25c17d04 	.word	0x25c17d04
 8018224:	3b9aca00 	.word	0x3b9aca00

08018228 <rmw_time_total_nsec>:
 8018228:	b470      	push	{r4, r5, r6}
 801822a:	b085      	sub	sp, #20
 801822c:	ac04      	add	r4, sp, #16
 801822e:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 8018232:	4603      	mov	r3, r0
 8018234:	4912      	ldr	r1, [pc, #72]	@ (8018280 <rmw_time_total_nsec+0x58>)
 8018236:	9e03      	ldr	r6, [sp, #12]
 8018238:	e9dd 5001 	ldrd	r5, r0, [sp, #4]
 801823c:	2202      	movs	r2, #2
 801823e:	4299      	cmp	r1, r3
 8018240:	41aa      	sbcs	r2, r5
 8018242:	d311      	bcc.n	8018268 <rmw_time_total_nsec+0x40>
 8018244:	4c0f      	ldr	r4, [pc, #60]	@ (8018284 <rmw_time_total_nsec+0x5c>)
 8018246:	fba3 3204 	umull	r3, r2, r3, r4
 801824a:	fb04 2205 	mla	r2, r4, r5, r2
 801824e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8018252:	43dd      	mvns	r5, r3
 8018254:	1a8c      	subs	r4, r1, r2
 8018256:	4285      	cmp	r5, r0
 8018258:	41b4      	sbcs	r4, r6
 801825a:	d30c      	bcc.n	8018276 <rmw_time_total_nsec+0x4e>
 801825c:	1818      	adds	r0, r3, r0
 801825e:	eb42 0106 	adc.w	r1, r2, r6
 8018262:	b005      	add	sp, #20
 8018264:	bc70      	pop	{r4, r5, r6}
 8018266:	4770      	bx	lr
 8018268:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801826c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8018270:	b005      	add	sp, #20
 8018272:	bc70      	pop	{r4, r5, r6}
 8018274:	4770      	bx	lr
 8018276:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801827a:	b005      	add	sp, #20
 801827c:	bc70      	pop	{r4, r5, r6}
 801827e:	4770      	bx	lr
 8018280:	25c17d04 	.word	0x25c17d04
 8018284:	3b9aca00 	.word	0x3b9aca00

08018288 <rmw_get_zero_initialized_message_info>:
 8018288:	b510      	push	{r4, lr}
 801828a:	2240      	movs	r2, #64	@ 0x40
 801828c:	4604      	mov	r4, r0
 801828e:	2100      	movs	r1, #0
 8018290:	f003 f864 	bl	801b35c <memset>
 8018294:	4620      	mov	r0, r4
 8018296:	bd10      	pop	{r4, pc}

08018298 <rmw_validate_full_topic_name>:
 8018298:	2800      	cmp	r0, #0
 801829a:	d057      	beq.n	801834c <rmw_validate_full_topic_name+0xb4>
 801829c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80182a0:	460d      	mov	r5, r1
 80182a2:	2900      	cmp	r1, #0
 80182a4:	d054      	beq.n	8018350 <rmw_validate_full_topic_name+0xb8>
 80182a6:	4616      	mov	r6, r2
 80182a8:	4604      	mov	r4, r0
 80182aa:	f7e7 ffc3 	bl	8000234 <strlen>
 80182ae:	b148      	cbz	r0, 80182c4 <rmw_validate_full_topic_name+0x2c>
 80182b0:	7823      	ldrb	r3, [r4, #0]
 80182b2:	2b2f      	cmp	r3, #47	@ 0x2f
 80182b4:	d00d      	beq.n	80182d2 <rmw_validate_full_topic_name+0x3a>
 80182b6:	2302      	movs	r3, #2
 80182b8:	602b      	str	r3, [r5, #0]
 80182ba:	b13e      	cbz	r6, 80182cc <rmw_validate_full_topic_name+0x34>
 80182bc:	2000      	movs	r0, #0
 80182be:	6030      	str	r0, [r6, #0]
 80182c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80182c4:	2301      	movs	r3, #1
 80182c6:	602b      	str	r3, [r5, #0]
 80182c8:	2e00      	cmp	r6, #0
 80182ca:	d1f7      	bne.n	80182bc <rmw_validate_full_topic_name+0x24>
 80182cc:	2000      	movs	r0, #0
 80182ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80182d2:	1e43      	subs	r3, r0, #1
 80182d4:	5ce2      	ldrb	r2, [r4, r3]
 80182d6:	2a2f      	cmp	r2, #47	@ 0x2f
 80182d8:	d03c      	beq.n	8018354 <rmw_validate_full_topic_name+0xbc>
 80182da:	1e63      	subs	r3, r4, #1
 80182dc:	eb03 0800 	add.w	r8, r3, r0
 80182e0:	f1c4 0e01 	rsb	lr, r4, #1
 80182e4:	eb0e 0703 	add.w	r7, lr, r3
 80182e8:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 80182ec:	f021 0220 	bic.w	r2, r1, #32
 80182f0:	3a41      	subs	r2, #65	@ 0x41
 80182f2:	2a19      	cmp	r2, #25
 80182f4:	f1a1 0c2f 	sub.w	ip, r1, #47	@ 0x2f
 80182f8:	d90b      	bls.n	8018312 <rmw_validate_full_topic_name+0x7a>
 80182fa:	295f      	cmp	r1, #95	@ 0x5f
 80182fc:	d009      	beq.n	8018312 <rmw_validate_full_topic_name+0x7a>
 80182fe:	f1bc 0f0a 	cmp.w	ip, #10
 8018302:	d906      	bls.n	8018312 <rmw_validate_full_topic_name+0x7a>
 8018304:	2304      	movs	r3, #4
 8018306:	602b      	str	r3, [r5, #0]
 8018308:	2e00      	cmp	r6, #0
 801830a:	d0df      	beq.n	80182cc <rmw_validate_full_topic_name+0x34>
 801830c:	6037      	str	r7, [r6, #0]
 801830e:	2000      	movs	r0, #0
 8018310:	e7d6      	b.n	80182c0 <rmw_validate_full_topic_name+0x28>
 8018312:	4543      	cmp	r3, r8
 8018314:	d1e6      	bne.n	80182e4 <rmw_validate_full_topic_name+0x4c>
 8018316:	4f1a      	ldr	r7, [pc, #104]	@ (8018380 <rmw_validate_full_topic_name+0xe8>)
 8018318:	2301      	movs	r3, #1
 801831a:	e004      	b.n	8018326 <rmw_validate_full_topic_name+0x8e>
 801831c:	4298      	cmp	r0, r3
 801831e:	f104 0401 	add.w	r4, r4, #1
 8018322:	d91c      	bls.n	801835e <rmw_validate_full_topic_name+0xc6>
 8018324:	4613      	mov	r3, r2
 8018326:	4298      	cmp	r0, r3
 8018328:	f103 0201 	add.w	r2, r3, #1
 801832c:	d0f6      	beq.n	801831c <rmw_validate_full_topic_name+0x84>
 801832e:	7821      	ldrb	r1, [r4, #0]
 8018330:	292f      	cmp	r1, #47	@ 0x2f
 8018332:	d1f3      	bne.n	801831c <rmw_validate_full_topic_name+0x84>
 8018334:	7861      	ldrb	r1, [r4, #1]
 8018336:	292f      	cmp	r1, #47	@ 0x2f
 8018338:	d01c      	beq.n	8018374 <rmw_validate_full_topic_name+0xdc>
 801833a:	5dc9      	ldrb	r1, [r1, r7]
 801833c:	0749      	lsls	r1, r1, #29
 801833e:	d5ed      	bpl.n	801831c <rmw_validate_full_topic_name+0x84>
 8018340:	2206      	movs	r2, #6
 8018342:	602a      	str	r2, [r5, #0]
 8018344:	2e00      	cmp	r6, #0
 8018346:	d0c1      	beq.n	80182cc <rmw_validate_full_topic_name+0x34>
 8018348:	6033      	str	r3, [r6, #0]
 801834a:	e7bf      	b.n	80182cc <rmw_validate_full_topic_name+0x34>
 801834c:	200b      	movs	r0, #11
 801834e:	4770      	bx	lr
 8018350:	200b      	movs	r0, #11
 8018352:	e7b5      	b.n	80182c0 <rmw_validate_full_topic_name+0x28>
 8018354:	2203      	movs	r2, #3
 8018356:	602a      	str	r2, [r5, #0]
 8018358:	2e00      	cmp	r6, #0
 801835a:	d1f5      	bne.n	8018348 <rmw_validate_full_topic_name+0xb0>
 801835c:	e7b6      	b.n	80182cc <rmw_validate_full_topic_name+0x34>
 801835e:	28f7      	cmp	r0, #247	@ 0xf7
 8018360:	d802      	bhi.n	8018368 <rmw_validate_full_topic_name+0xd0>
 8018362:	2000      	movs	r0, #0
 8018364:	6028      	str	r0, [r5, #0]
 8018366:	e7ab      	b.n	80182c0 <rmw_validate_full_topic_name+0x28>
 8018368:	2307      	movs	r3, #7
 801836a:	602b      	str	r3, [r5, #0]
 801836c:	2e00      	cmp	r6, #0
 801836e:	d0ad      	beq.n	80182cc <rmw_validate_full_topic_name+0x34>
 8018370:	23f6      	movs	r3, #246	@ 0xf6
 8018372:	e7e9      	b.n	8018348 <rmw_validate_full_topic_name+0xb0>
 8018374:	2205      	movs	r2, #5
 8018376:	602a      	str	r2, [r5, #0]
 8018378:	2e00      	cmp	r6, #0
 801837a:	d1e5      	bne.n	8018348 <rmw_validate_full_topic_name+0xb0>
 801837c:	e7a6      	b.n	80182cc <rmw_validate_full_topic_name+0x34>
 801837e:	bf00      	nop
 8018380:	0801ebc3 	.word	0x0801ebc3

08018384 <rmw_validate_namespace_with_size>:
 8018384:	b340      	cbz	r0, 80183d8 <rmw_validate_namespace_with_size+0x54>
 8018386:	b570      	push	{r4, r5, r6, lr}
 8018388:	4614      	mov	r4, r2
 801838a:	b0c2      	sub	sp, #264	@ 0x108
 801838c:	b332      	cbz	r2, 80183dc <rmw_validate_namespace_with_size+0x58>
 801838e:	2901      	cmp	r1, #1
 8018390:	460d      	mov	r5, r1
 8018392:	461e      	mov	r6, r3
 8018394:	d102      	bne.n	801839c <rmw_validate_namespace_with_size+0x18>
 8018396:	7803      	ldrb	r3, [r0, #0]
 8018398:	2b2f      	cmp	r3, #47	@ 0x2f
 801839a:	d012      	beq.n	80183c2 <rmw_validate_namespace_with_size+0x3e>
 801839c:	aa01      	add	r2, sp, #4
 801839e:	4669      	mov	r1, sp
 80183a0:	f7ff ff7a 	bl	8018298 <rmw_validate_full_topic_name>
 80183a4:	b978      	cbnz	r0, 80183c6 <rmw_validate_namespace_with_size+0x42>
 80183a6:	9b00      	ldr	r3, [sp, #0]
 80183a8:	b14b      	cbz	r3, 80183be <rmw_validate_namespace_with_size+0x3a>
 80183aa:	2b07      	cmp	r3, #7
 80183ac:	d007      	beq.n	80183be <rmw_validate_namespace_with_size+0x3a>
 80183ae:	1e5a      	subs	r2, r3, #1
 80183b0:	2a05      	cmp	r2, #5
 80183b2:	d82b      	bhi.n	801840c <rmw_validate_namespace_with_size+0x88>
 80183b4:	e8df f002 	tbb	[pc, r2]
 80183b8:	1e212427 	.word	0x1e212427
 80183bc:	141b      	.short	0x141b
 80183be:	2df5      	cmp	r5, #245	@ 0xf5
 80183c0:	d803      	bhi.n	80183ca <rmw_validate_namespace_with_size+0x46>
 80183c2:	2000      	movs	r0, #0
 80183c4:	6020      	str	r0, [r4, #0]
 80183c6:	b042      	add	sp, #264	@ 0x108
 80183c8:	bd70      	pop	{r4, r5, r6, pc}
 80183ca:	2307      	movs	r3, #7
 80183cc:	6023      	str	r3, [r4, #0]
 80183ce:	2e00      	cmp	r6, #0
 80183d0:	d0f9      	beq.n	80183c6 <rmw_validate_namespace_with_size+0x42>
 80183d2:	23f4      	movs	r3, #244	@ 0xf4
 80183d4:	6033      	str	r3, [r6, #0]
 80183d6:	e7f6      	b.n	80183c6 <rmw_validate_namespace_with_size+0x42>
 80183d8:	200b      	movs	r0, #11
 80183da:	4770      	bx	lr
 80183dc:	200b      	movs	r0, #11
 80183de:	e7f2      	b.n	80183c6 <rmw_validate_namespace_with_size+0x42>
 80183e0:	2306      	movs	r3, #6
 80183e2:	6023      	str	r3, [r4, #0]
 80183e4:	2e00      	cmp	r6, #0
 80183e6:	d0ee      	beq.n	80183c6 <rmw_validate_namespace_with_size+0x42>
 80183e8:	9b01      	ldr	r3, [sp, #4]
 80183ea:	6033      	str	r3, [r6, #0]
 80183ec:	e7eb      	b.n	80183c6 <rmw_validate_namespace_with_size+0x42>
 80183ee:	2305      	movs	r3, #5
 80183f0:	6023      	str	r3, [r4, #0]
 80183f2:	e7f7      	b.n	80183e4 <rmw_validate_namespace_with_size+0x60>
 80183f4:	2304      	movs	r3, #4
 80183f6:	6023      	str	r3, [r4, #0]
 80183f8:	e7f4      	b.n	80183e4 <rmw_validate_namespace_with_size+0x60>
 80183fa:	2303      	movs	r3, #3
 80183fc:	6023      	str	r3, [r4, #0]
 80183fe:	e7f1      	b.n	80183e4 <rmw_validate_namespace_with_size+0x60>
 8018400:	2302      	movs	r3, #2
 8018402:	6023      	str	r3, [r4, #0]
 8018404:	e7ee      	b.n	80183e4 <rmw_validate_namespace_with_size+0x60>
 8018406:	2301      	movs	r3, #1
 8018408:	6023      	str	r3, [r4, #0]
 801840a:	e7eb      	b.n	80183e4 <rmw_validate_namespace_with_size+0x60>
 801840c:	4a03      	ldr	r2, [pc, #12]	@ (801841c <rmw_validate_namespace_with_size+0x98>)
 801840e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8018412:	a802      	add	r0, sp, #8
 8018414:	f7ff fcee 	bl	8017df4 <rcutils_snprintf>
 8018418:	2001      	movs	r0, #1
 801841a:	e7d4      	b.n	80183c6 <rmw_validate_namespace_with_size+0x42>
 801841c:	0801e0a0 	.word	0x0801e0a0

08018420 <rmw_validate_namespace>:
 8018420:	b168      	cbz	r0, 801843e <rmw_validate_namespace+0x1e>
 8018422:	b570      	push	{r4, r5, r6, lr}
 8018424:	460d      	mov	r5, r1
 8018426:	4616      	mov	r6, r2
 8018428:	4604      	mov	r4, r0
 801842a:	f7e7 ff03 	bl	8000234 <strlen>
 801842e:	4633      	mov	r3, r6
 8018430:	4601      	mov	r1, r0
 8018432:	462a      	mov	r2, r5
 8018434:	4620      	mov	r0, r4
 8018436:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801843a:	f7ff bfa3 	b.w	8018384 <rmw_validate_namespace_with_size>
 801843e:	200b      	movs	r0, #11
 8018440:	4770      	bx	lr
 8018442:	bf00      	nop

08018444 <rmw_namespace_validation_result_string>:
 8018444:	2807      	cmp	r0, #7
 8018446:	bf9a      	itte	ls
 8018448:	4b02      	ldrls	r3, [pc, #8]	@ (8018454 <rmw_namespace_validation_result_string+0x10>)
 801844a:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 801844e:	4802      	ldrhi	r0, [pc, #8]	@ (8018458 <rmw_namespace_validation_result_string+0x14>)
 8018450:	4770      	bx	lr
 8018452:	bf00      	nop
 8018454:	0801ea88 	.word	0x0801ea88
 8018458:	0801e0f0 	.word	0x0801e0f0

0801845c <rmw_validate_node_name>:
 801845c:	2800      	cmp	r0, #0
 801845e:	d03b      	beq.n	80184d8 <rmw_validate_node_name+0x7c>
 8018460:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018464:	460d      	mov	r5, r1
 8018466:	2900      	cmp	r1, #0
 8018468:	d038      	beq.n	80184dc <rmw_validate_node_name+0x80>
 801846a:	4616      	mov	r6, r2
 801846c:	4604      	mov	r4, r0
 801846e:	f7e7 fee1 	bl	8000234 <strlen>
 8018472:	b1e0      	cbz	r0, 80184ae <rmw_validate_node_name+0x52>
 8018474:	1e63      	subs	r3, r4, #1
 8018476:	eb03 0800 	add.w	r8, r3, r0
 801847a:	f1c4 0101 	rsb	r1, r4, #1
 801847e:	18cf      	adds	r7, r1, r3
 8018480:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 8018484:	f1ae 0230 	sub.w	r2, lr, #48	@ 0x30
 8018488:	f02e 0c20 	bic.w	ip, lr, #32
 801848c:	2a09      	cmp	r2, #9
 801848e:	f1ac 0c41 	sub.w	ip, ip, #65	@ 0x41
 8018492:	d914      	bls.n	80184be <rmw_validate_node_name+0x62>
 8018494:	f1bc 0f19 	cmp.w	ip, #25
 8018498:	d911      	bls.n	80184be <rmw_validate_node_name+0x62>
 801849a:	f1be 0f5f 	cmp.w	lr, #95	@ 0x5f
 801849e:	d00e      	beq.n	80184be <rmw_validate_node_name+0x62>
 80184a0:	2302      	movs	r3, #2
 80184a2:	602b      	str	r3, [r5, #0]
 80184a4:	b106      	cbz	r6, 80184a8 <rmw_validate_node_name+0x4c>
 80184a6:	6037      	str	r7, [r6, #0]
 80184a8:	2000      	movs	r0, #0
 80184aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80184ae:	2301      	movs	r3, #1
 80184b0:	602b      	str	r3, [r5, #0]
 80184b2:	2e00      	cmp	r6, #0
 80184b4:	d0f8      	beq.n	80184a8 <rmw_validate_node_name+0x4c>
 80184b6:	2000      	movs	r0, #0
 80184b8:	6030      	str	r0, [r6, #0]
 80184ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80184be:	4543      	cmp	r3, r8
 80184c0:	d1dd      	bne.n	801847e <rmw_validate_node_name+0x22>
 80184c2:	7822      	ldrb	r2, [r4, #0]
 80184c4:	4b0d      	ldr	r3, [pc, #52]	@ (80184fc <rmw_validate_node_name+0xa0>)
 80184c6:	5cd3      	ldrb	r3, [r2, r3]
 80184c8:	f013 0304 	ands.w	r3, r3, #4
 80184cc:	d110      	bne.n	80184f0 <rmw_validate_node_name+0x94>
 80184ce:	28ff      	cmp	r0, #255	@ 0xff
 80184d0:	d806      	bhi.n	80184e0 <rmw_validate_node_name+0x84>
 80184d2:	602b      	str	r3, [r5, #0]
 80184d4:	4618      	mov	r0, r3
 80184d6:	e7e8      	b.n	80184aa <rmw_validate_node_name+0x4e>
 80184d8:	200b      	movs	r0, #11
 80184da:	4770      	bx	lr
 80184dc:	200b      	movs	r0, #11
 80184de:	e7e4      	b.n	80184aa <rmw_validate_node_name+0x4e>
 80184e0:	2204      	movs	r2, #4
 80184e2:	602a      	str	r2, [r5, #0]
 80184e4:	2e00      	cmp	r6, #0
 80184e6:	d0df      	beq.n	80184a8 <rmw_validate_node_name+0x4c>
 80184e8:	22fe      	movs	r2, #254	@ 0xfe
 80184ea:	6032      	str	r2, [r6, #0]
 80184ec:	4618      	mov	r0, r3
 80184ee:	e7dc      	b.n	80184aa <rmw_validate_node_name+0x4e>
 80184f0:	2303      	movs	r3, #3
 80184f2:	602b      	str	r3, [r5, #0]
 80184f4:	2e00      	cmp	r6, #0
 80184f6:	d1de      	bne.n	80184b6 <rmw_validate_node_name+0x5a>
 80184f8:	e7d6      	b.n	80184a8 <rmw_validate_node_name+0x4c>
 80184fa:	bf00      	nop
 80184fc:	0801ebc3 	.word	0x0801ebc3

08018500 <rmw_node_name_validation_result_string>:
 8018500:	2804      	cmp	r0, #4
 8018502:	bf9a      	itte	ls
 8018504:	4b02      	ldrls	r3, [pc, #8]	@ (8018510 <rmw_node_name_validation_result_string+0x10>)
 8018506:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 801850a:	4802      	ldrhi	r0, [pc, #8]	@ (8018514 <rmw_node_name_validation_result_string+0x14>)
 801850c:	4770      	bx	lr
 801850e:	bf00      	nop
 8018510:	0801eaa8 	.word	0x0801eaa8
 8018514:	0801e298 	.word	0x0801e298

08018518 <on_status>:
 8018518:	b082      	sub	sp, #8
 801851a:	b002      	add	sp, #8
 801851c:	4770      	bx	lr
 801851e:	bf00      	nop

08018520 <on_topic>:
 8018520:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018524:	4a22      	ldr	r2, [pc, #136]	@ (80185b0 <on_topic+0x90>)
 8018526:	b094      	sub	sp, #80	@ 0x50
 8018528:	6812      	ldr	r2, [r2, #0]
 801852a:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 801852c:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 8018530:	e9cd 3112 	strd	r3, r1, [sp, #72]	@ 0x48
 8018534:	b3c2      	cbz	r2, 80185a8 <on_topic+0x88>
 8018536:	f8bd 104c 	ldrh.w	r1, [sp, #76]	@ 0x4c
 801853a:	f89d 004e 	ldrb.w	r0, [sp, #78]	@ 0x4e
 801853e:	e001      	b.n	8018544 <on_topic+0x24>
 8018540:	6852      	ldr	r2, [r2, #4]
 8018542:	b38a      	cbz	r2, 80185a8 <on_topic+0x88>
 8018544:	6894      	ldr	r4, [r2, #8]
 8018546:	8aa3      	ldrh	r3, [r4, #20]
 8018548:	428b      	cmp	r3, r1
 801854a:	d1f9      	bne.n	8018540 <on_topic+0x20>
 801854c:	7da3      	ldrb	r3, [r4, #22]
 801854e:	4283      	cmp	r3, r0
 8018550:	d1f6      	bne.n	8018540 <on_topic+0x20>
 8018552:	2248      	movs	r2, #72	@ 0x48
 8018554:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8018558:	4668      	mov	r0, sp
 801855a:	f002 ffc8 	bl	801b4ee <memcpy>
 801855e:	f104 0328 	add.w	r3, r4, #40	@ 0x28
 8018562:	cb0c      	ldmia	r3, {r2, r3}
 8018564:	4620      	mov	r0, r4
 8018566:	f7f8 fbb3 	bl	8010cd0 <rmw_uxrce_get_static_input_buffer_for_entity>
 801856a:	4607      	mov	r7, r0
 801856c:	b1e0      	cbz	r0, 80185a8 <on_topic+0x88>
 801856e:	f8d0 8008 	ldr.w	r8, [r0, #8]
 8018572:	4632      	mov	r2, r6
 8018574:	4628      	mov	r0, r5
 8018576:	f108 0110 	add.w	r1, r8, #16
 801857a:	f000 ff3b 	bl	80193f4 <ucdr_deserialize_array_uint8_t>
 801857e:	b930      	cbnz	r0, 801858e <on_topic+0x6e>
 8018580:	480c      	ldr	r0, [pc, #48]	@ (80185b4 <on_topic+0x94>)
 8018582:	4639      	mov	r1, r7
 8018584:	b014      	add	sp, #80	@ 0x50
 8018586:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801858a:	f000 b8bd 	b.w	8018708 <put_memory>
 801858e:	f8c8 4814 	str.w	r4, [r8, #2068]	@ 0x814
 8018592:	f8c8 6810 	str.w	r6, [r8, #2064]	@ 0x810
 8018596:	f7f8 f999 	bl	80108cc <rmw_uros_epoch_nanos>
 801859a:	f508 6202 	add.w	r2, r8, #2080	@ 0x820
 801859e:	2305      	movs	r3, #5
 80185a0:	e942 0102 	strd	r0, r1, [r2, #-8]
 80185a4:	f888 3820 	strb.w	r3, [r8, #2080]	@ 0x820
 80185a8:	b014      	add	sp, #80	@ 0x50
 80185aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80185ae:	bf00      	nop
 80185b0:	2000b534 	.word	0x2000b534
 80185b4:	2000b524 	.word	0x2000b524

080185b8 <on_request>:
 80185b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80185bc:	4823      	ldr	r0, [pc, #140]	@ (801864c <on_request+0x94>)
 80185be:	b094      	sub	sp, #80	@ 0x50
 80185c0:	6800      	ldr	r0, [r0, #0]
 80185c2:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 80185c4:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 80185c8:	9113      	str	r1, [sp, #76]	@ 0x4c
 80185ca:	2800      	cmp	r0, #0
 80185cc:	d03b      	beq.n	8018646 <on_request+0x8e>
 80185ce:	461d      	mov	r5, r3
 80185d0:	e001      	b.n	80185d6 <on_request+0x1e>
 80185d2:	6840      	ldr	r0, [r0, #4]
 80185d4:	b3b8      	cbz	r0, 8018646 <on_request+0x8e>
 80185d6:	6884      	ldr	r4, [r0, #8]
 80185d8:	8b21      	ldrh	r1, [r4, #24]
 80185da:	4291      	cmp	r1, r2
 80185dc:	d1f9      	bne.n	80185d2 <on_request+0x1a>
 80185de:	2248      	movs	r2, #72	@ 0x48
 80185e0:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 80185e4:	4668      	mov	r0, sp
 80185e6:	f002 ff82 	bl	801b4ee <memcpy>
 80185ea:	f104 0320 	add.w	r3, r4, #32
 80185ee:	cb0c      	ldmia	r3, {r2, r3}
 80185f0:	4620      	mov	r0, r4
 80185f2:	f7f8 fb6d 	bl	8010cd0 <rmw_uxrce_get_static_input_buffer_for_entity>
 80185f6:	4680      	mov	r8, r0
 80185f8:	b328      	cbz	r0, 8018646 <on_request+0x8e>
 80185fa:	4638      	mov	r0, r7
 80185fc:	f8d8 7008 	ldr.w	r7, [r8, #8]
 8018600:	4632      	mov	r2, r6
 8018602:	f107 0110 	add.w	r1, r7, #16
 8018606:	f000 fef5 	bl	80193f4 <ucdr_deserialize_array_uint8_t>
 801860a:	b930      	cbnz	r0, 801861a <on_request+0x62>
 801860c:	4810      	ldr	r0, [pc, #64]	@ (8018650 <on_request+0x98>)
 801860e:	4641      	mov	r1, r8
 8018610:	b014      	add	sp, #80	@ 0x50
 8018612:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018616:	f000 b877 	b.w	8018708 <put_memory>
 801861a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801861c:	f607 0c28 	addw	ip, r7, #2088	@ 0x828
 8018620:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 8018624:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 8018628:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801862c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8018630:	e88c 0003 	stmia.w	ip, {r0, r1}
 8018634:	f7f8 f94a 	bl	80108cc <rmw_uros_epoch_nanos>
 8018638:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 801863c:	2303      	movs	r3, #3
 801863e:	e942 0102 	strd	r0, r1, [r2, #-8]
 8018642:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 8018646:	b014      	add	sp, #80	@ 0x50
 8018648:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801864c:	2000b504 	.word	0x2000b504
 8018650:	2000b524 	.word	0x2000b524

08018654 <on_reply>:
 8018654:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018658:	4821      	ldr	r0, [pc, #132]	@ (80186e0 <on_reply+0x8c>)
 801865a:	b094      	sub	sp, #80	@ 0x50
 801865c:	6800      	ldr	r0, [r0, #0]
 801865e:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 8018660:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 8018664:	9113      	str	r1, [sp, #76]	@ 0x4c
 8018666:	b3b8      	cbz	r0, 80186d8 <on_reply+0x84>
 8018668:	461d      	mov	r5, r3
 801866a:	e001      	b.n	8018670 <on_reply+0x1c>
 801866c:	6840      	ldr	r0, [r0, #4]
 801866e:	b398      	cbz	r0, 80186d8 <on_reply+0x84>
 8018670:	6884      	ldr	r4, [r0, #8]
 8018672:	8b21      	ldrh	r1, [r4, #24]
 8018674:	4291      	cmp	r1, r2
 8018676:	d1f9      	bne.n	801866c <on_reply+0x18>
 8018678:	2248      	movs	r2, #72	@ 0x48
 801867a:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 801867e:	4668      	mov	r0, sp
 8018680:	f002 ff35 	bl	801b4ee <memcpy>
 8018684:	f104 0320 	add.w	r3, r4, #32
 8018688:	cb0c      	ldmia	r3, {r2, r3}
 801868a:	4620      	mov	r0, r4
 801868c:	f7f8 fb20 	bl	8010cd0 <rmw_uxrce_get_static_input_buffer_for_entity>
 8018690:	4680      	mov	r8, r0
 8018692:	b308      	cbz	r0, 80186d8 <on_reply+0x84>
 8018694:	4638      	mov	r0, r7
 8018696:	f8d8 7008 	ldr.w	r7, [r8, #8]
 801869a:	4632      	mov	r2, r6
 801869c:	f107 0110 	add.w	r1, r7, #16
 80186a0:	f000 fea8 	bl	80193f4 <ucdr_deserialize_array_uint8_t>
 80186a4:	b930      	cbnz	r0, 80186b4 <on_reply+0x60>
 80186a6:	480f      	ldr	r0, [pc, #60]	@ (80186e4 <on_reply+0x90>)
 80186a8:	4641      	mov	r1, r8
 80186aa:	b014      	add	sp, #80	@ 0x50
 80186ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80186b0:	f000 b82a 	b.w	8018708 <put_memory>
 80186b4:	2200      	movs	r2, #0
 80186b6:	f8c7 282c 	str.w	r2, [r7, #2092]	@ 0x82c
 80186ba:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 80186be:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 80186c2:	f8c7 5828 	str.w	r5, [r7, #2088]	@ 0x828
 80186c6:	f7f8 f901 	bl	80108cc <rmw_uros_epoch_nanos>
 80186ca:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 80186ce:	2304      	movs	r3, #4
 80186d0:	e942 0102 	strd	r0, r1, [r2, #-8]
 80186d4:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 80186d8:	b014      	add	sp, #80	@ 0x50
 80186da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80186de:	bf00      	nop
 80186e0:	20006c14 	.word	0x20006c14
 80186e4:	2000b524 	.word	0x2000b524

080186e8 <get_memory>:
 80186e8:	4603      	mov	r3, r0
 80186ea:	6840      	ldr	r0, [r0, #4]
 80186ec:	b158      	cbz	r0, 8018706 <get_memory+0x1e>
 80186ee:	6842      	ldr	r2, [r0, #4]
 80186f0:	605a      	str	r2, [r3, #4]
 80186f2:	b10a      	cbz	r2, 80186f8 <get_memory+0x10>
 80186f4:	2100      	movs	r1, #0
 80186f6:	6011      	str	r1, [r2, #0]
 80186f8:	681a      	ldr	r2, [r3, #0]
 80186fa:	6042      	str	r2, [r0, #4]
 80186fc:	b102      	cbz	r2, 8018700 <get_memory+0x18>
 80186fe:	6010      	str	r0, [r2, #0]
 8018700:	2200      	movs	r2, #0
 8018702:	6002      	str	r2, [r0, #0]
 8018704:	6018      	str	r0, [r3, #0]
 8018706:	4770      	bx	lr

08018708 <put_memory>:
 8018708:	680b      	ldr	r3, [r1, #0]
 801870a:	b10b      	cbz	r3, 8018710 <put_memory+0x8>
 801870c:	684a      	ldr	r2, [r1, #4]
 801870e:	605a      	str	r2, [r3, #4]
 8018710:	684a      	ldr	r2, [r1, #4]
 8018712:	b102      	cbz	r2, 8018716 <put_memory+0xe>
 8018714:	6013      	str	r3, [r2, #0]
 8018716:	6803      	ldr	r3, [r0, #0]
 8018718:	428b      	cmp	r3, r1
 801871a:	6843      	ldr	r3, [r0, #4]
 801871c:	bf08      	it	eq
 801871e:	6002      	streq	r2, [r0, #0]
 8018720:	604b      	str	r3, [r1, #4]
 8018722:	b103      	cbz	r3, 8018726 <put_memory+0x1e>
 8018724:	6019      	str	r1, [r3, #0]
 8018726:	2300      	movs	r3, #0
 8018728:	600b      	str	r3, [r1, #0]
 801872a:	6041      	str	r1, [r0, #4]
 801872c:	4770      	bx	lr
 801872e:	bf00      	nop

08018730 <rmw_destroy_client>:
 8018730:	b570      	push	{r4, r5, r6, lr}
 8018732:	b128      	cbz	r0, 8018740 <rmw_destroy_client+0x10>
 8018734:	4604      	mov	r4, r0
 8018736:	6800      	ldr	r0, [r0, #0]
 8018738:	460d      	mov	r5, r1
 801873a:	f7f8 fc3f 	bl	8010fbc <is_uxrce_rmw_identifier_valid>
 801873e:	b910      	cbnz	r0, 8018746 <rmw_destroy_client+0x16>
 8018740:	2401      	movs	r4, #1
 8018742:	4620      	mov	r0, r4
 8018744:	bd70      	pop	{r4, r5, r6, pc}
 8018746:	6863      	ldr	r3, [r4, #4]
 8018748:	2b00      	cmp	r3, #0
 801874a:	d0f9      	beq.n	8018740 <rmw_destroy_client+0x10>
 801874c:	2d00      	cmp	r5, #0
 801874e:	d0f7      	beq.n	8018740 <rmw_destroy_client+0x10>
 8018750:	6828      	ldr	r0, [r5, #0]
 8018752:	f7f8 fc33 	bl	8010fbc <is_uxrce_rmw_identifier_valid>
 8018756:	2800      	cmp	r0, #0
 8018758:	d0f2      	beq.n	8018740 <rmw_destroy_client+0x10>
 801875a:	686e      	ldr	r6, [r5, #4]
 801875c:	2e00      	cmp	r6, #0
 801875e:	d0ef      	beq.n	8018740 <rmw_destroy_client+0x10>
 8018760:	6864      	ldr	r4, [r4, #4]
 8018762:	6932      	ldr	r2, [r6, #16]
 8018764:	6920      	ldr	r0, [r4, #16]
 8018766:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801876a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801876e:	6819      	ldr	r1, [r3, #0]
 8018770:	f7f9 fa3c 	bl	8011bec <uxr_buffer_cancel_data>
 8018774:	4602      	mov	r2, r0
 8018776:	6920      	ldr	r0, [r4, #16]
 8018778:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801877c:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8018780:	f7f8 fb9c 	bl	8010ebc <run_xrce_session>
 8018784:	6920      	ldr	r0, [r4, #16]
 8018786:	6932      	ldr	r2, [r6, #16]
 8018788:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801878c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8018790:	6819      	ldr	r1, [r3, #0]
 8018792:	f7f8 fefd 	bl	8011590 <uxr_buffer_delete_entity>
 8018796:	4602      	mov	r2, r0
 8018798:	6920      	ldr	r0, [r4, #16]
 801879a:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801879e:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80187a2:	f7f8 fb8b 	bl	8010ebc <run_xrce_session>
 80187a6:	2800      	cmp	r0, #0
 80187a8:	4628      	mov	r0, r5
 80187aa:	bf14      	ite	ne
 80187ac:	2400      	movne	r4, #0
 80187ae:	2402      	moveq	r4, #2
 80187b0:	f7f8 fa6c 	bl	8010c8c <rmw_uxrce_fini_client_memory>
 80187b4:	e7c5      	b.n	8018742 <rmw_destroy_client+0x12>
 80187b6:	bf00      	nop

080187b8 <rmw_get_implementation_identifier>:
 80187b8:	4b01      	ldr	r3, [pc, #4]	@ (80187c0 <rmw_get_implementation_identifier+0x8>)
 80187ba:	6818      	ldr	r0, [r3, #0]
 80187bc:	4770      	bx	lr
 80187be:	bf00      	nop
 80187c0:	0801eabc 	.word	0x0801eabc

080187c4 <create_topic>:
 80187c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80187c8:	4605      	mov	r5, r0
 80187ca:	b084      	sub	sp, #16
 80187cc:	4822      	ldr	r0, [pc, #136]	@ (8018858 <create_topic+0x94>)
 80187ce:	460f      	mov	r7, r1
 80187d0:	4616      	mov	r6, r2
 80187d2:	f7ff ff89 	bl	80186e8 <get_memory>
 80187d6:	4604      	mov	r4, r0
 80187d8:	2800      	cmp	r0, #0
 80187da:	d039      	beq.n	8018850 <create_topic+0x8c>
 80187dc:	692b      	ldr	r3, [r5, #16]
 80187de:	6884      	ldr	r4, [r0, #8]
 80187e0:	f8df 807c 	ldr.w	r8, [pc, #124]	@ 8018860 <create_topic+0x9c>
 80187e4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80187e8:	e9c4 6505 	strd	r6, r5, [r4, #20]
 80187ec:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	@ 0x596
 80187f0:	1c42      	adds	r2, r0, #1
 80187f2:	2102      	movs	r1, #2
 80187f4:	f8a3 2596 	strh.w	r2, [r3, #1430]	@ 0x596
 80187f8:	f7f9 f98e 	bl	8011b18 <uxr_object_id>
 80187fc:	223c      	movs	r2, #60	@ 0x3c
 80187fe:	6120      	str	r0, [r4, #16]
 8018800:	4641      	mov	r1, r8
 8018802:	4638      	mov	r0, r7
 8018804:	f7f8 fbc0 	bl	8010f88 <generate_topic_name>
 8018808:	b1f0      	cbz	r0, 8018848 <create_topic+0x84>
 801880a:	4f14      	ldr	r7, [pc, #80]	@ (801885c <create_topic+0x98>)
 801880c:	4630      	mov	r0, r6
 801880e:	2264      	movs	r2, #100	@ 0x64
 8018810:	4639      	mov	r1, r7
 8018812:	f7f8 fb89 	bl	8010f28 <generate_type_name>
 8018816:	b1b8      	cbz	r0, 8018848 <create_topic+0x84>
 8018818:	6928      	ldr	r0, [r5, #16]
 801881a:	2306      	movs	r3, #6
 801881c:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 8018820:	f8cd 8000 	str.w	r8, [sp]
 8018824:	e9cd 7301 	strd	r7, r3, [sp, #4]
 8018828:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801882c:	6811      	ldr	r1, [r2, #0]
 801882e:	696b      	ldr	r3, [r5, #20]
 8018830:	6922      	ldr	r2, [r4, #16]
 8018832:	f7f8 ff2b 	bl	801168c <uxr_buffer_create_topic_bin>
 8018836:	4602      	mov	r2, r0
 8018838:	6928      	ldr	r0, [r5, #16]
 801883a:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 801883e:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8018842:	f7f8 fb3b 	bl	8010ebc <run_xrce_session>
 8018846:	b918      	cbnz	r0, 8018850 <create_topic+0x8c>
 8018848:	4620      	mov	r0, r4
 801884a:	f7f8 fa35 	bl	8010cb8 <rmw_uxrce_fini_topic_memory>
 801884e:	2400      	movs	r4, #0
 8018850:	4620      	mov	r0, r4
 8018852:	b004      	add	sp, #16
 8018854:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018858:	2000b544 	.word	0x2000b544
 801885c:	2000b638 	.word	0x2000b638
 8018860:	2000b5fc 	.word	0x2000b5fc

08018864 <destroy_topic>:
 8018864:	b538      	push	{r3, r4, r5, lr}
 8018866:	6985      	ldr	r5, [r0, #24]
 8018868:	b1d5      	cbz	r5, 80188a0 <destroy_topic+0x3c>
 801886a:	4604      	mov	r4, r0
 801886c:	6928      	ldr	r0, [r5, #16]
 801886e:	6922      	ldr	r2, [r4, #16]
 8018870:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8018874:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8018878:	6819      	ldr	r1, [r3, #0]
 801887a:	f7f8 fe89 	bl	8011590 <uxr_buffer_delete_entity>
 801887e:	4602      	mov	r2, r0
 8018880:	6928      	ldr	r0, [r5, #16]
 8018882:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8018886:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801888a:	f7f8 fb17 	bl	8010ebc <run_xrce_session>
 801888e:	2800      	cmp	r0, #0
 8018890:	4620      	mov	r0, r4
 8018892:	bf14      	ite	ne
 8018894:	2400      	movne	r4, #0
 8018896:	2402      	moveq	r4, #2
 8018898:	f7f8 fa0e 	bl	8010cb8 <rmw_uxrce_fini_topic_memory>
 801889c:	4620      	mov	r0, r4
 801889e:	bd38      	pop	{r3, r4, r5, pc}
 80188a0:	2401      	movs	r4, #1
 80188a2:	4620      	mov	r0, r4
 80188a4:	bd38      	pop	{r3, r4, r5, pc}
 80188a6:	bf00      	nop

080188a8 <rmw_send_request>:
 80188a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80188ac:	4604      	mov	r4, r0
 80188ae:	6800      	ldr	r0, [r0, #0]
 80188b0:	b08b      	sub	sp, #44	@ 0x2c
 80188b2:	460e      	mov	r6, r1
 80188b4:	4615      	mov	r5, r2
 80188b6:	b128      	cbz	r0, 80188c4 <rmw_send_request+0x1c>
 80188b8:	4b21      	ldr	r3, [pc, #132]	@ (8018940 <rmw_send_request+0x98>)
 80188ba:	6819      	ldr	r1, [r3, #0]
 80188bc:	f7e7 fcb0 	bl	8000220 <strcmp>
 80188c0:	2800      	cmp	r0, #0
 80188c2:	d139      	bne.n	8018938 <rmw_send_request+0x90>
 80188c4:	6864      	ldr	r4, [r4, #4]
 80188c6:	6963      	ldr	r3, [r4, #20]
 80188c8:	f8d4 8078 	ldr.w	r8, [r4, #120]	@ 0x78
 80188cc:	689b      	ldr	r3, [r3, #8]
 80188ce:	4798      	blx	r3
 80188d0:	f8d0 9004 	ldr.w	r9, [r0, #4]
 80188d4:	4630      	mov	r0, r6
 80188d6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80188da:	4798      	blx	r3
 80188dc:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80188e0:	9000      	str	r0, [sp, #0]
 80188e2:	6922      	ldr	r2, [r4, #16]
 80188e4:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 80188e6:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 80188ea:	ab02      	add	r3, sp, #8
 80188ec:	f7fb fa26 	bl	8013d3c <uxr_prepare_output_stream>
 80188f0:	2700      	movs	r7, #0
 80188f2:	6028      	str	r0, [r5, #0]
 80188f4:	606f      	str	r7, [r5, #4]
 80188f6:	b198      	cbz	r0, 8018920 <rmw_send_request+0x78>
 80188f8:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80188fc:	a902      	add	r1, sp, #8
 80188fe:	4630      	mov	r0, r6
 8018900:	4798      	blx	r3
 8018902:	f894 3072 	ldrb.w	r3, [r4, #114]	@ 0x72
 8018906:	f8d8 0010 	ldr.w	r0, [r8, #16]
 801890a:	2b01      	cmp	r3, #1
 801890c:	d00c      	beq.n	8018928 <rmw_send_request+0x80>
 801890e:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 8018910:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8018914:	f7f9 ff40 	bl	8012798 <uxr_run_session_until_confirm_delivery>
 8018918:	4638      	mov	r0, r7
 801891a:	b00b      	add	sp, #44	@ 0x2c
 801891c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018920:	2001      	movs	r0, #1
 8018922:	b00b      	add	sp, #44	@ 0x2c
 8018924:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018928:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801892c:	f7f9 fb74 	bl	8012018 <uxr_flash_output_streams>
 8018930:	4638      	mov	r0, r7
 8018932:	b00b      	add	sp, #44	@ 0x2c
 8018934:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018938:	200c      	movs	r0, #12
 801893a:	b00b      	add	sp, #44	@ 0x2c
 801893c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018940:	0801eabc 	.word	0x0801eabc

08018944 <rmw_take_request>:
 8018944:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018948:	4605      	mov	r5, r0
 801894a:	6800      	ldr	r0, [r0, #0]
 801894c:	b089      	sub	sp, #36	@ 0x24
 801894e:	460c      	mov	r4, r1
 8018950:	4690      	mov	r8, r2
 8018952:	461e      	mov	r6, r3
 8018954:	b128      	cbz	r0, 8018962 <rmw_take_request+0x1e>
 8018956:	4b28      	ldr	r3, [pc, #160]	@ (80189f8 <rmw_take_request+0xb4>)
 8018958:	6819      	ldr	r1, [r3, #0]
 801895a:	f7e7 fc61 	bl	8000220 <strcmp>
 801895e:	2800      	cmp	r0, #0
 8018960:	d146      	bne.n	80189f0 <rmw_take_request+0xac>
 8018962:	b10e      	cbz	r6, 8018968 <rmw_take_request+0x24>
 8018964:	2300      	movs	r3, #0
 8018966:	7033      	strb	r3, [r6, #0]
 8018968:	f8d5 9004 	ldr.w	r9, [r5, #4]
 801896c:	f7f8 fa28 	bl	8010dc0 <rmw_uxrce_clean_expired_static_input_buffer>
 8018970:	4648      	mov	r0, r9
 8018972:	f7f8 f9fd 	bl	8010d70 <rmw_uxrce_find_static_input_buffer_by_owner>
 8018976:	4607      	mov	r7, r0
 8018978:	b3b0      	cbz	r0, 80189e8 <rmw_take_request+0xa4>
 801897a:	6885      	ldr	r5, [r0, #8]
 801897c:	f8d5 3838 	ldr.w	r3, [r5, #2104]	@ 0x838
 8018980:	f8d5 283c 	ldr.w	r2, [r5, #2108]	@ 0x83c
 8018984:	e9c4 2308 	strd	r2, r3, [r4, #32]
 8018988:	f895 3837 	ldrb.w	r3, [r5, #2103]	@ 0x837
 801898c:	7423      	strb	r3, [r4, #16]
 801898e:	f8b5 3834 	ldrh.w	r3, [r5, #2100]	@ 0x834
 8018992:	f895 2836 	ldrb.w	r2, [r5, #2102]	@ 0x836
 8018996:	74e2      	strb	r2, [r4, #19]
 8018998:	f8a4 3011 	strh.w	r3, [r4, #17]
 801899c:	f8d5 2828 	ldr.w	r2, [r5, #2088]	@ 0x828
 80189a0:	f8d5 382c 	ldr.w	r3, [r5, #2092]	@ 0x82c
 80189a4:	f8d5 1830 	ldr.w	r1, [r5, #2096]	@ 0x830
 80189a8:	61e1      	str	r1, [r4, #28]
 80189aa:	6162      	str	r2, [r4, #20]
 80189ac:	61a3      	str	r3, [r4, #24]
 80189ae:	f8d9 3014 	ldr.w	r3, [r9, #20]
 80189b2:	689b      	ldr	r3, [r3, #8]
 80189b4:	4798      	blx	r3
 80189b6:	6844      	ldr	r4, [r0, #4]
 80189b8:	f8d5 2810 	ldr.w	r2, [r5, #2064]	@ 0x810
 80189bc:	f105 0110 	add.w	r1, r5, #16
 80189c0:	4668      	mov	r0, sp
 80189c2:	f7f5 fdb5 	bl	800e530 <ucdr_init_buffer>
 80189c6:	68e3      	ldr	r3, [r4, #12]
 80189c8:	4641      	mov	r1, r8
 80189ca:	4668      	mov	r0, sp
 80189cc:	4798      	blx	r3
 80189ce:	4639      	mov	r1, r7
 80189d0:	4604      	mov	r4, r0
 80189d2:	480a      	ldr	r0, [pc, #40]	@ (80189fc <rmw_take_request+0xb8>)
 80189d4:	f7ff fe98 	bl	8018708 <put_memory>
 80189d8:	b106      	cbz	r6, 80189dc <rmw_take_request+0x98>
 80189da:	7034      	strb	r4, [r6, #0]
 80189dc:	f084 0001 	eor.w	r0, r4, #1
 80189e0:	b2c0      	uxtb	r0, r0
 80189e2:	b009      	add	sp, #36	@ 0x24
 80189e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80189e8:	2001      	movs	r0, #1
 80189ea:	b009      	add	sp, #36	@ 0x24
 80189ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80189f0:	200c      	movs	r0, #12
 80189f2:	b009      	add	sp, #36	@ 0x24
 80189f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80189f8:	0801eabc 	.word	0x0801eabc
 80189fc:	2000b524 	.word	0x2000b524

08018a00 <rmw_send_response>:
 8018a00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018a02:	4605      	mov	r5, r0
 8018a04:	6800      	ldr	r0, [r0, #0]
 8018a06:	b091      	sub	sp, #68	@ 0x44
 8018a08:	460c      	mov	r4, r1
 8018a0a:	4616      	mov	r6, r2
 8018a0c:	b128      	cbz	r0, 8018a1a <rmw_send_response+0x1a>
 8018a0e:	4b29      	ldr	r3, [pc, #164]	@ (8018ab4 <rmw_send_response+0xb4>)
 8018a10:	6819      	ldr	r1, [r3, #0]
 8018a12:	f7e7 fc05 	bl	8000220 <strcmp>
 8018a16:	2800      	cmp	r0, #0
 8018a18:	d141      	bne.n	8018a9e <rmw_send_response+0x9e>
 8018a1a:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 8018a1e:	9306      	str	r3, [sp, #24]
 8018a20:	4623      	mov	r3, r4
 8018a22:	9207      	str	r2, [sp, #28]
 8018a24:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018a28:	686d      	ldr	r5, [r5, #4]
 8018a2a:	789b      	ldrb	r3, [r3, #2]
 8018a2c:	68a1      	ldr	r1, [r4, #8]
 8018a2e:	f88d 2017 	strb.w	r2, [sp, #23]
 8018a32:	f88d 3016 	strb.w	r3, [sp, #22]
 8018a36:	68e2      	ldr	r2, [r4, #12]
 8018a38:	f8b4 3001 	ldrh.w	r3, [r4, #1]
 8018a3c:	6860      	ldr	r0, [r4, #4]
 8018a3e:	f8ad 3014 	strh.w	r3, [sp, #20]
 8018a42:	ab02      	add	r3, sp, #8
 8018a44:	c307      	stmia	r3!, {r0, r1, r2}
 8018a46:	696b      	ldr	r3, [r5, #20]
 8018a48:	6faf      	ldr	r7, [r5, #120]	@ 0x78
 8018a4a:	68db      	ldr	r3, [r3, #12]
 8018a4c:	4798      	blx	r3
 8018a4e:	6844      	ldr	r4, [r0, #4]
 8018a50:	4630      	mov	r0, r6
 8018a52:	6923      	ldr	r3, [r4, #16]
 8018a54:	4798      	blx	r3
 8018a56:	f100 0318 	add.w	r3, r0, #24
 8018a5a:	6938      	ldr	r0, [r7, #16]
 8018a5c:	9300      	str	r3, [sp, #0]
 8018a5e:	692a      	ldr	r2, [r5, #16]
 8018a60:	6f29      	ldr	r1, [r5, #112]	@ 0x70
 8018a62:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8018a66:	ab08      	add	r3, sp, #32
 8018a68:	f7fb f968 	bl	8013d3c <uxr_prepare_output_stream>
 8018a6c:	b910      	cbnz	r0, 8018a74 <rmw_send_response+0x74>
 8018a6e:	2001      	movs	r0, #1
 8018a70:	b011      	add	sp, #68	@ 0x44
 8018a72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018a74:	a902      	add	r1, sp, #8
 8018a76:	a808      	add	r0, sp, #32
 8018a78:	f7fc faa6 	bl	8014fc8 <uxr_serialize_SampleIdentity>
 8018a7c:	68a3      	ldr	r3, [r4, #8]
 8018a7e:	a908      	add	r1, sp, #32
 8018a80:	4630      	mov	r0, r6
 8018a82:	4798      	blx	r3
 8018a84:	f895 3072 	ldrb.w	r3, [r5, #114]	@ 0x72
 8018a88:	6938      	ldr	r0, [r7, #16]
 8018a8a:	2b01      	cmp	r3, #1
 8018a8c:	d00a      	beq.n	8018aa4 <rmw_send_response+0xa4>
 8018a8e:	6f69      	ldr	r1, [r5, #116]	@ 0x74
 8018a90:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8018a94:	f7f9 fe80 	bl	8012798 <uxr_run_session_until_confirm_delivery>
 8018a98:	2000      	movs	r0, #0
 8018a9a:	b011      	add	sp, #68	@ 0x44
 8018a9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018a9e:	200c      	movs	r0, #12
 8018aa0:	b011      	add	sp, #68	@ 0x44
 8018aa2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018aa4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8018aa8:	f7f9 fab6 	bl	8012018 <uxr_flash_output_streams>
 8018aac:	2000      	movs	r0, #0
 8018aae:	b011      	add	sp, #68	@ 0x44
 8018ab0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018ab2:	bf00      	nop
 8018ab4:	0801eabc 	.word	0x0801eabc

08018ab8 <rmw_take_response>:
 8018ab8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018abc:	4604      	mov	r4, r0
 8018abe:	6800      	ldr	r0, [r0, #0]
 8018ac0:	b088      	sub	sp, #32
 8018ac2:	4688      	mov	r8, r1
 8018ac4:	4617      	mov	r7, r2
 8018ac6:	461d      	mov	r5, r3
 8018ac8:	b120      	cbz	r0, 8018ad4 <rmw_take_response+0x1c>
 8018aca:	4b1e      	ldr	r3, [pc, #120]	@ (8018b44 <rmw_take_response+0x8c>)
 8018acc:	6819      	ldr	r1, [r3, #0]
 8018ace:	f7e7 fba7 	bl	8000220 <strcmp>
 8018ad2:	bb78      	cbnz	r0, 8018b34 <rmw_take_response+0x7c>
 8018ad4:	b10d      	cbz	r5, 8018ada <rmw_take_response+0x22>
 8018ad6:	2300      	movs	r3, #0
 8018ad8:	702b      	strb	r3, [r5, #0]
 8018ada:	6864      	ldr	r4, [r4, #4]
 8018adc:	f7f8 f970 	bl	8010dc0 <rmw_uxrce_clean_expired_static_input_buffer>
 8018ae0:	4620      	mov	r0, r4
 8018ae2:	f7f8 f945 	bl	8010d70 <rmw_uxrce_find_static_input_buffer_by_owner>
 8018ae6:	4606      	mov	r6, r0
 8018ae8:	b340      	cbz	r0, 8018b3c <rmw_take_response+0x84>
 8018aea:	6963      	ldr	r3, [r4, #20]
 8018aec:	6884      	ldr	r4, [r0, #8]
 8018aee:	68db      	ldr	r3, [r3, #12]
 8018af0:	f504 6203 	add.w	r2, r4, #2096	@ 0x830
 8018af4:	e952 0102 	ldrd	r0, r1, [r2, #-8]
 8018af8:	e9c8 0108 	strd	r0, r1, [r8, #32]
 8018afc:	4798      	blx	r3
 8018afe:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8018b02:	f8d4 2810 	ldr.w	r2, [r4, #2064]	@ 0x810
 8018b06:	f104 0110 	add.w	r1, r4, #16
 8018b0a:	4668      	mov	r0, sp
 8018b0c:	f7f5 fd10 	bl	800e530 <ucdr_init_buffer>
 8018b10:	4639      	mov	r1, r7
 8018b12:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8018b16:	4668      	mov	r0, sp
 8018b18:	4798      	blx	r3
 8018b1a:	4631      	mov	r1, r6
 8018b1c:	4604      	mov	r4, r0
 8018b1e:	480a      	ldr	r0, [pc, #40]	@ (8018b48 <rmw_take_response+0x90>)
 8018b20:	f7ff fdf2 	bl	8018708 <put_memory>
 8018b24:	b105      	cbz	r5, 8018b28 <rmw_take_response+0x70>
 8018b26:	702c      	strb	r4, [r5, #0]
 8018b28:	f084 0001 	eor.w	r0, r4, #1
 8018b2c:	b2c0      	uxtb	r0, r0
 8018b2e:	b008      	add	sp, #32
 8018b30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018b34:	200c      	movs	r0, #12
 8018b36:	b008      	add	sp, #32
 8018b38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018b3c:	2001      	movs	r0, #1
 8018b3e:	b008      	add	sp, #32
 8018b40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018b44:	0801eabc 	.word	0x0801eabc
 8018b48:	2000b524 	.word	0x2000b524

08018b4c <rmw_take_with_info>:
 8018b4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018b4e:	4604      	mov	r4, r0
 8018b50:	6800      	ldr	r0, [r0, #0]
 8018b52:	b089      	sub	sp, #36	@ 0x24
 8018b54:	460f      	mov	r7, r1
 8018b56:	4615      	mov	r5, r2
 8018b58:	b128      	cbz	r0, 8018b66 <rmw_take_with_info+0x1a>
 8018b5a:	4b24      	ldr	r3, [pc, #144]	@ (8018bec <rmw_take_with_info+0xa0>)
 8018b5c:	6819      	ldr	r1, [r3, #0]
 8018b5e:	f7e7 fb5f 	bl	8000220 <strcmp>
 8018b62:	2800      	cmp	r0, #0
 8018b64:	d13e      	bne.n	8018be4 <rmw_take_with_info+0x98>
 8018b66:	b305      	cbz	r5, 8018baa <rmw_take_with_info+0x5e>
 8018b68:	6864      	ldr	r4, [r4, #4]
 8018b6a:	2300      	movs	r3, #0
 8018b6c:	702b      	strb	r3, [r5, #0]
 8018b6e:	f7f8 f927 	bl	8010dc0 <rmw_uxrce_clean_expired_static_input_buffer>
 8018b72:	4620      	mov	r0, r4
 8018b74:	f7f8 f8fc 	bl	8010d70 <rmw_uxrce_find_static_input_buffer_by_owner>
 8018b78:	4606      	mov	r6, r0
 8018b7a:	b1f0      	cbz	r0, 8018bba <rmw_take_with_info+0x6e>
 8018b7c:	6881      	ldr	r1, [r0, #8]
 8018b7e:	4668      	mov	r0, sp
 8018b80:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 8018b84:	3110      	adds	r1, #16
 8018b86:	f7f5 fcd3 	bl	800e530 <ucdr_init_buffer>
 8018b8a:	69a3      	ldr	r3, [r4, #24]
 8018b8c:	4639      	mov	r1, r7
 8018b8e:	68db      	ldr	r3, [r3, #12]
 8018b90:	4668      	mov	r0, sp
 8018b92:	4798      	blx	r3
 8018b94:	4631      	mov	r1, r6
 8018b96:	4604      	mov	r4, r0
 8018b98:	4815      	ldr	r0, [pc, #84]	@ (8018bf0 <rmw_take_with_info+0xa4>)
 8018b9a:	f7ff fdb5 	bl	8018708 <put_memory>
 8018b9e:	702c      	strb	r4, [r5, #0]
 8018ba0:	f084 0001 	eor.w	r0, r4, #1
 8018ba4:	b2c0      	uxtb	r0, r0
 8018ba6:	b009      	add	sp, #36	@ 0x24
 8018ba8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018baa:	6864      	ldr	r4, [r4, #4]
 8018bac:	f7f8 f908 	bl	8010dc0 <rmw_uxrce_clean_expired_static_input_buffer>
 8018bb0:	4620      	mov	r0, r4
 8018bb2:	f7f8 f8dd 	bl	8010d70 <rmw_uxrce_find_static_input_buffer_by_owner>
 8018bb6:	4605      	mov	r5, r0
 8018bb8:	b910      	cbnz	r0, 8018bc0 <rmw_take_with_info+0x74>
 8018bba:	2001      	movs	r0, #1
 8018bbc:	b009      	add	sp, #36	@ 0x24
 8018bbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018bc0:	68a9      	ldr	r1, [r5, #8]
 8018bc2:	4668      	mov	r0, sp
 8018bc4:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 8018bc8:	3110      	adds	r1, #16
 8018bca:	f7f5 fcb1 	bl	800e530 <ucdr_init_buffer>
 8018bce:	69a3      	ldr	r3, [r4, #24]
 8018bd0:	4639      	mov	r1, r7
 8018bd2:	68db      	ldr	r3, [r3, #12]
 8018bd4:	4668      	mov	r0, sp
 8018bd6:	4798      	blx	r3
 8018bd8:	4629      	mov	r1, r5
 8018bda:	4604      	mov	r4, r0
 8018bdc:	4804      	ldr	r0, [pc, #16]	@ (8018bf0 <rmw_take_with_info+0xa4>)
 8018bde:	f7ff fd93 	bl	8018708 <put_memory>
 8018be2:	e7dd      	b.n	8018ba0 <rmw_take_with_info+0x54>
 8018be4:	200c      	movs	r0, #12
 8018be6:	b009      	add	sp, #36	@ 0x24
 8018be8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018bea:	bf00      	nop
 8018bec:	0801eabc 	.word	0x0801eabc
 8018bf0:	2000b524 	.word	0x2000b524

08018bf4 <rmw_wait>:
 8018bf4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018bf8:	b089      	sub	sp, #36	@ 0x24
 8018bfa:	4605      	mov	r5, r0
 8018bfc:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8018bfe:	460e      	mov	r6, r1
 8018c00:	4698      	mov	r8, r3
 8018c02:	4691      	mov	r9, r2
 8018c04:	2a00      	cmp	r2, #0
 8018c06:	f000 810a 	beq.w	8018e1e <rmw_wait+0x22a>
 8018c0a:	b16c      	cbz	r4, 8018c28 <rmw_wait+0x34>
 8018c0c:	4bae      	ldr	r3, [pc, #696]	@ (8018ec8 <rmw_wait+0x2d4>)
 8018c0e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8018c10:	af04      	add	r7, sp, #16
 8018c12:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 8018c16:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8018c1a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8018c1e:	f7ff faaf 	bl	8018180 <rmw_time_equal>
 8018c22:	2800      	cmp	r0, #0
 8018c24:	f000 8127 	beq.w	8018e76 <rmw_wait+0x282>
 8018c28:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8018c2c:	f7f8 f8c8 	bl	8010dc0 <rmw_uxrce_clean_expired_static_input_buffer>
 8018c30:	4ba6      	ldr	r3, [pc, #664]	@ (8018ecc <rmw_wait+0x2d8>)
 8018c32:	681c      	ldr	r4, [r3, #0]
 8018c34:	b14c      	cbz	r4, 8018c4a <rmw_wait+0x56>
 8018c36:	4623      	mov	r3, r4
 8018c38:	2100      	movs	r1, #0
 8018c3a:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
 8018c3e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8018c42:	f882 15a4 	strb.w	r1, [r2, #1444]	@ 0x5a4
 8018c46:	2b00      	cmp	r3, #0
 8018c48:	d1f7      	bne.n	8018c3a <rmw_wait+0x46>
 8018c4a:	f1b9 0f00 	cmp.w	r9, #0
 8018c4e:	d011      	beq.n	8018c74 <rmw_wait+0x80>
 8018c50:	f8d9 1000 	ldr.w	r1, [r9]
 8018c54:	b171      	cbz	r1, 8018c74 <rmw_wait+0x80>
 8018c56:	f8d9 c004 	ldr.w	ip, [r9, #4]
 8018c5a:	2300      	movs	r3, #0
 8018c5c:	2001      	movs	r0, #1
 8018c5e:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8018c62:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 8018c64:	6912      	ldr	r2, [r2, #16]
 8018c66:	3301      	adds	r3, #1
 8018c68:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8018c6c:	4299      	cmp	r1, r3
 8018c6e:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8018c72:	d1f4      	bne.n	8018c5e <rmw_wait+0x6a>
 8018c74:	f1b8 0f00 	cmp.w	r8, #0
 8018c78:	d011      	beq.n	8018c9e <rmw_wait+0xaa>
 8018c7a:	f8d8 1000 	ldr.w	r1, [r8]
 8018c7e:	b171      	cbz	r1, 8018c9e <rmw_wait+0xaa>
 8018c80:	f8d8 c004 	ldr.w	ip, [r8, #4]
 8018c84:	2300      	movs	r3, #0
 8018c86:	2001      	movs	r0, #1
 8018c88:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8018c8c:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 8018c8e:	6912      	ldr	r2, [r2, #16]
 8018c90:	3301      	adds	r3, #1
 8018c92:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8018c96:	4299      	cmp	r1, r3
 8018c98:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8018c9c:	d1f4      	bne.n	8018c88 <rmw_wait+0x94>
 8018c9e:	b185      	cbz	r5, 8018cc2 <rmw_wait+0xce>
 8018ca0:	6829      	ldr	r1, [r5, #0]
 8018ca2:	b171      	cbz	r1, 8018cc2 <rmw_wait+0xce>
 8018ca4:	f8d5 c004 	ldr.w	ip, [r5, #4]
 8018ca8:	2300      	movs	r3, #0
 8018caa:	2001      	movs	r0, #1
 8018cac:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8018cb0:	6a12      	ldr	r2, [r2, #32]
 8018cb2:	6912      	ldr	r2, [r2, #16]
 8018cb4:	3301      	adds	r3, #1
 8018cb6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8018cba:	4299      	cmp	r1, r3
 8018cbc:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8018cc0:	d1f4      	bne.n	8018cac <rmw_wait+0xb8>
 8018cc2:	b34c      	cbz	r4, 8018d18 <rmw_wait+0x124>
 8018cc4:	4622      	mov	r2, r4
 8018cc6:	2300      	movs	r3, #0
 8018cc8:	e9d2 2101 	ldrd	r2, r1, [r2, #4]
 8018ccc:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 8018cd0:	f891 15a4 	ldrb.w	r1, [r1, #1444]	@ 0x5a4
 8018cd4:	440b      	add	r3, r1
 8018cd6:	b2db      	uxtb	r3, r3
 8018cd8:	2a00      	cmp	r2, #0
 8018cda:	d1f5      	bne.n	8018cc8 <rmw_wait+0xd4>
 8018cdc:	2b00      	cmp	r3, #0
 8018cde:	f000 8084 	beq.w	8018dea <rmw_wait+0x1f6>
 8018ce2:	1c7a      	adds	r2, r7, #1
 8018ce4:	d00d      	beq.n	8018d02 <rmw_wait+0x10e>
 8018ce6:	ee07 7a90 	vmov	s15, r7
 8018cea:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8018cee:	ee07 3a90 	vmov	s15, r3
 8018cf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8018cf6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8018cfa:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 8018cfe:	ee17 7a90 	vmov	r7, s15
 8018d02:	68a0      	ldr	r0, [r4, #8]
 8018d04:	f500 5380 	add.w	r3, r0, #4096	@ 0x1000
 8018d08:	f893 35a4 	ldrb.w	r3, [r3, #1444]	@ 0x5a4
 8018d0c:	2b00      	cmp	r3, #0
 8018d0e:	f040 8090 	bne.w	8018e32 <rmw_wait+0x23e>
 8018d12:	6864      	ldr	r4, [r4, #4]
 8018d14:	2c00      	cmp	r4, #0
 8018d16:	d1f4      	bne.n	8018d02 <rmw_wait+0x10e>
 8018d18:	f1b9 0f00 	cmp.w	r9, #0
 8018d1c:	f000 80bc 	beq.w	8018e98 <rmw_wait+0x2a4>
 8018d20:	f8d9 7000 	ldr.w	r7, [r9]
 8018d24:	2f00      	cmp	r7, #0
 8018d26:	f000 808e 	beq.w	8018e46 <rmw_wait+0x252>
 8018d2a:	2400      	movs	r4, #0
 8018d2c:	4627      	mov	r7, r4
 8018d2e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8018d32:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8018d36:	f7f8 f81b 	bl	8010d70 <rmw_uxrce_find_static_input_buffer_by_owner>
 8018d3a:	2800      	cmp	r0, #0
 8018d3c:	d05f      	beq.n	8018dfe <rmw_wait+0x20a>
 8018d3e:	f8d9 3000 	ldr.w	r3, [r9]
 8018d42:	3401      	adds	r4, #1
 8018d44:	42a3      	cmp	r3, r4
 8018d46:	f04f 0701 	mov.w	r7, #1
 8018d4a:	d8f0      	bhi.n	8018d2e <rmw_wait+0x13a>
 8018d4c:	f1b8 0f00 	cmp.w	r8, #0
 8018d50:	d012      	beq.n	8018d78 <rmw_wait+0x184>
 8018d52:	f8d8 3000 	ldr.w	r3, [r8]
 8018d56:	b17b      	cbz	r3, 8018d78 <rmw_wait+0x184>
 8018d58:	2400      	movs	r4, #0
 8018d5a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8018d5e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8018d62:	f7f8 f805 	bl	8010d70 <rmw_uxrce_find_static_input_buffer_by_owner>
 8018d66:	2800      	cmp	r0, #0
 8018d68:	d051      	beq.n	8018e0e <rmw_wait+0x21a>
 8018d6a:	f8d8 3000 	ldr.w	r3, [r8]
 8018d6e:	3401      	adds	r4, #1
 8018d70:	42a3      	cmp	r3, r4
 8018d72:	f04f 0701 	mov.w	r7, #1
 8018d76:	d8f0      	bhi.n	8018d5a <rmw_wait+0x166>
 8018d78:	b1dd      	cbz	r5, 8018db2 <rmw_wait+0x1be>
 8018d7a:	682b      	ldr	r3, [r5, #0]
 8018d7c:	b1cb      	cbz	r3, 8018db2 <rmw_wait+0x1be>
 8018d7e:	2400      	movs	r4, #0
 8018d80:	686b      	ldr	r3, [r5, #4]
 8018d82:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8018d86:	f7f7 fff3 	bl	8010d70 <rmw_uxrce_find_static_input_buffer_by_owner>
 8018d8a:	b158      	cbz	r0, 8018da4 <rmw_wait+0x1b0>
 8018d8c:	682b      	ldr	r3, [r5, #0]
 8018d8e:	3401      	adds	r4, #1
 8018d90:	42a3      	cmp	r3, r4
 8018d92:	d969      	bls.n	8018e68 <rmw_wait+0x274>
 8018d94:	686b      	ldr	r3, [r5, #4]
 8018d96:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8018d9a:	2701      	movs	r7, #1
 8018d9c:	f7f7 ffe8 	bl	8010d70 <rmw_uxrce_find_static_input_buffer_by_owner>
 8018da0:	2800      	cmp	r0, #0
 8018da2:	d1f3      	bne.n	8018d8c <rmw_wait+0x198>
 8018da4:	e9d5 3200 	ldrd	r3, r2, [r5]
 8018da8:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8018dac:	3401      	adds	r4, #1
 8018dae:	42a3      	cmp	r3, r4
 8018db0:	d8e6      	bhi.n	8018d80 <rmw_wait+0x18c>
 8018db2:	b1a6      	cbz	r6, 8018dde <rmw_wait+0x1ea>
 8018db4:	6834      	ldr	r4, [r6, #0]
 8018db6:	b194      	cbz	r4, 8018dde <rmw_wait+0x1ea>
 8018db8:	2300      	movs	r3, #0
 8018dba:	461d      	mov	r5, r3
 8018dbc:	e004      	b.n	8018dc8 <rmw_wait+0x1d4>
 8018dbe:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 8018dc2:	3301      	adds	r3, #1
 8018dc4:	42a3      	cmp	r3, r4
 8018dc6:	d00a      	beq.n	8018dde <rmw_wait+0x1ea>
 8018dc8:	6870      	ldr	r0, [r6, #4]
 8018dca:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 8018dce:	7c0a      	ldrb	r2, [r1, #16]
 8018dd0:	2a00      	cmp	r2, #0
 8018dd2:	d0f4      	beq.n	8018dbe <rmw_wait+0x1ca>
 8018dd4:	3301      	adds	r3, #1
 8018dd6:	42a3      	cmp	r3, r4
 8018dd8:	740d      	strb	r5, [r1, #16]
 8018dda:	4617      	mov	r7, r2
 8018ddc:	d1f4      	bne.n	8018dc8 <rmw_wait+0x1d4>
 8018dde:	2f00      	cmp	r7, #0
 8018de0:	d03e      	beq.n	8018e60 <rmw_wait+0x26c>
 8018de2:	2000      	movs	r0, #0
 8018de4:	b009      	add	sp, #36	@ 0x24
 8018de6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018dea:	68a0      	ldr	r0, [r4, #8]
 8018dec:	2100      	movs	r1, #0
 8018dee:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8018df2:	f7f9 fc97 	bl	8012724 <uxr_run_session_timeout>
 8018df6:	6864      	ldr	r4, [r4, #4]
 8018df8:	2c00      	cmp	r4, #0
 8018dfa:	d1f6      	bne.n	8018dea <rmw_wait+0x1f6>
 8018dfc:	e78c      	b.n	8018d18 <rmw_wait+0x124>
 8018dfe:	e9d9 3200 	ldrd	r3, r2, [r9]
 8018e02:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8018e06:	3401      	adds	r4, #1
 8018e08:	42a3      	cmp	r3, r4
 8018e0a:	d890      	bhi.n	8018d2e <rmw_wait+0x13a>
 8018e0c:	e79e      	b.n	8018d4c <rmw_wait+0x158>
 8018e0e:	e9d8 3200 	ldrd	r3, r2, [r8]
 8018e12:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8018e16:	3401      	adds	r4, #1
 8018e18:	429c      	cmp	r4, r3
 8018e1a:	d39e      	bcc.n	8018d5a <rmw_wait+0x166>
 8018e1c:	e7ac      	b.n	8018d78 <rmw_wait+0x184>
 8018e1e:	2b00      	cmp	r3, #0
 8018e20:	f47f aef3 	bne.w	8018c0a <rmw_wait+0x16>
 8018e24:	2800      	cmp	r0, #0
 8018e26:	f47f aef0 	bne.w	8018c0a <rmw_wait+0x16>
 8018e2a:	2900      	cmp	r1, #0
 8018e2c:	f47f aeed 	bne.w	8018c0a <rmw_wait+0x16>
 8018e30:	e7d7      	b.n	8018de2 <rmw_wait+0x1ee>
 8018e32:	4639      	mov	r1, r7
 8018e34:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8018e38:	f7f9 fc8e 	bl	8012758 <uxr_run_session_until_data>
 8018e3c:	6864      	ldr	r4, [r4, #4]
 8018e3e:	2c00      	cmp	r4, #0
 8018e40:	f47f af5f 	bne.w	8018d02 <rmw_wait+0x10e>
 8018e44:	e768      	b.n	8018d18 <rmw_wait+0x124>
 8018e46:	f1b8 0f00 	cmp.w	r8, #0
 8018e4a:	d032      	beq.n	8018eb2 <rmw_wait+0x2be>
 8018e4c:	f8d8 3000 	ldr.w	r3, [r8]
 8018e50:	2b00      	cmp	r3, #0
 8018e52:	d181      	bne.n	8018d58 <rmw_wait+0x164>
 8018e54:	461f      	mov	r7, r3
 8018e56:	2d00      	cmp	r5, #0
 8018e58:	d18f      	bne.n	8018d7a <rmw_wait+0x186>
 8018e5a:	462f      	mov	r7, r5
 8018e5c:	2e00      	cmp	r6, #0
 8018e5e:	d1a9      	bne.n	8018db4 <rmw_wait+0x1c0>
 8018e60:	2002      	movs	r0, #2
 8018e62:	b009      	add	sp, #36	@ 0x24
 8018e64:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018e68:	2e00      	cmp	r6, #0
 8018e6a:	d0ba      	beq.n	8018de2 <rmw_wait+0x1ee>
 8018e6c:	6834      	ldr	r4, [r6, #0]
 8018e6e:	2701      	movs	r7, #1
 8018e70:	2c00      	cmp	r4, #0
 8018e72:	d1a1      	bne.n	8018db8 <rmw_wait+0x1c4>
 8018e74:	e7b5      	b.n	8018de2 <rmw_wait+0x1ee>
 8018e76:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8018e7a:	f7ff f9d5 	bl	8018228 <rmw_time_total_nsec>
 8018e7e:	2300      	movs	r3, #0
 8018e80:	4a13      	ldr	r2, [pc, #76]	@ (8018ed0 <rmw_wait+0x2dc>)
 8018e82:	f7e7 ff4b 	bl	8000d1c <__aeabi_uldivmod>
 8018e86:	f1b0 4f00 	cmp.w	r0, #2147483648	@ 0x80000000
 8018e8a:	f171 0300 	sbcs.w	r3, r1, #0
 8018e8e:	4607      	mov	r7, r0
 8018e90:	bfa8      	it	ge
 8018e92:	f06f 4700 	mvnge.w	r7, #2147483648	@ 0x80000000
 8018e96:	e6c9      	b.n	8018c2c <rmw_wait+0x38>
 8018e98:	f1b8 0f00 	cmp.w	r8, #0
 8018e9c:	d009      	beq.n	8018eb2 <rmw_wait+0x2be>
 8018e9e:	f8d8 3000 	ldr.w	r3, [r8]
 8018ea2:	464f      	mov	r7, r9
 8018ea4:	2b00      	cmp	r3, #0
 8018ea6:	f47f af57 	bne.w	8018d58 <rmw_wait+0x164>
 8018eaa:	2d00      	cmp	r5, #0
 8018eac:	f47f af65 	bne.w	8018d7a <rmw_wait+0x186>
 8018eb0:	e7d3      	b.n	8018e5a <rmw_wait+0x266>
 8018eb2:	b17d      	cbz	r5, 8018ed4 <rmw_wait+0x2e0>
 8018eb4:	682b      	ldr	r3, [r5, #0]
 8018eb6:	4647      	mov	r7, r8
 8018eb8:	2b00      	cmp	r3, #0
 8018eba:	f47f af60 	bne.w	8018d7e <rmw_wait+0x18a>
 8018ebe:	2e00      	cmp	r6, #0
 8018ec0:	f47f af78 	bne.w	8018db4 <rmw_wait+0x1c0>
 8018ec4:	e7cc      	b.n	8018e60 <rmw_wait+0x26c>
 8018ec6:	bf00      	nop
 8018ec8:	0801d4f8 	.word	0x0801d4f8
 8018ecc:	2000b514 	.word	0x2000b514
 8018ed0:	000f4240 	.word	0x000f4240
 8018ed4:	2e00      	cmp	r6, #0
 8018ed6:	d0c3      	beq.n	8018e60 <rmw_wait+0x26c>
 8018ed8:	6834      	ldr	r4, [r6, #0]
 8018eda:	462f      	mov	r7, r5
 8018edc:	2c00      	cmp	r4, #0
 8018ede:	f47f af6b 	bne.w	8018db8 <rmw_wait+0x1c4>
 8018ee2:	e7bd      	b.n	8018e60 <rmw_wait+0x26c>

08018ee4 <rmw_create_wait_set>:
 8018ee4:	b508      	push	{r3, lr}
 8018ee6:	4803      	ldr	r0, [pc, #12]	@ (8018ef4 <rmw_create_wait_set+0x10>)
 8018ee8:	f7ff fbfe 	bl	80186e8 <get_memory>
 8018eec:	b108      	cbz	r0, 8018ef2 <rmw_create_wait_set+0xe>
 8018eee:	6880      	ldr	r0, [r0, #8]
 8018ef0:	3010      	adds	r0, #16
 8018ef2:	bd08      	pop	{r3, pc}
 8018ef4:	2000b554 	.word	0x2000b554

08018ef8 <rmw_destroy_wait_set>:
 8018ef8:	b508      	push	{r3, lr}
 8018efa:	4b08      	ldr	r3, [pc, #32]	@ (8018f1c <rmw_destroy_wait_set+0x24>)
 8018efc:	6819      	ldr	r1, [r3, #0]
 8018efe:	b911      	cbnz	r1, 8018f06 <rmw_destroy_wait_set+0xe>
 8018f00:	e00a      	b.n	8018f18 <rmw_destroy_wait_set+0x20>
 8018f02:	6849      	ldr	r1, [r1, #4]
 8018f04:	b141      	cbz	r1, 8018f18 <rmw_destroy_wait_set+0x20>
 8018f06:	688b      	ldr	r3, [r1, #8]
 8018f08:	3310      	adds	r3, #16
 8018f0a:	4298      	cmp	r0, r3
 8018f0c:	d1f9      	bne.n	8018f02 <rmw_destroy_wait_set+0xa>
 8018f0e:	4803      	ldr	r0, [pc, #12]	@ (8018f1c <rmw_destroy_wait_set+0x24>)
 8018f10:	f7ff fbfa 	bl	8018708 <put_memory>
 8018f14:	2000      	movs	r0, #0
 8018f16:	bd08      	pop	{r3, pc}
 8018f18:	2001      	movs	r0, #1
 8018f1a:	bd08      	pop	{r3, pc}
 8018f1c:	2000b554 	.word	0x2000b554

08018f20 <rosidl_runtime_c__double__Sequence__init>:
 8018f20:	b530      	push	{r4, r5, lr}
 8018f22:	4604      	mov	r4, r0
 8018f24:	b087      	sub	sp, #28
 8018f26:	b130      	cbz	r0, 8018f36 <rosidl_runtime_c__double__Sequence__init+0x16>
 8018f28:	460d      	mov	r5, r1
 8018f2a:	b931      	cbnz	r1, 8018f3a <rosidl_runtime_c__double__Sequence__init+0x1a>
 8018f2c:	4608      	mov	r0, r1
 8018f2e:	e9c4 0500 	strd	r0, r5, [r4]
 8018f32:	60a5      	str	r5, [r4, #8]
 8018f34:	2001      	movs	r0, #1
 8018f36:	b007      	add	sp, #28
 8018f38:	bd30      	pop	{r4, r5, pc}
 8018f3a:	a801      	add	r0, sp, #4
 8018f3c:	f7f6 fd08 	bl	800f950 <rcutils_get_default_allocator>
 8018f40:	9b01      	ldr	r3, [sp, #4]
 8018f42:	9905      	ldr	r1, [sp, #20]
 8018f44:	00e8      	lsls	r0, r5, #3
 8018f46:	4798      	blx	r3
 8018f48:	2800      	cmp	r0, #0
 8018f4a:	d1f0      	bne.n	8018f2e <rosidl_runtime_c__double__Sequence__init+0xe>
 8018f4c:	e7f3      	b.n	8018f36 <rosidl_runtime_c__double__Sequence__init+0x16>
 8018f4e:	bf00      	nop

08018f50 <rosidl_runtime_c__double__Sequence__fini>:
 8018f50:	b188      	cbz	r0, 8018f76 <rosidl_runtime_c__double__Sequence__fini+0x26>
 8018f52:	b510      	push	{r4, lr}
 8018f54:	6803      	ldr	r3, [r0, #0]
 8018f56:	b086      	sub	sp, #24
 8018f58:	4604      	mov	r4, r0
 8018f5a:	b153      	cbz	r3, 8018f72 <rosidl_runtime_c__double__Sequence__fini+0x22>
 8018f5c:	a801      	add	r0, sp, #4
 8018f5e:	f7f6 fcf7 	bl	800f950 <rcutils_get_default_allocator>
 8018f62:	9b02      	ldr	r3, [sp, #8]
 8018f64:	9905      	ldr	r1, [sp, #20]
 8018f66:	6820      	ldr	r0, [r4, #0]
 8018f68:	4798      	blx	r3
 8018f6a:	2300      	movs	r3, #0
 8018f6c:	e9c4 3300 	strd	r3, r3, [r4]
 8018f70:	60a3      	str	r3, [r4, #8]
 8018f72:	b006      	add	sp, #24
 8018f74:	bd10      	pop	{r4, pc}
 8018f76:	4770      	bx	lr

08018f78 <std_msgs__msg__Float64MultiArray__init>:
 8018f78:	b570      	push	{r4, r5, r6, lr}
 8018f7a:	4605      	mov	r5, r0
 8018f7c:	b1b0      	cbz	r0, 8018fac <std_msgs__msg__Float64MultiArray__init+0x34>
 8018f7e:	f000 f8b5 	bl	80190ec <std_msgs__msg__MultiArrayLayout__init>
 8018f82:	4604      	mov	r4, r0
 8018f84:	b148      	cbz	r0, 8018f9a <std_msgs__msg__Float64MultiArray__init+0x22>
 8018f86:	f105 0610 	add.w	r6, r5, #16
 8018f8a:	2100      	movs	r1, #0
 8018f8c:	4630      	mov	r0, r6
 8018f8e:	f7ff ffc7 	bl	8018f20 <rosidl_runtime_c__double__Sequence__init>
 8018f92:	4604      	mov	r4, r0
 8018f94:	b168      	cbz	r0, 8018fb2 <std_msgs__msg__Float64MultiArray__init+0x3a>
 8018f96:	4620      	mov	r0, r4
 8018f98:	bd70      	pop	{r4, r5, r6, pc}
 8018f9a:	4628      	mov	r0, r5
 8018f9c:	f000 f8b8 	bl	8019110 <std_msgs__msg__MultiArrayLayout__fini>
 8018fa0:	f105 0010 	add.w	r0, r5, #16
 8018fa4:	f7ff ffd4 	bl	8018f50 <rosidl_runtime_c__double__Sequence__fini>
 8018fa8:	4620      	mov	r0, r4
 8018faa:	bd70      	pop	{r4, r5, r6, pc}
 8018fac:	4604      	mov	r4, r0
 8018fae:	4620      	mov	r0, r4
 8018fb0:	bd70      	pop	{r4, r5, r6, pc}
 8018fb2:	4628      	mov	r0, r5
 8018fb4:	f000 f8ac 	bl	8019110 <std_msgs__msg__MultiArrayLayout__fini>
 8018fb8:	4630      	mov	r0, r6
 8018fba:	f7ff ffc9 	bl	8018f50 <rosidl_runtime_c__double__Sequence__fini>
 8018fbe:	e7ea      	b.n	8018f96 <std_msgs__msg__Float64MultiArray__init+0x1e>

08018fc0 <std_msgs__msg__Float64MultiArray__fini>:
 8018fc0:	b148      	cbz	r0, 8018fd6 <std_msgs__msg__Float64MultiArray__fini+0x16>
 8018fc2:	b510      	push	{r4, lr}
 8018fc4:	4604      	mov	r4, r0
 8018fc6:	f000 f8a3 	bl	8019110 <std_msgs__msg__MultiArrayLayout__fini>
 8018fca:	f104 0010 	add.w	r0, r4, #16
 8018fce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018fd2:	f7ff bfbd 	b.w	8018f50 <rosidl_runtime_c__double__Sequence__fini>
 8018fd6:	4770      	bx	lr

08018fd8 <std_msgs__msg__MultiArrayDimension__Sequence__init.part.0>:
 8018fd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018fdc:	b086      	sub	sp, #24
 8018fde:	4682      	mov	sl, r0
 8018fe0:	4689      	mov	r9, r1
 8018fe2:	a801      	add	r0, sp, #4
 8018fe4:	f7f6 fcb4 	bl	800f950 <rcutils_get_default_allocator>
 8018fe8:	f1b9 0f00 	cmp.w	r9, #0
 8018fec:	d02f      	beq.n	801904e <std_msgs__msg__MultiArrayDimension__Sequence__init.part.0+0x76>
 8018fee:	e9dd 3804 	ldrd	r3, r8, [sp, #16]
 8018ff2:	2114      	movs	r1, #20
 8018ff4:	4642      	mov	r2, r8
 8018ff6:	4648      	mov	r0, r9
 8018ff8:	4798      	blx	r3
 8018ffa:	4607      	mov	r7, r0
 8018ffc:	b388      	cbz	r0, 8019062 <std_msgs__msg__MultiArrayDimension__Sequence__init.part.0+0x8a>
 8018ffe:	4606      	mov	r6, r0
 8019000:	2400      	movs	r4, #0
 8019002:	e004      	b.n	801900e <std_msgs__msg__MultiArrayDimension__Sequence__init.part.0+0x36>
 8019004:	3401      	adds	r4, #1
 8019006:	45a1      	cmp	r9, r4
 8019008:	f106 0614 	add.w	r6, r6, #20
 801900c:	d020      	beq.n	8019050 <std_msgs__msg__MultiArrayDimension__Sequence__init.part.0+0x78>
 801900e:	4630      	mov	r0, r6
 8019010:	f001 fc56 	bl	801a8c0 <rosidl_runtime_c__String__init>
 8019014:	4605      	mov	r5, r0
 8019016:	2800      	cmp	r0, #0
 8019018:	d1f4      	bne.n	8019004 <std_msgs__msg__MultiArrayDimension__Sequence__init.part.0+0x2c>
 801901a:	4630      	mov	r0, r6
 801901c:	f001 fc66 	bl	801a8ec <rosidl_runtime_c__String__fini>
 8019020:	45a1      	cmp	r9, r4
 8019022:	d915      	bls.n	8019050 <std_msgs__msg__MultiArrayDimension__Sequence__init.part.0+0x78>
 8019024:	b15c      	cbz	r4, 801903e <std_msgs__msg__MultiArrayDimension__Sequence__init.part.0+0x66>
 8019026:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 801902a:	eb07 0484 	add.w	r4, r7, r4, lsl #2
 801902e:	3c14      	subs	r4, #20
 8019030:	4620      	mov	r0, r4
 8019032:	f001 fc5b 	bl	801a8ec <rosidl_runtime_c__String__fini>
 8019036:	42a7      	cmp	r7, r4
 8019038:	f1a4 0414 	sub.w	r4, r4, #20
 801903c:	d1f8      	bne.n	8019030 <std_msgs__msg__MultiArrayDimension__Sequence__init.part.0+0x58>
 801903e:	4638      	mov	r0, r7
 8019040:	9b02      	ldr	r3, [sp, #8]
 8019042:	4641      	mov	r1, r8
 8019044:	4798      	blx	r3
 8019046:	4628      	mov	r0, r5
 8019048:	b006      	add	sp, #24
 801904a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801904e:	464f      	mov	r7, r9
 8019050:	e9ca 7900 	strd	r7, r9, [sl]
 8019054:	f8ca 9008 	str.w	r9, [sl, #8]
 8019058:	2501      	movs	r5, #1
 801905a:	4628      	mov	r0, r5
 801905c:	b006      	add	sp, #24
 801905e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019062:	4605      	mov	r5, r0
 8019064:	e7f9      	b.n	801905a <std_msgs__msg__MultiArrayDimension__Sequence__init.part.0+0x82>
 8019066:	bf00      	nop

08019068 <std_msgs__msg__MultiArrayDimension__init>:
 8019068:	b538      	push	{r3, r4, r5, lr}
 801906a:	4604      	mov	r4, r0
 801906c:	b128      	cbz	r0, 801907a <std_msgs__msg__MultiArrayDimension__init+0x12>
 801906e:	f001 fc27 	bl	801a8c0 <rosidl_runtime_c__String__init>
 8019072:	4605      	mov	r5, r0
 8019074:	b120      	cbz	r0, 8019080 <std_msgs__msg__MultiArrayDimension__init+0x18>
 8019076:	4628      	mov	r0, r5
 8019078:	bd38      	pop	{r3, r4, r5, pc}
 801907a:	4605      	mov	r5, r0
 801907c:	4628      	mov	r0, r5
 801907e:	bd38      	pop	{r3, r4, r5, pc}
 8019080:	4620      	mov	r0, r4
 8019082:	f001 fc33 	bl	801a8ec <rosidl_runtime_c__String__fini>
 8019086:	4628      	mov	r0, r5
 8019088:	bd38      	pop	{r3, r4, r5, pc}
 801908a:	bf00      	nop

0801908c <std_msgs__msg__MultiArrayDimension__fini>:
 801908c:	b108      	cbz	r0, 8019092 <std_msgs__msg__MultiArrayDimension__fini+0x6>
 801908e:	f001 bc2d 	b.w	801a8ec <rosidl_runtime_c__String__fini>
 8019092:	4770      	bx	lr

08019094 <std_msgs__msg__MultiArrayDimension__Sequence__init>:
 8019094:	b108      	cbz	r0, 801909a <std_msgs__msg__MultiArrayDimension__Sequence__init+0x6>
 8019096:	f7ff bf9f 	b.w	8018fd8 <std_msgs__msg__MultiArrayDimension__Sequence__init.part.0>
 801909a:	4770      	bx	lr

0801909c <std_msgs__msg__MultiArrayDimension__Sequence__fini>:
 801909c:	b320      	cbz	r0, 80190e8 <std_msgs__msg__MultiArrayDimension__Sequence__fini+0x4c>
 801909e:	b530      	push	{r4, r5, lr}
 80190a0:	4605      	mov	r5, r0
 80190a2:	b087      	sub	sp, #28
 80190a4:	a801      	add	r0, sp, #4
 80190a6:	f7f6 fc53 	bl	800f950 <rcutils_get_default_allocator>
 80190aa:	682a      	ldr	r2, [r5, #0]
 80190ac:	b1b2      	cbz	r2, 80190dc <std_msgs__msg__MultiArrayDimension__Sequence__fini+0x40>
 80190ae:	68a9      	ldr	r1, [r5, #8]
 80190b0:	b161      	cbz	r1, 80190cc <std_msgs__msg__MultiArrayDimension__Sequence__fini+0x30>
 80190b2:	2400      	movs	r4, #0
 80190b4:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 80190b8:	eb12 0083 	adds.w	r0, r2, r3, lsl #2
 80190bc:	d010      	beq.n	80190e0 <std_msgs__msg__MultiArrayDimension__Sequence__fini+0x44>
 80190be:	f001 fc15 	bl	801a8ec <rosidl_runtime_c__String__fini>
 80190c2:	68a9      	ldr	r1, [r5, #8]
 80190c4:	682a      	ldr	r2, [r5, #0]
 80190c6:	3401      	adds	r4, #1
 80190c8:	428c      	cmp	r4, r1
 80190ca:	d3f3      	bcc.n	80190b4 <std_msgs__msg__MultiArrayDimension__Sequence__fini+0x18>
 80190cc:	9b02      	ldr	r3, [sp, #8]
 80190ce:	9905      	ldr	r1, [sp, #20]
 80190d0:	4610      	mov	r0, r2
 80190d2:	4798      	blx	r3
 80190d4:	2300      	movs	r3, #0
 80190d6:	e9c5 3300 	strd	r3, r3, [r5]
 80190da:	60ab      	str	r3, [r5, #8]
 80190dc:	b007      	add	sp, #28
 80190de:	bd30      	pop	{r4, r5, pc}
 80190e0:	3401      	adds	r4, #1
 80190e2:	428c      	cmp	r4, r1
 80190e4:	d3e6      	bcc.n	80190b4 <std_msgs__msg__MultiArrayDimension__Sequence__fini+0x18>
 80190e6:	e7f1      	b.n	80190cc <std_msgs__msg__MultiArrayDimension__Sequence__fini+0x30>
 80190e8:	4770      	bx	lr
 80190ea:	bf00      	nop

080190ec <std_msgs__msg__MultiArrayLayout__init>:
 80190ec:	b538      	push	{r3, r4, r5, lr}
 80190ee:	4604      	mov	r4, r0
 80190f0:	b130      	cbz	r0, 8019100 <std_msgs__msg__MultiArrayLayout__init+0x14>
 80190f2:	2100      	movs	r1, #0
 80190f4:	f7ff ffce 	bl	8019094 <std_msgs__msg__MultiArrayDimension__Sequence__init>
 80190f8:	4605      	mov	r5, r0
 80190fa:	b120      	cbz	r0, 8019106 <std_msgs__msg__MultiArrayLayout__init+0x1a>
 80190fc:	4628      	mov	r0, r5
 80190fe:	bd38      	pop	{r3, r4, r5, pc}
 8019100:	4605      	mov	r5, r0
 8019102:	4628      	mov	r0, r5
 8019104:	bd38      	pop	{r3, r4, r5, pc}
 8019106:	4620      	mov	r0, r4
 8019108:	f7ff ffc8 	bl	801909c <std_msgs__msg__MultiArrayDimension__Sequence__fini>
 801910c:	4628      	mov	r0, r5
 801910e:	bd38      	pop	{r3, r4, r5, pc}

08019110 <std_msgs__msg__MultiArrayLayout__fini>:
 8019110:	b108      	cbz	r0, 8019116 <std_msgs__msg__MultiArrayLayout__fini+0x6>
 8019112:	f7ff bfc3 	b.w	801909c <std_msgs__msg__MultiArrayDimension__Sequence__fini>
 8019116:	4770      	bx	lr

08019118 <std_msgs__msg__MultiArrayDimension__rosidl_typesupport_introspection_c__MultiArrayDimension_init_function>:
 8019118:	f7ff bfa6 	b.w	8019068 <std_msgs__msg__MultiArrayDimension__init>

0801911c <std_msgs__msg__MultiArrayDimension__rosidl_typesupport_introspection_c__MultiArrayDimension_fini_function>:
 801911c:	f7ff bfb6 	b.w	801908c <std_msgs__msg__MultiArrayDimension__fini>

08019120 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension>:
 8019120:	4b04      	ldr	r3, [pc, #16]	@ (8019134 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension+0x14>)
 8019122:	681a      	ldr	r2, [r3, #0]
 8019124:	b10a      	cbz	r2, 801912a <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension+0xa>
 8019126:	4803      	ldr	r0, [pc, #12]	@ (8019134 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension+0x14>)
 8019128:	4770      	bx	lr
 801912a:	4a03      	ldr	r2, [pc, #12]	@ (8019138 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension+0x18>)
 801912c:	4801      	ldr	r0, [pc, #4]	@ (8019134 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension+0x14>)
 801912e:	6812      	ldr	r2, [r2, #0]
 8019130:	601a      	str	r2, [r3, #0]
 8019132:	4770      	bx	lr
 8019134:	200003f8 	.word	0x200003f8
 8019138:	200001d4 	.word	0x200001d4

0801913c <_MultiArrayDimension__cdr_serialize>:
 801913c:	b1d0      	cbz	r0, 8019174 <_MultiArrayDimension__cdr_serialize+0x38>
 801913e:	b570      	push	{r4, r5, r6, lr}
 8019140:	6806      	ldr	r6, [r0, #0]
 8019142:	460d      	mov	r5, r1
 8019144:	4604      	mov	r4, r0
 8019146:	b196      	cbz	r6, 801916e <_MultiArrayDimension__cdr_serialize+0x32>
 8019148:	4630      	mov	r0, r6
 801914a:	f7e7 f873 	bl	8000234 <strlen>
 801914e:	1c42      	adds	r2, r0, #1
 8019150:	4631      	mov	r1, r6
 8019152:	6060      	str	r0, [r4, #4]
 8019154:	4628      	mov	r0, r5
 8019156:	f7f8 f997 	bl	8011488 <ucdr_serialize_sequence_char>
 801915a:	68e1      	ldr	r1, [r4, #12]
 801915c:	4628      	mov	r0, r5
 801915e:	f7f4 f91b 	bl	800d398 <ucdr_serialize_uint32_t>
 8019162:	6921      	ldr	r1, [r4, #16]
 8019164:	4628      	mov	r0, r5
 8019166:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801916a:	f7f4 b915 	b.w	800d398 <ucdr_serialize_uint32_t>
 801916e:	4632      	mov	r2, r6
 8019170:	4630      	mov	r0, r6
 8019172:	e7ed      	b.n	8019150 <_MultiArrayDimension__cdr_serialize+0x14>
 8019174:	4770      	bx	lr
 8019176:	bf00      	nop

08019178 <get_serialized_size_std_msgs__msg__MultiArrayDimension>:
 8019178:	b570      	push	{r4, r5, r6, lr}
 801917a:	4604      	mov	r4, r0
 801917c:	b1b0      	cbz	r0, 80191ac <get_serialized_size_std_msgs__msg__MultiArrayDimension+0x34>
 801917e:	460d      	mov	r5, r1
 8019180:	4628      	mov	r0, r5
 8019182:	2104      	movs	r1, #4
 8019184:	f7f5 f9d8 	bl	800e538 <ucdr_alignment>
 8019188:	6866      	ldr	r6, [r4, #4]
 801918a:	1d6b      	adds	r3, r5, #5
 801918c:	4433      	add	r3, r6
 801918e:	181e      	adds	r6, r3, r0
 8019190:	2104      	movs	r1, #4
 8019192:	4630      	mov	r0, r6
 8019194:	f7f5 f9d0 	bl	800e538 <ucdr_alignment>
 8019198:	1d04      	adds	r4, r0, #4
 801919a:	4434      	add	r4, r6
 801919c:	2104      	movs	r1, #4
 801919e:	4620      	mov	r0, r4
 80191a0:	f7f5 f9ca 	bl	800e538 <ucdr_alignment>
 80191a4:	f1c5 0504 	rsb	r5, r5, #4
 80191a8:	4428      	add	r0, r5
 80191aa:	4420      	add	r0, r4
 80191ac:	bd70      	pop	{r4, r5, r6, pc}
 80191ae:	bf00      	nop

080191b0 <_MultiArrayDimension__cdr_deserialize>:
 80191b0:	b570      	push	{r4, r5, r6, lr}
 80191b2:	460c      	mov	r4, r1
 80191b4:	b082      	sub	sp, #8
 80191b6:	b1d9      	cbz	r1, 80191f0 <_MultiArrayDimension__cdr_deserialize+0x40>
 80191b8:	688e      	ldr	r6, [r1, #8]
 80191ba:	6809      	ldr	r1, [r1, #0]
 80191bc:	ab01      	add	r3, sp, #4
 80191be:	4632      	mov	r2, r6
 80191c0:	4605      	mov	r5, r0
 80191c2:	f7f8 f973 	bl	80114ac <ucdr_deserialize_sequence_char>
 80191c6:	9b01      	ldr	r3, [sp, #4]
 80191c8:	b970      	cbnz	r0, 80191e8 <_MultiArrayDimension__cdr_deserialize+0x38>
 80191ca:	429e      	cmp	r6, r3
 80191cc:	d313      	bcc.n	80191f6 <_MultiArrayDimension__cdr_deserialize+0x46>
 80191ce:	f104 010c 	add.w	r1, r4, #12
 80191d2:	4628      	mov	r0, r5
 80191d4:	f7f4 fa10 	bl	800d5f8 <ucdr_deserialize_uint32_t>
 80191d8:	f104 0110 	add.w	r1, r4, #16
 80191dc:	4628      	mov	r0, r5
 80191de:	b002      	add	sp, #8
 80191e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80191e4:	f7f4 ba08 	b.w	800d5f8 <ucdr_deserialize_uint32_t>
 80191e8:	b103      	cbz	r3, 80191ec <_MultiArrayDimension__cdr_deserialize+0x3c>
 80191ea:	3b01      	subs	r3, #1
 80191ec:	6063      	str	r3, [r4, #4]
 80191ee:	e7ee      	b.n	80191ce <_MultiArrayDimension__cdr_deserialize+0x1e>
 80191f0:	4608      	mov	r0, r1
 80191f2:	b002      	add	sp, #8
 80191f4:	bd70      	pop	{r4, r5, r6, pc}
 80191f6:	2101      	movs	r1, #1
 80191f8:	75a8      	strb	r0, [r5, #22]
 80191fa:	7569      	strb	r1, [r5, #21]
 80191fc:	6060      	str	r0, [r4, #4]
 80191fe:	4628      	mov	r0, r5
 8019200:	f7f5 f9b0 	bl	800e564 <ucdr_align_to>
 8019204:	9901      	ldr	r1, [sp, #4]
 8019206:	4628      	mov	r0, r5
 8019208:	f7f5 f9e2 	bl	800e5d0 <ucdr_advance_buffer>
 801920c:	e7df      	b.n	80191ce <_MultiArrayDimension__cdr_deserialize+0x1e>
 801920e:	bf00      	nop

08019210 <_MultiArrayDimension__max_serialized_size>:
 8019210:	b510      	push	{r4, lr}
 8019212:	2104      	movs	r1, #4
 8019214:	2000      	movs	r0, #0
 8019216:	f7f5 f98f 	bl	800e538 <ucdr_alignment>
 801921a:	1d04      	adds	r4, r0, #4
 801921c:	2104      	movs	r1, #4
 801921e:	4620      	mov	r0, r4
 8019220:	f7f5 f98a 	bl	800e538 <ucdr_alignment>
 8019224:	3004      	adds	r0, #4
 8019226:	4420      	add	r0, r4
 8019228:	bd10      	pop	{r4, pc}
 801922a:	bf00      	nop

0801922c <_MultiArrayDimension__get_serialized_size>:
 801922c:	b510      	push	{r4, lr}
 801922e:	4604      	mov	r4, r0
 8019230:	b190      	cbz	r0, 8019258 <_MultiArrayDimension__get_serialized_size+0x2c>
 8019232:	2104      	movs	r1, #4
 8019234:	2000      	movs	r0, #0
 8019236:	f7f5 f97f 	bl	800e538 <ucdr_alignment>
 801923a:	6863      	ldr	r3, [r4, #4]
 801923c:	3305      	adds	r3, #5
 801923e:	181c      	adds	r4, r3, r0
 8019240:	2104      	movs	r1, #4
 8019242:	4620      	mov	r0, r4
 8019244:	f7f5 f978 	bl	800e538 <ucdr_alignment>
 8019248:	3004      	adds	r0, #4
 801924a:	4404      	add	r4, r0
 801924c:	2104      	movs	r1, #4
 801924e:	4620      	mov	r0, r4
 8019250:	f7f5 f972 	bl	800e538 <ucdr_alignment>
 8019254:	3004      	adds	r0, #4
 8019256:	4420      	add	r0, r4
 8019258:	bd10      	pop	{r4, pc}
 801925a:	bf00      	nop

0801925c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension>:
 801925c:	4800      	ldr	r0, [pc, #0]	@ (8019260 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension+0x4>)
 801925e:	4770      	bx	lr
 8019260:	20000404 	.word	0x20000404

08019264 <ucdr_serialize_endian_array_char>:
 8019264:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019268:	4619      	mov	r1, r3
 801926a:	461f      	mov	r7, r3
 801926c:	4605      	mov	r5, r0
 801926e:	4690      	mov	r8, r2
 8019270:	f7f5 f90a 	bl	800e488 <ucdr_check_buffer_available_for>
 8019274:	b9e0      	cbnz	r0, 80192b0 <ucdr_serialize_endian_array_char+0x4c>
 8019276:	463e      	mov	r6, r7
 8019278:	e009      	b.n	801928e <ucdr_serialize_endian_array_char+0x2a>
 801927a:	68a8      	ldr	r0, [r5, #8]
 801927c:	f002 f937 	bl	801b4ee <memcpy>
 8019280:	68ab      	ldr	r3, [r5, #8]
 8019282:	6928      	ldr	r0, [r5, #16]
 8019284:	4423      	add	r3, r4
 8019286:	4420      	add	r0, r4
 8019288:	1b36      	subs	r6, r6, r4
 801928a:	60ab      	str	r3, [r5, #8]
 801928c:	6128      	str	r0, [r5, #16]
 801928e:	4631      	mov	r1, r6
 8019290:	2201      	movs	r2, #1
 8019292:	4628      	mov	r0, r5
 8019294:	f7f5 f980 	bl	800e598 <ucdr_check_final_buffer_behavior_array>
 8019298:	1bb9      	subs	r1, r7, r6
 801929a:	4441      	add	r1, r8
 801929c:	4604      	mov	r4, r0
 801929e:	4602      	mov	r2, r0
 80192a0:	2800      	cmp	r0, #0
 80192a2:	d1ea      	bne.n	801927a <ucdr_serialize_endian_array_char+0x16>
 80192a4:	2301      	movs	r3, #1
 80192a6:	7da8      	ldrb	r0, [r5, #22]
 80192a8:	756b      	strb	r3, [r5, #21]
 80192aa:	4058      	eors	r0, r3
 80192ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80192b0:	463a      	mov	r2, r7
 80192b2:	68a8      	ldr	r0, [r5, #8]
 80192b4:	4641      	mov	r1, r8
 80192b6:	f002 f91a 	bl	801b4ee <memcpy>
 80192ba:	68aa      	ldr	r2, [r5, #8]
 80192bc:	692b      	ldr	r3, [r5, #16]
 80192be:	443a      	add	r2, r7
 80192c0:	443b      	add	r3, r7
 80192c2:	60aa      	str	r2, [r5, #8]
 80192c4:	612b      	str	r3, [r5, #16]
 80192c6:	e7ed      	b.n	80192a4 <ucdr_serialize_endian_array_char+0x40>

080192c8 <ucdr_deserialize_endian_array_char>:
 80192c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80192cc:	4619      	mov	r1, r3
 80192ce:	461f      	mov	r7, r3
 80192d0:	4605      	mov	r5, r0
 80192d2:	4690      	mov	r8, r2
 80192d4:	f7f5 f8d8 	bl	800e488 <ucdr_check_buffer_available_for>
 80192d8:	b9e0      	cbnz	r0, 8019314 <ucdr_deserialize_endian_array_char+0x4c>
 80192da:	463e      	mov	r6, r7
 80192dc:	e009      	b.n	80192f2 <ucdr_deserialize_endian_array_char+0x2a>
 80192de:	68a9      	ldr	r1, [r5, #8]
 80192e0:	f002 f905 	bl	801b4ee <memcpy>
 80192e4:	68ab      	ldr	r3, [r5, #8]
 80192e6:	6928      	ldr	r0, [r5, #16]
 80192e8:	4423      	add	r3, r4
 80192ea:	4420      	add	r0, r4
 80192ec:	1b36      	subs	r6, r6, r4
 80192ee:	60ab      	str	r3, [r5, #8]
 80192f0:	6128      	str	r0, [r5, #16]
 80192f2:	2201      	movs	r2, #1
 80192f4:	4631      	mov	r1, r6
 80192f6:	4628      	mov	r0, r5
 80192f8:	f7f5 f94e 	bl	800e598 <ucdr_check_final_buffer_behavior_array>
 80192fc:	4604      	mov	r4, r0
 80192fe:	1bb8      	subs	r0, r7, r6
 8019300:	4440      	add	r0, r8
 8019302:	4622      	mov	r2, r4
 8019304:	2c00      	cmp	r4, #0
 8019306:	d1ea      	bne.n	80192de <ucdr_deserialize_endian_array_char+0x16>
 8019308:	2301      	movs	r3, #1
 801930a:	7da8      	ldrb	r0, [r5, #22]
 801930c:	756b      	strb	r3, [r5, #21]
 801930e:	4058      	eors	r0, r3
 8019310:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019314:	463a      	mov	r2, r7
 8019316:	68a9      	ldr	r1, [r5, #8]
 8019318:	4640      	mov	r0, r8
 801931a:	f002 f8e8 	bl	801b4ee <memcpy>
 801931e:	68aa      	ldr	r2, [r5, #8]
 8019320:	692b      	ldr	r3, [r5, #16]
 8019322:	443a      	add	r2, r7
 8019324:	443b      	add	r3, r7
 8019326:	60aa      	str	r2, [r5, #8]
 8019328:	612b      	str	r3, [r5, #16]
 801932a:	e7ed      	b.n	8019308 <ucdr_deserialize_endian_array_char+0x40>

0801932c <ucdr_serialize_array_uint8_t>:
 801932c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019330:	4688      	mov	r8, r1
 8019332:	4611      	mov	r1, r2
 8019334:	4617      	mov	r7, r2
 8019336:	4605      	mov	r5, r0
 8019338:	f7f5 f8a6 	bl	800e488 <ucdr_check_buffer_available_for>
 801933c:	b9e0      	cbnz	r0, 8019378 <ucdr_serialize_array_uint8_t+0x4c>
 801933e:	463e      	mov	r6, r7
 8019340:	e009      	b.n	8019356 <ucdr_serialize_array_uint8_t+0x2a>
 8019342:	68a8      	ldr	r0, [r5, #8]
 8019344:	f002 f8d3 	bl	801b4ee <memcpy>
 8019348:	68aa      	ldr	r2, [r5, #8]
 801934a:	692b      	ldr	r3, [r5, #16]
 801934c:	4422      	add	r2, r4
 801934e:	4423      	add	r3, r4
 8019350:	1b36      	subs	r6, r6, r4
 8019352:	60aa      	str	r2, [r5, #8]
 8019354:	612b      	str	r3, [r5, #16]
 8019356:	4631      	mov	r1, r6
 8019358:	2201      	movs	r2, #1
 801935a:	4628      	mov	r0, r5
 801935c:	f7f5 f91c 	bl	800e598 <ucdr_check_final_buffer_behavior_array>
 8019360:	1bb9      	subs	r1, r7, r6
 8019362:	4441      	add	r1, r8
 8019364:	4604      	mov	r4, r0
 8019366:	4602      	mov	r2, r0
 8019368:	2800      	cmp	r0, #0
 801936a:	d1ea      	bne.n	8019342 <ucdr_serialize_array_uint8_t+0x16>
 801936c:	2301      	movs	r3, #1
 801936e:	7da8      	ldrb	r0, [r5, #22]
 8019370:	756b      	strb	r3, [r5, #21]
 8019372:	4058      	eors	r0, r3
 8019374:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019378:	463a      	mov	r2, r7
 801937a:	68a8      	ldr	r0, [r5, #8]
 801937c:	4641      	mov	r1, r8
 801937e:	f002 f8b6 	bl	801b4ee <memcpy>
 8019382:	68aa      	ldr	r2, [r5, #8]
 8019384:	692b      	ldr	r3, [r5, #16]
 8019386:	443a      	add	r2, r7
 8019388:	443b      	add	r3, r7
 801938a:	60aa      	str	r2, [r5, #8]
 801938c:	612b      	str	r3, [r5, #16]
 801938e:	e7ed      	b.n	801936c <ucdr_serialize_array_uint8_t+0x40>

08019390 <ucdr_serialize_endian_array_uint8_t>:
 8019390:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019394:	4619      	mov	r1, r3
 8019396:	461f      	mov	r7, r3
 8019398:	4605      	mov	r5, r0
 801939a:	4690      	mov	r8, r2
 801939c:	f7f5 f874 	bl	800e488 <ucdr_check_buffer_available_for>
 80193a0:	b9e0      	cbnz	r0, 80193dc <ucdr_serialize_endian_array_uint8_t+0x4c>
 80193a2:	463e      	mov	r6, r7
 80193a4:	e009      	b.n	80193ba <ucdr_serialize_endian_array_uint8_t+0x2a>
 80193a6:	68a8      	ldr	r0, [r5, #8]
 80193a8:	f002 f8a1 	bl	801b4ee <memcpy>
 80193ac:	68ab      	ldr	r3, [r5, #8]
 80193ae:	6928      	ldr	r0, [r5, #16]
 80193b0:	4423      	add	r3, r4
 80193b2:	4420      	add	r0, r4
 80193b4:	1b36      	subs	r6, r6, r4
 80193b6:	60ab      	str	r3, [r5, #8]
 80193b8:	6128      	str	r0, [r5, #16]
 80193ba:	4631      	mov	r1, r6
 80193bc:	2201      	movs	r2, #1
 80193be:	4628      	mov	r0, r5
 80193c0:	f7f5 f8ea 	bl	800e598 <ucdr_check_final_buffer_behavior_array>
 80193c4:	1bb9      	subs	r1, r7, r6
 80193c6:	4441      	add	r1, r8
 80193c8:	4604      	mov	r4, r0
 80193ca:	4602      	mov	r2, r0
 80193cc:	2800      	cmp	r0, #0
 80193ce:	d1ea      	bne.n	80193a6 <ucdr_serialize_endian_array_uint8_t+0x16>
 80193d0:	2301      	movs	r3, #1
 80193d2:	7da8      	ldrb	r0, [r5, #22]
 80193d4:	756b      	strb	r3, [r5, #21]
 80193d6:	4058      	eors	r0, r3
 80193d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80193dc:	463a      	mov	r2, r7
 80193de:	68a8      	ldr	r0, [r5, #8]
 80193e0:	4641      	mov	r1, r8
 80193e2:	f002 f884 	bl	801b4ee <memcpy>
 80193e6:	68aa      	ldr	r2, [r5, #8]
 80193e8:	692b      	ldr	r3, [r5, #16]
 80193ea:	443a      	add	r2, r7
 80193ec:	443b      	add	r3, r7
 80193ee:	60aa      	str	r2, [r5, #8]
 80193f0:	612b      	str	r3, [r5, #16]
 80193f2:	e7ed      	b.n	80193d0 <ucdr_serialize_endian_array_uint8_t+0x40>

080193f4 <ucdr_deserialize_array_uint8_t>:
 80193f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80193f8:	4688      	mov	r8, r1
 80193fa:	4611      	mov	r1, r2
 80193fc:	4617      	mov	r7, r2
 80193fe:	4605      	mov	r5, r0
 8019400:	f7f5 f842 	bl	800e488 <ucdr_check_buffer_available_for>
 8019404:	b9e0      	cbnz	r0, 8019440 <ucdr_deserialize_array_uint8_t+0x4c>
 8019406:	463e      	mov	r6, r7
 8019408:	e009      	b.n	801941e <ucdr_deserialize_array_uint8_t+0x2a>
 801940a:	68a9      	ldr	r1, [r5, #8]
 801940c:	f002 f86f 	bl	801b4ee <memcpy>
 8019410:	68aa      	ldr	r2, [r5, #8]
 8019412:	692b      	ldr	r3, [r5, #16]
 8019414:	4422      	add	r2, r4
 8019416:	4423      	add	r3, r4
 8019418:	1b36      	subs	r6, r6, r4
 801941a:	60aa      	str	r2, [r5, #8]
 801941c:	612b      	str	r3, [r5, #16]
 801941e:	2201      	movs	r2, #1
 8019420:	4631      	mov	r1, r6
 8019422:	4628      	mov	r0, r5
 8019424:	f7f5 f8b8 	bl	800e598 <ucdr_check_final_buffer_behavior_array>
 8019428:	4604      	mov	r4, r0
 801942a:	1bb8      	subs	r0, r7, r6
 801942c:	4440      	add	r0, r8
 801942e:	4622      	mov	r2, r4
 8019430:	2c00      	cmp	r4, #0
 8019432:	d1ea      	bne.n	801940a <ucdr_deserialize_array_uint8_t+0x16>
 8019434:	2301      	movs	r3, #1
 8019436:	7da8      	ldrb	r0, [r5, #22]
 8019438:	756b      	strb	r3, [r5, #21]
 801943a:	4058      	eors	r0, r3
 801943c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019440:	463a      	mov	r2, r7
 8019442:	68a9      	ldr	r1, [r5, #8]
 8019444:	4640      	mov	r0, r8
 8019446:	f002 f852 	bl	801b4ee <memcpy>
 801944a:	68aa      	ldr	r2, [r5, #8]
 801944c:	692b      	ldr	r3, [r5, #16]
 801944e:	443a      	add	r2, r7
 8019450:	443b      	add	r3, r7
 8019452:	60aa      	str	r2, [r5, #8]
 8019454:	612b      	str	r3, [r5, #16]
 8019456:	e7ed      	b.n	8019434 <ucdr_deserialize_array_uint8_t+0x40>

08019458 <ucdr_deserialize_endian_array_uint8_t>:
 8019458:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801945c:	4619      	mov	r1, r3
 801945e:	461f      	mov	r7, r3
 8019460:	4605      	mov	r5, r0
 8019462:	4690      	mov	r8, r2
 8019464:	f7f5 f810 	bl	800e488 <ucdr_check_buffer_available_for>
 8019468:	b9e0      	cbnz	r0, 80194a4 <ucdr_deserialize_endian_array_uint8_t+0x4c>
 801946a:	463e      	mov	r6, r7
 801946c:	e009      	b.n	8019482 <ucdr_deserialize_endian_array_uint8_t+0x2a>
 801946e:	68a9      	ldr	r1, [r5, #8]
 8019470:	f002 f83d 	bl	801b4ee <memcpy>
 8019474:	68ab      	ldr	r3, [r5, #8]
 8019476:	6928      	ldr	r0, [r5, #16]
 8019478:	4423      	add	r3, r4
 801947a:	4420      	add	r0, r4
 801947c:	1b36      	subs	r6, r6, r4
 801947e:	60ab      	str	r3, [r5, #8]
 8019480:	6128      	str	r0, [r5, #16]
 8019482:	2201      	movs	r2, #1
 8019484:	4631      	mov	r1, r6
 8019486:	4628      	mov	r0, r5
 8019488:	f7f5 f886 	bl	800e598 <ucdr_check_final_buffer_behavior_array>
 801948c:	4604      	mov	r4, r0
 801948e:	1bb8      	subs	r0, r7, r6
 8019490:	4440      	add	r0, r8
 8019492:	4622      	mov	r2, r4
 8019494:	2c00      	cmp	r4, #0
 8019496:	d1ea      	bne.n	801946e <ucdr_deserialize_endian_array_uint8_t+0x16>
 8019498:	2301      	movs	r3, #1
 801949a:	7da8      	ldrb	r0, [r5, #22]
 801949c:	756b      	strb	r3, [r5, #21]
 801949e:	4058      	eors	r0, r3
 80194a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80194a4:	463a      	mov	r2, r7
 80194a6:	68a9      	ldr	r1, [r5, #8]
 80194a8:	4640      	mov	r0, r8
 80194aa:	f002 f820 	bl	801b4ee <memcpy>
 80194ae:	68aa      	ldr	r2, [r5, #8]
 80194b0:	692b      	ldr	r3, [r5, #16]
 80194b2:	443a      	add	r2, r7
 80194b4:	443b      	add	r3, r7
 80194b6:	60aa      	str	r2, [r5, #8]
 80194b8:	612b      	str	r3, [r5, #16]
 80194ba:	e7ed      	b.n	8019498 <ucdr_deserialize_endian_array_uint8_t+0x40>

080194bc <ucdr_serialize_endian_array_double>:
 80194bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80194c0:	4688      	mov	r8, r1
 80194c2:	2108      	movs	r1, #8
 80194c4:	4604      	mov	r4, r0
 80194c6:	4616      	mov	r6, r2
 80194c8:	461f      	mov	r7, r3
 80194ca:	f7f5 f83d 	bl	800e548 <ucdr_buffer_alignment>
 80194ce:	4601      	mov	r1, r0
 80194d0:	4620      	mov	r0, r4
 80194d2:	7d65      	ldrb	r5, [r4, #21]
 80194d4:	f7f5 f87c 	bl	800e5d0 <ucdr_advance_buffer>
 80194d8:	f1b8 0f01 	cmp.w	r8, #1
 80194dc:	7565      	strb	r5, [r4, #21]
 80194de:	d00f      	beq.n	8019500 <ucdr_serialize_endian_array_double+0x44>
 80194e0:	2500      	movs	r5, #0
 80194e2:	b147      	cbz	r7, 80194f6 <ucdr_serialize_endian_array_double+0x3a>
 80194e4:	ecb6 0b02 	vldmia	r6!, {d0}
 80194e8:	4641      	mov	r1, r8
 80194ea:	4620      	mov	r0, r4
 80194ec:	3501      	adds	r5, #1
 80194ee:	f7f4 fd65 	bl	800dfbc <ucdr_serialize_endian_double>
 80194f2:	42af      	cmp	r7, r5
 80194f4:	d1f6      	bne.n	80194e4 <ucdr_serialize_endian_array_double+0x28>
 80194f6:	7da0      	ldrb	r0, [r4, #22]
 80194f8:	f080 0001 	eor.w	r0, r0, #1
 80194fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019500:	00ff      	lsls	r7, r7, #3
 8019502:	4639      	mov	r1, r7
 8019504:	4620      	mov	r0, r4
 8019506:	f7f4 ffbf 	bl	800e488 <ucdr_check_buffer_available_for>
 801950a:	b9f8      	cbnz	r0, 801954c <ucdr_serialize_endian_array_double+0x90>
 801950c:	46b8      	mov	r8, r7
 801950e:	e00a      	b.n	8019526 <ucdr_serialize_endian_array_double+0x6a>
 8019510:	68a0      	ldr	r0, [r4, #8]
 8019512:	f001 ffec 	bl	801b4ee <memcpy>
 8019516:	68a2      	ldr	r2, [r4, #8]
 8019518:	6923      	ldr	r3, [r4, #16]
 801951a:	442a      	add	r2, r5
 801951c:	442b      	add	r3, r5
 801951e:	eba8 0805 	sub.w	r8, r8, r5
 8019522:	60a2      	str	r2, [r4, #8]
 8019524:	6123      	str	r3, [r4, #16]
 8019526:	4641      	mov	r1, r8
 8019528:	2208      	movs	r2, #8
 801952a:	4620      	mov	r0, r4
 801952c:	f7f5 f834 	bl	800e598 <ucdr_check_final_buffer_behavior_array>
 8019530:	eba7 0108 	sub.w	r1, r7, r8
 8019534:	4431      	add	r1, r6
 8019536:	4605      	mov	r5, r0
 8019538:	4602      	mov	r2, r0
 801953a:	2800      	cmp	r0, #0
 801953c:	d1e8      	bne.n	8019510 <ucdr_serialize_endian_array_double+0x54>
 801953e:	7da0      	ldrb	r0, [r4, #22]
 8019540:	2308      	movs	r3, #8
 8019542:	7563      	strb	r3, [r4, #21]
 8019544:	f080 0001 	eor.w	r0, r0, #1
 8019548:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801954c:	463a      	mov	r2, r7
 801954e:	68a0      	ldr	r0, [r4, #8]
 8019550:	4631      	mov	r1, r6
 8019552:	f001 ffcc 	bl	801b4ee <memcpy>
 8019556:	68a2      	ldr	r2, [r4, #8]
 8019558:	6923      	ldr	r3, [r4, #16]
 801955a:	443a      	add	r2, r7
 801955c:	441f      	add	r7, r3
 801955e:	60a2      	str	r2, [r4, #8]
 8019560:	6127      	str	r7, [r4, #16]
 8019562:	e7ec      	b.n	801953e <ucdr_serialize_endian_array_double+0x82>

08019564 <ucdr_deserialize_endian_array_double>:
 8019564:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019568:	4688      	mov	r8, r1
 801956a:	2108      	movs	r1, #8
 801956c:	4605      	mov	r5, r0
 801956e:	4614      	mov	r4, r2
 8019570:	461f      	mov	r7, r3
 8019572:	f7f4 ffe9 	bl	800e548 <ucdr_buffer_alignment>
 8019576:	4601      	mov	r1, r0
 8019578:	4628      	mov	r0, r5
 801957a:	7d6e      	ldrb	r6, [r5, #21]
 801957c:	f7f5 f828 	bl	800e5d0 <ucdr_advance_buffer>
 8019580:	f1b8 0f01 	cmp.w	r8, #1
 8019584:	756e      	strb	r6, [r5, #21]
 8019586:	d010      	beq.n	80195aa <ucdr_deserialize_endian_array_double+0x46>
 8019588:	2600      	movs	r6, #0
 801958a:	b14f      	cbz	r7, 80195a0 <ucdr_deserialize_endian_array_double+0x3c>
 801958c:	4622      	mov	r2, r4
 801958e:	4641      	mov	r1, r8
 8019590:	4628      	mov	r0, r5
 8019592:	3601      	adds	r6, #1
 8019594:	f7f4 feaa 	bl	800e2ec <ucdr_deserialize_endian_double>
 8019598:	42b7      	cmp	r7, r6
 801959a:	f104 0408 	add.w	r4, r4, #8
 801959e:	d1f5      	bne.n	801958c <ucdr_deserialize_endian_array_double+0x28>
 80195a0:	7da8      	ldrb	r0, [r5, #22]
 80195a2:	f080 0001 	eor.w	r0, r0, #1
 80195a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80195aa:	00ff      	lsls	r7, r7, #3
 80195ac:	4639      	mov	r1, r7
 80195ae:	4628      	mov	r0, r5
 80195b0:	f7f4 ff6a 	bl	800e488 <ucdr_check_buffer_available_for>
 80195b4:	b9f8      	cbnz	r0, 80195f6 <ucdr_deserialize_endian_array_double+0x92>
 80195b6:	46b8      	mov	r8, r7
 80195b8:	e00a      	b.n	80195d0 <ucdr_deserialize_endian_array_double+0x6c>
 80195ba:	68a9      	ldr	r1, [r5, #8]
 80195bc:	f001 ff97 	bl	801b4ee <memcpy>
 80195c0:	68aa      	ldr	r2, [r5, #8]
 80195c2:	692b      	ldr	r3, [r5, #16]
 80195c4:	4432      	add	r2, r6
 80195c6:	4433      	add	r3, r6
 80195c8:	eba8 0806 	sub.w	r8, r8, r6
 80195cc:	60aa      	str	r2, [r5, #8]
 80195ce:	612b      	str	r3, [r5, #16]
 80195d0:	2208      	movs	r2, #8
 80195d2:	4641      	mov	r1, r8
 80195d4:	4628      	mov	r0, r5
 80195d6:	f7f4 ffdf 	bl	800e598 <ucdr_check_final_buffer_behavior_array>
 80195da:	4606      	mov	r6, r0
 80195dc:	eba7 0008 	sub.w	r0, r7, r8
 80195e0:	4420      	add	r0, r4
 80195e2:	4632      	mov	r2, r6
 80195e4:	2e00      	cmp	r6, #0
 80195e6:	d1e8      	bne.n	80195ba <ucdr_deserialize_endian_array_double+0x56>
 80195e8:	7da8      	ldrb	r0, [r5, #22]
 80195ea:	2308      	movs	r3, #8
 80195ec:	756b      	strb	r3, [r5, #21]
 80195ee:	f080 0001 	eor.w	r0, r0, #1
 80195f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80195f6:	463a      	mov	r2, r7
 80195f8:	68a9      	ldr	r1, [r5, #8]
 80195fa:	4620      	mov	r0, r4
 80195fc:	f001 ff77 	bl	801b4ee <memcpy>
 8019600:	68aa      	ldr	r2, [r5, #8]
 8019602:	692b      	ldr	r3, [r5, #16]
 8019604:	443a      	add	r2, r7
 8019606:	441f      	add	r7, r3
 8019608:	60aa      	str	r2, [r5, #8]
 801960a:	612f      	str	r7, [r5, #16]
 801960c:	e7ec      	b.n	80195e8 <ucdr_deserialize_endian_array_double+0x84>
 801960e:	bf00      	nop

08019610 <ucdr_serialize_string>:
 8019610:	b510      	push	{r4, lr}
 8019612:	b082      	sub	sp, #8
 8019614:	4604      	mov	r4, r0
 8019616:	4608      	mov	r0, r1
 8019618:	9101      	str	r1, [sp, #4]
 801961a:	f7e6 fe0b 	bl	8000234 <strlen>
 801961e:	9901      	ldr	r1, [sp, #4]
 8019620:	1c42      	adds	r2, r0, #1
 8019622:	4620      	mov	r0, r4
 8019624:	b002      	add	sp, #8
 8019626:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801962a:	f7f7 bf2d 	b.w	8011488 <ucdr_serialize_sequence_char>
 801962e:	bf00      	nop

08019630 <ucdr_deserialize_string>:
 8019630:	b500      	push	{lr}
 8019632:	b083      	sub	sp, #12
 8019634:	ab01      	add	r3, sp, #4
 8019636:	f7f7 ff39 	bl	80114ac <ucdr_deserialize_sequence_char>
 801963a:	b003      	add	sp, #12
 801963c:	f85d fb04 	ldr.w	pc, [sp], #4

08019640 <uxr_init_input_best_effort_stream>:
 8019640:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8019644:	8003      	strh	r3, [r0, #0]
 8019646:	4770      	bx	lr

08019648 <uxr_reset_input_best_effort_stream>:
 8019648:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801964c:	8003      	strh	r3, [r0, #0]
 801964e:	4770      	bx	lr

08019650 <uxr_receive_best_effort_message>:
 8019650:	b538      	push	{r3, r4, r5, lr}
 8019652:	4604      	mov	r4, r0
 8019654:	8800      	ldrh	r0, [r0, #0]
 8019656:	460d      	mov	r5, r1
 8019658:	f000 fd42 	bl	801a0e0 <uxr_seq_num_cmp>
 801965c:	4603      	mov	r3, r0
 801965e:	2b00      	cmp	r3, #0
 8019660:	ea4f 70d0 	mov.w	r0, r0, lsr #31
 8019664:	bfb8      	it	lt
 8019666:	8025      	strhlt	r5, [r4, #0]
 8019668:	bd38      	pop	{r3, r4, r5, pc}
 801966a:	bf00      	nop

0801966c <on_full_input_buffer>:
 801966c:	b570      	push	{r4, r5, r6, lr}
 801966e:	4605      	mov	r5, r0
 8019670:	460c      	mov	r4, r1
 8019672:	682b      	ldr	r3, [r5, #0]
 8019674:	6809      	ldr	r1, [r1, #0]
 8019676:	8920      	ldrh	r0, [r4, #8]
 8019678:	6862      	ldr	r2, [r4, #4]
 801967a:	fbb2 f2f0 	udiv	r2, r2, r0
 801967e:	eba3 0c01 	sub.w	ip, r3, r1
 8019682:	fbbc fcf2 	udiv	ip, ip, r2
 8019686:	f10c 0c01 	add.w	ip, ip, #1
 801968a:	fa1f f38c 	uxth.w	r3, ip
 801968e:	fbb3 f6f0 	udiv	r6, r3, r0
 8019692:	fb00 3316 	mls	r3, r0, r6, r3
 8019696:	b29b      	uxth	r3, r3
 8019698:	fb02 f303 	mul.w	r3, r2, r3
 801969c:	1d18      	adds	r0, r3, #4
 801969e:	4408      	add	r0, r1
 80196a0:	7d26      	ldrb	r6, [r4, #20]
 80196a2:	f850 2c04 	ldr.w	r2, [r0, #-4]
 80196a6:	b116      	cbz	r6, 80196ae <on_full_input_buffer+0x42>
 80196a8:	2600      	movs	r6, #0
 80196aa:	f840 6c04 	str.w	r6, [r0, #-4]
 80196ae:	2a03      	cmp	r2, #3
 80196b0:	d801      	bhi.n	80196b6 <on_full_input_buffer+0x4a>
 80196b2:	2001      	movs	r0, #1
 80196b4:	bd70      	pop	{r4, r5, r6, pc}
 80196b6:	3308      	adds	r3, #8
 80196b8:	4419      	add	r1, r3
 80196ba:	4628      	mov	r0, r5
 80196bc:	692b      	ldr	r3, [r5, #16]
 80196be:	3a04      	subs	r2, #4
 80196c0:	f7f4 ff2e 	bl	800e520 <ucdr_init_buffer_origin>
 80196c4:	4628      	mov	r0, r5
 80196c6:	4903      	ldr	r1, [pc, #12]	@ (80196d4 <on_full_input_buffer+0x68>)
 80196c8:	4622      	mov	r2, r4
 80196ca:	f7f4 ff05 	bl	800e4d8 <ucdr_set_on_full_buffer_callback>
 80196ce:	2000      	movs	r0, #0
 80196d0:	bd70      	pop	{r4, r5, r6, pc}
 80196d2:	bf00      	nop
 80196d4:	0801966d 	.word	0x0801966d

080196d8 <uxr_init_input_reliable_stream>:
 80196d8:	b500      	push	{lr}
 80196da:	e9c0 1200 	strd	r1, r2, [r0]
 80196de:	f04f 0e00 	mov.w	lr, #0
 80196e2:	9a01      	ldr	r2, [sp, #4]
 80196e4:	8103      	strh	r3, [r0, #8]
 80196e6:	6102      	str	r2, [r0, #16]
 80196e8:	f880 e014 	strb.w	lr, [r0, #20]
 80196ec:	b1d3      	cbz	r3, 8019724 <uxr_init_input_reliable_stream+0x4c>
 80196ee:	f8c1 e000 	str.w	lr, [r1]
 80196f2:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 80196f6:	f1bc 0f01 	cmp.w	ip, #1
 80196fa:	d913      	bls.n	8019724 <uxr_init_input_reliable_stream+0x4c>
 80196fc:	2301      	movs	r3, #1
 80196fe:	fbb3 f1fc 	udiv	r1, r3, ip
 8019702:	fb0c 3111 	mls	r1, ip, r1, r3
 8019706:	b289      	uxth	r1, r1
 8019708:	6842      	ldr	r2, [r0, #4]
 801970a:	fbb2 f2fc 	udiv	r2, r2, ip
 801970e:	fb01 f202 	mul.w	r2, r1, r2
 8019712:	6801      	ldr	r1, [r0, #0]
 8019714:	f841 e002 	str.w	lr, [r1, r2]
 8019718:	3301      	adds	r3, #1
 801971a:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801971e:	b29b      	uxth	r3, r3
 8019720:	459c      	cmp	ip, r3
 8019722:	d8ec      	bhi.n	80196fe <uxr_init_input_reliable_stream+0x26>
 8019724:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8019728:	60c3      	str	r3, [r0, #12]
 801972a:	f85d fb04 	ldr.w	pc, [sp], #4
 801972e:	bf00      	nop

08019730 <uxr_reset_input_reliable_stream>:
 8019730:	8901      	ldrh	r1, [r0, #8]
 8019732:	b1e9      	cbz	r1, 8019770 <uxr_reset_input_reliable_stream+0x40>
 8019734:	f04f 0c00 	mov.w	ip, #0
 8019738:	b500      	push	{lr}
 801973a:	4663      	mov	r3, ip
 801973c:	46e6      	mov	lr, ip
 801973e:	fbb3 f2f1 	udiv	r2, r3, r1
 8019742:	fb01 3312 	mls	r3, r1, r2, r3
 8019746:	b29b      	uxth	r3, r3
 8019748:	6842      	ldr	r2, [r0, #4]
 801974a:	fbb2 f2f1 	udiv	r2, r2, r1
 801974e:	fb02 f303 	mul.w	r3, r2, r3
 8019752:	6802      	ldr	r2, [r0, #0]
 8019754:	f842 e003 	str.w	lr, [r2, r3]
 8019758:	f10c 0c01 	add.w	ip, ip, #1
 801975c:	8901      	ldrh	r1, [r0, #8]
 801975e:	fa1f f38c 	uxth.w	r3, ip
 8019762:	4299      	cmp	r1, r3
 8019764:	d8eb      	bhi.n	801973e <uxr_reset_input_reliable_stream+0xe>
 8019766:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801976a:	60c3      	str	r3, [r0, #12]
 801976c:	f85d fb04 	ldr.w	pc, [sp], #4
 8019770:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8019774:	60c3      	str	r3, [r0, #12]
 8019776:	4770      	bx	lr

08019778 <uxr_receive_reliable_message>:
 8019778:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801977c:	4604      	mov	r4, r0
 801977e:	460d      	mov	r5, r1
 8019780:	8901      	ldrh	r1, [r0, #8]
 8019782:	8980      	ldrh	r0, [r0, #12]
 8019784:	4690      	mov	r8, r2
 8019786:	461f      	mov	r7, r3
 8019788:	f000 fca2 	bl	801a0d0 <uxr_seq_num_add>
 801978c:	4629      	mov	r1, r5
 801978e:	4606      	mov	r6, r0
 8019790:	89a0      	ldrh	r0, [r4, #12]
 8019792:	f000 fca5 	bl	801a0e0 <uxr_seq_num_cmp>
 8019796:	2800      	cmp	r0, #0
 8019798:	db0a      	blt.n	80197b0 <uxr_receive_reliable_message+0x38>
 801979a:	2600      	movs	r6, #0
 801979c:	89e0      	ldrh	r0, [r4, #14]
 801979e:	4629      	mov	r1, r5
 80197a0:	f000 fc9e 	bl	801a0e0 <uxr_seq_num_cmp>
 80197a4:	2800      	cmp	r0, #0
 80197a6:	da00      	bge.n	80197aa <uxr_receive_reliable_message+0x32>
 80197a8:	81e5      	strh	r5, [r4, #14]
 80197aa:	4630      	mov	r0, r6
 80197ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80197b0:	4630      	mov	r0, r6
 80197b2:	4629      	mov	r1, r5
 80197b4:	f000 fc94 	bl	801a0e0 <uxr_seq_num_cmp>
 80197b8:	2800      	cmp	r0, #0
 80197ba:	dbee      	blt.n	801979a <uxr_receive_reliable_message+0x22>
 80197bc:	6923      	ldr	r3, [r4, #16]
 80197be:	4640      	mov	r0, r8
 80197c0:	4798      	blx	r3
 80197c2:	2101      	movs	r1, #1
 80197c4:	4681      	mov	r9, r0
 80197c6:	89a0      	ldrh	r0, [r4, #12]
 80197c8:	f000 fc82 	bl	801a0d0 <uxr_seq_num_add>
 80197cc:	f1b9 0f00 	cmp.w	r9, #0
 80197d0:	d101      	bne.n	80197d6 <uxr_receive_reliable_message+0x5e>
 80197d2:	4285      	cmp	r5, r0
 80197d4:	d047      	beq.n	8019866 <uxr_receive_reliable_message+0xee>
 80197d6:	8922      	ldrh	r2, [r4, #8]
 80197d8:	fbb5 f0f2 	udiv	r0, r5, r2
 80197dc:	fb02 5010 	mls	r0, r2, r0, r5
 80197e0:	b280      	uxth	r0, r0
 80197e2:	6863      	ldr	r3, [r4, #4]
 80197e4:	fbb3 f3f2 	udiv	r3, r3, r2
 80197e8:	fb00 f303 	mul.w	r3, r0, r3
 80197ec:	6820      	ldr	r0, [r4, #0]
 80197ee:	3304      	adds	r3, #4
 80197f0:	4418      	add	r0, r3
 80197f2:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80197f6:	2b00      	cmp	r3, #0
 80197f8:	d1cf      	bne.n	801979a <uxr_receive_reliable_message+0x22>
 80197fa:	4641      	mov	r1, r8
 80197fc:	463a      	mov	r2, r7
 80197fe:	f001 fe76 	bl	801b4ee <memcpy>
 8019802:	8921      	ldrh	r1, [r4, #8]
 8019804:	fbb5 f2f1 	udiv	r2, r5, r1
 8019808:	fb01 5212 	mls	r2, r1, r2, r5
 801980c:	b292      	uxth	r2, r2
 801980e:	6863      	ldr	r3, [r4, #4]
 8019810:	fbb3 f3f1 	udiv	r3, r3, r1
 8019814:	fb02 f303 	mul.w	r3, r2, r3
 8019818:	6822      	ldr	r2, [r4, #0]
 801981a:	50d7      	str	r7, [r2, r3]
 801981c:	9a08      	ldr	r2, [sp, #32]
 801981e:	2301      	movs	r3, #1
 8019820:	7013      	strb	r3, [r2, #0]
 8019822:	f1b9 0f00 	cmp.w	r9, #0
 8019826:	d0b8      	beq.n	801979a <uxr_receive_reliable_message+0x22>
 8019828:	89a6      	ldrh	r6, [r4, #12]
 801982a:	4630      	mov	r0, r6
 801982c:	2101      	movs	r1, #1
 801982e:	f000 fc4f 	bl	801a0d0 <uxr_seq_num_add>
 8019832:	8922      	ldrh	r2, [r4, #8]
 8019834:	6863      	ldr	r3, [r4, #4]
 8019836:	fbb3 f3f2 	udiv	r3, r3, r2
 801983a:	4606      	mov	r6, r0
 801983c:	fbb0 f0f2 	udiv	r0, r0, r2
 8019840:	fb02 6010 	mls	r0, r2, r0, r6
 8019844:	b280      	uxth	r0, r0
 8019846:	fb00 f303 	mul.w	r3, r0, r3
 801984a:	6820      	ldr	r0, [r4, #0]
 801984c:	3304      	adds	r3, #4
 801984e:	4418      	add	r0, r3
 8019850:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8019854:	2b00      	cmp	r3, #0
 8019856:	d0a0      	beq.n	801979a <uxr_receive_reliable_message+0x22>
 8019858:	6923      	ldr	r3, [r4, #16]
 801985a:	4798      	blx	r3
 801985c:	2802      	cmp	r0, #2
 801985e:	d008      	beq.n	8019872 <uxr_receive_reliable_message+0xfa>
 8019860:	2801      	cmp	r0, #1
 8019862:	d0e2      	beq.n	801982a <uxr_receive_reliable_message+0xb2>
 8019864:	e799      	b.n	801979a <uxr_receive_reliable_message+0x22>
 8019866:	9b08      	ldr	r3, [sp, #32]
 8019868:	81a5      	strh	r5, [r4, #12]
 801986a:	2601      	movs	r6, #1
 801986c:	f883 9000 	strb.w	r9, [r3]
 8019870:	e794      	b.n	801979c <uxr_receive_reliable_message+0x24>
 8019872:	2601      	movs	r6, #1
 8019874:	e792      	b.n	801979c <uxr_receive_reliable_message+0x24>
 8019876:	bf00      	nop

08019878 <uxr_next_input_reliable_buffer_available>:
 8019878:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801987c:	4604      	mov	r4, r0
 801987e:	460f      	mov	r7, r1
 8019880:	8980      	ldrh	r0, [r0, #12]
 8019882:	2101      	movs	r1, #1
 8019884:	4690      	mov	r8, r2
 8019886:	f000 fc23 	bl	801a0d0 <uxr_seq_num_add>
 801988a:	8922      	ldrh	r2, [r4, #8]
 801988c:	fbb0 f6f2 	udiv	r6, r0, r2
 8019890:	fb02 0616 	mls	r6, r2, r6, r0
 8019894:	b2b6      	uxth	r6, r6
 8019896:	6863      	ldr	r3, [r4, #4]
 8019898:	fbb3 f3f2 	udiv	r3, r3, r2
 801989c:	fb06 f303 	mul.w	r3, r6, r3
 80198a0:	6826      	ldr	r6, [r4, #0]
 80198a2:	3304      	adds	r3, #4
 80198a4:	441e      	add	r6, r3
 80198a6:	f856 9c04 	ldr.w	r9, [r6, #-4]
 80198aa:	f1b9 0f00 	cmp.w	r9, #0
 80198ae:	d023      	beq.n	80198f8 <uxr_next_input_reliable_buffer_available+0x80>
 80198b0:	6923      	ldr	r3, [r4, #16]
 80198b2:	4605      	mov	r5, r0
 80198b4:	4630      	mov	r0, r6
 80198b6:	4798      	blx	r3
 80198b8:	4682      	mov	sl, r0
 80198ba:	b300      	cbz	r0, 80198fe <uxr_next_input_reliable_buffer_available+0x86>
 80198bc:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 80198c0:	2101      	movs	r1, #1
 80198c2:	4650      	mov	r0, sl
 80198c4:	f000 fc04 	bl	801a0d0 <uxr_seq_num_add>
 80198c8:	8921      	ldrh	r1, [r4, #8]
 80198ca:	fbb0 f2f1 	udiv	r2, r0, r1
 80198ce:	4682      	mov	sl, r0
 80198d0:	fb01 0212 	mls	r2, r1, r2, r0
 80198d4:	e9d4 0300 	ldrd	r0, r3, [r4]
 80198d8:	b292      	uxth	r2, r2
 80198da:	fbb3 f3f1 	udiv	r3, r3, r1
 80198de:	fb02 f303 	mul.w	r3, r2, r3
 80198e2:	3304      	adds	r3, #4
 80198e4:	4418      	add	r0, r3
 80198e6:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80198ea:	b12b      	cbz	r3, 80198f8 <uxr_next_input_reliable_buffer_available+0x80>
 80198ec:	6923      	ldr	r3, [r4, #16]
 80198ee:	4798      	blx	r3
 80198f0:	2802      	cmp	r0, #2
 80198f2:	d01b      	beq.n	801992c <uxr_next_input_reliable_buffer_available+0xb4>
 80198f4:	2801      	cmp	r0, #1
 80198f6:	d0e3      	beq.n	80198c0 <uxr_next_input_reliable_buffer_available+0x48>
 80198f8:	2000      	movs	r0, #0
 80198fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80198fe:	464a      	mov	r2, r9
 8019900:	4631      	mov	r1, r6
 8019902:	4638      	mov	r0, r7
 8019904:	f7f4 fe14 	bl	800e530 <ucdr_init_buffer>
 8019908:	8921      	ldrh	r1, [r4, #8]
 801990a:	fbb5 f2f1 	udiv	r2, r5, r1
 801990e:	fb01 5212 	mls	r2, r1, r2, r5
 8019912:	b292      	uxth	r2, r2
 8019914:	6863      	ldr	r3, [r4, #4]
 8019916:	fbb3 f3f1 	udiv	r3, r3, r1
 801991a:	fb02 f303 	mul.w	r3, r2, r3
 801991e:	6822      	ldr	r2, [r4, #0]
 8019920:	f842 a003 	str.w	sl, [r2, r3]
 8019924:	2001      	movs	r0, #1
 8019926:	81a5      	strh	r5, [r4, #12]
 8019928:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801992c:	8920      	ldrh	r0, [r4, #8]
 801992e:	fbb5 f3f0 	udiv	r3, r5, r0
 8019932:	fb00 5513 	mls	r5, r0, r3, r5
 8019936:	b2ad      	uxth	r5, r5
 8019938:	6863      	ldr	r3, [r4, #4]
 801993a:	fbb3 f3f0 	udiv	r3, r3, r0
 801993e:	fb03 f505 	mul.w	r5, r3, r5
 8019942:	6823      	ldr	r3, [r4, #0]
 8019944:	2000      	movs	r0, #0
 8019946:	5158      	str	r0, [r3, r5]
 8019948:	eb06 0108 	add.w	r1, r6, r8
 801994c:	eba9 0208 	sub.w	r2, r9, r8
 8019950:	4638      	mov	r0, r7
 8019952:	f7f4 fded 	bl	800e530 <ucdr_init_buffer>
 8019956:	4638      	mov	r0, r7
 8019958:	4903      	ldr	r1, [pc, #12]	@ (8019968 <uxr_next_input_reliable_buffer_available+0xf0>)
 801995a:	4622      	mov	r2, r4
 801995c:	f7f4 fdbc 	bl	800e4d8 <ucdr_set_on_full_buffer_callback>
 8019960:	f8a4 a00c 	strh.w	sl, [r4, #12]
 8019964:	2001      	movs	r0, #1
 8019966:	e7c8      	b.n	80198fa <uxr_next_input_reliable_buffer_available+0x82>
 8019968:	0801966d 	.word	0x0801966d

0801996c <uxr_process_heartbeat>:
 801996c:	b538      	push	{r3, r4, r5, lr}
 801996e:	4611      	mov	r1, r2
 8019970:	4604      	mov	r4, r0
 8019972:	89c0      	ldrh	r0, [r0, #14]
 8019974:	4615      	mov	r5, r2
 8019976:	f000 fbb3 	bl	801a0e0 <uxr_seq_num_cmp>
 801997a:	2800      	cmp	r0, #0
 801997c:	bfb8      	it	lt
 801997e:	81e5      	strhlt	r5, [r4, #14]
 8019980:	bd38      	pop	{r3, r4, r5, pc}
 8019982:	bf00      	nop

08019984 <uxr_compute_acknack>:
 8019984:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019988:	8903      	ldrh	r3, [r0, #8]
 801998a:	8985      	ldrh	r5, [r0, #12]
 801998c:	4604      	mov	r4, r0
 801998e:	460e      	mov	r6, r1
 8019990:	b1d3      	cbz	r3, 80199c8 <uxr_compute_acknack+0x44>
 8019992:	4628      	mov	r0, r5
 8019994:	2701      	movs	r7, #1
 8019996:	e003      	b.n	80199a0 <uxr_compute_acknack+0x1c>
 8019998:	4567      	cmp	r7, ip
 801999a:	d215      	bcs.n	80199c8 <uxr_compute_acknack+0x44>
 801999c:	89a0      	ldrh	r0, [r4, #12]
 801999e:	3701      	adds	r7, #1
 80199a0:	b2b9      	uxth	r1, r7
 80199a2:	f000 fb95 	bl	801a0d0 <uxr_seq_num_add>
 80199a6:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 80199aa:	fbb0 f3fc 	udiv	r3, r0, ip
 80199ae:	fb0c 0313 	mls	r3, ip, r3, r0
 80199b2:	b29a      	uxth	r2, r3
 80199b4:	e9d4 1300 	ldrd	r1, r3, [r4]
 80199b8:	fbb3 f3fc 	udiv	r3, r3, ip
 80199bc:	fb02 f303 	mul.w	r3, r2, r3
 80199c0:	58cb      	ldr	r3, [r1, r3]
 80199c2:	2b00      	cmp	r3, #0
 80199c4:	d1e8      	bne.n	8019998 <uxr_compute_acknack+0x14>
 80199c6:	4605      	mov	r5, r0
 80199c8:	8035      	strh	r5, [r6, #0]
 80199ca:	2101      	movs	r1, #1
 80199cc:	4628      	mov	r0, r5
 80199ce:	89e7      	ldrh	r7, [r4, #14]
 80199d0:	f000 fb82 	bl	801a0d8 <uxr_seq_num_sub>
 80199d4:	4601      	mov	r1, r0
 80199d6:	4638      	mov	r0, r7
 80199d8:	f000 fb7e 	bl	801a0d8 <uxr_seq_num_sub>
 80199dc:	4605      	mov	r5, r0
 80199de:	b318      	cbz	r0, 8019a28 <uxr_compute_acknack+0xa4>
 80199e0:	f04f 0900 	mov.w	r9, #0
 80199e4:	464f      	mov	r7, r9
 80199e6:	f04f 0801 	mov.w	r8, #1
 80199ea:	fa1f f189 	uxth.w	r1, r9
 80199ee:	8830      	ldrh	r0, [r6, #0]
 80199f0:	f000 fb6e 	bl	801a0d0 <uxr_seq_num_add>
 80199f4:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 80199f8:	fbb0 f3fc 	udiv	r3, r0, ip
 80199fc:	e9d4 1200 	ldrd	r1, r2, [r4]
 8019a00:	fb03 001c 	mls	r0, r3, ip, r0
 8019a04:	b283      	uxth	r3, r0
 8019a06:	fbb2 f2fc 	udiv	r2, r2, ip
 8019a0a:	fb02 f303 	mul.w	r3, r2, r3
 8019a0e:	fa08 f209 	lsl.w	r2, r8, r9
 8019a12:	58cb      	ldr	r3, [r1, r3]
 8019a14:	f109 0901 	add.w	r9, r9, #1
 8019a18:	b90b      	cbnz	r3, 8019a1e <uxr_compute_acknack+0x9a>
 8019a1a:	4317      	orrs	r7, r2
 8019a1c:	b2bf      	uxth	r7, r7
 8019a1e:	454d      	cmp	r5, r9
 8019a20:	d1e3      	bne.n	80199ea <uxr_compute_acknack+0x66>
 8019a22:	4638      	mov	r0, r7
 8019a24:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019a28:	4607      	mov	r7, r0
 8019a2a:	4638      	mov	r0, r7
 8019a2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08019a30 <uxr_init_output_best_effort_stream>:
 8019a30:	f64f 7cff 	movw	ip, #65535	@ 0xffff
 8019a34:	e9c0 3201 	strd	r3, r2, [r0, #4]
 8019a38:	6001      	str	r1, [r0, #0]
 8019a3a:	7303      	strb	r3, [r0, #12]
 8019a3c:	f8a0 c00e 	strh.w	ip, [r0, #14]
 8019a40:	4770      	bx	lr
 8019a42:	bf00      	nop

08019a44 <uxr_reset_output_best_effort_stream>:
 8019a44:	7b02      	ldrb	r2, [r0, #12]
 8019a46:	6042      	str	r2, [r0, #4]
 8019a48:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8019a4c:	81c3      	strh	r3, [r0, #14]
 8019a4e:	4770      	bx	lr

08019a50 <uxr_prepare_best_effort_buffer_to_write>:
 8019a50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019a52:	4604      	mov	r4, r0
 8019a54:	b083      	sub	sp, #12
 8019a56:	6840      	ldr	r0, [r0, #4]
 8019a58:	460d      	mov	r5, r1
 8019a5a:	4616      	mov	r6, r2
 8019a5c:	f7fa f8ae 	bl	8013bbc <uxr_submessage_padding>
 8019a60:	6863      	ldr	r3, [r4, #4]
 8019a62:	4418      	add	r0, r3
 8019a64:	68a3      	ldr	r3, [r4, #8]
 8019a66:	1942      	adds	r2, r0, r5
 8019a68:	4293      	cmp	r3, r2
 8019a6a:	bf2c      	ite	cs
 8019a6c:	2701      	movcs	r7, #1
 8019a6e:	2700      	movcc	r7, #0
 8019a70:	d202      	bcs.n	8019a78 <uxr_prepare_best_effort_buffer_to_write+0x28>
 8019a72:	4638      	mov	r0, r7
 8019a74:	b003      	add	sp, #12
 8019a76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019a78:	9000      	str	r0, [sp, #0]
 8019a7a:	6821      	ldr	r1, [r4, #0]
 8019a7c:	4630      	mov	r0, r6
 8019a7e:	2300      	movs	r3, #0
 8019a80:	f7f4 fd44 	bl	800e50c <ucdr_init_buffer_origin_offset>
 8019a84:	6861      	ldr	r1, [r4, #4]
 8019a86:	4638      	mov	r0, r7
 8019a88:	4429      	add	r1, r5
 8019a8a:	6061      	str	r1, [r4, #4]
 8019a8c:	b003      	add	sp, #12
 8019a8e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08019a90 <uxr_prepare_best_effort_buffer_to_send>:
 8019a90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019a94:	4604      	mov	r4, r0
 8019a96:	461d      	mov	r5, r3
 8019a98:	6840      	ldr	r0, [r0, #4]
 8019a9a:	7b23      	ldrb	r3, [r4, #12]
 8019a9c:	4298      	cmp	r0, r3
 8019a9e:	bf8c      	ite	hi
 8019aa0:	2601      	movhi	r6, #1
 8019aa2:	2600      	movls	r6, #0
 8019aa4:	d802      	bhi.n	8019aac <uxr_prepare_best_effort_buffer_to_send+0x1c>
 8019aa6:	4630      	mov	r0, r6
 8019aa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019aac:	4688      	mov	r8, r1
 8019aae:	89e0      	ldrh	r0, [r4, #14]
 8019ab0:	2101      	movs	r1, #1
 8019ab2:	4617      	mov	r7, r2
 8019ab4:	f000 fb0c 	bl	801a0d0 <uxr_seq_num_add>
 8019ab8:	6823      	ldr	r3, [r4, #0]
 8019aba:	81e0      	strh	r0, [r4, #14]
 8019abc:	8028      	strh	r0, [r5, #0]
 8019abe:	f8c8 3000 	str.w	r3, [r8]
 8019ac2:	6863      	ldr	r3, [r4, #4]
 8019ac4:	603b      	str	r3, [r7, #0]
 8019ac6:	7b23      	ldrb	r3, [r4, #12]
 8019ac8:	6063      	str	r3, [r4, #4]
 8019aca:	4630      	mov	r0, r6
 8019acc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08019ad0 <on_full_output_buffer>:
 8019ad0:	b538      	push	{r3, r4, r5, lr}
 8019ad2:	6802      	ldr	r2, [r0, #0]
 8019ad4:	460c      	mov	r4, r1
 8019ad6:	6809      	ldr	r1, [r1, #0]
 8019ad8:	8923      	ldrh	r3, [r4, #8]
 8019ada:	eba2 0c01 	sub.w	ip, r2, r1
 8019ade:	6862      	ldr	r2, [r4, #4]
 8019ae0:	fbb2 f2f3 	udiv	r2, r2, r3
 8019ae4:	fbbc fcf2 	udiv	ip, ip, r2
 8019ae8:	f10c 0c01 	add.w	ip, ip, #1
 8019aec:	fa1f fc8c 	uxth.w	ip, ip
 8019af0:	fbbc fef3 	udiv	lr, ip, r3
 8019af4:	fb03 c31e 	mls	r3, r3, lr, ip
 8019af8:	b29b      	uxth	r3, r3
 8019afa:	fb02 f303 	mul.w	r3, r2, r3
 8019afe:	f894 c00c 	ldrb.w	ip, [r4, #12]
 8019b02:	58ca      	ldr	r2, [r1, r3]
 8019b04:	4463      	add	r3, ip
 8019b06:	eba2 020c 	sub.w	r2, r2, ip
 8019b0a:	3308      	adds	r3, #8
 8019b0c:	4605      	mov	r5, r0
 8019b0e:	4419      	add	r1, r3
 8019b10:	3a04      	subs	r2, #4
 8019b12:	6903      	ldr	r3, [r0, #16]
 8019b14:	f7f4 fd04 	bl	800e520 <ucdr_init_buffer_origin>
 8019b18:	4628      	mov	r0, r5
 8019b1a:	4903      	ldr	r1, [pc, #12]	@ (8019b28 <on_full_output_buffer+0x58>)
 8019b1c:	4622      	mov	r2, r4
 8019b1e:	f7f4 fcdb 	bl	800e4d8 <ucdr_set_on_full_buffer_callback>
 8019b22:	2000      	movs	r0, #0
 8019b24:	bd38      	pop	{r3, r4, r5, pc}
 8019b26:	bf00      	nop
 8019b28:	08019ad1 	.word	0x08019ad1

08019b2c <uxr_init_output_reliable_stream>:
 8019b2c:	b410      	push	{r4}
 8019b2e:	f89d c004 	ldrb.w	ip, [sp, #4]
 8019b32:	8103      	strh	r3, [r0, #8]
 8019b34:	e9c0 1200 	strd	r1, r2, [r0]
 8019b38:	f880 c00c 	strb.w	ip, [r0, #12]
 8019b3c:	b1d3      	cbz	r3, 8019b74 <uxr_init_output_reliable_stream+0x48>
 8019b3e:	f8c1 c000 	str.w	ip, [r1]
 8019b42:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8019b46:	f1bc 0f01 	cmp.w	ip, #1
 8019b4a:	d913      	bls.n	8019b74 <uxr_init_output_reliable_stream+0x48>
 8019b4c:	2301      	movs	r3, #1
 8019b4e:	fbb3 f1fc 	udiv	r1, r3, ip
 8019b52:	fb0c 3111 	mls	r1, ip, r1, r3
 8019b56:	b289      	uxth	r1, r1
 8019b58:	6842      	ldr	r2, [r0, #4]
 8019b5a:	6804      	ldr	r4, [r0, #0]
 8019b5c:	fbb2 f2fc 	udiv	r2, r2, ip
 8019b60:	fb01 f202 	mul.w	r2, r1, r2
 8019b64:	7b01      	ldrb	r1, [r0, #12]
 8019b66:	50a1      	str	r1, [r4, r2]
 8019b68:	3301      	adds	r3, #1
 8019b6a:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8019b6e:	b29b      	uxth	r3, r3
 8019b70:	459c      	cmp	ip, r3
 8019b72:	d8ec      	bhi.n	8019b4e <uxr_init_output_reliable_stream+0x22>
 8019b74:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8019b78:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8019b7c:	e9c0 2306 	strd	r2, r3, [r0, #24]
 8019b80:	4905      	ldr	r1, [pc, #20]	@ (8019b98 <uxr_init_output_reliable_stream+0x6c>)
 8019b82:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019b86:	f8c0 100e 	str.w	r1, [r0, #14]
 8019b8a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8019b8e:	2300      	movs	r3, #0
 8019b90:	8242      	strh	r2, [r0, #18]
 8019b92:	8403      	strh	r3, [r0, #32]
 8019b94:	4770      	bx	lr
 8019b96:	bf00      	nop
 8019b98:	ffff0000 	.word	0xffff0000

08019b9c <uxr_reset_output_reliable_stream>:
 8019b9c:	8901      	ldrh	r1, [r0, #8]
 8019b9e:	b1b1      	cbz	r1, 8019bce <uxr_reset_output_reliable_stream+0x32>
 8019ba0:	f04f 0c00 	mov.w	ip, #0
 8019ba4:	4663      	mov	r3, ip
 8019ba6:	fbb3 f2f1 	udiv	r2, r3, r1
 8019baa:	fb01 3312 	mls	r3, r1, r2, r3
 8019bae:	b29b      	uxth	r3, r3
 8019bb0:	6842      	ldr	r2, [r0, #4]
 8019bb2:	fbb2 f2f1 	udiv	r2, r2, r1
 8019bb6:	6801      	ldr	r1, [r0, #0]
 8019bb8:	fb02 f303 	mul.w	r3, r2, r3
 8019bbc:	7b02      	ldrb	r2, [r0, #12]
 8019bbe:	50ca      	str	r2, [r1, r3]
 8019bc0:	f10c 0c01 	add.w	ip, ip, #1
 8019bc4:	8901      	ldrh	r1, [r0, #8]
 8019bc6:	fa1f f38c 	uxth.w	r3, ip
 8019bca:	4299      	cmp	r1, r3
 8019bcc:	d8eb      	bhi.n	8019ba6 <uxr_reset_output_reliable_stream+0xa>
 8019bce:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8019bd2:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8019bd6:	e9c0 2306 	strd	r2, r3, [r0, #24]
 8019bda:	4904      	ldr	r1, [pc, #16]	@ (8019bec <uxr_reset_output_reliable_stream+0x50>)
 8019bdc:	f8c0 100e 	str.w	r1, [r0, #14]
 8019be0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8019be4:	2300      	movs	r3, #0
 8019be6:	8242      	strh	r2, [r0, #18]
 8019be8:	8403      	strh	r3, [r0, #32]
 8019bea:	4770      	bx	lr
 8019bec:	ffff0000 	.word	0xffff0000

08019bf0 <uxr_prepare_reliable_buffer_to_write>:
 8019bf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019bf4:	4604      	mov	r4, r0
 8019bf6:	b091      	sub	sp, #68	@ 0x44
 8019bf8:	8900      	ldrh	r0, [r0, #8]
 8019bfa:	89e6      	ldrh	r6, [r4, #14]
 8019bfc:	6823      	ldr	r3, [r4, #0]
 8019bfe:	9204      	str	r2, [sp, #16]
 8019c00:	fbb6 f2f0 	udiv	r2, r6, r0
 8019c04:	fb00 6212 	mls	r2, r0, r2, r6
 8019c08:	b292      	uxth	r2, r2
 8019c0a:	6865      	ldr	r5, [r4, #4]
 8019c0c:	fbb5 f5f0 	udiv	r5, r5, r0
 8019c10:	fb05 3202 	mla	r2, r5, r2, r3
 8019c14:	3204      	adds	r2, #4
 8019c16:	f852 8c04 	ldr.w	r8, [r2, #-4]
 8019c1a:	f894 900c 	ldrb.w	r9, [r4, #12]
 8019c1e:	9203      	str	r2, [sp, #12]
 8019c20:	468b      	mov	fp, r1
 8019c22:	1f2f      	subs	r7, r5, #4
 8019c24:	2800      	cmp	r0, #0
 8019c26:	f000 814c 	beq.w	8019ec2 <uxr_prepare_reliable_buffer_to_write+0x2d2>
 8019c2a:	f04f 0c00 	mov.w	ip, #0
 8019c2e:	46e2      	mov	sl, ip
 8019c30:	4661      	mov	r1, ip
 8019c32:	fbb1 f2f0 	udiv	r2, r1, r0
 8019c36:	fb00 1212 	mls	r2, r0, r2, r1
 8019c3a:	b292      	uxth	r2, r2
 8019c3c:	fb05 f202 	mul.w	r2, r5, r2
 8019c40:	f10c 0c01 	add.w	ip, ip, #1
 8019c44:	589a      	ldr	r2, [r3, r2]
 8019c46:	454a      	cmp	r2, r9
 8019c48:	bf08      	it	eq
 8019c4a:	f10a 0a01 	addeq.w	sl, sl, #1
 8019c4e:	fa1f f18c 	uxth.w	r1, ip
 8019c52:	bf08      	it	eq
 8019c54:	fa1f fa8a 	uxtheq.w	sl, sl
 8019c58:	4281      	cmp	r1, r0
 8019c5a:	d3ea      	bcc.n	8019c32 <uxr_prepare_reliable_buffer_to_write+0x42>
 8019c5c:	4640      	mov	r0, r8
 8019c5e:	2104      	movs	r1, #4
 8019c60:	f8cd a014 	str.w	sl, [sp, #20]
 8019c64:	f7f4 fc68 	bl	800e538 <ucdr_alignment>
 8019c68:	4480      	add	r8, r0
 8019c6a:	eb08 020b 	add.w	r2, r8, fp
 8019c6e:	42ba      	cmp	r2, r7
 8019c70:	f240 80cd 	bls.w	8019e0e <uxr_prepare_reliable_buffer_to_write+0x21e>
 8019c74:	7b22      	ldrb	r2, [r4, #12]
 8019c76:	445a      	add	r2, fp
 8019c78:	42ba      	cmp	r2, r7
 8019c7a:	f240 80b5 	bls.w	8019de8 <uxr_prepare_reliable_buffer_to_write+0x1f8>
 8019c7e:	f5c9 437f 	rsb	r3, r9, #65280	@ 0xff00
 8019c82:	33fc      	adds	r3, #252	@ 0xfc
 8019c84:	b2ba      	uxth	r2, r7
 8019c86:	4413      	add	r3, r2
 8019c88:	b29b      	uxth	r3, r3
 8019c8a:	fb0a f903 	mul.w	r9, sl, r3
 8019c8e:	45d9      	cmp	r9, fp
 8019c90:	9305      	str	r3, [sp, #20]
 8019c92:	9306      	str	r3, [sp, #24]
 8019c94:	f0c0 80b7 	bcc.w	8019e06 <uxr_prepare_reliable_buffer_to_write+0x216>
 8019c98:	f108 0304 	add.w	r3, r8, #4
 8019c9c:	42bb      	cmp	r3, r7
 8019c9e:	f080 80db 	bcs.w	8019e58 <uxr_prepare_reliable_buffer_to_write+0x268>
 8019ca2:	f1a2 0904 	sub.w	r9, r2, #4
 8019ca6:	eba9 0908 	sub.w	r9, r9, r8
 8019caa:	9b05      	ldr	r3, [sp, #20]
 8019cac:	fa1f f989 	uxth.w	r9, r9
 8019cb0:	ebab 0b09 	sub.w	fp, fp, r9
 8019cb4:	fbbb f2f3 	udiv	r2, fp, r3
 8019cb8:	fb03 b312 	mls	r3, r3, r2, fp
 8019cbc:	2b00      	cmp	r3, #0
 8019cbe:	f000 80c8 	beq.w	8019e52 <uxr_prepare_reliable_buffer_to_write+0x262>
 8019cc2:	3201      	adds	r2, #1
 8019cc4:	b292      	uxth	r2, r2
 8019cc6:	9306      	str	r3, [sp, #24]
 8019cc8:	4552      	cmp	r2, sl
 8019cca:	f200 809c 	bhi.w	8019e06 <uxr_prepare_reliable_buffer_to_write+0x216>
 8019cce:	f10d 0b20 	add.w	fp, sp, #32
 8019cd2:	2a00      	cmp	r2, #0
 8019cd4:	d042      	beq.n	8019d5c <uxr_prepare_reliable_buffer_to_write+0x16c>
 8019cd6:	f8cd 801c 	str.w	r8, [sp, #28]
 8019cda:	f04f 0a00 	mov.w	sl, #0
 8019cde:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8019ce2:	9505      	str	r5, [sp, #20]
 8019ce4:	f10d 0b20 	add.w	fp, sp, #32
 8019ce8:	4615      	mov	r5, r2
 8019cea:	e000      	b.n	8019cee <uxr_prepare_reliable_buffer_to_write+0xfe>
 8019cec:	46c1      	mov	r9, r8
 8019cee:	8920      	ldrh	r0, [r4, #8]
 8019cf0:	fbb6 f2f0 	udiv	r2, r6, r0
 8019cf4:	fb00 6112 	mls	r1, r0, r2, r6
 8019cf8:	b28a      	uxth	r2, r1
 8019cfa:	6863      	ldr	r3, [r4, #4]
 8019cfc:	fbb3 f1f0 	udiv	r1, r3, r0
 8019d00:	6823      	ldr	r3, [r4, #0]
 8019d02:	fb02 f101 	mul.w	r1, r2, r1
 8019d06:	3104      	adds	r1, #4
 8019d08:	4419      	add	r1, r3
 8019d0a:	4658      	mov	r0, fp
 8019d0c:	f851 2c04 	ldr.w	r2, [r1, #-4]
 8019d10:	9200      	str	r2, [sp, #0]
 8019d12:	2300      	movs	r3, #0
 8019d14:	463a      	mov	r2, r7
 8019d16:	f7f4 fbf9 	bl	800e50c <ucdr_init_buffer_origin_offset>
 8019d1a:	464a      	mov	r2, r9
 8019d1c:	2300      	movs	r3, #0
 8019d1e:	210d      	movs	r1, #13
 8019d20:	4658      	mov	r0, fp
 8019d22:	f7f9 ff0b 	bl	8013b3c <uxr_buffer_submessage_header>
 8019d26:	8921      	ldrh	r1, [r4, #8]
 8019d28:	fbb6 f2f1 	udiv	r2, r6, r1
 8019d2c:	fb01 6212 	mls	r2, r1, r2, r6
 8019d30:	b292      	uxth	r2, r2
 8019d32:	6863      	ldr	r3, [r4, #4]
 8019d34:	fbb3 f3f1 	udiv	r3, r3, r1
 8019d38:	fb02 f303 	mul.w	r3, r2, r3
 8019d3c:	6822      	ldr	r2, [r4, #0]
 8019d3e:	4630      	mov	r0, r6
 8019d40:	50d7      	str	r7, [r2, r3]
 8019d42:	2101      	movs	r1, #1
 8019d44:	f000 f9c4 	bl	801a0d0 <uxr_seq_num_add>
 8019d48:	f10a 0a01 	add.w	sl, sl, #1
 8019d4c:	fa1f f38a 	uxth.w	r3, sl
 8019d50:	429d      	cmp	r5, r3
 8019d52:	4606      	mov	r6, r0
 8019d54:	d8ca      	bhi.n	8019cec <uxr_prepare_reliable_buffer_to_write+0xfc>
 8019d56:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8019d5a:	9d05      	ldr	r5, [sp, #20]
 8019d5c:	8920      	ldrh	r0, [r4, #8]
 8019d5e:	fbb6 f3f0 	udiv	r3, r6, r0
 8019d62:	fb00 6313 	mls	r3, r0, r3, r6
 8019d66:	b299      	uxth	r1, r3
 8019d68:	6863      	ldr	r3, [r4, #4]
 8019d6a:	fbb3 f3f0 	udiv	r3, r3, r0
 8019d6e:	fb01 f303 	mul.w	r3, r1, r3
 8019d72:	6821      	ldr	r1, [r4, #0]
 8019d74:	3304      	adds	r3, #4
 8019d76:	4419      	add	r1, r3
 8019d78:	463a      	mov	r2, r7
 8019d7a:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8019d7e:	9000      	str	r0, [sp, #0]
 8019d80:	2300      	movs	r3, #0
 8019d82:	4658      	mov	r0, fp
 8019d84:	f7f4 fbc2 	bl	800e50c <ucdr_init_buffer_origin_offset>
 8019d88:	f8dd 9018 	ldr.w	r9, [sp, #24]
 8019d8c:	4658      	mov	r0, fp
 8019d8e:	fa1f f289 	uxth.w	r2, r9
 8019d92:	2302      	movs	r3, #2
 8019d94:	210d      	movs	r1, #13
 8019d96:	f7f9 fed1 	bl	8013b3c <uxr_buffer_submessage_header>
 8019d9a:	9b03      	ldr	r3, [sp, #12]
 8019d9c:	8927      	ldrh	r7, [r4, #8]
 8019d9e:	7b20      	ldrb	r0, [r4, #12]
 8019da0:	f108 0104 	add.w	r1, r8, #4
 8019da4:	440b      	add	r3, r1
 8019da6:	4619      	mov	r1, r3
 8019da8:	fbb6 f3f7 	udiv	r3, r6, r7
 8019dac:	fb07 6313 	mls	r3, r7, r3, r6
 8019db0:	f1a5 0208 	sub.w	r2, r5, #8
 8019db4:	b29d      	uxth	r5, r3
 8019db6:	3004      	adds	r0, #4
 8019db8:	6863      	ldr	r3, [r4, #4]
 8019dba:	fbb3 f3f7 	udiv	r3, r3, r7
 8019dbe:	fb05 f303 	mul.w	r3, r5, r3
 8019dc2:	6825      	ldr	r5, [r4, #0]
 8019dc4:	4448      	add	r0, r9
 8019dc6:	50e8      	str	r0, [r5, r3]
 8019dc8:	9d04      	ldr	r5, [sp, #16]
 8019dca:	eba2 0208 	sub.w	r2, r2, r8
 8019dce:	4628      	mov	r0, r5
 8019dd0:	f7f4 fbae 	bl	800e530 <ucdr_init_buffer>
 8019dd4:	4628      	mov	r0, r5
 8019dd6:	493c      	ldr	r1, [pc, #240]	@ (8019ec8 <uxr_prepare_reliable_buffer_to_write+0x2d8>)
 8019dd8:	4622      	mov	r2, r4
 8019dda:	f7f4 fb7d 	bl	800e4d8 <ucdr_set_on_full_buffer_callback>
 8019dde:	2001      	movs	r0, #1
 8019de0:	81e6      	strh	r6, [r4, #14]
 8019de2:	b011      	add	sp, #68	@ 0x44
 8019de4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019de8:	2101      	movs	r1, #1
 8019dea:	89e0      	ldrh	r0, [r4, #14]
 8019dec:	f000 f970 	bl	801a0d0 <uxr_seq_num_add>
 8019df0:	8921      	ldrh	r1, [r4, #8]
 8019df2:	4605      	mov	r5, r0
 8019df4:	8a60      	ldrh	r0, [r4, #18]
 8019df6:	f000 f96b 	bl	801a0d0 <uxr_seq_num_add>
 8019dfa:	4601      	mov	r1, r0
 8019dfc:	4628      	mov	r0, r5
 8019dfe:	f000 f96f 	bl	801a0e0 <uxr_seq_num_cmp>
 8019e02:	2800      	cmp	r0, #0
 8019e04:	dd42      	ble.n	8019e8c <uxr_prepare_reliable_buffer_to_write+0x29c>
 8019e06:	2000      	movs	r0, #0
 8019e08:	b011      	add	sp, #68	@ 0x44
 8019e0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019e0e:	8921      	ldrh	r1, [r4, #8]
 8019e10:	8a60      	ldrh	r0, [r4, #18]
 8019e12:	9205      	str	r2, [sp, #20]
 8019e14:	f000 f95c 	bl	801a0d0 <uxr_seq_num_add>
 8019e18:	4601      	mov	r1, r0
 8019e1a:	4630      	mov	r0, r6
 8019e1c:	f000 f960 	bl	801a0e0 <uxr_seq_num_cmp>
 8019e20:	2800      	cmp	r0, #0
 8019e22:	9a05      	ldr	r2, [sp, #20]
 8019e24:	dcef      	bgt.n	8019e06 <uxr_prepare_reliable_buffer_to_write+0x216>
 8019e26:	8927      	ldrh	r7, [r4, #8]
 8019e28:	fbb6 f3f7 	udiv	r3, r6, r7
 8019e2c:	fb07 6313 	mls	r3, r7, r3, r6
 8019e30:	b29d      	uxth	r5, r3
 8019e32:	6863      	ldr	r3, [r4, #4]
 8019e34:	6824      	ldr	r4, [r4, #0]
 8019e36:	fbb3 f3f7 	udiv	r3, r3, r7
 8019e3a:	fb05 f303 	mul.w	r3, r5, r3
 8019e3e:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 8019e42:	50e2      	str	r2, [r4, r3]
 8019e44:	2300      	movs	r3, #0
 8019e46:	f8cd 8000 	str.w	r8, [sp]
 8019e4a:	f7f4 fb5f 	bl	800e50c <ucdr_init_buffer_origin_offset>
 8019e4e:	2001      	movs	r0, #1
 8019e50:	e7da      	b.n	8019e08 <uxr_prepare_reliable_buffer_to_write+0x218>
 8019e52:	b293      	uxth	r3, r2
 8019e54:	461a      	mov	r2, r3
 8019e56:	e737      	b.n	8019cc8 <uxr_prepare_reliable_buffer_to_write+0xd8>
 8019e58:	4630      	mov	r0, r6
 8019e5a:	2101      	movs	r1, #1
 8019e5c:	9207      	str	r2, [sp, #28]
 8019e5e:	f000 f937 	bl	801a0d0 <uxr_seq_num_add>
 8019e62:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8019e66:	fbb0 f1fc 	udiv	r1, r0, ip
 8019e6a:	fb0c 0111 	mls	r1, ip, r1, r0
 8019e6e:	4606      	mov	r6, r0
 8019e70:	b288      	uxth	r0, r1
 8019e72:	6863      	ldr	r3, [r4, #4]
 8019e74:	fbb3 f1fc 	udiv	r1, r3, ip
 8019e78:	6823      	ldr	r3, [r4, #0]
 8019e7a:	9a07      	ldr	r2, [sp, #28]
 8019e7c:	fb00 f101 	mul.w	r1, r0, r1
 8019e80:	3104      	adds	r1, #4
 8019e82:	440b      	add	r3, r1
 8019e84:	9303      	str	r3, [sp, #12]
 8019e86:	f853 8c04 	ldr.w	r8, [r3, #-4]
 8019e8a:	e70a      	b.n	8019ca2 <uxr_prepare_reliable_buffer_to_write+0xb2>
 8019e8c:	8921      	ldrh	r1, [r4, #8]
 8019e8e:	fbb5 f3f1 	udiv	r3, r5, r1
 8019e92:	fb01 5313 	mls	r3, r1, r3, r5
 8019e96:	b29a      	uxth	r2, r3
 8019e98:	6863      	ldr	r3, [r4, #4]
 8019e9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8019e9e:	6821      	ldr	r1, [r4, #0]
 8019ea0:	9804      	ldr	r0, [sp, #16]
 8019ea2:	fb02 f303 	mul.w	r3, r2, r3
 8019ea6:	3304      	adds	r3, #4
 8019ea8:	7b22      	ldrb	r2, [r4, #12]
 8019eaa:	4419      	add	r1, r3
 8019eac:	445a      	add	r2, fp
 8019eae:	f841 2c04 	str.w	r2, [r1, #-4]
 8019eb2:	7b23      	ldrb	r3, [r4, #12]
 8019eb4:	9300      	str	r3, [sp, #0]
 8019eb6:	2300      	movs	r3, #0
 8019eb8:	f7f4 fb28 	bl	800e50c <ucdr_init_buffer_origin_offset>
 8019ebc:	81e5      	strh	r5, [r4, #14]
 8019ebe:	2001      	movs	r0, #1
 8019ec0:	e7a2      	b.n	8019e08 <uxr_prepare_reliable_buffer_to_write+0x218>
 8019ec2:	4682      	mov	sl, r0
 8019ec4:	e6ca      	b.n	8019c5c <uxr_prepare_reliable_buffer_to_write+0x6c>
 8019ec6:	bf00      	nop
 8019ec8:	08019ad1 	.word	0x08019ad1

08019ecc <uxr_prepare_next_reliable_buffer_to_send>:
 8019ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019ece:	4604      	mov	r4, r0
 8019ed0:	460f      	mov	r7, r1
 8019ed2:	8a00      	ldrh	r0, [r0, #16]
 8019ed4:	2101      	movs	r1, #1
 8019ed6:	4616      	mov	r6, r2
 8019ed8:	461d      	mov	r5, r3
 8019eda:	f000 f8f9 	bl	801a0d0 <uxr_seq_num_add>
 8019ede:	8028      	strh	r0, [r5, #0]
 8019ee0:	8922      	ldrh	r2, [r4, #8]
 8019ee2:	fbb0 f3f2 	udiv	r3, r0, r2
 8019ee6:	fb02 0c13 	mls	ip, r2, r3, r0
 8019eea:	fa1f fc8c 	uxth.w	ip, ip
 8019eee:	6863      	ldr	r3, [r4, #4]
 8019ef0:	fbb3 f3f2 	udiv	r3, r3, r2
 8019ef4:	fb0c fc03 	mul.w	ip, ip, r3
 8019ef8:	6823      	ldr	r3, [r4, #0]
 8019efa:	89e1      	ldrh	r1, [r4, #14]
 8019efc:	f10c 0c04 	add.w	ip, ip, #4
 8019f00:	4463      	add	r3, ip
 8019f02:	603b      	str	r3, [r7, #0]
 8019f04:	6823      	ldr	r3, [r4, #0]
 8019f06:	449c      	add	ip, r3
 8019f08:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 8019f0c:	6033      	str	r3, [r6, #0]
 8019f0e:	f000 f8e7 	bl	801a0e0 <uxr_seq_num_cmp>
 8019f12:	2800      	cmp	r0, #0
 8019f14:	dd01      	ble.n	8019f1a <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 8019f16:	2000      	movs	r0, #0
 8019f18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019f1a:	7b23      	ldrb	r3, [r4, #12]
 8019f1c:	6832      	ldr	r2, [r6, #0]
 8019f1e:	429a      	cmp	r2, r3
 8019f20:	d9f9      	bls.n	8019f16 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8019f22:	8a61      	ldrh	r1, [r4, #18]
 8019f24:	8a20      	ldrh	r0, [r4, #16]
 8019f26:	f000 f8d7 	bl	801a0d8 <uxr_seq_num_sub>
 8019f2a:	8923      	ldrh	r3, [r4, #8]
 8019f2c:	4283      	cmp	r3, r0
 8019f2e:	d0f2      	beq.n	8019f16 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8019f30:	8828      	ldrh	r0, [r5, #0]
 8019f32:	89e3      	ldrh	r3, [r4, #14]
 8019f34:	8220      	strh	r0, [r4, #16]
 8019f36:	4298      	cmp	r0, r3
 8019f38:	d001      	beq.n	8019f3e <uxr_prepare_next_reliable_buffer_to_send+0x72>
 8019f3a:	2001      	movs	r0, #1
 8019f3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019f3e:	2101      	movs	r1, #1
 8019f40:	f000 f8c6 	bl	801a0d0 <uxr_seq_num_add>
 8019f44:	81e0      	strh	r0, [r4, #14]
 8019f46:	2001      	movs	r0, #1
 8019f48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019f4a:	bf00      	nop

08019f4c <uxr_update_output_stream_heartbeat_timestamp>:
 8019f4c:	b570      	push	{r4, r5, r6, lr}
 8019f4e:	8a01      	ldrh	r1, [r0, #16]
 8019f50:	4604      	mov	r4, r0
 8019f52:	8a40      	ldrh	r0, [r0, #18]
 8019f54:	4615      	mov	r5, r2
 8019f56:	461e      	mov	r6, r3
 8019f58:	f000 f8c2 	bl	801a0e0 <uxr_seq_num_cmp>
 8019f5c:	2800      	cmp	r0, #0
 8019f5e:	db07      	blt.n	8019f70 <uxr_update_output_stream_heartbeat_timestamp+0x24>
 8019f60:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8019f64:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8019f68:	e9c4 2306 	strd	r2, r3, [r4, #24]
 8019f6c:	2000      	movs	r0, #0
 8019f6e:	bd70      	pop	{r4, r5, r6, pc}
 8019f70:	f894 0020 	ldrb.w	r0, [r4, #32]
 8019f74:	b940      	cbnz	r0, 8019f88 <uxr_update_output_stream_heartbeat_timestamp+0x3c>
 8019f76:	2301      	movs	r3, #1
 8019f78:	f884 3020 	strb.w	r3, [r4, #32]
 8019f7c:	3564      	adds	r5, #100	@ 0x64
 8019f7e:	f146 0600 	adc.w	r6, r6, #0
 8019f82:	e9c4 5606 	strd	r5, r6, [r4, #24]
 8019f86:	bd70      	pop	{r4, r5, r6, pc}
 8019f88:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 8019f8c:	4295      	cmp	r5, r2
 8019f8e:	eb76 0303 	sbcs.w	r3, r6, r3
 8019f92:	bfa5      	ittet	ge
 8019f94:	3001      	addge	r0, #1
 8019f96:	f884 0020 	strbge.w	r0, [r4, #32]
 8019f9a:	2000      	movlt	r0, #0
 8019f9c:	2001      	movge	r0, #1
 8019f9e:	e7ed      	b.n	8019f7c <uxr_update_output_stream_heartbeat_timestamp+0x30>

08019fa0 <uxr_begin_output_nack_buffer_it>:
 8019fa0:	8a40      	ldrh	r0, [r0, #18]
 8019fa2:	4770      	bx	lr

08019fa4 <uxr_next_reliable_nack_buffer_to_send>:
 8019fa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019fa8:	f890 8021 	ldrb.w	r8, [r0, #33]	@ 0x21
 8019fac:	b082      	sub	sp, #8
 8019fae:	f1b8 0f00 	cmp.w	r8, #0
 8019fb2:	d011      	beq.n	8019fd8 <uxr_next_reliable_nack_buffer_to_send+0x34>
 8019fb4:	4604      	mov	r4, r0
 8019fb6:	8818      	ldrh	r0, [r3, #0]
 8019fb8:	460e      	mov	r6, r1
 8019fba:	4617      	mov	r7, r2
 8019fbc:	461d      	mov	r5, r3
 8019fbe:	2101      	movs	r1, #1
 8019fc0:	f000 f886 	bl	801a0d0 <uxr_seq_num_add>
 8019fc4:	8028      	strh	r0, [r5, #0]
 8019fc6:	8a21      	ldrh	r1, [r4, #16]
 8019fc8:	f000 f88a 	bl	801a0e0 <uxr_seq_num_cmp>
 8019fcc:	2800      	cmp	r0, #0
 8019fce:	dd07      	ble.n	8019fe0 <uxr_next_reliable_nack_buffer_to_send+0x3c>
 8019fd0:	f04f 0800 	mov.w	r8, #0
 8019fd4:	f884 8021 	strb.w	r8, [r4, #33]	@ 0x21
 8019fd8:	4640      	mov	r0, r8
 8019fda:	b002      	add	sp, #8
 8019fdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019fe0:	8921      	ldrh	r1, [r4, #8]
 8019fe2:	8828      	ldrh	r0, [r5, #0]
 8019fe4:	6823      	ldr	r3, [r4, #0]
 8019fe6:	fbb0 f2f1 	udiv	r2, r0, r1
 8019fea:	fb01 0c12 	mls	ip, r1, r2, r0
 8019fee:	fa1f f28c 	uxth.w	r2, ip
 8019ff2:	9301      	str	r3, [sp, #4]
 8019ff4:	6863      	ldr	r3, [r4, #4]
 8019ff6:	fbb3 fcf1 	udiv	ip, r3, r1
 8019ffa:	9b01      	ldr	r3, [sp, #4]
 8019ffc:	fb02 fc0c 	mul.w	ip, r2, ip
 801a000:	f10c 0c04 	add.w	ip, ip, #4
 801a004:	4463      	add	r3, ip
 801a006:	6033      	str	r3, [r6, #0]
 801a008:	6823      	ldr	r3, [r4, #0]
 801a00a:	4463      	add	r3, ip
 801a00c:	f853 3c04 	ldr.w	r3, [r3, #-4]
 801a010:	603b      	str	r3, [r7, #0]
 801a012:	7b22      	ldrb	r2, [r4, #12]
 801a014:	429a      	cmp	r2, r3
 801a016:	d0d2      	beq.n	8019fbe <uxr_next_reliable_nack_buffer_to_send+0x1a>
 801a018:	4640      	mov	r0, r8
 801a01a:	b002      	add	sp, #8
 801a01c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801a020 <uxr_process_acknack>:
 801a020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a022:	4604      	mov	r4, r0
 801a024:	460e      	mov	r6, r1
 801a026:	4610      	mov	r0, r2
 801a028:	2101      	movs	r1, #1
 801a02a:	f000 f855 	bl	801a0d8 <uxr_seq_num_sub>
 801a02e:	8a61      	ldrh	r1, [r4, #18]
 801a030:	f000 f852 	bl	801a0d8 <uxr_seq_num_sub>
 801a034:	b1c0      	cbz	r0, 801a068 <uxr_process_acknack+0x48>
 801a036:	4605      	mov	r5, r0
 801a038:	2700      	movs	r7, #0
 801a03a:	2101      	movs	r1, #1
 801a03c:	8a60      	ldrh	r0, [r4, #18]
 801a03e:	f000 f847 	bl	801a0d0 <uxr_seq_num_add>
 801a042:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801a046:	fbb0 f1fc 	udiv	r1, r0, ip
 801a04a:	e9d4 2300 	ldrd	r2, r3, [r4]
 801a04e:	fb0c 0111 	mls	r1, ip, r1, r0
 801a052:	b289      	uxth	r1, r1
 801a054:	3701      	adds	r7, #1
 801a056:	fbb3 f3fc 	udiv	r3, r3, ip
 801a05a:	fb01 f303 	mul.w	r3, r1, r3
 801a05e:	42bd      	cmp	r5, r7
 801a060:	7b21      	ldrb	r1, [r4, #12]
 801a062:	8260      	strh	r0, [r4, #18]
 801a064:	50d1      	str	r1, [r2, r3]
 801a066:	d1e8      	bne.n	801a03a <uxr_process_acknack+0x1a>
 801a068:	3e00      	subs	r6, #0
 801a06a:	f04f 0300 	mov.w	r3, #0
 801a06e:	bf18      	it	ne
 801a070:	2601      	movne	r6, #1
 801a072:	f884 3020 	strb.w	r3, [r4, #32]
 801a076:	f884 6021 	strb.w	r6, [r4, #33]	@ 0x21
 801a07a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801a07c <uxr_is_output_up_to_date>:
 801a07c:	8a01      	ldrh	r1, [r0, #16]
 801a07e:	8a40      	ldrh	r0, [r0, #18]
 801a080:	b508      	push	{r3, lr}
 801a082:	f000 f82d 	bl	801a0e0 <uxr_seq_num_cmp>
 801a086:	fab0 f080 	clz	r0, r0
 801a08a:	0940      	lsrs	r0, r0, #5
 801a08c:	bd08      	pop	{r3, pc}
 801a08e:	bf00      	nop

0801a090 <get_available_free_slots>:
 801a090:	8902      	ldrh	r2, [r0, #8]
 801a092:	b1da      	cbz	r2, 801a0cc <get_available_free_slots+0x3c>
 801a094:	b530      	push	{r4, r5, lr}
 801a096:	2100      	movs	r1, #0
 801a098:	6843      	ldr	r3, [r0, #4]
 801a09a:	6805      	ldr	r5, [r0, #0]
 801a09c:	7b04      	ldrb	r4, [r0, #12]
 801a09e:	fbb3 fef2 	udiv	lr, r3, r2
 801a0a2:	4608      	mov	r0, r1
 801a0a4:	460b      	mov	r3, r1
 801a0a6:	fbb3 fcf2 	udiv	ip, r3, r2
 801a0aa:	fb02 331c 	mls	r3, r2, ip, r3
 801a0ae:	b29b      	uxth	r3, r3
 801a0b0:	fb0e f303 	mul.w	r3, lr, r3
 801a0b4:	3101      	adds	r1, #1
 801a0b6:	f855 c003 	ldr.w	ip, [r5, r3]
 801a0ba:	4564      	cmp	r4, ip
 801a0bc:	bf08      	it	eq
 801a0be:	3001      	addeq	r0, #1
 801a0c0:	b28b      	uxth	r3, r1
 801a0c2:	bf08      	it	eq
 801a0c4:	b280      	uxtheq	r0, r0
 801a0c6:	4293      	cmp	r3, r2
 801a0c8:	d3ed      	bcc.n	801a0a6 <get_available_free_slots+0x16>
 801a0ca:	bd30      	pop	{r4, r5, pc}
 801a0cc:	4610      	mov	r0, r2
 801a0ce:	4770      	bx	lr

0801a0d0 <uxr_seq_num_add>:
 801a0d0:	4408      	add	r0, r1
 801a0d2:	b280      	uxth	r0, r0
 801a0d4:	4770      	bx	lr
 801a0d6:	bf00      	nop

0801a0d8 <uxr_seq_num_sub>:
 801a0d8:	1a40      	subs	r0, r0, r1
 801a0da:	b280      	uxth	r0, r0
 801a0dc:	4770      	bx	lr
 801a0de:	bf00      	nop

0801a0e0 <uxr_seq_num_cmp>:
 801a0e0:	4288      	cmp	r0, r1
 801a0e2:	d011      	beq.n	801a108 <uxr_seq_num_cmp+0x28>
 801a0e4:	d309      	bcc.n	801a0fa <uxr_seq_num_cmp+0x1a>
 801a0e6:	4288      	cmp	r0, r1
 801a0e8:	d910      	bls.n	801a10c <uxr_seq_num_cmp+0x2c>
 801a0ea:	1a40      	subs	r0, r0, r1
 801a0ec:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 801a0f0:	bfd4      	ite	le
 801a0f2:	2001      	movle	r0, #1
 801a0f4:	f04f 30ff 	movgt.w	r0, #4294967295	@ 0xffffffff
 801a0f8:	4770      	bx	lr
 801a0fa:	1a0b      	subs	r3, r1, r0
 801a0fc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801a100:	daf1      	bge.n	801a0e6 <uxr_seq_num_cmp+0x6>
 801a102:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801a106:	4770      	bx	lr
 801a108:	2000      	movs	r0, #0
 801a10a:	4770      	bx	lr
 801a10c:	2001      	movs	r0, #1
 801a10e:	4770      	bx	lr

0801a110 <rcl_get_default_domain_id>:
 801a110:	b530      	push	{r4, r5, lr}
 801a112:	b083      	sub	sp, #12
 801a114:	2300      	movs	r3, #0
 801a116:	9300      	str	r3, [sp, #0]
 801a118:	b1d0      	cbz	r0, 801a150 <rcl_get_default_domain_id+0x40>
 801a11a:	4604      	mov	r4, r0
 801a11c:	4669      	mov	r1, sp
 801a11e:	4815      	ldr	r0, [pc, #84]	@ (801a174 <rcl_get_default_domain_id+0x64>)
 801a120:	f7fd fd62 	bl	8017be8 <rcutils_get_env>
 801a124:	4602      	mov	r2, r0
 801a126:	b110      	cbz	r0, 801a12e <rcl_get_default_domain_id+0x1e>
 801a128:	2001      	movs	r0, #1
 801a12a:	b003      	add	sp, #12
 801a12c:	bd30      	pop	{r4, r5, pc}
 801a12e:	9b00      	ldr	r3, [sp, #0]
 801a130:	b18b      	cbz	r3, 801a156 <rcl_get_default_domain_id+0x46>
 801a132:	7818      	ldrb	r0, [r3, #0]
 801a134:	2800      	cmp	r0, #0
 801a136:	d0f8      	beq.n	801a12a <rcl_get_default_domain_id+0x1a>
 801a138:	a901      	add	r1, sp, #4
 801a13a:	4618      	mov	r0, r3
 801a13c:	9201      	str	r2, [sp, #4]
 801a13e:	f000 fe61 	bl	801ae04 <strtoul>
 801a142:	4605      	mov	r5, r0
 801a144:	b150      	cbz	r0, 801a15c <rcl_get_default_domain_id+0x4c>
 801a146:	1c43      	adds	r3, r0, #1
 801a148:	d00d      	beq.n	801a166 <rcl_get_default_domain_id+0x56>
 801a14a:	6025      	str	r5, [r4, #0]
 801a14c:	2000      	movs	r0, #0
 801a14e:	e7ec      	b.n	801a12a <rcl_get_default_domain_id+0x1a>
 801a150:	200b      	movs	r0, #11
 801a152:	b003      	add	sp, #12
 801a154:	bd30      	pop	{r4, r5, pc}
 801a156:	4618      	mov	r0, r3
 801a158:	b003      	add	sp, #12
 801a15a:	bd30      	pop	{r4, r5, pc}
 801a15c:	9b01      	ldr	r3, [sp, #4]
 801a15e:	781b      	ldrb	r3, [r3, #0]
 801a160:	2b00      	cmp	r3, #0
 801a162:	d0f2      	beq.n	801a14a <rcl_get_default_domain_id+0x3a>
 801a164:	e7e0      	b.n	801a128 <rcl_get_default_domain_id+0x18>
 801a166:	f001 f98d 	bl	801b484 <__errno>
 801a16a:	6803      	ldr	r3, [r0, #0]
 801a16c:	2b22      	cmp	r3, #34	@ 0x22
 801a16e:	d1ec      	bne.n	801a14a <rcl_get_default_domain_id+0x3a>
 801a170:	e7da      	b.n	801a128 <rcl_get_default_domain_id+0x18>
 801a172:	bf00      	nop
 801a174:	0801e3c8 	.word	0x0801e3c8

0801a178 <rcl_expand_topic_name>:
 801a178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a17c:	b08b      	sub	sp, #44	@ 0x2c
 801a17e:	9306      	str	r3, [sp, #24]
 801a180:	2800      	cmp	r0, #0
 801a182:	f000 80ad 	beq.w	801a2e0 <rcl_expand_topic_name+0x168>
 801a186:	460e      	mov	r6, r1
 801a188:	2900      	cmp	r1, #0
 801a18a:	f000 80a9 	beq.w	801a2e0 <rcl_expand_topic_name+0x168>
 801a18e:	4617      	mov	r7, r2
 801a190:	2a00      	cmp	r2, #0
 801a192:	f000 80a5 	beq.w	801a2e0 <rcl_expand_topic_name+0x168>
 801a196:	2b00      	cmp	r3, #0
 801a198:	f000 80a2 	beq.w	801a2e0 <rcl_expand_topic_name+0x168>
 801a19c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801a19e:	2b00      	cmp	r3, #0
 801a1a0:	f000 809e 	beq.w	801a2e0 <rcl_expand_topic_name+0x168>
 801a1a4:	2200      	movs	r2, #0
 801a1a6:	a909      	add	r1, sp, #36	@ 0x24
 801a1a8:	4680      	mov	r8, r0
 801a1aa:	f000 fa57 	bl	801a65c <rcl_validate_topic_name>
 801a1ae:	4604      	mov	r4, r0
 801a1b0:	2800      	cmp	r0, #0
 801a1b2:	f040 8096 	bne.w	801a2e2 <rcl_expand_topic_name+0x16a>
 801a1b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a1b8:	2b00      	cmp	r3, #0
 801a1ba:	f040 809a 	bne.w	801a2f2 <rcl_expand_topic_name+0x17a>
 801a1be:	4602      	mov	r2, r0
 801a1c0:	a909      	add	r1, sp, #36	@ 0x24
 801a1c2:	4630      	mov	r0, r6
 801a1c4:	f7fe f94a 	bl	801845c <rmw_validate_node_name>
 801a1c8:	2800      	cmp	r0, #0
 801a1ca:	f040 808e 	bne.w	801a2ea <rcl_expand_topic_name+0x172>
 801a1ce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801a1d0:	2a00      	cmp	r2, #0
 801a1d2:	f040 8093 	bne.w	801a2fc <rcl_expand_topic_name+0x184>
 801a1d6:	a909      	add	r1, sp, #36	@ 0x24
 801a1d8:	4638      	mov	r0, r7
 801a1da:	f7fe f921 	bl	8018420 <rmw_validate_namespace>
 801a1de:	2800      	cmp	r0, #0
 801a1e0:	f040 8083 	bne.w	801a2ea <rcl_expand_topic_name+0x172>
 801a1e4:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801a1e6:	2c00      	cmp	r4, #0
 801a1e8:	f040 80ed 	bne.w	801a3c6 <rcl_expand_topic_name+0x24e>
 801a1ec:	217b      	movs	r1, #123	@ 0x7b
 801a1ee:	4640      	mov	r0, r8
 801a1f0:	f001 f8bc 	bl	801b36c <strchr>
 801a1f4:	f898 3000 	ldrb.w	r3, [r8]
 801a1f8:	2b2f      	cmp	r3, #47	@ 0x2f
 801a1fa:	4605      	mov	r5, r0
 801a1fc:	f000 809e 	beq.w	801a33c <rcl_expand_topic_name+0x1c4>
 801a200:	2b7e      	cmp	r3, #126	@ 0x7e
 801a202:	f040 80a2 	bne.w	801a34a <rcl_expand_topic_name+0x1d2>
 801a206:	4638      	mov	r0, r7
 801a208:	f7e6 f814 	bl	8000234 <strlen>
 801a20c:	4a82      	ldr	r2, [pc, #520]	@ (801a418 <rcl_expand_topic_name+0x2a0>)
 801a20e:	4b83      	ldr	r3, [pc, #524]	@ (801a41c <rcl_expand_topic_name+0x2a4>)
 801a210:	2801      	cmp	r0, #1
 801a212:	bf18      	it	ne
 801a214:	4613      	movne	r3, r2
 801a216:	9302      	str	r3, [sp, #8]
 801a218:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801a21a:	9300      	str	r3, [sp, #0]
 801a21c:	e9cd 7603 	strd	r7, r6, [sp, #12]
 801a220:	f108 0301 	add.w	r3, r8, #1
 801a224:	9305      	str	r3, [sp, #20]
 801a226:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801a22a:	9301      	str	r3, [sp, #4]
 801a22c:	ab14      	add	r3, sp, #80	@ 0x50
 801a22e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801a230:	f7fd fcf2 	bl	8017c18 <rcutils_format_string_limit>
 801a234:	4682      	mov	sl, r0
 801a236:	2800      	cmp	r0, #0
 801a238:	f000 80c7 	beq.w	801a3ca <rcl_expand_topic_name+0x252>
 801a23c:	2d00      	cmp	r5, #0
 801a23e:	f000 80a2 	beq.w	801a386 <rcl_expand_topic_name+0x20e>
 801a242:	217b      	movs	r1, #123	@ 0x7b
 801a244:	f001 f892 	bl	801b36c <strchr>
 801a248:	46d1      	mov	r9, sl
 801a24a:	4605      	mov	r5, r0
 801a24c:	9407      	str	r4, [sp, #28]
 801a24e:	46d3      	mov	fp, sl
 801a250:	464c      	mov	r4, r9
 801a252:	2d00      	cmp	r5, #0
 801a254:	f000 80be 	beq.w	801a3d4 <rcl_expand_topic_name+0x25c>
 801a258:	217d      	movs	r1, #125	@ 0x7d
 801a25a:	4620      	mov	r0, r4
 801a25c:	f001 f886 	bl	801b36c <strchr>
 801a260:	eba0 0905 	sub.w	r9, r0, r5
 801a264:	f109 0a01 	add.w	sl, r9, #1
 801a268:	486d      	ldr	r0, [pc, #436]	@ (801a420 <rcl_expand_topic_name+0x2a8>)
 801a26a:	4652      	mov	r2, sl
 801a26c:	4629      	mov	r1, r5
 801a26e:	f001 f88a 	bl	801b386 <strncmp>
 801a272:	2800      	cmp	r0, #0
 801a274:	d067      	beq.n	801a346 <rcl_expand_topic_name+0x1ce>
 801a276:	486b      	ldr	r0, [pc, #428]	@ (801a424 <rcl_expand_topic_name+0x2ac>)
 801a278:	4652      	mov	r2, sl
 801a27a:	4629      	mov	r1, r5
 801a27c:	f001 f883 	bl	801b386 <strncmp>
 801a280:	b130      	cbz	r0, 801a290 <rcl_expand_topic_name+0x118>
 801a282:	4869      	ldr	r0, [pc, #420]	@ (801a428 <rcl_expand_topic_name+0x2b0>)
 801a284:	4652      	mov	r2, sl
 801a286:	4629      	mov	r1, r5
 801a288:	f001 f87d 	bl	801b386 <strncmp>
 801a28c:	2800      	cmp	r0, #0
 801a28e:	d137      	bne.n	801a300 <rcl_expand_topic_name+0x188>
 801a290:	46b9      	mov	r9, r7
 801a292:	ab16      	add	r3, sp, #88	@ 0x58
 801a294:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801a298:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801a29c:	ab14      	add	r3, sp, #80	@ 0x50
 801a29e:	4628      	mov	r0, r5
 801a2a0:	cb0c      	ldmia	r3, {r2, r3}
 801a2a2:	4651      	mov	r1, sl
 801a2a4:	f7fd fdf4 	bl	8017e90 <rcutils_strndup>
 801a2a8:	4605      	mov	r5, r0
 801a2aa:	2800      	cmp	r0, #0
 801a2ac:	f000 809c 	beq.w	801a3e8 <rcl_expand_topic_name+0x270>
 801a2b0:	464a      	mov	r2, r9
 801a2b2:	4620      	mov	r0, r4
 801a2b4:	ab14      	add	r3, sp, #80	@ 0x50
 801a2b6:	4629      	mov	r1, r5
 801a2b8:	f7fd fce8 	bl	8017c8c <rcutils_repl_str>
 801a2bc:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801a2be:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801a2c0:	4604      	mov	r4, r0
 801a2c2:	4628      	mov	r0, r5
 801a2c4:	4798      	blx	r3
 801a2c6:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801a2c8:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801a2ca:	4658      	mov	r0, fp
 801a2cc:	4798      	blx	r3
 801a2ce:	2c00      	cmp	r4, #0
 801a2d0:	d07b      	beq.n	801a3ca <rcl_expand_topic_name+0x252>
 801a2d2:	217b      	movs	r1, #123	@ 0x7b
 801a2d4:	4620      	mov	r0, r4
 801a2d6:	f001 f849 	bl	801b36c <strchr>
 801a2da:	46a3      	mov	fp, r4
 801a2dc:	4605      	mov	r5, r0
 801a2de:	e7b8      	b.n	801a252 <rcl_expand_topic_name+0xda>
 801a2e0:	240b      	movs	r4, #11
 801a2e2:	4620      	mov	r0, r4
 801a2e4:	b00b      	add	sp, #44	@ 0x2c
 801a2e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a2ea:	f7fa ff4b 	bl	8015184 <rcl_convert_rmw_ret_to_rcl_ret>
 801a2ee:	4604      	mov	r4, r0
 801a2f0:	e7f7      	b.n	801a2e2 <rcl_expand_topic_name+0x16a>
 801a2f2:	2467      	movs	r4, #103	@ 0x67
 801a2f4:	4620      	mov	r0, r4
 801a2f6:	b00b      	add	sp, #44	@ 0x2c
 801a2f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a2fc:	24c9      	movs	r4, #201	@ 0xc9
 801a2fe:	e7f0      	b.n	801a2e2 <rcl_expand_topic_name+0x16a>
 801a300:	f109 32ff 	add.w	r2, r9, #4294967295	@ 0xffffffff
 801a304:	9806      	ldr	r0, [sp, #24]
 801a306:	1c69      	adds	r1, r5, #1
 801a308:	f7fd fedc 	bl	80180c4 <rcutils_string_map_getn>
 801a30c:	4681      	mov	r9, r0
 801a30e:	2800      	cmp	r0, #0
 801a310:	d1bf      	bne.n	801a292 <rcl_expand_topic_name+0x11a>
 801a312:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801a314:	aa16      	add	r2, sp, #88	@ 0x58
 801a316:	6018      	str	r0, [r3, #0]
 801a318:	ca07      	ldmia	r2, {r0, r1, r2}
 801a31a:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801a31e:	ab14      	add	r3, sp, #80	@ 0x50
 801a320:	cb0c      	ldmia	r3, {r2, r3}
 801a322:	4651      	mov	r1, sl
 801a324:	4628      	mov	r0, r5
 801a326:	f7fd fdb3 	bl	8017e90 <rcutils_strndup>
 801a32a:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801a32c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801a32e:	4798      	blx	r3
 801a330:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801a332:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801a334:	4658      	mov	r0, fp
 801a336:	2469      	movs	r4, #105	@ 0x69
 801a338:	4798      	blx	r3
 801a33a:	e7d2      	b.n	801a2e2 <rcl_expand_topic_name+0x16a>
 801a33c:	2800      	cmp	r0, #0
 801a33e:	d05b      	beq.n	801a3f8 <rcl_expand_topic_name+0x280>
 801a340:	46c1      	mov	r9, r8
 801a342:	46a2      	mov	sl, r4
 801a344:	e782      	b.n	801a24c <rcl_expand_topic_name+0xd4>
 801a346:	46b1      	mov	r9, r6
 801a348:	e7a3      	b.n	801a292 <rcl_expand_topic_name+0x11a>
 801a34a:	2800      	cmp	r0, #0
 801a34c:	d1f8      	bne.n	801a340 <rcl_expand_topic_name+0x1c8>
 801a34e:	4638      	mov	r0, r7
 801a350:	f7e5 ff70 	bl	8000234 <strlen>
 801a354:	4a35      	ldr	r2, [pc, #212]	@ (801a42c <rcl_expand_topic_name+0x2b4>)
 801a356:	4b36      	ldr	r3, [pc, #216]	@ (801a430 <rcl_expand_topic_name+0x2b8>)
 801a358:	f8cd 8010 	str.w	r8, [sp, #16]
 801a35c:	2801      	cmp	r0, #1
 801a35e:	bf18      	it	ne
 801a360:	4613      	movne	r3, r2
 801a362:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 801a366:	e9cd 1301 	strd	r1, r3, [sp, #4]
 801a36a:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801a36c:	9703      	str	r7, [sp, #12]
 801a36e:	9200      	str	r2, [sp, #0]
 801a370:	ab14      	add	r3, sp, #80	@ 0x50
 801a372:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801a374:	f7fd fc50 	bl	8017c18 <rcutils_format_string_limit>
 801a378:	4682      	mov	sl, r0
 801a37a:	4653      	mov	r3, sl
 801a37c:	b32b      	cbz	r3, 801a3ca <rcl_expand_topic_name+0x252>
 801a37e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801a380:	f8c3 a000 	str.w	sl, [r3]
 801a384:	e7ad      	b.n	801a2e2 <rcl_expand_topic_name+0x16a>
 801a386:	f89a 3000 	ldrb.w	r3, [sl]
 801a38a:	2b2f      	cmp	r3, #47	@ 0x2f
 801a38c:	d0f7      	beq.n	801a37e <rcl_expand_topic_name+0x206>
 801a38e:	4638      	mov	r0, r7
 801a390:	f7e5 ff50 	bl	8000234 <strlen>
 801a394:	4a25      	ldr	r2, [pc, #148]	@ (801a42c <rcl_expand_topic_name+0x2b4>)
 801a396:	4b26      	ldr	r3, [pc, #152]	@ (801a430 <rcl_expand_topic_name+0x2b8>)
 801a398:	f8cd a010 	str.w	sl, [sp, #16]
 801a39c:	2801      	cmp	r0, #1
 801a39e:	bf18      	it	ne
 801a3a0:	4613      	movne	r3, r2
 801a3a2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 801a3a6:	e9cd 1301 	strd	r1, r3, [sp, #4]
 801a3aa:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801a3ac:	9703      	str	r7, [sp, #12]
 801a3ae:	9200      	str	r2, [sp, #0]
 801a3b0:	ab14      	add	r3, sp, #80	@ 0x50
 801a3b2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801a3b4:	f7fd fc30 	bl	8017c18 <rcutils_format_string_limit>
 801a3b8:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801a3ba:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801a3bc:	4605      	mov	r5, r0
 801a3be:	4650      	mov	r0, sl
 801a3c0:	4798      	blx	r3
 801a3c2:	46aa      	mov	sl, r5
 801a3c4:	e7d9      	b.n	801a37a <rcl_expand_topic_name+0x202>
 801a3c6:	24ca      	movs	r4, #202	@ 0xca
 801a3c8:	e78b      	b.n	801a2e2 <rcl_expand_topic_name+0x16a>
 801a3ca:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801a3cc:	2300      	movs	r3, #0
 801a3ce:	6013      	str	r3, [r2, #0]
 801a3d0:	240a      	movs	r4, #10
 801a3d2:	e786      	b.n	801a2e2 <rcl_expand_topic_name+0x16a>
 801a3d4:	465b      	mov	r3, fp
 801a3d6:	9c07      	ldr	r4, [sp, #28]
 801a3d8:	46da      	mov	sl, fp
 801a3da:	2b00      	cmp	r3, #0
 801a3dc:	d1d3      	bne.n	801a386 <rcl_expand_topic_name+0x20e>
 801a3de:	f898 3000 	ldrb.w	r3, [r8]
 801a3e2:	2b2f      	cmp	r3, #47	@ 0x2f
 801a3e4:	d0cb      	beq.n	801a37e <rcl_expand_topic_name+0x206>
 801a3e6:	e7b2      	b.n	801a34e <rcl_expand_topic_name+0x1d6>
 801a3e8:	e9dd 1218 	ldrd	r1, r2, [sp, #96]	@ 0x60
 801a3ec:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801a3ee:	6015      	str	r5, [r2, #0]
 801a3f0:	4658      	mov	r0, fp
 801a3f2:	4798      	blx	r3
 801a3f4:	240a      	movs	r4, #10
 801a3f6:	e774      	b.n	801a2e2 <rcl_expand_topic_name+0x16a>
 801a3f8:	ab17      	add	r3, sp, #92	@ 0x5c
 801a3fa:	e893 0003 	ldmia.w	r3, {r0, r1}
 801a3fe:	e88d 0003 	stmia.w	sp, {r0, r1}
 801a402:	ab14      	add	r3, sp, #80	@ 0x50
 801a404:	cb0e      	ldmia	r3, {r1, r2, r3}
 801a406:	4640      	mov	r0, r8
 801a408:	f7fd fd20 	bl	8017e4c <rcutils_strdup>
 801a40c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801a40e:	2800      	cmp	r0, #0
 801a410:	6018      	str	r0, [r3, #0]
 801a412:	bf08      	it	eq
 801a414:	240a      	moveq	r4, #10
 801a416:	e764      	b.n	801a2e2 <rcl_expand_topic_name+0x16a>
 801a418:	0801e3d8 	.word	0x0801e3d8
 801a41c:	0801dee8 	.word	0x0801dee8
 801a420:	0801e3e0 	.word	0x0801e3e0
 801a424:	0801e3e8 	.word	0x0801e3e8
 801a428:	0801e3f0 	.word	0x0801e3f0
 801a42c:	0801ded4 	.word	0x0801ded4
 801a430:	0801def8 	.word	0x0801def8

0801a434 <rcl_get_default_topic_name_substitutions>:
 801a434:	2800      	cmp	r0, #0
 801a436:	bf0c      	ite	eq
 801a438:	200b      	moveq	r0, #11
 801a43a:	2000      	movne	r0, #0
 801a43c:	4770      	bx	lr
 801a43e:	bf00      	nop

0801a440 <rcl_get_zero_initialized_guard_condition>:
 801a440:	4a03      	ldr	r2, [pc, #12]	@ (801a450 <rcl_get_zero_initialized_guard_condition+0x10>)
 801a442:	4603      	mov	r3, r0
 801a444:	e892 0003 	ldmia.w	r2, {r0, r1}
 801a448:	e883 0003 	stmia.w	r3, {r0, r1}
 801a44c:	4618      	mov	r0, r3
 801a44e:	4770      	bx	lr
 801a450:	0801eadc 	.word	0x0801eadc

0801a454 <rcl_guard_condition_init>:
 801a454:	b082      	sub	sp, #8
 801a456:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a458:	b087      	sub	sp, #28
 801a45a:	ac0c      	add	r4, sp, #48	@ 0x30
 801a45c:	e884 000c 	stmia.w	r4, {r2, r3}
 801a460:	46a6      	mov	lr, r4
 801a462:	460d      	mov	r5, r1
 801a464:	4604      	mov	r4, r0
 801a466:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801a46a:	f10d 0c04 	add.w	ip, sp, #4
 801a46e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801a472:	f8de 3000 	ldr.w	r3, [lr]
 801a476:	f8cc 3000 	str.w	r3, [ip]
 801a47a:	a801      	add	r0, sp, #4
 801a47c:	f7f5 fa76 	bl	800f96c <rcutils_allocator_is_valid>
 801a480:	b338      	cbz	r0, 801a4d2 <rcl_guard_condition_init+0x7e>
 801a482:	b334      	cbz	r4, 801a4d2 <rcl_guard_condition_init+0x7e>
 801a484:	6866      	ldr	r6, [r4, #4]
 801a486:	b9ee      	cbnz	r6, 801a4c4 <rcl_guard_condition_init+0x70>
 801a488:	b31d      	cbz	r5, 801a4d2 <rcl_guard_condition_init+0x7e>
 801a48a:	4628      	mov	r0, r5
 801a48c:	f7fa fe98 	bl	80151c0 <rcl_context_is_valid>
 801a490:	b308      	cbz	r0, 801a4d6 <rcl_guard_condition_init+0x82>
 801a492:	9b01      	ldr	r3, [sp, #4]
 801a494:	9905      	ldr	r1, [sp, #20]
 801a496:	201c      	movs	r0, #28
 801a498:	4798      	blx	r3
 801a49a:	4607      	mov	r7, r0
 801a49c:	6060      	str	r0, [r4, #4]
 801a49e:	b310      	cbz	r0, 801a4e6 <rcl_guard_condition_init+0x92>
 801a4a0:	6828      	ldr	r0, [r5, #0]
 801a4a2:	3028      	adds	r0, #40	@ 0x28
 801a4a4:	f000 f9d4 	bl	801a850 <rmw_create_guard_condition>
 801a4a8:	6038      	str	r0, [r7, #0]
 801a4aa:	6860      	ldr	r0, [r4, #4]
 801a4ac:	6805      	ldr	r5, [r0, #0]
 801a4ae:	b1a5      	cbz	r5, 801a4da <rcl_guard_condition_init+0x86>
 801a4b0:	2301      	movs	r3, #1
 801a4b2:	ac01      	add	r4, sp, #4
 801a4b4:	7103      	strb	r3, [r0, #4]
 801a4b6:	f100 0708 	add.w	r7, r0, #8
 801a4ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801a4bc:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 801a4be:	6823      	ldr	r3, [r4, #0]
 801a4c0:	603b      	str	r3, [r7, #0]
 801a4c2:	e000      	b.n	801a4c6 <rcl_guard_condition_init+0x72>
 801a4c4:	2664      	movs	r6, #100	@ 0x64
 801a4c6:	4630      	mov	r0, r6
 801a4c8:	b007      	add	sp, #28
 801a4ca:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801a4ce:	b002      	add	sp, #8
 801a4d0:	4770      	bx	lr
 801a4d2:	260b      	movs	r6, #11
 801a4d4:	e7f7      	b.n	801a4c6 <rcl_guard_condition_init+0x72>
 801a4d6:	2665      	movs	r6, #101	@ 0x65
 801a4d8:	e7f5      	b.n	801a4c6 <rcl_guard_condition_init+0x72>
 801a4da:	9b02      	ldr	r3, [sp, #8]
 801a4dc:	9905      	ldr	r1, [sp, #20]
 801a4de:	4798      	blx	r3
 801a4e0:	2601      	movs	r6, #1
 801a4e2:	6065      	str	r5, [r4, #4]
 801a4e4:	e7ef      	b.n	801a4c6 <rcl_guard_condition_init+0x72>
 801a4e6:	260a      	movs	r6, #10
 801a4e8:	e7ed      	b.n	801a4c6 <rcl_guard_condition_init+0x72>
 801a4ea:	bf00      	nop

0801a4ec <rcl_guard_condition_init_from_rmw>:
 801a4ec:	b082      	sub	sp, #8
 801a4ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a4f2:	b086      	sub	sp, #24
 801a4f4:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 801a4f8:	4604      	mov	r4, r0
 801a4fa:	f84c 3f04 	str.w	r3, [ip, #4]!
 801a4fe:	460e      	mov	r6, r1
 801a500:	4617      	mov	r7, r2
 801a502:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801a506:	f10d 0e04 	add.w	lr, sp, #4
 801a50a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801a50e:	f8dc 3000 	ldr.w	r3, [ip]
 801a512:	f8ce 3000 	str.w	r3, [lr]
 801a516:	a801      	add	r0, sp, #4
 801a518:	f7f5 fa28 	bl	800f96c <rcutils_allocator_is_valid>
 801a51c:	b350      	cbz	r0, 801a574 <rcl_guard_condition_init_from_rmw+0x88>
 801a51e:	b34c      	cbz	r4, 801a574 <rcl_guard_condition_init_from_rmw+0x88>
 801a520:	f8d4 8004 	ldr.w	r8, [r4, #4]
 801a524:	f1b8 0f00 	cmp.w	r8, #0
 801a528:	d11e      	bne.n	801a568 <rcl_guard_condition_init_from_rmw+0x7c>
 801a52a:	b31f      	cbz	r7, 801a574 <rcl_guard_condition_init_from_rmw+0x88>
 801a52c:	4638      	mov	r0, r7
 801a52e:	f7fa fe47 	bl	80151c0 <rcl_context_is_valid>
 801a532:	b328      	cbz	r0, 801a580 <rcl_guard_condition_init_from_rmw+0x94>
 801a534:	9b01      	ldr	r3, [sp, #4]
 801a536:	9905      	ldr	r1, [sp, #20]
 801a538:	201c      	movs	r0, #28
 801a53a:	4798      	blx	r3
 801a53c:	4605      	mov	r5, r0
 801a53e:	6060      	str	r0, [r4, #4]
 801a540:	b358      	cbz	r0, 801a59a <rcl_guard_condition_init_from_rmw+0xae>
 801a542:	b1fe      	cbz	r6, 801a584 <rcl_guard_condition_init_from_rmw+0x98>
 801a544:	6006      	str	r6, [r0, #0]
 801a546:	f880 8004 	strb.w	r8, [r0, #4]
 801a54a:	ac01      	add	r4, sp, #4
 801a54c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801a54e:	f105 0c08 	add.w	ip, r5, #8
 801a552:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801a556:	6823      	ldr	r3, [r4, #0]
 801a558:	f8cc 3000 	str.w	r3, [ip]
 801a55c:	2000      	movs	r0, #0
 801a55e:	b006      	add	sp, #24
 801a560:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a564:	b002      	add	sp, #8
 801a566:	4770      	bx	lr
 801a568:	2064      	movs	r0, #100	@ 0x64
 801a56a:	b006      	add	sp, #24
 801a56c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a570:	b002      	add	sp, #8
 801a572:	4770      	bx	lr
 801a574:	200b      	movs	r0, #11
 801a576:	b006      	add	sp, #24
 801a578:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a57c:	b002      	add	sp, #8
 801a57e:	4770      	bx	lr
 801a580:	2065      	movs	r0, #101	@ 0x65
 801a582:	e7f2      	b.n	801a56a <rcl_guard_condition_init_from_rmw+0x7e>
 801a584:	6838      	ldr	r0, [r7, #0]
 801a586:	3028      	adds	r0, #40	@ 0x28
 801a588:	f000 f962 	bl	801a850 <rmw_create_guard_condition>
 801a58c:	6028      	str	r0, [r5, #0]
 801a58e:	6865      	ldr	r5, [r4, #4]
 801a590:	682e      	ldr	r6, [r5, #0]
 801a592:	b126      	cbz	r6, 801a59e <rcl_guard_condition_init_from_rmw+0xb2>
 801a594:	2301      	movs	r3, #1
 801a596:	712b      	strb	r3, [r5, #4]
 801a598:	e7d7      	b.n	801a54a <rcl_guard_condition_init_from_rmw+0x5e>
 801a59a:	200a      	movs	r0, #10
 801a59c:	e7e5      	b.n	801a56a <rcl_guard_condition_init_from_rmw+0x7e>
 801a59e:	4628      	mov	r0, r5
 801a5a0:	9b02      	ldr	r3, [sp, #8]
 801a5a2:	9905      	ldr	r1, [sp, #20]
 801a5a4:	4798      	blx	r3
 801a5a6:	6066      	str	r6, [r4, #4]
 801a5a8:	2001      	movs	r0, #1
 801a5aa:	e7de      	b.n	801a56a <rcl_guard_condition_init_from_rmw+0x7e>

0801a5ac <rcl_guard_condition_fini>:
 801a5ac:	b570      	push	{r4, r5, r6, lr}
 801a5ae:	b082      	sub	sp, #8
 801a5b0:	b1f0      	cbz	r0, 801a5f0 <rcl_guard_condition_fini+0x44>
 801a5b2:	6843      	ldr	r3, [r0, #4]
 801a5b4:	4604      	mov	r4, r0
 801a5b6:	b163      	cbz	r3, 801a5d2 <rcl_guard_condition_fini+0x26>
 801a5b8:	6818      	ldr	r0, [r3, #0]
 801a5ba:	68de      	ldr	r6, [r3, #12]
 801a5bc:	6999      	ldr	r1, [r3, #24]
 801a5be:	b160      	cbz	r0, 801a5da <rcl_guard_condition_fini+0x2e>
 801a5c0:	791d      	ldrb	r5, [r3, #4]
 801a5c2:	b965      	cbnz	r5, 801a5de <rcl_guard_condition_fini+0x32>
 801a5c4:	4618      	mov	r0, r3
 801a5c6:	47b0      	blx	r6
 801a5c8:	2300      	movs	r3, #0
 801a5ca:	4628      	mov	r0, r5
 801a5cc:	6063      	str	r3, [r4, #4]
 801a5ce:	b002      	add	sp, #8
 801a5d0:	bd70      	pop	{r4, r5, r6, pc}
 801a5d2:	461d      	mov	r5, r3
 801a5d4:	4628      	mov	r0, r5
 801a5d6:	b002      	add	sp, #8
 801a5d8:	bd70      	pop	{r4, r5, r6, pc}
 801a5da:	4605      	mov	r5, r0
 801a5dc:	e7f2      	b.n	801a5c4 <rcl_guard_condition_fini+0x18>
 801a5de:	9101      	str	r1, [sp, #4]
 801a5e0:	f000 f94a 	bl	801a878 <rmw_destroy_guard_condition>
 801a5e4:	1e05      	subs	r5, r0, #0
 801a5e6:	6863      	ldr	r3, [r4, #4]
 801a5e8:	9901      	ldr	r1, [sp, #4]
 801a5ea:	bf18      	it	ne
 801a5ec:	2501      	movne	r5, #1
 801a5ee:	e7e9      	b.n	801a5c4 <rcl_guard_condition_fini+0x18>
 801a5f0:	250b      	movs	r5, #11
 801a5f2:	4628      	mov	r0, r5
 801a5f4:	b002      	add	sp, #8
 801a5f6:	bd70      	pop	{r4, r5, r6, pc}

0801a5f8 <rcl_guard_condition_get_default_options>:
 801a5f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a5fa:	b087      	sub	sp, #28
 801a5fc:	4606      	mov	r6, r0
 801a5fe:	4668      	mov	r0, sp
 801a600:	f7f5 f9a6 	bl	800f950 <rcutils_get_default_allocator>
 801a604:	4b09      	ldr	r3, [pc, #36]	@ (801a62c <rcl_guard_condition_get_default_options+0x34>)
 801a606:	46ee      	mov	lr, sp
 801a608:	469c      	mov	ip, r3
 801a60a:	461d      	mov	r5, r3
 801a60c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801a610:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801a614:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801a616:	4634      	mov	r4, r6
 801a618:	f8de 7000 	ldr.w	r7, [lr]
 801a61c:	f8cc 7000 	str.w	r7, [ip]
 801a620:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801a622:	4630      	mov	r0, r6
 801a624:	6027      	str	r7, [r4, #0]
 801a626:	b007      	add	sp, #28
 801a628:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a62a:	bf00      	nop
 801a62c:	2000b69c 	.word	0x2000b69c

0801a630 <rcl_trigger_guard_condition>:
 801a630:	b148      	cbz	r0, 801a646 <rcl_trigger_guard_condition+0x16>
 801a632:	b508      	push	{r3, lr}
 801a634:	6843      	ldr	r3, [r0, #4]
 801a636:	b143      	cbz	r3, 801a64a <rcl_trigger_guard_condition+0x1a>
 801a638:	6818      	ldr	r0, [r3, #0]
 801a63a:	f000 f931 	bl	801a8a0 <rmw_trigger_guard_condition>
 801a63e:	3800      	subs	r0, #0
 801a640:	bf18      	it	ne
 801a642:	2001      	movne	r0, #1
 801a644:	bd08      	pop	{r3, pc}
 801a646:	200b      	movs	r0, #11
 801a648:	4770      	bx	lr
 801a64a:	200b      	movs	r0, #11
 801a64c:	bd08      	pop	{r3, pc}
 801a64e:	bf00      	nop

0801a650 <rcl_guard_condition_get_rmw_handle>:
 801a650:	b110      	cbz	r0, 801a658 <rcl_guard_condition_get_rmw_handle+0x8>
 801a652:	6840      	ldr	r0, [r0, #4]
 801a654:	b100      	cbz	r0, 801a658 <rcl_guard_condition_get_rmw_handle+0x8>
 801a656:	6800      	ldr	r0, [r0, #0]
 801a658:	4770      	bx	lr
 801a65a:	bf00      	nop

0801a65c <rcl_validate_topic_name>:
 801a65c:	2800      	cmp	r0, #0
 801a65e:	d07a      	beq.n	801a756 <rcl_validate_topic_name+0xfa>
 801a660:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a664:	460e      	mov	r6, r1
 801a666:	2900      	cmp	r1, #0
 801a668:	d07c      	beq.n	801a764 <rcl_validate_topic_name+0x108>
 801a66a:	4617      	mov	r7, r2
 801a66c:	4605      	mov	r5, r0
 801a66e:	f7e5 fde1 	bl	8000234 <strlen>
 801a672:	b1b0      	cbz	r0, 801a6a2 <rcl_validate_topic_name+0x46>
 801a674:	f895 9000 	ldrb.w	r9, [r5]
 801a678:	f8df c180 	ldr.w	ip, [pc, #384]	@ 801a7fc <rcl_validate_topic_name+0x1a0>
 801a67c:	f81c 3009 	ldrb.w	r3, [ip, r9]
 801a680:	f013 0304 	ands.w	r3, r3, #4
 801a684:	d169      	bne.n	801a75a <rcl_validate_topic_name+0xfe>
 801a686:	f100 38ff 	add.w	r8, r0, #4294967295	@ 0xffffffff
 801a68a:	f815 2008 	ldrb.w	r2, [r5, r8]
 801a68e:	2a2f      	cmp	r2, #47	@ 0x2f
 801a690:	d10e      	bne.n	801a6b0 <rcl_validate_topic_name+0x54>
 801a692:	2202      	movs	r2, #2
 801a694:	6032      	str	r2, [r6, #0]
 801a696:	b36f      	cbz	r7, 801a6f4 <rcl_validate_topic_name+0x98>
 801a698:	f8c7 8000 	str.w	r8, [r7]
 801a69c:	4618      	mov	r0, r3
 801a69e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a6a2:	2301      	movs	r3, #1
 801a6a4:	6033      	str	r3, [r6, #0]
 801a6a6:	b32f      	cbz	r7, 801a6f4 <rcl_validate_topic_name+0x98>
 801a6a8:	2000      	movs	r0, #0
 801a6aa:	6038      	str	r0, [r7, #0]
 801a6ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a6b0:	f105 3aff 	add.w	sl, r5, #4294967295	@ 0xffffffff
 801a6b4:	461c      	mov	r4, r3
 801a6b6:	4619      	mov	r1, r3
 801a6b8:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 801a6bc:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 801a6c0:	f1be 0f09 	cmp.w	lr, #9
 801a6c4:	d919      	bls.n	801a6fa <rcl_validate_topic_name+0x9e>
 801a6c6:	f022 0e20 	bic.w	lr, r2, #32
 801a6ca:	f1ae 0e41 	sub.w	lr, lr, #65	@ 0x41
 801a6ce:	f1be 0f19 	cmp.w	lr, #25
 801a6d2:	d912      	bls.n	801a6fa <rcl_validate_topic_name+0x9e>
 801a6d4:	2a5f      	cmp	r2, #95	@ 0x5f
 801a6d6:	d019      	beq.n	801a70c <rcl_validate_topic_name+0xb0>
 801a6d8:	2a2f      	cmp	r2, #47	@ 0x2f
 801a6da:	d051      	beq.n	801a780 <rcl_validate_topic_name+0x124>
 801a6dc:	2a7e      	cmp	r2, #126	@ 0x7e
 801a6de:	d048      	beq.n	801a772 <rcl_validate_topic_name+0x116>
 801a6e0:	2a7b      	cmp	r2, #123	@ 0x7b
 801a6e2:	d054      	beq.n	801a78e <rcl_validate_topic_name+0x132>
 801a6e4:	2a7d      	cmp	r2, #125	@ 0x7d
 801a6e6:	d161      	bne.n	801a7ac <rcl_validate_topic_name+0x150>
 801a6e8:	2c00      	cmp	r4, #0
 801a6ea:	d155      	bne.n	801a798 <rcl_validate_topic_name+0x13c>
 801a6ec:	2305      	movs	r3, #5
 801a6ee:	6033      	str	r3, [r6, #0]
 801a6f0:	b107      	cbz	r7, 801a6f4 <rcl_validate_topic_name+0x98>
 801a6f2:	6039      	str	r1, [r7, #0]
 801a6f4:	2000      	movs	r0, #0
 801a6f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a6fa:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801a6fe:	0752      	lsls	r2, r2, #29
 801a700:	d504      	bpl.n	801a70c <rcl_validate_topic_name+0xb0>
 801a702:	b11c      	cbz	r4, 801a70c <rcl_validate_topic_name+0xb0>
 801a704:	b111      	cbz	r1, 801a70c <rcl_validate_topic_name+0xb0>
 801a706:	1e4a      	subs	r2, r1, #1
 801a708:	429a      	cmp	r2, r3
 801a70a:	d02d      	beq.n	801a768 <rcl_validate_topic_name+0x10c>
 801a70c:	3101      	adds	r1, #1
 801a70e:	4288      	cmp	r0, r1
 801a710:	d1d2      	bne.n	801a6b8 <rcl_validate_topic_name+0x5c>
 801a712:	2c00      	cmp	r4, #0
 801a714:	d145      	bne.n	801a7a2 <rcl_validate_topic_name+0x146>
 801a716:	f1b9 0f7e 	cmp.w	r9, #126	@ 0x7e
 801a71a:	d04f      	beq.n	801a7bc <rcl_validate_topic_name+0x160>
 801a71c:	4620      	mov	r0, r4
 801a71e:	2301      	movs	r3, #1
 801a720:	e006      	b.n	801a730 <rcl_validate_topic_name+0xd4>
 801a722:	428b      	cmp	r3, r1
 801a724:	f105 0501 	add.w	r5, r5, #1
 801a728:	f103 0201 	add.w	r2, r3, #1
 801a72c:	d236      	bcs.n	801a79c <rcl_validate_topic_name+0x140>
 801a72e:	4613      	mov	r3, r2
 801a730:	4580      	cmp	r8, r0
 801a732:	f100 0001 	add.w	r0, r0, #1
 801a736:	d0f4      	beq.n	801a722 <rcl_validate_topic_name+0xc6>
 801a738:	782a      	ldrb	r2, [r5, #0]
 801a73a:	2a2f      	cmp	r2, #47	@ 0x2f
 801a73c:	d1f1      	bne.n	801a722 <rcl_validate_topic_name+0xc6>
 801a73e:	786a      	ldrb	r2, [r5, #1]
 801a740:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801a744:	0754      	lsls	r4, r2, #29
 801a746:	d5ec      	bpl.n	801a722 <rcl_validate_topic_name+0xc6>
 801a748:	2204      	movs	r2, #4
 801a74a:	6032      	str	r2, [r6, #0]
 801a74c:	2f00      	cmp	r7, #0
 801a74e:	d0d1      	beq.n	801a6f4 <rcl_validate_topic_name+0x98>
 801a750:	603b      	str	r3, [r7, #0]
 801a752:	2000      	movs	r0, #0
 801a754:	e7aa      	b.n	801a6ac <rcl_validate_topic_name+0x50>
 801a756:	200b      	movs	r0, #11
 801a758:	4770      	bx	lr
 801a75a:	2304      	movs	r3, #4
 801a75c:	6033      	str	r3, [r6, #0]
 801a75e:	2f00      	cmp	r7, #0
 801a760:	d1a2      	bne.n	801a6a8 <rcl_validate_topic_name+0x4c>
 801a762:	e7c7      	b.n	801a6f4 <rcl_validate_topic_name+0x98>
 801a764:	200b      	movs	r0, #11
 801a766:	e7a1      	b.n	801a6ac <rcl_validate_topic_name+0x50>
 801a768:	2309      	movs	r3, #9
 801a76a:	6033      	str	r3, [r6, #0]
 801a76c:	2f00      	cmp	r7, #0
 801a76e:	d1c0      	bne.n	801a6f2 <rcl_validate_topic_name+0x96>
 801a770:	e7c0      	b.n	801a6f4 <rcl_validate_topic_name+0x98>
 801a772:	2900      	cmp	r1, #0
 801a774:	d0ca      	beq.n	801a70c <rcl_validate_topic_name+0xb0>
 801a776:	2306      	movs	r3, #6
 801a778:	6033      	str	r3, [r6, #0]
 801a77a:	2f00      	cmp	r7, #0
 801a77c:	d1b9      	bne.n	801a6f2 <rcl_validate_topic_name+0x96>
 801a77e:	e7b9      	b.n	801a6f4 <rcl_validate_topic_name+0x98>
 801a780:	2c00      	cmp	r4, #0
 801a782:	d0c3      	beq.n	801a70c <rcl_validate_topic_name+0xb0>
 801a784:	2308      	movs	r3, #8
 801a786:	6033      	str	r3, [r6, #0]
 801a788:	2f00      	cmp	r7, #0
 801a78a:	d1b2      	bne.n	801a6f2 <rcl_validate_topic_name+0x96>
 801a78c:	e7b2      	b.n	801a6f4 <rcl_validate_topic_name+0x98>
 801a78e:	2c00      	cmp	r4, #0
 801a790:	d1f8      	bne.n	801a784 <rcl_validate_topic_name+0x128>
 801a792:	460b      	mov	r3, r1
 801a794:	2401      	movs	r4, #1
 801a796:	e7b9      	b.n	801a70c <rcl_validate_topic_name+0xb0>
 801a798:	2400      	movs	r4, #0
 801a79a:	e7b7      	b.n	801a70c <rcl_validate_topic_name+0xb0>
 801a79c:	2000      	movs	r0, #0
 801a79e:	6030      	str	r0, [r6, #0]
 801a7a0:	e784      	b.n	801a6ac <rcl_validate_topic_name+0x50>
 801a7a2:	2205      	movs	r2, #5
 801a7a4:	6032      	str	r2, [r6, #0]
 801a7a6:	2f00      	cmp	r7, #0
 801a7a8:	d1d2      	bne.n	801a750 <rcl_validate_topic_name+0xf4>
 801a7aa:	e7a3      	b.n	801a6f4 <rcl_validate_topic_name+0x98>
 801a7ac:	2c00      	cmp	r4, #0
 801a7ae:	bf14      	ite	ne
 801a7b0:	2308      	movne	r3, #8
 801a7b2:	2303      	moveq	r3, #3
 801a7b4:	6033      	str	r3, [r6, #0]
 801a7b6:	2f00      	cmp	r7, #0
 801a7b8:	d19b      	bne.n	801a6f2 <rcl_validate_topic_name+0x96>
 801a7ba:	e79b      	b.n	801a6f4 <rcl_validate_topic_name+0x98>
 801a7bc:	2301      	movs	r3, #1
 801a7be:	e00a      	b.n	801a7d6 <rcl_validate_topic_name+0x17a>
 801a7c0:	2c01      	cmp	r4, #1
 801a7c2:	d013      	beq.n	801a7ec <rcl_validate_topic_name+0x190>
 801a7c4:	4299      	cmp	r1, r3
 801a7c6:	f104 0401 	add.w	r4, r4, #1
 801a7ca:	f105 0501 	add.w	r5, r5, #1
 801a7ce:	f103 0201 	add.w	r2, r3, #1
 801a7d2:	d9e3      	bls.n	801a79c <rcl_validate_topic_name+0x140>
 801a7d4:	4613      	mov	r3, r2
 801a7d6:	45a0      	cmp	r8, r4
 801a7d8:	d0f4      	beq.n	801a7c4 <rcl_validate_topic_name+0x168>
 801a7da:	782a      	ldrb	r2, [r5, #0]
 801a7dc:	2a2f      	cmp	r2, #47	@ 0x2f
 801a7de:	d1ef      	bne.n	801a7c0 <rcl_validate_topic_name+0x164>
 801a7e0:	786a      	ldrb	r2, [r5, #1]
 801a7e2:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801a7e6:	0752      	lsls	r2, r2, #29
 801a7e8:	d5ec      	bpl.n	801a7c4 <rcl_validate_topic_name+0x168>
 801a7ea:	e7ad      	b.n	801a748 <rcl_validate_topic_name+0xec>
 801a7ec:	2307      	movs	r3, #7
 801a7ee:	6033      	str	r3, [r6, #0]
 801a7f0:	2f00      	cmp	r7, #0
 801a7f2:	f43f af7f 	beq.w	801a6f4 <rcl_validate_topic_name+0x98>
 801a7f6:	603c      	str	r4, [r7, #0]
 801a7f8:	2000      	movs	r0, #0
 801a7fa:	e757      	b.n	801a6ac <rcl_validate_topic_name+0x50>
 801a7fc:	0801ebc3 	.word	0x0801ebc3

0801a800 <rcutils_string_array_fini>:
 801a800:	b320      	cbz	r0, 801a84c <rcutils_string_array_fini+0x4c>
 801a802:	b570      	push	{r4, r5, r6, lr}
 801a804:	4604      	mov	r4, r0
 801a806:	6840      	ldr	r0, [r0, #4]
 801a808:	b1d8      	cbz	r0, 801a842 <rcutils_string_array_fini+0x42>
 801a80a:	f104 0008 	add.w	r0, r4, #8
 801a80e:	f7f5 f8ad 	bl	800f96c <rcutils_allocator_is_valid>
 801a812:	b1b8      	cbz	r0, 801a844 <rcutils_string_array_fini+0x44>
 801a814:	6823      	ldr	r3, [r4, #0]
 801a816:	b1bb      	cbz	r3, 801a848 <rcutils_string_array_fini+0x48>
 801a818:	2500      	movs	r5, #0
 801a81a:	6860      	ldr	r0, [r4, #4]
 801a81c:	462e      	mov	r6, r5
 801a81e:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 801a822:	68e3      	ldr	r3, [r4, #12]
 801a824:	69a1      	ldr	r1, [r4, #24]
 801a826:	4798      	blx	r3
 801a828:	e9d4 3000 	ldrd	r3, r0, [r4]
 801a82c:	f840 6025 	str.w	r6, [r0, r5, lsl #2]
 801a830:	3501      	adds	r5, #1
 801a832:	429d      	cmp	r5, r3
 801a834:	d3f3      	bcc.n	801a81e <rcutils_string_array_fini+0x1e>
 801a836:	68e3      	ldr	r3, [r4, #12]
 801a838:	69a1      	ldr	r1, [r4, #24]
 801a83a:	4798      	blx	r3
 801a83c:	2000      	movs	r0, #0
 801a83e:	e9c4 0000 	strd	r0, r0, [r4]
 801a842:	bd70      	pop	{r4, r5, r6, pc}
 801a844:	200b      	movs	r0, #11
 801a846:	bd70      	pop	{r4, r5, r6, pc}
 801a848:	6860      	ldr	r0, [r4, #4]
 801a84a:	e7f4      	b.n	801a836 <rcutils_string_array_fini+0x36>
 801a84c:	200b      	movs	r0, #11
 801a84e:	4770      	bx	lr

0801a850 <rmw_create_guard_condition>:
 801a850:	b538      	push	{r3, r4, r5, lr}
 801a852:	4605      	mov	r5, r0
 801a854:	4807      	ldr	r0, [pc, #28]	@ (801a874 <rmw_create_guard_condition+0x24>)
 801a856:	f7fd ff47 	bl	80186e8 <get_memory>
 801a85a:	b148      	cbz	r0, 801a870 <rmw_create_guard_condition+0x20>
 801a85c:	6884      	ldr	r4, [r0, #8]
 801a85e:	2300      	movs	r3, #0
 801a860:	7423      	strb	r3, [r4, #16]
 801a862:	61e5      	str	r5, [r4, #28]
 801a864:	f7fd ffa8 	bl	80187b8 <rmw_get_implementation_identifier>
 801a868:	e9c4 0405 	strd	r0, r4, [r4, #20]
 801a86c:	f104 0014 	add.w	r0, r4, #20
 801a870:	bd38      	pop	{r3, r4, r5, pc}
 801a872:	bf00      	nop
 801a874:	2000b4c4 	.word	0x2000b4c4

0801a878 <rmw_destroy_guard_condition>:
 801a878:	b508      	push	{r3, lr}
 801a87a:	4b08      	ldr	r3, [pc, #32]	@ (801a89c <rmw_destroy_guard_condition+0x24>)
 801a87c:	6819      	ldr	r1, [r3, #0]
 801a87e:	b911      	cbnz	r1, 801a886 <rmw_destroy_guard_condition+0xe>
 801a880:	e00a      	b.n	801a898 <rmw_destroy_guard_condition+0x20>
 801a882:	6849      	ldr	r1, [r1, #4]
 801a884:	b141      	cbz	r1, 801a898 <rmw_destroy_guard_condition+0x20>
 801a886:	688b      	ldr	r3, [r1, #8]
 801a888:	3314      	adds	r3, #20
 801a88a:	4298      	cmp	r0, r3
 801a88c:	d1f9      	bne.n	801a882 <rmw_destroy_guard_condition+0xa>
 801a88e:	4803      	ldr	r0, [pc, #12]	@ (801a89c <rmw_destroy_guard_condition+0x24>)
 801a890:	f7fd ff3a 	bl	8018708 <put_memory>
 801a894:	2000      	movs	r0, #0
 801a896:	bd08      	pop	{r3, pc}
 801a898:	2001      	movs	r0, #1
 801a89a:	bd08      	pop	{r3, pc}
 801a89c:	2000b4c4 	.word	0x2000b4c4

0801a8a0 <rmw_trigger_guard_condition>:
 801a8a0:	b160      	cbz	r0, 801a8bc <rmw_trigger_guard_condition+0x1c>
 801a8a2:	b510      	push	{r4, lr}
 801a8a4:	4604      	mov	r4, r0
 801a8a6:	6800      	ldr	r0, [r0, #0]
 801a8a8:	f7f6 fb88 	bl	8010fbc <is_uxrce_rmw_identifier_valid>
 801a8ac:	b908      	cbnz	r0, 801a8b2 <rmw_trigger_guard_condition+0x12>
 801a8ae:	2001      	movs	r0, #1
 801a8b0:	bd10      	pop	{r4, pc}
 801a8b2:	6863      	ldr	r3, [r4, #4]
 801a8b4:	2201      	movs	r2, #1
 801a8b6:	741a      	strb	r2, [r3, #16]
 801a8b8:	2000      	movs	r0, #0
 801a8ba:	bd10      	pop	{r4, pc}
 801a8bc:	2001      	movs	r0, #1
 801a8be:	4770      	bx	lr

0801a8c0 <rosidl_runtime_c__String__init>:
 801a8c0:	b510      	push	{r4, lr}
 801a8c2:	4604      	mov	r4, r0
 801a8c4:	b086      	sub	sp, #24
 801a8c6:	b170      	cbz	r0, 801a8e6 <rosidl_runtime_c__String__init+0x26>
 801a8c8:	a801      	add	r0, sp, #4
 801a8ca:	f7f5 f841 	bl	800f950 <rcutils_get_default_allocator>
 801a8ce:	9b01      	ldr	r3, [sp, #4]
 801a8d0:	9905      	ldr	r1, [sp, #20]
 801a8d2:	2001      	movs	r0, #1
 801a8d4:	4798      	blx	r3
 801a8d6:	6020      	str	r0, [r4, #0]
 801a8d8:	b128      	cbz	r0, 801a8e6 <rosidl_runtime_c__String__init+0x26>
 801a8da:	2100      	movs	r1, #0
 801a8dc:	2201      	movs	r2, #1
 801a8de:	7001      	strb	r1, [r0, #0]
 801a8e0:	e9c4 1201 	strd	r1, r2, [r4, #4]
 801a8e4:	4610      	mov	r0, r2
 801a8e6:	b006      	add	sp, #24
 801a8e8:	bd10      	pop	{r4, pc}
 801a8ea:	bf00      	nop

0801a8ec <rosidl_runtime_c__String__fini>:
 801a8ec:	b320      	cbz	r0, 801a938 <rosidl_runtime_c__String__fini+0x4c>
 801a8ee:	b510      	push	{r4, lr}
 801a8f0:	6803      	ldr	r3, [r0, #0]
 801a8f2:	b086      	sub	sp, #24
 801a8f4:	4604      	mov	r4, r0
 801a8f6:	b173      	cbz	r3, 801a916 <rosidl_runtime_c__String__fini+0x2a>
 801a8f8:	6883      	ldr	r3, [r0, #8]
 801a8fa:	b1f3      	cbz	r3, 801a93a <rosidl_runtime_c__String__fini+0x4e>
 801a8fc:	a801      	add	r0, sp, #4
 801a8fe:	f7f5 f827 	bl	800f950 <rcutils_get_default_allocator>
 801a902:	9b02      	ldr	r3, [sp, #8]
 801a904:	9905      	ldr	r1, [sp, #20]
 801a906:	6820      	ldr	r0, [r4, #0]
 801a908:	4798      	blx	r3
 801a90a:	2300      	movs	r3, #0
 801a90c:	e9c4 3300 	strd	r3, r3, [r4]
 801a910:	60a3      	str	r3, [r4, #8]
 801a912:	b006      	add	sp, #24
 801a914:	bd10      	pop	{r4, pc}
 801a916:	6843      	ldr	r3, [r0, #4]
 801a918:	b9db      	cbnz	r3, 801a952 <rosidl_runtime_c__String__fini+0x66>
 801a91a:	6883      	ldr	r3, [r0, #8]
 801a91c:	2b00      	cmp	r3, #0
 801a91e:	d0f8      	beq.n	801a912 <rosidl_runtime_c__String__fini+0x26>
 801a920:	4b12      	ldr	r3, [pc, #72]	@ (801a96c <rosidl_runtime_c__String__fini+0x80>)
 801a922:	4813      	ldr	r0, [pc, #76]	@ (801a970 <rosidl_runtime_c__String__fini+0x84>)
 801a924:	681b      	ldr	r3, [r3, #0]
 801a926:	2251      	movs	r2, #81	@ 0x51
 801a928:	68db      	ldr	r3, [r3, #12]
 801a92a:	2101      	movs	r1, #1
 801a92c:	f000 fb82 	bl	801b034 <fwrite>
 801a930:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801a934:	f000 f83e 	bl	801a9b4 <exit>
 801a938:	4770      	bx	lr
 801a93a:	4b0c      	ldr	r3, [pc, #48]	@ (801a96c <rosidl_runtime_c__String__fini+0x80>)
 801a93c:	480d      	ldr	r0, [pc, #52]	@ (801a974 <rosidl_runtime_c__String__fini+0x88>)
 801a93e:	681b      	ldr	r3, [r3, #0]
 801a940:	224c      	movs	r2, #76	@ 0x4c
 801a942:	68db      	ldr	r3, [r3, #12]
 801a944:	2101      	movs	r1, #1
 801a946:	f000 fb75 	bl	801b034 <fwrite>
 801a94a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801a94e:	f000 f831 	bl	801a9b4 <exit>
 801a952:	4b06      	ldr	r3, [pc, #24]	@ (801a96c <rosidl_runtime_c__String__fini+0x80>)
 801a954:	4808      	ldr	r0, [pc, #32]	@ (801a978 <rosidl_runtime_c__String__fini+0x8c>)
 801a956:	681b      	ldr	r3, [r3, #0]
 801a958:	224e      	movs	r2, #78	@ 0x4e
 801a95a:	68db      	ldr	r3, [r3, #12]
 801a95c:	2101      	movs	r1, #1
 801a95e:	f000 fb69 	bl	801b034 <fwrite>
 801a962:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801a966:	f000 f825 	bl	801a9b4 <exit>
 801a96a:	bf00      	nop
 801a96c:	20000438 	.word	0x20000438
 801a970:	0801e49c 	.word	0x0801e49c
 801a974:	0801e3fc 	.word	0x0801e3fc
 801a978:	0801e44c 	.word	0x0801e44c

0801a97c <calloc>:
 801a97c:	4b02      	ldr	r3, [pc, #8]	@ (801a988 <calloc+0xc>)
 801a97e:	460a      	mov	r2, r1
 801a980:	4601      	mov	r1, r0
 801a982:	6818      	ldr	r0, [r3, #0]
 801a984:	f000 b802 	b.w	801a98c <_calloc_r>
 801a988:	20000438 	.word	0x20000438

0801a98c <_calloc_r>:
 801a98c:	b570      	push	{r4, r5, r6, lr}
 801a98e:	fba1 5402 	umull	r5, r4, r1, r2
 801a992:	b934      	cbnz	r4, 801a9a2 <_calloc_r+0x16>
 801a994:	4629      	mov	r1, r5
 801a996:	f000 f899 	bl	801aacc <_malloc_r>
 801a99a:	4606      	mov	r6, r0
 801a99c:	b928      	cbnz	r0, 801a9aa <_calloc_r+0x1e>
 801a99e:	4630      	mov	r0, r6
 801a9a0:	bd70      	pop	{r4, r5, r6, pc}
 801a9a2:	220c      	movs	r2, #12
 801a9a4:	6002      	str	r2, [r0, #0]
 801a9a6:	2600      	movs	r6, #0
 801a9a8:	e7f9      	b.n	801a99e <_calloc_r+0x12>
 801a9aa:	462a      	mov	r2, r5
 801a9ac:	4621      	mov	r1, r4
 801a9ae:	f000 fcd5 	bl	801b35c <memset>
 801a9b2:	e7f4      	b.n	801a99e <_calloc_r+0x12>

0801a9b4 <exit>:
 801a9b4:	b508      	push	{r3, lr}
 801a9b6:	4b06      	ldr	r3, [pc, #24]	@ (801a9d0 <exit+0x1c>)
 801a9b8:	4604      	mov	r4, r0
 801a9ba:	b113      	cbz	r3, 801a9c2 <exit+0xe>
 801a9bc:	2100      	movs	r1, #0
 801a9be:	f3af 8000 	nop.w
 801a9c2:	4b04      	ldr	r3, [pc, #16]	@ (801a9d4 <exit+0x20>)
 801a9c4:	681b      	ldr	r3, [r3, #0]
 801a9c6:	b103      	cbz	r3, 801a9ca <exit+0x16>
 801a9c8:	4798      	blx	r3
 801a9ca:	4620      	mov	r0, r4
 801a9cc:	f7e9 f928 	bl	8003c20 <_exit>
 801a9d0:	00000000 	.word	0x00000000
 801a9d4:	2000b7f0 	.word	0x2000b7f0

0801a9d8 <getenv>:
 801a9d8:	b507      	push	{r0, r1, r2, lr}
 801a9da:	4b04      	ldr	r3, [pc, #16]	@ (801a9ec <getenv+0x14>)
 801a9dc:	4601      	mov	r1, r0
 801a9de:	aa01      	add	r2, sp, #4
 801a9e0:	6818      	ldr	r0, [r3, #0]
 801a9e2:	f000 f805 	bl	801a9f0 <_findenv_r>
 801a9e6:	b003      	add	sp, #12
 801a9e8:	f85d fb04 	ldr.w	pc, [sp], #4
 801a9ec:	20000438 	.word	0x20000438

0801a9f0 <_findenv_r>:
 801a9f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a9f4:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 801aa64 <_findenv_r+0x74>
 801a9f8:	4606      	mov	r6, r0
 801a9fa:	4689      	mov	r9, r1
 801a9fc:	4617      	mov	r7, r2
 801a9fe:	f000 fda3 	bl	801b548 <__env_lock>
 801aa02:	f8da 4000 	ldr.w	r4, [sl]
 801aa06:	b134      	cbz	r4, 801aa16 <_findenv_r+0x26>
 801aa08:	464b      	mov	r3, r9
 801aa0a:	4698      	mov	r8, r3
 801aa0c:	f813 2b01 	ldrb.w	r2, [r3], #1
 801aa10:	b13a      	cbz	r2, 801aa22 <_findenv_r+0x32>
 801aa12:	2a3d      	cmp	r2, #61	@ 0x3d
 801aa14:	d1f9      	bne.n	801aa0a <_findenv_r+0x1a>
 801aa16:	4630      	mov	r0, r6
 801aa18:	f000 fd9c 	bl	801b554 <__env_unlock>
 801aa1c:	2000      	movs	r0, #0
 801aa1e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aa22:	eba8 0809 	sub.w	r8, r8, r9
 801aa26:	46a3      	mov	fp, r4
 801aa28:	f854 0b04 	ldr.w	r0, [r4], #4
 801aa2c:	2800      	cmp	r0, #0
 801aa2e:	d0f2      	beq.n	801aa16 <_findenv_r+0x26>
 801aa30:	4642      	mov	r2, r8
 801aa32:	4649      	mov	r1, r9
 801aa34:	f000 fca7 	bl	801b386 <strncmp>
 801aa38:	2800      	cmp	r0, #0
 801aa3a:	d1f4      	bne.n	801aa26 <_findenv_r+0x36>
 801aa3c:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801aa40:	eb03 0508 	add.w	r5, r3, r8
 801aa44:	f813 3008 	ldrb.w	r3, [r3, r8]
 801aa48:	2b3d      	cmp	r3, #61	@ 0x3d
 801aa4a:	d1ec      	bne.n	801aa26 <_findenv_r+0x36>
 801aa4c:	f8da 3000 	ldr.w	r3, [sl]
 801aa50:	ebab 0303 	sub.w	r3, fp, r3
 801aa54:	109b      	asrs	r3, r3, #2
 801aa56:	4630      	mov	r0, r6
 801aa58:	603b      	str	r3, [r7, #0]
 801aa5a:	f000 fd7b 	bl	801b554 <__env_unlock>
 801aa5e:	1c68      	adds	r0, r5, #1
 801aa60:	e7dd      	b.n	801aa1e <_findenv_r+0x2e>
 801aa62:	bf00      	nop
 801aa64:	20000000 	.word	0x20000000

0801aa68 <malloc>:
 801aa68:	4b02      	ldr	r3, [pc, #8]	@ (801aa74 <malloc+0xc>)
 801aa6a:	4601      	mov	r1, r0
 801aa6c:	6818      	ldr	r0, [r3, #0]
 801aa6e:	f000 b82d 	b.w	801aacc <_malloc_r>
 801aa72:	bf00      	nop
 801aa74:	20000438 	.word	0x20000438

0801aa78 <free>:
 801aa78:	4b02      	ldr	r3, [pc, #8]	@ (801aa84 <free+0xc>)
 801aa7a:	4601      	mov	r1, r0
 801aa7c:	6818      	ldr	r0, [r3, #0]
 801aa7e:	f000 bd6f 	b.w	801b560 <_free_r>
 801aa82:	bf00      	nop
 801aa84:	20000438 	.word	0x20000438

0801aa88 <sbrk_aligned>:
 801aa88:	b570      	push	{r4, r5, r6, lr}
 801aa8a:	4e0f      	ldr	r6, [pc, #60]	@ (801aac8 <sbrk_aligned+0x40>)
 801aa8c:	460c      	mov	r4, r1
 801aa8e:	6831      	ldr	r1, [r6, #0]
 801aa90:	4605      	mov	r5, r0
 801aa92:	b911      	cbnz	r1, 801aa9a <sbrk_aligned+0x12>
 801aa94:	f000 fcd4 	bl	801b440 <_sbrk_r>
 801aa98:	6030      	str	r0, [r6, #0]
 801aa9a:	4621      	mov	r1, r4
 801aa9c:	4628      	mov	r0, r5
 801aa9e:	f000 fccf 	bl	801b440 <_sbrk_r>
 801aaa2:	1c43      	adds	r3, r0, #1
 801aaa4:	d103      	bne.n	801aaae <sbrk_aligned+0x26>
 801aaa6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 801aaaa:	4620      	mov	r0, r4
 801aaac:	bd70      	pop	{r4, r5, r6, pc}
 801aaae:	1cc4      	adds	r4, r0, #3
 801aab0:	f024 0403 	bic.w	r4, r4, #3
 801aab4:	42a0      	cmp	r0, r4
 801aab6:	d0f8      	beq.n	801aaaa <sbrk_aligned+0x22>
 801aab8:	1a21      	subs	r1, r4, r0
 801aaba:	4628      	mov	r0, r5
 801aabc:	f000 fcc0 	bl	801b440 <_sbrk_r>
 801aac0:	3001      	adds	r0, #1
 801aac2:	d1f2      	bne.n	801aaaa <sbrk_aligned+0x22>
 801aac4:	e7ef      	b.n	801aaa6 <sbrk_aligned+0x1e>
 801aac6:	bf00      	nop
 801aac8:	2000b6b0 	.word	0x2000b6b0

0801aacc <_malloc_r>:
 801aacc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801aad0:	1ccd      	adds	r5, r1, #3
 801aad2:	f025 0503 	bic.w	r5, r5, #3
 801aad6:	3508      	adds	r5, #8
 801aad8:	2d0c      	cmp	r5, #12
 801aada:	bf38      	it	cc
 801aadc:	250c      	movcc	r5, #12
 801aade:	2d00      	cmp	r5, #0
 801aae0:	4606      	mov	r6, r0
 801aae2:	db01      	blt.n	801aae8 <_malloc_r+0x1c>
 801aae4:	42a9      	cmp	r1, r5
 801aae6:	d904      	bls.n	801aaf2 <_malloc_r+0x26>
 801aae8:	230c      	movs	r3, #12
 801aaea:	6033      	str	r3, [r6, #0]
 801aaec:	2000      	movs	r0, #0
 801aaee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801aaf2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801abc8 <_malloc_r+0xfc>
 801aaf6:	f000 f869 	bl	801abcc <__malloc_lock>
 801aafa:	f8d8 3000 	ldr.w	r3, [r8]
 801aafe:	461c      	mov	r4, r3
 801ab00:	bb44      	cbnz	r4, 801ab54 <_malloc_r+0x88>
 801ab02:	4629      	mov	r1, r5
 801ab04:	4630      	mov	r0, r6
 801ab06:	f7ff ffbf 	bl	801aa88 <sbrk_aligned>
 801ab0a:	1c43      	adds	r3, r0, #1
 801ab0c:	4604      	mov	r4, r0
 801ab0e:	d158      	bne.n	801abc2 <_malloc_r+0xf6>
 801ab10:	f8d8 4000 	ldr.w	r4, [r8]
 801ab14:	4627      	mov	r7, r4
 801ab16:	2f00      	cmp	r7, #0
 801ab18:	d143      	bne.n	801aba2 <_malloc_r+0xd6>
 801ab1a:	2c00      	cmp	r4, #0
 801ab1c:	d04b      	beq.n	801abb6 <_malloc_r+0xea>
 801ab1e:	6823      	ldr	r3, [r4, #0]
 801ab20:	4639      	mov	r1, r7
 801ab22:	4630      	mov	r0, r6
 801ab24:	eb04 0903 	add.w	r9, r4, r3
 801ab28:	f000 fc8a 	bl	801b440 <_sbrk_r>
 801ab2c:	4581      	cmp	r9, r0
 801ab2e:	d142      	bne.n	801abb6 <_malloc_r+0xea>
 801ab30:	6821      	ldr	r1, [r4, #0]
 801ab32:	1a6d      	subs	r5, r5, r1
 801ab34:	4629      	mov	r1, r5
 801ab36:	4630      	mov	r0, r6
 801ab38:	f7ff ffa6 	bl	801aa88 <sbrk_aligned>
 801ab3c:	3001      	adds	r0, #1
 801ab3e:	d03a      	beq.n	801abb6 <_malloc_r+0xea>
 801ab40:	6823      	ldr	r3, [r4, #0]
 801ab42:	442b      	add	r3, r5
 801ab44:	6023      	str	r3, [r4, #0]
 801ab46:	f8d8 3000 	ldr.w	r3, [r8]
 801ab4a:	685a      	ldr	r2, [r3, #4]
 801ab4c:	bb62      	cbnz	r2, 801aba8 <_malloc_r+0xdc>
 801ab4e:	f8c8 7000 	str.w	r7, [r8]
 801ab52:	e00f      	b.n	801ab74 <_malloc_r+0xa8>
 801ab54:	6822      	ldr	r2, [r4, #0]
 801ab56:	1b52      	subs	r2, r2, r5
 801ab58:	d420      	bmi.n	801ab9c <_malloc_r+0xd0>
 801ab5a:	2a0b      	cmp	r2, #11
 801ab5c:	d917      	bls.n	801ab8e <_malloc_r+0xc2>
 801ab5e:	1961      	adds	r1, r4, r5
 801ab60:	42a3      	cmp	r3, r4
 801ab62:	6025      	str	r5, [r4, #0]
 801ab64:	bf18      	it	ne
 801ab66:	6059      	strne	r1, [r3, #4]
 801ab68:	6863      	ldr	r3, [r4, #4]
 801ab6a:	bf08      	it	eq
 801ab6c:	f8c8 1000 	streq.w	r1, [r8]
 801ab70:	5162      	str	r2, [r4, r5]
 801ab72:	604b      	str	r3, [r1, #4]
 801ab74:	4630      	mov	r0, r6
 801ab76:	f000 f82f 	bl	801abd8 <__malloc_unlock>
 801ab7a:	f104 000b 	add.w	r0, r4, #11
 801ab7e:	1d23      	adds	r3, r4, #4
 801ab80:	f020 0007 	bic.w	r0, r0, #7
 801ab84:	1ac2      	subs	r2, r0, r3
 801ab86:	bf1c      	itt	ne
 801ab88:	1a1b      	subne	r3, r3, r0
 801ab8a:	50a3      	strne	r3, [r4, r2]
 801ab8c:	e7af      	b.n	801aaee <_malloc_r+0x22>
 801ab8e:	6862      	ldr	r2, [r4, #4]
 801ab90:	42a3      	cmp	r3, r4
 801ab92:	bf0c      	ite	eq
 801ab94:	f8c8 2000 	streq.w	r2, [r8]
 801ab98:	605a      	strne	r2, [r3, #4]
 801ab9a:	e7eb      	b.n	801ab74 <_malloc_r+0xa8>
 801ab9c:	4623      	mov	r3, r4
 801ab9e:	6864      	ldr	r4, [r4, #4]
 801aba0:	e7ae      	b.n	801ab00 <_malloc_r+0x34>
 801aba2:	463c      	mov	r4, r7
 801aba4:	687f      	ldr	r7, [r7, #4]
 801aba6:	e7b6      	b.n	801ab16 <_malloc_r+0x4a>
 801aba8:	461a      	mov	r2, r3
 801abaa:	685b      	ldr	r3, [r3, #4]
 801abac:	42a3      	cmp	r3, r4
 801abae:	d1fb      	bne.n	801aba8 <_malloc_r+0xdc>
 801abb0:	2300      	movs	r3, #0
 801abb2:	6053      	str	r3, [r2, #4]
 801abb4:	e7de      	b.n	801ab74 <_malloc_r+0xa8>
 801abb6:	230c      	movs	r3, #12
 801abb8:	6033      	str	r3, [r6, #0]
 801abba:	4630      	mov	r0, r6
 801abbc:	f000 f80c 	bl	801abd8 <__malloc_unlock>
 801abc0:	e794      	b.n	801aaec <_malloc_r+0x20>
 801abc2:	6005      	str	r5, [r0, #0]
 801abc4:	e7d6      	b.n	801ab74 <_malloc_r+0xa8>
 801abc6:	bf00      	nop
 801abc8:	2000b6b4 	.word	0x2000b6b4

0801abcc <__malloc_lock>:
 801abcc:	4801      	ldr	r0, [pc, #4]	@ (801abd4 <__malloc_lock+0x8>)
 801abce:	f000 bc84 	b.w	801b4da <__retarget_lock_acquire_recursive>
 801abd2:	bf00      	nop
 801abd4:	2000b7f9 	.word	0x2000b7f9

0801abd8 <__malloc_unlock>:
 801abd8:	4801      	ldr	r0, [pc, #4]	@ (801abe0 <__malloc_unlock+0x8>)
 801abda:	f000 bc7f 	b.w	801b4dc <__retarget_lock_release_recursive>
 801abde:	bf00      	nop
 801abe0:	2000b7f9 	.word	0x2000b7f9

0801abe4 <srand>:
 801abe4:	b538      	push	{r3, r4, r5, lr}
 801abe6:	4b10      	ldr	r3, [pc, #64]	@ (801ac28 <srand+0x44>)
 801abe8:	681d      	ldr	r5, [r3, #0]
 801abea:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801abec:	4604      	mov	r4, r0
 801abee:	b9b3      	cbnz	r3, 801ac1e <srand+0x3a>
 801abf0:	2018      	movs	r0, #24
 801abf2:	f7ff ff39 	bl	801aa68 <malloc>
 801abf6:	4602      	mov	r2, r0
 801abf8:	6328      	str	r0, [r5, #48]	@ 0x30
 801abfa:	b920      	cbnz	r0, 801ac06 <srand+0x22>
 801abfc:	4b0b      	ldr	r3, [pc, #44]	@ (801ac2c <srand+0x48>)
 801abfe:	480c      	ldr	r0, [pc, #48]	@ (801ac30 <srand+0x4c>)
 801ac00:	2146      	movs	r1, #70	@ 0x46
 801ac02:	f000 fc83 	bl	801b50c <__assert_func>
 801ac06:	490b      	ldr	r1, [pc, #44]	@ (801ac34 <srand+0x50>)
 801ac08:	4b0b      	ldr	r3, [pc, #44]	@ (801ac38 <srand+0x54>)
 801ac0a:	e9c0 1300 	strd	r1, r3, [r0]
 801ac0e:	4b0b      	ldr	r3, [pc, #44]	@ (801ac3c <srand+0x58>)
 801ac10:	6083      	str	r3, [r0, #8]
 801ac12:	230b      	movs	r3, #11
 801ac14:	8183      	strh	r3, [r0, #12]
 801ac16:	2100      	movs	r1, #0
 801ac18:	2001      	movs	r0, #1
 801ac1a:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801ac1e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801ac20:	2200      	movs	r2, #0
 801ac22:	611c      	str	r4, [r3, #16]
 801ac24:	615a      	str	r2, [r3, #20]
 801ac26:	bd38      	pop	{r3, r4, r5, pc}
 801ac28:	20000438 	.word	0x20000438
 801ac2c:	0801eae4 	.word	0x0801eae4
 801ac30:	0801eafb 	.word	0x0801eafb
 801ac34:	abcd330e 	.word	0xabcd330e
 801ac38:	e66d1234 	.word	0xe66d1234
 801ac3c:	0005deec 	.word	0x0005deec

0801ac40 <rand>:
 801ac40:	4b16      	ldr	r3, [pc, #88]	@ (801ac9c <rand+0x5c>)
 801ac42:	b510      	push	{r4, lr}
 801ac44:	681c      	ldr	r4, [r3, #0]
 801ac46:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801ac48:	b9b3      	cbnz	r3, 801ac78 <rand+0x38>
 801ac4a:	2018      	movs	r0, #24
 801ac4c:	f7ff ff0c 	bl	801aa68 <malloc>
 801ac50:	4602      	mov	r2, r0
 801ac52:	6320      	str	r0, [r4, #48]	@ 0x30
 801ac54:	b920      	cbnz	r0, 801ac60 <rand+0x20>
 801ac56:	4b12      	ldr	r3, [pc, #72]	@ (801aca0 <rand+0x60>)
 801ac58:	4812      	ldr	r0, [pc, #72]	@ (801aca4 <rand+0x64>)
 801ac5a:	2152      	movs	r1, #82	@ 0x52
 801ac5c:	f000 fc56 	bl	801b50c <__assert_func>
 801ac60:	4911      	ldr	r1, [pc, #68]	@ (801aca8 <rand+0x68>)
 801ac62:	4b12      	ldr	r3, [pc, #72]	@ (801acac <rand+0x6c>)
 801ac64:	e9c0 1300 	strd	r1, r3, [r0]
 801ac68:	4b11      	ldr	r3, [pc, #68]	@ (801acb0 <rand+0x70>)
 801ac6a:	6083      	str	r3, [r0, #8]
 801ac6c:	230b      	movs	r3, #11
 801ac6e:	8183      	strh	r3, [r0, #12]
 801ac70:	2100      	movs	r1, #0
 801ac72:	2001      	movs	r0, #1
 801ac74:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801ac78:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801ac7a:	480e      	ldr	r0, [pc, #56]	@ (801acb4 <rand+0x74>)
 801ac7c:	690b      	ldr	r3, [r1, #16]
 801ac7e:	694c      	ldr	r4, [r1, #20]
 801ac80:	4a0d      	ldr	r2, [pc, #52]	@ (801acb8 <rand+0x78>)
 801ac82:	4358      	muls	r0, r3
 801ac84:	fb02 0004 	mla	r0, r2, r4, r0
 801ac88:	fba3 3202 	umull	r3, r2, r3, r2
 801ac8c:	3301      	adds	r3, #1
 801ac8e:	eb40 0002 	adc.w	r0, r0, r2
 801ac92:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801ac96:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 801ac9a:	bd10      	pop	{r4, pc}
 801ac9c:	20000438 	.word	0x20000438
 801aca0:	0801eae4 	.word	0x0801eae4
 801aca4:	0801eafb 	.word	0x0801eafb
 801aca8:	abcd330e 	.word	0xabcd330e
 801acac:	e66d1234 	.word	0xe66d1234
 801acb0:	0005deec 	.word	0x0005deec
 801acb4:	5851f42d 	.word	0x5851f42d
 801acb8:	4c957f2d 	.word	0x4c957f2d

0801acbc <realloc>:
 801acbc:	4b02      	ldr	r3, [pc, #8]	@ (801acc8 <realloc+0xc>)
 801acbe:	460a      	mov	r2, r1
 801acc0:	4601      	mov	r1, r0
 801acc2:	6818      	ldr	r0, [r3, #0]
 801acc4:	f000 b802 	b.w	801accc <_realloc_r>
 801acc8:	20000438 	.word	0x20000438

0801accc <_realloc_r>:
 801accc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801acd0:	4607      	mov	r7, r0
 801acd2:	4614      	mov	r4, r2
 801acd4:	460d      	mov	r5, r1
 801acd6:	b921      	cbnz	r1, 801ace2 <_realloc_r+0x16>
 801acd8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801acdc:	4611      	mov	r1, r2
 801acde:	f7ff bef5 	b.w	801aacc <_malloc_r>
 801ace2:	b92a      	cbnz	r2, 801acf0 <_realloc_r+0x24>
 801ace4:	f000 fc3c 	bl	801b560 <_free_r>
 801ace8:	4625      	mov	r5, r4
 801acea:	4628      	mov	r0, r5
 801acec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801acf0:	f000 fc80 	bl	801b5f4 <_malloc_usable_size_r>
 801acf4:	4284      	cmp	r4, r0
 801acf6:	4606      	mov	r6, r0
 801acf8:	d802      	bhi.n	801ad00 <_realloc_r+0x34>
 801acfa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801acfe:	d8f4      	bhi.n	801acea <_realloc_r+0x1e>
 801ad00:	4621      	mov	r1, r4
 801ad02:	4638      	mov	r0, r7
 801ad04:	f7ff fee2 	bl	801aacc <_malloc_r>
 801ad08:	4680      	mov	r8, r0
 801ad0a:	b908      	cbnz	r0, 801ad10 <_realloc_r+0x44>
 801ad0c:	4645      	mov	r5, r8
 801ad0e:	e7ec      	b.n	801acea <_realloc_r+0x1e>
 801ad10:	42b4      	cmp	r4, r6
 801ad12:	4622      	mov	r2, r4
 801ad14:	4629      	mov	r1, r5
 801ad16:	bf28      	it	cs
 801ad18:	4632      	movcs	r2, r6
 801ad1a:	f000 fbe8 	bl	801b4ee <memcpy>
 801ad1e:	4629      	mov	r1, r5
 801ad20:	4638      	mov	r0, r7
 801ad22:	f000 fc1d 	bl	801b560 <_free_r>
 801ad26:	e7f1      	b.n	801ad0c <_realloc_r+0x40>

0801ad28 <_strtoul_l.isra.0>:
 801ad28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801ad2c:	4e34      	ldr	r6, [pc, #208]	@ (801ae00 <_strtoul_l.isra.0+0xd8>)
 801ad2e:	4686      	mov	lr, r0
 801ad30:	460d      	mov	r5, r1
 801ad32:	4628      	mov	r0, r5
 801ad34:	f815 4b01 	ldrb.w	r4, [r5], #1
 801ad38:	5d37      	ldrb	r7, [r6, r4]
 801ad3a:	f017 0708 	ands.w	r7, r7, #8
 801ad3e:	d1f8      	bne.n	801ad32 <_strtoul_l.isra.0+0xa>
 801ad40:	2c2d      	cmp	r4, #45	@ 0x2d
 801ad42:	d110      	bne.n	801ad66 <_strtoul_l.isra.0+0x3e>
 801ad44:	782c      	ldrb	r4, [r5, #0]
 801ad46:	2701      	movs	r7, #1
 801ad48:	1c85      	adds	r5, r0, #2
 801ad4a:	f033 0010 	bics.w	r0, r3, #16
 801ad4e:	d115      	bne.n	801ad7c <_strtoul_l.isra.0+0x54>
 801ad50:	2c30      	cmp	r4, #48	@ 0x30
 801ad52:	d10d      	bne.n	801ad70 <_strtoul_l.isra.0+0x48>
 801ad54:	7828      	ldrb	r0, [r5, #0]
 801ad56:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 801ad5a:	2858      	cmp	r0, #88	@ 0x58
 801ad5c:	d108      	bne.n	801ad70 <_strtoul_l.isra.0+0x48>
 801ad5e:	786c      	ldrb	r4, [r5, #1]
 801ad60:	3502      	adds	r5, #2
 801ad62:	2310      	movs	r3, #16
 801ad64:	e00a      	b.n	801ad7c <_strtoul_l.isra.0+0x54>
 801ad66:	2c2b      	cmp	r4, #43	@ 0x2b
 801ad68:	bf04      	itt	eq
 801ad6a:	782c      	ldrbeq	r4, [r5, #0]
 801ad6c:	1c85      	addeq	r5, r0, #2
 801ad6e:	e7ec      	b.n	801ad4a <_strtoul_l.isra.0+0x22>
 801ad70:	2b00      	cmp	r3, #0
 801ad72:	d1f6      	bne.n	801ad62 <_strtoul_l.isra.0+0x3a>
 801ad74:	2c30      	cmp	r4, #48	@ 0x30
 801ad76:	bf14      	ite	ne
 801ad78:	230a      	movne	r3, #10
 801ad7a:	2308      	moveq	r3, #8
 801ad7c:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 801ad80:	2600      	movs	r6, #0
 801ad82:	fbb8 f8f3 	udiv	r8, r8, r3
 801ad86:	fb03 f908 	mul.w	r9, r3, r8
 801ad8a:	ea6f 0909 	mvn.w	r9, r9
 801ad8e:	4630      	mov	r0, r6
 801ad90:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 801ad94:	f1bc 0f09 	cmp.w	ip, #9
 801ad98:	d810      	bhi.n	801adbc <_strtoul_l.isra.0+0x94>
 801ad9a:	4664      	mov	r4, ip
 801ad9c:	42a3      	cmp	r3, r4
 801ad9e:	dd1e      	ble.n	801adde <_strtoul_l.isra.0+0xb6>
 801ada0:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 801ada4:	d007      	beq.n	801adb6 <_strtoul_l.isra.0+0x8e>
 801ada6:	4580      	cmp	r8, r0
 801ada8:	d316      	bcc.n	801add8 <_strtoul_l.isra.0+0xb0>
 801adaa:	d101      	bne.n	801adb0 <_strtoul_l.isra.0+0x88>
 801adac:	45a1      	cmp	r9, r4
 801adae:	db13      	blt.n	801add8 <_strtoul_l.isra.0+0xb0>
 801adb0:	fb00 4003 	mla	r0, r0, r3, r4
 801adb4:	2601      	movs	r6, #1
 801adb6:	f815 4b01 	ldrb.w	r4, [r5], #1
 801adba:	e7e9      	b.n	801ad90 <_strtoul_l.isra.0+0x68>
 801adbc:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 801adc0:	f1bc 0f19 	cmp.w	ip, #25
 801adc4:	d801      	bhi.n	801adca <_strtoul_l.isra.0+0xa2>
 801adc6:	3c37      	subs	r4, #55	@ 0x37
 801adc8:	e7e8      	b.n	801ad9c <_strtoul_l.isra.0+0x74>
 801adca:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 801adce:	f1bc 0f19 	cmp.w	ip, #25
 801add2:	d804      	bhi.n	801adde <_strtoul_l.isra.0+0xb6>
 801add4:	3c57      	subs	r4, #87	@ 0x57
 801add6:	e7e1      	b.n	801ad9c <_strtoul_l.isra.0+0x74>
 801add8:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 801addc:	e7eb      	b.n	801adb6 <_strtoul_l.isra.0+0x8e>
 801adde:	1c73      	adds	r3, r6, #1
 801ade0:	d106      	bne.n	801adf0 <_strtoul_l.isra.0+0xc8>
 801ade2:	2322      	movs	r3, #34	@ 0x22
 801ade4:	f8ce 3000 	str.w	r3, [lr]
 801ade8:	4630      	mov	r0, r6
 801adea:	b932      	cbnz	r2, 801adfa <_strtoul_l.isra.0+0xd2>
 801adec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801adf0:	b107      	cbz	r7, 801adf4 <_strtoul_l.isra.0+0xcc>
 801adf2:	4240      	negs	r0, r0
 801adf4:	2a00      	cmp	r2, #0
 801adf6:	d0f9      	beq.n	801adec <_strtoul_l.isra.0+0xc4>
 801adf8:	b106      	cbz	r6, 801adfc <_strtoul_l.isra.0+0xd4>
 801adfa:	1e69      	subs	r1, r5, #1
 801adfc:	6011      	str	r1, [r2, #0]
 801adfe:	e7f5      	b.n	801adec <_strtoul_l.isra.0+0xc4>
 801ae00:	0801ebc3 	.word	0x0801ebc3

0801ae04 <strtoul>:
 801ae04:	4613      	mov	r3, r2
 801ae06:	460a      	mov	r2, r1
 801ae08:	4601      	mov	r1, r0
 801ae0a:	4802      	ldr	r0, [pc, #8]	@ (801ae14 <strtoul+0x10>)
 801ae0c:	6800      	ldr	r0, [r0, #0]
 801ae0e:	f7ff bf8b 	b.w	801ad28 <_strtoul_l.isra.0>
 801ae12:	bf00      	nop
 801ae14:	20000438 	.word	0x20000438

0801ae18 <std>:
 801ae18:	2300      	movs	r3, #0
 801ae1a:	b510      	push	{r4, lr}
 801ae1c:	4604      	mov	r4, r0
 801ae1e:	e9c0 3300 	strd	r3, r3, [r0]
 801ae22:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801ae26:	6083      	str	r3, [r0, #8]
 801ae28:	8181      	strh	r1, [r0, #12]
 801ae2a:	6643      	str	r3, [r0, #100]	@ 0x64
 801ae2c:	81c2      	strh	r2, [r0, #14]
 801ae2e:	6183      	str	r3, [r0, #24]
 801ae30:	4619      	mov	r1, r3
 801ae32:	2208      	movs	r2, #8
 801ae34:	305c      	adds	r0, #92	@ 0x5c
 801ae36:	f000 fa91 	bl	801b35c <memset>
 801ae3a:	4b0d      	ldr	r3, [pc, #52]	@ (801ae70 <std+0x58>)
 801ae3c:	6263      	str	r3, [r4, #36]	@ 0x24
 801ae3e:	4b0d      	ldr	r3, [pc, #52]	@ (801ae74 <std+0x5c>)
 801ae40:	62a3      	str	r3, [r4, #40]	@ 0x28
 801ae42:	4b0d      	ldr	r3, [pc, #52]	@ (801ae78 <std+0x60>)
 801ae44:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801ae46:	4b0d      	ldr	r3, [pc, #52]	@ (801ae7c <std+0x64>)
 801ae48:	6323      	str	r3, [r4, #48]	@ 0x30
 801ae4a:	4b0d      	ldr	r3, [pc, #52]	@ (801ae80 <std+0x68>)
 801ae4c:	6224      	str	r4, [r4, #32]
 801ae4e:	429c      	cmp	r4, r3
 801ae50:	d006      	beq.n	801ae60 <std+0x48>
 801ae52:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801ae56:	4294      	cmp	r4, r2
 801ae58:	d002      	beq.n	801ae60 <std+0x48>
 801ae5a:	33d0      	adds	r3, #208	@ 0xd0
 801ae5c:	429c      	cmp	r4, r3
 801ae5e:	d105      	bne.n	801ae6c <std+0x54>
 801ae60:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801ae64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ae68:	f000 bb36 	b.w	801b4d8 <__retarget_lock_init_recursive>
 801ae6c:	bd10      	pop	{r4, pc}
 801ae6e:	bf00      	nop
 801ae70:	0801b0e1 	.word	0x0801b0e1
 801ae74:	0801b103 	.word	0x0801b103
 801ae78:	0801b13b 	.word	0x0801b13b
 801ae7c:	0801b15f 	.word	0x0801b15f
 801ae80:	2000b6b8 	.word	0x2000b6b8

0801ae84 <stdio_exit_handler>:
 801ae84:	4a02      	ldr	r2, [pc, #8]	@ (801ae90 <stdio_exit_handler+0xc>)
 801ae86:	4903      	ldr	r1, [pc, #12]	@ (801ae94 <stdio_exit_handler+0x10>)
 801ae88:	4803      	ldr	r0, [pc, #12]	@ (801ae98 <stdio_exit_handler+0x14>)
 801ae8a:	f000 b869 	b.w	801af60 <_fwalk_sglue>
 801ae8e:	bf00      	nop
 801ae90:	2000042c 	.word	0x2000042c
 801ae94:	0801bf59 	.word	0x0801bf59
 801ae98:	2000043c 	.word	0x2000043c

0801ae9c <cleanup_stdio>:
 801ae9c:	6841      	ldr	r1, [r0, #4]
 801ae9e:	4b0c      	ldr	r3, [pc, #48]	@ (801aed0 <cleanup_stdio+0x34>)
 801aea0:	4299      	cmp	r1, r3
 801aea2:	b510      	push	{r4, lr}
 801aea4:	4604      	mov	r4, r0
 801aea6:	d001      	beq.n	801aeac <cleanup_stdio+0x10>
 801aea8:	f001 f856 	bl	801bf58 <_fflush_r>
 801aeac:	68a1      	ldr	r1, [r4, #8]
 801aeae:	4b09      	ldr	r3, [pc, #36]	@ (801aed4 <cleanup_stdio+0x38>)
 801aeb0:	4299      	cmp	r1, r3
 801aeb2:	d002      	beq.n	801aeba <cleanup_stdio+0x1e>
 801aeb4:	4620      	mov	r0, r4
 801aeb6:	f001 f84f 	bl	801bf58 <_fflush_r>
 801aeba:	68e1      	ldr	r1, [r4, #12]
 801aebc:	4b06      	ldr	r3, [pc, #24]	@ (801aed8 <cleanup_stdio+0x3c>)
 801aebe:	4299      	cmp	r1, r3
 801aec0:	d004      	beq.n	801aecc <cleanup_stdio+0x30>
 801aec2:	4620      	mov	r0, r4
 801aec4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801aec8:	f001 b846 	b.w	801bf58 <_fflush_r>
 801aecc:	bd10      	pop	{r4, pc}
 801aece:	bf00      	nop
 801aed0:	2000b6b8 	.word	0x2000b6b8
 801aed4:	2000b720 	.word	0x2000b720
 801aed8:	2000b788 	.word	0x2000b788

0801aedc <global_stdio_init.part.0>:
 801aedc:	b510      	push	{r4, lr}
 801aede:	4b0b      	ldr	r3, [pc, #44]	@ (801af0c <global_stdio_init.part.0+0x30>)
 801aee0:	4c0b      	ldr	r4, [pc, #44]	@ (801af10 <global_stdio_init.part.0+0x34>)
 801aee2:	4a0c      	ldr	r2, [pc, #48]	@ (801af14 <global_stdio_init.part.0+0x38>)
 801aee4:	601a      	str	r2, [r3, #0]
 801aee6:	4620      	mov	r0, r4
 801aee8:	2200      	movs	r2, #0
 801aeea:	2104      	movs	r1, #4
 801aeec:	f7ff ff94 	bl	801ae18 <std>
 801aef0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801aef4:	2201      	movs	r2, #1
 801aef6:	2109      	movs	r1, #9
 801aef8:	f7ff ff8e 	bl	801ae18 <std>
 801aefc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801af00:	2202      	movs	r2, #2
 801af02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801af06:	2112      	movs	r1, #18
 801af08:	f7ff bf86 	b.w	801ae18 <std>
 801af0c:	2000b7f0 	.word	0x2000b7f0
 801af10:	2000b6b8 	.word	0x2000b6b8
 801af14:	0801ae85 	.word	0x0801ae85

0801af18 <__sfp_lock_acquire>:
 801af18:	4801      	ldr	r0, [pc, #4]	@ (801af20 <__sfp_lock_acquire+0x8>)
 801af1a:	f000 bade 	b.w	801b4da <__retarget_lock_acquire_recursive>
 801af1e:	bf00      	nop
 801af20:	2000b7fa 	.word	0x2000b7fa

0801af24 <__sfp_lock_release>:
 801af24:	4801      	ldr	r0, [pc, #4]	@ (801af2c <__sfp_lock_release+0x8>)
 801af26:	f000 bad9 	b.w	801b4dc <__retarget_lock_release_recursive>
 801af2a:	bf00      	nop
 801af2c:	2000b7fa 	.word	0x2000b7fa

0801af30 <__sinit>:
 801af30:	b510      	push	{r4, lr}
 801af32:	4604      	mov	r4, r0
 801af34:	f7ff fff0 	bl	801af18 <__sfp_lock_acquire>
 801af38:	6a23      	ldr	r3, [r4, #32]
 801af3a:	b11b      	cbz	r3, 801af44 <__sinit+0x14>
 801af3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801af40:	f7ff bff0 	b.w	801af24 <__sfp_lock_release>
 801af44:	4b04      	ldr	r3, [pc, #16]	@ (801af58 <__sinit+0x28>)
 801af46:	6223      	str	r3, [r4, #32]
 801af48:	4b04      	ldr	r3, [pc, #16]	@ (801af5c <__sinit+0x2c>)
 801af4a:	681b      	ldr	r3, [r3, #0]
 801af4c:	2b00      	cmp	r3, #0
 801af4e:	d1f5      	bne.n	801af3c <__sinit+0xc>
 801af50:	f7ff ffc4 	bl	801aedc <global_stdio_init.part.0>
 801af54:	e7f2      	b.n	801af3c <__sinit+0xc>
 801af56:	bf00      	nop
 801af58:	0801ae9d 	.word	0x0801ae9d
 801af5c:	2000b7f0 	.word	0x2000b7f0

0801af60 <_fwalk_sglue>:
 801af60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801af64:	4607      	mov	r7, r0
 801af66:	4688      	mov	r8, r1
 801af68:	4614      	mov	r4, r2
 801af6a:	2600      	movs	r6, #0
 801af6c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801af70:	f1b9 0901 	subs.w	r9, r9, #1
 801af74:	d505      	bpl.n	801af82 <_fwalk_sglue+0x22>
 801af76:	6824      	ldr	r4, [r4, #0]
 801af78:	2c00      	cmp	r4, #0
 801af7a:	d1f7      	bne.n	801af6c <_fwalk_sglue+0xc>
 801af7c:	4630      	mov	r0, r6
 801af7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801af82:	89ab      	ldrh	r3, [r5, #12]
 801af84:	2b01      	cmp	r3, #1
 801af86:	d907      	bls.n	801af98 <_fwalk_sglue+0x38>
 801af88:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801af8c:	3301      	adds	r3, #1
 801af8e:	d003      	beq.n	801af98 <_fwalk_sglue+0x38>
 801af90:	4629      	mov	r1, r5
 801af92:	4638      	mov	r0, r7
 801af94:	47c0      	blx	r8
 801af96:	4306      	orrs	r6, r0
 801af98:	3568      	adds	r5, #104	@ 0x68
 801af9a:	e7e9      	b.n	801af70 <_fwalk_sglue+0x10>

0801af9c <_fwrite_r>:
 801af9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801afa0:	9c08      	ldr	r4, [sp, #32]
 801afa2:	468a      	mov	sl, r1
 801afa4:	4690      	mov	r8, r2
 801afa6:	fb02 f903 	mul.w	r9, r2, r3
 801afaa:	4606      	mov	r6, r0
 801afac:	b118      	cbz	r0, 801afb6 <_fwrite_r+0x1a>
 801afae:	6a03      	ldr	r3, [r0, #32]
 801afb0:	b90b      	cbnz	r3, 801afb6 <_fwrite_r+0x1a>
 801afb2:	f7ff ffbd 	bl	801af30 <__sinit>
 801afb6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801afb8:	07dd      	lsls	r5, r3, #31
 801afba:	d405      	bmi.n	801afc8 <_fwrite_r+0x2c>
 801afbc:	89a3      	ldrh	r3, [r4, #12]
 801afbe:	0598      	lsls	r0, r3, #22
 801afc0:	d402      	bmi.n	801afc8 <_fwrite_r+0x2c>
 801afc2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801afc4:	f000 fa89 	bl	801b4da <__retarget_lock_acquire_recursive>
 801afc8:	89a3      	ldrh	r3, [r4, #12]
 801afca:	0719      	lsls	r1, r3, #28
 801afcc:	d516      	bpl.n	801affc <_fwrite_r+0x60>
 801afce:	6923      	ldr	r3, [r4, #16]
 801afd0:	b1a3      	cbz	r3, 801affc <_fwrite_r+0x60>
 801afd2:	2500      	movs	r5, #0
 801afd4:	454d      	cmp	r5, r9
 801afd6:	d01f      	beq.n	801b018 <_fwrite_r+0x7c>
 801afd8:	68a7      	ldr	r7, [r4, #8]
 801afda:	f81a 1005 	ldrb.w	r1, [sl, r5]
 801afde:	3f01      	subs	r7, #1
 801afe0:	2f00      	cmp	r7, #0
 801afe2:	60a7      	str	r7, [r4, #8]
 801afe4:	da04      	bge.n	801aff0 <_fwrite_r+0x54>
 801afe6:	69a3      	ldr	r3, [r4, #24]
 801afe8:	429f      	cmp	r7, r3
 801afea:	db0f      	blt.n	801b00c <_fwrite_r+0x70>
 801afec:	290a      	cmp	r1, #10
 801afee:	d00d      	beq.n	801b00c <_fwrite_r+0x70>
 801aff0:	6823      	ldr	r3, [r4, #0]
 801aff2:	1c5a      	adds	r2, r3, #1
 801aff4:	6022      	str	r2, [r4, #0]
 801aff6:	7019      	strb	r1, [r3, #0]
 801aff8:	3501      	adds	r5, #1
 801affa:	e7eb      	b.n	801afd4 <_fwrite_r+0x38>
 801affc:	4621      	mov	r1, r4
 801affe:	4630      	mov	r0, r6
 801b000:	f000 f92c 	bl	801b25c <__swsetup_r>
 801b004:	2800      	cmp	r0, #0
 801b006:	d0e4      	beq.n	801afd2 <_fwrite_r+0x36>
 801b008:	2500      	movs	r5, #0
 801b00a:	e005      	b.n	801b018 <_fwrite_r+0x7c>
 801b00c:	4622      	mov	r2, r4
 801b00e:	4630      	mov	r0, r6
 801b010:	f000 f8e6 	bl	801b1e0 <__swbuf_r>
 801b014:	3001      	adds	r0, #1
 801b016:	d1ef      	bne.n	801aff8 <_fwrite_r+0x5c>
 801b018:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801b01a:	07da      	lsls	r2, r3, #31
 801b01c:	d405      	bmi.n	801b02a <_fwrite_r+0x8e>
 801b01e:	89a3      	ldrh	r3, [r4, #12]
 801b020:	059b      	lsls	r3, r3, #22
 801b022:	d402      	bmi.n	801b02a <_fwrite_r+0x8e>
 801b024:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801b026:	f000 fa59 	bl	801b4dc <__retarget_lock_release_recursive>
 801b02a:	fbb5 f0f8 	udiv	r0, r5, r8
 801b02e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

0801b034 <fwrite>:
 801b034:	b507      	push	{r0, r1, r2, lr}
 801b036:	9300      	str	r3, [sp, #0]
 801b038:	4613      	mov	r3, r2
 801b03a:	460a      	mov	r2, r1
 801b03c:	4601      	mov	r1, r0
 801b03e:	4803      	ldr	r0, [pc, #12]	@ (801b04c <fwrite+0x18>)
 801b040:	6800      	ldr	r0, [r0, #0]
 801b042:	f7ff ffab 	bl	801af9c <_fwrite_r>
 801b046:	b003      	add	sp, #12
 801b048:	f85d fb04 	ldr.w	pc, [sp], #4
 801b04c:	20000438 	.word	0x20000438

0801b050 <iprintf>:
 801b050:	b40f      	push	{r0, r1, r2, r3}
 801b052:	b507      	push	{r0, r1, r2, lr}
 801b054:	4906      	ldr	r1, [pc, #24]	@ (801b070 <iprintf+0x20>)
 801b056:	ab04      	add	r3, sp, #16
 801b058:	6808      	ldr	r0, [r1, #0]
 801b05a:	f853 2b04 	ldr.w	r2, [r3], #4
 801b05e:	6881      	ldr	r1, [r0, #8]
 801b060:	9301      	str	r3, [sp, #4]
 801b062:	f000 fc51 	bl	801b908 <_vfiprintf_r>
 801b066:	b003      	add	sp, #12
 801b068:	f85d eb04 	ldr.w	lr, [sp], #4
 801b06c:	b004      	add	sp, #16
 801b06e:	4770      	bx	lr
 801b070:	20000438 	.word	0x20000438

0801b074 <sniprintf>:
 801b074:	b40c      	push	{r2, r3}
 801b076:	b530      	push	{r4, r5, lr}
 801b078:	4b18      	ldr	r3, [pc, #96]	@ (801b0dc <sniprintf+0x68>)
 801b07a:	1e0c      	subs	r4, r1, #0
 801b07c:	681d      	ldr	r5, [r3, #0]
 801b07e:	b09d      	sub	sp, #116	@ 0x74
 801b080:	da08      	bge.n	801b094 <sniprintf+0x20>
 801b082:	238b      	movs	r3, #139	@ 0x8b
 801b084:	602b      	str	r3, [r5, #0]
 801b086:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801b08a:	b01d      	add	sp, #116	@ 0x74
 801b08c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801b090:	b002      	add	sp, #8
 801b092:	4770      	bx	lr
 801b094:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801b098:	f8ad 3014 	strh.w	r3, [sp, #20]
 801b09c:	f04f 0300 	mov.w	r3, #0
 801b0a0:	931b      	str	r3, [sp, #108]	@ 0x6c
 801b0a2:	bf14      	ite	ne
 801b0a4:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 801b0a8:	4623      	moveq	r3, r4
 801b0aa:	9304      	str	r3, [sp, #16]
 801b0ac:	9307      	str	r3, [sp, #28]
 801b0ae:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801b0b2:	9002      	str	r0, [sp, #8]
 801b0b4:	9006      	str	r0, [sp, #24]
 801b0b6:	f8ad 3016 	strh.w	r3, [sp, #22]
 801b0ba:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801b0bc:	ab21      	add	r3, sp, #132	@ 0x84
 801b0be:	a902      	add	r1, sp, #8
 801b0c0:	4628      	mov	r0, r5
 801b0c2:	9301      	str	r3, [sp, #4]
 801b0c4:	f000 fafa 	bl	801b6bc <_svfiprintf_r>
 801b0c8:	1c43      	adds	r3, r0, #1
 801b0ca:	bfbc      	itt	lt
 801b0cc:	238b      	movlt	r3, #139	@ 0x8b
 801b0ce:	602b      	strlt	r3, [r5, #0]
 801b0d0:	2c00      	cmp	r4, #0
 801b0d2:	d0da      	beq.n	801b08a <sniprintf+0x16>
 801b0d4:	9b02      	ldr	r3, [sp, #8]
 801b0d6:	2200      	movs	r2, #0
 801b0d8:	701a      	strb	r2, [r3, #0]
 801b0da:	e7d6      	b.n	801b08a <sniprintf+0x16>
 801b0dc:	20000438 	.word	0x20000438

0801b0e0 <__sread>:
 801b0e0:	b510      	push	{r4, lr}
 801b0e2:	460c      	mov	r4, r1
 801b0e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b0e8:	f000 f998 	bl	801b41c <_read_r>
 801b0ec:	2800      	cmp	r0, #0
 801b0ee:	bfab      	itete	ge
 801b0f0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801b0f2:	89a3      	ldrhlt	r3, [r4, #12]
 801b0f4:	181b      	addge	r3, r3, r0
 801b0f6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801b0fa:	bfac      	ite	ge
 801b0fc:	6563      	strge	r3, [r4, #84]	@ 0x54
 801b0fe:	81a3      	strhlt	r3, [r4, #12]
 801b100:	bd10      	pop	{r4, pc}

0801b102 <__swrite>:
 801b102:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b106:	461f      	mov	r7, r3
 801b108:	898b      	ldrh	r3, [r1, #12]
 801b10a:	05db      	lsls	r3, r3, #23
 801b10c:	4605      	mov	r5, r0
 801b10e:	460c      	mov	r4, r1
 801b110:	4616      	mov	r6, r2
 801b112:	d505      	bpl.n	801b120 <__swrite+0x1e>
 801b114:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b118:	2302      	movs	r3, #2
 801b11a:	2200      	movs	r2, #0
 801b11c:	f000 f96c 	bl	801b3f8 <_lseek_r>
 801b120:	89a3      	ldrh	r3, [r4, #12]
 801b122:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801b126:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801b12a:	81a3      	strh	r3, [r4, #12]
 801b12c:	4632      	mov	r2, r6
 801b12e:	463b      	mov	r3, r7
 801b130:	4628      	mov	r0, r5
 801b132:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b136:	f000 b993 	b.w	801b460 <_write_r>

0801b13a <__sseek>:
 801b13a:	b510      	push	{r4, lr}
 801b13c:	460c      	mov	r4, r1
 801b13e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b142:	f000 f959 	bl	801b3f8 <_lseek_r>
 801b146:	1c43      	adds	r3, r0, #1
 801b148:	89a3      	ldrh	r3, [r4, #12]
 801b14a:	bf15      	itete	ne
 801b14c:	6560      	strne	r0, [r4, #84]	@ 0x54
 801b14e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801b152:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801b156:	81a3      	strheq	r3, [r4, #12]
 801b158:	bf18      	it	ne
 801b15a:	81a3      	strhne	r3, [r4, #12]
 801b15c:	bd10      	pop	{r4, pc}

0801b15e <__sclose>:
 801b15e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b162:	f000 b939 	b.w	801b3d8 <_close_r>

0801b166 <_vsniprintf_r>:
 801b166:	b530      	push	{r4, r5, lr}
 801b168:	4614      	mov	r4, r2
 801b16a:	2c00      	cmp	r4, #0
 801b16c:	b09b      	sub	sp, #108	@ 0x6c
 801b16e:	4605      	mov	r5, r0
 801b170:	461a      	mov	r2, r3
 801b172:	da05      	bge.n	801b180 <_vsniprintf_r+0x1a>
 801b174:	238b      	movs	r3, #139	@ 0x8b
 801b176:	6003      	str	r3, [r0, #0]
 801b178:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801b17c:	b01b      	add	sp, #108	@ 0x6c
 801b17e:	bd30      	pop	{r4, r5, pc}
 801b180:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801b184:	f8ad 300c 	strh.w	r3, [sp, #12]
 801b188:	f04f 0300 	mov.w	r3, #0
 801b18c:	9319      	str	r3, [sp, #100]	@ 0x64
 801b18e:	bf14      	ite	ne
 801b190:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 801b194:	4623      	moveq	r3, r4
 801b196:	9302      	str	r3, [sp, #8]
 801b198:	9305      	str	r3, [sp, #20]
 801b19a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801b19e:	9100      	str	r1, [sp, #0]
 801b1a0:	9104      	str	r1, [sp, #16]
 801b1a2:	f8ad 300e 	strh.w	r3, [sp, #14]
 801b1a6:	4669      	mov	r1, sp
 801b1a8:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801b1aa:	f000 fa87 	bl	801b6bc <_svfiprintf_r>
 801b1ae:	1c43      	adds	r3, r0, #1
 801b1b0:	bfbc      	itt	lt
 801b1b2:	238b      	movlt	r3, #139	@ 0x8b
 801b1b4:	602b      	strlt	r3, [r5, #0]
 801b1b6:	2c00      	cmp	r4, #0
 801b1b8:	d0e0      	beq.n	801b17c <_vsniprintf_r+0x16>
 801b1ba:	9b00      	ldr	r3, [sp, #0]
 801b1bc:	2200      	movs	r2, #0
 801b1be:	701a      	strb	r2, [r3, #0]
 801b1c0:	e7dc      	b.n	801b17c <_vsniprintf_r+0x16>
	...

0801b1c4 <vsniprintf>:
 801b1c4:	b507      	push	{r0, r1, r2, lr}
 801b1c6:	9300      	str	r3, [sp, #0]
 801b1c8:	4613      	mov	r3, r2
 801b1ca:	460a      	mov	r2, r1
 801b1cc:	4601      	mov	r1, r0
 801b1ce:	4803      	ldr	r0, [pc, #12]	@ (801b1dc <vsniprintf+0x18>)
 801b1d0:	6800      	ldr	r0, [r0, #0]
 801b1d2:	f7ff ffc8 	bl	801b166 <_vsniprintf_r>
 801b1d6:	b003      	add	sp, #12
 801b1d8:	f85d fb04 	ldr.w	pc, [sp], #4
 801b1dc:	20000438 	.word	0x20000438

0801b1e0 <__swbuf_r>:
 801b1e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b1e2:	460e      	mov	r6, r1
 801b1e4:	4614      	mov	r4, r2
 801b1e6:	4605      	mov	r5, r0
 801b1e8:	b118      	cbz	r0, 801b1f2 <__swbuf_r+0x12>
 801b1ea:	6a03      	ldr	r3, [r0, #32]
 801b1ec:	b90b      	cbnz	r3, 801b1f2 <__swbuf_r+0x12>
 801b1ee:	f7ff fe9f 	bl	801af30 <__sinit>
 801b1f2:	69a3      	ldr	r3, [r4, #24]
 801b1f4:	60a3      	str	r3, [r4, #8]
 801b1f6:	89a3      	ldrh	r3, [r4, #12]
 801b1f8:	071a      	lsls	r2, r3, #28
 801b1fa:	d501      	bpl.n	801b200 <__swbuf_r+0x20>
 801b1fc:	6923      	ldr	r3, [r4, #16]
 801b1fe:	b943      	cbnz	r3, 801b212 <__swbuf_r+0x32>
 801b200:	4621      	mov	r1, r4
 801b202:	4628      	mov	r0, r5
 801b204:	f000 f82a 	bl	801b25c <__swsetup_r>
 801b208:	b118      	cbz	r0, 801b212 <__swbuf_r+0x32>
 801b20a:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 801b20e:	4638      	mov	r0, r7
 801b210:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b212:	6823      	ldr	r3, [r4, #0]
 801b214:	6922      	ldr	r2, [r4, #16]
 801b216:	1a98      	subs	r0, r3, r2
 801b218:	6963      	ldr	r3, [r4, #20]
 801b21a:	b2f6      	uxtb	r6, r6
 801b21c:	4283      	cmp	r3, r0
 801b21e:	4637      	mov	r7, r6
 801b220:	dc05      	bgt.n	801b22e <__swbuf_r+0x4e>
 801b222:	4621      	mov	r1, r4
 801b224:	4628      	mov	r0, r5
 801b226:	f000 fe97 	bl	801bf58 <_fflush_r>
 801b22a:	2800      	cmp	r0, #0
 801b22c:	d1ed      	bne.n	801b20a <__swbuf_r+0x2a>
 801b22e:	68a3      	ldr	r3, [r4, #8]
 801b230:	3b01      	subs	r3, #1
 801b232:	60a3      	str	r3, [r4, #8]
 801b234:	6823      	ldr	r3, [r4, #0]
 801b236:	1c5a      	adds	r2, r3, #1
 801b238:	6022      	str	r2, [r4, #0]
 801b23a:	701e      	strb	r6, [r3, #0]
 801b23c:	6962      	ldr	r2, [r4, #20]
 801b23e:	1c43      	adds	r3, r0, #1
 801b240:	429a      	cmp	r2, r3
 801b242:	d004      	beq.n	801b24e <__swbuf_r+0x6e>
 801b244:	89a3      	ldrh	r3, [r4, #12]
 801b246:	07db      	lsls	r3, r3, #31
 801b248:	d5e1      	bpl.n	801b20e <__swbuf_r+0x2e>
 801b24a:	2e0a      	cmp	r6, #10
 801b24c:	d1df      	bne.n	801b20e <__swbuf_r+0x2e>
 801b24e:	4621      	mov	r1, r4
 801b250:	4628      	mov	r0, r5
 801b252:	f000 fe81 	bl	801bf58 <_fflush_r>
 801b256:	2800      	cmp	r0, #0
 801b258:	d0d9      	beq.n	801b20e <__swbuf_r+0x2e>
 801b25a:	e7d6      	b.n	801b20a <__swbuf_r+0x2a>

0801b25c <__swsetup_r>:
 801b25c:	b538      	push	{r3, r4, r5, lr}
 801b25e:	4b29      	ldr	r3, [pc, #164]	@ (801b304 <__swsetup_r+0xa8>)
 801b260:	4605      	mov	r5, r0
 801b262:	6818      	ldr	r0, [r3, #0]
 801b264:	460c      	mov	r4, r1
 801b266:	b118      	cbz	r0, 801b270 <__swsetup_r+0x14>
 801b268:	6a03      	ldr	r3, [r0, #32]
 801b26a:	b90b      	cbnz	r3, 801b270 <__swsetup_r+0x14>
 801b26c:	f7ff fe60 	bl	801af30 <__sinit>
 801b270:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b274:	0719      	lsls	r1, r3, #28
 801b276:	d422      	bmi.n	801b2be <__swsetup_r+0x62>
 801b278:	06da      	lsls	r2, r3, #27
 801b27a:	d407      	bmi.n	801b28c <__swsetup_r+0x30>
 801b27c:	2209      	movs	r2, #9
 801b27e:	602a      	str	r2, [r5, #0]
 801b280:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801b284:	81a3      	strh	r3, [r4, #12]
 801b286:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801b28a:	e033      	b.n	801b2f4 <__swsetup_r+0x98>
 801b28c:	0758      	lsls	r0, r3, #29
 801b28e:	d512      	bpl.n	801b2b6 <__swsetup_r+0x5a>
 801b290:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801b292:	b141      	cbz	r1, 801b2a6 <__swsetup_r+0x4a>
 801b294:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801b298:	4299      	cmp	r1, r3
 801b29a:	d002      	beq.n	801b2a2 <__swsetup_r+0x46>
 801b29c:	4628      	mov	r0, r5
 801b29e:	f000 f95f 	bl	801b560 <_free_r>
 801b2a2:	2300      	movs	r3, #0
 801b2a4:	6363      	str	r3, [r4, #52]	@ 0x34
 801b2a6:	89a3      	ldrh	r3, [r4, #12]
 801b2a8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801b2ac:	81a3      	strh	r3, [r4, #12]
 801b2ae:	2300      	movs	r3, #0
 801b2b0:	6063      	str	r3, [r4, #4]
 801b2b2:	6923      	ldr	r3, [r4, #16]
 801b2b4:	6023      	str	r3, [r4, #0]
 801b2b6:	89a3      	ldrh	r3, [r4, #12]
 801b2b8:	f043 0308 	orr.w	r3, r3, #8
 801b2bc:	81a3      	strh	r3, [r4, #12]
 801b2be:	6923      	ldr	r3, [r4, #16]
 801b2c0:	b94b      	cbnz	r3, 801b2d6 <__swsetup_r+0x7a>
 801b2c2:	89a3      	ldrh	r3, [r4, #12]
 801b2c4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801b2c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801b2cc:	d003      	beq.n	801b2d6 <__swsetup_r+0x7a>
 801b2ce:	4621      	mov	r1, r4
 801b2d0:	4628      	mov	r0, r5
 801b2d2:	f000 fea1 	bl	801c018 <__smakebuf_r>
 801b2d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b2da:	f013 0201 	ands.w	r2, r3, #1
 801b2de:	d00a      	beq.n	801b2f6 <__swsetup_r+0x9a>
 801b2e0:	2200      	movs	r2, #0
 801b2e2:	60a2      	str	r2, [r4, #8]
 801b2e4:	6962      	ldr	r2, [r4, #20]
 801b2e6:	4252      	negs	r2, r2
 801b2e8:	61a2      	str	r2, [r4, #24]
 801b2ea:	6922      	ldr	r2, [r4, #16]
 801b2ec:	b942      	cbnz	r2, 801b300 <__swsetup_r+0xa4>
 801b2ee:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801b2f2:	d1c5      	bne.n	801b280 <__swsetup_r+0x24>
 801b2f4:	bd38      	pop	{r3, r4, r5, pc}
 801b2f6:	0799      	lsls	r1, r3, #30
 801b2f8:	bf58      	it	pl
 801b2fa:	6962      	ldrpl	r2, [r4, #20]
 801b2fc:	60a2      	str	r2, [r4, #8]
 801b2fe:	e7f4      	b.n	801b2ea <__swsetup_r+0x8e>
 801b300:	2000      	movs	r0, #0
 801b302:	e7f7      	b.n	801b2f4 <__swsetup_r+0x98>
 801b304:	20000438 	.word	0x20000438

0801b308 <memcmp>:
 801b308:	b510      	push	{r4, lr}
 801b30a:	3901      	subs	r1, #1
 801b30c:	4402      	add	r2, r0
 801b30e:	4290      	cmp	r0, r2
 801b310:	d101      	bne.n	801b316 <memcmp+0xe>
 801b312:	2000      	movs	r0, #0
 801b314:	e005      	b.n	801b322 <memcmp+0x1a>
 801b316:	7803      	ldrb	r3, [r0, #0]
 801b318:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801b31c:	42a3      	cmp	r3, r4
 801b31e:	d001      	beq.n	801b324 <memcmp+0x1c>
 801b320:	1b18      	subs	r0, r3, r4
 801b322:	bd10      	pop	{r4, pc}
 801b324:	3001      	adds	r0, #1
 801b326:	e7f2      	b.n	801b30e <memcmp+0x6>

0801b328 <memmove>:
 801b328:	4288      	cmp	r0, r1
 801b32a:	b510      	push	{r4, lr}
 801b32c:	eb01 0402 	add.w	r4, r1, r2
 801b330:	d902      	bls.n	801b338 <memmove+0x10>
 801b332:	4284      	cmp	r4, r0
 801b334:	4623      	mov	r3, r4
 801b336:	d807      	bhi.n	801b348 <memmove+0x20>
 801b338:	1e43      	subs	r3, r0, #1
 801b33a:	42a1      	cmp	r1, r4
 801b33c:	d008      	beq.n	801b350 <memmove+0x28>
 801b33e:	f811 2b01 	ldrb.w	r2, [r1], #1
 801b342:	f803 2f01 	strb.w	r2, [r3, #1]!
 801b346:	e7f8      	b.n	801b33a <memmove+0x12>
 801b348:	4402      	add	r2, r0
 801b34a:	4601      	mov	r1, r0
 801b34c:	428a      	cmp	r2, r1
 801b34e:	d100      	bne.n	801b352 <memmove+0x2a>
 801b350:	bd10      	pop	{r4, pc}
 801b352:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801b356:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801b35a:	e7f7      	b.n	801b34c <memmove+0x24>

0801b35c <memset>:
 801b35c:	4402      	add	r2, r0
 801b35e:	4603      	mov	r3, r0
 801b360:	4293      	cmp	r3, r2
 801b362:	d100      	bne.n	801b366 <memset+0xa>
 801b364:	4770      	bx	lr
 801b366:	f803 1b01 	strb.w	r1, [r3], #1
 801b36a:	e7f9      	b.n	801b360 <memset+0x4>

0801b36c <strchr>:
 801b36c:	b2c9      	uxtb	r1, r1
 801b36e:	4603      	mov	r3, r0
 801b370:	4618      	mov	r0, r3
 801b372:	f813 2b01 	ldrb.w	r2, [r3], #1
 801b376:	b112      	cbz	r2, 801b37e <strchr+0x12>
 801b378:	428a      	cmp	r2, r1
 801b37a:	d1f9      	bne.n	801b370 <strchr+0x4>
 801b37c:	4770      	bx	lr
 801b37e:	2900      	cmp	r1, #0
 801b380:	bf18      	it	ne
 801b382:	2000      	movne	r0, #0
 801b384:	4770      	bx	lr

0801b386 <strncmp>:
 801b386:	b510      	push	{r4, lr}
 801b388:	b16a      	cbz	r2, 801b3a6 <strncmp+0x20>
 801b38a:	3901      	subs	r1, #1
 801b38c:	1884      	adds	r4, r0, r2
 801b38e:	f810 2b01 	ldrb.w	r2, [r0], #1
 801b392:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801b396:	429a      	cmp	r2, r3
 801b398:	d103      	bne.n	801b3a2 <strncmp+0x1c>
 801b39a:	42a0      	cmp	r0, r4
 801b39c:	d001      	beq.n	801b3a2 <strncmp+0x1c>
 801b39e:	2a00      	cmp	r2, #0
 801b3a0:	d1f5      	bne.n	801b38e <strncmp+0x8>
 801b3a2:	1ad0      	subs	r0, r2, r3
 801b3a4:	bd10      	pop	{r4, pc}
 801b3a6:	4610      	mov	r0, r2
 801b3a8:	e7fc      	b.n	801b3a4 <strncmp+0x1e>

0801b3aa <strstr>:
 801b3aa:	780a      	ldrb	r2, [r1, #0]
 801b3ac:	b570      	push	{r4, r5, r6, lr}
 801b3ae:	b96a      	cbnz	r2, 801b3cc <strstr+0x22>
 801b3b0:	bd70      	pop	{r4, r5, r6, pc}
 801b3b2:	429a      	cmp	r2, r3
 801b3b4:	d109      	bne.n	801b3ca <strstr+0x20>
 801b3b6:	460c      	mov	r4, r1
 801b3b8:	4605      	mov	r5, r0
 801b3ba:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 801b3be:	2b00      	cmp	r3, #0
 801b3c0:	d0f6      	beq.n	801b3b0 <strstr+0x6>
 801b3c2:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 801b3c6:	429e      	cmp	r6, r3
 801b3c8:	d0f7      	beq.n	801b3ba <strstr+0x10>
 801b3ca:	3001      	adds	r0, #1
 801b3cc:	7803      	ldrb	r3, [r0, #0]
 801b3ce:	2b00      	cmp	r3, #0
 801b3d0:	d1ef      	bne.n	801b3b2 <strstr+0x8>
 801b3d2:	4618      	mov	r0, r3
 801b3d4:	e7ec      	b.n	801b3b0 <strstr+0x6>
	...

0801b3d8 <_close_r>:
 801b3d8:	b538      	push	{r3, r4, r5, lr}
 801b3da:	4d06      	ldr	r5, [pc, #24]	@ (801b3f4 <_close_r+0x1c>)
 801b3dc:	2300      	movs	r3, #0
 801b3de:	4604      	mov	r4, r0
 801b3e0:	4608      	mov	r0, r1
 801b3e2:	602b      	str	r3, [r5, #0]
 801b3e4:	f7e8 fc60 	bl	8003ca8 <_close>
 801b3e8:	1c43      	adds	r3, r0, #1
 801b3ea:	d102      	bne.n	801b3f2 <_close_r+0x1a>
 801b3ec:	682b      	ldr	r3, [r5, #0]
 801b3ee:	b103      	cbz	r3, 801b3f2 <_close_r+0x1a>
 801b3f0:	6023      	str	r3, [r4, #0]
 801b3f2:	bd38      	pop	{r3, r4, r5, pc}
 801b3f4:	2000b7f4 	.word	0x2000b7f4

0801b3f8 <_lseek_r>:
 801b3f8:	b538      	push	{r3, r4, r5, lr}
 801b3fa:	4d07      	ldr	r5, [pc, #28]	@ (801b418 <_lseek_r+0x20>)
 801b3fc:	4604      	mov	r4, r0
 801b3fe:	4608      	mov	r0, r1
 801b400:	4611      	mov	r1, r2
 801b402:	2200      	movs	r2, #0
 801b404:	602a      	str	r2, [r5, #0]
 801b406:	461a      	mov	r2, r3
 801b408:	f7e8 fc75 	bl	8003cf6 <_lseek>
 801b40c:	1c43      	adds	r3, r0, #1
 801b40e:	d102      	bne.n	801b416 <_lseek_r+0x1e>
 801b410:	682b      	ldr	r3, [r5, #0]
 801b412:	b103      	cbz	r3, 801b416 <_lseek_r+0x1e>
 801b414:	6023      	str	r3, [r4, #0]
 801b416:	bd38      	pop	{r3, r4, r5, pc}
 801b418:	2000b7f4 	.word	0x2000b7f4

0801b41c <_read_r>:
 801b41c:	b538      	push	{r3, r4, r5, lr}
 801b41e:	4d07      	ldr	r5, [pc, #28]	@ (801b43c <_read_r+0x20>)
 801b420:	4604      	mov	r4, r0
 801b422:	4608      	mov	r0, r1
 801b424:	4611      	mov	r1, r2
 801b426:	2200      	movs	r2, #0
 801b428:	602a      	str	r2, [r5, #0]
 801b42a:	461a      	mov	r2, r3
 801b42c:	f7e8 fc03 	bl	8003c36 <_read>
 801b430:	1c43      	adds	r3, r0, #1
 801b432:	d102      	bne.n	801b43a <_read_r+0x1e>
 801b434:	682b      	ldr	r3, [r5, #0]
 801b436:	b103      	cbz	r3, 801b43a <_read_r+0x1e>
 801b438:	6023      	str	r3, [r4, #0]
 801b43a:	bd38      	pop	{r3, r4, r5, pc}
 801b43c:	2000b7f4 	.word	0x2000b7f4

0801b440 <_sbrk_r>:
 801b440:	b538      	push	{r3, r4, r5, lr}
 801b442:	4d06      	ldr	r5, [pc, #24]	@ (801b45c <_sbrk_r+0x1c>)
 801b444:	2300      	movs	r3, #0
 801b446:	4604      	mov	r4, r0
 801b448:	4608      	mov	r0, r1
 801b44a:	602b      	str	r3, [r5, #0]
 801b44c:	f7e8 fc60 	bl	8003d10 <_sbrk>
 801b450:	1c43      	adds	r3, r0, #1
 801b452:	d102      	bne.n	801b45a <_sbrk_r+0x1a>
 801b454:	682b      	ldr	r3, [r5, #0]
 801b456:	b103      	cbz	r3, 801b45a <_sbrk_r+0x1a>
 801b458:	6023      	str	r3, [r4, #0]
 801b45a:	bd38      	pop	{r3, r4, r5, pc}
 801b45c:	2000b7f4 	.word	0x2000b7f4

0801b460 <_write_r>:
 801b460:	b538      	push	{r3, r4, r5, lr}
 801b462:	4d07      	ldr	r5, [pc, #28]	@ (801b480 <_write_r+0x20>)
 801b464:	4604      	mov	r4, r0
 801b466:	4608      	mov	r0, r1
 801b468:	4611      	mov	r1, r2
 801b46a:	2200      	movs	r2, #0
 801b46c:	602a      	str	r2, [r5, #0]
 801b46e:	461a      	mov	r2, r3
 801b470:	f7e8 fbfe 	bl	8003c70 <_write>
 801b474:	1c43      	adds	r3, r0, #1
 801b476:	d102      	bne.n	801b47e <_write_r+0x1e>
 801b478:	682b      	ldr	r3, [r5, #0]
 801b47a:	b103      	cbz	r3, 801b47e <_write_r+0x1e>
 801b47c:	6023      	str	r3, [r4, #0]
 801b47e:	bd38      	pop	{r3, r4, r5, pc}
 801b480:	2000b7f4 	.word	0x2000b7f4

0801b484 <__errno>:
 801b484:	4b01      	ldr	r3, [pc, #4]	@ (801b48c <__errno+0x8>)
 801b486:	6818      	ldr	r0, [r3, #0]
 801b488:	4770      	bx	lr
 801b48a:	bf00      	nop
 801b48c:	20000438 	.word	0x20000438

0801b490 <__libc_init_array>:
 801b490:	b570      	push	{r4, r5, r6, lr}
 801b492:	4d0d      	ldr	r5, [pc, #52]	@ (801b4c8 <__libc_init_array+0x38>)
 801b494:	4c0d      	ldr	r4, [pc, #52]	@ (801b4cc <__libc_init_array+0x3c>)
 801b496:	1b64      	subs	r4, r4, r5
 801b498:	10a4      	asrs	r4, r4, #2
 801b49a:	2600      	movs	r6, #0
 801b49c:	42a6      	cmp	r6, r4
 801b49e:	d109      	bne.n	801b4b4 <__libc_init_array+0x24>
 801b4a0:	4d0b      	ldr	r5, [pc, #44]	@ (801b4d0 <__libc_init_array+0x40>)
 801b4a2:	4c0c      	ldr	r4, [pc, #48]	@ (801b4d4 <__libc_init_array+0x44>)
 801b4a4:	f001 ffd2 	bl	801d44c <_init>
 801b4a8:	1b64      	subs	r4, r4, r5
 801b4aa:	10a4      	asrs	r4, r4, #2
 801b4ac:	2600      	movs	r6, #0
 801b4ae:	42a6      	cmp	r6, r4
 801b4b0:	d105      	bne.n	801b4be <__libc_init_array+0x2e>
 801b4b2:	bd70      	pop	{r4, r5, r6, pc}
 801b4b4:	f855 3b04 	ldr.w	r3, [r5], #4
 801b4b8:	4798      	blx	r3
 801b4ba:	3601      	adds	r6, #1
 801b4bc:	e7ee      	b.n	801b49c <__libc_init_array+0xc>
 801b4be:	f855 3b04 	ldr.w	r3, [r5], #4
 801b4c2:	4798      	blx	r3
 801b4c4:	3601      	adds	r6, #1
 801b4c6:	e7f2      	b.n	801b4ae <__libc_init_array+0x1e>
 801b4c8:	0801f0bc 	.word	0x0801f0bc
 801b4cc:	0801f0bc 	.word	0x0801f0bc
 801b4d0:	0801f0bc 	.word	0x0801f0bc
 801b4d4:	0801f0c8 	.word	0x0801f0c8

0801b4d8 <__retarget_lock_init_recursive>:
 801b4d8:	4770      	bx	lr

0801b4da <__retarget_lock_acquire_recursive>:
 801b4da:	4770      	bx	lr

0801b4dc <__retarget_lock_release_recursive>:
 801b4dc:	4770      	bx	lr

0801b4de <strcpy>:
 801b4de:	4603      	mov	r3, r0
 801b4e0:	f811 2b01 	ldrb.w	r2, [r1], #1
 801b4e4:	f803 2b01 	strb.w	r2, [r3], #1
 801b4e8:	2a00      	cmp	r2, #0
 801b4ea:	d1f9      	bne.n	801b4e0 <strcpy+0x2>
 801b4ec:	4770      	bx	lr

0801b4ee <memcpy>:
 801b4ee:	440a      	add	r2, r1
 801b4f0:	4291      	cmp	r1, r2
 801b4f2:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 801b4f6:	d100      	bne.n	801b4fa <memcpy+0xc>
 801b4f8:	4770      	bx	lr
 801b4fa:	b510      	push	{r4, lr}
 801b4fc:	f811 4b01 	ldrb.w	r4, [r1], #1
 801b500:	f803 4f01 	strb.w	r4, [r3, #1]!
 801b504:	4291      	cmp	r1, r2
 801b506:	d1f9      	bne.n	801b4fc <memcpy+0xe>
 801b508:	bd10      	pop	{r4, pc}
	...

0801b50c <__assert_func>:
 801b50c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801b50e:	4614      	mov	r4, r2
 801b510:	461a      	mov	r2, r3
 801b512:	4b09      	ldr	r3, [pc, #36]	@ (801b538 <__assert_func+0x2c>)
 801b514:	681b      	ldr	r3, [r3, #0]
 801b516:	4605      	mov	r5, r0
 801b518:	68d8      	ldr	r0, [r3, #12]
 801b51a:	b14c      	cbz	r4, 801b530 <__assert_func+0x24>
 801b51c:	4b07      	ldr	r3, [pc, #28]	@ (801b53c <__assert_func+0x30>)
 801b51e:	9100      	str	r1, [sp, #0]
 801b520:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801b524:	4906      	ldr	r1, [pc, #24]	@ (801b540 <__assert_func+0x34>)
 801b526:	462b      	mov	r3, r5
 801b528:	f000 fd3e 	bl	801bfa8 <fiprintf>
 801b52c:	f000 fdd2 	bl	801c0d4 <abort>
 801b530:	4b04      	ldr	r3, [pc, #16]	@ (801b544 <__assert_func+0x38>)
 801b532:	461c      	mov	r4, r3
 801b534:	e7f3      	b.n	801b51e <__assert_func+0x12>
 801b536:	bf00      	nop
 801b538:	20000438 	.word	0x20000438
 801b53c:	0801eb53 	.word	0x0801eb53
 801b540:	0801eb60 	.word	0x0801eb60
 801b544:	0801eb8e 	.word	0x0801eb8e

0801b548 <__env_lock>:
 801b548:	4801      	ldr	r0, [pc, #4]	@ (801b550 <__env_lock+0x8>)
 801b54a:	f7ff bfc6 	b.w	801b4da <__retarget_lock_acquire_recursive>
 801b54e:	bf00      	nop
 801b550:	2000b7f8 	.word	0x2000b7f8

0801b554 <__env_unlock>:
 801b554:	4801      	ldr	r0, [pc, #4]	@ (801b55c <__env_unlock+0x8>)
 801b556:	f7ff bfc1 	b.w	801b4dc <__retarget_lock_release_recursive>
 801b55a:	bf00      	nop
 801b55c:	2000b7f8 	.word	0x2000b7f8

0801b560 <_free_r>:
 801b560:	b538      	push	{r3, r4, r5, lr}
 801b562:	4605      	mov	r5, r0
 801b564:	2900      	cmp	r1, #0
 801b566:	d041      	beq.n	801b5ec <_free_r+0x8c>
 801b568:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801b56c:	1f0c      	subs	r4, r1, #4
 801b56e:	2b00      	cmp	r3, #0
 801b570:	bfb8      	it	lt
 801b572:	18e4      	addlt	r4, r4, r3
 801b574:	f7ff fb2a 	bl	801abcc <__malloc_lock>
 801b578:	4a1d      	ldr	r2, [pc, #116]	@ (801b5f0 <_free_r+0x90>)
 801b57a:	6813      	ldr	r3, [r2, #0]
 801b57c:	b933      	cbnz	r3, 801b58c <_free_r+0x2c>
 801b57e:	6063      	str	r3, [r4, #4]
 801b580:	6014      	str	r4, [r2, #0]
 801b582:	4628      	mov	r0, r5
 801b584:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801b588:	f7ff bb26 	b.w	801abd8 <__malloc_unlock>
 801b58c:	42a3      	cmp	r3, r4
 801b58e:	d908      	bls.n	801b5a2 <_free_r+0x42>
 801b590:	6820      	ldr	r0, [r4, #0]
 801b592:	1821      	adds	r1, r4, r0
 801b594:	428b      	cmp	r3, r1
 801b596:	bf01      	itttt	eq
 801b598:	6819      	ldreq	r1, [r3, #0]
 801b59a:	685b      	ldreq	r3, [r3, #4]
 801b59c:	1809      	addeq	r1, r1, r0
 801b59e:	6021      	streq	r1, [r4, #0]
 801b5a0:	e7ed      	b.n	801b57e <_free_r+0x1e>
 801b5a2:	461a      	mov	r2, r3
 801b5a4:	685b      	ldr	r3, [r3, #4]
 801b5a6:	b10b      	cbz	r3, 801b5ac <_free_r+0x4c>
 801b5a8:	42a3      	cmp	r3, r4
 801b5aa:	d9fa      	bls.n	801b5a2 <_free_r+0x42>
 801b5ac:	6811      	ldr	r1, [r2, #0]
 801b5ae:	1850      	adds	r0, r2, r1
 801b5b0:	42a0      	cmp	r0, r4
 801b5b2:	d10b      	bne.n	801b5cc <_free_r+0x6c>
 801b5b4:	6820      	ldr	r0, [r4, #0]
 801b5b6:	4401      	add	r1, r0
 801b5b8:	1850      	adds	r0, r2, r1
 801b5ba:	4283      	cmp	r3, r0
 801b5bc:	6011      	str	r1, [r2, #0]
 801b5be:	d1e0      	bne.n	801b582 <_free_r+0x22>
 801b5c0:	6818      	ldr	r0, [r3, #0]
 801b5c2:	685b      	ldr	r3, [r3, #4]
 801b5c4:	6053      	str	r3, [r2, #4]
 801b5c6:	4408      	add	r0, r1
 801b5c8:	6010      	str	r0, [r2, #0]
 801b5ca:	e7da      	b.n	801b582 <_free_r+0x22>
 801b5cc:	d902      	bls.n	801b5d4 <_free_r+0x74>
 801b5ce:	230c      	movs	r3, #12
 801b5d0:	602b      	str	r3, [r5, #0]
 801b5d2:	e7d6      	b.n	801b582 <_free_r+0x22>
 801b5d4:	6820      	ldr	r0, [r4, #0]
 801b5d6:	1821      	adds	r1, r4, r0
 801b5d8:	428b      	cmp	r3, r1
 801b5da:	bf04      	itt	eq
 801b5dc:	6819      	ldreq	r1, [r3, #0]
 801b5de:	685b      	ldreq	r3, [r3, #4]
 801b5e0:	6063      	str	r3, [r4, #4]
 801b5e2:	bf04      	itt	eq
 801b5e4:	1809      	addeq	r1, r1, r0
 801b5e6:	6021      	streq	r1, [r4, #0]
 801b5e8:	6054      	str	r4, [r2, #4]
 801b5ea:	e7ca      	b.n	801b582 <_free_r+0x22>
 801b5ec:	bd38      	pop	{r3, r4, r5, pc}
 801b5ee:	bf00      	nop
 801b5f0:	2000b6b4 	.word	0x2000b6b4

0801b5f4 <_malloc_usable_size_r>:
 801b5f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801b5f8:	1f18      	subs	r0, r3, #4
 801b5fa:	2b00      	cmp	r3, #0
 801b5fc:	bfbc      	itt	lt
 801b5fe:	580b      	ldrlt	r3, [r1, r0]
 801b600:	18c0      	addlt	r0, r0, r3
 801b602:	4770      	bx	lr

0801b604 <__ssputs_r>:
 801b604:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b608:	688e      	ldr	r6, [r1, #8]
 801b60a:	461f      	mov	r7, r3
 801b60c:	42be      	cmp	r6, r7
 801b60e:	680b      	ldr	r3, [r1, #0]
 801b610:	4682      	mov	sl, r0
 801b612:	460c      	mov	r4, r1
 801b614:	4690      	mov	r8, r2
 801b616:	d82d      	bhi.n	801b674 <__ssputs_r+0x70>
 801b618:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801b61c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801b620:	d026      	beq.n	801b670 <__ssputs_r+0x6c>
 801b622:	6965      	ldr	r5, [r4, #20]
 801b624:	6909      	ldr	r1, [r1, #16]
 801b626:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801b62a:	eba3 0901 	sub.w	r9, r3, r1
 801b62e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801b632:	1c7b      	adds	r3, r7, #1
 801b634:	444b      	add	r3, r9
 801b636:	106d      	asrs	r5, r5, #1
 801b638:	429d      	cmp	r5, r3
 801b63a:	bf38      	it	cc
 801b63c:	461d      	movcc	r5, r3
 801b63e:	0553      	lsls	r3, r2, #21
 801b640:	d527      	bpl.n	801b692 <__ssputs_r+0x8e>
 801b642:	4629      	mov	r1, r5
 801b644:	f7ff fa42 	bl	801aacc <_malloc_r>
 801b648:	4606      	mov	r6, r0
 801b64a:	b360      	cbz	r0, 801b6a6 <__ssputs_r+0xa2>
 801b64c:	6921      	ldr	r1, [r4, #16]
 801b64e:	464a      	mov	r2, r9
 801b650:	f7ff ff4d 	bl	801b4ee <memcpy>
 801b654:	89a3      	ldrh	r3, [r4, #12]
 801b656:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801b65a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801b65e:	81a3      	strh	r3, [r4, #12]
 801b660:	6126      	str	r6, [r4, #16]
 801b662:	6165      	str	r5, [r4, #20]
 801b664:	444e      	add	r6, r9
 801b666:	eba5 0509 	sub.w	r5, r5, r9
 801b66a:	6026      	str	r6, [r4, #0]
 801b66c:	60a5      	str	r5, [r4, #8]
 801b66e:	463e      	mov	r6, r7
 801b670:	42be      	cmp	r6, r7
 801b672:	d900      	bls.n	801b676 <__ssputs_r+0x72>
 801b674:	463e      	mov	r6, r7
 801b676:	6820      	ldr	r0, [r4, #0]
 801b678:	4632      	mov	r2, r6
 801b67a:	4641      	mov	r1, r8
 801b67c:	f7ff fe54 	bl	801b328 <memmove>
 801b680:	68a3      	ldr	r3, [r4, #8]
 801b682:	1b9b      	subs	r3, r3, r6
 801b684:	60a3      	str	r3, [r4, #8]
 801b686:	6823      	ldr	r3, [r4, #0]
 801b688:	4433      	add	r3, r6
 801b68a:	6023      	str	r3, [r4, #0]
 801b68c:	2000      	movs	r0, #0
 801b68e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b692:	462a      	mov	r2, r5
 801b694:	f7ff fb1a 	bl	801accc <_realloc_r>
 801b698:	4606      	mov	r6, r0
 801b69a:	2800      	cmp	r0, #0
 801b69c:	d1e0      	bne.n	801b660 <__ssputs_r+0x5c>
 801b69e:	6921      	ldr	r1, [r4, #16]
 801b6a0:	4650      	mov	r0, sl
 801b6a2:	f7ff ff5d 	bl	801b560 <_free_r>
 801b6a6:	230c      	movs	r3, #12
 801b6a8:	f8ca 3000 	str.w	r3, [sl]
 801b6ac:	89a3      	ldrh	r3, [r4, #12]
 801b6ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801b6b2:	81a3      	strh	r3, [r4, #12]
 801b6b4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801b6b8:	e7e9      	b.n	801b68e <__ssputs_r+0x8a>
	...

0801b6bc <_svfiprintf_r>:
 801b6bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b6c0:	4698      	mov	r8, r3
 801b6c2:	898b      	ldrh	r3, [r1, #12]
 801b6c4:	061b      	lsls	r3, r3, #24
 801b6c6:	b09d      	sub	sp, #116	@ 0x74
 801b6c8:	4607      	mov	r7, r0
 801b6ca:	460d      	mov	r5, r1
 801b6cc:	4614      	mov	r4, r2
 801b6ce:	d510      	bpl.n	801b6f2 <_svfiprintf_r+0x36>
 801b6d0:	690b      	ldr	r3, [r1, #16]
 801b6d2:	b973      	cbnz	r3, 801b6f2 <_svfiprintf_r+0x36>
 801b6d4:	2140      	movs	r1, #64	@ 0x40
 801b6d6:	f7ff f9f9 	bl	801aacc <_malloc_r>
 801b6da:	6028      	str	r0, [r5, #0]
 801b6dc:	6128      	str	r0, [r5, #16]
 801b6de:	b930      	cbnz	r0, 801b6ee <_svfiprintf_r+0x32>
 801b6e0:	230c      	movs	r3, #12
 801b6e2:	603b      	str	r3, [r7, #0]
 801b6e4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801b6e8:	b01d      	add	sp, #116	@ 0x74
 801b6ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b6ee:	2340      	movs	r3, #64	@ 0x40
 801b6f0:	616b      	str	r3, [r5, #20]
 801b6f2:	2300      	movs	r3, #0
 801b6f4:	9309      	str	r3, [sp, #36]	@ 0x24
 801b6f6:	2320      	movs	r3, #32
 801b6f8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801b6fc:	f8cd 800c 	str.w	r8, [sp, #12]
 801b700:	2330      	movs	r3, #48	@ 0x30
 801b702:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801b8a0 <_svfiprintf_r+0x1e4>
 801b706:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801b70a:	f04f 0901 	mov.w	r9, #1
 801b70e:	4623      	mov	r3, r4
 801b710:	469a      	mov	sl, r3
 801b712:	f813 2b01 	ldrb.w	r2, [r3], #1
 801b716:	b10a      	cbz	r2, 801b71c <_svfiprintf_r+0x60>
 801b718:	2a25      	cmp	r2, #37	@ 0x25
 801b71a:	d1f9      	bne.n	801b710 <_svfiprintf_r+0x54>
 801b71c:	ebba 0b04 	subs.w	fp, sl, r4
 801b720:	d00b      	beq.n	801b73a <_svfiprintf_r+0x7e>
 801b722:	465b      	mov	r3, fp
 801b724:	4622      	mov	r2, r4
 801b726:	4629      	mov	r1, r5
 801b728:	4638      	mov	r0, r7
 801b72a:	f7ff ff6b 	bl	801b604 <__ssputs_r>
 801b72e:	3001      	adds	r0, #1
 801b730:	f000 80a7 	beq.w	801b882 <_svfiprintf_r+0x1c6>
 801b734:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801b736:	445a      	add	r2, fp
 801b738:	9209      	str	r2, [sp, #36]	@ 0x24
 801b73a:	f89a 3000 	ldrb.w	r3, [sl]
 801b73e:	2b00      	cmp	r3, #0
 801b740:	f000 809f 	beq.w	801b882 <_svfiprintf_r+0x1c6>
 801b744:	2300      	movs	r3, #0
 801b746:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801b74a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801b74e:	f10a 0a01 	add.w	sl, sl, #1
 801b752:	9304      	str	r3, [sp, #16]
 801b754:	9307      	str	r3, [sp, #28]
 801b756:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801b75a:	931a      	str	r3, [sp, #104]	@ 0x68
 801b75c:	4654      	mov	r4, sl
 801b75e:	2205      	movs	r2, #5
 801b760:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b764:	484e      	ldr	r0, [pc, #312]	@ (801b8a0 <_svfiprintf_r+0x1e4>)
 801b766:	f7e4 fd73 	bl	8000250 <memchr>
 801b76a:	9a04      	ldr	r2, [sp, #16]
 801b76c:	b9d8      	cbnz	r0, 801b7a6 <_svfiprintf_r+0xea>
 801b76e:	06d0      	lsls	r0, r2, #27
 801b770:	bf44      	itt	mi
 801b772:	2320      	movmi	r3, #32
 801b774:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801b778:	0711      	lsls	r1, r2, #28
 801b77a:	bf44      	itt	mi
 801b77c:	232b      	movmi	r3, #43	@ 0x2b
 801b77e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801b782:	f89a 3000 	ldrb.w	r3, [sl]
 801b786:	2b2a      	cmp	r3, #42	@ 0x2a
 801b788:	d015      	beq.n	801b7b6 <_svfiprintf_r+0xfa>
 801b78a:	9a07      	ldr	r2, [sp, #28]
 801b78c:	4654      	mov	r4, sl
 801b78e:	2000      	movs	r0, #0
 801b790:	f04f 0c0a 	mov.w	ip, #10
 801b794:	4621      	mov	r1, r4
 801b796:	f811 3b01 	ldrb.w	r3, [r1], #1
 801b79a:	3b30      	subs	r3, #48	@ 0x30
 801b79c:	2b09      	cmp	r3, #9
 801b79e:	d94b      	bls.n	801b838 <_svfiprintf_r+0x17c>
 801b7a0:	b1b0      	cbz	r0, 801b7d0 <_svfiprintf_r+0x114>
 801b7a2:	9207      	str	r2, [sp, #28]
 801b7a4:	e014      	b.n	801b7d0 <_svfiprintf_r+0x114>
 801b7a6:	eba0 0308 	sub.w	r3, r0, r8
 801b7aa:	fa09 f303 	lsl.w	r3, r9, r3
 801b7ae:	4313      	orrs	r3, r2
 801b7b0:	9304      	str	r3, [sp, #16]
 801b7b2:	46a2      	mov	sl, r4
 801b7b4:	e7d2      	b.n	801b75c <_svfiprintf_r+0xa0>
 801b7b6:	9b03      	ldr	r3, [sp, #12]
 801b7b8:	1d19      	adds	r1, r3, #4
 801b7ba:	681b      	ldr	r3, [r3, #0]
 801b7bc:	9103      	str	r1, [sp, #12]
 801b7be:	2b00      	cmp	r3, #0
 801b7c0:	bfbb      	ittet	lt
 801b7c2:	425b      	neglt	r3, r3
 801b7c4:	f042 0202 	orrlt.w	r2, r2, #2
 801b7c8:	9307      	strge	r3, [sp, #28]
 801b7ca:	9307      	strlt	r3, [sp, #28]
 801b7cc:	bfb8      	it	lt
 801b7ce:	9204      	strlt	r2, [sp, #16]
 801b7d0:	7823      	ldrb	r3, [r4, #0]
 801b7d2:	2b2e      	cmp	r3, #46	@ 0x2e
 801b7d4:	d10a      	bne.n	801b7ec <_svfiprintf_r+0x130>
 801b7d6:	7863      	ldrb	r3, [r4, #1]
 801b7d8:	2b2a      	cmp	r3, #42	@ 0x2a
 801b7da:	d132      	bne.n	801b842 <_svfiprintf_r+0x186>
 801b7dc:	9b03      	ldr	r3, [sp, #12]
 801b7de:	1d1a      	adds	r2, r3, #4
 801b7e0:	681b      	ldr	r3, [r3, #0]
 801b7e2:	9203      	str	r2, [sp, #12]
 801b7e4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801b7e8:	3402      	adds	r4, #2
 801b7ea:	9305      	str	r3, [sp, #20]
 801b7ec:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801b8b0 <_svfiprintf_r+0x1f4>
 801b7f0:	7821      	ldrb	r1, [r4, #0]
 801b7f2:	2203      	movs	r2, #3
 801b7f4:	4650      	mov	r0, sl
 801b7f6:	f7e4 fd2b 	bl	8000250 <memchr>
 801b7fa:	b138      	cbz	r0, 801b80c <_svfiprintf_r+0x150>
 801b7fc:	9b04      	ldr	r3, [sp, #16]
 801b7fe:	eba0 000a 	sub.w	r0, r0, sl
 801b802:	2240      	movs	r2, #64	@ 0x40
 801b804:	4082      	lsls	r2, r0
 801b806:	4313      	orrs	r3, r2
 801b808:	3401      	adds	r4, #1
 801b80a:	9304      	str	r3, [sp, #16]
 801b80c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b810:	4824      	ldr	r0, [pc, #144]	@ (801b8a4 <_svfiprintf_r+0x1e8>)
 801b812:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801b816:	2206      	movs	r2, #6
 801b818:	f7e4 fd1a 	bl	8000250 <memchr>
 801b81c:	2800      	cmp	r0, #0
 801b81e:	d036      	beq.n	801b88e <_svfiprintf_r+0x1d2>
 801b820:	4b21      	ldr	r3, [pc, #132]	@ (801b8a8 <_svfiprintf_r+0x1ec>)
 801b822:	bb1b      	cbnz	r3, 801b86c <_svfiprintf_r+0x1b0>
 801b824:	9b03      	ldr	r3, [sp, #12]
 801b826:	3307      	adds	r3, #7
 801b828:	f023 0307 	bic.w	r3, r3, #7
 801b82c:	3308      	adds	r3, #8
 801b82e:	9303      	str	r3, [sp, #12]
 801b830:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b832:	4433      	add	r3, r6
 801b834:	9309      	str	r3, [sp, #36]	@ 0x24
 801b836:	e76a      	b.n	801b70e <_svfiprintf_r+0x52>
 801b838:	fb0c 3202 	mla	r2, ip, r2, r3
 801b83c:	460c      	mov	r4, r1
 801b83e:	2001      	movs	r0, #1
 801b840:	e7a8      	b.n	801b794 <_svfiprintf_r+0xd8>
 801b842:	2300      	movs	r3, #0
 801b844:	3401      	adds	r4, #1
 801b846:	9305      	str	r3, [sp, #20]
 801b848:	4619      	mov	r1, r3
 801b84a:	f04f 0c0a 	mov.w	ip, #10
 801b84e:	4620      	mov	r0, r4
 801b850:	f810 2b01 	ldrb.w	r2, [r0], #1
 801b854:	3a30      	subs	r2, #48	@ 0x30
 801b856:	2a09      	cmp	r2, #9
 801b858:	d903      	bls.n	801b862 <_svfiprintf_r+0x1a6>
 801b85a:	2b00      	cmp	r3, #0
 801b85c:	d0c6      	beq.n	801b7ec <_svfiprintf_r+0x130>
 801b85e:	9105      	str	r1, [sp, #20]
 801b860:	e7c4      	b.n	801b7ec <_svfiprintf_r+0x130>
 801b862:	fb0c 2101 	mla	r1, ip, r1, r2
 801b866:	4604      	mov	r4, r0
 801b868:	2301      	movs	r3, #1
 801b86a:	e7f0      	b.n	801b84e <_svfiprintf_r+0x192>
 801b86c:	ab03      	add	r3, sp, #12
 801b86e:	9300      	str	r3, [sp, #0]
 801b870:	462a      	mov	r2, r5
 801b872:	4b0e      	ldr	r3, [pc, #56]	@ (801b8ac <_svfiprintf_r+0x1f0>)
 801b874:	a904      	add	r1, sp, #16
 801b876:	4638      	mov	r0, r7
 801b878:	f3af 8000 	nop.w
 801b87c:	1c42      	adds	r2, r0, #1
 801b87e:	4606      	mov	r6, r0
 801b880:	d1d6      	bne.n	801b830 <_svfiprintf_r+0x174>
 801b882:	89ab      	ldrh	r3, [r5, #12]
 801b884:	065b      	lsls	r3, r3, #25
 801b886:	f53f af2d 	bmi.w	801b6e4 <_svfiprintf_r+0x28>
 801b88a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801b88c:	e72c      	b.n	801b6e8 <_svfiprintf_r+0x2c>
 801b88e:	ab03      	add	r3, sp, #12
 801b890:	9300      	str	r3, [sp, #0]
 801b892:	462a      	mov	r2, r5
 801b894:	4b05      	ldr	r3, [pc, #20]	@ (801b8ac <_svfiprintf_r+0x1f0>)
 801b896:	a904      	add	r1, sp, #16
 801b898:	4638      	mov	r0, r7
 801b89a:	f000 f9bb 	bl	801bc14 <_printf_i>
 801b89e:	e7ed      	b.n	801b87c <_svfiprintf_r+0x1c0>
 801b8a0:	0801eb8f 	.word	0x0801eb8f
 801b8a4:	0801eb99 	.word	0x0801eb99
 801b8a8:	00000000 	.word	0x00000000
 801b8ac:	0801b605 	.word	0x0801b605
 801b8b0:	0801eb95 	.word	0x0801eb95

0801b8b4 <__sfputc_r>:
 801b8b4:	6893      	ldr	r3, [r2, #8]
 801b8b6:	3b01      	subs	r3, #1
 801b8b8:	2b00      	cmp	r3, #0
 801b8ba:	b410      	push	{r4}
 801b8bc:	6093      	str	r3, [r2, #8]
 801b8be:	da08      	bge.n	801b8d2 <__sfputc_r+0x1e>
 801b8c0:	6994      	ldr	r4, [r2, #24]
 801b8c2:	42a3      	cmp	r3, r4
 801b8c4:	db01      	blt.n	801b8ca <__sfputc_r+0x16>
 801b8c6:	290a      	cmp	r1, #10
 801b8c8:	d103      	bne.n	801b8d2 <__sfputc_r+0x1e>
 801b8ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b8ce:	f7ff bc87 	b.w	801b1e0 <__swbuf_r>
 801b8d2:	6813      	ldr	r3, [r2, #0]
 801b8d4:	1c58      	adds	r0, r3, #1
 801b8d6:	6010      	str	r0, [r2, #0]
 801b8d8:	7019      	strb	r1, [r3, #0]
 801b8da:	4608      	mov	r0, r1
 801b8dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b8e0:	4770      	bx	lr

0801b8e2 <__sfputs_r>:
 801b8e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b8e4:	4606      	mov	r6, r0
 801b8e6:	460f      	mov	r7, r1
 801b8e8:	4614      	mov	r4, r2
 801b8ea:	18d5      	adds	r5, r2, r3
 801b8ec:	42ac      	cmp	r4, r5
 801b8ee:	d101      	bne.n	801b8f4 <__sfputs_r+0x12>
 801b8f0:	2000      	movs	r0, #0
 801b8f2:	e007      	b.n	801b904 <__sfputs_r+0x22>
 801b8f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b8f8:	463a      	mov	r2, r7
 801b8fa:	4630      	mov	r0, r6
 801b8fc:	f7ff ffda 	bl	801b8b4 <__sfputc_r>
 801b900:	1c43      	adds	r3, r0, #1
 801b902:	d1f3      	bne.n	801b8ec <__sfputs_r+0xa>
 801b904:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801b908 <_vfiprintf_r>:
 801b908:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b90c:	460d      	mov	r5, r1
 801b90e:	b09d      	sub	sp, #116	@ 0x74
 801b910:	4614      	mov	r4, r2
 801b912:	4698      	mov	r8, r3
 801b914:	4606      	mov	r6, r0
 801b916:	b118      	cbz	r0, 801b920 <_vfiprintf_r+0x18>
 801b918:	6a03      	ldr	r3, [r0, #32]
 801b91a:	b90b      	cbnz	r3, 801b920 <_vfiprintf_r+0x18>
 801b91c:	f7ff fb08 	bl	801af30 <__sinit>
 801b920:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801b922:	07d9      	lsls	r1, r3, #31
 801b924:	d405      	bmi.n	801b932 <_vfiprintf_r+0x2a>
 801b926:	89ab      	ldrh	r3, [r5, #12]
 801b928:	059a      	lsls	r2, r3, #22
 801b92a:	d402      	bmi.n	801b932 <_vfiprintf_r+0x2a>
 801b92c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801b92e:	f7ff fdd4 	bl	801b4da <__retarget_lock_acquire_recursive>
 801b932:	89ab      	ldrh	r3, [r5, #12]
 801b934:	071b      	lsls	r3, r3, #28
 801b936:	d501      	bpl.n	801b93c <_vfiprintf_r+0x34>
 801b938:	692b      	ldr	r3, [r5, #16]
 801b93a:	b99b      	cbnz	r3, 801b964 <_vfiprintf_r+0x5c>
 801b93c:	4629      	mov	r1, r5
 801b93e:	4630      	mov	r0, r6
 801b940:	f7ff fc8c 	bl	801b25c <__swsetup_r>
 801b944:	b170      	cbz	r0, 801b964 <_vfiprintf_r+0x5c>
 801b946:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801b948:	07dc      	lsls	r4, r3, #31
 801b94a:	d504      	bpl.n	801b956 <_vfiprintf_r+0x4e>
 801b94c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801b950:	b01d      	add	sp, #116	@ 0x74
 801b952:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b956:	89ab      	ldrh	r3, [r5, #12]
 801b958:	0598      	lsls	r0, r3, #22
 801b95a:	d4f7      	bmi.n	801b94c <_vfiprintf_r+0x44>
 801b95c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801b95e:	f7ff fdbd 	bl	801b4dc <__retarget_lock_release_recursive>
 801b962:	e7f3      	b.n	801b94c <_vfiprintf_r+0x44>
 801b964:	2300      	movs	r3, #0
 801b966:	9309      	str	r3, [sp, #36]	@ 0x24
 801b968:	2320      	movs	r3, #32
 801b96a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801b96e:	f8cd 800c 	str.w	r8, [sp, #12]
 801b972:	2330      	movs	r3, #48	@ 0x30
 801b974:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801bb24 <_vfiprintf_r+0x21c>
 801b978:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801b97c:	f04f 0901 	mov.w	r9, #1
 801b980:	4623      	mov	r3, r4
 801b982:	469a      	mov	sl, r3
 801b984:	f813 2b01 	ldrb.w	r2, [r3], #1
 801b988:	b10a      	cbz	r2, 801b98e <_vfiprintf_r+0x86>
 801b98a:	2a25      	cmp	r2, #37	@ 0x25
 801b98c:	d1f9      	bne.n	801b982 <_vfiprintf_r+0x7a>
 801b98e:	ebba 0b04 	subs.w	fp, sl, r4
 801b992:	d00b      	beq.n	801b9ac <_vfiprintf_r+0xa4>
 801b994:	465b      	mov	r3, fp
 801b996:	4622      	mov	r2, r4
 801b998:	4629      	mov	r1, r5
 801b99a:	4630      	mov	r0, r6
 801b99c:	f7ff ffa1 	bl	801b8e2 <__sfputs_r>
 801b9a0:	3001      	adds	r0, #1
 801b9a2:	f000 80a7 	beq.w	801baf4 <_vfiprintf_r+0x1ec>
 801b9a6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801b9a8:	445a      	add	r2, fp
 801b9aa:	9209      	str	r2, [sp, #36]	@ 0x24
 801b9ac:	f89a 3000 	ldrb.w	r3, [sl]
 801b9b0:	2b00      	cmp	r3, #0
 801b9b2:	f000 809f 	beq.w	801baf4 <_vfiprintf_r+0x1ec>
 801b9b6:	2300      	movs	r3, #0
 801b9b8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801b9bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801b9c0:	f10a 0a01 	add.w	sl, sl, #1
 801b9c4:	9304      	str	r3, [sp, #16]
 801b9c6:	9307      	str	r3, [sp, #28]
 801b9c8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801b9cc:	931a      	str	r3, [sp, #104]	@ 0x68
 801b9ce:	4654      	mov	r4, sl
 801b9d0:	2205      	movs	r2, #5
 801b9d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b9d6:	4853      	ldr	r0, [pc, #332]	@ (801bb24 <_vfiprintf_r+0x21c>)
 801b9d8:	f7e4 fc3a 	bl	8000250 <memchr>
 801b9dc:	9a04      	ldr	r2, [sp, #16]
 801b9de:	b9d8      	cbnz	r0, 801ba18 <_vfiprintf_r+0x110>
 801b9e0:	06d1      	lsls	r1, r2, #27
 801b9e2:	bf44      	itt	mi
 801b9e4:	2320      	movmi	r3, #32
 801b9e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801b9ea:	0713      	lsls	r3, r2, #28
 801b9ec:	bf44      	itt	mi
 801b9ee:	232b      	movmi	r3, #43	@ 0x2b
 801b9f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801b9f4:	f89a 3000 	ldrb.w	r3, [sl]
 801b9f8:	2b2a      	cmp	r3, #42	@ 0x2a
 801b9fa:	d015      	beq.n	801ba28 <_vfiprintf_r+0x120>
 801b9fc:	9a07      	ldr	r2, [sp, #28]
 801b9fe:	4654      	mov	r4, sl
 801ba00:	2000      	movs	r0, #0
 801ba02:	f04f 0c0a 	mov.w	ip, #10
 801ba06:	4621      	mov	r1, r4
 801ba08:	f811 3b01 	ldrb.w	r3, [r1], #1
 801ba0c:	3b30      	subs	r3, #48	@ 0x30
 801ba0e:	2b09      	cmp	r3, #9
 801ba10:	d94b      	bls.n	801baaa <_vfiprintf_r+0x1a2>
 801ba12:	b1b0      	cbz	r0, 801ba42 <_vfiprintf_r+0x13a>
 801ba14:	9207      	str	r2, [sp, #28]
 801ba16:	e014      	b.n	801ba42 <_vfiprintf_r+0x13a>
 801ba18:	eba0 0308 	sub.w	r3, r0, r8
 801ba1c:	fa09 f303 	lsl.w	r3, r9, r3
 801ba20:	4313      	orrs	r3, r2
 801ba22:	9304      	str	r3, [sp, #16]
 801ba24:	46a2      	mov	sl, r4
 801ba26:	e7d2      	b.n	801b9ce <_vfiprintf_r+0xc6>
 801ba28:	9b03      	ldr	r3, [sp, #12]
 801ba2a:	1d19      	adds	r1, r3, #4
 801ba2c:	681b      	ldr	r3, [r3, #0]
 801ba2e:	9103      	str	r1, [sp, #12]
 801ba30:	2b00      	cmp	r3, #0
 801ba32:	bfbb      	ittet	lt
 801ba34:	425b      	neglt	r3, r3
 801ba36:	f042 0202 	orrlt.w	r2, r2, #2
 801ba3a:	9307      	strge	r3, [sp, #28]
 801ba3c:	9307      	strlt	r3, [sp, #28]
 801ba3e:	bfb8      	it	lt
 801ba40:	9204      	strlt	r2, [sp, #16]
 801ba42:	7823      	ldrb	r3, [r4, #0]
 801ba44:	2b2e      	cmp	r3, #46	@ 0x2e
 801ba46:	d10a      	bne.n	801ba5e <_vfiprintf_r+0x156>
 801ba48:	7863      	ldrb	r3, [r4, #1]
 801ba4a:	2b2a      	cmp	r3, #42	@ 0x2a
 801ba4c:	d132      	bne.n	801bab4 <_vfiprintf_r+0x1ac>
 801ba4e:	9b03      	ldr	r3, [sp, #12]
 801ba50:	1d1a      	adds	r2, r3, #4
 801ba52:	681b      	ldr	r3, [r3, #0]
 801ba54:	9203      	str	r2, [sp, #12]
 801ba56:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801ba5a:	3402      	adds	r4, #2
 801ba5c:	9305      	str	r3, [sp, #20]
 801ba5e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801bb34 <_vfiprintf_r+0x22c>
 801ba62:	7821      	ldrb	r1, [r4, #0]
 801ba64:	2203      	movs	r2, #3
 801ba66:	4650      	mov	r0, sl
 801ba68:	f7e4 fbf2 	bl	8000250 <memchr>
 801ba6c:	b138      	cbz	r0, 801ba7e <_vfiprintf_r+0x176>
 801ba6e:	9b04      	ldr	r3, [sp, #16]
 801ba70:	eba0 000a 	sub.w	r0, r0, sl
 801ba74:	2240      	movs	r2, #64	@ 0x40
 801ba76:	4082      	lsls	r2, r0
 801ba78:	4313      	orrs	r3, r2
 801ba7a:	3401      	adds	r4, #1
 801ba7c:	9304      	str	r3, [sp, #16]
 801ba7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ba82:	4829      	ldr	r0, [pc, #164]	@ (801bb28 <_vfiprintf_r+0x220>)
 801ba84:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801ba88:	2206      	movs	r2, #6
 801ba8a:	f7e4 fbe1 	bl	8000250 <memchr>
 801ba8e:	2800      	cmp	r0, #0
 801ba90:	d03f      	beq.n	801bb12 <_vfiprintf_r+0x20a>
 801ba92:	4b26      	ldr	r3, [pc, #152]	@ (801bb2c <_vfiprintf_r+0x224>)
 801ba94:	bb1b      	cbnz	r3, 801bade <_vfiprintf_r+0x1d6>
 801ba96:	9b03      	ldr	r3, [sp, #12]
 801ba98:	3307      	adds	r3, #7
 801ba9a:	f023 0307 	bic.w	r3, r3, #7
 801ba9e:	3308      	adds	r3, #8
 801baa0:	9303      	str	r3, [sp, #12]
 801baa2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801baa4:	443b      	add	r3, r7
 801baa6:	9309      	str	r3, [sp, #36]	@ 0x24
 801baa8:	e76a      	b.n	801b980 <_vfiprintf_r+0x78>
 801baaa:	fb0c 3202 	mla	r2, ip, r2, r3
 801baae:	460c      	mov	r4, r1
 801bab0:	2001      	movs	r0, #1
 801bab2:	e7a8      	b.n	801ba06 <_vfiprintf_r+0xfe>
 801bab4:	2300      	movs	r3, #0
 801bab6:	3401      	adds	r4, #1
 801bab8:	9305      	str	r3, [sp, #20]
 801baba:	4619      	mov	r1, r3
 801babc:	f04f 0c0a 	mov.w	ip, #10
 801bac0:	4620      	mov	r0, r4
 801bac2:	f810 2b01 	ldrb.w	r2, [r0], #1
 801bac6:	3a30      	subs	r2, #48	@ 0x30
 801bac8:	2a09      	cmp	r2, #9
 801baca:	d903      	bls.n	801bad4 <_vfiprintf_r+0x1cc>
 801bacc:	2b00      	cmp	r3, #0
 801bace:	d0c6      	beq.n	801ba5e <_vfiprintf_r+0x156>
 801bad0:	9105      	str	r1, [sp, #20]
 801bad2:	e7c4      	b.n	801ba5e <_vfiprintf_r+0x156>
 801bad4:	fb0c 2101 	mla	r1, ip, r1, r2
 801bad8:	4604      	mov	r4, r0
 801bada:	2301      	movs	r3, #1
 801badc:	e7f0      	b.n	801bac0 <_vfiprintf_r+0x1b8>
 801bade:	ab03      	add	r3, sp, #12
 801bae0:	9300      	str	r3, [sp, #0]
 801bae2:	462a      	mov	r2, r5
 801bae4:	4b12      	ldr	r3, [pc, #72]	@ (801bb30 <_vfiprintf_r+0x228>)
 801bae6:	a904      	add	r1, sp, #16
 801bae8:	4630      	mov	r0, r6
 801baea:	f3af 8000 	nop.w
 801baee:	4607      	mov	r7, r0
 801baf0:	1c78      	adds	r0, r7, #1
 801baf2:	d1d6      	bne.n	801baa2 <_vfiprintf_r+0x19a>
 801baf4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801baf6:	07d9      	lsls	r1, r3, #31
 801baf8:	d405      	bmi.n	801bb06 <_vfiprintf_r+0x1fe>
 801bafa:	89ab      	ldrh	r3, [r5, #12]
 801bafc:	059a      	lsls	r2, r3, #22
 801bafe:	d402      	bmi.n	801bb06 <_vfiprintf_r+0x1fe>
 801bb00:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801bb02:	f7ff fceb 	bl	801b4dc <__retarget_lock_release_recursive>
 801bb06:	89ab      	ldrh	r3, [r5, #12]
 801bb08:	065b      	lsls	r3, r3, #25
 801bb0a:	f53f af1f 	bmi.w	801b94c <_vfiprintf_r+0x44>
 801bb0e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801bb10:	e71e      	b.n	801b950 <_vfiprintf_r+0x48>
 801bb12:	ab03      	add	r3, sp, #12
 801bb14:	9300      	str	r3, [sp, #0]
 801bb16:	462a      	mov	r2, r5
 801bb18:	4b05      	ldr	r3, [pc, #20]	@ (801bb30 <_vfiprintf_r+0x228>)
 801bb1a:	a904      	add	r1, sp, #16
 801bb1c:	4630      	mov	r0, r6
 801bb1e:	f000 f879 	bl	801bc14 <_printf_i>
 801bb22:	e7e4      	b.n	801baee <_vfiprintf_r+0x1e6>
 801bb24:	0801eb8f 	.word	0x0801eb8f
 801bb28:	0801eb99 	.word	0x0801eb99
 801bb2c:	00000000 	.word	0x00000000
 801bb30:	0801b8e3 	.word	0x0801b8e3
 801bb34:	0801eb95 	.word	0x0801eb95

0801bb38 <_printf_common>:
 801bb38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801bb3c:	4616      	mov	r6, r2
 801bb3e:	4698      	mov	r8, r3
 801bb40:	688a      	ldr	r2, [r1, #8]
 801bb42:	690b      	ldr	r3, [r1, #16]
 801bb44:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801bb48:	4293      	cmp	r3, r2
 801bb4a:	bfb8      	it	lt
 801bb4c:	4613      	movlt	r3, r2
 801bb4e:	6033      	str	r3, [r6, #0]
 801bb50:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801bb54:	4607      	mov	r7, r0
 801bb56:	460c      	mov	r4, r1
 801bb58:	b10a      	cbz	r2, 801bb5e <_printf_common+0x26>
 801bb5a:	3301      	adds	r3, #1
 801bb5c:	6033      	str	r3, [r6, #0]
 801bb5e:	6823      	ldr	r3, [r4, #0]
 801bb60:	0699      	lsls	r1, r3, #26
 801bb62:	bf42      	ittt	mi
 801bb64:	6833      	ldrmi	r3, [r6, #0]
 801bb66:	3302      	addmi	r3, #2
 801bb68:	6033      	strmi	r3, [r6, #0]
 801bb6a:	6825      	ldr	r5, [r4, #0]
 801bb6c:	f015 0506 	ands.w	r5, r5, #6
 801bb70:	d106      	bne.n	801bb80 <_printf_common+0x48>
 801bb72:	f104 0a19 	add.w	sl, r4, #25
 801bb76:	68e3      	ldr	r3, [r4, #12]
 801bb78:	6832      	ldr	r2, [r6, #0]
 801bb7a:	1a9b      	subs	r3, r3, r2
 801bb7c:	42ab      	cmp	r3, r5
 801bb7e:	dc26      	bgt.n	801bbce <_printf_common+0x96>
 801bb80:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801bb84:	6822      	ldr	r2, [r4, #0]
 801bb86:	3b00      	subs	r3, #0
 801bb88:	bf18      	it	ne
 801bb8a:	2301      	movne	r3, #1
 801bb8c:	0692      	lsls	r2, r2, #26
 801bb8e:	d42b      	bmi.n	801bbe8 <_printf_common+0xb0>
 801bb90:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801bb94:	4641      	mov	r1, r8
 801bb96:	4638      	mov	r0, r7
 801bb98:	47c8      	blx	r9
 801bb9a:	3001      	adds	r0, #1
 801bb9c:	d01e      	beq.n	801bbdc <_printf_common+0xa4>
 801bb9e:	6823      	ldr	r3, [r4, #0]
 801bba0:	6922      	ldr	r2, [r4, #16]
 801bba2:	f003 0306 	and.w	r3, r3, #6
 801bba6:	2b04      	cmp	r3, #4
 801bba8:	bf02      	ittt	eq
 801bbaa:	68e5      	ldreq	r5, [r4, #12]
 801bbac:	6833      	ldreq	r3, [r6, #0]
 801bbae:	1aed      	subeq	r5, r5, r3
 801bbb0:	68a3      	ldr	r3, [r4, #8]
 801bbb2:	bf0c      	ite	eq
 801bbb4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801bbb8:	2500      	movne	r5, #0
 801bbba:	4293      	cmp	r3, r2
 801bbbc:	bfc4      	itt	gt
 801bbbe:	1a9b      	subgt	r3, r3, r2
 801bbc0:	18ed      	addgt	r5, r5, r3
 801bbc2:	2600      	movs	r6, #0
 801bbc4:	341a      	adds	r4, #26
 801bbc6:	42b5      	cmp	r5, r6
 801bbc8:	d11a      	bne.n	801bc00 <_printf_common+0xc8>
 801bbca:	2000      	movs	r0, #0
 801bbcc:	e008      	b.n	801bbe0 <_printf_common+0xa8>
 801bbce:	2301      	movs	r3, #1
 801bbd0:	4652      	mov	r2, sl
 801bbd2:	4641      	mov	r1, r8
 801bbd4:	4638      	mov	r0, r7
 801bbd6:	47c8      	blx	r9
 801bbd8:	3001      	adds	r0, #1
 801bbda:	d103      	bne.n	801bbe4 <_printf_common+0xac>
 801bbdc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801bbe0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bbe4:	3501      	adds	r5, #1
 801bbe6:	e7c6      	b.n	801bb76 <_printf_common+0x3e>
 801bbe8:	18e1      	adds	r1, r4, r3
 801bbea:	1c5a      	adds	r2, r3, #1
 801bbec:	2030      	movs	r0, #48	@ 0x30
 801bbee:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801bbf2:	4422      	add	r2, r4
 801bbf4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801bbf8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801bbfc:	3302      	adds	r3, #2
 801bbfe:	e7c7      	b.n	801bb90 <_printf_common+0x58>
 801bc00:	2301      	movs	r3, #1
 801bc02:	4622      	mov	r2, r4
 801bc04:	4641      	mov	r1, r8
 801bc06:	4638      	mov	r0, r7
 801bc08:	47c8      	blx	r9
 801bc0a:	3001      	adds	r0, #1
 801bc0c:	d0e6      	beq.n	801bbdc <_printf_common+0xa4>
 801bc0e:	3601      	adds	r6, #1
 801bc10:	e7d9      	b.n	801bbc6 <_printf_common+0x8e>
	...

0801bc14 <_printf_i>:
 801bc14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801bc18:	7e0f      	ldrb	r7, [r1, #24]
 801bc1a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801bc1c:	2f78      	cmp	r7, #120	@ 0x78
 801bc1e:	4691      	mov	r9, r2
 801bc20:	4680      	mov	r8, r0
 801bc22:	460c      	mov	r4, r1
 801bc24:	469a      	mov	sl, r3
 801bc26:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801bc2a:	d807      	bhi.n	801bc3c <_printf_i+0x28>
 801bc2c:	2f62      	cmp	r7, #98	@ 0x62
 801bc2e:	d80a      	bhi.n	801bc46 <_printf_i+0x32>
 801bc30:	2f00      	cmp	r7, #0
 801bc32:	f000 80d1 	beq.w	801bdd8 <_printf_i+0x1c4>
 801bc36:	2f58      	cmp	r7, #88	@ 0x58
 801bc38:	f000 80b8 	beq.w	801bdac <_printf_i+0x198>
 801bc3c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801bc40:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801bc44:	e03a      	b.n	801bcbc <_printf_i+0xa8>
 801bc46:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801bc4a:	2b15      	cmp	r3, #21
 801bc4c:	d8f6      	bhi.n	801bc3c <_printf_i+0x28>
 801bc4e:	a101      	add	r1, pc, #4	@ (adr r1, 801bc54 <_printf_i+0x40>)
 801bc50:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801bc54:	0801bcad 	.word	0x0801bcad
 801bc58:	0801bcc1 	.word	0x0801bcc1
 801bc5c:	0801bc3d 	.word	0x0801bc3d
 801bc60:	0801bc3d 	.word	0x0801bc3d
 801bc64:	0801bc3d 	.word	0x0801bc3d
 801bc68:	0801bc3d 	.word	0x0801bc3d
 801bc6c:	0801bcc1 	.word	0x0801bcc1
 801bc70:	0801bc3d 	.word	0x0801bc3d
 801bc74:	0801bc3d 	.word	0x0801bc3d
 801bc78:	0801bc3d 	.word	0x0801bc3d
 801bc7c:	0801bc3d 	.word	0x0801bc3d
 801bc80:	0801bdbf 	.word	0x0801bdbf
 801bc84:	0801bceb 	.word	0x0801bceb
 801bc88:	0801bd79 	.word	0x0801bd79
 801bc8c:	0801bc3d 	.word	0x0801bc3d
 801bc90:	0801bc3d 	.word	0x0801bc3d
 801bc94:	0801bde1 	.word	0x0801bde1
 801bc98:	0801bc3d 	.word	0x0801bc3d
 801bc9c:	0801bceb 	.word	0x0801bceb
 801bca0:	0801bc3d 	.word	0x0801bc3d
 801bca4:	0801bc3d 	.word	0x0801bc3d
 801bca8:	0801bd81 	.word	0x0801bd81
 801bcac:	6833      	ldr	r3, [r6, #0]
 801bcae:	1d1a      	adds	r2, r3, #4
 801bcb0:	681b      	ldr	r3, [r3, #0]
 801bcb2:	6032      	str	r2, [r6, #0]
 801bcb4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801bcb8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801bcbc:	2301      	movs	r3, #1
 801bcbe:	e09c      	b.n	801bdfa <_printf_i+0x1e6>
 801bcc0:	6833      	ldr	r3, [r6, #0]
 801bcc2:	6820      	ldr	r0, [r4, #0]
 801bcc4:	1d19      	adds	r1, r3, #4
 801bcc6:	6031      	str	r1, [r6, #0]
 801bcc8:	0606      	lsls	r6, r0, #24
 801bcca:	d501      	bpl.n	801bcd0 <_printf_i+0xbc>
 801bccc:	681d      	ldr	r5, [r3, #0]
 801bcce:	e003      	b.n	801bcd8 <_printf_i+0xc4>
 801bcd0:	0645      	lsls	r5, r0, #25
 801bcd2:	d5fb      	bpl.n	801bccc <_printf_i+0xb8>
 801bcd4:	f9b3 5000 	ldrsh.w	r5, [r3]
 801bcd8:	2d00      	cmp	r5, #0
 801bcda:	da03      	bge.n	801bce4 <_printf_i+0xd0>
 801bcdc:	232d      	movs	r3, #45	@ 0x2d
 801bcde:	426d      	negs	r5, r5
 801bce0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801bce4:	4858      	ldr	r0, [pc, #352]	@ (801be48 <_printf_i+0x234>)
 801bce6:	230a      	movs	r3, #10
 801bce8:	e011      	b.n	801bd0e <_printf_i+0xfa>
 801bcea:	6821      	ldr	r1, [r4, #0]
 801bcec:	6833      	ldr	r3, [r6, #0]
 801bcee:	0608      	lsls	r0, r1, #24
 801bcf0:	f853 5b04 	ldr.w	r5, [r3], #4
 801bcf4:	d402      	bmi.n	801bcfc <_printf_i+0xe8>
 801bcf6:	0649      	lsls	r1, r1, #25
 801bcf8:	bf48      	it	mi
 801bcfa:	b2ad      	uxthmi	r5, r5
 801bcfc:	2f6f      	cmp	r7, #111	@ 0x6f
 801bcfe:	4852      	ldr	r0, [pc, #328]	@ (801be48 <_printf_i+0x234>)
 801bd00:	6033      	str	r3, [r6, #0]
 801bd02:	bf14      	ite	ne
 801bd04:	230a      	movne	r3, #10
 801bd06:	2308      	moveq	r3, #8
 801bd08:	2100      	movs	r1, #0
 801bd0a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801bd0e:	6866      	ldr	r6, [r4, #4]
 801bd10:	60a6      	str	r6, [r4, #8]
 801bd12:	2e00      	cmp	r6, #0
 801bd14:	db05      	blt.n	801bd22 <_printf_i+0x10e>
 801bd16:	6821      	ldr	r1, [r4, #0]
 801bd18:	432e      	orrs	r6, r5
 801bd1a:	f021 0104 	bic.w	r1, r1, #4
 801bd1e:	6021      	str	r1, [r4, #0]
 801bd20:	d04b      	beq.n	801bdba <_printf_i+0x1a6>
 801bd22:	4616      	mov	r6, r2
 801bd24:	fbb5 f1f3 	udiv	r1, r5, r3
 801bd28:	fb03 5711 	mls	r7, r3, r1, r5
 801bd2c:	5dc7      	ldrb	r7, [r0, r7]
 801bd2e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801bd32:	462f      	mov	r7, r5
 801bd34:	42bb      	cmp	r3, r7
 801bd36:	460d      	mov	r5, r1
 801bd38:	d9f4      	bls.n	801bd24 <_printf_i+0x110>
 801bd3a:	2b08      	cmp	r3, #8
 801bd3c:	d10b      	bne.n	801bd56 <_printf_i+0x142>
 801bd3e:	6823      	ldr	r3, [r4, #0]
 801bd40:	07df      	lsls	r7, r3, #31
 801bd42:	d508      	bpl.n	801bd56 <_printf_i+0x142>
 801bd44:	6923      	ldr	r3, [r4, #16]
 801bd46:	6861      	ldr	r1, [r4, #4]
 801bd48:	4299      	cmp	r1, r3
 801bd4a:	bfde      	ittt	le
 801bd4c:	2330      	movle	r3, #48	@ 0x30
 801bd4e:	f806 3c01 	strble.w	r3, [r6, #-1]
 801bd52:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 801bd56:	1b92      	subs	r2, r2, r6
 801bd58:	6122      	str	r2, [r4, #16]
 801bd5a:	f8cd a000 	str.w	sl, [sp]
 801bd5e:	464b      	mov	r3, r9
 801bd60:	aa03      	add	r2, sp, #12
 801bd62:	4621      	mov	r1, r4
 801bd64:	4640      	mov	r0, r8
 801bd66:	f7ff fee7 	bl	801bb38 <_printf_common>
 801bd6a:	3001      	adds	r0, #1
 801bd6c:	d14a      	bne.n	801be04 <_printf_i+0x1f0>
 801bd6e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801bd72:	b004      	add	sp, #16
 801bd74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bd78:	6823      	ldr	r3, [r4, #0]
 801bd7a:	f043 0320 	orr.w	r3, r3, #32
 801bd7e:	6023      	str	r3, [r4, #0]
 801bd80:	4832      	ldr	r0, [pc, #200]	@ (801be4c <_printf_i+0x238>)
 801bd82:	2778      	movs	r7, #120	@ 0x78
 801bd84:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801bd88:	6823      	ldr	r3, [r4, #0]
 801bd8a:	6831      	ldr	r1, [r6, #0]
 801bd8c:	061f      	lsls	r7, r3, #24
 801bd8e:	f851 5b04 	ldr.w	r5, [r1], #4
 801bd92:	d402      	bmi.n	801bd9a <_printf_i+0x186>
 801bd94:	065f      	lsls	r7, r3, #25
 801bd96:	bf48      	it	mi
 801bd98:	b2ad      	uxthmi	r5, r5
 801bd9a:	6031      	str	r1, [r6, #0]
 801bd9c:	07d9      	lsls	r1, r3, #31
 801bd9e:	bf44      	itt	mi
 801bda0:	f043 0320 	orrmi.w	r3, r3, #32
 801bda4:	6023      	strmi	r3, [r4, #0]
 801bda6:	b11d      	cbz	r5, 801bdb0 <_printf_i+0x19c>
 801bda8:	2310      	movs	r3, #16
 801bdaa:	e7ad      	b.n	801bd08 <_printf_i+0xf4>
 801bdac:	4826      	ldr	r0, [pc, #152]	@ (801be48 <_printf_i+0x234>)
 801bdae:	e7e9      	b.n	801bd84 <_printf_i+0x170>
 801bdb0:	6823      	ldr	r3, [r4, #0]
 801bdb2:	f023 0320 	bic.w	r3, r3, #32
 801bdb6:	6023      	str	r3, [r4, #0]
 801bdb8:	e7f6      	b.n	801bda8 <_printf_i+0x194>
 801bdba:	4616      	mov	r6, r2
 801bdbc:	e7bd      	b.n	801bd3a <_printf_i+0x126>
 801bdbe:	6833      	ldr	r3, [r6, #0]
 801bdc0:	6825      	ldr	r5, [r4, #0]
 801bdc2:	6961      	ldr	r1, [r4, #20]
 801bdc4:	1d18      	adds	r0, r3, #4
 801bdc6:	6030      	str	r0, [r6, #0]
 801bdc8:	062e      	lsls	r6, r5, #24
 801bdca:	681b      	ldr	r3, [r3, #0]
 801bdcc:	d501      	bpl.n	801bdd2 <_printf_i+0x1be>
 801bdce:	6019      	str	r1, [r3, #0]
 801bdd0:	e002      	b.n	801bdd8 <_printf_i+0x1c4>
 801bdd2:	0668      	lsls	r0, r5, #25
 801bdd4:	d5fb      	bpl.n	801bdce <_printf_i+0x1ba>
 801bdd6:	8019      	strh	r1, [r3, #0]
 801bdd8:	2300      	movs	r3, #0
 801bdda:	6123      	str	r3, [r4, #16]
 801bddc:	4616      	mov	r6, r2
 801bdde:	e7bc      	b.n	801bd5a <_printf_i+0x146>
 801bde0:	6833      	ldr	r3, [r6, #0]
 801bde2:	1d1a      	adds	r2, r3, #4
 801bde4:	6032      	str	r2, [r6, #0]
 801bde6:	681e      	ldr	r6, [r3, #0]
 801bde8:	6862      	ldr	r2, [r4, #4]
 801bdea:	2100      	movs	r1, #0
 801bdec:	4630      	mov	r0, r6
 801bdee:	f7e4 fa2f 	bl	8000250 <memchr>
 801bdf2:	b108      	cbz	r0, 801bdf8 <_printf_i+0x1e4>
 801bdf4:	1b80      	subs	r0, r0, r6
 801bdf6:	6060      	str	r0, [r4, #4]
 801bdf8:	6863      	ldr	r3, [r4, #4]
 801bdfa:	6123      	str	r3, [r4, #16]
 801bdfc:	2300      	movs	r3, #0
 801bdfe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801be02:	e7aa      	b.n	801bd5a <_printf_i+0x146>
 801be04:	6923      	ldr	r3, [r4, #16]
 801be06:	4632      	mov	r2, r6
 801be08:	4649      	mov	r1, r9
 801be0a:	4640      	mov	r0, r8
 801be0c:	47d0      	blx	sl
 801be0e:	3001      	adds	r0, #1
 801be10:	d0ad      	beq.n	801bd6e <_printf_i+0x15a>
 801be12:	6823      	ldr	r3, [r4, #0]
 801be14:	079b      	lsls	r3, r3, #30
 801be16:	d413      	bmi.n	801be40 <_printf_i+0x22c>
 801be18:	68e0      	ldr	r0, [r4, #12]
 801be1a:	9b03      	ldr	r3, [sp, #12]
 801be1c:	4298      	cmp	r0, r3
 801be1e:	bfb8      	it	lt
 801be20:	4618      	movlt	r0, r3
 801be22:	e7a6      	b.n	801bd72 <_printf_i+0x15e>
 801be24:	2301      	movs	r3, #1
 801be26:	4632      	mov	r2, r6
 801be28:	4649      	mov	r1, r9
 801be2a:	4640      	mov	r0, r8
 801be2c:	47d0      	blx	sl
 801be2e:	3001      	adds	r0, #1
 801be30:	d09d      	beq.n	801bd6e <_printf_i+0x15a>
 801be32:	3501      	adds	r5, #1
 801be34:	68e3      	ldr	r3, [r4, #12]
 801be36:	9903      	ldr	r1, [sp, #12]
 801be38:	1a5b      	subs	r3, r3, r1
 801be3a:	42ab      	cmp	r3, r5
 801be3c:	dcf2      	bgt.n	801be24 <_printf_i+0x210>
 801be3e:	e7eb      	b.n	801be18 <_printf_i+0x204>
 801be40:	2500      	movs	r5, #0
 801be42:	f104 0619 	add.w	r6, r4, #25
 801be46:	e7f5      	b.n	801be34 <_printf_i+0x220>
 801be48:	0801eba0 	.word	0x0801eba0
 801be4c:	0801ebb1 	.word	0x0801ebb1

0801be50 <__sflush_r>:
 801be50:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801be54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801be58:	0716      	lsls	r6, r2, #28
 801be5a:	4605      	mov	r5, r0
 801be5c:	460c      	mov	r4, r1
 801be5e:	d454      	bmi.n	801bf0a <__sflush_r+0xba>
 801be60:	684b      	ldr	r3, [r1, #4]
 801be62:	2b00      	cmp	r3, #0
 801be64:	dc02      	bgt.n	801be6c <__sflush_r+0x1c>
 801be66:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801be68:	2b00      	cmp	r3, #0
 801be6a:	dd48      	ble.n	801befe <__sflush_r+0xae>
 801be6c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801be6e:	2e00      	cmp	r6, #0
 801be70:	d045      	beq.n	801befe <__sflush_r+0xae>
 801be72:	2300      	movs	r3, #0
 801be74:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801be78:	682f      	ldr	r7, [r5, #0]
 801be7a:	6a21      	ldr	r1, [r4, #32]
 801be7c:	602b      	str	r3, [r5, #0]
 801be7e:	d030      	beq.n	801bee2 <__sflush_r+0x92>
 801be80:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801be82:	89a3      	ldrh	r3, [r4, #12]
 801be84:	0759      	lsls	r1, r3, #29
 801be86:	d505      	bpl.n	801be94 <__sflush_r+0x44>
 801be88:	6863      	ldr	r3, [r4, #4]
 801be8a:	1ad2      	subs	r2, r2, r3
 801be8c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801be8e:	b10b      	cbz	r3, 801be94 <__sflush_r+0x44>
 801be90:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801be92:	1ad2      	subs	r2, r2, r3
 801be94:	2300      	movs	r3, #0
 801be96:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801be98:	6a21      	ldr	r1, [r4, #32]
 801be9a:	4628      	mov	r0, r5
 801be9c:	47b0      	blx	r6
 801be9e:	1c43      	adds	r3, r0, #1
 801bea0:	89a3      	ldrh	r3, [r4, #12]
 801bea2:	d106      	bne.n	801beb2 <__sflush_r+0x62>
 801bea4:	6829      	ldr	r1, [r5, #0]
 801bea6:	291d      	cmp	r1, #29
 801bea8:	d82b      	bhi.n	801bf02 <__sflush_r+0xb2>
 801beaa:	4a2a      	ldr	r2, [pc, #168]	@ (801bf54 <__sflush_r+0x104>)
 801beac:	40ca      	lsrs	r2, r1
 801beae:	07d6      	lsls	r6, r2, #31
 801beb0:	d527      	bpl.n	801bf02 <__sflush_r+0xb2>
 801beb2:	2200      	movs	r2, #0
 801beb4:	6062      	str	r2, [r4, #4]
 801beb6:	04d9      	lsls	r1, r3, #19
 801beb8:	6922      	ldr	r2, [r4, #16]
 801beba:	6022      	str	r2, [r4, #0]
 801bebc:	d504      	bpl.n	801bec8 <__sflush_r+0x78>
 801bebe:	1c42      	adds	r2, r0, #1
 801bec0:	d101      	bne.n	801bec6 <__sflush_r+0x76>
 801bec2:	682b      	ldr	r3, [r5, #0]
 801bec4:	b903      	cbnz	r3, 801bec8 <__sflush_r+0x78>
 801bec6:	6560      	str	r0, [r4, #84]	@ 0x54
 801bec8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801beca:	602f      	str	r7, [r5, #0]
 801becc:	b1b9      	cbz	r1, 801befe <__sflush_r+0xae>
 801bece:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801bed2:	4299      	cmp	r1, r3
 801bed4:	d002      	beq.n	801bedc <__sflush_r+0x8c>
 801bed6:	4628      	mov	r0, r5
 801bed8:	f7ff fb42 	bl	801b560 <_free_r>
 801bedc:	2300      	movs	r3, #0
 801bede:	6363      	str	r3, [r4, #52]	@ 0x34
 801bee0:	e00d      	b.n	801befe <__sflush_r+0xae>
 801bee2:	2301      	movs	r3, #1
 801bee4:	4628      	mov	r0, r5
 801bee6:	47b0      	blx	r6
 801bee8:	4602      	mov	r2, r0
 801beea:	1c50      	adds	r0, r2, #1
 801beec:	d1c9      	bne.n	801be82 <__sflush_r+0x32>
 801beee:	682b      	ldr	r3, [r5, #0]
 801bef0:	2b00      	cmp	r3, #0
 801bef2:	d0c6      	beq.n	801be82 <__sflush_r+0x32>
 801bef4:	2b1d      	cmp	r3, #29
 801bef6:	d001      	beq.n	801befc <__sflush_r+0xac>
 801bef8:	2b16      	cmp	r3, #22
 801befa:	d11e      	bne.n	801bf3a <__sflush_r+0xea>
 801befc:	602f      	str	r7, [r5, #0]
 801befe:	2000      	movs	r0, #0
 801bf00:	e022      	b.n	801bf48 <__sflush_r+0xf8>
 801bf02:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801bf06:	b21b      	sxth	r3, r3
 801bf08:	e01b      	b.n	801bf42 <__sflush_r+0xf2>
 801bf0a:	690f      	ldr	r7, [r1, #16]
 801bf0c:	2f00      	cmp	r7, #0
 801bf0e:	d0f6      	beq.n	801befe <__sflush_r+0xae>
 801bf10:	0793      	lsls	r3, r2, #30
 801bf12:	680e      	ldr	r6, [r1, #0]
 801bf14:	bf08      	it	eq
 801bf16:	694b      	ldreq	r3, [r1, #20]
 801bf18:	600f      	str	r7, [r1, #0]
 801bf1a:	bf18      	it	ne
 801bf1c:	2300      	movne	r3, #0
 801bf1e:	eba6 0807 	sub.w	r8, r6, r7
 801bf22:	608b      	str	r3, [r1, #8]
 801bf24:	f1b8 0f00 	cmp.w	r8, #0
 801bf28:	dde9      	ble.n	801befe <__sflush_r+0xae>
 801bf2a:	6a21      	ldr	r1, [r4, #32]
 801bf2c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801bf2e:	4643      	mov	r3, r8
 801bf30:	463a      	mov	r2, r7
 801bf32:	4628      	mov	r0, r5
 801bf34:	47b0      	blx	r6
 801bf36:	2800      	cmp	r0, #0
 801bf38:	dc08      	bgt.n	801bf4c <__sflush_r+0xfc>
 801bf3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801bf3e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801bf42:	81a3      	strh	r3, [r4, #12]
 801bf44:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801bf48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bf4c:	4407      	add	r7, r0
 801bf4e:	eba8 0800 	sub.w	r8, r8, r0
 801bf52:	e7e7      	b.n	801bf24 <__sflush_r+0xd4>
 801bf54:	20400001 	.word	0x20400001

0801bf58 <_fflush_r>:
 801bf58:	b538      	push	{r3, r4, r5, lr}
 801bf5a:	690b      	ldr	r3, [r1, #16]
 801bf5c:	4605      	mov	r5, r0
 801bf5e:	460c      	mov	r4, r1
 801bf60:	b913      	cbnz	r3, 801bf68 <_fflush_r+0x10>
 801bf62:	2500      	movs	r5, #0
 801bf64:	4628      	mov	r0, r5
 801bf66:	bd38      	pop	{r3, r4, r5, pc}
 801bf68:	b118      	cbz	r0, 801bf72 <_fflush_r+0x1a>
 801bf6a:	6a03      	ldr	r3, [r0, #32]
 801bf6c:	b90b      	cbnz	r3, 801bf72 <_fflush_r+0x1a>
 801bf6e:	f7fe ffdf 	bl	801af30 <__sinit>
 801bf72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801bf76:	2b00      	cmp	r3, #0
 801bf78:	d0f3      	beq.n	801bf62 <_fflush_r+0xa>
 801bf7a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801bf7c:	07d0      	lsls	r0, r2, #31
 801bf7e:	d404      	bmi.n	801bf8a <_fflush_r+0x32>
 801bf80:	0599      	lsls	r1, r3, #22
 801bf82:	d402      	bmi.n	801bf8a <_fflush_r+0x32>
 801bf84:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801bf86:	f7ff faa8 	bl	801b4da <__retarget_lock_acquire_recursive>
 801bf8a:	4628      	mov	r0, r5
 801bf8c:	4621      	mov	r1, r4
 801bf8e:	f7ff ff5f 	bl	801be50 <__sflush_r>
 801bf92:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801bf94:	07da      	lsls	r2, r3, #31
 801bf96:	4605      	mov	r5, r0
 801bf98:	d4e4      	bmi.n	801bf64 <_fflush_r+0xc>
 801bf9a:	89a3      	ldrh	r3, [r4, #12]
 801bf9c:	059b      	lsls	r3, r3, #22
 801bf9e:	d4e1      	bmi.n	801bf64 <_fflush_r+0xc>
 801bfa0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801bfa2:	f7ff fa9b 	bl	801b4dc <__retarget_lock_release_recursive>
 801bfa6:	e7dd      	b.n	801bf64 <_fflush_r+0xc>

0801bfa8 <fiprintf>:
 801bfa8:	b40e      	push	{r1, r2, r3}
 801bfaa:	b503      	push	{r0, r1, lr}
 801bfac:	4601      	mov	r1, r0
 801bfae:	ab03      	add	r3, sp, #12
 801bfb0:	4805      	ldr	r0, [pc, #20]	@ (801bfc8 <fiprintf+0x20>)
 801bfb2:	f853 2b04 	ldr.w	r2, [r3], #4
 801bfb6:	6800      	ldr	r0, [r0, #0]
 801bfb8:	9301      	str	r3, [sp, #4]
 801bfba:	f7ff fca5 	bl	801b908 <_vfiprintf_r>
 801bfbe:	b002      	add	sp, #8
 801bfc0:	f85d eb04 	ldr.w	lr, [sp], #4
 801bfc4:	b003      	add	sp, #12
 801bfc6:	4770      	bx	lr
 801bfc8:	20000438 	.word	0x20000438

0801bfcc <__swhatbuf_r>:
 801bfcc:	b570      	push	{r4, r5, r6, lr}
 801bfce:	460c      	mov	r4, r1
 801bfd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801bfd4:	2900      	cmp	r1, #0
 801bfd6:	b096      	sub	sp, #88	@ 0x58
 801bfd8:	4615      	mov	r5, r2
 801bfda:	461e      	mov	r6, r3
 801bfdc:	da0d      	bge.n	801bffa <__swhatbuf_r+0x2e>
 801bfde:	89a3      	ldrh	r3, [r4, #12]
 801bfe0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801bfe4:	f04f 0100 	mov.w	r1, #0
 801bfe8:	bf14      	ite	ne
 801bfea:	2340      	movne	r3, #64	@ 0x40
 801bfec:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801bff0:	2000      	movs	r0, #0
 801bff2:	6031      	str	r1, [r6, #0]
 801bff4:	602b      	str	r3, [r5, #0]
 801bff6:	b016      	add	sp, #88	@ 0x58
 801bff8:	bd70      	pop	{r4, r5, r6, pc}
 801bffa:	466a      	mov	r2, sp
 801bffc:	f000 f848 	bl	801c090 <_fstat_r>
 801c000:	2800      	cmp	r0, #0
 801c002:	dbec      	blt.n	801bfde <__swhatbuf_r+0x12>
 801c004:	9901      	ldr	r1, [sp, #4]
 801c006:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801c00a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801c00e:	4259      	negs	r1, r3
 801c010:	4159      	adcs	r1, r3
 801c012:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801c016:	e7eb      	b.n	801bff0 <__swhatbuf_r+0x24>

0801c018 <__smakebuf_r>:
 801c018:	898b      	ldrh	r3, [r1, #12]
 801c01a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801c01c:	079d      	lsls	r5, r3, #30
 801c01e:	4606      	mov	r6, r0
 801c020:	460c      	mov	r4, r1
 801c022:	d507      	bpl.n	801c034 <__smakebuf_r+0x1c>
 801c024:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801c028:	6023      	str	r3, [r4, #0]
 801c02a:	6123      	str	r3, [r4, #16]
 801c02c:	2301      	movs	r3, #1
 801c02e:	6163      	str	r3, [r4, #20]
 801c030:	b003      	add	sp, #12
 801c032:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c034:	ab01      	add	r3, sp, #4
 801c036:	466a      	mov	r2, sp
 801c038:	f7ff ffc8 	bl	801bfcc <__swhatbuf_r>
 801c03c:	9f00      	ldr	r7, [sp, #0]
 801c03e:	4605      	mov	r5, r0
 801c040:	4639      	mov	r1, r7
 801c042:	4630      	mov	r0, r6
 801c044:	f7fe fd42 	bl	801aacc <_malloc_r>
 801c048:	b948      	cbnz	r0, 801c05e <__smakebuf_r+0x46>
 801c04a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c04e:	059a      	lsls	r2, r3, #22
 801c050:	d4ee      	bmi.n	801c030 <__smakebuf_r+0x18>
 801c052:	f023 0303 	bic.w	r3, r3, #3
 801c056:	f043 0302 	orr.w	r3, r3, #2
 801c05a:	81a3      	strh	r3, [r4, #12]
 801c05c:	e7e2      	b.n	801c024 <__smakebuf_r+0xc>
 801c05e:	89a3      	ldrh	r3, [r4, #12]
 801c060:	6020      	str	r0, [r4, #0]
 801c062:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801c066:	81a3      	strh	r3, [r4, #12]
 801c068:	9b01      	ldr	r3, [sp, #4]
 801c06a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801c06e:	b15b      	cbz	r3, 801c088 <__smakebuf_r+0x70>
 801c070:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801c074:	4630      	mov	r0, r6
 801c076:	f000 f81d 	bl	801c0b4 <_isatty_r>
 801c07a:	b128      	cbz	r0, 801c088 <__smakebuf_r+0x70>
 801c07c:	89a3      	ldrh	r3, [r4, #12]
 801c07e:	f023 0303 	bic.w	r3, r3, #3
 801c082:	f043 0301 	orr.w	r3, r3, #1
 801c086:	81a3      	strh	r3, [r4, #12]
 801c088:	89a3      	ldrh	r3, [r4, #12]
 801c08a:	431d      	orrs	r5, r3
 801c08c:	81a5      	strh	r5, [r4, #12]
 801c08e:	e7cf      	b.n	801c030 <__smakebuf_r+0x18>

0801c090 <_fstat_r>:
 801c090:	b538      	push	{r3, r4, r5, lr}
 801c092:	4d07      	ldr	r5, [pc, #28]	@ (801c0b0 <_fstat_r+0x20>)
 801c094:	2300      	movs	r3, #0
 801c096:	4604      	mov	r4, r0
 801c098:	4608      	mov	r0, r1
 801c09a:	4611      	mov	r1, r2
 801c09c:	602b      	str	r3, [r5, #0]
 801c09e:	f7e7 fe0f 	bl	8003cc0 <_fstat>
 801c0a2:	1c43      	adds	r3, r0, #1
 801c0a4:	d102      	bne.n	801c0ac <_fstat_r+0x1c>
 801c0a6:	682b      	ldr	r3, [r5, #0]
 801c0a8:	b103      	cbz	r3, 801c0ac <_fstat_r+0x1c>
 801c0aa:	6023      	str	r3, [r4, #0]
 801c0ac:	bd38      	pop	{r3, r4, r5, pc}
 801c0ae:	bf00      	nop
 801c0b0:	2000b7f4 	.word	0x2000b7f4

0801c0b4 <_isatty_r>:
 801c0b4:	b538      	push	{r3, r4, r5, lr}
 801c0b6:	4d06      	ldr	r5, [pc, #24]	@ (801c0d0 <_isatty_r+0x1c>)
 801c0b8:	2300      	movs	r3, #0
 801c0ba:	4604      	mov	r4, r0
 801c0bc:	4608      	mov	r0, r1
 801c0be:	602b      	str	r3, [r5, #0]
 801c0c0:	f7e7 fe0e 	bl	8003ce0 <_isatty>
 801c0c4:	1c43      	adds	r3, r0, #1
 801c0c6:	d102      	bne.n	801c0ce <_isatty_r+0x1a>
 801c0c8:	682b      	ldr	r3, [r5, #0]
 801c0ca:	b103      	cbz	r3, 801c0ce <_isatty_r+0x1a>
 801c0cc:	6023      	str	r3, [r4, #0]
 801c0ce:	bd38      	pop	{r3, r4, r5, pc}
 801c0d0:	2000b7f4 	.word	0x2000b7f4

0801c0d4 <abort>:
 801c0d4:	b508      	push	{r3, lr}
 801c0d6:	2006      	movs	r0, #6
 801c0d8:	f000 f82c 	bl	801c134 <raise>
 801c0dc:	2001      	movs	r0, #1
 801c0de:	f7e7 fd9f 	bl	8003c20 <_exit>

0801c0e2 <_raise_r>:
 801c0e2:	291f      	cmp	r1, #31
 801c0e4:	b538      	push	{r3, r4, r5, lr}
 801c0e6:	4605      	mov	r5, r0
 801c0e8:	460c      	mov	r4, r1
 801c0ea:	d904      	bls.n	801c0f6 <_raise_r+0x14>
 801c0ec:	2316      	movs	r3, #22
 801c0ee:	6003      	str	r3, [r0, #0]
 801c0f0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801c0f4:	bd38      	pop	{r3, r4, r5, pc}
 801c0f6:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801c0f8:	b112      	cbz	r2, 801c100 <_raise_r+0x1e>
 801c0fa:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801c0fe:	b94b      	cbnz	r3, 801c114 <_raise_r+0x32>
 801c100:	4628      	mov	r0, r5
 801c102:	f000 f831 	bl	801c168 <_getpid_r>
 801c106:	4622      	mov	r2, r4
 801c108:	4601      	mov	r1, r0
 801c10a:	4628      	mov	r0, r5
 801c10c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801c110:	f000 b818 	b.w	801c144 <_kill_r>
 801c114:	2b01      	cmp	r3, #1
 801c116:	d00a      	beq.n	801c12e <_raise_r+0x4c>
 801c118:	1c59      	adds	r1, r3, #1
 801c11a:	d103      	bne.n	801c124 <_raise_r+0x42>
 801c11c:	2316      	movs	r3, #22
 801c11e:	6003      	str	r3, [r0, #0]
 801c120:	2001      	movs	r0, #1
 801c122:	e7e7      	b.n	801c0f4 <_raise_r+0x12>
 801c124:	2100      	movs	r1, #0
 801c126:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801c12a:	4620      	mov	r0, r4
 801c12c:	4798      	blx	r3
 801c12e:	2000      	movs	r0, #0
 801c130:	e7e0      	b.n	801c0f4 <_raise_r+0x12>
	...

0801c134 <raise>:
 801c134:	4b02      	ldr	r3, [pc, #8]	@ (801c140 <raise+0xc>)
 801c136:	4601      	mov	r1, r0
 801c138:	6818      	ldr	r0, [r3, #0]
 801c13a:	f7ff bfd2 	b.w	801c0e2 <_raise_r>
 801c13e:	bf00      	nop
 801c140:	20000438 	.word	0x20000438

0801c144 <_kill_r>:
 801c144:	b538      	push	{r3, r4, r5, lr}
 801c146:	4d07      	ldr	r5, [pc, #28]	@ (801c164 <_kill_r+0x20>)
 801c148:	2300      	movs	r3, #0
 801c14a:	4604      	mov	r4, r0
 801c14c:	4608      	mov	r0, r1
 801c14e:	4611      	mov	r1, r2
 801c150:	602b      	str	r3, [r5, #0]
 801c152:	f7e7 fd55 	bl	8003c00 <_kill>
 801c156:	1c43      	adds	r3, r0, #1
 801c158:	d102      	bne.n	801c160 <_kill_r+0x1c>
 801c15a:	682b      	ldr	r3, [r5, #0]
 801c15c:	b103      	cbz	r3, 801c160 <_kill_r+0x1c>
 801c15e:	6023      	str	r3, [r4, #0]
 801c160:	bd38      	pop	{r3, r4, r5, pc}
 801c162:	bf00      	nop
 801c164:	2000b7f4 	.word	0x2000b7f4

0801c168 <_getpid_r>:
 801c168:	f7e7 bd42 	b.w	8003bf0 <_getpid>

0801c16c <fmodf>:
 801c16c:	b508      	push	{r3, lr}
 801c16e:	ed2d 8b02 	vpush	{d8}
 801c172:	eef0 8a40 	vmov.f32	s17, s0
 801c176:	eeb0 8a60 	vmov.f32	s16, s1
 801c17a:	f000 f9cd 	bl	801c518 <__ieee754_fmodf>
 801c17e:	eef4 8a48 	vcmp.f32	s17, s16
 801c182:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c186:	d60c      	bvs.n	801c1a2 <fmodf+0x36>
 801c188:	eddf 8a07 	vldr	s17, [pc, #28]	@ 801c1a8 <fmodf+0x3c>
 801c18c:	eeb4 8a68 	vcmp.f32	s16, s17
 801c190:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c194:	d105      	bne.n	801c1a2 <fmodf+0x36>
 801c196:	f7ff f975 	bl	801b484 <__errno>
 801c19a:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 801c19e:	2321      	movs	r3, #33	@ 0x21
 801c1a0:	6003      	str	r3, [r0, #0]
 801c1a2:	ecbd 8b02 	vpop	{d8}
 801c1a6:	bd08      	pop	{r3, pc}
 801c1a8:	00000000 	.word	0x00000000

0801c1ac <powf>:
 801c1ac:	b508      	push	{r3, lr}
 801c1ae:	ed2d 8b04 	vpush	{d8-d9}
 801c1b2:	eeb0 8a60 	vmov.f32	s16, s1
 801c1b6:	eeb0 9a40 	vmov.f32	s18, s0
 801c1ba:	f000 fa2f 	bl	801c61c <__ieee754_powf>
 801c1be:	eeb4 8a48 	vcmp.f32	s16, s16
 801c1c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c1c6:	eef0 8a40 	vmov.f32	s17, s0
 801c1ca:	d63e      	bvs.n	801c24a <powf+0x9e>
 801c1cc:	eeb5 9a40 	vcmp.f32	s18, #0.0
 801c1d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c1d4:	d112      	bne.n	801c1fc <powf+0x50>
 801c1d6:	eeb5 8a40 	vcmp.f32	s16, #0.0
 801c1da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c1de:	d039      	beq.n	801c254 <powf+0xa8>
 801c1e0:	eeb0 0a48 	vmov.f32	s0, s16
 801c1e4:	f000 f8c4 	bl	801c370 <finitef>
 801c1e8:	b378      	cbz	r0, 801c24a <powf+0x9e>
 801c1ea:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 801c1ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c1f2:	d52a      	bpl.n	801c24a <powf+0x9e>
 801c1f4:	f7ff f946 	bl	801b484 <__errno>
 801c1f8:	2322      	movs	r3, #34	@ 0x22
 801c1fa:	e014      	b.n	801c226 <powf+0x7a>
 801c1fc:	f000 f8b8 	bl	801c370 <finitef>
 801c200:	b998      	cbnz	r0, 801c22a <powf+0x7e>
 801c202:	eeb0 0a49 	vmov.f32	s0, s18
 801c206:	f000 f8b3 	bl	801c370 <finitef>
 801c20a:	b170      	cbz	r0, 801c22a <powf+0x7e>
 801c20c:	eeb0 0a48 	vmov.f32	s0, s16
 801c210:	f000 f8ae 	bl	801c370 <finitef>
 801c214:	b148      	cbz	r0, 801c22a <powf+0x7e>
 801c216:	eef4 8a68 	vcmp.f32	s17, s17
 801c21a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c21e:	d7e9      	bvc.n	801c1f4 <powf+0x48>
 801c220:	f7ff f930 	bl	801b484 <__errno>
 801c224:	2321      	movs	r3, #33	@ 0x21
 801c226:	6003      	str	r3, [r0, #0]
 801c228:	e00f      	b.n	801c24a <powf+0x9e>
 801c22a:	eef5 8a40 	vcmp.f32	s17, #0.0
 801c22e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c232:	d10a      	bne.n	801c24a <powf+0x9e>
 801c234:	eeb0 0a49 	vmov.f32	s0, s18
 801c238:	f000 f89a 	bl	801c370 <finitef>
 801c23c:	b128      	cbz	r0, 801c24a <powf+0x9e>
 801c23e:	eeb0 0a48 	vmov.f32	s0, s16
 801c242:	f000 f895 	bl	801c370 <finitef>
 801c246:	2800      	cmp	r0, #0
 801c248:	d1d4      	bne.n	801c1f4 <powf+0x48>
 801c24a:	eeb0 0a68 	vmov.f32	s0, s17
 801c24e:	ecbd 8b04 	vpop	{d8-d9}
 801c252:	bd08      	pop	{r3, pc}
 801c254:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 801c258:	e7f7      	b.n	801c24a <powf+0x9e>
	...

0801c25c <cosf>:
 801c25c:	ee10 3a10 	vmov	r3, s0
 801c260:	b507      	push	{r0, r1, r2, lr}
 801c262:	4a1e      	ldr	r2, [pc, #120]	@ (801c2dc <cosf+0x80>)
 801c264:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801c268:	4293      	cmp	r3, r2
 801c26a:	d806      	bhi.n	801c27a <cosf+0x1e>
 801c26c:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 801c2e0 <cosf+0x84>
 801c270:	b003      	add	sp, #12
 801c272:	f85d eb04 	ldr.w	lr, [sp], #4
 801c276:	f000 b8af 	b.w	801c3d8 <__kernel_cosf>
 801c27a:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 801c27e:	d304      	bcc.n	801c28a <cosf+0x2e>
 801c280:	ee30 0a40 	vsub.f32	s0, s0, s0
 801c284:	b003      	add	sp, #12
 801c286:	f85d fb04 	ldr.w	pc, [sp], #4
 801c28a:	4668      	mov	r0, sp
 801c28c:	f000 fc94 	bl	801cbb8 <__ieee754_rem_pio2f>
 801c290:	f000 0003 	and.w	r0, r0, #3
 801c294:	2801      	cmp	r0, #1
 801c296:	d009      	beq.n	801c2ac <cosf+0x50>
 801c298:	2802      	cmp	r0, #2
 801c29a:	d010      	beq.n	801c2be <cosf+0x62>
 801c29c:	b9b0      	cbnz	r0, 801c2cc <cosf+0x70>
 801c29e:	eddd 0a01 	vldr	s1, [sp, #4]
 801c2a2:	ed9d 0a00 	vldr	s0, [sp]
 801c2a6:	f000 f897 	bl	801c3d8 <__kernel_cosf>
 801c2aa:	e7eb      	b.n	801c284 <cosf+0x28>
 801c2ac:	eddd 0a01 	vldr	s1, [sp, #4]
 801c2b0:	ed9d 0a00 	vldr	s0, [sp]
 801c2b4:	f000 f8e8 	bl	801c488 <__kernel_sinf>
 801c2b8:	eeb1 0a40 	vneg.f32	s0, s0
 801c2bc:	e7e2      	b.n	801c284 <cosf+0x28>
 801c2be:	eddd 0a01 	vldr	s1, [sp, #4]
 801c2c2:	ed9d 0a00 	vldr	s0, [sp]
 801c2c6:	f000 f887 	bl	801c3d8 <__kernel_cosf>
 801c2ca:	e7f5      	b.n	801c2b8 <cosf+0x5c>
 801c2cc:	eddd 0a01 	vldr	s1, [sp, #4]
 801c2d0:	ed9d 0a00 	vldr	s0, [sp]
 801c2d4:	2001      	movs	r0, #1
 801c2d6:	f000 f8d7 	bl	801c488 <__kernel_sinf>
 801c2da:	e7d3      	b.n	801c284 <cosf+0x28>
 801c2dc:	3f490fd8 	.word	0x3f490fd8
 801c2e0:	00000000 	.word	0x00000000

0801c2e4 <sinf>:
 801c2e4:	ee10 3a10 	vmov	r3, s0
 801c2e8:	b507      	push	{r0, r1, r2, lr}
 801c2ea:	4a1f      	ldr	r2, [pc, #124]	@ (801c368 <sinf+0x84>)
 801c2ec:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801c2f0:	4293      	cmp	r3, r2
 801c2f2:	d807      	bhi.n	801c304 <sinf+0x20>
 801c2f4:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 801c36c <sinf+0x88>
 801c2f8:	2000      	movs	r0, #0
 801c2fa:	b003      	add	sp, #12
 801c2fc:	f85d eb04 	ldr.w	lr, [sp], #4
 801c300:	f000 b8c2 	b.w	801c488 <__kernel_sinf>
 801c304:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 801c308:	d304      	bcc.n	801c314 <sinf+0x30>
 801c30a:	ee30 0a40 	vsub.f32	s0, s0, s0
 801c30e:	b003      	add	sp, #12
 801c310:	f85d fb04 	ldr.w	pc, [sp], #4
 801c314:	4668      	mov	r0, sp
 801c316:	f000 fc4f 	bl	801cbb8 <__ieee754_rem_pio2f>
 801c31a:	f000 0003 	and.w	r0, r0, #3
 801c31e:	2801      	cmp	r0, #1
 801c320:	d00a      	beq.n	801c338 <sinf+0x54>
 801c322:	2802      	cmp	r0, #2
 801c324:	d00f      	beq.n	801c346 <sinf+0x62>
 801c326:	b9c0      	cbnz	r0, 801c35a <sinf+0x76>
 801c328:	eddd 0a01 	vldr	s1, [sp, #4]
 801c32c:	ed9d 0a00 	vldr	s0, [sp]
 801c330:	2001      	movs	r0, #1
 801c332:	f000 f8a9 	bl	801c488 <__kernel_sinf>
 801c336:	e7ea      	b.n	801c30e <sinf+0x2a>
 801c338:	eddd 0a01 	vldr	s1, [sp, #4]
 801c33c:	ed9d 0a00 	vldr	s0, [sp]
 801c340:	f000 f84a 	bl	801c3d8 <__kernel_cosf>
 801c344:	e7e3      	b.n	801c30e <sinf+0x2a>
 801c346:	eddd 0a01 	vldr	s1, [sp, #4]
 801c34a:	ed9d 0a00 	vldr	s0, [sp]
 801c34e:	2001      	movs	r0, #1
 801c350:	f000 f89a 	bl	801c488 <__kernel_sinf>
 801c354:	eeb1 0a40 	vneg.f32	s0, s0
 801c358:	e7d9      	b.n	801c30e <sinf+0x2a>
 801c35a:	eddd 0a01 	vldr	s1, [sp, #4]
 801c35e:	ed9d 0a00 	vldr	s0, [sp]
 801c362:	f000 f839 	bl	801c3d8 <__kernel_cosf>
 801c366:	e7f5      	b.n	801c354 <sinf+0x70>
 801c368:	3f490fd8 	.word	0x3f490fd8
 801c36c:	00000000 	.word	0x00000000

0801c370 <finitef>:
 801c370:	ee10 3a10 	vmov	r3, s0
 801c374:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 801c378:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 801c37c:	bfac      	ite	ge
 801c37e:	2000      	movge	r0, #0
 801c380:	2001      	movlt	r0, #1
 801c382:	4770      	bx	lr

0801c384 <with_errnof>:
 801c384:	b510      	push	{r4, lr}
 801c386:	ed2d 8b02 	vpush	{d8}
 801c38a:	eeb0 8a40 	vmov.f32	s16, s0
 801c38e:	4604      	mov	r4, r0
 801c390:	f7ff f878 	bl	801b484 <__errno>
 801c394:	eeb0 0a48 	vmov.f32	s0, s16
 801c398:	ecbd 8b02 	vpop	{d8}
 801c39c:	6004      	str	r4, [r0, #0]
 801c39e:	bd10      	pop	{r4, pc}

0801c3a0 <xflowf>:
 801c3a0:	b130      	cbz	r0, 801c3b0 <xflowf+0x10>
 801c3a2:	eef1 7a40 	vneg.f32	s15, s0
 801c3a6:	ee27 0a80 	vmul.f32	s0, s15, s0
 801c3aa:	2022      	movs	r0, #34	@ 0x22
 801c3ac:	f7ff bfea 	b.w	801c384 <with_errnof>
 801c3b0:	eef0 7a40 	vmov.f32	s15, s0
 801c3b4:	e7f7      	b.n	801c3a6 <xflowf+0x6>
	...

0801c3b8 <__math_uflowf>:
 801c3b8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 801c3c0 <__math_uflowf+0x8>
 801c3bc:	f7ff bff0 	b.w	801c3a0 <xflowf>
 801c3c0:	10000000 	.word	0x10000000

0801c3c4 <__math_oflowf>:
 801c3c4:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 801c3cc <__math_oflowf+0x8>
 801c3c8:	f7ff bfea 	b.w	801c3a0 <xflowf>
 801c3cc:	70000000 	.word	0x70000000

0801c3d0 <__ieee754_sqrtf>:
 801c3d0:	eeb1 0ac0 	vsqrt.f32	s0, s0
 801c3d4:	4770      	bx	lr
	...

0801c3d8 <__kernel_cosf>:
 801c3d8:	ee10 3a10 	vmov	r3, s0
 801c3dc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801c3e0:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 801c3e4:	eef0 6a40 	vmov.f32	s13, s0
 801c3e8:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 801c3ec:	d204      	bcs.n	801c3f8 <__kernel_cosf+0x20>
 801c3ee:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 801c3f2:	ee17 2a90 	vmov	r2, s15
 801c3f6:	b342      	cbz	r2, 801c44a <__kernel_cosf+0x72>
 801c3f8:	ee26 7aa6 	vmul.f32	s14, s13, s13
 801c3fc:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 801c468 <__kernel_cosf+0x90>
 801c400:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 801c46c <__kernel_cosf+0x94>
 801c404:	4a1a      	ldr	r2, [pc, #104]	@ (801c470 <__kernel_cosf+0x98>)
 801c406:	eea7 6a27 	vfma.f32	s12, s14, s15
 801c40a:	4293      	cmp	r3, r2
 801c40c:	eddf 7a19 	vldr	s15, [pc, #100]	@ 801c474 <__kernel_cosf+0x9c>
 801c410:	eee6 7a07 	vfma.f32	s15, s12, s14
 801c414:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 801c478 <__kernel_cosf+0xa0>
 801c418:	eea7 6a87 	vfma.f32	s12, s15, s14
 801c41c:	eddf 7a17 	vldr	s15, [pc, #92]	@ 801c47c <__kernel_cosf+0xa4>
 801c420:	eee6 7a07 	vfma.f32	s15, s12, s14
 801c424:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 801c480 <__kernel_cosf+0xa8>
 801c428:	eea7 6a87 	vfma.f32	s12, s15, s14
 801c42c:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 801c430:	ee26 6a07 	vmul.f32	s12, s12, s14
 801c434:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 801c438:	eee7 0a06 	vfma.f32	s1, s14, s12
 801c43c:	ee67 7a27 	vmul.f32	s15, s14, s15
 801c440:	d804      	bhi.n	801c44c <__kernel_cosf+0x74>
 801c442:	ee77 7ae0 	vsub.f32	s15, s15, s1
 801c446:	ee30 0a67 	vsub.f32	s0, s0, s15
 801c44a:	4770      	bx	lr
 801c44c:	4a0d      	ldr	r2, [pc, #52]	@ (801c484 <__kernel_cosf+0xac>)
 801c44e:	4293      	cmp	r3, r2
 801c450:	bf9a      	itte	ls
 801c452:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 801c456:	ee07 3a10 	vmovls	s14, r3
 801c45a:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 801c45e:	ee30 0a47 	vsub.f32	s0, s0, s14
 801c462:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801c466:	e7ec      	b.n	801c442 <__kernel_cosf+0x6a>
 801c468:	ad47d74e 	.word	0xad47d74e
 801c46c:	310f74f6 	.word	0x310f74f6
 801c470:	3e999999 	.word	0x3e999999
 801c474:	b493f27c 	.word	0xb493f27c
 801c478:	37d00d01 	.word	0x37d00d01
 801c47c:	bab60b61 	.word	0xbab60b61
 801c480:	3d2aaaab 	.word	0x3d2aaaab
 801c484:	3f480000 	.word	0x3f480000

0801c488 <__kernel_sinf>:
 801c488:	ee10 3a10 	vmov	r3, s0
 801c48c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801c490:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 801c494:	d204      	bcs.n	801c4a0 <__kernel_sinf+0x18>
 801c496:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801c49a:	ee17 3a90 	vmov	r3, s15
 801c49e:	b35b      	cbz	r3, 801c4f8 <__kernel_sinf+0x70>
 801c4a0:	ee20 7a00 	vmul.f32	s14, s0, s0
 801c4a4:	eddf 7a15 	vldr	s15, [pc, #84]	@ 801c4fc <__kernel_sinf+0x74>
 801c4a8:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 801c500 <__kernel_sinf+0x78>
 801c4ac:	eea7 6a27 	vfma.f32	s12, s14, s15
 801c4b0:	eddf 7a14 	vldr	s15, [pc, #80]	@ 801c504 <__kernel_sinf+0x7c>
 801c4b4:	eee6 7a07 	vfma.f32	s15, s12, s14
 801c4b8:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 801c508 <__kernel_sinf+0x80>
 801c4bc:	eea7 6a87 	vfma.f32	s12, s15, s14
 801c4c0:	eddf 7a12 	vldr	s15, [pc, #72]	@ 801c50c <__kernel_sinf+0x84>
 801c4c4:	ee60 6a07 	vmul.f32	s13, s0, s14
 801c4c8:	eee6 7a07 	vfma.f32	s15, s12, s14
 801c4cc:	b930      	cbnz	r0, 801c4dc <__kernel_sinf+0x54>
 801c4ce:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 801c510 <__kernel_sinf+0x88>
 801c4d2:	eea7 6a27 	vfma.f32	s12, s14, s15
 801c4d6:	eea6 0a26 	vfma.f32	s0, s12, s13
 801c4da:	4770      	bx	lr
 801c4dc:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 801c4e0:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 801c4e4:	eee0 7a86 	vfma.f32	s15, s1, s12
 801c4e8:	eed7 0a87 	vfnms.f32	s1, s15, s14
 801c4ec:	eddf 7a09 	vldr	s15, [pc, #36]	@ 801c514 <__kernel_sinf+0x8c>
 801c4f0:	eee6 0aa7 	vfma.f32	s1, s13, s15
 801c4f4:	ee30 0a60 	vsub.f32	s0, s0, s1
 801c4f8:	4770      	bx	lr
 801c4fa:	bf00      	nop
 801c4fc:	2f2ec9d3 	.word	0x2f2ec9d3
 801c500:	b2d72f34 	.word	0xb2d72f34
 801c504:	3638ef1b 	.word	0x3638ef1b
 801c508:	b9500d01 	.word	0xb9500d01
 801c50c:	3c088889 	.word	0x3c088889
 801c510:	be2aaaab 	.word	0xbe2aaaab
 801c514:	3e2aaaab 	.word	0x3e2aaaab

0801c518 <__ieee754_fmodf>:
 801c518:	b570      	push	{r4, r5, r6, lr}
 801c51a:	ee10 6a90 	vmov	r6, s1
 801c51e:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 801c522:	1e5a      	subs	r2, r3, #1
 801c524:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 801c528:	d206      	bcs.n	801c538 <__ieee754_fmodf+0x20>
 801c52a:	ee10 4a10 	vmov	r4, s0
 801c52e:	f024 4100 	bic.w	r1, r4, #2147483648	@ 0x80000000
 801c532:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 801c536:	d304      	bcc.n	801c542 <__ieee754_fmodf+0x2a>
 801c538:	ee60 0a20 	vmul.f32	s1, s0, s1
 801c53c:	ee80 0aa0 	vdiv.f32	s0, s1, s1
 801c540:	bd70      	pop	{r4, r5, r6, pc}
 801c542:	4299      	cmp	r1, r3
 801c544:	dbfc      	blt.n	801c540 <__ieee754_fmodf+0x28>
 801c546:	f004 4500 	and.w	r5, r4, #2147483648	@ 0x80000000
 801c54a:	d105      	bne.n	801c558 <__ieee754_fmodf+0x40>
 801c54c:	4b32      	ldr	r3, [pc, #200]	@ (801c618 <__ieee754_fmodf+0x100>)
 801c54e:	eb03 7355 	add.w	r3, r3, r5, lsr #29
 801c552:	ed93 0a00 	vldr	s0, [r3]
 801c556:	e7f3      	b.n	801c540 <__ieee754_fmodf+0x28>
 801c558:	f014 4fff 	tst.w	r4, #2139095040	@ 0x7f800000
 801c55c:	d146      	bne.n	801c5ec <__ieee754_fmodf+0xd4>
 801c55e:	020a      	lsls	r2, r1, #8
 801c560:	f06f 007d 	mvn.w	r0, #125	@ 0x7d
 801c564:	2a00      	cmp	r2, #0
 801c566:	dc3e      	bgt.n	801c5e6 <__ieee754_fmodf+0xce>
 801c568:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 801c56c:	bf01      	itttt	eq
 801c56e:	021a      	lsleq	r2, r3, #8
 801c570:	fab2 f282 	clzeq	r2, r2
 801c574:	f1c2 22ff 	rsbeq	r2, r2, #4278255360	@ 0xff00ff00
 801c578:	f502 027f 	addeq.w	r2, r2, #16711680	@ 0xff0000
 801c57c:	bf16      	itet	ne
 801c57e:	15da      	asrne	r2, r3, #23
 801c580:	3282      	addeq	r2, #130	@ 0x82
 801c582:	3a7f      	subne	r2, #127	@ 0x7f
 801c584:	f110 0f7e 	cmn.w	r0, #126	@ 0x7e
 801c588:	bfbb      	ittet	lt
 801c58a:	f06f 047d 	mvnlt.w	r4, #125	@ 0x7d
 801c58e:	1a24      	sublt	r4, r4, r0
 801c590:	f3c4 0416 	ubfxge	r4, r4, #0, #23
 801c594:	40a1      	lsllt	r1, r4
 801c596:	bfa8      	it	ge
 801c598:	f444 0100 	orrge.w	r1, r4, #8388608	@ 0x800000
 801c59c:	f112 0f7e 	cmn.w	r2, #126	@ 0x7e
 801c5a0:	bfb5      	itete	lt
 801c5a2:	f06f 047d 	mvnlt.w	r4, #125	@ 0x7d
 801c5a6:	f3c6 0616 	ubfxge	r6, r6, #0, #23
 801c5aa:	1aa4      	sublt	r4, r4, r2
 801c5ac:	f446 0400 	orrge.w	r4, r6, #8388608	@ 0x800000
 801c5b0:	bfb8      	it	lt
 801c5b2:	fa03 f404 	lsllt.w	r4, r3, r4
 801c5b6:	1a80      	subs	r0, r0, r2
 801c5b8:	1b0b      	subs	r3, r1, r4
 801c5ba:	b9d0      	cbnz	r0, 801c5f2 <__ieee754_fmodf+0xda>
 801c5bc:	ea33 0323 	bics.w	r3, r3, r3, asr #32
 801c5c0:	bf28      	it	cs
 801c5c2:	460b      	movcs	r3, r1
 801c5c4:	2b00      	cmp	r3, #0
 801c5c6:	d0c1      	beq.n	801c54c <__ieee754_fmodf+0x34>
 801c5c8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 801c5cc:	db19      	blt.n	801c602 <__ieee754_fmodf+0xea>
 801c5ce:	f112 0f7e 	cmn.w	r2, #126	@ 0x7e
 801c5d2:	db19      	blt.n	801c608 <__ieee754_fmodf+0xf0>
 801c5d4:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 801c5d8:	327f      	adds	r2, #127	@ 0x7f
 801c5da:	432b      	orrs	r3, r5
 801c5dc:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 801c5e0:	ee00 3a10 	vmov	s0, r3
 801c5e4:	e7ac      	b.n	801c540 <__ieee754_fmodf+0x28>
 801c5e6:	3801      	subs	r0, #1
 801c5e8:	0052      	lsls	r2, r2, #1
 801c5ea:	e7bb      	b.n	801c564 <__ieee754_fmodf+0x4c>
 801c5ec:	15c8      	asrs	r0, r1, #23
 801c5ee:	387f      	subs	r0, #127	@ 0x7f
 801c5f0:	e7ba      	b.n	801c568 <__ieee754_fmodf+0x50>
 801c5f2:	2b00      	cmp	r3, #0
 801c5f4:	da02      	bge.n	801c5fc <__ieee754_fmodf+0xe4>
 801c5f6:	0049      	lsls	r1, r1, #1
 801c5f8:	3801      	subs	r0, #1
 801c5fa:	e7dd      	b.n	801c5b8 <__ieee754_fmodf+0xa0>
 801c5fc:	d0a6      	beq.n	801c54c <__ieee754_fmodf+0x34>
 801c5fe:	0059      	lsls	r1, r3, #1
 801c600:	e7fa      	b.n	801c5f8 <__ieee754_fmodf+0xe0>
 801c602:	005b      	lsls	r3, r3, #1
 801c604:	3a01      	subs	r2, #1
 801c606:	e7df      	b.n	801c5c8 <__ieee754_fmodf+0xb0>
 801c608:	f1c2 22ff 	rsb	r2, r2, #4278255360	@ 0xff00ff00
 801c60c:	f502 027f 	add.w	r2, r2, #16711680	@ 0xff0000
 801c610:	3282      	adds	r2, #130	@ 0x82
 801c612:	4113      	asrs	r3, r2
 801c614:	432b      	orrs	r3, r5
 801c616:	e7e3      	b.n	801c5e0 <__ieee754_fmodf+0xc8>
 801c618:	0801ecc4 	.word	0x0801ecc4

0801c61c <__ieee754_powf>:
 801c61c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c620:	ee10 4a90 	vmov	r4, s1
 801c624:	f034 4900 	bics.w	r9, r4, #2147483648	@ 0x80000000
 801c628:	ed2d 8b02 	vpush	{d8}
 801c62c:	ee10 6a10 	vmov	r6, s0
 801c630:	eeb0 8a40 	vmov.f32	s16, s0
 801c634:	eef0 8a60 	vmov.f32	s17, s1
 801c638:	d10c      	bne.n	801c654 <__ieee754_powf+0x38>
 801c63a:	f486 0680 	eor.w	r6, r6, #4194304	@ 0x400000
 801c63e:	0076      	lsls	r6, r6, #1
 801c640:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 801c644:	f240 8274 	bls.w	801cb30 <__ieee754_powf+0x514>
 801c648:	ee38 0a28 	vadd.f32	s0, s16, s17
 801c64c:	ecbd 8b02 	vpop	{d8}
 801c650:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c654:	f026 4800 	bic.w	r8, r6, #2147483648	@ 0x80000000
 801c658:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 801c65c:	d802      	bhi.n	801c664 <__ieee754_powf+0x48>
 801c65e:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 801c662:	d908      	bls.n	801c676 <__ieee754_powf+0x5a>
 801c664:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 801c668:	d1ee      	bne.n	801c648 <__ieee754_powf+0x2c>
 801c66a:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 801c66e:	0064      	lsls	r4, r4, #1
 801c670:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 801c674:	e7e6      	b.n	801c644 <__ieee754_powf+0x28>
 801c676:	2e00      	cmp	r6, #0
 801c678:	da1f      	bge.n	801c6ba <__ieee754_powf+0x9e>
 801c67a:	f1b9 4f97 	cmp.w	r9, #1266679808	@ 0x4b800000
 801c67e:	f080 8260 	bcs.w	801cb42 <__ieee754_powf+0x526>
 801c682:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 801c686:	d32f      	bcc.n	801c6e8 <__ieee754_powf+0xcc>
 801c688:	ea4f 53e9 	mov.w	r3, r9, asr #23
 801c68c:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 801c690:	fa49 f503 	asr.w	r5, r9, r3
 801c694:	fa05 f303 	lsl.w	r3, r5, r3
 801c698:	454b      	cmp	r3, r9
 801c69a:	d123      	bne.n	801c6e4 <__ieee754_powf+0xc8>
 801c69c:	f005 0501 	and.w	r5, r5, #1
 801c6a0:	f1c5 0502 	rsb	r5, r5, #2
 801c6a4:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 801c6a8:	d11f      	bne.n	801c6ea <__ieee754_powf+0xce>
 801c6aa:	2c00      	cmp	r4, #0
 801c6ac:	f280 8246 	bge.w	801cb3c <__ieee754_powf+0x520>
 801c6b0:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 801c6b4:	ee87 0a88 	vdiv.f32	s0, s15, s16
 801c6b8:	e7c8      	b.n	801c64c <__ieee754_powf+0x30>
 801c6ba:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 801c6be:	d111      	bne.n	801c6e4 <__ieee754_powf+0xc8>
 801c6c0:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 801c6c4:	f000 8234 	beq.w	801cb30 <__ieee754_powf+0x514>
 801c6c8:	d906      	bls.n	801c6d8 <__ieee754_powf+0xbc>
 801c6ca:	ed9f 0ac5 	vldr	s0, [pc, #788]	@ 801c9e0 <__ieee754_powf+0x3c4>
 801c6ce:	2c00      	cmp	r4, #0
 801c6d0:	bfa8      	it	ge
 801c6d2:	eeb0 0a68 	vmovge.f32	s0, s17
 801c6d6:	e7b9      	b.n	801c64c <__ieee754_powf+0x30>
 801c6d8:	2c00      	cmp	r4, #0
 801c6da:	f280 822c 	bge.w	801cb36 <__ieee754_powf+0x51a>
 801c6de:	eeb1 0a68 	vneg.f32	s0, s17
 801c6e2:	e7b3      	b.n	801c64c <__ieee754_powf+0x30>
 801c6e4:	2500      	movs	r5, #0
 801c6e6:	e7dd      	b.n	801c6a4 <__ieee754_powf+0x88>
 801c6e8:	2500      	movs	r5, #0
 801c6ea:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 801c6ee:	d102      	bne.n	801c6f6 <__ieee754_powf+0xda>
 801c6f0:	ee28 0a08 	vmul.f32	s0, s16, s16
 801c6f4:	e7aa      	b.n	801c64c <__ieee754_powf+0x30>
 801c6f6:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 801c6fa:	f040 8227 	bne.w	801cb4c <__ieee754_powf+0x530>
 801c6fe:	2e00      	cmp	r6, #0
 801c700:	f2c0 8224 	blt.w	801cb4c <__ieee754_powf+0x530>
 801c704:	eeb0 0a48 	vmov.f32	s0, s16
 801c708:	ecbd 8b02 	vpop	{d8}
 801c70c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c710:	f7ff be5e 	b.w	801c3d0 <__ieee754_sqrtf>
 801c714:	2d01      	cmp	r5, #1
 801c716:	d199      	bne.n	801c64c <__ieee754_powf+0x30>
 801c718:	eeb1 0a40 	vneg.f32	s0, s0
 801c71c:	e796      	b.n	801c64c <__ieee754_powf+0x30>
 801c71e:	0ff0      	lsrs	r0, r6, #31
 801c720:	3801      	subs	r0, #1
 801c722:	ea55 0300 	orrs.w	r3, r5, r0
 801c726:	d104      	bne.n	801c732 <__ieee754_powf+0x116>
 801c728:	ee38 8a48 	vsub.f32	s16, s16, s16
 801c72c:	ee88 0a08 	vdiv.f32	s0, s16, s16
 801c730:	e78c      	b.n	801c64c <__ieee754_powf+0x30>
 801c732:	f1b9 4f9a 	cmp.w	r9, #1291845632	@ 0x4d000000
 801c736:	d96d      	bls.n	801c814 <__ieee754_powf+0x1f8>
 801c738:	4baa      	ldr	r3, [pc, #680]	@ (801c9e4 <__ieee754_powf+0x3c8>)
 801c73a:	4598      	cmp	r8, r3
 801c73c:	d808      	bhi.n	801c750 <__ieee754_powf+0x134>
 801c73e:	2c00      	cmp	r4, #0
 801c740:	da0b      	bge.n	801c75a <__ieee754_powf+0x13e>
 801c742:	2000      	movs	r0, #0
 801c744:	ecbd 8b02 	vpop	{d8}
 801c748:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c74c:	f7ff be3a 	b.w	801c3c4 <__math_oflowf>
 801c750:	4ba5      	ldr	r3, [pc, #660]	@ (801c9e8 <__ieee754_powf+0x3cc>)
 801c752:	4598      	cmp	r8, r3
 801c754:	d908      	bls.n	801c768 <__ieee754_powf+0x14c>
 801c756:	2c00      	cmp	r4, #0
 801c758:	dcf3      	bgt.n	801c742 <__ieee754_powf+0x126>
 801c75a:	2000      	movs	r0, #0
 801c75c:	ecbd 8b02 	vpop	{d8}
 801c760:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c764:	f7ff be28 	b.w	801c3b8 <__math_uflowf>
 801c768:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 801c76c:	ee30 0a67 	vsub.f32	s0, s0, s15
 801c770:	eddf 6a9e 	vldr	s13, [pc, #632]	@ 801c9ec <__ieee754_powf+0x3d0>
 801c774:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 801c778:	eee0 6a67 	vfms.f32	s13, s0, s15
 801c77c:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 801c780:	eee6 7ac0 	vfms.f32	s15, s13, s0
 801c784:	ee20 7a00 	vmul.f32	s14, s0, s0
 801c788:	eddf 6a99 	vldr	s13, [pc, #612]	@ 801c9f0 <__ieee754_powf+0x3d4>
 801c78c:	ee27 7a27 	vmul.f32	s14, s14, s15
 801c790:	eddf 7a98 	vldr	s15, [pc, #608]	@ 801c9f4 <__ieee754_powf+0x3d8>
 801c794:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 801c798:	ed9f 7a97 	vldr	s14, [pc, #604]	@ 801c9f8 <__ieee754_powf+0x3dc>
 801c79c:	eee0 7a07 	vfma.f32	s15, s0, s14
 801c7a0:	eeb0 7a67 	vmov.f32	s14, s15
 801c7a4:	eea0 7a26 	vfma.f32	s14, s0, s13
 801c7a8:	ee17 3a10 	vmov	r3, s14
 801c7ac:	f36f 030b 	bfc	r3, #0, #12
 801c7b0:	ee07 3a10 	vmov	s14, r3
 801c7b4:	eeb0 6a47 	vmov.f32	s12, s14
 801c7b8:	eea0 6a66 	vfms.f32	s12, s0, s13
 801c7bc:	ee77 7ac6 	vsub.f32	s15, s15, s12
 801c7c0:	3d01      	subs	r5, #1
 801c7c2:	4305      	orrs	r5, r0
 801c7c4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801c7c8:	eebf 8a00 	vmov.f32	s16, #240	@ 0xbf800000 -1.0
 801c7cc:	f36f 040b 	bfc	r4, #0, #12
 801c7d0:	bf18      	it	ne
 801c7d2:	eeb0 8a66 	vmovne.f32	s16, s13
 801c7d6:	ee06 4a90 	vmov	s13, r4
 801c7da:	ee67 0aa8 	vmul.f32	s1, s15, s17
 801c7de:	ee38 6ae6 	vsub.f32	s12, s17, s13
 801c7e2:	ee67 7a26 	vmul.f32	s15, s14, s13
 801c7e6:	eee6 0a07 	vfma.f32	s1, s12, s14
 801c7ea:	ee30 7aa7 	vadd.f32	s14, s1, s15
 801c7ee:	ee17 1a10 	vmov	r1, s14
 801c7f2:	2900      	cmp	r1, #0
 801c7f4:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801c7f8:	f340 80dd 	ble.w	801c9b6 <__ieee754_powf+0x39a>
 801c7fc:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 801c800:	f240 80ca 	bls.w	801c998 <__ieee754_powf+0x37c>
 801c804:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 801c808:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c80c:	bf4c      	ite	mi
 801c80e:	2001      	movmi	r0, #1
 801c810:	2000      	movpl	r0, #0
 801c812:	e797      	b.n	801c744 <__ieee754_powf+0x128>
 801c814:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 801c818:	bf01      	itttt	eq
 801c81a:	eddf 7a78 	vldreq	s15, [pc, #480]	@ 801c9fc <__ieee754_powf+0x3e0>
 801c81e:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 801c822:	f06f 0317 	mvneq.w	r3, #23
 801c826:	ee17 7a90 	vmoveq	r7, s15
 801c82a:	ea4f 52e7 	mov.w	r2, r7, asr #23
 801c82e:	bf18      	it	ne
 801c830:	2300      	movne	r3, #0
 801c832:	3a7f      	subs	r2, #127	@ 0x7f
 801c834:	441a      	add	r2, r3
 801c836:	4b72      	ldr	r3, [pc, #456]	@ (801ca00 <__ieee754_powf+0x3e4>)
 801c838:	f3c7 0716 	ubfx	r7, r7, #0, #23
 801c83c:	429f      	cmp	r7, r3
 801c83e:	f047 517e 	orr.w	r1, r7, #1065353216	@ 0x3f800000
 801c842:	dd06      	ble.n	801c852 <__ieee754_powf+0x236>
 801c844:	4b6f      	ldr	r3, [pc, #444]	@ (801ca04 <__ieee754_powf+0x3e8>)
 801c846:	429f      	cmp	r7, r3
 801c848:	f340 80a4 	ble.w	801c994 <__ieee754_powf+0x378>
 801c84c:	3201      	adds	r2, #1
 801c84e:	f5a1 0100 	sub.w	r1, r1, #8388608	@ 0x800000
 801c852:	2600      	movs	r6, #0
 801c854:	4b6c      	ldr	r3, [pc, #432]	@ (801ca08 <__ieee754_powf+0x3ec>)
 801c856:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 801c85a:	ee07 1a10 	vmov	s14, r1
 801c85e:	edd3 5a00 	vldr	s11, [r3]
 801c862:	4b6a      	ldr	r3, [pc, #424]	@ (801ca0c <__ieee754_powf+0x3f0>)
 801c864:	ee75 7a87 	vadd.f32	s15, s11, s14
 801c868:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801c86c:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 801c870:	1049      	asrs	r1, r1, #1
 801c872:	f041 5100 	orr.w	r1, r1, #536870912	@ 0x20000000
 801c876:	f501 2180 	add.w	r1, r1, #262144	@ 0x40000
 801c87a:	eb01 5146 	add.w	r1, r1, r6, lsl #21
 801c87e:	ee37 6a65 	vsub.f32	s12, s14, s11
 801c882:	ee07 1a90 	vmov	s15, r1
 801c886:	ee26 5a24 	vmul.f32	s10, s12, s9
 801c88a:	ee77 5ae5 	vsub.f32	s11, s15, s11
 801c88e:	ee15 7a10 	vmov	r7, s10
 801c892:	401f      	ands	r7, r3
 801c894:	ee06 7a90 	vmov	s13, r7
 801c898:	eea6 6ae7 	vfms.f32	s12, s13, s15
 801c89c:	ee37 7a65 	vsub.f32	s14, s14, s11
 801c8a0:	ee65 7a05 	vmul.f32	s15, s10, s10
 801c8a4:	eea6 6ac7 	vfms.f32	s12, s13, s14
 801c8a8:	eddf 5a59 	vldr	s11, [pc, #356]	@ 801ca10 <__ieee754_powf+0x3f4>
 801c8ac:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 801ca14 <__ieee754_powf+0x3f8>
 801c8b0:	eee7 5a87 	vfma.f32	s11, s15, s14
 801c8b4:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 801ca18 <__ieee754_powf+0x3fc>
 801c8b8:	eea5 7aa7 	vfma.f32	s14, s11, s15
 801c8bc:	eddf 5a4b 	vldr	s11, [pc, #300]	@ 801c9ec <__ieee754_powf+0x3d0>
 801c8c0:	eee7 5a27 	vfma.f32	s11, s14, s15
 801c8c4:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 801ca1c <__ieee754_powf+0x400>
 801c8c8:	eea5 7aa7 	vfma.f32	s14, s11, s15
 801c8cc:	eddf 5a54 	vldr	s11, [pc, #336]	@ 801ca20 <__ieee754_powf+0x404>
 801c8d0:	ee26 6a24 	vmul.f32	s12, s12, s9
 801c8d4:	eee7 5a27 	vfma.f32	s11, s14, s15
 801c8d8:	ee35 7a26 	vadd.f32	s14, s10, s13
 801c8dc:	ee67 4aa7 	vmul.f32	s9, s15, s15
 801c8e0:	ee27 7a06 	vmul.f32	s14, s14, s12
 801c8e4:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 801c8e8:	eea4 7aa5 	vfma.f32	s14, s9, s11
 801c8ec:	eef0 5a67 	vmov.f32	s11, s15
 801c8f0:	eee6 5aa6 	vfma.f32	s11, s13, s13
 801c8f4:	ee75 5a87 	vadd.f32	s11, s11, s14
 801c8f8:	ee15 1a90 	vmov	r1, s11
 801c8fc:	4019      	ands	r1, r3
 801c8fe:	ee05 1a90 	vmov	s11, r1
 801c902:	ee75 7ae7 	vsub.f32	s15, s11, s15
 801c906:	eee6 7ae6 	vfms.f32	s15, s13, s13
 801c90a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801c90e:	ee67 7a85 	vmul.f32	s15, s15, s10
 801c912:	eee6 7a25 	vfma.f32	s15, s12, s11
 801c916:	eeb0 6a67 	vmov.f32	s12, s15
 801c91a:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801c91e:	ee16 1a10 	vmov	r1, s12
 801c922:	4019      	ands	r1, r3
 801c924:	ee06 1a10 	vmov	s12, r1
 801c928:	eeb0 7a46 	vmov.f32	s14, s12
 801c92c:	eea6 7ae5 	vfms.f32	s14, s13, s11
 801c930:	493c      	ldr	r1, [pc, #240]	@ (801ca24 <__ieee754_powf+0x408>)
 801c932:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 801c936:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801c93a:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 801ca28 <__ieee754_powf+0x40c>
 801c93e:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 801ca2c <__ieee754_powf+0x410>
 801c942:	ee67 7a87 	vmul.f32	s15, s15, s14
 801c946:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 801ca30 <__ieee754_powf+0x414>
 801c94a:	eee6 7a07 	vfma.f32	s15, s12, s14
 801c94e:	ed91 7a00 	vldr	s14, [r1]
 801c952:	ee77 7a87 	vadd.f32	s15, s15, s14
 801c956:	ee07 2a10 	vmov	s14, r2
 801c95a:	4a36      	ldr	r2, [pc, #216]	@ (801ca34 <__ieee754_powf+0x418>)
 801c95c:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 801c960:	eeb0 7a67 	vmov.f32	s14, s15
 801c964:	eea6 7a25 	vfma.f32	s14, s12, s11
 801c968:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 801c96c:	ed92 5a00 	vldr	s10, [r2]
 801c970:	ee37 7a05 	vadd.f32	s14, s14, s10
 801c974:	ee37 7a26 	vadd.f32	s14, s14, s13
 801c978:	ee17 2a10 	vmov	r2, s14
 801c97c:	401a      	ands	r2, r3
 801c97e:	ee07 2a10 	vmov	s14, r2
 801c982:	ee77 6a66 	vsub.f32	s13, s14, s13
 801c986:	ee76 6ac5 	vsub.f32	s13, s13, s10
 801c98a:	eee6 6a65 	vfms.f32	s13, s12, s11
 801c98e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801c992:	e715      	b.n	801c7c0 <__ieee754_powf+0x1a4>
 801c994:	2601      	movs	r6, #1
 801c996:	e75d      	b.n	801c854 <__ieee754_powf+0x238>
 801c998:	d152      	bne.n	801ca40 <__ieee754_powf+0x424>
 801c99a:	eddf 6a27 	vldr	s13, [pc, #156]	@ 801ca38 <__ieee754_powf+0x41c>
 801c99e:	ee37 7a67 	vsub.f32	s14, s14, s15
 801c9a2:	ee70 6aa6 	vadd.f32	s13, s1, s13
 801c9a6:	eef4 6ac7 	vcmpe.f32	s13, s14
 801c9aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c9ae:	f73f af29 	bgt.w	801c804 <__ieee754_powf+0x1e8>
 801c9b2:	2386      	movs	r3, #134	@ 0x86
 801c9b4:	e048      	b.n	801ca48 <__ieee754_powf+0x42c>
 801c9b6:	4a21      	ldr	r2, [pc, #132]	@ (801ca3c <__ieee754_powf+0x420>)
 801c9b8:	4293      	cmp	r3, r2
 801c9ba:	d907      	bls.n	801c9cc <__ieee754_powf+0x3b0>
 801c9bc:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 801c9c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c9c4:	bf4c      	ite	mi
 801c9c6:	2001      	movmi	r0, #1
 801c9c8:	2000      	movpl	r0, #0
 801c9ca:	e6c7      	b.n	801c75c <__ieee754_powf+0x140>
 801c9cc:	d138      	bne.n	801ca40 <__ieee754_powf+0x424>
 801c9ce:	ee37 7a67 	vsub.f32	s14, s14, s15
 801c9d2:	eeb4 7ae0 	vcmpe.f32	s14, s1
 801c9d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c9da:	dbea      	blt.n	801c9b2 <__ieee754_powf+0x396>
 801c9dc:	e7ee      	b.n	801c9bc <__ieee754_powf+0x3a0>
 801c9de:	bf00      	nop
 801c9e0:	00000000 	.word	0x00000000
 801c9e4:	3f7ffff3 	.word	0x3f7ffff3
 801c9e8:	3f800007 	.word	0x3f800007
 801c9ec:	3eaaaaab 	.word	0x3eaaaaab
 801c9f0:	3fb8aa00 	.word	0x3fb8aa00
 801c9f4:	3fb8aa3b 	.word	0x3fb8aa3b
 801c9f8:	36eca570 	.word	0x36eca570
 801c9fc:	4b800000 	.word	0x4b800000
 801ca00:	001cc471 	.word	0x001cc471
 801ca04:	005db3d6 	.word	0x005db3d6
 801ca08:	0801ecdc 	.word	0x0801ecdc
 801ca0c:	fffff000 	.word	0xfffff000
 801ca10:	3e6c3255 	.word	0x3e6c3255
 801ca14:	3e53f142 	.word	0x3e53f142
 801ca18:	3e8ba305 	.word	0x3e8ba305
 801ca1c:	3edb6db7 	.word	0x3edb6db7
 801ca20:	3f19999a 	.word	0x3f19999a
 801ca24:	0801eccc 	.word	0x0801eccc
 801ca28:	3f76384f 	.word	0x3f76384f
 801ca2c:	3f763800 	.word	0x3f763800
 801ca30:	369dc3a0 	.word	0x369dc3a0
 801ca34:	0801ecd4 	.word	0x0801ecd4
 801ca38:	3338aa3c 	.word	0x3338aa3c
 801ca3c:	43160000 	.word	0x43160000
 801ca40:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 801ca44:	d96f      	bls.n	801cb26 <__ieee754_powf+0x50a>
 801ca46:	15db      	asrs	r3, r3, #23
 801ca48:	3b7e      	subs	r3, #126	@ 0x7e
 801ca4a:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 801ca4e:	4118      	asrs	r0, r3
 801ca50:	4408      	add	r0, r1
 801ca52:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 801ca56:	4a4e      	ldr	r2, [pc, #312]	@ (801cb90 <__ieee754_powf+0x574>)
 801ca58:	3b7f      	subs	r3, #127	@ 0x7f
 801ca5a:	411a      	asrs	r2, r3
 801ca5c:	4002      	ands	r2, r0
 801ca5e:	ee07 2a10 	vmov	s14, r2
 801ca62:	f3c0 0016 	ubfx	r0, r0, #0, #23
 801ca66:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 801ca6a:	f1c3 0317 	rsb	r3, r3, #23
 801ca6e:	4118      	asrs	r0, r3
 801ca70:	2900      	cmp	r1, #0
 801ca72:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801ca76:	bfb8      	it	lt
 801ca78:	4240      	neglt	r0, r0
 801ca7a:	ee77 6aa0 	vadd.f32	s13, s15, s1
 801ca7e:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 801cb94 <__ieee754_powf+0x578>
 801ca82:	ed9f 6a45 	vldr	s12, [pc, #276]	@ 801cb98 <__ieee754_powf+0x57c>
 801ca86:	ee16 3a90 	vmov	r3, s13
 801ca8a:	f36f 030b 	bfc	r3, #0, #12
 801ca8e:	ee06 3a90 	vmov	s13, r3
 801ca92:	ee76 7ae7 	vsub.f32	s15, s13, s15
 801ca96:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 801ca9a:	ee70 0ae7 	vsub.f32	s1, s1, s15
 801ca9e:	eddf 7a3f 	vldr	s15, [pc, #252]	@ 801cb9c <__ieee754_powf+0x580>
 801caa2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801caa6:	eee0 7a87 	vfma.f32	s15, s1, s14
 801caaa:	eeb0 7a67 	vmov.f32	s14, s15
 801caae:	eea6 7a86 	vfma.f32	s14, s13, s12
 801cab2:	eef0 5a47 	vmov.f32	s11, s14
 801cab6:	eee6 5ac6 	vfms.f32	s11, s13, s12
 801caba:	ee67 6a07 	vmul.f32	s13, s14, s14
 801cabe:	ee77 7ae5 	vsub.f32	s15, s15, s11
 801cac2:	ed9f 6a37 	vldr	s12, [pc, #220]	@ 801cba0 <__ieee754_powf+0x584>
 801cac6:	eddf 5a37 	vldr	s11, [pc, #220]	@ 801cba4 <__ieee754_powf+0x588>
 801caca:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801cace:	eddf 5a36 	vldr	s11, [pc, #216]	@ 801cba8 <__ieee754_powf+0x58c>
 801cad2:	eee6 5a26 	vfma.f32	s11, s12, s13
 801cad6:	ed9f 6a35 	vldr	s12, [pc, #212]	@ 801cbac <__ieee754_powf+0x590>
 801cada:	eea5 6aa6 	vfma.f32	s12, s11, s13
 801cade:	eddf 5a34 	vldr	s11, [pc, #208]	@ 801cbb0 <__ieee754_powf+0x594>
 801cae2:	eee6 5a26 	vfma.f32	s11, s12, s13
 801cae6:	eeb0 6a47 	vmov.f32	s12, s14
 801caea:	eea5 6ae6 	vfms.f32	s12, s11, s13
 801caee:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 801caf2:	ee67 5a06 	vmul.f32	s11, s14, s12
 801caf6:	ee36 6a66 	vsub.f32	s12, s12, s13
 801cafa:	eee7 7a27 	vfma.f32	s15, s14, s15
 801cafe:	eec5 6a86 	vdiv.f32	s13, s11, s12
 801cb02:	ee76 7ae7 	vsub.f32	s15, s13, s15
 801cb06:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801cb0a:	ee30 0a67 	vsub.f32	s0, s0, s15
 801cb0e:	ee10 3a10 	vmov	r3, s0
 801cb12:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 801cb16:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 801cb1a:	da06      	bge.n	801cb2a <__ieee754_powf+0x50e>
 801cb1c:	f000 f984 	bl	801ce28 <scalbnf>
 801cb20:	ee20 0a08 	vmul.f32	s0, s0, s16
 801cb24:	e592      	b.n	801c64c <__ieee754_powf+0x30>
 801cb26:	2000      	movs	r0, #0
 801cb28:	e7a7      	b.n	801ca7a <__ieee754_powf+0x45e>
 801cb2a:	ee00 3a10 	vmov	s0, r3
 801cb2e:	e7f7      	b.n	801cb20 <__ieee754_powf+0x504>
 801cb30:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 801cb34:	e58a      	b.n	801c64c <__ieee754_powf+0x30>
 801cb36:	ed9f 0a1f 	vldr	s0, [pc, #124]	@ 801cbb4 <__ieee754_powf+0x598>
 801cb3a:	e587      	b.n	801c64c <__ieee754_powf+0x30>
 801cb3c:	eeb0 0a48 	vmov.f32	s0, s16
 801cb40:	e584      	b.n	801c64c <__ieee754_powf+0x30>
 801cb42:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 801cb46:	f43f adbb 	beq.w	801c6c0 <__ieee754_powf+0xa4>
 801cb4a:	2502      	movs	r5, #2
 801cb4c:	eeb0 0a48 	vmov.f32	s0, s16
 801cb50:	f000 f962 	bl	801ce18 <fabsf>
 801cb54:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 801cb58:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 801cb5c:	4647      	mov	r7, r8
 801cb5e:	d003      	beq.n	801cb68 <__ieee754_powf+0x54c>
 801cb60:	f1b8 0f00 	cmp.w	r8, #0
 801cb64:	f47f addb 	bne.w	801c71e <__ieee754_powf+0x102>
 801cb68:	2c00      	cmp	r4, #0
 801cb6a:	bfbc      	itt	lt
 801cb6c:	eef7 7a00 	vmovlt.f32	s15, #112	@ 0x3f800000  1.0
 801cb70:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 801cb74:	2e00      	cmp	r6, #0
 801cb76:	f6bf ad69 	bge.w	801c64c <__ieee754_powf+0x30>
 801cb7a:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 801cb7e:	ea58 0805 	orrs.w	r8, r8, r5
 801cb82:	f47f adc7 	bne.w	801c714 <__ieee754_powf+0xf8>
 801cb86:	ee70 7a40 	vsub.f32	s15, s0, s0
 801cb8a:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 801cb8e:	e55d      	b.n	801c64c <__ieee754_powf+0x30>
 801cb90:	ff800000 	.word	0xff800000
 801cb94:	3f317218 	.word	0x3f317218
 801cb98:	3f317200 	.word	0x3f317200
 801cb9c:	35bfbe8c 	.word	0x35bfbe8c
 801cba0:	b5ddea0e 	.word	0xb5ddea0e
 801cba4:	3331bb4c 	.word	0x3331bb4c
 801cba8:	388ab355 	.word	0x388ab355
 801cbac:	bb360b61 	.word	0xbb360b61
 801cbb0:	3e2aaaab 	.word	0x3e2aaaab
 801cbb4:	00000000 	.word	0x00000000

0801cbb8 <__ieee754_rem_pio2f>:
 801cbb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801cbba:	ee10 6a10 	vmov	r6, s0
 801cbbe:	4b88      	ldr	r3, [pc, #544]	@ (801cde0 <__ieee754_rem_pio2f+0x228>)
 801cbc0:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 801cbc4:	429d      	cmp	r5, r3
 801cbc6:	b087      	sub	sp, #28
 801cbc8:	4604      	mov	r4, r0
 801cbca:	d805      	bhi.n	801cbd8 <__ieee754_rem_pio2f+0x20>
 801cbcc:	2300      	movs	r3, #0
 801cbce:	ed80 0a00 	vstr	s0, [r0]
 801cbd2:	6043      	str	r3, [r0, #4]
 801cbd4:	2000      	movs	r0, #0
 801cbd6:	e022      	b.n	801cc1e <__ieee754_rem_pio2f+0x66>
 801cbd8:	4b82      	ldr	r3, [pc, #520]	@ (801cde4 <__ieee754_rem_pio2f+0x22c>)
 801cbda:	429d      	cmp	r5, r3
 801cbdc:	d83a      	bhi.n	801cc54 <__ieee754_rem_pio2f+0x9c>
 801cbde:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 801cbe2:	2e00      	cmp	r6, #0
 801cbe4:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 801cde8 <__ieee754_rem_pio2f+0x230>
 801cbe8:	4a80      	ldr	r2, [pc, #512]	@ (801cdec <__ieee754_rem_pio2f+0x234>)
 801cbea:	f023 030f 	bic.w	r3, r3, #15
 801cbee:	dd18      	ble.n	801cc22 <__ieee754_rem_pio2f+0x6a>
 801cbf0:	4293      	cmp	r3, r2
 801cbf2:	ee70 7a47 	vsub.f32	s15, s0, s14
 801cbf6:	bf09      	itett	eq
 801cbf8:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 801cdf0 <__ieee754_rem_pio2f+0x238>
 801cbfc:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 801cdf4 <__ieee754_rem_pio2f+0x23c>
 801cc00:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 801cdf8 <__ieee754_rem_pio2f+0x240>
 801cc04:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 801cc08:	ee37 7ae6 	vsub.f32	s14, s15, s13
 801cc0c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801cc10:	ed80 7a00 	vstr	s14, [r0]
 801cc14:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801cc18:	edc0 7a01 	vstr	s15, [r0, #4]
 801cc1c:	2001      	movs	r0, #1
 801cc1e:	b007      	add	sp, #28
 801cc20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801cc22:	4293      	cmp	r3, r2
 801cc24:	ee70 7a07 	vadd.f32	s15, s0, s14
 801cc28:	bf09      	itett	eq
 801cc2a:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 801cdf0 <__ieee754_rem_pio2f+0x238>
 801cc2e:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 801cdf4 <__ieee754_rem_pio2f+0x23c>
 801cc32:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 801cdf8 <__ieee754_rem_pio2f+0x240>
 801cc36:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 801cc3a:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801cc3e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801cc42:	ed80 7a00 	vstr	s14, [r0]
 801cc46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801cc4a:	edc0 7a01 	vstr	s15, [r0, #4]
 801cc4e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801cc52:	e7e4      	b.n	801cc1e <__ieee754_rem_pio2f+0x66>
 801cc54:	4b69      	ldr	r3, [pc, #420]	@ (801cdfc <__ieee754_rem_pio2f+0x244>)
 801cc56:	429d      	cmp	r5, r3
 801cc58:	d873      	bhi.n	801cd42 <__ieee754_rem_pio2f+0x18a>
 801cc5a:	f000 f8dd 	bl	801ce18 <fabsf>
 801cc5e:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 801ce00 <__ieee754_rem_pio2f+0x248>
 801cc62:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 801cc66:	eee0 7a07 	vfma.f32	s15, s0, s14
 801cc6a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801cc6e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801cc72:	ee17 0a90 	vmov	r0, s15
 801cc76:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 801cde8 <__ieee754_rem_pio2f+0x230>
 801cc7a:	eea7 0a67 	vfms.f32	s0, s14, s15
 801cc7e:	281f      	cmp	r0, #31
 801cc80:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 801cdf4 <__ieee754_rem_pio2f+0x23c>
 801cc84:	ee67 7a27 	vmul.f32	s15, s14, s15
 801cc88:	eeb1 6a47 	vneg.f32	s12, s14
 801cc8c:	ee70 6a67 	vsub.f32	s13, s0, s15
 801cc90:	ee16 1a90 	vmov	r1, s13
 801cc94:	dc09      	bgt.n	801ccaa <__ieee754_rem_pio2f+0xf2>
 801cc96:	4a5b      	ldr	r2, [pc, #364]	@ (801ce04 <__ieee754_rem_pio2f+0x24c>)
 801cc98:	1e47      	subs	r7, r0, #1
 801cc9a:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 801cc9e:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 801cca2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 801cca6:	4293      	cmp	r3, r2
 801cca8:	d107      	bne.n	801ccba <__ieee754_rem_pio2f+0x102>
 801ccaa:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 801ccae:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 801ccb2:	2a08      	cmp	r2, #8
 801ccb4:	ea4f 53e5 	mov.w	r3, r5, asr #23
 801ccb8:	dc14      	bgt.n	801cce4 <__ieee754_rem_pio2f+0x12c>
 801ccba:	6021      	str	r1, [r4, #0]
 801ccbc:	ed94 7a00 	vldr	s14, [r4]
 801ccc0:	ee30 0a47 	vsub.f32	s0, s0, s14
 801ccc4:	2e00      	cmp	r6, #0
 801ccc6:	ee30 0a67 	vsub.f32	s0, s0, s15
 801ccca:	ed84 0a01 	vstr	s0, [r4, #4]
 801ccce:	daa6      	bge.n	801cc1e <__ieee754_rem_pio2f+0x66>
 801ccd0:	eeb1 7a47 	vneg.f32	s14, s14
 801ccd4:	eeb1 0a40 	vneg.f32	s0, s0
 801ccd8:	ed84 7a00 	vstr	s14, [r4]
 801ccdc:	ed84 0a01 	vstr	s0, [r4, #4]
 801cce0:	4240      	negs	r0, r0
 801cce2:	e79c      	b.n	801cc1e <__ieee754_rem_pio2f+0x66>
 801cce4:	eddf 5a42 	vldr	s11, [pc, #264]	@ 801cdf0 <__ieee754_rem_pio2f+0x238>
 801cce8:	eef0 6a40 	vmov.f32	s13, s0
 801ccec:	eee6 6a25 	vfma.f32	s13, s12, s11
 801ccf0:	ee70 7a66 	vsub.f32	s15, s0, s13
 801ccf4:	eee6 7a25 	vfma.f32	s15, s12, s11
 801ccf8:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 801cdf8 <__ieee754_rem_pio2f+0x240>
 801ccfc:	eed7 7a25 	vfnms.f32	s15, s14, s11
 801cd00:	ee76 5ae7 	vsub.f32	s11, s13, s15
 801cd04:	ee15 2a90 	vmov	r2, s11
 801cd08:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 801cd0c:	1a5b      	subs	r3, r3, r1
 801cd0e:	2b19      	cmp	r3, #25
 801cd10:	dc04      	bgt.n	801cd1c <__ieee754_rem_pio2f+0x164>
 801cd12:	edc4 5a00 	vstr	s11, [r4]
 801cd16:	eeb0 0a66 	vmov.f32	s0, s13
 801cd1a:	e7cf      	b.n	801ccbc <__ieee754_rem_pio2f+0x104>
 801cd1c:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 801ce08 <__ieee754_rem_pio2f+0x250>
 801cd20:	eeb0 0a66 	vmov.f32	s0, s13
 801cd24:	eea6 0a25 	vfma.f32	s0, s12, s11
 801cd28:	ee76 7ac0 	vsub.f32	s15, s13, s0
 801cd2c:	eddf 6a37 	vldr	s13, [pc, #220]	@ 801ce0c <__ieee754_rem_pio2f+0x254>
 801cd30:	eee6 7a25 	vfma.f32	s15, s12, s11
 801cd34:	eed7 7a26 	vfnms.f32	s15, s14, s13
 801cd38:	ee30 7a67 	vsub.f32	s14, s0, s15
 801cd3c:	ed84 7a00 	vstr	s14, [r4]
 801cd40:	e7bc      	b.n	801ccbc <__ieee754_rem_pio2f+0x104>
 801cd42:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 801cd46:	d306      	bcc.n	801cd56 <__ieee754_rem_pio2f+0x19e>
 801cd48:	ee70 7a40 	vsub.f32	s15, s0, s0
 801cd4c:	edc0 7a01 	vstr	s15, [r0, #4]
 801cd50:	edc0 7a00 	vstr	s15, [r0]
 801cd54:	e73e      	b.n	801cbd4 <__ieee754_rem_pio2f+0x1c>
 801cd56:	15ea      	asrs	r2, r5, #23
 801cd58:	3a86      	subs	r2, #134	@ 0x86
 801cd5a:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 801cd5e:	ee07 3a90 	vmov	s15, r3
 801cd62:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801cd66:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 801ce10 <__ieee754_rem_pio2f+0x258>
 801cd6a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801cd6e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801cd72:	ed8d 7a03 	vstr	s14, [sp, #12]
 801cd76:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801cd7a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801cd7e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801cd82:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801cd86:	ed8d 7a04 	vstr	s14, [sp, #16]
 801cd8a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801cd8e:	eef5 7a40 	vcmp.f32	s15, #0.0
 801cd92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cd96:	edcd 7a05 	vstr	s15, [sp, #20]
 801cd9a:	d11e      	bne.n	801cdda <__ieee754_rem_pio2f+0x222>
 801cd9c:	eeb5 7a40 	vcmp.f32	s14, #0.0
 801cda0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cda4:	bf0c      	ite	eq
 801cda6:	2301      	moveq	r3, #1
 801cda8:	2302      	movne	r3, #2
 801cdaa:	491a      	ldr	r1, [pc, #104]	@ (801ce14 <__ieee754_rem_pio2f+0x25c>)
 801cdac:	9101      	str	r1, [sp, #4]
 801cdae:	2102      	movs	r1, #2
 801cdb0:	9100      	str	r1, [sp, #0]
 801cdb2:	a803      	add	r0, sp, #12
 801cdb4:	4621      	mov	r1, r4
 801cdb6:	f000 f89d 	bl	801cef4 <__kernel_rem_pio2f>
 801cdba:	2e00      	cmp	r6, #0
 801cdbc:	f6bf af2f 	bge.w	801cc1e <__ieee754_rem_pio2f+0x66>
 801cdc0:	edd4 7a00 	vldr	s15, [r4]
 801cdc4:	eef1 7a67 	vneg.f32	s15, s15
 801cdc8:	edc4 7a00 	vstr	s15, [r4]
 801cdcc:	edd4 7a01 	vldr	s15, [r4, #4]
 801cdd0:	eef1 7a67 	vneg.f32	s15, s15
 801cdd4:	edc4 7a01 	vstr	s15, [r4, #4]
 801cdd8:	e782      	b.n	801cce0 <__ieee754_rem_pio2f+0x128>
 801cdda:	2303      	movs	r3, #3
 801cddc:	e7e5      	b.n	801cdaa <__ieee754_rem_pio2f+0x1f2>
 801cdde:	bf00      	nop
 801cde0:	3f490fd8 	.word	0x3f490fd8
 801cde4:	4016cbe3 	.word	0x4016cbe3
 801cde8:	3fc90f80 	.word	0x3fc90f80
 801cdec:	3fc90fd0 	.word	0x3fc90fd0
 801cdf0:	37354400 	.word	0x37354400
 801cdf4:	37354443 	.word	0x37354443
 801cdf8:	2e85a308 	.word	0x2e85a308
 801cdfc:	43490f80 	.word	0x43490f80
 801ce00:	3f22f984 	.word	0x3f22f984
 801ce04:	0801ece4 	.word	0x0801ece4
 801ce08:	2e85a300 	.word	0x2e85a300
 801ce0c:	248d3132 	.word	0x248d3132
 801ce10:	43800000 	.word	0x43800000
 801ce14:	0801ed64 	.word	0x0801ed64

0801ce18 <fabsf>:
 801ce18:	ee10 3a10 	vmov	r3, s0
 801ce1c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801ce20:	ee00 3a10 	vmov	s0, r3
 801ce24:	4770      	bx	lr
	...

0801ce28 <scalbnf>:
 801ce28:	ee10 3a10 	vmov	r3, s0
 801ce2c:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 801ce30:	d02b      	beq.n	801ce8a <scalbnf+0x62>
 801ce32:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 801ce36:	d302      	bcc.n	801ce3e <scalbnf+0x16>
 801ce38:	ee30 0a00 	vadd.f32	s0, s0, s0
 801ce3c:	4770      	bx	lr
 801ce3e:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 801ce42:	d123      	bne.n	801ce8c <scalbnf+0x64>
 801ce44:	4b24      	ldr	r3, [pc, #144]	@ (801ced8 <scalbnf+0xb0>)
 801ce46:	eddf 7a25 	vldr	s15, [pc, #148]	@ 801cedc <scalbnf+0xb4>
 801ce4a:	4298      	cmp	r0, r3
 801ce4c:	ee20 0a27 	vmul.f32	s0, s0, s15
 801ce50:	db17      	blt.n	801ce82 <scalbnf+0x5a>
 801ce52:	ee10 3a10 	vmov	r3, s0
 801ce56:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801ce5a:	3a19      	subs	r2, #25
 801ce5c:	f24c 3150 	movw	r1, #50000	@ 0xc350
 801ce60:	4288      	cmp	r0, r1
 801ce62:	dd15      	ble.n	801ce90 <scalbnf+0x68>
 801ce64:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 801cee0 <scalbnf+0xb8>
 801ce68:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 801cee4 <scalbnf+0xbc>
 801ce6c:	ee10 3a10 	vmov	r3, s0
 801ce70:	eeb0 7a67 	vmov.f32	s14, s15
 801ce74:	2b00      	cmp	r3, #0
 801ce76:	bfb8      	it	lt
 801ce78:	eef0 7a66 	vmovlt.f32	s15, s13
 801ce7c:	ee27 0a87 	vmul.f32	s0, s15, s14
 801ce80:	4770      	bx	lr
 801ce82:	eddf 7a19 	vldr	s15, [pc, #100]	@ 801cee8 <scalbnf+0xc0>
 801ce86:	ee27 0a80 	vmul.f32	s0, s15, s0
 801ce8a:	4770      	bx	lr
 801ce8c:	0dd2      	lsrs	r2, r2, #23
 801ce8e:	e7e5      	b.n	801ce5c <scalbnf+0x34>
 801ce90:	4410      	add	r0, r2
 801ce92:	28fe      	cmp	r0, #254	@ 0xfe
 801ce94:	dce6      	bgt.n	801ce64 <scalbnf+0x3c>
 801ce96:	2800      	cmp	r0, #0
 801ce98:	dd06      	ble.n	801cea8 <scalbnf+0x80>
 801ce9a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 801ce9e:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 801cea2:	ee00 3a10 	vmov	s0, r3
 801cea6:	4770      	bx	lr
 801cea8:	f110 0f16 	cmn.w	r0, #22
 801ceac:	da09      	bge.n	801cec2 <scalbnf+0x9a>
 801ceae:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 801cee8 <scalbnf+0xc0>
 801ceb2:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 801ceec <scalbnf+0xc4>
 801ceb6:	ee10 3a10 	vmov	r3, s0
 801ceba:	eeb0 7a67 	vmov.f32	s14, s15
 801cebe:	2b00      	cmp	r3, #0
 801cec0:	e7d9      	b.n	801ce76 <scalbnf+0x4e>
 801cec2:	3019      	adds	r0, #25
 801cec4:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 801cec8:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 801cecc:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 801cef0 <scalbnf+0xc8>
 801ced0:	ee07 3a90 	vmov	s15, r3
 801ced4:	e7d7      	b.n	801ce86 <scalbnf+0x5e>
 801ced6:	bf00      	nop
 801ced8:	ffff3cb0 	.word	0xffff3cb0
 801cedc:	4c000000 	.word	0x4c000000
 801cee0:	7149f2ca 	.word	0x7149f2ca
 801cee4:	f149f2ca 	.word	0xf149f2ca
 801cee8:	0da24260 	.word	0x0da24260
 801ceec:	8da24260 	.word	0x8da24260
 801cef0:	33000000 	.word	0x33000000

0801cef4 <__kernel_rem_pio2f>:
 801cef4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cef8:	ed2d 8b04 	vpush	{d8-d9}
 801cefc:	b0d9      	sub	sp, #356	@ 0x164
 801cefe:	4690      	mov	r8, r2
 801cf00:	9001      	str	r0, [sp, #4]
 801cf02:	4ab6      	ldr	r2, [pc, #728]	@ (801d1dc <__kernel_rem_pio2f+0x2e8>)
 801cf04:	9866      	ldr	r0, [sp, #408]	@ 0x198
 801cf06:	f118 0f04 	cmn.w	r8, #4
 801cf0a:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 801cf0e:	460f      	mov	r7, r1
 801cf10:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 801cf14:	db26      	blt.n	801cf64 <__kernel_rem_pio2f+0x70>
 801cf16:	f1b8 0203 	subs.w	r2, r8, #3
 801cf1a:	bf48      	it	mi
 801cf1c:	f108 0204 	addmi.w	r2, r8, #4
 801cf20:	10d2      	asrs	r2, r2, #3
 801cf22:	1c55      	adds	r5, r2, #1
 801cf24:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 801cf26:	ed9f 7ab1 	vldr	s14, [pc, #708]	@ 801d1ec <__kernel_rem_pio2f+0x2f8>
 801cf2a:	00e8      	lsls	r0, r5, #3
 801cf2c:	eba2 060b 	sub.w	r6, r2, fp
 801cf30:	9002      	str	r0, [sp, #8]
 801cf32:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 801cf36:	eb0a 0c0b 	add.w	ip, sl, fp
 801cf3a:	ac1c      	add	r4, sp, #112	@ 0x70
 801cf3c:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 801cf40:	2000      	movs	r0, #0
 801cf42:	4560      	cmp	r0, ip
 801cf44:	dd10      	ble.n	801cf68 <__kernel_rem_pio2f+0x74>
 801cf46:	a91c      	add	r1, sp, #112	@ 0x70
 801cf48:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 801cf4c:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 801cf50:	2600      	movs	r6, #0
 801cf52:	4556      	cmp	r6, sl
 801cf54:	dc24      	bgt.n	801cfa0 <__kernel_rem_pio2f+0xac>
 801cf56:	f8dd e004 	ldr.w	lr, [sp, #4]
 801cf5a:	eddf 7aa4 	vldr	s15, [pc, #656]	@ 801d1ec <__kernel_rem_pio2f+0x2f8>
 801cf5e:	4684      	mov	ip, r0
 801cf60:	2400      	movs	r4, #0
 801cf62:	e016      	b.n	801cf92 <__kernel_rem_pio2f+0x9e>
 801cf64:	2200      	movs	r2, #0
 801cf66:	e7dc      	b.n	801cf22 <__kernel_rem_pio2f+0x2e>
 801cf68:	42c6      	cmn	r6, r0
 801cf6a:	bf5d      	ittte	pl
 801cf6c:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 801cf70:	ee07 1a90 	vmovpl	s15, r1
 801cf74:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 801cf78:	eef0 7a47 	vmovmi.f32	s15, s14
 801cf7c:	ece4 7a01 	vstmia	r4!, {s15}
 801cf80:	3001      	adds	r0, #1
 801cf82:	e7de      	b.n	801cf42 <__kernel_rem_pio2f+0x4e>
 801cf84:	ecfe 6a01 	vldmia	lr!, {s13}
 801cf88:	ed3c 7a01 	vldmdb	ip!, {s14}
 801cf8c:	eee6 7a87 	vfma.f32	s15, s13, s14
 801cf90:	3401      	adds	r4, #1
 801cf92:	455c      	cmp	r4, fp
 801cf94:	ddf6      	ble.n	801cf84 <__kernel_rem_pio2f+0x90>
 801cf96:	ece9 7a01 	vstmia	r9!, {s15}
 801cf9a:	3601      	adds	r6, #1
 801cf9c:	3004      	adds	r0, #4
 801cf9e:	e7d8      	b.n	801cf52 <__kernel_rem_pio2f+0x5e>
 801cfa0:	a908      	add	r1, sp, #32
 801cfa2:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801cfa6:	9104      	str	r1, [sp, #16]
 801cfa8:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 801cfaa:	eddf 8a8f 	vldr	s17, [pc, #572]	@ 801d1e8 <__kernel_rem_pio2f+0x2f4>
 801cfae:	ed9f 9a8d 	vldr	s18, [pc, #564]	@ 801d1e4 <__kernel_rem_pio2f+0x2f0>
 801cfb2:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 801cfb6:	9203      	str	r2, [sp, #12]
 801cfb8:	4654      	mov	r4, sl
 801cfba:	00a2      	lsls	r2, r4, #2
 801cfbc:	9205      	str	r2, [sp, #20]
 801cfbe:	aa58      	add	r2, sp, #352	@ 0x160
 801cfc0:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 801cfc4:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 801cfc8:	a944      	add	r1, sp, #272	@ 0x110
 801cfca:	aa08      	add	r2, sp, #32
 801cfcc:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 801cfd0:	4694      	mov	ip, r2
 801cfd2:	4626      	mov	r6, r4
 801cfd4:	2e00      	cmp	r6, #0
 801cfd6:	dc4c      	bgt.n	801d072 <__kernel_rem_pio2f+0x17e>
 801cfd8:	4628      	mov	r0, r5
 801cfda:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801cfde:	f7ff ff23 	bl	801ce28 <scalbnf>
 801cfe2:	eeb0 8a40 	vmov.f32	s16, s0
 801cfe6:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 801cfea:	ee28 0a00 	vmul.f32	s0, s16, s0
 801cfee:	f000 f9e9 	bl	801d3c4 <floorf>
 801cff2:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 801cff6:	eea0 8a67 	vfms.f32	s16, s0, s15
 801cffa:	2d00      	cmp	r5, #0
 801cffc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801d000:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 801d004:	ee17 9a90 	vmov	r9, s15
 801d008:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801d00c:	ee38 8a67 	vsub.f32	s16, s16, s15
 801d010:	dd41      	ble.n	801d096 <__kernel_rem_pio2f+0x1a2>
 801d012:	f104 3cff 	add.w	ip, r4, #4294967295	@ 0xffffffff
 801d016:	a908      	add	r1, sp, #32
 801d018:	f1c5 0e08 	rsb	lr, r5, #8
 801d01c:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 801d020:	fa46 f00e 	asr.w	r0, r6, lr
 801d024:	4481      	add	r9, r0
 801d026:	fa00 f00e 	lsl.w	r0, r0, lr
 801d02a:	1a36      	subs	r6, r6, r0
 801d02c:	f1c5 0007 	rsb	r0, r5, #7
 801d030:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 801d034:	4106      	asrs	r6, r0
 801d036:	2e00      	cmp	r6, #0
 801d038:	dd3c      	ble.n	801d0b4 <__kernel_rem_pio2f+0x1c0>
 801d03a:	f04f 0e00 	mov.w	lr, #0
 801d03e:	f109 0901 	add.w	r9, r9, #1
 801d042:	4670      	mov	r0, lr
 801d044:	4574      	cmp	r4, lr
 801d046:	dc68      	bgt.n	801d11a <__kernel_rem_pio2f+0x226>
 801d048:	2d00      	cmp	r5, #0
 801d04a:	dd03      	ble.n	801d054 <__kernel_rem_pio2f+0x160>
 801d04c:	2d01      	cmp	r5, #1
 801d04e:	d074      	beq.n	801d13a <__kernel_rem_pio2f+0x246>
 801d050:	2d02      	cmp	r5, #2
 801d052:	d07d      	beq.n	801d150 <__kernel_rem_pio2f+0x25c>
 801d054:	2e02      	cmp	r6, #2
 801d056:	d12d      	bne.n	801d0b4 <__kernel_rem_pio2f+0x1c0>
 801d058:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 801d05c:	ee30 8a48 	vsub.f32	s16, s0, s16
 801d060:	b340      	cbz	r0, 801d0b4 <__kernel_rem_pio2f+0x1c0>
 801d062:	4628      	mov	r0, r5
 801d064:	9306      	str	r3, [sp, #24]
 801d066:	f7ff fedf 	bl	801ce28 <scalbnf>
 801d06a:	9b06      	ldr	r3, [sp, #24]
 801d06c:	ee38 8a40 	vsub.f32	s16, s16, s0
 801d070:	e020      	b.n	801d0b4 <__kernel_rem_pio2f+0x1c0>
 801d072:	ee60 7a28 	vmul.f32	s15, s0, s17
 801d076:	3e01      	subs	r6, #1
 801d078:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801d07c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801d080:	eea7 0ac9 	vfms.f32	s0, s15, s18
 801d084:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801d088:	ecac 0a01 	vstmia	ip!, {s0}
 801d08c:	ed30 0a01 	vldmdb	r0!, {s0}
 801d090:	ee37 0a80 	vadd.f32	s0, s15, s0
 801d094:	e79e      	b.n	801cfd4 <__kernel_rem_pio2f+0xe0>
 801d096:	d105      	bne.n	801d0a4 <__kernel_rem_pio2f+0x1b0>
 801d098:	1e60      	subs	r0, r4, #1
 801d09a:	a908      	add	r1, sp, #32
 801d09c:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 801d0a0:	11f6      	asrs	r6, r6, #7
 801d0a2:	e7c8      	b.n	801d036 <__kernel_rem_pio2f+0x142>
 801d0a4:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 801d0a8:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801d0ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d0b0:	da31      	bge.n	801d116 <__kernel_rem_pio2f+0x222>
 801d0b2:	2600      	movs	r6, #0
 801d0b4:	eeb5 8a40 	vcmp.f32	s16, #0.0
 801d0b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d0bc:	f040 8098 	bne.w	801d1f0 <__kernel_rem_pio2f+0x2fc>
 801d0c0:	1e60      	subs	r0, r4, #1
 801d0c2:	2200      	movs	r2, #0
 801d0c4:	4550      	cmp	r0, sl
 801d0c6:	da4b      	bge.n	801d160 <__kernel_rem_pio2f+0x26c>
 801d0c8:	2a00      	cmp	r2, #0
 801d0ca:	d065      	beq.n	801d198 <__kernel_rem_pio2f+0x2a4>
 801d0cc:	3c01      	subs	r4, #1
 801d0ce:	ab08      	add	r3, sp, #32
 801d0d0:	3d08      	subs	r5, #8
 801d0d2:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 801d0d6:	2b00      	cmp	r3, #0
 801d0d8:	d0f8      	beq.n	801d0cc <__kernel_rem_pio2f+0x1d8>
 801d0da:	4628      	mov	r0, r5
 801d0dc:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 801d0e0:	f7ff fea2 	bl	801ce28 <scalbnf>
 801d0e4:	1c63      	adds	r3, r4, #1
 801d0e6:	aa44      	add	r2, sp, #272	@ 0x110
 801d0e8:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 801d1e8 <__kernel_rem_pio2f+0x2f4>
 801d0ec:	0099      	lsls	r1, r3, #2
 801d0ee:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801d0f2:	4623      	mov	r3, r4
 801d0f4:	2b00      	cmp	r3, #0
 801d0f6:	f280 80a9 	bge.w	801d24c <__kernel_rem_pio2f+0x358>
 801d0fa:	4623      	mov	r3, r4
 801d0fc:	2b00      	cmp	r3, #0
 801d0fe:	f2c0 80c7 	blt.w	801d290 <__kernel_rem_pio2f+0x39c>
 801d102:	aa44      	add	r2, sp, #272	@ 0x110
 801d104:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 801d108:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 801d1e0 <__kernel_rem_pio2f+0x2ec>
 801d10c:	eddf 7a37 	vldr	s15, [pc, #220]	@ 801d1ec <__kernel_rem_pio2f+0x2f8>
 801d110:	2000      	movs	r0, #0
 801d112:	1ae2      	subs	r2, r4, r3
 801d114:	e0b1      	b.n	801d27a <__kernel_rem_pio2f+0x386>
 801d116:	2602      	movs	r6, #2
 801d118:	e78f      	b.n	801d03a <__kernel_rem_pio2f+0x146>
 801d11a:	f852 1b04 	ldr.w	r1, [r2], #4
 801d11e:	b948      	cbnz	r0, 801d134 <__kernel_rem_pio2f+0x240>
 801d120:	b121      	cbz	r1, 801d12c <__kernel_rem_pio2f+0x238>
 801d122:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 801d126:	f842 1c04 	str.w	r1, [r2, #-4]
 801d12a:	2101      	movs	r1, #1
 801d12c:	f10e 0e01 	add.w	lr, lr, #1
 801d130:	4608      	mov	r0, r1
 801d132:	e787      	b.n	801d044 <__kernel_rem_pio2f+0x150>
 801d134:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 801d138:	e7f5      	b.n	801d126 <__kernel_rem_pio2f+0x232>
 801d13a:	f104 3cff 	add.w	ip, r4, #4294967295	@ 0xffffffff
 801d13e:	aa08      	add	r2, sp, #32
 801d140:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 801d144:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 801d148:	a908      	add	r1, sp, #32
 801d14a:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 801d14e:	e781      	b.n	801d054 <__kernel_rem_pio2f+0x160>
 801d150:	f104 3cff 	add.w	ip, r4, #4294967295	@ 0xffffffff
 801d154:	aa08      	add	r2, sp, #32
 801d156:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 801d15a:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 801d15e:	e7f3      	b.n	801d148 <__kernel_rem_pio2f+0x254>
 801d160:	a908      	add	r1, sp, #32
 801d162:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 801d166:	3801      	subs	r0, #1
 801d168:	430a      	orrs	r2, r1
 801d16a:	e7ab      	b.n	801d0c4 <__kernel_rem_pio2f+0x1d0>
 801d16c:	3201      	adds	r2, #1
 801d16e:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 801d172:	2e00      	cmp	r6, #0
 801d174:	d0fa      	beq.n	801d16c <__kernel_rem_pio2f+0x278>
 801d176:	9905      	ldr	r1, [sp, #20]
 801d178:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 801d17c:	eb0d 0001 	add.w	r0, sp, r1
 801d180:	18e6      	adds	r6, r4, r3
 801d182:	a91c      	add	r1, sp, #112	@ 0x70
 801d184:	f104 0c01 	add.w	ip, r4, #1
 801d188:	384c      	subs	r0, #76	@ 0x4c
 801d18a:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 801d18e:	4422      	add	r2, r4
 801d190:	4562      	cmp	r2, ip
 801d192:	da04      	bge.n	801d19e <__kernel_rem_pio2f+0x2aa>
 801d194:	4614      	mov	r4, r2
 801d196:	e710      	b.n	801cfba <__kernel_rem_pio2f+0xc6>
 801d198:	9804      	ldr	r0, [sp, #16]
 801d19a:	2201      	movs	r2, #1
 801d19c:	e7e7      	b.n	801d16e <__kernel_rem_pio2f+0x27a>
 801d19e:	9903      	ldr	r1, [sp, #12]
 801d1a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 801d1a4:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 801d1a8:	9105      	str	r1, [sp, #20]
 801d1aa:	ee07 1a90 	vmov	s15, r1
 801d1ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801d1b2:	2400      	movs	r4, #0
 801d1b4:	ece6 7a01 	vstmia	r6!, {s15}
 801d1b8:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 801d1ec <__kernel_rem_pio2f+0x2f8>
 801d1bc:	46b1      	mov	r9, r6
 801d1be:	455c      	cmp	r4, fp
 801d1c0:	dd04      	ble.n	801d1cc <__kernel_rem_pio2f+0x2d8>
 801d1c2:	ece0 7a01 	vstmia	r0!, {s15}
 801d1c6:	f10c 0c01 	add.w	ip, ip, #1
 801d1ca:	e7e1      	b.n	801d190 <__kernel_rem_pio2f+0x29c>
 801d1cc:	ecfe 6a01 	vldmia	lr!, {s13}
 801d1d0:	ed39 7a01 	vldmdb	r9!, {s14}
 801d1d4:	3401      	adds	r4, #1
 801d1d6:	eee6 7a87 	vfma.f32	s15, s13, s14
 801d1da:	e7f0      	b.n	801d1be <__kernel_rem_pio2f+0x2ca>
 801d1dc:	0801f0a8 	.word	0x0801f0a8
 801d1e0:	0801f07c 	.word	0x0801f07c
 801d1e4:	43800000 	.word	0x43800000
 801d1e8:	3b800000 	.word	0x3b800000
 801d1ec:	00000000 	.word	0x00000000
 801d1f0:	9b02      	ldr	r3, [sp, #8]
 801d1f2:	eeb0 0a48 	vmov.f32	s0, s16
 801d1f6:	eba3 0008 	sub.w	r0, r3, r8
 801d1fa:	f7ff fe15 	bl	801ce28 <scalbnf>
 801d1fe:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 801d1e4 <__kernel_rem_pio2f+0x2f0>
 801d202:	eeb4 0ac7 	vcmpe.f32	s0, s14
 801d206:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d20a:	db19      	blt.n	801d240 <__kernel_rem_pio2f+0x34c>
 801d20c:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 801d1e8 <__kernel_rem_pio2f+0x2f4>
 801d210:	ee60 7a27 	vmul.f32	s15, s0, s15
 801d214:	aa08      	add	r2, sp, #32
 801d216:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801d21a:	3508      	adds	r5, #8
 801d21c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801d220:	eea7 0ac7 	vfms.f32	s0, s15, s14
 801d224:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801d228:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801d22c:	ee10 3a10 	vmov	r3, s0
 801d230:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 801d234:	ee17 3a90 	vmov	r3, s15
 801d238:	3401      	adds	r4, #1
 801d23a:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 801d23e:	e74c      	b.n	801d0da <__kernel_rem_pio2f+0x1e6>
 801d240:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801d244:	aa08      	add	r2, sp, #32
 801d246:	ee10 3a10 	vmov	r3, s0
 801d24a:	e7f6      	b.n	801d23a <__kernel_rem_pio2f+0x346>
 801d24c:	a808      	add	r0, sp, #32
 801d24e:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 801d252:	9001      	str	r0, [sp, #4]
 801d254:	ee07 0a90 	vmov	s15, r0
 801d258:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801d25c:	3b01      	subs	r3, #1
 801d25e:	ee67 7a80 	vmul.f32	s15, s15, s0
 801d262:	ee20 0a07 	vmul.f32	s0, s0, s14
 801d266:	ed62 7a01 	vstmdb	r2!, {s15}
 801d26a:	e743      	b.n	801d0f4 <__kernel_rem_pio2f+0x200>
 801d26c:	ecfc 6a01 	vldmia	ip!, {s13}
 801d270:	ecb5 7a01 	vldmia	r5!, {s14}
 801d274:	eee6 7a87 	vfma.f32	s15, s13, s14
 801d278:	3001      	adds	r0, #1
 801d27a:	4550      	cmp	r0, sl
 801d27c:	dc01      	bgt.n	801d282 <__kernel_rem_pio2f+0x38e>
 801d27e:	4290      	cmp	r0, r2
 801d280:	ddf4      	ble.n	801d26c <__kernel_rem_pio2f+0x378>
 801d282:	a858      	add	r0, sp, #352	@ 0x160
 801d284:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 801d288:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 801d28c:	3b01      	subs	r3, #1
 801d28e:	e735      	b.n	801d0fc <__kernel_rem_pio2f+0x208>
 801d290:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 801d292:	2b02      	cmp	r3, #2
 801d294:	dc09      	bgt.n	801d2aa <__kernel_rem_pio2f+0x3b6>
 801d296:	2b00      	cmp	r3, #0
 801d298:	dc27      	bgt.n	801d2ea <__kernel_rem_pio2f+0x3f6>
 801d29a:	d040      	beq.n	801d31e <__kernel_rem_pio2f+0x42a>
 801d29c:	f009 0007 	and.w	r0, r9, #7
 801d2a0:	b059      	add	sp, #356	@ 0x164
 801d2a2:	ecbd 8b04 	vpop	{d8-d9}
 801d2a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d2aa:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 801d2ac:	2b03      	cmp	r3, #3
 801d2ae:	d1f5      	bne.n	801d29c <__kernel_rem_pio2f+0x3a8>
 801d2b0:	aa30      	add	r2, sp, #192	@ 0xc0
 801d2b2:	1f0b      	subs	r3, r1, #4
 801d2b4:	4413      	add	r3, r2
 801d2b6:	461a      	mov	r2, r3
 801d2b8:	4620      	mov	r0, r4
 801d2ba:	2800      	cmp	r0, #0
 801d2bc:	dc50      	bgt.n	801d360 <__kernel_rem_pio2f+0x46c>
 801d2be:	4622      	mov	r2, r4
 801d2c0:	2a01      	cmp	r2, #1
 801d2c2:	dc5d      	bgt.n	801d380 <__kernel_rem_pio2f+0x48c>
 801d2c4:	ab30      	add	r3, sp, #192	@ 0xc0
 801d2c6:	ed5f 7a37 	vldr	s15, [pc, #-220]	@ 801d1ec <__kernel_rem_pio2f+0x2f8>
 801d2ca:	440b      	add	r3, r1
 801d2cc:	2c01      	cmp	r4, #1
 801d2ce:	dc67      	bgt.n	801d3a0 <__kernel_rem_pio2f+0x4ac>
 801d2d0:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 801d2d4:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 801d2d8:	2e00      	cmp	r6, #0
 801d2da:	d167      	bne.n	801d3ac <__kernel_rem_pio2f+0x4b8>
 801d2dc:	edc7 6a00 	vstr	s13, [r7]
 801d2e0:	ed87 7a01 	vstr	s14, [r7, #4]
 801d2e4:	edc7 7a02 	vstr	s15, [r7, #8]
 801d2e8:	e7d8      	b.n	801d29c <__kernel_rem_pio2f+0x3a8>
 801d2ea:	ab30      	add	r3, sp, #192	@ 0xc0
 801d2ec:	ed1f 7a41 	vldr	s14, [pc, #-260]	@ 801d1ec <__kernel_rem_pio2f+0x2f8>
 801d2f0:	440b      	add	r3, r1
 801d2f2:	4622      	mov	r2, r4
 801d2f4:	2a00      	cmp	r2, #0
 801d2f6:	da24      	bge.n	801d342 <__kernel_rem_pio2f+0x44e>
 801d2f8:	b34e      	cbz	r6, 801d34e <__kernel_rem_pio2f+0x45a>
 801d2fa:	eef1 7a47 	vneg.f32	s15, s14
 801d2fe:	edc7 7a00 	vstr	s15, [r7]
 801d302:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 801d306:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801d30a:	aa31      	add	r2, sp, #196	@ 0xc4
 801d30c:	2301      	movs	r3, #1
 801d30e:	429c      	cmp	r4, r3
 801d310:	da20      	bge.n	801d354 <__kernel_rem_pio2f+0x460>
 801d312:	b10e      	cbz	r6, 801d318 <__kernel_rem_pio2f+0x424>
 801d314:	eef1 7a67 	vneg.f32	s15, s15
 801d318:	edc7 7a01 	vstr	s15, [r7, #4]
 801d31c:	e7be      	b.n	801d29c <__kernel_rem_pio2f+0x3a8>
 801d31e:	ab30      	add	r3, sp, #192	@ 0xc0
 801d320:	ed5f 7a4e 	vldr	s15, [pc, #-312]	@ 801d1ec <__kernel_rem_pio2f+0x2f8>
 801d324:	440b      	add	r3, r1
 801d326:	2c00      	cmp	r4, #0
 801d328:	da05      	bge.n	801d336 <__kernel_rem_pio2f+0x442>
 801d32a:	b10e      	cbz	r6, 801d330 <__kernel_rem_pio2f+0x43c>
 801d32c:	eef1 7a67 	vneg.f32	s15, s15
 801d330:	edc7 7a00 	vstr	s15, [r7]
 801d334:	e7b2      	b.n	801d29c <__kernel_rem_pio2f+0x3a8>
 801d336:	ed33 7a01 	vldmdb	r3!, {s14}
 801d33a:	3c01      	subs	r4, #1
 801d33c:	ee77 7a87 	vadd.f32	s15, s15, s14
 801d340:	e7f1      	b.n	801d326 <__kernel_rem_pio2f+0x432>
 801d342:	ed73 7a01 	vldmdb	r3!, {s15}
 801d346:	3a01      	subs	r2, #1
 801d348:	ee37 7a27 	vadd.f32	s14, s14, s15
 801d34c:	e7d2      	b.n	801d2f4 <__kernel_rem_pio2f+0x400>
 801d34e:	eef0 7a47 	vmov.f32	s15, s14
 801d352:	e7d4      	b.n	801d2fe <__kernel_rem_pio2f+0x40a>
 801d354:	ecb2 7a01 	vldmia	r2!, {s14}
 801d358:	3301      	adds	r3, #1
 801d35a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801d35e:	e7d6      	b.n	801d30e <__kernel_rem_pio2f+0x41a>
 801d360:	ed72 7a01 	vldmdb	r2!, {s15}
 801d364:	edd2 6a01 	vldr	s13, [r2, #4]
 801d368:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801d36c:	3801      	subs	r0, #1
 801d36e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801d372:	ed82 7a00 	vstr	s14, [r2]
 801d376:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801d37a:	edc2 7a01 	vstr	s15, [r2, #4]
 801d37e:	e79c      	b.n	801d2ba <__kernel_rem_pio2f+0x3c6>
 801d380:	ed73 7a01 	vldmdb	r3!, {s15}
 801d384:	edd3 6a01 	vldr	s13, [r3, #4]
 801d388:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801d38c:	3a01      	subs	r2, #1
 801d38e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801d392:	ed83 7a00 	vstr	s14, [r3]
 801d396:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801d39a:	edc3 7a01 	vstr	s15, [r3, #4]
 801d39e:	e78f      	b.n	801d2c0 <__kernel_rem_pio2f+0x3cc>
 801d3a0:	ed33 7a01 	vldmdb	r3!, {s14}
 801d3a4:	3c01      	subs	r4, #1
 801d3a6:	ee77 7a87 	vadd.f32	s15, s15, s14
 801d3aa:	e78f      	b.n	801d2cc <__kernel_rem_pio2f+0x3d8>
 801d3ac:	eef1 6a66 	vneg.f32	s13, s13
 801d3b0:	eeb1 7a47 	vneg.f32	s14, s14
 801d3b4:	edc7 6a00 	vstr	s13, [r7]
 801d3b8:	ed87 7a01 	vstr	s14, [r7, #4]
 801d3bc:	eef1 7a67 	vneg.f32	s15, s15
 801d3c0:	e790      	b.n	801d2e4 <__kernel_rem_pio2f+0x3f0>
 801d3c2:	bf00      	nop

0801d3c4 <floorf>:
 801d3c4:	ee10 3a10 	vmov	r3, s0
 801d3c8:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801d3cc:	3a7f      	subs	r2, #127	@ 0x7f
 801d3ce:	2a16      	cmp	r2, #22
 801d3d0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 801d3d4:	dc2b      	bgt.n	801d42e <floorf+0x6a>
 801d3d6:	2a00      	cmp	r2, #0
 801d3d8:	da12      	bge.n	801d400 <floorf+0x3c>
 801d3da:	eddf 7a19 	vldr	s15, [pc, #100]	@ 801d440 <floorf+0x7c>
 801d3de:	ee30 0a27 	vadd.f32	s0, s0, s15
 801d3e2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801d3e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d3ea:	dd06      	ble.n	801d3fa <floorf+0x36>
 801d3ec:	2b00      	cmp	r3, #0
 801d3ee:	da24      	bge.n	801d43a <floorf+0x76>
 801d3f0:	2900      	cmp	r1, #0
 801d3f2:	4b14      	ldr	r3, [pc, #80]	@ (801d444 <floorf+0x80>)
 801d3f4:	bf08      	it	eq
 801d3f6:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 801d3fa:	ee00 3a10 	vmov	s0, r3
 801d3fe:	4770      	bx	lr
 801d400:	4911      	ldr	r1, [pc, #68]	@ (801d448 <floorf+0x84>)
 801d402:	4111      	asrs	r1, r2
 801d404:	420b      	tst	r3, r1
 801d406:	d0fa      	beq.n	801d3fe <floorf+0x3a>
 801d408:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 801d440 <floorf+0x7c>
 801d40c:	ee30 0a27 	vadd.f32	s0, s0, s15
 801d410:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801d414:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d418:	ddef      	ble.n	801d3fa <floorf+0x36>
 801d41a:	2b00      	cmp	r3, #0
 801d41c:	bfbe      	ittt	lt
 801d41e:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 801d422:	fa40 f202 	asrlt.w	r2, r0, r2
 801d426:	189b      	addlt	r3, r3, r2
 801d428:	ea23 0301 	bic.w	r3, r3, r1
 801d42c:	e7e5      	b.n	801d3fa <floorf+0x36>
 801d42e:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 801d432:	d3e4      	bcc.n	801d3fe <floorf+0x3a>
 801d434:	ee30 0a00 	vadd.f32	s0, s0, s0
 801d438:	4770      	bx	lr
 801d43a:	2300      	movs	r3, #0
 801d43c:	e7dd      	b.n	801d3fa <floorf+0x36>
 801d43e:	bf00      	nop
 801d440:	7149f2ca 	.word	0x7149f2ca
 801d444:	bf800000 	.word	0xbf800000
 801d448:	007fffff 	.word	0x007fffff

0801d44c <_init>:
 801d44c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d44e:	bf00      	nop
 801d450:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801d452:	bc08      	pop	{r3}
 801d454:	469e      	mov	lr, r3
 801d456:	4770      	bx	lr

0801d458 <_fini>:
 801d458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d45a:	bf00      	nop
 801d45c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801d45e:	bc08      	pop	{r3}
 801d460:	469e      	mov	lr, r3
 801d462:	4770      	bx	lr
